[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "c programs are prone to leaking memory",
    "start": "80",
    "end": "2399"
  },
  {
    "text": "and if you don't believe me let me show",
    "start": "2399",
    "end": "3919"
  },
  {
    "text": "you a quick example read this snippet of",
    "start": "3919",
    "end": "6080"
  },
  {
    "text": "c code here it may not be incredibly",
    "start": "6080",
    "end": "7919"
  },
  {
    "text": "obvious but in a couple of edge cases",
    "start": "7919",
    "end": "9840"
  },
  {
    "text": "this program will fail to free memory",
    "start": "9840",
    "end": "12080"
  },
  {
    "text": "from the heap and ultimately leak it",
    "start": "12080",
    "end": "14080"
  },
  {
    "text": "leaving it unable to be freed by the",
    "start": "14080",
    "end": "16000"
  },
  {
    "text": "program leaked memory over time will",
    "start": "16000",
    "end": "18240"
  },
  {
    "text": "waste resources available to your",
    "start": "18240",
    "end": "20000"
  },
  {
    "text": "program and in the long run a degrade",
    "start": "20000",
    "end": "22160"
  },
  {
    "text": "overall system performance some",
    "start": "22160",
    "end": "24000"
  },
  {
    "text": "languages like golang for example rely",
    "start": "24000",
    "end": "26560"
  },
  {
    "text": "on a garbage collector a garbage",
    "start": "26560",
    "end": "28240"
  },
  {
    "text": "collector is a runtime concept that",
    "start": "28240",
    "end": "30400"
  },
  {
    "text": "checks for segments of memory that are",
    "start": "30400",
    "end": "32480"
  },
  {
    "text": "no longer accessible and frees them",
    "start": "32480",
    "end": "34640"
  },
  {
    "text": "without user or programmer intervention",
    "start": "34640",
    "end": "36880"
  },
  {
    "text": "this however comes at the cost of",
    "start": "36880",
    "end": "38719"
  },
  {
    "text": "performance as the language needs to",
    "start": "38719",
    "end": "40640"
  },
  {
    "text": "compile in a runtime that executes on",
    "start": "40640",
    "end": "43440"
  },
  {
    "text": "top of the program in question this can",
    "start": "43440",
    "end": "45680"
  },
  {
    "text": "be bulky and for lack of a better term",
    "start": "45680",
    "end": "47920"
  },
  {
    "text": "inefficient",
    "start": "47920",
    "end": "49120"
  },
  {
    "start": "49000",
    "end": "77000"
  },
  {
    "text": "rust on the other hand handles memory",
    "start": "49120",
    "end": "51039"
  },
  {
    "text": "management at compile time",
    "start": "51039",
    "end": "53199"
  },
  {
    "text": "by doing memory management at compile",
    "start": "53199",
    "end": "55039"
  },
  {
    "text": "time rust doesn't need to rely on a",
    "start": "55039",
    "end": "57280"
  },
  {
    "text": "runtime garbage collector to constantly",
    "start": "57280",
    "end": "59440"
  },
  {
    "text": "be scanning for dead memory",
    "start": "59440",
    "end": "61280"
  },
  {
    "text": "this concept is one of many that keep",
    "start": "61280",
    "end": "63280"
  },
  {
    "text": "rust fast",
    "start": "63280",
    "end": "64559"
  },
  {
    "text": "so how does rust do compile time memory",
    "start": "64559",
    "end": "67040"
  },
  {
    "text": "management",
    "start": "67040",
    "end": "68159"
  },
  {
    "text": "one way is through a concept known as",
    "start": "68159",
    "end": "70000"
  },
  {
    "text": "ownership but to talk about ownership",
    "start": "70000",
    "end": "72400"
  },
  {
    "text": "first we need to talk about the two",
    "start": "72400",
    "end": "73920"
  },
  {
    "text": "types of memory allocation static and",
    "start": "73920",
    "end": "76159"
  },
  {
    "text": "dynamic",
    "start": "76159",
    "end": "77439"
  },
  {
    "start": "77000",
    "end": "91000"
  },
  {
    "text": "static memory allocation is used for",
    "start": "77439",
    "end": "79280"
  },
  {
    "text": "data types that have a known size at",
    "start": "79280",
    "end": "81520"
  },
  {
    "text": "runtime these allocations are done on",
    "start": "81520",
    "end": "83680"
  },
  {
    "text": "the stack and at compile time the",
    "start": "83680",
    "end": "85600"
  },
  {
    "text": "program builds an area on the stack for",
    "start": "85600",
    "end": "87680"
  },
  {
    "text": "that value to live and its size does not",
    "start": "87680",
    "end": "90320"
  },
  {
    "text": "change",
    "start": "90320",
    "end": "91280"
  },
  {
    "start": "91000",
    "end": "100000"
  },
  {
    "text": "this is different however from dynamic",
    "start": "91280",
    "end": "93680"
  },
  {
    "text": "memory allocation where a structure is",
    "start": "93680",
    "end": "95759"
  },
  {
    "text": "allocated in the heap and can change in",
    "start": "95759",
    "end": "98159"
  },
  {
    "text": "size as the program runs a perfect",
    "start": "98159",
    "end": "100720"
  },
  {
    "text": "example of a dynamically allocated",
    "start": "100720",
    "end": "102399"
  },
  {
    "text": "structure is a string that will",
    "start": "102399",
    "end": "104079"
  },
  {
    "text": "eventually be concatenated to",
    "start": "104079",
    "end": "106399"
  },
  {
    "text": "so to understand ownership let's take a",
    "start": "106399",
    "end": "108720"
  },
  {
    "text": "look at this piece of rust code",
    "start": "108720",
    "end": "111040"
  },
  {
    "text": "first we create a mutable string called",
    "start": "111040",
    "end": "113439"
  },
  {
    "text": "s that contains the value hello because",
    "start": "113439",
    "end": "116079"
  },
  {
    "text": "it's mutable it is allocated in the heap",
    "start": "116079",
    "end": "118799"
  },
  {
    "text": "after we create the string we",
    "start": "118799",
    "end": "120240"
  },
  {
    "text": "concatenate comma world exclamation",
    "start": "120240",
    "end": "122320"
  },
  {
    "text": "point to it which expands its allocation",
    "start": "122320",
    "end": "124799"
  },
  {
    "text": "in the heap and adds more data to it",
    "start": "124799",
    "end": "127600"
  },
  {
    "text": "at the end of the function scope russ",
    "start": "127600",
    "end": "129520"
  },
  {
    "text": "calls the drop function that deallocates",
    "start": "129520",
    "end": "131840"
  },
  {
    "text": "the memory for us without us doing",
    "start": "131840",
    "end": "133520"
  },
  {
    "text": "anything",
    "start": "133520",
    "end": "134560"
  },
  {
    "start": "134000",
    "end": "199000"
  },
  {
    "text": "you may be saying okay that's a very",
    "start": "134560",
    "end": "136560"
  },
  {
    "text": "straightforward concept it automatically",
    "start": "136560",
    "end": "138560"
  },
  {
    "text": "allocates and deallocates memory who",
    "start": "138560",
    "end": "140879"
  },
  {
    "text": "cares and that's a very good point given",
    "start": "140879",
    "end": "142800"
  },
  {
    "text": "how simple that example was",
    "start": "142800",
    "end": "144640"
  },
  {
    "text": "but consider this piece of code now",
    "start": "144640",
    "end": "147680"
  },
  {
    "text": "we create a variable called s2 that is",
    "start": "147680",
    "end": "150319"
  },
  {
    "text": "the same value as s",
    "start": "150319",
    "end": "152400"
  },
  {
    "text": "meaning it points to the same memory",
    "start": "152400",
    "end": "154800"
  },
  {
    "text": "where hello world lives and then we try",
    "start": "154800",
    "end": "157599"
  },
  {
    "text": "to print the original s string",
    "start": "157599",
    "end": "160560"
  },
  {
    "text": "this creates a problem though where at",
    "start": "160560",
    "end": "162640"
  },
  {
    "text": "the end of our code scope how does the",
    "start": "162640",
    "end": "164959"
  },
  {
    "text": "compiler know whether or not the memory",
    "start": "164959",
    "end": "167519"
  },
  {
    "text": "pointed to by both s and s2 have been",
    "start": "167519",
    "end": "171280"
  },
  {
    "text": "freed yet or not",
    "start": "171280",
    "end": "172720"
  },
  {
    "text": "in theory it is supposed to call drop on",
    "start": "172720",
    "end": "175599"
  },
  {
    "text": "both of these variables trying to free",
    "start": "175599",
    "end": "177599"
  },
  {
    "text": "them but this actually creates what is",
    "start": "177599",
    "end": "179680"
  },
  {
    "text": "known as a double free condition which",
    "start": "179680",
    "end": "181840"
  },
  {
    "text": "is a crashing condition and as a result",
    "start": "181840",
    "end": "184159"
  },
  {
    "text": "rust will not allow this code to compile",
    "start": "184159",
    "end": "187360"
  },
  {
    "text": "the reason being on the line where s2 is",
    "start": "187360",
    "end": "190000"
  },
  {
    "text": "set equal to s the value of s is thought",
    "start": "190000",
    "end": "192879"
  },
  {
    "text": "to be wholly moved into s2 meaning that",
    "start": "192879",
    "end": "196159"
  },
  {
    "text": "s is no longer a valid variable",
    "start": "196159",
    "end": "199519"
  },
  {
    "text": "this creates a bit of a hassle when",
    "start": "199519",
    "end": "200800"
  },
  {
    "text": "writing rus code though where now every",
    "start": "200800",
    "end": "203120"
  },
  {
    "text": "time we want to use a variable that is",
    "start": "203120",
    "end": "204720"
  },
  {
    "text": "mutable and lives in the heap we are",
    "start": "204720",
    "end": "206640"
  },
  {
    "text": "forced to pass ownership of the variable",
    "start": "206640",
    "end": "208799"
  },
  {
    "text": "into a function call like in this",
    "start": "208799",
    "end": "210400"
  },
  {
    "text": "example and then return that variable",
    "start": "210400",
    "end": "212640"
  },
  {
    "text": "back into a new variable that will be",
    "start": "212640",
    "end": "214560"
  },
  {
    "text": "its future owner with a different",
    "start": "214560",
    "end": "216400"
  },
  {
    "text": "appended name this feels horrible and",
    "start": "216400",
    "end": "218560"
  },
  {
    "text": "clunky and as we write our code the list",
    "start": "218560",
    "end": "220640"
  },
  {
    "text": "of variable names get the track on our",
    "start": "220640",
    "end": "222080"
  },
  {
    "text": "head gets really cumbersome and hard to",
    "start": "222080",
    "end": "224000"
  },
  {
    "text": "deal with",
    "start": "224000",
    "end": "225120"
  },
  {
    "text": "luckily russ doesn't actually have to be",
    "start": "225120",
    "end": "227360"
  },
  {
    "text": "like this",
    "start": "227360",
    "end": "228560"
  },
  {
    "text": "instead of passing ownership to an",
    "start": "228560",
    "end": "230239"
  },
  {
    "text": "ever-growing list of variables tracking",
    "start": "230239",
    "end": "232000"
  },
  {
    "text": "the same information",
    "start": "232000",
    "end": "233680"
  },
  {
    "text": "rust uses the idea of borrowing by using",
    "start": "233680",
    "end": "236400"
  },
  {
    "start": "236000",
    "end": "281000"
  },
  {
    "text": "the reference symbol similar to c or c",
    "start": "236400",
    "end": "238560"
  },
  {
    "text": "plus",
    "start": "238560",
    "end": "239360"
  },
  {
    "text": "we tell the rust compiler that we are",
    "start": "239360",
    "end": "241280"
  },
  {
    "text": "granting temporary ownership to a",
    "start": "241280",
    "end": "243519"
  },
  {
    "text": "function call so that inside that",
    "start": "243519",
    "end": "245760"
  },
  {
    "text": "function scope the variable is",
    "start": "245760",
    "end": "247760"
  },
  {
    "text": "temporarily owned or borrowed by that",
    "start": "247760",
    "end": "250000"
  },
  {
    "text": "function and then outside of that",
    "start": "250000",
    "end": "252000"
  },
  {
    "text": "function scope upon return ownership is",
    "start": "252000",
    "end": "254480"
  },
  {
    "text": "returned back to the caller",
    "start": "254480",
    "end": "256560"
  },
  {
    "text": "see this example here",
    "start": "256560",
    "end": "258239"
  },
  {
    "text": "we create a mutable string hello and",
    "start": "258239",
    "end": "260720"
  },
  {
    "text": "pass it to a function called change",
    "start": "260720",
    "end": "262880"
  },
  {
    "text": "change takes a mutable string reference",
    "start": "262880",
    "end": "264800"
  },
  {
    "text": "as a parameter and then uses that",
    "start": "264800",
    "end": "266720"
  },
  {
    "text": "reference to impend data to a string",
    "start": "266720",
    "end": "269280"
  },
  {
    "text": "upon return to main s is still a valid",
    "start": "269280",
    "end": "271759"
  },
  {
    "text": "variable now pointing to data that has",
    "start": "271759",
    "end": "274160"
  },
  {
    "text": "been appended to despite being",
    "start": "274160",
    "end": "275919"
  },
  {
    "text": "referenced twice s is dropped from the",
    "start": "275919",
    "end": "278240"
  },
  {
    "text": "program as it should be given that it",
    "start": "278240",
    "end": "280080"
  },
  {
    "text": "lives in the heap now let me be clear",
    "start": "280080",
    "end": "282960"
  },
  {
    "start": "281000",
    "end": "312000"
  },
  {
    "text": "references aren't perfect there are some",
    "start": "282960",
    "end": "285040"
  },
  {
    "text": "big no-nos about what you can't do when",
    "start": "285040",
    "end": "287040"
  },
  {
    "text": "using references in rust for example one",
    "start": "287040",
    "end": "289520"
  },
  {
    "text": "thing you're not allowed to do is return",
    "start": "289520",
    "end": "291440"
  },
  {
    "text": "a dangling reference or a dangling",
    "start": "291440",
    "end": "293280"
  },
  {
    "text": "pointer to an object or structure in",
    "start": "293280",
    "end": "295680"
  },
  {
    "text": "this example here a string is created",
    "start": "295680",
    "end": "297759"
  },
  {
    "text": "and a pointer to that string is returned",
    "start": "297759",
    "end": "300080"
  },
  {
    "text": "this however won't compile because the",
    "start": "300080",
    "end": "302000"
  },
  {
    "text": "string in question is created but then",
    "start": "302000",
    "end": "304160"
  },
  {
    "text": "at the end of the function is out of",
    "start": "304160",
    "end": "305919"
  },
  {
    "text": "scope but a reference is passed meaning",
    "start": "305919",
    "end": "308479"
  },
  {
    "text": "that when it's returned the reference",
    "start": "308479",
    "end": "310160"
  },
  {
    "text": "will point to a variable that no longer",
    "start": "310160",
    "end": "311680"
  },
  {
    "text": "exists another thing you can't do in",
    "start": "311680",
    "end": "313840"
  },
  {
    "start": "312000",
    "end": "329000"
  },
  {
    "text": "rust is reference something twice here",
    "start": "313840",
    "end": "316320"
  },
  {
    "text": "we see a string being created and then",
    "start": "316320",
    "end": "318400"
  },
  {
    "text": "we attempt to borrow ownership of that",
    "start": "318400",
    "end": "320320"
  },
  {
    "text": "string twice which is not allowed",
    "start": "320320",
    "end": "322479"
  },
  {
    "text": "borrowing a variable twice creates the",
    "start": "322479",
    "end": "324080"
  },
  {
    "text": "opportunity for that variable either to",
    "start": "324080",
    "end": "325520"
  },
  {
    "text": "be lost and not freed or a race",
    "start": "325520",
    "end": "327840"
  },
  {
    "text": "condition in its access",
    "start": "327840",
    "end": "329600"
  },
  {
    "start": "329000",
    "end": "352000"
  },
  {
    "text": "guys i hope you learned a little",
    "start": "329600",
    "end": "330479"
  },
  {
    "text": "something in this video today about",
    "start": "330479",
    "end": "331759"
  },
  {
    "text": "borrowing and ownership in rust and how",
    "start": "331759",
    "end": "333680"
  },
  {
    "text": "it allows memory to be managed freely in",
    "start": "333680",
    "end": "335600"
  },
  {
    "text": "a way that doesn't allow for memory",
    "start": "335600",
    "end": "337120"
  },
  {
    "text": "leaks if you enjoyed this video or you",
    "start": "337120",
    "end": "338880"
  },
  {
    "text": "learned something do me a favor hit like",
    "start": "338880",
    "end": "340639"
  },
  {
    "text": "hit subscribe go check out my merch",
    "start": "340639",
    "end": "342479"
  },
  {
    "text": "store link in the description and i'll",
    "start": "342479",
    "end": "344240"
  },
  {
    "text": "see you guys in my next video take care",
    "start": "344240",
    "end": "348740"
  },
  {
    "text": "[Music]",
    "start": "348740",
    "end": "353959"
  }
]