[
  {
    "start": "0",
    "end": "49000"
  },
  {
    "text": "you're probably thinking gorgeous C plus",
    "start": "0",
    "end": "2340"
  },
  {
    "text": "plus that's not even possible and",
    "start": "2340",
    "end": "5580"
  },
  {
    "text": "surprisingly Google agrees with you as",
    "start": "5580",
    "end": "8460"
  },
  {
    "text": "every C plus programmer knows the",
    "start": "8460",
    "end": "10679"
  },
  {
    "text": "language has many powerful features but",
    "start": "10679",
    "end": "13080"
  },
  {
    "text": "this power brings with the complexity",
    "start": "13080",
    "end": "15000"
  },
  {
    "text": "which in turn can make the code more",
    "start": "15000",
    "end": "17279"
  },
  {
    "text": "bug-prone and harder to read and",
    "start": "17279",
    "end": "19260"
  },
  {
    "text": "maintain to address this Google has a c",
    "start": "19260",
    "end": "22080"
  },
  {
    "text": "plus style guide that not only addresses",
    "start": "22080",
    "end": "24539"
  },
  {
    "text": "the style of their code but their use of",
    "start": "24539",
    "end": "27180"
  },
  {
    "text": "particular C plus features that are",
    "start": "27180",
    "end": "29580"
  },
  {
    "text": "known in the industry for being",
    "start": "29580",
    "end": "31199"
  },
  {
    "text": "problematic in terms of code readability",
    "start": "31199",
    "end": "33300"
  },
  {
    "text": "in this video we will talk about Google",
    "start": "33300",
    "end": "35460"
  },
  {
    "text": "C plus style guide as it applies to the",
    "start": "35460",
    "end": "37920"
  },
  {
    "text": "style of their code like tabs versus",
    "start": "37920",
    "end": "39899"
  },
  {
    "text": "spaces but also their opinion on the use",
    "start": "39899",
    "end": "42899"
  },
  {
    "text": "of certainty plus plus features one of",
    "start": "42899",
    "end": "45059"
  },
  {
    "text": "the notable ones being inheritance",
    "start": "45059",
    "end": "46620"
  },
  {
    "text": "without further Ado let's dive into it",
    "start": "46620",
    "end": "49440"
  },
  {
    "start": "49000",
    "end": "109000"
  },
  {
    "text": "starting off with one that's",
    "start": "49440",
    "end": "50760"
  },
  {
    "text": "particularly controversial tabs versus",
    "start": "50760",
    "end": "53399"
  },
  {
    "text": "spaces use only spaces and indent two",
    "start": "53399",
    "end": "57120"
  },
  {
    "text": "spaces at a time we use spaces for",
    "start": "57120",
    "end": "59820"
  },
  {
    "text": "indentation do not use tabs in your code",
    "start": "59820",
    "end": "62940"
  },
  {
    "text": "while this rule may come off as",
    "start": "62940",
    "end": "64799"
  },
  {
    "text": "Draconian and extremely pedantic",
    "start": "64799",
    "end": "66840"
  },
  {
    "text": "remember that Google's style guide is",
    "start": "66840",
    "end": "68880"
  },
  {
    "text": "built with thousands of engineers in",
    "start": "68880",
    "end": "71280"
  },
  {
    "text": "mind the reason that this matters for a",
    "start": "71280",
    "end": "73860"
  },
  {
    "text": "code base that's reaching that many",
    "start": "73860",
    "end": "75180"
  },
  {
    "text": "people is not everyone has the same",
    "start": "75180",
    "end": "78060"
  },
  {
    "text": "configuration in their editors because",
    "start": "78060",
    "end": "80520"
  },
  {
    "text": "of this the tab width of a single tab",
    "start": "80520",
    "end": "83159"
  },
  {
    "text": "character may be different from one",
    "start": "83159",
    "end": "85259"
  },
  {
    "text": "engineer to another in place of this by",
    "start": "85259",
    "end": "87780"
  },
  {
    "text": "using spaces with a set two space",
    "start": "87780",
    "end": "89939"
  },
  {
    "text": "indentation requirement it makes it so",
    "start": "89939",
    "end": "92340"
  },
  {
    "text": "that the code is more likely to look the",
    "start": "92340",
    "end": "94680"
  },
  {
    "text": "same between editor a and editor B and",
    "start": "94680",
    "end": "97979"
  },
  {
    "text": "no you don't have to be that person that",
    "start": "97979",
    "end": "100320"
  },
  {
    "text": "slams their spacebar key instead you can",
    "start": "100320",
    "end": "102960"
  },
  {
    "text": "configure your tab key in a lot of",
    "start": "102960",
    "end": "104880"
  },
  {
    "text": "editors to emit multiple spaces in place",
    "start": "104880",
    "end": "107939"
  },
  {
    "text": "of a tab character",
    "start": "107939",
    "end": "109740"
  },
  {
    "start": "109000",
    "end": "173000"
  },
  {
    "text": "next type deduction use of the auto",
    "start": "109740",
    "end": "112439"
  },
  {
    "text": "keyword C plus plus has a keyword called",
    "start": "112439",
    "end": "115079"
  },
  {
    "text": "Auto that will Auto populate at compile",
    "start": "115079",
    "end": "117600"
  },
  {
    "text": "time the type of a variable",
    "start": "117600",
    "end": "120420"
  },
  {
    "text": "use type deduction only if it makes the",
    "start": "120420",
    "end": "122759"
  },
  {
    "text": "code clearer to readers who aren't",
    "start": "122759",
    "end": "124439"
  },
  {
    "text": "familiar with the project or if it makes",
    "start": "124439",
    "end": "126600"
  },
  {
    "text": "the code safer do not use it to merely",
    "start": "126600",
    "end": "129239"
  },
  {
    "text": "avoid the inconvenience of writing an",
    "start": "129239",
    "end": "131700"
  },
  {
    "text": "explicit type consider the example make",
    "start": "131700",
    "end": "134580"
  },
  {
    "text": "unique Foo which is a function that",
    "start": "134580",
    "end": "136560"
  },
  {
    "text": "returns a generic type the",
    "start": "136560",
    "end": "138599"
  },
  {
    "text": "implementation for make unique of the",
    "start": "138599",
    "end": "140580"
  },
  {
    "text": "Foo class obviously returns a type Foo",
    "start": "140580",
    "end": "143819"
  },
  {
    "text": "and therefore the auto feature is",
    "start": "143819",
    "end": "145980"
  },
  {
    "text": "allowed to be used in this instance but",
    "start": "145980",
    "end": "148500"
  },
  {
    "text": "instead if I have a function called my",
    "start": "148500",
    "end": "150420"
  },
  {
    "text": "widget Factory that is not generic the",
    "start": "150420",
    "end": "152760"
  },
  {
    "text": "type that that variable returns is",
    "start": "152760",
    "end": "154920"
  },
  {
    "text": "opaque and if I use the auto keyword the",
    "start": "154920",
    "end": "157560"
  },
  {
    "text": "compiler will figure out what type is",
    "start": "157560",
    "end": "159480"
  },
  {
    "text": "returned by looking into the code of my",
    "start": "159480",
    "end": "161760"
  },
  {
    "text": "widget Factory but if someone who's not",
    "start": "161760",
    "end": "163860"
  },
  {
    "text": "on my team needs to audit that code they",
    "start": "163860",
    "end": "165959"
  },
  {
    "text": "will have a very hard time understanding",
    "start": "165959",
    "end": "167819"
  },
  {
    "text": "what type comes from that function",
    "start": "167819",
    "end": "169680"
  },
  {
    "text": "therefore in this case Auto is not",
    "start": "169680",
    "end": "172500"
  },
  {
    "text": "allowed",
    "start": "172500",
    "end": "173700"
  },
  {
    "start": "173000",
    "end": "237000"
  },
  {
    "text": "next ownership and smart pointers",
    "start": "173700",
    "end": "176760"
  },
  {
    "text": "in code that uses dynamic memory such as",
    "start": "176760",
    "end": "179280"
  },
  {
    "text": "the new operator or the Heap bugs can",
    "start": "179280",
    "end": "181800"
  },
  {
    "text": "easily arise when the dynamic memory is",
    "start": "181800",
    "end": "184080"
  },
  {
    "text": "not properly accounted for these bugs",
    "start": "184080",
    "end": "186780"
  },
  {
    "text": "manifest in the form of memory leaks and",
    "start": "186780",
    "end": "188700"
  },
  {
    "text": "use after freeze only to name a few",
    "start": "188700",
    "end": "191220"
  },
  {
    "text": "to fix this modern features of C plus",
    "start": "191220",
    "end": "193560"
  },
  {
    "text": "and rust Implement a concept referred to",
    "start": "193560",
    "end": "196080"
  },
  {
    "text": "as ownership to Define who is able to",
    "start": "196080",
    "end": "198840"
  },
  {
    "text": "use and ultimately responsible for the",
    "start": "198840",
    "end": "201360"
  },
  {
    "text": "use and freeing of the dynamically",
    "start": "201360",
    "end": "203700"
  },
  {
    "text": "allocated memory",
    "start": "203700",
    "end": "205500"
  },
  {
    "text": "similar to NASA's principles of data",
    "start": "205500",
    "end": "207900"
  },
  {
    "text": "hiding Google recommends limiting the",
    "start": "207900",
    "end": "209819"
  },
  {
    "text": "use of dynamically allocated memory to",
    "start": "209819",
    "end": "212099"
  },
  {
    "text": "the lowest point possible using it only",
    "start": "212099",
    "end": "214680"
  },
  {
    "text": "in the class that it was allocated by",
    "start": "214680",
    "end": "217860"
  },
  {
    "text": "if two classes need to use the data use",
    "start": "217860",
    "end": "220500"
  },
  {
    "text": "a Smart pointer to explicitly pass",
    "start": "220500",
    "end": "222840"
  },
  {
    "text": "ownership of the data from one class to",
    "start": "222840",
    "end": "225180"
  },
  {
    "text": "another",
    "start": "225180",
    "end": "226019"
  },
  {
    "text": "for example a foo Factory will return a",
    "start": "226019",
    "end": "229140"
  },
  {
    "text": "smart pointer to a dynamically allocated",
    "start": "229140",
    "end": "231360"
  },
  {
    "text": "Foo if another class needs to use Foo",
    "start": "231360",
    "end": "234540"
  },
  {
    "text": "you must consume it via the smart",
    "start": "234540",
    "end": "236580"
  },
  {
    "text": "pointer",
    "start": "236580",
    "end": "237659"
  },
  {
    "start": "237000",
    "end": "299000"
  },
  {
    "text": "next exceptions Google does not use",
    "start": "237659",
    "end": "240659"
  },
  {
    "text": "exceptions the try catch statement at",
    "start": "240659",
    "end": "243000"
  },
  {
    "text": "all",
    "start": "243000",
    "end": "243720"
  },
  {
    "text": "on their face the benefits of using",
    "start": "243720",
    "end": "245760"
  },
  {
    "text": "exceptions outweigh the costs especially",
    "start": "245760",
    "end": "247980"
  },
  {
    "text": "in new projects however for existing",
    "start": "247980",
    "end": "250680"
  },
  {
    "text": "code the introduction of exceptions has",
    "start": "250680",
    "end": "252599"
  },
  {
    "text": "implications on all dependent code if",
    "start": "252599",
    "end": "255599"
  },
  {
    "text": "exceptions can be propagated Beyond a",
    "start": "255599",
    "end": "257519"
  },
  {
    "text": "new project it also becomes problematic",
    "start": "257519",
    "end": "259859"
  },
  {
    "text": "to integrate the new project into",
    "start": "259859",
    "end": "261720"
  },
  {
    "text": "existing exception free code",
    "start": "261720",
    "end": "264120"
  },
  {
    "text": "for example consider three functions f g",
    "start": "264120",
    "end": "267600"
  },
  {
    "text": "and H F calls function G and G calls",
    "start": "267600",
    "end": "271560"
  },
  {
    "text": "function H if H throws an exception that",
    "start": "271560",
    "end": "274620"
  },
  {
    "text": "F catches G has to be careful in the",
    "start": "274620",
    "end": "277259"
  },
  {
    "text": "middle to make sure that it handles the",
    "start": "277259",
    "end": "278880"
  },
  {
    "text": "exception properly such that F can",
    "start": "278880",
    "end": "281100"
  },
  {
    "text": "safely return also more generally",
    "start": "281100",
    "end": "283620"
  },
  {
    "text": "functions may return in places that you",
    "start": "283620",
    "end": "285960"
  },
  {
    "text": "don't expect when you use exceptions now",
    "start": "285960",
    "end": "288720"
  },
  {
    "text": "you can minimize this by implementing",
    "start": "288720",
    "end": "290699"
  },
  {
    "text": "some rules on your team on how and where",
    "start": "290699",
    "end": "292860"
  },
  {
    "text": "exceptions can be used but at the cost",
    "start": "292860",
    "end": "295440"
  },
  {
    "text": "of more and more knowledge that a",
    "start": "295440",
    "end": "297180"
  },
  {
    "text": "developer needs to know about the code",
    "start": "297180",
    "end": "298680"
  },
  {
    "text": "base",
    "start": "298680",
    "end": "300000"
  },
  {
    "start": "299000",
    "end": "459000"
  },
  {
    "text": "finally and arguably most importantly",
    "start": "300000",
    "end": "302540"
  },
  {
    "text": "inheritance in an object-oriented",
    "start": "302540",
    "end": "305040"
  },
  {
    "text": "language such as C plus plus a structure",
    "start": "305040",
    "end": "307680"
  },
  {
    "text": "called a class exists a class has",
    "start": "307680",
    "end": "310800"
  },
  {
    "text": "variables and methods for example a",
    "start": "310800",
    "end": "313500"
  },
  {
    "text": "string name and a uint age a class can",
    "start": "313500",
    "end": "316979"
  },
  {
    "text": "also have a parent class where it",
    "start": "316979",
    "end": "319440"
  },
  {
    "text": "derives some of its features the",
    "start": "319440",
    "end": "321840"
  },
  {
    "text": "variables and the methods are inherited",
    "start": "321840",
    "end": "324000"
  },
  {
    "text": "from the parent class into the child",
    "start": "324000",
    "end": "326400"
  },
  {
    "text": "class",
    "start": "326400",
    "end": "327479"
  },
  {
    "text": "for example consider a parent class",
    "start": "327479",
    "end": "329759"
  },
  {
    "text": "person which is inherited by two child",
    "start": "329759",
    "end": "332759"
  },
  {
    "text": "classes mother and father",
    "start": "332759",
    "end": "335880"
  },
  {
    "text": "a problem specifically referred to as",
    "start": "335880",
    "end": "338400"
  },
  {
    "text": "the diamond problem arises in C plus",
    "start": "338400",
    "end": "340979"
  },
  {
    "text": "plus with multiple inheritance",
    "start": "340979",
    "end": "343320"
  },
  {
    "text": "consider now a class named child that is",
    "start": "343320",
    "end": "346680"
  },
  {
    "text": "derived from two classes mother and",
    "start": "346680",
    "end": "349259"
  },
  {
    "text": "father the structure of its inheritance",
    "start": "349259",
    "end": "351960"
  },
  {
    "text": "properties now creates a diamond",
    "start": "351960",
    "end": "354600"
  },
  {
    "text": "this is problematic from the perspective",
    "start": "354600",
    "end": "356280"
  },
  {
    "text": "of code maintenance because it is",
    "start": "356280",
    "end": "358259"
  },
  {
    "text": "ambiguous where child inherited its",
    "start": "358259",
    "end": "361020"
  },
  {
    "text": "methods from when child is created The",
    "start": "361020",
    "end": "363539"
  },
  {
    "text": "Constructor for person will be called",
    "start": "363539",
    "end": "365220"
  },
  {
    "text": "twice once in mother Once In Father this",
    "start": "365220",
    "end": "368639"
  },
  {
    "text": "creates ambiguity that is hard to",
    "start": "368639",
    "end": "370740"
  },
  {
    "text": "comprehend to prevent code designs like",
    "start": "370740",
    "end": "372960"
  },
  {
    "text": "this Google has very explicit rules as",
    "start": "372960",
    "end": "375840"
  },
  {
    "text": "it applies to C plus plus inheritance",
    "start": "375840",
    "end": "377820"
  },
  {
    "text": "limit the use of implementation",
    "start": "377820",
    "end": "380340"
  },
  {
    "text": "inheritance and instead use only",
    "start": "380340",
    "end": "382800"
  },
  {
    "text": "interface inheritance interface",
    "start": "382800",
    "end": "384960"
  },
  {
    "text": "inheritance is the inheritance of",
    "start": "384960",
    "end": "386940"
  },
  {
    "text": "properties from an explicitly abstract",
    "start": "386940",
    "end": "389340"
  },
  {
    "text": "class A Class who does not have any",
    "start": "389340",
    "end": "392460"
  },
  {
    "text": "defined variables or methods on its own",
    "start": "392460",
    "end": "395039"
  },
  {
    "text": "for example consider the class animal an",
    "start": "395039",
    "end": "398880"
  },
  {
    "text": "animal in nature does not exist as only",
    "start": "398880",
    "end": "401520"
  },
  {
    "text": "an animal an animal has to be an actual",
    "start": "401520",
    "end": "404580"
  },
  {
    "text": "animal for example a dog a giraffe a",
    "start": "404580",
    "end": "407759"
  },
  {
    "text": "tiger therefore the animal class can be",
    "start": "407759",
    "end": "410460"
  },
  {
    "text": "thought of as an abstract class having",
    "start": "410460",
    "end": "412500"
  },
  {
    "text": "no properties of its own only the",
    "start": "412500",
    "end": "414960"
  },
  {
    "text": "scaffolding for a child class",
    "start": "414960",
    "end": "417720"
  },
  {
    "text": "in instances where you cannot use",
    "start": "417720",
    "end": "419819"
  },
  {
    "text": "interface inheritance and have to use",
    "start": "419819",
    "end": "421979"
  },
  {
    "text": "implementation inheritance consider your",
    "start": "421979",
    "end": "424740"
  },
  {
    "text": "design and instead try to use",
    "start": "424740",
    "end": "426479"
  },
  {
    "text": "composition composition is the inclusion",
    "start": "426479",
    "end": "429240"
  },
  {
    "text": "of a class as an object inside of",
    "start": "429240",
    "end": "431880"
  },
  {
    "text": "another class consider the case of a car",
    "start": "431880",
    "end": "434400"
  },
  {
    "text": "where the car class is not derived from",
    "start": "434400",
    "end": "436919"
  },
  {
    "text": "the engine it contains the engine by",
    "start": "436919",
    "end": "439800"
  },
  {
    "text": "composing a class of smaller subclasses",
    "start": "439800",
    "end": "442139"
  },
  {
    "text": "we reduce the ambiguity of which methods",
    "start": "442139",
    "end": "444780"
  },
  {
    "text": "were chosen at compile time to execute",
    "start": "444780",
    "end": "446940"
  },
  {
    "text": "certain functions well that's it guys",
    "start": "446940",
    "end": "449160"
  },
  {
    "text": "thanks for watching now before you go",
    "start": "449160",
    "end": "450599"
  },
  {
    "text": "and write your next piece of gorgeous C",
    "start": "450599",
    "end": "452400"
  },
  {
    "text": "plus plus go and watch this video that I",
    "start": "452400",
    "end": "454259"
  },
  {
    "text": "think you'll enjoy just as much",
    "start": "454259",
    "end": "457520"
  }
]