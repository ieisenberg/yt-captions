[
  {
    "text": "[Music]",
    "start": "1490",
    "end": "5338"
  },
  {
    "text": "[Music]",
    "start": "8880",
    "end": "11939"
  },
  {
    "text": "low level gang what is up welcome back",
    "start": "18240",
    "end": "20880"
  },
  {
    "text": "obviously arm processors can't float in",
    "start": "20880",
    "end": "22960"
  },
  {
    "text": "that sense they do not physically float",
    "start": "22960",
    "end": "25039"
  },
  {
    "text": "but arm processors in the mathematical",
    "start": "25039",
    "end": "27119"
  },
  {
    "text": "sense and the computer science sense can",
    "start": "27119",
    "end": "29119"
  },
  {
    "text": "float arm processors after the cortex m4",
    "start": "29119",
    "end": "32160"
  },
  {
    "text": "have a floating point unit in them or an",
    "start": "32160",
    "end": "34399"
  },
  {
    "text": "fpu a specific part of the processor",
    "start": "34399",
    "end": "36480"
  },
  {
    "text": "whose entire purpose is to do floating",
    "start": "36480",
    "end": "39040"
  },
  {
    "text": "point math operations you can tell if",
    "start": "39040",
    "end": "41280"
  },
  {
    "text": "your computer has one by checking out",
    "start": "41280",
    "end": "43280"
  },
  {
    "text": "the tool chain to build for that arm",
    "start": "43280",
    "end": "45760"
  },
  {
    "text": "processor if it has an hf in the",
    "start": "45760",
    "end": "48079"
  },
  {
    "text": "compiler build chain in this third word",
    "start": "48079",
    "end": "49680"
  },
  {
    "text": "here that means that it has a hardware",
    "start": "49680",
    "end": "51840"
  },
  {
    "text": "float unit or an fpu that is able to",
    "start": "51840",
    "end": "54320"
  },
  {
    "text": "support doing vector operations as an",
    "start": "54320",
    "end": "56800"
  },
  {
    "text": "entirely separate instruction set on the",
    "start": "56800",
    "end": "59359"
  },
  {
    "text": "arm cortex processor so what i've mocked",
    "start": "59359",
    "end": "62239"
  },
  {
    "text": "up here in c is a harness to call a",
    "start": "62239",
    "end": "64720"
  },
  {
    "text": "function calc flow that we're going to",
    "start": "64720",
    "end": "66560"
  },
  {
    "text": "write in assembly calc float will return",
    "start": "66560",
    "end": "69280"
  },
  {
    "text": "a float value we'll call that x here and",
    "start": "69280",
    "end": "71439"
  },
  {
    "text": "we're going to print out that float to",
    "start": "71439",
    "end": "73119"
  },
  {
    "text": "prove that we've done some kind of math",
    "start": "73119",
    "end": "74799"
  },
  {
    "text": "on the processor right",
    "start": "74799",
    "end": "76479"
  },
  {
    "text": "so just to kind of walk this through",
    "start": "76479",
    "end": "78000"
  },
  {
    "text": "pound includes standard diode h to get",
    "start": "78000",
    "end": "79520"
  },
  {
    "text": "lib c linked in we're going to declare",
    "start": "79520",
    "end": "81439"
  },
  {
    "text": "our calc float function but not actually",
    "start": "81439",
    "end": "83119"
  },
  {
    "text": "define it so we don't set the compiler",
    "start": "83119",
    "end": "84799"
  },
  {
    "text": "and then we have you know our int main",
    "start": "84799",
    "end": "86000"
  },
  {
    "text": "prologue here and then we have our",
    "start": "86000",
    "end": "87360"
  },
  {
    "text": "function and we're going to print out",
    "start": "87360",
    "end": "88720"
  },
  {
    "text": "the return value of that function so now",
    "start": "88720",
    "end": "91920"
  },
  {
    "text": "we have our float.s our assembly code",
    "start": "91920",
    "end": "94560"
  },
  {
    "text": "will go into here and then finally once",
    "start": "94560",
    "end": "96400"
  },
  {
    "text": "we're done with this we're going to",
    "start": "96400",
    "end": "97600"
  },
  {
    "text": "build our program with this tool chain",
    "start": "97600",
    "end": "100159"
  },
  {
    "text": "we're going to output the program name",
    "start": "100159",
    "end": "101759"
  },
  {
    "text": "float and we're going to bring in",
    "start": "101759",
    "end": "103200"
  },
  {
    "text": "float.s which is this assembly here and",
    "start": "103200",
    "end": "105119"
  },
  {
    "text": "our main.c to make sure kimu can",
    "start": "105119",
    "end": "107520"
  },
  {
    "text": "actually run our program you want to use",
    "start": "107520",
    "end": "109280"
  },
  {
    "text": "tax static to statically compile that",
    "start": "109280",
    "end": "111280"
  },
  {
    "text": "final binary so that kimu can actually",
    "start": "111280",
    "end": "113280"
  },
  {
    "text": "use it so",
    "start": "113280",
    "end": "114720"
  },
  {
    "text": "now what do we do so main.c is going to",
    "start": "114720",
    "end": "117280"
  },
  {
    "text": "be c code that gets compiled this tool",
    "start": "117280",
    "end": "119600"
  },
  {
    "text": "chain by default is going to produce",
    "start": "119600",
    "end": "121840"
  },
  {
    "text": "thumb code so first off we need to make",
    "start": "121840",
    "end": "123600"
  },
  {
    "text": "our code thumb to make sure that we",
    "start": "123600",
    "end": "125360"
  },
  {
    "text": "don't have any issues with the code",
    "start": "125360",
    "end": "126719"
  },
  {
    "text": "breaking next we're going to write a",
    "start": "126719",
    "end": "129280"
  },
  {
    "text": "function called calc bloat right because",
    "start": "129280",
    "end": "132000"
  },
  {
    "text": "that is a function expected by this c",
    "start": "132000",
    "end": "134959"
  },
  {
    "text": "function here we have to define this",
    "start": "134959",
    "end": "136560"
  },
  {
    "text": "symbol so to define a symbol we want to",
    "start": "136560",
    "end": "139120"
  },
  {
    "text": "be linkable we have to export it into",
    "start": "139120",
    "end": "140959"
  },
  {
    "text": "export assemble and assembly we say",
    "start": "140959",
    "end": "142480"
  },
  {
    "text": "global calc float",
    "start": "142480",
    "end": "144800"
  },
  {
    "text": "we're also going to say that this is a",
    "start": "144800",
    "end": "146959"
  },
  {
    "text": "function and we're going to call the",
    "start": "146959",
    "end": "148319"
  },
  {
    "text": "function calc float so that the prologue",
    "start": "148319",
    "end": "150480"
  },
  {
    "text": "for the function gets set up properly in",
    "start": "150480",
    "end": "152640"
  },
  {
    "text": "the assembler and then finally we need",
    "start": "152640",
    "end": "154879"
  },
  {
    "text": "to make sure that the linker knows this",
    "start": "154879",
    "end": "156640"
  },
  {
    "text": "is a thumb function so we'll say dot",
    "start": "156640",
    "end": "159040"
  },
  {
    "text": "thumbfunc and then here we can do a",
    "start": "159040",
    "end": "161280"
  },
  {
    "text": "quick little test to make sure that our",
    "start": "161280",
    "end": "162560"
  },
  {
    "text": "code actually compiles builds and",
    "start": "162560",
    "end": "164319"
  },
  {
    "text": "doesn't crash by saying branch exchange",
    "start": "164319",
    "end": "166720"
  },
  {
    "text": "lr this is the arm version of return so",
    "start": "166720",
    "end": "169360"
  },
  {
    "text": "if we get this to work this just means",
    "start": "169360",
    "end": "171680"
  },
  {
    "text": "that we have returned successfully from",
    "start": "171680",
    "end": "173680"
  },
  {
    "text": "this function and gotten to the next",
    "start": "173680",
    "end": "175280"
  },
  {
    "text": "line so let's build it real quick",
    "start": "175280",
    "end": "177440"
  },
  {
    "text": "and run it okay cool so our code runs no",
    "start": "177440",
    "end": "180400"
  },
  {
    "text": "crashes we do return some garbage",
    "start": "180400",
    "end": "182560"
  },
  {
    "text": "monster gigantic value but that's okay",
    "start": "182560",
    "end": "184239"
  },
  {
    "text": "that's expected we didn't actually do",
    "start": "184239",
    "end": "185840"
  },
  {
    "text": "any math here so it makes sense that",
    "start": "185840",
    "end": "187519"
  },
  {
    "text": "nothing useful happened so in our",
    "start": "187519",
    "end": "189840"
  },
  {
    "text": "program here i'm gonna show you guys how",
    "start": "189840",
    "end": "191760"
  },
  {
    "text": "to do floating point math on the",
    "start": "191760",
    "end": "194080"
  },
  {
    "text": "emulated fpu that we use in kimu what",
    "start": "194080",
    "end": "196400"
  },
  {
    "text": "we're gonna do that math on is two",
    "start": "196400",
    "end": "198080"
  },
  {
    "text": "separate floating point values value one",
    "start": "198080",
    "end": "200400"
  },
  {
    "text": "and value two value one is going to be a",
    "start": "200400",
    "end": "203599"
  },
  {
    "text": "float so we'll say dot float to set that",
    "start": "203599",
    "end": "205440"
  },
  {
    "text": "up in the assembler we'll make it 420",
    "start": "205440",
    "end": "208799"
  },
  {
    "text": "and then dot float here we'll make it",
    "start": "208799",
    "end": "210640"
  },
  {
    "text": ".69 these numbers are completely random",
    "start": "210640",
    "end": "213040"
  },
  {
    "text": "do not read into these at all i just",
    "start": "213040",
    "end": "215040"
  },
  {
    "text": "came up with these no special reason",
    "start": "215040",
    "end": "217040"
  },
  {
    "text": "okay so",
    "start": "217040",
    "end": "218879"
  },
  {
    "text": "now we need to actually use the",
    "start": "218879",
    "end": "220480"
  },
  {
    "text": "instructions special instructions in the",
    "start": "220480",
    "end": "222480"
  },
  {
    "text": "fpu to make the floating point math",
    "start": "222480",
    "end": "224959"
  },
  {
    "text": "happen our first instruction we're going",
    "start": "224959",
    "end": "226720"
  },
  {
    "text": "to run is not sexy at all we're going to",
    "start": "226720",
    "end": "228799"
  },
  {
    "text": "do a basic load register r0 equal to",
    "start": "228799",
    "end": "232080"
  },
  {
    "text": "val1 all this is going to do is load the",
    "start": "232080",
    "end": "234640"
  },
  {
    "text": "address of val 1 into r0",
    "start": "234640",
    "end": "237680"
  },
  {
    "text": "next instruction will be our first",
    "start": "237680",
    "end": "239920"
  },
  {
    "text": "special floating point instruction the",
    "start": "239920",
    "end": "242159"
  },
  {
    "text": "instruction is",
    "start": "242159",
    "end": "243680"
  },
  {
    "text": "b",
    "start": "243680",
    "end": "244400"
  },
  {
    "text": "l d r",
    "start": "244400",
    "end": "245760"
  },
  {
    "text": "this is vector load registers anything",
    "start": "245760",
    "end": "248480"
  },
  {
    "text": "with a v in front of it is considered a",
    "start": "248480",
    "end": "250560"
  },
  {
    "text": "vector instruction and those are the",
    "start": "250560",
    "end": "252560"
  },
  {
    "text": "instructions that are happening in the",
    "start": "252560",
    "end": "254239"
  },
  {
    "text": "fpu floats are referred to as vectors",
    "start": "254239",
    "end": "256799"
  },
  {
    "text": "and some mathematical implementations so",
    "start": "256799",
    "end": "258959"
  },
  {
    "text": "vector operations are floating point",
    "start": "258959",
    "end": "260799"
  },
  {
    "text": "operations",
    "start": "260799",
    "end": "262160"
  },
  {
    "text": "so vector ltr s0 and we're going to use",
    "start": "262160",
    "end": "265919"
  },
  {
    "text": "this here so what this does is this",
    "start": "265919",
    "end": "267840"
  },
  {
    "text": "tells the floating point unit load into",
    "start": "267840",
    "end": "271120"
  },
  {
    "text": "s0 which is the single point accuracy",
    "start": "271120",
    "end": "274800"
  },
  {
    "text": "register zero there are single point and",
    "start": "274800",
    "end": "276880"
  },
  {
    "text": "double point and you could you know",
    "start": "276880",
    "end": "278160"
  },
  {
    "text": "infer that the double point would be d0",
    "start": "278160",
    "end": "280080"
  },
  {
    "text": "but we're going to do s0 for right now",
    "start": "280080",
    "end": "282240"
  },
  {
    "text": "load into s0 the single floating point",
    "start": "282240",
    "end": "285280"
  },
  {
    "text": "register",
    "start": "285280",
    "end": "286479"
  },
  {
    "text": "the address pointed to by r0 this is",
    "start": "286479",
    "end": "289120"
  },
  {
    "text": "going to load 420 into this register on",
    "start": "289120",
    "end": "292400"
  },
  {
    "text": "the fpu and now we need to do this again",
    "start": "292400",
    "end": "294960"
  },
  {
    "text": "for our second value value 2 and to do",
    "start": "294960",
    "end": "297199"
  },
  {
    "text": "that we can just copy this code here",
    "start": "297199",
    "end": "299680"
  },
  {
    "text": "and",
    "start": "299680",
    "end": "300639"
  },
  {
    "text": "change out s0 to s1 and value 1 to value",
    "start": "300639",
    "end": "304000"
  },
  {
    "text": "2. pretty straightforward so by the time",
    "start": "304000",
    "end": "306160"
  },
  {
    "text": "this code has ram you've gotten to line",
    "start": "306160",
    "end": "307680"
  },
  {
    "text": "12 the fpu has two registers loaded with",
    "start": "307680",
    "end": "311360"
  },
  {
    "text": "addresses and values that we care about",
    "start": "311360",
    "end": "313440"
  },
  {
    "text": "that we're going to do math with so now",
    "start": "313440",
    "end": "315840"
  },
  {
    "text": "we can run a math operation in the fpu",
    "start": "315840",
    "end": "318639"
  },
  {
    "text": "using an fpu math operation to do this",
    "start": "318639",
    "end": "321120"
  },
  {
    "text": "floating point math right so what we're",
    "start": "321120",
    "end": "322880"
  },
  {
    "text": "going to do is we're going to run the",
    "start": "322880",
    "end": "325039"
  },
  {
    "text": "instruction to do the math we can do v",
    "start": "325039",
    "end": "328080"
  },
  {
    "text": "mul so vector multiply",
    "start": "328080",
    "end": "330639"
  },
  {
    "text": "dot this is a conditional operator onto",
    "start": "330639",
    "end": "333120"
  },
  {
    "text": "the vector multiply operation we're",
    "start": "333120",
    "end": "334400"
  },
  {
    "text": "going to say do f 32 so you have two",
    "start": "334400",
    "end": "338080"
  },
  {
    "text": "options when doing floating point math",
    "start": "338080",
    "end": "339919"
  },
  {
    "text": "in these processors if you have double",
    "start": "339919",
    "end": "342080"
  },
  {
    "text": "point accuracy you can decide to do",
    "start": "342080",
    "end": "344080"
  },
  {
    "text": "single or double point accuracy on the",
    "start": "344080",
    "end": "346560"
  },
  {
    "text": "processor to do single point you do f32",
    "start": "346560",
    "end": "349199"
  },
  {
    "text": "for 32-bit float or if you wanted to do",
    "start": "349199",
    "end": "351840"
  },
  {
    "text": "double point accuracy you could do f64",
    "start": "351840",
    "end": "354479"
  },
  {
    "text": "we're not going to worry about that",
    "start": "354479",
    "end": "355360"
  },
  {
    "text": "right now we'll do f32 and then after",
    "start": "355360",
    "end": "357520"
  },
  {
    "text": "that we encode it like a standard arm",
    "start": "357520",
    "end": "360000"
  },
  {
    "text": "instruction we'll say the destination is",
    "start": "360000",
    "end": "362319"
  },
  {
    "text": "s2 and we're going to multiply s0",
    "start": "362319",
    "end": "365120"
  },
  {
    "text": "by s1",
    "start": "365120",
    "end": "366880"
  },
  {
    "text": "cool so once this instruction has ran",
    "start": "366880",
    "end": "368960"
  },
  {
    "text": "the s2 register will contain the output",
    "start": "368960",
    "end": "371919"
  },
  {
    "text": "of s0 times s1 awesome",
    "start": "371919",
    "end": "375120"
  },
  {
    "text": "and then so again remember this is a",
    "start": "375120",
    "end": "377199"
  },
  {
    "text": "function the function needs to return a",
    "start": "377199",
    "end": "379600"
  },
  {
    "text": "float when a function returns a float in",
    "start": "379600",
    "end": "382080"
  },
  {
    "text": "the arm calling convention it expects",
    "start": "382080",
    "end": "384560"
  },
  {
    "text": "the register s0 to contain the response",
    "start": "384560",
    "end": "388479"
  },
  {
    "text": "so how do we get it set up properly well",
    "start": "388479",
    "end": "390400"
  },
  {
    "text": "at this point the response is contained",
    "start": "390400",
    "end": "392000"
  },
  {
    "text": "in s2 we need to change that so normally",
    "start": "392000",
    "end": "394639"
  },
  {
    "text": "we would do a move operation we're in",
    "start": "394639",
    "end": "396400"
  },
  {
    "text": "the fpu so what instruction do you think",
    "start": "396400",
    "end": "398240"
  },
  {
    "text": "we're going to do we're going to do",
    "start": "398240",
    "end": "399759"
  },
  {
    "text": "vector move and we're going to move into",
    "start": "399759",
    "end": "403039"
  },
  {
    "text": "s0 the value s2 so this is going to move",
    "start": "403039",
    "end": "406319"
  },
  {
    "text": "the result into s0 and then return",
    "start": "406319",
    "end": "410319"
  },
  {
    "text": "this is our final code here so again",
    "start": "410319",
    "end": "412240"
  },
  {
    "text": "we'll compile it real quick gcc",
    "start": "412240",
    "end": "414720"
  },
  {
    "text": "there's one error there we'll hit this",
    "start": "414720",
    "end": "416000"
  },
  {
    "text": "enter key to make the assembler happy",
    "start": "416000",
    "end": "418319"
  },
  {
    "text": "cool no errors and we'll run it",
    "start": "418319",
    "end": "420479"
  },
  {
    "text": "and there's our answer let's check",
    "start": "420479",
    "end": "421840"
  },
  {
    "text": "python to see if we're right",
    "start": "421840",
    "end": "423599"
  },
  {
    "text": "420 times 0.69",
    "start": "423599",
    "end": "426639"
  },
  {
    "text": "close enough low level gang i hope you",
    "start": "426639",
    "end": "429120"
  },
  {
    "text": "learned something there i hope you",
    "start": "429120",
    "end": "430080"
  },
  {
    "text": "enjoyed that video if you did do me a",
    "start": "430080",
    "end": "431199"
  },
  {
    "text": "favor hit like hit subscribe leave a",
    "start": "431199",
    "end": "433280"
  },
  {
    "text": "comment with what you want to see next",
    "start": "433280",
    "end": "434720"
  },
  {
    "text": "and i'll see you in the next low level",
    "start": "434720",
    "end": "437440"
  },
  {
    "text": "video take care",
    "start": "437440",
    "end": "441479"
  },
  {
    "text": "[Music]",
    "start": "444290",
    "end": "451609"
  }
]