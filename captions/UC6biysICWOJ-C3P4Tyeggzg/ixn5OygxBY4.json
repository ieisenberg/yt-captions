[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "the new Linux privilege escalation is",
    "start": "80",
    "end": "2679"
  },
  {
    "text": "absolutely insane the bug allows an",
    "start": "2679",
    "end": "5240"
  },
  {
    "text": "unprivileged process that's able to",
    "start": "5240",
    "end": "7240"
  },
  {
    "text": "access the net filter API on the Linux",
    "start": "7240",
    "end": "9599"
  },
  {
    "text": "kernel which is default Behavior to run",
    "start": "9599",
    "end": "12120"
  },
  {
    "text": "arbitrary code in the kernel and",
    "start": "12120",
    "end": "14120"
  },
  {
    "text": "eventually become root completely",
    "start": "14120",
    "end": "16480"
  },
  {
    "text": "compromising the system this bug is wild",
    "start": "16480",
    "end": "19279"
  },
  {
    "text": "and in this video we're going to talk",
    "start": "19279",
    "end": "20199"
  },
  {
    "text": "about what a privilege escalation is in",
    "start": "20199",
    "end": "22119"
  },
  {
    "text": "Linux how they typically work and why",
    "start": "22119",
    "end": "24199"
  },
  {
    "text": "the techniques that the author of this",
    "start": "24199",
    "end": "25680"
  },
  {
    "text": "bug used are so novel so unheard of like",
    "start": "25680",
    "end": "30000"
  },
  {
    "text": "brand new technology truly amazing also",
    "start": "30000",
    "end": "32200"
  },
  {
    "text": "if you're new here hi I'm L level",
    "start": "32200",
    "end": "33760"
  },
  {
    "text": "learning this is a YouTube channel where",
    "start": "33760",
    "end": "34960"
  },
  {
    "text": "I talk about cyber security programming",
    "start": "34960",
    "end": "36879"
  },
  {
    "text": "so if you want to learn about those",
    "start": "36879",
    "end": "38000"
  },
  {
    "text": "things or just hang out with me hit that",
    "start": "38000",
    "end": "39800"
  },
  {
    "text": "subscribe button I really appreciate it",
    "start": "39800",
    "end": "41320"
  },
  {
    "text": "now this exploit goes extremely deep I'm",
    "start": "41320",
    "end": "44360"
  },
  {
    "text": "going to link all the information about",
    "start": "44360",
    "end": "45719"
  },
  {
    "text": "it including the blog post and the",
    "start": "45719",
    "end": "47239"
  },
  {
    "text": "GitHub proof of concept in the",
    "start": "47239",
    "end": "48719"
  },
  {
    "text": "description below so go check those out",
    "start": "48719",
    "end": "50480"
  },
  {
    "start": "50000",
    "end": "75000"
  },
  {
    "text": "now if you're new to the world of",
    "start": "50480",
    "end": "51960"
  },
  {
    "text": "exploitation or maybe even cyber",
    "start": "51960",
    "end": "53680"
  },
  {
    "text": "security a privilege escalation is an",
    "start": "53680",
    "end": "55920"
  },
  {
    "text": "exploit that allows you to while running",
    "start": "55920",
    "end": "58239"
  },
  {
    "text": "as a certain privilege become a higher",
    "start": "58239",
    "end": "60840"
  },
  {
    "text": "privilege the classic example is that if",
    "start": "60840",
    "end": "62800"
  },
  {
    "text": "you run as user auntu for example and an",
    "start": "62800",
    "end": "65320"
  },
  {
    "text": "auntu VM and then you want to become",
    "start": "65320",
    "end": "67400"
  },
  {
    "text": "root you don't have the root password by",
    "start": "67400",
    "end": "69119"
  },
  {
    "text": "running a privilege escalation you can",
    "start": "69119",
    "end": "71080"
  },
  {
    "text": "become that higher privilege user like",
    "start": "71080",
    "end": "73320"
  },
  {
    "text": "root without knowing the credential the",
    "start": "73320",
    "end": "75320"
  },
  {
    "start": "75000",
    "end": "110000"
  },
  {
    "text": "way privilege escalations work is a lot",
    "start": "75320",
    "end": "77119"
  },
  {
    "text": "different than traditional exploitation",
    "start": "77119",
    "end": "78920"
  },
  {
    "text": "to get access to a system typically you",
    "start": "78920",
    "end": "81280"
  },
  {
    "text": "have some kind of service that's running",
    "start": "81280",
    "end": "82880"
  },
  {
    "text": "that has a network facing code that",
    "start": "82880",
    "end": "84439"
  },
  {
    "text": "processes data and you exploit some",
    "start": "84439",
    "end": "86680"
  },
  {
    "text": "vulnerability in that Network code to",
    "start": "86680",
    "end": "88560"
  },
  {
    "text": "get code execution on that system the",
    "start": "88560",
    "end": "90560"
  },
  {
    "text": "difference between those kinds of",
    "start": "90560",
    "end": "92280"
  },
  {
    "text": "exploits that get you the access and",
    "start": "92280",
    "end": "94320"
  },
  {
    "text": "privilege escalation is that you're",
    "start": "94320",
    "end": "96119"
  },
  {
    "text": "actually exploiting a vulnerability in",
    "start": "96119",
    "end": "98560"
  },
  {
    "text": "the kernel itself the kernel being code",
    "start": "98560",
    "end": "101079"
  },
  {
    "text": "that runs at a higher privilege level",
    "start": "101079",
    "end": "103079"
  },
  {
    "text": "the operating system the kernel is just",
    "start": "103079",
    "end": "105880"
  },
  {
    "text": "code and like any other kind of code",
    "start": "105880",
    "end": "108280"
  },
  {
    "text": "there can be vulnerabilities in this",
    "start": "108280",
    "end": "109920"
  },
  {
    "text": "code for example an oldie but a goodie",
    "start": "109920",
    "end": "112360"
  },
  {
    "start": "110000",
    "end": "160000"
  },
  {
    "text": "is the vulnerability dirty cow or dirty",
    "start": "112360",
    "end": "114759"
  },
  {
    "text": "copy on right that took advantage of a",
    "start": "114759",
    "end": "117360"
  },
  {
    "text": "permissions issue in the copy on right p",
    "start": "117360",
    "end": "120079"
  },
  {
    "text": "functionality in Linux kernel in about",
    "start": "120079",
    "end": "122079"
  },
  {
    "text": "2016 about 8 years ago that allowed any",
    "start": "122079",
    "end": "125159"
  },
  {
    "text": "user to overwrite the data of any file",
    "start": "125159",
    "end": "128599"
  },
  {
    "text": "on the system whether or not they had",
    "start": "128599",
    "end": "130399"
  },
  {
    "text": "permissions to touch that file that",
    "start": "130399",
    "end": "132080"
  },
  {
    "text": "allowed people to do is overwrite the",
    "start": "132080",
    "end": "134200"
  },
  {
    "text": "contents of an elf that had the set uid",
    "start": "134200",
    "end": "136720"
  },
  {
    "text": "bit that gave it access to root when it",
    "start": "136720",
    "end": "138760"
  },
  {
    "text": "ran like Ping for example and was able",
    "start": "138760",
    "end": "141440"
  },
  {
    "text": "to use that to turn set uid binaries",
    "start": "141440",
    "end": "144319"
  },
  {
    "text": "into shells allowing you to become root",
    "start": "144319",
    "end": "146360"
  },
  {
    "text": "without having root credentials now you",
    "start": "146360",
    "end": "148040"
  },
  {
    "text": "may be wondering if my code is user land",
    "start": "148040",
    "end": "150239"
  },
  {
    "text": "code code that runs in user space how am",
    "start": "150239",
    "end": "152720"
  },
  {
    "text": "I able to take advantage of a",
    "start": "152720",
    "end": "154040"
  },
  {
    "text": "vulnerability in the kernel my code",
    "start": "154040",
    "end": "156000"
  },
  {
    "text": "doesn't run in the kernel I can't go and",
    "start": "156000",
    "end": "158519"
  },
  {
    "text": "touch kernel code and that's a great",
    "start": "158519",
    "end": "160120"
  },
  {
    "start": "160000",
    "end": "230000"
  },
  {
    "text": "question and the answer is actually what",
    "start": "160120",
    "end": "161760"
  },
  {
    "text": "makes kernel exploits so interesting now",
    "start": "161760",
    "end": "164560"
  },
  {
    "text": "when you write any code in user mode",
    "start": "164560",
    "end": "166800"
  },
  {
    "text": "when you write code in C in Linux your",
    "start": "166800",
    "end": "168840"
  },
  {
    "text": "code is generally pretty boring a bunch",
    "start": "168840",
    "end": "171120"
  },
  {
    "text": "of reads and writes in and out of memory",
    "start": "171120",
    "end": "173040"
  },
  {
    "text": "using registers in the CPU but",
    "start": "173040",
    "end": "175120"
  },
  {
    "text": "eventually if you want your code to do",
    "start": "175120",
    "end": "176760"
  },
  {
    "text": "something interesting like open a file",
    "start": "176760",
    "end": "178879"
  },
  {
    "text": "create a socket you have to ask the",
    "start": "178879",
    "end": "180640"
  },
  {
    "text": "colonel for permission to do this and",
    "start": "180640",
    "end": "182080"
  },
  {
    "text": "you do this via what is called a system",
    "start": "182080",
    "end": "183959"
  },
  {
    "text": "call or a CIS call you set up the CIS",
    "start": "183959",
    "end": "185760"
  },
  {
    "text": "call with your arguments and say Hey",
    "start": "185760",
    "end": "187599"
  },
  {
    "text": "colel I want to access this file can you",
    "start": "187599",
    "end": "190519"
  },
  {
    "text": "execute that task for me because opening",
    "start": "190519",
    "end": "192400"
  },
  {
    "text": "a file on the file system is a",
    "start": "192400",
    "end": "194599"
  },
  {
    "text": "privileged task that only the kernel can",
    "start": "194599",
    "end": "196680"
  },
  {
    "text": "do so the kernel goes and takes your",
    "start": "196680",
    "end": "198920"
  },
  {
    "text": "parameters you've given it runs out runs",
    "start": "198920",
    "end": "201280"
  },
  {
    "text": "the task and brings you the results when",
    "start": "201280",
    "end": "203519"
  },
  {
    "text": "you ask the kernel to do something the",
    "start": "203519",
    "end": "205519"
  },
  {
    "text": "kernel has to go and run its code and",
    "start": "205519",
    "end": "208360"
  },
  {
    "text": "handle your input parameters now the",
    "start": "208360",
    "end": "210439"
  },
  {
    "text": "vulnerabilities arise when if the kernel",
    "start": "210439",
    "end": "212480"
  },
  {
    "text": "doesn't properly sanitize those inputs",
    "start": "212480",
    "end": "214640"
  },
  {
    "text": "or if the memory within the kernel based",
    "start": "214640",
    "end": "216599"
  },
  {
    "text": "on your inputs or mismanage you as a",
    "start": "216599",
    "end": "218560"
  },
  {
    "text": "user in user mode can pull the CIS call",
    "start": "218560",
    "end": "221599"
  },
  {
    "text": "levers in the right order to effectively",
    "start": "221599",
    "end": "224319"
  },
  {
    "text": "take advantage of vulnerabilities in",
    "start": "224319",
    "end": "226200"
  },
  {
    "text": "kernel code and that's just how this",
    "start": "226200",
    "end": "228439"
  },
  {
    "text": "exploit works now this new exploit takes",
    "start": "228439",
    "end": "230720"
  },
  {
    "start": "230000",
    "end": "300000"
  },
  {
    "text": "advantage of what is called a double",
    "start": "230720",
    "end": "232319"
  },
  {
    "text": "free in the Linux kernel a double free",
    "start": "232319",
    "end": "234319"
  },
  {
    "text": "as name implies is when in code you",
    "start": "234319",
    "end": "237200"
  },
  {
    "text": "accidentally give the user the ability",
    "start": "237200",
    "end": "239159"
  },
  {
    "text": "to free free the same object twice the",
    "start": "239159",
    "end": "242200"
  },
  {
    "text": "reason this is bad is because once an",
    "start": "242200",
    "end": "244200"
  },
  {
    "text": "object is put into a memory allocator",
    "start": "244200",
    "end": "246000"
  },
  {
    "text": "free list twice you're able to allocate",
    "start": "246000",
    "end": "248319"
  },
  {
    "text": "it one time where you now have a use",
    "start": "248319",
    "end": "250640"
  },
  {
    "text": "after free you're able to allocate the",
    "start": "250640",
    "end": "252640"
  },
  {
    "text": "objects and then still have access to",
    "start": "252640",
    "end": "254519"
  },
  {
    "text": "the old pointer with the free data you",
    "start": "254519",
    "end": "256560"
  },
  {
    "text": "can then use this use after free to",
    "start": "256560",
    "end": "258320"
  },
  {
    "text": "corrupt the metadata of the free list",
    "start": "258320",
    "end": "260280"
  },
  {
    "text": "and then in this exploit get arbitrary",
    "start": "260280",
    "end": "263360"
  },
  {
    "text": "access to any memory address in kernel",
    "start": "263360",
    "end": "266199"
  },
  {
    "text": "space the double free vulnerability",
    "start": "266199",
    "end": "267800"
  },
  {
    "text": "arises in the net filter sub system",
    "start": "267800",
    "end": "270039"
  },
  {
    "text": "within the socket API of the Linux",
    "start": "270039",
    "end": "271720"
  },
  {
    "text": "kernel the kernel has a bug where it",
    "start": "271720",
    "end": "273720"
  },
  {
    "text": "will free the same packet twice",
    "start": "273720",
    "end": "276160"
  },
  {
    "text": "depending on the routes you set up",
    "start": "276160",
    "end": "277440"
  },
  {
    "text": "through the net filter by doing this in",
    "start": "277440",
    "end": "279800"
  },
  {
    "text": "this exploit they're able to take an",
    "start": "279800",
    "end": "281759"
  },
  {
    "text": "arbitrary user packet an IP packet and",
    "start": "281759",
    "end": "284960"
  },
  {
    "text": "double free it now by doing this you",
    "start": "284960",
    "end": "287440"
  },
  {
    "text": "know you may be trying to figure out",
    "start": "287440",
    "end": "288880"
  },
  {
    "text": "okay so we have a double free we have a",
    "start": "288880",
    "end": "290680"
  },
  {
    "text": "use after free in the kernel how do we",
    "start": "290680",
    "end": "293080"
  },
  {
    "text": "take advantage of this and this is where",
    "start": "293080",
    "end": "295800"
  },
  {
    "text": "this bug gets extremely wild now again",
    "start": "295800",
    "end": "299759"
  },
  {
    "text": "full disclosure I did not find this bug",
    "start": "299759",
    "end": "301759"
  },
  {
    "text": "I did not make up this bug I did not",
    "start": "301759",
    "end": "303360"
  },
  {
    "text": "make up these Graphics I'm giving full",
    "start": "303360",
    "end": "305080"
  },
  {
    "text": "credit to the author who I will link",
    "start": "305080",
    "end": "307320"
  },
  {
    "text": "their blog posts or Twitter everything",
    "start": "307320",
    "end": "309199"
  },
  {
    "text": "in the description below we can kind of",
    "start": "309199",
    "end": "310880"
  },
  {
    "text": "go through the basics here using their",
    "start": "310880",
    "end": "312960"
  },
  {
    "text": "Graphics so here they talk about how",
    "start": "312960",
    "end": "315520"
  },
  {
    "text": "they're able to do a double free in what",
    "start": "315520",
    "end": "318240"
  },
  {
    "text": "is called the SKB or the socket buffer",
    "start": "318240",
    "end": "320600"
  },
  {
    "text": "over here they're able to do some stuff",
    "start": "320600",
    "end": "322199"
  },
  {
    "text": "where basically the Linux kernel will",
    "start": "322199",
    "end": "324479"
  },
  {
    "text": "it'll be aware of a corrupted free list",
    "start": "324479",
    "end": "326319"
  },
  {
    "text": "and they have some pretty novel",
    "start": "326319",
    "end": "327360"
  },
  {
    "text": "techniques where they're able to spray a",
    "start": "327360",
    "end": "328919"
  },
  {
    "text": "bunch of UDP packets into the socket",
    "start": "328919",
    "end": "331039"
  },
  {
    "text": "buffer free list and it will prevent the",
    "start": "331039",
    "end": "332720"
  },
  {
    "text": "Linux kernel from being aware of the",
    "start": "332720",
    "end": "334120"
  },
  {
    "text": "corruption in the middle of the list",
    "start": "334120",
    "end": "335560"
  },
  {
    "text": "once they are able to have a double free",
    "start": "335560",
    "end": "339160"
  },
  {
    "text": "in the socket buffer free list they're",
    "start": "339160",
    "end": "340600"
  },
  {
    "text": "able to use that to arbitrarily",
    "start": "340600",
    "end": "342639"
  },
  {
    "text": "overwrite the next pointer that points",
    "start": "342639",
    "end": "344680"
  },
  {
    "text": "to the next thing in the free list and",
    "start": "344680",
    "end": "346680"
  },
  {
    "text": "allow them to arbitrarily allocate what",
    "start": "346680",
    "end": "348639"
  },
  {
    "text": "is called a PMD or a page middle",
    "start": "348639",
    "end": "351560"
  },
  {
    "text": "descriptor now a PMD is one of the",
    "start": "351560",
    "end": "354280"
  },
  {
    "text": "components in the page table system of",
    "start": "354280",
    "end": "356560"
  },
  {
    "text": "the Linux kernel right so when you have",
    "start": "356560",
    "end": "358120"
  },
  {
    "text": "a virtual address like I said before at",
    "start": "358120",
    "end": "359680"
  },
  {
    "text": "as he indicates here in this graphic you",
    "start": "359680",
    "end": "361960"
  },
  {
    "text": "have your virtual memory page but parts",
    "start": "361960",
    "end": "364880"
  },
  {
    "text": "of that address actually are used as",
    "start": "364880",
    "end": "366880"
  },
  {
    "text": "indexes into a series of descriptors",
    "start": "366880",
    "end": "369720"
  },
  {
    "text": "that are a lookup table into physical",
    "start": "369720",
    "end": "371919"
  },
  {
    "text": "memory right so a virtual memory page",
    "start": "371919",
    "end": "374319"
  },
  {
    "text": "will map to a physical memory page you",
    "start": "374319",
    "end": "376560"
  },
  {
    "text": "have the pgd the global descriptor you",
    "start": "376560",
    "end": "378960"
  },
  {
    "text": "have the upper descriptor the middle",
    "start": "378960",
    "end": "381000"
  },
  {
    "text": "descriptor and then a final page table",
    "start": "381000",
    "end": "383120"
  },
  {
    "text": "entry which points to a page by",
    "start": "383120",
    "end": "385599"
  },
  {
    "text": "corrupting the socket buffer free list",
    "start": "385599",
    "end": "388240"
  },
  {
    "text": "he's able to allocate a fake PMD the PMD",
    "start": "388240",
    "end": "391919"
  },
  {
    "text": "being the middle layer of this uh page",
    "start": "391919",
    "end": "394400"
  },
  {
    "text": "table lookup system and they're able to",
    "start": "394400",
    "end": "396240"
  },
  {
    "text": "double allocate a page table entry that",
    "start": "396240",
    "end": "399599"
  },
  {
    "text": "corresponds to the kernel right so now",
    "start": "399599",
    "end": "402240"
  },
  {
    "text": "we have a page table entry that it",
    "start": "402240",
    "end": "404400"
  },
  {
    "text": "points to the physical address of the",
    "start": "404400",
    "end": "406840"
  },
  {
    "text": "kernel they're then able to use this to",
    "start": "406840",
    "end": "409120"
  },
  {
    "text": "overwrite the mod probe path which will",
    "start": "409120",
    "end": "411479"
  },
  {
    "text": "point to their arbitrary binary that",
    "start": "411479",
    "end": "414080"
  },
  {
    "text": "they want to run right so they overwrite",
    "start": "414080",
    "end": "416199"
  },
  {
    "text": "the kernel to control mod probe path",
    "start": "416199",
    "end": "418800"
  },
  {
    "text": "which is a path in Linux kernel that",
    "start": "418800",
    "end": "421240"
  },
  {
    "text": "instead of running the mod probe binary",
    "start": "421240",
    "end": "423639"
  },
  {
    "text": "it'll run our arbitrary thing so instead",
    "start": "423639",
    "end": "426120"
  },
  {
    "text": "of running this FF thing they will be",
    "start": "426120",
    "end": "428479"
  },
  {
    "text": "able to run mod probe path which is our",
    "start": "428479",
    "end": "430720"
  },
  {
    "text": "program right and it gets executed as",
    "start": "430720",
    "end": "433000"
  },
  {
    "text": "root so again truly like one of the",
    "start": "433000",
    "end": "436160"
  },
  {
    "text": "craziest techniques I've ever seen ever",
    "start": "436160",
    "end": "439199"
  },
  {
    "text": "in exploitation the fact that this",
    "start": "439199",
    "end": "441080"
  },
  {
    "text": "author was able to do a double free in",
    "start": "441080",
    "end": "443440"
  },
  {
    "text": "the kernel bypass all the detection also",
    "start": "443440",
    "end": "446319"
  },
  {
    "text": "they have to pin this exploit to one CPU",
    "start": "446319",
    "end": "448840"
  },
  {
    "text": "because every CPU has their own page",
    "start": "448840",
    "end": "451759"
  },
  {
    "text": "table lookup descriptors and they have",
    "start": "451759",
    "end": "453280"
  },
  {
    "text": "this thing called the translation look",
    "start": "453280",
    "end": "454520"
  },
  {
    "text": "aide buffer which will cash all of these",
    "start": "454520",
    "end": "457520"
  },
  {
    "text": "translation lookups so if you don't",
    "start": "457520",
    "end": "459400"
  },
  {
    "text": "flush your tlb then you can't do this",
    "start": "459400",
    "end": "462479"
  },
  {
    "text": "exploit right so not only do they pin",
    "start": "462479",
    "end": "464240"
  },
  {
    "text": "this exploit to one CPU they figured out",
    "start": "464240",
    "end": "466680"
  },
  {
    "text": "a way to flush the tlb they figured out",
    "start": "466680",
    "end": "469360"
  },
  {
    "text": "a way to given a double free in the",
    "start": "469360",
    "end": "471720"
  },
  {
    "text": "kernel point it to the page directories",
    "start": "471720",
    "end": "475199"
  },
  {
    "text": "of that process inject a fake page table",
    "start": "475199",
    "end": "478800"
  },
  {
    "text": "entry to point to the Base address of",
    "start": "478800",
    "end": "481159"
  },
  {
    "text": "the konel and then hook the kernel to",
    "start": "481159",
    "end": "483360"
  },
  {
    "text": "instead of having mod probe path execute",
    "start": "483360",
    "end": "485879"
  },
  {
    "text": "arbitrary data which is their ultimate",
    "start": "485879",
    "end": "488639"
  },
  {
    "text": "program the world of Kernel exploitation",
    "start": "488639",
    "end": "492520"
  },
  {
    "text": "is truly amazing I think it's really",
    "start": "492520",
    "end": "495479"
  },
  {
    "text": "really neat it's still an area that I",
    "start": "495479",
    "end": "496879"
  },
  {
    "text": "have a lot of work to do in but uh I",
    "start": "496879",
    "end": "498479"
  },
  {
    "text": "hope you guys learned something here if",
    "start": "498479",
    "end": "499479"
  },
  {
    "text": "you did hit that sub button really",
    "start": "499479",
    "end": "500599"
  },
  {
    "text": "appreciate it and then go check this",
    "start": "500599",
    "end": "501840"
  },
  {
    "text": "other video out about a crazy new bug in",
    "start": "501840",
    "end": "504400"
  },
  {
    "text": "the Apple silicon it's truly amazing see",
    "start": "504400",
    "end": "507280"
  },
  {
    "text": "you guys there",
    "start": "507280",
    "end": "510319"
  }
]