[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "is rust actually safe now the answer is",
    "start": "40",
    "end": "2200"
  },
  {
    "text": "yes if you're using rust in the way it",
    "start": "2200",
    "end": "4319"
  },
  {
    "text": "was intended to be used but as many",
    "start": "4319",
    "end": "6879"
  },
  {
    "text": "people already know using rust in that",
    "start": "6879",
    "end": "9040"
  },
  {
    "text": "way is fairly difficult the borrow",
    "start": "9040",
    "end": "10719"
  },
  {
    "text": "checker for example different features",
    "start": "10719",
    "end": "12519"
  },
  {
    "text": "within rust make it difficult to write",
    "start": "12519",
    "end": "15200"
  },
  {
    "text": "code quickly now the alternative to",
    "start": "15200",
    "end": "17640"
  },
  {
    "text": "writing rust the way it was intended is",
    "start": "17640",
    "end": "19320"
  },
  {
    "text": "to use the unsafe keyword to write",
    "start": "19320",
    "end": "21480"
  },
  {
    "text": "unsafe rust the question then is if",
    "start": "21480",
    "end": "23680"
  },
  {
    "text": "unsafe rust exists is rust really safe",
    "start": "23680",
    "end": "26880"
  },
  {
    "text": "in this video we're going to go over a",
    "start": "26880",
    "end": "28039"
  },
  {
    "text": "report by the rust Foundation that talk",
    "start": "28039",
    "end": "30160"
  },
  {
    "text": "about how much of rust is unsafe rust",
    "start": "30160",
    "end": "33280"
  },
  {
    "text": "and their thoughts on if that underpins",
    "start": "33280",
    "end": "35520"
  },
  {
    "text": "the security of the language now if",
    "start": "35520",
    "end": "37600"
  },
  {
    "text": "you're new here hi this is Little",
    "start": "37600",
    "end": "39079"
  },
  {
    "text": "Learning a channel where I make videos",
    "start": "39079",
    "end": "40600"
  },
  {
    "text": "about software security I personally as",
    "start": "40600",
    "end": "43360"
  },
  {
    "text": "a security researcher for 10 years",
    "start": "43360",
    "end": "45079"
  },
  {
    "text": "really think that rust is the future of",
    "start": "45079",
    "end": "47600"
  },
  {
    "text": "writing safe and reliable software that",
    "start": "47600",
    "end": "50719"
  },
  {
    "text": "being said the language is difficult for",
    "start": "50719",
    "end": "52480"
  },
  {
    "text": "beginners in my personal opinion so I",
    "start": "52480",
    "end": "54280"
  },
  {
    "text": "want to dive into you know how many",
    "start": "54280",
    "end": "55960"
  },
  {
    "text": "people have used the unsafe keyword to",
    "start": "55960",
    "end": "58680"
  },
  {
    "text": "get around the feature that make rust",
    "start": "58680",
    "end": "61239"
  },
  {
    "start": "61000",
    "end": "167000"
  },
  {
    "text": "safe now before we get into the article",
    "start": "61239",
    "end": "63399"
  },
  {
    "text": "about unsafe rust it's important to talk",
    "start": "63399",
    "end": "64960"
  },
  {
    "text": "about what unsafe rust actually is so if",
    "start": "64960",
    "end": "67479"
  },
  {
    "text": "you think of rust as this language that",
    "start": "67479",
    "end": "69560"
  },
  {
    "text": "has particular features with the borrow",
    "start": "69560",
    "end": "71439"
  },
  {
    "text": "Checker and it does you know runtime",
    "start": "71439",
    "end": "73080"
  },
  {
    "text": "array access bounce checks when you add",
    "start": "73080",
    "end": "75439"
  },
  {
    "text": "the unsafe keyword to your code all that",
    "start": "75439",
    "end": "78080"
  },
  {
    "text": "does is it adds features that rust would",
    "start": "78080",
    "end": "80600"
  },
  {
    "text": "normally not give you and these are the",
    "start": "80600",
    "end": "82280"
  },
  {
    "text": "features you can think of in your head",
    "start": "82280",
    "end": "83560"
  },
  {
    "text": "when you see unsafe rust code so D",
    "start": "83560",
    "end": "85920"
  },
  {
    "text": "referencing raw pointers the whole idea",
    "start": "85920",
    "end": "88400"
  },
  {
    "text": "behind rust is that you don't have raw",
    "start": "88400",
    "end": "90400"
  },
  {
    "text": "access to memory there are Gates put",
    "start": "90400",
    "end": "92280"
  },
  {
    "text": "around that memory so you don't have you",
    "start": "92280",
    "end": "93920"
  },
  {
    "text": "know race conditions or places where you",
    "start": "93920",
    "end": "95600"
  },
  {
    "text": "can use data in a way that not meant to",
    "start": "95600",
    "end": "97439"
  },
  {
    "text": "be used the more important place that",
    "start": "97439",
    "end": "99920"
  },
  {
    "text": "I've seen a lot of unsafe rusts be used",
    "start": "99920",
    "end": "101840"
  },
  {
    "text": "is the inclusion of C functions like",
    "start": "101840",
    "end": "103720"
  },
  {
    "text": "external functions because you're",
    "start": "103720",
    "end": "105320"
  },
  {
    "text": "calling outside of your code that the",
    "start": "105320",
    "end": "107600"
  },
  {
    "text": "rust compiler can check you're hitting",
    "start": "107600",
    "end": "109399"
  },
  {
    "text": "what is called a foreign function",
    "start": "109399",
    "end": "110680"
  },
  {
    "text": "interface or an ffi so that code when",
    "start": "110680",
    "end": "112799"
  },
  {
    "text": "you call an external function is",
    "start": "112799",
    "end": "114399"
  },
  {
    "text": "inherently thought to be unsafe I'm",
    "start": "114399",
    "end": "116399"
  },
  {
    "text": "going to guess it's where a lot of the",
    "start": "116399",
    "end": "117520"
  },
  {
    "text": "unsafe rust code comes from unsafe",
    "start": "117520",
    "end": "119439"
  },
  {
    "text": "traits basically you're telling the",
    "start": "119439",
    "end": "120799"
  },
  {
    "text": "compiler that your implementation of a",
    "start": "120799",
    "end": "123119"
  },
  {
    "text": "trait does adhere to the trait",
    "start": "123119",
    "end": "124759"
  },
  {
    "text": "boundaries and you're telling the",
    "start": "124759",
    "end": "125759"
  },
  {
    "text": "implementer that it's their job to",
    "start": "125759",
    "end": "127039"
  },
  {
    "text": "implement it correctly you can mutate",
    "start": "127039",
    "end": "128920"
  },
  {
    "text": "Statics that makes sense so code is",
    "start": "128920",
    "end": "130319"
  },
  {
    "text": "static that makes sense a static is by",
    "start": "130319",
    "end": "132480"
  },
  {
    "text": "default a global variable so in Rust",
    "start": "132480",
    "end": "134760"
  },
  {
    "text": "they don't want to have multiple",
    "start": "134760",
    "end": "135959"
  },
  {
    "text": "references to mutable variables at the",
    "start": "135959",
    "end": "137560"
  },
  {
    "text": "same time so by mutating Statics you're",
    "start": "137560",
    "end": "139879"
  },
  {
    "text": "effectively breaking that rule and then",
    "start": "139879",
    "end": "141959"
  },
  {
    "text": "accessing the fields of a union so a",
    "start": "141959",
    "end": "143879"
  },
  {
    "text": "union if you don't know what a union is",
    "start": "143879",
    "end": "145440"
  },
  {
    "text": "effectively it's a structure in memory",
    "start": "145440",
    "end": "147920"
  },
  {
    "text": "where every field occupies the same",
    "start": "147920",
    "end": "150560"
  },
  {
    "text": "place of memory so like if you have an",
    "start": "150560",
    "end": "151959"
  },
  {
    "text": "INT and a character in a union the first",
    "start": "151959",
    "end": "154920"
  },
  {
    "text": "bite of that int will be represented by",
    "start": "154920",
    "end": "156920"
  },
  {
    "text": "that character and accessing those",
    "start": "156920",
    "end": "158560"
  },
  {
    "text": "fields is known as undefined Behavior so",
    "start": "158560",
    "end": "160599"
  },
  {
    "text": "it then unsafe rust you can do that so",
    "start": "160599",
    "end": "162480"
  },
  {
    "text": "based on all of these features I'm",
    "start": "162480",
    "end": "164480"
  },
  {
    "text": "curious like how much of that code",
    "start": "164480",
    "end": "166080"
  },
  {
    "text": "actually exists in the wild and so",
    "start": "166080",
    "end": "167840"
  },
  {
    "start": "167000",
    "end": "351000"
  },
  {
    "text": "here's article written by the rust",
    "start": "167840",
    "end": "169120"
  },
  {
    "text": "Foundation unsafe rust in the wild notes",
    "start": "169120",
    "end": "171319"
  },
  {
    "text": "on the current state of unsafe rust with",
    "start": "171319",
    "end": "173680"
  },
  {
    "text": "so many damaging software exploits",
    "start": "173680",
    "end": "175560"
  },
  {
    "text": "haunting our industry and so much at",
    "start": "175560",
    "end": "177400"
  },
  {
    "text": "stake software foundations technology",
    "start": "177400",
    "end": "179000"
  },
  {
    "text": "consortiums and governments around the",
    "start": "179000",
    "end": "180519"
  },
  {
    "text": "world are taking notice and advocating",
    "start": "180519",
    "end": "182480"
  },
  {
    "text": "for improved programming practices and",
    "start": "182480",
    "end": "184879"
  },
  {
    "text": "tools yeah I mean so I think siza the",
    "start": "184879",
    "end": "187000"
  },
  {
    "text": "Cyber and infrastructure Security Agency",
    "start": "187000",
    "end": "188560"
  },
  {
    "text": "of the US actually put out a paper uh",
    "start": "188560",
    "end": "190720"
  },
  {
    "text": "two of them actually one about how the",
    "start": "190720",
    "end": "192560"
  },
  {
    "text": "future of code needs to be written in",
    "start": "192560",
    "end": "194720"
  },
  {
    "text": "memory safe languages just for the",
    "start": "194720",
    "end": "196280"
  },
  {
    "text": "safety of of the nation in the world uh",
    "start": "196280",
    "end": "198440"
  },
  {
    "text": "and also two they put out a paper that",
    "start": "198440",
    "end": "200000"
  },
  {
    "text": "kind of they go through a lot of",
    "start": "200000",
    "end": "201159"
  },
  {
    "text": "software to figure out how much of code",
    "start": "201159",
    "end": "202879"
  },
  {
    "text": "is written in memory safe languages and",
    "start": "202879",
    "end": "205040"
  },
  {
    "text": "I think the answer is only like 20 or",
    "start": "205040",
    "end": "207519"
  },
  {
    "text": "30% of software and that's just like all",
    "start": "207519",
    "end": "209959"
  },
  {
    "text": "of software that's not even like the",
    "start": "209959",
    "end": "211680"
  },
  {
    "text": "majority of the software that's being",
    "start": "211680",
    "end": "213200"
  },
  {
    "text": "that's being used now I know Microsoft",
    "start": "213200",
    "end": "215159"
  },
  {
    "text": "is putting an effort forward to write",
    "start": "215159",
    "end": "217080"
  },
  {
    "text": "part of the windows kernel and I know",
    "start": "217080",
    "end": "218360"
  },
  {
    "text": "the Linux kernel as well is rust in the",
    "start": "218360",
    "end": "220000"
  },
  {
    "text": "kernel to make it a memory safe kernel",
    "start": "220000",
    "end": "222000"
  },
  {
    "text": "but we're not there yet right rewriting",
    "start": "222000",
    "end": "223439"
  },
  {
    "text": "effectively all of software is going to",
    "start": "223439",
    "end": "225680"
  },
  {
    "text": "take a long time to do so anyway",
    "start": "225680",
    "end": "228280"
  },
  {
    "text": "programs Access Memory this concept is",
    "start": "228280",
    "end": "230120"
  },
  {
    "text": "fundamental to Computing depending on",
    "start": "230120",
    "end": "231799"
  },
  {
    "text": "the programming language we use to write",
    "start": "231799",
    "end": "233360"
  },
  {
    "text": "code there are various ways to manage",
    "start": "233360",
    "end": "235200"
  },
  {
    "text": "allocation and use that memory each",
    "start": "235200",
    "end": "238040"
  },
  {
    "text": "approach requires care and caution yeah",
    "start": "238040",
    "end": "240640"
  },
  {
    "text": "this is important to understand dude",
    "start": "240640",
    "end": "242040"
  },
  {
    "text": "like at the end of the day any code that",
    "start": "242040",
    "end": "243959"
  },
  {
    "text": "you're writing anywhere be it C assembly",
    "start": "243959",
    "end": "246079"
  },
  {
    "text": "rust python literally all it's doing is",
    "start": "246079",
    "end": "248799"
  },
  {
    "text": "taking memory out of memory putting it",
    "start": "248799",
    "end": "251000"
  },
  {
    "text": "into a register it's doing some kind of",
    "start": "251000",
    "end": "252760"
  },
  {
    "text": "math on that register and then it's",
    "start": "252760",
    "end": "254360"
  },
  {
    "text": "putting it back into memory and then",
    "start": "254360",
    "end": "255840"
  },
  {
    "text": "there's user input that affects that",
    "start": "255840",
    "end": "257519"
  },
  {
    "text": "operation like literally that is all",
    "start": "257519",
    "end": "259199"
  },
  {
    "text": "computers do at a fundamental level",
    "start": "259199",
    "end": "261639"
  },
  {
    "text": "unintended out of scope access to a",
    "start": "261639",
    "end": "263120"
  },
  {
    "text": "programs memory regions can expose",
    "start": "263120",
    "end": "264600"
  },
  {
    "text": "sensitive data or serve as an entry",
    "start": "264600",
    "end": "266199"
  },
  {
    "text": "point for exploitation posing",
    "start": "266199",
    "end": "268000"
  },
  {
    "text": "significant risk and potentially",
    "start": "268000",
    "end": "269240"
  },
  {
    "text": "contributing to zero day attacks in",
    "start": "269240",
    "end": "271039"
  },
  {
    "text": "short whether a programmer manages to",
    "start": "271039",
    "end": "272479"
  },
  {
    "text": "allocate memory manually or relies on",
    "start": "272479",
    "end": "274440"
  },
  {
    "text": "the language and compiler to do it for",
    "start": "274440",
    "end": "276240"
  },
  {
    "text": "them robust memory management practices",
    "start": "276240",
    "end": "278800"
  },
  {
    "text": "are absolutely necessary I was going to",
    "start": "278800",
    "end": "281400"
  },
  {
    "text": "talk about this but I see the next",
    "start": "281400",
    "end": "282360"
  },
  {
    "text": "paragraph memory safety issues account",
    "start": "282360",
    "end": "284240"
  },
  {
    "text": "for a significant share of software",
    "start": "284240",
    "end": "285800"
  },
  {
    "text": "vulnerabilities malicious actors are",
    "start": "285800",
    "end": "287479"
  },
  {
    "text": "well aware of this and use the evolving",
    "start": "287479",
    "end": "289280"
  },
  {
    "text": "setup tactics to exploit memory unsafe",
    "start": "289280",
    "end": "291039"
  },
  {
    "text": "code and some of the most recognizable",
    "start": "291039",
    "end": "292960"
  },
  {
    "text": "and damaging software attacks in the",
    "start": "292960",
    "end": "294800"
  },
  {
    "text": "recent years such as heart bleed",
    "start": "294800",
    "end": "296919"
  },
  {
    "text": "interesting that they cite heart bleed",
    "start": "296919",
    "end": "298440"
  },
  {
    "text": "here cuz that attack happened 2013 there",
    "start": "298440",
    "end": "300520"
  },
  {
    "text": "have been plenty more but yeah I mean",
    "start": "300520",
    "end": "302160"
  },
  {
    "text": "this this whole paragraph can be summed",
    "start": "302160",
    "end": "303479"
  },
  {
    "text": "up by a report I think by either Google",
    "start": "303479",
    "end": "305600"
  },
  {
    "text": "or Microsoft said that 70% of",
    "start": "305600",
    "end": "307840"
  },
  {
    "text": "vulnerabilities that have been exploited",
    "start": "307840",
    "end": "309280"
  },
  {
    "text": "in the wild are the result of memory",
    "start": "309280",
    "end": "311720"
  },
  {
    "text": "corruption right memory corruption takes",
    "start": "311720",
    "end": "313400"
  },
  {
    "text": "two forms it's either spatial or",
    "start": "313400",
    "end": "315400"
  },
  {
    "text": "temporal right so spatial is basically I",
    "start": "315400",
    "end": "318039"
  },
  {
    "text": "have a buffer the buffer is 64 bytes I",
    "start": "318039",
    "end": "320840"
  },
  {
    "text": "write outside of that 64 bytes and can",
    "start": "320840",
    "end": "323039"
  },
  {
    "text": "abuse the control flow metadata like the",
    "start": "323039",
    "end": "325680"
  },
  {
    "text": "the return pointer for example uh to to",
    "start": "325680",
    "end": "327840"
  },
  {
    "text": "take advantage of that vulnerability and",
    "start": "327840",
    "end": "329800"
  },
  {
    "text": "then temporal vulnerabilities are like",
    "start": "329800",
    "end": "331639"
  },
  {
    "text": "if I have data that I have in a memory",
    "start": "331639",
    "end": "333800"
  },
  {
    "text": "buffer and then I free it and then I use",
    "start": "333800",
    "end": "336000"
  },
  {
    "text": "it later because I use it after I freed",
    "start": "336000",
    "end": "338360"
  },
  {
    "text": "it right that that's an issue in terms",
    "start": "338360",
    "end": "339960"
  },
  {
    "text": "of uh memory management but also two uh",
    "start": "339960",
    "end": "342160"
  },
  {
    "text": "race conditions where time of check",
    "start": "342160",
    "end": "343840"
  },
  {
    "text": "versus time of use where I check a value",
    "start": "343840",
    "end": "345919"
  },
  {
    "text": "and then use it after I've checked it is",
    "start": "345919",
    "end": "348039"
  },
  {
    "text": "known as a race and that can cause",
    "start": "348039",
    "end": "349319"
  },
  {
    "text": "memory safety issues as well so the",
    "start": "349319",
    "end": "351479"
  },
  {
    "start": "351000",
    "end": "473000"
  },
  {
    "text": "power and promise of rust the rust",
    "start": "351479",
    "end": "354280"
  },
  {
    "text": "programming language is frequently cited",
    "start": "354280",
    "end": "355759"
  },
  {
    "text": "by memory safety Advocates as one of the",
    "start": "355759",
    "end": "357360"
  },
  {
    "text": "most secure languages on the market",
    "start": "357360",
    "end": "359160"
  },
  {
    "text": "today a memory safe Language by default",
    "start": "359160",
    "end": "361199"
  },
  {
    "text": "through a concept called ownership Russ",
    "start": "361199",
    "end": "363280"
  },
  {
    "text": "provides rules and guarantees for memory",
    "start": "363280",
    "end": "365000"
  },
  {
    "text": "management and centers security as a",
    "start": "365000",
    "end": "366840"
  },
  {
    "text": "first class concept yeah so the only",
    "start": "366840",
    "end": "369400"
  },
  {
    "text": "reason that I like rust is the amount of",
    "start": "369400",
    "end": "371800"
  },
  {
    "text": "effort they put into being a safety",
    "start": "371800",
    "end": "373919"
  },
  {
    "text": "first language and I know people",
    "start": "373919",
    "end": "375199"
  },
  {
    "text": "typically say like oh like you can write",
    "start": "375199",
    "end": "377400"
  },
  {
    "text": "safe C too like it's just easy it's a",
    "start": "377400",
    "end": "379800"
  },
  {
    "text": "skill issue like hey man I get that it's",
    "start": "379800",
    "end": "382080"
  },
  {
    "text": "been 50 years C came out in 1972 And",
    "start": "382080",
    "end": "385479"
  },
  {
    "text": "there are still memory corruption",
    "start": "385479",
    "end": "387360"
  },
  {
    "text": "vulnerabilities the power of C is that",
    "start": "387360",
    "end": "389960"
  },
  {
    "text": "it gives you the ability to do literally",
    "start": "389960",
    "end": "391360"
  },
  {
    "text": "whatever you want you can make a pointer",
    "start": "391360",
    "end": "392759"
  },
  {
    "text": "to null you can make a pointer to quad F",
    "start": "392759",
    "end": "394520"
  },
  {
    "text": "and you can just write data and read",
    "start": "394520",
    "end": "395759"
  },
  {
    "text": "data and that's awesome and that's great",
    "start": "395759",
    "end": "397039"
  },
  {
    "text": "for performance software that's not",
    "start": "397039",
    "end": "399560"
  },
  {
    "text": "great for safe software so features like",
    "start": "399560",
    "end": "401880"
  },
  {
    "text": "ownership where variables are owned and",
    "start": "401880",
    "end": "404199"
  },
  {
    "text": "can't be used unless borrowed like that",
    "start": "404199",
    "end": "406199"
  },
  {
    "text": "kind of stuff does create great safety",
    "start": "406199",
    "end": "408840"
  },
  {
    "text": "for software that programs using rust",
    "start": "408840",
    "end": "411080"
  },
  {
    "text": "are unable to compile if memory",
    "start": "411080",
    "end": "412960"
  },
  {
    "text": "management rules are violated",
    "start": "412960",
    "end": "414400"
  },
  {
    "text": "essentially eliminating the possibility",
    "start": "414400",
    "end": "416160"
  },
  {
    "text": "of a memory issue at runtime yep so rust",
    "start": "416160",
    "end": "418400"
  },
  {
    "text": "literally creates comp pile time rules",
    "start": "418400",
    "end": "420680"
  },
  {
    "text": "that prevent you from doing use after",
    "start": "420680",
    "end": "422479"
  },
  {
    "text": "freeze and having two mutable references",
    "start": "422479",
    "end": "424400"
  },
  {
    "text": "at the same time to a variable and what",
    "start": "424400",
    "end": "426560"
  },
  {
    "text": "it does is it basically disallows you",
    "start": "426560",
    "end": "428960"
  },
  {
    "text": "from writing unsafe code this provides",
    "start": "428960",
    "end": "430639"
  },
  {
    "text": "rust developers and users of",
    "start": "430639",
    "end": "431800"
  },
  {
    "text": "applications written in Rust with a high",
    "start": "431800",
    "end": "433280"
  },
  {
    "text": "degree of confidence that memory",
    "start": "433280",
    "end": "434479"
  },
  {
    "text": "vulnerabilities need not be a concern",
    "start": "434479",
    "end": "436800"
  },
  {
    "text": "yeah so my my litus test for this is",
    "start": "436800",
    "end": "438199"
  },
  {
    "text": "whenever I have a new language I",
    "start": "438199",
    "end": "439599"
  },
  {
    "text": "immediately go into it and I try to",
    "start": "439599",
    "end": "441080"
  },
  {
    "text": "write like a basic HTTP server and I try",
    "start": "441080",
    "end": "443879"
  },
  {
    "text": "to see how easy is it for me to create a",
    "start": "443879",
    "end": "447319"
  },
  {
    "text": "memory corruption vulnerability using a",
    "start": "447319",
    "end": "449160"
  },
  {
    "text": "string operation or accessing outside of",
    "start": "449160",
    "end": "451360"
  },
  {
    "text": "that memory and in both rust and Zig it",
    "start": "451360",
    "end": "454199"
  },
  {
    "text": "was nearly impossible like I could not",
    "start": "454199",
    "end": "455919"
  },
  {
    "text": "do it now I know there is the cvrs repo",
    "start": "455919",
    "end": "458479"
  },
  {
    "text": "that shows you ways you can effectively",
    "start": "458479",
    "end": "460479"
  },
  {
    "text": "uh take the lifetimes of variables in",
    "start": "460479",
    "end": "462759"
  },
  {
    "text": "Rust and morph them to make them unsafe",
    "start": "462759",
    "end": "465240"
  },
  {
    "text": "but that's like very convoluted examples",
    "start": "465240",
    "end": "467919"
  },
  {
    "text": "generally speaking if you're writing",
    "start": "467919",
    "end": "469560"
  },
  {
    "text": "normal rust it's really hard to write",
    "start": "469560",
    "end": "472639"
  },
  {
    "text": "unsafe rust without the unsafe keyword",
    "start": "472639",
    "end": "474599"
  },
  {
    "start": "473000",
    "end": "688000"
  },
  {
    "text": "and this is where this comes in now safe",
    "start": "474599",
    "end": "476159"
  },
  {
    "text": "rust and unsafe rust although rust is a",
    "start": "476159",
    "end": "478319"
  },
  {
    "text": "powerful tool for memory security and",
    "start": "478319",
    "end": "480120"
  },
  {
    "text": "safety the power of its safety",
    "start": "480120",
    "end": "481599"
  },
  {
    "text": "guarantees can come limiting when the",
    "start": "481599",
    "end": "483680"
  },
  {
    "text": "program cannot actually go wrong but the",
    "start": "483680",
    "end": "485960"
  },
  {
    "text": "compiler is unable to guarantee that",
    "start": "485960",
    "end": "488120"
  },
  {
    "text": "itself the programmer can prove the",
    "start": "488120",
    "end": "489639"
  },
  {
    "text": "impossibility of undefined behavior in",
    "start": "489639",
    "end": "491520"
  },
  {
    "text": "ways not available to the compiler in",
    "start": "491520",
    "end": "493879"
  },
  {
    "text": "these instances rust programmers will",
    "start": "493879",
    "end": "495599"
  },
  {
    "text": "apply the unsafe keyword to indicate a",
    "start": "495599",
    "end": "497800"
  },
  {
    "text": "function or code segment which has a",
    "start": "497800",
    "end": "500560"
  },
  {
    "text": "additional safety considerations or B",
    "start": "500560",
    "end": "502960"
  },
  {
    "text": "invariance A programmer must manually",
    "start": "502960",
    "end": "505039"
  },
  {
    "text": "follow to guarantee safety that are not",
    "start": "505039",
    "end": "507080"
  },
  {
    "text": "necessarily expressable by rust or the",
    "start": "507080",
    "end": "509000"
  },
  {
    "text": "function itself self unsafe keyword",
    "start": "509000",
    "end": "510639"
  },
  {
    "text": "enables developers to dreference the raw",
    "start": "510639",
    "end": "512320"
  },
  {
    "text": "pointer modify mutable static variable",
    "start": "512320",
    "end": "514440"
  },
  {
    "text": "and crucially call unsafe functions yeah",
    "start": "514440",
    "end": "516919"
  },
  {
    "text": "so like like I was saying before you",
    "start": "516919",
    "end": "518360"
  },
  {
    "text": "have these compile time guarantees that",
    "start": "518360",
    "end": "520518"
  },
  {
    "text": "rust gives you where rust can prove that",
    "start": "520519",
    "end": "522760"
  },
  {
    "text": "something can't go wrong well sometimes",
    "start": "522760",
    "end": "524519"
  },
  {
    "text": "that can be overbinding or that like you",
    "start": "524519",
    "end": "526200"
  },
  {
    "text": "know you need to do something in code",
    "start": "526200",
    "end": "528120"
  },
  {
    "text": "that is necessarily safe but Russ can't",
    "start": "528120",
    "end": "530360"
  },
  {
    "text": "guarantee it so you can wrap a function",
    "start": "530360",
    "end": "532000"
  },
  {
    "text": "in unsafe to kind of get around that",
    "start": "532000",
    "end": "533600"
  },
  {
    "text": "right and so obviously by putting an",
    "start": "533600",
    "end": "535360"
  },
  {
    "text": "unsafe keyword in a memory safe language",
    "start": "535360",
    "end": "537640"
  },
  {
    "text": "the question is does that devalue you uh",
    "start": "537640",
    "end": "539880"
  },
  {
    "text": "the language so while using unsafe rust",
    "start": "539880",
    "end": "542040"
  },
  {
    "text": "can theoretically produce vulnerability",
    "start": "542040",
    "end": "543560"
  },
  {
    "text": "similar to that of memory unsafe",
    "start": "543560",
    "end": "544760"
  },
  {
    "text": "languages there are four primary",
    "start": "544760",
    "end": "546279"
  },
  {
    "text": "safeguards to minimize those chances",
    "start": "546279",
    "end": "547880"
  },
  {
    "text": "near to zero I'm very curious what this",
    "start": "547880",
    "end": "549240"
  },
  {
    "text": "happen what they have to say using the",
    "start": "549240",
    "end": "550839"
  },
  {
    "text": "unsafe keyword in Rust is an explicit",
    "start": "550839",
    "end": "553360"
  },
  {
    "text": "act requiring the developer to opt in to",
    "start": "553360",
    "end": "555760"
  },
  {
    "text": "proceed this means that you will never",
    "start": "555760",
    "end": "557079"
  },
  {
    "text": "be able to enter an unsafe context",
    "start": "557079",
    "end": "559040"
  },
  {
    "text": "within your rust code without making the",
    "start": "559040",
    "end": "561120"
  },
  {
    "text": "conscious effort to do so other",
    "start": "561120",
    "end": "562680"
  },
  {
    "text": "languages may allow you to call unsafe",
    "start": "562680",
    "end": "564399"
  },
  {
    "text": "or unmanaged code directly yeah this is",
    "start": "564399",
    "end": "566120"
  },
  {
    "text": "my big thing about unsafe like you can",
    "start": "566120",
    "end": "567920"
  },
  {
    "text": "write a majority of rust code without",
    "start": "567920",
    "end": "570760"
  },
  {
    "text": "having to use the unsafe keyword and",
    "start": "570760",
    "end": "572800"
  },
  {
    "text": "then from a code audit perspective if",
    "start": "572800",
    "end": "574560"
  },
  {
    "text": "I'm writing safety critical rust or I'm",
    "start": "574560",
    "end": "576760"
  },
  {
    "text": "running code that's going to go into an",
    "start": "576760",
    "end": "578040"
  },
  {
    "text": "operating system somewhere I'm going to",
    "start": "578040",
    "end": "579680"
  },
  {
    "text": "pay particular attention to code that is",
    "start": "579680",
    "end": "582240"
  },
  {
    "text": "wrapped in unsafe it's literally going",
    "start": "582240",
    "end": "583839"
  },
  {
    "text": "to be a an actual like red flag that",
    "start": "583839",
    "end": "586279"
  },
  {
    "text": "says hey we have to go into this deeper",
    "start": "586279",
    "end": "588399"
  },
  {
    "text": "to verify that the unsafe code is still",
    "start": "588399",
    "end": "590839"
  },
  {
    "text": "safe right so I think this is good like",
    "start": "590839",
    "end": "592480"
  },
  {
    "text": "the fact that the unsafe features of",
    "start": "592480",
    "end": "594200"
  },
  {
    "text": "rust are opt in and not opt out makes it",
    "start": "594200",
    "end": "597279"
  },
  {
    "text": "less of a problem that I think people",
    "start": "597279",
    "end": "598920"
  },
  {
    "text": "inherit think unsafe has been isolated",
    "start": "598920",
    "end": "601120"
  },
  {
    "text": "in its own code blocks anything goes",
    "start": "601120",
    "end": "602920"
  },
  {
    "text": "wrong while the while using unsafe rust",
    "start": "602920",
    "end": "604959"
  },
  {
    "text": "it is clear what code has likely caused",
    "start": "604959",
    "end": "606760"
  },
  {
    "text": "the issue yeah so there's also places so",
    "start": "606760",
    "end": "608560"
  },
  {
    "text": "you don't just put unsafe on a function",
    "start": "608560",
    "end": "610839"
  },
  {
    "text": "or unsafe on a trait you can literally",
    "start": "610839",
    "end": "612880"
  },
  {
    "text": "have like two lines of unsafe code where",
    "start": "612880",
    "end": "615160"
  },
  {
    "text": "you D reference a raw pointer so that",
    "start": "615160",
    "end": "616880"
  },
  {
    "text": "the rest of the code around it is still",
    "start": "616880",
    "end": "618680"
  },
  {
    "text": "considered safe you just you know that",
    "start": "618680",
    "end": "620399"
  },
  {
    "text": "like line 69 is uh is an issue there are",
    "start": "620399",
    "end": "623600"
  },
  {
    "text": "a limited number of ways to use unsafe",
    "start": "623600",
    "end": "625480"
  },
  {
    "text": "and all safe rust code continues to have",
    "start": "625480",
    "end": "627480"
  },
  {
    "text": "its normal safety checks even inside of",
    "start": "627480",
    "end": "629480"
  },
  {
    "text": "an unsafe block yeah so this is an issue",
    "start": "629480",
    "end": "631279"
  },
  {
    "text": "that I actually or a mistake that I",
    "start": "631279",
    "end": "632760"
  },
  {
    "text": "actually made a few times I was not",
    "start": "632760",
    "end": "634480"
  },
  {
    "text": "aware that the rust compiler was still",
    "start": "634480",
    "end": "637279"
  },
  {
    "text": "doing borrow checking within unsafe",
    "start": "637279",
    "end": "639519"
  },
  {
    "text": "blocks I thought it turned off all those",
    "start": "639519",
    "end": "641279"
  },
  {
    "text": "features unsafe code still gets checked",
    "start": "641279",
    "end": "644560"
  },
  {
    "text": "by the borrow Checker so like it it's",
    "start": "644560",
    "end": "646360"
  },
  {
    "text": "not like it's disabling memory safety",
    "start": "646360",
    "end": "648560"
  },
  {
    "text": "within rust it's just like I said it's",
    "start": "648560",
    "end": "650360"
  },
  {
    "text": "it's adding these features it's not",
    "start": "650360",
    "end": "652760"
  },
  {
    "text": "taking anything away and then the rust",
    "start": "652760",
    "end": "654720"
  },
  {
    "text": "type system will still provide safety",
    "start": "654720",
    "end": "656279"
  },
  {
    "text": "constraints for safe rust types even",
    "start": "656279",
    "end": "658279"
  },
  {
    "text": "within an unsafe block okay and that's",
    "start": "658279",
    "end": "659959"
  },
  {
    "text": "part of my issue too is like if I have",
    "start": "659959",
    "end": "661360"
  },
  {
    "text": "an unsafe block and I have to go into a",
    "start": "661360",
    "end": "663320"
  },
  {
    "text": "function call for a huge structure is",
    "start": "663320",
    "end": "665800"
  },
  {
    "text": "that going to disable all the safety",
    "start": "665800",
    "end": "667160"
  },
  {
    "text": "within that block and the answer here is",
    "start": "667160",
    "end": "669040"
  },
  {
    "text": "no okay but again like in this article",
    "start": "669040",
    "end": "671519"
  },
  {
    "text": "written in 2024 they have to cite a cve",
    "start": "671519",
    "end": "674279"
  },
  {
    "text": "from 2018 2019 that's a pretty good",
    "start": "674279",
    "end": "677000"
  },
  {
    "text": "track record compared to Windows um to",
    "start": "677000",
    "end": "681040"
  },
  {
    "text": "determine the risk posed by unsafe rust",
    "start": "681040",
    "end": "683120"
  },
  {
    "text": "want examine how much actual rust code",
    "start": "683120",
    "end": "685200"
  },
  {
    "text": "us as the unsafe keyword yeah I'm very",
    "start": "685200",
    "end": "687200"
  },
  {
    "text": "curious what goes on here so the",
    "start": "687200",
    "end": "689360"
  },
  {
    "start": "688000",
    "end": "957000"
  },
  {
    "text": "canonical way to distribute rust code is",
    "start": "689360",
    "end": "691240"
  },
  {
    "text": "through a package called the crate yep",
    "start": "691240",
    "end": "693040"
  },
  {
    "text": "as of May 2024 there are about 145,000",
    "start": "693040",
    "end": "696160"
  },
  {
    "text": "crates that's actually a lot wow of",
    "start": "696160",
    "end": "698120"
  },
  {
    "text": "which 127,000 contain significant code",
    "start": "698120",
    "end": "700560"
  },
  {
    "text": "okay they're like they're ignoring all",
    "start": "700560",
    "end": "701880"
  },
  {
    "text": "like the is even right like the project",
    "start": "701880",
    "end": "704279"
  },
  {
    "text": "crates that don't matter of those crates",
    "start": "704279",
    "end": "706519"
  },
  {
    "text": "24,000 make use of the unsafe keyword",
    "start": "706519",
    "end": "708959"
  },
  {
    "text": "which is 19% of all crates very",
    "start": "708959",
    "end": "711959"
  },
  {
    "text": "interesting and 3435 make a direct",
    "start": "711959",
    "end": "714720"
  },
  {
    "text": "function call into another crate that",
    "start": "714720",
    "end": "716680"
  },
  {
    "text": "uses the unsafe keyword okay so it's",
    "start": "716680",
    "end": "719440"
  },
  {
    "text": "very interesting So 20% of all crates",
    "start": "719440",
    "end": "721320"
  },
  {
    "text": "use unsafe 34% make a call into a crate",
    "start": "721320",
    "end": "724240"
  },
  {
    "text": "that uses unsafe okay so like 35% of",
    "start": "724240",
    "end": "726760"
  },
  {
    "text": "rust depends on the unsafe keyword very",
    "start": "726760",
    "end": "729040"
  },
  {
    "text": "interesting that that is a lot more than",
    "start": "729040",
    "end": "731399"
  },
  {
    "text": "I expected now again based on what they",
    "start": "731399",
    "end": "733079"
  },
  {
    "text": "said about the behavior of unsafe you",
    "start": "733079",
    "end": "734800"
  },
  {
    "text": "know I'm not like super ex like worried",
    "start": "734800",
    "end": "736680"
  },
  {
    "text": "about that but that is a much higher",
    "start": "736680",
    "end": "738360"
  },
  {
    "text": "number than I thought and most of these",
    "start": "738360",
    "end": "739680"
  },
  {
    "text": "unsafe rust uses are calls into existing",
    "start": "739680",
    "end": "742639"
  },
  {
    "text": "thirdparty non rust language code or",
    "start": "742639",
    "end": "744680"
  },
  {
    "text": "Library such as C or C++ the ffi yeah",
    "start": "744680",
    "end": "747720"
  },
  {
    "text": "that makes sense so again like rust is a",
    "start": "747720",
    "end": "749600"
  },
  {
    "text": "fairly immature language there's so much",
    "start": "749600",
    "end": "751600"
  },
  {
    "text": "that it needs to do to grow to be an",
    "start": "751600",
    "end": "754160"
  },
  {
    "text": "entire ecosystem ready language and as a",
    "start": "754160",
    "end": "757000"
  },
  {
    "text": "result like they're going to depend on",
    "start": "757000",
    "end": "759120"
  },
  {
    "text": "external libraries to do things that are",
    "start": "759120",
    "end": "761560"
  },
  {
    "text": "not currently done in Rust and as a",
    "start": "761560",
    "end": "763480"
  },
  {
    "text": "result like I said before ffis right",
    "start": "763480",
    "end": "765040"
  },
  {
    "text": "every call into a c or C++ Library will",
    "start": "765040",
    "end": "768040"
  },
  {
    "text": "require the unsafe keyword in fact the",
    "start": "768040",
    "end": "771000"
  },
  {
    "text": "crate with the most uses of unsafe",
    "start": "771000",
    "end": "772680"
  },
  {
    "text": "keyword is the windows crate baby I love",
    "start": "772680",
    "end": "777240"
  },
  {
    "text": "you Windows that's funny as I think",
    "start": "777240",
    "end": "779240"
  },
  {
    "text": "that's awesome that's that's like poetry",
    "start": "779240",
    "end": "781040"
  },
  {
    "text": "that's just Chef's chef's kiss to me big",
    "start": "781040",
    "end": "783360"
  },
  {
    "text": "fan of that uh which allows Russ",
    "start": "783360",
    "end": "784639"
  },
  {
    "text": "developers to call into varas window API",
    "start": "784639",
    "end": "786199"
  },
  {
    "text": "yeah I get that that's that makes sense",
    "start": "786199",
    "end": "787680"
  },
  {
    "text": "it's just very poetic and hilarious that",
    "start": "787680",
    "end": "790040"
  },
  {
    "text": "that's the nature of the windows crate",
    "start": "790040",
    "end": "791360"
  },
  {
    "text": "this does not mean that the code in",
    "start": "791360",
    "end": "792480"
  },
  {
    "text": "these unsa rust blocks are inherently",
    "start": "792480",
    "end": "794240"
  },
  {
    "text": "exploitable majority of all code is most",
    "start": "794240",
    "end": "795880"
  },
  {
    "text": "likely not but the Special Care must be",
    "start": "795880",
    "end": "797360"
  },
  {
    "text": "taken when using unsafe rust in order to",
    "start": "797360",
    "end": "799279"
  },
  {
    "text": "avoid potential vulnerabilities yeah",
    "start": "799279",
    "end": "800560"
  },
  {
    "text": "makes sense at a superficial glance it",
    "start": "800560",
    "end": "802160"
  },
  {
    "text": "may appear that unsafe rust undercuts",
    "start": "802160",
    "end": "804199"
  },
  {
    "text": "the memory safety benefits rust is",
    "start": "804199",
    "end": "805839"
  },
  {
    "text": "becoming increasingly celebrated for and",
    "start": "805839",
    "end": "807639"
  },
  {
    "text": "that's what I thought I thought",
    "start": "807639",
    "end": "808399"
  },
  {
    "text": "literally safe like turned off",
    "start": "808399",
    "end": "810320"
  },
  {
    "text": "everything which I I learned recently is",
    "start": "810320",
    "end": "811800"
  },
  {
    "text": "not the case in reality the unsafe",
    "start": "811800",
    "end": "813320"
  },
  {
    "text": "keyword comes with special safeguards",
    "start": "813320",
    "end": "815120"
  },
  {
    "text": "and can be a powerful way to work with",
    "start": "815120",
    "end": "816639"
  },
  {
    "text": "fewer restrictions when a function",
    "start": "816639",
    "end": "818199"
  },
  {
    "text": "requires flexibility so long as standard",
    "start": "818199",
    "end": "820199"
  },
  {
    "text": "precautions are used and this is where",
    "start": "820199",
    "end": "821560"
  },
  {
    "text": "like the human factors of coding comes",
    "start": "821560",
    "end": "822959"
  },
  {
    "text": "in right like you are you still are",
    "start": "822959",
    "end": "824480"
  },
  {
    "text": "doing pull requests you still are doing",
    "start": "824480",
    "end": "826440"
  },
  {
    "text": "fuzzing you still are doing security",
    "start": "826440",
    "end": "828160"
  },
  {
    "text": "audits like the like using unsafe rust",
    "start": "828160",
    "end": "830839"
  },
  {
    "text": "is okay provided you're not just like",
    "start": "830839",
    "end": "832320"
  },
  {
    "text": "closing your eyes and pressing the the",
    "start": "832320",
    "end": "834320"
  },
  {
    "text": "shift to prod button Safety and Security",
    "start": "834320",
    "end": "836199"
  },
  {
    "text": "a shared responsibility as discussed",
    "start": "836199",
    "end": "838399"
  },
  {
    "text": "Russ lives up to to its reputation as an",
    "start": "838399",
    "end": "840199"
  },
  {
    "text": "excellent and transformative tool for",
    "start": "840199",
    "end": "841720"
  },
  {
    "text": "safe and secure programming even in",
    "start": "841720",
    "end": "843600"
  },
  {
    "text": "unsafe context but this reputation",
    "start": "843600",
    "end": "845680"
  },
  {
    "text": "requires resources collaboration and",
    "start": "845680",
    "end": "847720"
  },
  {
    "text": "constant examination to uphold properly",
    "start": "847720",
    "end": "850079"
  },
  {
    "text": "for example the Russ project is",
    "start": "850079",
    "end": "851320"
  },
  {
    "text": "continuing to develop tools like Miri",
    "start": "851320",
    "end": "853680"
  },
  {
    "text": "Miri is an undefined Behavior detection",
    "start": "853680",
    "end": "855720"
  },
  {
    "text": "tool I have to play with this I have not",
    "start": "855720",
    "end": "857040"
  },
  {
    "text": "heard of this or used this sounds very",
    "start": "857040",
    "end": "858720"
  },
  {
    "text": "cool though uh to allow the checking of",
    "start": "858720",
    "end": "860240"
  },
  {
    "text": "unsaved Russ code the rust Foundation is",
    "start": "860240",
    "end": "861920"
  },
  {
    "text": "committed to its work through its",
    "start": "861920",
    "end": "863160"
  },
  {
    "text": "security initiative a program to support",
    "start": "863160",
    "end": "864839"
  },
  {
    "text": "and advanced state of security within",
    "start": "864839",
    "end": "866000"
  },
  {
    "text": "the rust programming language under",
    "start": "866000",
    "end": "867120"
  },
  {
    "text": "security initiative the Russ",
    "start": "867120",
    "end": "868120"
  },
  {
    "text": "foundation's technology team s develop",
    "start": "868120",
    "end": "869639"
  },
  {
    "text": "new tools like painter typo minion sand",
    "start": "869639",
    "end": "871839"
  },
  {
    "text": "pain to detect vulnerabilities within",
    "start": "871839",
    "end": "872959"
  },
  {
    "text": "rust code giving users insight into",
    "start": "872959",
    "end": "874519"
  },
  {
    "text": "vulnerabilities before they can happen",
    "start": "874519",
    "end": "876240"
  },
  {
    "text": "and allowing for a quick response if",
    "start": "876240",
    "end": "877720"
  },
  {
    "text": "exploitation occurs very cool safety",
    "start": "877720",
    "end": "879720"
  },
  {
    "text": "safety safety is a shared responsibility",
    "start": "879720",
    "end": "882120"
  },
  {
    "text": "this concept is fundamental to Healthy",
    "start": "882120",
    "end": "883519"
  },
  {
    "text": "Communities between the developers using",
    "start": "883519",
    "end": "885000"
  },
  {
    "text": "unsafe rust the groups advocating for",
    "start": "885000",
    "end": "886800"
  },
  {
    "text": "the use of security enhancing tools like",
    "start": "886800",
    "end": "888279"
  },
  {
    "text": "rust and language stewards like our",
    "start": "888279",
    "end": "890040"
  },
  {
    "text": "organization we all have a part to play",
    "start": "890040",
    "end": "891959"
  },
  {
    "text": "in Secure programming practices",
    "start": "891959",
    "end": "893360"
  },
  {
    "text": "collaborative ongoing focus on Safety",
    "start": "893360",
    "end": "895160"
  },
  {
    "text": "and Security will allow the language to",
    "start": "895160",
    "end": "897000"
  },
  {
    "text": "remain as resistant to vulnerability as",
    "start": "897000",
    "end": "899680"
  },
  {
    "text": "possible well into the future yeah 100%",
    "start": "899680",
    "end": "901839"
  },
  {
    "text": "shared responsibility it's on the",
    "start": "901839",
    "end": "903440"
  },
  {
    "text": "community to provide their insights it's",
    "start": "903440",
    "end": "904839"
  },
  {
    "text": "on people to try to write the safest",
    "start": "904839",
    "end": "906680"
  },
  {
    "text": "code it's on Auditors to look at the",
    "start": "906680",
    "end": "908560"
  },
  {
    "text": "code and be like hey what are we doing",
    "start": "908560",
    "end": "909959"
  },
  {
    "text": "here um overall I think my opinion on",
    "start": "909959",
    "end": "911720"
  },
  {
    "text": "Rust has not changed I am shocked that",
    "start": "911720",
    "end": "914839"
  },
  {
    "text": "35% of of code and and crates is it it",
    "start": "914839",
    "end": "918040"
  },
  {
    "text": "accesses an unsafe keyword but again",
    "start": "918040",
    "end": "919680"
  },
  {
    "text": "like Windows for example if you have a",
    "start": "919680",
    "end": "921639"
  },
  {
    "text": "crate who's going to run Windows API",
    "start": "921639",
    "end": "924199"
  },
  {
    "text": "calls every function call is going to be",
    "start": "924199",
    "end": "925920"
  },
  {
    "text": "unsafe it's just the nature of how ffis",
    "start": "925920",
    "end": "927440"
  },
  {
    "text": "work so I get that my my state on on",
    "start": "927440",
    "end": "929519"
  },
  {
    "text": "coding in general is still if you want",
    "start": "929519",
    "end": "931000"
  },
  {
    "text": "to learn to code you need to learn how",
    "start": "931000",
    "end": "932959"
  },
  {
    "text": "computers work the best way to do that",
    "start": "932959",
    "end": "934560"
  },
  {
    "text": "is to learn C and assembly I personally",
    "start": "934560",
    "end": "936360"
  },
  {
    "text": "believe that once you learned how",
    "start": "936360",
    "end": "937880"
  },
  {
    "text": "computers work and how C does not work",
    "start": "937880",
    "end": "940480"
  },
  {
    "text": "in a safe way then pick a memory safe or",
    "start": "940480",
    "end": "943639"
  },
  {
    "text": "a language that tastes like it's memory",
    "start": "943639",
    "end": "945319"
  },
  {
    "text": "safe like rust for example or Zig that's",
    "start": "945319",
    "end": "947519"
  },
  {
    "text": "my current take if you like this video",
    "start": "947519",
    "end": "949040"
  },
  {
    "text": "do me a favor hit like hit subscribe and",
    "start": "949040",
    "end": "950720"
  },
  {
    "text": "then go check out this video over here",
    "start": "950720",
    "end": "952720"
  },
  {
    "text": "this one about why I think Zig will",
    "start": "952720",
    "end": "955040"
  },
  {
    "text": "truly change the world of coding we'll",
    "start": "955040",
    "end": "957279"
  },
  {
    "text": "see there",
    "start": "957279",
    "end": "959839"
  }
]