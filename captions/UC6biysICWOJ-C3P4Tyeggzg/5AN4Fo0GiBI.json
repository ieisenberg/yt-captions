[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "you can learn mips assembly in 15",
    "start": "80",
    "end": "1920"
  },
  {
    "text": "minutes i know it sounds crazy but stick",
    "start": "1920",
    "end": "3919"
  },
  {
    "text": "with me and by the end of this video",
    "start": "3919",
    "end": "5200"
  },
  {
    "text": "you'll be able to write a hello world",
    "start": "5200",
    "end": "6799"
  },
  {
    "text": "program in mips assembly from scratch",
    "start": "6799",
    "end": "9120"
  },
  {
    "text": "on your own to learn mips assembly we'll",
    "start": "9120",
    "end": "10960"
  },
  {
    "start": "10000",
    "end": "22000"
  },
  {
    "text": "have to learn about three things",
    "start": "10960",
    "end": "12400"
  },
  {
    "text": "first the registers on the mips",
    "start": "12400",
    "end": "13840"
  },
  {
    "text": "processor second the instruction format",
    "start": "13840",
    "end": "16080"
  },
  {
    "text": "of the mips instruction set",
    "start": "16080",
    "end": "17520"
  },
  {
    "text": "and then three the syscall interface",
    "start": "17520",
    "end": "19600"
  },
  {
    "text": "that the processor uses to talk to the",
    "start": "19600",
    "end": "21439"
  },
  {
    "text": "linux kernel",
    "start": "21439",
    "end": "22320"
  },
  {
    "start": "22000",
    "end": "63000"
  },
  {
    "text": "okay so to learn about assembly we need",
    "start": "22320",
    "end": "24480"
  },
  {
    "text": "to know what registers are",
    "start": "24480",
    "end": "25680"
  },
  {
    "text": "so registers are these hyper fast",
    "start": "25680",
    "end": "28080"
  },
  {
    "text": "internal",
    "start": "28080",
    "end": "28720"
  },
  {
    "text": "hardware hardware-based storage inside",
    "start": "28720",
    "end": "30480"
  },
  {
    "text": "of the processor that are used to",
    "start": "30480",
    "end": "32160"
  },
  {
    "text": "contain values that are either",
    "start": "32160",
    "end": "33760"
  },
  {
    "text": "data or memory addresses so the ones we",
    "start": "33760",
    "end": "36320"
  },
  {
    "text": "care about in this video are going to be",
    "start": "36320",
    "end": "38160"
  },
  {
    "text": "the zero register which in mips is",
    "start": "38160",
    "end": "40079"
  },
  {
    "text": "always the value zero",
    "start": "40079",
    "end": "41360"
  },
  {
    "text": "the v0 and v1 registers which are the",
    "start": "41360",
    "end": "44000"
  },
  {
    "text": "return value of a sub procedure",
    "start": "44000",
    "end": "45840"
  },
  {
    "text": "and then a0 through a3 which are the",
    "start": "45840",
    "end": "48239"
  },
  {
    "text": "arguments that we use to call sub",
    "start": "48239",
    "end": "50160"
  },
  {
    "text": "procedures",
    "start": "50160",
    "end": "50960"
  },
  {
    "text": "the rest so t 0 through t 9 and s 0",
    "start": "50960",
    "end": "54079"
  },
  {
    "text": "through s 7",
    "start": "54079",
    "end": "55039"
  },
  {
    "text": "are important but for the sake of this",
    "start": "55039",
    "end": "56480"
  },
  {
    "text": "video we don't need to know about them",
    "start": "56480",
    "end": "58320"
  },
  {
    "text": "for this video care about v0 and v1 a0",
    "start": "58320",
    "end": "61840"
  },
  {
    "text": "through",
    "start": "61840",
    "end": "62160"
  },
  {
    "text": "a3 okay so when we're writing assembly",
    "start": "62160",
    "end": "64559"
  },
  {
    "start": "63000",
    "end": "177000"
  },
  {
    "text": "we have to write instructions",
    "start": "64559",
    "end": "65920"
  },
  {
    "text": "the instructions come typically in the",
    "start": "65920",
    "end": "67360"
  },
  {
    "text": "format of operand",
    "start": "67360",
    "end": "69280"
  },
  {
    "text": "destination register source register so",
    "start": "69280",
    "end": "71600"
  },
  {
    "text": "in this case we have four instructions",
    "start": "71600",
    "end": "73119"
  },
  {
    "text": "laid out",
    "start": "73119",
    "end": "73760"
  },
  {
    "text": "the instructions come in two formats we",
    "start": "73760",
    "end": "75520"
  },
  {
    "text": "have either a load instruction",
    "start": "75520",
    "end": "77360"
  },
  {
    "text": "or a store instruction a load",
    "start": "77360",
    "end": "79280"
  },
  {
    "text": "instruction is where we want to take",
    "start": "79280",
    "end": "80720"
  },
  {
    "text": "data",
    "start": "80720",
    "end": "81280"
  },
  {
    "text": "out of memory and put it into a register",
    "start": "81280",
    "end": "83920"
  },
  {
    "text": "and then the store instructions we want",
    "start": "83920",
    "end": "85439"
  },
  {
    "text": "to take memory that is in a register and",
    "start": "85439",
    "end": "87520"
  },
  {
    "text": "store it into memory",
    "start": "87520",
    "end": "89200"
  },
  {
    "text": "again registers are inside the processor",
    "start": "89200",
    "end": "91600"
  },
  {
    "text": "they are hardware based and then memory",
    "start": "91600",
    "end": "93439"
  },
  {
    "text": "is stuff like",
    "start": "93439",
    "end": "94159"
  },
  {
    "text": "ram and other memory regions like that",
    "start": "94159",
    "end": "96240"
  },
  {
    "text": "so the first example",
    "start": "96240",
    "end": "97280"
  },
  {
    "text": "li dest immediate that's going to load",
    "start": "97280",
    "end": "100000"
  },
  {
    "text": "the immediate or an integer",
    "start": "100000",
    "end": "101759"
  },
  {
    "text": "into the destination register la",
    "start": "101759",
    "end": "105119"
  },
  {
    "text": "desk symbol that's going to load the",
    "start": "105119",
    "end": "106799"
  },
  {
    "text": "address of symbol",
    "start": "106799",
    "end": "108159"
  },
  {
    "text": "into the destination register lw dest",
    "start": "108159",
    "end": "111200"
  },
  {
    "text": "offset source what that's going to do is",
    "start": "111200",
    "end": "113119"
  },
  {
    "text": "it's going to take the source register",
    "start": "113119",
    "end": "115200"
  },
  {
    "text": "it's going to offset it by some",
    "start": "115200",
    "end": "116640"
  },
  {
    "text": "immediate so it could be zero four",
    "start": "116640",
    "end": "118399"
  },
  {
    "text": "eight it's going to load the value at",
    "start": "118399",
    "end": "120399"
  },
  {
    "text": "that address into the destination",
    "start": "120399",
    "end": "122000"
  },
  {
    "text": "register so again",
    "start": "122000",
    "end": "122960"
  },
  {
    "text": "the three of those instructions are",
    "start": "122960",
    "end": "124000"
  },
  {
    "text": "loading from memory into a register",
    "start": "124000",
    "end": "126560"
  },
  {
    "text": "the last one is store word so that's",
    "start": "126560",
    "end": "128640"
  },
  {
    "text": "going to take the value in",
    "start": "128640",
    "end": "130399"
  },
  {
    "text": "the register reg and it's going to store",
    "start": "130399",
    "end": "132879"
  },
  {
    "text": "it at the",
    "start": "132879",
    "end": "134000"
  },
  {
    "text": "address stored in the destination",
    "start": "134000",
    "end": "136239"
  },
  {
    "text": "register offset by some offset",
    "start": "136239",
    "end": "138080"
  },
  {
    "text": "a little confusing i know but we'll talk",
    "start": "138080",
    "end": "139680"
  },
  {
    "text": "about it in an example right now",
    "start": "139680",
    "end": "141200"
  },
  {
    "text": "okay so here's an example program li t1",
    "start": "141200",
    "end": "145239"
  },
  {
    "text": "ox1337 what this is going to do is it's",
    "start": "145239",
    "end": "147520"
  },
  {
    "text": "going to take the value",
    "start": "147520",
    "end": "148640"
  },
  {
    "text": "1337 and put it into t1 now",
    "start": "148640",
    "end": "152200"
  },
  {
    "text": "lat0 my adder what that's going to do is",
    "start": "152200",
    "end": "155120"
  },
  {
    "text": "it's going to load",
    "start": "155120",
    "end": "156000"
  },
  {
    "text": "the address of my adder into t0",
    "start": "156000",
    "end": "159360"
  },
  {
    "text": "and then finally swt10t0",
    "start": "159360",
    "end": "163280"
  },
  {
    "text": "that's going to store the value in t1",
    "start": "163280",
    "end": "166720"
  },
  {
    "text": "at the address stored in t0 so at the",
    "start": "166720",
    "end": "169760"
  },
  {
    "text": "end",
    "start": "169760",
    "end": "170000"
  },
  {
    "text": "of this we will have the number 1337",
    "start": "170000",
    "end": "173040"
  },
  {
    "text": "stored in my adder pretty",
    "start": "173040",
    "end": "174879"
  },
  {
    "text": "straightforward",
    "start": "174879",
    "end": "177120"
  },
  {
    "start": "177000",
    "end": "241000"
  },
  {
    "text": "so if we are only able to move data from",
    "start": "177120",
    "end": "179840"
  },
  {
    "text": "register to register",
    "start": "179840",
    "end": "180959"
  },
  {
    "text": "from memory to registers who cares how",
    "start": "180959",
    "end": "182800"
  },
  {
    "text": "do we make the processor actually do",
    "start": "182800",
    "end": "184319"
  },
  {
    "text": "something we want to we want to read",
    "start": "184319",
    "end": "185920"
  },
  {
    "text": "data from users we want to print things",
    "start": "185920",
    "end": "187519"
  },
  {
    "text": "to the screen how do we do that",
    "start": "187519",
    "end": "189280"
  },
  {
    "text": "the way we do that in assembly is what's",
    "start": "189280",
    "end": "190959"
  },
  {
    "text": "called a syscall",
    "start": "190959",
    "end": "192400"
  },
  {
    "text": "to execute a syscall we literally run",
    "start": "192400",
    "end": "194640"
  },
  {
    "text": "the instruction",
    "start": "194640",
    "end": "195599"
  },
  {
    "text": "syscall and what this does is it is an",
    "start": "195599",
    "end": "198319"
  },
  {
    "text": "instruction that alerts the kernel",
    "start": "198319",
    "end": "200319"
  },
  {
    "text": "hey we want to take an action we want to",
    "start": "200319",
    "end": "202400"
  },
  {
    "text": "do something and the way that we talk to",
    "start": "202400",
    "end": "204319"
  },
  {
    "text": "the kernel",
    "start": "204319",
    "end": "205200"
  },
  {
    "text": "is through these registers we talked",
    "start": "205200",
    "end": "207200"
  },
  {
    "text": "about the beginning v0",
    "start": "207200",
    "end": "208799"
  },
  {
    "text": "is the number that tells the kernel what",
    "start": "208799",
    "end": "211760"
  },
  {
    "text": "action do we want to take",
    "start": "211760",
    "end": "213120"
  },
  {
    "text": "in this register we put the cis call",
    "start": "213120",
    "end": "215040"
  },
  {
    "text": "number we want to invoke",
    "start": "215040",
    "end": "216959"
  },
  {
    "text": "a0 through a3 are the parameters",
    "start": "216959",
    "end": "220400"
  },
  {
    "text": "of the action we want to take so for",
    "start": "220400",
    "end": "222480"
  },
  {
    "text": "writing a string to the screen",
    "start": "222480",
    "end": "224319"
  },
  {
    "text": "we'll put the pointer to the string in a",
    "start": "224319",
    "end": "226319"
  },
  {
    "text": "zero if we want to read from the user",
    "start": "226319",
    "end": "228640"
  },
  {
    "text": "in a1 we may put the number of bytes so",
    "start": "228640",
    "end": "232000"
  },
  {
    "text": "let's dive in to our development",
    "start": "232000",
    "end": "234400"
  },
  {
    "text": "environment",
    "start": "234400",
    "end": "235120"
  },
  {
    "text": "and we're going to write some assembly",
    "start": "235120",
    "end": "236720"
  },
  {
    "text": "to print hello world to the screen and",
    "start": "236720",
    "end": "238720"
  },
  {
    "text": "then exit the process cleanly let's do",
    "start": "238720",
    "end": "240720"
  },
  {
    "text": "that right now",
    "start": "240720",
    "end": "241439"
  },
  {
    "start": "241000",
    "end": "664000"
  },
  {
    "text": "okay so here i have my development",
    "start": "241439",
    "end": "242879"
  },
  {
    "text": "environment all pulled up",
    "start": "242879",
    "end": "244480"
  },
  {
    "text": "the way that this is going to work is",
    "start": "244480",
    "end": "245760"
  },
  {
    "text": "i'm going to be doing console commands",
    "start": "245760",
    "end": "247840"
  },
  {
    "text": "on the left and i'll be typing assembly",
    "start": "247840",
    "end": "249840"
  },
  {
    "text": "on the right",
    "start": "249840",
    "end": "250640"
  },
  {
    "text": "what we want to do first is make sure",
    "start": "250640",
    "end": "252159"
  },
  {
    "text": "that we have this",
    "start": "252159",
    "end": "254000"
  },
  {
    "text": "installed so you're going to run sudo",
    "start": "254000",
    "end": "255680"
  },
  {
    "text": "apt-install or yum install if you're on",
    "start": "255680",
    "end": "257359"
  },
  {
    "text": "centos",
    "start": "257359",
    "end": "258400"
  },
  {
    "text": "gcc mips linux new what this is going to",
    "start": "258400",
    "end": "261199"
  },
  {
    "text": "do is it's going to install",
    "start": "261199",
    "end": "262560"
  },
  {
    "text": "the build chain for linux for mips",
    "start": "262560",
    "end": "264880"
  },
  {
    "text": "related stuff",
    "start": "264880",
    "end": "266080"
  },
  {
    "text": "then you're also going to do sudo",
    "start": "266080",
    "end": "268400"
  },
  {
    "text": "apt-install kimu",
    "start": "268400",
    "end": "269759"
  },
  {
    "text": "so my virtual machine that i'm",
    "start": "269759",
    "end": "271440"
  },
  {
    "text": "programming in is an x86 virtual machine",
    "start": "271440",
    "end": "273919"
  },
  {
    "text": "but we're going to be writing mips code",
    "start": "273919",
    "end": "275440"
  },
  {
    "text": "how do i get the mips code to run",
    "start": "275440",
    "end": "277040"
  },
  {
    "text": "on x86 we need to run that code in an",
    "start": "277040",
    "end": "280080"
  },
  {
    "text": "emulator and",
    "start": "280080",
    "end": "280960"
  },
  {
    "text": "key mu is an emulator that can run mips",
    "start": "280960",
    "end": "283840"
  },
  {
    "text": "instructions",
    "start": "283840",
    "end": "284720"
  },
  {
    "text": "on an x86 platform so i already have",
    "start": "284720",
    "end": "287520"
  },
  {
    "text": "both of those but you go ahead and pause",
    "start": "287520",
    "end": "289040"
  },
  {
    "text": "the video",
    "start": "289040",
    "end": "289759"
  },
  {
    "text": "also like the video and then come on",
    "start": "289759",
    "end": "291520"
  },
  {
    "text": "back when you have those things",
    "start": "291520",
    "end": "292560"
  },
  {
    "text": "installed",
    "start": "292560",
    "end": "294080"
  },
  {
    "text": "okay once you have them installed we're",
    "start": "294080",
    "end": "295759"
  },
  {
    "text": "gonna start writing some code so when",
    "start": "295759",
    "end": "297280"
  },
  {
    "text": "you're writing assembly",
    "start": "297280",
    "end": "298800"
  },
  {
    "text": "you have two set they're called segments",
    "start": "298800",
    "end": "301600"
  },
  {
    "text": "of memory",
    "start": "301600",
    "end": "303280"
  },
  {
    "text": "text and data the text segment is a",
    "start": "303280",
    "end": "306400"
  },
  {
    "text": "segment that contains",
    "start": "306400",
    "end": "308000"
  },
  {
    "text": "readable and executable data better",
    "start": "308000",
    "end": "310400"
  },
  {
    "text": "known as instructions because we execute",
    "start": "310400",
    "end": "312240"
  },
  {
    "text": "them",
    "start": "312240",
    "end": "312720"
  },
  {
    "text": "and then data is a segment that contains",
    "start": "312720",
    "end": "315199"
  },
  {
    "text": "readable",
    "start": "315199",
    "end": "315759"
  },
  {
    "text": "and writable data but not executable so",
    "start": "315759",
    "end": "318639"
  },
  {
    "text": "in the text section go our instructions",
    "start": "318639",
    "end": "320960"
  },
  {
    "text": "and then in the data section go our data",
    "start": "320960",
    "end": "323120"
  },
  {
    "text": "so if we're going to print a string for",
    "start": "323120",
    "end": "324400"
  },
  {
    "text": "example the string goes here",
    "start": "324400",
    "end": "326320"
  },
  {
    "text": "also to get set up we have to do a few",
    "start": "326320",
    "end": "327919"
  },
  {
    "text": "more housekeeping things",
    "start": "327919",
    "end": "330160"
  },
  {
    "text": "we need to expose a symbol called start",
    "start": "330160",
    "end": "334320"
  },
  {
    "text": "so when gcc will get invoked it will",
    "start": "334320",
    "end": "336479"
  },
  {
    "text": "look for the start symbol to know where",
    "start": "336479",
    "end": "338560"
  },
  {
    "text": "it needs to run",
    "start": "338560",
    "end": "339600"
  },
  {
    "text": "first if we don't make this a global and",
    "start": "339600",
    "end": "341840"
  },
  {
    "text": "if we don't declare it it'll say",
    "start": "341840",
    "end": "343680"
  },
  {
    "text": "i was unable to find start so i can't",
    "start": "343680",
    "end": "345840"
  },
  {
    "text": "compile your program for you too bad so",
    "start": "345840",
    "end": "347759"
  },
  {
    "text": "sad",
    "start": "347759",
    "end": "349360"
  },
  {
    "text": "okay awesome so now we're going to start",
    "start": "349360",
    "end": "352080"
  },
  {
    "text": "writing some instructions to invoke the",
    "start": "352080",
    "end": "353919"
  },
  {
    "text": "syscall",
    "start": "353919",
    "end": "354639"
  },
  {
    "text": "remember how i said that v0 is a",
    "start": "354639",
    "end": "356800"
  },
  {
    "text": "register that contains",
    "start": "356800",
    "end": "358240"
  },
  {
    "text": "the syscall number you're probably",
    "start": "358240",
    "end": "361440"
  },
  {
    "text": "asking",
    "start": "361440",
    "end": "361919"
  },
  {
    "text": "well how do i know what the syscall",
    "start": "361919",
    "end": "363520"
  },
  {
    "text": "number is how do i know",
    "start": "363520",
    "end": "365039"
  },
  {
    "text": "what registers to use for what",
    "start": "365039",
    "end": "366639"
  },
  {
    "text": "parameters etc",
    "start": "366639",
    "end": "368080"
  },
  {
    "text": "so what we're actually going to do is",
    "start": "368080",
    "end": "369120"
  },
  {
    "text": "reference what's called a syscall table",
    "start": "369120",
    "end": "371120"
  },
  {
    "text": "and i'll zoom in for those of you that",
    "start": "371120",
    "end": "372400"
  },
  {
    "text": "are on",
    "start": "372400",
    "end": "373440"
  },
  {
    "text": "mobile here so this is a syscall table",
    "start": "373440",
    "end": "376400"
  },
  {
    "text": "you can google it and type in",
    "start": "376400",
    "end": "377840"
  },
  {
    "text": "google mips linux syscall table or you",
    "start": "377840",
    "end": "381199"
  },
  {
    "text": "can go to the url here i'll put it in",
    "start": "381199",
    "end": "382800"
  },
  {
    "text": "the description box",
    "start": "382800",
    "end": "383840"
  },
  {
    "text": "what we have here is the syscall table",
    "start": "383840",
    "end": "387039"
  },
  {
    "text": "for linux",
    "start": "387039",
    "end": "388080"
  },
  {
    "text": "so if we want to run the exit syscall",
    "start": "388080",
    "end": "390880"
  },
  {
    "text": "for linux",
    "start": "390880",
    "end": "391759"
  },
  {
    "text": "we will use this syscall number in v0",
    "start": "391759",
    "end": "396080"
  },
  {
    "text": "a0 will be the error code if we want to",
    "start": "396080",
    "end": "398400"
  },
  {
    "text": "write a string to the screen",
    "start": "398400",
    "end": "400080"
  },
  {
    "text": "we are going to use syscall 4004 we're",
    "start": "400080",
    "end": "402960"
  },
  {
    "text": "going to put the file descriptor to",
    "start": "402960",
    "end": "404479"
  },
  {
    "text": "write 2",
    "start": "404479",
    "end": "405120"
  },
  {
    "text": "into parameter 1 so a0 we're going to",
    "start": "405120",
    "end": "407600"
  },
  {
    "text": "put the",
    "start": "407600",
    "end": "408240"
  },
  {
    "text": "string to right into a1 and the number",
    "start": "408240",
    "end": "410960"
  },
  {
    "text": "of bytes to write into a3 right",
    "start": "410960",
    "end": "413280"
  },
  {
    "text": "or a2 rather so we can start with the",
    "start": "413280",
    "end": "416160"
  },
  {
    "text": "exit syscall so",
    "start": "416160",
    "end": "417440"
  },
  {
    "text": "v0 is going to get 4001",
    "start": "417440",
    "end": "420479"
  },
  {
    "text": "and how do we load an immediate into v",
    "start": "420479",
    "end": "422720"
  },
  {
    "text": "zero we use the load immediate",
    "start": "422720",
    "end": "423919"
  },
  {
    "text": "instruction",
    "start": "423919",
    "end": "424720"
  },
  {
    "text": "so into v zero goes four thousand and",
    "start": "424720",
    "end": "427280"
  },
  {
    "text": "one and then",
    "start": "427280",
    "end": "428160"
  },
  {
    "text": "we wanna make sure we return a sane exit",
    "start": "428160",
    "end": "431120"
  },
  {
    "text": "number right",
    "start": "431120",
    "end": "432080"
  },
  {
    "text": "so load immediate into a zero right so",
    "start": "432080",
    "end": "434560"
  },
  {
    "text": "that's argument 0 or the first parameter",
    "start": "434560",
    "end": "436560"
  },
  {
    "text": "to be spent to be sent",
    "start": "436560",
    "end": "439680"
  },
  {
    "text": "and then that goes into a0 and we return",
    "start": "439759",
    "end": "441759"
  },
  {
    "text": "the error codes i want to return",
    "start": "441759",
    "end": "443680"
  },
  {
    "text": "the error code 13 just to test and then",
    "start": "443680",
    "end": "446720"
  },
  {
    "text": "now that we have these registers set up",
    "start": "446720",
    "end": "448160"
  },
  {
    "text": "to invoke a syscall",
    "start": "448160",
    "end": "449520"
  },
  {
    "text": "we type syscall and in theory if this",
    "start": "449520",
    "end": "452880"
  },
  {
    "text": "works correctly",
    "start": "452880",
    "end": "454080"
  },
  {
    "text": "this should just exit the program and",
    "start": "454080",
    "end": "456240"
  },
  {
    "text": "return the process return code of 13.",
    "start": "456240",
    "end": "458960"
  },
  {
    "text": "so now how do we compile this stuff we",
    "start": "458960",
    "end": "461039"
  },
  {
    "text": "have to do it in a two-stage process",
    "start": "461039",
    "end": "462840"
  },
  {
    "text": "so first we're going to assemble so we",
    "start": "462840",
    "end": "466000"
  },
  {
    "text": "type",
    "start": "466000",
    "end": "466400"
  },
  {
    "text": "limit mips linux new",
    "start": "466400",
    "end": "469440"
  },
  {
    "text": "as for the assembler we're going to pass",
    "start": "469440",
    "end": "471919"
  },
  {
    "text": "in hello.s",
    "start": "471919",
    "end": "473199"
  },
  {
    "text": "as my file and we're going to output",
    "start": "473199",
    "end": "475360"
  },
  {
    "text": "hello.o",
    "start": "475360",
    "end": "476960"
  },
  {
    "text": "and it's just warning me that i didn't",
    "start": "476960",
    "end": "478160"
  },
  {
    "text": "put a new line at the end of the file it",
    "start": "478160",
    "end": "479599"
  },
  {
    "text": "looks set so i'm gonna hit enter and",
    "start": "479599",
    "end": "481120"
  },
  {
    "text": "make it",
    "start": "481120",
    "end": "481680"
  },
  {
    "text": "shut up okay so now we have this file",
    "start": "481680",
    "end": "484800"
  },
  {
    "text": "hello dot o this is an intermediate",
    "start": "484800",
    "end": "488319"
  },
  {
    "text": "relocatable file that we're going to use",
    "start": "488319",
    "end": "490000"
  },
  {
    "text": "to now compile",
    "start": "490000",
    "end": "491520"
  },
  {
    "text": "into a final elf and how do we do that",
    "start": "491520",
    "end": "493919"
  },
  {
    "text": "so we do mips",
    "start": "493919",
    "end": "494960"
  },
  {
    "text": "linux new gcc we're going to use the",
    "start": "494960",
    "end": "498240"
  },
  {
    "text": "hello.o file",
    "start": "498240",
    "end": "499840"
  },
  {
    "text": "we're going to output hello the binary",
    "start": "499840",
    "end": "502560"
  },
  {
    "text": "and then we're going to do",
    "start": "502560",
    "end": "503440"
  },
  {
    "text": "tac no standard lib so no std",
    "start": "503440",
    "end": "506879"
  },
  {
    "text": "lib and then also tax static what this",
    "start": "506879",
    "end": "509919"
  },
  {
    "text": "will do is it'll prevent the binary from",
    "start": "509919",
    "end": "512080"
  },
  {
    "text": "doing run time linking",
    "start": "512080",
    "end": "513680"
  },
  {
    "text": "and it'll prevent a lot of errors when",
    "start": "513680",
    "end": "515360"
  },
  {
    "text": "we're trying to emulate our code so hit",
    "start": "515360",
    "end": "516800"
  },
  {
    "text": "enter here",
    "start": "516800",
    "end": "517599"
  },
  {
    "text": "and we should get no errors and now we",
    "start": "517599",
    "end": "520320"
  },
  {
    "text": "can do",
    "start": "520320",
    "end": "521279"
  },
  {
    "text": "kimu mips kimu mips to invoke",
    "start": "521279",
    "end": "525839"
  },
  {
    "text": "our emulator and pass it the program",
    "start": "525839",
    "end": "528240"
  },
  {
    "text": "hello",
    "start": "528240",
    "end": "529600"
  },
  {
    "text": "so nothing happened and nothing crashed",
    "start": "529600",
    "end": "531279"
  },
  {
    "text": "which is intended and now if we do",
    "start": "531279",
    "end": "533200"
  },
  {
    "text": "echo dollar sign question mark which is",
    "start": "533200",
    "end": "536000"
  },
  {
    "text": "the previous return code",
    "start": "536000",
    "end": "537839"
  },
  {
    "text": "we should get 13 which is the syscall",
    "start": "537839",
    "end": "540800"
  },
  {
    "text": "error code that we wanted our program to",
    "start": "540800",
    "end": "542880"
  },
  {
    "text": "exit with",
    "start": "542880",
    "end": "543680"
  },
  {
    "text": "awesome so now we we are able to invoke",
    "start": "543680",
    "end": "546560"
  },
  {
    "text": "system calls we want our code to print",
    "start": "546560",
    "end": "548640"
  },
  {
    "text": "hello world",
    "start": "548640",
    "end": "549440"
  },
  {
    "text": "so how do we do that first we have to",
    "start": "549440",
    "end": "551279"
  },
  {
    "text": "declare an ascii",
    "start": "551279",
    "end": "553120"
  },
  {
    "text": "zero terminated string so ascii z and",
    "start": "553120",
    "end": "555920"
  },
  {
    "text": "it's just gonna be",
    "start": "555920",
    "end": "556800"
  },
  {
    "text": "hello world exclamation point new line",
    "start": "556800",
    "end": "559600"
  },
  {
    "text": "the new line being the enter key so it",
    "start": "559600",
    "end": "561440"
  },
  {
    "text": "looks pretty when we",
    "start": "561440",
    "end": "562640"
  },
  {
    "text": "when we print it um and now we need to",
    "start": "562640",
    "end": "565680"
  },
  {
    "text": "invoke our syscall so what is the right",
    "start": "565680",
    "end": "567680"
  },
  {
    "text": "syscall right how do we print to the",
    "start": "567680",
    "end": "569120"
  },
  {
    "text": "screen we write to the screen so we got",
    "start": "569120",
    "end": "570880"
  },
  {
    "text": "to look at what the right syscall is",
    "start": "570880",
    "end": "573279"
  },
  {
    "text": "okay so it's a0 gets the file descriptor",
    "start": "573279",
    "end": "578959"
  },
  {
    "text": "param 2 gets the address and param",
    "start": "578959",
    "end": "582320"
  },
  {
    "text": "3 gets the length so we'll do",
    "start": "582320",
    "end": "585600"
  },
  {
    "text": "our load immediate into v0 4004",
    "start": "585600",
    "end": "590320"
  },
  {
    "text": "we're going to load into a0 the",
    "start": "590320",
    "end": "593600"
  },
  {
    "text": "file descriptor that we want to write to",
    "start": "593600",
    "end": "595279"
  },
  {
    "text": "so remember in",
    "start": "595279",
    "end": "597040"
  },
  {
    "text": "uh in linux land standard in",
    "start": "597040",
    "end": "601360"
  },
  {
    "text": "is file descriptor 0 standard out is",
    "start": "601360",
    "end": "603680"
  },
  {
    "text": "foul descriptor one",
    "start": "603680",
    "end": "604959"
  },
  {
    "text": "and standard error is standard",
    "start": "604959",
    "end": "606560"
  },
  {
    "text": "descriptor two there's file descriptor",
    "start": "606560",
    "end": "608320"
  },
  {
    "text": "two",
    "start": "608320",
    "end": "608800"
  },
  {
    "text": "so we wanna write to standard out so we",
    "start": "608800",
    "end": "611040"
  },
  {
    "text": "load one into a0",
    "start": "611040",
    "end": "614240"
  },
  {
    "text": "now we load an address into a1 remember",
    "start": "614240",
    "end": "617519"
  },
  {
    "text": "we can load the address of things",
    "start": "617519",
    "end": "619680"
  },
  {
    "text": "so we're going to call this string",
    "start": "619680",
    "end": "621680"
  },
  {
    "text": "message this declares a label",
    "start": "621680",
    "end": "623440"
  },
  {
    "text": "and we're going to load the address of",
    "start": "623440",
    "end": "625360"
  },
  {
    "text": "the label",
    "start": "625360",
    "end": "626480"
  },
  {
    "text": "into a1 and then finally we need to put",
    "start": "626480",
    "end": "629839"
  },
  {
    "text": "the length of the string into a2 and",
    "start": "629839",
    "end": "632800"
  },
  {
    "text": "that's going to be 13 as well",
    "start": "632800",
    "end": "634800"
  },
  {
    "text": "and then we syscall right so set up for",
    "start": "634800",
    "end": "638160"
  },
  {
    "text": "a write syscall",
    "start": "638160",
    "end": "639200"
  },
  {
    "text": "we're going to write it to standard out",
    "start": "639200",
    "end": "641040"
  },
  {
    "text": "we're going to load the address of the",
    "start": "641040",
    "end": "642720"
  },
  {
    "text": "message into the buff pointer for the",
    "start": "642720",
    "end": "644480"
  },
  {
    "text": "syscall",
    "start": "644480",
    "end": "645200"
  },
  {
    "text": "and we're going to tell this and we're",
    "start": "645200",
    "end": "646880"
  },
  {
    "text": "going to tell the kernel to print",
    "start": "646880",
    "end": "648399"
  },
  {
    "text": "13 bytes so remember we",
    "start": "648399",
    "end": "653920"
  },
  {
    "text": "assemble we compile",
    "start": "653920",
    "end": "658079"
  },
  {
    "text": "and then we kimu mips boom hello world",
    "start": "658079",
    "end": "661760"
  },
  {
    "text": "and our output",
    "start": "661760",
    "end": "662800"
  },
  {
    "text": "should still be 13. see like i said",
    "start": "662800",
    "end": "665120"
  },
  {
    "start": "664000",
    "end": "698000"
  },
  {
    "text": "assembly is really easy if you just know",
    "start": "665120",
    "end": "667040"
  },
  {
    "text": "the basic building blocks of the",
    "start": "667040",
    "end": "668560"
  },
  {
    "text": "instruction set",
    "start": "668560",
    "end": "669440"
  },
  {
    "text": "by learning the registers by learning",
    "start": "669440",
    "end": "671040"
  },
  {
    "text": "the instruction set and by learning the",
    "start": "671040",
    "end": "672480"
  },
  {
    "text": "syscall interface you can basically",
    "start": "672480",
    "end": "674240"
  },
  {
    "text": "teach yourself",
    "start": "674240",
    "end": "675040"
  },
  {
    "text": "any assembly language really really fast",
    "start": "675040",
    "end": "677519"
  },
  {
    "text": "if you did enjoy that or you learned",
    "start": "677519",
    "end": "678880"
  },
  {
    "text": "something do me a favor hit like",
    "start": "678880",
    "end": "680560"
  },
  {
    "text": "hit subscribe and i'll see you guys in",
    "start": "680560",
    "end": "682720"
  },
  {
    "text": "the next video thanks a lot take care",
    "start": "682720",
    "end": "689839"
  },
  {
    "text": "[Music]",
    "start": "692840",
    "end": "696200"
  },
  {
    "text": "you",
    "start": "696959",
    "end": "699040"
  }
]