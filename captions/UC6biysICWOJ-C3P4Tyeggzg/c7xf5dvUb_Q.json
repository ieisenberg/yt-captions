[
  {
    "start": "0",
    "end": "14000"
  },
  {
    "text": "so guys it finally happened i was",
    "start": "240",
    "end": "1920"
  },
  {
    "text": "writing some code my son asked me hey",
    "start": "1920",
    "end": "3760"
  },
  {
    "text": "dad where does memory come from and i",
    "start": "3760",
    "end": "5440"
  },
  {
    "text": "realized i didn't have a good answer for",
    "start": "5440",
    "end": "7040"
  },
  {
    "text": "him so in this video we're gonna go over",
    "start": "7040",
    "end": "9040"
  },
  {
    "text": "how does a program get more memory at",
    "start": "9040",
    "end": "12160"
  },
  {
    "text": "runtime right so to talk about that we",
    "start": "12160",
    "end": "13920"
  },
  {
    "text": "first have to talk about where does the",
    "start": "13920",
    "end": "15440"
  },
  {
    "start": "14000",
    "end": "192000"
  },
  {
    "text": "program get memory from where can pen",
    "start": "15440",
    "end": "17600"
  },
  {
    "text": "memory come from in the first place so",
    "start": "17600",
    "end": "19359"
  },
  {
    "text": "we have two regions of memory that are",
    "start": "19359",
    "end": "21119"
  },
  {
    "text": "broken up into what's called kernel",
    "start": "21119",
    "end": "22400"
  },
  {
    "text": "space and user space memory not drawn to",
    "start": "22400",
    "end": "24560"
  },
  {
    "text": "scale but basically the region is cut in",
    "start": "24560",
    "end": "26240"
  },
  {
    "text": "half or the entire region below hex",
    "start": "26240",
    "end": "28480"
  },
  {
    "text": "seven ffff that whole big line there and",
    "start": "28480",
    "end": "31439"
  },
  {
    "text": "down is user space that we can actually",
    "start": "31439",
    "end": "33680"
  },
  {
    "text": "map into our program for a process to",
    "start": "33680",
    "end": "36079"
  },
  {
    "text": "use during execution that all lives",
    "start": "36079",
    "end": "38000"
  },
  {
    "text": "right here",
    "start": "38000",
    "end": "39280"
  },
  {
    "text": "so when we run a program and we load it",
    "start": "39280",
    "end": "41200"
  },
  {
    "text": "what actually happens is the elf is",
    "start": "41200",
    "end": "42879"
  },
  {
    "text": "taken apart into a few parts towards the",
    "start": "42879",
    "end": "45280"
  },
  {
    "text": "bottom near zero here we have three",
    "start": "45280",
    "end": "48000"
  },
  {
    "text": "sections that get loaded up the first is",
    "start": "48000",
    "end": "49840"
  },
  {
    "text": "called the text section and that's where",
    "start": "49840",
    "end": "51280"
  },
  {
    "text": "your code actually lives your program",
    "start": "51280",
    "end": "52960"
  },
  {
    "text": "gets loaded pretty close to zero not",
    "start": "52960",
    "end": "54640"
  },
  {
    "text": "exactly but depending on aslr it's",
    "start": "54640",
    "end": "56399"
  },
  {
    "text": "around zero above that we have the data",
    "start": "56399",
    "end": "58719"
  },
  {
    "text": "section that is constants or variables",
    "start": "58719",
    "end": "61600"
  },
  {
    "text": "that are defined at compile time that",
    "start": "61600",
    "end": "63520"
  },
  {
    "text": "will not change or can be used as data",
    "start": "63520",
    "end": "66240"
  },
  {
    "text": "and they live in this area on you know",
    "start": "66240",
    "end": "68479"
  },
  {
    "text": "in the memory and then above that we",
    "start": "68479",
    "end": "69920"
  },
  {
    "text": "have the bss section those are",
    "start": "69920",
    "end": "71520"
  },
  {
    "text": "uninitialized variables that get loaded",
    "start": "71520",
    "end": "73920"
  },
  {
    "text": "into the memory at runtime",
    "start": "73920",
    "end": "76560"
  },
  {
    "text": "and then way above that at the top of",
    "start": "76560",
    "end": "78320"
  },
  {
    "text": "user space for the very very end we have",
    "start": "78320",
    "end": "80400"
  },
  {
    "text": "the stack structure and the stack",
    "start": "80400",
    "end": "81920"
  },
  {
    "text": "structure is one that grows downward",
    "start": "81920",
    "end": "84720"
  },
  {
    "text": "right so the downward growing means that",
    "start": "84720",
    "end": "86320"
  },
  {
    "text": "as the stack gets bigger its top gets",
    "start": "86320",
    "end": "88880"
  },
  {
    "text": "more and more negative so the question",
    "start": "88880",
    "end": "90960"
  },
  {
    "text": "is then okay if we don't have data in",
    "start": "90960",
    "end": "93439"
  },
  {
    "text": "the elf that gets loaded in we don't",
    "start": "93439",
    "end": "95360"
  },
  {
    "text": "have data that gets put onto the stack",
    "start": "95360",
    "end": "97200"
  },
  {
    "text": "which is already done at compile time",
    "start": "97200",
    "end": "99360"
  },
  {
    "text": "where does data come from the answer to",
    "start": "99360",
    "end": "101520"
  },
  {
    "text": "this question is that there are",
    "start": "101520",
    "end": "103280"
  },
  {
    "text": "three locations we can get memory from",
    "start": "103280",
    "end": "105439"
  },
  {
    "text": "the first is going to be a user space",
    "start": "105439",
    "end": "107680"
  },
  {
    "text": "allocator like the glibc malloc for",
    "start": "107680",
    "end": "110240"
  },
  {
    "text": "example",
    "start": "110240",
    "end": "111360"
  },
  {
    "text": "the second is the system break and break",
    "start": "111360",
    "end": "113759"
  },
  {
    "text": "system calls talk about that in a little",
    "start": "113759",
    "end": "115040"
  },
  {
    "text": "bit and then third is the map system",
    "start": "115040",
    "end": "117360"
  },
  {
    "text": "call so first we're going to talk about",
    "start": "117360",
    "end": "119280"
  },
  {
    "text": "the user space allocator that creates",
    "start": "119280",
    "end": "120960"
  },
  {
    "text": "what's called a heap so a heap is a",
    "start": "120960",
    "end": "123119"
  },
  {
    "text": "dynamically allocated structure that",
    "start": "123119",
    "end": "124880"
  },
  {
    "text": "grows upwards towards the stack while",
    "start": "124880",
    "end": "127040"
  },
  {
    "text": "the stack is growing downwards towards",
    "start": "127040",
    "end": "128720"
  },
  {
    "text": "the heap we are going to go into our vm",
    "start": "128720",
    "end": "131599"
  },
  {
    "text": "here and i'll show you guys actually how",
    "start": "131599",
    "end": "133120"
  },
  {
    "text": "to use the heap and talk about the pros",
    "start": "133120",
    "end": "134640"
  },
  {
    "text": "and cons so by calling malik what you're",
    "start": "134640",
    "end": "137520"
  },
  {
    "text": "doing is you're telling glib c hey i",
    "start": "137520",
    "end": "139440"
  },
  {
    "text": "want to use your allocator and i want",
    "start": "139440",
    "end": "141360"
  },
  {
    "text": "you to give me 10 24 bytes right really",
    "start": "141360",
    "end": "143680"
  },
  {
    "text": "really easy to use so you pretty much",
    "start": "143680",
    "end": "145280"
  },
  {
    "text": "say give me this many bytes and then if",
    "start": "145280",
    "end": "147120"
  },
  {
    "text": "we get that value back we can use it and",
    "start": "147120",
    "end": "149680"
  },
  {
    "text": "put stuff there so you know we alloc 10",
    "start": "149680",
    "end": "152400"
  },
  {
    "text": "24 bytes and then if we get it i stir",
    "start": "152400",
    "end": "154720"
  },
  {
    "text": "copy this value into my heap turn it out",
    "start": "154720",
    "end": "157280"
  },
  {
    "text": "and then we have to free it to give it",
    "start": "157280",
    "end": "158720"
  },
  {
    "text": "back to the allocator so not really that",
    "start": "158720",
    "end": "160640"
  },
  {
    "text": "complicated",
    "start": "160640",
    "end": "162000"
  },
  {
    "text": "i would say this allocator is the",
    "start": "162000",
    "end": "163360"
  },
  {
    "text": "easiest to use",
    "start": "163360",
    "end": "164800"
  },
  {
    "text": "the trade-off here is that the allocator",
    "start": "164800",
    "end": "167120"
  },
  {
    "text": "and the back end as you use it more and",
    "start": "167120",
    "end": "168959"
  },
  {
    "text": "more is actually a very complicated",
    "start": "168959",
    "end": "171440"
  },
  {
    "text": "length list structure so the trade-off",
    "start": "171440",
    "end": "173360"
  },
  {
    "text": "here for simplicity and just asking for",
    "start": "173360",
    "end": "175680"
  },
  {
    "text": "this many bytes is that it's a little",
    "start": "175680",
    "end": "178080"
  },
  {
    "text": "more performance intensive right so if",
    "start": "178080",
    "end": "180319"
  },
  {
    "text": "you're looking for very very performant",
    "start": "180319",
    "end": "182480"
  },
  {
    "text": "you know if you're constrained about how",
    "start": "182480",
    "end": "184239"
  },
  {
    "text": "fast your program has to work maybe",
    "start": "184239",
    "end": "185680"
  },
  {
    "text": "sometimes the glibc allocator is not for",
    "start": "185680",
    "end": "187680"
  },
  {
    "text": "you so if you don't use a glibc",
    "start": "187680",
    "end": "189599"
  },
  {
    "text": "allocator then",
    "start": "189599",
    "end": "190800"
  },
  {
    "text": "what is the next step right so second we",
    "start": "190800",
    "end": "193360"
  },
  {
    "start": "192000",
    "end": "309000"
  },
  {
    "text": "have the system break or break system",
    "start": "193360",
    "end": "195440"
  },
  {
    "text": "calls",
    "start": "195440",
    "end": "196480"
  },
  {
    "text": "this arrow here points to the fact that",
    "start": "196480",
    "end": "198560"
  },
  {
    "text": "the bss section is the top of the elf",
    "start": "198560",
    "end": "200879"
  },
  {
    "text": "and that denotes the system break or",
    "start": "200879",
    "end": "203440"
  },
  {
    "text": "what the system defines as the top of",
    "start": "203440",
    "end": "205599"
  },
  {
    "text": "your user space outside of the stack by",
    "start": "205599",
    "end": "207920"
  },
  {
    "text": "using the system break system call we",
    "start": "207920",
    "end": "209680"
  },
  {
    "text": "can actually increase that break value",
    "start": "209680",
    "end": "212400"
  },
  {
    "text": "to create more room for us to put",
    "start": "212400",
    "end": "213920"
  },
  {
    "text": "variables right so i'll show you guys",
    "start": "213920",
    "end": "215760"
  },
  {
    "text": "how to use that here pretty",
    "start": "215760",
    "end": "216959"
  },
  {
    "text": "straightforward so using this program we",
    "start": "216959",
    "end": "219200"
  },
  {
    "text": "call system break two times no man",
    "start": "219200",
    "end": "222480"
  },
  {
    "text": "or not system breaks set break rather um",
    "start": "222480",
    "end": "225120"
  },
  {
    "text": "the s break function takes the increment",
    "start": "225120",
    "end": "228000"
  },
  {
    "text": "value to tell the kernel how many bytes",
    "start": "228000",
    "end": "230720"
  },
  {
    "text": "to increment the system break by",
    "start": "230720",
    "end": "232959"
  },
  {
    "text": "by saying s break 0 we actually don't",
    "start": "232959",
    "end": "235200"
  },
  {
    "text": "increment the program break at all we",
    "start": "235200",
    "end": "237680"
  },
  {
    "text": "just say you know give me the program",
    "start": "237680",
    "end": "239680"
  },
  {
    "text": "break and we print it out here then we",
    "start": "239680",
    "end": "242080"
  },
  {
    "text": "can increment the program break by a",
    "start": "242080",
    "end": "243920"
  },
  {
    "text": "certain value in this case we do 40 96",
    "start": "243920",
    "end": "246400"
  },
  {
    "text": "bytes we print it out",
    "start": "246400",
    "end": "248400"
  },
  {
    "text": "and then just to prove that we can",
    "start": "248400",
    "end": "249680"
  },
  {
    "text": "actually now use that newly allocated",
    "start": "249680",
    "end": "251680"
  },
  {
    "text": "space um we yeah uh so first it was this",
    "start": "251680",
    "end": "255519"
  },
  {
    "text": "value now it's this value we turn the",
    "start": "255519",
    "end": "257840"
  },
  {
    "text": "difference between these two values so",
    "start": "257840",
    "end": "259519"
  },
  {
    "text": "first n which is now this many bytes",
    "start": "259519",
    "end": "261280"
  },
  {
    "text": "longer into an array put some data there",
    "start": "261280",
    "end": "263840"
  },
  {
    "text": "and we print it out right so i'll show",
    "start": "263840",
    "end": "265919"
  },
  {
    "text": "you guys that",
    "start": "265919",
    "end": "268400"
  },
  {
    "text": "there you go so first we had the system",
    "start": "268400",
    "end": "270000"
  },
  {
    "text": "break that was set here and then the",
    "start": "270000",
    "end": "271840"
  },
  {
    "text": "system break got moved up to this value",
    "start": "271840",
    "end": "274320"
  },
  {
    "text": "you know it went from 6000 to 7000 in",
    "start": "274320",
    "end": "276639"
  },
  {
    "text": "hex and we're able to use that space to",
    "start": "276639",
    "end": "278960"
  },
  {
    "text": "put these two three and four values",
    "start": "278960",
    "end": "281120"
  },
  {
    "text": "there so the tradeoffs here are this is",
    "start": "281120",
    "end": "283280"
  },
  {
    "text": "actually the most performant allocator",
    "start": "283280",
    "end": "286320"
  },
  {
    "text": "that you have access to in user space",
    "start": "286320",
    "end": "288160"
  },
  {
    "text": "right it's way more performant than the",
    "start": "288160",
    "end": "290560"
  },
  {
    "text": "gwc allocator but it's not and it's it",
    "start": "290560",
    "end": "293199"
  },
  {
    "text": "is more performant rather than the map",
    "start": "293199",
    "end": "295919"
  },
  {
    "text": "function i'll talk to you about next the",
    "start": "295919",
    "end": "297680"
  },
  {
    "text": "problem is you don't have a lot of",
    "start": "297680",
    "end": "298800"
  },
  {
    "text": "granularity here basically all you can",
    "start": "298800",
    "end": "300800"
  },
  {
    "text": "do is slide that system break up a",
    "start": "300800",
    "end": "303600"
  },
  {
    "text": "number of bytes and then you have to",
    "start": "303600",
    "end": "305440"
  },
  {
    "text": "actually internally manage what memory",
    "start": "305440",
    "end": "307759"
  },
  {
    "text": "you use right so trade-offs and then",
    "start": "307759",
    "end": "310080"
  },
  {
    "start": "309000",
    "end": "542000"
  },
  {
    "text": "finally we have the mmap system call the",
    "start": "310080",
    "end": "312560"
  },
  {
    "text": "mmap system call literally says hey",
    "start": "312560",
    "end": "314400"
  },
  {
    "text": "there colonel literally give me any",
    "start": "314400",
    "end": "317039"
  },
  {
    "text": "memory you have access to it will appear",
    "start": "317039",
    "end": "319360"
  },
  {
    "text": "wherever the kernel decides to put it",
    "start": "319360",
    "end": "321199"
  },
  {
    "text": "and that's why i kind of put the square",
    "start": "321199",
    "end": "322560"
  },
  {
    "text": "in the middle here you know it doesn't",
    "start": "322560",
    "end": "324880"
  },
  {
    "text": "have to appear anywhere it can appear",
    "start": "324880",
    "end": "326240"
  },
  {
    "text": "wherever you you know the kernel decides",
    "start": "326240",
    "end": "327680"
  },
  {
    "text": "to give it to you you can make",
    "start": "327680",
    "end": "329039"
  },
  {
    "text": "suggestions as to where you want to see",
    "start": "329039",
    "end": "330560"
  },
  {
    "text": "it but you're not guaranteed to get it",
    "start": "330560",
    "end": "331840"
  },
  {
    "text": "back there so we'll go back and i'll",
    "start": "331840",
    "end": "333520"
  },
  {
    "text": "walk through a map example real quick",
    "start": "333520",
    "end": "337039"
  },
  {
    "text": "so here i use the function map a couple",
    "start": "337039",
    "end": "340479"
  },
  {
    "text": "parameters here this null parameter",
    "start": "340479",
    "end": "342880"
  },
  {
    "text": "means that i don't care where it comes",
    "start": "342880",
    "end": "344639"
  },
  {
    "text": "from just give me some number of bytes i",
    "start": "344639",
    "end": "347039"
  },
  {
    "text": "want this many bytes i want them to come",
    "start": "347039",
    "end": "349280"
  },
  {
    "text": "back as read write protected so",
    "start": "349280",
    "end": "352080"
  },
  {
    "text": "previously i wasn't able to control the",
    "start": "352080",
    "end": "354320"
  },
  {
    "text": "permissions of the memory that i got",
    "start": "354320",
    "end": "356400"
  },
  {
    "text": "back but i can make this you know read",
    "start": "356400",
    "end": "358720"
  },
  {
    "text": "only memory i can make this executable",
    "start": "358720",
    "end": "360319"
  },
  {
    "text": "memory to put code into i could do a",
    "start": "360319",
    "end": "361759"
  },
  {
    "text": "whole bunch of cool stuff",
    "start": "361759",
    "end": "363600"
  },
  {
    "text": "here i do a copy on write protection and",
    "start": "363600",
    "end": "365440"
  },
  {
    "text": "i make it anonymous which means that it",
    "start": "365440",
    "end": "367039"
  },
  {
    "text": "comes back only to my process and it's",
    "start": "367039",
    "end": "369039"
  },
  {
    "text": "not mapped into a different file",
    "start": "369039",
    "end": "371280"
  },
  {
    "text": "this is the file descriptor that i could",
    "start": "371280",
    "end": "373039"
  },
  {
    "text": "map a file to to show up in memory as",
    "start": "373039",
    "end": "375039"
  },
  {
    "text": "opposed to just raw empty memory",
    "start": "375039",
    "end": "377520"
  },
  {
    "text": "and then this is some other flag that",
    "start": "377520",
    "end": "378800"
  },
  {
    "text": "we're not going to worry about so if i",
    "start": "378800",
    "end": "380800"
  },
  {
    "text": "don't get memory back this will come",
    "start": "380800",
    "end": "382319"
  },
  {
    "text": "back as null and i'll say hey man i had",
    "start": "382319",
    "end": "384400"
  },
  {
    "text": "an error with a map i'm not really sure",
    "start": "384400",
    "end": "386400"
  },
  {
    "text": "what to do about it",
    "start": "386400",
    "end": "387919"
  },
  {
    "text": "and then we'll print the memory here",
    "start": "387919",
    "end": "389680"
  },
  {
    "text": "with percent p um so once i've gotten",
    "start": "389680",
    "end": "392560"
  },
  {
    "text": "the new memory to come back i can then",
    "start": "392560",
    "end": "394560"
  },
  {
    "text": "again use it as an array and go from",
    "start": "394560",
    "end": "397039"
  },
  {
    "text": "there right so i print the data onto the",
    "start": "397039",
    "end": "398720"
  },
  {
    "text": "screen and we're all happy hunky dory so",
    "start": "398720",
    "end": "401199"
  },
  {
    "text": "we'll go back and i'll show you guys how",
    "start": "401199",
    "end": "403520"
  },
  {
    "text": "nmap works",
    "start": "403520",
    "end": "406080"
  },
  {
    "text": "boom so basically we ran the mmap",
    "start": "406080",
    "end": "408560"
  },
  {
    "text": "function and i got back memory from the",
    "start": "408560",
    "end": "410560"
  },
  {
    "text": "kernel at this address you know two",
    "start": "410560",
    "end": "413599"
  },
  {
    "text": "three and four are the addresses that i",
    "start": "413599",
    "end": "415599"
  },
  {
    "text": "put into that new chunk of memory um",
    "start": "415599",
    "end": "418479"
  },
  {
    "text": "yeah so i mean this is a pretty good",
    "start": "418479",
    "end": "420639"
  },
  {
    "text": "allocator as well same kind of thing",
    "start": "420639",
    "end": "422720"
  },
  {
    "text": "it's a little more complicated to",
    "start": "422720",
    "end": "423919"
  },
  {
    "text": "implement than the glib c heap allocator",
    "start": "423919",
    "end": "426479"
  },
  {
    "text": "but at the same time",
    "start": "426479",
    "end": "428319"
  },
  {
    "text": "you have more granularity in the kind of",
    "start": "428319",
    "end": "430479"
  },
  {
    "text": "memory you get back the g-lib c",
    "start": "430479",
    "end": "432479"
  },
  {
    "text": "allocator you can only get readable",
    "start": "432479",
    "end": "434479"
  },
  {
    "text": "writable memory and then you have to",
    "start": "434479",
    "end": "436080"
  },
  {
    "text": "manually m protect that memory to get it",
    "start": "436080",
    "end": "438080"
  },
  {
    "text": "to be executable if you want in that or",
    "start": "438080",
    "end": "439919"
  },
  {
    "text": "like unprotect it from being writable",
    "start": "439919",
    "end": "442000"
  },
  {
    "text": "whereas this case every time you make a",
    "start": "442000",
    "end": "443759"
  },
  {
    "text": "call you can tell it exactly what kind",
    "start": "443759",
    "end": "445599"
  },
  {
    "text": "of memory you get back",
    "start": "445599",
    "end": "447199"
  },
  {
    "text": "this is a little less performant than s",
    "start": "447199",
    "end": "449280"
  },
  {
    "text": "break but significantly more performant",
    "start": "449280",
    "end": "451039"
  },
  {
    "text": "than the glibc malik",
    "start": "451039",
    "end": "452720"
  },
  {
    "text": "allocator the difference being that the",
    "start": "452720",
    "end": "454479"
  },
  {
    "text": "allocator is",
    "start": "454479",
    "end": "455840"
  },
  {
    "text": "much friendlier to use than all of these",
    "start": "455840",
    "end": "457759"
  },
  {
    "text": "command line arguments obviously just",
    "start": "457759",
    "end": "459759"
  },
  {
    "text": "like when you have to free memory from",
    "start": "459759",
    "end": "462000"
  },
  {
    "text": "the",
    "start": "462000",
    "end": "463280"
  },
  {
    "text": "glibc allocator",
    "start": "463280",
    "end": "464879"
  },
  {
    "text": "m on map you have to",
    "start": "464879",
    "end": "467680"
  },
  {
    "text": "unmap the memory from the kernel as well",
    "start": "467680",
    "end": "470400"
  },
  {
    "text": "before you leave the program well do you",
    "start": "470400",
    "end": "471919"
  },
  {
    "text": "see that real quick oh and the length we",
    "start": "471919",
    "end": "473520"
  },
  {
    "text": "have to specify the length to this",
    "start": "473520",
    "end": "474800"
  },
  {
    "text": "function as well",
    "start": "474800",
    "end": "478198"
  },
  {
    "text": "cool so then at the end we just clean",
    "start": "481039",
    "end": "482319"
  },
  {
    "text": "ourselves up by making sure that the",
    "start": "482319",
    "end": "483440"
  },
  {
    "text": "memory was given back to the kernel uh",
    "start": "483440",
    "end": "486160"
  },
  {
    "text": "in a proper way so yeah i mean that is",
    "start": "486160",
    "end": "489280"
  },
  {
    "text": "basically the three major ways that you",
    "start": "489280",
    "end": "491520"
  },
  {
    "text": "can get more memory into your process",
    "start": "491520",
    "end": "494560"
  },
  {
    "text": "while you're doing things dynamically i",
    "start": "494560",
    "end": "495919"
  },
  {
    "text": "would suggest always use the glibc",
    "start": "495919",
    "end": "498000"
  },
  {
    "text": "allocator i just think it's fun to have",
    "start": "498000",
    "end": "500240"
  },
  {
    "text": "access to",
    "start": "500240",
    "end": "501440"
  },
  {
    "text": "the",
    "start": "501440",
    "end": "502400"
  },
  {
    "text": "map functionality where you can kind of",
    "start": "502400",
    "end": "504000"
  },
  {
    "text": "ask for",
    "start": "504000",
    "end": "505039"
  },
  {
    "text": "bigger chunks you know and you know have",
    "start": "505039",
    "end": "507199"
  },
  {
    "text": "more granularity on their properties and",
    "start": "507199",
    "end": "509520"
  },
  {
    "text": "then also just you know a little more",
    "start": "509520",
    "end": "510960"
  },
  {
    "text": "for fun too if you want really quick",
    "start": "510960",
    "end": "512880"
  },
  {
    "text": "need it right now don't care about the",
    "start": "512880",
    "end": "514399"
  },
  {
    "text": "allocator access to memory um using the",
    "start": "514399",
    "end": "516959"
  },
  {
    "text": "s-break functionality or the brake",
    "start": "516959",
    "end": "518880"
  },
  {
    "text": "functionality that the kernel offers you",
    "start": "518880",
    "end": "521039"
  },
  {
    "text": "is pretty powerful as well so guys i",
    "start": "521039",
    "end": "522640"
  },
  {
    "text": "appreciate it",
    "start": "522640",
    "end": "523760"
  },
  {
    "text": "if you enjoyed this video or you learned",
    "start": "523760",
    "end": "525200"
  },
  {
    "text": "something do me a favor hit like hit",
    "start": "525200",
    "end": "527120"
  },
  {
    "text": "subscribe and i'll see you guys in the",
    "start": "527120",
    "end": "528560"
  },
  {
    "text": "next video take care",
    "start": "528560",
    "end": "532360"
  },
  {
    "text": "[Music]",
    "start": "532760",
    "end": "541289"
  }
]