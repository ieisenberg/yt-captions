[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "if you're watching this video on any",
    "start": "0",
    "end": "1599"
  },
  {
    "text": "device made in the last 10 years be it a",
    "start": "1599",
    "end": "3840"
  },
  {
    "text": "desktop a laptop or a tablet or a phone",
    "start": "3840",
    "end": "6319"
  },
  {
    "text": "then there's an extremely high chance",
    "start": "6319",
    "end": "8080"
  },
  {
    "text": "that your device is powered by a",
    "start": "8080",
    "end": "9519"
  },
  {
    "text": "multi-core processor since the release",
    "start": "9519",
    "end": "11679"
  },
  {
    "text": "of the first dual core processor in 2005",
    "start": "11679",
    "end": "13920"
  },
  {
    "text": "by ibm it has become more and more",
    "start": "13920",
    "end": "16160"
  },
  {
    "text": "common for computer processors of all",
    "start": "16160",
    "end": "17840"
  },
  {
    "text": "varieties to be multi-core this is in",
    "start": "17840",
    "end": "20160"
  },
  {
    "text": "direct contrast to laptops in the 2000s",
    "start": "20160",
    "end": "22560"
  },
  {
    "text": "like my early ibook g4 for example which",
    "start": "22560",
    "end": "25199"
  },
  {
    "text": "was powered by a single core power pc",
    "start": "25199",
    "end": "27599"
  },
  {
    "text": "processor clocked at around 800",
    "start": "27599",
    "end": "29119"
  },
  {
    "text": "megahertz nowadays it is extremely",
    "start": "29119",
    "end": "31519"
  },
  {
    "text": "common for any desktop to having at",
    "start": "31519",
    "end": "33360"
  },
  {
    "text": "least four cores and clocked into the",
    "start": "33360",
    "end": "35280"
  },
  {
    "text": "low four to five gigahertz",
    "start": "35280",
    "end": "37600"
  },
  {
    "start": "37000",
    "end": "53000"
  },
  {
    "text": "but what does it mean for a processor to",
    "start": "37600",
    "end": "39440"
  },
  {
    "text": "have multiple cores how does a processor",
    "start": "39440",
    "end": "41680"
  },
  {
    "text": "with multiple cores work and why are",
    "start": "41680",
    "end": "44079"
  },
  {
    "text": "many cores better than just one how many",
    "start": "44079",
    "end": "46800"
  },
  {
    "text": "cores are too many these are all really",
    "start": "46800",
    "end": "49360"
  },
  {
    "text": "important questions and like you i was",
    "start": "49360",
    "end": "51199"
  },
  {
    "text": "curious to find the answer",
    "start": "51199",
    "end": "53199"
  },
  {
    "start": "53000",
    "end": "137000"
  },
  {
    "text": "to be able to answer these questions",
    "start": "53199",
    "end": "54640"
  },
  {
    "text": "though we first needed to find what a",
    "start": "54640",
    "end": "56239"
  },
  {
    "text": "cpu core is at a very basic level all",
    "start": "56239",
    "end": "59359"
  },
  {
    "text": "the computers processor really does is",
    "start": "59359",
    "end": "61039"
  },
  {
    "text": "run code to run code the cpu will need a",
    "start": "61039",
    "end": "63840"
  },
  {
    "text": "few basic things like fast internal",
    "start": "63840",
    "end": "65920"
  },
  {
    "text": "memory in the form of registers",
    "start": "65920",
    "end": "67760"
  },
  {
    "text": "temporary storage better known as cached",
    "start": "67760",
    "end": "69840"
  },
  {
    "text": "act as a buffer between the internal",
    "start": "69840",
    "end": "71360"
  },
  {
    "text": "memory and ram and then some additional",
    "start": "71360",
    "end": "73600"
  },
  {
    "text": "hardware to interface between the cpu",
    "start": "73600",
    "end": "75759"
  },
  {
    "text": "and the motherboard",
    "start": "75759",
    "end": "77200"
  },
  {
    "text": "obviously the cpu will also need an",
    "start": "77200",
    "end": "79119"
  },
  {
    "text": "execution engine that is capable of",
    "start": "79119",
    "end": "80640"
  },
  {
    "text": "receiving instructions and doing",
    "start": "80640",
    "end": "82080"
  },
  {
    "text": "something with them",
    "start": "82080",
    "end": "84000"
  },
  {
    "text": "to do this the cpu will run an extremely",
    "start": "84000",
    "end": "86720"
  },
  {
    "text": "fast efficient loop where it reaches",
    "start": "86720",
    "end": "89520"
  },
  {
    "text": "into memory and runs the code that it",
    "start": "89520",
    "end": "91520"
  },
  {
    "text": "finds the process to do this is as",
    "start": "91520",
    "end": "93680"
  },
  {
    "text": "follows first the processor will fetch",
    "start": "93680",
    "end": "95520"
  },
  {
    "text": "an instruction which is the task it must",
    "start": "95520",
    "end": "98079"
  },
  {
    "text": "execute from memory then it will decode",
    "start": "98079",
    "end": "100720"
  },
  {
    "text": "that task from memory and convert it",
    "start": "100720",
    "end": "103360"
  },
  {
    "text": "into its own internal micro instructions",
    "start": "103360",
    "end": "105600"
  },
  {
    "text": "and logic and then execute that task",
    "start": "105600",
    "end": "107920"
  },
  {
    "text": "which may be the form of arithmetic or",
    "start": "107920",
    "end": "109840"
  },
  {
    "text": "memory operation or something else like",
    "start": "109840",
    "end": "111280"
  },
  {
    "text": "that once that execution is complete it",
    "start": "111280",
    "end": "113600"
  },
  {
    "text": "will then store the result of that",
    "start": "113600",
    "end": "115200"
  },
  {
    "text": "operation into the destination described",
    "start": "115200",
    "end": "117759"
  },
  {
    "text": "in the instruction which that may be a",
    "start": "117759",
    "end": "119360"
  },
  {
    "text": "memory location or a destination",
    "start": "119360",
    "end": "120960"
  },
  {
    "text": "register for example",
    "start": "120960",
    "end": "122399"
  },
  {
    "text": "the piece of hardware inside the",
    "start": "122399",
    "end": "123920"
  },
  {
    "text": "processor responsible for this is",
    "start": "123920",
    "end": "125600"
  },
  {
    "text": "referred to as a core so in layman's",
    "start": "125600",
    "end": "128399"
  },
  {
    "text": "terms one cpu core is able to perform",
    "start": "128399",
    "end": "131280"
  },
  {
    "text": "what is referred to as one thread of",
    "start": "131280",
    "end": "133360"
  },
  {
    "text": "execution or in simpler terms one",
    "start": "133360",
    "end": "136480"
  },
  {
    "text": "program",
    "start": "136480",
    "end": "137840"
  },
  {
    "start": "137000",
    "end": "168000"
  },
  {
    "text": "now if that's the case how is it that a",
    "start": "137840",
    "end": "140080"
  },
  {
    "text": "processor with only one core so basic",
    "start": "140080",
    "end": "142640"
  },
  {
    "text": "early processors back in the 2000s were",
    "start": "142640",
    "end": "144959"
  },
  {
    "text": "ever able to run multiple programs at",
    "start": "144959",
    "end": "147280"
  },
  {
    "text": "the same time well the simple truth of",
    "start": "147280",
    "end": "149440"
  },
  {
    "text": "it all is that they never were instead",
    "start": "149440",
    "end": "151920"
  },
  {
    "text": "before processors had multiple cores a",
    "start": "151920",
    "end": "154080"
  },
  {
    "text": "cpu would simply jump between tasks at",
    "start": "154080",
    "end": "156400"
  },
  {
    "text": "an extremely high speed such that a user",
    "start": "156400",
    "end": "159440"
  },
  {
    "text": "would never realize that only one task",
    "start": "159440",
    "end": "161200"
  },
  {
    "text": "was ever occurring but now with cpus",
    "start": "161200",
    "end": "164000"
  },
  {
    "text": "that have multiple cores and are capable",
    "start": "164000",
    "end": "165519"
  },
  {
    "text": "of multiple threads of execution things",
    "start": "165519",
    "end": "167519"
  },
  {
    "text": "get more interesting so we're going to",
    "start": "167519",
    "end": "169440"
  },
  {
    "start": "168000",
    "end": "274000"
  },
  {
    "text": "talk about an arm cortex m0 processor",
    "start": "169440",
    "end": "172080"
  },
  {
    "text": "for example which is a multi-core risk",
    "start": "172080",
    "end": "174640"
  },
  {
    "text": "processor",
    "start": "174640",
    "end": "175760"
  },
  {
    "text": "when a multi-core processor boots at the",
    "start": "175760",
    "end": "177760"
  },
  {
    "text": "very beginning only one core is active",
    "start": "177760",
    "end": "180239"
  },
  {
    "text": "for example in the arm cortex m0",
    "start": "180239",
    "end": "182239"
  },
  {
    "text": "processor on the boot the primary core",
    "start": "182239",
    "end": "184800"
  },
  {
    "text": "so the first core is reset",
    "start": "184800",
    "end": "187200"
  },
  {
    "text": "and begins execution at address zero the",
    "start": "187200",
    "end": "189599"
  },
  {
    "text": "reset vector which points to the area",
    "start": "189599",
    "end": "191440"
  },
  {
    "text": "where the boot loader would eventually",
    "start": "191440",
    "end": "192879"
  },
  {
    "text": "begin executing program memory once in",
    "start": "192879",
    "end": "195920"
  },
  {
    "text": "program memory software there then",
    "start": "195920",
    "end": "198159"
  },
  {
    "text": "activates the extra cores which all",
    "start": "198159",
    "end": "200159"
  },
  {
    "text": "began executing code at the address",
    "start": "200159",
    "end": "202319"
  },
  {
    "text": "specified in their separate reset",
    "start": "202319",
    "end": "204159"
  },
  {
    "text": "vectors which may live at different",
    "start": "204159",
    "end": "205519"
  },
  {
    "text": "addresses eventually the operating",
    "start": "205519",
    "end": "207120"
  },
  {
    "text": "system boots up with all cores running",
    "start": "207120",
    "end": "209280"
  },
  {
    "text": "maybe in an idle state until there's",
    "start": "209280",
    "end": "210720"
  },
  {
    "text": "more work to do at that point it is the",
    "start": "210720",
    "end": "212640"
  },
  {
    "text": "job of the scheduler within the",
    "start": "212640",
    "end": "214400"
  },
  {
    "text": "operating system's kernel to make sure",
    "start": "214400",
    "end": "216080"
  },
  {
    "text": "that all the cores are being used",
    "start": "216080",
    "end": "217519"
  },
  {
    "text": "efficiently and everyone's happy and",
    "start": "217519",
    "end": "219360"
  },
  {
    "text": "this is not an easy task to perform at",
    "start": "219360",
    "end": "221200"
  },
  {
    "text": "any given time there are cores that are",
    "start": "221200",
    "end": "222959"
  },
  {
    "text": "hungry to execute code and a user who",
    "start": "222959",
    "end": "225040"
  },
  {
    "text": "wants this computer to do work but the",
    "start": "225040",
    "end": "226720"
  },
  {
    "text": "question is which processor gets to run",
    "start": "226720",
    "end": "229120"
  },
  {
    "text": "which pieces of code and for how long",
    "start": "229120",
    "end": "232720"
  },
  {
    "text": "so code executing on a processor",
    "start": "232720",
    "end": "235040"
  },
  {
    "text": "actually creates some effects that one",
    "start": "235040",
    "end": "237120"
  },
  {
    "text": "must consider when designing a scheduler",
    "start": "237120",
    "end": "239280"
  },
  {
    "text": "around them the first effect is called",
    "start": "239280",
    "end": "241439"
  },
  {
    "text": "processor affinity which means that the",
    "start": "241439",
    "end": "243599"
  },
  {
    "text": "code prefers and is more efficient to be",
    "start": "243599",
    "end": "246000"
  },
  {
    "text": "ran on the core that it started running",
    "start": "246000",
    "end": "248159"
  },
  {
    "text": "on this happens for a few reasons",
    "start": "248159",
    "end": "250000"
  },
  {
    "text": "primarily due to the way that cpu cache",
    "start": "250000",
    "end": "252159"
  },
  {
    "text": "works where cache is filled with data",
    "start": "252159",
    "end": "254560"
  },
  {
    "text": "related to the code being ran on the",
    "start": "254560",
    "end": "256639"
  },
  {
    "text": "core leaving a piece of code running on",
    "start": "256639",
    "end": "258639"
  },
  {
    "text": "a core comes at a cost though for",
    "start": "258639",
    "end": "260560"
  },
  {
    "text": "example if the code is blocking the",
    "start": "260560",
    "end": "262160"
  },
  {
    "text": "processor on an input event or waiting",
    "start": "262160",
    "end": "264080"
  },
  {
    "text": "for an interrupt it may be advantageous",
    "start": "264080",
    "end": "266240"
  },
  {
    "text": "to forgo the cost of violating affinity",
    "start": "266240",
    "end": "268800"
  },
  {
    "text": "to make sure the core is being",
    "start": "268800",
    "end": "269919"
  },
  {
    "text": "effectively used and not blocking",
    "start": "269919",
    "end": "273600"
  },
  {
    "text": "so as a result there are two approaches",
    "start": "274639",
    "end": "276800"
  },
  {
    "text": "to multi-core scheduling",
    "start": "276800",
    "end": "278560"
  },
  {
    "text": "the first is referred to asymmetric",
    "start": "278560",
    "end": "280639"
  },
  {
    "text": "multiprocessing the idea of asymmetric",
    "start": "280639",
    "end": "283120"
  },
  {
    "text": "multiprocessing is that one core is the",
    "start": "283120",
    "end": "285360"
  },
  {
    "text": "boss of the other cores as a simple",
    "start": "285360",
    "end": "287440"
  },
  {
    "text": "example in an asymmetric scheme on a",
    "start": "287440",
    "end": "289759"
  },
  {
    "text": "four core processor core one runs the",
    "start": "289759",
    "end": "292160"
  },
  {
    "text": "kernel code and hence the scheduler and",
    "start": "292160",
    "end": "294240"
  },
  {
    "text": "then cores two three and four take",
    "start": "294240",
    "end": "296240"
  },
  {
    "text": "orders from the scheduler and only ever",
    "start": "296240",
    "end": "298479"
  },
  {
    "text": "run user space code as directed by the",
    "start": "298479",
    "end": "300720"
  },
  {
    "text": "kernel",
    "start": "300720",
    "end": "301680"
  },
  {
    "text": "this is the direct opposite for example",
    "start": "301680",
    "end": "303840"
  },
  {
    "text": "of symmetric multiprocessing our second",
    "start": "303840",
    "end": "306160"
  },
  {
    "text": "schema where every processor is just a",
    "start": "306160",
    "end": "308560"
  },
  {
    "text": "worker that is free to execute code as",
    "start": "308560",
    "end": "310880"
  },
  {
    "text": "needed and the work is derived from some",
    "start": "310880",
    "end": "313120"
  },
  {
    "text": "global work queue where tasks are pushed",
    "start": "313120",
    "end": "315600"
  },
  {
    "text": "and popped as requirements for execution",
    "start": "315600",
    "end": "317759"
  },
  {
    "text": "to rise generally speaking asymmetric",
    "start": "317759",
    "end": "320080"
  },
  {
    "text": "multi-processing is easier to implement",
    "start": "320080",
    "end": "322320"
  },
  {
    "text": "but less efficient and the opposite is",
    "start": "322320",
    "end": "324400"
  },
  {
    "text": "true for symmetric multi-processing so",
    "start": "324400",
    "end": "327039"
  },
  {
    "text": "now that we understand how multi-core",
    "start": "327039",
    "end": "328479"
  },
  {
    "text": "processors work and generally how",
    "start": "328479",
    "end": "329840"
  },
  {
    "text": "they're scheduled the question is why",
    "start": "329840",
    "end": "331280"
  },
  {
    "text": "not more why can processors not just be",
    "start": "331280",
    "end": "333440"
  },
  {
    "text": "built to have 16 32 128 cores well in",
    "start": "333440",
    "end": "338560"
  },
  {
    "start": "337000",
    "end": "440000"
  },
  {
    "text": "full transparency some processors these",
    "start": "338560",
    "end": "340240"
  },
  {
    "text": "days actually do have double digit",
    "start": "340240",
    "end": "342400"
  },
  {
    "text": "numbers of cores but this core density",
    "start": "342400",
    "end": "344880"
  },
  {
    "text": "is a result of some insane material and",
    "start": "344880",
    "end": "347600"
  },
  {
    "text": "semiconductor engineering that had to",
    "start": "347600",
    "end": "349840"
  },
  {
    "text": "consider first some difficult",
    "start": "349840",
    "end": "351199"
  },
  {
    "text": "constraints",
    "start": "351199",
    "end": "352479"
  },
  {
    "text": "the first one is that of thermal",
    "start": "352479",
    "end": "354160"
  },
  {
    "text": "efficiency as you begin to pack more",
    "start": "354160",
    "end": "356160"
  },
  {
    "text": "silicon into a tighter space making it",
    "start": "356160",
    "end": "357840"
  },
  {
    "text": "more thermally dense the efficiency and",
    "start": "357840",
    "end": "360400"
  },
  {
    "text": "performance of those cores go down",
    "start": "360400",
    "end": "362400"
  },
  {
    "text": "ultimately at a cost to the performance",
    "start": "362400",
    "end": "364720"
  },
  {
    "text": "that outweighs that gain from adding a",
    "start": "364720",
    "end": "366720"
  },
  {
    "text": "core",
    "start": "366720",
    "end": "367520"
  },
  {
    "text": "the second is memory bottlenecks",
    "start": "367520",
    "end": "369680"
  },
  {
    "text": "while the memory internal to a processor",
    "start": "369680",
    "end": "371600"
  },
  {
    "text": "is extremely fast via the cache or the",
    "start": "371600",
    "end": "373680"
  },
  {
    "text": "registers themselves it is ultimately",
    "start": "373680",
    "end": "375840"
  },
  {
    "text": "bogged down by its ability to write back",
    "start": "375840",
    "end": "377919"
  },
  {
    "text": "memory to ram which is limited by the",
    "start": "377919",
    "end": "380000"
  },
  {
    "text": "speed of the ram bus and its size of its",
    "start": "380000",
    "end": "382160"
  },
  {
    "text": "access bus at a certain number of cores",
    "start": "382160",
    "end": "384639"
  },
  {
    "text": "there's so much blocking on memory",
    "start": "384639",
    "end": "386319"
  },
  {
    "text": "accesses that eventually no one can get",
    "start": "386319",
    "end": "388160"
  },
  {
    "text": "any work done and ultimately the",
    "start": "388160",
    "end": "389680"
  },
  {
    "text": "addition of cores is not worth the cost",
    "start": "389680",
    "end": "392240"
  },
  {
    "text": "and then finally some code just doesn't",
    "start": "392240",
    "end": "394800"
  },
  {
    "text": "parallelize well",
    "start": "394800",
    "end": "396400"
  },
  {
    "text": "ultimately it is actually on the",
    "start": "396400",
    "end": "397840"
  },
  {
    "text": "programmer to make use of all threads of",
    "start": "397840",
    "end": "400080"
  },
  {
    "text": "execution available on the processor and",
    "start": "400080",
    "end": "402080"
  },
  {
    "text": "to write code in a way that it scales up",
    "start": "402080",
    "end": "404240"
  },
  {
    "text": "linearly with the number of cores",
    "start": "404240",
    "end": "405759"
  },
  {
    "text": "available if you've ever played a game",
    "start": "405759",
    "end": "408080"
  },
  {
    "text": "that hogs up your cpu despite you having",
    "start": "408080",
    "end": "410560"
  },
  {
    "text": "the latest intel i69 420xxgy processor",
    "start": "410560",
    "end": "414319"
  },
  {
    "text": "it is likely not because intel designed",
    "start": "414319",
    "end": "416240"
  },
  {
    "text": "a bad cpu but rather that the code that",
    "start": "416240",
    "end": "419280"
  },
  {
    "text": "you're playing isn't designed in a way",
    "start": "419280",
    "end": "421360"
  },
  {
    "text": "that it cares about how cool your",
    "start": "421360",
    "end": "422800"
  },
  {
    "text": "processor is so could intel produce a",
    "start": "422800",
    "end": "425360"
  },
  {
    "text": "processor with a thousand cores it would",
    "start": "425360",
    "end": "427039"
  },
  {
    "text": "be huge and ugly but probably yes",
    "start": "427039",
    "end": "430000"
  },
  {
    "text": "would all the cores operate well and",
    "start": "430000",
    "end": "431680"
  },
  {
    "text": "would any code out there take full",
    "start": "431680",
    "end": "433120"
  },
  {
    "text": "advantage of the potential processing",
    "start": "433120",
    "end": "434400"
  },
  {
    "text": "power probably not",
    "start": "434400",
    "end": "437840"
  },
  {
    "start": "440000",
    "end": "487000"
  },
  {
    "text": "so what's the point",
    "start": "440160",
    "end": "441759"
  },
  {
    "text": "right now cpus are extremely powerful",
    "start": "441759",
    "end": "443759"
  },
  {
    "text": "and are able to do things computer",
    "start": "443759",
    "end": "445280"
  },
  {
    "text": "engineers 50 years ago never would have",
    "start": "445280",
    "end": "447440"
  },
  {
    "text": "thought possible",
    "start": "447440",
    "end": "448720"
  },
  {
    "text": "and according to moore's law which",
    "start": "448720",
    "end": "450720"
  },
  {
    "text": "dictates that the number of transistors",
    "start": "450720",
    "end": "452560"
  },
  {
    "text": "packed into a chip doubles every two",
    "start": "452560",
    "end": "454639"
  },
  {
    "text": "years the same may be true again 50",
    "start": "454639",
    "end": "457440"
  },
  {
    "text": "years from today",
    "start": "457440",
    "end": "459120"
  },
  {
    "text": "if you guys enjoyed this video or you",
    "start": "459120",
    "end": "460560"
  },
  {
    "text": "learned something please do me a favor",
    "start": "460560",
    "end": "462240"
  },
  {
    "text": "leave a comment about what you want to",
    "start": "462240",
    "end": "463520"
  },
  {
    "text": "see next time hit like and i'll see you",
    "start": "463520",
    "end": "465759"
  },
  {
    "text": "guys in the next video take care",
    "start": "465759",
    "end": "469130"
  },
  {
    "text": "[Music]",
    "start": "469130",
    "end": "487440"
  },
  {
    "text": "you",
    "start": "487440",
    "end": "489520"
  }
]