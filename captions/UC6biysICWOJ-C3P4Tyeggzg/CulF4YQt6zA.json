[
  {
    "text": "Malik sucks so I spent the last few",
    "start": "160",
    "end": "2440"
  },
  {
    "text": "streams on Twitch writing my own custom",
    "start": "2440",
    "end": "4680"
  },
  {
    "text": "Heap allocator in C is it faster no is",
    "start": "4680",
    "end": "8360"
  },
  {
    "text": "it more efficient ye no but it's mine I",
    "start": "8360",
    "end": "11880"
  },
  {
    "text": "learned a lot in the process and that's",
    "start": "11880",
    "end": "14320"
  },
  {
    "text": "all that matters sit down buckle up here",
    "start": "14320",
    "end": "16400"
  },
  {
    "text": "we",
    "start": "16400",
    "end": "16860"
  },
  {
    "text": "[Music]",
    "start": "16860",
    "end": "21000"
  },
  {
    "text": "go after realizing one day that the m in",
    "start": "21279",
    "end": "24160"
  },
  {
    "text": "Malo stands for Mid I decided to make my",
    "start": "24160",
    "end": "26240"
  },
  {
    "text": "own memory allocator actually I just",
    "start": "26240",
    "end": "28160"
  },
  {
    "text": "wanted to do this to figure out how the",
    "start": "28160",
    "end": "29480"
  },
  {
    "text": "Heap works but that's not nearly as",
    "start": "29480",
    "end": "30880"
  },
  {
    "text": "memeable to make a heap you need memory",
    "start": "30880",
    "end": "33480"
  },
  {
    "text": "so I had to get memory from somewhere if",
    "start": "33480",
    "end": "35960"
  },
  {
    "text": "only the kernel exposed a system call",
    "start": "35960",
    "end": "38600"
  },
  {
    "text": "where I could map in additional memory",
    "start": "38600",
    "end": "40239"
  },
  {
    "text": "to my process a function where I could",
    "start": "40239",
    "end": "42879"
  },
  {
    "text": "add a memory map they could even call it",
    "start": "42879",
    "end": "45399"
  },
  {
    "text": "memory map Jesus Christ that's Jason",
    "start": "45399",
    "end": "47879"
  },
  {
    "text": "Bourne M map is a system call where you",
    "start": "47879",
    "end": "50199"
  },
  {
    "text": "can just ask the colonel for more memory",
    "start": "50199",
    "end": "52359"
  },
  {
    "text": "and that memory is going to be where our",
    "start": "52359",
    "end": "54000"
  },
  {
    "text": "Heap goes we sprinkle in a few spicy",
    "start": "54000",
    "end": "56359"
  },
  {
    "text": "parameters call mmap and get a page",
    "start": "56359",
    "end": "58800"
  },
  {
    "text": "aligned pointer back from the kernel but",
    "start": "58800",
    "end": "61760"
  },
  {
    "text": "what do we do with this memory my Heap",
    "start": "61760",
    "end": "63840"
  },
  {
    "text": "API was simple I only exposed two",
    "start": "63840",
    "end": "66119"
  },
  {
    "text": "functions Heap Alec and Heap free seems",
    "start": "66119",
    "end": "69080"
  },
  {
    "text": "simple enough right nope Heap Alec would",
    "start": "69080",
    "end": "71200"
  },
  {
    "text": "take the number of bites the user wanted",
    "start": "71200",
    "end": "73439"
  },
  {
    "text": "to allocate and Heap free would give",
    "start": "73439",
    "end": "75600"
  },
  {
    "text": "them back to the Heap before we can use",
    "start": "75600",
    "end": "77680"
  },
  {
    "text": "Heap Alec though I needed to initialize",
    "start": "77680",
    "end": "79600"
  },
  {
    "text": "the Heap I created two structures Heap",
    "start": "79600",
    "end": "82159"
  },
  {
    "text": "metadata and chunk metadata the Heap",
    "start": "82159",
    "end": "84600"
  },
  {
    "text": "metadata contained several crucial",
    "start": "84600",
    "end": "86400"
  },
  {
    "text": "pieces of information about the Heap",
    "start": "86400",
    "end": "88360"
  },
  {
    "text": "like how much memory was available",
    "start": "88360",
    "end": "90360"
  },
  {
    "text": "next we slic the Heap up into pieces",
    "start": "90360",
    "end": "92560"
  },
  {
    "text": "called chunks a chunk is just a region",
    "start": "92560",
    "end": "95000"
  },
  {
    "text": "of memory and the associated metadata",
    "start": "95000",
    "end": "97040"
  },
  {
    "text": "about that chunk chunk metadata will",
    "start": "97040",
    "end": "98960"
  },
  {
    "text": "track how big the chunk is and if it's",
    "start": "98960",
    "end": "101119"
  },
  {
    "text": "currently in use also if it's free it'll",
    "start": "101119",
    "end": "104040"
  },
  {
    "text": "act like a node in a linked list of",
    "start": "104040",
    "end": "106119"
  },
  {
    "text": "other free chunks with the Heap",
    "start": "106119",
    "end": "108040"
  },
  {
    "text": "structures in place and the Heap init",
    "start": "108040",
    "end": "109880"
  },
  {
    "text": "function complete we can begin to write",
    "start": "109880",
    "end": "111719"
  },
  {
    "text": "the first part of the user API Heap Alec",
    "start": "111719",
    "end": "114960"
  },
  {
    "text": "when a user called Heap Alec we first",
    "start": "114960",
    "end": "117000"
  },
  {
    "text": "had to check to see if the Heap even had",
    "start": "117000",
    "end": "119240"
  },
  {
    "text": "enough memory to support the request if",
    "start": "119240",
    "end": "121360"
  },
  {
    "text": "they ask for more memory than the Heap",
    "start": "121360",
    "end": "122920"
  },
  {
    "text": "size too bad so sad get the out of",
    "start": "122920",
    "end": "126399"
  },
  {
    "text": "you next we'd give them the first",
    "start": "126399",
    "end": "127880"
  },
  {
    "text": "available chunk which is just the head",
    "start": "127880",
    "end": "130200"
  },
  {
    "text": "of the heap's list of free chunks better",
    "start": "130200",
    "end": "132560"
  },
  {
    "text": "known as the free list problem if the",
    "start": "132560",
    "end": "135280"
  },
  {
    "text": "user only asked for 32 bytes we couldn't",
    "start": "135280",
    "end": "138200"
  },
  {
    "text": "just give them the entire 4096 byte",
    "start": "138200",
    "end": "141280"
  },
  {
    "text": "region we allocated right right why I I",
    "start": "141280",
    "end": "145480"
  },
  {
    "text": "don't know I read it somewhere on stack",
    "start": "145480",
    "end": "146680"
  },
  {
    "text": "Overflow that's bad anyway to fix this",
    "start": "146680",
    "end": "149280"
  },
  {
    "text": "instead of giving them the Chunk in its",
    "start": "149280",
    "end": "151480"
  },
  {
    "text": "current state we could truncate the",
    "start": "151480",
    "end": "153800"
  },
  {
    "text": "chunk to make it smaller and shorten it",
    "start": "153800",
    "end": "156040"
  },
  {
    "text": "to the actual required length aligned to",
    "start": "156040",
    "end": "158840"
  },
  {
    "text": "16 bytes after we truncate the Chunk we",
    "start": "158840",
    "end": "161640"
  },
  {
    "text": "look ahead that many bytes for where the",
    "start": "161640",
    "end": "163879"
  },
  {
    "text": "next chunk would go construct a chunk",
    "start": "163879",
    "end": "166720"
  },
  {
    "text": "there and then make that the head of the",
    "start": "166720",
    "end": "168560"
  },
  {
    "text": "heaps free list easy peasy now we can",
    "start": "168560",
    "end": "172080"
  },
  {
    "text": "run some tests and see that when we",
    "start": "172080",
    "end": "173640"
  },
  {
    "text": "allocate pieces of memory we're getting",
    "start": "173640",
    "end": "175840"
  },
  {
    "text": "small chunks instead of big chunks but",
    "start": "175840",
    "end": "178360"
  },
  {
    "text": "how do we give them back like any any",
    "start": "178360",
    "end": "179959"
  },
  {
    "text": "good C programmer we don't no just",
    "start": "179959",
    "end": "182360"
  },
  {
    "text": "kidding I wrote the Heap free function",
    "start": "182360",
    "end": "184200"
  },
  {
    "text": "to only require a pointer to an",
    "start": "184200",
    "end": "186400"
  },
  {
    "text": "allocated chunk as input the Heap free",
    "start": "186400",
    "end": "188920"
  },
  {
    "text": "function was pretty simple all it would",
    "start": "188920",
    "end": "190680"
  },
  {
    "text": "do is Mark the chunk as no longer in use",
    "start": "190680",
    "end": "193239"
  },
  {
    "text": "and then add it to the free list and",
    "start": "193239",
    "end": "195599"
  },
  {
    "text": "this brings us to probably the biggest",
    "start": "195599",
    "end": "197560"
  },
  {
    "text": "problem in my current Heap",
    "start": "197560",
    "end": "199040"
  },
  {
    "text": "implementation fragment",
    "start": "199040",
    "end": "201959"
  },
  {
    "text": "def",
    "start": "201959",
    "end": "203560"
  },
  {
    "text": "fragmentation yeah in theory at this",
    "start": "203560",
    "end": "205799"
  },
  {
    "text": "point I could have just stopped I didn't",
    "start": "205799",
    "end": "207760"
  },
  {
    "text": "need to go any further my Heap was quote",
    "start": "207760",
    "end": "209879"
  },
  {
    "text": "unquote done was it fast kind of did it",
    "start": "209879",
    "end": "212760"
  },
  {
    "text": "work kind of but it suffered from a",
    "start": "212760",
    "end": "215319"
  },
  {
    "text": "fundamental flaw pretend for a second",
    "start": "215319",
    "end": "217560"
  },
  {
    "text": "that a user allocated exclusively 32",
    "start": "217560",
    "end": "220519"
  },
  {
    "text": "byte fragments and pretend for a second",
    "start": "220519",
    "end": "223120"
  },
  {
    "text": "that they freed them all too yeah I know",
    "start": "223120",
    "end": "225239"
  },
  {
    "text": "what a concept if they did this they",
    "start": "225239",
    "end": "227519"
  },
  {
    "text": "could in theory create a free list that",
    "start": "227519",
    "end": "229799"
  },
  {
    "text": "uses all the memory of the Heap and",
    "start": "229799",
    "end": "232439"
  },
  {
    "text": "contains exclusively 32 by chunks what",
    "start": "232439",
    "end": "236079"
  },
  {
    "text": "happens if after all of this they want",
    "start": "236079",
    "end": "237959"
  },
  {
    "text": "to allocate a 64 byte chunk they can't",
    "start": "237959",
    "end": "242040"
  },
  {
    "text": "the memory in the Heap has been",
    "start": "242040",
    "end": "243439"
  },
  {
    "text": "completely fragmented into unusable 32",
    "start": "243439",
    "end": "246799"
  },
  {
    "text": "by pieces the solution pre sizee we",
    "start": "246799",
    "end": "250079"
  },
  {
    "text": "needed to add a little spice to our free",
    "start": "250079",
    "end": "252040"
  },
  {
    "text": "function every time we freed a chunk we",
    "start": "252040",
    "end": "254280"
  },
  {
    "text": "would not only Mark the chunk as not in",
    "start": "254280",
    "end": "256400"
  },
  {
    "text": "use we would also look behind that chunk",
    "start": "256400",
    "end": "259239"
  },
  {
    "text": "to the previous chunk by adding preve",
    "start": "259239",
    "end": "262240"
  },
  {
    "text": "size to the Heap chunk metadata we could",
    "start": "262240",
    "end": "264639"
  },
  {
    "text": "look into the previous chunk and see if",
    "start": "264639",
    "end": "267040"
  },
  {
    "text": "that chunk was also free and if that",
    "start": "267040",
    "end": "269639"
  },
  {
    "text": "chunk was also free we would cool Co we",
    "start": "269639",
    "end": "273560"
  },
  {
    "text": "would coales there we go coalescing the",
    "start": "273560",
    "end": "275840"
  },
  {
    "text": "chunks turns our two adjacent free",
    "start": "275840",
    "end": "278680"
  },
  {
    "text": "chunks into one large free chunk that",
    "start": "278680",
    "end": "281680"
  },
  {
    "text": "the Heap allocator can now take control",
    "start": "281680",
    "end": "283840"
  },
  {
    "text": "of sick after running some tests I",
    "start": "283840",
    "end": "286479"
  },
  {
    "text": "confirmed that this functionality worked",
    "start": "286479",
    "end": "288560"
  },
  {
    "text": "the Heap could not be completely",
    "start": "288560",
    "end": "289919"
  },
  {
    "text": "fragmented and I was feeling good about",
    "start": "289919",
    "end": "292039"
  },
  {
    "text": "the Heap that I wrote now I made some",
    "start": "292039",
    "end": "294120"
  },
  {
    "text": "fundamental assumptions about this Heap",
    "start": "294120",
    "end": "295800"
  },
  {
    "text": "that you may disagree with I didn't",
    "start": "295800",
    "end": "297639"
  },
  {
    "text": "account for a user overriding Heap",
    "start": "297639",
    "end": "299759"
  },
  {
    "text": "metadata with malicious memory",
    "start": "299759",
    "end": "301440"
  },
  {
    "text": "operations I did not account for a user",
    "start": "301440",
    "end": "304320"
  },
  {
    "text": "freeing an arbitrary pointer and",
    "start": "304320",
    "end": "306160"
  },
  {
    "text": "potentially adding arbitrary locations",
    "start": "306160",
    "end": "308720"
  },
  {
    "text": "to my free list but I learned something",
    "start": "308720",
    "end": "311840"
  },
  {
    "text": "and I hope you did too anyway guys this",
    "start": "311840",
    "end": "313800"
  },
  {
    "text": "is my last video Until 2024 I will see",
    "start": "313800",
    "end": "316440"
  },
  {
    "text": "you next year it's been a good year uh",
    "start": "316440",
    "end": "318280"
  },
  {
    "text": "we'll see you in the next one take care",
    "start": "318280",
    "end": "320720"
  },
  {
    "text": "like And subscribe te",
    "start": "320720",
    "end": "324120"
  }
]