[
  {
    "text": "how do we write C in curl to make it",
    "start": "160",
    "end": "2639"
  },
  {
    "text": "safe and secure for billions of",
    "start": "2639",
    "end": "5040"
  },
  {
    "text": "installations a question that gets asked",
    "start": "5040",
    "end": "6960"
  },
  {
    "text": "to Daniel Stenberg who is the primary",
    "start": "6960",
    "end": "9280"
  },
  {
    "text": "contributor to curl curl is a command",
    "start": "9280",
    "end": "11679"
  },
  {
    "text": "line utility for checking the status of",
    "start": "11679",
    "end": "14000"
  },
  {
    "text": "servers for being able to make requests",
    "start": "14000",
    "end": "15599"
  },
  {
    "text": "to those servers and getting the headers",
    "start": "15599",
    "end": "16960"
  },
  {
    "text": "out of them in this article Daniel talks",
    "start": "16960",
    "end": "18640"
  },
  {
    "text": "about his principles to write extremely",
    "start": "18640",
    "end": "20800"
  },
  {
    "text": "safe C now I know safe C that is a a",
    "start": "20800",
    "end": "23800"
  },
  {
    "text": "contentious sentence disclaimer this",
    "start": "23800",
    "end": "26160"
  },
  {
    "text": "text is does in no way mean that we",
    "start": "26160",
    "end": "28240"
  },
  {
    "text": "don't occasionally merge security",
    "start": "28240",
    "end": "30000"
  },
  {
    "text": "related bugs we do we are human we make",
    "start": "30000",
    "end": "33040"
  },
  {
    "text": "mistakes then we fix them yeah this is",
    "start": "33040",
    "end": "35360"
  },
  {
    "text": "the thing about C right even if you have",
    "start": "35360",
    "end": "37600"
  },
  {
    "text": "the tightest most locked down DevOps you",
    "start": "37600",
    "end": "41120"
  },
  {
    "text": "have the most the best code practices",
    "start": "41120",
    "end": "42960"
  },
  {
    "text": "you're you're literally Linus Tovald",
    "start": "42960",
    "end": "44879"
  },
  {
    "text": "like you you will make mistakes c is",
    "start": "44879",
    "end": "46879"
  },
  {
    "text": "just a language that has these corners",
    "start": "46879",
    "end": "48559"
  },
  {
    "text": "that are kind of hard to to remember all",
    "start": "48559",
    "end": "50719"
  },
  {
    "text": "of them c is not memory safe correct so",
    "start": "50719",
    "end": "53440"
  },
  {
    "text": "if you don't know what memory safety is",
    "start": "53440",
    "end": "55039"
  },
  {
    "text": "memory safety is a guarantee that when",
    "start": "55039",
    "end": "57440"
  },
  {
    "text": "you allocate a buffer for memory the",
    "start": "57440",
    "end": "60239"
  },
  {
    "text": "language will not allow you to leave",
    "start": "60239",
    "end": "62719"
  },
  {
    "text": "that buffer now this is different than",
    "start": "62719",
    "end": "64960"
  },
  {
    "text": "like memory leaks right memory leaks are",
    "start": "64960",
    "end": "67760"
  },
  {
    "text": "if I allocate memory and then I forget",
    "start": "67760",
    "end": "70799"
  },
  {
    "text": "to free it that memory is lost in the",
    "start": "70799",
    "end": "73280"
  },
  {
    "text": "program and eventually if you allocate",
    "start": "73280",
    "end": "74799"
  },
  {
    "text": "too much memory and don't free it the",
    "start": "74799",
    "end": "76000"
  },
  {
    "text": "kernel will kill your program we got an",
    "start": "76000",
    "end": "77280"
  },
  {
    "text": "out of memory error but memory safety is",
    "start": "77280",
    "end": "79520"
  },
  {
    "text": "not a guarantee of C a language like",
    "start": "79520",
    "end": "81119"
  },
  {
    "text": "Rust for example does guarantee memory",
    "start": "81119",
    "end": "83119"
  },
  {
    "text": "safety we are certainly not immune to",
    "start": "83119",
    "end": "85759"
  },
  {
    "text": "memory related bugs mistakes or",
    "start": "85759",
    "end": "87439"
  },
  {
    "text": "vulnerabilities we had about 40% of our",
    "start": "87439",
    "end": "90080"
  },
  {
    "text": "security vulnerabilities to date have",
    "start": "90080",
    "end": "91439"
  },
  {
    "text": "been the direct result of us using C",
    "start": "91439",
    "end": "93360"
  },
  {
    "text": "instead of a memory safe",
    "start": "93360",
    "end": "95320"
  },
  {
    "text": "alternative this is a much Yeah I was",
    "start": "95320",
    "end": "97200"
  },
  {
    "text": "going to say this is a much lower number",
    "start": "97200",
    "end": "99280"
  },
  {
    "text": "than the 60 to 70% that are commonly",
    "start": "99280",
    "end": "101680"
  },
  {
    "text": "repeated originating from a few big",
    "start": "101680",
    "end": "103360"
  },
  {
    "text": "companies and projects yeah so the thing",
    "start": "103360",
    "end": "104880"
  },
  {
    "text": "I think it's either Microsoft or Google",
    "start": "104880",
    "end": "106640"
  },
  {
    "text": "said that across the board 70% of CVEes",
    "start": "106640",
    "end": "110960"
  },
  {
    "text": "are because of memory safety issues",
    "start": "110960",
    "end": "112960"
  },
  {
    "text": "basically you have a buffer you put data",
    "start": "112960",
    "end": "115360"
  },
  {
    "text": "outside of that buffer accidentally for",
    "start": "115360",
    "end": "117200"
  },
  {
    "text": "some reason and that causes a security",
    "start": "117200",
    "end": "118960"
  },
  {
    "text": "vulnerability the fact that only 40% of",
    "start": "118960",
    "end": "122079"
  },
  {
    "text": "curls security vulnerabilities are",
    "start": "122079",
    "end": "123840"
  },
  {
    "text": "because of memory issues is actually",
    "start": "123840",
    "end": "125600"
  },
  {
    "text": "very impressive that means that",
    "start": "125600",
    "end": "126719"
  },
  {
    "text": "something about their coding practice",
    "start": "126719",
    "end": "128560"
  },
  {
    "text": "does allow them to have generally safer",
    "start": "128560",
    "end": "131120"
  },
  {
    "text": "CC code than the benchmark which is",
    "start": "131120",
    "end": "132959"
  },
  {
    "text": "roughly 60 to 70% over the last 5 years",
    "start": "132959",
    "end": "134959"
  },
  {
    "text": "we've received no reports identifying a",
    "start": "134959",
    "end": "136879"
  },
  {
    "text": "critical vulnerability and only two of",
    "start": "136879",
    "end": "138879"
  },
  {
    "text": "them were rated at severity high okay",
    "start": "138879",
    "end": "141120"
  },
  {
    "text": "that's pretty good the rest 60some have",
    "start": "141120",
    "end": "143360"
  },
  {
    "text": "been at severity low or medium yeah",
    "start": "143360",
    "end": "146000"
  },
  {
    "text": "that's very impressive again like the",
    "start": "146000",
    "end": "147440"
  },
  {
    "text": "fact that they have any is unfortunate",
    "start": "147440",
    "end": "148879"
  },
  {
    "text": "but I think that's just the nature of",
    "start": "148879",
    "end": "149920"
  },
  {
    "text": "writing C that's why I do highly",
    "start": "149920",
    "end": "151280"
  },
  {
    "text": "recommend for security purposes for",
    "start": "151280",
    "end": "153200"
  },
  {
    "text": "memory for network facing code use a",
    "start": "153200",
    "end": "156000"
  },
  {
    "text": "memory safe language like Rust uh but",
    "start": "156000",
    "end": "157920"
  },
  {
    "text": "you know they don't want to do that",
    "start": "157920",
    "end": "158720"
  },
  {
    "text": "because they don't want to re the entire",
    "start": "158720",
    "end": "159760"
  },
  {
    "text": "codebase that would be insane so as a",
    "start": "159760",
    "end": "161280"
  },
  {
    "text": "result they have no critical bugs and",
    "start": "161280",
    "end": "163040"
  },
  {
    "text": "only two of them are at high so that's",
    "start": "163040",
    "end": "164720"
  },
  {
    "text": "awesome we currently have close to",
    "start": "164720",
    "end": "166480"
  },
  {
    "text": "180,000 lines of C89 production code c89",
    "start": "166480",
    "end": "169920"
  },
  {
    "text": "is a spec it's basically like the",
    "start": "169920",
    "end": "171599"
  },
  {
    "text": "standard of C that you're writing the",
    "start": "171599",
    "end": "173120"
  },
  {
    "text": "different specs different standards have",
    "start": "173120",
    "end": "174959"
  },
  {
    "text": "different features c89 is one of the",
    "start": "174959",
    "end": "177360"
  },
  {
    "text": "earliest if not the earliest i was stick",
    "start": "177360",
    "end": "179519"
  },
  {
    "text": "to C89 for the widest possible",
    "start": "179519",
    "end": "181519"
  },
  {
    "text": "portability and we believe in continuous",
    "start": "181519",
    "end": "183599"
  },
  {
    "text": "non-stop iterating and polishing and",
    "start": "183599",
    "end": "186239"
  },
  {
    "text": "never rewriting yeah exactly so like you",
    "start": "186239",
    "end": "188560"
  },
  {
    "text": "know you if they if their objective was",
    "start": "188560",
    "end": "190400"
  },
  {
    "text": "to have zero bugs they could rewrite it",
    "start": "190400",
    "end": "192400"
  },
  {
    "text": "in C or rewrite it in Rust um but then",
    "start": "192400",
    "end": "194959"
  },
  {
    "text": "you know a they'd be violating this",
    "start": "194959",
    "end": "196480"
  },
  {
    "text": "principle but also b it would just be an",
    "start": "196480",
    "end": "197920"
  },
  {
    "text": "entirely new tool you couldn't call this",
    "start": "197920",
    "end": "199440"
  },
  {
    "text": "curl it' be it'd be rural or curl RS",
    "start": "199440",
    "end": "202680"
  },
  {
    "text": "readability code should be easy to read",
    "start": "202680",
    "end": "206480"
  },
  {
    "text": "it should be clear no hiding code under",
    "start": "206480",
    "end": "208959"
  },
  {
    "text": "clever constructs fancy macros or",
    "start": "208959",
    "end": "211599"
  },
  {
    "text": "overloading yeah this is the thing man",
    "start": "211599",
    "end": "213840"
  },
  {
    "text": "like when people are writing code when",
    "start": "213840",
    "end": "216239"
  },
  {
    "text": "people are doing security audits on the",
    "start": "216239",
    "end": "217920"
  },
  {
    "text": "code it needs to be so easy to",
    "start": "217920",
    "end": "221120"
  },
  {
    "text": "understand and the contracts of",
    "start": "221120",
    "end": "223920"
  },
  {
    "text": "functions need to be clear just by like",
    "start": "223920",
    "end": "226560"
  },
  {
    "text": "the name of the function and a few lines",
    "start": "226560",
    "end": "228560"
  },
  {
    "text": "into the function and a good tople",
    "start": "228560",
    "end": "230799"
  },
  {
    "text": "function comment right i shouldn't have",
    "start": "230799",
    "end": "232959"
  },
  {
    "text": "to make an assumption about the contract",
    "start": "232959",
    "end": "235519"
  },
  {
    "text": "of a function right like what the",
    "start": "235519",
    "end": "237360"
  },
  {
    "text": "expectation is when you put data into",
    "start": "237360",
    "end": "239360"
  },
  {
    "text": "that function and what you get out it",
    "start": "239360",
    "end": "241040"
  },
  {
    "text": "should be obvious like the the the name",
    "start": "241040",
    "end": "243360"
  },
  {
    "text": "of the function should indicate that and",
    "start": "243360",
    "end": "245519"
  },
  {
    "text": "yeah clever constructs and fancy macros",
    "start": "245519",
    "end": "247200"
  },
  {
    "text": "do when I was doing the sevenzip audit",
    "start": "247200",
    "end": "249200"
  },
  {
    "text": "the sevenzip audit the code used so many",
    "start": "249200",
    "end": "252319"
  },
  {
    "text": "macros it was doing like a for loop",
    "start": "252319",
    "end": "255360"
  },
  {
    "text": "where the loop intro the loop outro and",
    "start": "255360",
    "end": "258400"
  },
  {
    "text": "then the contents of the loop were all",
    "start": "258400",
    "end": "260000"
  },
  {
    "text": "different macros that had like 10",
    "start": "260000",
    "end": "261759"
  },
  {
    "text": "different suble that's okay if you are a",
    "start": "261759",
    "end": "264320"
  },
  {
    "text": "a single maintainer maintained codebase",
    "start": "264320",
    "end": "266479"
  },
  {
    "text": "and I think literally seven zip is",
    "start": "266479",
    "end": "267759"
  },
  {
    "text": "maintained by one guy Eig Igor I forgot",
    "start": "267759",
    "end": "269280"
  },
  {
    "text": "his last name but when you get into a",
    "start": "269280",
    "end": "271600"
  },
  {
    "text": "codebase that is as big as curl and you",
    "start": "271600",
    "end": "274960"
  },
  {
    "text": "expect there to be multiple maintainers",
    "start": "274960",
    "end": "276639"
  },
  {
    "text": "which by the way here there are there's",
    "start": "276639",
    "end": "278240"
  },
  {
    "text": "a thousand apparently this code needs to",
    "start": "278240",
    "end": "280720"
  },
  {
    "text": "be easy to read smaller functions are",
    "start": "280720",
    "end": "282479"
  },
  {
    "text": "easy to read and understandable than",
    "start": "282479",
    "end": "284320"
  },
  {
    "text": "longer functions less preferable yep",
    "start": "284320",
    "end": "286080"
  },
  {
    "text": "100% function like this is a clean code",
    "start": "286080",
    "end": "287840"
  },
  {
    "text": "principle so however you feel about that",
    "start": "287840",
    "end": "289680"
  },
  {
    "text": "but a function should do one thing the",
    "start": "289680",
    "end": "292320"
  },
  {
    "text": "function should have a name that says",
    "start": "292320",
    "end": "294160"
  },
  {
    "text": "what it does and it should take one",
    "start": "294160",
    "end": "296320"
  },
  {
    "text": "action now that action can be multiple",
    "start": "296320",
    "end": "299120"
  },
  {
    "text": "action encompassing but those subactions",
    "start": "299120",
    "end": "301759"
  },
  {
    "text": "should be encapsulated by other",
    "start": "301759",
    "end": "303520"
  },
  {
    "text": "functions that get called right so when",
    "start": "303520",
    "end": "304960"
  },
  {
    "text": "you read the code you see oh the name of",
    "start": "304960",
    "end": "306560"
  },
  {
    "text": "the function is this some control flow",
    "start": "306560",
    "end": "309120"
  },
  {
    "text": "and then it adds a few more functions",
    "start": "309120",
    "end": "310720"
  },
  {
    "text": "right that that is a very simple way to",
    "start": "310720",
    "end": "312479"
  },
  {
    "text": "make your code readable and",
    "start": "312479",
    "end": "313520"
  },
  {
    "text": "understandable code should be read as if",
    "start": "313520",
    "end": "315039"
  },
  {
    "text": "it was written by a single human there",
    "start": "315039",
    "end": "317360"
  },
  {
    "text": "should be consistent uniform code style",
    "start": "317360",
    "end": "319039"
  },
  {
    "text": "all over as that helps us read the code",
    "start": "319039",
    "end": "320880"
  },
  {
    "text": "better wrong or inconsistent code style",
    "start": "320880",
    "end": "323440"
  },
  {
    "text": "is a bug we fix all bugs that we find",
    "start": "323440",
    "end": "325759"
  },
  {
    "text": "that's base as we fix all bugs that",
    "start": "325759",
    "end": "327919"
  },
  {
    "text": "we find that is a bug uh we have tooling",
    "start": "327919",
    "end": "330080"
  },
  {
    "text": "to verify basic code style compliance",
    "start": "330080",
    "end": "331759"
  },
  {
    "text": "yeah no 100% again going back to like",
    "start": "331759",
    "end": "334080"
  },
  {
    "text": "when you're doing a security audit on",
    "start": "334080",
    "end": "335120"
  },
  {
    "text": "the code or you're trying to contribute",
    "start": "335120",
    "end": "336160"
  },
  {
    "text": "to the code if you if there are like",
    "start": "336160",
    "end": "338320"
  },
  {
    "text": "different styles of code contracts if",
    "start": "338320",
    "end": "340880"
  },
  {
    "text": "there are different styles of like how",
    "start": "340880",
    "end": "342320"
  },
  {
    "text": "they break up responsibilities how they",
    "start": "342320",
    "end": "344000"
  },
  {
    "text": "break up functionality in the code it",
    "start": "344000",
    "end": "345840"
  },
  {
    "text": "gets very difficult to understand be",
    "start": "345840",
    "end": "347680"
  },
  {
    "text": "able to expect what a function is going",
    "start": "347680",
    "end": "348800"
  },
  {
    "text": "to do this is a great way to write good",
    "start": "348800",
    "end": "350160"
  },
  {
    "text": "code right you have a code style",
    "start": "350160",
    "end": "351680"
  },
  {
    "text": "document and then you have llinters and",
    "start": "351680",
    "end": "353759"
  },
  {
    "text": "syntax checkers that are checking to",
    "start": "353759",
    "end": "355199"
  },
  {
    "text": "make sure that you are adhering to that",
    "start": "355199",
    "end": "357039"
  },
  {
    "text": "style people say that's nitpicky people",
    "start": "357039",
    "end": "358880"
  },
  {
    "text": "say that that's like a way to",
    "start": "358880",
    "end": "360000"
  },
  {
    "text": "write code like oh they rejected my PR",
    "start": "360000",
    "end": "362320"
  },
  {
    "text": "because I didn't adhere to the code",
    "start": "362320",
    "end": "363199"
  },
  {
    "text": "style no that's actually a security",
    "start": "363199",
    "end": "364639"
  },
  {
    "text": "thing like when you don't adhere to the",
    "start": "364639",
    "end": "366560"
  },
  {
    "text": "same code style as the rest of the",
    "start": "366560",
    "end": "367919"
  },
  {
    "text": "codebase you're introducing tech debt in",
    "start": "367919",
    "end": "370960"
  },
  {
    "text": "the form of this code is not",
    "start": "370960",
    "end": "372720"
  },
  {
    "text": "understandable by future auditors or by",
    "start": "372720",
    "end": "374240"
  },
  {
    "text": "future people contributing to it um and",
    "start": "374240",
    "end": "375919"
  },
  {
    "text": "that needs to get fixed narrow code and",
    "start": "375919",
    "end": "378000"
  },
  {
    "text": "short names code should be written",
    "start": "378000",
    "end": "380160"
  },
  {
    "text": "narrow it is hard on the eyes to read",
    "start": "380160",
    "end": "382000"
  },
  {
    "text": "long lines so we enforce a strict 80",
    "start": "382000",
    "end": "384319"
  },
  {
    "text": "column maximum line length yeah I I've",
    "start": "384319",
    "end": "387199"
  },
  {
    "text": "seen this in a few places it's getting",
    "start": "387199",
    "end": "389039"
  },
  {
    "text": "less and less common for people to",
    "start": "389039",
    "end": "390240"
  },
  {
    "text": "actually enforce the 80 um which I think",
    "start": "390240",
    "end": "392639"
  },
  {
    "text": "is like that originates from the",
    "start": "392639",
    "end": "394000"
  },
  {
    "text": "original max width of the terminal we",
    "start": "394000",
    "end": "396080"
  },
  {
    "text": "use two space indents to uh still allow",
    "start": "396080",
    "end": "398479"
  },
  {
    "text": "us to do some amount of indent levels",
    "start": "398479",
    "end": "400080"
  },
  {
    "text": "before the column width becomes a",
    "start": "400080",
    "end": "401440"
  },
  {
    "text": "problem okay so yeah like normally you",
    "start": "401440",
    "end": "404319"
  },
  {
    "text": "there's the whole debate in programming",
    "start": "404319",
    "end": "405759"
  },
  {
    "text": "is do you use tabs or spaces some people",
    "start": "405759",
    "end": "408639"
  },
  {
    "text": "say that you use a tab because it's a",
    "start": "408639",
    "end": "410800"
  },
  {
    "text": "single character and then in your code",
    "start": "410800",
    "end": "412800"
  },
  {
    "text": "editor you can just reduce the size of a",
    "start": "412800",
    "end": "415039"
  },
  {
    "text": "tab to look smaller but here they're",
    "start": "415039",
    "end": "417199"
  },
  {
    "text": "doing space indentation to I guess by",
    "start": "417199",
    "end": "419759"
  },
  {
    "text": "default make sure that you know no",
    "start": "419759",
    "end": "421280"
  },
  {
    "text": "matter what editor you're using no",
    "start": "421280",
    "end": "422720"
  },
  {
    "text": "matter what um width you have your tab",
    "start": "422720",
    "end": "425120"
  },
  {
    "text": "set to it'll only ever look like two",
    "start": "425120",
    "end": "427919"
  },
  {
    "text": "spaces you know that reduces the",
    "start": "427919",
    "end": "429440"
  },
  {
    "text": "customizability of how you want your",
    "start": "429440",
    "end": "430720"
  },
  {
    "text": "workflow to look but at the same time it",
    "start": "430720",
    "end": "432479"
  },
  {
    "text": "is a a more uniform thing so that no",
    "start": "432479",
    "end": "434560"
  },
  {
    "text": "matter where you open the code you know",
    "start": "434560",
    "end": "436240"
  },
  {
    "text": "where you can you know what you can",
    "start": "436240",
    "end": "437280"
  },
  {
    "text": "expect the code to look like if init",
    "start": "437280",
    "end": "438960"
  },
  {
    "text": "level becomes a problem maybe it should",
    "start": "438960",
    "end": "440479"
  },
  {
    "text": "be split up into several sum functions",
    "start": "440479",
    "end": "441840"
  },
  {
    "text": "instead yeah exactly like so this is a",
    "start": "441840",
    "end": "443680"
  },
  {
    "text": "good way to ensure that the functions",
    "start": "443680",
    "end": "445280"
  },
  {
    "text": "are simple if you have a column max line",
    "start": "445280",
    "end": "448560"
  },
  {
    "text": "length that means that you first of all",
    "start": "448560",
    "end": "450960"
  },
  {
    "text": "you can't do nested for loops or nested",
    "start": "450960",
    "end": "453039"
  },
  {
    "text": "if statements like over and over and",
    "start": "453039",
    "end": "454160"
  },
  {
    "text": "over again by the time you get to like",
    "start": "454160",
    "end": "455280"
  },
  {
    "text": "three deep you already are starting to",
    "start": "455280",
    "end": "456800"
  },
  {
    "text": "push outside of the bounds of of 80",
    "start": "456800",
    "end": "458960"
  },
  {
    "text": "columns and then also it makes it so",
    "start": "458960",
    "end": "461039"
  },
  {
    "text": "that function calls can't be super long",
    "start": "461039",
    "end": "462720"
  },
  {
    "text": "like if you have a function that takes",
    "start": "462720",
    "end": "464240"
  },
  {
    "text": "like nine arguments and outputs some",
    "start": "464240",
    "end": "466240"
  },
  {
    "text": "large structure okay maybe we should be",
    "start": "466240",
    "end": "468720"
  },
  {
    "text": "breaking that up into sub functions so",
    "start": "468720",
    "end": "470080"
  },
  {
    "text": "that we don't have this giant parameter",
    "start": "470080",
    "end": "471680"
  },
  {
    "text": "list uh also related in particular local",
    "start": "471680",
    "end": "474800"
  },
  {
    "text": "identifiers and names should be short",
    "start": "474800",
    "end": "476639"
  },
  {
    "text": "having long names makes them harder to",
    "start": "476639",
    "end": "478400"
  },
  {
    "text": "read especially our multiple ones that",
    "start": "478400",
    "end": "479919"
  },
  {
    "text": "are similar not to mention that they can",
    "start": "479919",
    "end": "482400"
  },
  {
    "text": "uh get hard to fit within 80 columns",
    "start": "482400",
    "end": "484160"
  },
  {
    "text": "after some amount of indents yeah this",
    "start": "484160",
    "end": "485440"
  },
  {
    "text": "is fine so many people will now joke and",
    "start": "485440",
    "end": "487360"
  },
  {
    "text": "say something about wide screens being",
    "start": "487360",
    "end": "489039"
  },
  {
    "text": "available oh interesting wider code is",
    "start": "489039",
    "end": "491039"
  },
  {
    "text": "harder to read period the question could",
    "start": "491039",
    "end": "493599"
  },
  {
    "text": "possibly be exactly where to draw the",
    "start": "493599",
    "end": "495440"
  },
  {
    "text": "limit and that's a debate for every",
    "start": "495440",
    "end": "496960"
  },
  {
    "text": "project to have yeah interesting this is",
    "start": "496960",
    "end": "498879"
  },
  {
    "text": "like this is the primogen's primary",
    "start": "498879",
    "end": "500720"
  },
  {
    "text": "argument about why he uses a single 24in",
    "start": "500720",
    "end": "502800"
  },
  {
    "text": "screen because like yeah sure you could",
    "start": "502800",
    "end": "504639"
  },
  {
    "text": "get a quad wide and just like you know",
    "start": "504639",
    "end": "506479"
  },
  {
    "text": "have the code on both screens at all",
    "start": "506479",
    "end": "508639"
  },
  {
    "text": "times or this giant screen at all times",
    "start": "508639",
    "end": "510639"
  },
  {
    "text": "but his argument is similar to this",
    "start": "510639",
    "end": "511919"
  },
  {
    "text": "where it's just like I want to have the",
    "start": "511919",
    "end": "513680"
  },
  {
    "text": "code tiny but blown up in front of me so",
    "start": "513680",
    "end": "516320"
  },
  {
    "text": "I know exactly what I'm looking at so",
    "start": "516320",
    "end": "517680"
  },
  {
    "text": "the argument here is similar where it's",
    "start": "517680",
    "end": "519039"
  },
  {
    "text": "like wider screens make the code harder",
    "start": "519039",
    "end": "520719"
  },
  {
    "text": "to read i mean I'm on a 34 quad wide",
    "start": "520719",
    "end": "522560"
  },
  {
    "text": "right now and even with this monitor",
    "start": "522560",
    "end": "524000"
  },
  {
    "text": "when I'm reading sometimes I catch",
    "start": "524000",
    "end": "525360"
  },
  {
    "text": "myself like my head physically moves",
    "start": "525360",
    "end": "527200"
  },
  {
    "text": "right like I have to like look across",
    "start": "527200",
    "end": "528640"
  },
  {
    "text": "the screen if I had this if I adhere to",
    "start": "528640",
    "end": "531440"
  },
  {
    "text": "this principle I would never move my",
    "start": "531440",
    "end": "532959"
  },
  {
    "text": "head in theory I would just capture the",
    "start": "532959",
    "end": "534480"
  },
  {
    "text": "essence of the code in one glance which",
    "start": "534480",
    "end": "535920"
  },
  {
    "text": "is probably easier for readability",
    "start": "535920",
    "end": "537600"
  },
  {
    "text": "warning free yeah this is a common thing",
    "start": "537600",
    "end": "539440"
  },
  {
    "text": "in people that are really really strict",
    "start": "539440",
    "end": "540720"
  },
  {
    "text": "about their C code and it's I mean it",
    "start": "540720",
    "end": "542240"
  },
  {
    "text": "sounds obvious like oh obviously your",
    "start": "542240",
    "end": "544000"
  },
  {
    "text": "code should have no warnings but dude if",
    "start": "544000",
    "end": "545600"
  },
  {
    "text": "you ever written in like a very loud",
    "start": "545600",
    "end": "547200"
  },
  {
    "text": "compiler like Clang for example it is",
    "start": "547200",
    "end": "549839"
  },
  {
    "text": "very difficult to get your code to be",
    "start": "549839",
    "end": "552080"
  },
  {
    "text": "warning free now obviously there are",
    "start": "552080",
    "end": "554160"
  },
  {
    "text": "ways to suppress it or or ways for you",
    "start": "554160",
    "end": "556160"
  },
  {
    "text": "to you know properly notate it and",
    "start": "556160",
    "end": "558080"
  },
  {
    "text": "that's what they do here um but",
    "start": "558080",
    "end": "559839"
  },
  {
    "text": "maintaining a large code base with a lot",
    "start": "559839",
    "end": "561600"
  },
  {
    "text": "of people that you're trying to",
    "start": "561600",
    "end": "562880"
  },
  {
    "text": "regularly get get commits into it's not",
    "start": "562880",
    "end": "565200"
  },
  {
    "text": "like super easy to write warning free",
    "start": "565200",
    "end": "566800"
  },
  {
    "text": "code uh while it should be natural to",
    "start": "566800",
    "end": "568880"
  },
  {
    "text": "everyone already we of course build all",
    "start": "568880",
    "end": "571120"
  },
  {
    "text": "curl code entirely without any compiler",
    "start": "571120",
    "end": "574000"
  },
  {
    "text": "warnings and any of the 220 plus CI jobs",
    "start": "574000",
    "end": "576240"
  },
  {
    "text": "we perform good and yeah they're doing",
    "start": "576240",
    "end": "577680"
  },
  {
    "text": "CI testing which is awesome we build",
    "start": "577680",
    "end": "579600"
  },
  {
    "text": "curl with all the most picky compiler",
    "start": "579600",
    "end": "581920"
  },
  {
    "text": "options that exist and we set the",
    "start": "581920",
    "end": "583440"
  },
  {
    "text": "compilers we use uh with the set of",
    "start": "583440",
    "end": "585600"
  },
  {
    "text": "compilers that we use and we silence",
    "start": "585600",
    "end": "586880"
  },
  {
    "text": "every warning that appears we treat",
    "start": "586880",
    "end": "588160"
  },
  {
    "text": "every compiler warning as an error yeah",
    "start": "588160",
    "end": "589839"
  },
  {
    "text": "so if you do something like with like",
    "start": "589839",
    "end": "590880"
  },
  {
    "text": "clang right which is the lvm uh c",
    "start": "590880",
    "end": "593360"
  },
  {
    "text": "compiler and then you can do uh wearer",
    "start": "593360",
    "end": "596640"
  },
  {
    "text": "wall which basically says turn on all",
    "start": "596640",
    "end": "600000"
  },
  {
    "text": "possible warnings right so that you are",
    "start": "600000",
    "end": "602160"
  },
  {
    "text": "not missing any of the warning classes",
    "start": "602160",
    "end": "604720"
  },
  {
    "text": "and then treat all warnings as errors",
    "start": "604720",
    "end": "607120"
  },
  {
    "text": "right which basically means you will",
    "start": "607120",
    "end": "608880"
  },
  {
    "text": "like if you if you have a warning in CC",
    "start": "608880",
    "end": "610399"
  },
  {
    "text": "code you are going to it'll still",
    "start": "610399",
    "end": "612240"
  },
  {
    "text": "compile but you know you have a warning",
    "start": "612240",
    "end": "614320"
  },
  {
    "text": "in your code okay that that'll appear in",
    "start": "614320",
    "end": "615760"
  },
  {
    "text": "like the compiler output and that'll be",
    "start": "615760",
    "end": "616959"
  },
  {
    "text": "it'll still emit the binary if you treat",
    "start": "616959",
    "end": "619440"
  },
  {
    "text": "warnings as errors it will not emit the",
    "start": "619440",
    "end": "621440"
  },
  {
    "text": "binary for you so they probably have",
    "start": "621440",
    "end": "622720"
  },
  {
    "text": "some variant of of this stuff going on",
    "start": "622720",
    "end": "625040"
  },
  {
    "text": "um where they don't allow you to emit",
    "start": "625040",
    "end": "626959"
  },
  {
    "text": "the binary if there are any warnings",
    "start": "626959",
    "end": "628560"
  },
  {
    "text": "period which again is a great way to",
    "start": "628560",
    "end": "630320"
  },
  {
    "text": "reduce the attack surface of your code",
    "start": "630320",
    "end": "632240"
  },
  {
    "text": "avoid bad functions yeah there are some",
    "start": "632240",
    "end": "635120"
  },
  {
    "text": "C functions that are just plain bad",
    "start": "635120",
    "end": "636399"
  },
  {
    "text": "because of their lack of boundary",
    "start": "636399",
    "end": "637600"
  },
  {
    "text": "controls or local state and we avoid",
    "start": "637600",
    "end": "639279"
  },
  {
    "text": "them yeah so again people at me for",
    "start": "639279",
    "end": "641200"
  },
  {
    "text": "this sometimes there's like a Reddit",
    "start": "641200",
    "end": "642560"
  },
  {
    "text": "thread where someone was like mad at me",
    "start": "642560",
    "end": "643839"
  },
  {
    "text": "for saying this functions like stir copy",
    "start": "643839",
    "end": "647120"
  },
  {
    "text": "sprintf gets stir to etc are all",
    "start": "647120",
    "end": "650959"
  },
  {
    "text": "functions that depend on the end of a",
    "start": "650959",
    "end": "653760"
  },
  {
    "text": "buffer or that that that write code to",
    "start": "653760",
    "end": "656480"
  },
  {
    "text": "buffers but don't take the end of the",
    "start": "656480",
    "end": "658640"
  },
  {
    "text": "buffer as input and just imply it from",
    "start": "658640",
    "end": "662079"
  },
  {
    "text": "the function call so for example one of",
    "start": "662079",
    "end": "663680"
  },
  {
    "text": "them is gets and you could literally",
    "start": "663680",
    "end": "665360"
  },
  {
    "text": "read the man page of gets description",
    "start": "665360",
    "end": "669279"
  },
  {
    "text": "never use this function like that like",
    "start": "669279",
    "end": "672160"
  },
  {
    "text": "hello it's just very bad get a string",
    "start": "672160",
    "end": "674079"
  },
  {
    "text": "from the standard input what this does",
    "start": "674079",
    "end": "675360"
  },
  {
    "text": "is literally it reads a string in from",
    "start": "675360",
    "end": "677760"
  },
  {
    "text": "the user get string and it returns that",
    "start": "677760",
    "end": "679600"
  },
  {
    "text": "as a function or as a character pointer",
    "start": "679600",
    "end": "681360"
  },
  {
    "text": "but it will also write it to the buffer",
    "start": "681360",
    "end": "683120"
  },
  {
    "text": "here that you specify the issue is that",
    "start": "683120",
    "end": "686480"
  },
  {
    "text": "it doesn't know how big this buffer is",
    "start": "686480",
    "end": "688480"
  },
  {
    "text": "so it will just overwrite it to the end",
    "start": "688480",
    "end": "690079"
  },
  {
    "text": "and then sprintf is the same way uh",
    "start": "690079",
    "end": "692320"
  },
  {
    "text": "sprint f what this does is you take a",
    "start": "692320",
    "end": "694399"
  },
  {
    "text": "format string like you do with print f",
    "start": "694399",
    "end": "696320"
  },
  {
    "text": "where you have like percent d comma a",
    "start": "696320",
    "end": "698160"
  },
  {
    "text": "number but you can write it out to a",
    "start": "698160",
    "end": "699760"
  },
  {
    "text": "buffer the issue here also is that there",
    "start": "699760",
    "end": "702399"
  },
  {
    "text": "is no n value it does not know how big",
    "start": "702399",
    "end": "704240"
  },
  {
    "text": "this buffer is so instead you use a safe",
    "start": "704240",
    "end": "706320"
  },
  {
    "text": "variant safe uh snrint f where n is the",
    "start": "706320",
    "end": "709440"
  },
  {
    "text": "maximum size you can write out right so",
    "start": "709440",
    "end": "711920"
  },
  {
    "text": "again they're good they're they're",
    "start": "711920",
    "end": "713200"
  },
  {
    "text": "avoiding bad functions which is a",
    "start": "713200",
    "end": "714560"
  },
  {
    "text": "practice that everyone should do",
    "start": "714560",
    "end": "715680"
  },
  {
    "text": "although the amount of code audits I've",
    "start": "715680",
    "end": "716880"
  },
  {
    "text": "done where people have used bad",
    "start": "716880",
    "end": "718160"
  },
  {
    "text": "functions is higher than zero there are",
    "start": "718160",
    "end": "721120"
  },
  {
    "text": "some C functions that are complicated in",
    "start": "721120",
    "end": "722560"
  },
  {
    "text": "other ways that's true they have too",
    "start": "722560",
    "end": "724480"
  },
  {
    "text": "many open they have too too much",
    "start": "724480",
    "end": "726560"
  },
  {
    "text": "open-ended functionality or do things",
    "start": "726560",
    "end": "728000"
  },
  {
    "text": "that often end up problematic or just",
    "start": "728000",
    "end": "729839"
  },
  {
    "text": "plain wrong they easily lend us uh lead",
    "start": "729839",
    "end": "732320"
  },
  {
    "text": "us into doing mistakes we avoid scanf",
    "start": "732320",
    "end": "734720"
  },
  {
    "text": "and stir end copy for these reasons yeah",
    "start": "734720",
    "end": "736480"
  },
  {
    "text": "so stir end copy is one that you would",
    "start": "736480",
    "end": "738800"
  },
  {
    "text": "think oh if stir copy is bad just use",
    "start": "738800",
    "end": "741200"
  },
  {
    "text": "stir end copy we'll know the issue with",
    "start": "741200",
    "end": "743680"
  },
  {
    "text": "stir end copy when you do a string copy",
    "start": "743680",
    "end": "746079"
  },
  {
    "text": "you're copying a null terminated string",
    "start": "746079",
    "end": "748959"
  },
  {
    "text": "from one buffer to another and then this",
    "start": "748959",
    "end": "752000"
  },
  {
    "text": "end value here is the length of the",
    "start": "752000",
    "end": "754079"
  },
  {
    "text": "destination right so you think oh okay I",
    "start": "754079",
    "end": "755839"
  },
  {
    "text": "just specify the length of the buffer",
    "start": "755839",
    "end": "757839"
  },
  {
    "text": "and then taa it will never out go",
    "start": "757839",
    "end": "759760"
  },
  {
    "text": "outside of the buffer well the issue is",
    "start": "759760",
    "end": "761360"
  },
  {
    "text": "if they copy in a string that is the",
    "start": "761360",
    "end": "764160"
  },
  {
    "text": "size of the destination buffer stir and",
    "start": "764160",
    "end": "766880"
  },
  {
    "text": "copy will not null terminate that string",
    "start": "766880",
    "end": "769440"
  },
  {
    "text": "and what that means that if you go to",
    "start": "769440",
    "end": "770880"
  },
  {
    "text": "then later print that string ing the",
    "start": "770880",
    "end": "772880"
  },
  {
    "text": "print function won't know where to stop",
    "start": "772880",
    "end": "774639"
  },
  {
    "text": "printing and it could print your entire",
    "start": "774639",
    "end": "776560"
  },
  {
    "text": "stack out it could leak sensitive data",
    "start": "776560",
    "end": "778880"
  },
  {
    "text": "so even stir end copy a function that is",
    "start": "778880",
    "end": "780959"
  },
  {
    "text": "safe has weird side effects that like",
    "start": "780959",
    "end": "783680"
  },
  {
    "text": "not everyone knows about so even these",
    "start": "783680",
    "end": "785680"
  },
  {
    "text": "functions there are other functions in C",
    "start": "785680",
    "end": "787200"
  },
  {
    "text": "that you need to also avoid so similarly",
    "start": "787200",
    "end": "788800"
  },
  {
    "text": "they avoid stir and copy and um as scanf",
    "start": "788800",
    "end": "792160"
  },
  {
    "text": "string scanf we have tooling that bans",
    "start": "792160",
    "end": "794880"
  },
  {
    "text": "the use of these functions in our code",
    "start": "794880",
    "end": "796399"
  },
  {
    "text": "that's yeah that's cool that again like",
    "start": "796399",
    "end": "798079"
  },
  {
    "text": "there are so many code I've looked at",
    "start": "798079",
    "end": "799519"
  },
  {
    "text": "where I'm like brother how how did you",
    "start": "799519",
    "end": "801760"
  },
  {
    "text": "let this out the door like h why did you",
    "start": "801760",
    "end": "804000"
  },
  {
    "text": "use this function here how how did you",
    "start": "804000",
    "end": "806160"
  },
  {
    "text": "have no CI in place to catch this trying",
    "start": "806160",
    "end": "809279"
  },
  {
    "text": "to introduce the use of one of them in a",
    "start": "809279",
    "end": "811519"
  },
  {
    "text": "pull request causes CI jobs to turn red",
    "start": "811519",
    "end": "814000"
  },
  {
    "text": "and alert the author of their mistake",
    "start": "814000",
    "end": "815600"
  },
  {
    "text": "perfect better functions years ago we",
    "start": "815600",
    "end": "818079"
  },
  {
    "text": "found ourselves having done several",
    "start": "818079",
    "end": "819519"
  },
  {
    "text": "mistakes in code that were dealing with",
    "start": "819519",
    "end": "821040"
  },
  {
    "text": "different dynamic buffers yep so like",
    "start": "821040",
    "end": "822800"
  },
  {
    "text": "Malo you know realic free stuff like",
    "start": "822800",
    "end": "825200"
  },
  {
    "text": "that we had too many separate",
    "start": "825200",
    "end": "826399"
  },
  {
    "text": "implementations working on dynamically",
    "start": "826399",
    "end": "827760"
  },
  {
    "text": "growing memory areas we unified this",
    "start": "827760",
    "end": "829680"
  },
  {
    "text": "handling with a new set of internal help",
    "start": "829680",
    "end": "831760"
  },
  {
    "text": "functions for growing buffers and now",
    "start": "831760",
    "end": "834160"
  },
  {
    "text": "made sure we only use those this",
    "start": "834160",
    "end": "836160"
  },
  {
    "text": "drastically reduces the use uh the need",
    "start": "836160",
    "end": "837920"
  },
  {
    "text": "for realic which helps us avoid mistakes",
    "start": "837920",
    "end": "839519"
  },
  {
    "text": "related to that function yeah so again",
    "start": "839519",
    "end": "841120"
  },
  {
    "text": "weird weird edge",
    "start": "841120",
    "end": "843639"
  },
  {
    "text": "cases yeah exactly and then like the",
    "start": "843639",
    "end": "845839"
  },
  {
    "text": "original buffer sometimes freed",
    "start": "845839",
    "end": "847279"
  },
  {
    "text": "sometimes it's not yada yada yada so",
    "start": "847279",
    "end": "848800"
  },
  {
    "text": "it's another function with weird edge",
    "start": "848800",
    "end": "850560"
  },
  {
    "text": "cases each dynamic buffer also uh has",
    "start": "850560",
    "end": "853199"
  },
  {
    "text": "its own maximum size set which in",
    "start": "853199",
    "end": "855199"
  },
  {
    "text": "simplic uh which in its simplicity also",
    "start": "855199",
    "end": "857279"
  },
  {
    "text": "helps catching mistakes and the current",
    "start": "857279",
    "end": "858800"
  },
  {
    "text": "lib curl code we have uh 80 something",
    "start": "858800",
    "end": "861120"
  },
  {
    "text": "different dynamic buffers parsing",
    "start": "861120",
    "end": "863040"
  },
  {
    "text": "functions yeah I wanted to get into this",
    "start": "863040",
    "end": "864320"
  },
  {
    "text": "so the the primary security",
    "start": "864320",
    "end": "866000"
  },
  {
    "text": "vulnerability in so much code is just",
    "start": "866000",
    "end": "868639"
  },
  {
    "text": "basically user provides data we need to",
    "start": "868639",
    "end": "871760"
  },
  {
    "text": "take that data and chop it into bits and",
    "start": "871760",
    "end": "874000"
  },
  {
    "text": "take actions on it parsing right parsing",
    "start": "874000",
    "end": "876240"
  },
  {
    "text": "is one of those things that is so easy",
    "start": "876240",
    "end": "878160"
  },
  {
    "text": "to get wrong and is what causes so many",
    "start": "878160",
    "end": "880880"
  },
  {
    "text": "vulnerabilities and bugs and you're",
    "start": "880880",
    "end": "882000"
  },
  {
    "text": "probably thinking about like oh what is",
    "start": "882000",
    "end": "883120"
  },
  {
    "text": "the attack surface in curl well if I if",
    "start": "883120",
    "end": "884959"
  },
  {
    "text": "I curl http uh definitely not a bad",
    "start": "884959",
    "end": "889560"
  },
  {
    "text": "guy.com like if we get the request the",
    "start": "889560",
    "end": "893360"
  },
  {
    "text": "response from this website and it's",
    "start": "893360",
    "end": "894839"
  },
  {
    "text": "malformed and there's a bug in curl that",
    "start": "894839",
    "end": "897839"
  },
  {
    "text": "doesn't take in account the possibility",
    "start": "897839",
    "end": "900320"
  },
  {
    "text": "of it being",
    "start": "900320",
    "end": "901480"
  },
  {
    "text": "malformed it could exploit curl locally",
    "start": "901480",
    "end": "904800"
  },
  {
    "text": "and get a shell on our computer right so",
    "start": "904800",
    "end": "906320"
  },
  {
    "text": "it's very very interesting but very like",
    "start": "906320",
    "end": "908959"
  },
  {
    "text": "realistic attack surface that curl has",
    "start": "908959",
    "end": "910480"
  },
  {
    "text": "to deal with uh I mentioned how we don't",
    "start": "910480",
    "end": "912000"
  },
  {
    "text": "like sanf it is a powerful function for",
    "start": "912000",
    "end": "914160"
  },
  {
    "text": "parsing but it often ends up parsing",
    "start": "914160",
    "end": "916000"
  },
  {
    "text": "more what the user wants if you don't",
    "start": "916000",
    "end": "917760"
  },
  {
    "text": "know what scanf does guys scanf is a",
    "start": "917760",
    "end": "920079"
  },
  {
    "text": "function that you give it a buffer here",
    "start": "920079",
    "end": "924079"
  },
  {
    "text": "so the data that you want to parse and",
    "start": "924079",
    "end": "926399"
  },
  {
    "text": "then you give it the format string right",
    "start": "926399",
    "end": "928959"
  },
  {
    "text": "and then the other parameters here are",
    "start": "928959",
    "end": "931279"
  },
  {
    "text": "the destination buffers for that content",
    "start": "931279",
    "end": "933519"
  },
  {
    "text": "so if I have like you know",
    "start": "933519",
    "end": "937000"
  },
  {
    "text": "get/http1.1r rn which is the the the the",
    "start": "937000",
    "end": "940880"
  },
  {
    "text": "uh the request line for an http request",
    "start": "940880",
    "end": "943680"
  },
  {
    "text": "I can write a scanf call that says scanf",
    "start": "943680",
    "end": "946160"
  },
  {
    "text": "or s scanf the buffer the format string",
    "start": "946160",
    "end": "948800"
  },
  {
    "text": "would be percent s percent s percent s",
    "start": "948800",
    "end": "952079"
  },
  {
    "text": "and then destination buffers right for",
    "start": "952079",
    "end": "953839"
  },
  {
    "text": "the you know the method the path and the",
    "start": "953839",
    "end": "955920"
  },
  {
    "text": "version now this obviously has",
    "start": "955920",
    "end": "957360"
  },
  {
    "text": "vulnerabilities because if you do scanf",
    "start": "957360",
    "end": "959600"
  },
  {
    "text": "on a percent s the length is not known",
    "start": "959600",
    "end": "961440"
  },
  {
    "text": "here so you have another buffer overflow",
    "start": "961440",
    "end": "962720"
  },
  {
    "text": "issue But this is a function that has a",
    "start": "962720",
    "end": "964399"
  },
  {
    "text": "lot of weird side effects one of them",
    "start": "964399",
    "end": "965839"
  },
  {
    "text": "being the vulnerability side here but",
    "start": "965839",
    "end": "968160"
  },
  {
    "text": "also the um it could pull too much data",
    "start": "968160",
    "end": "970240"
  },
  {
    "text": "out of this request yeah for example",
    "start": "970240",
    "end": "971759"
  },
  {
    "text": "more than one space even if only one",
    "start": "971759",
    "end": "974160"
  },
  {
    "text": "should be accepted yes it'll just pull",
    "start": "974160",
    "end": "976000"
  },
  {
    "text": "random white space out of things and it",
    "start": "976000",
    "end": "977839"
  },
  {
    "text": "has weak non-existing handler handling",
    "start": "977839",
    "end": "979839"
  },
  {
    "text": "of integer overflows yeah lastly it",
    "start": "979839",
    "end": "981759"
  },
  {
    "text": "steers users into copying uh parsed",
    "start": "981759",
    "end": "983839"
  },
  {
    "text": "results around unnecessarily leading to",
    "start": "983839",
    "end": "986320"
  },
  {
    "text": "superfluous uses of local stack buffers",
    "start": "986320",
    "end": "988320"
  },
  {
    "text": "or shortlived heap allocations yeah and",
    "start": "988320",
    "end": "989759"
  },
  {
    "text": "that's the thing like once you start",
    "start": "989759",
    "end": "990800"
  },
  {
    "text": "doing lo like a lot of parsing out of",
    "start": "990800",
    "end": "993680"
  },
  {
    "text": "user data into local stack buffers",
    "start": "993680",
    "end": "995199"
  },
  {
    "text": "things just get messy very very fast",
    "start": "995199",
    "end": "997199"
  },
  {
    "text": "instead we introduce another set of",
    "start": "997199",
    "end": "998560"
  },
  {
    "text": "helper functions for string parsing and",
    "start": "998560",
    "end": "1000000"
  },
  {
    "text": "over time we switch all parser code in",
    "start": "1000000",
    "end": "1001680"
  },
  {
    "text": "curl over to using this set interesting",
    "start": "1001680",
    "end": "1005120"
  },
  {
    "text": "it makes it easier to write strict",
    "start": "1005120",
    "end": "1006399"
  },
  {
    "text": "parsers that only match exactly what we",
    "start": "1006399",
    "end": "1008480"
  },
  {
    "text": "want them to match avoid extra copies",
    "start": "1008480",
    "end": "1010480"
  },
  {
    "text": "and it does strict integer overflow and",
    "start": "1010480",
    "end": "1012480"
  },
  {
    "text": "boundary checking better yeah it seems",
    "start": "1012480",
    "end": "1014560"
  },
  {
    "text": "like basically this guy says to write",
    "start": "1014560",
    "end": "1016240"
  },
  {
    "text": "safe C code don't use GIBC functionality",
    "start": "1016240",
    "end": "1019279"
  },
  {
    "text": "like don't use lib C write your own lib",
    "start": "1019279",
    "end": "1022560"
  },
  {
    "text": "C uh that has better checks which I mean",
    "start": "1022560",
    "end": "1024400"
  },
  {
    "text": "maybe isn't a bad thing right a lot of",
    "start": "1024400",
    "end": "1025918"
  },
  {
    "text": "the a lot of the bugs in CC code come",
    "start": "1025919",
    "end": "1028798"
  },
  {
    "text": "from like",
    "start": "1028799",
    "end": "1029959"
  },
  {
    "text": "misunderstandings of how functions work",
    "start": "1029959",
    "end": "1032480"
  },
  {
    "text": "or like they just have weird corners",
    "start": "1032480",
    "end": "1034720"
  },
  {
    "text": "that people don't think about and there",
    "start": "1034720",
    "end": "1036959"
  },
  {
    "text": "are no strict checks in the compiler to",
    "start": "1036959",
    "end": "1039038"
  },
  {
    "text": "check them for you so this guy basically",
    "start": "1039039",
    "end": "1040480"
  },
  {
    "text": "had to write them all themselves monitor",
    "start": "1040480",
    "end": "1042880"
  },
  {
    "text": "memory function use yeah so again so",
    "start": "1042880",
    "end": "1045120"
  },
  {
    "text": "many vulnerabilities result in those",
    "start": "1045120",
    "end": "1046400"
  },
  {
    "text": "edge cases we talked about but also the",
    "start": "1046400",
    "end": "1048640"
  },
  {
    "text": "the end the the result of those is",
    "start": "1048640",
    "end": "1052080"
  },
  {
    "text": "memory copy issues right issues where",
    "start": "1052080",
    "end": "1055200"
  },
  {
    "text": "the data goes somewhere that it should",
    "start": "1055200",
    "end": "1057440"
  },
  {
    "text": "not go and therefore violates control",
    "start": "1057440",
    "end": "1059520"
  },
  {
    "text": "flow the hacker is able to control the",
    "start": "1059520",
    "end": "1061919"
  },
  {
    "text": "the flow of the of the graph right",
    "start": "1061919",
    "end": "1063760"
  },
  {
    "text": "memory problems often involve a dynamic",
    "start": "1063760",
    "end": "1066000"
  },
  {
    "text": "memory allocation followed by a copy of",
    "start": "1066000",
    "end": "1068240"
  },
  {
    "text": "data into the allocated memory area yes",
    "start": "1068240",
    "end": "1071280"
  },
  {
    "text": "or perhaps if the allocation and the",
    "start": "1071280",
    "end": "1073120"
  },
  {
    "text": "copy are both done correctly there is no",
    "start": "1073120",
    "end": "1075039"
  },
  {
    "text": "problem but if either of them are wrong",
    "start": "1075039",
    "end": "1076960"
  },
  {
    "text": "things can go bad yep exactly you either",
    "start": "1076960",
    "end": "1078720"
  },
  {
    "text": "don't allocate enough size or you",
    "start": "1078720",
    "end": "1080720"
  },
  {
    "text": "allocate enough size but you copy more",
    "start": "1080720",
    "end": "1082640"
  },
  {
    "text": "than that size therefore we aim to",
    "start": "1082640",
    "end": "1084720"
  },
  {
    "text": "minimize that pattern we rather favor",
    "start": "1084720",
    "end": "1087200"
  },
  {
    "text": "stir dupe and memory duplication that",
    "start": "1087200",
    "end": "1089760"
  },
  {
    "text": "allocates and copies data in the same",
    "start": "1089760",
    "end": "1091760"
  },
  {
    "text": "call or use helper functions that may do",
    "start": "1091760",
    "end": "1093679"
  },
  {
    "text": "those things behind their APIs we run a",
    "start": "1093679",
    "end": "1096080"
  },
  {
    "text": "daily updated graph in the curl",
    "start": "1096080",
    "end": "1097760"
  },
  {
    "text": "dashboard that shows memory function",
    "start": "1097760",
    "end": "1099840"
  },
  {
    "text": "call density in curl ideally this plot",
    "start": "1099840",
    "end": "1102480"
  },
  {
    "text": "will keep falling over time that's crazy",
    "start": "1102480",
    "end": "1105520"
  },
  {
    "text": "hold on so let's see me stern copy total",
    "start": "1105520",
    "end": "1109200"
  },
  {
    "text": "count is a little pink dashed bar mem",
    "start": "1109200",
    "end": "1112160"
  },
  {
    "text": "copies so mem Oh oh sorry me copy so",
    "start": "1112160",
    "end": "1115280"
  },
  {
    "text": "these have actually gone up over time",
    "start": "1115280",
    "end": "1117039"
  },
  {
    "text": "they fell pretty significantly in 2024",
    "start": "1117039",
    "end": "1118799"
  },
  {
    "text": "which is interesting and they fell even",
    "start": "1118799",
    "end": "1120080"
  },
  {
    "text": "harder so these went up I imagine as the",
    "start": "1120080",
    "end": "1123120"
  },
  {
    "text": "code functionality just went up right",
    "start": "1123120",
    "end": "1124559"
  },
  {
    "text": "you as a code the code base oh it's per",
    "start": "1124559",
    "end": "1127440"
  },
  {
    "text": "it's per thousand lines interesting this",
    "start": "1127440",
    "end": "1130320"
  },
  {
    "text": "has gone up over time okay okay yeah",
    "start": "1130320",
    "end": "1132240"
  },
  {
    "text": "it's it's the amount of calls in the",
    "start": "1132240",
    "end": "1133919"
  },
  {
    "text": "codebase versus the density like how",
    "start": "1133919",
    "end": "1135840"
  },
  {
    "text": "much they exist in the codebase so that",
    "start": "1135840",
    "end": "1137520"
  },
  {
    "text": "you can call them multiple times but",
    "start": "1137520",
    "end": "1139840"
  },
  {
    "text": "they have to exist in less places right",
    "start": "1139840",
    "end": "1141840"
  },
  {
    "text": "so that the the API functions the helper",
    "start": "1141840",
    "end": "1144080"
  },
  {
    "text": "functions that they write are reducing",
    "start": "1144080",
    "end": "1145440"
  },
  {
    "text": "this this is pretty cool this is a cool",
    "start": "1145440",
    "end": "1147039"
  },
  {
    "text": "graph to see wow it can perhaps also be",
    "start": "1147039",
    "end": "1149440"
  },
  {
    "text": "added that we avoid superolous memory",
    "start": "1149440",
    "end": "1150880"
  },
  {
    "text": "allocations in particular in hot pads a",
    "start": "1150880",
    "end": "1152720"
  },
  {
    "text": "large download does not need any more",
    "start": "1152720",
    "end": "1154559"
  },
  {
    "text": "allocations than a small one yeah that",
    "start": "1154559",
    "end": "1156320"
  },
  {
    "text": "makes sense actually right because I",
    "start": "1156320",
    "end": "1157360"
  },
  {
    "text": "mean you can just reuse the buffer",
    "start": "1157360",
    "end": "1158720"
  },
  {
    "text": "you're going to write it out to disk so",
    "start": "1158720",
    "end": "1159840"
  },
  {
    "text": "like why would you need more allocations",
    "start": "1159840",
    "end": "1161440"
  },
  {
    "text": "you need a larger allocation or like",
    "start": "1161440",
    "end": "1162720"
  },
  {
    "text": "you're going to reuse it allocation but",
    "start": "1162720",
    "end": "1163919"
  },
  {
    "text": "you shouldn't you shouldn't have a loop",
    "start": "1163919",
    "end": "1165120"
  },
  {
    "text": "that calls Malak for double check",
    "start": "1165120",
    "end": "1166720"
  },
  {
    "text": "multiplications integer overflows is",
    "start": "1166720",
    "end": "1168480"
  },
  {
    "text": "another area for concern every",
    "start": "1168480",
    "end": "1169760"
  },
  {
    "text": "arithmetic operation done needs to be",
    "start": "1169760",
    "end": "1171760"
  },
  {
    "text": "done with certainty that it does not",
    "start": "1171760",
    "end": "1173200"
  },
  {
    "text": "overflow yep this is unfortunately still",
    "start": "1173200",
    "end": "1175600"
  },
  {
    "text": "mostly a manual labor left for human",
    "start": "1175600",
    "end": "1177679"
  },
  {
    "text": "reviews to detect 64-bit guaranteed in",
    "start": "1177679",
    "end": "1180640"
  },
  {
    "text": "early 23 we dropped support for building",
    "start": "1180640",
    "end": "1182559"
  },
  {
    "text": "curl on systems without functional",
    "start": "1182559",
    "end": "1184960"
  },
  {
    "text": "without a functional 64-bit integer type",
    "start": "1184960",
    "end": "1187120"
  },
  {
    "text": "yeah so using a larger integer like this",
    "start": "1187120",
    "end": "1189280"
  },
  {
    "text": "in theory does reduce the possibility or",
    "start": "1189280",
    "end": "1191600"
  },
  {
    "text": "the the chance I guess of integer",
    "start": "1191600",
    "end": "1193280"
  },
  {
    "text": "overflows you know it's not going to",
    "start": "1193280",
    "end": "1194400"
  },
  {
    "text": "like make them go away but the ability",
    "start": "1194400",
    "end": "1196000"
  },
  {
    "text": "for you to do actions that overflow a",
    "start": "1196000",
    "end": "1198080"
  },
  {
    "text": "64-bit in is like it's you need to do a",
    "start": "1198080",
    "end": "1200720"
  },
  {
    "text": "lot this simplifies a lot of code and",
    "start": "1200720",
    "end": "1202960"
  },
  {
    "text": "logic energy overflows are less likely",
    "start": "1202960",
    "end": "1204720"
  },
  {
    "text": "to trigger and there is no risk that",
    "start": "1204720",
    "end": "1206400"
  },
  {
    "text": "authors accidentally believe they do",
    "start": "1206400",
    "end": "1208520"
  },
  {
    "text": "64-bit arithmetic while it could end up",
    "start": "1208520",
    "end": "1211039"
  },
  {
    "text": "being 32-bit in some rare builds like",
    "start": "1211039",
    "end": "1213039"
  },
  {
    "text": "could happen in the past yeah okay",
    "start": "1213039",
    "end": "1215039"
  },
  {
    "text": "that's good overflows and mistakes can",
    "start": "1215039",
    "end": "1216559"
  },
  {
    "text": "still happen if using the wrong type of",
    "start": "1216559",
    "end": "1218880"
  },
  {
    "text": "course okay so they they to avoid issues",
    "start": "1218880",
    "end": "1221360"
  },
  {
    "text": "like this they are forcing builds to",
    "start": "1221360",
    "end": "1223440"
  },
  {
    "text": "depend on 64-bit integer types very",
    "start": "1223440",
    "end": "1225280"
  },
  {
    "text": "interesting maximum string length to",
    "start": "1225280",
    "end": "1227280"
  },
  {
    "text": "help us avoid mistakes on strings in",
    "start": "1227280",
    "end": "1228880"
  },
  {
    "text": "particular with integer overflows but",
    "start": "1228880",
    "end": "1230720"
  },
  {
    "text": "also with other logic we have a general",
    "start": "1230720",
    "end": "1232640"
  },
  {
    "text": "check of all string inputs to the",
    "start": "1232640",
    "end": "1234480"
  },
  {
    "text": "library they do not accept strings",
    "start": "1234480",
    "end": "1236320"
  },
  {
    "text": "longer than a set limit that is a great",
    "start": "1236320",
    "end": "1238080"
  },
  {
    "text": "choice so many bugs could have been",
    "start": "1238080",
    "end": "1240640"
  },
  {
    "text": "stopped by just saying hey by the way um",
    "start": "1240640",
    "end": "1243200"
  },
  {
    "text": "strings can only be 128 bits or 128",
    "start": "1243200",
    "end": "1246880"
  },
  {
    "text": "bytes rather or whatever like picking",
    "start": "1246880",
    "end": "1248320"
  },
  {
    "text": "some number as opposed to just like yeah",
    "start": "1248320",
    "end": "1251120"
  },
  {
    "text": "we'll do 1024 over here we'll do 69 over",
    "start": "1251120",
    "end": "1253679"
  },
  {
    "text": "here we'll do 32 over there just like",
    "start": "1253679",
    "end": "1255280"
  },
  {
    "text": "having some set like program max is a is",
    "start": "1255280",
    "end": "1257919"
  },
  {
    "text": "a great way to do this we deem that any",
    "start": "1257919",
    "end": "1259360"
  },
  {
    "text": "string set that is longer is either just",
    "start": "1259360",
    "end": "1261600"
  },
  {
    "text": "a blatant mistake or some kind of",
    "start": "1261600",
    "end": "1263200"
  },
  {
    "text": "attempt attack to trigger something",
    "start": "1263200",
    "end": "1265280"
  },
  {
    "text": "weird inside the library we return",
    "start": "1265280",
    "end": "1267520"
  },
  {
    "text": "errors on such calls this maximum limit",
    "start": "1267520",
    "end": "1270000"
  },
  {
    "text": "is right now 8 megabytes that's freaking",
    "start": "1270000",
    "end": "1272080"
  },
  {
    "text": "huge but we we might adjust this uh in",
    "start": "1272080",
    "end": "1274799"
  },
  {
    "text": "the future as the world in curl develop",
    "start": "1274799",
    "end": "1276640"
  },
  {
    "text": "okay that's that's a great way to do it",
    "start": "1276640",
    "end": "1278080"
  },
  {
    "text": "man keep master golden uh at no point in",
    "start": "1278080",
    "end": "1280880"
  },
  {
    "text": "time is it allowed to break master yeah",
    "start": "1280880",
    "end": "1283679"
  },
  {
    "text": "so this is like a a git flow principle",
    "start": "1283679",
    "end": "1285679"
  },
  {
    "text": "that he's adhering to but basically you",
    "start": "1285679",
    "end": "1287760"
  },
  {
    "text": "have branches in your git re repo right",
    "start": "1287760",
    "end": "1289840"
  },
  {
    "text": "and like typically you pick one that is",
    "start": "1289840",
    "end": "1291760"
  },
  {
    "text": "like the golden goose like this code is",
    "start": "1291760",
    "end": "1295280"
  },
  {
    "text": "perfect this code runs it is production",
    "start": "1295280",
    "end": "1298320"
  },
  {
    "text": "it has no bugs like code that goes into",
    "start": "1298320",
    "end": "1300480"
  },
  {
    "text": "in this case master has to be like",
    "start": "1300480",
    "end": "1303280"
  },
  {
    "text": "pristine and nothing no merges into",
    "start": "1303280",
    "end": "1305760"
  },
  {
    "text": "master can break master we only merge",
    "start": "1305760",
    "end": "1308799"
  },
  {
    "text": "code into master that we believe is",
    "start": "1308799",
    "end": "1310320"
  },
  {
    "text": "clean fine and runs perfect this still",
    "start": "1310320",
    "end": "1312880"
  },
  {
    "text": "fails at times but then we do our best",
    "start": "1312880",
    "end": "1314640"
  },
  {
    "text": "at addressing the situation as quickly",
    "start": "1314640",
    "end": "1316320"
  },
  {
    "text": "as possible love it always check for and",
    "start": "1316320",
    "end": "1318159"
  },
  {
    "text": "act on errors in curl we always check",
    "start": "1318159",
    "end": "1320480"
  },
  {
    "text": "for errors and we bail out without",
    "start": "1320480",
    "end": "1322240"
  },
  {
    "text": "leaking memory if when they happen",
    "start": "1322240",
    "end": "1324799"
  },
  {
    "text": "that's great yeah this includes memory",
    "start": "1324799",
    "end": "1326640"
  },
  {
    "text": "operations IO file operations and more",
    "start": "1326640",
    "end": "1329120"
  },
  {
    "text": "all calls yeah no that's uh that's",
    "start": "1329120",
    "end": "1331760"
  },
  {
    "text": "awesome so yeah tools like Valrind guys",
    "start": "1331760",
    "end": "1333360"
  },
  {
    "text": "I don't know if I have it installed here",
    "start": "1333360",
    "end": "1334559"
  },
  {
    "text": "but Valrind is a tool where basically it",
    "start": "1334559",
    "end": "1336480"
  },
  {
    "text": "hooks okay yeah it's mad that I'm in a",
    "start": "1336480",
    "end": "1338799"
  },
  {
    "text": "VM i have to do this outside of a VM um",
    "start": "1338799",
    "end": "1340960"
  },
  {
    "text": "but basically Valgrind is a tool that",
    "start": "1340960",
    "end": "1343039"
  },
  {
    "text": "you can check for memory leaks what it",
    "start": "1343039",
    "end": "1344720"
  },
  {
    "text": "does is it hooks the memory allocator it",
    "start": "1344720",
    "end": "1346640"
  },
  {
    "text": "hooks Malako it hooks real hooks free",
    "start": "1346640",
    "end": "1348640"
  },
  {
    "text": "and at the end of the program it says",
    "start": "1348640",
    "end": "1349840"
  },
  {
    "text": "like \"Hey you didn't free this chunk go",
    "start": "1349840",
    "end": "1351840"
  },
  {
    "text": "check your code out make sure that you",
    "start": "1351840",
    "end": "1353120"
  },
  {
    "text": "you don't do that anymore.\" Right so",
    "start": "1353120",
    "end": "1355200"
  },
  {
    "text": "having these checks where very",
    "start": "1355200",
    "end": "1356880"
  },
  {
    "text": "impressive that they handle all errors",
    "start": "1356880",
    "end": "1358640"
  },
  {
    "text": "and all calls without leaking any memory",
    "start": "1358640",
    "end": "1361039"
  },
  {
    "text": "is very very good some developers are",
    "start": "1361039",
    "end": "1363039"
  },
  {
    "text": "used to modern operating systems",
    "start": "1363039",
    "end": "1364080"
  },
  {
    "text": "basically not being able to return error",
    "start": "1364080",
    "end": "1366080"
  },
  {
    "text": "for some of those but curl runs in many",
    "start": "1366080",
    "end": "1367600"
  },
  {
    "text": "environments varying behaviors also a",
    "start": "1367600",
    "end": "1369919"
  },
  {
    "text": "system library cannot exit or abort on",
    "start": "1369919",
    "end": "1372400"
  },
  {
    "text": "errors and needs to let the application",
    "start": "1372400",
    "end": "1373840"
  },
  {
    "text": "take on that decision yep um APIs and",
    "start": "1373840",
    "end": "1377799"
  },
  {
    "text": "ABIS every function and interface that",
    "start": "1377799",
    "end": "1380000"
  },
  {
    "text": "is publicly accessible must never be",
    "start": "1380000",
    "end": "1381679"
  },
  {
    "text": "changed in a way that risks breaking the",
    "start": "1381679",
    "end": "1383600"
  },
  {
    "text": "API or the AI so these two are kind of",
    "start": "1383600",
    "end": "1386640"
  },
  {
    "text": "like synonymous but like for different",
    "start": "1386640",
    "end": "1388000"
  },
  {
    "text": "things an API is an application",
    "start": "1388000",
    "end": "1389840"
  },
  {
    "text": "programming interface and this one is an",
    "start": "1389840",
    "end": "1391840"
  },
  {
    "text": "application binary interface basically",
    "start": "1391840",
    "end": "1394159"
  },
  {
    "text": "the ABI is like the API into the kernel",
    "start": "1394159",
    "end": "1399039"
  },
  {
    "text": "right or into like the calling",
    "start": "1399039",
    "end": "1400480"
  },
  {
    "text": "convention for that CPU uh for this",
    "start": "1400480",
    "end": "1402799"
  },
  {
    "text": "reason and to make it easy to spot the",
    "start": "1402799",
    "end": "1404559"
  },
  {
    "text": "functions that need this extra",
    "start": "1404559",
    "end": "1405679"
  },
  {
    "text": "precautions we have a strict rule public",
    "start": "1405679",
    "end": "1407520"
  },
  {
    "text": "functions are prefixed with curl and no",
    "start": "1407520",
    "end": "1410080"
  },
  {
    "text": "other functions use that prefix oh it's",
    "start": "1410080",
    "end": "1412400"
  },
  {
    "text": "very interesting so they're giving like",
    "start": "1412400",
    "end": "1413760"
  },
  {
    "text": "an obvious way when you read the code to",
    "start": "1413760",
    "end": "1415600"
  },
  {
    "text": "know what functions are top level like",
    "start": "1415600",
    "end": "1418000"
  },
  {
    "text": "exposed to the user as opposed to",
    "start": "1418000",
    "end": "1419840"
  },
  {
    "text": "functions that are like lower level that",
    "start": "1419840",
    "end": "1421120"
  },
  {
    "text": "you you shouldn't touch very interesting",
    "start": "1421120",
    "end": "1423039"
  },
  {
    "text": "everyone can do it thanks to the process",
    "start": "1423039",
    "end": "1424720"
  },
  {
    "text": "of human reviewers plenty of automatic",
    "start": "1424720",
    "end": "1426559"
  },
  {
    "text": "tools and the elaborate and extensive uh",
    "start": "1426559",
    "end": "1428400"
  },
  {
    "text": "test suite everyone can attempt to write",
    "start": "1428400",
    "end": "1431039"
  },
  {
    "text": "curl code assuming you know C of course",
    "start": "1431039",
    "end": "1433600"
  },
  {
    "text": "you know you know you know what I'm",
    "start": "1433600",
    "end": "1434720"
  },
  {
    "text": "about to say uh the risk that something",
    "start": "1434720",
    "end": "1437280"
  },
  {
    "text": "bad would go in undetected is roughly",
    "start": "1437280",
    "end": "1439440"
  },
  {
    "text": "equal no matter what who no matter who",
    "start": "1439440",
    "end": "1441600"
  },
  {
    "text": "the code author is responsibility is",
    "start": "1441600",
    "end": "1444000"
  },
  {
    "text": "shared go ahead you can do it i love",
    "start": "1444000",
    "end": "1446000"
  },
  {
    "text": "this attitude i love this attitude i",
    "start": "1446000",
    "end": "1448320"
  },
  {
    "text": "love that basically he's created this",
    "start": "1448320",
    "end": "1450480"
  },
  {
    "text": "environment through his CI through his",
    "start": "1450480",
    "end": "1452320"
  },
  {
    "text": "static code checkers where if you want",
    "start": "1452320",
    "end": "1454080"
  },
  {
    "text": "to go right now you can go make a branch",
    "start": "1454080",
    "end": "1457360"
  },
  {
    "text": "in curl and you can try to add a feature",
    "start": "1457360",
    "end": "1459520"
  },
  {
    "text": "to curl you can try to contribute to the",
    "start": "1459520",
    "end": "1461440"
  },
  {
    "text": "co the curl codebase and it is totally",
    "start": "1461440",
    "end": "1464480"
  },
  {
    "text": "cool no issues you just have to pass all",
    "start": "1464480",
    "end": "1468240"
  },
  {
    "text": "these checks which is like very",
    "start": "1468240",
    "end": "1469600"
  },
  {
    "text": "reasonable by the way and then yeah once",
    "start": "1469600",
    "end": "1471840"
  },
  {
    "text": "if the CI passes and master looks good",
    "start": "1471840",
    "end": "1473600"
  },
  {
    "text": "you your code is is good to go this is a",
    "start": "1473600",
    "end": "1475520"
  },
  {
    "text": "very welcoming open- source mentality",
    "start": "1475520",
    "end": "1477679"
  },
  {
    "text": "ity i love this and it keeps the code",
    "start": "1477679",
    "end": "1479520"
  },
  {
    "text": "safe while allowing everyone to",
    "start": "1479520",
    "end": "1480960"
  },
  {
    "text": "contribute to it big fan of this guys",
    "start": "1480960",
    "end": "1482880"
  },
  {
    "text": "yeah go check out um Daniel Stenberg so",
    "start": "1482880",
    "end": "1485360"
  },
  {
    "text": "he is on YouTube i will link his YouTube",
    "start": "1485360",
    "end": "1487279"
  },
  {
    "text": "video in my videos description here cool",
    "start": "1487279",
    "end": "1489600"
  },
  {
    "text": "videos on the state of curl on writing",
    "start": "1489600",
    "end": "1491600"
  },
  {
    "text": "CC code and how to be just a good",
    "start": "1491600",
    "end": "1492799"
  },
  {
    "text": "programmer in general and then go go",
    "start": "1492799",
    "end": "1494640"
  },
  {
    "text": "check out curl man go take curl go fork",
    "start": "1494640",
    "end": "1496880"
  },
  {
    "text": "it go make your own branch go try to",
    "start": "1496880",
    "end": "1498400"
  },
  {
    "text": "make go add a contribution to curl go",
    "start": "1498400",
    "end": "1499919"
  },
  {
    "text": "look at some of the code maybe try to",
    "start": "1499919",
    "end": "1500880"
  },
  {
    "text": "fuzz curl take lib curl and throw AFL at",
    "start": "1500880",
    "end": "1503039"
  },
  {
    "text": "it and see if you can find a bug and",
    "start": "1503039",
    "end": "1504159"
  },
  {
    "text": "then help Daniel make the codebase even",
    "start": "1504159",
    "end": "1505679"
  },
  {
    "text": "safer anyway guys that's it for now uh",
    "start": "1505679",
    "end": "1507520"
  },
  {
    "text": "if you like videos like this do me a",
    "start": "1507520",
    "end": "1508960"
  },
  {
    "text": "favor leave a comment like the video and",
    "start": "1508960",
    "end": "1510640"
  },
  {
    "text": "subscribe and then shoot me an email if",
    "start": "1510640",
    "end": "1512720"
  },
  {
    "text": "you want to see something like this you",
    "start": "1512720",
    "end": "1514000"
  },
  {
    "text": "want me to look at a codebase if you",
    "start": "1514000",
    "end": "1515279"
  },
  {
    "text": "want me to read an article or talk about",
    "start": "1515279",
    "end": "1517200"
  },
  {
    "text": "something uh let me know what you want",
    "start": "1517200",
    "end": "1518880"
  },
  {
    "text": "to look for what you want to see on the",
    "start": "1518880",
    "end": "1520559"
  },
  {
    "text": "channel and we'll see you in the next",
    "start": "1520559",
    "end": "1522480"
  },
  {
    "text": "one thy beautiful",
    "start": "1522480",
    "end": "1525840"
  }
]