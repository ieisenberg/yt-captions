[
  {
    "text": "one of the hardest things for new",
    "start": "80",
    "end": "1599"
  },
  {
    "text": "programmers to learn is pointers whether",
    "start": "1599",
    "end": "4240"
  },
  {
    "text": "it's pointers by themselves pointers",
    "start": "4240",
    "end": "6240"
  },
  {
    "text": "that point to arrays or pointers that",
    "start": "6240",
    "end": "8320"
  },
  {
    "text": "point to pointers something about this",
    "start": "8320",
    "end": "10080"
  },
  {
    "text": "concept just drives people crazy and if",
    "start": "10080",
    "end": "13040"
  },
  {
    "text": "you're a new programmer well you're not",
    "start": "13040",
    "end": "14719"
  },
  {
    "text": "alone i was one of those people when i",
    "start": "14719",
    "end": "16480"
  },
  {
    "text": "learned c back in the day and like you i",
    "start": "16480",
    "end": "18880"
  },
  {
    "text": "was eager to understand",
    "start": "18880",
    "end": "20960"
  },
  {
    "text": "in this video i'll show you what a",
    "start": "20960",
    "end": "22960"
  },
  {
    "text": "pointer is so you can fully understand",
    "start": "22960",
    "end": "24640"
  },
  {
    "text": "how they work the syntax of pointers you",
    "start": "24640",
    "end": "27199"
  },
  {
    "text": "can easily read them and finally why",
    "start": "27199",
    "end": "29519"
  },
  {
    "text": "everyone cares so much about pointers",
    "start": "29519",
    "end": "31519"
  },
  {
    "text": "and what they're used for",
    "start": "31519",
    "end": "32960"
  },
  {
    "text": "before we start if you're new here hit",
    "start": "32960",
    "end": "34640"
  },
  {
    "text": "that subscribe button and while you're",
    "start": "34640",
    "end": "35920"
  },
  {
    "text": "at it leave a like i put out videos",
    "start": "35920",
    "end": "37680"
  },
  {
    "text": "demystifying topics like this and much",
    "start": "37680",
    "end": "40000"
  },
  {
    "text": "more on a weekly basis",
    "start": "40000",
    "end": "42640"
  },
  {
    "text": "what is a pointer the question that's",
    "start": "42640",
    "end": "44800"
  },
  {
    "text": "been asked since the beginning of time",
    "start": "44800",
    "end": "46559"
  },
  {
    "text": "well maybe not that long but computer",
    "start": "46559",
    "end": "48320"
  },
  {
    "text": "science students have been asking this",
    "start": "48320",
    "end": "50079"
  },
  {
    "text": "question for a while pointers are not",
    "start": "50079",
    "end": "52640"
  },
  {
    "text": "that complicated and let me show you why",
    "start": "52640",
    "end": "54800"
  },
  {
    "text": "to understand what a pointer is we need",
    "start": "54800",
    "end": "56800"
  },
  {
    "text": "to first understand how memory works so",
    "start": "56800",
    "end": "59039"
  },
  {
    "text": "here i've laid out an example of memory",
    "start": "59039",
    "end": "61280"
  },
  {
    "text": "memory in our example has two features",
    "start": "61280",
    "end": "63280"
  },
  {
    "text": "an address and a value",
    "start": "63280",
    "end": "65518"
  },
  {
    "text": "the address is the location of the",
    "start": "65519",
    "end": "67520"
  },
  {
    "text": "memory meaning where that memory lives",
    "start": "67520",
    "end": "70560"
  },
  {
    "text": "and the value of that memory is the data",
    "start": "70560",
    "end": "73280"
  },
  {
    "text": "stored at that location meaning what",
    "start": "73280",
    "end": "76240"
  },
  {
    "text": "memory lives there",
    "start": "76240",
    "end": "78400"
  },
  {
    "text": "so for example if i put a 4 here what",
    "start": "78400",
    "end": "81200"
  },
  {
    "text": "does that mean all that means is that",
    "start": "81200",
    "end": "83040"
  },
  {
    "text": "the value 4 lives at location hex one",
    "start": "83040",
    "end": "86240"
  },
  {
    "text": "thousand easy and the notation in c for",
    "start": "86240",
    "end": "88960"
  },
  {
    "text": "example may be int x equals four which",
    "start": "88960",
    "end": "91759"
  },
  {
    "text": "gets allocated to that memory on the",
    "start": "91759",
    "end": "93439"
  },
  {
    "text": "stack and now that number lives there",
    "start": "93439",
    "end": "96159"
  },
  {
    "text": "so what happens now if at another",
    "start": "96159",
    "end": "98400"
  },
  {
    "text": "location i put the number hex 1000 at",
    "start": "98400",
    "end": "102159"
  },
  {
    "text": "address hex 1004",
    "start": "102159",
    "end": "105040"
  },
  {
    "text": "i've just created a pointer you may be",
    "start": "105040",
    "end": "107680"
  },
  {
    "text": "thinking low level learning how is this",
    "start": "107680",
    "end": "109520"
  },
  {
    "text": "possible that's just a number at a",
    "start": "109520",
    "end": "112000"
  },
  {
    "text": "location well guys that's the secret a",
    "start": "112000",
    "end": "114799"
  },
  {
    "text": "pointer is just a value that happens to",
    "start": "114799",
    "end": "117680"
  },
  {
    "text": "be an address mind blown by setting the",
    "start": "117680",
    "end": "120880"
  },
  {
    "text": "value of one variable equal to the",
    "start": "120880",
    "end": "122960"
  },
  {
    "text": "address of another that variable now",
    "start": "122960",
    "end": "125600"
  },
  {
    "text": "points to the other",
    "start": "125600",
    "end": "127439"
  },
  {
    "text": "for new programmers though most of the",
    "start": "127439",
    "end": "129200"
  },
  {
    "text": "time that isn't as easy as it seems one",
    "start": "129200",
    "end": "132080"
  },
  {
    "text": "of the most common issues new",
    "start": "132080",
    "end": "133200"
  },
  {
    "text": "programmers have with pointers is the",
    "start": "133200",
    "end": "135120"
  },
  {
    "text": "syntax used to create them the",
    "start": "135120",
    "end": "137280"
  },
  {
    "text": "combination of stars and ampersands and",
    "start": "137280",
    "end": "139520"
  },
  {
    "text": "arrows and more stars creates a lot of",
    "start": "139520",
    "end": "141360"
  },
  {
    "text": "confusion so let's break this down using",
    "start": "141360",
    "end": "143760"
  },
  {
    "text": "our previous example",
    "start": "143760",
    "end": "145599"
  },
  {
    "text": "in our last example we made an integer x",
    "start": "145599",
    "end": "148560"
  },
  {
    "text": "whose value was 4 at location hex 1 000",
    "start": "148560",
    "end": "152480"
  },
  {
    "text": "after that we made a pointer that lived",
    "start": "152480",
    "end": "154800"
  },
  {
    "text": "at address hex 1004 whose value was hex",
    "start": "154800",
    "end": "158720"
  },
  {
    "text": "one thousand so how do we do that in c",
    "start": "158720",
    "end": "162160"
  },
  {
    "text": "we could do that using two lines of code",
    "start": "162160",
    "end": "164319"
  },
  {
    "text": "and i'll break them down part by part",
    "start": "164319",
    "end": "166640"
  },
  {
    "text": "the first line is int x equals four this",
    "start": "166640",
    "end": "170000"
  },
  {
    "text": "line is pretty straightforward the first",
    "start": "170000",
    "end": "172160"
  },
  {
    "text": "part integer is the type of the variable",
    "start": "172160",
    "end": "174879"
  },
  {
    "text": "which is four bytes wide and this will",
    "start": "174879",
    "end": "176560"
  },
  {
    "text": "matter later in the video",
    "start": "176560",
    "end": "178319"
  },
  {
    "text": "the second part is the name nothing",
    "start": "178319",
    "end": "180720"
  },
  {
    "text": "special here just the variable name x",
    "start": "180720",
    "end": "183440"
  },
  {
    "text": "and then after that we put an equal sign",
    "start": "183440",
    "end": "185760"
  },
  {
    "text": "which when describing c we can verbalize",
    "start": "185760",
    "end": "188159"
  },
  {
    "text": "the equal sign to is set to and then",
    "start": "188159",
    "end": "191120"
  },
  {
    "text": "finally the value 4. so the final",
    "start": "191120",
    "end": "193280"
  },
  {
    "text": "sentence we've come up with is integer",
    "start": "193280",
    "end": "195360"
  },
  {
    "text": "whose name is x is set to the value 4.",
    "start": "195360",
    "end": "198879"
  },
  {
    "text": "okay easy part over next is the hard",
    "start": "198879",
    "end": "201680"
  },
  {
    "text": "part to make a pointer to x like we did",
    "start": "201680",
    "end": "204159"
  },
  {
    "text": "in our example i would say the following",
    "start": "204159",
    "end": "206319"
  },
  {
    "text": "line of c",
    "start": "206319",
    "end": "207680"
  },
  {
    "text": "int star px is equal to ampersand x now",
    "start": "207680",
    "end": "211280"
  },
  {
    "text": "i know that sounds pretty crazy a little",
    "start": "211280",
    "end": "212720"
  },
  {
    "text": "scary let's break it down piece by piece",
    "start": "212720",
    "end": "216640"
  },
  {
    "text": "from left to right we can see the type",
    "start": "216640",
    "end": "218480"
  },
  {
    "text": "again starting with int ah but next we",
    "start": "218480",
    "end": "220879"
  },
  {
    "text": "see the dreaded asterisk what does that",
    "start": "220879",
    "end": "223440"
  },
  {
    "text": "mean",
    "start": "223440",
    "end": "224159"
  },
  {
    "text": "when an asterisk is placed next to a",
    "start": "224159",
    "end": "226400"
  },
  {
    "text": "type it modifies the type meaning that",
    "start": "226400",
    "end": "228720"
  },
  {
    "text": "our variable is now a pointer to an",
    "start": "228720",
    "end": "231599"
  },
  {
    "text": "integer so our variable here points to a",
    "start": "231599",
    "end": "234560"
  },
  {
    "text": "four byte value",
    "start": "234560",
    "end": "236319"
  },
  {
    "text": "next the variable's name which is px or",
    "start": "236319",
    "end": "240080"
  },
  {
    "text": "pointer to x you can name it whatever",
    "start": "240080",
    "end": "242400"
  },
  {
    "text": "you want but this is a good habit using",
    "start": "242400",
    "end": "244000"
  },
  {
    "text": "p to denote that it's a pointer and then",
    "start": "244000",
    "end": "246560"
  },
  {
    "text": "after that our equals sign which again",
    "start": "246560",
    "end": "248640"
  },
  {
    "text": "means is set to uh and then the next",
    "start": "248640",
    "end": "251280"
  },
  {
    "text": "dreaded character the ampersand whenever",
    "start": "251280",
    "end": "253840"
  },
  {
    "text": "you see an ampersand just think in your",
    "start": "253840",
    "end": "255840"
  },
  {
    "text": "head",
    "start": "255840",
    "end": "256639"
  },
  {
    "text": "the address of so this means the address",
    "start": "256639",
    "end": "259759"
  },
  {
    "text": "of x",
    "start": "259759",
    "end": "260959"
  },
  {
    "text": "our final sentence here is int pointer",
    "start": "260959",
    "end": "264160"
  },
  {
    "text": "px is set to",
    "start": "264160",
    "end": "266800"
  },
  {
    "text": "the address of x",
    "start": "266800",
    "end": "269759"
  },
  {
    "text": "so what does this do for us well now by",
    "start": "269759",
    "end": "272960"
  },
  {
    "text": "using the pointer we have a way of",
    "start": "272960",
    "end": "274880"
  },
  {
    "text": "accessing x by reference instead of by",
    "start": "274880",
    "end": "277840"
  },
  {
    "text": "value so for example if we wanted to",
    "start": "277840",
    "end": "280080"
  },
  {
    "text": "copy the value of x to a new variable",
    "start": "280080",
    "end": "283040"
  },
  {
    "text": "using that pointer we could do that",
    "start": "283040",
    "end": "284560"
  },
  {
    "text": "pretty easily with this new bit of code",
    "start": "284560",
    "end": "286800"
  },
  {
    "text": "we'll say that int y equals star px now",
    "start": "286800",
    "end": "291360"
  },
  {
    "text": "what is this code doing let's break it",
    "start": "291360",
    "end": "293040"
  },
  {
    "text": "down",
    "start": "293040",
    "end": "294240"
  },
  {
    "text": "again why just like x is a normal",
    "start": "294240",
    "end": "297199"
  },
  {
    "text": "integer so no pointers yet we say that y",
    "start": "297199",
    "end": "300639"
  },
  {
    "text": "is set to using that equal sign uh-oh",
    "start": "300639",
    "end": "303520"
  },
  {
    "text": "the asterisk again remember how last",
    "start": "303520",
    "end": "305600"
  },
  {
    "text": "time i said when we see an asterisk it's",
    "start": "305600",
    "end": "307600"
  },
  {
    "text": "used to modify a type if a type is near",
    "start": "307600",
    "end": "310400"
  },
  {
    "text": "it well here there is no type when it's",
    "start": "310400",
    "end": "313440"
  },
  {
    "text": "used alone this way the asterisk is a",
    "start": "313440",
    "end": "316160"
  },
  {
    "text": "referred to as a d reference the d",
    "start": "316160",
    "end": "318800"
  },
  {
    "text": "reference means go to the address",
    "start": "318800",
    "end": "321280"
  },
  {
    "text": "pointed to by the pointer and grab that",
    "start": "321280",
    "end": "323759"
  },
  {
    "text": "value so because px points to x the d",
    "start": "323759",
    "end": "327840"
  },
  {
    "text": "reference will go and grab that value",
    "start": "327840",
    "end": "330080"
  },
  {
    "text": "and it will set y equal to x",
    "start": "330080",
    "end": "333600"
  },
  {
    "text": "so when we're verbalizing c when you see",
    "start": "333600",
    "end": "335840"
  },
  {
    "text": "an asterisk by itself you can say the",
    "start": "335840",
    "end": "338639"
  },
  {
    "text": "thing pointed to by",
    "start": "338639",
    "end": "341120"
  },
  {
    "text": "this would mean that the final",
    "start": "341120",
    "end": "342400"
  },
  {
    "text": "verbalization of this line of c is",
    "start": "342400",
    "end": "345199"
  },
  {
    "text": "integer y is set to the thing pointed to",
    "start": "345199",
    "end": "349520"
  },
  {
    "text": "by p x",
    "start": "349520",
    "end": "351360"
  },
  {
    "text": "by doing this we can pass around x by",
    "start": "351360",
    "end": "353759"
  },
  {
    "text": "reference instead of value and why that",
    "start": "353759",
    "end": "356080"
  },
  {
    "text": "matters i'll explain in the next part of",
    "start": "356080",
    "end": "358000"
  },
  {
    "text": "the video the final concept that",
    "start": "358000",
    "end": "359759"
  },
  {
    "text": "confuses people the most when learning",
    "start": "359759",
    "end": "361120"
  },
  {
    "text": "about pointers is why does anyone use",
    "start": "361120",
    "end": "363680"
  },
  {
    "text": "them the syntax is confusing my programs",
    "start": "363680",
    "end": "366319"
  },
  {
    "text": "crash all the time when i use them why",
    "start": "366319",
    "end": "368240"
  },
  {
    "text": "does anyone bother well the answer is",
    "start": "368240",
    "end": "370880"
  },
  {
    "text": "because we have to",
    "start": "370880",
    "end": "372560"
  },
  {
    "text": "to avoid making code that is impossible",
    "start": "372560",
    "end": "374560"
  },
  {
    "text": "to read or unscalable we break down",
    "start": "374560",
    "end": "376960"
  },
  {
    "text": "functions based on the action that they",
    "start": "376960",
    "end": "378720"
  },
  {
    "text": "perform so here i have a small snippet",
    "start": "378720",
    "end": "381039"
  },
  {
    "text": "of c where i have a function that",
    "start": "381039",
    "end": "382880"
  },
  {
    "text": "updates the age of a person structure",
    "start": "382880",
    "end": "385360"
  },
  {
    "text": "the problem is that the structure i'm",
    "start": "385360",
    "end": "387360"
  },
  {
    "text": "editing is not in scope of the editing",
    "start": "387360",
    "end": "390080"
  },
  {
    "text": "function to get around this we passed",
    "start": "390080",
    "end": "392560"
  },
  {
    "text": "the struct by reference so that now the",
    "start": "392560",
    "end": "395199"
  },
  {
    "text": "pointer to the structure is in scope of",
    "start": "395199",
    "end": "398000"
  },
  {
    "text": "update struct and can therefore be",
    "start": "398000",
    "end": "400160"
  },
  {
    "text": "edited using pointers like this keeps",
    "start": "400160",
    "end": "402400"
  },
  {
    "text": "our code clean and understandable while",
    "start": "402400",
    "end": "404319"
  },
  {
    "text": "reducing the amount of space that we use",
    "start": "404319",
    "end": "406319"
  },
  {
    "text": "by not copying",
    "start": "406319",
    "end": "409199"
  },
  {
    "text": "another reason that pointers are",
    "start": "409199",
    "end": "410560"
  },
  {
    "text": "inevitable when coding in c is the idea",
    "start": "410560",
    "end": "412800"
  },
  {
    "text": "of using static versus dynamic memory",
    "start": "412800",
    "end": "415199"
  },
  {
    "text": "allocation static allocation is",
    "start": "415199",
    "end": "417280"
  },
  {
    "text": "typically a variable that goes onto the",
    "start": "417280",
    "end": "419280"
  },
  {
    "text": "stack a place that is always in scope",
    "start": "419280",
    "end": "421520"
  },
  {
    "text": "for the function that is running it",
    "start": "421520",
    "end": "423599"
  },
  {
    "text": "however when you're using dynamic",
    "start": "423599",
    "end": "425919"
  },
  {
    "text": "allocations that come from the heap",
    "start": "425919",
    "end": "427599"
  },
  {
    "text": "through malik or s-break or other kinds",
    "start": "427599",
    "end": "429919"
  },
  {
    "text": "of memory allocators you are going to",
    "start": "429919",
    "end": "432000"
  },
  {
    "text": "get a pointer to memory that is out of",
    "start": "432000",
    "end": "434720"
  },
  {
    "text": "scope if you ever want to be able to use",
    "start": "434720",
    "end": "437360"
  },
  {
    "text": "this kind of memory you need to know how",
    "start": "437360",
    "end": "439360"
  },
  {
    "text": "pointers work",
    "start": "439360",
    "end": "441360"
  },
  {
    "text": "the primary difference between dynamic",
    "start": "441360",
    "end": "443280"
  },
  {
    "text": "and static allocations that static",
    "start": "443280",
    "end": "445120"
  },
  {
    "text": "allocations are things that are known to",
    "start": "445120",
    "end": "447280"
  },
  {
    "text": "have a fixed size at compile time",
    "start": "447280",
    "end": "449680"
  },
  {
    "text": "whereas dynamic allocations can be",
    "start": "449680",
    "end": "452080"
  },
  {
    "text": "changed in size as the program runs here",
    "start": "452080",
    "end": "454960"
  },
  {
    "text": "you see i allocate a string of 100 bytes",
    "start": "454960",
    "end": "457280"
  },
  {
    "text": "to be pulled from the heap but that 100",
    "start": "457280",
    "end": "459360"
  },
  {
    "text": "bytes could have come from a user input",
    "start": "459360",
    "end": "462000"
  },
  {
    "text": "or something else",
    "start": "462000",
    "end": "464720"
  },
  {
    "text": "if you're having a hard time with c",
    "start": "464720",
    "end": "466240"
  },
  {
    "text": "don't be discouraged pointers do take a",
    "start": "466240",
    "end": "468080"
  },
  {
    "text": "minute to master but once you get them",
    "start": "468080",
    "end": "469919"
  },
  {
    "text": "you'll know it and you'll feel like a",
    "start": "469919",
    "end": "471199"
  },
  {
    "text": "real low level wizard when you do guys i",
    "start": "471199",
    "end": "473520"
  },
  {
    "text": "had a fun time making this video if you",
    "start": "473520",
    "end": "474960"
  },
  {
    "text": "enjoyed this do me a favor hit like hit",
    "start": "474960",
    "end": "476639"
  },
  {
    "text": "subscribe and i'll see you next week",
    "start": "476639",
    "end": "478560"
  },
  {
    "text": "take care",
    "start": "478560",
    "end": "481720"
  }
]