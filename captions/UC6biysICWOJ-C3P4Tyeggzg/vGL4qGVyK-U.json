[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "hey guys welcome back to another low",
    "start": "719",
    "end": "2320"
  },
  {
    "text": "level learning tutorial uh today we're",
    "start": "2320",
    "end": "4160"
  },
  {
    "text": "going to be going over",
    "start": "4160",
    "end": "5200"
  },
  {
    "text": "memory operations in x86 assembly um by",
    "start": "5200",
    "end": "7680"
  },
  {
    "text": "the end of this you should be able to do",
    "start": "7680",
    "end": "9440"
  },
  {
    "text": "the following",
    "start": "9440",
    "end": "10719"
  },
  {
    "text": "push a string onto the stack and write",
    "start": "10719",
    "end": "12960"
  },
  {
    "text": "it the standard out",
    "start": "12960",
    "end": "14000"
  },
  {
    "text": "and then write a string to the stack",
    "start": "14000",
    "end": "15920"
  },
  {
    "text": "using store operations and write the",
    "start": "15920",
    "end": "17680"
  },
  {
    "text": "standard out as well",
    "start": "17680",
    "end": "18800"
  },
  {
    "text": "um if you didn't watch my previous video",
    "start": "18800",
    "end": "20880"
  },
  {
    "text": "it's going to be a little over your",
    "start": "20880",
    "end": "22000"
  },
  {
    "text": "heads i would go check that video out",
    "start": "22000",
    "end": "23439"
  },
  {
    "text": "i'll drop a link in the description",
    "start": "23439",
    "end": "25279"
  },
  {
    "text": "uh that's where we learn how to move",
    "start": "25279",
    "end": "27199"
  },
  {
    "text": "data in and out of registers and invoke",
    "start": "27199",
    "end": "29439"
  },
  {
    "text": "a system call",
    "start": "29439",
    "end": "30480"
  },
  {
    "text": "to get the kernel to perform a function",
    "start": "30480",
    "end": "32320"
  },
  {
    "text": "for us",
    "start": "32320",
    "end": "34000"
  },
  {
    "text": "so to go into this tutorial we need to",
    "start": "34000",
    "end": "36640"
  },
  {
    "text": "first talk about",
    "start": "36640",
    "end": "37440"
  },
  {
    "text": "memory in uh in assembly right in a",
    "start": "37440",
    "end": "40719"
  },
  {
    "start": "40000",
    "end": "170000"
  },
  {
    "text": "program",
    "start": "40719",
    "end": "41520"
  },
  {
    "text": "typically you have this memory structure",
    "start": "41520",
    "end": "43280"
  },
  {
    "text": "that's referred to as the stack",
    "start": "43280",
    "end": "45440"
  },
  {
    "text": "and you can think of it as a stack of",
    "start": "45440",
    "end": "47920"
  },
  {
    "text": "plates",
    "start": "47920",
    "end": "48559"
  },
  {
    "text": "right and that represents the memory",
    "start": "48559",
    "end": "51039"
  },
  {
    "text": "that you have access to when you're",
    "start": "51039",
    "end": "52399"
  },
  {
    "text": "writing your program",
    "start": "52399",
    "end": "53600"
  },
  {
    "text": "and that memory lives in ram random",
    "start": "53600",
    "end": "55760"
  },
  {
    "text": "access memory um in my diagram here",
    "start": "55760",
    "end": "59120"
  },
  {
    "text": "so this is going to be a little much but",
    "start": "59120",
    "end": "61680"
  },
  {
    "text": "just understand that",
    "start": "61680",
    "end": "63280"
  },
  {
    "text": "the data grows down positively",
    "start": "63280",
    "end": "66960"
  },
  {
    "text": "right so as esp goes up as we",
    "start": "66960",
    "end": "70320"
  },
  {
    "text": "push onto the top of the stack esp gets",
    "start": "70320",
    "end": "74000"
  },
  {
    "text": "decremented",
    "start": "74000",
    "end": "74960"
  },
  {
    "text": "and the width of the stack is the",
    "start": "74960",
    "end": "78159"
  },
  {
    "text": "word size of the architecture right so",
    "start": "78159",
    "end": "80960"
  },
  {
    "text": "in this case we're doing 32-bit",
    "start": "80960",
    "end": "82960"
  },
  {
    "text": "intel right so the word size for the",
    "start": "82960",
    "end": "85600"
  },
  {
    "text": "stack",
    "start": "85600",
    "end": "86400"
  },
  {
    "text": "is 32 bits or four bytes right",
    "start": "86400",
    "end": "89680"
  },
  {
    "text": "so for example the value",
    "start": "89680",
    "end": "93520"
  },
  {
    "text": "one two three four five six seven eight",
    "start": "93520",
    "end": "96159"
  },
  {
    "text": "in hex which is a four byte value",
    "start": "96159",
    "end": "98640"
  },
  {
    "text": "can live on the stack as a single word",
    "start": "98640",
    "end": "101200"
  },
  {
    "text": "right",
    "start": "101200",
    "end": "102240"
  },
  {
    "text": "so when your program starts you have esp",
    "start": "102240",
    "end": "106159"
  },
  {
    "text": "which points to the top of the stack",
    "start": "106159",
    "end": "108079"
  },
  {
    "text": "right and as you push",
    "start": "108079",
    "end": "109759"
  },
  {
    "text": "you you execute the push instruction",
    "start": "109759",
    "end": "113119"
  },
  {
    "text": "esp gets lower by four every time the",
    "start": "113119",
    "end": "116159"
  },
  {
    "text": "stack gets taller and your your data",
    "start": "116159",
    "end": "118719"
  },
  {
    "text": "goes onto the stack so what we're going",
    "start": "118719",
    "end": "122240"
  },
  {
    "text": "to do",
    "start": "122240",
    "end": "122640"
  },
  {
    "text": "is we're going to write a little program",
    "start": "122640",
    "end": "124560"
  },
  {
    "text": "that pushes something",
    "start": "124560",
    "end": "126159"
  },
  {
    "text": "onto the stack and we're going to print",
    "start": "126159",
    "end": "128640"
  },
  {
    "text": "it out to the screen",
    "start": "128640",
    "end": "129759"
  },
  {
    "text": "right this is going to be our first",
    "start": "129759",
    "end": "131920"
  },
  {
    "text": "exposure to writing data to the stack",
    "start": "131920",
    "end": "134480"
  },
  {
    "text": "so let's execute the push operation",
    "start": "134480",
    "end": "137280"
  },
  {
    "text": "right",
    "start": "137280",
    "end": "138080"
  },
  {
    "text": "so push and we're going to use this",
    "start": "138080",
    "end": "140239"
  },
  {
    "text": "value and i'll explain why we use this",
    "start": "140239",
    "end": "141680"
  },
  {
    "text": "value",
    "start": "141680",
    "end": "142000"
  },
  {
    "text": "in a little bit zero zero four three",
    "start": "142000",
    "end": "145200"
  },
  {
    "text": "four two four one right so after we",
    "start": "145200",
    "end": "148000"
  },
  {
    "text": "execute that value",
    "start": "148000",
    "end": "149599"
  },
  {
    "text": "the top of the stack is going to equal",
    "start": "149599",
    "end": "152080"
  },
  {
    "text": "it's going to have",
    "start": "152080",
    "end": "153760"
  },
  {
    "text": "this value in it right it's going to",
    "start": "153760",
    "end": "155440"
  },
  {
    "text": "have 0 0",
    "start": "155440",
    "end": "157200"
  },
  {
    "text": "3 4 3 4 2 4 1. awesome",
    "start": "157200",
    "end": "161440"
  },
  {
    "text": "you may be asking me why why do we use",
    "start": "161440",
    "end": "164400"
  },
  {
    "text": "that value",
    "start": "164400",
    "end": "165920"
  },
  {
    "text": "that value is important because that",
    "start": "165920",
    "end": "168640"
  },
  {
    "text": "value is important because it actually",
    "start": "168640",
    "end": "170640"
  },
  {
    "start": "170000",
    "end": "285000"
  },
  {
    "text": "equates to the string",
    "start": "170640",
    "end": "172480"
  },
  {
    "text": "a b c you may be asking how does a",
    "start": "172480",
    "end": "176080"
  },
  {
    "text": "number",
    "start": "176080",
    "end": "176800"
  },
  {
    "text": "become a string okay well in computers",
    "start": "176800",
    "end": "180400"
  },
  {
    "text": "all data can be interpreted",
    "start": "180400",
    "end": "183599"
  },
  {
    "text": "in different ways right so an integer",
    "start": "183599",
    "end": "186239"
  },
  {
    "text": "can also be interpreted as a string",
    "start": "186239",
    "end": "188640"
  },
  {
    "text": "if the values are ascii printable right",
    "start": "188640",
    "end": "191200"
  },
  {
    "text": "so the value",
    "start": "191200",
    "end": "192239"
  },
  {
    "text": "0 0 4 3 4 2 4",
    "start": "192239",
    "end": "195440"
  },
  {
    "text": "1 in little endian is actually",
    "start": "195440",
    "end": "198959"
  },
  {
    "text": "a b c nullbyte i said little endian what",
    "start": "198959",
    "end": "202239"
  },
  {
    "text": "does that mean",
    "start": "202239",
    "end": "203200"
  },
  {
    "text": "um so in intel intel is a little endian",
    "start": "203200",
    "end": "206239"
  },
  {
    "text": "architecture right",
    "start": "206239",
    "end": "207519"
  },
  {
    "text": "little endian means that when you're",
    "start": "207519",
    "end": "209200"
  },
  {
    "text": "doing a memory store",
    "start": "209200",
    "end": "210799"
  },
  {
    "text": "the least significant bit or the lsb or",
    "start": "210799",
    "end": "213840"
  },
  {
    "text": "sorry the least significant byte or the",
    "start": "213840",
    "end": "216319"
  },
  {
    "text": "lsb",
    "start": "216319",
    "end": "217360"
  },
  {
    "text": "gets stored first so 41",
    "start": "217360",
    "end": "221120"
  },
  {
    "text": "is a in hex so that gets put onto the",
    "start": "221120",
    "end": "223440"
  },
  {
    "text": "stack first",
    "start": "223440",
    "end": "224720"
  },
  {
    "text": "42 is the next most significant byte",
    "start": "224720",
    "end": "227840"
  },
  {
    "text": "that gets put on the stack next and so",
    "start": "227840",
    "end": "229440"
  },
  {
    "text": "on and so forth so",
    "start": "229440",
    "end": "231280"
  },
  {
    "text": "the integer ox00434241",
    "start": "231280",
    "end": "235760"
  },
  {
    "text": "is actually the string a b c null byte",
    "start": "235760",
    "end": "239680"
  },
  {
    "text": "cool so what have we done we've pushed",
    "start": "239680",
    "end": "242159"
  },
  {
    "text": "that value onto the stack",
    "start": "242159",
    "end": "243840"
  },
  {
    "text": "next we need to invoke the system call",
    "start": "243840",
    "end": "246480"
  },
  {
    "text": "right so if this value lives on the",
    "start": "246480",
    "end": "248080"
  },
  {
    "text": "stack",
    "start": "248080",
    "end": "249280"
  },
  {
    "text": "we need to set up our system call so",
    "start": "249280",
    "end": "251360"
  },
  {
    "text": "what was the",
    "start": "251360",
    "end": "252959"
  },
  {
    "text": "syscall number versus call right if you",
    "start": "252959",
    "end": "254799"
  },
  {
    "text": "watched my previous tutorial you",
    "start": "254799",
    "end": "256000"
  },
  {
    "text": "remember that syscall",
    "start": "256000",
    "end": "257120"
  },
  {
    "text": "right is system called four",
    "start": "257120",
    "end": "260560"
  },
  {
    "text": "next we need to make ebx equal to the",
    "start": "260560",
    "end": "263040"
  },
  {
    "text": "file descriptor we want to write the",
    "start": "263040",
    "end": "264479"
  },
  {
    "text": "data out to",
    "start": "264479",
    "end": "265520"
  },
  {
    "text": "if you watched my previous tutorial",
    "start": "265520",
    "end": "266720"
  },
  {
    "text": "you'll know that ebx needs to be 1",
    "start": "266720",
    "end": "268560"
  },
  {
    "text": "because 1 is standard out",
    "start": "268560",
    "end": "272880"
  },
  {
    "text": "and now we need to make ecx equal the",
    "start": "272960",
    "end": "276160"
  },
  {
    "text": "pointer to the thing",
    "start": "276160",
    "end": "277919"
  },
  {
    "text": "that we want to print right so if we",
    "start": "277919",
    "end": "281360"
  },
  {
    "text": "pushed our string",
    "start": "281360",
    "end": "283120"
  },
  {
    "text": "what is the new pointer that exists that",
    "start": "283120",
    "end": "285520"
  },
  {
    "text": "already points directly to our string",
    "start": "285520",
    "end": "287440"
  },
  {
    "text": "well we talked about this before right",
    "start": "287440",
    "end": "289199"
  },
  {
    "text": "if we look at",
    "start": "289199",
    "end": "291520"
  },
  {
    "text": "this operation if we've performed a push",
    "start": "291520",
    "end": "294960"
  },
  {
    "text": "esp will point to the top of the stack",
    "start": "294960",
    "end": "297440"
  },
  {
    "text": "where our new push data lives",
    "start": "297440",
    "end": "299600"
  },
  {
    "text": "so after we execute that push",
    "start": "299600",
    "end": "301039"
  },
  {
    "text": "instruction esp",
    "start": "301039",
    "end": "302720"
  },
  {
    "text": "will point to it so if esp",
    "start": "302720",
    "end": "306639"
  },
  {
    "text": "points to the top of the stack we can",
    "start": "306639",
    "end": "308560"
  },
  {
    "text": "then move",
    "start": "308560",
    "end": "310960"
  },
  {
    "text": "esp into ecx so now both",
    "start": "310960",
    "end": "314080"
  },
  {
    "text": "esp and ecx point to the string we want",
    "start": "314080",
    "end": "317919"
  },
  {
    "text": "to print out",
    "start": "317919",
    "end": "318800"
  },
  {
    "text": "and then finally we set edx equal to the",
    "start": "318800",
    "end": "321440"
  },
  {
    "text": "number of bytes we want to print",
    "start": "321440",
    "end": "323120"
  },
  {
    "text": "and that is going to be three we can do",
    "start": "323120",
    "end": "325199"
  },
  {
    "text": "three or four i like",
    "start": "325199",
    "end": "326400"
  },
  {
    "text": "three currently and then finally we",
    "start": "326400",
    "end": "329360"
  },
  {
    "text": "invoke the syscall",
    "start": "329360",
    "end": "330800"
  },
  {
    "text": "right um and i made a little make file",
    "start": "330800",
    "end": "333919"
  },
  {
    "text": "that makes things easier for you",
    "start": "333919",
    "end": "335919"
  },
  {
    "text": "basically you write you",
    "start": "335919",
    "end": "337280"
  },
  {
    "text": "type make and it runs the instructions",
    "start": "337280",
    "end": "340720"
  },
  {
    "text": "i told you about in the previous",
    "start": "340720",
    "end": "342240"
  },
  {
    "text": "tutorial",
    "start": "342240",
    "end": "344560"
  },
  {
    "text": "so if we run make we see the makefile is",
    "start": "344560",
    "end": "348160"
  },
  {
    "text": "putting our program together for us and",
    "start": "348160",
    "end": "350240"
  },
  {
    "text": "then it runs the program and we do",
    "start": "350240",
    "end": "352000"
  },
  {
    "text": "print abc to the screen right um to make",
    "start": "352000",
    "end": "354880"
  },
  {
    "text": "this a little prettier we're going to",
    "start": "354880",
    "end": "356080"
  },
  {
    "text": "change our",
    "start": "356080",
    "end": "357120"
  },
  {
    "text": "null byte and our code to ox0a",
    "start": "357120",
    "end": "361120"
  },
  {
    "text": "that's the new line character or the",
    "start": "361120",
    "end": "363120"
  },
  {
    "text": "character that happens when you press",
    "start": "363120",
    "end": "364560"
  },
  {
    "text": "enter it'll just make our our flow",
    "start": "364560",
    "end": "366720"
  },
  {
    "text": "a little cleaner so we need to make um",
    "start": "366720",
    "end": "369039"
  },
  {
    "text": "the null byte zero",
    "start": "369039",
    "end": "370080"
  },
  {
    "text": "a and we need to make edx equal to four",
    "start": "370080",
    "end": "372560"
  },
  {
    "text": "to actually print that zero a so we type",
    "start": "372560",
    "end": "374479"
  },
  {
    "text": "make",
    "start": "374479",
    "end": "375280"
  },
  {
    "text": "again boom abc cool so what have we done",
    "start": "375280",
    "end": "378160"
  },
  {
    "text": "we pushed",
    "start": "378160",
    "end": "379039"
  },
  {
    "text": "a string to the stack esp after that",
    "start": "379039",
    "end": "381919"
  },
  {
    "text": "push instruction",
    "start": "381919",
    "end": "383120"
  },
  {
    "text": "pointed to our string then we made",
    "start": "383120",
    "end": "386639"
  },
  {
    "text": "ecx which is the register that needs to",
    "start": "386639",
    "end": "389199"
  },
  {
    "text": "contain",
    "start": "389199",
    "end": "390080"
  },
  {
    "text": "the pointer to our string come from esp",
    "start": "390080",
    "end": "393280"
  },
  {
    "text": "which already points there",
    "start": "393280",
    "end": "394560"
  },
  {
    "text": "and then we called the syscall ex ecx",
    "start": "394560",
    "end": "397840"
  },
  {
    "text": "pointed to our string and we printed it",
    "start": "397840",
    "end": "399199"
  },
  {
    "text": "to the screen",
    "start": "399199",
    "end": "400160"
  },
  {
    "text": "awesome that's one way of doing memory",
    "start": "400160",
    "end": "402000"
  },
  {
    "text": "operations in intel right we can push",
    "start": "402000",
    "end": "403840"
  },
  {
    "text": "things",
    "start": "403840",
    "end": "404560"
  },
  {
    "text": "to this uh to the stack another way is",
    "start": "404560",
    "end": "407680"
  },
  {
    "text": "doing",
    "start": "407680",
    "end": "408080"
  },
  {
    "text": "a direct memory write so instead of a",
    "start": "408080",
    "end": "410560"
  },
  {
    "text": "push which",
    "start": "410560",
    "end": "411520"
  },
  {
    "text": "pushes get kind of messy right because",
    "start": "411520",
    "end": "413039"
  },
  {
    "text": "what did i say every time you execute a",
    "start": "413039",
    "end": "414960"
  },
  {
    "text": "push instruction",
    "start": "414960",
    "end": "416080"
  },
  {
    "text": "esp is getting less and less kind of",
    "start": "416080",
    "end": "418319"
  },
  {
    "text": "without you knowing about it if you",
    "start": "418319",
    "end": "419360"
  },
  {
    "text": "don't keep track of that",
    "start": "419360",
    "end": "420560"
  },
  {
    "text": "that can get pretty messy pretty quick",
    "start": "420560",
    "end": "422960"
  },
  {
    "text": "so another way we can do this",
    "start": "422960",
    "end": "425039"
  },
  {
    "text": "this operation is instead of",
    "start": "425039",
    "end": "429120"
  },
  {
    "text": "pushing the data there we can",
    "start": "429120",
    "end": "432720"
  },
  {
    "text": "do a memory move so normally",
    "start": "432720",
    "end": "436400"
  },
  {
    "text": "we've been doing moves like this right",
    "start": "436400",
    "end": "438240"
  },
  {
    "text": "where like eax",
    "start": "438240",
    "end": "439759"
  },
  {
    "text": "becomes four well there's a new way of",
    "start": "439759",
    "end": "442800"
  },
  {
    "text": "doing moves where instead of",
    "start": "442800",
    "end": "444400"
  },
  {
    "text": "moving to esp we wrap it in these",
    "start": "444400",
    "end": "447919"
  },
  {
    "text": "hard parentheses and what that actually",
    "start": "447919",
    "end": "449919"
  },
  {
    "text": "is saying is that",
    "start": "449919",
    "end": "451520"
  },
  {
    "text": "don't move into esp the register",
    "start": "451520",
    "end": "454960"
  },
  {
    "text": "move it to the thing that esp points to",
    "start": "454960",
    "end": "458720"
  },
  {
    "text": "right so instead of treating esp as a",
    "start": "458720",
    "end": "461599"
  },
  {
    "text": "register itself",
    "start": "461599",
    "end": "462720"
  },
  {
    "text": "we treat it as a pointer and we move",
    "start": "462720",
    "end": "465360"
  },
  {
    "text": "something",
    "start": "465360",
    "end": "465919"
  },
  {
    "text": "to where that points so and we're going",
    "start": "465919",
    "end": "469039"
  },
  {
    "text": "to move",
    "start": "469039",
    "end": "469680"
  },
  {
    "text": "exactly what we said before move 0a",
    "start": "469680",
    "end": "473479"
  },
  {
    "text": "434241 which is the string abc",
    "start": "473479",
    "end": "476639"
  },
  {
    "text": "newline little endian right so",
    "start": "476639",
    "end": "479680"
  },
  {
    "text": "we're going to compile this we're",
    "start": "479680",
    "end": "480800"
  },
  {
    "text": "actually probably going to get an error",
    "start": "480800",
    "end": "484240"
  },
  {
    "text": "right so the error here is",
    "start": "484240",
    "end": "487759"
  },
  {
    "text": "ambiguous opera operand size for move",
    "start": "487759",
    "end": "491440"
  },
  {
    "text": "so what this is saying is that we're",
    "start": "491440",
    "end": "494479"
  },
  {
    "text": "trying to move something",
    "start": "494479",
    "end": "496000"
  },
  {
    "text": "where esp points to but the assembler",
    "start": "496000",
    "end": "499120"
  },
  {
    "text": "doesn't know",
    "start": "499120",
    "end": "500639"
  },
  {
    "text": "how big the thing is we all know how big",
    "start": "500639",
    "end": "503120"
  },
  {
    "text": "the thing is",
    "start": "503120",
    "end": "503680"
  },
  {
    "text": "the thing is four bytes but when it",
    "start": "503680",
    "end": "505919"
  },
  {
    "text": "actually um",
    "start": "505919",
    "end": "507120"
  },
  {
    "text": "assembles the instruction it needs to",
    "start": "507120",
    "end": "509520"
  },
  {
    "text": "know",
    "start": "509520",
    "end": "510160"
  },
  {
    "text": "the max width of the operation and we're",
    "start": "510160",
    "end": "513440"
  },
  {
    "text": "not specifying that",
    "start": "513440",
    "end": "514719"
  },
  {
    "text": "so the way you specify that in intel",
    "start": "514719",
    "end": "517039"
  },
  {
    "text": "assembly intel syntax",
    "start": "517039",
    "end": "519200"
  },
  {
    "text": "is going to be by adding move",
    "start": "519200",
    "end": "522479"
  },
  {
    "text": "d word pointer so what that's actually",
    "start": "522479",
    "end": "525680"
  },
  {
    "text": "telling the assembler",
    "start": "525680",
    "end": "526880"
  },
  {
    "text": "is to treat esp the pointer",
    "start": "526880",
    "end": "531120"
  },
  {
    "start": "528000",
    "end": "748000"
  },
  {
    "text": "as a pointer to a d word",
    "start": "531120",
    "end": "534160"
  },
  {
    "text": "type and in assembly a d word because of",
    "start": "534160",
    "end": "537519"
  },
  {
    "text": "historical reasons",
    "start": "537519",
    "end": "538800"
  },
  {
    "text": "ends up meeting a four byte wide",
    "start": "538800",
    "end": "542399"
  },
  {
    "text": "um memory structure right so what we're",
    "start": "542399",
    "end": "545200"
  },
  {
    "text": "saying",
    "start": "545200",
    "end": "545600"
  },
  {
    "text": "is move to",
    "start": "545600",
    "end": "549360"
  },
  {
    "text": "the thing pointed to by esp",
    "start": "549360",
    "end": "552560"
  },
  {
    "text": "of size d word this value which is a",
    "start": "552560",
    "end": "556080"
  },
  {
    "text": "string",
    "start": "556080",
    "end": "556720"
  },
  {
    "text": "a b c new line",
    "start": "556720",
    "end": "560880"
  },
  {
    "text": "then the rest for operation right move",
    "start": "560880",
    "end": "562880"
  },
  {
    "text": "into eax",
    "start": "562880",
    "end": "564080"
  },
  {
    "text": "the value 4 for the right syscall move",
    "start": "564080",
    "end": "566480"
  },
  {
    "text": "into ebx",
    "start": "566480",
    "end": "567519"
  },
  {
    "text": "1 for standard out esp points to our",
    "start": "567519",
    "end": "570880"
  },
  {
    "text": "string",
    "start": "570880",
    "end": "571600"
  },
  {
    "text": "so move that into ecx move into edx the",
    "start": "571600",
    "end": "574800"
  },
  {
    "text": "length of the string",
    "start": "574800",
    "end": "576000"
  },
  {
    "text": "and invoke the syscall we type make",
    "start": "576000",
    "end": "579920"
  },
  {
    "text": "oh i didn't actually save",
    "start": "581200",
    "end": "584399"
  },
  {
    "text": "and type make cool and we get abc to the",
    "start": "584640",
    "end": "587600"
  },
  {
    "text": "screen",
    "start": "587600",
    "end": "588800"
  },
  {
    "text": "anyway guys i hope that made sense to",
    "start": "588800",
    "end": "590240"
  },
  {
    "text": "you thanks for watching drop a like",
    "start": "590240",
    "end": "591760"
  },
  {
    "text": "subscribe i drop content like this all",
    "start": "591760",
    "end": "593440"
  },
  {
    "text": "the time and uh",
    "start": "593440",
    "end": "594480"
  },
  {
    "text": "leave a comment on what you want to",
    "start": "594480",
    "end": "596480"
  },
  {
    "text": "learn next thanks for your time bye",
    "start": "596480",
    "end": "602480"
  }
]