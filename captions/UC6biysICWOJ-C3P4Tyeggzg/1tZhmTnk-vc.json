[
  {
    "text": "so i've been writing my own operating",
    "start": "160",
    "end": "2000"
  },
  {
    "text": "system and when it's done this little r",
    "start": "2000",
    "end": "4480"
  },
  {
    "text": "toss should enable multitasking on the",
    "start": "4480",
    "end": "6720"
  },
  {
    "text": "stm32 blue pill but when i was on twitch",
    "start": "6720",
    "end": "9679"
  },
  {
    "text": "designing this os i had a hard time",
    "start": "9679",
    "end": "11759"
  },
  {
    "text": "thinking how am i going to do task",
    "start": "11759",
    "end": "14160"
  },
  {
    "text": "synchronization for those of you that",
    "start": "14160",
    "end": "15839"
  },
  {
    "text": "don't know task synchronization is the",
    "start": "15839",
    "end": "18160"
  },
  {
    "text": "computer science problem of",
    "start": "18160",
    "end": "19680"
  },
  {
    "text": "synchronizing the execution of two tasks",
    "start": "19680",
    "end": "22160"
  },
  {
    "text": "or threads that use the same global data",
    "start": "22160",
    "end": "25119"
  },
  {
    "text": "to prevent data corruption or",
    "start": "25119",
    "end": "26640"
  },
  {
    "text": "misinterpretation so for example if i",
    "start": "26640",
    "end": "28640"
  },
  {
    "text": "have two threads thread a and b and the",
    "start": "28640",
    "end": "31199"
  },
  {
    "text": "task of both threads is the same to",
    "start": "31199",
    "end": "32960"
  },
  {
    "text": "print global counters and then decrement",
    "start": "32960",
    "end": "35280"
  },
  {
    "text": "them this will create a synchronization",
    "start": "35280",
    "end": "37440"
  },
  {
    "text": "problem the problem is that while the",
    "start": "37440",
    "end": "39440"
  },
  {
    "text": "counter lives in global shared memory",
    "start": "39440",
    "end": "41760"
  },
  {
    "text": "when thread a goes to retrieve the",
    "start": "41760",
    "end": "43760"
  },
  {
    "text": "counter from memory and printed thread b",
    "start": "43760",
    "end": "46640"
  },
  {
    "text": "may have already decremented the counter",
    "start": "46640",
    "end": "48800"
  },
  {
    "text": "but hasn't had time to store it back",
    "start": "48800",
    "end": "50480"
  },
  {
    "text": "into memory this condition known as a",
    "start": "50480",
    "end": "52640"
  },
  {
    "text": "race condition is what task",
    "start": "52640",
    "end": "54239"
  },
  {
    "text": "synchronization fixes",
    "start": "54239",
    "end": "56320"
  },
  {
    "text": "an easy way to do task synchronization",
    "start": "56320",
    "end": "58239"
  },
  {
    "text": "for example is using a mutex or a mutual",
    "start": "58239",
    "end": "61039"
  },
  {
    "text": "exclusion object think of a mutex as a",
    "start": "61039",
    "end": "63440"
  },
  {
    "text": "talking stick if our previous example",
    "start": "63440",
    "end": "65439"
  },
  {
    "text": "had a mutex then when thread a locked",
    "start": "65439",
    "end": "67840"
  },
  {
    "text": "the mutex only thread a could access the",
    "start": "67840",
    "end": "70400"
  },
  {
    "text": "counter to print it and decrement it in",
    "start": "70400",
    "end": "72720"
  },
  {
    "text": "c the way you use a mutex is actually",
    "start": "72720",
    "end": "74320"
  },
  {
    "text": "pretty simple create a mutex structure",
    "start": "74320",
    "end": "76560"
  },
  {
    "text": "globally initialize it with the p thread",
    "start": "76560",
    "end": "79119"
  },
  {
    "text": "mutex init function and then when you",
    "start": "79119",
    "end": "81360"
  },
  {
    "text": "want to block a piece of code to only be",
    "start": "81360",
    "end": "83439"
  },
  {
    "text": "executed by one thread at a time lock",
    "start": "83439",
    "end": "85600"
  },
  {
    "text": "that thread using the p thread mutex",
    "start": "85600",
    "end": "87759"
  },
  {
    "text": "lock function then when the critical",
    "start": "87759",
    "end": "89439"
  },
  {
    "text": "part of code is over unlock it pretty",
    "start": "89439",
    "end": "91520"
  },
  {
    "text": "straightforward but this got me thinking",
    "start": "91520",
    "end": "93680"
  },
  {
    "text": "how does a mutex even work how would i",
    "start": "93680",
    "end": "96159"
  },
  {
    "text": "implement a mutex in my operating system",
    "start": "96159",
    "end": "98960"
  },
  {
    "text": "doesn't multiple threads trying to",
    "start": "98960",
    "end": "101119"
  },
  {
    "text": "access a single mutex also create a race",
    "start": "101119",
    "end": "103920"
  },
  {
    "text": "condition couldn't two threads",
    "start": "103920",
    "end": "105840"
  },
  {
    "text": "accidentally acquire the same mutex in a",
    "start": "105840",
    "end": "107920"
  },
  {
    "text": "race condition at the same time the way",
    "start": "107920",
    "end": "109680"
  },
  {
    "text": "this all works actually really cool",
    "start": "109680",
    "end": "112240"
  },
  {
    "text": "all the mutex is at the end of the day",
    "start": "112240",
    "end": "114000"
  },
  {
    "text": "is an integer value in global memory",
    "start": "114000",
    "end": "116640"
  },
  {
    "text": "when it's initialized a mutex is set to",
    "start": "116640",
    "end": "118719"
  },
  {
    "text": "the number one and just floating in the",
    "start": "118719",
    "end": "120479"
  },
  {
    "text": "ether the interesting part then is how",
    "start": "120479",
    "end": "122880"
  },
  {
    "text": "you interface with the mutex like i said",
    "start": "122880",
    "end": "125360"
  },
  {
    "text": "before if the mutex were just the number",
    "start": "125360",
    "end": "127280"
  },
  {
    "text": "one then two threads interacting with it",
    "start": "127280",
    "end": "129599"
  },
  {
    "text": "could naturally create a race condition",
    "start": "129599",
    "end": "132239"
  },
  {
    "text": "this is where the idea of atomic",
    "start": "132239",
    "end": "134160"
  },
  {
    "text": "operations comes in atomic operations",
    "start": "134160",
    "end": "136879"
  },
  {
    "text": "are instructions within the processor",
    "start": "136879",
    "end": "139120"
  },
  {
    "text": "that are impossible to interrupt in",
    "start": "139120",
    "end": "141520"
  },
  {
    "text": "intel assembly for example the lock",
    "start": "141520",
    "end": "143520"
  },
  {
    "text": "prefix tells the processor to execute an",
    "start": "143520",
    "end": "146160"
  },
  {
    "text": "instruction atomically meaning no one is",
    "start": "146160",
    "end": "148800"
  },
  {
    "text": "able to access the memory targeted by",
    "start": "148800",
    "end": "151200"
  },
  {
    "text": "the instruction until the instruction",
    "start": "151200",
    "end": "153120"
  },
  {
    "text": "completes execution so how does this",
    "start": "153120",
    "end": "155440"
  },
  {
    "text": "matter for mutexes remember how i said",
    "start": "155440",
    "end": "157440"
  },
  {
    "text": "before that mutexes were just a global",
    "start": "157440",
    "end": "159360"
  },
  {
    "text": "integer value this is still true a mutax",
    "start": "159360",
    "end": "162160"
  },
  {
    "text": "is just a value zero or one that",
    "start": "162160",
    "end": "164160"
  },
  {
    "text": "indicates to the thread if the lock has",
    "start": "164160",
    "end": "166000"
  },
  {
    "text": "been acquired or not here is an example",
    "start": "166000",
    "end": "169200"
  },
  {
    "text": "assembly snippet of how you could do a",
    "start": "169200",
    "end": "171120"
  },
  {
    "text": "lock and mips assembly here we load the",
    "start": "171120",
    "end": "173680"
  },
  {
    "text": "lock into a temporary register if it's",
    "start": "173680",
    "end": "176160"
  },
  {
    "text": "one we continue to spin until it's not",
    "start": "176160",
    "end": "178319"
  },
  {
    "text": "locked then we can access it or if it's",
    "start": "178319",
    "end": "180560"
  },
  {
    "text": "zero we lock the mutex and continue on",
    "start": "180560",
    "end": "182560"
  },
  {
    "text": "with our day but like i said before this",
    "start": "182560",
    "end": "184800"
  },
  {
    "text": "inherently is vulnerable to a race",
    "start": "184800",
    "end": "186560"
  },
  {
    "text": "condition what if two threads try to",
    "start": "186560",
    "end": "188959"
  },
  {
    "text": "lock a mutex at the same time and race",
    "start": "188959",
    "end": "191360"
  },
  {
    "text": "on the access to that lock again this is",
    "start": "191360",
    "end": "193680"
  },
  {
    "text": "where atomic operations will save the",
    "start": "193680",
    "end": "195440"
  },
  {
    "text": "day",
    "start": "195440",
    "end": "196319"
  },
  {
    "text": "in this correct mips implementation of a",
    "start": "196319",
    "end": "198640"
  },
  {
    "text": "mutex we load two values into temporary",
    "start": "198640",
    "end": "201040"
  },
  {
    "text": "registers a locked and an unlocked state",
    "start": "201040",
    "end": "204000"
  },
  {
    "text": "using the atomic mips operation compare",
    "start": "204000",
    "end": "206640"
  },
  {
    "text": "and swap we can atomically in one",
    "start": "206640",
    "end": "209040"
  },
  {
    "text": "instruction compare the unlocked value",
    "start": "209040",
    "end": "211680"
  },
  {
    "text": "to the lock and if it succeeds it swaps",
    "start": "211680",
    "end": "214239"
  },
  {
    "text": "it into t1 once we compare that value of",
    "start": "214239",
    "end": "216640"
  },
  {
    "text": "the output we can fall through to our",
    "start": "216640",
    "end": "218720"
  },
  {
    "text": "critical code section in the case that",
    "start": "218720",
    "end": "220720"
  },
  {
    "text": "it is not locked already we then have to",
    "start": "220720",
    "end": "222799"
  },
  {
    "text": "loop around in the case that it is",
    "start": "222799",
    "end": "224480"
  },
  {
    "text": "previously locked we loop to the top of",
    "start": "224480",
    "end": "226959"
  },
  {
    "text": "the function and wait for it to not be",
    "start": "226959",
    "end": "228879"
  },
  {
    "text": "locked and then now using this atomic",
    "start": "228879",
    "end": "231120"
  },
  {
    "text": "lock we can create our own mutex",
    "start": "231120",
    "end": "233439"
  },
  {
    "text": "implementation in assembly that we can",
    "start": "233439",
    "end": "235280"
  },
  {
    "text": "use in our os that's all for now guys",
    "start": "235280",
    "end": "238000"
  },
  {
    "text": "thanks for watching i hope you enjoyed",
    "start": "238000",
    "end": "239360"
  },
  {
    "text": "be sure to like and subscribe and i'll",
    "start": "239360",
    "end": "240799"
  },
  {
    "text": "see you in the next video take care",
    "start": "240799",
    "end": "245130"
  },
  {
    "text": "[Music]",
    "start": "245130",
    "end": "258410"
  }
]