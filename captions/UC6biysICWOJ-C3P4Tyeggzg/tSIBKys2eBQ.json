[
  {
    "text": "let me know if this has ever happened to",
    "start": "0",
    "end": "1800"
  },
  {
    "text": "you you feel like you finally mastered",
    "start": "1800",
    "end": "4080"
  },
  {
    "text": "pointers you write some code that uses",
    "start": "4080",
    "end": "5880"
  },
  {
    "text": "pointers maybe you use the Heap maybe",
    "start": "5880",
    "end": "7980"
  },
  {
    "text": "you don't you run your code and it still",
    "start": "7980",
    "end": "10139"
  },
  {
    "text": "crashes anyways you check the syntax of",
    "start": "10139",
    "end": "12599"
  },
  {
    "text": "your code and the syntax is definitely",
    "start": "12599",
    "end": "14340"
  },
  {
    "text": "right but something about the code isn't",
    "start": "14340",
    "end": "17340"
  },
  {
    "text": "now all because you know how to use",
    "start": "17340",
    "end": "19140"
  },
  {
    "text": "pointers doesn't mean you're using them",
    "start": "19140",
    "end": "21660"
  },
  {
    "text": "correctly and it's actually really",
    "start": "21660",
    "end": "23880"
  },
  {
    "text": "really easy to mess up raw pointers in C",
    "start": "23880",
    "end": "26820"
  },
  {
    "text": "and C plus plus take for example this",
    "start": "26820",
    "end": "29699"
  },
  {
    "text": "piece of code here you see the bug",
    "start": "29699",
    "end": "32758"
  },
  {
    "text": "this bug has a used after free",
    "start": "32759",
    "end": "35040"
  },
  {
    "text": "vulnerability where on this line here",
    "start": "35040",
    "end": "37500"
  },
  {
    "text": "the code gets freed but later on the",
    "start": "37500",
    "end": "40320"
  },
  {
    "text": "logic doesn't check for the free and the",
    "start": "40320",
    "end": "42420"
  },
  {
    "text": "pointer gets used anyway causing the",
    "start": "42420",
    "end": "44760"
  },
  {
    "text": "program to crash I used the syntax",
    "start": "44760",
    "end": "46980"
  },
  {
    "text": "correctly I just didn't use the pointers",
    "start": "46980",
    "end": "49260"
  },
  {
    "text": "correctly now I know C plus plus catches",
    "start": "49260",
    "end": "51539"
  },
  {
    "text": "a lot of hate for being a language that",
    "start": "51539",
    "end": "53399"
  },
  {
    "text": "kind of puts the whole kitchen sink into",
    "start": "53399",
    "end": "55680"
  },
  {
    "text": "the language but it actually has some",
    "start": "55680",
    "end": "57600"
  },
  {
    "text": "really elegant solutions for stopping",
    "start": "57600",
    "end": "59520"
  },
  {
    "text": "this kind of scenario from happening in",
    "start": "59520",
    "end": "61140"
  },
  {
    "text": "the future by using a thing called smart",
    "start": "61140",
    "end": "63359"
  },
  {
    "text": "pointers now C plus offers three kinds",
    "start": "63359",
    "end": "65939"
  },
  {
    "text": "of smart pointers that add some really",
    "start": "65939",
    "end": "67680"
  },
  {
    "text": "cool functionality but also have some",
    "start": "67680",
    "end": "69659"
  },
  {
    "text": "really huge pitfalls that make using",
    "start": "69659",
    "end": "72000"
  },
  {
    "text": "pointers easy in some places and harder",
    "start": "72000",
    "end": "74460"
  },
  {
    "text": "and others let's talk about those",
    "start": "74460",
    "end": "75960"
  },
  {
    "text": "scenarios now here is an example of C",
    "start": "75960",
    "end": "78000"
  },
  {
    "text": "plus plus code where we create an",
    "start": "78000",
    "end": "79920"
  },
  {
    "text": "example class the class's name is dog",
    "start": "79920",
    "end": "82020"
  },
  {
    "text": "and it has a method speak and a method",
    "start": "82020",
    "end": "84420"
  },
  {
    "text": "that's a Setter of set name that sets",
    "start": "84420",
    "end": "86400"
  },
  {
    "text": "the dog's name we have the functions",
    "start": "86400",
    "end": "88200"
  },
  {
    "text": "defined here reset the name and then",
    "start": "88200",
    "end": "89820"
  },
  {
    "text": "when we talk we say bork bork I'm the",
    "start": "89820",
    "end": "92100"
  },
  {
    "text": "the dog",
    "start": "92100",
    "end": "93360"
  },
  {
    "text": "um and so this is the example that",
    "start": "93360",
    "end": "94619"
  },
  {
    "text": "people typically show to show why you",
    "start": "94619",
    "end": "96299"
  },
  {
    "text": "should never use raw pointers in C plus",
    "start": "96299",
    "end": "98820"
  },
  {
    "text": "plus so we create a new dog and set the",
    "start": "98820",
    "end": "101640"
  },
  {
    "text": "dog pointer named Ralph and then later",
    "start": "101640",
    "end": "103680"
  },
  {
    "text": "we call the function do something with",
    "start": "103680",
    "end": "105659"
  },
  {
    "text": "the dog where we say the past object set",
    "start": "105659",
    "end": "108840"
  },
  {
    "text": "its name to high high and then speak so",
    "start": "108840",
    "end": "111119"
  },
  {
    "text": "if we go ahead and compile that we can",
    "start": "111119",
    "end": "113280"
  },
  {
    "text": "compile it and run it and it actually",
    "start": "113280",
    "end": "115020"
  },
  {
    "text": "behaves as expected no issues so far but",
    "start": "115020",
    "end": "118259"
  },
  {
    "text": "what if there was logic in this code",
    "start": "118259",
    "end": "120000"
  },
  {
    "text": "where we do something to the dog and",
    "start": "120000",
    "end": "121860"
  },
  {
    "text": "eventually we say delete D but later on",
    "start": "121860",
    "end": "125399"
  },
  {
    "text": "in the code when we talk about the dog",
    "start": "125399",
    "end": "127380"
  },
  {
    "text": "or do something else with it outside of",
    "start": "127380",
    "end": "129119"
  },
  {
    "text": "that function we don't check the value",
    "start": "129119",
    "end": "130979"
  },
  {
    "text": "of the pointer to see if it's null or",
    "start": "130979",
    "end": "132660"
  },
  {
    "text": "freed and then eventually we run into a",
    "start": "132660",
    "end": "134520"
  },
  {
    "text": "crashing state right where we could say",
    "start": "134520",
    "end": "135959"
  },
  {
    "text": "pork pork I am high high this first part",
    "start": "135959",
    "end": "138360"
  },
  {
    "text": "runs but later on in the program because",
    "start": "138360",
    "end": "140819"
  },
  {
    "text": "this pointer Ralph is no longer valid it",
    "start": "140819",
    "end": "143640"
  },
  {
    "text": "crashes the program so instead of using",
    "start": "143640",
    "end": "145920"
  },
  {
    "text": "a raw pointer in C plus what we can do",
    "start": "145920",
    "end": "148020"
  },
  {
    "text": "instead is use the smart pointer concept",
    "start": "148020",
    "end": "150239"
  },
  {
    "text": "here we're going to create what is",
    "start": "150239",
    "end": "151680"
  },
  {
    "text": "called a unique point winter a unique",
    "start": "151680",
    "end": "153660"
  },
  {
    "text": "pointer literally is as it sounds a",
    "start": "153660",
    "end": "156060"
  },
  {
    "text": "pointer to an object that is unique",
    "start": "156060",
    "end": "158099"
  },
  {
    "text": "meaning no one else is allowed to point",
    "start": "158099",
    "end": "160080"
  },
  {
    "text": "to that object we make a unique pointer",
    "start": "160080",
    "end": "162480"
  },
  {
    "text": "of a type dog the unit Pointer's name is",
    "start": "162480",
    "end": "165000"
  },
  {
    "text": "Ralph and then we call Standard make",
    "start": "165000",
    "end": "167580"
  },
  {
    "text": "unique on dog to invoke the object",
    "start": "167580",
    "end": "170160"
  },
  {
    "text": "Constructor and make the object right",
    "start": "170160",
    "end": "172080"
  },
  {
    "text": "and then so later we can just pass",
    "start": "172080",
    "end": "174000"
  },
  {
    "text": "around Ralph like a regular pointer we",
    "start": "174000",
    "end": "176040"
  },
  {
    "text": "can call set name on it we can call",
    "start": "176040",
    "end": "177840"
  },
  {
    "text": "speak on it and we can compile it and",
    "start": "177840",
    "end": "179459"
  },
  {
    "text": "run it",
    "start": "179459",
    "end": "181019"
  },
  {
    "text": "we get kind of that expected Behavior",
    "start": "181019",
    "end": "182580"
  },
  {
    "text": "right bork bork I am ASDF Etc now the",
    "start": "182580",
    "end": "185280"
  },
  {
    "text": "things start to get a little weird with",
    "start": "185280",
    "end": "186599"
  },
  {
    "text": "unique pointers and you start trying to",
    "start": "186599",
    "end": "188580"
  },
  {
    "text": "use unique pointers around in other",
    "start": "188580",
    "end": "190680"
  },
  {
    "text": "places in your program a unique pointer",
    "start": "190680",
    "end": "192840"
  },
  {
    "text": "represents not only a pointer that is",
    "start": "192840",
    "end": "194879"
  },
  {
    "text": "unique to an object that points to that",
    "start": "194879",
    "end": "196860"
  },
  {
    "text": "object but it also represents who owns",
    "start": "196860",
    "end": "199739"
  },
  {
    "text": "that object and in programming when we",
    "start": "199739",
    "end": "201360"
  },
  {
    "text": "say who owns a thing we're talking about",
    "start": "201360",
    "end": "203280"
  },
  {
    "text": "who was responsible for destroying the",
    "start": "203280",
    "end": "205620"
  },
  {
    "text": "object when you're done using it right",
    "start": "205620",
    "end": "207239"
  },
  {
    "text": "to prevent that use after free scenario",
    "start": "207239",
    "end": "209099"
  },
  {
    "text": "and to prevent memory leaks right now as",
    "start": "209099",
    "end": "211500"
  },
  {
    "text": "programmed by passing in Ralph which is",
    "start": "211500",
    "end": "214080"
  },
  {
    "text": "a unique pointer to a function that",
    "start": "214080",
    "end": "216060"
  },
  {
    "text": "expects a dog pointer a raw C pointer as",
    "start": "216060",
    "end": "219480"
  },
  {
    "text": "input we will get a pretty nasty",
    "start": "219480",
    "end": "221840"
  },
  {
    "text": "compilation error because these types",
    "start": "221840",
    "end": "224340"
  },
  {
    "text": "just don't match up so by now changing",
    "start": "224340",
    "end": "226500"
  },
  {
    "text": "the parameter type from a dog pointer to",
    "start": "226500",
    "end": "229140"
  },
  {
    "text": "a dog unique pointer you would think",
    "start": "229140",
    "end": "231360"
  },
  {
    "text": "that this would work but this is also",
    "start": "231360",
    "end": "233400"
  },
  {
    "text": "another problem and it goes against the",
    "start": "233400",
    "end": "235500"
  },
  {
    "text": "unique pointer construct if we compile",
    "start": "235500",
    "end": "237659"
  },
  {
    "text": "this What's Happening Here is we are",
    "start": "237659",
    "end": "240239"
  },
  {
    "text": "actually passing the value of the unique",
    "start": "240239",
    "end": "243239"
  },
  {
    "text": "pointer Ralph by value right we are",
    "start": "243239",
    "end": "246000"
  },
  {
    "text": "making a copy of the unique pointer and",
    "start": "246000",
    "end": "249060"
  },
  {
    "text": "that in itself is not very unique right",
    "start": "249060",
    "end": "251400"
  },
  {
    "text": "I'm now at the same time have two copies",
    "start": "251400",
    "end": "253739"
  },
  {
    "text": "of the same pointer and the C plus plus",
    "start": "253739",
    "end": "256019"
  },
  {
    "text": "compiler will not allow me to do that to",
    "start": "256019",
    "end": "258600"
  },
  {
    "text": "pass ownership of the object from our",
    "start": "258600",
    "end": "260820"
  },
  {
    "text": "main function to the do something with",
    "start": "260820",
    "end": "262919"
  },
  {
    "text": "dog function we have to do what is",
    "start": "262919",
    "end": "264780"
  },
  {
    "text": "called a move we will literally standard",
    "start": "264780",
    "end": "267180"
  },
  {
    "text": "move Ralph the dog to this function and",
    "start": "267180",
    "end": "271080"
  },
  {
    "text": "now this function is responsible for",
    "start": "271080",
    "end": "273360"
  },
  {
    "text": "controlling it so if we compile that we",
    "start": "273360",
    "end": "275280"
  },
  {
    "text": "get no errors and let's run this okay so",
    "start": "275280",
    "end": "278160"
  },
  {
    "text": "we did crash again and I want to see if",
    "start": "278160",
    "end": "280620"
  },
  {
    "text": "you guys understand why we crashed what",
    "start": "280620",
    "end": "283199"
  },
  {
    "text": "did I say before ownership is the idea",
    "start": "283199",
    "end": "286080"
  },
  {
    "text": "of who is responsible for destroying the",
    "start": "286080",
    "end": "289199"
  },
  {
    "text": "object we moved ownership of Ralph to",
    "start": "289199",
    "end": "292680"
  },
  {
    "text": "our function do something with the dog",
    "start": "292680",
    "end": "294720"
  },
  {
    "text": "we then called set name on Ralph and",
    "start": "294720",
    "end": "298979"
  },
  {
    "text": "then called speak on Ralph and because",
    "start": "298979",
    "end": "301740"
  },
  {
    "text": "we did not return Ralph Ralph went out",
    "start": "301740",
    "end": "305639"
  },
  {
    "text": "of scope and because Ralph went out of",
    "start": "305639",
    "end": "307919"
  },
  {
    "text": "scope using a C plus plus smart pointer",
    "start": "307919",
    "end": "310259"
  },
  {
    "text": "Ralph was freed our code then continued",
    "start": "310259",
    "end": "314040"
  },
  {
    "text": "and later on in the code we tried to use",
    "start": "314040",
    "end": "316560"
  },
  {
    "text": "functions in an object that had been",
    "start": "316560",
    "end": "318720"
  },
  {
    "text": "freed and we crashed the program just",
    "start": "318720",
    "end": "321419"
  },
  {
    "text": "like before and this first part pointer",
    "start": "321419",
    "end": "323699"
  },
  {
    "text": "started to get a little weird right",
    "start": "323699",
    "end": "324780"
  },
  {
    "text": "because now essentially every time I",
    "start": "324780",
    "end": "326520"
  },
  {
    "text": "want to use a Smart pointer I have to",
    "start": "326520",
    "end": "328500"
  },
  {
    "text": "say that this is no longer a void",
    "start": "328500",
    "end": "330060"
  },
  {
    "text": "function this is a standard unique",
    "start": "330060",
    "end": "332699"
  },
  {
    "text": "pointer to a dog",
    "start": "332699",
    "end": "335100"
  },
  {
    "text": "and we're going to say that it returns",
    "start": "335100",
    "end": "336900"
  },
  {
    "text": "this and we're going to say that it",
    "start": "336900",
    "end": "338160"
  },
  {
    "text": "returns d",
    "start": "338160",
    "end": "340560"
  },
  {
    "text": "and we'll say that Ralph now equals",
    "start": "340560",
    "end": "344160"
  },
  {
    "text": "itself after the move so it does",
    "start": "344160",
    "end": "346199"
  },
  {
    "text": "something with the dog that we move",
    "start": "346199",
    "end": "347820"
  },
  {
    "text": "Ralph into we pull rat Ralph back out",
    "start": "347820",
    "end": "352020"
  },
  {
    "text": "and now the program doesn't crash it",
    "start": "352020",
    "end": "354120"
  },
  {
    "text": "runs twice but this this is kind of",
    "start": "354120",
    "end": "356759"
  },
  {
    "text": "gross right this code is not very good",
    "start": "356759",
    "end": "359940"
  },
  {
    "text": "to look at it's kind of confusing and",
    "start": "359940",
    "end": "361979"
  },
  {
    "text": "typically when you have a function that",
    "start": "361979",
    "end": "363419"
  },
  {
    "text": "does something you want to return the",
    "start": "363419",
    "end": "365940"
  },
  {
    "text": "result of the thing but if I have to",
    "start": "365940",
    "end": "367560"
  },
  {
    "text": "move Ralph out of the function every",
    "start": "367560",
    "end": "369780"
  },
  {
    "text": "time now every time I want to use a",
    "start": "369780",
    "end": "371580"
  },
  {
    "text": "unique pointer it makes it very ugly to",
    "start": "371580",
    "end": "374280"
  },
  {
    "text": "do so one way we can deal with this",
    "start": "374280",
    "end": "375960"
  },
  {
    "text": "problem with the unique pointer where we",
    "start": "375960",
    "end": "377520"
  },
  {
    "text": "have to pass it around and move it and",
    "start": "377520",
    "end": "379139"
  },
  {
    "text": "then unmove it is to use the get method",
    "start": "379139",
    "end": "381900"
  },
  {
    "text": "from the unique pointer so the get",
    "start": "381900",
    "end": "384000"
  },
  {
    "text": "method in the unique pointer actually",
    "start": "384000",
    "end": "385740"
  },
  {
    "text": "returns a raw pointer to the thing that",
    "start": "385740",
    "end": "388680"
  },
  {
    "text": "the unique pointer controls you're",
    "start": "388680",
    "end": "390180"
  },
  {
    "text": "probably thinking well then doesn't that",
    "start": "390180",
    "end": "392039"
  },
  {
    "text": "defeat the entire purpose of the unique",
    "start": "392039",
    "end": "393840"
  },
  {
    "text": "pointer and yes it does but what you can",
    "start": "393840",
    "end": "396600"
  },
  {
    "text": "do with it is actually there's a couple",
    "start": "396600",
    "end": "398039"
  },
  {
    "text": "ways you can work around it to make the",
    "start": "398039",
    "end": "400139"
  },
  {
    "text": "unique raw pointer work right so here I",
    "start": "400139",
    "end": "402660"
  },
  {
    "text": "say ralph.get which again Returns the",
    "start": "402660",
    "end": "404699"
  },
  {
    "text": "raw pointer to Ralph what we can do is",
    "start": "404699",
    "end": "407759"
  },
  {
    "text": "in our function that uses that raw",
    "start": "407759",
    "end": "410160"
  },
  {
    "text": "pointer we can set the raw pointer to to",
    "start": "410160",
    "end": "412440"
  },
  {
    "text": "a constant which essentially locks down",
    "start": "412440",
    "end": "414960"
  },
  {
    "text": "what the pointer is able to do and it",
    "start": "414960",
    "end": "416759"
  },
  {
    "text": "doesn't allow us to modify our class",
    "start": "416759",
    "end": "418979"
  },
  {
    "text": "variable now that adds some future",
    "start": "418979",
    "end": "421500"
  },
  {
    "text": "complications where now D speak has to",
    "start": "421500",
    "end": "424620"
  },
  {
    "text": "be declared as a const function that",
    "start": "424620",
    "end": "426840"
  },
  {
    "text": "guarantees we don't actually modify the",
    "start": "426840",
    "end": "428819"
  },
  {
    "text": "class we have to also put that in the",
    "start": "428819",
    "end": "430919"
  },
  {
    "text": "Declaration right here but with that all",
    "start": "430919",
    "end": "433199"
  },
  {
    "text": "done we can go ahead and compile this",
    "start": "433199",
    "end": "434880"
  },
  {
    "text": "and eventually we can actually use the",
    "start": "434880",
    "end": "436919"
  },
  {
    "text": "raw pointer to do certain things with",
    "start": "436919",
    "end": "438780"
  },
  {
    "text": "the class while also retaining ownership",
    "start": "438780",
    "end": "441240"
  },
  {
    "text": "in the main function now an even easier",
    "start": "441240",
    "end": "444479"
  },
  {
    "text": "way to do this is just to treat this the",
    "start": "444479",
    "end": "446819"
  },
  {
    "text": "way that I think you should treat it all",
    "start": "446819",
    "end": "448860"
  },
  {
    "text": "the time generally which is the use of",
    "start": "448860",
    "end": "451080"
  },
  {
    "text": "the other class a shared pointer if you",
    "start": "451080",
    "end": "452940"
  },
  {
    "text": "have a shared pointer dog D it's a still",
    "start": "452940",
    "end": "455220"
  },
  {
    "text": "a void we'll clean up our constants here",
    "start": "455220",
    "end": "458340"
  },
  {
    "text": "and then we will also say d set name to",
    "start": "458340",
    "end": "462060"
  },
  {
    "text": "asked as this will be not a unique it'll",
    "start": "462060",
    "end": "465479"
  },
  {
    "text": "be a make shared",
    "start": "465479",
    "end": "467460"
  },
  {
    "text": "and we'll set this to a shared pointer",
    "start": "467460",
    "end": "470520"
  },
  {
    "text": "and then we will just pass Ralph",
    "start": "470520",
    "end": "474780"
  },
  {
    "text": "and that should just work so what",
    "start": "474780",
    "end": "476940"
  },
  {
    "text": "happens here is we essentially create a",
    "start": "476940",
    "end": "479580"
  },
  {
    "text": "shared pointer which is a unique pointer",
    "start": "479580",
    "end": "481919"
  },
  {
    "text": "that can have multiple copies of itself",
    "start": "481919",
    "end": "483840"
  },
  {
    "text": "as we create the second copy of Ralph",
    "start": "483840",
    "end": "486840"
  },
  {
    "text": "all that happens is that the reference",
    "start": "486840",
    "end": "488340"
  },
  {
    "text": "counter inside the sharepointer goes up",
    "start": "488340",
    "end": "490740"
  },
  {
    "text": "by one and that reference counter is",
    "start": "490740",
    "end": "492960"
  },
  {
    "text": "used here to denote that we have a",
    "start": "492960",
    "end": "494880"
  },
  {
    "text": "pointer that now has two places that are",
    "start": "494880",
    "end": "497160"
  },
  {
    "text": "using it when d goes out of scope the",
    "start": "497160",
    "end": "499620"
  },
  {
    "text": "shared pointer copy that we made is",
    "start": "499620",
    "end": "501720"
  },
  {
    "text": "deleted and we still retain ownership of",
    "start": "501720",
    "end": "504720"
  },
  {
    "text": "the object here in main then Ralph",
    "start": "504720",
    "end": "507060"
  },
  {
    "text": "continues and we call the extra",
    "start": "507060",
    "end": "508259"
  },
  {
    "text": "functions here and things are good",
    "start": "508259",
    "end": "510060"
  },
  {
    "text": "another smart thing you could do to",
    "start": "510060",
    "end": "511680"
  },
  {
    "text": "protect Hackers from stealing your",
    "start": "511680",
    "end": "512940"
  },
  {
    "text": "identity online is to use two-factor",
    "start": "512940",
    "end": "515279"
  },
  {
    "text": "authentication for Reliable two-factor",
    "start": "515279",
    "end": "517140"
  },
  {
    "text": "authentication for all the services they",
    "start": "517140",
    "end": "518940"
  },
  {
    "text": "use during the day I rely on UV Key by",
    "start": "518940",
    "end": "521399"
  },
  {
    "text": "ubico the sponsor of today's video",
    "start": "521399",
    "end": "523080"
  },
  {
    "text": "hackers who steal passwords are pretty",
    "start": "523080",
    "end": "525180"
  },
  {
    "text": "smart but adding a security key to your",
    "start": "525180",
    "end": "527040"
  },
  {
    "text": "authentication scheme is an easy way to",
    "start": "527040",
    "end": "529019"
  },
  {
    "text": "protect your online information the",
    "start": "529019",
    "end": "530580"
  },
  {
    "text": "ubiki by ubico is a two-factor",
    "start": "530580",
    "end": "532800"
  },
  {
    "text": "authentication solution that makes",
    "start": "532800",
    "end": "534180"
  },
  {
    "text": "adding a second layer of security to",
    "start": "534180",
    "end": "536279"
  },
  {
    "text": "your accounts super simple now I use UB",
    "start": "536279",
    "end": "538320"
  },
  {
    "text": "key every day to log into my personal",
    "start": "538320",
    "end": "540000"
  },
  {
    "text": "accounts like my Gmail my stripe",
    "start": "540000",
    "end": "541980"
  },
  {
    "text": "application for my business and my",
    "start": "541980",
    "end": "543540"
  },
  {
    "text": "Twitch account just plug the UB key into",
    "start": "543540",
    "end": "545220"
  },
  {
    "text": "your device add that UB key to the",
    "start": "545220",
    "end": "547200"
  },
  {
    "text": "service and then the next time you're",
    "start": "547200",
    "end": "548339"
  },
  {
    "text": "asked to log in touch the key and you're",
    "start": "548339",
    "end": "550440"
  },
  {
    "text": "in so if you're doing anything online be",
    "start": "550440",
    "end": "552779"
  },
  {
    "text": "smart and protect yourself with an",
    "start": "552779",
    "end": "554100"
  },
  {
    "text": "additional layer of security with a UV",
    "start": "554100",
    "end": "555839"
  },
  {
    "text": "Key by ubico you can use my offer code",
    "start": "555839",
    "end": "557580"
  },
  {
    "text": "low level 5 to get five dollars that's",
    "start": "557580",
    "end": "559740"
  },
  {
    "text": "ten percent off get one before the offer",
    "start": "559740",
    "end": "561839"
  },
  {
    "text": "expires thanks again ubico for",
    "start": "561839",
    "end": "563339"
  },
  {
    "text": "sponsoring this video I wanted to make",
    "start": "563339",
    "end": "564540"
  },
  {
    "text": "this video to kind of show you guys that",
    "start": "564540",
    "end": "565800"
  },
  {
    "text": "like you know smart pointers exist they",
    "start": "565800",
    "end": "568019"
  },
  {
    "text": "have their powers they do solve certain",
    "start": "568019",
    "end": "569820"
  },
  {
    "text": "problems but with every solution in",
    "start": "569820",
    "end": "571980"
  },
  {
    "text": "Computing you solve one problem and you",
    "start": "571980",
    "end": "574320"
  },
  {
    "text": "make another problem anyway guys that's",
    "start": "574320",
    "end": "575940"
  },
  {
    "text": "all for this video I hope you enjoyed",
    "start": "575940",
    "end": "577080"
  },
  {
    "text": "that if you did go watch this other",
    "start": "577080",
    "end": "578339"
  },
  {
    "text": "video that I made about C plus plus as",
    "start": "578339",
    "end": "580500"
  },
  {
    "text": "well",
    "start": "580500",
    "end": "582680"
  }
]