[
  {
    "text": "in the next 15 minutes I'm going to",
    "start": "0",
    "end": "1740"
  },
  {
    "text": "teach you binary reverse engineering by",
    "start": "1740",
    "end": "3899"
  },
  {
    "text": "the end of this video you'll be ripping",
    "start": "3899",
    "end": "5160"
  },
  {
    "text": "apart binaries in Ida you don't need any",
    "start": "5160",
    "end": "7020"
  },
  {
    "text": "programming experience or any cyber",
    "start": "7020",
    "end": "8820"
  },
  {
    "text": "security experience whatsoever let's get",
    "start": "8820",
    "end": "10740"
  },
  {
    "text": "into it to discuss how to do reverse",
    "start": "10740",
    "end": "12900"
  },
  {
    "text": "engineering we first need to talk about",
    "start": "12900",
    "end": "14219"
  },
  {
    "text": "what reverse engineering is the art of",
    "start": "14219",
    "end": "16680"
  },
  {
    "text": "reverse engineering is taking a binary",
    "start": "16680",
    "end": "18960"
  },
  {
    "text": "and reversing it to figure out what it",
    "start": "18960",
    "end": "21720"
  },
  {
    "text": "does to talk about this let's talk about",
    "start": "21720",
    "end": "23520"
  },
  {
    "text": "what the classical example is of source",
    "start": "23520",
    "end": "26279"
  },
  {
    "text": "code that goes from source code to a",
    "start": "26279",
    "end": "28320"
  },
  {
    "text": "binary when I write code I have a bunch",
    "start": "28320",
    "end": "30779"
  },
  {
    "text": "of different symbols in the binary that",
    "start": "30779",
    "end": "32940"
  },
  {
    "text": "are human readable I have the type of",
    "start": "32940",
    "end": "34380"
  },
  {
    "text": "the variable I have the name of the",
    "start": "34380",
    "end": "36059"
  },
  {
    "text": "function I have the name of the variable",
    "start": "36059",
    "end": "38100"
  },
  {
    "text": "Etc all of these symbols these human",
    "start": "38100",
    "end": "40620"
  },
  {
    "text": "readable strings these labels tell me",
    "start": "40620",
    "end": "43680"
  },
  {
    "text": "what the code is going to do I can infer",
    "start": "43680",
    "end": "45719"
  },
  {
    "text": "a lot of information from The Source",
    "start": "45719",
    "end": "47460"
  },
  {
    "text": "Code by reading the code so for example",
    "start": "47460",
    "end": "49379"
  },
  {
    "text": "I have a buffer that gets passed to scan",
    "start": "49379",
    "end": "52140"
  },
  {
    "text": "F and then I call get pass on that",
    "start": "52140",
    "end": "54180"
  },
  {
    "text": "buffer because I have the source code I",
    "start": "54180",
    "end": "56399"
  },
  {
    "text": "now know generally that I will read in",
    "start": "56399",
    "end": "58620"
  },
  {
    "text": "data from the user and I will check that",
    "start": "58620",
    "end": "60719"
  },
  {
    "text": "buffer against a known password and if I",
    "start": "60719",
    "end": "63059"
  },
  {
    "text": "get it right I get to go to the that is",
    "start": "63059",
    "end": "65338"
  },
  {
    "text": "correct block the problem is that if I",
    "start": "65339",
    "end": "68700"
  },
  {
    "text": "have just the binary I don't have that",
    "start": "68700",
    "end": "71700"
  },
  {
    "text": "source code and instead what I have is",
    "start": "71700",
    "end": "73799"
  },
  {
    "text": "this really horrific just binary blob of",
    "start": "73799",
    "end": "76799"
  },
  {
    "text": "data that looking at this I can't infer",
    "start": "76799",
    "end": "79439"
  },
  {
    "text": "any information about this so reverse",
    "start": "79439",
    "end": "81960"
  },
  {
    "text": "engineering is going from this without",
    "start": "81960",
    "end": "84240"
  },
  {
    "text": "the source code and inferring the",
    "start": "84240",
    "end": "86460"
  },
  {
    "text": "features from what the code does right",
    "start": "86460",
    "end": "88680"
  },
  {
    "text": "why do we do that in the first place the",
    "start": "88680",
    "end": "91320"
  },
  {
    "text": "number one thing I think is for cyber",
    "start": "91320",
    "end": "93000"
  },
  {
    "text": "Security Professionals the art of",
    "start": "93000",
    "end": "94680"
  },
  {
    "text": "malware reverse engineering is extremely",
    "start": "94680",
    "end": "97020"
  },
  {
    "text": "important for a few reasons the big one",
    "start": "97020",
    "end": "99119"
  },
  {
    "text": "being if you're able to take the malware",
    "start": "99119",
    "end": "100920"
  },
  {
    "text": "that you find in your system and triage",
    "start": "100920",
    "end": "102840"
  },
  {
    "text": "it by hand instead of depending on the",
    "start": "102840",
    "end": "105060"
  },
  {
    "text": "sandbox analyzer you can yourself figure",
    "start": "105060",
    "end": "107520"
  },
  {
    "text": "out what the attacker was trying to do",
    "start": "107520",
    "end": "109619"
  },
  {
    "text": "and then it from that and for how to",
    "start": "109619",
    "end": "111420"
  },
  {
    "text": "defend against it number two I think",
    "start": "111420",
    "end": "113700"
  },
  {
    "text": "reverse engineering is just fun I think",
    "start": "113700",
    "end": "115320"
  },
  {
    "text": "the art of taking things that you don't",
    "start": "115320",
    "end": "117299"
  },
  {
    "text": "know what they do looking inside of them",
    "start": "117299",
    "end": "118799"
  },
  {
    "text": "and figuring out what they're supposed",
    "start": "118799",
    "end": "119640"
  },
  {
    "text": "to do do is really fun so there's a",
    "start": "119640",
    "end": "122220"
  },
  {
    "text": "couple different techniques that we can",
    "start": "122220",
    "end": "123360"
  },
  {
    "text": "do to reverse engineer this binary the",
    "start": "123360",
    "end": "126119"
  },
  {
    "text": "first one that everyone can do right now",
    "start": "126119",
    "end": "128039"
  },
  {
    "text": "on your computer is we can do the",
    "start": "128039",
    "end": "130200"
  },
  {
    "text": "operation strings on our binary so we're",
    "start": "130200",
    "end": "132480"
  },
  {
    "text": "going to do that",
    "start": "132480",
    "end": "133500"
  },
  {
    "text": "all the strings being util does is it",
    "start": "133500",
    "end": "136140"
  },
  {
    "text": "looks for a five character or greater",
    "start": "136140",
    "end": "138420"
  },
  {
    "text": "string of ASCII characters and prints",
    "start": "138420",
    "end": "141180"
  },
  {
    "text": "them to the screen if they're found in",
    "start": "141180",
    "end": "142560"
  },
  {
    "text": "the binary so these are all the strings",
    "start": "142560",
    "end": "144780"
  },
  {
    "text": "in the binary and you can see we have",
    "start": "144780",
    "end": "146400"
  },
  {
    "text": "the name of the functions that we import",
    "start": "146400",
    "end": "148379"
  },
  {
    "text": "like scanf puts in printf those will",
    "start": "148379",
    "end": "150780"
  },
  {
    "text": "always get preserved for the reasons of",
    "start": "150780",
    "end": "152520"
  },
  {
    "text": "linking and then we have the strings we",
    "start": "152520",
    "end": "154620"
  },
  {
    "text": "actually wrote into our program we have",
    "start": "154620",
    "end": "156300"
  },
  {
    "text": "welcome to your first crack me problem",
    "start": "156300",
    "end": "158160"
  },
  {
    "text": "what is the password the format string",
    "start": "158160",
    "end": "160739"
  },
  {
    "text": "for the scanf and then that is correct",
    "start": "160739",
    "end": "162420"
  },
  {
    "text": "the problem with this is that the",
    "start": "162420",
    "end": "164280"
  },
  {
    "text": "password itself",
    "start": "164280",
    "end": "165959"
  },
  {
    "text": "is not revealed in the binary so we have",
    "start": "165959",
    "end": "168480"
  },
  {
    "text": "to go through the art of getting a",
    "start": "168480",
    "end": "169739"
  },
  {
    "text": "little deeper reading the machine code",
    "start": "169739",
    "end": "171900"
  },
  {
    "text": "and figuring out what the machine code",
    "start": "171900",
    "end": "173879"
  },
  {
    "text": "does to get the password from the user",
    "start": "173879",
    "end": "176099"
  },
  {
    "text": "going one level deeper instead of",
    "start": "176099",
    "end": "177900"
  },
  {
    "text": "strings we can kind of put this into",
    "start": "177900",
    "end": "179459"
  },
  {
    "text": "what is called a disassembler the one",
    "start": "179459",
    "end": "181980"
  },
  {
    "text": "disassembler everyone has access to",
    "start": "181980",
    "end": "183660"
  },
  {
    "text": "right now is going to be object dump so",
    "start": "183660",
    "end": "185760"
  },
  {
    "text": "we're going to write object dump",
    "start": "185760",
    "end": "187319"
  },
  {
    "text": "disassemble the main sections use Intel",
    "start": "187319",
    "end": "189540"
  },
  {
    "text": "syntax on our program and pipe that into",
    "start": "189540",
    "end": "192060"
  },
  {
    "text": "less",
    "start": "192060",
    "end": "193440"
  },
  {
    "text": "now what we have here is it the",
    "start": "193440",
    "end": "195300"
  },
  {
    "text": "disassembler is taking the ones and",
    "start": "195300",
    "end": "197640"
  },
  {
    "text": "zeros say literal hex data and",
    "start": "197640",
    "end": "199680"
  },
  {
    "text": "converting that into a human readable",
    "start": "199680",
    "end": "201540"
  },
  {
    "text": "version of the assembly instruction so",
    "start": "201540",
    "end": "203819"
  },
  {
    "text": "if we can navigate down to the text",
    "start": "203819",
    "end": "205800"
  },
  {
    "text": "section",
    "start": "205800",
    "end": "207000"
  },
  {
    "text": "the text section contains the code for",
    "start": "207000",
    "end": "209879"
  },
  {
    "text": "our binary right the executable bits",
    "start": "209879",
    "end": "211860"
  },
  {
    "text": "that will get ran by the processor and",
    "start": "211860",
    "end": "213900"
  },
  {
    "text": "here we have the binary data and then",
    "start": "213900",
    "end": "215819"
  },
  {
    "text": "the actual human readable assembly",
    "start": "215819",
    "end": "217319"
  },
  {
    "text": "instruction the problem with this now is",
    "start": "217319",
    "end": "219599"
  },
  {
    "text": "this is not very human readable we can",
    "start": "219599",
    "end": "222060"
  },
  {
    "text": "probably kind of infer what's happening",
    "start": "222060",
    "end": "223799"
  },
  {
    "text": "here but there's not a good",
    "start": "223799",
    "end": "225420"
  },
  {
    "text": "visualization of the control flow graph",
    "start": "225420",
    "end": "227940"
  },
  {
    "text": "meaning the if statements that will",
    "start": "227940",
    "end": "229680"
  },
  {
    "text": "either execute or not execute as the",
    "start": "229680",
    "end": "231959"
  },
  {
    "text": "binary runs so we're going to go one",
    "start": "231959",
    "end": "234180"
  },
  {
    "text": "level deeper and put the binary into a",
    "start": "234180",
    "end": "237540"
  },
  {
    "text": "more complex disassembler and my",
    "start": "237540",
    "end": "240360"
  },
  {
    "text": "favorite disassembler there are two",
    "start": "240360",
    "end": "241980"
  },
  {
    "text": "primary ones there's Ida and guidra I",
    "start": "241980",
    "end": "244620"
  },
  {
    "text": "would argue for the reasons of learning",
    "start": "244620",
    "end": "246540"
  },
  {
    "text": "assembly and learning reverse",
    "start": "246540",
    "end": "247980"
  },
  {
    "text": "engineering that we should use Ida so",
    "start": "247980",
    "end": "249900"
  },
  {
    "text": "we're going to go ahead and we're going",
    "start": "249900",
    "end": "250739"
  },
  {
    "text": "to install that I've already installed",
    "start": "250739",
    "end": "252299"
  },
  {
    "text": "the downloader I'll put the link for",
    "start": "252299",
    "end": "253439"
  },
  {
    "text": "that in the description below from my",
    "start": "253439",
    "end": "255599"
  },
  {
    "text": "downloads you can go ahead and run the",
    "start": "255599",
    "end": "257699"
  },
  {
    "text": "Ida installer and once you've ran the",
    "start": "257699",
    "end": "260220"
  },
  {
    "text": "installer you will get a folder in your",
    "start": "260220",
    "end": "262019"
  },
  {
    "text": "home directory called Ida free and we're",
    "start": "262019",
    "end": "263880"
  },
  {
    "text": "going to run Ida 64.",
    "start": "263880",
    "end": "267120"
  },
  {
    "text": "we're gonna go to baby's first crack me",
    "start": "267120",
    "end": "269400"
  },
  {
    "text": "and we're going to import our binary",
    "start": "269400",
    "end": "271199"
  },
  {
    "text": "file it's going to make sure that we are",
    "start": "271199",
    "end": "273300"
  },
  {
    "text": "okay with us treating this binary file",
    "start": "273300",
    "end": "275460"
  },
  {
    "text": "as an elf64 and we're going to go ahead",
    "start": "275460",
    "end": "277620"
  },
  {
    "text": "and hit OK what Ida will then do is Ida",
    "start": "277620",
    "end": "280139"
  },
  {
    "text": "will go through and it will disassemble",
    "start": "280139",
    "end": "281580"
  },
  {
    "text": "the entire binary and give us the",
    "start": "281580",
    "end": "284520"
  },
  {
    "text": "ability to read the assembly here I'm",
    "start": "284520",
    "end": "286560"
  },
  {
    "text": "going to zoom in on this",
    "start": "286560",
    "end": "288120"
  },
  {
    "text": "and now we are looking at Ida's",
    "start": "288120",
    "end": "290280"
  },
  {
    "text": "disassembly of the program from what it",
    "start": "290280",
    "end": "292979"
  },
  {
    "text": "inferred as the start point so the start",
    "start": "292979",
    "end": "294960"
  },
  {
    "text": "point is what is the first instruction",
    "start": "294960",
    "end": "297060"
  },
  {
    "text": "that is going to run when the program",
    "start": "297060",
    "end": "299040"
  },
  {
    "text": "starts there's a lot of stuff here that",
    "start": "299040",
    "end": "301080"
  },
  {
    "text": "we can talk about this is more about the",
    "start": "301080",
    "end": "303120"
  },
  {
    "text": "runtime of the libc library initializing",
    "start": "303120",
    "end": "306000"
  },
  {
    "text": "we're going to skip all of this we're",
    "start": "306000",
    "end": "307560"
  },
  {
    "text": "going to jump right into this label here",
    "start": "307560",
    "end": "309840"
  },
  {
    "text": "so before lib C start main gets called",
    "start": "309840",
    "end": "313440"
  },
  {
    "text": "that's what the call instruction does it",
    "start": "313440",
    "end": "315900"
  },
  {
    "text": "loads the effective address of our main",
    "start": "315900",
    "end": "318419"
  },
  {
    "text": "function into RDI so one thing we have",
    "start": "318419",
    "end": "322139"
  },
  {
    "text": "to kind of talk about here very basic",
    "start": "322139",
    "end": "323880"
  },
  {
    "text": "reverse engineering concept is the is",
    "start": "323880",
    "end": "326759"
  },
  {
    "text": "this concept called binary abis or",
    "start": "326759",
    "end": "329340"
  },
  {
    "text": "abstracted binary interfaces what these",
    "start": "329340",
    "end": "332280"
  },
  {
    "text": "are are the agreement that the computer",
    "start": "332280",
    "end": "334620"
  },
  {
    "text": "has made with the processor about the",
    "start": "334620",
    "end": "338220"
  },
  {
    "text": "registers that will contain different",
    "start": "338220",
    "end": "339840"
  },
  {
    "text": "values and a function is called so for",
    "start": "339840",
    "end": "341940"
  },
  {
    "text": "example if I call function Foo and",
    "start": "341940",
    "end": "345000"
  },
  {
    "text": "numbers 1 and 2 are the arguments to Foo",
    "start": "345000",
    "end": "348419"
  },
  {
    "text": "before we call Foo",
    "start": "348419",
    "end": "350820"
  },
  {
    "text": "already I will contain one and then RSI",
    "start": "350820",
    "end": "355680"
  },
  {
    "text": "will contain two this is just the",
    "start": "355680",
    "end": "358560"
  },
  {
    "text": "agreement that the compiler has made",
    "start": "358560",
    "end": "360419"
  },
  {
    "text": "with the processor right this is the way",
    "start": "360419",
    "end": "362759"
  },
  {
    "text": "that it expects the data to behave so if",
    "start": "362759",
    "end": "365100"
  },
  {
    "text": "we go back and we look at that",
    "start": "365100",
    "end": "367259"
  },
  {
    "text": "when we call libc start main we have RDI",
    "start": "367259",
    "end": "370620"
  },
  {
    "text": "goes Main and then I'm sorry I guess in",
    "start": "370620",
    "end": "373740"
  },
  {
    "text": "this case it's rcx actually no it is RSI",
    "start": "373740",
    "end": "376380"
  },
  {
    "text": "RSI takes arcv that's the second",
    "start": "376380",
    "end": "378539"
  },
  {
    "text": "argument and then rcx gets the next",
    "start": "378539",
    "end": "381419"
  },
  {
    "text": "argument which is in it so we're gonna",
    "start": "381419",
    "end": "382560"
  },
  {
    "text": "go ahead and we're going to double click",
    "start": "382560",
    "end": "383639"
  },
  {
    "text": "on Main and this is our function that we",
    "start": "383639",
    "end": "386880"
  },
  {
    "text": "wrote you know before we were looking at",
    "start": "386880",
    "end": "388500"
  },
  {
    "text": "the lib C start we didn't write any of",
    "start": "388500",
    "end": "390419"
  },
  {
    "text": "that code this is the code that we wrote",
    "start": "390419",
    "end": "392100"
  },
  {
    "text": "but the assembly for that code right and",
    "start": "392100",
    "end": "394979"
  },
  {
    "text": "we can kind of see that if we look at",
    "start": "394979",
    "end": "396240"
  },
  {
    "text": "this we see we have the puts function",
    "start": "396240",
    "end": "398699"
  },
  {
    "text": "get called and it gets called with this",
    "start": "398699",
    "end": "400979"
  },
  {
    "text": "pointer to s in RDI argument number one",
    "start": "400979",
    "end": "403319"
  },
  {
    "text": "and that's where it says welcome to your",
    "start": "403319",
    "end": "405180"
  },
  {
    "text": "first crack me problem",
    "start": "405180",
    "end": "406800"
  },
  {
    "text": "we then have another one that says",
    "start": "406800",
    "end": "408539"
  },
  {
    "text": "printf printf is it gets called on the",
    "start": "408539",
    "end": "411840"
  },
  {
    "text": "what is the password so these are the",
    "start": "411840",
    "end": "413639"
  },
  {
    "text": "two prints that get called to prep us to",
    "start": "413639",
    "end": "416039"
  },
  {
    "text": "check our password and then we have a",
    "start": "416039",
    "end": "418080"
  },
  {
    "text": "few things happen here so remember how I",
    "start": "418080",
    "end": "420240"
  },
  {
    "text": "said that the first argument is RDI and",
    "start": "420240",
    "end": "423060"
  },
  {
    "text": "the next argument is RSI well we can",
    "start": "423060",
    "end": "425699"
  },
  {
    "text": "look at this move instruction and see",
    "start": "425699",
    "end": "427620"
  },
  {
    "text": "that RSI comes from Rax we're going to",
    "start": "427620",
    "end": "430440"
  },
  {
    "text": "middle click on rex",
    "start": "430440",
    "end": "432000"
  },
  {
    "text": "these all get highlighted Rix becomes",
    "start": "432000",
    "end": "435060"
  },
  {
    "text": "load the effective address of this",
    "start": "435060",
    "end": "438240"
  },
  {
    "text": "location here interesting what is that",
    "start": "438240",
    "end": "440699"
  },
  {
    "text": "location so because it loads the",
    "start": "440699",
    "end": "442740"
  },
  {
    "text": "effective address it actually puts a",
    "start": "442740",
    "end": "444539"
  },
  {
    "text": "pointer to this location in Rix before",
    "start": "444539",
    "end": "447539"
  },
  {
    "text": "it puts it into RSI so that means that",
    "start": "447539",
    "end": "450300"
  },
  {
    "text": "this variable here variable 50 is the",
    "start": "450300",
    "end": "452819"
  },
  {
    "text": "buffer that we created for our buffer",
    "start": "452819",
    "end": "454680"
  },
  {
    "text": "remember we can go back and look at our",
    "start": "454680",
    "end": "455819"
  },
  {
    "text": "code here",
    "start": "455819",
    "end": "456720"
  },
  {
    "text": "we created a 64 byte buffer so that is",
    "start": "456720",
    "end": "460319"
  },
  {
    "text": "the location of where our password is",
    "start": "460319",
    "end": "462300"
  },
  {
    "text": "going to go into okay so let's go ahead",
    "start": "462300",
    "end": "463979"
  },
  {
    "text": "and we're going to label this we're",
    "start": "463979",
    "end": "465660"
  },
  {
    "text": "going to right click hit name we're",
    "start": "465660",
    "end": "466919"
  },
  {
    "text": "going to type in buffer",
    "start": "466919",
    "end": "469080"
  },
  {
    "text": "by doing this we are starting to infer",
    "start": "469080",
    "end": "471300"
  },
  {
    "text": "more and more information about the",
    "start": "471300",
    "end": "473639"
  },
  {
    "text": "symbols that we wrote as programmers",
    "start": "473639",
    "end": "475860"
  },
  {
    "text": "that the malware wrote the malware",
    "start": "475860",
    "end": "477660"
  },
  {
    "text": "author wrote as a programmer of the",
    "start": "477660",
    "end": "479280"
  },
  {
    "text": "malware reverse engineering or whatever",
    "start": "479280",
    "end": "480479"
  },
  {
    "text": "about what the program does right so we",
    "start": "480479",
    "end": "483180"
  },
  {
    "text": "call the scanf function here and then",
    "start": "483180",
    "end": "486060"
  },
  {
    "text": "eventually we go down to this next",
    "start": "486060",
    "end": "487740"
  },
  {
    "text": "function here and then we have a",
    "start": "487740",
    "end": "489660"
  },
  {
    "text": "conditional jump we say JUMP Z or jump",
    "start": "489660",
    "end": "492599"
  },
  {
    "text": "zero to either this location that is",
    "start": "492599",
    "end": "495419"
  },
  {
    "text": "correct or something else we're going to",
    "start": "495419",
    "end": "497400"
  },
  {
    "text": "talk about how how that all works in a",
    "start": "497400",
    "end": "499259"
  },
  {
    "text": "second here",
    "start": "499259",
    "end": "500280"
  },
  {
    "text": "so again we talked about the binary ABI",
    "start": "500280",
    "end": "503039"
  },
  {
    "text": "the binary ABI tells us you know what",
    "start": "503039",
    "end": "505979"
  },
  {
    "text": "the processor agrees on in terms of what",
    "start": "505979",
    "end": "508620"
  },
  {
    "text": "registers receive what data in the case",
    "start": "508620",
    "end": "511440"
  },
  {
    "text": "of return values and again this only",
    "start": "511440",
    "end": "514320"
  },
  {
    "text": "applies to 64-bit Intel return values",
    "start": "514320",
    "end": "517380"
  },
  {
    "text": "come back through r a x so we're going",
    "start": "517380",
    "end": "520919"
  },
  {
    "text": "to keep that in mind so arguments go",
    "start": "520919",
    "end": "522959"
  },
  {
    "text": "into RDI and RSI and then return values",
    "start": "522959",
    "end": "525600"
  },
  {
    "text": "go into Rax I just realized my fat head",
    "start": "525600",
    "end": "527940"
  },
  {
    "text": "was blocking I apologize all right so if",
    "start": "527940",
    "end": "530880"
  },
  {
    "text": "we go back into the VM",
    "start": "530880",
    "end": "532560"
  },
  {
    "text": "we see that we call this function",
    "start": "532560",
    "end": "536279"
  },
  {
    "text": "the processor then tests eax which is",
    "start": "536279",
    "end": "539279"
  },
  {
    "text": "the lower half of Rix so it tests the",
    "start": "539279",
    "end": "541500"
  },
  {
    "text": "return value and if the return value is",
    "start": "541500",
    "end": "544740"
  },
  {
    "text": "zero",
    "start": "544740",
    "end": "545880"
  },
  {
    "text": "we jump the green line is where we jump",
    "start": "545880",
    "end": "547920"
  },
  {
    "text": "on a positive test so jump zero we jump",
    "start": "547920",
    "end": "551580"
  },
  {
    "text": "around this and if it is not zero jump",
    "start": "551580",
    "end": "554880"
  },
  {
    "text": "zero red right the red means we go here",
    "start": "554880",
    "end": "557399"
  },
  {
    "text": "it says that is correct what is that",
    "start": "557399",
    "end": "559440"
  },
  {
    "text": "coming from if we go back to our code",
    "start": "559440",
    "end": "563839"
  },
  {
    "text": "we're testing the return of the get pass",
    "start": "563880",
    "end": "566700"
  },
  {
    "text": "function the get pass function will",
    "start": "566700",
    "end": "568620"
  },
  {
    "text": "return one if our password is correct",
    "start": "568620",
    "end": "571560"
  },
  {
    "text": "and if it's correct we say that is",
    "start": "571560",
    "end": "573060"
  },
  {
    "text": "correct so that's how we got that out of",
    "start": "573060",
    "end": "575399"
  },
  {
    "text": "the assembly so now you're probably",
    "start": "575399",
    "end": "576899"
  },
  {
    "text": "saying okay cool let's get into that",
    "start": "576899",
    "end": "578279"
  },
  {
    "text": "function let's let's go figure out that",
    "start": "578279",
    "end": "580140"
  },
  {
    "text": "password okay we'll get there step one",
    "start": "580140",
    "end": "582000"
  },
  {
    "text": "we want to rename this the get password",
    "start": "582000",
    "end": "584519"
  },
  {
    "text": "function right we can just kind of infer",
    "start": "584519",
    "end": "586380"
  },
  {
    "text": "that you know it says what is your",
    "start": "586380",
    "end": "588120"
  },
  {
    "text": "password if you get it right it says",
    "start": "588120",
    "end": "589740"
  },
  {
    "text": "that it's correct we can just infer that",
    "start": "589740",
    "end": "591360"
  },
  {
    "text": "that is the get password function so",
    "start": "591360",
    "end": "593160"
  },
  {
    "text": "we're going to double click on that and",
    "start": "593160",
    "end": "594720"
  },
  {
    "text": "here we have this giant chart",
    "start": "594720",
    "end": "597360"
  },
  {
    "text": "you may already see the password",
    "start": "597360",
    "end": "598620"
  },
  {
    "text": "starting to appear here",
    "start": "598620",
    "end": "600420"
  },
  {
    "text": "um but remember what I said before the",
    "start": "600420",
    "end": "602339"
  },
  {
    "text": "RDI variable is the first argument that",
    "start": "602339",
    "end": "604980"
  },
  {
    "text": "gets passed into a function in this",
    "start": "604980",
    "end": "607140"
  },
  {
    "text": "function here we passed our buffer as",
    "start": "607140",
    "end": "609300"
  },
  {
    "text": "the first argument so we're going to go",
    "start": "609300",
    "end": "610680"
  },
  {
    "text": "into there",
    "start": "610680",
    "end": "611700"
  },
  {
    "text": "so if we look at this it does a few",
    "start": "611700",
    "end": "613920"
  },
  {
    "text": "things it sets up our stack and then we",
    "start": "613920",
    "end": "616260"
  },
  {
    "text": "move RDI the pointer that we gave it as",
    "start": "616260",
    "end": "618779"
  },
  {
    "text": "an argument",
    "start": "618779",
    "end": "619980"
  },
  {
    "text": "to another variable on the stack it's",
    "start": "619980",
    "end": "622019"
  },
  {
    "text": "preserving the argument so we're going",
    "start": "622019",
    "end": "623700"
  },
  {
    "text": "to call this buffer as well and this is",
    "start": "623700",
    "end": "625260"
  },
  {
    "text": "a pointer to the buffer",
    "start": "625260",
    "end": "627660"
  },
  {
    "text": "so now what it's doing is it's going to",
    "start": "627660",
    "end": "629399"
  },
  {
    "text": "take that same buffer it's going to put",
    "start": "629399",
    "end": "631320"
  },
  {
    "text": "it into Rax and it's going to compare",
    "start": "631320",
    "end": "634740"
  },
  {
    "text": "the first pointer or the first byte so",
    "start": "634740",
    "end": "637860"
  },
  {
    "text": "to say treat Rex as a pointer extract",
    "start": "637860",
    "end": "640860"
  },
  {
    "text": "one byte and put it into eax that is",
    "start": "640860",
    "end": "643140"
  },
  {
    "text": "what this instruction turns into and",
    "start": "643140",
    "end": "645180"
  },
  {
    "text": "we're going to compare that Al is the",
    "start": "645180",
    "end": "647519"
  },
  {
    "text": "lower eight bits of uh eax and RX these",
    "start": "647519",
    "end": "650760"
  },
  {
    "text": "are all the same registers just",
    "start": "650760",
    "end": "651899"
  },
  {
    "text": "different parts of it and we're going to",
    "start": "651899",
    "end": "653760"
  },
  {
    "text": "compare that to 6 3 H well as Ida is",
    "start": "653760",
    "end": "657240"
  },
  {
    "text": "already showing you I just showing you",
    "start": "657240",
    "end": "658560"
  },
  {
    "text": "hey by the way 6 3 H is the letter c",
    "start": "658560",
    "end": "663060"
  },
  {
    "text": "if that is not zero right if they're not",
    "start": "663060",
    "end": "665700"
  },
  {
    "text": "the same a zero comparison is also the",
    "start": "665700",
    "end": "667860"
  },
  {
    "text": "same as the",
    "start": "667860",
    "end": "669360"
  },
  {
    "text": "um for the same comparison so if they're",
    "start": "669360",
    "end": "671160"
  },
  {
    "text": "not zero meaning that they're not the",
    "start": "671160",
    "end": "672540"
  },
  {
    "text": "same jump away",
    "start": "672540",
    "end": "674399"
  },
  {
    "text": "and this is the return right we're",
    "start": "674399",
    "end": "676260"
  },
  {
    "text": "returning zero so if we go back if it is",
    "start": "676260",
    "end": "680040"
  },
  {
    "text": "not zero or if it is zero meaning that",
    "start": "680040",
    "end": "682500"
  },
  {
    "text": "they're the same go to the next add one",
    "start": "682500",
    "end": "685260"
  },
  {
    "text": "to our pointer right extract the buffer",
    "start": "685260",
    "end": "687420"
  },
  {
    "text": "add one to it which means increment to",
    "start": "687420",
    "end": "689640"
  },
  {
    "text": "the next character and compare that to",
    "start": "689640",
    "end": "692160"
  },
  {
    "text": "the letter A so you can actually just",
    "start": "692160",
    "end": "693899"
  },
  {
    "text": "read the instructions here",
    "start": "693899",
    "end": "696899"
  },
  {
    "text": "and figure out what our password is so c",
    "start": "696899",
    "end": "699300"
  },
  {
    "text": "a n okay that's a word can underscore",
    "start": "699300",
    "end": "703560"
  },
  {
    "text": "yeah",
    "start": "703560",
    "end": "705920"
  },
  {
    "text": "underscore Kenya underscore",
    "start": "705920",
    "end": "709320"
  },
  {
    "text": "dig underscore",
    "start": "709320",
    "end": "712079"
  },
  {
    "text": "it question mark Okay cool so that seems",
    "start": "712079",
    "end": "715380"
  },
  {
    "text": "easy enough let's try it out",
    "start": "715380",
    "end": "718079"
  },
  {
    "text": "can ya dig it",
    "start": "718079",
    "end": "721500"
  },
  {
    "text": "that is correct what did we just do we",
    "start": "721500",
    "end": "723779"
  },
  {
    "text": "took a binary that we didn't have the",
    "start": "723779",
    "end": "725519"
  },
  {
    "text": "source code for and again we did we",
    "start": "725519",
    "end": "727140"
  },
  {
    "text": "weren't referencing that too heavily and",
    "start": "727140",
    "end": "729120"
  },
  {
    "text": "we put that binary into first object",
    "start": "729120",
    "end": "731640"
  },
  {
    "text": "dump to figure out what it did but we",
    "start": "731640",
    "end": "733500"
  },
  {
    "text": "saw this as kind of ugly and hard to",
    "start": "733500",
    "end": "734880"
  },
  {
    "text": "read so we put it into our favorite",
    "start": "734880",
    "end": "736800"
  },
  {
    "text": "disassembler Ida and use that to extract",
    "start": "736800",
    "end": "739740"
  },
  {
    "text": "the functionality and eventually the",
    "start": "739740",
    "end": "742320"
  },
  {
    "text": "password you may be asking why did",
    "start": "742320",
    "end": "744420"
  },
  {
    "text": "strings not reveal the password in that",
    "start": "744420",
    "end": "746339"
  },
  {
    "text": "binary the reason was",
    "start": "746339",
    "end": "748620"
  },
  {
    "text": "when you look at this the actual hex",
    "start": "748620",
    "end": "751440"
  },
  {
    "text": "code for the binary is the instructions",
    "start": "751440",
    "end": "754860"
  },
  {
    "text": "at that location the the comparison to",
    "start": "754860",
    "end": "758100"
  },
  {
    "text": "the letter G actually gets packed into",
    "start": "758100",
    "end": "760380"
  },
  {
    "text": "the instructions if you look at the",
    "start": "760380",
    "end": "761519"
  },
  {
    "text": "instruction here",
    "start": "761519",
    "end": "763860"
  },
  {
    "text": "you don't get to see the letter G",
    "start": "763860",
    "end": "766440"
  },
  {
    "text": "pattern of the binary actually you kind",
    "start": "766440",
    "end": "768120"
  },
  {
    "text": "of do you can see the letter G here gets",
    "start": "768120",
    "end": "770160"
  },
  {
    "text": "packed to the instruction because we're",
    "start": "770160",
    "end": "771420"
  },
  {
    "text": "comparing that byte to the letter G",
    "start": "771420",
    "end": "774300"
  },
  {
    "text": "um but again you wouldn't know that if",
    "start": "774300",
    "end": "776040"
  },
  {
    "text": "you didn't know the functionality of the",
    "start": "776040",
    "end": "777300"
  },
  {
    "text": "binary so I highly suggest you go onto",
    "start": "777300",
    "end": "780000"
  },
  {
    "text": "my GitHub links down below take the Ida",
    "start": "780000",
    "end": "782279"
  },
  {
    "text": "link also below and try this out for",
    "start": "782279",
    "end": "785160"
  },
  {
    "text": "yourself I'm a huge proponent of kinetic",
    "start": "785160",
    "end": "787740"
  },
  {
    "text": "learning using your hands getting dirty",
    "start": "787740",
    "end": "789779"
  },
  {
    "text": "and filling things out as you go that is",
    "start": "789779",
    "end": "792060"
  },
  {
    "text": "the same reason why I'm excited to talk",
    "start": "792060",
    "end": "793680"
  },
  {
    "text": "about today's sponsor brilliant",
    "start": "793680",
    "end": "795600"
  },
  {
    "text": "brilliant is an amazing learning",
    "start": "795600",
    "end": "797339"
  },
  {
    "text": "platform that features over 70 courses",
    "start": "797339",
    "end": "799620"
  },
  {
    "text": "and a variety of interesting topics like",
    "start": "799620",
    "end": "801959"
  },
  {
    "text": "math and computer science Brilliance",
    "start": "801959",
    "end": "804120"
  },
  {
    "text": "computer science course covers a series",
    "start": "804120",
    "end": "805800"
  },
  {
    "text": "of bite-sized lessons on the",
    "start": "805800",
    "end": "807600"
  },
  {
    "text": "fundamentals for professional",
    "start": "807600",
    "end": "808740"
  },
  {
    "text": "programmers like logical decision making",
    "start": "808740",
    "end": "810560"
  },
  {
    "text": "interfaces and thinking with graphs my",
    "start": "810560",
    "end": "813120"
  },
  {
    "text": "favorite part about brilliant is that",
    "start": "813120",
    "end": "814320"
  },
  {
    "text": "their lessons are all Hands-On I'm",
    "start": "814320",
    "end": "816300"
  },
  {
    "text": "someone who learns by doing every",
    "start": "816300",
    "end": "817920"
  },
  {
    "text": "brilliant lesson is filled with",
    "start": "817920",
    "end": "819000"
  },
  {
    "text": "interactive examples that let you test",
    "start": "819000",
    "end": "820500"
  },
  {
    "text": "your understanding as you go you can go",
    "start": "820500",
    "end": "822120"
  },
  {
    "text": "try brilliant for free right now and you",
    "start": "822120",
    "end": "823740"
  },
  {
    "text": "using my URL",
    "start": "823740",
    "end": "825620"
  },
  {
    "text": "www.brilliant.org low level learning the",
    "start": "825620",
    "end": "827820"
  },
  {
    "text": "first 200 of you get 20 off an annual",
    "start": "827820",
    "end": "830339"
  },
  {
    "text": "premium subscription which gives you",
    "start": "830339",
    "end": "831899"
  },
  {
    "text": "access to all of Brilliance courses",
    "start": "831899",
    "end": "833940"
  },
  {
    "text": "thanks again brilliant for sponsoring",
    "start": "833940",
    "end": "835560"
  },
  {
    "text": "this video",
    "start": "835560",
    "end": "837800"
  }
]