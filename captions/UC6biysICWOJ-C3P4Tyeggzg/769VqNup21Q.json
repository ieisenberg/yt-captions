[
  {
    "text": "rust libraries may never exist and it's",
    "start": "40",
    "end": "2360"
  },
  {
    "text": "for this exact reason that when you",
    "start": "2360",
    "end": "4040"
  },
  {
    "text": "build anything in Rust you need to",
    "start": "4040",
    "end": "5520"
  },
  {
    "text": "download like a thousand crates in cargo",
    "start": "5520",
    "end": "7879"
  },
  {
    "text": "and spend the next decade of your life",
    "start": "7879",
    "end": "10320"
  },
  {
    "text": "compiling your project now the rabbit",
    "start": "10320",
    "end": "12639"
  },
  {
    "text": "hole on this one goes deep so stick",
    "start": "12639",
    "end": "14799"
  },
  {
    "text": "around until the end I'm lowle learning",
    "start": "14799",
    "end": "16840"
  },
  {
    "text": "I make videos on YouTube about",
    "start": "16840",
    "end": "18880"
  },
  {
    "text": "programming and software security Now",
    "start": "18880",
    "end": "21279"
  },
  {
    "text": "rust is one of my favorite programming",
    "start": "21279",
    "end": "23119"
  },
  {
    "text": "languages I'm a security researcher and",
    "start": "23119",
    "end": "25240"
  },
  {
    "text": "I honestly believe that the features in",
    "start": "25240",
    "end": "27279"
  },
  {
    "text": "Rust like the borrow Checker and the",
    "start": "27279",
    "end": "28920"
  },
  {
    "text": "runtime access checks will Usher in a",
    "start": "28920",
    "end": "31560"
  },
  {
    "text": "new era of safer software every major",
    "start": "31560",
    "end": "34680"
  },
  {
    "text": "system in the world is written in the C",
    "start": "34680",
    "end": "36879"
  },
  {
    "text": "language that's the Linux kernel and a",
    "start": "36879",
    "end": "38399"
  },
  {
    "text": "bunch of other really foundational",
    "start": "38399",
    "end": "39960"
  },
  {
    "text": "software and while C is extremely fast",
    "start": "39960",
    "end": "42680"
  },
  {
    "text": "the language offers programmers too many",
    "start": "42680",
    "end": "44719"
  },
  {
    "text": "opportunities to shoot themselves in the",
    "start": "44719",
    "end": "46719"
  },
  {
    "text": "face from a security standpoint and",
    "start": "46719",
    "end": "49239"
  },
  {
    "text": "despite the dozens of skill issue",
    "start": "49239",
    "end": "51920"
  },
  {
    "text": "arguments and the dozens of security",
    "start": "51920",
    "end": "54520"
  },
  {
    "text": "features that seem to get added to the C",
    "start": "54520",
    "end": "56480"
  },
  {
    "text": "language and the C standard libraries on",
    "start": "56480",
    "end": "58399"
  },
  {
    "text": "a daily basis still remains that 70% of",
    "start": "58399",
    "end": "61640"
  },
  {
    "text": "security vulnerabilities originate from",
    "start": "61640",
    "end": "63840"
  },
  {
    "text": "memory issues in C but at the same time",
    "start": "63840",
    "end": "66479"
  },
  {
    "text": "I completely acknowledge that rust isn't",
    "start": "66479",
    "end": "68759"
  },
  {
    "text": "the most straightforward language to",
    "start": "68759",
    "end": "70360"
  },
  {
    "text": "learn with the syntax is a little messy",
    "start": "70360",
    "end": "72880"
  },
  {
    "text": "and sometimes the compiler gets mad at",
    "start": "72880",
    "end": "75040"
  },
  {
    "text": "you and then the compile time takes",
    "start": "75040",
    "end": "77799"
  },
  {
    "text": "forever so why is that why does rust",
    "start": "77799",
    "end": "81280"
  },
  {
    "text": "take forever to compile and why are the",
    "start": "81280",
    "end": "83880"
  },
  {
    "text": "binary so huge now fortunately libraries",
    "start": "83880",
    "end": "87079"
  },
  {
    "text": "would fix all of this but unfortunately",
    "start": "87079",
    "end": "90159"
  },
  {
    "text": "rust libraries don't actually exist and",
    "start": "90159",
    "end": "93360"
  },
  {
    "text": "they may never exist and so before you",
    "start": "93360",
    "end": "95079"
  },
  {
    "text": "tell me about cargo and how cargo crate",
    "start": "95079",
    "end": "97320"
  },
  {
    "text": "are libraries you download and hold your",
    "start": "97320",
    "end": "99280"
  },
  {
    "text": "horses cargo is a package manager and it",
    "start": "99280",
    "end": "102119"
  },
  {
    "text": "does manage libraries but these",
    "start": "102119",
    "end": "104079"
  },
  {
    "text": "libraries aren't the same as libraries",
    "start": "104079",
    "end": "106119"
  },
  {
    "text": "and languages like C let me explain",
    "start": "106119",
    "end": "108399"
  },
  {
    "text": "every program you write in C for example",
    "start": "108399",
    "end": "110799"
  },
  {
    "text": "depends on the gnu C library or libc",
    "start": "110799",
    "end": "114600"
  },
  {
    "text": "functions that you use in every piece of",
    "start": "114600",
    "end": "116600"
  },
  {
    "text": "code like open or read or write or close",
    "start": "116600",
    "end": "119280"
  },
  {
    "text": "are already already written for you",
    "start": "119280",
    "end": "121000"
  },
  {
    "text": "luckily and more importantly they're",
    "start": "121000",
    "end": "122960"
  },
  {
    "text": "already compiled for you lipy exists as",
    "start": "122960",
    "end": "125840"
  },
  {
    "text": "a shared object which lives on your file",
    "start": "125840",
    "end": "128520"
  },
  {
    "text": "system as a file that your loader can",
    "start": "128520",
    "end": "130640"
  },
  {
    "text": "reach into for functions that it needs",
    "start": "130640",
    "end": "132920"
  },
  {
    "text": "to run the program at runtime and the",
    "start": "132920",
    "end": "135440"
  },
  {
    "text": "reason the C language is able to do this",
    "start": "135440",
    "end": "137360"
  },
  {
    "text": "and specifically in Linux is because of",
    "start": "137360",
    "end": "139920"
  },
  {
    "text": "the definition of the E.L application",
    "start": "139920",
    "end": "143040"
  },
  {
    "text": "binary interface or the ABI defined for",
    "start": "143040",
    "end": "146480"
  },
  {
    "text": "the elf file format that adheres to",
    "start": "146480",
    "end": "148920"
  },
  {
    "text": "function calls in a way that are",
    "start": "148920",
    "end": "150519"
  },
  {
    "text": "compatible with C this ABI exposes an",
    "start": "150519",
    "end": "153360"
  },
  {
    "text": "interface for your program an elf to",
    "start": "153360",
    "end": "155560"
  },
  {
    "text": "reach into another elf and find any",
    "start": "155560",
    "end": "158200"
  },
  {
    "text": "function that it needs the elf ABI",
    "start": "158200",
    "end": "160239"
  },
  {
    "text": "specifies a table of functions or a",
    "start": "160239",
    "end": "162400"
  },
  {
    "text": "symbol table that a program can parse",
    "start": "162400",
    "end": "164560"
  },
  {
    "text": "specifically to find a function that is",
    "start": "164560",
    "end": "166920"
  },
  {
    "text": "exported by that program and this is",
    "start": "166920",
    "end": "169200"
  },
  {
    "text": "exactly how libc exposes function calls",
    "start": "169200",
    "end": "172040"
  },
  {
    "text": "this ABI also guarantees that the data",
    "start": "172040",
    "end": "174640"
  },
  {
    "text": "defined in one program is in the same",
    "start": "174640",
    "end": "177040"
  },
  {
    "text": "order and in the same location as",
    "start": "177040",
    "end": "179080"
  },
  {
    "text": "another so so struct x with elements a b",
    "start": "179080",
    "end": "181720"
  },
  {
    "text": "and c will always be in that order a b",
    "start": "181720",
    "end": "184280"
  },
  {
    "text": "and c this allows interoperability",
    "start": "184280",
    "end": "186319"
  },
  {
    "text": "between not just functions but data in",
    "start": "186319",
    "end": "188840"
  },
  {
    "text": "libraries as well now this is where it",
    "start": "188840",
    "end": "190440"
  },
  {
    "text": "starts to get a little crazy rust does",
    "start": "190440",
    "end": "192599"
  },
  {
    "text": "not at this time have a stable ABI or an",
    "start": "192599",
    "end": "195760"
  },
  {
    "text": "application binary interface to share",
    "start": "195760",
    "end": "198280"
  },
  {
    "text": "information across multiple binaries so",
    "start": "198280",
    "end": "201440"
  },
  {
    "text": "cargo packages exist but rust libraries",
    "start": "201440",
    "end": "204799"
  },
  {
    "text": "don't all the cargo package is is a blob",
    "start": "204799",
    "end": "207159"
  },
  {
    "text": "of source that you locally compile and",
    "start": "207159",
    "end": "209280"
  },
  {
    "text": "it can binds all of that code into one",
    "start": "209280",
    "end": "212159"
  },
  {
    "text": "big blob of code inside of a singular",
    "start": "212159",
    "end": "214720"
  },
  {
    "text": "elf so effectively anytime you compile a",
    "start": "214720",
    "end": "217120"
  },
  {
    "text": "rust program you are compiling every",
    "start": "217120",
    "end": "219519"
  },
  {
    "text": "cargo package together required for that",
    "start": "219519",
    "end": "221599"
  },
  {
    "text": "project and smashing them all into a",
    "start": "221599",
    "end": "223760"
  },
  {
    "text": "single binary hence the high compile",
    "start": "223760",
    "end": "225920"
  },
  {
    "text": "times and hence the high binary sizes so",
    "start": "225920",
    "end": "228799"
  },
  {
    "text": "how do we fix this the answer is not",
    "start": "228799",
    "end": "231080"
  },
  {
    "text": "simple organizing an ABI for a language",
    "start": "231080",
    "end": "233879"
  },
  {
    "text": "and spec like the C elf is pretty simple",
    "start": "233879",
    "end": "236480"
  },
  {
    "text": "mainly because C is just a high level",
    "start": "236480",
    "end": "238760"
  },
  {
    "text": "abstraction around a assembly so there",
    "start": "238760",
    "end": "240799"
  },
  {
    "text": "isn't too much information to hide just",
    "start": "240799",
    "end": "243599"
  },
  {
    "text": "basic types and function calls rust on",
    "start": "243599",
    "end": "245920"
  },
  {
    "text": "the other hand is a different beast stru",
    "start": "245920",
    "end": "248879"
  },
  {
    "text": "and rust really aren't guaranteed to be",
    "start": "248879",
    "end": "251000"
  },
  {
    "text": "in any particular order across program",
    "start": "251000",
    "end": "253239"
  },
  {
    "text": "boundaries as long as a and b are in the",
    "start": "253239",
    "end": "255799"
  },
  {
    "text": "structure it's fine also generics create",
    "start": "255799",
    "end": "258239"
  },
  {
    "text": "a whole other world of problems because",
    "start": "258239",
    "end": "259959"
  },
  {
    "text": "they're statically dispatched and built",
    "start": "259959",
    "end": "262040"
  },
  {
    "text": "at compile time as well as many other",
    "start": "262040",
    "end": "264600"
  },
  {
    "text": "complex issues with types in the",
    "start": "264600",
    "end": "266840"
  },
  {
    "text": "language also a ton of power and rust",
    "start": "266840",
    "end": "269400"
  },
  {
    "text": "comes from compile time static analyzers",
    "start": "269400",
    "end": "271919"
  },
  {
    "text": "that run checks like the borrow Checker",
    "start": "271919",
    "end": "273720"
  },
  {
    "text": "which isn't possible if there's a",
    "start": "273720",
    "end": "275479"
  },
  {
    "text": "compiled binary if I pass a mutable",
    "start": "275479",
    "end": "277479"
  },
  {
    "text": "reference into a compiled binary how is",
    "start": "277479",
    "end": "279800"
  },
  {
    "text": "it possible for the borrow Checker to",
    "start": "279800",
    "end": "281639"
  },
  {
    "text": "make sure that the reference is used in",
    "start": "281639",
    "end": "283520"
  },
  {
    "text": "a way that is safe now I know what a lot",
    "start": "283520",
    "end": "285880"
  },
  {
    "text": "of you are probably thinking wait",
    "start": "285880",
    "end": "287280"
  },
  {
    "text": "doesn't rust have a cabi explicitly for",
    "start": "287280",
    "end": "290759"
  },
  {
    "text": "this reason so yes the rust language",
    "start": "290759",
    "end": "293160"
  },
  {
    "text": "does allow you to create types and",
    "start": "293160",
    "end": "295360"
  },
  {
    "text": "functions that are exposed using the elf",
    "start": "295360",
    "end": "298039"
  },
  {
    "text": "ABI using the rep C syntax reer C",
    "start": "298039",
    "end": "301400"
  },
  {
    "text": "decorator basically tells the r compiler",
    "start": "301400",
    "end": "303440"
  },
  {
    "text": "to do what C does order the structure",
    "start": "303440",
    "end": "305880"
  },
  {
    "text": "the way that c would create symbols the",
    "start": "305880",
    "end": "308080"
  },
  {
    "text": "way the C would or the way the elf would",
    "start": "308080",
    "end": "310280"
  },
  {
    "text": "and create a foreign function interface",
    "start": "310280",
    "end": "312639"
  },
  {
    "text": "to call through so doesn't that kind of",
    "start": "312639",
    "end": "314800"
  },
  {
    "text": "solve our problem no not really using",
    "start": "314800",
    "end": "317120"
  },
  {
    "text": "reer C doesn't allow any of the rust",
    "start": "317120",
    "end": "319400"
  },
  {
    "text": "features to cross the application",
    "start": "319400",
    "end": "321280"
  },
  {
    "text": "boundary we can't expose a function with",
    "start": "321280",
    "end": "323199"
  },
  {
    "text": "unique types ex using the Exotic typing",
    "start": "323199",
    "end": "325639"
  },
  {
    "text": "system that rust has and also any",
    "start": "325639",
    "end": "327680"
  },
  {
    "text": "function call that crosses the repr C",
    "start": "327680",
    "end": "329880"
  },
  {
    "text": "foreign function interface is unsafe and",
    "start": "329880",
    "end": "332680"
  },
  {
    "text": "disables the borrow Checker reper is",
    "start": "332680",
    "end": "334880"
  },
  {
    "text": "great for converting rust code into a C",
    "start": "334880",
    "end": "338000"
  },
  {
    "text": "library but not for creating rust to",
    "start": "338000",
    "end": "340639"
  },
  {
    "text": "rust binary objects now luckily I'm not",
    "start": "340639",
    "end": "343600"
  },
  {
    "text": "the only one talking about this problem",
    "start": "343600",
    "end": "345199"
  },
  {
    "text": "there are plenty of people much smarter",
    "start": "345199",
    "end": "346840"
  },
  {
    "text": "than me that have open merge requests",
    "start": "346840",
    "end": "348560"
  },
  {
    "text": "into the Russ langang Master to produce",
    "start": "348560",
    "end": "351360"
  },
  {
    "text": "their own abis now this problem will",
    "start": "351360",
    "end": "353800"
  },
  {
    "text": "require the entire Russ Community to get",
    "start": "353800",
    "end": "355639"
  },
  {
    "text": "on board probably with one ABI that is",
    "start": "355639",
    "end": "357800"
  },
  {
    "text": "the most feature complete and makes the",
    "start": "357800",
    "end": "359080"
  },
  {
    "text": "most sense before we can make meaningful",
    "start": "359080",
    "end": "360360"
  },
  {
    "text": "progress you can go check out this poll",
    "start": "360360",
    "end": "361759"
  },
  {
    "text": "request I'll put the link in the",
    "start": "361759",
    "end": "362759"
  },
  {
    "text": "description below uh by Josh triplet",
    "start": "362759",
    "end": "364759"
  },
  {
    "text": "which exposes the feature for an",
    "start": "364759",
    "end": "366759"
  },
  {
    "text": "experimental feature gate to create a",
    "start": "366759",
    "end": "368639"
  },
  {
    "text": "new API called Krabby or crab API which",
    "start": "368639",
    "end": "371960"
  },
  {
    "text": "is pretty funny motivation here is today",
    "start": "371960",
    "end": "373560"
  },
  {
    "text": "developers building projects",
    "start": "373560",
    "end": "374599"
  },
  {
    "text": "incorporating multiple languages or",
    "start": "374599",
    "end": "375960"
  },
  {
    "text": "calling a library written in one",
    "start": "375960",
    "end": "377280"
  },
  {
    "text": "language from another often have to use",
    "start": "377280",
    "end": "379120"
  },
  {
    "text": "the cabi and that's reer C from before",
    "start": "379120",
    "end": "381360"
  },
  {
    "text": "as the lowest common denominator for",
    "start": "381360",
    "end": "383199"
  },
  {
    "text": "cross language function calls as a",
    "start": "383199",
    "end": "385080"
  },
  {
    "text": "result such cross- language calls use",
    "start": "385080",
    "end": "387160"
  },
  {
    "text": "unsafe C representations again reper C",
    "start": "387160",
    "end": "389520"
  },
  {
    "text": "even for types that both languages",
    "start": "389520",
    "end": "391800"
  },
  {
    "text": "understand for example passing an",
    "start": "391800",
    "end": "393440"
  },
  {
    "text": "instance from rust to another high level",
    "start": "393440",
    "end": "394960"
  },
  {
    "text": "language we typically use the unsafe C",
    "start": "394960",
    "end": "397160"
  },
  {
    "text": "carear even if both languages have safe",
    "start": "397160",
    "end": "399560"
  },
  {
    "text": "types for counted utf8 strings and like",
    "start": "399560",
    "end": "402280"
  },
  {
    "text": "I said before also furthermore higher",
    "start": "402280",
    "end": "404280"
  },
  {
    "text": "level data types such as option and rust",
    "start": "404280",
    "end": "406280"
  },
  {
    "text": "currently require translations into cabi",
    "start": "406280",
    "end": "409120"
  },
  {
    "text": "compatible types which discourages the",
    "start": "409120",
    "end": "410960"
  },
  {
    "text": "use of such types in Cross language",
    "start": "410960",
    "end": "412880"
  },
  {
    "text": "interfaces again we don't have a way of",
    "start": "412880",
    "end": "414880"
  },
  {
    "text": "communicating a generic type an option t",
    "start": "414880",
    "end": "417440"
  },
  {
    "text": "or result te so go check out this pull",
    "start": "417440",
    "end": "420520"
  },
  {
    "text": "request I think it's pretty interesting",
    "start": "420520",
    "end": "422000"
  },
  {
    "text": "the entire world of abis and how to make",
    "start": "422000",
    "end": "424800"
  },
  {
    "text": "systems more interoperable is really",
    "start": "424800",
    "end": "426280"
  },
  {
    "text": "interesting to me now let me know what",
    "start": "426280",
    "end": "428000"
  },
  {
    "text": "you think down in the comments will Rust",
    "start": "428000",
    "end": "429680"
  },
  {
    "text": "libraries ever exist will shared objects",
    "start": "429680",
    "end": "432360"
  },
  {
    "text": "rule the world and will Rust always",
    "start": "432360",
    "end": "434440"
  },
  {
    "text": "compile into these gigantic amorphous",
    "start": "434440",
    "end": "436759"
  },
  {
    "text": "monoliths if you like this video do me a",
    "start": "436759",
    "end": "438520"
  },
  {
    "text": "favor hit like hit subscribe and then go",
    "start": "438520",
    "end": "440639"
  },
  {
    "text": "check out this other video about an",
    "start": "440639",
    "end": "442440"
  },
  {
    "text": "internet enabled I'm not going to say it",
    "start": "442440",
    "end": "444919"
  },
  {
    "text": "but you you'll see",
    "start": "444919",
    "end": "447960"
  }
]