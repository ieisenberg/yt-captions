[
  {
    "text": "the buffer overflow the infamous hacking",
    "start": "440",
    "end": "3040"
  },
  {
    "text": "concept that has been plaguing the cyber",
    "start": "3040",
    "end": "4880"
  },
  {
    "text": "security Community since its",
    "start": "4880",
    "end": "6720"
  },
  {
    "text": "Inception attacks leveraging buffer",
    "start": "6720",
    "end": "8880"
  },
  {
    "text": "overflows have been the cause of",
    "start": "8880",
    "end": "10400"
  },
  {
    "text": "thousands of hacks leading to the theft",
    "start": "10400",
    "end": "12440"
  },
  {
    "text": "of personal information by cyber",
    "start": "12440",
    "end": "14040"
  },
  {
    "text": "criminals that is eventually sold on the",
    "start": "14040",
    "end": "15679"
  },
  {
    "text": "dark web but how do buffer overflows",
    "start": "15679",
    "end": "18640"
  },
  {
    "text": "work why have computers historically",
    "start": "18640",
    "end": "20800"
  },
  {
    "text": "been so prone to buffer overflows and",
    "start": "20800",
    "end": "23320"
  },
  {
    "text": "how does buffer overflow give a hacker",
    "start": "23320",
    "end": "25240"
  },
  {
    "text": "access to your computer and is there any",
    "start": "25240",
    "end": "27199"
  },
  {
    "text": "way to stop them",
    "start": "27199",
    "end": "30320"
  },
  {
    "text": "so what is a buffer overflow as the name",
    "start": "30320",
    "end": "33600"
  },
  {
    "text": "implies a buffer overflow is when a",
    "start": "33600",
    "end": "35480"
  },
  {
    "text": "buffer of memory is allocated for a",
    "start": "35480",
    "end": "37280"
  },
  {
    "text": "particular data type something in the",
    "start": "37280",
    "end": "39200"
  },
  {
    "text": "logic of the program goes wrong and more",
    "start": "39200",
    "end": "41440"
  },
  {
    "text": "memory fills the buffer than the buffer",
    "start": "41440",
    "end": "43399"
  },
  {
    "text": "has room for hence it is overflowed one",
    "start": "43399",
    "end": "46360"
  },
  {
    "text": "of the most commonly seen buffer",
    "start": "46360",
    "end": "47760"
  },
  {
    "text": "overflows originates from how strings",
    "start": "47760",
    "end": "49719"
  },
  {
    "text": "are stored in C a string in C like this",
    "start": "49719",
    "end": "52800"
  },
  {
    "text": "one is just an array of asky characters",
    "start": "52800",
    "end": "55840"
  },
  {
    "text": "and we can create a string with this",
    "start": "55840",
    "end": "57719"
  },
  {
    "text": "line of code when we go to print it the",
    "start": "57719",
    "end": "60000"
  },
  {
    "text": "the string prints out and everything",
    "start": "60000",
    "end": "61600"
  },
  {
    "text": "works out just fine but how does a",
    "start": "61600",
    "end": "64119"
  },
  {
    "text": "program know when to stop printing why",
    "start": "64119",
    "end": "66240"
  },
  {
    "text": "doesn't it just print all of the data",
    "start": "66240",
    "end": "68280"
  },
  {
    "text": "after the string too this is where",
    "start": "68280",
    "end": "70200"
  },
  {
    "text": "things in C start to get a little weird",
    "start": "70200",
    "end": "72840"
  },
  {
    "text": "you would think the answer is well",
    "start": "72840",
    "end": "74799"
  },
  {
    "text": "obviously the length of the string is",
    "start": "74799",
    "end": "76640"
  },
  {
    "text": "encoded near the string so print F just",
    "start": "76640",
    "end": "79240"
  },
  {
    "text": "reads that number as the length well",
    "start": "79240",
    "end": "82079"
  },
  {
    "text": "that's actually not the case remember",
    "start": "82079",
    "end": "84040"
  },
  {
    "text": "how I said that strings are just an",
    "start": "84040",
    "end": "85840"
  },
  {
    "text": "array of asky characters well yeah",
    "start": "85840",
    "end": "88159"
  },
  {
    "text": "that's all they are the only only way",
    "start": "88159",
    "end": "90439"
  },
  {
    "text": "functions know that they've reached the",
    "start": "90439",
    "end": "91960"
  },
  {
    "text": "end of a string is if they hit a special",
    "start": "91960",
    "end": "94119"
  },
  {
    "text": "character called the null bite if they",
    "start": "94119",
    "end": "96560"
  },
  {
    "text": "don't hit that null bite they'll just",
    "start": "96560",
    "end": "98520"
  },
  {
    "text": "keep going unfortunately strings that",
    "start": "98520",
    "end": "101200"
  },
  {
    "text": "just keep going apply not only to",
    "start": "101200",
    "end": "103159"
  },
  {
    "text": "displaying information but also getting",
    "start": "103159",
    "end": "105920"
  },
  {
    "text": "information from the user this is where",
    "start": "105920",
    "end": "109000"
  },
  {
    "text": "the hacking begins a well-known",
    "start": "109000",
    "end": "111000"
  },
  {
    "text": "vulnerable function get S does just this",
    "start": "111000",
    "end": "114640"
  },
  {
    "text": "it just keeps",
    "start": "114640",
    "end": "117119"
  },
  {
    "text": "going in this code here when I create a",
    "start": "117119",
    "end": "120000"
  },
  {
    "text": "buffer for a 64 byte string and use get",
    "start": "120000",
    "end": "123079"
  },
  {
    "text": "S to get a string from the user at first",
    "start": "123079",
    "end": "125920"
  },
  {
    "text": "everything seems fine if I give the",
    "start": "125920",
    "end": "128319"
  },
  {
    "text": "program more than 64 bytes this is where",
    "start": "128319",
    "end": "131440"
  },
  {
    "text": "things start to get a little weird",
    "start": "131440",
    "end": "133319"
  },
  {
    "text": "because get S doesn't know the length of",
    "start": "133319",
    "end": "135360"
  },
  {
    "text": "my buffer or the length of the input",
    "start": "135360",
    "end": "137319"
  },
  {
    "text": "string get S will read more than 64",
    "start": "137319",
    "end": "140560"
  },
  {
    "text": "bytes eventually after 70 or so bytes my",
    "start": "140560",
    "end": "144280"
  },
  {
    "text": "program begins to behave",
    "start": "144280",
    "end": "145760"
  },
  {
    "text": "non-deterministically and eventually",
    "start": "145760",
    "end": "147760"
  },
  {
    "text": "crashes gets is so Danger dous that even",
    "start": "147760",
    "end": "150920"
  },
  {
    "text": "the man page entry for get S says get S",
    "start": "150920",
    "end": "154120"
  },
  {
    "text": "is dangerous and it should not be used",
    "start": "154120",
    "end": "157160"
  },
  {
    "text": "but who cares how can data leaving a",
    "start": "157160",
    "end": "160040"
  },
  {
    "text": "buffer give a hacker control of my",
    "start": "160040",
    "end": "162879"
  },
  {
    "text": "computer hackers can abuse the buffer",
    "start": "162879",
    "end": "165239"
  },
  {
    "text": "overflow by taking advantage of how",
    "start": "165239",
    "end": "167159"
  },
  {
    "text": "functions call each other here I have",
    "start": "167159",
    "end": "169280"
  },
  {
    "text": "some code function main calls function",
    "start": "169280",
    "end": "171720"
  },
  {
    "text": "ad on the right I have a diagram",
    "start": "171720",
    "end": "173720"
  },
  {
    "text": "depicting memory in the program the",
    "start": "173720",
    "end": "175800"
  },
  {
    "text": "structure is referred to as the stack",
    "start": "175800",
    "end": "178440"
  },
  {
    "text": "when ad gets called by main a few things",
    "start": "178440",
    "end": "181200"
  },
  {
    "text": "happen first the arguments to add get",
    "start": "181200",
    "end": "184000"
  },
  {
    "text": "pushed onto the top of the stack that's",
    "start": "184000",
    "end": "186400"
  },
  {
    "text": "the numbers X and Y ad will use these",
    "start": "186400",
    "end": "188920"
  },
  {
    "text": "later as arguments into its function",
    "start": "188920",
    "end": "191959"
  },
  {
    "text": "after that the processor needs to",
    "start": "191959",
    "end": "193519"
  },
  {
    "text": "remember where in main to go after add",
    "start": "193519",
    "end": "196840"
  },
  {
    "text": "returns this is referred to as the",
    "start": "196840",
    "end": "199159"
  },
  {
    "text": "return address which is also pushed onto",
    "start": "199159",
    "end": "201440"
  },
  {
    "text": "the top of the stack once all of the",
    "start": "201440",
    "end": "203680"
  },
  {
    "text": "data is put on top of the stack ad gets",
    "start": "203680",
    "end": "206080"
  },
  {
    "text": "ran and AD makes room for its local",
    "start": "206080",
    "end": "208680"
  },
  {
    "text": "variables above all that other data ad",
    "start": "208680",
    "end": "211480"
  },
  {
    "text": "runs and eventually the program returns",
    "start": "211480",
    "end": "213720"
  },
  {
    "text": "into main where the function got called",
    "start": "213720",
    "end": "216400"
  },
  {
    "text": "do you see the problem if the called",
    "start": "216400",
    "end": "218640"
  },
  {
    "text": "function ad has a buffer overflow in it",
    "start": "218640",
    "end": "221439"
  },
  {
    "text": "the return address into main can get",
    "start": "221439",
    "end": "223879"
  },
  {
    "text": "overwritten pointing to code that wasn't",
    "start": "223879",
    "end": "226599"
  },
  {
    "text": "originally supposed to get ran let's",
    "start": "226599",
    "end": "229120"
  },
  {
    "text": "look at a different program this is a",
    "start": "229120",
    "end": "231720"
  },
  {
    "text": "secure server well not really but to get",
    "start": "231720",
    "end": "234519"
  },
  {
    "text": "into the server it checks your password",
    "start": "234519",
    "end": "236599"
  },
  {
    "text": "against a password that we can't see",
    "start": "236599",
    "end": "238439"
  },
  {
    "text": "here in the code if you get the password",
    "start": "238439",
    "end": "240519"
  },
  {
    "text": "right you get a shell on the server",
    "start": "240519",
    "end": "242680"
  },
  {
    "text": "seems pretty simple but look how we're",
    "start": "242680",
    "end": "245079"
  },
  {
    "text": "checking the password the first function",
    "start": "245079",
    "end": "247200"
  },
  {
    "text": "that gets called is get S remember how",
    "start": "247200",
    "end": "250079"
  },
  {
    "text": "the return address from Main was put",
    "start": "250079",
    "end": "252040"
  },
  {
    "text": "onto the stack well now if we overflow",
    "start": "252040",
    "end": "255879"
  },
  {
    "text": "the password buffer we can overwrite the",
    "start": "255879",
    "end": "258479"
  },
  {
    "text": "return address and return directly to",
    "start": "258479",
    "end": "260560"
  },
  {
    "text": "the debug function and get a shell",
    "start": "260560",
    "end": "262560"
  },
  {
    "text": "without knowing the password our server",
    "start": "262560",
    "end": "265600"
  },
  {
    "text": "has just been hacked that's pretty cool",
    "start": "265600",
    "end": "268600"
  },
  {
    "text": "but if we just stopped using get S does",
    "start": "268600",
    "end": "271400"
  },
  {
    "text": "the problem go away no the unbounded",
    "start": "271400",
    "end": "274520"
  },
  {
    "text": "string vulnerability is actually found",
    "start": "274520",
    "end": "276199"
  },
  {
    "text": "in a lot of other string operations in C",
    "start": "276199",
    "end": "278960"
  },
  {
    "text": "including stir copy scan f s printf",
    "start": "278960",
    "end": "282440"
  },
  {
    "text": "among a bunch of other",
    "start": "282440",
    "end": "284800"
  },
  {
    "text": "functions now don't let this stuff scare",
    "start": "284800",
    "end": "287400"
  },
  {
    "text": "you computer security has come a long",
    "start": "287400",
    "end": "289600"
  },
  {
    "text": "way over the last 20 years with",
    "start": "289600",
    "end": "291320"
  },
  {
    "text": "mitigations that make most of this code",
    "start": "291320",
    "end": "293280"
  },
  {
    "text": "really safe even with the use of these",
    "start": "293280",
    "end": "295520"
  },
  {
    "text": "dirty functions but those mitigations",
    "start": "295520",
    "end": "298000"
  },
  {
    "text": "would take an entire other video to",
    "start": "298000",
    "end": "301440"
  },
  {
    "text": "discuss when you're coding code",
    "start": "301440",
    "end": "303759"
  },
  {
    "text": "defensively don't trust the input of the",
    "start": "303759",
    "end": "306160"
  },
  {
    "text": "user at all assume they'll never play by",
    "start": "306160",
    "end": "308880"
  },
  {
    "text": "the rules and set limits on how much",
    "start": "308880",
    "end": "311039"
  },
  {
    "text": "data they're allowed to give you with n",
    "start": "311039",
    "end": "313360"
  },
  {
    "text": "variance of functions like stir end copy",
    "start": "313360",
    "end": "316080"
  },
  {
    "text": "an SN printf or if you want to try",
    "start": "316080",
    "end": "319080"
  },
  {
    "text": "hacking in a legal ethical way go play a",
    "start": "319080",
    "end": "321840"
  },
  {
    "text": "capture the flag or a CTF here I'll show",
    "start": "321840",
    "end": "324440"
  },
  {
    "text": "you Pico CTF one of my favorites ctfs",
    "start": "324440",
    "end": "327120"
  },
  {
    "text": "are a great way to be exposed to code",
    "start": "327120",
    "end": "328880"
  },
  {
    "text": "vulnerabilities not not only for the",
    "start": "328880",
    "end": "330560"
  },
  {
    "text": "hacking sake but also so that you can",
    "start": "330560",
    "end": "332360"
  },
  {
    "text": "make your code more",
    "start": "332360",
    "end": "334600"
  },
  {
    "text": "defensive before you start hacking away",
    "start": "334600",
    "end": "336759"
  },
  {
    "text": "leave a like and then go watch this",
    "start": "336759",
    "end": "338360"
  },
  {
    "text": "video on how these 14 characters will",
    "start": "338360",
    "end": "340600"
  },
  {
    "text": "crash your computer",
    "start": "340600",
    "end": "343800"
  }
]