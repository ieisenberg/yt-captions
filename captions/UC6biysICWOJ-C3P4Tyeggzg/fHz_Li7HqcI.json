[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": "as computers have evolved to have more",
    "start": "80",
    "end": "1920"
  },
  {
    "text": "cores with more threads of execution",
    "start": "1920",
    "end": "4080"
  },
  {
    "text": "concurrency has become an extremely",
    "start": "4080",
    "end": "5839"
  },
  {
    "text": "important topic in programming how can",
    "start": "5839",
    "end": "8160"
  },
  {
    "text": "my program use all processing power",
    "start": "8160",
    "end": "10639"
  },
  {
    "text": "available while performing",
    "start": "10639",
    "end": "12000"
  },
  {
    "text": "computationally intensive algorithms",
    "start": "12000",
    "end": "14160"
  },
  {
    "text": "while most languages have easy to use",
    "start": "14160",
    "end": "16240"
  },
  {
    "text": "multi-threading libraries available that",
    "start": "16240",
    "end": "18320"
  },
  {
    "text": "allow you to spawn additional threads",
    "start": "18320",
    "end": "20000"
  },
  {
    "text": "with only a few lines of code the",
    "start": "20000",
    "end": "21760"
  },
  {
    "text": "difficult part in concurrency is",
    "start": "21760",
    "end": "23680"
  },
  {
    "text": "multiple accesses to a singular data",
    "start": "23680",
    "end": "26000"
  },
  {
    "text": "location at the same time if not",
    "start": "26000",
    "end": "28080"
  },
  {
    "text": "properly designed multiple threads",
    "start": "28080",
    "end": "30000"
  },
  {
    "text": "accessing the same data location can",
    "start": "30000",
    "end": "32398"
  },
  {
    "text": "create what is known as a race condition",
    "start": "32399",
    "end": "34399"
  },
  {
    "text": "where the logic of your algorithm is a",
    "start": "34399",
    "end": "36719"
  },
  {
    "text": "function of who gets there first race",
    "start": "36719",
    "end": "39280"
  },
  {
    "text": "conditions can cause your program to",
    "start": "39280",
    "end": "40640"
  },
  {
    "text": "have poor performance broken",
    "start": "40640",
    "end": "42320"
  },
  {
    "text": "functionality or just straight up crash",
    "start": "42320",
    "end": "44960"
  },
  {
    "text": "safe multi-threaded concurrency in rust",
    "start": "44960",
    "end": "47120"
  },
  {
    "text": "is very similar to other languages but",
    "start": "47120",
    "end": "49120"
  },
  {
    "text": "there is a catch that we'll get to at",
    "start": "49120",
    "end": "50480"
  },
  {
    "start": "50000",
    "end": "117000"
  },
  {
    "text": "the end of the video step one just like",
    "start": "50480",
    "end": "52719"
  },
  {
    "text": "in c or python we need to import or",
    "start": "52719",
    "end": "55039"
  },
  {
    "text": "include the standard thread library now",
    "start": "55039",
    "end": "57920"
  },
  {
    "text": "we make a vector or a list that tracks",
    "start": "57920",
    "end": "60079"
  },
  {
    "text": "all of the handles to threads that we",
    "start": "60079",
    "end": "61840"
  },
  {
    "text": "create with our code so that we can",
    "start": "61840",
    "end": "63280"
  },
  {
    "text": "close them in the future in this program",
    "start": "63280",
    "end": "65280"
  },
  {
    "text": "we're going to spawn 10 threads so we",
    "start": "65280",
    "end": "66960"
  },
  {
    "text": "make a for loop from 0 to 10. and then",
    "start": "66960",
    "end": "69439"
  },
  {
    "text": "here we spawn a thread using the",
    "start": "69439",
    "end": "71119"
  },
  {
    "text": "standard thread library we use a rust",
    "start": "71119",
    "end": "73439"
  },
  {
    "text": "move closure to pass all variables into",
    "start": "73439",
    "end": "75600"
  },
  {
    "text": "the code by value and then the code on",
    "start": "75600",
    "end": "77680"
  },
  {
    "text": "line 8 will be executed in a separate",
    "start": "77680",
    "end": "79759"
  },
  {
    "text": "thread this line adds the newly created",
    "start": "79759",
    "end": "81840"
  },
  {
    "text": "thread handle to our list of handles so",
    "start": "81840",
    "end": "83759"
  },
  {
    "text": "we can join all the threads later on we",
    "start": "83759",
    "end": "85840"
  },
  {
    "text": "call join on all of our handles wait for",
    "start": "85840",
    "end": "87920"
  },
  {
    "text": "them to finish executing and then return",
    "start": "87920",
    "end": "90320"
  },
  {
    "text": "great so now our code is multithreaded",
    "start": "90320",
    "end": "92240"
  },
  {
    "text": "that seems easy enough what's the catch",
    "start": "92240",
    "end": "94400"
  },
  {
    "text": "let's take it up a notch in this program",
    "start": "94400",
    "end": "96720"
  },
  {
    "text": "we'll have an integer value that each",
    "start": "96720",
    "end": "98799"
  },
  {
    "text": "thread is responsible for incrementing",
    "start": "98799",
    "end": "100640"
  },
  {
    "text": "by one so at the end of the program the",
    "start": "100640",
    "end": "103119"
  },
  {
    "text": "value of this number should be 10. to do",
    "start": "103119",
    "end": "105840"
  },
  {
    "text": "this safely and correctly we'll need to",
    "start": "105840",
    "end": "107680"
  },
  {
    "text": "use a mutex a mutex is an object that is",
    "start": "107680",
    "end": "110560"
  },
  {
    "text": "used to ensure mutual exclusion meaning",
    "start": "110560",
    "end": "113119"
  },
  {
    "text": "that only one thread has access to a",
    "start": "113119",
    "end": "115119"
  },
  {
    "text": "resource at any given time here we'll",
    "start": "115119",
    "end": "117680"
  },
  {
    "start": "117000",
    "end": "135000"
  },
  {
    "text": "create the mutex with the integer value",
    "start": "117680",
    "end": "119840"
  },
  {
    "text": "0 as the controlled resource normally in",
    "start": "119840",
    "end": "122719"
  },
  {
    "text": "other languages like c or python mutexes",
    "start": "122719",
    "end": "125439"
  },
  {
    "text": "are just a lock object and then the",
    "start": "125439",
    "end": "127360"
  },
  {
    "text": "resource that is controlled is handled",
    "start": "127360",
    "end": "129360"
  },
  {
    "text": "separately in rust mutexes actually",
    "start": "129360",
    "end": "132080"
  },
  {
    "text": "contain the locked object",
    "start": "132080",
    "end": "134480"
  },
  {
    "text": "here we ask for an exclusive reference",
    "start": "134480",
    "end": "136879"
  },
  {
    "start": "135000",
    "end": "169000"
  },
  {
    "text": "to the integer from the mutex and then",
    "start": "136879",
    "end": "139520"
  },
  {
    "text": "use that reference to increment the",
    "start": "139520",
    "end": "141120"
  },
  {
    "text": "integer by one",
    "start": "141120",
    "end": "142959"
  },
  {
    "text": "but the real question is does this",
    "start": "142959",
    "end": "144800"
  },
  {
    "text": "compile and the answer is nope it",
    "start": "144800",
    "end": "147840"
  },
  {
    "text": "doesn't this is where rusk gets a little",
    "start": "147840",
    "end": "149760"
  },
  {
    "text": "funky when it comes to mutexes in thread",
    "start": "149760",
    "end": "152480"
  },
  {
    "text": "objects what's happening here may not be",
    "start": "152480",
    "end": "154640"
  },
  {
    "text": "obvious because we're in a move closure",
    "start": "154640",
    "end": "156959"
  },
  {
    "text": "meaning all values are passed by value",
    "start": "156959",
    "end": "159599"
  },
  {
    "text": "the mutex is told to invoke a copy trait",
    "start": "159599",
    "end": "162319"
  },
  {
    "text": "of itself which it does not implement",
    "start": "162319",
    "end": "164879"
  },
  {
    "text": "this causes our lock call to be",
    "start": "164879",
    "end": "166640"
  },
  {
    "text": "unreachable and ultimately fail the",
    "start": "166640",
    "end": "168480"
  },
  {
    "text": "compilation",
    "start": "168480",
    "end": "169599"
  },
  {
    "text": "and that's the catch in multi-threaded",
    "start": "169599",
    "end": "171519"
  },
  {
    "text": "rust programming we can't use the mutex",
    "start": "171519",
    "end": "173519"
  },
  {
    "text": "on its own instead we need to wrap the",
    "start": "173519",
    "end": "175599"
  },
  {
    "text": "mutex in what is known as a reference",
    "start": "175599",
    "end": "177360"
  },
  {
    "text": "structure that can be passed by value",
    "start": "177360",
    "end": "179440"
  },
  {
    "text": "into our movement closure to do this",
    "start": "179440",
    "end": "181680"
  },
  {
    "text": "we'll include the atomic reference",
    "start": "181680",
    "end": "183680"
  },
  {
    "text": "counted or arc from the standard sync",
    "start": "183680",
    "end": "186080"
  },
  {
    "text": "library and use it to reference our",
    "start": "186080",
    "end": "188239"
  },
  {
    "text": "mutex",
    "start": "188239",
    "end": "189280"
  },
  {
    "text": "next we'll use the arc to clone a",
    "start": "189280",
    "end": "191680"
  },
  {
    "text": "reference to our mutex which will get",
    "start": "191680",
    "end": "193920"
  },
  {
    "text": "moved by value into our move closure",
    "start": "193920",
    "end": "196400"
  },
  {
    "text": "moving the reference by value still",
    "start": "196400",
    "end": "198239"
  },
  {
    "text": "appears like a mutex and allows the",
    "start": "198239",
    "end": "200480"
  },
  {
    "text": "mutex's lock function to get called but",
    "start": "200480",
    "end": "203280"
  },
  {
    "text": "the million dollar question still",
    "start": "203280",
    "end": "204640"
  },
  {
    "text": "remains does it compile",
    "start": "204640",
    "end": "208640"
  },
  {
    "text": "and would you look at that it does",
    "start": "209920",
    "end": "211280"
  },
  {
    "text": "compile our multi-threaded code",
    "start": "211280",
    "end": "213440"
  },
  {
    "text": "increments that integer value up to 10",
    "start": "213440",
    "end": "215840"
  },
  {
    "text": "doing it in a multi-threaded way anyway",
    "start": "215840",
    "end": "218480"
  },
  {
    "text": "guys thanks for watching i really",
    "start": "218480",
    "end": "219680"
  },
  {
    "text": "appreciate it if you like this video or",
    "start": "219680",
    "end": "221280"
  },
  {
    "text": "if you learned something do me a favor",
    "start": "221280",
    "end": "222560"
  },
  {
    "text": "hit like hit subscribe leave a comment",
    "start": "222560",
    "end": "225519"
  },
  {
    "text": "down below and we'll see you guys in the",
    "start": "225519",
    "end": "227360"
  },
  {
    "text": "next video take care",
    "start": "227360",
    "end": "230650"
  },
  {
    "text": "[Music]",
    "start": "230650",
    "end": "235019"
  }
]