[
  {
    "start": "0",
    "end": "96000"
  },
  {
    "text": "it's amazing how easy it is to take the",
    "start": "260",
    "end": "3120"
  },
  {
    "text": "process of converting source code to",
    "start": "3120",
    "end": "5460"
  },
  {
    "text": "machine code for granted we invoke the",
    "start": "5460",
    "end": "7980"
  },
  {
    "text": "compiler and out pops our binary that we",
    "start": "7980",
    "end": "10260"
  },
  {
    "text": "can run and not really think about it",
    "start": "10260",
    "end": "12660"
  },
  {
    "text": "but if you want to improve our skills as",
    "start": "12660",
    "end": "14759"
  },
  {
    "text": "a developer it is crucial that we",
    "start": "14759",
    "end": "17100"
  },
  {
    "text": "understand the steps that get our code",
    "start": "17100",
    "end": "19380"
  },
  {
    "text": "for Being Human readable to a place",
    "start": "19380",
    "end": "21720"
  },
  {
    "text": "where the computer can execute it the",
    "start": "21720",
    "end": "23880"
  },
  {
    "text": "topics we're going to discuss today are",
    "start": "23880",
    "end": "25560"
  },
  {
    "text": "each extremely complicated in their own",
    "start": "25560",
    "end": "28140"
  },
  {
    "text": "right but by spending 10 minutes a day",
    "start": "28140",
    "end": "30539"
  },
  {
    "text": "on each one of these topics you can over",
    "start": "30539",
    "end": "33120"
  },
  {
    "text": "time become a 10x developer without even",
    "start": "33120",
    "end": "36600"
  },
  {
    "text": "thinking about it in this video we're",
    "start": "36600",
    "end": "38940"
  },
  {
    "text": "going to discuss the idea of compilers",
    "start": "38940",
    "end": "41120"
  },
  {
    "text": "executable file formats and how we get",
    "start": "41120",
    "end": "43620"
  },
  {
    "text": "that executable off the disk loaded into",
    "start": "43620",
    "end": "46079"
  },
  {
    "text": "RAM and executing on our computer and",
    "start": "46079",
    "end": "48420"
  },
  {
    "text": "before we start some of you here may be",
    "start": "48420",
    "end": "50100"
  },
  {
    "text": "brand new to computer science maybe",
    "start": "50100",
    "end": "51899"
  },
  {
    "text": "you've written zero lines of code what",
    "start": "51899",
    "end": "53820"
  },
  {
    "text": "if I told you there's a way that you",
    "start": "53820",
    "end": "54899"
  },
  {
    "text": "could learn computer science that was",
    "start": "54899",
    "end": "56399"
  },
  {
    "text": "free and easy that didn't break the bank",
    "start": "56399",
    "end": "58500"
  },
  {
    "text": "and did not cost thousands of dollars",
    "start": "58500",
    "end": "60239"
  },
  {
    "text": "the sponsor of today's video is",
    "start": "60239",
    "end": "61559"
  },
  {
    "text": "brilliant.org brilliant is the best way",
    "start": "61559",
    "end": "63600"
  },
  {
    "text": "to learn data science math and computer",
    "start": "63600",
    "end": "65460"
  },
  {
    "text": "science interactively my favorite part",
    "start": "65460",
    "end": "67860"
  },
  {
    "text": "about brilliant is that it's not a",
    "start": "67860",
    "end": "69600"
  },
  {
    "text": "boring lecture Series where you sit",
    "start": "69600",
    "end": "71100"
  },
  {
    "text": "there for an hour and watch a video and",
    "start": "71100",
    "end": "72780"
  },
  {
    "text": "then take a test afterward the content",
    "start": "72780",
    "end": "74760"
  },
  {
    "text": "is bite size it allows you to learn as",
    "start": "74760",
    "end": "77040"
  },
  {
    "text": "you go if you're not sure where to start",
    "start": "77040",
    "end": "78479"
  },
  {
    "text": "with programming if you're new here the",
    "start": "78479",
    "end": "79979"
  },
  {
    "text": "new thinking and code course gets you",
    "start": "79979",
    "end": "81360"
  },
  {
    "text": "designing real world programs that solve",
    "start": "81360",
    "end": "83640"
  },
  {
    "text": "real world problems and after watching",
    "start": "83640",
    "end": "85500"
  },
  {
    "text": "this video you can go to my URL",
    "start": "85500",
    "end": "87979"
  },
  {
    "text": "www.brilliant.org the level learning for",
    "start": "87979",
    "end": "90240"
  },
  {
    "text": "a free 30-day trial and 20 off your",
    "start": "90240",
    "end": "92880"
  },
  {
    "text": "first annual subscription thanks again",
    "start": "92880",
    "end": "94619"
  },
  {
    "text": "brilliant for sponsoring this video and",
    "start": "94619",
    "end": "96840"
  },
  {
    "start": "96000",
    "end": "160000"
  },
  {
    "text": "it all starts by picking a programming",
    "start": "96840",
    "end": "99119"
  },
  {
    "text": "language",
    "start": "99119",
    "end": "100500"
  },
  {
    "text": "at the end of the day computers can only",
    "start": "100500",
    "end": "102479"
  },
  {
    "text": "understand machine code the ones and",
    "start": "102479",
    "end": "104880"
  },
  {
    "text": "zeros that correspond to specific",
    "start": "104880",
    "end": "106740"
  },
  {
    "text": "transistors in the hardware of the CPU",
    "start": "106740",
    "end": "108900"
  },
  {
    "text": "that make the CPU do things now we could",
    "start": "108900",
    "end": "111600"
  },
  {
    "text": "crack open the Intel assembly manual and",
    "start": "111600",
    "end": "114119"
  },
  {
    "text": "write the binary by hand ourselves this",
    "start": "114119",
    "end": "116880"
  },
  {
    "text": "is entirely possible but crazy no one in",
    "start": "116880",
    "end": "120299"
  },
  {
    "text": "their right mind would do this except",
    "start": "120299",
    "end": "122040"
  },
  {
    "text": "for maybe this guy",
    "start": "122040",
    "end": "123479"
  },
  {
    "text": "if we make a simple mistake in our",
    "start": "123479",
    "end": "125340"
  },
  {
    "text": "binary and miss a single bit we could",
    "start": "125340",
    "end": "127979"
  },
  {
    "text": "accidentally flip the entire logic of",
    "start": "127979",
    "end": "130500"
  },
  {
    "text": "our program from a jump if to a jump not",
    "start": "130500",
    "end": "132780"
  },
  {
    "text": "it to fix this we have programming",
    "start": "132780",
    "end": "134940"
  },
  {
    "text": "languages a code that is more human",
    "start": "134940",
    "end": "137099"
  },
  {
    "text": "readable than the machine code that",
    "start": "137099",
    "end": "138720"
  },
  {
    "text": "eventually becomes a machine code that",
    "start": "138720",
    "end": "140640"
  },
  {
    "text": "our CPU can understand but there's a",
    "start": "140640",
    "end": "143340"
  },
  {
    "text": "problem we tried to feed the source code",
    "start": "143340",
    "end": "145620"
  },
  {
    "text": "directly into the CPU the CPU would have",
    "start": "145620",
    "end": "148620"
  },
  {
    "text": "no idea what we're talking about the CPU",
    "start": "148620",
    "end": "150660"
  },
  {
    "text": "does not speak our english-like language",
    "start": "150660",
    "end": "152879"
  },
  {
    "text": "and would not be able to run our code so",
    "start": "152879",
    "end": "155640"
  },
  {
    "text": "we need a tool that will convert our",
    "start": "155640",
    "end": "157739"
  },
  {
    "text": "human code into the machine code for us",
    "start": "157739",
    "end": "159900"
  },
  {
    "text": "hence compilers compilers take our",
    "start": "159900",
    "end": "163140"
  },
  {
    "start": "160000",
    "end": "341000"
  },
  {
    "text": "human-like code C for example and",
    "start": "163140",
    "end": "165420"
  },
  {
    "text": "convert it into the ones and zeros the",
    "start": "165420",
    "end": "167400"
  },
  {
    "text": "CPU knows how to run this is done in a",
    "start": "167400",
    "end": "169980"
  },
  {
    "text": "roughly three stage process flexing",
    "start": "169980",
    "end": "172319"
  },
  {
    "text": "parsing and co-generation in the Lexing",
    "start": "172319",
    "end": "175200"
  },
  {
    "text": "stage the compiler takes our strings and",
    "start": "175200",
    "end": "177239"
  },
  {
    "text": "turns them into tokens each token",
    "start": "177239",
    "end": "179400"
  },
  {
    "text": "representing a different part of the",
    "start": "179400",
    "end": "181260"
  },
  {
    "text": "expression",
    "start": "181260",
    "end": "182280"
  },
  {
    "text": "also during the lexical analysis the",
    "start": "182280",
    "end": "184560"
  },
  {
    "text": "compiler makes sure that our code",
    "start": "184560",
    "end": "185819"
  },
  {
    "text": "adheres to the grammar of the language",
    "start": "185819",
    "end": "187560"
  },
  {
    "text": "here for example int XX is not valid C",
    "start": "187560",
    "end": "191040"
  },
  {
    "text": "code once all of our code has been",
    "start": "191040",
    "end": "193319"
  },
  {
    "text": "converted into tokens the compiling",
    "start": "193319",
    "end": "195420"
  },
  {
    "text": "moves to the next stage of parsing",
    "start": "195420",
    "end": "197640"
  },
  {
    "text": "the tokens are parsed into a structure",
    "start": "197640",
    "end": "199739"
  },
  {
    "text": "known as an abstract syntax tree where",
    "start": "199739",
    "end": "202620"
  },
  {
    "text": "the tree represents the functional",
    "start": "202620",
    "end": "204420"
  },
  {
    "text": "nature of our program in terms of what",
    "start": "204420",
    "end": "206459"
  },
  {
    "text": "it is actually meant to execute as a",
    "start": "206459",
    "end": "208800"
  },
  {
    "text": "series of tokenized expression now",
    "start": "208800",
    "end": "211140"
  },
  {
    "text": "certain compilers like llvm for example",
    "start": "211140",
    "end": "213060"
  },
  {
    "text": "May convert our code into what is called",
    "start": "213060",
    "end": "214980"
  },
  {
    "text": "an intermediate representation or an IR",
    "start": "214980",
    "end": "217800"
  },
  {
    "text": "an IR is a universal Assembly Language",
    "start": "217800",
    "end": "220920"
  },
  {
    "text": "that is meant to represent the features",
    "start": "220920",
    "end": "223140"
  },
  {
    "text": "of a CPU without adhering to a specific",
    "start": "223140",
    "end": "225720"
  },
  {
    "text": "computer architecture once our IR has",
    "start": "225720",
    "end": "228239"
  },
  {
    "text": "been generated we move on to code",
    "start": "228239",
    "end": "229799"
  },
  {
    "text": "generation where the compiler outputs",
    "start": "229799",
    "end": "231959"
  },
  {
    "text": "the specific CPU Target machine code for",
    "start": "231959",
    "end": "235260"
  },
  {
    "text": "our processor in this case Intel",
    "start": "235260",
    "end": "237360"
  },
  {
    "text": "assembly but the compiler can't just",
    "start": "237360",
    "end": "239340"
  },
  {
    "text": "output a binary blob it has to Output a",
    "start": "239340",
    "end": "241560"
  },
  {
    "text": "format that the operating system knows",
    "start": "241560",
    "end": "243480"
  },
  {
    "text": "how to interpret which brings us to our",
    "start": "243480",
    "end": "245280"
  },
  {
    "text": "next topic executable file formats when",
    "start": "245280",
    "end": "248879"
  },
  {
    "text": "we run the code that we write a lot goes",
    "start": "248879",
    "end": "251280"
  },
  {
    "text": "on under the hood for example we may",
    "start": "251280",
    "end": "253620"
  },
  {
    "text": "have to link in external libraries like",
    "start": "253620",
    "end": "255659"
  },
  {
    "text": "lib C or we may have to handle",
    "start": "255659",
    "end": "257840"
  },
  {
    "text": "uninitialized variables that go into a",
    "start": "257840",
    "end": "260160"
  },
  {
    "text": "particular area of memory all of these",
    "start": "260160",
    "end": "262500"
  },
  {
    "text": "things have to be stored in a way that",
    "start": "262500",
    "end": "264660"
  },
  {
    "text": "the operating system knows how to deal",
    "start": "264660",
    "end": "266400"
  },
  {
    "text": "with them otherwise our code will not",
    "start": "266400",
    "end": "268560"
  },
  {
    "text": "function",
    "start": "268560",
    "end": "269639"
  },
  {
    "text": "to handle this the compiler has to know",
    "start": "269639",
    "end": "271740"
  },
  {
    "text": "what format to put our code into so that",
    "start": "271740",
    "end": "274800"
  },
  {
    "text": "the operating system and the compiler",
    "start": "274800",
    "end": "276600"
  },
  {
    "text": "get along in this video we're talking",
    "start": "276600",
    "end": "278580"
  },
  {
    "text": "about the executable linkable format",
    "start": "278580",
    "end": "280440"
  },
  {
    "text": "better known as the elf the file format",
    "start": "280440",
    "end": "282600"
  },
  {
    "text": "that Linux uses for its executables now",
    "start": "282600",
    "end": "285060"
  },
  {
    "text": "the elf has a lot of features but the",
    "start": "285060",
    "end": "286740"
  },
  {
    "text": "ones we're going to talk about are the",
    "start": "286740",
    "end": "288419"
  },
  {
    "text": "elf header the elf segments and the elf",
    "start": "288419",
    "end": "291180"
  },
  {
    "text": "sections the elf header is pretty simple",
    "start": "291180",
    "end": "293040"
  },
  {
    "text": "it just specifies that this is a file",
    "start": "293040",
    "end": "294960"
  },
  {
    "text": "format of an elf and describes a few",
    "start": "294960",
    "end": "297120"
  },
  {
    "text": "things like the number of segments and",
    "start": "297120",
    "end": "298620"
  },
  {
    "text": "sections the most important part of the",
    "start": "298620",
    "end": "300600"
  },
  {
    "text": "elf are the segments here your text",
    "start": "300600",
    "end": "303780"
  },
  {
    "text": "segment where your code lives in your",
    "start": "303780",
    "end": "305520"
  },
  {
    "text": "program is readable and executable and",
    "start": "305520",
    "end": "307979"
  },
  {
    "text": "here your data segment or predefined",
    "start": "307979",
    "end": "310500"
  },
  {
    "text": "data goes is readable and writable but",
    "start": "310500",
    "end": "313020"
  },
  {
    "text": "not executable each of these give the",
    "start": "313020",
    "end": "315540"
  },
  {
    "text": "kernel specific information about how to",
    "start": "315540",
    "end": "317940"
  },
  {
    "text": "load our compiled code into memory",
    "start": "317940",
    "end": "321180"
  },
  {
    "text": "this elf format is used by the kernel to",
    "start": "321180",
    "end": "324240"
  },
  {
    "text": "load the program correctly into memory",
    "start": "324240",
    "end": "326160"
  },
  {
    "text": "it is extremely important that your",
    "start": "326160",
    "end": "328139"
  },
  {
    "text": "segments are formatted correctly",
    "start": "328139",
    "end": "329400"
  },
  {
    "text": "otherwise the kernel won't load your",
    "start": "329400",
    "end": "331139"
  },
  {
    "text": "program into memory all of this is",
    "start": "331139",
    "end": "332880"
  },
  {
    "text": "stored in the elf format once the",
    "start": "332880",
    "end": "334740"
  },
  {
    "text": "compiler has produced this file we",
    "start": "334740",
    "end": "336180"
  },
  {
    "text": "arrive at the final stage of the process",
    "start": "336180",
    "end": "338520"
  },
  {
    "text": "and arguably one of the most complicated",
    "start": "338520",
    "end": "340500"
  },
  {
    "text": "executing the program now the finale",
    "start": "340500",
    "end": "343199"
  },
  {
    "start": "341000",
    "end": "526000"
  },
  {
    "text": "we've all waited for this moment we get",
    "start": "343199",
    "end": "344759"
  },
  {
    "text": "to run our program how amazing well",
    "start": "344759",
    "end": "347220"
  },
  {
    "text": "let's take a step back it gets pretty",
    "start": "347220",
    "end": "349199"
  },
  {
    "text": "complicated pretty fast to start the",
    "start": "349199",
    "end": "351720"
  },
  {
    "text": "parent process needs to inform the",
    "start": "351720",
    "end": "353580"
  },
  {
    "text": "operating system that it wants to run",
    "start": "353580",
    "end": "355199"
  },
  {
    "text": "your program now you may be thinking",
    "start": "355199",
    "end": "356940"
  },
  {
    "text": "wait a minute of the parent process what",
    "start": "356940",
    "end": "358440"
  },
  {
    "text": "is that I only wrote this piece of code",
    "start": "358440",
    "end": "360120"
  },
  {
    "text": "here not the parent when you run a",
    "start": "360120",
    "end": "361500"
  },
  {
    "text": "program every program needs to have a",
    "start": "361500",
    "end": "364020"
  },
  {
    "text": "parent process the process that told the",
    "start": "364020",
    "end": "366180"
  },
  {
    "text": "kernel that it wants to run your program",
    "start": "366180",
    "end": "368039"
  },
  {
    "text": "when you run your program on the command",
    "start": "368039",
    "end": "369720"
  },
  {
    "text": "line you run it in a shell sh sh is the",
    "start": "369720",
    "end": "373440"
  },
  {
    "text": "parent of that process because sh told",
    "start": "373440",
    "end": "375600"
  },
  {
    "text": "the kernel that your program needs to be",
    "start": "375600",
    "end": "377340"
  },
  {
    "text": "ran the parent program in Linux for",
    "start": "377340",
    "end": "379380"
  },
  {
    "text": "example will inform the operating system",
    "start": "379380",
    "end": "381120"
  },
  {
    "text": "system that it wants to run your program",
    "start": "381120",
    "end": "383160"
  },
  {
    "text": "by invoking what is called a syscall in",
    "start": "383160",
    "end": "385860"
  },
  {
    "text": "Linux exec ee the exec vesus call will",
    "start": "385860",
    "end": "388919"
  },
  {
    "text": "take as parameters the program path and",
    "start": "388919",
    "end": "391500"
  },
  {
    "text": "the arguments to the program that you",
    "start": "391500",
    "end": "393360"
  },
  {
    "text": "wrote the system call is a way to alert",
    "start": "393360",
    "end": "395220"
  },
  {
    "text": "the kernel hey I want to run this",
    "start": "395220",
    "end": "397319"
  },
  {
    "text": "program and the action of running a",
    "start": "397319",
    "end": "399180"
  },
  {
    "text": "program is a function that only the",
    "start": "399180",
    "end": "400860"
  },
  {
    "text": "kernel can do in its privileged",
    "start": "400860",
    "end": "402780"
  },
  {
    "text": "environment a privilege that you don't",
    "start": "402780",
    "end": "404400"
  },
  {
    "text": "have as the user when the kernel gets",
    "start": "404400",
    "end": "406139"
  },
  {
    "text": "this signal to run your program it does",
    "start": "406139",
    "end": "408060"
  },
  {
    "text": "a few really important things first the",
    "start": "408060",
    "end": "410220"
  },
  {
    "text": "kernel will take your Elf and try to",
    "start": "410220",
    "end": "411840"
  },
  {
    "text": "identify three locations in the elf the",
    "start": "411840",
    "end": "413940"
  },
  {
    "text": "text segment again where the code lives",
    "start": "413940",
    "end": "415979"
  },
  {
    "text": "the data segment where the data lives",
    "start": "415979",
    "end": "418319"
  },
  {
    "text": "it's already been initialized in the BSS",
    "start": "418319",
    "end": "420360"
  },
  {
    "text": "segment data that lives in your Elf but",
    "start": "420360",
    "end": "422039"
  },
  {
    "text": "has not been initialized yet any",
    "start": "422039",
    "end": "423780"
  },
  {
    "text": "variable basically that has the number",
    "start": "423780",
    "end": "425280"
  },
  {
    "text": "zero at default will be put into the BSS",
    "start": "425280",
    "end": "427680"
  },
  {
    "text": "the kernel allocates all of these",
    "start": "427680",
    "end": "429180"
  },
  {
    "text": "segments in memory based off of the",
    "start": "429180",
    "end": "430740"
  },
  {
    "text": "metadata in the elf format that your",
    "start": "430740",
    "end": "432600"
  },
  {
    "text": "compiler emitted before but there is one",
    "start": "432600",
    "end": "435360"
  },
  {
    "text": "more very important segment that we did",
    "start": "435360",
    "end": "437220"
  },
  {
    "text": "not talk about PT interp yeah so plot",
    "start": "437220",
    "end": "440220"
  },
  {
    "text": "twist when you run a program in Linux",
    "start": "440220",
    "end": "442139"
  },
  {
    "text": "you actually end up running two programs",
    "start": "442139",
    "end": "444479"
  },
  {
    "text": "your program gets loaded by the kernel",
    "start": "444479",
    "end": "446580"
  },
  {
    "text": "but the kernel looks into your Elf and",
    "start": "446580",
    "end": "449460"
  },
  {
    "text": "looks for a thing called the loader for",
    "start": "449460",
    "end": "451500"
  },
  {
    "text": "your program remember how I said before",
    "start": "451500",
    "end": "453000"
  },
  {
    "text": "that your program may depend on external",
    "start": "453000",
    "end": "455220"
  },
  {
    "text": "libraries or things like that that",
    "start": "455220",
    "end": "456660"
  },
  {
    "text": "needed to be loaded in at runtime for",
    "start": "456660",
    "end": "458520"
  },
  {
    "text": "your program to work properly the kernel",
    "start": "458520",
    "end": "460319"
  },
  {
    "text": "brings in a program called the dynamic",
    "start": "460319",
    "end": "461880"
  },
  {
    "text": "Linker that runs alongside your program",
    "start": "461880",
    "end": "464099"
  },
  {
    "text": "when it starts the dynamic Linker then",
    "start": "464099",
    "end": "466500"
  },
  {
    "text": "goes through and parses your Elf and",
    "start": "466500",
    "end": "468240"
  },
  {
    "text": "tries to find all of the symbols that",
    "start": "468240",
    "end": "470160"
  },
  {
    "text": "have not been resolved that need",
    "start": "470160",
    "end": "471539"
  },
  {
    "text": "external linkage for example in C in",
    "start": "471539",
    "end": "474060"
  },
  {
    "text": "Linux if your code depends on libc the",
    "start": "474060",
    "end": "476639"
  },
  {
    "text": "dynamic Linker that comes with your",
    "start": "476639",
    "end": "478080"
  },
  {
    "text": "program when it gets executed by the",
    "start": "478080",
    "end": "479639"
  },
  {
    "text": "kernel will go around and look for Liv C",
    "start": "479639",
    "end": "481620"
  },
  {
    "text": "and try to populate all of your entries",
    "start": "481620",
    "end": "483240"
  },
  {
    "text": "in your Global offset table before the",
    "start": "483240",
    "end": "485460"
  },
  {
    "text": "program runs once the dynamic Linker has",
    "start": "485460",
    "end": "487680"
  },
  {
    "text": "gone through and found all of the",
    "start": "487680",
    "end": "489180"
  },
  {
    "text": "resolutions for your program it will",
    "start": "489180",
    "end": "491160"
  },
  {
    "text": "eventually pass off code control to your",
    "start": "491160",
    "end": "493860"
  },
  {
    "text": "program and your code gets to run by",
    "start": "493860",
    "end": "496259"
  },
  {
    "text": "executing your start symbol amazing",
    "start": "496259",
    "end": "498180"
  },
  {
    "text": "we've gotten to the end wow what an",
    "start": "498180",
    "end": "500099"
  },
  {
    "text": "adventure I am exhausted I'm also",
    "start": "500099",
    "end": "501840"
  },
  {
    "text": "sweating my ass off because I'm in a",
    "start": "501840",
    "end": "503280"
  },
  {
    "text": "different Studio that's not in my house",
    "start": "503280",
    "end": "504479"
  },
  {
    "text": "and I have my lights up too bright the",
    "start": "504479",
    "end": "506520"
  },
  {
    "text": "world of programming is amazing many a",
    "start": "506520",
    "end": "508800"
  },
  {
    "text": "deep rabbit hole but each one of these",
    "start": "508800",
    "end": "510599"
  },
  {
    "text": "topics we talked about is a way that if",
    "start": "510599",
    "end": "512039"
  },
  {
    "text": "you just spend 10 minutes a day learning",
    "start": "512039",
    "end": "513959"
  },
  {
    "text": "a new little thing about that topic",
    "start": "513959",
    "end": "515700"
  },
  {
    "text": "you'll become a Next Level programmer",
    "start": "515700",
    "end": "518339"
  },
  {
    "text": "now before you go if you want to figure",
    "start": "518339",
    "end": "519899"
  },
  {
    "text": "out how NASA writes space proof code",
    "start": "519899",
    "end": "522180"
  },
  {
    "text": "code that doesn't crash in space check",
    "start": "522180",
    "end": "524339"
  },
  {
    "text": "this video out",
    "start": "524339",
    "end": "526940"
  }
]