[
  {
    "text": "hey I know what you're thinking why the",
    "start": "179",
    "end": "2760"
  },
  {
    "text": "hell would you marry rust isn't her",
    "start": "2760",
    "end": "4980"
  },
  {
    "text": "family really complicated and annoying",
    "start": "4980",
    "end": "6600"
  },
  {
    "text": "doesn't she have a lot of baggage well",
    "start": "6600",
    "end": "8880"
  },
  {
    "text": "yes a little does she know I'm doing",
    "start": "8880",
    "end": "11280"
  },
  {
    "text": "something that you all should do when",
    "start": "11280",
    "end": "12840"
  },
  {
    "text": "you get married I'm buying low and",
    "start": "12840",
    "end": "14940"
  },
  {
    "text": "selling High you see rust has a lot of",
    "start": "14940",
    "end": "17400"
  },
  {
    "text": "potential that not everyone can see",
    "start": "17400",
    "end": "19140"
  },
  {
    "text": "she's a complex Beautiful Beast rust may",
    "start": "19140",
    "end": "22680"
  },
  {
    "text": "be awkward and lumpy but in five to ten",
    "start": "22680",
    "end": "24600"
  },
  {
    "text": "years rust will be the language that all",
    "start": "24600",
    "end": "26460"
  },
  {
    "text": "the new programmers the new grammars the",
    "start": "26460",
    "end": "29340"
  },
  {
    "text": "nougats are going to be after she will",
    "start": "29340",
    "end": "31080"
  },
  {
    "text": "be sought after by all the land princes",
    "start": "31080",
    "end": "33420"
  },
  {
    "text": "now first understand that I am a",
    "start": "33420",
    "end": "35940"
  },
  {
    "text": "security researcher I research security",
    "start": "35940",
    "end": "38219"
  },
  {
    "text": "people give me code and I say this code",
    "start": "38219",
    "end": "40680"
  },
  {
    "text": "bad this code good this code bad this",
    "start": "40680",
    "end": "43559"
  },
  {
    "text": "code good and I move on with my day now",
    "start": "43559",
    "end": "45660"
  },
  {
    "text": "the reason for literally 70 of the",
    "start": "45660",
    "end": "48719"
  },
  {
    "text": "malicious vulnerabilities that hackers",
    "start": "48719",
    "end": "50460"
  },
  {
    "text": "use to hack into computers have been",
    "start": "50460",
    "end": "52320"
  },
  {
    "text": "because of memory corruption issues and",
    "start": "52320",
    "end": "54840"
  },
  {
    "text": "yeah the other 30 are because of logic",
    "start": "54840",
    "end": "57059"
  },
  {
    "text": "bugs Authentication misimplementation",
    "start": "57059",
    "end": "59039"
  },
  {
    "text": "cryptographic implementation SQL",
    "start": "59039",
    "end": "61739"
  },
  {
    "text": "injections squeal injections command",
    "start": "61739",
    "end": "63840"
  },
  {
    "text": "injections Etc but 70 are memory",
    "start": "63840",
    "end": "65820"
  },
  {
    "text": "corruption so you might be asking what",
    "start": "65820",
    "end": "67619"
  },
  {
    "text": "is memory corruption well it's when the",
    "start": "67619",
    "end": "69600"
  },
  {
    "text": "program lets you corrupt memory pretty",
    "start": "69600",
    "end": "71520"
  },
  {
    "text": "straightforward and who is the queen of",
    "start": "71520",
    "end": "73439"
  },
  {
    "text": "memory corruption you might ask the C",
    "start": "73439",
    "end": "75600"
  },
  {
    "text": "programming language so why is C so",
    "start": "75600",
    "end": "78119"
  },
  {
    "text": "dirty and rough so shiny and pretty well",
    "start": "78119",
    "end": "80520"
  },
  {
    "text": "C lets you do whatever you want C lets",
    "start": "80520",
    "end": "83460"
  },
  {
    "text": "you have raw pointer access see lets you",
    "start": "83460",
    "end": "85560"
  },
  {
    "text": "have raw memory access see lets you have",
    "start": "85560",
    "end": "87780"
  },
  {
    "text": "access to the kernel API see lets you",
    "start": "87780",
    "end": "90240"
  },
  {
    "text": "run any functions at any time with any",
    "start": "90240",
    "end": "92280"
  },
  {
    "text": "parameters and really doesn't ask any",
    "start": "92280",
    "end": "94080"
  },
  {
    "text": "questions until the program gets to a",
    "start": "94080",
    "end": "96240"
  },
  {
    "text": "point where it crashes Malik from the",
    "start": "96240",
    "end": "98100"
  },
  {
    "text": "Heap sure why not never free it ever",
    "start": "98100",
    "end": "100439"
  },
  {
    "text": "sure why not create a buffer on the",
    "start": "100439",
    "end": "102299"
  },
  {
    "text": "stack that has a static size then copy a",
    "start": "102299",
    "end": "103979"
  },
  {
    "text": "buffer from the user of unknown size",
    "start": "103979",
    "end": "105600"
  },
  {
    "text": "into Set static size buffer such that we",
    "start": "105600",
    "end": "107700"
  },
  {
    "text": "overflow a pointer and give the user the",
    "start": "107700",
    "end": "109259"
  },
  {
    "text": "ability to arbitrarily write data",
    "start": "109259",
    "end": "110759"
  },
  {
    "text": "anywhere into the program memory space",
    "start": "110759",
    "end": "113040"
  },
  {
    "text": "oh let's do it so what's the solution",
    "start": "113040",
    "end": "115140"
  },
  {
    "text": "how do we stop 70 of these bugs from",
    "start": "115140",
    "end": "117659"
  },
  {
    "text": "happening in the C programming language",
    "start": "117659",
    "end": "119159"
  },
  {
    "text": "how do we stop memory corruption from",
    "start": "119159",
    "end": "120960"
  },
  {
    "text": "happening entirely well essentially",
    "start": "120960",
    "end": "122460"
  },
  {
    "text": "we're left with two options the first",
    "start": "122460",
    "end": "124259"
  },
  {
    "text": "option is to fix C we can try to fix all",
    "start": "124259",
    "end": "126240"
  },
  {
    "text": "of C's problems we can apply Band-Aid",
    "start": "126240",
    "end": "128099"
  },
  {
    "text": "solutions to the language that's been",
    "start": "128099",
    "end": "129780"
  },
  {
    "text": "around for 50 years and come up with",
    "start": "129780",
    "end": "131459"
  },
  {
    "text": "Band-Aid solutions to fix all these",
    "start": "131459",
    "end": "132900"
  },
  {
    "text": "problems we can make another language",
    "start": "132900",
    "end": "134340"
  },
  {
    "text": "called C with classes and add the",
    "start": "134340",
    "end": "136200"
  },
  {
    "text": "kitchen sink of every feature that no",
    "start": "136200",
    "end": "137700"
  },
  {
    "text": "one asked for to try to Band-Aid",
    "start": "137700",
    "end": "139020"
  },
  {
    "text": "solution fix the C programming language",
    "start": "139020",
    "end": "140940"
  },
  {
    "text": "and not really accomplish anything and",
    "start": "140940",
    "end": "142440"
  },
  {
    "text": "then somehow still have the same memory",
    "start": "142440",
    "end": "144239"
  },
  {
    "text": "corruption problems or we can try",
    "start": "144239",
    "end": "146040"
  },
  {
    "text": "something new",
    "start": "146040",
    "end": "147239"
  },
  {
    "text": "damn she's beautiful what does rust have",
    "start": "147239",
    "end": "150360"
  },
  {
    "text": "that c doesn't have boom baby let me",
    "start": "150360",
    "end": "153239"
  },
  {
    "text": "tell you rust has a few features that",
    "start": "153239",
    "end": "154800"
  },
  {
    "text": "make her Rough Around the Edges but",
    "start": "154800",
    "end": "156540"
  },
  {
    "text": "makes her a good lifetime partner first",
    "start": "156540",
    "end": "158599"
  },
  {
    "text": "the borrow Checker the borrow Checker is",
    "start": "158599",
    "end": "161040"
  },
  {
    "text": "a feature in Rust that gives us control",
    "start": "161040",
    "end": "162660"
  },
  {
    "text": "of who owns the variable by default",
    "start": "162660",
    "end": "165120"
  },
  {
    "text": "variables in Rust are owned which means",
    "start": "165120",
    "end": "167220"
  },
  {
    "text": "that there's a definition of who is",
    "start": "167220",
    "end": "168599"
  },
  {
    "text": "responsible for creating and destroying",
    "start": "168599",
    "end": "170459"
  },
  {
    "text": "that variable when it goes out of scope",
    "start": "170459",
    "end": "172019"
  },
  {
    "text": "this means that a variable's value can",
    "start": "172019",
    "end": "173940"
  },
  {
    "text": "only be owned by one label in the",
    "start": "173940",
    "end": "175920"
  },
  {
    "text": "program at a time by giving that",
    "start": "175920",
    "end": "177300"
  },
  {
    "text": "ownership to somebody else you",
    "start": "177300",
    "end": "178500"
  },
  {
    "text": "effectively borrow the value and you",
    "start": "178500",
    "end": "180480"
  },
  {
    "text": "can't use it in the original label at",
    "start": "180480",
    "end": "182220"
  },
  {
    "text": "the same time this prevents memory",
    "start": "182220",
    "end": "183900"
  },
  {
    "text": "corruption like use after freeze that",
    "start": "183900",
    "end": "185640"
  },
  {
    "text": "are a whole class of vulnerabilities",
    "start": "185640",
    "end": "186840"
  },
  {
    "text": "that hackers use to hack into boxes most",
    "start": "186840",
    "end": "189720"
  },
  {
    "text": "beautifully Frost implements a bounce",
    "start": "189720",
    "end": "191220"
  },
  {
    "text": "checker on variables you can't access",
    "start": "191220",
    "end": "193080"
  },
  {
    "text": "outside of the bounds of a variable's",
    "start": "193080",
    "end": "195000"
  },
  {
    "text": "buffer the ability to do an arbitrary",
    "start": "195000",
    "end": "196379"
  },
  {
    "text": "right what where you can write anything",
    "start": "196379",
    "end": "198120"
  },
  {
    "text": "anywhere and take control of the program",
    "start": "198120",
    "end": "199739"
  },
  {
    "text": "is off the table now I've heard this",
    "start": "199739",
    "end": "201420"
  },
  {
    "text": "before and I don't want to hear it oh",
    "start": "201420",
    "end": "202739"
  },
  {
    "text": "but what about unsafe rust yeah I get",
    "start": "202739",
    "end": "205019"
  },
  {
    "text": "that unsafe rust exists and yes",
    "start": "205019",
    "end": "206459"
  },
  {
    "text": "obviously if you you write unsafe rust",
    "start": "206459",
    "end": "208739"
  },
  {
    "text": "rust is going to be unsafe but unsafe",
    "start": "208739",
    "end": "211080"
  },
  {
    "text": "rust only has its place in the bottom",
    "start": "211080",
    "end": "213000"
  },
  {
    "text": "half of the embedded world so why am I",
    "start": "213000",
    "end": "214920"
  },
  {
    "text": "marrying rust why am I making a lifelong",
    "start": "214920",
    "end": "216780"
  },
  {
    "text": "commitment to a language that has so",
    "start": "216780",
    "end": "218159"
  },
  {
    "text": "many problems because in my opinion rust",
    "start": "218159",
    "end": "219900"
  },
  {
    "text": "is the future of memory Safe program if",
    "start": "219900",
    "end": "221760"
  },
  {
    "text": "we aspire to live in a world where",
    "start": "221760",
    "end": "223140"
  },
  {
    "text": "hackers can't do evil rust is the way to",
    "start": "223140",
    "end": "225180"
  },
  {
    "text": "go now Russ may have some issues her",
    "start": "225180",
    "end": "226560"
  },
  {
    "text": "family may have problems her family may",
    "start": "226560",
    "end": "228120"
  },
  {
    "text": "be annoying sometimes I get that she may",
    "start": "228120",
    "end": "230040"
  },
  {
    "text": "need a facelift here and there but a",
    "start": "230040",
    "end": "231720"
  },
  {
    "text": "world that uses more rust is a safer",
    "start": "231720",
    "end": "233879"
  },
  {
    "text": "world and I think that's pretty neat so",
    "start": "233879",
    "end": "235860"
  },
  {
    "text": "the question remains when I marry rust",
    "start": "235860",
    "end": "237780"
  },
  {
    "text": "well I stop texting c will I delete C",
    "start": "237780",
    "end": "240239"
  },
  {
    "text": "from my phone and will I slide out of",
    "start": "240239",
    "end": "242280"
  },
  {
    "text": "C's DMS no not at all I think the",
    "start": "242280",
    "end": "244980"
  },
  {
    "text": "majority of the world still runs on CC",
    "start": "244980",
    "end": "246900"
  },
  {
    "text": "will be around for the foreseeable",
    "start": "246900",
    "end": "248159"
  },
  {
    "text": "future into decades into the future but",
    "start": "248159",
    "end": "250560"
  },
  {
    "text": "if you're a new programmer learning to",
    "start": "250560",
    "end": "252299"
  },
  {
    "text": "code I highly recommend that you take",
    "start": "252299",
    "end": "253980"
  },
  {
    "text": "some lessons from the rust language and",
    "start": "253980",
    "end": "256019"
  },
  {
    "text": "spend some time getting familiar with",
    "start": "256019",
    "end": "257459"
  },
  {
    "text": "the language that I think will take over",
    "start": "257459",
    "end": "258840"
  },
  {
    "text": "in the future if you like this video go",
    "start": "258840",
    "end": "261120"
  },
  {
    "text": "learn about C in this other video",
    "start": "261120",
    "end": "264560"
  }
]