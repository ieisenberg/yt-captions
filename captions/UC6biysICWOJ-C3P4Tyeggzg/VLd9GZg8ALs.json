[
  {
    "text": "reverse engineering is the Dark Art of",
    "start": "80",
    "end": "2320"
  },
  {
    "text": "taking code that somebody else wrote and",
    "start": "2320",
    "end": "4680"
  },
  {
    "text": "taking it apart to see what it does it's",
    "start": "4680",
    "end": "6919"
  },
  {
    "text": "kind of like a Rubik's Cube actually I'm",
    "start": "6919",
    "end": "9120"
  },
  {
    "text": "not really sure how that analogy works",
    "start": "9120",
    "end": "10400"
  },
  {
    "text": "out now maybe it's a piece of malware",
    "start": "10400",
    "end": "12280"
  },
  {
    "text": "maybe you're trying to figure out what",
    "start": "12280",
    "end": "13480"
  },
  {
    "text": "this malicious piece of code on your",
    "start": "13480",
    "end": "15120"
  },
  {
    "text": "computer did and by the way also lock",
    "start": "15120",
    "end": "17400"
  },
  {
    "text": "bit an international ransomware",
    "start": "17400",
    "end": "19560"
  },
  {
    "text": "organization just got rolled up by the",
    "start": "19560",
    "end": "21960"
  },
  {
    "text": "FBI God you love to see it or maybe it's",
    "start": "21960",
    "end": "24519"
  },
  {
    "text": "simpler than that maybe it's just a",
    "start": "24519",
    "end": "26279"
  },
  {
    "text": "puzzle and by taking apart this puzzle",
    "start": "26279",
    "end": "28599"
  },
  {
    "text": "you learn something new or kind of neat",
    "start": "28599",
    "end": "30240"
  },
  {
    "text": "about Computing these puzzles are called",
    "start": "30240",
    "end": "32439"
  },
  {
    "text": "crackme challenges and by solving one",
    "start": "32439",
    "end": "34840"
  },
  {
    "text": "typically you make yourself a better",
    "start": "34840",
    "end": "36600"
  },
  {
    "text": "programmer by learning a little bit",
    "start": "36600",
    "end": "38440"
  },
  {
    "text": "about how computers work at a",
    "start": "38440",
    "end": "39879"
  },
  {
    "text": "fundamental level also don't worry about",
    "start": "39879",
    "end": "42200"
  },
  {
    "text": "these empty boxes I'm just moving now",
    "start": "42200",
    "end": "45039"
  },
  {
    "text": "today we're going to solve a fairly",
    "start": "45039",
    "end": "46960"
  },
  {
    "text": "straightforward crackme one for the arm",
    "start": "46960",
    "end": "49160"
  },
  {
    "text": "architecture but not in the way that",
    "start": "49160",
    "end": "51120"
  },
  {
    "text": "you're probably used to we're going to",
    "start": "51120",
    "end": "52640"
  },
  {
    "text": "use a program called anger and that's an",
    "start": "52640",
    "end": "54800"
  },
  {
    "text": "anger without an e and it has some",
    "start": "54800",
    "end": "57079"
  },
  {
    "text": "really really interesting properties now",
    "start": "57079",
    "end": "58840"
  },
  {
    "text": "if you're new here this is lowle",
    "start": "58840",
    "end": "60320"
  },
  {
    "text": "learning a channel where I do videos",
    "start": "60320",
    "end": "62079"
  },
  {
    "text": "about low-l computer programming and",
    "start": "62079",
    "end": "64040"
  },
  {
    "text": "software security if that interests you",
    "start": "64040",
    "end": "66080"
  },
  {
    "text": "hit the Subscribe button and leave a",
    "start": "66080",
    "end": "67320"
  },
  {
    "text": "like now let's get into that crack me",
    "start": "67320",
    "end": "69920"
  },
  {
    "text": "I'm not like physically going anywhere",
    "start": "69920",
    "end": "71280"
  },
  {
    "text": "I'm not sure why I'm motioned this way",
    "start": "71280",
    "end": "72640"
  },
  {
    "text": "now come on take a seat we're going to",
    "start": "72640",
    "end": "73880"
  },
  {
    "text": "download this one called towels",
    "start": "73880",
    "end": "75240"
  },
  {
    "text": "Armageddon I'm choosing this one because",
    "start": "75240",
    "end": "77320"
  },
  {
    "text": "it's an arm architecture binary for",
    "start": "77320",
    "end": "79320"
  },
  {
    "text": "those of you that are new and may want",
    "start": "79320",
    "end": "80439"
  },
  {
    "text": "to be doing this stuff or trying to",
    "start": "80439",
    "end": "81840"
  },
  {
    "text": "learn the art of Assembly Language",
    "start": "81840",
    "end": "83400"
  },
  {
    "text": "reverse engineering I highly recommend",
    "start": "83400",
    "end": "85400"
  },
  {
    "text": "the arm architecture because it's a",
    "start": "85400",
    "end": "87079"
  },
  {
    "text": "reduced instruction set computer",
    "start": "87079",
    "end": "89200"
  },
  {
    "text": "architecture which is really really",
    "start": "89200",
    "end": "90720"
  },
  {
    "text": "simple to understand compared to some of",
    "start": "90720",
    "end": "92000"
  },
  {
    "text": "the variable length ones like Intel I've",
    "start": "92000",
    "end": "93880"
  },
  {
    "text": "got it downloaded here and we have the",
    "start": "93880",
    "end": "95399"
  },
  {
    "text": "file here it's going to be called",
    "start": "95399",
    "end": "96840"
  },
  {
    "text": "Armageddon ex sense it's an arm binary",
    "start": "96840",
    "end": "98560"
  },
  {
    "text": "we can kind of check that and make sure",
    "start": "98560",
    "end": "100119"
  },
  {
    "text": "that it is what they say it is it's a",
    "start": "100119",
    "end": "102000"
  },
  {
    "text": "32-bit least significant bit so little",
    "start": "102000",
    "end": "103960"
  },
  {
    "text": "Indian Arm binary great it's uh",
    "start": "103960",
    "end": "106920"
  },
  {
    "text": "dynamically linked and it's stripped",
    "start": "106920",
    "end": "108479"
  },
  {
    "text": "stripped meaning that it has no debug",
    "start": "108479",
    "end": "110520"
  },
  {
    "text": "information there's no fancy symbols",
    "start": "110520",
    "end": "112280"
  },
  {
    "text": "kind of tell what's going on uh in the",
    "start": "112280",
    "end": "113759"
  },
  {
    "text": "binary so what I like to do when I'm",
    "start": "113759",
    "end": "114840"
  },
  {
    "text": "doing any of these crack mes is first",
    "start": "114840",
    "end": "116640"
  },
  {
    "text": "just run strings on it I know strings is",
    "start": "116640",
    "end": "118360"
  },
  {
    "text": "kind of like the go-to as like a joke",
    "start": "118360",
    "end": "120119"
  },
  {
    "text": "Noob tool to figure out like if the flag",
    "start": "120119",
    "end": "122640"
  },
  {
    "text": "is just put in the binary you'll just",
    "start": "122640",
    "end": "124079"
  },
  {
    "text": "see it pop out but I also like to use",
    "start": "124079",
    "end": "125840"
  },
  {
    "text": "strings on binaries to figure out what",
    "start": "125840",
    "end": "127200"
  },
  {
    "text": "I'm getting myself into right I can",
    "start": "127200",
    "end": "128800"
  },
  {
    "text": "typically pretty quickly in a binary see",
    "start": "128800",
    "end": "131080"
  },
  {
    "text": "from strings like what's going on so",
    "start": "131080",
    "end": "132760"
  },
  {
    "text": "let's kind of look at the functions here",
    "start": "132760",
    "end": "134720"
  },
  {
    "text": "it loads up the loader obviously uh",
    "start": "134720",
    "end": "136760"
  },
  {
    "text": "depends on libc that makes sense we call",
    "start": "136760",
    "end": "138480"
  },
  {
    "text": "a function a couple function calls so we",
    "start": "138480",
    "end": "139920"
  },
  {
    "text": "have exit scan F puts abort print F and",
    "start": "139920",
    "end": "143400"
  },
  {
    "text": "then libc start man and I'm not seeing",
    "start": "143400",
    "end": "145080"
  },
  {
    "text": "any other symbol names uh eventually",
    "start": "145080",
    "end": "148200"
  },
  {
    "text": "they're going to probably print some",
    "start": "148200",
    "end": "149160"
  },
  {
    "text": "prompt you oh it's from UMD that's",
    "start": "149160",
    "end": "150800"
  },
  {
    "text": "pretty cool UMD CTF 2019 uh the code did",
    "start": "150800",
    "end": "153800"
  },
  {
    "text": "not validate otherwise we enter a code",
    "start": "153800",
    "end": "156680"
  },
  {
    "text": "and then that's it okay so it looks like",
    "start": "156680",
    "end": "158519"
  },
  {
    "text": "we're going to put in some kind of code",
    "start": "158519",
    "end": "160159"
  },
  {
    "text": "that is uh 41 characters long and then",
    "start": "160159",
    "end": "163080"
  },
  {
    "text": "from there we're going to get a flag",
    "start": "163080",
    "end": "164879"
  },
  {
    "text": "pretty pretty straightforward awesome so",
    "start": "164879",
    "end": "167680"
  },
  {
    "text": "what we're going to do is we're going to",
    "start": "167680",
    "end": "168640"
  },
  {
    "text": "put this into gidra gidra is the reverse",
    "start": "168640",
    "end": "170959"
  },
  {
    "text": "engineering framework by the NSA it's",
    "start": "170959",
    "end": "172480"
  },
  {
    "text": "open source it's really cool uh gidra 11",
    "start": "172480",
    "end": "174760"
  },
  {
    "text": "just came out which means gidra dark",
    "start": "174760",
    "end": "176680"
  },
  {
    "text": "mode exists so that's freaking awesome",
    "start": "176680",
    "end": "179599"
  },
  {
    "text": "um if you're new to the world of everse",
    "start": "179599",
    "end": "181159"
  },
  {
    "text": "engineering what we're looking at here",
    "start": "181159",
    "end": "182920"
  },
  {
    "text": "is the actual binary code right so on",
    "start": "182920",
    "end": "185480"
  },
  {
    "text": "the left is the disassembly which is",
    "start": "185480",
    "end": "187879"
  },
  {
    "text": "this the assembly code broken into the",
    "start": "187879",
    "end": "189799"
  },
  {
    "text": "assembly operations and then on the",
    "start": "189799",
    "end": "191959"
  },
  {
    "text": "right is ged's interpretation of what",
    "start": "191959",
    "end": "194640"
  },
  {
    "text": "that code looked like in C obviously we",
    "start": "194640",
    "end": "196799"
  },
  {
    "text": "don't have debug information so we don't",
    "start": "196799",
    "end": "198640"
  },
  {
    "text": "know what the source code was but gidra",
    "start": "198640",
    "end": "200519"
  },
  {
    "text": "is doing its best to lift that into a",
    "start": "200519",
    "end": "202879"
  },
  {
    "text": "meaningful representation using the C",
    "start": "202879",
    "end": "205599"
  },
  {
    "text": "programming language let's take a look",
    "start": "205599",
    "end": "206840"
  },
  {
    "text": "and see what uh what kind of trouble",
    "start": "206840",
    "end": "207920"
  },
  {
    "text": "we're getting into here so the reason I",
    "start": "207920",
    "end": "210400"
  },
  {
    "text": "went to this function is because it is",
    "start": "210400",
    "end": "211879"
  },
  {
    "text": "called from the entry point right so any",
    "start": "211879",
    "end": "213920"
  },
  {
    "text": "binary that uses libc the entry symbol",
    "start": "213920",
    "end": "216599"
  },
  {
    "text": "gets called that calls libc start Main",
    "start": "216599",
    "end": "218959"
  },
  {
    "text": "and that first function here is always",
    "start": "218959",
    "end": "220480"
  },
  {
    "text": "the main function that's how lib start",
    "start": "220480",
    "end": "222159"
  },
  {
    "text": "main is uh is derived so we can go ahead",
    "start": "222159",
    "end": "224159"
  },
  {
    "text": "and hit the F key to turn this into a",
    "start": "224159",
    "end": "225720"
  },
  {
    "text": "function and you'll see that now it's",
    "start": "225720",
    "end": "227400"
  },
  {
    "text": "not purple we're not in like this weird",
    "start": "227400",
    "end": "228680"
  },
  {
    "text": "error State and I'm going to increase",
    "start": "228680",
    "end": "230720"
  },
  {
    "text": "the font size a little bit for you guys",
    "start": "230720",
    "end": "232519"
  },
  {
    "text": "if you guys if you guys needed that on",
    "start": "232519",
    "end": "233879"
  },
  {
    "text": "mobile please do me a favor say thanks",
    "start": "233879",
    "end": "235680"
  },
  {
    "text": "Tri l in the chat very cool I also want",
    "start": "235680",
    "end": "237799"
  },
  {
    "text": "you guys be able to see this cool so we",
    "start": "237799",
    "end": "239239"
  },
  {
    "text": "have that going going on and we can see",
    "start": "239239",
    "end": "240920"
  },
  {
    "text": "here that the program looks pretty",
    "start": "240920",
    "end": "242640"
  },
  {
    "text": "simple we print out the prompt we say",
    "start": "242640",
    "end": "244879"
  },
  {
    "text": "enter code and then we do scanf uh into",
    "start": "244879",
    "end": "248400"
  },
  {
    "text": "the stack using some format string and I",
    "start": "248400",
    "end": "250400"
  },
  {
    "text": "the format string is that percent 41s",
    "start": "250400",
    "end": "253159"
  },
  {
    "text": "this means we're going to input 41",
    "start": "253159",
    "end": "255120"
  },
  {
    "text": "characters of string data and then do",
    "start": "255120",
    "end": "257600"
  },
  {
    "text": "some operation on them so we're just",
    "start": "257600",
    "end": "258840"
  },
  {
    "text": "going to rename this this uh variable uh",
    "start": "258840",
    "end": "261239"
  },
  {
    "text": "our data right and we can do that by",
    "start": "261239",
    "end": "262880"
  },
  {
    "text": "pressing L and then typing our data and",
    "start": "262880",
    "end": "264960"
  },
  {
    "text": "we'll just call that format to we're",
    "start": "264960",
    "end": "266759"
  },
  {
    "text": "trying to turn all of these labels into",
    "start": "266759",
    "end": "268919"
  },
  {
    "text": "things we can just easily read in",
    "start": "268919",
    "end": "270400"
  },
  {
    "text": "English because the less uh nonsense we",
    "start": "270400",
    "end": "272600"
  },
  {
    "text": "have the more easy it is to understand",
    "start": "272600",
    "end": "274080"
  },
  {
    "text": "what the code is actually doing I did",
    "start": "274080",
    "end": "275400"
  },
  {
    "text": "notice in the description of the",
    "start": "275400",
    "end": "276320"
  },
  {
    "text": "challenge they said it features some",
    "start": "276320",
    "end": "277919"
  },
  {
    "text": "very light arm assembly obfuscation it",
    "start": "277919",
    "end": "280520"
  },
  {
    "text": "was originally released UMD CF 2019 okay",
    "start": "280520",
    "end": "283199"
  },
  {
    "text": "but what's cool is that we can see that",
    "start": "283199",
    "end": "285240"
  },
  {
    "text": "obfuscation happening in the assembly",
    "start": "285240",
    "end": "287320"
  },
  {
    "text": "but ged's lifter gidra is like you know",
    "start": "287320",
    "end": "289680"
  },
  {
    "text": "interpreter into C doesn't have to worry",
    "start": "289680",
    "end": "291960"
  },
  {
    "text": "about it but what you're actually seeing",
    "start": "291960",
    "end": "293240"
  },
  {
    "text": "here is after every function or after",
    "start": "293240",
    "end": "295960"
  },
  {
    "text": "literally every assembly instruction",
    "start": "295960",
    "end": "298240"
  },
  {
    "text": "it's branching ahead to the next",
    "start": "298240",
    "end": "300160"
  },
  {
    "text": "instruction and there's garbage data in",
    "start": "300160",
    "end": "301759"
  },
  {
    "text": "the middle we can actually see that",
    "start": "301759",
    "end": "303520"
  },
  {
    "text": "pretty straightforward if we go to the",
    "start": "303520",
    "end": "305039"
  },
  {
    "text": "binary and try to object dump it it's",
    "start": "305039",
    "end": "307160"
  },
  {
    "text": "very difficult to see what's going on in",
    "start": "307160",
    "end": "308759"
  },
  {
    "text": "the program so we see the call to liy",
    "start": "308759",
    "end": "310520"
  },
  {
    "text": "start main here and we can tell where",
    "start": "310520",
    "end": "312639"
  },
  {
    "text": "the main symbol is by the r0o value in",
    "start": "312639",
    "end": "315240"
  },
  {
    "text": "the liy start main call it's going to be",
    "start": "315240",
    "end": "316800"
  },
  {
    "text": "at 1040 and then 1040 or 10400 contains",
    "start": "316800",
    "end": "320759"
  },
  {
    "text": "the variable uh 14804 so we can go to",
    "start": "320759",
    "end": "323680"
  },
  {
    "text": "that and so this is our start symbol",
    "start": "323680",
    "end": "325800"
  },
  {
    "text": "right but now what's happening is",
    "start": "325800",
    "end": "327319"
  },
  {
    "text": "because we don't have control flow",
    "start": "327319",
    "end": "328919"
  },
  {
    "text": "information we have arrows that are",
    "start": "328919",
    "end": "330400"
  },
  {
    "text": "showing us what's happening we have a",
    "start": "330400",
    "end": "332759"
  },
  {
    "text": "branch to this label and then this",
    "start": "332759",
    "end": "334960"
  },
  {
    "text": "instruction runs and then another Branch",
    "start": "334960",
    "end": "336759"
  },
  {
    "text": "so it Oates the code in a way that makes",
    "start": "336759",
    "end": "338520"
  },
  {
    "text": "it very difficult to interpret Rising",
    "start": "338520",
    "end": "340680"
  },
  {
    "text": "gedra we getting really really useful",
    "start": "340680",
    "end": "342280"
  },
  {
    "text": "information in the in the form of c and",
    "start": "342280",
    "end": "344319"
  },
  {
    "text": "not in the form of assembly that's been",
    "start": "344319",
    "end": "345639"
  },
  {
    "text": "aisc by the compiler the challenge is to",
    "start": "345639",
    "end": "348000"
  },
  {
    "text": "input the correct data and get a flag",
    "start": "348000",
    "end": "351800"
  },
  {
    "text": "out of it right so we have to know what",
    "start": "351800",
    "end": "353160"
  },
  {
    "text": "the good data is and then it'll print",
    "start": "353160",
    "end": "355360"
  },
  {
    "text": "out the you did it string so I think",
    "start": "355360",
    "end": "357440"
  },
  {
    "text": "what's Happening Here is this is them",
    "start": "357440",
    "end": "360120"
  },
  {
    "text": "decoding the you didit string right so",
    "start": "360120",
    "end": "362680"
  },
  {
    "text": "what's what's going on here we have a",
    "start": "362680",
    "end": "364039"
  },
  {
    "text": "bunch of I'm trying to get my fat head",
    "start": "364039",
    "end": "366639"
  },
  {
    "text": "out of the way so you guys can see this",
    "start": "366639",
    "end": "368000"
  },
  {
    "text": "but yeah there's there's some basic",
    "start": "368000",
    "end": "369560"
  },
  {
    "text": "binary alisation going on here where",
    "start": "369560",
    "end": "371599"
  },
  {
    "text": "they have some string and a counter so",
    "start": "371599",
    "end": "373560"
  },
  {
    "text": "we'll rename this counter yeah so",
    "start": "373560",
    "end": "374960"
  },
  {
    "text": "they're literally just like adding some",
    "start": "374960",
    "end": "376360"
  },
  {
    "text": "values exloring it and taking it apart",
    "start": "376360",
    "end": "378280"
  },
  {
    "text": "but we're actually worried about is",
    "start": "378280",
    "end": "379800"
  },
  {
    "text": "finding out the data that's required to",
    "start": "379800",
    "end": "381479"
  },
  {
    "text": "go into this program to get to this",
    "start": "381479",
    "end": "383080"
  },
  {
    "text": "point so if we go to one of these",
    "start": "383080",
    "end": "385319"
  },
  {
    "text": "functions for example let's see what's",
    "start": "385319",
    "end": "386560"
  },
  {
    "text": "going on here we have so this is the",
    "start": "386560",
    "end": "388800"
  },
  {
    "text": "input this going to be a um care star CU",
    "start": "388800",
    "end": "391560"
  },
  {
    "text": "that's our our input to the program if",
    "start": "391560",
    "end": "393479"
  },
  {
    "text": "string of 1 * string of 27 * string of",
    "start": "393479",
    "end": "396199"
  },
  {
    "text": "15 Okay blah blah blah blah equals does",
    "start": "396199",
    "end": "399080"
  },
  {
    "text": "not equal some magic value the code did",
    "start": "399080",
    "end": "401479"
  },
  {
    "text": "not validate okay so we're seeing some",
    "start": "401479",
    "end": "403960"
  },
  {
    "text": "initial constraints on the value here",
    "start": "403960",
    "end": "406280"
  },
  {
    "text": "that we have to solve so we have to",
    "start": "406280",
    "end": "407759"
  },
  {
    "text": "figure out some kind of math that makes",
    "start": "407759",
    "end": "410000"
  },
  {
    "text": "all of these things possible okay so",
    "start": "410000",
    "end": "412039"
  },
  {
    "text": "let's see what else we can do if the",
    "start": "412039",
    "end": "414280"
  },
  {
    "text": "code keeps going like this it's going to",
    "start": "414280",
    "end": "416199"
  },
  {
    "text": "be very painful because you know it",
    "start": "416199",
    "end": "418000"
  },
  {
    "text": "looks like we have multiple validations",
    "start": "418000",
    "end": "420199"
  },
  {
    "text": "to check yeah okay if if this minus this",
    "start": "420199",
    "end": "424080"
  },
  {
    "text": "times this is not equal to this value",
    "start": "424080",
    "end": "425599"
  },
  {
    "text": "and I'm I'm guessing that like every one",
    "start": "425599",
    "end": "427520"
  },
  {
    "text": "of these validation functions is going",
    "start": "427520",
    "end": "428639"
  },
  {
    "text": "to be like that okay yeah",
    "start": "428639",
    "end": "431720"
  },
  {
    "text": "so this is quickly turning into a very",
    "start": "431720",
    "end": "434800"
  },
  {
    "text": "painful math",
    "start": "434800",
    "end": "436840"
  },
  {
    "text": "problem H let's see so what we're going",
    "start": "436840",
    "end": "439800"
  },
  {
    "text": "to do is we're going to use a library",
    "start": "439800",
    "end": "442080"
  },
  {
    "text": "called anger as the description here",
    "start": "442080",
    "end": "444120"
  },
  {
    "text": "says anger is an open-source binary",
    "start": "444120",
    "end": "446440"
  },
  {
    "text": "analysis platform for python it comes",
    "start": "446440",
    "end": "448400"
  },
  {
    "text": "with both static and Dynamic symbol can",
    "start": "448400",
    "end": "450639"
  },
  {
    "text": "colic analysis providing tools to solve",
    "start": "450639",
    "end": "452800"
  },
  {
    "text": "a variety of tasks the primary one we're",
    "start": "452800",
    "end": "455039"
  },
  {
    "text": "going to look at today is this idea of",
    "start": "455039",
    "end": "457360"
  },
  {
    "text": "symbolic execution specifically with",
    "start": "457360",
    "end": "460319"
  },
  {
    "text": "constraint solving what's really really",
    "start": "460319",
    "end": "462400"
  },
  {
    "text": "cool is anger has this idea of",
    "start": "462400",
    "end": "465360"
  },
  {
    "text": "Pathfinders so if you consider the",
    "start": "465360",
    "end": "467080"
  },
  {
    "text": "program as we are trying to run the",
    "start": "467080",
    "end": "469599"
  },
  {
    "text": "program to its completion where we get",
    "start": "469599",
    "end": "471720"
  },
  {
    "text": "to the puts stage where it puts this",
    "start": "471720",
    "end": "474039"
  },
  {
    "text": "magical value we need to get there by",
    "start": "474039",
    "end": "477360"
  },
  {
    "text": "avoiding all of these exit statements",
    "start": "477360",
    "end": "480280"
  },
  {
    "text": "right we want to avoid any code that",
    "start": "480280",
    "end": "482280"
  },
  {
    "text": "goes to exit we can even tell anger to",
    "start": "482280",
    "end": "484840"
  },
  {
    "text": "specifically avoid the exit function the",
    "start": "484840",
    "end": "487280"
  },
  {
    "text": "way anger works is anger takes the",
    "start": "487280",
    "end": "489199"
  },
  {
    "text": "constraints required to execute a",
    "start": "489199",
    "end": "491560"
  },
  {
    "text": "program so the registers and what values",
    "start": "491560",
    "end": "493919"
  },
  {
    "text": "they need to contain to continue program",
    "start": "493919",
    "end": "495840"
  },
  {
    "text": "execution and they boil them down to",
    "start": "495840",
    "end": "498599"
  },
  {
    "text": "effectively a math problem and then by",
    "start": "498599",
    "end": "500560"
  },
  {
    "text": "using a constraint solver like Microsoft",
    "start": "500560",
    "end": "502840"
  },
  {
    "text": "Z3 they can turn the constraints into a",
    "start": "502840",
    "end": "505720"
  },
  {
    "text": "math problem that they can solve so by",
    "start": "505720",
    "end": "508080"
  },
  {
    "text": "using anger on this we can literally",
    "start": "508080",
    "end": "510400"
  },
  {
    "text": "just turn the input required to get to",
    "start": "510400",
    "end": "512880"
  },
  {
    "text": "this point in the program into a math",
    "start": "512880",
    "end": "515159"
  },
  {
    "text": "problem that Z3 will burn on and give us",
    "start": "515159",
    "end": "517719"
  },
  {
    "text": "the relevant the required input to get",
    "start": "517719",
    "end": "520120"
  },
  {
    "text": "to the end of the problem okay I know",
    "start": "520120",
    "end": "522120"
  },
  {
    "text": "forgive me for writing python but anger",
    "start": "522120",
    "end": "524120"
  },
  {
    "text": "is a library written for Python and",
    "start": "524120",
    "end": "525920"
  },
  {
    "text": "personally I think for doing binary",
    "start": "525920",
    "end": "527320"
  },
  {
    "text": "exploitation and reverse engineering",
    "start": "527320",
    "end": "529080"
  },
  {
    "text": "task python is a really great language",
    "start": "529080",
    "end": "531680"
  },
  {
    "text": "so what we're going to do here is we're",
    "start": "531680",
    "end": "532720"
  },
  {
    "text": "going to write the Imports to import",
    "start": "532720",
    "end": "534800"
  },
  {
    "text": "anger and then import clery uh clarp is",
    "start": "534800",
    "end": "537680"
  },
  {
    "text": "the constraint solver that's used in",
    "start": "537680",
    "end": "539519"
  },
  {
    "text": "Anger to do the math effectively to to",
    "start": "539519",
    "end": "542720"
  },
  {
    "text": "solve the input for the problem right",
    "start": "542720",
    "end": "543959"
  },
  {
    "text": "and then also we want to import CIS I",
    "start": "543959",
    "end": "545360"
  },
  {
    "text": "want to do I want to be able to change",
    "start": "545360",
    "end": "546839"
  },
  {
    "text": "the name of the program off of CIS argv",
    "start": "546839",
    "end": "549120"
  },
  {
    "text": "so we'll have our function called main",
    "start": "549120",
    "end": "550279"
  },
  {
    "text": "it'll take argv as input and then we'll",
    "start": "550279",
    "end": "552800"
  },
  {
    "text": "say that uh the path name to the file",
    "start": "552800",
    "end": "555360"
  },
  {
    "text": "equals argv of one very cool and then",
    "start": "555360",
    "end": "557760"
  },
  {
    "text": "what we do to make a project in Anger we",
    "start": "557760",
    "end": "559440"
  },
  {
    "text": "just say anger. project and path name",
    "start": "559440",
    "end": "561760"
  },
  {
    "text": "and then we go from there we're going to",
    "start": "561760",
    "end": "562880"
  },
  {
    "text": "be using a simulation to explore how to",
    "start": "562880",
    "end": "565320"
  },
  {
    "text": "get to a good address while avoiding bad",
    "start": "565320",
    "end": "567640"
  },
  {
    "text": "addresses and again we do that by saying",
    "start": "567640",
    "end": "569480"
  },
  {
    "text": "we want to get to our you know print the",
    "start": "569480",
    "end": "571240"
  },
  {
    "text": "flag function without hitting the exit",
    "start": "571240",
    "end": "573880"
  },
  {
    "text": "function we're going to use this example",
    "start": "573880",
    "end": "575279"
  },
  {
    "text": "for the majority of our problem now the",
    "start": "575279",
    "end": "577160"
  },
  {
    "text": "start address we have to create a state",
    "start": "577160",
    "end": "579120"
  },
  {
    "text": "where the problem will start in right",
    "start": "579120",
    "end": "580760"
  },
  {
    "text": "and we can start the problem we'll say",
    "start": "580760",
    "end": "583000"
  },
  {
    "text": "right here at 14 AC3 so that'll be our",
    "start": "583000",
    "end": "585680"
  },
  {
    "text": "start address for our our solver and",
    "start": "585680",
    "end": "588519"
  },
  {
    "text": "then the good address is going to be the",
    "start": "588519",
    "end": "590560"
  },
  {
    "text": "address after we print our data right so",
    "start": "590560",
    "end": "592800"
  },
  {
    "text": "right here at the return address I want",
    "start": "592800",
    "end": "594120"
  },
  {
    "text": "to get to this address that is our our",
    "start": "594120",
    "end": "596640"
  },
  {
    "text": "good address so we'll take that very",
    "start": "596640",
    "end": "598560"
  },
  {
    "text": "good and then also so our avoid address",
    "start": "598560",
    "end": "600200"
  },
  {
    "text": "right we want to avoid particular parts",
    "start": "600200",
    "end": "602920"
  },
  {
    "text": "of the problem in particular we want to",
    "start": "602920",
    "end": "604440"
  },
  {
    "text": "avoid any call to exit so we can go to",
    "start": "604440",
    "end": "607200"
  },
  {
    "text": "the global offset table instruction for",
    "start": "607200",
    "end": "609480"
  },
  {
    "text": "exit and we can avoid this right here",
    "start": "609480",
    "end": "611920"
  },
  {
    "text": "this 10 3B 0 wonderful and then so we're",
    "start": "611920",
    "end": "614680"
  },
  {
    "text": "literally going to take the code that",
    "start": "614680",
    "end": "616320"
  },
  {
    "text": "came from the example over there and",
    "start": "616320",
    "end": "618399"
  },
  {
    "text": "just make it so that we set up the same",
    "start": "618399",
    "end": "620000"
  },
  {
    "text": "simulation State okay so what we have",
    "start": "620000",
    "end": "621680"
  },
  {
    "text": "here is our initial State This Is Us",
    "start": "621680",
    "end": "623399"
  },
  {
    "text": "creating a blank simulation state for",
    "start": "623399",
    "end": "625399"
  },
  {
    "text": "anger to solve with right and the",
    "start": "625399",
    "end": "627040"
  },
  {
    "text": "address we're going to start that state",
    "start": "627040",
    "end": "628200"
  },
  {
    "text": "in as it class to the binary is that",
    "start": "628200",
    "end": "630440"
  },
  {
    "text": "start address right after the function",
    "start": "630440",
    "end": "632120"
  },
  {
    "text": "gets called we have the simulation which",
    "start": "632120",
    "end": "634000"
  },
  {
    "text": "is just turning that initial State into",
    "start": "634000",
    "end": "636120"
  },
  {
    "text": "a Sim manager which is a factory within",
    "start": "636120",
    "end": "638160"
  },
  {
    "text": "anger and then we also want it to",
    "start": "638160",
    "end": "640200"
  },
  {
    "text": "explore to find all of those good",
    "start": "640200",
    "end": "642360"
  },
  {
    "text": "addresses and avoid all those bad",
    "start": "642360",
    "end": "644200"
  },
  {
    "text": "addresses now if the simulation runs and",
    "start": "644200",
    "end": "646600"
  },
  {
    "text": "it finds a path that is solvable to get",
    "start": "646600",
    "end": "649560"
  },
  {
    "text": "to ideally and realistically there only",
    "start": "649560",
    "end": "651519"
  },
  {
    "text": "can be one of those right we only have",
    "start": "651519",
    "end": "653440"
  },
  {
    "text": "one flag or one answer to the problem so",
    "start": "653440",
    "end": "655399"
  },
  {
    "text": "we'll extract that simulation now the",
    "start": "655399",
    "end": "657680"
  },
  {
    "text": "issue with this problem right now now is",
    "start": "657680",
    "end": "659519"
  },
  {
    "text": "that we haven't given anger the thing",
    "start": "659519",
    "end": "661839"
  },
  {
    "text": "that it needs to solve right this is",
    "start": "661839",
    "end": "663240"
  },
  {
    "text": "what we call our symbolic value by",
    "start": "663240",
    "end": "665600"
  },
  {
    "text": "treating the input of this problem as",
    "start": "665600",
    "end": "667880"
  },
  {
    "text": "symbolic it'll create a tree of all the",
    "start": "667880",
    "end": "670800"
  },
  {
    "text": "possible states that it could be and",
    "start": "670800",
    "end": "672560"
  },
  {
    "text": "then use that to solve the problem to",
    "start": "672560",
    "end": "674680"
  },
  {
    "text": "give us the flag so let's create that",
    "start": "674680",
    "end": "676560"
  },
  {
    "text": "flag that we're going to put into our",
    "start": "676560",
    "end": "677959"
  },
  {
    "text": "problem okay and here we have the input",
    "start": "677959",
    "end": "680160"
  },
  {
    "text": "size of the flag and then the input",
    "start": "680160",
    "end": "681680"
  },
  {
    "text": "value of the flag we're using clar to",
    "start": "681680",
    "end": "683760"
  },
  {
    "text": "create a bit Vector symbolic again",
    "start": "683760",
    "end": "685680"
  },
  {
    "text": "that's a symbolic value that will be",
    "start": "685680",
    "end": "687200"
  },
  {
    "text": "treated as a piece of math that we have",
    "start": "687200",
    "end": "690040"
  },
  {
    "text": "to solve later and this is the size",
    "start": "690040",
    "end": "691800"
  },
  {
    "text": "right it's a 32 by flag times 8 bytes it",
    "start": "691800",
    "end": "694720"
  },
  {
    "text": "could be longer it could be shorter but",
    "start": "694720",
    "end": "696800"
  },
  {
    "text": "by partially constraining just part of",
    "start": "696800",
    "end": "698720"
  },
  {
    "text": "the flag it may enable anger to solve",
    "start": "698720",
    "end": "700720"
  },
  {
    "text": "the rest of the flag if it's Longer Now",
    "start": "700720",
    "end": "703040"
  },
  {
    "text": "the issue with this is we're saying that",
    "start": "703040",
    "end": "704600"
  },
  {
    "text": "it's a bite Vector of 32 * 8 bytes right",
    "start": "704600",
    "end": "708040"
  },
  {
    "text": "or it's a bit Vector of 32 * 8 Bits from",
    "start": "708040",
    "end": "711320"
  },
  {
    "text": "a mathematical perspective if we don't",
    "start": "711320",
    "end": "713399"
  },
  {
    "text": "constrain that down to less of a key",
    "start": "713399",
    "end": "716279"
  },
  {
    "text": "space the explosion for the inputs that",
    "start": "716279",
    "end": "719160"
  },
  {
    "text": "might be possible to the program is",
    "start": "719160",
    "end": "720920"
  },
  {
    "text": "exponential so what we have to do is we",
    "start": "720920",
    "end": "722720"
  },
  {
    "text": "have to constrain our inputs to only be",
    "start": "722720",
    "end": "725040"
  },
  {
    "text": "inputs that we can meaningfully give to",
    "start": "725040",
    "end": "726720"
  },
  {
    "text": "our problems I think asky characters",
    "start": "726720",
    "end": "728399"
  },
  {
    "text": "white space stuff like that okay and we",
    "start": "728399",
    "end": "730120"
  },
  {
    "text": "do that just here we say for every bite",
    "start": "730120",
    "end": "732800"
  },
  {
    "text": "in the input value chopped into 8 bit",
    "start": "732800",
    "end": "735079"
  },
  {
    "text": "segments right so we take eight bits at",
    "start": "735079",
    "end": "736480"
  },
  {
    "text": "a time so a single bite and we add to",
    "start": "736480",
    "end": "739000"
  },
  {
    "text": "our simulation state that every bite has",
    "start": "739000",
    "end": "741920"
  },
  {
    "text": "to be greater than hex a which is a new",
    "start": "741920",
    "end": "743959"
  },
  {
    "text": "line character and less than 7f which is",
    "start": "743959",
    "end": "746680"
  },
  {
    "text": "the maximum value of asky printable",
    "start": "746680",
    "end": "748440"
  },
  {
    "text": "characters and this makes sense right",
    "start": "748440",
    "end": "750040"
  },
  {
    "text": "because we're reducing the key space in",
    "start": "750040",
    "end": "751920"
  },
  {
    "text": "half to make it so that anger can solve",
    "start": "751920",
    "end": "753320"
  },
  {
    "text": "our problem and also it makes sense",
    "start": "753320",
    "end": "755560"
  },
  {
    "text": "because we can't type higher than 7f on",
    "start": "755560",
    "end": "757880"
  },
  {
    "text": "a regular English keyboard right so this",
    "start": "757880",
    "end": "760120"
  },
  {
    "text": "converts a much larger tree of gigantic",
    "start": "760120",
    "end": "764160"
  },
  {
    "text": "inputs and reduces it by an entire order",
    "start": "764160",
    "end": "766320"
  },
  {
    "text": "by cutting the keyspace in over half and",
    "start": "766320",
    "end": "768480"
  },
  {
    "text": "then finally we have one more thing we",
    "start": "768480",
    "end": "769760"
  },
  {
    "text": "have to do we have to say that the flag",
    "start": "769760",
    "end": "771000"
  },
  {
    "text": "is equal to S.S solver which is the clar",
    "start": "771000",
    "end": "773880"
  },
  {
    "text": "solver in the uh simulation state. eval",
    "start": "773880",
    "end": "777480"
  },
  {
    "text": "our uh input value right so we'll go",
    "start": "777480",
    "end": "780079"
  },
  {
    "text": "ahead and do that and there we go so in",
    "start": "780079",
    "end": "782920"
  },
  {
    "text": "theory if this works we should be able",
    "start": "782920",
    "end": "784360"
  },
  {
    "text": "to do just print just print flag and",
    "start": "784360",
    "end": "787320"
  },
  {
    "text": "also print uh s.p. dumps s. or cy.",
    "start": "787320",
    "end": "793560"
  },
  {
    "text": "standard out. file number so we're just",
    "start": "793560",
    "end": "795519"
  },
  {
    "text": "going to have we're going to print the",
    "start": "795519",
    "end": "797079"
  },
  {
    "text": "flag that we found through our",
    "start": "797079",
    "end": "798279"
  },
  {
    "text": "mathematical operation and we're also",
    "start": "798279",
    "end": "799880"
  },
  {
    "text": "going to print the dump of the standard",
    "start": "799880",
    "end": "802279"
  },
  {
    "text": "out of the binary or of this run which",
    "start": "802279",
    "end": "804519"
  },
  {
    "text": "should have the congratulations you",
    "start": "804519",
    "end": "806000"
  },
  {
    "text": "solve the problem message and then one",
    "start": "806000",
    "end": "807839"
  },
  {
    "text": "thing we also have to do is have to",
    "start": "807839",
    "end": "809240"
  },
  {
    "text": "actually say that the input to the pro",
    "start": "809240",
    "end": "811399"
  },
  {
    "text": "program is going to be our input value",
    "start": "811399",
    "end": "813040"
  },
  {
    "text": "right so we we made this uh this",
    "start": "813040",
    "end": "815920"
  },
  {
    "text": "symbolic value but we didn't actually",
    "start": "815920",
    "end": "817639"
  },
  {
    "text": "give it to the program so now we say",
    "start": "817639",
    "end": "818959"
  },
  {
    "text": "that standard in is equal to input Val",
    "start": "818959",
    "end": "820480"
  },
  {
    "text": "very good okay so we go ahead and do",
    "start": "820480",
    "end": "822079"
  },
  {
    "text": "that and let's run",
    "start": "822079",
    "end": "823560"
  },
  {
    "text": "it okay so this is where things get a",
    "start": "823560",
    "end": "826160"
  },
  {
    "text": "little hairy so you noticed how it ran",
    "start": "826160",
    "end": "828959"
  },
  {
    "text": "and immediately ended the issue here is",
    "start": "828959",
    "end": "832040"
  },
  {
    "text": "that that means that we ran the program",
    "start": "832040",
    "end": "834120"
  },
  {
    "text": "and we created a state that was not",
    "start": "834120",
    "end": "836440"
  },
  {
    "text": "mathematically solvable so that means",
    "start": "836440",
    "end": "838440"
  },
  {
    "text": "that something about our program is",
    "start": "838440",
    "end": "839920"
  },
  {
    "text": "incorrect and what actually this turns",
    "start": "839920",
    "end": "841399"
  },
  {
    "text": "into is it is known that passing input",
    "start": "841399",
    "end": "845160"
  },
  {
    "text": "to a program in Anger via scanf is",
    "start": "845160",
    "end": "848519"
  },
  {
    "text": "typically very problematic so instead of",
    "start": "848519",
    "end": "850560"
  },
  {
    "text": "starting the program here what we're",
    "start": "850560",
    "end": "852680"
  },
  {
    "text": "going to do is we are going to create a",
    "start": "852680",
    "end": "854440"
  },
  {
    "text": "state on the stack that emulates after",
    "start": "854440",
    "end": "857399"
  },
  {
    "text": "scanf is ran and instead of giving our",
    "start": "857399",
    "end": "859639"
  },
  {
    "text": "flag as standard into the program we're",
    "start": "859639",
    "end": "862040"
  },
  {
    "text": "going to put our symbolic value on the",
    "start": "862040",
    "end": "864600"
  },
  {
    "text": "stack right and that's going to be at SP",
    "start": "864600",
    "end": "867160"
  },
  {
    "text": "minus hex 34 let's go do that right now",
    "start": "867160",
    "end": "870399"
  },
  {
    "text": "okay so what we did is we actually",
    "start": "870399",
    "end": "871440"
  },
  {
    "text": "removed it from standard in because",
    "start": "871440",
    "end": "872839"
  },
  {
    "text": "again we're not going to treat it like",
    "start": "872839",
    "end": "873920"
  },
  {
    "text": "we're giving it into the program via",
    "start": "873920",
    "end": "875519"
  },
  {
    "text": "standard in we're going to do instead is",
    "start": "875519",
    "end": "877399"
  },
  {
    "text": "we are going to in simulation create a",
    "start": "877399",
    "end": "880560"
  },
  {
    "text": "stack frame by setting the base pointer",
    "start": "880560",
    "end": "882759"
  },
  {
    "text": "equal to the stack pointer and then",
    "start": "882759",
    "end": "884519"
  },
  {
    "text": "subtracting the stack pointer by some",
    "start": "884519",
    "end": "886360"
  },
  {
    "text": "value right to create that stack frame",
    "start": "886360",
    "end": "888199"
  },
  {
    "text": "and then what we're going to do is we",
    "start": "888199",
    "end": "889800"
  },
  {
    "text": "are going to store into our initial",
    "start": "889800",
    "end": "892199"
  },
  {
    "text": "State at the BP minus hex 38 our input",
    "start": "892199",
    "end": "895680"
  },
  {
    "text": "value which again is that symbolic going",
    "start": "895680",
    "end": "898079"
  },
  {
    "text": "to be solved by the math solver piece of",
    "start": "898079",
    "end": "900600"
  },
  {
    "text": "the equation into that problem and then",
    "start": "900600",
    "end": "902959"
  },
  {
    "text": "same thing we're going to let the",
    "start": "902959",
    "end": "903880"
  },
  {
    "text": "simulation Explorer run and if it finds",
    "start": "903880",
    "end": "906360"
  },
  {
    "text": "any paths that get it to that solve the",
    "start": "906360",
    "end": "908959"
  },
  {
    "text": "equation on the input value so with all",
    "start": "908959",
    "end": "912199"
  },
  {
    "text": "that being said let's go ahead and solve",
    "start": "912199",
    "end": "913600"
  },
  {
    "text": "this problem and see what trou we can",
    "start": "913600",
    "end": "914519"
  },
  {
    "text": "get into uh solve Armageddon and again",
    "start": "914519",
    "end": "916920"
  },
  {
    "text": "this is going to take a second because",
    "start": "916920",
    "end": "917759"
  },
  {
    "text": "it has to go through figure out the math",
    "start": "917759",
    "end": "919920"
  },
  {
    "text": "to get to the point where we solve that",
    "start": "919920",
    "end": "922079"
  },
  {
    "text": "the the final State and then do the",
    "start": "922079",
    "end": "923720"
  },
  {
    "text": "actual mathematical operations uh to",
    "start": "923720",
    "end": "926600"
  },
  {
    "text": "give us the number cool so we found a",
    "start": "926600",
    "end": "928880"
  },
  {
    "text": "state that the output the standard out",
    "start": "928880",
    "end": "931240"
  },
  {
    "text": "was code validated successfully and the",
    "start": "931240",
    "end": "934319"
  },
  {
    "text": "the flag is this long number from clarp",
    "start": "934319",
    "end": "936880"
  },
  {
    "text": "and it's printing it as a decimal so",
    "start": "936880",
    "end": "938720"
  },
  {
    "text": "what we have to do in Python is we have",
    "start": "938720",
    "end": "940480"
  },
  {
    "text": "to get the hex value of this decimal and",
    "start": "940480",
    "end": "944199"
  },
  {
    "text": "then we have to extract this and we're",
    "start": "944199",
    "end": "945680"
  },
  {
    "text": "going to turn this into a string by",
    "start": "945680",
    "end": "947000"
  },
  {
    "text": "doing bytes from hex we'll do bytes.",
    "start": "947000",
    "end": "949680"
  },
  {
    "text": "from heex b a bing that's not correct",
    "start": "949680",
    "end": "952920"
  },
  {
    "text": "bite stop from hex in quotes uh and then",
    "start": "952920",
    "end": "956000"
  },
  {
    "text": "we okay there we go UMD cf-",
    "start": "956000",
    "end": "959399"
  },
  {
    "text": "armish satisfying and the joke there",
    "start": "959399",
    "end": "962600"
  },
  {
    "text": "being that we had to use a SAT solver uh",
    "start": "962600",
    "end": "964839"
  },
  {
    "text": "to get this to work so let's put this in",
    "start": "964839",
    "end": "966240"
  },
  {
    "text": "the program and see if we can't run it",
    "start": "966240",
    "end": "968079"
  },
  {
    "text": "and I'm assuming there's a second uh",
    "start": "968079",
    "end": "969720"
  },
  {
    "text": "bracket that I missed so armagon arm is",
    "start": "969720",
    "end": "972519"
  },
  {
    "text": "satisfying code did not validate",
    "start": "972519",
    "end": "974040"
  },
  {
    "text": "interesting okay okay let's just make",
    "start": "974040",
    "end": "975440"
  },
  {
    "text": "this a little longer let's see if I can",
    "start": "975440",
    "end": "976720"
  },
  {
    "text": "solve any more of these may have won",
    "start": "976720",
    "end": "978759"
  },
  {
    "text": "fight I know I should have added this to",
    "start": "978759",
    "end": "979839"
  },
  {
    "text": "the script stop yelling at me I can",
    "start": "979839",
    "end": "981319"
  },
  {
    "text": "smell it in theing comments you should",
    "start": "981319",
    "end": "983079"
  },
  {
    "text": "have just typed this into your script",
    "start": "983079",
    "end": "985240"
  },
  {
    "text": "bro yeah I got it there we go UMD CTF",
    "start": "985240",
    "end": "988560"
  },
  {
    "text": "arm is so satisfying with a little salt",
    "start": "988560",
    "end": "990480"
  },
  {
    "text": "at the end there so let's do that",
    "start": "990480",
    "end": "992040"
  },
  {
    "text": "Armageddon boom code validated",
    "start": "992040",
    "end": "995000"
  },
  {
    "text": "successfully hey guys I hope you enjoyed",
    "start": "995000",
    "end": "997079"
  },
  {
    "text": "this video I love CTF I love Capture the",
    "start": "997079",
    "end": "999360"
  },
  {
    "text": "Flag reverse engineering is fun try this",
    "start": "999360",
    "end": "1001480"
  },
  {
    "text": "out write the script yourself learn a",
    "start": "1001480",
    "end": "1003040"
  },
  {
    "text": "little bit about that sat solvers about",
    "start": "1003040",
    "end": "1005519"
  },
  {
    "text": "anger and uh we'll see you in the next",
    "start": "1005519",
    "end": "1007279"
  },
  {
    "text": "one check out this other video where I",
    "start": "1007279",
    "end": "1008680"
  },
  {
    "text": "cracked a different crack me and learned",
    "start": "1008680",
    "end": "1010639"
  },
  {
    "text": "something pretty sweet see you there",
    "start": "1010639",
    "end": "1014040"
  }
]