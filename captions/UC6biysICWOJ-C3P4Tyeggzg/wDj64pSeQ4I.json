[
  {
    "start": "0",
    "end": "9000"
  },
  {
    "text": "random or Rand function in C actually",
    "start": "120",
    "end": "3360"
  },
  {
    "text": "isn't random and if you've used it there",
    "start": "3360",
    "end": "6000"
  },
  {
    "text": "is a high likelihood that you've",
    "start": "6000",
    "end": "7799"
  },
  {
    "text": "probably used it wrong on top of that",
    "start": "7799",
    "end": "9660"
  },
  {
    "start": "9000",
    "end": "109000"
  },
  {
    "text": "here I've written this piece of C code",
    "start": "9660",
    "end": "11639"
  },
  {
    "text": "and all it does is generate a random",
    "start": "11639",
    "end": "13920"
  },
  {
    "text": "number and when I run it one time I get",
    "start": "13920",
    "end": "16320"
  },
  {
    "text": "this number but when I run it a second",
    "start": "16320",
    "end": "18480"
  },
  {
    "text": "time I get that same number again so how",
    "start": "18480",
    "end": "22320"
  },
  {
    "text": "do we write code in C that uses Rand",
    "start": "22320",
    "end": "24480"
  },
  {
    "text": "that is safe but don't worry I'm going",
    "start": "24480",
    "end": "26939"
  },
  {
    "text": "to show you how to use it correctly in",
    "start": "26939",
    "end": "28740"
  },
  {
    "text": "this video for those of you that don't",
    "start": "28740",
    "end": "30000"
  },
  {
    "text": "know an RNG or a random number generator",
    "start": "30000",
    "end": "33239"
  },
  {
    "text": "is a system that is used to produce",
    "start": "33239",
    "end": "35399"
  },
  {
    "text": "numbers that are truly random in",
    "start": "35399",
    "end": "37320"
  },
  {
    "text": "Computing there are two kinds of",
    "start": "37320",
    "end": "39300"
  },
  {
    "text": "Randomness we have true Randomness and",
    "start": "39300",
    "end": "41879"
  },
  {
    "text": "pseudor Randomness true Randomness are",
    "start": "41879",
    "end": "43680"
  },
  {
    "text": "things that are actually random in",
    "start": "43680",
    "end": "45540"
  },
  {
    "text": "nature atmospheric noise voltage",
    "start": "45540",
    "end": "47820"
  },
  {
    "text": "electrical signals the noise around",
    "start": "47820",
    "end": "49440"
  },
  {
    "text": "those signals the position of an",
    "start": "49440",
    "end": "51239"
  },
  {
    "text": "electron in an atom all these things are",
    "start": "51239",
    "end": "53399"
  },
  {
    "text": "naturally random they're random in",
    "start": "53399",
    "end": "55800"
  },
  {
    "text": "nature the opposite is true for things",
    "start": "55800",
    "end": "58020"
  },
  {
    "text": "that are pseudo random pseudo random",
    "start": "58020",
    "end": "59879"
  },
  {
    "text": "number generators are generators that",
    "start": "59879",
    "end": "62100"
  },
  {
    "text": "are made by humans that produce numbers",
    "start": "62100",
    "end": "64198"
  },
  {
    "text": "that didn't get derived from a natural",
    "start": "64199",
    "end": "66240"
  },
  {
    "text": "entropy Source there are ways to do this",
    "start": "66240",
    "end": "68100"
  },
  {
    "text": "securely and in securely one of the ways",
    "start": "68100",
    "end": "71159"
  },
  {
    "text": "and we'll determine if it's secure",
    "start": "71159",
    "end": "72240"
  },
  {
    "text": "insecure here in this video is the live",
    "start": "72240",
    "end": "74640"
  },
  {
    "text": "C random number generator libsy RNG is a",
    "start": "74640",
    "end": "78479"
  },
  {
    "text": "linear congruential generator but that",
    "start": "78479",
    "end": "80640"
  },
  {
    "text": "actually boils down to in dlib C is this",
    "start": "80640",
    "end": "83759"
  },
  {
    "text": "equation here not feeling so Random now",
    "start": "83759",
    "end": "86340"
  },
  {
    "text": "is it that equation is derived from this",
    "start": "86340",
    "end": "89280"
  },
  {
    "text": "equation for linear generator the",
    "start": "89280",
    "end": "90960"
  },
  {
    "text": "equation is X of n plus 1 equals a times",
    "start": "90960",
    "end": "95100"
  },
  {
    "text": "x of n plus C Mod M now the seed or",
    "start": "95100",
    "end": "99780"
  },
  {
    "text": "state value is X of zero in this",
    "start": "99780",
    "end": "102180"
  },
  {
    "text": "situation X of 0 sets the state of the",
    "start": "102180",
    "end": "105060"
  },
  {
    "text": "RNG and allows us to choose new numbers",
    "start": "105060",
    "end": "108000"
  },
  {
    "text": "as the RNG moves forward well the first",
    "start": "108000",
    "end": "110340"
  },
  {
    "start": "109000",
    "end": "154000"
  },
  {
    "text": "thing we have to do is specify a seed to",
    "start": "110340",
    "end": "112799"
  },
  {
    "text": "the RNG but there's a catch what is the",
    "start": "112799",
    "end": "115860"
  },
  {
    "text": "value we use for our state if we need a",
    "start": "115860",
    "end": "117899"
  },
  {
    "text": "random state to seed our random number",
    "start": "117899",
    "end": "120060"
  },
  {
    "text": "generator how do we start the randomness",
    "start": "120060",
    "end": "122100"
  },
  {
    "text": "we can experiment and start by using a",
    "start": "122100",
    "end": "124439"
  },
  {
    "text": "constant number as our seed to our RNG",
    "start": "124439",
    "end": "126719"
  },
  {
    "text": "and see if that fixes our problem",
    "start": "126719",
    "end": "128819"
  },
  {
    "text": "unfortunately by using a static number",
    "start": "128819",
    "end": "131280"
  },
  {
    "text": "as our RNG State seed we are in the same",
    "start": "131280",
    "end": "134160"
  },
  {
    "text": "predicament where we get the same number",
    "start": "134160",
    "end": "135959"
  },
  {
    "text": "twice",
    "start": "135959",
    "end": "137099"
  },
  {
    "text": "now fortunately we do have another",
    "start": "137099",
    "end": "139140"
  },
  {
    "text": "option we don't have a RNG to seed our",
    "start": "139140",
    "end": "142080"
  },
  {
    "text": "random state with s Rand or seed Rand",
    "start": "142080",
    "end": "143940"
  },
  {
    "text": "but we can actually use time to seed our",
    "start": "143940",
    "end": "146700"
  },
  {
    "text": "RNG it's not cryptographically secure",
    "start": "146700",
    "end": "149160"
  },
  {
    "text": "but we can start out and see if that",
    "start": "149160",
    "end": "151020"
  },
  {
    "text": "actually gets the ball rolling on",
    "start": "151020",
    "end": "152400"
  },
  {
    "text": "getting us some random numbers by",
    "start": "152400",
    "end": "154319"
  },
  {
    "start": "154000",
    "end": "175000"
  },
  {
    "text": "seeding our RNG with time we're able to",
    "start": "154319",
    "end": "157140"
  },
  {
    "text": "actually get the RNG to produce",
    "start": "157140",
    "end": "158580"
  },
  {
    "text": "semi-random values the problem with this",
    "start": "158580",
    "end": "160920"
  },
  {
    "text": "if we are able to predict the time that",
    "start": "160920",
    "end": "163200"
  },
  {
    "text": "is used to seed the RNG then we're able",
    "start": "163200",
    "end": "165959"
  },
  {
    "text": "to predict all the random values to get",
    "start": "165959",
    "end": "167940"
  },
  {
    "text": "us even finer granularity on our RNG",
    "start": "167940",
    "end": "170459"
  },
  {
    "text": "instead of using the second time which",
    "start": "170459",
    "end": "172440"
  },
  {
    "text": "is what the time value gets us we can",
    "start": "172440",
    "end": "174300"
  },
  {
    "text": "use the nanosecond time which gets us a",
    "start": "174300",
    "end": "176940"
  },
  {
    "text": "semi-random value as a function of the",
    "start": "176940",
    "end": "178980"
  },
  {
    "text": "CPU clock use the nanosecond time to",
    "start": "178980",
    "end": "181739"
  },
  {
    "text": "Cedar RNG and then from there we have a",
    "start": "181739",
    "end": "184379"
  },
  {
    "text": "fairly secure random number generator",
    "start": "184379",
    "end": "186540"
  },
  {
    "text": "again these are not cryptographically",
    "start": "186540",
    "end": "188400"
  },
  {
    "text": "secure please don't go use these to",
    "start": "188400",
    "end": "190200"
  },
  {
    "text": "implement some kind of cryptography or",
    "start": "190200",
    "end": "192300"
  },
  {
    "text": "encryption algorithm by seeding the RNG",
    "start": "192300",
    "end": "194459"
  },
  {
    "text": "with the nanosecond time I'm able to",
    "start": "194459",
    "end": "196440"
  },
  {
    "text": "produce values that are extremely random",
    "start": "196440",
    "end": "198720"
  },
  {
    "text": "there's no way to predict what the seed",
    "start": "198720",
    "end": "199980"
  },
  {
    "text": "is and as a result there's no way to",
    "start": "199980",
    "end": "201360"
  },
  {
    "text": "predict the values later on in the RNG",
    "start": "201360",
    "end": "203220"
  },
  {
    "text": "chain look like now don't go and get too",
    "start": "203220",
    "end": "205500"
  },
  {
    "text": "excited okay because we're not through",
    "start": "205500",
    "end": "207239"
  },
  {
    "text": "the woods yet this algorithm is not",
    "start": "207239",
    "end": "209879"
  },
  {
    "text": "actually cryptographically secure the",
    "start": "209879",
    "end": "211980"
  },
  {
    "text": "primary reason for this is the algorithm",
    "start": "211980",
    "end": "213840"
  },
  {
    "text": "under the hood that is doing the random",
    "start": "213840",
    "end": "216060"
  },
  {
    "text": "number generating can be reversed and",
    "start": "216060",
    "end": "218220"
  },
  {
    "text": "arguably predicted so if you want to",
    "start": "218220",
    "end": "220500"
  },
  {
    "text": "create random numbers within your C",
    "start": "220500",
    "end": "222599"
  },
  {
    "text": "program what you need to do is use a",
    "start": "222599",
    "end": "225060"
  },
  {
    "text": "cryptographically secure algorithm the",
    "start": "225060",
    "end": "227940"
  },
  {
    "text": "one that comes to mind when programming",
    "start": "227940",
    "end": "229440"
  },
  {
    "text": "in c is the use of open ssl's random",
    "start": "229440",
    "end": "232739"
  },
  {
    "text": "number generator by using a library like",
    "start": "232739",
    "end": "234780"
  },
  {
    "start": "233000",
    "end": "242000"
  },
  {
    "text": "openssl that uses safe algorithms under",
    "start": "234780",
    "end": "237239"
  },
  {
    "text": "the hood we don't have to worry about",
    "start": "237239",
    "end": "238860"
  },
  {
    "text": "any implementations of lcgs or states or",
    "start": "238860",
    "end": "242340"
  },
  {
    "start": "242000",
    "end": "253000"
  },
  {
    "text": "anything like that we can just ask the",
    "start": "242340",
    "end": "244500"
  },
  {
    "text": "number generator for random numbers and",
    "start": "244500",
    "end": "246720"
  },
  {
    "text": "it will return one or zero if those",
    "start": "246720",
    "end": "249060"
  },
  {
    "text": "numbers are cryptographically secure or",
    "start": "249060",
    "end": "250920"
  },
  {
    "text": "not based on how much entropy it can",
    "start": "250920",
    "end": "252900"
  },
  {
    "text": "find in your system so there you have it",
    "start": "252900",
    "end": "254939"
  },
  {
    "text": "all because your code has a function",
    "start": "254939",
    "end": "256560"
  },
  {
    "text": "that is called random doesn't",
    "start": "256560",
    "end": "258479"
  },
  {
    "text": "necessarily mean that that function",
    "start": "258479",
    "end": "259859"
  },
  {
    "text": "actually is random and even if it was if",
    "start": "259859",
    "end": "262680"
  },
  {
    "text": "those random numbers are",
    "start": "262680",
    "end": "263940"
  },
  {
    "text": "cryptographically secure that being said",
    "start": "263940",
    "end": "266340"
  },
  {
    "text": "use libraries that claim to be",
    "start": "266340",
    "end": "268139"
  },
  {
    "text": "cryptographically secure and your code",
    "start": "268139",
    "end": "270000"
  },
  {
    "text": "will be safe from there after that go",
    "start": "270000",
    "end": "271740"
  },
  {
    "text": "watch this video that YouTube thinks you",
    "start": "271740",
    "end": "273419"
  },
  {
    "text": "will find just as enjoyable where you'll",
    "start": "273419",
    "end": "274979"
  },
  {
    "text": "learn something equally that's cool",
    "start": "274979",
    "end": "277500"
  },
  {
    "text": "just just click dude it's right it's",
    "start": "277500",
    "end": "279960"
  },
  {
    "text": "right there go",
    "start": "279960",
    "end": "283340"
  }
]