[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "every function you've ever written has",
    "start": "280",
    "end": "2560"
  },
  {
    "text": "had a stack well not not this hold on",
    "start": "2560",
    "end": "6680"
  },
  {
    "text": "but what is a stack what does it do for",
    "start": "6680",
    "end": "9160"
  },
  {
    "text": "your program why does each function have",
    "start": "9160",
    "end": "11559"
  },
  {
    "text": "their own how does it work under the",
    "start": "11559",
    "end": "13200"
  },
  {
    "text": "hood also why am I stuck here in Windows",
    "start": "13200",
    "end": "15920"
  },
  {
    "text": "XP I don't know I I'm just as lost on",
    "start": "15920",
    "end": "18439"
  },
  {
    "text": "this premise as you are I got banished",
    "start": "18439",
    "end": "19880"
  },
  {
    "text": "here when I coded in hasool and I I've",
    "start": "19880",
    "end": "21400"
  },
  {
    "text": "kind of just been floating around here",
    "start": "21400",
    "end": "22560"
  },
  {
    "text": "let's go back to the",
    "start": "22560",
    "end": "23840"
  },
  {
    "text": "VM so here I have a very basic C program",
    "start": "23840",
    "end": "27359"
  },
  {
    "start": "24000",
    "end": "78000"
  },
  {
    "text": "that we're going to use to kind of show",
    "start": "27359",
    "end": "28800"
  },
  {
    "text": "what the stack does for for each program",
    "start": "28800",
    "end": "30920"
  },
  {
    "text": "what a stack frame is and how",
    "start": "30920",
    "end": "32719"
  },
  {
    "text": "essentially a stack frame is used to",
    "start": "32719",
    "end": "34600"
  },
  {
    "text": "store local data here we have the",
    "start": "34600",
    "end": "36120"
  },
  {
    "text": "function main this is the default",
    "start": "36120",
    "end": "37520"
  },
  {
    "text": "function in C that always gets called",
    "start": "37520",
    "end": "39879"
  },
  {
    "text": "and by default any function that you say",
    "start": "39879",
    "end": "42120"
  },
  {
    "text": "that isn't a naked function which is you",
    "start": "42120",
    "end": "44079"
  },
  {
    "text": "know the default attribute is not naked",
    "start": "44079",
    "end": "46360"
  },
  {
    "text": "uh it will create its own stack frame",
    "start": "46360",
    "end": "48079"
  },
  {
    "text": "what does stack frame do it creates room",
    "start": "48079",
    "end": "49960"
  },
  {
    "text": "for local variables like this function",
    "start": "49960",
    "end": "51719"
  },
  {
    "text": "like this variable Z here now when I",
    "start": "51719",
    "end": "53680"
  },
  {
    "text": "call function Fu the assembly",
    "start": "53680",
    "end": "55840"
  },
  {
    "text": "instructions under the hood are going to",
    "start": "55840",
    "end": "57480"
  },
  {
    "text": "create a new stack frame for Foo to to",
    "start": "57480",
    "end": "60079"
  },
  {
    "text": "create room for these local variables",
    "start": "60079",
    "end": "62960"
  },
  {
    "text": "we're going to actually disassemble this",
    "start": "62960",
    "end": "64838"
  },
  {
    "text": "program and we're going to walk step by",
    "start": "64839",
    "end": "66720"
  },
  {
    "text": "step through the assembly to talk about",
    "start": "66720",
    "end": "69240"
  },
  {
    "text": "how a new stack frame is created but",
    "start": "69240",
    "end": "71479"
  },
  {
    "text": "before we do that we first need to",
    "start": "71479",
    "end": "72960"
  },
  {
    "text": "understand some basic things about CPUs",
    "start": "72960",
    "end": "75200"
  },
  {
    "text": "to understand what's going on in the",
    "start": "75200",
    "end": "77240"
  },
  {
    "text": "creation of a stack frame when we talk",
    "start": "77240",
    "end": "78840"
  },
  {
    "start": "78000",
    "end": "182000"
  },
  {
    "text": "about assembly in any context we need to",
    "start": "78840",
    "end": "81520"
  },
  {
    "text": "understand that inside the CPU there are",
    "start": "81520",
    "end": "83799"
  },
  {
    "text": "these hyper fast variables that are",
    "start": "83799",
    "end": "85560"
  },
  {
    "text": "called registers now some of them are GP",
    "start": "85560",
    "end": "88439"
  },
  {
    "text": "or general purpose register where they",
    "start": "88439",
    "end": "90360"
  },
  {
    "text": "can contain any kind of data one of them",
    "start": "90360",
    "end": "93119"
  },
  {
    "text": "is extended BX ebx right we can put any",
    "start": "93119",
    "end": "96399"
  },
  {
    "text": "data in there that we want to it really",
    "start": "96399",
    "end": "98119"
  },
  {
    "text": "serves no purpose to the CPU other than",
    "start": "98119",
    "end": "100439"
  },
  {
    "text": "general purpose now there are others",
    "start": "100439",
    "end": "102920"
  },
  {
    "text": "that are special purpose registers one",
    "start": "102920",
    "end": "105439"
  },
  {
    "text": "of them for example is es the extended",
    "start": "105439",
    "end": "109200"
  },
  {
    "text": "stack pointer what that does that points",
    "start": "109200",
    "end": "111399"
  },
  {
    "text": "to the top of our stack frame we'll talk",
    "start": "111399",
    "end": "114079"
  },
  {
    "text": "about what that actually means here in a",
    "start": "114079",
    "end": "115600"
  },
  {
    "text": "second and another one is e BP this",
    "start": "115600",
    "end": "119240"
  },
  {
    "text": "points to to the bottom of our stack",
    "start": "119240",
    "end": "122079"
  },
  {
    "text": "frame right so B being the bottom and S",
    "start": "122079",
    "end": "125240"
  },
  {
    "text": "being the top now when we talk about",
    "start": "125240",
    "end": "127039"
  },
  {
    "text": "addresses this is a bit of a holy war in",
    "start": "127039",
    "end": "128959"
  },
  {
    "text": "like the computer architecture space but",
    "start": "128959",
    "end": "130920"
  },
  {
    "text": "when we talk about the stack we can",
    "start": "130920",
    "end": "132239"
  },
  {
    "text": "picture a stack of plates right so here",
    "start": "132239",
    "end": "134640"
  },
  {
    "text": "is the top of our stack of plates and",
    "start": "134640",
    "end": "137120"
  },
  {
    "text": "you know typically SP will Point here",
    "start": "137120",
    "end": "140440"
  },
  {
    "text": "when we push additional variables onto",
    "start": "140440",
    "end": "142959"
  },
  {
    "text": "our stack of plates SP will go up",
    "start": "142959",
    "end": "145760"
  },
  {
    "text": "because the top of our stack gets higher",
    "start": "145760",
    "end": "148160"
  },
  {
    "text": "as we push additional plates High higher",
    "start": "148160",
    "end": "150000"
  },
  {
    "text": "and higher onto the stack now it is",
    "start": "150000",
    "end": "152040"
  },
  {
    "text": "important to understand that as SP goes",
    "start": "152040",
    "end": "155120"
  },
  {
    "text": "up the value becomes more negative the",
    "start": "155120",
    "end": "157800"
  },
  {
    "text": "more negative SP is the taller our stack",
    "start": "157800",
    "end": "160959"
  },
  {
    "text": "is I know it's a little bit of a weird",
    "start": "160959",
    "end": "162239"
  },
  {
    "text": "Nuance in the world of computing but",
    "start": "162239",
    "end": "164319"
  },
  {
    "text": "just understand when we push SP goes up",
    "start": "164319",
    "end": "167280"
  },
  {
    "text": "meaning SP goes negative our stack grows",
    "start": "167280",
    "end": "170040"
  },
  {
    "text": "up negatively and all the while SP is",
    "start": "170040",
    "end": "172680"
  },
  {
    "text": "going up in this case we have BP here",
    "start": "172680",
    "end": "175080"
  },
  {
    "text": "which is keeping track of the bottom of",
    "start": "175080",
    "end": "177040"
  },
  {
    "text": "our stack frame I keep throwing around",
    "start": "177040",
    "end": "178840"
  },
  {
    "text": "these words stack frame so let's talk",
    "start": "178840",
    "end": "180440"
  },
  {
    "text": "about what a stack frame actually is in",
    "start": "180440",
    "end": "182200"
  },
  {
    "text": "our example there before I showed you",
    "start": "182200",
    "end": "183560"
  },
  {
    "text": "that we had a function Main and the",
    "start": "183560",
    "end": "185400"
  },
  {
    "text": "function main called a function Fu",
    "start": "185400",
    "end": "187560"
  },
  {
    "text": "before function main actually called Fu",
    "start": "187560",
    "end": "190319"
  },
  {
    "text": "it already had a stack frame established",
    "start": "190319",
    "end": "192360"
  },
  {
    "text": "so you can kind of picture it like this",
    "start": "192360",
    "end": "193599"
  },
  {
    "text": "where we have two arrows that point to",
    "start": "193599",
    "end": "195879"
  },
  {
    "text": "the top and the bottom of the stack",
    "start": "195879",
    "end": "197680"
  },
  {
    "text": "right this thing here is referred to as",
    "start": "197680",
    "end": "200440"
  },
  {
    "text": "Main's stack frame and Main stack frame",
    "start": "200440",
    "end": "202560"
  },
  {
    "text": "contains variables like you know maybe",
    "start": "202560",
    "end": "204640"
  },
  {
    "text": "it's Ark C and arcv or somewhere on here",
    "start": "204640",
    "end": "207640"
  },
  {
    "text": "right these are all variables that are",
    "start": "207640",
    "end": "209080"
  },
  {
    "text": "that are in scope relative to main when",
    "start": "209080",
    "end": "211480"
  },
  {
    "text": "I call Foo eventually what we'll go",
    "start": "211480",
    "end": "214120"
  },
  {
    "text": "through is the process of the function",
    "start": "214120",
    "end": "216200"
  },
  {
    "text": "Foo creating a new stack frame that is",
    "start": "216200",
    "end": "219040"
  },
  {
    "text": "now above main stack frame all these",
    "start": "219040",
    "end": "222239"
  },
  {
    "text": "things here will belong to Foo and be in",
    "start": "222239",
    "end": "224120"
  },
  {
    "text": "local scope for Foo So eventually Fu",
    "start": "224120",
    "end": "225959"
  },
  {
    "text": "will create this new stack frame an INT",
    "start": "225959",
    "end": "228080"
  },
  {
    "text": "X will be there an INT y will be there",
    "start": "228080",
    "end": "230480"
  },
  {
    "text": "these are all local variables to Fu and",
    "start": "230480",
    "end": "232480"
  },
  {
    "text": "then it collapses the stack frame so",
    "start": "232480",
    "end": "234159"
  },
  {
    "text": "that main stack frame is now the stack",
    "start": "234159",
    "end": "236120"
  },
  {
    "start": "236000",
    "end": "357000"
  },
  {
    "text": "frame in scope okay so here we go the",
    "start": "236120",
    "end": "237879"
  },
  {
    "text": "moment of truth on the left over here",
    "start": "237879",
    "end": "239680"
  },
  {
    "text": "here we have the assembly instructions",
    "start": "239680",
    "end": "241519"
  },
  {
    "text": "for the function Fu and on the right is",
    "start": "241519",
    "end": "243879"
  },
  {
    "text": "going to be my drawing of the creation",
    "start": "243879",
    "end": "245959"
  },
  {
    "text": "of foo's Stack frame we're going to walk",
    "start": "245959",
    "end": "247920"
  },
  {
    "text": "through step by step and explore how",
    "start": "247920",
    "end": "250239"
  },
  {
    "text": "these instructions lead to more room",
    "start": "250239",
    "end": "252360"
  },
  {
    "text": "being on the stack that are in scope to",
    "start": "252360",
    "end": "255200"
  },
  {
    "text": "the function Foo right it creates room",
    "start": "255200",
    "end": "257120"
  },
  {
    "text": "for foo's variables it can do things",
    "start": "257120",
    "end": "259000"
  },
  {
    "text": "with those variables and eventually we",
    "start": "259000",
    "end": "260400"
  },
  {
    "text": "call the function prologue to collapse",
    "start": "260400",
    "end": "262639"
  },
  {
    "text": "the stack and get rid of that room and",
    "start": "262639",
    "end": "264639"
  },
  {
    "text": "get the stack back to the state that",
    "start": "264639",
    "end": "266160"
  },
  {
    "text": "main had it in so the first instruction",
    "start": "266160",
    "end": "268479"
  },
  {
    "text": "we're going to do is we're going to push",
    "start": "268479",
    "end": "270520"
  },
  {
    "text": "EBP so right now BP points to the bottom",
    "start": "270520",
    "end": "273759"
  },
  {
    "text": "of main stack frame we need to preserve",
    "start": "273759",
    "end": "275880"
  },
  {
    "text": "that so we can put it back to BP once",
    "start": "275880",
    "end": "278600"
  },
  {
    "text": "this function is over so here we're",
    "start": "278600",
    "end": "279919"
  },
  {
    "text": "going to push EBP this is going to be",
    "start": "279919",
    "end": "282199"
  },
  {
    "text": "the old base pointer once we do that we",
    "start": "282199",
    "end": "284960"
  },
  {
    "text": "then move ESP into EVP so that now makes",
    "start": "284960",
    "end": "288680"
  },
  {
    "text": "the bottom of the stack equal to the",
    "start": "288680",
    "end": "291000"
  },
  {
    "text": "current top of the stack so now EVP",
    "start": "291000",
    "end": "293600"
  },
  {
    "text": "points here so now we have a new stack",
    "start": "293600",
    "end": "295520"
  },
  {
    "text": "frame that is of height zero so we're",
    "start": "295520",
    "end": "297360"
  },
  {
    "text": "going to get rid of this guy this is no",
    "start": "297360",
    "end": "299000"
  },
  {
    "text": "longer here both of these arrows Point",
    "start": "299000",
    "end": "301440"
  },
  {
    "text": "here right so we have EBP points here as",
    "start": "301440",
    "end": "304320"
  },
  {
    "text": "well as ESP we're then also going to",
    "start": "304320",
    "end": "307039"
  },
  {
    "text": "push variables that we want to preserve",
    "start": "307039",
    "end": "309120"
  },
  {
    "text": "across variable boundaries so in this",
    "start": "309120",
    "end": "311000"
  },
  {
    "text": "case we also push ebx it's going to go",
    "start": "311000",
    "end": "313759"
  },
  {
    "text": "on top of EBP and then after that we",
    "start": "313759",
    "end": "316360"
  },
  {
    "text": "call that sub instruction sorry I had to",
    "start": "316360",
    "end": "318639"
  },
  {
    "text": "move my fat head to get out of the way",
    "start": "318639",
    "end": "320160"
  },
  {
    "text": "by subtracting hex1 14 from ESP we raise",
    "start": "320160",
    "end": "323000"
  },
  {
    "text": "it and create more room on the stack for",
    "start": "323000",
    "end": "325520"
  },
  {
    "text": "foo's local variables so you can't see",
    "start": "325520",
    "end": "327319"
  },
  {
    "text": "it here but this new area here that this",
    "start": "327319",
    "end": "329880"
  },
  {
    "text": "squirly bracket is the room for foo's",
    "start": "329880",
    "end": "332280"
  },
  {
    "text": "local variables and in our code here",
    "start": "332280",
    "end": "334000"
  },
  {
    "text": "before we had variables uh X and Y X and",
    "start": "334000",
    "end": "337280"
  },
  {
    "text": "Y are going to live locally here and you",
    "start": "337280",
    "end": "339319"
  },
  {
    "text": "can see that we actually move the dword",
    "start": "339319",
    "end": "341759"
  },
  {
    "text": "pointer of one and two into these EBP",
    "start": "341759",
    "end": "344720"
  },
  {
    "text": "relative locations right EBP minus 10",
    "start": "344720",
    "end": "346919"
  },
  {
    "text": "EBP minus C get one and two that EBP",
    "start": "346919",
    "end": "350479"
  },
  {
    "text": "minus 10 and that EBP minus C are the",
    "start": "350479",
    "end": "353919"
  },
  {
    "text": "locations on the stack of X and Y so",
    "start": "353919",
    "end": "357680"
  },
  {
    "start": "357000",
    "end": "482000"
  },
  {
    "text": "before we talked about the function",
    "start": "357680",
    "end": "359000"
  },
  {
    "text": "prologue right the area of the function",
    "start": "359000",
    "end": "360479"
  },
  {
    "text": "that gets ran before the function even",
    "start": "360479",
    "end": "362039"
  },
  {
    "text": "starts that creates this stack frame for",
    "start": "362039",
    "end": "364520"
  },
  {
    "text": "our function Fu and after this happens",
    "start": "364520",
    "end": "366560"
  },
  {
    "text": "Fu runs Fu does its logic maybe it calls",
    "start": "366560",
    "end": "369360"
  },
  {
    "text": "other functions but at the end of Fu we",
    "start": "369360",
    "end": "371639"
  },
  {
    "text": "need to actually call foo's function",
    "start": "371639",
    "end": "373880"
  },
  {
    "text": "epilog what that does is that collapses",
    "start": "373880",
    "end": "376160"
  },
  {
    "text": "the stack frame back down so that main",
    "start": "376160",
    "end": "378840"
  },
  {
    "text": "can then restore its stack frame to its",
    "start": "378840",
    "end": "380520"
  },
  {
    "text": "original state now all the instructions",
    "start": "380520",
    "end": "383039"
  },
  {
    "text": "that happen are very simple here there",
    "start": "383039",
    "end": "384479"
  },
  {
    "text": "are three instructions the first is that",
    "start": "384479",
    "end": "387120"
  },
  {
    "text": "one that involves ebx all that's",
    "start": "387120",
    "end": "389080"
  },
  {
    "text": "happening here is it's moving the thing",
    "start": "389080",
    "end": "391240"
  },
  {
    "text": "at EBP minus 4 which is right here ebx",
    "start": "391240",
    "end": "395080"
  },
  {
    "text": "it's the old ebx that we pushed and it's",
    "start": "395080",
    "end": "397440"
  },
  {
    "text": "moving that into ebx so it's essentially",
    "start": "397440",
    "end": "399560"
  },
  {
    "text": "taking the saved value and putting it",
    "start": "399560",
    "end": "401560"
  },
  {
    "text": "back into the register this means that",
    "start": "401560",
    "end": "403520"
  },
  {
    "text": "main depended on ebx not changing when",
    "start": "403520",
    "end": "406280"
  },
  {
    "text": "it called Fu so it told us to push it",
    "start": "406280",
    "end": "408160"
  },
  {
    "text": "onto the stack we did that and now we're",
    "start": "408160",
    "end": "410080"
  },
  {
    "text": "preserving it in the function epilog now",
    "start": "410080",
    "end": "412680"
  },
  {
    "text": "what we're doing is writing now leave is",
    "start": "412680",
    "end": "415240"
  },
  {
    "text": "a function in int assembly that actually",
    "start": "415240",
    "end": "417720"
  },
  {
    "text": "does a bunch of implicit liit",
    "start": "417720",
    "end": "419720"
  },
  {
    "text": "instructions Intel assembly is basically",
    "start": "419720",
    "end": "421520"
  },
  {
    "text": "an interpreted language it can do a lot",
    "start": "421520",
    "end": "423319"
  },
  {
    "text": "of stuff all at the same time the leave",
    "start": "423319",
    "end": "425919"
  },
  {
    "text": "instruction actually moves EBP into ESP",
    "start": "425919",
    "end": "430759"
  },
  {
    "text": "so now ESP no longer points here ESP",
    "start": "430759",
    "end": "434440"
  },
  {
    "text": "points to EBP it's right here it's in",
    "start": "434440",
    "end": "437080"
  },
  {
    "text": "the same spot as EBP and then when we",
    "start": "437080",
    "end": "439560"
  },
  {
    "text": "call leave not only do we subtract ESP",
    "start": "439560",
    "end": "441840"
  },
  {
    "text": "and put it here we also pop EBP which",
    "start": "441840",
    "end": "445720"
  },
  {
    "text": "means that the new base pointer is",
    "start": "445720",
    "end": "447960"
  },
  {
    "text": "actually down here so the of the stack",
    "start": "447960",
    "end": "450400"
  },
  {
    "text": "after this instruction gets ran is EBP",
    "start": "450400",
    "end": "453759"
  },
  {
    "text": "points to the bottom and ESP points to",
    "start": "453759",
    "end": "456560"
  },
  {
    "text": "almost the top now there is one more",
    "start": "456560",
    "end": "459000"
  },
  {
    "text": "instruction that has to get ran now the",
    "start": "459000",
    "end": "461039"
  },
  {
    "text": "last instruction we have to run is the",
    "start": "461039",
    "end": "463280"
  },
  {
    "text": "return instruction there is a magical",
    "start": "463280",
    "end": "465720"
  },
  {
    "text": "value here on the stack that when Maine",
    "start": "465720",
    "end": "468199"
  },
  {
    "text": "called Foo it got put onto the stack now",
    "start": "468199",
    "end": "471360"
  },
  {
    "text": "the return instruction is a whole",
    "start": "471360",
    "end": "473120"
  },
  {
    "text": "magical instruction I made an entire",
    "start": "473120",
    "end": "475120"
  },
  {
    "text": "other video about the return instruction",
    "start": "475120",
    "end": "476879"
  },
  {
    "text": "because it's so complex in how functions",
    "start": "476879",
    "end": "478840"
  },
  {
    "text": "call each other go watch that video and",
    "start": "478840",
    "end": "480879"
  },
  {
    "text": "see if you can figure out what happens",
    "start": "480879",
    "end": "482280"
  },
  {
    "text": "next",
    "start": "482280",
    "end": "484599"
  }
]