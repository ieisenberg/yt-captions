[
  {
    "text": "do you remember the first time you wrote",
    "start": "0",
    "end": "1599"
  },
  {
    "text": "a recursive function that worked the",
    "start": "1599",
    "end": "3360"
  },
  {
    "text": "first time you were able to calculate",
    "start": "3360",
    "end": "4720"
  },
  {
    "text": "the fibonacci sequence using recursion",
    "start": "4720",
    "end": "7200"
  },
  {
    "text": "you felt like you had unlocked a",
    "start": "7200",
    "end": "8480"
  },
  {
    "text": "superpower like you had achieved a new",
    "start": "8480",
    "end": "10559"
  },
  {
    "text": "level of programming enlightenment",
    "start": "10559",
    "end": "12960"
  },
  {
    "text": "well i was young once too i'm older now",
    "start": "12960",
    "end": "15599"
  },
  {
    "text": "and i realize the mistakes that i've",
    "start": "15599",
    "end": "16880"
  },
  {
    "text": "made in the past recursion is useful",
    "start": "16880",
    "end": "19039"
  },
  {
    "text": "don't get me wrong but on embedded",
    "start": "19039",
    "end": "20880"
  },
  {
    "text": "systems recursion is highly discouraged",
    "start": "20880",
    "end": "23600"
  },
  {
    "text": "here's why the main reason people hate",
    "start": "23600",
    "end": "25920"
  },
  {
    "text": "recursion on embedded systems is because",
    "start": "25920",
    "end": "27760"
  },
  {
    "text": "embedded systems typically have limited",
    "start": "27760",
    "end": "30160"
  },
  {
    "text": "memory space the stm32 blue pill for",
    "start": "30160",
    "end": "33040"
  },
  {
    "text": "example from my previous videos only has",
    "start": "33040",
    "end": "35440"
  },
  {
    "text": "20 000 bytes of ram",
    "start": "35440",
    "end": "37760"
  },
  {
    "text": "you may be asking wait how does the way",
    "start": "37760",
    "end": "40079"
  },
  {
    "text": "that i write a function in code using",
    "start": "40079",
    "end": "42160"
  },
  {
    "text": "recursion affect the amount of ram that",
    "start": "42160",
    "end": "44719"
  },
  {
    "text": "my system uses and that's a good",
    "start": "44719",
    "end": "46320"
  },
  {
    "text": "question",
    "start": "46320",
    "end": "47280"
  },
  {
    "text": "to answer that we need to understand how",
    "start": "47280",
    "end": "49840"
  },
  {
    "text": "a function call works at a low low level",
    "start": "49840",
    "end": "52879"
  },
  {
    "text": "when a function is called under the hood",
    "start": "52879",
    "end": "54719"
  },
  {
    "text": "in the assembly the processor is",
    "start": "54719",
    "end": "56719"
  },
  {
    "text": "allocating memory to store the local",
    "start": "56719",
    "end": "58960"
  },
  {
    "text": "variables for that function those local",
    "start": "58960",
    "end": "61199"
  },
  {
    "text": "variables live in what is called a stack",
    "start": "61199",
    "end": "63199"
  },
  {
    "text": "frame",
    "start": "63199",
    "end": "64080"
  },
  {
    "text": "this stack frame has enough room to",
    "start": "64080",
    "end": "65840"
  },
  {
    "text": "contain every local variable that",
    "start": "65840",
    "end": "67760"
  },
  {
    "text": "function may need so here for example i",
    "start": "67760",
    "end": "70159"
  },
  {
    "text": "have a function foo written in c",
    "start": "70159",
    "end": "72720"
  },
  {
    "text": "fou uses four integers a b",
    "start": "72720",
    "end": "76080"
  },
  {
    "text": "x and y",
    "start": "76080",
    "end": "77439"
  },
  {
    "text": "each integer is four bytes wide so",
    "start": "77439",
    "end": "79439"
  },
  {
    "text": "therefore foo's stack frame will be",
    "start": "79439",
    "end": "81119"
  },
  {
    "text": "around 16 bytes long if we zoom into the",
    "start": "81119",
    "end": "83920"
  },
  {
    "text": "assembly language for foo we see a",
    "start": "83920",
    "end": "85840"
  },
  {
    "text": "subtract instruction is used to make",
    "start": "85840",
    "end": "88159"
  },
  {
    "text": "room on the stack for those variables at",
    "start": "88159",
    "end": "90240"
  },
  {
    "text": "the beginning of the function now if we",
    "start": "90240",
    "end": "92079"
  },
  {
    "text": "do logic inside of the function foo",
    "start": "92079",
    "end": "94240"
  },
  {
    "text": "using a for loop for example no extra",
    "start": "94240",
    "end": "96880"
  },
  {
    "text": "memory will get used the stack frame",
    "start": "96880",
    "end": "99360"
  },
  {
    "text": "stays the same size and the logic runs",
    "start": "99360",
    "end": "102000"
  },
  {
    "text": "in the context of the function foo whose",
    "start": "102000",
    "end": "104320"
  },
  {
    "text": "stack frame already exists",
    "start": "104320",
    "end": "106479"
  },
  {
    "text": "if we do logic inside of this function",
    "start": "106479",
    "end": "108159"
  },
  {
    "text": "using recursion however that's where",
    "start": "108159",
    "end": "110960"
  },
  {
    "text": "things start to get out of control",
    "start": "110960",
    "end": "113280"
  },
  {
    "text": "every time we recurse the stack frame of",
    "start": "113280",
    "end": "115759"
  },
  {
    "text": "the called function gets reallocated",
    "start": "115759",
    "end": "118399"
  },
  {
    "text": "occupying another 16 bytes of stack",
    "start": "118399",
    "end": "120719"
  },
  {
    "text": "frame space",
    "start": "120719",
    "end": "121920"
  },
  {
    "text": "even though some of those variables may",
    "start": "121920",
    "end": "123600"
  },
  {
    "text": "not get used in the case for our",
    "start": "123600",
    "end": "125439"
  },
  {
    "text": "recursion the processor is still",
    "start": "125439",
    "end": "127439"
  },
  {
    "text": "instructed to occupy space for them if",
    "start": "127439",
    "end": "130319"
  },
  {
    "text": "our recursion logic goes on for too long",
    "start": "130319",
    "end": "132319"
  },
  {
    "text": "it is 100 possible that we eat up all",
    "start": "132319",
    "end": "134800"
  },
  {
    "text": "the memory on the processor with our",
    "start": "134800",
    "end": "136800"
  },
  {
    "text": "stack frames and eventually crash it",
    "start": "136800",
    "end": "138800"
  },
  {
    "text": "should we throw recursion completely out",
    "start": "138800",
    "end": "140560"
  },
  {
    "text": "the window no of course not but we",
    "start": "140560",
    "end": "143360"
  },
  {
    "text": "should make recursive states safer with",
    "start": "143360",
    "end": "145440"
  },
  {
    "text": "some easy safeguards the biggest one is",
    "start": "145440",
    "end": "147920"
  },
  {
    "text": "to set a max recursion depth by checking",
    "start": "147920",
    "end": "150640"
  },
  {
    "text": "how deep your recursion is with every",
    "start": "150640",
    "end": "152560"
  },
  {
    "text": "call you can limit the amount of memory",
    "start": "152560",
    "end": "154560"
  },
  {
    "text": "your recursion logic uses by setting a",
    "start": "154560",
    "end": "156800"
  },
  {
    "text": "max depth so if you're programming on a",
    "start": "156800",
    "end": "159120"
  },
  {
    "text": "system with gigabytes and gigabytes of",
    "start": "159120",
    "end": "160720"
  },
  {
    "text": "ram then have at it recurse to your",
    "start": "160720",
    "end": "163040"
  },
  {
    "text": "heart's content but if you're an",
    "start": "163040",
    "end": "164800"
  },
  {
    "text": "embedded developer be wary of the next",
    "start": "164800",
    "end": "166879"
  },
  {
    "text": "time you calculate the thousandth digit",
    "start": "166879",
    "end": "168800"
  },
  {
    "text": "of the fibonacci sequence on your arm",
    "start": "168800",
    "end": "170720"
  },
  {
    "text": "cortex m3 anyway guys thanks for",
    "start": "170720",
    "end": "173200"
  },
  {
    "text": "watching really appreciate it hit",
    "start": "173200",
    "end": "174720"
  },
  {
    "text": "subscribe for more information like this",
    "start": "174720",
    "end": "176720"
  },
  {
    "text": "and leave a comment below and tell me",
    "start": "176720",
    "end": "178239"
  },
  {
    "text": "why you either love or hate recursion",
    "start": "178239",
    "end": "180319"
  },
  {
    "text": "we'll see you next time",
    "start": "180319",
    "end": "183440"
  },
  {
    "text": "[Music]",
    "start": "183440",
    "end": "187680"
  },
  {
    "text": "you",
    "start": "187680",
    "end": "189760"
  }
]