[
  {
    "text": "we've all seen arrays before and array",
    "start": "80",
    "end": "2080"
  },
  {
    "text": "is just a block of memory that stores",
    "start": "2080",
    "end": "4319"
  },
  {
    "text": "elements that are all the same size",
    "start": "4319",
    "end": "6080"
  },
  {
    "text": "continuously in memory and then to",
    "start": "6080",
    "end": "8400"
  },
  {
    "text": "access an array we do some kind of",
    "start": "8400",
    "end": "9920"
  },
  {
    "text": "expression like this but why do arrays",
    "start": "9920",
    "end": "13120"
  },
  {
    "text": "start at zero and also what if I told",
    "start": "13120",
    "end": "15480"
  },
  {
    "text": "you that this was also legal in C today",
    "start": "15480",
    "end": "19000"
  },
  {
    "text": "we're talking about the math behind",
    "start": "19000",
    "end": "20560"
  },
  {
    "text": "arrays and why languages that use",
    "start": "20560",
    "end": "22600"
  },
  {
    "text": "one-based indexing Lua are incorrect",
    "start": "22600",
    "end": "25400"
  },
  {
    "text": "let's Jump Right In when we're",
    "start": "25400",
    "end": "26720"
  },
  {
    "text": "programming and we have variables that",
    "start": "26720",
    "end": "28240"
  },
  {
    "text": "are all of the same type and can similar",
    "start": "28240",
    "end": "30640"
  },
  {
    "text": "kinds of information we want to store",
    "start": "30640",
    "end": "32558"
  },
  {
    "text": "those variables into what is called an",
    "start": "32559",
    "end": "34079"
  },
  {
    "text": "array and an array is just a block of",
    "start": "34079",
    "end": "36239"
  },
  {
    "text": "memory that is meant to house variables",
    "start": "36239",
    "end": "38280"
  },
  {
    "text": "that are the same type and the same size",
    "start": "38280",
    "end": "40360"
  },
  {
    "text": "that are contiguous together in memory",
    "start": "40360",
    "end": "42320"
  },
  {
    "text": "so to make one we'll make an INT array",
    "start": "42320",
    "end": "44480"
  },
  {
    "text": "and we'll call it my array and two",
    "start": "44480",
    "end": "46079"
  },
  {
    "text": "denote that it's an array all we have to",
    "start": "46079",
    "end": "47480"
  },
  {
    "text": "do is put these square brackets after",
    "start": "47480",
    "end": "49440"
  },
  {
    "text": "the name and we can place the size of",
    "start": "49440",
    "end": "51280"
  },
  {
    "text": "the array in one of two locations we can",
    "start": "51280",
    "end": "53320"
  },
  {
    "text": "either put it here and not preassign",
    "start": "53320",
    "end": "55520"
  },
  {
    "text": "values or we can leave this blank and",
    "start": "55520",
    "end": "57680"
  },
  {
    "text": "then preassign the values here I can do",
    "start": "57680",
    "end": "59680"
  },
  {
    "text": "one 1 2 3 4 for example meaning I have",
    "start": "59680",
    "end": "62000"
  },
  {
    "text": "an array now that is of size four and it",
    "start": "62000",
    "end": "64400"
  },
  {
    "text": "contains the values 1 2 3 and four and",
    "start": "64400",
    "end": "67400"
  },
  {
    "text": "maybe these are user IDs maybe these are",
    "start": "67400",
    "end": "69600"
  },
  {
    "text": "lines we read in from a file this could",
    "start": "69600",
    "end": "71400"
  },
  {
    "text": "be any kind of information that are all",
    "start": "71400",
    "end": "73479"
  },
  {
    "text": "the same type and represent similar",
    "start": "73479",
    "end": "75520"
  },
  {
    "text": "kinds of information when we're talking",
    "start": "75520",
    "end": "77119"
  },
  {
    "text": "about arrays the first question that",
    "start": "77119",
    "end": "78840"
  },
  {
    "text": "comes up for a lot of people is what is",
    "start": "78840",
    "end": "80840"
  },
  {
    "text": "the type of this keyword and you're",
    "start": "80840",
    "end": "83200"
  },
  {
    "text": "probably thinking well it's an array",
    "start": "83200",
    "end": "84759"
  },
  {
    "text": "type no it's not in C the type of an",
    "start": "84759",
    "end": "88479"
  },
  {
    "text": "array label is actually a pointer we can",
    "start": "88479",
    "end": "91360"
  },
  {
    "text": "prove that by printing it right here so",
    "start": "91360",
    "end": "93960"
  },
  {
    "text": "we'll compile the program and then print",
    "start": "93960",
    "end": "96200"
  },
  {
    "text": "the array variable and that array",
    "start": "96200",
    "end": "98119"
  },
  {
    "text": "variable is going to be hex 7f something",
    "start": "98119",
    "end": "100240"
  },
  {
    "text": "something something and we can see that",
    "start": "100240",
    "end": "101840"
  },
  {
    "text": "it's a stack based variable because it",
    "start": "101840",
    "end": "103360"
  },
  {
    "text": "has this 7f here that 7f means that it's",
    "start": "103360",
    "end": "105600"
  },
  {
    "text": "in the stack on a 64-bit system so now",
    "start": "105600",
    "end": "109759"
  },
  {
    "text": "the question is how do we use the array",
    "start": "109759",
    "end": "111799"
  },
  {
    "text": "right well like I said before to get a",
    "start": "111799",
    "end": "113479"
  },
  {
    "text": "value out of an array all we have to do",
    "start": "113479",
    "end": "115600"
  },
  {
    "text": "is index into it and to index into it we",
    "start": "115600",
    "end": "118079"
  },
  {
    "text": "use the same syntax as the assignment we",
    "start": "118079",
    "end": "120479"
  },
  {
    "text": "put the index that we want to use now to",
    "start": "120479",
    "end": "122840"
  },
  {
    "text": "get the first element of the array you",
    "start": "122840",
    "end": "124960"
  },
  {
    "text": "would think we'd use the number one but",
    "start": "124960",
    "end": "126880"
  },
  {
    "text": "here we actually use the number zero",
    "start": "126880",
    "end": "128679"
  },
  {
    "text": "which is really interesting because why",
    "start": "128679",
    "end": "130759"
  },
  {
    "text": "do we even use zero if I want to get the",
    "start": "130759",
    "end": "132480"
  },
  {
    "text": "first element shouldn't I use the number",
    "start": "132480",
    "end": "133920"
  },
  {
    "text": "one let's just compile this real quick",
    "start": "133920",
    "end": "135360"
  },
  {
    "text": "and show you that the number revealed",
    "start": "135360",
    "end": "136920"
  },
  {
    "text": "here is in fact the first element now",
    "start": "136920",
    "end": "139599"
  },
  {
    "text": "the reason that this happens actually",
    "start": "139599",
    "end": "141360"
  },
  {
    "text": "has to do with the math that happens",
    "start": "141360",
    "end": "143400"
  },
  {
    "text": "under the hood when we use the array",
    "start": "143400",
    "end": "146160"
  },
  {
    "text": "pointer so like I said before an array",
    "start": "146160",
    "end": "148280"
  },
  {
    "text": "is just a block of M memory that",
    "start": "148280",
    "end": "150319"
  },
  {
    "text": "contains elements that are of the same",
    "start": "150319",
    "end": "152400"
  },
  {
    "text": "size and they're all contiguous right",
    "start": "152400",
    "end": "153800"
  },
  {
    "text": "this is like one 2 and three and it goes",
    "start": "153800",
    "end": "156160"
  },
  {
    "text": "on until however many elements there are",
    "start": "156160",
    "end": "157920"
  },
  {
    "text": "but this is our array in a nutshell the",
    "start": "157920",
    "end": "160560"
  },
  {
    "text": "base of this array the keyword we use to",
    "start": "160560",
    "end": "162959"
  },
  {
    "text": "describe it is called my array now under",
    "start": "162959",
    "end": "166319"
  },
  {
    "text": "the hood when we actually want to access",
    "start": "166319",
    "end": "168000"
  },
  {
    "text": "elements in this array the compiler does",
    "start": "168000",
    "end": "170480"
  },
  {
    "text": "some math to generate the instructions",
    "start": "170480",
    "end": "173120"
  },
  {
    "text": "to get the elements out of it we use the",
    "start": "173120",
    "end": "175680"
  },
  {
    "text": "address of the array so my array plus",
    "start": "175680",
    "end": "179360"
  },
  {
    "text": "the index you give it and this is in",
    "start": "179360",
    "end": "181879"
  },
  {
    "text": "parenthesis here times the size of the",
    "start": "181879",
    "end": "185599"
  },
  {
    "text": "elements so the size of int in this case",
    "start": "185599",
    "end": "187920"
  },
  {
    "text": "right so what we're doing here is we're",
    "start": "187920",
    "end": "189680"
  },
  {
    "text": "actually saying to get an element in my",
    "start": "189680",
    "end": "192760"
  },
  {
    "text": "array we do my array plus the index",
    "start": "192760",
    "end": "195920"
  },
  {
    "text": "times the size of the integer which is",
    "start": "195920",
    "end": "198519"
  },
  {
    "text": "going to be four bytes so when I give it",
    "start": "198519",
    "end": "200440"
  },
  {
    "text": "the zero withth index I actually end up",
    "start": "200440",
    "end": "202840"
  },
  {
    "text": "doing my array plus 0 which gets us the",
    "start": "202840",
    "end": "207159"
  },
  {
    "text": "first element because the my array is is",
    "start": "207159",
    "end": "209879"
  },
  {
    "text": "just a pointer what I'm able to do is",
    "start": "209879",
    "end": "211959"
  },
  {
    "text": "use basic pointer arithmetic to",
    "start": "211959",
    "end": "214040"
  },
  {
    "text": "dreference values inside of it here so",
    "start": "214040",
    "end": "216040"
  },
  {
    "text": "by saying the zero with index I'm saying",
    "start": "216040",
    "end": "218000"
  },
  {
    "text": "my array plus zero which gets us this",
    "start": "218000",
    "end": "220680"
  },
  {
    "text": "element and then the same math applies",
    "start": "220680",
    "end": "222400"
  },
  {
    "text": "to get the next element in the array if",
    "start": "222400",
    "end": "223720"
  },
  {
    "text": "I want to get the second element I",
    "start": "223720",
    "end": "225879"
  },
  {
    "text": "actually going to use one because I'm",
    "start": "225879",
    "end": "227439"
  },
  {
    "text": "going to index plus the size of the",
    "start": "227439",
    "end": "229519"
  },
  {
    "text": "array to access the memory at that",
    "start": "229519",
    "end": "231560"
  },
  {
    "text": "location pretty neat now that's all well",
    "start": "231560",
    "end": "233920"
  },
  {
    "text": "and good and I think we all agree that",
    "start": "233920",
    "end": "235280"
  },
  {
    "text": "that's what's happening under the hood",
    "start": "235280",
    "end": "236519"
  },
  {
    "text": "here but what if I also told you that to",
    "start": "236519",
    "end": "238840"
  },
  {
    "text": "get the zero with element of this array",
    "start": "238840",
    "end": "241159"
  },
  {
    "text": "we could do this notation here we could",
    "start": "241159",
    "end": "243879"
  },
  {
    "text": "say zero of my array now you're probably",
    "start": "243879",
    "end": "247720"
  },
  {
    "text": "going to think no surely that won't work",
    "start": "247720",
    "end": "249560"
  },
  {
    "text": "right zero isn't a pointer and my aray",
    "start": "249560",
    "end": "251840"
  },
  {
    "text": "is a pointer we're using it as an index",
    "start": "251840",
    "end": "254079"
  },
  {
    "text": "how how does that all happen under the",
    "start": "254079",
    "end": "255319"
  },
  {
    "text": "hood and you can even Pro and we can",
    "start": "255319",
    "end": "257000"
  },
  {
    "text": "prove that it works right now by running",
    "start": "257000",
    "end": "258440"
  },
  {
    "text": "this command and seeing that we still",
    "start": "258440",
    "end": "261239"
  },
  {
    "text": "get did I actually save this and seeing",
    "start": "261239",
    "end": "263320"
  },
  {
    "text": "that we still get the piece of",
    "start": "263320",
    "end": "265720"
  },
  {
    "text": "information that we did before so how",
    "start": "265720",
    "end": "268680"
  },
  {
    "text": "how is this happening how is it possible",
    "start": "268680",
    "end": "270600"
  },
  {
    "text": "that we can use zero as an array an",
    "start": "270600",
    "end": "273479"
  },
  {
    "text": "index off by the my array pointer you",
    "start": "273479",
    "end": "276720"
  },
  {
    "text": "may be thinking that it works the exact",
    "start": "276720",
    "end": "278919"
  },
  {
    "text": "same way you're thinking oh well surely",
    "start": "278919",
    "end": "280680"
  },
  {
    "text": "the transitive property of addition",
    "start": "280680",
    "end": "282800"
  },
  {
    "text": "means that a plus b is the same as b + a",
    "start": "282800",
    "end": "287360"
  },
  {
    "text": "and while this holds true in math it",
    "start": "287360",
    "end": "290479"
  },
  {
    "text": "actually falls apart in programming",
    "start": "290479",
    "end": "293080"
  },
  {
    "text": "because I have my array which in the",
    "start": "293080",
    "end": "295400"
  },
  {
    "text": "previous example is equal to zero and",
    "start": "295400",
    "end": "298320"
  },
  {
    "text": "the index is equal to the pointer value",
    "start": "298320",
    "end": "301000"
  },
  {
    "text": "of my array multiplying that by four the",
    "start": "301000",
    "end": "304680"
  },
  {
    "text": "size of an integer would make that array",
    "start": "304680",
    "end": "307360"
  },
  {
    "text": "index overflow and none of this math",
    "start": "307360",
    "end": "309840"
  },
  {
    "text": "would work out we would get some random",
    "start": "309840",
    "end": "311520"
  },
  {
    "text": "address it' be some value mod 64 bits",
    "start": "311520",
    "end": "314800"
  },
  {
    "text": "and then it would just crash we wouldn't",
    "start": "314800",
    "end": "316280"
  },
  {
    "text": "get to the location that we need to do",
    "start": "316280",
    "end": "317880"
  },
  {
    "text": "it's much simpler than this and it ends",
    "start": "317880",
    "end": "319160"
  },
  {
    "text": "up being a bit of an optimization that",
    "start": "319160",
    "end": "321000"
  },
  {
    "text": "the compiler does so in the event that I",
    "start": "321000",
    "end": "323160"
  },
  {
    "text": "have the array of an index or an index",
    "start": "323160",
    "end": "327960"
  },
  {
    "text": "of the array in both cases all this",
    "start": "327960",
    "end": "330680"
  },
  {
    "text": "turns into is the thing pointed to the",
    "start": "330680",
    "end": "333400"
  },
  {
    "text": "dfference value of a + I where a is a",
    "start": "333400",
    "end": "339520"
  },
  {
    "text": "pointer type and I is a integer type now",
    "start": "339520",
    "end": "344039"
  },
  {
    "text": "if I were to flip these if I made a the",
    "start": "344039",
    "end": "346400"
  },
  {
    "text": "index and I the base at the end of the",
    "start": "346400",
    "end": "348479"
  },
  {
    "text": "day internally one of these is still a",
    "start": "348479",
    "end": "350880"
  },
  {
    "text": "pointer what's happening internal in the",
    "start": "350880",
    "end": "352880"
  },
  {
    "text": "compiler is it's taking the value that",
    "start": "352880",
    "end": "355520"
  },
  {
    "text": "is the integer type the non-p pointer",
    "start": "355520",
    "end": "358240"
  },
  {
    "text": "type and it is upgrading it to the index",
    "start": "358240",
    "end": "362759"
  },
  {
    "text": "so it's multiplying it times 4 and in",
    "start": "362759",
    "end": "365440"
  },
  {
    "text": "this case it's multiplying still 0 * 4",
    "start": "365440",
    "end": "369160"
  },
  {
    "text": "because Zer is that index value so all",
    "start": "369160",
    "end": "371360"
  },
  {
    "text": "we have left is I which is our my array",
    "start": "371360",
    "end": "375120"
  },
  {
    "text": "value What's Happening Here is not so",
    "start": "375120",
    "end": "377000"
  },
  {
    "text": "much of a transitive property of",
    "start": "377000",
    "end": "378680"
  },
  {
    "text": "addition thing it's just the compiler",
    "start": "378680",
    "end": "380800"
  },
  {
    "text": "deciding which value gets upgraded to",
    "start": "380800",
    "end": "383800"
  },
  {
    "text": "the pointer in which value does not so",
    "start": "383800",
    "end": "385800"
  },
  {
    "text": "at the end of the day both of these are",
    "start": "385800",
    "end": "387800"
  },
  {
    "text": "legal but not for the reason you",
    "start": "387800",
    "end": "389639"
  },
  {
    "text": "probably thought so this is why I very",
    "start": "389639",
    "end": "392280"
  },
  {
    "text": "much dislike languages like Lua I'm",
    "start": "392280",
    "end": "394280"
  },
  {
    "text": "thinking about what's happening under",
    "start": "394280",
    "end": "395319"
  },
  {
    "text": "the hood when I see an array where you",
    "start": "395319",
    "end": "397800"
  },
  {
    "text": "index into the first element to get the",
    "start": "397800",
    "end": "399919"
  },
  {
    "text": "first element I'm I'm thinking in the",
    "start": "399919",
    "end": "401240"
  },
  {
    "text": "back of my head well then where is that",
    "start": "401240",
    "end": "402800"
  },
  {
    "text": "first element there where is the zeroeth",
    "start": "402800",
    "end": "404840"
  },
  {
    "text": "element now if you learned anything here",
    "start": "404840",
    "end": "406720"
  },
  {
    "text": "you'll probably learn something too",
    "start": "406720",
    "end": "407919"
  },
  {
    "text": "about why void pointers exist they're a",
    "start": "407919",
    "end": "410240"
  },
  {
    "text": "typeless pointer that actually has a lot",
    "start": "410240",
    "end": "412840"
  },
  {
    "text": "of power in the C language go check that",
    "start": "412840",
    "end": "414560"
  },
  {
    "text": "out right there see you guys there",
    "start": "414560",
    "end": "418280"
  }
]