[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "programming is cool because we can make",
    "start": "140",
    "end": "2460"
  },
  {
    "text": "programs solve problems or run tasks for",
    "start": "2460",
    "end": "5220"
  },
  {
    "text": "us but sometimes programs feel like",
    "start": "5220",
    "end": "7799"
  },
  {
    "text": "magic let's demystify how return works",
    "start": "7799",
    "end": "11340"
  },
  {
    "start": "10000",
    "end": "135000"
  },
  {
    "text": "typically when we write code we organize",
    "start": "11340",
    "end": "13679"
  },
  {
    "text": "them into blocks that all should perform",
    "start": "13679",
    "end": "15660"
  },
  {
    "text": "One Singular action these blocks are",
    "start": "15660",
    "end": "18900"
  },
  {
    "text": "called functions for example this is a",
    "start": "18900",
    "end": "21720"
  },
  {
    "text": "function that hold on",
    "start": "21720",
    "end": "23880"
  },
  {
    "text": "this is a function sterlin that",
    "start": "23880",
    "end": "26640"
  },
  {
    "text": "calculates the length of a string",
    "start": "26640",
    "end": "28680"
  },
  {
    "text": "when you call a function you pass it",
    "start": "28680",
    "end": "30539"
  },
  {
    "text": "arguments and it returns a value",
    "start": "30539",
    "end": "33239"
  },
  {
    "text": "to use a function we call it by",
    "start": "33239",
    "end": "35880"
  },
  {
    "text": "specifying the name of the declared",
    "start": "35880",
    "end": "37920"
  },
  {
    "text": "function and the set of arguments and",
    "start": "37920",
    "end": "40079"
  },
  {
    "text": "where to store the return value",
    "start": "40079",
    "end": "43020"
  },
  {
    "text": "the function call stops the execution of",
    "start": "43020",
    "end": "45960"
  },
  {
    "text": "the code calling the function referred",
    "start": "45960",
    "end": "48600"
  },
  {
    "text": "to as the caller and begins execution in",
    "start": "48600",
    "end": "51719"
  },
  {
    "text": "the called function or the call E",
    "start": "51719",
    "end": "54660"
  },
  {
    "text": "but how does a program know where to",
    "start": "54660",
    "end": "56940"
  },
  {
    "text": "return to when the Kali ends how does",
    "start": "56940",
    "end": "60660"
  },
  {
    "text": "the return statement return to the right",
    "start": "60660",
    "end": "62940"
  },
  {
    "text": "location well one solution could be that",
    "start": "62940",
    "end": "65939"
  },
  {
    "text": "the location the function it returns to",
    "start": "65939",
    "end": "67920"
  },
  {
    "text": "could just be calculated at compile time",
    "start": "67920",
    "end": "70439"
  },
  {
    "text": "and baked into the machine code of the",
    "start": "70439",
    "end": "72960"
  },
  {
    "text": "program return from sterlen by jumping",
    "start": "72960",
    "end": "75840"
  },
  {
    "text": "here for example",
    "start": "75840",
    "end": "77700"
  },
  {
    "text": "the problem with this is that a function",
    "start": "77700",
    "end": "79860"
  },
  {
    "text": "can be called for multiple places take",
    "start": "79860",
    "end": "82439"
  },
  {
    "text": "this code for example where we have",
    "start": "82439",
    "end": "84000"
  },
  {
    "text": "three functions function a b and sterlin",
    "start": "84000",
    "end": "88560"
  },
  {
    "text": "function a and function B both use the",
    "start": "88560",
    "end": "91619"
  },
  {
    "text": "Sterling function so hard coding and",
    "start": "91619",
    "end": "94259"
  },
  {
    "text": "offset in the machine code wouldn't work",
    "start": "94259",
    "end": "96119"
  },
  {
    "text": "because it needs to return to two",
    "start": "96119",
    "end": "98340"
  },
  {
    "text": "different locations",
    "start": "98340",
    "end": "100320"
  },
  {
    "text": "okay so what if instead we created a",
    "start": "100320",
    "end": "103140"
  },
  {
    "text": "structure that contained all the offsets",
    "start": "103140",
    "end": "105479"
  },
  {
    "text": "the possible return locations and the",
    "start": "105479",
    "end": "108000"
  },
  {
    "text": "return instruction just looked up which",
    "start": "108000",
    "end": "109920"
  },
  {
    "text": "one to return to",
    "start": "109920",
    "end": "111420"
  },
  {
    "text": "this solution actually works for many",
    "start": "111420",
    "end": "113640"
  },
  {
    "text": "cases but breaks on computed calls or",
    "start": "113640",
    "end": "117299"
  },
  {
    "text": "calls whose addresses are determined at",
    "start": "117299",
    "end": "119880"
  },
  {
    "text": "runtime",
    "start": "119880",
    "end": "121320"
  },
  {
    "text": "for example in C plus plus a virtual",
    "start": "121320",
    "end": "123659"
  },
  {
    "text": "class method as computed at runtime",
    "start": "123659",
    "end": "125759"
  },
  {
    "text": "which is called Dynamic dispatch so a",
    "start": "125759",
    "end": "128520"
  },
  {
    "text": "return address lookup table wouldn't be",
    "start": "128520",
    "end": "130560"
  },
  {
    "text": "able to calculate that before the",
    "start": "130560",
    "end": "132239"
  },
  {
    "text": "program runs and track all these",
    "start": "132239",
    "end": "134220"
  },
  {
    "text": "different return values",
    "start": "134220",
    "end": "136500"
  },
  {
    "start": "135000",
    "end": "261000"
  },
  {
    "text": "into the return problem is actually not",
    "start": "136500",
    "end": "138420"
  },
  {
    "text": "based on how the return statement works",
    "start": "138420",
    "end": "140640"
  },
  {
    "text": "but instead on how the function is",
    "start": "140640",
    "end": "142980"
  },
  {
    "text": "called",
    "start": "142980",
    "end": "144360"
  },
  {
    "text": "to discuss how this works we'll need to",
    "start": "144360",
    "end": "146520"
  },
  {
    "text": "dive into the Assembly of the function",
    "start": "146520",
    "end": "148500"
  },
  {
    "text": "call and don't worry it's not",
    "start": "148500",
    "end": "150120"
  },
  {
    "text": "complicated at all",
    "start": "150120",
    "end": "151560"
  },
  {
    "text": "a function call in C translates to the",
    "start": "151560",
    "end": "154440"
  },
  {
    "text": "call instruction and Intel assembly and",
    "start": "154440",
    "end": "156780"
  },
  {
    "text": "other assembly variants it has a",
    "start": "156780",
    "end": "158400"
  },
  {
    "text": "different name but they're all behaving",
    "start": "158400",
    "end": "159959"
  },
  {
    "text": "generally the same way",
    "start": "159959",
    "end": "162540"
  },
  {
    "text": "inside the CPU through our variables",
    "start": "162540",
    "end": "165239"
  },
  {
    "text": "called registers the register we care",
    "start": "165239",
    "end": "167400"
  },
  {
    "text": "about is PC or the program counter it's",
    "start": "167400",
    "end": "170640"
  },
  {
    "text": "also referred to as IP or the",
    "start": "170640",
    "end": "173099"
  },
  {
    "text": "instruction pointer",
    "start": "173099",
    "end": "174420"
  },
  {
    "text": "the register contains the address of the",
    "start": "174420",
    "end": "176760"
  },
  {
    "text": "next instruction to be executed by the",
    "start": "176760",
    "end": "178920"
  },
  {
    "text": "CPU",
    "start": "178920",
    "end": "180180"
  },
  {
    "text": "when the processor runs the call",
    "start": "180180",
    "end": "182040"
  },
  {
    "text": "instruction the CPU quietly does",
    "start": "182040",
    "end": "184440"
  },
  {
    "text": "something without saying anything about",
    "start": "184440",
    "end": "186300"
  },
  {
    "text": "it the call instruction not only diverts",
    "start": "186300",
    "end": "189360"
  },
  {
    "text": "execution to the called function but it",
    "start": "189360",
    "end": "192840"
  },
  {
    "text": "secretly saves the program counter now",
    "start": "192840",
    "end": "195480"
  },
  {
    "text": "referred to as the return address onto",
    "start": "195480",
    "end": "198120"
  },
  {
    "text": "the stack the stack being memory used by",
    "start": "198120",
    "end": "200879"
  },
  {
    "text": "the program to store variables and",
    "start": "200879",
    "end": "202739"
  },
  {
    "text": "runtime information sterlen begins to",
    "start": "202739",
    "end": "205319"
  },
  {
    "text": "run and it creates a region of memory on",
    "start": "205319",
    "end": "207959"
  },
  {
    "text": "top of the save return address referred",
    "start": "207959",
    "end": "210480"
  },
  {
    "text": "to as sterlens stack frame two more",
    "start": "210480",
    "end": "213840"
  },
  {
    "text": "variables in the CPU the base pointer BP",
    "start": "213840",
    "end": "217019"
  },
  {
    "text": "and the stack pointer SP determine where",
    "start": "217019",
    "end": "220620"
  },
  {
    "text": "the stack frame for sterlin starts and",
    "start": "220620",
    "end": "223379"
  },
  {
    "text": "ends memory in the stack frame is used",
    "start": "223379",
    "end": "226260"
  },
  {
    "text": "for Sterling's local variables for",
    "start": "226260",
    "end": "228180"
  },
  {
    "text": "example the variable I sterland runs all",
    "start": "228180",
    "end": "231060"
  },
  {
    "text": "of its code and then it comes to the end",
    "start": "231060",
    "end": "233099"
  },
  {
    "text": "of its execution where the return",
    "start": "233099",
    "end": "235260"
  },
  {
    "text": "statement is invoked before Sterling",
    "start": "235260",
    "end": "237659"
  },
  {
    "text": "returns it collapses its stack frame so",
    "start": "237659",
    "end": "240480"
  },
  {
    "text": "that the stack pointer SP or the top of",
    "start": "240480",
    "end": "243420"
  },
  {
    "text": "the stack points to the previously saved",
    "start": "243420",
    "end": "245940"
  },
  {
    "text": "return address",
    "start": "245940",
    "end": "247560"
  },
  {
    "text": "in assembly the return statement gets",
    "start": "247560",
    "end": "249480"
  },
  {
    "text": "boiled down to a single instruction rent",
    "start": "249480",
    "end": "252780"
  },
  {
    "text": "the red instruction pops off the return",
    "start": "252780",
    "end": "254879"
  },
  {
    "text": "address into the program counter and the",
    "start": "254879",
    "end": "257160"
  },
  {
    "text": "CPU continues execution after the call",
    "start": "257160",
    "end": "259859"
  },
  {
    "text": "pretty cool right well what about the",
    "start": "259859",
    "end": "262440"
  },
  {
    "start": "261000",
    "end": "307000"
  },
  {
    "text": "return value where does that go",
    "start": "262440",
    "end": "264900"
  },
  {
    "text": "every processor architecture has an",
    "start": "264900",
    "end": "267180"
  },
  {
    "text": "agreed upon convention regarding where",
    "start": "267180",
    "end": "269520"
  },
  {
    "text": "the return value goes in Intel assembly",
    "start": "269520",
    "end": "272340"
  },
  {
    "text": "for example the return value goes into",
    "start": "272340",
    "end": "274199"
  },
  {
    "text": "the a register or Rax",
    "start": "274199",
    "end": "277080"
  },
  {
    "text": "this piece of example C code Returns the",
    "start": "277080",
    "end": "279540"
  },
  {
    "text": "value 0 which when viewed in assembly we",
    "start": "279540",
    "end": "282120"
  },
  {
    "text": "can see happening when the assembler",
    "start": "282120",
    "end": "284100"
  },
  {
    "text": "loads the value 0 into Rax",
    "start": "284100",
    "end": "287160"
  },
  {
    "text": "because the return address controls",
    "start": "287160",
    "end": "288960"
  },
  {
    "text": "where the program returns to and",
    "start": "288960",
    "end": "290759"
  },
  {
    "text": "therefore the code that the program runs",
    "start": "290759",
    "end": "292979"
  },
  {
    "text": "it is a huge Target for hackers that",
    "start": "292979",
    "end": "295620"
  },
  {
    "text": "want to run malicious code to learn more",
    "start": "295620",
    "end": "298080"
  },
  {
    "text": "about that go watch this video",
    "start": "298080",
    "end": "301758"
  }
]