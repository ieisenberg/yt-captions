[
  {
    "start": "0",
    "end": "18000"
  },
  {
    "text": "you probably code like this but Yoda",
    "start": "0",
    "end": "3480"
  },
  {
    "text": "codes like this this is Yoda notation",
    "start": "3480",
    "end": "7560"
  },
  {
    "text": "and it's extremely controversial in this",
    "start": "7560",
    "end": "10500"
  },
  {
    "text": "video we'll discuss Yoda notation what",
    "start": "10500",
    "end": "12599"
  },
  {
    "text": "it is the pros and cons of using it the",
    "start": "12599",
    "end": "14700"
  },
  {
    "text": "controversy around Yoda notation and my",
    "start": "14700",
    "end": "17100"
  },
  {
    "text": "recommendation if you should use it or",
    "start": "17100",
    "end": "18779"
  },
  {
    "start": "18000",
    "end": "31000"
  },
  {
    "text": "not so Yoda notation is the practice of",
    "start": "18779",
    "end": "21420"
  },
  {
    "text": "reversing the order of a Boolean check",
    "start": "21420",
    "end": "24480"
  },
  {
    "text": "on a constant or a function call so for",
    "start": "24480",
    "end": "26760"
  },
  {
    "text": "example here this is Yoda notation",
    "start": "26760",
    "end": "28439"
  },
  {
    "text": "because the number comes before the",
    "start": "28439",
    "end": "30840"
  },
  {
    "text": "variable to explore why we use Yoda",
    "start": "30840",
    "end": "33540"
  },
  {
    "start": "31000",
    "end": "71000"
  },
  {
    "text": "notation let's look at my example here",
    "start": "33540",
    "end": "35520"
  },
  {
    "text": "in my C snippet here we call sum",
    "start": "35520",
    "end": "38280"
  },
  {
    "text": "function and we want to check the return",
    "start": "38280",
    "end": "40379"
  },
  {
    "text": "value of that function and see if it's",
    "start": "40379",
    "end": "42120"
  },
  {
    "text": "equal to some number that we expect if",
    "start": "42120",
    "end": "44640"
  },
  {
    "text": "the return value is 42 we do something",
    "start": "44640",
    "end": "47100"
  },
  {
    "text": "in our code seems easy enough but what",
    "start": "47100",
    "end": "50219"
  },
  {
    "text": "happens if we're a new programmer and we",
    "start": "50219",
    "end": "52440"
  },
  {
    "text": "make a mistake or we're a senior",
    "start": "52440",
    "end": "54300"
  },
  {
    "text": "programmer that rushes through the code",
    "start": "54300",
    "end": "56160"
  },
  {
    "text": "pretty quickly and we make this error",
    "start": "56160",
    "end": "58860"
  },
  {
    "text": "here to try to make some code submission",
    "start": "58860",
    "end": "61140"
  },
  {
    "text": "deadline what happens in this code does",
    "start": "61140",
    "end": "63539"
  },
  {
    "text": "this code compile does this code throw",
    "start": "63539",
    "end": "65518"
  },
  {
    "text": "an error",
    "start": "65519",
    "end": "68118"
  },
  {
    "text": "foreign",
    "start": "68520",
    "end": "71520"
  },
  {
    "text": "this code is actually valid C and it",
    "start": "71520",
    "end": "74400"
  },
  {
    "text": "will compile what happens here is the",
    "start": "74400",
    "end": "77040"
  },
  {
    "text": "return value will get set to 42 this",
    "start": "77040",
    "end": "79920"
  },
  {
    "text": "expression will return 42 to the outer",
    "start": "79920",
    "end": "82560"
  },
  {
    "text": "interpreter and this if statement will",
    "start": "82560",
    "end": "84600"
  },
  {
    "text": "always return true so despite the value",
    "start": "84600",
    "end": "87600"
  },
  {
    "start": "85000",
    "end": "102000"
  },
  {
    "text": "that's returned from some function this",
    "start": "87600",
    "end": "89939"
  },
  {
    "text": "block of code will always execute and",
    "start": "89939",
    "end": "92700"
  },
  {
    "text": "the worst part of it is it won't even",
    "start": "92700",
    "end": "94259"
  },
  {
    "text": "throw a compiler warning which means",
    "start": "94259",
    "end": "96540"
  },
  {
    "text": "unless this piece of code causes some",
    "start": "96540",
    "end": "99420"
  },
  {
    "text": "problem in production or in testing we",
    "start": "99420",
    "end": "101640"
  },
  {
    "text": "will never catch it so this is where",
    "start": "101640",
    "end": "104340"
  },
  {
    "start": "102000",
    "end": "125000"
  },
  {
    "text": "Yoda notation comes in let's say for",
    "start": "104340",
    "end": "106439"
  },
  {
    "text": "example instead of using our previous",
    "start": "106439",
    "end": "107880"
  },
  {
    "text": "notation we did this with Yoda notation",
    "start": "107880",
    "end": "110640"
  },
  {
    "text": "here we write 42 is equal to red and",
    "start": "110640",
    "end": "113700"
  },
  {
    "text": "what will actually happen here in the",
    "start": "113700",
    "end": "114960"
  },
  {
    "text": "compiler is we are trying to set a",
    "start": "114960",
    "end": "117420"
  },
  {
    "text": "constant value equal to another variable",
    "start": "117420",
    "end": "119939"
  },
  {
    "text": "this will throw an error in the compiler",
    "start": "119939",
    "end": "122280"
  },
  {
    "text": "and force us to check out this code and",
    "start": "122280",
    "end": "124740"
  },
  {
    "text": "fix the problem so you may be wondering",
    "start": "124740",
    "end": "126719"
  },
  {
    "text": "why is this controversial is there a",
    "start": "126719",
    "end": "129179"
  },
  {
    "text": "reason why someone wouldn't want to use",
    "start": "129179",
    "end": "130860"
  },
  {
    "text": "Yoda notation and there actually is a",
    "start": "130860",
    "end": "132780"
  },
  {
    "text": "fairly good argument against Yoda",
    "start": "132780",
    "end": "134580"
  },
  {
    "text": "notation so here we're doing a Boolean",
    "start": "134580",
    "end": "137280"
  },
  {
    "text": "operation to see if two values are equal",
    "start": "137280",
    "end": "139560"
  },
  {
    "text": "a number and a variable or maybe a",
    "start": "139560",
    "end": "142080"
  },
  {
    "text": "function call and a variable this is a",
    "start": "142080",
    "end": "144480"
  },
  {
    "text": "good place to use Yoda notation one of",
    "start": "144480",
    "end": "146580"
  },
  {
    "text": "the pros one of the cons is that it",
    "start": "146580",
    "end": "148800"
  },
  {
    "start": "147000",
    "end": "174000"
  },
  {
    "text": "makes the code a lot harder to read and",
    "start": "148800",
    "end": "151140"
  },
  {
    "text": "understand not so much in the Boolean",
    "start": "151140",
    "end": "153840"
  },
  {
    "text": "comparison case but in the greater than",
    "start": "153840",
    "end": "157080"
  },
  {
    "text": "or equal to case if I want to check to",
    "start": "157080",
    "end": "159480"
  },
  {
    "text": "see if my code returns a value that is",
    "start": "159480",
    "end": "162239"
  },
  {
    "text": "less than 42 I could do it with this",
    "start": "162239",
    "end": "165420"
  },
  {
    "text": "snippet of code here but for someone",
    "start": "165420",
    "end": "167519"
  },
  {
    "text": "else to read my code and to go through",
    "start": "167519",
    "end": "169260"
  },
  {
    "text": "and find out what my code does this",
    "start": "169260",
    "end": "170879"
  },
  {
    "text": "actually makes the code extremely hard",
    "start": "170879",
    "end": "173640"
  },
  {
    "text": "to understand if 42 is greater than",
    "start": "173640",
    "end": "177000"
  },
  {
    "start": "174000",
    "end": "185000"
  },
  {
    "text": "equal to my return value so I have to",
    "start": "177000",
    "end": "179400"
  },
  {
    "text": "sit there for a second do some math and",
    "start": "179400",
    "end": "181200"
  },
  {
    "text": "then okay that actually means if my",
    "start": "181200",
    "end": "183000"
  },
  {
    "text": "return value is less than or equal to",
    "start": "183000",
    "end": "184920"
  },
  {
    "text": "42. so this is the majority of where the",
    "start": "184920",
    "end": "187200"
  },
  {
    "start": "185000",
    "end": "204000"
  },
  {
    "text": "controversy comes in when it comes to",
    "start": "187200",
    "end": "188519"
  },
  {
    "text": "Yoda notation people think it makes code",
    "start": "188519",
    "end": "190200"
  },
  {
    "text": "unnecessarily unreal readable and it's",
    "start": "190200",
    "end": "192720"
  },
  {
    "text": "only beneficial to the author so",
    "start": "192720",
    "end": "194459"
  },
  {
    "text": "generally the recommendation is you use",
    "start": "194459",
    "end": "196080"
  },
  {
    "text": "Yoda notation when you're doing just a",
    "start": "196080",
    "end": "198060"
  },
  {
    "text": "flat out comparison check either with a",
    "start": "198060",
    "end": "200099"
  },
  {
    "text": "double equals or maybe a triple equals",
    "start": "200099",
    "end": "201720"
  },
  {
    "text": "for languages like PHP that do concrete",
    "start": "201720",
    "end": "203760"
  },
  {
    "text": "comparisons but when you're doing things",
    "start": "203760",
    "end": "205620"
  },
  {
    "start": "204000",
    "end": "222000"
  },
  {
    "text": "like greater than or less than",
    "start": "205620",
    "end": "207239"
  },
  {
    "text": "comparisons it's typically more",
    "start": "207239",
    "end": "209159"
  },
  {
    "text": "acceptable to use the regular non-yoda",
    "start": "209159",
    "end": "212879"
  },
  {
    "text": "notation just because there's no way",
    "start": "212879",
    "end": "214800"
  },
  {
    "text": "that you can put an equal sign here that",
    "start": "214800",
    "end": "216599"
  },
  {
    "text": "will cause the issue we talked about",
    "start": "216599",
    "end": "217920"
  },
  {
    "text": "before and also this makes our code much",
    "start": "217920",
    "end": "220980"
  },
  {
    "text": "more readable compared to something like",
    "start": "220980",
    "end": "222900"
  },
  {
    "start": "222000",
    "end": "241000"
  },
  {
    "text": "this that being said pick and choose",
    "start": "222900",
    "end": "224940"
  },
  {
    "text": "where you use Yoda notation",
    "start": "224940",
    "end": "226080"
  },
  {
    "text": "appropriately it's not appropriate to",
    "start": "226080",
    "end": "228480"
  },
  {
    "text": "use it everywhere but if you're doing",
    "start": "228480",
    "end": "229799"
  },
  {
    "text": "basic comparisons like equal comparisons",
    "start": "229799",
    "end": "232080"
  },
  {
    "text": "it's probably advantageous to use Yoder",
    "start": "232080",
    "end": "234599"
  },
  {
    "text": "notation that being said leave it up to",
    "start": "234599",
    "end": "236580"
  },
  {
    "text": "your organization to determine if the",
    "start": "236580",
    "end": "238019"
  },
  {
    "text": "Yoda notation risk is worth the Yoda",
    "start": "238019",
    "end": "240360"
  },
  {
    "text": "notation reward it's also important to",
    "start": "240360",
    "end": "242280"
  },
  {
    "start": "241000",
    "end": "276000"
  },
  {
    "text": "point out that certain languages Yoda",
    "start": "242280",
    "end": "244319"
  },
  {
    "text": "notation is just not necessary for",
    "start": "244319",
    "end": "246299"
  },
  {
    "text": "example I've recreated the same error we",
    "start": "246299",
    "end": "248459"
  },
  {
    "text": "got into before in Python where instead",
    "start": "248459",
    "end": "250620"
  },
  {
    "text": "of saying X double 42 I say x equals 42.",
    "start": "250620",
    "end": "254519"
  },
  {
    "text": "you may think that we actually created",
    "start": "254519",
    "end": "256079"
  },
  {
    "text": "the same scenario that we would have in",
    "start": "256079",
    "end": "257699"
  },
  {
    "text": "C but luckily the python interpreter",
    "start": "257699",
    "end": "260280"
  },
  {
    "text": "does not allow this to occur this will",
    "start": "260280",
    "end": "262680"
  },
  {
    "text": "throw a syntax error in languages like C",
    "start": "262680",
    "end": "265199"
  },
  {
    "text": "where the logic is a lot more up to",
    "start": "265199",
    "end": "266699"
  },
  {
    "text": "interpretation use your notation where",
    "start": "266699",
    "end": "268979"
  },
  {
    "text": "appropriate but things like python where",
    "start": "268979",
    "end": "271080"
  },
  {
    "text": "you literally can't recreate that error",
    "start": "271080",
    "end": "273060"
  },
  {
    "text": "maybe the code readability issue is just",
    "start": "273060",
    "end": "275280"
  },
  {
    "text": "not worth it anyway guys that's it",
    "start": "275280",
    "end": "276840"
  },
  {
    "start": "276000",
    "end": "291000"
  },
  {
    "text": "thanks for watching really appreciate it",
    "start": "276840",
    "end": "278160"
  },
  {
    "text": "I hope you learned something about Yoda",
    "start": "278160",
    "end": "279360"
  },
  {
    "text": "notation and how you can code like a",
    "start": "279360",
    "end": "281040"
  },
  {
    "text": "Jedi if you want to learn more about how",
    "start": "281040",
    "end": "282479"
  },
  {
    "text": "to code a safer go watch this video on",
    "start": "282479",
    "end": "284580"
  },
  {
    "text": "the consequences of ignoring memory",
    "start": "284580",
    "end": "286740"
  },
  {
    "text": "safety",
    "start": "286740",
    "end": "287940"
  },
  {
    "text": "it's it's right there man just click on",
    "start": "287940",
    "end": "289800"
  },
  {
    "text": "it",
    "start": "289800",
    "end": "291918"
  }
]