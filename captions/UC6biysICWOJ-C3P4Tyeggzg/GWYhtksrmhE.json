[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "I've been told that the worst thing that",
    "start": "0",
    "end": "1740"
  },
  {
    "text": "can happen as a developer is to have",
    "start": "1740",
    "end": "3419"
  },
  {
    "text": "your code crash in production but what",
    "start": "3419",
    "end": "6839"
  },
  {
    "text": "if your production environment is in",
    "start": "6839",
    "end": "8519"
  },
  {
    "text": "space a null pointer D of reference or a",
    "start": "8519",
    "end": "11099"
  },
  {
    "text": "used after free sends your satellite",
    "start": "11099",
    "end": "12840"
  },
  {
    "text": "hurtling Into The Ether with no way to",
    "start": "12840",
    "end": "15240"
  },
  {
    "text": "control it to avoid this NASA has a set",
    "start": "15240",
    "end": "18539"
  },
  {
    "text": "of rules centered around making their",
    "start": "18539",
    "end": "20640"
  },
  {
    "text": "code easy to statically analyze the",
    "start": "20640",
    "end": "23340"
  },
  {
    "text": "rules I'm going to talk about are",
    "start": "23340",
    "end": "24660"
  },
  {
    "text": "actually derived from a set of 10 rules",
    "start": "24660",
    "end": "27119"
  },
  {
    "text": "that NASA has referred to as the power",
    "start": "27119",
    "end": "29400"
  },
  {
    "text": "of 10. Gerard Holzman a developer for",
    "start": "29400",
    "end": "32398"
  },
  {
    "text": "NASA at their jet propulsion laboratory",
    "start": "32399",
    "end": "34260"
  },
  {
    "text": "for Reliable Software acknowledges that",
    "start": "34260",
    "end": "36600"
  },
  {
    "text": "some of these rules are a little strict",
    "start": "36600",
    "end": "38579"
  },
  {
    "text": "but in scenarios that require extreme",
    "start": "38579",
    "end": "41160"
  },
  {
    "text": "safety he says the trade-off is worth it",
    "start": "41160",
    "end": "44820"
  },
  {
    "text": "NASA restricts their code to simple",
    "start": "44820",
    "end": "47160"
  },
  {
    "start": "46000",
    "end": "46000"
  },
  {
    "text": "control flow constructs this means that",
    "start": "47160",
    "end": "49739"
  },
  {
    "text": "they do not use go to statements or set",
    "start": "49739",
    "end": "51960"
  },
  {
    "text": "jump or long jump they also do not use",
    "start": "51960",
    "end": "54840"
  },
  {
    "text": "recursion recursion or a function that",
    "start": "54840",
    "end": "57539"
  },
  {
    "text": "calls into itself creates very hard to",
    "start": "57539",
    "end": "60059"
  },
  {
    "text": "follow cyclic code control flow graphs",
    "start": "60059",
    "end": "62520"
  },
  {
    "text": "recursive code can lead to Runaway code",
    "start": "62520",
    "end": "64860"
  },
  {
    "text": "which can crash especially in embedded",
    "start": "64860",
    "end": "67380"
  },
  {
    "text": "systems",
    "start": "67380",
    "end": "68939"
  },
  {
    "text": "NASA gives all of its Loops a fixed",
    "start": "68939",
    "end": "71700"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "upper bound now this may sound obvious",
    "start": "71700",
    "end": "73740"
  },
  {
    "text": "but it's actually a little more Nuance",
    "start": "73740",
    "end": "75720"
  },
  {
    "text": "in this rule for example when traversing",
    "start": "75720",
    "end": "78180"
  },
  {
    "text": "a linked list the end case of the linked",
    "start": "78180",
    "end": "80340"
  },
  {
    "text": "list may just be hit a forward pointer",
    "start": "80340",
    "end": "82380"
  },
  {
    "text": "whose value equals zero but to prevent",
    "start": "82380",
    "end": "84720"
  },
  {
    "text": "an edge case that leads to Runaway code",
    "start": "84720",
    "end": "86700"
  },
  {
    "text": "NASA will always put a top limit of the",
    "start": "86700",
    "end": "89759"
  },
  {
    "text": "amount of iterations that a linked list",
    "start": "89759",
    "end": "91680"
  },
  {
    "text": "traversal will take all Loops are bound",
    "start": "91680",
    "end": "94080"
  },
  {
    "text": "by a hard upper limit that is",
    "start": "94080",
    "end": "96240"
  },
  {
    "text": "represented as an integer not as a",
    "start": "96240",
    "end": "98460"
  },
  {
    "text": "pointer end case",
    "start": "98460",
    "end": "100320"
  },
  {
    "text": "one of the most interesting rules is",
    "start": "100320",
    "end": "102420"
  },
  {
    "start": "101000",
    "end": "101000"
  },
  {
    "text": "that NASA recommends that you do not use",
    "start": "102420",
    "end": "104579"
  },
  {
    "text": "the Heap at all you exclusively use",
    "start": "104579",
    "end": "107280"
  },
  {
    "text": "stack memory the reason for this is a",
    "start": "107280",
    "end": "110280"
  },
  {
    "text": "notable amount of memory bugs do come",
    "start": "110280",
    "end": "112740"
  },
  {
    "text": "from the use of the Heap and garbage",
    "start": "112740",
    "end": "114479"
  },
  {
    "text": "collectors these systems cannot be",
    "start": "114479",
    "end": "116820"
  },
  {
    "text": "proven by a static code analyzer by",
    "start": "116820",
    "end": "119340"
  },
  {
    "text": "limiting your code to only using stack",
    "start": "119340",
    "end": "121259"
  },
  {
    "text": "memory and setting an upper bound on the",
    "start": "121259",
    "end": "123479"
  },
  {
    "text": "amount of Stack memory you can allocate",
    "start": "123479",
    "end": "125399"
  },
  {
    "text": "You can predict exactly how much memory",
    "start": "125399",
    "end": "128160"
  },
  {
    "text": "your program is going to use by not",
    "start": "128160",
    "end": "130560"
  },
  {
    "text": "using the Heap at all you completely",
    "start": "130560",
    "end": "132360"
  },
  {
    "text": "eliminate use after freeze and memory",
    "start": "132360",
    "end": "134520"
  },
  {
    "text": "leaks",
    "start": "134520",
    "end": "135900"
  },
  {
    "text": "the next rule seems a little pedantic",
    "start": "135900",
    "end": "137760"
  },
  {
    "text": "but it actually makes a lot of sense",
    "start": "137760",
    "end": "139080"
  },
  {
    "text": "when you think about the implication a",
    "start": "139080",
    "end": "141540"
  },
  {
    "text": "function should do one thing now the",
    "start": "141540",
    "end": "144239"
  },
  {
    "text": "function may require multiple steps to",
    "start": "144239",
    "end": "146160"
  },
  {
    "text": "do that thing but the function should",
    "start": "146160",
    "end": "147959"
  },
  {
    "text": "only perform a single action to ensure",
    "start": "147959",
    "end": "150959"
  },
  {
    "text": "this and to ensure that the code is",
    "start": "150959",
    "end": "152400"
  },
  {
    "text": "readable NASA recommends that functions",
    "start": "152400",
    "end": "154739"
  },
  {
    "text": "should be no longer than 60 lines or",
    "start": "154739",
    "end": "157560"
  },
  {
    "text": "about the size of a piece of paper",
    "start": "157560",
    "end": "159500"
  },
  {
    "text": "writing your code this way ensures that",
    "start": "159500",
    "end": "161760"
  },
  {
    "text": "someone else auditing your code can",
    "start": "161760",
    "end": "163440"
  },
  {
    "text": "quickly and easily read a function and",
    "start": "163440",
    "end": "165599"
  },
  {
    "text": "understand what that function does it",
    "start": "165599",
    "end": "168060"
  },
  {
    "text": "also ensures that your function is small",
    "start": "168060",
    "end": "169680"
  },
  {
    "text": "enough and concise enough to be testable",
    "start": "169680",
    "end": "171540"
  },
  {
    "text": "as a single unit if your function is 400",
    "start": "171540",
    "end": "174480"
  },
  {
    "text": "lines and has several layers of nesting",
    "start": "174480",
    "end": "176580"
  },
  {
    "text": "it's often a sign that your code is",
    "start": "176580",
    "end": "178620"
  },
  {
    "text": "poorly structured and not well thought",
    "start": "178620",
    "end": "180360"
  },
  {
    "text": "through",
    "start": "180360",
    "end": "182160"
  },
  {
    "text": "NASA supports the idea of data hiding or",
    "start": "182160",
    "end": "185340"
  },
  {
    "start": "183000",
    "end": "183000"
  },
  {
    "text": "declaring variables as they're used at",
    "start": "185340",
    "end": "187739"
  },
  {
    "text": "the lowest scope possible again all",
    "start": "187739",
    "end": "190440"
  },
  {
    "text": "these rules are centered at writing safe",
    "start": "190440",
    "end": "191879"
  },
  {
    "text": "code and code that is statically",
    "start": "191879",
    "end": "193800"
  },
  {
    "text": "testable by declaring variables at the",
    "start": "193800",
    "end": "196080"
  },
  {
    "text": "lowest scope required you not only",
    "start": "196080",
    "end": "197940"
  },
  {
    "text": "reduce the amount of code that can",
    "start": "197940",
    "end": "199440"
  },
  {
    "text": "access those variables but you also",
    "start": "199440",
    "end": "201420"
  },
  {
    "text": "reduce the amount of places that can go",
    "start": "201420",
    "end": "203459"
  },
  {
    "text": "wrong when debugging why a variable has",
    "start": "203459",
    "end": "205680"
  },
  {
    "text": "an erroneous value",
    "start": "205680",
    "end": "207720"
  },
  {
    "text": "this next one seems obvious but is",
    "start": "207720",
    "end": "209879"
  },
  {
    "text": "actually a pretty common issue when I'm",
    "start": "209879",
    "end": "211980"
  },
  {
    "text": "reading the code of Junior developers",
    "start": "211980",
    "end": "213540"
  },
  {
    "text": "check all of your return values for",
    "start": "213540",
    "end": "216540"
  },
  {
    "text": "non-void functions all of them it's very",
    "start": "216540",
    "end": "219659"
  },
  {
    "text": "easy to read the man page for a function",
    "start": "219659",
    "end": "221519"
  },
  {
    "text": "and figure out what it does but to",
    "start": "221519",
    "end": "222959"
  },
  {
    "text": "ignore the return value section for a",
    "start": "222959",
    "end": "225000"
  },
  {
    "text": "function that should always behave",
    "start": "225000",
    "end": "226500"
  },
  {
    "text": "properly for example the function printf",
    "start": "226500",
    "end": "229260"
  },
  {
    "text": "which just prints to the screen should",
    "start": "229260",
    "end": "231420"
  },
  {
    "text": "never fail and if it does we really",
    "start": "231420",
    "end": "233879"
  },
  {
    "text": "don't care",
    "start": "233879",
    "end": "235080"
  },
  {
    "text": "to make sure that the person auditing",
    "start": "235080",
    "end": "237480"
  },
  {
    "text": "the code understands that the developer",
    "start": "237480",
    "end": "239519"
  },
  {
    "text": "meant to ignore the return value the",
    "start": "239519",
    "end": "241860"
  },
  {
    "text": "power of 10 says that we should",
    "start": "241860",
    "end": "243299"
  },
  {
    "text": "explicitly cast all return values that",
    "start": "243299",
    "end": "246000"
  },
  {
    "text": "are ignored to a void type if a non-void",
    "start": "246000",
    "end": "249180"
  },
  {
    "text": "function's return value is not void this",
    "start": "249180",
    "end": "252000"
  },
  {
    "text": "means that the developer forgot to check",
    "start": "252000",
    "end": "253980"
  },
  {
    "text": "the return value and should be brought",
    "start": "253980",
    "end": "255599"
  },
  {
    "text": "up in a code review",
    "start": "255599",
    "end": "256979"
  },
  {
    "text": "NASA limits the use of the C",
    "start": "256979",
    "end": "259139"
  },
  {
    "text": "preprocessor to file inclusions and very",
    "start": "259139",
    "end": "262019"
  },
  {
    "text": "simple conditional macros the reason for",
    "start": "262019",
    "end": "264600"
  },
  {
    "text": "this is the power of 10 calls out the c",
    "start": "264600",
    "end": "266880"
  },
  {
    "start": "266000",
    "end": "266000"
  },
  {
    "text": "preprocessor as a hidden code obfuscator",
    "start": "266880",
    "end": "270060"
  },
  {
    "text": "that can destroy code Clarity and",
    "start": "270060",
    "end": "272340"
  },
  {
    "text": "befuddle many static code analyzers the",
    "start": "272340",
    "end": "275280"
  },
  {
    "text": "power of 10 specifically calls out",
    "start": "275280",
    "end": "276840"
  },
  {
    "text": "conditional compilation or having flags",
    "start": "276840",
    "end": "279720"
  },
  {
    "text": "that change your code at compile time",
    "start": "279720",
    "end": "281520"
  },
  {
    "text": "for example if you have 10 different",
    "start": "281520",
    "end": "283919"
  },
  {
    "text": "flags that can be changed at compile",
    "start": "283919",
    "end": "285780"
  },
  {
    "text": "time you essentially create 2 to the",
    "start": "285780",
    "end": "287940"
  },
  {
    "text": "power of 10 compilation targets that",
    "start": "287940",
    "end": "290100"
  },
  {
    "text": "need to be tested exponentially",
    "start": "290100",
    "end": "291960"
  },
  {
    "text": "increasing the testing requirement of",
    "start": "291960",
    "end": "293880"
  },
  {
    "text": "your code this makes the code hard to",
    "start": "293880",
    "end": "295740"
  },
  {
    "text": "scale and hard to test",
    "start": "295740",
    "end": "297840"
  },
  {
    "text": "another interesting rule by NASA is the",
    "start": "297840",
    "end": "300180"
  },
  {
    "text": "Restriction of pointer use the power of",
    "start": "300180",
    "end": "302580"
  },
  {
    "text": "10 calls out pointers and says that they",
    "start": "302580",
    "end": "304380"
  },
  {
    "text": "should not be able to be dereferenced",
    "start": "304380",
    "end": "306419"
  },
  {
    "text": "more than one layer at a time the reason",
    "start": "306419",
    "end": "309180"
  },
  {
    "text": "for this is pointers are a tool that are",
    "start": "309180",
    "end": "311160"
  },
  {
    "text": "powerful but easy to use incorrectly by",
    "start": "311160",
    "end": "314460"
  },
  {
    "text": "limiting your pointers to one dear",
    "start": "314460",
    "end": "315960"
  },
  {
    "text": "reference at a time it forces you to",
    "start": "315960",
    "end": "317639"
  },
  {
    "text": "create structures that properly track",
    "start": "317639",
    "end": "319440"
  },
  {
    "text": "your pointers also NASA says to limit",
    "start": "319440",
    "end": "322080"
  },
  {
    "start": "322000",
    "end": "322000"
  },
  {
    "text": "the use of function pointers at all",
    "start": "322080",
    "end": "324240"
  },
  {
    "text": "function pointers obfuscate the code",
    "start": "324240",
    "end": "326759"
  },
  {
    "text": "control flow graph of your program and",
    "start": "326759",
    "end": "329160"
  },
  {
    "text": "make it very hard to statically analyze",
    "start": "329160",
    "end": "331380"
  },
  {
    "text": "and fully test",
    "start": "331380",
    "end": "333000"
  },
  {
    "text": "and finally when compiling your code",
    "start": "333000",
    "end": "335160"
  },
  {
    "text": "compile with all warnings enabled and",
    "start": "335160",
    "end": "338220"
  },
  {
    "text": "compile in pedantic mode doing this",
    "start": "338220",
    "end": "340620"
  },
  {
    "text": "ensures that every possible problem the",
    "start": "340620",
    "end": "343020"
  },
  {
    "text": "compiler sees with your code will be",
    "start": "343020",
    "end": "344880"
  },
  {
    "text": "raised and treated as an error after",
    "start": "344880",
    "end": "347639"
  },
  {
    "text": "this make sure your code is analyzed",
    "start": "347639",
    "end": "349440"
  },
  {
    "text": "using multiple static code analyzers",
    "start": "349440",
    "end": "351660"
  },
  {
    "text": "with different rule sets and that your",
    "start": "351660",
    "end": "353400"
  },
  {
    "text": "code is unit tested",
    "start": "353400",
    "end": "355259"
  },
  {
    "text": "now before you launch your new safely",
    "start": "355259",
    "end": "357600"
  },
  {
    "text": "coated rocket into space go and watch",
    "start": "357600",
    "end": "359699"
  },
  {
    "text": "this video where you'll learn something",
    "start": "359699",
    "end": "361199"
  },
  {
    "text": "new about programming",
    "start": "361199",
    "end": "364460"
  }
]