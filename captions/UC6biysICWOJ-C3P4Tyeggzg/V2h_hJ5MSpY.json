[
  {
    "text": "I got asked this question a long time",
    "start": "40",
    "end": "1599"
  },
  {
    "text": "ago in a job interview and it actually",
    "start": "1599",
    "end": "3320"
  },
  {
    "text": "sat with me for so long that I've",
    "start": "3320",
    "end": "4880"
  },
  {
    "text": "decided to make a video about it today",
    "start": "4880",
    "end": "6600"
  },
  {
    "text": "this is almost a couple years later the",
    "start": "6600",
    "end": "8639"
  },
  {
    "text": "question was write a program in C that",
    "start": "8639",
    "end": "11599"
  },
  {
    "text": "will determine if the stack grows up or",
    "start": "11599",
    "end": "14240"
  },
  {
    "text": "down for the computer architecture",
    "start": "14240",
    "end": "15719"
  },
  {
    "text": "you're working on I found the question",
    "start": "15719",
    "end": "17199"
  },
  {
    "text": "so profound because it allowed the",
    "start": "17199",
    "end": "18880"
  },
  {
    "text": "interviewer to get so much information",
    "start": "18880",
    "end": "20960"
  },
  {
    "text": "about the candidate's knowledge with",
    "start": "20960",
    "end": "22840"
  },
  {
    "text": "just a couple lines of code it allowed",
    "start": "22840",
    "end": "25039"
  },
  {
    "text": "them to know if the interview even knew",
    "start": "25039",
    "end": "26599"
  },
  {
    "text": "what a stack was if they knew how to",
    "start": "26599",
    "end": "28480"
  },
  {
    "text": "code in C and if they knew how under the",
    "start": "28480",
    "end": "31119"
  },
  {
    "text": "hood what the C code does and if they",
    "start": "31119",
    "end": "33399"
  },
  {
    "text": "could produce the code to answer the",
    "start": "33399",
    "end": "34879"
  },
  {
    "text": "question and hey guys also if you're new",
    "start": "34879",
    "end": "36440"
  },
  {
    "text": "here my name is Ol learning we talk",
    "start": "36440",
    "end": "37719"
  },
  {
    "text": "about all things lowlevel programming",
    "start": "37719",
    "end": "39640"
  },
  {
    "text": "like C rust and assembly if you like",
    "start": "39640",
    "end": "41800"
  },
  {
    "text": "that kind of stuff follow along with me",
    "start": "41800",
    "end": "43160"
  },
  {
    "text": "and also hit the sub button so how would",
    "start": "43160",
    "end": "44879"
  },
  {
    "text": "you tackle this problem how do we",
    "start": "44879",
    "end": "46280"
  },
  {
    "text": "determine if the architecture we're",
    "start": "46280",
    "end": "47800"
  },
  {
    "text": "living on has a stack that grows up or",
    "start": "47800",
    "end": "50239"
  },
  {
    "text": "down first we have to talk about what",
    "start": "50239",
    "end": "51520"
  },
  {
    "text": "the stack actually is and I made other",
    "start": "51520",
    "end": "53280"
  },
  {
    "text": "videos about that but put basically when",
    "start": "53280",
    "end": "55280"
  },
  {
    "text": "the CPU goes in between functions it",
    "start": "55280",
    "end": "57719"
  },
  {
    "text": "creates stack frames or region of memory",
    "start": "57719",
    "end": "59879"
  },
  {
    "text": "memory to address its local variables",
    "start": "59879",
    "end": "62440"
  },
  {
    "text": "now on most computer architectures the",
    "start": "62440",
    "end": "64360"
  },
  {
    "text": "stack actually grows negatively in the",
    "start": "64360",
    "end": "66360"
  },
  {
    "text": "negative Direction it becomes more",
    "start": "66360",
    "end": "68159"
  },
  {
    "text": "negative as it gets bigger but this may",
    "start": "68159",
    "end": "70640"
  },
  {
    "text": "not be the case for all computer",
    "start": "70640",
    "end": "72040"
  },
  {
    "text": "architecture some of them may actually",
    "start": "72040",
    "end": "73560"
  },
  {
    "text": "add to the stack pointer as the stack",
    "start": "73560",
    "end": "75200"
  },
  {
    "text": "gets bigger so we have to write a",
    "start": "75200",
    "end": "76920"
  },
  {
    "text": "function to figure out what direction is",
    "start": "76920",
    "end": "78799"
  },
  {
    "text": "our stack growing we'll start here with",
    "start": "78799",
    "end": "80360"
  },
  {
    "text": "this C code and what this code does is",
    "start": "80360",
    "end": "82159"
  },
  {
    "text": "it calls the Upp or down function if up",
    "start": "82159",
    "end": "84320"
  },
  {
    "text": "or down returns true then it grows up if",
    "start": "84320",
    "end": "86759"
  },
  {
    "text": "up or down returns false then it grows",
    "start": "86759",
    "end": "88640"
  },
  {
    "text": "down I had to kind of sneak in my cheeky",
    "start": "88640",
    "end": "90560"
  },
  {
    "text": "Turner operator in there I know how much",
    "start": "90560",
    "end": "92040"
  },
  {
    "text": "we all love those very much the function",
    "start": "92040",
    "end": "93920"
  },
  {
    "text": "will return up if positive down if",
    "start": "93920",
    "end": "95759"
  },
  {
    "text": "negative I think we should probably",
    "start": "95759",
    "end": "97079"
  },
  {
    "text": "Define also what up means so up means",
    "start": "97079",
    "end": "99880"
  },
  {
    "text": "that the stack as it grows the address",
    "start": "99880",
    "end": "102680"
  },
  {
    "text": "of the stack frame is increasing and as",
    "start": "102680",
    "end": "105240"
  },
  {
    "text": "the stack grows down is becoming more",
    "start": "105240",
    "end": "107719"
  },
  {
    "text": "negative so as it gets bigger the top of",
    "start": "107719",
    "end": "110280"
  },
  {
    "text": "it becomes more negative this is",
    "start": "110280",
    "end": "112040"
  },
  {
    "text": "actually how Intel behaves by default",
    "start": "112040",
    "end": "113920"
  },
  {
    "text": "the stack grows negatively towards the",
    "start": "113920",
    "end": "116079"
  },
  {
    "text": "Heap obviously it has 2 to the^ of 64",
    "start": "116079",
    "end": "118479"
  },
  {
    "text": "bytes generally to work with so it's not",
    "start": "118479",
    "end": "119880"
  },
  {
    "text": "a big issue um but this is how it's",
    "start": "119880",
    "end": "121840"
  },
  {
    "text": "happening under the hood but again some",
    "start": "121840",
    "end": "123119"
  },
  {
    "text": "other architectures May behave this way",
    "start": "123119",
    "end": "124759"
  },
  {
    "text": "so we want to figure out how to check",
    "start": "124759",
    "end": "126560"
  },
  {
    "text": "for that now the way that you could",
    "start": "126560",
    "end": "127560"
  },
  {
    "text": "probably check for it pretty simply the",
    "start": "127560",
    "end": "129160"
  },
  {
    "text": "one that a lot of people go to by",
    "start": "129160",
    "end": "130399"
  },
  {
    "text": "default and I went to by default in the",
    "start": "130399",
    "end": "131920"
  },
  {
    "text": "interview is you on the stack you",
    "start": "131920",
    "end": "134040"
  },
  {
    "text": "declare two variables right so here we",
    "start": "134040",
    "end": "135720"
  },
  {
    "text": "have int X and int y they have undefined",
    "start": "135720",
    "end": "138000"
  },
  {
    "text": "values I guess we could say zero to get",
    "start": "138000",
    "end": "139640"
  },
  {
    "text": "rid of all the security people in the",
    "start": "139640",
    "end": "141239"
  },
  {
    "text": "comments um and what what'll happen here",
    "start": "141239",
    "end": "143480"
  },
  {
    "text": "is it'll allocate room first on the top",
    "start": "143480",
    "end": "146920"
  },
  {
    "text": "of the stack for x and then under it",
    "start": "146920",
    "end": "149840"
  },
  {
    "text": "just in our notional picture picture",
    "start": "149840",
    "end": "151480"
  },
  {
    "text": "your stack of plates the address y so",
    "start": "151480",
    "end": "154720"
  },
  {
    "text": "then we can say if x is greater than y",
    "start": "154720",
    "end": "158360"
  },
  {
    "text": "and again we're not talking the values",
    "start": "158360",
    "end": "159640"
  },
  {
    "text": "of X we're talking the addresses of x if",
    "start": "159640",
    "end": "162159"
  },
  {
    "text": "x is greater than y then what we can do",
    "start": "162159",
    "end": "165080"
  },
  {
    "text": "is just return true because that means",
    "start": "165080",
    "end": "167120"
  },
  {
    "text": "that X is on top X is more negative and",
    "start": "167120",
    "end": "169800"
  },
  {
    "text": "true is a lowercase T here otherwise",
    "start": "169800",
    "end": "171959"
  },
  {
    "text": "we're just going to return false right",
    "start": "171959",
    "end": "174400"
  },
  {
    "text": "so what'll happen is if x is growing up",
    "start": "174400",
    "end": "176480"
  },
  {
    "text": "it is getting more positive but if x is",
    "start": "176480",
    "end": "178680"
  },
  {
    "text": "growing down it's becoming more negative",
    "start": "178680",
    "end": "181080"
  },
  {
    "text": "so let's check this out and have to also",
    "start": "181080",
    "end": "182959"
  },
  {
    "text": "include standard bull because C by",
    "start": "182959",
    "end": "185239"
  },
  {
    "text": "default does not know what the word true",
    "start": "185239",
    "end": "186599"
  },
  {
    "text": "means okay so this actually worked",
    "start": "186599",
    "end": "188080"
  },
  {
    "text": "because the stack on the architecture",
    "start": "188080",
    "end": "189720"
  },
  {
    "text": "that I'm on the Intel assembly",
    "start": "189720",
    "end": "191159"
  },
  {
    "text": "architecture does grow down this code",
    "start": "191159",
    "end": "193280"
  },
  {
    "text": "does have actually a few problems first",
    "start": "193280",
    "end": "195400"
  },
  {
    "text": "of all we are not labeling these as",
    "start": "195400",
    "end": "197120"
  },
  {
    "text": "volatile variables so there may be a",
    "start": "197120",
    "end": "199000"
  },
  {
    "text": "case where the compiler does some",
    "start": "199000",
    "end": "200239"
  },
  {
    "text": "optimizations here so we do want to also",
    "start": "200239",
    "end": "202360"
  },
  {
    "text": "throw the volatile keyword into these",
    "start": "202360",
    "end": "204680"
  },
  {
    "text": "variables to make sure that the",
    "start": "204680",
    "end": "205680"
  },
  {
    "text": "assembler does not try to optimize them",
    "start": "205680",
    "end": "207560"
  },
  {
    "text": "in any fancy ways now can you think of",
    "start": "207560",
    "end": "210439"
  },
  {
    "text": "another assumption we're making with",
    "start": "210439",
    "end": "212080"
  },
  {
    "text": "this problem by doing it this way so",
    "start": "212080",
    "end": "214280"
  },
  {
    "text": "again in our notional picture of the",
    "start": "214280",
    "end": "216040"
  },
  {
    "text": "stack here I'll make another comment",
    "start": "216040",
    "end": "217439"
  },
  {
    "text": "block to kind of describe this we are",
    "start": "217439",
    "end": "219840"
  },
  {
    "text": "assuming that when the assembler creates",
    "start": "219840",
    "end": "222000"
  },
  {
    "text": "the stack it creates room for X on our",
    "start": "222000",
    "end": "224680"
  },
  {
    "text": "notional top and then underneath that we",
    "start": "224680",
    "end": "227480"
  },
  {
    "text": "create room on beneath it for our",
    "start": "227480",
    "end": "229400"
  },
  {
    "text": "notional Y and then we're just trying to",
    "start": "229400",
    "end": "231360"
  },
  {
    "text": "see which one is more negative and",
    "start": "231360",
    "end": "233079"
  },
  {
    "text": "returning that value but the Assumption",
    "start": "233079",
    "end": "235640"
  },
  {
    "text": "we're making here is that the assembler",
    "start": "235640",
    "end": "237280"
  },
  {
    "text": "is putting it in that order it may not",
    "start": "237280",
    "end": "239360"
  },
  {
    "text": "it may for some other optimization",
    "start": "239360",
    "end": "241200"
  },
  {
    "text": "reason just put X below maybe it's doing",
    "start": "241200",
    "end": "243599"
  },
  {
    "text": "a you know a fifo versus a first in last",
    "start": "243599",
    "end": "246120"
  },
  {
    "text": "out when it's making the assembly the",
    "start": "246120",
    "end": "248079"
  },
  {
    "text": "the stack allocations so this is not the",
    "start": "248079",
    "end": "251280"
  },
  {
    "text": "most efficient way to do it I want to",
    "start": "251280",
    "end": "253239"
  },
  {
    "text": "see if you can think of another way to",
    "start": "253239",
    "end": "255200"
  },
  {
    "text": "check if our stack is growing up or down",
    "start": "255200",
    "end": "257280"
  },
  {
    "text": "let me know okay you ready for it the",
    "start": "257280",
    "end": "260040"
  },
  {
    "text": "way we're going to do this is through a",
    "start": "260040",
    "end": "261479"
  },
  {
    "text": "little bit of recursion now let me",
    "start": "261479",
    "end": "263320"
  },
  {
    "text": "explain to you what we're going to do",
    "start": "263320",
    "end": "264400"
  },
  {
    "text": "here when we use variables in C we do",
    "start": "264400",
    "end": "266600"
  },
  {
    "text": "make room for them on the stack however",
    "start": "266600",
    "end": "269400"
  },
  {
    "text": "we also use the stack to call additional",
    "start": "269400",
    "end": "272080"
  },
  {
    "text": "functions so if I have up or down call",
    "start": "272080",
    "end": "274639"
  },
  {
    "text": "itself that will produce a new stack",
    "start": "274639",
    "end": "276759"
  },
  {
    "text": "frame for its variables in some location",
    "start": "276759",
    "end": "280199"
  },
  {
    "text": "so what we can actually do is pass",
    "start": "280199",
    "end": "282840"
  },
  {
    "text": "around a variable in between upper down",
    "start": "282840",
    "end": "286120"
  },
  {
    "text": "to itself and then compare the address",
    "start": "286120",
    "end": "288400"
  },
  {
    "text": "of those two variables because we do it",
    "start": "288400",
    "end": "290600"
  },
  {
    "text": "that way we'll have knowledge about the",
    "start": "290600",
    "end": "292639"
  },
  {
    "text": "address of one stack frame versus the",
    "start": "292639",
    "end": "295080"
  },
  {
    "text": "other and we can return whether one is",
    "start": "295080",
    "end": "296919"
  },
  {
    "text": "greater than the other so let me walk",
    "start": "296919",
    "end": "298280"
  },
  {
    "text": "through how that works right now okay",
    "start": "298280",
    "end": "299840"
  },
  {
    "text": "you ready the solution for this is",
    "start": "299840",
    "end": "301479"
  },
  {
    "text": "really cool so we have made up or down a",
    "start": "301479",
    "end": "304120"
  },
  {
    "text": "recursive function now I know if",
    "start": "304120",
    "end": "305440"
  },
  {
    "text": "recursion scares you don't worry about",
    "start": "305440",
    "end": "306960"
  },
  {
    "text": "it it's not that bad all you have to",
    "start": "306960",
    "end": "308520"
  },
  {
    "text": "think about is a base case and a",
    "start": "308520",
    "end": "310800"
  },
  {
    "text": "non-base case the recursive case so what",
    "start": "310800",
    "end": "313080"
  },
  {
    "text": "we'll do is we'll start with our",
    "start": "313080",
    "end": "314360"
  },
  {
    "text": "recursive case where we call up or down",
    "start": "314360",
    "end": "316720"
  },
  {
    "text": "and give it a null pointer meaning I",
    "start": "316720",
    "end": "318240"
  },
  {
    "text": "have no information about the stack at",
    "start": "318240",
    "end": "320440"
  },
  {
    "text": "this point so we'll go into our function",
    "start": "320440",
    "end": "322400"
  },
  {
    "text": "here and again bull upper down now takes",
    "start": "322400",
    "end": "324280"
  },
  {
    "text": "an INT pointer we passed it null for the",
    "start": "324280",
    "end": "326160"
  },
  {
    "text": "first one and we have an integer X on",
    "start": "326160",
    "end": "328600"
  },
  {
    "text": "the stack",
    "start": "328600",
    "end": "330039"
  },
  {
    "text": "if there is no other variable meaning",
    "start": "330039",
    "end": "332160"
  },
  {
    "text": "that we have no information about the",
    "start": "332160",
    "end": "333440"
  },
  {
    "text": "stack yet we have to generate the",
    "start": "333440",
    "end": "335080"
  },
  {
    "text": "information ourself with X we'll just",
    "start": "335080",
    "end": "337680"
  },
  {
    "text": "return up or down the address of X we'll",
    "start": "337680",
    "end": "341360"
  },
  {
    "text": "return up or down with the address of X",
    "start": "341360",
    "end": "343880"
  },
  {
    "text": "that will enter another layer of up or",
    "start": "343880",
    "end": "345960"
  },
  {
    "text": "down where now the in other is set we'll",
    "start": "345960",
    "end": "348919"
  },
  {
    "text": "say up or down we'll now go to the other",
    "start": "348919",
    "end": "351039"
  },
  {
    "text": "case and all we're going to say and",
    "start": "351039",
    "end": "352520"
  },
  {
    "text": "again we're in a new stack frame here",
    "start": "352520",
    "end": "354440"
  },
  {
    "text": "we've created another stack frame",
    "start": "354440",
    "end": "355759"
  },
  {
    "text": "because we called the function again and",
    "start": "355759",
    "end": "357680"
  },
  {
    "text": "we say return if this variable the N the",
    "start": "357680",
    "end": "361039"
  },
  {
    "text": "one that's above it in our notional",
    "start": "361039",
    "end": "363319"
  },
  {
    "text": "directionless stack frame return if the",
    "start": "363319",
    "end": "366039"
  },
  {
    "text": "address of that variable is greater than",
    "start": "366039",
    "end": "368800"
  },
  {
    "text": "the other that will come back to the",
    "start": "368800",
    "end": "370240"
  },
  {
    "text": "base case it'll return here and that'll",
    "start": "370240",
    "end": "371880"
  },
  {
    "text": "come out our Upp or down Case by using",
    "start": "371880",
    "end": "374479"
  },
  {
    "text": "simple recursion we can solve this",
    "start": "374479",
    "end": "376800"
  },
  {
    "text": "problem really cleanly and have a way",
    "start": "376800",
    "end": "378880"
  },
  {
    "text": "that can't get optimized out because",
    "start": "378880",
    "end": "380520"
  },
  {
    "text": "we're doing recursive function so let's",
    "start": "380520",
    "end": "382160"
  },
  {
    "text": "go ahead and compile this and see what",
    "start": "382160",
    "end": "383520"
  },
  {
    "text": "trouble we get into and we find that the",
    "start": "383520",
    "end": "385360"
  },
  {
    "text": "stack frame as it's supposed to still",
    "start": "385360",
    "end": "387919"
  },
  {
    "text": "grows down so what do you think this one",
    "start": "387919",
    "end": "389720"
  },
  {
    "text": "little question and a couple lines of C",
    "start": "389720",
    "end": "391599"
  },
  {
    "text": "may just reveal if we know how Stacks",
    "start": "391599",
    "end": "393240"
  },
  {
    "text": "work how C Works how calling conventions",
    "start": "393240",
    "end": "395520"
  },
  {
    "text": "work and a lot of really interesting",
    "start": "395520",
    "end": "397120"
  },
  {
    "text": "things underneath the hood as it relates",
    "start": "397120",
    "end": "398639"
  },
  {
    "text": "to computer architecture and lowlevel",
    "start": "398639",
    "end": "401080"
  },
  {
    "text": "programming so if you enjoyed this video",
    "start": "401080",
    "end": "402800"
  },
  {
    "text": "do me a favor hit that subscribe button",
    "start": "402800",
    "end": "404160"
  },
  {
    "text": "and if you enjoy these kinds of problems",
    "start": "404160",
    "end": "406240"
  },
  {
    "text": "go check out my website pone bounty.com",
    "start": "406240",
    "end": "408160"
  },
  {
    "text": "description below and if you like to",
    "start": "408160",
    "end": "410400"
  },
  {
    "text": "solve these kinds of challenges I'll be",
    "start": "410400",
    "end": "411800"
  },
  {
    "text": "putting up challenges like this and if",
    "start": "411800",
    "end": "413919"
  },
  {
    "text": "you solve it and submit a write up you",
    "start": "413919",
    "end": "416360"
  },
  {
    "text": "might even get a job we'll see how it",
    "start": "416360",
    "end": "417960"
  },
  {
    "text": "goes all right guys thanks for watching",
    "start": "417960",
    "end": "419199"
  },
  {
    "text": "take care see you next time",
    "start": "419199",
    "end": "422879"
  }
]