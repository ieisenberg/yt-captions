[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "I wrote two Snippets of code that have",
    "start": "60",
    "end": "2940"
  },
  {
    "text": "the same functionality they both use a",
    "start": "2940",
    "end": "5940"
  },
  {
    "text": "low-level language to perform some basic",
    "start": "5940",
    "end": "8099"
  },
  {
    "text": "math one in C and the other in C plus",
    "start": "8099",
    "end": "10740"
  },
  {
    "text": "plus but one program runs almost 20",
    "start": "10740",
    "end": "13799"
  },
  {
    "text": "percent slower than the other",
    "start": "13799",
    "end": "16020"
  },
  {
    "text": "in this video we'll break down how C",
    "start": "16020",
    "end": "17880"
  },
  {
    "text": "plus plus polymorphism Works under the",
    "start": "17880",
    "end": "20400"
  },
  {
    "text": "hood with the keyword virtual is used",
    "start": "20400",
    "end": "22619"
  },
  {
    "text": "for and why it's ultimately kind of slow",
    "start": "22619",
    "end": "25320"
  },
  {
    "text": "but why is it so slow I guess we'll see",
    "start": "25320",
    "end": "30720"
  },
  {
    "start": "30000",
    "end": "85000"
  },
  {
    "text": "we're trying to make a calculator that",
    "start": "30720",
    "end": "32460"
  },
  {
    "text": "can perform several types of math",
    "start": "32460",
    "end": "34620"
  },
  {
    "text": "operations but a generic operation",
    "start": "34620",
    "end": "37680"
  },
  {
    "text": "doesn't just exist on its own an",
    "start": "37680",
    "end": "40079"
  },
  {
    "text": "operation has specific functionality",
    "start": "40079",
    "end": "42059"
  },
  {
    "text": "like addition multiplication Etc",
    "start": "42059",
    "end": "44820"
  },
  {
    "text": "this problem is referred to as",
    "start": "44820",
    "end": "46559"
  },
  {
    "text": "polymorphism or simply writing something",
    "start": "46559",
    "end": "49559"
  },
  {
    "text": "in code that can take multiple forms by",
    "start": "49559",
    "end": "53160"
  },
  {
    "text": "designing our code around a generic form",
    "start": "53160",
    "end": "55620"
  },
  {
    "text": "of the class in our example in operation",
    "start": "55620",
    "end": "58379"
  },
  {
    "text": "we can create what is called an",
    "start": "58379",
    "end": "60600"
  },
  {
    "text": "interface which describes the behavior",
    "start": "60600",
    "end": "62879"
  },
  {
    "text": "of a derived class without specifying",
    "start": "62879",
    "end": "65460"
  },
  {
    "text": "the details of its implementation",
    "start": "65460",
    "end": "67860"
  },
  {
    "text": "the code written in C uses a structure",
    "start": "67860",
    "end": "70619"
  },
  {
    "text": "to represent a generic operation and at",
    "start": "70619",
    "end": "73920"
  },
  {
    "text": "runtime uses an enum to determine what",
    "start": "73920",
    "end": "76680"
  },
  {
    "text": "operation to perform so if the enum says",
    "start": "76680",
    "end": "79560"
  },
  {
    "text": "hi I'm an ad it'll add if it's a",
    "start": "79560",
    "end": "82080"
  },
  {
    "text": "multiply it'll multiply",
    "start": "82080",
    "end": "83880"
  },
  {
    "text": "Etc",
    "start": "83880",
    "end": "84659"
  },
  {
    "text": "but hold on C doesn't allow for objects",
    "start": "84659",
    "end": "88740"
  },
  {
    "text": "so inherently this code isn't really",
    "start": "88740",
    "end": "91680"
  },
  {
    "text": "object oriented actually it can't be",
    "start": "91680",
    "end": "94680"
  },
  {
    "text": "object oriented C is not an",
    "start": "94680",
    "end": "96659"
  },
  {
    "text": "object-oriented language so technically",
    "start": "96659",
    "end": "99119"
  },
  {
    "text": "this code isn't polymorphic it's just",
    "start": "99119",
    "end": "102360"
  },
  {
    "text": "well written code",
    "start": "102360",
    "end": "104159"
  },
  {
    "text": "also notice that we can't use functions",
    "start": "104159",
    "end": "106860"
  },
  {
    "text": "inside of the structure like we can in",
    "start": "106860",
    "end": "109799"
  },
  {
    "text": "an object-oriented language we can't say",
    "start": "109799",
    "end": "112439"
  },
  {
    "text": "operation dot execute or operation",
    "start": "112439",
    "end": "115140"
  },
  {
    "text": "dereference and execute",
    "start": "115140",
    "end": "117720"
  },
  {
    "text": "well in C technically we can use",
    "start": "117720",
    "end": "119820"
  },
  {
    "text": "function pointers in a structure but the",
    "start": "119820",
    "end": "121680"
  },
  {
    "text": "syntax is kind of gross",
    "start": "121680",
    "end": "123479"
  },
  {
    "text": "so if we wanted to do formal object",
    "start": "123479",
    "end": "126240"
  },
  {
    "text": "oriented programming this would not pass",
    "start": "126240",
    "end": "128340"
  },
  {
    "text": "the test",
    "start": "128340",
    "end": "129420"
  },
  {
    "text": "instead we have to use C plus plus C",
    "start": "129420",
    "end": "132300"
  },
  {
    "start": "130000",
    "end": "270000"
  },
  {
    "text": "plus plus allows us to use classes which",
    "start": "132300",
    "end": "135120"
  },
  {
    "text": "are basically just structures with",
    "start": "135120",
    "end": "137580"
  },
  {
    "text": "function pointers inside of them classes",
    "start": "137580",
    "end": "140340"
  },
  {
    "text": "in C plus plus can also be derived from",
    "start": "140340",
    "end": "142800"
  },
  {
    "text": "one another meaning that if I have a",
    "start": "142800",
    "end": "144900"
  },
  {
    "text": "Base Class B in a derived class D which",
    "start": "144900",
    "end": "148560"
  },
  {
    "text": "is derived from B all of B's attributes",
    "start": "148560",
    "end": "152160"
  },
  {
    "text": "become part of d",
    "start": "152160",
    "end": "154319"
  },
  {
    "text": "first we have to define the parent class",
    "start": "154319",
    "end": "156599"
  },
  {
    "text": "which represents the generic thing we're",
    "start": "156599",
    "end": "159239"
  },
  {
    "text": "trying to represent in this case we'll",
    "start": "159239",
    "end": "161580"
  },
  {
    "text": "Define a generic operation class the",
    "start": "161580",
    "end": "164640"
  },
  {
    "text": "operation class will have two operands",
    "start": "164640",
    "end": "166800"
  },
  {
    "text": "called operand one and operand two",
    "start": "166800",
    "end": "170099"
  },
  {
    "text": "the operation class will also have a",
    "start": "170099",
    "end": "172140"
  },
  {
    "text": "function called execute where the",
    "start": "172140",
    "end": "174060"
  },
  {
    "text": "operation will take place",
    "start": "174060",
    "end": "175800"
  },
  {
    "text": "by not implementing any functions this",
    "start": "175800",
    "end": "178560"
  },
  {
    "text": "operation can be considered an interface",
    "start": "178560",
    "end": "180660"
  },
  {
    "text": "it describes what needs to be",
    "start": "180660",
    "end": "182760"
  },
  {
    "text": "implemented but not how",
    "start": "182760",
    "end": "186300"
  },
  {
    "text": "but again remember a generic operation",
    "start": "186300",
    "end": "189000"
  },
  {
    "text": "doesn't exist the execute method needs",
    "start": "189000",
    "end": "191819"
  },
  {
    "text": "to be overridden by a child class that",
    "start": "191819",
    "end": "194640"
  },
  {
    "text": "will implement this method to make this",
    "start": "194640",
    "end": "196980"
  },
  {
    "text": "possible in the parent we have to call",
    "start": "196980",
    "end": "199140"
  },
  {
    "text": "this a virtual method or a method that",
    "start": "199140",
    "end": "202260"
  },
  {
    "text": "is allowed to be overridden by a child",
    "start": "202260",
    "end": "204720"
  },
  {
    "text": "class",
    "start": "204720",
    "end": "205680"
  },
  {
    "text": "by making this virtual and setting it",
    "start": "205680",
    "end": "207900"
  },
  {
    "text": "equal to zero inside of the class in its",
    "start": "207900",
    "end": "210599"
  },
  {
    "text": "memory it creates what is known as a v",
    "start": "210599",
    "end": "212700"
  },
  {
    "text": "table or virtual table which later will",
    "start": "212700",
    "end": "215879"
  },
  {
    "text": "account for the Slowdown inner code it",
    "start": "215879",
    "end": "218640"
  },
  {
    "text": "is important to note that by default",
    "start": "218640",
    "end": "220260"
  },
  {
    "text": "functions with the same signature in a",
    "start": "220260",
    "end": "223080"
  },
  {
    "text": "derived class are virtual in the parent",
    "start": "223080",
    "end": "225599"
  },
  {
    "text": "by default however for code readability",
    "start": "225599",
    "end": "228120"
  },
  {
    "text": "it's important to use the virtual",
    "start": "228120",
    "end": "230340"
  },
  {
    "text": "keyword so that readers of the code know",
    "start": "230340",
    "end": "232860"
  },
  {
    "text": "that the code is intended to be",
    "start": "232860",
    "end": "234900"
  },
  {
    "text": "overwritten",
    "start": "234900",
    "end": "236400"
  },
  {
    "text": "to override this function execute let's",
    "start": "236400",
    "end": "239099"
  },
  {
    "text": "make our child class",
    "start": "239099",
    "end": "241379"
  },
  {
    "text": "and the execute function for add which",
    "start": "241379",
    "end": "244019"
  },
  {
    "text": "adds operand 1 and operand2",
    "start": "244019",
    "end": "247200"
  },
  {
    "text": "now that we have our derived class how",
    "start": "247200",
    "end": "249659"
  },
  {
    "text": "do we use the polymorphism in our code",
    "start": "249659",
    "end": "252840"
  },
  {
    "text": "to invoke the polymorphic class we",
    "start": "252840",
    "end": "255599"
  },
  {
    "text": "create a pointer for the generic class",
    "start": "255599",
    "end": "258180"
  },
  {
    "text": "in operation and point it to an instance",
    "start": "258180",
    "end": "261120"
  },
  {
    "text": "of our derived class for example our add",
    "start": "261120",
    "end": "263820"
  },
  {
    "text": "and then we call execute on the",
    "start": "263820",
    "end": "266400"
  },
  {
    "text": "operation class and our ad happens",
    "start": "266400",
    "end": "269160"
  },
  {
    "text": "but wait a minute how did Operation know",
    "start": "269160",
    "end": "271740"
  },
  {
    "start": "270000",
    "end": "380000"
  },
  {
    "text": "what method to call you know we defined",
    "start": "271740",
    "end": "273960"
  },
  {
    "text": "a zero method and our add method how did",
    "start": "273960",
    "end": "276600"
  },
  {
    "text": "it know which one to go to",
    "start": "276600",
    "end": "278220"
  },
  {
    "text": "when we call Operations execute method",
    "start": "278220",
    "end": "281040"
  },
  {
    "text": "the operation classes V table is invoked",
    "start": "281040",
    "end": "284100"
  },
  {
    "text": "and this is where things start to slow",
    "start": "284100",
    "end": "286740"
  },
  {
    "text": "down for the generic operation class to",
    "start": "286740",
    "end": "289680"
  },
  {
    "text": "know what function to call all derived",
    "start": "289680",
    "end": "292979"
  },
  {
    "text": "classes contain a pointer to a v table",
    "start": "292979",
    "end": "295919"
  },
  {
    "text": "or virtual table in the child class",
    "start": "295919",
    "end": "299040"
  },
  {
    "text": "object memory now I know I've said V",
    "start": "299040",
    "end": "301740"
  },
  {
    "text": "table a few times now in this video so",
    "start": "301740",
    "end": "304380"
  },
  {
    "text": "what exactly is a v table",
    "start": "304380",
    "end": "306840"
  },
  {
    "text": "a v table is just an array of function",
    "start": "306840",
    "end": "309479"
  },
  {
    "text": "pointers to functions that are",
    "start": "309479",
    "end": "311400"
  },
  {
    "text": "overridden by the child class",
    "start": "311400",
    "end": "314220"
  },
  {
    "text": "B tables from the same parent all have",
    "start": "314220",
    "end": "317040"
  },
  {
    "text": "the functions in the same order so that",
    "start": "317040",
    "end": "319680"
  },
  {
    "text": "when a parent invokes a virtual method",
    "start": "319680",
    "end": "321660"
  },
  {
    "text": "it knows what index in the table to call",
    "start": "321660",
    "end": "324600"
  },
  {
    "text": "for example the virtual method execute",
    "start": "324600",
    "end": "327300"
  },
  {
    "text": "is always in position 1 in a derived",
    "start": "327300",
    "end": "330960"
  },
  {
    "text": "operation V table this way whether it's",
    "start": "330960",
    "end": "333960"
  },
  {
    "text": "an add or a multiply or a subtract the",
    "start": "333960",
    "end": "336960"
  },
  {
    "text": "base class will always invoke execute",
    "start": "336960",
    "end": "339120"
  },
  {
    "text": "and not something else so while the",
    "start": "339120",
    "end": "341400"
  },
  {
    "text": "order of the V table is the same the",
    "start": "341400",
    "end": "343740"
  },
  {
    "text": "function itself will be different",
    "start": "343740",
    "end": "345419"
  },
  {
    "text": "depending on the implementation by the",
    "start": "345419",
    "end": "348000"
  },
  {
    "text": "child class let's walk through a",
    "start": "348000",
    "end": "349680"
  },
  {
    "text": "Constructor and see it happen live",
    "start": "349680",
    "end": "351840"
  },
  {
    "text": "here in the assembly for our calculator",
    "start": "351840",
    "end": "353880"
  },
  {
    "text": "program we see the Constructor for the",
    "start": "353880",
    "end": "356699"
  },
  {
    "text": "add operation calling the parent",
    "start": "356699",
    "end": "358680"
  },
  {
    "text": "Constructor for operation after this it",
    "start": "358680",
    "end": "362220"
  },
  {
    "text": "copies a pointer to its specific V table",
    "start": "362220",
    "end": "364979"
  },
  {
    "text": "into its memory before returning from",
    "start": "364979",
    "end": "367560"
  },
  {
    "text": "The Constructor",
    "start": "367560",
    "end": "368820"
  },
  {
    "text": "so when the operation eventually calls",
    "start": "368820",
    "end": "371100"
  },
  {
    "text": "the execute method it looks into its own",
    "start": "371100",
    "end": "373560"
  },
  {
    "text": "memory finds the V table pointer finds",
    "start": "373560",
    "end": "376560"
  },
  {
    "text": "the function pointer in the v table at",
    "start": "376560",
    "end": "378960"
  },
  {
    "text": "the known offset and then calls that",
    "start": "378960",
    "end": "381960"
  },
  {
    "start": "380000",
    "end": "484000"
  },
  {
    "text": "Jared I said yeah it not only has to",
    "start": "381960",
    "end": "385380"
  },
  {
    "text": "dereference the pointer to itself in",
    "start": "385380",
    "end": "387600"
  },
  {
    "text": "memory but then dereference another",
    "start": "387600",
    "end": "389819"
  },
  {
    "text": "pointer to find its veto only to figure",
    "start": "389819",
    "end": "392520"
  },
  {
    "text": "out what function to call and this is",
    "start": "392520",
    "end": "395699"
  },
  {
    "text": "why V tables are so slow every",
    "start": "395699",
    "end": "398460"
  },
  {
    "text": "invocation of a child class method",
    "start": "398460",
    "end": "400800"
  },
  {
    "text": "requires at a minimum two pointer",
    "start": "400800",
    "end": "403860"
  },
  {
    "text": "dereferences which is a memory load into",
    "start": "403860",
    "end": "406740"
  },
  {
    "text": "memory before any code execution takes",
    "start": "406740",
    "end": "409199"
  },
  {
    "text": "place",
    "start": "409199",
    "end": "409979"
  },
  {
    "text": "now that may not sound awful but memory",
    "start": "409979",
    "end": "412979"
  },
  {
    "text": "lookups are some of the slowest",
    "start": "412979",
    "end": "414720"
  },
  {
    "text": "operations in Computing if your child",
    "start": "414720",
    "end": "417000"
  },
  {
    "text": "class is V table isn't loaded Into Cash",
    "start": "417000",
    "end": "419520"
  },
  {
    "text": "the cash Miss on RAM could result in a",
    "start": "419520",
    "end": "422220"
  },
  {
    "text": "significant performance hit this is why",
    "start": "422220",
    "end": "424620"
  },
  {
    "text": "RC code was ultimately faster and why C",
    "start": "424620",
    "end": "427740"
  },
  {
    "text": "plus plus polymorphism using virtual",
    "start": "427740",
    "end": "429720"
  },
  {
    "text": "methods is generally thought to be",
    "start": "429720",
    "end": "431580"
  },
  {
    "text": "slower in our C code we used a structure",
    "start": "431580",
    "end": "434400"
  },
  {
    "text": "that contained a variable to tell us",
    "start": "434400",
    "end": "436380"
  },
  {
    "text": "which area in our switch statement to",
    "start": "436380",
    "end": "438539"
  },
  {
    "text": "jump to this was only one layer of",
    "start": "438539",
    "end": "441479"
  },
  {
    "text": "memory misdirection and could possibly",
    "start": "441479",
    "end": "444000"
  },
  {
    "text": "be even further optimized using",
    "start": "444000",
    "end": "446280"
  },
  {
    "text": "additional caching schemes using",
    "start": "446280",
    "end": "448319"
  },
  {
    "text": "registers in the background",
    "start": "448319",
    "end": "450120"
  },
  {
    "text": "our C plus plus code on the other hand",
    "start": "450120",
    "end": "452160"
  },
  {
    "text": "wasn't so lucky every time we invoked",
    "start": "452160",
    "end": "454740"
  },
  {
    "text": "our operations virtual execute method",
    "start": "454740",
    "end": "456960"
  },
  {
    "text": "two memory loads occurred and the",
    "start": "456960",
    "end": "459780"
  },
  {
    "text": "craziest part is that in my example I",
    "start": "459780",
    "end": "462060"
  },
  {
    "text": "called the same V table every single",
    "start": "462060",
    "end": "464880"
  },
  {
    "text": "time which means that this program",
    "start": "464880",
    "end": "466860"
  },
  {
    "text": "wasn't even cash missing imagine if it",
    "start": "466860",
    "end": "469979"
  },
  {
    "text": "was so maybe polymorphism just sucks",
    "start": "469979",
    "end": "474060"
  },
  {
    "text": "you see what I mean now if you want to",
    "start": "474060",
    "end": "477180"
  },
  {
    "text": "learn other ways to make your code",
    "start": "477180",
    "end": "478319"
  },
  {
    "text": "faster check out one of these two videos",
    "start": "478319",
    "end": "480300"
  },
  {
    "text": "and I'll see you next time",
    "start": "480300",
    "end": "484460"
  }
]