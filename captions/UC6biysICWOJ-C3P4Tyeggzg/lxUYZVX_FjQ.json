[
  {
    "text": "the author of this code not me managed",
    "start": "120",
    "end": "3419"
  },
  {
    "text": "to pack seven bugs into this code and",
    "start": "3419",
    "end": "5880"
  },
  {
    "text": "the code is only 52 lines long these",
    "start": "5880",
    "end": "9300"
  },
  {
    "text": "bugs are all related to memory safety",
    "start": "9300",
    "end": "11519"
  },
  {
    "text": "and I've taken advantage of can lead to",
    "start": "11519",
    "end": "13080"
  },
  {
    "text": "the program crashing or even worse",
    "start": "13080",
    "end": "14820"
  },
  {
    "text": "getting them hacked I want to use it as",
    "start": "14820",
    "end": "16619"
  },
  {
    "text": "a talking point to talk about how C is",
    "start": "16619",
    "end": "18779"
  },
  {
    "text": "not a memory safe language but first",
    "start": "18779",
    "end": "21000"
  },
  {
    "text": "what is memory safety let's talk about",
    "start": "21000",
    "end": "23520"
  },
  {
    "text": "memory safety using some pictures I like",
    "start": "23520",
    "end": "25619"
  },
  {
    "text": "pictures because I'm kind of a dummy if",
    "start": "25619",
    "end": "27599"
  },
  {
    "text": "I am given a pointer that points into",
    "start": "27599",
    "end": "30180"
  },
  {
    "text": "some memory location like an array of",
    "start": "30180",
    "end": "33480"
  },
  {
    "text": "ins for example here are my array of ins",
    "start": "33480",
    "end": "36120"
  },
  {
    "text": "and memory safe language will not allow",
    "start": "36120",
    "end": "38640"
  },
  {
    "text": "me to create code and run code that",
    "start": "38640",
    "end": "41460"
  },
  {
    "text": "indexes outside of this array or for",
    "start": "41460",
    "end": "43920"
  },
  {
    "text": "example if I have a pointer that points",
    "start": "43920",
    "end": "46379"
  },
  {
    "text": "to a chunk on the Heap and then maybe",
    "start": "46379",
    "end": "48239"
  },
  {
    "text": "this chunk gets freed if I'm able to",
    "start": "48239",
    "end": "50640"
  },
  {
    "text": "still use this pointer it's referred to",
    "start": "50640",
    "end": "52920"
  },
  {
    "text": "as a use after free or a uaf conditions",
    "start": "52920",
    "end": "56399"
  },
  {
    "text": "like this were a pointer that you have",
    "start": "56399",
    "end": "57840"
  },
  {
    "text": "access to points to memory that you",
    "start": "57840",
    "end": "59820"
  },
  {
    "text": "don't act actually control or own leads",
    "start": "59820",
    "end": "62340"
  },
  {
    "text": "to your code being not memory safe who",
    "start": "62340",
    "end": "64860"
  },
  {
    "text": "really cares you know my program might",
    "start": "64860",
    "end": "66960"
  },
  {
    "text": "not crash it's not really that big of a",
    "start": "66960",
    "end": "68700"
  },
  {
    "text": "deal the problem is if you give a hacker",
    "start": "68700",
    "end": "70740"
  },
  {
    "text": "the ability to arbitrarily write",
    "start": "70740",
    "end": "72600"
  },
  {
    "text": "somewhere you're giving them what's",
    "start": "72600",
    "end": "74040"
  },
  {
    "text": "called the right what where primitive",
    "start": "74040",
    "end": "76619"
  },
  {
    "text": "which is a primitive in hacking that",
    "start": "76619",
    "end": "78540"
  },
  {
    "text": "allows a hacker to use that ability to",
    "start": "78540",
    "end": "80640"
  },
  {
    "text": "write somewhere to take over your",
    "start": "80640",
    "end": "82259"
  },
  {
    "text": "program there are different structures",
    "start": "82259",
    "end": "83520"
  },
  {
    "text": "in the elf binary on Linux for example",
    "start": "83520",
    "end": "85799"
  },
  {
    "text": "called the global offset table that's",
    "start": "85799",
    "end": "88200"
  },
  {
    "text": "just a list of function pointers to",
    "start": "88200",
    "end": "90659"
  },
  {
    "text": "functions in lib c one of them being",
    "start": "90659",
    "end": "92700"
  },
  {
    "text": "printf for example if your code is able",
    "start": "92700",
    "end": "95340"
  },
  {
    "text": "to arbitrarily write somewhere they can",
    "start": "95340",
    "end": "97500"
  },
  {
    "text": "overwrite the got entry for printf to",
    "start": "97500",
    "end": "99900"
  },
  {
    "text": "point somewhere else that may have",
    "start": "99900",
    "end": "101640"
  },
  {
    "text": "malicious code that they want to run on",
    "start": "101640",
    "end": "103259"
  },
  {
    "text": "your system this code here has a pretty",
    "start": "103259",
    "end": "105000"
  },
  {
    "text": "good example about how C is not type",
    "start": "105000",
    "end": "107340"
  },
  {
    "text": "safe it may be glaring out to you to",
    "start": "107340",
    "end": "108900"
  },
  {
    "text": "some of you more senior C programmers",
    "start": "108900",
    "end": "110460"
  },
  {
    "text": "here the vector new function is",
    "start": "110460",
    "end": "112680"
  },
  {
    "text": "inherently broken why is that we create",
    "start": "112680",
    "end": "114960"
  },
  {
    "text": "a vector structure on the stack we",
    "start": "114960",
    "end": "116880"
  },
  {
    "text": "assign some values to it and then we",
    "start": "116880",
    "end": "118380"
  },
  {
    "text": "return a pointer to the that structure",
    "start": "118380",
    "end": "120840"
  },
  {
    "text": "on the stack however because that",
    "start": "120840",
    "end": "123000"
  },
  {
    "text": "variable is stack allocated if any new",
    "start": "123000",
    "end": "125880"
  },
  {
    "text": "memory occupies that space that pointer",
    "start": "125880",
    "end": "128340"
  },
  {
    "text": "is now dangling to new data that is not",
    "start": "128340",
    "end": "130800"
  },
  {
    "text": "the structure you originally intended if",
    "start": "130800",
    "end": "132239"
  },
  {
    "text": "you don't understand that example let's",
    "start": "132239",
    "end": "133440"
  },
  {
    "text": "go to a more simple example here we",
    "start": "133440",
    "end": "135720"
  },
  {
    "text": "create in this program a set of",
    "start": "135720",
    "end": "137580"
  },
  {
    "text": "structures that are called points points",
    "start": "137580",
    "end": "139500"
  },
  {
    "text": "have attributes X and Y we create an",
    "start": "139500",
    "end": "142560"
  },
  {
    "text": "array of 10 points and then we say which",
    "start": "142560",
    "end": "144840"
  },
  {
    "text": "point would you like to edit and then we",
    "start": "144840",
    "end": "146400"
  },
  {
    "text": "index into that array and then set the x",
    "start": "146400",
    "end": "149040"
  },
  {
    "text": "and the y coordinate to 69420 obvious",
    "start": "149040",
    "end": "151440"
  },
  {
    "text": "the problem with this code is that the",
    "start": "151440",
    "end": "153720"
  },
  {
    "text": "index can be any arbitrary length it",
    "start": "153720",
    "end": "156720"
  },
  {
    "text": "could be zero which is within that array",
    "start": "156720",
    "end": "158700"
  },
  {
    "text": "but it also could be a hundred and ten",
    "start": "158700",
    "end": "160739"
  },
  {
    "text": "thousand let's see if we can use this to",
    "start": "160739",
    "end": "162420"
  },
  {
    "text": "prove this program is not memory safe so",
    "start": "162420",
    "end": "164640"
  },
  {
    "text": "like I said before the program does",
    "start": "164640",
    "end": "166200"
  },
  {
    "text": "compile but for right now we're going to",
    "start": "166200",
    "end": "167580"
  },
  {
    "text": "run the program what point would you",
    "start": "167580",
    "end": "169140"
  },
  {
    "text": "like to edit I like to edit point two",
    "start": "169140",
    "end": "170519"
  },
  {
    "text": "because I'm a good user who's not going",
    "start": "170519",
    "end": "172140"
  },
  {
    "text": "to abuse the system boom and there's no",
    "start": "172140",
    "end": "174180"
  },
  {
    "text": "issue but if I'm a bad user and I want",
    "start": "174180",
    "end": "176519"
  },
  {
    "text": "to put in an index it is not in this",
    "start": "176519",
    "end": "178260"
  },
  {
    "text": "program I can do this now number here",
    "start": "178260",
    "end": "180720"
  },
  {
    "text": "and we have crashed the program if this",
    "start": "180720",
    "end": "183000"
  },
  {
    "text": "program were a little more involved with",
    "start": "183000",
    "end": "184680"
  },
  {
    "text": "a couple more features where I get to",
    "start": "184680",
    "end": "186239"
  },
  {
    "text": "choose X and Y I could write an exploit",
    "start": "186239",
    "end": "188519"
  },
  {
    "text": "for this program to give me full control",
    "start": "188519",
    "end": "190680"
  },
  {
    "text": "of the system the problem that I have",
    "start": "190680",
    "end": "193319"
  },
  {
    "text": "with both of these pieces of code is",
    "start": "193319",
    "end": "195720"
  },
  {
    "text": "that they both compile while the first",
    "start": "195720",
    "end": "197459"
  },
  {
    "text": "program does throw a warning the second",
    "start": "197459",
    "end": "199620"
  },
  {
    "text": "one compiles with no error at all C",
    "start": "199620",
    "end": "201720"
  },
  {
    "text": "inherently as a language allows the",
    "start": "201720",
    "end": "203700"
  },
  {
    "text": "programmer to create code that is unsafe",
    "start": "203700",
    "end": "205739"
  },
  {
    "text": "now you could argue that that is a",
    "start": "205739",
    "end": "207540"
  },
  {
    "text": "problem that you should lean on the",
    "start": "207540",
    "end": "209040"
  },
  {
    "text": "developer to fix and not the programming",
    "start": "209040",
    "end": "210840"
  },
  {
    "text": "language itself but the problem is",
    "start": "210840",
    "end": "212340"
  },
  {
    "text": "humans are flawed so when they write",
    "start": "212340",
    "end": "214680"
  },
  {
    "text": "code they're going to make mistakes a",
    "start": "214680",
    "end": "216900"
  },
  {
    "text": "language like C gives the developer too",
    "start": "216900",
    "end": "218819"
  },
  {
    "text": "much trust and empowers them to make",
    "start": "218819",
    "end": "220860"
  },
  {
    "text": "errors that it otherwise should not",
    "start": "220860",
    "end": "222420"
  },
  {
    "text": "allow them to make there's no reason why",
    "start": "222420",
    "end": "224459"
  },
  {
    "text": "I should be able to access outside of",
    "start": "224459",
    "end": "226260"
  },
  {
    "text": "the point structure and therefore the",
    "start": "226260",
    "end": "228060"
  },
  {
    "text": "language is not memory safe rust does",
    "start": "228060",
    "end": "230400"
  },
  {
    "text": "not allow these bugs to occur so here I",
    "start": "230400",
    "end": "232920"
  },
  {
    "text": "have a structure called Point same idea",
    "start": "232920",
    "end": "234900"
  },
  {
    "text": "and I implement the new function on the",
    "start": "234900",
    "end": "237659"
  },
  {
    "text": "point type and then that new function",
    "start": "237659",
    "end": "239580"
  },
  {
    "text": "all it does is it creates a point",
    "start": "239580",
    "end": "241560"
  },
  {
    "text": "structure on the local stack for this",
    "start": "241560",
    "end": "243420"
  },
  {
    "text": "function and it's mutable and it returns",
    "start": "243420",
    "end": "245640"
  },
  {
    "text": "a pointer to that object and we can use",
    "start": "245640",
    "end": "248760"
  },
  {
    "text": "that to allocate a point if you think",
    "start": "248760",
    "end": "250799"
  },
  {
    "text": "about it the memory Dynamic is exactly",
    "start": "250799",
    "end": "253019"
  },
  {
    "text": "the same as our original Vector problem",
    "start": "253019",
    "end": "255000"
  },
  {
    "text": "where we create it on the stack we set",
    "start": "255000",
    "end": "256859"
  },
  {
    "text": "some variables and we return it what",
    "start": "256859",
    "end": "259019"
  },
  {
    "text": "rust is going to do is Russ is going to",
    "start": "259019",
    "end": "261000"
  },
  {
    "text": "use the concept of borrowing and say at",
    "start": "261000",
    "end": "264120"
  },
  {
    "text": "this point P owns this point structure",
    "start": "264120",
    "end": "267240"
  },
  {
    "text": "we're going to return a pointer to P to",
    "start": "267240",
    "end": "270000"
  },
  {
    "text": "a function outside of it the pointer is",
    "start": "270000",
    "end": "272699"
  },
  {
    "text": "going to live longer than the attribute",
    "start": "272699",
    "end": "275100"
  },
  {
    "text": "that actually owns the point structure",
    "start": "275100",
    "end": "277560"
  },
  {
    "text": "and because of that the rust compiler",
    "start": "277560",
    "end": "279780"
  },
  {
    "text": "will not build this code and not allow",
    "start": "279780",
    "end": "282180"
  },
  {
    "text": "me to run it because I've violated the",
    "start": "282180",
    "end": "285060"
  },
  {
    "text": "concept of ownership in borrowing by",
    "start": "285060",
    "end": "287520"
  },
  {
    "text": "trying to return a pointer to a",
    "start": "287520",
    "end": "289440"
  },
  {
    "text": "structure that is not owned by the",
    "start": "289440",
    "end": "291180"
  },
  {
    "text": "person outside calling it based on this",
    "start": "291180",
    "end": "293280"
  },
  {
    "text": "the idea of ownership and borrowing in",
    "start": "293280",
    "end": "295680"
  },
  {
    "text": "Rust is the concept that makes rust a",
    "start": "295680",
    "end": "298440"
  },
  {
    "text": "memory safe language do want to",
    "start": "298440",
    "end": "300479"
  },
  {
    "text": "highlight that it is possible in Rust to",
    "start": "300479",
    "end": "302220"
  },
  {
    "text": "write code that is not memory safe",
    "start": "302220",
    "end": "304199"
  },
  {
    "text": "however to do so you have to explicitly",
    "start": "304199",
    "end": "306540"
  },
  {
    "text": "use the unsafe keyword let's talk about",
    "start": "306540",
    "end": "308759"
  },
  {
    "text": "what that does I've written two",
    "start": "308759",
    "end": "309900"
  },
  {
    "text": "functions here the first is a function",
    "start": "309900",
    "end": "311280"
  },
  {
    "text": "read where you can specify the parameter",
    "start": "311280",
    "end": "313440"
  },
  {
    "text": "address and then use that address as a",
    "start": "313440",
    "end": "315900"
  },
  {
    "text": "pointer and then dereference it to get",
    "start": "315900",
    "end": "317460"
  },
  {
    "text": "data if you specified a bad address in",
    "start": "317460",
    "end": "319979"
  },
  {
    "text": "this function you would get the data",
    "start": "319979",
    "end": "322020"
  },
  {
    "text": "from that address but you also could",
    "start": "322020",
    "end": "323340"
  },
  {
    "text": "crash the program just like our C",
    "start": "323340",
    "end": "325080"
  },
  {
    "text": "example this is a snippet of rust that",
    "start": "325080",
    "end": "327780"
  },
  {
    "text": "is not memory safe but you have to",
    "start": "327780",
    "end": "329460"
  },
  {
    "text": "explicitly say that it is unsafe",
    "start": "329460",
    "end": "331440"
  },
  {
    "text": "therefore you're directly violating the",
    "start": "331440",
    "end": "333479"
  },
  {
    "text": "language and what the compiler requires",
    "start": "333479",
    "end": "335400"
  },
  {
    "text": "and the same thing is said here in Rust",
    "start": "335400",
    "end": "337199"
  },
  {
    "text": "we have ffis that's foreign function",
    "start": "337199",
    "end": "339419"
  },
  {
    "text": "interfaces I can link in other libraries",
    "start": "339419",
    "end": "341820"
  },
  {
    "text": "that are compiled by other languages",
    "start": "341820",
    "end": "343320"
  },
  {
    "text": "like here I have lib C where I can link",
    "start": "343320",
    "end": "345240"
  },
  {
    "text": "in the C puts function it prints a",
    "start": "345240",
    "end": "347160"
  },
  {
    "text": "string and returns an i32 but to use",
    "start": "347160",
    "end": "349800"
  },
  {
    "text": "that function because it's thought to be",
    "start": "349800",
    "end": "351660"
  },
  {
    "text": "unsafe I have to wrap it in unsafe it is",
    "start": "351660",
    "end": "354180"
  },
  {
    "text": "possible to write non-memory safe rust",
    "start": "354180",
    "end": "356639"
  },
  {
    "text": "but you have to do it very intentionally",
    "start": "356639",
    "end": "358919"
  },
  {
    "text": "which is not direct use case for the",
    "start": "358919",
    "end": "360840"
  },
  {
    "text": "language I do want to highlight that",
    "start": "360840",
    "end": "362460"
  },
  {
    "text": "memory safety does not directly imply",
    "start": "362460",
    "end": "364979"
  },
  {
    "text": "security memory safety can lead to",
    "start": "364979",
    "end": "367080"
  },
  {
    "text": "memory security but all because your",
    "start": "367080",
    "end": "368820"
  },
  {
    "text": "program is memory secure does not mean",
    "start": "368820",
    "end": "371039"
  },
  {
    "text": "that it's wholly secure if for example",
    "start": "371039",
    "end": "372780"
  },
  {
    "text": "you're implementing an unsecure spec",
    "start": "372780",
    "end": "374880"
  },
  {
    "text": "your program may be Memory safe and",
    "start": "374880",
    "end": "376979"
  },
  {
    "text": "memory secure but the idea of your",
    "start": "376979",
    "end": "379139"
  },
  {
    "text": "program may be broken in general",
    "start": "379139",
    "end": "380460"
  },
  {
    "text": "regardless of that I really highly",
    "start": "380460",
    "end": "382020"
  },
  {
    "text": "recommend that anyone who's new to",
    "start": "382020",
    "end": "383639"
  },
  {
    "text": "program or even a veteran that's been",
    "start": "383639",
    "end": "384960"
  },
  {
    "text": "doing it for 10 years try a memory safe",
    "start": "384960",
    "end": "387360"
  },
  {
    "text": "language my favorite is rust and use",
    "start": "387360",
    "end": "389580"
  },
  {
    "text": "that as you go forward more and more and",
    "start": "389580",
    "end": "391560"
  },
  {
    "text": "more into your projects I do see a world",
    "start": "391560",
    "end": "393600"
  },
  {
    "text": "where C and C plus plus maybe not in one",
    "start": "393600",
    "end": "396000"
  },
  {
    "text": "year or 10 years but in the future will",
    "start": "396000",
    "end": "398759"
  },
  {
    "text": "be replaced by languages like rust that",
    "start": "398759",
    "end": "400979"
  },
  {
    "text": "don't allow the programmer to make",
    "start": "400979",
    "end": "402660"
  },
  {
    "text": "mistakes that have led to the major",
    "start": "402660",
    "end": "404580"
  },
  {
    "text": "security vulnerabilities in the world",
    "start": "404580",
    "end": "405960"
  },
  {
    "text": "before we go I want to tell you about a",
    "start": "405960",
    "end": "407699"
  },
  {
    "text": "long time supporter of this Channel and",
    "start": "407699",
    "end": "409560"
  },
  {
    "text": "the sponsor for today's video brilliant",
    "start": "409560",
    "end": "411360"
  },
  {
    "text": "What do the world's most successful and",
    "start": "411360",
    "end": "413220"
  },
  {
    "text": "productive people all have in common",
    "start": "413220",
    "end": "414900"
  },
  {
    "text": "they all learn something new every day",
    "start": "414900",
    "end": "417479"
  },
  {
    "text": "and if you think that's too time",
    "start": "417479",
    "end": "418919"
  },
  {
    "text": "consuming or over overwhelming or hard",
    "start": "418919",
    "end": "420660"
  },
  {
    "text": "to do well then I don't think you've",
    "start": "420660",
    "end": "422460"
  },
  {
    "text": "tried brilliant.org brilliant is the",
    "start": "422460",
    "end": "424259"
  },
  {
    "text": "best way to quickly learn new math and",
    "start": "424259",
    "end": "426660"
  },
  {
    "text": "computer science Concepts brilliant is",
    "start": "426660",
    "end": "428400"
  },
  {
    "text": "built for busy people designed around",
    "start": "428400",
    "end": "430139"
  },
  {
    "text": "bite-sized lessons that break complex",
    "start": "430139",
    "end": "432360"
  },
  {
    "text": "topics into understandable Parts you",
    "start": "432360",
    "end": "434400"
  },
  {
    "text": "won't sit through hours of lessons on",
    "start": "434400",
    "end": "436080"
  },
  {
    "text": "brilliant instead you'll be able to",
    "start": "436080",
    "end": "437639"
  },
  {
    "text": "master complex Topics in as little as 15",
    "start": "437639",
    "end": "440220"
  },
  {
    "text": "minutes a day instead of just sitting",
    "start": "440220",
    "end": "442020"
  },
  {
    "text": "through a presentation or watching a",
    "start": "442020",
    "end": "443759"
  },
  {
    "text": "bunch of slides go across the screen",
    "start": "443759",
    "end": "445080"
  },
  {
    "text": "brilliant lets you try things out and",
    "start": "445080",
    "end": "446759"
  },
  {
    "text": "gets your hands dirty as you go you can",
    "start": "446759",
    "end": "448800"
  },
  {
    "text": "try everything brilliant has to offer",
    "start": "448800",
    "end": "450419"
  },
  {
    "text": "with a free 30-day trial with my URL",
    "start": "450419",
    "end": "452460"
  },
  {
    "text": "here",
    "start": "452460",
    "end": "453620"
  },
  {
    "text": "www.bruary.org low level learning and",
    "start": "453620",
    "end": "456000"
  },
  {
    "text": "the first 200 of you to sign up get a 20",
    "start": "456000",
    "end": "458099"
  },
  {
    "text": "discount off your first annual",
    "start": "458099",
    "end": "460440"
  },
  {
    "text": "subscription thanks again brilliant for",
    "start": "460440",
    "end": "461880"
  },
  {
    "text": "sponsoring this video",
    "start": "461880",
    "end": "464360"
  }
]