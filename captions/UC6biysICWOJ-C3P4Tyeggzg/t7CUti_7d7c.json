[
  {
    "text": "one concept that I see messing up new",
    "start": "80",
    "end": "1560"
  },
  {
    "text": "programmers all the time is void",
    "start": "1560",
    "end": "3679"
  },
  {
    "text": "pointers they've just begun to",
    "start": "3679",
    "end": "5240"
  },
  {
    "text": "understand pointers and then this new",
    "start": "5240",
    "end": "6879"
  },
  {
    "text": "type shows up that they really can't use",
    "start": "6879",
    "end": "8519"
  },
  {
    "text": "correctly and it just messes everything",
    "start": "8519",
    "end": "9920"
  },
  {
    "text": "up my name is l level learning I teach",
    "start": "9920",
    "end": "11679"
  },
  {
    "text": "people how to write faster and safer",
    "start": "11679",
    "end": "13160"
  },
  {
    "text": "code and today we're going to talk about",
    "start": "13160",
    "end": "14799"
  },
  {
    "text": "what a void pointer is why they exist",
    "start": "14799",
    "end": "17359"
  },
  {
    "text": "and how to deal with them let's Jump",
    "start": "17359",
    "end": "19320"
  },
  {
    "text": "Right In first you have to talk about",
    "start": "19320",
    "end": "20760"
  },
  {
    "text": "pointers in general what are Pointers so",
    "start": "20760",
    "end": "23199"
  },
  {
    "text": "pointers are actually really simple",
    "start": "23199",
    "end": "24760"
  },
  {
    "text": "despite how often they confuse new",
    "start": "24760",
    "end": "26199"
  },
  {
    "text": "programmers a pointer is just a variable",
    "start": "26199",
    "end": "28840"
  },
  {
    "text": "that contains the addess of another",
    "start": "28840",
    "end": "31080"
  },
  {
    "text": "variable so for example if we have a",
    "start": "31080",
    "end": "32439"
  },
  {
    "text": "variable int a that is an integer",
    "start": "32439",
    "end": "34399"
  },
  {
    "text": "variable we'll say that its value is",
    "start": "34399",
    "end": "36480"
  },
  {
    "text": "equal to four so now the value a",
    "start": "36480",
    "end": "38760"
  },
  {
    "text": "contains four bytes that represent the",
    "start": "38760",
    "end": "40719"
  },
  {
    "text": "number four so later on in the code we",
    "start": "40719",
    "end": "42920"
  },
  {
    "text": "can say that int star PA that means that",
    "start": "42920",
    "end": "46239"
  },
  {
    "text": "we have now a variable that points to an",
    "start": "46239",
    "end": "48920"
  },
  {
    "text": "integer it is an integer pointer we can",
    "start": "48920",
    "end": "51399"
  },
  {
    "text": "say that it contains the address of a so",
    "start": "51399",
    "end": "54719"
  },
  {
    "text": "now we can say that PA points to a I get",
    "start": "54719",
    "end": "57359"
  },
  {
    "text": "a lot of questions like why do we even",
    "start": "57359",
    "end": "59079"
  },
  {
    "text": "use pointers and in the case that we use",
    "start": "59079",
    "end": "61440"
  },
  {
    "text": "integers like this where I'm pointing a",
    "start": "61440",
    "end": "63399"
  },
  {
    "text": "pointer to an integer that's actually a",
    "start": "63399",
    "end": "65600"
  },
  {
    "text": "very good question we don't really need",
    "start": "65600",
    "end": "67040"
  },
  {
    "text": "to use pointers here because the size of",
    "start": "67040",
    "end": "69400"
  },
  {
    "text": "an integer is four bytes and that's",
    "start": "69400",
    "end": "71600"
  },
  {
    "text": "actually within the word size of our",
    "start": "71600",
    "end": "74159"
  },
  {
    "text": "architecture and because I'm on a 64bit",
    "start": "74159",
    "end": "76119"
  },
  {
    "text": "machine that's 8 bytes so this 4 byte",
    "start": "76119",
    "end": "79240"
  },
  {
    "text": "type can actually just get passed around",
    "start": "79240",
    "end": "80960"
  },
  {
    "text": "by value I can make a function called",
    "start": "80960",
    "end": "83479"
  },
  {
    "text": "int do a thing and it takes int X and I",
    "start": "83479",
    "end": "86439"
  },
  {
    "text": "can return you know x + 2 right I don't",
    "start": "86439",
    "end": "90680"
  },
  {
    "text": "need to do anything special with",
    "start": "90680",
    "end": "92000"
  },
  {
    "text": "pointers because I can pass a by value I",
    "start": "92000",
    "end": "94159"
  },
  {
    "text": "can literally pass in a equals do a",
    "start": "94159",
    "end": "97040"
  },
  {
    "text": "thing on a and that will add you know",
    "start": "97040",
    "end": "100159"
  },
  {
    "text": "two to a a will be six but what if we",
    "start": "100159",
    "end": "103000"
  },
  {
    "text": "wanted to use values that were bigger",
    "start": "103000",
    "end": "104680"
  },
  {
    "text": "what if we wanted to use variables that",
    "start": "104680",
    "end": "106399"
  },
  {
    "text": "were bigger than the word size something",
    "start": "106399",
    "end": "108240"
  },
  {
    "text": "that wasn't an integer so instead of",
    "start": "108240",
    "end": "109880"
  },
  {
    "text": "using a 4 byte value like an integer",
    "start": "109880",
    "end": "112040"
  },
  {
    "text": "what if I made a structure that is",
    "start": "112040",
    "end": "113640"
  },
  {
    "text": "greater than the word size greater than",
    "start": "113640",
    "end": "115560"
  },
  {
    "text": "8 bytes and here I've made a structure",
    "start": "115560",
    "end": "117880"
  },
  {
    "text": "called person that has 60 8 bytes of",
    "start": "117880",
    "end": "120680"
  },
  {
    "text": "data it has a 4 byte integer ID and it",
    "start": "120680",
    "end": "123479"
  },
  {
    "text": "has a 64 byte buffer for its name for",
    "start": "123479",
    "end": "125759"
  },
  {
    "text": "example so if I wanted to do any",
    "start": "125759",
    "end": "127680"
  },
  {
    "text": "operations on person P IID have to pass",
    "start": "127680",
    "end": "130440"
  },
  {
    "text": "P by reference I could not pass it by",
    "start": "130440",
    "end": "132480"
  },
  {
    "text": "value and the way we would handle that",
    "start": "132480",
    "end": "134400"
  },
  {
    "text": "is we would make a function that's",
    "start": "134400",
    "end": "135959"
  },
  {
    "text": "called you know do a thing only now it",
    "start": "135959",
    "end": "138640"
  },
  {
    "text": "takes a person pointer we'll call it P",
    "start": "138640",
    "end": "141920"
  },
  {
    "text": "person and we can say that and inside",
    "start": "141920",
    "end": "144319"
  },
  {
    "text": "this function uh P person ID equals z or",
    "start": "144319",
    "end": "149000"
  },
  {
    "text": "something and then maybe we U memet the",
    "start": "149000",
    "end": "152360"
  },
  {
    "text": "address of P",
    "start": "152360",
    "end": "154160"
  },
  {
    "text": "person name 64 bytes or 2 Z of 64 bytes",
    "start": "154160",
    "end": "159280"
  },
  {
    "text": "right maybe this is like our our",
    "start": "159280",
    "end": "160480"
  },
  {
    "text": "initialize a person structure because",
    "start": "160480",
    "end": "162680"
  },
  {
    "text": "person is such a large structure we have",
    "start": "162680",
    "end": "164760"
  },
  {
    "text": "to pass it by reference and the way that",
    "start": "164760",
    "end": "166319"
  },
  {
    "text": "we do that to call the function is we",
    "start": "166319",
    "end": "168040"
  },
  {
    "text": "say do a thing on P awesome so that's",
    "start": "168040",
    "end": "173000"
  },
  {
    "text": "pretty straightforward and we could",
    "start": "173000",
    "end": "174080"
  },
  {
    "text": "check the return value you know int R",
    "start": "174080",
    "end": "175800"
  },
  {
    "text": "equals do a thing and obviously this",
    "start": "175800",
    "end": "177239"
  },
  {
    "text": "would return um some status code and",
    "start": "177239",
    "end": "179400"
  },
  {
    "text": "we'll say return zero for here so then",
    "start": "179400",
    "end": "181519"
  },
  {
    "text": "we've talked about pointers for a minute",
    "start": "181519",
    "end": "182800"
  },
  {
    "text": "now now what does a void pointer the",
    "start": "182800",
    "end": "184920"
  },
  {
    "text": "whole point of this video what does a",
    "start": "184920",
    "end": "186440"
  },
  {
    "text": "void pointer do for us so when you",
    "start": "186440",
    "end": "189640"
  },
  {
    "text": "actually have a pointer and you's go",
    "start": "189640",
    "end": "192440"
  },
  {
    "text": "back to our in a example we have in Star",
    "start": "192440",
    "end": "194760"
  },
  {
    "text": "PA is the address of a if I wanted to",
    "start": "194760",
    "end": "197879"
  },
  {
    "text": "dreference",
    "start": "197879",
    "end": "199120"
  },
  {
    "text": "or look up the value at an address I",
    "start": "199120",
    "end": "203000"
  },
  {
    "text": "would add a star character which is the",
    "start": "203000",
    "end": "205080"
  },
  {
    "text": "D reference operator which tells the",
    "start": "205080",
    "end": "207640"
  },
  {
    "text": "computer to go to that address and get",
    "start": "207640",
    "end": "210159"
  },
  {
    "text": "the value that lives there well the",
    "start": "210159",
    "end": "212120"
  },
  {
    "text": "question is how much data do we get we",
    "start": "212120",
    "end": "215799"
  },
  {
    "text": "need to go get the value at an address",
    "start": "215799",
    "end": "218200"
  },
  {
    "text": "but a lot of structures are bigger than",
    "start": "218200",
    "end": "220840"
  },
  {
    "text": "just one bite like I said before the int",
    "start": "220840",
    "end": "222799"
  },
  {
    "text": "value is actually Four bytes wide so by",
    "start": "222799",
    "end": "226000"
  },
  {
    "text": "dereferencing the type I use the type",
    "start": "226000",
    "end": "228680"
  },
  {
    "text": "information that's defined at compile",
    "start": "228680",
    "end": "230680"
  },
  {
    "text": "time to tell the computer how far out to",
    "start": "230680",
    "end": "233480"
  },
  {
    "text": "go and the reason this is so problematic",
    "start": "233480",
    "end": "237040"
  },
  {
    "text": "with the void pointer is because the",
    "start": "237040",
    "end": "239319"
  },
  {
    "text": "void type does not have a size because",
    "start": "239319",
    "end": "242599"
  },
  {
    "text": "of that if I say that void pointer we'll",
    "start": "242599",
    "end": "244560"
  },
  {
    "text": "call it VA is equal to the address of a",
    "start": "244560",
    "end": "248040"
  },
  {
    "text": "I'm actually unable to dreference VA and",
    "start": "248040",
    "end": "251480"
  },
  {
    "text": "we'll compile this real quick and I'll",
    "start": "251480",
    "end": "252560"
  },
  {
    "text": "show you that so I get an error here",
    "start": "252560",
    "end": "255200"
  },
  {
    "text": "invalid use of void expression the",
    "start": "255200",
    "end": "257400"
  },
  {
    "text": "reason is the compiler is trying to make",
    "start": "257400",
    "end": "259560"
  },
  {
    "text": "an assembly instruction to reach out to",
    "start": "259560",
    "end": "262440"
  },
  {
    "text": "the address that's contained in our",
    "start": "262440",
    "end": "264240"
  },
  {
    "text": "pointer variable and go get that many",
    "start": "264240",
    "end": "266840"
  },
  {
    "text": "bytes but the problem is it's a void",
    "start": "266840",
    "end": "268960"
  },
  {
    "text": "type it does not know how many bytes to",
    "start": "268960",
    "end": "271440"
  },
  {
    "text": "get so then you're probably wondering",
    "start": "271440",
    "end": "273320"
  },
  {
    "text": "why does this variable type even exist",
    "start": "273320",
    "end": "275199"
  },
  {
    "text": "like why would we create a type that",
    "start": "275199",
    "end": "277080"
  },
  {
    "text": "does not have type information it breaks",
    "start": "277080",
    "end": "279360"
  },
  {
    "text": "all of our code we can't use it when we",
    "start": "279360",
    "end": "281080"
  },
  {
    "text": "use functions that give us memory or",
    "start": "281080",
    "end": "283880"
  },
  {
    "text": "free memory memory allocation functions",
    "start": "283880",
    "end": "286240"
  },
  {
    "text": "like Malik for example all of these pass",
    "start": "286240",
    "end": "289160"
  },
  {
    "text": "around a void Star as as a type right so",
    "start": "289160",
    "end": "292520"
  },
  {
    "text": "Malik returns a void star calic realic",
    "start": "292520",
    "end": "295440"
  },
  {
    "text": "realic uh realic array all use the void",
    "start": "295440",
    "end": "298639"
  },
  {
    "text": "star type and also when you free you",
    "start": "298639",
    "end": "300960"
  },
  {
    "text": "pass in a void star type the reason for",
    "start": "300960",
    "end": "303639"
  },
  {
    "text": "all of this is because the C language is",
    "start": "303639",
    "end": "305680"
  },
  {
    "text": "giving you the power to tell the",
    "start": "305680",
    "end": "308479"
  },
  {
    "text": "compiler what type is stored there so",
    "start": "308479",
    "end": "310919"
  },
  {
    "text": "let's kind of go through that in in a",
    "start": "310919",
    "end": "312440"
  },
  {
    "text": "practical example so let's say I wanted",
    "start": "312440",
    "end": "314840"
  },
  {
    "text": "to make room on the Heap for my person",
    "start": "314840",
    "end": "317520"
  },
  {
    "text": "structure because right now my person",
    "start": "317520",
    "end": "318840"
  },
  {
    "text": "structure is all being contained on the",
    "start": "318840",
    "end": "320880"
  },
  {
    "text": "stack let's delete all this and I say",
    "start": "320880",
    "end": "322919"
  },
  {
    "text": "that I have I have a person pointer",
    "start": "322919",
    "end": "325560"
  },
  {
    "text": "right so it's a it's a person pointer",
    "start": "325560",
    "end": "327680"
  },
  {
    "text": "we'll call it P person and I want to",
    "start": "327680",
    "end": "330720"
  },
  {
    "text": "maloc it from the Heap and how big do I",
    "start": "330720",
    "end": "333199"
  },
  {
    "text": "Malik that's the input to Malik right is",
    "start": "333199",
    "end": "334960"
  },
  {
    "text": "the size that I'm getting I'm going to",
    "start": "334960",
    "end": "336840"
  },
  {
    "text": "Malik a size of a",
    "start": "336840",
    "end": "340880"
  },
  {
    "text": "person well by default the equal sign",
    "start": "340880",
    "end": "344160"
  },
  {
    "text": "will throw a warning and if you have W",
    "start": "344160",
    "end": "346319"
  },
  {
    "text": "error enabled this will actually be an",
    "start": "346319",
    "end": "347759"
  },
  {
    "text": "error because the Malik type is",
    "start": "347759",
    "end": "349600"
  },
  {
    "text": "returning a void star and we are",
    "start": "349600",
    "end": "352000"
  },
  {
    "text": "implicitly casting it to a p person type",
    "start": "352000",
    "end": "355680"
  },
  {
    "text": "so what we actually have to do is tell",
    "start": "355680",
    "end": "357440"
  },
  {
    "text": "the compiler hey I'm aware this returns",
    "start": "357440",
    "end": "360080"
  },
  {
    "text": "a void star type but I need to convert",
    "start": "360080",
    "end": "362319"
  },
  {
    "text": "it to a p person type all we're going to",
    "start": "362319",
    "end": "364120"
  },
  {
    "text": "say is a person star and by putting it",
    "start": "364120",
    "end": "366520"
  },
  {
    "text": "in parenthesis like this with just a",
    "start": "366520",
    "end": "368080"
  },
  {
    "text": "type or do what's called a type cast so",
    "start": "368080",
    "end": "370520"
  },
  {
    "text": "the type that comes out of this is being",
    "start": "370520",
    "end": "372759"
  },
  {
    "text": "converted at compile time to a person",
    "start": "372759",
    "end": "375039"
  },
  {
    "text": "star and put into our variable and then",
    "start": "375039",
    "end": "378000"
  },
  {
    "text": "obviously we have to check our value",
    "start": "378000",
    "end": "379479"
  },
  {
    "text": "right if we say if null double equals P",
    "start": "379479",
    "end": "381479"
  },
  {
    "text": "person and we say you know uh puts the",
    "start": "381479",
    "end": "385880"
  },
  {
    "text": "Heap failed uh Runway or whatever",
    "start": "385880",
    "end": "390039"
  },
  {
    "text": "uh and then we return negative 1 because",
    "start": "390039",
    "end": "391520"
  },
  {
    "text": "the program failed we can't use our our",
    "start": "391520",
    "end": "393120"
  },
  {
    "text": "code here and then if we want to later",
    "start": "393120",
    "end": "394720"
  },
  {
    "text": "on in the code free it we then free P",
    "start": "394720",
    "end": "397440"
  },
  {
    "text": "person and this does take a void Star as",
    "start": "397440",
    "end": "400240"
  },
  {
    "text": "input but the implicit cast here is",
    "start": "400240",
    "end": "401960"
  },
  {
    "text": "actually okay and don't forget when",
    "start": "401960",
    "end": "403240"
  },
  {
    "text": "you're using the Heap you also have to",
    "start": "403240",
    "end": "404240"
  },
  {
    "text": "include standard lib because that's the",
    "start": "404240",
    "end": "406240"
  },
  {
    "text": "library um that contains those functions",
    "start": "406240",
    "end": "409680"
  },
  {
    "text": "and there we go so now we've compiled",
    "start": "409680",
    "end": "411039"
  },
  {
    "text": "the pointers program with no errors so",
    "start": "411039",
    "end": "413440"
  },
  {
    "text": "when is it a good idea to use a void",
    "start": "413440",
    "end": "415639"
  },
  {
    "text": "star well a void star is meant to",
    "start": "415639",
    "end": "417319"
  },
  {
    "text": "represent what is referred to as",
    "start": "417319",
    "end": "418960"
  },
  {
    "text": "typelist memory right so if you are",
    "start": "418960",
    "end": "421240"
  },
  {
    "text": "maling from the Heap or you have a",
    "start": "421240",
    "end": "423280"
  },
  {
    "text": "variable that is undefined in its type",
    "start": "423280",
    "end": "425440"
  },
  {
    "text": "it just represents a raw blob of memory",
    "start": "425440",
    "end": "427800"
  },
  {
    "text": "that's where the void pointer makes the",
    "start": "427800",
    "end": "429039"
  },
  {
    "text": "most sense and then the minute that you",
    "start": "429039",
    "end": "430400"
  },
  {
    "text": "know the type of that variable you",
    "start": "430400",
    "end": "432400"
  },
  {
    "text": "should then be casting it to that type",
    "start": "432400",
    "end": "434360"
  },
  {
    "text": "or just use that type in general like",
    "start": "434360",
    "end": "436440"
  },
  {
    "text": "for example because this function is a",
    "start": "436440",
    "end": "438759"
  },
  {
    "text": "you know let's say that this is the",
    "start": "438759",
    "end": "441240"
  },
  {
    "text": "initialized person function right",
    "start": "441240",
    "end": "443759"
  },
  {
    "text": "there's never a we should never be",
    "start": "443759",
    "end": "445639"
  },
  {
    "text": "passing a void star pointer and then",
    "start": "445639",
    "end": "448080"
  },
  {
    "text": "saying uh person P person equals person",
    "start": "448080",
    "end": "452800"
  },
  {
    "text": "star of pointer right like if we know",
    "start": "452800",
    "end": "455400"
  },
  {
    "text": "the type of the memory ahead of time a",
    "start": "455400",
    "end": "457680"
  },
  {
    "text": "person star of pointer if we know the",
    "start": "457680",
    "end": "460240"
  },
  {
    "text": "type of the memory ahead of time we",
    "start": "460240",
    "end": "461520"
  },
  {
    "text": "should never be using void star we",
    "start": "461520",
    "end": "463000"
  },
  {
    "text": "should always include type information",
    "start": "463000",
    "end": "464759"
  },
  {
    "text": "in our code as often as possible but in",
    "start": "464759",
    "end": "467240"
  },
  {
    "text": "cases like this where we are maling and",
    "start": "467240",
    "end": "469400"
  },
  {
    "text": "freeing raw memory that is not known by",
    "start": "469400",
    "end": "471919"
  },
  {
    "text": "the allocator at the time to can include",
    "start": "471919",
    "end": "474159"
  },
  {
    "text": "the type information then we just use",
    "start": "474159",
    "end": "476680"
  },
  {
    "text": "the void star the way it's intended and",
    "start": "476680",
    "end": "478319"
  },
  {
    "text": "then cast it when we get that memory now",
    "start": "478319",
    "end": "480599"
  },
  {
    "text": "another question people typically have",
    "start": "480599",
    "end": "482280"
  },
  {
    "text": "is why do header files exist like why do",
    "start": "482280",
    "end": "484319"
  },
  {
    "text": "I even have to include standard i.h",
    "start": "484319",
    "end": "487000"
  },
  {
    "text": "standard li. and if you're curious about",
    "start": "487000",
    "end": "488800"
  },
  {
    "text": "that like I was go watch th this this",
    "start": "488800",
    "end": "492560"
  },
  {
    "text": "video this video this video and uh go",
    "start": "492560",
    "end": "495520"
  },
  {
    "text": "find out see you guys there",
    "start": "495520",
    "end": "498680"
  }
]