[
  {
    "text": "low Lev gang our task today is simple we",
    "start": "80",
    "end": "2560"
  },
  {
    "text": "will be doing elad code challenges in",
    "start": "2560",
    "end": "4640"
  },
  {
    "text": "particular we'll be doing the two sum",
    "start": "4640",
    "end": "6680"
  },
  {
    "text": "problem the two sum problem is one of",
    "start": "6680",
    "end": "8320"
  },
  {
    "text": "the most notorious leak code challenges",
    "start": "8320",
    "end": "10759"
  },
  {
    "text": "all you have to do is given a list of",
    "start": "10759",
    "end": "12960"
  },
  {
    "text": "numbers so for example 3 2 and five",
    "start": "12960",
    "end": "16400"
  },
  {
    "text": "return the two indices that add up to",
    "start": "16400",
    "end": "19600"
  },
  {
    "text": "your target number so if our Target was",
    "start": "19600",
    "end": "21560"
  },
  {
    "text": "five we have to return zero and 1",
    "start": "21560",
    "end": "24599"
  },
  {
    "text": "because 3 + 2 = 5 sounds like a pretty",
    "start": "24599",
    "end": "28119"
  },
  {
    "text": "easy problem and honestly it is",
    "start": "28119",
    "end": "30519"
  },
  {
    "text": "but we'll be doing it in assembly so",
    "start": "30519",
    "end": "33480"
  },
  {
    "text": "let's get into it leak code you know for",
    "start": "33480",
    "end": "35160"
  },
  {
    "text": "some reason doesn't have assembly as a",
    "start": "35160",
    "end": "36719"
  },
  {
    "text": "choosable language in their languages",
    "start": "36719",
    "end": "38440"
  },
  {
    "text": "here uh so we're going to be doing it in",
    "start": "38440",
    "end": "40480"
  },
  {
    "text": "C using inline assembly so the way we're",
    "start": "40480",
    "end": "42680"
  },
  {
    "text": "going to start is like this and we have",
    "start": "42680",
    "end": "45320"
  },
  {
    "text": "to set it up that it uses Intel syntax",
    "start": "45320",
    "end": "48160"
  },
  {
    "text": "do that with a couple little commands",
    "start": "48160",
    "end": "49440"
  },
  {
    "text": "here Intel syntax no prefix no prefix",
    "start": "49440",
    "end": "51600"
  },
  {
    "text": "reduces the amount of percent signs we",
    "start": "51600",
    "end": "53320"
  },
  {
    "text": "use in our code and then we're going to",
    "start": "53320",
    "end": "55520"
  },
  {
    "text": "add a r instruction to just prove that",
    "start": "55520",
    "end": "57840"
  },
  {
    "text": "it works finally to make sure that the",
    "start": "57840",
    "end": "59440"
  },
  {
    "text": "uh compil is in a happy State we have to",
    "start": "59440",
    "end": "61359"
  },
  {
    "text": "return it back to where it started which",
    "start": "61359",
    "end": "63120"
  },
  {
    "text": "for some reason is AT&T syntax so we'll",
    "start": "63120",
    "end": "65799"
  },
  {
    "text": "go ahead and do that and then one final",
    "start": "65799",
    "end": "67360"
  },
  {
    "text": "thing we have to add to make our uh",
    "start": "67360",
    "end": "70000"
  },
  {
    "text": "program usable is attribute naked so by",
    "start": "70000",
    "end": "73759"
  },
  {
    "text": "making it a naked function it actually",
    "start": "73759",
    "end": "76080"
  },
  {
    "text": "removes all of the function prologue and",
    "start": "76080",
    "end": "78439"
  },
  {
    "text": "epilog that the compiler adds to the",
    "start": "78439",
    "end": "80320"
  },
  {
    "text": "function by itself by default if we run",
    "start": "80320",
    "end": "82640"
  },
  {
    "text": "this we will see that we get probably a",
    "start": "82640",
    "end": "85520"
  },
  {
    "text": "wrong answer prompt but it means that it",
    "start": "85520",
    "end": "87200"
  },
  {
    "text": "compiled and then it ran so at this",
    "start": "87200",
    "end": "88880"
  },
  {
    "text": "point we are in full control of the",
    "start": "88880",
    "end": "91360"
  },
  {
    "text": "program and now we have to actually get",
    "start": "91360",
    "end": "92720"
  },
  {
    "text": "into solving the problem uh we're going",
    "start": "92720",
    "end": "94159"
  },
  {
    "text": "to actually break this down into a few",
    "start": "94159",
    "end": "95720"
  },
  {
    "text": "parts so I know the two sum problem",
    "start": "95720",
    "end": "97360"
  },
  {
    "text": "itself has a lot of solutions uh one of",
    "start": "97360",
    "end": "100000"
  },
  {
    "text": "them is O of n time the the hash table",
    "start": "100000",
    "end": "102439"
  },
  {
    "text": "solution I'm not going to be creating a",
    "start": "102439",
    "end": "104399"
  },
  {
    "text": "hash table and assembly today we're",
    "start": "104399",
    "end": "105719"
  },
  {
    "text": "going to do the O of n squ Brute Force",
    "start": "105719",
    "end": "107719"
  },
  {
    "text": "solution not the prettiest but we're",
    "start": "107719",
    "end": "109240"
  },
  {
    "text": "going to do it in assembly so it's going",
    "start": "109240",
    "end": "110240"
  },
  {
    "text": "to be pretty cool anyway so we'll break",
    "start": "110240",
    "end": "111479"
  },
  {
    "text": "the problem down into parts so first is",
    "start": "111479",
    "end": "114439"
  },
  {
    "text": "create a stack cuz we have to make room",
    "start": "114439",
    "end": "116640"
  },
  {
    "text": "for memory for our stuff to go then we",
    "start": "116640",
    "end": "118840"
  },
  {
    "text": "have to store our parameters onto the",
    "start": "118840",
    "end": "121920"
  },
  {
    "text": "stack then the C solution expects a int",
    "start": "121920",
    "end": "125399"
  },
  {
    "text": "pointer to be returned we have to malic",
    "start": "125399",
    "end": "128239"
  },
  {
    "text": "memory for our answer and then we have",
    "start": "128239",
    "end": "130959"
  },
  {
    "text": "to do the computation and the",
    "start": "130959",
    "end": "132280"
  },
  {
    "text": "computation will be something on the",
    "start": "132280",
    "end": "133400"
  },
  {
    "text": "order of uh do an outer loop to iterate",
    "start": "133400",
    "end": "137920"
  },
  {
    "text": "over all the numbers then inside of",
    "start": "137920",
    "end": "140879"
  },
  {
    "text": "every number we will then do an inner",
    "start": "140879",
    "end": "143080"
  },
  {
    "text": "loop to iterate over the other numbers",
    "start": "143080",
    "end": "147080"
  },
  {
    "text": "and then from there if the sum equal",
    "start": "147080",
    "end": "150040"
  },
  {
    "text": "equals the Target store and leave",
    "start": "150040",
    "end": "153800"
  },
  {
    "text": "basically if the sum of the two numbers",
    "start": "153800",
    "end": "155720"
  },
  {
    "text": "while we're iterating equals the target",
    "start": "155720",
    "end": "157360"
  },
  {
    "text": "number we'll store those indices into",
    "start": "157360",
    "end": "159519"
  },
  {
    "text": "the array and then we'll move on and and",
    "start": "159519",
    "end": "161720"
  },
  {
    "text": "return from the program and then after",
    "start": "161720",
    "end": "163519"
  },
  {
    "text": "this we have to clean our stack and and",
    "start": "163519",
    "end": "167400"
  },
  {
    "text": "leave all right cool so how do we do all",
    "start": "167400",
    "end": "169280"
  },
  {
    "text": "these things in assembly so the first",
    "start": "169280",
    "end": "170560"
  },
  {
    "text": "part create a stack pretty simple uh let",
    "start": "170560",
    "end": "172159"
  },
  {
    "text": "me add these things here to can prevent",
    "start": "172159",
    "end": "174519"
  },
  {
    "text": "the compiler for complaining cool so to",
    "start": "174519",
    "end": "176360"
  },
  {
    "text": "create a stack uh the typical syntax in",
    "start": "176360",
    "end": "178800"
  },
  {
    "text": "64-bit Intel is push RBX and then we're",
    "start": "178800",
    "end": "181440"
  },
  {
    "text": "going to create some room on the stack",
    "start": "181440",
    "end": "183319"
  },
  {
    "text": "by subtracting hex 40 from RSP so at",
    "start": "183319",
    "end": "186159"
  },
  {
    "text": "this point we've created the stack we",
    "start": "186159",
    "end": "187319"
  },
  {
    "text": "now have room for our memory to go uh",
    "start": "187319",
    "end": "189799"
  },
  {
    "text": "when you do a function call in 64-bit",
    "start": "189799",
    "end": "191959"
  },
  {
    "text": "assembly a few things happen uh the",
    "start": "191959",
    "end": "193799"
  },
  {
    "text": "first part is that all of your variables",
    "start": "193799",
    "end": "195480"
  },
  {
    "text": "come in in registers so the register",
    "start": "195480",
    "end": "197519"
  },
  {
    "text": "order in 64-bit is RDI RSI RDX rcx we",
    "start": "197519",
    "end": "202319"
  },
  {
    "text": "need to take these registers and store",
    "start": "202319",
    "end": "204480"
  },
  {
    "text": "them onto the stack so that we don't",
    "start": "204480",
    "end": "206239"
  },
  {
    "text": "lose track of them because if they go",
    "start": "206239",
    "end": "207560"
  },
  {
    "text": "away you know our program is useless so",
    "start": "207560",
    "end": "209280"
  },
  {
    "text": "store our onto the stack we will do that",
    "start": "209280",
    "end": "211360"
  },
  {
    "text": "is we'll say move the quadw",
    "start": "211360",
    "end": "214760"
  },
  {
    "text": "pointer at hex",
    "start": "214760",
    "end": "217200"
  },
  {
    "text": "RSP plus hex 10 so now hex 10 represents",
    "start": "217200",
    "end": "221200"
  },
  {
    "text": "a slot on the stack where we're going to",
    "start": "221200",
    "end": "222720"
  },
  {
    "text": "put something and we're going to put RDI",
    "start": "222720",
    "end": "224920"
  },
  {
    "text": "there right so RDI is the first all",
    "start": "224920",
    "end": "226519"
  },
  {
    "text": "we're going to do now is copy and paste",
    "start": "226519",
    "end": "227959"
  },
  {
    "text": "this and we're going to store all of our",
    "start": "227959",
    "end": "229239"
  },
  {
    "text": "parameters onto the stack so remember a",
    "start": "229239",
    "end": "231040"
  },
  {
    "text": "quad word pointer is eight long so we're",
    "start": "231040",
    "end": "232879"
  },
  {
    "text": "going to increment our address by eight",
    "start": "232879",
    "end": "236000"
  },
  {
    "text": "so RDI RSI RDX oh and then R CX cool so",
    "start": "236000",
    "end": "242120"
  },
  {
    "text": "now we've put our parameters onto the",
    "start": "242120",
    "end": "243640"
  },
  {
    "text": "stack and assembly pretty simple so we",
    "start": "243640",
    "end": "245239"
  },
  {
    "text": "have to Malo memory now for our answer",
    "start": "245239",
    "end": "247760"
  },
  {
    "text": "if you remember before the problem is",
    "start": "247760",
    "end": "249280"
  },
  {
    "text": "called the two sum problem which means",
    "start": "249280",
    "end": "250959"
  },
  {
    "text": "that there are only ever two answers and",
    "start": "250959",
    "end": "253920"
  },
  {
    "text": "those answers of are of type int so 2 *",
    "start": "253920",
    "end": "257079"
  },
  {
    "text": "size of int is eight so all we have to",
    "start": "257079",
    "end": "259440"
  },
  {
    "text": "do is move into RDI which again is the",
    "start": "259440",
    "end": "262639"
  },
  {
    "text": "first parameter of a function call the",
    "start": "262639",
    "end": "264800"
  },
  {
    "text": "number eight which is the size we would",
    "start": "264800",
    "end": "266560"
  },
  {
    "text": "like to Malik and then call Malik we can",
    "start": "266560",
    "end": "269120"
  },
  {
    "text": "just do a far call out to Malik and",
    "start": "269120",
    "end": "270600"
  },
  {
    "text": "Malik will call it'll bring us back our",
    "start": "270600",
    "end": "272440"
  },
  {
    "text": "memory and return easy and then the",
    "start": "272440",
    "end": "275759"
  },
  {
    "text": "return address from Malik will be put",
    "start": "275759",
    "end": "277960"
  },
  {
    "text": "into Rax Rax is the return value for a",
    "start": "277960",
    "end": "281720"
  },
  {
    "text": "64-bit function call so we need to put",
    "start": "281720",
    "end": "284039"
  },
  {
    "text": "that onto the stack as well to make sure",
    "start": "284039",
    "end": "285759"
  },
  {
    "text": "we don't lose track of it either so",
    "start": "285759",
    "end": "287199"
  },
  {
    "text": "we're going to put that into slot 30 so",
    "start": "287199",
    "end": "289639"
  },
  {
    "text": "we're going to put Rax into slot 30",
    "start": "289639",
    "end": "292479"
  },
  {
    "text": "pretty simple so now we've put all our",
    "start": "292479",
    "end": "294759"
  },
  {
    "text": "parameters onto the stack we have called",
    "start": "294759",
    "end": "297120"
  },
  {
    "text": "Malik with the number eight and now we",
    "start": "297120",
    "end": "298880"
  },
  {
    "text": "have stored it so we have a pointer to",
    "start": "298880",
    "end": "300600"
  },
  {
    "text": "put our answers into now what we're",
    "start": "300600",
    "end": "302280"
  },
  {
    "text": "going to do is we're going to create a",
    "start": "302280",
    "end": "303440"
  },
  {
    "text": "label that represents the beginning of",
    "start": "303440",
    "end": "305280"
  },
  {
    "text": "our Loop so we're going to have two",
    "start": "305280",
    "end": "307160"
  },
  {
    "text": "counters right if you think of this in",
    "start": "307160",
    "end": "308479"
  },
  {
    "text": "like a for Loop example we're going to",
    "start": "308479",
    "end": "310199"
  },
  {
    "text": "have I and we're going to have I I so",
    "start": "310199",
    "end": "312440"
  },
  {
    "text": "the first one we're going to",
    "start": "312440",
    "end": "314240"
  },
  {
    "text": "store I in the R8 variable so we're",
    "start": "314240",
    "end": "317680"
  },
  {
    "text": "going to set it to zero to start and if",
    "start": "317680",
    "end": "319360"
  },
  {
    "text": "you think about this like a for Loop 4 I",
    "start": "319360",
    "end": "321720"
  },
  {
    "text": "equals z we're setting it to zero right",
    "start": "321720",
    "end": "324199"
  },
  {
    "text": "here now we're going to create a label",
    "start": "324199",
    "end": "326880"
  },
  {
    "text": "called outer loop which is going to",
    "start": "326880",
    "end": "329759"
  },
  {
    "text": "represent you have to do this in inline",
    "start": "329759",
    "end": "331280"
  },
  {
    "text": "assembly the little percent equals thing",
    "start": "331280",
    "end": "332759"
  },
  {
    "text": "and I have to actually set up the inline",
    "start": "332759",
    "end": "334600"
  },
  {
    "text": "to be uh templat with these colons here",
    "start": "334600",
    "end": "337360"
  },
  {
    "text": "but now we have a label that we can jump",
    "start": "337360",
    "end": "339120"
  },
  {
    "text": "back to when we get to the end of our",
    "start": "339120",
    "end": "340680"
  },
  {
    "text": "for Loop so we are going to iterate over",
    "start": "340680",
    "end": "344240"
  },
  {
    "text": "the list of integers we're going to",
    "start": "344240",
    "end": "345919"
  },
  {
    "text": "start at outer loop so this is I now",
    "start": "345919",
    "end": "348199"
  },
  {
    "text": "we're going to create another counter",
    "start": "348199",
    "end": "350680"
  },
  {
    "text": "called I I so if you're thinking about",
    "start": "350680",
    "end": "352479"
  },
  {
    "text": "two nested for Loops R8 is I and then",
    "start": "352479",
    "end": "355680"
  },
  {
    "text": "another for loop on the inside in i i",
    "start": "355680",
    "end": "358000"
  },
  {
    "text": "equals zero that's all we're doing right",
    "start": "358000",
    "end": "359440"
  },
  {
    "text": "here and then we're going to say we have",
    "start": "359440",
    "end": "360759"
  },
  {
    "text": "another label called inner loop now what",
    "start": "360759",
    "end": "364199"
  },
  {
    "text": "we have to do is index into the nums",
    "start": "364199",
    "end": "367680"
  },
  {
    "text": "list remember we are given a list of",
    "start": "367680",
    "end": "369280"
  },
  {
    "text": "integers we have to index into this list",
    "start": "369280",
    "end": "372000"
  },
  {
    "text": "and read out a number and then add them",
    "start": "372000",
    "end": "375160"
  },
  {
    "text": "up together so we are going to take the",
    "start": "375160",
    "end": "378400"
  },
  {
    "text": "first argument which is going to be RDI",
    "start": "378400",
    "end": "380639"
  },
  {
    "text": "which now lives at this",
    "start": "380639",
    "end": "382360"
  },
  {
    "text": "location so what we're going to do is",
    "start": "382360",
    "end": "384639"
  },
  {
    "text": "we're going to say move into RBX the",
    "start": "384639",
    "end": "388479"
  },
  {
    "text": "value here so that's going to get us the",
    "start": "388479",
    "end": "390680"
  },
  {
    "text": "pointer into our numbers and now what we",
    "start": "390680",
    "end": "393080"
  },
  {
    "text": "have to do is the math that says that",
    "start": "393080",
    "end": "395400"
  },
  {
    "text": "pointer indexed by I so how do we do",
    "start": "395400",
    "end": "398680"
  },
  {
    "text": "that well the way we do that is we do",
    "start": "398680",
    "end": "400319"
  },
  {
    "text": "load the effective address of RBX and",
    "start": "400319",
    "end": "404039"
  },
  {
    "text": "we're going to put into it the value RBX",
    "start": "404039",
    "end": "406960"
  },
  {
    "text": "+ R8 *",
    "start": "406960",
    "end": "409759"
  },
  {
    "text": "4 okay because What's Happening Here is",
    "start": "409759",
    "end": "412720"
  },
  {
    "text": "this is I and then we have to multiply I",
    "start": "412720",
    "end": "415240"
  },
  {
    "text": "by the size of an integer so four and",
    "start": "415240",
    "end": "417639"
  },
  {
    "text": "then also we have to create a place that",
    "start": "417639",
    "end": "419000"
  },
  {
    "text": "we're going to do this addition right",
    "start": "419000",
    "end": "420160"
  },
  {
    "text": "cuz the whole point of this is we are",
    "start": "420160",
    "end": "421520"
  },
  {
    "text": "going to add these numbers together so",
    "start": "421520",
    "end": "423639"
  },
  {
    "text": "we're going to clear out RX to do this",
    "start": "423639",
    "end": "426160"
  },
  {
    "text": "math so we're going to say load the",
    "start": "426160",
    "end": "427720"
  },
  {
    "text": "effective address of RBX we're going to",
    "start": "427720",
    "end": "430400"
  },
  {
    "text": "make it the value RBX plus ra * 4 so",
    "start": "430400",
    "end": "433039"
  },
  {
    "text": "we're looking at the value I and then",
    "start": "433039",
    "end": "436000"
  },
  {
    "text": "we're going to say add into Rax the",
    "start": "436000",
    "end": "439560"
  },
  {
    "text": "dword pointer because again integers are",
    "start": "439560",
    "end": "441919"
  },
  {
    "text": "a dword type at uh RBX remember to say",
    "start": "441919",
    "end": "446960"
  },
  {
    "text": "that RBX points to a 4 byte type we're",
    "start": "446960",
    "end": "448960"
  },
  {
    "text": "going to add into Rax and we can",
    "start": "448960",
    "end": "450720"
  },
  {
    "text": "actually just copy and paste this",
    "start": "450720",
    "end": "452680"
  },
  {
    "text": "code and then do R9 * 4 pretty simple",
    "start": "452680",
    "end": "456639"
  },
  {
    "text": "there we go so we've done the nums of I",
    "start": "456639",
    "end": "460720"
  },
  {
    "text": "nums of I I we've added them together",
    "start": "460720",
    "end": "464080"
  },
  {
    "text": "and now what we have to do is compare",
    "start": "464080",
    "end": "466520"
  },
  {
    "text": "that the addition value to the correct",
    "start": "466520",
    "end": "470240"
  },
  {
    "text": "Target remember because we have to see",
    "start": "470240",
    "end": "471599"
  },
  {
    "text": "does that number add up to equal Target",
    "start": "471599",
    "end": "473720"
  },
  {
    "text": "okay so we're going to take this value",
    "start": "473720",
    "end": "476039"
  },
  {
    "text": "here 20 which is where Target is stored",
    "start": "476039",
    "end": "478400"
  },
  {
    "text": "and we're going to load that into RBX so",
    "start": "478400",
    "end": "480520"
  },
  {
    "text": "move into",
    "start": "480520",
    "end": "482120"
  },
  {
    "text": "RBX I made a mistake and I said that um",
    "start": "482120",
    "end": "485560"
  },
  {
    "text": "we are going to point to a quadw at this",
    "start": "485560",
    "end": "488120"
  },
  {
    "text": "location well actually the int type is a",
    "start": "488120",
    "end": "491960"
  },
  {
    "text": "dword so we're going to say dword",
    "start": "491960",
    "end": "493400"
  },
  {
    "text": "pointer instead of RSI it's going to be",
    "start": "493400",
    "end": "495120"
  },
  {
    "text": "ESI and edx so R is the 64-bit Type e is",
    "start": "495120",
    "end": "499919"
  },
  {
    "text": "the 32-bit type so we just fix that real",
    "start": "499919",
    "end": "501960"
  },
  {
    "text": "quick and we're going to say move into",
    "start": "501960",
    "end": "505520"
  },
  {
    "text": "ebx the dword pointer at this location",
    "start": "505520",
    "end": "509240"
  },
  {
    "text": "and then we're going to compare ebx to",
    "start": "509240",
    "end": "511880"
  },
  {
    "text": "eax and if they are not equal which",
    "start": "511880",
    "end": "514839"
  },
  {
    "text": "means we did not find the answer we're",
    "start": "514839",
    "end": "516320"
  },
  {
    "text": "going to go to the continue label",
    "start": "516320",
    "end": "518320"
  },
  {
    "text": "meaning we did not find the an so we",
    "start": "518320",
    "end": "519919"
  },
  {
    "text": "have to set up and continue through our",
    "start": "519919",
    "end": "521440"
  },
  {
    "text": "for Loops right and we'll make that",
    "start": "521440",
    "end": "523200"
  },
  {
    "text": "label real quick and we'll uh get the",
    "start": "523200",
    "end": "526120"
  },
  {
    "text": "loop to operate so if we did not find",
    "start": "526120",
    "end": "528519"
  },
  {
    "text": "the answer we need to do two things we",
    "start": "528519",
    "end": "530440"
  },
  {
    "text": "need to increment our R9 counter compare",
    "start": "530440",
    "end": "533080"
  },
  {
    "text": "it to the targets length if it's done",
    "start": "533080",
    "end": "535480"
  },
  {
    "text": "increment the R8 counter so we'll say uh",
    "start": "535480",
    "end": "538920"
  },
  {
    "text": "increment",
    "start": "538920",
    "end": "540640"
  },
  {
    "text": "R9 and then we will say compare R9 to",
    "start": "540640",
    "end": "545959"
  },
  {
    "text": "the number size right because that's",
    "start": "545959",
    "end": "548360"
  },
  {
    "text": "going to be the end of our for loop",
    "start": "548360",
    "end": "549800"
  },
  {
    "text": "we're iterating over the list we're",
    "start": "549800",
    "end": "551440"
  },
  {
    "text": "going to compare it to the dword pointer",
    "start": "551440",
    "end": "553240"
  },
  {
    "text": "at this",
    "start": "553240",
    "end": "554839"
  },
  {
    "text": "location and if it's less than that",
    "start": "554839",
    "end": "558000"
  },
  {
    "text": "value we're going to jump to the inner",
    "start": "558000",
    "end": "560680"
  },
  {
    "text": "loop label because that means that we're",
    "start": "560680",
    "end": "561880"
  },
  {
    "text": "done with our we we need to go back and",
    "start": "561880",
    "end": "563399"
  },
  {
    "text": "do our Loop and then we can take that",
    "start": "563399",
    "end": "565600"
  },
  {
    "text": "same",
    "start": "565600",
    "end": "566720"
  },
  {
    "text": "logic and just apply it to the r eight",
    "start": "566720",
    "end": "569720"
  },
  {
    "text": "variable because this is our our outer",
    "start": "569720",
    "end": "571360"
  },
  {
    "text": "loop counter our I I or just our I value",
    "start": "571360",
    "end": "574440"
  },
  {
    "text": "we're going to move our comment cuz our",
    "start": "574440",
    "end": "576600"
  },
  {
    "text": "comment's in the wrong location so we",
    "start": "576600",
    "end": "579399"
  },
  {
    "text": "basically said here compare the two",
    "start": "579399",
    "end": "580959"
  },
  {
    "text": "values if they're not the same continue",
    "start": "580959",
    "end": "583240"
  },
  {
    "text": "our Loop so this area is where the logic",
    "start": "583240",
    "end": "585040"
  },
  {
    "text": "is going to be for when the numbers are",
    "start": "585040",
    "end": "586839"
  },
  {
    "text": "the same and we've properly added them",
    "start": "586839",
    "end": "588839"
  },
  {
    "text": "together if they are the same we have to",
    "start": "588839",
    "end": "590880"
  },
  {
    "text": "do two things first we have to store to",
    "start": "590880",
    "end": "594519"
  },
  {
    "text": "the return size pointer the number two",
    "start": "594519",
    "end": "598079"
  },
  {
    "text": "right because that's going to tell the",
    "start": "598079",
    "end": "599399"
  },
  {
    "text": "program hey I have two answers for you",
    "start": "599399",
    "end": "601440"
  },
  {
    "text": "that's how it knows to look at our",
    "start": "601440",
    "end": "602720"
  },
  {
    "text": "answer and then also we need to store",
    "start": "602720",
    "end": "605079"
  },
  {
    "text": "into our return array the indices to",
    "start": "605079",
    "end": "610279"
  },
  {
    "text": "those numbers and again what are those",
    "start": "610279",
    "end": "611519"
  },
  {
    "text": "indices it's just R8 and R9 so let's do",
    "start": "611519",
    "end": "614519"
  },
  {
    "text": "that real quick first we are going to uh",
    "start": "614519",
    "end": "616839"
  },
  {
    "text": "take our return address and we're going",
    "start": "616839",
    "end": "619279"
  },
  {
    "text": "to move that into Rex and then we're",
    "start": "619279",
    "end": "620959"
  },
  {
    "text": "going to say uh we're going to move into",
    "start": "620959",
    "end": "623880"
  },
  {
    "text": "the dword pointer of rxs the value R8",
    "start": "623880",
    "end": "630360"
  },
  {
    "text": "and again D is the dword the lower half",
    "start": "630360",
    "end": "632800"
  },
  {
    "text": "R8 and then we could say load the",
    "start": "632800",
    "end": "635040"
  },
  {
    "text": "effective address into rxs the address",
    "start": "635040",
    "end": "637920"
  },
  {
    "text": "RX plus 4 because that's going to be the",
    "start": "637920",
    "end": "639440"
  },
  {
    "text": "next integer over and again there's only",
    "start": "639440",
    "end": "641079"
  },
  {
    "text": "ever two answers and we're going to move",
    "start": "641079",
    "end": "643200"
  },
  {
    "text": "into that",
    "start": "643200",
    "end": "644320"
  },
  {
    "text": "location r9d that's going to be the",
    "start": "644320",
    "end": "647399"
  },
  {
    "text": "second index so it's going to be I I so",
    "start": "647399",
    "end": "650040"
  },
  {
    "text": "once we've done that now we have to do",
    "start": "650040",
    "end": "651720"
  },
  {
    "text": "the final part and store the return size",
    "start": "651720",
    "end": "656000"
  },
  {
    "text": "to the right value so all we have to do",
    "start": "656000",
    "end": "657720"
  },
  {
    "text": "here is take this",
    "start": "657720",
    "end": "660880"
  },
  {
    "text": "so we're going to get move into Rax the",
    "start": "660880",
    "end": "663040"
  },
  {
    "text": "quad word pointer at this location and",
    "start": "663040",
    "end": "664880"
  },
  {
    "text": "then we're going to say move into the",
    "start": "664880",
    "end": "667279"
  },
  {
    "text": "dword pointer at RX hex value two so",
    "start": "667279",
    "end": "671040"
  },
  {
    "text": "this means treat this pointer as a dword",
    "start": "671040",
    "end": "673519"
  },
  {
    "text": "pointer and put the number two there and",
    "start": "673519",
    "end": "674720"
  },
  {
    "text": "that's it uh cool and then so once we've",
    "start": "674720",
    "end": "677200"
  },
  {
    "text": "gotten to this point it means we've",
    "start": "677200",
    "end": "678399"
  },
  {
    "text": "we've solved our problem we need to go",
    "start": "678399",
    "end": "679639"
  },
  {
    "text": "to the label called leave so we we will",
    "start": "679639",
    "end": "681760"
  },
  {
    "text": "always jump to the leave label when we",
    "start": "681760",
    "end": "684680"
  },
  {
    "text": "found the correct answer so we'll take",
    "start": "684680",
    "end": "687320"
  },
  {
    "text": "that and we'll make our leave label here",
    "start": "687320",
    "end": "690000"
  },
  {
    "text": "where we clean up the stack and leave so",
    "start": "690000",
    "end": "691560"
  },
  {
    "text": "at the leave label we have to do a few",
    "start": "691560",
    "end": "692959"
  },
  {
    "text": "things one we have to make sure that we",
    "start": "692959",
    "end": "695440"
  },
  {
    "text": "put our answer into RX Rax is going to",
    "start": "695440",
    "end": "698560"
  },
  {
    "text": "have the return value of the uh the",
    "start": "698560",
    "end": "701519"
  },
  {
    "text": "function and then we need to just add",
    "start": "701519",
    "end": "703680"
  },
  {
    "text": "clean up our stack so we add to RSP hex",
    "start": "703680",
    "end": "706279"
  },
  {
    "text": "40 and then we pop rvx and return so",
    "start": "706279",
    "end": "709200"
  },
  {
    "text": "let's walk through this program real",
    "start": "709200",
    "end": "710839"
  },
  {
    "text": "quick and make sure that we have a sane",
    "start": "710839",
    "end": "712800"
  },
  {
    "text": "answer what are we doing we create a",
    "start": "712800",
    "end": "714320"
  },
  {
    "text": "stack we push RBX which is a nonvolatile",
    "start": "714320",
    "end": "716680"
  },
  {
    "text": "register onto the stack we make some",
    "start": "716680",
    "end": "718519"
  },
  {
    "text": "stack space we store all of our",
    "start": "718519",
    "end": "720360"
  },
  {
    "text": "parameters onto the stack boom okay we",
    "start": "720360",
    "end": "722440"
  },
  {
    "text": "Malo memory for our answer by putting",
    "start": "722440",
    "end": "724120"
  },
  {
    "text": "eight into RDI and calling Malik we're",
    "start": "724120",
    "end": "726120"
  },
  {
    "text": "going to move that return address onto",
    "start": "726120",
    "end": "728079"
  },
  {
    "text": "the stack to preserve it we're going to",
    "start": "728079",
    "end": "729720"
  },
  {
    "text": "create two for Loops that are going to",
    "start": "729720",
    "end": "731480"
  },
  {
    "text": "be the counters I in R8 and I I in",
    "start": "731480",
    "end": "735680"
  },
  {
    "text": "R9 and then for that Loop for both of",
    "start": "735680",
    "end": "738680"
  },
  {
    "text": "those we're going to take the pointer to",
    "start": "738680",
    "end": "740399"
  },
  {
    "text": "our targets and we are going to add the",
    "start": "740399",
    "end": "744040"
  },
  {
    "text": "array offset by I to the array offset by",
    "start": "744040",
    "end": "747880"
  },
  {
    "text": "I I and add them together and compare",
    "start": "747880",
    "end": "750959"
  },
  {
    "text": "that value to our Target value in ebx if",
    "start": "750959",
    "end": "754079"
  },
  {
    "text": "they are the same we are going to take",
    "start": "754079",
    "end": "757959"
  },
  {
    "text": "our return array and we're going to",
    "start": "757959",
    "end": "761440"
  },
  {
    "text": "store the indices I and I I",
    "start": "761440",
    "end": "765560"
  },
  {
    "text": "into them at the index zero and one so",
    "start": "765560",
    "end": "770720"
  },
  {
    "text": "plus four because it's an in size and",
    "start": "770720",
    "end": "772560"
  },
  {
    "text": "then we will take the return size array",
    "start": "772560",
    "end": "775519"
  },
  {
    "text": "and we will store the number two there",
    "start": "775519",
    "end": "776720"
  },
  {
    "text": "and we will leave and by leaving we will",
    "start": "776720",
    "end": "779199"
  },
  {
    "text": "simply put the return pointer into racks",
    "start": "779199",
    "end": "781720"
  },
  {
    "text": "and clean up the stack if we didn't get",
    "start": "781720",
    "end": "783399"
  },
  {
    "text": "the answer we will continue by",
    "start": "783399",
    "end": "784639"
  },
  {
    "text": "incrementing i incrementing i i and then",
    "start": "784639",
    "end": "787639"
  },
  {
    "text": "jumping around so let's give this a run",
    "start": "787639",
    "end": "789399"
  },
  {
    "text": "and see if we get any compiler errors or",
    "start": "789399",
    "end": "791040"
  },
  {
    "text": "anything like that okay we got a couple",
    "start": "791040",
    "end": "792399"
  },
  {
    "text": "issues here so this is probably an",
    "start": "792399",
    "end": "793680"
  },
  {
    "text": "indication that I'm missing colon slash",
    "start": "793680",
    "end": "795800"
  },
  {
    "text": "let's see what we got and here always",
    "start": "795800",
    "end": "798160"
  },
  {
    "text": "one oh so here it didn't like that we",
    "start": "798160",
    "end": "801079"
  },
  {
    "text": "use the dword and the rxs together so we",
    "start": "801079",
    "end": "802880"
  },
  {
    "text": "have to fix those and then same thing",
    "start": "802880",
    "end": "804880"
  },
  {
    "text": "with R9 and R8 so we'll do dword dword",
    "start": "804880",
    "end": "808519"
  },
  {
    "text": "R8 R8 right compare yeah so R9",
    "start": "808519",
    "end": "812240"
  },
  {
    "text": "R9 DD and then we're missing it doesn't",
    "start": "812240",
    "end": "815480"
  },
  {
    "text": "like the oh we have to do a colon here",
    "start": "815480",
    "end": "818800"
  },
  {
    "text": "instead of the uh semicolon and then",
    "start": "818800",
    "end": "822160"
  },
  {
    "text": "same with the inner and outer loop so we",
    "start": "822160",
    "end": "823560"
  },
  {
    "text": "have to Define these like this and like",
    "start": "823560",
    "end": "826160"
  },
  {
    "text": "this all right couple couple errors",
    "start": "826160",
    "end": "827480"
  },
  {
    "text": "nothing too big so we actually passed",
    "start": "827480",
    "end": "829240"
  },
  {
    "text": "one of the test cases which is Prett",
    "start": "829240",
    "end": "830519"
  },
  {
    "text": "pretty cool got the wrong answer for",
    "start": "830519",
    "end": "832560"
  },
  {
    "text": "test case 2 it output 0 0 why is that oh",
    "start": "832560",
    "end": "836560"
  },
  {
    "text": "because it iterated over three and then",
    "start": "836560",
    "end": "838680"
  },
  {
    "text": "did again so the issue is it's not going",
    "start": "838680",
    "end": "840759"
  },
  {
    "text": "to be um I equal 0 I I equal I it'll be",
    "start": "840759",
    "end": "845720"
  },
  {
    "text": "uh actually move into R9 R8 and then we",
    "start": "845720",
    "end": "851040"
  },
  {
    "text": "need to do add to R9 the value one",
    "start": "851040",
    "end": "854000"
  },
  {
    "text": "because it's going to be we start with",
    "start": "854000",
    "end": "855720"
  },
  {
    "text": "the left and then the right is going to",
    "start": "855720",
    "end": "857680"
  },
  {
    "text": "be left plus one so we don't do left and",
    "start": "857680",
    "end": "859279"
  },
  {
    "text": "left at the same time so this is going",
    "start": "859279",
    "end": "860480"
  },
  {
    "text": "to create I I to be correct test case t",
    "start": "860480",
    "end": "863600"
  },
  {
    "text": "g us the wrong answers interesting so",
    "start": "863600",
    "end": "866519"
  },
  {
    "text": "let's see why is this wrong",
    "start": "866519",
    "end": "869759"
  },
  {
    "text": "oh it's not jump less than it's jump",
    "start": "869759",
    "end": "871320"
  },
  {
    "text": "less than or equal to because we're",
    "start": "871320",
    "end": "872759"
  },
  {
    "text": "we're not getting to the end here that's",
    "start": "872759",
    "end": "874519"
  },
  {
    "text": "the issue there test case two still not",
    "start": "874519",
    "end": "876519"
  },
  {
    "text": "doing it oh I didn't I have to uh reload",
    "start": "876519",
    "end": "881120"
  },
  {
    "text": "RBX because if I don't do that it'll",
    "start": "881120",
    "end": "882880"
  },
  {
    "text": " up the like I'm I'm essentially",
    "start": "882880",
    "end": "884680"
  },
  {
    "text": "adding eye to it twice right so I have",
    "start": "884680",
    "end": "886360"
  },
  {
    "text": "to do this let's try it again cool okay",
    "start": "886360",
    "end": "889160"
  },
  {
    "text": "so we got all three test cases right",
    "start": "889160",
    "end": "890880"
  },
  {
    "text": "very exciting let's see if we can't",
    "start": "890880",
    "end": "892399"
  },
  {
    "text": "submit this and get all the answers",
    "start": "892399",
    "end": "894480"
  },
  {
    "text": "right here we go ready drum roll please",
    "start": "894480",
    "end": "899079"
  },
  {
    "text": "boom and doing the N squared solution we",
    "start": "902360",
    "end": "905360"
  },
  {
    "text": "are still beating",
    "start": "905360",
    "end": "907600"
  },
  {
    "text": "90.9% of the run times guys I hope you",
    "start": "907600",
    "end": "910759"
  },
  {
    "text": "enjoyed that I hope you learned a little",
    "start": "910759",
    "end": "911920"
  },
  {
    "text": "something about assembly uh and if you",
    "start": "911920",
    "end": "913519"
  },
  {
    "text": "like that video hit like hit subscribe",
    "start": "913519",
    "end": "915800"
  },
  {
    "text": "and we'll see you in the next Elite code",
    "start": "915800",
    "end": "917519"
  },
  {
    "text": "challenge take care",
    "start": "917519",
    "end": "921320"
  }
]