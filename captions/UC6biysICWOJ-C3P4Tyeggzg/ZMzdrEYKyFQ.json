[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "if you've coded in C for a minute you've",
    "start": "160",
    "end": "1839"
  },
  {
    "text": "probably used all the features of the",
    "start": "1839",
    "end": "3320"
  },
  {
    "text": "language you've probably made some",
    "start": "3320",
    "end": "5080"
  },
  {
    "text": "structures written some functions you",
    "start": "5080",
    "end": "6720"
  },
  {
    "text": "maybe even have used the C pre-processor",
    "start": "6720",
    "end": "9120"
  },
  {
    "text": "but one feature of the C language that",
    "start": "9120",
    "end": "11240"
  },
  {
    "text": "gets a lot less attention is kind of a",
    "start": "11240",
    "end": "13799"
  },
  {
    "text": "weird one today we're talking about",
    "start": "13799",
    "end": "15120"
  },
  {
    "text": "unions a lesser known feature of the C",
    "start": "15120",
    "end": "17760"
  },
  {
    "text": "language with some interesting",
    "start": "17760",
    "end": "19439"
  },
  {
    "text": "properties we'll talk about what the",
    "start": "19439",
    "end": "20880"
  },
  {
    "text": "union type does how it's used in memory",
    "start": "20880",
    "end": "23840"
  },
  {
    "text": "and three examples of how to use them",
    "start": "23840",
    "end": "26640"
  },
  {
    "text": "let's Dive Right In Here I have some C",
    "start": "26640",
    "end": "28279"
  },
  {
    "start": "27000",
    "end": "138000"
  },
  {
    "text": "code written out and you'll notice up",
    "start": "28279",
    "end": "29679"
  },
  {
    "text": "top a familiar C feature the structure a",
    "start": "29679",
    "end": "32640"
  },
  {
    "text": "structure is just a way in C to",
    "start": "32640",
    "end": "34399"
  },
  {
    "text": "logically organize variables in a way",
    "start": "34399",
    "end": "36879"
  },
  {
    "text": "that makes sense in your program so my",
    "start": "36879",
    "end": "38960"
  },
  {
    "text": "structure may need to have an INT and a",
    "start": "38960",
    "end": "41520"
  },
  {
    "text": "float and then some character array a",
    "start": "41520",
    "end": "43760"
  },
  {
    "text": "string of 16 bytes of characters now the",
    "start": "43760",
    "end": "47280"
  },
  {
    "text": "struct in memory what this will do is",
    "start": "47280",
    "end": "49000"
  },
  {
    "text": "this will actually allocate on the stack",
    "start": "49000",
    "end": "50719"
  },
  {
    "text": "or the Heap or wherever we use the",
    "start": "50719",
    "end": "52039"
  },
  {
    "text": "structure the sum of the size of all",
    "start": "52039",
    "end": "54719"
  },
  {
    "text": "these elements so an INT being 4 bytes a",
    "start": "54719",
    "end": "57320"
  },
  {
    "text": "float being 4 bytes and the string being",
    "start": "57320",
    "end": "59320"
  },
  {
    "text": "16 Byes this will allocate 24 bytes of",
    "start": "59320",
    "end": "62760"
  },
  {
    "text": "memory now this makes sense because we",
    "start": "62760",
    "end": "64198"
  },
  {
    "text": "want to have access to all of the",
    "start": "64199",
    "end": "65880"
  },
  {
    "text": "different elements of the structure so",
    "start": "65880",
    "end": "67720"
  },
  {
    "text": "we're going to have room for every",
    "start": "67720",
    "end": "69159"
  },
  {
    "text": "single element here is the new thing",
    "start": "69159",
    "end": "71080"
  },
  {
    "text": "we're talking about the union and the",
    "start": "71080",
    "end": "73000"
  },
  {
    "text": "union is a little more interesting when",
    "start": "73000",
    "end": "75119"
  },
  {
    "text": "you have a union with different types",
    "start": "75119",
    "end": "77040"
  },
  {
    "text": "inside of it instead of allocating room",
    "start": "77040",
    "end": "79759"
  },
  {
    "text": "for every element that's inside the",
    "start": "79759",
    "end": "82159"
  },
  {
    "text": "union the union will only allocate",
    "start": "82159",
    "end": "84920"
  },
  {
    "text": "enough memory for the largest element",
    "start": "84920",
    "end": "87880"
  },
  {
    "text": "all of the elements inside of the Union",
    "start": "87880",
    "end": "89960"
  },
  {
    "text": "lay on top of each other and share the",
    "start": "89960",
    "end": "92600"
  },
  {
    "text": "same memory space and this is going to",
    "start": "92600",
    "end": "94439"
  },
  {
    "text": "be reflected by printing the size of all",
    "start": "94439",
    "end": "96399"
  },
  {
    "text": "of our structures here in our code we",
    "start": "96399",
    "end": "98200"
  },
  {
    "text": "print the size of our Union my onion",
    "start": "98200",
    "end": "100560"
  },
  {
    "text": "onion and my structure stred and by",
    "start": "100560",
    "end": "102840"
  },
  {
    "text": "printing these out we can see that the",
    "start": "102840",
    "end": "104880"
  },
  {
    "text": "size of our Union is 16 bytes and the",
    "start": "104880",
    "end": "107159"
  },
  {
    "text": "size of our structure is the previously",
    "start": "107159",
    "end": "108799"
  },
  {
    "text": "reported 24 bytes now what makes the",
    "start": "108799",
    "end": "111000"
  },
  {
    "text": "union so interesting is that all of the",
    "start": "111000",
    "end": "112920"
  },
  {
    "text": "elements in the union share the same",
    "start": "112920",
    "end": "115079"
  },
  {
    "text": "memory space so here for example I'm",
    "start": "115079",
    "end": "117320"
  },
  {
    "text": "stir copying the string hello world into",
    "start": "117320",
    "end": "119840"
  },
  {
    "text": "to the buffer that's allocated in the",
    "start": "119840",
    "end": "121560"
  },
  {
    "text": "union for the 16 by string I'm then able",
    "start": "121560",
    "end": "124960"
  },
  {
    "text": "to print out the float of the Union",
    "start": "124960",
    "end": "127920"
  },
  {
    "text": "which means that it'll try to represent",
    "start": "127920",
    "end": "129800"
  },
  {
    "text": "the string hello world as a float type",
    "start": "129800",
    "end": "132640"
  },
  {
    "text": "and we can see the float representation",
    "start": "132640",
    "end": "134720"
  },
  {
    "text": "of that string which is this crazy long",
    "start": "134720",
    "end": "137480"
  },
  {
    "text": "number here okay so you're probably",
    "start": "137480",
    "end": "139560"
  },
  {
    "start": "138000",
    "end": "178000"
  },
  {
    "text": "wondering what is the practical",
    "start": "139560",
    "end": "141120"
  },
  {
    "text": "application of the Union right like why",
    "start": "141120",
    "end": "142879"
  },
  {
    "text": "even have this type in C what does this",
    "start": "142879",
    "end": "145200"
  },
  {
    "text": "do for us well the first example is it",
    "start": "145200",
    "end": "147560"
  },
  {
    "text": "actually makes data conversions and",
    "start": "147560",
    "end": "149360"
  },
  {
    "text": "access to members within a structure",
    "start": "149360",
    "end": "151319"
  },
  {
    "text": "that have different data types very easy",
    "start": "151319",
    "end": "153560"
  },
  {
    "text": "so for example let's say here that I",
    "start": "153560",
    "end": "154959"
  },
  {
    "text": "have the ipv4 address structure which",
    "start": "154959",
    "end": "157640"
  },
  {
    "text": "can be represented as a union now if you",
    "start": "157640",
    "end": "159519"
  },
  {
    "text": "didn't know an ipv4 address is just four",
    "start": "159519",
    "end": "162680"
  },
  {
    "text": "bytes which can be accessed either as",
    "start": "162680",
    "end": "164840"
  },
  {
    "text": "four individual bytes or as the long 4",
    "start": "164840",
    "end": "168319"
  },
  {
    "text": "by version the word right so if we",
    "start": "168319",
    "end": "170440"
  },
  {
    "text": "wanted to set the address for example to",
    "start": "170440",
    "end": "173319"
  },
  {
    "text": "Local Host 127.0.0.1 we could do this in",
    "start": "173319",
    "end": "177560"
  },
  {
    "text": "two ways we could do the really painful",
    "start": "177560",
    "end": "179080"
  },
  {
    "start": "178000",
    "end": "209000"
  },
  {
    "text": "thing where we have 1 27 and then we",
    "start": "179080",
    "end": "180879"
  },
  {
    "text": "shift it over 24 bytes and then we make",
    "start": "180879",
    "end": "182879"
  },
  {
    "text": "the value equal to this or the current",
    "start": "182879",
    "end": "185879"
  },
  {
    "text": "value right and that that gets very",
    "start": "185879",
    "end": "187120"
  },
  {
    "text": "mathematically complicated and very kind",
    "start": "187120",
    "end": "188560"
  },
  {
    "text": "of hard to represent in code in a way",
    "start": "188560",
    "end": "190360"
  },
  {
    "text": "that's easy to read or we could use the",
    "start": "190360",
    "end": "192400"
  },
  {
    "text": "magic of unions and essentially just",
    "start": "192400",
    "end": "194560"
  },
  {
    "text": "overlay two different data types so by",
    "start": "194560",
    "end": "196720"
  },
  {
    "text": "doing this we can take the bytes",
    "start": "196720",
    "end": "199400"
  },
  {
    "text": "12701 put that into the address and then",
    "start": "199400",
    "end": "201920"
  },
  {
    "text": "when I print this as the actual long",
    "start": "201920",
    "end": "204080"
  },
  {
    "text": "form of the address in HEX we get the",
    "start": "204080",
    "end": "206239"
  },
  {
    "text": "normal representation of Local Host in",
    "start": "206239",
    "end": "208640"
  },
  {
    "text": "HEX the second example goes along that",
    "start": "208640",
    "end": "210360"
  },
  {
    "start": "209000",
    "end": "296000"
  },
  {
    "text": "same line of thinking where we overlay",
    "start": "210360",
    "end": "212319"
  },
  {
    "text": "two different structures that have the",
    "start": "212319",
    "end": "214439"
  },
  {
    "text": "same value but are represented in two",
    "start": "214439",
    "end": "216360"
  },
  {
    "text": "different ways in particular this has a",
    "start": "216360",
    "end": "218599"
  },
  {
    "text": "lot of power in the world of embedded",
    "start": "218599",
    "end": "220720"
  },
  {
    "text": "programming if you're not aware of how",
    "start": "220720",
    "end": "222280"
  },
  {
    "text": "embedded programming Works essentially",
    "start": "222280",
    "end": "224239"
  },
  {
    "text": "registers on a CPU live at an address",
    "start": "224239",
    "end": "227239"
  },
  {
    "text": "and when you set certain values in those",
    "start": "227239",
    "end": "229400"
  },
  {
    "text": "registers things on the chip physically",
    "start": "229400",
    "end": "231760"
  },
  {
    "text": "change so here for example we have a",
    "start": "231760",
    "end": "234079"
  },
  {
    "text": "hardware register that has an anonymous",
    "start": "234079",
    "end": "236360"
  },
  {
    "text": "structure inside of it by putting an",
    "start": "236360",
    "end": "238400"
  },
  {
    "text": "anonymous structure in inside of the",
    "start": "238400",
    "end": "240200"
  },
  {
    "text": "Union Ru will be allocated for all of",
    "start": "240200",
    "end": "242480"
  },
  {
    "text": "the values inside of the structure on",
    "start": "242480",
    "end": "244920"
  },
  {
    "text": "top of this integer value so here we can",
    "start": "244920",
    "end": "248200"
  },
  {
    "text": "set the register to you know this value",
    "start": "248200",
    "end": "250720"
  },
  {
    "text": "here but then we can actually go in and",
    "start": "250720",
    "end": "252519"
  },
  {
    "text": "pull out the individual parts of that",
    "start": "252519",
    "end": "254720"
  },
  {
    "text": "register that control different parts of",
    "start": "254720",
    "end": "256680"
  },
  {
    "text": "the CPU so here for example we have some",
    "start": "256680",
    "end": "258959"
  },
  {
    "text": "madeup gpio register that has different",
    "start": "258959",
    "end": "261440"
  },
  {
    "text": "properties like setting the control of",
    "start": "261440",
    "end": "263360"
  },
  {
    "text": "that register the direction of the data",
    "start": "263360",
    "end": "265240"
  },
  {
    "text": "if it's an input or an output the par",
    "start": "265240",
    "end": "267560"
  },
  {
    "text": "maybe it's even par or odd parity or if",
    "start": "267560",
    "end": "269800"
  },
  {
    "text": "it does or does not have start bits by",
    "start": "269800",
    "end": "271919"
  },
  {
    "text": "setting the register to some value we",
    "start": "271919",
    "end": "273639"
  },
  {
    "text": "then can use this to go in and",
    "start": "273639",
    "end": "275520"
  },
  {
    "text": "individually access and set and change",
    "start": "275520",
    "end": "278160"
  },
  {
    "text": "the parts of the register that control",
    "start": "278160",
    "end": "279880"
  },
  {
    "text": "specific parts of that peripheral before",
    "start": "279880",
    "end": "281880"
  },
  {
    "text": "we keep going I want to tell you guys",
    "start": "281880",
    "end": "283080"
  },
  {
    "text": "about low-level Academy a place where",
    "start": "283080",
    "end": "284800"
  },
  {
    "text": "I'm running courses to teach you more",
    "start": "284800",
    "end": "286520"
  },
  {
    "text": "about the C programming language and",
    "start": "286520",
    "end": "288520"
  },
  {
    "text": "others you can check it out at low",
    "start": "288520",
    "end": "290360"
  },
  {
    "text": "level. Academy and get 20% off a",
    "start": "290360",
    "end": "292720"
  },
  {
    "text": "lifetime subscription until the end of",
    "start": "292720",
    "end": "294520"
  },
  {
    "text": "the month we'll see you there maybe you",
    "start": "294520",
    "end": "296080"
  },
  {
    "start": "296000",
    "end": "492000"
  },
  {
    "text": "don't care about data conversion maybe",
    "start": "296080",
    "end": "297960"
  },
  {
    "text": "you're not an embedded programmer and",
    "start": "297960",
    "end": "299600"
  },
  {
    "text": "that's completely okay the last one that",
    "start": "299600",
    "end": "301759"
  },
  {
    "text": "unions can be used for which I think is",
    "start": "301759",
    "end": "303320"
  },
  {
    "text": "the most interesting and probably the",
    "start": "303320",
    "end": "305000"
  },
  {
    "text": "most practical example of a union is",
    "start": "305000",
    "end": "307240"
  },
  {
    "text": "this idea of polymorphism right so in C",
    "start": "307240",
    "end": "311080"
  },
  {
    "text": "right we don't have classes there are no",
    "start": "311080",
    "end": "313400"
  },
  {
    "text": "class types there really aren't any",
    "start": "313400",
    "end": "314880"
  },
  {
    "text": "additional types other than the basics",
    "start": "314880",
    "end": "316440"
  },
  {
    "text": "of like int care Etc and when we make up",
    "start": "316440",
    "end": "319000"
  },
  {
    "text": "types in C we're essentially just",
    "start": "319000",
    "end": "320560"
  },
  {
    "text": "concatenating all the Primitive types",
    "start": "320560",
    "end": "322240"
  },
  {
    "text": "like int care float and then naming them",
    "start": "322240",
    "end": "324440"
  },
  {
    "text": "something else like person address",
    "start": "324440",
    "end": "326919"
  },
  {
    "text": "Whatever by using a union we can do a a",
    "start": "326919",
    "end": "329560"
  },
  {
    "text": "little bit of polymorphism by having",
    "start": "329560",
    "end": "331639"
  },
  {
    "text": "variables that have three different",
    "start": "331639",
    "end": "333639"
  },
  {
    "text": "types in a structure at the same time",
    "start": "333639",
    "end": "336000"
  },
  {
    "text": "and then using an outer type tracker to",
    "start": "336000",
    "end": "338919"
  },
  {
    "text": "track which type is being used at any",
    "start": "338919",
    "end": "341319"
  },
  {
    "text": "given time we then can write functions",
    "start": "341319",
    "end": "343680"
  },
  {
    "text": "that will behave differently based on",
    "start": "343680",
    "end": "346120"
  },
  {
    "text": "the type of the structure at that time",
    "start": "346120",
    "end": "348600"
  },
  {
    "text": "so for example here I have defined a",
    "start": "348600",
    "end": "350800"
  },
  {
    "text": "Json type right maybe we're making a",
    "start": "350800",
    "end": "352560"
  },
  {
    "text": "Json parser and the enum says that there",
    "start": "352560",
    "end": "355160"
  },
  {
    "text": "can be three types inside of our",
    "start": "355160",
    "end": "356880"
  },
  {
    "text": "structure there could be a string a bite",
    "start": "356880",
    "end": "358880"
  },
  {
    "text": "or an INT we have that Json type inside",
    "start": "358880",
    "end": "361720"
  },
  {
    "text": "of our structure that is used to track",
    "start": "361720",
    "end": "363840"
  },
  {
    "text": "what version of the Union is being used",
    "start": "363840",
    "end": "366199"
  },
  {
    "text": "at any given time and then inside of",
    "start": "366199",
    "end": "367919"
  },
  {
    "text": "that Union we have those three types we",
    "start": "367919",
    "end": "369720"
  },
  {
    "text": "have it could be a string it could be an",
    "start": "369720",
    "end": "371840"
  },
  {
    "text": "individual bite or it could be a number",
    "start": "371840",
    "end": "374479"
  },
  {
    "text": "and that whole thing the structure with",
    "start": "374479",
    "end": "376280"
  },
  {
    "text": "the union inside of it is called the",
    "start": "376280",
    "end": "378479"
  },
  {
    "text": "Json T and just so you know a little",
    "start": "378479",
    "end": "380520"
  },
  {
    "text": "quick check on learning right the size",
    "start": "380520",
    "end": "382280"
  },
  {
    "text": "of this structure will be the size of",
    "start": "382280",
    "end": "384680"
  },
  {
    "text": "the type which is one single bite plus",
    "start": "384680",
    "end": "388160"
  },
  {
    "text": "the maximum size of the Union which is",
    "start": "388160",
    "end": "390520"
  },
  {
    "text": "going to be the size of the string here",
    "start": "390520",
    "end": "392000"
  },
  {
    "text": "that's the biggest type which will be 64",
    "start": "392000",
    "end": "393599"
  },
  {
    "text": "bytes so this structure will be around",
    "start": "393599",
    "end": "395840"
  },
  {
    "text": "68 bytes not accounting for padding or",
    "start": "395840",
    "end": "398080"
  },
  {
    "text": "optimization or anything like that now",
    "start": "398080",
    "end": "399639"
  },
  {
    "text": "when we want to use this Json type what",
    "start": "399639",
    "end": "401360"
  },
  {
    "text": "we're going to do is we're going to",
    "start": "401360",
    "end": "402240"
  },
  {
    "text": "check the type tracked inside of the",
    "start": "402240",
    "end": "404479"
  },
  {
    "text": "structure and then handle it accordingly",
    "start": "404479",
    "end": "406479"
  },
  {
    "text": "so if it's being tracked as a Json",
    "start": "406479",
    "end": "408120"
  },
  {
    "text": "string we're going to print out the",
    "start": "408120",
    "end": "409440"
  },
  {
    "text": "string using percent s if it's a Json",
    "start": "409440",
    "end": "412240"
  },
  {
    "text": "bite we're going to print that bite",
    "start": "412240",
    "end": "413599"
  },
  {
    "text": "alone using percent C if it's ajon on",
    "start": "413599",
    "end": "415919"
  },
  {
    "text": "int we're going to print it using",
    "start": "415919",
    "end": "417080"
  },
  {
    "text": "percent D Now by doing this we can make",
    "start": "417080",
    "end": "419800"
  },
  {
    "text": "this type a basic structure in C",
    "start": "419800",
    "end": "422360"
  },
  {
    "text": "polymorphic we could say this type is a",
    "start": "422360",
    "end": "424280"
  },
  {
    "text": "Json int and set the number and by",
    "start": "424280",
    "end": "426400"
  },
  {
    "text": "printing it using my special print Json",
    "start": "426400",
    "end": "428879"
  },
  {
    "text": "function it'll treat it almost like a",
    "start": "428879",
    "end": "431160"
  },
  {
    "text": "polymorphic class in C++ but using a lot",
    "start": "431160",
    "end": "434319"
  },
  {
    "text": "less overhead than the class internals",
    "start": "434319",
    "end": "436120"
  },
  {
    "text": "do in C++ let's try it out right now",
    "start": "436120",
    "end": "438520"
  },
  {
    "text": "there we go 42 there are some dangers in",
    "start": "438520",
    "end": "440800"
  },
  {
    "text": "this obviously because we're in C the",
    "start": "440800",
    "end": "443000"
  },
  {
    "text": "types are not tightly coupled they're",
    "start": "443000",
    "end": "444759"
  },
  {
    "text": "not enforced by the compiler so if I",
    "start": "444759",
    "end": "447319"
  },
  {
    "text": "accidentally in programming said this is",
    "start": "447319",
    "end": "448960"
  },
  {
    "text": "a j on string and not ajon int and went",
    "start": "448960",
    "end": "451960"
  },
  {
    "text": "to go compile this and print it you know",
    "start": "451960",
    "end": "453759"
  },
  {
    "text": "it'll print the ask your representation",
    "start": "453759",
    "end": "456680"
  },
  {
    "text": "of 42 and not the actual value 42 that's",
    "start": "456680",
    "end": "459520"
  },
  {
    "text": "on you as a programmer to figure out and",
    "start": "459520",
    "end": "461120"
  },
  {
    "text": "to do correctly so what do you think",
    "start": "461120",
    "end": "462440"
  },
  {
    "text": "about unions do you think they're useful",
    "start": "462440",
    "end": "464039"
  },
  {
    "text": "do you think they're not useful go ahead",
    "start": "464039",
    "end": "465599"
  },
  {
    "text": "and do me a favor leave a like on this",
    "start": "465599",
    "end": "467319"
  },
  {
    "text": "video and leave a comment about your",
    "start": "467319",
    "end": "469319"
  },
  {
    "text": "thoughts on unions and if you've used",
    "start": "469319",
    "end": "471440"
  },
  {
    "text": "them before in the past unions while",
    "start": "471440",
    "end": "473400"
  },
  {
    "text": "powerful are controversial not everyone",
    "start": "473400",
    "end": "475440"
  },
  {
    "text": "agrees if they should or should not be",
    "start": "475440",
    "end": "477319"
  },
  {
    "text": "used in code bases kind of like how",
    "start": "477319",
    "end": "479520"
  },
  {
    "text": "people feel about the go-to statement in",
    "start": "479520",
    "end": "481360"
  },
  {
    "text": "C as well I made a video about that here",
    "start": "481360",
    "end": "483280"
  },
  {
    "text": "talking about if go-to statements are",
    "start": "483280",
    "end": "485120"
  },
  {
    "text": "illegal should they be go find",
    "start": "485120",
    "end": "487960"
  },
  {
    "text": "out",
    "start": "487960",
    "end": "489759"
  },
  {
    "text": "go okay goodbye",
    "start": "489759",
    "end": "493960"
  }
]