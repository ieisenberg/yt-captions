[
  {
    "text": "can computers see the future yes sort of",
    "start": "40",
    "end": "2720"
  },
  {
    "text": "in this video we're talking about how",
    "start": "2720",
    "end": "4440"
  },
  {
    "text": "the way that CPUs look into the future",
    "start": "4440",
    "end": "6839"
  },
  {
    "text": "actually presented a memory corruption",
    "start": "6839",
    "end": "8519"
  },
  {
    "text": "vulnerability that allows people to",
    "start": "8519",
    "end": "10759"
  },
  {
    "text": "bypass a major feature of the arm",
    "start": "10759",
    "end": "13960"
  },
  {
    "text": "computer instruction set this attack is",
    "start": "13960",
    "end": "15879"
  },
  {
    "text": "one of those crazy ones and I want to",
    "start": "15879",
    "end": "17480"
  },
  {
    "text": "talk about this one so badly because any",
    "start": "17480",
    "end": "20160"
  },
  {
    "text": "attack that uses a cash invalidation as",
    "start": "20160",
    "end": "23240"
  },
  {
    "text": "a side channel to leak information about",
    "start": "23240",
    "end": "25760"
  },
  {
    "text": "the CPU is already cool enough think",
    "start": "25760",
    "end": "28000"
  },
  {
    "text": "about Spectre and meltdown right those",
    "start": "28000",
    "end": "30000"
  },
  {
    "text": "bugs that broke the internet around 2016",
    "start": "30000",
    "end": "33079"
  },
  {
    "text": "2017 time period but on top of it being",
    "start": "33079",
    "end": "35719"
  },
  {
    "text": "a bug in a cash invalidation it is also",
    "start": "35719",
    "end": "39320"
  },
  {
    "text": "speculative execution and Via this",
    "start": "39320",
    "end": "41399"
  },
  {
    "text": "attack they're able to break one of the",
    "start": "41399",
    "end": "42879"
  },
  {
    "text": "major pieces of arms security",
    "start": "42879",
    "end": "45120"
  },
  {
    "text": "architecture now if you're new here hi",
    "start": "45120",
    "end": "47440"
  },
  {
    "text": "my name is Ed this is Ol learning a",
    "start": "47440",
    "end": "48800"
  },
  {
    "text": "channel where I make videos about cyber",
    "start": "48800",
    "end": "50160"
  },
  {
    "text": "security software security and all kinds",
    "start": "50160",
    "end": "51800"
  },
  {
    "text": "of other cool stuff so if you like that",
    "start": "51800",
    "end": "53320"
  },
  {
    "text": "or just want to hang out hit that sub",
    "start": "53320",
    "end": "54600"
  },
  {
    "text": "button I really appreciate it also yes I",
    "start": "54600",
    "end": "56719"
  },
  {
    "text": "got a haircut it's uh it's a little long",
    "start": "56719",
    "end": "59079"
  },
  {
    "text": "little something weird going on here",
    "start": "59079",
    "end": "60239"
  },
  {
    "text": "okay I do want to give my hats off to",
    "start": "60239",
    "end": "61680"
  },
  {
    "text": "the researchers here all the people are",
    "start": "61680",
    "end": "63160"
  },
  {
    "text": "named here in white please go take some",
    "start": "63160",
    "end": "65799"
  },
  {
    "text": "time after this video go read their",
    "start": "65799",
    "end": "67479"
  },
  {
    "text": "paper 18 pages of computer architecture",
    "start": "67479",
    "end": "70640"
  },
  {
    "text": "goodness binary exploitation goodness in",
    "start": "70640",
    "end": "72680"
  },
  {
    "text": "this video I want to make this paper a",
    "start": "72680",
    "end": "74000"
  },
  {
    "text": "little more digestible for people who",
    "start": "74000",
    "end": "75840"
  },
  {
    "text": "may not have as much experience with how",
    "start": "75840",
    "end": "77680"
  },
  {
    "text": "CPU memory Works how binary exploitation",
    "start": "77680",
    "end": "79799"
  },
  {
    "text": "works and all that kind of stuff so what",
    "start": "79799",
    "end": "81439"
  },
  {
    "text": "is memory tagging what are buffer",
    "start": "81439",
    "end": "82920"
  },
  {
    "text": "overflows what what is all the stuff",
    "start": "82920",
    "end": "84600"
  },
  {
    "text": "about well to understand how this attack",
    "start": "84600",
    "end": "86360"
  },
  {
    "text": "works we have to start at the basics",
    "start": "86360",
    "end": "88439"
  },
  {
    "text": "hackers like to exploit these sing",
    "start": "88439",
    "end": "90079"
  },
  {
    "text": "called memory corruption vulnerabilities",
    "start": "90079",
    "end": "92280"
  },
  {
    "text": "the basic one that everyone knows about",
    "start": "92280",
    "end": "93640"
  },
  {
    "text": "is a buffer overflow right this paper",
    "start": "93640",
    "end": "95600"
  },
  {
    "text": "here by alf1 called smashing the stack",
    "start": "95600",
    "end": "97640"
  },
  {
    "text": "from front and profit which is a paper",
    "start": "97640",
    "end": "99320"
  },
  {
    "text": "within Frack the hacker E from a million",
    "start": "99320",
    "end": "101799"
  },
  {
    "text": "years ago uh talks about basically hey",
    "start": "101799",
    "end": "104880"
  },
  {
    "text": "if we are able to right past the bounds",
    "start": "104880",
    "end": "107439"
  },
  {
    "text": "of a buffer in C we can use that to take",
    "start": "107439",
    "end": "110119"
  },
  {
    "text": "control of The Code by changing the",
    "start": "110119",
    "end": "112520"
  },
  {
    "text": "return pointer this guy lf1 enumerates",
    "start": "112520",
    "end": "114719"
  },
  {
    "text": "that if we are able to control the",
    "start": "114719",
    "end": "116280"
  },
  {
    "text": "return address of a program by setting",
    "start": "116280",
    "end": "118240"
  },
  {
    "text": "this value to a hacker controlled value",
    "start": "118240",
    "end": "121079"
  },
  {
    "text": "we can put code in that location and run",
    "start": "121079",
    "end": "123799"
  },
  {
    "text": "malicious code this has been the basis",
    "start": "123799",
    "end": "126240"
  },
  {
    "text": "of the majority of the hacks that have",
    "start": "126240",
    "end": "127680"
  },
  {
    "text": "happened over 70% of them since the",
    "start": "127680",
    "end": "129599"
  },
  {
    "text": "1990s and this is the thing that",
    "start": "129599",
    "end": "131959"
  },
  {
    "text": "companies are trying to prevent by",
    "start": "131959",
    "end": "133640"
  },
  {
    "text": "either secure code or secure",
    "start": "133640",
    "end": "135760"
  },
  {
    "text": "architecture now arm the chip",
    "start": "135760",
    "end": "138040"
  },
  {
    "text": "architecture designer that licenses out",
    "start": "138040",
    "end": "140319"
  },
  {
    "text": "the arm spec has added several features",
    "start": "140319",
    "end": "143319"
  },
  {
    "text": "in armv8 and rv9 one of them being this",
    "start": "143319",
    "end": "146360"
  },
  {
    "text": "idea of memory tagging so memory tagging",
    "start": "146360",
    "end": "149360"
  },
  {
    "text": "is theide aide of just like it sounds",
    "start": "149360",
    "end": "151360"
  },
  {
    "text": "putting a tag or a specific number at",
    "start": "151360",
    "end": "154959"
  },
  {
    "text": "the end of a pointer by putting that",
    "start": "154959",
    "end": "157319"
  },
  {
    "text": "number there you effectively make a a",
    "start": "157319",
    "end": "160040"
  },
  {
    "text": "special number that if it gets changed",
    "start": "160040",
    "end": "162200"
  },
  {
    "text": "the CPU will crash at runtime the CPU",
    "start": "162200",
    "end": "165239"
  },
  {
    "text": "checks that the pointer and the metadata",
    "start": "165239",
    "end": "166959"
  },
  {
    "text": "tags on each load and store match now",
    "start": "166959",
    "end": "170239"
  },
  {
    "text": "you're probably wondering wait aren't",
    "start": "170239",
    "end": "171480"
  },
  {
    "text": "pointers memory addresses like how are",
    "start": "171480",
    "end": "173640"
  },
  {
    "text": "they able to just put a random value in",
    "start": "173640",
    "end": "175760"
  },
  {
    "text": "a pointer well pointers actually aren't",
    "start": "175760",
    "end": "177599"
  },
  {
    "text": "all that magic they actually have a",
    "start": "177599",
    "end": "179280"
  },
  {
    "text": "specific function that they do when you",
    "start": "179280",
    "end": "181840"
  },
  {
    "text": "look at a 64-bit pointer for example",
    "start": "181840",
    "end": "184120"
  },
  {
    "text": "there are a few things that are",
    "start": "184120",
    "end": "185280"
  },
  {
    "text": "happening on the inside of this pointer",
    "start": "185280",
    "end": "186920"
  },
  {
    "text": "but basically almost the entire pointer",
    "start": "186920",
    "end": "189480"
  },
  {
    "text": "is a series of indexes into tables this",
    "start": "189480",
    "end": "192720"
  },
  {
    "text": "index into table system is known what is",
    "start": "192720",
    "end": "194920"
  },
  {
    "text": "called virtual memory that allows a",
    "start": "194920",
    "end": "196799"
  },
  {
    "text": "program to think that it has access to",
    "start": "196799",
    "end": "198920"
  },
  {
    "text": "all the memory on the CPU by translating",
    "start": "198920",
    "end": "202159"
  },
  {
    "text": "these virtual memory addresses to a",
    "start": "202159",
    "end": "203879"
  },
  {
    "text": "physical memory address via page tables",
    "start": "203879",
    "end": "206239"
  },
  {
    "text": "we're able to give a program the",
    "start": "206239",
    "end": "208040"
  },
  {
    "text": "illusion that it has access to the",
    "start": "208040",
    "end": "210040"
  },
  {
    "text": "entire memory map meanwhile it doesn't",
    "start": "210040",
    "end": "212400"
  },
  {
    "text": "actually it's a specific memory address",
    "start": "212400",
    "end": "214280"
  },
  {
    "text": "that get gets mapped into a pointer now",
    "start": "214280",
    "end": "217000"
  },
  {
    "text": "the entire pointer isn't actually used",
    "start": "217000",
    "end": "219560"
  },
  {
    "text": "there are certain bits that are reserved",
    "start": "219560",
    "end": "221239"
  },
  {
    "text": "for special purposes or that don't",
    "start": "221239",
    "end": "223080"
  },
  {
    "text": "actually do anything in the pointer and",
    "start": "223080",
    "end": "224879"
  },
  {
    "text": "so arm has taken advantage of these",
    "start": "224879",
    "end": "226840"
  },
  {
    "text": "leftover bits and use them to do",
    "start": "226840",
    "end": "229239"
  },
  {
    "text": "specific memory protection elements one",
    "start": "229239",
    "end": "231159"
  },
  {
    "text": "of them being memory tagging another",
    "start": "231159",
    "end": "233040"
  },
  {
    "text": "example is the pointer authentication",
    "start": "233040",
    "end": "235319"
  },
  {
    "text": "code where effectively the CPU will sign",
    "start": "235319",
    "end": "238319"
  },
  {
    "text": "the pointer cryptographically and if you",
    "start": "238319",
    "end": "240439"
  },
  {
    "text": "overflow it you invalidated the",
    "start": "240439",
    "end": "242159"
  },
  {
    "text": "signature and therefore the pointer is",
    "start": "242159",
    "end": "243640"
  },
  {
    "text": "invalid also real quick this video is",
    "start": "243640",
    "end": "245319"
  },
  {
    "text": "sponsored by none other than me if you",
    "start": "245319",
    "end": "247400"
  },
  {
    "text": "want to learn to code in assembly or C",
    "start": "247400",
    "end": "249599"
  },
  {
    "text": "or learn to do Network code in C please",
    "start": "249599",
    "end": "251439"
  },
  {
    "text": "go check out my website L level Academy",
    "start": "251439",
    "end": "253079"
  },
  {
    "text": "the courses are on sale right now for",
    "start": "253079",
    "end": "254720"
  },
  {
    "text": "the summer go check it out if you want",
    "start": "254720",
    "end": "256799"
  },
  {
    "text": "to learn to code in the C language you",
    "start": "256799",
    "end": "258680"
  },
  {
    "text": "can get a free preview with the arrays",
    "start": "258680",
    "end": "260120"
  },
  {
    "text": "lesson here if you want to go learn to",
    "start": "260120",
    "end": "261400"
  },
  {
    "text": "code in assembly you can get a free",
    "start": "261400",
    "end": "262759"
  },
  {
    "text": "lesson with the load operations lesson",
    "start": "262759",
    "end": "264400"
  },
  {
    "text": "right here please go check him out I",
    "start": "264400",
    "end": "266120"
  },
  {
    "text": "honestly believe that if you want to be",
    "start": "266120",
    "end": "267160"
  },
  {
    "text": "a better programmer you got to learn the",
    "start": "267160",
    "end": "268919"
  },
  {
    "text": "fundamentals where do you learn the",
    "start": "268919",
    "end": "270479"
  },
  {
    "text": "fundamentals C and assembly on low-level",
    "start": "270479",
    "end": "273520"
  },
  {
    "text": "Academy back to the video memory tagging",
    "start": "273520",
    "end": "276320"
  },
  {
    "text": "stuff memory tagging an arm also",
    "start": "276320",
    "end": "278120"
  },
  {
    "text": "prevents against certain attacks like",
    "start": "278120",
    "end": "279520"
  },
  {
    "text": "use after freeze this place where you",
    "start": "279520",
    "end": "281560"
  },
  {
    "text": "have data in a heap location for example",
    "start": "281560",
    "end": "283880"
  },
  {
    "text": "you free it but accidentally access it",
    "start": "283880",
    "end": "286080"
  },
  {
    "text": "later the way it works is actually",
    "start": "286080",
    "end": "287600"
  },
  {
    "text": "pretty cool and this graphic here does a",
    "start": "287600",
    "end": "289199"
  },
  {
    "text": "really good job of explaining it so we",
    "start": "289199",
    "end": "290720"
  },
  {
    "text": "have this character pointer here that",
    "start": "290720",
    "end": "292600"
  },
  {
    "text": "gets allocated 16 bytes when we allocate",
    "start": "292600",
    "end": "295240"
  },
  {
    "text": "it with 16 bytes using an mte compliant",
    "start": "295240",
    "end": "298039"
  },
  {
    "text": "allocator like the one on Android for",
    "start": "298039",
    "end": "299759"
  },
  {
    "text": "example we have we can call this a",
    "start": "299759",
    "end": "301759"
  },
  {
    "text": "particular color right now the memory is",
    "start": "301759",
    "end": "304160"
  },
  {
    "text": "blue now what happens is we either can",
    "start": "304160",
    "end": "306880"
  },
  {
    "text": "overflow this data or we can delete it",
    "start": "306880",
    "end": "309199"
  },
  {
    "text": "we can free it and when we do that we",
    "start": "309199",
    "end": "311240"
  },
  {
    "text": "recolor the data to a different color so",
    "start": "311240",
    "end": "313720"
  },
  {
    "text": "this memory address now has a different",
    "start": "313720",
    "end": "316160"
  },
  {
    "text": "tag if we were to in the future use the",
    "start": "316160",
    "end": "319360"
  },
  {
    "text": "old pointer the use after free but it",
    "start": "319360",
    "end": "322120"
  },
  {
    "text": "still has that original tag the blue",
    "start": "322120",
    "end": "324199"
  },
  {
    "text": "color this will throw a CPU exception",
    "start": "324199",
    "end": "326840"
  },
  {
    "text": "now the important part here is if the",
    "start": "326840",
    "end": "328960"
  },
  {
    "text": "hacker is a able to reveal the tag and",
    "start": "328960",
    "end": "331840"
  },
  {
    "text": "put the tag back in place this defeats",
    "start": "331840",
    "end": "334440"
  },
  {
    "text": "the entire security of the system the",
    "start": "334440",
    "end": "335919"
  },
  {
    "text": "idea is that the memory tag which is 16",
    "start": "335919",
    "end": "338560"
  },
  {
    "text": "bits it hides in the first 16 bits of",
    "start": "338560",
    "end": "340639"
  },
  {
    "text": "the pointer itself if we are able to",
    "start": "340639",
    "end": "342840"
  },
  {
    "text": "leak that tag then this entire system",
    "start": "342840",
    "end": "345680"
  },
  {
    "text": "falls apart now this is where the TIC",
    "start": "345680",
    "end": "347800"
  },
  {
    "text": "tag paper gets really really interesting",
    "start": "347800",
    "end": "350560"
  },
  {
    "text": "now what they do is they use this thing",
    "start": "350560",
    "end": "352919"
  },
  {
    "text": "called speculative execution now we all",
    "start": "352919",
    "end": "355160"
  },
  {
    "text": "want our computers to run as fast as",
    "start": "355160",
    "end": "356639"
  },
  {
    "text": "possible Right ideally our computers",
    "start": "356639",
    "end": "358880"
  },
  {
    "text": "would run our programs it would load and",
    "start": "358880",
    "end": "361199"
  },
  {
    "text": "store all of our memory and it would",
    "start": "361199",
    "end": "362840"
  },
  {
    "text": "never take what is called a cash Miss",
    "start": "362840",
    "end": "364680"
  },
  {
    "text": "where effectively when it looks up a",
    "start": "364680",
    "end": "366440"
  },
  {
    "text": "memory address if the memory isn't there",
    "start": "366440",
    "end": "368440"
  },
  {
    "text": "in cash it has to go out to random",
    "start": "368440",
    "end": "370680"
  },
  {
    "text": "access memory and load that into cash",
    "start": "370680",
    "end": "372520"
  },
  {
    "text": "now that is very expensive it causes the",
    "start": "372520",
    "end": "374840"
  },
  {
    "text": "program to slow down so there has been",
    "start": "374840",
    "end": "376880"
  },
  {
    "text": "this push to do this thing called",
    "start": "376880",
    "end": "378319"
  },
  {
    "text": "speculative execution where your CPU",
    "start": "378319",
    "end": "381199"
  },
  {
    "text": "will actually run the instructions that",
    "start": "381199",
    "end": "383720"
  },
  {
    "text": "are ahead of the current program counter",
    "start": "383720",
    "end": "385479"
  },
  {
    "text": "it will go into the future and predict",
    "start": "385479",
    "end": "387840"
  },
  {
    "text": "what path you're going to go down and",
    "start": "387840",
    "end": "389319"
  },
  {
    "text": "try to preload that memory address to",
    "start": "389319",
    "end": "392280"
  },
  {
    "text": "put it into cash so that when you",
    "start": "392280",
    "end": "394000"
  },
  {
    "text": "actually get there you don't miss the",
    "start": "394000",
    "end": "396000"
  },
  {
    "text": "cash now like I said in the beginning of",
    "start": "396000",
    "end": "397840"
  },
  {
    "text": "the video there have been a variety of",
    "start": "397840",
    "end": "399960"
  },
  {
    "text": "memory corruption attacks or leaks uh",
    "start": "399960",
    "end": "402639"
  },
  {
    "text": "that have come out of speculative",
    "start": "402639",
    "end": "404280"
  },
  {
    "text": "execution and spoiler alert this is how",
    "start": "404280",
    "end": "407080"
  },
  {
    "text": "the mte leak works now I'm going to zoom",
    "start": "407080",
    "end": "409520"
  },
  {
    "text": "in here to their graphic I want to",
    "start": "409520",
    "end": "411319"
  },
  {
    "text": "highlight this because this is really",
    "start": "411319",
    "end": "412840"
  },
  {
    "text": "really interesting so the way that it",
    "start": "412840",
    "end": "414560"
  },
  {
    "text": "works is they create a guess pointer and",
    "start": "414560",
    "end": "417879"
  },
  {
    "text": "a test pointer that both both live",
    "start": "417879",
    "end": "420120"
  },
  {
    "text": "within the same 16b block so that they",
    "start": "420120",
    "end": "423160"
  },
  {
    "text": "have the same memory tag now they create",
    "start": "423160",
    "end": "425919"
  },
  {
    "text": "an area of speculative execution that",
    "start": "425919",
    "end": "428720"
  },
  {
    "text": "will go out and try to dreference the",
    "start": "428720",
    "end": "431560"
  },
  {
    "text": "guest pointer and dreference the test",
    "start": "431560",
    "end": "433800"
  },
  {
    "text": "pointer now notice they don't actually",
    "start": "433800",
    "end": "435720"
  },
  {
    "text": "ever go and run this code all they do is",
    "start": "435720",
    "end": "438840"
  },
  {
    "text": "they put it into the code in a way that",
    "start": "438840",
    "end": "440639"
  },
  {
    "text": "it could conditionally execute but the",
    "start": "440639",
    "end": "443080"
  },
  {
    "text": "problem here is that if the tag",
    "start": "443080",
    "end": "445879"
  },
  {
    "text": "mismatches right the whole point of",
    "start": "445879",
    "end": "447319"
  },
  {
    "text": "memory tagging is that if the tag Mis",
    "start": "447319",
    "end": "449599"
  },
  {
    "text": "matches it crashes a CPU if it",
    "start": "449599",
    "end": "451879"
  },
  {
    "text": "mismatches in a speculative case if it",
    "start": "451879",
    "end": "454680"
  },
  {
    "text": "mismatches in the future it will not",
    "start": "454680",
    "end": "457840"
  },
  {
    "text": "crash the CPU and even so if it",
    "start": "457840",
    "end": "460479"
  },
  {
    "text": "mismatches it won't cash it won't go",
    "start": "460479",
    "end": "463599"
  },
  {
    "text": "into Cash the test pointer will not be",
    "start": "463599",
    "end": "466680"
  },
  {
    "text": "uh cash filled and therefore the guess",
    "start": "466680",
    "end": "468680"
  },
  {
    "text": "is wrong what they're able to do they're",
    "start": "468680",
    "end": "470520"
  },
  {
    "text": "able to time did we already cash fill",
    "start": "470520",
    "end": "473240"
  },
  {
    "text": "this test pointer and use that to figure",
    "start": "473240",
    "end": "475400"
  },
  {
    "text": "out if the tag that they guessed was",
    "start": "475400",
    "end": "477599"
  },
  {
    "text": "correct so what they do is they iterate",
    "start": "477599",
    "end": "479680"
  },
  {
    "text": "is tag one correct is tag two correct",
    "start": "479680",
    "end": "482440"
  },
  {
    "text": "and they keep checking over and over",
    "start": "482440",
    "end": "483919"
  },
  {
    "text": "again until their access to test pointer",
    "start": "483919",
    "end": "486639"
  },
  {
    "text": "is now filled in cash therefore they're",
    "start": "486639",
    "end": "489120"
  },
  {
    "text": "able to leak the tag of the target",
    "start": "489120",
    "end": "491360"
  },
  {
    "text": "address and use that for a future memory",
    "start": "491360",
    "end": "494400"
  },
  {
    "text": "corruption attack like when I read this",
    "start": "494400",
    "end": "497560"
  },
  {
    "text": "paper not only are they doing cash side",
    "start": "497560",
    "end": "500280"
  },
  {
    "text": "Channel leaking they are doing it in",
    "start": "500280",
    "end": "502319"
  },
  {
    "text": "speculative execution to bypass a",
    "start": "502319",
    "end": "505000"
  },
  {
    "text": "hardware memory protection dude it is",
    "start": "505000",
    "end": "507520"
  },
  {
    "text": "just one of the craziest bugs and make",
    "start": "507520",
    "end": "509720"
  },
  {
    "text": "it even more crazy what they figured out",
    "start": "509720",
    "end": "511520"
  },
  {
    "text": "how to do is they're able to do this",
    "start": "511520",
    "end": "514080"
  },
  {
    "text": "attack inside of the V8 sandbox so what",
    "start": "514080",
    "end": "517039"
  },
  {
    "text": "the the entire structure here is they",
    "start": "517039",
    "end": "518919"
  },
  {
    "text": "create these things called tic tag",
    "start": "518919",
    "end": "521120"
  },
  {
    "text": "gadgets now this this graphic that I",
    "start": "521120",
    "end": "522839"
  },
  {
    "text": "just showed you is called a tic tag",
    "start": "522839",
    "end": "524880"
  },
  {
    "text": "Gadget template so basically if you can",
    "start": "524880",
    "end": "527320"
  },
  {
    "text": "find a piece of code that does this sort",
    "start": "527320",
    "end": "529720"
  },
  {
    "text": "of thing where you have address you want",
    "start": "529720",
    "end": "531480"
  },
  {
    "text": "to leak address you control speculative",
    "start": "531480",
    "end": "534040"
  },
  {
    "text": "branch and then you can check at the end",
    "start": "534040",
    "end": "535640"
  },
  {
    "text": "of it you've created what is called a a",
    "start": "535640",
    "end": "537959"
  },
  {
    "text": "gadget template so if you can look for",
    "start": "537959",
    "end": "540000"
  },
  {
    "text": "Snippets of code that are like this you",
    "start": "540000",
    "end": "541640"
  },
  {
    "text": "can find ways to leak the mte and other",
    "start": "541640",
    "end": "544079"
  },
  {
    "text": "code and these researchers actually",
    "start": "544079",
    "end": "546240"
  },
  {
    "text": "found a bunch of tic tag leak Gadgets in",
    "start": "546240",
    "end": "549760"
  },
  {
    "text": "the V8 VM which as I've said in previous",
    "start": "549760",
    "end": "551560"
  },
  {
    "text": "videos is the VM that they use to run",
    "start": "551560",
    "end": "554279"
  },
  {
    "text": "the JavaScript sandbox right and they're",
    "start": "554279",
    "end": "555880"
  },
  {
    "text": "they're showing you here in this paper",
    "start": "555880",
    "end": "557480"
  },
  {
    "text": "and again I'm not going to PR like I",
    "start": "557480",
    "end": "558600"
  },
  {
    "text": "know how all this works it's very very",
    "start": "558600",
    "end": "560040"
  },
  {
    "text": "complicated uh that they found tic tag",
    "start": "560040",
    "end": "562760"
  },
  {
    "text": "V2 gadgets that can work inside the V8",
    "start": "562760",
    "end": "565680"
  },
  {
    "text": "sandbox to leak arm V8 tags so like I I",
    "start": "565680",
    "end": "570720"
  },
  {
    "text": "just cannot emphasize how crazy this",
    "start": "570720",
    "end": "574040"
  },
  {
    "text": "paper is I I really please go go go show",
    "start": "574040",
    "end": "576640"
  },
  {
    "text": "them some love go go read it I hope it",
    "start": "576640",
    "end": "578240"
  },
  {
    "text": "made this more accessible to you guys um",
    "start": "578240",
    "end": "580120"
  },
  {
    "text": "and if you like this video do me a favor",
    "start": "580120",
    "end": "581240"
  },
  {
    "text": "hit like hit subscribe then go check out",
    "start": "581240",
    "end": "583160"
  },
  {
    "text": "this other this video that you will also",
    "start": "583160",
    "end": "586800"
  },
  {
    "text": "like as well",
    "start": "586800",
    "end": "589880"
  }
]