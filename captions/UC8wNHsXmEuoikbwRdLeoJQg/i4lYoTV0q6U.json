[
  {
    "text": "So Mike and I thought it would be really fun to do this in public, which is why we're kind",
    "start": "4099",
    "end": "9433"
  },
  {
    "text": "of streaming this. So on the Effect website, we use a tool",
    "start": "9433",
    "end": "14666"
  },
  {
    "text": "called Contentlayer, which was built by the amazing Johannes Schickling, a",
    "start": "14666",
    "end": "20733"
  },
  {
    "text": "fantastic purveyor of developer tools. But unfortunately, that project is no longer maintained.",
    "start": "20733",
    "end": "26966"
  },
  {
    "text": "And it is built with Effect, but it's built with a much older version of the project.",
    "start": "27366",
    "end": "32366"
  },
  {
    "text": "And so that carries with it the lack of all of the optimizations that we've made over",
    "start": "33400",
    "end": "38500"
  },
  {
    "text": "probably like the last year and a half or so since the project was developed. And there are some improvements that we",
    "start": "38500",
    "end": "47166"
  },
  {
    "text": "think can be made on top of the existing software to make it function better.",
    "start": "47166",
    "end": "52266"
  },
  {
    "text": "On the website, we have a lot of content, and we're noticing like slightly long build times.",
    "start": "53333",
    "end": "57733"
  },
  {
    "text": "And so we wanted to see if we could potentially take Contentlayer and reimagine it for our",
    "start": "58733",
    "end": "64099"
  },
  {
    "text": "own purposes, kind of make things maybe a little bit more performant, parallelized,",
    "start": "64099",
    "end": "69466"
  },
  {
    "text": "and potentially improve the user experience. that's kind of what we were thinking we would do.",
    "start": "69733",
    "end": "75333"
  },
  {
    "text": "We thought it'd be fun to do this in public. We thought it'd be fun to stream it just so everybody can sort of see the approach",
    "start": "75333",
    "end": "81465"
  },
  {
    "text": "that Mike and I might take to developing a semi-greenfield project. That's not really greenfield.",
    "start": "81466",
    "end": "87133"
  },
  {
    "text": "So yeah, I don't know if there's anything you want to add, Mike. No, I should say that none of this is scripted.",
    "start": "87566",
    "end": "92933"
  },
  {
    "text": "So this is not going to be a kind of presentation where we go through a single thing and so",
    "start": "93566",
    "end": "100065"
  },
  {
    "text": "on and so forth. But we are basically exploring ourselves. So it might take one session, might take",
    "start": "100066",
    "end": "105666"
  },
  {
    "text": "two sessions, might take 150 sessions. It doesn't really matter. I think the goal would be to optimize our",
    "start": "105666",
    "end": "114266"
  },
  {
    "text": "own build pipeline to build content efficiently. And if we get to publish something",
    "start": "114266",
    "end": "119333"
  },
  {
    "text": "available for other people, that's good. Otherwise we will enjoy the benefits of our own.",
    "start": "119333",
    "end": "126199"
  },
  {
    "text": "But yeah, let's start. Yeah, let me try to share my screen.",
    "start": "127500",
    "end": "132533"
  },
  {
    "text": "Yeah, so this is just an empty project. I essentially took the effect MonoRepo,",
    "start": "135733",
    "end": "140966"
  },
  {
    "text": "cloned it to a separate directory, and emptied it out and removed all the history and set",
    "start": "141400",
    "end": "147566"
  },
  {
    "text": "up a single core package in here just to give Mike and I a place to hack.",
    "start": "147566",
    "end": "153400"
  },
  {
    "text": "So that's what we have going on here. But maybe it would be good for us also to take a look at how",
    "start": "156233",
    "end": "163033"
  },
  {
    "text": "Contentlayer currently functions, what it is, the things that we like about it, the things that we don't, and",
    "start": "163033",
    "end": "169333"
  },
  {
    "text": "some of the user experience that we want to carry over from the existing package and",
    "start": "169933",
    "end": "174933"
  },
  {
    "text": "maybe take it from there. So I can open up.",
    "start": "176033",
    "end": "182666"
  },
  {
    "text": "Let's open up the website. And we'll check out the main branch.",
    "start": "190199",
    "end": "200599"
  },
  {
    "text": "And then also maybe what we'll do is open up the website.",
    "start": "201133",
    "end": "206933"
  },
  {
    "text": "Yeah, so content layer, like we said, is a really excellent tool. It's basically a, as it says here, a",
    "start": "208233",
    "end": "215366"
  },
  {
    "text": "content SDK that performs validation on your static assets.",
    "start": "215366",
    "end": "222266"
  },
  {
    "text": "And then also transforms those static assets into JSON data that you can then import into your application.",
    "start": "222566",
    "end": "227532"
  },
  {
    "text": "So the existing Contentlayer project is,",
    "start": "228033",
    "end": "234300"
  },
  {
    "text": "it kind of has different sources that you can use for your content. I think Mike and I are probably just",
    "start": "235433",
    "end": "240666"
  },
  {
    "text": "going to focus on the local file system source for the moment. But the experience that you get when",
    "start": "240666",
    "end": "248000"
  },
  {
    "text": "using content layer is something like this. So you would first define like a content",
    "start": "248000",
    "end": "254900"
  },
  {
    "text": "layer configuration file. And the effect websites content layer configuration is obviously quite complex.",
    "start": "254900",
    "end": "261966"
  },
  {
    "text": "But if we kind of boil it down to the relevant pieces, in",
    "start": "262633",
    "end": "268533"
  },
  {
    "text": "existing content layer, you define a source for your content. So like where does your content exists",
    "start": "268533",
    "end": "273932"
  },
  {
    "text": "for the Effect website, all of our content lists exists under this content directory, any",
    "start": "273933",
    "end": "280400"
  },
  {
    "text": "directories to exclude from like the search path, the document types, which we'll",
    "start": "280400",
    "end": "285932"
  },
  {
    "text": "take a look at in a second. And then you can provide some other options, but we're not really going to get into this",
    "start": "285933",
    "end": "291000"
  },
  {
    "text": "for the moment. Things that like you can add plugins to your like processing MDX and whatever, but not",
    "start": "291000",
    "end": "297432"
  },
  {
    "text": "going to really focus on this for the moment. What I think it would be cool to focus on for now is how document types are defined",
    "start": "297433",
    "end": "305266"
  },
  {
    "text": "and how that translates into processing your content via these document types.",
    "start": "306266",
    "end": "311599"
  },
  {
    "text": "So maybe we could take a look first at the docs page.",
    "start": "312466",
    "end": "317733"
  },
  {
    "text": "So with content layer to define a document, you use this",
    "start": "318900",
    "end": "325566"
  },
  {
    "text": "define document type helper. You give your document a name, a file",
    "start": "325566",
    "end": "331366"
  },
  {
    "text": "path pattern, tell it the content type. And this file path pattern is relative to",
    "start": "331366",
    "end": "336800"
  },
  {
    "text": "the content directory that you have in the parent config. You also give fields to your documents.",
    "start": "336800",
    "end": "341833"
  },
  {
    "text": "And this field is kind of like a little built in type safe DSL",
    "start": "342766",
    "end": "349199"
  },
  {
    "text": "for describing the fields that should be present in your data.",
    "start": "349199",
    "end": "353866"
  },
  {
    "text": "So for example, for all of our Effect website docs page",
    "start": "354833",
    "end": "360500"
  },
  {
    "text": "documents, for\nall of our docs page documents, for all of our document documents, we have title,",
    "start": "360500",
    "end": "367199"
  },
  {
    "text": "we have a nav title, we have excerpt, we have whether or not it's collapsible, et cetera, et cetera, et cetera.",
    "start": "367699",
    "end": "372432"
  },
  {
    "text": "And then you can also define computed fields which follow a kind of similar spec where",
    "start": "373266",
    "end": "378300"
  },
  {
    "text": "you define the type, you might have a description. But the difference with the computed field is you have the ability to actually resolve",
    "start": "378300",
    "end": "385300"
  },
  {
    "text": "the data that that field represents dynamically based on information you're getting from the",
    "start": "386033",
    "end": "391333"
  },
  {
    "text": "page itself. So you can take the fields that were processed and maybe derive",
    "start": "391333",
    "end": "397099"
  },
  {
    "text": "some computed fields from it. We do this for a number of different things on the website, headings,",
    "start": "397099",
    "end": "403198"
  },
  {
    "text": "sections, et cetera, et cetera, et cetera. And so if we look at how this maps to our",
    "start": "403199",
    "end": "411933"
  },
  {
    "text": "content, so now I'll also open up like maybe an example docs page, we'll",
    "start": "411933",
    "end": "417033"
  },
  {
    "text": "just look at the introduction. So on the Effect website, the vast",
    "start": "417033",
    "end": "422766"
  },
  {
    "text": "majority of our documentation, our blog posts, et cetera, are all written in MDX, but you can write",
    "start": "422766",
    "end": "430900"
  },
  {
    "text": "in markdown as well. And for markdown or MDX, the fields, so",
    "start": "430900",
    "end": "440466"
  },
  {
    "text": "to speak, are being processed from the front matter. So if we look at this title here,",
    "start": "440466",
    "end": "446666"
  },
  {
    "text": "Welcome to Effect, this would be processed by this field here in the document definition.",
    "start": "446666",
    "end": "451866"
  },
  {
    "text": "So the idea is that the document that you define kind of describes both the content of",
    "start": "452800",
    "end": "460766"
  },
  {
    "text": "that document as well as any specific structured fields that should be exposed.",
    "start": "460766",
    "end": "465733"
  },
  {
    "text": "So we have a bunch of different stuff here. And this would be validated by content layer.",
    "start": "467300",
    "end": "472300"
  },
  {
    "text": "Like while it's being built, essentially, and you'd get like for errors reported if what you've defined here doesn't match what",
    "start": "475033",
    "end": "482033"
  },
  {
    "text": "you've specified in the spec for your document. And then once it's built, once you've",
    "start": "482033",
    "end": "490300"
  },
  {
    "text": "actually built your document, you get this little dot content layer directory,",
    "start": "490300",
    "end": "495966"
  },
  {
    "text": "which has some stuff in it. The I think relevant to like the actual",
    "start": "497300",
    "end": "503533"
  },
  {
    "text": "generated content, we can look in like this generated folder. And for the docs page, obviously we have",
    "start": "503533",
    "end": "509733"
  },
  {
    "text": "a lot more stuff in here because we have a lot more document page documents.",
    "start": "509733",
    "end": "514000"
  },
  {
    "text": "But if we look at the thing that content",
    "start": "515066",
    "end": "520466"
  },
  {
    "text": "layer generated that corresponds to this MDX file, that would be this one.",
    "start": "520466",
    "end": "526100"
  },
  {
    "text": "And you can see we basically get like a full like a static JSON representation of the document, which has both the fields that",
    "start": "528066",
    "end": "535633"
  },
  {
    "text": "we've defined, which have now been like validated by content layer and it's spitting it out in JSON. And then we also have",
    "start": "535633",
    "end": "541332"
  },
  {
    "text": "the body of the document. So we get access, we get we get access to things like the actual raw content that's",
    "start": "541333",
    "end": "547665"
  },
  {
    "text": "being processed through an MDX processor. And then there's a whole bunch of other",
    "start": "547666",
    "end": "553366"
  },
  {
    "text": "things in here as well that you get access to that are kind of more relevant",
    "start": "553366",
    "end": "560600"
  },
  {
    "text": "to the source that you use. So if we look again at the very top level",
    "start": "560600",
    "end": "568066"
  },
  {
    "text": "config for content layer, we're using the source files content layer plugin, which",
    "start": "568066",
    "end": "575000"
  },
  {
    "text": "means that all of our documents are coming from the local file system.",
    "start": "575000",
    "end": "577865"
  },
  {
    "text": "And so, again, I think like for our reimagining, we're going to focus probably just on like",
    "start": "580300",
    "end": "585566"
  },
  {
    "text": "a file system source. But I think the goal is to still have the ability to have",
    "start": "585566",
    "end": "591000"
  },
  {
    "text": "different sources maybe in the future. So we'll kind of try to keep that in mind. But our focus will be",
    "start": "591000",
    "end": "596500"
  },
  {
    "text": "making this work well.",
    "start": "596500",
    "end": "598133"
  },
  {
    "text": "Yeah. So like with the file system source, we get things like, you know, the file path, file directory, content type, etc.",
    "start": "601666",
    "end": "608033"
  },
  {
    "text": "And all of this is statically defined in JSON so it can be easily imported.",
    "start": "609166",
    "end": "613566"
  },
  {
    "text": "And content layer also generates some index files here, which",
    "start": "614833",
    "end": "620833"
  },
  {
    "text": "essentially, if we look at how this generated index corresponds to this",
    "start": "620833",
    "end": "626165"
  },
  {
    "text": "one, we get a generated index file in here that imports all of our documents as JSON,",
    "start": "626166",
    "end": "633966"
  },
  {
    "text": "like kind of asserting that the type is JSON here.",
    "start": "635100",
    "end": "638199"
  },
  {
    "text": "And then in the root index, we get access to all the docs",
    "start": "640399",
    "end": "645733"
  },
  {
    "text": "pages, all our blog pages. You're kind of getting a sneak peek of potentially tutorials",
    "start": "645733",
    "end": "651000"
  },
  {
    "text": "coming up in the future. But the point here is that we get access to all of these statically",
    "start": "651000",
    "end": "658266"
  },
  {
    "text": "generated documents as code, which is nice because then we can use it in, for example, like our",
    "start": "658266",
    "end": "664699"
  },
  {
    "text": "React components to then, you know, display the user interface.",
    "start": "664699",
    "end": "669399"
  },
  {
    "text": "So I'm not going to go over like exactly how we do all of that because the website is open source. But if we look",
    "start": "670066",
    "end": "677699"
  },
  {
    "text": "at maybe the docs layout.",
    "start": "677699",
    "end": "685500"
  },
  {
    "text": "So you can see here, we can import directly from content layer generated because content layer also generates this package JSON",
    "start": "689399",
    "end": "695899"
  },
  {
    "text": "here that allows us to do this kind of thing.",
    "start": "695899",
    "end": "699500"
  },
  {
    "text": "Trying to find where we use it.",
    "start": "701333",
    "end": "708866"
  },
  {
    "text": "Yeah, so you can basically do things like iterating through all the docs pages, you know, basically operating on your documents",
    "start": "708866",
    "end": "715433"
  },
  {
    "text": "programmatically at that point. So your local file system becomes your CMS and content layer becomes the",
    "start": "715433",
    "end": "721899"
  },
  {
    "text": "kind of processor for those documents. But, you know, there are a couple after",
    "start": "722699",
    "end": "729399"
  },
  {
    "text": "having used content layer for a little bit on the website. I mean, there are a couple of pain points",
    "start": "729399",
    "end": "735699"
  },
  {
    "text": "that like I've come across just from like a UX perspective. And I think that these were on the",
    "start": "735699",
    "end": "741733"
  },
  {
    "text": "roadmap for content layer anyways. But now, you know, we have the opportunity to kind of like reimagine this.",
    "start": "741733",
    "end": "747166"
  },
  {
    "text": "But if we close down all of this and again, look at the root, like,",
    "start": "747166",
    "end": "751633"
  },
  {
    "text": "kind of make source function that we get from the plugin.",
    "start": "752199",
    "end": "756399"
  },
  {
    "text": "One of the things that I kind of thought was a missed opportunity",
    "start": "757266",
    "end": "763199"
  },
  {
    "text": "is the ability to, you know, if we look at this right now, the make",
    "start": "763199",
    "end": "768899"
  },
  {
    "text": "source function assumes that all of our content is coming from the local file",
    "start": "768899",
    "end": "774800"
  },
  {
    "text": "system for all of these documents. And we only have the ability to define one source here that I know of.",
    "start": "774800",
    "end": "781665"
  },
  {
    "text": "Maybe Johannes can correct me if I'm wrong, if he's watching this at some point in the future. But this is kind of like, you",
    "start": "782666",
    "end": "790333"
  },
  {
    "text": "know, I feel like it's a missed opportunity. You know, there may be documents you do want to fetch from the local file system, but",
    "start": "790333",
    "end": "795466"
  },
  {
    "text": "there are also maybe documents that you want to fetch from like, I don't know, CMS or I don't know, some sort of",
    "start": "795466",
    "end": "801766"
  },
  {
    "text": "blob storage or whatever. And so it would be kind of cool if the documents themselves had their own source.",
    "start": "801766",
    "end": "811100"
  },
  {
    "text": "Right. So the source was embedded into the document instead of the documents being embedded into the source. This way, when you're fetching content",
    "start": "811100",
    "end": "817600"
  },
  {
    "text": "for all of these documents and processing it, you can define whatever source you want",
    "start": "817600",
    "end": "822633"
  },
  {
    "text": "for a given document. And another thing that I thought was kind of like, it's not a",
    "start": "822633",
    "end": "829300"
  },
  {
    "text": "missed opportunity because I don't know if like effect schema existed back then. No, it didn't.",
    "start": "829300",
    "end": "834466"
  },
  {
    "text": "But now that we have Effect Schema, we don't really. Rather indeed, it was a",
    "start": "836000",
    "end": "841532"
  },
  {
    "text": "very, very early thing. And obviously you don't want to keep updating your document",
    "start": "841533",
    "end": "847600"
  },
  {
    "text": "definitions every every new release of schema. Now it's fairly stable.",
    "start": "847600",
    "end": "851733"
  },
  {
    "text": "Right. I mean, now that we have effect schema, we don't really need this little type",
    "start": "852866",
    "end": "859832"
  },
  {
    "text": "safe DSL that Content Layer provides. Yes, it is nice, but it's limited",
    "start": "859833",
    "end": "866033"
  },
  {
    "text": "because, you know, we can't really do unless we make a field computed, we can't really do any",
    "start": "866033",
    "end": "872399"
  },
  {
    "text": "additional validation at at validation time on these fields.",
    "start": "872399",
    "end": "878066"
  },
  {
    "text": "And then the other thing that some folks may have noticed is if you define, like, for example, like a JSON data type here, if",
    "start": "879800",
    "end": "888100"
  },
  {
    "text": "we look at the actual generated type for this. In Content Layer.",
    "start": "888100",
    "end": "894100"
  },
  {
    "text": "Where is it? Types.",
    "start": "894566",
    "end": "897966"
  },
  {
    "text": "Yeah, here. So this JSON type doesn't exist. So when you when you actually go through",
    "start": "901633",
    "end": "908633"
  },
  {
    "text": "and like, I don't know, try to use headings, you'll be left with an any just kind of like not desirable.",
    "start": "908633",
    "end": "915033"
  },
  {
    "text": "Like in like an ideal world, we would be able to. Really like spec this",
    "start": "915033",
    "end": "921766"
  },
  {
    "text": "out a little bit better. Now that we have effect schema, we can do that and we'll get all",
    "start": "921766",
    "end": "927699"
  },
  {
    "text": "of like the benefits of effect schema. So I think like two of my like wish list items when we're kind",
    "start": "927699",
    "end": "933766"
  },
  {
    "text": "of reimagining Content Layer are to have more pluggable sources. Again, like for now, we'll just be",
    "start": "933766",
    "end": "939100"
  },
  {
    "text": "focused on file system. But if we build this in such a way that",
    "start": "939100",
    "end": "944233"
  },
  {
    "text": "the source is attached to the document instead of the other way around, I think it would easily",
    "start": "944233",
    "end": "950100"
  },
  {
    "text": "lend itself to other types of sources. And the spec for the fields of a",
    "start": "950100",
    "end": "958500"
  },
  {
    "text": "document, I think should be like 100% defined by effect schema. And then the computed fields also should be effectful.",
    "start": "958500",
    "end": "965133"
  },
  {
    "text": "So so like instead of being because if you look at the resolve type here, this gets a computed field resolver.",
    "start": "966100",
    "end": "972566"
  },
  {
    "text": "Well I mean, that there's a clear difference. Content layer was targeting non-effect user.",
    "start": "972566",
    "end": "978133"
  },
  {
    "text": "We couldn't care less about non-effect users. I mean, if we were building this as like",
    "start": "978666",
    "end": "983766"
  },
  {
    "text": "a content layer v2 or whatever, of course, we would. I was actually chatting with Johannes at",
    "start": "983766",
    "end": "989699"
  },
  {
    "text": "one point in time about doing that, like just kind of thinking about like a way to do this.",
    "start": "989699",
    "end": "995199"
  },
  {
    "text": "And the thought I had had was build the effect version as like the underneath people wanted to use it great",
    "start": "995199",
    "end": "1003333"
  },
  {
    "text": "but then build like a like slight like a higher level API that exposes the old type safety as hell whatever.",
    "start": "1003333",
    "end": "1010533"
  },
  {
    "text": "But, since we're doing this for ourselves and we're beeing selfish we're gonna do this in a very Effect way",
    "start": "1010533",
    "end": "1019433"
  },
  {
    "text": "and then I think the last wish item I have is, and I think Mike mentioned this",
    "start": "1019433",
    "end": "1025299"
  },
  {
    "text": "when he told me he wanted to do this was making this as like concurrent as possible,",
    "start": "1025300",
    "end": "1031532"
  },
  {
    "text": "be really leveraging as much as we can. Like this should be deeply parallel, not",
    "start": "1031533",
    "end": "1038066"
  },
  {
    "text": "even concurrent, actually deeply parallel. Yeah, we are processing",
    "start": "1038066",
    "end": "1043333"
  },
  {
    "text": "multiple, multiple files. And at the moment, they are almost processed sequentially.",
    "start": "1043333",
    "end": "1049566"
  },
  {
    "text": "And this this transformations happen on source as we saw before, we could use the remark",
    "start": "1050366",
    "end": "1056666"
  },
  {
    "text": "plugins and so on and so forth. And especially for for us, where we use",
    "start": "1056766",
    "end": "1062533"
  },
  {
    "text": "shikijs/twoslash and we would like to use the the new version of Shiki which embeds twoslash we",
    "start": "1062533",
    "end": "1070600"
  },
  {
    "text": "have basically we are compiling every single snippet",
    "start": "1070600",
    "end": "1074632"
  },
  {
    "text": "in a in a sequential manner, which which means generating the documents stay a long time.",
    "start": "1075833",
    "end": "1082132"
  },
  {
    "text": "And we're already hitting a point where a test field takes about three minutes to three",
    "start": "1082766",
    "end": "1089299"
  },
  {
    "text": "minutes, a non-cash field can get up to 10 minutes and we can actually not no longer update",
    "start": "1089333",
    "end": "1096733"
  },
  {
    "text": "the like the renderer of of Shiki because otherwise we we use more than 10 minutes and",
    "start": "1096833",
    "end": "1103166"
  },
  {
    "text": "Vercel kicks kicks us because we can't build for longer than 10 minutes.",
    "start": "1103233",
    "end": "1109000"
  },
  {
    "text": "Yeah, my apologies. You have the webcam, which sometimes I know loses focus.",
    "start": "1110166",
    "end": "1115766"
  },
  {
    "text": "I know I need to upgrade my webcam. So for anybody who's watching this and",
    "start": "1116533",
    "end": "1122132"
  },
  {
    "text": "sees me going in and out of focus, I'm sorry, I promise I'll get a new webcam for the next time. I could I could use my my Mac but",
    "start": "1122133",
    "end": "1131966"
  },
  {
    "text": "and or my phone, but I don't have a way to like actually hold it. Like in the right place.",
    "start": "1131966",
    "end": "1137233"
  },
  {
    "text": "So for today, I apologize. Like I'll be going in and out of focus. But next time I'll have everything much better.",
    "start": "1137699",
    "end": "1144433"
  },
  {
    "text": "webcam only loses. Thanks Sebastian.",
    "start": "1147466",
    "end": "1152366"
  },
  {
    "text": "So so yeah, and then I'll mention one other feature of content layer.",
    "start": "1152633",
    "end": "1158533"
  },
  {
    "text": "So, you know, all that being said, content layer is a fantastic piece of software. It made building the website like much,",
    "start": "1158766",
    "end": "1164100"
  },
  {
    "text": "much simpler for us because we didn't really have to worry about anything",
    "start": "1164100",
    "end": "1169800"
  },
  {
    "text": "related to the content. We just wrote MDX and let content layer",
    "start": "1169800",
    "end": "1175033"
  },
  {
    "text": "take care of generating the actual code for us. So like all of the kind of wish list and",
    "start": "1175033",
    "end": "1182266"
  },
  {
    "text": "like missed opportunity stuff aside, fantastic piece of software and Johannes should be given like big kudos for working on this.",
    "start": "1182266",
    "end": "1188733"
  },
  {
    "text": "The other thing I'll mention really quick in this content layer directory, you'll notice like a dot cache directory.",
    "start": "1189800",
    "end": "1194766"
  },
  {
    "text": "So content layer maintains a versioned cache for documents.",
    "start": "1196466",
    "end": "1200898"
  },
  {
    "text": "So like when you're developing locally this doesn't really help you very much in like CI.",
    "start": "1201500",
    "end": "1206800"
  },
  {
    "text": "Unless you push the cash somewhere, but when you're developing locally, as long",
    "start": "1206800",
    "end": "1214033"
  },
  {
    "text": "as you've got you haven't upgraded your version of content layer, you do get like cashed",
    "start": "1214033",
    "end": "1219333"
  },
  {
    "text": "assets for your documents. And when I was thinking about like ways",
    "start": "1219333",
    "end": "1226233"
  },
  {
    "text": "that we could reimagine this, you know, I talked with Mike about potentially making the cache also pluggable.",
    "start": "1226233",
    "end": "1232065"
  },
  {
    "text": "So you could have, you know, an external cache or the file system could still be your cache, whatever.",
    "start": "1232066",
    "end": "1236866"
  },
  {
    "text": "But the other thing that you'll notice in here is this kind of",
    "start": "1238066",
    "end": "1243166"
  },
  {
    "text": "cache items map embeds every single document in here.",
    "start": "1243166",
    "end": "1248533"
  },
  {
    "text": "So it's like a huge file. I think it's every single document. I could be wrong.",
    "start": "1248966",
    "end": "1253766"
  },
  {
    "text": "Yeah, it's like all the document All of their cached items and stuff like that. We have now in Effect,",
    "start": "1259600",
    "end": "1266033"
  },
  {
    "text": "which didn't exist back then. So like, you know, we have things like the key value store for",
    "start": "1266033",
    "end": "1271733"
  },
  {
    "text": "effect, which could easily be used as like a local file system cache where every document",
    "start": "1271733",
    "end": "1276966"
  },
  {
    "text": "gets its own separate file and has its own cache entry, etc, etc.",
    "start": "1276966",
    "end": "1281266"
  },
  {
    "text": "So yeah, there's just like there's a lot of ideas that we had floating around.",
    "start": "1282000",
    "end": "1287066"
  },
  {
    "text": "So we thought this would be a good time to, you know, act on",
    "start": "1287233",
    "end": "1292699"
  },
  {
    "text": "those ideas and potentially do this. So anyways, that's a little bit about",
    "start": "1292699",
    "end": "1297866"
  },
  {
    "text": "content layer, a little bit about the history, how it works, etc. But maybe we can start like actually",
    "start": "1297866",
    "end": "1303933"
  },
  {
    "text": "digging into some code now. Okay, so the traditional foo export.",
    "start": "1303933",
    "end": "1309699"
  },
  {
    "text": "So yeah, I, you know, Mike and I were chatting just for a few minutes before we started the stream and we thought like a good place",
    "start": "1312766",
    "end": "1318366"
  },
  {
    "text": "to start, or maybe like a good place to like start thinking about this is like, what",
    "start": "1318366",
    "end": "1323699"
  },
  {
    "text": "do we like about the existing user experience that we want to kind of preserve.",
    "start": "1323699",
    "end": "1328833"
  },
  {
    "text": "And one of the things I really like about content layer is that the config file is just like a plain TypeScript file that",
    "start": "1330366",
    "end": "1337398"
  },
  {
    "text": "you can, you know, do things to manipulate your document, you can define your document and code, and then that",
    "start": "1337399",
    "end": "1342766"
  },
  {
    "text": "file gets compiled and used by the the actual like software to",
    "start": "1342766",
    "end": "1348199"
  },
  {
    "text": "do all of the document generation caching and validation, etc.",
    "start": "1348199",
    "end": "1352000"
  },
  {
    "text": "So like, I think preserving the content layer is just like or preserving the main config file as a TypeScript file that you can",
    "start": "1353433",
    "end": "1359966"
  },
  {
    "text": "import things into and define and code I think is desirable.",
    "start": "1359966",
    "end": "1363666"
  },
  {
    "text": "And yeah, I think like if we start thinking from there, that would be good.",
    "start": "1365033",
    "end": "1372166"
  },
  {
    "text": "Do you agree, Mike, you like the fact that like content layer has like a TS config file",
    "start": "1373566",
    "end": "1378733"
  },
  {
    "text": "and everything like that. This way, it's just plain TypeScript you write and it's really all. Yeah, plus I don't want to write in type JSON.",
    "start": "1378733",
    "end": "1384733"
  },
  {
    "text": "Or we could just like embed everything into YAML. It's nothing like writing YAML code.",
    "start": "1386766",
    "end": "1392065"
  },
  {
    "text": "Kubernetes style. Yeah, plus we want all of like the",
    "start": "1392366",
    "end": "1398033"
  },
  {
    "text": "excellent features of effect schema and effect and whatever. And so doing this in code in TypeScript",
    "start": "1398033",
    "end": "1404266"
  },
  {
    "text": "makes a lot of sense from that perspective as well. OK, so maybe like a good place for us to",
    "start": "1404266",
    "end": "1411466"
  },
  {
    "text": "get started would be to start reimagining just like the document type and what that looks like.",
    "start": "1411466",
    "end": "1418933"
  },
  {
    "text": "And I've thought a little bit about this before. So, you know, Mike and I can",
    "start": "1420666",
    "end": "1425899"
  },
  {
    "text": "sort of like hash this out. But in an ideal world, I thought like the",
    "start": "1425899",
    "end": "1431132"
  },
  {
    "text": "document type itself could be generic on a few different fields.",
    "start": "1431133",
    "end": "1435899"
  },
  {
    "text": "No pun intended because the first generic I thought could be like the fields of the document,",
    "start": "1437600",
    "end": "1443600"
  },
  {
    "text": "meaning like the if we think back to the like Docs page config",
    "start": "1444366",
    "end": "1450699"
  },
  {
    "text": "that I showed you before. Kind of like the front matter fields.",
    "start": "1450699",
    "end": "1455766"
  },
  {
    "text": "Oops. So like, you know, we have our.",
    "start": "1456566",
    "end": "1462500"
  },
  {
    "text": "Wow, why can't I type today? We have like our title, which is, you know, welcome to effect, etc.",
    "start": "1463866",
    "end": "1472266"
  },
  {
    "text": "And so like I think being able to see like when you hover a document, like if we were to like create a Docs page or something like",
    "start": "1472933",
    "end": "1480100"
  },
  {
    "text": "that, which is a document itself, being able to like hover this and see like the fields that one",
    "start": "1480100",
    "end": "1488766"
  },
  {
    "text": "would expect to be in the document and like the type of those that like the actual type that one would expect.",
    "start": "1488766",
    "end": "1493966"
  },
  {
    "text": "I think is desirable. I also think it would be kind of",
    "start": "1494000",
    "end": "1500000"
  },
  {
    "text": "interesting if we could keep the computed field type in here, whether we merge these two together or",
    "start": "1500000",
    "end": "1506299"
  },
  {
    "text": "not, it would be interesting also to be able to like as a user when I'm like writing my document,",
    "start": "1506300",
    "end": "1513166"
  },
  {
    "text": "writing the computed fields, it would be kind of interesting to be able to hover and see like, you",
    "start": "1513166",
    "end": "1519199"
  },
  {
    "text": "know, these are the fields and these are the computed fields of the document.",
    "start": "1519199",
    "end": "1522466"
  },
  {
    "text": "It might be possible for us to like merge these together, it might not be. But for now, we can keep them separate",
    "start": "1524433",
    "end": "1530033"
  },
  {
    "text": "and sort of think about it. And yeah, so maybe we can start there.",
    "start": "1530033",
    "end": "1538533"
  },
  {
    "text": "let's think about like, if we were to create like a post, keep things simple",
    "start": "1539766",
    "end": "1547398"
  },
  {
    "text": "and make which takes",
    "start": "1547399",
    "end": "1554000"
  },
  {
    "text": "a field and returns a document, which we don't know what's going in here yet. But the idea that I have is kind of like,",
    "start": "1554000",
    "end": "1561699"
  },
  {
    "text": "again, just kind of like giving everybody an idea of what I was thinking.",
    "start": "1563100",
    "end": "1568000"
  },
  {
    "text": "So this would be like a post, I could have a description, which is like the posts.",
    "start": "1570100",
    "end": "1575166"
  },
  {
    "text": "We could. So I think having like the source here also, so like if we have like a.",
    "start": "1577300",
    "end": "1584766"
  },
  {
    "text": "Function file system.",
    "start": "1588500",
    "end": "1591266"
  },
  {
    "text": "Again, this is just this is my ideal API. See what it does anything for now.",
    "start": "1594033",
    "end": "1599633"
  },
  {
    "text": "See what it does anything for now. But maybe like, I don't know.",
    "start": "1599633",
    "end": "1604466"
  },
  {
    "text": "Pass in a glob of like content.",
    "start": "1606133",
    "end": "1608899"
  },
  {
    "text": "Posts. Right, like, you know,",
    "start": "1614399",
    "end": "1620199"
  },
  {
    "text": "give me all the posts. For this particular document. What else?",
    "start": "1620366",
    "end": "1625233"
  },
  {
    "text": "What else fields, obviously fields. Right. And for fields, we're gonna.",
    "start": "1625766",
    "end": "1632132"
  },
  {
    "text": "Basically straight schema. Yep. I don't know, like if it makes more sense",
    "start": "1634166",
    "end": "1640000"
  },
  {
    "text": "and I have to install this. So give me one sec.",
    "start": "1640000",
    "end": "1643766"
  },
  {
    "text": "Add.",
    "start": "1649333",
    "end": "1649766"
  },
  {
    "text": "So I don't know if it makes sense for fields to be a straight schema or for us to always enforce that",
    "start": "1667199",
    "end": "1672766"
  },
  {
    "text": "it'd be like a struct. In the like because I don't know if it really if you'd ever have a",
    "start": "1672766",
    "end": "1678333"
  },
  {
    "text": "field that's like this, right? So like. Yeah, probably not.",
    "start": "1678333",
    "end": "1684333"
  },
  {
    "text": "So I kind of think like, you know, in schema, there's this type schema dot",
    "start": "1685133",
    "end": "1691033"
  },
  {
    "text": "struct dot fields, which represents kind of like what I'm talking about where you",
    "start": "1691033",
    "end": "1696133"
  },
  {
    "text": "have like essentially you can actually go look at the type. It's essentially just like a mapped type of.",
    "start": "1696133",
    "end": "1703300"
  },
  {
    "text": "Or indexed a type with an index signature of a property key and then maps to some schema, right?",
    "start": "1703766",
    "end": "1709500"
  },
  {
    "text": "So I think this is kind of what we want. Maybe we can go with it and sort of think about it, but.",
    "start": "1709733",
    "end": "1714565"
  },
  {
    "text": "Maybe we have a title and maybe we say schema dot non empty. I think this is getting changed to non",
    "start": "1716100",
    "end": "1721866"
  },
  {
    "text": "empty string in the next version. But like the idea here is that.",
    "start": "1721866",
    "end": "1728433"
  },
  {
    "text": "The idea here is that like your fields are always a struct. They're always going to be the like fields of a struct and like then you have",
    "start": "1729833",
    "end": "1735300"
  },
  {
    "text": "the ability to define your fields with with schema itself, which is really nice",
    "start": "1735300",
    "end": "1741766"
  },
  {
    "text": "because you can do like filters transformations. You can do validation things like that. All the goodies that you get with schema.",
    "start": "1741766",
    "end": "1747933"
  },
  {
    "text": "You would essentially have. On your document already.",
    "start": "1749966",
    "end": "1757033"
  },
  {
    "text": "And you also have to think about how to define like computed fields and stuff like that.",
    "start": "1758399",
    "end": "1764199"
  },
  {
    "text": "Yeah, I mean in an ideal world. I think a computed field would look something like like if we if we pretend",
    "start": "1765233",
    "end": "1771632"
  },
  {
    "text": "if we pretend that we think we can put it on here, which I think from a TypeScript perspective.",
    "start": "1771633",
    "end": "1777066"
  },
  {
    "text": "This is not going to work, but if we say maybe like we want to slug computed field, right?",
    "start": "1777266",
    "end": "1782333"
  },
  {
    "text": "We still have a name which could be the slug or something. Maybe this name is actually derived from",
    "start": "1782366",
    "end": "1787566"
  },
  {
    "text": "the key in this case could have a description, which is like the title slug.",
    "start": "1787566",
    "end": "1793065"
  },
  {
    "text": "I think a resolve function which returns some effect.",
    "start": "1794000",
    "end": "1800933"
  },
  {
    "text": "Right and I think. It would be really nice if similar to how",
    "start": "1803100",
    "end": "1808533"
  },
  {
    "text": "a content layer already works. We get metadata like when you define a",
    "start": "1808533",
    "end": "1813733"
  },
  {
    "text": "computed field and content layer currently you get access to the fields of your document, right?",
    "start": "1813733",
    "end": "1819833"
  },
  {
    "text": "So you get access to the fields the existing fields these fields in your document.",
    "start": "1819833",
    "end": "1825232"
  },
  {
    "text": "And you also get access to in here like in the object that's passed to that's",
    "start": "1826866",
    "end": "1833199"
  },
  {
    "text": "passed to the resolve function. You get all your like fields and stuff,",
    "start": "1833199",
    "end": "1838466"
  },
  {
    "text": "but you also get metadata related to the document source. So if we were to call back to the.",
    "start": "1838466",
    "end": "1845833"
  },
  {
    "text": "Stuff I was showing you before from content layer you get access to things like the raw the file system path that",
    "start": "1846833",
    "end": "1854333"
  },
  {
    "text": "the document was found at you get access to the file name, etc, etc. So I think.",
    "start": "1854333",
    "end": "1859433"
  },
  {
    "text": "I have in my ideal API because I've been thinking about this for a little bit. You'd also have something like you know,",
    "start": "1861000",
    "end": "1867466"
  },
  {
    "text": "maybe meta or source meta. Here where that's important effect.",
    "start": "1867466",
    "end": "1873066"
  },
  {
    "text": "The other side this could also be quite literally a schema transformation.",
    "start": "1875533",
    "end": "1879132"
  },
  {
    "text": "It could be yeah.",
    "start": "1881266",
    "end": "1882066"
  },
  {
    "text": "Right where we would do like maybe like fields title and again, we don't have to go this route.",
    "start": "1887166",
    "end": "1892433"
  },
  {
    "text": "But they just like think about what this would look like.",
    "start": "1893366",
    "end": "1896666"
  },
  {
    "text": "This could be a schema transformation. I mean if if fields",
    "start": "1898699",
    "end": "1904266"
  },
  {
    "text": "instead of being just a structure is is a schema.",
    "start": "1904266",
    "end": "1909666"
  },
  {
    "text": "Then we could build some. Some higher order functions on top of on",
    "start": "1910866",
    "end": "1916600"
  },
  {
    "text": "top of a schema where we would say like the schema.pipe add computed field and do it on a step",
    "start": "1916600",
    "end": "1924466"
  },
  {
    "text": "by step basis so we get progressively access to like the previous type.",
    "start": "1924466",
    "end": "1929366"
  },
  {
    "text": "And so on and so forth. That's that's just an idea. Yeah, that's what I would that would be kind of cool.",
    "start": "1930366",
    "end": "1935433"
  },
  {
    "text": "The idea I had had related to schema for computed fields and we can again go whichever way.",
    "start": "1936166",
    "end": "1941366"
  },
  {
    "text": "I don't really care but was to pass in the schema that you expect.",
    "start": "1941366",
    "end": "1945466"
  },
  {
    "text": "Schema.NonEmpty. Where this schema describes like the the",
    "start": "1947266",
    "end": "1954299"
  },
  {
    "text": "expected return type from the resolve function so that we have the ability to validate.",
    "start": "1954300",
    "end": "1958500"
  },
  {
    "text": "But I kind of like the idea that you had Mike where like if field is a schema already.",
    "start": "1959500",
    "end": "1965966"
  },
  {
    "text": "Maybe we could use schema transformation somehow to to get rid of the need to do this.",
    "start": "1967133",
    "end": "1971433"
  },
  {
    "text": "But anyways, if we start thinking about",
    "start": "1972333",
    "end": "1980266"
  },
  {
    "text": "this maybe like to make things slightly simpler for ourselves for the moment. We can think about just this right.",
    "start": "1980266",
    "end": "1990266"
  },
  {
    "text": "So if a document has a name and it also has a possible description.",
    "start": "1991600",
    "end": "1997166"
  },
  {
    "text": "I think in the end it would be easier for us to work with.",
    "start": "1998500",
    "end": "2002033"
  },
  {
    "text": "The on the resolved document type to have an option of a string for description.",
    "start": "2004133",
    "end": "2008933"
  },
  {
    "text": "For now you can just say that source is anything because or we can even do.",
    "start": "2012466",
    "end": "2017600"
  },
  {
    "text": "Right.",
    "start": "2030033",
    "end": "2031232"
  },
  {
    "text": "Now. If we start to think about like how make would work.",
    "start": "2041766",
    "end": "2048898"
  },
  {
    "text": "Because. Let's let's actually start thinking about how make might work because.",
    "start": "2051633",
    "end": "2056866"
  },
  {
    "text": "I'm trying to think about like. What the options would look like right so if we.",
    "start": "2060866",
    "end": "2066833"
  },
  {
    "text": "So. Fields extends Schema.struct.",
    "start": "2067866",
    "end": "2072166"
  },
  {
    "text": "Fields. And we say that options they can be a name.",
    "start": "2073266",
    "end": "2080500"
  },
  {
    "text": "We don't need a description description.",
    "start": "2081766",
    "end": "2085133"
  },
  {
    "text": "She'll just take an optional argument. Optional description. You don't need source.",
    "start": "2087466",
    "end": "2093699"
  },
  {
    "text": "When we look at post here. This is not really the user experience I",
    "start": "2107100",
    "end": "2112199"
  },
  {
    "text": "want from my like from my perspective. This should be title string right. I think.",
    "start": "2112199",
    "end": "2117066"
  },
  {
    "text": "One way we could potentially do that is we could make. Because.",
    "start": "2118466",
    "end": "2123366"
  },
  {
    "text": "If we think about how content layer is going to handle these documents. Like in reality like when the document",
    "start": "2124199",
    "end": "2129366"
  },
  {
    "text": "gets imported into the engine. We can call it like the core engine of content layer.",
    "start": "2129366",
    "end": "2134066"
  },
  {
    "text": "It all the type information that we have like in the config file is going to be lost. So from the config file perspective.",
    "start": "2134666",
    "end": "2141099"
  },
  {
    "text": "We want fields to be like the simplified. Like you know title string etc etc like",
    "start": "2141733",
    "end": "2147399"
  },
  {
    "text": "show you the actual like destination type of that schema. The type of the schema not the encoded",
    "start": "2147399",
    "end": "2152733"
  },
  {
    "text": "type or the like struct type. We want this to be like the destination type. So what we could do is.",
    "start": "2152733",
    "end": "2159633"
  },
  {
    "text": "We could do. Here.",
    "start": "2160466",
    "end": "2163899"
  },
  {
    "text": "And then instead of.",
    "start": "2169866",
    "end": "2171333"
  },
  {
    "text": "Because again like when this document gets imported into content layer and we'll have to probably add like some variance or something so that this isn't",
    "start": "2175766",
    "end": "2182466"
  },
  {
    "text": "just a dangling type. But. When we import this document into the engine. The type information",
    "start": "2182466",
    "end": "2189433"
  },
  {
    "text": "about the fields is gone. We don't we don't have any of that information anymore. We just have the schema itself so we",
    "start": "2189433",
    "end": "2195833"
  },
  {
    "text": "don't really need this to be typed but we want this to be typed. What do you think?",
    "start": "2195833",
    "end": "2200966"
  },
  {
    "text": "Because now like if we look at post. We get like the actual like fields themselves. Like in the destination type",
    "start": "2201300",
    "end": "2207066"
  },
  {
    "text": "when the schema is decoded. Or when the document is decoded like this",
    "start": "2207066",
    "end": "2212166"
  },
  {
    "text": "is what you'll be left with in terms of fields. Yeah I mean we have to we have to decide because.",
    "start": "2212166",
    "end": "2218066"
  },
  {
    "text": "With schema that this this different things we could track we could even track the input type.",
    "start": "2218800",
    "end": "2224632"
  },
  {
    "text": "But I don't I don't think that that would be that would be relevant if you want the types clean.",
    "start": "2225433",
    "end": "2231833"
  },
  {
    "text": "This is probably this is probably the best way. All right so just",
    "start": "2232166",
    "end": "2237566"
  },
  {
    "text": "Just tracking the the output.",
    "start": "2237566",
    "end": "2238866"
  },
  {
    "text": "I am going to need your help with probably the variance annotations for this but let's create a prototype type.",
    "start": "2243466",
    "end": "2249033"
  },
  {
    "text": "We do this for those of you who may be less familiar with like the effect library and like.",
    "start": "2249866",
    "end": "2255533"
  },
  {
    "text": "The types shenanigans we do inside the library to make things nice on the outside. We do this pretty frequently inside the",
    "start": "2256466",
    "end": "2263666"
  },
  {
    "text": "library we kind of define like prototypes or variance and types for our data types.",
    "start": "2263666",
    "end": "2269433"
  },
  {
    "text": "Both to one make them you like kind of unique and also to define methods that",
    "start": "2269466",
    "end": "2277000"
  },
  {
    "text": "maybe we want present on every. One of these types and also to define",
    "start": "2277000",
    "end": "2283800"
  },
  {
    "text": "variance so let's do. Const type ID.",
    "start": "2283800",
    "end": "2290333"
  },
  {
    "text": "unique symbol. For effect.",
    "start": "2291666",
    "end": "2297666"
  },
  {
    "text": "Let's just be named this project content for the moment. This is like very much subject to change.",
    "start": "2298266",
    "end": "2304233"
  },
  {
    "text": "Type ID.",
    "start": "2312233",
    "end": "2312632"
  },
  {
    "text": "So let's do.",
    "start": "2317466",
    "end": "2319366"
  },
  {
    "text": "So the prototype itself will take fields. This thing will take fields.",
    "start": "2337600",
    "end": "2346266"
  },
  {
    "text": "And I guess this would be in very unlike. I think it's safe to make invariant at first.",
    "start": "2350500",
    "end": "2356466"
  },
  {
    "text": "And eventually make it covariant contra variant but I do think it's going to be in there and at the end.",
    "start": "2358066",
    "end": "2363899"
  },
  {
    "text": "Maybe this is a good opportunity to explain in variance.",
    "start": "2368333",
    "end": "2372266"
  },
  {
    "text": "Probably not. The simple version extends.",
    "start": "2374033",
    "end": "2381533"
  },
  {
    "text": "I think the simple version look it's. It's pretty much how TypeScript handles it.",
    "start": "2382766",
    "end": "2389733"
  },
  {
    "text": "There's two type modifiers. It's called in and out If a generic is used both. In an input and in an output.",
    "start": "2390533",
    "end": "2399333"
  },
  {
    "text": "You have to. Say that it is used both in an input and in an output.",
    "start": "2400133",
    "end": "2404766"
  },
  {
    "text": "And in this case the type would be. Invariant. If instead it's only used in an output.",
    "start": "2405566",
    "end": "2412633"
  },
  {
    "text": "It's going to be covariant if it's only used as an input. It's going to be a contra variant. Now those are odd and weird names that",
    "start": "2413366",
    "end": "2421866"
  },
  {
    "text": "Are not really supposed to mean anything unless you know.",
    "start": "2421866",
    "end": "2426866"
  },
  {
    "text": "You know the meanings in. In type assignability in terms of like.",
    "start": "2426933",
    "end": "2432633"
  },
  {
    "text": "Categorical thinking. But I don't think it should it should matter here.",
    "start": "2433766",
    "end": "2439566"
  },
  {
    "text": "And also by the way. Max you are using. Methods.",
    "start": "2440366",
    "end": "2445033"
  },
  {
    "text": "Which are bivariant That's. It's not how it's supposed to be used.",
    "start": "2445466",
    "end": "2454033"
  },
  {
    "text": "This is why Mike's on the call.",
    "start": "2455133",
    "end": "2457066"
  },
  {
    "text": "Just to give people a reason like I mean I'm this is my mental model may not be 100%",
    "start": "2461033",
    "end": "2466066"
  },
  {
    "text": "It is it is exactly correct. And if you think about it if we have only.",
    "start": "2466166",
    "end": "2471965"
  },
  {
    "text": "Like the covariant thing if I have. a document of some type which is, like, I",
    "start": "2473333",
    "end": "2484266"
  },
  {
    "text": "don't know, let's pretend fields can be a string for the sake of simplicity. If I have a document of a string and I have a",
    "start": "2484266",
    "end": "2491932"
  },
  {
    "text": "document of a string or number,",
    "start": "2491933",
    "end": "2495800"
  },
  {
    "text": "the one that the document of a string could be used in place of a document of string or number,",
    "start": "2497266",
    "end": "2504132"
  },
  {
    "text": "because a function that always returns a string is also a function",
    "start": "2505399",
    "end": "2510533"
  },
  {
    "text": "that always returns a string or a number. It's just one string, just returns one of the two",
    "start": "2510533",
    "end": "2516966"
  },
  {
    "text": "instead of both. That's not true if I have a function that takes this as",
    "start": "2516966",
    "end": "2523333"
  },
  {
    "text": "an input, because then a function that takes a number of a",
    "start": "2523333",
    "end": "2529066"
  },
  {
    "text": "string or a function that takes a string, I cannot assign a",
    "start": "2529166",
    "end": "2534466"
  },
  {
    "text": "function that only takes a string to something that requires a function",
    "start": "2534466",
    "end": "2540066"
  },
  {
    "text": "that takes as arguments string or number, because if that is used at any point in",
    "start": "2540066",
    "end": "2546866"
  },
  {
    "text": "time, it could be called with a number, and of course, my implementation only accepts a string.",
    "start": "2546866",
    "end": "2551833"
  },
  {
    "text": "So this is assignability. And if the generic appears",
    "start": "2552833",
    "end": "2558699"
  },
  {
    "text": "both in an input and an output, then there's no widening possible.",
    "start": "2558866",
    "end": "2563366"
  },
  {
    "text": "A widening in the input sense would be instead of an and, which is",
    "start": "2565399",
    "end": "2571399"
  },
  {
    "text": "different from the from the or. Now, if you think in terms of an and, the example with string or",
    "start": "2571399",
    "end": "2579866"
  },
  {
    "text": "number no longer makes any sense, but it could be that I take a record with, I don't know,",
    "start": "2579866",
    "end": "2588066"
  },
  {
    "text": "a to be number and the record of b to be number.",
    "start": "2588633",
    "end": "2592932"
  },
  {
    "text": "If I have a function that requires as an",
    "start": "2593833",
    "end": "2599666"
  },
  {
    "text": "input, a structure with only a, I can call it with a and b.",
    "start": "2599666",
    "end": "2605566"
  },
  {
    "text": "That's right. I'm passing more than what's needed. Not not less. So this is",
    "start": "2606800",
    "end": "2612533"
  },
  {
    "text": "the widening on the input side and the widening on the output side. If the type is used both in",
    "start": "2612533",
    "end": "2618533"
  },
  {
    "text": "an input and in an output, it cannot be widened at all, which is what invariance means.",
    "start": "2618533",
    "end": "2623932"
  },
  {
    "text": "Cool. Apologies for the tangent. That's I requested it. So it's my fault.",
    "start": "2625199",
    "end": "2631033"
  },
  {
    "text": "But thank you. Yeah, that's I think that's a good way to think about it. Oops. I'm going to delete",
    "start": "2632033",
    "end": "2640100"
  },
  {
    "text": "these. But the other benefit like that we get from doing this is like the phantom field doesn't",
    "start": "2640100",
    "end": "2647265"
  },
  {
    "text": "give us issues. But I mean, there's other ways to get around that. But I think the main benefit we get is that like kind of like assignability.",
    "start": "2647266",
    "end": "2653233"
  },
  {
    "text": "And then having the type ID on here makes the document type like unique, so to speak, like",
    "start": "2654466",
    "end": "2659000"
  },
  {
    "text": "when we create these a structure that has these properties, but no type ID would not be assignable to a document. So that's kind",
    "start": "2659533",
    "end": "2667300"
  },
  {
    "text": "of like why we oftentimes add these type IDs to make the types unique. One last thing. Actually,",
    "start": "2667300",
    "end": "2677199"
  },
  {
    "text": "I'm not going to add it yet. I was thinking I might make this a pipeable thing, but what the hell?",
    "start": "2677199",
    "end": "2682800"
  },
  {
    "text": "Let's just add it. Pipeable.",
    "start": "2682800",
    "end": "2685933"
  },
  {
    "text": "What's going on with my auto imports? We also have like these type helpers within effect that are basically just ways to",
    "start": "2693233",
    "end": "2700866"
  },
  {
    "text": "shorthand define these functions. It looks less messy. So if you see me using like these invariant or there's also covariant and",
    "start": "2700866",
    "end": "2708166"
  },
  {
    "text": "contravariant in the effect types module, that's what it is.",
    "start": "2708533",
    "end": "2713600"
  },
  {
    "text": "Hello.",
    "start": "2715800",
    "end": "2716533"
  },
  {
    "text": "Cool. So now all that just so that we can",
    "start": "2733100",
    "end": "2739933"
  },
  {
    "text": "now when we hover a document, see the actual types and we can add a few more. Maybe I don't",
    "start": "2739933",
    "end": "2746399"
  },
  {
    "text": "know. Let's actually say that there's also an author.",
    "start": "2746399",
    "end": "2752432"
  },
  {
    "text": "Right? And we have a",
    "start": "2754433",
    "end": "2756466"
  },
  {
    "text": "I think this will probably illustrate the point a little bit better. Okay.",
    "start": "2761600",
    "end": "2764099"
  },
  {
    "text": "I don't know.",
    "start": "2767133",
    "end": "2769133"
  },
  {
    "text": "So now when we hover post, we can actually do Yeah. So now when we hover a document, we",
    "start": "2779766",
    "end": "2796333"
  },
  {
    "text": "get like the type that we're going to be operating with. When we actually generate these",
    "start": "2796333",
    "end": "2804633"
  },
  {
    "text": "documents, this is the type of the fields that you'd have access to, which I think is also useful",
    "start": "2804633",
    "end": "2809866"
  },
  {
    "text": "because the other thing that Content Layer does, which I think I like completely forgot to highlight, we saw it like when I went",
    "start": "2809866",
    "end": "2816133"
  },
  {
    "text": "through the index.d.ts, like the TypeScript declaration file",
    "start": "2816133",
    "end": "2821333"
  },
  {
    "text": "but it actually generates types for your documents as well. So that like when you import all blog",
    "start": "2821333",
    "end": "2826633"
  },
  {
    "text": "posts, all docs pages, whatever, it's typed with the fields that you have",
    "start": "2826633",
    "end": "2833266"
  },
  {
    "text": "access to in addition to some like metadata. So these",
    "start": "2833266",
    "end": "2837333"
  },
  {
    "text": "would kind of be the fields that you'd have access to on the output document type, as well as like the generated document once the",
    "start": "2838466",
    "end": "2845265"
  },
  {
    "text": "engine processes everything. So I'm going to keep",
    "start": "2845266",
    "end": "2853066"
  },
  {
    "text": "ignoring computed fields for a minute because the other thing. Well,",
    "start": "2853066",
    "end": "2859132"
  },
  {
    "text": "no, let's not ignore computed fields. Let's see. So I think from my",
    "start": "2859133",
    "end": "2867033"
  },
  {
    "text": "perspective, we have solved at least this piece. I'm not 100%",
    "start": "2867033",
    "end": "2874765"
  },
  {
    "text": "sure whether we're going to be able to like merge the computed fields into these fields. So we only",
    "start": "2874766",
    "end": "2880066"
  },
  {
    "text": "have one set of fields. We can sort of talk about that as we go. But from a type perspective,",
    "start": "2880066",
    "end": "2888899"
  },
  {
    "text": "I really don't actually know. Like if we were to define computed fields",
    "start": "2889166",
    "end": "2894066"
  },
  {
    "text": "here, I don't really know what this would look like. I think it",
    "start": "2897433",
    "end": "2902833"
  },
  {
    "text": "would be what we want is",
    "start": "2902833",
    "end": "2906566"
  },
  {
    "text": "this, right? Maybe. And I don't know how",
    "start": "2908699",
    "end": "2913866"
  },
  {
    "text": "you feel about this, Mike, maybe we can go with this for now. And then always. I don't think this",
    "start": "2913866",
    "end": "2918933"
  },
  {
    "text": "will ever work. Yeah, I don't think so either. That's why I'm saying that. It's not very useful",
    "start": "2918933",
    "end": "2926833"
  },
  {
    "text": "to go on a road. We already know it's not going to work. Okay, so let's do this instead. Let's do",
    "start": "2926833",
    "end": "2933266"
  },
  {
    "text": "let's make let's take",
    "start": "2933266",
    "end": "2939433"
  },
  {
    "text": "this and put it down here and think about this for a second. So we want to take a document we want to add a",
    "start": "2939433",
    "end": "2945265"
  },
  {
    "text": "computed field to it. So we could make a method on the first",
    "start": "2945266",
    "end": "2950432"
  },
  {
    "text": "question I would ask also is what do we need in the computed field? Let's say we are two computed",
    "start": "2950433",
    "end": "2955833"
  },
  {
    "text": "fields. Are they added in a sequential manner so that when we",
    "start": "2955833",
    "end": "2961000"
  },
  {
    "text": "add the second one, the first one is already present. Or are they added in parallel so that",
    "start": "2961000",
    "end": "2968265"
  },
  {
    "text": "they don't know about each other? My perspective would be that the only like static information",
    "start": "2969000",
    "end": "2974833"
  },
  {
    "text": "that you have available to you with computed fields, like to make things like as fast as possible, I think you should only I mean,",
    "start": "2975033",
    "end": "2982333"
  },
  {
    "text": "we could we could debate this, but I think like they should be done in parallel so that you only have",
    "start": "2983033",
    "end": "2988932"
  },
  {
    "text": "the fields and the source meta available to you to compute the field. So you because adding",
    "start": "2988933",
    "end": "2996199"
  },
  {
    "text": "them sequentially, like if we have like a ton of computed fields, that kind of like makes it extremely difficult to",
    "start": "2996199",
    "end": "3001433"
  },
  {
    "text": "do, obviously, the concurrent side of things, right? Like if we did them, I mean, the computed",
    "start": "3001433",
    "end": "3006966"
  },
  {
    "text": "fields should not have side effects in general. So doesn't really matter if you do it in",
    "start": "3006966",
    "end": "3012000"
  },
  {
    "text": "parallel or in sequence. Yeah. Like even if you have all effects,",
    "start": "3012000",
    "end": "3018399"
  },
  {
    "text": "it's actually going to be more performant if you do them in sequence, unless you are actually having any, any IO that you can",
    "start": "3018399",
    "end": "3025933"
  },
  {
    "text": "parallelize. So I think it's it's rather well, I was I was",
    "start": "3025933",
    "end": "3032366"
  },
  {
    "text": "thinking like you could. So again, we can debate this, but",
    "start": "3032366",
    "end": "3036566"
  },
  {
    "text": "we could give users in this resolve method, we could give them we can't I",
    "start": "3037500",
    "end": "3044333"
  },
  {
    "text": "don't it's not possible from my perspective to give them access to unlimited context,",
    "start": "3044333",
    "end": "3049432"
  },
  {
    "text": "because there's no way to resolve that. But we could give them",
    "start": "3049433",
    "end": "3055166"
  },
  {
    "text": "access to the context that we know is going to be present at this time. For example, when we",
    "start": "3055166",
    "end": "3060333"
  },
  {
    "text": "actually run the document through the engine, I mean, we know",
    "start": "3060333",
    "end": "3066265"
  },
  {
    "text": "we're going to need file system, we know we're going to need path, we know we're going to need like a pretty much a lot of the platform",
    "start": "3066266",
    "end": "3071399"
  },
  {
    "text": "specific stuff. So we could allow this effect access to",
    "start": "3071399",
    "end": "3078000"
  },
  {
    "text": "pieces of the context that we know we're going to have that we can provide like the file system, for example. So the user could in theory",
    "start": "3078066",
    "end": "3087266"
  },
  {
    "text": "do IO. And that actually replicates kind of the behavior of content layer currently where that",
    "start": "3087266",
    "end": "3093633"
  },
  {
    "text": "resolve function is just something that resolves to a promise. So the user could technically do whatever they want. Yeah,",
    "start": "3093633",
    "end": "3100366"
  },
  {
    "text": "but on the other hand, if we think about an API where you can do",
    "start": "3100366",
    "end": "3106265"
  },
  {
    "text": "progressively, like if we think this about something chainable, you say dot at fields, at computed",
    "start": "3106266",
    "end": "3113866"
  },
  {
    "text": "fields, you could specify at computed fields and specify five of those, which will run in",
    "start": "3113866",
    "end": "3120265"
  },
  {
    "text": "parallel, and then do another at computed fields that has access to the previous one. So you kind of",
    "start": "3120266",
    "end": "3127266"
  },
  {
    "text": "control what you want to do. Because I",
    "start": "3127266",
    "end": "3132333"
  },
  {
    "text": "don't know, I do see usages for like, I want to compute the slide, then I want to compute",
    "start": "3132333",
    "end": "3137533"
  },
  {
    "text": "something else, which depends on the slide. Yeah, could be would be quite tedious to have to",
    "start": "3137533",
    "end": "3143466"
  },
  {
    "text": "recompute the slide because, you know, being an effect doesn't mean",
    "start": "3143466",
    "end": "3150166"
  },
  {
    "text": "that it actually performs something async right, even if it performs IO, but it is",
    "start": "3150166",
    "end": "3156666"
  },
  {
    "text": "synchronous IO, there's no opportunity to do anything parallel. I think the parallelism that we",
    "start": "3156666",
    "end": "3163266"
  },
  {
    "text": "want is more at the document level. We want to process two documents in independent threads, not",
    "start": "3163266",
    "end": "3171333"
  },
  {
    "text": "not really this level. But those just like,",
    "start": "3171333",
    "end": "3176366"
  },
  {
    "text": "No, I think that makes sense. So maybe like even if we say, okay,",
    "start": "3176966",
    "end": "3182100"
  },
  {
    "text": "fine, like the computed fields are actually a process sequentially. Like every time you add a computed field, like",
    "start": "3182100",
    "end": "3188932"
  },
  {
    "text": "with maybe like even within the fields, we could, you know, like, let's let's try it your way. Let's try it your way. I",
    "start": "3188933",
    "end": "3194733"
  },
  {
    "text": "think that probably gives people like the most flexibility. So",
    "start": "3194733",
    "end": "3203266"
  },
  {
    "text": "maybe we can have we could we",
    "start": "3203266",
    "end": "3211166"
  },
  {
    "text": "could do this one of two ways we could make add computed field the pipeable like type of situation, or we could just add a method on the",
    "start": "3211166",
    "end": "3216765"
  },
  {
    "text": "document, which returns like a new document. Let's see how",
    "start": "3216766",
    "end": "3223632"
  },
  {
    "text": "like a method would feel. Right, so if we do the title slug schema,",
    "start": "3223633",
    "end": "3236533"
  },
  {
    "text": "you know, that's non empty, and resolve fits access to the fields,",
    "start": "3237233",
    "end": "3243333"
  },
  {
    "text": "whoops, and the meta keep calling the source meta.",
    "start": "3243333",
    "end": "3248633"
  },
  {
    "text": "And again, this is obviously not how you would compute a slug. But",
    "start": "3253533",
    "end": "3256699"
  },
  {
    "text": "I don't know, I think this isn't too bad. One thing to consider is on the type",
    "start": "3269899",
    "end": "3275066"
  },
  {
    "text": "level, we might want to like prevent collisions between computed fields and fields, etc. But",
    "start": "3275066",
    "end": "3281666"
  },
  {
    "text": "I think this is pretty good. Like, I don't know, maybe this is the slug.",
    "start": "3281666",
    "end": "3288199"
  },
  {
    "text": "And field that slug dot slice. I don't know. Like, well, this allows to add only one",
    "start": "3295699",
    "end": "3303033"
  },
  {
    "text": "computed field there. Yeah, like, we could do it this way, we",
    "start": "3303033",
    "end": "3310399"
  },
  {
    "text": "could we could make it take an array, maybe I'm just not exactly sure from the array approach, like on a type level,",
    "start": "3310399",
    "end": "3316100"
  },
  {
    "text": "how we would do that. But like this, this would be like the most if",
    "start": "3316100",
    "end": "3322333"
  },
  {
    "text": "we if we say that everything's going to be done sequentially, then like, this would be like the most we could pass",
    "start": "3322333",
    "end": "3328300"
  },
  {
    "text": "an array, I'm just saying, like from a type level. This might be easier. I don't know.",
    "start": "3328300",
    "end": "3334033"
  },
  {
    "text": "I would simply have like this take a variadic number of arguments, add computed, and then",
    "start": "3335433",
    "end": "3341866"
  },
  {
    "text": "a variadic number of things so that you can either do one or",
    "start": "3341899",
    "end": "3346866"
  },
  {
    "text": "something like this. Something along those lines. So you have both the benefit of",
    "start": "3357699",
    "end": "3363833"
  },
  {
    "text": "parallelism if you want and sequentiality if you want. Like these",
    "start": "3364300",
    "end": "3369566"
  },
  {
    "text": "in the in the second one, you will not see those like so those two",
    "start": "3369566",
    "end": "3375566"
  },
  {
    "text": "can run in parallel. But if you then do another addComputedFields, then you see the the",
    "start": "3375566",
    "end": "3383966"
  },
  {
    "text": "previous. I don't know if this can work or or not, but",
    "start": "3383966",
    "end": "3389066"
  },
  {
    "text": "let's find out. Let's find out. Let's find out. Let's call this something else.",
    "start": "3389833",
    "end": "3394266"
  },
  {
    "text": "Okay.",
    "start": "3395533",
    "end": "3398333"
  },
  {
    "text": "Does the computed field always have a",
    "start": "3407899",
    "end": "3416733"
  },
  {
    "text": "name for sure? Yeah, I think it has to. Then you could simply take an object of name and spec",
    "start": "3416733",
    "end": "3425033"
  },
  {
    "text": "instead of might look easier.",
    "start": "3425033",
    "end": "3428765"
  },
  {
    "text": "Yes.",
    "start": "3439833",
    "end": "3440899"
  },
  {
    "text": "There we go. One more parenthesis at the end.",
    "start": "3458133",
    "end": "3463899"
  },
  {
    "text": "Yeah, this is cool. All right, let's try.",
    "start": "3467100",
    "end": "3471133"
  },
  {
    "text": "So maybe we can either do it on the document or on the",
    "start": "3473300",
    "end": "3478600"
  },
  {
    "text": "prototype. We'll just do it on the document. Let's do it on the prototype.",
    "start": "3478600",
    "end": "3483266"
  },
  {
    "text": "Add computed fields. All right, and this is going to be",
    "start": "3485333",
    "end": "3503533"
  },
  {
    "text": "record of a string and any which we can fix up in a second.",
    "start": "3505899",
    "end": "3512533"
  },
  {
    "text": "So",
    "start": "3512566",
    "end": "3518000"
  },
  {
    "text": "add computed fields. No, this is going to be a record of string or any and maybe we do like",
    "start": "3523033",
    "end": "3530366"
  },
  {
    "text": "inside here.",
    "start": "3532633",
    "end": "3533266"
  },
  {
    "text": "So",
    "start": "3546300",
    "end": "3546566"
  },
  {
    "text": "a computed field itself is going to have a name. It's going to have a",
    "start": "3551333",
    "end": "3558833"
  },
  {
    "text": "potentially a description like just like the just like the document.",
    "start": "3560466",
    "end": "3565099"
  },
  {
    "text": "I think there's also a mistake in line 31. Yeah, I haven't done anything here yet. I",
    "start": "3580066",
    "end": "3588733"
  },
  {
    "text": "will make this not a method though.",
    "start": "3588733",
    "end": "3591166"
  },
  {
    "text": "Schema.Schema.",
    "start": "3597633",
    "end": "3598733"
  },
  {
    "text": "Any schema except for never.",
    "start": "3603533",
    "end": "3604833"
  },
  {
    "text": "I guess any.",
    "start": "3610166",
    "end": "3610566"
  },
  {
    "text": "For now, we'll make meta any because we haven't even done anything with the document source yet.",
    "start": "3622199",
    "end": "3625733"
  },
  {
    "text": "And for now.",
    "start": "3630600",
    "end": "3631800"
  },
  {
    "text": "So let's take in fields here.",
    "start": "3639233",
    "end": "3645333"
  },
  {
    "text": "The idea here would be that this effect",
    "start": "3645366",
    "end": "3652932"
  },
  {
    "text": "is the return type is restricted to like the return type of the schema. Something like this. I",
    "start": "3652933",
    "end": "3661766"
  },
  {
    "text": "know this isn't necessarily exactly what we want.",
    "start": "3661766",
    "end": "3663933"
  },
  {
    "text": "But the idea here would be that like the the effect returned by",
    "start": "3666866",
    "end": "3672300"
  },
  {
    "text": "resolve is restricted to the schema's return type. So let's just go with this for a second.",
    "start": "3672300",
    "end": "3676500"
  },
  {
    "text": "So",
    "start": "3687666",
    "end": "3687899"
  },
  {
    "text": "so this is going to be",
    "start": "3704566",
    "end": "3706733"
  },
  {
    "text": "a record of string to like really like any computed field.",
    "start": "3710066",
    "end": "3715500"
  },
  {
    "text": "This. I don't think this is going to work.",
    "start": "3724300",
    "end": "3728932"
  },
  {
    "text": "Maybe we can call this like a resolver schema extends.",
    "start": "3739366",
    "end": "3742932"
  },
  {
    "text": "Okay. So.",
    "start": "3781966",
    "end": "3786199"
  },
  {
    "text": "I wonder if to do this progressive announcements, we couldn't actually use the beast type. Well, we eventually we could, but and",
    "start": "3794800",
    "end": "3804265"
  },
  {
    "text": "that's what I think what I had before, but the you mean this type here, right?",
    "start": "3804266",
    "end": "3809233"
  },
  {
    "text": "Like this schema that you're saying before. Yeah. So eventually we want to hoist the like",
    "start": "3814399",
    "end": "3820666"
  },
  {
    "text": "the type of this thing, right? Like this. This should eventually show up in our type signature.",
    "start": "3820666",
    "end": "3826033"
  },
  {
    "text": "He oh, it should eventually show up in our document like type signature.",
    "start": "3826366",
    "end": "3831066"
  },
  {
    "text": "Right. Um, well, I mean, shouldn't the",
    "start": "3831500",
    "end": "3836666"
  },
  {
    "text": "type track in the document be the final type? What do we carry for this computer or not?",
    "start": "3836666",
    "end": "3843399"
  },
  {
    "text": "Well, yeah, in an ideal world, like everything is just in one type. Like, like you say, so like an ideal",
    "start": "3844533",
    "end": "3850765"
  },
  {
    "text": "world, there's no separate type here. This is just like fields. Yeah. And then internally to the document, we",
    "start": "3850766",
    "end": "3856766"
  },
  {
    "text": "would have like a read only of computed fields, which is probably going to be like a read",
    "start": "3856766",
    "end": "3862600"
  },
  {
    "text": "only array of something. Um, computed field.",
    "start": "3862600",
    "end": "3867266"
  },
  {
    "text": "Right. Oh, it's just part of the fields division.",
    "start": "3872533",
    "end": "3877966"
  },
  {
    "text": "The only thing. Well, yeah, we could because what are we",
    "start": "3878366",
    "end": "3883833"
  },
  {
    "text": "taking here? We're taking a name. Yeah, we could potentially like transform",
    "start": "3883833",
    "end": "3889833"
  },
  {
    "text": "this into a schema and attach it to the fields. Yeah, because I think",
    "start": "3889833",
    "end": "3895066"
  },
  {
    "text": "we shouldn't confuse the. Like the structure of the document.",
    "start": "3895066",
    "end": "3901633"
  },
  {
    "text": "We've what we want to specify as an input",
    "start": "3901633",
    "end": "3906699"
  },
  {
    "text": "because the input we're going to specify via via make function anyway.",
    "start": "3906699",
    "end": "3911866"
  },
  {
    "text": "So the final representation might might be different from.",
    "start": "3913133",
    "end": "3916899"
  },
  {
    "text": "From what we manually specify. Yeah. So let's let's try your way then.",
    "start": "3919333",
    "end": "3925433"
  },
  {
    "text": "Let's do. Let's try Schema.Schema.Any I guess",
    "start": "3925433",
    "end": "3934833"
  },
  {
    "text": "something like this. Probably or not even.",
    "start": "3936199",
    "end": "3944066"
  },
  {
    "text": "The result, I'm more thinking about the type of the add computed fields. Okay, let's focus here for a second then.",
    "start": "3952366",
    "end": "3958933"
  },
  {
    "text": "Now this could be fine because you have access to fields here already. So, yeah, you're using a generic",
    "start": "3962433",
    "end": "3970866"
  },
  {
    "text": "prototype, which is fine. Okay, then continue",
    "start": "3970866",
    "end": "3976599"
  },
  {
    "text": "your way and we'll see. I mean, if we can get this without no pun",
    "start": "3976600",
    "end": "3983966"
  },
  {
    "text": "intended using this, it's better. It's a good type on a method.",
    "start": "3983966",
    "end": "3988533"
  },
  {
    "text": "I think, I mean, what I was thinking is like,",
    "start": "3991333",
    "end": "3995799"
  },
  {
    "text": "Like without using, if we did this without using this, just hear me out for a sec. This would be like resolver schema, right?",
    "start": "3999833",
    "end": "4005266"
  },
  {
    "text": "Which extends, schema.schema.any.",
    "start": "4005566",
    "end": "4008733"
  },
  {
    "text": "And then this,",
    "start": "4022300",
    "end": "4024399"
  },
  {
    "text": "Probably gonna have to do some shenanigans, but this will return a document.",
    "start": "4029233",
    "end": "4032866"
  },
  {
    "text": "And in this document, we essentially want to do the equivalent of like fields and it's computed.",
    "start": "4035500",
    "end": "4040899"
  },
  {
    "text": "This is the- Yeah, kind of a merging of the two. Right, so we probably need, we need to",
    "start": "4041500",
    "end": "4047666"
  },
  {
    "text": "improve this generic because we, there are a few things I'm thinking. One- I mean, this generic",
    "start": "4047666",
    "end": "4053066"
  },
  {
    "text": "would be fun to anyway. There is no concrete value of that generic type whatsoever.",
    "start": "4053066",
    "end": "4058366"
  },
  {
    "text": "Right, so what I'm thinking is we might want to do,",
    "start": "4059300",
    "end": "4064366"
  },
  {
    "text": "For each field that we add, we're probably gonna wanna check for collisions with existing fields.",
    "start": "4067500",
    "end": "4073133"
  },
  {
    "text": "So if we took one field in at a time, I'm not 100% sure how to do this with",
    "start": "4073466",
    "end": "4078800"
  },
  {
    "text": "taking in a record yet, but if we took in one field- With an intersection and a check type,",
    "start": "4079333",
    "end": "4088133"
  },
  {
    "text": "which is gonna be never if- Right, all right.",
    "start": "4088133",
    "end": "4093932"
  },
  {
    "text": "But if we took in one field at a time, we could extend a string for",
    "start": "4094366",
    "end": "4100233"
  },
  {
    "text": "the key and then pass that into the computed field where we check for collisions by putting some generic type",
    "start": "4100300",
    "end": "4106100"
  },
  {
    "text": "here that like is, I don't know, computed fields.",
    "start": "4106100",
    "end": "4108933"
  },
  {
    "text": "Name- I don't know if it changes how you do it because",
    "start": "4112000",
    "end": "4115166"
  },
  {
    "text": "you need anyway to guard on the input. We don't have lower bounds in TypeScript",
    "start": "4118933",
    "end": "4124666"
  },
  {
    "text": "where you can say, I want a string which is not something already known.",
    "start": "4124666",
    "end": "4132333"
  },
  {
    "text": "There's no way of doing that through an extents because it would be the opposite of extents, would be extended by-",
    "start": "4132866",
    "end": "4140066"
  },
  {
    "text": "Yeah. So the way of doing a, a lower bound would be to have fields to be computed and",
    "start": "4141233",
    "end": "4150133"
  },
  {
    "text": "some kind of check on computed, which check on computed is gonna be",
    "start": "4151600",
    "end": "4155833"
  },
  {
    "text": "computed if everything is all right. And-",
    "start": "4156666",
    "end": "4160833"
  },
  {
    "text": "This is what I was thinking and then maybe we can translate this into this.",
    "start": "4162266",
    "end": "4166532"
  },
  {
    "text": "Not a method document for a minute.",
    "start": "4167966",
    "end": "4172599"
  },
  {
    "text": "Where we have the name, the resolver schema extends schema.schema.any",
    "start": "4174033",
    "end": "4181066"
  },
  {
    "text": "My point is how do you ensure that the name- Yeah, one sec.",
    "start": "4184600",
    "end": "4189266"
  },
  {
    "text": "I'll show you. You would do name,",
    "start": "4189666",
    "end": "4196166"
  },
  {
    "text": "fields,",
    "start": "4198000",
    "end": "4200033"
  },
  {
    "text": "and then there's something like this. Something like this.",
    "start": "4203933",
    "end": "4207566"
  },
  {
    "text": "Here, take-",
    "start": "4209600",
    "end": "4210466"
  },
  {
    "text": "We would need, do we need name? We would need fields.",
    "start": "4231666",
    "end": "4235100"
  },
  {
    "text": "Okay. Fields.",
    "start": "4246233",
    "end": "4247733"
  },
  {
    "text": "Name extends keyof fields.",
    "start": "4253866",
    "end": "4257333"
  },
  {
    "text": "something like error field name.",
    "start": "4265500",
    "end": "4271933"
  },
  {
    "text": "Name already exists.",
    "start": "4276633",
    "end": "4280566"
  },
  {
    "text": "This is probably very wrong.",
    "start": "4323866",
    "end": "4325966"
  },
  {
    "text": "So at least at this point, if we just return it here for a second, at this point--",
    "start": "4353600",
    "end": "4360433"
  },
  {
    "text": "You might want to remove the other function. Otherwise, you have a completion error.",
    "start": "4362533",
    "end": "4367765"
  },
  {
    "text": "It's going to be all ends.",
    "start": "4367766",
    "end": "4369266"
  },
  {
    "text": "And then you-- obviously, we have not augmented the type",
    "start": "4396566",
    "end": "4403033"
  },
  {
    "text": "of document yet with the computed field. But if we did it one at a time like this,",
    "start": "4403933",
    "end": "4409199"
  },
  {
    "text": "we could potentially-- we'd have to track it separately, probably.",
    "start": "4411533",
    "end": "4416866"
  },
  {
    "text": "But we could transform the computed field into a schema struct, basically.",
    "start": "4417633",
    "end": "4425766"
  },
  {
    "text": "The output type looks something like this, document fields.",
    "start": "4425833",
    "end": "4429433"
  },
  {
    "text": "And name-- I know this is not valid. Hang on.",
    "start": "4431166",
    "end": "4435699"
  },
  {
    "text": "You have to say name in there.",
    "start": "4436933",
    "end": "4438166"
  },
  {
    "text": "Let's just keep any here for a second, because I don't know if we're going to do that. Just remove the second parameter for now.",
    "start": "4451933",
    "end": "4457865"
  },
  {
    "text": "If it's not needed, it's not needed.",
    "start": "4458633",
    "end": "4460233"
  },
  {
    "text": "And then let's try it again. And this should give us a-- oops.",
    "start": "4496033",
    "end": "4502032"
  },
  {
    "text": "See? Yeah. So this is kind of an item. The same trick can be done with a wrapper.",
    "start": "4507633",
    "end": "4513365"
  },
  {
    "text": "You just need to check on the keys instead of-- All right. Help me. On the single name.",
    "start": "4513399",
    "end": "4519333"
  },
  {
    "text": "And you need to-- at the moment, you've defined--",
    "start": "4520066",
    "end": "4524333"
  },
  {
    "text": "if you hover on the computed fields type definition,",
    "start": "4525533",
    "end": "4530699"
  },
  {
    "text": "computed field type definition, it's down. Here you have the computed field name,",
    "start": "4531266",
    "end": "4536066"
  },
  {
    "text": "which is where you do this checking. Instead of doing it at this level,",
    "start": "4536766",
    "end": "4542866"
  },
  {
    "text": "you have to do it at the very top level where you are taking the computed.",
    "start": "4543800",
    "end": "4549466"
  },
  {
    "text": "So here you would have computed and check or simply computed",
    "start": "4550366",
    "end": "4557566"
  },
  {
    "text": "fields of computed.",
    "start": "4557666",
    "end": "4558966"
  },
  {
    "text": "Just write a type definition for a moment somewhere else.",
    "start": "4563566",
    "end": "4567666"
  },
  {
    "text": "OK. That should take two arguments. The computed, which",
    "start": "4578366",
    "end": "4585198"
  },
  {
    "text": "extends a wrapper of string any. Record string any.",
    "start": "4585199",
    "end": "4591899"
  },
  {
    "text": "And the current fields.",
    "start": "4593799",
    "end": "4595833"
  },
  {
    "text": "OK. Yeah. And here you can quite",
    "start": "4601366",
    "end": "4608399"
  },
  {
    "text": "literally say key of computed extends",
    "start": "4608399",
    "end": "4615032"
  },
  {
    "text": "key of existing fields. You might need to do some distribution. So probably this",
    "start": "4618133",
    "end": "4627366"
  },
  {
    "text": "needs to be more refined. But the idea would be that--",
    "start": "4627366",
    "end": "4634399"
  },
  {
    "text": "the idea would be that here you do the check now. Where the error is",
    "start": "4635633",
    "end": "4640966"
  },
  {
    "text": "shown might be as slightly--",
    "start": "4640966",
    "end": "4644932"
  },
  {
    "text": "it might show at the top level instead of on the specific key.",
    "start": "4646299",
    "end": "4651432"
  },
  {
    "text": "I don't know if there's a way of doing it on the specific key. Right.",
    "start": "4652666",
    "end": "4657700"
  },
  {
    "text": "But I have to fiddle with this type. It's impossible to just spell the type out correctly",
    "start": "4659266",
    "end": "4664566"
  },
  {
    "text": "Let's go with it for a minute. So--",
    "start": "4665766",
    "end": "4669733"
  },
  {
    "text": "Yeah, this is not distributive. So this wouldn't work. To make it distributive, you need",
    "start": "4672399",
    "end": "4677466"
  },
  {
    "text": "to add another generic to the exclude duplicated fields",
    "start": "4678866",
    "end": "4682766"
  },
  {
    "text": "No, at the end. And say like new keys",
    "start": "4683933",
    "end": "4691066"
  },
  {
    "text": "equal key of computed.",
    "start": "4691066",
    "end": "4696433"
  },
  {
    "text": "So that now you can say new keys extends key of existing",
    "start": "4699533",
    "end": "4709833"
  },
  {
    "text": "fields. These would distribute over the new keys",
    "start": "4709966",
    "end": "4714333"
  },
  {
    "text": "because it's a conditional type over a naked generic.",
    "start": "4715533",
    "end": "4720532"
  },
  {
    "text": "All right. And then maybe we can just do like duplicate key for now. Duplicate key or computed",
    "start": "4723333",
    "end": "4730299"
  },
  {
    "text": "So let me do it.",
    "start": "4732233",
    "end": "4733032"
  },
  {
    "text": "Yeah. Let's separate these out so",
    "start": "4739833",
    "end": "4745333"
  },
  {
    "text": "we can see a little better.",
    "start": "4745333",
    "end": "4746299"
  },
  {
    "text": "Fields.",
    "start": "4758166",
    "end": "4759633"
  },
  {
    "text": "Damn it.",
    "start": "4783733",
    "end": "4784233"
  },
  {
    "text": "Oh, well, that was dumb.",
    "start": "4795899",
    "end": "4796966"
  },
  {
    "text": "Right on the key.",
    "start": "4802266",
    "end": "4804833"
  },
  {
    "text": "Which is nice. Well, probably because you only have one. All right, let's find out.",
    "start": "4809100",
    "end": "4812365"
  },
  {
    "text": "Yeah, this no longer works. You can do it with a single type.",
    "start": "4826333",
    "end": "4831466"
  },
  {
    "text": "I'll fix it. OK. Again, I can't spell out the type.",
    "start": "4831466",
    "end": "4836466"
  },
  {
    "text": "That's OK. Yeah, I mean, we will iteratively add to this.",
    "start": "4837166",
    "end": "4841533"
  },
  {
    "text": "But anyways, the idea being that if we comment this back out",
    "start": "4843166",
    "end": "4848399"
  },
  {
    "text": "and we put this back in for the moment.",
    "start": "4851133",
    "end": "4853233"
  },
  {
    "text": "Why do I keep doing that?",
    "start": "4857833",
    "end": "4858799"
  },
  {
    "text": "The idea of here being that as you iteratively add fields, you would be able to add computed fields.",
    "start": "4863233",
    "end": "4870866"
  },
  {
    "text": "You can compute the type. And you'd get errors that make sense",
    "start": "4871100",
    "end": "4875933"
  },
  {
    "text": "when you end up with a duplicate key.",
    "start": "4876466",
    "end": "4881133"
  },
  {
    "text": "And that the final type is something that's inspectable for the user. Now, I'm going to leave",
    "start": "4881866",
    "end": "4887566"
  },
  {
    "text": "this like this for now. And I'll comment out this one.",
    "start": "4887566",
    "end": "4890666"
  },
  {
    "text": "Because I also have an idea here. I think this will be",
    "start": "4893766",
    "end": "4900532"
  },
  {
    "text": "probably maybe the last thing we do today. But for now, if we",
    "start": "4900533",
    "end": "4913233"
  },
  {
    "text": "just make this a thing, I have an idea here.",
    "start": "4913233",
    "end": "4918833"
  },
  {
    "text": "So something else that you might want to see when you hover a document is maybe",
    "start": "4920766",
    "end": "4927433"
  },
  {
    "text": "the source that it's coming from. So maybe there's a second type argument here. Seeing that this is a file",
    "start": "4927700",
    "end": "4933899"
  },
  {
    "text": "system source or something like that might be helpful. So we could do--",
    "start": "4933899",
    "end": "4940466"
  },
  {
    "text": "Sorry.",
    "start": "4953733",
    "end": "4954032"
  },
  {
    "text": "I don't know.",
    "start": "4958833",
    "end": "4963000"
  },
  {
    "text": "All right. So we have a file system source.",
    "start": "4969200",
    "end": "4973966"
  },
  {
    "text": "Think about this for a sec.",
    "start": "4999333",
    "end": "5000033"
  },
  {
    "text": "So yeah. Source.",
    "start": "5008933",
    "end": "5010899"
  },
  {
    "text": "So then we'd need to take",
    "start": "5025333",
    "end": "5034299"
  },
  {
    "text": "the source and the proto, which we can always move the method around later. But--",
    "start": "5034299",
    "end": "5038333"
  },
  {
    "text": "It's probably safe to automate that environment for the moment.",
    "start": "5041466",
    "end": "5045133"
  },
  {
    "text": "Oops.",
    "start": "5054500",
    "end": "5054700"
  },
  {
    "text": "OK.",
    "start": "5059700",
    "end": "5059866"
  },
  {
    "text": "And then here.",
    "start": "5064766",
    "end": "5070266"
  },
  {
    "text": "So now when you hover this, you'll see the document source. And when we add a computed field,",
    "start": "5091733",
    "end": "5098766"
  },
  {
    "text": "if we also take in the source--",
    "start": "5100833",
    "end": "5102366"
  },
  {
    "text": "Just trying to find all the errors. OK. So now when you hover the type, you get the source.",
    "start": "5141399",
    "end": "5146333"
  },
  {
    "text": "And you also get fully typed fields.",
    "start": "5147166",
    "end": "5149933"
  },
  {
    "text": "Shoot.",
    "start": "5152333",
    "end": "5152500"
  },
  {
    "text": "Where did I go wrong? What if--",
    "start": "5167500",
    "end": "5169532"
  },
  {
    "text": "add computed fields",
    "start": "5222500",
    "end": "5223933"
  },
  {
    "text": "Is meta unused?",
    "start": "5243033",
    "end": "5243966"
  },
  {
    "text": "It's unused currently. But I'm getting unknown.",
    "start": "5250066",
    "end": "5254532"
  },
  {
    "text": "If it's unused in the type, it's going to be-- Oh, right, right, right, right, right.",
    "start": "5255399",
    "end": "5260200"
  },
  {
    "text": "Let's quickly just--",
    "start": "5260700",
    "end": "5262899"
  },
  {
    "text": "It's why I always use the variance thing. Yeah, it's just source type ID",
    "start": "5268799",
    "end": "5277233"
  },
  {
    "text": "no. symbol.for Effect content DocumentSource",
    "start": "5282200",
    "end": "5292399"
  },
  {
    "text": "Hey. So now like, again, the idea here being",
    "start": "5326966",
    "end": "5333133"
  },
  {
    "text": "that you have access to the existing fields on the document to compute whatever you want. And you also have access",
    "start": "5333133",
    "end": "5338333"
  },
  {
    "text": "to the like meta information that the document source gives you,",
    "start": "5338333",
    "end": "5342699"
  },
  {
    "text": "in case you want to like do stuff with like, I don't know the path that this, that, you know, when",
    "start": "5343700",
    "end": "5349066"
  },
  {
    "text": "this document gets resolved against a file, you'll have access to like the path, you'll have access to whatever other information",
    "start": "5349066",
    "end": "5354299"
  },
  {
    "text": "the file system source gives you.",
    "start": "5354299",
    "end": "5357133"
  },
  {
    "text": "Yeah, I feel like this is already a pretty good start.",
    "start": "5362266",
    "end": "5365032"
  },
  {
    "text": "This is already like looking like, at least from a user experience perspective, when you're defining a document type",
    "start": "5367766",
    "end": "5374200"
  },
  {
    "text": "in your content layer config, this is already the information that I think would be really useful to be able to see on hover, right?",
    "start": "5375533",
    "end": "5382233"
  },
  {
    "text": "The metadata that you'll be working with when the document's actually generated and the source that this",
    "start": "5382333",
    "end": "5389899"
  },
  {
    "text": "document's coming from. Because like ultimately what a user is gonna do",
    "start": "5389899",
    "end": "5395432"
  },
  {
    "text": "is export this, right? From their content layer config and then the engine would pick this up",
    "start": "5395433",
    "end": "5401399"
  },
  {
    "text": "and would do whatever it needs to do to generate the documents, but. - And we could also think about a class-based API",
    "start": "5401966",
    "end": "5409299"
  },
  {
    "text": "so that type is opaque instead of.",
    "start": "5409566",
    "end": "5415032"
  },
  {
    "text": "- Yeah, yeah, that would be really interesting. - Being explicit, because otherwise those types will,",
    "start": "5415033",
    "end": "5421333"
  },
  {
    "text": "all be real quite large. - But I think like if we do a class-based API, it would still be nice for the user",
    "start": "5422333",
    "end": "5428566"
  },
  {
    "text": "to be able to access like this information. It's like. - Yeah, it would be",
    "start": "5428666",
    "end": "5434266"
  },
  {
    "text": "something like a height under.",
    "start": "5434266",
    "end": "5438100"
  },
  {
    "text": "- Something like that. - Yeah, something along those lines. - Like what we're doing in schema basically.",
    "start": "5439299",
    "end": "5444066"
  },
  {
    "text": "- Precisely. But anyway, that's API optimization. It's beyond this stage. - For sure.",
    "start": "5444899",
    "end": "5452733"
  },
  {
    "text": "- Well, let me go ahead and at least push what we've got so far.",
    "start": "5453166",
    "end": "5457000"
  },
  {
    "text": "- It's commit initial document definition.",
    "start": "5458633",
    "end": "5465399"
  },
  {
    "text": "- This seems like my first commit on effect.",
    "start": "5467299",
    "end": "5472032"
  },
  {
    "text": "Initial with example. - Initial with example.",
    "start": "5472733",
    "end": "5475733"
  },
  {
    "text": "- For the listeners that don't know my first commit ever pushed on the effect repository",
    "start": "5478100",
    "end": "5483866"
  },
  {
    "text": "was called initial with example. Because I was only targeting my team. I couldn't care less",
    "start": "5484399",
    "end": "5490133"
  },
  {
    "text": "about commit messages. - I know like for the people that were watching today,",
    "start": "5490133",
    "end": "5495799"
  },
  {
    "text": "we spent a lot of time just doing like obviously API design, API refinement, et cetera. I hope that that was like kind of useful.",
    "start": "5496033",
    "end": "5502532"
  },
  {
    "text": "But I know for a fact that like as we get into the whole like engine piece of this",
    "start": "5503033",
    "end": "5509199"
  },
  {
    "text": "and like designing around like how the documents are actually gonna be imported into the engine",
    "start": "5509200",
    "end": "5514533"
  },
  {
    "text": "there's gonna be things like file watching and reloading and et cetera, et cetera, et cetera. There's gonna be tons of good like effects stuff",
    "start": "5515633",
    "end": "5521932"
  },
  {
    "text": "that comes out of this. I think that it's important though, like I think everybody who",
    "start": "5521933",
    "end": "5527799"
  },
  {
    "text": "works on the effect libraries is really concerned with user experience and like API user experience.",
    "start": "5527799",
    "end": "5533733"
  },
  {
    "text": "So that's why we try to like focus on making",
    "start": "5534333",
    "end": "5538000"
  },
  {
    "text": "the experience that we give to users when they use one of our libraries. - That's good, so we",
    "start": "5540000",
    "end": "5545133"
  },
  {
    "text": "try to spend this time. So again, we thought it'd be fun for folks to see kind of like our thought process",
    "start": "5545133",
    "end": "5550533"
  },
  {
    "text": "in a very unscripted fashion. We may do some work on this like offline,",
    "start": "5550933",
    "end": "5557299"
  },
  {
    "text": "but whenever we start a new stream, we'll always like update you folks on any changes",
    "start": "5558166",
    "end": "5563600"
  },
  {
    "text": "that were made and we'll try not to do anything major without streaming it. - So, I'll try to do the type",
    "start": "5563600",
    "end": "5569666"
  },
  {
    "text": "of quad more fields at the same time, which still shows an error. But if I get to do that,",
    "start": "5570733",
    "end": "5576533"
  },
  {
    "text": "next time we can speak about the details of the hour. - Cool.",
    "start": "5576533",
    "end": "5580600"
  },
  {
    "text": "- A stream where I'm like 45 minutes, like these on the screen thinking it would probably not be fun to watch.",
    "start": "5581833",
    "end": "5587666"
  },
  {
    "text": "- Yeah, I think that nobody's gonna be interested in watching that, so.",
    "start": "5588066",
    "end": "5591299"
  },
  {
    "text": "Cool, well, thanks everybody for watching. - Thanks everybody. - Thanks Maxwell for this fantastic stream.",
    "start": "5594933",
    "end": "5600766"
  },
  {
    "text": "- Cheers folks.",
    "start": "5602633",
    "end": "5603365"
  }
]