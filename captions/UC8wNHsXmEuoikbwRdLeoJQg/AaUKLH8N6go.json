[
  {
    "text": "(audience applauds)",
    "start": "0",
    "end": "1320"
  },
  {
    "text": "Hi everyone, my name's David Blass.",
    "start": "1320",
    "end": "5440"
  },
  {
    "text": "So I'm the author of \"ArkType\"",
    "start": "6040",
    "end": "7960"
  },
  {
    "text": "and a budding Effect enthusiast.",
    "start": "8240",
    "end": "11320"
  },
  {
    "text": "I've always had great respect",
    "start": "12039",
    "end": "13080"
  },
  {
    "text": "for all the engineers on the team",
    "start": "13080",
    "end": "14039"
  },
  {
    "text": "and I'm super happy to be here",
    "start": "14279",
    "end": "15560"
  },
  {
    "text": "and get to talk to you all",
    "start": "15560",
    "end": "16280"
  },
  {
    "text": "about one of my favorite subjects in the world,",
    "start": "16280",
    "end": "18280"
  },
  {
    "text": "which are discriminated unions and set-based types.",
    "start": "19239",
    "end": "21920"
  },
  {
    "text": "So you've probably heard of discriminated unions before,",
    "start": "22879",
    "end": "25239"
  },
  {
    "text": "I would think if you write TypeScript.",
    "start": "25440",
    "end": "26960"
  },
  {
    "text": "So I wanna start by just throwing a question out",
    "start": "27359",
    "end": "29559"
  },
  {
    "text": "to the audience and no one has to raise their hand",
    "start": "29879",
    "end": "31960"
  },
  {
    "text": "or answer anything, but if you wanna throw out",
    "start": "31960",
    "end": "33439"
  },
  {
    "text": "a couple words maybe about what you think about",
    "start": "33439",
    "end": "35759"
  },
  {
    "text": "when you think of a discriminated union,",
    "start": "35759",
    "end": "37038"
  },
  {
    "text": "what's the first thing that comes to mind, potentially?",
    "start": "37640",
    "end": "40559"
  },
  {
    "text": "Pattern matching, that's a great answer.",
    "start": "42359",
    "end": "43799"
  },
  {
    "text": "We'll talk about that a little bit.",
    "start": "44079",
    "end": "45079"
  },
  {
    "text": "Tags, yes, that's right.",
    "start": "46920",
    "end": "48478"
  },
  {
    "text": "And I think that's pretty much what everyone thinks about",
    "start": "48479",
    "end": "49960"
  },
  {
    "text": "and that's one of the most useful ways",
    "start": "49960",
    "end": "51559"
  },
  {
    "text": "to discriminate a union.",
    "start": "51560",
    "end": "52439"
  },
  {
    "text": "But we're gonna talk about sets",
    "start": "52799",
    "end": "54200"
  },
  {
    "text": "and we're gonna go deeper",
    "start": "54439",
    "end": "55718"
  },
  {
    "text": "because there's a lot more to discriminated unions",
    "start": "55880",
    "end": "57240"
  },
  {
    "text": "than tags and you can discriminate a union",
    "start": "57600",
    "end": "60119"
  },
  {
    "text": "in many ways as we'll see.",
    "start": "60119",
    "end": "61640"
  },
  {
    "text": "So to be able to understand any of this,",
    "start": "63039",
    "end": "64518"
  },
  {
    "text": "we have to ask a much more fundamental question,",
    "start": "64519",
    "end": "66078"
  },
  {
    "text": "which is what is a type?",
    "start": "66079",
    "end": "67040"
  },
  {
    "text": "And I've got 10 minutes, so it's gonna be a fast answer.",
    "start": "67439",
    "end": "69799"
  },
  {
    "text": "But essentially what we're trying to do here",
    "start": "70879",
    "end": "73798"
  },
  {
    "text": "is create a more robust set theory-based version",
    "start": "73799",
    "end": "77359"
  },
  {
    "text": "of TypeScript.",
    "start": "77359",
    "end": "77859"
  },
  {
    "text": "I find this very useful, I work a lot with TypeScript",
    "start": "78120",
    "end": "80280"
  },
  {
    "text": "as people are familiar with R-Type,",
    "start": "80280",
    "end": "81798"
  },
  {
    "text": "no, I got to have, had to get pretty familiar",
    "start": "81799",
    "end": "83959"
  },
  {
    "text": "with TypeScript's type system.",
    "start": "83959",
    "end": "84959"
  },
  {
    "text": "And to get intuitions about that,",
    "start": "85359",
    "end": "87159"
  },
  {
    "text": "I find this model to be the closest thing.",
    "start": "87159",
    "end": "89399"
  },
  {
    "text": "People often say TypeScript's behavior",
    "start": "89400",
    "end": "90760"
  },
  {
    "text": "is crazy and unpredictable and sometimes it is,",
    "start": "90760",
    "end": "93159"
  },
  {
    "text": "but this is the default and the things that don't behave",
    "start": "93159",
    "end": "95759"
  },
  {
    "text": "this way are the exceptions in my view.",
    "start": "95760",
    "end": "97480"
  },
  {
    "text": "So let's talk about sets.",
    "start": "98439",
    "end": "99760"
  },
  {
    "text": "So essentially what a type defines",
    "start": "100760",
    "end": "102680"
  },
  {
    "text": "is a set of values in TypeScript,",
    "start": "102680",
    "end": "104359"
  },
  {
    "text": "a set of values that are allowed by a certain type.",
    "start": "104359",
    "end": "106159"
  },
  {
    "text": "So you can see here, we have",
    "start": "107120",
    "end": "108879"
  },
  {
    "text": "some very simple sets of values.",
    "start": "108879",
    "end": "111319"
  },
  {
    "text": "This is more mathematically,",
    "start": "111319",
    "end": "113000"
  },
  {
    "text": "you probably wouldn't have access",
    "start": "113040",
    "end": "114040"
  },
  {
    "text": "to these types in TypeScript,",
    "start": "114040",
    "end": "115079"
  },
  {
    "text": "but essentially you can see the natural numbers",
    "start": "115359",
    "end": "117079"
  },
  {
    "text": "and then we've got integers divisible by two.",
    "start": "117439",
    "end": "119439"
  },
  {
    "text": "So those sets are enumerated with some ellipses there",
    "start": "120959",
    "end": "126798"
  },
  {
    "text": "for I didn't have time to write the full infinite sequence.",
    "start": "126799",
    "end": "129159"
  },
  {
    "text": "And so then practically to express that,",
    "start": "129800",
    "end": "133439"
  },
  {
    "text": "we need to express it in terms of constraints.",
    "start": "134039",
    "end": "135719"
  },
  {
    "text": "And so you can break it down",
    "start": "136280",
    "end": "137319"
  },
  {
    "text": "until you have atomic sets of constraints,",
    "start": "137599",
    "end": "139199"
  },
  {
    "text": "which in this case would be the fact",
    "start": "139199",
    "end": "140840"
  },
  {
    "text": "that a number is an integer",
    "start": "141039",
    "end": "141919"
  },
  {
    "text": "and that in one case it's greater than or equal to zero",
    "start": "143120",
    "end": "145080"
  },
  {
    "text": "and in the other case, that was my shorthand",
    "start": "145080",
    "end": "146520"
  },
  {
    "text": "for divisible by two.",
    "start": "146520",
    "end": "147800"
  },
  {
    "text": "And so then there's a couple fundamental operations",
    "start": "149240",
    "end": "151879"
  },
  {
    "text": "on these atomic constraints that will help us understand",
    "start": "152120",
    "end": "154959"
  },
  {
    "text": "how this is all gonna come together.",
    "start": "155319",
    "end": "156639"
  },
  {
    "text": "So the first and I will spoil",
    "start": "156879",
    "end": "159400"
  },
  {
    "text": "that it is the most important one is intersection.",
    "start": "159400",
    "end": "161719"
  },
  {
    "text": "You can do a lot with intersections.",
    "start": "163000",
    "end": "164080"
  },
  {
    "text": "So it's very easy to define,",
    "start": "164759",
    "end": "165960"
  },
  {
    "text": "but it's a little bit counterintuitive",
    "start": "165960",
    "end": "167080"
  },
  {
    "text": "and people get tripped up on this a lot.",
    "start": "167080",
    "end": "168639"
  },
  {
    "text": "So this maybe will be a useful way to think about it,",
    "start": "169319",
    "end": "171479"
  },
  {
    "text": "hopefully, that if you take the intersection of L and R,",
    "start": "171479",
    "end": "175759"
  },
  {
    "text": "if you're looking at those like values at the top there,",
    "start": "176240",
    "end": "178199"
  },
  {
    "text": "the intersection would be the values",
    "start": "178199",
    "end": "180120"
  },
  {
    "text": "that appear in both lists.",
    "start": "180120",
    "end": "181879"
  },
  {
    "text": "So if you're looking at those lists,",
    "start": "182520",
    "end": "183680"
  },
  {
    "text": "I have them, the values that would appear listed there,",
    "start": "184400",
    "end": "186959"
  },
  {
    "text": "zero, two, four, et cetera.",
    "start": "186960",
    "end": "188639"
  },
  {
    "text": "You don't get the negative numbers from there",
    "start": "188639",
    "end": "189919"
  },
  {
    "text": "and you don't get the odd numbers from there.",
    "start": "189919",
    "end": "191439"
  },
  {
    "text": "But when you're thinking about constraints,",
    "start": "192599",
    "end": "194039"
  },
  {
    "text": "that's where it gets a little tricky",
    "start": "194240",
    "end": "195120"
  },
  {
    "text": "because if you're thinking about an intersection",
    "start": "195240",
    "end": "197800"
  },
  {
    "text": "of two sets of constraints, it actually flips",
    "start": "198039",
    "end": "200240"
  },
  {
    "text": "because the more you constrain a type,",
    "start": "201000",
    "end": "203240"
  },
  {
    "text": "the fewer values satisfy that type.",
    "start": "203599",
    "end": "206000"
  },
  {
    "text": "So essentially it becomes a union",
    "start": "206599",
    "end": "207959"
  },
  {
    "text": "and you take a union of the constraints,",
    "start": "208360",
    "end": "210879"
  },
  {
    "text": "adding them together and grouping them.",
    "start": "211479",
    "end": "213039"
  },
  {
    "text": "So now we have this one type",
    "start": "213680",
    "end": "215478"
  },
  {
    "text": "from adding together all those constraints",
    "start": "215479",
    "end": "216879"
  },
  {
    "text": "and then deduplicating them because they're sets.",
    "start": "216879",
    "end": "218759"
  },
  {
    "text": "So we have an integer, it's greater than or equal to zero",
    "start": "219800",
    "end": "221960"
  },
  {
    "text": "and it's divisible by two.",
    "start": "222120",
    "end": "223360"
  },
  {
    "text": "Yeah, so essentially it's simple,",
    "start": "223919",
    "end": "226000"
  },
  {
    "text": "but it's counterintuitive.",
    "start": "226280",
    "end": "227159"
  },
  {
    "text": "And honestly, that takes a long time",
    "start": "227360",
    "end": "229000"
  },
  {
    "text": "to build the right idea about that,",
    "start": "229000",
    "end": "230520"
  },
  {
    "text": "even though it's a very simple model.",
    "start": "230520",
    "end": "232360"
  },
  {
    "text": "Every time you're trying to name something,",
    "start": "232360",
    "end": "233520"
  },
  {
    "text": "you're like, am I constraining it",
    "start": "233520",
    "end": "234599"
  },
  {
    "text": "or am I like expanding it or extending it",
    "start": "234599",
    "end": "236479"
  },
  {
    "text": "and TypeScript vocabulary doesn't always help with that.",
    "start": "236479",
    "end": "238280"
  },
  {
    "text": "So good one to keep in mind.",
    "start": "238759",
    "end": "239879"
  },
  {
    "text": "Unions luckily are much simpler in this regard.",
    "start": "240360",
    "end": "242680"
  },
  {
    "text": "So essentially it works",
    "start": "244319",
    "end": "246439"
  },
  {
    "text": "exactly the way that you would expect",
    "start": "246439",
    "end": "248198"
  },
  {
    "text": "for values you're adding together,",
    "start": "248319",
    "end": "250080"
  },
  {
    "text": "all the values that exist in either type",
    "start": "250280",
    "end": "253159"
  },
  {
    "text": "and the union of those two types",
    "start": "253520",
    "end": "254719"
  },
  {
    "text": "is the sum of all those, well not the reduced sum,",
    "start": "255039",
    "end": "258838"
  },
  {
    "text": "but the enumeration of all those values.",
    "start": "259160",
    "end": "261278"
  },
  {
    "text": "And so luckily with constraints,",
    "start": "265040",
    "end": "269040"
  },
  {
    "text": "we're not gonna, even if the thing turns",
    "start": "269319",
    "end": "270480"
  },
  {
    "text": "into a giant blue screen again, it's gonna be fine",
    "start": "270480",
    "end": "272079"
  },
  {
    "text": "because constraints for a union are very simple,",
    "start": "272079",
    "end": "273959"
  },
  {
    "text": "you can't reduce them generally.",
    "start": "274199",
    "end": "275399"
  },
  {
    "text": "So if you think about like unions",
    "start": "275839",
    "end": "277360"
  },
  {
    "text": "with arbitrary sets of constraints tied to one another,",
    "start": "277560",
    "end": "279759"
  },
  {
    "text": "you can't reduce that in a general case",
    "start": "280040",
    "end": "282399"
  },
  {
    "text": "in the same way that you could reduce those others,",
    "start": "282399",
    "end": "284000"
  },
  {
    "text": "which means that it's a lot easier to deal with them",
    "start": "284399",
    "end": "285959"
  },
  {
    "text": "in this kind of type system.",
    "start": "285959",
    "end": "286839"
  },
  {
    "text": "We're not gonna talk about negation",
    "start": "287160",
    "end": "288160"
  },
  {
    "text": "because TypeScript doesn't have it yet,",
    "start": "288319",
    "end": "290519"
  },
  {
    "text": "but maybe in the future we can pray.",
    "start": "290519",
    "end": "291839"
  },
  {
    "text": "So these are the sets of constraints.",
    "start": "293040",
    "end": "295240"
  },
  {
    "text": "We're gonna do a very high level overview of this.",
    "start": "295240",
    "end": "297319"
  },
  {
    "text": "Essentially there's two categories",
    "start": "297759",
    "end": "298680"
  },
  {
    "text": "that you'd wanna break that into.",
    "start": "300519",
    "end": "301480"
  },
  {
    "text": "So shallow constraints are constraints",
    "start": "303120",
    "end": "306279"
  },
  {
    "text": "that you could check essentially without looking",
    "start": "306279",
    "end": "307879"
  },
  {
    "text": "at any of the keys of an object or a value.",
    "start": "307879",
    "end": "310680"
  },
  {
    "text": "So TypeScript really only has two.",
    "start": "311519",
    "end": "312680"
  },
  {
    "text": "Basically like reference equality,",
    "start": "313160",
    "end": "314519"
  },
  {
    "text": "or you think of like a unit type of the number one",
    "start": "314519",
    "end": "316920"
  },
  {
    "text": "or null or something like that,",
    "start": "316920",
    "end": "318680"
  },
  {
    "text": "or the kinds of types you get from type of,",
    "start": "318959",
    "end": "320759"
  },
  {
    "text": "which mirror TypeScript keywords like object or string",
    "start": "320759",
    "end": "322959"
  },
  {
    "text": "or number, things like that.",
    "start": "322959",
    "end": "324279"
  },
  {
    "text": "There's lots of other things you could use",
    "start": "324560",
    "end": "326120"
  },
  {
    "text": "as shallow constraints that TypeScript doesn't support.",
    "start": "326120",
    "end": "328360"
  },
  {
    "text": "I have a list of them there.",
    "start": "328360",
    "end": "329279"
  },
  {
    "text": "And the really cool thing is if you build",
    "start": "329959",
    "end": "331240"
  },
  {
    "text": "a set-based type system, you can absolutely",
    "start": "331240",
    "end": "332680"
  },
  {
    "text": "implement all those things and ArcType does that.",
    "start": "332839",
    "end": "334599"
  },
  {
    "text": "And it's a really, really beautiful problem to work on",
    "start": "335160",
    "end": "337920"
  },
  {
    "text": "to see how they all fit together,",
    "start": "337920",
    "end": "339439"
  },
  {
    "text": "but they all fit into this model.",
    "start": "339439",
    "end": "340479"
  },
  {
    "text": "TypeScript just doesn't do them.",
    "start": "340680",
    "end": "341600"
  },
  {
    "text": "So property constraints, you do have to check a key.",
    "start": "342439",
    "end": "344879"
  },
  {
    "text": "There's fundamentally a couple unique types,",
    "start": "345160",
    "end": "346800"
  },
  {
    "text": "which are literal keys that are named.",
    "start": "346800",
    "end": "348439"
  },
  {
    "text": "Index signatures, which are a non-enumerable key,",
    "start": "349439",
    "end": "351839"
  },
  {
    "text": "like string, something like that.",
    "start": "351839",
    "end": "353000"
  },
  {
    "text": "And then that has a specified type",
    "start": "353439",
    "end": "354759"
  },
  {
    "text": "for each one that appears.",
    "start": "354759",
    "end": "355560"
  },
  {
    "text": "And a sequence is a little bit unique",
    "start": "355959",
    "end": "357319"
  },
  {
    "text": "because it depends on the previous items",
    "start": "357519",
    "end": "359279"
  },
  {
    "text": "in a tuple or an array.",
    "start": "359279",
    "end": "360720"
  },
  {
    "text": "So you can't even define it in terms of index.",
    "start": "361240",
    "end": "362959"
  },
  {
    "text": "Those are the three fundamental types.",
    "start": "363360",
    "end": "364518"
  },
  {
    "text": "We're gonna go through this real quick",
    "start": "364839",
    "end": "365839"
  },
  {
    "text": "and say that essentially you can, it's okay,",
    "start": "365839",
    "end": "369039"
  },
  {
    "text": "you can infer everything from the intersection.",
    "start": "369040",
    "end": "370399"
  },
  {
    "text": "This is the very elegant part that subtypes, supertypes,",
    "start": "370680",
    "end": "374518"
  },
  {
    "text": "all that stuff, all you really need to know",
    "start": "374720",
    "end": "376399"
  },
  {
    "text": "about any given constraint is the way it intersects",
    "start": "376399",
    "end": "379000"
  },
  {
    "text": "with another instance of that constraint.",
    "start": "379000",
    "end": "382279"
  },
  {
    "text": "And you can infer all of this from the intersection.",
    "start": "383720",
    "end": "386120"
  },
  {
    "text": "It's a very powerful idea,",
    "start": "386680",
    "end": "389680"
  },
  {
    "text": "but what we're gonna focus on here is item D,",
    "start": "390000",
    "end": "393399"
  },
  {
    "text": "which maybe is on the screen now, that's great.",
    "start": "393399",
    "end": "394879"
  },
  {
    "text": "So this is gonna be the critical thing.",
    "start": "395839",
    "end": "397160"
  },
  {
    "text": "So item D says that if L and R have an empty intersection",
    "start": "397240",
    "end": "400879"
  },
  {
    "text": "or what TypeScript would call never, it's an empty set,",
    "start": "401160",
    "end": "406000"
  },
  {
    "text": "there's no values that satisfy it,",
    "start": "406000",
    "end": "407560"
  },
  {
    "text": "then we can actually use that in lots of powerful ways",
    "start": "407560",
    "end": "409879"
  },
  {
    "text": "even though it seems like a bad, dangerous thing.",
    "start": "409879",
    "end": "412160"
  },
  {
    "text": "So now we're back to the beginning.",
    "start": "413040",
    "end": "414720"
  },
  {
    "text": "We can answer the original question in a more robust way",
    "start": "415399",
    "end": "418879"
  },
  {
    "text": "with this idea of set-based types.",
    "start": "418879",
    "end": "420519"
  },
  {
    "text": "So hopefully this is relatively simple.",
    "start": "421720",
    "end": "424759"
  },
  {
    "text": "So a union can be discriminated",
    "start": "425680",
    "end": "427399"
  },
  {
    "text": "if the branches are disjoint.",
    "start": "427720",
    "end": "428959"
  },
  {
    "text": "So right now, we're kind of thinking about a union",
    "start": "429439",
    "end": "431759"
  },
  {
    "text": "being binary because that's the fundamental operation",
    "start": "431759",
    "end": "435519"
  },
  {
    "text": "of a union, but you can just expand it",
    "start": "435519",
    "end": "437560"
  },
  {
    "text": "by iterating it multiple times.",
    "start": "438519",
    "end": "439839"
  },
  {
    "text": "So these are examples, I again,",
    "start": "440759",
    "end": "442399"
  },
  {
    "text": "only included two branches for simplicity,",
    "start": "442399",
    "end": "443919"
  },
  {
    "text": "but these are examples of discriminated unions.",
    "start": "444240",
    "end": "446399"
  },
  {
    "text": "And you can see the further down you go,",
    "start": "446879",
    "end": "448519"
  },
  {
    "text": "there's things you would not think of",
    "start": "448959",
    "end": "450160"
  },
  {
    "text": "as discriminated unions, but what it really means",
    "start": "450160",
    "end": "453000"
  },
  {
    "text": "to discriminate two branches of a union",
    "start": "453000",
    "end": "454720"
  },
  {
    "text": "is to know exactly which branch you're on",
    "start": "455120",
    "end": "457199"
  },
  {
    "text": "by making a single check.",
    "start": "457199",
    "end": "458160"
  },
  {
    "text": "And that means that there can be no values",
    "start": "458560",
    "end": "460399"
  },
  {
    "text": "that those two branches have in common.",
    "start": "460399",
    "end": "462240"
  },
  {
    "text": "So when you look at something like number less than one",
    "start": "462959",
    "end": "464839"
  },
  {
    "text": "and number greater than two, it's actually a very intuitive",
    "start": "464839",
    "end": "466680"
  },
  {
    "text": "way to have a range that has no overlap.",
    "start": "466680",
    "end": "468639"
  },
  {
    "text": "But people would not think of that",
    "start": "469759",
    "end": "470720"
  },
  {
    "text": "as a way to discriminate a union.",
    "start": "470720",
    "end": "471800"
  },
  {
    "text": "But imagine you have thousands of properties on an object",
    "start": "471800",
    "end": "474439"
  },
  {
    "text": "and you don't wanna go iterating over",
    "start": "475199",
    "end": "476439"
  },
  {
    "text": "trying to find the first mistake",
    "start": "476439",
    "end": "477720"
  },
  {
    "text": "because you have some union.",
    "start": "477720",
    "end": "478879"
  },
  {
    "text": "You could actually use something like this",
    "start": "479680",
    "end": "481319"
  },
  {
    "text": "quite easily to check and say like,",
    "start": "481560",
    "end": "483519"
  },
  {
    "text": "is it a number that's less than one?",
    "start": "483720",
    "end": "485399"
  },
  {
    "text": "And then all of a sudden you know exactly",
    "start": "485399",
    "end": "486439"
  },
  {
    "text": "which branch you're on and you",
    "start": "486439",
    "end": "487680"
  },
  {
    "text": "skip lots of unnecessary work.",
    "start": "487680",
    "end": "490160"
  },
  {
    "text": "So you can do this partially and sequentially.",
    "start": "490519",
    "end": "493240"
  },
  {
    "text": "It doesn't have to be if you have 10 branches",
    "start": "493600",
    "end": "495240"
  },
  {
    "text": "that all branches are discriminatable from one another",
    "start": "495240",
    "end": "497439"
  },
  {
    "text": "for this to be useful, say five are discriminatable,",
    "start": "497439",
    "end": "500279"
  },
  {
    "text": "then great, you've just saved yourself half the work",
    "start": "500560",
    "end": "502279"
  },
  {
    "text": "of iterating over branches and trying to figure out",
    "start": "502279",
    "end": "504039"
  },
  {
    "text": "which branch you're on.",
    "start": "504040",
    "end": "504800"
  },
  {
    "text": "And they can be done sequentially.",
    "start": "505319",
    "end": "506839"
  },
  {
    "text": "So even if you don't have one discriminator,",
    "start": "506839",
    "end": "508279"
  },
  {
    "text": "you can iterate through parts of the union",
    "start": "508600",
    "end": "510639"
  },
  {
    "text": "and discriminate it sequentially.",
    "start": "510639",
    "end": "511680"
  },
  {
    "text": "Largely that'd be something you'd rely on",
    "start": "512399",
    "end": "513799"
  },
  {
    "text": "probably library tooling to do,",
    "start": "513879",
    "end": "515080"
  },
  {
    "text": "but it's very powerful as a strategy.",
    "start": "515080",
    "end": "516440"
  },
  {
    "text": "So why should you care?",
    "start": "516960",
    "end": "517679"
  },
  {
    "text": "Well hopefully you already care,",
    "start": "518320",
    "end": "519159"
  },
  {
    "text": "but if I haven't told you yet,",
    "start": "519480",
    "end": "520719"
  },
  {
    "text": "they're really, really powerful.",
    "start": "521720",
    "end": "522758"
  },
  {
    "text": "The most obvious thing is that they can be checked",
    "start": "523039",
    "end": "524840"
  },
  {
    "text": "in constant time instead of in linear time",
    "start": "524840",
    "end": "527120"
  },
  {
    "text": "with respect to the number of branches on a union.",
    "start": "527120",
    "end": "528839"
  },
  {
    "text": "So if you're thinking about validation,",
    "start": "529399",
    "end": "530519"
  },
  {
    "text": "obviously like checking a union with 100 members",
    "start": "531399",
    "end": "534080"
  },
  {
    "text": "or 1,000 members or something like that",
    "start": "534080",
    "end": "536080"
  },
  {
    "text": "is gonna be a lot faster if you just skip right",
    "start": "536080",
    "end": "538240"
  },
  {
    "text": "to the right branch and then check",
    "start": "538240",
    "end": "539279"
  },
  {
    "text": "all the additional properties.",
    "start": "539279",
    "end": "540159"
  },
  {
    "text": "Also much better for error messages",
    "start": "540639",
    "end": "541839"
  },
  {
    "text": "because generally you're gonna have some kind of tag key",
    "start": "542159",
    "end": "544360"
  },
  {
    "text": "or similar, especially in effect.",
    "start": "544360",
    "end": "545839"
  },
  {
    "text": "And that will often be a very good indicator",
    "start": "546519",
    "end": "549440"
  },
  {
    "text": "of which errors should be reported",
    "start": "549679",
    "end": "551600"
  },
  {
    "text": "as opposed to like it didn't meet this criteria",
    "start": "551600",
    "end": "553600"
  },
  {
    "text": "because of this reason, it didn't meet this branch.",
    "start": "553600",
    "end": "555279"
  },
  {
    "text": "I don't know if you've all seen types of union errors,",
    "start": "555519",
    "end": "557678"
  },
  {
    "text": "but they can really blow up sometimes",
    "start": "557679",
    "end": "558879"
  },
  {
    "text": "and not be very useful.",
    "start": "558879",
    "end": "559879"
  },
  {
    "text": "So if you haven't discriminated,",
    "start": "560720",
    "end": "562079"
  },
  {
    "text": "you'll get much better errors.",
    "start": "562320",
    "end": "563240"
  },
  {
    "text": "And then branch dependent operations",
    "start": "563480",
    "end": "565000"
  },
  {
    "text": "are something that I'll hint at a little bit in a minute.",
    "start": "565360",
    "end": "568279"
  },
  {
    "text": "So quick overview of like how this kind of appears",
    "start": "569159",
    "end": "571440"
  },
  {
    "text": "in practice.",
    "start": "571600",
    "end": "572100"
  },
  {
    "text": "So TypeScript has some capabilities in this regard.",
    "start": "573600",
    "end": "575839"
  },
  {
    "text": "It's a little bit different than a validator",
    "start": "575840",
    "end": "577159"
  },
  {
    "text": "because it doesn't care about,",
    "start": "577279",
    "end": "578639"
  },
  {
    "text": "well, it doesn't care about that.",
    "start": "580200",
    "end": "581919"
  },
  {
    "text": "It doesn't care about discriminating a,",
    "start": "582159",
    "end": "584759"
  },
  {
    "text": "like basically evaluating whether a particular value",
    "start": "585200",
    "end": "588519"
  },
  {
    "text": "a unit type can conform to some type or not.",
    "start": "588720",
    "end": "591079"
  },
  {
    "text": "It only cares about what you discriminate manually",
    "start": "591080",
    "end": "593320"
  },
  {
    "text": "in determining if that's a valid discriminant check or not.",
    "start": "593320",
    "end": "596399"
  },
  {
    "text": "So it does great with like nested discriminants",
    "start": "597320",
    "end": "599519"
  },
  {
    "text": "and things like that.",
    "start": "599519",
    "end": "600159"
  },
  {
    "text": "But there's still some things to be desired.",
    "start": "600919",
    "end": "604320"
  },
  {
    "text": "You can't have a discriminant on a nested key.",
    "start": "604320",
    "end": "606000"
  },
  {
    "text": "So those are kind of limitations of TypeScript,",
    "start": "606559",
    "end": "608159"
  },
  {
    "text": "but that would be a perfectly valid way",
    "start": "608159",
    "end": "609440"
  },
  {
    "text": "to discriminate those two branches.",
    "start": "609440",
    "end": "610600"
  },
  {
    "text": "So hopefully again someday.",
    "start": "611279",
    "end": "612720"
  },
  {
    "text": "In effect, I think there's some really awesome usage",
    "start": "613919",
    "end": "615559"
  },
  {
    "text": "of discriminated unions, which unfortunately",
    "start": "615559",
    "end": "617159"
  },
  {
    "text": "I don't have a huge amount of time to talk about.",
    "start": "617159",
    "end": "618878"
  },
  {
    "text": "I think one of the coolest things",
    "start": "619399",
    "end": "620519"
  },
  {
    "text": "is the ability to attach a property signature",
    "start": "620519",
    "end": "622360"
  },
  {
    "text": "that automatically adds a discriminator.",
    "start": "622360",
    "end": "623919"
  },
  {
    "text": "Because as I said, certainly a tag is gonna be",
    "start": "624240",
    "end": "626959"
  },
  {
    "text": "one of the most useful ways to have a discriminated union",
    "start": "626960",
    "end": "629840"
  },
  {
    "text": "gives really clear results and you can check",
    "start": "630480",
    "end": "632199"
  },
  {
    "text": "the entire union in constant time that way.",
    "start": "632200",
    "end": "634240"
  },
  {
    "text": "And so just being able to reuse an existing type",
    "start": "635360",
    "end": "637279"
  },
  {
    "text": "and dynamically add a tag like that",
    "start": "637279",
    "end": "638600"
  },
  {
    "text": "is a really great feature for leveraging these.",
    "start": "638600",
    "end": "641279"
  },
  {
    "text": "And then pattern matching was mentioned earlier.",
    "start": "642000",
    "end": "643600"
  },
  {
    "text": "Pattern matching is a huge application",
    "start": "644600",
    "end": "645878"
  },
  {
    "text": "for discriminated unions.",
    "start": "646159",
    "end": "647240"
  },
  {
    "text": "And again, it doesn't always have to be done",
    "start": "648639",
    "end": "650519"
  },
  {
    "text": "in an explicit way where you've enumerated",
    "start": "650519",
    "end": "652079"
  },
  {
    "text": "every possible tag.",
    "start": "652080",
    "end": "653039"
  },
  {
    "text": "But the great thing I mentioned unions can be checked",
    "start": "653279",
    "end": "655080"
  },
  {
    "text": "in constant time if they're discriminated.",
    "start": "655080",
    "end": "656519"
  },
  {
    "text": "Even with pattern matching, whether it's an ordered union,",
    "start": "657039",
    "end": "659399"
  },
  {
    "text": "you can still use all the information you know.",
    "start": "659960",
    "end": "662200"
  },
  {
    "text": "And if two branches are disjoint, it doesn't matter",
    "start": "662200",
    "end": "664080"
  },
  {
    "text": "what the order of those two branches are",
    "start": "664080",
    "end": "665360"
  },
  {
    "text": "because they can't co-occur.",
    "start": "665360",
    "end": "666399"
  },
  {
    "text": "So you can even check many pattern match expressions",
    "start": "666840",
    "end": "668919"
  },
  {
    "text": "in constant time as well, which otherwise",
    "start": "668919",
    "end": "671120"
  },
  {
    "text": "wouldn't really be possible in JavaScript.",
    "start": "671320",
    "end": "672759"
  },
  {
    "text": "So R type leverages this quite a lot.",
    "start": "674159",
    "end": "676000"
  },
  {
    "text": "This is very built into the roots of R types system.",
    "start": "677279",
    "end": "679960"
  },
  {
    "text": "So it automatically discriminates unions",
    "start": "680720",
    "end": "682159"
  },
  {
    "text": "to arbitrary depth.",
    "start": "682159",
    "end": "683200"
  },
  {
    "text": "So we'll just keep iterating and finding",
    "start": "684159",
    "end": "686559"
  },
  {
    "text": "the most efficient next discriminant of a union.",
    "start": "686559",
    "end": "688559"
  },
  {
    "text": "And you can kind of see some nested switch statements,",
    "start": "688960",
    "end": "691000"
  },
  {
    "text": "but the code's probably way too small for you to read",
    "start": "691000",
    "end": "692600"
  },
  {
    "text": "if I had to guess.",
    "start": "692600",
    "end": "693199"
  },
  {
    "text": "But essentially the important thing is it does it for you.",
    "start": "694279",
    "end": "696279"
  },
  {
    "text": "You just define a union like in typescript,",
    "start": "696279",
    "end": "697839"
  },
  {
    "text": "and it will do all this kind of type based analysis",
    "start": "698159",
    "end": "700200"
  },
  {
    "text": "and figure out what checks it needs to make",
    "start": "700519",
    "end": "701959"
  },
  {
    "text": "to give you the best error possible",
    "start": "701960",
    "end": "703399"
  },
  {
    "text": "and be as fast as possible.",
    "start": "703399",
    "end": "704519"
  },
  {
    "text": "And then the last thing I'll highlight is that",
    "start": "705519",
    "end": "707159"
  },
  {
    "text": "there's also a very nice feature where I mentioned",
    "start": "708080",
    "end": "710960"
  },
  {
    "text": "like branch dependent transformations,",
    "start": "710960",
    "end": "713559"
  },
  {
    "text": "where maybe you like really care about which branch",
    "start": "714600",
    "end": "716519"
  },
  {
    "text": "you're on.",
    "start": "716519",
    "end": "717019"
  },
  {
    "text": "For some reason, for example, like let's say",
    "start": "717840",
    "end": "719519"
  },
  {
    "text": "that I have a schema that wants to transform some data.",
    "start": "719519",
    "end": "722878"
  },
  {
    "text": "And based on which branch of a union I'm on,",
    "start": "724519",
    "end": "726720"
  },
  {
    "text": "that transformation could be different.",
    "start": "726720",
    "end": "728159"
  },
  {
    "text": "Well, I probably don't want like a non-deterministic schema",
    "start": "728519",
    "end": "730558"
  },
  {
    "text": "or one that relies on the order of the union.",
    "start": "730559",
    "end": "732600"
  },
  {
    "text": "Because that's not what unions are about.",
    "start": "733279",
    "end": "734878"
  },
  {
    "text": "They're supposed to be unordered.",
    "start": "735559",
    "end": "737039"
  },
  {
    "text": "And so if you want to like have those kinds",
    "start": "737960",
    "end": "740159"
  },
  {
    "text": "of strong guarantees about when you can transform data",
    "start": "740159",
    "end": "742840"
  },
  {
    "text": "or when you can't, it's exactly when you can discriminate",
    "start": "742840",
    "end": "745519"
  },
  {
    "text": "that branch of the union from every other branch.",
    "start": "745519",
    "end": "747279"
  },
  {
    "text": "If you can guarantee that that branch has",
    "start": "747639",
    "end": "749279"
  },
  {
    "text": "no overlapping values, then you're safe to transform it",
    "start": "749279",
    "end": "751360"
  },
  {
    "text": "however you want.",
    "start": "751360",
    "end": "751878"
  },
  {
    "text": "And you don't need to worry about non-determinism,",
    "start": "752360",
    "end": "754399"
  },
  {
    "text": "which is a great thing to avoid",
    "start": "754399",
    "end": "756120"
  },
  {
    "text": "when you're building a validator.",
    "start": "756120",
    "end": "757279"
  },
  {
    "text": "So yeah, discriminate your unions.",
    "start": "757879",
    "end": "759919"
  },
  {
    "text": "Use tools that leverage the power of discriminated unions.",
    "start": "760519",
    "end": "762959"
  },
  {
    "text": "I think that honestly, the ecosystem is just starting",
    "start": "763200",
    "end": "765279"
  },
  {
    "text": "to kind of explore this stuff now and there's a lot to do.",
    "start": "765399",
    "end": "768080"
  },
  {
    "text": "So, you know, work on that kind of code,",
    "start": "768960",
    "end": "770720"
  },
  {
    "text": "leverage that kind of code.",
    "start": "771240",
    "end": "772200"
  },
  {
    "text": "I assume you've all already joined the effect discord.",
    "start": "773000",
    "end": "775039"
  },
  {
    "text": "I like to hang out there as well.",
    "start": "775879",
    "end": "777000"
  },
  {
    "text": "Join the R-type discord if you haven't done that",
    "start": "777399",
    "end": "779320"
  },
  {
    "text": "and you're interested in this kind of thing.",
    "start": "780200",
    "end": "781320"
  },
  {
    "text": "We're always talking about that.",
    "start": "781320",
    "end": "782519"
  },
  {
    "text": "And then certainly, as I mentioned, I personally",
    "start": "782960",
    "end": "785159"
  },
  {
    "text": "am very interested and passionate about this.",
    "start": "785159",
    "end": "786960"
  },
  {
    "text": "So come talk to me anytime and thanks so much everyone.",
    "start": "787320",
    "end": "789639"
  },
  {
    "text": "(audience applauds)",
    "start": "790759",
    "end": "791720"
  }
]