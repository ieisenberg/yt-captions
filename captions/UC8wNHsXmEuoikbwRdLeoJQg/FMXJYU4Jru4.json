[
  {
    "text": "Okay, so today's plan is basically to",
    "start": "4433",
    "end": "14799"
  },
  {
    "text": "work over JS docs, because right now I have stubbed",
    "start": "14800",
    "end": "20716"
  },
  {
    "text": "a lot of things, but there isn't a lot of JS docs around, and JS docs would be very",
    "start": "20716",
    "end": "28183"
  },
  {
    "text": "useful for people coming over the project. So what I'll do today is have a look at",
    "start": "28183",
    "end": "36198"
  },
  {
    "text": "the entire code base, every method, check out if has JS docs or not, and",
    "start": "36199",
    "end": "43183"
  },
  {
    "text": "eventually add it whenever it's missing. And I will also keep track",
    "start": "43183",
    "end": "48732"
  },
  {
    "text": "of additional things to do. So I'll open GitHub, okay, just to have a",
    "start": "48733",
    "end": "58800"
  },
  {
    "text": "window where I can record things I see while looking into the code base, and when I",
    "start": "58800",
    "end": "64900"
  },
  {
    "text": "see something I don't like, I'll keep track of it Okay, so last time I probably started",
    "start": "64900",
    "end": "73199"
  },
  {
    "text": "working over the PoisonPill. Maybe I should give more",
    "start": "73199",
    "end": "78433"
  },
  {
    "text": "description what a PoisonPill is. So a PoisonPill is a special value that tells the behavior",
    "start": "78433",
    "end": "83616"
  },
  {
    "text": "entity to shut itself down. PoisonPill is handled",
    "start": "83616",
    "end": "89616"
  },
  {
    "text": "only when you actually use...",
    "start": "89616",
    "end": "94699"
  },
  {
    "text": "Hey there, hi Mike, how's it going? So PoisonPill is handled only when you",
    "start": "94699",
    "end": "102916"
  },
  {
    "text": "are using a",
    "start": "102916",
    "end": "109900"
  },
  {
    "text": "queue-based recipient behavior.",
    "start": "109900",
    "end": "117883"
  },
  {
    "text": "And that's basically because we have different kind of RecipientBehaviors,",
    "start": "117883",
    "end": "124715"
  },
  {
    "text": "and that is basically the next model we have to... You are... Oh, you, yeah, exactly.",
    "start": "124716",
    "end": "131750"
  },
  {
    "text": "PoisonPill is handled only when you are using a queue-based RecipientBehavior perfectly.",
    "start": "131750",
    "end": "138400"
  },
  {
    "text": "That's because other RecipientBehaviors,",
    "start": "138400",
    "end": "145000"
  },
  {
    "text": "such as fromfunctionEffect",
    "start": "145000",
    "end": "153250"
  },
  {
    "text": "would not care about PoisonPill.",
    "start": "153250",
    "end": "162900"
  },
  {
    "text": "Okay. So that is basically telling that if you",
    "start": "162900",
    "end": "168866"
  },
  {
    "text": "are using a RecipientBehaviour that is in memory queue, this will actually tell the",
    "start": "168866",
    "end": "177166"
  },
  {
    "text": "behavior to shut down itself. fromfunctionEffect wouldn't, because",
    "start": "177166",
    "end": "182766"
  },
  {
    "text": "fromfunctionEffect is thought as a behavior that basically does the stuff and",
    "start": "182766",
    "end": "187916"
  },
  {
    "text": "shut itself down immediately. So the entity actually is blown up every time.",
    "start": "187916",
    "end": "194733"
  },
  {
    "text": "And if you want something that is more persistent, you actually have to use a queue in order",
    "start": "194733",
    "end": "200733"
  },
  {
    "text": "to control the lifetime of the queuing of the messages, etc.",
    "start": "200733",
    "end": "206666"
  },
  {
    "text": "Okay. To make construction new PoisonPill, this is right now an effectful operation.",
    "start": "206666",
    "end": "213750"
  },
  {
    "text": "is right now an effectful operation. Yeah. That's if the given value is a PoisonPill.",
    "start": "213750",
    "end": "225516"
  },
  {
    "text": "Nothing more. This is a schema for a PoisonPill that is",
    "start": "225516",
    "end": "236016"
  },
  {
    "text": "used to encode the value over the wire.",
    "start": "236016",
    "end": "248283"
  },
  {
    "text": "That is because PoisonPill can be part of your RecipientBehaviour so it can be part of",
    "start": "248283",
    "end": "253816"
  },
  {
    "text": "the messaging protocol you have with an entity. So maybe I can also say that.",
    "start": "253816",
    "end": "261082"
  },
  {
    "text": "This is useful if you want a behaviour",
    "start": "261116",
    "end": "272349"
  },
  {
    "text": "that can be shut down from an external message.",
    "start": "272349",
    "end": "286216"
  },
  {
    "text": "So you can effectively use this as a message.",
    "start": "286216",
    "end": "291900"
  },
  {
    "text": "Okay. takeOrInterrupt Attempts to take a message from the queue, the queue that the",
    "start": "291900",
    "end": "297266"
  },
  {
    "text": "same way the Queue.takes does. If the result is a PoisonPill, it will interrupt the effect.",
    "start": "297266",
    "end": "303283"
  },
  {
    "text": "Okay. This is just a utility. It can be implemented. Yeah.",
    "start": "303283",
    "end": "308483"
  },
  {
    "text": "Got to like those PoisonPills. Yeah. This is effectively just a utility can be",
    "start": "308483",
    "end": "314315"
  },
  {
    "text": "implemented also in userland, but why not? It's just two lines of code.",
    "start": "314316",
    "end": "319866"
  },
  {
    "text": "So this is basically what it will take from the queue that we will receive from your in-memory",
    "start": "319866",
    "end": "326815"
  },
  {
    "text": "queue behavior, and then it will basically call interrupt",
    "start": "326916",
    "end": "332516"
  },
  {
    "text": "whenever it is a PoisonPill or not.",
    "start": "332516",
    "end": "335916"
  },
  {
    "text": "Okay. So this module is done. Okay. A recipient behavior. Right now, the entity behaviors are",
    "start": "338416",
    "end": "344432"
  },
  {
    "text": "represented as effects that will return a function, and",
    "start": "344433",
    "end": "350866"
  },
  {
    "text": "I will come back to this later. And these effects have as context",
    "start": "350866",
    "end": "356050"
  },
  {
    "text": "whatever they want, plus they have a RecipientBehavior context and they are controlled by a scope.",
    "start": "356050",
    "end": "361050"
  },
  {
    "text": "Basically, the scope is closed whenever the sharding or the cluster wants to kill the",
    "start": "361666",
    "end": "367815"
  },
  {
    "text": "entity, the specific entity. From outside, it will close the scope.",
    "start": "367816",
    "end": "372716"
  },
  {
    "text": "So basically, the effect will be every So basically, the effect will be every resource you have in the effect will be interrupted and whatever.",
    "start": "373500",
    "end": "379000"
  },
  {
    "text": "And also, what it returns is a function that takes in a message",
    "start": "379300",
    "end": "384366"
  },
  {
    "text": "and returns an effect that returns basically how the message has",
    "start": "384366",
    "end": "391833"
  },
  {
    "text": "been processed or an exception while offering the message. So basically, this is",
    "start": "391833",
    "end": "397616"
  },
  {
    "text": "what I call offer, usually. Offer is basically a function that takes",
    "start": "397616",
    "end": "402750"
  },
  {
    "text": "in the message and returns if the message has been processed or not or just acknowledged.",
    "start": "402750",
    "end": "407550"
  },
  {
    "text": "And this is one of the things that I am still thinking about alpha because it's something",
    "start": "408216",
    "end": "413583"
  },
  {
    "text": "that maybe I would like to change. But right now, I didn't came with",
    "start": "413583",
    "end": "419083"
  },
  {
    "text": "something better than this because I didn't want to force people to have queues.",
    "start": "419083",
    "end": "425883"
  },
  {
    "text": "If you want some behavior that is just ephemeral that does something and shut down, I'm okay",
    "start": "426250",
    "end": "432116"
  },
  {
    "text": "with that. And this kind of signature allows that. But I need to tell the",
    "start": "432116",
    "end": "437783"
  },
  {
    "text": "users more about this. So our RecipientBehavior describes how a",
    "start": "437783",
    "end": "451900"
  },
  {
    "text": "specific EntityType should be. A RecipientType",
    "start": "451900",
    "end": "458166"
  },
  {
    "text": "to be honest, because it can be also a topic.",
    "start": "458166",
    "end": "460650"
  },
  {
    "text": "Type should behave.",
    "start": "463366",
    "end": "464216"
  },
  {
    "text": "Okay. This is the actual implementation of what",
    "start": "468916",
    "end": "478566"
  },
  {
    "text": "an entity should do. Oh, you're right.",
    "start": "478566",
    "end": "484266"
  },
  {
    "text": "Now we are talking. Okay. So this is the actual implementation of",
    "start": "486949",
    "end": "492633"
  },
  {
    "text": "what an entity should do. what an entity should do. Upon receiving a message.",
    "start": "492633",
    "end": "504449"
  },
  {
    "text": "This is what an entity should do. Upon receiving a message.",
    "start": "505966",
    "end": "508500"
  },
  {
    "text": "This could require additional context.",
    "start": "511050",
    "end": "517583"
  },
  {
    "text": "So this could require additional context and lifetime.",
    "start": "520800",
    "end": "524566"
  },
  {
    "text": "Maybe I'll... Okay. This could require context. Okay. That's it. Okay. And now I will say about",
    "start": "526050",
    "end": "532383"
  },
  {
    "text": "why there is a scope in there. So the scope provided in the context is",
    "start": "532383",
    "end": "543816"
  },
  {
    "text": "controlled by the cluster EntityManager and is used",
    "start": "543816",
    "end": "555415"
  },
  {
    "text": "to request the shutdown of the entity.",
    "start": "560366",
    "end": "568699"
  },
  {
    "text": "Okay. So you can safely scope every...",
    "start": "570383",
    "end": "580199"
  },
  {
    "text": "So you can safely scope whatever source you want. And the EntityManager will clean it up for you.",
    "start": "580833",
    "end": "587833"
  },
  {
    "text": "Okay.",
    "start": "587833",
    "end": "588033"
  },
  {
    "text": "You want. And the EntityManager will close the",
    "start": "594066",
    "end": "602366"
  },
  {
    "text": "scope for you when the entity is shut down.",
    "start": "602366",
    "end": "610050"
  },
  {
    "text": "Okay. Okay. So let's try to read that again.",
    "start": "615983",
    "end": "622350"
  },
  {
    "text": "A RecipientBehaviour describes how a specific RecipientType should behave. This is the actual implementation of what",
    "start": "623083",
    "end": "628899"
  },
  {
    "text": "an entity should do upon receiving a message. This could require additional context.",
    "start": "628899",
    "end": "633766"
  },
  {
    "text": "The scope provided in the context is controlled by the cluster EntityManager and is used",
    "start": "634949",
    "end": "639983"
  },
  {
    "text": "to request the shutdown of the entity. So you can safely scope whatever source you want to use for your behavior.",
    "start": "640250",
    "end": "650533"
  },
  {
    "text": "And the EntityManager will close the scope for you when the entity is shutdown.",
    "start": "652750",
    "end": "658316"
  },
  {
    "text": "Okay. And now I also need to add something",
    "start": "658783",
    "end": "664149"
  },
  {
    "text": "about telling what the return value actually is.",
    "start": "664149",
    "end": "669233"
  },
  {
    "text": "Okay. So the function returned by the RecipientBehaviour",
    "start": "669500",
    "end": "674566"
  },
  {
    "text": " is what we call offer. The function returned by the RecipientBehaviour",
    "start": "674566",
    "end": "688300"
  },
  {
    "text": "effect is... Oh, hi there.",
    "start": "688300",
    "end": "693915"
  },
  {
    "text": "Nice to see you back. Okay. The function returned by the RecipientBehaviour effect is",
    "start": "694516",
    "end": "700300"
  },
  {
    "text": "what we call \"offer\" effect.",
    "start": "700300",
    "end": "706233"
  },
  {
    "text": "Okay. So the \"offer\" effect is what the EntityManager calls  to hand messages to",
    "start": "708000",
    "end": "713649"
  },
  {
    "text": "the behavior. Maybe. I'm not sure if it's clear what it does.",
    "start": "713649",
    "end": "717516"
  },
  {
    "text": "The offer function is used by the EntityManager",
    "start": "718699",
    "end": "726399"
  },
  {
    "text": "to give messages to the behavior.",
    "start": "732149",
    "end": "741115"
  },
  {
    "text": "So basically there is like two phases. There is the offer one where the message",
    "start": "746933",
    "end": "756149"
  },
  {
    "text": "is hand off to the behavior and",
    "start": "756149",
    "end": "762133"
  },
  {
    "text": "the behavior upon offering can return whatever the state of that message is.",
    "start": "762133",
    "end": "768433"
  },
  {
    "text": "So basically the behavior can say, okay, I just received the message. I acknowledged that I",
    "start": "768899",
    "end": "774366"
  },
  {
    "text": "received the message. Do nothing more. I'm fine with it.",
    "start": "774366",
    "end": "778850"
  },
  {
    "text": "Or the behavior can already reply with the actual result for",
    "start": "779449",
    "end": "785066"
  },
  {
    "text": "that message because maybe it can process that message immediately. And this is what I called before",
    "start": "785066",
    "end": "791100"
  },
  {
    "text": "ephemeral behaviors. Basically ephemeral behaviors only implement this part of",
    "start": "791100",
    "end": "798550"
  },
  {
    "text": "the behavior, only the offer function and doesn't care about the lifetime because they will",
    "start": "798550",
    "end": "804733"
  },
  {
    "text": "eventually be spawned after and killed immediately. Okay. So the offer, the function returned by",
    "start": "804733",
    "end": "812050"
  },
  {
    "text": "the recipe, the offer is what we call offer effect. The offer effect is used by EntityManager",
    "start": "812050",
    "end": "818649"
  },
  {
    "text": "to give messages to the RecipientBehavior. Okay. I think that this is more than enough.",
    "start": "818649",
    "end": "826550"
  },
  {
    "text": "Okay. Right now I have this kind of option that",
    "start": "826550",
    "end": "831649"
  },
  {
    "text": "I'm looking towards find a way to put somewhere else",
    "start": "831649",
    "end": "837983"
  },
  {
    "text": "I would like this to be a combinator of the RecipientBehaviour  instead of being  an option, but I",
    "start": "838166",
    "end": "845183"
  },
  {
    "text": "need to find out more how can this become a behavior. Basically, this is the entity max idle",
    "start": "845183",
    "end": "852199"
  },
  {
    "text": "time, which is basically the max time that can pass",
    "start": "852199",
    "end": "858983"
  },
  {
    "text": "between one message being processed and another. After that time expires, the entity",
    "start": "858983",
    "end": "865782"
  },
  {
    "text": "manager will try to shut down the recipient behavior for that specific entity because basically the entity is",
    "start": "865783",
    "end": "872350"
  },
  {
    "text": "doing nothing, so it doesn't make sense to have an entity in there. So right now maybe I'll do, I had",
    "start": "872350",
    "end": "881949"
  },
  {
    "text": "something about this, but I really want to kill this. Okay.",
    "start": "881949",
    "end": "886583"
  },
  {
    "text": "These are the options for an EntityBehavior.",
    "start": "888216",
    "end": "896133"
  },
  {
    "text": "This control the entityMaxIdleTime and",
    "start": "899350",
    "end": "908316"
  },
  {
    "text": "check out more on that over...",
    "start": "908316",
    "end": "914415"
  },
  {
    "text": "This is already documented elsewhere, so maybe I check out more on that over the ShardingConfig.",
    "start": "915250",
    "end": "921433"
  },
  {
    "text": "So this actually, this allows to override",
    "start": "923883",
    "end": "930583"
  },
  {
    "text": "the setting for a specific entity.",
    "start": "930583",
    "end": "937333"
  },
  {
    "text": "So if you have an entity that takes a lot of time spawning up and takes a lot of time going down and doesn't receive a lot of",
    "start": "938433",
    "end": "945116"
  },
  {
    "text": "messages, maybe you want for a specific entity, these settings to be higher so the EntityManager",
    "start": "945116",
    "end": "952615"
  },
  {
    "text": " doesn't try to kill that behavior so frequently.",
    "start": "952616",
    "end": "956966"
  },
  {
    "text": "Okay. FromFunctionEffect. If I remember this correctly and I will",
    "start": "958516",
    "end": "963766"
  },
  {
    "text": "check it out, this FromFunctionEffect is just what I said before.",
    "start": "963766",
    "end": "969783"
  },
  {
    "text": "Okay. This is the simplest implementation of a behavior that basically given an entity ID and a message",
    "start": "969783",
    "end": "976550"
  },
  {
    "text": "will return the message state, which is basically if I process or not the",
    "start": "977449",
    "end": "982933"
  },
  {
    "text": "specific message never and requires only error.",
    "start": "982933",
    "end": "989216"
  },
  {
    "text": "Okay. And this has no resources. This has no lifetime.",
    "start": "989516",
    "end": "996165"
  },
  {
    "text": "So basically it will be killed whatever the EntityManager wants to.",
    "start": "997116",
    "end": "1003532"
  },
  {
    "text": "Okay. This is the simplest",
    "start": "1004316",
    "end": "1009683"
  },
  {
    "text": "behavior you can have",
    "start": "1009683",
    "end": "1018716"
  },
  {
    "text": "You provide a function that given the",
    "start": "1023383",
    "end": "1030566"
  },
  {
    "text": "entityId and the message itself",
    "start": "1030566",
    "end": "1038850"
  },
  {
    "text": " it will immediately process it.",
    "start": "1041516",
    "end": "1046683"
  },
  {
    "text": "Okay. You are then required to return a MessageState",
    "start": "1049566",
    "end": "1058833"
  },
  {
    "text": " to tell",
    "start": "1058833",
    "end": "1064899"
  },
  {
    "text": "the caller if the message has arrived and processed.",
    "start": "1065399",
    "end": "1077216"
  },
  {
    "text": "Okay. So this is the simplest behavior you can have. You can provide a function that given the",
    "start": "1078116",
    "end": "1084566"
  },
  {
    "text": "entity ID and the message, it will immediately process it. You are then required to return a MessageState",
    "start": "1084566",
    "end": "1091100"
  },
  {
    "text": " to tell the caller if the message has just arrived and will be later processed",
    "start": "1091100",
    "end": "1100016"
  },
  {
    "text": "or it has been processed.",
    "start": "1100016",
    "end": "1107933"
  },
  {
    "text": "And then we have FromFunctionEffectStateful  which is basically the same thing, but here",
    "start": "1109750",
    "end": "1118166"
  },
  {
    "text": "you have an initial state function that given the entity ID will return the initial state",
    "start": "1118166",
    "end": "1125016"
  },
  {
    "text": "you want. And then you also have the same way as",
    "start": "1125333",
    "end": "1132316"
  },
  {
    "text": "before an handler that takes the entity ID, the message and RF to that state you have, you had",
    "start": "1132316",
    "end": "1139733"
  },
  {
    "text": "before and will basically process this. Okay. So this is a stateful version.",
    "start": "1139733",
    "end": "1150766"
  },
  {
    "text": "So this is basically a stateful version of FromFunctionEffect.",
    "start": "1151433",
    "end": "1154750"
  },
  {
    "text": "Version of FromFunctionEffect.",
    "start": "1156833",
    "end": "1162566"
  },
  {
    "text": "You can provide a function to get the initial state and you can",
    "start": "1166666",
    "end": "1173382"
  },
  {
    "text": "provide a function to get the initial state.",
    "start": "1173383",
    "end": "1179933"
  },
  {
    "text": "And then it will be passed as Ref.",
    "start": "1183866",
    "end": "1190516"
  },
  {
    "text": "Maybe it's better if I specify that everything here is performed in memory.",
    "start": "1192266",
    "end": "1199033"
  },
  {
    "text": "Everything here is just stored in memory.",
    "start": "1199916",
    "end": "1208433"
  },
  {
    "text": "So if you have some transient entity or something that requires maybe some memory state, you",
    "start": "1209033",
    "end": "1217333"
  },
  {
    "text": "can use this. Everything here is just stored in memory.",
    "start": "1217333",
    "end": "1224050"
  },
  {
    "text": "So eventual persistence",
    "start": "1226033",
    "end": "1231166"
  },
  {
    "text": "of the state is up to you.",
    "start": "1231166",
    "end": "1238216"
  },
  {
    "text": "Okay. And finally we have FromInMemoryQueue.",
    "start": "1244016",
    "end": "1247366"
  },
  {
    "text": "Let's see how the implementation was.",
    "start": "1252949",
    "end": "1256033"
  },
  {
    "text": "Okay. This is a little more complex, but what",
    "start": "1259433",
    "end": "1265483"
  },
  {
    "text": "basically does, it creates an unbounded queue with either the message or the poison",
    "start": "1265483",
    "end": "1272083"
  },
  {
    "text": "pill we have seen before. And then you have PoisonPill.make",
    "start": "1272083",
    "end": "1278766"
  },
  {
    "text": "Okay. Oh, this is the offer function. Yeah. It basically offer the methods to the",
    "start": "1280100",
    "end": "1285133"
  },
  {
    "text": "queue and the wait for the shutdown to be completed, which is just a deferred that will",
    "start": "1285133",
    "end": "1291316"
  },
  {
    "text": "complete when the shutdown is completed. Okay. Behave your start it.",
    "start": "1291316",
    "end": "1296632"
  },
  {
    "text": "Okay. I handle the message.",
    "start": "1297149",
    "end": "1301416"
  },
  {
    "text": "Oh, I call the handler. Okay. And the handler now will have the queue and oh, a reply function. Yeah.",
    "start": "1304050",
    "end": "1309183"
  },
  {
    "text": "That will basically tell for that message, which is the message state. Okay. And this part is, oh, this is the actual",
    "start": "1309566",
    "end": "1318433"
  },
  {
    "text": "implementation of the offer. Okay. If already have in the cache, the MessageState",
    "start": "1318433",
    "end": "1324083"
  },
  {
    "text": "I return the same message state. Otherwise I just call queue the offer.",
    "start": "1324083",
    "end": "1332216"
  },
  {
    "text": "Okay. So this has a little bit of logic more",
    "start": "1332649",
    "end": "1339216"
  },
  {
    "text": "than the other ones. Okay. So this behavior uses a queue.",
    "start": "1339216",
    "end": "1345699"
  },
  {
    "text": "And I'm sure if you already had fromEffect  but if not, you could drop the function from",
    "start": "1347616",
    "end": "1353933"
  },
  {
    "text": "the names fromEffect, fromEffectStateful. Yeah. That could be a thing.",
    "start": "1353933",
    "end": "1359033"
  },
  {
    "text": "Yeah. Right now it has function because before I had a fromEffect and",
    "start": "1359383",
    "end": "1366500"
  },
  {
    "text": "basically had the message and the entity ID in the environment",
    "start": "1366500",
    "end": "1372716"
  },
  {
    "text": "instead of as a parameter of a function. But yeah, I could see",
    "start": "1372716",
    "end": "1378898"
  },
  {
    "text": "that being something. Yeah. Let me add that to the things I need to do.",
    "start": "1378899",
    "end": "1388466"
  },
  {
    "text": "Consider renaming from fromFunctionEffect to just fromEffect.",
    "start": "1388566",
    "end": "1400766"
  },
  {
    "text": "Okay. Basically before I had that, I had that variant that was just called",
    "start": "1401916",
    "end": "1407683"
  },
  {
    "text": "fromEffect and the message came from the environment. The thing is that then the environment",
    "start": "1407683",
    "end": "1415416"
  },
  {
    "text": "had a service that had a generic type and I am",
    "start": "1415416",
    "end": "1422116"
  },
  {
    "text": "not a big fan of those. I know that those can be done, but I'm",
    "start": "1422116",
    "end": "1427600"
  },
  {
    "text": "not a big fan of those. And so that's why for now I",
    "start": "1427600",
    "end": "1433898"
  },
  {
    "text": "had them called fromEffect. But yeah, I already tracked that.",
    "start": "1433899",
    "end": "1438982"
  },
  {
    "text": "I need to rename those. Okay. So this behavior uses a queue where the",
    "start": "1439600",
    "end": "1449683"
  },
  {
    "text": "entity will accumulate",
    "start": "1449683",
    "end": "1455132"
  },
  {
    "text": "messages to be processed.",
    "start": "1455133",
    "end": "1461100"
  },
  {
    "text": "And then you can use the...",
    "start": "1462633",
    "end": "1469100"
  },
  {
    "text": "You can use... And then you can use the Dequeue to take message from that and process them.",
    "start": "1469333",
    "end": "1480216"
  },
  {
    "text": "Okay. PoisonPill is provided.",
    "start": "1481533",
    "end": "1488233"
  },
  {
    "text": "Okay. PoisonPill is provided to request",
    "start": "1488416",
    "end": "1494500"
  },
  {
    "text": "interruption of the entity behavior.",
    "start": "1494500",
    "end": "1498516"
  },
  {
    "text": "Okay. And I think there is nothing more in here. Okay.",
    "start": "1503133",
    "end": "1508149"
  },
  {
    "text": "Okay. RecipientBehavior context. RecipientBehavior context is basically",
    "start": "1511466",
    "end": "1517416"
  },
  {
    "text": "the context is provided to a RecipientBehavior. And right now has some things that are",
    "start": "1517416",
    "end": "1528350"
  },
  {
    "text": "kind of the same that you can have in your behavior, but they are useful because they are",
    "start": "1528350",
    "end": "1535232"
  },
  {
    "text": "expected to be just information of where the behavior is running. You have the EntityId, the ShardId for",
    "start": "1535233",
    "end": "1543233"
  },
  {
    "text": "the specific entity, the recipientType. So if you write generic behaviors, you",
    "start": "1543233",
    "end": "1549833"
  },
  {
    "text": "don't have to explicitly pass in the recipient type because you can read",
    "start": "1549833",
    "end": "1555716"
  },
  {
    "text": "that from the context. And you can also have the fork shutdown,",
    "start": "1555716",
    "end": "1560616"
  },
  {
    "text": "which is basically away from within the context, request the shutdown of the entity.",
    "start": "1561199",
    "end": "1568616"
  },
  {
    "text": "So if for some reason you detect that the",
    "start": "1568633",
    "end": "1574600"
  },
  {
    "text": "entity is processing something that is not correct or something that you want for",
    "start": "1574600",
    "end": "1580133"
  },
  {
    "text": "some reason to just shut down this entity right now without waiting it for going into an",
    "start": "1580133",
    "end": "1585716"
  },
  {
    "text": "entity idle timeout, you can basically do that by just calling RecipientBehaviorContext.forkShutdown",
    "start": "1585716",
    "end": "1593533"
  },
  {
    "text": "and the entity manager will shut down as soon as possible the behavior.",
    "start": "1593533",
    "end": "1599600"
  },
  {
    "text": "So this is something that I don't care about.",
    "start": "1601300",
    "end": "1607350"
  },
  {
    "text": "And I can say this is the context, context information that is available.",
    "start": "1609683",
    "end": "1619250"
  },
  {
    "text": "Okay. This is available to the BehaviorContext.",
    "start": "1619850",
    "end": "1624550"
  },
  {
    "text": "RecipientBehavior",
    "start": "1627516",
    "end": "1629066"
  },
  {
    "text": "And has general information about this",
    "start": "1632750",
    "end": "1639816"
  },
  {
    "text": "specific entity like the",
    "start": "1639816",
    "end": "1646566"
  },
  {
    "text": "EntityId or the recipientType",
    "start": "1646566",
    "end": "1654500"
  },
  {
    "text": "And now you see why I said before that I wasn't sure about keeping",
    "start": "1655633",
    "end": "1661116"
  },
  {
    "text": "information in the context or having that function that received messages because actually",
    "start": "1661116",
    "end": "1667433"
  },
  {
    "text": "you already have here the EntityId so you can get it yourself by from the context.",
    "start": "1667433",
    "end": "1674166"
  },
  {
    "text": "But yeah, it's, it's easier to just type a function that has a",
    "start": "1676183",
    "end": "1681632"
  },
  {
    "text": "parameter or the EntityId instead of getting that from the context, which will be an effect.",
    "start": "1681633",
    "end": "1688399"
  },
  {
    "text": "So yeah, I'm still unsure about that. I'd prefer more the context way, which is",
    "start": "1688399",
    "end": "1693565"
  },
  {
    "text": "more effectful way to do that. But yeah, I could see people saying that.",
    "start": "1693566",
    "end": "1698800"
  },
  {
    "text": "Yeah. Writing something like, for example, I have test in here.",
    "start": "1699133",
    "end": "1704416"
  },
  {
    "text": "Writing behaviors that maybe Sharding.tests.ts Okay.",
    "start": "1707566",
    "end": "1711449"
  },
  {
    "text": "FromFunctionEffect, writing behavior like this FromFunctionEffect entity message",
    "start": "1712733",
    "end": "1717949"
  },
  {
    "text": "and say if the entity is blah, do this else do that. Yeah, this is way simpler of accessing",
    "start": "1718816",
    "end": "1727266"
  },
  {
    "text": "the tag, reading the entity, flat map it and then whatever.",
    "start": "1727266",
    "end": "1732266"
  },
  {
    "text": "Yeah, you can also use that effect then. And now it's even easier thanks to latest changes of that.",
    "start": "1732750",
    "end": "1738533"
  },
  {
    "text": "But yeah, I'm still unsure about that. Okay.",
    "start": "1738916",
    "end": "1743233"
  },
  {
    "text": "So back where it was. Okay. a Tag to recipient behavior context.",
    "start": "1743966",
    "end": "1750800"
  },
  {
    "text": "Okay. Nothing more to say about this. Creates a new RecipientBehaviorContext.",
    "start": "1751483",
    "end": "1758250"
  },
  {
    "text": "Okay. And this is just the, those are just the utilities to get the",
    "start": "1759199",
    "end": "1764648"
  },
  {
    "text": "current EntityId, the current ShardId, the current recipientType.",
    "start": "1764649",
    "end": "1770483"
  },
  {
    "text": "Okay. And this forks the shutdown of the current recipient",
    "start": "1772683",
    "end": "1777766"
  },
  {
    "text": "behavior as soon as possible.",
    "start": "1777766",
    "end": "1785016"
  },
  {
    "text": "Okay. And I think that this module is almost complete.",
    "start": "1787100",
    "end": "1793382"
  },
  {
    "text": "Okay. Okay, so",
    "start": "1794116",
    "end": "1795699"
  },
  {
    "text": "next one. RecipientType. Okay. RecipientType.",
    "start": "1799500",
    "end": "1804366"
  },
  {
    "text": "What is a RecipientType? Basically in cluster, we have two kinds of recipients.",
    "start": "1804866",
    "end": "1810600"
  },
  {
    "text": "We have an entity type recipient and a topic type recipient.",
    "start": "1811266",
    "end": "1816049"
  },
  {
    "text": "Basic difference is that the entity type",
    "start": "1817716",
    "end": "1823516"
  },
  {
    "text": "can live only on a single pod at a time. The topic type can live",
    "start": "1823516",
    "end": "1829816"
  },
  {
    "text": "in many pod at a time. That's it. So one is a topic.",
    "start": "1829816",
    "end": "1834166"
  },
  {
    "text": "So it's just receiving information. And the other is an entity which has constraints of being alive",
    "start": "1835233",
    "end": "1842533"
  },
  {
    "text": "only in one pod at a time, et cetera, et cetera, et cetera.",
    "start": "1842533",
    "end": "1847350"
  },
  {
    "text": "And so another thing I see in here is",
    "start": "1847666",
    "end": "1854149"
  },
  {
    "text": "that I used interfaces back then.",
    "start": "1854149",
    "end": "1858533"
  },
  {
    "text": "But right now, maybe I should move to...",
    "start": "1859850",
    "end": "1863666"
  },
  {
    "text": "I should move to maybe data.",
    "start": "1865033",
    "end": "1869966"
  },
  {
    "text": "Yeah. I think data. Yeah. This is something that I don't move over the wire because it has",
    "start": "1870316",
    "end": "1876399"
  },
  {
    "text": "the schema wire in itself. So I can't move it over the wire.",
    "start": "1876399",
    "end": "1881466"
  },
  {
    "text": "But yeah. Make entity type. And schema.",
    "start": "1882833",
    "end": "1888000"
  },
  {
    "text": "Yeah. Oh yeah. Definitely. I should. Yeah. Yeah. Yeah.",
    "start": "1888316",
    "end": "1893148"
  },
  {
    "text": "Okay. Another one issue. No issue.",
    "start": "1893416",
    "end": "1897033"
  },
  {
    "text": "Okay. And this is rewrite recipient type to be",
    "start": "1900116",
    "end": "1909632"
  },
  {
    "text": "effect data instead of interfaces.",
    "start": "1909633",
    "end": "1916699"
  },
  {
    "text": "Rewriting to effect data instead of interfaces will also give",
    "start": "1917716",
    "end": "1923966"
  },
  {
    "text": "me the ability to have equals working for them.",
    "start": "1923966",
    "end": "1928399"
  },
  {
    "text": "Because when I want to compare two recipient type are the same, what I care about is just",
    "start": "1929033",
    "end": "1936250"
  },
  {
    "text": "the tag and the name. And I don't care about the schema. So yeah.",
    "start": "1936550",
    "end": "1940750"
  },
  {
    "text": "That could be a good reason to move into those. Yeah. Okay.",
    "start": "1942100",
    "end": "1946916"
  },
  {
    "text": "So entity type. An EntityType is a RcipientType that is",
    "start": "1947666",
    "end": "1960199"
  },
  {
    "text": "ensured to be alive only on a single Pod.",
    "start": "1960199",
    "end": "1967166"
  },
  {
    "text": "At a time. And the TopicType.",
    "start": "1967166",
    "end": "1973350"
  },
  {
    "text": "A TopicType can live on multiple pods.",
    "start": "1975683",
    "end": "1982600"
  },
  {
    "text": "Multiple pods at the same time.",
    "start": "1983850",
    "end": "1987866"
  },
  {
    "text": "Okay. So a recipient type is basically either an entity type or a topic type.",
    "start": "1991133",
    "end": "1997250"
  },
  {
    "text": "Okay. RecipientType is basically a pointer to",
    "start": "1997866",
    "end": "2008466"
  },
  {
    "text": "to a logical grouping,",
    "start": "2008600",
    "end": "2013783"
  },
  {
    "text": "A logical grouping of multiple entities.",
    "start": "2014550",
    "end": "2018050"
  },
  {
    "text": "Having the same RecipientBehavior.",
    "start": "2022283",
    "end": "2029783"
  },
  {
    "text": "So if I have a pointer to a recipient type, I can basically",
    "start": "2031466",
    "end": "2036866"
  },
  {
    "text": "message with whatever entity you want of that type. Maybe I should write this as well.",
    "start": "2036866",
    "end": "2043350"
  },
  {
    "text": "Okay. This value is required to be able to",
    "start": "2044233",
    "end": "2053515"
  },
  {
    "text": "message with an entity or topic.",
    "start": "2053516",
    "end": "2060816"
  },
  {
    "text": "Since it holds the Schema,",
    "start": "2062183",
    "end": "2071533"
  },
  {
    "text": "for the messages over the wire.",
    "start": "2074266",
    "end": "2079732"
  },
  {
    "text": "Without the schema.",
    "start": "2081283",
    "end": "2088583"
  },
  {
    "text": "Without the schema you cannot basically have assurance that the sender and the receiver",
    "start": "2092250",
    "end": "2097816"
  },
  {
    "text": "are speaking about the same kind of messages. So you can have inconsistent messages.",
    "start": "2098083",
    "end": "2102549"
  },
  {
    "text": "So yeah. Without the schema you cannot ensure that the",
    "start": "2103333",
    "end": "2110316"
  },
  {
    "text": "messages sent are what",
    "start": "2110316",
    "end": "2117666"
  },
  {
    "text": "the receiver expects.",
    "start": "2117666",
    "end": "2122949"
  },
  {
    "text": "Ideally, you can share this definition.",
    "start": "2124916",
    "end": "2130466"
  },
  {
    "text": "So ideally you can share this definition of the recipient type either between a consumer and a provider of a behavior.",
    "start": "2133066",
    "end": "2140349"
  },
  {
    "text": "You can share the definition between the caller and the receiver.",
    "start": "2140783",
    "end": "2147233"
  },
  {
    "text": "Okay. This is basically the contract.",
    "start": "2150633",
    "end": "2153066"
  },
  {
    "text": "Is the type suffix necessary?",
    "start": "2156816",
    "end": "2158882"
  },
  {
    "text": "Not really. It will be recipient.",
    "start": "2162350",
    "end": "2167083"
  },
  {
    "text": "It will be recipient of a message. Oh, also. Hi there. Federico",
    "start": "2169316",
    "end": "2173649"
  },
  {
    "text": "Yeah. It's not strictly necessary. Then it could be recipient.",
    "start": "2174350",
    "end": "2178850"
  },
  {
    "text": "And the recipient can be either an entity type or a topic type. Yeah. That could be renaming.",
    "start": "2180166",
    "end": "2185750"
  },
  {
    "text": "I'm thinking if that could cause some",
    "start": "2186916",
    "end": "2196750"
  },
  {
    "text": "confusion with people. Because the wording type means that it's",
    "start": "2196750",
    "end": "2203800"
  },
  {
    "text": "not a specific recipient. It's not a specific entity. This is not representing a specific entity.",
    "start": "2203800",
    "end": "2209733"
  },
  {
    "text": "User number one or user number 15. This is representing the users.",
    "start": "2209733",
    "end": "2214300"
  },
  {
    "text": "Okay. And then after you have the recipient, you need to also provide",
    "start": "2214933",
    "end": "2221083"
  },
  {
    "text": "the user ID if you want to message with a specific user. Okay.",
    "start": "2221083",
    "end": "2225416"
  },
  {
    "text": "The recipient, the \"type\" word means you have this class of",
    "start": "2226149",
    "end": "2231533"
  },
  {
    "text": "behavior of recipients that are of kind user or that are of kind to",
    "start": "2231533",
    "end": "2238216"
  },
  {
    "text": "do or are of the kind purchase. But yeah, we could consider maybe a",
    "start": "2238216",
    "end": "2244083"
  },
  {
    "text": "different naming instead of type something else. Recipient.",
    "start": "2244083",
    "end": "2249833"
  },
  {
    "text": "I don't have a better wording for that. But definitely open to some better wording for that.",
    "start": "2251133",
    "end": "2256733"
  },
  {
    "text": "I see your point, your saying. Yeah. Yeah, exactly.",
    "start": "2256983",
    "end": "2262350"
  },
  {
    "text": "I see the point you are saying to me that type seems something abstract and then I expect",
    "start": "2262633",
    "end": "2268199"
  },
  {
    "text": "something more specific implemented. Yeah. I see your point.",
    "start": "2268500",
    "end": "2272316"
  },
  {
    "text": "This is more a recipient kind maybe.",
    "start": "2274216",
    "end": "2278183"
  },
  {
    "text": "Yeah. I see your point. I'm struggling to figure out a different",
    "start": "2279949",
    "end": "2286449"
  },
  {
    "text": "kind of naming for that. Basically here I want to say that, yeah,",
    "start": "2286449",
    "end": "2293050"
  },
  {
    "text": "this is a class of users. This is a class of to-dos or whatever.",
    "start": "2293050",
    "end": "2298183"
  },
  {
    "text": "And this is not the specific user or the specific tool I want to interact with. That can be renamed maybe a \"recipient kind\".",
    "start": "2298850",
    "end": "2306750"
  },
  {
    "text": "Not sure if that would work better. Okay. So now we have make entity",
    "start": "2307033",
    "end": "2313149"
  },
  {
    "text": "type and make topic type. Okay. Basically these are our constructor.",
    "start": "2313149",
    "end": "2319033"
  },
  {
    "text": "Given a name and a schema for the",
    "start": "2320933",
    "end": "2326983"
  },
  {
    "text": "protocol constructs an EntityType.",
    "start": "2326983",
    "end": "2333649"
  },
  {
    "text": "So this is basically the constructor you have to call given the name and the schema which",
    "start": "2337833",
    "end": "2343766"
  },
  {
    "text": "is represent the maybe you can move the discussion to initial. Yeah. I keep the conversation.",
    "start": "2343783",
    "end": "2349283"
  },
  {
    "text": "Yeah. I think that I already created an issue right now. Oh no.",
    "start": "2349583",
    "end": "2355033"
  },
  {
    "text": "I can create an issue. I was sure that the created that. Okay. So consider renaming",
    "start": "2355183",
    "end": "2361933"
  },
  {
    "text": "recipient type to something better.",
    "start": "2361933",
    "end": "2367149"
  },
  {
    "text": "I definitely opened an issue. So if someone wants maybe to propose a different naming, I will",
    "start": "2368199",
    "end": "2374883"
  },
  {
    "text": "think about recipient kind maybe. But yeah.",
    "start": "2374883",
    "end": "2379699"
  },
  {
    "text": "Definitely open for new better proposal.",
    "start": "2380199",
    "end": "2384883"
  },
  {
    "text": "Oh, you're welcome. Okay. So topic type.",
    "start": "2385449",
    "end": "2389133"
  },
  {
    "text": "Mostly the same thing. Given the schema.",
    "start": "2390933",
    "end": "2395932"
  },
  {
    "text": "Construct a new topic type. And then you can refer to topic type.",
    "start": "2396250",
    "end": "2402083"
  },
  {
    "text": "A type can live on multiple parts at the same time. Okay. Okay.",
    "start": "2402300",
    "end": "2406932"
  },
  {
    "text": "Get the ShardId where this entity should run. Okay.",
    "start": "2407733",
    "end": "2412166"
  },
  {
    "text": "Okay. Serialization. Okay. This is something that I'm considering dropping.",
    "start": "2413083",
    "end": "2419083"
  },
  {
    "text": "This is basically the trait, the context",
    "start": "2420100",
    "end": "2426050"
  },
  {
    "text": "service that defines how messages are encoded and",
    "start": "2426050",
    "end": "2432949"
  },
  {
    "text": "decoded. But to be honest, I am considering completely dropping this since",
    "start": "2432949",
    "end": "2440100"
  },
  {
    "text": "we are so tight with fs.chema. And we are in a JavaScript environment.",
    "start": "2440100",
    "end": "2444783"
  },
  {
    "text": "I was actually considering just relying on JSON. And that's it.",
    "start": "2445483",
    "end": "2450683"
  },
  {
    "text": "Because I don't see use cases where you",
    "start": "2451483",
    "end": "2457949"
  },
  {
    "text": "want your messages over the wire to be in a different",
    "start": "2457949",
    "end": "2462933"
  },
  {
    "text": "format than JSON. To be honest, in the end, maybe you can",
    "start": "2464616",
    "end": "2470299"
  },
  {
    "text": "just use, I use in the end just a serialized message. And a serialized message",
    "start": "2470300",
    "end": "2475899"
  },
  {
    "text": "basically has a string in it. Yeah.",
    "start": "2475899",
    "end": "2481283"
  },
  {
    "text": "Yeah. Serialized message. It is. Basically already in codes for you with",
    "start": "2481283",
    "end": "2487015"
  },
  {
    "text": "the value in itself. So yeah. I was considering dropping this and just",
    "start": "2487016",
    "end": "2492399"
  },
  {
    "text": "use JSON by default. So maybe I will move this one later, but yeah.",
    "start": "2492399",
    "end": "2497616"
  },
  {
    "text": "It's already at least something documented. Okay. SerializedEnvelope.",
    "start": "2499050",
    "end": "2504649"
  },
  {
    "text": "Okay. So, SerializedEnvelope. Serialized envelope is the envelope that",
    "start": "2505399",
    "end": "2513316"
  },
  {
    "text": "is posted between different service, between different pods when you send a message from one pod",
    "start": "2513316",
    "end": "2522399"
  },
  {
    "text": "to an entity that lives on another pod. What happens is that the message is",
    "start": "2522399",
    "end": "2527800"
  },
  {
    "text": "encoded and you get back a serialized message we have seen before.",
    "start": "2527800",
    "end": "2532333"
  },
  {
    "text": "And then move it then. Or maybe let it open to implementation. JSON is the default",
    "start": "2534800",
    "end": "2540583"
  },
  {
    "text": "and then you can customize it. Yeah. Yeah.",
    "start": "2540583",
    "end": "2544583"
  },
  {
    "text": "This is the kind of implementation we have right now. You can change the serialization.",
    "start": "2545699",
    "end": "2551383"
  },
  {
    "text": "But in the end, the thing is that, yeah, I'd love to see protobuf as well.",
    "start": "2552616",
    "end": "2558983"
  },
  {
    "text": "Yeah. The thing is that over the end, what happens is that everything is put into a serialized",
    "start": "2559233",
    "end": "2566750"
  },
  {
    "text": "envelope. So yeah. We can open. We can left that open for now.",
    "start": "2566750",
    "end": "2571883"
  },
  {
    "text": "Yeah. I could see protobuf being something. Yeah. Also, there are other message pack, for",
    "start": "2572233",
    "end": "2579649"
  },
  {
    "text": "example, message pack. Yeah. If I remember correctly. Or binary JSON, JSONB.",
    "start": "2579649",
    "end": "2585416"
  },
  {
    "text": "Yeah. Maybe I can... Yeah. Message pack. Yeah. For now, I can keep this.",
    "start": "2586116",
    "end": "2592199"
  },
  {
    "text": "Yeah. I just need to rework it a little because I'm not completely satisfied with it, let's",
    "start": "2592449",
    "end": "2600500"
  },
  {
    "text": "say. Because I encoded the value as a serialized message, but",
    "start": "2600500",
    "end": "2606066"
  },
  {
    "text": "then what happens is that the pod's trade, which is what sent the",
    "start": "2606066",
    "end": "2614183"
  },
  {
    "text": "message, used a serializing envelope. And the serializing envelope in itself",
    "start": "2614183",
    "end": "2619566"
  },
  {
    "text": "has the value serialized. Yeah. Yeah.",
    "start": "2619566",
    "end": "2624616"
  },
  {
    "text": "I see, ultimately, I'm considering  dropping JSON for server to server, but I see why you are considering dropping it",
    "start": "2625550",
    "end": "2630816"
  },
  {
    "text": "There are things that, given in order to make cluster work, you",
    "start": "2631199",
    "end": "2636316"
  },
  {
    "text": "have to have basically two different environments that are already JavaScript environments because you need to",
    "start": "2636316",
    "end": "2643466"
  },
  {
    "text": "have cluster running on one side and cluster running on the other side.",
    "start": "2643466",
    "end": "2648100"
  },
  {
    "text": "And being JSON, something so physically spread inside the",
    "start": "2648916",
    "end": "2654149"
  },
  {
    "text": "JavaScript environment and being something that is just how the bots",
    "start": "2654149",
    "end": "2659216"
  },
  {
    "text": "communicate between them, something that is not exposed externally. Yeah.",
    "start": "2659216",
    "end": "2664283"
  },
  {
    "text": "Exactly, Mike. protobuf requires a spec not  sure it can be done dynamically.",
    "start": "2664683",
    "end": "2670715"
  },
  {
    "text": "I started thinking about that when I started writing cluster, but the thing is that later",
    "start": "2671800",
    "end": "2677933"
  },
  {
    "text": "I figured out that in the end, even if you use Protobuf or",
    "start": "2678016",
    "end": "2684000"
  },
  {
    "text": "whatever, if you think about this, if we were writing something like",
    "start": "2684000",
    "end": "2689533"
  },
  {
    "text": "low-level code, we would just have bytes and send bytes from one side to the other.",
    "start": "2689533",
    "end": "2696000"
  },
  {
    "text": "And then the serialization trait is something that decodes the",
    "start": "2697050",
    "end": "2702616"
  },
  {
    "text": "bytes you received from one side and then codes the bytes you have sent from the other side.",
    "start": "2702616",
    "end": "2707682"
  },
  {
    "text": "And so I was thinking that maybe I could consider the JSON as the",
    "start": "2708583",
    "end": "2715383"
  },
  {
    "text": "bytes instead of a string or a byte itself.",
    "start": "2715383",
    "end": "2719699"
  },
  {
    "text": "Yeah. Then you need a schema registry or maybe you would need to put",
    "start": "2720750",
    "end": "2726166"
  },
  {
    "text": "additional annotations over your schema. And yeah, also the additional",
    "start": "2726166",
    "end": "2733766"
  },
  {
    "text": "instrumentation and the code that would be required to serialize to Protobuf and then deserialize.",
    "start": "2733766",
    "end": "2740099"
  },
  {
    "text": "Yeah. I think that in the end, maybe just sending JSON would be faster maybe.",
    "start": "2741166",
    "end": "2747183"
  },
  {
    "text": "I'm not sure, but you need to do some kind of real testing to ensure that.",
    "start": "2747800",
    "end": "2753383"
  },
  {
    "text": "But yeah, in the end, maybe just sending around JSON is it.",
    "start": "2753383",
    "end": "2757965"
  },
  {
    "text": "I spoke about byte arrays as something that if we are not in",
    "start": "2759533",
    "end": "2765000"
  },
  {
    "text": "JavaScript, if we were writing some low-level system that is not",
    "start": "2765000",
    "end": "2770149"
  },
  {
    "text": "cluster, basically bytes would be something that is the most low-level you can go and ensure",
    "start": "2770149",
    "end": "2776866"
  },
  {
    "text": "that you can plug in whatever you want to.",
    "start": "2776866",
    "end": "2782016"
  },
  {
    "text": "And in a single string, you're going to code bytes too via... Yeah, exactly. And that's the point.",
    "start": "2783216",
    "end": "2788699"
  },
  {
    "text": "Right now, I have a string I am sending from two endpoints a string because I think that",
    "start": "2788933",
    "end": "2794833"
  },
  {
    "text": "the string is basically the most low-level primitive you can",
    "start": "2794866",
    "end": "2800199"
  },
  {
    "text": "have that two different endpoints can share and send between.",
    "start": "2800199",
    "end": "2805716"
  },
  {
    "text": "And inside the string, you can do whatever you want. As you pointed out, you can even send",
    "start": "2806350",
    "end": "2811516"
  },
  {
    "text": "encoded bytes into a string. So I was thinking about dropping it and",
    "start": "2811516",
    "end": "2818699"
  },
  {
    "text": "using just schema and using JSON as basic value.",
    "start": "2818699",
    "end": "2823599"
  },
  {
    "text": "Yeah. Also, the thing is that schema",
    "start": "2823850",
    "end": "2828933"
  },
  {
    "text": "effect/schema by default, puts into the encoded side everything as JSON safe.",
    "start": "2828933",
    "end": "2835432"
  },
  {
    "text": "So for example, dates or whatever, they are converted in the encoded side on something that is JSON safe.",
    "start": "2835750",
    "end": "2842066"
  },
  {
    "text": "So even the schema, having a schema is something that is already",
    "start": "2842733",
    "end": "2848750"
  },
  {
    "text": "enough to describe something that needs to be serialized over the wire and then deserialized",
    "start": "2848750",
    "end": "2854766"
  },
  {
    "text": "over on the other side. So yeah, that's why I was planning on maybe dropping the",
    "start": "2854766",
    "end": "2860566"
  },
  {
    "text": "serialization trait and just use a schema in JSON. That's it. So back where we were before.",
    "start": "2860566",
    "end": "2867783"
  },
  {
    "text": "Okay. When we exchange, I was saying that when we exchange messages between different pods",
    "start": "2868133",
    "end": "2873933"
  },
  {
    "text": "we use the pod straight that calls send and get message.",
    "start": "2875149",
    "end": "2880265"
  },
  {
    "text": "We have a destination pod and we have a serialized envelope. The serialized envelope is basically the",
    "start": "2880266",
    "end": "2886350"
  },
  {
    "text": "message plus some information of where the message should go to the destination pod",
    "start": "2886350",
    "end": "2893233"
  },
  {
    "text": "is basically the routing. So basically the serialized envelope has",
    "start": "2893233",
    "end": "2898866"
  },
  {
    "text": "the destination recipient type, the destination recipient entity ID,",
    "start": "2898866",
    "end": "2905066"
  },
  {
    "text": "the message ID itself. And this is an addition ID recently, and",
    "start": "2905633",
    "end": "2911750"
  },
  {
    "text": "also the body of the message itself. And here we have the message as we have",
    "start": "2911750",
    "end": "2917066"
  },
  {
    "text": "just discussed as something that is serialized because here we are basically exchanging",
    "start": "2917066",
    "end": "2923233"
  },
  {
    "text": "things between pods and we cannot know if the remote",
    "start": "2923233",
    "end": "2928899"
  },
  {
    "text": "pods knows how to deserialize. So basically we just send the serialized",
    "start": "2928899",
    "end": "2934649"
  },
  {
    "text": "message and the remote pod, if knows about these specific",
    "start": "2934649",
    "end": "2939983"
  },
  {
    "text": "entity types we are speaking about, we'll use the registrant entity schema to decode",
    "start": "2940033",
    "end": "2945266"
  },
  {
    "text": "the value inside of the body. Okay. And also something that I would like to",
    "start": "2945699",
    "end": "2951750"
  },
  {
    "text": "is that this serialized envelope right now can maybe extend",
    "start": "2951750",
    "end": "2958683"
  },
  {
    "text": "the request trade from effect and maybe",
    "start": "2959800",
    "end": "2965600"
  },
  {
    "text": "can be used as an effect request  because this class has",
    "start": "2965600",
    "end": "2971465"
  },
  {
    "text": "the destination address, which is a RecipientType plus recipient ID and also as the message",
    "start": "2972133",
    "end": "2978449"
  },
  {
    "text": "itself. So I know where to route it. And that's why I was considering maybe",
    "start": "2978449",
    "end": "2984833"
  },
  {
    "text": "make these extends key effort request as well. So user can just yield serialized",
    "start": "2984833",
    "end": "2991983"
  },
  {
    "text": "envelope and that's it. And another thing that I was considering is that instead of calling it serialized",
    "start": "2991983",
    "end": "2998965"
  },
  {
    "text": "envelope, I could make this a generic class called envelope",
    "start": "2998983",
    "end": "3006599"
  },
  {
    "text": "of A and an envelope of A is just the recipient address plus the message of type A.",
    "start": "3006600",
    "end": "3015966"
  },
  {
    "text": "And then I can construct a serialized envelope being envelope of serialized message.",
    "start": "3017633",
    "end": "3022783"
  },
  {
    "text": "That was something that I was considering. Why I was considering this? Because then I can write the RecipientBehaviour",
    "start": "3023233",
    "end": "3030583"
  },
  {
    "text": "instead of just being a behavior of message that receive the message.",
    "start": "3030583",
    "end": "3036566"
  },
  {
    "text": "I could write the recipient behavior to be something that receive an envelope of a message.",
    "start": "3036933",
    "end": "3043866"
  },
  {
    "text": "So then inside the envelope, I could put information like, for",
    "start": "3045649",
    "end": "3051800"
  },
  {
    "text": "example, the trace ID of the opentelemetry for the sender and",
    "start": "3051800",
    "end": "3057500"
  },
  {
    "text": "then the receiver can maybe inject that into the opentelemetry in order to resume the",
    "start": "3057500",
    "end": "3064949"
  },
  {
    "text": "and connect the open telemetry and things like that. That was one point I was thinking about.",
    "start": "3064949",
    "end": "3072500"
  },
  {
    "text": "And right now it's called serialized envelope. But like I was saying before, I would",
    "start": "3073366",
    "end": "3079133"
  },
  {
    "text": "like to call this envelope of A and then have A, B, whatever",
    "start": "3079133",
    "end": "3084800"
  },
  {
    "text": "the kind of message you have. And when ports exchange message between",
    "start": "3084800",
    "end": "3092199"
  },
  {
    "text": "them, the A would be a serialized message. I think that I will go that route.",
    "start": "3092199",
    "end": "3098133"
  },
  {
    "text": "Yeah. The more I speak out loud about it, the more I think that is the correct way to do.",
    "start": "3098416",
    "end": "3104515"
  },
  {
    "text": "Yeah. Serialized envelope is too specific kind of envelope. And there are so many possibilities for",
    "start": "3104800",
    "end": "3110932"
  },
  {
    "text": "so many information I can put in the envelope. And there are information that are mostly",
    "start": "3110933",
    "end": "3117799"
  },
  {
    "text": "statistic ones, like, for example, the creation time of the envelope and is",
    "start": "3117800",
    "end": "3125366"
  },
  {
    "text": "something that the sender can inject. And it's something that the user can",
    "start": "3125366",
    "end": "3134016"
  },
  {
    "text": "decide if wants to rely on that or not.",
    "start": "3134016",
    "end": "3138699"
  },
  {
    "text": "Because that would be exactly the time that the message has been created from the sender.",
    "start": "3139033",
    "end": "3144466"
  },
  {
    "text": "So it's time the sender retries to send the message, the creation of the envelope would change.",
    "start": "3144899",
    "end": "3151116"
  },
  {
    "text": "Yeah. Okay. So back to documenting things. Okay. Serialized envelope.",
    "start": "3151466",
    "end": "3155766"
  },
  {
    "text": "A SerializedEnvelope.",
    "start": "3157183",
    "end": "3160466"
  },
  {
    "text": "A SerializedEnvelope is the message",
    "start": "3164800",
    "end": "3167116"
  },
  {
    "text": "that goes over the wire between pods.",
    "start": "3170050",
    "end": "3175166"
  },
  {
    "text": "Inside the envelope.",
    "start": "3177866",
    "end": "3179483"
  },
  {
    "text": "you have the encoded message.",
    "start": "3183233",
    "end": "3187783"
  },
  {
    "text": "Plus some informations on where it should be routed to.",
    "start": "3192000",
    "end": "3202599"
  },
  {
    "text": "And also the other thing is that if I have envelope, the thing I",
    "start": "3204350",
    "end": "3209449"
  },
  {
    "text": "would have is more recipient behavior utility function",
    "start": "3209449",
    "end": "3216099"
  },
  {
    "text": "that enhance a behavior. Like, for example, I already have at least once that relies on",
    "start": "3216100",
    "end": "3224000"
  },
  {
    "text": "having recipient behavior or serialized envelope. Yeah. If I make this more generic here, instead",
    "start": "3224000",
    "end": "3232599"
  },
  {
    "text": "of requiring a recipient type, a sharding ID, an entity ID, et cetera, I could just",
    "start": "3232600",
    "end": "3238033"
  },
  {
    "text": "take as a parameter an envelope and that's it in the envelope.",
    "start": "3238033",
    "end": "3243033"
  },
  {
    "text": "I already have everything. Okay. So back constructing a serialized envelope.",
    "start": "3243266",
    "end": "3248383"
  },
  {
    "text": "Okay. IsSerializedEnvelope. Ensures",
    "start": "3248883",
    "end": "3254116"
  },
  {
    "text": "Just that the given value is a serialized envelope.",
    "start": "3255466",
    "end": "3263483"
  },
  {
    "text": "Okay. Serialized message. Represents a message",
    "start": "3265833",
    "end": "3273583"
  },
  {
    "text": "that has been serialized.",
    "start": "3273583",
    "end": "3279100"
  },
  {
    "text": "Okay. ShardID. If I remember, I already did that. Okay. Let's try to write that again and see if",
    "start": "3279449",
    "end": "3285382"
  },
  {
    "text": "something is missing. Okay. A shard is a logical grouping of multiple entities.",
    "start": "3285383",
    "end": "3290466"
  },
  {
    "text": "There could be thousands of entities in your system. So instead of managing every single entity ID, the shard",
    "start": "3290866",
    "end": "3296783"
  },
  {
    "text": "manager group them by shard ID. And when they are assigned or moved around, we always move all",
    "start": "3296783",
    "end": "3302883"
  },
  {
    "text": "the entities with the same ShardID. Okay. And this is tied to the concept that",
    "start": "3302883",
    "end": "3308182"
  },
  {
    "text": "tracking each single instance of each entity type you",
    "start": "3308183",
    "end": "3313466"
  },
  {
    "text": "have in your system would be too much. And so what we do instead is",
    "start": "3313483",
    "end": "3320465"
  },
  {
    "text": "create group of entities IDs. And those grouping are called shard IDs.",
    "start": "3320466",
    "end": "3325816"
  },
  {
    "text": "And effectually, as we've seen before, they are effectfully implemented by just",
    "start": "3326883",
    "end": "3332633"
  },
  {
    "text": "taking the ash of the entity ID and then a module or the number of",
    "start": "3335250",
    "end": "3340666"
  },
  {
    "text": "shard ID you configured you want to have in your system.",
    "start": "3340666",
    "end": "3344183"
  },
  {
    "text": "And then whenever we do assignment, we speak about shard IDs",
    "start": "3345966",
    "end": "3352215"
  },
  {
    "text": "instead of specific entity IDs. Okay. Considered a shard ID",
    "start": "3352216",
    "end": "3357250"
  },
  {
    "text": "from numerical value. The shard ID is going to build up by making the ash of the entity ID and then the module",
    "start": "3357250",
    "end": "3362633"
  },
  {
    "text": "of the max amount of shards configured in ManagerConfig. Yeah. This is exactly how it works.",
    "start": "3362633",
    "end": "3367616"
  },
  {
    "text": "Okay. Sharding. This is a tough one. But if I remember correctly, this should",
    "start": "3368766",
    "end": "3375283"
  },
  {
    "text": "be already almost documented. Okay.",
    "start": "3375283",
    "end": "3379783"
  },
  {
    "text": "Target live. Okay. Notify the shard manager that shards have been assigned to this pod.",
    "start": "3381433",
    "end": "3386866"
  },
  {
    "text": "Register. And unregister does the opposite thing. Notify the shard manager that shards must",
    "start": "3387233",
    "end": "3393316"
  },
  {
    "text": "be unassigned from this pod. Okay. And then we have a register scoped.",
    "start": "3393316",
    "end": "3400250"
  },
  {
    "text": "Same as the register, but we automatically call unregister when the scope is terminated.",
    "start": "3400250",
    "end": "3405633"
  },
  {
    "text": "Okay. And then we start the specific cluster method. So registerSingleton.",
    "start": "3407899",
    "end": "3413783"
  },
  {
    "text": "Start a computation that is guaranteed to run on a single pod. Each pod should call registerSingleton,",
    "start": "3414183",
    "end": "3421533"
  },
  {
    "text": "but only a single pod will actually run it at a given time. Okay. So this is tied to the concept that right",
    "start": "3421533",
    "end": "3428516"
  },
  {
    "text": "now, as a cluster, requires that all pods knows about",
    "start": "3428516",
    "end": "3434250"
  },
  {
    "text": "all the entities you can have right now unbalanced pods that knows",
    "start": "3434733",
    "end": "3441265"
  },
  {
    "text": "only about specific kind of entities and not about others.",
    "start": "3441266",
    "end": "3445550"
  },
  {
    "text": "That could be implemented ideally in the future. But at the moment, I don't",
    "start": "3446649",
    "end": "3452083"
  },
  {
    "text": "see why that should be the case. And at the moment, I won't focus on",
    "start": "3452083",
    "end": "3459333"
  },
  {
    "text": "everything being the same and basically developing your system thinking about there is only one",
    "start": "3459333",
    "end": "3465433"
  },
  {
    "text": "pod and eventually that could be thousand because you can scale out the number of pods you have.",
    "start": "3465433",
    "end": "3470633"
  },
  {
    "text": "Okay. RegisterEntity. Redist a new entity type allowing pods to send messages to entities of this type.",
    "start": "3472666",
    "end": "3479816"
  },
  {
    "text": "If entity goes to idle, Okay. Redistors. This is third topic. A register is a new topic type allowing pods to block messages to subscribers.",
    "start": "3480366",
    "end": "3487633"
  },
  {
    "text": "Messenger. Get an object that allows sending messages to a given entity type. You can provide a custom send email to a",
    "start": "3488816",
    "end": "3495916"
  },
  {
    "text": "one goal, but it is defined. Okay. So when you have entity type that we have",
    "start": "3495916",
    "end": "3502300"
  },
  {
    "text": "defined before, you can then request a Messenger object",
    "start": "3502300",
    "end": "3506716"
  },
  {
    "text": "using Messenger. And using that Messenger object, you can send messages, either send",
    "start": "3507699",
    "end": "3513866"
  },
  {
    "text": "or send discovered messages to entities. So you need to basically to messages to an entity.",
    "start": "3513866",
    "end": "3519766"
  },
  {
    "text": "You need to have the recipient type as we have seen before.",
    "start": "3519766",
    "end": "3524000"
  },
  {
    "text": "Okay. Because you need to know to which kind of entity you want to speak with.",
    "start": "3525449",
    "end": "3530283"
  },
  {
    "text": "And then given that you receive back a Messenger, a Messenger is able to communicate with",
    "start": "3532166",
    "end": "3537466"
  },
  {
    "text": " whatever entity you want of that specific kind.",
    "start": "3537933",
    "end": "3542166"
  },
  {
    "text": "And then inside the Messenger, you can decide if you want to send a message",
    "start": "3542983",
    "end": "3548833"
  },
  {
    "text": "and don't care about the result. Just return when you know that the",
    "start": "3548899",
    "end": "3555016"
  },
  {
    "text": "receiver has received the message and is okay with that. Or you can send the message",
    "start": "3555016",
    "end": "3560433"
  },
  {
    "text": "and wait for the response. Okay. The same goes for the broadcaster.",
    "start": "3560433",
    "end": "3565250"
  },
  {
    "text": "Okay. The broadcaster gets an object that allows broadcasting messages to a given topic type. You can provide a custom send time out to",
    "start": "3566283",
    "end": "3573333"
  },
  {
    "text": "override the one global name you find. Yeah. This send time out is in there because obviously you can send",
    "start": "3573333",
    "end": "3579833"
  },
  {
    "text": "message from one pod to another, to another entity that lives on another pod.",
    "start": "3579833",
    "end": "3584349"
  },
  {
    "text": "And that means that network may be unreliable. So the sending will be",
    "start": "3584966",
    "end": "3592066"
  },
  {
    "text": "retried a lot of times. And eventually there is a time, a default",
    "start": "3592066",
    "end": "3597966"
  },
  {
    "text": "time out after, okay, I didn't, I wasn't able to send this message to that",
    "start": "3597966",
    "end": "3603750"
  },
  {
    "text": "specific, to that specific entity. And then it goes on time out.",
    "start": "3603750",
    "end": "3608866"
  },
  {
    "text": "And to be honest, we could consider dropping this one because we already have",
    "start": "3609850",
    "end": "3615233"
  },
  {
    "text": "um, effect combinators for timeouts. So we can consider dropping, uh, the timeouts",
    "start": "3616050",
    "end": "3623699"
  },
  {
    "text": " and just thinking about sending messages will be retried forever.",
    "start": "3623699",
    "end": "3629616"
  },
  {
    "text": "But I am concerned about people don't thinking about it",
    "start": "3631183",
    "end": "3636383"
  },
  {
    "text": "leading into a situation where the application is basically stuck because messages are being",
    "start": "3636383",
    "end": "3643666"
  },
  {
    "text": "trying to be sent forever. So yeah, I'm a little unsure about that.",
    "start": "3643666",
    "end": "3649866"
  },
  {
    "text": "I add that into my list of things to consider.",
    "start": "3651433",
    "end": "3655966"
  },
  {
    "text": "Why not? Right? Yeah. The thing is that, I am right now the send time out is there to,",
    "start": "3656866",
    "end": "3665149"
  },
  {
    "text": "basically, oh, you mean the concern about the message, the message videos, right?",
    "start": "3666350",
    "end": "3672382"
  },
  {
    "text": "Yeah, exactly. You're right. You're right. Where is the best point of write about it?",
    "start": "3672383",
    "end": "3678449"
  },
  {
    "text": "Yeah, I can write it. Yeah. And the message because people will indeed use the messenger so I",
    "start": "3678866",
    "end": "3684083"
  },
  {
    "text": "can write about this in here. Right. because I can write that point in the",
    "start": "3684083",
    "end": "3689366"
  },
  {
    "text": "documentation where you define the default setting for the time out. But I think that if I write that over",
    "start": "3689366",
    "end": "3696883"
  },
  {
    "text": "into the sharding config side I think that people will",
    "start": "3696883",
    "end": "3702215"
  },
  {
    "text": "use just the default sharding config without caring about the specific settings. So I think that they won't",
    "start": "3702683",
    "end": "3712449"
  },
  {
    "text": "care about this one. Okay. So maybe I can write that into the messenger.",
    "start": "3712449",
    "end": "3717533"
  },
  {
    "text": "I was thinking because this is one point when ideally people want to send message.",
    "start": "3717783",
    "end": "3723133"
  },
  {
    "text": "Yeah. Send the message and wait for the response. Okay. Remember that due to",
    "start": "3723399",
    "end": "3731449"
  },
  {
    "text": "network being unreliable.",
    "start": "3731449",
    "end": "3734682"
  },
  {
    "text": "The sender may attempt to send multiple",
    "start": "3738816",
    "end": "3745949"
  },
  {
    "text": "times the same message.",
    "start": "3745949",
    "end": "3750383"
  },
  {
    "text": "Okay.",
    "start": "3756233",
    "end": "3756649"
  },
  {
    "text": "Yeah. This is the behavior I'm considering. Yeah, exactly.",
    "start": "3764483",
    "end": "3768116"
  },
  {
    "text": "Right now I will write the documentation on the opposite side saying that remember the",
    "start": "3770916",
    "end": "3776216"
  },
  {
    "text": "sender may attempt to send the multiple, uh, the messenger.",
    "start": "3776216",
    "end": "3780000"
  },
  {
    "text": "May attempt to send the multiple times the same message. Okay. The sendTimeout is exactly there to",
    "start": "3781550",
    "end": "3795233"
  },
  {
    "text": "prevent indefinite sending of message",
    "start": "3795233",
    "end": "3807783"
  },
  {
    "text": "But yeah, I will definitely take your description and put it",
    "start": "3808183",
    "end": "3814083"
  },
  {
    "text": "inside of the issue I was writing down. New issue.",
    "start": "3814083",
    "end": "3819250"
  },
  {
    "text": "Open blank issue. Okay.",
    "start": "3820699",
    "end": "3824350"
  },
  {
    "text": "Consider defaulting send",
    "start": "3826050",
    "end": "3832583"
  },
  {
    "text": "message to indefinite retry.",
    "start": "3832583",
    "end": "3837616"
  },
  {
    "text": "Okay. And I'll just rewrite your, you can use",
    "start": "3840250",
    "end": "3848100"
  },
  {
    "text": "perfect turnout.",
    "start": "3849616",
    "end": "3850916"
  },
  {
    "text": "I also like that more because that will get me read out of one",
    "start": "3861866",
    "end": "3866899"
  },
  {
    "text": "kind of exception I have right now, which is a send the timeout error exception and just",
    "start": "3866899",
    "end": "3873133"
  },
  {
    "text": "let the user think about it. If the user doesn't care about timeout exception of sending",
    "start": "3873133",
    "end": "3879283"
  },
  {
    "text": "because, you know, maybe the user runs the cluster on a single process.",
    "start": "3879283",
    "end": "3884800"
  },
  {
    "text": "So there is ideally no send timeout or the user knows that",
    "start": "3885216",
    "end": "3890833"
  },
  {
    "text": "the network is so good. That is maybe a local network that is so good that is difficult.",
    "start": "3890833",
    "end": "3896550"
  },
  {
    "text": "That is unreliable. Yeah. I definitely like that solution a lot more.",
    "start": "3896550",
    "end": "3902000"
  },
  {
    "text": "Yeah. You can definitely the default behavior is to send the message.",
    "start": "3902250",
    "end": "3910016"
  },
  {
    "text": "Indefinitely. I'll also copy and paste this piece of",
    "start": "3912133",
    "end": "3921000"
  },
  {
    "text": "documentation also on the broadcaster because I think people will use both of them and they are",
    "start": "3921000",
    "end": "3929633"
  },
  {
    "text": "basically doing the same thing. So, yeah. But yeah, the more I think about it, the",
    "start": "3929633",
    "end": "3934649"
  },
  {
    "text": "more I think that I will drop the send timeout exception and just be the",
    "start": "3934649",
    "end": "3940250"
  },
  {
    "text": "behavior of retrying forever. Maybe I can write some log error or",
    "start": "3940250",
    "end": "3945699"
  },
  {
    "text": "something when I see that I have retried the same message for 20 times or whatever setting you put",
    "start": "3945699",
    "end": "3951866"
  },
  {
    "text": "into your sharding config and log to error, or log something when it",
    "start": "3951866",
    "end": "3958066"
  },
  {
    "text": "does or die once that happens. Yeah, but I think that retrying forever",
    "start": "3958066",
    "end": "3963633"
  },
  {
    "text": "is a nicer behavior. Okay. So, get pods. Get the list of pod",
    "start": "3963633",
    "end": "3969483"
  },
  {
    "text": "scurrying to the shell manager. Okay. And then we have",
    "start": "3969483",
    "end": "3976033"
  },
  {
    "text": "sendMessageToLocalEntityManagerWithoutRetries. Yeah.",
    "start": "3976033",
    "end": "3980616"
  },
  {
    "text": "This is something that is used basically by the services that",
    "start": "3982066",
    "end": "3988233"
  },
  {
    "text": "implements communication between different pods and this is used inside of them to send the",
    "start": "3988233",
    "end": "3994866"
  },
  {
    "text": "message to the local entity manager pod without having retries implemented because retries are",
    "start": "3994866",
    "end": "4001583"
  },
  {
    "text": "implemented on the caller side. So, send a message to local entity manager",
    "start": "4001583",
    "end": "4007633"
  },
  {
    "text": "without performing retries.",
    "start": "4007633",
    "end": "4013816"
  },
  {
    "text": "Those are up to the caller.",
    "start": "4015733",
    "end": "4019033"
  },
  {
    "text": "Okay. Get the list of the shell that is assigned to the current pod.",
    "start": "4024833",
    "end": "4031183"
  },
  {
    "text": "Yeah. That's perfect. Okay.",
    "start": "4031483",
    "end": "4036015"
  },
  {
    "text": "Sharding config. Sharding configuration number of pod or shards, host name, IP,",
    "start": "4037433",
    "end": "4042800"
  },
  {
    "text": "the sort of connect pod, pod user for pod. This, I think it is. For a shard manager is",
    "start": "4042800",
    "end": "4048966"
  },
  {
    "text": "not GraphQL, it's REST API. Shard manager API.",
    "start": "4048966",
    "end": "4053799"
  },
  {
    "text": "Server version, time of activity, time we get into the termination",
    "start": "4055483",
    "end": "4060516"
  },
  {
    "text": "before interrupting it. I'm just trying to make it so failure getting a shard.",
    "start": "4060516",
    "end": "4065233"
  },
  {
    "text": "Turn out to report on the pod to the shard manager. Okay. I think that everything",
    "start": "4065783",
    "end": "4072100"
  },
  {
    "text": "in here is documented. Okay. Defaults.",
    "start": "4072100",
    "end": "4075016"
  },
  {
    "text": "Provides. The default values",
    "start": "4078266",
    "end": "4084800"
  },
  {
    "text": "for the ShardingConfig.",
    "start": "4084800",
    "end": "4087616"
  },
  {
    "text": "And with defaults is basically provides the sharding config.",
    "start": "4091516",
    "end": "4100500"
  },
  {
    "text": "This is the same but provides the sharding config values that are omitted",
    "start": "4103399",
    "end": "4113599"
  },
  {
    "text": "will be read from the defaults.",
    "start": "4114683",
    "end": "4119133"
  },
  {
    "text": "So whatever you don't provide will be used the default instead.",
    "start": "4121333",
    "end": "4124733"
  },
  {
    "text": "And this is just the entire defaults. Okay.",
    "start": "4127350",
    "end": "4130449"
  },
  {
    "text": "Maybe I can drop this and maybe this make it an optional parameter.",
    "start": "4132583",
    "end": "4139199"
  },
  {
    "text": "Yeah. Okay. And then we have fromConfig reads the",
    "start": "4139683",
    "end": "4144733"
  },
  {
    "text": "sharding config from the effect config provider.",
    "start": "4144733",
    "end": "4153948"
  },
  {
    "text": "So you can use env text files, whatever effect config provides you.",
    "start": "4156666",
    "end": "4162649"
  },
  {
    "text": "Okay. Sharding events. So these are the events that are needed",
    "start": "4164083",
    "end": "4171882"
  },
  {
    "text": "whenever something happens over the sharding manager.",
    "start": "4171883",
    "end": "4178149"
  },
  {
    "text": "Maybe I can write in there. Okay. These are the events are",
    "start": "4181483",
    "end": "4189066"
  },
  {
    "text": "the events that may occur",
    "start": "4189066",
    "end": "4194183"
  },
  {
    "text": "over the shardManager during its lifetime.",
    "start": "4195083",
    "end": "4204716"
  },
  {
    "text": "So basically we have sharding assigned, sharding unassigned, we check the head fault,",
    "start": "4210149",
    "end": "4215883"
  },
  {
    "text": "we have new pods registered or pod that has been registered or whatever.",
    "start": "4216750",
    "end": "4221483"
  },
  {
    "text": "And now we have to document the constructors.",
    "start": "4227683",
    "end": "4232433"
  },
  {
    "text": "Constructs the events that occurs when",
    "start": "4233383",
    "end": "4239849"
  },
  {
    "text": "new shards are assigned to a pod.",
    "start": "4239850",
    "end": "4245483"
  },
  {
    "text": "Okay. So let's see. Constructs the event that occurs.",
    "start": "4248133",
    "end": "4256750"
  },
  {
    "text": "Okay. I was losing time. It's time for me to go. Thanks everyone that joined the stream",
    "start": "4258066",
    "end": "4263515"
  },
  {
    "text": "and hope you have some fun. And thank you all for",
    "start": "4263516",
    "end": "4268615"
  },
  {
    "text": "all the feedback you gave. And thank you very much for being here in",
    "start": "4268616",
    "end": "4275850"
  },
  {
    "text": "this short streaming. And I think that I will try to do more of those in next days.",
    "start": "4275850",
    "end": "4282566"
  },
  {
    "text": "Thank you again, everyone. See you next time. And also, Effect.orDie every day!",
    "start": "4283083",
    "end": "4289916"
  }
]