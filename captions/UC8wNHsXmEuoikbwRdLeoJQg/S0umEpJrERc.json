[
  {
    "text": "all right great hello everyone welcome back to",
    "start": "17600",
    "end": "22800"
  },
  {
    "text": "another episode of effect time uh I've lost count lost track of the account at",
    "start": "22800",
    "end": "28800"
  },
  {
    "text": "this point but we've already done a few and uh we're we're just getting started",
    "start": "28800",
    "end": "34320"
  },
  {
    "text": "on all of the topics that we still want to tackle and I think today we're talking about a fairly fundamental topic",
    "start": "34320",
    "end": "41960"
  },
  {
    "text": "of of effect uh one of the the core Primitives that that most of the effects",
    "start": "41960",
    "end": "47399"
  },
  {
    "text": "ecosystem is built upon that I actually shamefully know very very little about",
    "start": "47399",
    "end": "53800"
  },
  {
    "text": "um up until hopefully today where hopefully learn a lot about this so we're going to talk about the concept of",
    "start": "53800",
    "end": "60760"
  },
  {
    "text": "fibers um fibers is also a concept that uh the effect twin project zo I think",
    "start": "60760",
    "end": "68640"
  },
  {
    "text": "heavily heavily uses uh and where this was inspired by and modeled after um but",
    "start": "68640",
    "end": "74280"
  },
  {
    "text": "I still don't know what a fiber really is all I know is roughly the kind of",
    "start": "74280",
    "end": "80560"
  },
  {
    "text": "problem it's trying to to solve and I think that problem is also somewhat",
    "start": "80560",
    "end": "86520"
  },
  {
    "text": "familiar to to most other JavaScript and and typescript developers so I briefly",
    "start": "86520",
    "end": "92280"
  },
  {
    "text": "want to motivate that um and also just want to uh say hello to our special",
    "start": "92280",
    "end": "99920"
  },
  {
    "text": "guests today U we welcome back Max uh who who we've had on a few episodes ago",
    "start": "99920",
    "end": "106479"
  },
  {
    "text": "where we've talked about effect CLI and we also have uh have Harry here",
    "start": "106479",
    "end": "112560"
  },
  {
    "text": "uh and the four of us um together with Mike Max and Harry we're also working on another little project that we might",
    "start": "112560",
    "end": "119200"
  },
  {
    "text": "talk more about soon where we of course use effect and throughout our",
    "start": "119200",
    "end": "124280"
  },
  {
    "text": "collaboration there we stumbled over the question okay what what the fudge are",
    "start": "124280",
    "end": "130920"
  },
  {
    "text": "fibers and so Harry I think really motivated that question so yeah before",
    "start": "130920",
    "end": "137280"
  },
  {
    "text": "answering that question uh let's briefly dive into the the broad problem space um",
    "start": "137280",
    "end": "143720"
  },
  {
    "text": "that fibers are about so let me briefly share my screen and afterwards I'll hand",
    "start": "143720",
    "end": "149120"
  },
  {
    "text": "over to to Mike again so um what depending on how long you're around in",
    "start": "149120",
    "end": "156519"
  },
  {
    "text": "the JavaScript ecosystem uh then you might be uh somewhat painfully familiar with uh",
    "start": "156519",
    "end": "164239"
  },
  {
    "text": "callbacks callbacks everywhere um and callbacks is basically was the at back",
    "start": "164239",
    "end": "170480"
  },
  {
    "text": "then the only mean to asynchronous uh programming in in JavaScript that that",
    "start": "170480",
    "end": "176959"
  },
  {
    "text": "we had available and this looks somewhat uh somewhat tame and innocent but these",
    "start": "176959",
    "end": "183840"
  },
  {
    "text": "sort of callbacks you get this was like your only way how you deal with anything",
    "start": "183840",
    "end": "188920"
  },
  {
    "text": "that runs asynchronously so you wait for it to be called back and then you Nest it and then you have like a very deep",
    "start": "188920",
    "end": "195879"
  },
  {
    "text": "deeply nested kind of thing and that later uh was known as the Callback hell",
    "start": "195879",
    "end": "202080"
  },
  {
    "text": "um so I remember this very very uh vividly and it was uh yeah was a was a",
    "start": "202080",
    "end": "209840"
  },
  {
    "text": "distinct time um and uh then as an evolution of that we got um asyn await",
    "start": "209840",
    "end": "217799"
  },
  {
    "text": "based on promises or first we got promises really and then on top of that syntactic sugar with ASN aade where um",
    "start": "217799",
    "end": "226439"
  },
  {
    "text": "we could use um we could just wait for something to be returned and um as long",
    "start": "226439",
    "end": "233120"
  },
  {
    "text": "as we're in Asun context can simply say await and we have a simplified way of",
    "start": "233120",
    "end": "239200"
  },
  {
    "text": "like modeling our asynchronous code here and we can even do error handling using",
    "start": "239200",
    "end": "244239"
  },
  {
    "text": "TR catch which we know has a couple of limitations as well um but that's",
    "start": "244239",
    "end": "250040"
  },
  {
    "text": "roughly the evolution that we had going from callbacks to um promises and asingle weight however there are also",
    "start": "250040",
    "end": "258160"
  },
  {
    "text": "some limitations around this um and where it's rather rigid than than",
    "start": "258160",
    "end": "264160"
  },
  {
    "text": "flexible and some um to that doesn't quite allow you to model your applications in some of the the ways",
    "start": "264160",
    "end": "271840"
  },
  {
    "text": "that that you need to and this is the kind of problem space that fibers try to",
    "start": "271840",
    "end": "277560"
  },
  {
    "text": "address so uh at that point I might want to hand over to to Michael or maybe Mike",
    "start": "277560",
    "end": "284240"
  },
  {
    "text": "you can elaborate a little bit on like what are some of the limitations that we have available right now with as o",
    "start": "284240",
    "end": "290919"
  },
  {
    "text": "promises that fibers try to provide a better uh better primitive and",
    "start": "290919",
    "end": "296360"
  },
  {
    "text": "abstraction over and then we can see a little bit all they how they function how they enable other uh Primitives on",
    "start": "296360",
    "end": "303759"
  },
  {
    "text": "top of it and once we dug into this um then we can and we once we have a bit of",
    "start": "303759",
    "end": "309600"
  },
  {
    "text": "an understanding what the current implementation of fibers look like then",
    "start": "309600",
    "end": "314880"
  },
  {
    "text": "uh we can handle over to Max who happens to work on the newest generation of",
    "start": "314880",
    "end": "320280"
  },
  {
    "text": "fiber implementations that I think is also inspired by the newest generation of fiber implementations in zo with",
    "start": "320280",
    "end": "327479"
  },
  {
    "text": "CO2 um but first first things first let's get a good understanding of what",
    "start": "327479",
    "end": "333160"
  },
  {
    "text": "the first generation of fibers look like great so let me start on my screen",
    "start": "333160",
    "end": "343199"
  },
  {
    "text": "share um see there you",
    "start": "343199",
    "end": "349440"
  },
  {
    "text": "go we start with a very nice console log asking what what is a",
    "start": "349440",
    "end": "357240"
  },
  {
    "text": "fiber so as as you correct L explained one one of the the key problems that",
    "start": "357240",
    "end": "364039"
  },
  {
    "text": "fibers try to solve is the problem of concurrency and the problem of",
    "start": "364039",
    "end": "370319"
  },
  {
    "text": "asynchronous operations the concept of fibus they they start as lightweight threads in in",
    "start": "370319",
    "end": "378039"
  },
  {
    "text": "multi threaded languages multi-threaded ecosystems threads are very",
    "start": "378039",
    "end": "385240"
  },
  {
    "text": "expensive and up until the point where",
    "start": "385240",
    "end": "390440"
  },
  {
    "text": "fibers was were really develop around the ecosystems the only way you could do",
    "start": "390440",
    "end": "397319"
  },
  {
    "text": "concurrency and parallelisms where using threads using threads are very expensive",
    "start": "397319",
    "end": "404160"
  },
  {
    "text": "so spawning the new thread is an expensive operation in terms of memory allocation in terms of CPU resources and",
    "start": "404160",
    "end": "411680"
  },
  {
    "text": "anything else and really on a on a custom on even a very good Hardware it's",
    "start": "411680",
    "end": "417440"
  },
  {
    "text": "very rare that you can spawn more than thousand 2,000 threats right and you're talking right now about like something",
    "start": "417440",
    "end": "424319"
  },
  {
    "text": "like Java Scala or precisely any type of language at this point yeah they they",
    "start": "424319",
    "end": "431400"
  },
  {
    "text": "are way way bigger than than JavaScript itself so the the problem that fibers",
    "start": "431400",
    "end": "437560"
  },
  {
    "text": "are solving is the problem of structured concurrency so generally a number of",
    "start": "437560",
    "end": "443599"
  },
  {
    "text": "operations that may run in parallel when when possible given the language and the",
    "start": "443599",
    "end": "449919"
  },
  {
    "text": "hardware or that are scheduled on the same thread but the the idea of the fiber is",
    "start": "449919",
    "end": "459440"
  },
  {
    "text": "literally very similar to the idea of a threat now in in",
    "start": "459440",
    "end": "465879"
  },
  {
    "text": "JavaScript we are used to the ainka weight pattern in dealing with",
    "start": "465879",
    "end": "471879"
  },
  {
    "text": "concurrency but let's make a few examples let's let's take something very",
    "start": "471879",
    "end": "479039"
  },
  {
    "text": "very simple that's as for example a promise. got it so that that basically",
    "start": "479039",
    "end": "485400"
  },
  {
    "text": "means for people viewing and who might just be experienced with JavaScript there's like this sort of like a light",
    "start": "485400",
    "end": "491879"
  },
  {
    "text": "version of a more General conversation about fiber so if you're we could have the same conversation about fibers in",
    "start": "491879",
    "end": "498360"
  },
  {
    "text": "Scala for example where it's truly about like concurrent like multithreaded",
    "start": "498360",
    "end": "504080"
  },
  {
    "text": "computation here we're just dealing with like normal JavaScript runs in one one",
    "start": "504080",
    "end": "509159"
  },
  {
    "text": "Str um but we still get a lot of benefits from the abstraction that a fiber is in",
    "start": "509159",
    "end": "515518"
  },
  {
    "text": "the context of single Strat JavaScript I would say that more generally anytime",
    "start": "515519",
    "end": "521399"
  },
  {
    "text": "you have asynchronous operations you can still have concurrent operations in the same thread Y and it's what we are",
    "start": "521399",
    "end": "528920"
  },
  {
    "text": "trying for example to show here you can do a promise. all which will wait for",
    "start": "528920",
    "end": "536839"
  },
  {
    "text": "all the promises to complete let's say I do a fetch",
    "start": "536839",
    "end": "542680"
  },
  {
    "text": "of api1 I do a Fetch and like promise at",
    "start": "542680",
    "end": "547959"
  },
  {
    "text": "all is something uh I think many of us use very heavily before diving into",
    "start": "547959",
    "end": "554440"
  },
  {
    "text": "effect but like that's one mean of like doing something somewhat in in parallel waiting for it and then doing the next",
    "start": "554440",
    "end": "561560"
  },
  {
    "text": "thing but there's also like I think there's like now promise dot uh like I",
    "start": "561560",
    "end": "567720"
  },
  {
    "text": "think there's like alternative to all [Music] s yeah there's a few few of these and",
    "start": "567720",
    "end": "575600"
  },
  {
    "text": "they try to solve like particular use cases but there's still many use cases kind of like uh left un uh like to uh",
    "start": "575600",
    "end": "585640"
  },
  {
    "text": "not so great result and I think this is this is where we have uh many more many",
    "start": "585640",
    "end": "591680"
  },
  {
    "text": "more options with effect and here with with for example",
    "start": "591680",
    "end": "597200"
  },
  {
    "text": "promise the all the idea is I want to run all of those operations in parallel",
    "start": "597200",
    "end": "603360"
  },
  {
    "text": "I want to wait for the result and in case any of those fail I want to",
    "start": "603360",
    "end": "609120"
  },
  {
    "text": "complete the operation with a failure so I only care about the result if everything is",
    "start": "609120",
    "end": "614880"
  },
  {
    "text": "completed now here let's let's make the hypothesis that",
    "start": "614880",
    "end": "622680"
  },
  {
    "text": "those three request starts in parallel but then the second one fails straight away after for example 20",
    "start": "622680",
    "end": "631200"
  },
  {
    "text": "milliseconds do I really want to wait for the rest to be completed before",
    "start": "631200",
    "end": "636560"
  },
  {
    "text": "returning probably not in fact promise.all gives you the",
    "start": "636560",
    "end": "642320"
  },
  {
    "text": "results straight away at the the time kind of first failure but the other two are never",
    "start": "642320",
    "end": "650000"
  },
  {
    "text": "getting interrupted the requests are never getting cancelled so you're still doing stuff",
    "start": "650000",
    "end": "657200"
  },
  {
    "text": "behind the scenes let's think about for example if if this",
    "start": "657200",
    "end": "662560"
  },
  {
    "text": "instead of being a simple fetch call there were each operations that take",
    "start": "662560",
    "end": "667920"
  },
  {
    "text": "roughly 10 minutes to execute and they perform a lot of work you will",
    "start": "667920",
    "end": "673519"
  },
  {
    "text": "be doing a lot of unnecessary work and",
    "start": "673519",
    "end": "678600"
  },
  {
    "text": "this work is never properly cleaned up with",
    "start": "678600",
    "end": "684200"
  },
  {
    "text": "fibers comes the idea of suspending computation",
    "start": "684200",
    "end": "690040"
  },
  {
    "text": "so computations that can be halted at any point in time and not only they can",
    "start": "690040",
    "end": "696200"
  },
  {
    "text": "be halted they can even be interrupted and when a fiber is interrupted a",
    "start": "696200",
    "end": "703120"
  },
  {
    "text": "cleanup procedure runs so effectively I will be able to specify an",
    "start": "703120",
    "end": "709800"
  },
  {
    "text": "equivalent of something like that where at the first failure not only I I I",
    "start": "709800",
    "end": "715200"
  },
  {
    "text": "return straight away but I also go on and cancel the remaining operations and",
    "start": "715200",
    "end": "720839"
  },
  {
    "text": "and just to to be clear on the distinction between halted and",
    "start": "720839",
    "end": "725959"
  },
  {
    "text": "interrupted um does halted mean like whatever you're trying to do if that",
    "start": "725959",
    "end": "731200"
  },
  {
    "text": "depend if that is composed out of like like 10 substeps and it's right about um",
    "start": "731200",
    "end": "738800"
  },
  {
    "text": "executing step two then and you say Hal then basically Waits until it starts",
    "start": "738800",
    "end": "744519"
  },
  {
    "text": "with the execution of step three until it's continued again the idea of holding",
    "start": "744519",
    "end": "750680"
  },
  {
    "text": "a computation another another way to qu is is called suspending an operation",
    "start": "750680",
    "end": "755760"
  },
  {
    "text": "think for example about the react 18 and and the whole suspense right idea you",
    "start": "755760",
    "end": "763360"
  },
  {
    "text": "want to do concurrent things got it when you have a big large synchronous",
    "start": "763360",
    "end": "769320"
  },
  {
    "text": "operation that takes over the whole thread it's not really a good thing because the UI gets start you want those",
    "start": "769320",
    "end": "776800"
  },
  {
    "text": "operations to be suspendable so that they can pose something else might execute and then you get back to got so",
    "start": "776800",
    "end": "784959"
  },
  {
    "text": "that's how you efficiently Shadle fibers in a in a single thread and the concept",
    "start": "784959",
    "end": "790839"
  },
  {
    "text": "is extremely is extremely powerful because I would go on and and say that",
    "start": "790839",
    "end": "796760"
  },
  {
    "text": "fibers are even more useful in a single threaded language compared to a multi-threaded language because in a",
    "start": "796760",
    "end": "802240"
  },
  {
    "text": "multi-threaded language you have like Choice one and two on in in how to do things in JavaScript you can un stuck a",
    "start": "802240",
    "end": "809680"
  },
  {
    "text": "threat right you have only one that's a great point so just to recap at the the current point so um what we're aiming to",
    "start": "809680",
    "end": "818399"
  },
  {
    "text": "to get with with fibers this this new abstraction is one help with error",
    "start": "818399",
    "end": "823680"
  },
  {
    "text": "handling where we basically can say Okay API 2 can fail here what to do about API",
    "start": "823680",
    "end": "829560"
  },
  {
    "text": "one and three and like how should the user interact with this should the entire thing fail or not so more",
    "start": "829560",
    "end": "836240"
  },
  {
    "text": "granular error handling than just like one big Tri catch around all of it um",
    "start": "836240",
    "end": "841399"
  },
  {
    "text": "then another is cancellation maybe maybe some of us have dabbled with like the what is called the",
    "start": "841399",
    "end": "848959"
  },
  {
    "text": "the abort controller um for to implement this but that gets verbose and painful",
    "start": "848959",
    "end": "855240"
  },
  {
    "text": "pretty quickly so that's another aspect that this is trying to address and then the suspension so okay that that makes",
    "start": "855240",
    "end": "862880"
  },
  {
    "text": "total sense to me that that's great okay so I think we have enough motivation to",
    "start": "862880",
    "end": "868720"
  },
  {
    "text": "to realize that fibers are definitely an interesting topic but before we get into",
    "start": "868720",
    "end": "874959"
  },
  {
    "text": "into the details of how a fiber looks like we got to speak for a few minutes",
    "start": "874959",
    "end": "881360"
  },
  {
    "text": "about what what effect is and in general",
    "start": "881360",
    "end": "886839"
  },
  {
    "text": "what an iio data type that can run inside a fiber looks like right since",
    "start": "886839",
    "end": "892880"
  },
  {
    "text": "since i' I've used effect effect now for for quite a while and I've never had to use like a fiber explicitly so I my",
    "start": "892880",
    "end": "899759"
  },
  {
    "text": "understanding is that effects are implemented on top of fibers um so you",
    "start": "899759",
    "end": "905519"
  },
  {
    "text": "you'd rarely get in touch with them like too closely in most cases yourself but",
    "start": "905519",
    "end": "911000"
  },
  {
    "text": "it's it's good to know that this is like The underlaying Primitives that are being used here they are definitely a",
    "start": "911000",
    "end": "916959"
  },
  {
    "text": "lower a lower level primitive that depending on the context you may want to",
    "start": "916959",
    "end": "922120"
  },
  {
    "text": "use them directly but generally speaking you have higher order combinators that are implemented in terms of fiber behind",
    "start": "922120",
    "end": "929399"
  },
  {
    "text": "the scenes and you don't need to take care of them directly I will not do the full effect I",
    "start": "929399",
    "end": "938000"
  },
  {
    "text": "will try to be as as small as possible but something needs to to be cleared up",
    "start": "938000",
    "end": "945519"
  },
  {
    "text": "from the very beginning what what we will do is we will simulate a small",
    "start": "945519",
    "end": "951279"
  },
  {
    "text": "effect type that has a single parameter that just represent the the output of a",
    "start": "951279",
    "end": "957800"
  },
  {
    "text": "program we are going ignore the the error Channel and uh and the environment",
    "start": "957800",
    "end": "963319"
  },
  {
    "text": "uh channel for for the purpose of keeping this discussion a little bit more",
    "start": "963319",
    "end": "968600"
  },
  {
    "text": "contained and I data type uh in in its simplest form could be",
    "start": "968600",
    "end": "977000"
  },
  {
    "text": "encoded as something like that and if I were to make to make it asynchronous I",
    "start": "977000",
    "end": "984639"
  },
  {
    "text": "could encode it in in some in for example this way that's just a sync function can can you just provide a few",
    "start": "984639",
    "end": "991560"
  },
  {
    "text": "analogies of like what what IO stands for in in this case input",
    "start": "991560",
    "end": "997160"
  },
  {
    "text": "output got it so you put in an argument you get something back it's it's meant",
    "start": "997160",
    "end": "1003560"
  },
  {
    "text": "to represent any any type of side effect that can run it's literally like console",
    "start": "1003560",
    "end": "1009040"
  },
  {
    "text": "input output and you could you could call it effect or computation or program",
    "start": "1009040",
    "end": "1018959"
  },
  {
    "text": "iio is just short and quick if we implement it this way we're",
    "start": "1018959",
    "end": "1025959"
  },
  {
    "text": "not really gaining anything because we are based on top of promises so we sort",
    "start": "1025959",
    "end": "1031240"
  },
  {
    "text": "of want to avoid that that type of thing now there are two ways of of encoding",
    "start": "1031240",
    "end": "1038240"
  },
  {
    "text": "data types one is this one which is called the final encoding where the",
    "start": "1038240",
    "end": "1043720"
  },
  {
    "text": "program is directly executable the other one it's called the initial in coding where instead of",
    "start": "1043720",
    "end": "1049640"
  },
  {
    "text": "writing something that's directly executable you write it as a as The Primitives that it support so we might",
    "start": "1049640",
    "end": "1056720"
  },
  {
    "text": "say that niio of a it's for example a sync",
    "start": "1056720",
    "end": "1064960"
  },
  {
    "text": "operation of a or can be an a sync operation of a let's let's begin writing",
    "start": "1064960",
    "end": "1073760"
  },
  {
    "text": "those two CL sync up of a",
    "start": "1073760",
    "end": "1080240"
  },
  {
    "text": "I'm just going to implement a simple tag Union",
    "start": "1080240",
    "end": "1087679"
  },
  {
    "text": "up and the the reason why you're using classes here is I think because it makes",
    "start": "1089880",
    "end": "1095120"
  },
  {
    "text": "it a little bit easier because you don't need to different differentiate like classes give you a thing in typescript",
    "start": "1095120",
    "end": "1101760"
  },
  {
    "text": "that both works on a type level and on a term level um otherwise there there's",
    "start": "1101760",
    "end": "1107640"
  },
  {
    "text": "other other than that there's no particular reason to use a class here I think no it's simply because there is a",
    "start": "1107640",
    "end": "1113880"
  },
  {
    "text": "Constructor for free right fundamentally here I have to uh use one",
    "start": "1113880",
    "end": "1120480"
  },
  {
    "text": "trick the the most obvious would be to actually use the a",
    "start": "1120480",
    "end": "1125960"
  },
  {
    "text": "parameter but let's begin like that the next operation will be more more complex",
    "start": "1125960",
    "end": "1132280"
  },
  {
    "text": "so let's say we have one sync one a sync sync",
    "start": "1132280",
    "end": "1140120"
  },
  {
    "text": "this doesn't return an an A but we might say that",
    "start": "1140120",
    "end": "1147120"
  },
  {
    "text": "this for example is a is a callback old style callback uh callback thing",
    "start": "1147120",
    "end": "1156880"
  },
  {
    "text": "and yeah I think an interesting uh note on the the Callback so I don't know the",
    "start": "1156880",
    "end": "1162440"
  },
  {
    "text": "um the perform performance benchmarks on the top of my head here but I I think I",
    "start": "1162440",
    "end": "1168760"
  },
  {
    "text": "think I remember that using promises and as single weight comes at quite a um",
    "start": "1168760",
    "end": "1175120"
  },
  {
    "text": "quite a performance penalty and that using callbacks um can be can be faster",
    "start": "1175120",
    "end": "1181039"
  },
  {
    "text": "so may maybe we find something that backs us up but that's that's what I remember you are perfectly right uh",
    "start": "1181039",
    "end": "1188559"
  },
  {
    "text": "there are two performance compromises that you make",
    "start": "1188559",
    "end": "1195400"
  },
  {
    "text": "the first one is from callbacks to promises the second is from promises to",
    "start": "1195400",
    "end": "1202640"
  },
  {
    "text": "a syn away because a syn away is commonly known as a syntactic sugar on",
    "start": "1202640",
    "end": "1207799"
  },
  {
    "text": "top of promises but that's a false statement oh okay so I've",
    "start": "1207799",
    "end": "1213760"
  },
  {
    "text": "already about some wrong stuff here do you mean wrapping the Callback Style",
    "start": "1213760",
    "end": "1219080"
  },
  {
    "text": "with promises so that it's compatible is the first of those two that you mentioned yes gotcha that's the first",
    "start": "1219080",
    "end": "1226480"
  },
  {
    "text": "performance hit the second performance hit is when you express the computation",
    "start": "1226480",
    "end": "1231880"
  },
  {
    "text": "in terms of AA weight because behind the scenes what's going on is a syn we is",
    "start": "1231880",
    "end": "1237120"
  },
  {
    "text": "implemented using generators so they are literally the same thing as uh as",
    "start": "1237120",
    "end": "1242240"
  },
  {
    "text": "iterable computations that by Nature are uh are slower even though they're",
    "start": "1242240",
    "end": "1248600"
  },
  {
    "text": "getting better and better but there is definitely a performance cost that's a that's a great point I remember before",
    "start": "1248600",
    "end": "1255280"
  },
  {
    "text": "ASN were like readily available in modern browsers and node Etc and you use",
    "start": "1255280",
    "end": "1261520"
  },
  {
    "text": "Babel or these kind of tools and you looked at the transpiles where were",
    "start": "1261520",
    "end": "1267039"
  },
  {
    "text": "already able to use a single weight and you looked at what is Bobble actually um producing here it it was using exactly",
    "start": "1267039",
    "end": "1274679"
  },
  {
    "text": "exactly that um or I don't I don't remember whether",
    "start": "1274679",
    "end": "1280880"
  },
  {
    "text": "it was using um generators or um compiled it in in some uh call backy",
    "start": "1280880",
    "end": "1287760"
  },
  {
    "text": "thing but I I remember that that Rings true okay so this is the very this is",
    "start": "1287760",
    "end": "1296320"
  },
  {
    "text": "the very basic definition and with this we can already",
    "start": "1296320",
    "end": "1301559"
  },
  {
    "text": "make something like sync of",
    "start": "1301559",
    "end": "1306960"
  },
  {
    "text": "a mixing the syntaxes obviously",
    "start": "1307039",
    "end": "1312480"
  },
  {
    "text": "okay so you you're building yourself a little DSL here that gives you an alternative this way you get get to to",
    "start": "1331600",
    "end": "1338799"
  },
  {
    "text": "build programs like we had before with like promise.all Etc but instead of using",
    "start": "1338799",
    "end": "1345480"
  },
  {
    "text": "promises um we drop down again to how everything is implemented using",
    "start": "1345480",
    "end": "1350799"
  },
  {
    "text": "callbacks um but we get to build ourselves like nicer Primitives to work",
    "start": "1350799",
    "end": "1355919"
  },
  {
    "text": "with that eventually I guess like the the the full uh the like the end form of",
    "start": "1355919",
    "end": "1363080"
  },
  {
    "text": "this will look like fibers so these are baby fibers I guess this is just a",
    "start": "1363080",
    "end": "1369919"
  },
  {
    "text": "representation of a computation got it that's not not yet a fiber okay",
    "start": "1369919",
    "end": "1378640"
  },
  {
    "text": "so the next thing I want to do is like like that I can already say something",
    "start": "1378640",
    "end": "1383840"
  },
  {
    "text": "like console log okay and I could say a",
    "start": "1383840",
    "end": "1389400"
  },
  {
    "text": "sync and that's the",
    "start": "1389400",
    "end": "1394080"
  },
  {
    "text": "complete and I can say for example",
    "start": "1395200",
    "end": "1401320"
  },
  {
    "text": "fetch whatever do",
    "start": "1401320",
    "end": "1406799"
  },
  {
    "text": "then result",
    "start": "1406799",
    "end": "1410440"
  },
  {
    "text": "complete pleas on ignoring for a second that we use promises here under the hood but yeah ignoring the fact that behind",
    "start": "1412840",
    "end": "1420880"
  },
  {
    "text": "the scenes we're using promises",
    "start": "1420880",
    "end": "1424440"
  },
  {
    "text": "here we see that in both cases we have have okay on one side we have",
    "start": "1435679",
    "end": "1442559"
  },
  {
    "text": "a this is aoid and in this case we have annone",
    "start": "1443120",
    "end": "1448320"
  },
  {
    "text": "because like promises in in this style in the cback style when you define",
    "start": "1448320",
    "end": "1454440"
  },
  {
    "text": "things you have to specify manually the result type like this would",
    "start": "1454440",
    "end": "1461080"
  },
  {
    "text": "be niio of a what a result a response",
    "start": "1461080",
    "end": "1466799"
  },
  {
    "text": "yeah response and we have our I response this is",
    "start": "1466799",
    "end": "1473440"
  },
  {
    "text": "effect like like thing the next thing you want to do is",
    "start": "1473440",
    "end": "1480000"
  },
  {
    "text": "composing those two things how do you compose well you make New Primitives",
    "start": "1480000",
    "end": "1485799"
  },
  {
    "text": "like one primitive could be flat",
    "start": "1485799",
    "end": "1489600"
  },
  {
    "text": "map and here it's a point where we have to stretch a little bit the",
    "start": "1491520",
    "end": "1499760"
  },
  {
    "text": "the type system and you're going to see why tag so that's a flat",
    "start": "1499760",
    "end": "1508880"
  },
  {
    "text": "map Constructor read only self is an",
    "start": "1508880",
    "end": "1517200"
  },
  {
    "text": "i of what a and a",
    "start": "1517200",
    "end": "1523080"
  },
  {
    "text": "function that continues from the",
    "start": "1523080",
    "end": "1529159"
  },
  {
    "text": "to some sort of iio B this will look",
    "start": "1529159",
    "end": "1534600"
  },
  {
    "text": "like uh promise. den promise. den you want to concatenate",
    "start": "1534600",
    "end": "1541480"
  },
  {
    "text": "operations now here first problem we we have two type parameters and in in Theo",
    "start": "1541480",
    "end": "1549520"
  },
  {
    "text": "we only have one so in general what we would need are a thing called gads",
    "start": "1549520",
    "end": "1558360"
  },
  {
    "text": "that uh typescript doesn't doesn't have by default so we we go on and force the",
    "start": "1558360",
    "end": "1566320"
  },
  {
    "text": "type to be used and we",
    "start": "1566320",
    "end": "1570639"
  },
  {
    "text": "literally arras all the type information so that's",
    "start": "1571440",
    "end": "1577799"
  },
  {
    "text": "that's preserved for for fake reasons but now we can say export",
    "start": "1577799",
    "end": "1585840"
  },
  {
    "text": "function flat map so functionality wise this doesn't have",
    "start": "1585840",
    "end": "1590960"
  },
  {
    "text": "to like there's nothing runtime that like the trick you've like described here doesn't do anything this is just to",
    "start": "1590960",
    "end": "1598360"
  },
  {
    "text": "work around some typescript limitations and basically simulate like it like it",
    "start": "1598360",
    "end": "1603600"
  },
  {
    "text": "had uh more generics capabilities precisely because flat",
    "start": "1603600",
    "end": "1610000"
  },
  {
    "text": "mapping a promise that returns a response with a promise that returns a",
    "start": "1610000",
    "end": "1616880"
  },
  {
    "text": "string we end up with a promise that refer a string this has nothing to do",
    "start": "1616880",
    "end": "1622399"
  },
  {
    "text": "here with like fibers or like this DSL You're Building here is just typescript trick it's just this is just a",
    "start": "1622399",
    "end": "1629000"
  },
  {
    "text": "typescript thing so F of course the compiler will",
    "start": "1629000",
    "end": "1637000"
  },
  {
    "text": "complain right foro I would say likey for us typescript is quite",
    "start": "1637000",
    "end": "1643360"
  },
  {
    "text": "unsafe you can do as any and you're good to go so now we can say flat",
    "start": "1643360",
    "end": "1650360"
  },
  {
    "text": "map let say our a sync op which we transform to a URL",
    "start": "1650360",
    "end": "1658679"
  },
  {
    "text": "string instead of saying whatever we have our",
    "start": "1658679",
    "end": "1664279"
  },
  {
    "text": "URL PL map syc operation",
    "start": "1664279",
    "end": "1671080"
  },
  {
    "text": "whatever and here we see we continue from a response to to something else and",
    "start": "1671080",
    "end": "1676880"
  },
  {
    "text": "let's say we want to log it want say response",
    "start": "1676880",
    "end": "1682840"
  },
  {
    "text": "and syn",
    "start": "1682840",
    "end": "1688200"
  },
  {
    "text": "console.log response cons result and this would be ni I",
    "start": "1688519",
    "end": "1697519"
  },
  {
    "text": "alloid one key aspect here is the",
    "start": "1697519",
    "end": "1703000"
  },
  {
    "text": "Callback hell which is more theoretically known as continuation",
    "start": "1703000",
    "end": "1708120"
  },
  {
    "text": "passing style is a model that can Encompass both synchronous and",
    "start": "1708120",
    "end": "1714720"
  },
  {
    "text": "asynchronous computations right because you pass a call back you don't know when that that call back gets invoked could",
    "start": "1714720",
    "end": "1720720"
  },
  {
    "text": "be invoked straight away or could be invoked as a delay thing so you have a",
    "start": "1720720",
    "end": "1726159"
  },
  {
    "text": "single model that Encompass both both words promises and a Synco weight are",
    "start": "1726159",
    "end": "1734200"
  },
  {
    "text": "kind of weird in separating the meaning of code you you write code in a different way if it's",
    "start": "1734200",
    "end": "1741000"
  },
  {
    "text": "synchronous or if it's a synchronous right with fibers and structure",
    "start": "1741000",
    "end": "1746480"
  },
  {
    "text": "concurrency and effect systems you get back to a model where you treat computations in the same",
    "start": "1746480",
    "end": "1753799"
  },
  {
    "text": "way you write sync code and a sync code that look exactly the",
    "start": "1753799",
    "end": "1759000"
  },
  {
    "text": "same but here we are at at the point of asking ourselves okay now now we have our nice",
    "start": "1759440",
    "end": "1765640"
  },
  {
    "text": "DSL nice I don't know if it's nice but probably the API could be improved like this is not a good",
    "start": "1765640",
    "end": "1774640"
  },
  {
    "text": "flma I could other a few I'm in the new Branch where there's ts+ so I could turn",
    "start": "1774640",
    "end": "1781039"
  },
  {
    "text": "this into an syntax in a matter of a few minutes but that's not the purpose of this discussion now backs the question",
    "start": "1781039",
    "end": "1788240"
  },
  {
    "text": "how do I run this how do I execute this",
    "start": "1788240",
    "end": "1793559"
  },
  {
    "text": "thing so this is pure description I haven't really said anything about",
    "start": "1793559",
    "end": "1802240"
  },
  {
    "text": "execution there I can't directly exe there's nothing I can call here when",
    "start": "1802240",
    "end": "1808200"
  },
  {
    "text": "when this flat if I log if I console log this",
    "start": "1808200",
    "end": "1813760"
  },
  {
    "text": "result is actually a a good thing to",
    "start": "1813760",
    "end": "1819519"
  },
  {
    "text": "do why is it it's compaining because I need leave them",
    "start": "1819760",
    "end": "1829960"
  },
  {
    "text": "doesn't yet know that fetch will become part of",
    "start": "1833519",
    "end": "1841519"
  },
  {
    "text": "node node build demo uh CJs index of JS we are logging",
    "start": "1843600",
    "end": "1854240"
  },
  {
    "text": "what this is it's literally a class instance that that represent the composition of two",
    "start": "1854240",
    "end": "1860960"
  },
  {
    "text": "operations so how would we Implement a runtime for for this I could say export",
    "start": "1860960",
    "end": "1868919"
  },
  {
    "text": "function run and what we want is something",
    "start": "1868919",
    "end": "1876080"
  },
  {
    "text": "like we run we want to run an i",
    "start": "1876080",
    "end": "1882279"
  },
  {
    "text": "away and on done we want to have our result",
    "start": "1882519",
    "end": "1891679"
  },
  {
    "text": "a and have it as a as a hold back thing this will not return anything in",
    "start": "1891679",
    "end": "1901080"
  },
  {
    "text": "particular so now we could say run",
    "start": "1901080",
    "end": "1906919"
  },
  {
    "text": "result here I have a void there literally nothing I should do but let's",
    "start": "1906919",
    "end": "1912760"
  },
  {
    "text": "say that instead I don't know I want to say response",
    "start": "1912760",
    "end": "1919159"
  },
  {
    "text": "headers whatever from the but",
    "start": "1919159",
    "end": "1927080"
  },
  {
    "text": "y yeah I'm not doing it this way I think status text is good yeah",
    "start": "1930159",
    "end": "1938679"
  },
  {
    "text": "or get whatever string or null string or null and now now here I should have",
    "start": "1944120",
    "end": "1951519"
  },
  {
    "text": "the the exit value and the exit value should be",
    "start": "1951519",
    "end": "1957720"
  },
  {
    "text": "string or n good so we basically need to build",
    "start": "1957720",
    "end": "1963559"
  },
  {
    "text": "write an interpreter for for that now we have to write an interpreter for I just want to be a bit conscious of of time",
    "start": "1963559",
    "end": "1970240"
  },
  {
    "text": "here um so like I I think we can um",
    "start": "1970240",
    "end": "1975519"
  },
  {
    "text": "should we should we continue impl write the whole interpreter I we just",
    "start": "1975519",
    "end": "1980720"
  },
  {
    "text": "sketch now now we have um like a a new little toy DSL for like a unified way of",
    "start": "1980720",
    "end": "1989000"
  },
  {
    "text": "like writing synchronous and asynchronous programs um so how like how",
    "start": "1989000",
    "end": "1994120"
  },
  {
    "text": "does that get us to uh to to fibers now the very the very own question what what",
    "start": "1994120",
    "end": "2000480"
  },
  {
    "text": "is a fiber I've said the computation shall be",
    "start": "2000480",
    "end": "2006080"
  },
  {
    "text": "suspendable that means I cannot run everything inside this run",
    "start": "2006080",
    "end": "2011639"
  },
  {
    "text": "function I could start by switching over over self. tag and say okay in case it's",
    "start": "2011639",
    "end": "2021200"
  },
  {
    "text": "an a synop I need to do something in",
    "start": "2021200",
    "end": "2027559"
  },
  {
    "text": "case it's a synop I need to do",
    "start": "2027559",
    "end": "2032559"
  },
  {
    "text": "something I'll not Implement all of those because later on we see it in",
    "start": "2033399",
    "end": "2038760"
  },
  {
    "text": "in Max part um might be worthwhile before getting into the sketching Out The",
    "start": "2038760",
    "end": "2045399"
  },
  {
    "text": "Interpreter to maybe do one more data type to represent uh parallelizing and then the cleanup that you",
    "start": "2045399",
    "end": "2053240"
  },
  {
    "text": "mentioned if we have time it would literally be a matter of",
    "start": "2053240",
    "end": "2060480"
  },
  {
    "text": "saying all O A export class all of",
    "start": "2060480",
    "end": "2069520"
  },
  {
    "text": "a read only a we're faking again the",
    "start": "2069520",
    "end": "2077720"
  },
  {
    "text": "type tag all structure",
    "start": "2077800",
    "end": "2085679"
  },
  {
    "text": "okay let me let me make this this easy",
    "start": "2120359",
    "end": "2127160"
  },
  {
    "text": "there is a better syntax where I could spread a tle and have a be a union of",
    "start": "2129400",
    "end": "2134880"
  },
  {
    "text": "potentially multiple",
    "start": "2134880",
    "end": "2138680"
  },
  {
    "text": "things and here I could say all",
    "start": "2153760",
    "end": "2160839"
  },
  {
    "text": "sponsor undefined because yeah we we don't have a tuple but an array we don't",
    "start": "2192000",
    "end": "2198400"
  },
  {
    "text": "have a tuple but we have an array I guess you could after uh here",
    "start": "2198400",
    "end": "2205079"
  },
  {
    "text": "you could probably yeah right I am bothered by by this",
    "start": "2205079",
    "end": "2212000"
  },
  {
    "text": "oh yeah would would",
    "start": "2229880",
    "end": "2235520"
  },
  {
    "text": "be almost offensive to not use all the typescript features right would be",
    "start": "2235520",
    "end": "2241400"
  },
  {
    "text": "really offensive uh why are you checking for the never case I don't don't think this",
    "start": "2241400",
    "end": "2250359"
  },
  {
    "text": "knows what do you mean the never case uh creating a single element to B out of a",
    "start": "2250359",
    "end": "2257520"
  },
  {
    "text": "what does that do oh that I'm I don't want to Sid trck us no no that that uh",
    "start": "2257520",
    "end": "2264680"
  },
  {
    "text": "prevents a union to spread to spread out this is a",
    "start": "2264680",
    "end": "2270400"
  },
  {
    "text": "non-distributive um thing even a is a union I don't want the",
    "start": "2270400",
    "end": "2276560"
  },
  {
    "text": "solution gotcha now I can easily remove",
    "start": "2276560",
    "end": "2283880"
  },
  {
    "text": "that and this is now never lovely uh why it's",
    "start": "2284920",
    "end": "2292440"
  },
  {
    "text": "never um I guess because it's not just one a but like you you've handled a case",
    "start": "2293079",
    "end": "2298720"
  },
  {
    "text": "of one uh like a a tle of one but uh",
    "start": "2298720",
    "end": "2307799"
  },
  {
    "text": "never never never no that's extend I infer I I would suggest we we undo this",
    "start": "2310839",
    "end": "2319040"
  },
  {
    "text": "and you you gota like um we got the idea of all",
    "start": "2319040",
    "end": "2326119"
  },
  {
    "text": "yep let's not get uh get too deep here oh this this was",
    "start": "2326119",
    "end": "2331640"
  },
  {
    "text": "easy okay have two",
    "start": "2331640",
    "end": "2337599"
  },
  {
    "text": "no no worries all right we're not getting killed by by typescript here but anyway",
    "start": "2337800",
    "end": "2345240"
  },
  {
    "text": "uh the idea is literally you describe things second point would be",
    "start": "2345240",
    "end": "2352079"
  },
  {
    "text": "Interruption here we don't yet have an interruptable primitive but Interruption",
    "start": "2352079",
    "end": "2358760"
  },
  {
    "text": "would be another type of uh of description a fiber doesn't require to",
    "start": "2358760",
    "end": "2363960"
  },
  {
    "text": "have Interruption available it's a very good thing to have and we're",
    "start": "2363960",
    "end": "2370520"
  },
  {
    "text": "going to see in the in the effect fiber the only thing that a fiber should have",
    "start": "2370520",
    "end": "2376200"
  },
  {
    "text": "is suspension so it should not take the whole thread if here I I were to make a",
    "start": "2376200",
    "end": "2383720"
  },
  {
    "text": "concatenation of infinite synchronous operations when I run this run it should",
    "start": "2383720",
    "end": "2391480"
  },
  {
    "text": "not take over the whole thread it should yield after a while and get back",
    "start": "2391480",
    "end": "2399319"
  },
  {
    "text": "which begs the the problem if this run is a simple",
    "start": "2399440",
    "end": "2404800"
  },
  {
    "text": "function when I stop my computation to restart at a later Point let's",
    "start": "2404800",
    "end": "2413040"
  },
  {
    "text": "say this will have to be a while",
    "start": "2413040",
    "end": "2418480"
  },
  {
    "text": "loop because we are traversing multiple operations flat have to do multiple",
    "start": "2418480",
    "end": "2424280"
  },
  {
    "text": "things and we don't want to implement this function in a recursive way because",
    "start": "2424280",
    "end": "2429720"
  },
  {
    "text": "otherwise the stock will blow up we want to implement it iteratively while",
    "start": "2429720",
    "end": "2435760"
  },
  {
    "text": "keeping the stock around so here we would have",
    "start": "2435760",
    "end": "2440960"
  },
  {
    "text": "something like account continue uh",
    "start": "2440960",
    "end": "2446680"
  },
  {
    "text": "continuation stock which in its simple way it's it's",
    "start": "2446680",
    "end": "2454720"
  },
  {
    "text": "literally in this case an array of flat map",
    "start": "2454720",
    "end": "2461599"
  },
  {
    "text": "operations uh yeah that's not",
    "start": "2461599",
    "end": "2466800"
  },
  {
    "text": "typescript and in here when we have like a flat",
    "start": "2468000",
    "end": "2473160"
  },
  {
    "text": "map say that let the current operation start as",
    "start": "2473160",
    "end": "2480560"
  },
  {
    "text": "self this case the current operation is going to be",
    "start": "2480560",
    "end": "2488319"
  },
  {
    "text": "current do",
    "start": "2489920",
    "end": "2493280"
  },
  {
    "text": "self we want to continue while we have an operation current equal current. self",
    "start": "2495040",
    "end": "2503160"
  },
  {
    "text": "this is niio of any and we want to say continuation st.",
    "start": "2503160",
    "end": "2511960"
  },
  {
    "text": "push sell current",
    "start": "2511960",
    "end": "2518079"
  },
  {
    "text": "why is is not narrow",
    "start": "2522280",
    "end": "2528560"
  },
  {
    "text": "down because of course I have to invert so when we get to a flat map we push it",
    "start": "2528560",
    "end": "2535280"
  },
  {
    "text": "on the stock for for later on when we no longer have a current operation here we",
    "start": "2535280",
    "end": "2541920"
  },
  {
    "text": "will start by pulling the stock and see if we have operations to continue Contin",
    "start": "2541920",
    "end": "2548200"
  },
  {
    "text": "we pop from the stock and continue if the stock is empty it means we're",
    "start": "2548200",
    "end": "2553880"
  },
  {
    "text": "done but in this case all the computation runs inside here so if I",
    "start": "2553880",
    "end": "2559440"
  },
  {
    "text": "have everything synchronous it will be stucked I should maintain let a counter",
    "start": "2559440",
    "end": "2567359"
  },
  {
    "text": "for example this is one way and saying while current",
    "start": "2567359",
    "end": "2573280"
  },
  {
    "text": "or I is less than a th and at every cycle of the loop I",
    "start": "2573280",
    "end": "2581240"
  },
  {
    "text": "increment this counter so I don't do more than a th operation on a single",
    "start": "2581240",
    "end": "2586319"
  },
  {
    "text": "thread and then I yield and then I would have to say like",
    "start": "2586319",
    "end": "2592839"
  },
  {
    "text": "set immediate or set timeout to schedule the",
    "start": "2592839",
    "end": "2599079"
  },
  {
    "text": "continuation but here the the question starts where do I",
    "start": "2599079",
    "end": "2605200"
  },
  {
    "text": "keep my state around now and the stage here means like what",
    "start": "2605200",
    "end": "2611280"
  },
  {
    "text": "which operations do I have to do which operations do I have to do and where I've",
    "start": "2611280",
    "end": "2617040"
  },
  {
    "text": "left that's two key pieces right that's where a fiber starts and and I just want",
    "start": "2617040",
    "end": "2623920"
  },
  {
    "text": "to point out for for those like watching and being terribly puzzled of and thinking oh I never will touch effect",
    "start": "2623920",
    "end": "2630839"
  },
  {
    "text": "because like I'll need to deal with all of like this this madness uh quite the opposite effect has all this nicely",
    "start": "2630839",
    "end": "2637760"
  },
  {
    "text": "implemented so you don't have to like this is for the for the the intellectually curious who want to",
    "start": "2637760",
    "end": "2644640"
  },
  {
    "text": "understand how hust do work under the hood but you don't need to you don't need to write a while loop or whatever",
    "start": "2644640",
    "end": "2650960"
  },
  {
    "text": "keep track of stacks you can just ride like nicely high level code and this is",
    "start": "2650960",
    "end": "2656240"
  },
  {
    "text": "just a magic that makes it work fast and reliable under the hood I think one of the things that uh zo has done really",
    "start": "2656240",
    "end": "2663200"
  },
  {
    "text": "well and because effect is modeled after zo we we're we're trying to do the same um is that keep the uh framework very",
    "start": "2663200",
    "end": "2671240"
  },
  {
    "text": "approachable for people who are just learning it so you really don't need to learn much to actually use the framework",
    "start": "2671240",
    "end": "2676880"
  },
  {
    "text": "effectively in your code but for those who dive into the framework and learn",
    "start": "2676880",
    "end": "2681920"
  },
  {
    "text": "some of the lower level operators and data types that we have you can then do even more powerful things but it really",
    "start": "2681920",
    "end": "2687880"
  },
  {
    "text": "doesn't take much to actually get started with effect um and actually perform um some pretty powerful",
    "start": "2687880",
    "end": "2694599"
  },
  {
    "text": "operations just with the base Primitives that we that that are very easily",
    "start": "2694599",
    "end": "2700240"
  },
  {
    "text": "accessible so if you have a class which is an object with a",
    "start": "2701559",
    "end": "2709559"
  },
  {
    "text": "context you can isolate the continuation stock",
    "start": "2710200",
    "end": "2715800"
  },
  {
    "text": "here and in execution instead of doing this I would have to say new fiber",
    "start": "2718000",
    "end": "2728240"
  },
  {
    "text": "running this effect that's the whole thing a fiber is",
    "start": "2729640",
    "end": "2735440"
  },
  {
    "text": "just that it's a place where the state over running a sync computation is",
    "start": "2735440",
    "end": "2743520"
  },
  {
    "text": "preserved that keeps in mind the continuation stock so where where to",
    "start": "2743520",
    "end": "2749800"
  },
  {
    "text": "continue now we could go on and Implement literally a minimal example of",
    "start": "2749800",
    "end": "2756480"
  },
  {
    "text": "this but this set of Primitives is already is already quite dump and we could pick up",
    "start": "2756480",
    "end": "2764000"
  },
  {
    "text": "better better Primitives to make The Interpreter even easier but this is just for demonstration",
    "start": "2764000",
    "end": "2770520"
  },
  {
    "text": "purposes the idea of a fiber is literally isolating the state of a",
    "start": "2770520",
    "end": "2775960"
  },
  {
    "text": "running computation inside an object that can be resumed at a later point",
    "start": "2775960",
    "end": "2782079"
  },
  {
    "text": "because in this set immediate I still have my fiber around the con context is",
    "start": "2782079",
    "end": "2788319"
  },
  {
    "text": "still all available and I could say okay set immediate or set timeout and let's",
    "start": "2788319",
    "end": "2796000"
  },
  {
    "text": "say start from one second later I could continue where again I could say that",
    "start": "2796000",
    "end": "2804640"
  },
  {
    "text": "this dot current operation it's the same as",
    "start": "2804640",
    "end": "2810599"
  },
  {
    "text": "before the startat is the same as before I could say this do run and and we",
    "start": "2810599",
    "end": "2816440"
  },
  {
    "text": "continue that's the the whole idea of a fiber and",
    "start": "2816440",
    "end": "2823480"
  },
  {
    "text": "I'll take any question otherwise I hand over to Max to show the thing on on",
    "start": "2823480",
    "end": "2832040"
  },
  {
    "text": "effect where at least we have a complete implementation of that gone I have a",
    "start": "2832040",
    "end": "2837400"
  },
  {
    "text": "quick question uh can we relate this to reacts implementation",
    "start": "2837400",
    "end": "2843000"
  },
  {
    "text": "like react implementation is is for backward",
    "start": "2843000",
    "end": "2849119"
  },
  {
    "text": "compatibility quite a weird thing instead of preserving the the context",
    "start": "2849119",
    "end": "2855680"
  },
  {
    "text": "inside inside a fiber object you throw a",
    "start": "2855680",
    "end": "2862839"
  },
  {
    "text": "promise like you have your component is like a normal",
    "start": "2862839",
    "end": "2868119"
  },
  {
    "text": "function that can throw if you throw a promise there's an a sync B there's a",
    "start": "2868119",
    "end": "2873800"
  },
  {
    "text": "there's an error boundary that catches the promise and say oh I have a promise I",
    "start": "2873800",
    "end": "2879319"
  },
  {
    "text": "should continue with the promise when I'm done I'm going to render that's how you suspend outside of",
    "start": "2879319",
    "end": "2887280"
  },
  {
    "text": "the context of a single function that's another way of doing",
    "start": "2887280",
    "end": "2893160"
  },
  {
    "text": "things I'm not going to comment on the the beauty of throwing",
    "start": "2893160",
    "end": "2899480"
  },
  {
    "text": "promises but it's one way of they had to",
    "start": "2899480",
    "end": "2904520"
  },
  {
    "text": "preserve backward compatibility they don't want the whole rendering thing to",
    "start": "2904520",
    "end": "2910000"
  },
  {
    "text": "be completely blocking when you don't want to block you throw a",
    "start": "2910000",
    "end": "2915559"
  },
  {
    "text": "promise that can that gives you this yielding this kind of suspension the",
    "start": "2915559",
    "end": "2923440"
  },
  {
    "text": "whole idea of a fiber is a suspendable and resumable",
    "start": "2923440",
    "end": "2930119"
  },
  {
    "text": "operation awesome thank you good that's been super helpful so far to",
    "start": "2930440",
    "end": "2936799"
  },
  {
    "text": "to understand um and there really like I guess effect and fibers are really like",
    "start": "2936799",
    "end": "2942599"
  },
  {
    "text": "the sort of DSL around as or like General um computational Primitives uh",
    "start": "2942599",
    "end": "2950640"
  },
  {
    "text": "that can be composed together and I guess fiber is just a a really powerful",
    "start": "2950640",
    "end": "2955920"
  },
  {
    "text": "interpreter that makes all of this work it's at the end of the day a powerful",
    "start": "2955920",
    "end": "2960960"
  },
  {
    "text": "interpreter right in the case of react it's a fiber implemented in a in a f",
    "start": "2960960",
    "end": "2966720"
  },
  {
    "text": "final encoding in this case it's implemented with an initial with an initial encoding so",
    "start": "2966720",
    "end": "2973520"
  },
  {
    "text": "things slightly different got it Max do you want me to share the workspace or do",
    "start": "2973520",
    "end": "2980000"
  },
  {
    "text": "you have it locally I have it locally um I can pull it up here let me just open",
    "start": "2980000",
    "end": "2987240"
  },
  {
    "text": "it all right switching over to to Max's computer then switching har do do you",
    "start": "2988040",
    "end": "2994480"
  },
  {
    "text": "feel uh your questions have been uh answered to a satisfactory point from",
    "start": "2994480",
    "end": "3001400"
  },
  {
    "text": "from your from from your curiosity around what I've what fabers absolutely",
    "start": "3001400",
    "end": "3007440"
  },
  {
    "text": "this has been really fascinating are you guys able to my screen yeah we are but",
    "start": "3007440",
    "end": "3012760"
  },
  {
    "text": "please font a little bit bigger the second question you you asked",
    "start": "3012760",
    "end": "3018920"
  },
  {
    "text": "before was why why it's performance it's all about minimizing",
    "start": "3018920",
    "end": "3024760"
  },
  {
    "text": "allocation minimizing memory real allocation and and this is what gets",
    "start": "3024760",
    "end": "3031200"
  },
  {
    "text": "really interesting in in zo 2.0 and the fiber that that we have here because",
    "start": "3031200",
    "end": "3037880"
  },
  {
    "text": "it's very very minimal in in the memory that it allocates I I expect it doesn't",
    "start": "3037880",
    "end": "3044240"
  },
  {
    "text": "get simpler to understand though no it doesn't it does not and uh you know there was a video",
    "start": "3044240",
    "end": "3051559"
  },
  {
    "text": "that the The Zo guys had done during one of their sessions uh at some point where they went through kind kind of something",
    "start": "3051559",
    "end": "3057200"
  },
  {
    "text": "similar where they just explained like fibers and like how they actually implement it but what they talked about",
    "start": "3057200",
    "end": "3062640"
  },
  {
    "text": "a lot is that at a certain point you know you you have to become somewhat unsafe uh in your types and erase type",
    "start": "3062640",
    "end": "3070280"
  },
  {
    "text": "information um so in effect effect does a very excellent job of preserving type information uh as you're using the",
    "start": "3070280",
    "end": "3076720"
  },
  {
    "text": "framework uh preserves error types all the way up to the top of your application um and Mike actually did an",
    "start": "3076720",
    "end": "3083280"
  },
  {
    "text": "excellent talk at at functional Scala about the the benefit benefit of typescript in that regard um and type",
    "start": "3083280",
    "end": "3089599"
  },
  {
    "text": "inference and what we get um but what you'll probably notice looking at just even this little bit of code here is all",
    "start": "3089599",
    "end": "3096720"
  },
  {
    "text": "of this any any any any unknown null like all of this really ugly mutable and",
    "start": "3096720",
    "end": "3103760"
  },
  {
    "text": "untyped code um and so you know as uh as",
    "start": "3103760",
    "end": "3108799"
  },
  {
    "text": "the as The Zo guys explained in their video I'll do I'll explain the same thing at a certain point we have to",
    "start": "3108799",
    "end": "3114200"
  },
  {
    "text": "sacrifice type information for um speed an efficiency and as long as the implementation is accurate can we make",
    "start": "3114200",
    "end": "3121799"
  },
  {
    "text": "larger oh yeah yeah yeah is tell me when to stop right I think that's a really",
    "start": "3121799",
    "end": "3127400"
  },
  {
    "text": "great point I think this is that's big enough for me um and I think it matches what with my cad I think that's a really",
    "start": "3127400",
    "end": "3134480"
  },
  {
    "text": "great point and I've like when I when I model something into for for an",
    "start": "3134480",
    "end": "3139720"
  },
  {
    "text": "application and if that has like a sort of like a more user facing part uh I I",
    "start": "3139720",
    "end": "3145720"
  },
  {
    "text": "come to almost like like duplicate my DSL in a way where I have like a more",
    "start": "3145720",
    "end": "3151119"
  },
  {
    "text": "like a user facing uh DSL that has generics um and does um yeah has has",
    "start": "3151119",
    "end": "3158960"
  },
  {
    "text": "like type inference generics Etc you hover over something you see exactly oh this is the return type but when you",
    "start": "3158960",
    "end": "3165079"
  },
  {
    "text": "come to the implementation of it it's uh the generics don't buy you anything",
    "start": "3165079",
    "end": "3170680"
  },
  {
    "text": "anymore um and I come to basically almost duplicate that where I don't have",
    "start": "3170680",
    "end": "3176000"
  },
  {
    "text": "a gener but I just have the Primitive types instead of like having a a string",
    "start": "3176000",
    "end": "3181079"
  },
  {
    "text": "generic that could be anything I'll just don't even bother and don't make it generic and my implementation just deals",
    "start": "3181079",
    "end": "3188359"
  },
  {
    "text": "with that um and so that that's sort of like an emerging pattern for me across",
    "start": "3188359",
    "end": "3193480"
  },
  {
    "text": "projects and see seems similar here yeah um I mean like I said as as we kind of",
    "start": "3193480",
    "end": "3199799"
  },
  {
    "text": "look through some of this I'm not going to dive too deep into the fiber implementation itself but I want to highlight all of the points that Mike",
    "start": "3199799",
    "end": "3206960"
  },
  {
    "text": "brought up in explaining a fiber and how that kind of looks in the actual implementation um and again all all all",
    "start": "3206960",
    "end": "3213599"
  },
  {
    "text": "credit to the The Zo guys for doing such a great job at their libraries Library as well um so happy we can we can borrow",
    "start": "3213599",
    "end": "3220480"
  },
  {
    "text": "from them but um as you can see like we have a a class here that Mike explained",
    "start": "3220480",
    "end": "3227119"
  },
  {
    "text": "that we're using to maintain our state um and in this case we're calling it the context of the fiber which is just an",
    "start": "3227119",
    "end": "3233520"
  },
  {
    "text": "actual implementation of a generic fiber runtime time um because you you know there are other ways to implement this",
    "start": "3233520",
    "end": "3240480"
  },
  {
    "text": "but for our implementation we're we're we have our fiber context class and um",
    "start": "3240480",
    "end": "3246520"
  },
  {
    "text": "some of the things that Mike wrote in his basic implementation I'll point out here so we are",
    "start": "3246520",
    "end": "3253000"
  },
  {
    "text": "maintaining some additional State related to our fivr um and the the fivr",
    "start": "3253000",
    "end": "3259079"
  },
  {
    "text": "state data type um which maybe I can like I'll explain maybe in a in a second",
    "start": "3259079",
    "end": "3265400"
  },
  {
    "text": "um is one of the ways that we track uh how the fiber is actually um what state the fiber is actually in when it's",
    "start": "3265400",
    "end": "3271559"
  },
  {
    "text": "running um and can you briefly describe which sort of states it could be in and how that relates to our mental model",
    "start": "3271559",
    "end": "3278200"
  },
  {
    "text": "from before sure or is that not relatable no I would it's it's relatable",
    "start": "3278200",
    "end": "3283960"
  },
  {
    "text": "we can talk about it so um it's pretty simple a fiber can either be executing",
    "start": "3283960",
    "end": "3290280"
  },
  {
    "text": "or done so it's relatively simple but we encapsulate some information within the",
    "start": "3290280",
    "end": "3296000"
  },
  {
    "text": "fiber state I'm not going to get too deep in the weeds here um but the",
    "start": "3296000",
    "end": "3301200"
  },
  {
    "text": "important thing is that you know a fiber can only be either executing its effect or its program or",
    "start": "3301200",
    "end": "3309079"
  },
  {
    "text": "it can be finished with and have a result for you so when that fiber actually is joined with the program when",
    "start": "3309079",
    "end": "3316040"
  },
  {
    "text": "you when you create a you can create fibers in effect by forking them um when",
    "start": "3316040",
    "end": "3321880"
  },
  {
    "text": "that fiber is eventually joined we wait for the result of that computation and that would you know be indicate that",
    "start": "3321880",
    "end": "3327559"
  },
  {
    "text": "we'd have a finished fiber at that point at which point we get just like forking here has nothing to do with like in C",
    "start": "3327559",
    "end": "3334720"
  },
  {
    "text": "when you Fork another uh another process so this is just forking in terms of",
    "start": "3334720",
    "end": "3340680"
  },
  {
    "text": "whatever concurrency mechanisms you have in JavaScript that you basically Let It",
    "start": "3340680",
    "end": "3346079"
  },
  {
    "text": "Go and it like there can be two different uh two different like flows in",
    "start": "3346079",
    "end": "3351720"
  },
  {
    "text": "the application and later on you bring them together again right forking a fiber in JavaScript essentially creates",
    "start": "3351720",
    "end": "3358000"
  },
  {
    "text": "a child fiber of the current fiber that you're on um so again I'm not going to",
    "start": "3358000",
    "end": "3363160"
  },
  {
    "text": "talk too much about like the how the the hierarchy of fibers and like that type of thing but I do want to point out like",
    "start": "3363160",
    "end": "3369000"
  },
  {
    "text": "some of the other things that Mike explained um when he was going through his basic implementation so we talked",
    "start": "3369000",
    "end": "3374760"
  },
  {
    "text": "about the state so the fiber can either be running or it can be finished um the counter that Mike referred to the",
    "start": "3374760",
    "end": "3381760"
  },
  {
    "text": "operation counter and in our implementation uh we call it the async Epic um it's basically just our counter",
    "start": "3381760",
    "end": "3388039"
  },
  {
    "text": "for how many operations we've performed um certainly sounds fancier much fancier",
    "start": "3388039",
    "end": "3394599"
  },
  {
    "text": "that's actually the counter of asynchronous operations right and so the",
    "start": "3394599",
    "end": "3400480"
  },
  {
    "text": "the the uh we also have the stack that Mike pointed out here um implemented",
    "start": "3400480",
    "end": "3406280"
  },
  {
    "text": "with an actual stack in this case um as opposed to the the array that Mike had referred to um I'm not going to touch on",
    "start": "3406280",
    "end": "3415240"
  },
  {
    "text": "scope at the moment because that kind of goes beyond the discussion of that we were currently having but Mike",
    "start": "3415240",
    "end": "3422240"
  },
  {
    "text": "did uh write in his little implementation that there's the concept of a current effect or a current IO",
    "start": "3422240",
    "end": "3428839"
  },
  {
    "text": "operation that's being executed um and so we tracked that in our implementation here with the next effect um I did kind",
    "start": "3428839",
    "end": "3436599"
  },
  {
    "text": "of briefly mention that a fiber can have child fibers that are running with uh",
    "start": "3436599",
    "end": "3442839"
  },
  {
    "text": "some information about the the parent the parent can track is children um and",
    "start": "3442839",
    "end": "3448000"
  },
  {
    "text": "so we track the set of running child fibers in this in this children variable",
    "start": "3448000",
    "end": "3455240"
  },
  {
    "text": "and then um what is the utility of doing that the utility of having a set of",
    "start": "3455240",
    "end": "3462160"
  },
  {
    "text": "child fibers yeah uh you can kind Mike you can correct me if I'm wrong here but",
    "start": "3462160",
    "end": "3467880"
  },
  {
    "text": "like the you can sort of conceptual the way I conceptualize this is is exact",
    "start": "3467880",
    "end": "3473720"
  },
  {
    "text": "kind of like what johannas was saying it's not forking like forking and C but you can conceptualize it that way is the",
    "start": "3473720",
    "end": "3480880"
  },
  {
    "text": "way that I think about it forking a fiber the you can actually do things on the child fibers from the parent like",
    "start": "3480880",
    "end": "3486760"
  },
  {
    "text": "interrupt and things like that but Mike can correct me if I'm wrong it basically gives you like a hierarchical structure",
    "start": "3486760",
    "end": "3493200"
  },
  {
    "text": "uh to to this yeah now to to do things with the with the Childs you could do it",
    "start": "3493200",
    "end": "3499160"
  },
  {
    "text": "directly in in user code the the reason why you you track the children here is",
    "start": "3499160",
    "end": "3505680"
  },
  {
    "text": "to actually preserve one of the fundamental identities that have to be preserved if",
    "start": "3505680",
    "end": "3511920"
  },
  {
    "text": "you have a piece of code that spawns up to processes and then joins them back",
    "start": "3511920",
    "end": "3518680"
  },
  {
    "text": "together the result should be always equivalent to a process that never",
    "start": "3518680",
    "end": "3524160"
  },
  {
    "text": "fought anything and never joined anything like do all the stuff on the same on the same program to guarantee",
    "start": "3524160",
    "end": "3532839"
  },
  {
    "text": "this you have to guarantee that when a process is finished all its child are",
    "start": "3532839",
    "end": "3538839"
  },
  {
    "text": "also finished you don't want to ever leak any fiber to the to the outside so",
    "start": "3538839",
    "end": "3544880"
  },
  {
    "text": "that's the reason you you track them so when something gets killed or completed you can propagate the kill or complete",
    "start": "3544880",
    "end": "3551160"
  },
  {
    "text": "to the child that's not always what you want to do sometimes you want to",
    "start": "3551160",
    "end": "3557920"
  },
  {
    "text": "twiggle the the behavior and forking into into the parent and that's what",
    "start": "3557920",
    "end": "3564000"
  },
  {
    "text": "Scopes are for right yeah and uh I'll Pro if if we want",
    "start": "3564000",
    "end": "3569520"
  },
  {
    "text": "to talk about what a scope is I'll probably let Mike handle that but um it's it's nothing more than a way to",
    "start": "3569520",
    "end": "3575559"
  },
  {
    "text": "group as far as I understand it it's nothing more than a way to group a particular set of fibers under a given",
    "start": "3575559",
    "end": "3581520"
  },
  {
    "text": "scope um or to attach them to the quote unquote Global scope which is a a uh a",
    "start": "3581520",
    "end": "3587760"
  },
  {
    "text": "concept in the effect system of like having a root scope object um the last",
    "start": "3587760",
    "end": "3595520"
  },
  {
    "text": "piece of the fiber context uh state or like you know the things that we're",
    "start": "3595520",
    "end": "3601000"
  },
  {
    "text": "tracking um is the actual runtime configuration of the fiber so you have the ability to provide a",
    "start": "3601000",
    "end": "3608480"
  },
  {
    "text": "certain degree of configuration for how that how a fiber is actually going to execute um and you can actually swap out",
    "start": "3608480",
    "end": "3615640"
  },
  {
    "text": "pieces of the runtime configuration at runtime um which is pretty interesting",
    "start": "3615640",
    "end": "3621520"
  },
  {
    "text": "um so you actually have access to the runtime config and can manipulate how AFF are actually executing at runtime um",
    "start": "3621520",
    "end": "3628760"
  },
  {
    "text": "but just to kind of like give you an idea of what's being passed in here um you can we're uh we're still kind of",
    "start": "3628760",
    "end": "3636520"
  },
  {
    "text": "debating the concept concept concept of fatal errors in effect uh but you have",
    "start": "3636520",
    "end": "3641839"
  },
  {
    "text": "the ability to handle specific errors that are designated that you can designate as fatal so you're passed in",
    "start": "3641839",
    "end": "3648400"
  },
  {
    "text": "some defect and you can say this is a fatal error um and hand and handle it somehow um you can also report on that",
    "start": "3648400",
    "end": "3656079"
  },
  {
    "text": "fatal error uh but again these are this is not the final final API of our next",
    "start": "3656079",
    "end": "3661760"
  },
  {
    "text": "Branch so I wouldn't I would take the config with a grain of salt at the moment um because we're still iterating",
    "start": "3661760",
    "end": "3667160"
  },
  {
    "text": "on it but most importantly you see there is a Max op supervisor and",
    "start": "3667160",
    "end": "3674000"
  },
  {
    "text": "loggers Max op is the maximum number of operations that run in a fiber our",
    "start": "3674000",
    "end": "3681359"
  },
  {
    "text": "hardcoded thousand before that's configurable supervisor is somebody",
    "start": "3681359",
    "end": "3689039"
  },
  {
    "text": "that basically supervis the processes that you're",
    "start": "3689039",
    "end": "3694720"
  },
  {
    "text": "launching and that can be used to track the whole uh the whole program",
    "start": "3694720",
    "end": "3700480"
  },
  {
    "text": "when they when when you Fork new fibers they are getting reported think about for example if you want to implement a",
    "start": "3700480",
    "end": "3706920"
  },
  {
    "text": "metric system on top that keeps track of running running processes and etc etc",
    "start": "3706920",
    "end": "3712920"
  },
  {
    "text": "that's via supervisors and loggers as you might imagine are to log",
    "start": "3712920",
    "end": "3720640"
  },
  {
    "text": "operations what would happen if you exceed the maximum operations the F yields suspend and okay",
    "start": "3720640",
    "end": "3729920"
  },
  {
    "text": "so it basically just Waits until it catches up with more work and so it frees up it literally does a set",
    "start": "3729920",
    "end": "3737240"
  },
  {
    "text": "immediate so it release the the the thread so if there is anything that else",
    "start": "3737240",
    "end": "3742839"
  },
  {
    "text": "that need to run the other things it it's just like when in a in a UI you",
    "start": "3742839",
    "end": "3749680"
  },
  {
    "text": "do set immediate because you want to continue your work and at the end you want to restart right yeah um and then",
    "start": "3749680",
    "end": "3759000"
  },
  {
    "text": "Mike pointed out the loggers this is a feature in the next branch of effect and also in zo 2.0 logging is baked in um so",
    "start": "3759000",
    "end": "3766200"
  },
  {
    "text": "we have the ability to do some cool stuff here and then the one last thing I'll just very quickly mention is there",
    "start": "3766200",
    "end": "3773160"
  },
  {
    "text": "are different runtime configuration flags that are going to that exist in our next branch of effect and they",
    "start": "3773160",
    "end": "3780240"
  },
  {
    "text": "basically just allow you to do certain things I think maybe the two things that people could conceptualize is turning on",
    "start": "3780240",
    "end": "3786400"
  },
  {
    "text": "and off the um we haven't implemented this yet but in zo enabling the log",
    "start": "3786400",
    "end": "3792720"
  },
  {
    "text": "runtime allows uh somebody it's kind of like a debugging tool it allows people to log every single effect that's",
    "start": "3792720",
    "end": "3799480"
  },
  {
    "text": "executed um it logs out like the name of the instruction that was executed and what it was executed with um and so we",
    "start": "3799480",
    "end": "3807720"
  },
  {
    "text": "we're the tray that originated from exactly so you get some kind of useful",
    "start": "3807720",
    "end": "3813839"
  },
  {
    "text": "information here um but anyways the runtime configuration is basically like",
    "start": "3813839",
    "end": "3819079"
  },
  {
    "text": "I said a way to turn on different ways of the manipulate the way that a fiber",
    "start": "3819079",
    "end": "3824440"
  },
  {
    "text": "executes um so now I'm going to skip all the way down to the very bottom of this",
    "start": "3824440",
    "end": "3830680"
  },
  {
    "text": "very large file so Mike had showed you guys kind of",
    "start": "3830680",
    "end": "3838839"
  },
  {
    "text": "like the uh way that a fiber is the instructions are actually executed on a",
    "start": "3838839",
    "end": "3844799"
  },
  {
    "text": "fiber um and the interesting thing about fibers in effect is that in reality",
    "start": "3844799",
    "end": "3851119"
  },
  {
    "text": "what's happening is every instruction that gets passed in here and by instruction I mean an effect right we",
    "start": "3851119",
    "end": "3856680"
  },
  {
    "text": "think of it effects in terms of like Mike had showed us kind of like a a",
    "start": "3856680",
    "end": "3862200"
  },
  {
    "text": "tagged Union of different data types that we can then use to perform different instructions um so when I say",
    "start": "3862200",
    "end": "3868160"
  },
  {
    "text": "run an instruction I'm talking about running an effect um but really what's Happening Here is a giant Tri finally",
    "start": "3868160",
    "end": "3874119"
  },
  {
    "text": "Loop or trif finally uh execution here um and inside here there's the",
    "start": "3874119",
    "end": "3883520"
  },
  {
    "text": "while loop that Mike referred to that basically checks the uh the",
    "start": "3883520",
    "end": "3890119"
  },
  {
    "text": "current um like what what's going on with the current effect and then then we have a separate",
    "start": "3890119",
    "end": "3897839"
  },
  {
    "text": "do while loop in here there an operation count as you see that tracks the count",
    "start": "3897839",
    "end": "3904520"
  },
  {
    "text": "of Ops that are actually ongoing and performs at least one effect and then",
    "start": "3904520",
    "end": "3909599"
  },
  {
    "text": "continues while the current effect is null and this Doh Loop in here is actually where we",
    "start": "3909599",
    "end": "3915359"
  },
  {
    "text": "evaluate the different instructions and what to do with them so you can you can",
    "start": "3915359",
    "end": "3920920"
  },
  {
    "text": "kind of get an idea of you know like Mike was saying there is kind of like an",
    "start": "3920920",
    "end": "3927200"
  },
  {
    "text": "interpreter here where we're taking an effect in and we're interpreting what to actually do with that effect and then",
    "start": "3927200",
    "end": "3932520"
  },
  {
    "text": "after a certain set of operations we yield that fiber to other fibers that might need to execute uh in the runtime",
    "start": "3932520",
    "end": "3940279"
  },
  {
    "text": "um and we track and again all this dat is tracked by the that specific fiber um so we still have a lot of work",
    "start": "3940279",
    "end": "3948720"
  },
  {
    "text": "to do on our uh on our implementation here um but there are a lot of um",
    "start": "3948720",
    "end": "3954039"
  },
  {
    "text": "interesting pieces already in our system next branch that we're very excited uh to get out there for people to test so I",
    "start": "3954039",
    "end": "3961920"
  },
  {
    "text": "guess this is to prove that every functional system is built on a imperative",
    "start": "3961920",
    "end": "3967240"
  },
  {
    "text": "system that is the proof and then actually one they have any go-to statements and labels hidden in here as",
    "start": "3967240",
    "end": "3975000"
  },
  {
    "text": "well no but there are two there are two Tri Tri blocks so the the outer Tri",
    "start": "3975000",
    "end": "3981359"
  },
  {
    "text": "block is really to um figure out like what to actually do in the case that",
    "start": "3981359",
    "end": "3987359"
  },
  {
    "text": "anything in the inside the execution actually fails and the inner Tri block",
    "start": "3987359",
    "end": "3992559"
  },
  {
    "text": "is what is interpreting the effects and in the case of any uh specific types of",
    "start": "3992559",
    "end": "3998680"
  },
  {
    "text": "failures we may um do certain things um and then we obviously have the like",
    "start": "3998680",
    "end": "4004200"
  },
  {
    "text": "catchall situation where we would use the actual runtime to determine if the",
    "start": "4004200",
    "end": "4009760"
  },
  {
    "text": "error that was thrown is fatal and if it is report it um and do something with it",
    "start": "4009760",
    "end": "4014920"
  },
  {
    "text": "at the moment this is totally incomplete but uh yeah we still haven't figured out if this is going to stay around in our",
    "start": "4014920",
    "end": "4021599"
  },
  {
    "text": "implementation or not got it and and and here the the second key point you you've",
    "start": "4021599",
    "end": "4027720"
  },
  {
    "text": "seen it mentioned Interruption there is a there is a tricky bit which is okay if I have",
    "start": "4027720",
    "end": "4037039"
  },
  {
    "text": "something that triggers an interruption that's not the last operation that should run on the fiber",
    "start": "4037039",
    "end": "4044559"
  },
  {
    "text": "because you should steal run the interruption operations what happens as an effect of running the interruption",
    "start": "4044559",
    "end": "4051119"
  },
  {
    "text": "what do you need to clean up the interruption itself cannot be",
    "start": "4051119",
    "end": "4056200"
  },
  {
    "text": "interrupted so that's one of the reason of those nested Loops catching and and",
    "start": "4056200",
    "end": "4064400"
  },
  {
    "text": "again is that's very impressive so uh yeah heads off to to Mike and and and",
    "start": "4064400",
    "end": "4072920"
  },
  {
    "text": "also especially Max is's like considerably newer to this entire ecosystem is now like battling with this",
    "start": "4072920",
    "end": "4080640"
  },
  {
    "text": "uh end boss here so uh that's that's really impressive I'm I'm looking forward to get my hands on this probably",
    "start": "4080640",
    "end": "4087480"
  },
  {
    "text": "mostly from a using using and get your benefit from from it perspective than uh",
    "start": "4087480",
    "end": "4093680"
  },
  {
    "text": "than I'm digging into this myself and and and writing anything here but um I",
    "start": "4093680",
    "end": "4101359"
  },
  {
    "text": "yeah this this feels much more approachable now um given um what we've learned over the last hour uh with the",
    "start": "4101359",
    "end": "4109238"
  },
  {
    "text": "The Fairly like simple mental model that that Mike has um has motivated initially",
    "start": "4109239",
    "end": "4114600"
  },
  {
    "text": "with of like a DSL of various operations and that this is basically just a a very",
    "start": "4114600",
    "end": "4121560"
  },
  {
    "text": "sophisticated and Powerful interpreter and yeah that makes sense to me now how",
    "start": "4121560",
    "end": "4126838"
  },
  {
    "text": "these other building blocks can build on top of it so yeah really fascinating uh",
    "start": "4126839",
    "end": "4132159"
  },
  {
    "text": "and I think hopefully this video will be a good resource for others who are like",
    "start": "4132159",
    "end": "4137278"
  },
  {
    "text": "like me or Harry just curious about what this what this is about and uh can can",
    "start": "4137279",
    "end": "4143278"
  },
  {
    "text": "learn about it this way so um yeah I think we're we're closing in on time um",
    "start": "4143279",
    "end": "4150719"
  },
  {
    "text": "but yeah absolutely go ahead so since you define this interdependent computation and hand it off to whatever",
    "start": "4150719",
    "end": "4157480"
  },
  {
    "text": "the runtime implementation does that mean that someone can define a program",
    "start": "4157480",
    "end": "4162798"
  },
  {
    "text": "with effect and then benefit from future updates their program will become",
    "start": "4162799",
    "end": "4168040"
  },
  {
    "text": "more performant potentially when you make changes to The Interpreter any anytime we touch The",
    "start": "4168040",
    "end": "4174719"
  },
  {
    "text": "Interpreter at the low level there is a huge change in in both behave can be a",
    "start": "4174719",
    "end": "4181838"
  },
  {
    "text": "huge change in both behavior and performance for example you can see one",
    "start": "4181839",
    "end": "4187838"
  },
  {
    "text": "of the if max if you reshare the screen for just a second yeah sure hang on one second I move this window",
    "start": "4187839",
    "end": "4197000"
  },
  {
    "text": "screen CU let let's see for example here just open up the the inner loop and go",
    "start": "4199480",
    "end": "4204520"
  },
  {
    "text": "for example to a succeed or something like that uh",
    "start": "4204520",
    "end": "4210920"
  },
  {
    "text": "above the acid one okay for example s hang on let me go to the",
    "start": "4210920",
    "end": "4216440"
  },
  {
    "text": "actual uh succeed operation no that's okay I don't I don't",
    "start": "4216440",
    "end": "4223320"
  },
  {
    "text": "need all of them um no I actually want to see the the nested one the one inside",
    "start": "4223320",
    "end": "4228880"
  },
  {
    "text": "the flat map okay so here you see for example in",
    "start": "4228880",
    "end": "4234880"
  },
  {
    "text": "line",
    "start": "4234880",
    "end": "4237880"
  },
  {
    "text": "1,225 this line has a t. parse nested do",
    "start": "4240000",
    "end": "4245520"
  },
  {
    "text": "Trace here we are parsing the trace which is a string to a more complex",
    "start": "4245520",
    "end": "4251679"
  },
  {
    "text": "structure removing this line or actually improving this line removing the parsing at all will be",
    "start": "4251679",
    "end": "4258760"
  },
  {
    "text": "probably a 10% Improvement on speed which is something I was planning",
    "start": "4258760",
    "end": "4264080"
  },
  {
    "text": "to tell you after but given given that that Harry back back the question",
    "start": "4264080",
    "end": "4271040"
  },
  {
    "text": "anytime you touch a small piece here you gain from performance Improvement or if",
    "start": "4271040",
    "end": "4277640"
  },
  {
    "text": "you do something dump you kill performance so there are a lot of",
    "start": "4277640",
    "end": "4283199"
  },
  {
    "text": "opportunities to um without somebody making any changes to their program",
    "start": "4283199",
    "end": "4289960"
  },
  {
    "text": "benefit from updates to effect that's really amazing yeah now now the the",
    "start": "4289960",
    "end": "4297360"
  },
  {
    "text": "marginal improvements it it gets smaller and smaller and smaller over time because this has been optimized over",
    "start": "4297360",
    "end": "4303760"
  },
  {
    "text": "over years of work in in zo but the same program from zo1 to",
    "start": "4303760",
    "end": "4310000"
  },
  {
    "text": "Z2 it's easier that literally the same piece of code would go to twice as fast",
    "start": "4310000",
    "end": "4316080"
  },
  {
    "text": "or three times as fast that's that's highly probable yeah I mean if you uh to",
    "start": "4316080",
    "end": "4321719"
  },
  {
    "text": "get just a quick idea of like this the massive performance improvements that The Zo guys have made on the fiber",
    "start": "4321719",
    "end": "4327600"
  },
  {
    "text": "context I you see how lean the state that we're tracking here is um previous",
    "start": "4327600",
    "end": "4332840"
  },
  {
    "text": "there's nothing allocated right there's barely anything allocated here like the only thing I think that we're you know",
    "start": "4332840",
    "end": "4338199"
  },
  {
    "text": "we're allocating like a state in a runtime config and maybe like a child set but like everything else we're kind",
    "start": "4338199",
    "end": "4343840"
  },
  {
    "text": "of trying to keep as much minimal uh information in memory for a fiber as possible um and if you look at the",
    "start": "4343840",
    "end": "4352600"
  },
  {
    "text": "initial implementation I have it here I want to make this bigger way bigger",
    "start": "4352600",
    "end": "4359639"
  },
  {
    "text": "yeah um the initial implementation of a fiber context had many different Stacks",
    "start": "4360320",
    "end": "4368120"
  },
  {
    "text": "that were used to track different pieces of information such as like the current supervisor for a fiber the",
    "start": "4368120",
    "end": "4375679"
  },
  {
    "text": "SC uh the um environment for fibers the traces the there were a bunch of",
    "start": "4375679",
    "end": "4382440"
  },
  {
    "text": "different Stacks that were being kept around for in a fiber and the really kind of brilliant move that the um zo",
    "start": "4382440",
    "end": "4391000"
  },
  {
    "text": "contributors have made on the Z in The Zo side is to move a lot of this",
    "start": "4391000",
    "end": "4396560"
  },
  {
    "text": "information into something called a fiber W which is a uh mutable uh not",
    "start": "4396560",
    "end": "4402440"
  },
  {
    "text": "mutable but like a reference to uh a particular piece of information that can",
    "start": "4402440",
    "end": "4407600"
  },
  {
    "text": "be shared across fibers um so for example like the current environment of",
    "start": "4407600",
    "end": "4413440"
  },
  {
    "text": "an executing effect we now track in a in a fiber ref as opposed to like in the",
    "start": "4413440",
    "end": "4418560"
  },
  {
    "text": "fiber itself same thing with things like the uh current Fork scope override or",
    "start": "4418560",
    "end": "4425360"
  },
  {
    "text": "the um uh the current loggers that are being executed things like that um and that",
    "start": "4425360",
    "end": "4433199"
  },
  {
    "text": "means for example if you're not using them that's not allocated if you're not using",
    "start": "4433199",
    "end": "4438360"
  },
  {
    "text": "override on Force scope that's not allocated and so on and so forth they",
    "start": "4438360",
    "end": "4443679"
  },
  {
    "text": "minimizes the state that is allocated inside the fiber and every time you",
    "start": "4443679",
    "end": "4449719"
  },
  {
    "text": "allocate it's literally time in",
    "start": "4449719",
    "end": "4454600"
  },
  {
    "text": "CPU so um yeah much much much leaner model of execution in the in the next in",
    "start": "4454920",
    "end": "4462400"
  },
  {
    "text": "the system next branch that hopefully we're getting closer and closer to something that people can actually test",
    "start": "4462400",
    "end": "4468760"
  },
  {
    "text": "out I think it would be cool actually before merging this to um build out a",
    "start": "4468760",
    "end": "4473960"
  },
  {
    "text": "little set of performance Benchmark tests and run it with a current version",
    "start": "4473960",
    "end": "4479040"
  },
  {
    "text": "and then also apply it to your new changes uh just to see like how much it is improved and that also is is a good",
    "start": "4479040",
    "end": "4486679"
  },
  {
    "text": "foundation to just see how how performance improves over time hopefully improves over time and I mean the the",
    "start": "4486679",
    "end": "4493520"
  },
  {
    "text": "that that that some of that work has has been done on The Zo side already uh obviously it's not directly comparable",
    "start": "4493520",
    "end": "4499800"
  },
  {
    "text": "with with our execution in in the JavaScript ecosystem but their micro benchmarks have improved drastically on",
    "start": "4499800",
    "end": "4507000"
  },
  {
    "text": "their 2.0 Branch um they've seen massive speed improvements with the new fiber",
    "start": "4507000",
    "end": "4512400"
  },
  {
    "text": "context so or or someone bought a new M1 in the meanwhile ex running on the same hardler",
    "start": "4512400",
    "end": "4520840"
  },
  {
    "text": "yeah so all right folks I I think this is where we should where we should wrap",
    "start": "4520840",
    "end": "4526480"
  },
  {
    "text": "it up um thanks so much this was really really insightful for me learned a lot",
    "start": "4526480",
    "end": "4532560"
  },
  {
    "text": "um solidified a couple of like other questions and and Concepts and uh yeah",
    "start": "4532560",
    "end": "4538760"
  },
  {
    "text": "makes me even more excited about using effect so uh thanks so much for for all of your time and um see you in two weeks",
    "start": "4538760",
    "end": "4546800"
  },
  {
    "text": "thank you everybody take care guys take care",
    "start": "4546800",
    "end": "4551440"
  },
  {
    "text": "cheers for",
    "start": "4553920",
    "end": "4557960"
  }
]