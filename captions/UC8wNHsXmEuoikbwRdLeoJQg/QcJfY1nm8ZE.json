[
  {
    "start": "0",
    "end": "200000"
  },
  {
    "text": "let's see the chat hi hi everybody hello hello",
    "start": "15599",
    "end": "23119"
  },
  {
    "text": "all right then i say let's kick it off if someone else uh wants to wants to",
    "start": "23760",
    "end": "29840"
  },
  {
    "text": "join um michael maybe you want to give me uh the rights in the maybe make me a",
    "start": "29840",
    "end": "35760"
  },
  {
    "text": "co-host that i can leave other but other people in yeah i'll try make cohorts",
    "start": "35760",
    "end": "41600"
  },
  {
    "text": "perfect yes okay all right i'll let other people in and um",
    "start": "41600",
    "end": "48160"
  },
  {
    "text": "i will do the overall moderation so you can focus on on your code editor um all right so yeah welcome everyone uh",
    "start": "48160",
    "end": "56640"
  },
  {
    "text": "this time uh i'm here again last uh last time two weeks ago i unfortunately",
    "start": "56640",
    "end": "63520"
  },
  {
    "text": "caught a cold and wasn't feeling quite like it but i'm glad to be back and glad to be",
    "start": "63520",
    "end": "71680"
  },
  {
    "text": "doing the session together with michael so uh this is kind of part two to the",
    "start": "71680",
    "end": "76720"
  },
  {
    "text": "session from last time where i wasn't there but to give a quick motivation again uh",
    "start": "76720",
    "end": "82080"
  },
  {
    "text": "what today's effect time session uh will be about uh which is we want to",
    "start": "82080",
    "end": "87600"
  },
  {
    "text": "demonstrate a bit of like how what it's like to um use effect to wrap some functionality",
    "start": "87600",
    "end": "96079"
  },
  {
    "text": "of like in this case node apis that you're probably familiar with and",
    "start": "96079",
    "end": "101439"
  },
  {
    "text": "build a little wrapper that makes it more re um more effect idiomatic and",
    "start": "101439",
    "end": "106880"
  },
  {
    "text": "therefore makes you more productive when eventually using it in your in your",
    "start": "106880",
    "end": "112159"
  },
  {
    "text": "own applications and packages and the like the hopeful side effect of that is",
    "start": "112159",
    "end": "119119"
  },
  {
    "text": "that we're generally like enhancing the standard library of effect and in this case i'm providing a lot of",
    "start": "119119",
    "end": "125280"
  },
  {
    "text": "functionality around the filesystem module but so i think there's like a lot of positive learnings there how you can",
    "start": "125280",
    "end": "132560"
  },
  {
    "text": "wrap things yourself learning about internals of effect and um i guess like while building it we",
    "start": "132560",
    "end": "140879"
  },
  {
    "text": "also see a bit of how we would use these packages and so the impetus for um for this",
    "start": "140879",
    "end": "146879"
  },
  {
    "text": "particular topic was that i've been using effect in a lot of",
    "start": "146879",
    "end": "151920"
  },
  {
    "text": "applications already and in a lot of them when i had to do something with the file system i ended up building my own",
    "start": "151920",
    "end": "158640"
  },
  {
    "text": "little file system wrapper and after copy and pasting the same code",
    "start": "158640",
    "end": "164800"
  },
  {
    "text": "between packages between applications i figured okay this probably should be in one of the",
    "start": "164800",
    "end": "172080"
  },
  {
    "text": "official effect packages and so i suggested this idea to michael",
    "start": "172080",
    "end": "177599"
  },
  {
    "text": "who um i i think got excited about this idea so here we are",
    "start": "177599",
    "end": "182959"
  },
  {
    "text": "part two and uh michael already guards got started in that the the last time",
    "start": "182959",
    "end": "188239"
  },
  {
    "text": "around so maybe mike if you want to give a quick uh recap on where we've left off um last",
    "start": "188239",
    "end": "195200"
  },
  {
    "text": "time and a quick idea of like what um we could expect to get done today",
    "start": "195200",
    "end": "201200"
  },
  {
    "start": "200000",
    "end": "401000"
  },
  {
    "text": "yeah absolutely so first of all during the the week i've changed a little bit the e master i've",
    "start": "201200",
    "end": "208720"
  },
  {
    "text": "updated to yarn three and so unfortunately we have to rebase today",
    "start": "208720",
    "end": "216000"
  },
  {
    "text": "given i've left the the branch precisely where where we've left off but the",
    "start": "216000",
    "end": "221599"
  },
  {
    "text": "general idea was inside the note package we can have a file system module",
    "start": "221599",
    "end": "227360"
  },
  {
    "text": "that works around interoperab interoperability with the",
    "start": "227360",
    "end": "233040"
  },
  {
    "text": "node with the node file system that from the perspective of the the user",
    "start": "233040",
    "end": "240959"
  },
  {
    "text": "should be testable so we've we spoke a little bit about",
    "start": "240959",
    "end": "246959"
  },
  {
    "text": "the stability of services and how to leverage the environment to achieve",
    "start": "246959",
    "end": "253360"
  },
  {
    "text": "a swappable implementation that you can you can use in your tests to provide",
    "start": "253360",
    "end": "260320"
  },
  {
    "text": "mod versions of or dummies of the of the implementations",
    "start": "260320",
    "end": "267280"
  },
  {
    "text": "and we have started to scaffold um the first function which was to",
    "start": "267280",
    "end": "274479"
  },
  {
    "text": "to write to a file now johannes have already a baseline",
    "start": "274479",
    "end": "282400"
  },
  {
    "text": "of code that we probably wanna port almost one by one but",
    "start": "282400",
    "end": "289520"
  },
  {
    "text": "thinking around like we did here in the right file we have started using the asynchronous",
    "start": "289520",
    "end": "296160"
  },
  {
    "text": "api and then we've realized we could use the abort controller controller to",
    "start": "296160",
    "end": "302800"
  },
  {
    "text": "handle the interruption signal correctly and do this sort of stuff",
    "start": "302800",
    "end": "309199"
  },
  {
    "text": "which by the way uh i think is one of uh the superpowers that effect gives you",
    "start": "309199",
    "end": "315120"
  },
  {
    "text": "where like and makes this this wrapper around the file system module even more",
    "start": "315120",
    "end": "320240"
  },
  {
    "text": "useful so i think yeah effect unlocks a lot of benefits and",
    "start": "320240",
    "end": "325919"
  },
  {
    "text": "automatic cancellation of of longer running operations i think is one of it",
    "start": "325919",
    "end": "331039"
  },
  {
    "text": "so this is makes the the the wrapper around the file system if it auto cancels on the board uh even",
    "start": "331039",
    "end": "338880"
  },
  {
    "text": "even more useful and powerful and uh might might be one of the reasons",
    "start": "338880",
    "end": "343919"
  },
  {
    "text": "why people move to effect",
    "start": "343919",
    "end": "347199"
  },
  {
    "text": "jesus all right you seem to have been having fun with with the market get merges",
    "start": "350160",
    "end": "356160"
  },
  {
    "text": "yeah i am having fun with beat mergers but it's most likely because i'm incapable",
    "start": "356160",
    "end": "361840"
  },
  {
    "text": "of using the tooling that",
    "start": "361840",
    "end": "368080"
  },
  {
    "text": "i am forcing myself to progressively use",
    "start": "368080",
    "end": "373919"
  },
  {
    "text": "okay that's guess you're almost there i guess i am",
    "start": "376400",
    "end": "384759"
  },
  {
    "text": "it seems okay yeah let's pray that everything works",
    "start": "394400",
    "end": "399680"
  },
  {
    "text": "almost and also to set expectations for this session we could probably do um",
    "start": "399680",
    "end": "406880"
  },
  {
    "start": "401000",
    "end": "557000"
  },
  {
    "text": "a bunch more sessions just around building the the file system wrapper for",
    "start": "406880",
    "end": "413280"
  },
  {
    "text": "um with an effect node but uh i guess after this session",
    "start": "413280",
    "end": "419280"
  },
  {
    "text": "uh we'll switch gears again for effect time for for the time being um we might",
    "start": "419280",
    "end": "424560"
  },
  {
    "text": "pick it up again in a public way a bit further down the road um and work will",
    "start": "424560",
    "end": "430560"
  },
  {
    "text": "continue i think regardless but i think leaving this at two sessions for",
    "start": "430560",
    "end": "436160"
  },
  {
    "text": "for now it's probably uh adequate but uh yeah and we will just get so much",
    "start": "436160",
    "end": "442560"
  },
  {
    "text": "done today as we'll get done i think there's a lot of exciting features that we could build into this um for example",
    "start": "442560",
    "end": "450479"
  },
  {
    "text": "uh building the building a variant of the the file system uh functions and with us with streaming",
    "start": "450479",
    "end": "458639"
  },
  {
    "text": "in mind i think could be really interesting um i think we could also think through okay like would would be",
    "start": "458639",
    "end": "466479"
  },
  {
    "text": "integrated with open telemetry in some way which is the way how i've used it so far",
    "start": "466479",
    "end": "471919"
  },
  {
    "text": "um and uh i guess this is another way uh general thing that we need to think",
    "start": "471919",
    "end": "477919"
  },
  {
    "text": "through do we want to provide these functions in a um trace",
    "start": "477919",
    "end": "483120"
  },
  {
    "text": "way out of the box or not i think this is something to more generally think through for now we'll probably keep it",
    "start": "483120",
    "end": "488800"
  },
  {
    "text": "simple but uh there yeah there's a lot to expand on here uh from",
    "start": "488800",
    "end": "494240"
  },
  {
    "text": "from the session onward absolutely so it seems that i am indeed",
    "start": "494240",
    "end": "500560"
  },
  {
    "text": "almost there i have to amend",
    "start": "500560",
    "end": "505720"
  },
  {
    "text": "it should be fine you are",
    "start": "508400",
    "end": "513919"
  },
  {
    "text": "all right um too cool to be null uh cool name by the way uh it's asking i saw zeo removing",
    "start": "517279",
    "end": "525040"
  },
  {
    "text": "has are there any plans to do the same in effect uh if i remember correctly there was uh like a few days ago a in",
    "start": "525040",
    "end": "533360"
  },
  {
    "text": "the effect discord and effect yes channel i think there was a conversation",
    "start": "533360",
    "end": "539200"
  },
  {
    "text": "around that topic so you can i can put a link in the chat if i ever find it",
    "start": "539200",
    "end": "546160"
  },
  {
    "text": "but i think the consensus was no for reasons that michael's probably in a",
    "start": "546160",
    "end": "551920"
  },
  {
    "text": "better position to explain absolutely so uh",
    "start": "551920",
    "end": "557360"
  },
  {
    "start": "557000",
    "end": "639000"
  },
  {
    "text": "but let's just keep it brief on that yeah absolutely absolutely very very brief",
    "start": "557360",
    "end": "562720"
  },
  {
    "text": "but the the key difference is in scala intersection type sky has a nominal type",
    "start": "562720",
    "end": "569120"
  },
  {
    "text": "system while typescript has a structural type system so in scala",
    "start": "569120",
    "end": "574720"
  },
  {
    "text": "a generic intersection of two nominal types doesn't collide",
    "start": "574720",
    "end": "580640"
  },
  {
    "text": "automatically if there are structural differences",
    "start": "580640",
    "end": "586160"
  },
  {
    "text": "now in typescript if we have any incompatibility between two services at the type level the intersection will be",
    "start": "586160",
    "end": "592399"
  },
  {
    "text": "never so we need a form of indexing from the actual",
    "start": "592399",
    "end": "598720"
  },
  {
    "text": "type to the fact that the type is within the environment",
    "start": "598720",
    "end": "604399"
  },
  {
    "text": "that is represented by has now we haven't settled fully on",
    "start": "604399",
    "end": "611440"
  },
  {
    "text": "on the structure of uh services there are like still a little bit of uh",
    "start": "611440",
    "end": "618880"
  },
  {
    "text": "of discussion around that because we are changing the encoding of hairs we have changed recently the encoding of",
    "start": "618880",
    "end": "625200"
  },
  {
    "text": "hairs but generally speaking uh i think we can't get rid of uh of anything in in",
    "start": "625200",
    "end": "631760"
  },
  {
    "text": "typescript automatically but we can keep the boilerplate",
    "start": "631760",
    "end": "636800"
  },
  {
    "text": "to the absolute minimum all right let's dig into the main topic so",
    "start": "636800",
    "end": "644959"
  },
  {
    "text": "where where did we leave off the last time if i understood correctly you've built a first",
    "start": "644959",
    "end": "651440"
  },
  {
    "text": "wrapper for write file uh with similar semantics as write file from",
    "start": "651440",
    "end": "657680"
  },
  {
    "text": "from fs and uh you've built a little logger kind of like",
    "start": "657680",
    "end": "663440"
  },
  {
    "text": "uh companion example app uh where you've leveraged us which obviously later we would um split up",
    "start": "663440",
    "end": "671200"
  },
  {
    "text": "but largely remove that yeah this was just an example that i've done in the in",
    "start": "671200",
    "end": "677200"
  },
  {
    "text": "the last minutes to show how dfs service would be used in an",
    "start": "677200",
    "end": "684240"
  },
  {
    "text": "application like but at this point i think we can erase that completely",
    "start": "684240",
    "end": "690480"
  },
  {
    "text": "right would you generally say um it's the the right way to model this to",
    "start": "690480",
    "end": "697440"
  },
  {
    "text": "turn the fs module in into a layer uh that they can access",
    "start": "697440",
    "end": "703920"
  },
  {
    "text": "the way how i've wrapped it so far was basically just as like normal functions or normal effects",
    "start": "703920",
    "end": "711519"
  },
  {
    "text": "that would just leverage the fs node module under the hood so could you",
    "start": "711519",
    "end": "717120"
  },
  {
    "text": "briefly elaborate on the benefits and potential downsides of modeling this as a layer yeah absolutely",
    "start": "717120",
    "end": "724000"
  },
  {
    "text": "so let's take an example of this loader how would you test this",
    "start": "724000",
    "end": "729360"
  },
  {
    "text": "this live implementation so from the perspective of the consumer of this lawyer module",
    "start": "729360",
    "end": "736959"
  },
  {
    "text": "you want to use the logger but you have to assess that this logger",
    "start": "736959",
    "end": "742000"
  },
  {
    "text": "correctly uses the file system right that's this implementation",
    "start": "742000",
    "end": "748720"
  },
  {
    "text": "so that you have to abstract the dfs",
    "start": "748720",
    "end": "753760"
  },
  {
    "text": "now such a standard thing in the in the node",
    "start": "753760",
    "end": "758800"
  },
  {
    "text": "environment could be provided by the body node runtime",
    "start": "758800",
    "end": "764720"
  },
  {
    "text": "which has a default environment right now the default environment has",
    "start": "764720",
    "end": "770560"
  },
  {
    "text": "the clock for example already and we could um yeah not has the random but in",
    "start": "770560",
    "end": "776480"
  },
  {
    "text": "general it will be expanded to have a console it will be expanded to have",
    "start": "776480",
    "end": "783279"
  },
  {
    "text": "yeah a little bit more and in the context of node we can have a file system yep",
    "start": "783279",
    "end": "788480"
  },
  {
    "text": "and and stuff like that so testability makes a lot of sense the downside would be that i need to like provide it exp",
    "start": "788480",
    "end": "795600"
  },
  {
    "text": "explicitly but that's downside is is again like uh nulled by um having it in the default node",
    "start": "795600",
    "end": "803040"
  },
  {
    "text": "environment by having a default node environment precisely right yep that makes that",
    "start": "803040",
    "end": "808399"
  },
  {
    "text": "makes a lot of sense great so what would you suggest as a general uh sort of a general pattern you",
    "start": "808399",
    "end": "815279"
  },
  {
    "text": "usually even in your in your application sometimes you want to rock things in",
    "start": "815279",
    "end": "821760"
  },
  {
    "text": "in environments for the sole reason of like having something taken from environment not",
    "start": "821760",
    "end": "828800"
  },
  {
    "text": "only uh well you abstract more the functionality",
    "start": "828800",
    "end": "836320"
  },
  {
    "text": "because no longer need to know about the dependencies of that functionality i just use a locker i don't care if the",
    "start": "836320",
    "end": "842560"
  },
  {
    "text": "logger is implemented with the file system or with a like with a kafka stream implementation",
    "start": "842560",
    "end": "849519"
  },
  {
    "text": "or with a printout to the console right it's one layer and one layer of more",
    "start": "849519",
    "end": "856959"
  },
  {
    "start": "856000",
    "end": "927000"
  },
  {
    "text": "good that sounds great um one uh one quick thought or just to understand it",
    "start": "856959",
    "end": "863440"
  },
  {
    "text": "properly in the case of this logger here which again is an example application of this now but",
    "start": "863440",
    "end": "869360"
  },
  {
    "text": "um the way how it works right now is like if we would use it somewhere in my",
    "start": "869360",
    "end": "874639"
  },
  {
    "text": "application and i would say log uh the way how it works right now is like that it's um like you'd have to",
    "start": "874639",
    "end": "881760"
  },
  {
    "text": "wait until the log is done the log here includes like the file is written right so it's not like written in the",
    "start": "881760",
    "end": "888320"
  },
  {
    "text": "background yeah i mean it's not how you would implement a file based logger yep it's a",
    "start": "888320",
    "end": "895440"
  },
  {
    "text": "completely different implementation the purpose was just to show how you would kind of make it make sense just just",
    "start": "895440",
    "end": "902320"
  },
  {
    "text": "wanted to clarify that right would you suggest super logger based implementation you would have a file",
    "start": "902320",
    "end": "909680"
  },
  {
    "text": "resource open at the beginning and any other call made to write on the open file",
    "start": "909680",
    "end": "916720"
  },
  {
    "text": "handle yep that makes sense you have to control the concurrency of that because if you use an asynchronous api",
    "start": "916720",
    "end": "922880"
  },
  {
    "text": "you could write two things concurrently on the same file that makes sense uh as next steps would you suggest we um",
    "start": "922880",
    "end": "930320"
  },
  {
    "start": "927000",
    "end": "1078000"
  },
  {
    "text": "basically go beyond the right file uh method and and go to to implement more",
    "start": "930320",
    "end": "935839"
  },
  {
    "text": "another thing that i think would be would be great to to expand on is to have a bit more like semantic errors",
    "start": "935839",
    "end": "943120"
  },
  {
    "text": "uh since this was one of the main benefits also i already got out of my my own wrapping",
    "start": "943120",
    "end": "948720"
  },
  {
    "text": "um so maybe you want in a temporary tab just like copy paste in",
    "start": "948720",
    "end": "954399"
  },
  {
    "text": "my little uh implementation of dfs module that we can just check it off one",
    "start": "954399",
    "end": "959839"
  },
  {
    "text": "by one um that we that we end up on some like a similarly",
    "start": "959839",
    "end": "965360"
  },
  {
    "text": "uh capable implementation later it's probably going to be a better implementation but at least in in terms",
    "start": "965360",
    "end": "970880"
  },
  {
    "text": "of the the functionality that we're uh aiming towards uh towards the",
    "start": "970880",
    "end": "976720"
  },
  {
    "text": "same coverage yeah let me take it",
    "start": "976720",
    "end": "983800"
  },
  {
    "text": "i think you can just create a new tab um and like you don't even need to save it as a file but yeah that works",
    "start": "995440",
    "end": "1003519"
  },
  {
    "text": "so yeah you don't need you don't need to fix it or or anything i think the the interesting bits is",
    "start": "1007759",
    "end": "1014639"
  },
  {
    "text": "um which kind of functions i've created for myself here and i don't feel too strongly about how how like which one",
    "start": "1014639",
    "end": "1022240"
  },
  {
    "text": "they are which one there aren't just gives you an idea and i've also like for example the stat error i i've like just",
    "start": "1022240",
    "end": "1029280"
  },
  {
    "text": "came up with um more or less semantic errors that i could then again use in my application",
    "start": "1029280",
    "end": "1036160"
  },
  {
    "text": "whereas i also think that these errors could be modeled um",
    "start": "1036160",
    "end": "1041438"
  },
  {
    "text": "in a much better way and there's there's been cases where it's already kind of like wondering okay is this is this the",
    "start": "1041439",
    "end": "1048079"
  },
  {
    "text": "right way or is that the right way for example if you you see the inline 155",
    "start": "1048079",
    "end": "1054160"
  },
  {
    "text": "you see file order uh not found arrow and you see a file note found error so",
    "start": "1054160",
    "end": "1059440"
  },
  {
    "text": "there is already i think there is going to be an interesting deliberation around how to structure",
    "start": "1059440",
    "end": "1066400"
  },
  {
    "text": "these errors how to unify them how to split them up etc yeah i think that's",
    "start": "1066400",
    "end": "1072720"
  },
  {
    "text": "that's very that's very interesting",
    "start": "1072720",
    "end": "1078080"
  },
  {
    "start": "1078000",
    "end": "1593000"
  },
  {
    "text": "but let's start from like one place and make maybe the maybe before adding more",
    "start": "1078160",
    "end": "1083520"
  },
  {
    "text": "functionality maybe we want to create the semantic error for write file",
    "start": "1083520",
    "end": "1089440"
  },
  {
    "text": "absolutely because uh actually that there is always already a small wrapper around",
    "start": "1090160",
    "end": "1098080"
  },
  {
    "text": "but i think we have to improve on that",
    "start": "1098080",
    "end": "1103039"
  },
  {
    "text": "now i'd like to create some sort of tagging function",
    "start": "1105440",
    "end": "1112240"
  },
  {
    "text": "given we're gonna have a lot of tags to rate to not have the",
    "start": "1112240",
    "end": "1118240"
  },
  {
    "text": "like be specifying the graphics all the time",
    "start": "1118240",
    "end": "1123200"
  },
  {
    "text": "let me try to to do that",
    "start": "1125280",
    "end": "1130000"
  },
  {
    "text": "[Music] so just while you write it i i i'll like",
    "start": "1131870",
    "end": "1138000"
  },
  {
    "text": "explain what i thought uh what you just said which is basically in line 10 here",
    "start": "1138000",
    "end": "1143200"
  },
  {
    "text": "where we have the export class or exception um we're gonna have like a lot of these",
    "start": "1143200",
    "end": "1148799"
  },
  {
    "text": "tagged classes uh and so to avoid boilerplate you're",
    "start": "1148799",
    "end": "1154000"
  },
  {
    "text": "already like in your mind racing ahead and like doing the reflector that you might like",
    "start": "1154000",
    "end": "1159919"
  },
  {
    "text": "going three two three steps ahead we've got it yeah i've seen too many prefixes",
    "start": "1159919",
    "end": "1166000"
  },
  {
    "text": "already yeah but lucky for us",
    "start": "1166000",
    "end": "1171600"
  },
  {
    "text": "typescript turns out i i guess for you building an application and building a library is starting to to blend to be",
    "start": "1171600",
    "end": "1179360"
  },
  {
    "text": "the same thing with the fact there is no difference yeah that's the funny",
    "start": "1179360",
    "end": "1184559"
  },
  {
    "text": "thing it makes no no difference whatsoever now when i do language level stuff that's different",
    "start": "1184559",
    "end": "1190559"
  },
  {
    "text": "but unless that's not what today is about yeah it's not what today is about",
    "start": "1190559",
    "end": "1196080"
  },
  {
    "text": "it's gonna quickly become that but anyway okay",
    "start": "1196080",
    "end": "1203160"
  },
  {
    "text": "okay seems decent",
    "start": "1206159",
    "end": "1211360"
  },
  {
    "text": "all right",
    "start": "1211360",
    "end": "1214520"
  },
  {
    "text": "not that it's needed anyway why doesn't what performance",
    "start": "1225120",
    "end": "1231400"
  },
  {
    "text": "[Music] yeah yes wait a second",
    "start": "1238570",
    "end": "1244640"
  },
  {
    "text": "have i disabled",
    "start": "1244640",
    "end": "1248039"
  },
  {
    "text": "yeah okay the reason is i was working on the",
    "start": "1255600",
    "end": "1262159"
  },
  {
    "text": "compiler and uh i'm dealing with 40 k plus lines source codes and es link is",
    "start": "1262159",
    "end": "1270960"
  },
  {
    "text": "right a nightmare",
    "start": "1270960",
    "end": "1274919"
  },
  {
    "text": "good all right",
    "start": "1280080",
    "end": "1287159"
  },
  {
    "text": "seems reasonable",
    "start": "1321360",
    "end": "1324640"
  },
  {
    "text": "all right now we have nicely namespaced errors that are always later on when they",
    "start": "1329039",
    "end": "1336320"
  },
  {
    "text": "will be will be thrown then we always see okay this is coming from from my effect yes node file system",
    "start": "1336320",
    "end": "1342640"
  },
  {
    "text": "great so this is a write file exception so let's let's start to use proper name",
    "start": "1342640",
    "end": "1350880"
  },
  {
    "text": "right",
    "start": "1350880",
    "end": "1353280"
  },
  {
    "text": "let's put that all right yeah let's put it in here",
    "start": "1356320",
    "end": "1366120"
  },
  {
    "text": "[Music]",
    "start": "1367280",
    "end": "1370839"
  },
  {
    "text": "the type of options kind of sucks",
    "start": "1377600",
    "end": "1382000"
  },
  {
    "text": "yeah it's a i think it's a question of like how",
    "start": "1384400",
    "end": "1390559"
  },
  {
    "text": "um whether we want to diverge or diverge from the the way how",
    "start": "1390559",
    "end": "1396799"
  },
  {
    "text": "i you mean like from a purely typescript perspective not how the the mod the options are modeled",
    "start": "1396799",
    "end": "1403840"
  },
  {
    "text": "sort of [Music]",
    "start": "1403840",
    "end": "1409400"
  },
  {
    "text": "you have like your your secret bag of of types i don't understand why this",
    "start": "1424080",
    "end": "1431440"
  },
  {
    "text": "doesn't doesn't flood it out yeah let's let's maybe keep it keep a note here and like uh come back to that later uh so we",
    "start": "1431440",
    "end": "1439039"
  },
  {
    "text": "can can move on uh with the the actual implementation",
    "start": "1439039",
    "end": "1445159"
  },
  {
    "text": "yeah sorry to prevent your perfectionism here",
    "start": "1451919",
    "end": "1458640"
  },
  {
    "text": "uh it's always like very well the point is these options i think are object",
    "start": "1458640",
    "end": "1464720"
  },
  {
    "text": "encoding mod flag we're gonna have to reuse it in different places so let's",
    "start": "1464720",
    "end": "1472640"
  },
  {
    "text": "different all right um the first one extract the type i list",
    "start": "1475279",
    "end": "1481200"
  },
  {
    "text": "yeah i don't want to type alias but an interface",
    "start": "1481279",
    "end": "1487720"
  },
  {
    "text": "for the audience who might not be aware of like why interface instead of uh",
    "start": "1489279",
    "end": "1494960"
  },
  {
    "text": "and type alias something i learned myself as well is that um like",
    "start": "1494960",
    "end": "1500640"
  },
  {
    "text": "they they behave very similar um but interface here has one benefit that we",
    "start": "1500640",
    "end": "1506080"
  },
  {
    "text": "are interested in which is that if you hover over it it you",
    "start": "1506080",
    "end": "1511440"
  },
  {
    "text": "see like in the language server and envious code that says uh write file options",
    "start": "1511440",
    "end": "1518000"
  },
  {
    "text": "uh instead of like uh the the thing that it's like alias two",
    "start": "1518000",
    "end": "1523039"
  },
  {
    "text": "so instead of seeing this uh intersection of like fs options blah",
    "start": "1523039",
    "end": "1529200"
  },
  {
    "text": "blah and so that's called an opaque type as opposed to a transparent type what type",
    "start": "1529200",
    "end": "1536000"
  },
  {
    "text": "aliases are so in here it has basically we give it more",
    "start": "1536000",
    "end": "1541039"
  },
  {
    "text": "semantic meaning by using an interface so that's more recognizable and that's i",
    "start": "1541039",
    "end": "1546400"
  },
  {
    "text": "guess why why michael is using it here yeah now we see the",
    "start": "1546400",
    "end": "1553120"
  },
  {
    "text": "perfect far better signature all right then",
    "start": "1553120",
    "end": "1558720"
  },
  {
    "text": "let's uh should we like do so write file errors that's very um",
    "start": "1558720",
    "end": "1565919"
  },
  {
    "text": "broad so for example what i've done is uh already try to like make it",
    "start": "1565919",
    "end": "1571039"
  },
  {
    "text": "semantically um a little bit more more uh granular um by also having like",
    "start": "1571039",
    "end": "1577919"
  },
  {
    "text": "a um a file not found error which is a very common case um would you",
    "start": "1577919",
    "end": "1584880"
  },
  {
    "text": "would you agree that this would be like a useful distinction to make in the error case here already or what are they",
    "start": "1584880",
    "end": "1591600"
  },
  {
    "text": "thinking i think this [Music]",
    "start": "1591600",
    "end": "1597520"
  },
  {
    "start": "1593000",
    "end": "1700000"
  },
  {
    "text": "degrees i think this is if this is to be the note a fs wrapper",
    "start": "1597520",
    "end": "1605279"
  },
  {
    "text": "i would want things close to how to represent",
    "start": "1605279",
    "end": "1610400"
  },
  {
    "text": "stuff just to provide enough low level right but i think i was",
    "start": "1610400",
    "end": "1615919"
  },
  {
    "text": "like it's an idea i've got actually from the internals of the compiler in typescript",
    "start": "1615919",
    "end": "1622799"
  },
  {
    "text": "how they abstract the concept of a host they don't directly access the file system but they",
    "start": "1622799",
    "end": "1630559"
  },
  {
    "text": "access it through a host [Music] maybe",
    "start": "1630559",
    "end": "1635600"
  },
  {
    "text": "a host which is like a virtual machine that might be backed by writing files or stuff like that but it",
    "start": "1635600",
    "end": "1642960"
  },
  {
    "text": "could be a database or could be anything else right be a valuable thing and for that i would make more oh",
    "start": "1642960",
    "end": "1650559"
  },
  {
    "text": "yeah totally granular totally like yeah one of the one of the apps i'm working on uh is",
    "start": "1650559",
    "end": "1658559"
  },
  {
    "text": "uh there there were also like we've built the first version with the file system um",
    "start": "1658559",
    "end": "1664399"
  },
  {
    "text": "and later on we realized okay we also want to run it in the browser or for testing like in a virtual way so we've",
    "start": "1664399",
    "end": "1671840"
  },
  {
    "text": "come up with a wrapper ourselves that sort of like virtualizes the the file system where we either have like in",
    "start": "1671840",
    "end": "1677840"
  },
  {
    "text": "memory file system or like a actual like um file file based system",
    "start": "1677840",
    "end": "1684640"
  },
  {
    "text": "um and uh yeah i think that that sounds very valuable but um",
    "start": "1684640",
    "end": "1690399"
  },
  {
    "text": "yeah i think that's a great idea for the future so that means we we leave the error esses",
    "start": "1690399",
    "end": "1697039"
  },
  {
    "text": "and yes sounds good uh but we might",
    "start": "1697039",
    "end": "1703279"
  },
  {
    "start": "1700000",
    "end": "1824000"
  },
  {
    "text": "i mean a more composed function might have like maybe not the union of two errors",
    "start": "1703279",
    "end": "1710320"
  },
  {
    "text": "and we might create a proper description of",
    "start": "1710320",
    "end": "1715520"
  },
  {
    "text": "a more complex operation like an append to file if the file doesn't exist",
    "start": "1715520",
    "end": "1721200"
  },
  {
    "text": "i'm not not really sure anyway we are i think writing to five it's a good moment to",
    "start": "1721200",
    "end": "1726799"
  },
  {
    "text": "also read from piles that sounds like a good idea yeah i mean",
    "start": "1726799",
    "end": "1732640"
  },
  {
    "text": "they seems to be very very busy types of things and one one thing we should mention here",
    "start": "1732640",
    "end": "1739840"
  },
  {
    "text": "file system in node means different things at the moment we are using uh the asynchronous api",
    "start": "1741360",
    "end": "1749039"
  },
  {
    "text": "but we might use lower level apis for example in a in a read file there's",
    "start": "1749039",
    "end": "1755840"
  },
  {
    "text": "many ways to read the file the async way which is one of the most inefficient",
    "start": "1755840",
    "end": "1761919"
  },
  {
    "text": "or there is just opening up the file descriptor and read by batches in watches at buffer",
    "start": "1761919",
    "end": "1769039"
  },
  {
    "text": "level [Music] that is very efficient uh and",
    "start": "1769039",
    "end": "1774159"
  },
  {
    "text": "most likely in that model also plays really well with streams because are a full base",
    "start": "1774159",
    "end": "1782720"
  },
  {
    "text": "mechanism so a stream which is backed by the lower level",
    "start": "1782720",
    "end": "1788000"
  },
  {
    "text": "api of node would effectively just read",
    "start": "1788000",
    "end": "1793679"
  },
  {
    "text": "a chunk of data from a file when it's explicitly required by",
    "start": "1793679",
    "end": "1799360"
  },
  {
    "text": "by the caller and won't have any any sort of cueing or or anything in between so",
    "start": "1799360",
    "end": "1806120"
  },
  {
    "text": "performance-wise would be extremely extremely bad that sounds great let's",
    "start": "1806120",
    "end": "1811440"
  },
  {
    "text": "see whether towards the end of the session we have a little bit of time left to start uh digging into that",
    "start": "1811440",
    "end": "1818720"
  },
  {
    "text": "yep all right",
    "start": "1818799",
    "end": "1823840"
  },
  {
    "start": "1824000",
    "end": "1871000"
  },
  {
    "text": "so as as the last time when when you're building wrappers around javascript libraries and if you're using",
    "start": "1824000",
    "end": "1831679"
  },
  {
    "text": "effect it's something you're gonna end up doing",
    "start": "1831679",
    "end": "1835919"
  },
  {
    "text": "now we have to pioneer a bunch of stuff but i i think like in in a year or two you might probably already have uh",
    "start": "1836960",
    "end": "1843919"
  },
  {
    "text": "wrappers for for most of the stuff you're looking for much of the stuff you're looking for",
    "start": "1843919",
    "end": "1849840"
  },
  {
    "text": "yeah but still it's not takes a while anyway",
    "start": "1849840",
    "end": "1855600"
  },
  {
    "text": "uh we take a look at the uh the function description and we just begin by cloning",
    "start": "1855600",
    "end": "1862720"
  },
  {
    "text": "the signature it's an abortable so same structure as",
    "start": "1862720",
    "end": "1870639"
  },
  {
    "text": "as the right file",
    "start": "1871440",
    "end": "1874480"
  },
  {
    "text": "nice do we want to keep it in the make live fs um callback or do we want",
    "start": "1876840",
    "end": "1883519"
  },
  {
    "text": "to maybe move it out to happen [Music]",
    "start": "1883519",
    "end": "1888799"
  },
  {
    "text": "at bootstrap time when you're providing the first layer [Music]",
    "start": "1888799",
    "end": "1894320"
  },
  {
    "text": "doesn't really",
    "start": "1894320",
    "end": "1897039"
  },
  {
    "text": "it's actually very common it's a very common factor and that you're doing this within an effect now i'm doing this",
    "start": "1900080",
    "end": "1907120"
  },
  {
    "text": "within a succeed with because this doesn't depend on anything else but you might want to use generators",
    "start": "1907120",
    "end": "1914799"
  },
  {
    "text": "or maybe in six months time the do notations right anyway",
    "start": "1914799",
    "end": "1921200"
  },
  {
    "text": "uh arguments good",
    "start": "1921200",
    "end": "1926320"
  },
  {
    "text": "those are the arguments to start with they're terrible but fs",
    "start": "1926320",
    "end": "1934320"
  },
  {
    "text": "not good abortable we don't want the avertable",
    "start": "1934320",
    "end": "1941679"
  },
  {
    "text": "and this type is simple",
    "start": "1941760",
    "end": "1947080"
  },
  {
    "text": "in sonic it that seems better i'll make an interface",
    "start": "1948080",
    "end": "1957679"
  },
  {
    "text": "and you can still use the refactor tooling um if you focus it to",
    "start": "1958159",
    "end": "1965120"
  },
  {
    "text": "extract as type alias and then just rename it yeah at least i can actually extract even to an interface",
    "start": "1965279",
    "end": "1972720"
  },
  {
    "text": "ah there you go perfect however i think that's not in the wrong scope",
    "start": "1972720",
    "end": "1977840"
  },
  {
    "text": "yeah it doesn't matter i move it out uh read five options but i'm still not sure",
    "start": "1977840",
    "end": "1985760"
  },
  {
    "text": "about something because in the right file",
    "start": "1985760",
    "end": "1991799"
  },
  {
    "text": "uh we don't really care about the output the output is void",
    "start": "1991840",
    "end": "1996960"
  },
  {
    "text": "right in this case read file here i'm specifying encoding",
    "start": "1996960",
    "end": "2002320"
  },
  {
    "text": "we might want to have different overloads rather than different overloads i think",
    "start": "2002320",
    "end": "2008080"
  },
  {
    "text": "they could even be different functions at some at some level right or have some some meaning i i guess it",
    "start": "2008080",
    "end": "2015519"
  },
  {
    "text": "depends on like how close we want to stay to the original api um i think that's simply a bad way to",
    "start": "2015519",
    "end": "2022960"
  },
  {
    "text": "represent things so i i wouldn't i think part of building a wrapper",
    "start": "2022960",
    "end": "2028000"
  },
  {
    "text": "is just not to proxy the api but to build a common sense right",
    "start": "2028000",
    "end": "2033760"
  },
  {
    "text": "yeah i think additive uh change like just exposing an additional thing is probably um",
    "start": "2033760",
    "end": "2040159"
  },
  {
    "text": "less uh less opinionated uh than than just changing the api",
    "start": "2040159",
    "end": "2047840"
  },
  {
    "start": "2048000",
    "end": "2190000"
  },
  {
    "text": "let's see anyway where where we need",
    "start": "2049119",
    "end": "2053919"
  },
  {
    "text": "it's a read file i have a buff up options",
    "start": "2054480",
    "end": "2061118"
  },
  {
    "text": "body options i do want to do the same thing as here",
    "start": "2061119",
    "end": "2066158"
  },
  {
    "text": "and the callback i don't have to provide",
    "start": "2070079",
    "end": "2077280"
  },
  {
    "text": "now that seems to to return always always a buffer",
    "start": "2081919",
    "end": "2088599"
  },
  {
    "text": "i think depends on the on the encoding if the encoding is utf-8",
    "start": "2091599",
    "end": "2097280"
  },
  {
    "text": "then i think it returns a [Music] string signature doesn't",
    "start": "2097280",
    "end": "2104960"
  },
  {
    "text": "buffer and coin yeah but you see like you're looking at different",
    "start": "2108000",
    "end": "2113359"
  },
  {
    "text": "overloads here data stream oh i'm looking at different overloads",
    "start": "2113359",
    "end": "2121040"
  },
  {
    "text": "that's gonna be fun but maybe it's already now is the good time where we like per overload we",
    "start": "2122320",
    "end": "2129440"
  },
  {
    "text": "create a different variant keep it simple for now and uh who might unify this later if we",
    "start": "2129440",
    "end": "2136640"
  },
  {
    "text": "uh if we like long for that it starts with the one that returns a buffer yep",
    "start": "2136640",
    "end": "2143520"
  },
  {
    "text": "i i've also already in my in my use cases i've created variants and i've had",
    "start": "2143520",
    "end": "2148800"
  },
  {
    "text": "ones like read file as buffer and one is read file string so i've already done",
    "start": "2148800",
    "end": "2154000"
  },
  {
    "text": "the what are those flags uh",
    "start": "2154000",
    "end": "2159359"
  },
  {
    "text": "i think these flags are um i've",
    "start": "2159359",
    "end": "2164800"
  },
  {
    "text": "super rarely used them but i think it's like on a lit on a file level",
    "start": "2164800",
    "end": "2172079"
  },
  {
    "text": "forced to read okay it's that okay they can stay",
    "start": "2172079",
    "end": "2178960"
  },
  {
    "text": "so i think realistically we only want to take the the null actually we don't want to take",
    "start": "2178960",
    "end": "2184880"
  },
  {
    "text": "an encoding at all",
    "start": "2184880",
    "end": "2187838"
  },
  {
    "start": "2190000",
    "end": "2437000"
  },
  {
    "text": "so that's only flags which i think it's also okay to like",
    "start": "2190560",
    "end": "2196880"
  },
  {
    "text": "leave some some holes in like the the coverage for now and",
    "start": "2196880",
    "end": "2202320"
  },
  {
    "text": "um yeah",
    "start": "2202320",
    "end": "2205040"
  },
  {
    "text": "like the vlogs either are there or are not and that's pretty much it",
    "start": "2208640",
    "end": "2215838"
  },
  {
    "text": "uh for everyone uh watching uh in in zoom as well uh feel free to ask any",
    "start": "2217680",
    "end": "2223280"
  },
  {
    "text": "questions at any time uh i think sometimes also the the motivating questions are are interesting",
    "start": "2223280",
    "end": "2230320"
  },
  {
    "text": "so why we do a certain thing uh in a certain way or have we considered x so feel free to",
    "start": "2230320",
    "end": "2237520"
  },
  {
    "text": "like just ask a question in the chat and i'll i'll weave it in",
    "start": "2237520",
    "end": "2243838"
  },
  {
    "text": "let's start from here we want just a whole",
    "start": "2248720",
    "end": "2256920"
  },
  {
    "text": "i read file error",
    "start": "2258800",
    "end": "2262680"
  },
  {
    "text": "[Music]",
    "start": "2272200",
    "end": "2278240"
  },
  {
    "text": "for example one one thing we might want to do is to propagate the arguments into the error",
    "start": "2278240",
    "end": "2284640"
  },
  {
    "text": "so there are easily totally uh i think and yep",
    "start": "2284640",
    "end": "2290320"
  },
  {
    "text": "let's go on that's been one of the most useful things um on my like",
    "start": "2290320",
    "end": "2296880"
  },
  {
    "text": "yeah on my own wrapper of the file system module especially together with open telemetry",
    "start": "2296880",
    "end": "2304160"
  },
  {
    "text": "where like in the open telemetry traces therefore i would see the the error meta arguments uh such as",
    "start": "2304160",
    "end": "2312000"
  },
  {
    "text": "encoding or more often like most useful as the file path",
    "start": "2312000",
    "end": "2318640"
  },
  {
    "text": "yeah i mean the the whole idea of type errors and it's actually one of the cases where our developer development",
    "start": "2325200",
    "end": "2333119"
  },
  {
    "text": "experience is far better than the scala ones at the moment is that arrows can be extremely granular and can contain a lot",
    "start": "2333119",
    "end": "2340079"
  },
  {
    "text": "of information about what went wrong and it's it's really nice when when your",
    "start": "2340079",
    "end": "2345760"
  },
  {
    "text": "application scales up the types if you don't use proper opaque",
    "start": "2345760",
    "end": "2351839"
  },
  {
    "text": "types becomes a nightmare because you're gonna have to grow a lot of environments and a lot of errors",
    "start": "2351839",
    "end": "2358400"
  },
  {
    "text": "but overall if you if you keep them under control it's really it scales really nicely",
    "start": "2358400",
    "end": "2364400"
  },
  {
    "text": "right like really recap are we beating here one",
    "start": "2364400",
    "end": "2369440"
  },
  {
    "text": "more time opaque arrows means using interfaces for your",
    "start": "2369440",
    "end": "2374560"
  },
  {
    "text": "for your errors and you can also interface with summarize them like that yeah interfaces or classes generally",
    "start": "2374560",
    "end": "2382560"
  },
  {
    "text": "here we are using classes because as as you see",
    "start": "2382560",
    "end": "2388560"
  },
  {
    "text": "we have base tagged constructors for base classes that we can easily",
    "start": "2388560",
    "end": "2395040"
  },
  {
    "text": "compose into more complex i'm i'm generally rather skeptical of classes in in javascript and typescript",
    "start": "2395040",
    "end": "2402000"
  },
  {
    "text": "however they have one major benefit um which is that their type and a term",
    "start": "2402000",
    "end": "2407680"
  },
  {
    "text": "at the same time so and that's very useful so that means we can use them in",
    "start": "2407680",
    "end": "2413520"
  },
  {
    "text": "type uh and in type annotations and import them purely as a type but you",
    "start": "2413520",
    "end": "2418880"
  },
  {
    "text": "can also import them as something that is important for the runtime",
    "start": "2418880",
    "end": "2424319"
  },
  {
    "text": "and yeah so that was just not super clear for me why effect makes use of some",
    "start": "2424319",
    "end": "2430640"
  },
  {
    "text": "some classes in some cases but that's i think one major reason for that",
    "start": "2430640",
    "end": "2437359"
  },
  {
    "start": "2437000",
    "end": "2795000"
  },
  {
    "text": "anyway it seems we have it all right wonderful so let's return that",
    "start": "2437599",
    "end": "2445200"
  },
  {
    "text": "nice nice nice nice all right let's add the derivation",
    "start": "2446560",
    "end": "2455119"
  },
  {
    "text": "and uh if you're the audience if you're like me and you're like a bit intimidated by",
    "start": "2455119",
    "end": "2460960"
  },
  {
    "text": "the t derive lifted etc uh just like see them as patterns that",
    "start": "2460960",
    "end": "2466720"
  },
  {
    "text": "you can at some point hopefully find in in some documentation uh and just copy paste them and then",
    "start": "2466720",
    "end": "2473839"
  },
  {
    "text": "forget that it's there and at some point when you wanna understand more you can try to",
    "start": "2473839",
    "end": "2479119"
  },
  {
    "text": "understand it but the point here is that we later on can use the rate file write",
    "start": "2479119",
    "end": "2484880"
  },
  {
    "text": "file um effects and we can ignore for the time being",
    "start": "2484880",
    "end": "2491759"
  },
  {
    "text": "concretely but what the outputs are this",
    "start": "2492000",
    "end": "2497599"
  },
  {
    "text": "uh in a few months with the compiler plug-in in a decent stage",
    "start": "2497599",
    "end": "2503839"
  },
  {
    "text": "will go away in like you will be able to say proxy service",
    "start": "2503839",
    "end": "2510400"
  },
  {
    "text": "fs just that and you get those access for",
    "start": "2510400",
    "end": "2515440"
  },
  {
    "text": "free now that requires a lot of work compiler-wise so we are not there yet",
    "start": "2515440",
    "end": "2520880"
  },
  {
    "text": "at the moment you have to specify because we can't distinguish based on type information what is a function what",
    "start": "2520880",
    "end": "2528079"
  },
  {
    "text": "is a constant what is an effect constant and other things exactly we need to write down",
    "start": "2528079",
    "end": "2535680"
  },
  {
    "text": "this second parameter but let's take a look at what the types are looking let's see here we had read file",
    "start": "2535680",
    "end": "2542400"
  },
  {
    "text": "this is read file from with the inside from inside the service perfect that's very readable",
    "start": "2542400",
    "end": "2548319"
  },
  {
    "text": "that's extremely readable but take a look at the return type the return type is an effect that doesn't require any",
    "start": "2548319",
    "end": "2555359"
  },
  {
    "text": "environment the inside of a service",
    "start": "2555359",
    "end": "2560400"
  },
  {
    "text": "exposes the functions just as ios it's very good practice not to have any",
    "start": "2560400",
    "end": "2566800"
  },
  {
    "text": "environment here except something that is explicitly provided by context",
    "start": "2566800",
    "end": "2572800"
  },
  {
    "text": "like a request parameter anything that is runtime provided anything else should",
    "start": "2572800",
    "end": "2578640"
  },
  {
    "text": "be a dependency of the constructor of the service anyway",
    "start": "2578640",
    "end": "2584480"
  },
  {
    "text": "looking at that in your business logic code when you're not",
    "start": "2584480",
    "end": "2591680"
  },
  {
    "text": "writing services you need a way to access the functions",
    "start": "2591680",
    "end": "2597280"
  },
  {
    "text": "from within the environment and it's very noisy to request the service",
    "start": "2597280",
    "end": "2602560"
  },
  {
    "text": "and use the functions from the service you want some sort of proxy that proxy is done by this",
    "start": "2602560",
    "end": "2609920"
  },
  {
    "text": "the right lifted you could write those manually and last time we wrote one manually",
    "start": "2609920",
    "end": "2615920"
  },
  {
    "text": "it's noisy and it's annoying sometimes it's necessary to write those manually if you have like generics",
    "start": "2615920",
    "end": "2623599"
  },
  {
    "text": "around because this uses typescript uh",
    "start": "2623599",
    "end": "2629280"
  },
  {
    "text": "conditional types and conditional types arrays any any generic to unknown",
    "start": "2629280",
    "end": "2635839"
  },
  {
    "text": "so basically you're getting rid of the generics but the idea is the signature",
    "start": "2635839",
    "end": "2640960"
  },
  {
    "text": "of read file is exactly the same as before with the sole key difference",
    "start": "2640960",
    "end": "2646319"
  },
  {
    "text": "that the return type has has fs",
    "start": "2646319",
    "end": "2652079"
  },
  {
    "text": "within it right this is the core the core difference",
    "start": "2652079",
    "end": "2659200"
  },
  {
    "text": "by using this read file you're clicking the function from the",
    "start": "2659440",
    "end": "2665359"
  },
  {
    "text": "environment as a service and then using it",
    "start": "2665359",
    "end": "2671280"
  },
  {
    "text": "so this this is why those drive lifted and the first argument is used for",
    "start": "2671680",
    "end": "2677920"
  },
  {
    "text": "functions the second argument is used for constant objects which could be like",
    "start": "2677920",
    "end": "2685359"
  },
  {
    "text": "const unit equal t dot unit something that is an effect",
    "start": "2685359",
    "end": "2693119"
  },
  {
    "text": "that would be transformed to t dot effect has fs",
    "start": "2693119",
    "end": "2699520"
  },
  {
    "text": "never void or",
    "start": "2699520",
    "end": "2705599"
  },
  {
    "text": "a brutal value which will be accessed differently so there",
    "start": "2705599",
    "end": "2712480"
  },
  {
    "text": "are three different types of accessing and those are the three different parameters obviously by working at the compiler",
    "start": "2712480",
    "end": "2719680"
  },
  {
    "text": "level we can realize those differences yeah let's let's pick this up at a later point",
    "start": "2719680",
    "end": "2726079"
  },
  {
    "text": "again um but yeah so should we build maybe we said maybe now is a good time to",
    "start": "2726079",
    "end": "2731920"
  },
  {
    "text": "separate the uh everything like logger related into a separate file i think you will rush down",
    "start": "2731920",
    "end": "2739839"
  },
  {
    "text": "the logger completely okay great so i think so now now we can either um go",
    "start": "2739839",
    "end": "2746319"
  },
  {
    "text": "into like testing this or using this mode i think we wanna we wanna make",
    "start": "2746319",
    "end": "2752640"
  },
  {
    "text": "one thing actually two things file exists and file",
    "start": "2752640",
    "end": "2757680"
  },
  {
    "text": "yep let's build a few more a few more of these um so that we have like",
    "start": "2757680",
    "end": "2763040"
  },
  {
    "text": "some nice coverage and then let's let's give it a try yeah because i want to write a test of",
    "start": "2763040",
    "end": "2768720"
  },
  {
    "text": "the of the type something that checks if a file is not there it creates the file it's from the file it deletes the file",
    "start": "2768720",
    "end": "2775680"
  },
  {
    "text": "sounds good all right let's do it anyway that's progress on that shall we start to",
    "start": "2775680",
    "end": "2783200"
  },
  {
    "text": "extract things out maybe not yet",
    "start": "2783200",
    "end": "2789119"
  },
  {
    "text": "yeah let's have it grow a bit more and then think about i think about a better structure",
    "start": "2789119",
    "end": "2795599"
  },
  {
    "start": "2795000",
    "end": "3127000"
  },
  {
    "text": "good good uh one thing though i think we wanted to add uh the parameters into the arrow",
    "start": "2795599",
    "end": "2802079"
  },
  {
    "text": "cases now yes",
    "start": "2802079",
    "end": "2808400"
  },
  {
    "text": "all right and uh one thing that also just like",
    "start": "2814400",
    "end": "2820960"
  },
  {
    "text": "while while seeing you duplicate a bit a bit of code here like you might think",
    "start": "2820960",
    "end": "2826880"
  },
  {
    "text": "uh wow that's a lot of boilerplate however yes it might be a little bit of",
    "start": "2826880",
    "end": "2832480"
  },
  {
    "text": "boilerplate in the kind of quote-unquote library code but this is you you write this once and probably someone else has",
    "start": "2832480",
    "end": "2839680"
  },
  {
    "text": "written it for you and you just import it and all you really care about is that",
    "start": "2839680",
    "end": "2845200"
  },
  {
    "text": "i think you import which is read file or write file and then you get to benefit from all of",
    "start": "2845200",
    "end": "2850720"
  },
  {
    "text": "like this uh this this other structure that's already been there and namely that means",
    "start": "2850720",
    "end": "2856240"
  },
  {
    "text": "like your errors have like a lot of useful properties etc so um doing even if you need to do this",
    "start": "2856240",
    "end": "2864240"
  },
  {
    "text": "wrapping yourself once and like pay the cost of writing a bit of the spoiler play decode it's gonna pay off big time",
    "start": "2864240",
    "end": "2872319"
  },
  {
    "text": "uh i've already been there and that that's really that's really great um one little suggestion um maybe you wanna in",
    "start": "2872319",
    "end": "2879119"
  },
  {
    "text": "line 45 uh rename the error to error uh so you",
    "start": "2879119",
    "end": "2884480"
  },
  {
    "text": "don't like you can simplify it a little bit",
    "start": "2884480",
    "end": "2889440"
  },
  {
    "text": "yeah now you have it in the other case as well i didn't start by picking up the proper names",
    "start": "2890480",
    "end": "2897200"
  },
  {
    "text": "nice okay",
    "start": "2898160",
    "end": "2904319"
  },
  {
    "text": "um and just like that we have more useful errors",
    "start": "2904319",
    "end": "2909440"
  },
  {
    "text": "okay great so let's see uh file exists actually it's not going to be",
    "start": "2909680",
    "end": "2915599"
  },
  {
    "text": "interesting do we want to file exists or since there's also there exists and",
    "start": "2915599",
    "end": "2921760"
  },
  {
    "text": "the way how it's actually working from an implementation perspective is that you get a stats object on something and",
    "start": "2921760",
    "end": "2928160"
  },
  {
    "text": "then you check what it's like and then you can check hey is this there is a",
    "start": "2928160",
    "end": "2934960"
  },
  {
    "text": "is there's a file i think at this level we want to proxy this behavior so it exists",
    "start": "2934960",
    "end": "2941280"
  },
  {
    "text": "seeing okay no it's not sorry exists think it",
    "start": "2941280",
    "end": "2947200"
  },
  {
    "text": "exists why yeah there you go",
    "start": "2947200",
    "end": "2954000"
  },
  {
    "text": "telling you this is uh you should use a stat now",
    "start": "2954000",
    "end": "2959599"
  },
  {
    "text": "it's deprecated good that let's make approximate start and that's the thing like there is no",
    "start": "2959599",
    "end": "2966000"
  },
  {
    "text": "stat for file or set for there so this is where we now have like a bit of that",
    "start": "2966000",
    "end": "2971680"
  },
  {
    "text": "creative freedom for uh but yeah let's in any case we should",
    "start": "2971680",
    "end": "2976720"
  },
  {
    "text": "have a stats but then it's a question of like do we want like a little thing on top of it and",
    "start": "2976720",
    "end": "2982160"
  },
  {
    "text": "yeah there we can just pick one",
    "start": "2982160",
    "end": "2985838"
  },
  {
    "text": "i think let's start with the most basic form it's actually funny that like these if you think about it like for outside",
    "start": "2990400",
    "end": "2997119"
  },
  {
    "text": "of the effect world and like in i think it's generally seen as a big",
    "start": "2997119",
    "end": "3002559"
  },
  {
    "text": "step forward that we have like async await and in a single way we can you're",
    "start": "3002559",
    "end": "3007839"
  },
  {
    "text": "shaking your head but like for i think for most people it's seen as a big step forward but one of the downsides is like that in try catch in",
    "start": "3007839",
    "end": "3015760"
  },
  {
    "text": "the catch you don't have like any type safety it's kind of ironic that in the callbacks you have more type safety than",
    "start": "3015760",
    "end": "3021359"
  },
  {
    "text": "with try catch yeah i i shouldn't get you started in",
    "start": "3021359",
    "end": "3027599"
  },
  {
    "text": "that like from the topic but callbacks",
    "start": "3027599",
    "end": "3033359"
  },
  {
    "text": "have a theoretical background it's cps cps style continuation passing",
    "start": "3033359",
    "end": "3040720"
  },
  {
    "text": "style it's very common behavior promises are something absurd",
    "start": "3040720",
    "end": "3048240"
  },
  {
    "text": "out of nothing that just loses all the type information they are not an advancement over",
    "start": "3048240",
    "end": "3056160"
  },
  {
    "text": "callbacks they they solve the callback hell for single typed",
    "start": "3056160",
    "end": "3062400"
  },
  {
    "text": "which is a single category of the cps this is a whole different i i completely",
    "start": "3062400",
    "end": "3069280"
  },
  {
    "text": "agree with you uh but i think to like put this into historic context uh like it's javascript has never had",
    "start": "3069280",
    "end": "3077200"
  },
  {
    "text": "types in the first place and the problem at hand for people with callback help",
    "start": "3077200",
    "end": "3083920"
  },
  {
    "text": "anyway let's uh let's not get into that maybe another time",
    "start": "3083920",
    "end": "3090240"
  },
  {
    "text": "trying to keep this on track roughly odd the type of error is that",
    "start": "3090240",
    "end": "3098079"
  },
  {
    "text": "same type so let's take a path fx path line",
    "start": "3098079",
    "end": "3105280"
  },
  {
    "text": "maybe it's not also already a good time to maybe create like a in the",
    "start": "3109200",
    "end": "3114240"
  },
  {
    "text": "file system creator that's very matter but in this on the left side of your screen create a file arrow ts and just",
    "start": "3114240",
    "end": "3121200"
  },
  {
    "text": "put all of the errors in there to refactors this a little bit",
    "start": "3121200",
    "end": "3126800"
  },
  {
    "start": "3127000",
    "end": "3599000"
  },
  {
    "text": "let's get to four functions before four shall be our threshold",
    "start": "3127119",
    "end": "3134480"
  },
  {
    "text": "yeah fs that's",
    "start": "3134720",
    "end": "3139800"
  },
  {
    "text": "[Music]",
    "start": "3141070",
    "end": "3146070"
  },
  {
    "text": "be interrupted start options",
    "start": "3151200",
    "end": "3156240"
  },
  {
    "text": "is there an abortable that's a good question",
    "start": "3157440",
    "end": "3164599"
  },
  {
    "text": "doesn't seem so nope don't think it has a third parameter",
    "start": "3169680",
    "end": "3177280"
  },
  {
    "text": "you don't think so",
    "start": "3177280",
    "end": "3180920"
  },
  {
    "text": "seems like there is something [Music] so once you've issued the stats you're",
    "start": "3190559",
    "end": "3196960"
  },
  {
    "text": "stuck with it but it should be a single kernel cannot yeah",
    "start": "3196960",
    "end": "3202370"
  },
  {
    "text": "[Music] probably fairly atomic",
    "start": "3202370",
    "end": "3207880"
  },
  {
    "text": "be fairly autonomic okay cool so we don't even need the",
    "start": "3209359",
    "end": "3215359"
  },
  {
    "text": "effect async interrupt yeah effect and sync",
    "start": "3215359",
    "end": "3222760"
  },
  {
    "text": "you can get rid of the controller i can't get rid of the controller yes",
    "start": "3224079",
    "end": "3231119"
  },
  {
    "text": "just want to point out that like the it's actually so nice when you're uh using",
    "start": "3231119",
    "end": "3236640"
  },
  {
    "text": "um maybe maybe other people like me um use react js before",
    "start": "3236640",
    "end": "3242640"
  },
  {
    "text": "learning about effect and in react you have you have use effect where you have a similar",
    "start": "3242640",
    "end": "3248240"
  },
  {
    "text": "structure here to like the fs effect async interrupt where you also have a some you return sort of",
    "start": "3248240",
    "end": "3256240"
  },
  {
    "text": "the cleanup uh part so it's like that resemblance and similarity is nice",
    "start": "3256240",
    "end": "3264040"
  },
  {
    "text": "all right so that's",
    "start": "3269599",
    "end": "3275079"
  },
  {
    "text": "everything just clicks into place amazing",
    "start": "3278960",
    "end": "3283920"
  },
  {
    "text": "there we go",
    "start": "3286319",
    "end": "3289960"
  },
  {
    "text": "and there we go okay so one more",
    "start": "3294240",
    "end": "3300640"
  },
  {
    "text": "should we build a convenience method now on top of it for um file exists",
    "start": "3300640",
    "end": "3307839"
  },
  {
    "text": "we can write to a file we can read from from a file we can",
    "start": "3307920",
    "end": "3314480"
  },
  {
    "text": "start let's just",
    "start": "3314480",
    "end": "3319440"
  },
  {
    "text": "let's build like a convenience thing on top of that where we can now stay purely in effect land um where we say um const",
    "start": "3320640",
    "end": "3327520"
  },
  {
    "text": "file exists and then we use the stat we basically chain over the stats",
    "start": "3327520",
    "end": "3332799"
  },
  {
    "text": "uh are we map over it file exists",
    "start": "3332799",
    "end": "3339359"
  },
  {
    "text": "which takes a first of all it should even check if it just takes a path",
    "start": "3339920",
    "end": "3346640"
  },
  {
    "text": "oh a buffer url that's a good question i've never had a case where",
    "start": "3347440",
    "end": "3352799"
  },
  {
    "text": "i have a path as a buffer",
    "start": "3352799",
    "end": "3356960"
  },
  {
    "text": "but i guess that that's the thing",
    "start": "3358960",
    "end": "3364318"
  },
  {
    "text": "okay anyway let's let's be as mean as low levels possible",
    "start": "3365119",
    "end": "3371920"
  },
  {
    "text": "all right file exists",
    "start": "3371920",
    "end": "3379119"
  },
  {
    "text": "so i think here we basically just want to pipe",
    "start": "3380880",
    "end": "3386240"
  },
  {
    "text": "uh and then stats stats path",
    "start": "3387040",
    "end": "3394359"
  },
  {
    "text": "all right and then we team map i think map is enough now we're not invoking another another effect",
    "start": "3406720",
    "end": "3413760"
  },
  {
    "text": "if it's not a file if it's a directory you call file exist on a directory",
    "start": "3413760",
    "end": "3420880"
  },
  {
    "text": "it's an error um ah because like you you wanna okay yeah",
    "start": "3420880",
    "end": "3427680"
  },
  {
    "text": "we can't handle the semantics got it so just to quickly like for",
    "start": "3427680",
    "end": "3433599"
  },
  {
    "text": "for other people's who haven't joined our hive mind in this moment uh i wanted to uh suggest that we do team map and",
    "start": "3433599",
    "end": "3440960"
  },
  {
    "text": "basically just off the stats object read out the necessary property",
    "start": "3440960",
    "end": "3446880"
  },
  {
    "text": "uh so i was just assuming that everything is going to be fine and we are just living in the happy path world",
    "start": "3446880",
    "end": "3453520"
  },
  {
    "text": "and uh but michael has been pointing out like already in error case what if the thing that maybe we found the stats",
    "start": "3453520",
    "end": "3460720"
  },
  {
    "text": "that's been okay but we want to like fail ourselves because we see the thing",
    "start": "3460720",
    "end": "3467119"
  },
  {
    "text": "is not a file but it's directory so in that case as we want to fail",
    "start": "3467119",
    "end": "3472720"
  },
  {
    "text": "um we need to use t chain instead of t map",
    "start": "3472720",
    "end": "3479160"
  },
  {
    "text": "it's a boolean thing [Music] else",
    "start": "3489920",
    "end": "3496559"
  },
  {
    "text": "well the question is also if it doesn't exist i think stats will",
    "start": "3497200",
    "end": "3503599"
  },
  {
    "text": "actually well it's true i i remember in my wrapper and you can like look into the implementation",
    "start": "3503599",
    "end": "3511200"
  },
  {
    "text": "i think i had to like try catch it and in the catch case",
    "start": "3511200",
    "end": "3516480"
  },
  {
    "text": "also return return false so we might want to do like a",
    "start": "3516480",
    "end": "3522640"
  },
  {
    "text": "um catch tag stat error",
    "start": "3522640",
    "end": "3527960"
  },
  {
    "text": "um bath is not",
    "start": "3530000",
    "end": "3534318"
  },
  {
    "text": "now we're getting potentially into an explosion of different errors our cases",
    "start": "3537839",
    "end": "3543440"
  },
  {
    "text": "let's see and i think in that case we don't have the uh quote-unquote",
    "start": "3543440",
    "end": "3550960"
  },
  {
    "text": "uh native node.js error since this is a semantic error that we introduced",
    "start": "3550960",
    "end": "3557480"
  },
  {
    "text": "so uh michael i think you need to delete one property in that uh",
    "start": "3558000",
    "end": "3563200"
  },
  {
    "text": "that error like i think line 40 34 is not a thing here",
    "start": "3563200",
    "end": "3569119"
  },
  {
    "text": "nice all right um for the people watching uh",
    "start": "3569760",
    "end": "3577920"
  },
  {
    "text": "can you follow along so far is this like have we lost anyone along the way does",
    "start": "3577920",
    "end": "3583440"
  },
  {
    "text": "everything so make sense",
    "start": "3583440",
    "end": "3587240"
  },
  {
    "text": "all right making sense to at least one person great to hear",
    "start": "3592000",
    "end": "3598960"
  },
  {
    "text": "let's take a look at the types all right the type is nice stats error or path",
    "start": "3599680",
    "end": "3606000"
  },
  {
    "text": "is not a file error great that's very very readable sequence of things",
    "start": "3606000",
    "end": "3612480"
  },
  {
    "text": "nice all right it's a boolean",
    "start": "3612480",
    "end": "3620079"
  },
  {
    "text": "what start is file actually here we are failing if it doesn't exist",
    "start": "3622559",
    "end": "3629200"
  },
  {
    "text": "yeah that's that's what i what i mentioned i think here we need to like t um",
    "start": "3629200",
    "end": "3634590"
  },
  {
    "text": "[Music] guess we need yeah does it does does",
    "start": "3634590",
    "end": "3640880"
  },
  {
    "text": "start fail yep i think uh like take a look in the",
    "start": "3640880",
    "end": "3646319"
  },
  {
    "text": "baseline file that we that we've created",
    "start": "3646319",
    "end": "3650880"
  },
  {
    "text": "i think that that fails and in that case we should probably absorb the stats error",
    "start": "3654720",
    "end": "3662720"
  },
  {
    "text": "but then",
    "start": "3666160",
    "end": "3669558"
  },
  {
    "text": "i i'm pretty sure you like you'd need to try catch or",
    "start": "3683680",
    "end": "3689119"
  },
  {
    "text": "similar no it's not a dry hatch can't be a drag hitch here",
    "start": "3689119",
    "end": "3694799"
  },
  {
    "text": "oh no yeah around around dfs start here or if it's open",
    "start": "3694799",
    "end": "3702079"
  },
  {
    "text": "is not recommended instead user code should open read file",
    "start": "3705839",
    "end": "3712799"
  },
  {
    "text": "directory and handle the error rays if the file is not available",
    "start": "3712799",
    "end": "3718319"
  },
  {
    "text": "so they explicitly say don't don't use that to check well stack overflow has taught me poorly",
    "start": "3718319",
    "end": "3725440"
  },
  {
    "text": "then to check if a file exists without",
    "start": "3725440",
    "end": "3732000"
  },
  {
    "text": "manipulating it afterwards link access is recommended but it's so",
    "start": "3732000",
    "end": "3737920"
  },
  {
    "text": "so weird like when we looked at the deprecation notice of exists it pointed",
    "start": "3737920",
    "end": "3743839"
  },
  {
    "text": "us to stats",
    "start": "3743839",
    "end": "3747119"
  },
  {
    "text": "so that's like inconsistent right in the same file here",
    "start": "3748960",
    "end": "3755680"
  },
  {
    "text": "access this user permission for a file or directly specified by path the mode",
    "start": "3755680",
    "end": "3761920"
  },
  {
    "text": "argument is an optional internet specification okay",
    "start": "3761920",
    "end": "3767440"
  },
  {
    "text": "check file access constants for possible values of mode the final argument callback is called",
    "start": "3767440",
    "end": "3774160"
  },
  {
    "text": "that is invoked with a potential error if any of the accessibility checks will",
    "start": "3774160",
    "end": "3779280"
  },
  {
    "text": "fail the error",
    "start": "3779280",
    "end": "3784400"
  },
  {
    "text": "argument will be an error object following this",
    "start": "3784400",
    "end": "3791960"
  },
  {
    "text": "so my machines have instead of a file exists we want to add",
    "start": "3797280",
    "end": "3802400"
  },
  {
    "text": "a proxy to access at this level of the of the module and only later on decide",
    "start": "3802400",
    "end": "3809839"
  },
  {
    "text": "effectively what type of api we wanna we wanna expose",
    "start": "3809839",
    "end": "3815200"
  },
  {
    "text": "we have jumped a little bit too far so instead of file exist",
    "start": "3815200",
    "end": "3820960"
  },
  {
    "text": "access i mean we we're essentially now doing a different thing",
    "start": "3820960",
    "end": "3827760"
  },
  {
    "text": "so the file access thing still makes sense to have later but we are we're just maybe built on top of access",
    "start": "3827760",
    "end": "3834400"
  },
  {
    "text": "exactly so different or different things yeah well that's so i mean we can keep it and",
    "start": "3834400",
    "end": "3841520"
  },
  {
    "text": "then later adjust it so we don't like need to get rid of that work now",
    "start": "3841520",
    "end": "3846640"
  },
  {
    "text": "but it's materially wrong so it doesn't it doesn't check",
    "start": "3846640",
    "end": "3853520"
  },
  {
    "text": "okay let's let's do that anyway uh fs access does it take",
    "start": "3853520",
    "end": "3862880"
  },
  {
    "text": "no i just want both like and more",
    "start": "3863680",
    "end": "3870559"
  },
  {
    "text": "going proper low level here",
    "start": "3874160",
    "end": "3879480"
  },
  {
    "text": "at least to start with yep wait so hasn't the",
    "start": "3883680",
    "end": "3889680"
  },
  {
    "text": "mode been uh required mandatory in the original",
    "start": "3889680",
    "end": "3895359"
  },
  {
    "text": "api yeah but it was i uh ah sorry yeah yeah it was um that makes sense because it",
    "start": "3895359",
    "end": "3902720"
  },
  {
    "text": "was not callback based last one needs to be a callback yep uh access",
    "start": "3902720",
    "end": "3910480"
  },
  {
    "text": "error that we have to create",
    "start": "3910480",
    "end": "3915760"
  },
  {
    "text": "and the output voice that",
    "start": "3915760",
    "end": "3923319"
  },
  {
    "text": "doesn't return anything",
    "start": "3927440",
    "end": "3930558"
  },
  {
    "text": "i guess there basically matters like does it throw or not or like in the callback",
    "start": "3933359",
    "end": "3940079"
  },
  {
    "text": "oh man dealing with all of these uh callbacks like a",
    "start": "3945280",
    "end": "3951280"
  },
  {
    "text": "bit of a throwback to like the early days of a note for me because we are building a raptor",
    "start": "3951280",
    "end": "3958160"
  },
  {
    "text": "avoid doing that later on hopefully the last time i need to deal with those",
    "start": "3958160",
    "end": "3964760"
  },
  {
    "text": "people consider it a soul's problem but it's not a sort of problem",
    "start": "3965760",
    "end": "3970798"
  },
  {
    "text": "it is for us not in general",
    "start": "3972160",
    "end": "3977798"
  },
  {
    "text": "and suppose you can't cancel that either you can't cancel them either but it's a",
    "start": "3979839",
    "end": "3984960"
  },
  {
    "text": "single it's really a single calling the kernel soil there's no way of canceling it",
    "start": "3984960",
    "end": "3992680"
  },
  {
    "text": "[Music] the arguments are part and mode",
    "start": "3994640",
    "end": "4004119"
  },
  {
    "text": "can you quickly explain why you'd like that explicit signature here",
    "start": "4018480",
    "end": "4024000"
  },
  {
    "text": "this one [Music] because the more he always exists",
    "start": "4024000",
    "end": "4029200"
  },
  {
    "text": "got it",
    "start": "4029200",
    "end": "4032440"
  },
  {
    "text": "so if error we resume",
    "start": "4039599",
    "end": "4046160"
  },
  {
    "text": "with a failure type new",
    "start": "4046160",
    "end": "4052039"
  },
  {
    "text": "access error mode off",
    "start": "4052039",
    "end": "4057920"
  },
  {
    "text": "and getter is back",
    "start": "4057920",
    "end": "4061880"
  },
  {
    "text": "okay and the other case we just resume with a unit as first",
    "start": "4068559",
    "end": "4075400"
  },
  {
    "text": "[Music] yes",
    "start": "4079470",
    "end": "4085720"
  },
  {
    "text": "all right so let's build the file access thing on top",
    "start": "4090000",
    "end": "4095599"
  },
  {
    "text": "of it now",
    "start": "4095599",
    "end": "4098080"
  },
  {
    "text": "and just a quick time check um i think we want to wrap up in the next 15 minutes or so probably doesn't leave us",
    "start": "4100799",
    "end": "4107359"
  },
  {
    "text": "enough time to to get into the streaming but i'd suggest we give the file access",
    "start": "4107359",
    "end": "4114640"
  },
  {
    "text": "function a try now and then try to like use it somewhere um whatever is the quickest maybe it's a",
    "start": "4114640",
    "end": "4121278"
  },
  {
    "text": "test maybe it's just like a little script we run in the node terminal",
    "start": "4121279",
    "end": "4126640"
  },
  {
    "text": "so uh let's see",
    "start": "4126640",
    "end": "4131239"
  },
  {
    "text": "file access constant f okay",
    "start": "4132799",
    "end": "4137040"
  },
  {
    "text": "file is visible to the calling process",
    "start": "4142960",
    "end": "4148480"
  },
  {
    "text": "and a quick quick so access is that specifically for files or with this also known as",
    "start": "4148719",
    "end": "4154400"
  },
  {
    "text": "plugs access is on on file descriptors so would that also work for directories",
    "start": "4154400",
    "end": "4162880"
  },
  {
    "text": "i think there is something for directories or maybe you know",
    "start": "4162880",
    "end": "4169040"
  },
  {
    "text": "dc directory or directory",
    "start": "4169040",
    "end": "4173318"
  },
  {
    "text": "the path is not a director okay but this should be file access constant",
    "start": "4177120",
    "end": "4182560"
  },
  {
    "text": "so here it's explicit file is visible [Music]",
    "start": "4182560",
    "end": "4189359"
  },
  {
    "text": "there's a good point here the mode",
    "start": "4189359",
    "end": "4194000"
  },
  {
    "text": "i think this the the reason it's like that the reason it's a number is that you can",
    "start": "4195199",
    "end": "4201600"
  },
  {
    "text": "mix modes",
    "start": "4201600",
    "end": "4204400"
  },
  {
    "text": "and how do you mix modes that are number with i think the logical and and the",
    "start": "4208320",
    "end": "4213760"
  },
  {
    "text": "logical or yeah that's good good old boolean uh algebra here",
    "start": "4213760",
    "end": "4219840"
  },
  {
    "text": "little good old boolean boolean geographer for those checks",
    "start": "4219840",
    "end": "4225840"
  },
  {
    "text": "she's also by the way how many things in the compiler are yeah yeah i mean those were",
    "start": "4226239",
    "end": "4232480"
  },
  {
    "text": "it's a very low level thing so there the efficiency is worth it",
    "start": "4232480",
    "end": "4239198"
  },
  {
    "text": "what file exists now we know how to do that",
    "start": "4241520",
    "end": "4248560"
  },
  {
    "text": "nice and much more low level than",
    "start": "4248560",
    "end": "4253679"
  },
  {
    "text": "my implementation but i've learned something new today that's good",
    "start": "4253679",
    "end": "4259560"
  },
  {
    "text": "we use access",
    "start": "4260159",
    "end": "4263199"
  },
  {
    "text": "okay",
    "start": "4271679",
    "end": "4274080"
  },
  {
    "text": "yeah i really want would like to have a vs code um",
    "start": "4277840",
    "end": "4282880"
  },
  {
    "text": "refactoring utility or can similar where is i saw like hey extract this as an",
    "start": "4282880",
    "end": "4288320"
  },
  {
    "text": "interface extract that as a type i'd like to mark some uh",
    "start": "4288320",
    "end": "4293440"
  },
  {
    "text": "some code and say wrap it in a pipe",
    "start": "4293440",
    "end": "4298840"
  },
  {
    "text": "maybe a good thing to look into for future effect time",
    "start": "4301679",
    "end": "4307560"
  },
  {
    "text": "okay i think this one we don't have but wait a second what i'm not sure is",
    "start": "4317280",
    "end": "4323840"
  },
  {
    "text": "that here we are",
    "start": "4323840",
    "end": "4327960"
  },
  {
    "text": "this access is erroring we don't have access to it if the file",
    "start": "4329040",
    "end": "4334880"
  },
  {
    "text": "is not okay for us it's not visible it's visible to the hauling process",
    "start": "4334880",
    "end": "4341199"
  },
  {
    "text": "but if it's not there or if we don't have permission",
    "start": "4341199",
    "end": "4348000"
  },
  {
    "text": "a different thing if we don't have permission so we need to stats after all",
    "start": "4348000",
    "end": "4354719"
  },
  {
    "text": "i don't have permission the file exists but i don't have permission",
    "start": "4355040",
    "end": "4361679"
  },
  {
    "text": "i'm not sure how to track that case all i can say is i've used the stat",
    "start": "4361679",
    "end": "4367199"
  },
  {
    "text": "thing before and worked it might be not as",
    "start": "4367199",
    "end": "4372239"
  },
  {
    "text": "uh absolutely efficient that does your function return valid if you're calling it on a",
    "start": "4372239",
    "end": "4378719"
  },
  {
    "text": "directory uh it's a good question um i mean you can look into it uh take a look into the",
    "start": "4378719",
    "end": "4385040"
  },
  {
    "text": "baseline file if it's here so i have file directory exists so you",
    "start": "4385040",
    "end": "4391760"
  },
  {
    "text": "see it here um",
    "start": "4391760",
    "end": "4396080"
  },
  {
    "text": "and you see the there's also one for swim links",
    "start": "4396880",
    "end": "4402080"
  },
  {
    "text": "and uh using the start",
    "start": "4402080",
    "end": "4406400"
  },
  {
    "text": "catch that fire not found but here in start",
    "start": "4411280",
    "end": "4418119"
  },
  {
    "text": "error code so you're using the error code to track",
    "start": "4427040",
    "end": "4432320"
  },
  {
    "text": "them",
    "start": "4432320",
    "end": "4434560"
  },
  {
    "text": "is it documented anywhere",
    "start": "4439600",
    "end": "4443040"
  },
  {
    "text": "otherwise let's check let's check the flags",
    "start": "4445840",
    "end": "4450760"
  },
  {
    "text": "this is only access okay i think this is also like uh probably",
    "start": "4460719",
    "end": "4465920"
  },
  {
    "text": "diminishing returns here now i think we can just go with the stat thing and uh",
    "start": "4465920",
    "end": "4472080"
  },
  {
    "text": "let's use access for now if it exists it exists actually it should be",
    "start": "4472080",
    "end": "4478000"
  },
  {
    "text": "path yeah is off",
    "start": "4478000",
    "end": "4484960"
  },
  {
    "text": "success now it's semantically more or like more",
    "start": "4485440",
    "end": "4490800"
  },
  {
    "text": "technically more correct like semantically further away from like what i was",
    "start": "4490800",
    "end": "4496640"
  },
  {
    "text": "looking for so i exist okay let's keep it as a as a file exists",
    "start": "4496640",
    "end": "4504640"
  },
  {
    "text": "but anyway here we have the error which this time is an access",
    "start": "4504640",
    "end": "4510640"
  },
  {
    "text": "error file axis error",
    "start": "4510640",
    "end": "4515679"
  },
  {
    "text": "has an access error which already contains error",
    "start": "4515679",
    "end": "4523079"
  },
  {
    "text": "we don't really need anything else [Music]",
    "start": "4524239",
    "end": "4529560"
  },
  {
    "text": "so it's map new",
    "start": "4531040",
    "end": "4537120"
  },
  {
    "text": "file exists error",
    "start": "4537120",
    "end": "4542000"
  },
  {
    "text": "all right",
    "start": "4545440",
    "end": "4548678"
  },
  {
    "text": "not sure if that should actually return a boolean but we are losing information if we make it return a boolean",
    "start": "4552080",
    "end": "4559760"
  },
  {
    "text": "wait so it doesn't return a boolean yep um",
    "start": "4560000",
    "end": "4568159"
  },
  {
    "text": "uh i'm not sure how i feel about that uh since like i'm here i'm expecting to",
    "start": "4568159",
    "end": "4573199"
  },
  {
    "text": "return a boolean i think and given we are we're already creating this net new anyway um",
    "start": "4573199",
    "end": "4581900"
  },
  {
    "text": "[Music]",
    "start": "4581900",
    "end": "4584949"
  },
  {
    "text": "i guess just return to succeed false",
    "start": "4600800",
    "end": "4606119"
  },
  {
    "text": "do we even need a fold m",
    "start": "4621199",
    "end": "4625679"
  },
  {
    "text": "yeah because you have to recover",
    "start": "4628080",
    "end": "4632040"
  },
  {
    "text": "i don't want to specify a a map and a casual i like to fold on both branches but wouldn't",
    "start": "4636560",
    "end": "4643520"
  },
  {
    "text": "just fold also work fold no because fold you're folding over the",
    "start": "4643520",
    "end": "4649120"
  },
  {
    "text": "error into an error [Music] unless i'm mistaken in semantic",
    "start": "4649120",
    "end": "4657840"
  },
  {
    "text": "no it's to an output you're right here it is to an output precisely right",
    "start": "4660239",
    "end": "4668719"
  },
  {
    "text": "yeah all right um just here also a note for the future",
    "start": "4674080",
    "end": "4679600"
  },
  {
    "text": "while you're digging into the typescript compiler i feel um for for example for",
    "start": "4679600",
    "end": "4685679"
  },
  {
    "text": "fold if the arguments could not be um could be not uh",
    "start": "4685679",
    "end": "4693440"
  },
  {
    "text": "positional but if they could be named um i think this could be uh could be",
    "start": "4693679",
    "end": "4699040"
  },
  {
    "text": "beneficial i mean it's less of a problem now where you have the inlay hints",
    "start": "4699040",
    "end": "4704480"
  },
  {
    "text": "um but still something that i i generally prefer for for apis one is the only way to to do that in",
    "start": "4704480",
    "end": "4711600"
  },
  {
    "text": "valid syntax is to request an object as input and that's",
    "start": "4711600",
    "end": "4718560"
  },
  {
    "text": "very bad for performance now i think compiler-wise performance on",
    "start": "4718560",
    "end": "4723760"
  },
  {
    "text": "a type system level or performance on runtime on a runtime level i see",
    "start": "4723760",
    "end": "4729360"
  },
  {
    "text": "the what we could do at the compiler level is given a function with a signature",
    "start": "4729360",
    "end": "4736719"
  },
  {
    "text": "in parameters create a function that accepts an object",
    "start": "4736719",
    "end": "4744000"
  },
  {
    "text": "only if the object is inlined and there you can use normal",
    "start": "4744000",
    "end": "4749040"
  },
  {
    "text": "like we can work around like when i when typing the do it's valid js syntax",
    "start": "4749040",
    "end": "4755760"
  },
  {
    "text": "but it types differently in in typescript it type checks differently right nothing of that type could could",
    "start": "4755760",
    "end": "4762080"
  },
  {
    "text": "be done but by no means in an easy way okay anyway cool our file exists",
    "start": "4762080",
    "end": "4771040"
  },
  {
    "text": "thing and then let's give it a try let's see whether we can do this in five",
    "start": "4771360",
    "end": "4777679"
  },
  {
    "text": "minutes it's a way to delete a file otherwise without deleting we can do this afterwards i think with other white time",
    "start": "4777679",
    "end": "4784800"
  },
  {
    "text": "isn't let's have a append only",
    "start": "4784800",
    "end": "4790198"
  },
  {
    "text": "all right here you're gonna place through it let's see",
    "start": "4790400",
    "end": "4795719"
  },
  {
    "text": "okay it's rm",
    "start": "4807199",
    "end": "4810400"
  },
  {
    "text": "it takes a puff like and it takes rm options",
    "start": "4812400",
    "end": "4818880"
  },
  {
    "text": "and i guess this is also portable",
    "start": "4818880",
    "end": "4823120"
  },
  {
    "text": "i don't care off",
    "start": "4825120",
    "end": "4832440"
  },
  {
    "text": "is it offline yeah it is a part one second arguments are the options",
    "start": "4835840",
    "end": "4844600"
  },
  {
    "text": "no it doesn't okay even that is not abortable",
    "start": "4850080",
    "end": "4857960"
  },
  {
    "text": "in this case you want to use two question marks instead of the or look",
    "start": "4880560",
    "end": "4887480"
  },
  {
    "text": "uh what should i do here it's",
    "start": "4890400",
    "end": "4896239"
  },
  {
    "text": "an errand another",
    "start": "4896239",
    "end": "4902520"
  },
  {
    "text": "probably want to make the last error member um",
    "start": "4925600",
    "end": "4931280"
  },
  {
    "text": "explicitly undefined what undefined",
    "start": "4931280",
    "end": "4936800"
  },
  {
    "text": "these that's not not important but in the era yeah inside the arrows tanks",
    "start": "4936800",
    "end": "4944280"
  },
  {
    "text": "you'll need your word controller we don't have an interrupt",
    "start": "4953440",
    "end": "4961800"
  },
  {
    "text": "oh",
    "start": "4994080",
    "end": "4997080"
  },
  {
    "text": "and i think that's it all right",
    "start": "5005199",
    "end": "5012080"
  },
  {
    "text": "let's give it a try we have three more minutes",
    "start": "5012080",
    "end": "5016638"
  },
  {
    "text": "yes",
    "start": "5017600",
    "end": "5020600"
  },
  {
    "text": "adam let's not generate uuids or stuff like let's",
    "start": "5031040",
    "end": "5036320"
  },
  {
    "text": "pretend everything works fine that's good",
    "start": "5036320",
    "end": "5041719"
  },
  {
    "text": "so first of all i want to ask if",
    "start": "5043440",
    "end": "5050760"
  },
  {
    "text": "um actually i would like to do something",
    "start": "5058000",
    "end": "5064400"
  },
  {
    "text": "otherwise this test is gonna become boring let's rewrite this test using generators",
    "start": "5064400",
    "end": "5072840"
  },
  {
    "text": "you guessed the right number of parentheses",
    "start": "5098320",
    "end": "5102960"
  },
  {
    "text": "all right we have a minute to do this test i exist",
    "start": "5105760",
    "end": "5111840"
  },
  {
    "text": "plus the reason i want to do that",
    "start": "5111840",
    "end": "5117120"
  },
  {
    "text": "would become a parrot now",
    "start": "5117120",
    "end": "5121320"
  },
  {
    "text": "now i'm stretching my life with parentheses",
    "start": "5131199",
    "end": "5135960"
  },
  {
    "text": "what's going on",
    "start": "5149679",
    "end": "5153239"
  },
  {
    "text": "there we go so i can now simply use my",
    "start": "5159280",
    "end": "5164800"
  },
  {
    "text": "const exists and we expect that to not exist",
    "start": "5164800",
    "end": "5173679"
  },
  {
    "text": "which is a boolean instead of a thing that's froze all right let's",
    "start": "5175199",
    "end": "5182960"
  },
  {
    "text": "write and then wrap it right there resize let's remove the baseline yep",
    "start": "5182960",
    "end": "5191199"
  },
  {
    "text": "so the project compiles",
    "start": "5191199",
    "end": "5195080"
  },
  {
    "text": "test packages",
    "start": "5196480",
    "end": "5202600"
  },
  {
    "text": "fs fingers crossed",
    "start": "5204239",
    "end": "5210760"
  },
  {
    "text": "oh my god it worked the first time incredible that's great",
    "start": "5213600",
    "end": "5219360"
  },
  {
    "text": "awesome why did you even write the tests that we if you knew it works uh that's awesome yeah i think that lets",
    "start": "5219360",
    "end": "5226400"
  },
  {
    "text": "us end it here on time yeah this was fun learned a bunch about uh file systems",
    "start": "5226400",
    "end": "5233199"
  },
  {
    "text": "uh on a node etc and like how to how to better wrap that in uh",
    "start": "5233199",
    "end": "5238480"
  },
  {
    "text": "in effect partially like unnecessary knowledge now that the work is done and can just use it",
    "start": "5238480",
    "end": "5244239"
  },
  {
    "text": "uh but no this was really great and i think it opens up for the like next time",
    "start": "5244239",
    "end": "5250320"
  },
  {
    "text": "go deeper at the lower level implemented using stream like retail",
    "start": "5250320",
    "end": "5255760"
  },
  {
    "text": "as a stream that's great let's certainly do that let's see when we do that that's another",
    "start": "5255760",
    "end": "5261920"
  },
  {
    "text": "question um but yeah thanks so much everyone else for uh for tuning in",
    "start": "5261920",
    "end": "5267679"
  },
  {
    "text": "i think we'll be back uh with another uh topic in in two weeks from now michael's",
    "start": "5267679",
    "end": "5273040"
  },
  {
    "text": "working on some pretty crazy stuff right now and the types literally like uh in",
    "start": "5273040",
    "end": "5278560"
  },
  {
    "text": "the types typescript compiler uh so uh maybe we get a glimpse into",
    "start": "5278560",
    "end": "5283600"
  },
  {
    "text": "that in two weeks but uh yeah until then",
    "start": "5283600",
    "end": "5289040"
  },
  {
    "text": "thanks so much for for your time thanks everybody all right cheers bye",
    "start": "5289199",
    "end": "5296400"
  },
  {
    "text": "ciao",
    "start": "5296400",
    "end": "5299400"
  },
  {
    "text": "you",
    "start": "5315280",
    "end": "5317360"
  }
]