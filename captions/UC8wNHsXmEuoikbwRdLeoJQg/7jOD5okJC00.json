[
  {
    "start": "0",
    "end": "357000"
  },
  {
    "text": "[Applause] so welcome to the advanced effect",
    "start": "740",
    "end": "7439"
  },
  {
    "text": "Workshop we're very excited to have you all here for the first set of workshops",
    "start": "7439",
    "end": "12719"
  },
  {
    "text": "that affect us hosting um my name is Max um and just like a quick about me um",
    "start": "12719",
    "end": "19320"
  },
  {
    "text": "I'm based in the USA um all good mik",
    "start": "19320",
    "end": "24960"
  },
  {
    "text": "okay u based on the USA I'm from New Jersey um I work",
    "start": "24960",
    "end": "30560"
  },
  {
    "text": "my day job as a senior devops engineer at sap um I'm a core contributor to the",
    "start": "30560",
    "end": "36360"
  },
  {
    "text": "effect Library I have been for I think it's something like four years now um",
    "start": "36360",
    "end": "42920"
  },
  {
    "text": "and I guess my claim to theme in the effect Community is that I'm uh the",
    "start": "42920",
    "end": "48840"
  },
  {
    "text": "primary author of the effect CLI Library um and a quick fun fact about me",
    "start": "48840",
    "end": "54440"
  },
  {
    "text": "is uh I am actually a licensed pharmacist in the United States as well in two states",
    "start": "54440",
    "end": "61480"
  },
  {
    "text": "um so did not start my career in Tech but here we are um some of the other",
    "start": "61480",
    "end": "67240"
  },
  {
    "text": "Workshop facilitators that you'll see throughout the day um I think you know these guys from Discord but Mike and Tim",
    "start": "67240",
    "end": "73400"
  },
  {
    "text": "will both be floating through uh the two workshops that we have going on um so if",
    "start": "73400",
    "end": "78520"
  },
  {
    "text": "you have any questions that you don't want to again like raise your hand for or anything like that feel free to ask",
    "start": "78520",
    "end": "83759"
  },
  {
    "text": "them um and just a few of the goals like what we're trying to accomplish today so",
    "start": "83759",
    "end": "89759"
  },
  {
    "text": "um um we talked a lot about how we wanted to structure this Workshop as we were developing it um we talked about",
    "start": "89759",
    "end": "96600"
  },
  {
    "text": "whether we were going to build an app or we were going to just go over different design patterns and we ultimately",
    "start": "96600",
    "end": "101640"
  },
  {
    "text": "decided that one of the most useful things that we could give you folks developers is um to explore Advanced",
    "start": "101640",
    "end": "109000"
  },
  {
    "text": "patterns in effect by going over um reusable design patterns rather than",
    "start": "109000",
    "end": "114159"
  },
  {
    "text": "building a full-fledged app together um so most of the exercises that we'll be doing today uh uh we'll focus on um",
    "start": "114159",
    "end": "125159"
  },
  {
    "text": "basically practicing using some of these Advanced design patterns that you'll see if you look at some of the internals",
    "start": "125159",
    "end": "131120"
  },
  {
    "text": "within effect um and hopefully uh we can all enjoy ourselves while we're working",
    "start": "131120",
    "end": "136280"
  },
  {
    "text": "together I do encourage you guys to like raise your hand ask questions um",
    "start": "136280",
    "end": "141400"
  },
  {
    "text": "interrupt me if you want um I'm not like super strict about any of that but if you don't feel comfortable doing that",
    "start": "141400",
    "end": "147239"
  },
  {
    "text": "again there's the Discord Channel we'll be monitoring um and yeah we'll have a lot of coding",
    "start": "147239",
    "end": "153360"
  },
  {
    "text": "exercises to work on together I'm going to try to minimize the amount of time that I'm like blabbing about um just a",
    "start": "153360",
    "end": "161519"
  },
  {
    "text": "little bit about the schedule so we have four sessions of content for you guys today um in this Workshop in session one",
    "start": "161519",
    "end": "169440"
  },
  {
    "text": "we're going to be focusing on patterns for service construction and Resource Management with effect um so primarily",
    "start": "169440",
    "end": "176080"
  },
  {
    "text": "with the focus of how do we actually integrate effect with external Library liaries and how do we wrap external",
    "start": "176080",
    "end": "181480"
  },
  {
    "text": "libraries with effect because even though our ecosystem is growing every day um we still don't have libraries",
    "start": "181480",
    "end": "187159"
  },
  {
    "text": "that handle everything and so there are a lot of use cases for integrating with external libraries um and this each session that",
    "start": "187159",
    "end": "194720"
  },
  {
    "text": "we have today except for the final session we'll have a session project associated with it where we'll spend",
    "start": "194720",
    "end": "199959"
  },
  {
    "text": "about a half hour doing um kind of like a larger more complex uh little project",
    "start": "199959",
    "end": "206239"
  },
  {
    "text": "uh with some of the things that we learned during that session so in session one our project will be wrap an Express server with effect um even",
    "start": "206239",
    "end": "213480"
  },
  {
    "text": "though we have an HTTP integration um already um still a lot of usful patterns we can learn in session two um we're",
    "start": "213480",
    "end": "221640"
  },
  {
    "text": "going to be talking about fiber synchronization and coordination um so",
    "start": "221640",
    "end": "226840"
  },
  {
    "text": "how do we synchronize different fibers how how do we communicate between different fibers in our effect app how",
    "start": "226840",
    "end": "233319"
  },
  {
    "text": "can we really utilize these low-level Primitives to um build cool stuff with",
    "start": "233319",
    "end": "238599"
  },
  {
    "text": "effect um um the session project in this session will be to build a rate limiter",
    "start": "238599",
    "end": "244280"
  },
  {
    "text": "you'll see we'll be going with a much more complex implementation than what we actually ended up with in the core",
    "start": "244280",
    "end": "249560"
  },
  {
    "text": "effect Library um but I think it'll be useful to kind of uh explore a lot of",
    "start": "249560",
    "end": "254799"
  },
  {
    "text": "the things that we're going to be discussing in session three in the afternoon so between sessions one and",
    "start": "254799",
    "end": "261239"
  },
  {
    "text": "two we'll have a 15-minute break then we'll have an hour and a half between session 2 and 3 for lunch um at 2:00",
    "start": "261239",
    "end": "268759"
  },
  {
    "text": "we'll get back together for session three um where we'll talk about batching and caching with requests um so we're",
    "start": "268759",
    "end": "275000"
  },
  {
    "text": "going to explore some Advanced design patterns surrounding request um try to",
    "start": "275000",
    "end": "280960"
  },
  {
    "text": "get a little bit of a better understanding about effects built-in uh batching and caching",
    "start": "280960",
    "end": "287360"
  },
  {
    "text": "mechanisms we talk a little bit about caching computations and building custom request resolvers so we'll finish this",
    "start": "287360",
    "end": "293960"
  },
  {
    "text": "session by reimplementing the data loader request resolver from the experimental Library so don't cheat and",
    "start": "293960",
    "end": "301000"
  },
  {
    "text": "look at the experimental Library while we're doing that project um but again like a lot of really useful things that",
    "start": "301000",
    "end": "307400"
  },
  {
    "text": "we can learn uh by by doing this and then in session four we'll be doing a",
    "start": "307400",
    "end": "313600"
  },
  {
    "text": "deep dive into observability and monitoring with effect so talking about custom loggers for your effect",
    "start": "313600",
    "end": "319560"
  },
  {
    "text": "application exploring the metrics API that we provide um how do we Trace applications with effect um and instead",
    "start": "319560",
    "end": "326400"
  },
  {
    "text": "of a session project uh in session 4 we actually have a application that we",
    "start": "326400",
    "end": "332560"
  },
  {
    "text": "built um that uses patterns that we'll be discussing throughout the day um which we'll basically give you guys the",
    "start": "332560",
    "end": "338800"
  },
  {
    "text": "ability to play with we'll give you guys an open AI key and um you guys can play with the app and we'll talk a little bit",
    "start": "338800",
    "end": "345479"
  },
  {
    "text": "about integrating with external monitoring tools and whatnot again before we like launch into",
    "start": "345479",
    "end": "353039"
  },
  {
    "text": "the presentation um I just want to encourage you guys to ask questions if you have them um and yeah so let's get",
    "start": "353039",
    "end": "358880"
  },
  {
    "start": "357000",
    "end": "3366000"
  },
  {
    "text": "started so our first session is is focused on",
    "start": "358880",
    "end": "365039"
  },
  {
    "text": "integrating with effect with external apis and when I approach the problem of",
    "start": "365039",
    "end": "371560"
  },
  {
    "text": "trying to wrap an external API with effect there are really like three options that you have the first option",
    "start": "371560",
    "end": "378720"
  },
  {
    "text": "is kind of like the one-off approach where you don't really need like a full-fledged integration you're just",
    "start": "378720",
    "end": "384160"
  },
  {
    "text": "wrapping like a single API call and so often times just a oneoff wrapper for a client method is enough",
    "start": "384160",
    "end": "390720"
  },
  {
    "text": "the second option is like a little bit more flexible and probably the most common approach that you'll see when we",
    "start": "390720",
    "end": "397759"
  },
  {
    "text": "wrap external apis to provide you with good uh Library Integrations where we",
    "start": "397759",
    "end": "403000"
  },
  {
    "text": "have an effect-based wrapper for accessing the underlying client or API",
    "start": "403000",
    "end": "408840"
  },
  {
    "text": "itself and then option three is kind of like all in on effect um we wrap every",
    "start": "408840",
    "end": "414240"
  },
  {
    "text": "client method every API that we need to integrate with we have like an effect based wrapper for um and so we can take",
    "start": "414240",
    "end": "420360"
  },
  {
    "text": "a look at some of examples of this",
    "start": "420360",
    "end": "426960"
  },
  {
    "text": "um we're going to be looking at code examples today as well um if the code is",
    "start": "426960",
    "end": "434520"
  },
  {
    "text": "too small can you guys raise your hand too small perfect thank",
    "start": "434520",
    "end": "440879"
  },
  {
    "text": "you how's that better okay cool um so to kind of exemp",
    "start": "441240",
    "end": "449520"
  },
  {
    "text": "exemplify what I'm talking about about the three options that we have um I chose the open AI library to as kind of",
    "start": "449520",
    "end": "456680"
  },
  {
    "text": "our example so we have uh we want to integrate with open AI we want to be",
    "start": "456680",
    "end": "461879"
  },
  {
    "text": "able to make requests uh to the open AI API by using their client Library not",
    "start": "461879",
    "end": "467120"
  },
  {
    "text": "one that we've made a custom library for um and again there are several",
    "start": "467120",
    "end": "473599"
  },
  {
    "text": "different options that we have so if we think about like the one-off approach right um there are a lot of tradeoffs",
    "start": "473599",
    "end": "479560"
  },
  {
    "text": "that you have to make when using this one-off approach to graph external clients um",
    "start": "479560",
    "end": "486840"
  },
  {
    "text": "namely you end up having to pass in a lot more information to your method calls you end up with um a lot of",
    "start": "486840",
    "end": "493319"
  },
  {
    "text": "verbosity in your code um because again each one of these uh methods that you're calling needs to be wrapped so in this",
    "start": "493319",
    "end": "499159"
  },
  {
    "text": "case we're using the tri promise API from effect to wrap the open a open API",
    "start": "499159",
    "end": "504520"
  },
  {
    "text": "uh chat completions um API but the point here is that often times this",
    "start": "504520",
    "end": "511879"
  },
  {
    "text": "integration is only appropriate when you're only calling these these apis once in your effect application a much",
    "start": "511879",
    "end": "518120"
  },
  {
    "text": "more common and flexible approach that you'll see um even us using inside the core libraries is to create an",
    "start": "518120",
    "end": "525000"
  },
  {
    "text": "effect-based wrapper for the client um so in this case we have the open AI",
    "start": "525000",
    "end": "530480"
  },
  {
    "text": "client itself um and this call method that we're using",
    "start": "530480",
    "end": "535600"
  },
  {
    "text": "here basically receives a function that gives us access to the underlying client Cent um as well as an abort signal and",
    "start": "535600",
    "end": "542800"
  },
  {
    "text": "we can return a promise from this function call and then underneath the hood we wrap uh the whole call with tri",
    "start": "542800",
    "end": "549399"
  },
  {
    "text": "promise and you can see like just by making this simplification we get a ton more flexibility out of integrating with",
    "start": "549399",
    "end": "555959"
  },
  {
    "text": "this external client right um the final option is the all-in on effect approach",
    "start": "555959",
    "end": "564399"
  },
  {
    "text": "um where there are certain situations where this approach May appropriate",
    "start": "564399",
    "end": "570959"
  },
  {
    "text": "usually the situations where you might want to consider going all in on effect is when you want to return some custom",
    "start": "570959",
    "end": "578040"
  },
  {
    "text": "data type from calling an external API like if you want to get a streaming response out of it uh or if you have",
    "start": "578040",
    "end": "585519"
  },
  {
    "text": "some uh other custom information that you want to return um a good example",
    "start": "585519",
    "end": "591480"
  },
  {
    "text": "here is in this completions uh API that we're",
    "start": "591480",
    "end": "596959"
  },
  {
    "text": "that we've built up here we take in a bunch of options and you can see by looking at the return type that we're",
    "start": "596959",
    "end": "602560"
  },
  {
    "text": "actually returning a stream from this call so we're still utilizing our flexible wrapper for actually calling",
    "start": "602560",
    "end": "609160"
  },
  {
    "text": "the external API um but then we handle the internal stream",
    "start": "609160",
    "end": "615800"
  },
  {
    "text": "wrapping it with effect so you guys can kind of get an idea of the different approaches that we can potentially use",
    "start": "615800",
    "end": "621880"
  },
  {
    "text": "when wrapping these external apis um but the question still is you",
    "start": "621880",
    "end": "627880"
  },
  {
    "text": "know we want to integrate with these external intern apis how do we actually go about doing this what's the approach what's the decision Matrix how do we",
    "start": "627880",
    "end": "634240"
  },
  {
    "text": "actually go about integrating with these clients because we get these questions a lot in Discord oh I want to use X",
    "start": "634240",
    "end": "639880"
  },
  {
    "text": "Library but I don't really know how to wrap it with effect um again there's kind of like",
    "start": "639880",
    "end": "646200"
  },
  {
    "text": "three major categories that we have here there are promise-based apis that we want to integrate with I'm not going to",
    "start": "646200",
    "end": "652000"
  },
  {
    "text": "belabor this point because this is very um I think base level but we have the",
    "start": "652000",
    "end": "657320"
  },
  {
    "text": "effect. promise API which allows to wrap a promise returning an unknown error um",
    "start": "657320",
    "end": "662680"
  },
  {
    "text": "and then if you have a more specific error you want to return we have obviously Tri promise which we've seen",
    "start": "662680",
    "end": "667920"
  },
  {
    "text": "already allowing us to take a more specific error and return it from uh basically wrap the errors that we're",
    "start": "667920",
    "end": "674240"
  },
  {
    "text": "getting from that API um but I think where things maybe get a little bit more hairy or maybe a",
    "start": "674240",
    "end": "680720"
  },
  {
    "text": "little bit more complex is when we have to integrate with callback based apis um and some questions that you",
    "start": "680720",
    "end": "687120"
  },
  {
    "text": "might want to ask yourself is the call back API a single shot API is it a",
    "start": "687120",
    "end": "692320"
  },
  {
    "text": "multi-shot call back or are we at some sort of execution boundary where we actually need to run the effect that",
    "start": "692320",
    "end": "698839"
  },
  {
    "text": "we're concerned about so to get a little bit more clarity here if we have a singleshot",
    "start": "698839",
    "end": "706480"
  },
  {
    "text": "callback one of some of the more useful apis that we have in effect are the effect. async uh combinators that we",
    "start": "706480",
    "end": "713120"
  },
  {
    "text": "have these Constructors allow us to wrap uh asynchronous callbacks with an effect",
    "start": "713120",
    "end": "718720"
  },
  {
    "text": "so here you can see we're we want to integrate with the node file system read file",
    "start": "718720",
    "end": "724680"
  },
  {
    "text": "method and we're using the effect. async Constructor um to basically do this",
    "start": "724680",
    "end": "730240"
  },
  {
    "text": "integration effect. async is one of the only Constructors that we have or in the",
    "start": "730240",
    "end": "736040"
  },
  {
    "text": "smallest category of Constructors that we have where we don't get um automatic",
    "start": "736040",
    "end": "741440"
  },
  {
    "text": "uh basic like um where we have to manually annotate the types um and it's",
    "start": "741440",
    "end": "747240"
  },
  {
    "text": "because we have to use this resume function so typescript can't actually like do the inference for us um but",
    "start": "747240",
    "end": "753959"
  },
  {
    "text": "effect. async gives us this resume function which allows us to call an asynchronous API and resume with an",
    "start": "753959",
    "end": "759720"
  },
  {
    "text": "effect at some point later on so within the effect. async Constructor we can",
    "start": "759720",
    "end": "765240"
  },
  {
    "text": "call our read file method and then inside the call back we can actually use resume to pass an effect back into the",
    "start": "765240",
    "end": "771160"
  },
  {
    "text": "effect runtime so if we get an error we can fail that effect and resume with that failure or if we get a successful",
    "start": "771160",
    "end": "778279"
  },
  {
    "text": "respon uh if we if the call back is successful we can resume with the data",
    "start": "778279",
    "end": "784399"
  },
  {
    "text": "successfully um and there are with the most recent I believe uh release of",
    "start": "784399",
    "end": "790839"
  },
  {
    "text": "effect we've Consolidated the async apis for effect down to just two we have",
    "start": "790839",
    "end": "796000"
  },
  {
    "text": "effect. async which is useful when you have a single asynchronous call back to import um into effect and then we have",
    "start": "796000",
    "end": "802920"
  },
  {
    "text": "effect. async effect which is useful for when the Callback that you're",
    "start": "802920",
    "end": "808120"
  },
  {
    "text": "importing also require as an effectful operation so taking a look back at async",
    "start": "808120",
    "end": "814519"
  },
  {
    "text": "we can call the call back directly here um but if the logic that we need to perform in this asynchronous call back",
    "start": "814519",
    "end": "821279"
  },
  {
    "text": "is effectful in and of itself we can actually use async effect to do that work allowing us to actually return an",
    "start": "821279",
    "end": "828440"
  },
  {
    "text": "effect within that async call both of these methods can optionally return a canceler and that cancel will be run",
    "start": "828440",
    "end": "835600"
  },
  {
    "text": "when the fiber that's running that async effect. async method is interrupted so we don't actually show it",
    "start": "835600",
    "end": "843040"
  },
  {
    "text": "off here because we have a quick coding exercise to do here um where we want to",
    "start": "843040",
    "end": "849360"
  },
  {
    "text": "basically utilize the effect. async family of Constructors to import an asynchronous call back into effect the",
    "start": "849360",
    "end": "855360"
  },
  {
    "text": "requirements of this exercise are basically to reimplement effect. sleep",
    "start": "855360",
    "end": "861600"
  },
  {
    "text": "um using set timeout um so we want to take the number of milliseconds as an argument and",
    "start": "861600",
    "end": "867000"
  },
  {
    "text": "suspend the current fiber for this specified number of milliseconds um and then resume that",
    "start": "867000",
    "end": "873000"
  },
  {
    "text": "fiber once that number of milliseconds has elapsed um and if you guys take a look",
    "start": "873000",
    "end": "878240"
  },
  {
    "text": "at the workshop code under the workshop directory under exercises in session one",
    "start": "878240",
    "end": "884120"
  },
  {
    "text": "you'll see our exercises organized in order so if you guys would crack open",
    "start": "884120",
    "end": "889199"
  },
  {
    "text": "exercise zero you'll see that we've specked out this Sleep Method so we're",
    "start": "889199",
    "end": "894519"
  },
  {
    "text": "going to take about 10 minutes and try to implement effect. sleep ourselves",
    "start": "894519",
    "end": "900639"
  },
  {
    "text": "um and if obviously there's questions you guys can discuss amongst yourselves feel free to ask Mike or I anything um",
    "start": "900639",
    "end": "908279"
  },
  {
    "text": "as a bonus Point your implementation should also properly handle again if",
    "start": "908279",
    "end": "913720"
  },
  {
    "text": "that effect. async call itself is interrupted um by using a cancellor so",
    "start": "913720",
    "end": "921240"
  },
  {
    "text": "bonus points we'll show we'll show exactly what I mean but give it a",
    "start": "921240",
    "end": "926879"
  },
  {
    "text": "try all right so why don't we spend a few minutes discussing this um so if we",
    "start": "927959",
    "end": "935040"
  },
  {
    "text": "crack up there is a Solutions directory in here too so you guys can explore the solutions if you want I'd encourage you",
    "start": "935040",
    "end": "940880"
  },
  {
    "text": "to try the exercise before you actually look at the solution but um that's up to",
    "start": "940880",
    "end": "946240"
  },
  {
    "text": "you um you guys can see the code right like I checked before but you guys can",
    "start": "946240",
    "end": "952959"
  },
  {
    "text": "see raise your hand if you can't see can't see okay",
    "start": "952959",
    "end": "960920"
  },
  {
    "text": "is that better a little bit the solutions are also in the repository itself so if you",
    "start": "966440",
    "end": "972000"
  },
  {
    "text": "can't see um I think this is as big as I I can make",
    "start": "972000",
    "end": "978199"
  },
  {
    "text": "it um but let's spend a few minutes discussing this and if you if if you can't see we'll we'll U we'll make an",
    "start": "979720",
    "end": "985800"
  },
  {
    "text": "adjustment in the Break um but but so we can imple this is a much",
    "start": "985800",
    "end": "992680"
  },
  {
    "text": "simpler version of effect. sleep obviously than we have in the effect Library itself but the concepts are the",
    "start": "992680",
    "end": "997880"
  },
  {
    "text": "same right so we want to sleep for some number of milliseconds and in this case we're using the set timeout API uh to do",
    "start": "997880",
    "end": "1005240"
  },
  {
    "text": "that so um set timeout allows us to obviously you know have a delay",
    "start": "1005240",
    "end": "1011399"
  },
  {
    "text": "associated with running some uh program and by using Sorry by using set timeout",
    "start": "1011399",
    "end": "1019199"
  },
  {
    "text": "um we can resume the execution of that fiber after some amount of time and in",
    "start": "1019199",
    "end": "1024918"
  },
  {
    "text": "this case we can just resume with effect. unit because there's really no information that we want to um that we",
    "start": "1024919",
    "end": "1030160"
  },
  {
    "text": "want to propagate forward um and I know I mentioned before that as bonus",
    "start": "1030160",
    "end": "1035839"
  },
  {
    "text": "points uh you guys could explore what a cancellor could be used for in effect.",
    "start": "1035839",
    "end": "1041000"
  },
  {
    "text": "async so in this case um we can utilize the cancellor to make sure that the",
    "start": "1041000",
    "end": "1046480"
  },
  {
    "text": "timeout is properly cleared uh in the event that the fiber is interrupted um I want to make a note here that the",
    "start": "1046480",
    "end": "1054640"
  },
  {
    "text": "cancellor is should not really be synonymous with cleanup because the",
    "start": "1054640",
    "end": "1060400"
  },
  {
    "text": "cancellor won't be run if there's a failure right the failure should be handled um by resuming with that failure",
    "start": "1060400",
    "end": "1068919"
  },
  {
    "text": "uh this will only be run if the effect in question is actually interrupted um and so the reason why I'm",
    "start": "1068919",
    "end": "1077039"
  },
  {
    "text": "making that distinction is because this kind of maybe for anybody who's worked with react might look a little bit similar to the structure that you get",
    "start": "1077039",
    "end": "1083360"
  },
  {
    "text": "with a use effect call right you have some work that you can do and then you can return something to kind of clean up that use",
    "start": "1083360",
    "end": "1089360"
  },
  {
    "text": "effect um but in this case the canceler that we return uh would only be uh run",
    "start": "1089360",
    "end": "1096000"
  },
  {
    "text": "if the fiber that's running effect. async is interrupted um and we can kind of show off this Behavior a little bit",
    "start": "1096000",
    "end": "1104120"
  },
  {
    "text": "um I'm going to put my mic down and I'll yell so so we can kind of show off this",
    "start": "1104120",
    "end": "1111159"
  },
  {
    "text": "Behavior a little bit if we adjust our program so let's Fork our call to sleep into a separate",
    "start": "1111159",
    "end": "1117760"
  },
  {
    "text": "fiber so now we're going to be running sleep uh in a separate fiber and we can",
    "start": "1117760",
    "end": "1123120"
  },
  {
    "text": "simulate interruption or not simulate we can actually interrupt by timing",
    "start": "1123120",
    "end": "1129039"
  },
  {
    "text": "out sleep after maybe",
    "start": "1129039",
    "end": "1134240"
  },
  {
    "text": "Millies minus I don't know 100 um so this is always going to time out our",
    "start": "1134240",
    "end": "1140760"
  },
  {
    "text": "call to sleep right we run this it's getting",
    "start": "1140760",
    "end": "1148760"
  },
  {
    "text": "very as you can see I ran everything this morning um right now we won't see",
    "start": "1154559",
    "end": "1162039"
  },
  {
    "text": "anything because we're not doing anything in the case of interruption but if we add just like even just a simple",
    "start": "1162039",
    "end": "1168159"
  },
  {
    "text": "console log here oops I'm very sorry for all the",
    "start": "1168159",
    "end": "1174000"
  },
  {
    "text": "popups I may have to zoom out just a tiny",
    "start": "1184559",
    "end": "1189158"
  },
  {
    "text": "bit um if we add a timeout here and then we make",
    "start": "1191200",
    "end": "1199360"
  },
  {
    "text": "sure and we make sure that this okay so few things going on here um",
    "start": "1199360",
    "end": "1210039"
  },
  {
    "text": "we're forking the Sleep into a separate fiber we don't actually need to do this to exemplify what I'm talking about um",
    "start": "1210039",
    "end": "1215919"
  },
  {
    "text": "but it's kind of useful to have this running in a separate fiber we yield immediately to make sure that at least that fiber starts um and",
    "start": "1215919",
    "end": "1224280"
  },
  {
    "text": "then when we actually run the uh program you can see that Interruption occurred",
    "start": "1224280",
    "end": "1230960"
  },
  {
    "text": "obviously because we timed out when you use effect. timeout and you actually time out the execution of effect it",
    "start": "1230960",
    "end": "1236440"
  },
  {
    "text": "interrupts the fiber running that effect and in this case we're actually able to see that console log that we put in our",
    "start": "1236440",
    "end": "1244159"
  },
  {
    "text": "cleanup or in our cancellor function here so I I I think that yeah it",
    "start": "1244159",
    "end": "1250280"
  },
  {
    "text": "unintentionally made this example slightly more complicated basically when you Fork a",
    "start": "1250280",
    "end": "1256039"
  },
  {
    "text": "fiber um that fiber if the way that the if the way that run",
    "start": "1256039",
    "end": "1262000"
  },
  {
    "text": "Fork Works down here um that fiber may not have like fully started by the time",
    "start": "1262000",
    "end": "1268520"
  },
  {
    "text": "our program's done um so yield now basically allows me to yield execution back to the fiber that I forked uh in",
    "start": "1268520",
    "end": "1275880"
  },
  {
    "text": "order to make sure that that's actually executed for the apis that we have in platform node I think keep me honest you",
    "start": "1275880",
    "end": "1282640"
  },
  {
    "text": "to um I think that the platform node runtime makes sure that if we Fork a",
    "start": "1282640",
    "end": "1289640"
  },
  {
    "text": "fiber we actually have the ability to execute it but the yield now in this case it like if I remove",
    "start": "1289640",
    "end": "1295919"
  },
  {
    "text": "this we you'll see that we basically we don't get that interrupted",
    "start": "1295919",
    "end": "1301080"
  },
  {
    "text": "log because that fiber hasn't even had the chance to like start executing by the time our program is actually done",
    "start": "1301080",
    "end": "1307960"
  },
  {
    "text": "does that make",
    "start": "1307960",
    "end": "1310440"
  },
  {
    "text": "sense um let's try I actually don't know yeah I don't I I don't think so I think",
    "start": "1314799",
    "end": "1320240"
  },
  {
    "text": "the whole thing here is that when we've when we've forked a fiber we have that execution running but in What's",
    "start": "1320240",
    "end": "1327880"
  },
  {
    "text": "Happening Here is we we're not ever actually a better way to do this probably would be to remove the fork or",
    "start": "1327880",
    "end": "1335919"
  },
  {
    "text": "you could explicitly join the fiber later so if you were to join the fiber later in this program like we wouldn't",
    "start": "1335919",
    "end": "1342760"
  },
  {
    "text": "need the yield now the yield now is unintentionally complicating this example so I apologize yeah so maybe",
    "start": "1342760",
    "end": "1349960"
  },
  {
    "text": "let's do exactly that and make this a little bit simpler",
    "start": "1349960",
    "end": "1355919"
  },
  {
    "text": "that like the in this case the logs disappeared in this case the log should be",
    "start": "1355919",
    "end": "1363000"
  },
  {
    "text": "there obviously we get an error because our program was interrupted um but we",
    "start": "1364799",
    "end": "1370200"
  },
  {
    "text": "still get the like cleanup being executed so again my apologies for unintentionally complicating this very",
    "start": "1370200",
    "end": "1377080"
  },
  {
    "text": "simple example T it doesn't throw necessarily it effect",
    "start": "1377080",
    "end": "1384600"
  },
  {
    "text": "fails with a timeout exception yeah and you'll see it in the in the uh",
    "start": "1384600",
    "end": "1391000"
  },
  {
    "text": "in the error Channel you can actually recover from a timeout exception if you need",
    "start": "1391000",
    "end": "1396120"
  },
  {
    "text": "to other questions we have another exercise that's related to",
    "start": "1396120",
    "end": "1402519"
  },
  {
    "text": "async um so if there are no other questions about normal",
    "start": "1403120",
    "end": "1409440"
  },
  {
    "text": "async fact. async okay um so with multi-shot",
    "start": "1409440",
    "end": "1415279"
  },
  {
    "text": "callbacks um we can actually leverage the stream. async methods so obviously",
    "start": "1415279",
    "end": "1421760"
  },
  {
    "text": "with single shot callbacks those are like um you know exactly that single shot the whole streaming API that we",
    "start": "1421760",
    "end": "1427760"
  },
  {
    "text": "provide with effect is designed to handle uh multi-shot effects or effects that are can be executed uh in many",
    "start": "1427760",
    "end": "1435240"
  },
  {
    "text": "times so uh in if we have a multi-shot call back for",
    "start": "1435240",
    "end": "1442159"
  },
  {
    "text": "example like an event emitter here this is a very dumb example but I tried to make it simple if we have an event",
    "start": "1442159",
    "end": "1447760"
  },
  {
    "text": "emitter for example that can em emit many events over time we can utilize the stream. async um set of combinators to",
    "start": "1447760",
    "end": "1455559"
  },
  {
    "text": "basically do the same thing wrap these asynchronous callbacks but allow us to",
    "start": "1455559",
    "end": "1461159"
  },
  {
    "text": "resume uh with some information in that Stream So in this case uh in in the",
    "start": "1461159",
    "end": "1467960"
  },
  {
    "text": "Stream . async uh combinators we actually get an emit data type instead",
    "start": "1467960",
    "end": "1473799"
  },
  {
    "text": "of just a resumption function and emit has some helper methods on it that allow us to do some useful stuff with stream",
    "start": "1473799",
    "end": "1480559"
  },
  {
    "text": "basically like convenience methods so here we're just using emit do single um but let's say that your uh stream. async",
    "start": "1480559",
    "end": "1488679"
  },
  {
    "text": "returns um like a list of results for example if you have some as uh",
    "start": "1488679",
    "end": "1494039"
  },
  {
    "text": "multi-shot callback API that emits batches right um You can use . chunk",
    "start": "1494039",
    "end": "1499279"
  },
  {
    "text": "there's emit do fail there's em. succeed so there's like a bunch of helper methods on that emit data type that",
    "start": "1499279",
    "end": "1504600"
  },
  {
    "text": "allow um for basically getting data back into your stream that are just just",
    "start": "1504600",
    "end": "1510399"
  },
  {
    "text": "there for convenience in this case we're just using emit do single because we're getting one event at a time but because",
    "start": "1510399",
    "end": "1516399"
  },
  {
    "text": "it's a multi-shot callback we're using stream. async instead of effect. async",
    "start": "1516399",
    "end": "1521559"
  },
  {
    "text": "so um let's take a quick peek we have one",
    "start": "1521559",
    "end": "1527799"
  },
  {
    "text": "additional stream. async method because um we can actually have with stream.",
    "start": "1527799",
    "end": "1534320"
  },
  {
    "text": "async we also have access to stream. async scoped which is useful when you're",
    "start": "1534320",
    "end": "1540120"
  },
  {
    "text": "importing an asynchronous callback that requires some scoped effect so imagine there's actually a exercise that we",
    "start": "1540120",
    "end": "1546960"
  },
  {
    "text": "definitely won't get to but um you guys can practice it if you want to there imagine you have some API that you want",
    "start": "1546960",
    "end": "1553880"
  },
  {
    "text": "to integrate uh in a streaming fashion that that needs a scope resource the",
    "start": "1553880",
    "end": "1559399"
  },
  {
    "text": "exercise in question that I'm talking about is integrating with a file watching API that needs to set up and then tear down uh that um internal",
    "start": "1559399",
    "end": "1568640"
  },
  {
    "text": "subscription to the file system you can actually use stream. Asing scoped to",
    "start": "1568640",
    "end": "1574320"
  },
  {
    "text": "have a scoped effect inside your call to stream. Asing scoped um and still have",
    "start": "1574320",
    "end": "1579919"
  },
  {
    "text": "access to that emit method to allow you to emit data into the stream um if you",
    "start": "1579919",
    "end": "1586799"
  },
  {
    "text": "want to see an example of that uh or if you want to try the exercise yourself at some point the um I'll point out the",
    "start": "1586799",
    "end": "1593320"
  },
  {
    "text": "exercise at the end of this session that we probably won't have time for um but that additional method on stream is",
    "start": "1593320",
    "end": "1599960"
  },
  {
    "text": "useful for when we have a scoped resource that we also want to import into a stream um so taking a step back to a",
    "start": "1599960",
    "end": "1608360"
  },
  {
    "text": "little bit more simple um let's actually Implement ourselves this capture events method so",
    "start": "1608360",
    "end": "1615600"
  },
  {
    "text": "we'll take the stream do stream. Asing family of construct and we'll try to import an asynchronous call back into a",
    "start": "1615600",
    "end": "1620799"
  },
  {
    "text": "stream we take an event emitter and an event name and we should handle pushing successful event emissions into our",
    "start": "1620799",
    "end": "1626880"
  },
  {
    "text": "stream and fail the stream if there's an emission error so in our",
    "start": "1626880",
    "end": "1633399"
  },
  {
    "text": "exercises you'll see under session one there's exercise one um all set up for you to get started so let's take uh",
    "start": "1633399",
    "end": "1640760"
  },
  {
    "text": "maybe 10 minutes again and try to implement this ourselves and again raise",
    "start": "1640760",
    "end": "1646039"
  },
  {
    "text": "your hands if there's questions I'll be walking around",
    "start": "1646039",
    "end": "1650158"
  },
  {
    "text": "so why don't we pick things up again um just since we're running a tiny",
    "start": "1652320",
    "end": "1658760"
  },
  {
    "text": "bit ahead of schedule and if there's questions we can address them let's take a look at the",
    "start": "1658760",
    "end": "1666679"
  },
  {
    "text": "solution so um slight uh somewhat similar to what we",
    "start": "1669279",
    "end": "1676360"
  },
  {
    "text": "saw on the slide although in this case we're obvious ly handling the emission errors as well um but",
    "start": "1676360",
    "end": "1683360"
  },
  {
    "text": "the point here is to basically take a look at um we ha we have some event",
    "start": "1683360",
    "end": "1690240"
  },
  {
    "text": "emitter that we want to wrap with a stream. async this is a multi-shot callback that we want to import into a stream um so we're receiving the EM the",
    "start": "1690240",
    "end": "1697600"
  },
  {
    "text": "emitter itself and the event name as arguments we can wrap that in an async a",
    "start": "1697600",
    "end": "1703640"
  },
  {
    "text": "stream. async call directly there's no resourceful operation here we don't really need uh any effectful operations",
    "start": "1703640",
    "end": "1710679"
  },
  {
    "text": "to do this um so we can wrap this directly in a stream. async sorry there there a question raise",
    "start": "1710679",
    "end": "1718200"
  },
  {
    "text": "your hand if there's questions while I'm talking and also shout at me if I don't see you um so if we get an error we can",
    "start": "1718200",
    "end": "1724519"
  },
  {
    "text": "again use this emit data type here uh to help us and directly fail with that",
    "start": "1724519",
    "end": "1730760"
  },
  {
    "text": "error um and if there's a value that we get back we can use emit do single to",
    "start": "1730760",
    "end": "1736519"
  },
  {
    "text": "just emit that individual value I'll quickly",
    "start": "1736519",
    "end": "1741200"
  },
  {
    "text": "highlight that there are a bunch of methods on um the emit data type that",
    "start": "1741799",
    "end": "1748159"
  },
  {
    "text": "are helpful so emit do chunk is useful again for situations where these",
    "start": "1748159",
    "end": "1753360"
  },
  {
    "text": "callback apis may be batched so you may be getting a list of results coming back from that call back so you can pass that",
    "start": "1753360",
    "end": "1760399"
  },
  {
    "text": "on directly to em it. chunk um there's also a bunch of other helper methods in here to try to help with situations",
    "start": "1760399",
    "end": "1767120"
  },
  {
    "text": "where you may want to die with the like result of some failure you have a",
    "start": "1767120",
    "end": "1773200"
  },
  {
    "text": "message that you want to pass along with that um like unrecoverable error uh if",
    "start": "1773200",
    "end": "1778760"
  },
  {
    "text": "the stream is done you can directly signal that um with this emit data type",
    "start": "1778760",
    "end": "1783880"
  },
  {
    "text": "um we should probably change the name of halt uh to interrupt but um you can",
    "start": "1783880",
    "end": "1789960"
  },
  {
    "text": "direct you can interrupt the uh stream um you can use from effect and from effect chunk to basically return effects",
    "start": "1789960",
    "end": "1797679"
  },
  {
    "text": "directly from these methods um so there's a lot of flexibility with the emit uh data type",
    "start": "1797679",
    "end": "1804679"
  },
  {
    "text": "um and if we run this example hang I'm put the mic",
    "start": "1804679",
    "end": "1811480"
  },
  {
    "text": "down say that again it is and you can so it",
    "start": "1811519",
    "end": "1819559"
  },
  {
    "text": "is because why have an object when you going to have a function um so emit",
    "start": "1819559",
    "end": "1824919"
  },
  {
    "text": "itself takes an effect um the reason I don't point this out",
    "start": "1824919",
    "end": "1830399"
  },
  {
    "text": "necessarily is because the data type it the effect that it takes may be like somewhat um less easy to read than some",
    "start": "1830399",
    "end": "1839519"
  },
  {
    "text": "of the helper methods and in most cases you you don't necessarily need to call emit directly but emit is a function as",
    "start": "1839519",
    "end": "1845640"
  },
  {
    "text": "well that has these methods attached to it it takes an effect that gets either a chunk or an option of the error",
    "start": "1845640",
    "end": "1851760"
  },
  {
    "text": "signaling with option. nun is the same thing as calling emit DOD it's basically",
    "start": "1851760",
    "end": "1857120"
  },
  {
    "text": "just convenience method that's over the top of emit so option. none here basically is end of the stream option.",
    "start": "1857120",
    "end": "1863120"
  },
  {
    "text": "some with the error means that the stream has failed and so on",
    "start": "1863120",
    "end": "1868559"
  },
  {
    "text": "so that's a good that is good feedback actually can you put that in the Discord in the advanced disc uh Advanced effect",
    "start": "1880480",
    "end": "1887440"
  },
  {
    "text": "Discord Channel Channel that's a good point of feedback feedback also very much appreciated for the docs it is has been",
    "start": "1887440",
    "end": "1894559"
  },
  {
    "text": "a very iterative process for us so um any other questions before we just",
    "start": "1894559",
    "end": "1901000"
  },
  {
    "text": "run this really",
    "start": "1901000",
    "end": "1903720"
  },
  {
    "text": "quick so the way that this program is set up is it can um it's basically just",
    "start": "1908440",
    "end": "1915480"
  },
  {
    "text": "emitting a bunch of information I think I have it set up to like randomly",
    "start": "1915480",
    "end": "1920480"
  },
  {
    "text": "fail um So eventually we'll get some failure but uh the point here is that",
    "start": "1920880",
    "end": "1928200"
  },
  {
    "text": "we're able to import this event emitter directly into a stream so now we can",
    "start": "1928200",
    "end": "1934080"
  },
  {
    "text": "work with the stream in effect instead of having to deal with the underlying event emitter um and this kind of",
    "start": "1934080",
    "end": "1939639"
  },
  {
    "text": "pattern of wrapping multi-shot callbacks uh with um stream. async works for any",
    "start": "1939639",
    "end": "1946120"
  },
  {
    "text": "type of multi-shock callback so um hopefully this is a pattern that could become useful for you folks are",
    "start": "1946120",
    "end": "1953039"
  },
  {
    "text": "there any other questions about stream. async if we have time at the end I will",
    "start": "1953039",
    "end": "1958760"
  },
  {
    "text": "go back to the example um that highlights uh async scoped with",
    "start": "1958760",
    "end": "1963840"
  },
  {
    "text": "stream but any any questions about stream. async",
    "start": "1963840",
    "end": "1969518"
  },
  {
    "text": "itself cool do",
    "start": "1970080",
    "end": "1976440"
  },
  {
    "text": "okay so um again going back to the list of decision points that I mentioned at",
    "start": "1976440",
    "end": "1983080"
  },
  {
    "text": "the beginning we've talked about integrating with callback based apis that are single shot we've talked about",
    "start": "1983080",
    "end": "1988440"
  },
  {
    "text": "integrating with callback based apis that are multi-shot um we've talked about promise based apis which have very",
    "start": "1988440",
    "end": "1995240"
  },
  {
    "text": "the reasonably easy Constructors to use um but what about when we get to a",
    "start": "1995240",
    "end": "2001080"
  },
  {
    "text": "situation where we have a callback based API that's at an execution boundary so for example um like an effect request",
    "start": "2001080",
    "end": "2008600"
  },
  {
    "text": "Handler where we actually want to like run the effect to completion at that point um but we want to have our Express",
    "start": "2008600",
    "end": "2017559"
  },
  {
    "text": "server or request or HTTP server like wrapped by effect in situations where we get to an",
    "start": "2017559",
    "end": "2025039"
  },
  {
    "text": "execution boundary um it's often useful to directly access the effect",
    "start": "2025039",
    "end": "2032399"
  },
  {
    "text": "runtime um and when we bring up uh accessing the",
    "start": "2032399",
    "end": "2038080"
  },
  {
    "text": "runtime directly or uh creating custom run times it can sound somewhat complex",
    "start": "2038080",
    "end": "2044159"
  },
  {
    "text": "or maybe a little bit intimidating but I'm here to tell you that the runtime is an extremely simple",
    "start": "2044159",
    "end": "2051599"
  },
  {
    "text": "data type all a runtime is is it's just a object that has the context that",
    "start": "2051599",
    "end": "2059320"
  },
  {
    "text": "you've built for your effect app a fiber refs data type which is basically used",
    "start": "2059320",
    "end": "2065560"
  },
  {
    "text": "to carry all the fiber ref uh fiber refs in your effect app across different fiber boundaries and a set of runtime",
    "start": "2065560",
    "end": "2073320"
  },
  {
    "text": "Flags most of the time you'll never need to touch the runtime Flags or the fiber",
    "start": "2073320",
    "end": "2078800"
  },
  {
    "text": "reps or really even the context unless you're building yourself up a custom uh runtime um and there will be an example",
    "start": "2078800",
    "end": "2086040"
  },
  {
    "text": "of a situation where I needed to modify the runtime directly later um but this is really all a",
    "start": "2086040",
    "end": "2093079"
  },
  {
    "text": "runtime is it's a collection of these three data types that we can then use to actually execute the fiber itself like",
    "start": "2093079",
    "end": "2100359"
  },
  {
    "text": "run an effect on a fiber with this runtime data type we are not going to have an",
    "start": "2100359",
    "end": "2106839"
  },
  {
    "text": "exercise yet because the session project will involve uh utilizing the runtime",
    "start": "2106839",
    "end": "2112440"
  },
  {
    "text": "directly directly the effect runtime directly and instead we're going to briefly take a look at the scope data",
    "start": "2112440",
    "end": "2119680"
  },
  {
    "text": "type um because I think while most of us are familiar with the basic scope data",
    "start": "2119680",
    "end": "2125880"
  },
  {
    "text": "type right it's the foundation of Resource Management with effect it's very useful for conceptualizing effects",
    "start": "2125880",
    "end": "2131880"
  },
  {
    "text": "that have uh Resources with some Lifetime right you had mentioned before",
    "start": "2131880",
    "end": "2137119"
  },
  {
    "text": "um when we have some resource that we want to manage with effect we can uh use",
    "start": "2137119",
    "end": "2143400"
  },
  {
    "text": "the different um Resource Management apis that we have in effect like acquire release and things like that to indicate",
    "start": "2143400",
    "end": "2149319"
  },
  {
    "text": "that our effect requires some scope to be provided to it um we can attach finalizers to Scopes",
    "start": "2149319",
    "end": "2157359"
  },
  {
    "text": "which are basically functions that run when uh the resource needs to be closed",
    "start": "2157359",
    "end": "2163720"
  },
  {
    "text": "and we can also close the scope directly if um we have uh if we have a closable",
    "start": "2163720",
    "end": "2170319"
  },
  {
    "text": "scope which we'll talk about in a moment but there are other operators on scope that are really useful and",
    "start": "2170319",
    "end": "2177920"
  },
  {
    "text": "extremely powerful but they don't get as much attention um and these two operators are scope. extend and scope.",
    "start": "2177920",
    "end": "2184480"
  },
  {
    "text": "Fork scope. extend is literally the foundation for uh the scope layers that",
    "start": "2184480",
    "end": "2191400"
  },
  {
    "text": "you can get in effect so when you create layers in your application if you've ever used layer. scoped uh in your",
    "start": "2191400",
    "end": "2198359"
  },
  {
    "text": "effect apps the foundation for layer. scoped is being able to extend an existing scope uh to another effect well",
    "start": "2198359",
    "end": "2206560"
  },
  {
    "text": "again we'll talk about this in in a moment um then you can also Fork a child",
    "start": "2206560",
    "end": "2211920"
  },
  {
    "text": "scope off of some parent so maybe we can get a little bit of a visual of what this looks like",
    "start": "2211920",
    "end": "2219359"
  },
  {
    "text": "so on the left side of the screen here we have a parent scope and a child scope",
    "start": "2219359",
    "end": "2226720"
  },
  {
    "text": "that we've created in our effect app we're acquiring some resource inside the child scope which adds that a f a",
    "start": "2226720",
    "end": "2234880"
  },
  {
    "text": "finalizer to release that resource to that child scope so when that child scope is closed the finalizer is",
    "start": "2234880",
    "end": "2241560"
  },
  {
    "text": "executed right this is very simple like basic scope Management in effect what's cool about scope. extend",
    "start": "2241560",
    "end": "2249040"
  },
  {
    "text": "is you can you can manipulate where those finalizers actually get attached like what scope",
    "start": "2249040",
    "end": "2254520"
  },
  {
    "text": "are we actually using uh to provide to our effect right so on the right hand",
    "start": "2254520",
    "end": "2260680"
  },
  {
    "text": "side we're using scope. extend instead of just using the scope combinators directly we have a parent scope and we",
    "start": "2260680",
    "end": "2267800"
  },
  {
    "text": "may or may not have some child scope that wraps the acquisition of this resource right there might be a child scope there there might not be but if we",
    "start": "2267800",
    "end": "2275720"
  },
  {
    "text": "extend the uh parent scope if we if we for the acquir release that we're",
    "start": "2275720",
    "end": "2282200"
  },
  {
    "text": "performing if we use scope. extend to extend the parent scope into that resource acquisition then the finalizer",
    "start": "2282200",
    "end": "2288680"
  },
  {
    "text": "actually gets attached to the parent and not the child if there's even a child scope present and what's cool about that",
    "start": "2288680",
    "end": "2295440"
  },
  {
    "text": "is again when the parent scope is closed that's when your finalizers get executed so again going back to thinking about",
    "start": "2295440",
    "end": "2302079"
  },
  {
    "text": "layers um this is kind of why having multiple scoped layers Works um we can",
    "start": "2302079",
    "end": "2309319"
  },
  {
    "text": "Contin we build a scope and we continuously extend it with the layers that you're building with layer. scope",
    "start": "2309319",
    "end": "2316079"
  },
  {
    "text": "which basically is the scope that we wrap your entire the wrap the pro part",
    "start": "2316079",
    "end": "2321319"
  },
  {
    "text": "the point at which you provide your layer we build a scope and use it to provide to all those",
    "start": "2321319",
    "end": "2326880"
  },
  {
    "text": "layers um any questions about extending a scope it can be very useful when you",
    "start": "2326880",
    "end": "2333800"
  },
  {
    "text": "need to manually manage uh which scope is actually being",
    "start": "2333800",
    "end": "2338839"
  },
  {
    "text": "used for res for resource acquisition and release of resources especially if you're operating in a child scope but",
    "start": "2338839",
    "end": "2345319"
  },
  {
    "text": "you don't necessarily want the acquisition of that resource to be attached to that child scope that you",
    "start": "2345319",
    "end": "2350680"
  },
  {
    "text": "know you're going to be in and then there's forking a scope so I",
    "start": "2350680",
    "end": "2357240"
  },
  {
    "text": "mentioned before that we can we can manually close a scope which executes all the finalizers that are attached to",
    "start": "2357240",
    "end": "2363319"
  },
  {
    "text": "that scope right um but the only way we can manually close a scope is if we have a closable scope and when",
    "start": "2363319",
    "end": "2372960"
  },
  {
    "text": "we um the really the only way to get access to a closable scope there are a",
    "start": "2372960",
    "end": "2378200"
  },
  {
    "text": "couple but the easiest way in an effect app is to Fork the the parent scope that",
    "start": "2378200",
    "end": "2384920"
  },
  {
    "text": "we're already within that gives us access to a child closable scope which we can attach resources to and then we",
    "start": "2384920",
    "end": "2392240"
  },
  {
    "text": "can either you can see here manually scope. close that child which exec the",
    "start": "2392240",
    "end": "2397680"
  },
  {
    "text": "child finalizers or we can allow the",
    "start": "2397680",
    "end": "2403839"
  },
  {
    "text": "um this is actually somewhat incorrect but when that child scope closes um we",
    "start": "2403839",
    "end": "2410319"
  },
  {
    "text": "can basically execute the parent and CH child finalizers um so these two like scope",
    "start": "2410319",
    "end": "2416319"
  },
  {
    "text": "operations can be really useful if you need to manage scoped resources in a very granular way most of the time you",
    "start": "2416319",
    "end": "2424240"
  },
  {
    "text": "really won't need to drop down to this level um but it can can be really useful um for managing Scopes directly if you",
    "start": "2424240",
    "end": "2431760"
  },
  {
    "text": "need to any questions so we're going to take the",
    "start": "2431760",
    "end": "2438280"
  },
  {
    "text": "last half hour of this session and we're going to do a session project where",
    "start": "2438280",
    "end": "2443400"
  },
  {
    "text": "we're going to take a bunch of the stuff that we've already learned and try to build a simple Express Express rest API",
    "start": "2443400",
    "end": "2451359"
  },
  {
    "text": "perform some crud operations um and the project itself is going to be divided into three stages",
    "start": "2451359",
    "end": "2459240"
  },
  {
    "text": "stage one which we're going to do right now is to actually build up the express server um so we're going to implement",
    "start": "2459680",
    "end": "2466640"
  },
  {
    "text": "the listening functionality of our Express server our implementation should utilize the express service to gain",
    "start": "2466640",
    "end": "2472760"
  },
  {
    "text": "access to the express application this will make sense when I flip over to the code properly manage the opening and",
    "start": "2472760",
    "end": "2477960"
  },
  {
    "text": "closing of the express server itself um and as a slight wrinkle that",
    "start": "2477960",
    "end": "2486280"
  },
  {
    "text": "I'm throwing into this when you actually execute the listen method on the express server um we",
    "start": "2486280",
    "end": "2493240"
  },
  {
    "text": "should utilize effect. log to run um some message to log some message to the",
    "start": "2493240",
    "end": "2498800"
  },
  {
    "text": "console that maybe indicates like what port we're listening on so not a console. log and we want to use like the",
    "start": "2498800",
    "end": "2504040"
  },
  {
    "text": "effect. log combinator to do this and as a hint to be able to execute that effect. log inside that listen call back",
    "start": "2504040",
    "end": "2511960"
  },
  {
    "text": "which is an execution boundary we might consider accessing the under lying",
    "start": "2511960",
    "end": "2517480"
  },
  {
    "text": "runtime and utilizing that um so if we flip over to the code in session one not in the",
    "start": "2517480",
    "end": "2527359"
  },
  {
    "text": "solutions there is a project file um which again is divided into",
    "start": "2527359",
    "end": "2532640"
  },
  {
    "text": "three stages and if you scroll down past the instructions the server live",
    "start": "2532640",
    "end": "2539440"
  },
  {
    "text": "layer is where we're going to implement uh stage one so um you guys can delete",
    "start": "2539440",
    "end": "2546559"
  },
  {
    "text": "the existing code in here I was just trying to minimize the number of type errors we were getting um but see if you",
    "start": "2546559",
    "end": "2552920"
  },
  {
    "text": "guys can build up uh an Express server uh properly manage the life cycle of",
    "start": "2552920",
    "end": "2558880"
  },
  {
    "text": "that Express server and then um log using effect. log what port we're listening on um and again we're we're",
    "start": "2558880",
    "end": "2567240"
  },
  {
    "text": "using a layer uh to basically uh we're using a layer to do",
    "start": "2567240",
    "end": "2572559"
  },
  {
    "text": "this so you don't have to implement the layer functionality itself you can focus on implementing the actual Express server if there are questions just raise",
    "start": "2572559",
    "end": "2580280"
  },
  {
    "text": "your hand I'll come",
    "start": "2580280",
    "end": "2583000"
  },
  {
    "text": "by let's take a look at the solution for stage",
    "start": "2585760",
    "end": "2593040"
  },
  {
    "text": "one so um this was a good feedback for the",
    "start": "2596960",
    "end": "2603359"
  },
  {
    "text": "future but um if we take a look at the solution that I've come up with here um there are",
    "start": "2603359",
    "end": "2610920"
  },
  {
    "text": "a couple things going on here that I want to point out so the first thing is I apologize that there was uh that the",
    "start": "2610920",
    "end": "2616400"
  },
  {
    "text": "context tag for effect was a little bit buried uh in the file that's my fault for not putting it in a in a better",
    "start": "2616400",
    "end": "2622280"
  },
  {
    "text": "location um but all that Express tag does is",
    "start": "2622280",
    "end": "2627599"
  },
  {
    "text": "creates the express app itself um and returns it and it attaches body parser",
    "start": "2627599",
    "end": "2633280"
  },
  {
    "text": "in this case but um this is my fault I should have put this higher up for you folks but all it does is construct the",
    "start": "2633280",
    "end": "2641079"
  },
  {
    "text": "effect app itself and then effect has a uh effect.",
    "start": "2641079",
    "end": "2647800"
  },
  {
    "text": "runtime uh method which we can use to grab the existing runtime um that effect",
    "start": "2647800",
    "end": "2653520"
  },
  {
    "text": "is currently using to to run effects um and then we can basically use that",
    "start": "2653520",
    "end": "2659400"
  },
  {
    "text": "runtime to do stuff right in this case um this never is actually not needed",
    "start": "2659400",
    "end": "2665440"
  },
  {
    "text": "anymore um but effect. runtime allows us to access the",
    "start": "2665440",
    "end": "2670599"
  },
  {
    "text": "current runtime and so if we look at the type here we have an actual like instance of",
    "start": "2670599",
    "end": "2676760"
  },
  {
    "text": "runtime and like I mentioned on runtime we have the context",
    "start": "2676760",
    "end": "2683480"
  },
  {
    "text": "the fiber refs and the runtime Flags none of which we need to actually do anything with at this point but just",
    "start": "2683480",
    "end": "2689119"
  },
  {
    "text": "kind of like bringing it back to that image that I showed you so we are grabbing access to the current",
    "start": "2689119",
    "end": "2696280"
  },
  {
    "text": "runtime uh we're Cur currying run Fork this is we can use run Fork directly here if we",
    "start": "2696280",
    "end": "2702559"
  },
  {
    "text": "wanted to but um there are two pieces here that I think are helpful to point out the first is that we're using an",
    "start": "2702559",
    "end": "2709119"
  },
  {
    "text": "acquire release to actually start the listening functionality of the express",
    "start": "2709119",
    "end": "2715200"
  },
  {
    "text": "server um and then we're when we release we want to close the server um but kind",
    "start": "2715200",
    "end": "2721240"
  },
  {
    "text": "of like the maybe not so straightforward part of this is actually using runtime.",
    "start": "2721240",
    "end": "2726400"
  },
  {
    "text": "run Fork to allow us to run effects at execution boundaries so what this basically does is when the app starts",
    "start": "2726400",
    "end": "2733640"
  },
  {
    "text": "listening um it executes a fiber which runs this effect. log um and again",
    "start": "2733640",
    "end": "2739440"
  },
  {
    "text": "because this is an execution boundary um we can do it directly with the runtime that we've pulled out of the um that",
    "start": "2739440",
    "end": "2747079"
  },
  {
    "text": "we've basically pulled out here um I know this was like not necessarily the most straightforward uh exercise but I",
    "start": "2747079",
    "end": "2755119"
  },
  {
    "text": "think it's useful to get an idea of how you can grab like the existing runtime that effect is using and",
    "start": "2755119",
    "end": "2762000"
  },
  {
    "text": "potentially use it to run effects at different execution boundaries within the context of your current effect application we can move on to the second",
    "start": "2762000",
    "end": "2769839"
  },
  {
    "text": "stage of the exercise which is basically to build the first route um here so um I've set up a",
    "start": "2769839",
    "end": "2777839"
  },
  {
    "text": "bunch of different routes we don't have to get to every single one uh in the time that we have left because I think",
    "start": "2777839",
    "end": "2782880"
  },
  {
    "text": "we only have like 10 minutes um because stage three would just be to like implement the rest of the routes but why",
    "start": "2782880",
    "end": "2788599"
  },
  {
    "text": "don't we take a stab at at least implementing the to-do's ID route um so",
    "start": "2788599",
    "end": "2794160"
  },
  {
    "text": "we're basically going to finish the implementation of the layer which adds the to-do's ID route to our application",
    "start": "2794160",
    "end": "2800000"
  },
  {
    "text": "um if the to-do is found we can return the to-do as Json um if the to-do is not",
    "start": "2800000",
    "end": "2805040"
  },
  {
    "text": "found we can return a 404 um along with the message that the to-do was not",
    "start": "2805040",
    "end": "2810480"
  },
  {
    "text": "found um again if you want you can try to use now that we've kind of seen how",
    "start": "2810480",
    "end": "2816040"
  },
  {
    "text": "we can utilize runtime to do this you can try your hand at using runtime um and then when we Circle back",
    "start": "2816040",
    "end": "2824359"
  },
  {
    "text": "to talk about the solution that the way that I implemented it um we'll also talk about uh um since we won't get to the",
    "start": "2824359",
    "end": "2832520"
  },
  {
    "text": "last part we'll talk about fiber set as well which is a which is a data type that Tim implemented to make doing some",
    "start": "2832520",
    "end": "2838400"
  },
  {
    "text": "of this um fiber management a little bit easier um so I why don't you guys give this a shot and again raise your hands",
    "start": "2838400",
    "end": "2845319"
  },
  {
    "text": "we'll come around we'll try to answer questions as best we",
    "start": "2845319",
    "end": "2849318"
  },
  {
    "text": "can so let's take a quick peek at",
    "start": "2853880",
    "end": "2860318"
  },
  {
    "text": "the so um in this get Todo route um",
    "start": "2863200",
    "end": "2870079"
  },
  {
    "text": "there are a couple things going on um the first I'll point out is that we're I'm utilizing a fiber set which is a",
    "start": "2870079",
    "end": "2877880"
  },
  {
    "text": "data type that actually Tim worked on recently that makes doing certain uh",
    "start": "2877880",
    "end": "2883079"
  },
  {
    "text": "runtime related operations a little bit easier because it manages the fiber for you um but you could just as easily use",
    "start": "2883079",
    "end": "2889240"
  },
  {
    "text": "a runtime here um for what you need to do um this is really just for examp like",
    "start": "2889240",
    "end": "2896640"
  },
  {
    "text": "example purposes um but all we're really doing here is grabbing the ID off the request",
    "start": "2896640",
    "end": "2904960"
  },
  {
    "text": "um and then utilizing our to-do reposit itory to get the particular to do matching on the result and returning",
    "start": "2904960",
    "end": "2911640"
  },
  {
    "text": "something from our effect API I from our Express API um when necessary and then",
    "start": "2911640",
    "end": "2917599"
  },
  {
    "text": "at the very bottom we actually use run Fork to execute this program and again in this case uh the fiber set is not",
    "start": "2917599",
    "end": "2924880"
  },
  {
    "text": "necessarily um required we could use a runtime to do this but um it kind of exemplifies and maybe Tim could provide",
    "start": "2924880",
    "end": "2931079"
  },
  {
    "text": "a few comments on like other situations where like fiber sets might be useful",
    "start": "2931079",
    "end": "2936359"
  },
  {
    "text": "but before we talk about that I just want to see if there's any questions I want to respect the Break um and I'll also",
    "start": "2936359",
    "end": "2943280"
  },
  {
    "text": "quickly mention that this Express app that we built here is not at all the proper way to actually wrap an Express",
    "start": "2943280",
    "end": "2950440"
  },
  {
    "text": "server this is all for example purposes if we were to do this in a like Library",
    "start": "2950440",
    "end": "2956160"
  },
  {
    "text": "sense um in like building up an Express integration for effect there's actually an example of the proper way to do it in",
    "start": "2956160",
    "end": "2964200"
  },
  {
    "text": "the solutions directory there's a file called advanced um that shows the actual way to properly integrate with uh the",
    "start": "2964200",
    "end": "2971520"
  },
  {
    "text": "express API in like a library sense to basically make like the external Library easier for consumers to use because",
    "start": "2971520",
    "end": "2977440"
  },
  {
    "text": "technically the way that we're doing it right now if we go back to like the examples of what I was saying like um",
    "start": "2977440",
    "end": "2983280"
  },
  {
    "text": "you can do one-offs you can do like an Allin on effect you can do flexible in terms of like your Integrations I would",
    "start": "2983280",
    "end": "2990119"
  },
  {
    "text": "actually consider what we're doing right here very like oneoff because we're creating like a whole separate layer for each route and we're not it's it's kind",
    "start": "2990119",
    "end": "2996839"
  },
  {
    "text": "of like a little bit verbose but in that advanced file you'll you can kind of get",
    "start": "2996839",
    "end": "3002160"
  },
  {
    "text": "an idea of if you um leverage a lot of the internals of effect um how you can",
    "start": "3002160",
    "end": "3007799"
  },
  {
    "text": "provide like a better Library experience if you were to build up an Express app uh any questions and then I'll give Tim",
    "start": "3007799",
    "end": "3013680"
  },
  {
    "text": "two seconds to talk about Fiers set here sure sorry just general question what's",
    "start": "3013680",
    "end": "3022559"
  },
  {
    "text": "the benefit of doing it this way rather than creating",
    "start": "3022559",
    "end": "3028640"
  },
  {
    "text": "effect",
    "start": "3029359",
    "end": "3032359"
  },
  {
    "text": "prom um here we're sort of creating a left almost like push instead of pulling",
    "start": "3035280",
    "end": "3043200"
  },
  {
    "text": "requirements creating it's it goes back to what Tim",
    "start": "3043200",
    "end": "3050200"
  },
  {
    "text": "said before where if we were to just direct like run on this you're saying if on this program if we were to directly",
    "start": "3050200",
    "end": "3056040"
  },
  {
    "text": "just like run promise instead of you we take a traditional EXT",
    "start": "3056040",
    "end": "3064119"
  },
  {
    "text": "sure so if we if we were to directly take this and do like an effect. run promise on it the problem is that as Tim",
    "start": "3064599",
    "end": "3072400"
  },
  {
    "text": "kind of mentioned before run promise not promise right if we were to do this um",
    "start": "3072400",
    "end": "3079760"
  },
  {
    "text": "the problem is we would need to pass all of our context through again whether like if we're building up layers or",
    "start": "3079760",
    "end": "3085640"
  },
  {
    "text": "things like that that are actually T by our program that would all have to get passed through again because effect. run",
    "start": "3085640",
    "end": "3090720"
  },
  {
    "text": "promise is just going to run the effect that you give it by utilizing a custom runtime we can pull the runtime that's",
    "start": "3090720",
    "end": "3096559"
  },
  {
    "text": "executing outside of this Express Handler right if we were to just instead",
    "start": "3096559",
    "end": "3101960"
  },
  {
    "text": "of using a fet here if we were to use a runtime the same thing we we uh the",
    "start": "3101960",
    "end": "3107000"
  },
  {
    "text": "runtime is going to have all the context that's being used to build this effect app outside so you don't actually need",
    "start": "3107000",
    "end": "3113720"
  },
  {
    "text": "to do things like providing all your layers again and Recon constructing all that layers cuz if we used run promise",
    "start": "3113720",
    "end": "3119240"
  },
  {
    "text": "and passed all our layers through here every time we hit that route we're reconstructing all those layers uh we're",
    "start": "3119240",
    "end": "3125680"
  },
  {
    "text": "going to lose a lot of context it becomes expensive so this is a way to kind of um allow at execution boundaries",
    "start": "3125680",
    "end": "3132640"
  },
  {
    "text": "the preservation of context we've already built up uh runtime flags that we've already turned on or off fiber",
    "start": "3132640",
    "end": "3139599"
  },
  {
    "text": "refs that we may or may not have set I know we're over I'm sorry",
    "start": "3139599",
    "end": "3144920"
  },
  {
    "text": "um so yeah yeah and then Tim if you want to give like a one minute so that everybody can have 10",
    "start": "3144920",
    "end": "3152400"
  },
  {
    "text": "minutes we're all hungry so if we looked at the runtime",
    "start": "3152400",
    "end": "3159720"
  },
  {
    "text": "example earlier we the run time using run for but there is one problem with",
    "start": "3159720",
    "end": "3165200"
  },
  {
    "text": "that is if um let's say the request is aved server uh those FES will continue",
    "start": "3165200",
    "end": "3173119"
  },
  {
    "text": "to run in the background so if you had a request that took a minute to",
    "start": "3173119",
    "end": "3180319"
  },
  {
    "text": "execute but you want to make sure that shuts down when your server is closed",
    "start": "3180319",
    "end": "3186040"
  },
  {
    "text": "you would then have to go a step further and make sure like the fiber is interrupted when the server is shut down",
    "start": "3186040",
    "end": "3191839"
  },
  {
    "text": "which is a little bit complicated what F set does is essentially the same thing",
    "start": "3191839",
    "end": "3197480"
  },
  {
    "text": "as the runtime example earlier but it's actually a scoped resource so if you",
    "start": "3197480",
    "end": "3203920"
  },
  {
    "text": "look at the signature it's adding a scope so when that scope is closed it ensures that all the fibers are shut",
    "start": "3203920",
    "end": "3210599"
  },
  {
    "text": "down in that set so if you use that run Fork",
    "start": "3210599",
    "end": "3216640"
  },
  {
    "text": "function effects if that set is shut down that also be shut down so it kind",
    "start": "3217119",
    "end": "3224280"
  },
  {
    "text": "of adds resource safety on top of runtime and a more easy to",
    "start": "3224280",
    "end": "3230640"
  },
  {
    "text": "use inerting the so this is make time is a",
    "start": "3235440",
    "end": "3240880"
  },
  {
    "text": "convenience Constructor um if you use f d make you get like the",
    "start": "3240880",
    "end": "3246880"
  },
  {
    "text": "full you get actual F back you can add F to",
    "start": "3246880",
    "end": "3253440"
  },
  {
    "text": "manually or delete or that kind of thing but what does is takes that F set and",
    "start": "3254440",
    "end": "3263280"
  },
  {
    "text": "gives you back like a run for function that you can then use easily like your",
    "start": "3263280",
    "end": "3270480"
  },
  {
    "text": "extion B that's the same thing is calling fet",
    "start": "3270480",
    "end": "3276079"
  },
  {
    "text": "make and then using the fet1 but have you considered making this",
    "start": "3276079",
    "end": "3283160"
  },
  {
    "text": "before sounds",
    "start": "3283160",
    "end": "3288280"
  },
  {
    "text": "um you can do some something similar with the default runtime but you have to",
    "start": "3288280",
    "end": "3293319"
  },
  {
    "text": "manage the scope yourself and then pass it into the Run",
    "start": "3293319",
    "end": "3298319"
  },
  {
    "text": "there are situations where you don't want to do that and you just want the run time itself back there's actually an",
    "start": "3305200",
    "end": "3311400"
  },
  {
    "text": "example that we're going to have later on where we don't want like to create a fiber set where we actually just want to",
    "start": "3311400",
    "end": "3317319"
  },
  {
    "text": "construct a runtime and literally turn off one runtime flag we'll see it in session four later where like we're",
    "start": "3317319",
    "end": "3324119"
  },
  {
    "text": "going to be using metrics but by default you the the metric API like turns on a",
    "start": "3324119",
    "end": "3329280"
  },
  {
    "text": "bunch of like fiber related metrics but to like make the output cleaner for us to look at later we turn off that flag",
    "start": "3329280",
    "end": "3335039"
  },
  {
    "text": "so the runtime API is like the lowest level we go and it's kept simple intentionally in case you want to do",
    "start": "3335039",
    "end": "3341039"
  },
  {
    "text": "things like that which wouldn't be possible necessarily um with a fiber set so I",
    "start": "3341039",
    "end": "3346720"
  },
  {
    "text": "think keeping like that lowlevel API is important to make just doing those simple operations on a runtime",
    "start": "3346720",
    "end": "3352760"
  },
  {
    "text": "easier sorry Tim um all right let's take a break um",
    "start": "3352760",
    "end": "3357799"
  },
  {
    "text": "we'll resume in about 10 minutes um thank you all for your attention and yeah see you guys in a little",
    "start": "3357799",
    "end": "3364990"
  },
  {
    "text": "[Applause] bit all right folks",
    "start": "3364990",
    "end": "3370200"
  },
  {
    "start": "3366000",
    "end": "5995000"
  },
  {
    "text": "um I think we'll try to get started again um so in this session of the workshop",
    "start": "3370200",
    "end": "3379319"
  },
  {
    "text": "we're going to be focusing very heavily on the fiber itself",
    "start": "3379319",
    "end": "3385240"
  },
  {
    "text": "um so in effect uh as many of you know a",
    "start": "3385240",
    "end": "3390400"
  },
  {
    "text": "fiber is what we basically construct in order to run the effects that R effect",
    "start": "3390400",
    "end": "3396480"
  },
  {
    "text": "programs they represent a handle to our running computations and often times um there",
    "start": "3396480",
    "end": "3403200"
  },
  {
    "text": "are situations where we want to synchronize or coordinate between multiple fibers running in our effect",
    "start": "3403200",
    "end": "3409760"
  },
  {
    "text": "applications we've already seen some examples in session one of utilizing fibers to do different things but in",
    "start": "3409760",
    "end": "3416039"
  },
  {
    "text": "this session we're going to dive very deep into different strategies that we have for coordinating fibers trying to",
    "start": "3416039",
    "end": "3421880"
  },
  {
    "text": "synchronize them and executing work across multiple different fibers um I",
    "start": "3421880",
    "end": "3427079"
  },
  {
    "text": "we're going to take it slowly so if we don't make it to the session project that's okay everything's available for",
    "start": "3427079",
    "end": "3433640"
  },
  {
    "text": "you open source online um all the solutions are there as well so we're going to take our time try to answer as",
    "start": "3433640",
    "end": "3439440"
  },
  {
    "text": "many questions as we can uh but let's dive in a little bit so I think that uh in effect",
    "start": "3439440",
    "end": "3449319"
  },
  {
    "text": "probably one of the most under not inside effect itself but in the effect community in effect applications I think",
    "start": "3449319",
    "end": "3456039"
  },
  {
    "text": "one of the most underappreciated data types that we have is",
    "start": "3456039",
    "end": "3461520"
  },
  {
    "text": "deferred um so deferred it's a very simple data type it's a purely function",
    "start": "3461520",
    "end": "3466760"
  },
  {
    "text": "functional synchronization primitive that we have in effect and all it is is a representation of a single value that",
    "start": "3466760",
    "end": "3473720"
  },
  {
    "text": "may or may not yet be available so often times people draw parallels to like a",
    "start": "3473720",
    "end": "3479119"
  },
  {
    "text": "JavaScript promise um although it's the semantics are not entirely the same um",
    "start": "3479119",
    "end": "3484960"
  },
  {
    "text": "but if we take a look at the data type semantics of a deferred a deferred always starts empty it can be completed",
    "start": "3484960",
    "end": "3491720"
  },
  {
    "text": "exactly once at some point in the future and after it's completed it's unalterable we can't change the value of",
    "start": "3491720",
    "end": "3498720"
  },
  {
    "text": "a deferred after it's been after we've completed the defer um but why is it useful for fiber",
    "start": "3498720",
    "end": "3505039"
  },
  {
    "text": "synchronization or ination why are we even talking about deferred in the context of fibers at",
    "start": "3505039",
    "end": "3510920"
  },
  {
    "text": "all so deferred is extremely useful for basically forcing fibers to wait for",
    "start": "3510920",
    "end": "3518680"
  },
  {
    "text": "something to happen elsewhere in an effect application um and we can propagate",
    "start": "3518680",
    "end": "3524559"
  },
  {
    "text": "information between fibers with theer as well um so maybe we can take a look at",
    "start": "3524559",
    "end": "3530880"
  },
  {
    "text": "an example here I know the code might be a",
    "start": "3530880",
    "end": "3537960"
  },
  {
    "text": "can pull it up in the samples",
    "start": "3537960",
    "end": "3542400"
  },
  {
    "text": "directory so um in order to create a deferred um we",
    "start": "3545920",
    "end": "3551240"
  },
  {
    "text": "can use the Deferred doake Constructor right this gives us back a it's an",
    "start": "3551240",
    "end": "3556359"
  },
  {
    "text": "effectful operation because we're creating mutable resources under the hood um so deferred do make is an",
    "start": "3556359",
    "end": "3563039"
  },
  {
    "text": "effectful operation that we're performing so we need to either yield that effect or run it somehow um so if",
    "start": "3563039",
    "end": "3568359"
  },
  {
    "text": "we're in a generator yielding it is a very easy way to create a deferred and when we make a deferred we have to",
    "start": "3568359",
    "end": "3573920"
  },
  {
    "text": "indicate how we are going to be able to complete this deferred later so we need",
    "start": "3573920",
    "end": "3579680"
  },
  {
    "text": "to give it the value uh the success value that it could potentially be",
    "start": "3579680",
    "end": "3584920"
  },
  {
    "text": "completed with later as well as the error type that it could potentially be completed with later because deferreds",
    "start": "3584920",
    "end": "3590160"
  },
  {
    "text": "can be completed both successfully as well as we can fail deferreds",
    "start": "3590160",
    "end": "3596599"
  },
  {
    "text": "um in this case right here we are creating a deferred which we're saying",
    "start": "3596599",
    "end": "3601920"
  },
  {
    "text": "can s can never fail and be succeeded at some point in the future with a string",
    "start": "3601920",
    "end": "3608079"
  },
  {
    "text": "right and that's very clearly indicated in the DAT in the signature here we have a deferred with a value type of string",
    "start": "3608079",
    "end": "3615680"
  },
  {
    "text": "and an error type of never what this example here is",
    "start": "3615680",
    "end": "3622480"
  },
  {
    "text": "showing is we are forking two different file fibers in this example right in the",
    "start": "3622480",
    "end": "3628760"
  },
  {
    "text": "first piece of code here we are foring a fiber which is basically going to wait for that",
    "start": "3628760",
    "end": "3635680"
  },
  {
    "text": "deferred to be completed so we're using the Deferred AWA um the Deferred do a",
    "start": "3635680",
    "end": "3642799"
  },
  {
    "text": "weight method to indicate that this fiber should be suspended until we get",
    "start": "3642799",
    "end": "3648640"
  },
  {
    "text": "the value of the Deferred back but what does it actually mean to suspend a fiber right we talk about it a lot we say oh",
    "start": "3648640",
    "end": "3655559"
  },
  {
    "text": "I'm going to suspend this fiber this fiber is yielding to another what does that really mean if we want to just not",
    "start": "3655559",
    "end": "3661359"
  },
  {
    "text": "get too jargony and think about it conceptually when we suspend the fiber we're saying okay we're going to pause",
    "start": "3661359",
    "end": "3667559"
  },
  {
    "text": "execution and let other fibers run right we're saying the fiber should stop here",
    "start": "3667559",
    "end": "3673119"
  },
  {
    "text": "wait for wait and let other fibers go ahead and run if we think about it very",
    "start": "3673119",
    "end": "3678440"
  },
  {
    "text": "like uh not technically right just trying to grock what's happening when we",
    "start": "3678440",
    "end": "3683799"
  },
  {
    "text": "say we suspend a fiber so so deferred do a weight says Hey suspend this fiber",
    "start": "3683799",
    "end": "3690440"
  },
  {
    "text": "pause execution of this fiber yields to other fibers let other fibers run until",
    "start": "3690440",
    "end": "3695760"
  },
  {
    "text": "we get a value for this deferred back right so what's essentially Happening Here is we're waiting for the Deferred",
    "start": "3695760",
    "end": "3702640"
  },
  {
    "text": "to finish and once it's finished we'll actually be we'll get this log immediately because it's happening",
    "start": "3702640",
    "end": "3708760"
  },
  {
    "text": "before we await the Deferred on the fiber so this effect operation runs then we wait for the Deferred to be finished",
    "start": "3708760",
    "end": "3715079"
  },
  {
    "text": "and only once it's finished will the fiber be able to continue executing and run the second log that indicates that",
    "start": "3715079",
    "end": "3721319"
  },
  {
    "text": "our defert has been completed we're utilizing effect. Fork to create this",
    "start": "3721319",
    "end": "3726559"
  },
  {
    "text": "fiber and yielding this gives us back a runtime fiber which is essentially a",
    "start": "3726559",
    "end": "3732240"
  },
  {
    "text": "handle to that running computation right we've forked this fiber we've constructed the fiber the program is uh",
    "start": "3732240",
    "end": "3738520"
  },
  {
    "text": "this program that we've specified here is running within that runtime fiber um and so now we have a handle to",
    "start": "3738520",
    "end": "3747000"
  },
  {
    "text": "that running fiber in another fiber here we're saying",
    "start": "3747000",
    "end": "3754279"
  },
  {
    "text": "okay we're going to go ahead and succeed this deferred right and we know that we can only succeed it with a string",
    "start": "3754279",
    "end": "3759400"
  },
  {
    "text": "because we've indicated that in the Constructor appear so if I were to change this value to a number or",
    "start": "3759400",
    "end": "3765559"
  },
  {
    "text": "something which I'll show in a second we'd get a type error um we're saying we're going to succeed with the third we're going ahead",
    "start": "3765559",
    "end": "3772400"
  },
  {
    "text": "and doing the operation of saying hey go ahead and succeed this deferred with the value of hello world but we're only",
    "start": "3772400",
    "end": "3779279"
  },
  {
    "text": "we're doing that after a second we're waiting a second to actually complete that",
    "start": "3779279",
    "end": "3784480"
  },
  {
    "text": "deferred so what this example shows is",
    "start": "3784480",
    "end": "3789960"
  },
  {
    "text": "this fiber up here is going to wait a full second for this deferred to be completed before we actually get this",
    "start": "3789960",
    "end": "3796319"
  },
  {
    "text": "log so we've got two computations running in two separate fibers um but they're synchronized on",
    "start": "3796319",
    "end": "3803359"
  },
  {
    "text": "that deferred right the Deferred allows us to um synchronize those two fibers",
    "start": "3803359",
    "end": "3808880"
  },
  {
    "text": "and we get the benefit of also being able to propagate the value that we're",
    "start": "3808880",
    "end": "3814720"
  },
  {
    "text": "succeeding or failing the Deferred with across those fiber boundaries so the fiber that we're getting back",
    "start": "3814720",
    "end": "3822200"
  },
  {
    "text": "here if you notice can actually succeed with a string or and it can never fail",
    "start": "3822200",
    "end": "3828559"
  },
  {
    "text": "which is the exact same signature that we have in the Deferred because the awaiting a deferred returns its value",
    "start": "3828559",
    "end": "3835520"
  },
  {
    "text": "right um any questions so",
    "start": "3835520",
    "end": "3841559"
  },
  {
    "text": "far because this whole computation is being forked into a fiber so if you were",
    "start": "3845559",
    "end": "3851160"
  },
  {
    "text": "to directly yield each one of these operations those would all be happening on the parent fiber which is running",
    "start": "3851160",
    "end": "3856480"
  },
  {
    "text": "this effect. gen and actually that's actually that's probably a good point I should point out that the program that we're running here has a parent fiber",
    "start": "3856480",
    "end": "3864880"
  },
  {
    "text": "which is forking two children right we have this fiber here which is child number one and this one here which is",
    "start": "3864880",
    "end": "3870000"
  },
  {
    "text": "child number two and I actually have a picture of it you can see my diagramming skills in",
    "start": "3870000",
    "end": "3875880"
  },
  {
    "text": "a",
    "start": "3875880",
    "end": "3878000"
  },
  {
    "text": "moment um I'm sorry if the text is small the picture is what's more important we've got this parent fiber",
    "start": "3882559",
    "end": "3889960"
  },
  {
    "text": "sitting on top of everything right maybe I can zoom in Zo",
    "start": "3889960",
    "end": "3897119"
  },
  {
    "text": "sorry we've got a parent fiber sitting on top which is where we actually construct the Deferred right that's",
    "start": "3897119",
    "end": "3902599"
  },
  {
    "text": "where deferred make happens in our effect. gen we then Fork a child fiber",
    "start": "3902599",
    "end": "3908039"
  },
  {
    "text": "which is actually doing the work of awaiting that deferred right which is seen in this example we have a second fiber that we've now",
    "start": "3908039",
    "end": "3914440"
  },
  {
    "text": "created which is actually doing the work of awaiting that deferred and then um after we've",
    "start": "3914440",
    "end": "3921200"
  },
  {
    "text": "constructed the first fiber we have a second fiber that we Fork fiber number two in this example which performs the",
    "start": "3921200",
    "end": "3928160"
  },
  {
    "text": "delay and then succeeds the Deferred after a second which propagates the result back to fiber number one and",
    "start": "3928160",
    "end": "3934400"
  },
  {
    "text": "allows it to then continue so this dotted Arrow kind of says okay we're suspended until the Deferred completes",
    "start": "3934400",
    "end": "3940359"
  },
  {
    "text": "so if we go back to our code example the reason why we can't directly yield this deferred do a weight and",
    "start": "3940359",
    "end": "3947240"
  },
  {
    "text": "effect. log and everything like that is because then everything would be happening on the parent fiber and",
    "start": "3947240",
    "end": "3952480"
  },
  {
    "text": "everything would happen sequentially well that's what I'm saying is that uh",
    "start": "3952480",
    "end": "3959440"
  },
  {
    "text": "we could run an effect. gen in this yield call but um like we could run an",
    "start": "3959440",
    "end": "3965760"
  },
  {
    "text": "effect. gen in that yields but everything has what we're passing to effect. Fork is the program that we want",
    "start": "3965760",
    "end": "3971760"
  },
  {
    "text": "to execute in a separate fiber so um this yield here we could turn this into",
    "start": "3971760",
    "end": "3977000"
  },
  {
    "text": "an. gen and maybe that would be clearer um and for those of you unfamiliar with zip right and zip left this",
    "start": "3977000",
    "end": "3984039"
  },
  {
    "text": "is essentially the is flat map without the uh the thk right so I could turn",
    "start": "3984039",
    "end": "3990200"
  },
  {
    "text": "this into a flat map um and zip left basically says run this but return this",
    "start": "3990200",
    "end": "3997200"
  },
  {
    "text": "it's they're just two helper methods for doing different sequential operations and I tend to use these instead of like",
    "start": "3997200",
    "end": "4004279"
  },
  {
    "text": "and then and flat map if I don't need like the thunk or anything like",
    "start": "4004279",
    "end": "4009240"
  },
  {
    "text": "that that's actually really a much better way to put it it's tap without the thunk",
    "start": "4010640",
    "end": "4017359"
  },
  {
    "text": "um yes maybe I think the reason why we call it zip left is because if you write this in",
    "start": "4017359",
    "end": "4024799"
  },
  {
    "text": "not a piped fashion and you have the left effect and the right effect like without using like the Dual API um like",
    "start": "4024799",
    "end": "4031200"
  },
  {
    "text": "the left side is what gets returned so like if you run it as like you know you pass both effects in next to one another",
    "start": "4031200",
    "end": "4037240"
  },
  {
    "text": "the left side is what comes back but maybe we could come up with a better name we're always open to suggestions on",
    "start": "4037240",
    "end": "4043079"
  },
  {
    "text": "naming naming is extremely difficult especially when you have as many combinators as we",
    "start": "4043079",
    "end": "4048200"
  },
  {
    "text": "do um so so what is what is this basically",
    "start": "4048200",
    "end": "4054440"
  },
  {
    "text": "like doing right we have the reason why this is important is because many of the",
    "start": "4054440",
    "end": "4060039"
  },
  {
    "text": "synchronization Primitives that we have an effect are built upon the shoulders of deferred Q the entire Q data type um is",
    "start": "4060039",
    "end": "4069279"
  },
  {
    "text": "built upon the shoulders of deferred um a lot of the other synchronization work",
    "start": "4069279",
    "end": "4074319"
  },
  {
    "text": "uh Primitives that we have in effect are built upon the Deferred data type which is why I say it doesn't get as much love",
    "start": "4074319",
    "end": "4079720"
  },
  {
    "text": "as it probably should it's it's a it's a very simple but very powerful idea and",
    "start": "4079720",
    "end": "4086079"
  },
  {
    "text": "if we run this example U maybe we can show a little bit better what",
    "start": "4086079",
    "end": "4091039"
  },
  {
    "text": "happens",
    "start": "4104440",
    "end": "4107440"
  },
  {
    "text": "oops this turn let",
    "start": "4109560",
    "end": "4115758"
  },
  {
    "text": "get so the logs may be a little smoo to but what's cool here is again you can",
    "start": "4115880",
    "end": "4124040"
  },
  {
    "text": "see we're in fiber number one right now so if we go back to that fiber zero is",
    "start": "4124040",
    "end": "4129159"
  },
  {
    "text": "the you know parent fiber the one running the effect. Gen in this case fiber number one is the one that we're",
    "start": "4129159",
    "end": "4134278"
  },
  {
    "text": "forking to wait on the deferred to complete right fiber number two after a",
    "start": "4134279",
    "end": "4139400"
  },
  {
    "text": "full second right at 42 here succeeds the Deferred and then on fiber number one we",
    "start": "4139400",
    "end": "4146798"
  },
  {
    "text": "get a message saying the Deferred is complete again after a second right and it maybe if I made the wait longer it",
    "start": "4146799",
    "end": "4152758"
  },
  {
    "text": "would be easier to see this but basic if you look at the time stamps you can see in fiber number one we paused execution",
    "start": "4152759",
    "end": "4159520"
  },
  {
    "text": "yielded to fiber number two to actually run operations and then when fiber",
    "start": "4159520",
    "end": "4164719"
  },
  {
    "text": "number one resumed assumed uh after the Deferred was complete it was able to log its message and",
    "start": "4164719",
    "end": "4169838"
  },
  {
    "text": "proceed um and I put in this other console log here to basically prove that",
    "start": "4169839",
    "end": "4175278"
  },
  {
    "text": "a full second elapsed in this program um so we basically have when we join this",
    "start": "4175279",
    "end": "4183318"
  },
  {
    "text": "fiber um that we have a handle to up here I proved that we're waiting at",
    "start": "4183319",
    "end": "4188520"
  },
  {
    "text": "least a full second just using the console time API but what's the powerful concept here is we have two fibers",
    "start": "4188520",
    "end": "4196760"
  },
  {
    "text": "running in parallel uh concurrently right we've got two",
    "start": "4196760",
    "end": "4202440"
  },
  {
    "text": "concurrent programs running and yielding to one another cooperatively um and the Deferred is",
    "start": "4202440",
    "end": "4208159"
  },
  {
    "text": "what allows us to synchronize them any questions about this",
    "start": "4208159",
    "end": "4214960"
  },
  {
    "text": "sureal we don't see the hell world because I'm not logging",
    "start": "4215800",
    "end": "4221640"
  },
  {
    "text": "in no I don't think so oh am I",
    "start": "4221640",
    "end": "4227320"
  },
  {
    "text": "let's see",
    "start": "4227640",
    "end": "4232760"
  },
  {
    "text": "interesting oh there we go maybe it got cut off before when I was moving my terminal around I'm not",
    "start": "4233440",
    "end": "4240480"
  },
  {
    "text": "sure um yeah",
    "start": "4240480",
    "end": "4247280"
  },
  {
    "text": "um the time no just piing but like an effect for it will we see like 5 zero",
    "start": "4247280",
    "end": "4254000"
  },
  {
    "text": "being like you you mention like we oh yeah yeah here wait we",
    "start": "4254000",
    "end": "4261198"
  },
  {
    "text": "can did I just sorry my microphone turned red I don't know if that means it's running",
    "start": "4261719",
    "end": "4267280"
  },
  {
    "text": "low on battery",
    "start": "4267280",
    "end": "4271199"
  },
  {
    "text": "uh so you can see I just adjusted the console log that's happening directly in the effect. Gen um and you can see",
    "start": "4278719",
    "end": "4285320"
  },
  {
    "text": "that's happening on fiber zero um so again any other questions about this by the way this is kind of",
    "start": "4285320",
    "end": "4291920"
  },
  {
    "text": "like the foundation for the rest of this session so I want to make sure so deferred is super powerful you",
    "start": "4291920",
    "end": "4299880"
  },
  {
    "text": "can build tons of synchronization Primitives on top of its shoulders um",
    "start": "4299880",
    "end": "4304920"
  },
  {
    "text": "we'll talk about some of them too and we'll also talk about some design patterns which are extremely common in",
    "start": "4304920",
    "end": "4310239"
  },
  {
    "text": "effect that utilize deferred um we use them a ton for libraries that we develop",
    "start": "4310239",
    "end": "4316159"
  },
  {
    "text": "and hopefully we can pass that those patterns on to you folks um to use in",
    "start": "4316159",
    "end": "4321560"
  },
  {
    "text": "your applications as well um and uh I will also note I haven't",
    "start": "4321560",
    "end": "4328639"
  },
  {
    "text": "published the slides in the repo yet because I was adjusting them as early as this morning um but I will be publishing",
    "start": "4328639",
    "end": "4334960"
  },
  {
    "text": "a PDF of the slides after the workshop as well in the repository so everything about this will be open",
    "start": "4334960",
    "end": "4341120"
  },
  {
    "text": "source so let's do a quick exercise with the fer to try to like again like maybe",
    "start": "4341120",
    "end": "4347159"
  },
  {
    "text": "grock this a little bit better the goal of this exercise is to explore how we can use deferred to propagate results",
    "start": "4347159",
    "end": "4352480"
  },
  {
    "text": "between fibers so remember I mentioned that when we await a deferred we're awaiting its result right and when we",
    "start": "4352480",
    "end": "4358760"
  },
  {
    "text": "construct the Deferred we say it's can succeed with X and it can fail with Y",
    "start": "4358760",
    "end": "4364679"
  },
  {
    "text": "right the requirements of this exercise are to propagate the full result of",
    "start": "4364679",
    "end": "4369800"
  },
  {
    "text": "maybe fail which is in the exercise file which I'll show you in a second from the child fiber back in to the parent and we",
    "start": "4369800",
    "end": "4376560"
  },
  {
    "text": "should avoid utilizing the easy way out which is effect out into into deferred um effect has a built-in combinator to",
    "start": "4376560",
    "end": "4384320"
  },
  {
    "text": "basically take a deferred and um uh create an effect which the success value",
    "start": "4384320",
    "end": "4391400"
  },
  {
    "text": "of the effect effect is the success value of a waiting that deferred and the failure value of the effect is the",
    "start": "4391400",
    "end": "4396639"
  },
  {
    "text": "failure value of a waiting basically takes the result of the Deferred and lifts it into an effect like awaiting a deferred if that makes sense um so if we",
    "start": "4396639",
    "end": "4404880"
  },
  {
    "text": "take look at the exercise file really quick and if anything about what I'm saying is unclear please stop me and ask",
    "start": "4404880",
    "end": "4410760"
  },
  {
    "text": "questions um we look at exercise zero here we have this uh maybe fail right",
    "start": "4410760",
    "end": "4417560"
  },
  {
    "text": "which we're using the random service in effect to get a next number and we're",
    "start": "4417560",
    "end": "4423400"
  },
  {
    "text": "using filter or fail to say if that number is greater than 0. five we're going to uh we're going to",
    "start": "4423400",
    "end": "4431440"
  },
  {
    "text": "fail excuse me and then if we fail we fail with n um in this program here your",
    "start": "4431440",
    "end": "4437120"
  },
  {
    "text": "goal is to take this deferred that we're constructing um and implement the logic",
    "start": "4437120",
    "end": "4442480"
  },
  {
    "text": "to propagate its full result back to the parent fiber which in this case is the fiber that's running the effect. Gen",
    "start": "4442480",
    "end": "4448880"
  },
  {
    "text": "right so I've done the work of uh putting the effect. fork in here your job is to implement the",
    "start": "4448880",
    "end": "4455440"
  },
  {
    "text": "logic and and uh you can see that we're on the parent fiber here awaiting the",
    "start": "4457040",
    "end": "4463040"
  },
  {
    "text": "result of that deferred which is in a child fiber",
    "start": "4463040",
    "end": "4468320"
  },
  {
    "text": "okay all right give you guys a little bit of time um and I'll walk",
    "start": "4469080",
    "end": "4475480"
  },
  {
    "text": "around so I think most people ared at um a solution that at least",
    "start": "4476880",
    "end": "4482639"
  },
  {
    "text": "propagates failures and success values across B bound with this um which is",
    "start": "4482639",
    "end": "4488600"
  },
  {
    "text": "great right this is I think the solution that a lot of folks ended up with just matching on the effect failing the",
    "start": "4488600",
    "end": "4494159"
  },
  {
    "text": "Deferred with an error or succeeding with the value if necessary but there are a couple of problems with this",
    "start": "4494159",
    "end": "4500719"
  },
  {
    "text": "implementation remember a deferred can propagate the full result of an effect across fiber boundaries right um and at",
    "start": "4500719",
    "end": "4508480"
  },
  {
    "text": "the moment this solution does not handle",
    "start": "4508480",
    "end": "4514280"
  },
  {
    "text": "defects or interrupts right um we could uh handle",
    "start": "4514280",
    "end": "4521280"
  },
  {
    "text": "defects simply by changing this match effect to a match cause",
    "start": "4521280",
    "end": "4528679"
  },
  {
    "text": "effect right and then this error actually becomes a cause we can fail",
    "start": "4529480",
    "end": "4535639"
  },
  {
    "text": "cause um and Tim correct me for a moment does this handle Interruption now right I didn't think so so so this",
    "start": "4535639",
    "end": "4544120"
  },
  {
    "text": "will at least allow us to handle defects but if I scroll down we also want to",
    "start": "4544120",
    "end": "4551280"
  },
  {
    "text": "handle cases where the Deferred is interrupted right because when you await",
    "start": "4551280",
    "end": "4556480"
  },
  {
    "text": "a deferred that fiber is gonna I actually got a really good question about this from this side of the room when you await a deferred does that ever",
    "start": "4556480",
    "end": "4562960"
  },
  {
    "text": "time out the answer to that is no if you have a deferred waiting if you are",
    "start": "4562960",
    "end": "4568080"
  },
  {
    "text": "awaiting the result of a deferred in a fiber that operation will never time out uh it'll H it'll go on forever until you",
    "start": "4568080",
    "end": "4574080"
  },
  {
    "text": "terminate your program so if that deferred never gets completed that fiber will just wait",
    "start": "4574080",
    "end": "4579159"
  },
  {
    "text": "forever um so that's the other reason why you see me forking Thea weight",
    "start": "4579159",
    "end": "4586239"
  },
  {
    "text": "uh into child fibers uh when it's not like the when I'm completing the",
    "start": "4586239",
    "end": "4594920"
  },
  {
    "text": "Deferred uh how do I say this if I were to await the Deferred in a fiber and complete it later on the same fiber I'd",
    "start": "4594920",
    "end": "4601280"
  },
  {
    "text": "never arrive at that completion if everything's happening in that same fiber because all we're going to do is we're going to sit there waiting for the",
    "start": "4601280",
    "end": "4607560"
  },
  {
    "text": "result but we're never going to allow that fiber to proceed to the instruction to actually complete that deferred um",
    "start": "4607560",
    "end": "4615199"
  },
  {
    "text": "and the reason why I'm bringing that up is because you'll see often times us forking the Deferred and then completing",
    "start": "4615199",
    "end": "4620280"
  },
  {
    "text": "it elsewhere that those semantics are things to be aware of um here we're",
    "start": "4620280",
    "end": "4626719"
  },
  {
    "text": "using effect.on interrupt to manually propagate the interruption signal back to the parent as well because just doing",
    "start": "4626719",
    "end": "4634239"
  },
  {
    "text": "match effect or even just match cause effect as Tim pointed out we're still not handling that case for",
    "start": "4634239",
    "end": "4640159"
  },
  {
    "text": "Interruption so in summary and then I'll I put in one last uh implementation",
    "start": "4640159",
    "end": "4646560"
  },
  {
    "text": "which we could use here does the exit implementation propagate",
    "start": "4646560",
    "end": "4651520"
  },
  {
    "text": "Interruption right right right so um the other the one last way we could do this",
    "start": "4654719",
    "end": "4660760"
  },
  {
    "text": "with might be like the shortest implementation is using effect. onexit and then completing the Deferred with",
    "start": "4660760",
    "end": "4666639"
  },
  {
    "text": "the exit value that's received by on exit um you know there's a bunch of",
    "start": "4666639",
    "end": "4672159"
  },
  {
    "text": "different ways that you could do this but what I'm trying to point out here is that if we want to make sure the full",
    "start": "4672159",
    "end": "4678320"
  },
  {
    "text": "cause of the Deferred is propagated between fiber boundaries we need to handle all of these different cases success failure defects Interruption",
    "start": "4678320",
    "end": "4685840"
  },
  {
    "text": "right those are kind of the things that you should be keeping in mind when you're thinking about synchronizing fibers those four things success failure",
    "start": "4685840",
    "end": "4692920"
  },
  {
    "text": "defects Interruption always",
    "start": "4692920",
    "end": "4698520"
  },
  {
    "text": "um so you can play around with this example I had some other code that I put in here um but I think that",
    "start": "4698520",
    "end": "4705440"
  },
  {
    "text": "we've kind of belabored the point now um deferred is great for synchronizing two",
    "start": "4705440",
    "end": "4712320"
  },
  {
    "text": "different fibers but making sure that you properly synchronize them is somewhat CH not challenging but it's it",
    "start": "4712320",
    "end": "4719199"
  },
  {
    "text": "requires attention to detail because defer is Like A lowlevel Primitive for",
    "start": "4719199",
    "end": "4724800"
  },
  {
    "text": "synchronization okay so now let's talk about Q um we're building up to a particular",
    "start": "4724800",
    "end": "4731960"
  },
  {
    "text": "pattern that I think is very useful in effect um so first we need to talk about Q um Q is a lightweight in memory fully",
    "start": "4731960",
    "end": "4740440"
  },
  {
    "text": "asynchronous um way to Q up elements um we can transparently back pressure using",
    "start": "4740440",
    "end": "4747040"
  },
  {
    "text": "Q um and it builds upon deferred which we mentioned earlier it's got two fundamental operations I think most",
    "start": "4747040",
    "end": "4753480"
  },
  {
    "text": "people are aware of this so I'm not going to believe at this point um we've got different Q",
    "start": "4753480",
    "end": "4759679"
  },
  {
    "text": "Constructors which have different semantics uh unbounded cues where we can just keep adding elements in an",
    "start": "4759679",
    "end": "4765280"
  },
  {
    "text": "unbounded fashion bounded cues which will back pressure elements uh so in",
    "start": "4765280",
    "end": "4770400"
  },
  {
    "text": "this case we've got a bounded Q of uh size four so we'll end up back pressuring elements um which attempt to",
    "start": "4770400",
    "end": "4777840"
  },
  {
    "text": "be added to the que we got sliding cues which will drop elements from the front of the",
    "start": "4777840",
    "end": "4783520"
  },
  {
    "text": "queue if we're adding addition if we're adding elements past its capacity then we have dropping cues",
    "start": "4783520",
    "end": "4789800"
  },
  {
    "text": "which if the Q is full we'll just drop elements as we're working um",
    "start": "4789800",
    "end": "4795320"
  },
  {
    "text": "so the reason why I'm bringing up Q is because um we're we're not going to do",
    "start": "4795320",
    "end": "4802239"
  },
  {
    "text": "the coding exercise just quite yet I want to make a few points Q is is extremely useful for Distributing work",
    "start": "4802239",
    "end": "4809639"
  },
  {
    "text": "between fibers so we've talked about how deferred can propagate results Q is really useful for allowing us to",
    "start": "4809639",
    "end": "4818480"
  },
  {
    "text": "um propag distribute work between multiple fibers um in the exercise that",
    "start": "4818480",
    "end": "4824760"
  },
  {
    "text": "going to do in just a moment we're going to work to create three separate implementations of a worker fiber um",
    "start": "4824760",
    "end": "4832600"
  },
  {
    "text": "that take values from a c from a queue that we're constructing and perform some work on that value so let's before we",
    "start": "4832600",
    "end": "4839239"
  },
  {
    "text": "dive into the exercise let's take a look at it for a moment I told you we're going to take our",
    "start": "4839239",
    "end": "4845040"
  },
  {
    "text": "time so this is the solution which we do not want to show",
    "start": "4845040",
    "end": "4850880"
  },
  {
    "text": "you and then this is the exercise okay okay",
    "start": "4851080",
    "end": "4857000"
  },
  {
    "text": "so we're going to create three separate implementations of workers that take values from a que and do some work the",
    "start": "4857000",
    "end": "4863520"
  },
  {
    "text": "work that we're going to do here is just do some work it's simulating performing",
    "start": "4863520",
    "end": "4868719"
  },
  {
    "text": "some non-trivial work so we're going to consume values um you know these these",
    "start": "4868719",
    "end": "4873960"
  },
  {
    "text": "values are going to get passed in and then you know we're delaying for 20 milliseconds which again just like some",
    "start": "4873960",
    "end": "4879440"
  },
  {
    "text": "non-trivial work that we're trying to do um in the exercise we're creating an",
    "start": "4879440",
    "end": "4885480"
  },
  {
    "text": "unbounded Q um just for simplicities Simplicity purposes and we're going to",
    "start": "4885480",
    "end": "4891320"
  },
  {
    "text": "be constantly offering every one second we're going to be offering a 100 the number zero through 100 to to that que",
    "start": "4891320",
    "end": "4897840"
  },
  {
    "text": "that's going to be happening in a forked fiber so every every second 100 zero through 100",
    "start": "4897840",
    "end": "4904040"
  },
  {
    "text": "will be added to that Q your job is to finish each of the subsequent",
    "start": "4904040",
    "end": "4909639"
  },
  {
    "text": "implementations where we're creating fibers that pull work off of that Cy",
    "start": "4909639",
    "end": "4915120"
  },
  {
    "text": "right and do some work in the first implementation we want to pull work off",
    "start": "4915120",
    "end": "4920159"
  },
  {
    "text": "of that queue sequentially right so pull work off the queue do some work and",
    "start": "4920159",
    "end": "4925920"
  },
  {
    "text": "we're going to do everything sequentially in the second Implement oops sorry in the second",
    "start": "4925920",
    "end": "4931800"
  },
  {
    "text": "implementation we're going to uh take elements from the queue and perform work",
    "start": "4931800",
    "end": "4937920"
  },
  {
    "text": "with unbounded concurrency and in the third implementation we're going to have some",
    "start": "4937920",
    "end": "4943280"
  },
  {
    "text": "concurrency limit where we only want up to four fibers running at the same time to pull work off this",
    "start": "4943280",
    "end": "4949560"
  },
  {
    "text": "Cube um the reason why this exercise is even happening the reason why we're",
    "start": "4949560",
    "end": "4955080"
  },
  {
    "text": "doing this is because it illustrates the point that in one fiber we can offer",
    "start": "4955080",
    "end": "4960159"
  },
  {
    "text": "elements into a queue and then in multiple separate fibers we can actually pull information off and do work so we",
    "start": "4960159",
    "end": "4967400"
  },
  {
    "text": "can have all of these operations happening concurrently in separate fibers um and the reason uh why this is",
    "start": "4967400",
    "end": "4974719"
  },
  {
    "text": "important is because when we talk in the next SE the next section about uh",
    "start": "4974719",
    "end": "4981600"
  },
  {
    "text": "combining defer and Q together um we'll kind of get an idea of like how we can",
    "start": "4981600",
    "end": "4987440"
  },
  {
    "text": "Implement some like really useful patterns um before we start this exercise are there any questions on",
    "start": "4987440",
    "end": "4993760"
  },
  {
    "text": "like what I'm asking you guys to do and if not feel free to get",
    "start": "4993760",
    "end": "5000840"
  },
  {
    "text": "started so just to make sure we have um time to",
    "start": "5003440",
    "end": "5009760"
  },
  {
    "text": "go over the third piece of this I I don't think we'll get to the session project which is totally fine but I do",
    "start": "5009760",
    "end": "5014840"
  },
  {
    "text": "want to make sure we at least get to the third piece of like the pattern that we're building up to um so let's talk a",
    "start": "5014840",
    "end": "5021960"
  },
  {
    "text": "little bit about this um in implementation one we want to",
    "start": "5021960",
    "end": "5028239"
  },
  {
    "text": "sequentially pull work off the queue uh and do some work on it right so all we",
    "start": "5028239",
    "end": "5035320"
  },
  {
    "text": "have to do here is do a q. take to grab an item off the que uh flatmap that to",
    "start": "5035320",
    "end": "5041159"
  },
  {
    "text": "doing some work and running that forever so the important thing here I I got this",
    "start": "5041159",
    "end": "5046440"
  },
  {
    "text": "question a lot and I think it was a actually a really great question for all those that asked this particular question but um in effect the equivalent",
    "start": "5046440",
    "end": "5055520"
  },
  {
    "text": "of like a while one that respects like um that",
    "start": "5055520",
    "end": "5061960"
  },
  {
    "text": "respects uh Cooperative yielding between fibers is the combinator called effect off forever which runs the same program",
    "start": "5061960",
    "end": "5068960"
  },
  {
    "text": "over and over and over and over and over again um but in between each invocation",
    "start": "5068960",
    "end": "5075480"
  },
  {
    "text": "of the program it will yield to other fibers so that's the helpful piece here",
    "start": "5075480",
    "end": "5082040"
  },
  {
    "text": "to keep in mind is if we were to run like just like a while loop or something like that that uh continuously pulled",
    "start": "5082040",
    "end": "5088639"
  },
  {
    "text": "items off the queue this would drain the queue every time um like we we wouldn't really be able to necessarily uh have",
    "start": "5088639",
    "end": "5096080"
  },
  {
    "text": "three separate implementations running at the same time so having the effect up forever here is useful because we can",
    "start": "5096080",
    "end": "5101679"
  },
  {
    "text": "yield to other fibers in between each q.t does that make sense the under the",
    "start": "5101679",
    "end": "5108400"
  },
  {
    "text": "hood effect. forever is literally program effect. yield uh flat map to",
    "start": "5108400",
    "end": "5113440"
  },
  {
    "text": "yield now flat map back to program so it runs the same thing over and over again but between each invocation it",
    "start": "5113440",
    "end": "5120480"
  },
  {
    "text": "yields cool okay for implementation number two for",
    "start": "5121000",
    "end": "5126320"
  },
  {
    "text": "unbounded concurrency this basically means we want to spin up as many fibers as we want you",
    "start": "5126320",
    "end": "5133320"
  },
  {
    "text": "know forever right totally unbounded spin up as many fiber as we want just keep going and you know so in this case",
    "start": "5133320",
    "end": "5141920"
  },
  {
    "text": "we can adjust our sequential implementation just flat map to an effect. fork and keep doing that forever",
    "start": "5141920",
    "end": "5149000"
  },
  {
    "text": "and we'll end up with tons and tons of fibers that we spin up um but we still get the Cooperative yielding um with",
    "start": "5149000",
    "end": "5156400"
  },
  {
    "text": "effect of forever right so we still have the ability to run these three programs",
    "start": "5156400",
    "end": "5163000"
  },
  {
    "text": "concurrently and then this was kind of maybe like the trickiest",
    "start": "5163000",
    "end": "5169440"
  },
  {
    "text": "one for bounded concurrency there's a couple of different ways to do this um this is just like the most concise way I",
    "start": "5170880",
    "end": "5177800"
  },
  {
    "text": "could find um there are a couple of ways to do this um but we basically do the",
    "start": "5177800",
    "end": "5184480"
  },
  {
    "text": "sequential implementation and replicate it a number of times um and doing that",
    "start": "5184480",
    "end": "5190440"
  },
  {
    "text": "in an uh will basically allow us to have n numbers of fibers and fibers running",
    "start": "5190440",
    "end": "5197280"
  },
  {
    "text": "doing that work what's I think kind of cool about this little example is if we",
    "start": "5197280",
    "end": "5202560"
  },
  {
    "text": "run it let me this",
    "start": "5202560",
    "end": "5206800"
  },
  {
    "text": "down will it wait",
    "start": "5213239",
    "end": "5217440"
  },
  {
    "text": "or will it wait say that one more",
    "start": "5220199",
    "end": "5225679"
  },
  {
    "text": "time I I if I understood you it's kind of a good question but uh I I think it's a great question like I think people",
    "start": "5227560",
    "end": "5233719"
  },
  {
    "text": "probably have similar thoughts in their head will effect. fork weit for like the",
    "start": "5233719",
    "end": "5239000"
  },
  {
    "text": "fork to finish before it proceeds I think is kind of like where you what you were getting at",
    "start": "5239000",
    "end": "5246119"
  },
  {
    "text": "wait to finish like you have the four effects right but",
    "start": "5247679",
    "end": "5253800"
  },
  {
    "text": "you yeah okay um so if we run this you",
    "start": "5253800",
    "end": "5258840"
  },
  {
    "text": "can the logs actually kind of give an idea of what's going",
    "start": "5258840",
    "end": "5263280"
  },
  {
    "text": "on so I'm gonna pause this and we can take a look here so if we scroll up to",
    "start": "5263920",
    "end": "5269800"
  },
  {
    "text": "the beginning you know 100 is probably a lot but um I think an example this",
    "start": "5269800",
    "end": "5275080"
  },
  {
    "text": "nicely so the first thing that we do is we end up consuming a single value from the sequential fiber right the",
    "start": "5275080",
    "end": "5282400"
  },
  {
    "text": "sequential fiber takes a single value off the Q then because it's running forever we end up yielding to the other",
    "start": "5282400",
    "end": "5290280"
  },
  {
    "text": "fiber that is running which is the uh unbounded uh sorry the bounded",
    "start": "5290280",
    "end": "5296719"
  },
  {
    "text": "implementation the bounded implementation we set at a concurrency limit of four so we end up taking four",
    "start": "5296719",
    "end": "5303119"
  },
  {
    "text": "elements in a bounded fashion and and you can see with the like log annotations here that's running on the",
    "start": "5303119",
    "end": "5310159"
  },
  {
    "text": "four different bounded fibers and the cool thing is this fiber 11 12 13 14",
    "start": "5310159",
    "end": "5315639"
  },
  {
    "text": "those fiber IDs will be the same time every time this program Loops through um so we'll end up you basically have the",
    "start": "5315639",
    "end": "5321840"
  },
  {
    "text": "same four fibers uh processing work so you can you know think of it like a worker I'm not hesitate to use this word",
    "start": "5321840",
    "end": "5329080"
  },
  {
    "text": "but like a worker pool right you have like X number of workers pulling information off that Que um and then the",
    "start": "5329080",
    "end": "5334800"
  },
  {
    "text": "unbounded concurrency you can see the fiber counter just continuously going up so like in the previous iteration we got",
    "start": "5334800",
    "end": "5340600"
  },
  {
    "text": "up to something like 200 something and then in the next iteration we went all the way up to like 300 something so",
    "start": "5340600",
    "end": "5347400"
  },
  {
    "text": "that's again unbounded concurrency we're spinning up an unbounded number of fibers in that case um but what this illustrates is",
    "start": "5347400",
    "end": "5356199"
  },
  {
    "text": "that we can distribute the work uh like doing work um on elements of a que",
    "start": "5356199",
    "end": "5362840"
  },
  {
    "text": "across many different fibers and in in a concurrent fashion we just have to keep in mind like is what we're going to do",
    "start": "5362840",
    "end": "5370440"
  },
  {
    "text": "is what we're doing going to like drain the queue before we're ready to process elements on another queue are we",
    "start": "5370440",
    "end": "5376159"
  },
  {
    "text": "actually doing things concurrently um or are we accidentally going to starve that",
    "start": "5376159",
    "end": "5381400"
  },
  {
    "text": "queue before we have the chance to process elements on another fiber does that make sense any questions",
    "start": "5381400",
    "end": "5390600"
  },
  {
    "text": "yes going to get",
    "start": "5393040",
    "end": "5396760"
  },
  {
    "text": "memory that's a good question um I I don't know do you know I think",
    "start": "5403960",
    "end": "5412440"
  },
  {
    "text": "that yeah and then garbage collection should take care of like the memory that was allocated so the the FI I don't",
    "start": "5412440",
    "end": "5419719"
  },
  {
    "text": "think that you'd ever really run out of out of you'd ever get out of memory unless you spun up like you know some unbounded number of fibers like you know",
    "start": "5419719",
    "end": "5427000"
  },
  {
    "text": "in this case the queue is controlling how much work needs to be done um so those fibers have like a chance to",
    "start": "5427000",
    "end": "5432719"
  },
  {
    "text": "finish or whatever um say that again",
    "start": "5432719",
    "end": "5440520"
  },
  {
    "text": "certainly absolutely if you if those fibers like never terminate if you end up with like a bazillion fibers that",
    "start": "5441840",
    "end": "5447119"
  },
  {
    "text": "never terminate sure you could eventually run out of memory but",
    "start": "5447119",
    "end": "5452760"
  },
  {
    "text": "yeah",
    "start": "5452920",
    "end": "5455920"
  },
  {
    "text": "so replicate effect is just a way to replicate and effect program a number of times uh doing it in an unbounded",
    "start": "5458760",
    "end": "5465480"
  },
  {
    "text": "fashion means that the program is replic is can uh is replicated like in an unbounded it it is",
    "start": "5465480",
    "end": "5474119"
  },
  {
    "text": "replicated uh well it's in an setting concurrency it's unbounded means that as we're iterating through replicating that",
    "start": "5474560",
    "end": "5480480"
  },
  {
    "text": "effect instead of like doing that sequentially we do that in a concurrent fashion the discard true just means that",
    "start": "5480480",
    "end": "5485880"
  },
  {
    "text": "we don't want to get the results it's the same thing as in when you do an effect. four each and you set discard",
    "start": "5485880",
    "end": "5493000"
  },
  {
    "text": "true it means you don't want the to collect the results of that back into some structure so with replicate effect",
    "start": "5493000",
    "end": "5499360"
  },
  {
    "text": "setting discard to True means I want to replicate this program n number of times but I don't need like a an array of",
    "start": "5499360",
    "end": "5504960"
  },
  {
    "text": "those of those fiber like uh those effect programs coming back to me I just want to discard them well in this case",
    "start": "5504960",
    "end": "5510719"
  },
  {
    "text": "it would be like effects that return fibers but",
    "start": "5510719",
    "end": "5515840"
  },
  {
    "text": "um can you elaborate a little",
    "start": "5528800",
    "end": "5532520"
  },
  {
    "text": "bit let's say like those four drugs don't take s time sure do we always have like four workers",
    "start": "5534679",
    "end": "5544480"
  },
  {
    "text": "yep yeah and nope nope that's the benefit of running these in separate fibers is like",
    "start": "5544480",
    "end": "5550760"
  },
  {
    "text": "when the work's done that fiber can pick up more work if it needs to um the way that we've done this here is just to",
    "start": "5550760",
    "end": "5557480"
  },
  {
    "text": "illustrate how you could potentially Implement uh a program that like is",
    "start": "5557480",
    "end": "5562719"
  },
  {
    "text": "cooperatively yielding between multiple fibers and also processing work from the queue in different ways um but if you",
    "start": "5562719",
    "end": "5568800"
  },
  {
    "text": "just do like um if you're just pulling information off a queue and working on it and you set like some concurrency",
    "start": "5568800",
    "end": "5574920"
  },
  {
    "text": "limit like we did here with replicate effect for example soon as the work's done that that that fiber is ready to",
    "start": "5574920",
    "end": "5580280"
  },
  {
    "text": "process more work yeah think way looking at it",
    "start": "5580280",
    "end": "5587560"
  },
  {
    "text": "is and then just pass it",
    "start": "5590760",
    "end": "5594559"
  },
  {
    "text": "to yeah that's maybe like an easier way to visualize it is like is the way that Tim",
    "start": "5597080",
    "end": "5602760"
  },
  {
    "text": "mentioned sure there is a way to stop effect",
    "start": "5602760",
    "end": "5609440"
  },
  {
    "text": "forever is there uh do you mean like is there a way to terminate that like um",
    "start": "5610760",
    "end": "5617719"
  },
  {
    "text": "you would have to interrupt I believe to stop an effect up forever from",
    "start": "5617719",
    "end": "5622880"
  },
  {
    "text": "running like effect up interrup or you know any other way that",
    "start": "5622880",
    "end": "5627920"
  },
  {
    "text": "you can interrupt in effect so like time out the operation after like X number of seconds or and then you can recover from",
    "start": "5627920",
    "end": "5633360"
  },
  {
    "text": "that time out or right I think Interruption would be the only way you could really get out of an effect of forever Loop or if it fails that's",
    "start": "5633360",
    "end": "5640560"
  },
  {
    "text": "another good point yeah um but as long as that work is being done successfully and not returning errors then you'll",
    "start": "5640560",
    "end": "5647199"
  },
  {
    "text": "it's like a while one Loop yeah this case just",
    "start": "5647199",
    "end": "5652440"
  },
  {
    "text": "continue each one of these uh fibers that we're forking these these uh",
    "start": "5652440",
    "end": "5659119"
  },
  {
    "text": "sorry each one of the fibers that we're forking at the bottom here will just continue indefinitely",
    "start": "5659119",
    "end": "5664880"
  },
  {
    "text": "Yeah",
    "start": "5664880",
    "end": "5667880"
  },
  {
    "text": "Yeah Tim so so wait are you GNA be at the conference tomorrow okay I'm gonna ask",
    "start": "5671840",
    "end": "5679960"
  },
  {
    "text": "if you can wait till tomorrow I uh I think that uh I think",
    "start": "5679960",
    "end": "5685440"
  },
  {
    "text": "there will be a really good answer to that",
    "start": "5685440",
    "end": "5688800"
  },
  {
    "text": "tomorrow trying to",
    "start": "5692639",
    "end": "5696600"
  },
  {
    "text": "for well um so I think that the implementation that Tim mentioned is",
    "start": "5699639",
    "end": "5705920"
  },
  {
    "text": "probably like maybe an easier way to visualize or think about this like if you do an effect. all and four CLI four",
    "start": "5705920",
    "end": "5712679"
  },
  {
    "text": "times that still sets up like a concurrent like four separate fibers that can process work right um an",
    "start": "5712679",
    "end": "5718360"
  },
  {
    "text": "effect. Fork is an effectful operation so I'm I'm not exactly sure I can",
    "start": "5718360",
    "end": "5724239"
  },
  {
    "text": "take a look at your implementation at the Break um and we can maybe talk about it but keep in mind that like forking an",
    "start": "5724239",
    "end": "5730400"
  },
  {
    "text": "effect is also an effectful operation that Returns the runtime fiber as well",
    "start": "5730400",
    "end": "5735800"
  },
  {
    "text": "so any other questions yeah I think",
    "start": "5735800",
    "end": "5741080"
  },
  {
    "text": "still that's okay the FI",
    "start": "5741080",
    "end": "5747360"
  },
  {
    "text": "ID no fiber fiber IDs are constantly incremented as you spin up new fibers um",
    "start": "5750960",
    "end": "5757800"
  },
  {
    "text": "in the worker pool example uh we have a set number we have like you know you can",
    "start": "5757800",
    "end": "5763719"
  },
  {
    "text": "see it in the logs here we have like four fibers that are constantly processing work so those always have the same IDs but if we're using unbounded",
    "start": "5763719",
    "end": "5770679"
  },
  {
    "text": "concurrency then the fiber IDs will always be incremented any more",
    "start": "5770679",
    "end": "5778000"
  },
  {
    "text": "questions cool um so I want to talk with the time",
    "start": "5778000",
    "end": "5783119"
  },
  {
    "text": "that we have left about a pattern uh that is used I've mentioned this a",
    "start": "5783119",
    "end": "5788520"
  },
  {
    "text": "couple of times like almost ubiquitously throughout the effect packages the",
    "start": "5788520",
    "end": "5793600"
  },
  {
    "text": "library itself and that is um utilizing q and deferred together so having a",
    "start": "5793600",
    "end": "5800719"
  },
  {
    "text": "queue of items that include a deferred somewhere in the elements of that Q um",
    "start": "5800719",
    "end": "5806440"
  },
  {
    "text": "whether it's literally a que of deferred or a queue of elements that have some deferred in them and the reason why this",
    "start": "5806440",
    "end": "5812760"
  },
  {
    "text": "pattern is so useful is because sometimes Distributing work to different fibers can be",
    "start": "5812760",
    "end": "5819080"
  },
  {
    "text": "problematic um so for example what if in the implementation that we worked on",
    "start": "5819080",
    "end": "5824320"
  },
  {
    "text": "just before what if we want access to the results that come back in some other",
    "start": "5824320",
    "end": "5829800"
  },
  {
    "text": "fiber to then like do some further processing right so like what if we",
    "start": "5829800",
    "end": "5835040"
  },
  {
    "text": "wanted access to the results of do some work to then do some more work I don't",
    "start": "5835040",
    "end": "5840320"
  },
  {
    "text": "know in the implementation that we had before it's actually quite difficult to do that",
    "start": "5840320",
    "end": "5846840"
  },
  {
    "text": "but if we include a deferred alongside the elements of our Q we can solve this",
    "start": "5846840",
    "end": "5852480"
  },
  {
    "text": "problem by taking from the que where we want to perform the work completing the",
    "start": "5852480",
    "end": "5859360"
  },
  {
    "text": "Deferred with the result of doing that work and then awaiting the Deferred on",
    "start": "5859360",
    "end": "5864599"
  },
  {
    "text": "another fiber or wherever you need the result of that work and it sounds like really simple",
    "start": "5864599",
    "end": "5870560"
  },
  {
    "text": "but this pattern is extremely P powerful um it Powers uh the for things such like such",
    "start": "5870560",
    "end": "5877880"
  },
  {
    "text": "as like the rate limiter that we have I think the original implementation utilized this pattern now it does not but um it Powers a bunch of different uh",
    "start": "5877880",
    "end": "5886760"
  },
  {
    "text": "data types that we have in libraries around the effect ecosystem and it it's again it's very simple take from the",
    "start": "5886760",
    "end": "5892719"
  },
  {
    "text": "queue process the element complete the Deferred and then await the Deferred elsewhere um but doing this we actually",
    "start": "5892719",
    "end": "5899239"
  },
  {
    "text": "get access to the results of these concurrent computations so we can",
    "start": "5899239",
    "end": "5904960"
  },
  {
    "text": "distribute work across multiple fibers and then wait in elsewhere it's almost like a this is not really a proper way",
    "start": "5904960",
    "end": "5912800"
  },
  {
    "text": "to think about it but it's almost like a fan in fan out like operation where we're taking from the queue doing some",
    "start": "5912800",
    "end": "5919920"
  },
  {
    "text": "work completing the Deferred and then awaiting it um there is an exercise that",
    "start": "5919920",
    "end": "5926159"
  },
  {
    "text": "we have what time does this session",
    "start": "5926159",
    "end": "5930080"
  },
  {
    "text": "end is it over already tell me that's not",
    "start": "5931599",
    "end": "5937040"
  },
  {
    "text": "right hang on oh it is over okay my bad guys I've",
    "start": "5937040",
    "end": "5945400"
  },
  {
    "text": "done this to you twice now um listen I will be available during the break um to",
    "start": "5945400",
    "end": "5951599"
  },
  {
    "text": "talk about uh this pattern that we had just discussed there is a um a few more",
    "start": "5951599",
    "end": "5957920"
  },
  {
    "text": "exercises in this in uh the session that you can work on at your own Leisure I'm",
    "start": "5957920",
    "end": "5964280"
  },
  {
    "text": "also available on Discord if you guys wanted to collaborate on the exercise like outside of the workshop but I think",
    "start": "5964280",
    "end": "5970080"
  },
  {
    "text": "learning how to how to do this um will unlock a tremendous number of potential",
    "start": "5970080",
    "end": "5976800"
  },
  {
    "text": "implementations that will give you the power to really Leverage The concurrency that effect provides um so with that",
    "start": "5976800",
    "end": "5983719"
  },
  {
    "text": "we'll break for now but um again if you guys have questions or want to ask me questions during the break feel free um",
    "start": "5983719",
    "end": "5990080"
  },
  {
    "text": "and yeah thank you guys",
    "start": "5990080",
    "end": "5995320"
  },
  {
    "start": "5995000",
    "end": "8805000"
  },
  {
    "text": "um so in this session of the workshop we're going to move to a little bit like",
    "start": "5995639",
    "end": "6001760"
  },
  {
    "text": "of a higher level maybe with effect and we're going to talk about B batching and caching a functionality that's built",
    "start": "6001760",
    "end": "6008800"
  },
  {
    "text": "right into effect but perhaps maybe underutilized or not utilized po uh at",
    "start": "6008800",
    "end": "6014360"
  },
  {
    "text": "this point by folks so I wanted to spend the session talking about why this is",
    "start": "6014360",
    "end": "6020360"
  },
  {
    "text": "useful um we utilize uh",
    "start": "6020360",
    "end": "6026118"
  },
  {
    "text": "yeah thank you perfect thank you very much for letting",
    "start": "6031679",
    "end": "6037639"
  },
  {
    "text": "me know um so yeah request is a data type",
    "start": "6037639",
    "end": "6045080"
  },
  {
    "text": "in effect that is used by a couple of different libraries now um in essence it",
    "start": "6045080",
    "end": "6052679"
  },
  {
    "text": "represents a request which we might submit to some data source that can return a value of type A or might fail",
    "start": "6052679",
    "end": "6058080"
  },
  {
    "text": "with an error of Type e and this this data type coupled with um the request",
    "start": "6058080",
    "end": "6066199"
  },
  {
    "text": "resolver pattern um is extremely useful and allows us to do a lot of really cool",
    "start": "6066199",
    "end": "6071520"
  },
  {
    "text": "stuff um I think Tim is going to talk about some of that stuff tomorrow in his talk specifically um but I wanted to",
    "start": "6071520",
    "end": "6078760"
  },
  {
    "text": "touch on how we can leverage request in our own effect applications to do different things um so it's important to",
    "start": "6078760",
    "end": "6086920"
  },
  {
    "text": "know before we start talking about request um that the reason that batching and",
    "start": "6086920",
    "end": "6092560"
  },
  {
    "text": "caching is even possible with with request is because when you construct data types of of that uh extend the",
    "start": "6092560",
    "end": "6098960"
  },
  {
    "text": "request interface or or uh extend like a request. taged class we'll see a couple of different examples um under the hood",
    "start": "6098960",
    "end": "6105960"
  },
  {
    "text": "they all implement the equals trait for you so if you're familiar with um effects implementation of equals it's",
    "start": "6105960",
    "end": "6112239"
  },
  {
    "text": "kind of like we've we've made um the the equals trait kind of like silent on data",
    "start": "6112239",
    "end": "6119639"
  },
  {
    "text": "types they don't show through the actual type signature anymore specifically like",
    "start": "6119639",
    "end": "6124679"
  },
  {
    "text": "the data module in effect no longer really like adds anything to the type signature but when we",
    "start": "6124679",
    "end": "6131639"
  },
  {
    "text": "Implement uh requests under the hood they Implement equals for us which allows us to do things like batching and",
    "start": "6131639",
    "end": "6138840"
  },
  {
    "text": "caching um so let's take a look",
    "start": "6138840",
    "end": "6144159"
  },
  {
    "text": "uh I know that this is kind of small on the screen um but wish I could",
    "start": "6144159",
    "end": "6153199"
  },
  {
    "text": "zo uh is that really small for you folks in the back",
    "start": "6155360",
    "end": "6160800"
  },
  {
    "text": "yeah let me see if I have it in samples directory I do um I apologize I'll drop",
    "start": "6160800",
    "end": "6169360"
  },
  {
    "text": "these examples into the samples direct samples directory at the break so that you guys can inspect them",
    "start": "6169360",
    "end": "6176080"
  },
  {
    "text": "directly I am double clicking perhaps it's just the way that",
    "start": "6181760",
    "end": "6187520"
  },
  {
    "text": "I've done things has has screwed it up I'm not a front-end developer um but",
    "start": "6187520",
    "end": "6193880"
  },
  {
    "text": "anyways uh we we'll um like I said I'll take these samples and I'll make sure",
    "start": "6193880",
    "end": "6199080"
  },
  {
    "text": "they end up in the repository for folks to inspect and play with um but in this example here the first",
    "start": "6199080",
    "end": "6207520"
  },
  {
    "text": "thing we might notice is that we're importing data in request and uh the",
    "start": "6207520",
    "end": "6213679"
  },
  {
    "text": "we're we're basically trying to build up a request uh that represents getting it Tod do by its identifier right so in",
    "start": "6213679",
    "end": "6220920"
  },
  {
    "text": "this example here we have a to-do which we build using the data. tagged class",
    "start": "6220920",
    "end": "6227440"
  },
  {
    "text": "um uh um the data module in effect to-do is have an ID and they might also have some",
    "start": "6227440",
    "end": "6233880"
  },
  {
    "text": "text associated with them um in the classic example they'd probably also have like a completed field but the",
    "start": "6233880",
    "end": "6239639"
  },
  {
    "text": "space on my slide and then we also have a Todo error",
    "start": "6239639",
    "end": "6246320"
  },
  {
    "text": "which can be which represents the case where we try to get a to-do by ID but we have some error that occurs and this",
    "start": "6246320",
    "end": "6252119"
  },
  {
    "text": "particular piece of data has a message associated with it so um again",
    "start": "6252119",
    "end": "6258679"
  },
  {
    "text": "uh then if we look at the get Todo by ID interface",
    "start": "6258679",
    "end": "6264159"
  },
  {
    "text": "there are two real ways to construct uh data types that are are requests um we",
    "start": "6264159",
    "end": "6269520"
  },
  {
    "text": "can either use interfaces to represent our requests but it's slightly more verbose",
    "start": "6269520",
    "end": "6275360"
  },
  {
    "text": "than the alternative but I wanted to show both so in this example we use the interface method where we extend request",
    "start": "6275360",
    "end": "6283199"
  },
  {
    "text": "and we basically specify that our request can succeed with a to-do or it can fail with a to-do error and our",
    "start": "6283199",
    "end": "6292199"
  },
  {
    "text": "request itself self requires an ID to be passed along with it so basically we have a request",
    "start": "6292199",
    "end": "6298000"
  },
  {
    "text": "for a particular to-do ID that can either succeed with a to-do fail with a to-do error um and when we use the",
    "start": "6298000",
    "end": "6304840"
  },
  {
    "text": "method of extending the request interface we have a couple of helpers in the effect library that allow us to",
    "start": "6304840",
    "end": "6310719"
  },
  {
    "text": "construct requests so in this case I'm using request. tagged to actually make a",
    "start": "6310719",
    "end": "6316639"
  },
  {
    "text": "Constructor forget to do by ID and I kind of think this pattern is a little bit verbose we expose it for conv ience",
    "start": "6316639",
    "end": "6324080"
  },
  {
    "text": "but I think the class method is a little bit more concise same exact we're",
    "start": "6324080",
    "end": "6329520"
  },
  {
    "text": "setting up a to-do a to-do error and a get get to do by ID request but in this",
    "start": "6329520",
    "end": "6335119"
  },
  {
    "text": "case because classes um Implement both the type and the data type um we don't",
    "start": "6335119",
    "end": "6341080"
  },
  {
    "text": "really need the whole like extra helper and everything like that so in this case we're saying we're extending tagged",
    "start": "6341080",
    "end": "6346599"
  },
  {
    "text": "class um we're saying that our to-do we can fail with a to-do error we can succeed with a to-do and we need to pass",
    "start": "6346599",
    "end": "6353000"
  },
  {
    "text": "pass an ID in um with our to-do by get to-do by ID",
    "start": "6353000",
    "end": "6358800"
  },
  {
    "text": "request requests themselves are just that they're just data that represents a",
    "start": "6358840",
    "end": "6364320"
  },
  {
    "text": "request in order to actually satisfy a like to resolve a request for some piece",
    "start": "6364320",
    "end": "6369639"
  },
  {
    "text": "of data we need to implement a request resolver um in this example here I have",
    "start": "6369639",
    "end": "6377080"
  },
  {
    "text": "just mocked out the get by ID method which is basically saying we pass in some to-do ID and we either get the",
    "start": "6377080",
    "end": "6383880"
  },
  {
    "text": "to-do back or we get a to-do error the implementation doesn't really matter what's important here is the way that",
    "start": "6383880",
    "end": "6391599"
  },
  {
    "text": "we're constructing request resolver so there are a bunch of different Constructors in the request resolver",
    "start": "6391599",
    "end": "6397960"
  },
  {
    "text": "module um that make it really flexible to express like how we're going to actually go about completing these",
    "start": "6397960",
    "end": "6403960"
  },
  {
    "text": "requests in this case I'm using probably like one of the easiest Constructors to use which is the uh from effect",
    "start": "6403960",
    "end": "6410639"
  },
  {
    "text": "Constructor which literally allows us to pass uh to basic to specify the types of",
    "start": "6410639",
    "end": "6415880"
  },
  {
    "text": "requests that we're going to receive um and then resolve that request directly",
    "start": "6415880",
    "end": "6421360"
  },
  {
    "text": "and I think I have a title here that should be get by ID um that's what I get for updating my slides at the last",
    "start": "6421360",
    "end": "6426800"
  },
  {
    "text": "minute um so basically allows us to resolve that request directly by",
    "start": "6426800",
    "end": "6433520"
  },
  {
    "text": "whatever is returned from this effectful function so uh in this case when we use",
    "start": "6433520",
    "end": "6439440"
  },
  {
    "text": "the from effect Constructor the uh I'll call it re EST accounting is done for us",
    "start": "6439440",
    "end": "6444760"
  },
  {
    "text": "meaning whatever is returned by get by ID is how that request will be completed",
    "start": "6444760",
    "end": "6451119"
  },
  {
    "text": "so if the get by ID effect here returns a to-do successfully then that request",
    "start": "6451119",
    "end": "6458159"
  },
  {
    "text": "will be successful and will be a successful request if it fails that request will be completed with the the",
    "start": "6458159",
    "end": "6464639"
  },
  {
    "text": "error itself so from effect is nice um it makes uh expressing your requests",
    "start": "6464639",
    "end": "6472280"
  },
  {
    "text": "relatively easy but the problem with resolving a request using the from",
    "start": "6472280",
    "end": "6478599"
  },
  {
    "text": "effect Constructor is we don't get to leverage a feature of request resolvers",
    "start": "6478599",
    "end": "6484119"
  },
  {
    "text": "called batching so um batching is something that you can",
    "start": "6484119",
    "end": "6489440"
  },
  {
    "text": "take advantage of with a request resolver if the API that you're requesting or the data",
    "start": "6489440",
    "end": "6494760"
  },
  {
    "text": "source that you're requesting supports uh batching meaning passing in multiple",
    "start": "6494760",
    "end": "6500639"
  },
  {
    "text": "in this case do IDs at once and resolving them all at once um and I have",
    "start": "6500639",
    "end": "6505679"
  },
  {
    "text": "an example on the next slide of how this might look so again we have this get by I IDs method now that instead takes in",
    "start": "6505679",
    "end": "6513239"
  },
  {
    "text": "an array of to-do IDs and returns an array of to-dos to us or it can fail",
    "start": "6513239",
    "end": "6520040"
  },
  {
    "text": "with a to-do error but the difference here is I'm now using the make batched",
    "start": "6520040",
    "end": "6526679"
  },
  {
    "text": "uh Constructor from the request resolver module um and what's cool about this",
    "start": "6526679",
    "end": "6532239"
  },
  {
    "text": "again we Tak in an array of requests instead and as long as our API supports",
    "start": "6532239",
    "end": "6537480"
  },
  {
    "text": "batching like meaning we can pass multiple uh we can in this case we can",
    "start": "6537480",
    "end": "6542840"
  },
  {
    "text": "pass in multiple to-do IDs um we can Leverage The batching in a",
    "start": "6542840",
    "end": "6548159"
  },
  {
    "text": "request resolver um so the the complicating",
    "start": "6548159",
    "end": "6553560"
  },
  {
    "text": "Factor here is yes you get batching which is really nice um through request",
    "start": "6553560",
    "end": "6558679"
  },
  {
    "text": "resolver but the kind of like um maybe annoying thing is that you need to",
    "start": "6558679",
    "end": "6565840"
  },
  {
    "text": "do the I'll call it again request accounting yourself meaning in the previous example where we were just",
    "start": "6565840",
    "end": "6572199"
  },
  {
    "text": "using from effect the effect itself was what we used to complete the request we",
    "start": "6572199",
    "end": "6577480"
  },
  {
    "text": "didn't have to use any request methods to actually like do anything um in this case we have to grab all the IDS from",
    "start": "6577480",
    "end": "6585199"
  },
  {
    "text": "the request call our API to get all the to-dos back and then for each of the requests that we get in we need to remap",
    "start": "6585199",
    "end": "6593560"
  },
  {
    "text": "the to-do that we got to the request itself and then succeed the request so a",
    "start": "6593560",
    "end": "6599199"
  },
  {
    "text": "little bit more accounting that has to be done but we get batching for free um",
    "start": "6599199",
    "end": "6605080"
  },
  {
    "text": "if we just do this little bit of extra work this make sense so far if anybody",
    "start": "6605080",
    "end": "6610560"
  },
  {
    "text": "has any questions yeah so dis uh in for in effect4 is a",
    "start": "6610560",
    "end": "6617159"
  },
  {
    "text": "good question very good question in effect. 4 each um you can pass a couple",
    "start": "6617159",
    "end": "6622480"
  },
  {
    "text": "of different options uh on the other end in as the second argument um one of",
    "start": "6622480",
    "end": "6627800"
  },
  {
    "text": "which being discard which basically says don't accumulate the results uh so if",
    "start": "6627800",
    "end": "6634360"
  },
  {
    "text": "you pass discard false effect. 4 each won't accumulate the results into an internal array um whereas if you don't",
    "start": "6634360",
    "end": "6641719"
  },
  {
    "text": "pass this card then you'll uh accumulate all the results into an array but in this case we don't actually need to do",
    "start": "6641719",
    "end": "6648599"
  },
  {
    "text": "that because the results um what Happ happens internally here is when you",
    "start": "6648599",
    "end": "6654000"
  },
  {
    "text": "succeed a request it updates something in the environment that you don't see when you're using a request resolver um",
    "start": "6654000",
    "end": "6660280"
  },
  {
    "text": "so you don't actually need to return the results here it's basically like a small optimization in this case does that make",
    "start": "6660280",
    "end": "6666880"
  },
  {
    "text": "sense",
    "start": "6666880",
    "end": "6669880"
  },
  {
    "text": "cool excellent question um D duplication is done for you yes um so when you batch",
    "start": "6674159",
    "end": "6682280"
  },
  {
    "text": "mult MTI requests together they're D duplicated if I'm correct right Tim I think we tested this the other",
    "start": "6682280",
    "end": "6688320"
  },
  {
    "text": "day yeah um I'm like 99% sure but we can we can test it ourselves like when we",
    "start": "6688320",
    "end": "6694320"
  },
  {
    "text": "look at the example um because request like I said before has implemented",
    "start": "6694320",
    "end": "6701000"
  },
  {
    "text": "equals for you um it's able to duplicate the like",
    "start": "6701000",
    "end": "6706400"
  },
  {
    "text": "similar requests so if you pass in two requests for the same ID um you'll the",
    "start": "6706400",
    "end": "6711719"
  },
  {
    "text": "first it will duplicate that request and and you won't end up with like duplicate requests coming through if that makes",
    "start": "6711719",
    "end": "6717159"
  },
  {
    "text": "sense",
    "start": "6717159",
    "end": "6720159"
  },
  {
    "text": "um so yeah if you have a complex object that goes along with the request and you want to make sure that dup you're that",
    "start": "6725400",
    "end": "6731560"
  },
  {
    "text": "you're D duplicating that complex object like let's say ID is not ID maybe it's I",
    "start": "6731560",
    "end": "6737199"
  },
  {
    "text": "don't know an object itself right there's some like other complex object uh the easiest way to handle that would",
    "start": "6737199",
    "end": "6743000"
  },
  {
    "text": "be to implement your object with the data module to express it with data um because as soon as you do that again all",
    "start": "6743000",
    "end": "6749639"
  },
  {
    "text": "of this stuff comes for free to duplication and caching which we'll talk about in a",
    "start": "6749639",
    "end": "6756000"
  },
  {
    "text": "minute so uh before we move on to the coding exercise I'll touch on caching really quick we are going to have an",
    "start": "6756320",
    "end": "6762000"
  },
  {
    "text": "exercise on caching as well um but the other nice thing that",
    "start": "6762000",
    "end": "6767239"
  },
  {
    "text": "request resolvers um can provide for you is the ability to cash results of",
    "start": "6767239",
    "end": "6773159"
  },
  {
    "text": "requests we're going to talk about it a little bit more in a while but I at least wanted to mention it that besides",
    "start": "6773159",
    "end": "6779119"
  },
  {
    "text": "D duplicating requests which we can confirm in a moment we you also have the ability to cach the results of requests",
    "start": "6779119",
    "end": "6785520"
  },
  {
    "text": "across many different indications so if we for example um are running the same",
    "start": "6785520",
    "end": "6792000"
  },
  {
    "text": "request for a to-do over and over and over again um by caching the results of that request with a request resolver we",
    "start": "6792000",
    "end": "6798079"
  },
  {
    "text": "only return we only actually have to do the computation once and then every other time we just get the cached results so we'll talk about caching in a",
    "start": "6798079",
    "end": "6805440"
  },
  {
    "text": "moment um for now in",
    "start": "6805440",
    "end": "6810560"
  },
  {
    "text": "your sorry let me move this over in your Workshop exercises under",
    "start": "6810560",
    "end": "6815880"
  },
  {
    "text": "session three exercise zero um we are going to implement a batched request",
    "start": "6815880",
    "end": "6822199"
  },
  {
    "text": "resolver for the Pokemon API um so you can take a scan through the full file",
    "start": "6822199",
    "end": "6828880"
  },
  {
    "text": "but basically the following exercise is going to talk exp uh exemplify how we could utilize a request resolver to take",
    "start": "6828880",
    "end": "6835400"
  },
  {
    "text": "advantage of any data source that supports batching requests for example the Pokemon graphql API if we take a",
    "start": "6835400",
    "end": "6841360"
  },
  {
    "text": "look at it actually option",
    "start": "6841360",
    "end": "6846440"
  },
  {
    "text": "click um yeah",
    "start": "6846440",
    "end": "6851960"
  },
  {
    "text": "sure if we take a look at the console the get Pokemon by ID uh graphql",
    "start": "6851960",
    "end": "6860159"
  },
  {
    "text": "query here allows specifying a list of IDs so we can actually batch up multiple",
    "start": "6860159",
    "end": "6865199"
  },
  {
    "text": "requests um and so in our um program",
    "start": "6865199",
    "end": "6870440"
  },
  {
    "text": "here your goal is going to be to implement uh a make batched Constructor for the for resolving these po get",
    "start": "6870440",
    "end": "6877480"
  },
  {
    "text": "Pokemon by ID requests but I want to take note really quickly at the bottom of the program here",
    "start": "6877480",
    "end": "6883719"
  },
  {
    "text": "that when we actually do um an effect. for each call on the uh on the range of",
    "start": "6883719",
    "end": "6892079"
  },
  {
    "text": "Po on IDs from 1 to 100 we're going to take a look at the difference in timing",
    "start": "6892079",
    "end": "6897280"
  },
  {
    "text": "between batching the requests and not batching the requests um after the fact because right now this this",
    "start": "6897280",
    "end": "6903040"
  },
  {
    "text": "implementation right here does not turn on batching uh for executing these requests once you guys have finished",
    "start": "6903040",
    "end": "6909800"
  },
  {
    "text": "implementing your make batched Constructor for uh request resolver um",
    "start": "6909800",
    "end": "6914960"
  },
  {
    "text": "we'll turn on batching and we'll take a look at the difference in time between executing batched versions of those",
    "start": "6914960",
    "end": "6920079"
  },
  {
    "text": "requests versus not batched",
    "start": "6920079",
    "end": "6924320"
  },
  {
    "text": "a few folks have brought up the the default behavior of for each um when you",
    "start": "6926079",
    "end": "6931639"
  },
  {
    "text": "don't specify whether you want batching enabled or not um and I think I mistakenly told a few of you that uh if",
    "start": "6931639",
    "end": "6937880"
  },
  {
    "text": "you enable batching regionally with effect. with request batching equal to",
    "start": "6937880",
    "end": "6943199"
  },
  {
    "text": "true that that will propagate to for each however Tim and I were noticing that we are pretty sure that for each by",
    "start": "6943199",
    "end": "6949840"
  },
  {
    "text": "default uh sets batching to fall when we should set it to inherit um so I think we're going to",
    "start": "6949840",
    "end": "6958280"
  },
  {
    "text": "talk with Mike and probably change that behavior because I think it makes more sense if you're running a 4 each and you've enabled batching regionally you",
    "start": "6958280",
    "end": "6964760"
  },
  {
    "text": "should expect it to propagate into the 4 each um but I'll ask we'll talk with",
    "start": "6964760",
    "end": "6969920"
  },
  {
    "text": "Mike and see if he had a reason why we defaulted it def false the fiber ref itself should default def false",
    "start": "6969920",
    "end": "6976400"
  },
  {
    "text": "but for those of you who brought that up that was a really good point um all",
    "start": "6976400",
    "end": "6983040"
  },
  {
    "text": "right so let's take a look did the TV shut off",
    "start": "6983040",
    "end": "6991198"
  },
  {
    "text": "again so let's take a look at the solution um I am sorry that I did not",
    "start": "6992520",
    "end": "6998280"
  },
  {
    "text": "handle rate limiting in my implementation of the Pokemon repo I was not expecting to get rate limited silly",
    "start": "6998280",
    "end": "7005239"
  },
  {
    "text": "me um let's take a",
    "start": "7005239",
    "end": "7010280"
  },
  {
    "text": "look this was exercise",
    "start": "7010280",
    "end": "7014239"
  },
  {
    "text": "so um this was our first exercise",
    "start": "7020320",
    "end": "7028598"
  },
  {
    "text": "right this was our first exercise in this session correct yeah okay session three exercise",
    "start": "7029800",
    "end": "7038119"
  },
  {
    "text": "zero basic so if we look at the implementation",
    "start": "7038119",
    "end": "7044040"
  },
  {
    "text": "here um we basically for our request resolver um",
    "start": "7044040",
    "end": "7052960"
  },
  {
    "text": "a few of you also brought up the point of the fact that uh well let's go through the implementation and then I'll",
    "start": "7052960",
    "end": "7058679"
  },
  {
    "text": "bring up some like points that we could have done differently here so um in the implementation here we're just grabbing",
    "start": "7058679",
    "end": "7063960"
  },
  {
    "text": "all of the request IDs from the requests passing them into Pokemon API to get by IDs um you can use find I chose to use a",
    "start": "7063960",
    "end": "7072440"
  },
  {
    "text": "map um and to do the accounting of grabbing the uh associating the Pokemon",
    "start": "7072440",
    "end": "7077840"
  },
  {
    "text": "with its Pokemon ID and then you can basically succeed each request that comes in now a few of you brought up",
    "start": "7077840",
    "end": "7084920"
  },
  {
    "text": "that uh maybe we should not assume that even if the request to the API succeeds",
    "start": "7084920",
    "end": "7090840"
  },
  {
    "text": "that we get all the Pokemon back certainly would have solved the issue with everybody not seeing output as we were getting rate limited um so what we",
    "start": "7090840",
    "end": "7098280"
  },
  {
    "text": "could do is we could either handle rate limiting in our Pokemon repo or we could adjust the request in this case to",
    "start": "7098280",
    "end": "7104480"
  },
  {
    "text": "return an option to Pokemon instead of like a Pokemon itself um and in that case we could use we could instead um",
    "start": "7104480",
    "end": "7112239"
  },
  {
    "text": "check if we actually got the appropriate Pokemon back return an option. some otherwise return option. none if we didn't and that would have also like",
    "start": "7112239",
    "end": "7118440"
  },
  {
    "text": "allowed us to see output um a few of you also had questions about error handling here so",
    "start": "7118440",
    "end": "7126239"
  },
  {
    "text": "request itself has a bunch of combinators on it right now we're just using very simple ones",
    "start": "7126239",
    "end": "7132599"
  },
  {
    "text": "um like request. succeed and a few of you used request. fail as well um for",
    "start": "7132599",
    "end": "7138920"
  },
  {
    "text": "this should be fail um for uh our error handling scenario um if",
    "start": "7138920",
    "end": "7147199"
  },
  {
    "text": "we have a batched API that fails that means we probably aren't getting any results back if the full call to that",
    "start": "7147199",
    "end": "7153560"
  },
  {
    "text": "API failed um which is I guess the assumption that I made in this case we",
    "start": "7153560",
    "end": "7158719"
  },
  {
    "text": "would basically need to handle that error and we need to propagate that error to every request that came in",
    "start": "7158719",
    "end": "7165040"
  },
  {
    "text": "right so every single one of those requests that came in should fail with that same error um so in this case uh an",
    "start": "7165040",
    "end": "7171760"
  },
  {
    "text": "easy way to handle that would be if you utilized an effect. gen to handle the logic of completing requests you could",
    "start": "7171760",
    "end": "7178639"
  },
  {
    "text": "then pipe that gen to a catch all where you grab the error and then you could fail the request with that",
    "start": "7178639",
    "end": "7185840"
  },
  {
    "text": "error um but again the point here that that this should drive home is that all",
    "start": "7185840",
    "end": "7191679"
  },
  {
    "text": "the request accounting has to be done manually when you're batching and in order to use batching the API has to",
    "start": "7191679",
    "end": "7198360"
  },
  {
    "text": "support it um so if you're trying to use batching and your API doesn't support it um you're just still going to end up",
    "start": "7198360",
    "end": "7204719"
  },
  {
    "text": "executing multiple requests against that API right um yeah that in the specific case that",
    "start": "7204719",
    "end": "7212000"
  },
  {
    "text": "we're having where you're getting partial results back along with the option thing you",
    "start": "7212000",
    "end": "7219000"
  },
  {
    "text": "can most naive check and then figuring out like okay the ls don't match I need",
    "start": "7220960",
    "end": "7227199"
  },
  {
    "text": "to do more work for the S what matches when that's when you can get like a more",
    "start": "7227199",
    "end": "7233360"
  },
  {
    "text": "specific failures with Al true yeah that would be another way instead of returning an option to poke",
    "start": "7233360",
    "end": "7239719"
  },
  {
    "text": "of Pokemon you could fail in the situation in the requests that didn't get a Pokemon back that you were",
    "start": "7239719",
    "end": "7245199"
  },
  {
    "text": "expecting to um and then I also wanted to just quickly point out some other",
    "start": "7245199",
    "end": "7250760"
  },
  {
    "text": "implementation detail do you have a question sorry anybody have a question thought I saw hand no okay um I wanted",
    "start": "7250760",
    "end": "7256000"
  },
  {
    "text": "to point out a few other implementation details about how you can actually fire off requests so in this case we if we",
    "start": "7256000",
    "end": "7263079"
  },
  {
    "text": "scroll down to where the program is actually executing um we are doing a four each on",
    "start": "7263079",
    "end": "7270599"
  },
  {
    "text": "the Pokemon ID is from 1 to 100 and executing rep. gety ID and if we look at",
    "start": "7270599",
    "end": "7276239"
  },
  {
    "text": "the implementation of Pokemon rep. gepi ID we can see that it's called calling",
    "start": "7276239",
    "end": "7282480"
  },
  {
    "text": "it's taking in this ID and it's calling effect. request passing in uh a new",
    "start": "7282480",
    "end": "7287639"
  },
  {
    "text": "request of get Pokemon by ID and then we also have to provide the resolver that we're going to use to resolve that",
    "start": "7287639",
    "end": "7293719"
  },
  {
    "text": "request so I will say in most of the situations where I've",
    "start": "7293719",
    "end": "7298920"
  },
  {
    "text": "used requests and request resolvers and dner and Tim can feel free to disagree",
    "start": "7298920",
    "end": "7304079"
  },
  {
    "text": "but I think think that for me it's been easiest to lift all my resolvers and",
    "start": "7304079",
    "end": "7309960"
  },
  {
    "text": "requests into a like service so that I don't have to deal with like everything being in different",
    "start": "7309960",
    "end": "7316400"
  },
  {
    "text": "places I can just expose the API that I want in this case get by ID get a Pokemon by ID and when I call this a",
    "start": "7316400",
    "end": "7324320"
  },
  {
    "text": "this uh particular method I don't have to worry about you know passing the correct request resolver all of that is",
    "start": "7324320",
    "end": "7330119"
  },
  {
    "text": "done within uh the Constructor for the Pokemon repo itself and",
    "start": "7330119",
    "end": "7337520"
  },
  {
    "text": "um there was another question did I just lose the mic",
    "start": "7337520",
    "end": "7343520"
  },
  {
    "text": "sure did um I will project there was another question about",
    "start": "7343520",
    "end": "7351320"
  },
  {
    "text": "um controlling the batch size coming into a batched request resolver which was a great question um I forgot that we",
    "start": "7351320",
    "end": "7358920"
  },
  {
    "text": "also have higher order combinators on the on the request resolver module itself um so if you wanted to control",
    "start": "7358920",
    "end": "7366320"
  },
  {
    "text": "like the batch size associated with a particular batched request resolver you could for example pipe this make batched",
    "start": "7366320",
    "end": "7373119"
  },
  {
    "text": "request resolver into a request resolver",
    "start": "7373119",
    "end": "7379159"
  },
  {
    "text": "batn and provided the amount of like the B the actual number of requests that you want to batch at once um so there are",
    "start": "7379159",
    "end": "7388239"
  },
  {
    "text": "higher order uh like combinators that we can use to control the behavior of our",
    "start": "7388239",
    "end": "7393480"
  },
  {
    "text": "request resolvers um which makes it really powerful it's very highly composable and there's also um there are",
    "start": "7393480",
    "end": "7401480"
  },
  {
    "text": "also o uh other helpers for request resolver that allow you to for example",
    "start": "7401480",
    "end": "7406760"
  },
  {
    "text": "if you have if you want to handle multiple requests by a single resolver um so let's say we had like get Pokemon",
    "start": "7406760",
    "end": "7413400"
  },
  {
    "text": "by a d and get all Pokemon whatever um you could use",
    "start": "7413400",
    "end": "7418880"
  },
  {
    "text": "request request resolver dot Tim what's the name of the function from effect",
    "start": "7418880",
    "end": "7425840"
  },
  {
    "text": "tagged um and this takes I think an object that you pass in your requests",
    "start": "7425840",
    "end": "7435639"
  },
  {
    "text": "and",
    "start": "7436000",
    "end": "7439000"
  },
  {
    "text": "right so like you can imagine oh wow you can imagine if you have",
    "start": "7446280",
    "end": "7453360"
  },
  {
    "text": "multiple you can imagine if you have multiple different request types um that",
    "start": "7453679",
    "end": "7459040"
  },
  {
    "text": "are all tagged you know if you have like a tagged Union that you put all those requests into you could handle them all",
    "start": "7459040",
    "end": "7464159"
  },
  {
    "text": "at once if you want to um I tend to separate my request resolvers just because sometimes that higher order",
    "start": "7464159",
    "end": "7470880"
  },
  {
    "text": "behavior is helpful helpful um we probably won't have time for the session project but um the wait is this session",
    "start": "7470880",
    "end": "7481760"
  },
  {
    "text": "over okay good um we probably won't get to the session project but um in the",
    "start": "7482119",
    "end": "7487920"
  },
  {
    "text": "experimental package we have like for example high order uh requesters is like the data loader request resolver where",
    "start": "7487920",
    "end": "7494000"
  },
  {
    "text": "you can basically pass in an existing request resolver that you have and then I think it takes a window um and a Max",
    "start": "7494000",
    "end": "7500840"
  },
  {
    "text": "batch size and basically turns that request resolver into a data loader that batches over a window as well um",
    "start": "7500840",
    "end": "7508320"
  },
  {
    "text": "so the request resolver pattern is very useful I at least wanted to get you folks used to like writing a resolver",
    "start": "7508320",
    "end": "7514840"
  },
  {
    "text": "especially a batched one if the API supports it um but the the pattern here",
    "start": "7514840",
    "end": "7521199"
  },
  {
    "text": "of pulling all of that into a layer and exposing it as a service I think is is really useful because all that logic is",
    "start": "7521199",
    "end": "7527159"
  },
  {
    "text": "kind of like bundled up into the layer um itself I don't know if Tim or you all",
    "start": "7527159",
    "end": "7533320"
  },
  {
    "text": "if you guys have any other feedback on",
    "start": "7533320",
    "end": "7536678"
  },
  {
    "text": "thatu newat that that very very th abstraction",
    "start": "7545400",
    "end": "7551280"
  },
  {
    "text": "of give me an idea I'll give you a Pokemon without introducing all the complexity of oh by the way I'm Bing oh",
    "start": "7551280",
    "end": "7557800"
  },
  {
    "text": "by the way it's Cent oh by the way I'm you to both then reach for testing",
    "start": "7557800",
    "end": "7563239"
  },
  {
    "text": "that don't need to implement all that and to then later",
    "start": "7563239",
    "end": "7569320"
  },
  {
    "text": "introduce right so just to point out really quickly um also the issue that we",
    "start": "7570040",
    "end": "7576119"
  },
  {
    "text": "were seeing before um so effect for the the four each construct in effect",
    "start": "7576119",
    "end": "7583000"
  },
  {
    "text": "accepts a bunch of different options one of which being able to enable batching U because it was such a common thing for",
    "start": "7583000",
    "end": "7589320"
  },
  {
    "text": "us to do right batching requests in a for each Loop um we decided to put this option here as well um but you can also",
    "start": "7589320",
    "end": "7597199"
  },
  {
    "text": "enable batching regionally batching with requests batching true um what the issue that we",
    "start": "7597199",
    "end": "7605960"
  },
  {
    "text": "were describing earlier is basically at the moment batching defaults to false in for each Loop so this",
    "start": "7605960",
    "end": "7612559"
  },
  {
    "text": "Regional request batching doesn't actually propagate into the four each what it probably should do is and we can",
    "start": "7612559",
    "end": "7620040"
  },
  {
    "text": "fix this is default to inherit which inherits whatever the regional setting is um so it probably makes more sense to",
    "start": "7620040",
    "end": "7626520"
  },
  {
    "text": "default this to inherit but um we'll talk about it and and try to figure that out",
    "start": "7626520",
    "end": "7632280"
  },
  {
    "text": "um and the last thing I'll mention about this is a lot of you like ran this so",
    "start": "7632280",
    "end": "7638559"
  },
  {
    "text": "you observed like the difference between turning batching on and off takes like over 10 seconds to run these queries",
    "start": "7638559",
    "end": "7644520"
  },
  {
    "text": "without batching on takes less than a second to run the queries with batching on because obviously all of those",
    "start": "7644520",
    "end": "7650719"
  },
  {
    "text": "Pokemon IDs are going in one request um this request with request batching",
    "start": "7650719",
    "end": "7657320"
  },
  {
    "text": "combinator essentially sets something called a fiber ref under the hood um and",
    "start": "7657320",
    "end": "7662480"
  },
  {
    "text": "we don't necessarily need to get into uh fiber refs but the useful thing here is",
    "start": "7662480",
    "end": "7667960"
  },
  {
    "text": "that we can regionally control this Behavior so in this part of my application maybe I",
    "start": "7667960",
    "end": "7673520"
  },
  {
    "text": "want to enable batching but maybe like somewhere deeper in my application I want to shut it off for certain requests",
    "start": "7673520",
    "end": "7679239"
  },
  {
    "text": "um you can even do it like on the request level in your layer so you can you know basically pipe this to uh turn",
    "start": "7679239",
    "end": "7685280"
  },
  {
    "text": "off request B batching right um so that granularity of when you can actually where you can how easily you can control",
    "start": "7685280",
    "end": "7692880"
  },
  {
    "text": "requests that are batched and what's not um is is extremely useful for all the",
    "start": "7692880",
    "end": "7698199"
  },
  {
    "text": "points that that datner made as well um okay so I also want to touch on request",
    "start": "7698199",
    "end": "7706719"
  },
  {
    "text": "caching um we might skip this exercise because it literally is doing this um",
    "start": "7706719",
    "end": "7713079"
  },
  {
    "text": "but request caching is also an extremely useful thing to implement um there is a",
    "start": "7713079",
    "end": "7720599"
  },
  {
    "text": "default cache that exists um like when you run requests I don't think caching",
    "start": "7720599",
    "end": "7726199"
  },
  {
    "text": "is on by default it is",
    "start": "7726199",
    "end": "7732480"
  },
  {
    "text": "it's not right it's false by default right okay um you dner just sets it all at the",
    "start": "7732480",
    "end": "7740880"
  },
  {
    "text": "top level um so uh besides batching the other really",
    "start": "7740880",
    "end": "7747040"
  },
  {
    "text": "useful thing about requests is because they Implement equals um we can cach",
    "start": "7747040",
    "end": "7752760"
  },
  {
    "text": "them as well and uh you can control the cache that's used so I I for the life of",
    "start": "7752760",
    "end": "7759719"
  },
  {
    "text": "me can never remember the default capacity and time to live for the request cach that's like default in",
    "start": "7759719",
    "end": "7765559"
  },
  {
    "text": "effect but the request module has a make cach function which you can see",
    "start": "7765559",
    "end": "7771840"
  },
  {
    "text": "here um and we can pass in whatever capacity and time to live that we want so we can um you know say we only want",
    "start": "7771840",
    "end": "7779480"
  },
  {
    "text": "to cash 100 elements at a time we only want them to be cached for a day or 100 milliseconds or whatever um and the cool",
    "start": "7779480",
    "end": "7786079"
  },
  {
    "text": "thing about this is we can also do this regionally so if you look at the get too by ID example",
    "start": "7786079",
    "end": "7792800"
  },
  {
    "text": "below the with request cach and with request caching combinators allow us to",
    "start": "7792800",
    "end": "7798520"
  },
  {
    "text": "regionally set the behavior of caching in our effect apps as well so if I were to pass in you know uh get Pokemon by ID",
    "start": "7798520",
    "end": "7806559"
  },
  {
    "text": "the same ID 100 times uh it would run it the first time if I have cashing on and",
    "start": "7806559",
    "end": "7812440"
  },
  {
    "text": "then the next hundred times it would immediately return because those uh that request has already been fired off for",
    "start": "7812440",
    "end": "7818880"
  },
  {
    "text": "that Pokemon ID the point was brought brought up before um what if I have like some custom object that I'm passing",
    "start": "7818880",
    "end": "7824960"
  },
  {
    "text": "along with my request and I want to enable caching um then I would suggest using the data module from effect to",
    "start": "7824960",
    "end": "7830520"
  },
  {
    "text": "make sure that your data types properly Implement equals and and hashing and that sort of thing",
    "start": "7830520",
    "end": "7837719"
  },
  {
    "text": "um",
    "start": "7837719",
    "end": "7840719"
  },
  {
    "text": "yeah",
    "start": "7850239",
    "end": "7853239"
  },
  {
    "text": "sure so imagine um so here's an example I I'll I'll I I think I understand what",
    "start": "7857239",
    "end": "7862360"
  },
  {
    "text": "you're asking you can if after I answer if I didn't answer your question just let me know um in this example we have a",
    "start": "7862360",
    "end": "7868079"
  },
  {
    "text": "specific cache that we're constructing for the get too by ID like request itself right H so for this effect.",
    "start": "7868079",
    "end": "7876440"
  },
  {
    "text": "request literally just that request it's going to use that cache and it's going to turn request caching on for any other",
    "start": "7876440",
    "end": "7882960"
  },
  {
    "text": "requests that we execute in our effect app because caching is disabled by default caching won't be on higher up in",
    "start": "7882960",
    "end": "7889119"
  },
  {
    "text": "your effect application if you have another request cache that would be used for all the other requests but then",
    "start": "7889119",
    "end": "7894960"
  },
  {
    "text": "because regionally we even said okay in this specific region of our program we",
    "start": "7894960",
    "end": "7900000"
  },
  {
    "text": "want this cach to be used we can override the cach with one that we've like custom specified so you can have as",
    "start": "7900000",
    "end": "7906800"
  },
  {
    "text": "many caches as you want floating around in the program um as long as you've like like basically said like I want to use",
    "start": "7906800",
    "end": "7913520"
  },
  {
    "text": "this cache here with the with request caching combinator does that make sense um and when I say region it might",
    "start": "7913520",
    "end": "7920880"
  },
  {
    "text": "it's maybe it's like a collo an esoteric term uh by region I mean like a piece of",
    "start": "7920880",
    "end": "7926559"
  },
  {
    "text": "effect code like either a pipeline or a gen or whatever you're using that particular region of your effect program",
    "start": "7926559",
    "end": "7932599"
  },
  {
    "text": "would be affected by those",
    "start": "7932599",
    "end": "7935559"
  },
  {
    "text": "combinators yeah literally you could pass it right before you run fork or run promise or whatever like you could you",
    "start": "7938079",
    "end": "7944040"
  },
  {
    "text": "could say turn request cashing on I don't care use the default cash I want everything to be cashed but",
    "start": "7944040",
    "end": "7949480"
  },
  {
    "text": "yes there is no way to",
    "start": "7949480",
    "end": "7954079"
  },
  {
    "text": "control so to say like name Cas this this region uses name g a US",
    "start": "7956320",
    "end": "7967079"
  },
  {
    "text": "name I see so you're saying that at the top",
    "start": "7970119",
    "end": "7976880"
  },
  {
    "text": "level of your application you would provide multiple cashes and then your requests would pick you could you could create a",
    "start": "7976880",
    "end": "7983559"
  },
  {
    "text": "service in your effect app that contains multiple request caches Associated to like the request IDs maybe and then",
    "start": "7983559",
    "end": "7990239"
  },
  {
    "text": "you'd still have to associate the cache manually with each request wherever you're using them but you you can't like",
    "start": "7990239",
    "end": "7996079"
  },
  {
    "text": "say for this request use this cache at the top of your program necessarily I don't think right",
    "start": "7996079",
    "end": "8001760"
  },
  {
    "text": "yeah I that i' use context",
    "start": "8001760",
    "end": "8005920"
  },
  {
    "text": "so",
    "start": "8011520",
    "end": "8014520"
  },
  {
    "text": "right proba",
    "start": "8021800",
    "end": "8025280"
  },
  {
    "text": "layers yeah",
    "start": "8029159",
    "end": "8033040"
  },
  {
    "text": "um but yeah it's it's very useful because all of these things can be done regionally so you have really granular",
    "start": "8039920",
    "end": "8046599"
  },
  {
    "text": "control over like requests that you're executing um and I think that uh",
    "start": "8046599",
    "end": "8052760"
  },
  {
    "text": "requests request resolvers batching caching can all come together to allow",
    "start": "8052760",
    "end": "8058320"
  },
  {
    "text": "you to build really nice like uh if you use like the repos itory pattern for example in your app where you have like kind of like we did here where we had",
    "start": "8058320",
    "end": "8064599"
  },
  {
    "text": "like a Pokemon repo you can Implement services that abstract over like the",
    "start": "8064599",
    "end": "8070159"
  },
  {
    "text": "caches that you're using whether you're batching enabled or whether you don't um and you can just expose like the interface that you want but behind the",
    "start": "8070159",
    "end": "8076639"
  },
  {
    "text": "scenes when you're actually running those methods you're batching these and you're caching these and you have you know uh very granular control over like",
    "start": "8076639",
    "end": "8084079"
  },
  {
    "text": "where you can turn these things on and off so it's pretty cool and um used very",
    "start": "8084079",
    "end": "8090119"
  },
  {
    "text": "heavily uh for example I think Tim you use some of these features in effect SQL",
    "start": "8090119",
    "end": "8095760"
  },
  {
    "text": "or xql SQL FX soon to be effect SQL um okay sorry there's a",
    "start": "8095760",
    "end": "8104360"
  },
  {
    "text": "question assessing Bing so is",
    "start": "8104960",
    "end": "8111520"
  },
  {
    "text": "it so one advantage is the but why not just collect",
    "start": "8111520",
    "end": "8119960"
  },
  {
    "text": "an so",
    "start": "8119960",
    "end": "8127679"
  },
  {
    "text": "so so let if to take a step back the first question like when you would use",
    "start": "8127679",
    "end": "8132800"
  },
  {
    "text": "batching the only decision point there is if your API supports it you can use it if it doesn't you can't that's like",
    "start": "8132800",
    "end": "8139040"
  },
  {
    "text": "the first decision right is like do I have an API that even lets me batch if I have multiple requests coming in for",
    "start": "8139040",
    "end": "8145119"
  },
  {
    "text": "something um and then the like the advantage of batching is",
    "start": "8145119",
    "end": "8151639"
  },
  {
    "text": "um sometimes you're not executing these requests in the same place all the time right sometimes in your effect app",
    "start": "8151639",
    "end": "8157400"
  },
  {
    "text": "you're running these requests all over the place batching allows you regardless of where you're running these requests",
    "start": "8157400",
    "end": "8163360"
  },
  {
    "text": "as long as you've enabled batching for the region that you're running them in effect will batch all those requests together and then allow you to submit",
    "start": "8163360",
    "end": "8169719"
  },
  {
    "text": "one API request instead of n API requests um so yes you could manually",
    "start": "8169719",
    "end": "8176719"
  },
  {
    "text": "aggregate the requests if you want one sec you could manually aggregate them if you want want but with batching on you",
    "start": "8176719",
    "end": "8183639"
  },
  {
    "text": "don't have to worry about it um and all that that in",
    "start": "8183639",
    "end": "8187880"
  },
  {
    "text": "there as long as you've enabled batching on the FI on the parent fiber that forked those children yes because",
    "start": "8193080",
    "end": "8201719"
  },
  {
    "text": "remember batching is controlled by a fiber ref uh which again we didn't really talk about today but it's a data",
    "start": "8201719",
    "end": "8208120"
  },
  {
    "text": "type that allows you to propagate information across fiber boundaries like very spe in very specific ways so",
    "start": "8208120",
    "end": "8214800"
  },
  {
    "text": "as long as you've specified in either directly in the fibers that you're running that you want that fiber batched",
    "start": "8214800",
    "end": "8220840"
  },
  {
    "text": "or in the parent fiber that forked all the fibers that are running requests that you want batching on yes effect",
    "start": "8220840",
    "end": "8226120"
  },
  {
    "text": "will handle batching them for you so like if you have 10 fibers all running the same request that youve forked from",
    "start": "8226120",
    "end": "8232160"
  },
  {
    "text": "some parent where you've enabled batching all 10 of those fibers will have their requests",
    "start": "8232160",
    "end": "8238080"
  },
  {
    "text": "batched Bing if you can um I think it's very API specific I",
    "start": "8239840",
    "end": "8248960"
  },
  {
    "text": "would because if I I want to avoid like most of the time you want to avoid sending multiple requests to an API if",
    "start": "8248960",
    "end": "8255840"
  },
  {
    "text": "you if you can but it's it's like very application specific I think like I think you had a comment down there go",
    "start": "8255840",
    "end": "8263558"
  },
  {
    "text": "ahead I think I think I understand what you're to and the reason that you want to do",
    "start": "8263559",
    "end": "8270478"
  },
  {
    "text": "this get theing you get other things that Bing",
    "start": "8270479",
    "end": "8276080"
  },
  {
    "text": "that includes the caching duplication then you can say yeah I can do all that local sure but what",
    "start": "8276080",
    "end": "8283399"
  },
  {
    "text": "you example be if let's",
    "start": "8283400",
    "end": "8288558"
  },
  {
    "text": "say you ask for 10 Trainers and their Pokemon suddenly we have different",
    "start": "8288559",
    "end": "8294518"
  },
  {
    "text": "Scopes that all request let's say the six Pokemon of be trainer yeah you can batch those locally but you can't match",
    "start": "8294519",
    "end": "8301160"
  },
  {
    "text": "all the six ones per each one it's a good",
    "start": "8301160",
    "end": "8306200"
  },
  {
    "text": "point either currency or not this specific case you can still",
    "start": "8306200",
    "end": "8312760"
  },
  {
    "text": "match all of them together and still if some of them are duplicated two of them have the same Pokemon that one will be D",
    "start": "8312760",
    "end": "8320840"
  },
  {
    "text": "so like the maximum amount of Pokemon G request is n with being like 10 * 6 but",
    "start": "8320840",
    "end": "8327800"
  },
  {
    "text": "that's not the minimal or even",
    "start": "8327800",
    "end": "8332719"
  },
  {
    "text": "so cing mean that if you then later ask for",
    "start": "8334320",
    "end": "8339760"
  },
  {
    "text": "f more trainers if they ask for Pokemon youve already got those are also going",
    "start": "8339760",
    "end": "8344880"
  },
  {
    "text": "to be emitted from all the batching next round of re yeah exactly",
    "start": "8344880",
    "end": "8351478"
  },
  {
    "text": "and there's actually a really good example that Mike wrote in the docs when we first because this whole batching",
    "start": "8351479",
    "end": "8356960"
  },
  {
    "text": "caching request resolver business used to be a sep separate library in effect called effect query um which we stole",
    "start": "8356960",
    "end": "8364120"
  },
  {
    "text": "from not stole ported from zo um but then we found that the pattern was so",
    "start": "8364120",
    "end": "8369960"
  },
  {
    "text": "common in effect apps to be doing this type of thing that like in our own applications we were almost always",
    "start": "8369960",
    "end": "8375200"
  },
  {
    "text": "including effect query as a dependency and we said well maybe we could integrate it directly with the fiber runtime so it's this is actually a",
    "start": "8375200",
    "end": "8382120"
  },
  {
    "text": "feature we have in effect that zo doesn't have in their Library they have to like install a separate library but",
    "start": "8382120",
    "end": "8387960"
  },
  {
    "text": "the reason I'm bringing this up is because after my get uh got figured out how to get this into the",
    "start": "8387960",
    "end": "8393160"
  },
  {
    "text": "fiber runtime he wrote a really good set of docs which I linked in the um Workshop Channel where he actually talks",
    "start": "8393160",
    "end": "8399800"
  },
  {
    "text": "specifically about solving the N plus1 problem that uh dner was referring to here um with batching and caching and",
    "start": "8399800",
    "end": "8406280"
  },
  {
    "text": "everything like that um and he also goes into a little bit about how this is even possible in like the runtime itself",
    "start": "8406280",
    "end": "8414600"
  },
  {
    "text": "um so correctly F some kind of",
    "start": "8414600",
    "end": "8421359"
  },
  {
    "text": "then gets the Pokemon from API other other fiber gets the Pokemon right away",
    "start": "8421359",
    "end": "8429319"
  },
  {
    "text": "then in thise",
    "start": "8429319",
    "end": "8436120"
  },
  {
    "text": "so one I'm doing the request right away in fiber two I'm doing some extensive computation that takes some time will",
    "start": "8436120",
    "end": "8443560"
  },
  {
    "text": "like this request wait for the comp G it or how does the if I'm like",
    "start": "8443560",
    "end": "8450280"
  },
  {
    "text": "the caching Aggregates M yeah that have caching enabled how does",
    "start": "8450280",
    "end": "8457280"
  },
  {
    "text": "it know when to actually make the requests that's I do I do um",
    "start": "8457280",
    "end": "8465000"
  },
  {
    "text": "so locking got you",
    "start": "8468720",
    "end": "8473521"
  },
  {
    "text": "got SPS 10 child fers and they all",
    "start": "8474319",
    "end": "8482561"
  },
  {
    "text": "that's not really explicit so so if I'm understanding you",
    "start": "8482800",
    "end": "8489280"
  },
  {
    "text": "correctly the question is you have some intensive work that's going on that eventually then results in firing off a",
    "start": "8489280",
    "end": "8496040"
  },
  {
    "text": "request and in another fiber you also are submitting similar requests it all at the same",
    "start": "8496040",
    "end": "8504880"
  },
  {
    "text": "time competition between like it's it's not if I have fers I don't like might",
    "start": "8504880",
    "end": "8511120"
  },
  {
    "text": "not be the first thing that the fibers are doing send the request might be some so does the other if I send the request",
    "start": "8511120",
    "end": "8518479"
  },
  {
    "text": "if one fiber sends right away sends it like after",
    "start": "8518479",
    "end": "8525600"
  },
  {
    "text": "depal then you can Define time window chronological dimension in which things",
    "start": "8526960",
    "end": "8533439"
  },
  {
    "text": "Happ but if you're using just the pling CR over as is it it just looks around",
    "start": "8533439",
    "end": "8539240"
  },
  {
    "text": "for how many many things at the same time and mean that situation you're describing it's out of that window",
    "start": "8539240",
    "end": "8545760"
  },
  {
    "text": "because it's doing something while the rest of the resolver already finished okay let's send a request and then",
    "start": "8545760",
    "end": "8552880"
  },
  {
    "text": "you're asking does it cat the answer is yes if once it arrives the request are",
    "start": "8552880",
    "end": "8558359"
  },
  {
    "text": "no longer in transit and result then it's going to be cat so I think that the short answer to",
    "start": "8558359",
    "end": "8565680"
  },
  {
    "text": "your question is uh yes you could end up in a situation where",
    "start": "8565680",
    "end": "8570960"
  },
  {
    "text": "um you're blocking for a while if you're not necessarily",
    "start": "8570960",
    "end": "8577319"
  },
  {
    "text": "uh I I'm I'm not sure I'm like 100% like understanding your question so maybe we",
    "start": "8577319",
    "end": "8582760"
  },
  {
    "text": "can talk like after the fact and then I can update you folks I think that dater's point about using a data loader",
    "start": "8582760",
    "end": "8588880"
  },
  {
    "text": "in a situation where you might have like requests that you want to like control batching over a Time window as well is",
    "start": "8588880",
    "end": "8594760"
  },
  {
    "text": "like very helpful um but let's chat after the fact and then I'll update you folks with the answer to the question",
    "start": "8594760",
    "end": "8600640"
  },
  {
    "text": "I'm not sure I'm understanding I'm also not sure I know the answer to the question that you're asking um",
    "start": "8600640",
    "end": "8607319"
  },
  {
    "text": "okay so go back to our presentation all right",
    "start": "8607319",
    "end": "8613359"
  },
  {
    "text": "so we talked about request caching we only have one more minute so we're not going to do this coding",
    "start": "8613359",
    "end": "8618520"
  },
  {
    "text": "exercise the last thing I want to mention in the like 60 seconds I have left I think is yeah um we also have a module",
    "start": "8618520",
    "end": "8627439"
  },
  {
    "text": "in effect called cache which is separate from request cache the implementation is",
    "start": "8627439",
    "end": "8632720"
  },
  {
    "text": "totally different and the reasons that you would use it as different request cache is very specifically associated",
    "start": "8632720",
    "end": "8638920"
  },
  {
    "text": "with like request itself um and the parameters that you pass in you don't actually have the ability to do this",
    "start": "8638920",
    "end": "8644960"
  },
  {
    "text": "like lookup parameter um but the cache module in effect is designed to help you",
    "start": "8644960",
    "end": "8650640"
  },
  {
    "text": "cach expensive computations that you're doing in your effect app so similar to",
    "start": "8650640",
    "end": "8655760"
  },
  {
    "text": "the request cache you you can define a capacity and a time to live but the really cool thing about effect the cache",
    "start": "8655760",
    "end": "8661760"
  },
  {
    "text": "module in effect is that the lookup takes some key again as long as it",
    "start": "8661760",
    "end": "8667680"
  },
  {
    "text": "implements equals so if you've used like the data module or if it's a primitive data type um as long as that key can be",
    "start": "8667680",
    "end": "8674359"
  },
  {
    "text": "hashed uh with either like implements equals um it can be used as a key for",
    "start": "8674359",
    "end": "8679880"
  },
  {
    "text": "this lookup function um and then the resulting effect will be",
    "start": "8679880",
    "end": "8685880"
  },
  {
    "text": "computed stored in the cache and then every other time you run a cache dog to",
    "start": "8685880",
    "end": "8691000"
  },
  {
    "text": "get the same thing you'll immediately get the result that was cashed before uh until that the item in the cash like U",
    "start": "8691000",
    "end": "8698720"
  },
  {
    "text": "till we've exceeded our cash capacity or we've exceeded the time to live and that like item in the cash has expired so",
    "start": "8698720",
    "end": "8706080"
  },
  {
    "text": "it's a very it's a potentially like very useful thing to use in your applications if you're doing a lot of intensive work",
    "start": "8706080",
    "end": "8712200"
  },
  {
    "text": "that you want to cash we're also considering for the future doesn't exist",
    "start": "8712200",
    "end": "8717560"
  },
  {
    "text": "yet but for the future implementing uh something called called like a cache backend where we can like uh basically",
    "start": "8717560",
    "end": "8724720"
  },
  {
    "text": "persist uh data automatically to things like redis or mcash or something like that using like the cache module here",
    "start": "8724720",
    "end": "8732840"
  },
  {
    "text": "doesn't exist yet but it's like kind of like a potential thing that we've been thinking about um but in your effect app",
    "start": "8732840",
    "end": "8738279"
  },
  {
    "text": "itself if you have things that you want to cache and want to avoid running the same computation over and over again you",
    "start": "8738279",
    "end": "8743520"
  },
  {
    "text": "can use cache. make to create a cache and that lookup function takes a key which returns an effect and every time",
    "start": "8743520",
    "end": "8749920"
  },
  {
    "text": "you pass pass the same key in it will either compute the value if it needs to if it's not in the cach or it'll",
    "start": "8749920",
    "end": "8756359"
  },
  {
    "text": "immediately return the value from the cach um if it was previously computed um",
    "start": "8756359",
    "end": "8762000"
  },
  {
    "text": "with that I think we are at time",
    "start": "8762000",
    "end": "8766240"
  },
  {
    "text": "yeah not yet that's the cash back ends will is something we've been thinking",
    "start": "8769520",
    "end": "8775640"
  },
  {
    "text": "about to enable things like persistence um this is",
    "start": "8775640",
    "end": "8781319"
  },
  {
    "text": "not uh we can't you can't really persist the cash at the moment um but it is something we've been thinking about",
    "start": "8781319",
    "end": "8786760"
  },
  {
    "text": "because it could be potentially like a really useful thing to have um so yeah I",
    "start": "8786760",
    "end": "8792000"
  },
  {
    "text": "know I don't want to run late again uh so I'll let you guys go for our 15minute break um and then I will see you folks",
    "start": "8792000",
    "end": "8798080"
  },
  {
    "text": "back here for uh our last session of the [Applause]",
    "start": "8798080",
    "end": "8804960"
  },
  {
    "text": "day okay um in this session we're going to focus on observability and mon",
    "start": "8804960",
    "end": "8810479"
  },
  {
    "start": "8805000",
    "end": "10536000"
  },
  {
    "text": "monitoring and I actually want to touch on the topics we're going to cover before we go into the",
    "start": "8810479",
    "end": "8816319"
  },
  {
    "text": "exercises um because I don't want to spend too much time working on the exercises without actually getting to",
    "start": "8816319",
    "end": "8822680"
  },
  {
    "text": "talk about all of the specific topics that we're going to cover so the presentation will be pretty quick um and",
    "start": "8822680",
    "end": "8827960"
  },
  {
    "text": "then we can actually start doing some coding um the first thing I want to talk about in effect is the logger interface",
    "start": "8827960",
    "end": "8835800"
  },
  {
    "text": "so effect comes with a default logger when you use effect the effect. log methods um it will by default use the",
    "start": "8835800",
    "end": "8842800"
  },
  {
    "text": "default logger that we set up which you've seen in some of the previous sessions uh includes things like the log",
    "start": "8842800",
    "end": "8850240"
  },
  {
    "text": "level the fiber ID the message that you're logging Etc um but the effect can",
    "start": "8850240",
    "end": "8857640"
  },
  {
    "text": "actually hold um onto multiple loggers for your program so behind the like",
    "start": "8857640",
    "end": "8865200"
  },
  {
    "text": "logger in effect itself is actually a hash set of different loggers by default",
    "start": "8865200",
    "end": "8870880"
  },
  {
    "text": "there's only one uh logger in that hashset but you can add more you can also remove the default logger so you",
    "start": "8870880",
    "end": "8876000"
  },
  {
    "text": "can really control um how things are logged in your effect application if you really want to get granular about",
    "start": "8876000",
    "end": "8883080"
  },
  {
    "text": "it um and there's a bunch of uh combinators that allow you to do that like addition of loggers and things like",
    "start": "8883080",
    "end": "8889439"
  },
  {
    "text": "that into the effect application itself um the logger interface allows you",
    "start": "8889439",
    "end": "8894960"
  },
  {
    "text": "accepts um messages of type message and produces some output um so you can",
    "start": "8894960",
    "end": "8902000"
  },
  {
    "text": "basically adjust this to your needs if you're implementing a custom logger um",
    "start": "8902000",
    "end": "8907240"
  },
  {
    "text": "the interface itself is kind of cool because we get access to a lot of information that we can use to do our",
    "start": "8907240",
    "end": "8913439"
  },
  {
    "text": "logging um we get access to the fiber ID that's actually performing that log operation we get access to the log level",
    "start": "8913439",
    "end": "8920840"
  },
  {
    "text": "so whether it was info or trace or warning whatever we get access to the message",
    "start": "8920840",
    "end": "8926479"
  },
  {
    "text": "which is controlled by the generic um we get access to the cause if there is one um if like the uh if the",
    "start": "8926479",
    "end": "8934479"
  },
  {
    "text": "fiber had failed or something like that we get access to the cause the full cause um we also have access we call it",
    "start": "8934479",
    "end": "8941800"
  },
  {
    "text": "context here probably a better name would be fiber refs but um we've talked a little bit about fiber ref as a data",
    "start": "8941800",
    "end": "8948680"
  },
  {
    "text": "type um today we haven't really gone too deep into it because it was a little bit outside the scope of today's",
    "start": "8948680",
    "end": "8955399"
  },
  {
    "text": "Workshop but the fiber refs data type is for like Simplicity you can think of it",
    "start": "8955399",
    "end": "8962399"
  },
  {
    "text": "as a bag that holds on to all of the current fiber refs in our program um and",
    "start": "8962399",
    "end": "8967640"
  },
  {
    "text": "we have access to these fiber reps so we can extract things like um the current",
    "start": "8967640",
    "end": "8974800"
  },
  {
    "text": "log spans from the fiber ref in the fiber refs data type or we could extract",
    "start": "8974800",
    "end": "8980359"
  },
  {
    "text": "uh other information from pre-existing fiber refs like um really whatever we want that's stored in a fiber ref um we",
    "start": "8980359",
    "end": "8986840"
  },
  {
    "text": "can gain access to in our logging we ALS also get a list of the log spans that were passed to this call",
    "start": "8986840",
    "end": "8994600"
  },
  {
    "text": "this log call um we also get the annotations that were passed that log and we get a this is should probably be",
    "start": "8994600",
    "end": "9000600"
  },
  {
    "text": "called time stamp but we get a date passed in um that we can use to format the date however we",
    "start": "9000600",
    "end": "9007080"
  },
  {
    "text": "want um we are going to have some exercises in a little bit where we'll Implement some custom",
    "start": "9007080",
    "end": "9013439"
  },
  {
    "text": "loggers the first one will be implementing a batched logger which was a question we got on Discord a while",
    "start": "9013439",
    "end": "9019399"
  },
  {
    "text": "back uh basically collecting all logs within some interval uh and then",
    "start": "9019399",
    "end": "9024600"
  },
  {
    "text": "outputting them all at once um just an interesting use case for a logger and",
    "start": "9024600",
    "end": "9030800"
  },
  {
    "text": "then we'll do another one if we have time where we're going to do use a logger to actually um update a metric",
    "start": "9030800",
    "end": "9038760"
  },
  {
    "text": "that can basically uh indicates how many times we've actually called different effect. log combinators but we'll come",
    "start": "9038760",
    "end": "9045680"
  },
  {
    "text": "back to this in a moment um I wanted to briefly touch on on the metrics that we have available to",
    "start": "9045680",
    "end": "9052160"
  },
  {
    "text": "us in effect um we have access to five different",
    "start": "9052160",
    "end": "9058359"
  },
  {
    "text": "metric types in effect um and Metric represents a data type it's a concurrent",
    "start": "9058359",
    "end": "9063399"
  },
  {
    "text": "metric which accepts um some input and Aggregates that input to some stateful",
    "start": "9063399",
    "end": "9070080"
  },
  {
    "text": "value of type out the type parameter here controls the metric type itself and",
    "start": "9070080",
    "end": "9075800"
  },
  {
    "text": "what I mean by that is we have five different types so the type would be either a counter a gauge a histogram a",
    "start": "9075800",
    "end": "9081600"
  },
  {
    "text": "summary or a frequency um and these metric apis that",
    "start": "9081600",
    "end": "9086960"
  },
  {
    "text": "we the metric apis that we have in effect are extremely powerful they allow us to track pretty much every aspect of",
    "start": "9086960",
    "end": "9092800"
  },
  {
    "text": "our effect program execution if we want to we can track uh things like successes in our effect program we can track",
    "start": "9092800",
    "end": "9099000"
  },
  {
    "text": "failures we can ATT track uh how long things take to execute um and we can",
    "start": "9099000",
    "end": "9104880"
  },
  {
    "text": "roll that all up into different um metric exporters um that we",
    "start": "9104880",
    "end": "9111399"
  },
  {
    "text": "are always working on implementing um I'm not going to talk about the",
    "start": "9111399",
    "end": "9117640"
  },
  {
    "text": "individual metrics just yet I want to at least cover all of the pieces of observability that effect provides",
    "start": "9117640",
    "end": "9123279"
  },
  {
    "text": "before we start like the exercises and whatnot um so besides logging and metrics we also have built-in support",
    "start": "9123279",
    "end": "9130359"
  },
  {
    "text": "for instrumenting your application with traces um it's extremely easy in effect",
    "start": "9130359",
    "end": "9136560"
  },
  {
    "text": "to trace a particular region um or add information to the spans that you're",
    "start": "9136560",
    "end": "9143359"
  },
  {
    "text": "exporting so in this example um I'm logging some information",
    "start": "9143359",
    "end": "9148960"
  },
  {
    "text": "um I'm implementing some delay uh then I'm annotating whatever the current Span",
    "start": "9148960",
    "end": "9154279"
  },
  {
    "text": "in that region is I'm annotating with some additional information here I'm just using key value but the point being",
    "start": "9154279",
    "end": "9160560"
  },
  {
    "text": "is like you can gain access to the current span and annotate it with different pieces of information and then uh the effect.",
    "start": "9160560",
    "end": "9167560"
  },
  {
    "text": "withth span combinator wraps a full effect and allows you to annotate it",
    "start": "9167560",
    "end": "9173200"
  },
  {
    "text": "with a span you can also pass additional um arguments to with span like",
    "start": "9173200",
    "end": "9178520"
  },
  {
    "text": "attributes that you want to U annotate directly on the span um but all of these",
    "start": "9178520",
    "end": "9184479"
  },
  {
    "text": "things come together uh very nicely when you start exporting these traces into observability tools",
    "start": "9184479",
    "end": "9192000"
  },
  {
    "text": "so I do want to point out also that logs uh inside a span will show up as",
    "start": "9192000",
    "end": "9199080"
  },
  {
    "text": "events in your traces um and what I mean by that I know this is extremely small it's not designed to be red um but the",
    "start": "9199080",
    "end": "9207000"
  },
  {
    "text": "point here is when you execute an effect program that has tracing enabled and you export those traces to some",
    "start": "9207000",
    "end": "9212359"
  },
  {
    "text": "visualization tool you can get a really nice waterfall diagram of all of the spans in your effect application how",
    "start": "9212359",
    "end": "9217920"
  },
  {
    "text": "long they took to execute uh the information that you've annotated them with and if we look this is very small",
    "start": "9217920",
    "end": "9225439"
  },
  {
    "text": "if we look at some of the information that we have access to um at the top here the these are the span attributes",
    "start": "9225439",
    "end": "9231120"
  },
  {
    "text": "that we've attached um these are resource attributes that were attached globally to the resource um itself and",
    "start": "9231120",
    "end": "9237720"
  },
  {
    "text": "then you can see at the bottom well it's very small but at the bottom here um these are events that occurred within",
    "start": "9237720",
    "end": "9244600"
  },
  {
    "text": "that span and so any logs that occur within that span would be exported as events into the trace as well um so you",
    "start": "9244600",
    "end": "9253160"
  },
  {
    "text": "get a ton there's a ton of built-in observability tools that you can use to instrument your effect application",
    "start": "9253160",
    "end": "9260359"
  },
  {
    "text": "um between logging between logging metrics and the tracing",
    "start": "9260359",
    "end": "9266120"
  },
  {
    "text": "apis um you can pretty much get full observability into your effect",
    "start": "9266120",
    "end": "9271439"
  },
  {
    "text": "programs um let me just see if there was anything",
    "start": "9271439",
    "end": "9277240"
  },
  {
    "text": "else so with that I know we went over these things a little bit quickly um",
    "start": "9277560",
    "end": "9286160"
  },
  {
    "text": "but um maybe let's start with a coding exercise where we work with a custom",
    "start": "9286160",
    "end": "9291200"
  },
  {
    "text": "logger so um in session",
    "start": "9291200",
    "end": "9296680"
  },
  {
    "text": "4 under your exercises um exercise zero has you folks",
    "start": "9296680",
    "end": "9304920"
  },
  {
    "text": "creating a custom logger um which batches logs and emits them as a as a",
    "start": "9304920",
    "end": "9310479"
  },
  {
    "text": "collection of logs over some fixed window so we basically get a window as our argument I don't know why I made",
    "start": "9310479",
    "end": "9316680"
  },
  {
    "text": "this an object um and the uh goal here",
    "start": "9316680",
    "end": "9322200"
  },
  {
    "text": "would be to basically aggregate these logs over some like window and emit them",
    "start": "9322200",
    "end": "9329200"
  },
  {
    "text": "so your job here is to try to try to implement the aggregation",
    "start": "9329200",
    "end": "9335319"
  },
  {
    "text": "functionality um for this logger um and you guys can go ahead and",
    "start": "9335319",
    "end": "9341880"
  },
  {
    "text": "remove this piece of code the other thing I want to point out to you before we get started is I'm using a um effect",
    "start": "9341880",
    "end": "9349680"
  },
  {
    "text": "combinator called locally scoped with here um there are several combinators in",
    "start": "9349680",
    "end": "9355880"
  },
  {
    "text": "the effect core library in the effect data type that allow you to manipulate fiber refs directly the fiber ref in",
    "start": "9355880",
    "end": "9363200"
  },
  {
    "text": "effect that stores the current set of loggers in your program is on the fiber data type called current",
    "start": "9363200",
    "end": "9369920"
  },
  {
    "text": "loggers and you can basically uh control",
    "start": "9369920",
    "end": "9375800"
  },
  {
    "text": "um what is currently added to these loggers within a particular scope so",
    "start": "9375800",
    "end": "9381680"
  },
  {
    "text": "inside this uh this call to effect. locally scoped with what I'm basically",
    "start": "9381680",
    "end": "9387200"
  },
  {
    "text": "saying is that um we're going to create a we're going to create a scope we're",
    "start": "9387200",
    "end": "9394520"
  },
  {
    "text": "going to add the logger that we're implementing to our set of loggers within that scope and then when that scope is closed the logger automatically",
    "start": "9394520",
    "end": "9401080"
  },
  {
    "text": "gets removed from that fiber ref that hash set in that fiber ref if this makes sense um there are several other",
    "start": "9401080",
    "end": "9407720"
  },
  {
    "text": "combinators for working with fiber refs here but because we didn't cover them today um I implemented this part for you",
    "start": "9407720",
    "end": "9413319"
  },
  {
    "text": "folks I just wanted to at least point it out so you know what's happening here um in terms of like how we're actually",
    "start": "9413319",
    "end": "9418760"
  },
  {
    "text": "adding a logger to our program in this example um but the goal here would be",
    "start": "9418760",
    "end": "9423880"
  },
  {
    "text": "that we get batches of logs over some window so every two seconds we'd emit some like batch of logs in this",
    "start": "9423880",
    "end": "9431479"
  },
  {
    "text": "case um so why don't you folks get started and um I'll circle around and",
    "start": "9431479",
    "end": "9437560"
  },
  {
    "text": "help because I know this one might be a I know this one might be a little",
    "start": "9437560",
    "end": "9442520"
  },
  {
    "text": "challenging um so just in the interest of time um we'll go over the solution",
    "start": "9444040",
    "end": "9451359"
  },
  {
    "text": "really I think there was a lot of really yeah darn it thank you Tim thank you for letting",
    "start": "9451359",
    "end": "9458279"
  },
  {
    "text": "us know um I think there was a lot of really good discussion that came out of",
    "start": "9458279",
    "end": "9463680"
  },
  {
    "text": "this exercise so I'm really glad I saw a lot of people reaching for um an effect runtime um using cues to like kind of",
    "start": "9463680",
    "end": "9471200"
  },
  {
    "text": "create the buffer I think that's like completely valid um as well in terms of",
    "start": "9471200",
    "end": "9476359"
  },
  {
    "text": "implementations um I went with a much simpler implementation here uh where because effect. gen is internally",
    "start": "9476359",
    "end": "9483399"
  },
  {
    "text": "wrapped with suspend we can allocate mutable State safely um inside",
    "start": "9483399",
    "end": "9488840"
  },
  {
    "text": "gen um so I just created a log buffer array um I created a reset buffer effect",
    "start": "9488840",
    "end": "9495359"
  },
  {
    "text": "that just resets the buffer um and then um I created an output buffer effect",
    "start": "9495359",
    "end": "9502040"
  },
  {
    "text": "that console.log joins the buffer together and then resets it um I think some of",
    "start": "9502040",
    "end": "9508880"
  },
  {
    "text": "the interesting pieces to highlight here so specifically with the logger um I chose to grab the string",
    "start": "9508880",
    "end": "9516880"
  },
  {
    "text": "logger that's exported exported from the logger module um which I believe is the",
    "start": "9516880",
    "end": "9523720"
  },
  {
    "text": "one that we have that formats logs nicely we can actually test it TSX",
    "start": "9523720",
    "end": "9531439"
  },
  {
    "text": "four so string logger in this case is the one that we have by default that formats things nicely as a string so I",
    "start": "9538040",
    "end": "9545520"
  },
  {
    "text": "grabbed that logger and mapped it mapped the message um and pushed it basically",
    "start": "9545520",
    "end": "9550960"
  },
  {
    "text": "into my log buffer and then in terms of implementing the uh scheduling the the",
    "start": "9550960",
    "end": "9556640"
  },
  {
    "text": "window um I think a lot of people end up end up arriving in a Sim like to a similar solution as this so I think",
    "start": "9556640",
    "end": "9563200"
  },
  {
    "text": "that's great I created a schedule this was the way I chose to do it um I created a fixed schedule with our window",
    "start": "9563200",
    "end": "9570720"
  },
  {
    "text": "and composed it with a schedule that repeats forever um so we end up with a schedule that uh operates on our window",
    "start": "9570720",
    "end": "9577279"
  },
  {
    "text": "and just keeps going you could also have used effect op forever I think that's valid",
    "start": "9577279",
    "end": "9583520"
  },
  {
    "text": "um but basically here uh I use our output buffer to out put the buffer um",
    "start": "9583520",
    "end": "9591720"
  },
  {
    "text": "running on a particular schedule um I en use I used a combinator and effect",
    "start": "9591720",
    "end": "9597160"
  },
  {
    "text": "called insuring um which if you like look do we have",
    "start": "9597160",
    "end": "9602359"
  },
  {
    "text": "documentation um it's basically a way to make sure that the finalizer that you",
    "start": "9602359",
    "end": "9609000"
  },
  {
    "text": "pass inside uring is executed um if the if the effect that's running um if the",
    "start": "9609000",
    "end": "9616840"
  },
  {
    "text": "effect that's passed to it is successful fails or inter interrupted it's kind of like a finally",
    "start": "9616840",
    "end": "9621880"
  },
  {
    "text": "block um just making sure we clean up the output buffer and then two things I",
    "start": "9621880",
    "end": "9627160"
  },
  {
    "text": "want to highlight here I think I talked to some folks about this but um what we're essentially doing here is forking",
    "start": "9627160",
    "end": "9633640"
  },
  {
    "text": "a background fiber um the first thing I'll highlight about the background",
    "start": "9633640",
    "end": "9638800"
  },
  {
    "text": "fiber that we're forking is because we already create a scope here um with our locally scoped with I even if we didn't",
    "start": "9638800",
    "end": "9646399"
  },
  {
    "text": "create a scope um using Fork scoped in a in a background fiber like this is sometime especially if we're attaching",
    "start": "9646399",
    "end": "9652560"
  },
  {
    "text": "it uh if we're creating our background fiber inside a layer is often like good",
    "start": "9652560",
    "end": "9659080"
  },
  {
    "text": "practice just so that when you have you basically have control over when that fiber shuts down the scope that you pass",
    "start": "9659080",
    "end": "9665479"
  },
  {
    "text": "to the effect that's running this background fiber when that scope is closed that fiber will be shut down so",
    "start": "9665479",
    "end": "9671279"
  },
  {
    "text": "it's kind of like using fork and Fork scoped for this example um are somewhat",
    "start": "9671279",
    "end": "9677040"
  },
  {
    "text": "equivalent but Fork scoped often is what I tend towards especially",
    "start": "9677040",
    "end": "9682439"
  },
  {
    "text": "because it gives you the that granular control um and then the other piece that",
    "start": "9682439",
    "end": "9687760"
  },
  {
    "text": "I wanted to mention here is whenever you Fork a background fiber like this you",
    "start": "9687760",
    "end": "9693880"
  },
  {
    "text": "have to be really careful about where this effect actually gets executed because if this gets um if I didn't have",
    "start": "9693880",
    "end": "9701560"
  },
  {
    "text": "this interruptible piece here um if this effect got executed in an uninterruptible region for example like",
    "start": "9701560",
    "end": "9708680"
  },
  {
    "text": "in the Quire piece of an effect acquire release or in any other region that maybe we've marked as uninterruptible",
    "start": "9708680",
    "end": "9714760"
  },
  {
    "text": "for some reason um the fiber won't be able to be interrupted um because it inherits",
    "start": "9714760",
    "end": "9721880"
  },
  {
    "text": "interruptibility from the parent so in order to make sure that our fiber can shut down the child fiber can",
    "start": "9721880",
    "end": "9728600"
  },
  {
    "text": "shut down if it's interrupted we can explicitly Mark uh that region as interruptible um so that basically makes",
    "start": "9728600",
    "end": "9734840"
  },
  {
    "text": "sure that this region has interrupt interruptibility enabled um so the fiber",
    "start": "9734840",
    "end": "9740399"
  },
  {
    "text": "can be shut down properly um I think there were multiple valid ways that people did this by the way um like I",
    "start": "9740399",
    "end": "9746640"
  },
  {
    "text": "said I saw a lot of people reaching for like runtime pushing to the que uh pushing to AQ um trying to grab from",
    "start": "9746640",
    "end": "9754160"
  },
  {
    "text": "that que I think that's also like a pretty valid way to do this but anyways um hopefully a somewhat useful exercise",
    "start": "9754160",
    "end": "9761560"
  },
  {
    "text": "for just getting a feel for how we could create a custom logger um there is another exercise that",
    "start": "9761560",
    "end": "9769920"
  },
  {
    "text": "I have for creating a custom logger um but we're going to not do that right now",
    "start": "9769920",
    "end": "9775560"
  },
  {
    "text": "what I actually want to do is quickly demo",
    "start": "9775560",
    "end": "9781479"
  },
  {
    "text": "um the effect app that Tim and I built for this Workshop specifically um it's a",
    "start": "9781479",
    "end": "9787040"
  },
  {
    "text": "CLI application um so um and you guys all have access to",
    "start": "9787040",
    "end": "9793200"
  },
  {
    "text": "this as well um and if you want I can drop an API key for open AI into the",
    "start": "9793200",
    "end": "9799399"
  },
  {
    "text": "advanced Discord channel that you guys can use at least till the end of the workshop",
    "start": "9799399",
    "end": "9805279"
  },
  {
    "text": "um yes I'm trusting you all with incredible power no",
    "start": "9805279",
    "end": "9811760"
  },
  {
    "text": "um um this example app that we built is a CLI um which basically allows you to",
    "start": "9811760",
    "end": "9821080"
  },
  {
    "text": "train a model on markdown files and then execute prompts against the model that",
    "start": "9821080",
    "end": "9826319"
  },
  {
    "text": "you just trained um so if we export this API key and we also make sure that",
    "start": "9826319",
    "end": "9834720"
  },
  {
    "text": "I've started our compos St so uh the",
    "start": "9834720",
    "end": "9840040"
  },
  {
    "text": "other thing that this repository includes is a mock like tracing setup or",
    "start": "9840040",
    "end": "9845319"
  },
  {
    "text": "observability setup with Tempo Prometheus and grafana um so all of your traces metrics",
    "start": "9845319",
    "end": "9851760"
  },
  {
    "text": "everything like that that you run in this app um would be exported locally to the composed stack that we've set up",
    "start": "9851760",
    "end": "9861040"
  },
  {
    "text": "um okay and then if I remove the previous time I did this",
    "start": "9864560",
    "end": "9870800"
  },
  {
    "text": "basically uh this will uh this will probably not work on your local machines",
    "start": "9870800",
    "end": "9876920"
  },
  {
    "text": "as well it would probably best if you ran this in git pod because there are some native",
    "start": "9876920",
    "end": "9882040"
  },
  {
    "text": "dependencies that we use for an SQL light extension to store the uh",
    "start": "9882040",
    "end": "9887120"
  },
  {
    "text": "embeddings in a vector format and they don't play nice",
    "start": "9887120",
    "end": "9894200"
  },
  {
    "text": "with many systems so I ended up using NYX to ensure that we all had the same",
    "start": "9894200",
    "end": "9899240"
  },
  {
    "text": "version at least in or the same uh version of SQL BSS at least in git pod",
    "start": "9899240",
    "end": "9905760"
  },
  {
    "text": "so if you use git pod it should work um so let's see so if we run PM PM",
    "start": "9905760",
    "end": "9912040"
  },
  {
    "text": "TSX bin and we uh train it um there are two commands in this in this CLI okay",
    "start": "9912040",
    "end": "9920439"
  },
  {
    "text": "I'll make this",
    "start": "9920439",
    "end": "9922961"
  },
  {
    "text": "bigger um there are two commands in this",
    "start": "9932520",
    "end": "9936840"
  },
  {
    "text": "CLI we have uh train and we also have prompt um train allows you to pass in a",
    "start": "9938920",
    "end": "9947680"
  },
  {
    "text": "markdown file and path to a uh SQL light database that will be created for you um",
    "start": "9947680",
    "end": "9954760"
  },
  {
    "text": "and it will use openai to train a model uh or it'll to generate embeddings for",
    "start": "9954760",
    "end": "9960640"
  },
  {
    "text": "that markdown document the CLI application also does chunking of the document and a whole bunch of other",
    "start": "9960640",
    "end": "9966479"
  },
  {
    "text": "things um that we can look through if we have the time but um a lot of the things that we discussed today or didn't get",
    "start": "9966479",
    "end": "9973760"
  },
  {
    "text": "necessarily get a chance to discuss for example the rate limiter that we were going to implement the data loader",
    "start": "9973760",
    "end": "9980120"
  },
  {
    "text": "um and a bunch of other patterns are present in this CLI so you can kind of use it as a reference for maybe like an",
    "start": "9980120",
    "end": "9985760"
  },
  {
    "text": "advanced real world effect application Tim and I tried to put as many um of the patterns that we discussed today in here",
    "start": "9985760",
    "end": "9994000"
  },
  {
    "text": "um but if we train",
    "start": "9994000",
    "end": "9998200"
  },
  {
    "text": "this on I think there's a fixtures I included an effect",
    "start": "10001160",
    "end": "10007398"
  },
  {
    "text": "file so you'll see we get a bunch of um logs",
    "start": "10007840",
    "end": "10015560"
  },
  {
    "text": "basically saying that we're chunking up the document we're sending it to open a whatever um",
    "start": "10015560",
    "end": "10023520"
  },
  {
    "text": "and PS if we",
    "start": "10023520",
    "end": "10029881"
  },
  {
    "text": "visit our grafana um implementation we can uh using",
    "start": "10033880",
    "end": "10042279"
  },
  {
    "text": "Tempo say that again oh yeah I will zoom",
    "start": "10043160",
    "end": "10047880"
  },
  {
    "text": "in um so using Tempo no I can't",
    "start": "10048200",
    "end": "10054318"
  },
  {
    "text": "scroll fantastic uh using Tempo we can grab our service uh run a query to get",
    "start": "10055160",
    "end": "10062160"
  },
  {
    "text": "the most recent Trace ID that we exported so I had run this before which is why there's another Trace ID in here",
    "start": "10062160",
    "end": "10068439"
  },
  {
    "text": "um but if we if we take a look so the CLI has tracing setup as well uh so we",
    "start": "10068439",
    "end": "10074160"
  },
  {
    "text": "export a bunch of different information there's no metrics in there right now which if you guys want to play with that you're more than welcome to um but if we",
    "start": "10074160",
    "end": "10083240"
  },
  {
    "text": "take a look specifically at this",
    "start": "10083240",
    "end": "10086601"
  },
  {
    "text": "Trace is there a way I can make this full screen anybody know",
    "start": "10093800",
    "end": "10100720"
  },
  {
    "text": "wow that did not",
    "start": "10104760",
    "end": "10107398"
  },
  {
    "text": "work all right let me zoom out a tiny bit so I'll zoom out a tiny bit but you",
    "start": "10115680",
    "end": "10121760"
  },
  {
    "text": "can see hopefully somewhat the waterfall that was created for this particular invocation now obviously if you had like",
    "start": "10121760",
    "end": "10128960"
  },
  {
    "text": "a long running um effect app you'd be getting different uh you'd have a",
    "start": "10128960",
    "end": "10134640"
  },
  {
    "text": "separate different kind of waterfall here but this waterfall represents the invocation that we just ran for training",
    "start": "10134640",
    "end": "10141040"
  },
  {
    "text": "uh our open AI or getting our open AI embeddings by training it on that effect",
    "start": "10141040",
    "end": "10146800"
  },
  {
    "text": "document um and you can if we take a look you can see the hierarchy of spans",
    "start": "10146800",
    "end": "10151880"
  },
  {
    "text": "that we get so spans are Regional as well right so as we attach spans to our effects we get a hierarchy so we can",
    "start": "10151880",
    "end": "10159000"
  },
  {
    "text": "basically trace the execution of our effect program for example if we look at",
    "start": "10159000",
    "end": "10164640"
  },
  {
    "text": "we start with chunking the document um we attempt to upsert we grab the embeddings we batch them and then we set",
    "start": "10164640",
    "end": "10171439"
  },
  {
    "text": "the embeddings uh in this upsert method and somewhere in",
    "start": "10171439",
    "end": "10176640"
  },
  {
    "text": "here we can take a look and see like what attributes we had on that particular span so this basically gives",
    "start": "10176640",
    "end": "10182279"
  },
  {
    "text": "you pretty granular information about what actually just happened when you ran your uh",
    "start": "10182279",
    "end": "10187640"
  },
  {
    "text": "application um and like I mentioned before in",
    "start": "10187640",
    "end": "10192920"
  },
  {
    "text": "addition to span attributes which you can attach to spans either at the time you call with span or with uh using",
    "start": "10192920",
    "end": "10199000"
  },
  {
    "text": "different combinators um you your logs that you execute within a um traced",
    "start": "10199000",
    "end": "10205319"
  },
  {
    "text": "region get exported as events so you can see things like um the log message um",
    "start": "10205319",
    "end": "10213080"
  },
  {
    "text": "and any other pieces of information that you annotated those logs with right so not only do we have the ab to add um",
    "start": "10213080",
    "end": "10220439"
  },
  {
    "text": "attributes to our traces we also have the ability to annotate logs right and any of the log annotations that you have",
    "start": "10220439",
    "end": "10226880"
  },
  {
    "text": "um will also be propagated to this event um so pretty useful um and Anna was also",
    "start": "10226880",
    "end": "10233960"
  },
  {
    "text": "kind enough to uh create a dashboard for us as well which um utilizes the uh some of",
    "start": "10233960",
    "end": "10243160"
  },
  {
    "text": "the default metrics that we get from PR metheus uh about our execution um to to",
    "start": "10243160",
    "end": "10249279"
  },
  {
    "text": "get some information like you know the duration of all the spans we have um there's a P99 in here as well but um we",
    "start": "10249279",
    "end": "10256920"
  },
  {
    "text": "would need to run this a few more times uh to have that be somewhat accurate um but you kind of get the idea",
    "start": "10256920",
    "end": "10264080"
  },
  {
    "text": "here that um with logging tracing and we",
    "start": "10264080",
    "end": "10269680"
  },
  {
    "text": "didn't specifically annotate any metrics in this effect app but you get a lot of",
    "start": "10269680",
    "end": "10275439"
  },
  {
    "text": "power and introspect ability into your effect programs and this local setup should really work for your apps as well",
    "start": "10275439",
    "end": "10283359"
  },
  {
    "text": "um I can show you really",
    "start": "10283359",
    "end": "10290439"
  },
  {
    "text": "quick is it still readable if I go down one more",
    "start": "10304560",
    "end": "10309720"
  },
  {
    "text": "readable um so in our",
    "start": "10309720",
    "end": "10315880"
  },
  {
    "text": "CLI we have a whole bunch of things that we're importing from open Telemetry but we also have the effect open Telemetry",
    "start": "10315920",
    "end": "10324319"
  },
  {
    "text": "package which exports this uh which has a node SDK module and uh this is also documented in",
    "start": "10324319",
    "end": "10332319"
  },
  {
    "text": "our docs but the node SDK allows us to",
    "start": "10332319",
    "end": "10338560"
  },
  {
    "text": "to create a resource which we can attach span processors and Metric readers to um",
    "start": "10338560",
    "end": "10344319"
  },
  {
    "text": "so in this case like I'm using a batch span processor that uses an OTP Trace exporter to go to Tempo and has a",
    "start": "10344319",
    "end": "10350720"
  },
  {
    "text": "Prometheus exporter for the metrics but you can kind of get an idea how you can",
    "start": "10350720",
    "end": "10355800"
  },
  {
    "text": "start really introducing Trace like just with this and the docker compos setup",
    "start": "10355800",
    "end": "10362560"
  },
  {
    "text": "you have tracing in your effect app so you guys are free to use like the",
    "start": "10362560",
    "end": "10368200"
  },
  {
    "text": "stuff from this application it's all open source um but yeah I encourage you",
    "start": "10368200",
    "end": "10374359"
  },
  {
    "text": "folks to uh play with the tracing setup um the other thing we can do really",
    "start": "10374359",
    "end": "10380359"
  },
  {
    "text": "quickly is run the PM PM",
    "start": "10380359",
    "end": "10385479"
  },
  {
    "text": "TSX TS uh prompt give it the embeddings we just",
    "start": "10385479",
    "end": "10393200"
  },
  {
    "text": "generated and we can maybe say everybody's favorite question",
    "start": "10393200",
    "end": "10399479"
  },
  {
    "text": "what is effect right um and if you remember all the way",
    "start": "10399479",
    "end": "10407720"
  },
  {
    "text": "to the beginning of this Workshop we talked about wrapping external apis and how you can go about",
    "start": "10407720",
    "end": "10413920"
  },
  {
    "text": "doing that there's like the one-off method this flexible method um and then like kind of the all-in on effect method",
    "start": "10413920",
    "end": "10420120"
  },
  {
    "text": "well the two open AI examples that I showed you of wrapping like the chat completions um and messages API",
    "start": "10420120",
    "end": "10427439"
  },
  {
    "text": "messages are both in here and being used in this like production grade well production",
    "start": "10427439",
    "end": "10433160"
  },
  {
    "text": "grade uh affect C application so if we look at the open AI service again many",
    "start": "10433160",
    "end": "10438359"
  },
  {
    "text": "of the things that you'll find in here are things that we discussed during the workshop um so we're basically wrapping",
    "start": "10438359",
    "end": "10444720"
  },
  {
    "text": "um to get these completions the open AI chat completions API and then unwrapping",
    "start": "10444720",
    "end": "10451279"
  },
  {
    "text": "that into a stream so that we get the streaming output in our CLI like we saw so please explore this CLI application",
    "start": "10451279",
    "end": "10459359"
  },
  {
    "text": "um I am required to invalidate the API key after the workshop I was told uh so if you didn't get a chance to use it I'm",
    "start": "10459359",
    "end": "10465319"
  },
  {
    "text": "sorry um but um I hope that you all",
    "start": "10465319",
    "end": "10470359"
  },
  {
    "text": "enjoyed this Workshop I really hope that you folks got something out of it um I really",
    "start": "10470359",
    "end": "10476880"
  },
  {
    "text": "appreciate everybody's attention it's not easy to pay attention for the full day in a workshop format like this so I",
    "start": "10476880",
    "end": "10482720"
  },
  {
    "text": "really hope that we were able to keep you engaged um and again we need feedack",
    "start": "10482720",
    "end": "10488520"
  },
  {
    "text": "back we really like this is the first time we're running these workshops um we really want to know if this format was",
    "start": "10488520",
    "end": "10494720"
  },
  {
    "text": "useful if you guys would like to see other things um if doing things a slightly different way would be more",
    "start": "10494720",
    "end": "10499920"
  },
  {
    "text": "beneficial so please provide your feedback whether it's directly in Discord or in the feedback box whatever",
    "start": "10499920",
    "end": "10505520"
  },
  {
    "text": "you're most comfortable with um really thank you all very much it was a lot of fun for me to do this um so",
    "start": "10505520",
    "end": "10514080"
  },
  {
    "text": "what",
    "start": "10517319",
    "end": "10520319"
  },
  {
    "text": "yeah so so thank you guys very much again it was a lot of fun for me to do this um",
    "start": "10523120",
    "end": "10529560"
  },
  {
    "text": "yeah I really hope you all enjoyed it so thank [Applause] you",
    "start": "10529560",
    "end": "10537080"
  }
]