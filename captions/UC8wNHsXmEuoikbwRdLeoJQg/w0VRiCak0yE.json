[
  {
    "start": "0",
    "end": "658000"
  },
  {
    "text": "foreign yes welcome everybody and we have today",
    "start": "240",
    "end": "8040"
  },
  {
    "text": "Taylor that's working on a on a very nice new framework and I thought it was",
    "start": "8040",
    "end": "15120"
  },
  {
    "text": "interesting to for him to share what what he's working on I've I've just seen the documentation",
    "start": "15120",
    "end": "22199"
  },
  {
    "text": "and it it looks it looks really really nice so I'm curious myself",
    "start": "22199",
    "end": "27539"
  },
  {
    "text": "and please Taylor go ahead if you want to do any introduction or take it from",
    "start": "27539",
    "end": "32700"
  },
  {
    "text": "here sure um I know it's spelled a little weird but",
    "start": "32700",
    "end": "38520"
  },
  {
    "text": "my name is actually Tyler Tyler sorry all good all good I get that one quite a",
    "start": "38520",
    "end": "45899"
  },
  {
    "text": "lot so I'm used to it uh my mom doesn't know how to spell so I",
    "start": "45899",
    "end": "50940"
  },
  {
    "text": "got this weird thing look I'm cool my name is Michael and I'm Italian nobody",
    "start": "50940",
    "end": "56940"
  },
  {
    "text": "gets it nobody holds me away by my broker name",
    "start": "56940",
    "end": "62480"
  },
  {
    "text": "well then you can relate uh my name is Tyler Steinberger",
    "start": "63920",
    "end": "70560"
  },
  {
    "text": "been a professional engineer for about seven years now um self-taught",
    "start": "70560",
    "end": "76920"
  },
  {
    "text": "I've been working in JS Frameworks pretty much since the beginning and",
    "start": "76920",
    "end": "83640"
  },
  {
    "text": "uh been really focused in on front end web here for the past like three years",
    "start": "83640",
    "end": "88680"
  },
  {
    "text": "or so I kind of forced that to be my path I just kind of like being closer to the",
    "start": "88680",
    "end": "94140"
  },
  {
    "text": "user along the experience and working with designers and all that kind of stuff but",
    "start": "94140",
    "end": "101240"
  },
  {
    "text": "um and I guess that's not the first framework that that you aim to develop if I read correctly you were involved in",
    "start": "101460",
    "end": "108240"
  },
  {
    "text": "most JS and and other another front-end Frameworks before correct me if I'm if",
    "start": "108240",
    "end": "115259"
  },
  {
    "text": "I'm wrong yeah I wouldn't consider most JS a framework it's really just a reactive",
    "start": "115259",
    "end": "122100"
  },
  {
    "text": "streams Library um and its goals were pretty much",
    "start": "122100",
    "end": "128640"
  },
  {
    "text": "there's a lot of strictness around time semantics and uh around performance and",
    "start": "128640",
    "end": "134700"
  },
  {
    "text": "you won't find an observable or push-based stream library in JavaScript that's faster",
    "start": "134700",
    "end": "140959"
  },
  {
    "text": "I dare you to try I'd love to see it",
    "start": "140959",
    "end": "146099"
  },
  {
    "text": "um yeah I got started the very first thing when I was teaching myself the program was a framework",
    "start": "146099",
    "end": "152760"
  },
  {
    "text": "called cyclejs and I saw a video on YouTube before I",
    "start": "152760",
    "end": "158340"
  },
  {
    "text": "even knew how to program and it just from Andre staltz the author and it was",
    "start": "158340",
    "end": "163500"
  },
  {
    "text": "just like yeah I want to know how to do that and uh so I just I got involved in their",
    "start": "163500",
    "end": "171000"
  },
  {
    "text": "open source project you know I helped a big I helped some I'd like to think I",
    "start": "171000",
    "end": "176459"
  },
  {
    "text": "helped a lot um in like kind of tuning the",
    "start": "176459",
    "end": "181680"
  },
  {
    "text": "performance uh I had a big hand and like reframing the way we worked with the Dom",
    "start": "181680",
    "end": "188480"
  },
  {
    "text": "switching libraries to faster things adding features routing and everything",
    "start": "188480",
    "end": "194580"
  },
  {
    "text": "else or unsolved problems in the cycle.js community when I joined",
    "start": "194580",
    "end": "200340"
  },
  {
    "text": "uh kind of started my bias towards push-based reactive streams",
    "start": "200340",
    "end": "207120"
  },
  {
    "text": "uh but interestingly enough I you know I got my first two",
    "start": "207120",
    "end": "213300"
  },
  {
    "text": "development jobs through cyclejs and people in the community they were like hey I have a job and we need to do this",
    "start": "213300",
    "end": "218879"
  },
  {
    "text": "in Cycles so like we need experts and there basically was none so",
    "start": "218879",
    "end": "224040"
  },
  {
    "text": "yeah yes that's always the advantage when you build something the first people that use is it",
    "start": "224040",
    "end": "229379"
  },
  {
    "text": "they need experts and experts don't exist so like you get a job exactly yeah",
    "start": "229379",
    "end": "237659"
  },
  {
    "text": "yeah so I got my foot in the career into this career field and I haven't looked",
    "start": "237659",
    "end": "243540"
  },
  {
    "text": "back um but yeah I've just been building framework e things ever since just kind",
    "start": "243540",
    "end": "250319"
  },
  {
    "text": "of a passion and over the last few years uh",
    "start": "250319",
    "end": "255780"
  },
  {
    "text": "I've been trying to build similar things here to effects on top of generators and",
    "start": "255780",
    "end": "262019"
  },
  {
    "text": "um it's interesting I I've kind of come full circle",
    "start": "262019",
    "end": "267800"
  },
  {
    "text": "because I have some cycle actually dropped code for line for line some code",
    "start": "267800",
    "end": "273360"
  },
  {
    "text": "from cycle.js into into typed because I feel like it finally solves",
    "start": "273360",
    "end": "280440"
  },
  {
    "text": "the things that I actually intended for it to solve seven years ago because now",
    "start": "280440",
    "end": "285600"
  },
  {
    "text": "we have effect for in particular the dependency injection",
    "start": "285600",
    "end": "291020"
  },
  {
    "text": "cycle.js had monstrous amounts of prop Drilling and so I guess that's that's an",
    "start": "291020",
    "end": "297720"
  },
  {
    "text": "early common problem of stream based libraries or rather observable based",
    "start": "297720",
    "end": "304020"
  },
  {
    "text": "libraries I I did not have a huge experience with with cycle.js but I've",
    "start": "304020",
    "end": "309600"
  },
  {
    "text": "I've worked priorly with with Iraq's JS in in similar architectures",
    "start": "309600",
    "end": "314699"
  },
  {
    "text": "and there was really one of the pain points you didn't really have any uh",
    "start": "314699",
    "end": "320840"
  },
  {
    "text": "semantic of top-down injection of context and and bottoma recognition of",
    "start": "320840",
    "end": "328440"
  },
  {
    "text": "of water component actually needs and use um I love also the error semantics the",
    "start": "328440",
    "end": "334919"
  },
  {
    "text": "fact that you have it explicit and so on and so forth but I could get around something that doesn't have explicit",
    "start": "334919",
    "end": "341400"
  },
  {
    "text": "error semantics um you know it's not not the best but but still you can get around it I I",
    "start": "341400",
    "end": "349320"
  },
  {
    "text": "never liked the fact that I couldn't have higher order Behavior around",
    "start": "349320",
    "end": "355320"
  },
  {
    "text": "dependency injection and and context so I I definitely 100 share your share your view on this I'm",
    "start": "355320",
    "end": "364380"
  },
  {
    "text": "excited that that honestly after I've watched your uh your full circle going",
    "start": "364380",
    "end": "370440"
  },
  {
    "text": "through generators and and everything else and I was like pleasantly surprised that that at the",
    "start": "370440",
    "end": "376320"
  },
  {
    "text": "end you decided to to sort of merge uh into into effect I guess we we never had",
    "start": "376320",
    "end": "384479"
  },
  {
    "text": "the chance of of actually discussing really the semantics of streaming and so on and so forth and and maybe we'll do",
    "start": "384479",
    "end": "391620"
  },
  {
    "text": "that in a in a future sense I I kind of understand that you are biased",
    "start": "391620",
    "end": "399419"
  },
  {
    "text": "towards push-based semantics I'm I'm biased on pool based semantics because",
    "start": "399419",
    "end": "404639"
  },
  {
    "text": "probably we come from uh slightly different places I've mostly worked with",
    "start": "404639",
    "end": "409680"
  },
  {
    "text": "data and and pull semantics gives you constant memory",
    "start": "409680",
    "end": "415139"
  },
  {
    "text": "and other other properties that push-based semantics don't but the other",
    "start": "415139",
    "end": "420900"
  },
  {
    "text": "way around it's also true there are there are things that push-based semantics give you that that this",
    "start": "420900",
    "end": "427440"
  },
  {
    "text": "doesn't that pool based on I'm really curious if we'll ever get to a point where",
    "start": "427440",
    "end": "434039"
  },
  {
    "text": "kind of consolidate them in the same the same structure that can deal with",
    "start": "434039",
    "end": "439500"
  },
  {
    "text": "with both aspects I I don't even know if it makes sense but I've read a lot of",
    "start": "439500",
    "end": "445199"
  },
  {
    "text": "papers pool versus push versus pull versus push semantically they they can represent the",
    "start": "445199",
    "end": "451620"
  },
  {
    "text": "same things uh but with slightly different trade-offs and I'm really curious if we ever get to the point",
    "start": "451620",
    "end": "457500"
  },
  {
    "text": "where uh there's a god-like uh data type that encompasses them both but",
    "start": "457500",
    "end": "465360"
  },
  {
    "text": "I guess this type seem to into your current work we typed that I'm really",
    "start": "465360",
    "end": "471780"
  },
  {
    "text": "excited to see and I don't know that I've ever come",
    "start": "471780",
    "end": "477240"
  },
  {
    "text": "across anything that really joins the two I I when I've read some of the stuff",
    "start": "477240",
    "end": "484020"
  },
  {
    "text": "that's a lot older uh on like classic FRP is there's always a both",
    "start": "484020",
    "end": "491160"
  },
  {
    "text": "and they're usually separate and it's usually that you utilize the push-based",
    "start": "491160",
    "end": "497220"
  },
  {
    "text": "semantics to pull something like when you want to interrupt with them so you have like some event and",
    "start": "497220",
    "end": "503639"
  },
  {
    "text": "it's like okay well let me sample what you know this latest element is or this latest value",
    "start": "503639",
    "end": "509220"
  },
  {
    "text": "and then do something with it because it doesn't seem there's quite as",
    "start": "509220",
    "end": "514500"
  },
  {
    "text": "a natural and interop from push into pool the pool into push isn't too",
    "start": "514500",
    "end": "520560"
  },
  {
    "text": "bad it depends if you do it on data uh",
    "start": "520560",
    "end": "528540"
  },
  {
    "text": "and there's the stuck in between so you're gonna push a lot of things in in the",
    "start": "528540",
    "end": "534899"
  },
  {
    "text": "stock like and and then you need stuff like back pressuring and and so on and",
    "start": "534899",
    "end": "540060"
  },
  {
    "text": "so forth so if I'm for example reading a file which is one terabyte I don't want",
    "start": "540060",
    "end": "546240"
  },
  {
    "text": "to put the file in memory I don't want I I don't want I want to really chunk by",
    "start": "546240",
    "end": "551760"
  },
  {
    "text": "chunk it's Lies by slice and and go there so for those types of things pool based is really",
    "start": "551760",
    "end": "558360"
  },
  {
    "text": "yeah perfect it doesn't it doesn't raise the the same problematics that you usually would have",
    "start": "558360",
    "end": "564720"
  },
  {
    "text": "um in a push sense but the opposite is also true if you if you then have to push everything to a",
    "start": "564720",
    "end": "571200"
  },
  {
    "text": "queue to then pull it back that you're looping you're looping around uh so",
    "start": "571200",
    "end": "576240"
  },
  {
    "text": "right both uh things really exist for for reasons I I'm just curious if we",
    "start": "576240",
    "end": "583200"
  },
  {
    "text": "ever get to a point of representing those in a single in a single composable uh way I'm not",
    "start": "583200",
    "end": "590760"
  },
  {
    "text": "really thinking on should they be the same implementation probably no because",
    "start": "590760",
    "end": "596160"
  },
  {
    "text": "they have different Traders but I would like to compose them uh well and",
    "start": "596160",
    "end": "601760"
  },
  {
    "text": "composition for uh for effect is is really the core of uh the the driver I I think if you",
    "start": "601760",
    "end": "609720"
  },
  {
    "text": "build something which is composable it's gonna be 10-0 something that is ad hoc",
    "start": "609720",
    "end": "615300"
  },
  {
    "text": "and not and not composable I have no idea if we'll ever get there with",
    "start": "615300",
    "end": "620760"
  },
  {
    "text": "streams but it's something that excites me yeah it's definitely a place to explore",
    "start": "620760",
    "end": "628339"
  },
  {
    "text": "good good do we maybe want to start looking at",
    "start": "628800",
    "end": "634920"
  },
  {
    "text": "something on the typed front and what you've been working with",
    "start": "634920",
    "end": "641760"
  },
  {
    "text": "sure uh I didn't have anything prepared exactly but I cannot uh maybe start with like some",
    "start": "641760",
    "end": "649200"
  },
  {
    "text": "overview of what the project is and yeah isn't and",
    "start": "649200",
    "end": "654600"
  },
  {
    "text": "uh sure um",
    "start": "654600",
    "end": "659540"
  },
  {
    "start": "658000",
    "end": "890000"
  },
  {
    "text": "um so type this has been a work in progress for a long time honestly it's changed a lot of forms over the years",
    "start": "660000",
    "end": "667500"
  },
  {
    "text": "it's only here within like a little yes less than a year I've started trying to",
    "start": "667500",
    "end": "674399"
  },
  {
    "text": "re-architect it to work on top of effect um I used to have my own generator based",
    "start": "674399",
    "end": "681420"
  },
  {
    "text": "kind of effect system in here it was nowhere near as powerful as effect",
    "start": "681420",
    "end": "688500"
  },
  {
    "text": "but I definitely stole a healthy amount of ideas from you guys along the way too okay which kind of",
    "start": "688500",
    "end": "697680"
  },
  {
    "text": "oh yeah that's the best of Open Source the code is there to be stolen for free",
    "start": "697680",
    "end": "703740"
  },
  {
    "text": "for for everybody and we stole a lot of code from other languages and other",
    "start": "703740",
    "end": "710880"
  },
  {
    "text": "stuff so absolutely that's the very essence of Open Source well I want to keep the stuff open source it's important to share knowledge",
    "start": "710880",
    "end": "719040"
  },
  {
    "text": "especially Niche knowledge like what we're building here",
    "start": "719040",
    "end": "724220"
  },
  {
    "text": "uh with effect and everything else most people don't know what stack frames",
    "start": "724579",
    "end": "731880"
  },
  {
    "text": "and continuations really look like in terms of code and all this kind of crazy stuff",
    "start": "731880",
    "end": "737940"
  },
  {
    "text": "it's nice to have a repository somewhere",
    "start": "737940",
    "end": "741980"
  },
  {
    "text": "um well so typed is it really started off as much more of a toolkit",
    "start": "742980",
    "end": "751380"
  },
  {
    "text": "um I'd kind of gotten sort of burned by using react for a long time",
    "start": "751380",
    "end": "757800"
  },
  {
    "text": "um and I really disliked the fact that State Management and view",
    "start": "757800",
    "end": "763860"
  },
  {
    "text": "rendering were intrinsically linked you know I can't test my hooks without rendering a component uh",
    "start": "763860",
    "end": "772320"
  },
  {
    "text": "and it just I don't know I always just felt really hesitant to ever actually use it I just ended up not testing a lot",
    "start": "772320",
    "end": "780720"
  },
  {
    "text": "of hooks and doing more yeah I just never never seemed",
    "start": "780720",
    "end": "786420"
  },
  {
    "text": "worthwhile and so uh kind of learning more generally about",
    "start": "786420",
    "end": "792660"
  },
  {
    "text": "algebraic effects and things of that nature I wanted to try and find something",
    "start": "792660",
    "end": "798240"
  },
  {
    "text": "uh that allowed these things to stay a little bit more separate still be able",
    "start": "798240",
    "end": "803399"
  },
  {
    "text": "to come to a cohesive whole um and it ended up being effect is the is",
    "start": "803399",
    "end": "810660"
  },
  {
    "text": "the glue between all of these things for me now",
    "start": "810660",
    "end": "815060"
  },
  {
    "text": "um but so typed is intentionally able to be used separately",
    "start": "816060",
    "end": "822959"
  },
  {
    "text": "you could use different parts of the library on their own",
    "start": "822959",
    "end": "828680"
  },
  {
    "text": "in particular like the effects Library could be used on its own if you just need some streams and you don't want to",
    "start": "828680",
    "end": "834899"
  },
  {
    "text": "deal with the rest of it um and then some of the other stuff build on the streams so you might have",
    "start": "834899",
    "end": "841079"
  },
  {
    "text": "to accept that but we have um we have packages for navigation it's",
    "start": "841079",
    "end": "848220"
  },
  {
    "text": "kind of roughly modeled after the the upcoming",
    "start": "848220",
    "end": "853440"
  },
  {
    "text": "navigation API that's coming to the web I think only Chrome has support for it",
    "start": "853440",
    "end": "858540"
  },
  {
    "text": "so far and I'm a Firefox user so not quite ready to use it [Music]",
    "start": "858540",
    "end": "864660"
  },
  {
    "text": "um but that'll allow you to keep track of you know what's the current entry that",
    "start": "864660",
    "end": "869820"
  },
  {
    "text": "I'm looking at can I go backwards can I go forwards all those kinds of things that you do",
    "start": "869820",
    "end": "876060"
  },
  {
    "text": "when you're routing it's kind of the low level of that",
    "start": "876060",
    "end": "881060"
  },
  {
    "text": "um and then kind of building up to the router there's a path package in here",
    "start": "881160",
    "end": "888000"
  },
  {
    "text": "and really it's like a kind of a type safe DSL around path to regex",
    "start": "888000",
    "end": "897000"
  },
  {
    "start": "890000",
    "end": "1094000"
  },
  {
    "text": "so you have some of these types for constructing template literal types so",
    "start": "897000",
    "end": "905459"
  },
  {
    "text": "how do you represent params and so you can utilize these to ensure that you always",
    "start": "905459",
    "end": "913500"
  },
  {
    "text": "create valid path parameters and things of that",
    "start": "913500",
    "end": "919440"
  },
  {
    "text": "nature optional ones ones with different prefixes query parameters",
    "start": "919440",
    "end": "924720"
  },
  {
    "text": "all these kinds of things joining them together um",
    "start": "924720",
    "end": "930420"
  },
  {
    "text": "kind of formatting different things and but the as we kind of build up here",
    "start": "930420",
    "end": "936180"
  },
  {
    "text": "you'll see a ton of type level code pattern matching over a lot of these",
    "start": "936180",
    "end": "941760"
  },
  {
    "text": "different things and the cool thing about at least the thing that I think is the",
    "start": "941760",
    "end": "947399"
  },
  {
    "text": "cool thing about this package in particular is you can take a",
    "start": "947399",
    "end": "953820"
  },
  {
    "text": "a particular path with parameters and things of that nature and",
    "start": "953820",
    "end": "959880"
  },
  {
    "text": "I think we have some tests in here yeah you can take some paths and things",
    "start": "959880",
    "end": "966120"
  },
  {
    "text": "of that nature so I have this one that has one parameter B",
    "start": "966120",
    "end": "971579"
  },
  {
    "text": "and you can kind of uh you can even interpolate them at the",
    "start": "971579",
    "end": "976680"
  },
  {
    "text": "type level so if you give it this path you give it a parameter B",
    "start": "976680",
    "end": "981959"
  },
  {
    "text": "it knows quite literally that this is the path that it ends up creating",
    "start": "981959",
    "end": "988680"
  },
  {
    "text": "if you pass some food is that a slash and this is interpolating the object",
    "start": "988680",
    "end": "995279"
  },
  {
    "text": "into in yeah into the template so and it works in the other way I guess I don't",
    "start": "995279",
    "end": "1001519"
  },
  {
    "text": "have any tests just yet for uh I think it's primitive",
    "start": "1001519",
    "end": "1009740"
  },
  {
    "text": "but you can do it in the reverse and it will know all the values are always strings since",
    "start": "1009740",
    "end": "1016399"
  },
  {
    "text": "paths are always strings so kind of push and sort of decoding or anything",
    "start": "1016399",
    "end": "1022240"
  },
  {
    "text": "uh into your application code since it just makes that this API more",
    "start": "1023240",
    "end": "1028640"
  },
  {
    "text": "cumbersome if I do it here uh",
    "start": "1028640",
    "end": "1035380"
  },
  {
    "text": "and I guess you speed ideally we have other in in the idea of of it being a toolkit",
    "start": "1035839",
    "end": "1043699"
  },
  {
    "text": "rather than than a full framework we have other other means of decoding the",
    "start": "1043699",
    "end": "1051260"
  },
  {
    "text": "structure to a more refined to a more refined manner for example if that",
    "start": "1051260",
    "end": "1057679"
  },
  {
    "text": "schema and and other stuff so it could it could quite literally be",
    "start": "1057679",
    "end": "1063020"
  },
  {
    "text": "uh kind of plugged into you know something I want to explore as I get",
    "start": "1063020",
    "end": "1069440"
  },
  {
    "text": "further along is how do I bring an effect schema for more of these things what's the right apis",
    "start": "1069440",
    "end": "1076700"
  },
  {
    "text": "if people have ideas and I'm totally aware of such I haven't gotten there just yet",
    "start": "1076700",
    "end": "1083360"
  },
  {
    "text": "but that's kind of the the core of it um and then path kind of builds up to",
    "start": "1083360",
    "end": "1090679"
  },
  {
    "text": "our router or I guess I should say the route package and it's this is a really really small",
    "start": "1090679",
    "end": "1097660"
  },
  {
    "start": "1094000",
    "end": "1352000"
  },
  {
    "text": "and it's basically just a wrapper around path direct expression and so the the path Library utilizes the",
    "start": "1097660",
    "end": "1106460"
  },
  {
    "text": "path to Reg X regular Expressions syntax and it parses",
    "start": "1106460",
    "end": "1112220"
  },
  {
    "text": "all of it with the exception of arbitrary regular Expressions I",
    "start": "1112220",
    "end": "1119059"
  },
  {
    "text": "wasn't quite feeling ambitious enough to create a type level regex parser",
    "start": "1119059",
    "end": "1124419"
  },
  {
    "text": "but all of them yeah I wouldn't go there I probably will",
    "start": "1124419",
    "end": "1130640"
  },
  {
    "text": "get there one day because I'm bored or curious enough but I just haven't quite",
    "start": "1130640",
    "end": "1135919"
  },
  {
    "text": "done it yet I would definitely be willing to accept a PR for it",
    "start": "1135919",
    "end": "1142539"
  },
  {
    "text": "so a route here is it's really just whatever path that you had created with",
    "start": "1147500",
    "end": "1155840"
  },
  {
    "text": "um with the path library or at least one that's compatible with that you can",
    "start": "1155840",
    "end": "1162320"
  },
  {
    "text": "write uh string literals in line and there are three operations that kind",
    "start": "1162320",
    "end": "1169880"
  },
  {
    "text": "of come with them by default so you can uh make a route so this will",
    "start": "1169880",
    "end": "1178280"
  },
  {
    "text": "accept the parameters that it parses out of the path and then it will create the interpolated",
    "start": "1178280",
    "end": "1185299"
  },
  {
    "text": "value as we kind of saw a little bit before you have the ability to",
    "start": "1185299",
    "end": "1192320"
  },
  {
    "text": "match a particular route so kind of going in the other direction",
    "start": "1192320",
    "end": "1197860"
  },
  {
    "text": "given some arbitrary path uh we either have a nun or a sum of the",
    "start": "1197860",
    "end": "1205460"
  },
  {
    "text": "parameters that it would match and so this allows you the reason I kind of went with this is I",
    "start": "1205460",
    "end": "1212780"
  },
  {
    "text": "really like having both of these in a single place so I can't make type",
    "start": "1212780",
    "end": "1218360"
  },
  {
    "text": "I can't create paths that aren't going to actually work in my application for the first",
    "start": "1218360",
    "end": "1225140"
  },
  {
    "text": "and then it's just really nice to not have to do a bunch of typecasting on",
    "start": "1225140",
    "end": "1231080"
  },
  {
    "text": "the parameters that are coming back out when you match against them",
    "start": "1231080",
    "end": "1236559"
  },
  {
    "text": "and then the last bit of a route is the ability to concatenate two routes",
    "start": "1237320",
    "end": "1244360"
  },
  {
    "text": "and this does some type level stuff to make sure that they all end up being happy I don't think I have",
    "start": "1244360",
    "end": "1252080"
  },
  {
    "text": "I think I actually have one little stashed sample we'll come back to here but I",
    "start": "1252080",
    "end": "1258919"
  },
  {
    "text": "have a typescript still loading I have around Fufu",
    "start": "1258919",
    "end": "1266440"
  },
  {
    "text": "you can tell these are totally contrived but and Route bar bar",
    "start": "1266440",
    "end": "1272299"
  },
  {
    "text": "and then you can concatenate the two it ends up knowing exactly what it is",
    "start": "1272299",
    "end": "1279380"
  },
  {
    "text": "and it's smart enough I think the only logic that it'll do is it'll handle like if",
    "start": "1279380",
    "end": "1286460"
  },
  {
    "text": "uh you try to concatenate stuff with multiple uh forward slashes that will",
    "start": "1286460",
    "end": "1292039"
  },
  {
    "text": "trim them to one and a few things like that but",
    "start": "1292039",
    "end": "1297620"
  },
  {
    "text": "mostly just stuffs them together",
    "start": "1297620",
    "end": "1301480"
  },
  {
    "text": "um so that's kind of you know path Works directly on like the path to regex",
    "start": "1303440",
    "end": "1308679"
  },
  {
    "text": "Strings themselves and then route kind of puts them into a data structure that",
    "start": "1308679",
    "end": "1314419"
  },
  {
    "text": "just wraps over path to Reg X's uh main functionality for creating and",
    "start": "1314419",
    "end": "1321140"
  },
  {
    "text": "matching routes which ultimately",
    "start": "1321140",
    "end": "1326600"
  },
  {
    "text": "builds up to our router and I guess actually this is a decent place to be",
    "start": "1326600",
    "end": "1332600"
  },
  {
    "text": "um and this is a very contrived example still",
    "start": "1332600",
    "end": "1338320"
  },
  {
    "text": "but our router it's split up into sort of two things",
    "start": "1338320",
    "end": "1344299"
  },
  {
    "text": "there's the router service which I guess I can pop over to",
    "start": "1344299",
    "end": "1351500"
  },
  {
    "text": "hello again",
    "start": "1351500",
    "end": "1354340"
  },
  {
    "start": "1352000",
    "end": "1475000"
  },
  {
    "text": "the router service itself mainly abstracts over",
    "start": "1357440",
    "end": "1365720"
  },
  {
    "text": "whatever the current route is and so as a data structure you can pass",
    "start": "1365720",
    "end": "1372020"
  },
  {
    "text": "or provide what is the current router and that will allow different parts of",
    "start": "1372020",
    "end": "1378860"
  },
  {
    "text": "your application to be able to specify what is like this base route or what are",
    "start": "1378860",
    "end": "1384860"
  },
  {
    "text": "these links relative to so if you want to uh",
    "start": "1384860",
    "end": "1390200"
  },
  {
    "text": "kind of use a more of a fractal nature where you know inside of this component it only knows what like forward slash is",
    "start": "1390200",
    "end": "1397400"
  },
  {
    "text": "and forward slash you know Foo or bar or whatever",
    "start": "1397400",
    "end": "1403159"
  },
  {
    "text": "um but then it doesn't have to know that it's actually mounted at you know",
    "start": "1403159",
    "end": "1409340"
  },
  {
    "text": "some other some other base path router can allow you to kind of",
    "start": "1409340",
    "end": "1416440"
  },
  {
    "text": "configure that um",
    "start": "1417500",
    "end": "1422539"
  },
  {
    "text": "and as a data structure you have access to the current params",
    "start": "1422539",
    "end": "1429559"
  },
  {
    "text": "that are associated to any particular route I'll kind of gloss over this type just a",
    "start": "1429559",
    "end": "1436100"
  },
  {
    "text": "little bit I don't know that we want to get too deep into all the push-based stream stuff that I have going on",
    "start": "1436100",
    "end": "1443120"
  },
  {
    "text": "um but I have a type called a ref subject",
    "start": "1443120",
    "end": "1448240"
  },
  {
    "text": "is fairly similar to the the synchronized ref that you guys have in",
    "start": "1448240",
    "end": "1453799"
  },
  {
    "text": "effect stream in that it merges a state keeping portion with the ability to subscribe to",
    "start": "1453799",
    "end": "1462620"
  },
  {
    "text": "those those changes over time um and then kind of extending that sort of",
    "start": "1462620",
    "end": "1470240"
  },
  {
    "text": "concept uh well I call that I call that data type a ref subject kind of stealing from the",
    "start": "1470240",
    "end": "1477080"
  },
  {
    "start": "1475000",
    "end": "1840000"
  },
  {
    "text": "ref from effect and then a subject from push-based",
    "start": "1477080",
    "end": "1482480"
  },
  {
    "text": "kind of terminology but kind of going from a rough subject",
    "start": "1482480",
    "end": "1488659"
  },
  {
    "text": "you have two kind of classes of operations that you can do from there",
    "start": "1488659",
    "end": "1495080"
  },
  {
    "text": "um where a rough subject is kind of invariant like it has some value a going",
    "start": "1495080",
    "end": "1500480"
  },
  {
    "text": "in and out of it you can map a ref subject",
    "start": "1500480",
    "end": "1506179"
  },
  {
    "text": "and you get this thing called a computed type um and it looks",
    "start": "1506179",
    "end": "1512780"
  },
  {
    "text": "good English I guess it's no longer in variant because that represents only the observing part so you can do all the",
    "start": "1512780",
    "end": "1520039"
  },
  {
    "text": "mapping the mapping aspects which we couldn't we couldn't do directly on the correct and so this one I think I have a",
    "start": "1520039",
    "end": "1527240"
  },
  {
    "text": "test for computed in particular so you can create a rough subject",
    "start": "1527240",
    "end": "1536380"
  },
  {
    "text": "from my effects library but you call make ref and you initialize it with a",
    "start": "1536380",
    "end": "1542659"
  },
  {
    "text": "stream or not a stream with an effect so they are lazily instantiated with the",
    "start": "1542659",
    "end": "1547880"
  },
  {
    "text": "effect um and they can be re-initialized later if",
    "start": "1547880",
    "end": "1553880"
  },
  {
    "text": "you want to delete them and like refetch them something just a pattern that I've found really useful in my front end apps",
    "start": "1553880",
    "end": "1562480"
  },
  {
    "text": "um but once you have a rough subject you can map them and so in this case I'm just doing it",
    "start": "1562520",
    "end": "1568100"
  },
  {
    "text": "synchronously and both a rough subject",
    "start": "1568100",
    "end": "1574100"
  },
  {
    "text": "and computed and filtered says I'll talk about in a second they're all valid",
    "start": "1574100",
    "end": "1579320"
  },
  {
    "text": "effects too um so you can at least in this case so you can use",
    "start": "1579320",
    "end": "1586159"
  },
  {
    "text": "them you can directly to get the current value you can also map effects if you want to",
    "start": "1586159",
    "end": "1592880"
  },
  {
    "text": "do effects if you need to do effectful things",
    "start": "1592880",
    "end": "1600080"
  },
  {
    "text": "it will add any resources or errors and things of that nature",
    "start": "1600080",
    "end": "1606100"
  },
  {
    "text": "that could be possibly there so computed uh",
    "start": "1606100",
    "end": "1613279"
  },
  {
    "text": "they always have a value that you can get so there's no possibility of not getting",
    "start": "1613279",
    "end": "1619159"
  },
  {
    "text": "a value because a ref always has a value if it doesn't have a value it will initialize one for you",
    "start": "1619159",
    "end": "1626419"
  },
  {
    "text": "um so in this example",
    "start": "1626419",
    "end": "1630820"
  },
  {
    "text": "I guess that's not true if you apply filtering through it is why the other day so like here when we ask for the",
    "start": "1631820",
    "end": "1638480"
  },
  {
    "text": "value of computed it first initializes the ref basically calls this map function and",
    "start": "1638480",
    "end": "1646279"
  },
  {
    "text": "that's how we get to if we change the value of the underlying value of the reference",
    "start": "1646279",
    "end": "1653480"
  },
  {
    "text": "the value of the computed value also changes and then you're 100 correct the uh the",
    "start": "1653480",
    "end": "1662419"
  },
  {
    "text": "filtered data type works it's identical in every single way",
    "start": "1662419",
    "end": "1668299"
  },
  {
    "text": "except for trying to retrieve a value because you could have filtered it out",
    "start": "1668299",
    "end": "1673480"
  },
  {
    "text": "in which case you will get a no such element exception",
    "start": "1673480",
    "end": "1680860"
  },
  {
    "text": "um she's in line with what you would get yielding right something like an option",
    "start": "1681140",
    "end": "1688760"
  },
  {
    "text": "um and so the main I guess I could just for example",
    "start": "1688760",
    "end": "1695320"
  },
  {
    "text": "you can filter map precisely that",
    "start": "1695360",
    "end": "1702340"
  },
  {
    "text": "and you'll get a some sort of filtered but the main thing is",
    "start": "1702860",
    "end": "1709720"
  },
  {
    "text": "yep",
    "start": "1710539",
    "end": "1713320"
  },
  {
    "text": "you'll see that when you try to retrieve it you can get an exception of it being",
    "start": "1716960",
    "end": "1724640"
  },
  {
    "text": "missing and so this is actually the exact",
    "start": "1724640",
    "end": "1730820"
  },
  {
    "text": "operation that's utilized in the router that I'm saying you have some routes",
    "start": "1730820",
    "end": "1736400"
  },
  {
    "text": "and you would match on it and you'd end up with a filtered value of the parameters",
    "start": "1736400",
    "end": "1742820"
  },
  {
    "text": "that the route matches to but it may or may not be matched which is kind of why",
    "start": "1742820",
    "end": "1748760"
  },
  {
    "text": "you end up with this filter data type",
    "start": "1748760",
    "end": "1752740"
  },
  {
    "text": "so from there you can also",
    "start": "1754960",
    "end": "1760120"
  },
  {
    "text": "kind of extend the router if you want to create a new one pretty much it takes the second route",
    "start": "1760120",
    "end": "1766820"
  },
  {
    "text": "and it calls route.comcat here to here to create a new router instance",
    "start": "1766820",
    "end": "1773539"
  },
  {
    "text": "um and then these are kind of they're not too important for most",
    "start": "1773539",
    "end": "1779600"
  },
  {
    "text": "people's use cases but kind of have kind of builds up kind of build a tree",
    "start": "1779600",
    "end": "1785120"
  },
  {
    "text": "structure of the route routers um just in case you want to do some sort of operation that like",
    "start": "1785120",
    "end": "1791960"
  },
  {
    "text": "goes up the tree figures out what all the routes are and create some sort of",
    "start": "1791960",
    "end": "1798320"
  },
  {
    "text": "um you know some sort of path based on all of that information or if it's something I haven't done yet",
    "start": "1798320",
    "end": "1805640"
  },
  {
    "text": "but I um like react router for example you have the ability to put like",
    "start": "1805640",
    "end": "1811960"
  },
  {
    "text": "relative paths like dot dot slash to kind of like move up",
    "start": "1811960",
    "end": "1818000"
  },
  {
    "text": "I I would imagine being able to Traverse up to the parents would kind of be relevant to those sorts",
    "start": "1818000",
    "end": "1825200"
  },
  {
    "text": "of operations and then uh",
    "start": "1825200",
    "end": "1830840"
  },
  {
    "text": "the router's always built off of that navigation service I don't think I'll dive into too deeply right now but I've",
    "start": "1830840",
    "end": "1839299"
  },
  {
    "text": "put it here just so it's easy to reach there and navigation has",
    "start": "1839299",
    "end": "1846279"
  },
  {
    "start": "1840000",
    "end": "2535000"
  },
  {
    "text": "it has a lot of stuff going on that I won't go into to depth but for the most part",
    "start": "1849380",
    "end": "1855440"
  },
  {
    "text": "you know you keep track of the current entry you can navigate you can listen to navigation events either when they're",
    "start": "1855440",
    "end": "1862220"
  },
  {
    "text": "occurring this is the sorry this is the package",
    "start": "1862220",
    "end": "1867500"
  },
  {
    "text": "that you referred to as it being built uh inspired from the navigation API in",
    "start": "1867500",
    "end": "1873860"
  },
  {
    "text": "the future to be able to pretty much just switch to actually using the navigation API",
    "start": "1873860",
    "end": "1879320"
  },
  {
    "text": "uh right now I have two different implementations I have one that works entirely in memory for server-side",
    "start": "1879320",
    "end": "1885860"
  },
  {
    "text": "experiences and then one that uses the history API",
    "start": "1885860",
    "end": "1890980"
  },
  {
    "text": "kind of shims over that to work inside of the Dom environment",
    "start": "1890980",
    "end": "1897880"
  },
  {
    "text": "but it allows you to listen to these like on navigation",
    "start": "1898240",
    "end": "1904159"
  },
  {
    "text": "there's a it's navigation error type you can utilize you can",
    "start": "1904159",
    "end": "1909559"
  },
  {
    "text": "either cancel the current navigation or you can redirect to something else",
    "start": "1909559",
    "end": "1915820"
  },
  {
    "text": "you can also listen to when the navigation has completed uh if you need",
    "start": "1916000",
    "end": "1921620"
  },
  {
    "text": "it for any reason there's a couple other things you can go back if",
    "start": "1921620",
    "end": "1927980"
  },
  {
    "text": "there are any entries before the current one actually going back going forward",
    "start": "1927980",
    "end": "1936880"
  },
  {
    "text": "um reloading the current entry something I think is actually kind of",
    "start": "1937100",
    "end": "1942320"
  },
  {
    "text": "nice about the navigation API that's coming up is they kind of have this idea of",
    "start": "1942320",
    "end": "1948919"
  },
  {
    "text": "I don't know if they call them exactly the same thing but you're able to you have some sort of key",
    "start": "1948919",
    "end": "1954260"
  },
  {
    "text": "type in every single uh destination that you make it to",
    "start": "1954260",
    "end": "1961059"
  },
  {
    "text": "they all have their own let's see",
    "start": "1961059",
    "end": "1966559"
  },
  {
    "text": "they all have their own key Associated to them and so you can actually use those keys to navigate back",
    "start": "1966559",
    "end": "1974600"
  },
  {
    "text": "and forward to these different destinations and So currently I generate them on the",
    "start": "1974600",
    "end": "1980899"
  },
  {
    "text": "Fly um and in the Dom environment it's set up to store them in local storage so that",
    "start": "1980899",
    "end": "1987919"
  },
  {
    "text": "they so if you want to be able to store these keys for later and create experiences around",
    "start": "1987919",
    "end": "1994820"
  },
  {
    "text": "being able to jump back to stuff for forward to stuff",
    "start": "1994820",
    "end": "2000120"
  },
  {
    "text": "I thought that was kind of a nice thing from the navigation API itself",
    "start": "2001419",
    "end": "2007260"
  },
  {
    "text": "yeah I'm not yet familiar with the with the new navigation API I have to be",
    "start": "2009539",
    "end": "2016240"
  },
  {
    "text": "sincering saying that I pretty much in my career have",
    "start": "2016240",
    "end": "2021519"
  },
  {
    "text": "went as far as possible from front end so I'm",
    "start": "2021519",
    "end": "2027700"
  },
  {
    "text": "I'm kind of getting in touch back at the very early of my career I was I was building front ends too but I was never",
    "start": "2027700",
    "end": "2034480"
  },
  {
    "text": "good at building front end and I found I found myself more passionate about",
    "start": "2034480",
    "end": "2040120"
  },
  {
    "text": "thing away from user experience which is kind of the opposite of what you describe yourself to be",
    "start": "2040120",
    "end": "2048099"
  },
  {
    "text": "to be in but I know that the web platform is making huge progress and",
    "start": "2048099",
    "end": "2054638"
  },
  {
    "text": "this is actually the first time that I hear about the navigation API and it has",
    "start": "2054639",
    "end": "2062020"
  },
  {
    "text": "some very interesting Concepts I see and how hard was it to shim over the uh",
    "start": "2062020",
    "end": "2070440"
  },
  {
    "text": "now you can kind of poke through it there's a fair amount of code in here",
    "start": "2070440",
    "end": "2076540"
  },
  {
    "text": "um I guess actually the more interesting stuff would be in",
    "start": "2076540",
    "end": "2083138"
  },
  {
    "text": "here is this this seems to me more for me I",
    "start": "2083139",
    "end": "2088780"
  },
  {
    "text": "mean I've seen something similar in in Mobile if I'm not I'm not mistaken an Android has something similar to this",
    "start": "2088780",
    "end": "2095020"
  },
  {
    "text": "you might be right I have no I might be wrong I've never done any native stuff",
    "start": "2095020",
    "end": "2102000"
  },
  {
    "text": "um but it wasn't too terrible uh I guess actually I should move to move here so I",
    "start": "2102640",
    "end": "2109180"
  },
  {
    "text": "kind of have like the shared model um it works for both the uh the",
    "start": "2109180",
    "end": "2114339"
  },
  {
    "text": "in-memory and the Dom implementation uh in this case you know I have to keep",
    "start": "2114339",
    "end": "2120040"
  },
  {
    "text": "track of my own event handlers and stuff these things",
    "start": "2120040",
    "end": "2125200"
  },
  {
    "text": "would be handled natively by the uh",
    "start": "2125200",
    "end": "2130420"
  },
  {
    "text": "the navigation API once it's available or at least it has mechanisms at which I",
    "start": "2130420",
    "end": "2137380"
  },
  {
    "text": "could more easily tap into rather than having to keep track of them myself",
    "start": "2137380",
    "end": "2143460"
  },
  {
    "text": "yeah I mean you you would always want something of a service on top of that as",
    "start": "2145119",
    "end": "2150220"
  },
  {
    "text": "you described to provide experiences in server side and I guess that don't",
    "start": "2150220",
    "end": "2155440"
  },
  {
    "text": "support it so it's probably going to be easier to well you wouldn't need to shim less but",
    "start": "2155440",
    "end": "2162400"
  },
  {
    "text": "still a bit already so the the main two things",
    "start": "2162400",
    "end": "2167680"
  },
  {
    "text": "that I actually keep state for are these two guys",
    "start": "2167680",
    "end": "2173140"
  },
  {
    "text": "um I keep track of the navigation events um and I don't think I those are exposed to",
    "start": "2173140",
    "end": "2180940"
  },
  {
    "text": "you at any way at any point uh the navigation event kind of has the most amount of data but that's actually what",
    "start": "2180940",
    "end": "2187359"
  },
  {
    "text": "I sort of local storage in the Dom environment and stuff so that I can I'll have like the keys and things of that",
    "start": "2187359",
    "end": "2193480"
  },
  {
    "text": "nature to be able to navigate to and from um and then I keep track of what the",
    "start": "2193480",
    "end": "2199359"
  },
  {
    "text": "current index is in this in this list as you go back and forward",
    "start": "2199359",
    "end": "2204820"
  },
  {
    "text": "and things of that nature um and then the rest of it's pretty much",
    "start": "2204820",
    "end": "2210400"
  },
  {
    "text": "computed things so the entries are computed from here the destinations are",
    "start": "2210400",
    "end": "2216220"
  },
  {
    "text": "kind of nested inside of a navigation event the current entry is kind of",
    "start": "2216220",
    "end": "2223240"
  },
  {
    "text": "the joining of these two things into this the currently zoomed in on",
    "start": "2223240",
    "end": "2229960"
  },
  {
    "text": "destination um can go back basically checks of the",
    "start": "2229960",
    "end": "2236020"
  },
  {
    "text": "indexes um greater than zero",
    "start": "2236020",
    "end": "2241300"
  },
  {
    "text": "and can go forward if the length of the vents is greater than the current index",
    "start": "2241300",
    "end": "2249520"
  },
  {
    "text": "or a lot and I see that all of those are subject",
    "start": "2249520",
    "end": "2255760"
  },
  {
    "text": "based so you can observe changes yes",
    "start": "2255760",
    "end": "2261640"
  },
  {
    "text": "like I have something I can't show but I have an app at work you know I stash these into some pagination controls",
    "start": "2261640",
    "end": "2269619"
  },
  {
    "text": "so like uh if you can go back is true I kind of use that to disable or",
    "start": "2269619",
    "end": "2276400"
  },
  {
    "text": "enable that particular button you know change the Styles so that it doesn't look like",
    "start": "2276400",
    "end": "2282099"
  },
  {
    "text": "something you can click on all that kind of stuff",
    "start": "2282099",
    "end": "2286680"
  },
  {
    "text": "um so uh did you have any other questions I don't know if I quite answered you",
    "start": "2290140",
    "end": "2297240"
  },
  {
    "text": "no no it's it's totally fine and probably it's already in more details",
    "start": "2297240",
    "end": "2303339"
  },
  {
    "text": "that that other people are gonna be curious about but I'm happy to talk yeah",
    "start": "2303339",
    "end": "2309220"
  },
  {
    "text": "I kind of have like the shared model um that kind of keeps this is all the",
    "start": "2309220",
    "end": "2314380"
  },
  {
    "text": "state that I really have to keep um and then I kind of have two different I call them intent files they're kind of",
    "start": "2314380",
    "end": "2321760"
  },
  {
    "text": "the things that give me actions on top of",
    "start": "2321760",
    "end": "2326980"
  },
  {
    "text": "um the model and uh more or less",
    "start": "2326980",
    "end": "2333579"
  },
  {
    "text": "uh the kinds of things that I had to sort of build on top of them is",
    "start": "2333579",
    "end": "2339280"
  },
  {
    "text": "uh I kind of have to manage notification of events notifications of the end of",
    "start": "2339280",
    "end": "2347380"
  },
  {
    "text": "um things happen so uh the current event didn't get canceled or it didn't",
    "start": "2347380",
    "end": "2352540"
  },
  {
    "text": "redirect and it was successful you'll be able to get these notification ins",
    "start": "2352540",
    "end": "2359040"
  },
  {
    "text": "and the ability to save those are kind of things that I had to build into this on top of",
    "start": "2359040",
    "end": "2368560"
  },
  {
    "text": "what the native navigation API would sort of give us",
    "start": "2368560",
    "end": "2374640"
  },
  {
    "text": "[Music] um and then I pretty much passed these three things into all of the other",
    "start": "2374740",
    "end": "2380260"
  },
  {
    "text": "functions uh so like saving saves the current events and the current",
    "start": "2380260",
    "end": "2386800"
  },
  {
    "text": "index into into storage you can technically set it up to go into local",
    "start": "2386800",
    "end": "2392560"
  },
  {
    "text": "storage or assess and storage since storage is generic in some sense",
    "start": "2392560",
    "end": "2400619"
  },
  {
    "text": "but yeah this is kind of where I keep track of things getting saved uh I'm gonna kind of gloss over",
    "start": "2401260",
    "end": "2408760"
  },
  {
    "text": "some of this stuff um but pushing",
    "start": "2408760",
    "end": "2413859"
  },
  {
    "text": "um there's some complications here I have this this is something that you would",
    "start": "2413859",
    "end": "2420099"
  },
  {
    "text": "never use in your own app I'm pretty sure it's hidden from you intentionally via the types",
    "start": "2420099",
    "end": "2425760"
  },
  {
    "text": "but I also sort of I don't think I have",
    "start": "2425760",
    "end": "2431500"
  },
  {
    "text": "I think I have it in here but I have some stuff to be able to",
    "start": "2431500",
    "end": "2436660"
  },
  {
    "text": "patch over the history API but I have like it's sort of a circular",
    "start": "2436660",
    "end": "2443560"
  },
  {
    "text": "reference as I if you I want to be able to allow if you negatively call",
    "start": "2443560",
    "end": "2449579"
  },
  {
    "text": "history.push State yourself I want to be notified of it",
    "start": "2449579",
    "end": "2454960"
  },
  {
    "text": "such that the navigation State can be in the correct place with history events",
    "start": "2454960",
    "end": "2461140"
  },
  {
    "text": "occur um and generally I want the opposite to be",
    "start": "2461140",
    "end": "2466900"
  },
  {
    "text": "true I want to be able to allow the navigation API to push the",
    "start": "2466900",
    "end": "2473440"
  },
  {
    "text": "history API and so I kind of have some code in here to be able to detect",
    "start": "2473440",
    "end": "2479560"
  },
  {
    "text": "uh if I'm calling this function from within the navigation API such that I",
    "start": "2479560",
    "end": "2486460"
  },
  {
    "text": "don't send double events so there's some this is probably",
    "start": "2486460",
    "end": "2493359"
  },
  {
    "text": "yeah so far but",
    "start": "2493359",
    "end": "2498400"
  },
  {
    "text": "it basically allows me to have the be bi-directional by default but",
    "start": "2498400",
    "end": "2504040"
  },
  {
    "text": "uh sort of not get double events coming out of the navigation side of things",
    "start": "2504040",
    "end": "2509500"
  },
  {
    "text": "when it decides to push events or I guess it could even be circular in",
    "start": "2509500",
    "end": "2514599"
  },
  {
    "text": "some sense um",
    "start": "2514599",
    "end": "2520440"
  },
  {
    "text": "so any other questions here I think I kind of went over the majority of it",
    "start": "2520440",
    "end": "2527619"
  },
  {
    "text": "uh I'm I'm good to go so we were yeah we",
    "start": "2527619",
    "end": "2534520"
  },
  {
    "text": "were finishing up the router so that's what makes I just kind of Nest this in here so that you can you don't have to",
    "start": "2534520",
    "end": "2541480"
  },
  {
    "start": "2535000",
    "end": "2837000"
  },
  {
    "text": "always reach for the navigation I'm kind of trying to make the router more of the user facing",
    "start": "2541480",
    "end": "2547780"
  },
  {
    "text": "uh kind of service that you would utilize so you'll have access to navigating and everything else from",
    "start": "2547780",
    "end": "2553300"
  },
  {
    "text": "within the router but this is actually because the navigation API does so much",
    "start": "2553300",
    "end": "2560920"
  },
  {
    "text": "this is the implementation of the router on top of",
    "start": "2560920",
    "end": "2566440"
  },
  {
    "text": "um on top of it so really",
    "start": "2566440",
    "end": "2571079"
  },
  {
    "text": "he's just blogging together using whatever the current entry is I",
    "start": "2571599",
    "end": "2578140"
  },
  {
    "text": "get the URL the URL is always a full URL object in the navigation API so in my",
    "start": "2578140",
    "end": "2584140"
  },
  {
    "text": "case I only care about what the path is which also includes the hash and the and",
    "start": "2584140",
    "end": "2589960"
  },
  {
    "text": "the query params and then that gets passed down I kind of",
    "start": "2589960",
    "end": "2596319"
  },
  {
    "text": "hinted before you have this filtered map that just kind of pushes the route in there",
    "start": "2596319",
    "end": "2602619"
  },
  {
    "text": "um which is what generates of these correct on on the other end and then",
    "start": "2602619",
    "end": "2609720"
  },
  {
    "text": "this really just calls itself and as I mentioned it's really just concatenates two routes and",
    "start": "2609720",
    "end": "2616660"
  },
  {
    "text": "assets the parent oops that's really it",
    "start": "2616660",
    "end": "2622440"
  },
  {
    "text": "um and then every uh at least the way I have it right now",
    "start": "2623200",
    "end": "2628720"
  },
  {
    "text": "um navigation will get like the base URL so if you set um a base element with an href in your",
    "start": "2628720",
    "end": "2636520"
  },
  {
    "text": "HTML it goes ahead and tries to grab it uh when you have the setup for the Dom",
    "start": "2636520",
    "end": "2643440"
  },
  {
    "text": "if you use the memory implementation you have to provide it yourself if you if you need it for any reason",
    "start": "2643440",
    "end": "2650020"
  },
  {
    "text": "but it'll go ahead and try to grab whatever the base ref is to start to create the initial router",
    "start": "2650020",
    "end": "2659280"
  },
  {
    "text": "there are some little helpers here for creating a",
    "start": "2661980",
    "end": "2668619"
  },
  {
    "text": "creating layers and things any memory router or",
    "start": "2668619",
    "end": "2674578"
  },
  {
    "text": "um so I actually I guess there's one more",
    "start": "2674859",
    "end": "2680140"
  },
  {
    "text": "thing in here worth talking about there's some other smaller things there's I have",
    "start": "2680140",
    "end": "2688240"
  },
  {
    "text": "these types are a little scary because has a ton of generics something that I'm starting to notice is like an",
    "start": "2688240",
    "end": "2695619"
  },
  {
    "text": "issue when I start to get to these higher level UI patterns it's like I support like in this case I I support",
    "start": "2695619",
    "end": "2704800"
  },
  {
    "text": "uh the value it needs to be some type of string but it could be an effect of a string it could be a stream of a string",
    "start": "2704800",
    "end": "2712540"
  },
  {
    "text": "or any of these different sorts of things um so my Ur library has this type called",
    "start": "2712540",
    "end": "2717819"
  },
  {
    "text": "placeholder that kind of represents all these different things that the UI",
    "start": "2717819",
    "end": "2723579"
  },
  {
    "text": "library that we'll get to support King yes this is this is the",
    "start": "2723579",
    "end": "2728740"
  },
  {
    "text": "very same naming that we use in our universe",
    "start": "2728740",
    "end": "2733800"
  },
  {
    "text": "of the HTML package and and comes from um I guess what was it micro HTML yeah I",
    "start": "2733800",
    "end": "2741579"
  },
  {
    "text": "actually like 100 stole this name from y'all I changed I changed it nice I think years the one",
    "start": "2741579",
    "end": "2750760"
  },
  {
    "text": "in effect HTML only supports the r parameter um and",
    "start": "2750760",
    "end": "2757180"
  },
  {
    "text": "but I mean that that to be honest was hacked from like",
    "start": "2757180",
    "end": "2764140"
  },
  {
    "text": "we sort of did the kind of an initial hackathon with not",
    "start": "2764140",
    "end": "2769599"
  },
  {
    "text": "really a hackathon but we focused on it for uh with vessel for for a few weeks",
    "start": "2769599",
    "end": "2776859"
  },
  {
    "text": "because we were really curious about which I guess it's something we will we look later uh how much can we stretch",
    "start": "2776859",
    "end": "2784839"
  },
  {
    "text": "template literals and we actually found out that you can get very very nice apis out of",
    "start": "2784839",
    "end": "2792220"
  },
  {
    "text": "it and and I was very impressed but but then we had to make 1.0 of effects which",
    "start": "2792220",
    "end": "2798040"
  },
  {
    "text": "which is now close and and it we didn't really have the time to to also explore",
    "start": "2798040",
    "end": "2803800"
  },
  {
    "text": "the boundaries or of a front-end framework that starts from scratch",
    "start": "2803800",
    "end": "2809380"
  },
  {
    "text": "which is the reason why I'm actually extremely excited to see where where these leads because you clearly have to",
    "start": "2809380",
    "end": "2814960"
  },
  {
    "text": "spend a lot of time on this way more than than we have probably more time than I should",
    "start": "2814960",
    "end": "2821260"
  },
  {
    "text": "but it's been a it's been a nice ride",
    "start": "2821260",
    "end": "2827859"
  },
  {
    "text": "but uh you've mentioned uh an app at work yeah",
    "start": "2827859",
    "end": "2833319"
  },
  {
    "text": "I actually use these already that's that's interesting I can uh this is not the right one",
    "start": "2833319",
    "end": "2841960"
  },
  {
    "start": "2837000",
    "end": "3059000"
  },
  {
    "text": "see all these different things I used to test um so we just started setting up",
    "start": "2841960",
    "end": "2849280"
  },
  {
    "text": "actually maybe I'll show the QA version because I have more things",
    "start": "2849280",
    "end": "2854520"
  },
  {
    "text": "um but yeah this app is entirely built with this",
    "start": "2856720",
    "end": "2864420"
  },
  {
    "text": "loading screen so we're starting to uh I have a support level permissions so",
    "start": "2868599",
    "end": "2876460"
  },
  {
    "text": "the DUI here is slightly different for people with different level permissions",
    "start": "2876460",
    "end": "2882220"
  },
  {
    "text": "um but for our internal can this be can this be shown or should",
    "start": "2882220",
    "end": "2888760"
  },
  {
    "text": "I think it's fine to show there's no industry Secrets or anything here but uh",
    "start": "2888760",
    "end": "2894160"
  },
  {
    "text": "it is password protected and no one will be able to get into it",
    "start": "2894160",
    "end": "2900180"
  },
  {
    "text": "unless they start paying us and own a restaurant",
    "start": "2900300",
    "end": "2905280"
  },
  {
    "text": "um but for like internal users we just started building out search and So currently the only way our search works",
    "start": "2906339",
    "end": "2914800"
  },
  {
    "text": "is uh through our store goods and this is because",
    "start": "2914800",
    "end": "2920920"
  },
  {
    "text": "we're slowly porting an old internal tool and I don't have any points for having a real search yet or anything but",
    "start": "2920920",
    "end": "2928000"
  },
  {
    "text": "we do have this starting to build out some of the UI but uh",
    "start": "2928000",
    "end": "2935040"
  },
  {
    "text": "but I've seen that as soon as you type that in the res the results so you can get in",
    "start": "2936160",
    "end": "2941980"
  },
  {
    "text": "um once you're into like a particular store location you can add",
    "start": "2941980",
    "end": "2949119"
  },
  {
    "text": "remove admins you can edit store information",
    "start": "2949119",
    "end": "2955000"
  },
  {
    "text": "for different sorts of little things um and then these are placeholders",
    "start": "2955000",
    "end": "2961420"
  },
  {
    "text": "throughout the moment I hate them to death my designer doesn't want them there but product people wanted them to",
    "start": "2961420",
    "end": "2967420"
  },
  {
    "text": "be here um I don't know why we have pages that do nothing",
    "start": "2967420",
    "end": "2973960"
  },
  {
    "text": "um what else this guy I don't know if I have anything",
    "start": "2973960",
    "end": "2979960"
  },
  {
    "text": "I'm ready to share here [Music]",
    "start": "2979960",
    "end": "2986319"
  },
  {
    "text": "but it's impressive yeah or talking about before is it uses a",
    "start": "2986319",
    "end": "2994240"
  },
  {
    "text": "similar pattern to be able to go forward back and all that kind of stuff",
    "start": "2994240",
    "end": "2999339"
  },
  {
    "text": "uh but yeah and this is all written with this effect and typed project",
    "start": "2999339",
    "end": "3008420"
  },
  {
    "text": "but you can add all that kind of stuff you get a little error handling stuff",
    "start": "3009060",
    "end": "3015300"
  },
  {
    "text": "I'm not yet using uh not yet using effect schema we still",
    "start": "3015300",
    "end": "3021599"
  },
  {
    "text": "have an internal decoder library at my at my job that I maintain the",
    "start": "3021599",
    "end": "3027780"
  },
  {
    "text": "so pervasive at this point that I don't think we're ever getting rid of it",
    "start": "3027780",
    "end": "3033119"
  },
  {
    "text": "but yeah a number of different things going on",
    "start": "3033119",
    "end": "3038700"
  },
  {
    "text": "but I want poor people with restaurant back-end stuff using all of these things",
    "start": "3038700",
    "end": "3047000"
  },
  {
    "text": "so I was gloss I was kind of starting to gloss over",
    "start": "3050579",
    "end": "3055920"
  },
  {
    "text": "uh you have like these are sort of components for creating links I didn't",
    "start": "3055920",
    "end": "3061140"
  },
  {
    "start": "3059000",
    "end": "3085000"
  },
  {
    "text": "want to be too specific so it kind of uses like a render prop sort of thing I think I had in my",
    "start": "3061140",
    "end": "3068579"
  },
  {
    "text": "example I have I have like a list item link uh you",
    "start": "3068579",
    "end": "3073920"
  },
  {
    "text": "provided some parameters and it kind of exposes the an API back to you",
    "start": "3073920",
    "end": "3079380"
  },
  {
    "text": "I guess this is sort of the first one of the first times we could talk about",
    "start": "3079380",
    "end": "3085079"
  },
  {
    "start": "3085000",
    "end": "4825000"
  },
  {
    "text": "the HTML templating so as you mentioned before I'm using the",
    "start": "3085079",
    "end": "3091559"
  },
  {
    "text": "tagged template literal types the reason for that I'm sure the same",
    "start": "3091559",
    "end": "3097380"
  },
  {
    "text": "reason you guys started playing with it uh it's because they don't use like any",
    "start": "3097380",
    "end": "3104760"
  },
  {
    "text": "sort of magic jsx namespace for resolving the types",
    "start": "3104760",
    "end": "3110280"
  },
  {
    "text": "and so this function although it's very large at the moment",
    "start": "3110280",
    "end": "3115619"
  },
  {
    "text": "and some of it's computed it really knows what resources are being utilized",
    "start": "3115619",
    "end": "3121160"
  },
  {
    "text": "inside of the template and it's able to forgot propagate those up as well as the",
    "start": "3121160",
    "end": "3127079"
  },
  {
    "text": "errors that are associated with them um and in my case the HTML tag actually",
    "start": "3127079",
    "end": "3135000"
  },
  {
    "text": "returns an fx or a push-based stream",
    "start": "3135000",
    "end": "3140359"
  },
  {
    "text": "and so that in reality for",
    "start": "3140359",
    "end": "3145859"
  },
  {
    "text": "when you're rendering in the Dom there will really only ever be a single event because it's going to construct this",
    "start": "3145859",
    "end": "3154440"
  },
  {
    "text": "Li this list item exactly one time and then any values that are provided to",
    "start": "3154440",
    "end": "3162480"
  },
  {
    "text": "it are that are interpolated that change over time are mapped one to one to the value in",
    "start": "3162480",
    "end": "3169800"
  },
  {
    "text": "which um in which it uses so",
    "start": "3169800",
    "end": "3176099"
  },
  {
    "text": "um yeah in this case this URL could potentially change depending on what to Value gave it so if",
    "start": "3176099",
    "end": "3183900"
  },
  {
    "text": "you gave the value to as a stream of",
    "start": "3183900",
    "end": "3190079"
  },
  {
    "text": "um hrefs over time this href here Will",
    "start": "3190079",
    "end": "3195420"
  },
  {
    "text": "also change over time without re-rendering things however in the server environment it",
    "start": "3195420",
    "end": "3203400"
  },
  {
    "text": "will push out multiple events so it will it'll first start by screaming out the the list item and the start of this",
    "start": "3203400",
    "end": "3212400"
  },
  {
    "text": "a tag it'll wait for the URL to resolve if it's not synchronous it'll stream out",
    "start": "3212400",
    "end": "3218280"
  },
  {
    "text": "this part uh it'll skip this part",
    "start": "3218280",
    "end": "3224480"
  },
  {
    "text": "wait that's it that's intellectual streaming from that I do support streaming uh the",
    "start": "3224640",
    "end": "3233040"
  },
  {
    "text": "HTML out so uh oh wow",
    "start": "3233040",
    "end": "3239339"
  },
  {
    "text": "so if you this is some tests that I have for the",
    "start": "3239339",
    "end": "3244920"
  },
  {
    "text": "HTML stuff but you give it a nice simple template um",
    "start": "3244920",
    "end": "3250800"
  },
  {
    "text": "it'll push this stuff out I have a function here below",
    "start": "3250800",
    "end": "3256440"
  },
  {
    "text": "hidden away in this test HTML chunks so each one of the templates yeah is",
    "start": "3256440",
    "end": "3262980"
  },
  {
    "text": "generated with a unique hash so the hash is based on the template strings of the",
    "start": "3262980",
    "end": "3268319"
  },
  {
    "text": "template so they're deterministic and it will set this data type",
    "start": "3268319",
    "end": "3274740"
  },
  {
    "text": "with whatever the value of the hashes I have it set up in the test that it's just it replaces it with dot dot dot so",
    "start": "3274740",
    "end": "3280500"
  },
  {
    "text": "that I don't have to determine what the hash will be ahead of time",
    "start": "3280500",
    "end": "3286760"
  },
  {
    "text": "um but yeah it'll create again this is a test field in in real",
    "start": "3287220",
    "end": "3294180"
  },
  {
    "text": "rendering this would be exactly the uh um and that's so that when I go to do",
    "start": "3294180",
    "end": "3300780"
  },
  {
    "text": "hydration I can utilize the Dom to figure out where things are",
    "start": "3300780",
    "end": "3306660"
  },
  {
    "text": "that helps me I'm going to gloss over that a little bit more but when you have things that are",
    "start": "3306660",
    "end": "3312059"
  },
  {
    "text": "interpolated it'll break things up so it's smart enough to know I can stream this out",
    "start": "3312059",
    "end": "3317880"
  },
  {
    "text": "immediately um and then as soon as the text is available it's synchronous in this case",
    "start": "3317880",
    "end": "3324240"
  },
  {
    "text": "so it'll be very very quick it'll stream out the text that I just put in",
    "start": "3324240",
    "end": "3330380"
  },
  {
    "text": "this is a comment for text so I I found that in order for me to be",
    "start": "3330380",
    "end": "3337440"
  },
  {
    "text": "able to ensure that this ends up being a singular text",
    "start": "3337440",
    "end": "3343020"
  },
  {
    "text": "node so like if you had you know some text here",
    "start": "3343020",
    "end": "3351319"
  },
  {
    "text": "yeah you gotta tokenize them somehow so I need to make sure you get here",
    "start": "3353160",
    "end": "3358740"
  },
  {
    "text": "and edit this directly so I break them up with these little text",
    "start": "3358740",
    "end": "3365240"
  },
  {
    "text": "HTML attributes and then I also have these other sort of",
    "start": "3365240",
    "end": "3372180"
  },
  {
    "text": "things um I think I saw from micro HTML",
    "start": "3372180",
    "end": "3379079"
  },
  {
    "text": "they're they're indexed these sort of holes they helped me uh to be able to",
    "start": "3379079",
    "end": "3384420"
  },
  {
    "text": "figure out um in the template which values go where",
    "start": "3384420",
    "end": "3390900"
  },
  {
    "text": "they help me find those things later on and then",
    "start": "3390900",
    "end": "3396780"
  },
  {
    "text": "okay and yeah just one question",
    "start": "3396780",
    "end": "3403980"
  },
  {
    "text": "[Music] using these kind of way of putting",
    "start": "3403980",
    "end": "3410040"
  },
  {
    "text": "directly the attributes inside inside the Dom we are not really using any any like",
    "start": "3410040",
    "end": "3417000"
  },
  {
    "text": "stringify Json to preserve the data to rehydrate on on the client that's",
    "start": "3417000",
    "end": "3423119"
  },
  {
    "text": "figured out there's nothing else serialized besides the HTML itself",
    "start": "3423119",
    "end": "3429599"
  },
  {
    "text": "and so it's kind of My Hope eventually I'm nowhere near there um but I I'm very inspired by like the",
    "start": "3429599",
    "end": "3437040"
  },
  {
    "text": "the quick front-end framework with resumability and things so I'm hoping to get somewhere closer to",
    "start": "3437040",
    "end": "3443160"
  },
  {
    "text": "that in the future but for now I have um just standard hydration",
    "start": "3443160",
    "end": "3450180"
  },
  {
    "text": "for things on the client side but uh you know as we get further down",
    "start": "3450180",
    "end": "3457859"
  },
  {
    "text": "um this is something that took me a while to set up but the ability to have multiple interpolations and a single",
    "start": "3457859",
    "end": "3464520"
  },
  {
    "text": "attribute is something that micro HTML doesn't support but I ended up adding some",
    "start": "3464520",
    "end": "3470760"
  },
  {
    "text": "support for um do we have anything more interesting",
    "start": "3470760",
    "end": "3478940"
  },
  {
    "text": "uh so yeah you can you can sort of um pass in streams and different things",
    "start": "3479280",
    "end": "3486480"
  },
  {
    "text": "along the way uh",
    "start": "3486480",
    "end": "3490819"
  },
  {
    "text": "yeah these things are more interesting so I also have um support for some directives",
    "start": "3491760",
    "end": "3499740"
  },
  {
    "text": "so there are different types of directives for the different types of attributes",
    "start": "3499740",
    "end": "3504780"
  },
  {
    "text": "and things that you have the main one they all give you kind of access to some",
    "start": "3504780",
    "end": "3511380"
  },
  {
    "text": "sort of part you can create a generic directive and kind of switch over the tags of Parts if",
    "start": "3511380",
    "end": "3518819"
  },
  {
    "text": "you want to create something more interesting but I think in all my examples I use specific ones where they",
    "start": "3518819",
    "end": "3525720"
  },
  {
    "text": "go um but they they work in both the server and the client side",
    "start": "3525720",
    "end": "3532220"
  },
  {
    "text": "but they allow you to write some effects that end up being able to manipulate",
    "start": "3532980",
    "end": "3539520"
  },
  {
    "text": "uh any part of the Dom or htmlcc fit",
    "start": "3539520",
    "end": "3545760"
  },
  {
    "text": "um have them for attributes for just kind of this question",
    "start": "3545760",
    "end": "3551180"
  },
  {
    "text": "Syntax for Boolean attributes that I I think I lifted from lit HTML",
    "start": "3551180",
    "end": "3559160"
  },
  {
    "text": "um that would allow you to set true or false on these different things",
    "start": "3559500",
    "end": "3566180"
  },
  {
    "text": "either I do or removed it um so when I when I set it to true you end up seeing",
    "start": "3567299",
    "end": "3572579"
  },
  {
    "text": "the hidden here you set it to false you end up seeing it not there at all",
    "start": "3572579",
    "end": "3579140"
  },
  {
    "text": "um and then uh I have like this one for class names okay",
    "start": "3580079",
    "end": "3586200"
  },
  {
    "text": "I don't think I have any examples to show it the only reason I have this set up any",
    "start": "3586200",
    "end": "3593220"
  },
  {
    "text": "different is to return to effect s yeah",
    "start": "3593220",
    "end": "3599339"
  },
  {
    "text": "you have some additional abilities to like it's kind of like working with",
    "start": "3599339",
    "end": "3604440"
  },
  {
    "text": "class lists you can add move",
    "start": "3604440",
    "end": "3609960"
  },
  {
    "text": "and toggle class names as well it kind of just gives you some extra apis",
    "start": "3609960",
    "end": "3616640"
  },
  {
    "text": "and these return effects too so they're not actually doing anything at least to illustrate some of them have",
    "start": "3620520",
    "end": "3627540"
  },
  {
    "text": "little extra apis around them so all of those are effects for you you",
    "start": "3627540",
    "end": "3634140"
  },
  {
    "text": "could just write a generator yield them add remove ad remove and so on and so",
    "start": "3634140",
    "end": "3639180"
  },
  {
    "text": "I've never dated this to the latest updates from effect just yet",
    "start": "3639180",
    "end": "3646099"
  },
  {
    "text": "yeah sorry about this but we've been breaking a little bit it ended up being okay I know my tests all pass because",
    "start": "3646740",
    "end": "3654059"
  },
  {
    "text": "event directives get uh ignored well events in general get",
    "start": "3654059",
    "end": "3659460"
  },
  {
    "text": "ignored on the server they're not serialized in any ways they get attached later on in the Dom",
    "start": "3659460",
    "end": "3667880"
  },
  {
    "text": "uh there's also you know abilities to get the current reference so we'll be able",
    "start": "3667980",
    "end": "3675540"
  },
  {
    "text": "to get a reference to this input element later on",
    "start": "3675540",
    "end": "3680819"
  },
  {
    "text": "um you can even create sparse interactives if you're feeling crazy for some reason",
    "start": "3680819",
    "end": "3687480"
  },
  {
    "text": "um yeah this looks terrible but it's possible I just wanted to prove it to be",
    "start": "3687480",
    "end": "3693000"
  },
  {
    "text": "positive um and you can do more interesting things I",
    "start": "3693000",
    "end": "3700020"
  },
  {
    "text": "have this really basic counter component stashed for some tests so you'll see it",
    "start": "3700020",
    "end": "3706380"
  },
  {
    "text": "even though it hasn't been some things that creates the correct HTML once it",
    "start": "3706380",
    "end": "3712619"
  },
  {
    "text": "screams out but it is it will try to send out",
    "start": "3712619",
    "end": "3720420"
  },
  {
    "text": "any information that's ready as soon as possible and it will wait it kind of It",
    "start": "3720420",
    "end": "3726299"
  },
  {
    "text": "kind of does some buffering uh it'll end up running everything in parallel and then",
    "start": "3726299",
    "end": "3734339"
  },
  {
    "text": "ensure that there's ordering and it deals with uh you know nest and",
    "start": "3734339",
    "end": "3740760"
  },
  {
    "text": "templates so if you have a template side of the template it'll wait for that template to finish streaming all of its",
    "start": "3740760",
    "end": "3746460"
  },
  {
    "text": "parts before yeah you go unwind everything",
    "start": "3746460",
    "end": "3752460"
  },
  {
    "text": "merge buffer concurrently that I use I'm totally open to better names but",
    "start": "3752460",
    "end": "3758160"
  },
  {
    "text": "that's that's what I came up with uh",
    "start": "3758160",
    "end": "3763818"
  },
  {
    "text": "I'm sure ordering but make sure it runs as fast as soon as possible",
    "start": "3764599",
    "end": "3771020"
  },
  {
    "text": "um and then I have uh a counter of counters for no good reason",
    "start": "3771540",
    "end": "3779280"
  },
  {
    "text": "um it's surprisingly good at testing a lot",
    "start": "3779280",
    "end": "3785099"
  },
  {
    "text": "of these things like you know has just the right amount of dynamic Behavior that'll test a lot of stuff",
    "start": "3785099",
    "end": "3792200"
  },
  {
    "text": "um but I have I guess this is a decent thing there's",
    "start": "3792240",
    "end": "3797339"
  },
  {
    "text": "um a helper in the HTML Library Mini",
    "start": "3797339",
    "end": "3802500"
  },
  {
    "text": "I yeah one question",
    "start": "3802500",
    "end": "3807559"
  },
  {
    "text": "I see an fx dot gen great question so",
    "start": "3807599",
    "end": "3814740"
  },
  {
    "text": "good question okay you understood the questions before I lost there is no ow it's a bit of a lie so it allows you to",
    "start": "3815640",
    "end": "3823140"
  },
  {
    "text": "run some effects up front and then return in effects",
    "start": "3823140",
    "end": "3828780"
  },
  {
    "text": "so that's how I kind of get like I have like a setup thing for my component and then it returns a template and so",
    "start": "3828780",
    "end": "3837480"
  },
  {
    "text": "like isn't isn't it multi-shot uh so this will actually only ever run once so you're",
    "start": "3837480",
    "end": "3845099"
  },
  {
    "text": "uh let's go to the that's good",
    "start": "3845099",
    "end": "3851160"
  },
  {
    "text": "so it calls effect.gen with the f",
    "start": "3851160",
    "end": "3857220"
  },
  {
    "text": "um because it returns a generator to an effects",
    "start": "3857220",
    "end": "3864119"
  },
  {
    "text": "rather so you're not yielding effects you're yielding",
    "start": "3864119",
    "end": "3870000"
  },
  {
    "text": "you that's hard to say",
    "start": "3870000",
    "end": "3874339"
  },
  {
    "text": "we're we're not using device producers yes",
    "start": "3875700",
    "end": "3881880"
  },
  {
    "text": "stuff and then you return the Stream and so from effects effects",
    "start": "3881880",
    "end": "3889260"
  },
  {
    "text": "uh it runs some effect there's a failure it pushes it into the sink",
    "start": "3889260",
    "end": "3895559"
  },
  {
    "text": "and then on success you'll have a and effects which I run and push into",
    "start": "3895559",
    "end": "3901559"
  },
  {
    "text": "the same into the same sink and so that kind of allows me to do use",
    "start": "3901559",
    "end": "3907619"
  },
  {
    "text": "the generators which I really like um for the setup so I create like new",
    "start": "3907619",
    "end": "3913859"
  },
  {
    "text": "references that I need uh ask for any resources that I might want to utilize",
    "start": "3913859",
    "end": "3919680"
  },
  {
    "text": "directly and that doesn't because then then they moved from the",
    "start": "3919680",
    "end": "3926040"
  },
  {
    "text": "military part is actually on the return value once you multiplexed everything then that theme will actually so you get",
    "start": "3926040",
    "end": "3933839"
  },
  {
    "text": "sort of like a component life cycle you get like the startup that you control and then",
    "start": "3933839",
    "end": "3940020"
  },
  {
    "text": "uh the rest is set up over time",
    "start": "3940020",
    "end": "3945180"
  },
  {
    "text": "but that's a good question which I guess it it backs the second",
    "start": "3945180",
    "end": "3950520"
  },
  {
    "text": "question which is the setup never runs flies so if you have any conditional or",
    "start": "3950520",
    "end": "3956040"
  },
  {
    "text": "anything else it's gonna be part of the template not part this is correct it",
    "start": "3956040",
    "end": "3961859"
  },
  {
    "text": "pushes that further down which is probably different from a lot",
    "start": "3961859",
    "end": "3968520"
  },
  {
    "text": "of things and because it's for sure different from real but",
    "start": "3968520",
    "end": "3974640"
  },
  {
    "text": "I've seen other other Frameworks taking taking a similar approach I have to say I I kind of agree because",
    "start": "3974640",
    "end": "3982200"
  },
  {
    "text": "you you separate the the logic from the wiring up",
    "start": "3982200",
    "end": "3987359"
  },
  {
    "text": "and it makes the State Management way more way more clean at least that's",
    "start": "3987359",
    "end": "3995099"
  },
  {
    "text": "that's how I would do it as a as a back-end developer or a way that I",
    "start": "3995099",
    "end": "4000319"
  },
  {
    "text": "understand it understand it more it's kind of like what was it solid that that takes a",
    "start": "4000319",
    "end": "4007760"
  },
  {
    "text": "similar approach so I might be wrong here yeah they end up they use uh I",
    "start": "4007760",
    "end": "4013880"
  },
  {
    "text": "think it's a babble transform or some sort of Transformer compiler of sorts uh to take jsx and their signals",
    "start": "4013880",
    "end": "4021920"
  },
  {
    "text": "and be able to update the Dom directly so yeah there's definitely some some",
    "start": "4021920",
    "end": "4027980"
  },
  {
    "text": "similarities in that in the way that those work uh the main differences being we have all",
    "start": "4027980",
    "end": "4035780"
  },
  {
    "text": "of effect available to us so we have typed errors and uh the typed context as well",
    "start": "4035780",
    "end": "4044500"
  },
  {
    "text": "and no compiler necessary no compiler necessary yet which she's a",
    "start": "4045740",
    "end": "4053720"
  },
  {
    "text": "big win in my uh I guess also while we're just looking at this so there's kind of",
    "start": "4053720",
    "end": "4059359"
  },
  {
    "text": "uh for event handlers you can provide an effect directly so in this case this is uh you know an",
    "start": "4059359",
    "end": "4066260"
  },
  {
    "text": "effect that will update this state increment or decrement it",
    "start": "4066260",
    "end": "4071359"
  },
  {
    "text": "and then there's also another API event handler",
    "start": "4071359",
    "end": "4077059"
  },
  {
    "text": "which will allow you to get access to the event and you can wait again yeah different",
    "start": "4077059",
    "end": "4084380"
  },
  {
    "text": "event listener options and such",
    "start": "4084380",
    "end": "4089500"
  },
  {
    "text": "but I I honestly I find myself using the shorthand of just providing an effect there all the time",
    "start": "4090200",
    "end": "4098620"
  },
  {
    "text": "only sometimes I have I have those events with I guess when when you need access to the",
    "start": "4099679",
    "end": "4106520"
  },
  {
    "text": "element like an unchain",
    "start": "4106520",
    "end": "4111699"
  },
  {
    "text": "element that kind of stuff um",
    "start": "4111699",
    "end": "4117699"
  },
  {
    "text": "yeah I was starting to get I have like this mini helper",
    "start": "4118359",
    "end": "4123679"
  },
  {
    "text": "um and this is kind of like there isn't any like built-in support for keyed values",
    "start": "4123679",
    "end": "4129500"
  },
  {
    "text": "uh so it kind of gets pushed up onto the stream abstraction is that the stream",
    "start": "4129500",
    "end": "4137179"
  },
  {
    "text": "abstraction needs to keep track of uh life cycles of components and things of",
    "start": "4137179",
    "end": "4142338"
  },
  {
    "text": "that nature because for as long as that stream is alive that's like a single",
    "start": "4142339",
    "end": "4147920"
  },
  {
    "text": "component instance we don't want to like be tearing it down and then spitting it",
    "start": "4147920",
    "end": "4152960"
  },
  {
    "text": "back up all the time this is really contrived because it's",
    "start": "4152960",
    "end": "4158238"
  },
  {
    "text": "only using indexes based on account um but here you provide some sort of stream",
    "start": "4158239",
    "end": "4165318"
  },
  {
    "text": "of uh an array of some value it can be any",
    "start": "4165319",
    "end": "4170540"
  },
  {
    "text": "any value a um and then for each one of those values",
    "start": "4170540",
    "end": "4177859"
  },
  {
    "text": "you'll actually get in um a ref subject",
    "start": "4177859",
    "end": "4182960"
  },
  {
    "text": "of those values so this is where I subject I kind of take a stream of",
    "start": "4182960",
    "end": "4188140"
  },
  {
    "text": "arrays create a ref subject for every",
    "start": "4188140",
    "end": "4193160"
  },
  {
    "text": "uh instance of those of those values and when they just those values just change",
    "start": "4193160",
    "end": "4199520"
  },
  {
    "text": "it gets pushed in here so that uh",
    "start": "4199520",
    "end": "4204280"
  },
  {
    "text": "and this is what for example allows you to to do a single change instead of replacing the pool",
    "start": "4204560",
    "end": "4211900"
  },
  {
    "text": "and it also kind of has what I found is uh like in that table that I have",
    "start": "4211900",
    "end": "4218600"
  },
  {
    "text": "um in that little app at work it also kind of stands in as a place where I can",
    "start": "4218600",
    "end": "4224659"
  },
  {
    "text": "put changes that are local first so I can like kind of mutate that",
    "start": "4224659",
    "end": "4231520"
  },
  {
    "text": "without affecting the outside world and then at some Future Point like when uh",
    "start": "4231520",
    "end": "4237140"
  },
  {
    "text": "like the input isn't blurred I actually submit it uh up through a service to",
    "start": "4237140",
    "end": "4243560"
  },
  {
    "text": "actually change the the kind of global state if you will so kind of I kind of",
    "start": "4243560",
    "end": "4248719"
  },
  {
    "text": "abuse it a little bit as like a local state thing so I don't have to instantiate yet another rough subject",
    "start": "4248719",
    "end": "4254600"
  },
  {
    "text": "for that and try to keep those two things in sync",
    "start": "4254600",
    "end": "4259900"
  },
  {
    "text": "um and then the third function is how you get some sort of ID so if you have something more interesting you know you",
    "start": "4261140",
    "end": "4267560"
  },
  {
    "text": "might do ID or key or",
    "start": "4267560",
    "end": "4272500"
  },
  {
    "text": "I guess that that needs to serialized to something that you can push on a string uh it really just needs to be something",
    "start": "4273679",
    "end": "4281239"
  },
  {
    "text": "I can't remember what the hell I use can't remember if I use a hash map or a regular map",
    "start": "4281239",
    "end": "4286880"
  },
  {
    "text": "I think it's a regular like a standard es map at the moment so",
    "start": "4286880",
    "end": "4293980"
  },
  {
    "text": "something that compares by by value even even if it's receivables",
    "start": "4293980",
    "end": "4301659"
  },
  {
    "text": "um but yeah I don't think I have anything else right here in this",
    "start": "4301699",
    "end": "4307760"
  },
  {
    "text": "in this part of it I see one one test which is run runs",
    "start": "4307760",
    "end": "4315140"
  },
  {
    "text": "fast and I'm curious to ask how fast does it does this thing actually run I don't",
    "start": "4315140",
    "end": "4322159"
  },
  {
    "text": "even know yeah I I know you're crazy I don't think I've really spent a whole lot of time on",
    "start": "4322159",
    "end": "4328880"
  },
  {
    "text": "performance here uh I actually think some of my latest changes have made it a little bit worse than it was at one",
    "start": "4328880",
    "end": "4334940"
  },
  {
    "text": "point um yeah where are we equipment HTML package",
    "start": "4334940",
    "end": "4344320"
  },
  {
    "text": "let's see if it actually runs only that I've come to find that I don't know if",
    "start": "4345440",
    "end": "4350900"
  },
  {
    "text": "it's the NX or if it's feed test or what have you",
    "start": "4350900",
    "end": "4356060"
  },
  {
    "text": "um but yeah currently it takes to render this counter of counters to",
    "start": "4356060",
    "end": "4362780"
  },
  {
    "text": "HTML um so this this streams it out and then concatenates them all back into",
    "start": "4362780",
    "end": "4371140"
  },
  {
    "text": "um a singular string um it runs 100 times and I guess the",
    "start": "4371659",
    "end": "4377300"
  },
  {
    "text": "average render times takes nine milliseconds to create a counter of counters which",
    "start": "4377300",
    "end": "4384440"
  },
  {
    "text": "starts off with only having a single nested counter uh I think",
    "start": "4384440",
    "end": "4391400"
  },
  {
    "text": "there's definitely some cost to have a nested templates the way that it's doing",
    "start": "4391400",
    "end": "4397219"
  },
  {
    "text": "all the buffering and everything there's definitely some performance overhead",
    "start": "4397219",
    "end": "4402460"
  },
  {
    "text": "so I don't know if we consider this fast I haven't I haven't decided this is actually fast but that's what it's just",
    "start": "4403580",
    "end": "4410179"
  },
  {
    "text": "what I hope to have this thing capture I just wanted to know on average how quickly does this thing actually run",
    "start": "4410179",
    "end": "4416840"
  },
  {
    "text": "so I can I mean there are",
    "start": "4416840",
    "end": "4421940"
  },
  {
    "text": "there are folks that are heating for like 120 hertz something like that which",
    "start": "4421940",
    "end": "4429260"
  },
  {
    "text": "gives you like four milliseconds of available time for a for a frame draw",
    "start": "4429260",
    "end": "4438400"
  },
  {
    "text": "so this is fairly fast for for my understanding of 30 FPS 60 FPS",
    "start": "4439340",
    "end": "4447260"
  },
  {
    "text": "but probably to get to the point of actually but also this template isn't very isn't anything crazy so it will",
    "start": "4447260",
    "end": "4455420"
  },
  {
    "text": "slow down as you have larger and larger and larger there's just more work to be",
    "start": "4455420",
    "end": "4461000"
  },
  {
    "text": "done and I think there's probably a lot of room for optimization still I",
    "start": "4461000",
    "end": "4467080"
  },
  {
    "text": "but this is okay and this is first render yeah changing something then it's that's",
    "start": "4467360",
    "end": "4473239"
  },
  {
    "text": "cool it's not gonna re-render everything as soon as things start up so this is just for the HTML like on the server",
    "start": "4473239",
    "end": "4479420"
  },
  {
    "text": "side it would pump out all of this HTML in approximately 9.6 milliseconds",
    "start": "4479420",
    "end": "4486860"
  },
  {
    "text": "uh the hydration would kind of take over on the client there's definitely some boot up time there",
    "start": "4486860",
    "end": "4493699"
  },
  {
    "text": "um I haven't quite gotten into like really optimizing how that functions",
    "start": "4493699",
    "end": "4498739"
  },
  {
    "text": "just yet and part of that's because it's so opaque to me at the moment because it's all in the effect runtime",
    "start": "4498739",
    "end": "4506659"
  },
  {
    "text": "uh so I it's hard for me to figure out which parts of my code are taking a long",
    "start": "4506659",
    "end": "4512060"
  },
  {
    "text": "time and which aren't so I haven't quite gotten there and I think that's where the most expensive",
    "start": "4512060",
    "end": "4517760"
  },
  {
    "text": "part is it's like booting up on the client the first time",
    "start": "4517760",
    "end": "4523659"
  },
  {
    "text": "um but I don't know at least for a lot of the things that I've built like the app",
    "start": "4523820",
    "end": "4530600"
  },
  {
    "text": "that I had quickly demoed uh like I've I've tried",
    "start": "4530600",
    "end": "4536360"
  },
  {
    "text": "to optimize that you're going to make it to the sign in page first every single time",
    "start": "4536360",
    "end": "4541520"
  },
  {
    "text": "so as long as that's really really quick that feels good uh all everything that",
    "start": "4541520",
    "end": "4549020"
  },
  {
    "text": "comes subsequent to that is going to be really quick because I don't have to",
    "start": "4549020",
    "end": "4555380"
  },
  {
    "text": "do quite as much work to change templates or update parts of the Dawn it",
    "start": "4555380",
    "end": "4561560"
  },
  {
    "text": "all gets very localized yeah",
    "start": "4561560",
    "end": "4567980"
  },
  {
    "text": "I guess it's uh it's one of the advantages of using um this signal-like precise signal-like",
    "start": "4567980",
    "end": "4575540"
  },
  {
    "text": "design you really never get to to update the full thing you know precisely uh what",
    "start": "4575540",
    "end": "4581900"
  },
  {
    "text": "changed where and you just hit the single yeah single thing",
    "start": "4581900",
    "end": "4587659"
  },
  {
    "text": "the only exceptions whether it's like literally an o1 like this attribute this",
    "start": "4587659",
    "end": "4594140"
  },
  {
    "text": "node Etc is where it still maintains that o1",
    "start": "4594140",
    "end": "4599179"
  },
  {
    "text": "notation is when you have lists of things so like in this example",
    "start": "4599179",
    "end": "4604760"
  },
  {
    "text": "we end up with a list of counters nested and divs for no good reason but",
    "start": "4604760",
    "end": "4611960"
  },
  {
    "text": "um only in the case of having arrays of values and so this could even be",
    "start": "4611960",
    "end": "4617840"
  },
  {
    "text": "you know an array of Dom nodes I don't know I'm",
    "start": "4617840",
    "end": "4623719"
  },
  {
    "text": "just gonna do it real quick don't do this in real life",
    "start": "4623719",
    "end": "4629260"
  },
  {
    "text": "um and then for some reason if you had a stream of these things and they",
    "start": "4632719",
    "end": "4639260"
  },
  {
    "text": "they moved an order or anything of that nature that's the only time I have to do",
    "start": "4639260",
    "end": "4644300"
  },
  {
    "text": "diffing is when you have lists of values and it will try to do the best thing uh",
    "start": "4644300",
    "end": "4653480"
  },
  {
    "text": "again on the case where they're not where they're not keyed so where you don't",
    "start": "4655460",
    "end": "4661100"
  },
  {
    "text": "have a diagram that's the only time and they usually they do pop up but it",
    "start": "4661100",
    "end": "4668179"
  },
  {
    "text": "performs really well it does it directly Against The Dominoes uh",
    "start": "4668179",
    "end": "4675100"
  },
  {
    "text": "well considering that other Frameworks do uh do a full diff on the full not done but",
    "start": "4675500",
    "end": "4683000"
  },
  {
    "text": "but virtual obstruction of the Dom not doing the thing ninety percent of the crazies seems",
    "start": "4683000",
    "end": "4689719"
  },
  {
    "text": "seems a good way seems a good thing for performance",
    "start": "4689719",
    "end": "4694719"
  },
  {
    "text": "so yeah that's okay I don't know these were the tests that I have for uh server rendering I think",
    "start": "4695360",
    "end": "4702320"
  },
  {
    "text": "uh probably not worth a lot of looking at there are a lot of",
    "start": "4702320",
    "end": "4707960"
  },
  {
    "text": "the same tests just set up differently to deal with the Dom uh like almost identical",
    "start": "4707960",
    "end": "4717099"
  },
  {
    "text": "um I'm pretty much just checking that the Dom ends up looking the way that I expect it to",
    "start": "4717860",
    "end": "4723320"
  },
  {
    "text": "which usually means that you're whatever the template was um but again you can pass effects",
    "start": "4723320",
    "end": "4730520"
  },
  {
    "text": "anywhere that you want they'll resolve you can pass streams anywhere that you want they'll resolve",
    "start": "4730520",
    "end": "4737139"
  },
  {
    "text": "into here here again just just for the sake of the viewers anytime you've seen",
    "start": "4739219",
    "end": "4744560"
  },
  {
    "text": "an effect or a or a subject or an or an effects value it's gonna carry over",
    "start": "4744560",
    "end": "4751040"
  },
  {
    "text": "environment errors and so on and so forth It's Gonna bubble up so you could",
    "start": "4751040",
    "end": "4756199"
  },
  {
    "text": "do like type context in in react terms that you see explicit at any point of of",
    "start": "4756199",
    "end": "4764060"
  },
  {
    "text": "your app that you have to explicitly provide and not just the context but also errors so if your event handlers",
    "start": "4764060",
    "end": "4771580"
  },
  {
    "text": "providing have some sort of Errors they'll also be passed through and out",
    "start": "4771580",
    "end": "4777020"
  },
  {
    "text": "of your component for handling whether you wanna show a loading screen when certain kinds of Errors come up or",
    "start": "4777020",
    "end": "4784040"
  },
  {
    "text": "display some sort of fallback when those errors come up those are also fully typed",
    "start": "4784040",
    "end": "4790580"
  },
  {
    "text": "and never swallowed",
    "start": "4790580",
    "end": "4794020"
  },
  {
    "text": "that looks so I guess we're building up kind of",
    "start": "4797260",
    "end": "4803480"
  },
  {
    "text": "talked about the past stuff we talked about routers we started talking about HTML stuff",
    "start": "4803480",
    "end": "4810560"
  },
  {
    "text": "and that's kind of the Crux of a lot of it there are some smaller things that are",
    "start": "4810560",
    "end": "4817820"
  },
  {
    "text": "built in here uh have this Dawn package type Dom",
    "start": "4817820",
    "end": "4823480"
  },
  {
    "text": "it's pretty just pretty close to just an effect wrapper",
    "start": "4823480",
    "end": "4829580"
  },
  {
    "start": "4825000",
    "end": "5130000"
  },
  {
    "text": "of the Dom so like when you get in here uh there's there's a tag for the",
    "start": "4829580",
    "end": "4836719"
  },
  {
    "text": "documents some common things it's almost all",
    "start": "4836719",
    "end": "4841940"
  },
  {
    "text": "effect except for event listeners event listeners do you use My Stream Library here",
    "start": "4841940",
    "end": "4849260"
  },
  {
    "text": "um the effects data structure and for anybody I don't think I've",
    "start": "4849260",
    "end": "4854960"
  },
  {
    "text": "mentioned this but for people out there listening I chose the word effects because I don't like typing very much",
    "start": "4854960",
    "end": "4861320"
  },
  {
    "text": "and then it's also sort of a play on the pluralization of effect so kind of",
    "start": "4861320",
    "end": "4866780"
  },
  {
    "text": "moving from single shot to multi-shot at least that's kind of how it worked in",
    "start": "4866780",
    "end": "4872000"
  },
  {
    "text": "my head I don't know if it translates out very well",
    "start": "4872000",
    "end": "4877179"
  },
  {
    "text": "I I definitely agree with you that I'm not I don't like to type a lot in fact in my",
    "start": "4879679",
    "end": "4886520"
  },
  {
    "text": "code effect is called t for a for a very peculiar reason",
    "start": "4886520",
    "end": "4892400"
  },
  {
    "text": "I I publicly say it's because it's the short name for tasks that's false",
    "start": "4892400",
    "end": "4898520"
  },
  {
    "text": "actually that's not the reason the reason I call it t was because there was the notation on the original paper that",
    "start": "4898520",
    "end": "4905659"
  },
  {
    "text": "you genuine Modric reducing monets for the first time",
    "start": "4905659",
    "end": "4910880"
  },
  {
    "text": "he called Mona teeth so that's why I call everything tea yeah I was just a curiosity I like short",
    "start": "4910880",
    "end": "4918380"
  },
  {
    "text": "names yeah without a doubt as long as they still convey something",
    "start": "4918380",
    "end": "4923800"
  },
  {
    "text": "well in my case it doesn't it does not it is attached to something here at the top right you know like I have a c here",
    "start": "4925179",
    "end": "4931820"
  },
  {
    "text": "see it's not super useful but um but yeah there's",
    "start": "4931820",
    "end": "4938659"
  },
  {
    "text": "I can pretty much gloss over this there's different things if you're working with the document if",
    "start": "4938659",
    "end": "4945140"
  },
  {
    "text": "uh you're working with event targets you can add event listeners and deal with global this",
    "start": "4945140",
    "end": "4952159"
  },
  {
    "text": "uh you know there's some access to fetch it's a little bit of stuff here",
    "start": "4952159",
    "end": "4957739"
  },
  {
    "text": "um you know helpers like trying to get Json from it and things of that nature",
    "start": "4957739",
    "end": "4965300"
  },
  {
    "text": "trying to uh standardize some of this stuff with you know like little errors",
    "start": "4965300",
    "end": "4970580"
  },
  {
    "text": "attaching them with the request that you had made things of that nature I used to have um",
    "start": "4970580",
    "end": "4979719"
  },
  {
    "text": "an integration with effect query before effect",
    "start": "4979880",
    "end": "4986239"
  },
  {
    "text": "took in all of that functionality and I haven't quite gotten back there but uh",
    "start": "4986239",
    "end": "4991580"
  },
  {
    "text": "it's something I want to definitely add back at some point the ability to to batch",
    "start": "4991580",
    "end": "4996980"
  },
  {
    "text": "kind of at the fetch level um",
    "start": "4996980",
    "end": "5002580"
  },
  {
    "text": "and I guess the just to share where where we are heading",
    "start": "5004179",
    "end": "5010179"
  },
  {
    "text": "we are meeting the platform package that will include the HTTP wrappers uh",
    "start": "5010179",
    "end": "5018880"
  },
  {
    "text": "hopefully with every caching and watching by by default so hopefully",
    "start": "5018880",
    "end": "5025120"
  },
  {
    "text": "you're gonna be able to literally remove uh delete that that photoshop code",
    "start": "5025120",
    "end": "5031000"
  },
  {
    "text": "hopefully uh if if you're not then provide feedback because it means we are",
    "start": "5031000",
    "end": "5036219"
  },
  {
    "text": "not covering uh some some very common functionality I can imagine but yeah too",
    "start": "5036219",
    "end": "5041980"
  },
  {
    "text": "much of it what I have here is so basic uh I",
    "start": "5041980",
    "end": "5047620"
  },
  {
    "text": "actually don't even use this stuff yet so it's kind of more of like a well the Dom has Fetch and I should probably have",
    "start": "5047620",
    "end": "5054159"
  },
  {
    "text": "fetch uh but yeah I would be totally happy to switch switch that stuff I don't need",
    "start": "5054159",
    "end": "5060820"
  },
  {
    "text": "the case um some really boring things to get the global this value but it was very much",
    "start": "5060820",
    "end": "5067239"
  },
  {
    "text": "an intentional goal from the start from for me to ensure that not a single part",
    "start": "5067239",
    "end": "5072940"
  },
  {
    "text": "of this Library utilizes globals so effect helps a lot in this so every",
    "start": "5072940",
    "end": "5080980"
  },
  {
    "text": "single thing is passed in as a service somewhere and can be changed modified and so in",
    "start": "5080980",
    "end": "5088659"
  },
  {
    "text": "like the server environment you could use happy Dom or JS Dom or some other shim to to provide these settings",
    "start": "5088659",
    "end": "5096880"
  },
  {
    "text": "your code will be none the wiser um",
    "start": "5096880",
    "end": "5103739"
  },
  {
    "text": "I guess that's very very important when it comes again to testing and to provide",
    "start": "5103960",
    "end": "5109140"
  },
  {
    "text": "different implementations without actually having a lot of branching",
    "start": "5109140",
    "end": "5114460"
  },
  {
    "text": "within within the code which detects am I in a you know in a frame am I in a",
    "start": "5114460",
    "end": "5120040"
  },
  {
    "text": "testing environment am I not in a testing the environment do I have to behave this way that way absolutely and",
    "start": "5120040",
    "end": "5125920"
  },
  {
    "text": "so on and so forth to further that goal something I did get to gloss over uh",
    "start": "5125920",
    "end": "5133140"
  },
  {
    "start": "5130000",
    "end": "5663000"
  },
  {
    "text": "uh there is the HTML Library utilizes this thing called a render context and",
    "start": "5133540",
    "end": "5140860"
  },
  {
    "text": "it will also you instantiate it to say what environment you're in and then",
    "start": "5140860",
    "end": "5146140"
  },
  {
    "text": "there are some helpers like when you're in a browser do this otherwise do that when you're in a",
    "start": "5146140",
    "end": "5152620"
  },
  {
    "text": "server do this or do that uh when you're static rendering I don't quite have everything set up to really",
    "start": "5152620",
    "end": "5159100"
  },
  {
    "text": "do static rendering but it's to do",
    "start": "5159100",
    "end": "5165340"
  },
  {
    "text": "um you're gonna get there soon hopefully um but let me get back over here so you have access to the current environment",
    "start": "5165340",
    "end": "5172420"
  },
  {
    "text": "if you want to do anything that's conditional um and then I also have this flag in here whether or not",
    "start": "5172420",
    "end": "5178600"
  },
  {
    "text": "the current request that you're handling is a bot so I have a lot of I have code at work",
    "start": "5178600",
    "end": "5186400"
  },
  {
    "text": "um and we have it crawled by Google all goddamn day and it accounts for like 99 of our",
    "start": "5186400",
    "end": "5194199"
  },
  {
    "text": "traffic is Google pounding the out of us and there are some things that we",
    "start": "5194199",
    "end": "5199540"
  },
  {
    "text": "don't want to do when it is a bot um for instance uh we have some",
    "start": "5199540",
    "end": "5205000"
  },
  {
    "text": "monitoring and user tracking that's fairly expensive to boot up and so",
    "start": "5205000",
    "end": "5211600"
  },
  {
    "text": "and we don't want to pay for it when it's not for a real user so",
    "start": "5211600",
    "end": "5220000"
  },
  {
    "text": "um we I added this flag in there to kind of capture one of my own use cases there's certain things I don't want to",
    "start": "5220000",
    "end": "5226360"
  },
  {
    "text": "do when there's a bot and you might want to serve up you know some sort of statically rendered version uh ahead of",
    "start": "5226360",
    "end": "5233800"
  },
  {
    "text": "time or anything of that nature kind of have that stashed in there and then these are hidden from you",
    "start": "5233800",
    "end": "5240960"
  },
  {
    "text": "intentionally but this is where I keep track of um",
    "start": "5240960",
    "end": "5246639"
  },
  {
    "text": "this will usually be a Dom node and then it keeps track of some information about what's been rendered",
    "start": "5246639",
    "end": "5253420"
  },
  {
    "text": "there before so it can determine whether or not it needs it needs to do anything or if it needs to replace the child or",
    "start": "5253420",
    "end": "5260860"
  },
  {
    "text": "things of that nature that really only that I guess these the those two are the",
    "start": "5260860",
    "end": "5269679"
  },
  {
    "text": "contexts that in micro HTML you had tools they were entirely weak Maps",
    "start": "5269679",
    "end": "5277960"
  },
  {
    "text": "so I we had the same the same kind of render",
    "start": "5277960",
    "end": "5283000"
  },
  {
    "text": "context where when we we were about to to initially experiment on effect HTML",
    "start": "5283000",
    "end": "5288780"
  },
  {
    "text": "for this precise reason keeping metadata around rendering yeah so in practice there will really only",
    "start": "5288780",
    "end": "5295000"
  },
  {
    "text": "ever be one but uh for tests and other things you don't have to worry about things",
    "start": "5295000",
    "end": "5302440"
  },
  {
    "text": "um mismatching and then this is to keep track of the information that I parse about an",
    "start": "5302440",
    "end": "5308440"
  },
  {
    "text": "individual template and so it's slightly different uh well it's different between",
    "start": "5308440",
    "end": "5314980"
  },
  {
    "text": "the server and the Dom and then it's slightly different that's why I have it as unknown here I do some type casting",
    "start": "5314980",
    "end": "5321040"
  },
  {
    "text": "some other places which is kind of why I made it internal um but hydration and then like standard",
    "start": "5321040",
    "end": "5327760"
  },
  {
    "text": "rendering from scratch have slightly different representations and there's some graceful handling for",
    "start": "5327760",
    "end": "5334900"
  },
  {
    "text": "like when after you've done hydration and it switches to doing like standard rendering it deals with the fact that",
    "start": "5334900",
    "end": "5341440"
  },
  {
    "text": "they change a little bit and all that kind of stuff",
    "start": "5341440",
    "end": "5346020"
  },
  {
    "text": "maybe just a very small advice whenever you do this stuff with internals",
    "start": "5349659",
    "end": "5356739"
  },
  {
    "text": "teacher symbol on the time so you avoid a person actually go people actually",
    "start": "5356739",
    "end": "5362920"
  },
  {
    "text": "trying to provide the same type with the same fields and then opening up issues",
    "start": "5362920",
    "end": "5368080"
  },
  {
    "text": "this doesn't work well it wasn't you were not supposed to do this",
    "start": "5368080",
    "end": "5373199"
  },
  {
    "text": "but at least there's a symbol that it's only local they cannot access the symbol",
    "start": "5373199",
    "end": "5379840"
  },
  {
    "text": "if they try to do so then they can read the results to internal fields that they should provide yes I I was there before",
    "start": "5379840",
    "end": "5387400"
  },
  {
    "text": "so I definitely will advise your advice I I've kind of avoided those things",
    "start": "5387400",
    "end": "5394000"
  },
  {
    "text": "because something that I really hate about using libraries like reactors like I have no escape hatch I have no control",
    "start": "5394000",
    "end": "5401500"
  },
  {
    "text": "over 90 of what the framework does so I think",
    "start": "5401500",
    "end": "5409300"
  },
  {
    "text": "you should have escaping something I really want in here so like even though I've described all the stuff",
    "start": "5409300",
    "end": "5415780"
  },
  {
    "text": "that I built uh you know you could replace your own router at will",
    "start": "5415780",
    "end": "5422560"
  },
  {
    "text": "um this HTML Library also supports Dom nodes from any framework anywhere so you",
    "start": "5422560",
    "end": "5430540"
  },
  {
    "text": "can Nest react apps and here's felt apps you name it it's totally happy as long",
    "start": "5430540",
    "end": "5437380"
  },
  {
    "text": "as it can accept Dom notes and or HTML strings or depending on the",
    "start": "5437380",
    "end": "5442719"
  },
  {
    "text": "environment so there's a good amount of interoperability if you need to",
    "start": "5442719",
    "end": "5448480"
  },
  {
    "text": "do ports uh you know piece you know um you don't have to it's not all or",
    "start": "5448480",
    "end": "5453820"
  },
  {
    "text": "nothing and then it also only ever produces the same things Dom notes and such and so as long as these other",
    "start": "5453820",
    "end": "5461020"
  },
  {
    "text": "Frameworks support those in some fashion you can also kind of go",
    "start": "5461020",
    "end": "5466360"
  },
  {
    "text": "in the other direction pretty well the app that I did at work I did",
    "start": "5466360",
    "end": "5471820"
  },
  {
    "text": "in that in that sort of pattern I implemented certain pages at first with",
    "start": "5471820",
    "end": "5479440"
  },
  {
    "text": "um with type and then eventually doing a little bit bigger of refactoring to kind of",
    "start": "5479440",
    "end": "5485020"
  },
  {
    "text": "replace the app shell with it as well it wasn't too bad so that's something",
    "start": "5485020",
    "end": "5492219"
  },
  {
    "text": "I've tried to keep in here is like these little Escape hatches I don't know what anybody would ever do with",
    "start": "5492219",
    "end": "5497739"
  },
  {
    "text": "these but I'm sure they'll figure it out",
    "start": "5497739",
    "end": "5504159"
  },
  {
    "text": "like you you for for example if I if I use a symbol to to avoid",
    "start": "5504159",
    "end": "5510580"
  },
  {
    "text": "a user directly implementing the type they're on I usually use a symbol where",
    "start": "5510580",
    "end": "5516400"
  },
  {
    "text": "I specify the dot four so if you actually want it you can get the same symbol and you can like it's not",
    "start": "5516400",
    "end": "5525840"
  },
  {
    "text": "is symbol.4 it's flagged as a unique symbol it's gonna use yeah something",
    "start": "5526800",
    "end": "5533320"
  },
  {
    "text": "like that some sort of stuff like",
    "start": "5533320",
    "end": "5539920"
  },
  {
    "text": "like that so but no I I meant it that that it's apparent at the type level uh",
    "start": "5539920",
    "end": "5545860"
  },
  {
    "text": "because otherwise this type in in user land is equal to a string environment",
    "start": "5545860",
    "end": "5551560"
  },
  {
    "text": "and an is bot the two internals get removed from from the type at all so you would be able to",
    "start": "5551560",
    "end": "5558880"
  },
  {
    "text": "provide a render context just just providing those two and especially if users do stuff like",
    "start": "5558880",
    "end": "5566159"
  },
  {
    "text": "higher order things maybe it's they spread it it's kind of",
    "start": "5566159",
    "end": "5572560"
  },
  {
    "text": "risky I know why developing you shouldn't care about any of those and",
    "start": "5572560",
    "end": "5577900"
  },
  {
    "text": "and probably you should not care about any of these for a for a while up until",
    "start": "5577900",
    "end": "5583179"
  },
  {
    "text": "the points where you actually want people to use it but when you get to that point",
    "start": "5583179",
    "end": "5588820"
  },
  {
    "text": "it's like make them hard I mean make things they should not do hard to",
    "start": "5588820",
    "end": "5596739"
  },
  {
    "text": "do that's the that's the trick right still make them doable because you need the",
    "start": "5596739",
    "end": "5602500"
  },
  {
    "text": "Escape hotches as you've described but a bit harder anyway those are just",
    "start": "5602500",
    "end": "5609400"
  },
  {
    "text": "just small advices from a person who's been fighting with people exploiting",
    "start": "5609400",
    "end": "5615540"
  },
  {
    "text": "their libraries as as much as possible give it to users and that's what they do",
    "start": "5615540",
    "end": "5622500"
  },
  {
    "text": "you give it to users that's what's it they're gonna do it and be sure it's the same yeah I have like little helpers if",
    "start": "5623620",
    "end": "5631480"
  },
  {
    "text": "you for the the synchronous versions of the other things that we have you can check to see if",
    "start": "5631480",
    "end": "5637719"
  },
  {
    "text": "what environments you're in or if the current arm and savant kind of stuff",
    "start": "5637719",
    "end": "5644500"
  },
  {
    "text": "um so we talked about most of this stuff I",
    "start": "5644500",
    "end": "5650980"
  },
  {
    "text": "think uh we've kind of hit on the Dom Library I have I don't know I think the only",
    "start": "5650980",
    "end": "5657580"
  },
  {
    "text": "other one that maybe is of interest to some people is I have some rappers around uh",
    "start": "5657580",
    "end": "5663880"
  },
  {
    "start": "5663000",
    "end": "6296000"
  },
  {
    "text": "affect data context and actually I wanna it's here pretty",
    "start": "5663880",
    "end": "5670300"
  },
  {
    "text": "much I just kind of wrap it in some additional methods so that I I kind of I have the tag in",
    "start": "5670300",
    "end": "5677260"
  },
  {
    "text": "one place and I don't have to also look for like effect flat map and all these other things along the way",
    "start": "5677260",
    "end": "5683139"
  },
  {
    "text": "so it pretty much just hides a lot of that stuff away from you but you can um",
    "start": "5683139",
    "end": "5689980"
  },
  {
    "text": "yeah I have like these actions that you can have uh which basically allows you to get the service and either perform a",
    "start": "5689980",
    "end": "5697420"
  },
  {
    "text": "phone apply a function perform an effect perform a push-based stream providing",
    "start": "5697420",
    "end": "5704699"
  },
  {
    "text": "resources constructing layers from them and I have this other thing called the",
    "start": "5704699",
    "end": "5710139"
  },
  {
    "text": "context Builder which just kind of gives you a a fluent API for adding like if you're",
    "start": "5710139",
    "end": "5716380"
  },
  {
    "text": "constructing some sort of context just kind of gives you like add methods and merge methods",
    "start": "5716380",
    "end": "5722860"
  },
  {
    "text": "and things of that nature I guess for layers we are we are even",
    "start": "5722860",
    "end": "5731040"
  },
  {
    "text": "evaluating is to have a more fluent API",
    "start": "5731040",
    "end": "5736600"
  },
  {
    "text": "four layers just for tags in general not really because they are right they",
    "start": "5736600",
    "end": "5743980"
  },
  {
    "text": "are very general but by extent we we made them a subtype of",
    "start": "5743980",
    "end": "5749380"
  },
  {
    "text": "effect so I'm still in in the middle but I I do",
    "start": "5749380",
    "end": "5755320"
  },
  {
    "text": "understand uh this in the context of a framework uh where you you leverage",
    "start": "5755320",
    "end": "5761199"
  },
  {
    "text": "those at every single line and so on and so forth it becomes yeah I kind of like being able to say you know I have this",
    "start": "5761199",
    "end": "5767080"
  },
  {
    "text": "service and then being able to just use it directly with the service",
    "start": "5767080",
    "end": "5774219"
  },
  {
    "text": "and I kind of like the way it reads as well it doesn't get hidden as much",
    "start": "5774219",
    "end": "5781239"
  },
  {
    "text": "um which kind of leads to one interesting thing I think I don't know if other people kind of",
    "start": "5781239",
    "end": "5788080"
  },
  {
    "text": "fallen into this stuff um but sometimes I really like I want to",
    "start": "5788080",
    "end": "5793300"
  },
  {
    "text": "work with two different services or three different services all at once",
    "start": "5793300",
    "end": "5799420"
  },
  {
    "text": "and so given that I have these sort of methods um I can also sort of combine them",
    "start": "5799420",
    "end": "5806800"
  },
  {
    "text": "so I get this like tagged type I called it tagged I don't know it's not a great name but you can create",
    "start": "5806800",
    "end": "5814239"
  },
  {
    "text": "two pools of services so these are just and I think",
    "start": "5814239",
    "end": "5819880"
  },
  {
    "text": "these are technically the ones that I have that already have the different methods on it but it could be",
    "start": "5819880",
    "end": "5827460"
  },
  {
    "text": "um it could be just one directly from effect data context it doesn't have to",
    "start": "5827560",
    "end": "5833440"
  },
  {
    "text": "be one of mine but you can kind of create tuples but uh",
    "start": "5833440",
    "end": "5839739"
  },
  {
    "text": "it allows you to kind of work with them as if they're one thing I kind of have it here I also have it",
    "start": "5839739",
    "end": "5846280"
  },
  {
    "text": "for strokes if you want to do it with structs for any reason but it allows you to access them all at",
    "start": "5846280",
    "end": "5852820"
  },
  {
    "text": "once and also provide them all at once oh and",
    "start": "5852820",
    "end": "5859380"
  },
  {
    "text": "and you do that at the Target level so not not by",
    "start": "5860920",
    "end": "5867340"
  },
  {
    "text": "converting them to a factory got it you know I've and then I also have one",
    "start": "5867340",
    "end": "5874060"
  },
  {
    "text": "other one I'll zoom in on that I use quite a lot it's probably easier to see an example",
    "start": "5874060",
    "end": "5880380"
  },
  {
    "text": "so I end up creating services around an individual function",
    "start": "5880380",
    "end": "5886000"
  },
  {
    "text": "all of the time and so I kind of have this helper called function FN and it takes in",
    "start": "5886000",
    "end": "5894820"
  },
  {
    "text": "any kind of function to an effect I kind of have this weird Syntax for",
    "start": "5894820",
    "end": "5900820"
  },
  {
    "text": "type inference where you provide the type that you want to work with first call a function",
    "start": "5900820",
    "end": "5909040"
  },
  {
    "text": "and then provide some sort of identifier and end up with this function type",
    "start": "5909040",
    "end": "5916679"
  },
  {
    "text": "I'll break this apart so you can kind of see",
    "start": "5916679",
    "end": "5921300"
  },
  {
    "text": "so this ends up being it gives you an API to apply",
    "start": "5924179",
    "end": "5930658"
  },
  {
    "text": "you use the literal the the literal type as the energy I have a little helper if",
    "start": "5930940",
    "end": "5936159"
  },
  {
    "text": "people care enough I don't even end up using it very often it should be a class",
    "start": "5936159",
    "end": "5942159"
  },
  {
    "text": "called ID uh",
    "start": "5942159",
    "end": "5947760"
  },
  {
    "text": "and then I can type um and the key thing about that I think I",
    "start": "5951280",
    "end": "5957460"
  },
  {
    "text": "have the types for this I don't know I haven't changed it yet well I have the intention to be able to",
    "start": "5957460",
    "end": "5964179"
  },
  {
    "text": "to make them opaque via this and the key thing about this is that it's",
    "start": "5964179",
    "end": "5969280"
  },
  {
    "text": "the same type has the same shape statically as it does at runtime so you",
    "start": "5969280",
    "end": "5975040"
  },
  {
    "text": "can provide the Constructor but also but use the type of the instance",
    "start": "5975040",
    "end": "5981400"
  },
  {
    "text": "so you get that sort of opaqueness",
    "start": "5981400",
    "end": "5985198"
  },
  {
    "text": "okay so I guess if if here for example you say read-only get whatever there is an effect that's the",
    "start": "5987040",
    "end": "5995560"
  },
  {
    "text": "shape of the service and you use the Constructor as the literal I guess I",
    "start": "5995560",
    "end": "6000900"
  },
  {
    "text": "need to add support for the function to do that but that's kind of the idea that I'll eventually get to",
    "start": "6000900",
    "end": "6008219"
  },
  {
    "text": "but you're able to kind of call it almost like a function of apply",
    "start": "6008219",
    "end": "6015120"
  },
  {
    "text": "um it also sort of has some support for generics so the problem is",
    "start": "6015120",
    "end": "6022080"
  },
  {
    "text": "here is that it has no idea what it is and so I've been getting around that",
    "start": "6022080",
    "end": "6028739"
  },
  {
    "text": "with if you actually want to if you needed to call out",
    "start": "6028739",
    "end": "6034340"
  },
  {
    "text": "you can kind of access the function itself and you won't lose the generics I could make this whatever",
    "start": "6035520",
    "end": "6044360"
  },
  {
    "text": "uh get back to where we were but then it also kind of adds the",
    "start": "6045060",
    "end": "6052440"
  },
  {
    "text": "ability to Implement these things and so that's",
    "start": "6052440",
    "end": "6058139"
  },
  {
    "text": "kind of where I do a little bit of type level stuff so by default because this is never",
    "start": "6058139",
    "end": "6065480"
  },
  {
    "text": "my implementation can never have any resources of its own",
    "start": "6065480",
    "end": "6071880"
  },
  {
    "text": "and so there's a little bit of type level stuff that basically changes never to any in the process of providing it",
    "start": "6071880",
    "end": "6080760"
  },
  {
    "text": "so that you can add additional resources during the implementation and it will",
    "start": "6080760",
    "end": "6086280"
  },
  {
    "text": "push it back on so I don't know",
    "start": "6086280",
    "end": "6091040"
  },
  {
    "text": "well I guess at that point you you also have to provide those you don't have to",
    "start": "6092460",
    "end": "6098580"
  },
  {
    "text": "push them down no let's put this back over",
    "start": "6098580",
    "end": "6104360"
  },
  {
    "text": "yeah well even if you push them down uh I mean that that function that provide",
    "start": "6106619",
    "end": "6112139"
  },
  {
    "text": "implementation has to take the context from the outside and push it in the",
    "start": "6112139",
    "end": "6117179"
  },
  {
    "text": "inside otherwise correct so it's gonna be unsafe exactly",
    "start": "6117179",
    "end": "6122840"
  },
  {
    "text": "um so it takes it'll create the layer it gets the context from outside and then",
    "start": "6124020",
    "end": "6131520"
  },
  {
    "text": "yeah it produces the function provides the context",
    "start": "6131520",
    "end": "6137000"
  },
  {
    "text": "and the types don't work out super great typescript doesn't know what the going on but",
    "start": "6139080",
    "end": "6145760"
  },
  {
    "text": "thank you I can't imagine that yeah absolutely all the time",
    "start": "6147179",
    "end": "6153000"
  },
  {
    "text": "and then you can also if you prefer you can create layers just the Implement kind of have this shorthand",
    "start": "6153000",
    "end": "6159360"
  },
  {
    "text": "provided directly to an effect um",
    "start": "6159360",
    "end": "6164460"
  },
  {
    "text": "but yeah I I mean that's kind of the the gist of things kind of where",
    "start": "6164460",
    "end": "6170820"
  },
  {
    "text": "I'm at it's kind of going forward I'm really looking towards",
    "start": "6170820",
    "end": "6177000"
  },
  {
    "text": "uh these virtual module things that I I think you and I have talked about just",
    "start": "6177000",
    "end": "6183540"
  },
  {
    "text": "briefly um but I'm sort of trying to utilize virtual modules",
    "start": "6183540",
    "end": "6190500"
  },
  {
    "text": "as a sort of macro almost so you kind of say",
    "start": "6190500",
    "end": "6196500"
  },
  {
    "text": "um some sort of prefix or postfix or however you want to Define these things but some sort of",
    "start": "6196500",
    "end": "6203040"
  },
  {
    "text": "tokens in your import module specifiers",
    "start": "6203040",
    "end": "6208500"
  },
  {
    "text": "um so like for example um you might do like HTML colon It's",
    "start": "6208500",
    "end": "6216239"
  },
  {
    "text": "kind of how I'm doing HTML modules pointed towards an HTML file and then it",
    "start": "6216239",
    "end": "6222060"
  },
  {
    "text": "will create um a typescript module for that which you can import so that's how I intend at",
    "start": "6222060",
    "end": "6230699"
  },
  {
    "text": "some point to sort of uh create server-side rendering and one that works both in the",
    "start": "6230699",
    "end": "6236760"
  },
  {
    "text": "development environment which is slightly different than how it works in the production environment but kind of",
    "start": "6236760",
    "end": "6241800"
  },
  {
    "text": "make that seamless for you so you don't have to understand the differences between them",
    "start": "6241800",
    "end": "6248119"
  },
  {
    "text": "also ones that kind of like go through a directory of routes",
    "start": "6248119",
    "end": "6254540"
  },
  {
    "text": "and the functions that render with them kind of building up larger",
    "start": "6254540",
    "end": "6260639"
  },
  {
    "text": "I was about to mention five five system based routing but in a type and it's",
    "start": "6260639",
    "end": "6266219"
  },
  {
    "text": "able to generate the types so uh it creates like an as const of all these",
    "start": "6266219",
    "end": "6273000"
  },
  {
    "text": "different things so it's able to correctly infer like if I import this",
    "start": "6273000",
    "end": "6278280"
  },
  {
    "text": "whole directory and Stitch them together this way they still have all of these requirements and they still produce all",
    "start": "6278280",
    "end": "6284280"
  },
  {
    "text": "of these errors um so that they don't get hidden or",
    "start": "6284280",
    "end": "6291139"
  },
  {
    "text": "so if you if you let me maybe summarize it in a minute and please correct me if",
    "start": "6291600",
    "end": "6297719"
  },
  {
    "start": "6296000",
    "end": "6898000"
  },
  {
    "text": "I'm if I'm wrong if we seed it in in five years in the future I I don't know",
    "start": "6297719",
    "end": "6302940"
  },
  {
    "text": "how long it's gonna take but let's say five years in the future just to avoid any",
    "start": "6302940",
    "end": "6307980"
  },
  {
    "text": "any artificially made deadline or or give our users any any intentional than",
    "start": "6307980",
    "end": "6314699"
  },
  {
    "text": "asking you next month where is this where is this where is this the area would be",
    "start": "6314699",
    "end": "6321119"
  },
  {
    "text": "you install the the framework whatever whatever we end up calling it and you",
    "start": "6321119",
    "end": "6328739"
  },
  {
    "text": "create some files you write things that look very much similar to normal HTML in template literals you",
    "start": "6328739",
    "end": "6335940"
  },
  {
    "text": "Stitch effects into it or strings into it and",
    "start": "6335940",
    "end": "6341940"
  },
  {
    "text": "you run it and it works in the server and the client smoothly as as you would expect any",
    "start": "6341940",
    "end": "6350100"
  },
  {
    "text": "um any new generation framework to to do yes and no so everything you said is",
    "start": "6350100",
    "end": "6356820"
  },
  {
    "text": "correct but there's kind of some small caveats to it so there isn't really like going to be a framework that like",
    "start": "6356820",
    "end": "6363780"
  },
  {
    "text": "magically did all of that for you in some sense so there are kind of",
    "start": "6363780",
    "end": "6369840"
  },
  {
    "text": "um I don't really have I don't have any examples of the virtual",
    "start": "6369840",
    "end": "6375119"
  },
  {
    "text": "modules um currently I have this kind of stitched together by hand but to illustrate uh you might have",
    "start": "6375119",
    "end": "6383400"
  },
  {
    "text": "uh like something like this it's like it's creating a browser build",
    "start": "6383400",
    "end": "6390420"
  },
  {
    "text": "for let's say I have this Pages directory that has all my routes and everything and instead of having to",
    "start": "6390420",
    "end": "6397800"
  },
  {
    "text": "stitch these things together I might just have like root element",
    "start": "6397800",
    "end": "6404040"
  },
  {
    "text": "and it would do a lot of the stitching for you you wouldn't have to provide all of these different things",
    "start": "6404040",
    "end": "6410699"
  },
  {
    "text": "but it would step correct but you still control domain",
    "start": "6410699",
    "end": "6416280"
  },
  {
    "text": "that's something that I found really important is that I don't want to make all of these decisions for you you have",
    "start": "6416280",
    "end": "6422940"
  },
  {
    "text": "like this blessed underscore app.ts or underscore",
    "start": "6422940",
    "end": "6428580"
  },
  {
    "text": "like all of these like sort of private things still allow you to get into the framework",
    "start": "6428580",
    "end": "6433980"
  },
  {
    "text": "I don't want the framework to ever have that version of control so here you you",
    "start": "6433980",
    "end": "6440159"
  },
  {
    "text": "know browser might be very high level um where it gives you like just the surrender function and you tell it where",
    "start": "6440159",
    "end": "6446280"
  },
  {
    "text": "to render and it provides all the resources does All the Right Stuff but you might have something lower level",
    "start": "6446280",
    "end": "6452280"
  },
  {
    "text": "like router and you have some router instance",
    "start": "6452280",
    "end": "6457320"
  },
  {
    "text": "and it's like okay well I want to do a lot more different things I want to provide different versions of the",
    "start": "6457320",
    "end": "6462900"
  },
  {
    "text": "resources um so rather an unbundled framework that",
    "start": "6462900",
    "end": "6470219"
  },
  {
    "text": "you can easily it's also being built in such a way that you can create your own virtual modules and they'll maintain the",
    "start": "6470219",
    "end": "6477840"
  },
  {
    "text": "type safety of putting them all together it really just creates a typescript file",
    "start": "6477840",
    "end": "6485040"
  },
  {
    "text": "behind the scenes so I actually have one example of what I've been testing with",
    "start": "6485040",
    "end": "6490679"
  },
  {
    "text": "the HTML it ends up generating a TS file but it ends up pulling in all of the",
    "start": "6490679",
    "end": "6497219"
  },
  {
    "text": "content it tells you what placeholder it's this is configurable you can tell it where to",
    "start": "6497219",
    "end": "6504179"
  },
  {
    "text": "find uh kind of where to split where am I going to stream content into this thing",
    "start": "6504179",
    "end": "6510480"
  },
  {
    "text": "So currently I'm using a this comment",
    "start": "6510480",
    "end": "6515880"
  },
  {
    "text": "typed content through these you should then be able to",
    "start": "6515880",
    "end": "6521580"
  },
  {
    "text": "like import markdown files and videos",
    "start": "6521580",
    "end": "6526940"
  },
  {
    "text": "I'm not quite there yet but if you choose to do so um and I have a bug here where it's not splitting the content yet",
    "start": "6527119",
    "end": "6532980"
  },
  {
    "text": "I'm still working on that but this would be like I would stream this stuff immediately I would render",
    "start": "6532980",
    "end": "6540119"
  },
  {
    "text": "uh your application and then this should be all the text that comes after this",
    "start": "6540119",
    "end": "6546179"
  },
  {
    "text": "um and then it would stream the rest of it uh into the close",
    "start": "6546179",
    "end": "6551940"
  },
  {
    "text": "the response in different things and there will be",
    "start": "6551940",
    "end": "6557880"
  },
  {
    "text": "more things in here like what is the base path if there is one I try to parse that out it'll have things like the",
    "start": "6557880",
    "end": "6564600"
  },
  {
    "text": "asset directory like where do you serve this thing from so that like uh when you go to",
    "start": "6564600",
    "end": "6570239"
  },
  {
    "text": "production you can set up if you need to you can set up like",
    "start": "6570239",
    "end": "6576060"
  },
  {
    "text": "a static file servering servers and stuff of that venture",
    "start": "6576060",
    "end": "6582119"
  },
  {
    "text": "um but yeah this is all generated",
    "start": "6582119",
    "end": "6587460"
  },
  {
    "text": "and hopefully going to get a lot better and hopefully get some feedback into how all this stuff works and how other people",
    "start": "6587460",
    "end": "6593580"
  },
  {
    "text": "might be using it um but it yeah there's always going to be",
    "start": "6593580",
    "end": "6599219"
  },
  {
    "text": "that level of control there isn't going to be some all-knowing top level process that does",
    "start": "6599219",
    "end": "6607080"
  },
  {
    "text": "all of this stuff for you but there are a lot of helpers along the way so",
    "start": "6607080",
    "end": "6613980"
  },
  {
    "text": "it doesn't do a whole lot yet the kind of built on I have this a CLI package",
    "start": "6613980",
    "end": "6620580"
  },
  {
    "text": "which has a couple different commands which are probably easier to see",
    "start": "6620580",
    "end": "6625400"
  },
  {
    "text": "um so I kind of have this Alias to it but for yourself you know you might do",
    "start": "6626520",
    "end": "6633600"
  },
  {
    "text": "something like MPX typed and then there's build command which",
    "start": "6633600",
    "end": "6640080"
  },
  {
    "text": "will build it for production there's a preview command which will",
    "start": "6640080",
    "end": "6646500"
  },
  {
    "text": "spin up a local server for for that production build",
    "start": "6646500",
    "end": "6652199"
  },
  {
    "text": "without anything and also with the serve so these are equivalent",
    "start": "6652199",
    "end": "6659460"
  },
  {
    "text": "it's going to create a she's going to serve the local development I currently",
    "start": "6659460",
    "end": "6664619"
  },
  {
    "text": "use a V for for that sort of stuff and it has a v plug-in which it does a",
    "start": "6664619",
    "end": "6671699"
  },
  {
    "text": "few things for you at the moment it configures uh",
    "start": "6671699",
    "end": "6677219"
  },
  {
    "text": "TS config paths that's one of the things that it does and I also use uh another Library by",
    "start": "6677219",
    "end": "6686520"
  },
  {
    "text": "I think his name's psycho 13 or 31 and I'm probably butchering that on GitHub",
    "start": "6686520",
    "end": "6693659"
  },
  {
    "text": "um it's a package called vivit VA v i t e",
    "start": "6693659",
    "end": "6699500"
  },
  {
    "text": "and it helps teach V how to do server-side rendering so you're able to",
    "start": "6699500",
    "end": "6706199"
  },
  {
    "text": "use the Veet development server to serve both your server and your client",
    "start": "6706199",
    "end": "6713219"
  },
  {
    "text": "um which leads to some boilerplate at the moment which I hope to abstract over",
    "start": "6713219",
    "end": "6720659"
  },
  {
    "text": "um but you get access you can actually through Imports uh this vivit gives you",
    "start": "6720659",
    "end": "6725760"
  },
  {
    "text": "access to the HTTP Dev server and the devil server that it's going to be running in",
    "start": "6725760",
    "end": "6733080"
  },
  {
    "text": "and this needs a lot of abstraction so nobody look at this with any uh",
    "start": "6733080",
    "end": "6741360"
  },
  {
    "text": "but it's very much um but you know like in prod you might",
    "start": "6741780",
    "end": "6747540"
  },
  {
    "text": "serve static files um I have one virtual module that is",
    "start": "6747540",
    "end": "6753900"
  },
  {
    "text": "working already you can get the configuration that you passed in well not actually it's",
    "start": "6753900",
    "end": "6760560"
  },
  {
    "text": "the resolved configuration so given uh what you provided to the V plugin plus",
    "start": "6760560",
    "end": "6767119"
  },
  {
    "text": "sets of defaults you're able to get access to things about the build so like",
    "start": "6767119",
    "end": "6774300"
  },
  {
    "text": "where am I going to Output all of the client files so like for production I read",
    "start": "6774300",
    "end": "6780860"
  },
  {
    "text": "the version of the index HTML file um",
    "start": "6780860",
    "end": "6786119"
  },
  {
    "text": "that V already did Transformations for setup you know so there's no need to do",
    "start": "6786119",
    "end": "6792480"
  },
  {
    "text": "that sort of stuff again and there's slightly different versions",
    "start": "6792480",
    "end": "6799500"
  },
  {
    "text": "for running it and development versus prod so in Dev one thing is Veet does a",
    "start": "6799500",
    "end": "6806219"
  },
  {
    "text": "singular transform of your index HTML to add you know like",
    "start": "6806219",
    "end": "6812480"
  },
  {
    "text": "module preloads and the right resources and things of that nature to a",
    "start": "6812480",
    "end": "6817619"
  },
  {
    "text": "particular file so we have to render the UI to of HTML string",
    "start": "6817619",
    "end": "6824219"
  },
  {
    "text": "to be able to do it there but in production we're able to stream",
    "start": "6824219",
    "end": "6829320"
  },
  {
    "text": "out the content that comes before immediately stream out the UI",
    "start": "6829320",
    "end": "6835199"
  },
  {
    "text": "and then end it with HTML that comes after your application",
    "start": "6835199",
    "end": "6842040"
  },
  {
    "text": "and I'm hoping to extract a lot this quite a lot with virtual modules",
    "start": "6842040",
    "end": "6847520"
  },
  {
    "text": "and maybe another typed package typed Express or something along those lines",
    "start": "6847520",
    "end": "6855198"
  },
  {
    "text": "in a much worse together Digest in a digestible format yeah",
    "start": "6856860",
    "end": "6865260"
  },
  {
    "text": "while still you you have the ability of hooking into every single component if",
    "start": "6865260",
    "end": "6870780"
  },
  {
    "text": "you want to if you don't want to you use the pre-packaged stuff and you start",
    "start": "6870780",
    "end": "6876600"
  },
  {
    "text": "right you can easily pick up any of the libraries at heart uh the most likely thing is that you're",
    "start": "6876600",
    "end": "6883260"
  },
  {
    "text": "going to get a typed effects dependency somewhere along the way if that doesn't bother people",
    "start": "6883260",
    "end": "6891800"
  },
  {
    "text": "that's kind of good good good well that was very exciting thanks for",
    "start": "6894300",
    "end": "6901260"
  },
  {
    "start": "6898000",
    "end": "7816000"
  },
  {
    "text": "thanks for the interest honestly thank thanks for doing this uh I mean",
    "start": "6901260",
    "end": "6908820"
  },
  {
    "text": "I'm I'm very curious about what people are building and this is for sure one of",
    "start": "6908820",
    "end": "6915179"
  },
  {
    "text": "the most low level usages of effect at the moment and I'm",
    "start": "6915179",
    "end": "6922139"
  },
  {
    "text": "I'm really curious to see where where this goes but there are some fundamentals that that we",
    "start": "6922139",
    "end": "6930420"
  },
  {
    "text": "really agree with that's for example usage of plain tight script avoiding",
    "start": "6930420",
    "end": "6939679"
  },
  {
    "text": "obstructions such as jsx such as virtual Dom and stuff like that when when where",
    "start": "6939679",
    "end": "6945480"
  },
  {
    "text": "they're not strictly necessary and and also as a",
    "start": "6945480",
    "end": "6951659"
  },
  {
    "text": "kind of you you mentioned before the resumability of quick and and stuff like",
    "start": "6951659",
    "end": "6957360"
  },
  {
    "text": "that I I do think there's a lot to explore there and I'm I'm very happy that you are you're gonna explore if",
    "start": "6957360",
    "end": "6965040"
  },
  {
    "text": "that if that is possible again as as you described it and the reason we did this",
    "start": "6965040",
    "end": "6970619"
  },
  {
    "text": "this stream it's to catch Leading Edge users and and",
    "start": "6970619",
    "end": "6975840"
  },
  {
    "text": "not yet to to Really State these as a production ready framework or as the way",
    "start": "6975840",
    "end": "6983460"
  },
  {
    "text": "that we choose to do things uh but there's there's a lot of work going",
    "start": "6983460",
    "end": "6989040"
  },
  {
    "text": "going on behind the scenes and and we agree on some very fundamental patterns",
    "start": "6989040",
    "end": "6994679"
  },
  {
    "text": "so I I my hopes are very high and and that's why that's why the",
    "start": "6994679",
    "end": "7001280"
  },
  {
    "text": "interest I hope you catch a lot of bleeding edge users for sure we have some in our",
    "start": "7001280",
    "end": "7007580"
  },
  {
    "text": "community I'm already impressed to be honest by the fact that you use these in a in a",
    "start": "7007580",
    "end": "7013880"
  },
  {
    "text": "work app I think all good projects starts that way uh effects started while",
    "start": "7013880",
    "end": "7020960"
  },
  {
    "text": "I was CTO in a fintech company uh and it started as a module of a production app",
    "start": "7020960",
    "end": "7030080"
  },
  {
    "text": "that we had to use and we dog food it ourselves into into all the patterns and",
    "start": "7030080",
    "end": "7036980"
  },
  {
    "text": "that's how you're gonna discover the rough edges and and everything else and and hopefully if it if it works well for",
    "start": "7036980",
    "end": "7044119"
  },
  {
    "text": "you there's the good chance that it's gonna work well for uh for others",
    "start": "7044119",
    "end": "7049460"
  },
  {
    "text": "so also on the on the strategy idea yeah definitely dog shooting pretty hard I",
    "start": "7049460",
    "end": "7055340"
  },
  {
    "text": "I had like a month of period time where I had so many bugs in my stream library that I was like I was stressing like I",
    "start": "7055340",
    "end": "7062900"
  },
  {
    "text": "was ready to pull my hair out I was",
    "start": "7062900",
    "end": "7068060"
  },
  {
    "text": "I just had this like weird bug where it was like sometimes I get the event and sometimes I don't and I like don't",
    "start": "7068060",
    "end": "7073940"
  },
  {
    "text": "understand why it ended up being I had two concepts of a stream ending",
    "start": "7073940",
    "end": "7080679"
  },
  {
    "text": "I I call them the Eisenberg box sometimes they are there sometimes they're not worse it was like sometimes",
    "start": "7081080",
    "end": "7087380"
  },
  {
    "text": "I could click on this link and it would go but if I go from this link to that link no chance and it's it was like this",
    "start": "7087380",
    "end": "7093980"
  },
  {
    "text": "shouldn't be happening um but yeah I'm kind of past that like I had a version that had virtual modules I",
    "start": "7093980",
    "end": "7100460"
  },
  {
    "text": "had a version that had all this stuff at one point my dog fooding said everything you just did was garbage",
    "start": "7100460",
    "end": "7107320"
  },
  {
    "text": "more there's there's some bones in there like it's pretty bad and so we're at",
    "start": "7107320",
    "end": "7114380"
  },
  {
    "text": "that point now where I have the dog fooding lessons pointing me in the right the right direction",
    "start": "7114380",
    "end": "7121219"
  },
  {
    "text": "so I'm trying to revisit these virtual modules my biggest limitation before was",
    "start": "7121219",
    "end": "7126440"
  },
  {
    "text": "it forced everything that came out of the virtual modules to have no resources and no errors they had to be handled",
    "start": "7126440",
    "end": "7133460"
  },
  {
    "text": "and so it kind of ended up in this weird position where it was putting together all these layers and things for you but",
    "start": "7133460",
    "end": "7141260"
  },
  {
    "text": "uh sometimes they had to be provided more than once and all the time really",
    "start": "7141260",
    "end": "7146540"
  },
  {
    "text": "you want to share them at the top of your application and different things of that nature so that's where I'm kind of at now is I",
    "start": "7146540",
    "end": "7153380"
  },
  {
    "text": "I want typescript to actually understand what you're You're Building so I'm trying to build a typescript",
    "start": "7153380",
    "end": "7159199"
  },
  {
    "text": "plugin to fill that need um and I'm hopefully trying to do it in a way that people outside of effect",
    "start": "7159199",
    "end": "7166040"
  },
  {
    "text": "would also be able to utilize the virtual modules I think it's stupid",
    "start": "7166040",
    "end": "7171199"
  },
  {
    "text": "a pretty General approach to generating file content",
    "start": "7171199",
    "end": "7178480"
  },
  {
    "text": "well I'm definitely curious to see where uh where the virtual modules the come through I I",
    "start": "7181400",
    "end": "7189980"
  },
  {
    "text": "have tried it once before myself um I have not succeeded but I I did not",
    "start": "7189980",
    "end": "7196760"
  },
  {
    "text": "spend enough time and enough gold dog fooding efforts actually",
    "start": "7196760",
    "end": "7202040"
  },
  {
    "text": "try to get there seriously so I I definitely hope this this is",
    "start": "7202040",
    "end": "7207860"
  },
  {
    "text": "gonna work and it's gonna work well the that you already use it in like for configs and other stuff makes me",
    "start": "7207860",
    "end": "7214760"
  },
  {
    "text": "think that it's actually gonna work but it is gonna be the the user experience that I want to use I create a",
    "start": "7214760",
    "end": "7221540"
  },
  {
    "text": "file I have the types and so on and so forth not not too many hurdles around",
    "start": "7221540",
    "end": "7226940"
  },
  {
    "text": "yeah I almost think of them like as macros they're like import macros",
    "start": "7226940",
    "end": "7233360"
  },
  {
    "text": "so almost to some extent you can generate anything you want",
    "start": "7233719",
    "end": "7241280"
  },
  {
    "text": "we'll see [Music] good good good",
    "start": "7241280",
    "end": "7246500"
  },
  {
    "text": "again Tyler thank you very much for this I I will make sure to publish these as",
    "start": "7246500",
    "end": "7253040"
  },
  {
    "text": "soon as possible in the community and I hope you get feedback from from users that again we",
    "start": "7253040",
    "end": "7261560"
  },
  {
    "text": "have a lot of bleeding edge folks I hope they try it and I hope they give you a",
    "start": "7261560",
    "end": "7267380"
  },
  {
    "text": "honest feedback on on all the pieces I will try it myself I play around with it",
    "start": "7267380",
    "end": "7273560"
  },
  {
    "text": "a little bit and I try to do the same again bear in mind I'm not I'm not a front-end developer so definitely that",
    "start": "7273560",
    "end": "7281179"
  },
  {
    "text": "might be the most of the feedback",
    "start": "7281179",
    "end": "7284560"
  },
  {
    "text": "I don't know there are some patterns I really don't understand and not not in your in your framework but generally in",
    "start": "7287360",
    "end": "7293360"
  },
  {
    "text": "front-end development and I don't know if it's me or if it's the practice that",
    "start": "7293360",
    "end": "7299420"
  },
  {
    "text": "took a strange a strange Direction during years because I sort of left",
    "start": "7299420",
    "end": "7304699"
  },
  {
    "text": "front end for seven years I I started programming like",
    "start": "7304699",
    "end": "7310340"
  },
  {
    "text": "15 years ago for the first for the first seven I was doing both",
    "start": "7310340",
    "end": "7315820"
  },
  {
    "text": "then too many things came up and I sort of shifted my focus on on the back end",
    "start": "7315820",
    "end": "7322340"
  },
  {
    "text": "aspects when I when I came back now there's a war of Frameworks virtual Doms",
    "start": "7322340",
    "end": "7327619"
  },
  {
    "text": "everywhere and and many things I I struggled to understand if they are",
    "start": "7327619",
    "end": "7332900"
  },
  {
    "text": "necessary or if they are there just because they are there in the sense that",
    "start": "7332900",
    "end": "7339199"
  },
  {
    "text": "we started in a direction yeah I think we've been going in a direction where it's just like ad hoc adding it's like I",
    "start": "7339199",
    "end": "7346099"
  },
  {
    "text": "created these this thing and it does this stuff but now I have these problems so let's build something else alleviate",
    "start": "7346099",
    "end": "7353239"
  },
  {
    "text": "this but now there's like these other edge cases so let's build a thing that's and I think we're starting to get to",
    "start": "7353239",
    "end": "7359360"
  },
  {
    "text": "that place where Frameworks are starting to reevaluate um like we have solid which is like do",
    "start": "7359360",
    "end": "7365480"
  },
  {
    "text": "we really need a full virtual Dom do we have quick which is like do we need hydration do we need all these different",
    "start": "7365480",
    "end": "7372739"
  },
  {
    "text": "things can we split stuff up more naturally and so I think we're starting to see that switch of like",
    "start": "7372739",
    "end": "7381760"
  },
  {
    "text": "and and I really like it and and in fact I'm I'm progressively getting more interested I've been watching some of",
    "start": "7381800",
    "end": "7389119"
  },
  {
    "text": "the talks that nishiko uh did on on quick uh I've given it up very quick uh",
    "start": "7389119",
    "end": "7396320"
  },
  {
    "text": "very quick try myself but I I really like that we are evaluating the the",
    "start": "7396320",
    "end": "7402500"
  },
  {
    "text": "basics because sometimes yeah Basics are wrong and if you if you don't like to me every",
    "start": "7402500",
    "end": "7410960"
  },
  {
    "text": "every year you have to every year or two you have to kind of clear up your mind and say okay",
    "start": "7410960",
    "end": "7417500"
  },
  {
    "text": "does the Assumption make sense and if the Assumption no longer makes sense you should try a different try a",
    "start": "7417500",
    "end": "7425000"
  },
  {
    "text": "different Road see where it leads I think I really want to a very happy person at",
    "start": "7425000",
    "end": "7430639"
  },
  {
    "text": "some point I kind of want to get to like a V1 of sorts before I start trying to figure out resumability again",
    "start": "7430639",
    "end": "7437780"
  },
  {
    "text": "but I'm pretty sure effect is going to make it so much nicer so I don't know if you're familiar with",
    "start": "7437780",
    "end": "7444500"
  },
  {
    "text": "how quick does some of this stuff but to be able to pull",
    "start": "7444500",
    "end": "7450500"
  },
  {
    "text": "but to be able to understand certain functions out of scope and to be able to",
    "start": "7450500",
    "end": "7456020"
  },
  {
    "text": "still lazy load them and all this kinds of stuff it relies on global variables",
    "start": "7456020",
    "end": "7461199"
  },
  {
    "text": "extremely heavily so it's able to push things into a global scope called the",
    "start": "7461199",
    "end": "7466580"
  },
  {
    "text": "function it uses the things um so that you can split all the stuff",
    "start": "7466580",
    "end": "7472760"
  },
  {
    "text": "apart and most of it gets put into like another file so you can",
    "start": "7472760",
    "end": "7479119"
  },
  {
    "text": "lazy import it and so effect context is like",
    "start": "7479119",
    "end": "7484580"
  },
  {
    "text": "a godsend here it's like I can create some service that nobody else will ever",
    "start": "7484580",
    "end": "7489800"
  },
  {
    "text": "have pass in a bunch of functional arguments",
    "start": "7489800",
    "end": "7495440"
  },
  {
    "text": "yeah with no Global whatsoever as long as I have no worries about currency I have you know",
    "start": "7495440",
    "end": "7501320"
  },
  {
    "text": "Global variable names clashing any of those sorts of things so I think once we",
    "start": "7501320",
    "end": "7508040"
  },
  {
    "text": "get there we're going to find ourselves a little bit easier of a pattern the main thing is like the syntactic",
    "start": "7508040",
    "end": "7514580"
  },
  {
    "text": "analysis of like okay here's the thing that I want to pull out and then",
    "start": "7514580",
    "end": "7520400"
  },
  {
    "text": "what are the dependencies of it and generating those services and then passing them in",
    "start": "7520400",
    "end": "7527560"
  },
  {
    "text": "well unfortunately for something like that you will use a custom compiler it's",
    "start": "7528320",
    "end": "7533360"
  },
  {
    "text": "no longer it's no longer the place where it's standard type script but I also believe that",
    "start": "7533360",
    "end": "7539420"
  },
  {
    "text": "at that point it's sort of Justified like",
    "start": "7539420",
    "end": "7545420"
  },
  {
    "text": "I don't see why a custom compiler to write HTML personally",
    "start": "7545420",
    "end": "7551300"
  },
  {
    "text": "that's why I didn't really like jsx much I've used jsx I've used it for years",
    "start": "7551300",
    "end": "7556880"
  },
  {
    "text": "because otherwise you wouldn't really build any any sort of UI in a decent in a decent",
    "start": "7556880",
    "end": "7563300"
  },
  {
    "text": "manner but I would like to write that part in plain in plain type script as as",
    "start": "7563300",
    "end": "7569420"
  },
  {
    "text": "you are doing but I do think when when you get to the point of slicing code yes",
    "start": "7569420",
    "end": "7575119"
  },
  {
    "text": "that that's where you actually need a compiler that's your typoscript is not gonna get it there",
    "start": "7575119",
    "end": "7581380"
  },
  {
    "text": "so one of the consequences of not using js6 is like I don't have by default any",
    "start": "7585820",
    "end": "7591860"
  },
  {
    "text": "type safety on the attributes of a particular element whereas in like jsx",
    "start": "7591860",
    "end": "7598040"
  },
  {
    "text": "it's something that comes really easy you just have to Define an object type and here are all the properties and the",
    "start": "7598040",
    "end": "7603199"
  },
  {
    "text": "values so I think that's something I have to address feel like an ESL Plugin or other",
    "start": "7603199",
    "end": "7610580"
  },
  {
    "text": "things I've heard different opinions on on",
    "start": "7610580",
    "end": "7617119"
  },
  {
    "text": "these some folks are like yes but that's not really necessary to",
    "start": "7617119",
    "end": "7624980"
  },
  {
    "text": "type check arguments but generally I don't think one could",
    "start": "7624980",
    "end": "7630860"
  },
  {
    "text": "even build like if you're hooking into a typescript life cycle to make the the compiler",
    "start": "7630860",
    "end": "7637580"
  },
  {
    "text": "plugin for modules and stuff like that you're you're still gonna run on a",
    "start": "7637580",
    "end": "7643820"
  },
  {
    "text": "quote-unquote Fork of uh of typescript and in this quote-unquote park",
    "start": "7643820",
    "end": "7651679"
  },
  {
    "text": "one could check the HTML might sound crazy but one could actually",
    "start": "7651679",
    "end": "7657020"
  },
  {
    "text": "check the HTML and and to some extent you are already doing it because you have the parser to then create Dom",
    "start": "7657020",
    "end": "7663500"
  },
  {
    "text": "elements so like if if you if you do that on a synthetic on a synthetic",
    "start": "7663500",
    "end": "7668659"
  },
  {
    "text": "version you you're gonna realize if there are errors on the on the template literals then it's a matter of getting",
    "start": "7668659",
    "end": "7675380"
  },
  {
    "text": "it back to the to the user experience while you type where you would meet a lot of help but",
    "start": "7675380",
    "end": "7682699"
  },
  {
    "text": "again I'm not I'm not against jsx per set uh it got added to the language but",
    "start": "7682699",
    "end": "7691840"
  },
  {
    "text": "if you're like it it sounds like a stretch like why then I can't use class",
    "start": "7691940",
    "end": "7697340"
  },
  {
    "text": "I have to use class name that there are some weirdness around around the edges",
    "start": "7697340",
    "end": "7703400"
  },
  {
    "text": "that again not being a front-end by any by any reason I don't I don't know why",
    "start": "7703400",
    "end": "7709159"
  },
  {
    "text": "they are they're there but it's something that if we start challenging I I'm I'm excited to see",
    "start": "7709159",
    "end": "7717380"
  },
  {
    "text": "where where it leads it might lead back to jsx by all means we might discover that that was the best solution",
    "start": "7717380",
    "end": "7725440"
  },
  {
    "text": "you do more Transformations and optimizations and stuff but otherwise",
    "start": "7730719",
    "end": "7737480"
  },
  {
    "text": "at least in its current form it's just poorly typed and I I can't deal with it",
    "start": "7737480",
    "end": "7743480"
  },
  {
    "text": "that's the end of the day right now see maybe you end up writing the proper",
    "start": "7743480",
    "end": "7749960"
  },
  {
    "text": "appropriate type jsx and we're gonna have a library type we'll see",
    "start": "7749960",
    "end": "7755739"
  },
  {
    "text": "there's plenty of stuff coming in the future without a doubt",
    "start": "7755739",
    "end": "7760900"
  },
  {
    "text": "foreign thank you very much I'll publish this",
    "start": "7761540",
    "end": "7767420"
  },
  {
    "text": "soon and I guess we can now stop the recording anything else you wanted to",
    "start": "7767420",
    "end": "7773420"
  },
  {
    "text": "mention yeah just I guess I'll say to the people who are maybe interested in in dog fooding this sort of stuff I'm",
    "start": "7773420",
    "end": "7781639"
  },
  {
    "text": "I definitely have a vision I definitely have strong opinions but I'm very flexible and I'm very open to what other",
    "start": "7781639",
    "end": "7788840"
  },
  {
    "text": "people think and where they think this could go because I only have so many ideas in my own head",
    "start": "7788840",
    "end": "7797060"
  },
  {
    "text": "very receptive to any sort of feedback positive negative I'm not too sensitive",
    "start": "7797060",
    "end": "7802340"
  },
  {
    "text": "pretty thick skin so throw it at me",
    "start": "7802340",
    "end": "7807099"
  },
  {
    "text": "good good",
    "start": "7809719",
    "end": "7812320"
  }
]