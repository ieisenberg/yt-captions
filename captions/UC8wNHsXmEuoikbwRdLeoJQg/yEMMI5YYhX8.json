[
  {
    "text": "so welcome to the to the second um weekly bi-weekly episode of effect time",
    "start": "14960",
    "end": "22960"
  },
  {
    "text": "uh today we were supposed to be me and johannes unfortunately johannes is a",
    "start": "22960",
    "end": "28400"
  },
  {
    "text": "little bit under the weather so you're gonna be stuck with me and the the purpose of this time it's",
    "start": "28400",
    "end": "36000"
  },
  {
    "text": "it's really to to begin to look at some of the",
    "start": "36000",
    "end": "42640"
  },
  {
    "text": "common patterns based in in effect yes in in writing production code in in",
    "start": "42640",
    "end": "49440"
  },
  {
    "text": "everyday application and in order to do that",
    "start": "49440",
    "end": "54559"
  },
  {
    "text": "one one very simple thing that we can start to do and",
    "start": "54559",
    "end": "60399"
  },
  {
    "text": "it's going to be an active contribution to one of the the open source repositories on the on",
    "start": "60399",
    "end": "66640"
  },
  {
    "text": "the effect ecosystem is to for example uh make a wrapper around the the node.js file",
    "start": "66640",
    "end": "74320"
  },
  {
    "text": "system api and that's what we're gonna do",
    "start": "74320",
    "end": "79840"
  },
  {
    "text": "we're gonna do today it's a good moment because",
    "start": "79840",
    "end": "86479"
  },
  {
    "text": "actually we've done a release yesterday was quite a long-awaited release",
    "start": "86479",
    "end": "92240"
  },
  {
    "text": "and there's a few breaking changes in things we're gonna uh look at today",
    "start": "92240",
    "end": "97520"
  },
  {
    "text": "so the first thing that we probably gonna have to do is like fix a little bit of box that",
    "start": "97520",
    "end": "104720"
  },
  {
    "text": "might come not box but well adapt to the changes of yesterday on the",
    "start": "104720",
    "end": "111840"
  },
  {
    "text": "on the node.js package of the ecosystem won't take that much",
    "start": "111840",
    "end": "117119"
  },
  {
    "text": "it's very small and then we will begin to the development of our file system",
    "start": "117119",
    "end": "123360"
  },
  {
    "text": "wrapper the during the development of the file system wrapper uh if we have time i'd",
    "start": "123360",
    "end": "130399"
  },
  {
    "text": "like to explore the possibility of using the new stream module that was also",
    "start": "130399",
    "end": "136879"
  },
  {
    "text": "shipped yesterday you know in a quite big release that's based on the latest uh version of",
    "start": "136879",
    "end": "144480"
  },
  {
    "text": "streams from from zero now i have to say that this is by all",
    "start": "144480",
    "end": "150080"
  },
  {
    "text": "means not a planned session and actually it's a funny thing because johannes suggested",
    "start": "150080",
    "end": "156640"
  },
  {
    "text": "me for the first editions of effect time let's try to have some sort of",
    "start": "156640",
    "end": "162400"
  },
  {
    "text": "predictable outcome uh well the first active coding session that we're gonna",
    "start": "162400",
    "end": "167760"
  },
  {
    "text": "do doesn't have a predictable outcome because it's based on a release of yesterday night and on a module that up",
    "start": "167760",
    "end": "175040"
  },
  {
    "text": "to yesterday was declared experimental so anything might go wrong",
    "start": "175040",
    "end": "180319"
  },
  {
    "text": "and bear with me if there are bugs on the we'll try to fix on the fly",
    "start": "180319",
    "end": "186560"
  },
  {
    "text": "in any case let's keep the discussion ongoing um i'm open to any question at",
    "start": "186560",
    "end": "192080"
  },
  {
    "text": "any point in time any suggestion or or anything that you guys want to want to discuss",
    "start": "192080",
    "end": "198560"
  },
  {
    "text": "otherwise i'll begin screen sharing and [Music]",
    "start": "198560",
    "end": "205599"
  },
  {
    "text": "this should be the note package can everybody see my screen can everybody hear me fine",
    "start": "205599",
    "end": "213840"
  },
  {
    "text": "dude show a few hands maybe okay i see something in the chat",
    "start": "214720",
    "end": "220799"
  },
  {
    "text": "all good here perfect so first of all we are in the in the",
    "start": "220799",
    "end": "226400"
  },
  {
    "text": "node uh package of the ecosystem that you find on the effect organization under",
    "start": "226400",
    "end": "233920"
  },
  {
    "text": "the node well it's called simply not",
    "start": "233920",
    "end": "239040"
  },
  {
    "text": "this package is a simple wrapper around node js that at the",
    "start": "239040",
    "end": "244560"
  },
  {
    "text": "moment is really really tiny fundamentally has",
    "start": "244560",
    "end": "250879"
  },
  {
    "text": "some well process is kind of quite an old thing so don't don't even look at",
    "start": "252000",
    "end": "258000"
  },
  {
    "text": "process but it it's basically linking into the to the",
    "start": "258000",
    "end": "263440"
  },
  {
    "text": "std in io and std output but there are far better ways to do this",
    "start": "263440",
    "end": "270080"
  },
  {
    "text": "and we have like a port of z or cli that we're gonna look at in a in a different",
    "start": "270080",
    "end": "276560"
  },
  {
    "text": "edition of effect time next week the interesting part on the node package",
    "start": "276560",
    "end": "283840"
  },
  {
    "text": "up to now has been the run time the runtime is a custom run time",
    "start": "283840",
    "end": "291120"
  },
  {
    "text": "that expose a function run main the the function run main",
    "start": "291120",
    "end": "297600"
  },
  {
    "text": "it's supposed to be used as a as you can guess to execute the main",
    "start": "297600",
    "end": "302720"
  },
  {
    "text": "functional node.js application and why is that interesting because it binds on to the process signals uh it",
    "start": "302720",
    "end": "311600"
  },
  {
    "text": "handles tear down graceful tear down and it",
    "start": "311600",
    "end": "316880"
  },
  {
    "text": "will print out uh a very good trace in case you have some",
    "start": "316880",
    "end": "324240"
  },
  {
    "text": "some error that was not not not handled during the the program execution that could be any sort of exception",
    "start": "324240",
    "end": "331199"
  },
  {
    "text": "any sort of unplanned error that is raised and it sounds simple but if you think what",
    "start": "331199",
    "end": "339520"
  },
  {
    "text": "an error might trigger an error might trigger a sequence of things a sequence of things could be",
    "start": "339520",
    "end": "345280"
  },
  {
    "text": "like i have a an unplanned failure i need to close down the database transactions i need to close down the",
    "start": "345280",
    "end": "350880"
  },
  {
    "text": "database i need to close down the socket connections the http server",
    "start": "350880",
    "end": "356400"
  },
  {
    "text": "and anything else so when you have an error as a response of that you might have another 100",
    "start": "356400",
    "end": "363199"
  },
  {
    "text": "errors where things might go wrong at any point in time when you have something in production",
    "start": "363199",
    "end": "370479"
  },
  {
    "text": "and you have traces enabled this run mean if you have unplanned failures it's gonna render a full cause explaining",
    "start": "370479",
    "end": "377360"
  },
  {
    "text": "precisely what what went through this is actually an interesting point",
    "start": "377360",
    "end": "384639"
  },
  {
    "text": "because um in typescript we were forced to use a compiler plugin to to do compile time",
    "start": "384639",
    "end": "391840"
  },
  {
    "text": "tracing to add compile time traces to the code and zero 2.0 just shipped with the",
    "start": "391840",
    "end": "398080"
  },
  {
    "text": "compiler plugin to do basically exactly the same thing as we were doing for",
    "start": "398080",
    "end": "403280"
  },
  {
    "text": "for a while they have done it for performance reasons because tracing",
    "start": "403280",
    "end": "408400"
  },
  {
    "text": "using reflection is very expensive in the jvm and in in our case it wasn't",
    "start": "408400",
    "end": "415039"
  },
  {
    "text": "it wasn't possible to use reflection at all in in a javascript environment so we",
    "start": "415039",
    "end": "420080"
  },
  {
    "text": "came out to the to the same conclusion but anyway this is the the extent",
    "start": "420080",
    "end": "426639"
  },
  {
    "text": "that the denote package exists up to up to today there is just a little bit of a stream",
    "start": "426639",
    "end": "434080"
  },
  {
    "text": "module which was based on old streams and just drops the stream readable and",
    "start": "434080",
    "end": "441199"
  },
  {
    "text": "stream writable uh interfaces we're probably gonna have to like",
    "start": "441199",
    "end": "447120"
  },
  {
    "text": "we will probably ignore this given the stream module has has changed radically",
    "start": "447120",
    "end": "453919"
  },
  {
    "text": "anyway uh we said the first thing to do is to update the library that was like",
    "start": "453919",
    "end": "459360"
  },
  {
    "text": "released yesterday so let me first pull from the repository",
    "start": "459360",
    "end": "467840"
  },
  {
    "text": "okay here",
    "start": "469280",
    "end": "474599"
  },
  {
    "text": "okay the version great",
    "start": "480560",
    "end": "486879"
  },
  {
    "text": "at some point in time i'm gonna have to upgrade to yarn three here it's wildly",
    "start": "489120",
    "end": "495199"
  },
  {
    "text": "better but for the time being let's just update",
    "start": "495199",
    "end": "501520"
  },
  {
    "text": "effect",
    "start": "501520",
    "end": "504520"
  },
  {
    "text": "should go up to version 46",
    "start": "508960",
    "end": "514479"
  },
  {
    "text": "and version 46 here good moment to discuss versioning",
    "start": "517760",
    "end": "522880"
  },
  {
    "text": "effect the api hasn't yet been declared stable 1.0",
    "start": "522880",
    "end": "529680"
  },
  {
    "text": "so up until we have a 1.0 release you should expect breaking changes on on miners",
    "start": "529680",
    "end": "538080"
  },
  {
    "text": "and features on on patches when we get to the point of declaring",
    "start": "538080",
    "end": "543920"
  },
  {
    "text": "1.0 any minor change will be backward compatible",
    "start": "543920",
    "end": "549600"
  },
  {
    "text": "but clearly we well we based our initial scope on zero 1.0",
    "start": "549600",
    "end": "556160"
  },
  {
    "text": "but before we were ready to be on par with 1.0",
    "start": "556160",
    "end": "562880"
  },
  {
    "text": "02.0 almost came out and there are some major changes around how some data types",
    "start": "562880",
    "end": "569519"
  },
  {
    "text": "are encoded and it made more sense to like extend a little bit the scope and",
    "start": "569519",
    "end": "575120"
  },
  {
    "text": "directly port stuff from from 0 2.0 so we didn't have to work it twice",
    "start": "575120",
    "end": "581920"
  },
  {
    "text": "anyway we plan to uh to detach a stable uh a stable branch in",
    "start": "581920",
    "end": "587600"
  },
  {
    "text": "a matter of like a month and a half maybe by end of the year we have it",
    "start": "587600",
    "end": "592880"
  },
  {
    "text": "that's planned of course like like anything in open source it can sleep a little bit",
    "start": "592880",
    "end": "597920"
  },
  {
    "text": "in in any case we shouldn't expect any any major change it's most behind the scenes uh encoding",
    "start": "597920",
    "end": "606000"
  },
  {
    "text": "of how the fiber works a little bit of optimization and some",
    "start": "606000",
    "end": "613040"
  },
  {
    "text": "renames on combinators that are becoming more like",
    "start": "613040",
    "end": "619040"
  },
  {
    "text": "more user-friendly i i would say naming as you know is a hard thing and",
    "start": "619040",
    "end": "625440"
  },
  {
    "text": "the zeo ecosystem has done a great job in simplifying names",
    "start": "625440",
    "end": "630560"
  },
  {
    "text": "clearly it wasn't uh like a one-month operation so between 1.0 and 2.0 there",
    "start": "630560",
    "end": "636000"
  },
  {
    "text": "was a big chunk of renames keep in mind zeo had preserved a stable 1.0 release",
    "start": "636000",
    "end": "644000"
  },
  {
    "text": "so they packed up all the changes in 2.0 and we will",
    "start": "644000",
    "end": "649760"
  },
  {
    "text": "roughly be releasing 1.0 stable a month and a half",
    "start": "649760",
    "end": "655279"
  },
  {
    "text": "later than the 2.0 0 is released",
    "start": "655279",
    "end": "660480"
  },
  {
    "text": "anyway we have updated let's try",
    "start": "660480",
    "end": "667200"
  },
  {
    "text": "build and run the tests i don't know if something will break",
    "start": "667200",
    "end": "672480"
  },
  {
    "text": "because of the breaking changes or not it shouldn't",
    "start": "672480",
    "end": "679600"
  },
  {
    "text": "okay builds there's a very good chance also the tests are gonna pass straight away then",
    "start": "686640",
    "end": "696120"
  },
  {
    "text": "oh you see that for example is a is an output that you would",
    "start": "706480",
    "end": "712079"
  },
  {
    "text": "receive if something goes wrong using the the rendering from from run main",
    "start": "712079",
    "end": "718000"
  },
  {
    "text": "so this is clearly a planned test because it passes but this is the type of output you receive",
    "start": "718000",
    "end": "725120"
  },
  {
    "text": "you see that is the precise error the the point where yeah the the competition was supposed to",
    "start": "725120",
    "end": "731920"
  },
  {
    "text": "go and all the traces the execution trace",
    "start": "731920",
    "end": "736959"
  },
  {
    "text": "that goes back and basically tells you the the path that the code went through before",
    "start": "736959",
    "end": "742560"
  },
  {
    "text": "raising uh raising the exception this is a simple case you might have",
    "start": "742560",
    "end": "748000"
  },
  {
    "text": "that this fiber is caught by a parent that is fought by another parent and you get an ancestry",
    "start": "748000",
    "end": "755360"
  },
  {
    "text": "uh an ancestry three anyway it seems everything is passing",
    "start": "755360",
    "end": "761519"
  },
  {
    "text": "fantastic no breaking changes on on the surface of this library",
    "start": "761519",
    "end": "767200"
  },
  {
    "text": "good index dot yes",
    "start": "767200",
    "end": "774720"
  },
  {
    "text": "so here uh this is a pattern that where you're gonna see many many times in in",
    "start": "775519",
    "end": "782560"
  },
  {
    "text": "application development and it's a case where you have some sort of external api in this case the you know js file system",
    "start": "782560",
    "end": "790720"
  },
  {
    "text": "and you want to expose a wrapper in your code that",
    "start": "790720",
    "end": "796880"
  },
  {
    "text": "fundamentally access the this external api in a controlled manner",
    "start": "796880",
    "end": "803120"
  },
  {
    "text": "returning well-defined effects that describes what the operations are doing",
    "start": "803120",
    "end": "810560"
  },
  {
    "text": "so let's usually you start with simply importing the",
    "start": "810560",
    "end": "817680"
  },
  {
    "text": "the library this case it's it's directly node",
    "start": "817680",
    "end": "823440"
  },
  {
    "text": "otherwise it may come from an external package and the first thing to to do is",
    "start": "823440",
    "end": "828800"
  },
  {
    "text": "like begin to explore how the api works now i know",
    "start": "828800",
    "end": "834399"
  },
  {
    "text": "already a little bit of how the file system works so i won't",
    "start": "834399",
    "end": "839760"
  },
  {
    "text": "go into too many details on the on the api discovery",
    "start": "839760",
    "end": "845199"
  },
  {
    "text": "but i think the first thing we would like to expose is something like",
    "start": "845199",
    "end": "850320"
  },
  {
    "text": "it's a file system so something to write to a file and something to read from a file but let's start very easy and let's",
    "start": "850320",
    "end": "856880"
  },
  {
    "text": "let's model it so let's see what right",
    "start": "856880",
    "end": "862720"
  },
  {
    "text": "right file we have a few variants there's an async variant a synchronous",
    "start": "862720",
    "end": "867839"
  },
  {
    "text": "variant here i always advise to use",
    "start": "867839",
    "end": "873279"
  },
  {
    "text": "like a sync variant for the second part of today you're like",
    "start": "873279",
    "end": "878959"
  },
  {
    "text": "in a next session if if we if it takes too too long",
    "start": "878959",
    "end": "884880"
  },
  {
    "text": "i would like to take a look how to uh how to do that in a streaming fashion i",
    "start": "884880",
    "end": "890000"
  },
  {
    "text": "know in node.js you have a low level api where you can directly control file handles and just write",
    "start": "890000",
    "end": "897519"
  },
  {
    "text": "and and read buffers that would be probably integrated with stream so we will go complexify",
    "start": "897519",
    "end": "906480"
  },
  {
    "text": "bit by bit let's start by trying to copy this right file in a",
    "start": "906480",
    "end": "914480"
  },
  {
    "text": "in an effect fashion first of all we see that uh it has",
    "start": "914480",
    "end": "920560"
  },
  {
    "text": "various overloads but let's take like one",
    "start": "920560",
    "end": "927680"
  },
  {
    "text": "one that is more more precise which seems to be",
    "start": "927680",
    "end": "935600"
  },
  {
    "text": "this one see it's called that paste",
    "start": "936720",
    "end": "943199"
  },
  {
    "text": "there is a promise version",
    "start": "943199",
    "end": "948160"
  },
  {
    "text": "but my advice is when whenever you can try to avoid using",
    "start": "949040",
    "end": "955839"
  },
  {
    "text": "native promises what's the what's the problem with native promises",
    "start": "955839",
    "end": "961440"
  },
  {
    "text": "you have absolutely no idea about the the error type whether in a holdback fashion you have",
    "start": "961440",
    "end": "968720"
  },
  {
    "text": "the you at least have the error type and",
    "start": "968720",
    "end": "973839"
  },
  {
    "text": "promises are like the slowest thing you can you can do in a in a node.js environment and you",
    "start": "973839",
    "end": "981199"
  },
  {
    "text": "know in a javascript environment well not the slowest generators are",
    "start": "981199",
    "end": "987440"
  },
  {
    "text": "slower and if you're using the sync away that's based on generators behind the scenes so even that will be slower than",
    "start": "987440",
    "end": "994720"
  },
  {
    "text": "a playing promise but playing callbacks are are the fastest",
    "start": "994720",
    "end": "1001279"
  },
  {
    "text": "thing in in general the problem with using the callback-based api is that of course",
    "start": "1001279",
    "end": "1008240"
  },
  {
    "text": "it's terrible to use directly so you would need some sort of wrapper but anyway let's let's take a look uh that",
    "start": "1008240",
    "end": "1015680"
  },
  {
    "text": "let's copy the definition so we have like a function",
    "start": "1015680",
    "end": "1022880"
  },
  {
    "text": "write file this is the set of parameters",
    "start": "1023120",
    "end": "1030240"
  },
  {
    "text": "and is it within a fs yes",
    "start": "1031360",
    "end": "1037959"
  },
  {
    "text": "fs okay the pullback we don't want to take it from from there",
    "start": "1039760",
    "end": "1044798"
  },
  {
    "text": "but we want to specify it",
    "start": "1044799",
    "end": "1049079"
  },
  {
    "text": "options here we have eventually error and if there is an error we have",
    "start": "1060960",
    "end": "1068400"
  },
  {
    "text": "to do something else we are fine to go",
    "start": "1068400",
    "end": "1076240"
  },
  {
    "text": "so this this is how we would call these this api",
    "start": "1076320",
    "end": "1081760"
  },
  {
    "text": "we know it's asynchronous and it doesn't seem to return any",
    "start": "1081760",
    "end": "1087840"
  },
  {
    "text": "facility to cancel the the operation if",
    "start": "1087840",
    "end": "1092880"
  },
  {
    "text": "if it's ongoing so for cases like that you have",
    "start": "1092880",
    "end": "1099760"
  },
  {
    "text": "let's import effect for soul",
    "start": "1103200",
    "end": "1107639"
  },
  {
    "text": "we have a combination that's called effect async which will be renamed to simply async",
    "start": "1111280",
    "end": "1118080"
  },
  {
    "text": "because effector sync is like unnecessarily verbose",
    "start": "1118080",
    "end": "1123840"
  },
  {
    "text": "here we have three type parameters to specify let's check the signature for a second",
    "start": "1123840",
    "end": "1132080"
  },
  {
    "text": "it passes it takes a registered parameter that that parameter is a",
    "start": "1133440",
    "end": "1140080"
  },
  {
    "text": "callback is a function it's a closure sorry and",
    "start": "1140080",
    "end": "1145280"
  },
  {
    "text": "the in that scope you have a cd",
    "start": "1145280",
    "end": "1150480"
  },
  {
    "text": "function that roughly takes an effect as a as an input",
    "start": "1150480",
    "end": "1157120"
  },
  {
    "text": "so this is basically an asynchronous you",
    "start": "1157120",
    "end": "1162160"
  },
  {
    "text": "within the fiber when when you get to the point of executing this effect this register function will be triggered",
    "start": "1162160",
    "end": "1169679"
  },
  {
    "text": "and by triggering that that procedure uh anything that is inside will will get",
    "start": "1169679",
    "end": "1175919"
  },
  {
    "text": "triggered and here we have our resume",
    "start": "1175919",
    "end": "1182880"
  },
  {
    "text": "our resume function and that takes now an effect of unknown",
    "start": "1184640",
    "end": "1191520"
  },
  {
    "text": "typescript inference works left to right which means that",
    "start": "1191520",
    "end": "1198000"
  },
  {
    "text": "if we do anything within the body of this function",
    "start": "1198000",
    "end": "1203280"
  },
  {
    "text": "typescript won't be able to infer these three types from whatever is inside",
    "start": "1204159",
    "end": "1210159"
  },
  {
    "text": "so in constructors of this type and for example",
    "start": "1210159",
    "end": "1215760"
  },
  {
    "text": "one that you might be familiar with is the promise constructor where you have a",
    "start": "1215760",
    "end": "1222080"
  },
  {
    "text": "a resolved function and um",
    "start": "1222080",
    "end": "1228320"
  },
  {
    "text": "a reject function if you if you do it like that",
    "start": "1228320",
    "end": "1234559"
  },
  {
    "text": "the promise will be a promise of anchor because again there's no way of knowing",
    "start": "1234559",
    "end": "1241440"
  },
  {
    "text": "the the type here so in those cases you have to annotate explicitly for example let's make it a",
    "start": "1241440",
    "end": "1248000"
  },
  {
    "text": "promise of a number and then we see that this result function resolves with a number",
    "start": "1248000",
    "end": "1254559"
  },
  {
    "text": "in our case we have three types parameter and one is the environment",
    "start": "1254559",
    "end": "1260320"
  },
  {
    "text": "the first one the second is the error channel the errors that our application might raise",
    "start": "1260320",
    "end": "1266400"
  },
  {
    "text": "and the third one is the is the output is the output channel",
    "start": "1266400",
    "end": "1272640"
  },
  {
    "text": "so in this case we don't really want any environment we don't need to access any any external",
    "start": "1272640",
    "end": "1280400"
  },
  {
    "text": "anything external the error we know the type of the error it's a nodejs",
    "start": "1281200",
    "end": "1288039"
  },
  {
    "text": "error number exception and the output is a void",
    "start": "1290640",
    "end": "1296559"
  },
  {
    "text": "because we are writing to a file and and that doesn't doesn't return anything",
    "start": "1296559",
    "end": "1302320"
  },
  {
    "text": "so in this case we see that our resume function now takes an effect of unknown",
    "start": "1302320",
    "end": "1308400"
  },
  {
    "text": "our correct exception and and avoid so in this case we have an error",
    "start": "1308400",
    "end": "1316720"
  },
  {
    "text": "and we can say resume with a failure",
    "start": "1316720",
    "end": "1324320"
  },
  {
    "text": "of error otherwise we resume",
    "start": "1324320",
    "end": "1331760"
  },
  {
    "text": "with a unit effect is a value",
    "start": "1331760",
    "end": "1336799"
  },
  {
    "text": "so you have to return it regarding cancellation rat file option can take an award signal",
    "start": "1336799",
    "end": "1343760"
  },
  {
    "text": "thank you that's that's another interesting thing to uh to integrate",
    "start": "1343760",
    "end": "1349280"
  },
  {
    "text": "i don't know if in the like in the context of a node.js",
    "start": "1349280",
    "end": "1358480"
  },
  {
    "text": "thing would be smart to do because uh abort signal is not is not yet",
    "start": "1358559",
    "end": "1364880"
  },
  {
    "text": "standard in in node.js so i'm not sure if i would if i would",
    "start": "1364880",
    "end": "1369919"
  },
  {
    "text": "use it for like for the for the library or we might",
    "start": "1369919",
    "end": "1375039"
  },
  {
    "text": "use it and you can only use it if you if you are",
    "start": "1375039",
    "end": "1380080"
  },
  {
    "text": "providing like a polyfill",
    "start": "1380080",
    "end": "1385158"
  },
  {
    "text": "takes an abort signal or otherwise how how does it work for",
    "start": "1388559",
    "end": "1395440"
  },
  {
    "text": "for node.js could i",
    "start": "1395440",
    "end": "1398799"
  },
  {
    "text": "like the abort controller i i believe is is not yet a standard but",
    "start": "1400720",
    "end": "1407360"
  },
  {
    "text": "what does the signal have to do when provided the responding award controller can be",
    "start": "1407919",
    "end": "1413120"
  },
  {
    "text": "used to cancel auctions",
    "start": "1413120",
    "end": "1420240"
  },
  {
    "text": "what signal",
    "start": "1421600",
    "end": "1425080"
  },
  {
    "text": "does anybody know how how the the abort signal actually works",
    "start": "1445120",
    "end": "1450880"
  },
  {
    "text": "in in node.js is there a way i can really trigger it without an abort controller",
    "start": "1450880",
    "end": "1459840"
  },
  {
    "text": "is it like an event emitter or some sort of things like that",
    "start": "1464240",
    "end": "1469679"
  },
  {
    "text": "and check it on google",
    "start": "1469679",
    "end": "1473480"
  },
  {
    "text": "abort signals",
    "start": "1476880",
    "end": "1480520"
  },
  {
    "text": "what but eventually okay it's done with event listeners",
    "start": "1498799",
    "end": "1503919"
  },
  {
    "text": "so ideally we can make a small polyfill even even internally",
    "start": "1503919",
    "end": "1509039"
  },
  {
    "text": "definitely a good thing for for eventually another another session",
    "start": "1509039",
    "end": "1515799"
  },
  {
    "text": "okay this is this is done and and we can see that now our our function returns",
    "start": "1527679",
    "end": "1535520"
  },
  {
    "text": "like the the proper the proper type",
    "start": "1535520",
    "end": "1540480"
  },
  {
    "text": "now here the the first thing that we usually want to do is like this is sort of an external",
    "start": "1541120",
    "end": "1549200"
  },
  {
    "text": "exception and those are not not usually typed objects not easy to recognize",
    "start": "1549200",
    "end": "1556480"
  },
  {
    "text": "and we are going to be dealing with unions of errors so usually a good way to expose that is via tagged objects",
    "start": "1556480",
    "end": "1566159"
  },
  {
    "text": "so let's build attacked object for for that error case",
    "start": "1566159",
    "end": "1572320"
  },
  {
    "text": "stands tagged",
    "start": "1576559",
    "end": "1584440"
  },
  {
    "text": "we have a case module which is for expose attacked",
    "start": "1584880",
    "end": "1591039"
  },
  {
    "text": "utility to create tab dot objects",
    "start": "1591039",
    "end": "1596519"
  },
  {
    "text": "we only uh ever no js",
    "start": "1603760",
    "end": "1612120"
  },
  {
    "text": "and we want our thing to to return the proper the proper error so",
    "start": "1613200",
    "end": "1620480"
  },
  {
    "text": "here we will like just create",
    "start": "1620480",
    "end": "1625480"
  },
  {
    "text": "the exception specifying the error",
    "start": "1627600",
    "end": "1632880"
  },
  {
    "text": "so that's already something",
    "start": "1638559",
    "end": "1643440"
  },
  {
    "text": "we have our our function we could use it",
    "start": "1644960",
    "end": "1651760"
  },
  {
    "text": "like let's try to",
    "start": "1651760",
    "end": "1655640"
  },
  {
    "text": "let's use this function in a program five",
    "start": "1656880",
    "end": "1663120"
  },
  {
    "text": "write file let's say i want to write a local file",
    "start": "1665520",
    "end": "1671679"
  },
  {
    "text": "log.txt i want hello word",
    "start": "1671679",
    "end": "1680320"
  },
  {
    "text": "and i want to specify um some options like",
    "start": "1680880",
    "end": "1687039"
  },
  {
    "text": "mode or is it flags",
    "start": "1687360",
    "end": "1692559"
  },
  {
    "text": "flags dot a should be append or stuff like that",
    "start": "1692559",
    "end": "1698640"
  },
  {
    "text": "another good point that for for the future would be to improve and expose a more",
    "start": "1698640",
    "end": "1705120"
  },
  {
    "text": "like refined api where you have like append to file",
    "start": "1705120",
    "end": "1710480"
  },
  {
    "text": "that behind the scenes uses this lower level thing because clearly",
    "start": "1710480",
    "end": "1715760"
  },
  {
    "text": "here we are borrowing types from node.js and you see they are not they're not usually",
    "start": "1715760",
    "end": "1722240"
  },
  {
    "text": "usually the best so anyway that's that's a low level that's a low level facility for now",
    "start": "1722240",
    "end": "1729520"
  },
  {
    "text": "fonts name say this is our this is our main program you see it",
    "start": "1729520",
    "end": "1736240"
  },
  {
    "text": "might it might trigger an exception of that type let's let's use run",
    "start": "1736240",
    "end": "1743440"
  },
  {
    "text": "main on it",
    "start": "1743440",
    "end": "1746559"
  },
  {
    "text": "from the runtime and let's",
    "start": "1748480",
    "end": "1754880"
  },
  {
    "text": "chain it to a like a positive message",
    "start": "1754880",
    "end": "1760159"
  },
  {
    "text": "succeed with if we have completed",
    "start": "1760159",
    "end": "1764919"
  },
  {
    "text": "road to file",
    "start": "1766880",
    "end": "1770240"
  },
  {
    "text": "that should work let's see if i have",
    "start": "1772000",
    "end": "1778480"
  },
  {
    "text": "demo environment on where you can have it",
    "start": "1778480",
    "end": "1784799"
  },
  {
    "text": "yes note no i don't have",
    "start": "1787760",
    "end": "1793039"
  },
  {
    "text": "we will configure it let me have a look",
    "start": "1793039",
    "end": "1798720"
  },
  {
    "text": "if i have it in core",
    "start": "1798720",
    "end": "1802600"
  },
  {
    "text": "oh well let's let's make it",
    "start": "1817279",
    "end": "1823240"
  },
  {
    "text": "[Music] yes",
    "start": "1825800",
    "end": "1830120"
  },
  {
    "text": "actually i have it in a different place",
    "start": "1838159",
    "end": "1843960"
  },
  {
    "text": "cjs so we are using",
    "start": "1871919",
    "end": "1878360"
  },
  {
    "text": "the build config the compiler we use the t type script which enables compiler",
    "start": "1878640",
    "end": "1885120"
  },
  {
    "text": "plugins we don't really care about the warnings",
    "start": "1885120",
    "end": "1891200"
  },
  {
    "text": "neither on the esm and we run",
    "start": "1891200",
    "end": "1896320"
  },
  {
    "text": "file system slash index this is just to run it locally and see",
    "start": "1896320",
    "end": "1903600"
  },
  {
    "text": "if it works",
    "start": "1903600",
    "end": "1907000"
  },
  {
    "text": "and of course it doesn't",
    "start": "1911440",
    "end": "1914720"
  },
  {
    "text": "why it doesn't work",
    "start": "1918080",
    "end": "1921840"
  },
  {
    "text": "it's common.js output",
    "start": "1924480",
    "end": "1928679"
  },
  {
    "text": "okay that's strange",
    "start": "1935840",
    "end": "1939039"
  },
  {
    "text": "yes",
    "start": "1941600",
    "end": "1944600"
  },
  {
    "text": "cannot find [Music]",
    "start": "1962399",
    "end": "1966650"
  },
  {
    "text": "more",
    "start": "1967519",
    "end": "1970519"
  },
  {
    "text": "why is it complaining",
    "start": "1982000",
    "end": "1985039"
  },
  {
    "text": "i think you have three files t is config json and then there's two oh yeah you know",
    "start": "1988159",
    "end": "1994159"
  },
  {
    "text": "cjs cjs missing",
    "start": "1994159",
    "end": "2000279"
  },
  {
    "text": "okay it doesn't seem to",
    "start": "2004880",
    "end": "2010960"
  },
  {
    "text": "like wait or log anything what's",
    "start": "2010960",
    "end": "2017398"
  },
  {
    "text": "no it doesn't log anything at all",
    "start": "2026480",
    "end": "2031158"
  },
  {
    "text": "because i'm obviously not supposed to do this type of stuff in a library",
    "start": "2048639",
    "end": "2053919"
  },
  {
    "text": "now why this is not",
    "start": "2059280",
    "end": "2062480"
  },
  {
    "text": "it's not complaining but it's neither",
    "start": "2068399",
    "end": "2072838"
  },
  {
    "text": "okay that's awkward let's use the jest",
    "start": "2079760",
    "end": "2087320"
  },
  {
    "text": "let's do things in the same way that we are supposed to in a library",
    "start": "2088720",
    "end": "2095720"
  },
  {
    "text": "okay",
    "start": "2107839",
    "end": "2110400"
  },
  {
    "text": "best file system",
    "start": "2114400",
    "end": "2121920"
  },
  {
    "text": "test yes",
    "start": "2122079",
    "end": "2126599"
  },
  {
    "text": "describe dfs suite it",
    "start": "2147760",
    "end": "2153760"
  },
  {
    "text": "writes oh did five wrote a file by any chance",
    "start": "2153760",
    "end": "2161040"
  },
  {
    "text": "no it doesn't it doesn't seems like it did",
    "start": "2161040",
    "end": "2166880"
  },
  {
    "text": "no it did not",
    "start": "2167200",
    "end": "2170838"
  },
  {
    "text": "it's awkward it's going to be an asynchronous test and at the moment we're just going to",
    "start": "2175280",
    "end": "2180480"
  },
  {
    "text": "write the file",
    "start": "2180480",
    "end": "2184920"
  },
  {
    "text": "so here we had a program",
    "start": "2191680",
    "end": "2195119"
  },
  {
    "text": "to write a file and",
    "start": "2196720",
    "end": "2201838"
  },
  {
    "text": "so let's say const",
    "start": "2232960",
    "end": "2236240"
  },
  {
    "text": "actually let's write it like a test would be",
    "start": "2241280",
    "end": "2245838"
  },
  {
    "text": "and run it to a promise a wait on that",
    "start": "2251280",
    "end": "2258880"
  },
  {
    "text": "let's try to like pick a stable a stable file on the on the file system",
    "start": "2259680",
    "end": "2267359"
  },
  {
    "text": "and let's do it brutally with a with a process",
    "start": "2267359",
    "end": "2274280"
  },
  {
    "text": "let's say that this is our five part",
    "start": "2302240",
    "end": "2306920"
  },
  {
    "text": "we expect let's use the plain knot",
    "start": "2316079",
    "end": "2323119"
  },
  {
    "text": "module to do the check for now first one",
    "start": "2323119",
    "end": "2328880"
  },
  {
    "text": "exists file path i expect it",
    "start": "2328880",
    "end": "2336400"
  },
  {
    "text": "to be truthy and if it exists i also want to clean it up",
    "start": "2338880",
    "end": "2348599"
  },
  {
    "text": "this is an awful way to write a test by by all means we should do way better",
    "start": "2356720",
    "end": "2362960"
  },
  {
    "text": "but at least i want to see if everything works test",
    "start": "2362960",
    "end": "2371240"
  },
  {
    "text": "okay the test plus and so the functionality works and it was a",
    "start": "2397040",
    "end": "2403280"
  },
  {
    "text": "little bit of a problem on the ts node from config which i'll have to the back",
    "start": "2403280",
    "end": "2409040"
  },
  {
    "text": "by the way you have a in the in the effect yes work you have a playground link which is a fully configured",
    "start": "2409040",
    "end": "2416160"
  },
  {
    "text": "module to bootstrap in in in client up in client code user code",
    "start": "2416160",
    "end": "2422079"
  },
  {
    "text": "this is clearly hooking up into a library and and doing things on the fly that we are not even supposed to do",
    "start": "2422079",
    "end": "2428480"
  },
  {
    "text": "so i don't even know why i expected it to work anyway we have removed",
    "start": "2428480",
    "end": "2434000"
  },
  {
    "text": "the ram scene and somewhere we should have our log",
    "start": "2434000",
    "end": "2439040"
  },
  {
    "text": "with our hello world really we don't want to like",
    "start": "2439040",
    "end": "2445520"
  },
  {
    "text": "for uh for a test on on this level at this low library",
    "start": "2445520",
    "end": "2451680"
  },
  {
    "text": "inside the internal library you you can even survive with a with a test of this kind just to assert that this fs.write",
    "start": "2451680",
    "end": "2459920"
  },
  {
    "text": "works but in your client app or in your code you don't really want to",
    "start": "2459920",
    "end": "2466400"
  },
  {
    "text": "like write this is a side effect to test a side",
    "start": "2466400",
    "end": "2471520"
  },
  {
    "text": "effect we usually want to test that our program will write a file you don't really want",
    "start": "2471520",
    "end": "2477520"
  },
  {
    "text": "to write the file to do that we need to do something else which was point two of the",
    "start": "2477520",
    "end": "2484720"
  },
  {
    "text": "of the conversation which is begin to use the environment uh",
    "start": "2484720",
    "end": "2489920"
  },
  {
    "text": "parameter and the the dependency injection side of uh of effect yes",
    "start": "2489920",
    "end": "2498240"
  },
  {
    "text": "so we see that here when we hold the right file function we take our file",
    "start": "2498800",
    "end": "2504319"
  },
  {
    "text": "system straight away from the external module so there's basically no way to patch in",
    "start": "2504319",
    "end": "2511040"
  },
  {
    "text": "between except doing monkey patching on the on the module and it's definitely not something we",
    "start": "2511040",
    "end": "2518240"
  },
  {
    "text": "we want to do so how do we how how we avoid that",
    "start": "2518240",
    "end": "2524960"
  },
  {
    "text": "we need to create a service what what is a service a service is simply an",
    "start": "2524960",
    "end": "2531200"
  },
  {
    "text": "interface",
    "start": "2531200",
    "end": "2534200"
  },
  {
    "text": "let's call it fs for example",
    "start": "2536400",
    "end": "2540400"
  },
  {
    "text": "you have a service id that is used to identify",
    "start": "2541920",
    "end": "2548000"
  },
  {
    "text": "the service and",
    "start": "2548000",
    "end": "2552960"
  },
  {
    "text": "well let's introduce the service id slightly later",
    "start": "2553280",
    "end": "2558640"
  },
  {
    "text": "anyway we said we have a we have a function let's take the signature of this function",
    "start": "2559680",
    "end": "2566400"
  },
  {
    "text": "precisely as it is and we want to say that here write file",
    "start": "2566400",
    "end": "2573359"
  },
  {
    "text": "so this service exposes the functionality to",
    "start": "2577280",
    "end": "2582800"
  },
  {
    "text": "to write a file we could just use this type",
    "start": "2582800",
    "end": "2588880"
  },
  {
    "text": "of definitions but you usually want your services to be isolated and not colliding with with",
    "start": "2588880",
    "end": "2595920"
  },
  {
    "text": "anything else for for this you have we have a facility in effect that is",
    "start": "2595920",
    "end": "2601599"
  },
  {
    "text": "very similar to the to the zeo one the first thing is to extend",
    "start": "2601599",
    "end": "2608800"
  },
  {
    "text": "this is new the the new api you need to extend the service",
    "start": "2610240",
    "end": "2618560"
  },
  {
    "text": "and inside service which is in pes or",
    "start": "2619119",
    "end": "2625200"
  },
  {
    "text": "in into service you have to pass a symbol this symbol will unique yet we uniquely",
    "start": "2625200",
    "end": "2632560"
  },
  {
    "text": "identify your service both at the type level and within the",
    "start": "2632560",
    "end": "2637599"
  },
  {
    "text": "environment so let's create",
    "start": "2637599",
    "end": "2643560"
  },
  {
    "text": "like dfs symbol this is plain javascript and in typescript when you assign it to",
    "start": "2651200",
    "end": "2658560"
  },
  {
    "text": "a constant it will have the type unique symbol",
    "start": "2658560",
    "end": "2665760"
  },
  {
    "text": "that fundamentally uh maps to like if i have even two unique symbols",
    "start": "2666560",
    "end": "2673280"
  },
  {
    "text": "with the same name in a different file they want they will be considered",
    "start": "2673280",
    "end": "2678640"
  },
  {
    "text": "different an advice here if you use amd modules and things that might might",
    "start": "2678640",
    "end": "2686240"
  },
  {
    "text": "end up being duplicated even even esm modules could could end up",
    "start": "2686240",
    "end": "2691680"
  },
  {
    "text": "being duplicated you wanna uh you wanna use symbol4",
    "start": "2691680",
    "end": "2697839"
  },
  {
    "text": "and use a specific identifier which could be for example effect yes node",
    "start": "2697839",
    "end": "2704560"
  },
  {
    "text": "file system fs seen",
    "start": "2704560",
    "end": "2710800"
  },
  {
    "text": "all just like like a convention",
    "start": "2710800",
    "end": "2715960"
  },
  {
    "text": "and in this way this interface now let's take a look at",
    "start": "2719280",
    "end": "2724800"
  },
  {
    "text": "what uh what what's inside here inside that",
    "start": "2724800",
    "end": "2730160"
  },
  {
    "text": "export declare constx fs let's look what's inside fs",
    "start": "2730160",
    "end": "2737920"
  },
  {
    "text": "there are two things a write file it's the function that we know of",
    "start": "2737920",
    "end": "2743359"
  },
  {
    "text": "and there is a service id which is again simply of the type",
    "start": "2743359",
    "end": "2749040"
  },
  {
    "text": "fs symbol doing this is precisely equivalent",
    "start": "2749040",
    "end": "2754160"
  },
  {
    "text": "to do this read only service id",
    "start": "2754160",
    "end": "2761839"
  },
  {
    "text": "of this specific type we have exactly the same the same result",
    "start": "2762720",
    "end": "2771359"
  },
  {
    "text": "let's use this notation for now we're going to improve on it a little bit",
    "start": "2771359",
    "end": "2778240"
  },
  {
    "text": "but that's the idea the second thing we need to create is a way for for us to",
    "start": "2778319",
    "end": "2783520"
  },
  {
    "text": "identify the service uniquely within the environment this stock",
    "start": "2783520",
    "end": "2788880"
  },
  {
    "text": "helps if you have like two services with exactly the same functions to",
    "start": "2788880",
    "end": "2794319"
  },
  {
    "text": "distinguish between one and the other but now we have to identify it in the in",
    "start": "2794319",
    "end": "2799680"
  },
  {
    "text": "the environment and my advice is to call the tag with exactly the same name as",
    "start": "2799680",
    "end": "2806079"
  },
  {
    "text": "the as the interface that defines the service it will become apparent",
    "start": "2806079",
    "end": "2812160"
  },
  {
    "text": "why a little bit later but here the idea is then we use a tag",
    "start": "2812160",
    "end": "2818800"
  },
  {
    "text": "of fs",
    "start": "2818800",
    "end": "2821599"
  },
  {
    "text": "it's not imported",
    "start": "2825680",
    "end": "2829160"
  },
  {
    "text": "yeah it's now here we don't need service any longer and in here you have to pass again",
    "start": "2834480",
    "end": "2842079"
  },
  {
    "text": "the symbol this",
    "start": "2842079",
    "end": "2847359"
  },
  {
    "text": "is a tag of fs let's see what's inside",
    "start": "2847359",
    "end": "2853119"
  },
  {
    "text": "a tag there is an off function that transforms",
    "start": "2853119",
    "end": "2858880"
  },
  {
    "text": "your service to this thing called has",
    "start": "2858880",
    "end": "2864240"
  },
  {
    "text": "fs has fs",
    "start": "2864240",
    "end": "2869280"
  },
  {
    "text": "let's try to do this declare const",
    "start": "2869440",
    "end": "2875920"
  },
  {
    "text": "has",
    "start": "2876400",
    "end": "2878720"
  },
  {
    "text": "let's see what's inside has that that doesn't seem to be",
    "start": "2885680",
    "end": "2892240"
  },
  {
    "text": "anything at all it's because the auto completion doesn't",
    "start": "2892240",
    "end": "2897680"
  },
  {
    "text": "doesn't work with with symbols so easily but if we",
    "start": "2897680",
    "end": "2905040"
  },
  {
    "text": "index on fs symbol we have our write file function",
    "start": "2905040",
    "end": "2911760"
  },
  {
    "text": "why have we done that if we have a hundred services",
    "start": "2911760",
    "end": "2917040"
  },
  {
    "text": "a hundred heads can be intersected together without ever colliding",
    "start": "2917599",
    "end": "2925039"
  },
  {
    "text": "here i can have let's say that this is my end environment",
    "start": "2926319",
    "end": "2932800"
  },
  {
    "text": "this is has fs and has",
    "start": "2932800",
    "end": "2937599"
  },
  {
    "text": "clock which is something from the from the internal library",
    "start": "2937920",
    "end": "2945558"
  },
  {
    "text": "it's called clock id i still need to standardize",
    "start": "2961599",
    "end": "2967200"
  },
  {
    "text": "the way i call internal symbols but you see there are two different",
    "start": "2967200",
    "end": "2973839"
  },
  {
    "text": "services like service",
    "start": "2973839",
    "end": "2979920"
  },
  {
    "text": "id1 this is fs this is the clock id",
    "start": "2980000",
    "end": "2986400"
  },
  {
    "text": "and they both expose totally different functions so this this is heads you almost never",
    "start": "2986480",
    "end": "2993260"
  },
  {
    "text": "[Music] is that roughly equivalent of hassling 0 it is not roughly equivalent it is",
    "start": "2993260",
    "end": "2998480"
  },
  {
    "text": "precisely the same with the difference that zeo encodes has via",
    "start": "2998480",
    "end": "3004880"
  },
  {
    "text": "a map behind the scenes and we use just a structure a structured object but the idea is",
    "start": "3004880",
    "end": "3011440"
  },
  {
    "text": "exactly 100 percent the same question was is that roughly equivalent",
    "start": "3011440",
    "end": "3016960"
  },
  {
    "text": "to has in in zero let's take a look at what what we can do",
    "start": "3016960",
    "end": "3023119"
  },
  {
    "text": "now and it's gonna become apparent why i call this in the same name with the",
    "start": "3023119",
    "end": "3029200"
  },
  {
    "text": "same name of fs export const",
    "start": "3029200",
    "end": "3034240"
  },
  {
    "text": "let's say i want to access",
    "start": "3034240",
    "end": "3039680"
  },
  {
    "text": "service m fs and here i have my",
    "start": "3039680",
    "end": "3047280"
  },
  {
    "text": "fs module that i can call from within the environment",
    "start": "3049920",
    "end": "3055839"
  },
  {
    "text": "now to cool things from within the environment we want to well we could call things directly and",
    "start": "3057520",
    "end": "3064480"
  },
  {
    "text": "we could just straight on go and and begin to use that",
    "start": "3064480",
    "end": "3070640"
  },
  {
    "text": "let's just see the return type of this you'll see that the return type of these says that this is an effect",
    "start": "3073040",
    "end": "3080160"
  },
  {
    "text": "that requires an environment that has the file system in it",
    "start": "3080160",
    "end": "3085839"
  },
  {
    "text": "it might fail for an errano exception so this is make it clear that this",
    "start": "3085839",
    "end": "3092640"
  },
  {
    "text": "effect requires a file system to be provided",
    "start": "3092640",
    "end": "3097838"
  },
  {
    "text": "obviously using the service in this way is not is not nice at all",
    "start": "3098400",
    "end": "3103760"
  },
  {
    "text": "because you would have to type every time access this from the file system use that function",
    "start": "3103760",
    "end": "3109520"
  },
  {
    "text": "and it's extremely verbose so what do we want to do we want to create a wrapper function",
    "start": "3109520",
    "end": "3118280"
  },
  {
    "text": "it's actually the way with that",
    "start": "3129440",
    "end": "3133040"
  },
  {
    "text": "this is going to be fold write file from",
    "start": "3136000",
    "end": "3141119"
  },
  {
    "text": "and we're gonna clean up this later on",
    "start": "3141119",
    "end": "3146640"
  },
  {
    "text": "file data options",
    "start": "3146640",
    "end": "3153838"
  },
  {
    "text": "with that you can directly use that one",
    "start": "3154480",
    "end": "3160559"
  },
  {
    "text": "from n and at this point in time i have a beautiful error and it tells me",
    "start": "3160559",
    "end": "3167119"
  },
  {
    "text": "that roughly",
    "start": "3167119",
    "end": "3171520"
  },
  {
    "text": "there is f has fs is missing within the environment so i have to provide a live",
    "start": "3172880",
    "end": "3180480"
  },
  {
    "text": "implementation of what does it mean to write to a to write profile",
    "start": "3180480",
    "end": "3186640"
  },
  {
    "text": "let's do that let's go on let's use a pipe it's nicer",
    "start": "3186640",
    "end": "3194039"
  },
  {
    "text": "we write our file then we say we want to provide",
    "start": "3202800",
    "end": "3208800"
  },
  {
    "text": "a service we want to provide the fs",
    "start": "3208800",
    "end": "3214559"
  },
  {
    "text": "service and here we need to specify an implementation",
    "start": "3214559",
    "end": "3219599"
  },
  {
    "text": "to specify an implementation we have to use okay the service id which is our symbol",
    "start": "3219599",
    "end": "3225920"
  },
  {
    "text": "and our write file function",
    "start": "3225920",
    "end": "3231760"
  },
  {
    "text": "that is our write file function",
    "start": "3231760",
    "end": "3237240"
  },
  {
    "text": "now if i run into a promise you're gonna notice",
    "start": "3237760",
    "end": "3243440"
  },
  {
    "text": "it works let's double check the types just to understand what goes on behind",
    "start": "3243440",
    "end": "3251119"
  },
  {
    "text": "the scenes this is now an effect that doesn't require any specific environment",
    "start": "3251119",
    "end": "3257280"
  },
  {
    "text": "where before providing this was an effect that required a specific module",
    "start": "3257280",
    "end": "3262559"
  },
  {
    "text": "to be embedded within the environment",
    "start": "3262559",
    "end": "3266559"
  },
  {
    "text": "run promise accepts any effect that required the default environment",
    "start": "3267599",
    "end": "3274880"
  },
  {
    "text": "which contains a clock and a few other things a random service it will have a logger",
    "start": "3274880",
    "end": "3282799"
  },
  {
    "text": "in the future it will have a console in the in the future",
    "start": "3282799",
    "end": "3288240"
  },
  {
    "text": "but roughly speaking that's the that's the default",
    "start": "3288240",
    "end": "3293480"
  },
  {
    "text": "this is exactly the same thing obviously let's assert that works in exactly the",
    "start": "3293680",
    "end": "3300960"
  },
  {
    "text": "same way",
    "start": "3300960",
    "end": "3304200"
  },
  {
    "text": "run the test again this is gonna create the file and delete the file so you might say nothing nothing changed",
    "start": "3306000",
    "end": "3314079"
  },
  {
    "text": "and effectively nothing did change",
    "start": "3314079",
    "end": "3318520"
  },
  {
    "text": "what have we gained we can now swap",
    "start": "3320960",
    "end": "3326240"
  },
  {
    "text": "over this with like file",
    "start": "3326240",
    "end": "3332880"
  },
  {
    "text": "data options",
    "start": "3333040",
    "end": "3339680"
  },
  {
    "text": "oh no sorry this is actually",
    "start": "3347520",
    "end": "3351200"
  },
  {
    "text": "it's 80. you you doing it",
    "start": "3353680",
    "end": "3359680"
  },
  {
    "text": "this isn't gonna do anything at all",
    "start": "3359680",
    "end": "3364640"
  },
  {
    "text": "let's make it to something and what it does it could like we could maintain",
    "start": "3366079",
    "end": "3374839"
  },
  {
    "text": "cons write ops",
    "start": "3374839",
    "end": "3379359"
  },
  {
    "text": "equal to be an array an array of files",
    "start": "3380799",
    "end": "3387480"
  },
  {
    "text": "um",
    "start": "3401760",
    "end": "3404760"
  },
  {
    "text": "come on",
    "start": "3410480",
    "end": "3412960"
  },
  {
    "text": "this is an array of a table of a named topple of the three",
    "start": "3416240",
    "end": "3422240"
  },
  {
    "text": "write-offs push file",
    "start": "3424640",
    "end": "3430559"
  },
  {
    "text": "data",
    "start": "3430559",
    "end": "3433559"
  },
  {
    "text": "file data options now i have not created the file so i do",
    "start": "3437760",
    "end": "3443040"
  },
  {
    "text": "not expect the file to exist but i expect",
    "start": "3443040",
    "end": "3448160"
  },
  {
    "text": "that my write-ups",
    "start": "3448160",
    "end": "3453200"
  },
  {
    "text": "we equal we have a single one",
    "start": "3455440",
    "end": "3460119"
  },
  {
    "text": "with this three thing now we haven't proven anything we",
    "start": "3466319",
    "end": "3472559"
  },
  {
    "text": "haven't tested uh our library what we are simulating is how we would test a",
    "start": "3472559",
    "end": "3478480"
  },
  {
    "text": "program in in our uh in our application okay what's going on",
    "start": "3478480",
    "end": "3484960"
  },
  {
    "text": "array of array short i'm missing one array",
    "start": "3484960",
    "end": "3492880"
  },
  {
    "text": "so if you have a program that interacts with the file system from within the environment",
    "start": "3492880",
    "end": "3498720"
  },
  {
    "text": "this is how you could control the tests from",
    "start": "3498720",
    "end": "3504400"
  },
  {
    "text": "well how you could write the the tests for for your program could you put the expect into the",
    "start": "3504400",
    "end": "3511599"
  },
  {
    "text": "provided write file yes i could throw a thing here",
    "start": "3511599",
    "end": "3519119"
  },
  {
    "text": "but usually you want to run the program collect the stuff and and assert in a single place this is not even the",
    "start": "3519119",
    "end": "3525920"
  },
  {
    "text": "best way to write the test what they would do is to write the test",
    "start": "3525920",
    "end": "3531280"
  },
  {
    "text": "using the generator and throw from within the generator",
    "start": "3531280",
    "end": "3536640"
  },
  {
    "text": "so you have an effect first basis and you don't have to go back and forth from",
    "start": "3536640",
    "end": "3542799"
  },
  {
    "text": "from an async await we are going to convert this to generators slightly slightly later i",
    "start": "3542799",
    "end": "3550559"
  },
  {
    "text": "want to finish on onto this onto the heads as part",
    "start": "3550559",
    "end": "3557599"
  },
  {
    "text": "now from here we see that we have all of the pieces together",
    "start": "3557599",
    "end": "3563599"
  },
  {
    "text": "that makes a service now it's long it's verbose it's awful",
    "start": "3563599",
    "end": "3570720"
  },
  {
    "text": "and there's a tons of repetition so what we're gonna do now is to optimize starting from",
    "start": "3570720",
    "end": "3577839"
  },
  {
    "text": "from this point in time so",
    "start": "3577839",
    "end": "3583280"
  },
  {
    "text": "usually especially in app code you have one implementation",
    "start": "3583280",
    "end": "3590319"
  },
  {
    "text": "the live implementation of something of some service",
    "start": "3590319",
    "end": "3595599"
  },
  {
    "text": "and you might have test doubles but you don't usually end up with",
    "start": "3595599",
    "end": "3600880"
  },
  {
    "text": "multiple implementations i'm saying this because we have been specifying the type",
    "start": "3600880",
    "end": "3608799"
  },
  {
    "text": "manually we could derive the type from a proper constructor for for our",
    "start": "3608799",
    "end": "3616000"
  },
  {
    "text": "service and the advantage of that is that the types will always be",
    "start": "3616000",
    "end": "3621359"
  },
  {
    "text": "automatically updated that could be an advantage or a disadvantage",
    "start": "3621359",
    "end": "3626640"
  },
  {
    "text": "depending on perspectives but i find that enough code",
    "start": "3626640",
    "end": "3632559"
  },
  {
    "text": "even the type inference in in typescript is extremely good when you update",
    "start": "3632559",
    "end": "3638160"
  },
  {
    "text": "some in like an inner level service errors and everything else propagates back to",
    "start": "3638160",
    "end": "3644480"
  },
  {
    "text": "the point where you are dealing with errors and you're gonna spot things",
    "start": "3644480",
    "end": "3649920"
  },
  {
    "text": "so anyway let's see how we can derive this from from a service constructor",
    "start": "3649920",
    "end": "3656480"
  },
  {
    "text": "so let's let's finish with one uh with one thing how would we provide",
    "start": "3656480",
    "end": "3662160"
  },
  {
    "text": "a live implementation there's two ways one way is by using",
    "start": "3662160",
    "end": "3668640"
  },
  {
    "text": "provide service that i've done here there are variants like provide service",
    "start": "3668640",
    "end": "3673760"
  },
  {
    "text": "m where your service could can be an effect that depends on other",
    "start": "3673760",
    "end": "3679920"
  },
  {
    "text": "things and might fail during creation but especially if you are within a",
    "start": "3679920",
    "end": "3684960"
  },
  {
    "text": "within an old environment what you really want to use are layers to construct uh",
    "start": "3684960",
    "end": "3691920"
  },
  {
    "text": "dependencies at bootstrap time so what are layers",
    "start": "3691920",
    "end": "3699440"
  },
  {
    "text": "find it inside the layer thing",
    "start": "3699440",
    "end": "3704318"
  },
  {
    "text": "the layer module and",
    "start": "3704559",
    "end": "3710160"
  },
  {
    "text": "in the layer module you have a few functions two are gonna be interesting for you",
    "start": "3710160",
    "end": "3716960"
  },
  {
    "text": "most of the time that's from effect and",
    "start": "3716960",
    "end": "3723200"
  },
  {
    "text": "from managed from effect and from managed",
    "start": "3723200",
    "end": "3730160"
  },
  {
    "text": "you can see that they take both a tag so our fs",
    "start": "3730160",
    "end": "3736000"
  },
  {
    "text": "is a tag and they return a layer",
    "start": "3736000",
    "end": "3742400"
  },
  {
    "text": "that produces well they take the tag they take an implementation so a",
    "start": "3742400",
    "end": "3749119"
  },
  {
    "text": "constructor in this case it's gonna be a managed constructor",
    "start": "3749119",
    "end": "3754960"
  },
  {
    "text": "in our simple case it can easily be from effect or",
    "start": "3754960",
    "end": "3760079"
  },
  {
    "text": "even from pure value we're gonna start with from from effect",
    "start": "3760079",
    "end": "3766799"
  },
  {
    "text": "and say we want to construct an fs",
    "start": "3767599",
    "end": "3774480"
  },
  {
    "text": "how do we create the service creation of services is",
    "start": "3774559",
    "end": "3782000"
  },
  {
    "text": "a side effect usually or you have dependencies and anything",
    "start": "3782640",
    "end": "3789119"
  },
  {
    "text": "else and in here we define our function",
    "start": "3789119",
    "end": "3796480"
  },
  {
    "text": "and we return it",
    "start": "3796480",
    "end": "3799520"
  },
  {
    "text": "write file and we are gonna also have to return the service id",
    "start": "3802880",
    "end": "3809440"
  },
  {
    "text": "this is fs single",
    "start": "3809520",
    "end": "3814960"
  },
  {
    "text": "const live",
    "start": "3818000",
    "end": "3822760"
  },
  {
    "text": "live fs export fonts live fs here i'm plugging things together we're",
    "start": "3825599",
    "end": "3831839"
  },
  {
    "text": "gonna unbundle them shortly but this is now a layer",
    "start": "3831839",
    "end": "3838799"
  },
  {
    "text": "how do i use a layer instead of saying provide service",
    "start": "3838799",
    "end": "3845680"
  },
  {
    "text": "let's go back to the point where we were creating effectively a file",
    "start": "3845680",
    "end": "3853000"
  },
  {
    "text": "for the purpose of keeping things simple",
    "start": "3853839",
    "end": "3858799"
  },
  {
    "text": "so here provide some layer and here you pass in the layers so here",
    "start": "3859280",
    "end": "3866960"
  },
  {
    "text": "it's going to be live fs and here we only have live fs but what's the what's the point of",
    "start": "3866960",
    "end": "3873760"
  },
  {
    "text": "layers layers are composable",
    "start": "3873760",
    "end": "3879359"
  },
  {
    "text": "so you can use for example plus plus plus to construct two things in parallel",
    "start": "3879359",
    "end": "3887119"
  },
  {
    "text": "you can use this operator to construct first one thing and use its output to provide to",
    "start": "3887119",
    "end": "3894000"
  },
  {
    "text": "another constructor this basically allows you to draw precisely the dependency tree of of your",
    "start": "3894000",
    "end": "3902240"
  },
  {
    "text": "application in a fully detached manner from from your main process",
    "start": "3902240",
    "end": "3909799"
  },
  {
    "text": "so those are layers to the point here",
    "start": "3910640",
    "end": "3915839"
  },
  {
    "text": "we have what is called a service constructor usually i call this service constructor",
    "start": "3915839",
    "end": "3923520"
  },
  {
    "text": "make live fs",
    "start": "3923520",
    "end": "3927520"
  },
  {
    "text": "as const",
    "start": "3930480",
    "end": "3934039"
  },
  {
    "text": "so we have our service creator",
    "start": "3937599",
    "end": "3943039"
  },
  {
    "text": "this can also become like i don't like so much",
    "start": "3943039",
    "end": "3950200"
  },
  {
    "text": "functions there are two boilerplates",
    "start": "3952160",
    "end": "3957599"
  },
  {
    "text": "let's say you have this export",
    "start": "3961839",
    "end": "3966240"
  },
  {
    "text": "it was our live implementation",
    "start": "3968799",
    "end": "3972960"
  },
  {
    "text": "so you see that we define a symbol we define the implementation",
    "start": "3976720",
    "end": "3982640"
  },
  {
    "text": "we need to extract the service you can use a utility called",
    "start": "3982720",
    "end": "3991039"
  },
  {
    "text": "underscore a that extracts the a parameter from an effect or a managed or a stream",
    "start": "3991599",
    "end": "4000079"
  },
  {
    "text": "by off fs actually not sorry made make live fs",
    "start": "4000079",
    "end": "4009119"
  },
  {
    "text": "and in this way we are taking the return",
    "start": "4009119",
    "end": "4014640"
  },
  {
    "text": "type of this constructor which is a uio that construct",
    "start": "4014640",
    "end": "4022079"
  },
  {
    "text": "constructs this service structure and we are using it to create",
    "start": "4022079",
    "end": "4028640"
  },
  {
    "text": "our our type this is already shrinking the",
    "start": "4028640",
    "end": "4034400"
  },
  {
    "text": "the boilerplate a little bit the other noisy part that we can shrink",
    "start": "4034400",
    "end": "4041760"
  },
  {
    "text": "is the creation of these accessors",
    "start": "4041760",
    "end": "4046920"
  },
  {
    "text": "for standard functions or values and and simple things in",
    "start": "4050960",
    "end": "4057440"
  },
  {
    "text": "general and especially if you don't have generics involved or complex structure",
    "start": "4057440",
    "end": "4063839"
  },
  {
    "text": "you can auto generate those how do you do that",
    "start": "4063839",
    "end": "4069200"
  },
  {
    "text": "there are some variants of derived things",
    "start": "4070880",
    "end": "4077520"
  },
  {
    "text": "the right lifted is one that you can you can use to derive common stuff",
    "start": "4077520",
    "end": "4084000"
  },
  {
    "text": "it's gonna take three parameters",
    "start": "4084000",
    "end": "4087520"
  },
  {
    "text": "and those three parameters are the first one are the functions the second one are the constant effects",
    "start": "4089760",
    "end": "4098238"
  },
  {
    "text": "we have none here in this service and the third one is any value which is",
    "start": "4098239",
    "end": "4103520"
  },
  {
    "text": "within the within that service in this case we want to extract a function",
    "start": "4103520",
    "end": "4110159"
  },
  {
    "text": "so in extracting a function we can now generate this automatically",
    "start": "4110159",
    "end": "4116480"
  },
  {
    "text": "this is the same signature that we wrote manually but it's now",
    "start": "4116480",
    "end": "4122159"
  },
  {
    "text": "compacted and generated automatically everything in here works exactly in the",
    "start": "4122159",
    "end": "4128560"
  },
  {
    "text": "same thing as it was before this is fs.right file",
    "start": "4128560",
    "end": "4136158"
  },
  {
    "text": "but we have like the boilerplate now it's turning to a point where",
    "start": "4138560",
    "end": "4145040"
  },
  {
    "text": "it's roughly acceptable an advice here",
    "start": "4145040",
    "end": "4151120"
  },
  {
    "text": "i have used a simple succeed with to create this service",
    "start": "4151120",
    "end": "4156238"
  },
  {
    "text": "but in real life you have interdependent services and you have resourceful services so",
    "start": "4156239",
    "end": "4164400"
  },
  {
    "text": "services that depends on something for example you have a database",
    "start": "4164400",
    "end": "4169600"
  },
  {
    "text": "api that requires a database tool the database pool is a resource has an",
    "start": "4169600",
    "end": "4175679"
  },
  {
    "text": "opening stage and a closing stage and things like that i find it extremely useful to",
    "start": "4175679",
    "end": "4182798"
  },
  {
    "text": "use generators here",
    "start": "4182799",
    "end": "4186920"
  },
  {
    "text": "so instead of simply using this function we can use t",
    "start": "4188719",
    "end": "4194960"
  },
  {
    "text": "gen now here it's going to be noisy because",
    "start": "4194960",
    "end": "4200080"
  },
  {
    "text": "we don't have any access i mean we don't need any any access to anything else",
    "start": "4200080",
    "end": "4206080"
  },
  {
    "text": "but if we would let's say that now we have",
    "start": "4206080",
    "end": "4212640"
  },
  {
    "text": "let's make a export cons make live",
    "start": "4212640",
    "end": "4218560"
  },
  {
    "text": "logger we want to make a logger that logs on a file on a log file",
    "start": "4218560",
    "end": "4224239"
  },
  {
    "text": "something simple like that just to just to showcase an interdependent service",
    "start": "4224239",
    "end": "4230640"
  },
  {
    "text": "said you would use gen to do that",
    "start": "4230640",
    "end": "4234880"
  },
  {
    "text": "inside dot gen you can use this yield star",
    "start": "4235679",
    "end": "4242719"
  },
  {
    "text": "on the this parameter is called an adapter function it transforms an effect into",
    "start": "4242719",
    "end": "4250159"
  },
  {
    "text": "something that can be yielded in this context but you can yield an effect or you can",
    "start": "4250159",
    "end": "4256800"
  },
  {
    "text": "yield even attack directly if you look at the signature of that you",
    "start": "4256800",
    "end": "4262000"
  },
  {
    "text": "can yield attack you can yield an option you can yield an either or you can yield a full effect",
    "start": "4262000",
    "end": "4269360"
  },
  {
    "text": "in this case we said we want to access the file system so we can yield attack directly",
    "start": "4269360",
    "end": "4278320"
  },
  {
    "text": "access right file from here and return for example",
    "start": "4279440",
    "end": "4286480"
  },
  {
    "text": "a log string",
    "start": "4286480",
    "end": "4292719"
  },
  {
    "text": "write file let's do something bad",
    "start": "4293199",
    "end": "4301000"
  },
  {
    "text": "the data is simply the string the mode",
    "start": "4305199",
    "end": "4311760"
  },
  {
    "text": "flags are banned and we return a service",
    "start": "4312880",
    "end": "4320880"
  },
  {
    "text": "id we need to create another export const",
    "start": "4321199",
    "end": "4326640"
  },
  {
    "text": "blocker symbol",
    "start": "4326640",
    "end": "4334280"
  },
  {
    "text": "taking a look at this it's now a service that requires fs",
    "start": "4342880",
    "end": "4348800"
  },
  {
    "text": "you might ask why do we access the file system from here",
    "start": "4348800",
    "end": "4355679"
  },
  {
    "text": "could have used okay let's ignore this",
    "start": "4355679",
    "end": "4361280"
  },
  {
    "text": "in a generator you have to have a minimum of one yield which is why it complains if i if i comment out",
    "start": "4361280",
    "end": "4368320"
  },
  {
    "text": "and yield but let's say that we don't want to do anything let's silence it for a second",
    "start": "4368320",
    "end": "4374320"
  },
  {
    "text": "right access right file i can still use it",
    "start": "4374320",
    "end": "4379679"
  },
  {
    "text": "from the environment but what would be the signature of that now it's a it's a",
    "start": "4379679",
    "end": "4385600"
  },
  {
    "text": "constructor that doesn't require anything so we can construct to construct this",
    "start": "4385600",
    "end": "4390640"
  },
  {
    "text": "service we don't need any environment and the log function requires the file",
    "start": "4390640",
    "end": "4397040"
  },
  {
    "text": "system this is not optimal we are leaking",
    "start": "4397040",
    "end": "4402480"
  },
  {
    "text": "implementation details on on the service layer if somebody uses our log function",
    "start": "4402480",
    "end": "4409199"
  },
  {
    "text": "they don't care that we are logging into a file we could log to a file we could send an http",
    "start": "4409199",
    "end": "4416480"
  },
  {
    "text": "request we could log to the console we could not log at all",
    "start": "4416480",
    "end": "4422960"
  },
  {
    "text": "so how do we do that instead of exposing accessing the the modules from",
    "start": "4422960",
    "end": "4430240"
  },
  {
    "text": "[Music] let's say this is a log function when this is called",
    "start": "4430240",
    "end": "4435280"
  },
  {
    "text": "i'm gonna take the fs from the environment instead i want to take dfs from the",
    "start": "4435280",
    "end": "4442000"
  },
  {
    "text": "environment when i construct my service and i just want to use it in my implementation",
    "start": "4442000",
    "end": "4448159"
  },
  {
    "text": "this is why generators in this case are extremely helpful because they allow you to access",
    "start": "4448159",
    "end": "4454800"
  },
  {
    "text": "directly attack or ill then here you can do anything",
    "start": "4454800",
    "end": "4460800"
  },
  {
    "text": "here you can like yield he dot succeed with",
    "start": "4460800",
    "end": "4468120"
  },
  {
    "text": "you can do any effect operation in it you can consider it like an async await",
    "start": "4469600",
    "end": "4474880"
  },
  {
    "text": "but in a sink away that works with more stuff and that keeps track of all the types correctly",
    "start": "4474880",
    "end": "4481679"
  },
  {
    "text": "so in this case we went back to uh to our initial case",
    "start": "4481679",
    "end": "4486719"
  },
  {
    "text": "that was an effect that requires an uh a file system",
    "start": "4486719",
    "end": "4492560"
  },
  {
    "text": "and that produces a new module this is simulating an interdependency",
    "start": "4492560",
    "end": "4499040"
  },
  {
    "text": "between different uh different services within your application so you could have the",
    "start": "4499040",
    "end": "4504239"
  },
  {
    "text": "database api dependent on the pool this simulates that",
    "start": "4504239",
    "end": "4510880"
  },
  {
    "text": "let's make export uh interface",
    "start": "4510880",
    "end": "4516320"
  },
  {
    "text": "logger extends a",
    "start": "4516320",
    "end": "4521920"
  },
  {
    "text": "type of name",
    "start": "4521920",
    "end": "4525719"
  },
  {
    "text": "make live logger and we need we said we need a tag for",
    "start": "4527679",
    "end": "4532800"
  },
  {
    "text": "that",
    "start": "4532800",
    "end": "4535800"
  },
  {
    "text": "of the logger which will require the logger symbol to be provided",
    "start": "4540000",
    "end": "4546159"
  },
  {
    "text": "and we want to expose export cons live locker",
    "start": "4546159",
    "end": "4552480"
  },
  {
    "text": "which is a layer from effect and again",
    "start": "4552480",
    "end": "4559520"
  },
  {
    "text": "we want to construct a logger using the live logger",
    "start": "4560000",
    "end": "4567199"
  },
  {
    "text": "this now requires you see it's a layer that require",
    "start": "4567199",
    "end": "4572320"
  },
  {
    "text": "dfs to be provided the file system to be provided and produces a logger",
    "start": "4572320",
    "end": "4580360"
  },
  {
    "text": "let's try to use that logger",
    "start": "4581280",
    "end": "4585440"
  },
  {
    "text": "d dot derive lifted blogger",
    "start": "4587360",
    "end": "4594600"
  },
  {
    "text": "so i have my log function and let's say that i want to say fs.log",
    "start": "4603920",
    "end": "4611320"
  },
  {
    "text": "hello world this doesn't work",
    "start": "4614640",
    "end": "4620840"
  },
  {
    "text": "yet because it's gonna tell me that",
    "start": "4620840",
    "end": "4627280"
  },
  {
    "text": "let's see what it's telling me it's telling me that",
    "start": "4629679",
    "end": "4635360"
  },
  {
    "text": "i am missing the logger symbol so i have to provide the logger so let's provide the logger first",
    "start": "4635440",
    "end": "4643040"
  },
  {
    "text": "fs.logger live logger and you see that now it compiles but",
    "start": "4643040",
    "end": "4650480"
  },
  {
    "text": "this is not a great way to expose your dependency trees your your construction",
    "start": "4650480",
    "end": "4655760"
  },
  {
    "text": "trees and we are still using a sequence of provide functions",
    "start": "4655760",
    "end": "4661920"
  },
  {
    "text": "what you can do when you have a layer as we said it's to back up the layer",
    "start": "4661920",
    "end": "4667520"
  },
  {
    "text": "so let's say that here i'm in inline in up code i want to say export const",
    "start": "4667520",
    "end": "4674400"
  },
  {
    "text": "up dependencies by the way layer is getting renamed to",
    "start": "4674400",
    "end": "4679760"
  },
  {
    "text": "depths it's more intuitive i believe",
    "start": "4679760",
    "end": "4684880"
  },
  {
    "text": "let's say that we we said we want the live logger first of all if we check the type of these really only requires the",
    "start": "4685280",
    "end": "4693280"
  },
  {
    "text": "logger so the fact that the logger uses a file",
    "start": "4693280",
    "end": "4700000"
  },
  {
    "text": "system it's even internal to this logger it shouldn't be truly exposed unless you",
    "start": "4700000",
    "end": "4707760"
  },
  {
    "text": "use the file system elsewhere there's no point in in exposing the file system",
    "start": "4707760",
    "end": "4714080"
  },
  {
    "text": "but this logger requires has fs i've said before that",
    "start": "4714080",
    "end": "4720719"
  },
  {
    "text": "layers can be combined so let's take the live fs",
    "start": "4720719",
    "end": "4726000"
  },
  {
    "text": "which produces a file system module",
    "start": "4726000",
    "end": "4732000"
  },
  {
    "text": "wrapper from an unknown source and let's plug it into",
    "start": "4732000",
    "end": "4740719"
  },
  {
    "text": "the live logger and we see that this is now a layer that doesn't require anything to be",
    "start": "4740719",
    "end": "4746960"
  },
  {
    "text": "provided and produces the combination of both the modules",
    "start": "4746960",
    "end": "4753360"
  },
  {
    "text": "this can be directly used to provide your your dependencies",
    "start": "4753360",
    "end": "4760800"
  },
  {
    "text": "and it works as expected but we said that this is now",
    "start": "4761440",
    "end": "4767040"
  },
  {
    "text": "is requiring only the locker so there is again no point in having these up death depths produce both in",
    "start": "4767040",
    "end": "4776000"
  },
  {
    "text": "these cases you can use another operator which is without",
    "start": "4776000",
    "end": "4782239"
  },
  {
    "text": "the plus in between and this is now only providing the the logger",
    "start": "4782239",
    "end": "4790239"
  },
  {
    "text": "this is something that you would expose like export const",
    "start": "4790239",
    "end": "4796719"
  },
  {
    "text": "file with fs logger",
    "start": "4796719",
    "end": "4802760"
  },
  {
    "text": "uh fs based blogger",
    "start": "4807679",
    "end": "4814159"
  },
  {
    "text": "fs.fs face logger",
    "start": "4817040",
    "end": "4822639"
  },
  {
    "text": "and i might have a totally different implementation that doesn't log on to",
    "start": "4822639",
    "end": "4828560"
  },
  {
    "text": "onto the file system but that uses a console and it will be exposed with exactly the",
    "start": "4828560",
    "end": "4834560"
  },
  {
    "text": "same signature and you can consume it in exactly the same the same way",
    "start": "4834560",
    "end": "4841679"
  },
  {
    "text": "okay it seems this took a little bit longer than initially expected i've lost",
    "start": "4841679",
    "end": "4847440"
  },
  {
    "text": "a little bit of time in trying to set up ts node on the fly",
    "start": "4847440",
    "end": "4853120"
  },
  {
    "text": "but the the base concept of wrapping modules of external apis is this type of",
    "start": "4853120",
    "end": "4861440"
  },
  {
    "text": "work from the next time i believe",
    "start": "4861440",
    "end": "4866960"
  },
  {
    "text": "i'm gonna begin to improve the number of functionalities in",
    "start": "4866960",
    "end": "4872320"
  },
  {
    "text": "here one of the suggestions was to use the um",
    "start": "4872320",
    "end": "4878719"
  },
  {
    "text": "the abort controller to control interruption effects are interruptable",
    "start": "4878719",
    "end": "4885280"
  },
  {
    "text": "if you want to control interruption you can return from here",
    "start": "4885280",
    "end": "4891040"
  },
  {
    "text": "from our easter callback another effect that will be invoked when",
    "start": "4891040",
    "end": "4897760"
  },
  {
    "text": "uh when we need to clean up things okay i'm in the wrong",
    "start": "4897760",
    "end": "4903440"
  },
  {
    "text": "one yes it's in here and here i could say signal",
    "start": "4903440",
    "end": "4910560"
  },
  {
    "text": "so actually let's let's integrate that now for a second it's not going to work",
    "start": "4911120",
    "end": "4917040"
  },
  {
    "text": "because i don't have the poly fields but the idea is to controller",
    "start": "4917040",
    "end": "4923760"
  },
  {
    "text": "we have a new abort controller",
    "start": "4923760",
    "end": "4929880"
  },
  {
    "text": "in the options",
    "start": "4930560",
    "end": "4933840"
  },
  {
    "text": "controller dot signal uh",
    "start": "4938719",
    "end": "4945560"
  },
  {
    "text": "spread may only be created from okay what's these options",
    "start": "4946080",
    "end": "4953760"
  },
  {
    "text": "buffering coding this is where i should improve the",
    "start": "4954639",
    "end": "4960080"
  },
  {
    "text": "api a little bit",
    "start": "4960080",
    "end": "4963679"
  },
  {
    "text": "buffer encoding null so it should be this awfulness",
    "start": "4967199",
    "end": "4975320"
  },
  {
    "text": "okay abortable doesn't exist there",
    "start": "4986719",
    "end": "4991280"
  },
  {
    "text": "no but abortable is precisely the one that i don't want",
    "start": "4992639",
    "end": "4998080"
  },
  {
    "text": "yeah that's it and in here i can say controller dot",
    "start": "4998239",
    "end": "5006480"
  },
  {
    "text": "abort and this will interrupt the",
    "start": "5006480",
    "end": "5011840"
  },
  {
    "text": "the computation properly so i think for for today this is a good",
    "start": "5011840",
    "end": "5017920"
  },
  {
    "text": "place to to leave it for uh for the code we have bootstrapped",
    "start": "5017920",
    "end": "5024639"
  },
  {
    "text": "the the initial structure on how this module would",
    "start": "5024639",
    "end": "5029760"
  },
  {
    "text": "would be created and from the the next time we will be",
    "start": "5029760",
    "end": "5035199"
  },
  {
    "text": "improving that and and connect it using using streams",
    "start": "5035199",
    "end": "5042159"
  },
  {
    "text": "if there is any question i'll i'll take it lightly yeah there are no other questions in the",
    "start": "5042159",
    "end": "5048320"
  },
  {
    "text": "in the log good so i think that's that's today that was",
    "start": "5048320",
    "end": "5054000"
  },
  {
    "text": "the the second episode i wish everybody a good continuation of",
    "start": "5054000",
    "end": "5060159"
  },
  {
    "text": "the day and see you next time cheers guys and by the way i'm gonna be",
    "start": "5060159",
    "end": "5066320"
  },
  {
    "text": "publishing these in a draft pr to be to be finished in in the next times i",
    "start": "5066320",
    "end": "5073199"
  },
  {
    "text": "hope that was a little bit helpful in introducing the lower eight level api of effect have a",
    "start": "5073199",
    "end": "5081600"
  },
  {
    "text": "nice day everybody cheers",
    "start": "5081600",
    "end": "5085400"
  }
]