[
  {
    "text": "So, today, we are talking about STM.",
    "start": "4708",
    "end": "11208"
  },
  {
    "text": "Apparently, Dylan is reading us because there's some people calling for CH road",
    "start": "13708",
    "end": "19333"
  },
  {
    "text": "and so on and so forth. So welcome everyone. Welcome everyone",
    "start": "19333",
    "end": "24125"
  },
  {
    "text": "As I was mentioning today the topic of discussion is a little bit of a sideline",
    "start": "27708",
    "end": "33666"
  },
  {
    "text": "from our usual topic. Again, just to contextualize a little bit",
    "start": "33666",
    "end": "40583"
  },
  {
    "text": "why we are even doing that. In the recent weeks we've been hacking a",
    "start": "40583",
    "end": "46583"
  },
  {
    "text": "lot on effect cluster, together with, with Maxwell.",
    "start": "46583",
    "end": "50333"
  },
  {
    "text": "And last time, while on streaming,",
    "start": "51666",
    "end": "58541"
  },
  {
    "text": "I was kind of made aware of some state",
    "start": "59166",
    "end": "64833"
  },
  {
    "text": "management travels, or, to put it better.",
    "start": "64833",
    "end": "69500"
  },
  {
    "text": "There are some cases where we might end up with inconsistent states, and so on and so forth. And I thought STM was a",
    "start": "70708",
    "end": "80083"
  },
  {
    "text": "great choice to resolve those types of those types of issues.",
    "start": "80083",
    "end": "84333"
  },
  {
    "text": "But, given that effect is so wide, even core contributors such as such as Maxwell",
    "start": "85708",
    "end": "92583"
  },
  {
    "text": "and myself we, there's not not a single person who knows all all the modules of",
    "start": "92583",
    "end": "98916"
  },
  {
    "text": "of the Effect ecosystem. And I'm lucky enough to be the one that",
    "start": "98916",
    "end": "104375"
  },
  {
    "text": "worked on STM and core. So that's sort of my domain and Maxwell",
    "start": "104375",
    "end": "110583"
  },
  {
    "text": "why he has worked a lot on core, he has never had the opportunity to touch STM.",
    "start": "110583",
    "end": "115083"
  },
  {
    "text": "So I was like that it might be fun to actually do a little bit of a sideline",
    "start": "115625",
    "end": "121541"
  },
  {
    "text": "and for one stream about STM. While you're learning.",
    "start": "121541",
    "end": "126250"
  },
  {
    "text": "Whil you are learning the new module. So, I guess we can start with with me",
    "start": "127875",
    "end": "134790"
  },
  {
    "text": "screen sharing a little bit, and just explaining the very, the very basics of",
    "start": "134791",
    "end": "141791"
  },
  {
    "text": "STM, why is it even relevant for for the use case.",
    "start": "141791",
    "end": "147916"
  },
  {
    "text": "Just speaking a few examples of, of how it works. and then we can take it from there,",
    "start": "149708",
    "end": "157458"
  },
  {
    "text": "wherever we want, we can hop on your screen share or",
    "start": "157458",
    "end": "163791"
  },
  {
    "text": "just close the call, trash STM You know, we can, we can decide at a",
    "start": "163791",
    "end": "171083"
  },
  {
    "text": "later point what to do.",
    "start": "171083",
    "end": "174208"
  },
  {
    "text": "So let me figure how to screen share from here. Okay, there's a, there's a screen share button.",
    "start": "176708",
    "end": "182083"
  },
  {
    "text": "That's probably where you should start from. You're not getting your wish, at",
    "start": "182583",
    "end": "188916"
  },
  {
    "text": "least not till later. What's Dylan's wish. He said hopefully Max is driving so we",
    "start": "188916",
    "end": "194416"
  },
  {
    "text": "don't have to look at VScode Just use a real editor.",
    "start": "194416",
    "end": "200333"
  },
  {
    "text": "Okay. Do you see my screen. Yes, he should.",
    "start": "202708",
    "end": "208708"
  },
  {
    "text": "STM play. Yes. Font? is it fine.",
    "start": "210708",
    "end": "217125"
  },
  {
    "text": "Zoom in just a tiny bit but I think overall it's pretty good. That's good.",
    "start": "219000",
    "end": "222958"
  },
  {
    "text": "If any of the people watching. Can't see the text or anything like that let us know.",
    "start": "225666",
    "end": "230958"
  },
  {
    "text": "Or,You know, mind your business.",
    "start": "232708",
    "end": "233665"
  },
  {
    "text": "But that was indeed a joke. Anyway, let me make this full screen.",
    "start": "237958",
    "end": "244790"
  },
  {
    "text": "Good. Like a great idea I have an embedded terminal you see Dylan.",
    "start": "246708",
    "end": "252041"
  },
  {
    "text": "I can do pnpm TSX scratchpad STM play. It's gonna say nothing because",
    "start": "253166",
    "end": "261790"
  },
  {
    "text": "we have we haven't done anything. So, let's start by importing.",
    "start": "261791",
    "end": "269583"
  },
  {
    "text": "A module, which is called again STM. First of all we should say",
    "start": "273708",
    "end": "280332"
  },
  {
    "text": "what what STM stands for. It's not an invention of effect, but it's",
    "start": "280333",
    "end": "288750"
  },
  {
    "text": "a widely used technology in other languages. It's called software",
    "start": "288750",
    "end": "294916"
  },
  {
    "text": "transactional memory. So, that means, if you are familiar with",
    "start": "294916",
    "end": "301958"
  },
  {
    "text": "things like you know, database transactions.",
    "start": "301958",
    "end": "305625"
  },
  {
    "text": "It's kind of doing the same with regards of data structures within the language.",
    "start": "307708",
    "end": "315332"
  },
  {
    "text": "So, instead of having transactions in a database you would have transactions, for",
    "start": "316708",
    "end": "322082"
  },
  {
    "text": "example, between a transactional map a transactional reference and so on and so forth.",
    "start": "322083",
    "end": "327333"
  },
  {
    "text": "This is very important in in cases where,",
    "start": "328583",
    "end": "333750"
  },
  {
    "text": "for example, you have parallelism to avoid race conditions. That's not the case in",
    "start": "335625",
    "end": "341832"
  },
  {
    "text": "in JavaScript though. Given JavaScript is single threaded one might even ask why.",
    "start": "341833",
    "end": "348541"
  },
  {
    "text": "Why is it even relevant. Well, anytime we have anything asynchronous. There may be race",
    "start": "349708",
    "end": "356041"
  },
  {
    "text": "conditions, even though nothing happens in parallel. There can be asynchronous",
    "start": "356041",
    "end": "362000"
  },
  {
    "text": "race conditions and STM is a way of avoiding those.",
    "start": "362000",
    "end": "366541"
  },
  {
    "text": "Now, the how it works, I will start by by",
    "start": "367958",
    "end": "373875"
  },
  {
    "text": "doing a very simple, a very simple example. So first of all, STM is exposed as a",
    "start": "373875",
    "end": "382000"
  },
  {
    "text": "module just if you're familiar with effect. It's roughly the same type of API, but",
    "start": "382000",
    "end": "389791"
  },
  {
    "text": "there are two fundamental differences. Well, three fundamental differences. The",
    "start": "389791",
    "end": "395375"
  },
  {
    "text": "first it's fully synchronous. So you can't embed anything asynchronous in it.",
    "start": "395375",
    "end": "401625"
  },
  {
    "text": "You should also avoid embedding any side effect on it because of a point that I'll",
    "start": "403250",
    "end": "409833"
  },
  {
    "text": "make later. So that's the first fundamental difference. The second fundamental difference is",
    "start": "409833",
    "end": "415416"
  },
  {
    "text": "there's no part of there's no concurrency primitives whatsoever. And the third fundamental difference is",
    "start": "415416",
    "end": "423458"
  },
  {
    "text": "that an STM computation may happen multiple times. So it may be retried.",
    "start": "423458",
    "end": "428833"
  },
  {
    "text": "And now I'm gonna get to the point. Basically an STM transaction is retried",
    "start": "430791",
    "end": "438625"
  },
  {
    "text": "up until the point where it can commit either successfully or or by failing.",
    "start": "438625",
    "end": "445208"
  },
  {
    "text": "Which means that anything you write within STM must support being able to run",
    "start": "447166",
    "end": "455375"
  },
  {
    "text": "multiple times, which means, for example, if you have a console log, you might have the console log triggered multiple times",
    "start": "455375",
    "end": "461708"
  },
  {
    "text": "instead of just instead of just one. So let's begin by writing with our very",
    "start": "461708",
    "end": "472791"
  },
  {
    "text": "familiar type of API if you're coming from from effect.",
    "start": "472791",
    "end": "477083"
  },
  {
    "text": "Let's actually start with effect in the first place.",
    "start": "478708",
    "end": "483375"
  },
  {
    "text": "And let's do something different. Let's start with effect.",
    "start": "484666",
    "end": "488291"
  },
  {
    "text": "And first of all, I want to create a transactional ref.",
    "start": "490541",
    "end": "496707"
  },
  {
    "text": "Transactional refs are just like references for effect purposes.",
    "start": "499583",
    "end": "505833"
  },
  {
    "text": "The API of a T ref is very similar to the API of a ref. The difference is that it",
    "start": "507208",
    "end": "513875"
  },
  {
    "text": "can participate within an STM transaction. So STM is a subtype of effect. So you can",
    "start": "513875",
    "end": "522208"
  },
  {
    "text": "just yield an STM computation behind the scenes. What this is doing is STM.commit",
    "start": "522208",
    "end": "529416"
  },
  {
    "text": "with the actual STM transaction.",
    "start": "529416",
    "end": "534291"
  },
  {
    "text": "And when we commit the transaction, you see that we get back an effect, a normal and plain effect.",
    "start": "534666",
    "end": "540708"
  },
  {
    "text": "Let's remove this commit given that it is not strictly necessary.",
    "start": "541708",
    "end": "547250"
  },
  {
    "text": "So now we have our T ref. As I mentioned, we can do the same type of operations",
    "start": "549625",
    "end": "558500"
  },
  {
    "text": "that we do with a normal ref. So for example, we can increment it given",
    "start": "558500",
    "end": "567458"
  },
  {
    "text": "it's a number. We're updating the value of the ref.",
    "start": "567458",
    "end": "570833"
  },
  {
    "text": "But differently from a normal reference,",
    "start": "572791",
    "end": "578000"
  },
  {
    "text": "what we're doing now is something that is unique to STM.",
    "start": "578000",
    "end": "582916"
  },
  {
    "text": "Let's say that we have a computation, so some effects, that in order to run, we",
    "start": "584041",
    "end": "594625"
  },
  {
    "text": "need to wait for the reference to be 10.",
    "start": "594625",
    "end": "598083"
  },
  {
    "text": "So instead of just updating once, we're going to update multiple times. The counter starts from zero. The moment we",
    "start": "600041",
    "end": "606500"
  },
  {
    "text": "hit 10, we want an effect to start. How would we do it? Well, we would make",
    "start": "606500",
    "end": "616250"
  },
  {
    "text": "an STM transaction, which is called wait for ref to be 10.",
    "start": "616250",
    "end": "621958"
  },
  {
    "text": "Now, of course, naming, you wouldn't name it this way. But given I'm good with",
    "start": "623000",
    "end": "629666"
  },
  {
    "text": "naming, let's express it. Let's say we do then an STM gen function.",
    "start": "629666",
    "end": "640666"
  },
  {
    "text": "And in here, we say the current value.",
    "start": "644333",
    "end": "649708"
  },
  {
    "text": "We do the Tref.get and we get the ref.",
    "start": "654041",
    "end": "663083"
  },
  {
    "text": "We then check: is the current value 10?",
    "start": "664750",
    "end": "675458"
  },
  {
    "text": "Now, current value is hopefully a number. Yes, it is. If it's that, then we're done. We can",
    "start": "676291",
    "end": "684791"
  },
  {
    "text": "return. Otherwise, we return yield STM.retry.",
    "start": "684791",
    "end": "692125"
  },
  {
    "text": "This is the core primitive that allows STM to wait on arbitrary conditions",
    "start": "694500",
    "end": "701416"
  },
  {
    "text": "between transactional values. So what we're doing here, and of course, we could just make this a little bit",
    "start": "701416",
    "end": "709208"
  },
  {
    "text": "better. Maybe it is. It's slightly easier.",
    "start": "709208",
    "end": "714208"
  },
  {
    "text": "So this returns an STM value, which again",
    "start": "714708",
    "end": "722250"
  },
  {
    "text": "is an effect. So we can write normally an effect. But this will retry up until the",
    "start": "722250",
    "end": "731000"
  },
  {
    "text": "point where the ref is zero. Now, one might ask, is it performant",
    "start": "731000",
    "end": "737958"
  },
  {
    "text": "enough? Because if we do this in a loop, if we were to do this with a normal ref",
    "start": "737958",
    "end": "744208"
  },
  {
    "text": "and just write a loop that waits for this to be 10, the loop would",
    "start": "744208",
    "end": "749833"
  },
  {
    "text": "consume all the CPU resources. So that's not what is happening in this",
    "start": "749833",
    "end": "756083"
  },
  {
    "text": "case. The STM retry waits for any",
    "start": "756083",
    "end": "762041"
  },
  {
    "text": "accessed state to change before trying again, which means that when we update",
    "start": "762041",
    "end": "771375"
  },
  {
    "text": "the reference, we are actually updating a shared journal.",
    "start": "771375",
    "end": "776708"
  },
  {
    "text": "And this will retry anytime we update the ref",
    "start": "777666",
    "end": "783791"
  },
  {
    "text": "will not just loop, casually and we can see that happening in a moment",
    "start": "783791",
    "end": "791500"
  },
  {
    "text": "so let's say that we have a process that",
    "start": "791500",
    "end": "797500"
  },
  {
    "text": "we want to Effect.repeat actually we want to that forever",
    "start": "797500",
    "end": "805208"
  },
  {
    "text": "We might want a small delay, just 100",
    "start": "806875",
    "end": "816458"
  },
  {
    "text": "millis delay after every increment. And",
    "start": "816458",
    "end": "822666"
  },
  {
    "text": "we're going to fork scope this thing. So this is when this program runs, we're",
    "start": "822666",
    "end": "829958"
  },
  {
    "text": "kicking off a fiber. that ends up updating the reference every 100 millisecond",
    "start": "829958",
    "end": "837583"
  },
  {
    "text": "and now we want to kick off a different fiber that first",
    "start": "838375",
    "end": "846000"
  },
  {
    "text": "does the wait and then does",
    "start": "846208",
    "end": "852208"
  },
  {
    "text": "flatMap effect.logInfo",
    "start": "853333",
    "end": "861000"
  },
  {
    "text": "Now the ref is at least 10. Actually, to",
    "start": "862541",
    "end": "872416"
  },
  {
    "text": "be precise, this should retry while the ref is less than 10. No, actually, that's",
    "start": "872416",
    "end": "884458"
  },
  {
    "text": "fine. It should retry. It can retry anytime. It's not 10 because it's going to start from zero. And it's",
    "start": "884458",
    "end": "892000"
  },
  {
    "text": "going to retry at any point in time. So let's see what this program does. I need",
    "start": "892000",
    "end": "899375"
  },
  {
    "text": "to also fork scoped this.",
    "start": "899375",
    "end": "904666"
  },
  {
    "text": "And actually, no, I don't need to fork",
    "start": "907166",
    "end": "913666"
  },
  {
    "text": "scope this. Let's say",
    "start": "913666",
    "end": "920708"
  },
  {
    "text": "that this is our main program.",
    "start": "920708",
    "end": "922208"
  },
  {
    "text": "And we need for it to be scoped.",
    "start": "927208",
    "end": "937125"
  },
  {
    "text": "Actually, I can just fork here, and then we don't even need the scoped just to",
    "start": "939375",
    "end": "946375"
  },
  {
    "text": "make things a bit easier. And say that we run to a promise.",
    "start": "946375",
    "end": "951625"
  },
  {
    "text": "Let's try to run this. And it's printing when whenever this hits",
    "start": "957791",
    "end": "966458"
  },
  {
    "text": "10. So this waiting actually works. But let's check given I've set these retries.",
    "start": "966458",
    "end": "974708"
  },
  {
    "text": "we make a counter",
    "start": "986291",
    "end": "989291"
  },
  {
    "text": "just to check how many times are we retrying",
    "start": "996541",
    "end": "999916"
  },
  {
    "text": "hopefully we're not retrying more thant 10 times There we go.",
    "start": "1001791",
    "end": "1008375"
  },
  {
    "text": "So this is the very, very, very level zero introduction to STM, which I call it",
    "start": "1011916",
    "end": "1023541"
  },
  {
    "text": "a really a primitive for coordination. Might be easier to understand in terms of",
    "start": "1023541",
    "end": "1031291"
  },
  {
    "text": "coordination versus versus transactionality. Now",
    "start": "1031291",
    "end": "1036416"
  },
  {
    "text": "I'll stop for a minute. Maxwell, please, if you have any any",
    "start": "1036416",
    "end": "1042125"
  },
  {
    "text": "question up to this point, please fire them off.",
    "start": "1042125",
    "end": "1046791"
  },
  {
    "text": "So far, I am tracking. I'm just answering like questions in the chat, but I'm tracking you so far. Any interesting question",
    "start": "1048666",
    "end": "1055500"
  },
  {
    "text": "that we should highlight. No, there was a question about why we needed scope and the I was typing the",
    "start": "1055500",
    "end": "1062291"
  },
  {
    "text": "answer but I guess I can just answer the scope was originally required when Mike was forking the fiber lifetime into a",
    "start": "1062291",
    "end": "1068125"
  },
  {
    "text": "scope so when using fork scoped. You fork a fiber and you attach the lifetime ",
    "start": "1068125",
    "end": "1074250"
  },
  {
    "text": " of that fiber to the scope. But in this particular case, there was",
    "start": "1074250",
    "end": "1080208"
  },
  {
    "text": "really no need to do that. So we just simplified and used fork. So we did not need the scope.",
    "start": "1080208",
    "end": "1084583"
  },
  {
    "text": "And the reason why we don't need the scope now is the program ends here.",
    "start": "1086166",
    "end": "1090541"
  },
  {
    "text": "So the fiber that was forked to run this program ends. And when that fiber ends",
    "start": "1091666",
    "end": "1098333"
  },
  {
    "text": "all of its children also end. So this fiber that we fork here is",
    "start": "1098333",
    "end": "1104666"
  },
  {
    "text": "automatically stopped when the program ends.",
    "start": "1104666",
    "end": "1108833"
  },
  {
    "text": "Fork scoped is useful to attach fiber lifetimes to scope so that like if the scope is closed for some reason that the",
    "start": "1110291",
    "end": "1118500"
  },
  {
    "text": "fibers attached to that scope are properly like interrupted and that it can be useful, ",
    "start": "1118500",
    "end": "1123708"
  },
  {
    "text": "especially like when you're forking background processes into like a layer that you're attaching to your program or something like that.",
    "start": "1123708",
    "end": "1129125"
  },
  {
    "text": "But for this particular case, we didn't need it. And just to show the",
    "start": "1129833",
    "end": "1135750"
  },
  {
    "text": "difference is if I do a fork demon. This program will not end.",
    "start": "1135750",
    "end": "1141416"
  },
  {
    "text": "You see this is this keeps going. This keeps going because there is one fiber running. So I",
    "start": "1142583",
    "end": "1148333"
  },
  {
    "text": "have to kill it manually. And forks scoped. Instead attaches that",
    "start": "1148333",
    "end": "1154833"
  },
  {
    "text": "lifetime to the scope. And here I could, for example, do a pipe",
    "start": "1154833",
    "end": "1162250"
  },
  {
    "text": "effect dot flat map effect dot log info",
    "start": "1162250",
    "end": "1171458"
  },
  {
    "text": "saying program ended. And after that, the effect dot scoped.",
    "start": "1171458",
    "end": "1179208"
  },
  {
    "text": "And now the fiber will be killed off after the program ended because we are",
    "start": "1181208",
    "end": "1190416"
  },
  {
    "text": "closing the closing the scope. So that fiber will now outlive the life of program.",
    "start": "1190416",
    "end": "1198708"
  },
  {
    "text": "So when program is finished, that fiber will keep trying. But once the scope is",
    "start": "1198708",
    "end": "1204416"
  },
  {
    "text": "closed, that fiber is also closed. It's a way to manually control the",
    "start": "1204416",
    "end": "1209708"
  },
  {
    "text": "lifetime of the of such forked fiber and just to simplify we don't we don't need",
    "start": "1209708",
    "end": "1216125"
  },
  {
    "text": "that here to add one clarification to those who might not be familiar with like all these fork APIs fork like Mike said",
    "start": "1216125",
    "end": "1222958"
  },
  {
    "text": "uses auto supervision. So it attaches the lifetime of that child fiber to the parent that's forking it",
    "start": "1222958",
    "end": "1229791"
  },
  {
    "text": "Fork scoped like Mike said attaches the lifetime of the fiber to a scope so that when the scope is closed the fibers like",
    "start": "1229791",
    "end": "1236250"
  },
  {
    "text": "be able to be closed. Yeah. And then the fork demon",
    "start": "1236250",
    "end": "1243916"
  },
  {
    "text": "however you pronounce it attaches the lifetime of the fiber that you're forking",
    "start": "1243916",
    "end": "1249750"
  },
  {
    "text": "to the global scope of the program, which is why when Mike used for the program",
    "start": "1249750",
    "end": "1255583"
  },
  {
    "text": "never ended because we were using effect dot forever, so that fiber just kept the process open.",
    "start": "1255583",
    "end": "1260083"
  },
  {
    "text": "So, all of the fork API is just ways to control fiber lifetimes and like more",
    "start": "1261708",
    "end": "1267208"
  },
  {
    "text": "granular ways and can be really useful for different scenarios.",
    "start": "1267208",
    "end": "1271208"
  },
  {
    "text": "Anyways, not to derail our STM discussion but that was a good opportunity to talk about fork and its behavior.",
    "start": "1272708",
    "end": "1279333"
  },
  {
    "text": "that's always helpful.",
    "start": "1281791",
    "end": "1284875"
  },
  {
    "text": "But again, as I was saying this is kind of the very basic of of STM.",
    "start": "1288125",
    "end": "1295250"
  },
  {
    "text": "I could have two references",
    "start": "1295708",
    "end": "1299833"
  },
  {
    "text": "and updated in two places.",
    "start": "1305708",
    "end": "1311458"
  },
  {
    "text": "Current one current two",
    "start": "1314708",
    "end": "1324541"
  },
  {
    "text": "So, hopefully, works the same with the exception that it is retried a few times more.",
    "start": "1334708",
    "end": "1340708"
  },
  {
    "text": "Because here we are accessing two different references, and we are changing",
    "start": "1341791",
    "end": "1347583"
  },
  {
    "text": "the value of the two references independently. We have about 20.",
    "start": "1347583",
    "end": "1353166"
  },
  {
    "text": "exactly 20 updates before our condition is met.",
    "start": "1355208",
    "end": "1361250"
  },
  {
    "text": "This is called an STM transaction.",
    "start": "1365625",
    "end": "1369500"
  },
  {
    "text": "And this is an effectful program that waits on an STM transaction to occur.",
    "start": "1371250",
    "end": "1376416"
  },
  {
    "text": "This would be like your. If you were to write these in database",
    "start": "1377708",
    "end": "1384000"
  },
  {
    "text": "terms, you would commit such transaction when these transactions committed.",
    "start": "1384000",
    "end": "1390375"
  },
  {
    "text": "It's properly returning. Now there are some databases that works",
    "start": "1390708",
    "end": "1396000"
  },
  {
    "text": "exactly in this way. And those are databases that leverage",
    "start": "1396000",
    "end": "1401708"
  },
  {
    "text": "optimistic concurrency. So they start doing all the changes if then they have a conflict, they, they",
    "start": "1401708",
    "end": "1408041"
  },
  {
    "text": "retry up until the point. This works.",
    "start": "1408041",
    "end": "1411791"
  },
  {
    "text": "So you can mix any amount of things in",
    "start": "1415041",
    "end": "1420833"
  },
  {
    "text": "any amount of transactional data structures in a in an STM transaction.",
    "start": "1420833",
    "end": "1426000"
  },
  {
    "text": "Let's say that, for example, I want a Tmap",
    "start": "1427083",
    "end": "1430500"
  },
  {
    "text": "We're starting the Tmap Actually, they're doing an",
    "start": "1434708",
    "end": "1440291"
  },
  {
    "text": "empty map string to number.",
    "start": "1440291",
    "end": "1444708"
  },
  {
    "text": "And we.",
    "start": "1449333",
    "end": "1452291"
  },
  {
    "text": "Our map.",
    "start": "1454708",
    "end": "1456333"
  },
  {
    "text": "We do an STM. Actually, let me.",
    "start": "1460375",
    "end": "1466541"
  },
  {
    "text": "Think about something. I want to add new entries to the map dynamically.",
    "start": "1468500",
    "end": "1475708"
  },
  {
    "text": "So we do that forever.",
    "start": "1477000",
    "end": "1478583"
  },
  {
    "text": "What can I do?",
    "start": "1485583",
    "end": "1488250"
  },
  {
    "text": "So let me generate a random number.",
    "start": "1499333",
    "end": "1501125"
  },
  {
    "text": "And let's add.",
    "start": "1511416",
    "end": "1513416"
  },
  {
    "text": "The map dot",
    "start": "1516541",
    "end": "1517708"
  },
  {
    "text": "Set.",
    "start": "1521750",
    "end": "1521916"
  },
  {
    "text": "So here we are setting values every. Every hundred milliseconds.",
    "start": "1541166",
    "end": "1546000"
  },
  {
    "text": "And our condition could be that.",
    "start": "1547833",
    "end": "1553125"
  },
  {
    "text": "The Tmap Size of a map",
    "start": "1554541",
    "end": "1559375"
  },
  {
    "text": "And running this should.",
    "start": "1584000",
    "end": "1585041"
  },
  {
    "text": "Reach the condition. I think we do want to. We are our console log.",
    "start": "1589791",
    "end": "1596791"
  },
  {
    "text": "Trying. Plus.",
    "start": "1598208",
    "end": "1601416"
  },
  {
    "text": "It looked like the Tmap structure has a couple of like interesting methods on it like setting only if something's like",
    "start": "1611666",
    "end": "1618750"
  },
  {
    "text": "absent and stuff like that as well. I mean, those are I guess. reasonalby basic operations but",
    "start": "1618750",
    "end": "1624875"
  },
  {
    "text": "could be like interesting to be able to mix different locgic like retain if, remove if",
    "start": "1624875",
    "end": "1632333"
  },
  {
    "text": "those are like some interesting operations that you have access to with Tmap It's kind of interesting.",
    "start": "1632333",
    "end": "1637833"
  },
  {
    "text": "Generally speaking. A Tmap We can create our own Tmap",
    "start": "1640166",
    "end": "1645875"
  },
  {
    "text": "To an extent. Let's try to do that. Just for.",
    "start": "1648333",
    "end": "1654166"
  },
  {
    "text": "For the sake of. Or you and let's. Let's have a hash map and let's have a Tref",
    "start": "1655083",
    "end": "1661291"
  },
  {
    "text": "Our Tmap Will be. A Tref",
    "start": "1662500",
    "end": "1666666"
  },
  {
    "text": "Of a hash map. What was its string.",
    "start": "1668958",
    "end": "1674916"
  },
  {
    "text": "Number. So we have a reference a transduction reference to an immutable.",
    "start": "1675708",
    "end": "1682125"
  },
  {
    "text": "Map. Our set. Would be.",
    "start": "1682500",
    "end": "1687666"
  },
  {
    "text": "Our Tref dot update. We would update our map.",
    "start": "1688625",
    "end": "1695541"
  },
  {
    "text": "And we would get our hash map here. Hash map dot set.",
    "start": "1697916",
    "end": "1704916"
  },
  {
    "text": "It's pretty much exactly the same code. As before.",
    "start": "1711708",
    "end": "1715583"
  },
  {
    "text": "Now we do a Tref dot get. On our map.",
    "start": "1717000",
    "end": "1722000"
  },
  {
    "text": "And on it. We do a hash map dot size.",
    "start": "1723708",
    "end": "1729125"
  },
  {
    "text": "And this ideally would work exactly the same. It's probably not too dissimilar from how",
    "start": "1734250",
    "end": "1740708"
  },
  {
    "text": "Tmaps implemented on the hood if I had to guess.",
    "start": "1740708",
    "end": "1742833"
  },
  {
    "text": "I don't remember. I wouldn't. I don't remember that we can check.",
    "start": "1746041",
    "end": "1753000"
  },
  {
    "text": "For the sake of it we can actually check.",
    "start": "1753833",
    "end": "1757458"
  },
  {
    "text": "Tmap",
    "start": "1759166",
    "end": "1763041"
  },
  {
    "text": "No. It's got buckets and a size. Not at all.",
    "start": "1767333",
    "end": "1772333"
  },
  {
    "text": "Not even close. But it does look like it's basically got",
    "start": "1774708",
    "end": "1780083"
  },
  {
    "text": "a chunk of what was the buckets. It was like a chunk of references or",
    "start": "1780083",
    "end": "1786125"
  },
  {
    "text": "something like that. Chunk of no transactional array of chunks.",
    "start": "1786125",
    "end": "1791333"
  },
  {
    "text": "It's a reference to a transactional array of chunks.",
    "start": "1791333",
    "end": "1795750"
  },
  {
    "text": "It's beyond me why it is implemented in this way. The reason is it was like that in ZIO",
    "start": "1797791",
    "end": "1804000"
  },
  {
    "text": "But most likely is due to performance to an extent.",
    "start": "1805250",
    "end": "1809750"
  },
  {
    "text": "And maybe the ability of some of those",
    "start": "1810833",
    "end": "1818541"
  },
  {
    "text": "operations may not be implementable with",
    "start": "1818541",
    "end": "1825708"
  },
  {
    "text": "a hash map even though I'm not that sure.",
    "start": "1825708",
    "end": "1829666"
  },
  {
    "text": "Because I think I could implement all of them on top of a hash map.",
    "start": "1831541",
    "end": "1835583"
  },
  {
    "text": "unsure. Again, I was porting from ZIO",
    "start": "1838541",
    "end": "1843708"
  },
  {
    "text": "So at some point we might actually want to reevaluate some of those structures.",
    "start": "1844916",
    "end": "1852125"
  },
  {
    "text": "But now to the interesting point, how",
    "start": "1853291",
    "end": "1859958"
  },
  {
    "text": "many structures do we actually have that are transactional?",
    "start": "1859958",
    "end": "1862458"
  },
  {
    "text": "There's a T array. There's a T deferred.",
    "start": "1865333",
    "end": "1869125"
  },
  {
    "text": "There's a transactional array, transactional deferred. We have a transactional map.",
    "start": "1870375",
    "end": "1875833"
  },
  {
    "text": "We have a transactional priority queue. Transactional pubsub, transactional queue.",
    "start": "1876541",
    "end": "1882166"
  },
  {
    "text": "Transactional random number generation. Re-entering logs.",
    "start": "1883375",
    "end": "1888166"
  },
  {
    "text": "References, semaphores, sets. And for the time being,",
    "start": "1889791",
    "end": "1895083"
  },
  {
    "text": "those are the structures we have. But we could add more.",
    "start": "1895083",
    "end": "1900583"
  },
  {
    "text": "For example, we have a tree utility. We could have transactional tree.",
    "start": "1901083",
    "end": "1904333"
  },
  {
    "text": "The difference is usually you lose a little bit of performance.",
    "start": "1906125",
    "end": "1911166"
  },
  {
    "text": "Because if we think about, for example, what happens here, we are updating a",
    "start": "1912416",
    "end": "1921666"
  },
  {
    "text": "reference with a hash map inside. So there's two operations instead of one.",
    "start": "1921666",
    "end": "1926500"
  },
  {
    "text": "And the whole thing may repeat multiple times. Now, not this specific case because this",
    "start": "1927666",
    "end": "1935125"
  },
  {
    "text": "is doing a single change. But transactional structures are usually",
    "start": "1935125",
    "end": "1942125"
  },
  {
    "text": "slightly less performant than non-transactional structures. For example, we have",
    "start": "1942125",
    "end": "1947750"
  },
  {
    "text": "a semaphore in effect.",
    "start": "1947750",
    "end": "1952458"
  },
  {
    "text": "So effect.make_semaphore, which is extremely optimized.",
    "start": "1952791",
    "end": "1956250"
  },
  {
    "text": "And then we have this T semaphore. And if I show the implementation of the T semaphore, it's just beyond simple.",
    "start": "1958500",
    "end": "1967708"
  },
  {
    "text": "That's the only thing. Basically, it's a T ref of permits.",
    "start": "1969708",
    "end": "1975708"
  },
  {
    "text": "Acquiring the semaphore takes a permit. Releasing the semaphore does plus one on the permits.",
    "start": "1978000",
    "end": "1984041"
  },
  {
    "text": "Period. And everything else, you have it. How would an API, like with permits one,",
    "start": "1986083",
    "end": "1996875"
  },
  {
    "text": "with permits two work, you would have an",
    "start": "1997166",
    "end": "2002875"
  },
  {
    "text": "acquire release, acquire use release. So effect.acquire_use_release.",
    "start": "2002875",
    "end": "2006500"
  },
  {
    "text": "Actually, I think we can even see that. With permits.",
    "start": "2008625",
    "end": "2013666"
  },
  {
    "text": "Okay. Slightly more contrived.",
    "start": "2016708",
    "end": "2022291"
  },
  {
    "text": "But we're basically acquiring end permits, then running the effect and",
    "start": "2023416",
    "end": "2031958"
  },
  {
    "text": "ensuring that after the effect is run, we release the permits.",
    "start": "2031958",
    "end": "2037125"
  },
  {
    "text": "And again, if I show the release end,",
    "start": "2037125",
    "end": "2039041"
  },
  {
    "text": "it's using a lower level API for performance. But you can pretty much see that",
    "start": "2042375",
    "end": "2049375"
  },
  {
    "text": "basically what is happening is it does plus one.",
    "start": "2049375",
    "end": "2053458"
  },
  {
    "text": "The plus end on the thing.",
    "start": "2054416",
    "end": "2058166"
  },
  {
    "text": "Here it uses basically the directly the",
    "start": "2059708",
    "end": "2066791"
  },
  {
    "text": "journaling to avoid doing too many reads. So some of those are implemented in term",
    "start": "2066791",
    "end": "2073875"
  },
  {
    "text": "in in slightly lower level terms for performance reasons. But it could just be",
    "start": "2073875",
    "end": "2081125"
  },
  {
    "text": "implemented as a T ref of permits. And the beautiful thing is that you could",
    "start": "2081125",
    "end": "2087916"
  },
  {
    "text": "mix them up with different things. So, for example, let's say that I have",
    "start": "2087916",
    "end": "2094458"
  },
  {
    "text": "two different semaphores. And for a specific effect, I want to",
    "start": "2094458",
    "end": "2099750"
  },
  {
    "text": "acquire both for it to run. Now we are in a conundrum because if I do",
    "start": "2099750",
    "end": "2108125"
  },
  {
    "text": "it with the normal effect semaphore, it might deadlock.",
    "start": "2108125",
    "end": "2111583"
  },
  {
    "text": "Why? Because let's say I have different operations.",
    "start": "2113416",
    "end": "2118583"
  },
  {
    "text": "Some use the first semaphore. Some use the second semaphore. And one uses both.",
    "start": "2118875",
    "end": "2123625"
  },
  {
    "text": "If I acquire first the first semaphore, I'm blocking that.",
    "start": "2124791",
    "end": "2129375"
  },
  {
    "text": "But if I have another process that is using the first semaphore, then that process also stops.",
    "start": "2130375",
    "end": "2136833"
  },
  {
    "text": "The point is there's no way of saying I need to acquire both semaphores or none of those.",
    "start": "2138333",
    "end": "2143791"
  },
  {
    "text": "There's a way of saying I acquired the first. And once I have the first semaphore, I",
    "start": "2145166",
    "end": "2150875"
  },
  {
    "text": "can acquire the second one. But there is no way of saying I want to acquire both.",
    "start": "2150875",
    "end": "2155083"
  },
  {
    "text": "With STM, there would be a way of saying acquire both.",
    "start": "2156750",
    "end": "2161458"
  },
  {
    "text": "I just need to take them off. So let's say, for example, I have an STM",
    "start": "2162750",
    "end": "2170375"
  },
  {
    "text": "and I have a T-Semaphore. Let's actually do that just",
    "start": "2170375",
    "end": "2176625"
  },
  {
    "text": "for the sake of saying it. Let's say const sem1.",
    "start": "2176625",
    "end": "2185000"
  },
  {
    "text": "Let's say T-Semaphore.make with a single permit.",
    "start": "2188000",
    "end": "2194208"
  },
  {
    "text": "So here I have two separated T-Semaphores. Const with both semaphores.",
    "start": "2195541",
    "end": "2205333"
  },
  {
    "text": "Score it with both. And in this case, I want to accept an effect.",
    "start": "2210458",
    "end": "2215833"
  },
  {
    "text": "Again, this should... The objective is for these to run if both",
    "start": "2222750",
    "end": "2229416"
  },
  {
    "text": "semaphores can be acquired and released, of course.",
    "start": "2229416",
    "end": "2232833"
  },
  {
    "text": "Let's say I acquire use release.",
    "start": "2236708",
    "end": "2242625"
  },
  {
    "text": "Let me... The acquisition stage, let me do an STM transaction.",
    "start": "2247416",
    "end": "2254208"
  },
  {
    "text": "Let's say... There's a question in the chat about is there any simple rule by which I can",
    "start": "2258250",
    "end": "2265000"
  },
  {
    "text": "determine if I need to use STM?",
    "start": "2265000",
    "end": "2266833"
  },
  {
    "text": "I think it's a factor of pain to an extent.",
    "start": "2272208",
    "end": "2276083"
  },
  {
    "text": "If you have synchronization problems between multiple things, STM",
    "start": "2278375",
    "end": "2284416"
  },
  {
    "text": "might be the solution for it. For example, we're going to see an example later where we have... where",
    "start": "2284416",
    "end": "2292708"
  },
  {
    "text": "we're working with queues. And we're going to start with the effect queue, the normal effect queue, and then",
    "start": "2292708",
    "end": "2299291"
  },
  {
    "text": "I'm going to ask a question. How would you take an element from either",
    "start": "2299291",
    "end": "2305625"
  },
  {
    "text": "the first queue if there is an element or the second queue if there is an element?",
    "start": "2305625",
    "end": "2310125"
  },
  {
    "text": "And we're going to discover that this problem is not solvable with effect queues.",
    "start": "2311708",
    "end": "2317666"
  },
  {
    "text": "And even if we solve it, it would be extremely inefficient and",
    "start": "2319791",
    "end": "2326541"
  },
  {
    "text": "unsafe under interruption. So with STM, instead, that's",
    "start": "2326541",
    "end": "2332708"
  },
  {
    "text": "going to be two lines of code. Any time you need to synchronize multiple",
    "start": "2332708",
    "end": "2338166"
  },
  {
    "text": "things, probably you need STM, which is rare, to be honest, especially in up",
    "start": "2338166",
    "end": "2345833"
  },
  {
    "text": "code, that's very rare, which is why, for example, Maxwell never had the chance of trying out the module.",
    "start": "2345833",
    "end": "2352916"
  },
  {
    "text": "Now, I think after knowing the details about the module, use cases may arise.",
    "start": "2354125",
    "end": "2361375"
  },
  {
    "text": "There may be moments where you say, \"Oh,",
    "start": "2362791",
    "end": "2368083"
  },
  {
    "text": "I might have used STM for this specific thing,\" and you found the different solutions.",
    "start": "2368583",
    "end": "2374708"
  },
  {
    "text": "But generally speaking, when you need synchronization and things waiting on specific conditions to kick off, that's",
    "start": "2375708",
    "end": "2382916"
  },
  {
    "text": "the moment you need STM. Or the moment you would benefit from writing the same with STM without too",
    "start": "2382916",
    "end": "2390458"
  },
  {
    "text": "many dirty tricks that you would have to do otherwise.",
    "start": "2390458",
    "end": "2395250"
  },
  {
    "text": "So in this case, we are--I hope I have answered before. Yeah, I think another point I might add",
    "start": "2401291",
    "end": "2408291"
  },
  {
    "text": "is, for example, the development we're doing on effect cluster, what we're doing",
    "start": "2408291",
    "end": "2413333"
  },
  {
    "text": "is theoretically possible with just effect primitives.",
    "start": "2413333",
    "end": "2417708"
  },
  {
    "text": "But it's much more difficult to coordinate all of the things that I need to keep in sync.",
    "start": "2418708",
    "end": "2424291"
  },
  {
    "text": "So it might make sense for something like, for example, the entity manager that we were discussing the last time we were talking about cluster, it might make",
    "start": "2425500",
    "end": "2433041"
  },
  {
    "text": "sense for me to explore whether or not using STM to synchronize all of the different things I'm trying to keep track of.",
    "start": "2433041",
    "end": "2439208"
  },
  {
    "text": "It might make sense for me to use STM. for that, it might not. It's more about, like Mike said, if your",
    "start": "2440083",
    "end": "2445916"
  },
  {
    "text": "use case is that you need to synchronize multiple things, that you're having",
    "start": "2445916",
    "end": "2451833"
  },
  {
    "text": "trouble keeping in sync, and that they also might need to wait on certain conditions before you can run different",
    "start": "2451833",
    "end": "2457375"
  },
  {
    "text": "effects and things like that, STM might be a good solution.",
    "start": "2457375",
    "end": "2462958"
  },
  {
    "text": "But it might be like--it's kind of like there's no rule, so to speak. I think it's more of another tool to keep",
    "start": "2463708",
    "end": "2470500"
  },
  {
    "text": "in your tool belt and to pull it out when you need to use it.",
    "start": "2470500",
    "end": "2474666"
  },
  {
    "text": "And especially in the cases where you need to use it, doing it without, but",
    "start": "2475958",
    "end": "2481125"
  },
  {
    "text": "sometimes possible, is unbelievably extremely hard.",
    "start": "2481125",
    "end": "2487708"
  },
  {
    "text": "Like if I showed the implementation of the normal effect semaphore versus the",
    "start": "2488708",
    "end": "2496625"
  },
  {
    "text": "STM semaphore, in STM it's two lines of code. In effect, it's 40, 50 different lines of",
    "start": "2496625",
    "end": "2504708"
  },
  {
    "text": "code, a very low level and very hard to maintain code. And debugging two lines of code is easy.",
    "start": "2504708",
    "end": "2514666"
  },
  {
    "text": "Debugging 45, 50 lines of very low level code can be a nightmare.",
    "start": "2515375",
    "end": "2523625"
  },
  {
    "text": "And given you are really testing against race conditions, even realizing if you",
    "start": "2524791",
    "end": "2532666"
  },
  {
    "text": "have a problem is absolutely not easy. So I would say if you have",
    "start": "2532666",
    "end": "2539541"
  },
  {
    "text": "synchronization issues, unless you have extremely good reasons not to use STM,",
    "start": "2539541",
    "end": "2545291"
  },
  {
    "text": "using STM is a safe bet. In the worst case, you're going to remove",
    "start": "2546208",
    "end": "2552958"
  },
  {
    "text": "it at the end for very similar APIs.",
    "start": "2552958",
    "end": "2555708"
  },
  {
    "text": "So that's probably the rule. Let's keep going with this.",
    "start": "2558250",
    "end": "2564166"
  },
  {
    "text": "So here I have an acquired use release. So the first is the acquisition state.",
    "start": "2566083",
    "end": "2571916"
  },
  {
    "text": "The second is the use. And the third one is the release state.",
    "start": "2573833",
    "end": "2579708"
  },
  {
    "text": "Let's say release. Release.",
    "start": "2580708",
    "end": "2585375"
  },
  {
    "text": "So that's how I would acquire two semaphores.",
    "start": "2587333",
    "end": "2590583"
  },
  {
    "text": "And this effect will not run if it doesn't acquire both semaphores.",
    "start": "2592625",
    "end": "2598083"
  },
  {
    "text": "But the difference between the same, like one might ask,",
    "start": "2599708",
    "end": "2606041"
  },
  {
    "text": "this is the STM version. Let's program F.",
    "start": "2612916",
    "end": "2619083"
  },
  {
    "text": "Effect make semaphore. Effect make semaphore.",
    "start": "2622041",
    "end": "2627291"
  },
  {
    "text": "Okay, it's called take.",
    "start": "2635791",
    "end": "2637625"
  },
  {
    "text": "There's another question about in the STM implementation. Should the semaphores be released in the opposite order?",
    "start": "2646458",
    "end": "2652541"
  },
  {
    "text": "But I don't think that the order of release necessarily matters because the",
    "start": "2653208",
    "end": "2658458"
  },
  {
    "text": "STM transactions happening atomically.",
    "start": "2658458",
    "end": "2661250"
  },
  {
    "text": "Look we're learining, we're learning chat",
    "start": "2665958",
    "end": "2669250"
  },
  {
    "text": " I think in the first in the acquire, you're taking two permits from the second semaphore.",
    "start": "2685083",
    "end": "2690333"
  },
  {
    "text": "Yes, of course. So while optically those",
    "start": "2690708",
    "end": "2696666"
  },
  {
    "text": "two things are the same. They are completely different.",
    "start": "2696666",
    "end": "2701625"
  },
  {
    "text": "When these runs first, it takes the first semaphore.",
    "start": "2703166",
    "end": "2706750"
  },
  {
    "text": "Anybody else who tries to take the same the first semaphore will not succeed because the semaphore is taken.",
    "start": "2708541",
    "end": "2715666"
  },
  {
    "text": "Then it takes the second one. So if the second one takes, you know, a",
    "start": "2715916",
    "end": "2725208"
  },
  {
    "text": "month to acquire, you're blocking the first one for a month.",
    "start": "2725208",
    "end": "2729875"
  },
  {
    "text": "In this case, they are both taken at the same time. And the first one is not taken if the",
    "start": "2731875",
    "end": "2737041"
  },
  {
    "text": "second one is not available. The reverse is the same.",
    "start": "2737041",
    "end": "2741708"
  },
  {
    "text": "It may be even more illustrative to show the actual race condition here, where we like have an effect",
    "start": "2742250",
    "end": "2748041"
  },
  {
    "text": "in our program effect. We can have like one program that immediately takes the first semaphore.",
    "start": "2748041",
    "end": "2752583"
  },
  {
    "text": "And then our with both tries to run. And then we have a second effect.",
    "start": "2753708",
    "end": "2759458"
  },
  {
    "text": "We have a three effects that are like essentially in a total deadlock in the.",
    "start": "2759708",
    "end": "2765500"
  },
  {
    "text": "Let's see how I can create a deadlock.",
    "start": "2766083",
    "end": "2768000"
  },
  {
    "text": "How can I create a deadlock from here?",
    "start": "2771500",
    "end": "2774125"
  },
  {
    "text": "So I guess the first thing we would do is. First, I need to run something that takes",
    "start": "2778875",
    "end": "2786083"
  },
  {
    "text": "the second semaphore. And also, just to be clear, while Mike is thinking through this for the chat, what",
    "start": "2786083",
    "end": "2792750"
  },
  {
    "text": "we're doing here is very contrived on purpose so that we can show like.",
    "start": "2792750",
    "end": "2797458"
  },
  {
    "text": "In like very few lines of code, what actually is going on with these semaphores, but in an application where",
    "start": "2799708",
    "end": "2806791"
  },
  {
    "text": "you might have layers that contain semaphores that are being accessed by",
    "start": "2806791",
    "end": "2811833"
  },
  {
    "text": "multiple different effects within different fibers, etc, etc. Like having guarantees when you're in",
    "start": "2811833",
    "end": "2819208"
  },
  {
    "text": "situations like this is extremely important to avoid deadlocks.",
    "start": "2819208",
    "end": "2823291"
  },
  {
    "text": "So what we're doing here obviously is contrived, but like in an app code when",
    "start": "2824416",
    "end": "2829916"
  },
  {
    "text": "you're managing this like situations like these, I can I'm already starting to see like the.",
    "start": "2829916",
    "end": "2834500"
  },
  {
    "text": "Areas where STM could potentially like be beneficial even in cluster for like",
    "start": "2835583",
    "end": "2840833"
  },
  {
    "text": "providing guarantees, basically. Now, if I want to generate a deadlock",
    "start": "2840833",
    "end": "2847541"
  },
  {
    "text": "here, I'm going to have to do something slightly dirty because it's a minimized example.",
    "start": "2847541",
    "end": "2853208"
  },
  {
    "text": "But the point being. I would.",
    "start": "2854666",
    "end": "2859208"
  },
  {
    "text": "First have to run. This that requires both.",
    "start": "2860916",
    "end": "2864875"
  },
  {
    "text": "But as soon as the first one is taken. Take the second one from somewhere else.",
    "start": "2866166",
    "end": "2873625"
  },
  {
    "text": "And then. Once that occurs.",
    "start": "2875750",
    "end": "2879666"
  },
  {
    "text": "Inside there. We could retake this",
    "start": "2881583",
    "end": "2887666"
  },
  {
    "text": "retake the first one. Yeah, it's not.",
    "start": "2887666",
    "end": "2892625"
  },
  {
    "text": "I mean, we could probably use a deferred right to manage.",
    "start": "2893708",
    "end": "2901166"
  },
  {
    "text": "Making sure that we take the first. Then we could write it, but inverted.",
    "start": "2902958",
    "end": "2910833"
  },
  {
    "text": "And. I could then. Run.",
    "start": "2916916",
    "end": "2924875"
  },
  {
    "text": "So basically we would run with both followed by with both inverted right. two things in parallel one with.",
    "start": "2926541",
    "end": "2934000"
  },
  {
    "text": "With both and the other with both inverted. Yeah, and then the there would be a deferred like sitting basically in",
    "start": "2935458",
    "end": "2942000"
  },
  {
    "text": "between the take inside with both and we would complete the deferred in with both.",
    "start": "2942000",
    "end": "2948291"
  },
  {
    "text": "Inverted. Like await the deferred then complete it.",
    "start": "2948291",
    "end": "2955666"
  },
  {
    "text": "No, that that would create a deadlock artificially a deadlock between the deferred.",
    "start": "2956541",
    "end": "2961083"
  },
  {
    "text": "That's not. Like the deadlock has to be created by the semaphores.",
    "start": "2961708",
    "end": "2967583"
  },
  {
    "text": "Right. Being taken out of order So probably an effect",
    "start": "2968125",
    "end": "2974000"
  },
  {
    "text": "delay of one second.",
    "start": "2974000",
    "end": "2978041"
  },
  {
    "text": "And.",
    "start": "2981541",
    "end": "2982125"
  },
  {
    "text": "This wouldn't deadlock",
    "start": "2988583",
    "end": "2989708"
  },
  {
    "text": "I was thinking. Effect.all.",
    "start": "2996583",
    "end": "2999416"
  },
  {
    "text": "So twice these. But. With both.",
    "start": "3002583",
    "end": "3007916"
  },
  {
    "text": "Inverted. But I'm not ",
    "start": "3010291",
    "end": "3015375"
  },
  {
    "text": "sure these even deadlocks",
    "start": "3015375",
    "end": "3016708"
  },
  {
    "text": "So I mean like I think this is a perfect example of like it's even hard to reason about deadlocks when you're trying to create them.",
    "start": "3042750",
    "end": "3048416"
  },
  {
    "text": "So like.",
    "start": "3048708",
    "end": "3051041"
  },
  {
    "text": "It doesn't. Of course. Yeah I mean we have to produce the",
    "start": "3054250",
    "end": "3059916"
  },
  {
    "text": "deadlock artificially right. So. If we ran.",
    "start": "3059916",
    "end": "3065333"
  },
  {
    "text": "What if we ran. What if we delayed.",
    "start": "3068250",
    "end": "3073291"
  },
  {
    "text": "The inverted one.",
    "start": "3075875",
    "end": "3076708"
  },
  {
    "text": "No we'd have to have like. The point is. The.",
    "start": "3081000",
    "end": "3084000"
  },
  {
    "text": "Let me. Let me try something else. Maybe.",
    "start": "3089875",
    "end": "3093208"
  },
  {
    "text": "So.",
    "start": "3096500",
    "end": "3096708"
  },
  {
    "text": "It takes the first. With 10 millisecond.",
    "start": "3107833",
    "end": "3111875"
  },
  {
    "text": "Take the second. The inverted first takes the second.",
    "start": "3113625",
    "end": "3119958"
  },
  {
    "text": "And then tries to take the first. I'm pretty sure this is going to look.",
    "start": "3124208",
    "end": "3129541"
  },
  {
    "text": "Are they running concurrently in effect at all. Do you have it set to the concurrent",
    "start": "3138583",
    "end": "3143625"
  },
  {
    "text": "So it might have deadlocked. It might have even deadlocked before without the sleep. I'm not sure about that but I'm not sure",
    "start": "3150041",
    "end": "3159083"
  },
  {
    "text": "about it either but. No that's not the case but probably this",
    "start": "3159083",
    "end": "3164208"
  },
  {
    "text": "is this is now that that that locked. No no no.",
    "start": "3164208",
    "end": "3169541"
  },
  {
    "text": "First.",
    "start": "3181708",
    "end": "3182708"
  },
  {
    "text": "Second. I want to see what happens.",
    "start": "3188875",
    "end": "3191750"
  },
  {
    "text": "So the first acquires everything.",
    "start": "3196500",
    "end": "3200708"
  },
  {
    "text": "Well that's interesting. Somewhat concerning.",
    "start": "3220833",
    "end": "3227166"
  },
  {
    "text": "So it seems like we have a bug somewhere.",
    "start": "3270041",
    "end": "3273041"
  },
  {
    "text": "That's interesting.",
    "start": "3275791",
    "end": "3276375"
  },
  {
    "text": "Why would this complete. I want to complete without logging anything.",
    "start": "3281416",
    "end": "3285875"
  },
  {
    "text": "Yeah.",
    "start": "3287083",
    "end": "3287291"
  },
  {
    "text": "They even get there. Mike's favorite debugging debug log.",
    "start": "3295375",
    "end": "3299708"
  },
  {
    "text": "Okay so we have two fibers if they deadlock.",
    "start": "3310166",
    "end": "3312750"
  },
  {
    "text": "The program shouldn't ever complete. Yeah.",
    "start": "3315666",
    "end": "3320583"
  },
  {
    "text": "Very suspicious.",
    "start": "3361541",
    "end": "3363125"
  },
  {
    "text": "Actually it's not. And I. I think I know what's going on.",
    "start": "3368708",
    "end": "3376416"
  },
  {
    "text": "The. Point being.",
    "start": "3377250",
    "end": "3380125"
  },
  {
    "text": "If there is no handle. And nothing else that should occur.",
    "start": "3382916",
    "end": "3389458"
  },
  {
    "text": "The JavaScript stuck is empty. So in this case we have taken.",
    "start": "3391041",
    "end": "3396333"
  },
  {
    "text": "A lock so that we've taken the first semaphore or rather we've taken the",
    "start": "3397791",
    "end": "3403000"
  },
  {
    "text": "second semaphore where does leap. That occurs.",
    "start": "3403000",
    "end": "3407583"
  },
  {
    "text": "Then what's next. I can't continue unless something changed.",
    "start": "3409958",
    "end": "3415916"
  },
  {
    "text": "So the event loop. Is empty. And the current stock is empty.",
    "start": "3417416",
    "end": "3423041"
  },
  {
    "text": "So the process is terminated. This is why for",
    "start": "3424708",
    "end": "3431000"
  },
  {
    "text": "example in effect dot never.",
    "start": "3431000",
    "end": "3434500"
  },
  {
    "text": "We have these set interval. Effect dot never in theory.",
    "start": "3438750",
    "end": "3444166"
  },
  {
    "text": "Could just be. That.",
    "start": "3446208",
    "end": "3449750"
  },
  {
    "text": "I'm creating a sync effect that I never. Never resume.",
    "start": "3454208",
    "end": "3458000"
  },
  {
    "text": "Why I need this fake set interval that does absolutely nothing.",
    "start": "3460083",
    "end": "3464000"
  },
  {
    "text": "So that there is something in the. In the event queue that prevents the",
    "start": "3465333",
    "end": "3470500"
  },
  {
    "text": "JavaScript process to exit. Right. Well I guess this is technically demonstrated the deadlock.",
    "start": "3470500",
    "end": "3476541"
  },
  {
    "text": "Technically yes. I'm not sure if in.",
    "start": "3477875",
    "end": "3484416"
  },
  {
    "text": "If in run main",
    "start": "3486708",
    "end": "3487708"
  },
  {
    "text": "Not run time run main",
    "start": "3492291",
    "end": "3494125"
  },
  {
    "text": "Let me. I'm not sure if if I've added. This background process in the.",
    "start": "3497708",
    "end": "3505875"
  },
  {
    "text": "Yeah. Because this creates a background process.",
    "start": "3507166",
    "end": "3513000"
  },
  {
    "text": "That keeps the handle to the program that keeps the yes there's there's basically a handle registered.",
    "start": "3514541",
    "end": "3519625"
  },
  {
    "text": "But that proved the deadlock. You see we are in a case where we are dead locking. No bug dead locking the",
    "start": "3522000",
    "end": "3528625"
  },
  {
    "text": "things there's no bug. And and now you might",
    "start": "3528625",
    "end": "3534208"
  },
  {
    "text": "say this is artificial. Yes it is. But.",
    "start": "3534208",
    "end": "3539333"
  },
  {
    "text": "This. Is far from artificial.",
    "start": "3541291",
    "end": "3544083"
  },
  {
    "text": "Because putting this leap. OK it's something. That you are.",
    "start": "3546750",
    "end": "3552000"
  },
  {
    "text": "Doing this case I'm yielding. And fibers can yield at any point in time.",
    "start": "3552708",
    "end": "3557208"
  },
  {
    "text": "In effect so between those two operations. The fiber run time might decide that it",
    "start": "3559000",
    "end": "3564916"
  },
  {
    "text": "had enough with this specific effect. It yields let something else run and then continue.",
    "start": "3564916",
    "end": "3571333"
  },
  {
    "text": "This should steal deadlock. If these deadlocks I'm absolutely amazed.",
    "start": "3572208",
    "end": "3578791"
  },
  {
    "text": "You see it doesn't that like. This is this is not",
    "start": "3579541",
    "end": "3584625"
  },
  {
    "text": "completing this is expected behavior. This is expected behavior but this is not completing.",
    "start": "3584625",
    "end": "3590166"
  },
  {
    "text": "In an STM. transaction there's no way that you can yield when the transaction occurs.",
    "start": "3593666",
    "end": "3598708"
  },
  {
    "text": "There's no way that these situation ever.",
    "start": "3600125",
    "end": "3603708"
  },
  {
    "text": "Ever occurs. So.",
    "start": "3606666",
    "end": "3608458"
  },
  {
    "text": "It wasn't that easy to. To create the deadlock of course. Like that's.",
    "start": "3611708",
    "end": "3617750"
  },
  {
    "text": "That's expected race conditions are not are not intuitive.",
    "start": "3618375",
    "end": "3622541"
  },
  {
    "text": "Here if I invert them. ",
    "start": "3667083",
    "end": "3669125"
  },
  {
    "text": "And I do the second part.",
    "start": "3680458",
    "end": "3683125"
  },
  {
    "text": "Can clean up this so it might maybe fits in the screen.",
    "start": "3693708",
    "end": "3698458"
  },
  {
    "text": "There is absolutely no way that we can make this program deadlock We cannot add a yield here.",
    "start": "3705708",
    "end": "3713791"
  },
  {
    "text": "And again those things can happen. Against your will.",
    "start": "3720500",
    "end": "3724250"
  },
  {
    "text": "So. Now we've manually created a deadlock situation.",
    "start": "3725541",
    "end": "3730791"
  },
  {
    "text": "with STM there's no way of creating one.",
    "start": "3732083",
    "end": "3735916"
  },
  {
    "text": "Not even if we wanted to. Which means. It can't happen.",
    "start": "3737333",
    "end": "3742375"
  },
  {
    "text": "In a. In a real world use case. Where it's much more complex than just.",
    "start": "3743833",
    "end": "3749250"
  },
  {
    "text": "Two operations run concurrently.",
    "start": "3750250",
    "end": "3751458"
  },
  {
    "text": "I guess. That can be it for semaphores We're just going to show",
    "start": "3756916",
    "end": "3762833"
  },
  {
    "text": "now the example with cues. To see another. Another use case",
    "start": "3762833",
    "end": "3768333"
  },
  {
    "text": "another potential use case. Yeah this I thought was cool. I was looking at your",
    "start": "3768333",
    "end": "3774958"
  },
  {
    "text": "PR on this and I thought it was kind of very cool use cases STM Now in the PR it's slightly more contrived I'll show it.",
    "start": "3774958",
    "end": "3786000"
  },
  {
    "text": "I'll show it later. But even a very. Normal.",
    "start": "3786208",
    "end": "3790833"
  },
  {
    "text": "Normal looking. Thing let's let's get rid of this.",
    "start": "3791708",
    "end": "3795916"
  },
  {
    "text": "And let's start empty. queue 1 Equal.",
    "start": "3798375",
    "end": "3803541"
  },
  {
    "text": "yield queue dot Unbounded.",
    "start": "3805791",
    "end": "3811625"
  },
  {
    "text": "Let's say we want a queue of numbers and then we want a queue of string.",
    "start": "3813750",
    "end": "3817833"
  },
  {
    "text": "queue2 Then let's say I have a process.",
    "start": "3820541",
    "end": "3825708"
  },
  {
    "text": "That. Sleeps around on time.",
    "start": "3843333",
    "end": "3846666"
  },
  {
    "text": "There's a question in the chat. Is it correct that STM has more strong properties than effect or is it",
    "start": "3854791",
    "end": "3861708"
  },
  {
    "text": "completely different fields. I'm not entirely sure I",
    "start": "3861708",
    "end": "3866750"
  },
  {
    "text": "understand the question.",
    "start": "3866750",
    "end": "3868166"
  },
  {
    "text": "Could you elaborate on what you mean by strong properties. And then perhaps we could answer that",
    "start": "3874291",
    "end": "3880625"
  },
  {
    "text": "question a little bit better.",
    "start": "3880625",
    "end": "3881708"
  },
  {
    "text": "Here we have one fiber that fills up queue1.",
    "start": "3924708",
    "end": "3928875"
  },
  {
    "text": "Now one fiber that fills up queue2",
    "start": "3931208",
    "end": "3935291"
  },
  {
    "text": "Actually let's make them both. Offstring. So at least we have a differentiator.",
    "start": "3946041",
    "end": "3952708"
  },
  {
    "text": "So queue1",
    "start": "3955750",
    "end": "3958833"
  },
  {
    "text": "queue2 There's no Q3 and Q4 because the company failed.",
    "start": "3962875",
    "end": "3968500"
  },
  {
    "text": "And this was an accounting joke. Counting periods worked in quarters.",
    "start": "3971666",
    "end": "3977333"
  },
  {
    "text": "We refer to Q1 Q2 Q3 Q4.",
    "start": "3978041",
    "end": "3980708"
  },
  {
    "text": "Not not an easy to understand joke. Apologies. OK we are filling up the",
    "start": "3984291",
    "end": "3990458"
  },
  {
    "text": "two queues at a random time. And now the task would be.",
    "start": "3990458",
    "end": "3994166"
  },
  {
    "text": "Take from either. Of those queues",
    "start": "3996208",
    "end": "4001708"
  },
  {
    "text": "And print. String. And what's the condition for taking from",
    "start": "4004333",
    "end": "4010958"
  },
  {
    "text": "either of them like if if there's an element to actually take. Or you just take randomly from either.",
    "start": "4010958",
    "end": "4015083"
  },
  {
    "text": "Just take from either. How would you even go there. How would you even do that.",
    "start": "4017333",
    "end": "4022833"
  },
  {
    "text": "Take from either of those queues. Well the second we take from one.",
    "start": "4030708",
    "end": "4036291"
  },
  {
    "text": "If the queue is empty or just going to. Wait.",
    "start": "4036916",
    "end": "4042000"
  },
  {
    "text": "We're just going to end up like. Like suspending until there's an actual element to take.",
    "start": "4042708",
    "end": "4049125"
  },
  {
    "text": "So we can't. That doesn't work.",
    "start": "4049125",
    "end": "4056000"
  },
  {
    "text": "We can check if a queue is empty or not. Right. We have a function.",
    "start": "4058541",
    "end": "4063416"
  },
  {
    "text": "Which says. queue size",
    "start": "4065041",
    "end": "4069916"
  },
  {
    "text": "Or. Is empty. So we could in theory say.",
    "start": "4070541",
    "end": "4075208"
  },
  {
    "text": "First is not empty take. If second is not empty take.",
    "start": "4076708",
    "end": "4081208"
  },
  {
    "text": "OK. But we would need to build a loop.",
    "start": "4084625",
    "end": "4088750"
  },
  {
    "text": "To do that. To take the elements progressive.",
    "start": "4091333",
    "end": "4095625"
  },
  {
    "text": "Let's do it while.",
    "start": "4097000",
    "end": "4098791"
  },
  {
    "text": "While true. If.",
    "start": "4106083",
    "end": "4108666"
  },
  {
    "text": "yield queue.isEmpty",
    "start": "4111250",
    "end": "4115041"
  },
  {
    "text": "queue1 We want to say if it's not. Empty.",
    "start": "4123708",
    "end": "4128458"
  },
  {
    "text": "Then.",
    "start": "4131708",
    "end": "4132208"
  },
  {
    "text": "We want to.",
    "start": "4138166",
    "end": "4140208"
  },
  {
    "text": "Take.",
    "start": "4144541",
    "end": "4147708"
  },
  {
    "text": "Q1.",
    "start": "4150708",
    "end": "4150750"
  },
  {
    "text": "Then. If the second is not empty.",
    "start": "4161166",
    "end": "4166250"
  },
  {
    "text": "We do the same. But if they're both empty.",
    "start": "4168708",
    "end": "4175541"
  },
  {
    "text": "What happens. And we just loop forever.",
    "start": "4176958",
    "end": "4181750"
  },
  {
    "text": "Never stop.",
    "start": "4182375",
    "end": "4182958"
  },
  {
    "text": "This could be one solution. We just.",
    "start": "4195375",
    "end": "4200708"
  },
  {
    "text": "Go on and pull. Which is not very. Not very efficient.",
    "start": "4205166",
    "end": "4210000"
  },
  {
    "text": "You can see that it probably works.",
    "start": "4212958",
    "end": "4214333"
  },
  {
    "text": "But we have an infinite loop. We have something that keeps looping.",
    "start": "4224666",
    "end": "4230541"
  },
  {
    "text": "If we do. Console dot log. Here.",
    "start": "4230541",
    "end": "4233750"
  },
  {
    "text": "Yeah we're just wasting CPU cycles. And.",
    "start": "4240791",
    "end": "4244750"
  },
  {
    "text": "If the elements are faster than 10 millis. Actually it would work but. We have to.",
    "start": "4246125",
    "end": "4252583"
  },
  {
    "text": "Like here we could place a yield now we're wasting CPU cycles.",
    "start": "4253208",
    "end": "4256666"
  },
  {
    "text": "And it's again not not efficient at all. Now that let's do a very small change.",
    "start": "4259750",
    "end": "4265791"
  },
  {
    "text": "Instead of queue I'm going to have a transactional queue",
    "start": "4266958",
    "end": "4271416"
  },
  {
    "text": "As you see I'm mostly changing. The. Letters from the rest of the program.",
    "start": "4274208",
    "end": "4280750"
  },
  {
    "text": "I remove this. Scrap.",
    "start": "4287125",
    "end": "4290708"
  },
  {
    "text": "I convert this to an STM Gen.",
    "start": "4294708",
    "end": "4299333"
  },
  {
    "text": "we're basically doing an exercise of replacing.",
    "start": "4318958",
    "end": "4324041"
  },
  {
    "text": "From either.",
    "start": "4343250",
    "end": "4345166"
  },
  {
    "text": "And I can then have my. Program.",
    "start": "4351000",
    "end": "4355416"
  },
  {
    "text": "Which says take from either queue. Flat map.",
    "start": "4356916",
    "end": "4361083"
  },
  {
    "text": "Element. For like explicit. Explicit tiveness.",
    "start": "4362083",
    "end": "4366791"
  },
  {
    "text": "You just wrap the take either from queue and STM.commit So the second that you pipe an STM",
    "start": "4367375",
    "end": "4374750"
  },
  {
    "text": "Into an effect it does it commit behind the scenes the same way that you would.",
    "start": "4374750",
    "end": "4379375"
  },
  {
    "text": "The same exact way that. That yielding an STM",
    "start": "4380083",
    "end": "4385250"
  },
  {
    "text": "Doesn't STM Commit behind the scenes and. Whatnot. Yeah this is basically.",
    "start": "4385250",
    "end": "4390708"
  },
  {
    "text": "It's basically the same. And.",
    "start": "4392208",
    "end": "4395875"
  },
  {
    "text": "To be frank. That's a larger discussion we are not quite sure.",
    "start": "4397708",
    "end": "4402291"
  },
  {
    "text": "About sub typing for the future. With Effect three point zero we went",
    "start": "4403541",
    "end": "4409083"
  },
  {
    "text": "all in on the sub typing thing. So most of the data types that you find in effect like options references and so",
    "start": "4409083",
    "end": "4416541"
  },
  {
    "text": "on and so forth there are subtypes of effect. But they do create some troubles with.",
    "start": "4416541",
    "end": "4420708"
  },
  {
    "text": "With auto flattening. Because sometimes you get unexpected results.",
    "start": "4422083",
    "end": "4426041"
  },
  {
    "text": "I think. For. Four point zero we will allow you to",
    "start": "4428041",
    "end": "4433875"
  },
  {
    "text": "yield those types if you want to. But they wouldn't be subtypes of of effect.",
    "start": "4433875",
    "end": "4439958"
  },
  {
    "text": "So in this case you would. Have to explicitly say STM dot commit",
    "start": "4440875",
    "end": "4446083"
  },
  {
    "text": "Which is still in discussion. But I think can make things a little bit more.",
    "start": "4448458",
    "end": "4454583"
  },
  {
    "text": "Explicit. And a little bit less surprising.",
    "start": "4455333",
    "end": "4458750"
  },
  {
    "text": "But that's beyond that's beyond the point of of STM It's really a general.",
    "start": "4461583",
    "end": "4466708"
  },
  {
    "text": "General thing. I've left the. Console.log here for the purposes of.",
    "start": "4468041",
    "end": "4475416"
  },
  {
    "text": "Of demonstration.",
    "start": "4477833",
    "end": "4478708"
  },
  {
    "text": "It's a lot less here. Now it's still printed a few times.",
    "start": "4488833",
    "end": "4496125"
  },
  {
    "text": "Actually it be curious to know why it's printing both.",
    "start": "4496916",
    "end": "4501708"
  },
  {
    "text": "I guess. It is going to take is just taking an element to.",
    "start": "4503166",
    "end": "4508708"
  },
  {
    "text": "Yeah because. It's it's it's filling up the queue asynchronously right. So the it's it's going to do the check.",
    "start": "4508708",
    "end": "4514958"
  },
  {
    "text": "And then retry if either queue is empty or if both cues are empty. Right. So it's going to check have to check at",
    "start": "4516125",
    "end": "4523291"
  },
  {
    "text": "least a few times in between when it can actually take an element. Right.",
    "start": "4523291",
    "end": "4526916"
  },
  {
    "text": "There's probably some. Again it's not guaranteed to run once.",
    "start": "4528708",
    "end": "4535208"
  },
  {
    "text": "But point being it runs way less times than it was running before.",
    "start": "4535208",
    "end": "4541166"
  },
  {
    "text": "And especially. If no changes happen over the cues.",
    "start": "4542208",
    "end": "4547750"
  },
  {
    "text": "It's never going to loop. Which means we are not. We're not running.",
    "start": "4550083",
    "end": "4555458"
  },
  {
    "text": "Well this is this is atomic so we are not.",
    "start": "4557166",
    "end": "4562041"
  },
  {
    "text": "There's nothing artificial here. This continues only if one of the two cues.",
    "start": "4563041",
    "end": "4569791"
  },
  {
    "text": "Are. Are not empty. And the other important element is given",
    "start": "4571541",
    "end": "4579625"
  },
  {
    "text": "all of this is atomic. If by any chance the stake gets interrupted.",
    "start": "4579625",
    "end": "4585125"
  },
  {
    "text": "None of the queues loses the elements.  Which is the case with effect dot.",
    "start": "4585708",
    "end": "4592416"
  },
  {
    "text": "With the with the effect use. If you have an open taker that you interrupt. And there is a race condition you might",
    "start": "4593541",
    "end": "4600125"
  },
  {
    "text": "lose an element in the queue. Now again the queues for the effect use",
    "start": "4600125",
    "end": "4605541"
  },
  {
    "text": "are meant to never be interrupted. So they are like global global things.",
    "start": "4605541",
    "end": "4612208"
  },
  {
    "text": "So you're not supposed to interrupt the take. But there is there is a",
    "start": "4612875",
    "end": "4619291"
  },
  {
    "text": "valid use case sometimes. When I was developing in a very early.",
    "start": "4619291",
    "end": "4625333"
  },
  {
    "text": "Very early version of. Effect actor that now is",
    "start": "4627333",
    "end": "4632750"
  },
  {
    "text": "becoming effect cluster. I had a very similar API.",
    "start": "4632750",
    "end": "4638208"
  },
  {
    "text": "To the one we have now. And. My mailbox was simply a queue.",
    "start": "4639333",
    "end": "4644708"
  },
  {
    "text": "And I had an issue because interrupting an actor. Would raise condition on the on the mailbox.",
    "start": "4645708",
    "end": "4652625"
  },
  {
    "text": "Potentially making the actor lose a message. Which to be honest we might even have this now.",
    "start": "4653833",
    "end": "4659833"
  },
  {
    "text": "I need I need to check the internal details of how. Mailboxes implemented.",
    "start": "4661458",
    "end": "4666833"
  },
  {
    "text": "But worst case we can use a Tqueue And that's not there's no risk.",
    "start": "4668083",
    "end": "4671750"
  },
  {
    "text": "Of that ever ever occurring. So this is this is STM.",
    "start": "4673166",
    "end": "4679500"
  },
  {
    "text": "I will. Now quickly show the PR.",
    "start": "4680250",
    "end": "4683916"
  },
  {
    "text": "That we were working on. So the PR is this one.",
    "start": "4685333",
    "end": "4691291"
  },
  {
    "text": "It's add TSbscriptionRef.  That. A user.",
    "start": "4693291",
    "end": "4698833"
  },
  {
    "text": "Wanted so it's a transactional. Subscription ref.",
    "start": "4700125",
    "end": "4703291"
  },
  {
    "text": "And there has been. This has been going on for for a long time.",
    "start": "4705791",
    "end": "4710958"
  },
  {
    "text": "Partially due to my fault of having not. Not reviewed. These deeply deeply enough to begin with.",
    "start": "4711583",
    "end": "4718375"
  },
  {
    "text": "And to summarize a little bit. A subscription ref it's a reference.",
    "start": "4719875",
    "end": "4725083"
  },
  {
    "text": "Where you can also observe the changes.",
    "start": "4725708",
    "end": "4727958"
  },
  {
    "text": "And. The default. Subscription ref uses a stream.",
    "start": "4730791",
    "end": "4736791"
  },
  {
    "text": "For the. For the changes. So when you subscribe you get back. You get back a stream of changes that",
    "start": "4737375",
    "end": "4744333"
  },
  {
    "text": "contains the current value. And potentially also the. The following changes to.",
    "start": "4744333",
    "end": "4750375"
  },
  {
    "text": "To that value. This case we want the same but transactional.",
    "start": "4750916",
    "end": "4755416"
  },
  {
    "text": "And initially these user was.",
    "start": "4756416",
    "end": "4759583"
  },
  {
    "text": "Was implementing the changes as a stream. But the stream is not transactional.",
    "start": "4766791",
    "end": "4772375"
  },
  {
    "text": "And Tim rightly pointed out. The thing this should be an STM Of a Tqueue",
    "start": "4773666",
    "end": "4779458"
  },
  {
    "text": "More precisely an STM Of a TDQueue",
    "start": "4780625",
    "end": "4782958"
  },
  {
    "text": "So that. There is transactionality. So you could use that that. Subscription inside",
    "start": "4786625",
    "end": "4793416"
  },
  {
    "text": "an STM transaction",
    "start": "4793416",
    "end": "4796416"
  },
  {
    "text": "And this took a while and the user was like",
    "start": "4798708",
    "end": "4803916"
  },
  {
    "text": "I'm having a little bit of troubles. Because. I would need a way of merging TQueues",
    "start": "4804916",
    "end": "4811333"
  },
  {
    "text": "And he sort of. Made the point in this way where basically what he's creating.",
    "start": "4813500",
    "end": "4819250"
  },
  {
    "text": "an unbounded Queue Then it's. Getting a reference. Getting the current value.",
    "start": "4819250",
    "end": "4825208"
  },
  {
    "text": "Pushing the current value on the queue So this is the first. Value. Then subscribing to",
    "start": "4826333",
    "end": "4831833"
  },
  {
    "text": "the pop-sub of changes. But then how does it work?",
    "start": "4831833",
    "end": "4836375"
  },
  {
    "text": "They can't create a stream. Out of it. STM Cannot fork.",
    "start": "4838208",
    "end": "4843666"
  },
  {
    "text": "A process. So it's like how do I make a Tqueue",
    "start": "4844333",
    "end": "4847916"
  },
  {
    "text": "That has the first element. Of the current value. And the rest of the elements.",
    "start": "4849458",
    "end": "4854125"
  },
  {
    "text": "The change stream. Basically the rest of the elements are the individual changes.",
    "start": "4855875",
    "end": "4860875"
  },
  {
    "text": "I was like changes doesn't contain the current value usually. And I was pointed.",
    "start": "4863708",
    "end": "4867750"
  },
  {
    "text": "To the comment that actually it does. So I was dead wrong.",
    "start": "4869083",
    "end": "4874208"
  },
  {
    "text": "I was like then we just probably need to implement the TDqueue",
    "start": "4874208",
    "end": "4879458"
  },
  {
    "text": "Interface with a custom implementation. And yesterday I had.",
    "start": "4879458",
    "end": "4884458"
  },
  {
    "text": "I had a little bit of trying. And with this commit.",
    "start": "4886166",
    "end": "4889625"
  },
  {
    "text": "I actually made it. Made work. So basically I created a custom.",
    "start": "4891958",
    "end": "4898333"
  },
  {
    "text": "TDqueue merge. That. Implements the TDqueue interface.",
    "start": "4899500",
    "end": "4905208"
  },
  {
    "text": "Which can be constructed with two queues. First one and a second one.",
    "start": "4906500",
    "end": "4911416"
  },
  {
    "text": "And then I've basically done exactly what we've done now. So I've I've went through implementing",
    "start": "4913333",
    "end": "4919583"
  },
  {
    "text": "every single method. So let's see if we see peak option how it is implemented.",
    "start": "4919583",
    "end": "4926083"
  },
  {
    "text": "Well it's it's an STM generator where I first pick the first queue.",
    "start": "4926083",
    "end": "4932583"
  },
  {
    "text": "If there is an element I return it. If the then I do the same on the second queue",
    "start": "4933333",
    "end": "4939125"
  },
  {
    "text": "And I keep going. The take. Is exactly the same code.",
    "start": "4940000",
    "end": "4945208"
  },
  {
    "text": "That we've done now. We check if the first is not empty we take from the first if the second is not empty we take from the second.",
    "start": "4946458",
    "end": "4952875"
  },
  {
    "text": "And I kept going implementing all of the all of the methods on the Tqueue",
    "start": "4954250",
    "end": "4959291"
  },
  {
    "text": "And. This was fairly surprising to me because again this is absolutely impossible to do",
    "start": "4961083",
    "end": "4967625"
  },
  {
    "text": "with a normal with a normal cue. And. I thought this was this was really nice.",
    "start": "4967625",
    "end": "4974833"
  },
  {
    "text": "And this kind of shows. Again why. Why STM is actually",
    "start": "4975750",
    "end": "4982291"
  },
  {
    "text": "is actually very powerful. Especially for those contrived.",
    "start": "4982291",
    "end": "4987125"
  },
  {
    "text": "Contrived use cases. So we've we've roughly went through everything that is",
    "start": "4988541",
    "end": "4994250"
  },
  {
    "text": "required to understand. These examples today. In in code with live examples.",
    "start": "4994250",
    "end": "5001875"
  },
  {
    "text": "But this is actually how you then manipulate those those transactional",
    "start": "5001875",
    "end": "5007458"
  },
  {
    "text": "structures in in real life even to create again custom data types that can act that",
    "start": "5007458",
    "end": "5015041"
  },
  {
    "text": "cannot transactionally. So now the final interface for.",
    "start": "5015041",
    "end": "5021000"
  },
  {
    "text": "For these PR. ended up. Let's let's just. See it.",
    "start": "5023125",
    "end": "5031333"
  },
  {
    "text": "In action.",
    "start": "5032583",
    "end": "5033166"
  },
  {
    "text": "The subscription ref",
    "start": "5040000",
    "end": "5042541"
  },
  {
    "text": "Let's have a look at the interface  it's likely simpler than the tests.",
    "start": "5056583",
    "end": "5062291"
  },
  {
    "text": "We have a stream of changes that is an STM of a TDqueue.",
    "start": "5069708",
    "end": "5074083"
  },
  {
    "text": "And we have a lot of functions that are very similar to the ones we have in the.",
    "start": "5075625",
    "end": "5081541"
  },
  {
    "text": "In the normal subscription ref. For example we have  changes scoped.",
    "start": "5082833",
    "end": "5088333"
  },
  {
    "text": "Changes stream. The normal changes that gives you back.",
    "start": "5089625",
    "end": "5093875"
  },
  {
    "text": "The STM of a Dqueue. And if I go on and see how these changes",
    "start": "5095166",
    "end": "5102083"
  },
  {
    "text": "stream is implemented.",
    "start": "5102083",
    "end": "5103291"
  },
  {
    "text": "I can quickly show that.",
    "start": "5107375",
    "end": "5108583"
  },
  {
    "text": "It's basically using. The changes and then creating a stream from a Tqueue",
    "start": "5119750",
    "end": "5125666"
  },
  {
    "text": "With with a shutdown. Which is also a function that we should we should expose because I believe at the",
    "start": "5126458",
    "end": "5134916"
  },
  {
    "text": "moment we are not exposing. The way of creating a stream from a from a Tqueue",
    "start": "5134916",
    "end": "5142791"
  },
  {
    "text": "But once the main job was done. Of creating the.",
    "start": "5142791",
    "end": "5147500"
  },
  {
    "text": "The joint. Reference then everything else was like almost a line of code.",
    "start": "5148625",
    "end": "5154250"
  },
  {
    "text": "Changes scope does. The same thing it acquires that. And then on.",
    "start": "5157125",
    "end": "5162500"
  },
  {
    "text": "On cleanup it shuts down the Tqueue Shutting down the Tqueue. removes the subscriber",
    "start": "5163666",
    "end": "5170916"
  },
  {
    "text": "That was. That was it.",
    "start": "5174208",
    "end": "5178583"
  },
  {
    "text": "Was slightly long and contrived. But I hope that.",
    "start": "5180458",
    "end": "5185583"
  },
  {
    "text": "At least Maxwell has a. Has an understanding now.",
    "start": "5186541",
    "end": "5190291"
  },
  {
    "text": "Of transactional. Operations with effect.",
    "start": "5191916",
    "end": "5196041"
  },
  {
    "text": "if you have any question I'm happy to. This was very good. I feel like I've got a much better handle",
    "start": "5197541",
    "end": "5203833"
  },
  {
    "text": "on the how to actually use STM Now if anybody in the chat has questions",
    "start": "5203833",
    "end": "5209625"
  },
  {
    "text": "feel free to post them. Otherwise you can ask in discord.",
    "start": "5209625",
    "end": "5214333"
  },
  {
    "text": "But I feel like there is definitely a lot of use case for STM Within cluster given how much",
    "start": "5215416",
    "end": "5221583"
  },
  {
    "text": "synchronization we actually have to do. So yeah I don't know I think it's going",
    "start": "5221583",
    "end": "5228791"
  },
  {
    "text": "to like require a little bit of thinking but I can definitely already think of some possible use cases for STM",
    "start": "5228791",
    "end": "5235666"
  },
  {
    "text": "Just going to look and see if it actually fits the use case or not.",
    "start": "5236416",
    "end": "5239708"
  },
  {
    "text": "Good which I think is probably going to be one of the topics of the of the next",
    "start": "5242625",
    "end": "5248750"
  },
  {
    "text": "stream on on effect cluster. For sure.",
    "start": "5248750",
    "end": "5252291"
  },
  {
    "text": "So cool. Well thank you very much Mike for taking the time. I think this was very useful for nobody",
    "start": "5254083",
    "end": "5260166"
  },
  {
    "text": "else that it was useful for me. So yeah apologies again this this was",
    "start": "5260166",
    "end": "5265250"
  },
  {
    "text": "meant to be an explanation to Maxwell. So I wasn't really starting from zero.",
    "start": "5265250",
    "end": "5270416"
  },
  {
    "text": "But hopefully it's helpful for somebody else to.",
    "start": "5271541",
    "end": "5275583"
  },
  {
    "text": "Maybe at a reference point when you get to the point of like Maybe I need STM You get here and watch the recording and",
    "start": "5276875",
    "end": "5285166"
  },
  {
    "text": "then it'll make sense at a later point in time. Yeah.",
    "start": "5285166",
    "end": "5290333"
  },
  {
    "text": "Good. Then thank you very much. And thank you everybody for sticking with us for an hour and a half.",
    "start": "5291666",
    "end": "5297791"
  },
  {
    "text": "Cheers everyone. Cheers folks.",
    "start": "5298750",
    "end": "5299708"
  }
]