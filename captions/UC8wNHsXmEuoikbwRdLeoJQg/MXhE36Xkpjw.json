[
  {
    "text": "And we should be live. Great.",
    "start": "4416",
    "end": "8750"
  },
  {
    "text": "Okay. Hey everybody, I know it's been a while,",
    "start": "12541",
    "end": "19750"
  },
  {
    "text": "but I think we might just start",
    "start": "19750",
    "end": "27125"
  },
  {
    "text": "with like a little recap of some of the work that I did on my own, when I streamed like a week or two ago, and then",
    "start": "27250",
    "end": "36000"
  },
  {
    "text": "we'll talk a little bit about the proof of concept, like client protocol thing",
    "start": "36000",
    "end": "42833"
  },
  {
    "text": "that I've been working on. And we can sort of discuss the tradeoffs pros and cons, whether or not it even makes sense.",
    "start": "42833",
    "end": "48375"
  },
  {
    "text": "So let's start with maybe what I was working on the last time I streamed, which was,",
    "start": "49208",
    "end": "55083"
  },
  {
    "text": "refactoring the entity manager. To try to track a lot more of the life",
    "start": "55083",
    "end": "61583"
  },
  {
    "text": "cycle of the entity manager in a scope versus doing it all manually.",
    "start": "61583",
    "end": "66208"
  },
  {
    "text": "so this refactored entity manager, still pulls in a",
    "start": "67791",
    "end": "75541"
  },
  {
    "text": "lot of like information. But instead of using a synchronized",
    "start": "75541",
    "end": "81041"
  },
  {
    "text": "ref for managing the entities or the collection of",
    "start": "81041",
    "end": "88791"
  },
  {
    "text": "entities, I'm instead just using a plain ref and I've created a semaphore,",
    "start": "88791",
    "end": "94166"
  },
  {
    "text": "within the entity manager that I can then use to more granularly control when",
    "start": "94166",
    "end": "100958"
  },
  {
    "text": "things get locked and when things don't. Cause I was finding that I was",
    "start": "100958",
    "end": "106750"
  },
  {
    "text": "finding that like using the synchronized ref was making it more",
    "start": "106750",
    "end": "111791"
  },
  {
    "text": "confusing in certain scenarios. Like because of how, like, because we",
    "start": "111791",
    "end": "118208"
  },
  {
    "text": "want to be like very granular about when we're locking and when we're not, it just actually ended up being more explicit to",
    "start": "118208",
    "end": "124166"
  },
  {
    "text": "use the semaphore directly. so we can talk about that.",
    "start": "124166",
    "end": "130250"
  },
  {
    "text": "And then, so that, that was one of the big changes I made in this version.",
    "start": "131708",
    "end": "137833"
  },
  {
    "text": "And then another one of the big changes that I made was, like I said, tracking a lot of",
    "start": "138666",
    "end": "144540"
  },
  {
    "text": "information inside a scope. So this manager scope here is the scope",
    "start": "144541",
    "end": "153125"
  },
  {
    "text": "that's associated with the entity manager. And then the individual entities",
    "start": "153125",
    "end": "158790"
  },
  {
    "text": "themselves also get a scope that's forked off the manager scope.",
    "start": "158791",
    "end": "164375"
  },
  {
    "text": "So that this way, if you like shut down or terminate an entity manager, all of the associated entities will also be cleaned",
    "start": "164625",
    "end": "171208"
  },
  {
    "text": "up as well, since their scope is forked off the manager scope. so it's maybe look a",
    "start": "171208",
    "end": "179375"
  },
  {
    "text": "little bit at what that means. And I can show Mike kind of like some of the stuff.",
    "start": "179375",
    "end": "184000"
  },
  {
    "text": "Also, excuse me if I have to mute myself occasionally, I have a cough. We can probably start maybe",
    "start": "187041",
    "end": "197708"
  },
  {
    "text": "with this like get or create state method, which is the method that receives an entity address and sort of does the",
    "start": "197708",
    "end": "203500"
  },
  {
    "text": "work of spinning up the actual entity or the resources that an entity needs and",
    "start": "203500",
    "end": "208791"
  },
  {
    "text": "then starts running the behavior associated with an entity. So the whole thing is wrapped in this, in",
    "start": "208791",
    "end": "216208"
  },
  {
    "text": "a semaphore, just like it was before with synchronized draft, but just ended",
    "start": "216208",
    "end": "222208"
  },
  {
    "text": "up making more sense to wrap it. I mean, again, we're using a semaphore directly here instead of a synchronized",
    "start": "222208",
    "end": "227083"
  },
  {
    "text": "ref, so I refactored a bunch of",
    "start": "227333",
    "end": "232540"
  },
  {
    "text": "this again to make use of the, both the manager scope and the entity scope.",
    "start": "232541",
    "end": "236915"
  },
  {
    "text": "So there's a couple of things that have to happen when we're actually bootstrapping an entity.",
    "start": "237583",
    "end": "242333"
  },
  {
    "text": "The first thing that we do is we check if the sharding service for that pod is",
    "start": "242916",
    "end": "248166"
  },
  {
    "text": "shutting down and if sharding is shutting",
    "start": "248166",
    "end": "253291"
  },
  {
    "text": "down, then we like immediately fail because if sharding is shutting down, we can't spin up a new entity on that pod",
    "start": "253291",
    "end": "258875"
  },
  {
    "text": "because the sharding service is shutting down. But if sharding is still active,",
    "start": "258958",
    "end": "266332"
  },
  {
    "text": "then we can go ahead and fork a new scope off of the entity manager scope for",
    "start": "266583",
    "end": "275041"
  },
  {
    "text": "the entities resources. And we bind that to this scope",
    "start": "275041",
    "end": "280125"
  },
  {
    "text": "variable and then we can look at this expiration fiber thing in a second.",
    "start": "280125",
    "end": "285000"
  },
  {
    "text": "but we create a,",
    "start": "286125",
    "end": "291416"
  },
  {
    "text": "queue of mailbox storage entries. So these kind of represent",
    "start": "291750",
    "end": "297083"
  },
  {
    "text": "the mailbox of the entity. And we could use the new mailbox",
    "start": "297083",
    "end": "303958"
  },
  {
    "text": "module to do this, but to keep things a little bit simple, I just started with a queue.",
    "start": "303958",
    "end": "308833"
  },
  {
    "text": "And basically like the, the idea here is we create a queue.",
    "start": "310166",
    "end": "316291"
  },
  {
    "text": "The mailbox storage entries are essentially what we get back from mailbox storage, when we actually",
    "start": "316500",
    "end": "323416"
  },
  {
    "text": "create a message and like when we add a message to mailbox storage, the",
    "start": "323416",
    "end": "329333"
  },
  {
    "text": "entry is what we get back. and so we spin up a queue, a mailbox",
    "start": "329333",
    "end": "336416"
  },
  {
    "text": "for the entity itself. And then we add a finalizer to the new scope that we created this entity scope.",
    "start": "336416",
    "end": "342000"
  },
  {
    "text": "to basically shut down the mailbox. So if the entities scope gets",
    "start": "342625",
    "end": "351207"
  },
  {
    "text": "closed, the mailbox will get shut down. Any like fibers that are all the takers",
    "start": "351208",
    "end": "356875"
  },
  {
    "text": "for this mailbox will also get interrupted. And then we start the behavior here.",
    "start": "356875",
    "end": "366333"
  },
  {
    "text": "And this is a little like, I guess not tricky, but like a little weird.",
    "start": "366333",
    "end": "372208"
  },
  {
    "text": "So I'll kind of explain what's going on. So if you start the",
    "start": "372208",
    "end": "377541"
  },
  {
    "text": "behavior itself, can ignore the reply or thing for a second, because we'll talk about that in a minute.",
    "start": "377541",
    "end": "382958"
  },
  {
    "text": "and then if the behavior ever exits, so it's a never ending effect, but if",
    "start": "383583",
    "end": "389125"
  },
  {
    "text": "it's interrupted or anything like that, then we want to make sure that we close the scope that is associated with that",
    "start": "389125",
    "end": "396957"
  },
  {
    "text": "behavior, because that means that the caller is shutting down that entity. So in the effect dot ensuring block",
    "start": "396958",
    "end": "403707"
  },
  {
    "text": "here, we close this entity scope that we've spun up. And then we also fork the behavior",
    "start": "403708",
    "end": "409083"
  },
  {
    "text": "inside that same scope. So we basically, apologies. Just a quick question.",
    "start": "409083",
    "end": "415541"
  },
  {
    "text": "In this way, we're also providing the scope to the behavior. Or are we just forking inside the scope?",
    "start": "418208",
    "end": "427000"
  },
  {
    "text": "At the moment, we're not technically providing the scope to the behavior, but we could.",
    "start": "428375",
    "end": "432750"
  },
  {
    "text": "We could also give the behavior the, like the ability to attach resources to that scope so that if the behavior gets",
    "start": "433625",
    "end": "439291"
  },
  {
    "text": "terminated, like it has that scope available. Like that's totally possible.",
    "start": "439291",
    "end": "444125"
  },
  {
    "text": "I just haven't like implemented that here, but we could do that. Yeah. Yeah. I mean, probably it's like, if we have a",
    "start": "444583",
    "end": "451666"
  },
  {
    "text": "school, I don't see why not, not to attach it. But yeah, later point.",
    "start": "451666",
    "end": "457666"
  },
  {
    "text": "we also have metric bookkeeping to perform.",
    "start": "459041",
    "end": "464000"
  },
  {
    "text": "So again, we can use the scope to do this. I really think we should add decrement APIs to the metric.",
    "start": "464333",
    "end": "470083"
  },
  {
    "text": "thinking cause this just feels weird, but we start out by incrementing the",
    "start": "471083",
    "end": "476541"
  },
  {
    "text": "gauge that's associated with the number of entities that we have of a given type. So, again, just going up to the top",
    "start": "476583",
    "end": "482291"
  },
  {
    "text": "of the entity manager here, this gauge. Is a gauge that tracks the number of",
    "start": "482291",
    "end": "488666"
  },
  {
    "text": "entities of a given type. So when you spin up a cluster, one of the metrics you'll have access to that's",
    "start": "488666",
    "end": "493875"
  },
  {
    "text": "associated with the cluster is the current number of entities of each type.",
    "start": "493875",
    "end": "499041"
  },
  {
    "text": "So like, if you think about it in like a Prometheus format, you might get like a list of entities and their, their type,",
    "start": "499250",
    "end": "504457"
  },
  {
    "text": "or a list of metrics with the entity type and the count specified for that, for that metric.",
    "start": "504458",
    "end": "510416"
  },
  {
    "text": "that's nice. Yeah. It's like a nice, you know, and we can add as many metrics",
    "start": "511958",
    "end": "517083"
  },
  {
    "text": "as we want to this, but this just felt like a, I think shard cake has this too, where they are adding it.",
    "start": "517083",
    "end": "523250"
  },
  {
    "text": "I'm not sure. And then the very last thing we want to do here is make sure that the first",
    "start": "523250",
    "end": "530416"
  },
  {
    "text": "finalizer that we run within the, like when we're within the entity's scope is",
    "start": "530500",
    "end": "536041"
  },
  {
    "text": "the actual removal of the entity from the collection of entities that are being managed by this entity manager.",
    "start": "536041",
    "end": "541958"
  },
  {
    "text": "So like when we actually do the shutdown, when we close the scope, because of the order in which we're adding",
    "start": "542416",
    "end": "548000"
  },
  {
    "text": "finalizers here, if we do this tap last, we can make sure that the first thing that",
    "start": "548000",
    "end": "554291"
  },
  {
    "text": "happens when the scope is shut down is that we remove the entity from the",
    "start": "554291",
    "end": "559666"
  },
  {
    "text": "entities, like map that this entity manager is tracking. this way, like we immediately remove",
    "start": "559666",
    "end": "566500"
  },
  {
    "text": "it from the map and then we can do all the other shutdown behavior after the fact, but this like kind of very quick, like",
    "start": "566500",
    "end": "573916"
  },
  {
    "text": "removal thing is a good thing for us to have happen first.",
    "start": "573916",
    "end": "577875"
  },
  {
    "text": "again, here to remind the listeners,",
    "start": "579125",
    "end": "583791"
  },
  {
    "text": "the order of execution of finalizers is the",
    "start": "584291",
    "end": "589750"
  },
  {
    "text": "reverse of the order in, in acquisition. So if you acquired the first one,",
    "start": "589750",
    "end": "595208"
  },
  {
    "text": "acquired the second one, acquired the third one, and in shutdown, the third one will clean up",
    "start": "595208",
    "end": "600791"
  },
  {
    "text": "before the second later and the first at the, at the end. This is because there, there can be",
    "start": "600791",
    "end": "608500"
  },
  {
    "text": "dependencies between, resources acquired. And for example, if you acquire a",
    "start": "608500",
    "end": "614000"
  },
  {
    "text": "database connection, then you acquire a transaction. You want the transaction to close before",
    "start": "614000",
    "end": "619208"
  },
  {
    "text": "you release the, you release the collection. And, credit, I gotta give credit",
    "start": "619208",
    "end": "625500"
  },
  {
    "text": "where credit is dued, it was Tim's idea to use a scope to do all of this. I just took it and implemented it,",
    "start": "625500",
    "end": "630833"
  },
  {
    "text": "but, he was the one who was like, I don't use, just use a scope. And I was like, that's a great idea.",
    "start": "630833",
    "end": "635541"
  },
  {
    "text": "Tim, you know, Tim is known for having good ideas. He has good ideas. so, and then the very last step that",
    "start": "637250",
    "end": "644625"
  },
  {
    "text": "we perform here, this last tap is the state that we create.",
    "start": "644625",
    "end": "649958"
  },
  {
    "text": "so where are we, where do we get the state? This, the scope.",
    "start": "650333",
    "end": "656750"
  },
  {
    "text": "And so the scope associated with an entity state, like the entity state, like the entity state object is no more",
    "start": "657541",
    "end": "663625"
  },
  {
    "text": "than the queue at the moment is no more than the mailbox for that entity and the scope associated with that entity.",
    "start": "663625",
    "end": "670083"
  },
  {
    "text": "So the, for each entity, like in this hash map, like the entity is hash map.",
    "start": "670458",
    "end": "677000"
  },
  {
    "text": "we are, all we really have is a mapping from an entity",
    "start": "677125",
    "end": "682250"
  },
  {
    "text": "address to an entity state. And if we look at like the implementation of entity or the definition of entity state,",
    "start": "682250",
    "end": "688333"
  },
  {
    "text": "like I said, it's just the entity's mailbox and its scope. So at the moment where this is all we're",
    "start": "688333",
    "end": "694000"
  },
  {
    "text": "tracking for every entity, but we can add additional fields in the future as they make sense.",
    "start": "694000",
    "end": "698583"
  },
  {
    "text": "but I wanted to start simple with this new iteration of entity manager. so again, all of this happens within,",
    "start": "699208",
    "end": "708375"
  },
  {
    "text": "a semaphore so we can make sure that the, all the updates we're making to this ref is atomic.",
    "start": "708375",
    "end": "717208"
  },
  {
    "text": "And yeah, so that's the new kind of",
    "start": "718500",
    "end": "723666"
  },
  {
    "text": "getter create state. I think it makes more sense to do it this way as well, because again, if we take,",
    "start": "723666",
    "end": "730333"
  },
  {
    "text": "if we think about like what happens within sharding when we de-register,",
    "start": "730333",
    "end": "735666"
  },
  {
    "text": "or if an entity manager ever needs to be shut down like from the sharding side",
    "start": "735666",
    "end": "741041"
  },
  {
    "text": "of things, all we need to do now is like close the scope associated with an entity",
    "start": "741041",
    "end": "746166"
  },
  {
    "text": "manager, and then all of the associated entities also have everything that they need shut down shut down.",
    "start": "746166",
    "end": "752041"
  },
  {
    "text": "So it's kind of a nice like propagation here where from a sharding perspective, we have this like, set of entity",
    "start": "752541",
    "end": "760333"
  },
  {
    "text": "managers which all are tracking their individual entity types and all we",
    "start": "760333",
    "end": "765458"
  },
  {
    "text": "have to do to shut down all the entities associated with the manager is actually just close the scope of the manager.",
    "start": "765458",
    "end": "770500"
  },
  {
    "text": "And then all of the entities get shut down. How would it work? Sorry, Mattia's asking a question.",
    "start": "770750",
    "end": "775416"
  },
  {
    "text": "How would it work with entities shutting down, but receiving messages? Wouldn't the state entry still know the",
    "start": "776125",
    "end": "782791"
  },
  {
    "text": "first thing that happens, is ",
    "start": "782791",
    "end": "786958"
  },
  {
    "text": "so like I mentioned, the very first thing that happens when the scope associated with an entity is shut down or",
    "start": "789541",
    "end": "796541"
  },
  {
    "text": "is closed is that the entity is removed from the entities map. So it won't be able to receive messages.",
    "start": "796541",
    "end": "803666"
  },
  {
    "text": "If that makes sense.",
    "start": "804625",
    "end": "805541"
  },
  {
    "text": "I don't know if that answers your question, Mattia, feel free to answer in chat if it does not.",
    "start": "810666",
    "end": "814916"
  },
  {
    "text": "By the way, if you want to hop into the stream, just message me on discord and send you the link.",
    "start": "816333",
    "end": "820750"
  },
  {
    "text": "cool. So when we actually use get a create state, this is when we're actually",
    "start": "824041",
    "end": "830083"
  },
  {
    "text": "like sending a message to an entity. So we get the address and the, entry,",
    "start": "830083",
    "end": "835708"
  },
  {
    "text": "that we want to send. So again, the mailbox storage entry is just the information we're getting back from mailbox storage.",
    "start": "835708",
    "end": "841458"
  },
  {
    "text": "When once sharding has like received that message, tried to put it into storage",
    "start": "841458",
    "end": "847791"
  },
  {
    "text": "and gotten a response back. if it's a like, yes, we inserted the message response, then the entry",
    "start": "847791",
    "end": "853416"
  },
  {
    "text": "is what we get back and what we forward to the entity. So, this information is what we get.",
    "start": "853416",
    "end": "858583"
  },
  {
    "text": "we do a get or create state for that address. and then we offer the entry to the,",
    "start": "859708",
    "end": "868791"
  },
  {
    "text": "entities mailbox. and then we keep trying to do this,",
    "start": "868791",
    "end": "874041"
  },
  {
    "text": "every 100 milliseconds if it fails, because this could be a situation where maybe the entity like hasn't",
    "start": "874041",
    "end": "881375"
  },
  {
    "text": "spun up or died for some reason.  And it's going to be brought back up or something like that.",
    "start": "881375",
    "end": "885375"
  },
  {
    "text": "I mean, so, okay. So Mattia's asking another question, even a long interruption",
    "start": "886708",
    "end": "892166"
  },
  {
    "text": "phase would be handled. Something like behavior doing weird. Well, again, Mattia, the very first finalizer that's run, the reason why I'm",
    "start": "892166",
    "end": "898250"
  },
  {
    "text": "adding finalizers in this order. So even if like the behaviors,",
    "start": "898250",
    "end": "903250"
  },
  {
    "text": "interruption takes a long time, the very first finalizer that's run is the removal",
    "start": "903458",
    "end": "908750"
  },
  {
    "text": "of the entity from The map of entities. So like that entity won't be able to",
    "start": "908750",
    "end": "914125"
  },
  {
    "text": "receive messages anymore. But it'll be able to do work.",
    "start": "914125",
    "end": "920791"
  },
  {
    "text": "Yeah, it'll still be doing work. It's shut down like, procedures, but",
    "start": "922125",
    "end": "929666"
  },
  {
    "text": "it won't be able to like receive messages anymore.",
    "start": "929666",
    "end": "933166"
  },
  {
    "text": "It'll still like have the ability. Like if it's got a long interruption phase, like you mentioned, Mattia, like yeah, in fact, an uninterruptible",
    "start": "934916",
    "end": "941958"
  },
  {
    "text": "effect, that's sleep, blah, blah, blah. that can still be happening, but the",
    "start": "941958",
    "end": "947000"
  },
  {
    "text": "entity itself won't be like available to receive messages.",
    "start": "947000",
    "end": "951791"
  },
  {
    "text": "The small concern I have, and I'm not sure if it's handled already or not.",
    "start": "953416",
    "end": "959625"
  },
  {
    "text": "Is basically, let's say these entities shutting down",
    "start": "960333",
    "end": "965833"
  },
  {
    "text": "for an interruption. That can happen, for example, if",
    "start": "965833",
    "end": "971125"
  },
  {
    "text": "a node is leaving the cluster. Okay. When do we actually communicate that the",
    "start": "971125",
    "end": "978916"
  },
  {
    "text": "entity is down or, or maybe rather that the, the shard is down because my,",
    "start": "978916",
    "end": "986708"
  },
  {
    "text": "my concern is if we allocate the entity in another or rather if we allocate the",
    "start": "986958",
    "end": "992791"
  },
  {
    "text": "shard in a different pod and that entity is still running, we could have,",
    "start": "992791",
    "end": "998166"
  },
  {
    "text": "an entity which is running twice, which, which is not ideal, but I guess",
    "start": "998166",
    "end": "1004166"
  },
  {
    "text": "that depends on when the shard is flagged as de-allocated that probably",
    "start": "1004166",
    "end": "1010208"
  },
  {
    "text": "waits for the whole shutdown of everything before we communicate to the shard",
    "start": "1010208",
    "end": "1016625"
  },
  {
    "text": "manager that the, that the shard is de-allocated. I mean, it's something we'll have to",
    "start": "1016625",
    "end": "1022458"
  },
  {
    "text": "think about the other thing that, that could potentially be a problem here is that if we're still receiving messages",
    "start": "1022458",
    "end": "1028916"
  },
  {
    "text": "like via send message to entity, in the current implementation,",
    "start": "1029041",
    "end": "1035250"
  },
  {
    "text": "get or create state is just going to spin up another entity for this message.",
    "start": "1035500",
    "end": "1040916"
  },
  {
    "text": "So one of the, like, this is the problem that I wanted to discuss and like potentially address here where like, think about it.",
    "start": "1041333",
    "end": "1047916"
  },
  {
    "text": "If we are receiving messages, the entity is doing work, then",
    "start": "1047916",
    "end": "1053875"
  },
  {
    "text": "all of a sudden we shut down that entity. The entities immediately removed from the entity map, right?",
    "start": "1053916",
    "end": "1058875"
  },
  {
    "text": "But it could still be doing work. As you mentioned, if we get another message coming in, it's going to hit",
    "start": "1059083",
    "end": "1065416"
  },
  {
    "text": "this get or create state and the,",
    "start": "1065416",
    "end": "1071875"
  },
  {
    "text": "the, what you want to call it. The entity manager is going to basically",
    "start": "1073125",
    "end": "1079041"
  },
  {
    "text": "just spin up another state for it because all the only check we're doing here is like, is the address in the hash map.",
    "start": "1079041",
    "end": "1086291"
  },
  {
    "text": "If not, then we have to like spin up the state. So one of the ideas that I had to manage this is instead of like the first thing",
    "start": "1086708",
    "end": "1094375"
  },
  {
    "text": "that we do is to remove the entity from",
    "start": "1094375",
    "end": "1099500"
  },
  {
    "text": "the address, we could change the way that entity state is defined,",
    "start": "1099500",
    "end": "1104958"
  },
  {
    "text": "state where instead of entity state just being like a plain interface, we can have like a tied union where,",
    "start": "1105291",
    "end": "1113041"
  },
  {
    "text": "like if the entity is active, this is the information you get. But the second we terminate an entity,",
    "start": "1113250",
    "end": "1118458"
  },
  {
    "text": "the state just becomes like a terminated tag. So the entity would still be in the map,",
    "start": "1118458",
    "end": "1123958"
  },
  {
    "text": "but all of the methods that handle like checking the map for the entity would see that the entities terminated and",
    "start": "1123958",
    "end": "1130125"
  },
  {
    "text": "basically like have to do, I don't know if we could figure out what would happen at that point, and that's actually sort",
    "start": "1130166",
    "end": "1135541"
  },
  {
    "text": "of kind of what shardcake does here. and also is sort of kind of what we",
    "start": "1135541",
    "end": "1141500"
  },
  {
    "text": "did in the previous implementation. it's like slightly different, but the idea being is that like, we could still",
    "start": "1141500",
    "end": "1148750"
  },
  {
    "text": "have a similar like set up here, but instead of like just removing the",
    "start": "1149541",
    "end": "1154583"
  },
  {
    "text": "entity from the hash map, we could set it to like a terminating state. And then once like the, everything is",
    "start": "1154625",
    "end": "1162166"
  },
  {
    "text": "done here, like the first finalizer that we put in the finalizer's array could be removing the entity from the map.",
    "start": "1162166",
    "end": "1168166"
  },
  {
    "text": "But the last one that we enter in the array is just setting it to like terminated. Right.",
    "start": "1168750",
    "end": "1173833"
  },
  {
    "text": "So like we set the entity to term to terminating or whatever it",
    "start": "1173958",
    "end": "1179166"
  },
  {
    "text": "runs through all its shutdown behavior. Right. So we, if the behavior takes a really long time to shut down, then the",
    "start": "1179166",
    "end": "1185041"
  },
  {
    "text": "entity is still in the map, but it's terminating. And then the very first thing that we finalize or that we add to the scope is",
    "start": "1185041",
    "end": "1191375"
  },
  {
    "text": "to, is currently what we have as the last finalizer, basically. So that this way, like once the behavior",
    "start": "1191583",
    "end": "1197416"
  },
  {
    "text": "shuts down cleanly and finishes, and maybe it takes 10 minutes, maybe it takes 10 years, whatever.",
    "start": "1197416",
    "end": "1202666"
  },
  {
    "text": "Once the behavior is finally done. and that finalizer is finished.",
    "start": "1203250",
    "end": "1208083"
  },
  {
    "text": "then we can run the first one. And the key here is that we're running finalizer sequentially, not in parallel.",
    "start": "1208500",
    "end": "1215541"
  },
  {
    "text": "So this works, right? If we were running finalizers in parallel, it wouldn't work, but like, that's",
    "start": "1216708",
    "end": "1221875"
  },
  {
    "text": "another idea to manage the case where messages are coming in, because right now we're not handling the case where",
    "start": "1221875",
    "end": "1228041"
  },
  {
    "text": "like messages come in and the entity has been like essentially, you know,",
    "start": "1228041",
    "end": "1233708"
  },
  {
    "text": "started its shutdown procedure because now the entity manager doesn't even know about it. We could actually also use, STM and",
    "start": "1234166",
    "end": "1243500"
  },
  {
    "text": "like in the get or create state. It's like, you're going to wait either",
    "start": "1243500",
    "end": "1251583"
  },
  {
    "text": "for the entity not to be in the map. So you can create a new being sure that",
    "start": "1251583",
    "end": "1258833"
  },
  {
    "text": "there is no, no other entity or you wait for, an entity to be there, but not",
    "start": "1258833",
    "end": "1269166"
  },
  {
    "text": "in a terminating state. So it, you know, with, with STM, you can do any, any check you want and then just",
    "start": "1269166",
    "end": "1276791"
  },
  {
    "text": "retry and it'll, it'll wait for the, for the precise condition to be met",
    "start": "1277166",
    "end": "1284000"
  },
  {
    "text": "to avoid this kind of mixing up.",
    "start": "1284000",
    "end": "1286625"
  },
  {
    "text": "Yeah. I mean, I think any of those things are reasonable. I think like my, I have",
    "start": "1289125",
    "end": "1298833"
  },
  {
    "text": "yet to use STM in a project. So this would be kind of like a fun test",
    "start": "1298833",
    "end": "1305500"
  },
  {
    "text": "might be the good time. but, I also think the original",
    "start": "1305500",
    "end": "1313291"
  },
  {
    "text": "implementation is, is reasonable as well. the other thing is the entity scope.",
    "start": "1313291",
    "end": "1322041"
  },
  {
    "text": "STM seems nice. yes, it is nice.",
    "start": "1323458",
    "end": "1329166"
  },
  {
    "text": "STM is nice. I mean, we could try to sketch something out if you're, if you're interested, Mike.",
    "start": "1329708",
    "end": "1335625"
  },
  {
    "text": "I would need a little bit of help since I haven't really used STM very much before, but if you want to",
    "start": "1336333",
    "end": "1343083"
  },
  {
    "text": "try that, we could try that. otherwise we could finish talking about like some of the other ideas.",
    "start": "1343083",
    "end": "1348666"
  },
  {
    "text": "We can do it either, either offline or at a different time and, and eventually",
    "start": "1348666",
    "end": "1354041"
  },
  {
    "text": "like recopied in the next, in the next stream, I don't think it's going to be",
    "start": "1354375",
    "end": "1360208"
  },
  {
    "text": "useful to like spend, spend the stream starting STM. That could be another stream though.",
    "start": "1360208",
    "end": "1366166"
  },
  {
    "text": "That could be another stream. It could. so, and the send method that I",
    "start": "1366166",
    "end": "1374458"
  },
  {
    "text": "originally had here, it hasn't changed. it's pretty much still the same thing. let me move this.",
    "start": "1374458",
    "end": "1380666"
  },
  {
    "text": "here, basically, we get an encoded envelope that comes in through the send method.",
    "start": "1382750",
    "end": "1389166"
  },
  {
    "text": "we decode the envelope. We attempt to try to save the message,",
    "start": "1389666",
    "end": "1394708"
  },
  {
    "text": "into mailbox storage. and then if we successfully save the",
    "start": "1394708",
    "end": "1401791"
  },
  {
    "text": "message, we get a mailbox storage entry back. There's still a lot of problems with like the storage interface here.",
    "start": "1401791",
    "end": "1408083"
  },
  {
    "text": "they agree, Matia, that it could be a good use case to land the usage. there's still a lot of problems with",
    "start": "1409125",
    "end": "1416750"
  },
  {
    "text": "like the storage interface that I need to address, but the idea here is that we",
    "start": "1416750",
    "end": "1422541"
  },
  {
    "text": "get the envelope, we decode it. The first thing we try to do is save the envelope to the storage.",
    "start": "1422541",
    "end": "1427708"
  },
  {
    "text": "and then if we successfully get an entry back, we send the message to",
    "start": "1428666",
    "end": "1435041"
  },
  {
    "text": "an entity and it goes through all the pieces that I showed before. otherwise if we get a no such element",
    "start": "1435041",
    "end": "1442583"
  },
  {
    "text": "exception, that's the case where the message has already been saved. Like there's already a message in mailbox",
    "start": "1442583",
    "end": "1449375"
  },
  {
    "text": "storage, so we don't do anything. It's an effect to avoid. if we get a parse error from decoding",
    "start": "1449375",
    "end": "1454958"
  },
  {
    "text": "the envelope, we create a new malformed message error, which is a custom like error that I created, which",
    "start": "1454958",
    "end": "1462041"
  },
  {
    "text": "we can iterate on, in the future. But at the moment, it basically just forwards the cause, which should",
    "start": "1462041",
    "end": "1468458"
  },
  {
    "text": "render out the parse error with the tree formatter when you get a stack trace, I think.",
    "start": "1468500",
    "end": "1473458"
  },
  {
    "text": "and similarly, we need to figure out where I need to figure out, what to",
    "start": "1474416",
    "end": "1479750"
  },
  {
    "text": "do when we get a message persistence error, whether or not that should be forwarded to the, like basically lifted",
    "start": "1479750",
    "end": "1486041"
  },
  {
    "text": "to the send or whatever, and then in the previous implementation of send,",
    "start": "1486041",
    "end": "1494041"
  },
  {
    "text": "I was using, I was providing a context. but now I've just changed this to",
    "start": "1494041",
    "end": "1500791"
  },
  {
    "text": "provide the full runtime, because this way we forward fiber refs and runtime",
    "start": "1500791",
    "end": "1505916"
  },
  {
    "text": "flags and all the nice stuff that's inside the runtime, which is kind of the goal and the whole reason for those who",
    "start": "1505916",
    "end": "1512833"
  },
  {
    "text": "haven't, like maybe haven't watched before, don't know. The reason we're doing this is to",
    "start": "1512833",
    "end": "1518666"
  },
  {
    "text": "essentially lift the requirements for decoding, the envelope to the",
    "start": "1518666",
    "end": "1525875"
  },
  {
    "text": "construction of the entity manager. So that when the entity manager is actually running, like it has all the",
    "start": "1525875",
    "end": "1531791"
  },
  {
    "text": "dependencies for that entity and it can just inject them like during this end. because the, because schemas have",
    "start": "1531791",
    "end": "1542500"
  },
  {
    "text": "the ability to use effect context, right? So, the, the idea being the idea",
    "start": "1542500",
    "end": "1554166"
  },
  {
    "text": "here is that we want to be able to lift the context for the message up to the",
    "start": "1554166",
    "end": "1560875"
  },
  {
    "text": "construction of the entity manager. this way is basically otherwise every single sending instruction",
    "start": "1560875",
    "end": "1567083"
  },
  {
    "text": "would require the context. Yep. And also we don't necessarily, have",
    "start": "1567541",
    "end": "1574583"
  },
  {
    "text": "like once the entity manager is constructed, we lose the type information for the message because it doesn't make sense",
    "start": "1574583",
    "end": "1581291"
  },
  {
    "text": "to track at the type level of send. Like we don't, we actually don't remember why, but I'm pretty",
    "start": "1581291",
    "end": "1587375"
  },
  {
    "text": "sure this was like very difficult to do. So in this way we can actually make the",
    "start": "1587416",
    "end": "1593833"
  },
  {
    "text": "entity manager agnostic to the type of message it's going to get, but the construction of the entity manager,",
    "start": "1593833",
    "end": "1598916"
  },
  {
    "text": "knows about the message type. So this is why like we're able to essentially, we lift the context",
    "start": "1599583",
    "end": "1607125"
  },
  {
    "text": "and everything else about the message to the construction. And then the actual entity manager at that point doesn't really know",
    "start": "1607125",
    "end": "1612333"
  },
  {
    "text": "anything about the type, or at least on the type level, it doesn't know anything.",
    "start": "1612333",
    "end": "1615791"
  },
  {
    "text": "okay.",
    "start": "1617458",
    "end": "1620541"
  },
  {
    "text": "So, let me just remind myself what",
    "start": "1622833",
    "end": "1634041"
  },
  {
    "text": "else I wanted to talk about.",
    "start": "1634041",
    "end": "1635083"
  },
  {
    "text": "did I do anything with last act of times last? Yeah. Okay.",
    "start": "1639333",
    "end": "1645083"
  },
  {
    "text": "So the next thing I wanted to talk about was, the concept that I was thinking",
    "start": "1645333",
    "end": "1650708"
  },
  {
    "text": "about for, cause we had been saying in previous streams that we have thus far",
    "start": "1650791",
    "end": "1658750"
  },
  {
    "text": "been ignoring like kind of the client interface. So like, how do we actually send messages",
    "start": "1658750",
    "end": "1664958"
  },
  {
    "text": "or how do we actually, respond to messages from a behavior? Right?",
    "start": "1664958",
    "end": "1670041"
  },
  {
    "text": "So your behavior gets a message or gets the mailbox for the entity and can pull",
    "start": "1670125",
    "end": "1675333"
  },
  {
    "text": "messages out of the mailbox, but at the moment we didn't have any way to actually",
    "start": "1675375",
    "end": "1680666"
  },
  {
    "text": "like respond to that message. so I create, I sort of thought about",
    "start": "1680666",
    "end": "1686833"
  },
  {
    "text": "like this concept of a replier, which we can take a look at.",
    "start": "1686833",
    "end": "1691458"
  },
  {
    "text": "So, an entity replier is basically an object with a bunch of like helper",
    "start": "1693666",
    "end": "1700125"
  },
  {
    "text": "methods on it, like succeed fail, fail cause complete. You can sort of kind of see the similarity here with, request almost,",
    "start": "1700125",
    "end": "1708458"
  },
  {
    "text": "where like, if for anybody who's",
    "start": "1708500",
    "end": "1716333"
  },
  {
    "text": "used the lower level, request resolver, methods and effect, you",
    "start": "1716333",
    "end": "1725291"
  },
  {
    "text": "probably make use of some of these methods, right? If you're using like a request resolver,",
    "start": "1725291",
    "end": "1731416"
  },
  {
    "text": "you need to basically say how you're responding to a request. So the idea here was to have something similar.",
    "start": "1731625",
    "end": "1737333"
  },
  {
    "text": "and we can construct a replier on demand for a behavior and use that to",
    "start": "1737333",
    "end": "1744916"
  },
  {
    "text": "proxy certain pieces of information back to the cluster. Based on what happened with that message.",
    "start": "1744916",
    "end": "1750000"
  },
  {
    "text": "So, if we go back to",
    "start": "1750416",
    "end": "1754625"
  },
  {
    "text": "So, the idea here and it's, I haven't been like, I haven't fully",
    "start": "1758375",
    "end": "1763500"
  },
  {
    "text": "fleshed this out yet, but the idea here is similar to a request.",
    "start": "1763500",
    "end": "1769375"
  },
  {
    "text": "The base method that a replier has is this like complete method, right? And the complete method receives the",
    "start": "1769375",
    "end": "1776083"
  },
  {
    "text": "message, as well as the like full result of that message, right?",
    "start": "1776083",
    "end": "1780958"
  },
  {
    "text": "So, both the success and failure case.",
    "start": "1781208",
    "end": "1786000"
  },
  {
    "text": "so from, from the behavior, we would call the replier interface to,",
    "start": "1787208",
    "end": "1795833"
  },
  {
    "text": "to send the result. Yeah. And actually, let me show you the interface of a",
    "start": "1796000",
    "end": "1801333"
  },
  {
    "text": "of a, kind of like, this is again, when I was like sketching out, I thought it might be useful.",
    "start": "1801375",
    "end": "1808250"
  },
  {
    "text": "Rotate windows. so this is again, not fully fleshed",
    "start": "1809750",
    "end": "1815583"
  },
  {
    "text": "out yet, but the idea for like a behavior, right, is you get a dequeue",
    "start": "1815583",
    "end": "1822458"
  },
  {
    "text": "of messages, which we could also change to like a read only mailbox in the future if we wanted to do that. Right. It could, if it makes sense.",
    "start": "1822500",
    "end": "1829333"
  },
  {
    "text": "Like we have a mailbox module in effect now. and then you get, so you get",
    "start": "1829458",
    "end": "1835208"
  },
  {
    "text": "basically access to two things. You get the mailbox for the entity, but you also get the",
    "start": "1835208",
    "end": "1840708"
  },
  {
    "text": "replier in the signature of behavior. So then like within your behavior, which",
    "start": "1840708",
    "end": "1846000"
  },
  {
    "text": "becomes just a function, right? You have the mailbox flyer and you might",
    "start": "1846000",
    "end": "1851500"
  },
  {
    "text": "do some like effectful stuff. And then you would basically, like that chance.",
    "start": "1851500",
    "end": "1858041"
  },
  {
    "text": "You know, yield, replier dot complete message.",
    "start": "1859458",
    "end": "1867000"
  },
  {
    "text": "You know, maybe we have like, right.",
    "start": "1867500",
    "end": "1873916"
  },
  {
    "text": "Mailbox dot take, and then we do some stuff to, process the",
    "start": "1874375",
    "end": "1881416"
  },
  {
    "text": "message and get a result. And then the replier has different",
    "start": "1881458",
    "end": "1886958"
  },
  {
    "text": "methods on it, but the idea is like, if you have an exit, you could do just the exit directly. If you have a success, you could just do",
    "start": "1886958",
    "end": "1892708"
  },
  {
    "text": "a replier dot succeed message and, you know, value, whatever.",
    "start": "1892708",
    "end": "1897375"
  },
  {
    "text": "So, but that's kind of like what I was thinking is like this replier could be the proxy back to the",
    "start": "1898458",
    "end": "1904250"
  },
  {
    "text": "cluster, to allow us to.",
    "start": "1904250",
    "end": "1907500"
  },
  {
    "text": "Take the result for a message and communicate every, all the information we need to get back to the cluster, back to the cluster.",
    "start": "1909666",
    "end": "1914916"
  },
  {
    "text": "but you have access to it in your behavior. If this makes sense.",
    "start": "1915500",
    "end": "1922625"
  },
  {
    "text": "so anyways, so to create a replier,",
    "start": "1925500",
    "end": "1938208"
  },
  {
    "text": "you give it the address. and again, this is done for you. Like when we actually spin up the behavior, so you just get access",
    "start": "1938208",
    "end": "1944500"
  },
  {
    "text": "to the actual replier. So Mattia is asking, so when you get the",
    "start": "1944500",
    "end": "1949625"
  },
  {
    "text": "entry object, you get both the. Additional information and the replier for that message.",
    "start": "1949625",
    "end": "1954958"
  },
  {
    "text": "Well, it's not a replier for that message, right? Cause you, the reply, like when the",
    "start": "1954958",
    "end": "1963250"
  },
  {
    "text": "signature of a behavior takes in. Or you get the mailbox and a replier,",
    "start": "1963250",
    "end": "1970333"
  },
  {
    "text": "so that you can reply to messages. So based on like how you pull messages, because we want to, we want to",
    "start": "1970333",
    "end": "1975708"
  },
  {
    "text": "pull any messages to be controllable by the user, right? If you want to pull fast than you can, if you want to pull slow, you can do that.",
    "start": "1975708",
    "end": "1981208"
  },
  {
    "text": "But, so you would be taking messages from the mailbox.",
    "start": "1981791",
    "end": "1985208"
  },
  {
    "text": "I missed message before. Did I, I'm sorry. yeah, the idea would be like this",
    "start": "1987416",
    "end": "1993375"
  },
  {
    "text": "complete method is like the base method of like a, a replier, right? This is the most basic low level way that",
    "start": "1993375",
    "end": "1999666"
  },
  {
    "text": "you can call a replier. What is suggesting an alternative?",
    "start": "1999666",
    "end": "2005166"
  },
  {
    "text": "Cause I think at some point, shardcake had a replier type and you could send",
    "start": "2010375",
    "end": "2018000"
  },
  {
    "text": "the repliers as objects inside messages. Cause you could even have like final",
    "start": "2018000",
    "end": "2025541"
  },
  {
    "text": "things where you could have multiple recipients and, and you could send like",
    "start": "2025541",
    "end": "2032833"
  },
  {
    "text": "the addresses to, through the message. This is a slightly different thing though.",
    "start": "2032833",
    "end": "2037291"
  },
  {
    "text": "Yeah. I know that shardcake has a replier. I was taking a slightly different approach based on the",
    "start": "2038541",
    "end": "2044500"
  },
  {
    "text": "goals that we had, which were like, one of which being, when we",
    "start": "2044500",
    "end": "2053291"
  },
  {
    "text": "reply to a message, we want to also update stuff that happens in the database, right? We want to mark the message as processed.",
    "start": "2053291",
    "end": "2061125"
  },
  {
    "text": "We want to mark the last time that an entity was active.",
    "start": "2061750",
    "end": "2066750"
  },
  {
    "text": "we want to do a bunch of stuff like when a particular message was processed. So I took a slightly different approach.",
    "start": "2067250",
    "end": "2073583"
  },
  {
    "text": "My replier doesn't is the only association between a message and a",
    "start": "2073583",
    "end": "2078666"
  },
  {
    "text": "replier is through the actual like methods that the replier has on it. The replier wouldn't get sent through",
    "start": "2078666",
    "end": "2084958"
  },
  {
    "text": "with like a message or anything like that. But I know shard cake has that type of API.",
    "start": "2084958",
    "end": "2088500"
  },
  {
    "text": "but yeah, so this is like one idea I had, right? Where this is essentially",
    "start": "2096250",
    "end": "2102750"
  },
  {
    "text": "injected into your behavior. And then because this is now inside the entity manager, we have access to all of",
    "start": "2102750",
    "end": "2110166"
  },
  {
    "text": "the stuff in the entity manager's, constructors closure. So because Mike had said during one of",
    "start": "2110166",
    "end": "2116833"
  },
  {
    "text": "our last streams that to track for the termination fiber, right?",
    "start": "2116833",
    "end": "2122250"
  },
  {
    "text": "To, for the time to live for an entity, the last active time should be the last time an entity processed a",
    "start": "2122500",
    "end": "2129250"
  },
  {
    "text": "message, not, not the last time an entity received a message. Cause in shard cake, it's the latter, not",
    "start": "2129250",
    "end": "2135250"
  },
  {
    "text": "the former to do that, we need a way to track the last time an",
    "start": "2135250",
    "end": "2142166"
  },
  {
    "text": "entity processed a message. Right. And I thought this was like a clean way to do that, right?",
    "start": "2142166",
    "end": "2147291"
  },
  {
    "text": "If you complete a message, you can then immediately mark the last active time for that entity inside the replier.",
    "start": "2147291",
    "end": "2155750"
  },
  {
    "text": "And just to sort of repeat myself again",
    "start": "2155958",
    "end": "2161166"
  },
  {
    "text": "from, from last time, the reason the TQL should be from the last process message.",
    "start": "2161166",
    "end": "2168208"
  },
  {
    "text": "I mean, well, not, not per se the last process, but like if there are messages",
    "start": "2169500",
    "end": "2176333"
  },
  {
    "text": "to be processed, of course the entity shouldn't shut down because there's work to do, so the condition assumes",
    "start": "2176333",
    "end": "2183458"
  },
  {
    "text": "there's no, no, no non-processed, non-processed",
    "start": "2183458",
    "end": "2188625"
  },
  {
    "text": "messages, so the queue would basically is empty and the last process messages is was expiring more well, it has an",
    "start": "2188625",
    "end": "2199375"
  },
  {
    "text": "expiration time, which is larger than the TTL. Otherwise the risk that we incur is that",
    "start": "2199375",
    "end": "2205375"
  },
  {
    "text": "an entity receives the message, takes a month to process because the business",
    "start": "2205375",
    "end": "2210791"
  },
  {
    "text": "logic for that specific thing takes a month and we end up shutting down the,",
    "start": "2210791",
    "end": "2216625"
  },
  {
    "text": "the entity after 30 minutes, passivate the entity when",
    "start": "2216625",
    "end": "2222333"
  },
  {
    "text": "it should steal the work. Obviously it's a very different use case from, from shardcake, because in,",
    "start": "2222333",
    "end": "2230416"
  },
  {
    "text": "in our case, we need to guarantee processing go of",
    "start": "2230416",
    "end": "2235500"
  },
  {
    "text": "things are not just sharding a cluster for the means of like computation.",
    "start": "2235500",
    "end": "2239583"
  },
  {
    "text": "Here we want to run workflows and so forth. So we, we need a bit more reliability.",
    "start": "2240625",
    "end": "2246291"
  },
  {
    "text": "Right. I think I need to in my expiration fiber",
    "start": "2248000",
    "end": "2255416"
  },
  {
    "text": "logic, I think I still need to add the, the check somewhere I need to add the",
    "start": "2255416",
    "end": "2264375"
  },
  {
    "text": "check somewhere in here for whether or not the mailbox is, is empty.",
    "start": "2264375",
    "end": "2271375"
  },
  {
    "text": "You're going to have to figure out where that makes the most sense because the mailbox is, I guess when we actually",
    "start": "2272250",
    "end": "2283750"
  },
  {
    "text": "terminate the entity, we're going to have access to the state here.",
    "start": "2283750",
    "end": "2289458"
  },
  {
    "text": "And so basically we can just skip, we can prevent terminating the entity. Like because you said when",
    "start": "2289666",
    "end": "2295333"
  },
  {
    "text": "you would enter in a loop. Yeah, we would need to figure out like a place to put that check.",
    "start": "2295333",
    "end": "2301416"
  },
  {
    "text": "That makes sense. But, by the way, what is the trigger?",
    "start": "2301583",
    "end": "2306166"
  },
  {
    "text": "Like do we have something like a Chrome tab that we check every sometime when the,",
    "start": "2306666",
    "end": "2313458"
  },
  {
    "text": "when the termination should occur?",
    "start": "2313791",
    "end": "2315458"
  },
  {
    "text": "sort of this expiration fiber is the thing that tracks like, like when we",
    "start": "2318833",
    "end": "2327208"
  },
  {
    "text": "should be actually terminating the entity. So essentially we have a fiber that",
    "start": "2327208",
    "end": "2332916"
  },
  {
    "text": "sleeps for the max idle time. And then after the max idle time, it",
    "start": "2332916",
    "end": "2340416"
  },
  {
    "text": "tries to terminate the entity per entity, yes. Cause if you look at the get or create",
    "start": "2340416",
    "end": "2345666"
  },
  {
    "text": "state, one of the first things we do is we start this expiration fiber inside that entity's scope.",
    "start": "2345666",
    "end": "2350333"
  },
  {
    "text": "So this fiber gets shut down if the entity ever gets terminated as well. but the idea here is you sleep,",
    "start": "2351333",
    "end": "2358416"
  },
  {
    "text": "you get the current time and the last act of time you compute whether or not it's greater than what it should be.",
    "start": "2358416",
    "end": "2363958"
  },
  {
    "text": "Right. And if it, if you are, if the amount of time that's remaining, until like the",
    "start": "2364458",
    "end": "2371333"
  },
  {
    "text": "time that we should expire is greater than zero, that we just keep sleeping. Otherwise we return void, which allows",
    "start": "2371333",
    "end": "2377833"
  },
  {
    "text": "the actual entity termination to occur.",
    "start": "2377833",
    "end": "2380000"
  },
  {
    "text": "so again, this logic could be improved. It's a little like, contrived at the moment, but it works.",
    "start": "2383416",
    "end": "2390333"
  },
  {
    "text": "Well, I mean, we could have one fiber.",
    "start": "2391791",
    "end": "2395208"
  },
  {
    "text": "Per per pod basically. And that fiber kind of loops every,",
    "start": "2397000",
    "end": "2404708"
  },
  {
    "text": "every second or every five seconds and checks every entity.",
    "start": "2404708",
    "end": "2411541"
  },
  {
    "text": "for the condition, which is like, okay, an entity could be",
    "start": "2411541",
    "end": "2418666"
  },
  {
    "text": "a terminatable or early an entity can be",
    "start": "2418666",
    "end": "2423875"
  },
  {
    "text": "passivated if the mailbox is empty and there are no incoming messages and the",
    "start": "2423875",
    "end": "2431875"
  },
  {
    "text": "time expired, so we need to track all the entity objects that we need to track anyway, probably.",
    "start": "2431875",
    "end": "2440666"
  },
  {
    "text": "Because when we shut down the pod, we need to shut down all the, all the entities, so the",
    "start": "2442000",
    "end": "2447500"
  },
  {
    "text": "objects are tracked anyway. we could have a single fiber do the whole job instead of having a two fibers.",
    "start": "2447500",
    "end": "2455583"
  },
  {
    "text": "Basically one fiber for a behavior and one fiber for the, for the expiration.",
    "start": "2455875",
    "end": "2460666"
  },
  {
    "text": "even because I don't quite understand how the TTL resets.",
    "start": "2461541",
    "end": "2466750"
  },
  {
    "text": "It's like you fork the fiber and it sleeps for max idle time. But if I receive a new message, but get a",
    "start": "2466750",
    "end": "2474583"
  },
  {
    "text": "new message, like if I process a new message, then the sleep should, should",
    "start": "2474583",
    "end": "2480375"
  },
  {
    "text": "delay because it's a TTL from the, from the last processed message.",
    "start": "2480375",
    "end": "2485125"
  },
  {
    "text": "so yeah, it grabs the last time that",
    "start": "2486166",
    "end": "2492000"
  },
  {
    "text": "particular entity was active from the map of like the last act of times map.",
    "start": "2492000",
    "end": "2497208"
  },
  {
    "text": "So last act of times is just a map of entity addressed to number. maybe I'm not understanding.",
    "start": "2497708",
    "end": "2503625"
  },
  {
    "text": "Do we re fork a new fiber at every message we receive and kill the previous one?",
    "start": "2504000",
    "end": "2509208"
  },
  {
    "text": "No, wait, sorry. Do we re fork a new fiber on every message? No, we only fork a fiber",
    "start": "2509916",
    "end": "2515750"
  },
  {
    "text": "when an entity is created. What we do do, is constantly update",
    "start": "2515750",
    "end": "2521375"
  },
  {
    "text": "this last act of times map based on the last time a message was processed.",
    "start": "2521375",
    "end": "2525791"
  },
  {
    "text": "So we basically compute how much like the remaining time.",
    "start": "2526625",
    "end": "2531875"
  },
  {
    "text": "So when, when that fiber ends up in the, it has slept enough",
    "start": "2531875",
    "end": "2537166"
  },
  {
    "text": "then it checks again. Did I had new messages or not? It's precisely compute the difference and",
    "start": "2537458",
    "end": "2542833"
  },
  {
    "text": "sleep for the difference. Makes sense. Yeah. So just suspends basically for the max idle time.",
    "start": "2542833",
    "end": "2547958"
  },
  {
    "text": "And then once the max idle time is over, we check if we should terminate. And if we should, then we continue.",
    "start": "2548583",
    "end": "2555458"
  },
  {
    "text": "Otherwise we just suspend again. makes sense. So it's pretty like lightweight.",
    "start": "2555458",
    "end": "2561208"
  },
  {
    "text": "but we are spinning up like a fiber per entity this way. Yeah. And that's, that's probably fine.",
    "start": "2561833",
    "end": "2568541"
  },
  {
    "text": "And then what's really nice is so when we actually terminate an entity, like all we have to do is close its",
    "start": "2569833",
    "end": "2575500"
  },
  {
    "text": "scope, which is pretty nice. Like the entity termination logic before was a little bit, messy, but, now",
    "start": "2575500",
    "end": "2583541"
  },
  {
    "text": "we can just basically lock the manager, terminate the entity by closing the",
    "start": "2583541",
    "end": "2588791"
  },
  {
    "text": "scope and then continue. the only thing I'm not sure here is",
    "start": "2588791",
    "end": "2594166"
  },
  {
    "text": "like, because we're locking the entity term, like we're locking here.",
    "start": "2594166",
    "end": "2599000"
  },
  {
    "text": "I don't know if this makes a lot of sense because the, that means the entity won't",
    "start": "2600000",
    "end": "2607791"
  },
  {
    "text": "be able to create like this get or create state won't be able to do anything. while we're terminating an entity.",
    "start": "2607791",
    "end": "2614083"
  },
  {
    "text": "and if an entity takes a long time to terminate, that could be a problem. So that's like, you know, another",
    "start": "2615250",
    "end": "2622500"
  },
  {
    "text": "situation, another place where having like this, that like terminating state, could be",
    "start": "2622500",
    "end": "2629333"
  },
  {
    "text": "like useful for the purposes of like tracking termination and all of that sort",
    "start": "2629333",
    "end": "2634791"
  },
  {
    "text": "of thing, because like locking the entity during term locking the manager during termination could be not great.",
    "start": "2634791",
    "end": "2642416"
  },
  {
    "text": "what else?",
    "start": "2644583",
    "end": "2645875"
  },
  {
    "text": "I think that was most of what I did in the entity manager.",
    "start": "2649791",
    "end": "2653708"
  },
  {
    "text": "Last time, like when I was kind of just trying to figure out a way to do all of this one of the other things I ran",
    "start": "2655666",
    "end": "2665208"
  },
  {
    "text": "into was, I think when I was trying to",
    "start": "2665208",
    "end": "2671500"
  },
  {
    "text": "write, yeah, I haven't,",
    "start": "2671541",
    "end": "2684458"
  },
  {
    "text": "I haven't like fleshed all of this out yet. but this is kind of like the idea I",
    "start": "2684458",
    "end": "2692916"
  },
  {
    "text": "had for like what you basically what you would be specifying when you actually go to create a workflow.",
    "start": "2692916",
    "end": "2697750"
  },
  {
    "text": "So, it's not working yet, but this is kind of like the, what I was going for.",
    "start": "2698708",
    "end": "2705833"
  },
  {
    "text": "So, you specify the protocol, right? So we have a get, this for a counter entity.",
    "start": "2705833",
    "end": "2711916"
  },
  {
    "text": "you get the count, you increment the counter and you decrement the counter.",
    "start": "2712208",
    "end": "2717500"
  },
  {
    "text": "All messages are required to have a primary key. because if they don't, there's no way",
    "start": "2717958",
    "end": "2725166"
  },
  {
    "text": "for us to have an idea, a unique idea associated with them, like we can't",
    "start": "2725166",
    "end": "2730291"
  },
  {
    "text": "just like randomly compute that. so in the entity managers or in the",
    "start": "2730291",
    "end": "2735416"
  },
  {
    "text": "entities make method, I'll show you like some of the shenanigans I had to do to get this work.",
    "start": "2735416",
    "end": "2740291"
  },
  {
    "text": "To clarify one thing, this is the message protocol and entities. It's not necessarily a workflow though.",
    "start": "2740625",
    "end": "2748041"
  },
  {
    "text": "This is the message protocol, not necessarily a workflow, sorry. This is the message protocol for an entity.",
    "start": "2749333",
    "end": "2755083"
  },
  {
    "text": "and then defining a behavior like this is basically me trying to show",
    "start": "2755666",
    "end": "2761083"
  },
  {
    "text": "like the API I'm going for for a cluster and the behavior, like all of that",
    "start": "2761083",
    "end": "2766958"
  },
  {
    "text": "kind of how it fits together. It is basically defines an actor with the messages that the actor can receive and so on and so forth.",
    "start": "2766958",
    "end": "2773291"
  },
  {
    "text": "Yep. Yeah. So, you define your messages. Every message is a tagged request.",
    "start": "2773291",
    "end": "2779250"
  },
  {
    "text": "so for those familiar with tagged requests, we use them for a lot of things. In effect, you define your success schema.",
    "start": "2779666",
    "end": "2785500"
  },
  {
    "text": "So when the message is processed, this is what you should succeed with. If the message processing was successful,",
    "start": "2785791",
    "end": "2790833"
  },
  {
    "text": "if the message has the ability to fail, what should this, what's the schema? Excuse me for failure.",
    "start": "2791916",
    "end": "2796916"
  },
  {
    "text": "And then what's the payload that that message is going to take with it, into the like entity.",
    "start": "2797583",
    "end": "2802416"
  },
  {
    "text": "So given that the primary is required,",
    "start": "2802833",
    "end": "2807125"
  },
  {
    "text": "we might want to have our own little extension of tagged request, which",
    "start": "2807958",
    "end": "2815583"
  },
  {
    "text": "might even, might even go in, in schema itself, with, with something like",
    "start": "2815583",
    "end": "2821958"
  },
  {
    "text": "persisted tagged requests or something similar to actually force the user.",
    "start": "2821958",
    "end": "2828500"
  },
  {
    "text": "Specify that and, and actually not, not really to force the user to specify",
    "start": "2829541",
    "end": "2836250"
  },
  {
    "text": "that, but rather to ensure the return type. I know this is probably ensured that a cool site.",
    "start": "2836416",
    "end": "2842916"
  },
  {
    "text": "So if you grew up the type, you can't, you can't pass it in.",
    "start": "2843208",
    "end": "2847750"
  },
  {
    "text": "Yeah. I mean, I have, I have specified about the call site, but it's not like great.",
    "start": "2848291",
    "end": "2854208"
  },
  {
    "text": "Also, I had to do some shenanigans to get this to work. I'll show you what that looks like. I can't imagine.",
    "start": "2855125",
    "end": "2859625"
  },
  {
    "text": "but last week I had a number of shenanigans that you can't even imagine.",
    "start": "2860916",
    "end": "2866625"
  },
  {
    "text": "yes. Well, but when you actually like construct an entity, like this counter entity, like the entity itself",
    "start": "2867083",
    "end": "2874291"
  },
  {
    "text": "basically tracks the protocol, that you're going to be working with.",
    "start": "2874291",
    "end": "2878708"
  },
  {
    "text": "for behaviors, I created this little like helper type, this",
    "start": "2879625",
    "end": "2885500"
  },
  {
    "text": "like get behavior helper type, which allows you to easily create a behavior",
    "start": "2885500",
    "end": "2891583"
  },
  {
    "text": "for like a particular entity. we could probably do this a different way. but can probably have",
    "start": "2891750",
    "end": "2897708"
  },
  {
    "text": "a make behavior function. Right. The only thing with the make behavior function is you'd have to pass the entity in for virtually no reason, but",
    "start": "2897708",
    "end": "2904291"
  },
  {
    "text": "that might just be nicer than like, might be nicer than this. Probably not really",
    "start": "2904291",
    "end": "2910125"
  },
  {
    "text": "caring about tree shaking here. So, right. so, I mean, you could",
    "start": "2910125",
    "end": "2918041"
  },
  {
    "text": "also take it as a type parameter. Like you could easily do the exact same thing, but anyways, the point here",
    "start": "2918041",
    "end": "2923666"
  },
  {
    "text": "is that less trivial because you could have also stuff like, context and",
    "start": "2923666",
    "end": "2929875"
  },
  {
    "text": "so on and so forth, which by the way, you can even have here. Yes. So, like, again, this is like",
    "start": "2929875",
    "end": "2940166"
  },
  {
    "text": "not taking it really anything else into account, but the point here is that you have your mailbox, you have your",
    "start": "2940166",
    "end": "2945791"
  },
  {
    "text": "replier, and the idea here is that, you",
    "start": "2945791",
    "end": "2954166"
  },
  {
    "text": "know, you basically are setting up an actor, like Mike said, so you have the ability to handle messages.",
    "start": "2954166",
    "end": "2959000"
  },
  {
    "text": "So you can take messages from mailbox handle those messages, do it forever.",
    "start": "2959666",
    "end": "2965208"
  },
  {
    "text": "Basically you're setting up an actor here, but this is kind of like the API I was going for to some degree where",
    "start": "2965791",
    "end": "2971333"
  },
  {
    "text": "like, do we get an entity ID inside the.",
    "start": "2971333",
    "end": "2977083"
  },
  {
    "text": "Behavior. mailbox replier.",
    "start": "2978000",
    "end": "2984333"
  },
  {
    "text": "I know what you're asking. Yes. We can add as many parameters as we want to the behavior at the moment. It's just taking the mailbox and the",
    "start": "2985625",
    "end": "2991833"
  },
  {
    "text": "replier, but we probably can add something like a meta data argument or",
    "start": "2991833",
    "end": "2997208"
  },
  {
    "text": "something like that, that gives you information about the entity. That's like actually running this request. So you could have like meta data entity",
    "start": "2997208",
    "end": "3003125"
  },
  {
    "text": "ID, meta data like shard ID. We can have all of that information propagated in.",
    "start": "3003125",
    "end": "3008125"
  },
  {
    "text": "Yeah. Cause I was thinking like now you're using just a subscription ref locally to store the state.",
    "start": "3008833",
    "end": "3014458"
  },
  {
    "text": "But if we were to actually persist that state, you would need an identifier for the entity to like link",
    "start": "3014875",
    "end": "3022000"
  },
  {
    "text": "state to the entity. Right. And you can sort of see the, again,",
    "start": "3022000",
    "end": "3028083"
  },
  {
    "text": "I like API was going for, for the replier, so basically calling a replier dot succeed message count, it's",
    "start": "3028083",
    "end": "3034166"
  },
  {
    "text": "essentially the same API surface as request, in effect.",
    "start": "3034166",
    "end": "3040416"
  },
  {
    "text": "So it's just doing more stuff under the hood for like cluster specific stuff.",
    "start": "3041541",
    "end": "3047500"
  },
  {
    "text": "so anyways, I didn't think this was too bad API wise. I thought this was pretty minimal.",
    "start": "3048208",
    "end": "3053458"
  },
  {
    "text": "you're really only defining like what you care about. You're not doing any like gymnastics to",
    "start": "3053958",
    "end": "3060541"
  },
  {
    "text": "get anything else to work. And the next thing I was starting to work on was like entity registration and,",
    "start": "3060541",
    "end": "3067083"
  },
  {
    "text": "and what that would look like with sharding. And like, so the idea here is that, you know, you have your sharding service,",
    "start": "3067291",
    "end": "3073375"
  },
  {
    "text": "you register an entity, and then you can get a messenger from the sharding",
    "start": "3073375",
    "end": "3078791"
  },
  {
    "text": "service as well. So, you know, sharding dot",
    "start": "3078833",
    "end": "3084291"
  },
  {
    "text": "make messenger and this would",
    "start": "3084291",
    "end": "3090458"
  },
  {
    "text": "take in the entity and then you can use the messenger to do things. I mean",
    "start": "3090458",
    "end": "3095833"
  },
  {
    "text": "Can you put that out of dot effect at least doesn't complain",
    "start": "3096708",
    "end": "3101916"
  },
  {
    "text": "about the missing environment. and the idea here is you'd get a",
    "start": "3101916",
    "end": "3108333"
  },
  {
    "text": "messenger that can send these messages. So like messenger dot ask,",
    "start": "3108333",
    "end": "3115125"
  },
  {
    "text": "and you can pass on the entity ID, and the message.",
    "start": "3115416",
    "end": "3123583"
  },
  {
    "text": "know, counter one new get count.",
    "start": "3123583",
    "end": "3127333"
  },
  {
    "text": "and then the ID would be like, I dunno, something.",
    "start": "3131833",
    "end": "3136875"
  },
  {
    "text": "and so with ask, you would be getting back. the return type here",
    "start": "3137750",
    "end": "3144500"
  },
  {
    "text": "is not like correct yet. not properly. The messenger I've spent",
    "start": "3144500",
    "end": "3150708"
  },
  {
    "text": "the least amount of time on. So like all the return types and everything are not right. but this is kind of",
    "start": "3150708",
    "end": "3156208"
  },
  {
    "text": "like the idea that I had. so very similar to like current",
    "start": "3156208",
    "end": "3161458"
  },
  {
    "text": "cluster, very similar to like current effect cluster, but just kind of doing",
    "start": "3161458",
    "end": "3168000"
  },
  {
    "text": "things a little bit more, in like an effect native kind of way using tagged",
    "start": "3168000",
    "end": "3173291"
  },
  {
    "text": "requests, using, you know, the ability to probably get context that all that stuff.",
    "start": "3173291",
    "end": "3178833"
  },
  {
    "text": "so it's still like a lot of work to do even just within the entity manager. But like, I feel like",
    "start": "3180041",
    "end": "3185208"
  },
  {
    "text": "this was a good, the, it'll be so funny at some point, cause I",
    "start": "3185208",
    "end": "3192291"
  },
  {
    "text": "do think it's very important for like the end goal of cluster is to really be",
    "start": "3192291",
    "end": "3199083"
  },
  {
    "text": "the first clustering mechanism in JavaScript. So at some point we will also have to",
    "start": "3199083",
    "end": "3207000"
  },
  {
    "text": "provide a non-effect API cause like mind blown, like the, the end goal of",
    "start": "3207000",
    "end": "3213666"
  },
  {
    "text": "effect is to disappear. so we're going to have to rethink everything, break to work in a non-effect",
    "start": "3213666",
    "end": "3221041"
  },
  {
    "text": "way, but it's going to be fantastic. That's Tim's job. Tim, can I have that Yeah, Tim can I have that",
    "start": "3221166",
    "end": "3226333"
  },
  {
    "text": "anyways, yeah.",
    "start": "3227833",
    "end": "3232958"
  },
  {
    "text": "I think like, I mean, I think that the current direction I'm going here makes this pretty decent, like again,",
    "start": "3233000",
    "end": "3239666"
  },
  {
    "text": "like pretty lean for like setting up an actor actor, actor system kind of situation.",
    "start": "3239666",
    "end": "3244333"
  },
  {
    "text": "so maybe I'll just quickly show like the shenanigans and entity dot make.",
    "start": "3246083",
    "end": "3251125"
  },
  {
    "text": "don't judge me for this, but, so",
    "start": "3251916",
    "end": "3257875"
  },
  {
    "text": "because, I mean, this probably like makes perfect sense, but for some",
    "start": "3257875",
    "end": "3264375"
  },
  {
    "text": "reason, when I got so deep into like a cluster, I just like lost sight of this.",
    "start": "3264375",
    "end": "3268958"
  },
  {
    "text": "But because like, when you're creating an entity, you're dealing with not",
    "start": "3269500",
    "end": "3274666"
  },
  {
    "text": "instances of messages, but like the class itself, right? Like the actual like messages themselves,",
    "start": "3275208",
    "end": "3282708"
  },
  {
    "text": "envelope.any message refers to the instant side.",
    "start": "3283291",
    "end": "3289083"
  },
  {
    "text": "It doesn't refer to like the actual type. And so like in my mind, I was like, Oh,",
    "start": "3290041",
    "end": "3295708"
  },
  {
    "text": "I'll just use any message for the constructor and that didn't work. So then I was trying to figure out how to",
    "start": "3295708",
    "end": "3301375"
  },
  {
    "text": "make this work and also be safe on the type level. and anyways, Tim",
    "start": "3301375",
    "end": "3307375"
  },
  {
    "text": "kind of helped me with this.",
    "start": "3307375",
    "end": "3313500"
  },
  {
    "text": "It's a little dirty, but basically any message, that's the same trick he used to make were to make the",
    "start": "3313750",
    "end": "3321083"
  },
  {
    "text": "API we were working last week. Yeah. To where that's exactly the same trick",
    "start": "3321083",
    "end": "3327791"
  },
  {
    "text": "Basically any message schema is this and it's essentially just refers to",
    "start": "3328875",
    "end": "3334625"
  },
  {
    "text": "any message, which is this, and,",
    "start": "3334625",
    "end": "3340708"
  },
  {
    "text": "you can see that any message type script is structural. Yeah.",
    "start": "3342000",
    "end": "3346750"
  },
  {
    "text": "This, this is like a hot mess, but it works and it's type",
    "start": "3347041",
    "end": "3352333"
  },
  {
    "text": "safe amazingly enough. And so even though it looks a little dirty, it works.",
    "start": "3352333",
    "end": "3359208"
  },
  {
    "text": "So yeah, that is how we did that.",
    "start": "3360041",
    "end": "3364750"
  },
  {
    "text": "what else did I want to show you guys?",
    "start": "3366000",
    "end": "3369791"
  },
  {
    "text": "Oh yeah. Internally, I just convert the schema to a union. since we're getting on the make, like",
    "start": "3372666",
    "end": "3378791"
  },
  {
    "text": "make receives an array of messages. I just converted to a union internally because when we actually go to decode.",
    "start": "3378791",
    "end": "3385583"
  },
  {
    "text": "And they're tagged anyway. So the union is going to be a tagged union. Yeah. So like internally, this, this is not a",
    "start": "3386541",
    "end": "3393750"
  },
  {
    "text": "problem, but, what else, what else? What else?",
    "start": "3393750",
    "end": "3397666"
  },
  {
    "text": "I think that's really it. there's still like a ton of work to be done.",
    "start": "3399666",
    "end": "3404541"
  },
  {
    "text": "I need to start getting back to this, but, there's still some problems with",
    "start": "3405041",
    "end": "3410666"
  },
  {
    "text": "mailbox storage that need to be addressed. Tim added support for my SQL to have multiple statements.",
    "start": "3410708",
    "end": "3416125"
  },
  {
    "text": "So I know I no longer need to do two queries. I just now I need to like, right.",
    "start": "3416625",
    "end": "3422208"
  },
  {
    "text": "Like a multi multi statement SQL query to send to my SQL to basically",
    "start": "3423041",
    "end": "3428666"
  },
  {
    "text": "get back the information that I need. and there's still some problems with",
    "start": "3428666",
    "end": "3434333"
  },
  {
    "text": "like the types in, in mailbox storage. For example, I think like when I go",
    "start": "3434333",
    "end": "3439375"
  },
  {
    "text": "to insert a message, so when I go to",
    "start": "3439375",
    "end": "3449541"
  },
  {
    "text": "insert a message, save message, yeah, ignore all the red, we get the entity",
    "start": "3449583",
    "end": "3458625"
  },
  {
    "text": "address and the message coming in. But it's kind of weird because if you",
    "start": "3458833",
    "end": "3465375"
  },
  {
    "text": "think about it from the entity manager side, right, the entity manager gets an encoded message, which we then decode",
    "start": "3465375",
    "end": "3472791"
  },
  {
    "text": "on in the entity manager to make sure that it's the appropriate message for the entity manager, we then save that",
    "start": "3473500",
    "end": "3479833"
  },
  {
    "text": "message to empty mailbox storage where we have to re serialize the message.",
    "start": "3479833",
    "end": "3485208"
  },
  {
    "text": "And then at the end we de-serialize it again.",
    "start": "3487291",
    "end": "3491291"
  },
  {
    "text": "So there's like, do we actually need to, well, I mean, we could return the",
    "start": "3492916",
    "end": "3499166"
  },
  {
    "text": "message that came in, right? Yeah. The original one here, but that felt like that felt like it was getting towards the",
    "start": "3499166",
    "end": "3507583"
  },
  {
    "text": "problem that we discussed many meetings ago where we like talked about how we",
    "start": "3507583",
    "end": "3512458"
  },
  {
    "text": "always want messages to go through the same process, right? We always want the sort",
    "start": "3512625",
    "end": "3517875"
  },
  {
    "text": "happening, which we do, right? Whether we're sending to a local entity or we're sending to a remote entity,",
    "start": "3517875",
    "end": "3523458"
  },
  {
    "text": "the message goes through the same process. This felt like another one of those situations where we probably want to",
    "start": "3523458",
    "end": "3528500"
  },
  {
    "text": "know when we get the, the stuff back from the database, like is the entry that we're getting back from the database,",
    "start": "3528500",
    "end": "3534750"
  },
  {
    "text": "does it match the message schema that we got like to save basically.",
    "start": "3534750",
    "end": "3540125"
  },
  {
    "text": "Right. Well, I mean, performance wise, I don't",
    "start": "3540125",
    "end": "3545708"
  },
  {
    "text": "think encoding and decoding the message a few times is going to count in, in this",
    "start": "3545708",
    "end": "3553500"
  },
  {
    "text": "case when you have network all over the place. So I think if we compare like the delays",
    "start": "3553500",
    "end": "3561541"
  },
  {
    "text": "that you get when, when you send a message and get the reply and so on and so forth, I don't think encoding once or",
    "start": "3561541",
    "end": "3568083"
  },
  {
    "text": "twice is gonna actually make any tangible difference. So I would at least let's, let's start",
    "start": "3568083",
    "end": "3575000"
  },
  {
    "text": "with encoding and decoding as much as it makes sense and we",
    "start": "3575000",
    "end": "3581000"
  },
  {
    "text": "can always remove them. But it's very important to detect issues.",
    "start": "3581000",
    "end": "3587708"
  },
  {
    "text": "That was kind of like the idea is like, we don't, we know when we come back from the database, like, okay, yeah, maybe we",
    "start": "3588291",
    "end": "3594750"
  },
  {
    "text": "can be sure like, are we really all and, you know, we do to some degree already know that what",
    "start": "3594750",
    "end": "3601791"
  },
  {
    "text": "we're getting back makes sense. Right. Because when we were using effect SQL,",
    "start": "3601791",
    "end": "3606583"
  },
  {
    "text": "which does the sort for us as well. So it's just that the message body that",
    "start": "3606833",
    "end": "3614208"
  },
  {
    "text": "comes back from the database is a string. So like, there's",
    "start": "3614208",
    "end": "3620166"
  },
  {
    "text": "opportunity here to make this cleaner. But for now I was just trying to get everything to like play nicely together.",
    "start": "3620166",
    "end": "3626625"
  },
  {
    "text": "But anyways, yeah, so what do you guys think about the, the entity manager, like",
    "start": "3630041",
    "end": "3639041"
  },
  {
    "text": "the new entity manager and also kind of like this like, replier API to basically proxy information back to the cluster",
    "start": "3639041",
    "end": "3645708"
  },
  {
    "text": "when we complete messages, et cetera. Oh, I think it's one other thing.",
    "start": "3645708",
    "end": "3650916"
  },
  {
    "text": "I'm sorry. one thing I had, I did not mention it all yet is message acknowledgement,",
    "start": "3650916",
    "end": "3657000"
  },
  {
    "text": "which we need for, tell. Right. And my idea for message acknowledgement,",
    "start": "3657250",
    "end": "3664500"
  },
  {
    "text": "like when you tell a message to the cluster, as opposed to asking, we need to be able to acknowledge not from the",
    "start": "3664500",
    "end": "3670958"
  },
  {
    "text": "entity though. No, no, no, no. I'm saying like the mailbox storage, once",
    "start": "3670958",
    "end": "3676833"
  },
  {
    "text": "it, once it's persisted, it's we've lined fine. So we basically mark that messages",
    "start": "3676833",
    "end": "3682958"
  },
  {
    "text": "processed and storage and we reply. So my idea was that where is it?",
    "start": "3682958",
    "end": "3689458"
  },
  {
    "text": "Somewhere wherever we do, the initial save of the message, I think it's in send",
    "start": "3689458",
    "end": "3694625"
  },
  {
    "text": "send here, we could figure",
    "start": "3695833",
    "end": "3703458"
  },
  {
    "text": "out a way to respond to tells. if it makes sense.",
    "start": "3703458",
    "end": "3709041"
  },
  {
    "text": "we just need to figure out a way to,",
    "start": "3710625",
    "end": "3716000"
  },
  {
    "text": "to like, do the response here. If it's a tell versus an ask, do you know what I mean?",
    "start": "3716000",
    "end": "3721875"
  },
  {
    "text": "So still an unsolved problem, but this is where it would happen. We get a, an entry that comes in and,",
    "start": "3723875",
    "end": "3733041"
  },
  {
    "text": "this is kind of like, this is the place where we're saving the message. So if we successfully saved, then, you",
    "start": "3733250",
    "end": "3740250"
  },
  {
    "text": "know, that would be the place to actually respond, we could do something inside,",
    "start": "3740250",
    "end": "3746041"
  },
  {
    "text": "like send message to entity. But again, we just need to know somehow that it's a tell versus an ask. So problems still certain things go are",
    "start": "3746041",
    "end": "3755083"
  },
  {
    "text": "unsolved, but at least like, I feel like we're moving in the right direction for like, at least being able to reply to",
    "start": "3755083",
    "end": "3760791"
  },
  {
    "text": "messages and whatnot. So, but I still haven't solved like the tell piece.",
    "start": "3760791",
    "end": "3765666"
  },
  {
    "text": "Anyways, now I'll let you comment. I apologize for interrupting again. No, no worries.",
    "start": "3766750",
    "end": "3771708"
  },
  {
    "text": "I think overall it's, it's fine. Maybe at some point, like we could smooth",
    "start": "3773083",
    "end": "3779750"
  },
  {
    "text": "further the API in the behavior and get like a single parameter instead of two or",
    "start": "3779750",
    "end": "3786541"
  },
  {
    "text": "three and merge all of them.",
    "start": "3786541",
    "end": "3791000"
  },
  {
    "text": "So like get a parameter, which is a mailbox and the replier",
    "start": "3791625",
    "end": "3797666"
  },
  {
    "text": "and the metadata. But that's just to like compact it a little bit more, not to, not to have",
    "start": "3797666",
    "end": "3804500"
  },
  {
    "text": "multiple arguments, but like those are refinements that at this point in time,",
    "start": "3804500",
    "end": "3811375"
  },
  {
    "text": "they're not, not important at all. So I, I like the idea of like separation",
    "start": "3811375",
    "end": "3819166"
  },
  {
    "text": "to, to do the first iteration of work. So everything is more clear.",
    "start": "3819166",
    "end": "3825875"
  },
  {
    "text": "and yeah, the, we've, we've been discussing it even if you remember maybe",
    "start": "3827041",
    "end": "3833500"
  },
  {
    "text": "the very first stream that we did that there is a very, very strong similarity",
    "start": "3833500",
    "end": "3841166"
  },
  {
    "text": "between, request completion and,",
    "start": "3841166",
    "end": "3847041"
  },
  {
    "text": "signaling of message completion to, to a good extent, they are, they are the",
    "start": "3847458",
    "end": "3853958"
  },
  {
    "text": "same thing and, and getting the two API is as, as similar",
    "start": "3853958",
    "end": "3859000"
  },
  {
    "text": "as possible. It's, it's nice because it reduces the mental overhead.",
    "start": "3859000",
    "end": "3864875"
  },
  {
    "text": "You could say, okay. when defining the behavior, if by any chance you already know of,",
    "start": "3865500",
    "end": "3872541"
  },
  {
    "text": "request resolvers, you have the same API. The concept is pretty much the same with",
    "start": "3872541",
    "end": "3878458"
  },
  {
    "text": "the difference that you have a mail box that you can pull messages from.",
    "start": "3878458",
    "end": "3883333"
  },
  {
    "text": "But once you've pulled the message, you complete it in the same way. If you don't know that,",
    "start": "3884250",
    "end": "3889791"
  },
  {
    "text": "then follow the example. Right. So yeah, I think there's still a lot of",
    "start": "3889791",
    "end": "3896250"
  },
  {
    "text": "like, like you said, polish and stuff, but I feel like the internals are starting to come together in a way that",
    "start": "3896250",
    "end": "3902000"
  },
  {
    "text": "makes sense, at least a little bit. you know, it's hard as Mattia probably knows very well.",
    "start": "3902000",
    "end": "3907541"
  },
  {
    "text": "It's hard to fit all these pieces together, especially in a way that's reliable.",
    "start": "3907541",
    "end": "3913125"
  },
  {
    "text": "but, that's why we're doing a rewrite. Right.",
    "start": "3913833",
    "end": "3918958"
  },
  {
    "text": "So I think, I think that there's still probably going to be like changes",
    "start": "3919750",
    "end": "3925791"
  },
  {
    "text": "that need to be made to this, like for sure. But I think like, at least we can probably proceed in this direction.",
    "start": "3925791",
    "end": "3930750"
  },
  {
    "text": "And, you know, also tests are going to pick up on problems. Like as we start testing pieces of the",
    "start": "3931708",
    "end": "3938208"
  },
  {
    "text": "cluster, especially like in the entity manager, like where we're currently locking versus where we should be locking.",
    "start": "3938208",
    "end": "3943958"
  },
  {
    "text": "the entity state, or entities state and all of that sort of thing.",
    "start": "3944125",
    "end": "3949333"
  },
  {
    "text": "Like we're going to come across problems, but, I'm going to keep moving in this",
    "start": "3949333",
    "end": "3955375"
  },
  {
    "text": "direction. I also think we should do a little stream, not, not on",
    "start": "3955375",
    "end": "3960625"
  },
  {
    "text": "cluster itself, but rather chatting a little bit about STM going",
    "start": "3960625",
    "end": "3965916"
  },
  {
    "text": "through, going through some examples, going through how to use it. Cause I think once you understand STM,",
    "start": "3965916",
    "end": "3974041"
  },
  {
    "text": "many of those problems, if you model the state in STM, you just have transactionality.",
    "start": "3974625",
    "end": "3980666"
  },
  {
    "text": "So a lot of things becomes easier and it",
    "start": "3981708",
    "end": "3988125"
  },
  {
    "text": "could like performance wise is. This is the lightly worst. For example, a semaphore.",
    "start": "3988125",
    "end": "3996000"
  },
  {
    "text": "We are using an optimized version of the effect semaphore, which is",
    "start": "3996458",
    "end": "4002916"
  },
  {
    "text": "as performant as humanly possible. That's fine, but a semaphore built on top",
    "start": "4003000",
    "end": "4010625"
  },
  {
    "text": "of STM is five lines of code and semantically it works the same.",
    "start": "4010625",
    "end": "4018083"
  },
  {
    "text": "Now it's slightly less performant, but it works the same and you can compose it with other transactionalist.",
    "start": "4019041",
    "end": "4025625"
  },
  {
    "text": "So you can like, okay, I want to lock this. Then inside I want to do a transactional operation and so on and so forth.",
    "start": "4026166",
    "end": "4032708"
  },
  {
    "text": "So the power is, is incredible. I mean, I think in those cases, just like",
    "start": "4033250",
    "end": "4038500"
  },
  {
    "text": "paying a little bit of performance price to get absolute certainty over,",
    "start": "4038500",
    "end": "4045291"
  },
  {
    "text": "over how the state transitions is very important here. It like, this is the backbone of distributed",
    "start": "4045291",
    "end": "4053333"
  },
  {
    "text": "systems, it should be the backbone of  distributed systems. So we can't afford screw ups like, okay,",
    "start": "4053333",
    "end": "4060541"
  },
  {
    "text": "the cluster is in a state where it did something that it wasn't supposed to do that, that would be the worst.",
    "start": "4060541",
    "end": "4067083"
  },
  {
    "text": "So I think like spending an hour. Wouldn't take more than an hour.",
    "start": "4067666",
    "end": "4072708"
  },
  {
    "text": "Probably it's a very simple API. If you're reading or effect and you obviously already know effect very well.",
    "start": "4072708",
    "end": "4079416"
  },
  {
    "text": "So probably not even an hour, but we could, like it's even fun to, to, to",
    "start": "4079500",
    "end": "4086541"
  },
  {
    "text": "showcase that to, to the audience. Cause it's some module that you would,",
    "start": "4086541",
    "end": "4092000"
  },
  {
    "text": "you wouldn't use in a normal case. It's probably for the,",
    "start": "4092333",
    "end": "4097541"
  },
  {
    "text": "for the 0.1% of use cases. But if you do have those use cases, it's",
    "start": "4098083",
    "end": "4103666"
  },
  {
    "text": "just fantastic to use. And I think the, what we've discussed with this state alignment when locking,",
    "start": "4103666",
    "end": "4111833"
  },
  {
    "text": "when not locking and so on and so forth, it's like absolutely the perfect fit for,",
    "start": "4111833",
    "end": "4117333"
  },
  {
    "text": "for STM. So maybe let's schedule another stream on, on STM and, and",
    "start": "4117708",
    "end": "4123833"
  },
  {
    "text": "then we see how to apply it if to apply it to, to cluster next time.",
    "start": "4123833",
    "end": "4129541"
  },
  {
    "text": "Yeah, I think that makes sense. I mean, we can definitely get something out. I think it's, it's, it would also be a",
    "start": "4130125",
    "end": "4135333"
  },
  {
    "text": "great opportunity for folks to, like you said, sort of learn about a module that otherwise they",
    "start": "4135333",
    "end": "4140375"
  },
  {
    "text": "probably would have skipped over. So. Good. Cool.",
    "start": "4140375",
    "end": "4144791"
  },
  {
    "text": "Cool. These was fun. Well, thank you everybody for listening. Hopefully next time I have even more",
    "start": "4146041",
    "end": "4152291"
  },
  {
    "text": "progress to share about cluster. and you know, in, in two streams from",
    "start": "4152291",
    "end": "4158125"
  },
  {
    "text": "now, we're going to have the cluster up and running. Yeah. That's right.",
    "start": "4158125",
    "end": "4162958"
  },
  {
    "text": "That's right. We have a lot of time together, coming up in San Francisco, Mike.",
    "start": "4163583",
    "end": "4167916"
  },
  {
    "text": "So there's even a team retreat where we have to hack on something.",
    "start": "4171666",
    "end": "4177291"
  },
  {
    "text": "So that's right. Yeah. So these by the end of November is production ready for Patrick, maybe.",
    "start": "4177541",
    "end": "4185333"
  },
  {
    "text": "Well, anyways, thank you everybody for listening. thank you guys for, for paying attention and asking questions and yeah,",
    "start": "4187916",
    "end": "4194000"
  },
  {
    "text": "hopefully, we can get something together on STM quickly so that we can show show that off and talk about that.",
    "start": "4194041",
    "end": "4199750"
  },
  {
    "text": "So. Cool. Thanks, Mike. Cool. Thank you very much. See you folks.",
    "start": "4200000",
    "end": "4205500"
  }
]