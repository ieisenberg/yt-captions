[
  {
    "text": "(audience applauds)",
    "start": "0",
    "end": "2359"
  },
  {
    "text": "So hi, I'm Anna.",
    "start": "2359",
    "end": "6120"
  },
  {
    "text": "You might know me as DevMiner.",
    "start": "6960",
    "end": "10199"
  },
  {
    "text": "I'm doing development DevOps and sys admin stuff at work",
    "start": "10640",
    "end": "14759"
  },
  {
    "text": "and also my free time help.",
    "start": "15199",
    "end": "16519"
  },
  {
    "text": "I'm also chronically online,",
    "start": "17280",
    "end": "18160"
  },
  {
    "text": "so if you have questions later,",
    "start": "18160",
    "end": "19280"
  },
  {
    "text": "just ask me in Discord or find me here.",
    "start": "19280",
    "end": "21120"
  },
  {
    "text": "I'm a self-educated developer",
    "start": "22280",
    "end": "23440"
  },
  {
    "text": "and I basically look into every single thing",
    "start": "23640",
    "end": "28119"
  },
  {
    "text": "that can happen with technology.",
    "start": "28280",
    "end": "30879"
  },
  {
    "text": "So my agenda is I wanna first discuss",
    "start": "31640",
    "end": "33920"
  },
  {
    "text": "why we actually want like type-safe rest APIs",
    "start": "33920",
    "end": "36519"
  },
  {
    "text": "from like back-end into front-end",
    "start": "36719",
    "end": "38159"
  },
  {
    "text": "and actually maybe also other projects",
    "start": "38159",
    "end": "40640"
  },
  {
    "text": "that might not actually be in TypeScript.",
    "start": "40640",
    "end": "41960"
  },
  {
    "text": "Then I wanna show my first attempt at this with Zod",
    "start": "42920",
    "end": "45239"
  },
  {
    "text": "and then I wanna show effect schema and typed at rest",
    "start": "45880",
    "end": "49520"
  },
  {
    "text": "which is my new thing for solving all of this.",
    "start": "49759",
    "end": "52600"
  },
  {
    "text": "So we have a Minecraft project.",
    "start": "54359",
    "end": "56320"
  },
  {
    "text": "I had a Minecraft project.",
    "start": "56320",
    "end": "57359"
  },
  {
    "text": "We built a website and a Discord bot",
    "start": "57600",
    "end": "59280"
  },
  {
    "text": "and two plugins.",
    "start": "59960",
    "end": "62520"
  },
  {
    "text": "They're written in Java.",
    "start": "63280",
    "end": "64119"
  },
  {
    "text": "The rest is written in TypeScript",
    "start": "64120",
    "end": "65280"
  },
  {
    "text": "because I'm kind of sane.",
    "start": "65519",
    "end": "66560"
  },
  {
    "text": "So we needed full type safe rest APIs",
    "start": "69599",
    "end": "73599"
  },
  {
    "text": "because our plugin is doing the same things",
    "start": "73760",
    "end": "75359"
  },
  {
    "text": "the website is using.",
    "start": "75359",
    "end": "76359"
  },
  {
    "text": "So we essentially built a wrapper around effect schema.",
    "start": "77319",
    "end": "80799"
  },
  {
    "text": "So meme, obligatory meme.",
    "start": "82959",
    "end": "86959"
  },
  {
    "text": "That it should be super easy, right?",
    "start": "87799",
    "end": "89599"
  },
  {
    "text": "No, that's not right.",
    "start": "90719",
    "end": "92359"
  },
  {
    "text": "It's not easy.",
    "start": "92680",
    "end": "93180"
  },
  {
    "text": "So what we want to do,",
    "start": "94040",
    "end": "95280"
  },
  {
    "text": "to duplicate a type so we don't have to do",
    "start": "95680",
    "end": "97760"
  },
  {
    "text": "as whatever or have a schema",
    "start": "98200",
    "end": "100078"
  },
  {
    "text": "that like it's just a TypeScript type definition.",
    "start": "100519",
    "end": "103438"
  },
  {
    "text": "We want proper parsing of request bodies and responses",
    "start": "104879",
    "end": "107000"
  },
  {
    "text": "and we want actually good auto complete",
    "start": "107959",
    "end": "109239"
  },
  {
    "text": "without having to manually enter like",
    "start": "110519",
    "end": "113519"
  },
  {
    "text": "this should be this type.",
    "start": "114040",
    "end": "115319"
  },
  {
    "text": "All right, so the vanilla JS wave would be,",
    "start": "116239",
    "end": "118920"
  },
  {
    "text": "we write our request handler in, for example, Next.js.",
    "start": "119560",
    "end": "123920"
  },
  {
    "text": "This is the Next.js API routes thing from Pages router",
    "start": "124159",
    "end": "128918"
  },
  {
    "text": "because we decided a couple of while ago.",
    "start": "129159",
    "end": "132080"
  },
  {
    "text": "So we first do our validation here",
    "start": "134159",
    "end": "137599"
  },
  {
    "text": "and then we just have our fetch here.",
    "start": "137599",
    "end": "140680"
  },
  {
    "text": "So what can go wrong?",
    "start": "141039",
    "end": "141680"
  },
  {
    "text": "You have to manually set what method should be used.",
    "start": "143159",
    "end": "147360"
  },
  {
    "text": "You have to do a validation yourself.",
    "start": "148240",
    "end": "150319"
  },
  {
    "text": "I hope you actually get the correct thing from your body",
    "start": "152439",
    "end": "155599"
  },
  {
    "text": "and you have to, well, yeah,",
    "start": "156599",
    "end": "159520"
  },
  {
    "text": "you have to essentially destructor your object",
    "start": "159520",
    "end": "161159"
  },
  {
    "text": "and to restructure it back without types.",
    "start": "161159",
    "end": "162879"
  },
  {
    "text": "Make sure that you actually use the correct fetch method.",
    "start": "164840",
    "end": "167120"
  },
  {
    "text": "Otherwise it's gonna blow up.",
    "start": "167240",
    "end": "168360"
  },
  {
    "text": "Make sure that you actually use JSON",
    "start": "169080",
    "end": "170439"
  },
  {
    "text": "and actually pass the correct thing",
    "start": "171360",
    "end": "172599"
  },
  {
    "text": "and that you get the correct thing back.",
    "start": "172680",
    "end": "174159"
  },
  {
    "text": "So my first prototype was, as I said, built on Zod.",
    "start": "175159",
    "end": "178519"
  },
  {
    "text": "Zod only has deserialization so you can only,",
    "start": "179680",
    "end": "183840"
  },
  {
    "text": "for example, transform an environment variable",
    "start": "184360",
    "end": "186319"
  },
  {
    "text": "which is always a string into a number",
    "start": "186560",
    "end": "189680"
  },
  {
    "text": "but not the way back.",
    "start": "190919",
    "end": "191599"
  },
  {
    "text": "And we had to do lots of manual error handling.",
    "start": "192479",
    "end": "194599"
  },
  {
    "text": "So we start with our schema which is just normal Zod.",
    "start": "195400",
    "end": "199758"
  },
  {
    "text": "I'm gonna pin that up there because just the types.",
    "start": "200360",
    "end": "202800"
  },
  {
    "text": "It's too much.",
    "start": "203520",
    "end": "204020"
  },
  {
    "text": "Then we write our effect, our schema,",
    "start": "204840",
    "end": "208000"
  },
  {
    "text": "our request handler.",
    "start": "208680",
    "end": "210120"
  },
  {
    "text": "There we go.",
    "start": "211439",
    "end": "211939"
  },
  {
    "text": "So it's just almost like the same thing but it's a parse.",
    "start": "212319",
    "end": "214840"
  },
  {
    "text": "This is gonna blow up if you pass the wrong thing",
    "start": "215520",
    "end": "217960"
  },
  {
    "text": "and which might result in the 500",
    "start": "217960",
    "end": "219960"
  },
  {
    "text": "but if you're in a dev server of Next.js,",
    "start": "220199",
    "end": "222879"
  },
  {
    "text": "it might actually blow up with a 500 error",
    "start": "222879",
    "end": "224879"
  },
  {
    "text": "and return HTML back.",
    "start": "225039",
    "end": "226479"
  },
  {
    "text": "What?",
    "start": "227280",
    "end": "227780"
  },
  {
    "text": "Why is that the default behavior?",
    "start": "228520",
    "end": "229479"
  },
  {
    "text": "At least on Next.js 12 where our page was written.",
    "start": "230360",
    "end": "233120"
  },
  {
    "text": "So you still have types so you can use satisfies now",
    "start": "234080",
    "end": "237879"
  },
  {
    "text": "which is pretty cool.",
    "start": "237879",
    "end": "239159"
  },
  {
    "text": "You can also use as but I prefer satisfies.",
    "start": "239360",
    "end": "241680"
  },
  {
    "text": "And you write your client which is just also a fetch",
    "start": "243400",
    "end": "245918"
  },
  {
    "text": "with your satisfies.",
    "start": "246120",
    "end": "248080"
  },
  {
    "text": "But now you have all of these satisfies.",
    "start": "249199",
    "end": "250599"
  },
  {
    "text": "You actually have to provide the correct things everywhere.",
    "start": "250599",
    "end": "252520"
  },
  {
    "text": "Oh, I missed some hiding part there, cool.",
    "start": "252879",
    "end": "255879"
  },
  {
    "text": "But you actually, now you can get at least some parsing",
    "start": "257120",
    "end": "260600"
  },
  {
    "text": "which is cool.",
    "start": "260600",
    "end": "261160"
  },
  {
    "text": "So welcome to effect schema.",
    "start": "262600",
    "end": "263560"
  },
  {
    "text": "So as Jess mentioned earlier,",
    "start": "264040",
    "end": "266399"
  },
  {
    "text": "you get extremely powerful schema validation",
    "start": "266720",
    "end": "269839"
  },
  {
    "text": "and also the transformation part.",
    "start": "270120",
    "end": "272240"
  },
  {
    "text": "So for example, we can turn a date into a string",
    "start": "272720",
    "end": "275800"
  },
  {
    "text": "and then so essentially I call this the hydrated type",
    "start": "276000",
    "end": "280759"
  },
  {
    "text": "and this is dehydrated type.",
    "start": "280759",
    "end": "281920"
  },
  {
    "text": "It's not quite what the effect team wants",
    "start": "281920",
    "end": "283759"
  },
  {
    "text": "but I think it makes sense for the most React developers.",
    "start": "284000",
    "end": "286319"
  },
  {
    "text": "So we essentially have the date as our hydrated type",
    "start": "287120",
    "end": "290199"
  },
  {
    "text": "and then we can actually put this into a string",
    "start": "290319",
    "end": "292279"
  },
  {
    "text": "when it's blown through JSON",
    "start": "292279",
    "end": "294039"
  },
  {
    "text": "and then can get converted back.",
    "start": "294040",
    "end": "295959"
  },
  {
    "text": "I want to thank Gino and Ethan from,",
    "start": "296639",
    "end": "300759"
  },
  {
    "text": "Ethan is back there,",
    "start": "302399",
    "end": "303399"
  },
  {
    "text": "and Gino from another Discord server",
    "start": "304480",
    "end": "306680"
  },
  {
    "text": "for showing me this library and the community.",
    "start": "306879",
    "end": "308439"
  },
  {
    "text": "It's amazing and yeah.",
    "start": "309120",
    "end": "310600"
  },
  {
    "text": "The docs, if you need more information,",
    "start": "311879",
    "end": "313639"
  },
  {
    "text": "just look at the read me, it's amazing.",
    "start": "313920",
    "end": "315240"
  },
  {
    "text": "Okay, so type address is my solution for this.",
    "start": "317199",
    "end": "319000"
  },
  {
    "text": "You essentially create your schema.",
    "start": "319839",
    "end": "321399"
  },
  {
    "text": "It's a little more to type",
    "start": "321680",
    "end": "324560"
  },
  {
    "text": "but you essentially just give it the path in your API.",
    "start": "324759",
    "end": "329240"
  },
  {
    "text": "You give it what methods it should be used",
    "start": "330519",
    "end": "332319"
  },
  {
    "text": "and what the request and response headers are",
    "start": "332519",
    "end": "334920"
  },
  {
    "text": "or well, not headers, the bodies.",
    "start": "335360",
    "end": "336719"
  },
  {
    "text": "You can also ignore the request if you're doing a body.",
    "start": "338040",
    "end": "342000"
  },
  {
    "text": "If you're doing a get,",
    "start": "342759",
    "end": "344680"
  },
  {
    "text": "requests don't have bodies, at least not request bodies.",
    "start": "346120",
    "end": "349000"
  },
  {
    "text": "So I'm gonna pin the types up there.",
    "start": "349959",
    "end": "352079"
  },
  {
    "text": "So we can just create an next.js pages handler",
    "start": "353199",
    "end": "356240"
  },
  {
    "text": "which is just getting the schema",
    "start": "356240",
    "end": "358599"
  },
  {
    "text": "and result like returning a thing.",
    "start": "358839",
    "end": "361599"
  },
  {
    "text": "Yeah, and we can also generate a client from that",
    "start": "363800",
    "end": "366159"
  },
  {
    "text": "which is just simple to use, I guess.",
    "start": "366279",
    "end": "368600"
  },
  {
    "text": "It's still in early alpha so I need TypeScript magic man",
    "start": "370600",
    "end": "374439"
  },
  {
    "text": "to help me later with generics but yeah.",
    "start": "374839",
    "end": "378560"
  },
  {
    "text": "So we actually do automatic error handling",
    "start": "380319",
    "end": "382399"
  },
  {
    "text": "which is just try catch.",
    "start": "382399",
    "end": "384479"
  },
  {
    "text": "Well, it's try catch around on your error handlers",
    "start": "385000",
    "end": "387319"
  },
  {
    "text": "and we actually have a custom error type or result type.",
    "start": "387560",
    "end": "390160"
  },
  {
    "text": "So you can actually do proper error handling",
    "start": "390720",
    "end": "393439"
  },
  {
    "text": "instead of try catching around your thing",
    "start": "393759",
    "end": "395839"
  },
  {
    "text": "and hoping that it doesn't go up.",
    "start": "396480",
    "end": "398000"
  },
  {
    "text": "Yeah, so let me actually go into this one demo",
    "start": "398839",
    "end": "401839"
  },
  {
    "text": "which I can like sort of hover over things.",
    "start": "402079",
    "end": "404519"
  },
  {
    "text": "So we have our schema up here.",
    "start": "405199",
    "end": "407160"
  },
  {
    "text": "In this case, it's a get request instead of a post request.",
    "start": "408000",
    "end": "412720"
  },
  {
    "text": "So yeah, we essentially have the pages demo app here",
    "start": "413839",
    "end": "418160"
  },
  {
    "text": "and we have the server on the left side",
    "start": "419319",
    "end": "420839"
  },
  {
    "text": "which will essentially like just return that string.",
    "start": "421000",
    "end": "425360"
  },
  {
    "text": "And here's a little thing that TKDodo might appreciate.",
    "start": "426959",
    "end": "432279"
  },
  {
    "text": "Yeah, so essentially we can just like create a client",
    "start": "433920",
    "end": "435959"
  },
  {
    "text": "on our origin and just get our object.",
    "start": "436279",
    "end": "440319"
  },
  {
    "text": "And we get the full discriminated union",
    "start": "441399",
    "end": "446000"
  },
  {
    "text": "which the art type person, sorry, missing names.",
    "start": "446519",
    "end": "452000"
  },
  {
    "text": "But yeah, you can essentially only access the error",
    "start": "452639",
    "end": "454639"
  },
  {
    "text": "or the data if you actually check what it is.",
    "start": "454639",
    "end": "457040"
  },
  {
    "text": "Otherwise, it's gonna just show you that.",
    "start": "457639",
    "end": "460600"
  },
  {
    "text": "Yeah, I don't know what it is.",
    "start": "462759",
    "end": "464600"
  },
  {
    "text": "So yeah, that was my key takeaways from this are",
    "start": "465720",
    "end": "469240"
  },
  {
    "text": "you can use effect schema without having",
    "start": "469240",
    "end": "470879"
  },
  {
    "text": "to actually adopt schema",
    "start": "470879",
    "end": "471919"
  },
  {
    "text": "or well, no, without having to adopt effect.",
    "start": "472399",
    "end": "474758"
  },
  {
    "text": "So as you can probably see,",
    "start": "475240",
    "end": "476360"
  },
  {
    "text": "there is no effect magic in here actually.",
    "start": "477399",
    "end": "479518"
  },
  {
    "text": "Like it's just within a JavaScript or TypeScript.",
    "start": "480240",
    "end": "483959"
  },
  {
    "text": "But yeah.",
    "start": "484319",
    "end": "485120"
  },
  {
    "text": "And also the effect schema and all the other packages",
    "start": "487079",
    "end": "490160"
  },
  {
    "text": "and the community are amazing.",
    "start": "490160",
    "end": "491240"
  },
  {
    "text": "Thank you all.",
    "start": "491720",
    "end": "492220"
  },
  {
    "text": "So yeah.",
    "start": "492839",
    "end": "493759"
  },
  {
    "text": "(audience applauding)",
    "start": "495560",
    "end": "496060"
  }
]