[
  {
    "text": "(audience applauds)",
    "start": "3926",
    "end": "5160"
  },
  {
    "text": "Thank you.",
    "start": "5160",
    "end": "5880"
  },
  {
    "text": "Thank you.",
    "start": "5880",
    "end": "7160"
  },
  {
    "text": "I'm very happy to be there for that second edition",
    "start": "8120",
    "end": "10719"
  },
  {
    "text": "of the effect days, I hope you \nare having a great conference",
    "start": "10720",
    "end": "13720"
  },
  {
    "text": "there.",
    "start": "13720",
    "end": "14520"
  },
  {
    "text": "And you know, it's kind of funny",
    "start": "15280",
    "end": "16560"
  },
  {
    "text": "because I'm talking about power",
    "start": "16560",
    "end": "18680"
  },
  {
    "text": "and concurrency.",
    "start": "18680",
    "end": "20280"
  },
  {
    "text": "And also, I'm a huge fan of Lord of the Rings.",
    "start": "20280",
    "end": "23680"
  },
  {
    "text": "So Tim, we might become friends after the talk.",
    "start": "23680",
    "end": "27280"
  },
  {
    "text": "Sorry about that.",
    "start": "27960",
    "end": "29080"
  },
  {
    "text": "Yeah, OK.",
    "start": "30280",
    "end": "31760"
  },
  {
    "text": "And yeah, so today I'm going",
    "start": "31760",
    "end": "34240"
  },
  {
    "text": "to talk about the issues we deal",
    "start": "34240",
    "end": "36680"
  },
  {
    "text": "with with concurrency.",
    "start": "36680",
    "end": "38520"
  },
  {
    "text": "And we will see how effects \nwith the restricted concurrency",
    "start": "38520",
    "end": "41320"
  },
  {
    "text": "model helps addressing these problems.",
    "start": "41320",
    "end": "45440"
  },
  {
    "text": "So very quickly, let me introduce myself.",
    "start": "45440",
    "end": "48239"
  },
  {
    "text": "So my name is Antoine.",
    "start": "48240",
    "end": "49520"
  },
  {
    "text": "I'm currently working as a \nfreelance software engineer",
    "start": "49520",
    "end": "51920"
  },
  {
    "text": "for my own company.",
    "start": "51920",
    "end": "54519"
  },
  {
    "text": "And my goal there is to help other companies build",
    "start": "54520",
    "end": "57840"
  },
  {
    "text": "successful products.",
    "start": "57840",
    "end": "59080"
  },
  {
    "text": "And I'm also involved in \nthe open source development.",
    "start": "59080",
    "end": "62600"
  },
  {
    "text": "So I've been around in the",
    "start": "62600",
    "end": "63920"
  },
  {
    "text": "Effect ecosystem for a while now.",
    "start": "63920",
    "end": "66479"
  },
  {
    "text": "And yeah, I'm also organizing \nthe Effect Paris meetup.",
    "start": "66480",
    "end": "70640"
  },
  {
    "text": "So you can find me on these links.",
    "start": "71920",
    "end": "75439"
  },
  {
    "text": "And yeah, I'd be happy to chat about this project.",
    "start": "75440",
    "end": "78560"
  },
  {
    "text": "So why do we need to care about concurrency?",
    "start": "78560",
    "end": "80680"
  },
  {
    "text": "And the issue is that \nconcurrency is quite complex.",
    "start": "81520",
    "end": "84560"
  },
  {
    "text": "And I believe speakers today showed how complex it",
    "start": "84560",
    "end": "88320"
  },
  {
    "text": "is to get it right.",
    "start": "88320",
    "end": "89960"
  },
  {
    "text": "And even though in JavaScript \nwe have the event model that",
    "start": "89960",
    "end": "93680"
  },
  {
    "text": "provides us good abstractions over concurrency,",
    "start": "93680",
    "end": "96320"
  },
  {
    "text": "we still have many challenges that are left to us.",
    "start": "96320",
    "end": "99400"
  },
  {
    "text": "So we still have some work to do.",
    "start": "99400",
    "end": "101920"
  },
  {
    "text": "We need to put some work.",
    "start": "101920",
    "end": "104280"
  },
  {
    "text": "So yeah, let's see a few problems",
    "start": "104840",
    "end": "108479"
  },
  {
    "text": "we face with JavaScript and \nconcurrency and promises.",
    "start": "108480",
    "end": "113480"
  },
  {
    "text": "And obviously, it's not exhaustive.",
    "start": "113480",
    "end": "115240"
  },
  {
    "text": "We have many other problems.",
    "start": "115240",
    "end": "117040"
  },
  {
    "text": "But let's just see a few of them.",
    "start": "117040",
    "end": "118960"
  },
  {
    "text": "So the first one is that whenever",
    "start": "118960",
    "end": "120840"
  },
  {
    "text": "you come to await promise, you kind of",
    "start": "120840",
    "end": "123399"
  },
  {
    "text": "lose the execution control over it.",
    "start": "123400",
    "end": "125800"
  },
  {
    "text": "So if you want to exit from that situation,",
    "start": "125800",
    "end": "127920"
  },
  {
    "text": "you don't really have any ways of doing that.",
    "start": "127920",
    "end": "130399"
  },
  {
    "text": "And the issue is that you might end up",
    "start": "130400",
    "end": "132959"
  },
  {
    "text": "leaking resources or just deadlocking them",
    "start": "132960",
    "end": "135640"
  },
  {
    "text": "as you never reach the final \nblock for these promises",
    "start": "135640",
    "end": "139280"
  },
  {
    "text": "for these works.",
    "start": "139280",
    "end": "140920"
  },
  {
    "text": "The other issue I want to go through",
    "start": "140920",
    "end": "142599"
  },
  {
    "text": "is with the famous Promise.all \nthat you might know.",
    "start": "142600",
    "end": "147760"
  },
  {
    "text": "And the first issue we have with Promise.all",
    "start": "148280",
    "end": "150680"
  },
  {
    "text": "is that it doesn't offer us a good way",
    "start": "150680",
    "end": "152519"
  },
  {
    "text": "to have control over the concurrent execution.",
    "start": "152520",
    "end": "155520"
  },
  {
    "text": "So it's unbounded by default. So everything",
    "start": "155520",
    "end": "157560"
  },
  {
    "text": "gets fired concurrently.",
    "start": "157560",
    "end": "159200"
  },
  {
    "text": "And you might have issues with that.",
    "start": "159200",
    "end": "161239"
  },
  {
    "text": "So be careful with it within your programs.",
    "start": "161240",
    "end": "163960"
  },
  {
    "text": "And the other issue that might \nbe the most important one",
    "start": "163960",
    "end": "167120"
  },
  {
    "text": "is that whenever some of these promises fail,",
    "start": "167120",
    "end": "171120"
  },
  {
    "text": "the other ones keep running in the background.",
    "start": "171120",
    "end": "173200"
  },
  {
    "text": "So the control flow is provided back.",
    "start": "173200",
    "end": "175640"
  },
  {
    "text": "But indeed, we have still resources.",
    "start": "175640",
    "end": "177680"
  },
  {
    "text": "And we keep in memory a lot of promises",
    "start": "177680",
    "end": "180519"
  },
  {
    "text": "and all the resources that \nare associated with them.",
    "start": "180520",
    "end": "183240"
  },
  {
    "text": "So in that case, as you can \nsee, like up until the point",
    "start": "183240",
    "end": "186800"
  },
  {
    "text": "where we reach the five seconds timer,",
    "start": "186800",
    "end": "189480"
  },
  {
    "text": "then the other one, like the \nset timeout of 20 seconds,",
    "start": "189480",
    "end": "192440"
  },
  {
    "text": "will keep running in the background.",
    "start": "192440",
    "end": "196000"
  },
  {
    "text": "And so now the question is, do we",
    "start": "196000",
    "end": "197360"
  },
  {
    "text": "have solutions for that problem?",
    "start": "197360",
    "end": "199880"
  },
  {
    "text": "Well, we can talk about the \nexplicit resource management",
    "start": "199880",
    "end": "202960"
  },
  {
    "text": "feature that is pretty new in the ecosystem.",
    "start": "202960",
    "end": "205640"
  },
  {
    "text": "And while that one is helpful",
    "start": "205640",
    "end": "207040"
  },
  {
    "text": "to model some kind of explicit",
    "start": "207040",
    "end": "208879"
  },
  {
    "text": "resource release, it's more or less nothing",
    "start": "208880",
    "end": "212840"
  },
  {
    "text": "but a more convenient way of \nhaving try/finally statements right",
    "start": "212840",
    "end": "216239"
  },
  {
    "text": "it doesn't offer new guarantees about interruption",
    "start": "216240",
    "end": "219480"
  },
  {
    "text": "and resources releases",
    "start": "219480",
    "end": "222959"
  },
  {
    "text": "so we are still bound to the fact that the promise",
    "start": "222960",
    "end": "225840"
  },
  {
    "text": "needs to settled and then we can exit the scope",
    "start": "225840",
    "end": "228360"
  },
  {
    "text": "so that resources can then be released.",
    "start": "228360",
    "end": "231920"
  },
  {
    "text": "The other one is the Abort Controller API.",
    "start": "231920",
    "end": "234440"
  },
  {
    "text": "And we've been talking about that as well.",
    "start": "234440",
    "end": "236320"
  },
  {
    "text": "And while that one is helpful as it helps us",
    "start": "236320",
    "end": "238760"
  },
  {
    "text": "model some kind of cancellation,",
    "start": "238760",
    "end": "241280"
  },
  {
    "text": "then the issue is that we don't really",
    "start": "241280",
    "end": "243560"
  },
  {
    "text": "have guarantees that this cancellation will occur",
    "start": "243560",
    "end": "247200"
  },
  {
    "text": "because the receiver of the signals",
    "start": "247200",
    "end": "249480"
  },
  {
    "text": "need to correctly handle the cleanup",
    "start": "249480",
    "end": "251879"
  },
  {
    "text": "and also need to propagate \nthese events to all the children",
    "start": "251880",
    "end": "255320"
  },
  {
    "text": "operations.",
    "start": "255320",
    "end": "255840"
  },
  {
    "text": "So it's pretty tedious to maintain",
    "start": "255840",
    "end": "258239"
  },
  {
    "text": "and put these guarantees into reality.",
    "start": "258240",
    "end": "264400"
  },
  {
    "text": "So now that we saw some of the problems",
    "start": "264400",
    "end": "266919"
  },
  {
    "text": "we have with concurrency, we \ncan talk about a solution that",
    "start": "266920",
    "end": "271720"
  },
  {
    "text": "is called structured concurrency.",
    "start": "271720",
    "end": "274080"
  },
  {
    "text": "And what's good about structured concurrency",
    "start": "274080",
    "end": "276720"
  },
  {
    "text": "that it helps us model a graph of operations",
    "start": "276720",
    "end": "280240"
  },
  {
    "text": "where all the parents fully \nmanage all the children",
    "start": "280240",
    "end": "284120"
  },
  {
    "text": "operations.",
    "start": "284120",
    "end": "284639"
  },
  {
    "text": "So we manage the lifetime and also all the scopes",
    "start": "284640",
    "end": "289240"
  },
  {
    "text": "leads to all the children operations.",
    "start": "289240",
    "end": "290840"
  },
  {
    "text": "So in the context of structured concurrency,",
    "start": "290840",
    "end": "293680"
  },
  {
    "text": "all the operations have well-defined rules",
    "start": "293680",
    "end": "296440"
  },
  {
    "text": "and well-defined lifetime that you can rely upon.",
    "start": "296440",
    "end": "299640"
  },
  {
    "text": "And really, you can think \nof structured concurrency",
    "start": "300400",
    "end": "303720"
  },
  {
    "text": "as the way an operating system needs to work.",
    "start": "303720",
    "end": "306400"
  },
  {
    "text": "When you have a process and \nthat process gets terminated",
    "start": "306400",
    "end": "310360"
  },
  {
    "text": "for some reason, then you expect all the threads",
    "start": "310360",
    "end": "313039"
  },
  {
    "text": "and all the tasks associated with that thread",
    "start": "313040",
    "end": "315400"
  },
  {
    "text": "to be considered as well.",
    "start": "315400",
    "end": "317120"
  },
  {
    "text": "We don't expect any orphaned task",
    "start": "317120",
    "end": "320000"
  },
  {
    "text": "to be running in the background.",
    "start": "320000",
    "end": "322360"
  },
  {
    "text": "And really also a small disclaimer,",
    "start": "322360",
    "end": "324280"
  },
  {
    "text": "structured concurrency is \nnot a new concept at all.",
    "start": "324280",
    "end": "326840"
  },
  {
    "text": "And it's just gaining some \nmomentum and some popularity,",
    "start": "326840",
    "end": "330880"
  },
  {
    "text": "some of the modern programming languages.",
    "start": "330880",
    "end": "333880"
  },
  {
    "text": "I don't know if you can call",
    "start": "333880",
    "end": "334960"
  },
  {
    "text": "Java modern programming language,",
    "start": "334960",
    "end": "336360"
  },
  {
    "text": "but still, it has the merit \nof implementing such features.",
    "start": "336360",
    "end": "340080"
  },
  {
    "text": "So really, it's like a broad concept",
    "start": "340080",
    "end": "341879"
  },
  {
    "text": "that is gaining some adoption more and more",
    "start": "341880",
    "end": "344400"
  },
  {
    "text": "in the ecosystem.",
    "start": "344400",
    "end": "347120"
  },
  {
    "text": "And you know, if something is nice and powerful,",
    "start": "347120",
    "end": "350400"
  },
  {
    "text": "you can be pretty sure it's \nalready baked into Effect.",
    "start": "350400",
    "end": "353520"
  },
  {
    "text": "So Effect makes structured concurrency",
    "start": "353520",
    "end": "355800"
  },
  {
    "text": "available for TypeScript.",
    "start": "355800",
    "end": "357440"
  },
  {
    "text": "And that's really good news, right?",
    "start": "357440",
    "end": "359400"
  },
  {
    "text": "And one example of that is on the right,",
    "start": "359400",
    "end": "362040"
  },
  {
    "text": "you can see that we're using Effect.all,",
    "start": "362040",
    "end": "364160"
  },
  {
    "text": "which is the better equivalent \nof Promise.all with Effect.",
    "start": "364160",
    "end": "368840"
  },
  {
    "text": "And the good point is that because we're",
    "start": "368840",
    "end": "370400"
  },
  {
    "text": "using structured concurrency, whenever",
    "start": "370400",
    "end": "373040"
  },
  {
    "text": "we interrupt the program, then \nall the children operation",
    "start": "373040",
    "end": "377440"
  },
  {
    "text": "get correctly interrupted.",
    "start": "377440",
    "end": "379440"
  },
  {
    "text": "And we have an opportunity \nfor each of these operations",
    "start": "379440",
    "end": "382720"
  },
  {
    "text": "to execute the release of these \nresources, so on the left.",
    "start": "382720",
    "end": "388880"
  },
  {
    "text": "And so as you can see, well, everything",
    "start": "388880",
    "end": "391240"
  },
  {
    "text": "interrupts just correctly.",
    "start": "391240",
    "end": "392400"
  },
  {
    "text": "And we don't leave anything behind us.",
    "start": "392400",
    "end": "399120"
  },
  {
    "text": "And also a good point with structured concurrency,",
    "start": "399120",
    "end": "402120"
  },
  {
    "text": "just putting aside all the \nguarantees it provides us,",
    "start": "402120",
    "end": "404840"
  },
  {
    "text": "is the nice and declarative API, it offers us",
    "start": "404840",
    "end": "409520"
  },
  {
    "text": "to have a control over the execution.",
    "start": "409520",
    "end": "412440"
  },
  {
    "text": "So whether you need to make a function concurrent,",
    "start": "412440",
    "end": "415920"
  },
  {
    "text": "like you need to opt in for concurrency,",
    "start": "415920",
    "end": "417800"
  },
  {
    "text": "for a specific kind of concurrency,",
    "start": "417800",
    "end": "419720"
  },
  {
    "text": "or if you want to keep it sequential,",
    "start": "419720",
    "end": "421560"
  },
  {
    "text": "then you just keep the same API, right?",
    "start": "421560",
    "end": "423440"
  },
  {
    "text": "We don't have any changes to do.",
    "start": "423440",
    "end": "425440"
  },
  {
    "text": "So that's really also a good key point",
    "start": "425440",
    "end": "428040"
  },
  {
    "text": "that structured concurrency provides us.",
    "start": "428040",
    "end": "430240"
  },
  {
    "text": "And a good thing is that everything",
    "start": "430240",
    "end": "432400"
  },
  {
    "text": "happens behind the scenes, right?",
    "start": "432400",
    "end": "433720"
  },
  {
    "text": "We don't need to really care about it.",
    "start": "433720",
    "end": "435960"
  },
  {
    "text": "Like everything is managed \nby the runtime by default.",
    "start": "435960",
    "end": "440600"
  },
  {
    "text": "So now that we see what was structured concurrency",
    "start": "440600",
    "end": "443240"
  },
  {
    "text": "in practice, I want to go through bits",
    "start": "443240",
    "end": "446639"
  },
  {
    "text": "into some of the principles that are",
    "start": "446640",
    "end": "449080"
  },
  {
    "text": "used by structured concurrency.",
    "start": "449080",
    "end": "450919"
  },
  {
    "text": "And that principle is called supervision.",
    "start": "450920",
    "end": "453520"
  },
  {
    "text": "And supervision, you can see \nit as really the strategy",
    "start": "453520",
    "end": "456840"
  },
  {
    "text": "that is adopted by the runtime to kind of manage",
    "start": "456840",
    "end": "459560"
  },
  {
    "text": "the lifetime of all the operations.",
    "start": "459560",
    "end": "462280"
  },
  {
    "text": "And by default, we have what we",
    "start": "462280",
    "end": "463720"
  },
  {
    "text": "call the automatic supervision,",
    "start": "463720",
    "end": "465640"
  },
  {
    "text": "which is basically that the parent manages",
    "start": "465640",
    "end": "468920"
  },
  {
    "text": "the children operation.",
    "start": "468920",
    "end": "470440"
  },
  {
    "text": "So that was showed in the previous example.",
    "start": "470440",
    "end": "474600"
  },
  {
    "text": "So that happened automatically, \nand also with fibers,",
    "start": "474600",
    "end": "477720"
  },
  {
    "text": "as we can see in that example.",
    "start": "477720",
    "end": "479440"
  },
  {
    "text": "Whenever we have some kind of",
    "start": "480000",
    "end": "481080"
  },
  {
    "text": "background fiber that is forked,",
    "start": "481080",
    "end": "483199"
  },
  {
    "text": "what happens when the parent fiber exits?",
    "start": "483760",
    "end": "486120"
  },
  {
    "text": "Then you have it in example there.",
    "start": "486120",
    "end": "488080"
  },
  {
    "text": "We just see that whenever the parent terminates,",
    "start": "488080",
    "end": "491000"
  },
  {
    "text": "then the children gets automatically interrupted.",
    "start": "491000",
    "end": "495560"
  },
  {
    "text": "And if for some reason you want to escape",
    "start": "495560",
    "end": "497880"
  },
  {
    "text": "that kind of supervision, so in other words,",
    "start": "497880",
    "end": "500320"
  },
  {
    "text": "you want fibers to be outleaving their parents",
    "start": "500320",
    "end": "503840"
  },
  {
    "text": "then you can use other ways of forking fibers.",
    "start": "503840",
    "end": "507960"
  },
  {
    "text": "In other words, you can use different ways",
    "start": "507960",
    "end": "510840"
  },
  {
    "text": "of managing their lifetime.",
    "start": "510840",
    "end": "513279"
  },
  {
    "text": "And we've seen some examples using forkScoped,",
    "start": "513280",
    "end": "516719"
  },
  {
    "text": "and forkIn, in some of the talks,",
    "start": "516720",
    "end": "518759"
  },
  {
    "text": "and I'm really glad we saw that.",
    "start": "518760",
    "end": "521520"
  },
  {
    "text": "And the issue, not the issue, sorry...",
    "start": "521520",
    "end": "523960"
  },
  {
    "text": "the good thing is that",
    "start": "523960",
    "end": "525920"
  },
  {
    "text": "whenever you come to fork into scopes,",
    "start": "525920",
    "end": "528560"
  },
  {
    "text": "then you just delegate the lifetime,",
    "start": "528560",
    "end": "531120"
  },
  {
    "text": "the management of the lifetime, to scopes",
    "start": "531120",
    "end": "533320"
  },
  {
    "text": "and not to parent fibers anymore.",
    "start": "533320",
    "end": "535800"
  },
  {
    "text": "So you can kind of de-correlate, but you still",
    "start": "535800",
    "end": "538920"
  },
  {
    "text": "kind of preserve all the principle of structured",
    "start": "538920",
    "end": "540959"
  },
  {
    "text": "concurrency.",
    "start": "540960",
    "end": "541840"
  },
  {
    "text": "It's just that you don't have \nthe same parents anymore.",
    "start": "541840",
    "end": "546800"
  },
  {
    "text": "And so now you might be wondering,",
    "start": "546800",
    "end": "548680"
  },
  {
    "text": "so we've been talking about \nstructured concurrency,",
    "start": "549280",
    "end": "551840"
  },
  {
    "text": "and we've been talking about fibers,",
    "start": "551840",
    "end": "554240"
  },
  {
    "text": "and what's the relationship between the two?",
    "start": "554240",
    "end": "556200"
  },
  {
    "text": "And the thing is that to implement structured",
    "start": "557040",
    "end": "559240"
  },
  {
    "text": "concurrency, you need some \nkind of strong primitive",
    "start": "559240",
    "end": "563399"
  },
  {
    "text": "to implement all these principles.",
    "start": "563400",
    "end": "566320"
  },
  {
    "text": "And it turns out that fibers are really",
    "start": "566320",
    "end": "568520"
  },
  {
    "text": "a good candidate for such implementation,",
    "start": "568520",
    "end": "571520"
  },
  {
    "text": "as they are lightweight and non-blocking.",
    "start": "571520",
    "end": "573920"
  },
  {
    "text": "So it means that to deal with the concurrency",
    "start": "573920",
    "end": "576519"
  },
  {
    "text": "and the world of a program that needs",
    "start": "576520",
    "end": "578880"
  },
  {
    "text": "to have many, many operations at the same time,",
    "start": "578880",
    "end": "581880"
  },
  {
    "text": "you can really have fibers \nrepresenting all this operation",
    "start": "581880",
    "end": "585200"
  },
  {
    "text": "without a problem.",
    "start": "585200",
    "end": "587080"
  },
  {
    "text": "And also, fibers encode some kind of state.",
    "start": "587080",
    "end": "589800"
  },
  {
    "text": "So whether they are interrupted, \nor they have exceeded,",
    "start": "589800",
    "end": "592680"
  },
  {
    "text": "or whatever, they can embed the information",
    "start": "592680",
    "end": "595560"
  },
  {
    "text": "that we need to deal with that.",
    "start": "595560",
    "end": "597240"
  },
  {
    "text": "And also, there are scopes, so they",
    "start": "597240",
    "end": "598760"
  },
  {
    "text": "can preserve all the relationships they",
    "start": "598760",
    "end": "601440"
  },
  {
    "text": "have between all the fibers.",
    "start": "601440",
    "end": "603200"
  },
  {
    "text": "So that's really a good point \nthat we can have that already",
    "start": "603200",
    "end": "607240"
  },
  {
    "text": "baked in Effect.",
    "start": "607240",
    "end": "608320"
  },
  {
    "text": "And just as a side note, you",
    "start": "608320",
    "end": "609400"
  },
  {
    "text": "can have structured concurrency",
    "start": "609400",
    "end": "610840"
  },
  {
    "text": "without fibers, right?",
    "start": "610840",
    "end": "612440"
  },
  {
    "text": "But fibers overcome all these issues",
    "start": "612440",
    "end": "616000"
  },
  {
    "text": "and even go beyond the scope of",
    "start": "616000",
    "end": "617560"
  },
  {
    "text": "structured concurrency, right?",
    "start": "617560",
    "end": "618760"
  },
  {
    "text": "So it's really a win, a win-do on that side.",
    "start": "618760",
    "end": "624560"
  },
  {
    "text": "So that's it for me.",
    "start": "624560",
    "end": "626080"
  },
  {
    "text": "It was structured concurrency in 10 minutes.",
    "start": "626600",
    "end": "628959"
  },
  {
    "text": "If you want to go a bit more",
    "start": "628960",
    "end": "630680"
  },
  {
    "text": "into the details of what it is,",
    "start": "630680",
    "end": "632680"
  },
  {
    "text": "there is some links.",
    "start": "632680",
    "end": "633880"
  },
  {
    "text": "I really encourage you to go through these links",
    "start": "635440",
    "end": "638200"
  },
  {
    "text": "and also to see a bit more what's",
    "start": "638200",
    "end": "640280"
  },
  {
    "text": "running behind the scenes of Effect.",
    "start": "640280",
    "end": "642280"
  },
  {
    "text": "And you might benefit from \nthat also in other ecosystems.",
    "start": "642280",
    "end": "655880"
  },
  {
    "text": "(audience applauds)",
    "start": "655880",
    "end": "657114"
  }
]