[
  {
    "text": "Okay, so let's see what we're going to do today. So today we are going to continue our journey.",
    "start": "7733",
    "end": "14083"
  },
  {
    "text": "Building a warehouse using effect.",
    "start": "15800",
    "end": "19116"
  },
  {
    "text": "And last time we described. All the things, all the",
    "start": "21183",
    "end": "26866"
  },
  {
    "text": "entity that are involved in. Our applications.",
    "start": "26866",
    "end": "31750"
  },
  {
    "text": "And we started also scheming out. Few helpers.",
    "start": "34150",
    "end": "39750"
  },
  {
    "text": "Member. A product. A unit of measure.",
    "start": "40883",
    "end": "45050"
  },
  {
    "text": "The concept of our warehouse.",
    "start": "46233",
    "end": "48683"
  },
  {
    "text": "And today we're going to start tackling How we want to shape the",
    "start": "52716",
    "end": "59016"
  },
  {
    "text": "request between server and client. And also we're going to start maybe",
    "start": "59016",
    "end": "67416"
  },
  {
    "text": "building some part of the server that will handle the requests.",
    "start": "67416",
    "end": "72283"
  },
  {
    "text": "Okay, so. Let's see.",
    "start": "74416",
    "end": "77449"
  },
  {
    "text": "So last time we were trying to describe",
    "start": "83116",
    "end": "88266"
  },
  {
    "text": "the kind of the API's we want to use for describing requests",
    "start": "88266",
    "end": "93733"
  },
  {
    "text": "between server and the client. And the kind of the API's that we want to",
    "start": "93733",
    "end": "100616"
  },
  {
    "text": "use are kind of like this. We want to be able to define",
    "start": "100616",
    "end": "105883"
  },
  {
    "text": "first what is an aggregate. For example, an aggregate",
    "start": "105883",
    "end": "110983"
  },
  {
    "text": "is the kind of an entity. We have the products, for example.",
    "start": "110983",
    "end": "114549"
  },
  {
    "text": "And then we will describe messages for the aggregate.",
    "start": "116766",
    "end": "122966"
  },
  {
    "text": "And messages can be either a command or queries. The basic difference is that we want to",
    "start": "123716",
    "end": "130882"
  },
  {
    "text": "know if we can batch a list of requests to the server.",
    "start": "130883",
    "end": "135366"
  },
  {
    "text": "And we can only actually batch queries. And for comments we won't batch them",
    "start": "136116",
    "end": "143533"
  },
  {
    "text": "because batching them may result in a different order of the comments and",
    "start": "143533",
    "end": "149515"
  },
  {
    "text": "comments abide in different orders may result into different things.",
    "start": "149516",
    "end": "154516"
  },
  {
    "text": "So we'll, a hypothesis that we can use",
    "start": "156716",
    "end": "162416"
  },
  {
    "text": "these kind of API's trying to build these API's. But then Maxwell came on stream and",
    "start": "162416",
    "end": "169733"
  },
  {
    "text": "actually suggested something very interesting. That is that maybe instead of defining",
    "start": "169733",
    "end": "175966"
  },
  {
    "text": "these extend product.aggregate we can take advantage of the already built-in",
    "start": "175966",
    "end": "181833"
  },
  {
    "text": "schema tech requests. And instead have something like, product",
    "start": "181833",
    "end": "188449"
  },
  {
    "text": "aggregate.metaDataFields. And these will automatically inject some common fields that are common for all the",
    "start": "188449",
    "end": "196383"
  },
  {
    "text": "requests for that aggregate. And what are those meta data fields?",
    "start": "196383",
    "end": "202533"
  },
  {
    "text": "Those meta data fields basically are the ID of the current request.",
    "start": "203550",
    "end": "210066"
  },
  {
    "text": "And that can be the ID of a message for query or the ID for a",
    "start": "210949",
    "end": "217783"
  },
  {
    "text": "message of a comment. So that if the network request fails we can just retry again the message and the",
    "start": "217783",
    "end": "227183"
  },
  {
    "text": "server will know if, for example, that's a comment will know if he already have seen that comment.",
    "start": "227183",
    "end": "232550"
  },
  {
    "text": "Or if it's a new comment he have never seen and in that case,",
    "start": "232550",
    "end": "237849"
  },
  {
    "text": "well, we need to perform this. And we also provide in here two things",
    "start": "238283",
    "end": "246982"
  },
  {
    "text": "that are the aggregate root and the aggregate ID. I stole those names, but I don't want",
    "start": "246983",
    "end": "253849"
  },
  {
    "text": "actually to fully adopt the concept of an aggregate. And by aggregate root I mean a set of",
    "start": "253849",
    "end": "262049"
  },
  {
    "text": "entities, like for example a product is an aggregate root. And inside of product you may have many",
    "start": "262050",
    "end": "269266"
  },
  {
    "text": "products because product is the kind of aggregate you have. But then you need to have the aggregate",
    "start": "269266",
    "end": "275516"
  },
  {
    "text": "ID because you need to decide if it's product number one or product number two or whatever.",
    "start": "275516",
    "end": "280866"
  },
  {
    "text": "Okay, so let's see. We will start by saying that maybe we can",
    "start": "283633",
    "end": "293333"
  },
  {
    "text": "use something like product aggregate.MetadataFields. And that is what we described last time.",
    "start": "293333",
    "end": "300349"
  },
  {
    "text": "And the nice thing is that these metadata fields is built in a way such as when I",
    "start": "300783",
    "end": "306333"
  },
  {
    "text": "want to make a new message, for example in here, you see that the make",
    "start": "306333",
    "end": "311633"
  },
  {
    "text": "constructor is smart enough to understand that",
    "start": "311633",
    "end": "316066"
  },
  {
    "text": "the aggregate root, here if I try to make for example changer.make, we see that the",
    "start": "317566",
    "end": "330315"
  },
  {
    "text": "aggregate root is optional and if not provided will be defaulted by the products.",
    "start": "330316",
    "end": "336116"
  },
  {
    "text": "And that's because we are defining a product aggregate message and that's really nice.",
    "start": "336483",
    "end": "343533"
  },
  {
    "text": "So let's go back to this kind of implementation and try to expand this more.",
    "start": "343550",
    "end": "348916"
  },
  {
    "text": "So maybe we want also to, as said before,",
    "start": "350883",
    "end": "355849"
  },
  {
    "text": "describe which kind of messages are requests and which kind of comments and",
    "start": "356716",
    "end": "363516"
  },
  {
    "text": "which kind of messages are queries. So we need to provide a field that we will say if that is a",
    "start": "363516",
    "end": "371533"
  },
  {
    "text": "message of type query or a comment. And we can do that by trying to attach a",
    "start": "371533",
    "end": "382266"
  },
  {
    "text": "field into the payload that will not be present in the encoded form but will be",
    "start": "382266",
    "end": "389750"
  },
  {
    "text": "present in the actual runtime version of the type. So let's do that by defining things like",
    "start": "389750",
    "end": "401266"
  },
  {
    "text": "a message kind, maybe, and this message",
    "start": "401266",
    "end": "407016"
  },
  {
    "text": "kind can be the literal that can be either query, make a comment or query.",
    "start": "407016",
    "end": "417533"
  },
  {
    "text": "Oh right, this is the type so we need to",
    "start": "418550",
    "end": "424465"
  },
  {
    "text": "do schema.literal, query or comment.",
    "start": "424466",
    "end": "431816"
  },
  {
    "text": "Okay.",
    "start": "433433",
    "end": "435166"
  },
  {
    "text": "Sorry schema.literal, query or comment, that was right.",
    "start": "440716",
    "end": "446883"
  },
  {
    "text": "It's complaining because we need to provide here and now you can see that the",
    "start": "448216",
    "end": "454566"
  },
  {
    "text": "schema, this is the type we want. And we need to attach that into the",
    "start": "454566",
    "end": "461965"
  },
  {
    "text": "aggregated methods of fields saying that message type can be one of those.",
    "start": "461966",
    "end": "468550"
  },
  {
    "text": "But we leave that as it is right now, the message kind, sorry, not type, we",
    "start": "469983",
    "end": "478733"
  },
  {
    "text": "will see that if we go back to our scratch and try to say, okay, I will",
    "start": "478733",
    "end": "485133"
  },
  {
    "text": "provide you a message. Message ID, message one, I will provide",
    "start": "485133",
    "end": "490866"
  },
  {
    "text": "you an aggregate ID which is product abc. I will provide you also a new name which",
    "start": "490866",
    "end": "500483"
  },
  {
    "text": "is, this is the new product name.",
    "start": "500483",
    "end": "505966"
  },
  {
    "text": "We will see that it's still complaining. It's still complaining because we have the message kind in here.",
    "start": "506366",
    "end": "512533"
  },
  {
    "text": "But as we said, we want to have only this",
    "start": "513550",
    "end": "519565"
  },
  {
    "text": "type, on the actual type, we don't want to provide it. So we can try something like, I want to",
    "start": "519566",
    "end": "533883"
  },
  {
    "text": "use message kind in",
    "start": "533883",
    "end": "540850"
  },
  {
    "text": "schema.optional tool required.",
    "start": "540850",
    "end": "548082"
  },
  {
    "text": "We can try this and we will say that we",
    "start": "548566",
    "end": "553633"
  },
  {
    "text": "don't want that into the encoded version, so it will be never.",
    "start": "553633",
    "end": "557966"
  },
  {
    "text": "And it will be at runtime type if there",
    "start": "560550",
    "end": "566233"
  },
  {
    "text": "are query of comment. And now we need to provide the function",
    "start": "566233",
    "end": "574282"
  },
  {
    "text": "that will basically encode and decode.",
    "start": "574283",
    "end": "578933"
  },
  {
    "text": "And we need to encode either to query or comment and decode to never.",
    "start": "579449",
    "end": "586533"
  },
  {
    "text": "So the encode is very easy and will be just option.none. We need",
    "start": "587550",
    "end": "596383"
  },
  {
    "text": "to import option from effect.",
    "start": "596383",
    "end": "599533"
  },
  {
    "text": "Everything as option from effect,",
    "start": "605899",
    "end": "610333"
  },
  {
    "text": "option. And now we need also to",
    "start": "612366",
    "end": "619766"
  },
  {
    "text": "provide the decode function. And here in the decode function, we will",
    "start": "619766",
    "end": "626665"
  },
  {
    "text": "basically need to return either query or command.",
    "start": "626666",
    "end": "630316"
  },
  {
    "text": "So let's say that we want to just try this and return comment. Okay, we see that this is the actual type",
    "start": "633649",
    "end": "643216"
  },
  {
    "text": "signature. We want to insert into our message.",
    "start": "643216",
    "end": "648966"
  },
  {
    "text": "We get a metadata fields. It's not this anymore, but it's this. Okay.",
    "start": "649466",
    "end": "655583"
  },
  {
    "text": "This is the new definition of the message kind. So the older one where we tried is not right anymore.",
    "start": "657683",
    "end": "664733"
  },
  {
    "text": "Okay, let's go back and see our resulting API. Okay, we still have a problem because it's saying that he",
    "start": "664733",
    "end": "674366"
  },
  {
    "text": "wants again the message kind. Let's check out.",
    "start": "674366",
    "end": "680532"
  },
  {
    "text": "Message kind never. Perfect.",
    "start": "710550",
    "end": "712649"
  },
  {
    "text": "So. What are you missing in here?",
    "start": "717899",
    "end": "724550"
  },
  {
    "text": "Oh, right. It's oh, yeah, I see. I see.",
    "start": "728516",
    "end": "735533"
  },
  {
    "text": "The thing it's complaining is that I want to attach that on the runtime type.",
    "start": "736566",
    "end": "742833"
  },
  {
    "text": "But that will break. Yeah. Because the problem is that the make",
    "start": "749449",
    "end": "754866"
  },
  {
    "text": "signature uses the runtime type.",
    "start": "754866",
    "end": "757833"
  },
  {
    "text": "So, yeah, we cannot use this way.",
    "start": "760583",
    "end": "763133"
  },
  {
    "text": "We should find another way to do that.",
    "start": "768333",
    "end": "770550"
  },
  {
    "text": "But, yeah, let's try another way. Let's maybe try to do something like.",
    "start": "776066",
    "end": "782533"
  },
  {
    "text": "Option dot to require that will put this,",
    "start": "783550",
    "end": "789233"
  },
  {
    "text": "but this won't work because now we are obligated to put the message kind in here.",
    "start": "789466",
    "end": "795050"
  },
  {
    "text": "But I don't want to put the message kind in here.",
    "start": "795533",
    "end": "799533"
  },
  {
    "text": "So another suggestion that Maxwell said",
    "start": "800550",
    "end": "806083"
  },
  {
    "text": "is that maybe we don't care about having type information about which are the",
    "start": "806083",
    "end": "813149"
  },
  {
    "text": "queries and which are the comments. Maybe we just want to put an annotation on the schema saying which kind of",
    "start": "813149",
    "end": "820933"
  },
  {
    "text": "message is and then use a custom interpreter to extract that.",
    "start": "820933",
    "end": "826532"
  },
  {
    "text": "So let's try that approach instead. So we want to put any additional types in here.",
    "start": "827550",
    "end": "835116"
  },
  {
    "text": "OK. So now we are back to",
    "start": "835116",
    "end": "841383"
  },
  {
    "text": "the previous implementation. We can now message is perfectly fine. And",
    "start": "841383",
    "end": "850233"
  },
  {
    "text": "now we need to change and we need to",
    "start": "850233",
    "end": "856949"
  },
  {
    "text": "define in here maybe things like export const.",
    "start": "856949",
    "end": "864533"
  },
  {
    "text": "aggregate message type annotation.",
    "start": "864533",
    "end": "872283"
  },
  {
    "text": "type ID equals symbol dot for",
    "start": "874383",
    "end": "879933"
  },
  {
    "text": "and for now we can use this. OK, so we are creating a unique symbol",
    "start": "879933",
    "end": "886665"
  },
  {
    "text": "and then we want to create a function that touches. An annotation to any given schema.",
    "start": "886666",
    "end": "893550"
  },
  {
    "text": "So let's say that export function. As query.",
    "start": "896183",
    "end": "901433"
  },
  {
    "text": "That takes in a.",
    "start": "905949",
    "end": "907449"
  },
  {
    "text": "Or even better. They extend schema dot schema dot any.",
    "start": "918050",
    "end": "925415"
  },
  {
    "text": "Or all that is the basically that means that we want a to be any schema that can",
    "start": "926366",
    "end": "932716"
  },
  {
    "text": "be defined by a schema. So the schema will be off the A and we will return back a.",
    "start": "932716",
    "end": "938133"
  },
  {
    "text": "But return schema dot annotations. And here we can say something like we",
    "start": "938816",
    "end": "947050"
  },
  {
    "text": "want to attach these agree. And say that the type is query.",
    "start": "947050",
    "end": "953782"
  },
  {
    "text": "OK. Here here. What are you complaining about.",
    "start": "958516",
    "end": "963766"
  },
  {
    "text": "And we realize that it's not something that any skin. We may be. Oh yeah.",
    "start": "966083",
    "end": "970449"
  },
  {
    "text": "Schema schema. Oh yeah. Oh I see. I see. I see. Yeah. Yeah. Yeah. That's fine.",
    "start": "971816",
    "end": "977466"
  },
  {
    "text": "We can also use return schema",
    "start": "978550",
    "end": "982266"
  },
  {
    "text": "And use. These annotations.",
    "start": "989116",
    "end": "994250"
  },
  {
    "text": "Yep. And attach those to our schema.",
    "start": "999550",
    "end": "1005416"
  },
  {
    "text": "OK that works. Yeah. OK. And now we can do the same thing.",
    "start": "1006483",
    "end": "1013216"
  },
  {
    "text": "As command. And we'll say that this type is command",
    "start": "1015166",
    "end": "1022449"
  },
  {
    "text": "Perfect. And now we want to create functions.",
    "start": "1024383",
    "end": "1028350"
  },
  {
    "text": "That will basically inspect the annotations and.",
    "start": "1029750",
    "end": "1034316"
  },
  {
    "text": "And see if those are queries or comments. It's possible to still.",
    "start": "1038399",
    "end": "1044532"
  },
  {
    "text": "Is query. And I'll say that a.",
    "start": "1045149",
    "end": "1051033"
  },
  {
    "text": "extends",
    "start": "1051583",
    "end": "1052033"
  },
  {
    "text": "We can start by say. Schema.",
    "start": "1064050",
    "end": "1067350"
  },
  {
    "text": "get annotation",
    "start": "1069149",
    "end": "1070550"
  },
  {
    "text": "All right. We need to import everything as AST",
    "start": "1079233",
    "end": "1086466"
  },
  {
    "text": "From effect schema AST And that is because AST",
    "start": "1086466",
    "end": "1093250"
  },
  {
    "text": "annotation Here we have the functions to get all the annotations",
    "start": "1095033",
    "end": "1100533"
  },
  {
    "text": "and we can say get annotation or aggregate.",
    "start": "1100550",
    "end": "1105949"
  },
  {
    "text": "message From what schema. He is schema.",
    "start": "1106233",
    "end": "1111482"
  },
  {
    "text": "AST perfect and we'll return an option.",
    "start": "1112300",
    "end": "1116750"
  },
  {
    "text": "And we then will say. Dot pipe.",
    "start": "1119416",
    "end": "1123833"
  },
  {
    "text": "Option. Is some. We need to import option.",
    "start": "1125949",
    "end": "1135183"
  },
  {
    "text": "Obviously.",
    "start": "1135533",
    "end": "1135732"
  },
  {
    "text": "effect Option. Option is some.",
    "start": "1142183",
    "end": "1147816"
  },
  {
    "text": "These words are a Boolean. Whenever the annotation is present or not.",
    "start": "1148233",
    "end": "1154183"
  },
  {
    "text": "but maybe. What we also want to do is saying that.",
    "start": "1156266",
    "end": "1160983"
  },
  {
    "text": "In the option dot flatMap",
    "start": "1162449",
    "end": "1166949"
  },
  {
    "text": "And say it's the value.",
    "start": "1167983",
    "end": "1169366"
  },
  {
    "text": "Well if the current equals query.",
    "start": "1175250",
    "end": "1180149"
  },
  {
    "text": "And we will see. Option dot some.",
    "start": "1181633",
    "end": "1185250"
  },
  {
    "text": "Or maybe. We will say.",
    "start": "1190183",
    "end": "1192132"
  },
  {
    "text": "OK. So if the current is query.",
    "start": "1197850",
    "end": "1200516"
  },
  {
    "text": "OK. So this function. Will. Get the annotation from the schema AST",
    "start": "1213166",
    "end": "1218949"
  },
  {
    "text": "And. Check if it's a query. If it's a query we will return true. And.",
    "start": "1219500",
    "end": "1224148"
  },
  {
    "text": "If not. We will return the same thing. Same is command",
    "start": "1224633",
    "end": "1230433"
  },
  {
    "text": "And we will leave a type command. OK.",
    "start": "1234416",
    "end": "1239516"
  },
  {
    "text": "Let's try to do some tests. Maybe.",
    "start": "1240750",
    "end": "1244216"
  },
  {
    "text": "But before we need to check this aggregate root We will have ID.",
    "start": "1245983",
    "end": "1251333"
  },
  {
    "text": "Message root. Message ID.",
    "start": "1251816",
    "end": "1254533"
  },
  {
    "text": "And. I'm thinking that. Maybe we instead of.",
    "start": "1257066",
    "end": "1261850"
  },
  {
    "text": "Just spreading. Thing in here. Things in here. We can maybe do something like.",
    "start": "1262416",
    "end": "1268049"
  },
  {
    "text": "Changing a little. And say. Things like.",
    "start": "1269166",
    "end": "1273516"
  },
  {
    "text": "Product. aggregate. Dot query.",
    "start": "1275116",
    "end": "1278433"
  },
  {
    "text": "OK. And this will return the query payloads.",
    "start": "1283566",
    "end": "1288216"
  },
  {
    "text": "Yeah. I like this more. Yeah. I prefer this indeed.",
    "start": "1290616",
    "end": "1296533"
  },
  {
    "text": "Yeah. So. Let's try to.",
    "start": "1296533",
    "end": "1301466"
  },
  {
    "text": "Change product name. This object will be a command. Not query.",
    "start": "1303216",
    "end": "1308016"
  },
  {
    "text": "But let's first. Fix our examples. So we have something to try.",
    "start": "1309966",
    "end": "1315966"
  },
  {
    "text": "So this rename symbol. They will be change product name.",
    "start": "1316816",
    "end": "1321916"
  },
  {
    "text": "OK. That will be a command. It will take the new name. We will also have other things.",
    "start": "1323816",
    "end": "1331683"
  },
  {
    "text": "Such as. We don't need those anymore. OK.",
    "start": "1335083",
    "end": "1339632"
  },
  {
    "text": "And we can do things like. get.",
    "start": "1340216",
    "end": "1345132"
  },
  {
    "text": "Product. Name. Or maybe read product name.",
    "start": "1347366",
    "end": "1354466"
  },
  {
    "text": "This will be a query. And won't have any parameter.",
    "start": "1360716",
    "end": "1366733"
  },
  {
    "text": "So these are the API I'm trying to achieve. And let's see.",
    "start": "1368149",
    "end": "1373750"
  },
  {
    "text": "Here now in aggregate route. This is aggregate root made out of fields.",
    "start": "1375350",
    "end": "1380583"
  },
  {
    "text": "But instead of returning made out of fields. We can do something like.",
    "start": "1381566",
    "end": "1386683"
  },
  {
    "text": "Here we need to create query. Which will be a function.",
    "start": "1388066",
    "end": "1393083"
  },
  {
    "text": "That even some basic field. Some basic payload.",
    "start": "1394966",
    "end": "1398083"
  },
  {
    "text": "Will basically return the in route. For my payload.",
    "start": "1407833",
    "end": "1412833"
  },
  {
    "text": "Will basically return. The same thing.",
    "start": "1413616",
    "end": "1417533"
  },
  {
    "text": "So payload. And.",
    "start": "1420883",
    "end": "1424050"
  },
  {
    "text": "The additional method is a fields. Yeah. I can see this working.",
    "start": "1426350",
    "end": "1431966"
  },
  {
    "text": "Yeah. And the same goes for. command.",
    "start": "1431966",
    "end": "1436266"
  },
  {
    "text": "Query and command. Yeah.",
    "start": "1437866",
    "end": "1441550"
  },
  {
    "text": "That can be a same. Yeah. Right now obviously is complaining because we need to define that.",
    "start": "1443033",
    "end": "1448233"
  },
  {
    "text": "But if we now check this. Yeah.",
    "start": "1448816",
    "end": "1452633"
  },
  {
    "text": "And let's. See. Change. Product name.",
    "start": "1454316",
    "end": "1458766"
  },
  {
    "text": "dot Make. Just to see how the",
    "start": "1459550",
    "end": "1465016"
  },
  {
    "text": "developer experience is. Oh yeah. That's nice. Yeah. Yeah. Yeah. Yeah. dot encode it.",
    "start": "1465016",
    "end": "1471649"
  },
  {
    "text": "Yeah. Look at this. Oh yeah. Definitely.",
    "start": "1473566",
    "end": "1478266"
  },
  {
    "text": "Okay. So now we need to actually implement those. So.",
    "start": "1479216",
    "end": "1483866"
  },
  {
    "text": "Those are basically two function. That can be implemented.",
    "start": "1485333",
    "end": "1489549"
  },
  {
    "text": "By saying. Basic payload.",
    "start": "1491550",
    "end": "1495666"
  },
  {
    "text": "equals payload. And basic payload.",
    "start": "1498483",
    "end": "1502483"
  },
  {
    "text": "Like payload. Extends. Schema.",
    "start": "1504016",
    "end": "1508716"
  },
  {
    "text": "Dot. struct Dot. Fields",
    "start": "1510266",
    "end": "1511850"
  },
  {
    "text": "Okay. And we will return an object. That will extend the basic payload.",
    "start": "1515300",
    "end": "1524166"
  },
  {
    "text": "Here. Here. Okay. And this is the function that will create our query.",
    "start": "1525466",
    "end": "1533433"
  },
  {
    "text": "And this can we name maybe attach meta data payload fields.",
    "start": "1536600",
    "end": "1545516"
  },
  {
    "text": "Yep. And now this is attach meta data payload fields.",
    "start": "1546550",
    "end": "1552250"
  },
  {
    "text": "And the same goes for command attach meta data payload fields. Yep.",
    "start": "1552583",
    "end": "1556783"
  },
  {
    "text": "Okay. That works. And and and let's see here.",
    "start": "1558500",
    "end": "1565016"
  },
  {
    "text": "Okay. Perfect. No complaining about types. Perfect. That's what we want.",
    "start": "1565666",
    "end": "1571350"
  },
  {
    "text": "And if we look at the encoded. That's perfect. Okay. The only thing that we are missing now is",
    "start": "1572050",
    "end": "1581483"
  },
  {
    "text": "to actually attach somewhere that is the that",
    "start": "1581483",
    "end": "1587416"
  },
  {
    "text": "says if if the request is a query or a command.",
    "start": "1587550",
    "end": "1598833"
  },
  {
    "text": "And we could do that theoretically in here.",
    "start": "1601116",
    "end": "1607666"
  },
  {
    "text": "So let's try to maybe import everything as aggregate message",
    "start": "1608449",
    "end": "1614966"
  },
  {
    "text": "from aggregate message.",
    "start": "1614966",
    "end": "1619632"
  },
  {
    "text": "We could attach that dot pipe. aggregate message as command.",
    "start": "1621566",
    "end": "1629966"
  },
  {
    "text": "But the thing is that if we do that like this. We break type for it because type script",
    "start": "1631133",
    "end": "1638216"
  },
  {
    "text": "now thinks that the type recursively reference itself. And that's always fun.",
    "start": "1638216",
    "end": "1644550"
  },
  {
    "text": "So we cannot do that. We need to attach that annotation somewhere else.",
    "start": "1644866",
    "end": "1649250"
  },
  {
    "text": "And we have a payload. We attach things into the payload.",
    "start": "1651333",
    "end": "1656332"
  },
  {
    "text": "So maybe maybe we can decide that on one",
    "start": "1657800",
    "end": "1664183"
  },
  {
    "text": "field of the payload that we attach. For example we attach an ID field.",
    "start": "1664183",
    "end": "1670533"
  },
  {
    "text": "We could say that on the ID fields we also attach the annotation that says if",
    "start": "1671550",
    "end": "1683333"
  },
  {
    "text": "the message is a query or a command.",
    "start": "1683333",
    "end": "1687083"
  },
  {
    "text": "So let's try that. So here we will say now that maybe",
    "start": "1688716",
    "end": "1699733"
  },
  {
    "text": "instead of putting that in here.",
    "start": "1699733",
    "end": "1702750"
  },
  {
    "text": "this as command as query. So here we can now go back to our",
    "start": "1704783",
    "end": "1714433"
  },
  {
    "text": "aggregate root and define const query equals.",
    "start": "1714433",
    "end": "1721166"
  },
  {
    "text": "I'm not sure if we want maybe to do that. Maybe we can do that like this.",
    "start": "1725383",
    "end": "1733233"
  },
  {
    "text": "Let's see. message kind in the aggregate message.",
    "start": "1733550",
    "end": "1743550"
  },
  {
    "text": "Message. Aggregate message kind.",
    "start": "1744583",
    "end": "1751050"
  },
  {
    "text": "Yep. And then aggregate message kind.",
    "start": "1751766",
    "end": "1755866"
  },
  {
    "text": "We will use that to create function that given the payload. So here now we need first to define.",
    "start": "1757583",
    "end": "1768366"
  },
  {
    "text": "We need to import the aggregate message module from here. So import everything as these",
    "start": "1769816",
    "end": "1777833"
  },
  {
    "text": "from this aggregate message. And now we have it.",
    "start": "1777833",
    "end": "1783483"
  },
  {
    "text": "And then in here we can say. Export.",
    "start": "1784083",
    "end": "1788466"
  },
  {
    "text": "type Arrogate message kind that can leave that a query.",
    "start": "1790033",
    "end": "1795132"
  },
  {
    "text": "Or a command.",
    "start": "1796883",
    "end": "1797683"
  },
  {
    "text": "And then we can create like export function.",
    "start": "1803149",
    "end": "1807533"
  },
  {
    "text": "With aggregate message kind.",
    "start": "1808550",
    "end": "1814166"
  },
  {
    "text": "And we can just copy this. Here.",
    "start": "1814750",
    "end": "1819916"
  },
  {
    "text": "And saying. message kind can be of type aggregate message kind.",
    "start": "1820966",
    "end": "1827233"
  },
  {
    "text": "And then we return. Function.",
    "start": "1827683",
    "end": "1831083"
  },
  {
    "text": "Is just schema.annotation. Aggregate message kind.",
    "start": "1835283",
    "end": "1840166"
  },
  {
    "text": "Can be of type message kind. And we should be off and running.",
    "start": "1841733",
    "end": "1846933"
  },
  {
    "text": "Yeah. Perfect. As command is where we don't care about that.",
    "start": "1847250",
    "end": "1851915"
  },
  {
    "text": "Yeah. Maybe we can also say export function.",
    "start": "1852533",
    "end": "1857250"
  },
  {
    "text": "Get. aggregate. Message kind.",
    "start": "1858316",
    "end": "1864148"
  },
  {
    "text": "From schema. Okay. That is this function.",
    "start": "1866633",
    "end": "1872983"
  },
  {
    "text": "Okay. And this will return an option.",
    "start": "1877649",
    "end": "1881966"
  },
  {
    "text": "Or get an annotation. And the kind of the annotation is now aggregate message kind.",
    "start": "1884550",
    "end": "1890666"
  },
  {
    "text": "Yeah. So now that can be an aggregate message kind. Perfect.",
    "start": "1891050",
    "end": "1894783"
  },
  {
    "text": "And this will just return the annotation.",
    "start": "1896149",
    "end": "1900533"
  },
  {
    "text": "Perfect. Okay. That's perfect. And this function basically extract the",
    "start": "1903350",
    "end": "1911449"
  },
  {
    "text": "annotation from the schema. So get an error from schema annotation.",
    "start": "1911449",
    "end": "1915983"
  },
  {
    "text": "And then as with aggregate message kind annotation",
    "start": "1916550",
    "end": "1921533"
  },
  {
    "text": "Perfect. And the option model isn't needed anymore. We can go here and now here we also say",
    "start": "1923449",
    "end": "1932750"
  },
  {
    "text": ".pipe aggregate message with aggregate message kind.",
    "start": "1932750",
    "end": "1939083"
  },
  {
    "text": "And message kind is this. Okay. So this is of type query.",
    "start": "1939850",
    "end": "1948649"
  },
  {
    "text": "And this is of type comment. Perfect. Perfect.",
    "start": "1949383",
    "end": "1954333"
  },
  {
    "text": "And now that we attach the annotation into our schema.",
    "start": "1955583",
    "end": "1961716"
  },
  {
    "text": "We should be up and running. Yep.",
    "start": "1963199",
    "end": "1966533"
  },
  {
    "text": "So let's write maybe some tests to see how things work.",
    "start": "1968383",
    "end": "1973666"
  },
  {
    "text": "Let's go to our dummy tests. Maybe we can use the scratch.",
    "start": "1974899",
    "end": "1980266"
  },
  {
    "text": "And here. And as tests.",
    "start": "1982066",
    "end": "1985466"
  },
  {
    "text": "And here. We'll do like this.",
    "start": "1987366",
    "end": "1993549"
  },
  {
    "text": "Okay. Yeah. Not from aggregate root.",
    "start": "1996666",
    "end": "2002949"
  },
  {
    "text": "And here is at template domain. Yeah. We need to change the name.",
    "start": "2003216",
    "end": "2008716"
  },
  {
    "text": "Yeah. domain. Yep. I don't want to type in one of these.",
    "start": "2011550",
    "end": "2016166"
  },
  {
    "text": "aggregate message. Okay. Aggregate root. Sorry.",
    "start": "2017550",
    "end": "2021732"
  },
  {
    "text": "Okay. Maybe we can also change those.",
    "start": "2023716",
    "end": "2031850"
  },
  {
    "text": "Let's see. Yeah. Okay.",
    "start": "2032383",
    "end": "2036549"
  },
  {
    "text": "These are the things that are sketched out by the create effect app.",
    "start": "2037750",
    "end": "2043065"
  },
  {
    "text": "Maybe instead of path template. That's it.",
    "start": "2049716",
    "end": "2054333"
  },
  {
    "text": "A template. Let me read just in the JSON files.",
    "start": "2055550",
    "end": "2060465"
  },
  {
    "text": "Template domain template. Template domain template server.",
    "start": "2066933",
    "end": "2072033"
  },
  {
    "text": "Yep. And I think that all of those can be replaced with.",
    "start": "2072949",
    "end": "2077550"
  },
  {
    "text": "rsp",
    "start": "2079183",
    "end": "2079550"
  },
  {
    "text": "Yep. Okay. And let's see other kind of.",
    "start": "2085550",
    "end": "2092850"
  },
  {
    "text": "PMP lock. Okay. We will do that later. Yeah. That's correct.",
    "start": "2093816",
    "end": "2099516"
  },
  {
    "text": "Yeah. That's correct. Yep. That's correct. Yep. So let's replace everywhere.",
    "start": "2101866",
    "end": "2107133"
  },
  {
    "text": "Okay. And then. We will trigger again. pnpm install terminal terminal terminal.",
    "start": "2109266",
    "end": "2116616"
  },
  {
    "text": "Yep. pnpm install",
    "start": "2116616",
    "end": "2120050"
  },
  {
    "text": "Okay. Everything up to date. And now that everything is up to date.",
    "start": "2122683",
    "end": "2131066"
  },
  {
    "text": "We can go back to our. Here. Oh, what does.",
    "start": "2132783",
    "end": "2137850"
  },
  {
    "text": "Okay. Let's see now.",
    "start": "2138433",
    "end": "2144599"
  },
  {
    "text": "Okay. Why don't you. fail to load Fail to load",
    "start": "2156266",
    "end": "2162183"
  },
  {
    "text": "Your URL Oh. domain aggregate. Yeah.",
    "start": "2162550",
    "end": "2167283"
  },
  {
    "text": "Yeah. I see why. We need to recreate.",
    "start": "2167766",
    "end": "2172116"
  },
  {
    "text": "Our entire modules. And there should be already into the.",
    "start": "2173550",
    "end": "2178916"
  },
  {
    "text": "Clean. Yeah. So we can run. pnpm clean.",
    "start": "2179966",
    "end": "2183466"
  },
  {
    "text": "Let's also update our effect dependencies. Maybe.",
    "start": "2191616",
    "end": "2196216"
  },
  {
    "text": "I think that they are listed already listed everything as latest. Perfect. So maybe we can just.",
    "start": "2201550",
    "end": "2206683"
  },
  {
    "text": "We need. Our pnpm lock. Yeah. And let's start again.",
    "start": "2207233",
    "end": "2212366"
  },
  {
    "text": "So we update everything. Okay.",
    "start": "2214350",
    "end": "2218033"
  },
  {
    "text": "Already up to date. Perfect. And here. We should.",
    "start": "2219433",
    "end": "2224515"
  },
  {
    "text": "Other packages. You know.",
    "start": "2228850",
    "end": "2230166"
  },
  {
    "text": "Now let's try to run again the tests.",
    "start": "2238449",
    "end": "2240349"
  },
  {
    "text": "Why don't you like me. Again.",
    "start": "2250333",
    "end": "2254349"
  },
  {
    "text": "So let me check.",
    "start": "2255699",
    "end": "2259666"
  },
  {
    "text": "Let me check again.",
    "start": "2260899",
    "end": "2262283"
  },
  {
    "text": "let's test again. Well yeah. Okay. Now it works.",
    "start": "2287133",
    "end": "2291733"
  },
  {
    "text": "Okay. So. Let's see. It should.",
    "start": "2292416",
    "end": "2297215"
  },
  {
    "text": "Should check the type. Of the message.",
    "start": "2305699",
    "end": "2308583"
  },
  {
    "text": "And we expect.",
    "start": "2310949",
    "end": "2312550"
  },
  {
    "text": "That. We import. The aggregates message.",
    "start": "2316716",
    "end": "2322016"
  },
  {
    "text": "Module. In here.",
    "start": "2323250",
    "end": "2326783"
  },
  {
    "text": "and we expect. Const is query.",
    "start": "2328616",
    "end": "2333550"
  },
  {
    "text": "That. aggregate message. Get aggregate message kind from schema and.",
    "start": "2335316",
    "end": "2341533"
  },
  {
    "text": "Read product name. These words are an option.",
    "start": "2343033",
    "end": "2348683"
  },
  {
    "text": "So we expect.",
    "start": "2350133",
    "end": "2351383"
  },
  {
    "text": "Let's try it out. And it won't. And that's expected.",
    "start": "2365233",
    "end": "2370549"
  },
  {
    "text": "Because if we take a look. We put a break point in here",
    "start": "2371883",
    "end": "2378333"
  },
  {
    "text": "Okay. If we take a look at this. Object and we take a look.",
    "start": "2379416",
    "end": "2385550"
  },
  {
    "text": "At the AST So if we say something like.",
    "start": "2385983",
    "end": "2392516"
  },
  {
    "text": "read. Product name. AST",
    "start": "2393733",
    "end": "2397866"
  },
  {
    "text": "This is an object. And in its annotation.",
    "start": "2399149",
    "end": "2404583"
  },
  {
    "text": "We won't find the our customer. Notation. And that is because.",
    "start": "2405083",
    "end": "2411083"
  },
  {
    "text": "They are into our. From.",
    "start": "2412583",
    "end": "2415883"
  },
  {
    "text": "annotation Here we have a read product name encoded side. Perfect.",
    "start": "2418233",
    "end": "2422733"
  },
  {
    "text": "We have property signatures. Here we have an ID.",
    "start": "2423416",
    "end": "2428216"
  },
  {
    "text": "And in annotations. Here. We.",
    "start": "2429216",
    "end": "2433616"
  },
  {
    "text": "Should have. To.",
    "start": "2435050",
    "end": "2437366"
  },
  {
    "text": "Should have. ID Type refinement.",
    "start": "2440550",
    "end": "2445633"
  },
  {
    "text": "Oh yeah. It's refinement. Yeah. annotations.",
    "start": "2448716",
    "end": "2451166"
  },
  {
    "text": "Here it is. Yeah. Here's our annotation. Yeah. So we need to traverse the entire schema.",
    "start": "2453933",
    "end": "2459516"
  },
  {
    "text": "To get up to. These. Annotation.",
    "start": "2459550",
    "end": "2464483"
  },
  {
    "text": "So. Let's try to build a function that does exactly that.",
    "start": "2466133",
    "end": "2470182"
  },
  {
    "text": "So. We will keep that. Get aggregate methods kind from schema annotation.",
    "start": "2471366",
    "end": "2476866"
  },
  {
    "text": "And then we will say something like. Export function.",
    "start": "2477766",
    "end": "2481416"
  },
  {
    "text": "Get aggregate. message kind And we will take a schema as well.",
    "start": "2483733",
    "end": "2490733"
  },
  {
    "text": "But. From AST maybe. AST. And we'll say that we",
    "start": "2491433",
    "end": "2498250"
  },
  {
    "text": "will take in an AST. Okay.",
    "start": "2498250",
    "end": "2501916"
  },
  {
    "text": "And we will say that.",
    "start": "2504100",
    "end": "2505516"
  },
  {
    "text": "We will try first to look into the AST of this member. And say that.",
    "start": "2514783",
    "end": "2519216"
  },
  {
    "text": "Const Cost is query.",
    "start": "2519883",
    "end": "2525033"
  },
  {
    "text": "Or maybe message. Kind. Equals AST. Get annotation.",
    "start": "2526416",
    "end": "2531432"
  },
  {
    "text": "It's the same line that we are. Here. In this kind of annotation type ID.",
    "start": "2532166",
    "end": "2538149"
  },
  {
    "text": "We pass AST. That's perfect.",
    "start": "2538583",
    "end": "2541983"
  },
  {
    "text": "Okay. This will return an option. Okay. Perfect. And we will say that.",
    "start": "2543866",
    "end": "2553316"
  },
  {
    "text": "If. Message kind.",
    "start": "2554550",
    "end": "2558716"
  },
  {
    "text": "If we found an annotation. We will just early exit. So we will say if.",
    "start": "2561550",
    "end": "2567966"
  },
  {
    "text": "Option is We need to import option.",
    "start": "2568949",
    "end": "2573416"
  },
  {
    "text": "Import everything as option from effect.",
    "start": "2574216",
    "end": "2578383"
  },
  {
    "text": "From effect option. And we will see that if option is some",
    "start": "2580183",
    "end": "2586149"
  },
  {
    "text": "Message kind. We will return message kind.",
    "start": "2588383",
    "end": "2592550"
  },
  {
    "text": "Otherwise we need to switch based on the AST.tag",
    "start": "2593699",
    "end": "2600416"
  },
  {
    "text": "And here we need to have some kind of logic in here.",
    "start": "2601866",
    "end": "2608183"
  },
  {
    "text": "We will say that in case we found an any keyword.",
    "start": "2609050",
    "end": "2614083"
  },
  {
    "text": "A big int keyword. A boolean keyword.",
    "start": "2615533",
    "end": "2619750"
  },
  {
    "text": "We will return option.none Because we attached",
    "start": "2621083",
    "end": "2627233"
  },
  {
    "text": "that annotation to UUID. And so if we find one of those kind of",
    "start": "2627233",
    "end": "2635166"
  },
  {
    "text": "tag we are failing. There are many others like enums.",
    "start": "2635166",
    "end": "2641765"
  },
  {
    "text": "literals And et cetera",
    "start": "2643583",
    "end": "2650283"
  },
  {
    "text": "Number, keyword, etc. Maybe we can write the other case which is case.",
    "start": "2651116",
    "end": "2656816"
  },
  {
    "text": "It is the type literal I think.",
    "start": "2658550",
    "end": "2662216"
  },
  {
    "text": "And AST. And if we have a tag.",
    "start": "2664333",
    "end": "2671533"
  },
  {
    "text": "And sorry ID. in AST dot property signatures.",
    "start": "2672600",
    "end": "2680349"
  },
  {
    "text": "This should be. Oh no it's an array. Yeah. Okay. So it's an array.",
    "start": "2680883",
    "end": "2685083"
  },
  {
    "text": "I thought it was. Yeah. So if it's an array we will basically do return.",
    "start": "2685983",
    "end": "2692233"
  },
  {
    "text": "Import everything as array from effect array.",
    "start": "2694300",
    "end": "2700550"
  },
  {
    "text": "Array find first.",
    "start": "2703699",
    "end": "2706666"
  },
  {
    "text": "And this keeps. Yeah. It's not find first.",
    "start": "2711000",
    "end": "2716033"
  },
  {
    "text": "it's options.",
    "start": "2718616",
    "end": "2721533"
  },
  {
    "text": "We are filter I think.",
    "start": "2727800",
    "end": "2731966"
  },
  {
    "text": "Yeah that works for only one. Yeah we need to basically look up ",
    "start": "2733766",
    "end": "2739333"
  },
  {
    "text": "for a function that   given a list of members",
    "start": "2739333",
    "end": "2744850"
  },
  {
    "text": "of an array we will find the first that is.",
    "start": "2744850",
    "end": "2750983"
  },
  {
    "text": "Sums. So let's do let's go quickly to the Effect APIs.",
    "start": "2752966",
    "end": "2758666"
  },
  {
    "text": "Okay let's go to docs. Let's go to API reference.",
    "start": "2763533",
    "end": "2769316"
  },
  {
    "text": "Yeah.",
    "start": "2772883",
    "end": "2773083"
  },
  {
    "text": "API reference. Oh yeah they have been moved now.",
    "start": "2780166",
    "end": "2784949"
  },
  {
    "text": "Yeah.",
    "start": "2785566",
    "end": "2785765"
  },
  {
    "text": "Array.",
    "start": "2798483",
    "end": "2798833"
  },
  {
    "text": "Where that may be. Oh API reference. Yeah. Effect. Okay so for the array.",
    "start": "2806216",
    "end": "2812283"
  },
  {
    "text": "Or maybe the option module. Option. Option. Option. Option. Option. Option.",
    "start": "2814366",
    "end": "2819416"
  },
  {
    "text": "Yeah. We should have all. Yeah.",
    "start": "2823283",
    "end": "2825932"
  },
  {
    "text": "Yeah. We also have option.",
    "start": "2836233",
    "end": "2840766"
  },
  {
    "text": "Yeah. So let's try to use",
    "start": "2841283",
    "end": "2848550"
  },
  {
    "text": "let's do something easier. Let's say something like this.",
    "start": "2857533",
    "end": "2860850"
  },
  {
    "text": "for",
    "start": "2863716",
    "end": "2864783"
  },
  {
    "text": "And we'll say that if option",
    "start": "2894800",
    "end": "2899033"
  },
  {
    "text": "is some \"result\" We will basically return",
    "start": "2900100",
    "end": "2904866"
  },
  {
    "text": "\"result\" Otherwise, we will return \"option.none\"",
    "start": "2905183",
    "end": "2911866"
  },
  {
    "text": "Ok, so what we are doing in here",
    "start": "2912783",
    "end": "2915316"
  },
  {
    "text": "Oh, yeah, this is I will say option",
    "start": "2921050",
    "end": "2924682"
  },
  {
    "text": "Yep, that's fine We also need to",
    "start": "2935149",
    "end": "2940916"
  },
  {
    "text": "in case we don't manage that type default",
    "start": "2942033",
    "end": "2945416"
  },
  {
    "text": "Now it's fine, it's not complaining anymore, we don't need the array modules for now Yep, so this function",
    "start": "2947399",
    "end": "2953533"
  },
  {
    "text": "will traverse this schema AST and in case we find the type literal,",
    "start": "2953533",
    "end": "2958416"
  },
  {
    "text": "we'll go through the property signature and find the one we want",
    "start": "2959066",
    "end": "2963916"
  },
  {
    "text": "If the one we want has that, we are fine So, let's go back and see what kind of",
    "start": "2964183",
    "end": "2970515"
  },
  {
    "text": "things we need to manage We need to manage also the transformation",
    "start": "2970516",
    "end": "2977983"
  },
  {
    "text": "and the transformation we need to do",
    "start": "2979183",
    "end": "2984366"
  },
  {
    "text": "I think the same thing, both on the from",
    "start": "2984366",
    "end": "2989466"
  },
  {
    "text": "and the to type",
    "start": "2989466",
    "end": "2992966"
  },
  {
    "text": "Ok, so case case",
    "start": "2995183",
    "end": "2999983"
  },
  {
    "text": "transformation We will do return and here we can do something like",
    "start": "3001666",
    "end": "3008783"
  },
  {
    "text": "get aggregate from AST AST.from",
    "start": "3009183",
    "end": "3015250"
  },
  {
    "text": "pipe option.out",
    "start": "3017149",
    "end": "3021033"
  },
  {
    "text": "or else",
    "start": "3022399",
    "end": "3022949"
  },
  {
    "text": "get aggregate message kind from AST to",
    "start": "3028216",
    "end": "3033266"
  },
  {
    "text": "That's the way we first try to extract from the encoded type, if we don't find",
    "start": "3035000",
    "end": "3041816"
  },
  {
    "text": "anything in the annotation of the encoded type then we will jump into the encoded side",
    "start": "3041816",
    "end": "3047183"
  },
  {
    "text": "That works best And then",
    "start": "3048183",
    "end": "3053283"
  },
  {
    "text": "we have, let's see transformation",
    "start": "3056183",
    "end": "3060350"
  },
  {
    "text": "type literal we already did",
    "start": "3063183",
    "end": "3066416"
  },
  {
    "text": "property signature, yeah refinement, refinements, yeah",
    "start": "3069183",
    "end": "3075715"
  },
  {
    "text": "Refinements are really easy because what a refinement is in Effect",
    "start": "3076033",
    "end": "3083516"
  },
  {
    "text": "schema is basically just a check over the structure",
    "start": "3083516",
    "end": "3090383"
  },
  {
    "text": "the structure doesn't change shape in any way only an additional runtime checks for example, a UUID is a string",
    "start": "3090383",
    "end": "3098533"
  },
  {
    "text": "but has some kind of format so you can check on the format where what we do is just",
    "start": "3099183",
    "end": "3106466"
  },
  {
    "text": "And that's it, yeah So now if we try to run again our tests in here",
    "start": "3112633",
    "end": "3120116"
  },
  {
    "text": "okay, we are still failing let's try to see why",
    "start": "3121183",
    "end": "3125416"
  },
  {
    "text": "okay, this is none, okay let's continue the test",
    "start": "3127183",
    "end": "3133383"
  },
  {
    "text": "yeah, this fail, let's try to debug it so aggregate message, okay",
    "start": "3133383",
    "end": "3140233"
  },
  {
    "text": "here, perfect we run again the tests",
    "start": "3140233",
    "end": "3145633"
  },
  {
    "text": "in here with debug on we should jump",
    "start": "3145633",
    "end": "3150449"
  },
  {
    "text": "why didn't you stop it into the log did I mess something that I called",
    "start": "3152449",
    "end": "3161649"
  },
  {
    "text": "oh, I called the completely wrong function oh yeah, I called the annotation version",
    "start": "3161649",
    "end": "3167816"
  },
  {
    "text": "get from AST and for now we will do that like this",
    "start": "3167816",
    "end": "3174166"
  },
  {
    "text": "AST yeah let's check it let's run again",
    "start": "3174166",
    "end": "3179049"
  },
  {
    "text": "let's run again the tests let's see okay",
    "start": "3179183",
    "end": "3185133"
  },
  {
    "text": "okay, now we are getting the message kind it's not in this kind of annotation",
    "start": "3185216",
    "end": "3192583"
  },
  {
    "text": "which is a transformation, so we step in",
    "start": "3192583",
    "end": "3196016"
  },
  {
    "text": "the message kind is not in here this is what? a type literal, perfect we have many properties signature",
    "start": "3198966",
    "end": "3206350"
  },
  {
    "text": "this is the property signature of the tag so we want to find it in here",
    "start": "3206350",
    "end": "3212966"
  },
  {
    "text": "I will exit, yeah and then next one is the property signature of ID",
    "start": "3216183",
    "end": "3222466"
  },
  {
    "text": "we should find the annotation in here so let's check the function if it works",
    "start": "3222466",
    "end": "3227666"
  },
  {
    "text": "here, oh, this actually now returns some",
    "start": "3228183",
    "end": "3233533"
  },
  {
    "text": "instead of none so this now exits with",
    "start": "3233533",
    "end": "3239483"
  },
  {
    "text": "the call as value, yeah and now our test has passed",
    "start": "3239483",
    "end": "3248616"
  },
  {
    "text": "let's rerun this, yeah we passed our test, okay so maybe let's rewrite the test in a way",
    "start": "3251833",
    "end": "3259533"
  },
  {
    "text": "that's more readable everything as option from effect option",
    "start": "3259533",
    "end": "3265916"
  },
  {
    "text": "so we expect this",
    "start": "3266183",
    "end": "3269066"
  },
  {
    "text": "option is some okay and we don't name this to",
    "start": "3271333",
    "end": "3279333"
  },
  {
    "text": "message kind and we also expect",
    "start": "3279466",
    "end": "3284550"
  },
  {
    "text": "message kind to be equal so to be",
    "start": "3286449",
    "end": "3293283"
  },
  {
    "text": "options.some",
    "start": "3293483",
    "end": "3295316"
  },
  {
    "text": "query",
    "start": "3298600",
    "end": "3299949"
  },
  {
    "text": "to equal",
    "start": "3305183",
    "end": "3306333"
  },
  {
    "text": "and here we expect",
    "start": "3312183",
    "end": "3318866"
  },
  {
    "text": "message kind yeah, okay so we expect that message kind is",
    "start": "3319183",
    "end": "3325550"
  },
  {
    "text": "present and if so of type query so let's run everything",
    "start": "3326766",
    "end": "3331866"
  },
  {
    "text": "again and we pass again perfect but maybe get aggregate message kind from AST is not",
    "start": "3331866",
    "end": "3339015"
  },
  {
    "text": "so good and useful so maybe",
    "start": "3340183",
    "end": "3344566"
  },
  {
    "text": "here what we can do is first here we are reusing the same, oh, sorry",
    "start": "3347183",
    "end": "3353533"
  },
  {
    "text": "we are reusing the same code so maybe we can just",
    "start": "3354216",
    "end": "3358033"
  },
  {
    "text": "do something like",
    "start": "3361833",
    "end": "3362966"
  },
  {
    "text": "here return get aggregate message kind from",
    "start": "3367016",
    "end": "3373666"
  },
  {
    "text": "AST schema.AST and rename this to get aggregate message kind",
    "start": "3373666",
    "end": "3379932"
  },
  {
    "text": "so now our usage becomes more clean",
    "start": "3383016",
    "end": "3387916"
  },
  {
    "text": "because we can just pass in here message kind and read product name",
    "start": "3388716",
    "end": "3394466"
  },
  {
    "text": "okay but if I remember correctly",
    "start": "3395366",
    "end": "3401750"
  },
  {
    "text": "that means that we can also write the same for",
    "start": "3409899",
    "end": "3415033"
  },
  {
    "text": "a command just to be sure that we respect both the things",
    "start": "3415033",
    "end": "3420866"
  },
  {
    "text": "and maybe two different tests maybe so here",
    "start": "3420866",
    "end": "3427199"
  },
  {
    "text": "query and this is aggregate message",
    "start": "3429183",
    "end": "3435533"
  },
  {
    "text": "and rename this was aggregate message perfect",
    "start": "3438183",
    "end": "3444250"
  },
  {
    "text": "and here query it should type that our message is a query the same goes",
    "start": "3445183",
    "end": "3451666"
  },
  {
    "text": "for command and it's",
    "start": "3452183",
    "end": "3456816"
  },
  {
    "text": "change product name command you should check the type of message",
    "start": "3457316",
    "end": "3463283"
  },
  {
    "text": "yep and here if we run our tests again server and query, domain perfect",
    "start": "3463283",
    "end": "3471533"
  },
  {
    "text": "yep we should be up and running",
    "start": "3471533",
    "end": "3475116"
  },
  {
    "text": "perfect did the test crashed?",
    "start": "3478183",
    "end": "3483850"
  },
  {
    "text": "it seems so, yeah so we'll refresh everything",
    "start": "3486533",
    "end": "3492250"
  },
  {
    "text": "what test oh yeah",
    "start": "3493183",
    "end": "3498649"
  },
  {
    "text": "I killed the suffix .test okay",
    "start": "3499183",
    "end": "3504383"
  },
  {
    "text": "now you should see the domain tests yeah okay and they pass yep",
    "start": "3506350",
    "end": "3512233"
  },
  {
    "text": "query, perfect those pass perfect",
    "start": "3512233",
    "end": "3516783"
  },
  {
    "text": "okay so now we have",
    "start": "3517649",
    "end": "3523333"
  },
  {
    "text": "final way of defining messages the last kind of",
    "start": "3523333",
    "end": "3530750"
  },
  {
    "text": "message I described last time was an event",
    "start": "3530750",
    "end": "3535583"
  },
  {
    "text": "and an event I think that I want to describe that not as a tagged request",
    "start": "3536183",
    "end": "3543083"
  },
  {
    "text": "but maybe just something like",
    "start": "3543183",
    "end": "3548433"
  },
  {
    "text": "we want to change the product we want to read the product name change the product name but we also to describe that",
    "start": "3549333",
    "end": "3555833"
  },
  {
    "text": "the product name changed",
    "start": "3555833",
    "end": "3560666"
  },
  {
    "text": "so I think that I will use tagged class instead of that",
    "start": "3565399",
    "end": "3572283"
  },
  {
    "text": "okay and tagged class is easier because it will require",
    "start": "3573216",
    "end": "3581133"
  },
  {
    "text": "just the payload structure and maybe we can have something like",
    "start": "3581183",
    "end": "3586916"
  },
  {
    "text": "old name",
    "start": "3586916",
    "end": "3587933"
  },
  {
    "text": "and new name is that but I don't want to use a command",
    "start": "3592183",
    "end": "3597750"
  },
  {
    "text": "I want to",
    "start": "3598183",
    "end": "3600949"
  },
  {
    "text": "that's perfect and now maybe we want to add",
    "start": "3606183",
    "end": "3613466"
  },
  {
    "text": "query command for event",
    "start": "3613466",
    "end": "3616866"
  },
  {
    "text": "and we will create",
    "start": "3620183",
    "end": "3625833"
  },
  {
    "text": "an email constructor maybe we can create",
    "start": "3625833",
    "end": "3631266"
  },
  {
    "text": "an interface for that yeah maybe",
    "start": "3631266",
    "end": "3633882"
  },
  {
    "text": "and this constructor get the status maybe",
    "start": "3653183",
    "end": "3657416"
  },
  {
    "text": "exstend string and this kind of",
    "start": "3658899",
    "end": "3665916"
  },
  {
    "text": "signature will take and a payload",
    "start": "3666183",
    "end": "3671066"
  },
  {
    "text": "schema struct fields and we will leave this",
    "start": "3677183",
    "end": "3683066"
  },
  {
    "text": "value the same as this",
    "start": "3683066",
    "end": "3684265"
  },
  {
    "text": "perfect and now here we can say",
    "start": "3691300",
    "end": "3695250"
  },
  {
    "text": "and also event here",
    "start": "3708183",
    "end": "3714216"
  },
  {
    "text": "and we have to do the same thing and say that",
    "start": "3714216",
    "end": "3720550"
  },
  {
    "text": "event of type event perfect",
    "start": "3721433",
    "end": "3727350"
  },
  {
    "text": "and now here product changed yeah",
    "start": "3728216",
    "end": "3733333"
  },
  {
    "text": "type event perfect here was the same for an event",
    "start": "3735699",
    "end": "3745016"
  },
  {
    "text": "product name changed okay let's run our test again",
    "start": "3749333",
    "end": "3755466"
  },
  {
    "text": "perfect everything is okay up and running okay",
    "start": "3756183",
    "end": "3760550"
  },
  {
    "text": "so I think that with this we basically closed the topic of",
    "start": "3762183",
    "end": "3768266"
  },
  {
    "text": "how we want our messages between the client and the server to be",
    "start": "3768266",
    "end": "3773649"
  },
  {
    "text": "defined and as we described last time the commands",
    "start": "3773649",
    "end": "3779666"
  },
  {
    "text": "the queries will read data from the backend the command will perform actions on the entities in the backend",
    "start": "3780183",
    "end": "3787083"
  },
  {
    "text": "and the event will be used either internally by the server",
    "start": "3787183",
    "end": "3792566"
  },
  {
    "text": "to persist what happened or by the",
    "start": "3792566",
    "end": "3797750"
  },
  {
    "text": "event source HTTP request to stream things that happen",
    "start": "3799183",
    "end": "3805266"
  },
  {
    "text": "on entities and show them on the user okay",
    "start": "3805266",
    "end": "3810350"
  },
  {
    "text": "so we have now defined our messages now I want to move into",
    "start": "3811100",
    "end": "3818299"
  },
  {
    "text": "defining the behavior of the product",
    "start": "3818300",
    "end": "3823750"
  },
  {
    "text": "and the behavior of the product will be something like when I receive a",
    "start": "3824366",
    "end": "3829600"
  },
  {
    "text": "changed product name request I will perform some checks first and then after I perform some",
    "start": "3829600",
    "end": "3836666"
  },
  {
    "text": "checks what I will do is persist an event that the product name has changed",
    "start": "3836666",
    "end": "3842250"
  },
  {
    "text": "and then update my internal state",
    "start": "3843066",
    "end": "3845432"
  },
  {
    "text": "I'm fine with this module this module is not needed anymore because in the end we move that",
    "start": "3851066",
    "end": "3857050"
  },
  {
    "text": "into the behavior attribute here it is",
    "start": "3857050",
    "end": "3862515"
  },
  {
    "text": "okay so let's see there is one last thing that",
    "start": "3863783",
    "end": "3869833"
  },
  {
    "text": "I want to add in here and it is that causation ID",
    "start": "3870066",
    "end": "3877750"
  },
  {
    "text": "schema.option of schema.UUID",
    "start": "3879066",
    "end": "3884849"
  },
  {
    "text": "and correlation ID",
    "start": "3887066",
    "end": "3893166"
  },
  {
    "text": "option schema.UUID and this function",
    "start": "3895649",
    "end": "3902333"
  },
  {
    "text": "these members will be used to create a chain of the events and comments",
    "start": "3902333",
    "end": "3909233"
  },
  {
    "text": "and whatever that happens in our system because this ID will be the ID of the single message",
    "start": "3909233",
    "end": "3914816"
  },
  {
    "text": "but that single message may cause an event so the event will",
    "start": "3915066",
    "end": "3920449"
  },
  {
    "text": "have in the causation ID fields the ID of the comment received that caused that event to happen",
    "start": "3921066",
    "end": "3928816"
  },
  {
    "text": "and I want those fields to be option and I don't want them to be mandatory",
    "start": "3930283",
    "end": "3939599"
  },
  {
    "text": "so I don't want this type schema option.none every time",
    "start": "3939600",
    "end": "3945416"
  },
  {
    "text": "I want them to be by default none",
    "start": "3945416",
    "end": "3951049"
  },
  {
    "text": "if it's not provided in any way",
    "start": "3952066",
    "end": "3959616"
  },
  {
    "text": "so let's me just check something again",
    "start": "3960033",
    "end": "3966050"
  },
  {
    "text": "yeah okay and we can do that",
    "start": "3968066",
    "end": "3973416"
  },
  {
    "text": "by using schema.",
    "start": "3974633",
    "end": "3977916"
  },
  {
    "text": "optional with we say that we have",
    "start": "3980066",
    "end": "3984750"
  },
  {
    "text": "an option of the UUID and we have a default and the default is option.none",
    "start": "3986466",
    "end": "3994932"
  },
  {
    "text": "and we need to import the option module as always",
    "start": "3998766",
    "end": "4003666"
  },
  {
    "text": "option from Effect option",
    "start": "4007466",
    "end": "4012216"
  },
  {
    "text": "okay and the same goes for the other field",
    "start": "4014066",
    "end": "4019399"
  },
  {
    "text": "yep",
    "start": "4022066",
    "end": "4024449"
  },
  {
    "text": "let me just check one thing real quick",
    "start": "4031783",
    "end": "4037233"
  },
  {
    "text": "the thing is that I'm thinking about is that we can do something like",
    "start": "4068316",
    "end": "4073816"
  },
  {
    "text": "these to put an option and say that the field is optional and if not provided it",
    "start": "4074133",
    "end": "4080066"
  },
  {
    "text": "it will be defaulted to none I'm not sure if we can",
    "start": "4080066",
    "end": "4085233"
  },
  {
    "text": "do something more clever we could hypothetically",
    "start": "4085233",
    "end": "4090449"
  },
  {
    "text": "use some of the properties",
    "start": "4092066",
    "end": "4098316"
  },
  {
    "text": "of the environment to automatically seal that but maybe let's do that later let's just me check the",
    "start": "4099066",
    "end": "4108266"
  },
  {
    "text": "okay",
    "start": "4112066",
    "end": "4112965"
  },
  {
    "text": "than the one that I defined so we need to update that as well",
    "start": "4118233",
    "end": "4123516"
  },
  {
    "text": "because now this",
    "start": "4124383",
    "end": "4128799"
  },
  {
    "text": "here we have added two causation ID",
    "start": "4130066",
    "end": "4135533"
  },
  {
    "text": "which is schema optional with and",
    "start": "4136066",
    "end": "4141633"
  },
  {
    "text": "schema.option type of schema UUID",
    "start": "4142066",
    "end": "4148350"
  },
  {
    "text": "and we have a default from it",
    "start": "4149066",
    "end": "4153299"
  },
  {
    "text": "which is basically option. schema sorry",
    "start": "4155983",
    "end": "4161050"
  },
  {
    "text": "schema schema option",
    "start": "4163866",
    "end": "4169416"
  },
  {
    "text": "type of schema UUID",
    "start": "4171066",
    "end": "4175850"
  },
  {
    "text": "thing oh no it's a string",
    "start": "4177066",
    "end": "4180049"
  },
  {
    "text": "and the same goes for the correlation ID",
    "start": "4192066",
    "end": "4197365"
  },
  {
    "text": "I missed one okay and now",
    "start": "4202066",
    "end": "4207616"
  },
  {
    "text": "what are you complaining about correlation ID option",
    "start": "4208066",
    "end": "4213316"
  },
  {
    "text": "default",
    "start": "4215066",
    "end": "4216566"
  },
  {
    "text": "you want",
    "start": "4227066",
    "end": "4228816"
  },
  {
    "text": "default should be a lazy that returns that yeah and what not okay by you",
    "start": "4234833",
    "end": "4241899"
  },
  {
    "text": "so let's see option with default is not acceptable to type yeah, none is not",
    "start": "4243600",
    "end": "4250899"
  },
  {
    "text": "acceptable to type option",
    "start": "4250899",
    "end": "4252716"
  },
  {
    "text": "let's do the quick and dirty way",
    "start": "4259066",
    "end": "4262883"
  },
  {
    "text": "and because that's never yeah",
    "start": "4271066",
    "end": "4276966"
  },
  {
    "text": "if I do that like that",
    "start": "4278066",
    "end": "4281816"
  },
  {
    "text": "and that's the beauty of type script sometimes you completely understand what",
    "start": "4287699",
    "end": "4294500"
  },
  {
    "text": "you are trying to do sometimes it tries so hard but fails so badly",
    "start": "4294500",
    "end": "4300500"
  },
  {
    "text": "I need to do that because the secrets are a little different",
    "start": "4305066",
    "end": "4310716"
  },
  {
    "text": "if I don't fix the argument to string it will complain that it can actually receive a function that",
    "start": "4311066",
    "end": "4316633"
  },
  {
    "text": "converts anything into anything itself an option of anything itself and that's not what we are describing",
    "start": "4317066",
    "end": "4323649"
  },
  {
    "text": "yeah, so now we have added causation ID, correlation ID",
    "start": "4323649",
    "end": "4327865"
  },
  {
    "text": "and that's great I'm unsure if I want to also",
    "start": "4329066",
    "end": "4335198"
  },
  {
    "text": "attach in here information about for example the user ID that caused",
    "start": "4335199",
    "end": "4341032"
  },
  {
    "text": "a message",
    "start": "4341066",
    "end": "4341948"
  },
  {
    "text": "maybe not the access token which is definitely secret but yeah",
    "start": "4353666",
    "end": "4359516"
  },
  {
    "text": "now we should maybe add a test",
    "start": "4365766",
    "end": "4371266"
  },
  {
    "text": "it says that",
    "start": "4371266",
    "end": "4373066"
  },
  {
    "text": "by default the aggregate root",
    "start": "4377350",
    "end": "4383016"
  },
  {
    "text": "should be filled so that means that we want our APIs to be in such a way that",
    "start": "4388683",
    "end": "4396316"
  },
  {
    "text": "if we create a message and say that for example is change product name, make",
    "start": "4396316",
    "end": "4402166"
  },
  {
    "text": "we want the new name to be new product",
    "start": "4403066",
    "end": "4407666"
  },
  {
    "text": "we want the ID to be the message ID",
    "start": "4409066",
    "end": "4413032"
  },
  {
    "text": "we want the aggregate ID to be product abc",
    "start": "4415066",
    "end": "4420500"
  },
  {
    "text": "but what we are testing in here is we expect",
    "start": "4421350",
    "end": "4425500"
  },
  {
    "text": "message dot aggregate root to be or to equal",
    "start": "4426433",
    "end": "4432500"
  },
  {
    "text": "product aggregate aggregate root name",
    "start": "4436300",
    "end": "4441350"
  },
  {
    "text": "that's the thing we want to test",
    "start": "4442500",
    "end": "4444366"
  },
  {
    "text": "we said we wanted a UUID and guess what we didn't pass",
    "start": "4452066",
    "end": "4457899"
  },
  {
    "text": "UUID in our test yeah",
    "start": "4458183",
    "end": "4461100"
  },
  {
    "text": "so maybe let's just stick with non-empty string I'm not sure if we will use",
    "start": "4463566",
    "end": "4469948"
  },
  {
    "text": "actually UUIDs or whatever let's say that non-empty string",
    "start": "4469949",
    "end": "4475566"
  },
  {
    "text": "and run test again okay now it pass",
    "start": "4481066",
    "end": "4485833"
  },
  {
    "text": "okay so I think that with this I am pretty confident that this is what we want",
    "start": "4493066",
    "end": "4500133"
  },
  {
    "text": "so now we need to move into defining the aggregate behavior",
    "start": "4500133",
    "end": "4506532"
  },
  {
    "text": "and I want to define the aggregate behavior",
    "start": "4509066",
    "end": "4514516"
  },
  {
    "text": "by first having a list of",
    "start": "4515066",
    "end": "4520016"
  },
  {
    "text": "basically an event journal approach I want a journal that",
    "start": "4521066",
    "end": "4525716"
  },
  {
    "text": "has a list of events and",
    "start": "4526216",
    "end": "4530916"
  },
  {
    "text": "I want to define how to handle a specific command and handling the command",
    "start": "4532066",
    "end": "4538433"
  },
  {
    "text": "will be basically checking the database or whatever or the message itself",
    "start": "4538433",
    "end": "4543550"
  },
  {
    "text": "if the command is applicable and then we'll perform the work",
    "start": "4543550",
    "end": "4551616"
  },
  {
    "text": "so let's try to scratch that out we have our aggregate, we",
    "start": "4552449",
    "end": "4557865"
  },
  {
    "text": "have the change product name and we now have also",
    "start": "4557866",
    "end": "4563933"
  },
  {
    "text": "product name changed we can copy from here in our scratch file this is where I always",
    "start": "4564066",
    "end": "4571100"
  },
  {
    "text": "scratch things to try them out so",
    "start": "4571100",
    "end": "4576149"
  },
  {
    "text": "we may start by having something like",
    "start": "4577916",
    "end": "4584966"
  },
  {
    "text": "const behavior and we want product aggregate",
    "start": "4585333",
    "end": "4592916"
  },
  {
    "text": "dot and maybe make a behavior make behavior",
    "start": "4593066",
    "end": "4597566"
  },
  {
    "text": "for the product aggregate and we also need to say",
    "start": "4602066",
    "end": "4607750"
  },
  {
    "text": "which we can think it is a two way thing",
    "start": "4608066",
    "end": "4614199"
  },
  {
    "text": "we can see which kind of events are handled, are managed",
    "start": "4614200",
    "end": "4620166"
  },
  {
    "text": "by the product aggregate",
    "start": "4620166",
    "end": "4622616"
  },
  {
    "text": "yeah, I like that better, yeah",
    "start": "4626066",
    "end": "4629532"
  },
  {
    "text": "so we can say something like function make",
    "start": "4632433",
    "end": "4637066"
  },
  {
    "text": "event sourced aggregate",
    "start": "4641066",
    "end": "4645316"
  },
  {
    "text": "and we want to first pass the aggregate",
    "start": "4650066",
    "end": "4655216"
  },
  {
    "text": "which will aggregate root to be precise",
    "start": "4655216",
    "end": "4658966"
  },
  {
    "text": "aggregate root aggregate root",
    "start": "4660283",
    "end": "4664600"
  },
  {
    "text": "maybe this like A extends AggregateRoot",
    "start": "4666866",
    "end": "4671966"
  },
  {
    "text": "this is the aggregate root and then",
    "start": "4684916",
    "end": "4688716"
  },
  {
    "text": "we also want a list of events",
    "start": "4690866",
    "end": "4696365"
  },
  {
    "text": "that happens on that aggregate root",
    "start": "4697066",
    "end": "4700766"
  },
  {
    "text": "maybe we have args and aggregate source",
    "start": "4704066",
    "end": "4709099"
  },
  {
    "text": "aggregate args of A",
    "start": "4709100",
    "end": "4713700"
  },
  {
    "text": "and will return later something so let's sketch out this",
    "start": "4714933",
    "end": "4719066"
  },
  {
    "text": "interface this will take a extensal aggregate root",
    "start": "4724066",
    "end": "4732100"
  },
  {
    "text": "aggregate root at string ok",
    "start": "4733066",
    "end": "4737615"
  },
  {
    "text": "and now we have this and these",
    "start": "4739066",
    "end": "4744233"
  },
  {
    "text": "we will have things like the events",
    "start": "4745066",
    "end": "4748266"
  },
  {
    "text": "or maybe we can pass in the events let me try to sketch out",
    "start": "4752766",
    "end": "4759216"
  },
  {
    "text": "const product product aggregate",
    "start": "4759666",
    "end": "4767216"
  },
  {
    "text": "Journal equals make",
    "start": "4770799",
    "end": "4777049"
  },
  {
    "text": "make make event sourced aggregate product aggregate",
    "start": "4777066",
    "end": "4783566"
  },
  {
    "text": "this is fine perfect and now I also want",
    "start": "4784066",
    "end": "4790899"
  },
  {
    "text": "to pass in a list of events that can be",
    "start": "4791066",
    "end": "4796566"
  },
  {
    "text": "can happen on that so it will be something like",
    "start": "4797066",
    "end": "4804066"
  },
  {
    "text": "maybe let me think we first have a type that describes that",
    "start": "4807350",
    "end": "4813000"
  },
  {
    "text": "so maybe in here we can say like export namespace",
    "start": "4814583",
    "end": "4820850"
  },
  {
    "text": "aggregate message export type",
    "start": "4822066",
    "end": "4828233"
  },
  {
    "text": "any for aggregate",
    "start": "4830133",
    "end": "4835799"
  },
  {
    "text": "and here we pass in the aggregate",
    "start": "4838066",
    "end": "4841850"
  },
  {
    "text": "aggregate root from the aggregate root",
    "start": "4845066",
    "end": "4851250"
  },
  {
    "text": "aggregate root. aggregate root I want to define a namespace in here",
    "start": "4852066",
    "end": "4861100"
  },
  {
    "text": "export namespace aggregate root",
    "start": "4863066",
    "end": "4872199"
  },
  {
    "text": "export type all equals aggregate root on string",
    "start": "4873316",
    "end": "4878666"
  },
  {
    "text": "and why I do this you will see this kind of pattern everywhere in the effect code base",
    "start": "4879066",
    "end": "4887016"
  },
  {
    "text": "and that allows to do things like here say that",
    "start": "4887066",
    "end": "4892233"
  },
  {
    "text": "the aggregate message extends aggregate root and I can also build",
    "start": "4894950",
    "end": "4901766"
  },
  {
    "text": "some type level utilities for example",
    "start": "4901766",
    "end": "4906049"
  },
  {
    "text": "export type name of A that extends all",
    "start": "4907066",
    "end": "4913433"
  },
  {
    "text": "and if I could say that",
    "start": "4914066",
    "end": "4919049"
  },
  {
    "text": "A extends infer",
    "start": "4920066",
    "end": "4925350"
  },
  {
    "text": "aggregate root infer name and we want to return the name",
    "start": "4927066",
    "end": "4933116"
  },
  {
    "text": "or never so that means that in our",
    "start": "4933116",
    "end": "4939033"
  },
  {
    "text": "for any for aggregate message we can extend and say that it is basically anything that",
    "start": "4939066",
    "end": "4947133"
  },
  {
    "text": "has aggregate root and that's",
    "start": "4947366",
    "end": "4952633"
  },
  {
    "text": "aggregate root aggregate root name",
    "start": "4953066",
    "end": "4957649"
  },
  {
    "text": "yep so anything that extends any for aggregate",
    "start": "4960066",
    "end": "4966333"
  },
  {
    "text": "so now we can do things like",
    "start": "4966333",
    "end": "4972350"
  },
  {
    "text": "event equals event",
    "start": "4972716",
    "end": "4977850"
  },
  {
    "text": "extends aggregate message any for aggregate",
    "start": "4979066",
    "end": "4984615"
  },
  {
    "text": "A event okay",
    "start": "4985383",
    "end": "4990149"
  },
  {
    "text": "perfect and now if we say product name changed",
    "start": "4991066",
    "end": "4997450"
  },
  {
    "text": "it's not a multi type oh yeah yeah yeah yeah yeah yeah yeah yeah because",
    "start": "5001633",
    "end": "5006933"
  },
  {
    "text": "because because because yeah yeah yeah yeah that makes sense because this is not",
    "start": "5008066",
    "end": "5014350"
  },
  {
    "text": "the actual instance this is a class that describes",
    "start": "5014350",
    "end": "5022416"
  },
  {
    "text": "the message instance so",
    "start": "5022416",
    "end": "5026966"
  },
  {
    "text": "here instead of just doing that we could say something like",
    "start": "5028066",
    "end": "5035633"
  },
  {
    "text": "we want any schema that",
    "start": "5036066",
    "end": "5040899"
  },
  {
    "text": "has an aggregate root field",
    "start": "5042149",
    "end": "5045666"
  },
  {
    "text": "definitely yeah okay so let's try that out",
    "start": "5049583",
    "end": "5054933"
  },
  {
    "text": "so we have our A can we",
    "start": "5055850",
    "end": "5062250"
  },
  {
    "text": "that feature can we do something like that",
    "start": "5066066",
    "end": "5070549"
  },
  {
    "text": "also what time is it oh yeah it's almost time to finish the stream yeah maybe we can check out that later",
    "start": "5071149",
    "end": "5077799"
  },
  {
    "text": "but thing I want to be able to express in here",
    "start": "5079066",
    "end": "5084115"
  },
  {
    "text": "is basically the ability to limit",
    "start": "5085066",
    "end": "5090133"
  },
  {
    "text": "the kind of messages I can put in here and they can only be",
    "start": "5090133",
    "end": "5095865"
  },
  {
    "text": "of the aggregate type put in that so here for now we have",
    "start": "5096066",
    "end": "5101166"
  },
  {
    "text": "only the product aggregate but let's say that we also have",
    "start": "5101166",
    "end": "5107816"
  },
  {
    "text": "the member aggregate of members",
    "start": "5108450",
    "end": "5114666"
  },
  {
    "text": "here and maybe we have an event",
    "start": "5116066",
    "end": "5122466"
  },
  {
    "text": "of the members that is like the member",
    "start": "5123066",
    "end": "5128366"
  },
  {
    "text": "joined in here",
    "start": "5129066",
    "end": "5135350"
  },
  {
    "text": "do we need to change this this it's member",
    "start": "5138066",
    "end": "5143266"
  },
  {
    "text": "aggregate not event and joined maybe won't have any arguments",
    "start": "5145500",
    "end": "5151449"
  },
  {
    "text": "what I want to express is that this should work",
    "start": "5151450",
    "end": "5156233"
  },
  {
    "text": "and this shouldn't this should fail because we will say member",
    "start": "5157066",
    "end": "5163000"
  },
  {
    "text": "joined this should fail and this should work",
    "start": "5163066",
    "end": "5166766"
  },
  {
    "text": "so if I remember correctly",
    "start": "5171483",
    "end": "5173966"
  },
  {
    "text": "now schema here a schema now",
    "start": "5177066",
    "end": "5184366"
  },
  {
    "text": "also has an encoded ",
    "start": "5185066",
    "end": "5190899"
  },
  {
    "text": "and a type maybe we can say that",
    "start": "5190899",
    "end": "5196399"
  },
  {
    "text": "we here anything that",
    "start": "5199133",
    "end": "5203700"
  },
  {
    "text": "has a property type that is like that",
    "start": "5205066",
    "end": "5211350"
  },
  {
    "text": "okay and that means that",
    "start": "5213333",
    "end": "5219716"
  },
  {
    "text": "we should be able to take in whatever",
    "start": "5224016",
    "end": "5228100"
  },
  {
    "text": "and whenever has a schema where the type goes into that",
    "start": "5233500",
    "end": "5237432"
  },
  {
    "text": "why are you complaining about the number type of the number",
    "start": "5240016",
    "end": "5243616"
  },
  {
    "text": "oh did I write wrong the type here let's say type A equals",
    "start": "5251283",
    "end": "5258399"
  },
  {
    "text": "aggregate root",
    "start": "5258399",
    "end": "5261549"
  },
  {
    "text": "name all in this case is",
    "start": "5264066",
    "end": "5267199"
  },
  {
    "text": "and this should be oh we messed up something",
    "start": "5274066",
    "end": "5279833"
  },
  {
    "text": "oh yeah that's the error",
    "start": "5280066",
    "end": "5285333"
  },
  {
    "text": "and after we fix that yeah now we have what we want",
    "start": "5288733",
    "end": "5294433"
  },
  {
    "text": "yeah now it says that a member joined event is not",
    "start": "5294433",
    "end": "5300333"
  },
  {
    "text": "assignable to of type products but if I say member",
    "start": "5300333",
    "end": "5305049"
  },
  {
    "text": "aggregate now they perfectly match and now we can use that",
    "start": "5306066",
    "end": "5311966"
  },
  {
    "text": "yeah the only thing is that I want that to be",
    "start": "5312066",
    "end": "5318350"
  },
  {
    "text": "an array a read-only array",
    "start": "5318416",
    "end": "5321149"
  },
  {
    "text": "array events",
    "start": "5324066",
    "end": "5329333"
  },
  {
    "text": "and that is because I want to do things like member joined",
    "start": "5334066",
    "end": "5340149"
  },
  {
    "text": "this should fail but let's say that we also have",
    "start": "5340149",
    "end": "5345865"
  },
  {
    "text": "another event like product name changed yeah",
    "start": "5346066",
    "end": "5350866"
  },
  {
    "text": "let's say that we also have product",
    "start": "5352066",
    "end": "5356532"
  },
  {
    "text": "product when we want to",
    "start": "5357533",
    "end": "5364600"
  },
  {
    "text": "product deleted maybe",
    "start": "5364600",
    "end": "5365633"
  },
  {
    "text": "discontinued instead of deleted",
    "start": "5371166",
    "end": "5373399"
  },
  {
    "text": "product discontinued",
    "start": "5379216",
    "end": "5382333"
  },
  {
    "text": "ok and this will have a reason which will be a string",
    "start": "5385183",
    "end": "5392733"
  },
  {
    "text": "product discontinued here now we should be able to say",
    "start": "5395183",
    "end": "5400833"
  },
  {
    "text": "product discontinued perfect and now",
    "start": "5400833",
    "end": "5405766"
  },
  {
    "text": "if we for example return in here we return",
    "start": "5406066",
    "end": "5412350"
  },
  {
    "text": "event number",
    "start": "5412350",
    "end": "5414450"
  },
  {
    "text": "sorry just event event should be",
    "start": "5418066",
    "end": "5424033"
  },
  {
    "text": "where did I mess up with event",
    "start": "5424033",
    "end": "5430666"
  },
  {
    "text": "yeah that is a double perfect and if we just say number",
    "start": "5430666",
    "end": "5435716"
  },
  {
    "text": "now we have a union perfectly we have a union of the kind of",
    "start": "5436066",
    "end": "5442049"
  },
  {
    "text": "events that can happen on our aggregate perfect",
    "start": "5442066",
    "end": "5446466"
  },
  {
    "text": "so we know up front the events",
    "start": "5449799",
    "end": "5455333"
  },
  {
    "text": "and now the last thing is that",
    "start": "5467066",
    "end": "5469799"
  },
  {
    "text": "we may want to perform some work upon an event happening",
    "start": "5473933",
    "end": "5479100"
  },
  {
    "text": "something like update",
    "start": "5483016",
    "end": "5487115"
  },
  {
    "text": "aggregate state that even an event",
    "start": "5490066",
    "end": "5495399"
  },
  {
    "text": "that can be of type events number",
    "start": "5496716",
    "end": "5500766"
  },
  {
    "text": "I'm not sure why capital N okay that should run on",
    "start": "5502066",
    "end": "5508299"
  },
  {
    "text": "effect well we didn't import effect yet",
    "start": "5508299",
    "end": "5513466"
  },
  {
    "text": "import everything as effect from effect",
    "start": "5514066",
    "end": "5520365"
  },
  {
    "text": "so it's an effect dot effect that can be can",
    "start": "5524066",
    "end": "5529700"
  },
  {
    "text": "return nothing it can error with any error you want",
    "start": "5529700",
    "end": "5535733"
  },
  {
    "text": "and can require whatever you want so we need to add those type parameters",
    "start": "5536066",
    "end": "5541532"
  },
  {
    "text": "on the error and the requirements",
    "start": "5542066",
    "end": "5545516"
  },
  {
    "text": "and we will return an effect dot",
    "start": "5548066",
    "end": "5550533"
  },
  {
    "text": "right effect dot effect",
    "start": "5555066",
    "end": "5560350"
  },
  {
    "text": "of void E R",
    "start": "5561066",
    "end": "5565766"
  },
  {
    "text": "and the event root aggregate to be honest can't really fail",
    "start": "5567066",
    "end": "5573133"
  },
  {
    "text": "because if an event happened we cannot fail",
    "start": "5577066",
    "end": "5582766"
  },
  {
    "text": "in updating the state",
    "start": "5583066",
    "end": "5586365"
  },
  {
    "text": "and if we fail it's something fail so yeah it prefer to do that",
    "start": "5589766",
    "end": "5595416"
  },
  {
    "text": "and then let's just do this it will obviously complain",
    "start": "5596416",
    "end": "5601716"
  },
  {
    "text": "because that's not what he wants",
    "start": "5601716",
    "end": "5604799"
  },
  {
    "text": "this one is not required anymore okay but now we should have",
    "start": "5607433",
    "end": "5613516"
  },
  {
    "text": "something here that",
    "start": "5613516",
    "end": "5616899"
  },
  {
    "text": "given an event here we can do things like",
    "start": "5619333",
    "end": "5623833"
  },
  {
    "text": "if the switch event dot tag",
    "start": "5624700",
    "end": "5630616"
  },
  {
    "text": "case product name changed return",
    "start": "5631066",
    "end": "5636100"
  },
  {
    "text": "effect log info product name",
    "start": "5637066",
    "end": "5642666"
  },
  {
    "text": "now is we can say like event",
    "start": "5643066",
    "end": "5649816"
  },
  {
    "text": "dot",
    "start": "5649816",
    "end": "5651049"
  },
  {
    "text": "I see we have little error in our typings",
    "start": "5659083",
    "end": "5666666"
  },
  {
    "text": "because here we have type of product name changed but we want actually",
    "start": "5667083",
    "end": "5672000"
  },
  {
    "text": "the instance of the type so it's schema dot",
    "start": "5673200",
    "end": "5677950"
  },
  {
    "text": "schema dot type event number",
    "start": "5679066",
    "end": "5685032"
  },
  {
    "text": "and this should spread yeah so now you can see that it's just product name",
    "start": "5685066",
    "end": "5691233"
  },
  {
    "text": "changed not type of so here we also have",
    "start": "5691233",
    "end": "5697133"
  },
  {
    "text": "yeah we have our information such as the specific product",
    "start": "5697200",
    "end": "5702899"
  },
  {
    "text": "id the new name now is new name for example",
    "start": "5703066",
    "end": "5709049"
  },
  {
    "text": "and case return effect",
    "start": "5710966",
    "end": "5719750"
  },
  {
    "text": "log info product with",
    "start": "5719750",
    "end": "5725350"
  },
  {
    "text": "ID event event event dot",
    "start": "5725350",
    "end": "5732032"
  },
  {
    "text": "aggregate ID is now discontinued",
    "start": "5732066",
    "end": "5736466"
  },
  {
    "text": "ok so this is kind of the way I see that we will",
    "start": "5741066",
    "end": "5747533"
  },
  {
    "text": "define the state of",
    "start": "5747533",
    "end": "5751299"
  },
  {
    "text": "one of our aggregates in a very event journaled way and this is the journal",
    "start": "5753066",
    "end": "5760566"
  },
  {
    "text": "that will take in the aggregate, the events",
    "start": "5760566",
    "end": "5766399"
  },
  {
    "text": "that can happen and a function that will update the state event event",
    "start": "5766399",
    "end": "5772399"
  },
  {
    "text": "but obviously just an effect is not useful at all",
    "start": "5772399",
    "end": "5778516"
  },
  {
    "text": "what we need is to have functions",
    "start": "5780016",
    "end": "5784566"
  },
  {
    "text": "that for example will append an event into the event journal",
    "start": "5785100",
    "end": "5792233"
  },
  {
    "text": "so let's try to sketch that out",
    "start": "5796066",
    "end": "5801633"
  },
  {
    "text": "event source aggregate and this event source",
    "start": "5802066",
    "end": "5811966"
  },
  {
    "text": "aggregate can be of this type",
    "start": "5812066",
    "end": "5814066"
  },
  {
    "text": "and this is the kind of events that can have",
    "start": "5819766",
    "end": "5824649"
  },
  {
    "text": "and we'll say something like append",
    "start": "5827066",
    "end": "5831933"
  },
  {
    "text": "an event of type events",
    "start": "5833066",
    "end": "5836615"
  },
  {
    "text": "and this will be an effect no sorry that with no result",
    "start": "5844983",
    "end": "5850416"
  },
  {
    "text": "never and and without any requirement",
    "start": "5850416",
    "end": "5856233"
  },
  {
    "text": "so let's try to change the return type of our sketched out function",
    "start": "5856233",
    "end": "5862549"
  },
  {
    "text": "let's say event source aggregate of A",
    "start": "5865066",
    "end": "5870149"
  },
  {
    "text": "event schema.schema.type of events",
    "start": "5871066",
    "end": "5877866"
  },
  {
    "text": "number create",
    "start": "5877866",
    "end": "5882666"
  },
  {
    "text": "let's see and now this is an event source",
    "start": "5885066",
    "end": "5892566"
  },
  {
    "text": "aggregate of products okay",
    "start": "5892566",
    "end": "5898016"
  },
  {
    "text": "not happy with that unknown oh it's event not events",
    "start": "5900066",
    "end": "5906966"
  },
  {
    "text": "here maybe it's better call it events because it's actually",
    "start": "5907066",
    "end": "5913850"
  },
  {
    "text": "a tuple of the possible events yep yeah",
    "start": "5914066",
    "end": "5919549"
  },
  {
    "text": "look at this by just looking at the type signature with this kind of",
    "start": "5921066",
    "end": "5927233"
  },
  {
    "text": "API I'm thinking we can see that this is an aggregate an ever source aggregate",
    "start": "5927233",
    "end": "5932699"
  },
  {
    "text": "of type products and these are the kind of events that can happen yeah definitely",
    "start": "5933066",
    "end": "5939866"
  },
  {
    "text": "to be honest maybe we can also skip all together aggregate to",
    "start": "5941066",
    "end": "5946015"
  },
  {
    "text": "type level information",
    "start": "5947066",
    "end": "5948649"
  },
  {
    "text": "because right now we only store the name",
    "start": "5953066",
    "end": "5957566"
  },
  {
    "text": "and we have that as well also on the actual type of the message so yeah",
    "start": "5962066",
    "end": "5967566"
  },
  {
    "text": "here we know the aggregate root name so yeah maybe that's the match",
    "start": "5967566",
    "end": "5973250"
  },
  {
    "text": "but that means that we now have an API where product",
    "start": "5976933",
    "end": "5981616"
  },
  {
    "text": "aggregate journal dot append",
    "start": "5982066",
    "end": "5986833"
  },
  {
    "text": "and here we'll take an event perfect and we can make it so that",
    "start": "5988383",
    "end": "5993233"
  },
  {
    "text": "appending the event will happen immediately and",
    "start": "5993633",
    "end": "5999100"
  },
  {
    "text": "after appending the event maybe on the same transaction because we will use",
    "start": "6000066",
    "end": "6007816"
  },
  {
    "text": "just an SQLite as database with an event stable",
    "start": "6007816",
    "end": "6013199"
  },
  {
    "text": "and we can make it so that in the same transaction we append the event",
    "start": "6013200",
    "end": "6018932"
  },
  {
    "text": "and we also perform the queries to update the state",
    "start": "6019066",
    "end": "6023532"
  },
  {
    "text": "we can both keep an in-memory state and also maybe",
    "start": "6025066",
    "end": "6030266"
  },
  {
    "text": "outperform actual queries and there are pros and cons",
    "start": "6030266",
    "end": "6036466"
  },
  {
    "text": "of both approaches I think I think that if we just keep running",
    "start": "6036466",
    "end": "6041766"
  },
  {
    "text": "in memory that's a structure",
    "start": "6042066",
    "end": "6045115"
  },
  {
    "text": "like for example like for example an object",
    "start": "6048066",
    "end": "6053233"
  },
  {
    "text": "we can actually forget about constructing specific tables",
    "start": "6053233",
    "end": "6059266"
  },
  {
    "text": "for that entity and just describe that with",
    "start": "6059266",
    "end": "6063333"
  },
  {
    "text": "a schema whenever an event happens",
    "start": "6066783",
    "end": "6071466"
  },
  {
    "text": "instead of allowing to run an effect we basically here provide a way to return an update",
    "start": "6072066",
    "end": "6078149"
  },
  {
    "text": "and version of that in-memory object that way we can reconstruct the object by this by",
    "start": "6078149",
    "end": "6085166"
  },
  {
    "text": "deleting the stored representation and recreate that",
    "start": "6087066",
    "end": "6092649"
  },
  {
    "text": "but yeah I think that we will discuss that later on more next time",
    "start": "6094066",
    "end": "6100199"
  },
  {
    "text": "for now I think that I accomplished what I wanted to finish today",
    "start": "6102700",
    "end": "6108233"
  },
  {
    "text": "I wanted us to start a little working on the back-end server unfortunately we didn't make in time to do that",
    "start": "6109866",
    "end": "6117049"
  },
  {
    "text": "but yeah we still did quite a lot of work",
    "start": "6118066",
    "end": "6123333"
  },
  {
    "text": "and what can we check out? let me see here",
    "start": "6125216",
    "end": "6131666"
  },
  {
    "text": "maybe we can investigate more",
    "start": "6132066",
    "end": "6136433"
  },
  {
    "text": "let's see",
    "start": "6140066",
    "end": "6140865"
  },
  {
    "text": "let's see what we can do in here",
    "start": "6145133",
    "end": "6147849"
  },
  {
    "text": "we can do things like",
    "start": "6156066",
    "end": "6163316"
  },
  {
    "text": "thing that we can either allow to perform queries in here",
    "start": "6168549",
    "end": "6175216"
  },
  {
    "text": "or just update the memory structure yeah maybe we can look out",
    "start": "6175216",
    "end": "6181549"
  },
  {
    "text": "if we find a better way to construct the aggregate",
    "start": "6181549",
    "end": "6187733"
  },
  {
    "text": "than this one for sure we can move that into something like",
    "start": "6187733",
    "end": "6193733"
  },
  {
    "text": "product aggregate dot behavior yeah",
    "start": "6193733",
    "end": "6199516"
  },
  {
    "text": "but the thing is that",
    "start": "6200066",
    "end": "6202850"
  },
  {
    "text": "I would like this is how an event is persisted",
    "start": "6206033",
    "end": "6211500"
  },
  {
    "text": "but I also would like to",
    "start": "6212066",
    "end": "6216233"
  },
  {
    "text": "other APIs that allows for example to say when I receive a comment",
    "start": "6217233",
    "end": "6224049"
  },
  {
    "text": "decide if the comment is valid based on the state of the",
    "start": "6224066",
    "end": "6229833"
  },
  {
    "text": "the state of the entity and eventually discard the comment if",
    "start": "6230100",
    "end": "6235916"
  },
  {
    "text": "that wasn't right",
    "start": "6236066",
    "end": "6241100"
  },
  {
    "text": "but yeah or also persist comments that needs to be sent to other entities",
    "start": "6241566",
    "end": "6248216"
  },
  {
    "text": "yeah yeah I think that for today",
    "start": "6248216",
    "end": "6254433"
  },
  {
    "text": "that's enough I think that next time we will",
    "start": "6254433",
    "end": "6259733"
  },
  {
    "text": "invest more time in defining the behavior of the entity of the aggregate",
    "start": "6260500",
    "end": "6266600"
  },
  {
    "text": "so a quick recap of what we did today today we finished",
    "start": "6270066",
    "end": "6275166"
  },
  {
    "text": "our DSL for defining queries",
    "start": "6275166",
    "end": "6280466"
  },
  {
    "text": "for defining comments for defining",
    "start": "6282833",
    "end": "6287299"
  },
  {
    "text": "events and we also provided function that given a schema",
    "start": "6288066",
    "end": "6294750"
  },
  {
    "text": "of one of those decided some allows you to get which kind of",
    "start": "6295066",
    "end": "6300666"
  },
  {
    "text": "message it really is and we also",
    "start": "6301066",
    "end": "6307633"
  },
  {
    "text": "started scratching out the potential API we want",
    "start": "6308066",
    "end": "6313850"
  },
  {
    "text": "for the event journal of an aggregate maybe we can",
    "start": "6314066",
    "end": "6320066"
  },
  {
    "text": "rename that to event journal event journal",
    "start": "6321183",
    "end": "6328699"
  },
  {
    "text": "yeah and this can be",
    "start": "6334066",
    "end": "6339816"
  },
  {
    "text": "product event journal",
    "start": "6339816",
    "end": "6343566"
  },
  {
    "text": "I will invest more time in thinking what we want to do offline",
    "start": "6357066",
    "end": "6363049"
  },
  {
    "text": "and unfortunately my time is running out and thank you everyone who joined",
    "start": "6364066",
    "end": "6371750"
  },
  {
    "text": "and I hope to see you next time when we will finish",
    "start": "6371750",
    "end": "6377266"
  },
  {
    "text": "our behavior definitions and thanks again everyone",
    "start": "6377266",
    "end": "6383899"
  },
  {
    "text": "and have a nice day at the FFTing see you everyone, bye bye",
    "start": "6383899",
    "end": "6389066"
  }
]