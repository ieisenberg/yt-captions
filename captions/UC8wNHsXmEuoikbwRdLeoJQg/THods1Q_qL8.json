[
  {
    "text": "So what I have here is a plain Remix",
    "start": "4433",
    "end": "11366"
  },
  {
    "text": "project that uses the new Vite plugin so it's configured with Vite and it's a quite",
    "start": "11366",
    "end": "19866"
  },
  {
    "text": "simple standard project. I guess this is a",
    "start": "19866",
    "end": "28400"
  },
  {
    "text": "residual my bootstrapping",
    "start": "28400",
    "end": "32065"
  },
  {
    "text": "So that's fresh. What I have here again is a plain project using",
    "start": "43666",
    "end": "52766"
  },
  {
    "text": "Remix and I am using the Todo MVC UI because of course I have absolutely no idea",
    "start": "52800",
    "end": "61366"
  },
  {
    "text": "how to develop frontends so I'm gonna have to obviously just use something",
    "start": "61366",
    "end": "69500"
  },
  {
    "text": "prepared, something already already prepared. The idea here is to integrate",
    "start": "69633",
    "end": "77500"
  },
  {
    "text": "Remix with Effect. I know there are some public projects that aim to do the same",
    "start": "78033",
    "end": "85433"
  },
  {
    "text": "but I thought we should start from the very beginning. Again I'm not a",
    "start": "85433",
    "end": "92533"
  },
  {
    "text": "Remix expert, I'm by no mean a UI expert but I have used remix in the past and I",
    "start": "92533",
    "end": "100000"
  },
  {
    "text": "like a lot the idea of having loaders and actions to control UI state",
    "start": "100000",
    "end": "106699"
  },
  {
    "text": "and I do believe that Effect is sort of a perfect fit in that case just like with",
    "start": "106733",
    "end": "113000"
  },
  {
    "text": "React server components, the server side elements. Effect is really great",
    "start": "113000",
    "end": "121666"
  },
  {
    "text": "there because they act like APIs and you",
    "start": "121666",
    "end": "127133"
  },
  {
    "text": "don't ship anything to the UI, keeping the UI very thin without",
    "start": "127133",
    "end": "134833"
  },
  {
    "text": "any increased bundle size while having the full power of Effect on the",
    "start": "134833",
    "end": "140333"
  },
  {
    "text": "server. Let's just explore the code. Roughly this is again a very standard",
    "start": "140333",
    "end": "146300"
  },
  {
    "text": "remix package. I have used the plain todo MVC",
    "start": "146300",
    "end": "153099"
  },
  {
    "text": "thing you can see it from the root. I'm just importing the base CSS so there's",
    "start": "154733",
    "end": "161666"
  },
  {
    "text": "nothing fancy here. Just exploring the code I see that there is an index function, the index function should get",
    "start": "161666",
    "end": "170933"
  },
  {
    "text": "some list of todos that currently is mocked up and well it should list the todos",
    "start": "170933",
    "end": "179300"
  },
  {
    "text": "then you have a todo component and in that component you can flag the todo as completed or destroyed",
    "start": "179300",
    "end": "187265"
  },
  {
    "text": "so it should be it should be simple I",
    "start": "187800",
    "end": "193533"
  },
  {
    "text": "think we should start by writing some objectives for for this so maybe objectives.md it's a bit blurry",
    "start": "193533",
    "end": "204566"
  },
  {
    "text": "okay the text size up a level or two would be appreciated. Let's try it like",
    "start": "206000",
    "end": "213599"
  },
  {
    "text": "this might be stream yard that makes it",
    "start": "213599",
    "end": "218966"
  },
  {
    "text": "slightly more blurry. Is it better?",
    "start": "218966",
    "end": "223233"
  },
  {
    "text": "anyway list of objectives. First I'd say",
    "start": "227933",
    "end": "233066"
  },
  {
    "text": "basic Effect in integration with usage of",
    "start": "233066",
    "end": "240765"
  },
  {
    "text": "layers because we're gonna want to run some some services and pretend we have a",
    "start": "241366",
    "end": "248099"
  },
  {
    "text": "fairly complex backend to deal with. Second we would most likely like to",
    "start": "248233",
    "end": "256866"
  },
  {
    "text": "write some sort of integration with opentelemetry. I like telemetry a lot",
    "start": "257233",
    "end": "265433"
  },
  {
    "text": "before telemetry maybe a database potentially using @effect/SQL",
    "start": "267933",
    "end": "278900"
  },
  {
    "text": "maybe not that sure if we should do it",
    "start": "283933",
    "end": "289833"
  },
  {
    "text": "test containers or like a docker compose or maybe even an SQLite yeah that's an",
    "start": "289833",
    "end": "299599"
  },
  {
    "text": "SQLite database we are on a single on a single thread so that that'd be fine",
    "start": "299599",
    "end": "306633"
  },
  {
    "text": "and later on when when we are done what I want to do is test out a",
    "start": "306633",
    "end": "313065"
  },
  {
    "text": "potential integration between layers and test containers to spin up infrastructure",
    "start": "313066",
    "end": "320332"
  },
  {
    "text": "in dev environments I've done that in the in the past my prior job",
    "start": "320333",
    "end": "328466"
  },
  {
    "text": "was working great I was really pleasant with all docker containers from",
    "start": "328466",
    "end": "333500"
  },
  {
    "text": "from a centralized placing code that you can reuse both for testing for",
    "start": "333500",
    "end": "339233"
  },
  {
    "text": "development and so on and so forth but I guess we'll start simple.",
    "start": "339233",
    "end": "344466"
  },
  {
    "text": "first of all let's just const loader let's just test out the",
    "start": "344466",
    "end": "351333"
  },
  {
    "text": "the remix API if I can remember it at all loader function yes there is a",
    "start": "351333",
    "end": "359666"
  },
  {
    "text": "loader function okay it's supposed to be async probably yeah that should return",
    "start": "359666",
    "end": "368900"
  },
  {
    "text": "a list of something I think now they",
    "start": "368900",
    "end": "374666"
  },
  {
    "text": "prefer this way of doing things maybe",
    "start": "374666",
    "end": "380732"
  },
  {
    "text": "just because then you can get the type easily",
    "start": "382866",
    "end": "389733"
  },
  {
    "text": "anyway let's make this return promise of to do array and let's",
    "start": "389733",
    "end": "402066"
  },
  {
    "text": "pretend we have a to do, actually let's not even pretend we have one so this",
    "start": "402066",
    "end": "412033"
  },
  {
    "text": "point here I think I can useLoaderData",
    "start": "412033",
    "end": "417599"
  },
  {
    "text": "yes I do remember correctly and here I should do typeof loader",
    "start": "418333",
    "end": "425566"
  },
  {
    "text": "this is no longer needed because it would be inferred JSON if I object yes",
    "start": "429266",
    "end": "436333"
  },
  {
    "text": "is given that all those types of framework sort of pretend the network",
    "start": "436333",
    "end": "442166"
  },
  {
    "text": "boundary doesn't exist what happens here is that these JSON if I object sort of",
    "start": "442300",
    "end": "450033"
  },
  {
    "text": "maps the type into the equivalent of",
    "start": "451300",
    "end": "458533"
  },
  {
    "text": "doing the JSON stringify and JSON parse on it so for example a date object would",
    "start": "458533",
    "end": "464800"
  },
  {
    "text": "be translated into a string of course we'll try to use effects schema and just pass down the encoded version of the",
    "start": "464800",
    "end": "473033"
  },
  {
    "text": "data so we wouldn't have we wouldn't have this this issue I think I do want",
    "start": "473066",
    "end": "483433"
  },
  {
    "text": "to extract these a bit more but I guess",
    "start": "483433",
    "end": "493166"
  },
  {
    "text": "we can do that we can do that later",
    "start": "493166",
    "end": "496465"
  },
  {
    "text": "yeah no why does it lose the UI",
    "start": "502033",
    "end": "508233"
  },
  {
    "text": "if reload is obsolete okay where is even ",
    "start": "516733",
    "end": "525766"
  },
  {
    "text": "LiveReload. There you go. I could it be that this is the issue",
    "start": "525766",
    "end": "530533"
  },
  {
    "text": "and it's clean it's right. Now I will",
    "start": "536166",
    "end": "541500"
  },
  {
    "text": "save yes yes yes it works todos",
    "start": "541500",
    "end": "550933"
  },
  {
    "text": "todos yes and doesn't lose the state and",
    "start": "550933",
    "end": "556032"
  },
  {
    "text": "I folks you're looking at me doing front-end",
    "start": "556033",
    "end": "562233"
  },
  {
    "text": "development I thought this was never gonna happen again but I guess life is too",
    "start": "562266",
    "end": "568399"
  },
  {
    "text": "short to make such promises. \"Better at",
    "start": "568399",
    "end": "575532"
  },
  {
    "text": "front-end than me already\" no probably not we're gonna have fun here okay I think we",
    "start": "575533",
    "end": "585500"
  },
  {
    "text": "are now at the point where we could PNPM install our preferred library in",
    "start": "585500",
    "end": "592466"
  },
  {
    "text": "the world of course is Effect and I",
    "start": "592466",
    "end": "603033"
  },
  {
    "text": "really have to do this here? Probably not. There must be a better way",
    "start": "603033",
    "end": "608066"
  },
  {
    "text": "import from Effect so the",
    "start": "610399",
    "end": "625600"
  },
  {
    "text": "dumb way of doing this would obviously be like just probably doing Effect.runPromise",
    "start": "625600",
    "end": "645433"
  },
  {
    "text": "Effect.gen function",
    "start": "645433",
    "end": "650865"
  },
  {
    "text": "I'm gonna not use the yield adapter because just why not wanna",
    "start": "650866",
    "end": "665633"
  },
  {
    "text": "succeed with a to-do array of course I",
    "start": "665633",
    "end": "671266"
  },
  {
    "text": "want this to be empty and the interfaces",
    "start": "671266",
    "end": "677933"
  },
  {
    "text": "already broke amazing okay I guess",
    "start": "677933",
    "end": "683899"
  },
  {
    "text": "try to figure out what is going on here after the stream anyway this would be.",
    "start": "683933",
    "end": "697865"
  },
  {
    "text": "I wouldn't say that this is a way of integrating effect this is just a way of running effect to a promise so ideally",
    "start": "697866",
    "end": "705600"
  },
  {
    "text": "here what I would like is to be able to specify the loader let's let's actually",
    "start": "705600",
    "end": "714233"
  },
  {
    "text": "make export const loader2 function what I would really love to do is say",
    "start": "714233",
    "end": "722733"
  },
  {
    "text": "loaderFunction Effect.succeed",
    "start": "722733",
    "end": "731733"
  },
  {
    "text": "this is how I would like right so I don't have to specify",
    "start": "746666",
    "end": "752399"
  },
  {
    "text": "satisfies and so on and so forth let's start by writing this utility",
    "start": "752399",
    "end": "758300"
  },
  {
    "text": "and we'll improve it later. Const loader function so this will",
    "start": "758300",
    "end": "768066"
  },
  {
    "text": "have for sure some generics so of course JS is",
    "start": "768066",
    "end": "773100"
  },
  {
    "text": "hurting me 'course but I have more than one generic so I'm fine I want to run a",
    "start": "773399",
    "end": "782433"
  },
  {
    "text": "function body the arguments are going to",
    "start": "782433",
    "end": "790532"
  },
  {
    "text": "be the same parameters as a loader function and the return type is going to",
    "start": "790533",
    "end": "799066"
  },
  {
    "text": "be an effect of \"A\" that may pay for an error",
    "start": "799066",
    "end": "805133"
  },
  {
    "text": "\"E\" and that currently has a never as an environment because we don't really know",
    "start": "805133",
    "end": "810666"
  },
  {
    "text": "how to link up the environment just yet and I ideally this returns a loader",
    "start": "810666",
    "end": "819833"
  },
  {
    "text": "function of \"A\". Is it? No there are way to",
    "start": "819866",
    "end": "835333"
  },
  {
    "text": "type these well let's type it manually",
    "start": "835333",
    "end": "840066"
  },
  {
    "text": "We know what the signature should be",
    "start": "841800",
    "end": "844800"
  },
  {
    "text": "This is just gonna dumb rewrite",
    "start": "854366",
    "end": "858133"
  },
  {
    "text": "arguments, effect.runPromise",
    "start": "860266",
    "end": "866600"
  },
  {
    "text": "body I can still write a generic function. I like",
    "start": "866600",
    "end": "878133"
  },
  {
    "text": "this and I haven't yet made the plug-in",
    "start": "878133",
    "end": "883333"
  },
  {
    "text": "doing for these automatically which means",
    "start": "883366",
    "end": "889966"
  },
  {
    "text": "I'm gonna have to do this manually. Now actually that's",
    "start": "889966",
    "end": "900133"
  },
  {
    "text": "fine like it is. Okay loader function arguments that's weird okay",
    "start": "900166",
    "end": "912833"
  },
  {
    "text": "that's a single argument so we don't even need to do this that's fine",
    "start": "912833",
    "end": "918133"
  },
  {
    "text": "and remove this call it loader and this will hopefully",
    "start": "918133",
    "end": "926433"
  },
  {
    "text": "work yes it's work like it was I could",
    "start": "926466",
    "end": "934066"
  },
  {
    "text": "not figure out a way to link up the environment with remix loaders in a way that I was",
    "start": "934066",
    "end": "939266"
  },
  {
    "text": "happy with so I can't wait to see how you'd do it lol well I hope I can do that. I don't",
    "start": "939266",
    "end": "948600"
  },
  {
    "text": "know if if it's gonna satisfy you but I'll try.",
    "start": "948600",
    "end": "952466"
  },
  {
    "text": "I want to extract stuff out I don't I just",
    "start": "955752",
    "end": "960833"
  },
  {
    "text": "don't like to have everything in the same directory let's make a lib folder with utilities.ts",
    "start": "960833",
    "end": "970000"
  },
  {
    "text": "and of course I have to import some things",
    "start": "973855",
    "end": "980500"
  },
  {
    "text": "just enough to know where Effect come from yes of course you're VScode",
    "start": "983414",
    "end": "990466"
  },
  {
    "text": "after all now this function is no longer function in",
    "start": "990466",
    "end": "996566"
  },
  {
    "text": "vehicles yikes well if this is going to work",
    "start": "996600",
    "end": "1005134"
  },
  {
    "text": "this keeps working okay so we have our function",
    "start": "1009080",
    "end": "1020033"
  },
  {
    "text": "I guess then let's let's start just. \"My",
    "start": "1020199",
    "end": "1025766"
  },
  {
    "text": "VScode is running at 40 FPS I don't know why I'm using",
    "start": "1025766",
    "end": "1032233"
  },
  {
    "text": "stream yard maybe it is stream yard I'll try to use OBS next time to see if it to see if it",
    "start": "1032233",
    "end": "1039165"
  },
  {
    "text": "streams better I might have to use Dillon support in order to do this",
    "start": "1039166",
    "end": "1046433"
  },
  {
    "text": "properly and I see here that there's already 25 people! Hi everybody! I",
    "start": "1046433",
    "end": "1052433"
  },
  {
    "text": "didn't expect this to be that crowded now I'm gonna screw up life it's fantastic anyway we",
    "start": "1052433",
    "end": "1063000"
  },
  {
    "text": "were saying that we would like to use some environment here",
    "start": "1063000",
    "end": "1069100"
  },
  {
    "text": "and not just a dumb loader function well let's have fun trying to do that. First",
    "start": "1069166",
    "end": "1080166"
  },
  {
    "text": "of all we should describe a little bit the situation which is common",
    "start": "1080166",
    "end": "1086833"
  },
  {
    "text": "in this case we are using a framework and usually when you have a framework let it be nextjs",
    "start": "1086833",
    "end": "1094199"
  },
  {
    "text": "let it be remix let it be whatever else express you have",
    "start": "1094199",
    "end": "1101566"
  },
  {
    "text": "you have different entry points that means that you don't really control the",
    "start": "1101833",
    "end": "1107300"
  },
  {
    "text": "main of your program so you won't be able to just provide the",
    "start": "1107300",
    "end": "1114699"
  },
  {
    "text": "layers you want to your to your how to say to your main function",
    "start": "1114699",
    "end": "1124733"
  },
  {
    "text": "and they won't be automatically propagated for those types of cases Tim Smart has",
    "start": "1124733",
    "end": "1132333"
  },
  {
    "text": "made a has made a utility called a managed runtime then we can use to create a runtime that",
    "start": "1132333",
    "end": "1140266"
  },
  {
    "text": "we can reuse then in order to do this stuff so I guess we should",
    "start": "1140266",
    "end": "1146933"
  },
  {
    "text": "we should use this managed runtime let's",
    "start": "1146933",
    "end": "1152966"
  },
  {
    "text": "import managed runtime let's import layer just gonna",
    "start": "1152966",
    "end": "1158166"
  },
  {
    "text": "show how this works you know normal case const managed runtime.make this takes a",
    "start": "1158333",
    "end": "1171766"
  },
  {
    "text": "layer as an argument that's layer.empty for now and here we have our",
    "start": "1171766",
    "end": "1181066"
  },
  {
    "text": "runtime and once we have runtime we can use it now",
    "start": "1181066",
    "end": "1193033"
  },
  {
    "text": "managed runtime is generic over two parameters so in theory by where to do",
    "start": "1193066",
    "end": "1201733"
  },
  {
    "text": "these in location code I would just try to extract the type of",
    "start": "1201733",
    "end": "1209000"
  },
  {
    "text": "environment the type of the context from this managed runtime and propagate it into here so I could",
    "start": "1209000",
    "end": "1217699"
  },
  {
    "text": "pass the thing but I want to be even a little bit smarter",
    "start": "1217699",
    "end": "1222233"
  },
  {
    "text": "I really fear that this is gonna backfire quickly but let's see make",
    "start": "1223666",
    "end": "1229632"
  },
  {
    "text": "remix runtime so we want to make a",
    "start": "1229633",
    "end": "1235133"
  },
  {
    "text": "function to create a remix runtime and yes we want to pass it a",
    "start": "1235466",
    "end": "1246966"
  },
  {
    "text": "layer.layer that creates",
    "start": "1246966",
    "end": "1252332"
  },
  {
    "text": "context which may fit for an error E and",
    "start": "1252466",
    "end": "1258732"
  },
  {
    "text": "that does not require any initial context so inside here we can",
    "start": "1258733",
    "end": "1268398"
  },
  {
    "text": "just quite brutally copy whatever we have",
    "start": "1268399",
    "end": "1274066"
  },
  {
    "text": "done here of course the export const won't work anymore but I can return the loader function and",
    "start": "1274066",
    "end": "1287199"
  },
  {
    "text": "at this point inside here I do have my beautiful R parameter and here I have to pass the layer okay",
    "start": "1287199",
    "end": "1302866"
  },
  {
    "text": "this seems to work so let's make a directory called services",
    "start": "1302866",
    "end": "1311866"
  },
  {
    "text": "and a index.ts here export const Live layer.empty",
    "start": "1313300",
    "end": "1327399"
  },
  {
    "text": "No, actually I don't want to do this I want",
    "start": "1333957",
    "end": "1342166"
  },
  {
    "text": "to do it like that make remix runtime layer.empty",
    "start": "1342166",
    "end": "1348333"
  },
  {
    "text": "this ideally gives me what yeah I have to",
    "start": "1351733",
    "end": "1361533"
  },
  {
    "text": "return it this way yes and",
    "start": "1361533",
    "end": "1369166"
  },
  {
    "text": "ideally I will add like loader function and so on and so forth",
    "start": "1369166",
    "end": "1375132"
  },
  {
    "text": "later on so now that we have our loader function we can",
    "start": "1375133",
    "end": "1385233"
  },
  {
    "text": "clean up from here and say that we want this from",
    "start": "1385333",
    "end": "1392132"
  },
  {
    "text": "what was the",
    "start": "1392133",
    "end": "1397833"
  },
  {
    "text": "tilde",
    "start": "1407964",
    "end": "1409964"
  },
  {
    "text": "what am I doing wrong?",
    "start": "1423466",
    "end": "1425199"
  },
  {
    "text": "they have to go inside inside app yes",
    "start": "1429866",
    "end": "1435333"
  },
  {
    "text": "that's sort of right",
    "start": "1435333",
    "end": "1438633"
  },
  {
    "text": "okay this can be found",
    "start": "1445066",
    "end": "1449733"
  },
  {
    "text": "can find module the utilities?",
    "start": "1470666",
    "end": "1475399"
  },
  {
    "text": "why I'm screwing up this order",
    "start": "1488793",
    "end": "1495066"
  },
  {
    "text": "no I had to save of course",
    "start": "1499733",
    "end": "1506033"
  },
  {
    "text": "Federico says I notice every remix",
    "start": "1506066",
    "end": "1515366"
  },
  {
    "text": "adapter uses high order function for loaders is there any reason you could call a managed",
    "start": "1515366",
    "end": "1521500"
  },
  {
    "text": "runtime as a body of the loader without doing the higher order function or you could not call yes",
    "start": "1521500",
    "end": "1528866"
  },
  {
    "text": "of course of course you could directly use the",
    "start": "1528866",
    "end": "1533366"
  },
  {
    "text": "the managed runtime I wanted to make this a little bit more a little bit more generic",
    "start": "1534033",
    "end": "1539399"
  },
  {
    "text": "and a little bit more ergonomic because otherwise you would create the managed",
    "start": "1540033",
    "end": "1545233"
  },
  {
    "text": "runtime and then you would manually run promise in every",
    "start": "1545233",
    "end": "1552266"
  },
  {
    "text": "single place which is a bit a bit verbose",
    "start": "1552266",
    "end": "1556433"
  },
  {
    "text": "okay so here we are at a good point",
    "start": "1563399",
    "end": "1567066"
  },
  {
    "text": "let's try to write our to do",
    "start": "1569166",
    "end": "1575333"
  },
  {
    "text": "let's do todorepo.ts we're gonna create a service here",
    "start": "1577399",
    "end": "1583966"
  },
  {
    "text": "we're gonna say export const make TodoRepo",
    "start": "1583966",
    "end": "1592565"
  },
  {
    "text": "actually there's no need to import this, can be internal",
    "start": "1592566",
    "end": "1597600"
  },
  {
    "text": "let's use a synchronous function for now I assume this later on is going to use",
    "start": "1603333",
    "end": "1608332"
  },
  {
    "text": "a database implementation so I'm just writing this make",
    "start": "1608766",
    "end": "1614966"
  },
  {
    "text": "function in an effectful way and here I want to return something that",
    "start": "1614966",
    "end": "1622000"
  },
  {
    "text": "gets me the todos which for now get all todos",
    "start": "1622000",
    "end": "1628366"
  },
  {
    "text": "this can directly",
    "start": "1628366",
    "end": "1633666"
  },
  {
    "text": "be an effect which succeed with a todo array that is empty by default",
    "start": "1633666",
    "end": "1643966"
  },
  {
    "text": "this type probably doesn't belong here",
    "start": "1646966",
    "end": "1653766"
  },
  {
    "text": "let's export this out move to a new file to do",
    "start": "1653766",
    "end": "1659299"
  },
  {
    "text": "let's go to directory types for now just to put up this type here",
    "start": "1662033",
    "end": "1672299"
  },
  {
    "text": "it looks better and now we are going to make the consumable service",
    "start": "1681100",
    "end": "1688166"
  },
  {
    "text": "which we'll call todorepo plus repo extends effect.tag here we",
    "start": "1688166",
    "end": "1698366"
  },
  {
    "text": "are going to use the effect.tag",
    "start": "1698366",
    "end": "1701833"
  },
  {
    "text": "services to do repo the difference between context.tag",
    "start": "1703666",
    "end": "1710000"
  },
  {
    "text": "and effect.tag is that with effect.tag you get for free and",
    "start": "1710000",
    "end": "1716266"
  },
  {
    "text": "the stream would say who doesn't like free stuff you get access to functions automatically",
    "start": "1716266",
    "end": "1726033"
  },
  {
    "text": "let's see what what I mean to do repo",
    "start": "1726033",
    "end": "1730933"
  },
  {
    "text": "effect.success",
    "start": "1733600",
    "end": "1739065"
  },
  {
    "text": "and I want to use the return type no actually I want to use type of maketodorepo",
    "start": "1744266",
    "end": "1757866"
  },
  {
    "text": "okay so this is my tag now that I have my tag I want to get a",
    "start": "1757866",
    "end": "1766933"
  },
  {
    "text": "layer out of it static live layer.effect this makeTodoRepo",
    "start": "1766933",
    "end": "1781833"
  },
  {
    "text": "let's check the type this looks good",
    "start": "1781833",
    "end": "1785399"
  },
  {
    "text": "let's wire these up prepare a merge all predicting that we're",
    "start": "1787733",
    "end": "1795866"
  },
  {
    "text": "going to have more services that we want to that we want to use and TodoRepo.live good",
    "start": "1795866",
    "end": "1807299"
  },
  {
    "text": "why \"make\"? what's the idea behind? ",
    "start": "1807300",
    "end": "1812933"
  },
  {
    "text": "see it's being used a lot in effect",
    "start": "1812933",
    "end": "1815866"
  },
  {
    "text": "which make?",
    "start": "1822199",
    "end": "1824565"
  },
  {
    "text": "you mean in this pattern of having a kind",
    "start": "1829366",
    "end": "1835433"
  },
  {
    "text": "of a factory that creates the shape and using that",
    "start": "1835433",
    "end": "1840966"
  },
  {
    "text": "if if the question is why do we do that the reason we do that is because I am lazy as hell",
    "start": "1841733",
    "end": "1848033"
  },
  {
    "text": "and I do not like to write types manually I actually quite hate",
    "start": "1848366",
    "end": "1854132"
  },
  {
    "text": "write types manually and this way I can have an effect that",
    "start": "1854133",
    "end": "1860132"
  },
  {
    "text": "creates my shape for the service and then I'm using that to infer the actual structure",
    "start": "1860133",
    "end": "1868533"
  },
  {
    "text": "and once I have everything done in this way",
    "start": "1868533",
    "end": "1875398"
  },
  {
    "text": "hopefully if I haven't messed up I think I would be able to say",
    "start": "1876033",
    "end": "1881333"
  },
  {
    "text": "here const todos equal yield",
    "start": "1881333",
    "end": "1887533"
  },
  {
    "text": "I love not not not having to write the adapter call anymore TodoRepo.getAllTodos",
    "start": "1888433",
    "end": "1898333"
  },
  {
    "text": "and I will just return my todos",
    "start": "1898333",
    "end": "1903533"
  },
  {
    "text": "and that's sort of a good start everything still compiles it still runs",
    "start": "1905866",
    "end": "1913466"
  },
  {
    "text": "so we haven't messed up anything and the next thing to do is",
    "start": "1913466",
    "end": "1919966"
  },
  {
    "text": "actually make this type slightly smarter let's make this a date",
    "start": "1919966",
    "end": "1925533"
  },
  {
    "text": "let's pretend we have types that come",
    "start": "1928266",
    "end": "1933466"
  },
  {
    "text": "across the network and let's mock a few todos in here",
    "start": "1933466",
    "end": "1941233"
  },
  {
    "text": "so I need one because why not",
    "start": "1941266",
    "end": "1947699"
  },
  {
    "text": "new date status created and title well well well",
    "start": "1949002",
    "end": "1963733"
  },
  {
    "text": "look who's streaming nice",
    "start": "1963733",
    "end": "1972366"
  },
  {
    "text": "and we start to see some",
    "start": "1972366",
    "end": "1980666"
  },
  {
    "text": "errors and that's exactly what I wanted to get I didn't think remix",
    "start": "1982033",
    "end": "1987199"
  },
  {
    "text": "was smart enough to realize but I guess it's because this takes a",
    "start": "1987199",
    "end": "1996333"
  },
  {
    "text": "todo so here I could of course use the the helper function from remix and use the JSONify object",
    "start": "1996333",
    "end": "2006266"
  },
  {
    "text": "but really why would we ever want to do that when we have a way of serializing the",
    "start": "2006266",
    "end": "2012733"
  },
  {
    "text": "data and to know the the type of the serialized",
    "start": "2012733",
    "end": "2017299"
  },
  {
    "text": "port thank you Mike's for what you're",
    "start": "2018333",
    "end": "2023733"
  },
  {
    "text": "doing finally I can start forgetting about pure script",
    "start": "2023733",
    "end": "2026933"
  },
  {
    "text": "pure script is both a gift and a curse at the same time anyway",
    "start": "2030366",
    "end": "2035733"
  },
  {
    "text": "let's not let's not enter that discussion where I wanted to go is we have schema in effect so",
    "start": "2035733",
    "end": "2043966"
  },
  {
    "text": "let's install effect schema of course I am not capable",
    "start": "2043966",
    "end": "2050833"
  },
  {
    "text": "of installing the package because you're on your live you my sub",
    "start": "2050833",
    "end": "2058965"
  },
  {
    "text": "stuff which is great I want to define this type using schema",
    "start": "2058966",
    "end": "2065533"
  },
  {
    "text": "now I haven't used schema in a little you might be surprised but I've",
    "start": "2069800",
    "end": "2075633"
  },
  {
    "text": "been passing on on the core effect and most of the work has been done",
    "start": "2075633",
    "end": "2080966"
  },
  {
    "text": "by by the amazing Giulio Canti so I guess I'll figure",
    "start": "2080966",
    "end": "2086432"
  },
  {
    "text": "stuff out while we do it which is even better because we",
    "start": "2086533",
    "end": "2091866"
  },
  {
    "text": "are trying to speak to new people in the effect ecosystem uh so",
    "start": "2091866",
    "end": "2100633"
  },
  {
    "text": "let's first import it I think VScode should be smart enough but it's",
    "start": "2100633",
    "end": "2106866"
  },
  {
    "text": "the first time it sees it so maybe maybe it's not",
    "start": "2106866",
    "end": "2112966"
  },
  {
    "text": "schema good class schema.class",
    "start": "2113600",
    "end": "2122000"
  },
  {
    "text": "this takes an identifier to identify the class let's call it to do",
    "start": "2126133",
    "end": "2130166"
  },
  {
    "text": "then it takes a parameter for the fields",
    "start": "2131800",
    "end": "2137100"
  },
  {
    "text": "and",
    "start": "2138033",
    "end": "2140833"
  },
  {
    "text": "here wants it to be export class to do",
    "start": "2145333",
    "end": "2151166"
  },
  {
    "text": "let's call it todo2 at the time being actually no let's call it to do",
    "start": "2152266",
    "end": "2156965"
  },
  {
    "text": "and let's call it this to do too stands",
    "start": "2157966",
    "end": "2162166"
  },
  {
    "text": "a class pass the to do here and",
    "start": "2163566",
    "end": "2170166"
  },
  {
    "text": "this amazingly works we have an id which is a schema.number",
    "start": "2170166",
    "end": "2176233"
  },
  {
    "text": "we have a title which is a schema.string",
    "start": "2178766",
    "end": "2184933"
  },
  {
    "text": "then we have createdAt that is a schema.DateFromString",
    "start": "2187866",
    "end": "2195733"
  },
  {
    "text": "because we want to pass down a string on the wire we don't want to pass the date and status which is",
    "start": "2195733",
    "end": "2205933"
  },
  {
    "text": "a schema.boolean okay okay",
    "start": "2205933",
    "end": "2210765"
  },
  {
    "text": "amazing we have our to do type and now we want to export",
    "start": "2212366",
    "end": "2217833"
  },
  {
    "text": "interface called todoEncoded and",
    "start": "2221333",
    "end": "2226866"
  },
  {
    "text": "this interface we want to derive from schema.encoded",
    "start": "2226866",
    "end": "2238166"
  },
  {
    "text": "type of to do",
    "start": "2238166",
    "end": "2243233"
  },
  {
    "text": "and in our",
    "start": "2246214",
    "end": "2251899"
  },
  {
    "text": "where is it routes index to do row here we want to take the to do encoded",
    "start": "2254266",
    "end": "2262265"
  },
  {
    "text": "boolean string because it's not a boolean of course",
    "start": "2268666",
    "end": "2273033"
  },
  {
    "text": "it's a literal called created completed",
    "start": "2275566",
    "end": "2283432"
  },
  {
    "text": "i wouldn't live without type script i i don't know how people still write javascript without types \"Schema.Struct versus Schema.Class\"",
    "start": "2288833",
    "end": "2299333"
  },
  {
    "text": "great question Milad so the question is why have we used",
    "start": "2299333",
    "end": "2306000"
  },
  {
    "text": "schema.class instead of using schema.struct the point is classes provide they are the",
    "start": "2306000",
    "end": "2314733"
  },
  {
    "text": "only construct in type script where you can define um a type and a value at the same time",
    "start": "2314733",
    "end": "2324366"
  },
  {
    "text": "and these allows things such as schema.decode",
    "start": "2324366",
    "end": "2332632"
  },
  {
    "text": "to do whatever they called from unknown let's",
    "start": "2336933",
    "end": "2345733"
  },
  {
    "text": "check the return type here you can see that we get",
    "start": "2345733",
    "end": "2353533"
  },
  {
    "text": "automatically the take value so the the name",
    "start": "2354666",
    "end": "2360733"
  },
  {
    "text": "if i was to use schema.struct I would get here um",
    "start": "2361166",
    "end": "2367965"
  },
  {
    "text": "transparent type which is an anonymous type with id title created at and so on",
    "start": "2367966",
    "end": "2374333"
  },
  {
    "text": "and so forth this is of course a matter of preference i i prefer to work with short names instead",
    "start": "2374333",
    "end": "2380833"
  },
  {
    "text": "of with anonymous types that that tend to explode especially when you",
    "start": "2380833",
    "end": "2388833"
  },
  {
    "text": "have many many things and classes way of compacting",
    "start": "2388833",
    "end": "2393466"
  },
  {
    "text": "that otherwise you would have first to define the struct then to define the",
    "start": "2394366",
    "end": "2400733"
  },
  {
    "text": "interface and then to you would have to cast the schema to use",
    "start": "2400733",
    "end": "2407333"
  },
  {
    "text": "the interface which is not not ideal, doable",
    "start": "2407333",
    "end": "2412699"
  },
  {
    "text": "but not ideal as also classes",
    "start": "2412766",
    "end": "2419633"
  },
  {
    "text": "have the static side and the instance side so you'll be",
    "start": "2419633",
    "end": "2426633"
  },
  {
    "text": "able to for example add if i wanted i could do static parse i",
    "start": "2426633",
    "end": "2434466"
  },
  {
    "text": "could say then schema.decode",
    "start": "2434466",
    "end": "2439166"
  },
  {
    "text": "unknown these and you know you would put",
    "start": "2441133",
    "end": "2449399"
  },
  {
    "text": "functions and so on and so forth",
    "start": "2449399",
    "end": "2451333"
  },
  {
    "text": "actually I quite like this decode",
    "start": "2455266",
    "end": "2460399"
  },
  {
    "text": "wondering if we can even put this automatically but i know that Giulio is working on a minor",
    "start": "2466933",
    "end": "2471766"
  },
  {
    "text": "where ideally one should be able to do automatically this decode already for",
    "start": "2472199",
    "end": "2478300"
  },
  {
    "text": "every schema not just for classes anyway i quite like to do this",
    "start": "2478300",
    "end": "2484199"
  },
  {
    "text": "point being now in our repository we no",
    "start": "2484199",
    "end": "2489866"
  },
  {
    "text": "longer want to return this thing but we want to return the",
    "start": "2489866",
    "end": "2498133"
  },
  {
    "text": "encoded version",
    "start": "2498133",
    "end": "2501100"
  },
  {
    "text": "and static",
    "start": "2503966",
    "end": "2509233"
  },
  {
    "text": "encode schema.encode",
    "start": "2513466",
    "end": "2517933"
  },
  {
    "text": "schema.encode is the effectful version it's perfect and now",
    "start": "2522533",
    "end": "2529633"
  },
  {
    "text": "here let me take this",
    "start": "2529633",
    "end": "2533166"
  },
  {
    "text": "let's write this using a generator just to show people that you don't have to",
    "start": "2537199",
    "end": "2541366"
  },
  {
    "text": "know a lot of functional APIs you can just use Effect stuff all",
    "start": "2542666",
    "end": "2548233"
  },
  {
    "text": "around and we will be",
    "start": "2548233",
    "end": "2553932"
  },
  {
    "text": "so first let's pretend we have a list of todos which the next time we will",
    "start": "2556666",
    "end": "2564366"
  },
  {
    "text": "get a database we have a constructor nice nice",
    "start": "2568133",
    "end": "2577166"
  },
  {
    "text": "also the other reason why i would like to use classes is because i get constructor free",
    "start": "2581233",
    "end": "2585733"
  },
  {
    "text": "so you define a type you define a value you define a constructor function in one shot",
    "start": "2586933",
    "end": "2592099"
  },
  {
    "text": "now that i have this todo what i want to return is as we said",
    "start": "2596166",
    "end": "2602033"
  },
  {
    "text": "the encoded value but of course i don't want to return a single one so i want to return",
    "start": "2604933",
    "end": "2611800"
  },
  {
    "text": "schema.encode schema.array",
    "start": "2613066",
    "end": "2618033"
  },
  {
    "text": "todo and todo",
    "start": "2621766",
    "end": "2628433"
  },
  {
    "text": "so this is again completely used i guess",
    "start": "2628433",
    "end": "2635533"
  },
  {
    "text": "i could say encode array let's say schema.array",
    "start": "2635533",
    "end": "2640265"
  },
  {
    "text": "and then just todo.encodeArray todos",
    "start": "2645633",
    "end": "2652000"
  },
  {
    "text": "good good good at this point let's",
    "start": "2652000",
    "end": "2657466"
  },
  {
    "text": "organize the imports check this type of this",
    "start": "2657466",
    "end": "2663699"
  },
  {
    "text": "get all todos as you can see returns the",
    "start": "2663866",
    "end": "2669666"
  },
  {
    "text": "encoded type and you can recognize that because createAt is now is now a string, used set Date",
    "start": "2669666",
    "end": "2681566"
  },
  {
    "text": "in the start so this is going to be automatically compatible with our todo encoded thing",
    "start": "2681566",
    "end": "2689866"
  },
  {
    "text": "and by the way you see that here we can't easily",
    "start": "2689866",
    "end": "2695666"
  },
  {
    "text": "i would ideally want to have these as todo encoded but it's not so easy to",
    "start": "2697333",
    "end": "2703566"
  },
  {
    "text": "to get and and we don't quite care to be honest because once we use this function",
    "start": "2705399",
    "end": "2712333"
  },
  {
    "text": "we cannot even do and for that todos",
    "start": "2713466",
    "end": "2718600"
  },
  {
    "text": "const todos encoded with todo encoded array",
    "start": "2718600",
    "end": "2729000"
  },
  {
    "text": "todo encoded array",
    "start": "2736366",
    "end": "2739000"
  },
  {
    "text": "so this complains because it's readonly",
    "start": "2749433",
    "end": "2754266"
  },
  {
    "text": "i like much more this way",
    "start": "2758500",
    "end": "2765300"
  },
  {
    "text": "so let's just call this",
    "start": "2765333",
    "end": "2772699"
  },
  {
    "text": "encoded let's return this i have prettier and not the dprint i'm",
    "start": "2772699",
    "end": "2787000"
  },
  {
    "text": "gonna give the repository to use dprint so we have a little bit nicer formatting",
    "start": "2787000",
    "end": "2793033"
  },
  {
    "text": "now this type is dead clean and when we",
    "start": "2795066",
    "end": "2801199"
  },
  {
    "text": "use it in our index route we get",
    "start": "2801199",
    "end": "2810899"
  },
  {
    "text": "that loader function returns a todo",
    "start": "2810933",
    "end": "2816566"
  },
  {
    "text": "encoded right now here of course i'm using a generator just for fun because i assumed we had",
    "start": "2816566",
    "end": "2825266"
  },
  {
    "text": "more things. Patrick you like namespaces i don't",
    "start": "2825266",
    "end": "2831500"
  },
  {
    "text": "but yes it is much nicer and it's also a type so so that's actually let's show that",
    "start": "2832866",
    "end": "2840733"
  },
  {
    "text": "Patrick's suggestion",
    "start": "2840733",
    "end": "2843899"
  },
  {
    "text": "is to say export namespace todo i guess i need to declare",
    "start": "2846133",
    "end": "2854133"
  },
  {
    "text": "and export encoded so instead of saying todo",
    "start": "2858333",
    "end": "2865533"
  },
  {
    "text": "encoded you can say todo.encoded and you don't need to export between separated things it's",
    "start": "2865533",
    "end": "2872699"
  },
  {
    "text": "already everything back here by the way Patrick do you have a way of automatically casting these",
    "start": "2872699",
    "end": "2882233"
  },
  {
    "text": "to return i guess actually i do let me see",
    "start": "2882233",
    "end": "2889966"
  },
  {
    "text": "flow yes there is flow this i could use it effect.map",
    "start": "2889966",
    "end": "2897733"
  },
  {
    "text": "todos todo.encoded",
    "start": "2905199",
    "end": "2909966"
  },
  {
    "text": "yes so in here by the way i've just",
    "start": "2921100",
    "end": "2926233"
  },
  {
    "text": "clicked one advantage of using this pattern is that you",
    "start": "2926233",
    "end": "2933266"
  },
  {
    "text": "have you have go to definition",
    "start": "2933266",
    "end": "2936766"
  },
  {
    "text": "so you right click here and browse and it",
    "start": "2938433",
    "end": "2943699"
  },
  {
    "text": "takes you to the exact point advantage between that now i no",
    "start": "2943699",
    "end": "2948866"
  },
  {
    "text": "longer have to do this and hopefully this is",
    "start": "2948866",
    "end": "2954566"
  },
  {
    "text": "still as clean as it used to be",
    "start": "2954566",
    "end": "2956432"
  },
  {
    "text": "i'm going to remove this generator which was slightly redundant",
    "start": "2962133",
    "end": "2966000"
  },
  {
    "text": "assuming i'm able to fix the ui part this is starting to look to look nice so",
    "start": "2985033",
    "end": "2995333"
  },
  {
    "text": "i guess we build for today the first the first part of this uh let's let's",
    "start": "2995333",
    "end": "3001800"
  },
  {
    "text": "read out some questions would be cool we'll",
    "start": "3001800",
    "end": "3007433"
  },
  {
    "text": "have todo.encoded by default sure it would",
    "start": "3007433",
    "end": "3012000"
  },
  {
    "text": "unfortunately we don't yet know how i don't think it's possible",
    "start": "3012600",
    "end": "3020233"
  },
  {
    "text": "because that would require defining two types at once when we define",
    "start": "3020233",
    "end": "3027133"
  },
  {
    "text": "this schema",
    "start": "3027133",
    "end": "3030466"
  },
  {
    "text": "there might be a different way that i don't know about but",
    "start": "3035399",
    "end": "3038100"
  },
  {
    "text": "currently we can only get the decoded part",
    "start": "3040666",
    "end": "3045800"
  },
  {
    "text": "there's so many misconceptions about classes in js/ts",
    "start": "3050266",
    "end": "3056100"
  },
  {
    "text": "of course and those misconceptions are usually from people from functional programming because classes means oop",
    "start": "3056100",
    "end": "3063399"
  },
  {
    "text": "means bad bad bad the reality the reality is that actually in typescript the class is just a",
    "start": "3063399",
    "end": "3069933"
  },
  {
    "text": "constructor function process structural type nothing more than that and if you want to do",
    "start": "3069933",
    "end": "3076132"
  },
  {
    "text": "oop you do it even without classes so that's really that's really up to you uh would you ever",
    "start": "3076133",
    "end": "3086633"
  },
  {
    "text": "use schema.decode when using a class instead of a constructor they are",
    "start": "3086633",
    "end": "3092100"
  },
  {
    "text": "different they are different things you you construct from",
    "start": "3092100",
    "end": "3096000"
  },
  {
    "text": "known types from known values and decoding is from the encoded version so",
    "start": "3097699",
    "end": "3104933"
  },
  {
    "text": "it depends what you have to do they have a different type signature so it really depends what you have to do",
    "start": "3104933",
    "end": "3110966"
  },
  {
    "text": "am i right there is no need to redefine",
    "start": "3111000",
    "end": "3117166"
  },
  {
    "text": "the schema with opaque types now",
    "start": "3117166",
    "end": "3119899"
  },
  {
    "text": "i don't think i get that very easy if you want the types to be",
    "start": "3125133",
    "end": "3134166"
  },
  {
    "text": "opaque especially if you want the encoded type to be opaque for the plain type here i'm not",
    "start": "3134166",
    "end": "3142066"
  },
  {
    "text": "i'm not redefining the plain type because i'm using i'm using the class but i may not understood the question",
    "start": "3142066",
    "end": "3150199"
  },
  {
    "text": "is flow like pipe flow is like pipe except that the first",
    "start": "3155699",
    "end": "3162233"
  },
  {
    "text": "function the first argument that it takes is a function and it's not the value so",
    "start": "3162233",
    "end": "3167866"
  },
  {
    "text": "if you see the return type here the arguments are",
    "start": "3167866",
    "end": "3172733"
  },
  {
    "text": "are passed automatically so it's flow is just function composition",
    "start": "3173300",
    "end": "3177166"
  },
  {
    "text": "why declare namespace and not just namespace i guess in this case we could what i'm trying",
    "start": "3181066",
    "end": "3188333"
  },
  {
    "text": "to prevent is doing hey which would lead",
    "start": "3188366",
    "end": "3195566"
  },
  {
    "text": "to a conflict because we will have two things called to do and i don't even know why",
    "start": "3195566",
    "end": "3201733"
  },
  {
    "text": "typescript does not complain in this case",
    "start": "3201733",
    "end": "3204033"
  },
  {
    "text": "so in the same spirit if i do it wow it still doesn't",
    "start": "3209100",
    "end": "3215833"
  },
  {
    "text": "i guess it's partially a whole so if that's the",
    "start": "3217149",
    "end": "3223132"
  },
  {
    "text": "case we can we can use this syntax again don't don't use namespace i'm",
    "start": "3223133",
    "end": "3230100"
  },
  {
    "text": "listening to Patrick i should have learned not to listen to",
    "start": "3230100",
    "end": "3235399"
  },
  {
    "text": "Patrick my dear friend anyway that's",
    "start": "3235399",
    "end": "3241132"
  },
  {
    "text": "about time for today i think we have to drop unfortunately have",
    "start": "3241133",
    "end": "3246566"
  },
  {
    "text": "to jump to a call in around about 10 minutes from now",
    "start": "3246566",
    "end": "3252366"
  },
  {
    "text": "It's been a pleasure to stream and hopefully i'm gonna get back to to continue",
    "start": "3253500",
    "end": "3259633"
  },
  {
    "text": "on these in the next few days yeah have fun",
    "start": "3259633",
    "end": "3264500"
  }
]