[
  {
    "start": "0",
    "end": "278000"
  },
  {
    "text": "(audience applauds) Testing, we good? Okay, good morning everybody.",
    "start": "2871",
    "end": "11600"
  },
  {
    "text": "Everyone awake? Okay, let's try it one more time.",
    "start": "11600",
    "end": "16800"
  },
  {
    "text": "Everybody had coffee, right? Good morning everyone. Awesome.",
    "start": "16800",
    "end": "21359"
  },
  {
    "text": "So we're all super excited to be here today to do our workshop with you \nall for Effect Days 2025.",
    "start": "22800",
    "end": "32720"
  },
  {
    "text": "Welcome everybody to the \nfirst day of our conference. I'm putting the wifi password \nup on the screen here",
    "start": "32720",
    "end": "38720"
  },
  {
    "text": "for anybody who didn't see it on their table. And then also there's a GitHub repository",
    "start": "38720",
    "end": "45360"
  },
  {
    "text": "associated with today's workshop. So you guys can feel free \nto clone it to your laptop. All the exercises and demos,",
    "start": "45360",
    "end": "52160"
  },
  {
    "text": "also the slides for this presentation and basically all the code, oh, I'll try not to do that again.",
    "start": "52160",
    "end": "58079"
  },
  {
    "text": "All the code that we're gonna be going over today is in this repository.",
    "start": "58640",
    "end": "63679"
  },
  {
    "text": "So make sure you've downloaded it. I think that Tim also dropped \nit in the Discord channel",
    "start": "63680",
    "end": "69520"
  },
  {
    "text": "for today's workshop. Also, if anybody is not in the Discord channel",
    "start": "69520",
    "end": "75360"
  },
  {
    "text": "for today's workshop, just like raise your hand and somebody will come around and help you get you into that channel",
    "start": "75360",
    "end": "82159"
  },
  {
    "text": "because you guys can use that \nchannel throughout the day to ask questions and stuff like that if you don't feel comfortable raising your hand.",
    "start": "82160",
    "end": "89600"
  },
  {
    "text": "Is anybody not in the Discord \nchannel for the workshop? Okay, maybe we could have Mike and Mirela",
    "start": "89600",
    "end": "98400"
  },
  {
    "text": "and people go around and try to help them get into the Discord channel.",
    "start": "98400",
    "end": "104960"
  },
  {
    "text": "Mike, Mike, would you mind helping folks get into the channel for the workshop as well?",
    "start": "104960",
    "end": "111520"
  },
  {
    "text": "Like if they're in the Discord channel? Okay, anybody else can give them a hand.",
    "start": "111520",
    "end": "118000"
  },
  {
    "text": "Keep your hands raised if \nyou're not in the channel.",
    "start": "118000",
    "end": "121200"
  },
  {
    "text": "So our schedule today is pretty packed. We're gonna try to get through everything,",
    "start": "124880",
    "end": "130240"
  },
  {
    "text": "but we're also gonna stay at a comfortable pace going through all of the material.",
    "start": "130240",
    "end": "134320"
  },
  {
    "text": "I'm gonna be with you guys \nfor the morning session. So we've got our first session \nfor an hour and a half.",
    "start": "135280",
    "end": "143120"
  },
  {
    "text": "Then we have a quick 15 minute break. Second session right before lunch is another hour and a half.",
    "start": "143120",
    "end": "149200"
  },
  {
    "text": "And then we break for an hour for lunch. And then Tim is gonna pick \nup for the afternoon session",
    "start": "149200",
    "end": "154720"
  },
  {
    "text": "with all of you guys for sessions three and four. And then depending on \nwhether we're running on time",
    "start": "154720",
    "end": "161040"
  },
  {
    "text": "or whether we're running late, we'll also have some time in the evening for just general Q and A and networking.",
    "start": "161040",
    "end": "169280"
  },
  {
    "text": "For the people who are not in Discord, please message Mirela with your handle and she's gonna get you an invite to the channel.",
    "start": "169280",
    "end": "176800"
  },
  {
    "text": "Did everybody hear that? If anybody's not in the \nWorkshop channel in Discord, just message Mirela and she'll \nget you into that channel.",
    "start": "176800",
    "end": "184720"
  },
  {
    "text": "She'll add you manually. So in the morning with me,",
    "start": "184720",
    "end": "190320"
  },
  {
    "text": "we're gonna be focusing on \nlearning kind of the basics. So the theme of the Workshop today",
    "start": "190320",
    "end": "195840"
  },
  {
    "text": "is really designing applications around effect services.",
    "start": "195840",
    "end": "202080"
  },
  {
    "text": "So basically service-oriented design with effect. And we're gonna go over from the very basics",
    "start": "202080",
    "end": "207680"
  },
  {
    "text": "of how to build services with effect, how to use layers, how to \nstructure your application around these services,",
    "start": "207680",
    "end": "214959"
  },
  {
    "text": "all the way to incremental adoption, using services, integrating \neffect into backend services",
    "start": "214960",
    "end": "222640"
  },
  {
    "text": "that are already existing, that you have an application \nyou wanna integrate with. And also I think that we also have some examples",
    "start": "222640",
    "end": "229840"
  },
  {
    "text": "in the afternoon that Tim will go over with some front-end integrations as well.",
    "start": "229840",
    "end": "233920"
  },
  {
    "text": "So with me, we're gonna be \ntalking more about the basics, learning how to use services,",
    "start": "235520",
    "end": "240800"
  },
  {
    "text": "learning how to use layers, going all the way from the beginning to more advanced concepts.",
    "start": "240800",
    "end": "246319"
  },
  {
    "text": "And then Tim is gonna take over and kind of go over more incremental adoption.",
    "start": "246320",
    "end": "253440"
  },
  {
    "text": "Any questions about the schedule for today? Okay.",
    "start": "253440",
    "end": "259200"
  },
  {
    "text": "And also I think there are still some free seats at tables in the front.",
    "start": "259200",
    "end": "265040"
  },
  {
    "text": "So I know in the back, the folks that are sitting in chairs don't have a desk to put their laptops on. So I think there are still one or two free seats",
    "start": "265040",
    "end": "272240"
  },
  {
    "text": "if anybody wanted to move. I think there's also outlets along the tables.",
    "start": "272240",
    "end": "278720"
  },
  {
    "start": "278000",
    "end": "1103000"
  },
  {
    "text": "Okay. So let's get right into it with section one of the Workshop.",
    "start": "278720",
    "end": "283919"
  },
  {
    "text": "So we're gonna be talking about service-oriented application design in the first session of our workshop today.",
    "start": "283920",
    "end": "289280"
  },
  {
    "text": "And our objectives are to really understand the concept of a service in effect",
    "start": "289280",
    "end": "295680"
  },
  {
    "text": "and what the purpose of service-oriented design and effect is. We're gonna gain some experience",
    "start": "295680",
    "end": "301840"
  },
  {
    "text": "with building up services with effect and then composing them together,",
    "start": "301840",
    "end": "307520"
  },
  {
    "text": "learning about how services \ncan depend on one another and how we can structure \nservices together like that.",
    "start": "307520",
    "end": "316000"
  },
  {
    "text": "We're gonna explore the motivation behind the layer type in effect, why it exists, what the purpose of layer is,",
    "start": "316960",
    "end": "324080"
  },
  {
    "text": "why we can't just have services that we provide wherever we want.",
    "start": "324720",
    "end": "329600"
  },
  {
    "text": "And we're also gonna go over some best practices in structuring an application",
    "start": "330240",
    "end": "336000"
  },
  {
    "text": "and talk about some of the best practices that we have found work well",
    "start": "336000",
    "end": "342800"
  },
  {
    "text": "as we've designed applications around effect. Okay. So let's start with a quick \nintroduction to services.",
    "start": "343840",
    "end": "353520"
  },
  {
    "text": "So the purpose of a service in effect is really to allow you to separate the usage",
    "start": "353520",
    "end": "362319"
  },
  {
    "text": "of a particular group of functionality from its actual implementation. So kind of like this quote says,",
    "start": "362320",
    "end": "368400"
  },
  {
    "text": "the goal is that you can \ncode against an interface, not an actual concrete \nimplementation of something.",
    "start": "368400",
    "end": "375199"
  },
  {
    "text": "And programming against an interface means you don't have to worry about",
    "start": "375200",
    "end": "380320"
  },
  {
    "text": "how the methods or variables \nor things that you're using",
    "start": "380320",
    "end": "386560"
  },
  {
    "text": "are actually implemented behind the scenes. You can worry about the \nactual implementation later. And this is a couple of different benefits.",
    "start": "386560",
    "end": "393440"
  },
  {
    "text": "We have, it's very useful for prototyping. So you can kind of design \nthe interface for services",
    "start": "394080",
    "end": "401360"
  },
  {
    "text": "and start using them in your business logic without having to worry about how",
    "start": "401360",
    "end": "407040"
  },
  {
    "text": "you're gonna implement that later. It facilitates easier testing and being able to swap out \ndifferent implementations",
    "start": "407040",
    "end": "414400"
  },
  {
    "text": "as you're prototyping pieces of your application. And it facilitates composability",
    "start": "414400",
    "end": "423680"
  },
  {
    "text": "and modularity in your code. So you can package up business logic into these nice, neat little pieces",
    "start": "423680",
    "end": "429840"
  },
  {
    "text": "that you can then compose together creating a very clear dependency graph of how different services in your application",
    "start": "429840",
    "end": "436400"
  },
  {
    "text": "depend on one another. And it also allows refactoring",
    "start": "436400",
    "end": "441680"
  },
  {
    "text": "pieces of your business logic to become much easier because again, the implementation is abstracted into the service.",
    "start": "441680",
    "end": "448240"
  },
  {
    "text": "So the external implementation, the interface is what you're using in pieces of your code. But if you refactor a piece of the internal logic,",
    "start": "448240",
    "end": "455599"
  },
  {
    "text": "you again, as long as you're meeting the external interface, you don't have to worry about that.",
    "start": "456320",
    "end": "462480"
  },
  {
    "text": "One of the things that we're working on for the next major iteration of effect is all the terminology around services.",
    "start": "462480",
    "end": "469919"
  },
  {
    "text": "We know that there's kind of a lot of definitions and things that you need to learn",
    "start": "469920",
    "end": "475520"
  },
  {
    "text": "in order to be able to work \nwith services in effect. So we are trying to improve upon this.",
    "start": "475520",
    "end": "481520"
  },
  {
    "text": "But at the moment, we have \na few pieces of terminology we at least need to have a basic understanding of",
    "start": "481520",
    "end": "486880"
  },
  {
    "text": "before we can kind of get into exercises and examples and things like that. So we already talked about \nwhat a service is, right?",
    "start": "486880",
    "end": "493360"
  },
  {
    "text": "It's just an interface that \ndescribes a set of operations or variables or things that we have access to.",
    "start": "493360",
    "end": "500880"
  },
  {
    "text": "For example, a set of configuration values or a set of operations describing interacting",
    "start": "500880",
    "end": "506400"
  },
  {
    "text": "with an external system. It's just like a interface that has some functionality associated with it.",
    "start": "506400",
    "end": "513280"
  },
  {
    "text": "We also have tags in effect. And a tag is, I define it \nhere as a unique type level",
    "start": "514560",
    "end": "523839"
  },
  {
    "text": "and runtime identifier for a service. And the reason for this is \nbecause a tag gives us a way",
    "start": "523840",
    "end": "530640"
  },
  {
    "text": "to conceptually bind the interface or the service",
    "start": "530640",
    "end": "536640"
  },
  {
    "text": "to an actual implementation \nwhen we're ready to do that. The tag is kind of the \nbridge between the interface",
    "start": "536640",
    "end": "543280"
  },
  {
    "text": "on the type level and the \nactual concrete implementation that we're gonna use in our application.",
    "start": "543280",
    "end": "548720"
  },
  {
    "text": "And then we have context, \nwhich is the container type",
    "start": "549920",
    "end": "555200"
  },
  {
    "text": "that effect uses, which holds a mapping. It's basically on a conceptual level.",
    "start": "555200",
    "end": "561199"
  },
  {
    "text": "You can think of it like a JavaScript map of tag to service. It's a little more complicated \nthan that behind the scenes,",
    "start": "561200",
    "end": "569120"
  },
  {
    "text": "but context is the data type that really backs",
    "start": "569120",
    "end": "575040"
  },
  {
    "text": "the effect requirements. So when you access a service in effect or when you pull something out",
    "start": "575040",
    "end": "580640"
  },
  {
    "text": "of the environment in effect, you're really accessing \nsomething in a context object.",
    "start": "580640",
    "end": "586080"
  },
  {
    "text": "So you're using a tag to get the service back, the implementation.",
    "start": "586080",
    "end": "592720"
  },
  {
    "text": "So we're gonna be going over a lot of code in our workshop today. Is this large enough for folks to see pretty much?",
    "start": "592720",
    "end": "601839"
  },
  {
    "text": "Yeah, good. Cool. When we define a service, it's very important",
    "start": "601840",
    "end": "609360"
  },
  {
    "text": "that we at least have the basic understanding that we talked about on the slide before, because in order to define a service in effect,",
    "start": "609360",
    "end": "616800"
  },
  {
    "text": "we need to create a tag and an actual, like the interface for our service.",
    "start": "616800",
    "end": "623120"
  },
  {
    "text": "In practice, the lowest level strategy for creating services in \neffect uses something called",
    "start": "623120",
    "end": "630400"
  },
  {
    "text": "the generic tag from the context module. And sorry about that, did not mean to hit space.",
    "start": "630400",
    "end": "638960"
  },
  {
    "text": "Context on generic tag though, in most scenarios is not what you're going to use.",
    "start": "640720",
    "end": "646640"
  },
  {
    "text": "And this is because there \nare a few different problems with this approach. We only really recommend using,",
    "start": "646640",
    "end": "652160"
  },
  {
    "text": "I'll talk about situations where context, the generic tag way of creating tags makes sense,",
    "start": "652160",
    "end": "658480"
  },
  {
    "text": "but there are a couple of \nproblems with this approach. I talked about how we need a \nunique type level identifier,",
    "start": "658480",
    "end": "664880"
  },
  {
    "text": "as well as a unique runtime \nidentifier for our services, so that we don't have collisions",
    "start": "664880",
    "end": "669920"
  },
  {
    "text": "at either the type level or at the runtime level. And with generic tag, you \nactually have to make sure",
    "start": "669920",
    "end": "676079"
  },
  {
    "text": "that your type is unique yourself. So you can see here, I've \ngot my service identifier,",
    "start": "676080",
    "end": "682000"
  },
  {
    "text": "we've got a error type that \nwe're defining for our service, and we'll talk about tagged error in a moment.",
    "start": "682000",
    "end": "689600"
  },
  {
    "text": "But we also have this cache interface that we're defining here. And you'll notice I've placed a unique symbol",
    "start": "690640",
    "end": "697360"
  },
  {
    "text": "on this interface. And this makes sure the type is unique. But again, this is kind of annoying, it's verbose,",
    "start": "697360",
    "end": "704320"
  },
  {
    "text": "we've got the unique identifier \nwe have to define manually. And then we have our service \nimplementation for the cache,",
    "start": "704320",
    "end": "709920"
  },
  {
    "text": "which just has a lookup method, takes a key, and will return either a string if it's successful",
    "start": "709920",
    "end": "715200"
  },
  {
    "text": "in finding that key or a cache miss error. And then once we have all those pieces in place,",
    "start": "715200",
    "end": "720880"
  },
  {
    "text": "we can use generic tag to define our tag. And then we have a unique, \nthe string that goes inside,",
    "start": "720880",
    "end": "728640"
  },
  {
    "text": "generic tag is kind of the \nruntime identifier piece. So we have our type level identifier up above,",
    "start": "728640",
    "end": "734399"
  },
  {
    "text": "and we have a runtime \nidentifier as part of the tag. But again, this is kind of \nverbose, it's also annoying,",
    "start": "734400",
    "end": "739920"
  },
  {
    "text": "because you have to make sure \nthat the service identifier on the type level is unique.",
    "start": "739920",
    "end": "745920"
  },
  {
    "text": "So we don't recommend using generic tag. In the majority of circumstances, the only time where it's really useful",
    "start": "745920",
    "end": "752480"
  },
  {
    "text": "is when you are creating like \ndynamic tags for services. But again, most situations \nyou won't be doing that.",
    "start": "752480",
    "end": "760080"
  },
  {
    "text": "Instead, we recommend using \nthe context.tag helper,",
    "start": "760080",
    "end": "766000"
  },
  {
    "text": "which allows us to basically create a tag by extending the context.tag helper class.",
    "start": "766000",
    "end": "774399"
  },
  {
    "text": "So everything gets packaged up into one neat type.",
    "start": "774400",
    "end": "779760"
  },
  {
    "text": "We've got a class cache, \nwhich extends context.tag, we still have our runtime identifier there,",
    "start": "779760",
    "end": "786079"
  },
  {
    "text": "the string of the app slash cache. But then we can actually use the name of our class",
    "start": "786080",
    "end": "792400"
  },
  {
    "text": "as the type level piece, passing it in as the first \ngeneric parameter there.",
    "start": "792400",
    "end": "799360"
  },
  {
    "text": "And then we can inline the \nimplementation if we want, just to kind of make things even more concise.",
    "start": "799360",
    "end": "805280"
  },
  {
    "text": "And then really quickly, I'll just, for those of you unfamiliar with tagged errors and what they are in effect,",
    "start": "806480",
    "end": "812480"
  },
  {
    "text": "we're creating a custom error \ntype here for our cache type. And we're gonna be carrying this",
    "start": "812480",
    "end": "818080"
  },
  {
    "text": "through a lot of our examples, so I'm gonna take the time to explain it now. But data.tag error is basically \njust a really simple way",
    "start": "818080",
    "end": "825600"
  },
  {
    "text": "of allowing us to create an error type and effect that also has a underscore tag property.",
    "start": "825600",
    "end": "832560"
  },
  {
    "text": "And the underscore tag property is kind of a convention in effect that allows us to have a runtime discriminator,",
    "start": "832560",
    "end": "841200"
  },
  {
    "text": "something that can allow us to differentiate between different errors in the error channel. So if we have like a cache miss error,",
    "start": "841200",
    "end": "847840"
  },
  {
    "text": "and I don't know, user not found error in our error channel, that tag allows us to discriminate",
    "start": "847840",
    "end": "853680"
  },
  {
    "text": "between those two errors, or tell the difference between those two errors.",
    "start": "853680",
    "end": "858720"
  },
  {
    "text": "And we also have operators in effect, for those of you who are not familiar, that operate specifically on \nthe underscore tag property.",
    "start": "858720",
    "end": "867360"
  },
  {
    "text": "So things like catch tag and, I don't know, there are other ones.",
    "start": "867360",
    "end": "873279"
  },
  {
    "text": "Anyway, now we're gonna \nget into our first exercise",
    "start": "874560",
    "end": "879760"
  },
  {
    "text": "where we're gonna be creating the, we're gonna be creating the service definition.",
    "start": "879760",
    "end": "885680"
  },
  {
    "text": "But before we actually open up our exercise and start working on this, I wanna talk about in my section of the workshop,",
    "start": "885680",
    "end": "891040"
  },
  {
    "text": "what we're actually gonna be doing. So for those of you who don't know, today is actually Father's Day in Italy.",
    "start": "891040",
    "end": "897839"
  },
  {
    "text": "It's St. Joseph's Day. And I'm a big fan of dad jokes. For anybody who's seen my presentation",
    "start": "897840",
    "end": "905920"
  },
  {
    "text": "from Effect Days last year, they're fantastic. And so I, the examples for \nour session this morning",
    "start": "905920",
    "end": "916240"
  },
  {
    "text": "are all gonna kind of carry \nthe same theme throughout, where we're gonna be building up a application",
    "start": "916240",
    "end": "921759"
  },
  {
    "text": "that I've lovingly entitled \nthe Punishment Protocol. The Punishment Protocol has a \ncouple of different services.",
    "start": "921760",
    "end": "931120"
  },
  {
    "text": "But basically the concept here is that the Punishment Protocol is a \nbehavioral management system",
    "start": "932240",
    "end": "937440"
  },
  {
    "text": "that weaponizes puns as a disciplinary tool for your children, or adults in our case,",
    "start": "937440",
    "end": "943839"
  },
  {
    "text": "which we'll see in a moment. It basically takes the severity \nof a child's misbehavior,",
    "start": "943840",
    "end": "948880"
  },
  {
    "text": "matches it with a proportionally \ngrown-inducing pun. And then, so basically for simple misbehaviors,",
    "start": "948880",
    "end": "957200"
  },
  {
    "text": "you might get like a, \"Oh \nman, that's such a lame joke.\" Even though it's not, it's fantastic.",
    "start": "957200",
    "end": "962800"
  },
  {
    "text": "Or if you misbehave very severely, you might get a pun with \nmany different punch lines",
    "start": "963680",
    "end": "970320"
  },
  {
    "text": "and it's very long and drawn out and excellent. We have a couple of key components to our system",
    "start": "970320",
    "end": "978080"
  },
  {
    "text": "that we're gonna be building up this morning. We've got the Pun Distribution Network,",
    "start": "978080",
    "end": "983440"
  },
  {
    "text": "which is a way that we can manage the limited communication channels",
    "start": "983440",
    "end": "988480"
  },
  {
    "text": "that we have to actually deliver our puns. So things like dinnertime, \ncar rides during homework,",
    "start": "988480",
    "end": "995280"
  },
  {
    "text": "basically optimizing the delivery channel for the best place that we can deliver that pun.",
    "start": "995280",
    "end": "1001920"
  },
  {
    "text": "We've also got the immunity token manager. So if a child is due to receive \na pun for some misbehavior,",
    "start": "1001920",
    "end": "1009920"
  },
  {
    "text": "but then does something really good, we can give them an immunity token that allows them to become \nimmune from one or more puns.",
    "start": "1009920",
    "end": "1018480"
  },
  {
    "text": "And then we've got Punster, the pun utility for neurologic sentiment testing",
    "start": "1018480",
    "end": "1023600"
  },
  {
    "text": "and emotional response, which is a little API that I've put together",
    "start": "1023600",
    "end": "1029200"
  },
  {
    "text": "that fetches puns based on \nspecific misbehavior categories and evaluates the result.",
    "start": "1031360",
    "end": "1038000"
  },
  {
    "text": "So we get like a report back of how delivering that pun to our child went.",
    "start": "1038000",
    "end": "1046000"
  },
  {
    "text": "So anyways, all of our examples are gonna be building up these different services and then at the end,",
    "start": "1046960",
    "end": "1052320"
  },
  {
    "text": "we'll be able to actually run our application and get some reports generated.",
    "start": "1052320",
    "end": "1059360"
  },
  {
    "text": "One more thing before we \nlaunch into our first exercise. So this is kind of the dependency graph",
    "start": "1061360",
    "end": "1068720"
  },
  {
    "text": "of our punishment protocol application. Our pun distribution network will depend on a punster client.",
    "start": "1068720",
    "end": "1076880"
  },
  {
    "text": "So we're gonna build the pun distribution network as a service. The pun distribution network \nneeds to be able to use",
    "start": "1076880",
    "end": "1082320"
  },
  {
    "text": "the punster client service in order to interface with the punster API.",
    "start": "1082320",
    "end": "1089200"
  },
  {
    "text": "And then we are also gonna have \nthe immunity token manager, which depends on the punster client.",
    "start": "1089200",
    "end": "1094639"
  },
  {
    "text": "So we've got this kind of dependency graph going on in our application. So I just wanted to show this \nin case folks were curious.",
    "start": "1094640",
    "end": "1101760"
  },
  {
    "text": "So let's go ahead and open up in the repository that you all have access to in the exercises",
    "start": "1101760",
    "end": "1110066"
  },
  {
    "start": "1103000",
    "end": "2716000"
  },
  {
    "text": "slash section one section of the repository. You'll see a bunch of different files.",
    "start": "1110066",
    "end": "1115920"
  },
  {
    "text": "There's the name of the exercise and then there's one with dash solution attached. We're gonna be working in creating a service.",
    "start": "1115920",
    "end": "1123760"
  },
  {
    "text": "And then when we're done, we'll take a look at the solution. We're gonna be creating service definitions",
    "start": "1124320",
    "end": "1129440"
  },
  {
    "text": "for all three of our services today. So the goal is not to implement these services",
    "start": "1129440",
    "end": "1135279"
  },
  {
    "text": "or anything like that. The goal is to create a \ndefinition for our service.",
    "start": "1135280",
    "end": "1139840"
  },
  {
    "text": "So taking the interfaces that you folks have been provided with and basically allowing us",
    "start": "1140480",
    "end": "1147280"
  },
  {
    "text": "to use that interface in our applications. If you got, if anybody has, we're gonna take like 10 minutes.",
    "start": "1147280",
    "end": "1153360"
  },
  {
    "text": "If anybody has any questions \nor anything like that, please raise your hands, let us know, right?",
    "start": "1153360",
    "end": "1160640"
  },
  {
    "text": "There was a question about \nwhether we're also gonna look at effect.service because that was just added",
    "start": "1160640",
    "end": "1166240"
  },
  {
    "text": "to the documentation like a week or two ago. Yes, we will take a look at effect.service.",
    "start": "1166240",
    "end": "1172720"
  },
  {
    "text": "It's not gonna be the focus, but I will say that for those of you who are \ninterested in knowing more",
    "start": "1172720",
    "end": "1178399"
  },
  {
    "text": "about the next major version of effect, which we are working on, it will be, we're trying to make effect.service",
    "start": "1178400",
    "end": "1186320"
  },
  {
    "text": "more of the blessed way to \ncreate services in effect. So we're looking to extend the functionality",
    "start": "1186320",
    "end": "1193760"
  },
  {
    "text": "of effect.service to kind \nof make it the default way of creating services.",
    "start": "1193760",
    "end": "1201440"
  },
  {
    "text": "Okay, does anybody need more time?",
    "start": "1201440",
    "end": "1207840"
  },
  {
    "text": "Font size?",
    "start": "1207840",
    "end": "1219520"
  },
  {
    "text": "Mike, is that okay? Can everybody see the code \non the screen in the back from my editor?",
    "start": "1219520",
    "end": "1225679"
  },
  {
    "text": "Good? Okay. All right, so let's regroup a little bit.",
    "start": "1225680",
    "end": "1231360"
  },
  {
    "text": "There were a few things I \nleft out when presenting you with this exercise, which we \ncan just take a quick moment",
    "start": "1231360",
    "end": "1238639"
  },
  {
    "text": "and go over. So there are gonna be some shared pieces of code",
    "start": "1238640",
    "end": "1246240"
  },
  {
    "text": "that you're gonna see being \nimported in these exercises. It's really just so that while we're working",
    "start": "1246240",
    "end": "1253680"
  },
  {
    "text": "on these exercises, you all \ncan focus on the exercise and not have to worry about stuff that we don't need to implement.",
    "start": "1253680",
    "end": "1259760"
  },
  {
    "text": "But if you're curious, you're more than welcome to check out what's in the different shared directories here.",
    "start": "1259760",
    "end": "1266000"
  },
  {
    "text": "We can just quickly, I \ncan't see this on my screen, so I'm just going to cram my head.",
    "start": "1266000",
    "end": "1273120"
  },
  {
    "text": "We've got a couple of different \nthings going on in here. The domain folder contains both our domain models",
    "start": "1273840",
    "end": "1280240"
  },
  {
    "text": "and our domain errors. So, you folks can look \nthrough those different things",
    "start": "1280240",
    "end": "1285760"
  },
  {
    "text": "if you're curious. And then the services just \ncontains some shared pieces of code that we'll import \nthroughout the exercises.",
    "start": "1285760",
    "end": "1292800"
  },
  {
    "text": "Again, just to make it a little bit easier",
    "start": "1292800",
    "end": "1296800"
  },
  {
    "text": "so that we can focus on the goal of the exercise and not have to worry about \nimplementing a bunch of code.",
    "start": "1298080",
    "end": "1303840"
  },
  {
    "text": "And then, oops, we'll talk about what's going on",
    "start": "1307840",
    "end": "1313440"
  },
  {
    "text": "in the fixtures directory when we get there. But anyways, so in this exercise,",
    "start": "1313440",
    "end": "1321279"
  },
  {
    "text": "you were all presented with a \nbunch of different interfaces for the shapes.",
    "start": "1321280",
    "end": "1327040"
  },
  {
    "text": "Whoa, sorry. The shapes that we want to give to our services.",
    "start": "1327040",
    "end": "1334720"
  },
  {
    "text": "And when we say shape, we use that term a lot. In effect, the service shape,",
    "start": "1334720",
    "end": "1340000"
  },
  {
    "text": "it's analogous to the interface that we want to give to our services. So basically, the functionality that we want our service to expose",
    "start": "1340000",
    "end": "1347360"
  },
  {
    "text": "when accessed from, excuse \nme, the effect environment.",
    "start": "1347360",
    "end": "1352480"
  },
  {
    "text": "So in this case, you were presented with a couple of different service shapes",
    "start": "1352480",
    "end": "1358080"
  },
  {
    "text": "for the PUNster client, for \nour immunity token manager, and for the PUN distribution network.",
    "start": "1358080",
    "end": "1364960"
  },
  {
    "text": "And your goal was to create a way to basically make these services usable",
    "start": "1364960",
    "end": "1372879"
  },
  {
    "text": "in an effect program. Can anybody share the way that they ended up making these services usable?",
    "start": "1372880",
    "end": "1384240"
  },
  {
    "text": "What did you import and use? Yeah, context.tag, right?",
    "start": "1384240",
    "end": "1390080"
  },
  {
    "text": "So we can take a look at my solution. Your solutions also may differ slightly from the ones that I implemented, and that's okay.",
    "start": "1390080",
    "end": "1396960"
  },
  {
    "text": "There are many different \nways to do things in effect. So if you guys open, excuse me,",
    "start": "1398320",
    "end": "1407039"
  },
  {
    "text": "if you open the solution file,",
    "start": "1407040",
    "end": "1413920"
  },
  {
    "text": "if you open the solution file, we can take a look at what \nI did to create these tags.",
    "start": "1413920",
    "end": "1419919"
  },
  {
    "text": "But again, your solution may differ a little bit. Essentially, the first step when you're creating a service in effect,",
    "start": "1419920",
    "end": "1426560"
  },
  {
    "text": "as we discussed a few slides ago, is that you need to create a unique type level",
    "start": "1426560",
    "end": "1434400"
  },
  {
    "text": "and runtime identifier that \nwe can then carry around in our programs. And in effect, we use tags to do that, right?",
    "start": "1434400",
    "end": "1442000"
  },
  {
    "text": "So in my solution, I chose to \nuse context.tag to do that. So for each one of the services,",
    "start": "1442000",
    "end": "1451360"
  },
  {
    "text": "I'm sorry, for each one of the services that I wanted to expose,",
    "start": "1451360",
    "end": "1456799"
  },
  {
    "text": "I went ahead and created a \ncontext.tag for that service.",
    "start": "1456800",
    "end": "1462480"
  },
  {
    "text": "So I used the context.tag helper because as I discussed, this is kind of the recommended way,",
    "start": "1462480",
    "end": "1467920"
  },
  {
    "text": "one of the recommended ways, we'll talk about the other \neffect.service in a few slides",
    "start": "1467920",
    "end": "1473520"
  },
  {
    "text": "for creating tags. And then the first argument is the,",
    "start": "1474880",
    "end": "1481520"
  },
  {
    "text": "what we call like the self type. It's basically just passing in the name that you gave to the class",
    "start": "1481520",
    "end": "1487360"
  },
  {
    "text": "that extends the context.tag. And this is required in TypeScript for a couple of different reasons.",
    "start": "1487360",
    "end": "1495360"
  },
  {
    "text": "I'm not gonna get into like why this is required, but suffice to say, it's essentially to help us",
    "start": "1495360",
    "end": "1500640"
  },
  {
    "text": "with typing on the static side of the class. And then the second type \nlevel argument to context.tag",
    "start": "1500640",
    "end": "1508400"
  },
  {
    "text": "is the shape of the service or the interface of the service. So the functionality that you actually want",
    "start": "1508400",
    "end": "1513520"
  },
  {
    "text": "to be accessible from that service. So here we've got our punster client tag,",
    "start": "1513520",
    "end": "1521279"
  },
  {
    "text": "which is using the punster client shape that we defined above. So our punster client is \ngonna be able to create a pun",
    "start": "1522240",
    "end": "1529840"
  },
  {
    "text": "by taking in some misbehavior \nthat our child or adult did.",
    "start": "1529840",
    "end": "1536000"
  },
  {
    "text": "And it will return to us either a pun or a couple of different types of errors.",
    "start": "1536000",
    "end": "1541600"
  },
  {
    "text": "So if our children were immune, then we're actually, because they had a token from \nthe immunity token manager,",
    "start": "1541600",
    "end": "1546960"
  },
  {
    "text": "for example, will return a child immune error. If the pun was malformed,",
    "start": "1546960",
    "end": "1552320"
  },
  {
    "text": "or if there was an issue fetching the pun from the punster API, we'll \nget one of those errors back.",
    "start": "1552320",
    "end": "1558960"
  },
  {
    "text": "And then we've also got another method here for evaluating our pun. So obviously our puns are all fantastic, right?",
    "start": "1558960",
    "end": "1567280"
  },
  {
    "text": "They're all great, but we still wanna know how \nwell our pun was received",
    "start": "1567280",
    "end": "1574159"
  },
  {
    "text": "by our intended victim, I mean child. So we've got another method \nhere for evaluating our pun,",
    "start": "1574160",
    "end": "1581040"
  },
  {
    "text": "where we take in the pun, excuse me, the misbehavior \nand the distribution channel,",
    "start": "1581040",
    "end": "1587600"
  },
  {
    "text": "and we get back a report in a string format of how our pun delivery went.",
    "start": "1588400",
    "end": "1596560"
  },
  {
    "text": "For our pun distribution network, we've got a get channel method, and that takes in a misbehavior and returns to us",
    "start": "1596560",
    "end": "1603600"
  },
  {
    "text": "the most appropriate channel for delivery of the pun that we wanna deliver.",
    "start": "1603600",
    "end": "1609120"
  },
  {
    "text": "So for example, we've got delivery channels like dinner time, homework, car ride,",
    "start": "1609120",
    "end": "1615520"
  },
  {
    "text": "because in a car, totally \ncaptive audience, it's fantastic.",
    "start": "1615520",
    "end": "1620880"
  },
  {
    "text": "They can't get away. So you can potentially deliver multiple puns if you wanted to.",
    "start": "1621440",
    "end": "1626640"
  },
  {
    "text": "And then we've got a deliver pun method, which takes in the pun that we wanna deliver and the misbehavior in the channel",
    "start": "1627440",
    "end": "1633519"
  },
  {
    "text": "and delivers the pun to our intended person.",
    "start": "1633520",
    "end": "1641600"
  },
  {
    "text": "And then we've got our tag defined here. And you'll notice that in these tags,",
    "start": "1641600",
    "end": "1647280"
  },
  {
    "text": "I've got that string that I'm passing in, right?",
    "start": "1647280",
    "end": "1651200"
  },
  {
    "text": "That string needs to be \nunique across your application because it's what we use \nas kind of a discriminator",
    "start": "1653120",
    "end": "1662080"
  },
  {
    "text": "for the context itself to \nknow which service to extract",
    "start": "1662080",
    "end": "1667279"
  },
  {
    "text": "from the environment when \nyou're working with effect. So making sure that that string is unique",
    "start": "1667280",
    "end": "1673760"
  },
  {
    "text": "is very good practice. And our convention, I'm not showing it here because it would have been kind of weird,",
    "start": "1674320",
    "end": "1680640"
  },
  {
    "text": "but our convention for when we're designing effect applications is to actually just make this",
    "start": "1680640",
    "end": "1685920"
  },
  {
    "text": "the path in our package to whatever file we define that service in is.",
    "start": "1685920",
    "end": "1692640"
  },
  {
    "text": "So for example, if this \nwas in like source services pun distribution network, we might do like",
    "start": "1692640",
    "end": "1699040"
  },
  {
    "text": "at my app slash services slash \npun distribution network.",
    "start": "1699040",
    "end": "1704960"
  },
  {
    "text": "We basically use the path to make sure that the identifier is unique.",
    "start": "1704960",
    "end": "1710240"
  },
  {
    "text": "Does that make sense to everybody? Sure. What would happen if you take a, this stuff for instance, and \nyou name it as your class?",
    "start": "1710240",
    "end": "1718640"
  },
  {
    "text": "Say that one more time. The best of time. See.\nThe tag you were, it's not in the--",
    "start": "1719200",
    "end": "1724480"
  },
  {
    "text": "Yeah, this was a typo, that's my bad. Let's fix it actually while we're here.",
    "start": "1724480",
    "end": "1730480"
  },
  {
    "text": "What would happen if you had \nthe same name as the class? Nothing. As long as it's a unique string level identifier,",
    "start": "1730480",
    "end": "1737440"
  },
  {
    "text": "as long as there's no other \npunster client identifiers in the context, then you're fine. So if you've got like a small app",
    "start": "1737440",
    "end": "1743440"
  },
  {
    "text": "and you don't wanna do the \nwhole like path level thing, that's fine. And in the punster client that",
    "start": "1743440",
    "end": "1749679"
  },
  {
    "text": "I designed for this workshop, I didn't use this. I literally just did the names of the services",
    "start": "1749680",
    "end": "1756320"
  },
  {
    "text": "as their identifiers, because it was a really small app.",
    "start": "1756320",
    "end": "1761600"
  },
  {
    "text": "But for a lot of you folks, I'm assuming some of the apps you're designing are much larger. And so if you've got hundreds of services",
    "start": "1761600",
    "end": "1767840"
  },
  {
    "text": "that you're managing, using the path is just a really easy way to make sure you don't end up with conflicting services, sure.",
    "start": "1767840",
    "end": "1775680"
  },
  {
    "text": "It's kind of like indeterminate behavior. The map can only hold one \nservice for that identifier.",
    "start": "1779200",
    "end": "1792160"
  },
  {
    "text": "So you kind of get indeterminate behavior. And maybe Mike can shed a little more light on some of the behavior that would happen.",
    "start": "1792160",
    "end": "1798560"
  },
  {
    "text": "If you have colliding \nidentifiers for a context tag in your application.",
    "start": "1798560",
    "end": "1804160"
  },
  {
    "text": "So for example, if you have two services with the same string ID, my answer was that you have indeterminate behavior",
    "start": "1806560",
    "end": "1812799"
  },
  {
    "text": "because you may end up with \none or the other service. Yeah, basically the innermost will win.",
    "start": "1812800",
    "end": "1820640"
  },
  {
    "text": "And you'll find yourself with a service of a type that is different from what's on in the ID.",
    "start": "1820640",
    "end": "1828880"
  },
  {
    "text": "So the answer Mike gave in \ncase you all didn't hear it was that the innermost service that's provided,",
    "start": "1828880",
    "end": "1836080"
  },
  {
    "text": "and it's kind of hard to tell that sometimes if you're composing your services via layers, if you've got hundreds of layers,",
    "start": "1836080",
    "end": "1842080"
  },
  {
    "text": "may actually be difficult to tell. You may, the innermost service will win.",
    "start": "1842080",
    "end": "1847680"
  },
  {
    "text": "And you may end up with a \nservice that you get back that's different from the \ntype that you're expecting.",
    "start": "1847680",
    "end": "1853440"
  },
  {
    "text": "So that's why the string ID here is very important to make sure it's unique. And that's why, again, if \nyou use the path to that,",
    "start": "1853440",
    "end": "1861600"
  },
  {
    "text": "the file you define the service in with the service name in that path, that's kind of our convention that we've used",
    "start": "1861600",
    "end": "1867600"
  },
  {
    "text": "in a lot of the apps we've built. And I think the Discord bot even uses that.",
    "start": "1867600",
    "end": "1872880"
  },
  {
    "text": "So if you guys want to look at that as an example, does that answer your question?",
    "start": "1872880",
    "end": "1879120"
  },
  {
    "text": "Cool. Yes. Does this all include third party libraries?",
    "start": "1879120",
    "end": "1884960"
  },
  {
    "text": "Does this also include third party libraries? Do you mean if you're using third party libraries that expose services?",
    "start": "1884960",
    "end": "1894000"
  },
  {
    "text": "Yes. Yeah. Anything that is being, \nanything in your effect program",
    "start": "1894000",
    "end": "1900880"
  },
  {
    "text": "eventually is going to be \nresolved into that context object that I showed before, right?",
    "start": "1900880",
    "end": "1905920"
  },
  {
    "text": "The effect environment is a, basically just a context object with,",
    "start": "1906480",
    "end": "1912320"
  },
  {
    "text": "a little more complicated than that, but it's basically a context object. So when you've resolved that context object,",
    "start": "1912320",
    "end": "1917760"
  },
  {
    "text": "either through layers or \nproviding services or whatever, whatever's in that context is what you have",
    "start": "1917760",
    "end": "1924240"
  },
  {
    "text": "in your environment. So if you're using third party libraries that expose services and you've got colliding IDs,",
    "start": "1924240",
    "end": "1931280"
  },
  {
    "text": "it's kind of like what Mike said, the innermost service that has that ID will win. And so the behavior is indeterminate.",
    "start": "1931280",
    "end": "1938080"
  },
  {
    "text": "So if you're designing \nlibraries that expose services, it's very, very, very good practice to make sure",
    "start": "1938720",
    "end": "1944400"
  },
  {
    "text": "that those IDs will be unique. So again, package name path service",
    "start": "1944400",
    "end": "1949600"
  },
  {
    "text": "is kind of a good convention. Mike, anything to add?",
    "start": "1949600",
    "end": "1956560"
  },
  {
    "text": "We have evaluated, yeah, at some point in time, we've evaluated if to use kind of a new error",
    "start": "1956560",
    "end": "1963760"
  },
  {
    "text": "behind the scenes and take the path of the file automatically, but it's also important that we have a type level identifier,",
    "start": "1963760",
    "end": "1970960"
  },
  {
    "text": "because if you have two \nidentical services in shape or one service, which is a subtype of the other,",
    "start": "1970960",
    "end": "1978240"
  },
  {
    "text": "and you have the same identifier, then you have the opposite problem. They might be different at runtime,",
    "start": "1978240",
    "end": "1984080"
  },
  {
    "text": "but providing one will \nerase the type of the other. So in a single shot, in this case,",
    "start": "1984080",
    "end": "1990480"
  },
  {
    "text": "we use the tag as a discriminator for both the type level and the runtime level.",
    "start": "1990480",
    "end": "1996799"
  },
  {
    "text": "So yeah, that's the reason. It's the only hard limitation \nof structural type systems,",
    "start": "1996800",
    "end": "2003919"
  },
  {
    "text": "unfortunately. The structure, we have to make it different.",
    "start": "2003920",
    "end": "2009040"
  },
  {
    "text": "Sure. Would it be possible to use unique symbols?",
    "start": "2009040",
    "end": "2013679"
  },
  {
    "text": "So I don't think that, do \nwe support unique symbols? I don't think that we do.",
    "start": "2015440",
    "end": "2021679"
  },
  {
    "text": "We have been supporting \nunique symbols for a while, but what we found is that they \nmake debugging more complex,",
    "start": "2021680",
    "end": "2029679"
  },
  {
    "text": "because whenever you get a runtime error, it's gonna say symbol or blah, blah,",
    "start": "2029680",
    "end": "2034960"
  },
  {
    "text": "and you have no idea what. If you've got the service ID in here, we can actually use that in the error messages.",
    "start": "2034960",
    "end": "2041520"
  },
  {
    "text": "Like if a service that you \naccess, sorry, sorry, sorry.",
    "start": "2041520",
    "end": "2047280"
  },
  {
    "text": "This is very hard for me to stand in one spot when I'm talking, because I \nusually like to run around. So Mike yelled at me this morning.",
    "start": "2047280",
    "end": "2053599"
  },
  {
    "text": "I'm really gonna try to stand right here. The other thing, like Mike said, that we can do is if a service is not found,",
    "start": "2053600",
    "end": "2061040"
  },
  {
    "text": "you access a service and \nthat service is not found. If you've got a string ID in \nhere that's kind of logical,",
    "start": "2061040",
    "end": "2066080"
  },
  {
    "text": "that maybe points to the path and the package that it came from, that's displayed in the error",
    "start": "2066080",
    "end": "2071600"
  },
  {
    "text": "to say this service was not found. These are all great questions, by the way.",
    "start": "2071600",
    "end": "2077200"
  },
  {
    "text": "Any other questions about tags? Sure. No, you, yeah.",
    "start": "2077920",
    "end": "2088560"
  },
  {
    "text": "No, there are no bad questions. I'm gonna say that very loudly.",
    "start": "2088560",
    "end": "2103119"
  },
  {
    "text": "And it seems, we're also gonna be talking about like this practice, right?",
    "start": "2103120",
    "end": "2108320"
  },
  {
    "text": "Like we're doing the job twice. No, why? Because we're defining a shape and then we're talking about the service.",
    "start": "2108320",
    "end": "2119201"
  },
  {
    "text": "Within the class category, the right, the right collection of the \nclass and the interface. But it does make for some changes. No, that's a really good question. That's a really good question.",
    "start": "2119201",
    "end": "2124240"
  },
  {
    "text": "So the class, in this case, the class we create for the tag,",
    "start": "2124240",
    "end": "2131599"
  },
  {
    "text": "we can't, the shape of the class is not the same as the shape of the service.",
    "start": "2133200",
    "end": "2138480"
  },
  {
    "text": "Because when we yield a \ntag to get the service back or map over like the tag to get the shape",
    "start": "2139200",
    "end": "2146480"
  },
  {
    "text": "of the service back, it's not the shape of the class we're getting, it's the shape of the service itself.",
    "start": "2146480",
    "end": "2152640"
  },
  {
    "text": "So you can attach static properties and helpers to this tag that have nothing \nto do with the service.",
    "start": "2152640",
    "end": "2160000"
  },
  {
    "text": "So for example, we could have like a static get",
    "start": "2160000",
    "end": "2165840"
  },
  {
    "text": "or undefined, oops, right? And so these methods have nothing to do",
    "start": "2165840",
    "end": "2171920"
  },
  {
    "text": "with the service shape itself. Because the class in this case is being used",
    "start": "2171920",
    "end": "2178160"
  },
  {
    "text": "just as an identifier. It's not the actual implementation of the service. What we will talk about in a few slides",
    "start": "2178160",
    "end": "2184880"
  },
  {
    "text": "is how we can decrease the verbosity of this even a little bit further and get rid of the whole service shape thingy",
    "start": "2184880",
    "end": "2192240"
  },
  {
    "text": "by using effect.service, which is a new helper that we introduced maybe a month or two ago",
    "start": "2192880",
    "end": "2198640"
  },
  {
    "text": "and just got into the documentation and everything like that. It's still experimental because \nin the next major version",
    "start": "2198640",
    "end": "2203920"
  },
  {
    "text": "of effect, we'd like to try to find a way to make it the default. Because we think it's a little bit, it's much less verbose and allows you",
    "start": "2203920",
    "end": "2210800"
  },
  {
    "text": "to further package everything up into one thing. We'll talk about that a little later. But does that kind of make more sense?",
    "start": "2210800",
    "end": "2217359"
  },
  {
    "text": "Yeah, a little bit. No problem. Again, no bad questions.",
    "start": "2217360",
    "end": "2222400"
  },
  {
    "text": "Okay, yeah.",
    "start": "2222400",
    "end": "2228960"
  },
  {
    "text": "Mm-hmm.",
    "start": "2228960",
    "end": "2245651"
  },
  {
    "text": "Maybe I use this in my case. What can I do to prevent that library from getting the tax from tax or",
    "start": "2245652",
    "end": "2252000"
  },
  {
    "text": "(indistinct) That's a good question. If you have, so your question is basically",
    "start": "2253840",
    "end": "2259200"
  },
  {
    "text": "if you have a third-party \nlibrary that you're using that exports some services",
    "start": "2259200",
    "end": "2264400"
  },
  {
    "text": "and you have a conflicting \nservice in your own application, what are some strategies that you could use",
    "start": "2264960",
    "end": "2270480"
  },
  {
    "text": "to deal with the conflict on the consumer side from consuming that library, right?",
    "start": "2270480",
    "end": "2276000"
  },
  {
    "text": "Tim, do you have any like \ngood strategies for that? I actually haven't run into that particular issue. Do you have?",
    "start": "2276000",
    "end": "2281359"
  },
  {
    "text": "Yeah.",
    "start": "2290480",
    "end": "2295680"
  },
  {
    "text": "Most of the time in the server, the applications that we've designed internally,",
    "start": "2295680",
    "end": "2300640"
  },
  {
    "text": "we do put like the package name, even in the third-party libs we release, like the AI packages, the \nSQL libraries, everything,",
    "start": "2301520",
    "end": "2309280"
  },
  {
    "text": "you generally speaking the \ntags have at effect slash AI at effect slash SQL, whatever, \nthe package name as well,",
    "start": "2309280",
    "end": "2316880"
  },
  {
    "text": "which is another strategy you can use. But if you run into that error, I don't know if there are any good strategies.",
    "start": "2316880",
    "end": "2323840"
  },
  {
    "text": "One could be creating a tag for the server. If that package exports a \nconstructor for that service,",
    "start": "2323840",
    "end": "2329839"
  },
  {
    "text": "you could just actually make \nthe service yourself, right? Create a context tag and just use the constructor",
    "start": "2329840",
    "end": "2336720"
  },
  {
    "text": "that they export to build that service later. Any other ideas that you have?",
    "start": "2336720",
    "end": "2343359"
  },
  {
    "text": "So the question is basically, if you're consuming a third-party library, there's a conflicting string ID tag",
    "start": "2346240",
    "end": "2353920"
  },
  {
    "text": "coming from the third-party package and you don't want to, that you have a conflict in your own app,",
    "start": "2353920",
    "end": "2359040"
  },
  {
    "text": "but you don't want to change \nthe tag in your own app to for some reason,",
    "start": "2359040",
    "end": "2364560"
  },
  {
    "text": "or any other library.",
    "start": "2366160",
    "end": "2370960"
  },
  {
    "text": "(audience member speaking off mic) (audience member speaking off mic) I see. So like sharing the same tag",
    "start": "2389680",
    "end": "2394800"
  },
  {
    "text": "between different implementation. (audience member speaking off mic)",
    "start": "2394800",
    "end": "2400080"
  },
  {
    "text": "Yeah, no, I think the best practice and the easiest way to solve the problem",
    "start": "2401200",
    "end": "2407599"
  },
  {
    "text": "of conflicting tags, identifiers. I don't want to keep mixing up tag and ID.",
    "start": "2407600",
    "end": "2414480"
  },
  {
    "text": "For conflicting string IDs, the easiest thing to do is prefix it with your package name, put the path in there,",
    "start": "2415280",
    "end": "2421920"
  },
  {
    "text": "put the name of the service in there, and the likelihood you run into a conflict is minimized in that case.",
    "start": "2421920",
    "end": "2427920"
  },
  {
    "text": "For conflicting tag names, like the actual name of the class,",
    "start": "2427920",
    "end": "2433520"
  },
  {
    "text": "are you talking about, like this in that case, of the string ID? Yeah. And then the other part of your question",
    "start": "2433520",
    "end": "2439520"
  },
  {
    "text": "about the third-party library, if it were me and I had a conflict locally and with a third-party lib,",
    "start": "2439520",
    "end": "2445520"
  },
  {
    "text": "it's just easier to adjust the string ID in your own app, in my mind, because the ID really doesn't matter,",
    "start": "2445520",
    "end": "2452560"
  },
  {
    "text": "it just has to be unique. So if you adjust it on your own side, that's probably the easiest thing to do.",
    "start": "2452560",
    "end": "2460400"
  },
  {
    "text": "Yeah.",
    "start": "2460400",
    "end": "2475119"
  },
  {
    "text": "(audience member speaking off mic) (audience member speaking off mic)",
    "start": "2483680",
    "end": "2493040"
  },
  {
    "text": "I guess that is an idea we could take back, right? I mean, we haven't had as \nmany third-party libraries",
    "start": "2493040",
    "end": "2502560"
  },
  {
    "text": "aside from our own coming out until recently, so it hasn't become like \na super major problem yet,",
    "start": "2502560",
    "end": "2508080"
  },
  {
    "text": "but it is something like to think about, I guess. That could be an interesting idea.",
    "start": "2508080",
    "end": "2515200"
  },
  {
    "text": "One sec.",
    "start": "2515200",
    "end": "2523485"
  },
  {
    "text": "(audience member speaking off mic) Yeah. Yeah, that's actually a good point too. If you do see that issue come up in your own apps,",
    "start": "2523486",
    "end": "2529520"
  },
  {
    "text": "open an issue or something like that, either with us or with the library itself, because it hasn't come up yet,",
    "start": "2529520",
    "end": "2535520"
  },
  {
    "text": "but it would be an interesting, that's an interesting solution, and it's something to consider. I think that when it comes up, we'll address it,",
    "start": "2535520",
    "end": "2541600"
  },
  {
    "text": "but for now, I think the blessed thing would be package path service. Yeah, Victor.",
    "start": "2541600",
    "end": "2550880"
  },
  {
    "text": "So yeah, that kind of has \nthe same problem as, yes. We could generate it like a unique ID,",
    "start": "2552640",
    "end": "2558640"
  },
  {
    "text": "but it kind of has the same thing about, then for debugging purposes,",
    "start": "2559280",
    "end": "2564880"
  },
  {
    "text": "it's like UUID has not found, it's a little bit easier if \nyou fail to find a service",
    "start": "2564880",
    "end": "2573440"
  },
  {
    "text": "that you didn't provide or something like that, and we can actually tell \nyou based on the string ID, this is what we didn't find.",
    "start": "2573440",
    "end": "2579600"
  },
  {
    "text": "(audience member speaking off mic) Could do that too, yeah. You could have a UUID you put on the,",
    "start": "2581680",
    "end": "2587840"
  },
  {
    "text": "you can do anything, as long as the string is, as long as that string is unique, then we're golden.",
    "start": "2587840",
    "end": "2596880"
  },
  {
    "text": "All great questions. Also interesting ideas, so \nI appreciate the discussion.",
    "start": "2596880",
    "end": "2603520"
  },
  {
    "text": "Any other questions about this? Okay, let's keep going.",
    "start": "2603520",
    "end": "2609200"
  },
  {
    "text": "So we will quickly scroll through.",
    "start": "2609200",
    "end": "2615119"
  },
  {
    "text": "The last service in here is \nthe immunity token manager. We've got methods to get the balance",
    "start": "2615120",
    "end": "2620320"
  },
  {
    "text": "of tokens for each child, award tokens to a child, and to use tokens for a child,",
    "start": "2620320",
    "end": "2625600"
  },
  {
    "text": "and then we've got our tag for our immunity token manager here. And for simplicity and not \nhaving massively long strings,",
    "start": "2625600",
    "end": "2632320"
  },
  {
    "text": "we're just gonna use app as a prefix, but again, if this were a production application,",
    "start": "2632320",
    "end": "2637600"
  },
  {
    "text": "we would do a lot of the strategies we've mentioned already. Okay, let me...",
    "start": "2637600",
    "end": "2650560"
  },
  {
    "text": "Sorry, navigating with the mouse is hard. Okay.",
    "start": "2650560",
    "end": "2656400"
  },
  {
    "text": "Back to the slides. So, let's do a quick...",
    "start": "2656400",
    "end": "2663920"
  },
  {
    "text": "Now my mouse is not working.",
    "start": "2663920",
    "end": "2672240"
  },
  {
    "text": "Okay, quick recap. So we imported the context module from effect.",
    "start": "2672240",
    "end": "2678240"
  },
  {
    "text": "We used context.tag to create unique service IDs for our services.",
    "start": "2678240",
    "end": "2683440"
  },
  {
    "text": "We talked a lot about that, so hopefully the concept is clear. If it's not clear, by the way,",
    "start": "2683440",
    "end": "2688720"
  },
  {
    "text": "we have folks walking around. We've got Mike, Tim, Giulio, Johannes,",
    "start": "2688720",
    "end": "2694640"
  },
  {
    "text": "all the effectual folks are here. So if something's not clear and you wanna chat with somebody, just raise your hand and somebody will come over",
    "start": "2694640",
    "end": "2701760"
  },
  {
    "text": "and you can chat with them. This workshop is meant to be very interactive and much less of me just talking to you.",
    "start": "2701760",
    "end": "2709440"
  },
  {
    "text": "Because I can be very verbose, so I could talk for a very \nlong time if you wanted me to.",
    "start": "2710400",
    "end": "2715920"
  },
  {
    "text": "Okay, so we talked about creating the definitions for our services, which is great.",
    "start": "2715920",
    "end": "2720960"
  },
  {
    "start": "2716000",
    "end": "4330000"
  },
  {
    "text": "So now we have kind of the building block we need to actually be able to use \nservices in our application.",
    "start": "2720960",
    "end": "2727440"
  },
  {
    "text": "So actually using a service \nin our apps is pretty easy.",
    "start": "2727440",
    "end": "2734240"
  },
  {
    "text": "Once we have that tag defined, accessing the service within the context",
    "start": "2734240",
    "end": "2740240"
  },
  {
    "text": "of our effect program can be \ndone in two different ways.",
    "start": "2740240",
    "end": "2745280"
  },
  {
    "text": "One is because these tags actually implement",
    "start": "2745280",
    "end": "2750560"
  },
  {
    "text": "the interface of effect under the scenes, under the scenes, behind the scenes,",
    "start": "2750560",
    "end": "2755600"
  },
  {
    "text": "they're actually like effects themselves. We can just pipe them into \ndifferent effect combinators",
    "start": "2755600",
    "end": "2761680"
  },
  {
    "text": "or methods. So for example, in this case, we could just take, if we had a tag called service tag,",
    "start": "2761680",
    "end": "2768079"
  },
  {
    "text": "we could take that tag and \njust pipe it into and then, and then we actually get the implementation",
    "start": "2768080",
    "end": "2773680"
  },
  {
    "text": "of that service back. The alternative, which I \nthink most of us internally",
    "start": "2773680",
    "end": "2781200"
  },
  {
    "text": "prefer for accessing services just because we think it's a little bit easier to read",
    "start": "2781200",
    "end": "2787440"
  },
  {
    "text": "is in an effect generator. Is to just yield the tag, because again,",
    "start": "2787440",
    "end": "2793680"
  },
  {
    "text": "tags themselves are effects behind the scenes. So you can pipe them into effect methods,",
    "start": "2793680",
    "end": "2799760"
  },
  {
    "text": "you can yield them just like you yield effects. And once you do that, you \nget the actual implementation",
    "start": "2799760",
    "end": "2807200"
  },
  {
    "text": "of that service back. And what's important to notice here is all of this",
    "start": "2807200",
    "end": "2815519"
  },
  {
    "text": "can be done before you've \never written a single line of implementation code.",
    "start": "2815520",
    "end": "2820960"
  },
  {
    "text": "At this point, we have not written a single line of how any of our app works. We're prototyping at this point, right?",
    "start": "2820960",
    "end": "2827599"
  },
  {
    "text": "And that's kind of the \nbeauty of effects dependency injection model is you can \nreally prototype in your head",
    "start": "2827600",
    "end": "2835440"
  },
  {
    "text": "before you start worrying about how things are actually gonna be implemented. And all of this is type safe.",
    "start": "2835440",
    "end": "2842400"
  },
  {
    "text": "So if we actually tried to \nrun this program, right? If we bound this generator to a variable",
    "start": "2842400",
    "end": "2847840"
  },
  {
    "text": "and tried to run it or whatever, the program won't compile. It'll tell us we're failing \nto provide certain services",
    "start": "2847840",
    "end": "2855359"
  },
  {
    "text": "in the type error. Like, because most of the run methods expect the requirements of our effect to be never.",
    "start": "2856960",
    "end": "2864480"
  },
  {
    "text": "So if there's stuff in the \nrequirements of our effect, the program won't compile.",
    "start": "2864480",
    "end": "2870560"
  },
  {
    "text": "And we can take a look at some \nof that a little bit later. Okay, so let's take a look,",
    "start": "2870560",
    "end": "2877120"
  },
  {
    "text": "keeping all of our slide \nexamples are gonna be in keeping with this kind of cache thing that we've created.",
    "start": "2877760",
    "end": "2884800"
  },
  {
    "text": "All of our exercises are gonna \nbe our punishment protocol. Okay, so kind of like in parallel.",
    "start": "2884800",
    "end": "2892880"
  },
  {
    "text": "So we've got our cache, we've \ngot the service defined here. It's all great.",
    "start": "2892880",
    "end": "2898640"
  },
  {
    "text": "We've got a unique ID, we've \ngot our service interface, we've got our error types \nand everything is fantastic.",
    "start": "2898640",
    "end": "2904880"
  },
  {
    "text": "And now we actually wanna use the cache. So again, just like we saw on the previous slide, we can, we're gonna be using primarily generators",
    "start": "2904880",
    "end": "2913040"
  },
  {
    "text": "just because again, it's a \nlittle bit easier to read to these things in a stepwise \nfashion, in my opinion.",
    "start": "2913040",
    "end": "2918000"
  },
  {
    "text": "We're gonna yield the cache tag, right? So we yield the tag, and then we actually get the \nimplementation of cache back.",
    "start": "2918720",
    "end": "2927200"
  },
  {
    "text": "So when we, if we were to hover over cache,",
    "start": "2927200",
    "end": "2932640"
  },
  {
    "text": "I didn't enable to slash on these slides because it was messy, but the,",
    "start": "2932640",
    "end": "2938800"
  },
  {
    "text": "when we actually would hover \nover cache in this case, we would actually get the implementation back,",
    "start": "2938800",
    "end": "2945040"
  },
  {
    "text": "this lookup method. And all of these code samples, by the way, are also in your workshop repository",
    "start": "2945040",
    "end": "2953200"
  },
  {
    "text": "in actual TypeScript files. So if you wanna like inspect variables and like see the types of \nthings, you can do that as well.",
    "start": "2953200",
    "end": "2959680"
  },
  {
    "text": "I should have mentioned that earlier, I apologize. But once we've yielded the tag, we can actually use methods on our service, right?",
    "start": "2959680",
    "end": "2966160"
  },
  {
    "text": "So in this case, we're looking up my key and then we're logging that to the console, logging the resulting value to the console.",
    "start": "2966160",
    "end": "2973840"
  },
  {
    "text": "And the other thing that's \nimportant to notice here, so we've got our cache tag,",
    "start": "2975280",
    "end": "2980400"
  },
  {
    "text": "we're yielding the cache to get the service back. We use the service now that we have access to it.",
    "start": "2980400",
    "end": "2986000"
  },
  {
    "text": "What's important to note as a last point is that effect tracks that in the type",
    "start": "2986000",
    "end": "2992320"
  },
  {
    "text": "that eventually we're gonna \nneed to provide a cache, some implementation of a \ncache to our program, right?",
    "start": "2992320",
    "end": "2998480"
  },
  {
    "text": "So in that third type parameter, we now see that our program \nrequires us to give it a cache.",
    "start": "2998480",
    "end": "3006080"
  },
  {
    "text": "We have to provide an \nimplementation at some point, right? So anytime we yield a tag of a service,",
    "start": "3006080",
    "end": "3013760"
  },
  {
    "text": "that requirement will be added \nto the type of the effect. So you'll see, I need to \nprovide a cache and a database",
    "start": "3013760",
    "end": "3019520"
  },
  {
    "text": "and a blah, blah, blah, blah, blah. And then we have our other two type parameters for all of those, I assume \nmost of you are familiar",
    "start": "3019520",
    "end": "3026480"
  },
  {
    "text": "with the type parameters of effect, but I'll quickly review them if you're not. The first parameter is the success parameter.",
    "start": "3026480",
    "end": "3031520"
  },
  {
    "text": "So if our program works like we intended to, nothing will happen, it's void, we'll get something logged to the console.",
    "start": "3031520",
    "end": "3037600"
  },
  {
    "text": "If it fails, we'll get a cache miss error because if we look up something that doesn't exist in the cache,",
    "start": "3037600",
    "end": "3042880"
  },
  {
    "text": "cache miss error, and then we require a cache. Okay.",
    "start": "3042880",
    "end": "3049760"
  },
  {
    "text": "So for our next exercise, you guys can crack open the using a service file.",
    "start": "3049760",
    "end": "3056160"
  },
  {
    "text": "And we're gonna now define the main effect and we're gonna use the interfaces we've defined",
    "start": "3056160",
    "end": "3064960"
  },
  {
    "text": "for our services to actually implement the main program logic. And so let's just take a \nquick look at that together.",
    "start": "3064960",
    "end": "3074480"
  },
  {
    "text": "Using a service. So we've got our main to-do list here.",
    "start": "3074480",
    "end": "3079840"
  },
  {
    "text": "We've got the business logic \nthat we wanna implement. And then we have a hint and some bonus objectives.",
    "start": "3079840",
    "end": "3085920"
  },
  {
    "text": "So your goal is to try to at least get some business logic working, right?",
    "start": "3085920",
    "end": "3092160"
  },
  {
    "text": "Based on the parameters I've described here.",
    "start": "3092160",
    "end": "3095359"
  },
  {
    "text": "And as our hint, we'll probably need to access these services somehow, right? We've seen how to do that.",
    "start": "3097680",
    "end": "3102880"
  },
  {
    "text": "So in our main program, we probably need to access these services. We still won't be able to run our program yet,",
    "start": "3102880",
    "end": "3109119"
  },
  {
    "text": "but the goal of this exercise is to show that you don't need an implementation of the service",
    "start": "3109120",
    "end": "3114880"
  },
  {
    "text": "to start using it, to start prototyping. So go ahead and get started.",
    "start": "3114880",
    "end": "3120240"
  },
  {
    "text": "If there are questions, if you guys need a hand, raise your hand, we'll be walking around and we'll take maybe like 10",
    "start": "3120240",
    "end": "3127120"
  },
  {
    "text": "minutes, 15 minutes to do this. Okay. I think in the interest of time,",
    "start": "3127120",
    "end": "3133280"
  },
  {
    "text": "we'll come back together if that's okay.",
    "start": "3133280",
    "end": "3138480"
  },
  {
    "text": "Did you say something too? No? Yeah.",
    "start": "3138480",
    "end": "3143760"
  },
  {
    "text": "So let's come back together \nand go over my solution.",
    "start": "3143760",
    "end": "3148080"
  },
  {
    "text": "But again, yours might look different. That's totally fine.",
    "start": "3148880",
    "end": "3154640"
  },
  {
    "text": "Okay. So really the goal of this exercise was not for anybody to have like this beautiful",
    "start": "3158640",
    "end": "3166720"
  },
  {
    "text": "working implementation of our code. The goal of this exercise was to get some practice",
    "start": "3166720",
    "end": "3172320"
  },
  {
    "text": "with now that we have tags for our services, extracting the implementation \nof services from those tags",
    "start": "3172320",
    "end": "3180880"
  },
  {
    "text": "and using the operations on \nthose services to do things.",
    "start": "3181600",
    "end": "3186880"
  },
  {
    "text": "So in this case, we have",
    "start": "3186880",
    "end": "3193440"
  },
  {
    "text": "grabbed our PUNSTER client. We've grabbed our PUN distribution network. And then we have a static list of misbehaviors,",
    "start": "3193440",
    "end": "3201200"
  },
  {
    "text": "which I probably should have mentioned and I apologize, I did not. That is my bad.",
    "start": "3201200",
    "end": "3206880"
  },
  {
    "text": "But we have this static list of misbehaviors, which we can take a look at in a second.",
    "start": "3207680",
    "end": "3211599"
  },
  {
    "text": "And we are getting a channel for our misbehavior, a delivery channel.",
    "start": "3212960",
    "end": "3219040"
  },
  {
    "text": "And then we're creating a PUN for our misbehavior, delivering the PUN to the requisite channel,",
    "start": "3219040",
    "end": "3227200"
  },
  {
    "text": "logging out the report that we get back. And then we're catching a few of the tags that we have here.",
    "start": "3227760",
    "end": "3233200"
  },
  {
    "text": "So if the child was immune and \nwe got that error back from, I think it's createPUN that gives us that.",
    "start": "3233200",
    "end": "3240640"
  },
  {
    "text": "Let's take a look. Yeah, we had the child immune error potentially.",
    "start": "3241600",
    "end": "3249040"
  },
  {
    "text": "Oops, sorry. If a child was immune, then we just log a warning",
    "start": "3249040",
    "end": "3254400"
  },
  {
    "text": "that this particular child was immune. We're using up an immunity token.",
    "start": "3254400",
    "end": "3258800"
  },
  {
    "text": "And if we have a failed to fetch error, we log that out as well. I think those were both bonus objectives.",
    "start": "3259440",
    "end": "3264880"
  },
  {
    "text": "And again, your implementation \nmay look very different from mine, which is fine.",
    "start": "3264880",
    "end": "3269840"
  },
  {
    "text": "This is just the implementation that I went with. But the important things to \ntake away from this exercise",
    "start": "3271280",
    "end": "3278800"
  },
  {
    "text": "are that we've managed to write \nout all the business logic for our main application without still,",
    "start": "3278800",
    "end": "3285840"
  },
  {
    "text": "without having defined the \nbusiness logic for our services. So if we actually take a look \nat the main effect here now,",
    "start": "3285840",
    "end": "3297200"
  },
  {
    "text": "in that third type parameter, you'll see that now we require a PUNster client",
    "start": "3297200",
    "end": "3303120"
  },
  {
    "text": "and a PUN distribution \nnetwork service to be provided in order to actually run this program. So if we tried to run this program,",
    "start": "3303120",
    "end": "3316160"
  },
  {
    "text": "we'd get a type error. And this is not the type error, hang on.",
    "start": "3316160",
    "end": "3325200"
  },
  {
    "text": "We're missing a few services \nthat we need to provide. My type error looks a little \nbit different than yours.",
    "start": "3325200",
    "end": "3331760"
  },
  {
    "text": "I'm like a little bit like leaking details from some stuff tomorrow, sorry, Mattia.",
    "start": "3331760",
    "end": "3338640"
  },
  {
    "text": "But the point here is that we have been able to",
    "start": "3340320",
    "end": "3346160"
  },
  {
    "text": "prototype our whole app \nwithout really needing to worry about how this business logic \nis gonna be implemented.",
    "start": "3346160",
    "end": "3352560"
  },
  {
    "text": "So any questions? Yes. I guess you could define the \nwhole thing without hearing.",
    "start": "3352560",
    "end": "3361200"
  },
  {
    "text": "Sure, sure, yeah.",
    "start": "3361200",
    "end": "3364800"
  },
  {
    "text": "If you define the whole program without handling any errors, are you asking if the services will still be in the requirements or?",
    "start": "3366640",
    "end": "3380880"
  },
  {
    "text": "So I think if I understand the question, you also get a type error if you fail to handle certain errors.",
    "start": "3380880",
    "end": "3388240"
  },
  {
    "text": "You can make it do that. You have to define a helper yourself to do that. In 4.0, we're considering exporting",
    "start": "3388240",
    "end": "3396880"
  },
  {
    "text": "basically like identity functions \nthat allow you to do that from every module.",
    "start": "3396880",
    "end": "3401359"
  },
  {
    "text": "But in your own code, you would have to define basically an identity where you pass in an effect",
    "start": "3402320",
    "end": "3408560"
  },
  {
    "text": "that has an E and then the \nreturn type is an effect that has never in the error channel. And that would give you a type error",
    "start": "3408560",
    "end": "3414960"
  },
  {
    "text": "if you didn't handle any errors.",
    "start": "3414960",
    "end": "3421485"
  },
  {
    "text": "(audience member speaking off mic) Certainly, yeah, and that's totally possible. We just don't have any helpers that we export currently for that.",
    "start": "3421486",
    "end": "3427359"
  },
  {
    "text": "Yes.",
    "start": "3427360",
    "end": "3433760"
  },
  {
    "text": "Correct.",
    "start": "3433760",
    "end": "3439200"
  },
  {
    "text": "Okay, so the question is in my solution, there is an error that I'm not handling.",
    "start": "3439200",
    "end": "3445920"
  },
  {
    "text": "I don't remember which one it is.",
    "start": "3445920",
    "end": "3449599"
  },
  {
    "text": "Yeah, there's two. There's the malformed pun error and a no channel available error. So what effect does,",
    "start": "3452240",
    "end": "3459039"
  },
  {
    "text": "and this kind of goes beyond \nthe scope of services, but we can talk about it. What effect does in the case \nwhere errors are unhandled",
    "start": "3459040",
    "end": "3465280"
  },
  {
    "text": "when you run your main application is it automatically elects \nthose errors into defects.",
    "start": "3465280",
    "end": "3472400"
  },
  {
    "text": "So if those errors occur in your program and they were totally unhandled, these expected errors,",
    "start": "3472400",
    "end": "3478319"
  },
  {
    "text": "these ones that are part of our domain, we've defined them as part of our domain that these are things we know can happen,",
    "start": "3478320",
    "end": "3485680"
  },
  {
    "text": "they automatically get elected to what we call a defect in \neffect or an unexpected error,",
    "start": "3485680",
    "end": "3491520"
  },
  {
    "text": "something that happened \nthat we weren't planning on. And you'll get a full cause \nprinted out of what happened.",
    "start": "3491520",
    "end": "3498880"
  },
  {
    "text": "So for example, if we fail with a no channel available error because the channel we wanted wasn't available,",
    "start": "3498880",
    "end": "3506720"
  },
  {
    "text": "the program would terminate and we'd get a trace of what went wrong.",
    "start": "3508560",
    "end": "3516079"
  },
  {
    "text": "As long as you're annotating your code with spans, you'll get a trace of what went wrong. But the point is you'll get a defect",
    "start": "3516080",
    "end": "3523119"
  },
  {
    "text": "for any errors that were unhandled. Does that make sense? (indistinct)",
    "start": "3523120",
    "end": "3533400"
  },
  {
    "text": "Sure.",
    "start": "3533400",
    "end": "3538720"
  },
  {
    "text": "Yeah. And I think that was the question that, I'm sorry, what was your name? Dev. I think that was the question that Dev had,",
    "start": "3538720",
    "end": "3544720"
  },
  {
    "text": "which is, sorry, is that Dev? Okay, cool. I think that was the question that Dev had where",
    "start": "3544720",
    "end": "3551360"
  },
  {
    "text": "the question was, isn't TypeScript meant to help you catch these errors so that if you have expected errors,",
    "start": "3553440",
    "end": "3560079"
  },
  {
    "text": "you don't try to run your \nprogram without handling them. And yes, that's true.",
    "start": "3560640",
    "end": "3566080"
  },
  {
    "text": "But in order to force that in effect, you would have to create an identity function",
    "start": "3567440",
    "end": "3573200"
  },
  {
    "text": "that takes in an effect \nwith an actual E, generic E, and returns an effect with never in the error,",
    "start": "3573200",
    "end": "3581440"
  },
  {
    "text": "which will then TypeScript will tell you, hey, you have errors you haven't handled. In the next major version of effect,",
    "start": "3581440",
    "end": "3587920"
  },
  {
    "text": "we're actually planning on exporting like helper methods to do that to help",
    "start": "3587920",
    "end": "3593359"
  },
  {
    "text": "because there are very valid circumstances where you wanna run a program like this",
    "start": "3593360",
    "end": "3598960"
  },
  {
    "text": "with expected errors that you're not handling. Because again, if you're prototyping, it's kind of annoying that like we would force you",
    "start": "3598960",
    "end": "3605520"
  },
  {
    "text": "to handle every single expected \nerror if you're running, if you run a program like this.",
    "start": "3605520",
    "end": "3614400"
  },
  {
    "text": "Yeah, I mean, but, and there are also valid, the thing that you can't do is run this program",
    "start": "3614400",
    "end": "3621600"
  },
  {
    "text": "without providing all the \nrequirements and needs, right? If you try to run this program without providing the services, you can't do that.",
    "start": "3621600",
    "end": "3629280"
  },
  {
    "text": "And if you do run this program, you'll get like a service not found error, like we were talking about before.",
    "start": "3629280",
    "end": "3635600"
  },
  {
    "text": "Yeah.",
    "start": "3635600",
    "end": "3640400"
  },
  {
    "text": "(man speaking off mic) (man speaking off mic) So, and then, so the question was, I'm using in my solution, \nthe effect.andthen method",
    "start": "3650000",
    "end": "3657280"
  },
  {
    "text": "instead of effect.flatMap and effect.map. Yes, they're essentially equivalent.",
    "start": "3657280",
    "end": "3663200"
  },
  {
    "text": "However, effect.andthen has some like, I'll call them like superpowers or helpers.",
    "start": "3663200",
    "end": "3670240"
  },
  {
    "text": "Basically, you can't, it is many different methods squeezed into one.",
    "start": "3670240",
    "end": "3676319"
  },
  {
    "text": "So, somebody's gonna have to help me with all the things you can \npass with effect.andthen,",
    "start": "3676320",
    "end": "3681039"
  },
  {
    "text": "but you can do, you can pass it an effect, you can pass it a raw value, and then it'll function the same as map.",
    "start": "3681680",
    "end": "3688560"
  },
  {
    "text": "You can pass it something that's not an effect, and then I think it gets wrapped in a sync call.",
    "start": "3688560",
    "end": "3695120"
  },
  {
    "text": "Promise, you can pass a promise. So it's kind of like flatMap on steroids",
    "start": "3695120",
    "end": "3700960"
  },
  {
    "text": "where you can pass a lot of different things. And we chose to use and then,",
    "start": "3700960",
    "end": "3707360"
  },
  {
    "text": "in my section of the, I don't know if Tim leaned on that in his section, but in my section, we chose \nto use and then just like,",
    "start": "3707360",
    "end": "3714400"
  },
  {
    "text": "keep a level playing field. Yeah.",
    "start": "3714400",
    "end": "3739716"
  },
  {
    "text": "(man speaking off mic) (man speaking off mic) That's a good question. The question is, when you wanna, I chose to deal with errors in line here",
    "start": "3739716",
    "end": "3746240"
  },
  {
    "text": "versus at the end of my program. What are like best practices or recommendations surrounding how to deal with errors in line",
    "start": "3746240",
    "end": "3753200"
  },
  {
    "text": "versus at the end of your program? Do we have any like recommendations? I'm gonna give kind of like \na non-committal answer here,",
    "start": "3753200",
    "end": "3759520"
  },
  {
    "text": "which is, it depends. My favorite software \nengineering answer, it depends.",
    "start": "3759520",
    "end": "3764400"
  },
  {
    "text": "But the reason why I chose to deal with the errors in line here is because I still want that loop",
    "start": "3765520",
    "end": "3772720"
  },
  {
    "text": "to run for every misbehavior \nif these errors occur. So I still wanna get through all my misbehaviors,",
    "start": "3772720",
    "end": "3780160"
  },
  {
    "text": "even if I encounter an immune child or if my pun failed to fetch,",
    "start": "3780160",
    "end": "3785359"
  },
  {
    "text": "it would be unfortunate if my pun failed to fetch because obviously that child needs to be punished.",
    "start": "3785360",
    "end": "3790720"
  },
  {
    "text": "But that's kind of why I \nchose to do it in line here. Because if I didn't and I handled the errors",
    "start": "3790720",
    "end": "3798000"
  },
  {
    "text": "at the edge of my program, and I failed on my first \npun that I tried to fetch,",
    "start": "3798000",
    "end": "3805200"
  },
  {
    "text": "it would terminate the program.",
    "start": "3805200",
    "end": "3816618"
  },
  {
    "text": "(man speaking off mic) Yep. The question was, is that \nthe reason why I'm piping off of create pun here?",
    "start": "3816618",
    "end": "3823519"
  },
  {
    "text": "Because I want to not short circuit the evaluation of that effect.",
    "start": "3824640",
    "end": "3829599"
  },
  {
    "text": "Basically, if I yielded and then tried to do all the other logic, \neffect.gen would short circuit",
    "start": "3830160",
    "end": "3835760"
  },
  {
    "text": "if there was an error. Whereas piping off the end of create pun",
    "start": "3835760",
    "end": "3842480"
  },
  {
    "text": "and yielding that entire \neffect allows me to handle those errors as part of that effect.",
    "start": "3842480",
    "end": "3847680"
  },
  {
    "text": "You can think of that pipe and all the stuff that happens in it as one effect.",
    "start": "3847680",
    "end": "3853360"
  },
  {
    "text": "We call them, sometimes you \nhear us call them regions, effect regions, like a block \nof stuff that we've piped",
    "start": "3853360",
    "end": "3859840"
  },
  {
    "text": "together a pipeline or a workflow or whatever. That's one whole effect \nand so we can handle errors",
    "start": "3859840",
    "end": "3865119"
  },
  {
    "text": "happening in that part of our program. Any other questions?",
    "start": "3865120",
    "end": "3870640"
  },
  {
    "text": "Yeah. There are no stupid questions.",
    "start": "3870640",
    "end": "3880640"
  },
  {
    "text": "(man speaking off mic)",
    "start": "3880640",
    "end": "3894960"
  },
  {
    "text": "Yeah, that's a very good question. The question was, the generator is since",
    "start": "3894960",
    "end": "3903040"
  },
  {
    "text": "kind of like deprecated in \nthe effect.gen functions, you don't need it anymore, but it's still there. The question was, can we still use it?",
    "start": "3903040",
    "end": "3910160"
  },
  {
    "text": "Should we still use it for \nthe pipeability it gives? Or should we be using .pipe or importing pipe?",
    "start": "3910160",
    "end": "3916480"
  },
  {
    "text": "My answer is don't use the adapter. It's going away in the next major.",
    "start": "3917120",
    "end": "3922240"
  },
  {
    "text": "So if you are using it, it \nwill break in the next major. But I think the situations \nwhere you use pipe directly",
    "start": "3922240",
    "end": "3931040"
  },
  {
    "text": "versus .pipe is totally up to you. If pipe is available, like .pipe on the data type",
    "start": "3931040",
    "end": "3936160"
  },
  {
    "text": "you're working with, I just find it easier. I also find it more legible in many cases. But if you're working with a data type where .pipe",
    "start": "3936160",
    "end": "3943040"
  },
  {
    "text": "is not available, like if \nyou're using the array module from effects, for example, to work with an array,",
    "start": "3943040",
    "end": "3948880"
  },
  {
    "text": "we can attach .pipe to the array prototype. That would kind of be unsafe. So in that case, you might import pipe.",
    "start": "3948880",
    "end": "3956720"
  },
  {
    "text": "So that's kind of like \nanother it depends situation. But I recommend not using the adapter.",
    "start": "3956720",
    "end": "3962640"
  },
  {
    "text": "If at all possible. Cool.",
    "start": "3962640",
    "end": "3968000"
  },
  {
    "text": "Okay. We have about five minutes till our break, our first break, I think.",
    "start": "3968000",
    "end": "3975680"
  },
  {
    "text": "What I would suggest we do \nis maybe take our break. Do we have five minutes? Or is it 10 45?",
    "start": "3975680",
    "end": "3981600"
  },
  {
    "text": "Yeah, 10 30 was our first break. I'm gonna suggest we take our break early now.",
    "start": "3981600",
    "end": "3987280"
  },
  {
    "text": "And then we regroup. So okay, no, that's not okay. We're not gonna do that.",
    "start": "3987280",
    "end": "3992480"
  },
  {
    "text": "Can I keep going for like a little bit? You need five minutes.",
    "start": "3992480",
    "end": "3997520"
  },
  {
    "text": "Okay, okay. So I can keep going until they're ready. Okay, we're gonna delay our break.",
    "start": "3998160",
    "end": "4006000"
  },
  {
    "text": "We're gonna delay our break until such time as we can take our break as.",
    "start": "4006000",
    "end": "4014080"
  },
  {
    "text": "Okay, any other questions about this? Yeah.",
    "start": "4015120",
    "end": "4022960"
  },
  {
    "text": "Yeah, that's a good question. That's a very good question. The question was why am I using a for loop instead of effect dot for each?",
    "start": "4022960",
    "end": "4028640"
  },
  {
    "text": "I just didn't need to use \neffect dot for each here. I could have easily used effect dot for each.",
    "start": "4028640",
    "end": "4035040"
  },
  {
    "text": "But when we're in a generator and I don't need to do things concurrently,",
    "start": "4035040",
    "end": "4039200"
  },
  {
    "text": "sometimes I just use a for \nloop to keep things clean. Not that effect for each is not clean.",
    "start": "4040160",
    "end": "4046400"
  },
  {
    "text": "I just, again, it was like, just my, it's my prerogative. I can let you can do,",
    "start": "4046400",
    "end": "4052160"
  },
  {
    "text": "the only time a for each would be necessary is if you wanted to do all of this concurrently.",
    "start": "4052160",
    "end": "4057600"
  },
  {
    "text": "So in my case, I wanted to do these things, I wanted to punish each child sequentially.",
    "start": "4057600",
    "end": "4066000"
  },
  {
    "text": "And maybe really quick, we'll do your question and then I wanna show one thing.",
    "start": "4066000",
    "end": "4071120"
  },
  {
    "text": "Yeah. (indistinct) (indistinct) Sure.",
    "start": "4071120",
    "end": "4089760"
  },
  {
    "text": "So basically, I think the question was, you can correct me if I'm wrong. If we wanna collect failed misbehaviors",
    "start": "4089760",
    "end": "4097600"
  },
  {
    "text": "and then do something at the end of our program to deal with all of those \nfailed misbehaviors, yeah. Again, we can kind of do whatever we want.",
    "start": "4097600",
    "end": "4104240"
  },
  {
    "text": "We're in a generator, so we \ncould create like an array, a set, whatever, maybe a map, I don't know.",
    "start": "4104240",
    "end": "4109520"
  },
  {
    "text": "Some data structure to hold \nour failed misbehaviors. And then we could, depending on whether we wanna handle both defects",
    "start": "4109520",
    "end": "4118480"
  },
  {
    "text": "and expected errors, like \nexpected and unexpected errors or expected errors, we could push the misbehaviors",
    "start": "4118480",
    "end": "4125120"
  },
  {
    "text": "into that array of misbehaviors on exit or on, we could catch all.",
    "start": "4125120",
    "end": "4131680"
  },
  {
    "text": "And like, basically we have the flexibility to do whatever we want, but what I would probably do \nto keep things like super easy",
    "start": "4131680",
    "end": "4138400"
  },
  {
    "text": "is create an array at the top of my generator of failed misbehaviors or children,",
    "start": "4138400",
    "end": "4144880"
  },
  {
    "text": "I still need to punish, whatever, and push misbehaviors in there if they fail.",
    "start": "4144880",
    "end": "4150880"
  },
  {
    "text": "And how I do that is kind of up to me. Like if I wanted to do it on any failure,",
    "start": "4150880",
    "end": "4158719"
  },
  {
    "text": "I could tap error and like do it in there. If I wanted to do it on unexpected errors as well,",
    "start": "4158720",
    "end": "4163920"
  },
  {
    "text": "like if something unexpected happened, I would need to handle defects in this program",
    "start": "4163920",
    "end": "4170160"
  },
  {
    "text": "to prevent it from crashing, but I could do it in like a tap error cause before my catch tags.",
    "start": "4170160",
    "end": "4175680"
  },
  {
    "text": "So it's kind of, you can do whatever you want, but the easiest way to do it in my mind would be to create an array,",
    "start": "4175680",
    "end": "4181679"
  },
  {
    "text": "push into it when there's a failure. And then at the end of my generator, do something to handle all of those things.",
    "start": "4181680",
    "end": "4186799"
  },
  {
    "text": "Does that make sense? The last thing I wanna show in this sample here",
    "start": "4186800",
    "end": "4192720"
  },
  {
    "text": "is our misbehaviors. You guys probably already took a peek at this, but let's take a look.",
    "start": "4192720",
    "end": "4198880"
  },
  {
    "text": "Okay, so we've got a couple \nof naughty children here.",
    "start": "4198880",
    "end": "4205920"
  },
  {
    "text": "So Michael has been extremely mean to me.",
    "start": "4205920",
    "end": "4210640"
  },
  {
    "text": "The category of his misbehavior was he did not appreciate Neovim. My beautiful Neovim configuration \nwas totally rejected",
    "start": "4212560",
    "end": "4221040"
  },
  {
    "text": "and underappreciated. So that's the maximum severity punishment",
    "start": "4221040",
    "end": "4226720"
  },
  {
    "text": "that we can give. The severity scores are on \na scale from one to five and Michael is, he's getting a really gnarly pun.",
    "start": "4226720",
    "end": "4235280"
  },
  {
    "text": "Then we've got Sebastian in here. And for those of you who don't know,",
    "start": "4236240",
    "end": "4242239"
  },
  {
    "text": "Sebastian designed effects lovely crown module, but he spent way too much time on it,",
    "start": "4242240",
    "end": "4248320"
  },
  {
    "text": "like way too much time. I think that our entire \ncompany retreat in November",
    "start": "4248320",
    "end": "4253920"
  },
  {
    "text": "was spent on the crown module. Where's Sebastian? Steven here.",
    "start": "4253920",
    "end": "4259600"
  },
  {
    "text": "Not here to defend himself, okay. But it's not that big of a deal,",
    "start": "4259600",
    "end": "4266079"
  },
  {
    "text": "so we're giving it a severity of two. And then we've also got Johannes in here for his gratuitous use of red arrows.",
    "start": "4266080",
    "end": "4272400"
  },
  {
    "text": "That's kind of an inside joke, but also not that severe.",
    "start": "4272400",
    "end": "4277600"
  },
  {
    "text": "So we're giving him a severity of three. And then we've got a default set of tokens",
    "start": "4277600",
    "end": "4284080"
  },
  {
    "text": "that we're awarding for good behavior. And so we've decided that Sebastian can be awarded",
    "start": "4284080",
    "end": "4290160"
  },
  {
    "text": "an immunity token in certain circumstances because the crown module is actually kind of cool in effect.",
    "start": "4290160",
    "end": "4294960"
  },
  {
    "text": "But anyways, when we actually \nrun these programs later, or this program later,",
    "start": "4296080",
    "end": "4301200"
  },
  {
    "text": "we'll see a full report of pun delivery for all of these naughty children.",
    "start": "4301200",
    "end": "4307520"
  },
  {
    "text": "And we'll get to see like kind of what happens as we run the program.",
    "start": "4307520",
    "end": "4315280"
  },
  {
    "text": "Should I keep going? Okay, I'll keep going. Oh, we're good?",
    "start": "4315280",
    "end": "4320960"
  },
  {
    "text": "No. Ah, okay. Breaking on time. We'll resume around 10 40-ish.",
    "start": "4320960",
    "end": "4327600"
  },
  {
    "text": "You guys can grab a snack and some coffee. All right, so we're gonna get started again.",
    "start": "4327600",
    "end": "4334320"
  },
  {
    "start": "4330000",
    "end": "5720000"
  },
  {
    "text": "So up until now, we've talked about how we can \nactually define a service. And we've talked about using services,",
    "start": "4335760",
    "end": "4343200"
  },
  {
    "text": "but we haven't talked about \nhow we can actually provide a service to our program, right?",
    "start": "4343200",
    "end": "4348320"
  },
  {
    "text": "And we're gonna start off with the most basic way of providing services.",
    "start": "4348320",
    "end": "4353760"
  },
  {
    "text": "And then we'll kind of build \nup to maybe a little bit more of like the robust ways that you can go about",
    "start": "4353760",
    "end": "4360159"
  },
  {
    "text": "providing services to your effect programs. So the two of the most basic methods we can use",
    "start": "4360160",
    "end": "4366000"
  },
  {
    "text": "to provide an implementation of a service to our effect programs are \neffect of provide service,",
    "start": "4366000",
    "end": "4372160"
  },
  {
    "text": "which allows you to provide a direct like a concrete implementation \nof a service with its tag.",
    "start": "4372160",
    "end": "4379440"
  },
  {
    "text": "So here you see, we're taking some effect and using pipe to wrap it with provide service.",
    "start": "4379440",
    "end": "4388080"
  },
  {
    "text": "We've got a concrete service tag for our service. And then we've got also a \nconcrete service implementation.",
    "start": "4388080",
    "end": "4394960"
  },
  {
    "text": "And the reason why both of \nthese things are required again, is because in the background,",
    "start": "4394960",
    "end": "4400320"
  },
  {
    "text": "when we create the context object that effect uses to manage all of your requirements,",
    "start": "4400320",
    "end": "4406160"
  },
  {
    "text": "we need both the tag and the implementation. So hence providing a service, we need both the tag and the implementation.",
    "start": "4406160",
    "end": "4413040"
  },
  {
    "text": "It also allows providing \na service to be type safe. So because the tag carries the \nservice shape along with it.",
    "start": "4414000",
    "end": "4420560"
  },
  {
    "text": "So we know that the shape of \nyour service implementation is correct when you're actually passing it in.",
    "start": "4420560",
    "end": "4426239"
  },
  {
    "text": "And then provide service effect is kind of the effectful version of that. So if your service needs \nto be actually constructed",
    "start": "4426240",
    "end": "4434800"
  },
  {
    "text": "with effectful logic, like, I don't know, maybe you need access to a different service",
    "start": "4434800",
    "end": "4440000"
  },
  {
    "text": "as part of building a service, or maybe you need to call out to an API to get some information, whatever.",
    "start": "4440000",
    "end": "4446560"
  },
  {
    "text": "Provide service effect can allow you to build can allow you to pass an effect",
    "start": "4447280",
    "end": "4452800"
  },
  {
    "text": "that returns a service implementation. Okay.",
    "start": "4452800",
    "end": "4465120"
  },
  {
    "text": "So we'll take a look at an example of this going back to our cache example.",
    "start": "4465120",
    "end": "4470720"
  },
  {
    "text": "So we still have the \nimplementation of our program here where we're accessing our cache,",
    "start": "4470720",
    "end": "4478160"
  },
  {
    "text": "we're using lookup to get \nsome value from a cache key, and then we're logging out the result.",
    "start": "4478160",
    "end": "4484720"
  },
  {
    "text": "In our program, you'll notice that we still have the requirement on cache \nhere in the program itself.",
    "start": "4488560",
    "end": "4495360"
  },
  {
    "text": "But to make our program runnable, we actually need to provide \nsome implementation of cache.",
    "start": "4495360",
    "end": "4502560"
  },
  {
    "text": "Right? So in this case, we're using effect.provideService",
    "start": "4502560",
    "end": "4506080"
  },
  {
    "text": "to passing our cache tag that we created up above.",
    "start": "4507680",
    "end": "4513040"
  },
  {
    "text": "And we're providing a concrete implementation of the lookup method so that \nwhen we access the cache",
    "start": "4513040",
    "end": "4518239"
  },
  {
    "text": "in our program, this is the implementation it's gonna get back. So in this case, we're just \nsucceeding with some string,",
    "start": "4518240",
    "end": "4527120"
  },
  {
    "text": "but you can imagine that when you're building your services, you can implement them however you want.",
    "start": "4527120",
    "end": "4533679"
  },
  {
    "text": "And in this case, I mentioned \nwe're using provideService, but there is the effectful variant as well if we need to build our service \nfrom some effectful logic.",
    "start": "4533680",
    "end": "4544320"
  },
  {
    "text": "And now this program is actually runnable, meaning that the requirements \nchannel of this effect,",
    "start": "4544320",
    "end": "4553599"
  },
  {
    "text": "the requirements type, that \nthird type parameter here is now that we've provided \nan implementation of cache,",
    "start": "4553600",
    "end": "4560480"
  },
  {
    "text": "it erases cache from our requirements. So up above, you see cache sitting in the requirements there",
    "start": "4560480",
    "end": "4565920"
  },
  {
    "text": "because we haven't provided one yet. But once we actually provide \nthe cache to our program,",
    "start": "4565920",
    "end": "4571600"
  },
  {
    "text": "it erases that type from the requirements. And now we can actually run the program. If we tried to run program up above",
    "start": "4571600",
    "end": "4579600"
  },
  {
    "text": "with cache still in the requirements, we'd get a type error because we haven't provided an implementation.",
    "start": "4579600",
    "end": "4585600"
  },
  {
    "text": "Does this make sense to folks? Yes, cool.",
    "start": "4585600",
    "end": "4591599"
  },
  {
    "text": "There are a few things to \nnote about the provideService family of methods in effect,",
    "start": "4594000",
    "end": "4602400"
  },
  {
    "text": "which are that they're not the most flexible way",
    "start": "4602400",
    "end": "4607840"
  },
  {
    "text": "to build up the services you need in your program. We'll talk about a little more about why that is",
    "start": "4607840",
    "end": "4613040"
  },
  {
    "text": "in a few slides. But it can be very difficult to get the order",
    "start": "4613040",
    "end": "4618400"
  },
  {
    "text": "of provision right when you're \nproviding many services. If you have hundreds of services",
    "start": "4618400",
    "end": "4624000"
  },
  {
    "text": "that all depend on one another, and maybe also all depend on one service, and you have a big complex dependency graph,",
    "start": "4624000",
    "end": "4631440"
  },
  {
    "text": "just using the provide methods can get complex. It's possible to avoid, I'm \nalluding to layers of course,",
    "start": "4631440",
    "end": "4639920"
  },
  {
    "text": "but it's possible to avoid using layers entirely to some degree.",
    "start": "4639920",
    "end": "4645440"
  },
  {
    "text": "No, it is actually possible. But to do that with the provide methods would be kind of laborious, \nit'd be very difficult.",
    "start": "4645440",
    "end": "4652400"
  },
  {
    "text": "So we're showing provideService \nas an example here, because there are situations where this is useful.",
    "start": "4652400",
    "end": "4658240"
  },
  {
    "text": "In particular, the provideFamily is useful when you wanna provide implementations,",
    "start": "4658800",
    "end": "4667520"
  },
  {
    "text": "you wanna provide implementations locally to different parts of your program. So if you wanna provide cacheX over here,",
    "start": "4669760",
    "end": "4676639"
  },
  {
    "text": "implementation of cacheX over here, and another different \nimplementation of cache over here in your program, the provide methods",
    "start": "4676640",
    "end": "4683920"
  },
  {
    "text": "are kind of useful for that. And we'll show what I mean by that in a second.",
    "start": "4683920",
    "end": "4689680"
  },
  {
    "text": "So let's take a look at a demo of what I mean by doing this.",
    "start": "4689680",
    "end": "4695600"
  },
  {
    "text": "And I'm gonna try something Tim suggested. I don't know if it's gonna work.",
    "start": "4695600",
    "end": "4701680"
  },
  {
    "text": "In the AV booth, let me know if this doesn't work.",
    "start": "4701680",
    "end": "4707560"
  },
  {
    "text": "(mumbles) Did it work?",
    "start": "4707560",
    "end": "4717120"
  },
  {
    "text": "You know what?",
    "start": "4717120",
    "end": "4727680"
  },
  {
    "text": "Just making sure that they're not yelling at me from in there. Okay, this will make my life a lot easier.",
    "start": "4727680",
    "end": "4735360"
  },
  {
    "text": "Hopefully, put it in there.",
    "start": "4736320",
    "end": "4741679"
  },
  {
    "text": "Okay, that's not great. Let's just do this for now.",
    "start": "4741680",
    "end": "4747119"
  },
  {
    "text": "And then when Mike is back, \nwe can try the other way.",
    "start": "4747120",
    "end": "4758960"
  },
  {
    "text": "So we're gonna take a look at a demo, which you guys also have access to all the demos.",
    "start": "4760160",
    "end": "4766960"
  },
  {
    "text": "There's only two in my section, but we're gonna first take a \nlook at providing a service,",
    "start": "4766960",
    "end": "4772880"
  },
  {
    "text": "like a single implementation \nto the entire application. And then we'll talk about in the second demo,",
    "start": "4773600",
    "end": "4780800"
  },
  {
    "text": "what I meant by you can provide \ndifferent implementations to different parts of your program. So here, you can see we've got our cache.",
    "start": "4782560",
    "end": "4790840"
  },
  {
    "text": "Let's go back over here. Okay, we've got our cache over here,",
    "start": "4790840",
    "end": "4796559"
  },
  {
    "text": "service definition right here. We've got a static store that we've just defined",
    "start": "4796560",
    "end": "4802560"
  },
  {
    "text": "as like a map to kind of show this example. And we've got an in-memory \ncache that we've defined,",
    "start": "4802560",
    "end": "4809840"
  },
  {
    "text": "because we've got a static cache, this is an in-memory cache. And maybe a quick note,",
    "start": "4809840",
    "end": "4814800"
  },
  {
    "text": "all tags come with this .of method,",
    "start": "4815920",
    "end": "4821120"
  },
  {
    "text": "which is essentially an identity function for the service implementation.",
    "start": "4821120",
    "end": "4826159"
  },
  {
    "text": "It allows you to have a way to know the, to get a type safe representation of the service",
    "start": "4826160",
    "end": "4833680"
  },
  {
    "text": "without having to type it yourself. So for example, I don't have to do string here",
    "start": "4833680",
    "end": "4839360"
  },
  {
    "text": "because cache.of knows like \nwhat the shape of the service",
    "start": "4839360",
    "end": "4844560"
  },
  {
    "text": "shape I have to pass in is. So you can just start implementing stuff and you get auto complete and types.",
    "start": "4844560",
    "end": "4850639"
  },
  {
    "text": "So cache.of method is just a helper on tags. And it knows key is a string",
    "start": "4850640",
    "end": "4857040"
  },
  {
    "text": "because we've defined it in \nour service shape up above. So now that this is the \ndefinition of our cache, right?",
    "start": "4857040",
    "end": "4866480"
  },
  {
    "text": "We've got the actual concrete implementation of an in-memory cache that we're gonna work with.",
    "start": "4866480",
    "end": "4873680"
  },
  {
    "text": "And we've got two sub programs here, two programs that we're gonna \nmerge into a main program.",
    "start": "4873680",
    "end": "4881600"
  },
  {
    "text": "Both programs access the \ncache by yielding the tag. Both programs look up different keys in the cache",
    "start": "4881600",
    "end": "4892000"
  },
  {
    "text": "and both programs log out the value.",
    "start": "4892000",
    "end": "4895280"
  },
  {
    "text": "In our main program, we're just gonna run both \nsub programs sequentially.",
    "start": "4897200",
    "end": "4902880"
  },
  {
    "text": "And then to make the actual \nfinal program runnable, because if you'll notice right now,",
    "start": "4902880",
    "end": "4908240"
  },
  {
    "text": "we still have cache in our requirements. To make the actual program runnable,",
    "start": "4908240",
    "end": "4914480"
  },
  {
    "text": "we're gonna provide this \nin-memory cache implementation of the cache service with the cache tag.",
    "start": "4914480",
    "end": "4922560"
  },
  {
    "text": "And now we've satisfied all the requirements of our program. So now the program's requirements are never, we can actually run this thing.",
    "start": "4922560",
    "end": "4928400"
  },
  {
    "text": "Oops, hang on. And if you guys were to run this yourselves,",
    "start": "4928400",
    "end": "4935599"
  },
  {
    "text": "which you can do in the read \nme of our workshop repository,",
    "start": "4935600",
    "end": "4940640"
  },
  {
    "text": "we instruct you folks how to \nuse TSX to run these files. It's just PMPM TSX path to file.",
    "start": "4940640",
    "end": "4946800"
  },
  {
    "text": "If you run this, you'll see that the values you get out are in-memory value one and memory value two,",
    "start": "4947440",
    "end": "4954480"
  },
  {
    "text": "if I did this right. I may have forgotten to put \nthe in-memory PC, no, here.",
    "start": "4954480",
    "end": "4960720"
  },
  {
    "text": "Because we're basically accessing these values from the cache, okay? And this, again, what I'm trying to show here",
    "start": "4960720",
    "end": "4969280"
  },
  {
    "text": "is that these two sub programs or sub effects or smaller effects are going to end up accessing",
    "start": "4969280",
    "end": "4976720"
  },
  {
    "text": "the same implementation of the cache in the effect environment. But let's say that in one part of our program,",
    "start": "4976720",
    "end": "4985120"
  },
  {
    "text": "maybe we want an in-memory cache, and maybe in another part of our program, we want to have a file system cache",
    "start": "4985120",
    "end": "4991679"
  },
  {
    "text": "or something like that. Well, we can do that, and we can use provide service \nas one method of doing that.",
    "start": "4991680",
    "end": "4999200"
  },
  {
    "text": "Right, so if we take a look at our second providing a service demo,",
    "start": "4999200",
    "end": "5006160"
  },
  {
    "text": "we still have all the same setup code here, same in-memory cache,",
    "start": "5006160",
    "end": "5013280"
  },
  {
    "text": "aside from the fact that we are, no, same in-memory cache.",
    "start": "5013280",
    "end": "5020639"
  },
  {
    "text": "And now we've also got an implementation of a file system cache here, right?",
    "start": "5020640",
    "end": "5026320"
  },
  {
    "text": "So we've got the lookup method using tri promise, it's using nodes file system module",
    "start": "5026320",
    "end": "5033039"
  },
  {
    "text": "to read a particular file based on the cache key. And then we catch and map it to a cache miss error",
    "start": "5033040",
    "end": "5039680"
  },
  {
    "text": "if we fail to read that particular file, right? So now, like, we've at least satisfied the interface of our cache",
    "start": "5039680",
    "end": "5045760"
  },
  {
    "text": "where we need to have a cache \nmiss error as the error type. Now, we still have our two sub programs,",
    "start": "5045760",
    "end": "5052400"
  },
  {
    "text": "which again, are identical to what we had before.",
    "start": "5052400",
    "end": "5058000"
  },
  {
    "text": "But if we want to provide \ndifferent implementations of a service, one of the methods of doing that",
    "start": "5058000",
    "end": "5065280"
  },
  {
    "text": "is using provide service with \ndifferent implementations to the specific programs.",
    "start": "5065280",
    "end": "5070880"
  },
  {
    "text": "So in this case, instead of just yielding sub program one to run it, we're also piping that into provide service",
    "start": "5070880",
    "end": "5077440"
  },
  {
    "text": "and providing the in-memory \ncache to sub program one. In sub program two, instead, \nwe're using the same tag,",
    "start": "5077440",
    "end": "5085280"
  },
  {
    "text": "but we're using the file system cache. Now, some of you may be like, oh, hey, Max, you told me that",
    "start": "5085280",
    "end": "5091040"
  },
  {
    "text": "if I have two implementations, the identifier, they're gonna \ncollide, blah, blah, blah, right, that's not really the case here",
    "start": "5091040",
    "end": "5098720"
  },
  {
    "text": "because you can think of these as two branches to our program, right? We've got sub program one executing,",
    "start": "5098720",
    "end": "5105200"
  },
  {
    "text": "sub program two that's gonna run. We're just saying that in sub program one, for the cache that you need, \nuse this implementation,",
    "start": "5105200",
    "end": "5113360"
  },
  {
    "text": "in sub program two, use this implementation. It's the same tag, we're just providing",
    "start": "5113360",
    "end": "5119119"
  },
  {
    "text": "a different implementation of the service to different parts of our program. And you can mix and match \nthis as much as you want.",
    "start": "5119120",
    "end": "5126159"
  },
  {
    "text": "So for example, if I wanted to say, everything in my program \nshould use the file system,",
    "start": "5126160",
    "end": "5133200"
  },
  {
    "text": "except for sub program one, I could do that by taking \nthis pipe and putting it here.",
    "start": "5133200",
    "end": "5142560"
  },
  {
    "text": "And now sub program two is gonna get this version of the cache,",
    "start": "5142560",
    "end": "5148800"
  },
  {
    "text": "and whereas sub program one \nis gonna get this version. So this kind of gets to the concept",
    "start": "5148800",
    "end": "5154639"
  },
  {
    "text": "where I very, very briefly alluded to it earlier, but a lot of the methods in effect",
    "start": "5154640",
    "end": "5161199"
  },
  {
    "text": "that you pipe together, take in an effect and return a new one. That's kind of like the whole concept",
    "start": "5161200",
    "end": "5167280"
  },
  {
    "text": "of building up a pipeline, right? You take in an effect, you \npipe it into some method, it takes in that effect and \nit returns a brand new one.",
    "start": "5167280",
    "end": "5174880"
  },
  {
    "text": "And this is exactly what we're doing here. Sub program one, we're piping \nthat into provide service,",
    "start": "5174880",
    "end": "5180080"
  },
  {
    "text": "it takes in sub program one, \nprovides that implementation, the in memory cache \nimplementation to sub program one,",
    "start": "5180080",
    "end": "5187040"
  },
  {
    "text": "and then returns a brand \nnew effect that we evaluate with that new cache implementation. Whereas with sub program two,",
    "start": "5187040",
    "end": "5196000"
  },
  {
    "text": "we're executing that in this entire generator, which is getting this version of the cache. So we're basically overriding \nthe file system version",
    "start": "5196000",
    "end": "5203680"
  },
  {
    "text": "of the cache with the in \nmemory one in sub program one. It's kind of like, if it's \neasier for you to conceptualize,",
    "start": "5203680",
    "end": "5211280"
  },
  {
    "text": "in this case, we're overriding an implementation, that's one way to think about it.",
    "start": "5211280",
    "end": "5215840"
  },
  {
    "text": "Any questions about this?",
    "start": "5217360",
    "end": "5230519"
  },
  {
    "text": "(audience member speaking off microphone) Yeah, you can think of it almost like in this, oh, wow, okay, it's not piloting stuff.",
    "start": "5230519",
    "end": "5237120"
  },
  {
    "text": "In this top program, the context of the effect, if we conceptualize, it looks like this.",
    "start": "5239280",
    "end": "5250160"
  },
  {
    "text": "We have a cache tag that's \nmapped to an in memory cache",
    "start": "5250880",
    "end": "5256320"
  },
  {
    "text": "for this part of the program, \nbut in the outer program, here, this part of the \nprogram, we've got a context,",
    "start": "5256320",
    "end": "5266160"
  },
  {
    "text": "that's got the cache tag \nmapped to a file system cache.",
    "start": "5266160",
    "end": "5274080"
  },
  {
    "text": "And the reason why this works \nis because we've overwritten,",
    "start": "5274080",
    "end": "5277360"
  },
  {
    "text": "we basically have said, if \nI could draw an X, I would, but basically we've said the file system cache,",
    "start": "5279200",
    "end": "5290079"
  },
  {
    "text": "replace it with in memory cache here. Does that make sense? So the question was, if I'm \nunderstanding correctly,",
    "start": "5290080",
    "end": "5297760"
  },
  {
    "text": "I'll summarize, basically like this works because you're using the same tag, but a different version of the service,",
    "start": "5297760",
    "end": "5303280"
  },
  {
    "text": "was that kind of like the question or?",
    "start": "5303280",
    "end": "5315280"
  },
  {
    "text": "(audience member speaking off microphone) (audience member speaking off microphone)",
    "start": "5322320",
    "end": "5327840"
  },
  {
    "text": "Yeah, so the question is basically like, how does all of this, how does providing the \nrequirements work under the hood?",
    "start": "5327840",
    "end": "5337200"
  },
  {
    "text": "And really what's happening \nis, in sub program one, you could technically remove the fact",
    "start": "5337200",
    "end": "5343920"
  },
  {
    "text": "that we're providing an in memory cache here now, because the file system is satisfying, the file system implementation we're providing",
    "start": "5343920",
    "end": "5351600"
  },
  {
    "text": "to the entire generator, satisfies the cache requirement for all pieces of our program, right?",
    "start": "5351600",
    "end": "5357360"
  },
  {
    "text": "Sub program one, sub program two, they all get that version. But if we say, in sub program one,",
    "start": "5357360",
    "end": "5363520"
  },
  {
    "text": "we want to use in memory cache here, because maybe we don't want to call the, maybe it's a super hot path,",
    "start": "5364080",
    "end": "5369600"
  },
  {
    "text": "we don't want to access the \nfile system, I don't know. Doing this basically says, \nwe've already got a cache,",
    "start": "5369600",
    "end": "5378239"
  },
  {
    "text": "a cache associated with the \nfile system implementation, take that file system implementation and remove it",
    "start": "5378240",
    "end": "5384320"
  },
  {
    "text": "and put in a in memory cache implementation. Does that make sense? So you basically get like a new map in the context",
    "start": "5384320",
    "end": "5392400"
  },
  {
    "text": "that has like a, an in memory \ncache implementation instead.",
    "start": "5392400",
    "end": "5398560"
  },
  {
    "text": "Yeah.",
    "start": "5398560",
    "end": "5410000"
  },
  {
    "text": "(audience member speaking off microphone) (audience member speaking off microphone) It's a good question. The question is, I'm going to summarize again. When you do this, when you override a service",
    "start": "5417360",
    "end": "5424240"
  },
  {
    "text": "with provide service, does it also override any sub dependencies that that service may be dependent on, right?",
    "start": "5424240",
    "end": "5431840"
  },
  {
    "text": "So if, for example, we have, I don't know, some client that depends \non a fetch implementation,",
    "start": "5431840",
    "end": "5438080"
  },
  {
    "text": "the answer to that question is, with provide service here, you're taking like full control over",
    "start": "5438800",
    "end": "5444640"
  },
  {
    "text": "what implementation you provide. So yes, it will override the",
    "start": "5444640",
    "end": "5451760"
  },
  {
    "text": "implementation of that service, but not any dependencies that are all, anything else that's in the context,",
    "start": "5451760",
    "end": "5457600"
  },
  {
    "text": "it's not going to touch. They're still going to be available. So for example, if you've \nalso got in the context here,",
    "start": "5457600",
    "end": "5464880"
  },
  {
    "text": "if you've also got like a, I don't know, a fetch service and a user repo service",
    "start": "5464880",
    "end": "5470720"
  },
  {
    "text": "and whatever, those will still be there. It's just swapping, it's just \nproviding this one service.",
    "start": "5470720",
    "end": "5476400"
  },
  {
    "text": "It's basically saying, it's just, if I can even simplify this further.",
    "start": "5476400",
    "end": "5489119"
  },
  {
    "text": "Whoop.",
    "start": "5493280",
    "end": "5502320"
  },
  {
    "text": "This is essentially all that's going on. I mean, conceptually, you're taking the key,",
    "start": "5502320",
    "end": "5508960"
  },
  {
    "text": "which is the cache tag and setting it to a new implementation.",
    "start": "5508960",
    "end": "5516080"
  },
  {
    "text": "That track makes sense.",
    "start": "5516080",
    "end": "5518320"
  },
  {
    "text": "I see. It would use the new implementation \nof the cache service.",
    "start": "5529520",
    "end": "5535520"
  },
  {
    "text": "Depending on how the fetch service was built. Yeah.",
    "start": "5538400",
    "end": "5544720"
  },
  {
    "text": "Yeah.",
    "start": "5544720",
    "end": "5546480"
  },
  {
    "text": "Yeah. Yeah, I got what you're saying. What if you want to make \nsure that the dependencies",
    "start": "5564960",
    "end": "5571360"
  },
  {
    "text": "of your program are the ones that you expect in a particular service?",
    "start": "5571360",
    "end": "5577200"
  },
  {
    "text": "Like you don't want things to be overridden. You don't want things to use \ndifferent implementations, et cetera. We're going to talk about \nmore about more robust ways",
    "start": "5577200",
    "end": "5586880"
  },
  {
    "text": "to provide dependencies to your programs when we get into layers in a little bit. Pause on that for a moment.  ",
    "start": "5586880",
    "end": "5592960"
  },
  {
    "text": "No, it's basically the same thing. If you, of, under the hood, is",
    "start": "5614080",
    "end": "5621679"
  },
  {
    "text": "literally an identity function that just has the type in there. So it basically, it's just so you don't have",
    "start": "5621680",
    "end": "5627760"
  },
  {
    "text": "to retype everything, but you could assign that to a variable.",
    "start": "5627760",
    "end": "5633120"
  },
  {
    "text": "It's just that sometimes when you're building your services, especially if they're effectful services, you're going to end up at the end of a generator",
    "start": "5633120",
    "end": "5639600"
  },
  {
    "text": "or a pipeline returning the shape of that service. And if TypeScript for some \nreason can't infer everything,",
    "start": "5639600",
    "end": "5646640"
  },
  {
    "text": "you'd have to do like as x, y, z, or you'd have to bind it to \na variable with that type and then return that.",
    "start": "5646640",
    "end": "5652800"
  },
  {
    "text": "Instead of use cache.of, it's a little bit,",
    "start": "5652800",
    "end": "5658000"
  },
  {
    "text": "it's just more concise. It's like a, it's not a best practice or anything. It's literally just a helper. If you want to use it, that's fine.",
    "start": "5658000",
    "end": "5663920"
  },
  {
    "text": "If you don't, that's also okay. Does that make sense? Cool.",
    "start": "5663920",
    "end": "5669440"
  },
  {
    "text": "Any other questions? Cool.",
    "start": "5669440",
    "end": "5674800"
  },
  {
    "text": "Okay. Let's flip back to here.",
    "start": "5674800",
    "end": "5679760"
  },
  {
    "text": "Okay. We're going to actually skip the providing a service exercise for a moment because it's quite simple.",
    "start": "5687840",
    "end": "5696559"
  },
  {
    "text": "And I want to make sure we \nhave time to get into some of the discussion. Based on some of the questions \nyou folks were having,",
    "start": "5696560",
    "end": "5702320"
  },
  {
    "text": "I want to get into some of \nthe discussion on layers and things like that. I want to make sure we have time. And this exercise is extremely simple.",
    "start": "5702320",
    "end": "5709120"
  },
  {
    "text": "The solution is you can take a look at it. It's very simple. I just wanted to make sure \nyou guys got hands-on practice",
    "start": "5709120",
    "end": "5714800"
  },
  {
    "text": "with it. So we're going to skip over \nthis exercise in the interest of making sure we get to",
    "start": "5714800",
    "end": "5720880"
  },
  {
    "start": "5720000",
    "end": "5806000"
  },
  {
    "text": "talking about like motivating layers. Why do layers exist? How do we use them? Why are they great?",
    "start": "5721920",
    "end": "5727679"
  },
  {
    "text": "Why do we basically never use provide service unless we have a concrete \nimplementation of a service.",
    "start": "5727680",
    "end": "5734560"
  },
  {
    "text": "We want to just pass in for like a regional part of our program.",
    "start": "5734560",
    "end": "5738080"
  },
  {
    "text": "So let's first start with motivating layers by talking about services \nthat depend on other services.",
    "start": "5740240",
    "end": "5748480"
  },
  {
    "text": "Okay.\nSo if we look at the file system cache that we implemented before,",
    "start": "5748480",
    "end": "5754159"
  },
  {
    "text": "this might be like slightly \ndifferent than what we had in our example, but the gist is the same. This is not testable.",
    "start": "5754160",
    "end": "5761760"
  },
  {
    "text": "Right.\nCan anybody spot why?",
    "start": "5761760",
    "end": "5767920"
  },
  {
    "text": "Right. Yeah. The file system is hard \ncoded to the node.js version of the file system. So we we're depending on something that's specific",
    "start": "5767920",
    "end": "5775520"
  },
  {
    "text": "to node.js. So this is not easy to test \nwithout jumping through hoops with mocking or something like that.",
    "start": "5775520",
    "end": "5782480"
  },
  {
    "text": "And this obviously won't work on run times like in the browser, because we don't have nodes \nFS module on the browser.",
    "start": "5782480",
    "end": "5789840"
  },
  {
    "text": "So how do we go about solving this particular type of problem? Well, when we have services \nthat depend on other things",
    "start": "5789840",
    "end": "5798480"
  },
  {
    "text": "that we can abstract into a service, well, this is the fending line by the way,",
    "start": "5798480",
    "end": "5804720"
  },
  {
    "text": "that we want to fix. When we have services with dependencies,",
    "start": "5805440",
    "end": "5811680"
  },
  {
    "start": "5806000",
    "end": "6315000"
  },
  {
    "text": "we can just start building up a dependency graph, which then makes our application more testable.",
    "start": "5811680",
    "end": "5817199"
  },
  {
    "text": "So let's talk about a little \nbit about why this is. When we break programs down \ninto independent services,",
    "start": "5817200",
    "end": "5823840"
  },
  {
    "text": "they can have dependencies on each other. But then if you go to test them or you want to swap out an implementation,",
    "start": "5823840",
    "end": "5829680"
  },
  {
    "text": "all you have to do is swap out the implementation of that one service in your dependency graph.",
    "start": "5829680",
    "end": "5835760"
  },
  {
    "text": "And all other services that depend on it will get that implementation. For example, in this case, we have a user service",
    "start": "5835760",
    "end": "5841760"
  },
  {
    "text": "that depends on both a \ndatabase and a logging service. And then the database also \ndepends on a config service.",
    "start": "5841760",
    "end": "5848400"
  },
  {
    "text": "And so we end up with this directed acyclic graph of services, right?",
    "start": "5848400",
    "end": "5854800"
  },
  {
    "text": "And this kind of flows \nnaturally from any application. Our applications are built in the concept of like,",
    "start": "5854800",
    "end": "5863040"
  },
  {
    "text": "this piece of code depends on this piece of code, depends on this piece of code. We have a graph even in all of our apps.",
    "start": "5863040",
    "end": "5869440"
  },
  {
    "text": "In effect, we think about \nthose pieces of business logic as services. And when we provide those services to our program,",
    "start": "5869440",
    "end": "5876480"
  },
  {
    "text": "the build order has to respect this dependency relationship. So config service would be \nconstructed first in this case,",
    "start": "5876480",
    "end": "5885200"
  },
  {
    "text": "because it's dependent on \nby other services, right? So to build a database service, \nwe need a config service.",
    "start": "5885200",
    "end": "5891920"
  },
  {
    "text": "Then we can build the database service and the logging service. And then we can build user service, right?",
    "start": "5892480",
    "end": "5898320"
  },
  {
    "text": "So you kind of go backwards \nthrough the graph to build it.",
    "start": "5898320",
    "end": "5904880"
  },
  {
    "text": "We also talked about the dependency graph from our exercises, right? This is the same set of services",
    "start": "5904880",
    "end": "5911520"
  },
  {
    "text": "we're working with in our exercises, much simpler dependency graph, but we still have a graph that we're building up.",
    "start": "5911520",
    "end": "5917920"
  },
  {
    "text": "So talking about how to fix \nthe problem from before, well, Jeremy gave the answer,",
    "start": "5918720",
    "end": "5924800"
  },
  {
    "text": "basically abstract the file system into a service, because then it's fully injectable.",
    "start": "5924800",
    "end": "5932640"
  },
  {
    "text": "Your cache, we can have a cache that depends on a file system, but we could also have another cache",
    "start": "5932640",
    "end": "5938480"
  },
  {
    "text": "that doesn't depend on a file system, right? So maybe let's take a look at some code",
    "start": "5938480",
    "end": "5944480"
  },
  {
    "text": "that shows how we can do this, and maybe then it'll make a little more sense. But also like raise your \nhand if you have questions.",
    "start": "5944480",
    "end": "5952000"
  },
  {
    "text": "Yeah. You can't have circular dependencies in effect.",
    "start": "5952000",
    "end": "5962880"
  },
  {
    "text": "If the config service depends on the login, in that case, that would be possible, because logging service has no dependencies.",
    "start": "5962880",
    "end": "5974159"
  },
  {
    "text": "If config service depends on the user service, that's an impossible relationship.",
    "start": "5974160",
    "end": "5979440"
  },
  {
    "text": "Cycles aren't really possible in services, right? I got to check, I got to do \na knowledge check sometimes.",
    "start": "5979440",
    "end": "5988080"
  },
  {
    "text": "What happens, no, you literally, \nit would be impossible.",
    "start": "5988080",
    "end": "5993360"
  },
  {
    "text": "Yeah, you could write,",
    "start": "5993360",
    "end": "5996800"
  },
  {
    "text": "how would you write that program? Could you write that program?",
    "start": "5999440",
    "end": "6007519"
  },
  {
    "text": "(indistinct)\nRight. I think you'd end up with a cyclic dependency in types as well.",
    "start": "6007520",
    "end": "6015280"
  },
  {
    "text": "But it's just, it's, I'm pretty sure we could \nprove that it's impossible,",
    "start": "6016320",
    "end": "6021600"
  },
  {
    "text": "but I don't want to do it on stage. Is that fair?",
    "start": "6021600",
    "end": "6027520"
  },
  {
    "text": "I probably should have done that at a time, but. But yeah, cycles aren't possible.",
    "start": "6028400",
    "end": "6038880"
  },
  {
    "text": "Because if you think about it again, just going back to the simple \nbuilding block, that context,",
    "start": "6040080",
    "end": "6045280"
  },
  {
    "text": "in order for, if user service \ndepends on database service,",
    "start": "6045280",
    "end": "6050960"
  },
  {
    "text": "which depends on config service, if config service depends on user service,",
    "start": "6050960",
    "end": "6056239"
  },
  {
    "text": "the context doesn't have the dependencies to meet those things, as you're building up the dependency graph.",
    "start": "6056240",
    "end": "6063440"
  },
  {
    "text": "And even with the layer data type, which we'll talk about in a few minutes, it would be a relationship \nthat's very difficult to model.",
    "start": "6064240",
    "end": "6073440"
  },
  {
    "text": "Okay, so let's add the file system service",
    "start": "6074720",
    "end": "6080320"
  },
  {
    "text": "into our program. So here we've separated out the requirement of a file system into a totally separate service, right?",
    "start": "6080320",
    "end": "6085679"
  },
  {
    "text": "We've got a file read error that has a message, and then we've got our file system service",
    "start": "6085680",
    "end": "6092400"
  },
  {
    "text": "that we're defining here. It's got a single method where we read a string from a file.",
    "start": "6092400",
    "end": "6098160"
  },
  {
    "text": "Okay, and it could potentially \nfail with the file reader. Obviously it could fail \nwith a lot of other things,",
    "start": "6098160",
    "end": "6103200"
  },
  {
    "text": "but we're simplifying here.",
    "start": "6103200",
    "end": "6106560"
  },
  {
    "text": "But there's still a problem here, and I wanna see if anybody can spot it",
    "start": "6108880",
    "end": "6115280"
  },
  {
    "text": "before I click the next button. Yeah, fantastic.",
    "start": "6115280",
    "end": "6121199"
  },
  {
    "text": "Yes, the file system is still leaked into the interface of our \nservice, our cache service.",
    "start": "6121200",
    "end": "6129520"
  },
  {
    "text": "So can anybody actually explain \nto me why that's a problem? I'll do it if nobody else wants to.",
    "start": "6129520",
    "end": "6135600"
  },
  {
    "text": "Yeah, fantastic, yes.",
    "start": "6136800",
    "end": "6142480"
  },
  {
    "text": "If you wanna create a cache \nthat doesn't use a file system, you still now need to, when",
    "start": "6142480",
    "end": "6148480"
  },
  {
    "text": "you call lookup in your program, now that program requires a file system, even if you don't need one, right?",
    "start": "6148480",
    "end": "6154320"
  },
  {
    "text": "Like imagine in the program from earlier, when we yield our cache, right?",
    "start": "6154320",
    "end": "6160240"
  },
  {
    "text": "Now if we call lookup and we have a file system being leaked into our service dependencies,",
    "start": "6160240",
    "end": "6166320"
  },
  {
    "text": "I'm sorry, our service interface, now that whole program requires a file system, even if that file system's never used.",
    "start": "6166320",
    "end": "6173760"
  },
  {
    "text": "So in the vast majority of circumstances, you're gonna want your services \nto have no requirements",
    "start": "6173760",
    "end": "6183040"
  },
  {
    "text": "in their external implementation. So here, the fix is,",
    "start": "6183040",
    "end": "6188480"
  },
  {
    "text": "we remove the file system \nfrom our service interface and we make our implementation \nagnostic of requirements.",
    "start": "6190480",
    "end": "6200320"
  },
  {
    "text": "In the vast majority of circumstances, this is the correct thing to do. Sometimes you may have services \nwhere you want requirements",
    "start": "6201200",
    "end": "6210400"
  },
  {
    "text": "in the implementation, but in the vast majority of circumstances, this is the correct, the best practice, right?",
    "start": "6210400",
    "end": "6218320"
  },
  {
    "text": "Yes.",
    "start": "6218320",
    "end": "6231969"
  },
  {
    "text": "(audience member speaking off mic) Well, services can, so,",
    "start": "6231970",
    "end": "6237680"
  },
  {
    "text": "this is actually a good question. The question was, is it possible to have a context not tagged without requirements",
    "start": "6238960",
    "end": "6245120"
  },
  {
    "text": "so that the methods don't have requirements? I guess, yes, it would be possible.",
    "start": "6245120",
    "end": "6250800"
  },
  {
    "text": "But remember, yes, it's possible. But services can not only have methods,",
    "start": "6250800",
    "end": "6257360"
  },
  {
    "text": "they can have just static variables, they can have static effects. So look up if it didn't take a,",
    "start": "6257360",
    "end": "6263680"
  },
  {
    "text": "if it wasn't a function, \nit could just be an effect. So services can expose \nanything on their interface.",
    "start": "6263680",
    "end": "6270400"
  },
  {
    "text": "Is it at a type level? Yeah, sure, it's possible, though. If that's something that folks are interested in,",
    "start": "6270400",
    "end": "6275520"
  },
  {
    "text": "definitely open a PR. But it's kind of like I said before,",
    "start": "6275520",
    "end": "6282159"
  },
  {
    "text": "it's the best practice in like 95% of cases, but there are certain cases \nwhere you do want requirements",
    "start": "6282160",
    "end": "6289840"
  },
  {
    "text": "because you're implementing functionality. For example, if you have a method that's scoped,",
    "start": "6289840",
    "end": "6296240"
  },
  {
    "text": "that it has, it's resourceful, it requires accessing a resource and then closing it later, or releasing that resource later,",
    "start": "6296240",
    "end": "6303120"
  },
  {
    "text": "there'll be a scope in your requirements, which we'll also talk about in a second.",
    "start": "6303120",
    "end": "6307920"
  },
  {
    "text": "But good question. Okay.",
    "start": "6308480",
    "end": "6315040"
  },
  {
    "start": "6315000",
    "end": "6760000"
  },
  {
    "text": "So let's talk about how we \ncan provide dependent services and we're gonna start with doing this",
    "start": "6315040",
    "end": "6320480"
  },
  {
    "text": "with the provide service family of methods, and then we're gonna kind of transition into not using that.",
    "start": "6320480",
    "end": "6329040"
  },
  {
    "text": "So we've got our program here before with our service definitions. We've got the same program from before",
    "start": "6329040",
    "end": "6336240"
  },
  {
    "text": "that requires a cache, and we've got our little stop sign that says, this is not runnable yet, because we have to satisfy a cache, right?",
    "start": "6336240",
    "end": "6342560"
  },
  {
    "text": "We need to provide a cache to make this runnable. So the first thing we do is we can use effect",
    "start": "6342560",
    "end": "6350800"
  },
  {
    "text": "to make a cache that relies \non the file system, right?",
    "start": "6350800",
    "end": "6357440"
  },
  {
    "text": "So we're using effect because we want to access the file system service as part of this,",
    "start": "6357440",
    "end": "6363520"
  },
  {
    "text": "as part of creating this service, we wanna get the file system \nso that we can then use it.",
    "start": "6363520",
    "end": "6369760"
  },
  {
    "text": "And then we're actually implementing cache in terms of the file system service.",
    "start": "6369760",
    "end": "6375040"
  },
  {
    "text": "So, oops, I thought I had a highlight. On line 36, we're yielding the file system,",
    "start": "6375040",
    "end": "6381760"
  },
  {
    "text": "and then in the implementation of lookup, we're using the file system and mapping any errors",
    "start": "6381760",
    "end": "6387920"
  },
  {
    "text": "to the expected error domain of the cache. But the key here is,",
    "start": "6387920",
    "end": "6394480"
  },
  {
    "text": "this is kind of like working \nwith closures in JavaScript, right? You can access variables in the closure,",
    "start": "6394480",
    "end": "6400800"
  },
  {
    "text": "and then in the methods you expose from any returned object, you can modify variables in the closure. It's kind of the same thing here.",
    "start": "6400800",
    "end": "6407280"
  },
  {
    "text": "We're yielding the file system in the, quote unquote, closure of the generator,",
    "start": "6407280",
    "end": "6412400"
  },
  {
    "text": "and then we're returning the \nimplementation of the cache from this generator. So now, instead of having a,",
    "start": "6412400",
    "end": "6421040"
  },
  {
    "text": "when we actually look at the type of this effect, we'll see that we have the service implementation in our value.",
    "start": "6422160",
    "end": "6428400"
  },
  {
    "text": "So we actually have the shape of cache now that we've implemented. But we have a requirement \non file system now, right?",
    "start": "6428400",
    "end": "6435040"
  },
  {
    "text": "So this is still not runnable yet, but we've abstracted the \nrequirement of a file system",
    "start": "6435040",
    "end": "6441360"
  },
  {
    "text": "out of the lookup method and into the constructors of services. So we're kind of taking steps towards",
    "start": "6441360",
    "end": "6448800"
  },
  {
    "text": "like building layers and things like that, but right now,",
    "start": "6448800",
    "end": "6454560"
  },
  {
    "text": "we're saying file system is a \nrequirement to build a cache, not to use a cache.",
    "start": "6454560",
    "end": "6461840"
  },
  {
    "text": "Does that make sense? Okay.",
    "start": "6461840",
    "end": "6467280"
  },
  {
    "text": "So we're using provide service effect now. Remember I mentioned this was the other variant",
    "start": "6467280",
    "end": "6473040"
  },
  {
    "text": "of the provide family. And when you use this, if the effect you provide has dependencies,",
    "start": "6473040",
    "end": "6479760"
  },
  {
    "text": "has requirements in it, which we do, we have a file system, those requirements will get \nlifted into the return type",
    "start": "6479760",
    "end": "6487840"
  },
  {
    "text": "of the effect you're creating, right? So even though we provide a cache, okay, fine, we erase the requirement",
    "start": "6487840",
    "end": "6493600"
  },
  {
    "text": "of a cache from our program, right? It used to be void cache miss error cache, but now it's void cache miss error file system,",
    "start": "6493600",
    "end": "6501040"
  },
  {
    "text": "because yes, we've provided a cache, but building that cache requires us to provide a file system.",
    "start": "6501040",
    "end": "6508080"
  },
  {
    "text": "Is this tracking for folks? Yes, okay.",
    "start": "6508080",
    "end": "6516239"
  },
  {
    "text": "To finish off like making this program runnable, we need to provide an \nimplementation of file system.",
    "start": "6516240",
    "end": "6524000"
  },
  {
    "text": "And so we can do that, again, \njust using try promise. In this case, we're using the node file system.",
    "start": "6524000",
    "end": "6529200"
  },
  {
    "text": "But again, remember, the file system in this case is pluggable.",
    "start": "6529200",
    "end": "6535120"
  },
  {
    "text": "We can write whatever implementation we want. When we actually provide the service.",
    "start": "6535120",
    "end": "6540480"
  },
  {
    "text": "In this case, yes, we're using nodes file system, but we could use, I don't know,",
    "start": "6540480",
    "end": "6544880"
  },
  {
    "text": "bun, what's the version in the browser?",
    "start": "6546640",
    "end": "6550640"
  },
  {
    "text": "Yeah, sure. So the point here is file \nsystem has been abstracted",
    "start": "6553520",
    "end": "6561280"
  },
  {
    "text": "into a service, right? It's pluggable, and we're \nnot hard coding a dependency",
    "start": "6561280",
    "end": "6567520"
  },
  {
    "text": "on node.js now. We can plug in bun or plug \nin node or whatever we want",
    "start": "6567520",
    "end": "6572720"
  },
  {
    "text": "to actually make this program, to give the program the file system it needs. And what's great about this is",
    "start": "6572720",
    "end": "6579040"
  },
  {
    "text": "it's all tracked on the type level. So like I like to say, even \nwhen we get into layers, if you just like follow the types,",
    "start": "6579040",
    "end": "6586080"
  },
  {
    "text": "usually you'll end up on the correct path. Because you saw before, yeah, \nwe wanted to make a cache",
    "start": "6586080",
    "end": "6592000"
  },
  {
    "text": "that was dependent on a file system. That's great, we did that. But now the type is telling \nus we need a file system. Okay, fine, so we implement one, right?",
    "start": "6592000",
    "end": "6599360"
  },
  {
    "text": "Sure.",
    "start": "6599360",
    "end": "6603199"
  },
  {
    "text": "(audience member speaking off mic) Yep, typo.",
    "start": "6605480",
    "end": "6612720"
  },
  {
    "text": "Sorry folks. Yes, it does. Yes, it does, okay, I was right, okay.",
    "start": "6612720",
    "end": "6619920"
  },
  {
    "text": "Because the, in the, okay, let's go back. Here, we turn it into a cache miss error.",
    "start": "6619920",
    "end": "6628480"
  },
  {
    "text": "And again, if you follow, this will not compile if you don't do this. If you just try to fs.read file string,",
    "start": "6628480",
    "end": "6635760"
  },
  {
    "text": "the cache interface tells you it needs a cache, it will fail with the cache miss error, it can't fail with the file system error, right?",
    "start": "6635760",
    "end": "6642800"
  },
  {
    "text": "So let the types guide you. If you spec out your service interfaces",
    "start": "6642800",
    "end": "6648000"
  },
  {
    "text": "the way that you want them, \nthen the types will help you. That's not even effect magic, that's just like the type system is gonna help.",
    "start": "6648000",
    "end": "6654400"
  },
  {
    "text": "I mean, it is kind of, I guess, effect magic for the error channel, but. Okay, so we've provided a static implementation",
    "start": "6654400",
    "end": "6662480"
  },
  {
    "text": "of our file system now. Now our program's runnable, \nso we can go ahead and run it. And the key here, again, is we have abstracted",
    "start": "6662480",
    "end": "6674000"
  },
  {
    "text": "the file system into a service itself. But this is kind of like laborious, right?",
    "start": "6674000",
    "end": "6681520"
  },
  {
    "text": "You need to keep track of \neverything that you're doing, the order that things are provided in,",
    "start": "6681520",
    "end": "6686800"
  },
  {
    "text": "and especially what if the number of services you have grows like in exponential form,",
    "start": "6686800",
    "end": "6694480"
  },
  {
    "text": "which if you're building a large application, you could have hundreds of effect services.",
    "start": "6694480",
    "end": "6701280"
  },
  {
    "text": "How are we gonna deal with \ncomposing services in that case? How are we gonna deal with services that we only wanna build one time, right?",
    "start": "6701280",
    "end": "6708320"
  },
  {
    "text": "Like imagine you have a service graph, we'll show an example in a second, where there's one service \nthat should only be built once",
    "start": "6708320",
    "end": "6714160"
  },
  {
    "text": "and shared amongst many different ones. It gets pretty complex to thread that in while you're providing requirements.",
    "start": "6714160",
    "end": "6720960"
  },
  {
    "text": "And what about resource safety? What about services that require building,",
    "start": "6720960",
    "end": "6727760"
  },
  {
    "text": "that require scoped resources, things that you need to acquire \nand then safely release?",
    "start": "6727760",
    "end": "6734400"
  },
  {
    "text": "For example, what if you're \nbuilding a database service, like a Postgres database service,",
    "start": "6734400",
    "end": "6739760"
  },
  {
    "text": "and you need to acquire a connection and then make sure that connection is released",
    "start": "6739760",
    "end": "6744800"
  },
  {
    "text": "as part of the constructor for that service, not in the interface, but when you're actually building that service.",
    "start": "6744800",
    "end": "6750239"
  },
  {
    "text": "What if you need to close the \nconnection to that database when your program exits?",
    "start": "6750240",
    "end": "6755120"
  },
  {
    "text": "It's possible to do with the provide methods, but it's difficult. So this is somewhat legible.",
    "start": "6757680",
    "end": "6765520"
  },
  {
    "start": "6760000",
    "end": "6832000"
  },
  {
    "text": "So this is a very small example of what I was talking about, but building this graph with",
    "start": "6767120",
    "end": "6772720"
  },
  {
    "text": "the provide methods is possible, but it gets really hairy very quickly.",
    "start": "6772720",
    "end": "6777760"
  },
  {
    "text": "We've got two like sub graphs going on here that are related to one another. We've got the document repository",
    "start": "6778560",
    "end": "6784320"
  },
  {
    "text": "that requires logging database and blob storage. Blob storage requires logging.",
    "start": "6784320",
    "end": "6790160"
  },
  {
    "text": "The user repo requires logging and the database. So to set up all these dependencies, and if the database requires, like I said,",
    "start": "6790160",
    "end": "6796720"
  },
  {
    "text": "a scoped connection that you need to close when your program exits, this all gets very complicated",
    "start": "6796720",
    "end": "6803600"
  },
  {
    "text": "just using the provide methods. So the provide methods are best when you need to locally provide something,",
    "start": "6803600",
    "end": "6811840"
  },
  {
    "text": "like a concrete implementation of a service. Usually it's best when you don't need to depend on too many other things,",
    "start": "6811840",
    "end": "6817199"
  },
  {
    "text": "or you need to depend on things that are already provided as part of your program.",
    "start": "6817200",
    "end": "6822720"
  },
  {
    "text": "Yeah, is this tracked for folks so far?",
    "start": "6824480",
    "end": "6830320"
  },
  {
    "text": "Cool, so the solution to all \nof the things I just mentioned is for us to start talking about layers.",
    "start": "6830320",
    "end": "6837680"
  },
  {
    "start": "6832000",
    "end": "7117000"
  },
  {
    "text": "So we already mentioned that service might have more than one dependency.",
    "start": "6837680",
    "end": "6842719"
  },
  {
    "text": "It might have 10, might have 20, 100. A service must have the dependencies that it requires provided in the correct order.",
    "start": "6842720",
    "end": "6852960"
  },
  {
    "text": "We talked before about how cyclic relationships are not possible. Service might be resourceful.",
    "start": "6852960",
    "end": "6858960"
  },
  {
    "text": "It might need to acquire some resources and then make sure it can cleanly release them as part of building that service, right?",
    "start": "6858960",
    "end": "6866320"
  },
  {
    "text": "Because again, we made the distinction before when we were building our file system cache between the constructor for the service",
    "start": "6866960",
    "end": "6873680"
  },
  {
    "text": "and then the actual implementation it provides. We'll get into that a little \nmore of that in a second.",
    "start": "6873680",
    "end": "6880880"
  },
  {
    "text": "So that's why in effect we built layers. So I like to think of layers \nas constructors for services.",
    "start": "6880880",
    "end": "6890400"
  },
  {
    "text": "They're a data type that \nrepresents building a service, right, or one or more services technically,",
    "start": "6890400",
    "end": "6897040"
  },
  {
    "text": "but usually you're only building one. A layer might depend on other layers or services.",
    "start": "6897040",
    "end": "6907440"
  },
  {
    "text": "You might fail to build a service, right, in which case you want to produce some error value",
    "start": "6907440",
    "end": "6912560"
  },
  {
    "text": "as part of building that service. So how do you represent that? We already talked about how \nyou might need to acquire",
    "start": "6912560",
    "end": "6919040"
  },
  {
    "text": "and release resources while you're constructing some service. Think about the database example, but there's plenty of others.",
    "start": "6919040",
    "end": "6925760"
  },
  {
    "text": "Maybe you wanna create a temp directory and then clean it up when your program exits.",
    "start": "6925760",
    "end": "6933425"
  },
  {
    "text": "(clears throat) We wanna make sure that these \nthings are easily composable because we talked about the problem of",
    "start": "6933425",
    "end": "6940240"
  },
  {
    "text": "we need to provide things in the correct order. We need to make sure that things that should only be built \nonce are only built once.",
    "start": "6940240",
    "end": "6949040"
  },
  {
    "text": "And going back to the building once point,",
    "start": "6949040",
    "end": "6955360"
  },
  {
    "text": "we should try to memoize \nbuilding these services as we go, because if we have a service \nthat's expensive to build,",
    "start": "6955360",
    "end": "6963600"
  },
  {
    "text": "like has to call out to multiple APIs to build that service or something, we don't wanna do that multiple times.",
    "start": "6963600",
    "end": "6969280"
  },
  {
    "text": "If there are many other \nservices in our application that depend on that one service, we don't wanna build that \none service a hundred times.",
    "start": "6969280",
    "end": "6975920"
  },
  {
    "text": "We wanna build it once and let all the other hundred services that are using that one just depend on that one built version.",
    "start": "6975920",
    "end": "6984880"
  },
  {
    "text": "So the layer type allows \nus to very nicely describe",
    "start": "6984880",
    "end": "6990800"
  },
  {
    "text": "all of these things and solve all of these different problems.",
    "start": "6990800",
    "end": "6995840"
  },
  {
    "text": "In effect, the layer type \nis a powerful abstraction. It allows for representing \nservice constructors as a value.",
    "start": "6995840",
    "end": "7002720"
  },
  {
    "text": "And similar to the effect type, it has three type parameters.",
    "start": "7002720",
    "end": "7008480"
  },
  {
    "text": "It has the requirements that it produces or requirements out, right? This is the service you're building.",
    "start": "7008480",
    "end": "7015600"
  },
  {
    "text": "Okay, you can think of it that way. So the database, the cache, \nthe file system, whatever, that's the service or services you're building.",
    "start": "7015600",
    "end": "7023199"
  },
  {
    "text": "It has an error channel, which is the possible errors that can happen while you're building that service.",
    "start": "7023200",
    "end": "7028960"
  },
  {
    "text": "You can imagine like building a database, if you try to connect to the database and the network is down,",
    "start": "7028960",
    "end": "7034480"
  },
  {
    "text": "that's an error that could happen while you're building that service, right? And then we have any required dependencies",
    "start": "7034480",
    "end": "7040880"
  },
  {
    "text": "that creating that service requires. So if we think about it from the perspective of our file system cache,",
    "start": "7040880",
    "end": "7046960"
  },
  {
    "text": "we would have a cache and the requirements out. I don't think we would have any errors.",
    "start": "7046960",
    "end": "7053040"
  },
  {
    "text": "And then the requirements \nin would be our file system, right? Because we're producing a cache,",
    "start": "7053040",
    "end": "7058480"
  },
  {
    "text": "but we require a file system. Is that tracking? If not, okay.",
    "start": "7058480",
    "end": "7067360"
  },
  {
    "text": "And if we wanna get like really technical, technically building a layer",
    "start": "7067920",
    "end": "7074640"
  },
  {
    "text": "actually produces a context object with all the services that were in the layers",
    "start": "7074640",
    "end": "7081280"
  },
  {
    "text": "resolved into a single context object. And we'll talk about what \nI mean by this in a second. But the reason why I point this out",
    "start": "7081280",
    "end": "7087280"
  },
  {
    "text": "is because we talked in the beginning about how the requirements of effect,",
    "start": "7087280",
    "end": "7092480"
  },
  {
    "text": "when you run an effect program, all the requirements that that program has that you've provided to it,",
    "start": "7092480",
    "end": "7098480"
  },
  {
    "text": "all of the services that it has are stored in this like context thing. It's context object where the tag is mapped",
    "start": "7098480",
    "end": "7104800"
  },
  {
    "text": "to the implementation of the service. So when you take a layer that describes building all of these services,",
    "start": "7104800",
    "end": "7110960"
  },
  {
    "text": "and you actually build it, you end up with a context.",
    "start": "7110960",
    "end": "7114400"
  },
  {
    "start": "7117000",
    "end": "7512000"
  },
  {
    "text": "There are many different ways of creating layers. And we also have many methods in the layer module.",
    "start": "7117680",
    "end": "7124720"
  },
  {
    "text": "We're gonna focus primarily on a layer.effect, but if you have a layer where",
    "start": "7124720",
    "end": "7130640"
  },
  {
    "text": "you have a static constructor, there's layer.succeed, which just like effect.succeed takes a pure value",
    "start": "7130640",
    "end": "7136800"
  },
  {
    "text": "for the service. And if you'll notice, all of the layer constructors take a tag, because like I said,",
    "start": "7136800",
    "end": "7142480"
  },
  {
    "text": "the result of building a \nlayer is that context object where tags are mapped to service implementations.",
    "start": "7142480",
    "end": "7149040"
  },
  {
    "text": "So we need the tag. Yeah.",
    "start": "7149040",
    "end": "7155199"
  },
  {
    "text": "When you build it.",
    "start": "7155200",
    "end": "7167360"
  },
  {
    "text": "You can have an effect program \ncan only have one context that it uses.",
    "start": "7170320",
    "end": "7177040"
  },
  {
    "text": "But we're gonna show how you \ncan compose layers together so that all of the weirdness before",
    "start": "7177040",
    "end": "7182960"
  },
  {
    "text": "where we had to like provide the layer, then it required a file system, then we had to provide the file system, we can abstract all of that into like layers,",
    "start": "7182960",
    "end": "7190000"
  },
  {
    "text": "which makes it much easier to reason about, I'm building X service,",
    "start": "7190000",
    "end": "7195440"
  },
  {
    "text": "I need X services to build this service. And then when we actually go \nto provide it to our program,",
    "start": "7195440",
    "end": "7200960"
  },
  {
    "text": "it will become clearer. And if it's not, let me know.",
    "start": "7200960",
    "end": "7207440"
  },
  {
    "text": "So like I said, there are a couple of different constructors that are most common with layers.",
    "start": "7208720",
    "end": "7213840"
  },
  {
    "text": "layer.succeed and layer.sync are both for like synchronous type situations,",
    "start": "7213840",
    "end": "7219280"
  },
  {
    "text": "layer.succeed is if you have a pure value, layer.sync is if you have a layer that you're constructing synchronously.",
    "start": "7219280",
    "end": "7225600"
  },
  {
    "text": "Asynchronous layers would use either layer.effect,",
    "start": "7226320",
    "end": "7231840"
  },
  {
    "text": "which allows you to provide a service tag and then an effect with that service shape.",
    "start": "7231840",
    "end": "7240080"
  },
  {
    "text": "And layer.scoped, which is for services that need \nscoped access to resources,",
    "start": "7240080",
    "end": "7249200"
  },
  {
    "text": "we talked about the case where a database needs to open a connection as part of building that service.",
    "start": "7249200",
    "end": "7254880"
  },
  {
    "text": "And then when your program exits, it needs to close that connection cleanly. We're gonna look at a quick example,",
    "start": "7254880",
    "end": "7262320"
  },
  {
    "text": "going back to our cache and file system situation from before, we still have our service \ndefinitions from earlier,",
    "start": "7262320",
    "end": "7269520"
  },
  {
    "text": "right here, we still have the same program from earlier that requires a cache. And we still have \nthe same constructor for cache, right?",
    "start": "7269520",
    "end": "7279920"
  },
  {
    "text": "This is still the same make \nfile system cache effect that accesses a file system \nand implements a cache, right?",
    "start": "7279920",
    "end": "7289280"
  },
  {
    "text": "All of this is the same. But now we're going to use layer.effect",
    "start": "7289280",
    "end": "7294960"
  },
  {
    "text": "to bind the cache tag to \nthis make file system cache",
    "start": "7295600",
    "end": "7301600"
  },
  {
    "text": "constructor. And what we end up with \nis a layer that creates us a cache",
    "start": "7301600",
    "end": "7307040"
  },
  {
    "text": "and requires a file system. So in the layer type, we kind of have all the information we need.",
    "start": "7307040",
    "end": "7313440"
  },
  {
    "text": "And it's kind of like what I said before, if you follow the types as \nyou're working with layers,",
    "start": "7313440",
    "end": "7318960"
  },
  {
    "text": "you're usually on the golden path, usually.",
    "start": "7318960",
    "end": "7325280"
  },
  {
    "text": "With the, so we still need to build a cache.",
    "start": "7325280",
    "end": "7330400"
  },
  {
    "text": "We still need a file system, right? So we can create a layer \nfor the file system as well.",
    "start": "7330400",
    "end": "7336320"
  },
  {
    "text": "And because we had a static implementation for the file system that was dependent on node,",
    "start": "7336320",
    "end": "7341440"
  },
  {
    "text": "we can just create the static implementation here. And now we have a file system layer",
    "start": "7341440",
    "end": "7346480"
  },
  {
    "text": "that produces a file system, doesn't make any errors and \ndoesn't have any requirements.",
    "start": "7346480",
    "end": "7351840"
  },
  {
    "text": "Okay, so we've got two layers now. Layer, the layer module in effect",
    "start": "7351840",
    "end": "7358880"
  },
  {
    "text": "has many different combinators that can be used to compose and manage errors.",
    "start": "7358880",
    "end": "7365440"
  },
  {
    "text": "But the three most common ones are provide, which we're using here, which allows you to take the requirements",
    "start": "7365440",
    "end": "7372320"
  },
  {
    "text": "that are produced by one layer \nand provide them to another.",
    "start": "7372320",
    "end": "7377199"
  },
  {
    "text": "Layer.provide merge, which \nwe'll talk about in a second. It's the same as provide, but you get both layers, services and the output.",
    "start": "7377920",
    "end": "7385920"
  },
  {
    "text": "And then there's layer.merge, which just merges two layers together. So you get the same services, \nerrors and requirements.",
    "start": "7385920",
    "end": "7393760"
  },
  {
    "text": "In this case, we've got the cache layer, which requires a file system, and we're providing the file system layer to it.",
    "start": "7394480",
    "end": "7401920"
  },
  {
    "text": "Oftentimes I find it's actually \na little bit more intuitive to read this in a piped format, where you have cache layer.pipe,",
    "start": "7401920",
    "end": "7408880"
  },
  {
    "text": "layer.provide file system layer, where we're saying, hey, provide the cache layer, this file system layer.",
    "start": "7408880",
    "end": "7414640"
  },
  {
    "text": "And what we end up with now, once we've done this layer composition, once we've provided file \nsystem layer to cache layer,",
    "start": "7414640",
    "end": "7421440"
  },
  {
    "text": "is we end up with a layer that gives us a cache and has no requirements.",
    "start": "7421440",
    "end": "7427760"
  },
  {
    "text": "So all of the work we did \nbefore to provide service and jumping through the hoops \nof piping things together,",
    "start": "7427760",
    "end": "7433200"
  },
  {
    "text": "making sure that things were \ndone in the correct order, we've abstracted into the layers. And now all we have to do is use effect.provide,",
    "start": "7433200",
    "end": "7440080"
  },
  {
    "text": "which allows us to take some program and provide a layer to it.",
    "start": "7441120",
    "end": "7447280"
  },
  {
    "text": "And now our program is runnable, we don't have any requirements. Tracking for everybody?",
    "start": "7447280",
    "end": "7453680"
  },
  {
    "text": "Provide is the method that will allow us to give a layer to an effect.",
    "start": "7453680",
    "end": "7458400"
  },
  {
    "text": "So let's quickly skip past this for a second.",
    "start": "7460240",
    "end": "7466800"
  },
  {
    "text": "We'll come back to it. But I want to talk, because we've talked a little bit about scopes,",
    "start": "7466800",
    "end": "7474000"
  },
  {
    "text": "I want to skip ahead for a second. We will talk about effect.service in a second.",
    "start": "7474000",
    "end": "7484159"
  },
  {
    "text": "But I want to talk quickly about, because I think this will come up, I think in Tim's section, there's going to be some stuff with scoped layers,",
    "start": "7484160",
    "end": "7491040"
  },
  {
    "text": "maybe not. I can't remember. I can't remember. I want to talk about,",
    "start": "7491040",
    "end": "7496640"
  },
  {
    "text": "I know we've been talking a lot and I'm sorry, we will get to an exercise.",
    "start": "7496640",
    "end": "7501440"
  },
  {
    "text": "But I actually, my last exercise of this section is the next one I want to do.",
    "start": "7502080",
    "end": "7507280"
  },
  {
    "text": "So let's keep going. So resourceful layers,",
    "start": "7507280",
    "end": "7513600"
  },
  {
    "start": "7512000",
    "end": "8133000"
  },
  {
    "text": "we talked a lot about scopes and what are, what is a scope like the whole concept of a layer",
    "start": "7513600",
    "end": "7522159"
  },
  {
    "text": "that we are building a service that requires some resources that we need to acquire and then release.",
    "start": "7522160",
    "end": "7528000"
  },
  {
    "text": "It's kind of amorphous. And I think scope is probably one of the most misunderstood \ndata types in effect.",
    "start": "7528000",
    "end": "7535120"
  },
  {
    "text": "And so to tackle that problem, let's take a tiny detour and talk about scopes,",
    "start": "7536320",
    "end": "7543039"
  },
  {
    "text": "because they're actually way simpler than folks make them out to be.",
    "start": "7543040",
    "end": "7548239"
  },
  {
    "text": "A scope at its core is literally just a container for what we call finalizers.",
    "start": "7548240",
    "end": "7555360"
  },
  {
    "text": "It's a data type that has basically, I'll simplify, it has an \narray of finalizers in it.",
    "start": "7556960",
    "end": "7563040"
  },
  {
    "text": "And you may say, okay, well, that's great. The heck is a finalizer?",
    "start": "7563040",
    "end": "7566880"
  },
  {
    "text": "A finalizer is essentially a function that returns some effects that can be used",
    "start": "7568240",
    "end": "7573840"
  },
  {
    "text": "to clean up resources. So when you create a scoped resource in effect,",
    "start": "7573840",
    "end": "7580160"
  },
  {
    "text": "when you do like an acquire release, for example, where you acquire some resource and then you wanna release that resource later,",
    "start": "7580160",
    "end": "7587280"
  },
  {
    "text": "the acquisition effect gets you said resource, but that release piece, that's called a finalizer.",
    "start": "7587280",
    "end": "7594640"
  },
  {
    "text": "That finalizer will get added to a scope. Okay, and then when all of the resources",
    "start": "7594640",
    "end": "7601360"
  },
  {
    "text": "that are within this, this \nis gonna sound really weird, within the scope of that scope,",
    "start": "7601360",
    "end": "7607360"
  },
  {
    "text": "all of the finalizers get registered in order. So you end up with an array of finalizer one,",
    "start": "7607360",
    "end": "7612960"
  },
  {
    "text": "finalizer two, finalizer three. You can imagine that these \nregister finalizer things are all effects that have some cleanup logic",
    "start": "7612960",
    "end": "7620800"
  },
  {
    "text": "that needs to be executed. We register all those finalizers in order,",
    "start": "7620800",
    "end": "7625840"
  },
  {
    "text": "and then when that scope gets closed via scope.close or other, we take those finalizers",
    "start": "7625840",
    "end": "7632239"
  },
  {
    "text": "and we execute them in reverse. So that all the resources can be cleaned up",
    "start": "7632240",
    "end": "7637760"
  },
  {
    "text": "in the reverse order that they were acquired. And the reason why that's important is because",
    "start": "7637760",
    "end": "7643680"
  },
  {
    "text": "imagine you have the database connection is a good example, right? Imagine you connect to a database,",
    "start": "7643680",
    "end": "7650000"
  },
  {
    "text": "which is a resourceful operation, you bind the disconnect to the \nrelease part of that scope,",
    "start": "7650000",
    "end": "7658239"
  },
  {
    "text": "which is register finalizer one. And then we actually create a \nconnection in that database,",
    "start": "7658240",
    "end": "7663920"
  },
  {
    "text": "which we register finalizer two and we close that connection, right?",
    "start": "7663920",
    "end": "7669280"
  },
  {
    "text": "This is like a weird example, but bear with me. We now have two finalizers.",
    "start": "7670160",
    "end": "7676400"
  },
  {
    "text": "First we connect to the database, then we actually create a connection, physical connection, I guess, I don't know.",
    "start": "7676400",
    "end": "7681920"
  },
  {
    "text": "Probably the same thing, but whatever. The point here is if we executed them in order,",
    "start": "7681920",
    "end": "7688320"
  },
  {
    "text": "if we executed the finalizers in order, we'd first close the connection to the database, the actual URL connection,",
    "start": "7688320",
    "end": "7696080"
  },
  {
    "text": "instead of closing the database connection that we created after binding to the database.",
    "start": "7696080",
    "end": "7702000"
  },
  {
    "text": "Instead, if we execute \nfinalizers in reverse order, we can make sure that resources are cleaned up.",
    "start": "7702000",
    "end": "7707840"
  },
  {
    "text": "Any resources that are dependent on each other can be cleaned up appropriately, right?",
    "start": "7707840",
    "end": "7713760"
  },
  {
    "text": "So the point I'm making here is that scope is literally just a container for finalizers,",
    "start": "7713760",
    "end": "7720800"
  },
  {
    "text": "cleanup functions, things that need to be run in order to clean up, acquiring something that needs to be cleaned up.",
    "start": "7720800",
    "end": "7728400"
  },
  {
    "text": "And so if we look at an example of this,",
    "start": "7729920",
    "end": "7736160"
  },
  {
    "text": "when we perform a resourceful operation in effect, it adds a scope to the \nrequirements of our program, right?",
    "start": "7736160",
    "end": "7742880"
  },
  {
    "text": "So in this case, we're using acquire release. We're not really doing anything \nthat acquires a resource,",
    "start": "7742880",
    "end": "7748800"
  },
  {
    "text": "but there's a scope that ends up in the requirements of our program. Scope is a special type.",
    "start": "7748800",
    "end": "7754000"
  },
  {
    "text": "It goes in the requirements because it's very easy to track that way.",
    "start": "7754000",
    "end": "7757760"
  },
  {
    "text": "If we do many of these \nresourceful operations, right?",
    "start": "7760800",
    "end": "7765840"
  },
  {
    "text": "All of the finalizers, the \nsecond thing in here, right? Acquire release, the first \nthing is the acquisition.",
    "start": "7765840",
    "end": "7772720"
  },
  {
    "text": "The second thing is the release. And that release effect is \nalso known as a finalizer.",
    "start": "7772720",
    "end": "7778560"
  },
  {
    "text": "So if we run that method multiple times, all of those finalizers \nwill be added to that scope.",
    "start": "7778560",
    "end": "7784480"
  },
  {
    "text": "That's in the requirements of our effect here. Tracking me so far.",
    "start": "7784480",
    "end": "7793440"
  },
  {
    "text": "When we actually want to run the effect and close the scope,",
    "start": "7793440",
    "end": "7799040"
  },
  {
    "text": "there are many different ways we can do this, but the easiest way, kind of the most semantic way is using effect.scoped, \nwhich will create us a scope,",
    "start": "7799040",
    "end": "7808320"
  },
  {
    "text": "give it to the program to run. Remember, scope is a requirement, right? It's in the requirements channel.",
    "start": "7808320",
    "end": "7813760"
  },
  {
    "text": "So effect.scope will create a scope, provide it to that effect. And then when that effect is",
    "start": "7813760",
    "end": "7818880"
  },
  {
    "text": "done, it will close that scope. So in this case, we use effect.scoped",
    "start": "7818880",
    "end": "7825360"
  },
  {
    "text": "to create a scope, provide it to the program. And when that program exits, close the scope. And you see that if we run that program,",
    "start": "7825360",
    "end": "7832080"
  },
  {
    "text": "we acquire one, two, three, and then release them in reverse order. Because if we look back at our program,",
    "start": "7832080",
    "end": "7838320"
  },
  {
    "text": "acquiring one, two, three, then the program exits, we release three, two, one.",
    "start": "7838320",
    "end": "7845600"
  },
  {
    "text": "It's literally a container for finalizers.",
    "start": "7845600",
    "end": "7850080"
  },
  {
    "text": "We were gonna go through an example of manually building up a scope. But I think that",
    "start": "7853840",
    "end": "7866639"
  },
  {
    "text": "it might be good to talk about this and then work on an exercise. So the last thing I wanna talk about with layers",
    "start": "7866640",
    "end": "7873599"
  },
  {
    "text": "before we start working on some exercises is what actually happens under the hood",
    "start": "7873600",
    "end": "7880079"
  },
  {
    "text": "when you build a layer. Because I think one of the most, like one of the most common put guns",
    "start": "7880080",
    "end": "7886800"
  },
  {
    "text": "or like mistakes folks make with layers is calling effect.provide \nmultiple times in sequence.",
    "start": "7886800",
    "end": "7895840"
  },
  {
    "text": "Effect.provide layer one, effect.provide layer two, \neffect.provide layer three. That's a mistake almost 100% of the time.",
    "start": "7895840",
    "end": "7901360"
  },
  {
    "text": "Because this is what happens when you call effect.provide. When you build a layer,",
    "start": "7901360",
    "end": "7907920"
  },
  {
    "text": "we're gonna talk about what \nhappens when you build a layer. When you build a layer, first you access the current scope",
    "start": "7907920",
    "end": "7916000"
  },
  {
    "text": "and you create something called a memo map, which we don't really need to understand.",
    "start": "7916000",
    "end": "7921440"
  },
  {
    "text": "It's the type and effect \nthat we use under the hood to memoize services as they're created.",
    "start": "7921440",
    "end": "7927600"
  },
  {
    "text": "Then we start traversing the layer graph. So all of the layers that you compose together that we showed before,",
    "start": "7928240",
    "end": "7934080"
  },
  {
    "text": "where we like provided one layer to another and now we end up with a new one, we start traversing that graph.",
    "start": "7934080",
    "end": "7940640"
  },
  {
    "text": "We check the memo map to see if that service is already built. And if it is built, we just keep going.",
    "start": "7940640",
    "end": "7947440"
  },
  {
    "text": "We keep going through the graph because we don't need to rebuild that service. But if it's not found,",
    "start": "7947440",
    "end": "7953280"
  },
  {
    "text": "we construct that service. If it requires a scope, meaning it was constructed with layer.scoped,",
    "start": "7953280",
    "end": "7960480"
  },
  {
    "text": "then we use the scope we \nbuilt at the very beginning or the scope we accessed at the very beginning to create that service,",
    "start": "7960480",
    "end": "7967600"
  },
  {
    "text": "add the service to the map and keep going. So it's one big giant loop, traversing the dependency graph",
    "start": "7967600",
    "end": "7973440"
  },
  {
    "text": "and trying to memoize services as they're built. And once we're done, we end up with a context object",
    "start": "7973440",
    "end": "7980320"
  },
  {
    "text": "that I talked about earlier. When we build a layer, we \nend up with a context object.",
    "start": "7980320",
    "end": "7986160"
  },
  {
    "text": "And the reason why effect.provide multiple times in sequence \nis almost always a mistake",
    "start": "7986960",
    "end": "7993440"
  },
  {
    "text": "is because that scope is shared by all of the layers that \nare in this build, right?",
    "start": "7993440",
    "end": "8001120"
  },
  {
    "text": "Which is generally what you want. You want the scope to be at \nthe point of the layer build. But if you call effect.provide multiple times,",
    "start": "8001120",
    "end": "8008160"
  },
  {
    "text": "you end up creating a scope every time, then providing it to the build.",
    "start": "8008160",
    "end": "8013440"
  },
  {
    "text": "And then when the effect exits closing that scope, so you end up with multiple different scopes in your program",
    "start": "8013440",
    "end": "8018640"
  },
  {
    "text": "and going through this process multiple times, instead of just building the layer once",
    "start": "8018640",
    "end": "8023840"
  },
  {
    "text": "and letting the service resolution happen once.",
    "start": "8023840",
    "end": "8030320"
  },
  {
    "text": "Does that make sense? Yeah.",
    "start": "8030320",
    "end": "8035280"
  },
  {
    "text": "Actually, I think I have an example of doing this manually.",
    "start": "8036400",
    "end": "8039840"
  },
  {
    "text": "It's inefficient and...",
    "start": "8042320",
    "end": "8047440"
  },
  {
    "text": "Yeah. So to Tim's point,",
    "start": "8047440",
    "end": "8052880"
  },
  {
    "text": "when you're building a layer, so what effect.provide does under the hood is kind of similar to effect.scoped.",
    "start": "8052880",
    "end": "8059840"
  },
  {
    "text": "Creates a scope and provides \nit to the layer build. So this is the layer build, \nwhich accesses the scope.",
    "start": "8059840",
    "end": "8066880"
  },
  {
    "text": "And it also creates a memo map. And to Tim's point, we \nmentioned before how layers,",
    "start": "8066880",
    "end": "8073599"
  },
  {
    "text": "once they've built the service that you want, that service is memoized. And then any other stuff in that layer graph",
    "start": "8073600",
    "end": "8080480"
  },
  {
    "text": "that needs that service \njust gets the memoized one. The memo map is how we do that.",
    "start": "8080480",
    "end": "8086960"
  },
  {
    "text": "So if you build, if you effect.provide many, many different times,",
    "start": "8086960",
    "end": "8091840"
  },
  {
    "text": "you're not memoizing your services. So you end up building them many times over.",
    "start": "8092720",
    "end": "8097520"
  },
  {
    "text": "So imagine you have like, a service that, a config \nservice or something like that,",
    "start": "8098560",
    "end": "8105200"
  },
  {
    "text": "or something that's expensive to build. If you effect.provide many layers that depend on that service,",
    "start": "8105200",
    "end": "8111040"
  },
  {
    "text": "you don't end up benefiting from the memoization.",
    "start": "8111040",
    "end": "8118160"
  },
  {
    "text": "Yeah. (indistinct)",
    "start": "8118160",
    "end": "8123440"
  },
  {
    "text": "No, layer.provide is fine. It's effect.provide that does \nthe work of creating a scope,",
    "start": "8123440",
    "end": "8130080"
  },
  {
    "text": "building the whole layer, and then providing the context \nto the underlying program. I actually have like a quick example of doing this manually,",
    "start": "8130080",
    "end": "8137360"
  },
  {
    "start": "8133000",
    "end": "8358000"
  },
  {
    "text": "where we have some layer, right? We have a service, my service,",
    "start": "8137360",
    "end": "8142800"
  },
  {
    "text": "we've got a layer for my service. And then I have an example \nof like doing this manually,",
    "start": "8142800",
    "end": "8148160"
  },
  {
    "text": "where we have a program that uses my service. So if we want to simulate effect.provide,",
    "start": "8148160",
    "end": "8154880"
  },
  {
    "text": "we create a scope using the \nscope module from effect.",
    "start": "8155840",
    "end": "8160960"
  },
  {
    "text": "We use layer.build, which is the method under \nthe hood that builds a layer",
    "start": "8160960",
    "end": "8166400"
  },
  {
    "text": "and requires a scope. So when you build a layer, like I said, you get a context \nout and it requires a scope.",
    "start": "8166400",
    "end": "8177520"
  },
  {
    "text": "We can take the scope and \nextend it to the layer builder, meaning we don't close the scope yet,",
    "start": "8177520",
    "end": "8183199"
  },
  {
    "text": "we extend it to that effect. So now we've actually gotten \nour context out, right?",
    "start": "8183200",
    "end": "8190640"
  },
  {
    "text": "So we have a context with my service in it that we can now provide, because effect.provide takes \na context object as well.",
    "start": "8190640",
    "end": "8199120"
  },
  {
    "text": "You can provide the context to your program, which is now runnable, because you've provided all \nthe dependencies it needs.",
    "start": "8199120",
    "end": "8204639"
  },
  {
    "text": "And then we grab the exit value of the program and close the scope with it.",
    "start": "8204640",
    "end": "8209840"
  },
  {
    "text": "So this is under the hood, what happens with effect.provide. And the part I'm not showing here,",
    "start": "8209840",
    "end": "8215840"
  },
  {
    "text": "because it happens within the build, within here, is the part where we create that memo map,",
    "start": "8215840",
    "end": "8222000"
  },
  {
    "text": "that memoizes your services. So generally speaking in your code,",
    "start": "8222000",
    "end": "8227519"
  },
  {
    "text": "layers should be provided at the very root of your application as much as possible.",
    "start": "8227520",
    "end": "8233599"
  },
  {
    "text": "And you should only be \neffect.providing them like once. You should compose your layers outside",
    "start": "8234320",
    "end": "8240478"
  },
  {
    "text": "and provide them once.",
    "start": "8240479",
    "end": "8245678"
  },
  {
    "text": "Yeah.",
    "start": "8245680",
    "end": "8258240"
  },
  {
    "text": "Yep.",
    "start": "8267840",
    "end": "8275417"
  },
  {
    "text": "(man speaking off mic) Yeah. Yeah. Yes, in certain cases,",
    "start": "8275417",
    "end": "8280240"
  },
  {
    "text": "the order in which you \nprovide layers to one another does matter.",
    "start": "8280800",
    "end": "8285599"
  },
  {
    "text": "I don't, like, without getting too in the weeds, anything that overrides like \na default effect service,",
    "start": "8287440",
    "end": "8294240"
  },
  {
    "text": "like logging or, it's another example,",
    "start": "8294240",
    "end": "8299679"
  },
  {
    "text": "clock, anything like that, anything that overrides a default effect service, the order does matter.",
    "start": "8299680",
    "end": "8305679"
  },
  {
    "text": "Because if you provide your override and then you provide other stuff,",
    "start": "8305680",
    "end": "8311120"
  },
  {
    "text": "this is gonna get hit first in the dependency resolution process, but all of these other ones",
    "start": "8311120",
    "end": "8317040"
  },
  {
    "text": "are gonna access the other clock, the default one. Like, instead of your custom one,",
    "start": "8317040",
    "end": "8322800"
  },
  {
    "text": "instead if you move that provide to the end, then everything above it gets the new clock.",
    "start": "8322800",
    "end": "8328399"
  },
  {
    "text": "But generally speaking, it's more of an issue with default effect service, like trying to override default \neffect services with layers",
    "start": "8328400",
    "end": "8336240"
  },
  {
    "text": "that comes up. Cool.",
    "start": "8336240",
    "end": "8340800"
  },
  {
    "text": "I don't remember what time this session ends, but I really wanted to see if you guys wanted",
    "start": "8341840",
    "end": "8347200"
  },
  {
    "text": "to at least start working on the final exercise.",
    "start": "8347200",
    "end": "8353678"
  },
  {
    "text": "12.15.",
    "start": "8353680",
    "end": "8354960"
  },
  {
    "start": "8358000",
    "end": "8435000"
  },
  {
    "text": "So there's an exercise that I have basically which allows you all to get some practice with merging, providing, \nand provide merging layers.",
    "start": "8358800",
    "end": "8368080"
  },
  {
    "text": "Basically, it goes over like layer composition,",
    "start": "8368080",
    "end": "8373280"
  },
  {
    "text": "where we talk about, we have two layers, if we merge them, we merge all of the pieces of the layers,",
    "start": "8373281",
    "end": "8380240"
  },
  {
    "text": "we merge the requirements out, the errors and the requirements in. So, providing layers takes the output of one layer",
    "start": "8380240",
    "end": "8393520"
  },
  {
    "text": "and provides it as a requirement to another. So in this case, layer two \nproduces requirement, right?",
    "start": "8393520",
    "end": "8404398"
  },
  {
    "text": "Layer one needs requirement. So if you provide layer two to layer one, you erase requirement,",
    "start": "8404399",
    "end": "8409600"
  },
  {
    "text": "and you end up with a layer that produces out one and requires in two. So it's kind of like a,",
    "start": "8409600",
    "end": "8415840"
  },
  {
    "text": "I don't know what the \nequivalent operation would be in more of a theoretical sense,",
    "start": "8415840",
    "end": "8420880"
  },
  {
    "text": "but you end up erasing requirement here. But if you didn't want to erase requirement and wanted to move it into the output,",
    "start": "8420880",
    "end": "8427520"
  },
  {
    "text": "there's provide merge, which does the same thing as provide, but moves the output of that second layer",
    "start": "8427520",
    "end": "8433280"
  },
  {
    "text": "into the output of the resulting layer. So the exercise",
    "start": "8433280",
    "end": "8438160"
  },
  {
    "start": "8435000",
    "end": "9621000"
  },
  {
    "text": "is basically for you all to get some practice with layer composition.",
    "start": "8439760",
    "end": "8445439"
  },
  {
    "text": "There is, essentially in the file, there is a list of layer types",
    "start": "8446720",
    "end": "8454080"
  },
  {
    "text": "and a bunch of example layers. And the goal is for you all to somehow match",
    "start": "8454080",
    "end": "8462160"
  },
  {
    "text": "the type of the layer using the default layers that are in there. So if we look at example,",
    "start": "8462160",
    "end": "8471840"
  },
  {
    "text": "this is Tim's, not mine. Exercises, session one.",
    "start": "8476479",
    "end": "8483359"
  },
  {
    "text": "If we look at layer composition, you have all of these base layers, which are just types that we're declaring.",
    "start": "8483359",
    "end": "8491280"
  },
  {
    "text": "And the goal is to try to achieve the target type using those three composition \noperators we talked about,",
    "start": "8491280",
    "end": "8497840"
  },
  {
    "text": "which are the most common ones in effect. So if we want to take a few minutes, we can do that. And then right before we close this session,",
    "start": "8497840",
    "end": "8505760"
  },
  {
    "text": "we can run our punishment protocol once together and just observe some of the output.",
    "start": "8505760",
    "end": "8515359"
  },
  {
    "text": "I think that this is a good exercise because it gives a little bit of comfort to working with the composition operators.",
    "start": "8515359",
    "end": "8522720"
  },
  {
    "text": "I know we didn't get to a lot of exercises to, well, I know we didn't get to a lot of exercises,",
    "start": "8522720",
    "end": "8529680"
  },
  {
    "text": "but that's okay. I think that you guys have the workshop materials. You also have all our slides, \nalso all the demo code,",
    "start": "8529680",
    "end": "8537920"
  },
  {
    "text": "all of the code in the slides, everything is in the repository. And after today,",
    "start": "8537920",
    "end": "8546398"
  },
  {
    "text": "I will also figure out a \nway to merge in my PUNSTER application into this repository",
    "start": "8546399",
    "end": "8552160"
  },
  {
    "text": "so that you all have access to that API as well, the code that I wrote for that,",
    "start": "8552160",
    "end": "8558080"
  },
  {
    "text": "which is not the best.",
    "start": "8558080",
    "end": "8563920"
  },
  {
    "text": "So maybe it will take like \n10 minutes, work on that. Then we'll run our punishment protocol and we'll see where we're at.",
    "start": "8563920",
    "end": "8569840"
  },
  {
    "text": "All right. I know that you all might not be 100% finished,",
    "start": "8569840",
    "end": "8574160"
  },
  {
    "text": "but let's take a look at some of the solutions. And I want to reiterate once more",
    "start": "8574960",
    "end": "8581280"
  },
  {
    "text": "that there are a lot of different ways to achieve these types. So if your solution looks different from mine,",
    "start": "8581280",
    "end": "8587280"
  },
  {
    "text": "that does not mean it's wrong. But let's take a look at some of these.",
    "start": "8587280",
    "end": "8592800"
  },
  {
    "text": "So in our first exercise, our goal was to create a \nlayer that produces a config",
    "start": "8593439",
    "end": "8600479"
  },
  {
    "text": "and a logging service, results in a config error or a log error and has never no requirements.",
    "start": "8600479",
    "end": "8609438"
  },
  {
    "text": "In this case, we can literally \njust use provide merge to achieve this layer, right?",
    "start": "8609439",
    "end": "8614720"
  },
  {
    "text": "We can, logging produces logging and a log error",
    "start": "8614720",
    "end": "8621439"
  },
  {
    "text": "in the error channel. And we can use provide merge to provide the requirement on config to logging",
    "start": "8621439",
    "end": "8629280"
  },
  {
    "text": "while also merging their outputs. Does provide merge track for folks or not really?",
    "start": "8629280",
    "end": "8637200"
  },
  {
    "text": "Yeah.",
    "start": "8637200",
    "end": "8641760"
  },
  {
    "text": "(indistinct) Yes, merge works on both.",
    "start": "8649359",
    "end": "8654399"
  },
  {
    "text": "Yeah, merge takes two layers and literally just smushes them together. You get this both layers requirements out,",
    "start": "8654399",
    "end": "8662319"
  },
  {
    "text": "both layers errors and both \nlayers requirements in.",
    "start": "8662319",
    "end": "8670560"
  },
  {
    "text": "(indistinct) (indistinct)\nSure.",
    "start": "8678880",
    "end": "8694000"
  },
  {
    "text": "The question was, correct me if I'm wrong, when you would use layers to build your services",
    "start": "8697600",
    "end": "8705359"
  },
  {
    "text": "versus provide service directly? Yeah, I think in the vast \nmajority of circumstances,",
    "start": "8705359",
    "end": "8712640"
  },
  {
    "text": "abstracting services into layers, the construction of a service into a layer, generally speaking is the preferred method",
    "start": "8712640",
    "end": "8719600"
  },
  {
    "text": "because of the composition utilities you get. And it also just allows you \nto be much more principled",
    "start": "8719600",
    "end": "8726319"
  },
  {
    "text": "about where services are actually gonna be put into your program. I think my default and the",
    "start": "8726319",
    "end": "8734880"
  },
  {
    "text": "other folks may disagree with me. I really only use provide service directly.",
    "start": "8734880",
    "end": "8740800"
  },
  {
    "text": "If there's a concrete implementation of a service that I wanna provide. I, my usage of provide service",
    "start": "8741520",
    "end": "8748560"
  },
  {
    "text": "effect is few and far between. Provide service is useful \nto me when I want to like,",
    "start": "8748560",
    "end": "8755120"
  },
  {
    "text": "when I have this a static \nimplementation of something and I wanna locally override \nit in a part of my program",
    "start": "8755120",
    "end": "8761520"
  },
  {
    "text": "because it's not expensive to do, right? It's not like effect.provide where we have to go through \ntraversing the layer graph",
    "start": "8761520",
    "end": "8767120"
  },
  {
    "text": "and this and that and whatever. Provide service just map.set this tag",
    "start": "8767120",
    "end": "8772720"
  },
  {
    "text": "to this implementation, right? It's much more efficient. It's much more, you don't have to deal with the memo map situation.",
    "start": "8772720",
    "end": "8780080"
  },
  {
    "text": "That's kind of like my default. I near 95% of the time default to layers,",
    "start": "8781600",
    "end": "8787040"
  },
  {
    "text": "use layers to construct my services and only a handful of times do",
    "start": "8787920",
    "end": "8793359"
  },
  {
    "text": "I need to use provide service to like locally override something. Sometimes for like really small programs,",
    "start": "8793359",
    "end": "8799920"
  },
  {
    "text": "like you can use provide service to thread dependencies through your program",
    "start": "8799920",
    "end": "8808399"
  },
  {
    "text": "without passing them as function arguments also. So like if you have like a small little script",
    "start": "8809120",
    "end": "8814960"
  },
  {
    "text": "you're hacking on and you \ndon't wanna pass something 12,000 times through like function calls,",
    "start": "8814960",
    "end": "8821679"
  },
  {
    "text": "you can provide service, make a tag for it, provide service and just pass \nit as a dependency instead.",
    "start": "8821680",
    "end": "8828160"
  },
  {
    "text": "So there's like multiple answers to that question but like most of the time I default to layers",
    "start": "8828880",
    "end": "8835600"
  },
  {
    "text": "and I think that's kind of like best practice.",
    "start": "8835600",
    "end": "8839439"
  },
  {
    "text": "Okay, let's take a look at \none or two more solutions and then I think we should punish our children.",
    "start": "8840880",
    "end": "8850399"
  },
  {
    "text": "The second example here was we needed a database. So here the database layer, \nif we look at it, okay,",
    "start": "8851040",
    "end": "8864160"
  },
  {
    "text": "requires a config object. So here we don't need the \nconfig in the output here.",
    "start": "8864160",
    "end": "8870800"
  },
  {
    "text": "So instead of using provide merge, we can just use provide, give \nthe config to the database",
    "start": "8870800",
    "end": "8875920"
  },
  {
    "text": "and we get a database coming out, right? Does this make sense? Any questions about this one?",
    "start": "8875920",
    "end": "8883920"
  },
  {
    "text": "Okay. For the third exercise, we wanna produce a cache",
    "start": "8883920",
    "end": "8891439"
  },
  {
    "text": "and to produce a cache, we need to have a database",
    "start": "8892160",
    "end": "8897359"
  },
  {
    "text": "so we can layer it up, provide the database but then the database requires a config",
    "start": "8897359",
    "end": "8902960"
  },
  {
    "text": "so we can provide the config and we end up with a layer \nthat just produces a cache. But again, if let's say our requirements change",
    "start": "8902960",
    "end": "8910640"
  },
  {
    "text": "and now we want this layered, instead of just producing a cache, we also want the database in the output",
    "start": "8910640",
    "end": "8916880"
  },
  {
    "text": "and we can just switch this to provide merge and now the database is in the output too.",
    "start": "8916880",
    "end": "8920800"
  },
  {
    "text": "So provide and provide merge are almost the exact same thing. It's just about whether or \nnot you want to propagate",
    "start": "8922000",
    "end": "8929279"
  },
  {
    "text": "those requirements into the output or not.",
    "start": "8929280",
    "end": "8935680"
  },
  {
    "text": "Okay. Let's skip past this one \ncause it's kind of the same. Same thing with this one.",
    "start": "8935680",
    "end": "8940800"
  },
  {
    "text": "Is there anywhere where I use merge? Yes. Okay. In exercise number seven, \nwe wanna create a metrics",
    "start": "8940800",
    "end": "8948160"
  },
  {
    "text": "and a notification service and we have a bunch of errors",
    "start": "8948160",
    "end": "8953600"
  },
  {
    "text": "that we might need to handle at some point. So the metrics layer requires logging",
    "start": "8953600",
    "end": "8959920"
  },
  {
    "text": "and the notification layer also requires logging. Yeah.",
    "start": "8959920",
    "end": "8977439"
  },
  {
    "text": "Sure.",
    "start": "8977439",
    "end": "8983840"
  },
  {
    "text": "So you're saying because \nall of these other layers, some of them have requirements on config. Like why does that work?",
    "start": "8983840",
    "end": "9004240"
  },
  {
    "text": "Right.",
    "start": "9009120",
    "end": "9017599"
  },
  {
    "text": "I see. I see.\nI see. Okay.\nSo the question is about what happens in between these pipe calls here and how is it possible",
    "start": "9017600",
    "end": "9024479"
  },
  {
    "text": "that some of these other \nlayers that require like config or database or whatever that \nare higher up in the pipeline",
    "start": "9024479",
    "end": "9030160"
  },
  {
    "text": "are satisfied here and now we \nend up with the correct type. Well, you can inspect what's \ngoing on in the pipeline",
    "start": "9030160",
    "end": "9038319"
  },
  {
    "text": "type wise if you want by \ndoing something like this.",
    "start": "9038319",
    "end": "9042000"
  },
  {
    "text": "Right. And you can see at each step, \nlike what types are erased. Okay. But what's really happening here is we're slowly",
    "start": "9046800",
    "end": "9055280"
  },
  {
    "text": "erasing types. My point before when I was saying, if you follow the types in your layers,",
    "start": "9055280",
    "end": "9061680"
  },
  {
    "text": "you'll almost always be fine. Still stands and especially in this case, right?",
    "start": "9061680",
    "end": "9067439"
  },
  {
    "text": "In the first step here, we \nare using our API layer,",
    "start": "9067439",
    "end": "9072960"
  },
  {
    "text": "right? Which, whoops, requires auth and cache, right?",
    "start": "9072960",
    "end": "9078880"
  },
  {
    "text": "So if we look at the first step in the pipe, we have our API being produced, \nwe need auth and cache.",
    "start": "9078880",
    "end": "9084319"
  },
  {
    "text": "If we look at the next one, \nwe're now providing auth. Great.",
    "start": "9084319",
    "end": "9090318"
  },
  {
    "text": "But now we need a database \nconfig and cache, right? So if you keep going down the pipeline, okay,",
    "start": "9090319",
    "end": "9096080"
  },
  {
    "text": "so we need cache, so we \nprovide cache, that's great. What else do we need? Okay, now we only need database and config.",
    "start": "9096080",
    "end": "9102880"
  },
  {
    "text": "So then we do one more step down, we are providing database to \nget rid of that requirement. Fine, and then we can keep going.",
    "start": "9102880",
    "end": "9108560"
  },
  {
    "text": "And there are many ways to achieve the same type, just to be clear.",
    "start": "9108560",
    "end": "9113840"
  },
  {
    "text": "Like you can do this in a variety of ways with the layer combinators, but that's what makes layers so great.",
    "start": "9113840",
    "end": "9120640"
  },
  {
    "text": "There are two more points I wanna make though before we run our program, because I think they're important.",
    "start": "9120640",
    "end": "9125839"
  },
  {
    "text": "And we didn't really get to talk about them yet. At the very last exercise here,",
    "start": "9125840",
    "end": "9132399"
  },
  {
    "text": "I made this one intentionally \nsomewhat complicated. And I also solved it in a specific way",
    "start": "9132399",
    "end": "9138479"
  },
  {
    "text": "because I wanted to show something off. So not show off, show \nsomething off, be very clear.",
    "start": "9138479",
    "end": "9145920"
  },
  {
    "text": "When you're working with layers, it is a best practice to, I'm gonna say this",
    "start": "9148000",
    "end": "9155920"
  },
  {
    "text": "and then I'll see if they're \nconfused looks on the faces. It is best practice to locally erase dependencies",
    "start": "9155920",
    "end": "9162800"
  },
  {
    "text": "whenever you can. So if you declare a layer for service A in a file,",
    "start": "9162800",
    "end": "9169920"
  },
  {
    "text": "if it's possible, you should locally provide the other layers you need in that file.",
    "start": "9169920",
    "end": "9177040"
  },
  {
    "text": "And why do I say that? Well, this is an example of doing that, right? Here, we've got three layers we're building.",
    "start": "9177040",
    "end": "9184479"
  },
  {
    "text": "Let's say we're in the database file. Our database layer requires a config. Great, we provide the config layer",
    "start": "9184479",
    "end": "9190880"
  },
  {
    "text": "and we end up with a layer that produces database in config.",
    "start": "9190880",
    "end": "9196240"
  },
  {
    "text": "And maybe actually it's better to start with the ones down here. We want a layer that produces",
    "start": "9196240",
    "end": "9202399"
  },
  {
    "text": "API metrics and notifications. That's the final layer that \nour program needs in this case.",
    "start": "9202399",
    "end": "9211985"
  },
  {
    "text": "(clears throat) API layer needs us to give it \na cache and authentication.",
    "start": "9211985",
    "end": "9217680"
  },
  {
    "text": "So in the API file where we define the API layer, we provide all of its dependencies that it needs",
    "start": "9217680",
    "end": "9225760"
  },
  {
    "text": "in the form of this layer here. And now we have, when we export the API layer",
    "start": "9225760",
    "end": "9231439"
  },
  {
    "text": "from the API file, we just have a layer that produces an API and does \nnot have any dependencies.",
    "start": "9231439",
    "end": "9238319"
  },
  {
    "text": "So this local provision of \ndependencies, why is it great? Because at the end in your program,",
    "start": "9238319",
    "end": "9247120"
  },
  {
    "text": "when you wanna make your main layer the thing that you actually \nprovide to your program, the final layer you wanna give to your program,",
    "start": "9247120",
    "end": "9254800"
  },
  {
    "text": "you can just merge all of your layers together and you're done. So locally erasing dependencies is really nice",
    "start": "9254800",
    "end": "9264800"
  },
  {
    "text": "for kind of dealing with the complexity of the examples that are higher up.",
    "start": "9264800",
    "end": "9272240"
  },
  {
    "text": "Where we have to provide \nhere and provide merge there and merge here and whatever. If you just locally erase dependencies as you go,",
    "start": "9272240",
    "end": "9280160"
  },
  {
    "text": "it's generally a much cleaner solution. Does that track for folks?",
    "start": "9280160",
    "end": "9285680"
  },
  {
    "text": "Do you guys understand? Cool. All right, let's run our program once and...",
    "start": "9285680",
    "end": "9302800"
  },
  {
    "text": "What did I do?",
    "start": "9302800",
    "end": "9310319"
  },
  {
    "text": "Oh my God.",
    "start": "9310319",
    "end": "9313040"
  },
  {
    "text": "Okay. All right, so just so we recall, let's quickly take one last \nlook at our misbehaviors",
    "start": "9315520",
    "end": "9323520"
  },
  {
    "text": "because we've got some extremely naughty children.",
    "start": "9323520",
    "end": "9327359"
  },
  {
    "text": "Exercises section one. I know I'm not navigating in VIM like I'm supposed to, don't judge me.",
    "start": "9329840",
    "end": "9336960"
  },
  {
    "text": "Okay, so we've got some misbehaviors here, right? Michael, as we had mentioned before, dist my NeoVIM configuration, \neven though he asked for it.",
    "start": "9338000",
    "end": "9346160"
  },
  {
    "text": "And so very severe punishment. Sebastian spent like way too \nmuch time on the crown module,",
    "start": "9346800",
    "end": "9353200"
  },
  {
    "text": "but it is kind of cool. So not like super severe punishment. And Johannes has a gratuitous use of red arrows.",
    "start": "9353200",
    "end": "9359280"
  },
  {
    "text": "So we need to punish him for that as well. That's an inside joke, but...",
    "start": "9359280",
    "end": "9368560"
  },
  {
    "text": "Anyways, you guys can all \nrun this as well if you want. And you can modify the API key,",
    "start": "9368560",
    "end": "9376160"
  },
  {
    "text": "it'll be good till the end of the day. So feel free to use it as much as you'd like.",
    "start": "9376160",
    "end": "9379840"
  },
  {
    "text": "Yes, this is correct. Let's run this. So I have an exercise command in the package JSON",
    "start": "9383120",
    "end": "9391600"
  },
  {
    "text": "that just inserts the like TSX ENV file helper. So it just sources the environment",
    "start": "9391600",
    "end": "9397280"
  },
  {
    "text": "from an environment file. If you guys want to use that, great. Otherwise you can just run it directly with the required environment variables.",
    "start": "9397280",
    "end": "9404560"
  },
  {
    "text": "Let's take a look at what's going on. So let's see.",
    "start": "9404560",
    "end": "9412160"
  },
  {
    "text": "Michael, we delivered his pun \nduring a homework session, and I'll scroll up while this is running.",
    "start": "9412160",
    "end": "9420720"
  },
  {
    "text": "And we'll go over our report in a second. But let's see. Michael, we delivered a pun to Michael",
    "start": "9420720",
    "end": "9425920"
  },
  {
    "text": "via channel type homework session. Max will spend hours perfecting the NeoVIM configuration for Michael,",
    "start": "9425920",
    "end": "9430960"
  },
  {
    "text": "but he didn't seem to appreciate it at all. It looks like Michael is taking \nconfiguration for granted.",
    "start": "9430960",
    "end": "9438240"
  },
  {
    "text": "That one I don't get. Anyways, we send the pun for evaluation.",
    "start": "9438240",
    "end": "9443439"
  },
  {
    "text": "It's got a grown potential of 75, I disagree. And then we end up with our pun delivery report.",
    "start": "9443439",
    "end": "9452399"
  },
  {
    "text": "Though our executive summary, the pun delivered during the homework session was moderately effective \nwith a score of 63 out of 100",
    "start": "9452399",
    "end": "9459120"
  },
  {
    "text": "due to low receptivity and a coinciding cool down period leading to a lackluster response from the child.",
    "start": "9459120",
    "end": "9464800"
  },
  {
    "text": "Maxwell, intent on sharing his passion from NeoVIM attempted to lighten the mood during an otherwise dull homework session.",
    "start": "9465520",
    "end": "9471520"
  },
  {
    "text": "He leaned in to deliver the pun. The atmosphere was tense with Michael frustrated by his assignments.",
    "start": "9471520",
    "end": "9477199"
  },
  {
    "text": "The punch line, wait, the setup about Maxwell's hard \nwork lingered for a moment when he finally hit the punch line,",
    "start": "9477200",
    "end": "9482560"
  },
  {
    "text": "the response was tepid. Michael hardly registered the play on words, just like all of us.",
    "start": "9482560",
    "end": "9488079"
  },
  {
    "text": "Anyways, the moment was fleeting and although Maxwell Chuckleton hoped for a better reception, it was lost on Michael amidst his concentration",
    "start": "9489200",
    "end": "9494880"
  },
  {
    "text": "on the task at hand. We get a little metric analysis \nof the reaction intensity,",
    "start": "9494880",
    "end": "9500479"
  },
  {
    "text": "the duration, some observations, and some recommendations.",
    "start": "9500479",
    "end": "9507600"
  },
  {
    "text": "And maybe we can see if the puns for Sebastian, Johannes were any better. All right, so Sebastian,",
    "start": "9507600",
    "end": "9513840"
  },
  {
    "text": "we got isolated very nicely in a car. Sebastian was so caught up",
    "start": "9513840",
    "end": "9519280"
  },
  {
    "text": "in the tiny details of the crown module, I thought he might need a break. He really should learn to take \na crown-ventional approach.",
    "start": "9519280",
    "end": "9530080"
  },
  {
    "text": "Wow. All right.",
    "start": "9530080",
    "end": "9536080"
  },
  {
    "text": "Let's see how we did here. We'll skip the narrative just for a second so we can see if Johannes got a good pun.",
    "start": "9536080",
    "end": "9545920"
  },
  {
    "text": "Okay. We got Johannes during a dinner conversation. Johannes Schickling loves to use red arrows",
    "start": "9545920",
    "end": "9553040"
  },
  {
    "text": "when asking for help, it's almost excessive. He really knows how to point \nout the obvious, doesn't he?",
    "start": "9553040",
    "end": "9560160"
  },
  {
    "text": "That one was good. That one was good. All right. Anyways, you guys can play around with this",
    "start": "9560160",
    "end": "9566479"
  },
  {
    "text": "as much as you like. All the code is in the workshop repository. Thank you all very much for your attention.",
    "start": "9566479",
    "end": "9572479"
  },
  {
    "text": "If there are any questions, like I said, you have access to all the \nexercises, all the code, everything like that. I know we didn't get to everything today,",
    "start": "9572479",
    "end": "9578880"
  },
  {
    "text": "but I kind of wasn't planning to. There's a lot of content in here. Hopefully you found this useful.",
    "start": "9578880",
    "end": "9584720"
  },
  {
    "text": "At the end, we're gonna ask for feedback. So please be really honest. We took a ton of feedback into \nconsideration from last year",
    "start": "9584720",
    "end": "9592800"
  },
  {
    "text": "into this year's workshop. So we hope you enjoyed the morning session.",
    "start": "9592800",
    "end": "9597600"
  },
  {
    "text": "And if there are questions as you guys are working on the exercises by yourself, please feel free to ping me directly in Discord,",
    "start": "9598240",
    "end": "9606000"
  },
  {
    "text": "ask any questions you would \nlike in the workshop channel, whatever, and we can chat \nabout the different things",
    "start": "9606000",
    "end": "9612160"
  },
  {
    "text": "that I didn't get to go over. But again, thank you very \nmuch for your attention today. I appreciate it.",
    "start": "9612160",
    "end": "9618479"
  },
  {
    "text": "(audience applauds)",
    "start": "9618479",
    "end": "9619848"
  }
]