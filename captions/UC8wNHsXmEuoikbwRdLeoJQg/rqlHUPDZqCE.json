[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "welcome to 2022 new year time is flying uh for me it's actually close to a year",
    "start": "15440",
    "end": "22640"
  },
  {
    "text": "now that i've uh learned first about found out about effectius",
    "start": "22640",
    "end": "28240"
  },
  {
    "text": "and uh decided for myself to look a lot more closer into it as i was",
    "start": "28240",
    "end": "33840"
  },
  {
    "text": "really uh increasingly interested in functional programming programming in in typescript",
    "start": "33840",
    "end": "40079"
  },
  {
    "text": "so that turned out to be a really great time investment and the community has just",
    "start": "40079",
    "end": "45840"
  },
  {
    "text": "evolved super nicely so it has the technology and i think today we're going to get a",
    "start": "45840",
    "end": "50960"
  },
  {
    "text": "glimpse on what might be on the horizon to make the developer",
    "start": "50960",
    "end": "56320"
  },
  {
    "text": "experience with effect and typescript even better so",
    "start": "56320",
    "end": "61520"
  },
  {
    "text": "as as i've learned over the last half a year michael has been working on some some pretty crazy ideas",
    "start": "61520",
    "end": "68159"
  },
  {
    "text": "for um yeah just that that helped improve the developer experience",
    "start": "68159",
    "end": "73439"
  },
  {
    "text": "um broadly in typescript but specifically also for for effect yes",
    "start": "73439",
    "end": "78720"
  },
  {
    "text": "so i think we're gonna see um a few different of his experiments",
    "start": "78720",
    "end": "83840"
  },
  {
    "text": "today that might become available in one form or another at some point right now",
    "start": "83840",
    "end": "89600"
  },
  {
    "text": "it's like all uh r d um but yeah i'm really really eager to",
    "start": "89600",
    "end": "95920"
  },
  {
    "text": "see a lot of that i haven't seen many of it myself yet so i think this is going to be a",
    "start": "95920",
    "end": "101119"
  },
  {
    "text": "premiere today and i think there will be quite a few things that people will be",
    "start": "101119",
    "end": "106640"
  },
  {
    "text": "surprised by that this might even be possible with typescript or typescript syntax i think",
    "start": "106640",
    "end": "112880"
  },
  {
    "text": "mike will tell us a bit more about that but yeah welcome mike",
    "start": "112880",
    "end": "119360"
  },
  {
    "text": "thanks for the intro first of all i have to say that this is",
    "start": "119360",
    "end": "124399"
  },
  {
    "start": "120000",
    "end": "465000"
  },
  {
    "text": "the very own definition of building in public so it's completely rnd",
    "start": "124399",
    "end": "130239"
  },
  {
    "text": "and as as janus mentioned that there is no i mean",
    "start": "130239",
    "end": "136160"
  },
  {
    "text": "it might still be far off but the the preliminary results were quite exciting",
    "start": "136160",
    "end": "142000"
  },
  {
    "text": "so i wanted to sort of bring up the the argument with the community to get some some feedback some potential",
    "start": "142000",
    "end": "148800"
  },
  {
    "text": "ideas the the whole thing starts from from having",
    "start": "148800",
    "end": "153840"
  },
  {
    "text": "fundamentally used effect both in in a production manner for for quite a",
    "start": "153840",
    "end": "159680"
  },
  {
    "text": "while not only myself but the whole community and by also knowing the scala equivalent",
    "start": "159680",
    "end": "167519"
  },
  {
    "text": "which is zero and sort of bringing the the two languages together",
    "start": "167519",
    "end": "174400"
  },
  {
    "text": "there we realize there is some some mis missing components in in typescript that",
    "start": "174400",
    "end": "181280"
  },
  {
    "text": "we a small amount of effort could really really shine the point is that typescript",
    "start": "181280",
    "end": "187599"
  },
  {
    "text": "because of its compatibility with with javascript at 100 percent",
    "start": "187599",
    "end": "192800"
  },
  {
    "text": "it basically must only be javascript plus types so as a rule they",
    "start": "192800",
    "end": "198879"
  },
  {
    "text": "they don't allow any form of type directed output that is something which is specified at",
    "start": "198879",
    "end": "204879"
  },
  {
    "text": "the type level which involves a piece of code generated because of",
    "start": "204879",
    "end": "210879"
  },
  {
    "text": "that i think this this goal is is prestigious because it definitely allows typescript to cover",
    "start": "210879",
    "end": "218319"
  },
  {
    "text": "many more use cases be widely compatible with different build infrastructure so",
    "start": "218319",
    "end": "224400"
  },
  {
    "text": "definitely it has its positives but for the specific usage where you really care",
    "start": "224400",
    "end": "230720"
  },
  {
    "text": "about the types and the types are almost as important as the actual implementation sometimes even",
    "start": "230720",
    "end": "237760"
  },
  {
    "text": "even more in for example specifying your domain and other things this is a very specific",
    "start": "237760",
    "end": "244400"
  },
  {
    "text": "interpretation of of using typescript for that specific interpretation",
    "start": "244400",
    "end": "250080"
  },
  {
    "text": "being able to extend the compiler adding a few features that i'll try to",
    "start": "250080",
    "end": "255920"
  },
  {
    "text": "showcase today and then probably will discuss about some want to have but that i really have no",
    "start": "255920",
    "end": "262000"
  },
  {
    "text": "idea yet how to how to implement right and just to re-emphasize one point",
    "start": "262000",
    "end": "267600"
  },
  {
    "text": "like this is really i think a new chapter that's becoming more and more common in the typescript ecosystem i",
    "start": "267600",
    "end": "274320"
  },
  {
    "text": "think so far we've uh we as a typescript ecosystem have mostly just used stock",
    "start": "274320",
    "end": "279919"
  },
  {
    "text": "typescript as is but typescript in the typescript compiler has actually the capabilities",
    "start": "279919",
    "end": "285440"
  },
  {
    "text": "to be extended through plugins or compiler plugins and there are more and more tools that leverage that so you can",
    "start": "285440",
    "end": "292400"
  },
  {
    "text": "use that for interesting things like having a re a sql string but through a",
    "start": "292400",
    "end": "298639"
  },
  {
    "text": "typescript compiler plugin actually bring into that string um bring interesting features like",
    "start": "298639",
    "end": "305600"
  },
  {
    "text": "awareness of your database schema etc so the typescript compiler is fundamentally extendable",
    "start": "305600",
    "end": "312000"
  },
  {
    "text": "in very interesting ways that are just not as broadly done in in the ecosystem",
    "start": "312000",
    "end": "317680"
  },
  {
    "text": "and i think based on that michael has been really digging in and",
    "start": "317680",
    "end": "322800"
  },
  {
    "text": "really push the limits of like what is even possible with that uh and yeah i can't wait to to actually",
    "start": "322800",
    "end": "328560"
  },
  {
    "text": "use that so i think today we're gonna see a couple of different uh results of his experiments i think",
    "start": "328560",
    "end": "336400"
  },
  {
    "text": "the and a lot of these are probably inspired by certain features that um mike and others",
    "start": "336400",
    "end": "344639"
  },
  {
    "text": "are used to from other programming languages uh i think mike has an extensive scala background and there's a",
    "start": "344639",
    "end": "350800"
  },
  {
    "text": "lot of things you can do in scala that you can't do in typescript and i think reverse is also true yes the inverse is",
    "start": "350800",
    "end": "357120"
  },
  {
    "text": "also true that that's a great point um so but i think one point in particular that mike's going to show in a second uh",
    "start": "357120",
    "end": "364720"
  },
  {
    "text": "has been um yeah an important point of his attention and um but i also want to underline one",
    "start": "364720",
    "end": "371919"
  },
  {
    "text": "thing that typescript so far is really just like an optional",
    "start": "371919",
    "end": "377520"
  },
  {
    "text": "addition on top of javascript it doesn't change the fun the functionality and behavior of your code",
    "start": "377520",
    "end": "384479"
  },
  {
    "text": "uh and that's been i think crucial to the um to the current success of typescript",
    "start": "384479",
    "end": "390720"
  },
  {
    "text": "that it became so popular because you can just like put it on top of your javascript code base and it's still like",
    "start": "390720",
    "end": "397280"
  },
  {
    "text": "work the same way but i think we're approaching the option",
    "start": "397280",
    "end": "402720"
  },
  {
    "text": "exactly otherwise it wouldn't have uh it wouldn't have come so far but i think now where typescript is so dominant i",
    "start": "402720",
    "end": "410240"
  },
  {
    "text": "think there's a lot of people wondering okay we have these types but we don't leverage them to the full extent",
    "start": "410240",
    "end": "417039"
  },
  {
    "text": "so if there is a type we can't derive behavior from these types we can just",
    "start": "417039",
    "end": "422400"
  },
  {
    "text": "like fingers crossed that the type is there for a guard for example is is a good example for that but we can't",
    "start": "422400",
    "end": "429360"
  },
  {
    "text": "go the other way around and say we have a type now we want some behavior from that type and that's",
    "start": "429360",
    "end": "435520"
  },
  {
    "text": "a very fundamental piece from other languages that have typed support built in whether it's",
    "start": "435520",
    "end": "443360"
  },
  {
    "text": "java rust or scala or swift and this is one of the the pieces that i",
    "start": "443360",
    "end": "450080"
  },
  {
    "text": "think mike's been really exploring here like how can we get more out of these",
    "start": "450080",
    "end": "455199"
  },
  {
    "text": "types and so i'm i'm very curious now what mike's gonna show us next",
    "start": "455199",
    "end": "460720"
  },
  {
    "text": "okay let's let's start so one of the first pain points that that you face in in",
    "start": "460720",
    "end": "468160"
  },
  {
    "start": "465000",
    "end": "848000"
  },
  {
    "text": "typescript compared to other languages is whenever you try to build custom modules and",
    "start": "468160",
    "end": "474479"
  },
  {
    "text": "you might think about it for example for a simple integer module",
    "start": "474479",
    "end": "479520"
  },
  {
    "text": "you really cannot you lose all the ability of using operators",
    "start": "479520",
    "end": "484879"
  },
  {
    "text": "because effectively you cannot extend even pre-existing operators not only you",
    "start": "484879",
    "end": "491360"
  },
  {
    "text": "cannot add custom ones but you cannot even overload the pre-existing ones",
    "start": "491360",
    "end": "497520"
  },
  {
    "text": "and that restricts basically the the set of the javascript syntax of what would",
    "start": "497520",
    "end": "504840"
  },
  {
    "text": "be valid syntax representation in the in the abstract syntax tree",
    "start": "504840",
    "end": "511919"
  },
  {
    "text": "you fundamentally have a piece of the language which is only usable for",
    "start": "511919",
    "end": "517599"
  },
  {
    "text": "two or three types and basically on on on subtypes of of",
    "start": "517599",
    "end": "523518"
  },
  {
    "text": "number and other operators that are comparison and",
    "start": "523519",
    "end": "528560"
  },
  {
    "text": "other stuff that has been i mean you can still get around and build nice",
    "start": "528560",
    "end": "535760"
  },
  {
    "text": "apis but if you think for for example an integer module how how would you do a an operation to sum",
    "start": "535760",
    "end": "542959"
  },
  {
    "text": "up to to integers well the default would be to say add integer one",
    "start": "542959",
    "end": "550160"
  },
  {
    "text": "and integer two that is the most common used",
    "start": "550160",
    "end": "555519"
  },
  {
    "text": "type of api there might be another way which is called the pipeline api where",
    "start": "555519",
    "end": "561519"
  },
  {
    "text": "you define you define it in a slightly different manner so instead of being",
    "start": "561519",
    "end": "570080"
  },
  {
    "text": "a function of two arguments you take one argument",
    "start": "570080",
    "end": "577760"
  },
  {
    "text": "each time",
    "start": "577760",
    "end": "580399"
  },
  {
    "text": "and this can be used in a in a pipeline so you can say in one add",
    "start": "583600",
    "end": "591600"
  },
  {
    "text": "in two odd in",
    "start": "592000",
    "end": "597839"
  },
  {
    "text": "three next what's going on here i think you",
    "start": "597839",
    "end": "603680"
  },
  {
    "text": "forgot the one after add after all yeah precisely thank you very much",
    "start": "603680",
    "end": "609680"
  },
  {
    "text": "and that is a very bad name for art by",
    "start": "609680",
    "end": "615360"
  },
  {
    "text": "five part just to make it more more clearer one was was a very bad one",
    "start": "615680",
    "end": "622560"
  },
  {
    "text": "but you can see that this is very obfuscating from from the",
    "start": "622560",
    "end": "628560"
  },
  {
    "text": "point of view of looking at an operation something like int",
    "start": "628560",
    "end": "634399"
  },
  {
    "text": "one plus two is something way more expressive",
    "start": "634399",
    "end": "641839"
  },
  {
    "text": "now if i if this was typescript first of all",
    "start": "641839",
    "end": "647040"
  },
  {
    "text": "int is not a subtype of number in fact we are here using a new type",
    "start": "647040",
    "end": "652959"
  },
  {
    "text": "which is a totally different type in fact we can even forget",
    "start": "652959",
    "end": "658720"
  },
  {
    "text": "everything in here just to add like the the",
    "start": "658720",
    "end": "664560"
  },
  {
    "text": "example here with integers is slightly contrived because here",
    "start": "664560",
    "end": "669600"
  },
  {
    "text": "the the existing plus operator we have in javascript actually fits the domain nicely of an integer so you can actually",
    "start": "669600",
    "end": "676480"
  },
  {
    "text": "just say one plus two you don't need to end wrapping et cetera",
    "start": "676480",
    "end": "681519"
  },
  {
    "text": "as a return type exactly um so but i think this illustrates",
    "start": "681519",
    "end": "686560"
  },
  {
    "text": "behavior nicely but a more real world example for example could be if you have",
    "start": "686560",
    "end": "692399"
  },
  {
    "text": "a vector type where you would also like you would you have a mathematical defined",
    "start": "692399",
    "end": "698800"
  },
  {
    "text": "system what it means to add to two vectors and there it's really nice if you can",
    "start": "698800",
    "end": "704959"
  },
  {
    "text": "still use an operator a more natural operator let's",
    "start": "704959",
    "end": "710720"
  },
  {
    "text": "do just that add vector",
    "start": "710720",
    "end": "716600"
  },
  {
    "text": "and for those who are not familiar with what a vector is a vector is basically just like a tuple of um of n values",
    "start": "720320",
    "end": "729600"
  },
  {
    "text": "and um when you have an operation on a vector like plus it just",
    "start": "729600",
    "end": "735200"
  },
  {
    "text": "applies to each of the tuple members in a in a given order",
    "start": "735200",
    "end": "741680"
  },
  {
    "text": "very straightforward just a fancy mathematical term which mathematically means a totally",
    "start": "741680",
    "end": "748320"
  },
  {
    "text": "different thing but i let it slip",
    "start": "748320",
    "end": "752959"
  },
  {
    "text": "x dot y y dot y",
    "start": "756720",
    "end": "761200"
  },
  {
    "text": "so that's uh how how do i tell typescript that now this is",
    "start": "762160",
    "end": "767200"
  },
  {
    "text": "an operator and it's the operator plus well without extending the",
    "start": "767200",
    "end": "773279"
  },
  {
    "text": "javascript syntax typescript does a very good job of keeping around",
    "start": "773279",
    "end": "779519"
  },
  {
    "text": "the uh the jstoc annotations on the on default",
    "start": "779519",
    "end": "785200"
  },
  {
    "text": "and they can even be used to specify types in to some extent and some are",
    "start": "785200",
    "end": "790320"
  },
  {
    "text": "preferring uh those types of annotation to define types from from a javascript source",
    "start": "790320",
    "end": "796000"
  },
  {
    "text": "so by all means using that to extend the language is not is not an invention",
    "start": "796000",
    "end": "801040"
  },
  {
    "text": "but the es operator and you say the operator",
    "start": "801040",
    "end": "806079"
  },
  {
    "text": "of this is plus let's maybe make a constructor for",
    "start": "806079",
    "end": "813360"
  },
  {
    "text": "our vector from that starts from two coordinates and just to point out the obvious the at",
    "start": "813360",
    "end": "819680"
  },
  {
    "text": "ets operator here um this is the entire point of what mike",
    "start": "819680",
    "end": "825360"
  },
  {
    "text": "is working on that is a feature that's not built into typescript but that's part of the typescript extension that",
    "start": "825360",
    "end": "832399"
  },
  {
    "text": "mike is experimenting with uh and so this won't work in your ide um but it might actually work on",
    "start": "832399",
    "end": "839230"
  },
  {
    "text": "[Music] on an editor um instance on i guess on git pod if the",
    "start": "839230",
    "end": "846240"
  },
  {
    "text": "experiments are public yeah all the experiments are public they are in two different repositories because i first",
    "start": "846240",
    "end": "852399"
  },
  {
    "start": "848000",
    "end": "897000"
  },
  {
    "text": "made some pocs and then i'm trying now to implement it properly with my head on on my shoulders",
    "start": "852399",
    "end": "859760"
  },
  {
    "text": "because you know eoc experimentation is for for fun but they're both public so i'll post",
    "start": "859760",
    "end": "866480"
  },
  {
    "text": "down the links after there's nothing extended in the editor at all i just select",
    "start": "866480",
    "end": "873360"
  },
  {
    "text": "to to work on the locally built instance of the of the typescript compiler so i'm",
    "start": "873360",
    "end": "878959"
  },
  {
    "text": "basically extending the language service and i'm extending the checker i haven't",
    "start": "878959",
    "end": "884240"
  },
  {
    "text": "done yet the extension for the emitter phase but i've already done so for for the compiler plug-in that we",
    "start": "884240",
    "end": "891440"
  },
  {
    "text": "had before so i'm perfectly aware i i guess that that's one of the amazing",
    "start": "891440",
    "end": "896560"
  },
  {
    "text": "things of like where there is a lot of machinery already ready to ready to use here with typescript where we have like",
    "start": "896560",
    "end": "903839"
  },
  {
    "start": "897000",
    "end": "1074000"
  },
  {
    "text": "nice points that we can hook into and we don't need to we don't need to do something crazy that vs code works or",
    "start": "903839",
    "end": "910800"
  },
  {
    "text": "your other editor works but this is already covered by by typescript and",
    "start": "910800",
    "end": "916320"
  },
  {
    "text": "what this allows us um i guess just very few people have tried so far",
    "start": "916320",
    "end": "921760"
  },
  {
    "text": "um and so the i think this is maybe a premiere",
    "start": "921760",
    "end": "927120"
  },
  {
    "text": "i've never seen uh operators working on the on the typescript compiler but",
    "start": "927120",
    "end": "932880"
  },
  {
    "text": "anyway that's we've built a function plain function we've",
    "start": "932880",
    "end": "938839"
  },
  {
    "text": "specified the extension code and now when you sum up two vectors",
    "start": "938839",
    "end": "945120"
  },
  {
    "text": "you get back a vector result you can",
    "start": "945120",
    "end": "950240"
  },
  {
    "text": "have multiplication now multiplication is a bit weird in vectors i would have to go through",
    "start": "950240",
    "end": "957040"
  },
  {
    "text": "something something different but the the idea is we can implement just for",
    "start": "957040",
    "end": "963199"
  },
  {
    "text": "fun uh subtraction like",
    "start": "963199",
    "end": "970079"
  },
  {
    "text": "some vector",
    "start": "970240",
    "end": "973560"
  },
  {
    "text": "yeah okay it's the same with a minus",
    "start": "982160",
    "end": "985920"
  },
  {
    "text": "steel",
    "start": "989120",
    "end": "992120"
  },
  {
    "text": "can we actually run it no because i haven't done the emitter extension yet okay okay got it so i",
    "start": "996800",
    "end": "1003199"
  },
  {
    "text": "guess that's like coming and i think the up coming out i can compile it and i can show the tsd",
    "start": "1003199",
    "end": "1010079"
  },
  {
    "text": "output the tsd is fine the ts one is it's still broken but i simply didn't extend the emitter yet",
    "start": "1010079",
    "end": "1019839"
  },
  {
    "text": "but that's a good point let's compile it node",
    "start": "1020480",
    "end": "1027520"
  },
  {
    "text": "field local tsc.js minus p",
    "start": "1027520",
    "end": "1033038"
  },
  {
    "text": "extensions psconfig.js",
    "start": "1033039",
    "end": "1037319"
  },
  {
    "text": "built here was our int and we can see that our exported in top",
    "start": "1040640",
    "end": "1047280"
  },
  {
    "text": "has the proper type in nice you can also see that those are effectively propagated",
    "start": "1047280",
    "end": "1053440"
  },
  {
    "text": "in the final thing so if this is consumed the the one of the key",
    "start": "1053440",
    "end": "1060320"
  },
  {
    "text": "drivers of of this extension is the output should be consumable from playing typescript and it should consume playing",
    "start": "1060320",
    "end": "1067520"
  },
  {
    "text": "typescript files right you're not forcing it into into anything nice",
    "start": "1067520",
    "end": "1074480"
  },
  {
    "start": "1074000",
    "end": "1150000"
  },
  {
    "text": "so that means like if i would want to write my own library for example with",
    "start": "1074480",
    "end": "1080720"
  },
  {
    "text": "with this nicer syntax i could do that but it would compile to something that anyone",
    "start": "1080720",
    "end": "1086720"
  },
  {
    "text": "can just consume um regardless whether they're using uh the the",
    "start": "1086720",
    "end": "1091760"
  },
  {
    "text": "the compiler extension or not of course they wouldn't have access to",
    "start": "1091760",
    "end": "1096799"
  },
  {
    "text": "the featuring but absolutely yes but this is just syntactic sugar that that's the entire point but that's great",
    "start": "1096799",
    "end": "1103600"
  },
  {
    "text": "so i guess we didn't get it here because this was we didn't export the the vector",
    "start": "1103600",
    "end": "1108720"
  },
  {
    "text": "type etc let's do that",
    "start": "1108720",
    "end": "1113360"
  },
  {
    "text": "now this leads to the first point of discussion where we are we aren't even sure",
    "start": "1120480",
    "end": "1127120"
  },
  {
    "text": "and that is how does module discovery work because now i'm defining everything in the same",
    "start": "1127120",
    "end": "1133280"
  },
  {
    "text": "file in in a real life example i would have everything over over multiple files",
    "start": "1133280",
    "end": "1140960"
  },
  {
    "text": "and if i have an addition between two vectors i have to know where to import this from",
    "start": "1140960",
    "end": "1149280"
  },
  {
    "text": "so okay so for for those people who are not familiar with the term uh module",
    "start": "1149280",
    "end": "1154720"
  },
  {
    "start": "1150000",
    "end": "1418000"
  },
  {
    "text": "discovery i think um if we think broadly in what are the the options that we have",
    "start": "1154720",
    "end": "1161200"
  },
  {
    "text": "available in today's javascript ecosystem or typescript ecosystem is that usually we have somewhere a",
    "start": "1161200",
    "end": "1168960"
  },
  {
    "text": "piece of code that we either it's locally and we can just reference it for example if it's a",
    "start": "1168960",
    "end": "1174559"
  },
  {
    "text": "function we can just reference it by the function name and and use it but it needs to be defined locally",
    "start": "1174559",
    "end": "1181280"
  },
  {
    "text": "or if it's defined somewhere else let's say in another file then we can use in",
    "start": "1181280",
    "end": "1186480"
  },
  {
    "text": "the past we used to require syntax now we can use the import syntax to pull in that definition",
    "start": "1186480",
    "end": "1193520"
  },
  {
    "text": "and we can even have a file that's that we haven't written that we pull in",
    "start": "1193520",
    "end": "1198640"
  },
  {
    "text": "through a node module for example installed by npm and so that that is typically the",
    "start": "1198640",
    "end": "1205039"
  },
  {
    "text": "mechanism that we import something uh when we want to use some functionality",
    "start": "1205039",
    "end": "1210799"
  },
  {
    "text": "so um that works but if we need to deal with like a lot like let's say let's say",
    "start": "1210799",
    "end": "1218400"
  },
  {
    "text": "thousands of these potential operations which is common in a more functional approach",
    "start": "1218400",
    "end": "1224720"
  },
  {
    "text": "where we just compose many many functions there it will be painful really quickly",
    "start": "1224720",
    "end": "1231280"
  },
  {
    "text": "if you as you write your code that you need to import literally thousands of little functions",
    "start": "1231280",
    "end": "1237360"
  },
  {
    "text": "um because that kind of disrupts your your programming flow if you want to write a",
    "start": "1237360",
    "end": "1242480"
  },
  {
    "text": "func if you want to write your code and you you need to like import something that's not there maybe you need to go to the top of your",
    "start": "1242480",
    "end": "1248880"
  },
  {
    "text": "file write the import statement etc so yes there's auto import etc but it's",
    "start": "1248880",
    "end": "1255440"
  },
  {
    "text": "still not ideal so i think what has been seen as a common pattern in the effect",
    "start": "1255440",
    "end": "1262400"
  },
  {
    "text": "ecosystem is that we have like certain modules um that are semantically grouped",
    "start": "1262400",
    "end": "1268559"
  },
  {
    "text": "let's say the effect module or the layer module and we just import that entire",
    "start": "1268559",
    "end": "1273919"
  },
  {
    "text": "layer module the effect module and then for example abbreviate it with",
    "start": "1273919",
    "end": "1279280"
  },
  {
    "text": "t for effect or alpha layer and then we say t dot and then we have",
    "start": "1279280",
    "end": "1284320"
  },
  {
    "text": "everything for the effect or l dot everything for the layer but that still requires us to import the l",
    "start": "1284320",
    "end": "1291200"
  },
  {
    "text": "the the layer module and do that slightly better than importing everything manually but still a bunch of",
    "start": "1291200",
    "end": "1297760"
  },
  {
    "text": "work and i think what mike's been really exploring for a long time",
    "start": "1297760",
    "end": "1303360"
  },
  {
    "text": "is how can we have a better developer experience around discovering which sort of operations we",
    "start": "1303360",
    "end": "1309520"
  },
  {
    "text": "have at a given time so what i mean with at a given time let's say we're dealing",
    "start": "1309520",
    "end": "1314960"
  },
  {
    "text": "with a vector here we know that with a vector there are certain kinds of operations that you can",
    "start": "1314960",
    "end": "1322480"
  },
  {
    "text": "apply on a vector and other operations probably most other operations don't make sense on a vector",
    "start": "1322480",
    "end": "1328960"
  },
  {
    "text": "so ideally as you write your code you have an easy time",
    "start": "1328960",
    "end": "1334400"
  },
  {
    "text": "discovering and using the operations you can do with a certain piece",
    "start": "1334400",
    "end": "1340159"
  },
  {
    "text": "of data for example and that is exactly what mike's been experimenting about",
    "start": "1340159",
    "end": "1346400"
  },
  {
    "text": "what are more ergonomic ways how we can accomplish that i hope this was a was a",
    "start": "1346400",
    "end": "1352159"
  },
  {
    "text": "fair description of motivation absolutely yes",
    "start": "1352159",
    "end": "1357760"
  },
  {
    "text": "and in fact for discovering what's available on a",
    "start": "1357760",
    "end": "1363280"
  },
  {
    "text": "specific module one one way that it's achieved on on other",
    "start": "1363280",
    "end": "1371039"
  },
  {
    "text": "languages is by using the types as a discovery mechanisms",
    "start": "1371039",
    "end": "1376480"
  },
  {
    "text": "so rather than relying on on all of the imports you just import for example the",
    "start": "1376480",
    "end": "1382080"
  },
  {
    "text": "effect and if you do effect dot you have all the functions that",
    "start": "1382080",
    "end": "1387200"
  },
  {
    "text": "construct an effect once you have an effect you can do dot on that and you have all",
    "start": "1387200",
    "end": "1394480"
  },
  {
    "text": "the functions to transform that effect into something else which for example the map function the chain function and",
    "start": "1394480",
    "end": "1401120"
  },
  {
    "text": "everything else as you would be familiar with for example the plane",
    "start": "1401120",
    "end": "1407760"
  },
  {
    "text": "plane array the map function it's inside you don't need to know where to find",
    "start": "1411760",
    "end": "1417039"
  },
  {
    "text": "right i guess basically the goal is we have some pretty nice ergonomics here already",
    "start": "1417039",
    "end": "1423360"
  },
  {
    "text": "with what whatever uh whatever the javascript i think ts uh",
    "start": "1423360",
    "end": "1429360"
  },
  {
    "text": "tc 39 has come up with which sort of functions are built in um for that we have a great developer",
    "start": "1429360",
    "end": "1436000"
  },
  {
    "text": "experience but usually we don't get that convenient",
    "start": "1436000",
    "end": "1441120"
  },
  {
    "text": "binding of functions to a specific data type we don't get that for anything",
    "start": "1441120",
    "end": "1447840"
  },
  {
    "text": "non-standard and what mike's been exploring how do we get that",
    "start": "1447840",
    "end": "1452880"
  },
  {
    "text": "for our own data types with the same ergonomics so here you can see a",
    "start": "1452880",
    "end": "1459120"
  },
  {
    "text": "function that was defined plainly as before the same that we used for the operator",
    "start": "1459120",
    "end": "1464400"
  },
  {
    "text": "we can add another small annotation with the name of the function that will",
    "start": "1464400",
    "end": "1470720"
  },
  {
    "text": "be exported from within the type so where you see the odd function you",
    "start": "1470720",
    "end": "1476159"
  },
  {
    "text": "can say odd vector five five",
    "start": "1476159",
    "end": "1481600"
  },
  {
    "text": "dot odd vector six six",
    "start": "1481600",
    "end": "1486880"
  },
  {
    "text": "so the three letters add they come now from what you've annotated with ets extension",
    "start": "1486880",
    "end": "1494400"
  },
  {
    "text": "if you do add two it won't compile got it that makes sense it will complain that this doesn't",
    "start": "1495279",
    "end": "1502960"
  },
  {
    "text": "doesn't exist and the one of the important aspect is also",
    "start": "1502960",
    "end": "1509120"
  },
  {
    "text": "let's suppose for example i have a function take",
    "start": "1509120",
    "end": "1514240"
  },
  {
    "text": "blah which takes an x that extends something that let's say that that has",
    "start": "1514240",
    "end": "1521120"
  },
  {
    "text": "another property whatever whatever that means",
    "start": "1521120",
    "end": "1526000"
  },
  {
    "text": "let's make these a plain identity",
    "start": "1527600",
    "end": "1531440"
  },
  {
    "text": "they plus should not work with a vector",
    "start": "1536400",
    "end": "1541080"
  },
  {
    "text": "a vector does not have the odd property in it doesn't crack like a duck",
    "start": "1542159",
    "end": "1548799"
  },
  {
    "text": "it doesn't fly like a duck which is a very important thing to do if",
    "start": "1548799",
    "end": "1554799"
  },
  {
    "text": "this property actually does not exist in the type because otherwise you might in here like say",
    "start": "1554799",
    "end": "1561279"
  },
  {
    "text": "this is uh is accessible but this typewise",
    "start": "1561279",
    "end": "1566480"
  },
  {
    "text": "this is not this is not anything that",
    "start": "1566480",
    "end": "1571720"
  },
  {
    "text": "it would it's dynamic at this point so this is possible by only being inside",
    "start": "1571760",
    "end": "1579440"
  },
  {
    "text": "the typescript compiler clearly but it makes usage of those features very very safe too right yeah that's um",
    "start": "1579440",
    "end": "1588159"
  },
  {
    "start": "1587000",
    "end": "1702000"
  },
  {
    "text": "yeah i think it all comes back to the point of like that your types have more impact on your program",
    "start": "1588159",
    "end": "1595840"
  },
  {
    "text": "uh which is amazing and there is actually a good comment in the in the chat which is the old way was to",
    "start": "1595840",
    "end": "1603120"
  },
  {
    "text": "monkey your way around it but it's ugly and it's changing your environment",
    "start": "1603120",
    "end": "1610320"
  },
  {
    "text": "and not only that it's even preventing tree shaking and optimization i i think you you actually came up with like a",
    "start": "1610320",
    "end": "1617600"
  },
  {
    "text": "uh a funny um a a funny syntax for a similar thing uh in the past which was i",
    "start": "1617600",
    "end": "1624559"
  },
  {
    "text": "think abusing the the array uh index notation uh which has the problems that",
    "start": "1624559",
    "end": "1630480"
  },
  {
    "text": "giovanni uh motivated that it pollutes your your namespace",
    "start": "1630480",
    "end": "1635600"
  },
  {
    "text": "and um prevents tree shaking but i thought it was a very creative",
    "start": "1635600",
    "end": "1640799"
  },
  {
    "text": "workaround regardless um maybe you can quickly demonstrate how you've tried to solve a similar problem",
    "start": "1640799",
    "end": "1648080"
  },
  {
    "text": "in the past yeah uh well i've tried to solve this for like two and a",
    "start": "1648080",
    "end": "1654799"
  },
  {
    "text": "half years so there's been quite a few iterations of the of the thing but",
    "start": "1654799",
    "end": "1661279"
  },
  {
    "text": "the idea would be that in in the same file you",
    "start": "1661279",
    "end": "1667360"
  },
  {
    "text": "you have these ins let's say",
    "start": "1667360",
    "end": "1672000"
  },
  {
    "text": "uh two",
    "start": "1672880",
    "end": "1679120"
  },
  {
    "text": "this needs to be this element of the function",
    "start": "1679120",
    "end": "1684480"
  },
  {
    "text": "and here you need actually to have this as a",
    "start": "1684480",
    "end": "1690080"
  },
  {
    "text": "class because you need a prototype to attach the methods right so it was using",
    "start": "1690080",
    "end": "1695760"
  },
  {
    "text": "prototypes etc whole tricks and assumptions etcetera yeah precisely",
    "start": "1695760",
    "end": "1701919"
  },
  {
    "text": "so i think you're you're really trying in the in the past you've been really trying to like what are the the",
    "start": "1701919",
    "end": "1708000"
  },
  {
    "start": "1702000",
    "end": "1797000"
  },
  {
    "text": "combinations if you combine things in a certain way then a magic trick happens",
    "start": "1708000",
    "end": "1713760"
  },
  {
    "text": "but i think over time you've seen okay it's there's a lot of assumptions that",
    "start": "1713760",
    "end": "1719120"
  },
  {
    "text": "you could just combine things in a certain way so ideally things are more flexible and the user can do what they",
    "start": "1719120",
    "end": "1724559"
  },
  {
    "text": "want so and i think here's it's a it seems like a fine middle ground that you",
    "start": "1724559",
    "end": "1729760"
  },
  {
    "text": "need to have a few js dock things um next to your definition and",
    "start": "1729760",
    "end": "1735600"
  },
  {
    "text": "that's kind of paying the cost once when you build your quote-unquote library code which maybe you didn't even",
    "start": "1735600",
    "end": "1742799"
  },
  {
    "text": "have to write and you can just use something and with the benefit that your actual",
    "start": "1742799",
    "end": "1748320"
  },
  {
    "text": "application code becomes much more semantically clear and clean so",
    "start": "1748320",
    "end": "1754720"
  },
  {
    "text": "that's a that's a good trade have standard names i'm starting in this way but",
    "start": "1754720",
    "end": "1761120"
  },
  {
    "text": "in theory you could use the function name as admin right yeah so have good defaults",
    "start": "1761200",
    "end": "1768460"
  },
  {
    "text": "[Music] plus i mean there is a degree of of reduction",
    "start": "1768460",
    "end": "1774480"
  },
  {
    "text": "that you can do but my first goal is to get these actually working no just looks",
    "start": "1774480",
    "end": "1779520"
  },
  {
    "text": "amazing editor in integration that's one of the of the goal which was",
    "start": "1779520",
    "end": "1784880"
  },
  {
    "text": "another point of compiler plugins they only act in the emit stage so you're",
    "start": "1784880",
    "end": "1790320"
  },
  {
    "text": "done you don't have the the possibility of taking care of editor integration here we have the full power",
    "start": "1790320",
    "end": "1797039"
  },
  {
    "text": "so and and just to be just to be clear um this would also work the dot add",
    "start": "1797039",
    "end": "1803279"
  },
  {
    "text": "like inline 61 this would also work in a different file",
    "start": "1803279",
    "end": "1808399"
  },
  {
    "text": "um and that would sort of become an alternative to using the import keyword uh and at",
    "start": "1808399",
    "end": "1816399"
  },
  {
    "text": "the the beginning of your file now yeah because you you basically only have to import",
    "start": "1816399",
    "end": "1821520"
  },
  {
    "text": "something i mean this vector could you could import two vectors defined in",
    "start": "1821520",
    "end": "1826880"
  },
  {
    "text": "any in any other file you have right and just do a dot add b",
    "start": "1826880",
    "end": "1832559"
  },
  {
    "text": "but in the same way i don't yet have have it working but the the other idea is to define",
    "start": "1832559",
    "end": "1838720"
  },
  {
    "text": "export interface vector ops",
    "start": "1838720",
    "end": "1844000"
  },
  {
    "text": "right and export const vector",
    "start": "1844000",
    "end": "1849039"
  },
  {
    "text": "which is a vector ops",
    "start": "1849039",
    "end": "1854000"
  },
  {
    "text": "right yeah i think there's like we you probably you've probably thought about this quite quite a lot already",
    "start": "1856399",
    "end": "1862080"
  },
  {
    "text": "that you um that you you want to prevent sort of like bad magic where it accidentally overloads things",
    "start": "1862080",
    "end": "1869760"
  },
  {
    "text": "override things etc and pollutes um pollutes your your namespaces in a way",
    "start": "1869760",
    "end": "1876960"
  },
  {
    "text": "that you don't want and at the same time that the user doesn't need to do too much configuration etc i think there's",
    "start": "1876960",
    "end": "1883120"
  },
  {
    "text": "like a sweet little spot there that he didn't want to find um now it's simple i'm trying to do",
    "start": "1883120",
    "end": "1889840"
  },
  {
    "text": "something that i've absolutely never done so i had it in mind",
    "start": "1889840",
    "end": "1896720"
  },
  {
    "text": "but let's see if it actually works",
    "start": "1896720",
    "end": "1902600"
  },
  {
    "text": "this is a temporary syntax so we're witnessing some some live",
    "start": "1906880",
    "end": "1913440"
  },
  {
    "text": "lab sessions here which why not even work",
    "start": "1913440",
    "end": "1921600"
  },
  {
    "text": "yes okay so this would be basically a constructor so here on the vector what",
    "start": "1921600",
    "end": "1928720"
  },
  {
    "text": "is vector here is it's a interface or what is it or",
    "start": "1928720",
    "end": "1934799"
  },
  {
    "text": "it's an interface at both okay it's like that's like a common trick uh",
    "start": "1934799",
    "end": "1940559"
  },
  {
    "text": "that if you've used uh effect you've seen this quite a bit that you need a thing that's like a on a type level and",
    "start": "1940559",
    "end": "1946640"
  },
  {
    "text": "you need a thing that's on a term level like a thing that javascript actually knows typescript doesn't know that",
    "start": "1946640",
    "end": "1952399"
  },
  {
    "text": "sorry javascript doesn't know the interface but javascript knows the const and given it uses the same name here",
    "start": "1952399",
    "end": "1959120"
  },
  {
    "text": "we get the illusion of it being the same thing the only thing that i have to solve here",
    "start": "1959120",
    "end": "1965360"
  },
  {
    "text": "is ideally you wouldn't wanna specify this at all because if you call",
    "start": "1965360",
    "end": "1971200"
  },
  {
    "text": "this from javascript you really wanna construct it like passing vector as the as the first",
    "start": "1971200",
    "end": "1977519"
  },
  {
    "text": "argument right that would be terrible so i have a few ideas around one one",
    "start": "1977519",
    "end": "1984000"
  },
  {
    "text": "easy could be to put it as an optional last argument right it's almost similar",
    "start": "1984000",
    "end": "1991360"
  },
  {
    "text": "to how golang works like in golang when you want to add",
    "start": "1991360",
    "end": "1996640"
  },
  {
    "text": "a function a method on uh on some struct i think then you also have the first",
    "start": "1996640",
    "end": "2003200"
  },
  {
    "text": "argument being the instance itself but but in this case we are uh actually",
    "start": "2003200",
    "end": "2008559"
  },
  {
    "text": "as that is a method on an object yeah so here method on the companion object",
    "start": "2008559",
    "end": "2015519"
  },
  {
    "text": "called in the same way those are more i think now we're drifting a little bit into into the implementation details but",
    "start": "2015519",
    "end": "2022559"
  },
  {
    "text": "it's it's amazing what you've already demonstrated here and uh i i think you're still ironing out a few kinks",
    "start": "2022559",
    "end": "2029200"
  },
  {
    "text": "here um so we've now seen two things uh we've seen the uh custom operators uh",
    "start": "2029200",
    "end": "2037440"
  },
  {
    "text": "which are demonstrated in line 72 and you've demonstrated the um the discoverability",
    "start": "2037440",
    "end": "2044799"
  },
  {
    "text": "has an amazing idea a person from from the chat hey i think we",
    "start": "2044799",
    "end": "2050240"
  },
  {
    "text": "already have some follow-up that's great and i think that's awesome",
    "start": "2050240",
    "end": "2056240"
  },
  {
    "text": "that's uh that's the point of uh of this call as well is to get the ball rolling",
    "start": "2056240",
    "end": "2061358"
  },
  {
    "text": "on community input and this and uh yeah let the the hive mind",
    "start": "2061359",
    "end": "2069280"
  },
  {
    "text": "it's not quite no it doesn't work right here it doesn't work",
    "start": "2070800",
    "end": "2076480"
  },
  {
    "text": "anyway um cool so i think we've now seen like two two major",
    "start": "2076480",
    "end": "2082398"
  },
  {
    "text": "uh features of of this of the research work already",
    "start": "2082399",
    "end": "2087760"
  },
  {
    "text": "so there's another one that i'm really excited of using myself",
    "start": "2087760",
    "end": "2094079"
  },
  {
    "text": "which is related to um to codecs and deriving even more functionality from the",
    "start": "2094079",
    "end": "2101200"
  },
  {
    "text": "uh from the type definitions so uh if you've used um things like iots or",
    "start": "2101200",
    "end": "2109440"
  },
  {
    "text": "zod or things like that in the past um then you're probably familiar with",
    "start": "2109440",
    "end": "2114880"
  },
  {
    "text": "the problem that's um that you if you want to have um for example a a codec that means like",
    "start": "2114880",
    "end": "2122000"
  },
  {
    "text": "a encoder and a decoder or sometimes called serialize and deserializer for",
    "start": "2122000",
    "end": "2127119"
  },
  {
    "text": "some data structures you need to define that data structure using a",
    "start": "2127119",
    "end": "2133359"
  },
  {
    "text": "javascript or typescript dsl as opposed to just using a normal typescript type",
    "start": "2133359",
    "end": "2139599"
  },
  {
    "text": "definition so instead of saying type user equals age number",
    "start": "2139599",
    "end": "2145359"
  },
  {
    "text": "and name string et cetera you need to use a javascript usb for that",
    "start": "2145359",
    "end": "2152400"
  },
  {
    "text": "in the in the chat oh that that's great hey it's",
    "start": "2152400",
    "end": "2157599"
  },
  {
    "text": "nice to meet you and um so i think what what mike's been been",
    "start": "2157599",
    "end": "2162720"
  },
  {
    "text": "exploring here is actually to make that dream come true they can just say",
    "start": "2162720",
    "end": "2168640"
  },
  {
    "text": "type user equals like the the way how we're used to define typescript type definitions and",
    "start": "2168640",
    "end": "2175280"
  },
  {
    "text": "actually derive from these types derive terms so derive things like a encoder a",
    "start": "2175280",
    "end": "2182960"
  },
  {
    "text": "decoder and maybe even other things like an arbitrary etc so",
    "start": "2182960",
    "end": "2188720"
  },
  {
    "text": "there's i think mike's been trying to crack that nut for for quite a while now and had had various approaches",
    "start": "2188720",
    "end": "2196079"
  },
  {
    "text": "effects schema the current effect schema being one of it but i think it also has a couple of downsides",
    "start": "2196079",
    "end": "2202320"
  },
  {
    "text": "and uh yeah i think i've also played a role in this annoying mike with a lot of questions",
    "start": "2202320",
    "end": "2208480"
  },
  {
    "text": "why why this isn't possible and uh at some point mike showed me",
    "start": "2208480",
    "end": "2213520"
  },
  {
    "text": "actually a pretty incredible demo i'm not sure whether whether you have it working right now but probably not because i i",
    "start": "2213520",
    "end": "2220800"
  },
  {
    "text": "of course destroyed the demo multiple times and part of actually the reason why i've",
    "start": "2220800",
    "end": "2226240"
  },
  {
    "text": "been looking more deeply into the compiler internals is because of the limitations",
    "start": "2226240",
    "end": "2232320"
  },
  {
    "text": "i was facing around trying to make that that project maybe you can still find like you may",
    "start": "2232320",
    "end": "2239680"
  },
  {
    "text": "you don't need to run it i'll try to show to shop something and at least showcase the the ideas behind",
    "start": "2239680",
    "end": "2246560"
  },
  {
    "text": "yeah exactly yeah but there's a few more things i want to show on this side of the equation i know you like to jump on",
    "start": "2246560",
    "end": "2254000"
  },
  {
    "text": "schema but there's at least one more okay then then let's um let's shelf the the the",
    "start": "2254000",
    "end": "2260720"
  },
  {
    "text": "schema and the the the type derived things for a second and see what mic else is this one just here",
    "start": "2260720",
    "end": "2268240"
  },
  {
    "text": "because here we have been using very basic types",
    "start": "2268240",
    "end": "2273920"
  },
  {
    "text": "that's really a simple type it's an integer or it's a vector there's no generics involved",
    "start": "2274079",
    "end": "2279680"
  },
  {
    "text": "there's nothing specific how does this work with actual concrete types in place",
    "start": "2279680",
    "end": "2286560"
  },
  {
    "text": "well forget about the the amount of functions",
    "start": "2286560",
    "end": "2293119"
  },
  {
    "text": "that i've been implementing just for trying out in the in the same file",
    "start": "2293119",
    "end": "2298720"
  },
  {
    "text": "stuff but at the at the very end we have for example",
    "start": "2298720",
    "end": "2304880"
  },
  {
    "text": "what before we could only write in this way t do",
    "start": "2304880",
    "end": "2310960"
  },
  {
    "text": "dot bind x",
    "start": "2310960",
    "end": "2316560"
  },
  {
    "text": "i'm not gonna rewrite all of it but",
    "start": "2316560",
    "end": "2321599"
  },
  {
    "text": "now we can simply say 0.2 dot bind",
    "start": "2323200",
    "end": "2330480"
  },
  {
    "text": "and etc etc this is interesting so you're basically providing a different api compared to",
    "start": "2330640",
    "end": "2337440"
  },
  {
    "text": "to pipe pipe is nice because it can be tree shaped etc",
    "start": "2337440",
    "end": "2342560"
  },
  {
    "text": "and uh you can do some optimizations and a compile step but sometimes it's it's a",
    "start": "2342560",
    "end": "2348960"
  },
  {
    "text": "big shift i think given that we don't have like a real pipe operator but we",
    "start": "2348960",
    "end": "2355200"
  },
  {
    "text": "um yeah we got to use like the the you know we have that too function",
    "start": "2355200",
    "end": "2360960"
  },
  {
    "text": "but um through the through the the fluent api syntax here",
    "start": "2360960",
    "end": "2369280"
  },
  {
    "text": "um you're giving us a cleaner way to to write this but if you still like too much the",
    "start": "2369280",
    "end": "2377200"
  },
  {
    "text": "the pipeable approach the five operator is just a function",
    "start": "2377200",
    "end": "2382480"
  },
  {
    "text": "it's just a method on something so you can define a function like that",
    "start": "2382480",
    "end": "2388079"
  },
  {
    "text": "and you can easily do do five dot map",
    "start": "2388079",
    "end": "2393200"
  },
  {
    "text": "wait you've actually implemented the the like real pipe operator here",
    "start": "2393200",
    "end": "2399440"
  },
  {
    "text": "of course wow okay and i hope twitter doesn't find out",
    "start": "2399440",
    "end": "2404800"
  },
  {
    "text": "about this chain",
    "start": "2404800",
    "end": "2411079"
  },
  {
    "text": "and you see that it doesn't work",
    "start": "2413599",
    "end": "2419599"
  },
  {
    "text": "i i've hit that problem sometimes i think you gotta restart the typescript server let me start something but no i",
    "start": "2419599",
    "end": "2426640"
  },
  {
    "text": "have it here yeah okay succeed zero i probably have been using t succeed",
    "start": "2426640",
    "end": "2432319"
  },
  {
    "text": "with succeed with",
    "start": "2432319",
    "end": "2437400"
  },
  {
    "text": "x and we found the bug",
    "start": "2438000",
    "end": "2442560"
  },
  {
    "text": "that's correct wow yeah that that that is correct",
    "start": "2447119",
    "end": "2454319"
  },
  {
    "text": "either chain is it yeah could i mix and match uh things",
    "start": "2454319",
    "end": "2460480"
  },
  {
    "start": "2459000",
    "end": "2666000"
  },
  {
    "text": "here now so uh for example could you just delete the um where cursor currently is or no it's",
    "start": "2460480",
    "end": "2468000"
  },
  {
    "text": "somewhere else but if you delete one of the the pipe operators and the t um it just just",
    "start": "2468000",
    "end": "2475040"
  },
  {
    "text": "work now wow that's incredible",
    "start": "2475040",
    "end": "2481838"
  },
  {
    "text": "you could even rema yeah that there was a good question if i",
    "start": "2482000",
    "end": "2487119"
  },
  {
    "text": "could do this when it becomes a standard yes",
    "start": "2487119",
    "end": "2493200"
  },
  {
    "text": "but not being a standard in in javascript i have the problem that yes leaned prettier and any other tooling",
    "start": "2493200",
    "end": "2500480"
  },
  {
    "text": "around would not be able to support it i have no problems adding even 500",
    "start": "2500480",
    "end": "2506400"
  },
  {
    "text": "potential operators we have full control on the typescript side but we would have to extend uh eslint",
    "start": "2506400",
    "end": "2513359"
  },
  {
    "text": "preview right and i think that that's a great point like through your explorations here",
    "start": "2513359",
    "end": "2518640"
  },
  {
    "text": "um i think so far you've just basically repurposed existing javascript",
    "start": "2518640",
    "end": "2525040"
  },
  {
    "text": "syntax or typescript syntax so you didn't really go beyond uh introducing like new syntactical",
    "start": "2525040",
    "end": "2532800"
  },
  {
    "text": "introducing semantic only when the typescript compiler did not compile before so i'm effectively on a on a",
    "start": "2532800",
    "end": "2539920"
  },
  {
    "text": "superset of typescript but the syntax is still it's a supervisor so islam prettier etc will",
    "start": "2539920",
    "end": "2547520"
  },
  {
    "text": "will all just work um it's basically you're just giving repurposing some um syntactical things",
    "start": "2547520",
    "end": "2555680"
  },
  {
    "text": "uh in in some ways that makes it semantically more interesting and clearly not nothing for beats to",
    "start": "2555680",
    "end": "2562560"
  },
  {
    "text": "re-evaluate this idea in the in the future maybe allowing a different like compiler flag that if you don't",
    "start": "2562560",
    "end": "2569680"
  },
  {
    "text": "care about using year or stuff like that i i don't know just to to point one thing out uh very",
    "start": "2569680",
    "end": "2576640"
  },
  {
    "text": "clearly again if it hasn't been clear already uh typescript i think this is like the the core mantra of typescript",
    "start": "2576640",
    "end": "2583520"
  },
  {
    "text": "that it doesn't change the runtime behavior um we can't just copy line um",
    "start": "2583520",
    "end": "2589920"
  },
  {
    "text": "96 now in the browser and run it so this won't work anymore now it's like strictly",
    "start": "2589920",
    "end": "2595040"
  },
  {
    "text": "necessary that we and there's also not just like type like um the e is built",
    "start": "2595040",
    "end": "2601599"
  },
  {
    "text": "uh like if you use es build or swc etc that won't be enough anymore because",
    "start": "2601599",
    "end": "2607119"
  },
  {
    "text": "here you actually need to rewrite the code and you uh yes build swc etc often",
    "start": "2607119",
    "end": "2612240"
  },
  {
    "text": "just uh a couple of types one text yeah exactly because they're not doing type checking",
    "start": "2612240",
    "end": "2619599"
  },
  {
    "text": "you're basically cannot do any any for you cannot have any informed decision in",
    "start": "2619599",
    "end": "2624960"
  },
  {
    "text": "the emit step that is derived from the type so the two are completely disconnected but",
    "start": "2624960",
    "end": "2631440"
  },
  {
    "text": "hopefully i mean yes field is still very very fast",
    "start": "2631440",
    "end": "2636560"
  },
  {
    "text": "and tight checking is not usually the the bottleneck it's actually",
    "start": "2636560",
    "end": "2642240"
  },
  {
    "text": "emitting the stuff so right i think that's what there is there's a few people crazy enough i know",
    "start": "2642240",
    "end": "2649839"
  },
  {
    "text": "who might actually attempt doing this at some point like i think the one on the call because at some point in",
    "start": "2649839",
    "end": "2656160"
  },
  {
    "text": "time i mean if there is one code base that implement the checkering rust and what code base that implement the",
    "start": "2656160",
    "end": "2662000"
  },
  {
    "text": "emitter probably some crazy human will implement but this this is great i mean this is",
    "start": "2662000",
    "end": "2667440"
  },
  {
    "text": "already a proof of concept that makes it syntactically desirable and we can on",
    "start": "2667440",
    "end": "2672560"
  },
  {
    "text": "our you know um on our own pace and on terms introduced us in some code bases",
    "start": "2672560",
    "end": "2679920"
  },
  {
    "text": "um the typescript compiler then just spits out normal typescript uh definition files normal javascript and",
    "start": "2679920",
    "end": "2687119"
  },
  {
    "text": "we can use that in a way that nothing has ever happened we just had more more efficient or",
    "start": "2687119",
    "end": "2693520"
  },
  {
    "text": "more uh i guess to us uh more more elegant source code",
    "start": "2693520",
    "end": "2700640"
  },
  {
    "text": "and the last part i want to show here and then we jump on to the term inference",
    "start": "2700640",
    "end": "2706480"
  },
  {
    "text": "for for a second is in here this program",
    "start": "2706480",
    "end": "2711599"
  },
  {
    "text": "does do is a simulation of a construct of other",
    "start": "2711599",
    "end": "2717359"
  },
  {
    "text": "languages where if you have a monadic type a monolithic type means something that can",
    "start": "2717359",
    "end": "2722880"
  },
  {
    "text": "do sequential operations fundamentally one dependent on the on the previous on",
    "start": "2722880",
    "end": "2728800"
  },
  {
    "text": "the result of the previous one you can represent imperative ways of coding",
    "start": "2728800",
    "end": "2736560"
  },
  {
    "text": "which is here i'm defining a variable x a constant y and i'm doing operations using the two",
    "start": "2736560",
    "end": "2744400"
  },
  {
    "text": "this is a simulation that uses uses object deconstruction",
    "start": "2744400",
    "end": "2749440"
  },
  {
    "text": "there is an alternative way that we've been doing that in in effect that's also",
    "start": "2749440",
    "end": "2754720"
  },
  {
    "text": "a very nice way that i sound i sometimes like",
    "start": "2754720",
    "end": "2760400"
  },
  {
    "text": "to use especially it's highly used in service construction when when you need to reference a lot of other",
    "start": "2760400",
    "end": "2768240"
  },
  {
    "text": "dependencies is the generator simulation in the generator simulation",
    "start": "2768240",
    "end": "2775520"
  },
  {
    "text": "we have like t dot succeed zero you can assign it const x equal",
    "start": "2775520",
    "end": "2784000"
  },
  {
    "text": "and here you can do all the crazy stuff you you might think and just to point out again uh",
    "start": "2784000",
    "end": "2789760"
  },
  {
    "start": "2788000",
    "end": "2903000"
  },
  {
    "text": "we don't really benefit from doing the uh these crazy things here for returning",
    "start": "2789760",
    "end": "2795520"
  },
  {
    "text": "a zero uh as an integer usually you would do something here with side effects etc um where you would actually",
    "start": "2795520",
    "end": "2803200"
  },
  {
    "text": "benefit from using ammonia is doing doing any any sort of uh",
    "start": "2803200",
    "end": "2808240"
  },
  {
    "text": "operation yeah but this just you just demonstrate the different options we have from a syntactical perspective on a",
    "start": "2808240",
    "end": "2814800"
  },
  {
    "text": "syntactical perspective precisely but they have very big implications",
    "start": "2814800",
    "end": "2820720"
  },
  {
    "text": "this is not compiling to the same code as before",
    "start": "2820720",
    "end": "2826079"
  },
  {
    "text": "this is allocating an iterator in javascript it's using generators in",
    "start": "2826079",
    "end": "2831280"
  },
  {
    "text": "javascript so there is a huge cost for for doing that the same cost you pay",
    "start": "2831280",
    "end": "2836640"
  },
  {
    "text": "when you use async await in functions that is totally acceptable for for",
    "start": "2836640",
    "end": "2843040"
  },
  {
    "text": "normal effects but the cost gets exponentially worse for types like array for types like stream",
    "start": "2843040",
    "end": "2851040"
  },
  {
    "text": "types that allow you to output multiple things just because of how",
    "start": "2851040",
    "end": "2857599"
  },
  {
    "text": "generators are implemented in in javascript they don't have any immutable context so we need to work around a lot",
    "start": "2857599",
    "end": "2865200"
  },
  {
    "text": "to fake that immutable context other languages have native dsls",
    "start": "2865200",
    "end": "2872559"
  },
  {
    "text": "that you can use and they compile back to the actual",
    "start": "2872559",
    "end": "2877760"
  },
  {
    "text": "bare bone right i i think in scala we have like four comprehensions you have four comprehensions precisely in haskell you",
    "start": "2877760",
    "end": "2884720"
  },
  {
    "text": "might have you have the the do comprehension same precisely the same concept",
    "start": "2884720",
    "end": "2889839"
  },
  {
    "text": "right uh in [Music] that was a weird",
    "start": "2889839",
    "end": "2896079"
  },
  {
    "text": "component of the of the attempt by i've managed to have to have a do",
    "start": "2896800",
    "end": "2902000"
  },
  {
    "text": "working so that's like not a new syntax variant that you've come up with that probably",
    "start": "2902000",
    "end": "2908480"
  },
  {
    "start": "2903000",
    "end": "2977000"
  },
  {
    "text": "tries to give us kind of the best of both worlds i'm still trying to do i mean not adding syntax so i don't want",
    "start": "2908480",
    "end": "2916000"
  },
  {
    "text": "to add syntax so there is a little bit of weirdness because i don't want to add syntax right",
    "start": "2916000",
    "end": "2921280"
  },
  {
    "text": "but i can do const x and saying dollar t dot",
    "start": "2921280",
    "end": "2926839"
  },
  {
    "text": "succeed with zero",
    "start": "2926839",
    "end": "2932480"
  },
  {
    "text": "t dot succeed with console log",
    "start": "2933920",
    "end": "2939920"
  },
  {
    "text": "hello",
    "start": "2940319",
    "end": "2943319"
  },
  {
    "text": "x",
    "start": "2946960",
    "end": "2949200"
  },
  {
    "text": "and the type of these is correctly inferred here you you can also say for example",
    "start": "2954559",
    "end": "2961119"
  },
  {
    "text": "dot fail hello and it'll have stream okay",
    "start": "2961119",
    "end": "2968960"
  },
  {
    "text": "correctly for if you see here it infers both properly the input type the",
    "start": "2968960",
    "end": "2975040"
  },
  {
    "text": "output error and anything else so this seems very similar to the uh generator",
    "start": "2975040",
    "end": "2981119"
  },
  {
    "start": "2977000",
    "end": "3168000"
  },
  {
    "text": "syntax is there anything that the generator syntax can do that this can't do",
    "start": "2981119",
    "end": "2988559"
  },
  {
    "text": "this one for example invalid statement in the value of there is only a few number a few set of",
    "start": "2991119",
    "end": "3000079"
  },
  {
    "text": "things you can do only with chain and mine",
    "start": "3000079",
    "end": "3005280"
  },
  {
    "text": "fundamentally ado it's something that starts empty",
    "start": "3005280",
    "end": "3011040"
  },
  {
    "text": "that has a sequence of bindings right and that has a a map",
    "start": "3011040",
    "end": "3018240"
  },
  {
    "text": "steps of map so you can only for example this cannot even be",
    "start": "3018240",
    "end": "3023839"
  },
  {
    "text": "left i can only use constants so it's very restricted what",
    "start": "3023839",
    "end": "3031920"
  },
  {
    "text": "can do but it does precisely what a four comprehension would do in scada right",
    "start": "3031920",
    "end": "3037280"
  },
  {
    "text": "now there is a degree of things we can we can do for example if statements",
    "start": "3037280",
    "end": "3044240"
  },
  {
    "text": "i can implement if statements",
    "start": "3044240",
    "end": "3048559"
  },
  {
    "text": "so there is a degree of anything that would kind of like loop",
    "start": "3049920",
    "end": "3055760"
  },
  {
    "text": "uh is this problem or what would a would a for loop actually well for loop is kind of like the same",
    "start": "3055760",
    "end": "3061359"
  },
  {
    "text": "as a you can use it in a way then like a like a while loop i guess that's that's problematic",
    "start": "3061359",
    "end": "3066800"
  },
  {
    "text": "yeah if you do it recursively yes but you're gonna blow up with with other",
    "start": "3066800",
    "end": "3071920"
  },
  {
    "text": "okay so for okay got it but if you're doing like wild patterns like this then",
    "start": "3071920",
    "end": "3077040"
  },
  {
    "text": "these are generators they're your typica there's typically a a cleaner way to to do that in a more functional way anyway",
    "start": "3077040",
    "end": "3083920"
  },
  {
    "text": "or use a generator yeah exactly because they're they're literally not evil",
    "start": "3083920",
    "end": "3089119"
  },
  {
    "text": "they're they're very good i'm using them a lot in various places and where i found them",
    "start": "3089119",
    "end": "3094480"
  },
  {
    "text": "particularly useful like your analogy before that the uh do bind or the generator syntax",
    "start": "3094480",
    "end": "3102960"
  },
  {
    "text": "is basically the the functional magnetic equivalent to async weight um they they're also syntactically very",
    "start": "3102960",
    "end": "3110559"
  },
  {
    "text": "similar and as you're migrating a code base from a normal",
    "start": "3110559",
    "end": "3116240"
  },
  {
    "text": "normal uh async awaits style and non-functional non-effect way to effect",
    "start": "3116240",
    "end": "3122000"
  },
  {
    "text": "i found generators to be incredibly useful as um just syntactically that's a that's a",
    "start": "3122000",
    "end": "3129119"
  },
  {
    "text": "minimal change you need to do like go from a single weight to generators and you can mostly just translate your code",
    "start": "3129119",
    "end": "3137359"
  },
  {
    "text": "in in this way and it still works and then the happy refactoring can start",
    "start": "3137359",
    "end": "3144000"
  },
  {
    "text": "and uh i've been doing one sneaky thing here all around",
    "start": "3144000",
    "end": "3150079"
  },
  {
    "text": "the the file and [Music] this should scream wrong in any way",
    "start": "3150079",
    "end": "3158480"
  },
  {
    "text": "because this is console log as a side effect and it's eagerly computed",
    "start": "3158480",
    "end": "3165760"
  },
  {
    "text": "in here so where where do you draw the line how how do you know that",
    "start": "3165760",
    "end": "3170960"
  },
  {
    "start": "3168000",
    "end": "3401000"
  },
  {
    "text": "uh the that this shouldn't be eagerly evaluated is that defined at the succeed with",
    "start": "3170960",
    "end": "3177200"
  },
  {
    "text": "level that you say succeed with us lazy oh",
    "start": "3177200",
    "end": "3182640"
  },
  {
    "text": "interesting so there's no way you're gonna get anything wrong i one of the bugs you had in content layer",
    "start": "3182640",
    "end": "3190079"
  },
  {
    "text": "if you remember you had a oh yeah i access process i think you had something like that",
    "start": "3190079",
    "end": "3196480"
  },
  {
    "text": "yeah but but you didn't access directory process you did something of this type now something of this type it's it's",
    "start": "3196480",
    "end": "3203200"
  },
  {
    "text": "sneaky because you think i'm just accessing the property but this accessor could be a gather that",
    "start": "3203200",
    "end": "3210079"
  },
  {
    "text": "could perform side effects right for example in in your case it was",
    "start": "3210079",
    "end": "3215680"
  },
  {
    "text": "accessing the process dot dot m right so you you didn't even know where where this",
    "start": "3215680",
    "end": "3221760"
  },
  {
    "text": "was and you resolved by saying suspend at the very root to just get it get it",
    "start": "3221760",
    "end": "3229280"
  },
  {
    "text": "suspended at least but it's sneaky and sometimes errors comes from from this",
    "start": "3229280",
    "end": "3234640"
  },
  {
    "text": "why somebody would prefer to use succeed instead of the",
    "start": "3234640",
    "end": "3240079"
  },
  {
    "text": "lazy succeed with well because it's boring to having to",
    "start": "3240079",
    "end": "3245760"
  },
  {
    "text": "have to write those numbers my closures manually it's very verbose",
    "start": "3245760",
    "end": "3251359"
  },
  {
    "text": "and you just forget to do that other cases are like dot fail i'm",
    "start": "3251359",
    "end": "3257440"
  },
  {
    "text": "on the on the other hand like i think there's an argument here that's like you're already it's like something being lazy uh and",
    "start": "3257440",
    "end": "3265599"
  },
  {
    "text": "it's syntactically not explicit uh might be something that's uh but the",
    "start": "3265599",
    "end": "3271119"
  },
  {
    "text": "point is counterintuitive for existing javascript developers this is not the succeed it's not even",
    "start": "3271119",
    "end": "3278160"
  },
  {
    "text": "exposed internal implementation because there's literally no context in with which you",
    "start": "3278160",
    "end": "3284400"
  },
  {
    "text": "want that eager right the only context is only in typescript because we don't have",
    "start": "3284400",
    "end": "3290839"
  },
  {
    "text": "automatic ping and otherwise writing this would be terrible one",
    "start": "3290839",
    "end": "3296720"
  },
  {
    "text": "of the case i always see in my code is this",
    "start": "3296720",
    "end": "3301920"
  },
  {
    "text": "you know this seems innocent",
    "start": "3302079",
    "end": "3307119"
  },
  {
    "text": "but if this is inside a conditional this error is going to be created always",
    "start": "3307119",
    "end": "3313760"
  },
  {
    "text": "right regardless of definitions because it's eagerly evaluated",
    "start": "3313760",
    "end": "3320559"
  },
  {
    "text": "it should be like that so it's only greater than",
    "start": "3320559",
    "end": "3326720"
  },
  {
    "text": "and everything but you're never gonna use this if you know yeah okay i i have it",
    "start": "3326720",
    "end": "3332079"
  },
  {
    "text": "fair enough like they're yeah if if i think this is just leveraged in cases where kind of like quote unquote it",
    "start": "3332079",
    "end": "3337680"
  },
  {
    "text": "doesn't matter um then i think that's a that's a good gateway drug way for us to like",
    "start": "3337680",
    "end": "3345280"
  },
  {
    "text": "anything going on that it makes anything automatically lazy only the functions that are using",
    "start": "3345280",
    "end": "3351680"
  },
  {
    "text": "this specific construct which is a simple function that returns",
    "start": "3351680",
    "end": "3357280"
  },
  {
    "text": "any but that has these annotations so that's another explicit thing okay that's another very explicit",
    "start": "3357280",
    "end": "3363839"
  },
  {
    "text": "thing so it's not gonna be anything general that bubbles up on on your system but it",
    "start": "3363839",
    "end": "3370319"
  },
  {
    "text": "is gonna prevent it's it's making this usable way more way more usable and there's no",
    "start": "3370319",
    "end": "3376240"
  },
  {
    "text": "way that you can write a code like this that would not execute uh",
    "start": "3376240",
    "end": "3381760"
  },
  {
    "text": "properly because this one the thing is this still compiles yep",
    "start": "3381760",
    "end": "3389119"
  },
  {
    "text": "but this does a completely different thing yep this will print in the wrong moment with",
    "start": "3389119",
    "end": "3395119"
  },
  {
    "text": "the wrong references it will not work let's let's play in those terms right so yeah then",
    "start": "3395119",
    "end": "3401839"
  },
  {
    "start": "3401000",
    "end": "3599000"
  },
  {
    "text": "i i think this this one is probably a bit more debatable at least in my in my opinion",
    "start": "3401839",
    "end": "3406880"
  },
  {
    "text": "let's see i think this is uh that's great i i'm i'm all in favor of like you",
    "start": "3406880",
    "end": "3412240"
  },
  {
    "text": "putting more bold ideas out there um",
    "start": "3412240",
    "end": "3418599"
  },
  {
    "text": "yeah i think we're nearing the end but i think you you left uh something special for for the for the",
    "start": "3425280",
    "end": "3432160"
  },
  {
    "text": "end uh okay it's maybe when you find it",
    "start": "3432160",
    "end": "3437680"
  },
  {
    "text": "somewhere",
    "start": "3438160",
    "end": "3440798"
  },
  {
    "text": "oh yeah it's starting on global level",
    "start": "3443280",
    "end": "3449200"
  },
  {
    "text": "easy you know that uh github has a search",
    "start": "3449200",
    "end": "3454400"
  },
  {
    "text": "feature",
    "start": "3454400",
    "end": "3456798"
  },
  {
    "text": "there we go uh okay so this is implemented still still",
    "start": "3459839",
    "end": "3467040"
  },
  {
    "text": "here press the dot key",
    "start": "3467040",
    "end": "3471799"
  },
  {
    "text": "but we don't get um a language server there yet so no intellisense",
    "start": "3476960",
    "end": "3483040"
  },
  {
    "text": "but still a bit more ergonomic to navigate through the code base",
    "start": "3483040",
    "end": "3490240"
  },
  {
    "text": "okay so just uh to to set the stage what you're gonna show us now",
    "start": "3491599",
    "end": "3497119"
  },
  {
    "text": "is basically an alternative to iots or sod or um",
    "start": "3497119",
    "end": "3503680"
  },
  {
    "text": "comparable things with the the idea and with the claim that you can",
    "start": "3503680",
    "end": "3509130"
  },
  {
    "text": "[Music] kind of similar to what's possible in rus or scala like for example in rust if",
    "start": "3509130",
    "end": "3516160"
  },
  {
    "text": "you can uh quickly open raserd i'm not sure how to pronounce it properly",
    "start": "3516160",
    "end": "3521359"
  },
  {
    "text": "um just give me a second yes",
    "start": "3521359",
    "end": "3525519"
  },
  {
    "text": "and before we're closing up uh i also encourage everyone um watching live uh",
    "start": "3528079",
    "end": "3534160"
  },
  {
    "text": "to ask any questions if you have any uh how is it called",
    "start": "3534160",
    "end": "3539359"
  },
  {
    "text": "rust third uh oh no s s e server d e",
    "start": "3539359",
    "end": "3547520"
  },
  {
    "text": "yes this one perfect serialization d serialization sir",
    "start": "3547520",
    "end": "3552960"
  },
  {
    "text": "exactly so if you scroll down then maybe there's like a little code snippet yeah exactly so you see here we have a struct",
    "start": "3552960",
    "end": "3559599"
  },
  {
    "text": "point which is like a vector from before could be a user it could be something",
    "start": "3559599",
    "end": "3566160"
  },
  {
    "text": "else and what we want here is for our data structure",
    "start": "3566160",
    "end": "3571760"
  },
  {
    "text": "maybe we need to send that data structure from a back-end server into the browser or we need to",
    "start": "3571760",
    "end": "3577440"
  },
  {
    "text": "save it in local storage or something similar so we want kind of like a",
    "start": "3577440",
    "end": "3583359"
  },
  {
    "text": "two-json method specifically for that and a from json method",
    "start": "3583359",
    "end": "3589359"
  },
  {
    "text": "that parses a serialized version of this and ideally just returns us the",
    "start": "3589359",
    "end": "3597040"
  },
  {
    "text": "the proper data but it also uh could return us um some sort of like",
    "start": "3597040",
    "end": "3603040"
  },
  {
    "text": "error structure if you if you open the the third part uh one more one more time um so and that",
    "start": "3603040",
    "end": "3610240"
  },
  {
    "text": "that's that's what we see here we uh first we see the the serialized we get the two string",
    "start": "3610240",
    "end": "3616319"
  },
  {
    "text": "um methods and where we can get the yeah where we get the the serialized",
    "start": "3616319",
    "end": "3622640"
  },
  {
    "text": "json and we also get a d serialize and the point here is that we we don't need",
    "start": "3622640",
    "end": "3628160"
  },
  {
    "text": "to do something crazy we don't need to implement the uh two json method ourself we can derive",
    "start": "3628160",
    "end": "3635680"
  },
  {
    "text": "it from we know how to serialize an integer 32 and we know how to serialize a struct",
    "start": "3635680",
    "end": "3643760"
  },
  {
    "text": "of other things that we know how to serialize so we can derive a serializable and we can rise uh derive",
    "start": "3643760",
    "end": "3650799"
  },
  {
    "text": "deserialize and that we can do in rust because rust",
    "start": "3650799",
    "end": "3657599"
  },
  {
    "text": "that type system is like a first class citizen of the language but we don't have that in typescript um as it is",
    "start": "3657599",
    "end": "3664240"
  },
  {
    "text": "today but michael has been investigating that and i think that would be a real",
    "start": "3664240",
    "end": "3669680"
  },
  {
    "text": "breakthrough for the the typescript ecosystem and uh here what",
    "start": "3669680",
    "end": "3675040"
  },
  {
    "text": "i'm gonna show now is a very early stage prototypal",
    "start": "3675040",
    "end": "3681440"
  },
  {
    "text": "thing of this and i don't even remember in what in what stage have i left",
    "start": "3681440",
    "end": "3687200"
  },
  {
    "text": "this project if it was in a working stage or not because as i said before that's one of the",
    "start": "3687200",
    "end": "3693680"
  },
  {
    "text": "primary reason why i've been then looking into the insider of the compiler",
    "start": "3693680",
    "end": "3698880"
  },
  {
    "text": "this is implemented as a compiler plugin so i have no access to",
    "start": "3698880",
    "end": "3704319"
  },
  {
    "text": "the language service and i have no access to the to the checker",
    "start": "3704319",
    "end": "3709599"
  },
  {
    "text": "so here you've been trying like a stock typescript plugin uh compiler plugin you",
    "start": "3709599",
    "end": "3715440"
  },
  {
    "text": "found a few limitations that you then because not being able to access the",
    "start": "3715440",
    "end": "3721520"
  },
  {
    "text": "checker means i can't really play with types so i end up having to recreate a",
    "start": "3721520",
    "end": "3727440"
  },
  {
    "text": "parallel type system that does part of the checking at the at the emit stage it's very efficient",
    "start": "3727440",
    "end": "3735119"
  },
  {
    "text": "that that's like a basically a small uh so implementation question basically",
    "start": "3735119",
    "end": "3742079"
  },
  {
    "text": "from a usage perspective it amounts to the same the demands are the same but the the",
    "start": "3742079",
    "end": "3748079"
  },
  {
    "text": "difference is here i have no way of saying for example can i actually derive this got it so you you we're able",
    "start": "3748079",
    "end": "3756400"
  },
  {
    "text": "to implement this to a certain point but not further and that led to the other uh",
    "start": "3756400",
    "end": "3761839"
  },
  {
    "text": "work that we've seen initially which will then be the foundation to to do this in an even potentially better way",
    "start": "3761839",
    "end": "3769200"
  },
  {
    "text": "yeah because having access to uh the type checker if i don't have enough",
    "start": "3769200",
    "end": "3774400"
  },
  {
    "text": "context for me to actually derive this structure i can tell you not only",
    "start": "3774400",
    "end": "3780799"
  },
  {
    "text": "that i cannot do it but if there is a a way for you for example to add",
    "start": "3780799",
    "end": "3786160"
  },
  {
    "text": "something else that can be combined for example i cannot construct a product for a person",
    "start": "3786160",
    "end": "3791839"
  },
  {
    "text": "because i don't know how to construct a codec for a date just for for people who don't have as",
    "start": "3791839",
    "end": "3798240"
  },
  {
    "text": "much functional programming experience a codec is basically the thing that allows",
    "start": "3798240",
    "end": "3804240"
  },
  {
    "text": "you to that gives you like the two json from json or the um the",
    "start": "3804240",
    "end": "3809839"
  },
  {
    "text": "serialized deserialized function that's together is called a codec",
    "start": "3809839",
    "end": "3815039"
  },
  {
    "text": "but let's suppose you have a you have a type person",
    "start": "3815039",
    "end": "3820319"
  },
  {
    "text": "and in the type person you have like age",
    "start": "3820319",
    "end": "3826400"
  },
  {
    "text": "and etc etc age first name first name",
    "start": "3828240",
    "end": "3834880"
  },
  {
    "text": "and so on and so forth why generating uh let's say",
    "start": "3834880",
    "end": "3841520"
  },
  {
    "text": "person here we are generating refinements not not codecs",
    "start": "3841520",
    "end": "3847359"
  },
  {
    "text": "a refinement is something uh is",
    "start": "3847359",
    "end": "3853200"
  },
  {
    "text": "[Music] i guess we wouldn't need it we could",
    "start": "3853490",
    "end": "3859200"
  },
  {
    "text": "also just say here in line three first name is just string um but here we we go even a step further",
    "start": "3859200",
    "end": "3867839"
  },
  {
    "text": "where we encode some um some more semantic validation rules that the first",
    "start": "3867839",
    "end": "3873280"
  },
  {
    "text": "name um has to be between 1 and 255 characters",
    "start": "3873280",
    "end": "3879200"
  },
  {
    "text": "probably some some not true assumptions but [Music]",
    "start": "3879200",
    "end": "3885680"
  },
  {
    "text": "here basically i've derived implicitly a refinement for a person a refinement",
    "start": "3885680",
    "end": "3892720"
  },
  {
    "text": "it's something that goes from an unknown structure and tells you if the structure is a",
    "start": "3892720",
    "end": "3898799"
  },
  {
    "text": "person nice so that's as a guard basically it's a guard basically a",
    "start": "3898799",
    "end": "3903920"
  },
  {
    "text": "refinement is a more specific guard where you have two objects a guard would be on a",
    "start": "3903920",
    "end": "3910400"
  },
  {
    "text": "refinement from one but but crucially and i think that that's a really special thing here",
    "start": "3910400",
    "end": "3916079"
  },
  {
    "text": "a guard we don't have to have to write we get that for free from your compiler",
    "start": "3916079",
    "end": "3922240"
  },
  {
    "text": "plugin maybe so well eventually that that's the dream",
    "start": "3922240",
    "end": "3928799"
  },
  {
    "text": "but um that's that's the idea here and as if you've used guards and typescript",
    "start": "3928799",
    "end": "3934559"
  },
  {
    "text": "before or these sort of codecs then you know you typically need to write",
    "start": "3934559",
    "end": "3940240"
  },
  {
    "text": "unless you're using iojs or you typically need to write this here so i read the error here",
    "start": "3940240",
    "end": "3946559"
  },
  {
    "text": "i cannot derive a type for a refinement in in person",
    "start": "3946559",
    "end": "3952400"
  },
  {
    "text": "okay so that's a limitation you so far but you you were",
    "start": "3952400",
    "end": "3957440"
  },
  {
    "text": "that that's that's the goal to make even that work but that that was working",
    "start": "3957440",
    "end": "3963520"
  },
  {
    "text": "it's not working because i've progressively destroyed everything by trying to use",
    "start": "3963520",
    "end": "3969200"
  },
  {
    "text": "the compiler but i believe up to this point it actually generates the proper types yes",
    "start": "3969200",
    "end": "3976640"
  },
  {
    "text": "so here i have h let's see the output",
    "start": "3976640",
    "end": "3982640"
  },
  {
    "text": "if this works it's pure magic because it's so old",
    "start": "3982640",
    "end": "3987760"
  },
  {
    "text": "i didn't plan to show this today the main person doing",
    "start": "3987760",
    "end": "3994640"
  },
  {
    "text": "person yes",
    "start": "3994640",
    "end": "3998559"
  },
  {
    "text": "you see that age okay got it so we get a whole bunch of",
    "start": "4000559",
    "end": "4005839"
  },
  {
    "text": "terms here like a term is the opposite of just type level everything else is a",
    "start": "4005839",
    "end": "4011200"
  },
  {
    "text": "term uh and so we get a whole bunch of terms derived from type level stuff",
    "start": "4011200",
    "end": "4017440"
  },
  {
    "text": "actually let me split it down i want to show the compiled",
    "start": "4017440",
    "end": "4022720"
  },
  {
    "text": "version and the other here i say i want a refinement that goes from unknown to age",
    "start": "4022720",
    "end": "4029119"
  },
  {
    "text": "so basically age is defined as an integer",
    "start": "4029119",
    "end": "4034799"
  },
  {
    "text": "that's a brand of int right that's between 0 and 255.",
    "start": "4034799",
    "end": "4040720"
  },
  {
    "text": "and you're not just demonstrating the hello world here you're demonstrating on a very few lines of code a lot of",
    "start": "4040720",
    "end": "4047359"
  },
  {
    "text": "functionality so that that's very impressive and here you see that that is minimum is",
    "start": "4047359",
    "end": "4053920"
  },
  {
    "text": "maximum you have a condition of this minimum and it's maximum you have an is always true because there's no",
    "start": "4053920",
    "end": "4059680"
  },
  {
    "text": "additional validation for age to be optimized clearly that is always",
    "start": "4059680",
    "end": "4065119"
  },
  {
    "text": "throughput would be optimized away because it's a non-check",
    "start": "4065119",
    "end": "4070720"
  },
  {
    "text": "but then you compose progressively and and here you can see that we are composing from",
    "start": "4070720",
    "end": "4077280"
  },
  {
    "text": "his number and that are defined",
    "start": "4077280",
    "end": "4082400"
  },
  {
    "text": "in the uh there may be an integer right so there's a whole bunch of these like already in",
    "start": "4082400",
    "end": "4089760"
  },
  {
    "text": "some library but we could also implement our own",
    "start": "4089760",
    "end": "4095280"
  },
  {
    "text": "yeah probably a cardiac index maybe codec no whatever",
    "start": "4096480",
    "end": "4104000"
  },
  {
    "text": "where is it between defined okay in in refined",
    "start": "4104000",
    "end": "4111039"
  },
  {
    "text": "that's the whole thing so it's wow plain functions got it and so the entire",
    "start": "4113040",
    "end": "4120798"
  },
  {
    "text": "point here is like we get we have little pieces of functionality",
    "start": "4120799",
    "end": "4126159"
  },
  {
    "text": "that comes with the library and then we can just compose these and they automatically compose and and say that",
    "start": "4126159",
    "end": "4132400"
  },
  {
    "text": "you for example want to add another thing into into age",
    "start": "4132400",
    "end": "4139440"
  },
  {
    "text": "you could take a refinement",
    "start": "4140319",
    "end": "4146960"
  },
  {
    "text": "of this mess",
    "start": "4146960",
    "end": "4149758"
  },
  {
    "text": "and say p dot brand branded",
    "start": "4152080",
    "end": "4158198"
  },
  {
    "text": "and what that callback function is basically doing is like that is the that's a validation",
    "start": "4164239",
    "end": "4170080"
  },
  {
    "text": "step basically if you get something unknown um and if that's indeed fits",
    "start": "4170080",
    "end": "4177600"
  },
  {
    "text": "uh the passes through the implementation here then it indeed becomes an age",
    "start": "4177600",
    "end": "4186040"
  },
  {
    "text": "will that ever be the case i don't even know what",
    "start": "4191839",
    "end": "4197679"
  },
  {
    "text": "it's not a sign law why does he want anyway i i think we",
    "start": "4198400",
    "end": "4206719"
  },
  {
    "text": "we're going to wrap it here yeah we have some more time to debug this but this was incredibly uh incredibly impressive",
    "start": "4206719",
    "end": "4214719"
  },
  {
    "text": "and i'm very much looking forward to to being able to use this at some point",
    "start": "4214719",
    "end": "4219760"
  },
  {
    "text": "which begs uh the the question and hopefully that's okay to put you on the",
    "start": "4219760",
    "end": "4225120"
  },
  {
    "text": "spot here what what do you think is like the the plan forward the path forward to",
    "start": "4225120",
    "end": "4230800"
  },
  {
    "text": "to actually get this in the hands of users and when when can we build applications with this",
    "start": "4230800",
    "end": "4237040"
  },
  {
    "text": "two and a half years three years no i'm trying",
    "start": "4237040",
    "end": "4242320"
  },
  {
    "text": "those are you joking know clearly there's there's with a lot of different uh things that uh i wanna test i wanna",
    "start": "4242320",
    "end": "4248960"
  },
  {
    "text": "do in the long time in the long term but uh what what is taking me a little bit longer",
    "start": "4248960",
    "end": "4256719"
  },
  {
    "text": "is the initial problem that i've described as module discovery",
    "start": "4256719",
    "end": "4261920"
  },
  {
    "text": "that is because especially when you import a functionality from an external library",
    "start": "4261920",
    "end": "4267120"
  },
  {
    "text": "you could have in the package.json some export map that makes that specific file not even",
    "start": "4267120",
    "end": "4274000"
  },
  {
    "text": "accessible so the the code generation part where i figured",
    "start": "4274000",
    "end": "4279920"
  },
  {
    "text": "out where the inputs come comes from requires some sort of",
    "start": "4279920",
    "end": "4285360"
  },
  {
    "text": "decisions i have two ideas and i think none",
    "start": "4285360",
    "end": "4292080"
  },
  {
    "text": "the the end goal would be a combination of the two in the design document i i have an",
    "start": "4292080",
    "end": "4297679"
  },
  {
    "text": "explanation of the scope discovery of what what things are available",
    "start": "4297679",
    "end": "4303600"
  },
  {
    "text": "in a specific file but uh what i really want to have is",
    "start": "4303600",
    "end": "4309440"
  },
  {
    "text": "to define a standard where if you use this if you wanna make your library available for that",
    "start": "4309440",
    "end": "4316159"
  },
  {
    "text": "then you sort of respect either a standard or you specify the package.json",
    "start": "4316159",
    "end": "4321199"
  },
  {
    "text": "of your file a different way of mapping",
    "start": "4321199",
    "end": "4326239"
  },
  {
    "text": "one import well you have to tell me how do you want to to import stuff but if this is closed",
    "start": "4326239",
    "end": "4333440"
  },
  {
    "text": "the code for the checker is already pretty much done at the level for the first part of",
    "start": "4333440",
    "end": "4340640"
  },
  {
    "text": "the extensions so operators and i can start with operators start with",
    "start": "4340640",
    "end": "4346560"
  },
  {
    "text": "fluent those are the first two and then build on top of the module",
    "start": "4346560",
    "end": "4351920"
  },
  {
    "text": "system and everything else the the term inference aspect",
    "start": "4351920",
    "end": "4357600"
  },
  {
    "text": "i have to say that here this also the the other hidden features",
    "start": "4357600",
    "end": "4362719"
  },
  {
    "text": "is generic implicit discovery because that is something i want to address also",
    "start": "4362719",
    "end": "4369120"
  },
  {
    "text": "together there's still a few like hard nuts to crack and then probably a bunch after",
    "start": "4369120",
    "end": "4374560"
  },
  {
    "text": "that but for the first three days i don't think it's going to take more than a month or two",
    "start": "4374560",
    "end": "4379679"
  },
  {
    "text": "to like famous last words but i'm going to course of course but keep in mind guys that",
    "start": "4379679",
    "end": "4385360"
  },
  {
    "text": "zero 1.0 the first rc one had two type parameters",
    "start": "4385360",
    "end": "4391600"
  },
  {
    "text": "right so the first three years i think what you've shown is like already plenty",
    "start": "4391600",
    "end": "4398800"
  },
  {
    "text": "to start playing around with um and yeah i'm really looking forward to that",
    "start": "4398800",
    "end": "4404000"
  },
  {
    "text": "um maybe as a as a last thing to close up what is the what are the best next",
    "start": "4404000",
    "end": "4409040"
  },
  {
    "text": "steps for people who are curious to learn more to get involved to help out",
    "start": "4409040",
    "end": "4414880"
  },
  {
    "text": "in some ways what are the the best ways for for people to do that is there so we have the the effect discord obviously is",
    "start": "4414880",
    "end": "4421920"
  },
  {
    "text": "there a specific channel where people um can can learn more for the moment we haven't been",
    "start": "4421920",
    "end": "4428080"
  },
  {
    "text": "discussing that a lot publicly because clearly it was uh as you said a research",
    "start": "4428080",
    "end": "4434480"
  },
  {
    "text": "project up to up to very recently where i even realized this was feasible in",
    "start": "4434480",
    "end": "4441320"
  },
  {
    "text": "complexity-wise without destroying the rest of the type system and of the of the typescript language",
    "start": "4441320",
    "end": "4448159"
  },
  {
    "text": "without involving too many changes in a non-maintainable",
    "start": "4448159",
    "end": "4454000"
  },
  {
    "text": "uh way clearly i do need some help so if by all means if there is anyone interested in",
    "start": "4454000",
    "end": "4460560"
  },
  {
    "text": "exploring this stuff i can promise you it's gonna be hard i have almost no answer but it's gonna",
    "start": "4460560",
    "end": "4467280"
  },
  {
    "text": "also be fun so definitely reach out and we can cooperate and and take it further",
    "start": "4467280",
    "end": "4474480"
  },
  {
    "text": "from from there amazing this was incredible thanks so much michael and thanks so much for everyone",
    "start": "4474480",
    "end": "4480320"
  },
  {
    "text": "else uh tuning in we didn't get any any more follow-up questions here but if you",
    "start": "4480320",
    "end": "4485679"
  },
  {
    "text": "have any um please ask them in discord um thanks so much for preparing this mic",
    "start": "4485679",
    "end": "4491760"
  },
  {
    "text": "this was uh really really exciting i'm looking forward to seeing this um become available at some point",
    "start": "4491760",
    "end": "4498239"
  },
  {
    "text": "thank you everybody for for joining and for the for the good comments amazing awesome then i guess we wrap it",
    "start": "4498239",
    "end": "4505760"
  },
  {
    "text": "here thanks so much",
    "start": "4505760",
    "end": "4509400"
  },
  {
    "text": "you",
    "start": "4521600",
    "end": "4523679"
  }
]