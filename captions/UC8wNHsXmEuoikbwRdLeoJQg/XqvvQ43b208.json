[
  {
    "text": "Welcome back to our Reimagining ContentLayer stream.",
    "start": "4466",
    "end": "8466"
  },
  {
    "text": "So I did do a couple of things like off stream since the last time that we met.",
    "start": "11500",
    "end": "17533"
  },
  {
    "text": "I think the last time that we were chatting, we were talking about",
    "start": "18466",
    "end": "24066"
  },
  {
    "text": "the document type and adding computed fields and we had like a desired API,",
    "start": "24066",
    "end": "29366"
  },
  {
    "text": "but while we were on stream, couldn't quite figure out the types. So off stream, I",
    "start": "29366",
    "end": "35399"
  },
  {
    "text": "figured out like a nice way to kind of get the desired API we were looking for, I think.",
    "start": "35400",
    "end": "39966"
  },
  {
    "text": "And I ended up using a technique called reverse map types to do it. So we can take a look at that.",
    "start": "40699",
    "end": "46033"
  },
  {
    "text": "I also implemented some of the methods that were kind of just stubs just because I was there already,",
    "start": "46800",
    "end": "52433"
  },
  {
    "text": "cleaned up some of the types a little bit. So we'll walk through kind of all of that code.",
    "start": "52800",
    "end": "57166"
  },
  {
    "text": "And I also separated out the document source type into its own file,",
    "start": "57966",
    "end": "63933"
  },
  {
    "text": "just so that we could start to get a little bit more of like the structure of like the module",
    "start": "64333",
    "end": "70699"
  },
  {
    "text": "that we're building up here. So let me try and share my screen.",
    "start": "70699",
    "end": "75699"
  },
  {
    "text": "So I was telling Mike before we started the stream, I'm going to attempt to use my new NeoVim configs for this.",
    "start": "76000",
    "end": "81433"
  },
  {
    "text": "And if it starts to become cumbersome since I'm not used to all my key bindings yet,",
    "start": "81733",
    "end": "85433"
  },
  {
    "text": "then I'll swap out to VS code. But don't at me for using VS code.",
    "start": "86966",
    "end": "92199"
  },
  {
    "text": "If Dillon is on the call, he would enjoy it very much.",
    "start": "93300",
    "end": "98566"
  },
  {
    "text": "The thing is I stole a lot of Dillon's key bindings.",
    "start": "99000",
    "end": "103133"
  },
  {
    "text": "So it's his fault if you can't be productive. That's right. It's his fault. Okay.",
    "start": "104099",
    "end": "109299"
  },
  {
    "text": "Let me share. So yeah, let me, I guess start from the top here.",
    "start": "110066",
    "end": "115233"
  },
  {
    "text": "So we have two files in our file system. Now we've got the document file,",
    "start": "115466",
    "end": "122800"
  },
  {
    "text": "which was previously our, just like our plain index file. And then we have a source file.",
    "start": "122800",
    "end": "128533"
  },
  {
    "text": "And the source file is literally just like the stuff from the document source.",
    "start": "128733",
    "end": "134900"
  },
  {
    "text": "We can take a look at it. I guess we can take a look at it now.",
    "start": "134900",
    "end": "137033"
  },
  {
    "text": "This is literally just the stuff that was in the document source type before. I added a few type helpers",
    "start": "140400",
    "end": "145533"
  },
  {
    "text": "just to make like extracting, for example, like the meta from the document a little bit easier.",
    "start": "145533",
    "end": "150233"
  },
  {
    "text": "But basically all of this is pretty similar to what we had before for the document.",
    "start": "153199",
    "end": "158566"
  },
  {
    "text": "So we make these a union by the way, you know, stuff instead of a",
    "start": "158566",
    "end": "164166"
  },
  {
    "text": "I'm not sure. Where at the moment we only have a single source,",
    "start": "164699",
    "end": "170099"
  },
  {
    "text": "which is the file system source. Right. But at some point we",
    "start": "170099",
    "end": "175733"
  },
  {
    "text": "might have different sources. Shouldn't our source be a union of",
    "start": "175733",
    "end": "182966"
  },
  {
    "text": "supported sources or do you envision some kind of standard API that a source",
    "start": "182966",
    "end": "189133"
  },
  {
    "text": "would expose so that you can make custom sources?",
    "start": "189133",
    "end": "194900"
  },
  {
    "text": "It's rather easy to close the union or an open. Yeah, I think that it's, I'm not exactly sure what the desired API",
    "start": "195233",
    "end": "203500"
  },
  {
    "text": "for the source is going to look like yet. I think the reason why I chose an",
    "start": "203500",
    "end": "209133"
  },
  {
    "text": "interface for now was so that if like, if we wanted to have like external",
    "start": "209133",
    "end": "216633"
  },
  {
    "text": "packages provide different types of like source plugins, I feel like it potentially could be",
    "start": "216633",
    "end": "221666"
  },
  {
    "text": "easier to do it via an interface because then you don't have to add to like the union exposed by the module.",
    "start": "221666",
    "end": "228933"
  },
  {
    "text": "But we can talk about this more. For now, like really all we need the",
    "start": "229666",
    "end": "235099"
  },
  {
    "text": "source for is basically to expose the meta. So like it's pretty easy to swap this to a union if we decide that that's more of",
    "start": "235099",
    "end": "240900"
  },
  {
    "text": "like what we're looking for. But we can come back to this.",
    "start": "240900",
    "end": "246966"
  },
  {
    "text": "Like I think it's going to become relevant shortly. But for now, I kind of want to talk about",
    "start": "246966",
    "end": "252532"
  },
  {
    "text": "like the document type, if that's cool. And then we can always revisit the source.",
    "start": "252533",
    "end": "257933"
  },
  {
    "text": "Like once we have to start like implementing the actual functionality of it, if that works.",
    "start": "258300",
    "end": "265333"
  },
  {
    "text": "Yeah, absolutely. Cool. So, yeah, our document.",
    "start": "265566",
    "end": "270300"
  },
  {
    "text": "I've added like just a couple of comments to help things make sense for ourselves.",
    "start": "271833",
    "end": "277166"
  },
  {
    "text": "So similar to previous, our document has a name, a description,",
    "start": "278366",
    "end": "283966"
  },
  {
    "text": "the source and the fields. And then I've also added this computed",
    "start": "284533",
    "end": "290933"
  },
  {
    "text": "fields property to the document. And I think the computed fields are the",
    "start": "290933",
    "end": "304733"
  },
  {
    "text": "reason why the type looks like this, why we have kind of an array of arrays of computed fields is because I thought this",
    "start": "304733",
    "end": "310800"
  },
  {
    "text": "would make it really easy. Once the documents have actually been imported into the engine we're going to",
    "start": "310800",
    "end": "316500"
  },
  {
    "text": "build for content layer, we can really easily. With this data structure, kind of provide",
    "start": "316500",
    "end": "323500"
  },
  {
    "text": "the kind of desired API that we had in mind when we chatted last time. So just to refresh everyone's memory, the",
    "start": "323500",
    "end": "330000"
  },
  {
    "text": "idea was that when you're adding computed fields to a document, if you have",
    "start": "330000",
    "end": "336533"
  },
  {
    "text": "multiple computed fields that you want to resolve concurrently.",
    "start": "336533",
    "end": "341199"
  },
  {
    "text": "That don't depend on like each other, right? But like you don't need like a previously",
    "start": "341566",
    "end": "347333"
  },
  {
    "text": "computed field to resolve the current computed field. The desired API would be to like",
    "start": "347333",
    "end": "354233"
  },
  {
    "text": "basically call add computed fields and pass in all the fields that you want. So that would create kind of",
    "start": "354233",
    "end": "360099"
  },
  {
    "text": "a group of computed fields. And the fields within that group can be resolved concurrently.",
    "start": "360099",
    "end": "366766"
  },
  {
    "text": "But we also wanted to have the ability to specify like multiple groups of computed",
    "start": "366766",
    "end": "373033"
  },
  {
    "text": "fields for a document where the subsequent groups could rely on the",
    "start": "373033",
    "end": "381233"
  },
  {
    "text": "previous groups computed fields to basically implement their own functionality. So you can imagine like, I don't know.",
    "start": "381233",
    "end": "386533"
  },
  {
    "text": "The document has a title like kind of like the one we have at the bottom here, our post, right?",
    "start": "387566",
    "end": "393433"
  },
  {
    "text": "So this is kind of our example API, our post has a title. And then we want to use",
    "start": "393433",
    "end": "399199"
  },
  {
    "text": "the title to compute a slug. And then maybe we'd also want to have another computed fields here where I",
    "start": "399199",
    "end": "406198"
  },
  {
    "text": "don't know, we have a better slug When resolving the better slug, we might",
    "start": "406199",
    "end": "412900"
  },
  {
    "text": "want to have access to the previous slug in the fields of the resolver, right? So the idea here is that once you've got",
    "start": "412900",
    "end": "423033"
  },
  {
    "text": "a group of computed fields that you've added to a document, the.",
    "start": "423033",
    "end": "429933"
  },
  {
    "text": "The subsequent computed fields that you add now have access to the",
    "start": "430133",
    "end": "436633"
  },
  {
    "text": "previous group of computed fields. So, you know, you can keep adding properties here. And then in subsequent computed fields,",
    "start": "436633",
    "end": "442633"
  },
  {
    "text": "you'd have in the fields property access to the previously computed fields.",
    "start": "442633",
    "end": "447366"
  },
  {
    "text": "So. And the array of arrays, basically the",
    "start": "449199",
    "end": "454965"
  },
  {
    "text": "first array is going to be processed sequentially while the inner array is",
    "start": "454966",
    "end": "461300"
  },
  {
    "text": "going to be processed in parallel, I guess. Yeah. So basically I kind of just to keep us like our thought process and on track, I",
    "start": "461300",
    "end": "468166"
  },
  {
    "text": "sort of like sketched out. I mean, these comments might not be super clear yet, but the each sub array within",
    "start": "468166",
    "end": "475432"
  },
  {
    "text": "the parent array of computed fields is a group. And these groups are processed",
    "start": "475433",
    "end": "481666"
  },
  {
    "text": "sequentially the they're resolved in a sequential manner, but the fields within each group can be resolved concurrently.",
    "start": "481666",
    "end": "487866"
  },
  {
    "text": "And the first argument to a group's field. The first argument to a group's field",
    "start": "488733",
    "end": "494566"
  },
  {
    "text": "resolver will be the prior group's computed fields joined with the document",
    "start": "494566",
    "end": "500433"
  },
  {
    "text": "fields, meaning that like when you have a compute like we showed before the resolver gets access to all the",
    "start": "500433",
    "end": "505899"
  },
  {
    "text": "previously computed fields as well as the documents fields. And then the second argument is the",
    "start": "505899",
    "end": "511266"
  },
  {
    "text": "metadata provided by the document source. And. Yeah, so that's kind of like why I chose",
    "start": "511266",
    "end": "519932"
  },
  {
    "text": "this like very simple data structure. It allows us to easily like in the engine iterate through the parent array in a",
    "start": "519933",
    "end": "526032"
  },
  {
    "text": "sequential manner and then resolve the sub arrays computed fields in a concurrent fashion.",
    "start": "526033",
    "end": "530165"
  },
  {
    "text": "Which by the way is extremely similar to what we do, for example, with the",
    "start": "531199",
    "end": "536532"
  },
  {
    "text": "internal structure of request resolvers that we could botch over multiple",
    "start": "536533",
    "end": "543000"
  },
  {
    "text": "requests and we could also have some requests that have to happen sequentially",
    "start": "543000",
    "end": "550166"
  },
  {
    "text": "that the inner data structure is exactly is exactly the same. We have these two nested arrays to.",
    "start": "550166",
    "end": "558933"
  },
  {
    "text": "To isolate the things that have to happen sequentially from the things that can",
    "start": "559566",
    "end": "564933"
  },
  {
    "text": "happen in in parallel. That's nice. Yeah, so I figured we can go with this",
    "start": "564933",
    "end": "571500"
  },
  {
    "text": "and just sort of see how it works out. If it ends up like that we need to change something, whatever, we'll figure it out",
    "start": "571500",
    "end": "577399"
  },
  {
    "text": "then. But this seems like the right choice for now. So now we can talk about a little bit of",
    "start": "577399",
    "end": "586433"
  },
  {
    "text": "like what I did to implement this and maybe Mike can roast my my TypeScript who here.",
    "start": "586433",
    "end": "591733"
  },
  {
    "text": "But I tried to I in thinking about how to",
    "start": "592699",
    "end": "599266"
  },
  {
    "text": "implement add computed fields. I realized that we really only need access to",
    "start": "599266",
    "end": "606032"
  },
  {
    "text": "The schema type for the resolver when we're like trying to figure out the types",
    "start": "607899",
    "end": "613533"
  },
  {
    "text": "right because the schema type for computed field the schema type for computed field dictates like what the",
    "start": "613533",
    "end": "619665"
  },
  {
    "text": "return type of the resolver is going to be. So using that information.",
    "start": "619666",
    "end": "625166"
  },
  {
    "text": "We can basically figure out what the structure of the computed fields should",
    "start": "626199",
    "end": "631665"
  },
  {
    "text": "be. So let me maybe like walk you through this type really quick and we can talk",
    "start": "631666",
    "end": "637466"
  },
  {
    "text": "about it so add computed fields takes in this generic right and again I'm using a",
    "start": "637466",
    "end": "643966"
  },
  {
    "text": "technique called reverse map types. I think Mateusz, I think has done a lot of like",
    "start": "643966",
    "end": "651600"
  },
  {
    "text": "advocacy for reverse map types if I'm not mistaken. Maybe I'm the fuck that this works is",
    "start": "651600",
    "end": "657733"
  },
  {
    "text": "actually thanks to him. Yeah, so for the sake of who doesn't know",
    "start": "657733",
    "end": "663365"
  },
  {
    "text": "Matéusz, his username on Twitter is AndaristRake and he's a very active contributor of TypeScript.",
    "start": "663366",
    "end": "671199"
  },
  {
    "text": "Also, it's just very nice. He's also helping us in some of the most tedious TypeScript issues we had.",
    "start": "671933",
    "end": "679165"
  },
  {
    "text": "Yeah, just a great, great person. Very nice. Like it's like such a nice human and like very patient also helped",
    "start": "679800",
    "end": "687033"
  },
  {
    "text": "me with implementing some of the basic functionality for the Effect Playground",
    "start": "687033",
    "end": "693066"
  },
  {
    "text": "when we were first starting to work on it. So shout out to Matéusz. But essentially here in this generic",
    "start": "693066",
    "end": "701699"
  },
  {
    "text": "we're saying that we have a bunch of computed field schemas, right? So not computed fields, but this is actually",
    "start": "701699",
    "end": "708666"
  },
  {
    "text": "extending a record of string and any schema, which is kind of strange if you",
    "start": "708666",
    "end": "714666"
  },
  {
    "text": "think about it because the idea is that we're taking in an object of computed fields, but really the only information",
    "start": "714666",
    "end": "721100"
  },
  {
    "text": "that we need in the generic is actually the schema. And then we can derive in using the",
    "start": "721100",
    "end": "728466"
  },
  {
    "text": "technique of reverse map types. We can derive the rest of the information about the computed field from the schema. So in",
    "start": "728466",
    "end": "735733"
  },
  {
    "text": "the generic here, we're taking in a record of string to schema where the",
    "start": "735733",
    "end": "740899"
  },
  {
    "text": "string is going to be the name of the computed field and the schema is going to",
    "start": "740899",
    "end": "746066"
  },
  {
    "text": "be like the resolver schema type. And then",
    "start": "746066",
    "end": "750566"
  },
  {
    "text": "I implemented this kind of has duplicate keys type to",
    "start": "751633",
    "end": "756166"
  },
  {
    "text": "basically check to make sure that the computed fields that we're passing in",
    "start": "757633",
    "end": "762766"
  },
  {
    "text": "does not have any fields that will conflict with the fields that already exist in the document. And since we're",
    "start": "762766",
    "end": "770032"
  },
  {
    "text": "always merging the computed fields into the fields like you're building out this by the way, Dillon is raiding us with 75",
    "start": "770033",
    "end": "777899"
  },
  {
    "text": "people. So we're going to end right across here. Great. Thanks for the raiding, Dillon.",
    "start": "777899",
    "end": "784166"
  },
  {
    "text": "So with this like has duplicate keys type, we get the benefit of using",
    "start": "786033",
    "end": "792266"
  },
  {
    "text": "TypeScript to help us prevent field collisions at the type level. So I'll",
    "start": "792266",
    "end": "797300"
  },
  {
    "text": "show like how that works in a second. But the has duplicate keys type is pretty simple. And again, like Mike, feel free",
    "start": "797300",
    "end": "804466"
  },
  {
    "text": "to roast my TypeScript at any point in time. But basically just checking if the",
    "start": "804466",
    "end": "810332"
  },
  {
    "text": "keys of the T type here intersect the keys of U.",
    "start": "810333",
    "end": "815433"
  },
  {
    "text": "And if they do returning true, if they don't, I return false. And then in our fields here, if has duplicate keys",
    "start": "815633",
    "end": "823133"
  },
  {
    "text": "extends true, we return this kind of like pseudo error type thingy.",
    "start": "823133",
    "end": "829500"
  },
  {
    "text": "Which again, I'll show how that works in a second. But that error will not be on the key,",
    "start": "830633",
    "end": "837166"
  },
  {
    "text": "though, it actually does work.",
    "start": "837166",
    "end": "841300"
  },
  {
    "text": "So.",
    "start": "843000",
    "end": "843666"
  },
  {
    "text": "Hang on. Let me just.",
    "start": "848800",
    "end": "853899"
  },
  {
    "text": "Let me actually do this. So you see that we actually all by the",
    "start": "857833",
    "end": "867566"
  },
  {
    "text": "way, I'm using Dillon's extension for pretty types in the oven or pretty TypeScript error translations in the oven.",
    "start": "867566",
    "end": "873665"
  },
  {
    "text": "But it's we actually do get the error on the key here, which is nice.",
    "start": "875233",
    "end": "880066"
  },
  {
    "text": "No, we don't. It says you can't assign an",
    "start": "880633",
    "end": "886899"
  },
  {
    "text": "object with a slug over T2. And pass properties like to an array of",
    "start": "886899",
    "end": "892633"
  },
  {
    "text": "that's not on the key. So if you have multiple keys, it's going to show all.",
    "start": "892633",
    "end": "898366"
  },
  {
    "text": "See.",
    "start": "899833",
    "end": "900000"
  },
  {
    "text": "You're right. Actually doesn't even show an error. Interesting. See,",
    "start": "906033",
    "end": "911333"
  },
  {
    "text": "this is not any better than what we had last time. All right. Well, like already roasting my",
    "start": "911333",
    "end": "917766"
  },
  {
    "text": "my TypeScript through here. But we can figure out the duplicate key check in a minute.",
    "start": "917766",
    "end": "925100"
  },
  {
    "text": "I want to show at least how we're computing the computed field type. So basically just.",
    "start": "926199",
    "end": "933800"
  },
  {
    "text": "Creating a math type over the over the keys of this record.",
    "start": "934833",
    "end": "941500"
  },
  {
    "text": "And then passing. So in the computed field type, which is",
    "start": "942933",
    "end": "948199"
  },
  {
    "text": "down here, we've taken the fields, the resolver schema and the source meta in",
    "start": "948199",
    "end": "953399"
  },
  {
    "text": "order to actually build up our computed field. And so if we look here, we're just",
    "start": "953399",
    "end": "959266"
  },
  {
    "text": "passing in the fields of the document as the previous fields for the computed field. This will eventually get past the",
    "start": "959266",
    "end": "965266"
  },
  {
    "text": "resolver, which is why we have access to it. Here we just index our",
    "start": "965266",
    "end": "970800"
  },
  {
    "text": "record to extract out the schema. And then we also just grab the source meta from the document source, which is",
    "start": "970800",
    "end": "977866"
  },
  {
    "text": "being passed in here. So what's nice here is even though our duplicate key check might need a tiny bit",
    "start": "977866",
    "end": "983866"
  },
  {
    "text": "of work, which I'm sure Mike can help us with. The nice thing is that",
    "start": "983866",
    "end": "989600"
  },
  {
    "text": "if I just call this who. The nice thing is that now our fields do",
    "start": "989600",
    "end": "995899"
  },
  {
    "text": "indeed get access to the previous computed fields as well as the documents fields.",
    "start": "995899",
    "end": "1000699"
  },
  {
    "text": "And we can enforce the return type of our resolver based on the",
    "start": "1001733",
    "end": "1006800"
  },
  {
    "text": "schema that's coming in. So if I change this to, for example, a number.",
    "start": "1006800",
    "end": "1011600"
  },
  {
    "text": "We see that we can basically use that",
    "start": "1012633",
    "end": "1022766"
  },
  {
    "text": "schema to enforce the return type. So I think, I mean, feel free to roast me",
    "start": "1022766",
    "end": "1029565"
  },
  {
    "text": "on this, but I'm pretty sure I at least solved the problem of like the computed field itself.",
    "start": "1029566",
    "end": "1036766"
  },
  {
    "text": "But we just need to figure out the duplicate key check.  Well, not to roast you, bacause I don't wanna be roasting",
    "start": "1036766",
    "end": "1046666"
  },
  {
    "text": "I'm asking you to I think it has to be rewritten from scratch because it's not going to work.",
    "start": "1046666",
    "end": "1054366"
  },
  {
    "text": "Nothing that would not with a reverse map type. All right. Why not? It has to be an intersection.",
    "start": "1054600",
    "end": "1060000"
  },
  {
    "text": "Okay. But I am calling the repository.",
    "start": "1061166",
    "end": "1066000"
  },
  {
    "text": "So we'll see if you can roast me. While Mike is doing this, the only other",
    "start": "1066833",
    "end": "1077399"
  },
  {
    "text": "thing I added in terms of like type helpers, as I just added this like type helper that merges",
    "start": "1077399",
    "end": "1083299"
  },
  {
    "text": "fields with computed fields. So this way in the return type of our",
    "start": "1083300",
    "end": "1090300"
  },
  {
    "text": "document, we can merge the field schemas or the fields themselves with the",
    "start": "1090300",
    "end": "1096399"
  },
  {
    "text": "computed fields in a little bit of an easier way.",
    "start": "1096399",
    "end": "1099800"
  },
  {
    "text": "And then what else did I add? So like I said, I kind of tried to sketch",
    "start": "1102933",
    "end": "1110000"
  },
  {
    "text": "out some of the stubs for that we had previously where we weren't really implementing anything.",
    "start": "1110000",
    "end": "1114632"
  },
  {
    "text": "We were doing everything at the type level before. So I added this like make internal",
    "start": "1115633",
    "end": "1121100"
  },
  {
    "text": "constructor, which essentially just uses the prototype here that we've created for",
    "start": "1121100",
    "end": "1129000"
  },
  {
    "text": "our document creates an object with that prototype and then assigns all the fields that we want to that object.",
    "start": "1129000",
    "end": "1135833"
  },
  {
    "text": "And the reason why I have like a separate constructor here is because we can use it both in the add computed fields on our",
    "start": "1137633",
    "end": "1145398"
  },
  {
    "text": "prototype as well as in the make constructor for our document because",
    "start": "1145399",
    "end": "1150800"
  },
  {
    "text": "as we've shown before, like the make constructor can't take in computed fields. We need to add",
    "start": "1151633",
    "end": "1157466"
  },
  {
    "text": "it as a separate method. Yeah, I think that's pretty much all I",
    "start": "1157466",
    "end": "1163833"
  },
  {
    "text": "added since the last time we spoke. Yeah.",
    "start": "1163833",
    "end": "1169000"
  },
  {
    "text": "So. Just checking if there was anything else",
    "start": "1172133",
    "end": "1177866"
  },
  {
    "text": "so that everybody's like on the same page as us. I think that was it. Yeah, there hasn't been many changes. I",
    "start": "1177866",
    "end": "1186533"
  },
  {
    "text": "was checking the commits. It seems like that was it. I mean, there's a wrong",
    "start": "1186533",
    "end": "1196699"
  },
  {
    "text": "commit message that says fix up types for add computed fields. Whatever.",
    "start": "1196699",
    "end": "1201600"
  },
  {
    "text": "Whatever.",
    "start": "1203233",
    "end": "1203566"
  },
  {
    "text": "So yeah, I don't know. I'm roasting you but it's highly probable that I can also don't",
    "start": "1209566",
    "end": "1215533"
  },
  {
    "text": "I can't do that too. Yeah, I mean, I don't know if you want me",
    "start": "1215533",
    "end": "1221100"
  },
  {
    "text": "to or if you want to take ownership of the screen for a moment and see if we can",
    "start": "1221100",
    "end": "1226398"
  },
  {
    "text": "figure out the duplicate key check. But",
    "start": "1226399",
    "end": "1230399"
  },
  {
    "text": "yeah, I feel like at least for the computed field itself, this is working nicely. And if we look at like our mock",
    "start": "1232100",
    "end": "1240799"
  },
  {
    "text": "document here that we're building up. We do get like kind of the nice signature",
    "start": "1240800",
    "end": "1246199"
  },
  {
    "text": "that we were looking for where we can see the fields of the document that'll be present when we actually like put it",
    "start": "1246199",
    "end": "1252466"
  },
  {
    "text": "through the engine as well as the source that this document is going to use. So at least like we're",
    "start": "1252466",
    "end": "1260666"
  },
  {
    "text": "almost there on a type level.",
    "start": "1260666",
    "end": "1262000"
  },
  {
    "text": "Yeah, I don't think I don't think we had any other like from what I remember",
    "start": "1266500",
    "end": "1271699"
  },
  {
    "text": "discussing last time. I don't think we had any other goals on the type level for the document.",
    "start": "1271699",
    "end": "1275565"
  },
  {
    "text": "Yeah, let me let me try to take over the screen then Now, Dillon, note that we've just switched",
    "start": "1277633",
    "end": "1284933"
  },
  {
    "text": "to a proper IDE. Not that thing that Maxwell has.",
    "start": "1284933",
    "end": "1289466"
  },
  {
    "text": "So what's the idea here? Okay.",
    "start": "1293199",
    "end": "1298299"
  },
  {
    "text": "Merge computed fields.",
    "start": "1301600",
    "end": "1303199"
  },
  {
    "text": "Let's start with",
    "start": "1307500",
    "end": "1311133"
  },
  {
    "text": "removing everything which sounds like a good thing.",
    "start": "1316199",
    "end": "1321300"
  },
  {
    "text": "Use it. Taking all my hard work, throwing it out the window.",
    "start": "1323433",
    "end": "1328466"
  },
  {
    "text": "No, no, that that was not the I'll probably re-add it bit by bit",
    "start": "1328466",
    "end": "1336633"
  },
  {
    "text": "But the issue is if I don't start progressively. I'm also lacking understanding.",
    "start": "1336633",
    "end": "1341833"
  },
  {
    "text": "Understanding of the dynamics. So first of all, what's the shape that we have to respect?",
    "start": "1344933",
    "end": "1350899"
  },
  {
    "text": "So we have to have a record of string. Are we",
    "start": "1352033",
    "end": "1357632"
  },
  {
    "text": "allowing only string keys? In general, It's probably reasonable. At least to",
    "start": "1357633",
    "end": "1365033"
  },
  {
    "text": "start with, we could we could use property like a property key. But I feel like if we're saying that this is going",
    "start": "1365033",
    "end": "1370433"
  },
  {
    "text": "to be coming from like, you know, markdown files and other things. It probably just makes more sense.",
    "start": "1370433",
    "end": "1375399"
  },
  {
    "text": "Yeah, that's that's true. And what's the shape of the thing that we",
    "start": "1376300",
    "end": "1381933"
  },
  {
    "text": "have to respect. I guess it's the same shape of",
    "start": "1381933",
    "end": "1386000"
  },
  {
    "text": "this structure structured fields. Is it this?",
    "start": "1388199",
    "end": "1393566"
  },
  {
    "text": "Well, it depends on what you're saying. Like if we're saying that the like the shape of the computed field, then it's",
    "start": "1394766",
    "end": "1402233"
  },
  {
    "text": "really a description, a schema and a resolve function.",
    "start": "1402233",
    "end": "1406666"
  },
  {
    "text": "Do we have a type already for this? Yeah, there's a computed field and then there's an any computed field.",
    "start": "1407766",
    "end": "1413899"
  },
  {
    "text": "OK, that's the any computed field. But I should also have I mean, I should specify",
    "start": "1414566",
    "end": "1421433"
  },
  {
    "text": "the type to have the fields inferred. So I don't I don't think I can use the any computed field.",
    "start": "1421433",
    "end": "1428733"
  },
  {
    "text": "Because if I use the any computed field, I will I will lose the",
    "start": "1429766",
    "end": "1435333"
  },
  {
    "text": "inference on the generics. Probably. So I have to at least specify.",
    "start": "1435333",
    "end": "1440733"
  },
  {
    "text": "There's the there's if you want the computed field itself and you can use document dot computed field and we can",
    "start": "1442266",
    "end": "1448100"
  },
  {
    "text": "fill in the generics. So that's document dot computed field",
    "start": "1448100",
    "end": "1452500"
  },
  {
    "text": "And feel the source matter. Where are we getting source matter?",
    "start": "1453800",
    "end": "1459233"
  },
  {
    "text": "So fields, if we look at the computed field type for a moment, the the fields are like the existing fields on the",
    "start": "1459933",
    "end": "1466233"
  },
  {
    "text": "document, like the things that get passed as the first argument to the resolver. So you can actually first of",
    "start": "1466233",
    "end": "1471600"
  },
  {
    "text": "all, we have the fields. Yeah. Yeah, fields. The second argument is the resolver schema, which is a property",
    "start": "1471600",
    "end": "1478833"
  },
  {
    "text": "that's on the computed field. So for now, you might just want to put any further. And then the third argument is the source",
    "start": "1478833",
    "end": "1484699"
  },
  {
    "text": "meta. So you can actually do source dot source dot meta.",
    "start": "1484699",
    "end": "1488199"
  },
  {
    "text": "And that. Yep. And then pass in the source on the document.",
    "start": "1490133",
    "end": "1492833"
  },
  {
    "text": "Literally just source again. Yep. That's the thing. Are we getting OK?",
    "start": "1495266",
    "end": "1502600"
  },
  {
    "text": "So it's not here because I'm not returning the merged fields yet, which is fine. But point being is here. I do have",
    "start": "1505833",
    "end": "1513699"
  },
  {
    "text": "I do have the fields. Now, basically, my only objective here is to I want to get",
    "start": "1513699",
    "end": "1520699"
  },
  {
    "text": "an error if I have a property which is also in the.",
    "start": "1520699",
    "end": "1525733"
  },
  {
    "text": "OK. Yeah, I think that's the first objective. The first objective is to get",
    "start": "1526766",
    "end": "1532132"
  },
  {
    "text": "an error if you have a property that exists, if you're specifying a property that already exists in fields.",
    "start": "1532133",
    "end": "1538733"
  },
  {
    "text": "Yeah, you can even probably call it like exclude duplicate field or something like that or exclude duplicate property,",
    "start": "1546433",
    "end": "1551632"
  },
  {
    "text": "whatever. Doesn't matter. The. This is the first like.",
    "start": "1551633",
    "end": "1558533"
  },
  {
    "text": "This is the first goal.",
    "start": "1561699",
    "end": "1562733"
  },
  {
    "text": "OK.",
    "start": "1567166",
    "end": "1568966"
  },
  {
    "text": "So here the first thing is to map over",
    "start": "1580199",
    "end": "1585799"
  },
  {
    "text": "the keys of compute it. And.",
    "start": "1585800",
    "end": "1589732"
  },
  {
    "text": "And.",
    "start": "1590933",
    "end": "1591433"
  },
  {
    "text": "This is the good case. In this case, I'm still getting.",
    "start": "1596233",
    "end": "1602666"
  },
  {
    "text": "So getting everything that is fine. Now, here I can say.",
    "start": "1605966",
    "end": "1611033"
  },
  {
    "text": "does K extends Key off fields.",
    "start": "1612399",
    "end": "1618633"
  },
  {
    "text": "If so, I have. I don't want this",
    "start": "1620100",
    "end": "1625666"
  },
  {
    "text": "This reminds me of like all the commit messages when we were hacking on all the",
    "start": "1626766",
    "end": "1632398"
  },
  {
    "text": "fiber runtime reworks. Just like.",
    "start": "1632399",
    "end": "1635633"
  },
  {
    "text": "I think that the problem here in the first computed fields you'd need to put title or something that exists on the",
    "start": "1647800",
    "end": "1653633"
  },
  {
    "text": "document because in the second computer fields are not merging them yet. So it doesn't care that slug is there twice.",
    "start": "1653633",
    "end": "1658966"
  },
  {
    "text": "Oh yeah. Yeah. That is true. Yes. Indeed, too. If you could.",
    "start": "1660233",
    "end": "1665699"
  },
  {
    "text": "I call this title. And we can probably even make the error",
    "start": "1666000",
    "end": "1674100"
  },
  {
    "text": "message nicer than the one that I had now because we can. I don't know if this is allowed in TypeScript, but we might be able to do.",
    "start": "1674100",
    "end": "1681300"
  },
  {
    "text": "First of all, I want to see if this works over multiple properties as this was the initial.",
    "start": "1682133",
    "end": "1687033"
  },
  {
    "text": "You see, we still get an error here, which is positive.",
    "start": "1688666",
    "end": "1692199"
  },
  {
    "text": "Yeah, that's nice. what is the second property I have on the document because we could we",
    "start": "1694300",
    "end": "1699500"
  },
  {
    "text": "could also probably see if we get two errors if we specify another duplicate property. Would that work or would it",
    "start": "1699500",
    "end": "1704733"
  },
  {
    "text": "only around the first? No, it should.",
    "start": "1704733",
    "end": "1709600"
  },
  {
    "text": "It should. Yeah. Yeah. I resemble.",
    "start": "1710033",
    "end": "1714833"
  },
  {
    "text": "Really nice. The expected that comes from the order, which is declared on type.",
    "start": "1716433",
    "end": "1721732"
  },
  {
    "text": "Now we can do something better. I can say that.",
    "start": "1722766",
    "end": "1728933"
  },
  {
    "text": "Property. K",
    "start": "1730300",
    "end": "1733600"
  },
  {
    "text": "And string. Property K.",
    "start": "1741766",
    "end": "1745600"
  },
  {
    "text": "Already exists. Now you're going to improve the error messages, of course, but.",
    "start": "1747966",
    "end": "1754800"
  },
  {
    "text": "Where do I get this property title already exists. Very nice.",
    "start": "1757533",
    "end": "1761398"
  },
  {
    "text": "Wonder if there is a better place that I can show these error because this.",
    "start": "1764500",
    "end": "1768533"
  },
  {
    "text": "This type is a bit. Is a bit awful.",
    "start": "1770766",
    "end": "1774366"
  },
  {
    "text": "This is going to be a never.",
    "start": "1790133",
    "end": "1793166"
  },
  {
    "text": "So if I show it on the property, I'm going to see that these these object type is not assignable.",
    "start": "1806633",
    "end": "1814233"
  },
  {
    "text": "Yeah. And I already think this is pretty nice that you get like a very scoped down",
    "start": "1817600",
    "end": "1824000"
  },
  {
    "text": "error message, but obviously if we can make it better.",
    "start": "1824000",
    "end": "1827000"
  },
  {
    "text": "Yeah, I guess these on the on the description, though, it's not. I think having the error right on the key",
    "start": "1839533",
    "end": "1844899"
  },
  {
    "text": "is nice, even though the like type script error message might be a little bit.",
    "start": "1844899",
    "end": "1849466"
  },
  {
    "text": "Like not ideal like the verbosity, but having it right on the key is definitely what we want.",
    "start": "1854666",
    "end": "1860833"
  },
  {
    "text": "Okay, let's go for this. And now we just have to merge.",
    "start": "1862899",
    "end": "1868000"
  },
  {
    "text": "Merge this stuff. So let's say that here I was like.",
    "start": "1869433",
    "end": "1877033"
  },
  {
    "text": "Here, let me just copy it. So the second one should error.",
    "start": "1882766",
    "end": "1886833"
  },
  {
    "text": "What's the shape of the fields. It's a barebone generic.",
    "start": "1888766",
    "end": "1894500"
  },
  {
    "text": "The shape of the fields is just the resolved thing",
    "start": "1896333",
    "end": "1899766"
  },
  {
    "text": "So I could take the key. And.",
    "start": "1901899",
    "end": "1906100"
  },
  {
    "text": "The type of the schema, I guess.",
    "start": "1909000",
    "end": "1910633"
  },
  {
    "text": "Yes. Yes. Yeah, because when we when we merge the",
    "start": "1916300",
    "end": "1921600"
  },
  {
    "text": "fields, it really is just like the yeah, exactly the name and then the schema.",
    "start": "1921600",
    "end": "1926733"
  },
  {
    "text": "And here I want to get schema dot schema dot. Type.",
    "start": "1929300",
    "end": "1934666"
  },
  {
    "text": "Of. Computed. K Over the schema.",
    "start": "1937300",
    "end": "1943898"
  },
  {
    "text": "And I want this prettyfied. schema dot",
    "start": "1945833",
    "end": "1949399"
  },
  {
    "text": "How was it too pretty. Oh God.",
    "start": "1951399",
    "end": "1956666"
  },
  {
    "text": "Simplify. Yes.",
    "start": "1962733",
    "end": "1966066"
  },
  {
    "text": "Okay, these errors exactly in the right place.",
    "start": "1972066",
    "end": "1976833"
  },
  {
    "text": "Plus. These types seems to be seems to be fine",
    "start": "1979833",
    "end": "1986399"
  },
  {
    "text": "except I have to read only. Yeah, this is nice.",
    "start": "1986399",
    "end": "1990898"
  },
  {
    "text": "And I think Mike I have a type help called merge computed field.",
    "start": "1991466",
    "end": "1997065"
  },
  {
    "text": "Yeah, but that was due. There was. Oh, that was. Yeah, that was taking the yeah",
    "start": "1998133",
    "end": "2003033"
  },
  {
    "text": "I think I have to. And we erase. All my beautiful hard work.",
    "start": "2003233",
    "end": "2008766"
  },
  {
    "text": "So there is one additional thing that we want to solve here.",
    "start": "2010766",
    "end": "2015066"
  },
  {
    "text": "What? So if you scroll down to the document, my approach also gave a type error.",
    "start": "2016000",
    "end": "2021833"
  },
  {
    "text": "If you return a value from the resolver",
    "start": "2022266",
    "end": "2027833"
  },
  {
    "text": "that doesn't match the schema. So here I should like return.",
    "start": "2027833",
    "end": "2035500"
  },
  {
    "text": "I return. How do I get this to work and why this",
    "start": "2035766",
    "end": "2048633"
  },
  {
    "text": "doesn't work first of all. So.",
    "start": "2048633",
    "end": "2052699"
  },
  {
    "text": "The reason that this doesn't work is quite simple. It's because there's no link.",
    "start": "2058733",
    "end": "2064732"
  },
  {
    "text": "Between the resolved function.",
    "start": "2066199",
    "end": "2068633"
  },
  {
    "text": "Why is this not erroring?",
    "start": "2090266",
    "end": "2093266"
  },
  {
    "text": "How did you make it error? Do I was able to because I",
    "start": "2110566",
    "end": "2117433"
  },
  {
    "text": "was using the reverse map type. I had the schema type in the generic.",
    "start": "2117433",
    "end": "2122600"
  },
  {
    "text": "So I just used the schema. Like from the generic. I think right now we're passing any in.",
    "start": "2123000",
    "end": "2127733"
  },
  {
    "text": "In the computed field. Again, the construct in the.",
    "start": "2129266",
    "end": "2133199"
  },
  {
    "text": "Add what we call it in the generic of add computed fields right now we have a.",
    "start": "2134333",
    "end": "2138533"
  },
  {
    "text": "Computer field of any but it should.",
    "start": "2139366",
    "end": "2140699"
  },
  {
    "text": "I think that might be the problem. But it should like. It should give us the schema in the generic right.",
    "start": "2146566",
    "end": "2153399"
  },
  {
    "text": "And me just do something horrendous.",
    "start": "2155766",
    "end": "2157833"
  },
  {
    "text": "So this any is. Basically computed K schema.",
    "start": "2173933",
    "end": "2180766"
  },
  {
    "text": "Is it the schema type or is it the it's the schema type. Okay, so I should not.",
    "start": "2185133",
    "end": "2192533"
  },
  {
    "text": "The only nice thing that that was the only nice thing. With the approach that I was using is",
    "start": "2207100",
    "end": "2213800"
  },
  {
    "text": "that the error happened like on the return type instead of on the resolved property.",
    "start": "2213800",
    "end": "2218500"
  },
  {
    "text": "But that's not a huge deal. I don't think.",
    "start": "2218833",
    "end": "2223433"
  },
  {
    "text": "In the exclude duplicate I can add another condition just straight here.",
    "start": "2225000",
    "end": "2231300"
  },
  {
    "text": "I say that the chat says that you take pleasure in deleting my code. Yes, I take a lot of",
    "start": "2231833",
    "end": "2237733"
  },
  {
    "text": "pleasure deleting your code Sure. Message is yes.",
    "start": "2237733",
    "end": "2243399"
  },
  {
    "text": "I take pleasure generally in the leading code every good developer takes pleasure in deleting code.",
    "start": "2246000",
    "end": "2251866"
  },
  {
    "text": "That's fair. That is fair.",
    "start": "2252266",
    "end": "2253500"
  },
  {
    "text": "Okay, it might be too hard to do in a single.",
    "start": "2274033",
    "end": "2275833"
  },
  {
    "text": "And this isn't bad like we still have the error on the resolve function. It's just that.",
    "start": "2280100",
    "end": "2284533"
  },
  {
    "text": "It was nice having like the way that I wrote the type before use the error type",
    "start": "2285533",
    "end": "2292300"
  },
  {
    "text": "was basically it was exactly that it was just happening on the return type. But I think that's still a pretty nice error to get.",
    "start": "2292300",
    "end": "2297432"
  },
  {
    "text": "Okay, it has to happen on the return type. It doesn't have to. We still get the",
    "start": "2297766",
    "end": "2303699"
  },
  {
    "text": "nicely scoped down error. Like I don't think this is an issue. It's just more of like if we're really",
    "start": "2303699",
    "end": "2310166"
  },
  {
    "text": "shooting for like the best DX ever like in an ideal world that",
    "start": "2310166",
    "end": "2316633"
  },
  {
    "text": "would be what we see. I mean it doesn't hurt to try.",
    "start": "2316633",
    "end": "2321899"
  },
  {
    "text": "Yeah, why not?",
    "start": "2323033",
    "end": "2323533"
  },
  {
    "text": "How did I get the source meta? It's source dot source dot meta source.",
    "start": "2330833",
    "end": "2336800"
  },
  {
    "text": "Source dot source of meta source and here it's computed.",
    "start": "2339300",
    "end": "2344299"
  },
  {
    "text": "Okay. Schema. I mean this is",
    "start": "2345766",
    "end": "2358166"
  },
  {
    "text": "probably on the return type. It's just that you have.",
    "start": "2358166",
    "end": "2361199"
  },
  {
    "text": "It's definitely on the return type. It's just that when what I was saying before is that the squiggly is we're",
    "start": "2364000",
    "end": "2370466"
  },
  {
    "text": "occurring on the the diagnostic message was occurring on the return type.",
    "start": "2370466",
    "end": "2375766"
  },
  {
    "text": "The red squiggle the red squiggle. I wonder why. Yeah, I don't know.",
    "start": "2376800",
    "end": "2382466"
  },
  {
    "text": "Let me let me let me actually verify that on my side before I like keep having you go down this path.",
    "start": "2383433",
    "end": "2388932"
  },
  {
    "text": "I'm pretty sure it was correct but. Yeah, I got.",
    "start": "2388933",
    "end": "2393500"
  },
  {
    "text": "What does the LSP say type effect number never never is not assignable to effect",
    "start": "2394666",
    "end": "2400399"
  },
  {
    "text": "string never never with. Yeah. So for me. The yeah, which is exactly",
    "start": "2400399",
    "end": "2406600"
  },
  {
    "text": "what I get at the at the last. Yeah, but the squiggly is occur on the return type.",
    "start": "2406600",
    "end": "2412799"
  },
  {
    "text": "It's not like the I think the what I'm saying is the LSP gives us more scopes down message.",
    "start": "2412800",
    "end": "2418633"
  },
  {
    "text": "Like if you hover resolve again. I wonder if this is true in VS code.",
    "start": "2419666",
    "end": "2425233"
  },
  {
    "text": "Maybe the new of them LSP although it does use TS server so.",
    "start": "2429733",
    "end": "2433399"
  },
  {
    "text": "But maybe your your extension for nice nice errors.",
    "start": "2435266",
    "end": "2439600"
  },
  {
    "text": "Let me push this first. Then. Roll back.",
    "start": "2440733",
    "end": "2446000"
  },
  {
    "text": "I wonder if there's a way to combine your extend duplicate check with my reverse map types.",
    "start": "2447399",
    "end": "2454000"
  },
  {
    "text": "Probably. I'm actually going to do that while you do this.",
    "start": "2454766",
    "end": "2458766"
  },
  {
    "text": "So you say basically here I say 100. Yes.",
    "start": "2473166",
    "end": "2477132"
  },
  {
    "text": "This is odd. You see how much like shorter and nicer the type ends up being it's weird. I wonder if we can use the logic that you",
    "start": "2478566",
    "end": "2486533"
  },
  {
    "text": "wrote for extend duplicates  with my logic for using the reverse map type.",
    "start": "2486533",
    "end": "2493833"
  },
  {
    "text": "And still get this the benefit of both.",
    "start": "2494533",
    "end": "2498033"
  },
  {
    "text": "Possible but now I will stop sharing so you can restart.",
    "start": "2500633",
    "end": "2507033"
  },
  {
    "text": "Before I pull down the changes. I wonder if there's a way.",
    "start": "2509033",
    "end": "2516233"
  },
  {
    "text": "That we can. Essentially do what you're doing with exclude duplicates.",
    "start": "2519899",
    "end": "2524465"
  },
  {
    "text": "I want to try something.",
    "start": "2547466",
    "end": "2548966"
  },
  {
    "text": "So you did. The name in key of.",
    "start": "2554300",
    "end": "2559133"
  },
  {
    "text": "computed field schemas.",
    "start": "2560733",
    "end": "2562632"
  },
  {
    "text": "Then you did.",
    "start": "2566399",
    "end": "2570733"
  },
  {
    "text": "key of No I mean the name extends key of fields.",
    "start": "2573066",
    "end": "2581300"
  },
  {
    "text": "Which means it's already present in the key. Right.",
    "start": "2583266",
    "end": "2586733"
  },
  {
    "text": "You don't need the array. Okay I'm sorry.",
    "start": "2591600",
    "end": "2595566"
  },
  {
    "text": "No one help me. That's what happens when",
    "start": "2598466",
    "end": "2604333"
  },
  {
    "text": "you don't use a proper IDE",
    "start": "2604333",
    "end": "2605466"
  },
  {
    "text": "Error. I'm just going to put error for now. You gotta use a",
    "start": "2611866",
    "end": "2616899"
  },
  {
    "text": "template leader a lot of ways. Okay.",
    "start": "2616899",
    "end": "2621166"
  },
  {
    "text": "This is going on YouTube. I'm gonna be roasted.",
    "start": "2622100",
    "end": "2625132"
  },
  {
    "text": "Okay here.",
    "start": "2630033",
    "end": "2633833"
  },
  {
    "text": "Let me take something to drink And then.",
    "start": "2635500",
    "end": "2640366"
  },
  {
    "text": "If we're okay we do computed field.",
    "start": "2641733",
    "end": "2644199"
  },
  {
    "text": "Fields. The computed field schemas.",
    "start": "2652633",
    "end": "2658466"
  },
  {
    "text": "The computed field schema is named not satisfy constraint any.",
    "start": "2689333",
    "end": "2692466"
  },
  {
    "text": "I think you need to use a base type on the computed field schema.",
    "start": "2698133",
    "end": "2702265"
  },
  {
    "text": "Because this is a bare bone generic. Okay.",
    "start": "2703966",
    "end": "2708399"
  },
  {
    "text": "So like the extends record.",
    "start": "2709233",
    "end": "2711632"
  },
  {
    "text": "And then here.",
    "start": "2717533",
    "end": "2720066"
  },
  {
    "text": "Wow I got that key bind right. Wow. Okay. Let's go.",
    "start": "2724000",
    "end": "2728966"
  },
  {
    "text": "So this will be computed field schemas. Fields.",
    "start": "2738966",
    "end": "2743432"
  },
  {
    "text": "And source. Source. Source.",
    "start": "2744266",
    "end": "2748000"
  },
  {
    "text": "Okay. So we still get this error here which is nice. Max.",
    "start": "2756433",
    "end": "2761633"
  },
  {
    "text": "Do you know what was invented in 1963. What was invented in 1963, Mike?",
    "start": "2762533",
    "end": "2769066"
  },
  {
    "text": "A mouse.",
    "start": "2770199",
    "end": "2770666"
  },
  {
    "text": "Invented by Doug Engelbart. Interesting.",
    "start": "2781933",
    "end": "2785399"
  },
  {
    "text": "So I feel like we're getting. I think we're getting what we want here.",
    "start": "2788866",
    "end": "2795699"
  },
  {
    "text": "We simplify this. Okay so we are getting error.",
    "start": "2798600",
    "end": "2803800"
  },
  {
    "text": "Which is good. And if I take this away.",
    "start": "2805633",
    "end": "2811800"
  },
  {
    "text": "Oops. Well say title two. Because you have to trigger the other.",
    "start": "2812233",
    "end": "2817966"
  },
  {
    "text": "I need to ask. Let me figure out how I can prevent commas from triggering. Of SP completion.",
    "start": "2822199",
    "end": "2827866"
  },
  {
    "text": "Title two.",
    "start": "2828133",
    "end": "2829399"
  },
  {
    "text": "Yeah this is good. So Sandro is saying that a real programmer only uses a keyword.",
    "start": "2841500",
    "end": "2847699"
  },
  {
    "text": "I guess you all folks don't use effect even I'm not a real programmer.",
    "start": "2849166",
    "end": "2852633"
  },
  {
    "text": "Alright and if I may turn a number here. Does this work. Well I changed this back to slug.",
    "start": "2855300",
    "end": "2859500"
  },
  {
    "text": "Yes. On the return type. Yeah.",
    "start": "2860899",
    "end": "2865366"
  },
  {
    "text": "Look at my red squiggly's. Nice. I get rid of all these ones. I wonder how you did this because",
    "start": "2865933",
    "end": "2871466"
  },
  {
    "text": "I was searching for who created the mouse and everything else but.",
    "start": "2871466",
    "end": "2874333"
  },
  {
    "text": "I basically. Literally searching just to roast me.",
    "start": "2876666",
    "end": "2881433"
  },
  {
    "text": "I used. I used to. Exclude duplicates and I basically made",
    "start": "2882633",
    "end": "2888033"
  },
  {
    "text": "exclude duplicates do the same thing that you did before with the name extend string return error blah blah blah.",
    "start": "2888033",
    "end": "2893166"
  },
  {
    "text": "And then I just did what I was doing before. With. Oh I got it.",
    "start": "2893566",
    "end": "2899300"
  },
  {
    "text": "You no longer have basically a.",
    "start": "2899466",
    "end": "2902433"
  },
  {
    "text": "the naked generic computed field schemas you're probably going to lose that but we don't quite care that we",
    "start": "2907466",
    "end": "2915166"
  },
  {
    "text": "that we lose that because we only. Well you need the. It's OK.",
    "start": "2915166",
    "end": "2920000"
  },
  {
    "text": "I guess that works. And what's nice here is. Without the intersection.",
    "start": "2921199",
    "end": "2926433"
  },
  {
    "text": "The errors are much cleaner. Because basically it's like you have a",
    "start": "2927466",
    "end": "2933533"
  },
  {
    "text": "basic type and you don't you can't assign to the basic type instead of the",
    "start": "2933533",
    "end": "2939099"
  },
  {
    "text": "intersection doesn't assign between themselves. Right. Let me figure this out.",
    "start": "2939100",
    "end": "2944833"
  },
  {
    "text": "That's nice. It's clean. Let's get rid of all this. Let's get rid of this.",
    "start": "2944833",
    "end": "2949432"
  },
  {
    "text": "That was an interesting challenge. You're right.",
    "start": "2954466",
    "end": "2958800"
  },
  {
    "text": "And maybe make the error nicer like. Use a complete. Really.",
    "start": "2959500",
    "end": "2964432"
  },
  {
    "text": "I'm really scared if I if I open a template literally again it's going to blow up ts server so we can try.",
    "start": "2965066",
    "end": "2970333"
  },
  {
    "text": "Or I can just do. Try.",
    "start": "2972300",
    "end": "2975132"
  },
  {
    "text": "Really. I'll have to figure out why that's happening.",
    "start": "2979266",
    "end": "2984333"
  },
  {
    "text": "But for now I'll just leave error here. Is right. I'm not using the proper IDE so I can.",
    "start": "2984333",
    "end": "2991100"
  },
  {
    "text": "OK. Fine.",
    "start": "2995500",
    "end": "2998033"
  },
  {
    "text": "OK. So I feel like we have a pretty good. User experience here now.",
    "start": "3000699",
    "end": "3006699"
  },
  {
    "text": "The types are I feel like the error messages are super clean. For this situation.",
    "start": "3007800",
    "end": "3013699"
  },
  {
    "text": "And then if we go back to fields. Fields that title that's less.",
    "start": "3014500",
    "end": "3019800"
  },
  {
    "text": "Again this is not how you make a slug but whatever. And let's just confirm",
    "start": "3020233",
    "end": "3026333"
  },
  {
    "text": "that all of our previous. Functionality works so we still get this.",
    "start": "3026333",
    "end": "3033100"
  },
  {
    "text": "I hate my mouse error which is good. And if we make this.",
    "start": "3034566",
    "end": "3040432"
  },
  {
    "text": "Slug two need to check out the fields. And we.",
    "start": "3041733",
    "end": "3046066"
  },
  {
    "text": "Just this to like a number. So this resolves now.",
    "start": "3046899",
    "end": "3051233"
  },
  {
    "text": "And fields includes our slug. And by the way just check that we still get an error on multiple keys.",
    "start": "3052100",
    "end": "3059300"
  },
  {
    "text": "So if we have multiple keys in the same. In the same place.",
    "start": "3060433",
    "end": "3065199"
  },
  {
    "text": "You mean like if we have multiple keys and it checked for the duplicate collision.",
    "start": "3065466",
    "end": "3070399"
  },
  {
    "text": "Yes exactly. Yeah it looks like we still do. OK good.",
    "start": "3071033",
    "end": "3075800"
  },
  {
    "text": "That's fine. Excellent this is great. Whoops.",
    "start": "3077133",
    "end": "3081899"
  },
  {
    "text": "Cool and now at the very end. We look at our post type.",
    "start": "3085066",
    "end": "3090432"
  },
  {
    "text": "Yep we get exactly what we wanted. The fields.",
    "start": "3091466",
    "end": "3095666"
  },
  {
    "text": "The source. Yeah this is perfect.",
    "start": "3097466",
    "end": "3104000"
  },
  {
    "text": "Yeah we're getting everything. That's nice. All right so.",
    "start": "3104966",
    "end": "3109833"
  },
  {
    "text": "I will. Push these changes in a second.",
    "start": "3112233",
    "end": "3117433"
  },
  {
    "text": "Just looking to make sure we didn't. Aren't left with any like",
    "start": "3123066",
    "end": "3128899"
  },
  {
    "text": "types that we're not using.",
    "start": "3128899",
    "end": "3130632"
  },
  {
    "text": "OK. Cool. So I will.",
    "start": "3135166",
    "end": "3140666"
  },
  {
    "text": "Resolve the commits in a second and push this up. Or I can just force push. And overwrite all your work.",
    "start": "3141133",
    "end": "3151800"
  },
  {
    "text": "The taking pleasure in deleting code is reciprocal. It is reciprocal.",
    "start": "3155633",
    "end": "3160233"
  },
  {
    "text": "It's very reciprocal. By the way I start to wonder.",
    "start": "3160833",
    "end": "3166765"
  },
  {
    "text": "Now we are taking care of generating proper types nice  everything else but.",
    "start": "3167433",
    "end": "3172600"
  },
  {
    "text": "How are you going to generate those types for the. Yeah I actually had a proof of concept",
    "start": "3173866",
    "end": "3180633"
  },
  {
    "text": "that I wrote a while ago. That. It or it's through.",
    "start": "3180633",
    "end": "3184899"
  },
  {
    "text": "A schema. And this actually was based on some code that Giulio wrote. Basically a TipeScript compiler for Schema",
    "start": "3185833",
    "end": "3193433"
  },
  {
    "text": "Yeah he had written a TS compiler a while back the tests for schema, but removed it",
    "start": "3193833",
    "end": "3199533"
  },
  {
    "text": "because maintaining it was a little bit of a pain in the neck, which makes perfect sense.",
    "start": "3199533",
    "end": "3205432"
  },
  {
    "text": "But I had taken that and adapted it to this particular use case a while back, where basically,",
    "start": "3207533",
    "end": "3214833"
  },
  {
    "text": "once the document's fully resolved and we're left with the",
    "start": "3215033",
    "end": "3220133"
  },
  {
    "text": "fields and their schemas and everything like that, we don't even need the document to be fully resolved. We can generate the types",
    "start": "3220133",
    "end": "3225933"
  },
  {
    "text": "independent of resolving the document because we have all the schemas.",
    "start": "3225933",
    "end": "3229933"
  },
  {
    "text": "You can basically just use the schema to generate the TypeScript type by iterating through the schema AST.",
    "start": "3231866",
    "end": "3237800"
  },
  {
    "text": "And-- But I wonder, can't we just use the type, given that it's all TypeScript?",
    "start": "3239600",
    "end": "3246033"
  },
  {
    "text": "Like, can't we import type into--",
    "start": "3248033",
    "end": "3250366"
  },
  {
    "text": "might be odd.",
    "start": "3253633",
    "end": "3254433"
  },
  {
    "text": "Yeah, I don't know.",
    "start": "3266466",
    "end": "3268766"
  },
  {
    "text": "What is the-- Because let's say I make, for example, an author instead",
    "start": "3273366",
    "end": "3281966"
  },
  {
    "text": "of being the schema struct is a class.",
    "start": "3281966",
    "end": "3283899"
  },
  {
    "text": "I'm not going to have the same instance of the same class if you generate a TypeScript file.",
    "start": "3287466",
    "end": "3294099"
  },
  {
    "text": "Right. So I wonder if we can actually import those document",
    "start": "3297199",
    "end": "3305899"
  },
  {
    "text": "definitions in the final step.",
    "start": "3306000",
    "end": "3311500"
  },
  {
    "text": "That's a different strategy from content layer, of course. Yeah, it's something to think about, for sure.",
    "start": "3314366",
    "end": "3319666"
  },
  {
    "text": "I'm not 100% sure. It's an interesting strategy, but I'm not sure.",
    "start": "3322100",
    "end": "3326633"
  },
  {
    "text": "Yeah, it's something to consider for when we start figuring out what the actual output is going to look",
    "start": "3332366",
    "end": "3338166"
  },
  {
    "text": "like and how that might deviate from the existing.",
    "start": "3338166",
    "end": "3342733"
  },
  {
    "text": "But I am very happy with at least the UX for defining documents now. This is really nice.",
    "start": "3345199",
    "end": "3350600"
  },
  {
    "text": "And just to remind everyone the reason why you might have two separate add computed fields here,",
    "start": "3350600",
    "end": "3356166"
  },
  {
    "text": "the idea is that within a single add computed fields, all of the field definitions that you might have here--",
    "start": "3356699",
    "end": "3362800"
  },
  {
    "text": "so if we have like slug, slug three, slug two, or maybe we make this",
    "start": "3362800",
    "end": "3368366"
  },
  {
    "text": "slug three, slug two-- the idea here is that these fields here in every add",
    "start": "3368366",
    "end": "3376233"
  },
  {
    "text": "computed fields that you do, the fields can't depend on one another. So slug can't depend on slug.",
    "start": "3376233",
    "end": "3381199"
  },
  {
    "text": "Slug two can't depend on slug in this case, but those fields can be processed concurrently.",
    "start": "3381766",
    "end": "3387899"
  },
  {
    "text": "So the resolvers for those fields we can process concurrently. And then if you do need access to a",
    "start": "3388233",
    "end": "3395299"
  },
  {
    "text": "previously computed field, you would just call add computed fields again, and you would have access to",
    "start": "3395300",
    "end": "3400533"
  },
  {
    "text": "all the previously computed fields in this type because every group of computed fields",
    "start": "3400533",
    "end": "3407199"
  },
  {
    "text": "is processed sequentially. So every call to add computed fields you can sort of think about as being",
    "start": "3407800",
    "end": "3413566"
  },
  {
    "text": "processed sequentially while the inner fields, the resolvers for those",
    "start": "3413566",
    "end": "3418733"
  },
  {
    "text": "in the inner fields are processed concurrently. And I mean, we could even add an option",
    "start": "3418733",
    "end": "3424132"
  },
  {
    "text": "to take a concurrency. I mean, at some point, this is going to be overengineering it.",
    "start": "3424399",
    "end": "3430733"
  },
  {
    "text": "But if we think in terms of like two subsequent add computed",
    "start": "3431266",
    "end": "3436366"
  },
  {
    "text": "fields calls are akin to an effect of flatMap we could make the multiple keys to be",
    "start": "3436533",
    "end": "3445599"
  },
  {
    "text": "akin to an effect of all. And at that point, we could quite literally also pass the concurrency.",
    "start": "3445600",
    "end": "3451466"
  },
  {
    "text": "Say, look, I want this concurrent. I want this sequential and blah, blah, blah.",
    "start": "3452100",
    "end": "3457399"
  },
  {
    "text": "Not necessarily in any way again. I think this is at some point overengineering.",
    "start": "3457899",
    "end": "3462333"
  },
  {
    "text": "Well, if you're up for it, Mike, I'm happy to go for a little while longer. I don't know. Yeah, sure.",
    "start": "3464233",
    "end": "3469432"
  },
  {
    "text": "But maybe we can take like a five minute break, and then we can start maybe digging into some actual--",
    "start": "3470000",
    "end": "3475666"
  },
  {
    "text": "we can pick a place to start on the actual engine and start thinking about it. I feel like there's a lot of different",
    "start": "3476233",
    "end": "3481533"
  },
  {
    "text": "places we could start. We could look at like how one would-- maybe we would effectify compiling",
    "start": "3481533",
    "end": "3486866"
  },
  {
    "text": "the content layer config. We could take a look at how",
    "start": "3486866",
    "end": "3491899"
  },
  {
    "text": "documents might be processed. So maybe we can take a five minute break and then start digging into some of that.",
    "start": "3491899",
    "end": "3496500"
  },
  {
    "text": "Let's do that. Cool. All right.",
    "start": "3498300",
    "end": "3500599"
  },
  {
    "text": "Yeah. So I thought maybe-- there's multiple different things we could potentially",
    "start": "3505366",
    "end": "3510466"
  },
  {
    "text": "tackle as a next step.",
    "start": "3510466",
    "end": "3515033"
  },
  {
    "text": "I think when we were talking about the features of content layer we liked, we like",
    "start": "3518633",
    "end": "3525866"
  },
  {
    "text": "the fact that the config is a TypeScript file, that you can basically use the right TypeScript.",
    "start": "3525866",
    "end": "3531199"
  },
  {
    "text": "And then your documents basically just get exported from that TypeScript file.",
    "start": "3531199",
    "end": "3535765"
  },
  {
    "text": "So maybe we can start thinking about the configuration file and how that gets loaded into the engine.",
    "start": "3538966",
    "end": "3544300"
  },
  {
    "text": "That's one potential way we could start digging into some actual code.",
    "start": "3544733",
    "end": "3549066"
  },
  {
    "text": "Another thing we could do is talk about document resolution and things like that.",
    "start": "3551233",
    "end": "3556066"
  },
  {
    "text": "But we don't really have a way to test that other than just taking a document and going",
    "start": "3556699",
    "end": "3563099"
  },
  {
    "text": "through all of its resolvers at the moment. I think being able to load a document into the engine",
    "start": "3563100",
    "end": "3568432"
  },
  {
    "text": "via the-- Yeah, the content file is the entry point anyway.",
    "start": "3568466",
    "end": "3572666"
  },
  {
    "text": "Yeah. So I feel like that's a good place maybe to start. Currently, Content Layer uses esbuild",
    "start": "3573500",
    "end": "3580833"
  },
  {
    "text": "to take the Content Layer config, esbuild--",
    "start": "3581266",
    "end": "3589733"
  },
  {
    "text": "if I it-- builds it with esbuild and then spits it out.",
    "start": "3590333",
    "end": "3594766"
  },
  {
    "text": "Into that .contentlayer directory. And then that config file is basically",
    "start": "3596166",
    "end": "3604199"
  },
  {
    "text": "what's used to trigger everything else that happens with Content Layer.",
    "start": "3604300",
    "end": "3610066"
  },
  {
    "text": "So we could take the same approach. We could use esbuild. We could use something else.",
    "start": "3611333",
    "end": "3616199"
  },
  {
    "text": "But I think the first step is essentially to figure out how do we grab the config file",
    "start": "3619500",
    "end": "3625699"
  },
  {
    "text": "and compile it in such a way that we can",
    "start": "3626966",
    "end": "3632399"
  },
  {
    "text": "then make use of it. I mean, esbuild is a fairly used and common tool.",
    "start": "3632399",
    "end": "3640099"
  },
  {
    "text": "Yeah. I don't really see any reason against using it.",
    "start": "3640899",
    "end": "3647000"
  },
  {
    "text": "Given it is a TypeScript file, unless we want Content Layer",
    "start": "3647666",
    "end": "3652866"
  },
  {
    "text": "5.2.6.9, whatever, we end up calling this to work only on a specific runtime,",
    "start": "3654366",
    "end": "3659966"
  },
  {
    "text": "such as BUN, for example, that can directly load TypeScript files,",
    "start": "3659966",
    "end": "3664699"
  },
  {
    "text": "we're going to have to compile it anyway. Which--",
    "start": "3666333",
    "end": "3670966"
  },
  {
    "text": "I think starting with-- That's the question we can probably use esbuild. Yeah. I think starting with esbuild and we can",
    "start": "3672966",
    "end": "3680266"
  },
  {
    "text": "build out from there makes sense. And I do have the benefit of",
    "start": "3680266",
    "end": "3685633"
  },
  {
    "text": "a tiny bit of context in this. Because at some point in the past, I did try to take the existing build",
    "start": "3685633",
    "end": "3694833"
  },
  {
    "text": "pipeline for the config file and use more modern effect--",
    "start": "3694833",
    "end": "3699366"
  },
  {
    "text": "more modern effect APIs to compile it. So we can maybe take some",
    "start": "3702166",
    "end": "3707600"
  },
  {
    "text": "of those learnings with us as well. But I think maybe a good place to start is to basically make--",
    "start": "3707600",
    "end": "3718466"
  },
  {
    "text": "the functionality that currently exists with Content Layer is the config file",
    "start": "3720633",
    "end": "3726265"
  },
  {
    "text": "is watched for changes. When a change is detected in the config file,",
    "start": "3726266",
    "end": "3731300"
  },
  {
    "text": "it rebuilds the config and then reloads all of the documents. Which makes sense, right? If your config changes, if",
    "start": "3733500",
    "end": "3739399"
  },
  {
    "text": "the config itself changes, you probably need to regenerate all the documents.",
    "start": "3739399",
    "end": "3744233"
  },
  {
    "text": "When we are working later on on the actual documents loading",
    "start": "3745533",
    "end": "3750966"
  },
  {
    "text": "content, we can obviously take caching into consideration.",
    "start": "3751166",
    "end": "3757600"
  },
  {
    "text": "And if only we build the documents that have changed if you're actually editing the document.",
    "start": "3757966",
    "end": "3764166"
  },
  {
    "text": "When you're editing the config file, I feel like it makes sense to reload the whole config.",
    "start": "3764166",
    "end": "3767366"
  },
  {
    "text": "And also changing the config doesn't mean actually rebuilding everything down the road.",
    "start": "3769399",
    "end": "3776766"
  },
  {
    "text": "You can trigger a rebuild. But then it would be the engine that actually decides",
    "start": "3776766",
    "end": "3781600"
  },
  {
    "text": "if to rebuild or not. Right. Right, right, right. So I think the approach I had taken when",
    "start": "3781866",
    "end": "3790533"
  },
  {
    "text": "I had done this previously was essentially to build a ES build plugin with effect",
    "start": "3790533",
    "end": "3798233"
  },
  {
    "text": "that hooks into the-- like the-- what should we call it?",
    "start": "3798233",
    "end": "3806899"
  },
  {
    "text": "Like the watch functionality of ES build for the config file.",
    "start": "3806899",
    "end": "3810266"
  },
  {
    "text": "So maybe we can start going down that path first and then see where it leads us.",
    "start": "3812600",
    "end": "3816932"
  },
  {
    "text": "Yeah, I think it leads final type for the config, though. And probably a make.",
    "start": "3817733",
    "end": "3823366"
  },
  {
    "text": "Let's make an ES build, that's yes. And then we can also make a config.ts",
    "start": "3827733",
    "end": "3835233"
  },
  {
    "text": "So let's start here. And probably if we call that make make document so that at least",
    "start": "3839966",
    "end": "3846265"
  },
  {
    "text": "it doesn't conflict with make. Because I guess we're going to have a function also",
    "start": "3846266",
    "end": "3851465"
  },
  {
    "text": "for the config, to make the config or not.",
    "start": "3851466",
    "end": "3856699"
  },
  {
    "text": "Well, my idea is like the config is-- OK, wait. So let's actually-- it's",
    "start": "3858033",
    "end": "3864466"
  },
  {
    "text": "good to iron this out first. The config file, like",
    "start": "3864466",
    "end": "3870033"
  },
  {
    "text": "imagine this is our content layer config, right? My idea would be like you'd be importing everything as document from that effect content.",
    "start": "3870033",
    "end": "3877866"
  },
  {
    "text": "Content, right? And then you'd be doing like export, comments to post, post",
    "start": "3878966",
    "end": "3884733"
  },
  {
    "text": "make, blah, blah. And similarly, maybe you",
    "start": "3884733",
    "end": "3891965"
  },
  {
    "text": "have a blog post or a docs page,",
    "start": "3891966",
    "end": "3896566"
  },
  {
    "text": "et cetera, right? So my idea is like the content layer config",
    "start": "3898233",
    "end": "3903299"
  },
  {
    "text": "is basically just a module that exports a bunch of different documents. OK, so you also have then",
    "start": "3903866",
    "end": "3910733"
  },
  {
    "text": "the like MDX configuration and so on and so forth per document.",
    "start": "3910733",
    "end": "3915066"
  },
  {
    "text": "Right, because if we look back at the document.ts for a moment, the file system",
    "start": "3915966",
    "end": "3924932"
  },
  {
    "text": "source is essentially what's going to-- this is essentially what's going to",
    "start": "3924933",
    "end": "3930300"
  },
  {
    "text": "determine, in my mind, we could make all of-- we could put the config--",
    "start": "3930300",
    "end": "3936566"
  },
  {
    "text": "actually, that's a good point. If we have different MDX plugins and things like that,",
    "start": "3938000",
    "end": "3943765"
  },
  {
    "text": "we might want to be able to handle that as well from the config. We could-- like if we have global--",
    "start": "3945566",
    "end": "3952266"
  },
  {
    "text": "One thing is if we have separated configs per document and we want to use the same plugins",
    "start": "3953966",
    "end": "3960466"
  },
  {
    "text": "across the different things, we can just extract a variable. There's no rocket science.",
    "start": "3960466",
    "end": "3967566"
  },
  {
    "text": "We just extract a variable and that's it. Well, I'm thinking like you brought up a good point with like the MDX piece, right?",
    "start": "3967566",
    "end": "3973533"
  },
  {
    "text": "Where like, yes, these could both use like a file system source that has the same",
    "start": "3973966",
    "end": "3980699"
  },
  {
    "text": "like source dot whatever and this and this. No, or rather the source is different because probably",
    "start": "3980699",
    "end": "3986266"
  },
  {
    "text": "the folder is going to be different between the two. The remark plugins or",
    "start": "3986433",
    "end": "3992299"
  },
  {
    "text": "rehype plugins entry could be extracted to a variable and just reused",
    "start": "3992300",
    "end": "3997666"
  },
  {
    "text": "in different places, I guess makes sense. We could also even from the content layer config,",
    "start": "3998600",
    "end": "4003965"
  },
  {
    "text": "we could make the default export from the config an object that takes like",
    "start": "4004866",
    "end": "4010133"
  },
  {
    "text": "the global configuration if we wanted to. Yeah, you should be typing it.",
    "start": "4010133",
    "end": "4014199"
  },
  {
    "text": "Right, I mean, and then the other thing is you may want to process-- like you brought up, you may want",
    "start": "4015433",
    "end": "4021666"
  },
  {
    "text": "to process stuff differently.",
    "start": "4021666",
    "end": "4025666"
  },
  {
    "text": "Like your docs pages, maybe you want to run some plugins on and then your blog post, maybe you",
    "start": "4027166",
    "end": "4032399"
  },
  {
    "text": "want to run other plugins on. So we might need to like think about where",
    "start": "4032399",
    "end": "4040633"
  },
  {
    "text": "the specification for those plugins would live. Like is it going to live inside the source",
    "start": "4041433",
    "end": "4046366"
  },
  {
    "text": "when you import a particular source?",
    "start": "4047133",
    "end": "4049666"
  },
  {
    "text": "Source, right, and you create the source within your document is one of the",
    "start": "4052233",
    "end": "4058533"
  },
  {
    "text": "properties of the source, like if we say a file system, is one of the properties of the source besides",
    "start": "4058533",
    "end": "4064633"
  },
  {
    "text": "paths going to be like, I don't know. Right.",
    "start": "4064633",
    "end": "4069533"
  },
  {
    "text": "And similarly, remark plugins, whatever. This is one strategy. And since it's just a plain TypeScript",
    "start": "4069966",
    "end": "4076399"
  },
  {
    "text": "file, like you said, like you could have some plugins up here and a global variable and add to them, whatever.",
    "start": "4076399",
    "end": "4080966"
  },
  {
    "text": "This is definitely one strategy for doing that.",
    "start": "4083266",
    "end": "4088932"
  },
  {
    "text": "And I think that's OK. Yeah, I think when we",
    "start": "4092000",
    "end": "4097365"
  },
  {
    "text": "start talking about the content sources, we'll probably",
    "start": "4097366",
    "end": "4102698"
  },
  {
    "text": "have another conversation about these plugins and things like that. But this is kind of like",
    "start": "4102699",
    "end": "4108333"
  },
  {
    "text": "the idea I had for the config, is like you're basically just exporting a bunch of documents. And those documents should be",
    "start": "4108333",
    "end": "4114965"
  },
  {
    "text": "self-contained enough to generate all the content.",
    "start": "4114966",
    "end": "4119399"
  },
  {
    "text": "Makes sense. Cool.",
    "start": "4123433",
    "end": "4125800"
  },
  {
    "text": "So yeah, I think we can start thinking about these two",
    "start": "4130600",
    "end": "4136100"
  },
  {
    "text": "things. I already have an idea of what the ESBuild plugin would",
    "start": "4136100",
    "end": "4142100"
  },
  {
    "text": "look like because, like I said, I've done it once before.",
    "start": "4142100",
    "end": "4144432"
  },
  {
    "text": "So we can take the benefit of learnings. So I think one thing we know we're",
    "start": "4148000",
    "end": "4153198"
  },
  {
    "text": "probably going to need is to install the ESBuild.",
    "start": "4153199",
    "end": "4158166"
  },
  {
    "text": "I think I renamed this to Effect Content, I think.",
    "start": "4162933",
    "end": "4168500"
  },
  {
    "text": "That's not bad.",
    "start": "4173233",
    "end": "4173666"
  },
  {
    "text": "I think I can do this.",
    "start": "4189199",
    "end": "4190699"
  },
  {
    "text": "Yeah. So I think that it might",
    "start": "4196100",
    "end": "4203333"
  },
  {
    "text": "be worthwhile for ESBuild to be a service.",
    "start": "4203333",
    "end": "4208833"
  },
  {
    "text": "right? So I think whenever I'm starting to",
    "start": "4211100",
    "end": "4219000"
  },
  {
    "text": "create a service with Effect, I usually like to just start with the Make function.",
    "start": "4219000",
    "end": "4224466"
  },
  {
    "text": "And then I also usually will do-- if I know I'm creating a service, export class--",
    "start": "4230666",
    "end": "4239433"
  },
  {
    "text": "let's call this ESBuild for now. That extends.",
    "start": "4240166",
    "end": "4242633"
  },
  {
    "text": "Self. you first need to-- yes, build.",
    "start": "4246833",
    "end": "4251466"
  },
  {
    "text": "I can't wait until the point where we have this type of Make",
    "start": "4272500",
    "end": "4278198"
  },
  {
    "text": "dot success. Yeah, same. And that's it. Which, by the way, we can",
    "start": "4279666",
    "end": "4286500"
  },
  {
    "text": "only do that because we've made the environment covariant quantum and using a union.",
    "start": "4286500",
    "end": "4294698"
  },
  {
    "text": "Otherwise, we could not have field called context.",
    "start": "4296266",
    "end": "4300100"
  },
  {
    "text": "Yeah, sorry. I was only half paying attention for-- Yeah, I was taking attention.",
    "start": "4303966",
    "end": "4310433"
  },
  {
    "text": "So when I did this before, when I did this before,",
    "start": "4313500",
    "end": "4321133"
  },
  {
    "text": "I separated out the-- because ESBuild, as a",
    "start": "4322966",
    "end": "4328566"
  },
  {
    "text": "package, when you use it, it takes a whole bunch of build options",
    "start": "4328566",
    "end": "4333833"
  },
  {
    "text": "when you're actually running it. And I remember wanting to separate the build options",
    "start": "4334133",
    "end": "4340300"
  },
  {
    "text": "from the actual plugin when I did this. So maybe it would be",
    "start": "4340500",
    "end": "4346399"
  },
  {
    "text": "worthwhile to do that up front. And by the way, just for the sake of it,",
    "start": "4346399",
    "end": "4352199"
  },
  {
    "text": "even that we probably want to let the user use effect",
    "start": "4352399",
    "end": "4361899"
  },
  {
    "text": "directly, we should probably specify effect as an external in the build of the config.",
    "start": "4362233",
    "end": "4367833"
  },
  {
    "text": "Yeah, I think that content layer currently-- I think the current implementation of the current",
    "start": "4368699",
    "end": "4375733"
  },
  {
    "text": "content layer configuration, the ESBuild has a plugin that is",
    "start": "4375733",
    "end": "4382800"
  },
  {
    "text": "specified internally that marks every package as external.",
    "start": "4382800",
    "end": "4386433"
  },
  {
    "text": "I think it bundles effect. I don't think it--",
    "start": "4388533",
    "end": "4391566"
  },
  {
    "text": "I don't think it does, but it might. We can actually--",
    "start": "4394833",
    "end": "4400233"
  },
  {
    "text": "it doesn't matter. We're rethinking this anyway.",
    "start": "4400933",
    "end": "4404300"
  },
  {
    "text": "But let's go with--",
    "start": "4406399",
    "end": "4410733"
  },
  {
    "text": "let's say build options equals context.",
    "start": "4415233",
    "end": "4420966"
  },
  {
    "text": "We don't really need--",
    "start": "4421800",
    "end": "4422698"
  },
  {
    "text": "actually, in this case, I think I can just use a generic tag.",
    "start": "4428366",
    "end": "4431733"
  },
  {
    "text": "No, I want to use the class. No, I can use a generic tag.",
    "start": "4437733",
    "end": "4443765"
  },
  {
    "text": "And this is going to be--",
    "start": "4447066",
    "end": "4450399"
  },
  {
    "text": "it's build options, I think, is a type. And I'll say that effect content over--",
    "start": "4452300",
    "end": "4460133"
  },
  {
    "text": "I think-- cool.",
    "start": "4463766",
    "end": "4469933"
  },
  {
    "text": "So then in here, we can grab our-- Do we actually want to use a generic tag for that?",
    "start": "4471500",
    "end": "4477366"
  },
  {
    "text": "I don't know. I'm not sure yet. We can make it a class and then switch to a generic tag if it works.",
    "start": "4480199",
    "end": "4484533"
  },
  {
    "text": "Yeah, let's start making it a class. That's a better option.",
    "start": "4485466",
    "end": "4489266"
  },
  {
    "text": "It can also make an effect tag so that you can directly access the methods if--",
    "start": "4492899",
    "end": "4496733"
  },
  {
    "text": "I need to add all my snippets back to NeoVim. Then I had a VS code where I",
    "start": "4506333",
    "end": "4511500"
  },
  {
    "text": "could create these snippets.",
    "start": "4511500",
    "end": "4513199"
  },
  {
    "text": "Well, my effect-- no, this is esbuild.build options.",
    "start": "4517066",
    "end": "4520698"
  },
  {
    "text": "No, I got to get those layered up. I'm not sure.",
    "start": "4526033",
    "end": "4529865"
  },
  {
    "text": "We don't want to specify that yet. So we'll just leave it like this. Oh, change also the tag ID.",
    "start": "4532033",
    "end": "4539066"
  },
  {
    "text": "Otherwise, it's going to conflict. Yeah, I will do that.",
    "start": "4539500",
    "end": "4542866"
  },
  {
    "text": "Options. options.",
    "start": "4544833",
    "end": "4547899"
  },
  {
    "text": "So now we should have the ability to-- yeah, get all the esbuild options. So in here, we need to do a few things.",
    "start": "4550433",
    "end": "4558833"
  },
  {
    "text": "We need-- since this is going to be a watch plugin,",
    "start": "4559133",
    "end": "4564133"
  },
  {
    "text": "this is basically going to be an esbuild plugin that we add that watches the content layer config and",
    "start": "4564866",
    "end": "4572433"
  },
  {
    "text": "rebuilds on changes. And we probably want the ability to",
    "start": "4572433",
    "end": "4578266"
  },
  {
    "text": "consume those updates independent of esbuild.",
    "start": "4578266",
    "end": "4583233"
  },
  {
    "text": "So what we might want-- Let's go one other thing. How do we want to",
    "start": "4583899",
    "end": "4590833"
  },
  {
    "text": "expose the final process? Do we want to have a CLI?",
    "start": "4590833",
    "end": "4596799"
  },
  {
    "text": "I think a CLI. And that was the way I was imagining it. When I had been working on this",
    "start": "4597899",
    "end": "4603033"
  },
  {
    "text": "previously, just for fun, I had imagined that it was a CLI that",
    "start": "4603033",
    "end": "4609100"
  },
  {
    "text": "was built with effect CLI that we could then basically utilize to trigger the various",
    "start": "4609100",
    "end": "4616233"
  },
  {
    "text": "stuff within content layer. For example, I could imagine a situation where",
    "start": "4616233",
    "end": "4622533"
  },
  {
    "text": "you want to test out some stuff, but you don't want to actually build your content. So with the CLI, we could expose",
    "start": "4622933",
    "end": "4628399"
  },
  {
    "text": "additional functionality. For example, imagine you want to generate the types",
    "start": "4628399",
    "end": "4634366"
  },
  {
    "text": "for your content layer documents, but you don't want to rebuild the content. We could expose all that functionality through the CLI.",
    "start": "4634600",
    "end": "4642033"
  },
  {
    "text": "So it was kind of like the thought process I had. We have a CLI that allows you to do this.",
    "start": "4644899",
    "end": "4650966"
  },
  {
    "text": "Yeah. What do you think? No, I tend to agree.",
    "start": "4652633",
    "end": "4657599"
  },
  {
    "text": "I know content layer also has plug-ins for Next.js",
    "start": "4658166",
    "end": "4664133"
  },
  {
    "text": "and other stuff, but-- I think if we want to, we can get there.",
    "start": "4664133",
    "end": "4671299"
  },
  {
    "text": "But I think that my idea",
    "start": "4671333",
    "end": "4677166"
  },
  {
    "text": "is the main entry point to content layer that we should be focusing on for the moment",
    "start": "4677166",
    "end": "4682399"
  },
  {
    "text": "would be just the CLI. And then we can always-- if we build the core separate from the CLI,",
    "start": "4683100",
    "end": "4689700"
  },
  {
    "text": "if core is a package and CLI is a package, and then we can figure out ways to create--",
    "start": "4690000",
    "end": "4695766"
  },
  {
    "text": "make that experience a little bit nicer. But if we separate core from CLI and we just",
    "start": "4696766",
    "end": "4701833"
  },
  {
    "text": "make core a dependency of CLI, then the-- Well, CLI depends--",
    "start": "4702266",
    "end": "4707299"
  },
  {
    "text": "no, core dependency of CLI. And basically, people could install the content layer CLI,",
    "start": "4708033",
    "end": "4713133"
  },
  {
    "text": "or they can install plug-ins for Next or Astro or whatever. We can build those down the line. But as long as the",
    "start": "4713333",
    "end": "4718699"
  },
  {
    "text": "engine itself is separated, then the entry point to the engine, we could build separately as long",
    "start": "4718700",
    "end": "4726200"
  },
  {
    "text": "as we make it flexible enough. All right, so I am",
    "start": "4726200",
    "end": "4731733"
  },
  {
    "text": "going to make this a queue.",
    "start": "4731733",
    "end": "4734799"
  },
  {
    "text": "I think he has build as like a-- yeah, so there's a build result type.",
    "start": "4738433",
    "end": "4744733"
  },
  {
    "text": "But I remember--",
    "start": "4747899",
    "end": "4752133"
  },
  {
    "text": "so when doing this, when we have this watch plugin running, we're going to basically take the results",
    "start": "4759100",
    "end": "4765666"
  },
  {
    "text": "from the watch plugin, and we're going to put them in a queue that we can then consume from effect.",
    "start": "4765666",
    "end": "4771333"
  },
  {
    "text": "And what we're actually going to want",
    "start": "4773200",
    "end": "4778566"
  },
  {
    "text": "is the ability to both have access to successful ES build",
    "start": "4778866",
    "end": "4784233"
  },
  {
    "text": "results, but we're also going to want the ability to have access to build failures,",
    "start": "4784233",
    "end": "4790733"
  },
  {
    "text": "which we can then render in a helpful way, especially if we're running the content layer CLI in watch mode",
    "start": "4791433",
    "end": "4797532"
  },
  {
    "text": "or something. When you-- You change a bump, you make a mistake.",
    "start": "4797533",
    "end": "4802066"
  },
  {
    "text": "You see an error, and so on and so forth. So maybe what we can do here is just leave this empty for a sec,",
    "start": "4802633",
    "end": "4808733"
  },
  {
    "text": "and maybe we can have a-- I mean, yes, build result type, which can",
    "start": "4809133",
    "end": "4818233"
  },
  {
    "text": "be exit, right there.",
    "start": "4818233",
    "end": "4824365"
  },
  {
    "text": "Let's start with exit, maybe. I mean, exit might also have more cases.",
    "start": "4834933",
    "end": "4841666"
  },
  {
    "text": "Like, it can represent a defect. So it's going to be very hard if you didn't have to match between just the two.",
    "start": "4841966",
    "end": "4848100"
  },
  {
    "text": "Yeah, I'm wondering, do we want the ability to have the full cause that we can render?",
    "start": "4850833",
    "end": "4856133"
  },
  {
    "text": "But if it's the build output, I don't think you have a cause in the first place.",
    "start": "4858299",
    "end": "4862166"
  },
  {
    "text": "Maybe then we'll start with either.",
    "start": "4864033",
    "end": "4865866"
  },
  {
    "text": "So we have on the right side, we have a",
    "start": "4869899",
    "end": "4874933"
  },
  {
    "text": "build result from ESBuild. And on the left side, we have some ESBuild error type,",
    "start": "4874933",
    "end": "4881933"
  },
  {
    "text": "which will stub out firmly.",
    "start": "4881933",
    "end": "4883733"
  },
  {
    "text": "So we're going to want to have a queue of this.",
    "start": "4893066",
    "end": "4896600"
  },
  {
    "text": "Because the idea is, yeah, the plugin is plugged into ESBuild, but we want access to everything that's",
    "start": "4902399",
    "end": "4908033"
  },
  {
    "text": "coming out of the plugin in Effect land. So we're going to basically allow pulling",
    "start": "4908033",
    "end": "4915399"
  },
  {
    "text": "from the queue in Effect while the plugin is still plugged into ESBuild.",
    "start": "4915399",
    "end": "4919233"
  },
  {
    "text": "So let's create the plugin.",
    "start": "4924333",
    "end": "4929399"
  },
  {
    "text": "I think ESBuild has like a-- a plugin interface.",
    "start": "4932666",
    "end": "4938333"
  },
  {
    "text": "And the name and the setup method.",
    "start": "4944100",
    "end": "4951166"
  },
  {
    "text": "Name.",
    "start": "4954533",
    "end": "4954733"
  },
  {
    "text": "I think actually it has to be like a--",
    "start": "4964166",
    "end": "4967700"
  },
  {
    "text": "setup.",
    "start": "4980033",
    "end": "4980200"
  },
  {
    "text": "We get the build, I guess.",
    "start": "4986500",
    "end": "4987666"
  },
  {
    "text": "Right, right, right, right, right. It's all coming back, sort of.",
    "start": "4992700",
    "end": "5000033"
  },
  {
    "text": "So what we want here is we want to do something when the build ends,",
    "start": "5001200",
    "end": "5006066"
  },
  {
    "text": "and we get our result.",
    "start": "5008166",
    "end": "5009566"
  },
  {
    "text": "No, this is wrong. What's that syntax? I don't know.",
    "start": "5015866",
    "end": "5020399"
  },
  {
    "text": "It was a Scala. Yeah, this is a-- OK, now we have--",
    "start": "5022333",
    "end": "5028100"
  },
  {
    "text": "I would love to have that syntax, to be honest. OK, so when we get the",
    "start": "5029733",
    "end": "5038200"
  },
  {
    "text": "result, we get errors. We also can get a successful result.",
    "start": "5038200",
    "end": "5043099"
  },
  {
    "text": "So I think we're going to want all of these properties.",
    "start": "5046466",
    "end": "5050666"
  },
  {
    "text": "In the output, but what we can do is like if result.--",
    "start": "5052666",
    "end": "5057766"
  },
  {
    "text": "we have again errors. Is that laying--",
    "start": "5058299",
    "end": "5062833"
  },
  {
    "text": "maybe we use array from effect. Or may-- come on.",
    "start": "5063399",
    "end": "5070533"
  },
  {
    "text": "Yeah, proper IDE would have known how to import this. All right, all right, all right. Relax.",
    "start": "5072633",
    "end": "5077866"
  },
  {
    "text": "Is non-empty array.",
    "start": "5079566",
    "end": "5082532"
  },
  {
    "text": "Result.errors",
    "start": "5086533",
    "end": "5087366"
  },
  {
    "text": "OK, so let me just shut off those diagnostics.",
    "start": "5091700",
    "end": "5097532"
  },
  {
    "text": "It would be very funny if I end up using NeoVib at the end. It would be--",
    "start": "5098733",
    "end": "5104100"
  },
  {
    "text": "yeah, that would be fantastic. I can't ever actually see it happening, but yes,",
    "start": "5104633",
    "end": "5112000"
  },
  {
    "text": "that would be amazing. OK, so if we have successful",
    "start": "5112000",
    "end": "5118166"
  },
  {
    "text": "results, we can do a queue.",
    "start": "5118166",
    "end": "5121033"
  },
  {
    "text": "I think we just pop the result right in there.",
    "start": "5128366",
    "end": "5130133"
  },
  {
    "text": "And if we have errors--",
    "start": "5138600",
    "end": "5140033"
  },
  {
    "text": "I guess this is a situation where we're going to start.",
    "start": "5152600",
    "end": "5156032"
  },
  {
    "text": "So I guess errors is an array of messages.",
    "start": "5177466",
    "end": "5182500"
  },
  {
    "text": "OK.",
    "start": "5184100",
    "end": "5184333"
  },
  {
    "text": "So do queue. Here it is. Save buffer results.",
    "start": "5197733",
    "end": "5204700"
  },
  {
    "text": "So what are we doing? That's a good question. We're reinventing content",
    "start": "5208500",
    "end": "5217133"
  },
  {
    "text": "layer, which is a kind of utility--",
    "start": "5217133",
    "end": "5222566"
  },
  {
    "text": "I would call it a framework-independent utility to build content for",
    "start": "5222933",
    "end": "5228299"
  },
  {
    "text": "content projects, such as Next.js and so on and so",
    "start": "5228299",
    "end": "5233466"
  },
  {
    "text": "forth, that was initially built using effect and",
    "start": "5233466",
    "end": "5238600"
  },
  {
    "text": "ended up being unmaintained. And while using it, we've realized",
    "start": "5238600",
    "end": "5246399"
  },
  {
    "text": "that there are some potential things we want to improve.",
    "start": "5246600",
    "end": "5252266"
  },
  {
    "text": "And on the other side, we don't really need all the featuring. So we are seeing if",
    "start": "5253266",
    "end": "5259633"
  },
  {
    "text": "we can build something from scratch, which resembles the user experience of content layer, but that is",
    "start": "5259633",
    "end": "5265533"
  },
  {
    "text": "purpose-built for our usage, and that it is much more parallel",
    "start": "5265533",
    "end": "5272633"
  },
  {
    "text": "than the initial version of content layer to make building content extremely fast.",
    "start": "5272833",
    "end": "5278733"
  },
  {
    "text": "And we don't know if we're going to get there or not. But we're positive.",
    "start": "5279866",
    "end": "5283933"
  },
  {
    "text": "Yeah, plus we also thought it would be a good experience to try to build something in public",
    "start": "5285233",
    "end": "5292699"
  },
  {
    "text": "and show folks maybe the process that we use to approach some of these packages",
    "start": "5293799",
    "end": "5301299"
  },
  {
    "text": "and what we focus on, what we don't. And doc food a little bit on the various ecosystem libraries",
    "start": "5301466",
    "end": "5308466"
  },
  {
    "text": "that we've built since.",
    "start": "5308633",
    "end": "5312532"
  },
  {
    "text": "I think this could be--",
    "start": "5313799",
    "end": "5317699"
  },
  {
    "text": "So what I want to do now--",
    "start": "5332833",
    "end": "5336033"
  },
  {
    "text": "So basically, you're just adding a new plugin into the esbuild file.",
    "start": "5338266",
    "end": "5344399"
  },
  {
    "text": "And now we're going to essentially-- so we can specify the build options separately, which is nice.",
    "start": "5346833",
    "end": "5352533"
  },
  {
    "text": "This is the thing that's actually going to run the esbuild context. It's basically just going to",
    "start": "5353066",
    "end": "5358699"
  },
  {
    "text": "expose to us a queue of results. So actually, we can even do that right now. We can move.",
    "start": "5358700",
    "end": "5363533"
  },
  {
    "text": "I think that we only need to expose the results. We can change this, but I think--",
    "start": "5364833",
    "end": "5370600"
  },
  {
    "text": "why is it not happy? What did I do?",
    "start": "5371033",
    "end": "5373666"
  },
  {
    "text": "This, I'll see. Extends clause, and then--",
    "start": "5382866",
    "end": "5385833"
  },
  {
    "text": "all right, well, we'll see. Hasn't. That's a TypeScript thing.",
    "start": "5390433",
    "end": "5396600"
  },
  {
    "text": "It's because I wasn't returning an object. And it's effect.tag, so it needs to be an object.",
    "start": "5397533",
    "end": "5402466"
  },
  {
    "text": "Yeah, that's true. Well, I mean, it doesn't need to be an object,",
    "start": "5403933",
    "end": "5409500"
  },
  {
    "text": "but otherwise, I think you",
    "start": "5409899",
    "end": "5416133"
  },
  {
    "text": "need to re-export a queue. I don't know. I mean, it is an object.",
    "start": "5416133",
    "end": "5421533"
  },
  {
    "text": "A queue is an object. So you should be able to just return the results.",
    "start": "5421899",
    "end": "5425699"
  },
  {
    "text": "Yeah. So OK.",
    "start": "5427533",
    "end": "5432366"
  },
  {
    "text": "So what I think-- esbuild.watch-- no.",
    "start": "5434133",
    "end": "5442000"
  },
  {
    "text": "esbuild.-- I think we have to create-- if I'm remembering the esbuild API, I think we have to do something like esbuild.context?",
    "start": "5443133",
    "end": "5450299"
  },
  {
    "text": "Yes, because this thing-- this is the advanced long-running form of build that",
    "start": "5454700",
    "end": "5460200"
  },
  {
    "text": "supports additional features, so just watch mode and a local development server. Yes, this is the thing.",
    "start": "5460200",
    "end": "5465566"
  },
  {
    "text": "OK, so this is the thing. Works in node, yes. Works in browser, no.",
    "start": "5465933",
    "end": "5469966"
  },
  {
    "text": "OK, so first, we want to create a context. And then we want to watch that context.",
    "start": "5473799",
    "end": "5482233"
  },
  {
    "text": "And I'm pretty sure this is resourceful, because I think you can actually close a context. So let's do--",
    "start": "5482933",
    "end": "5488333"
  },
  {
    "text": "and by the way, it's already an interesting question to inspect if we should",
    "start": "5490399",
    "end": "5496866"
  },
  {
    "text": "use esbuild for watching or the effect platform",
    "start": "5496866",
    "end": "5502066"
  },
  {
    "text": "watcher and just invoke esbuild or changes.",
    "start": "5502066",
    "end": "5504699"
  },
  {
    "text": "Yeah, I mean, I think it's definitely an interesting question, because we",
    "start": "5507333",
    "end": "5515133"
  },
  {
    "text": "could do that with this. I think that we're going to end up having--",
    "start": "5515133",
    "end": "5520633"
  },
  {
    "text": "I mean, we're going to have a separate file watcher anyways that's watching the actual document content itself.",
    "start": "5521966",
    "end": "5529899"
  },
  {
    "text": "I don't know. I feel like maybe we start with esbuild here. And then if we're",
    "start": "5532600",
    "end": "5537833"
  },
  {
    "text": "unsatisfied, we can always-- we can easily change this service to swap out",
    "start": "5537833",
    "end": "5544000"
  },
  {
    "text": "the implementation for a effect file watcher.",
    "start": "5544133",
    "end": "5549600"
  },
  {
    "text": "And also, I need to check if the file watcher from effect is recursive, because I",
    "start": "5550566",
    "end": "5556865"
  },
  {
    "text": "remember an issue created. The repository, it might not be recursive.",
    "start": "5556866",
    "end": "5562432"
  },
  {
    "text": "I don't think we support recursive yet. Which will be a problem for this.",
    "start": "5563100",
    "end": "5568500"
  },
  {
    "text": "Like, not for watching a single thing, but watch the actual content.",
    "start": "5569033",
    "end": "5572633"
  },
  {
    "text": "So here, we take and build options. And we actually want to modify the plugins.",
    "start": "5575200",
    "end": "5580000"
  },
  {
    "text": "So if we do this, that'll work.",
    "start": "5581466",
    "end": "5584566"
  },
  {
    "text": "And then I think we want to do a-- a pipe, andThen, then--",
    "start": "5587100",
    "end": "5598133"
  },
  {
    "text": "watch. I don't think we need to",
    "start": "5608233",
    "end": "5616633"
  },
  {
    "text": "pass in the options here, because I don't think we need any of them.",
    "start": "5616633",
    "end": "5621466"
  },
  {
    "text": "Oh, there. It's an empty object. No, it's great.",
    "start": "5624566",
    "end": "5626200"
  },
  {
    "text": "And then-- oh, actually, we want to tap this,",
    "start": "5629700",
    "end": "5636733"
  },
  {
    "text": "because here, we want context. I think there's a context.dispose, yes.",
    "start": "5636899",
    "end": "5644000"
  },
  {
    "text": "Is this a return of promise? Yes. And probably also the",
    "start": "5648633",
    "end": "5654199"
  },
  {
    "text": "watcher could be inside-- that is a promise, too.",
    "start": "5654200",
    "end": "5658700"
  },
  {
    "text": "Indeed. And we should decide if we want these to be defects or not,",
    "start": "5660200",
    "end": "5667199"
  },
  {
    "text": "because right now, we're elevating everything to a defect. Yeah, I mean, I think if",
    "start": "5667200",
    "end": "5672299"
  },
  {
    "text": "you don't find the config, well, arguable.",
    "start": "5672299",
    "end": "5677566"
  },
  {
    "text": "I import using import type. I did.",
    "start": "5679266",
    "end": "5681566"
  },
  {
    "text": "So now-- OK, so if we walk through what we've done here-- Does the watch just start the watch, or",
    "start": "5686500",
    "end": "5693666"
  },
  {
    "text": "does the watch wait? Or I don't know.",
    "start": "5693666",
    "end": "5697799"
  },
  {
    "text": "I think that it--",
    "start": "5700899",
    "end": "5702666"
  },
  {
    "text": "let me look. And also, by the way, this is a very--",
    "start": "5706233",
    "end": "5712933"
  },
  {
    "text": "we are acquiring one resource, and in the acquisition stage, we are doing another thing.",
    "start": "5713799",
    "end": "5720199"
  },
  {
    "text": "So if the watch fails, we end up leaking a resource, because we don't know those contexts.",
    "start": "5720200",
    "end": "5726333"
  },
  {
    "text": "So maybe here, we should just be acquiring the context and then watching it for a good step.",
    "start": "5726833",
    "end": "5731166"
  },
  {
    "text": "That was my point. That's a very good point. So let's-- I mean, it's an edge case.",
    "start": "5731933",
    "end": "5737933"
  },
  {
    "text": "So I'm quite-- it's probably-- it's never going to happen.",
    "start": "5738366",
    "end": "5742066"
  },
  {
    "text": "It's still a good thing to guard against, if we can, which we can. And this thing now--",
    "start": "5743533",
    "end": "5753833"
  },
  {
    "text": "We will see them clearer. And we-- do we want",
    "start": "5754233",
    "end": "5762200"
  },
  {
    "text": "to fork scope to this? Do we need to? No. Because watch-- I don't",
    "start": "5762200",
    "end": "5770466"
  },
  {
    "text": "think this is going to block. And I'm pretty sure-- I'll look at the documentation really quick.",
    "start": "5770466",
    "end": "5774733"
  },
  {
    "text": "Just build API watch. I know that you guys can't see my screen.",
    "start": "5776299",
    "end": "5782133"
  },
  {
    "text": "I'm sorry.",
    "start": "5782133",
    "end": "5782399"
  },
  {
    "text": "I'm pretty sure that watch--",
    "start": "5791433",
    "end": "5793333"
  },
  {
    "text": "by the way, I'm reading the documentation for watch. And it does say that it is possible to implement watch",
    "start": "5796933",
    "end": "5802100"
  },
  {
    "text": "mode yourself using ES Build's rebuild API and a file watcher library of your choice.",
    "start": "5802100",
    "end": "5807166"
  },
  {
    "text": "So just something for us to keep in mind. But I'm pretty sure watch runs at least--",
    "start": "5809500",
    "end": "5815432"
  },
  {
    "text": "runs when you call it. And then we'll watch the",
    "start": "5815933",
    "end": "5822000"
  },
  {
    "text": "file system for changes. We can double check.",
    "start": "5822000",
    "end": "5825233"
  },
  {
    "text": "OK. So now we have an ES Build",
    "start": "5828466",
    "end": "5837033"
  },
  {
    "text": "plugin that we've created. And we basically patch the plugins",
    "start": "5837033",
    "end": "5842633"
  },
  {
    "text": "that we pass in from the options. And what we're doing here is when the build ends,",
    "start": "5842633",
    "end": "5848233"
  },
  {
    "text": "we're checking if there were any build errors. And if there were, we're creating an ES build error and passing it to our queue.",
    "start": "5848233",
    "end": "5853533"
  },
  {
    "text": "Similarly, if there were no errors, we create a successful result and pass that to the queue.",
    "start": "5855200",
    "end": "5860500"
  },
  {
    "text": "And now we get access to the queue in the interface of our service.",
    "start": "5862666",
    "end": "5867299"
  },
  {
    "text": "So we basically now have ES Build running as a watcher for the content layer config,",
    "start": "5868233",
    "end": "5873200"
  },
  {
    "text": "passing all of its results to an effect queue. And then we can use that queue to basically do stuff.",
    "start": "5873933",
    "end": "5879333"
  },
  {
    "text": "And one of the ideas that I had had-- and I think Tim had",
    "start": "5880633",
    "end": "5885799"
  },
  {
    "text": "helped me implement this when we were rethinking",
    "start": "5885799",
    "end": "5890899"
  },
  {
    "text": "content layer at some point in the past--",
    "start": "5890899",
    "end": "5894532"
  },
  {
    "text": "was in effect, we have a little-known type called reloadable.",
    "start": "5896100",
    "end": "5903600"
  },
  {
    "text": "And I thought it would be cool to basically have--",
    "start": "5905700",
    "end": "5912066"
  },
  {
    "text": "so this plugin that we're adding essentially",
    "start": "5915100",
    "end": "5919500"
  },
  {
    "text": "watches the content layer config eventually",
    "start": "5920233",
    "end": "5924700"
  },
  {
    "text": "and puts its results into the queue. I thought it would be really cool to basically have",
    "start": "5925666",
    "end": "5931566"
  },
  {
    "text": "another service that's constantly watching that queue somehow and uses reloadable",
    "start": "5931733",
    "end": "5938166"
  },
  {
    "text": "to reload a service inside the environment that actually has the",
    "start": "5938166",
    "end": "5945299"
  },
  {
    "text": "resolved configuration. And we had to figure out a way to do that a while back.",
    "start": "5945299",
    "end": "5949966"
  },
  {
    "text": "I just have to remind myself how we did that. Probably using reloadable.",
    "start": "5950733",
    "end": "5956466"
  },
  {
    "text": "It was using reloadable. But I just have to-- might have to pull up that old code",
    "start": "5956933",
    "end": "5963033"
  },
  {
    "text": "and look at it while we do this.",
    "start": "5963333",
    "end": "5964633"
  },
  {
    "text": "But yeah, so this should already give us the ability to pass in",
    "start": "5968766",
    "end": "5974600"
  },
  {
    "text": "build options from the outside and watch a content layer config.",
    "start": "5974600",
    "end": "5977133"
  },
  {
    "text": "Are there still-- are there any errors here?",
    "start": "5980833",
    "end": "5985932"
  },
  {
    "text": "No, we're good.",
    "start": "5985933",
    "end": "5986433"
  },
  {
    "text": "So in config, we need to decide what",
    "start": "5991299",
    "end": "5997765"
  },
  {
    "text": "config looks like now, I think. I sort of think that",
    "start": "5997766",
    "end": "6003799"
  },
  {
    "text": "when we load a content layer configuration, if we think",
    "start": "6003799",
    "end": "6009533"
  },
  {
    "text": "the config file is basically just a file that exports all of our documents,",
    "start": "6009533",
    "end": "6013200"
  },
  {
    "text": "a resolved content layer configuration could just be an array of documents that we've loaded from",
    "start": "6015033",
    "end": "6020799"
  },
  {
    "text": "the content layer config. And it's like simplest. Right?",
    "start": "6020799",
    "end": "6024466"
  },
  {
    "text": "Yeah, I mean, we're going to get an ES module. So we're going to have to import that in some way",
    "start": "6028100",
    "end": "6034600"
  },
  {
    "text": "and then loop through the exports. Right.",
    "start": "6035633",
    "end": "6039600"
  },
  {
    "text": "So-- By the way, it makes another interesting point.",
    "start": "6041133",
    "end": "6047066"
  },
  {
    "text": "We probably need to add a digest",
    "start": "6049633",
    "end": "6053000"
  },
  {
    "text": "to make sure that two subsequent builds of the config don't end up with the same file.",
    "start": "6054899",
    "end": "6062100"
  },
  {
    "text": "Otherwise, when we import, we're going to have something cached.",
    "start": "6062666",
    "end": "6067599"
  },
  {
    "text": "Well, the nice thing is that the content layer--",
    "start": "6068733",
    "end": "6071933"
  },
  {
    "text": "the ES build-- the options, you have the",
    "start": "6074433",
    "end": "6079933"
  },
  {
    "text": "ability to specify a hash. Like you can put--",
    "start": "6079933",
    "end": "6084932"
  },
  {
    "text": "I think it's entry names or something like that is the name of the build option. But you can specify that",
    "start": "6086200",
    "end": "6092432"
  },
  {
    "text": "the file name that's output should include a hash. And so that kind of",
    "start": "6092433",
    "end": "6097500"
  },
  {
    "text": "automatically guards against--",
    "start": "6097500",
    "end": "6099000"
  },
  {
    "text": "What I was thinking about is, how do we guard against memory",
    "start": "6102533",
    "end": "6107633"
  },
  {
    "text": "leaks? Because if we're keeping importing modules, they remain imported for eternity.",
    "start": "6107733",
    "end": "6113933"
  },
  {
    "text": "Probably need a sandbox. And to import the stuff inside a sandbox.",
    "start": "6119533",
    "end": "6124600"
  },
  {
    "text": "Yeah, that'll be an interesting thing to look into.",
    "start": "6124933",
    "end": "6131866"
  },
  {
    "text": "Well, for the moment--",
    "start": "6138000",
    "end": "6144299"
  },
  {
    "text": "That's actually an interesting point. Yeah, kind of something interesting to think about.",
    "start": "6150500",
    "end": "6155833"
  },
  {
    "text": "Do dynamic imports assigned to variables clean up if those variables are cleaned up?",
    "start": "6157233",
    "end": "6163532"
  },
  {
    "text": "OK, so let's think about the config for a second.",
    "start": "6175666",
    "end": "6180500"
  },
  {
    "text": "Let me look at all my old code for a minute.",
    "start": "6184766",
    "end": "6187899"
  },
  {
    "text": "Right, right, right, right. We had a concept of a config loader service. And then we had a concept of a config watch.",
    "start": "6191533",
    "end": "6198833"
  },
  {
    "text": "So let's think about this for a second. So when we get--  when we get the esbuild result, we're",
    "start": "6203666",
    "end": "6216432"
  },
  {
    "text": "going to want to take that result. We're going to want to do some stuff with that result. And eventually, we're probably going",
    "start": "6216433",
    "end": "6222466"
  },
  {
    "text": "to want the array of loaded documents. We're also probably",
    "start": "6222466",
    "end": "6227799"
  },
  {
    "text": "going to want the hash. Because the es-- not like the-- not like the-- the hash.",
    "start": "6227799",
    "end": "6235100"
  },
  {
    "text": " The esbuild has it generated. Because we could probably use that for some degree of caching",
    "start": "6235100",
    "end": "6240199"
  },
  {
    "text": "as well.",
    "start": "6240200",
    "end": "6241200"
  },
  {
    "text": "But for now, maybe we can say--",
    "start": "6248833",
    "end": "6251500"
  },
  {
    "text": " Let's try this.",
    "start": "6256966",
    "end": "6261133"
  },
  {
    "text": "We want our esbuild service.",
    "start": "6273899",
    "end": "6276032"
  },
  {
    "text": "And we want to--",
    "start": "6279133",
    "end": "6281066"
  },
  {
    "text": "we basically-- so to build a config, we",
    "start": "6285100",
    "end": "6292966"
  },
  {
    "text": "might want to have-- OK, let's try this.",
    "start": "6292966",
    "end": "6295432"
  },
  {
    "text": "Const--",
    "start": "6299799",
    "end": "6300099"
  },
  {
    "text": "So this gives us a queue of esbuild results. We're probably going to want to be taking from this queue.",
    "start": "6337066",
    "end": "6345533"
  },
  {
    "text": "And we're probably going to want to do something with the results, like",
    "start": "6355233",
    "end": "6360733"
  },
  {
    "text": "build the actual configuration.",
    "start": "6360733",
    "end": "6364600"
  },
  {
    "text": "So let's just declare a stub.",
    "start": "6367600",
    "end": "6372233"
  },
  {
    "text": "It takes the end result, which is a--",
    "start": "6376399",
    "end": "6382032"
  },
  {
    "text": "esbuild results.",
    "start": "6386066",
    "end": "6387899"
  },
  {
    "text": "And we're probably going to want to do this with the background",
    "start": "6410200",
    "end": "6425399"
  },
  {
    "text": "fiber. Because what I'm thinking is we can have another--",
    "start": "6425466",
    "end": "6433200"
  },
  {
    "text": "basically an intermediary queue here that's taking everything from the queue of results that esbuild's giving us,",
    "start": "6433700",
    "end": "6439533"
  },
  {
    "text": "building the configuration, putting that result into a queue, which we can then expose.",
    "start": "6440299",
    "end": "6445666"
  },
  {
    "text": "And then we essentially have a service here that is constantly reading the updated",
    "start": "6445833",
    "end": "6454733"
  },
  {
    "text": "build configurations and giving us a queue",
    "start": "6454733",
    "end": "6464100"
  },
  {
    "text": "of configuration results.",
    "start": "6464100",
    "end": "6466000"
  },
  {
    "text": "And we can potentially--",
    "start": "6469866",
    "end": "6471233"
  },
  {
    "text": "I'm not sure if the intermediary queue makes sense. But we can basically reload this service.",
    "start": "6476133",
    "end": "6481233"
  },
  {
    "text": "We can basically reload this service any",
    "start": "6481266",
    "end": "6488033"
  },
  {
    "text": "time the configuration",
    "start": "6488033",
    "end": "6504133"
  },
  {
    "text": "changes. So this way, we don't have to reload esbuild every time.",
    "start": "6504133",
    "end": "6509899"
  },
  {
    "text": "We don't want to have to restart esbuild every single time.",
    "start": "6510799",
    "end": "6515466"
  },
  {
    "text": "Shut it down and restart it. We'd like esbuild to keep running. We can reload this service, which is",
    "start": "6516666",
    "end": "6522600"
  },
  {
    "text": "taking from the esbuild to queue and giving us",
    "start": "6522600",
    "end": "6528365"
  },
  {
    "text": "configuration results.",
    "start": "6528366",
    "end": "6529433"
  },
  {
    "text": "I'm not sure if queue is the correct way to go here. But humor me for a minute.",
    "start": "6534899",
    "end": "6539265"
  },
  {
    "text": "I'm just sketching out what I'm thinking here. And then you can tell me if it makes any sense",
    "start": "6603100",
    "end": "6607966"
  },
  {
    "text": "and how we can adjust this. But this is the effect content.",
    "start": "6608299",
    "end": "6623266"
  },
  {
    "text": "config effect on success.",
    "start": "6634166",
    "end": "6638666"
  },
  {
    "text": "Now here is where I think we can do something interesting. We could first-- first,",
    "start": "6640433",
    "end": "6648600"
  },
  {
    "text": "we can have a static layer. Live, which is a layer.scoped--",
    "start": "6648600",
    "end": "6653899"
  },
  {
    "text": "Let's make-- which we",
    "start": "6659299",
    "end": "6664733"
  },
  {
    "text": "can then do a layer.provide",
    "start": "6664733",
    "end": "6669933"
  },
  {
    "text": "And then we can also have a--",
    "start": "6678833",
    "end": "6681299"
  },
  {
    "text": "menual, I think. Yeah.",
    "start": "6693266",
    "end": "6698365"
  },
  {
    "text": "We're going to reload this manually, not on a schedule. And then the layer.",
    "start": "6698366",
    "end": "6701466"
  },
  {
    "text": "And then--",
    "start": "6727766",
    "end": "6730600"
  },
  {
    "text": "Okay. I don't know why reload has unknown in the error channel. There's gotta be a reason.",
    "start": "6858399",
    "end": "6863633"
  },
  {
    "text": "So anyways, the idea here would be that, like imagine like we're,",
    "start": "6870733",
    "end": "6879266"
  },
  {
    "text": "imagine like we're in the CLI and we can like use the",
    "start": "6880866",
    "end": "6885966"
  },
  {
    "text": "fact that CLI is like, there's like a provide commands to the CLI",
    "start": "6885966",
    "end": "6892299"
  },
  {
    "text": "where you can do like command, and you can use the, which is an arguments from the CLI",
    "start": "6892299",
    "end": "6897433"
  },
  {
    "text": "to actually inject context into the command handlers. You can do like config.reload",
    "start": "6897633",
    "end": "6902799"
  },
  {
    "text": "or reload.",
    "start": "6904666",
    "end": "6906899"
  },
  {
    "text": "You could...",
    "start": "6919933",
    "end": "6920733"
  },
  {
    "text": "Export a function.",
    "start": "6943000",
    "end": "6943666"
  },
  {
    "text": "Not sure I understand what we're doing to be honest. It's okay, you will",
    "start": "6953833",
    "end": "6959265"
  },
  {
    "text": "not, you might in a second. And if you don't, then we can just abandon this.",
    "start": "6959266",
    "end": "6963799"
  },
  {
    "text": "But I had written something similar to this in the past with Tim.",
    "start": "6964500",
    "end": "6969865"
  },
  {
    "text": "Basically the idea here now, and this watch method would be something that we could use",
    "start": "6973333",
    "end": "6977933"
  },
  {
    "text": "in like a command handler in the CLI to watch, like in like, for example,",
    "start": "6979666",
    "end": "6984865"
  },
  {
    "text": "in the watch mode for the CLI, where we have like FS fields.",
    "start": "6984866",
    "end": "6990733"
  },
  {
    "text": "Where we...",
    "start": "7011066",
    "end": "7011699"
  },
  {
    "text": "Like the above does not reload the config, reproduces a queue of conflicts.",
    "start": "7023299",
    "end": "7029433"
  },
  {
    "text": "- Yeah, I have to think about this more. I forget exactly what we did.",
    "start": "7031600",
    "end": "7036799"
  },
  {
    "text": "It was something like, we used the reload method here",
    "start": "7037566",
    "end": "7047100"
  },
  {
    "text": "whenever the content layer config file that was specified on the CLI changed.",
    "start": "7047100",
    "end": "7051933"
  },
  {
    "text": "And then we created a stream",
    "start": "7053500",
    "end": "7058200"
  },
  {
    "text": "where we like got, used this get method to get the",
    "start": "7061600",
    "end": "7067100"
  },
  {
    "text": "config results. But I can't, yeah, I have to remember exactly",
    "start": "7070366",
    "end": "7076000"
  },
  {
    "text": "what we did. But the idea would be to use reloadable somehow",
    "start": "7076799",
    "end": "7083000"
  },
  {
    "text": "to avoid reloading esbuild, but reload the config in the environment.",
    "start": "7084600",
    "end": "7088966"
  },
  {
    "text": "Whenever the... - Which this does not because you're providing esbuild to live",
    "start": "7091566",
    "end": "7097500"
  },
  {
    "text": "and the whole live is provided to reloadable. - Right. - So this will reload esbuild.",
    "start": "7097766",
    "end": "7104233"
  },
  {
    "text": "- Right. - Yeah, I have to think about this more, but that's kind of like the idea.",
    "start": "7104700",
    "end": "7110032"
  },
  {
    "text": "Yeah. Anyway, I am almost at time for myself.",
    "start": "7124133",
    "end": "7136399"
  },
  {
    "text": "- Yeah. - But I do feel like we made really good progress to know the document. I'm really happy that that API came",
    "start": "7136799",
    "end": "7142699"
  },
  {
    "text": "together very nicely. - And I was also searching if we can unload a module",
    "start": "7142700",
    "end": "7148566"
  },
  {
    "text": "from memory and the answer is no. So. - That's great.",
    "start": "7148566",
    "end": "7153532"
  },
  {
    "text": "- We need to see how. - Yeah, we're gonna have to figure that out. That's gonna be an interesting problem.",
    "start": "7154633",
    "end": "7160032"
  },
  {
    "text": "I bet you that that is, I don't know if content layer currently solves that.",
    "start": "7160033",
    "end": "7165100"
  },
  {
    "text": "So maybe that's why, especially in local development, maybe that's why things",
    "start": "7165533",
    "end": "7172333"
  },
  {
    "text": "start to degrade quickly. - Yeah, what I mean, there are ways of creating isolated VMs.",
    "start": "7172333",
    "end": "7180266"
  },
  {
    "text": "So the idea would be to create an isolated VM and let it run, but that also means",
    "start": "7181299",
    "end": "7186899"
  },
  {
    "text": "that we have to pick a runner because I'm not sure that the isolated VM runs",
    "start": "7188933",
    "end": "7196433"
  },
  {
    "text": "in BUN, in node. But I don't think that's a huge deal",
    "start": "7196766",
    "end": "7201833"
  },
  {
    "text": "because we could say that, yeah, our content, thing works in node.js for",
    "start": "7201933",
    "end": "7208733"
  },
  {
    "text": "the watch and everything else, you can consume the output from wherever you want.",
    "start": "7208733",
    "end": "7215100"
  },
  {
    "text": "So that might not be a big deal, but an interesting thing to explore.",
    "start": "7215700",
    "end": "7223133"
  },
  {
    "text": "- Yeah, I might hack a little bit on this off stream again, and then obviously we can, I'll let you guys know",
    "start": "7224133",
    "end": "7230566"
  },
  {
    "text": "if any changes are made. But yeah, it's kind of,",
    "start": "7230566",
    "end": "7236233"
  },
  {
    "text": "there's a ton of interesting problems, I feel like that will come up as we're going through this. The module loading obviously being one, but yeah.",
    "start": "7236566",
    "end": "7245966"
  },
  {
    "text": "Cool. - Good. Thank you everybody for being here. I hope you guys enjoyed the stream. We started to actually",
    "start": "7248266",
    "end": "7253365"
  },
  {
    "text": "get into some effect code. At least we built an ES build watch plugin.",
    "start": "7253366",
    "end": "7259200"
  },
  {
    "text": "So yeah, hope everybody enjoyed it and we'll see you next time. - See you folks.",
    "start": "7261266",
    "end": "7265966"
  },
  {
    "text": "Thanks, Max",
    "start": "7266433",
    "end": "7266833"
  }
]