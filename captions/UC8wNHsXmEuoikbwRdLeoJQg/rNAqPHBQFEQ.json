[
  {
    "start": "0",
    "end": "193000"
  },
  {
    "text": "like the dependency injection, like dependency management as well. It's just so great with Effect.",
    "start": "83",
    "end": "7208"
  },
  {
    "text": "I feel like I'm much more incentivized to write unit tests and I don't know how other people",
    "start": "7416",
    "end": "13583"
  },
  {
    "text": "think about engineers at companies like Zendesk and like Facebook and Google, like big companies",
    "start": "13583",
    "end": "21250"
  },
  {
    "text": "like how they deal with these things on a day-to-day basis. In the end, like it doesn't matter how skillful or experienced you are.",
    "start": "21250",
    "end": "29208"
  },
  {
    "text": "It comes down to incentives all the time. Like you do things that you are more incentivized to do.",
    "start": "29208",
    "end": "35458"
  },
  {
    "text": "So, If a language or a framework or a library makes something really easy to do,",
    "start": "35458",
    "end": "42083"
  },
  {
    "text": "you will do it regardless, whether it's the right thing to do or the wrong thing to do.",
    "start": "42291",
    "end": "46500"
  },
  {
    "text": "Welcome to \"Cause & Effect,\" a podcast about Effect, the TypeScript library, and ecosystem helping engineers build",
    "start": "49541",
    "end": "56458"
  },
  {
    "text": "production-ready software. I'm your host, Johannes Schickling, and I've been building with",
    "start": "56458",
    "end": "61583"
  },
  {
    "text": "Effect for over four years. With this podcast, I want to help others understand the benefits",
    "start": "61583",
    "end": "67083"
  },
  {
    "text": "and powers of using Effect. In this episode, I'm talking to Attila Večerek, a tech lead at Zendesk",
    "start": "67250",
    "end": "74041"
  },
  {
    "text": "and long-term user of Effect. In this conversation, we talk about the challenges of building production-grade",
    "start": "74291",
    "end": "79791"
  },
  {
    "text": "software in TypeScript and how Zendesk ended up adopting Effect in one of their main products,",
    "start": "79791",
    "end": "85541"
  },
  {
    "text": "serving millions of users every day. Let's get into it. Welcome Attila to the very first episode",
    "start": "85541",
    "end": "92166"
  },
  {
    "text": "of the Cause & Effect Podcast. How are you doing? Thank you. Thank you, Johannes.",
    "start": "92166",
    "end": "97583"
  },
  {
    "text": "I'm so happy to be here. Uh, I'm doing pretty well. Thank you. How about you? I'm doing fantastic.",
    "start": "97750",
    "end": "103041"
  },
  {
    "text": "Really looking forward to doing this podcast and to do it together with you since I think we've been in",
    "start": "103416",
    "end": "109333"
  },
  {
    "text": "touch now for quite a while. We met like half a year ago, also for the first time in person at the",
    "start": "109333",
    "end": "115875"
  },
  {
    "text": "first Effect Conference in Vienna. And yeah, really excited to do this together and share more",
    "start": "115875",
    "end": "122125"
  },
  {
    "text": "your story of like discovering Effect and using Effect. So you're using Effect at Zendesk, but",
    "start": "122125",
    "end": "128875"
  },
  {
    "text": "would you mind giving a quick introduction of who you are? What is your role at Zendesk?",
    "start": "128875",
    "end": "134916"
  },
  {
    "text": "What have you done before? And then we can dive deeper. Sure thing. Hey everyone.",
    "start": "134916",
    "end": "140125"
  },
  {
    "text": "My name is Attila, Attila Večerek and I've been at Zendesk for almost seven years.",
    "start": "140291",
    "end": "146708"
  },
  {
    "text": "It's going to be seven years exactly this year in October. Currently I'm a tech lead at a",
    "start": "146708",
    "end": "152375"
  },
  {
    "text": "team in the Guide organization, which is responsible for the",
    "start": "152375",
    "end": "158416"
  },
  {
    "text": "help center part of Zendesk. So, if you see any help center",
    "start": "158416",
    "end": "163915"
  },
  {
    "text": "articles or community and stuff like that, that's, that's what I do. And most recently I also got the",
    "start": "163916",
    "end": "171125"
  },
  {
    "text": "responsibility of re-vamping our customer satisfaction feature. which is one of our most used",
    "start": "171125",
    "end": "177583"
  },
  {
    "text": "features besides like the core product, which is ticketing itself. And yeah, I'm very excited about that.",
    "start": "177583",
    "end": "183083"
  },
  {
    "text": "And that's actually the feature which is built using Effect. That sounds awesome.",
    "start": "183458",
    "end": "188833"
  },
  {
    "text": "Yeah. I'm excited to hear more about that and go in depth, but would you mind describing a bit more of, given",
    "start": "189000",
    "end": "195250"
  },
  {
    "start": "193000",
    "end": "365000"
  },
  {
    "text": "that, there are, I think, several thousands of engineers at Zendesk and not all code there is written",
    "start": "195250",
    "end": "202665"
  },
  {
    "text": "with Effect, that might change at some point, but would you mind giving a quick overview of, what it means to",
    "start": "202916",
    "end": "210458"
  },
  {
    "text": "be an engineer at Zendesk? So Zendesk is really large, we have many sub orgs and, or",
    "start": "210458",
    "end": "217291"
  },
  {
    "text": "departments and each of them, even at the team level, like there are huge differences, we're truly a polyglot",
    "start": "217291",
    "end": "224665"
  },
  {
    "text": "company when it comes to languages and different kinds of tech stacks. I still think most of our code is",
    "start": "224666",
    "end": "231333"
  },
  {
    "text": "still written in Ruby. The company started with Ruby and Ruby on Rails specifically.",
    "start": "231333",
    "end": "236833"
  },
  {
    "text": "We have two large Ruby monoliths. both of them I have to interact with from time to time.",
    "start": "237541",
    "end": "242750"
  },
  {
    "text": "That's, that's always an interesting experience, especially when you've been working with Effect",
    "start": "243083",
    "end": "248541"
  },
  {
    "text": "for a while and then you have to go back to Ruby and like, Oh, okay. Things are a little bit different here.",
    "start": "248541",
    "end": "253958"
  },
  {
    "text": "But besides Ruby, there's also like a ton of Java, some Scala, some",
    "start": "254500",
    "end": "260165"
  },
  {
    "text": "Golang, yeah, and obviously TypeScript mostly for front-end, but, we have also some companies that we acquired",
    "start": "260166",
    "end": "267041"
  },
  {
    "text": "who brought in a lot of backend TypeScript. And yeah, we have some, some of the",
    "start": "267041",
    "end": "272916"
  },
  {
    "text": "TypeScript on the backend in Guide as well. So it sounds like Ruby has always",
    "start": "272916",
    "end": "279041"
  },
  {
    "text": "been the majority of code and still is. Is there any technology, any language that you feel like is really,",
    "start": "279041",
    "end": "285707"
  },
  {
    "text": "on its way in and might replace Ruby as the primary language maybe at some point?",
    "start": "286291",
    "end": "291166"
  },
  {
    "text": "That's really hard to tell. I don't think Ruby will go away ever. These huge monoliths, they're here to",
    "start": "291708",
    "end": "299583"
  },
  {
    "text": "stay with us for until Zendesk will exist. I'm pretty sure of that. We had some initial thoughts of breaking",
    "start": "299583",
    "end": "307291"
  },
  {
    "text": "the monoliths down, but it's really hard to justify these efforts, when it comes to product and, and like the",
    "start": "307291",
    "end": "314000"
  },
  {
    "text": "business needs of the company. So for all the startups out there, like if you start with a technology",
    "start": "314291",
    "end": "320875"
  },
  {
    "text": "and you become like large company and really largely successful, all the",
    "start": "321041",
    "end": "326083"
  },
  {
    "text": "tech that, that you accumulate for all those years, that's going to probably stay there for, for a while.",
    "start": "326083",
    "end": "331333"
  },
  {
    "text": "So yeah, maybe, maybe think about twice about what you start with. Not all this tiny decisions, but like the",
    "start": "331500",
    "end": "338333"
  },
  {
    "text": "major ones, it's, it's good to put some thought into it. Oh yeah, for sure. But I mean, Zendesk is a very,",
    "start": "338333",
    "end": "345750"
  },
  {
    "text": "profitable and very great company. So I suppose it wasn't the worst stack decision.",
    "start": "345750",
    "end": "351583"
  },
  {
    "text": "If it led Zendesk to this point today and given that you, are also",
    "start": "351750",
    "end": "357125"
  },
  {
    "text": "now leaning more into TypeScript, I think there there's, you can probably use the best tools for the appropriate jobs.",
    "start": "357125",
    "end": "364791"
  },
  {
    "start": "365000",
    "end": "790000"
  },
  {
    "text": "But speaking of TypeScript, I think this is one example of like a theme that I'm noticing, which is that you seem",
    "start": "365333",
    "end": "372541"
  },
  {
    "text": "to challenge the status quo a bit. when it comes to engineering within Zendesk where you see, okay,",
    "start": "372541",
    "end": "379041"
  },
  {
    "text": "this is how things are done. And then, you seem to, send some ways to do things possibly better.",
    "start": "379041",
    "end": "386250"
  },
  {
    "text": "And this is, I think we're using some colleagues, if I understood correctly have, at some point looked",
    "start": "386250",
    "end": "392416"
  },
  {
    "text": "at TypeScript and said, actually, this is a bet worth making. Can you share that anecdote?",
    "start": "392416",
    "end": "397000"
  },
  {
    "text": "Yeah, sure thing. So maybe just to understand for maybe people who are not familiar with Ruby on Rails, Ruby is a",
    "start": "397583",
    "end": "404916"
  },
  {
    "text": "dynamic programming language. It's great for really one engineer or tiny teams that know the code",
    "start": "404958",
    "end": "413416"
  },
  {
    "text": "base by heart, it makes them really efficient. So productivity wise, it's, it's terrific.",
    "start": "413458",
    "end": "419000"
  },
  {
    "text": "So starting with Ruby for Zendesk was definitely a good bet. It allowed them to have like a",
    "start": "419375",
    "end": "425750"
  },
  {
    "text": "velocity in the beginning that was absolutely crucial to become successful. But you know, working with a dynamic",
    "start": "425750",
    "end": "433250"
  },
  {
    "text": "type language, especially like with a heavy OOP focus where you have",
    "start": "433250",
    "end": "439416"
  },
  {
    "text": "lots of like design patterns. I'm not sure if you have worked with",
    "start": "439416",
    "end": "444707"
  },
  {
    "text": "teams where people would argue like, Oh, you know what, for this feature, we should",
    "start": "444708",
    "end": "449750"
  },
  {
    "text": "use this design pattern. And then the other side would be arguing, no, no, no, uh, look at,",
    "start": "449750",
    "end": "454958"
  },
  {
    "text": "switch your mentality. Like, you have to look at the problem this way and then they bring up adapters and whatnot.",
    "start": "455208",
    "end": "461458"
  },
  {
    "text": "And DDD and all these things. At a certain scale, it becomes fighting an uphill battle all the time because you",
    "start": "461625",
    "end": "469625"
  },
  {
    "text": "have to be fully aligned with all the people who work on the code base. You have to agree on these things.",
    "start": "469625",
    "end": "476083"
  },
  {
    "text": "Like what are the design patterns that we are introducing? Okay. Are we shifting to a different design pattern?",
    "start": "476083",
    "end": "481250"
  },
  {
    "text": "Are we re-architecting redesigning our modules? Are we taking out and extracting reusable modules?",
    "start": "481625",
    "end": "488375"
  },
  {
    "text": "And how do we do that? Are we doing some, you know, some module boundaries within rails and",
    "start": "488375",
    "end": "494375"
  },
  {
    "text": "use rails engines or some other ways of enforcing these module boundaries? So all of these decisions, like you",
    "start": "494375",
    "end": "500583"
  },
  {
    "text": "really have to pull the same rope in the same direction and then it's good. But at some point, now let's say you have",
    "start": "500583",
    "end": "507250"
  },
  {
    "text": "this huge monolith, which we have, and you have 50 people or even hundreds and thousands of",
    "start": "507250",
    "end": "512916"
  },
  {
    "text": "people contributing to it. Having this alignment across the entire organization is really hard.",
    "start": "512916",
    "end": "518958"
  },
  {
    "text": "So what you end up having is a mixed bag of things and, you know, parts of",
    "start": "519333",
    "end": "524833"
  },
  {
    "text": "the repo, use one design better. Another part uses another one. And then there's this new design better",
    "start": "524875",
    "end": "531416"
  },
  {
    "text": "that you're pushing for some modularization and then that's a migration. And then there's tons of migrations going",
    "start": "531416",
    "end": "538208"
  },
  {
    "text": "on at all time, like five, 10, 15 different types of migrations in a code base.",
    "start": "538208",
    "end": "544125"
  },
  {
    "text": "And then let's say you're a contributor who just wants to implement like a tiny",
    "start": "544458",
    "end": "549541"
  },
  {
    "text": "bit of a feature, which is necessary in that repo so that the other service can",
    "start": "549666",
    "end": "555125"
  },
  {
    "text": "communicate with it. I don't know. You, let's say you want to emit some events from the main monolith and then over",
    "start": "555125",
    "end": "561625"
  },
  {
    "text": "Kafka or over whatever message bus so that you can consume those events in your microservice.",
    "start": "561625",
    "end": "568083"
  },
  {
    "text": "Well, suddenly you'll see five or six different examples of how to emit domain events, or Kafka.",
    "start": "568250",
    "end": "574416"
  },
  {
    "text": "So what do you do then? How do you find the people, that know what's the current status quo, or",
    "start": "574791",
    "end": "582500"
  },
  {
    "text": "will you just blindly pick the one that is the most prominent? I mean, that's, there's no problem going",
    "start": "582500",
    "end": "588541"
  },
  {
    "text": "with that route either, because if it's the most prominent thing and let's say it's something that",
    "start": "588541",
    "end": "593708"
  },
  {
    "text": "we're moving away from. You can just commit to that and it will be moved away from with the rest.",
    "start": "593708",
    "end": "598875"
  },
  {
    "text": "But then, you know, if you pick something in between, then that also brings the risks that the people who are doing that",
    "start": "599333",
    "end": "605666"
  },
  {
    "text": "migration will just have bigger and bigger headaches because now they need to",
    "start": "605666",
    "end": "610958"
  },
  {
    "text": "migrate different kinds of ways of doing things into this one, one way of doing thing. so these are the biggest problems",
    "start": "610958",
    "end": "617458"
  },
  {
    "text": "that I see with Ruby, alignment, constantly fighting an uphill battle.",
    "start": "617458",
    "end": "622291"
  },
  {
    "text": "You introduce a new feature, but at the same time you introduce a bug because you miss something and there's constant",
    "start": "623083",
    "end": "629541"
  },
  {
    "text": "action at the distance. You change one part of the application, which has some unforeseen or unpredictable",
    "start": "629541",
    "end": "635125"
  },
  {
    "text": "effects on another part of the application because everything is reusing everything.",
    "start": "635583",
    "end": "641208"
  },
  {
    "text": "That makes a lot of sense. So it rather sounds like you're, you're running into some like social",
    "start": "641750",
    "end": "647583"
  },
  {
    "text": "alignment issues where you just have so many engineers, like an all probably very",
    "start": "647833",
    "end": "652833"
  },
  {
    "text": "brilliant and with like the best intentions trying to design it with their understanding of the world.",
    "start": "652916",
    "end": "658583"
  },
  {
    "text": "But if you have thousands of engineers, this can lead to some, some very wild",
    "start": "658583",
    "end": "663958"
  },
  {
    "text": "different directions and to enforce that alignment, I think if you're, if you don't",
    "start": "664083",
    "end": "669375"
  },
  {
    "text": "have a types type system at your disposal to help with that, to be even aware of",
    "start": "669500",
    "end": "675250"
  },
  {
    "text": "like, Hey, here's like some divergence. We're unopigniated maybe, or we tolerate both, but even to have some",
    "start": "675250",
    "end": "681958"
  },
  {
    "text": "visibility into this and help drive the alignment. I think this is where a",
    "start": "681958",
    "end": "687208"
  },
  {
    "text": "type system can help a lot. And I suppose that is what's what has made you so interested in TypeScript.",
    "start": "687208",
    "end": "692458"
  },
  {
    "text": "Yes, absolutely. So that, that was one of the biggest driving forces behind the adoption of some language",
    "start": "693916",
    "end": "700333"
  },
  {
    "text": "that is statically typed. it has tons of benefits, not just like this alignment. Very recently, I just actually had to",
    "start": "700333",
    "end": "707375"
  },
  {
    "text": "go into one of these large Ruby monoliths and there's a feature flag",
    "start": "707375",
    "end": "712791"
  },
  {
    "text": "that I introduced and some different behavior for when the feature flag is enabled and now this feature flag has",
    "start": "712791",
    "end": "719916"
  },
  {
    "text": "been rolled out fully for, for some months now. So I was looking into removing the,",
    "start": "719916",
    "end": "726583"
  },
  {
    "text": "if.else branch for the feature flag to keep only the logic that's basically",
    "start": "726583",
    "end": "732291"
  },
  {
    "text": "used now that it's fully rolled out and by removing that one line of",
    "start": "732291",
    "end": "737708"
  },
  {
    "text": "code, I broke like hundreds of unit tests. Because the unit tests had no idea that",
    "start": "737708",
    "end": "744500"
  },
  {
    "text": "there was like a dependency on some HTTP call somewhere down the line.",
    "start": "744500",
    "end": "750041"
  },
  {
    "text": "So now I have to find like a place where I can maybe permanently mock this call to",
    "start": "750291",
    "end": "757125"
  },
  {
    "text": "a specific endpoint for all the tests forever, because I cannot pinpoint like the",
    "start": "757125",
    "end": "762666"
  },
  {
    "text": "hundreds of different places where this is exactly called. So I have to mock it like on a general level.",
    "start": "762875",
    "end": "768500"
  },
  {
    "text": "So, so these are also kinds of issues that you bump into and using languages and",
    "start": "769000",
    "end": "774291"
  },
  {
    "text": "frameworks like this which is going to be another segway into Effect, I guess, later on with the",
    "start": "774291",
    "end": "780291"
  },
  {
    "text": "dependency injection. Yeah, most certainly. So it sounds like you're building production grade software at scale at",
    "start": "780291",
    "end": "789541"
  },
  {
    "text": "Zendesk in many different flavors, many different technologies, but at some",
    "start": "789583",
    "end": "794666"
  },
  {
    "start": "790000",
    "end": "1222000"
  },
  {
    "text": "point you've introduced TypeScript and that's the foundation for the services and products you're building.",
    "start": "794666",
    "end": "800708"
  },
  {
    "text": "What was that that journey like? So you now have a type system to help",
    "start": "801083",
    "end": "806750"
  },
  {
    "text": "with many things, but I suppose it still has not given you the silver bullet that",
    "start": "806750",
    "end": "812250"
  },
  {
    "text": "makes it super easy to build production grade software. So what are some of the challenges you",
    "start": "812250",
    "end": "818291"
  },
  {
    "text": "were still facing and possibly still face today and were you reaching for Effect?",
    "start": "818291",
    "end": "822875"
  },
  {
    "text": "So if I have to reflect back on the time when we were introducing TypeScript at guide for the first time, I think",
    "start": "823375",
    "end": "829833"
  },
  {
    "text": "obviously what we wanted to avoid where all of these problems that come with, uh, shared monoliths. We just wanted some",
    "start": "829833",
    "end": "836583"
  },
  {
    "text": "some service, which is nicely isolated and we have our own deployment schedule, which",
    "start": "836583",
    "end": "842375"
  },
  {
    "text": "is basically on demand. We don't need to deploy it on a weekly or biweekly cycles.",
    "start": "842375",
    "end": "848083"
  },
  {
    "text": "And then of course the maintenance, improvements, because now you have a type system, so if you make a change in one",
    "start": "848083",
    "end": "853625"
  },
  {
    "text": "place, the compiler will aid you in updating all the other call sites.",
    "start": "853625",
    "end": "860083"
  },
  {
    "text": "So that, that was obviously one thing. But we also wanted to make sure that we don't get into these like reliability",
    "start": "860375",
    "end": "867541"
  },
  {
    "text": "issues that we were having with the box. So like type safety was really important for us.",
    "start": "867708",
    "end": "873166"
  },
  {
    "text": "Then we're looking into how to, because there are many different ways how you can write TypeScript, right?",
    "start": "873791",
    "end": "879250"
  },
  {
    "text": "Like you can be really lenient and allow any. Right. You can typecast here and there.",
    "start": "879250",
    "end": "885041"
  },
  {
    "text": "The language is quite flexible. You can use as much type safety as you want, or you can",
    "start": "885166",
    "end": "891333"
  },
  {
    "text": "go towards the other end of the spectrum and use like the most brutal compiler",
    "start": "891333",
    "end": "897666"
  },
  {
    "text": "options that are out there and make it super, super type safe. And then you even start thinking about,",
    "start": "897666",
    "end": "904041"
  },
  {
    "text": "okay, how do we do end to end type safety? Right. Because there are certain things that come out of your system.",
    "start": "904041",
    "end": "910083"
  },
  {
    "text": "Like on these boundaries of your system, you have a HTTP request coming in. Maybe HTTP request going out.",
    "start": "910500",
    "end": "916958"
  },
  {
    "text": "Kafka message coming in. Like you need to parse these and at the inbound of your system, you have to",
    "start": "917791",
    "end": "926416"
  },
  {
    "text": "be able to work with it with a static type. Right. So, so how do you do all of these things?",
    "start": "926416",
    "end": "932541"
  },
  {
    "text": "Rolling it manually is really tedious with all the type checks at runtime.",
    "start": "932583",
    "end": "938083"
  },
  {
    "text": "Especially if you have like really complex objects it is really hard to do that. So obviously you can compose like start",
    "start": "938416",
    "end": "945333"
  },
  {
    "text": "at the leaves and then build up all of these, but that's a lot of work. So we started looking into other,",
    "start": "945333",
    "end": "951541"
  },
  {
    "text": "like maybe even, even other programming paradigms like with, with Ruby, like of",
    "start": "951541",
    "end": "956833"
  },
  {
    "text": "course there's like a ton of OOP stuff, but then with TypeScript, we were realizing, oh, okay, maybe we can actually leverage",
    "start": "956833",
    "end": "963916"
  },
  {
    "text": "like, some functional programming concepts to build more composable software.",
    "start": "964166",
    "end": "969083"
  },
  {
    "text": "Because one TypeScript service was not our goal. We were already thinking in multiple",
    "start": "969625",
    "end": "975041"
  },
  {
    "text": "TypeScript services and in the end it did become reality and then we wanted to share code in between them.",
    "start": "975041",
    "end": "981000"
  },
  {
    "text": "And then how do you do that? Well, we came up with a mono repo of",
    "start": "981000",
    "end": "986083"
  },
  {
    "text": "different libraries that we can use that implement like Zendesk concerns, things",
    "start": "986083",
    "end": "992083"
  },
  {
    "text": "like sharded database clients that know how to connect to our sharded database and yeah,",
    "start": "992083",
    "end": "999416"
  },
  {
    "text": "many, many other libraries like this, these internal ones, these productivity booster ones.",
    "start": "999416",
    "end": "1004625"
  },
  {
    "text": "So we started implementing those and then we're like, okay, but they are like different libraries like suddenly they have this",
    "start": "1004916",
    "end": "1012083"
  },
  {
    "text": "library has this API. This library has another one. I want to use them in combination. And then you think about how to",
    "start": "1012083",
    "end": "1018500"
  },
  {
    "text": "hype all the APIs in the way that they nicely flow. So that's when one of my colleagues found",
    "start": "1018500",
    "end": "1024583"
  },
  {
    "text": "fp-ts and that sounded really great. Obviously it had a huge learning curve for us.",
    "start": "1024583",
    "end": "1030000"
  },
  {
    "text": "None of us were really much into functional programming. I only remembered some stuff from",
    "start": "1030250",
    "end": "1035625"
  },
  {
    "text": "university, but definitely have it, haven't had like hands-on experience and then learning fp-ts",
    "start": "1035625",
    "end": "1042416"
  },
  {
    "text": "like people who learned it, they probably know how hard it is because you don't have like real documentation.",
    "start": "1042416",
    "end": "1048750"
  },
  {
    "text": "You have like API interface documentation. What gave you the confidence to take the",
    "start": "1049041",
    "end": "1055250"
  },
  {
    "text": "leap of faith to go to reach for fp-ts and make that the foundation for your libraries?",
    "start": "1055250",
    "end": "1061125"
  },
  {
    "text": "Um, desperation. I don't know.",
    "start": "1061250",
    "end": "1064875"
  },
  {
    "text": "I was just really, I think we all just wanted to avoid another monolith.",
    "start": "1066333",
    "end": "1072166"
  },
  {
    "text": "And obviously we, we cared a lot about these tiny libraries that were meant to be",
    "start": "1072666",
    "end": "1078916"
  },
  {
    "text": "shared across the different services and different services need to do different things, right?",
    "start": "1078916",
    "end": "1084000"
  },
  {
    "text": "Like they're in a different domain. So it's really hard to predict what API is the right one.",
    "start": "1084000",
    "end": "1088833"
  },
  {
    "text": "So as long as we can stick to something and make it composable, that should work for",
    "start": "1089125",
    "end": "1095000"
  },
  {
    "text": "most of the cases. I mean, that was at least our idea. The execution was rough.",
    "start": "1095000",
    "end": "1100916"
  },
  {
    "text": "We were iterating on this group of libraries and we followed, versioning a strategy that would version each library.",
    "start": "1101291",
    "end": "1110083"
  },
  {
    "text": "At the same time. So even if we make a change in one library, we would bump the version of all the",
    "start": "1110083",
    "end": "1115375"
  },
  {
    "text": "libraries just to make it easier for the consumers to understand what version of one library works with another.",
    "start": "1115375",
    "end": "1121625"
  },
  {
    "text": "So we opted for this and then the iteration was so fast on these APIs.",
    "start": "1121958",
    "end": "1127875"
  },
  {
    "text": "We just kept in introducing breaking changes all the time because we discovered new and new ways",
    "start": "1128166",
    "end": "1134416"
  },
  {
    "text": "of using these libraries. And so within the span of three years, I",
    "start": "1134416",
    "end": "1140666"
  },
  {
    "text": "think we went from version zero to version 27. Our consumers were not happy about this.",
    "start": "1140666",
    "end": "1146250"
  },
  {
    "text": "Let's just say this. Right. So I suppose fp-ts at that point was already quite the pill to swallow for",
    "start": "1146791",
    "end": "1153458"
  },
  {
    "text": "you all where you convinced yourself to do it, but then to have other API consumers that did not intentionally say",
    "start": "1154166",
    "end": "1161458"
  },
  {
    "text": "like, yes, we want to bring in fp-ts into our life, but that's just the way how you offered it to them.",
    "start": "1161458",
    "end": "1167875"
  },
  {
    "text": "That was probably even, even trickier. So, but that's what you started out with. And I suppose you, you chose that for",
    "start": "1168250",
    "end": "1175583"
  },
  {
    "text": "the, for very understandable reasons, such as the dream of composability and code",
    "start": "1175583",
    "end": "1181875"
  },
  {
    "text": "reuse and making all your systems more resilient, but it came at a price of",
    "start": "1181875",
    "end": "1188083"
  },
  {
    "text": "like a rather esoteric flavor, particularly for the ones who were not",
    "start": "1188083",
    "end": "1194166"
  },
  {
    "text": "getting up in the morning saying, yes, I want to do functional programming, but you just want to do proper programming,",
    "start": "1194166",
    "end": "1201458"
  },
  {
    "text": "uh, maybe in TypeScript. So, and if I understand correctly, this",
    "start": "1201666",
    "end": "1206708"
  },
  {
    "text": "is where you have been kind of like running into growing pains of fp-ts and",
    "start": "1206708",
    "end": "1212500"
  },
  {
    "text": "building larger systems out of this. And at some point you found Effect.",
    "start": "1212500",
    "end": "1217875"
  },
  {
    "text": "So tell me about that. Oh yeah. So that, yes. So basically with this fp-ts we",
    "start": "1218000",
    "end": "1224708"
  },
  {
    "start": "1222000",
    "end": "1519000"
  },
  {
    "text": "were trying to build something similar to Effect. We wanted to have a system which allowed",
    "start": "1224708",
    "end": "1230833"
  },
  {
    "text": "our consumers to do proper dependency injection with all the config that we",
    "start": "1230833",
    "end": "1236500"
  },
  {
    "text": "provided so that when they start their program, like if the config is wrong, it",
    "start": "1236500",
    "end": "1241958"
  },
  {
    "text": "will just not deploy. We want it to eliminate as many foot guns as possible.",
    "start": "1241958",
    "end": "1247416"
  },
  {
    "text": "Obviously resource management was another big thing that we were looking into. Like how do you properly handle like all",
    "start": "1247625",
    "end": "1254458"
  },
  {
    "text": "the interrupt signals coming from Kubernetes when it's trying to kill or restart your container.",
    "start": "1254458",
    "end": "1260416"
  },
  {
    "text": "These things. They require a lot of effort and they're",
    "start": "1260708",
    "end": "1266375"
  },
  {
    "text": "not easy things to do, especially if you want highly composable solution.",
    "start": "1266375",
    "end": "1271416"
  },
  {
    "text": "So I think one of my colleagues, was my partner in crime when it came to introducing fp-ts to the",
    "start": "1271791",
    "end": "1280208"
  },
  {
    "text": "organization at large, he found Effect. I don't know how he found it, but he found it and it was maybe in 2021.",
    "start": "1280208",
    "end": "1288375"
  },
  {
    "text": "I don't remember. I'm so bad with years, especially because it was like the pandemic there. And suddenly like two",
    "start": "1288958",
    "end": "1295708"
  },
  {
    "text": "years felt like one or half. But around the time, it was weird.",
    "start": "1295708",
    "end": "1302416"
  },
  {
    "text": "Time flow flew, flew differently. But he did found it and it wasn't",
    "start": "1303500",
    "end": "1308708"
  },
  {
    "text": "like we were jumping on it immediately because at the time there wasn't really",
    "start": "1308708",
    "end": "1314125"
  },
  {
    "text": "such a huge buzz around it. Like it is nowadays. Also didn't have a stable API.",
    "start": "1314125",
    "end": "1321666"
  },
  {
    "text": "So we were for about at least a year, we were mostly observing Effect from the sidelines, we didn't talk to also no",
    "start": "1322166",
    "end": "1328791"
  },
  {
    "text": "documentation at that point yet. Yeah, exactly. It was just another fp-ts for us",
    "start": "1328791",
    "end": "1335291"
  },
  {
    "text": "from the sidelines looking at it, but it looked way better than fp-ts it",
    "start": "1335291",
    "end": "1340541"
  },
  {
    "text": "looked like, okay, this is not just abstractions, this is also some implementation.",
    "start": "1340541",
    "end": "1345875"
  },
  {
    "text": "Finally, something that makes our lives easier. It's like a general programming framework, how to build like resilient",
    "start": "1346041",
    "end": "1352791"
  },
  {
    "text": "services and all the dependency injection resource management,",
    "start": "1352958",
    "end": "1359541"
  },
  {
    "text": "configuration management, building the layers of dependencies. That's all taken care of for you.",
    "start": "1359541",
    "end": "1365541"
  },
  {
    "text": "So, so that looked really promising. And as I mentioned, like for a year, we",
    "start": "1365541",
    "end": "1371250"
  },
  {
    "text": "were just looking and watching, Effect and its development. And then later when it felt like, okay,",
    "start": "1371250",
    "end": "1378041"
  },
  {
    "text": "now, now it seems like it's, it's like stabilizing around some sort of an API.",
    "start": "1378041",
    "end": "1382375"
  },
  {
    "text": "We still don't really agree with some namings, of some concepts, which then also changed name and everything.",
    "start": "1383250",
    "end": "1389958"
  },
  {
    "text": "And now it's like much, much better. But we were, that that's, that's when we started to seriously",
    "start": "1390250",
    "end": "1396208"
  },
  {
    "text": "consider adopting it on some, some project. We didn't really know which project should it be.",
    "start": "1396375",
    "end": "1402333"
  },
  {
    "text": "We didn't really want to go right into the migration of an existing fp-ts",
    "start": "1402666",
    "end": "1407708"
  },
  {
    "text": "project, because we didn't know how to do it. It was a little bit weird because from fp-ts we had all these reader",
    "start": "1407708",
    "end": "1414833"
  },
  {
    "text": "task, eithers, and we, we could intuitively see how it would map to an Effect, but we didn't quite understand",
    "start": "1414958",
    "end": "1421833"
  },
  {
    "text": "how, how it would work with our flavor of fp-ts if you know what I mean?",
    "start": "1421833",
    "end": "1427458"
  },
  {
    "text": "Like we built those abstractions for managing dependencies and resources and whatnot.",
    "start": "1427458",
    "end": "1433583"
  },
  {
    "text": "Like how would that, how would we make the step from that to Effect? So what we ended up doing in the end, my",
    "start": "1434041",
    "end": "1441083"
  },
  {
    "text": "team got this opportunity to rebuild the existing customer satisfaction feature and we are making",
    "start": "1441083",
    "end": "1448833"
  },
  {
    "text": "it like more flexible, like it's almost on our end in the backend, we treat these customers satisfaction",
    "start": "1448833",
    "end": "1455958"
  },
  {
    "text": "surveys as, as generic surveys, because like, what is the customer satisfaction survey? It's like you ask a bunch of questions",
    "start": "1455958",
    "end": "1462791"
  },
  {
    "text": "and one question has to be how satisfied you are about whatever you're measuring",
    "start": "1462791",
    "end": "1468041"
  },
  {
    "text": "against in our case, like satisfaction about how your ticket was handled by the support agent.",
    "start": "1468041",
    "end": "1473666"
  },
  {
    "text": "But in the end, it's just a survey. It's a bunch of questions and different types of questions and whatnot. So it looked like a perfect opportunity",
    "start": "1473958",
    "end": "1481416"
  },
  {
    "text": "for us to try Effect. Especially because there were, there was already like Tim Smart's",
    "start": "1481416",
    "end": "1488541"
  },
  {
    "text": "SQL package, SQL effect, which is like the predecessor of effect SQL.",
    "start": "1488541",
    "end": "1493833"
  },
  {
    "text": "So that, that was really good because our service needs to, interact with the database for sure.",
    "start": "1493833",
    "end": "1498708"
  },
  {
    "text": "So, so that, that gave me a lot of confidence there. obviously, and now we're using Effect SQL.",
    "start": "1499083",
    "end": "1504500"
  },
  {
    "text": "I'm trying to like being lockstep with all the development",
    "start": "1504791",
    "end": "1509708"
  },
  {
    "text": "with Effect itself, the core library, and then also like all the satellites that the level",
    "start": "1509875",
    "end": "1516416"
  },
  {
    "text": "one and layer one abstractions. So it sounded like this was like the initial prototype where you gave Effect",
    "start": "1516416",
    "end": "1524041"
  },
  {
    "start": "1519000",
    "end": "1860000"
  },
  {
    "text": "or like the initial trial project where you went from observing the Effect",
    "start": "1524041",
    "end": "1529416"
  },
  {
    "text": "development to actually getting your hands dirty and seeing, okay, is this fulfilling all of our dreams, how",
    "start": "1529458",
    "end": "1536416"
  },
  {
    "text": "our world already got better through fp-ts but we've introduced a couple of like new problems and maybe some of our",
    "start": "1536416",
    "end": "1542625"
  },
  {
    "text": "teammates or some of the other teams, uh, have a hard time with it. And that could be addressed by Effect.",
    "start": "1542958",
    "end": "1548750"
  },
  {
    "text": "And so now you've adopted it. How did that go? How quickly were you up and running? How quickly were you productive?",
    "start": "1548750",
    "end": "1554250"
  },
  {
    "text": "And, uh, also very importantly, what did other teams think? So before I actually get into that, let",
    "start": "1554750",
    "end": "1561958"
  },
  {
    "text": "me just tell you that for us getting rid of fp-ts or moving towards something else",
    "start": "1561958",
    "end": "1567375"
  },
  {
    "text": "is, was existential. Like there was no universe where we would be able to push for fp-ts, at",
    "start": "1567375",
    "end": "1575500"
  },
  {
    "text": "least in our usage of fp-ts in a way we did at a larger scale.",
    "start": "1575500",
    "end": "1581541"
  },
  {
    "text": "Like if we wanted this TypeScript service framework to fly and be useful for not",
    "start": "1581541",
    "end": "1587125"
  },
  {
    "text": "just our two teams that used it, but also outside of our org for all the TypeScript",
    "start": "1587166",
    "end": "1593500"
  },
  {
    "text": "native teams, who we acquired through the business deals and stuff. We really had to get rid of it.",
    "start": "1593500",
    "end": "1598791"
  },
  {
    "text": "We had to find like an alternative and unfortunately there was like no real",
    "start": "1598791",
    "end": "1604291"
  },
  {
    "text": "alternative, beside Effect. But I'll get into why this is actually a pretty good alternative also",
    "start": "1604291",
    "end": "1610458"
  },
  {
    "text": "for teams that only use native node JS TypeScript.",
    "start": "1610625",
    "end": "1615541"
  },
  {
    "text": "But yeah, so, after I tried Effect for the first time, so I",
    "start": "1615833",
    "end": "1620916"
  },
  {
    "text": "think it was last year in June that I made the first Effect commit ever at",
    "start": "1620916",
    "end": "1627250"
  },
  {
    "text": "Zendesk, getting up and running was fairly easy because I could get a skeleton of an application using our fp-ts",
    "start": "1627291",
    "end": "1635750"
  },
  {
    "text": "based service framework. And then, yeah, I think one important thing that I need to mention is that,",
    "start": "1635750",
    "end": "1641958"
  },
  {
    "text": "we're mostly building these services on graph QL and then we have graphQL Federation, so yeah, like lots of",
    "start": "1642125",
    "end": "1649000"
  },
  {
    "text": "microservices, each owning their own domain and we call them sub graphs and then they compose into a super graph through",
    "start": "1649000",
    "end": "1656416"
  },
  {
    "text": "the Apollo Federation solution. So this survey service was just another sub graph.",
    "start": "1656458",
    "end": "1661416"
  },
  {
    "text": "So once I got to the point where I could start implementing the resolvers for the",
    "start": "1661666",
    "end": "1667041"
  },
  {
    "text": "different graphQL objects and mutations and queries and whatnot, um, I was already, at that point I could",
    "start": "1667041",
    "end": "1674250"
  },
  {
    "text": "finally use Effect. So I was using Effect in the beginning only at the resolver level of my",
    "start": "1674250",
    "end": "1681875"
  },
  {
    "text": "application. So, so that went pretty well. Startup was very easy. And then obviously like I created like an",
    "start": "1681875",
    "end": "1689333"
  },
  {
    "text": "application skeleton that I'm familiar with, and then the resolvers were Effect. And that nicely adapted into the",
    "start": "1689333",
    "end": "1697125"
  },
  {
    "text": "promise based resolver because with an effect, you can run it as a promise. So that was perfect.",
    "start": "1697125",
    "end": "1702333"
  },
  {
    "text": "And then after that, it was just like, okay, let's, let's start with this. Let's start with a simple Effect.",
    "start": "1702541",
    "end": "1707791"
  },
  {
    "text": "Let's start with a dummy resolver. And then next step was let's add some validation.",
    "start": "1708041",
    "end": "1713375"
  },
  {
    "text": "So we brought in Effect Schema and yeah, now that I mentioned Effect Schema, I think that's probably the",
    "start": "1713583",
    "end": "1719125"
  },
  {
    "text": "best gateway drug into Effect. Like everybody needs input validation.",
    "start": "1719125",
    "end": "1724416"
  },
  {
    "text": "Everybody that it's almost impossible to imagine a piece of software, like a,",
    "start": "1725500",
    "end": "1731333"
  },
  {
    "text": "you know, an HTTP service that doesn't need input validation unimaginable.",
    "start": "1731500",
    "end": "1736458"
  },
  {
    "text": "Yeah, I definitely agree. I mean, this is where, why Zod as a standalone library is also getting so",
    "start": "1737000",
    "end": "1742791"
  },
  {
    "text": "popular, but I think people will see that their requirements will grow beyond just input",
    "start": "1742791",
    "end": "1748791"
  },
  {
    "text": "validation where you maybe need to run some effectful code, like some, some",
    "start": "1748791",
    "end": "1754750"
  },
  {
    "text": "code that can't go wrong, et cetera, as part of this validation, but then also critically, not just",
    "start": "1754750",
    "end": "1760125"
  },
  {
    "text": "parsing and validating the code, but at some point you might also want to re serialize it as you, you don't just",
    "start": "1760291",
    "end": "1767750"
  },
  {
    "text": "receive data, but you want to ship it over the wire to another service or to your front end.",
    "start": "1767750",
    "end": "1773291"
  },
  {
    "text": "And then you're scratching your head because, okay, you have now this beautiful sod system that can validate and parse",
    "start": "1773875",
    "end": "1780583"
  },
  {
    "text": "data, but now you want to go the other way around and that is impossible.",
    "start": "1780583",
    "end": "1784958"
  },
  {
    "text": "And if you use a whatever, like you've created a class, a user class that you",
    "start": "1785708",
    "end": "1790750"
  },
  {
    "text": "parse things into, and now you have your data expressed through like those classes or more complex data structures.",
    "start": "1790791",
    "end": "1797291"
  },
  {
    "text": "And you want to call JSON.stringify on it. And suddenly stuff blows up.",
    "start": "1798000",
    "end": "1803666"
  },
  {
    "text": "And this is where Effect Schema comes in and I completely agree. This is going to be my primary bet for",
    "start": "1803666",
    "end": "1810208"
  },
  {
    "text": "what will be the, the main gateway drug that brings people to Effect. And it's has gotten so nice.",
    "start": "1810208",
    "end": "1816833"
  },
  {
    "text": "I think this is where in the past where you've been using fp-ts you've probably used io-ts Effect Schema is written by the same",
    "start": "1817125",
    "end": "1823333"
  },
  {
    "text": "person, but I feel like It's a new incarnation, of the same person who just made everything",
    "start": "1823333",
    "end": "1829750"
  },
  {
    "text": "so much nicer to use so much easier to understand. So yeah, huge fan of that part.",
    "start": "1829791",
    "end": "1835458"
  },
  {
    "text": "Absolutely. Same. I'm a huge fan of Giulio who does all of this, this work. It's just amazing.",
    "start": "1835875",
    "end": "1841500"
  },
  {
    "text": "-big shoutout to Giulio. -yeah, absolutely. fp-ts and io-ts helped us so much in the",
    "start": "1841791",
    "end": "1848291"
  },
  {
    "text": "beginning and now seeing him also do all of the work, for Schema at Effect and",
    "start": "1848291",
    "end": "1854083"
  },
  {
    "text": "doing a lot of Effect documentation work as well, it's just, uh, yeah, it's, it's amazing to see that.",
    "start": "1854083",
    "end": "1859666"
  },
  {
    "start": "1860000",
    "end": "2235000"
  },
  {
    "text": "So sounds like last year, last summer you've written your first Effect code at",
    "start": "1860125",
    "end": "1865958"
  },
  {
    "text": "Zendesk, and I think you've been by the end of that year, you've been getting to a point where it could be",
    "start": "1865958",
    "end": "1872083"
  },
  {
    "text": "rolled out and we've been just chatting before where you mentioned that this year",
    "start": "1872083",
    "end": "1877666"
  },
  {
    "text": "it's getting released in GA. So, I suppose across like all production traffic, et cetera.",
    "start": "1877666",
    "end": "1884041"
  },
  {
    "text": "So how's that gone? And how did your team like it? How, how was your experience?",
    "start": "1884375",
    "end": "1890000"
  },
  {
    "text": "Yes. So my personal experience was, was great. Let's start with me and then we can go to the team.",
    "start": "1890291",
    "end": "1895958"
  },
  {
    "text": "And then we can go like outside of the team. Yeah, I was taking really baby steps with effect.",
    "start": "1896000",
    "end": "1902583"
  },
  {
    "text": "So after input parsing and validation the next big step was to",
    "start": "1902875",
    "end": "1908041"
  },
  {
    "text": "interact with the database, obviously relying just on SQL effects was not",
    "start": "1908041",
    "end": "1913833"
  },
  {
    "text": "enough because we have a sharded database. We have like this big shared sharded",
    "start": "1913875",
    "end": "1920750"
  },
  {
    "text": "database instances that every application interacts with. So we had to write like a wrapper,",
    "start": "1920750",
    "end": "1927416"
  },
  {
    "text": "for SQL effects that would read the configuration, create one SQL",
    "start": "1927416",
    "end": "1932708"
  },
  {
    "text": "pool per shard node. So basically one for a writer, one for a",
    "start": "1932708",
    "end": "1938250"
  },
  {
    "text": "reader, and then we would have like this big collection of writers and readers group by shards, and then every time a",
    "start": "1938250",
    "end": "1946000"
  },
  {
    "text": "request comes in, we would have to figure out what is the shard ID reaching to the collection handle like short shard not",
    "start": "1946000",
    "end": "1953083"
  },
  {
    "text": "found errors and stuff like this. Finally getting the shard, getting the pool for the writer or the reader",
    "start": "1953083",
    "end": "1958791"
  },
  {
    "text": "that you currently need at the point where you need to like call the database. And then that's when we get the SQL",
    "start": "1958916",
    "end": "1966083"
  },
  {
    "text": "effects, like the SQL client from the library at the time, like the pool is",
    "start": "1966083",
    "end": "1971166"
  },
  {
    "text": "basically provided by that. And then that was great. once we got there, because then we could persist events.",
    "start": "1971166",
    "end": "1977708"
  },
  {
    "text": "So one thing that I want to mention is like, we use event sourcing where exactly",
    "start": "1978291",
    "end": "1984166"
  },
  {
    "text": "this two way bi-directional schemas, work really well, because on",
    "start": "1984375",
    "end": "1990291"
  },
  {
    "text": "one hand, like when the request comes in, we do the input parsing and then that",
    "start": "1990291",
    "end": "1996666"
  },
  {
    "text": "input represents almost the exact payload that we then write to the",
    "start": "1997000",
    "end": "2004125"
  },
  {
    "text": "database which represents our event. So once we did the parsing, obviously we",
    "start": "2004125",
    "end": "2009541"
  },
  {
    "text": "need to serialize it into, into a string that we can then push into a,",
    "start": "2009541",
    "end": "2015250"
  },
  {
    "text": "into a text column in SQL. So yeah, that was a big thing. And then obviously the next step",
    "start": "2015250",
    "end": "2022291"
  },
  {
    "text": "after the database client, there was like the HTTP layer where we might",
    "start": "2022291",
    "end": "2027333"
  },
  {
    "text": "need to call like different HTTP services, especially around the feature flags and stuff like that.",
    "start": "2027333",
    "end": "2033458"
  },
  {
    "text": "So yeah, really baby steps. And then eventually we added some level of observability,",
    "start": "2033458",
    "end": "2039291"
  },
  {
    "text": "logging, tracing metrics. In the beginning. It wasn't really anything sophisticated. We were relying mostly on the data dog,",
    "start": "2039291",
    "end": "2046208"
  },
  {
    "text": "tracing library defaults, which provided some level of detail.",
    "start": "2046208",
    "end": "2051583"
  },
  {
    "text": "It didn't work very well. We didn't get very detailed traces, but it was good enough to see some",
    "start": "2052000",
    "end": "2057625"
  },
  {
    "text": "traffic and what's going on at the, maybe let's say the GraphQL level. So everything that is an Effect,",
    "start": "2057625",
    "end": "2063708"
  },
  {
    "text": "obviously we couldn't get any visibility into that, but then we switched to",
    "start": "2064083",
    "end": "2069125"
  },
  {
    "text": "Otel eventually, and then things improved from there and then as the more",
    "start": "2069125",
    "end": "2074375"
  },
  {
    "text": "I learned about Effect, the closer I was getting to turning the application",
    "start": "2074375",
    "end": "2079416"
  },
  {
    "text": "into an end to end Effect. And today it's like fully Effect. So it's effect from top to bottom.",
    "start": "2079416",
    "end": "2086041"
  },
  {
    "text": "Right. And I think this is a pattern that I've seen a lot both in the apps that I've",
    "start": "2086250",
    "end": "2092083"
  },
  {
    "text": "been building and where I take, I've taken my first steps with Effect, but also in what I see how other people are",
    "start": "2092083",
    "end": "2099166"
  },
  {
    "text": "approaching effect is like how nicely it can be adopted incrementally. Where if you think about your program as",
    "start": "2099166",
    "end": "2105958"
  },
  {
    "text": "a tree, you can very easily start at like any layer of the tree, really",
    "start": "2105958",
    "end": "2112416"
  },
  {
    "text": "like at any position, you can start out with the leaves and write those as effects.",
    "start": "2112416",
    "end": "2117250"
  },
  {
    "text": "And then at some point, just run them as promises and assuming your, your other",
    "start": "2117500",
    "end": "2122583"
  },
  {
    "text": "code is already like promises or async await based, you can just call your",
    "start": "2122708",
    "end": "2128583"
  },
  {
    "text": "new effect code as good old promises. Or you can do it on the other way around.",
    "start": "2128583",
    "end": "2135375"
  },
  {
    "text": "And at the root of your program, you can rewrite some parts that are maybe more",
    "start": "2135375",
    "end": "2140875"
  },
  {
    "text": "for governing and overseeing the execution of your program. You can rewrite that with Effect, for",
    "start": "2141083",
    "end": "2146750"
  },
  {
    "text": "example, request handlers, but then, still call out to promises and everything else of your program is still promises.",
    "start": "2146750",
    "end": "2153458"
  },
  {
    "text": "Or you can do it somewhere in the middle and say, okay, at some point we're like in async await, we're going to rewrite",
    "start": "2154083",
    "end": "2160958"
  },
  {
    "text": "some part in with effects, but then the stuff way further down, we'll call again as promises.",
    "start": "2160958",
    "end": "2166708"
  },
  {
    "text": "And so you can mix and match as much as you want. But what I've typically seen is that",
    "start": "2167458",
    "end": "2173000"
  },
  {
    "text": "people get very productive very quickly with like some incremental adoption.",
    "start": "2173000",
    "end": "2178000"
  },
  {
    "text": "And then they see like, Oh, wait a second. That part is still not as nice. And that is some of the leftover promise code.",
    "start": "2178541",
    "end": "2185333"
  },
  {
    "text": "And then in no time that's rewritten to effect as well. I think what is typically",
    "start": "2185833",
    "end": "2191041"
  },
  {
    "text": "the case is the more you rewrite to effect that kind of collapses the amount",
    "start": "2191041",
    "end": "2196125"
  },
  {
    "text": "of code typically like by half and shines a very bright light on some of",
    "start": "2196125",
    "end": "2202083"
  },
  {
    "text": "the holes that you haven't yet covered such as error handling very often, like Effect kind of shows",
    "start": "2202083",
    "end": "2208250"
  },
  {
    "text": "you a mirror and say like asks you like, Hey, here stuff could go wrong. Right. What have you done so far about it?",
    "start": "2208250",
    "end": "2214791"
  },
  {
    "text": "Not really much. And so it forces you to do the right thing That sounds very familiar.",
    "start": "2214875",
    "end": "2220375"
  },
  {
    "text": "What you've described. Absolutely. Writing Effect has a lot of knock on Effect.",
    "start": "2220375",
    "end": "2225541"
  },
  {
    "text": "Pun not intended. On how you write maintainable code on a day to day basis.",
    "start": "2226500",
    "end": "2231791"
  },
  {
    "text": "Things like obviously the error handling it's amazing. Very recently I implemented a Kafka",
    "start": "2232208",
    "end": "2239083"
  },
  {
    "start": "2235000",
    "end": "2538000"
  },
  {
    "text": "consumer with effect, um, using Kafka JS. So I just wrapped Kafka JS in an Effect,",
    "start": "2239083",
    "end": "2245916"
  },
  {
    "text": "API and then had like an abstraction for a consumer and then obviously the consumer can consume",
    "start": "2245916",
    "end": "2252416"
  },
  {
    "text": "things, um, either message by message or in batches. So I just needed a message by message,",
    "start": "2252500",
    "end": "2258750"
  },
  {
    "text": "type of consumption. So that's what my abstraction does.",
    "start": "2258750",
    "end": "2263291"
  },
  {
    "text": "It creates a consumer and you pass in like the effect that hand a function that returns an effect that handles like",
    "start": "2264083",
    "end": "2270416"
  },
  {
    "text": "the incoming message, the payload. It was just really beautiful to see how the different error cases",
    "start": "2270416",
    "end": "2277583"
  },
  {
    "text": "all bubble up to the very root of your message handler.",
    "start": "2277583",
    "end": "2282416"
  },
  {
    "text": "And then in Kafka, like when you consume the messages, it's super important to",
    "start": "2283083",
    "end": "2288416"
  },
  {
    "text": "make a decision at that point. Like, do you drop the message or do you retry reprocess it?",
    "start": "2288416",
    "end": "2294125"
  },
  {
    "text": "Right. You need to be able to make this decision for every single error case.",
    "start": "2294458",
    "end": "2298833"
  },
  {
    "text": "And you know, you just have effect dot catch tags and then you have like a big dictionary, like a big, big object",
    "start": "2299791",
    "end": "2306375"
  },
  {
    "text": "containing the tag of the error on the left side. And the error handling basically die",
    "start": "2306375",
    "end": "2313666"
  },
  {
    "text": "or, or succeed with some error logging or whatever. So if you die, Kafka",
    "start": "2313666",
    "end": "2318750"
  },
  {
    "text": "will reprocess the message. If you, if you succeed and you log it, well, you can either put it into",
    "start": "2318750",
    "end": "2325041"
  },
  {
    "text": "like a dead letter queue or something. If you want to keep those messages around.",
    "start": "2325500",
    "end": "2330541"
  },
  {
    "text": "But if that's not necessarily important because it's like time sensitive and if you don't process it now, then it",
    "start": "2331208",
    "end": "2338166"
  },
  {
    "text": "doesn't make sense to process it like five days later, then you just discard the message.",
    "start": "2338166",
    "end": "2342458"
  },
  {
    "text": "And before I would normally implement Kafka consumers like in Ruby or maybe in",
    "start": "2343291",
    "end": "2350375"
  },
  {
    "text": "fp-ts, it was also, it was better, but I don't think I had it to this level",
    "start": "2350375",
    "end": "2356541"
  },
  {
    "text": "of granularity because what we ended up doing in fp-ts was taking like the shortcut route where we would just return",
    "start": "2356625",
    "end": "2363375"
  },
  {
    "text": "a generic error interface. Just to have like, yeah, you know, it can error, but we didn't know",
    "start": "2363375",
    "end": "2369125"
  },
  {
    "text": "what kind of error later on as I got better with fp-ts, then obviously you would have different types of errors,",
    "start": "2369125",
    "end": "2374750"
  },
  {
    "text": "which would also compose. but I haven't written a Kafka consumer with that, approach in fp-ts,",
    "start": "2374750",
    "end": "2381333"
  },
  {
    "text": "but with Effect, it was just like so easy and it's so useful because you don't",
    "start": "2381333",
    "end": "2387583"
  },
  {
    "text": "think about all these different kinds of, ways your program can fail.",
    "start": "2387583",
    "end": "2394958"
  },
  {
    "text": "And my consumer is very simple. It receives a message. It parses it.",
    "start": "2394958",
    "end": "2400375"
  },
  {
    "text": "writes an event and then calls another service. So basically three things, but there's",
    "start": "2400416",
    "end": "2407000"
  },
  {
    "text": "like 15 or 20 different ways it can fail. And it's just like, wow, now I know",
    "start": "2407000",
    "end": "2412791"
  },
  {
    "text": "everything every single way, how it can fail so what took me the most time was thinking about whether to",
    "start": "2412791",
    "end": "2420000"
  },
  {
    "text": "discard or reprocess the message in the whole implementation proportionally the most time,",
    "start": "2420000",
    "end": "2425875"
  },
  {
    "text": "but that makes a lot of sense. And I think that makes a difference between resilient and non-resilient software.",
    "start": "2425875",
    "end": "2432583"
  },
  {
    "text": "I think a lot of TypeScript programmers are blissfully ignorant of the",
    "start": "2433333",
    "end": "2439875"
  },
  {
    "text": "unhappy path of a program, but this is what ultimately makes your users very",
    "start": "2440500",
    "end": "2446875"
  },
  {
    "text": "unhappy if stuff goes wrong. and a lot of times that is completely unrelated to whether",
    "start": "2446958",
    "end": "2452333"
  },
  {
    "text": "the user has done something wrong as whether your servers have a bad day or whether you've migrated some infra and",
    "start": "2452333",
    "end": "2458916"
  },
  {
    "text": "like some things is like hitting capacity or you're just hitting a blip somewhere",
    "start": "2458916",
    "end": "2464625"
  },
  {
    "text": "and things go wrong and a user gets like an endless spinner or gets like undefined",
    "start": "2464625",
    "end": "2472125"
  },
  {
    "text": "is not a function in their face. This is where like some backend engineers haven't done their homework.",
    "start": "2472125",
    "end": "2477416"
  },
  {
    "text": "And I get it. It's really tricky. If you, if you're just like dealing",
    "start": "2477750",
    "end": "2483708"
  },
  {
    "text": "with like catch error and then you have an any or unknown thing and what do you do with it?",
    "start": "2483708",
    "end": "2489791"
  },
  {
    "text": "Yeah, maybe you bubble it around, maybe you log it, but to work with it as",
    "start": "2489791",
    "end": "2496625"
  },
  {
    "text": "nicely as like structured type data that you return from a function, that's what you get with Effect and",
    "start": "2496625",
    "end": "2502875"
  },
  {
    "text": "you can handle it so nicely. That was actually fun to deal with the non happy path.",
    "start": "2502875",
    "end": "2508083"
  },
  {
    "text": "Yes. And I think you touched upon it very well. It's fun. You don't feel like it's something that",
    "start": "2508708",
    "end": "2516250"
  },
  {
    "text": "you have to do, but the language or the library like doesn't really provide a good way for you to manage.",
    "start": "2516250",
    "end": "2522833"
  },
  {
    "text": "And then it's like just a headache. It's really fun. To handle these cases in Effect.",
    "start": "2522833",
    "end": "2527875"
  },
  {
    "text": "And it just has such a great effect on, on your reliability, on the",
    "start": "2528833",
    "end": "2536125"
  },
  {
    "text": "reliability of your software. The other thing that I noticed was also",
    "start": "2536125",
    "end": "2542416"
  },
  {
    "start": "2538000",
    "end": "2913000"
  },
  {
    "text": "in terms of maintainability and testability, like the dependency injection,",
    "start": "2542416",
    "end": "2547666"
  },
  {
    "text": "like dependency management as well. It's just so great with effect.",
    "start": "2547666",
    "end": "2553083"
  },
  {
    "text": "I don't have to worry about mocking things extensively. I just build a fake dependency and",
    "start": "2553375",
    "end": "2561250"
  },
  {
    "text": "provide that instead of, instead of the real one, the live one. And I feel like I'm much more",
    "start": "2561250",
    "end": "2568833"
  },
  {
    "text": "incentivized to write unit tests and I don't know how other people think about engineers at companies like",
    "start": "2568833",
    "end": "2577125"
  },
  {
    "text": "Zendesk and like Facebook and Google, like big, big companies, like how they",
    "start": "2577416",
    "end": "2582666"
  },
  {
    "text": "deal with these things deal with these things on a day-to-day basis. In the end, like it doesn't matter how skillful or experienced you are.",
    "start": "2582750",
    "end": "2590541"
  },
  {
    "text": "It comes down to incentives all the time. Like you do things that you are more incentivized to do.",
    "start": "2591041",
    "end": "2597625"
  },
  {
    "text": "So if a language or a framework or a library makes something really easy to do,",
    "start": "2597833",
    "end": "2604625"
  },
  {
    "text": "you will do it regardless, whether it's the right thing to do or the wrong thing to do. It's just like this.",
    "start": "2604833",
    "end": "2610458"
  },
  {
    "text": "I don't know if there's like a law or this, but it's definitely a psychological effect.",
    "start": "2610916",
    "end": "2615708"
  },
  {
    "text": "This, this is one of my favorites paradigms or guidelines in programming",
    "start": "2616125",
    "end": "2621708"
  },
  {
    "text": "or in life, in principle, which is like make the right thing easy.",
    "start": "2622000",
    "end": "2627583"
  },
  {
    "text": "And that is, I think Effect makes some really hard things",
    "start": "2628291",
    "end": "2634333"
  },
  {
    "text": "that are the right thing as easy as they can be. And so easy that it's fun doing things",
    "start": "2634333",
    "end": "2642083"
  },
  {
    "text": "like error handling or structuring the hierarchy of your program in a nice way, in the as nice way as you could",
    "start": "2642083",
    "end": "2650166"
  },
  {
    "text": "possibly do it in TypeScript, that's a huge lift and that's what Effect enables you.",
    "start": "2650166",
    "end": "2655125"
  },
  {
    "text": "And I think sounds like dependency injection. That's probably if you're in your Effect",
    "start": "2655333",
    "end": "2660458"
  },
  {
    "text": "adoption journey, that typically happens sort of like maybe in the second week when you're using Effect",
    "start": "2660458",
    "end": "2666458"
  },
  {
    "text": "after you've like rewritten a whole bunch of like promise code, et cetera. Maybe you've now like finally cleaned up",
    "start": "2666458",
    "end": "2673458"
  },
  {
    "text": "some of your tech depth around error handling. And then you realize, okay, there's still like some",
    "start": "2673458",
    "end": "2678833"
  },
  {
    "text": "global state we mutate to kind of pass things around, or we just have like this big blob of",
    "start": "2678875",
    "end": "2685416"
  },
  {
    "text": "like properties we're like kind of pulling through like all of our function vacations.",
    "start": "2685416",
    "end": "2690541"
  },
  {
    "text": "Or maybe we have this like monster monstrous context object, which maybe has a whole bunch",
    "start": "2690708",
    "end": "2697333"
  },
  {
    "text": "of like, either it's untyped or it has a whole bunch of like nullable properties and you",
    "start": "2697333",
    "end": "2702416"
  },
  {
    "text": "kinda pray that it's there. That's like all like CME principles.",
    "start": "2702416",
    "end": "2707291"
  },
  {
    "text": "I'd argue this, the most principled approach about that is like having like a bag of",
    "start": "2707541",
    "end": "2712583"
  },
  {
    "text": "properties that you just like lift through your function calls, but Effect gives you the best of both worlds.",
    "start": "2712583",
    "end": "2718625"
  },
  {
    "text": "It gives you a very principled approach and a very convenient approach. And I think dependency injection has a kind of a bad rap.",
    "start": "2718875",
    "end": "2726291"
  },
  {
    "text": "I've used it in various programming language. I've used it like a lot of in PHP in the past. I've used it like in GoLang and",
    "start": "2726583",
    "end": "2734125"
  },
  {
    "text": "other programming languages. It never, it felt like, okay, this is how",
    "start": "2734125",
    "end": "2739250"
  },
  {
    "text": "things should kind of, there is a solution somewhere there, but all the solutions I've used so far where",
    "start": "2739250",
    "end": "2745416"
  },
  {
    "text": "it kind of like had such big foot guns that at some point I said like, okay, no, I've hurt myself too much",
    "start": "2745416",
    "end": "2750916"
  },
  {
    "text": "with that. I'll do it manually. And I think Effect finally gives you the cake and lets you eat it.",
    "start": "2750916",
    "end": "2756916"
  },
  {
    "text": "And I think that's really hard to explain. And I think you have to build a little thing, refactor it and",
    "start": "2757541",
    "end": "2763500"
  },
  {
    "text": "like, then throw in a little bit of like type save context, which is all there is to it.",
    "start": "2763500",
    "end": "2768875"
  },
  {
    "text": "Really. It's like react context, but type save and much nicer. So that's, I think something you have to",
    "start": "2768875",
    "end": "2774541"
  },
  {
    "text": "try for yourself to see that how nice it is. But I agree. This is one of the best things about it.",
    "start": "2774541",
    "end": "2780458"
  },
  {
    "text": "Yeah, absolutely. And why does it have a bad rep if I think about it, I think it's",
    "start": "2780833",
    "end": "2786583"
  },
  {
    "text": "again, comes down to incentives. If the language makes it hard to do dependency injection,",
    "start": "2786666",
    "end": "2791833"
  },
  {
    "text": "because it's never just a singular case, like, Oh, I'm going to do dependency injection on this function.",
    "start": "2792291",
    "end": "2797166"
  },
  {
    "text": "And this one function will be, you know, they're written the right way. Well, you know, your program usually has",
    "start": "2797750",
    "end": "2804041"
  },
  {
    "text": "a certain depth, like there's like a function and then that function calls out that of other functions.",
    "start": "2804041",
    "end": "2809125"
  },
  {
    "text": "Those functions call out other functions. And then the dependency needs to travel all the way down because it's",
    "start": "2809708",
    "end": "2814958"
  },
  {
    "text": "called somewhere at the leaf. For example, a database call is made somewhere at the leaf of our program and",
    "start": "2814958",
    "end": "2820833"
  },
  {
    "text": "wiring through all these layers and then adding the dependency in the list of",
    "start": "2821291",
    "end": "2827083"
  },
  {
    "text": "arguments all the time. Well, I'm not surprised that people get tired of it.",
    "start": "2827333",
    "end": "2832833"
  },
  {
    "text": "And I started thinking about it a few weeks ago, you know, like, what are these approaches? And I started calling them just",
    "start": "2832958",
    "end": "2839958"
  },
  {
    "text": "internally for myself, my own, for my own sake. Like there's this explicit dependency",
    "start": "2839958",
    "end": "2845500"
  },
  {
    "text": "injection where you like to do all the wiring and like yourself. Then there's some languages like Scala,",
    "start": "2845500",
    "end": "2851375"
  },
  {
    "text": "which somehow give you like some, some language features, which allow you to",
    "start": "2851833",
    "end": "2857666"
  },
  {
    "text": "implicitly wire through it. You need to have a big brain for that. And it feels a little bit magical, right?",
    "start": "2857666",
    "end": "2864041"
  },
  {
    "text": "This implicit dependency injection. I don't know if it's through traits or something. I'm not a big Scala user,",
    "start": "2864041",
    "end": "2871083"
  },
  {
    "text": "but I did see some, some of it. And then you have Effect, which is like,",
    "start": "2871083",
    "end": "2876041"
  },
  {
    "text": "it's somewhere in the middle. Like it's, it's kind of implicit, but it's also very explicit in a sense.",
    "start": "2876333",
    "end": "2882375"
  },
  {
    "text": "Like you, you do declare, you see where you inject the dependency by providing",
    "start": "2882833",
    "end": "2888500"
  },
  {
    "text": "the implementation. And then you also see the place where you're calling the functions and the",
    "start": "2888500",
    "end": "2894125"
  },
  {
    "text": "stuff that's on the dependency because you have to yield it or yield star.",
    "start": "2894125",
    "end": "2900250"
  },
  {
    "text": "So it's, it's kind of implicit because you don't have to wire it manually. You just use it at the, at the, at the",
    "start": "2900750",
    "end": "2907750"
  },
  {
    "text": "site where you need it. I think it's the best of both worlds in a very similar way. How I think TypeScript is the best of",
    "start": "2907750",
    "end": "2915750"
  },
  {
    "start": "2913000",
    "end": "3183000"
  },
  {
    "text": "both worlds where it very elegantly does type inference in most places where you can.",
    "start": "2915750",
    "end": "2922708"
  },
  {
    "text": "a lot of static languages, like ask you to write type annotations",
    "start": "2922875",
    "end": "2927666"
  },
  {
    "text": "everywhere, and that I think also causes like some fatigue when",
    "start": "2927916",
    "end": "2933458"
  },
  {
    "text": "you use a typed language. And I think TypeScript makes it so nice that you can get away with",
    "start": "2933458",
    "end": "2939000"
  },
  {
    "text": "like just type annotations in the minimum amount of places. Sometimes even for argument types, if you",
    "start": "2939000",
    "end": "2945166"
  },
  {
    "text": "have a default value, for example. So most things where possible can be inferred and that's totally fine.",
    "start": "2945166",
    "end": "2951791"
  },
  {
    "text": "And so think about the context, the type dependencies of an Effect of a function, think about it the same way like",
    "start": "2952125",
    "end": "2958791"
  },
  {
    "text": "if it's used, it can be inferred. If you return something from a function that looks like an object with a property",
    "start": "2958791",
    "end": "2966541"
  },
  {
    "text": "user, then the type can be inferred. That's because you return it. And what's so cool about Effect is",
    "start": "2967166",
    "end": "2973708"
  },
  {
    "text": "like, if you use a thing in a function and using, like you said, like if you",
    "start": "2973708",
    "end": "2979041"
  },
  {
    "text": "yield something, so the equivalent of like an await, then Effect and like a,",
    "start": "2979041",
    "end": "2985291"
  },
  {
    "text": "on the type level wires things up nicely with TypeScript that in the type",
    "start": "2985291",
    "end": "2990500"
  },
  {
    "text": "signature, you say like, aha, here we need the database client. And also during runtime makes sure,",
    "start": "2990500",
    "end": "2998583"
  },
  {
    "text": "okay, there's behind the scenes, the context objects where we have the database client. So it picks it up and not just even that,",
    "start": "2998583",
    "end": "3004833"
  },
  {
    "text": "but also when you finally get to run your program, it makes sure that at some point",
    "start": "3004833",
    "end": "3010458"
  },
  {
    "text": "you supply your database client. And I think that is so elegant when you,",
    "start": "3010458",
    "end": "3016833"
  },
  {
    "text": "when you use it, but it's, it's hard to to kind of grasp it if you, if you haven't take a look at that with",
    "start": "3016833",
    "end": "3022791"
  },
  {
    "text": "code and like try to refactor a little something, but I agree. It's one of the most elegant things about Effect.",
    "start": "3022791",
    "end": "3028375"
  },
  {
    "text": "Absolutely. People just have to get their hands dirty. There's no other way of learning and understanding Effect.",
    "start": "3029000",
    "end": "3034708"
  },
  {
    "text": "Like obviously you could read the documentation all day long, but then you get fatigued because there's just so",
    "start": "3034916",
    "end": "3040250"
  },
  {
    "text": "much that Effect provides. I often see people being very confused about what is Effect?",
    "start": "3040250",
    "end": "3045625"
  },
  {
    "text": "Like, \"I don't understand it. it seems to do everything\", because it's such a big",
    "start": "3045833",
    "end": "3051291"
  },
  {
    "text": "departure from the tiny libraries with very well-defined responsibility",
    "start": "3051291",
    "end": "3057125"
  },
  {
    "text": "in the JavaScript ecosystem. And then you can like pick and choose and you can build your own tech stack,",
    "start": "3057125",
    "end": "3063666"
  },
  {
    "text": "upon certain libraries, and then that's your definition of production grade software, but then",
    "start": "3063666",
    "end": "3069583"
  },
  {
    "text": "you have Effect, which seems to be like the glue code. It's a really a generic programming framework",
    "start": "3069583",
    "end": "3075125"
  },
  {
    "text": "Right. And I suppose in a parallel universe Effect would have been a different",
    "start": "3075750",
    "end": "3080958"
  },
  {
    "text": "programming language, but I think now we sort of have the best of both",
    "start": "3081000",
    "end": "3086083"
  },
  {
    "text": "worlds in that regard as well, because TypeScript is darn good. Like, and so many people",
    "start": "3086125",
    "end": "3092541"
  },
  {
    "text": "already love TypeScript. I love it. It has so much structure and has so much amazing tooling around it.",
    "start": "3092541",
    "end": "3099458"
  },
  {
    "text": "VS code just works super well with it. You have like LSPs that work in other places.",
    "start": "3099458",
    "end": "3104916"
  },
  {
    "text": "So at this point, you need to have a very good reason to create a new program language, and I think good",
    "start": "3104916",
    "end": "3110833"
  },
  {
    "text": "reasons could be superior runtime performance, what like Rust is giving you",
    "start": "3110833",
    "end": "3116083"
  },
  {
    "text": "or what other program languages give you. But if you can't provide those unfair",
    "start": "3116083",
    "end": "3122041"
  },
  {
    "text": "advantages, then I think you gotta stick with TypeScript for now. And TypeScript is so elegant and",
    "start": "3122041",
    "end": "3127375"
  },
  {
    "text": "so flexible that you can bring all of those semantics that you would get from",
    "start": "3127375",
    "end": "3132958"
  },
  {
    "text": "something like reason or a re-script. But you can bring it directly into TypeScript. This is where Effect has",
    "start": "3132958",
    "end": "3138791"
  },
  {
    "text": "struck this really nice balance. But I agree you need to rewire your brain a little bit.",
    "start": "3138791",
    "end": "3143875"
  },
  {
    "text": "And people maybe don't immediately get it. And I've seen an interesting correlation that people have the easiest time",
    "start": "3144375",
    "end": "3151458"
  },
  {
    "text": "getting what Effect is about if they've experienced the problems that Effect",
    "start": "3151458",
    "end": "3156541"
  },
  {
    "text": "solves before and they have sort of like a lot of scar tissue from trying to solve those problems",
    "start": "3156583",
    "end": "3163791"
  },
  {
    "text": "themselves, like trying to do proper error handling, trying to do observability, trying to do interruption.",
    "start": "3163791",
    "end": "3169541"
  },
  {
    "text": "What you've mentioned before with Kubernetes. So the more problems an engineer has",
    "start": "3169708",
    "end": "3175791"
  },
  {
    "text": "experienced in the past, particularly TypeScript engineer, I feel like for them Effect clicks",
    "start": "3175791",
    "end": "3180958"
  },
  {
    "text": "most quickly, but yeah, I'm curious, what was the experience talking to other engineers at Zendesk so far?",
    "start": "3180958",
    "end": "3187041"
  },
  {
    "start": "3183000",
    "end": "4537000"
  },
  {
    "text": "What have they been confused about? What has clicked for them? So far I mostly talked through",
    "start": "3187375",
    "end": "3193125"
  },
  {
    "text": "my own experience. Then I had my immediate team members and,",
    "start": "3193125",
    "end": "3198791"
  },
  {
    "text": "with them, obviously it's a journey because, they have to learn it. It's also different from fp-ts.",
    "start": "3199083",
    "end": "3205750"
  },
  {
    "text": "Also fp-ts, they didn't really bother learning that much. Like as long as they could kind of",
    "start": "3205750",
    "end": "3212291"
  },
  {
    "text": "understand in terms of the code review, what's going on, that was already a good enough level for them,",
    "start": "3212291",
    "end": "3218208"
  },
  {
    "text": "To be productive and help me with the reviews. If I write some code, also my team in the",
    "start": "3218375",
    "end": "3226208"
  },
  {
    "text": "past one, two years, like we've had this unfortunate situation where",
    "start": "3226208",
    "end": "3232000"
  },
  {
    "text": "we had some churn in the team. So often I was like the only backend engineer on the team while being",
    "start": "3232000",
    "end": "3237916"
  },
  {
    "text": "the tech lead as well. So I really needed like my front end engineers to be able to review my",
    "start": "3237916",
    "end": "3243958"
  },
  {
    "text": "code, and Effect is just doing really well in this regard as well. Because once you have the generator",
    "start": "3244125",
    "end": "3252333"
  },
  {
    "text": "syntax, where you have the gen and yeld star, which you can easily map",
    "start": "3252333",
    "end": "3259083"
  },
  {
    "text": "in your mind to async and await, you can build up this adapter layer, in this mental",
    "start": "3259083",
    "end": "3264500"
  },
  {
    "text": "model for you once that clicks, it's very easy for them to review code.",
    "start": "3264500",
    "end": "3270041"
  },
  {
    "text": "I'm not talking about stuff like, you know, database queries and, you know, how to set up proper indices for,",
    "start": "3270291",
    "end": "3277208"
  },
  {
    "text": "for your table and like these backend concerns, purely backend concerns, but like all the business logic that you",
    "start": "3277208",
    "end": "3283875"
  },
  {
    "text": "write on the backend and there's a ton of it, that's not an issue in terms of review. So that's sort of like the 10 second",
    "start": "3283875",
    "end": "3290083"
  },
  {
    "text": "onboarding like, Hey, this stuff going to look a little bit weird. Just everywhere you see yield, think",
    "start": "3290083",
    "end": "3295791"
  },
  {
    "text": "that's await everywhere. You see that gen thing, I think that's async and you should be able to like,",
    "start": "3295791",
    "end": "3301708"
  },
  {
    "text": "just read that code as like your traditional async, await code go. I think that is sort of like the hail",
    "start": "3301708",
    "end": "3308166"
  },
  {
    "text": "Mary 10 second onboarding where someone can get really far. Yeah, exactly. And that's like totally",
    "start": "3308166",
    "end": "3315833"
  },
  {
    "text": "Pareto, like, this 20% of effort gives you 80% of the results.",
    "start": "3315833",
    "end": "3321125"
  },
  {
    "text": "Like after that, obviously they're going to have questions like, what is this layer?",
    "start": "3321458",
    "end": "3326333"
  },
  {
    "text": "What is this runtime? Uh, what do you do when you catch tags? What are tags?",
    "start": "3327166",
    "end": "3332125"
  },
  {
    "text": "Like there will be questions like this, but they're, and yeah, they require maybe",
    "start": "3332791",
    "end": "3338166"
  },
  {
    "text": "more nuanced explanations, not just like a one-to-one mapping from a",
    "start": "3338291",
    "end": "3343625"
  },
  {
    "text": "new concept to a well-known well-established other concept. But, but it's that",
    "start": "3343625",
    "end": "3349208"
  },
  {
    "text": "20% of the, of, of the productivity that you're achieving with the 80% of the effort.",
    "start": "3349208",
    "end": "3355875"
  },
  {
    "text": "So already with the 10 second onboarding, you're so far ahead that the reviews just work already.",
    "start": "3356166",
    "end": "3362083"
  },
  {
    "text": "And then I like this idea of like, exposing someone to Effect first through like reading",
    "start": "3362416",
    "end": "3367916"
  },
  {
    "text": "code and doing code review. Since this is where someone through the context that they are already",
    "start": "3367916",
    "end": "3373541"
  },
  {
    "text": "familiar with, maybe through a refactor, maybe through a new feature, they have all of the context that they need to",
    "start": "3373541",
    "end": "3380000"
  },
  {
    "text": "understand what the problem is about. And now they can focus on the implementation. And I think what's also so nice is",
    "start": "3380000",
    "end": "3386833"
  },
  {
    "text": "depending on where someone reviews the code, possibly ideally in their IDE, this is where you can also",
    "start": "3386833",
    "end": "3393583"
  },
  {
    "text": "use all of like the type inference benefits to help you understand what's going on, if you hover over an",
    "start": "3393750",
    "end": "3400541"
  },
  {
    "text": "effect and see like, Oh, this is where we can have an error that is about maybe",
    "start": "3400541",
    "end": "3406666"
  },
  {
    "text": "the user wasn't found or maybe another service is done.",
    "start": "3406666",
    "end": "3411916"
  },
  {
    "text": "This can add so much to the picture to understand what's going on. Where before everything was just like,",
    "start": "3412375",
    "end": "3418500"
  },
  {
    "text": "an implicit sort of wake thought, and I feel like this is where",
    "start": "3418500",
    "end": "3423958"
  },
  {
    "text": "someone just by also being exposed can pick up so much. And then you have seen at the end of the",
    "start": "3423958",
    "end": "3430458"
  },
  {
    "text": "day, a lot of code users are very similar to each other. And this is where in someone get now",
    "start": "3430458",
    "end": "3437625"
  },
  {
    "text": "takes that step to writing their own Effect code, they probably have already seen two or three places that are very",
    "start": "3437625",
    "end": "3443750"
  },
  {
    "text": "similar, so you can go copy some of that code, go over there, adjust it, and",
    "start": "3443750",
    "end": "3449458"
  },
  {
    "text": "bring the usual programming muscle. And it's works going to work just as well and probably even better",
    "start": "3449541",
    "end": "3455375"
  },
  {
    "text": "since you have improved type safety. Yeah, absolutely. Also, I really love the way you can work",
    "start": "3455541",
    "end": "3462333"
  },
  {
    "text": "with generators because anything that's within the function body of a",
    "start": "3462333",
    "end": "3467583"
  },
  {
    "text": "generator, it's basically your happy path because all the error cases just short circuit the happy path.",
    "start": "3467583",
    "end": "3473750"
  },
  {
    "text": "And then you just do a quick pipe after the Effect where you handle all the possible failure cases.",
    "start": "3474250",
    "end": "3480291"
  },
  {
    "text": "And I don't know why, but I just love this style of writing programs.",
    "start": "3480541",
    "end": "3486000"
  },
  {
    "text": "Here's my happy path. Everybody can understand what's going on. And then now in this pipe, I'm going to",
    "start": "3486500",
    "end": "3493583"
  },
  {
    "text": "handle all the errors. Right. This way can like, sprinkle a little bit of like extra sauce on top of it, where",
    "start": "3493583",
    "end": "3499041"
  },
  {
    "text": "you can, I often do also like timeouts there. I add a little bit of like Otel",
    "start": "3499041",
    "end": "3504500"
  },
  {
    "text": "instrumentation around that, or maybe do like a retry for an error",
    "start": "3504500",
    "end": "3509875"
  },
  {
    "text": "but yeah, as you say, like in the generator, this, and I think this is so beautiful about it is like, you can nicely separate",
    "start": "3509875",
    "end": "3516333"
  },
  {
    "text": "sort of like signal from the other stuff and say like, okay, here's my business logic and here's like,",
    "start": "3516750",
    "end": "3523291"
  },
  {
    "text": "here are those other concerns. I think like in the future, if we have like a next",
    "start": "3523291",
    "end": "3528375"
  },
  {
    "text": "generation of IDEs, et cetera, and maybe like even more AI assisted, maybe that can help you and say like,",
    "start": "3528375",
    "end": "3535875"
  },
  {
    "text": "Hey, hide everything that is not about the business logic or hide everything that, or like highlight everything that is",
    "start": "3535916",
    "end": "3542291"
  },
  {
    "text": "about concurrency or highlight everything that is about error handling with Effect. You already put in sort of like the",
    "start": "3542291",
    "end": "3548541"
  },
  {
    "text": "structural effort and I think we're going to see some, some big rewards even beyond",
    "start": "3548541",
    "end": "3553750"
  },
  {
    "text": "what we have right now. That's very interesting. I never thought about this, but, uh, it",
    "start": "3553750",
    "end": "3559083"
  },
  {
    "text": "makes it enough sense. Yeah. The, the tooling that you can build on, on, on top of these like static",
    "start": "3559083",
    "end": "3564875"
  },
  {
    "text": "descriptions of a program is just like limitless. Yeah. Interesting.",
    "start": "3565083",
    "end": "3570083"
  },
  {
    "text": "Yeah. This is something I'm very, very excited about. And we've, we talked briefly before about",
    "start": "3570166",
    "end": "3575250"
  },
  {
    "text": "the launch of the Effect Playground. I think it's super nice to have like an environment where it can just play",
    "start": "3575250",
    "end": "3581041"
  },
  {
    "text": "around a little bit, get familiar with something. I use it on a daily basis to maybe understand an API surface a bit better",
    "start": "3581041",
    "end": "3588166"
  },
  {
    "text": "and just play around with it, have fun. And we also threw in support for some of the effect dev tools in there,",
    "start": "3588666",
    "end": "3595583"
  },
  {
    "text": "notably also the trace viewer. And this is where you can get real time",
    "start": "3595583",
    "end": "3601041"
  },
  {
    "text": "feedback for what does it mean for my program to run this is where it may be a certain thing took like a second",
    "start": "3601041",
    "end": "3608041"
  },
  {
    "text": "and then should just time out, et cetera, like visually see what's going on.",
    "start": "3608291",
    "end": "3613583"
  },
  {
    "text": "There's so many tooling possibilities that are coming. And that's gonna just kind of like the",
    "start": "3614000",
    "end": "3620375"
  },
  {
    "text": "gift that keeps on giving as like you adopt Effect, and there's like so many benefits that just fall out of that.",
    "start": "3620375",
    "end": "3626083"
  },
  {
    "text": "I think we're still at the beginning and it's already very rewarding for at least in my experience",
    "start": "3626458",
    "end": "3632083"
  },
  {
    "text": "and what I've seen so far. So you shared your experience using an adopting Effect",
    "start": "3632083",
    "end": "3638458"
  },
  {
    "text": "and also how you help your own team adopt Effect and be productive with it",
    "start": "3638750",
    "end": "3644333"
  },
  {
    "text": "through code reviews and helping them to refactor code and build new Effect programs.",
    "start": "3644375",
    "end": "3649250"
  },
  {
    "text": "But given that you built this service framework that is used, I think all across Zendesk when it comes to",
    "start": "3649416",
    "end": "3655791"
  },
  {
    "text": "TypeScript code, there's now more and more people that are exposed to effect. So how was their experience?",
    "start": "3655791",
    "end": "3662083"
  },
  {
    "text": "Maybe you got a little bit of like questions. What is that thing? Uh, maybe some similar concerns that",
    "start": "3662208",
    "end": "3670250"
  },
  {
    "text": "people asked about fp-ts So which sort of questions did you hear.",
    "start": "3670250",
    "end": "3675166"
  },
  {
    "text": "Yes. Uh, well, that's a great question. So let me start with another team, uh, not my team.",
    "start": "3676041",
    "end": "3681791"
  },
  {
    "text": "That's the closest to our team. And they have some services that are",
    "start": "3681875",
    "end": "3687250"
  },
  {
    "text": "fully written in fp-ts and using our service framework, so they're looking and",
    "start": "3687250",
    "end": "3693625"
  },
  {
    "text": "watching us from the sidelines, writing Effect code line, because we're enjoying this opportunity of building a completely",
    "start": "3693625",
    "end": "3699916"
  },
  {
    "text": "new service from scratch. And, uh, they're, they weren't so lucky. So they're still stuck with their fp-ts project.",
    "start": "3700041",
    "end": "3706791"
  },
  {
    "text": "And they're just looking at us, uh, and are maybe a little bit jealous,",
    "start": "3706958",
    "end": "3712875"
  },
  {
    "text": "of us that we're writing effect already because they've been looking forward to writing effect as well.",
    "start": "3713208",
    "end": "3718416"
  },
  {
    "text": "But, but I'm helping them try to figure out how to migrate, fp-ts to",
    "start": "3719041",
    "end": "3724125"
  },
  {
    "text": "effect also incrementally it's, it's a bit tough. Especially if you have your own abstractions and own ways of doing things",
    "start": "3724166",
    "end": "3731958"
  },
  {
    "text": "with fp-ts, so it's really slow. And also it's really hard to justify, to",
    "start": "3732041",
    "end": "3737791"
  },
  {
    "text": "spend the time to fully migrate a rather large project in one go.",
    "start": "3737791",
    "end": "3742750"
  },
  {
    "text": "So it really has to be incremental. So that's, that's a positive feedback from them. But then we also have teams that are",
    "start": "3743083",
    "end": "3750458"
  },
  {
    "text": "outside of our immediate organization and they are, let's say more TypeScript",
    "start": "3750458",
    "end": "3756250"
  },
  {
    "text": "native teams and they have completely different requirements from, from my team",
    "start": "3756250",
    "end": "3764333"
  },
  {
    "text": "and from the other Guide team. Because Effect was not their choice. It was our choice for, for the",
    "start": "3764333",
    "end": "3771541"
  },
  {
    "text": "TypeScript service framework. Right. And the service framework does provide a lot of value, but without",
    "start": "3771541",
    "end": "3778875"
  },
  {
    "text": "knowing Effect necessarily or fp-ts even it's really hard to tap into",
    "start": "3778875",
    "end": "3784083"
  },
  {
    "text": "that value and, and use it immediately in your project, which knows nothing about fp-ts or Effect and the engineers",
    "start": "3784083",
    "end": "3790333"
  },
  {
    "text": "know nothing about fp-ts and Effect. So here Effect actually brings some",
    "start": "3790333",
    "end": "3795875"
  },
  {
    "text": "really good tools, that can help bridge between the two requirements and",
    "start": "3795875",
    "end": "3801875"
  },
  {
    "text": "that's the adapter layers. So basically when you have an Effect, you can run it as a promise or you have",
    "start": "3801875",
    "end": "3808083"
  },
  {
    "text": "a promise and then you can wrap it into an effect using different APIs. So in our service framework, this is",
    "start": "3808083",
    "end": "3815458"
  },
  {
    "text": "something that we're going to be leaning on more and more because we want to",
    "start": "3815458",
    "end": "3821208"
  },
  {
    "text": "provide the benefit to all the users regardless whether they choose effect or not.",
    "start": "3821208",
    "end": "3826333"
  },
  {
    "text": "So for every effect API, we can have a rule that we will also be able to a promise based API, which is fully built",
    "start": "3827166",
    "end": "3834166"
  },
  {
    "text": "on top of the effect, because we're just going to satisfy all the dependencies at the time and, and run it as a promise.",
    "start": "3834166",
    "end": "3841250"
  },
  {
    "text": "And then they can always look up what kind of failure modes there can be because they can just",
    "start": "3842250",
    "end": "3847958"
  },
  {
    "text": "follow by convention, or by inspecting the implementation. They can see which effect APIs,",
    "start": "3847958",
    "end": "3854291"
  },
  {
    "text": "rather which service framework effect based service framework API is wrapped and then discover the",
    "start": "3854291",
    "end": "3860541"
  },
  {
    "text": "type signature there. So that's, that's one way how they can reap the benefit of knowing what kind of errors there are.",
    "start": "3860541",
    "end": "3866541"
  },
  {
    "text": "They don't have to inspect all the depths. I don't know how even people were doing",
    "start": "3866541",
    "end": "3872041"
  },
  {
    "text": "it with like regular type script libraries. You know, how do you discover what kind of errors you may encounter?",
    "start": "3872041",
    "end": "3877583"
  },
  {
    "text": "Like, I think typically you don't and you discovered during runtime and logging. Yeah, exactly.",
    "start": "3877875",
    "end": "3883541"
  },
  {
    "text": "It will be so nice to know like, Oh, here's the documentation page. It lists all the 150 ways of my program",
    "start": "3884458",
    "end": "3892583"
  },
  {
    "text": "failing or my library failing. But this, this doesn't exist. I at least I have not seen a library",
    "start": "3892583",
    "end": "3899708"
  },
  {
    "text": "documenting their implementation or their API's to this level. It would also be really terrible to",
    "start": "3899708",
    "end": "3905916"
  },
  {
    "text": "maintain the documentation for this. I mean, we have the perfect primitive for that, which are types and I",
    "start": "3905916",
    "end": "3911958"
  },
  {
    "text": "guess more modern programming languages, such as Rust, et cetera, they have figured this out and they return results",
    "start": "3911958",
    "end": "3919625"
  },
  {
    "text": "in case something can go wrong. And I mean, Effect is about the same idea",
    "start": "3919625",
    "end": "3924791"
  },
  {
    "text": "that you don't just return just the success value, but also you're returning the, the errors just through",
    "start": "3924791",
    "end": "3931416"
  },
  {
    "text": "the return channel as, as other things as well, but coming back to the point you were just making, I liked",
    "start": "3931416",
    "end": "3937291"
  },
  {
    "text": "that approach that basically for the folks in your organization who are",
    "start": "3937291",
    "end": "3943416"
  },
  {
    "text": "already excited and interested about Effect, they can already start consuming the effect API's for the ones who",
    "start": "3943416",
    "end": "3950750"
  },
  {
    "text": "are still on the fence or are not quite ready to make the jump yet. They can still stay in the Promise land",
    "start": "3950791",
    "end": "3958666"
  },
  {
    "text": "and need to deal with, errors, et cetera, the, the good, bad",
    "start": "3958666",
    "end": "3963875"
  },
  {
    "text": "way, um, the old bad way. Which sort of questions do you typically",
    "start": "3963875",
    "end": "3969125"
  },
  {
    "text": "hear when someone is as confronted with Effect, I suppose there's a full spectrum of people.",
    "start": "3969125",
    "end": "3976458"
  },
  {
    "text": "You immediately get it and are excited to dig in to people who are maybe curious,",
    "start": "3976791",
    "end": "3983041"
  },
  {
    "text": "but don't quite get it. And then maybe people who are much more skeptical and maybe this",
    "start": "3983250",
    "end": "3990125"
  },
  {
    "text": "reminds them of like some other bad time they had in the past and why they have",
    "start": "3990125",
    "end": "3995458"
  },
  {
    "text": "reasons in mind, why they don't want to adopt it. So tell me more about the different kinds of reactions that you've seen.",
    "start": "3995500",
    "end": "4001250"
  },
  {
    "text": "Yes. So I've done a few Effect related presentations",
    "start": "4002333",
    "end": "4008291"
  },
  {
    "text": "at Zendesk already. I presented at our annual tech conference in May.",
    "start": "4008500",
    "end": "4014458"
  },
  {
    "text": "So I had the opportunity to actually get some of those questions and lots",
    "start": "4014583",
    "end": "4021000"
  },
  {
    "text": "of people are actually skeptical. Maybe due to their own experience with something",
    "start": "4021000",
    "end": "4026250"
  },
  {
    "text": "similar that they tried or just, it just looks too functional for them and they're more familiar in the",
    "start": "4026250",
    "end": "4034708"
  },
  {
    "text": "OP and dynamically typed languages. They don't necessarily understand it.",
    "start": "4034708",
    "end": "4041333"
  },
  {
    "text": "Like at Zendesk, we have lots of engineers who have experienced all the issues related to scale",
    "start": "4041333",
    "end": "4047625"
  },
  {
    "text": "maintainability, testability, reliability, all these things, but still this alone is",
    "start": "4047625",
    "end": "4055000"
  },
  {
    "text": "not necessarily not a huge selling point for them necessarily because they already have their ways around it.",
    "start": "4055000",
    "end": "4061125"
  },
  {
    "text": "Like they have years of experience doing Ruby years of experience doing whatever. And they, they know their way around it.",
    "start": "4061166",
    "end": "4068083"
  },
  {
    "text": "Maybe they don't even care necessarily about super reliability because there's like feature flex.",
    "start": "4068083",
    "end": "4073916"
  },
  {
    "text": "So you can basically not break everybody at the same time, but you just break a tiny bit of, uh, of the",
    "start": "4074291",
    "end": "4081916"
  },
  {
    "text": "customers, which is understandable. If you don't have any other option",
    "start": "4081916",
    "end": "4087500"
  },
  {
    "text": "because you're limiting the blast radius. But it's also not something I'm really a big fan of.",
    "start": "4087500",
    "end": "4093333"
  },
  {
    "text": "Like I really want to catch the errors and possible failure cases even before I commit my changes.",
    "start": "4093375",
    "end": "4099750"
  },
  {
    "text": "Like that's the ideal thing. I don't even want to push it somewhere to a CI and then waste CPU cycles,",
    "start": "4100000",
    "end": "4106625"
  },
  {
    "text": "of a CI just to make it fail. Um, and then repeat rinse and repeat many",
    "start": "4106625",
    "end": "4112541"
  },
  {
    "text": "times possibly, because also sometimes it's really hard to run all the things that the CI runs locally due to different",
    "start": "4112541",
    "end": "4119666"
  },
  {
    "text": "limitations, but yeah, so we have these people who know their way around.",
    "start": "4119666",
    "end": "4124250"
  },
  {
    "text": "So for them, maybe a bigger concern is usually, okay, but listen, we have so many",
    "start": "4124958",
    "end": "4130875"
  },
  {
    "text": "different technologies at Zendesk, we have to consolidate like, why should this be",
    "start": "4130875",
    "end": "4136291"
  },
  {
    "text": "the thing that we consolidate on? How will you align with all these hundreds of engineers",
    "start": "4136291",
    "end": "4142041"
  },
  {
    "text": "on the single one technology? Obviously we have some processes like ADRs and whatnot, but if it comes",
    "start": "4142333",
    "end": "4149291"
  },
  {
    "text": "to a big change like this, obviously there's going to be also resistance because people just are accustomed to",
    "start": "4149291",
    "end": "4155875"
  },
  {
    "text": "to the status quo. And they're their way of operating and",
    "start": "4155875",
    "end": "4161291"
  },
  {
    "text": "they don't necessarily want to switch. Which is totally reasonable. And I don't want to change anybody's",
    "start": "4161291",
    "end": "4168041"
  },
  {
    "text": "mind or I don't want to force anybody to now, you know, forget about",
    "start": "4168041",
    "end": "4174333"
  },
  {
    "text": "promise land and start incorporating Effect into your code base starting tomorrow.",
    "start": "4174333",
    "end": "4179916"
  },
  {
    "text": "I truly believe it should be like a choice that everybody can make for themselves.",
    "start": "4180958",
    "end": "4186875"
  },
  {
    "text": "But then you have, you know, the company incentives to try and consolidate to, to not go into too many directions",
    "start": "4187458",
    "end": "4194875"
  },
  {
    "text": "because if you want to be productive at, at the top level, you know, at an organizational level, like the more",
    "start": "4194875",
    "end": "4202041"
  },
  {
    "text": "people pull in the same direction, the better you are and the more productive",
    "start": "4202041",
    "end": "4208208"
  },
  {
    "text": "you are. So these are also a little bit political, uh, you know, influence",
    "start": "4208208",
    "end": "4213250"
  },
  {
    "text": "and political, it's a question of politics as well. Like how can you influence",
    "start": "4213583",
    "end": "4218958"
  },
  {
    "text": "without being in a big leadership position and stuff like that.",
    "start": "4218958",
    "end": "4223750"
  },
  {
    "text": "Have you found some arguments like from the many things that Effects can offer that has resonated still with the people",
    "start": "4224083",
    "end": "4232125"
  },
  {
    "text": "who are more in the skeptical spectrum? Yes. Um, so sometimes I do, because let's say",
    "start": "4232125",
    "end": "4239708"
  },
  {
    "text": "you're a company and then now you had this financial crisis where the",
    "start": "4239708",
    "end": "4244833"
  },
  {
    "text": "interest rates went up and now, uh, you figure out that money doesn't grow on the",
    "start": "4244833",
    "end": "4250500"
  },
  {
    "text": "trees and you have layoffs and whatnot. And suddenly you stop backfilling for",
    "start": "4250500",
    "end": "4256958"
  },
  {
    "text": "positions, you know, which, which came up because of churn and you're not used to pairing.",
    "start": "4256958",
    "end": "4263833"
  },
  {
    "text": "So you have hiring freeze or whatever suddenly. And, but the expectations of productivity are staying the same.",
    "start": "4264041",
    "end": "4269833"
  },
  {
    "text": "So basically you have more workload per person. That's, that's the final result.",
    "start": "4269875",
    "end": "4275041"
  },
  {
    "text": "The company still expects you to deliver, but now you are fewer people to do so.",
    "start": "4275791",
    "end": "4280416"
  },
  {
    "text": "It's, it's a hypothetical one. Right. So what do you do? Well, I think TypeScript is positioned",
    "start": "4280916",
    "end": "4287833"
  },
  {
    "text": "really well because you can have TypeScript both on the front end, which in many cases you do, and then",
    "start": "4287833",
    "end": "4294166"
  },
  {
    "text": "you can have it on the back end as well, which is, isn't a terrible option. Especially like, you know, you have NodeJS",
    "start": "4294166",
    "end": "4300041"
  },
  {
    "text": "or Dino or whatever, nodeJS with its event loop runtime, perfectly suited",
    "start": "4300041",
    "end": "4306416"
  },
  {
    "text": "for i/o heavy operations. And as far as I'm aware, like 90% of what",
    "start": "4306416",
    "end": "4313500"
  },
  {
    "text": "Zendesk does is i/o heavy. We take a message, no matter where it comes from, we do some processing and",
    "start": "4313500",
    "end": "4320500"
  },
  {
    "text": "we send a message somewhere else. Like maybe it's like you, you, you start a record in the database or you emit a",
    "start": "4320500",
    "end": "4327208"
  },
  {
    "text": "thing in Kafka, maybe you have like a MySQL connector with Kafka, so you can do these things",
    "start": "4327208",
    "end": "4333166"
  },
  {
    "text": "in a single transaction. So basically you manage your distributed transactions this way. So you do a ton of like taking things",
    "start": "4333166",
    "end": "4340458"
  },
  {
    "text": "from here, pushing there. A lot of waiting time, a lot of i/o, what do you do? Like with Ruby, obviously.",
    "start": "4340458",
    "end": "4347166"
  },
  {
    "text": "And this is another thing that I often mention is cost. Like if you have nodeJS handling",
    "start": "4347208",
    "end": "4354500"
  },
  {
    "text": "traffic, like large concurrent traffic, heavy traffic, you can save a",
    "start": "4354500",
    "end": "4360916"
  },
  {
    "text": "lot of cost because with Ruby. What's your option there? Well, yes, you can use threads, but then",
    "start": "4360916",
    "end": "4368083"
  },
  {
    "text": "your memory consumption goes up because threats are not for free. Or you can scale horizontally.",
    "start": "4368083",
    "end": "4374666"
  },
  {
    "text": "So when you put the horizontal pod autoscaler max it out at 24 replicas or whatever you figure out the rules",
    "start": "4374666",
    "end": "4382583"
  },
  {
    "text": "around how to increase the replica count by how much, when, what is the signal that you're looking at?",
    "start": "4382583",
    "end": "4388291"
  },
  {
    "text": "You know, you can figure out all of these things, or you can just have a few replicas,",
    "start": "4388291",
    "end": "4394333"
  },
  {
    "text": "maybe one per availability zone, 2 per availability zone for extra",
    "start": "4394333",
    "end": "4399375"
  },
  {
    "text": "redundancy of a node, uh, process. And then suddenly you have a throughput of what?",
    "start": "4399458",
    "end": "4404000"
  },
  {
    "text": "Tens of thousands of requests per second. So, so it's also money, you know?",
    "start": "4404625",
    "end": "4410333"
  },
  {
    "text": "So when you, when you talk to high, uh, to the leadership, you have to convince them with some",
    "start": "4410333",
    "end": "4416125"
  },
  {
    "text": "hard hitting facts. And it's not just, obviously you can say, ah, in theory, this works.",
    "start": "4416125",
    "end": "4422833"
  },
  {
    "text": "No, you have to sit down, do the analysis, maybe set up some project which can",
    "start": "4423000",
    "end": "4427916"
  },
  {
    "text": "demonstrate how much more cost efficient it is compared to other similar",
    "start": "4428083",
    "end": "4434000"
  },
  {
    "text": "workloads, put it into money, uh, values, right?",
    "start": "4434083",
    "end": "4440208"
  },
  {
    "text": "Uh, convert it into dollars or whatever, and then show the difference. And then once you do this, you know, you,",
    "start": "4440791",
    "end": "4448458"
  },
  {
    "text": "you, you won the golden ticket or something because it comes down to money in the end always.",
    "start": "4448458",
    "end": "4453458"
  },
  {
    "text": "Yeah, totally. And I agree with that approach that you can basically like, let the",
    "start": "4453958",
    "end": "4460583"
  },
  {
    "text": "actions, actions speak louder than words. And you're doing the right work already.",
    "start": "4460583",
    "end": "4466083"
  },
  {
    "text": "You're are shipping things in production. You're appreciating and leveraging all",
    "start": "4466541",
    "end": "4472625"
  },
  {
    "text": "the benefits that Effect provides to you. And I think the, your team and some other",
    "start": "4472625",
    "end": "4479541"
  },
  {
    "text": "peer teams have a great experience already with Effect. And I think those will show the results",
    "start": "4479541",
    "end": "4486000"
  },
  {
    "text": "and that might make a case for itself and prove out that it's not just words,",
    "start": "4486000",
    "end": "4492166"
  },
  {
    "text": "but it's actually an improved reality that makes teams more effective,",
    "start": "4492166",
    "end": "4498125"
  },
  {
    "text": "more efficient, happier, and possibly also then saves resources and",
    "start": "4498583",
    "end": "4504333"
  },
  {
    "text": "money when it comes to running those services, saves down times, et cetera.",
    "start": "4504333",
    "end": "4509375"
  },
  {
    "text": "So I'm sure the, the more time continues, the more all of those arguments",
    "start": "4509625",
    "end": "4515250"
  },
  {
    "text": "going to resolve themselves in your favor. And I applaud you for being",
    "start": "4515458",
    "end": "4520583"
  },
  {
    "text": "on the early adopter train. Thank you. I, I do hope that it",
    "start": "4520583",
    "end": "4526750"
  },
  {
    "text": "plays out really well. I'll do my part for sure. Perfect.",
    "start": "4526750",
    "end": "4531250"
  },
  {
    "text": "So maybe that leads me to the last question that I'd love to hear your thoughts on, which is what gets you most",
    "start": "4531958",
    "end": "4538833"
  },
  {
    "start": "4537000",
    "end": "4770000"
  },
  {
    "text": "excited about the future with Effect. Yes.",
    "start": "4538833",
    "end": "4543375"
  },
  {
    "text": "Ah, that's a good question. I haven't put a lot of research into",
    "start": "4544125",
    "end": "4551125"
  },
  {
    "text": "Effect Cluster, but it's definitely something I'm observing again from the sidelines and look forward to using",
    "start": "4551125",
    "end": "4558166"
  },
  {
    "text": "in the future, maybe for some use cases like backfills, let's say.",
    "start": "4558416",
    "end": "4563416"
  },
  {
    "text": "I have my event sourced service and now I evolve my, uh, event schema from version",
    "start": "4564333",
    "end": "4571583"
  },
  {
    "text": "one to version two, maybe two version three. And now I feel like, okay, my switch",
    "start": "4571583",
    "end": "4578166"
  },
  {
    "text": "statements where we, where I, where I switch between the versions of the schema and then, uh, the way I'm reducing the",
    "start": "4578166",
    "end": "4585541"
  },
  {
    "text": "events into a single aggregate, it's getting a bit cumbersome. So let's just migrate some of those old",
    "start": "4585666",
    "end": "4591666"
  },
  {
    "text": "schema versions to the latest one. So having like millions, maybe billions",
    "start": "4591666",
    "end": "4597791"
  },
  {
    "text": "of records, it could take quite some time to do this sequentially.",
    "start": "4597791",
    "end": "4602250"
  },
  {
    "text": "So having like a solution where I can have set up some workers, which can agree",
    "start": "4603000",
    "end": "4608458"
  },
  {
    "text": "on, you know, the scheduling and how they're going to partition the database table among each other, uh, and do it in",
    "start": "4608500",
    "end": "4616083"
  },
  {
    "text": "parallel, that, that would be just the. You know, perfect dream come true.",
    "start": "4616083",
    "end": "4621333"
  },
  {
    "text": "I don't want to start the backfill in every cluster one after another, or even",
    "start": "4621333",
    "end": "4626416"
  },
  {
    "text": "in parallel, and then like having to like watch tens or dozens of, you",
    "start": "4626416",
    "end": "4632333"
  },
  {
    "text": "know, monitors to see the progress of each individual backfill on every Kubernetes cluster and then managing that for hours.",
    "start": "4632333",
    "end": "4641291"
  },
  {
    "text": "You know, if that could be like maybe a 10 or 20 minute thing, that would be",
    "start": "4642208",
    "end": "4648208"
  },
  {
    "text": "just the perfect dream, right? So I'm looking forward to Cluster. Yeah, me too.",
    "start": "4648208",
    "end": "4653208"
  },
  {
    "text": "This is, uh, one of the, as I said, like, uh, be the, the gift that keeps on giving",
    "start": "4653500",
    "end": "4658583"
  },
  {
    "text": "and we're going to have like many layers built on top of the foundations that we already benefit from and the Effect",
    "start": "4658875",
    "end": "4667000"
  },
  {
    "text": "Cluster and Effect workflow primitives that are in the work and the systems that are in the work.",
    "start": "4667000",
    "end": "4671666"
  },
  {
    "text": "Uh, I think that's gonna, yeah, that that's going to be literally next level. This is going to unlock some benefits",
    "start": "4672416",
    "end": "4679500"
  },
  {
    "text": "that you see from systems like Temporal Temporal IO, not the new time standard,",
    "start": "4679500",
    "end": "4684916"
  },
  {
    "text": "but temporal IO, which is about durable workflows and, and workflow scheduling and running long lived things.",
    "start": "4685125",
    "end": "4693208"
  },
  {
    "text": "You can already do that in Effect combined with temporal, but Effect",
    "start": "4693583",
    "end": "4699000"
  },
  {
    "text": "is the perfect foundation to do that, uh, natively with the effect primitives.",
    "start": "4699000",
    "end": "4703958"
  },
  {
    "text": "When you think about rerunning something, if something has failed scheduling, some work, um, processing work across multiple",
    "start": "4704208",
    "end": "4713375"
  },
  {
    "text": "workers and massively parallelized systems. This is where we have like amazing",
    "start": "4713375",
    "end": "4719708"
  },
  {
    "text": "foundations for that. And that's being systematized with the effect cluster and effect workflows",
    "start": "4719708",
    "end": "4725041"
  },
  {
    "text": "project, which is now in development for, I think also like in research for a few years now.",
    "start": "4725041",
    "end": "4731625"
  },
  {
    "text": "And I think it's alpha grade right now. I think some people are already starting to use it.",
    "start": "4731958",
    "end": "4737250"
  },
  {
    "text": "I'm actually also planning to give it a shot soon for the music app that I'm",
    "start": "4737833",
    "end": "4743041"
  },
  {
    "text": "building, and I think it will take a little bit of more time to be fully production ready, just because it's also",
    "start": "4743041",
    "end": "4748791"
  },
  {
    "text": "a very ambitious project, but it's very principled and I'm very excited about the potential for it.",
    "start": "4748791",
    "end": "4755708"
  },
  {
    "text": "And I think we're going to hear a lot more about that in the months and years to come and possibly the next year's",
    "start": "4755708",
    "end": "4761416"
  },
  {
    "text": "Effect Conference already. So yeah, super excited that you're excited about that.",
    "start": "4761416",
    "end": "4766625"
  },
  {
    "text": "Because I think you have some really interesting use cases for that. So, Attila, thank you so much for",
    "start": "4767083",
    "end": "4773125"
  },
  {
    "start": "4770000",
    "end": "4831000"
  },
  {
    "text": "taking the time today to doing the initial episode of the Cause & Effect",
    "start": "4773125",
    "end": "4778250"
  },
  {
    "text": "Podcast with me and taking the time. So that's much appreciated. And thank you so much.",
    "start": "4778250",
    "end": "4783666"
  },
  {
    "text": "Thank you. It's been a great honor to be the first guest of this amazing podcast.",
    "start": "4784333",
    "end": "4789583"
  },
  {
    "text": "Perfect. Thank you. Take care. Take care. Thank you for listening to the \"Cause & Effect\" podcast.",
    "start": "4790166",
    "end": "4795791"
  },
  {
    "text": "If you've enjoyed this episode, please subscribe, leave a review, and share it with your friends.",
    "start": "4796083",
    "end": "4800833"
  },
  {
    "text": "If you haven't done so already, you can join our Discord community. And if you have any questions, feedback,",
    "start": "4801375",
    "end": "4806958"
  },
  {
    "text": "or suggestions about this episode or about Effect in general, don't hesitate to get in touch.",
    "start": "4806958",
    "end": "4812375"
  },
  {
    "text": "See you in the next episode.",
    "start": "4813041",
    "end": "4814250"
  }
]