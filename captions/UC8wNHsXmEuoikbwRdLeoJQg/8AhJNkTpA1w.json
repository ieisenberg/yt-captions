[
  {
    "text": "Hello everyone. Welcome back to another Mike and Max stream.",
    "start": "3900",
    "end": "10766"
  },
  {
    "text": "Getting used to it. Yeah, really.",
    "start": "12866",
    "end": "14666"
  },
  {
    "text": "So I've opened up the mod view. If anyone starts to complain, ban everyone.",
    "start": "18800",
    "end": "23666"
  },
  {
    "text": "That's fine. Ban everyone. Ban everyone, yeah. That's a good start.",
    "start": "23966",
    "end": "28333"
  },
  {
    "text": "So I think that today's stream is a little bit different than what we do on Wednesdays",
    "start": "29800",
    "end": "35966"
  },
  {
    "text": "usually. I don't think we're really going to be doing that much coding. Maybe we'll get a little bit of coding done.",
    "start": "36000",
    "end": "41199"
  },
  {
    "text": "But the purpose of today's stream is really to discuss, you",
    "start": "41466",
    "end": "47333"
  },
  {
    "text": "know, in Discord offline, we've been having discussions about",
    "start": "47333",
    "end": "52500"
  },
  {
    "text": "cluster, effect cluster, and ways that we can improve",
    "start": "52500",
    "end": "57466"
  },
  {
    "text": "it, ways that we can make the user experience better, make it more accessible to folks who",
    "start": "57633",
    "end": "63366"
  },
  {
    "text": "want to use it. And also just generally improve the API and kind of enable more things to be accomplished",
    "start": "63366",
    "end": "69366"
  },
  {
    "text": "with the API. So we figured instead of chatting about it in Discord offline,",
    "start": "69366",
    "end": "74866"
  },
  {
    "text": "we might as well chat about it in public and let you all hear what we're talking about.",
    "start": "75533",
    "end": "80366"
  },
  {
    "text": "And we may be joined in a little while by Mattia as well, who's been kind of the driving force behind cluster up until now.",
    "start": "83333",
    "end": "89599"
  },
  {
    "text": "And yeah, one of the things that we have been focusing on recently, you know, for those",
    "start": "92199",
    "end": "97800"
  },
  {
    "text": "of you who are maybe not familiar with cluster, it is a cluster",
    "start": "97800",
    "end": "103466"
  },
  {
    "text": "sharding framework that has been built into effect. Originally, I think it started off as a",
    "start": "103466",
    "end": "110133"
  },
  {
    "text": "direct port of shardcake, right, Mike? Yeah, it kind of started off as a direct port.",
    "start": "110133",
    "end": "116166"
  },
  {
    "text": "But then it was extended support, more",
    "start": "117533",
    "end": "122732"
  },
  {
    "text": "reliable forms of communication. I think shardcake only took care of the",
    "start": "122733",
    "end": "130466"
  },
  {
    "text": "sharding part, was really more of a sort of a computation",
    "start": "130466",
    "end": "139966"
  },
  {
    "text": "framework instead of it being a framework that allowed for",
    "start": "140333",
    "end": "146533"
  },
  {
    "text": "durable computing to execute and other stuff. So Mattia initially took the design from",
    "start": "146533",
    "end": "155933"
  },
  {
    "text": "shardcake and then with a few iteration loops, we sort of reinvented part of the internals.",
    "start": "155933",
    "end": "163765"
  },
  {
    "text": "And now we are in a phase where we are starting to consolidate on the ideas.",
    "start": "164699",
    "end": "169833"
  },
  {
    "text": "We already have some alphas out, some people already tried it out. We have the first learnings to integrate.",
    "start": "169866",
    "end": "175699"
  },
  {
    "text": "And given that it's quite a complex project, we thought public",
    "start": "176933",
    "end": "184366"
  },
  {
    "text": "synchronization every week or biweekly would be helpful to get",
    "start": "184366",
    "end": "191366"
  },
  {
    "text": "aligned and make sure we make a great thing.",
    "start": "191366",
    "end": "197233"
  },
  {
    "text": "Hey, Mattia, welcome. Hello, everyone. Sorry today, I will be kind of joining in, joining out, joining in, joining out.",
    "start": "198966",
    "end": "205765"
  },
  {
    "text": "But yeah, no worries. Totally fine. What's all things going on? No worries, no worries.",
    "start": "206733",
    "end": "212033"
  },
  {
    "text": "Just happy that you're here. So we were just kind of talking about, kind of catching everyone up on what we've been",
    "start": "212466",
    "end": "218599"
  },
  {
    "text": "talking about offline. So recently, our focus has been kind of",
    "start": "218800",
    "end": "225466"
  },
  {
    "text": "on the creation of entities within cluster. Basically, like how does a developer who",
    "start": "225466",
    "end": "232933"
  },
  {
    "text": "wants to start creating entities to be able to register into a cluster, how does that look like?",
    "start": "232933",
    "end": "238599"
  },
  {
    "text": "You know, how can we improve the current API? How can we enable more things without adding a whole ton of verbosity?",
    "start": "239166",
    "end": "245333"
  },
  {
    "text": "And so we've been really talking about, you know, the what",
    "start": "247333",
    "end": "252400"
  },
  {
    "text": "happens when you send a message to an entity, either from a client or from another entity,",
    "start": "252400",
    "end": "257466"
  },
  {
    "text": "what should the process look like? What happens when that message is",
    "start": "257966",
    "end": "263500"
  },
  {
    "text": "received by an entity? And then how does the developer control the behavior that happens",
    "start": "263500",
    "end": "270599"
  },
  {
    "text": "when that message actually gets processed? So we've been slowly, I think, zeroing in",
    "start": "270599",
    "end": "275932"
  },
  {
    "text": "on a pretty nice API idea. Nothing's really been implemented quite",
    "start": "275933",
    "end": "281932"
  },
  {
    "text": "yet, but we've been slowly kind of zeroing in on what we want.",
    "start": "281933",
    "end": "287366"
  },
  {
    "text": "And it seems totally possible. It's just that I think that now we're trying to kind of like",
    "start": "289733",
    "end": "295533"
  },
  {
    "text": "finalize some of those decisions and maybe like sketch out like some diagrams about what we want",
    "start": "295533",
    "end": "301000"
  },
  {
    "text": "this to look like and whatever. So, yeah.",
    "start": "301000",
    "end": "304199"
  },
  {
    "text": "I don't know if you guys want to, but I was talking to Mike and I personally think it would be helpful if we diagram some of",
    "start": "306900",
    "end": "312733"
  },
  {
    "text": "this stuff out so that we can like have a visual representation of the things we've been talking about, even if it doesn't cover everything,",
    "start": "312733",
    "end": "318366"
  },
  {
    "text": "it'll at least maybe we can start diagramming out what is the current flow in the current",
    "start": "319466",
    "end": "326065"
  },
  {
    "text": "alpha we have and then try to see how that maps out to what we want.",
    "start": "326233",
    "end": "332366"
  },
  {
    "text": "If there are some parts in common, if we need, when we need to change, basically ensuring",
    "start": "333066",
    "end": "338900"
  },
  {
    "text": "what is the current state of the flow and then seeking out what we want the flow to be.",
    "start": "338900",
    "end": "343732"
  },
  {
    "text": "Yeah, I think that sounds good. I'm going to start out using TL draw.",
    "start": "344599",
    "end": "349966"
  },
  {
    "text": "Yeah, so maybe we can walk through kind of what the current process is.",
    "start": "353166",
    "end": "359233"
  },
  {
    "text": "like Mattia said, and maybe we can do it from the perspective of like, you know, let's say the developers",
    "start": "359233",
    "end": "365566"
  },
  {
    "text": "like registered an entity with the cluster and there's a client that's sending a message",
    "start": "365566",
    "end": "371099"
  },
  {
    "text": "to that entity and maybe we can kind of walk through what the current process is. So we can start by, let's say that we",
    "start": "372099",
    "end": "380866"
  },
  {
    "text": "have two systems, two different systems. So we can maybe start out by doing two different topics that",
    "start": "380866",
    "end": "386766"
  },
  {
    "text": "actually represent the two different systems involved in the communication.",
    "start": "386766",
    "end": "391133"
  },
  {
    "text": "And inside those two systems, those are what's called the pod. Those are basically the application",
    "start": "392699",
    "end": "400500"
  },
  {
    "text": "behavior runner, let's say. The pod basically is an application",
    "start": "400500",
    "end": "405900"
  },
  {
    "text": "server that runs your behaviors. You can run many kinds of different",
    "start": "405900",
    "end": "411800"
  },
  {
    "text": "behaviors and can host many kind of entities.",
    "start": "411800",
    "end": "416166"
  },
  {
    "text": "So we've got an application server. This application server is the equivalent.",
    "start": "418633",
    "end": "423432"
  },
  {
    "text": "Let's call that pod B. And just again, to help those who are",
    "start": "424466",
    "end": "430500"
  },
  {
    "text": "maybe not familiar with cluster parlance yet, the term, the cluster term for something like this is a pod.",
    "start": "430500",
    "end": "436900"
  },
  {
    "text": "Pod can host multiple shards with multiple entities per shard.",
    "start": "437733",
    "end": "442565"
  },
  {
    "text": "And so let's do the case. Basically, a pod is in simple words what maps to something like a Kubernetes pod,",
    "start": "444233",
    "end": "452733"
  },
  {
    "text": "which is a JavaScript process in a sense. Correct me if I'm wrong.",
    "start": "453300",
    "end": "457866"
  },
  {
    "text": "Yeah, I think that makes sense. A pod can host multiple containers just like in cluster.",
    "start": "460500",
    "end": "466000"
  },
  {
    "text": "A pod can host multiple entities. What did you want pod A to represent in this case, Mattia?",
    "start": "467033",
    "end": "472900"
  },
  {
    "text": "Both are application servers. They are both application servers. They are in the simplest solution.",
    "start": "474500",
    "end": "479932"
  },
  {
    "text": "You will have only one pod, the simplest solution. In the most complex solution,",
    "start": "480333",
    "end": "485500"
  },
  {
    "text": "they have thousands of pods. The key thing is that they may have",
    "start": "486033",
    "end": "491666"
  },
  {
    "text": "multiple pods, but the code they run is basically identical.",
    "start": "491666",
    "end": "496633"
  },
  {
    "text": "You can have one or more many identical copies of your application servers.",
    "start": "497566",
    "end": "501800"
  },
  {
    "text": "And then pods get assigned a number of shards. Exactly. All right, so maybe we can just represent",
    "start": "504000",
    "end": "509766"
  },
  {
    "text": "that really quickly with a shard one.",
    "start": "509766",
    "end": "518932"
  },
  {
    "text": "Right.",
    "start": "519933",
    "end": "520133"
  },
  {
    "text": "No. I'd say maybe that's something that a",
    "start": "528300",
    "end": "535500"
  },
  {
    "text": "shard is something that gets assigned to a pod. Basically, the thing is that we said",
    "start": "535500",
    "end": "542800"
  },
  {
    "text": "before that pods run entities. Entities have each one unique ID that",
    "start": "542800",
    "end": "550566"
  },
  {
    "text": "represents that entity. Right. And the thing is that if the shard",
    "start": "550566",
    "end": "556832"
  },
  {
    "text": "manager has to know where each single entity lives,",
    "start": "556833",
    "end": "562566"
  },
  {
    "text": "that can be very computational heavy because you can have thousands of entities in your system.",
    "start": "563433",
    "end": "568466"
  },
  {
    "text": "So what the system does is something clever is instead of knowing exactly where each single entity lives,",
    "start": "569233",
    "end": "575233"
  },
  {
    "text": "the cluster will basically group many entities into a group",
    "start": "575933",
    "end": "581532"
  },
  {
    "text": "that's called a shard. And basically, a shard is a group of entities. Okay.",
    "start": "581533",
    "end": "586533"
  },
  {
    "text": "So the most simple example I could give",
    "start": "587000",
    "end": "593533"
  },
  {
    "text": "is let's say that we have a group of people. Okay. And we need to divide the people.",
    "start": "593533",
    "end": "598333"
  },
  {
    "text": "What can be the way to divide those people? We could say, for example, that based on",
    "start": "599199",
    "end": "605066"
  },
  {
    "text": "the first letter of their name, we split up those people in groups. So instead of having a larger group of",
    "start": "605066",
    "end": "612500"
  },
  {
    "text": "people of 20 people, we have smaller groups that are easier to manage. And that's basically what a shard is.",
    "start": "612500",
    "end": "618233"
  },
  {
    "text": "It's a group that represents a list of entities, but is simpler to",
    "start": "618233",
    "end": "623766"
  },
  {
    "text": "manage from the cluster side. And most importantly, the assignment",
    "start": "623766",
    "end": "631500"
  },
  {
    "text": "between a shard and a pod is managed by the shard manager.",
    "start": "631500",
    "end": "637433"
  },
  {
    "text": "So there is a process which basically monitors all the shards, all the pods",
    "start": "638166",
    "end": "644533"
  },
  {
    "text": "that come up and handles the rebalancing.",
    "start": "644533",
    "end": "649533"
  },
  {
    "text": "Instead, an entity never changes the shard assignment. An entity is assigned to a",
    "start": "650533",
    "end": "657166"
  },
  {
    "text": "shard in a static manner. But say, for example, we have, I don't know, 1024 shards.",
    "start": "657166",
    "end": "664766"
  },
  {
    "text": "Each entity has an ID. We hash the ID. We divide.",
    "start": "665633",
    "end": "670199"
  },
  {
    "text": "We take the module 1024 and that gives a single number and that",
    "start": "670899",
    "end": "677533"
  },
  {
    "text": "entity is assigned to that shard. In this way, any participant of the cluster or any even external",
    "start": "677533",
    "end": "686199"
  },
  {
    "text": "actor to the system can always know, okay, to contact this entity, I have to",
    "start": "686199",
    "end": "693633"
  },
  {
    "text": "figure where this shard is. So they basically subscribe to the live",
    "start": "693633",
    "end": "700133"
  },
  {
    "text": "assignments for the shards and they know where all the shards are.",
    "start": "700133",
    "end": "705600"
  },
  {
    "text": "And based on the relationship entity to shard, they know which pod to communicate to.",
    "start": "706500",
    "end": "713332"
  },
  {
    "text": "Exactly. The implementation you described for a way to determine the shard is exactly the",
    "start": "713333",
    "end": "719600"
  },
  {
    "text": "one that we are using, basically hashing the ID of the entity and module that to the max number of shards you configured",
    "start": "719600",
    "end": "726333"
  },
  {
    "text": "in the system to add. And that's basically a number that you can deterministically have just",
    "start": "726333",
    "end": "731532"
  },
  {
    "text": "knowing the entity ID and the configuration of the max amount of shards you want to have in the system.",
    "start": "731533",
    "end": "736333"
  },
  {
    "text": "So I sketched out here just like exactly what we were talking about. So everybody can follow along.",
    "start": "739199",
    "end": "745399"
  },
  {
    "text": "We've got our application server or our pod, our first pod, pod A, which has n shards on it.",
    "start": "745399",
    "end": "751333"
  },
  {
    "text": "We can have anywhere from one to many shards on the pod.",
    "start": "751333",
    "end": "756266"
  },
  {
    "text": "And then each shard can have many entities registered within it. So we've got these entities.",
    "start": "757066",
    "end": "762566"
  },
  {
    "text": "Maybe the ID here is not. Not technically, for example, user hash",
    "start": "763300",
    "end": "770966"
  },
  {
    "text": "one, user pound one or to do pound two. Those are, they are not constrained to be",
    "start": "770966",
    "end": "778100"
  },
  {
    "text": "the same kind of entity. Okay. They can be different kind of entities.",
    "start": "778100",
    "end": "782300"
  },
  {
    "text": "Exactly. Right. So we might have like these kinds of entities all the way out to n and then.",
    "start": "783699",
    "end": "790366"
  },
  {
    "text": "And down here we have to do number two,",
    "start": "791633",
    "end": "796833"
  },
  {
    "text": "user two, all the way out to n. Exactly.",
    "start": "798600",
    "end": "803100"
  },
  {
    "text": "And then this kind of like structure, if I understand correctly, is replicated",
    "start": "806633",
    "end": "811899"
  },
  {
    "text": "across basically every pod we have. So every pod can have many shards and every shard can have many entities.",
    "start": "811899",
    "end": "817266"
  },
  {
    "text": "And for the reasons that you described, that makes addressing an entity reasonably efficient within the cluster.",
    "start": "818000",
    "end": "824366"
  },
  {
    "text": "Exactly. Exactly. And, uh, as I said, all",
    "start": "825033",
    "end": "830333"
  },
  {
    "text": "servers are basically a mirror. So we can just basically take the description we just drew and copy that to",
    "start": "830333",
    "end": "837566"
  },
  {
    "text": "make that a server pod B because basically inside we have the same kind of structure.",
    "start": "837566",
    "end": "842165"
  },
  {
    "text": "Yeah. We did the different step maybe on pod B. Yeah, exactly. You don't have the same cards as pod A.",
    "start": "843899",
    "end": "849032"
  },
  {
    "text": "Yeah, exactly. You have shard two that has user number three or whatever. Yeah.",
    "start": "849233",
    "end": "853699"
  },
  {
    "text": "well, maybe instead of copying this over, we can start like describing maybe that we can, maybe we could like zoom in",
    "start": "855466",
    "end": "861766"
  },
  {
    "text": "on like, uh, when a, when a message actually gets sent to one of these entities, what actually happens?",
    "start": "861766",
    "end": "866533"
  },
  {
    "text": "Okay. So, um, I think in the current flow, right?",
    "start": "866899",
    "end": "873833"
  },
  {
    "text": "Let's assume that we send a message. Let's actually zoom in on one of these.",
    "start": "874600",
    "end": "879500"
  },
  {
    "text": "Um, but let's say we zoom in on this particular entity, right? Um, if we have our user one entity.",
    "start": "880566",
    "end": "888633"
  },
  {
    "text": "So let's describe like what actually happens in the current flow when user one receives a message.",
    "start": "897333",
    "end": "904300"
  },
  {
    "text": "Um, well, we first have to describe what happens when you send a message.",
    "start": "908199",
    "end": "913500"
  },
  {
    "text": "Exactly. Exactly. Sorry. I was muted. I was saying exactly the same thing when you want to describe it first, what",
    "start": "915100",
    "end": "920366"
  },
  {
    "text": "happens when you want to send the message from one entity to another. Okay.",
    "start": "920366",
    "end": "925433"
  },
  {
    "text": "So.",
    "start": "925766",
    "end": "925966"
  },
  {
    "text": "And I mean, it doesn't even need to be an entity to another can be an external external system.",
    "start": "932199",
    "end": "937966"
  },
  {
    "text": "Yeah. Why don't we do that? Why don't we do like an external client sending a message to the",
    "start": "938733",
    "end": "944165"
  },
  {
    "text": "user entity, for example? Yeah. Cause that that's exactly the same thing.",
    "start": "944166",
    "end": "948199"
  },
  {
    "text": "So. And this is an external,",
    "start": "950199",
    "end": "957733"
  },
  {
    "text": "I can click this external.",
    "start": "958033",
    "end": "960266"
  },
  {
    "text": "Sending some message. Okay.",
    "start": "964199",
    "end": "967466"
  },
  {
    "text": "Uh, user one actually is inside the, uh, the shard one.",
    "start": "970666",
    "end": "975665"
  },
  {
    "text": "Right. So there'd be like, maybe like a dotted line over here or something like that. Yeah. Something that describes, yeah.",
    "start": "976866",
    "end": "981966"
  },
  {
    "text": "That describes that. Okay. That leaves inside of, so the first thing that we need to knowledge is that in",
    "start": "981966",
    "end": "988133"
  },
  {
    "text": "order to able to message with an entity, you first need to know, uh,",
    "start": "988133",
    "end": "993465"
  },
  {
    "text": "which is the messaging contract. So you need to have the schema of the messages that that entity supports.",
    "start": "993733",
    "end": "999766"
  },
  {
    "text": "And why we need that we need that because the first step is indeed serialize",
    "start": "1002433",
    "end": "1008966"
  },
  {
    "text": "the message that the external client is trying to send in something that can go",
    "start": "1008966",
    "end": "1014433"
  },
  {
    "text": "over the wire and can be received by the user one eventually.",
    "start": "1014433",
    "end": "1019100"
  },
  {
    "text": "So first thing we need to serialize the message. Okay. And now we have something that can go over the wire.",
    "start": "1020166",
    "end": "1026299"
  },
  {
    "text": "So now the question becomes, uh, where you should go because as Mike pointed",
    "start": "1027133",
    "end": "1033133"
  },
  {
    "text": "out, we may have different pods and we need first to determine which is the pod",
    "start": "1033133",
    "end": "1039266"
  },
  {
    "text": "that is currently running the application behavior of the user number one.",
    "start": "1039266",
    "end": "1046000"
  },
  {
    "text": "Okay. It can be pod One or pod  B or pod whatever. So in order to do that, uh, the current,",
    "start": "1046000",
    "end": "1053133"
  },
  {
    "text": "implementation basically relies on having a local cache of the last",
    "start": "1053133",
    "end": "1060966"
  },
  {
    "text": "the last assignments of the shards in the system that happened. So basically it's client has a cache",
    "start": "1061699",
    "end": "1068833"
  },
  {
    "text": "where he knows it's shard ID in which pod is running. It may not be the actual body that is running that. But is at least a cash, something that",
    "start": "1068833",
    "end": "1079399"
  },
  {
    "text": "eventually maybe can be expired. Maybe the entity is not there. and then when it tries to",
    "start": "1079399",
    "end": "1085500"
  },
  {
    "text": "send the message and the text that the entity is not actually there, it will try to refresh, refresh that cache.",
    "start": "1085500",
    "end": "1090899"
  },
  {
    "text": "it's the shard address not the entity address. Not the entity address.",
    "start": "1092633",
    "end": "1098433"
  },
  {
    "text": "we should say: if address the wrong pod, and the pod",
    "start": "1099433",
    "end": "1105066"
  },
  {
    "text": "realizes that the entity is not present. The pod is going to",
    "start": "1105066",
    "end": "1110266"
  },
  {
    "text": "have a different cache. and it's gonna forward",
    "start": "1110266",
    "end": "1115333"
  },
  {
    "text": "the message to the correct endpoint. So it might take a few hops in a very",
    "start": "1115333",
    "end": "1123766"
  },
  {
    "text": "critical case, but at the end we figure the right pod",
    "start": "1123766",
    "end": "1130565"
  },
  {
    "text": "where the entity is hosted. Yeah, that could be one way of doing that.",
    "start": "1130733",
    "end": "1135699"
  },
  {
    "text": "The way of doing that right now, that shardkix takes, is basically saying the client,",
    "start": "1136133",
    "end": "1142466"
  },
  {
    "text": "\"Please ask the shard manager for the correct mapping.\" That's the way.",
    "start": "1143800",
    "end": "1148733"
  },
  {
    "text": "Instead of doing many hops, it's just how the client... But any external client does not have access to shard manager.",
    "start": "1149366",
    "end": "1155833"
  },
  {
    "text": "So for external client this is not possible. Yeah, exactly. That's one limitation indeed.",
    "start": "1156100",
    "end": "1160566"
  },
  {
    "text": "So that's something that maybe we can address and try to change. So that's the first thing that we need to",
    "start": "1161233",
    "end": "1167033"
  },
  {
    "text": "appoint that maybe it should be changed. And then now let's say that the cache is",
    "start": "1167033",
    "end": "1174766"
  },
  {
    "text": "correct and the shard ID results to a pod address.",
    "start": "1174766",
    "end": "1178799"
  },
  {
    "text": "And now the client will basically send that serialized message to",
    "start": "1179933",
    "end": "1185699"
  },
  {
    "text": "the pod, just the result. So let's say that you saw that the entity",
    "start": "1185699",
    "end": "1193466"
  },
  {
    "text": "user1 is leaving on pod A and then he sends the serialized message to the pod A.",
    "start": "1193466",
    "end": "1199632"
  },
  {
    "text": "Now we have the message received by the pod A, but then the pod",
    "start": "1201733",
    "end": "1210800"
  },
  {
    "text": "A, as we mentioned before, hosts many kind of different entities.",
    "start": "1210800",
    "end": "1215366"
  },
  {
    "text": "So we need to basically route the message from the incoming external interface of the pod A",
    "start": "1216399",
    "end": "1223233"
  },
  {
    "text": "to the actual entity that is processing the message. Because as we can see from here, pod A",
    "start": "1223233",
    "end": "1230500"
  },
  {
    "text": "has many thousands of entities. So the pod A here receives the message.",
    "start": "1230500",
    "end": "1239433"
  },
  {
    "text": "I'm going to make this bigger. Put the user down here maybe for a second.",
    "start": "1241399",
    "end": "1246500"
  },
  {
    "text": "So at the moment the pod has received the message, right? Exactly. The pod received the message.",
    "start": "1247699",
    "end": "1257333"
  },
  {
    "text": "And now you need to figure out based on the message which entities basically will",
    "start": "1258766",
    "end": "1264665"
  },
  {
    "text": "handle that message. And that can be user1 or todo 1 or",
    "start": "1264666",
    "end": "1274466"
  },
  {
    "text": "which entity is living right now into pod A.",
    "start": "1274466",
    "end": "1278100"
  },
  {
    "text": "And now that we have the message, the",
    "start": "1281733",
    "end": "1287066"
  },
  {
    "text": "message will basically go into the mailbox of the specified entity.",
    "start": "1287066",
    "end": "1293466"
  },
  {
    "text": "But before doing that, we need to ensure that the mailbox for",
    "start": "1294733",
    "end": "1301466"
  },
  {
    "text": "that entity is constructed because user number one may not be alive.",
    "start": "1301466",
    "end": "1306066"
  },
  {
    "text": "Is this the current flow? The user, the entities currently have a mailbox?",
    "start": "1308466",
    "end": "1312699"
  },
  {
    "text": "Right now it doesn't have a proper mailbox. It has that kind of offer function, but",
    "start": "1313899",
    "end": "1320766"
  },
  {
    "text": "the thing is mostly the same. Because the offer function that is constructed when the entity",
    "start": "1320766",
    "end": "1326233"
  },
  {
    "text": "is alive is kind of the same of the function of the mailbox to put in messages.",
    "start": "1326233",
    "end": "1330533"
  },
  {
    "text": "The thing may be mostly the same. It changes the shape of the data behind,",
    "start": "1331433",
    "end": "1336533"
  },
  {
    "text": "but the concept is the same. When you start up an entity, you get back a function that will be used to put in",
    "start": "1336833",
    "end": "1342566"
  },
  {
    "text": "messages into the queue. So the pod would resolve the entity",
    "start": "1342566",
    "end": "1347833"
  },
  {
    "text": "associated with the message. Yeah. And it would construct the",
    "start": "1347833",
    "end": "1355533"
  },
  {
    "text": "entity if it's not present, right? Exactly. And we'll construct the entity.",
    "start": "1355533",
    "end": "1360133"
  },
  {
    "text": "Yes.",
    "start": "1360966",
    "end": "1361266"
  },
  {
    "text": "And then I guess that we can just say place message.",
    "start": "1370800",
    "end": "1377466"
  },
  {
    "text": "I'm going to put mailbox in quotes because technically we don't actually have a mailbox yet.",
    "start": "1385199",
    "end": "1389666"
  },
  {
    "text": "In the current iteration of cluster, there's not really a",
    "start": "1392233",
    "end": "1397398"
  },
  {
    "text": "concept of a mailbox yet. This is something we're changing.",
    "start": "1397399",
    "end": "1400866"
  },
  {
    "text": "Yeah, instead we have just a function that when you construct the entity, you get back a function that you should",
    "start": "1402800",
    "end": "1410300"
  },
  {
    "text": "call when you want to basically give message to the entities.",
    "start": "1410300",
    "end": "1413933"
  },
  {
    "text": "Right. So this is kind of like the offer function. Exactly. And basically placing the message into",
    "start": "1415366",
    "end": "1424132"
  },
  {
    "text": "the entity's mailbox, in this case, will immediately cause the entity to start processing that message, right?",
    "start": "1424133",
    "end": "1429433"
  },
  {
    "text": "Because we're telling you... Not really. Not really.",
    "start": "1429666",
    "end": "1433899"
  },
  {
    "text": "It depends on right now, it depends on how it's implemented the behavior. Because calling that offer may just be",
    "start": "1435333",
    "end": "1442766"
  },
  {
    "text": "something like putting into a memory queue the message. And there is an active fiber that is",
    "start": "1442766",
    "end": "1450033"
  },
  {
    "text": "draining message into the queue. So the act of putting the message into the queue is not the same of processing it.",
    "start": "1450033",
    "end": "1455398"
  },
  {
    "text": "Maybe if you want to, you can process it. In the current implementation, you can also process it.",
    "start": "1456166",
    "end": "1462533"
  },
  {
    "text": "The moment you receive it, because in the current implementation, you are basically providing just that",
    "start": "1463566",
    "end": "1469033"
  },
  {
    "text": "offer function without a preferred mailbox. So in the current implementation, you can theoretically process the message",
    "start": "1469033",
    "end": "1476433"
  },
  {
    "text": "immediately without spinning up a queue or whatever. But while we are trying to migrate",
    "start": "1476433",
    "end": "1482166"
  },
  {
    "text": "towards, we'll have a mailbox. Right. Okay.",
    "start": "1482166",
    "end": "1487266"
  },
  {
    "text": "So in theory, that's like a user land detail. I mean, it will be a user land detail as",
    "start": "1488033",
    "end": "1493132"
  },
  {
    "text": "well, like how fast the messages get processed and the new implementation we're thinking about. But I think it's more easy to control.",
    "start": "1493133",
    "end": "1500199"
  },
  {
    "text": "Yeah, it's kind of more easy because you are basically enforcing to have some kind of mailbox,",
    "start": "1500633",
    "end": "1505466"
  },
  {
    "text": "which is a good thing. Yeah. Okay. So we put the message, we've offered the",
    "start": "1505899",
    "end": "1514333"
  },
  {
    "text": "message, maybe I'll just say that instead. Yeah. Offer the message to the entity.",
    "start": "1514333",
    "end": "1525000"
  },
  {
    "text": "And then at that point, the message becomes the responsibility of the entity. Yeah, exactly.",
    "start": "1525333",
    "end": "1529966"
  },
  {
    "text": "That offer function right now is also the",
    "start": "1530733",
    "end": "1536133"
  },
  {
    "text": "point of connection that is used from the external client",
    "start": "1536133",
    "end": "1541366"
  },
  {
    "text": "to get back the result of the message when it gets processed. Because that offer function has a",
    "start": "1541733",
    "end": "1549266"
  },
  {
    "text": "signature that takes in the message and returns back basically a union",
    "start": "1549266",
    "end": "1554398"
  },
  {
    "text": "that is basically either I just acknowledge that you gave me the message. So I say, okay, I've seen your message.",
    "start": "1554733",
    "end": "1561899"
  },
  {
    "text": "That's it. Or this is the result of processing that message.",
    "start": "1562733",
    "end": "1567866"
  },
  {
    "text": "And why we need that, we need that because when we send the message from an external client to an entity,",
    "start": "1569133",
    "end": "1575166"
  },
  {
    "text": "we can have two kinds of send, basically, we can send and don't care whenever the",
    "start": "1575166",
    "end": "1583566"
  },
  {
    "text": "message will be processed. Which I guess in traditional actor parlance would be like, if I",
    "start": "1583566",
    "end": "1591065"
  },
  {
    "text": "don't care, it's a fire and forget. I just want to tell the message and I don't care about the result.",
    "start": "1591066",
    "end": "1596533"
  },
  {
    "text": "Or if you care about the result, that's an ask. And you are basically what will happen",
    "start": "1597266",
    "end": "1604033"
  },
  {
    "text": "behind the scene is that the first offer would maybe responds with just",
    "start": "1604033",
    "end": "1609699"
  },
  {
    "text": "acknowledged and then the client gets back that knowledge and the client will say, okay, I will try again because I",
    "start": "1609733",
    "end": "1616233"
  },
  {
    "text": "want to get back the results. So the client will try again and again and again to call that offer function",
    "start": "1616233",
    "end": "1623132"
  },
  {
    "text": "until it gets back a message state of process.",
    "start": "1623133",
    "end": "1625966"
  },
  {
    "text": "So the entities behavior process the message and return the either on",
    "start": "1628733",
    "end": "1640933"
  },
  {
    "text": "acknowledgment or the result of.",
    "start": "1640933",
    "end": "1645699"
  },
  {
    "text": "Now, in the current implementation, if I understand correctly, when the behavior",
    "start": "1649966",
    "end": "1656266"
  },
  {
    "text": "is triggered and the result is the message is done being processed,",
    "start": "1656266",
    "end": "1661699"
  },
  {
    "text": "the client, like let's assume the client did a.",
    "start": "1662733",
    "end": "1667566"
  },
  {
    "text": "Like the equivalent of a not fire and forget, an ask, right?",
    "start": "1671066",
    "end": "1675533"
  },
  {
    "text": "The client, if an acknowledgement is returned, but a result is not the client",
    "start": "1680733",
    "end": "1685898"
  },
  {
    "text": "actually has to do the retrying in that case in the current implementation. Yeah. And I guess we're trying to change that a",
    "start": "1685899",
    "end": "1693233"
  },
  {
    "text": "little bit with the new implementation, right?  I'm not sure if we are actually",
    "start": "1693233",
    "end": "1700633"
  },
  {
    "text": "changing them because well, we should because this is completely inefficient.",
    "start": "1700633",
    "end": "1706500"
  },
  {
    "text": "Yeah, it's it's inefficient. But what we are trying basically trying",
    "start": "1706800",
    "end": "1712132"
  },
  {
    "text": "to implement is something that basically if the client asks, the most efficient",
    "start": "1712133",
    "end": "1720100"
  },
  {
    "text": "way would be to let the client request to",
    "start": "1720100",
    "end": "1725433"
  },
  {
    "text": "hang until it gets processed. Right. That would be the most.",
    "start": "1725433",
    "end": "1730333"
  },
  {
    "text": "You can return partial responses. You can return an up straight away and",
    "start": "1730733",
    "end": "1736533"
  },
  {
    "text": "then return something else later. Yeah, exactly. The issue would be if if the message",
    "start": "1736533",
    "end": "1745033"
  },
  {
    "text": "takes longer than what the HTTP channel could handle.",
    "start": "1745033",
    "end": "1750699"
  },
  {
    "text": "Could handle. But on the other side, if we are saying that all the messages are persisted, then",
    "start": "1751733",
    "end": "1758699"
  },
  {
    "text": "the communication channel is actually the database. So we just we would just kind of listen",
    "start": "1758699",
    "end": "1766666"
  },
  {
    "text": "to the database changes. And that that is basically the same as saying instead of retrying",
    "start": "1766666",
    "end": "1774800"
  },
  {
    "text": "sending in the transport layer. It's basically something like I find the",
    "start": "1774800",
    "end": "1782033"
  },
  {
    "text": "request the first time and I get back something like I need a retry data or HTTP response.",
    "start": "1782033",
    "end": "1787766"
  },
  {
    "text": "And then instead of actually retrying on a fixed schedule, I listen for database changes.",
    "start": "1788833",
    "end": "1794466"
  },
  {
    "text": "And I retry when I when I see the database changes.",
    "start": "1795166",
    "end": "1799800"
  },
  {
    "text": "That could be another way of doing that, acknowledging basically the same result. We are basically using the database as a",
    "start": "1800366",
    "end": "1809366"
  },
  {
    "text": "shared channel between all the cluster to notify you.",
    "start": "1809366",
    "end": "1814933"
  },
  {
    "text": "Yeah. And to be clear, you can even have a message. You could even have a message broker in between.",
    "start": "1815166",
    "end": "1820266"
  },
  {
    "text": "You could implement everything on top of Kafka or whatever that notifies you.",
    "start": "1820533",
    "end": "1825600"
  },
  {
    "text": "Whatever else doesn't really matter. Yeah. Yeah. That's something that in my opinion is more on the transport layer than in",
    "start": "1825600",
    "end": "1832466"
  },
  {
    "text": "the actual assumption we should make. We could say that it's up to the",
    "start": "1832466",
    "end": "1838199"
  },
  {
    "text": "transport layer to retry the sending. And that could be the dumbest one, like",
    "start": "1838199",
    "end": "1844466"
  },
  {
    "text": "the one we have currently of retrying on an exponential schedule, for example, or some smarter one like the one we",
    "start": "1844466",
    "end": "1851333"
  },
  {
    "text": "described using a database for as a trigger for retrying.",
    "start": "1851333",
    "end": "1855766"
  },
  {
    "text": "Oh, I agree that in that case, the client should figure out how it wants to wait",
    "start": "1856733",
    "end": "1862533"
  },
  {
    "text": "for a message to be processed. Like the the transport. In the end, the client will just pull the",
    "start": "1862533",
    "end": "1869733"
  },
  {
    "text": "send and get state implementation of the transport service. And then the transport service in that",
    "start": "1869733",
    "end": "1876300"
  },
  {
    "text": "implementation could do whatever. It could retry, could wait, listen for",
    "start": "1876300",
    "end": "1882133"
  },
  {
    "text": "database changes or whatever. You could also have something like sending messages over HTTP, but having a",
    "start": "1882133",
    "end": "1891733"
  },
  {
    "text": "trigger for notification on a completely different system, for example, whatever madness you want.",
    "start": "1891733",
    "end": "1899299"
  },
  {
    "text": "If we leave that responsibility to the basically the transport contact service.",
    "start": "1899733",
    "end": "1905232"
  },
  {
    "text": "Makes sense. So we are basically operating on the assumption that if the contact service",
    "start": "1907733",
    "end": "1917399"
  },
  {
    "text": "sending at state knows what states he",
    "start": "1917399",
    "end": "1922433"
  },
  {
    "text": "wants to return into. So it's fine. It's basically a union saying I am fine",
    "start": "1922433",
    "end": "1928866"
  },
  {
    "text": "returning in that knowledge. I'm fine returning in processed. I'm fine returning. And basically then the transport layer",
    "start": "1928866",
    "end": "1935833"
  },
  {
    "text": "will retry until the response gets in that state.",
    "start": "1935833",
    "end": "1940398"
  },
  {
    "text": "Yeah, I think that makes sense. Maybe we can talk about a little bit",
    "start": "1942866",
    "end": "1948199"
  },
  {
    "text": "about what we don't like about the current implementation and then we can start maybe hashing through some of the",
    "start": "1948199",
    "end": "1953899"
  },
  {
    "text": "things we've been chatting about for the updated implementation, like things that we've been thinking about. So in this current implementation, we're",
    "start": "1953899",
    "end": "1966399"
  },
  {
    "text": "very limited in the on the behavior side,",
    "start": "1966399",
    "end": "1970800"
  },
  {
    "text": "some to some degree on a number of different things. For example, the way that the behavior is",
    "start": "1971666",
    "end": "1977633"
  },
  {
    "text": "interface is currently implemented, except unless you implement the unless you use the in memory",
    "start": "1977633",
    "end": "1983966"
  },
  {
    "text": "queue version of a behavior. If you use like just the standard behaviors that cluster exposes without",
    "start": "1983966",
    "end": "1991366"
  },
  {
    "text": "the intermediary queue in between, there's really no way for a behavior to essentially spin up a long running fiber",
    "start": "1991366",
    "end": "2000633"
  },
  {
    "text": "that's just processing messages. Right. It's kind of it can, to be honest,",
    "start": "2000633",
    "end": "2007533"
  },
  {
    "text": "because the signature is a function that returns a function that takes the message",
    "start": "2007933",
    "end": "2013666"
  },
  {
    "text": "and process it. So the outer function is the life lifespan",
    "start": "2013666",
    "end": "2019033"
  },
  {
    "text": "basically of of the entity. So you can have one is currently what the",
    "start": "2019033",
    "end": "2024500"
  },
  {
    "text": "what what the user specifies is sort of a recipient behavior",
    "start": "2024500",
    "end": "2030232"
  },
  {
    "text": "instead of the process. Exactly. What what we're thinking of is to",
    "start": "2030233",
    "end": "2038066"
  },
  {
    "text": "separate the mailbox, which would be the default recipient behavior and have that",
    "start": "2038066",
    "end": "2045133"
  },
  {
    "text": "for for every entity effectively transforming a generic entity into an",
    "start": "2045133",
    "end": "2051465"
  },
  {
    "text": "actor because actors have mailboxes and their processes that",
    "start": "2051466",
    "end": "2057132"
  },
  {
    "text": "pull from from mailboxes. So basically, we are sort of making it a",
    "start": "2057133",
    "end": "2063265"
  },
  {
    "text": "default simplifying a little bit what the what the entity behavior is about, which",
    "start": "2063266",
    "end": "2070133"
  },
  {
    "text": "which means that an entity behavior always has a mailbox to pull and it pulls",
    "start": "2070133",
    "end": "2077166"
  },
  {
    "text": "messages from the mailbox. And we have a little bit more having a",
    "start": "2077166",
    "end": "2082533"
  },
  {
    "text": "standard we have a little bit more information on what what happens inside,",
    "start": "2082533",
    "end": "2087932"
  },
  {
    "text": "for example, splitting messages. Yes, we have concerns. Splitting concerns in order to have a",
    "start": "2087933",
    "end": "2095866"
  },
  {
    "text": "more default behavior that the implementation we have right now is something very low level that in order to",
    "start": "2095866",
    "end": "2102233"
  },
  {
    "text": "do those kind of behaviors, you need to compose all of those things into only a",
    "start": "2102233",
    "end": "2107666"
  },
  {
    "text": "single process function, basically. But what we are trying to achieve is something like splitting that in different concepts. So the user maybe",
    "start": "2107666",
    "end": "2114333"
  },
  {
    "text": "don't care about one of those concepts, like the recipient behavior and the user only cares about how",
    "start": "2114333",
    "end": "2119733"
  },
  {
    "text": "the message is processed. So it becomes much easier in the",
    "start": "2119733",
    "end": "2126300"
  },
  {
    "text": "implementation that we've been discussing to do things like allowing concurrent",
    "start": "2126300",
    "end": "2131465"
  },
  {
    "text": "processing of messages, like without having to have an intermediary queue in",
    "start": "2131466",
    "end": "2136500"
  },
  {
    "text": "between if the because the the. The design that we're kind of thinking",
    "start": "2136500",
    "end": "2141765"
  },
  {
    "text": "about is that the user defined behavior for an entity would essentially receive a",
    "start": "2141766",
    "end": "2147199"
  },
  {
    "text": "read only side of the mailbox where the behavior can pull as many messages as it",
    "start": "2147199",
    "end": "2153133"
  },
  {
    "text": "can like theoretically handle and the kind of similar to",
    "start": "2153133",
    "end": "2159433"
  },
  {
    "text": "like a request resolver. For those of you who might be familiar with request resolvers in effect, the",
    "start": "2159433",
    "end": "2165533"
  },
  {
    "text": "behavior would get access to some functions either from something that we pass in or from the context of that",
    "start": "2165533",
    "end": "2173366"
  },
  {
    "text": "behavior where the messages could be marked as acknowledged or completed. And in doing that, we can enable the",
    "start": "2173366",
    "end": "2181699"
  },
  {
    "text": "functionality of at most once for message processing or at least once message processing reasonably.",
    "start": "2181699",
    "end": "2188699"
  },
  {
    "text": "I wouldn't say easily, but like the user can basically by changing where messages",
    "start": "2189899",
    "end": "2195333"
  },
  {
    "text": "are acknowledged or completed within the behavior can essentially have full control over that kind of like behavior",
    "start": "2195333",
    "end": "2203133"
  },
  {
    "text": "for message processing. If you acknowledge the message at the beginning, process the message later, or",
    "start": "2203133",
    "end": "2208233"
  },
  {
    "text": "if you acknowledge the message at the end of processing and then complete it.",
    "start": "2208233",
    "end": "2211533"
  },
  {
    "text": "Like those are the kinds of things we're thinking about. And by adding the mailbox back to an",
    "start": "2213333",
    "end": "2219099"
  },
  {
    "text": "entity, we can kind of like separate those things and enable that kind of functionality. I think Mike, you were also kind of",
    "start": "2219100",
    "end": "2225866"
  },
  {
    "text": "thinking about the sort of like a type of",
    "start": "2225866",
    "end": "2233866"
  },
  {
    "text": "behavior, a cron-esque behavior. And maybe you want to talk a little bit about that kind of thing that you were",
    "start": "2233866",
    "end": "2239533"
  },
  {
    "text": "thinking about because it was really interesting. And by switching to this kind of a design, we'd be able to",
    "start": "2239533",
    "end": "2245300"
  },
  {
    "text": "enable things like that. Yeah, I was kind of trying to stretch the boundaries of what's possible.",
    "start": "2245300",
    "end": "2252866"
  },
  {
    "text": "I've been dealing with those sorts of systems for most of my professional",
    "start": "2253133",
    "end": "2258766"
  },
  {
    "text": "career, having started with ACCA Clustering and so on and so forth.",
    "start": "2258766",
    "end": "2264100"
  },
  {
    "text": "And one tedious thing to implement was always this dynamic cron thing.",
    "start": "2264733",
    "end": "2271433"
  },
  {
    "text": "Let's say that, for example, we have a process that is dependent on some users.",
    "start": "2271866",
    "end": "2280133"
  },
  {
    "text": "And for example, a user says, send me an email tomorrow at midnight or send me an",
    "start": "2281266",
    "end": "2288466"
  },
  {
    "text": "email in a year time. What happens?",
    "start": "2288466",
    "end": "2292533"
  },
  {
    "text": "I send a message to an actor, and actor spins up and processes the message.",
    "start": "2293733",
    "end": "2299933"
  },
  {
    "text": "But then the default behavior of an actor is to passivate when the message is processed or received.",
    "start": "2300733",
    "end": "2307233"
  },
  {
    "text": "So if I process the message, the actor goes down. If I don't process the",
    "start": "2308100",
    "end": "2313566"
  },
  {
    "text": "message, the actor times out. How do I actually ensure that these actor",
    "start": "2313566",
    "end": "2321800"
  },
  {
    "text": "keeps running for the time needed to",
    "start": "2321800",
    "end": "2327866"
  },
  {
    "text": "actually end up sending the message? So my thinking was, OK, if we have a",
    "start": "2327866",
    "end": "2332933"
  },
  {
    "text": "mailbox and we send a message like start",
    "start": "2332933",
    "end": "2338733"
  },
  {
    "text": "cron, we can acknowledge that the message has been--",
    "start": "2338733",
    "end": "2343333"
  },
  {
    "text": "well, not even acknowledge, we can just park the message, have it in the mailbox,",
    "start": "2344733",
    "end": "2351033"
  },
  {
    "text": "and decide that the actor is alive for as",
    "start": "2352100",
    "end": "2357433"
  },
  {
    "text": "long as there are non-processed messages in its queue.",
    "start": "2357433",
    "end": "2361533"
  },
  {
    "text": "So let's say that I send a message, the actor receives the message, the cron is started,",
    "start": "2362866",
    "end": "2368866"
  },
  {
    "text": "and the message will only be resolved when the cron is triggered.",
    "start": "2369833",
    "end": "2375100"
  },
  {
    "text": "So when the actor finished its job, then",
    "start": "2375800",
    "end": "2382033"
  },
  {
    "text": "let's say that the actor goes down because I set a cron in a year time,",
    "start": "2382033",
    "end": "2387133"
  },
  {
    "text": "and even if 10 years ago we could have servers that were running for longer than a year,",
    "start": "2387133",
    "end": "2393199"
  },
  {
    "text": "in the new world with container environments, constant updates of software, and so on and so forth, we're pretty sure that there's no process",
    "start": "2393733",
    "end": "2400466"
  },
  {
    "text": "running for longer than a few days. So the entity goes down for any reason.",
    "start": "2400466",
    "end": "2407533"
  },
  {
    "text": "In this world, it comes back up. The pod checks. OK, I have in my allocated shards, there",
    "start": "2407533",
    "end": "2416133"
  },
  {
    "text": "are some non-processed messages. So let me start up the actors again,",
    "start": "2416133",
    "end": "2423432"
  },
  {
    "text": "which means the actor starts up, they pull the non-processed messages, and they will see, oh,",
    "start": "2423933",
    "end": "2429333"
  },
  {
    "text": "I have to start a cron. So I'm basically re-getting to the same",
    "start": "2429333",
    "end": "2435366"
  },
  {
    "text": "state as I was before. This is possible because basically I'm",
    "start": "2435366",
    "end": "2441166"
  },
  {
    "text": "separating the sending the message from the actual processing of the message,",
    "start": "2441166",
    "end": "2446699"
  },
  {
    "text": "and from the process of acknowledging the message. So the sender only cares that the message",
    "start": "2446733",
    "end": "2453733"
  },
  {
    "text": "has been received, which means it's been placed in the actor's mailbox.",
    "start": "2453733",
    "end": "2458632"
  },
  {
    "text": "It means it reached the destination from where the actor is going to be able to ingest it.",
    "start": "2459500",
    "end": "2466433"
  },
  {
    "text": "So the sender doesn't--it's a fire and forget on the purpose of the sender, or rather it's a fire and forget where",
    "start": "2467166",
    "end": "2473566"
  },
  {
    "text": "then the sender can pull for the status.",
    "start": "2473566",
    "end": "2477866"
  },
  {
    "text": "But then the sender sort of goes down, goes away, and the actor has these",
    "start": "2478899",
    "end": "2484633"
  },
  {
    "text": "non-processed messages, which are kept alive up until the point",
    "start": "2484633",
    "end": "2490433"
  },
  {
    "text": "where they actually are processed. Now, the non-intuitive element here is",
    "start": "2490433",
    "end": "2497100"
  },
  {
    "text": "that this sort of requires assumptions on the transport layer,",
    "start": "2497100",
    "end": "2503466"
  },
  {
    "text": "or rather on the mailbox, because one important element is that actors always",
    "start": "2503466",
    "end": "2511366"
  },
  {
    "text": "see messages in the same order. Because if I start up and see messages in",
    "start": "2511366",
    "end": "2517166"
  },
  {
    "text": "the opposite order, bad things can happen. And the order is very important.",
    "start": "2517166",
    "end": "2524765"
  },
  {
    "text": "If the message behavior is deterministic, the order of the message coming in should be deterministic as well.",
    "start": "2524866",
    "end": "2529866"
  },
  {
    "text": "Yes, that's the point. Otherwise, we introduce a non-deterministic thing in the very entry point of the actor,",
    "start": "2530533",
    "end": "2537466"
  },
  {
    "text": "which makes all the determinism go away. So we need that determinism on the order,",
    "start": "2537733",
    "end": "2545733"
  },
  {
    "text": "and to do so, we need some sort of persistent layer,",
    "start": "2546666",
    "end": "2551866"
  },
  {
    "text": "where messages are stored in a specific order.",
    "start": "2552233",
    "end": "2558432"
  },
  {
    "text": "And my intuition was that the easiest way",
    "start": "2559733",
    "end": "2567233"
  },
  {
    "text": "is to sort of have a sequence number, which is incremented for every message,",
    "start": "2567233",
    "end": "2573533"
  },
  {
    "text": "and a processed flag. So when an actor processes a message,",
    "start": "2573966",
    "end": "2580033"
  },
  {
    "text": "sets the process to true. And then we can have a query that is",
    "start": "2580966",
    "end": "2586765"
  },
  {
    "text": "like, give me all the non-processed messages ordered by the sequence number.",
    "start": "2586766",
    "end": "2593333"
  },
  {
    "text": "So I always get all the message in the same order, even though they may have gaps.",
    "start": "2593633",
    "end": "2598766"
  },
  {
    "text": "Because let's say that first I send a start cron, then I send a completely different message.",
    "start": "2599366",
    "end": "2604933"
  },
  {
    "text": "The second gets processed, the cron only gets processed when the cron triggers. I will see in the second query only the",
    "start": "2605733",
    "end": "2616266"
  },
  {
    "text": "start of the cron and the message number three. I won't see again the message number two",
    "start": "2616266",
    "end": "2623566"
  },
  {
    "text": "as it has been already processed. But the non-processed messages are",
    "start": "2623566",
    "end": "2630233"
  },
  {
    "text": "received in the same order. These might be slightly confusing,",
    "start": "2630233",
    "end": "2635899"
  },
  {
    "text": "because I have a lot of context in my mind. Let's keep sketching it out. I was trying to sketch it out as you were talking.",
    "start": "2636766",
    "end": "2642666"
  },
  {
    "text": "But basically using your example of sending an email in one year,",
    "start": "2644633",
    "end": "2651300"
  },
  {
    "text": "this is the message that we're sending to our user one.",
    "start": "2651300",
    "end": "2656033"
  },
  {
    "text": "I don't know, we can call this maybe like email one. We have an email entity",
    "start": "2656533",
    "end": "2661566"
  },
  {
    "text": "here that sends emails maybe. So we're sending a message. This email",
    "start": "2661566",
    "end": "2667233"
  },
  {
    "text": "entity can handle a message that says to send an email after a",
    "start": "2667233",
    "end": "2673233"
  },
  {
    "text": "particular period of time has elapsed. We're sending this email or this message and eventually",
    "start": "2673233",
    "end": "2679699"
  },
  {
    "text": "it makes it to the entity. I'm kind of removing some layers here,",
    "start": "2679699",
    "end": "2684699"
  },
  {
    "text": "the whole getting to the pod and everything. But the message makes it to the entity. So in Mike's model, the",
    "start": "2684966",
    "end": "2692633"
  },
  {
    "text": "client over here really only cares that the message was received by the entity.",
    "start": "2692633",
    "end": "2697399"
  },
  {
    "text": "Because the client doesn't need to do anything else with that message once the entity is actually-- That's not a way for a year.",
    "start": "2697733",
    "end": "2703566"
  },
  {
    "text": "Maybe I can pull with an explanation of the call for an year and ask.",
    "start": "2706166",
    "end": "2710033"
  },
  {
    "text": "So we do get a response in this case.",
    "start": "2711733",
    "end": "2716132"
  },
  {
    "text": "There is a response sent back to the client. And the response just says received.",
    "start": "2716833",
    "end": "2721932"
  },
  {
    "text": "I don't know how to increase layers in TLDraw. It doesn't matter.",
    "start": "2723733",
    "end": "2727765"
  },
  {
    "text": "The response just says received. So here, received.",
    "start": "2729133",
    "end": "2733033"
  },
  {
    "text": "Just say yes, Mom. I received the message. Oh, a range.",
    "start": "2734366",
    "end": "2739465"
  },
  {
    "text": "Oh. Okay. Well, I tried.",
    "start": "2741033",
    "end": "2745265"
  },
  {
    "text": "So bring to front.",
    "start": "2748066",
    "end": "2752733"
  },
  {
    "text": "Maybe I can send this thing backward. Okay. It doesn't matter.",
    "start": "2756766",
    "end": "2760866"
  },
  {
    "text": "The message was received by the client. The message was put into the mailbox.",
    "start": "2762333",
    "end": "2766965"
  },
  {
    "text": "And in Mike's model, if I'm understanding correctly, stop me at any time, Mike. The message then gets",
    "start": "2768033",
    "end": "2773833"
  },
  {
    "text": "sent to the mailbox. Storage? I think that what Mike is saying is that",
    "start": "2773833",
    "end": "2780366"
  },
  {
    "text": "upon receiving the message in the mailbox, the mailbox asks immediately the storage",
    "start": "2780366",
    "end": "2785866"
  },
  {
    "text": "to persist the message. The mailbox is the storage. The mailbox, because in this shard, that",
    "start": "2785866",
    "end": "2793033"
  },
  {
    "text": "Max draw, the storage and the mailbox are two different entities. But yeah, they are basically the same.",
    "start": "2793033",
    "end": "2799133"
  },
  {
    "text": "I'm just basically designing like there's an external and there's something external.",
    "start": "2799733",
    "end": "2805033"
  },
  {
    "text": "Let's say that there is a database. Let's say the apostrophe table. Okay.",
    "start": "2805333",
    "end": "2810300"
  },
  {
    "text": "So basically what we are saying is that when the mailbox receives the message, the thing that we'll do is try to perform",
    "start": "2811566",
    "end": "2818932"
  },
  {
    "text": "an insert into the database, get back the assigned maybe auto increment ID or whatever",
    "start": "2818933",
    "end": "2824966"
  },
  {
    "text": "that is in the database table. That is a progress sequence number inside that table.",
    "start": "2824966",
    "end": "2830500"
  },
  {
    "text": "And only once the mailbox receives back",
    "start": "2831533",
    "end": "2836633"
  },
  {
    "text": "from the table that sequence will tell back to the entity,",
    "start": "2836633",
    "end": "2841833"
  },
  {
    "text": "\"Okay, I received the message.\" Because the mailbox wants to ensure first that it actually persisted the message.",
    "start": "2842133",
    "end": "2849766"
  },
  {
    "text": "Okay. So if for some reason the database is not",
    "start": "2850633",
    "end": "2855933"
  },
  {
    "text": "responding or whatever, what will happen is that after maybe some kind of timeout, the mailbox will say,",
    "start": "2855933",
    "end": "2863233"
  },
  {
    "text": "\"Okay, I failed storing the message.\" And the client will say, \"No problem. I'll try again.\"",
    "start": "2863233",
    "end": "2868366"
  },
  {
    "text": "And there we will have some kind of retry logic. But that's only for cases where for some",
    "start": "2869166",
    "end": "2878033"
  },
  {
    "text": "reason the storage isn't able to persist messages.",
    "start": "2878033",
    "end": "2883066"
  },
  {
    "text": "It's something that we can maybe decide that is an effect. That's something that shouldn't happen.",
    "start": "2883800",
    "end": "2888866"
  },
  {
    "text": "So messages get a sequence number essentially.",
    "start": "2891033",
    "end": "2894833"
  },
  {
    "text": "By the way, it cannot be an auto increment. Yeah, I was saying auto increment because it's the simplest thing",
    "start": "2896066",
    "end": "2902533"
  },
  {
    "text": "to understand for anyone. Yeah, what they choose, auto increments",
    "start": "2902533",
    "end": "2907600"
  },
  {
    "text": "are vulnerable to transactionalities. So you can have the weakness.",
    "start": "2907600",
    "end": "2912833"
  },
  {
    "text": "So we got messages in the database. Some of the things that they're going to have are a sequence number. They're going to have a processed maybe",
    "start": "2914300",
    "end": "2922366"
  },
  {
    "text": "field or something like that, or maybe a state. It doesn't matter. But some notion of like, was this thing actually processed?",
    "start": "2922366",
    "end": "2928566"
  },
  {
    "text": "Maybe before then processed. Yeah, let's say, sorry, let's just start with processed for now.",
    "start": "2929100",
    "end": "2935133"
  },
  {
    "text": "Yeah, I'm not going to enumerate all the fields that might be in this message table, but just kind of like getting an idea.",
    "start": "2935766",
    "end": "2943000"
  },
  {
    "text": "So it's acknowledged. Yeah, it's okay. Yeah, so acknowledged.",
    "start": "2943433",
    "end": "2949666"
  },
  {
    "text": "Like the response, if it's there. Yeah.",
    "start": "2955300",
    "end": "2959833"
  },
  {
    "text": "Sure. Okay.",
    "start": "2963100",
    "end": "2967733"
  },
  {
    "text": "So now let's like keep operating under the assumption that the client sent this message,",
    "start": "2969166",
    "end": "2975000"
  },
  {
    "text": "this email, send an email in your message. We've successfully inserted it into our mailbox persistence,",
    "start": "2975466",
    "end": "2980566"
  },
  {
    "text": "which is in this case is some database running somewhere. And we've communicated back to the client.",
    "start": "2980566",
    "end": "2985899"
  },
  {
    "text": "Okay, we received your message. Blah, blah, blah, blah. Now what?",
    "start": "2985899",
    "end": "2990465"
  },
  {
    "text": "Now what happens is that now we have communicated basically that we have",
    "start": "2992033",
    "end": "2997800"
  },
  {
    "text": "received the message and persisted it to the client. Okay. So now based on what the client wants to",
    "start": "2997800",
    "end": "3004066"
  },
  {
    "text": "do, we basically have different routes. Okay. If the client just wants to tell, it",
    "start": "3004066",
    "end": "3011765"
  },
  {
    "text": "doesn't care about the result for the client, that's it. Okay. In this process, the client is done.",
    "start": "3011766",
    "end": "3017433"
  },
  {
    "text": "Okay. In this process, the client is done. Okay. Nothing else. Now the thing is that now we actually",
    "start": "3017666",
    "end": "3024133"
  },
  {
    "text": "have to consume that message that we have put into the mailbox. Okay.",
    "start": "3024133",
    "end": "3028432"
  },
  {
    "text": "So when we created the entity, okay, this",
    "start": "3029733",
    "end": "3035066"
  },
  {
    "text": "email one entity, okay, we, together with creating a mailbox, okay,",
    "start": "3035066",
    "end": "3041133"
  },
  {
    "text": "we also spawn up basically a fiber, a process, okay, that consumes messages",
    "start": "3041533",
    "end": "3047066"
  },
  {
    "text": "from the queue, the mailbox. Okay. Okay. So after we have inserted the message",
    "start": "3047066",
    "end": "3054166"
  },
  {
    "text": "into the mailbox, what will happen is basically that on maybe a separate fiber, that",
    "start": "3054166",
    "end": "3060466"
  },
  {
    "text": "message will be taken. Okay. And by taking this, this is the actual",
    "start": "3060466",
    "end": "3065633"
  },
  {
    "text": "behavior of the entity we're talking about now, right? This is the user user implemented behavior.",
    "start": "3065633",
    "end": "3070166"
  },
  {
    "text": "Yeah. So we are, we are, we are basically speaking on how the user implemented",
    "start": "3070766",
    "end": "3075833"
  },
  {
    "text": "behavior will take the message from the mailbox. So this is the part that is concerned by",
    "start": "3075833",
    "end": "3082500"
  },
  {
    "text": "the user is written by the user.",
    "start": "3082500",
    "end": "3083733"
  },
  {
    "text": "I'll use the European behavior. Okay.",
    "start": "3090899",
    "end": "3095066"
  },
  {
    "text": "Okay. And now basically what we will do is we'll take messages from the mailbox.",
    "start": "3097866",
    "end": "3103733"
  },
  {
    "text": "And when it takes messages from the mailbox, in some way,",
    "start": "3108233",
    "end": "3115699"
  },
  {
    "text": "the way we were thinking altogether is just by using the sequence",
    "start": "3116733",
    "end": "3122000"
  },
  {
    "text": "number we mentioned before, in some way, once a message is taken, that's it.",
    "start": "3122000",
    "end": "3126833"
  },
  {
    "text": "It will really not be offered again into the mailbox. Okay. For this process, for",
    "start": "3127033",
    "end": "3132833"
  },
  {
    "text": "this fiber being alive. Okay. So once you take it for this process, that is you have taken,",
    "start": "3132833",
    "end": "3138833"
  },
  {
    "text": "okay, you've taken the message. And in that way, this process can",
    "start": "3139266",
    "end": "3147033"
  },
  {
    "text": "basically continue to take from the mailbox and just receive new message as they arrive in.",
    "start": "3147033",
    "end": "3153033"
  },
  {
    "text": "But what we will do, yeah. So in Mike's model, right, so this, this",
    "start": "3153633",
    "end": "3159433"
  },
  {
    "text": "user implemented behavior, let's say, this thing is going to be a,",
    "start": "3159433",
    "end": "3164233"
  },
  {
    "text": "this, in this case, like it could be anything, right? But in this case, we have a long running fiber that is continuously pulling",
    "start": "3165866",
    "end": "3175166"
  },
  {
    "text": "messages, right, from the mailbox. Yeah.",
    "start": "3175166",
    "end": "3179233"
  },
  {
    "text": "Let's say that eventually we arrive at the, you know, send the email in a year message, right?",
    "start": "3180966",
    "end": "3186666"
  },
  {
    "text": "But it's not been one year yet. Okay. In Mike's model, what happens here?",
    "start": "3189199",
    "end": "3194699"
  },
  {
    "text": "I think that in Mike's model, what happens here is that you just take the",
    "start": "3194733",
    "end": "3200066"
  },
  {
    "text": "message and you don't do anything. Or maybe you start the timer.",
    "start": "3200066",
    "end": "3205432"
  },
  {
    "text": "You take the message and you start the same time out. Yeah, exactly. You don't, you don't do anything.",
    "start": "3205433",
    "end": "3210733"
  },
  {
    "text": "Well, actually, you check current time. Yeah, exactly. And you start the time out. Yeah.",
    "start": "3211033",
    "end": "3216100"
  },
  {
    "text": "You need to check current time because it is possible that failure has occurred. So if now is already later than the",
    "start": "3216100",
    "end": "3225833"
  },
  {
    "text": "expected time, it means the timer should have fired.",
    "start": "3225833",
    "end": "3229132"
  },
  {
    "text": "Basically, you do the time difference. If it's negative, you start the time immediately. If it's positive, you wait for that amount of time.",
    "start": "3231100",
    "end": "3237133"
  },
  {
    "text": "And so this is like a user land thing. Exactly. Right. Okay.",
    "start": "3238100",
    "end": "3242966"
  },
  {
    "text": "But there's nothing custom. Yeah, that's the point. The protocol allows for this type of stuff.",
    "start": "3243266",
    "end": "3250066"
  },
  {
    "text": "The thing is that the user just takes the message and starts the timer. But the user doesn't acknowledge the",
    "start": "3250066",
    "end": "3259166"
  },
  {
    "text": "message until the timer is expired. If I understood correctly. When we send the email,",
    "start": "3259166",
    "end": "3266132"
  },
  {
    "text": "we acknowledge the message. You told me to send an email in a year. When I send the email, I'm",
    "start": "3266633",
    "end": "3272199"
  },
  {
    "text": "responding with email sent. Yeah, exactly. Or with email address did not exist.",
    "start": "3272199",
    "end": "3279433"
  },
  {
    "text": "The word has exploded three times. I have a failure.",
    "start": "3280199",
    "end": "3283265"
  },
  {
    "text": "And in a way, okay, so I think that I'm tracking pretty well.",
    "start": "3286566",
    "end": "3290466"
  },
  {
    "text": "In when the email is actually sent, right? So let's just quickly put that in here.",
    "start": "3291600",
    "end": "3299100"
  },
  {
    "text": "We have basically two cases. Maybe it's too early and we just start the timer. Or the timer basically is",
    "start": "3299766",
    "end": "3307666"
  },
  {
    "text": "expired or is just expired. And in that case, what we do is perform the work of sending an email and",
    "start": "3307666",
    "end": "3315066"
  },
  {
    "text": "acknowledge the message. Right. So here, you know, a timer is started",
    "start": "3315066",
    "end": "3322066"
  },
  {
    "text": "based on current time. Right. Where timer started and",
    "start": "3322066",
    "end": "3327333"
  },
  {
    "text": "we look at current time. Sometime later, we arrive back at our, we",
    "start": "3327333",
    "end": "3335833"
  },
  {
    "text": "arrive at our timeout. Yeah, it's the 29th of July of 2026.",
    "start": "3335833",
    "end": "3341433"
  },
  {
    "text": "Right. So now the message",
    "start": "3342500",
    "end": "3353333"
  },
  {
    "text": "is completed one year later. Yep.",
    "start": "3353333",
    "end": "3358465"
  },
  {
    "text": "Right. So in this case, when the message is actually completed, the, in my mind,",
    "start": "3362733",
    "end": "3372866"
  },
  {
    "text": "this is either going to be something that's like the user actually has to call. Right. So the user has to indicate, hey, this",
    "start": "3373500",
    "end": "3380799"
  },
  {
    "text": "message is now completed to the system. Right. If the user never completes the message,",
    "start": "3380800",
    "end": "3385666"
  },
  {
    "text": "the system can never know the message was actually finished. So you could imagine something similar to like a request resolver where you",
    "start": "3386266",
    "end": "3392600"
  },
  {
    "text": "call like request dot complete. You could, you know, there's something similar here where maybe there's something in the context of behaviors",
    "start": "3392600",
    "end": "3398566"
  },
  {
    "text": "that allows you to just complete messages. Maybe if you were, if you're the mailbox object, you would just do mailbox dot",
    "start": "3398566",
    "end": "3404466"
  },
  {
    "text": "complete and passing the envelope. Right. Exactly. That would be another way is like, there's an object that",
    "start": "3404733",
    "end": "3409766"
  },
  {
    "text": "the behavior receives that, you know, user either is like represents the entity or the mailbox or",
    "start": "3409766",
    "end": "3415133"
  },
  {
    "text": "whatever, and allows you to complete the message. And so transparently that writes back to",
    "start": "3415133",
    "end": "3421399"
  },
  {
    "text": "the kind of database here. Yeah. To updating that flag of acknowledge to",
    "start": "3421399",
    "end": "3426533"
  },
  {
    "text": "true saying, okay, I acknowledge or even process that message.",
    "start": "3426533",
    "end": "3430932"
  },
  {
    "text": "Right. So now our message is processed and that's transparent to the user. So can I do a dotted arrow?",
    "start": "3431733",
    "end": "3437133"
  },
  {
    "text": "I feel like I'm asking a lot right now.",
    "start": "3437733",
    "end": "3440333"
  },
  {
    "text": "Whatever you get the idea. There's some sort of right happening back here. Transparent to the database.",
    "start": "3444733",
    "end": "3451133"
  },
  {
    "text": "Maybe we can like, you know, indicate that there's like some sort of, you know,",
    "start": "3451133",
    "end": "3455533"
  },
  {
    "text": "proxy service that the behavior has access to, but the behavior doesn't actually need to know that what it's doing.",
    "start": "3456933",
    "end": "3463066"
  },
  {
    "text": "All the behavior has to concern itself with is either acknowledging or completing the message. And they are different, right?",
    "start": "3463066",
    "end": "3468133"
  },
  {
    "text": "The idea was that you would, the behavior could maybe be just with the mailbox",
    "start": "3468300",
    "end": "3473666"
  },
  {
    "text": "and the mailbox is the, as the, the, the ship you draw is that the thing that is",
    "start": "3473733",
    "end": "3479133"
  },
  {
    "text": "in between the actual persistent storage and what that entity can do with its",
    "start": "3479133",
    "end": "3488500"
  },
  {
    "text": "own mailbox in the storage. So this, this arrow is a little bit",
    "start": "3488733",
    "end": "3494733"
  },
  {
    "text": "misleading because it's not necessarily like it's not a direct, right? Because the, the user is just indicating",
    "start": "3494733",
    "end": "3500066"
  },
  {
    "text": "that a message is completed, but behind the scenes, whatever the cert, whatever we've, whatever has been provided to the",
    "start": "3500066",
    "end": "3505899"
  },
  {
    "text": "system as like the mailbox storage is essentially getting updated with the fact that that message is done.",
    "start": "3505899",
    "end": "3510466"
  },
  {
    "text": "Exactly. And then to Mike's point, when a pod or",
    "start": "3510966",
    "end": "3517366"
  },
  {
    "text": "shard is spun up part of the like spin up operation, part of like the",
    "start": "3517366",
    "end": "3524432"
  },
  {
    "text": "initialization of a shard or a pod, like part of the initialization has to include",
    "start": "3524433",
    "end": "3530599"
  },
  {
    "text": "checking the database. Spawning up basically all the entities",
    "start": "3530600",
    "end": "3536133"
  },
  {
    "text": "that have an unknown knowledge, not a knowledge messages in their mailbox.",
    "start": "3536133",
    "end": "3541932"
  },
  {
    "text": "Right. We need to basically know from the mailbox storage, we",
    "start": "3542899",
    "end": "3548466"
  },
  {
    "text": "need basically to know the list of all the entity types and IDs that have something for that shard ID",
    "start": "3548466",
    "end": "3556333"
  },
  {
    "text": "that is not aknowledge. Right.",
    "start": "3556733",
    "end": "3561166"
  },
  {
    "text": "Mike, when we were chatting in Discord, you had mentioned the concept of like a last scene, a last scene kind of cursor",
    "start": "3562766",
    "end": "3573500"
  },
  {
    "text": "that's only in memory. Yeah. That is the thing that when you take one message from the mailbox,",
    "start": "3573500",
    "end": "3579466"
  },
  {
    "text": "you will not take that message again when you take again, because let's",
    "start": "3580066",
    "end": "3585632"
  },
  {
    "text": "imagine again that you have that database table, but they can the mailbox storage.",
    "start": "3585633",
    "end": "3590866"
  },
  {
    "text": "Okay. When you spawn up the behavior, okay, you start from zero.",
    "start": "3591333",
    "end": "3597799"
  },
  {
    "text": "Okay. And the take operation will just say select top 10 messages",
    "start": "3598133",
    "end": "3604233"
  },
  {
    "text": "from table where a sequence is greater than zero.",
    "start": "3604233",
    "end": "3609166"
  },
  {
    "text": "Okay. And they have not been acknowledged. Okay. And so basically on the first time you",
    "start": "3609533",
    "end": "3616199"
  },
  {
    "text": "run that, you start from zero. Okay. And you will get message one, message two, three, four, five,",
    "start": "3616199",
    "end": "3621633"
  },
  {
    "text": "six, seven, eight, nine, ten. Okay. So let's say that maybe message number seven.",
    "start": "3621633",
    "end": "3626833"
  },
  {
    "text": "Okay. Is taken as one of these like long running ones. Exactly. Exactly. So you just take it, but you don't know.",
    "start": "3626833",
    "end": "3634166"
  },
  {
    "text": "Okay. So it doesn't have the acknowledged flag set in the table.",
    "start": "3634166",
    "end": "3638866"
  },
  {
    "text": "So if you imagine shutting down the process and starting again, okay, when you perform that select top 10 messages from where",
    "start": "3639366",
    "end": "3647466"
  },
  {
    "text": "knowledge is false and the last scene is greater than",
    "start": "3647466",
    "end": "3653233"
  },
  {
    "text": "zero, you won't get that one, two, three, four, five. You start with seven and",
    "start": "3653233",
    "end": "3658465"
  },
  {
    "text": "then 11, 12, 13, et cetera. Okay. Because the other ones now have been",
    "start": "3658466",
    "end": "3663533"
  },
  {
    "text": "acknowledged by the previous execution. Okay. Interesting. Yeah. That makes perfect sense.",
    "start": "3663533",
    "end": "3669566"
  },
  {
    "text": "Okay. So lastly, it only exists in memory. Yeah. Yeah. Basically what I was also thinking is",
    "start": "3669566",
    "end": "3676833"
  },
  {
    "text": "that last scene is basically a cursor for the operation",
    "start": "3676833",
    "end": "3684600"
  },
  {
    "text": "of taking messages from the mailbox storage. Okay. You start by not providing a cursor.",
    "start": "3684733",
    "end": "3691366"
  },
  {
    "text": "Okay. And then when you actually perform a successfully take operation, you get back",
    "start": "3691899",
    "end": "3699033"
  },
  {
    "text": "the list of messages and the cursor to use proceed with the next take.",
    "start": "3699033",
    "end": "3703833"
  },
  {
    "text": "Okay. And so the idea is that like the user could actually, this could actually be exposed to the user so they can, from the behavior",
    "start": "3704399",
    "end": "3710899"
  },
  {
    "text": "side, they could actually control. We can do either. We can do, we can have that exposed just",
    "start": "3710899",
    "end": "3719966"
  },
  {
    "text": "in the implementation of the actual storage in the trade of the storage and, and, and",
    "start": "3719966",
    "end": "3726633"
  },
  {
    "text": "basically use that as a cursor as something to let the user pass state",
    "start": "3726633",
    "end": "3731866"
  },
  {
    "text": "between the requests basically. Or, and just explicitly provide that",
    "start": "3731866",
    "end": "3740233"
  },
  {
    "text": "there and hide that parameter in the actual mailbox that is used by the actual behavior",
    "start": "3740233",
    "end": "3747233"
  },
  {
    "text": "provided by the user. So the user want to see that cursor.",
    "start": "3747233",
    "end": "3752033"
  },
  {
    "text": "Well, we'll just start taking and that courses is managed in memory by shared the effect",
    "start": "3752433",
    "end": "3759266"
  },
  {
    "text": "cluster. Okay. Or we can allow the user to explicitly provide that.",
    "start": "3759333",
    "end": "3765666"
  },
  {
    "text": "And that would be like I said before, that when you take you get back basically the top",
    "start": "3766033",
    "end": "3771066"
  },
  {
    "text": "all of new messages and the cursor to continue pulling from.",
    "start": "3771066",
    "end": "3776000"
  },
  {
    "text": "But I think that maybe we can start by hiding that. And if we see a use case that maybe could",
    "start": "3776333",
    "end": "3783333"
  },
  {
    "text": "make sense providing that cursor ability to the user, maybe we can expose that later.",
    "start": "3783333",
    "end": "3789133"
  },
  {
    "text": "I think what do you think? No, I think that makes sense because exposing that to the user starts to",
    "start": "3789133",
    "end": "3796800"
  },
  {
    "text": "introduce complexity that we haven't even figured out the like basics yet of the implementation of this.",
    "start": "3796800",
    "end": "3803033"
  },
  {
    "text": "So I feel like we can start by hiding it. Yeah. We should provide that on the mailbox storage trade.",
    "start": "3803033",
    "end": "3809433"
  },
  {
    "text": "I call that the trait that has only the responsibility of communicating with the actual persistent.",
    "start": "3809466",
    "end": "3816466"
  },
  {
    "text": "And we can expose that because that is one point that the user can pick up messages and",
    "start": "3817166",
    "end": "3823300"
  },
  {
    "text": "return some state that will get passed in again on next request. So it's something that the user can",
    "start": "3823500",
    "end": "3829966"
  },
  {
    "text": "customize on its own mailbox storage persistent trait.",
    "start": "3829966",
    "end": "3835766"
  },
  {
    "text": "Because who knows maybe instead of using a global sequence number, maybe you have some",
    "start": "3836633",
    "end": "3843666"
  },
  {
    "text": "database that is append only and uses UUID v7 or whatever as a",
    "start": "3844399",
    "end": "3851166"
  },
  {
    "text": "primary key and whatever you want to use that UUID v7 as a cursor",
    "start": "3851166",
    "end": "3856733"
  },
  {
    "text": "saying get all the messages where it is greater or equal than blah blah.",
    "start": "3856733",
    "end": "3861866"
  },
  {
    "text": "Yeah, I think that makes sense. I think we can start with not exposing this, deal with it in the mailbox storage for now.",
    "start": "3867033",
    "end": "3872800"
  },
  {
    "text": "And then. And also one further comment.",
    "start": "3873633",
    "end": "3877566"
  },
  {
    "text": "The query that I was sort of proposing is",
    "start": "3878966",
    "end": "3884466"
  },
  {
    "text": "an idealized query because obviously we cannot have every entity directly hitting the",
    "start": "3884466",
    "end": "3893033"
  },
  {
    "text": "database with queries because let's say you have a million entities, it's going to be",
    "start": "3893033",
    "end": "3899566"
  },
  {
    "text": "slightly problematic to have a million processes connect to a Postgres instance where every",
    "start": "3899566",
    "end": "3905133"
  },
  {
    "text": "connection is for megabytes of memory. So what is actually connected to the",
    "start": "3905133",
    "end": "3911766"
  },
  {
    "text": "database is the pod, which does a single query for all of the entities and handles this",
    "start": "3911766",
    "end": "3919933"
  },
  {
    "text": "filtering internally. Yeah, I feel like the mailbox.",
    "start": "3919933",
    "end": "3925366"
  },
  {
    "text": "Potentially the connection is one and it publishes on maybe a hub.",
    "start": "3925766",
    "end": "3930866"
  },
  {
    "text": "It publishes events into a hub and then it's take filters, events from that hub, all the",
    "start": "3932233",
    "end": "3938166"
  },
  {
    "text": "entities that we care about. Yeah. I think that the mailbox, although we",
    "start": "3938266",
    "end": "3945199"
  },
  {
    "text": "represented as entity specific, it could in theory be a pod mailbox that handles",
    "start": "3945199",
    "end": "3951966"
  },
  {
    "text": "messages for all of the. And maybe what I was thinking is that",
    "start": "3951966",
    "end": "3957432"
  },
  {
    "text": "that we need to distinguish. We have the mailbox of each site that is",
    "start": "3957433",
    "end": "3963500"
  },
  {
    "text": "one entity, okay, because it needs to take only messages for those entities, et cetera.",
    "start": "3963500",
    "end": "3969300"
  },
  {
    "text": "And we have the mailbox storage implementation. And that mailbox storage implementation,",
    "start": "3969300",
    "end": "3974632"
  },
  {
    "text": "I think is something that should be injected via the effects context so that you can",
    "start": "3974866",
    "end": "3980866"
  },
  {
    "text": "inject that per registered entity or per entire pod",
    "start": "3980866",
    "end": "3985733"
  },
  {
    "text": "or whatever you want to, because maybe you have some entities",
    "start": "3986199",
    "end": "3992233"
  },
  {
    "text": "that you don't care about persistence and maybe you are just fine using something in memory",
    "start": "3992233",
    "end": "3997633"
  },
  {
    "text": "because maybe those entities doesn't perform something that you care too much about and you",
    "start": "3997633",
    "end": "4003366"
  },
  {
    "text": "are fine with memory. If you lose messages between the starts, that's fine. That's something you expect.",
    "start": "4003366",
    "end": "4008833"
  },
  {
    "text": "And let's say that you have an entity, for example, that publishes events or something.",
    "start": "4010166",
    "end": "4015300"
  },
  {
    "text": "If you don't publish an event, maybe there are use cases that it's fine because maybe you will publish again later another",
    "start": "4016033",
    "end": "4022265"
  },
  {
    "text": "message that completely overrides the previous one. So it's fine if you lose one.",
    "start": "4022266",
    "end": "4026633"
  },
  {
    "text": "Right. And so I think that that is something that the mailbox storage can should come from the context.",
    "start": "4027466",
    "end": "4033765"
  },
  {
    "text": "And it's something that is required in the phase of registering an entity into the cluster.",
    "start": "4034366",
    "end": "4039966"
  },
  {
    "text": "Okay. So it's actually the context that will be provided to the mailbox.",
    "start": "4040566",
    "end": "4046166"
  },
  {
    "text": "The last thing I wanted to touch on related to all of the discussion we were having in Discord was something else that Mike had",
    "start": "4049666",
    "end": "4055133"
  },
  {
    "text": "mentioned, which was the concept of an entity having local state independent of storage.",
    "start": "4055133",
    "end": "4061432"
  },
  {
    "text": "And I wanted to know if, Mike, maybe you could expand upon the use case you were thinking of for entity state specifically that's like",
    "start": "4062366",
    "end": "4069033"
  },
  {
    "text": "an in-memory kind of state. So here actually the only state that I",
    "start": "4069033",
    "end": "4081399"
  },
  {
    "text": "see important to be tracked to retract is if the entity should stay",
    "start": "4081399",
    "end": "4087433"
  },
  {
    "text": "alive even without messages.",
    "start": "4087433",
    "end": "4090733"
  },
  {
    "text": "The use case was along the",
    "start": "4093233",
    "end": "4100066"
  },
  {
    "text": "lines of the of the email thing. If we wanted to straight up acknowledge",
    "start": "4100066",
    "end": "4108066"
  },
  {
    "text": "the message received instead of re-getting the message",
    "start": "4108066",
    "end": "4114233"
  },
  {
    "text": "at any point in time. And in that case, the the the entity",
    "start": "4114233",
    "end": "4122132"
  },
  {
    "text": "would be shut it down and or rather would not be restarted when when a",
    "start": "4122133",
    "end": "4128765"
  },
  {
    "text": "pod comes comes back alive. So if instead there is a flag which says,",
    "start": "4128766",
    "end": "4136765"
  },
  {
    "text": "okay, I need to stay alive at least for a year or two,",
    "start": "4136766",
    "end": "4141365"
  },
  {
    "text": "or simply I need to stay alive, I explicitly tell when when the entity can be passivated.",
    "start": "4142500",
    "end": "4148333"
  },
  {
    "text": "And it would not it would not be a problem. And in this case, we imagine that the",
    "start": "4149066",
    "end": "4156198"
  },
  {
    "text": "entity has access to, for example, another persistent storage where the entity itself stores",
    "start": "4156199",
    "end": "4163765"
  },
  {
    "text": "the number of triggers that it has to send.",
    "start": "4163766",
    "end": "4167666"
  },
  {
    "text": "For example, I send an email in a year, send an email in two years and then even in five months",
    "start": "4168833",
    "end": "4173733"
  },
  {
    "text": "or whatever, instead of reprocessing all the messages, I could store those triggers in",
    "start": "4173966",
    "end": "4180966"
  },
  {
    "text": "somewhere else and just tell the entity to to keep being alive. That's that's one that's sort of another",
    "start": "4181866",
    "end": "4190465"
  },
  {
    "text": "another possible design. And would it be possible to have that",
    "start": "4190466",
    "end": "4198099"
  },
  {
    "text": "sort of like design, not necessarily exactly that, but like just thinking in terms of things",
    "start": "4198100",
    "end": "4204399"
  },
  {
    "text": "that the user might want to control, right? So user probably wants to be able to control the behavior of the entity.",
    "start": "4204399",
    "end": "4212032"
  },
  {
    "text": "I mean, definitely wants to control the behavior, but also might want to control lifetime behavior for the entity.",
    "start": "4212033",
    "end": "4217800"
  },
  {
    "text": "So maybe we could because I see this like",
    "start": "4218399",
    "end": "4224333"
  },
  {
    "text": "this current model could support the whole like keeping an entity alive forever if we allow the user to pass",
    "start": "4224333",
    "end": "4230466"
  },
  {
    "text": "in when they're registering an entity like a particular lifetime behavior as well.",
    "start": "4230466",
    "end": "4236099"
  },
  {
    "text": "Like, you know, entity that never die or something like that or never. Yeah. But on the other side, these these",
    "start": "4236366",
    "end": "4242233"
  },
  {
    "text": "behavior I was referencing to is more dynamic. If there are no crons alive,",
    "start": "4242233",
    "end": "4248633"
  },
  {
    "text": "the entity can be passivated. It's something more like something that the entity stays alive forever.",
    "start": "4248633",
    "end": "4255433"
  },
  {
    "text": "No, it's something like what something has to be done. Yeah, it's something more like a schedule",
    "start": "4255766",
    "end": "4262032"
  },
  {
    "text": "behavior or something like I should be alive or die within the schedule.",
    "start": "4262033",
    "end": "4266466"
  },
  {
    "text": "Something like as you described, maybe I would want, for example,",
    "start": "4267066",
    "end": "4272066"
  },
  {
    "text": "maybe the entity to shut down now, but somehow ensures that it goes back",
    "start": "4272300",
    "end": "4278833"
  },
  {
    "text": "alive in within minutes, because maybe for now the system,",
    "start": "4278833",
    "end": "4284266"
  },
  {
    "text": "as you described, maybe you have a trigger that triggers in one year, keeping the entity with the fiber, spawn",
    "start": "4284366",
    "end": "4290100"
  },
  {
    "text": "up for for an year, maybe is not a bad thing. Maybe if we detect in the entity behavior",
    "start": "4290100",
    "end": "4296366"
  },
  {
    "text": "that the closest methods will be will be sent in a year, maybe we can by default shut down the",
    "start": "4296366",
    "end": "4302133"
  },
  {
    "text": "entity behavior and tell somehow the system, remember to spawn up me again within and",
    "start": "4302133",
    "end": "4309833"
  },
  {
    "text": "I'll tell you within maybe six months. Or maybe the system will spawn me up",
    "start": "4309833",
    "end": "4315033"
  },
  {
    "text": "again when I receive a new message. And then I will tell, okay, I want you to shut down now and then",
    "start": "4315033",
    "end": "4320566"
  },
  {
    "text": "again wait for six months. Or I don't care about that six months I",
    "start": "4320566",
    "end": "4325865"
  },
  {
    "text": "said before, I want to be alive now and keep being alive now.",
    "start": "4325866",
    "end": "4332233"
  },
  {
    "text": "So maybe something we are seeing is instead of reasoning it of how the entity should remain alive, maybe",
    "start": "4333066",
    "end": "4342733"
  },
  {
    "text": "we should work on the assumption that by default, the entity is spawn up every time a",
    "start": "4342733",
    "end": "4350166"
  },
  {
    "text": "message is received. And we could provide the ability somehow",
    "start": "4350166",
    "end": "4358265"
  },
  {
    "text": "to the mailbox to tell, hey, this message",
    "start": "4358266",
    "end": "4364899"
  },
  {
    "text": "queue it for whatever. And then it's up",
    "start": "4365633",
    "end": "4373066"
  },
  {
    "text": "to the mailbox storage implementation with a stream or whatever telling me which entities have",
    "start": "4373066",
    "end": "4384166"
  },
  {
    "text": "messages that triggered because that time I expired. I'm trying to toss in some ideas.",
    "start": "4384166",
    "end": "4392566"
  },
  {
    "text": "- I mean, I think the feature that Mike's suggesting is maybe one that could be like an addition to the base implementation. I",
    "start": "4393033",
    "end": "4402133"
  },
  {
    "text": "think like what we have now is already pretty robust for message processing and that",
    "start": "4402133",
    "end": "4408032"
  },
  {
    "text": "the ability to control the lifetime of the entity could be an addition to like kind of like an MVP that we're working up towards.",
    "start": "4408033",
    "end": "4414133"
  },
  {
    "text": "But what I do think is I think that as a",
    "start": "4414933",
    "end": "4421333"
  },
  {
    "text": "user, there may be cases where independent of like, oh, I have triggers to process or I don't",
    "start": "4421333",
    "end": "4427833"
  },
  {
    "text": "have triggers to process. As a user, I could see situations where you may want to control",
    "start": "4427833",
    "end": "4434366"
  },
  {
    "text": "the lifetime of the entity globally. Right? Like like Mattia was mentioning on a schedule or something like that, like the entity should",
    "start": "4434366",
    "end": "4442100"
  },
  {
    "text": "remain alive for this period of time or whatever, like forever or like a duration",
    "start": "4442100",
    "end": "4448066"
  },
  {
    "text": "that the entity should remain alive if there are no messages to be processed. - I think that's- - What I",
    "start": "4448066",
    "end": "4453500"
  },
  {
    "text": "see is kind of a lifetime hint. - Yeah, exactly. A schedule. - Which is like from the behavior, it's",
    "start": "4453500",
    "end": "4461198"
  },
  {
    "text": "not a schedule. A schedule in effect has a clear specific meaning and it's not- - Yeah,",
    "start": "4461199",
    "end": "4466500"
  },
  {
    "text": "not the effect schedule. I meant a schedule meaning you should wake up at this time",
    "start": "4466766",
    "end": "4472833"
  },
  {
    "text": "and then maybe you could shut down. - Yeah, or rather the behavior should say, okay, I wish to be",
    "start": "4472833",
    "end": "4479100"
  },
  {
    "text": "alive at this point in time. - Exactly, exactly. - Or I wish to be alive at every point in time.",
    "start": "4479100",
    "end": "4485266"
  },
  {
    "text": "- Exactly. - Or I have to please keep me alive at least once per month,",
    "start": "4485266",
    "end": "4492500"
  },
  {
    "text": "once per year, whatever. But I do think that this can be staggered",
    "start": "4492733",
    "end": "4501033"
  },
  {
    "text": "on top of like we don't have to do everything at once.",
    "start": "4501033",
    "end": "4506266"
  },
  {
    "text": "It's sort of independent from the messaging behavior, but I do agree with both levels of",
    "start": "4506699",
    "end": "4513765"
  },
  {
    "text": "flexibility. You could specify when you register an entity that when created has to stay alive",
    "start": "4514000",
    "end": "4520733"
  },
  {
    "text": "forever, unless maybe explicitly destroyed. I don't even know what that would mean.",
    "start": "4520933",
    "end": "4528133"
  },
  {
    "text": "But the global thing could be of",
    "start": "4529633",
    "end": "4535698"
  },
  {
    "text": "importance. The local refinements could also be of importance,",
    "start": "4535699",
    "end": "4541366"
  },
  {
    "text": "but I think the most important thing is if there are non-processed messages, the entity has to be alive. That's the",
    "start": "4541733",
    "end": "4548933"
  },
  {
    "text": "easiest of the lifetime things. And this already allows",
    "start": "4548933",
    "end": "4555300"
  },
  {
    "text": "stuff like I can be alive for whenever I want from the behavior",
    "start": "4555966",
    "end": "4561532"
  },
  {
    "text": "because the behavior is free to post to themselves, to post to itself,",
    "start": "4561533",
    "end": "4566899"
  },
  {
    "text": "a message which will never be processed. - Yeah, exactly. - So like if I want to stay alive up",
    "start": "4567600",
    "end": "4573366"
  },
  {
    "text": "until this point, I can send myself a message. - Like a keep-alive message. - Yeah, I can send myself a message and",
    "start": "4573366",
    "end": "4578433"
  },
  {
    "text": "not acknowledge that message. It's only more tedious and less",
    "start": "4578433",
    "end": "4586766"
  },
  {
    "text": "structured. So we all have a standard way of doing it,",
    "start": "4586766",
    "end": "4592266"
  },
  {
    "text": "but the flexibility with a mailbox and with different moments of acknowledging",
    "start": "4592533",
    "end": "4599200"
  },
  {
    "text": "already allows for these types of scenarios. So I would start there and",
    "start": "4600366",
    "end": "4606533"
  },
  {
    "text": "eventually mount things. - Yeah, I think the messaging behavior is where we can... We",
    "start": "4606533",
    "end": "4611865"
  },
  {
    "text": "already have a pretty robust... I mean, I'll use robust in quotes. We've discussed this at length. And so I think the",
    "start": "4611866",
    "end": "4618500"
  },
  {
    "text": "messaging is where we should start. And then we can always layer on top the lifetime behavior, like Mike was saying. So yeah, I think",
    "start": "4618500",
    "end": "4626299"
  },
  {
    "text": "this is good. I feel like the diagrams can certainly be improved and I will improve these",
    "start": "4626299",
    "end": "4631866"
  },
  {
    "text": "probably with some other type of diagram or whatever. But I already feel like",
    "start": "4631866",
    "end": "4638299"
  },
  {
    "text": "this makes pretty good sense to me and gives us a good starting place",
    "start": "4638299",
    "end": "4643833"
  },
  {
    "text": "to start working on this. - I have to say sorry, but unfortunately",
    "start": "4643833",
    "end": "4650333"
  },
  {
    "text": "now I have to leave because I have an appointment in five minutes. So thanks again,",
    "start": "4650333",
    "end": "4657000"
  },
  {
    "text": "everyone, for letting me in. - No worries, Mathias. Thank you very",
    "start": "4657766",
    "end": "4662833"
  },
  {
    "text": "much. - You're welcome anytime. - Thank you for joining. Thank you very much. - Thank you. See you, everyone.",
    "start": "4662833",
    "end": "4667366"
  },
  {
    "text": "- See ya. - But I do think we have sort of reached",
    "start": "4668366",
    "end": "4675533"
  },
  {
    "text": "conclusion for at least today's argument.",
    "start": "4675533",
    "end": "4682066"
  },
  {
    "text": "Maybe we can improve the TL draw offline and start to pushing it to the repository",
    "start": "4683500",
    "end": "4690666"
  },
  {
    "text": "at some point in time. - Yeah, I think that the diagrams can definitely be improved,",
    "start": "4690666",
    "end": "4696166"
  },
  {
    "text": "but I do agree. I think we've sort of reached a good point of like, \"Okay, now we should probably",
    "start": "4696299",
    "end": "4701500"
  },
  {
    "text": "start prototyping.\" We've discussed and diagrammed enough. I think it's time to start writing a little",
    "start": "4701500",
    "end": "4708299"
  },
  {
    "text": "bit of code. - Yeah, because I'm already thinking in my head how every port queries to the database.",
    "start": "4708299",
    "end": "4714333"
  },
  {
    "text": "I need to see that work. - Yeah, because in theory, you could have quite a few pods as well. And so, yeah, I",
    "start": "4715433",
    "end": "4723666"
  },
  {
    "text": "don't know. It'll be interesting to try to figure out that I've sort of had those problems",
    "start": "4723666",
    "end": "4730166"
  },
  {
    "text": "before, and I'm scared that I already know the solution.",
    "start": "4730166",
    "end": "4733933"
  },
  {
    "text": "That, of course, is dependent on what database we target, because different",
    "start": "4736766",
    "end": "4742333"
  },
  {
    "text": "database have different things. - It's also dependent on the size of the cluster, right? - That's the other point. - And how",
    "start": "4742333",
    "end": "4749566"
  },
  {
    "text": "frequently you're publishing messages. If you've got a massive cluster that you're constantly messaging,",
    "start": "4749566",
    "end": "4756633"
  },
  {
    "text": "like, yeah, you're going to need probably something a lot more robust than a SQLite database. But if you've got a small cluster, you could potentially",
    "start": "4757100",
    "end": "4764365"
  },
  {
    "text": "operate on a much smaller scale. - Well,",
    "start": "4764366",
    "end": "4770033"
  },
  {
    "text": "the issue is not really how many messages you have, but rather how many parties have to be",
    "start": "4770600",
    "end": "4776633"
  },
  {
    "text": "notified of that message. Because a single SQLite database",
    "start": "4776633",
    "end": "4782966"
  },
  {
    "text": "or a single Postgres can handle thousands and thousands and thousands of messages per second.",
    "start": "4783233",
    "end": "4788766"
  },
  {
    "text": "That's really not the issue. The issue is having thousand pods",
    "start": "4789700",
    "end": "4794866"
  },
  {
    "text": "querying the database every moment. So that's the more troublesome",
    "start": "4794866",
    "end": "4802365"
  },
  {
    "text": "part. And these, either",
    "start": "4802366",
    "end": "4808066"
  },
  {
    "text": "you have a message broker, and then your problems are dispatching",
    "start": "4808066",
    "end": "4813700"
  },
  {
    "text": "between the database and the message broker, which can be",
    "start": "4813700",
    "end": "4819299"
  },
  {
    "text": "solved provided that you have some sort",
    "start": "4819299",
    "end": "4826133"
  },
  {
    "text": "of cursor, which you can achieve in different ways.",
    "start": "4826133",
    "end": "4830733"
  },
  {
    "text": "Or if you want to do streaming out of a Postgres, there's really two solutions.",
    "start": "4831399",
    "end": "4837633"
  },
  {
    "text": "One that doesn't scale and the other that scales. The one that doesn't scale is to use PubSub.",
    "start": "4838299",
    "end": "4843533"
  },
  {
    "text": "Postgres has a publish, subscribe feature, and clients can be subscribing to updates,",
    "start": "4845933",
    "end": "4853233"
  },
  {
    "text": "and whenever you update something, you can publish. So you publish a message,",
    "start": "4853533",
    "end": "4859333"
  },
  {
    "text": "and the subscribers then pull upon the receiver of that message.",
    "start": "4859566",
    "end": "4864833"
  },
  {
    "text": "Or they even pull every half a second, every 200 milliseconds",
    "start": "4865533",
    "end": "4870433"
  },
  {
    "text": "or so. The one that Dillon is saying that",
    "start": "4870666",
    "end": "4877433"
  },
  {
    "text": "PG PubSub is a slept-on feature, I would agree partially,",
    "start": "4877433",
    "end": "4882333"
  },
  {
    "text": "the only issue is that it's completely inefficient. So the only efficient way of achieving streaming",
    "start": "4882600",
    "end": "4889100"
  },
  {
    "text": "out of a Postgres is reading the write-ahead log. So basically having your",
    "start": "4889166",
    "end": "4895566"
  },
  {
    "text": "client be part of the replication protocol, which is how any",
    "start": "4895566",
    "end": "4901066"
  },
  {
    "text": "grown-up does it, like Superbase and so on and so forth. They all have to migrate to logical",
    "start": "4901066",
    "end": "4908000"
  },
  {
    "text": "decoding and write-ahead log injection, which is fine.",
    "start": "4908000",
    "end": "4912666"
  },
  {
    "text": "You get the whole database posted and you can have like 100. If",
    "start": "4913233",
    "end": "4920566"
  },
  {
    "text": "you have 100 pods or even 1000 pods, that's still fine. You have a fixed number. It's like",
    "start": "4920566",
    "end": "4927166"
  },
  {
    "text": "one connection per each. You can pull the connections because",
    "start": "4927166",
    "end": "4932966"
  },
  {
    "text": "write-ahead logs can also fun out. So you can have like a PG bouncer",
    "start": "4932966",
    "end": "4938133"
  },
  {
    "text": "where you have the PG bouncer that connects to the lead, to the PG lead, and",
    "start": "4938200",
    "end": "4947100"
  },
  {
    "text": "from the PG bouncer, then fun out the same messages to multiple things. Because here the",
    "start": "4947100",
    "end": "4954233"
  },
  {
    "text": "intensive things is not the right. It's really the read. So if the read can fun out, so you have",
    "start": "4954233",
    "end": "4960399"
  },
  {
    "text": "cursors and everything else, it's much easier. But still, it's not a",
    "start": "4960399",
    "end": "4966066"
  },
  {
    "text": "simple problem to solve on a huge scale. It's a quite simple problem to solve on a small scale.",
    "start": "4966066",
    "end": "4972066"
  },
  {
    "text": "Well, I think that the nice, the somewhat nice thing is that if we build the abstraction for",
    "start": "4973133",
    "end": "4979133"
  },
  {
    "text": "the mailbox as the mailbox storage, at least for now, we can",
    "start": "4980933",
    "end": "4986433"
  },
  {
    "text": "not, that's a later problem. Yeah. Like if somebody builds a cluster that",
    "start": "4986433",
    "end": "4993333"
  },
  {
    "text": "big with effect cluster, I'd be, first of all, I'd be super happy, but I'd also like, that",
    "start": "4993333",
    "end": "4999933"
  },
  {
    "text": "would be a situation where- At the time, at the point in time where we have a crazy enough team that is running 1000 pods",
    "start": "4999933",
    "end": "5007433"
  },
  {
    "text": "cluster and all effect cluster, I think we can get to a solution. My point is, I",
    "start": "5007433",
    "end": "5014133"
  },
  {
    "text": "knew what the final, how to do it efficiently, but probably we",
    "start": "5014133",
    "end": "5019299"
  },
  {
    "text": "don't want to start. We don't want to start there. What the last boss of the raid is eventually going to be?",
    "start": "5019299",
    "end": "5024566"
  },
  {
    "text": "Yeah. The last, the last, yeah. The final boss. The final boss is logical replication",
    "start": "5025700",
    "end": "5031333"
  },
  {
    "text": "over a Kafka cluster. That's the final boss. Yeah.",
    "start": "5031333",
    "end": "5036633"
  },
  {
    "text": "Well, the good thing is everything can be pluggable. So the reason I actually wanted",
    "start": "5036633",
    "end": "5043199"
  },
  {
    "text": "the effect cluster in the first place was the flexibility. What",
    "start": "5043200",
    "end": "5048399"
  },
  {
    "text": "they didn't like about other systems to run workflows is by default, they require a lot of",
    "start": "5048399",
    "end": "5055066"
  },
  {
    "text": "infrastructure regardless of what you want to do. If you're just using cluster for",
    "start": "5055066",
    "end": "5061365"
  },
  {
    "text": "building workflows that back your back your user registration system, I",
    "start": "5061366",
    "end": "5069765"
  },
  {
    "text": "don't think you're going to get like a median user registered every 10 minutes. You probably",
    "start": "5069766",
    "end": "5075066"
  },
  {
    "text": "get, if you're lucky, 1000 users registered every",
    "start": "5075066",
    "end": "5078932"
  },
  {
    "text": "10 minutes. And that's already way more than many companies have. That can be dealt with with a",
    "start": "5080766",
    "end": "5086899"
  },
  {
    "text": "three node cluster with ease, like, and without a lot of over",
    "start": "5086933",
    "end": "5093033"
  },
  {
    "text": "engineering on the infrastructure. So that should work with a single database, single Postgres, three",
    "start": "5093033",
    "end": "5098433"
  },
  {
    "text": "instances, and that's it. Yeah. I think that what I'm like from a,",
    "start": "5098433",
    "end": "5104200"
  },
  {
    "text": "from an infrastructure perspective, I 100% agree. I think from like a UX perspective, what interests me about cluster is like",
    "start": "5104200",
    "end": "5110733"
  },
  {
    "text": "leveraging the stuff that's already in effect and trying to make like the",
    "start": "5110766",
    "end": "5117133"
  },
  {
    "text": "creation of a cluster reasonably simple because it's so",
    "start": "5117133",
    "end": "5122166"
  },
  {
    "text": "pluggable. Like enable reasonable defaults, which we currently don't have in cluster, right? Right now",
    "start": "5122166",
    "end": "5128066"
  },
  {
    "text": "you actually have to provide every single service, which is kind of labor intensive if you look at some of the",
    "start": "5128066",
    "end": "5133366"
  },
  {
    "text": "examples. But I think we can really, we can get to a really nice experience where, you know, you define",
    "start": "5133366",
    "end": "5140099"
  },
  {
    "text": "your protocol in the form of tagged requests from schema, which becomes serializable. And",
    "start": "5140100",
    "end": "5147200"
  },
  {
    "text": "then the, you register your message protocol with different entities,",
    "start": "5147200",
    "end": "5151966"
  },
  {
    "text": "register those entities with the cluster. And then you spin up as many machines as",
    "start": "5152666",
    "end": "5158233"
  },
  {
    "text": "you need to run your cluster. And that should be like, you know, the minimum that you need to",
    "start": "5158233",
    "end": "5165166"
  },
  {
    "text": "do. And then you can always plug in other pieces if they become insufficient, right? So like, I",
    "start": "5165166",
    "end": "5170566"
  },
  {
    "text": "mean, I think like there are different layers of",
    "start": "5170566",
    "end": "5176133"
  },
  {
    "text": "abstractions that users can, can touch the default user of",
    "start": "5176133",
    "end": "5181899"
  },
  {
    "text": "cluster will actually not even interact with entities themselves. They would probably just use",
    "start": "5181899",
    "end": "5187566"
  },
  {
    "text": "the workflow engine, which is which is a default entity on top of",
    "start": "5187566",
    "end": "5193233"
  },
  {
    "text": "cluster. So they don't even see these sort of messages and so on and so forth. They just want to write",
    "start": "5193233",
    "end": "5199733"
  },
  {
    "text": "some workflows and they want to have the cluster that executes the workloads for them. Right.",
    "start": "5199733",
    "end": "5205266"
  },
  {
    "text": "So that should not require a huge amount of config. Then if you want to use the entities yourself,",
    "start": "5205266",
    "end": "5211599"
  },
  {
    "text": "you're gonna have to register the entities, as you pointed out before, but that doesn't mean you",
    "start": "5212000",
    "end": "5217766"
  },
  {
    "text": "should then hook up a hundred different types of, of services",
    "start": "5217766",
    "end": "5223899"
  },
  {
    "text": "to put together message brokers and so on and so forth. Could use some, some simple defaults.",
    "start": "5223966",
    "end": "5230233"
  },
  {
    "text": "But if you want to build a high, high performance cluster, you probably want to",
    "start": "5231366",
    "end": "5236333"
  },
  {
    "text": "customize some of the services for your own infrastructure. Let's say, if you're running in AWS,",
    "start": "5236966",
    "end": "5242333"
  },
  {
    "text": "you might use SQS. You know, I'd want to use the Kaddix and other",
    "start": "5243533",
    "end": "5251633"
  },
  {
    "text": "services to dispatch messages. And that's the point. Flexibility allows you to actually hook",
    "start": "5251633",
    "end": "5258100"
  },
  {
    "text": "in and do your thing. And if you do that, you're probably going to have to provide those hundred different interconnected",
    "start": "5258100",
    "end": "5264433"
  },
  {
    "text": "services, but that's also fine. Because at that point you want that level of granularity. I",
    "start": "5264433",
    "end": "5270466"
  },
  {
    "text": "think at the moment we are sort of progressively, we are at the beginning of the",
    "start": "5270466",
    "end": "5276333"
  },
  {
    "text": "simplification process. So if you check the examples, they're all hyper complex, having to provide thousands",
    "start": "5276333",
    "end": "5282066"
  },
  {
    "text": "of things, but hopefully we can get to a point where they are actually easy to use. I think we will. I",
    "start": "5282066",
    "end": "5288733"
  },
  {
    "text": "think we will. As long as we pick reasonable defaults, I think we will. Convention over",
    "start": "5288733",
    "end": "5294100"
  },
  {
    "text": "configuration to mention a Rails concept. Yeah, exactly. So cool. Cool.",
    "start": "5294100",
    "end": "5303633"
  },
  {
    "text": "That's a good way of closing the hole then. Yeah. Thank you everybody for, for",
    "start": "5304466",
    "end": "5309865"
  },
  {
    "text": "listening in. Hopefully this was interesting. I think I'll have",
    "start": "5309866",
    "end": "5314366"
  },
  {
    "text": "a good rest of your day. And yeah, thanks Mike. And see you Wednesday for something else.",
    "start": "5315166",
    "end": "5321066"
  },
  {
    "text": "Cheers folks. Cheers.",
    "start": "5322833",
    "end": "5324433"
  }
]