[
  {
    "text": "Hope that everyone is doing fine. Finally we are going back live.",
    "start": "3750",
    "end": "9625"
  },
  {
    "text": "After quite a while, we had quite a while of time we didn't stream.",
    "start": "10791",
    "end": "14708"
  },
  {
    "text": "And finally we're back. And we're gonna be back with something",
    "start": "16708",
    "end": "23291"
  },
  {
    "text": "very, very, very, very interesting that will happen",
    "start": "23291",
    "end": "28375"
  },
  {
    "text": "in next weeks. Let me just adjust some volumes.",
    "start": "28500",
    "end": "34541"
  },
  {
    "text": "Maybe the music is too loud. No, it is not.",
    "start": "35500",
    "end": "38875"
  },
  {
    "text": "Okay. Okay.",
    "start": "41166",
    "end": "46250"
  },
  {
    "text": "What are we gonna do today? Well, today we are gonna basically start",
    "start": "48125",
    "end": "55041"
  },
  {
    "text": "to build a warehouse application. Using Effect",
    "start": "55041",
    "end": "58958"
  },
  {
    "text": "But that would mean that we need to do some planning first.",
    "start": "61208",
    "end": "66416"
  },
  {
    "text": "We need to decide how we want to structure our application, which are the requirements,",
    "start": "67541",
    "end": "72458"
  },
  {
    "text": "which effect library are gonna be involved, which library is",
    "start": "73083",
    "end": "78291"
  },
  {
    "text": "our code we're gonna build ourselves. There's gonna be a lot of interesting thing I think that we will",
    "start": "78291",
    "end": "84375"
  },
  {
    "text": "cover during this project. So let's start maybe by doing something",
    "start": "84375",
    "end": "94833"
  },
  {
    "text": "about the requirements that we're gonna have. So maybe we can start",
    "start": "94833",
    "end": "100541"
  },
  {
    "text": "with excalidraw",
    "start": "100541",
    "end": "102333"
  },
  {
    "text": "Okay.",
    "start": "107958",
    "end": "108333"
  },
  {
    "text": "I've also something to read because yeah, today wasn't quite a light day at work.",
    "start": "114791",
    "end": "121500"
  },
  {
    "text": "So yeah. Okay. So let's start by what are the overall",
    "start": "122041",
    "end": "128291"
  },
  {
    "text": "requirements for the application we are trying to build. I said warehouse management, but it is",
    "start": "128291",
    "end": "136665"
  },
  {
    "text": "not actually completely true. The requirement we want for our",
    "start": "136666",
    "end": "142875"
  },
  {
    "text": "application are the following. We need to be able to",
    "start": "142875",
    "end": "149000"
  },
  {
    "text": "define products",
    "start": "149000",
    "end": "151875"
  },
  {
    "text": "Okay. And by products I mean any",
    "start": "154666",
    "end": "161208"
  },
  {
    "text": "good moved in the warehouse.",
    "start": "161208",
    "end": "165750"
  },
  {
    "text": "And we need also to be able to define",
    "start": "169500",
    "end": "176541"
  },
  {
    "text": "warehouses and be able",
    "start": "176541",
    "end": "183125"
  },
  {
    "text": "to register movements. of goods between warehouses.",
    "start": "183125",
    "end": "193915"
  },
  {
    "text": "And these are the domain requirements for our application.",
    "start": "197291",
    "end": "202500"
  },
  {
    "text": "So while building our application, we will come back and update these",
    "start": "208583",
    "end": "213833"
  },
  {
    "text": "requirements eventually adding things so for example: let's start with maybe defining",
    "start": "213833",
    "end": "221750"
  },
  {
    "text": "products",
    "start": "223000",
    "end": "224666"
  },
  {
    "text": "each product should have a unique identifier",
    "start": "230500",
    "end": "236500"
  },
  {
    "text": "which is basically a SKU we want to attach images",
    "start": "240708",
    "end": "247166"
  },
  {
    "text": "we want maybe a unit of measure",
    "start": "253833",
    "end": "257875"
  },
  {
    "text": "PCS or a KGM, etc",
    "start": "263958",
    "end": "269041"
  },
  {
    "text": "we want indeed to also be able to keep stocks.",
    "start": "274041",
    "end": "278957"
  },
  {
    "text": "So we have the SKU also product name.",
    "start": "286708",
    "end": "290791"
  },
  {
    "text": "Want to do the stash images. We want any unit of measure.",
    "start": "294083",
    "end": "297666"
  },
  {
    "text": "And then we want to define warehouses.",
    "start": "300291",
    "end": "302750"
  },
  {
    "text": "And the thing is that this kind of application will be used by, will be basically used by",
    "start": "309750",
    "end": "317832"
  },
  {
    "text": "an association I am part of.",
    "start": "317833",
    "end": "323083"
  },
  {
    "text": "And we want to use this application to keep track of the goods that are moving between",
    "start": "323500",
    "end": "329457"
  },
  {
    "text": "the warehouse that our association manages. And also the goods that every member of",
    "start": "329708",
    "end": "338791"
  },
  {
    "text": "the association have itself at home. So it happens that people",
    "start": "338791",
    "end": "345375"
  },
  {
    "text": "take things from the warehouse. They bring back home.",
    "start": "345375",
    "end": "349291"
  },
  {
    "text": "Use it and then put back things into the warehouse. And the problem that the application is",
    "start": "351416",
    "end": "357541"
  },
  {
    "text": "trying to solve is basically keeping track of who took what, where things are.",
    "start": "357541",
    "end": "365125"
  },
  {
    "text": "And then based on that, we can keep track if everything got lost or when we need to check",
    "start": "366208",
    "end": "373250"
  },
  {
    "text": "if all the goods or the items are okay. We know exactly where they are.",
    "start": "373541",
    "end": "379458"
  },
  {
    "text": "So basically the warehouses can be of two kind. One will be an actual location.",
    "start": "383250",
    "end": "391458"
  },
  {
    "text": "Like for example, the main address of our association.",
    "start": "395041",
    "end": "400125"
  },
  {
    "text": "Main address. or things like",
    "start": "404166",
    "end": "412041"
  },
  {
    "text": "temporary rent warehouses",
    "start": "412791",
    "end": "417082"
  },
  {
    "text": "or things like as I said",
    "start": "420625",
    "end": "427041"
  },
  {
    "text": "how can I call it? At home of any member of the association",
    "start": "427041",
    "end": "435375"
  },
  {
    "text": "So this is basically where the goods can be stocked.",
    "start": "440166",
    "end": "444333"
  },
  {
    "text": "In an actual location, in a temporary rent warehouse or at home of any member of the association.",
    "start": "445625",
    "end": "450416"
  },
  {
    "text": "And when we register movements of goods between warehouses, what we want to be able is basically",
    "start": "452083",
    "end": "459208"
  },
  {
    "text": "each member of the association can move",
    "start": "460000",
    "end": "469041"
  },
  {
    "text": "items only on owned warehouses.",
    "start": "469041",
    "end": "476707"
  },
  {
    "text": "And that means that me as a member of the association, I can find that I moved goods",
    "start": "479541",
    "end": "485583"
  },
  {
    "text": "only between the warehouses I am part of. So I can say that I moved things from the",
    "start": "486166",
    "end": "494375"
  },
  {
    "text": "main location to my house and from my house back to the main location. But for example, I cannot say that I",
    "start": "494375",
    "end": "501666"
  },
  {
    "text": "moved goods from the house of another member A to",
    "start": "501666",
    "end": "507875"
  },
  {
    "text": "the house of another member B. Okay. And that is because as I said, the main",
    "start": "507875",
    "end": "514333"
  },
  {
    "text": "purpose of this application is to track where the goods of our association, which is a",
    "start": "514333",
    "end": "521375"
  },
  {
    "text": "non-profit association. I can show you what we basically do.",
    "start": "521375",
    "end": "527416"
  },
  {
    "text": "This is a very old site. It doesn't load anymore.",
    "start": "534375",
    "end": "540666"
  },
  {
    "text": "Fantastic. Fantastic.",
    "start": "543541",
    "end": "547000"
  },
  {
    "text": "So, fantastic. That's the right one.",
    "start": "554500",
    "end": "564625"
  },
  {
    "text": "So, our association does basically this.",
    "start": "564625",
    "end": "569458"
  },
  {
    "text": "We do historical, we do historical revocation.",
    "start": "570291",
    "end": "575208"
  },
  {
    "text": "And so all the things that you can see here, for example, we have all the drums or the",
    "start": "576750",
    "end": "584000"
  },
  {
    "text": "flags. Everything is something that we need to keep track of who has",
    "start": "584000",
    "end": "589916"
  },
  {
    "text": "what because it's becoming a mess with all the people keeping track of who has what.",
    "start": "589916",
    "end": "596041"
  },
  {
    "text": "So, as I said, each member of the association can move items and we will have also like",
    "start": "597958",
    "end": "605166"
  },
  {
    "text": "super members can move between any warehouse.",
    "start": "606041",
    "end": "614250"
  },
  {
    "text": "So, for example, if I am the responsible for the drums, I can say that I moved drums into",
    "start": "617041",
    "end": "623250"
  },
  {
    "text": "warehouses and houses of people even if I don't own the house because that can be me",
    "start": "623250",
    "end": "630875"
  },
  {
    "text": "actually bringing the goods to that warehouse.",
    "start": "631000",
    "end": "633791"
  },
  {
    "text": "And then we need to update the stocks. This will be the basic requirements.",
    "start": "639916",
    "end": "645500"
  },
  {
    "text": "One thing that we can discuss on is that we have defined",
    "start": "647583",
    "end": "653000"
  },
  {
    "text": "products, but I would like to have an additional level of precision",
    "start": "653000",
    "end": "660000"
  },
  {
    "text": "that is that some kind of products, some kind of",
    "start": "660000",
    "end": "665291"
  },
  {
    "text": "items have actually an additional level that allows me to",
    "start": "665291",
    "end": "671500"
  },
  {
    "text": "specifically get which item is",
    "start": "671500",
    "end": "677291"
  },
  {
    "text": "where. Because for example, you can imagine that we have, for example, the belt that are used",
    "start": "677291",
    "end": "682875"
  },
  {
    "text": "by the drummers to wear the drum and the belt have on each belt,",
    "start": "683416",
    "end": "690750"
  },
  {
    "text": "we have a serial number. That is because its spell has a range of",
    "start": "690750",
    "end": "696458"
  },
  {
    "text": "measures that can accommodate. So some belts are okay",
    "start": "696458",
    "end": "702375"
  },
  {
    "text": "for be used by children's. Some belts are too small for to be used by any other people.",
    "start": "702375",
    "end": "709250"
  },
  {
    "text": "So maybe we can define that as kind of lots or batch.",
    "start": "711250",
    "end": "716375"
  },
  {
    "text": "define product, maybe product serial numbers.",
    "start": "717416",
    "end": "724166"
  },
  {
    "text": "And when I move, when moving products",
    "start": "726833",
    "end": "732250"
  },
  {
    "text": "managed by serial, we need",
    "start": "732250",
    "end": "738125"
  },
  {
    "text": "to provide the serial number as well.",
    "start": "738125",
    "end": "741500"
  },
  {
    "text": "So for some kind of items, we will be",
    "start": "744958",
    "end": "751458"
  },
  {
    "text": "able to just keep track of the stocks. And for other items, we will be able also",
    "start": "751458",
    "end": "758625"
  },
  {
    "text": "to keep track of stocks by serial number. So keep stocks",
    "start": "758625",
    "end": "762916"
  },
  {
    "text": "By amount or by amount per serial number.",
    "start": "766666",
    "end": "777625"
  },
  {
    "text": "So each serial number cannot exist in two different locations at one time.",
    "start": "779458",
    "end": "783625"
  },
  {
    "text": "So these are the domain requirements. and that means",
    "start": "787958",
    "end": "795625"
  },
  {
    "text": "another thing that we should have is be able",
    "start": "795625",
    "end": "801625"
  },
  {
    "text": "every user should have an account for basically authentication",
    "start": "803541",
    "end": "810291"
  },
  {
    "text": "but I'll have an additional level",
    "start": "812958",
    "end": "815958"
  },
  {
    "text": "you can login as a member so I can login as Mattia Manzati into the application",
    "start": "819291",
    "end": "825416"
  },
  {
    "text": "But I'd like to allow people to",
    "start": "826250",
    "end": "834416"
  },
  {
    "text": "authenticate themselves, but also impersonate other persons.",
    "start": "834416",
    "end": "840708"
  },
  {
    "text": "Because you need to understand that in our association, we have a lot of members that",
    "start": "842750",
    "end": "848416"
  },
  {
    "text": "are young and so they don't have a smartphone.",
    "start": "849166",
    "end": "854250"
  },
  {
    "text": "They will not be able to register data into the application themselves. So they will have an able doing that for",
    "start": "854791",
    "end": "862208"
  },
  {
    "text": "them, maybe their parents. And so that means that we need to provide",
    "start": "862208",
    "end": "867416"
  },
  {
    "text": "authentication by logging by, let's say, email",
    "start": "867416",
    "end": "872416"
  },
  {
    "text": "and password. Nothing fancy.",
    "start": "873541",
    "end": "876500"
  },
  {
    "text": "But I also want to be able to impersonate members.",
    "start": "878583",
    "end": "883791"
  },
  {
    "text": "And that will mean that a parent may impersonate child.",
    "start": "884750",
    "end": "893250"
  },
  {
    "text": "So that allows, for example, to say that if I am a parent and my children is bringing",
    "start": "896791",
    "end": "904083"
  },
  {
    "text": "the drums at home, I can say that my children will bring",
    "start": "904208",
    "end": "911666"
  },
  {
    "text": "the drums home.",
    "start": "911666",
    "end": "916333"
  },
  {
    "text": "Implement authentication, nothing fancy. Yeah, oh, yeah, yeah, yeah. Nothing fancy. By nothing fancy, I mean, no, no, nothing",
    "start": "916833",
    "end": "926833"
  },
  {
    "text": "of like, o-auth, nothing. Just a cold-plane authentication when you",
    "start": "926833",
    "end": "933250"
  },
  {
    "text": "provide an email and password and then by getting the email and password, you get",
    "start": "933250",
    "end": "938958"
  },
  {
    "text": "an access token and that access token is used for subsequent requests.",
    "start": "938958",
    "end": "943708"
  },
  {
    "text": "And that's it. So I would say that maybe I want to split",
    "start": "944250",
    "end": "949583"
  },
  {
    "text": "this feature into kind of entities, into kind of things. I want to authenticate as a user, but I",
    "start": "949583",
    "end": "959208"
  },
  {
    "text": "want also a concept of association member, member,",
    "start": "959208",
    "end": "967916"
  },
  {
    "text": "person.",
    "start": "968291",
    "end": "968791"
  },
  {
    "text": "And the association member, we can then",
    "start": "975833",
    "end": "981333"
  },
  {
    "text": "say that can be impersonated by user.",
    "start": "981333",
    "end": "986958"
  },
  {
    "text": "And we have the other sample that a parent may impersonate a child So that will allow that I can log in as",
    "start": "991583",
    "end": "997916"
  },
  {
    "text": "matia.manzati at gmail.com and I can impersonate myself",
    "start": "997916",
    "end": "1004416"
  },
  {
    "text": "as an association member. But for example, my mother, which is not very good with phone,",
    "start": "1004875",
    "end": "1011333"
  },
  {
    "text": "can be registered in the application as well, but I can manage for",
    "start": "1011958",
    "end": "1018250"
  },
  {
    "text": "my mother the data into the application. OK, so we authenticate by logging with email and",
    "start": "1018250",
    "end": "1025166"
  },
  {
    "text": "password and then we can impersonate members.",
    "start": "1025166",
    "end": "1030333"
  },
  {
    "text": "And then we need to have a product catalog.",
    "start": "1032916",
    "end": "1037458"
  },
  {
    "text": "Then we'll have a unique code, a product name, we can attach an image, maybe just one.",
    "start": "1042333",
    "end": "1048083"
  },
  {
    "text": "Starting describing the product, the unit of measure, find the product serial numbers,",
    "start": "1051166",
    "end": "1056541"
  },
  {
    "text": "and we're moving products by serial, we need to provide a serial as well. And then we have warehouses that can be",
    "start": "1057333",
    "end": "1064083"
  },
  {
    "text": "an actual physical location, a temporary event warehouse. And in the home of a member association,",
    "start": "1064083",
    "end": "1069208"
  },
  {
    "text": "we can register move into the world and etc. OK, so I think that this gives an idea of",
    "start": "1069791",
    "end": "1079375"
  },
  {
    "text": "what we want to build. And then maybe we want to get",
    "start": "1079375",
    "end": "1084500"
  },
  {
    "text": "stocks stocks by warehouse. OK, so I think that those are the major",
    "start": "1084500",
    "end": "1093833"
  },
  {
    "text": "requirements that I want. let's just save this. is fine.",
    "start": "1093833",
    "end": "1100791"
  },
  {
    "text": "OK. OK, so maybe we can",
    "start": "1101833",
    "end": "1107375"
  },
  {
    "text": "start doing some actual code.",
    "start": "1107375",
    "end": "1110125"
  },
  {
    "text": "OK, so to do all of these, we will",
    "start": "1115708",
    "end": "1121291"
  },
  {
    "text": "definitely require some Effect libraries. I think that we will use effort SQL effect schema.",
    "start": "1121291",
    "end": "1130083"
  },
  {
    "text": "indeed. Maybe even a Effect RPC. Maybe I'm not sure about that because I",
    "start": "1130083",
    "end": "1137000"
  },
  {
    "text": "would like to build something just to try out patterns But yeah, we'll see.",
    "start": "1137000",
    "end": "1143416"
  },
  {
    "text": "OK, so. Let's start building something.",
    "start": "1144833",
    "end": "1149583"
  },
  {
    "text": "OK, thanks to.",
    "start": "1150541",
    "end": "1152541"
  },
  {
    "text": "The different size, OK. So thanks to Maxwell, we",
    "start": "1158791",
    "end": "1164500"
  },
  {
    "text": "can do pnpm. Create.",
    "start": "1164500",
    "end": "1167041"
  },
  {
    "text": "Effect. Latest.",
    "start": "1170500",
    "end": "1174833"
  },
  {
    "text": "OK. OK, what is your project named? I will call this.",
    "start": "1183958",
    "end": "1191750"
  },
  {
    "text": "rsp-app",
    "start": "1192333",
    "end": "1193416"
  },
  {
    "text": "I want to create a template And I think that I will",
    "start": "1201458",
    "end": "1208750"
  },
  {
    "text": "start by using a monorepo I don't want a changeset for now.",
    "start": "1208750",
    "end": "1217916"
  },
  {
    "text": "Yeah. ESLint Yes indeed",
    "start": "1218625",
    "end": "1224625"
  },
  {
    "text": "effect github actions? Maybe not for now",
    "start": "1225000",
    "end": "1229125"
  },
  {
    "text": "OK. So now we move into our rsp-app And pnpm install",
    "start": "1230250",
    "end": "1237916"
  },
  {
    "text": "And while that's installing, we can open that.",
    "start": "1240833",
    "end": "1247000"
  },
  {
    "text": "rsp-app",
    "start": "1247875",
    "end": "1248250"
  },
  {
    "text": "So I think that we should start by creating some domain things.",
    "start": "1261500",
    "end": "1266958"
  },
  {
    "text": "OK, here we already have something sketch up.",
    "start": "1269625",
    "end": "1274666"
  },
  {
    "text": "Thanks to the create effect app.",
    "start": "1276416",
    "end": "1280791"
  },
  {
    "text": "But I think that I'll change things. I'll leave files for now.",
    "start": "1282458",
    "end": "1287291"
  },
  {
    "text": "This can be removed. Move to trash. And create something new.",
    "start": "1289458",
    "end": "1295916"
  },
  {
    "text": "OK, so I would like to define entities inside this kind of application.",
    "start": "1296750",
    "end": "1304208"
  },
  {
    "text": "The kind of entities that we'll have are kind of listed in here from the left.",
    "start": "1306541",
    "end": "1312166"
  },
  {
    "text": "So I want to have things like a product.",
    "start": "1314291",
    "end": "1321166"
  },
  {
    "text": "And we will define effect schema.",
    "start": "1325333",
    "end": "1335166"
  },
  {
    "text": "export const product ID. Maybe I should",
    "start": "1337625",
    "end": "1343041"
  },
  {
    "text": "increase the font size maybe.",
    "start": "1343041",
    "end": "1344666"
  },
  {
    "text": "Oh, yeah, I think that's better. OK, I want the product ID",
    "start": "1348125",
    "end": "1354583"
  },
  {
    "text": "to be a schema, UUID. pipe",
    "start": "1354583",
    "end": "1358541"
  },
  {
    "text": "schema annotation identifier. This is a product ID",
    "start": "1361041",
    "end": "1369333"
  },
  {
    "text": "Maybe we can do something more fancy. This is just the string. So we can do something like schema.",
    "start": "1385666",
    "end": "1392333"
  },
  {
    "text": "dot branded. And the brand.",
    "start": "1394916",
    "end": "1401375"
  },
  {
    "text": "And this something like. const product ID.",
    "start": "1402541",
    "end": "1407000"
  },
  {
    "text": "Symbol dot for product ID.",
    "start": "1413916",
    "end": "1420333"
  },
  {
    "text": "Let's go like this for now. OK.",
    "start": "1421375",
    "end": "1425791"
  },
  {
    "text": "Perfect. And now the product ID is a string",
    "start": "1427291",
    "end": "1433416"
  },
  {
    "text": "So we can also start defining a product.",
    "start": "1435000",
    "end": "1438250"
  },
  {
    "text": "Or maybe we can just keep a product ID.",
    "start": "1440666",
    "end": "1442666"
  },
  {
    "text": "Which is schema struct. And we'll have product ID.",
    "start": "1449250",
    "end": "1456750"
  },
  {
    "text": "And also, pipe schema dot ID.",
    "start": "1471166",
    "end": "1479000"
  },
  {
    "text": "annotations. identifier",
    "start": "1479750",
    "end": "1484541"
  },
  {
    "text": "This is our product. OK.",
    "start": "1484833",
    "end": "1488625"
  },
  {
    "text": "So this is a product. As we said, we have a product name.",
    "start": "1490750",
    "end": "1496875"
  },
  {
    "text": "We also need to have-- well, as a queue, we have a product ID.",
    "start": "1498041",
    "end": "1503958"
  },
  {
    "text": "Maybe we can start without. And maybe the queue we can define later.",
    "start": "1503958",
    "end": "1509875"
  },
  {
    "text": "But we have product name. We need to define an image and a unit of measure.",
    "start": "1510750",
    "end": "1518041"
  },
  {
    "text": "OK. So let's define unit of measure",
    "start": "1518625",
    "end": "1525875"
  },
  {
    "text": "OK. And we will do something like-- the thing that we did--",
    "start": "1527958",
    "end": "1533041"
  },
  {
    "text": "unit of measure.",
    "start": "1535875",
    "end": "1538208"
  },
  {
    "text": "unit of measure.",
    "start": "1542708",
    "end": "1544500"
  },
  {
    "text": "Unit of measure. Oh, no. Maybe we-- yeah.",
    "start": "1547958",
    "end": "1554666"
  },
  {
    "text": "Unit of measure ID.",
    "start": "1554708",
    "end": "1555791"
  },
  {
    "text": "Unit of measure ID, type ID. OK.",
    "start": "1562916",
    "end": "1565833"
  },
  {
    "text": "Oh, right. OK. I was complaining.",
    "start": "1575333",
    "end": "1580541"
  },
  {
    "text": "Why are you saying that that's not used? Well, this isn't it. OK. This is theunit of measure",
    "start": "1581125",
    "end": "1586916"
  },
  {
    "text": "a nonepmtystring was better.",
    "start": "1619125",
    "end": "1620583"
  },
  {
    "text": "Maybe that was as well for the brother, NonEmptyString",
    "start": "1629916",
    "end": "1633500"
  },
  {
    "text": "And then pipe.",
    "start": "1638833",
    "end": "1640750"
  },
  {
    "text": "OK. So now in the brothers, we can import.",
    "start": "1654125",
    "end": "1659833"
  },
  {
    "text": "And now we think as unit of measure from",
    "start": "1661916",
    "end": "1666833"
  },
  {
    "text": "unit of measure And we'll just say that in the unit of measure ID",
    "start": "1669333",
    "end": "1674875"
  },
  {
    "text": "OK. needs to be exported.",
    "start": "1682708",
    "end": "1688125"
  },
  {
    "text": "Otherwise, TypeScript will complain that cannot access that.",
    "start": "1689000",
    "end": "1694583"
  },
  {
    "text": "Oh well. And now we have defined our product.",
    "start": "1696041",
    "end": "1698833"
  },
  {
    "text": "Now that we have our product, we can define a member.",
    "start": "1701083",
    "end": "1709208"
  },
  {
    "text": "And we'll say something like import",
    "start": "1709250",
    "end": "1720791"
  },
  {
    "text": "everything as schema. From effect schema, schema.",
    "start": "1720791",
    "end": "1726875"
  },
  {
    "text": "And we'll say const member ID type ID",
    "start": "1731416",
    "end": "1736666"
  },
  {
    "text": "equals symbol",
    "start": "1736666",
    "end": "1739583"
  },
  {
    "text": "memberID And we will say that this needs to be exported.",
    "start": "1743250",
    "end": "1751000"
  },
  {
    "text": "And we also say export. const member ID.",
    "start": "1752333",
    "end": "1757208"
  },
  {
    "text": "I will basically use UUID for everything as primary key.",
    "start": "1759875",
    "end": "1765791"
  },
  {
    "text": "And we will also say schema.annotations. identifier, member ID.",
    "start": "1767750",
    "end": "1774375"
  },
  {
    "text": "OK. And we'll also define a member.",
    "start": "1776583",
    "end": "1779916"
  },
  {
    "text": "schema.struct member ID.",
    "start": "1782916",
    "end": "1788625"
  },
  {
    "text": "We'll need a schema. Well, schema, sorry. member ID.",
    "start": "1791250",
    "end": "1797625"
  },
  {
    "text": "And we'll have name as schema. Non-empty string.",
    "start": "1799333",
    "end": "1805833"
  },
  {
    "text": "Surname. Non-empty string.",
    "start": "1807708",
    "end": "1812166"
  },
  {
    "text": "And usually, that's OK. Maybe you can ask also for the birthday.",
    "start": "1813666",
    "end": "1821333"
  },
  {
    "text": "date Let's export type member",
    "start": "1825875",
    "end": "1831250"
  },
  {
    "text": "schema.schema.type typeoff member",
    "start": "1831666",
    "end": "1838000"
  },
  {
    "text": "we can also schema. annotations",
    "start": "1842333",
    "end": "1847250"
  },
  {
    "text": "identifier",
    "start": "1848625",
    "end": "1849500"
  },
  {
    "text": "So back to our drawing board. We have defined a product, a member.",
    "start": "1859291",
    "end": "1863875"
  },
  {
    "text": "And maybe we can also define a warehouse.",
    "start": "1866458",
    "end": "1870458"
  },
  {
    "text": "Where?",
    "start": "1874000",
    "end": "1874208"
  },
  {
    "text": "So we have defined that as a requirement,",
    "start": "1882208",
    "end": "1889208"
  },
  {
    "text": "we want to have different kind of warehouses. We want physical, occasional, temporary,",
    "start": "1889416",
    "end": "1895458"
  },
  {
    "text": "or home of any member. So maybe we can express that into the warehouse.",
    "start": "1895833",
    "end": "1902375"
  },
  {
    "text": "as a type. So we need to import again everything as schema from--",
    "start": "1902375",
    "end": "1908166"
  },
  {
    "text": "So we want to export const",
    "start": "1910916",
    "end": "1915000"
  },
  {
    "text": "werehouse ID will be something like schema.uid. pipe. As you can see, all of these things",
    "start": "1922500",
    "end": "1930958"
  },
  {
    "text": "are pretty repetitive. But in the beginning, everything is.",
    "start": "1930958",
    "end": "1935625"
  },
  {
    "text": "So warehouse ID",
    "start": "1936583",
    "end": "1939208"
  },
  {
    "text": "And maybe also we want to create a dashboard cost for what else ID type ID.",
    "start": "1942000",
    "end": "1949416"
  },
  {
    "text": "Symbol.for.",
    "start": "1951666",
    "end": "1952750"
  },
  {
    "text": "Oh yeah, effect is in human intelligence instead of artificial. Oh yeah.",
    "start": "1962958",
    "end": "1966958"
  },
  {
    "text": "So I want a warehouse. It should be struct. We have, guess what, our warehouse ID.",
    "start": "1975250",
    "end": "1982666"
  },
  {
    "text": "But I should. Should I buy the effects.ceo domain and just put my face on the index base?",
    "start": "1988791",
    "end": "1994250"
  },
  {
    "text": "Oh yeah, Dillon, you should. You should indeed. You should indeed.",
    "start": "1994250",
    "end": "1998666"
  },
  {
    "text": "OK, warehouse ID. Name. We want a name for the warehouse.",
    "start": "2000833",
    "end": "2008625"
  },
  {
    "text": "There will be just a description. Non empty string. I also want something like",
    "start": "2009083",
    "end": "2019625"
  },
  {
    "text": "owner ID that will be a member.",
    "start": "2019625",
    "end": "2026958"
  },
  {
    "text": "Because as we said, we have warehouses that are actually the home of",
    "start": "2027625",
    "end": "2033666"
  },
  {
    "text": "any member of the association. So maybe we want something the owner",
    "start": "2033666",
    "end": "2039666"
  },
  {
    "text": "id to be schema dot option. And we want maybe import",
    "start": "2039791",
    "end": "2046791"
  },
  {
    "text": "everything as memeber",
    "start": "2046791",
    "end": "2048791"
  },
  {
    "text": "For example, something that I would like to have, I don't know it because I didn't reinvest the time in looking",
    "start": "2055958",
    "end": "2061625"
  },
  {
    "text": "for it. I don't know if it's possible for the auto completion and auto imports of the TypeScript LSP",
    "start": "2061833",
    "end": "2069916"
  },
  {
    "text": "to always prefer this kind of style of inputs.",
    "start": "2070750",
    "end": "2074416"
  },
  {
    "text": "And that is because basically I got used to this style that I like most.",
    "start": "2077166",
    "end": "2082791"
  },
  {
    "text": "I prefer having long lanes. I don't care too much",
    "start": "2083666",
    "end": "2088875"
  },
  {
    "text": "about treeshakebility because that could be pretty dull.",
    "start": "2088875",
    "end": "2092541"
  },
  {
    "text": "Because if I do something like, let's say that I want to do something like, close a equals hash map.",
    "start": "2093916",
    "end": "2100583"
  },
  {
    "text": "I don't-- I do not want to import hash map from effect. I want import everything as hash map from effect hash map.",
    "start": "2102750",
    "end": "2109541"
  },
  {
    "text": "OK, so I want the member.",
    "start": "2111791",
    "end": "2112958"
  },
  {
    "text": "So now a warehouse can be defined as well that have a name, and optionally, if the warehouse is",
    "start": "2118083",
    "end": "2124833"
  },
  {
    "text": "home of someone, I can define that optionally that is the member that is",
    "start": "2126166",
    "end": "2132250"
  },
  {
    "text": "responsible for that warehouse.",
    "start": "2132250",
    "end": "2134041"
  },
  {
    "text": "I want the schema. annotations, identifier warehouse.",
    "start": "2138291",
    "end": "2144250"
  },
  {
    "text": "OK. So we have a member a products, a unit of measure",
    "start": "2148291",
    "end": "2153708"
  },
  {
    "text": "and a warehouse. OK. So those are basically the basic domain",
    "start": "2154416",
    "end": "2162750"
  },
  {
    "text": "objects I want to have.",
    "start": "2162833",
    "end": "2166958"
  },
  {
    "text": "And regarding the movements, I want to address that later",
    "start": "2168666",
    "end": "2173208"
  },
  {
    "text": "after we have the infrastructure for defining products and whatever, because",
    "start": "2173750",
    "end": "2182166"
  },
  {
    "text": "I think that before we need to build the UI and the server code just to managing",
    "start": "2182166",
    "end": "2188041"
  },
  {
    "text": "and defining and creating products, once we have that working, then we can move into all of the rest.",
    "start": "2188291",
    "end": "2196916"
  },
  {
    "text": "We will also do basic registration and authentication ourself, as I said.",
    "start": "2198000",
    "end": "2202666"
  },
  {
    "text": "So before tackling that, will take a while.",
    "start": "2204083",
    "end": "2206333"
  },
  {
    "text": "Let's maybe pick a little about how I want to structure the application.",
    "start": "2209416",
    "end": "2214083"
  },
  {
    "text": "So I would like to take an approach where everything",
    "start": "2216375",
    "end": "2222458"
  },
  {
    "text": "is mostly defined by schemas, by data. I want to define kind of",
    "start": "2222750",
    "end": "2229916"
  },
  {
    "text": "requests going from the client to the server.",
    "start": "2229916",
    "end": "2233166"
  },
  {
    "text": "I'll have basically, I think, two different kind of requests.",
    "start": "2236791",
    "end": "2240708"
  },
  {
    "text": "I will have comments saying to going to a server,",
    "start": "2244458",
    "end": "2248750"
  },
  {
    "text": "and queries going to the server.",
    "start": "2250041",
    "end": "2254208"
  },
  {
    "text": "So we can imagine that we will add our small react native",
    "start": "2257083",
    "end": "2264250"
  },
  {
    "text": "app with effect.",
    "start": "2264250",
    "end": "2267583"
  },
  {
    "text": "And this application will speak with a Node.js http",
    "start": "2271708",
    "end": "2285541"
  },
  {
    "text": "API server.",
    "start": "2287916",
    "end": "2289875"
  },
  {
    "text": "And we will indeed have some kind of storage involved.",
    "start": "2293750",
    "end": "2298916"
  },
  {
    "text": "So we'll have here, SQL storage.",
    "start": "2300708",
    "end": "2308000"
  },
  {
    "text": "Most of those will be on the server. This will be on the client.",
    "start": "2311916",
    "end": "2316416"
  },
  {
    "text": "And I would like to picture this as something where",
    "start": "2318583",
    "end": "2326833"
  },
  {
    "text": "I don't care too much about the shape of the actual exposed HTTP",
    "start": "2329458",
    "end": "2337000"
  },
  {
    "text": "APIs. Maybe more than HTTP API server, it will be",
    "start": "2337250",
    "end": "2343333"
  },
  {
    "text": "more of an RPC server. So I believe we can use Effect RPC, for example.",
    "start": "2343333",
    "end": "2349416"
  },
  {
    "text": "But I want the flow of any request to be in the shape of--",
    "start": "2353458",
    "end": "2360416"
  },
  {
    "text": "let's say that the app does something.",
    "start": "2361000",
    "end": "2366583"
  },
  {
    "text": "So for example, the app changes a product name. So we'll trigger a request",
    "start": "2367416",
    "end": "2373375"
  },
  {
    "text": "saying change product name",
    "start": "2373375",
    "end": "2377833"
  },
  {
    "text": "to the server. And now that this request goes from the app to the server,",
    "start": "2380041",
    "end": "2389250"
  },
  {
    "text": "the server will handle the request. And now let's say that in the screen,",
    "start": "2390750",
    "end": "2397333"
  },
  {
    "text": "we already have the-- you already have, for example, opens the specific product",
    "start": "2397375",
    "end": "2404041"
  },
  {
    "text": "that we are editing. I want that to be updated as soon as the server",
    "start": "2404166",
    "end": "2412125"
  },
  {
    "text": "recives the data. So I could do that, basically, in two ways.",
    "start": "2412958",
    "end": "2417833"
  },
  {
    "text": "I could say that when I change a product name,",
    "start": "2419333",
    "end": "2422916"
  },
  {
    "text": "I send a message to the server. And then I immediately",
    "start": "2424833",
    "end": "2430208"
  },
  {
    "text": "ask back for the entity, saying, for example, get product name.",
    "start": "2430208",
    "end": "2440708"
  },
  {
    "text": "No, I don't like that. I like it more when you allow me to rotate the text.",
    "start": "2444125",
    "end": "2450083"
  },
  {
    "text": "Get product name.",
    "start": "2450708",
    "end": "2452958"
  },
  {
    "text": "So we change the product name. And then we need somehow to trigger from the app",
    "start": "2456916",
    "end": "2463541"
  },
  {
    "text": "the request of data to get updated data. Because now that we have changed the product name,",
    "start": "2464208",
    "end": "2470083"
  },
  {
    "text": "the data is different. So the server may have, for example,",
    "start": "2470083",
    "end": "2474333"
  },
  {
    "text": "refused to update the product for some reason, or the product may have been changed by someone else.",
    "start": "2475208",
    "end": "2480958"
  },
  {
    "text": "So we need to trigger that. And one thing I thought is that maybe we can have either a",
    "start": "2482166",
    "end": "2494083"
  },
  {
    "text": "WebSocket or either an event stream",
    "start": "2494083",
    "end": "2499750"
  },
  {
    "text": "that once the change product happened on the server,",
    "start": "2501416",
    "end": "2507416"
  },
  {
    "text": "it sends back something like, I don't know, entity changed.",
    "start": "2508708",
    "end": "2519000"
  },
  {
    "text": "And we also say the entity ID. Entity 12 changed.",
    "start": "2521333",
    "end": "2526583"
  },
  {
    "text": "So that way, when we get the",
    "start": "2532250",
    "end": "2538041"
  },
  {
    "text": "request in our application, if given the message, we are able to know",
    "start": "2538041",
    "end": "2542875"
  },
  {
    "text": "which is the entity that is involved into that request.",
    "start": "2543166",
    "end": "2546916"
  },
  {
    "text": "We can get that into our cache, into the alternative auth.",
    "start": "2548750",
    "end": "2552791"
  },
  {
    "text": "When after that, event source stream says that that specific entity we are",
    "start": "2555041",
    "end": "2561416"
  },
  {
    "text": "rendering on the screen has ceased, we can then trigger a request to get updated data.",
    "start": "2561416",
    "end": "2568083"
  },
  {
    "text": "That way, we get something that is almost always live.",
    "start": "2569583",
    "end": "2576208"
  },
  {
    "text": "So if, for example, you are in the screen of changing something about the product, you are the screen that you see the",
    "start": "2576666",
    "end": "2581833"
  },
  {
    "text": "information of the product, and some other user changes the product, you get free live",
    "start": "2581833",
    "end": "2587541"
  },
  {
    "text": "updates, real-time updates. So you will see the updated screen with the new product",
    "start": "2587541",
    "end": "2592875"
  },
  {
    "text": "as soon as the other user changes. And I want to use an event",
    "start": "2593041",
    "end": "2599083"
  },
  {
    "text": "source stream instead of actually using a WebSocket.",
    "start": "2599083",
    "end": "2603291"
  },
  {
    "text": "Just because that's easier, I don't want to use the write side of the WebSocket.",
    "start": "2605250",
    "end": "2610125"
  },
  {
    "text": "I want us to use the wait side just to stream back these kind of definitions",
    "start": "2610708",
    "end": "2615500"
  },
  {
    "text": "about the entity has changed. So that means that we have",
    "start": "2615791",
    "end": "2621625"
  },
  {
    "text": "two different kind of requests that we can send to our server. You have the right ones without comments.",
    "start": "2621625",
    "end": "2630875"
  },
  {
    "text": "And we will mark those-- add, for example.",
    "start": "2632791",
    "end": "2636916"
  },
  {
    "text": "And we will get the queries with the blue.",
    "start": "2639625",
    "end": "2644083"
  },
  {
    "text": "So I want to define in a really easy way messages that",
    "start": "2645333",
    "end": "2650916"
  },
  {
    "text": "can be both comments or queries.",
    "start": "2650916",
    "end": "2653041"
  },
  {
    "text": "So I think that we need to first define that concept I",
    "start": "2656833",
    "end": "2661666"
  },
  {
    "text": "named before or an entity, an aggregate.",
    "start": "2662625",
    "end": "2666208"
  },
  {
    "text": "So we could say something like aggregate root, for example.",
    "start": "2669208",
    "end": "2676125"
  },
  {
    "text": "And I want to try out this approach because right now at work we have a production application",
    "start": "2678333",
    "end": "2683000"
  },
  {
    "text": "where everything works, but we don't have basically this stream.",
    "start": "2684083",
    "end": "2688083"
  },
  {
    "text": "And the other things are basically the same that I described. The only thing that we don't have is these entity change",
    "start": "2689916",
    "end": "2695916"
  },
  {
    "text": "with the aggregate ID stream. And that means that every time we",
    "start": "2695916",
    "end": "2701416"
  },
  {
    "text": "see that we are sending a write request over the wire, what happens is that every get request",
    "start": "2702166",
    "end": "2709583"
  },
  {
    "text": "gets performed again. And that's the unfortable limitation of the back end",
    "start": "2709583",
    "end": "2714875"
  },
  {
    "text": "because at work we have a dotnet back end, unfortunately We will slowly move",
    "start": "2714875",
    "end": "2721041"
  },
  {
    "text": "that into effect next year. But yeah, unfortunately",
    "start": "2721041",
    "end": "2726083"
  },
  {
    "text": "right now it's dotnet code and they don't support having that kind of streams.",
    "start": "2726083",
    "end": "2732666"
  },
  {
    "text": "So we just stuck with whenever we send the right command,",
    "start": "2733916",
    "end": "2738583"
  },
  {
    "text": "when we get an OK message received by a server, we trigger immediately",
    "start": "2739625",
    "end": "2745125"
  },
  {
    "text": "an update of the cache of all the messages. And here we can use effect request resolver",
    "start": "2745125",
    "end": "2751791"
  },
  {
    "text": "to resolve all of this in user and effect cache. Yeah, that could work.",
    "start": "2752000",
    "end": "2757166"
  },
  {
    "text": "OK, so I need to define an aggregate root.",
    "start": "2758500",
    "end": "2761333"
  },
  {
    "text": "And I want an aggregate root to be something",
    "start": "2769916",
    "end": "2771541"
  },
  {
    "text": "which is a string",
    "start": "2775666",
    "end": "2778208"
  },
  {
    "text": "And the aggregate root now has basically",
    "start": "2782291",
    "end": "2786750"
  },
  {
    "text": "And I will use this interface, I will implement this interface by all the kind of",
    "start": "2794833",
    "end": "2801041"
  },
  {
    "text": "aggregate that we will have in our application. Member aggregate, product aggregate, stock aggregate,",
    "start": "2801041",
    "end": "2807625"
  },
  {
    "text": "or whatever. And now let's see.",
    "start": "2807625",
    "end": "2814750"
  },
  {
    "text": "Let me move this box behind. An aggregate root.",
    "start": "2815916",
    "end": "2820000"
  },
  {
    "text": "And we need to construct aggregate root.",
    "start": "2821083",
    "end": "2824958"
  },
  {
    "text": "Maybe we can do something like const aggregate roots type ID.",
    "start": "2826416",
    "end": "2833125"
  },
  {
    "text": "Symbol for aggregate root.",
    "start": "2834375",
    "end": "2838875"
  },
  {
    "text": "And then we could say that",
    "start": "2841875",
    "end": "2845541"
  },
  {
    "text": "Congregate root",
    "start": "2864125",
    "end": "2866041"
  },
  {
    "text": "that's fine, that's nice. And then I want to maybe",
    "start": "2892958",
    "end": "2899166"
  },
  {
    "text": "expose some constructor. Okay, so maybe, yeah, we can",
    "start": "2899166",
    "end": "2907083"
  },
  {
    "text": "also export function.",
    "start": "2907083",
    "end": "2909500"
  },
  {
    "text": "and these will return",
    "start": "2937416",
    "end": "2939916"
  },
  {
    "text": "these will return an aggregate root of aggregate root name",
    "start": "2949416",
    "end": "2955625"
  },
  {
    "text": "so here we are missing aggregate root name we need to define",
    "start": "2957458",
    "end": "2964083"
  },
  {
    "text": "ok, so this way we can create, for",
    "start": "2989416",
    "end": "2994708"
  },
  {
    "text": "example, let's create scratch, yes",
    "start": "2994708",
    "end": "2999750"
  },
  {
    "text": "you can do something like import everything there's an aggregate root from",
    "start": "3001416",
    "end": "3008416"
  },
  {
    "text": "the root, I will say for example, product aggregate",
    "start": "3009416",
    "end": "3014750"
  },
  {
    "text": "ok, so this is nicely typed I will say that it's an",
    "start": "3028416",
    "end": "3034750"
  },
  {
    "text": "aggregate root of type products and as we said, we have",
    "start": "3034750",
    "end": "3043375"
  },
  {
    "text": "two different kinds of we have two different kinds of messages",
    "start": "3043375",
    "end": "3050625"
  },
  {
    "text": "that we will send from the app to the server, which are comments and queries",
    "start": "3050625",
    "end": "3055416"
  },
  {
    "text": "maybe I can create a base schema that goes for both",
    "start": "3058208",
    "end": "3065625"
  },
  {
    "text": "the command and queries and maybe I can call",
    "start": "3065625",
    "end": "3071875"
  },
  {
    "text": "that aggregate message maybe",
    "start": "3071875",
    "end": "3076458"
  },
  {
    "text": "and I want this to be basically a schema",
    "start": "3079666",
    "end": "3084333"
  },
  {
    "text": "let's start by schema dot class",
    "start": "3113333",
    "end": "3115416"
  },
  {
    "text": "and then we move on from that okay, so all of those messages I think",
    "start": "3123541",
    "end": "3129500"
  },
  {
    "text": "that will have some common properties",
    "start": "3129500",
    "end": "3131833"
  },
  {
    "text": "okay and I was saying that I want some common",
    "start": "3144125",
    "end": "3149625"
  },
  {
    "text": "properties on all the messages I want, for example, ID an ID will be maybe something like",
    "start": "3149625",
    "end": "3156625"
  },
  {
    "text": "And I also want the message to know which is the",
    "start": "3170500",
    "end": "3176291"
  },
  {
    "text": "entity that this message is stated to",
    "start": "3177625",
    "end": "3182500"
  },
  {
    "text": "I don't want to have different endpoints for its aggregate",
    "start": "3183625",
    "end": "3188125"
  },
  {
    "text": "for the reason I described before that if every message contains the aggregate ID",
    "start": "3189625",
    "end": "3196500"
  },
  {
    "text": "it says \"target2\" that means that I can do cache validation immediately",
    "start": "3196625",
    "end": "3202875"
  },
  {
    "text": "because I know which are the entries that I need to validate so yeah, we can say something like",
    "start": "3202875",
    "end": "3208750"
  },
  {
    "text": "\"aggregate root\"",
    "start": "3208750",
    "end": "3210208"
  },
  {
    "text": "maybe no, let's start with \"NonEmptyString\" okay",
    "start": "3225916",
    "end": "3229625"
  },
  {
    "text": "okay, so we'll have an ID, an aggregate root and an aggregate ID",
    "start": "3232375",
    "end": "3239333"
  },
  {
    "text": "and that's it by the aggregate message",
    "start": "3240625",
    "end": "3243916"
  },
  {
    "text": "so let's start also to sketch out the aggregate query",
    "start": "3246625",
    "end": "3252583"
  },
  {
    "text": "so let's go back to the scratch pad and seek for the kind of",
    "start": "3256083",
    "end": "3261791"
  },
  {
    "text": "API I would love to have I would love to have some APIs that works like",
    "start": "3261791",
    "end": "3267416"
  },
  {
    "text": "export class let's say change product name",
    "start": "3267791",
    "end": "3274833"
  },
  {
    "text": "extends",
    "start": "3275791",
    "end": "3276291"
  },
  {
    "text": "I think that I will need to pass again the class name",
    "start": "3283000",
    "end": "3289333"
  },
  {
    "text": "then I would like to say something like the tag is",
    "start": "3291791",
    "end": "3296458"
  },
  {
    "text": "change product name and the payload",
    "start": "3297625",
    "end": "3303750"
  },
  {
    "text": "for this message is something like",
    "start": "3304625",
    "end": "3308250"
  },
  {
    "text": "a new name and the schema.",
    "start": "3310583",
    "end": "3314791"
  },
  {
    "text": "non the empty string yeah, I definitely need to",
    "start": "3316625",
    "end": "3321833"
  },
  {
    "text": "code that code action last okay",
    "start": "3321833",
    "end": "3327125"
  },
  {
    "text": "for comments we will have also success type let maybe schema.Boolean",
    "start": "3329833",
    "end": "3337666"
  },
  {
    "text": "and failure type that can be like schema.never",
    "start": "3340625",
    "end": "3347916"
  },
  {
    "text": "in case that action cannot change this is the kind of API that I would like to have",
    "start": "3350166",
    "end": "3355500"
  },
  {
    "text": "we don't have those at the moment but I can see that this way",
    "start": "3355625",
    "end": "3361375"
  },
  {
    "text": "I can define comments for my entities",
    "start": "3363791",
    "end": "3370333"
  },
  {
    "text": "and maybe I can do kind of the same for the query",
    "start": "3370333",
    "end": "3375791"
  },
  {
    "text": "if that's all you need, could you just use a standard request from schema?",
    "start": "3380625",
    "end": "3386291"
  },
  {
    "text": "well, I could use just a tagged request from schema",
    "start": "3387333",
    "end": "3394583"
  },
  {
    "text": "but the thing is that I would like to also be",
    "start": "3395625",
    "end": "3401666"
  },
  {
    "text": "able to tag those such as",
    "start": "3401666",
    "end": "3407250"
  },
  {
    "text": "we know by the data type that is query or a comment",
    "start": "3407666",
    "end": "3415125"
  },
  {
    "text": "and I want that information to not be passed over the wire",
    "start": "3415625",
    "end": "3421416"
  },
  {
    "text": "so that would be one information that needs to be attached",
    "start": "3421625",
    "end": "3426833"
  },
  {
    "text": "to the class so what Maxwell is saying",
    "start": "3427625",
    "end": "3433333"
  },
  {
    "text": "for people that are not used by using effect is that",
    "start": "3433333",
    "end": "3438208"
  },
  {
    "text": "schema already has something like export class change product name",
    "start": "3438625",
    "end": "3444375"
  },
  {
    "text": "with schema that goes like extends Schema.TaggedRequest",
    "start": "3445625",
    "end": "3452666"
  },
  {
    "text": "schema",
    "start": "3452666",
    "end": "3453500"
  },
  {
    "text": "let me just comment the other ones just to let you show what",
    "start": "3470083",
    "end": "3475041"
  },
  {
    "text": "Maxwell is saying is that you can do things like",
    "start": "3475916",
    "end": "3481250"
  },
  {
    "text": "effect schema we have schema.tagged request",
    "start": "3481583",
    "end": "3488083"
  },
  {
    "text": "and then we pass in a tag that we want to use, that could be this one",
    "start": "3488083",
    "end": "3494583"
  },
  {
    "text": "and then we define which is the payload",
    "start": "3496958",
    "end": "3499375"
  },
  {
    "text": "for example new name schema.NonEmptyString",
    "start": "3502708",
    "end": "3510708"
  },
  {
    "text": "and success will be schema.boolean and failure will be",
    "start": "3512500",
    "end": "3518833"
  },
  {
    "text": "schema.never ok, so what Maxwell is saying that",
    "start": "3518916",
    "end": "3526000"
  },
  {
    "text": "basically this API I am trying to accomplish is almost the same of this one",
    "start": "3527500",
    "end": "3533583"
  },
  {
    "text": "the only thing that changes is that here we are missing",
    "start": "3534916",
    "end": "3541208"
  },
  {
    "text": "the additional information we want to have for all messages that we have defined before",
    "start": "3541750",
    "end": "3547916"
  },
  {
    "text": "that means that to do the same thing",
    "start": "3547916",
    "end": "3552375"
  },
  {
    "text": "we would need to use something like",
    "start": "3554250",
    "end": "3557708"
  },
  {
    "text": "and then",
    "start": "3566750",
    "end": "3568250"
  },
  {
    "text": "this is actually",
    "start": "3571916",
    "end": "3573708"
  },
  {
    "text": "products and this would be",
    "start": "3577416",
    "end": "3582708"
  },
  {
    "text": "the same thing by just using effect schema I want to create",
    "start": "3582750",
    "end": "3588750"
  },
  {
    "text": "an API that stays on top of that just to don't have",
    "start": "3588750",
    "end": "3594500"
  },
  {
    "text": "the thing of defining those fields every time but",
    "start": "3595625",
    "end": "3600750"
  },
  {
    "text": "now that you are saying that I realize",
    "start": "3600750",
    "end": "3606375"
  },
  {
    "text": "that I could do something fancy",
    "start": "3608750",
    "end": "3612958"
  },
  {
    "text": "and maybe do something like dot dot",
    "start": "3616625",
    "end": "3621833"
  },
  {
    "text": "product aggregate dot fields",
    "start": "3622000",
    "end": "3625666"
  },
  {
    "text": "because what we did here we can extract that",
    "start": "3629750",
    "end": "3636333"
  },
  {
    "text": "the infrastructure like this and then we can do fields",
    "start": "3640541",
    "end": "3646708"
  },
  {
    "text": "that could do the same thing and we can move the construction of this one",
    "start": "3651750",
    "end": "3658208"
  },
  {
    "text": "into the aggregate root constructor",
    "start": "3658750",
    "end": "3663333"
  },
  {
    "text": "in here and we can say something like",
    "start": "3667750",
    "end": "3674583"
  },
  {
    "text": "const message fields",
    "start": "3678750",
    "end": "3682375"
  },
  {
    "text": "ok and we need to import schema",
    "start": "3684750",
    "end": "3687666"
  },
  {
    "text": "we need also to say that",
    "start": "3699750",
    "end": "3705791"
  },
  {
    "text": "the aggregate root also contains a field name message fields",
    "start": "3706041",
    "end": "3712375"
  },
  {
    "text": "metadata and that metadata fields",
    "start": "3714458",
    "end": "3723416"
  },
  {
    "text": "is made from aggregate root metadata",
    "start": "3723416",
    "end": "3729458"
  },
  {
    "text": "fields of aggregate root name now we need to define",
    "start": "3729458",
    "end": "3735958"
  },
  {
    "text": "this type",
    "start": "3735958",
    "end": "3738125"
  },
  {
    "text": "this of aggregate root name",
    "start": "3742625",
    "end": "3746291"
  },
  {
    "text": "equals we have ID which is type of",
    "start": "3749083",
    "end": "3754333"
  },
  {
    "text": "schema.UUID and then aggregate root",
    "start": "3754875",
    "end": "3760875"
  },
  {
    "text": "schema tag aggregate",
    "start": "3761750",
    "end": "3764583"
  },
  {
    "text": "aggregate root name",
    "start": "3767750",
    "end": "3769333"
  },
  {
    "text": "string ok and we name the metadata fields",
    "start": "3778083",
    "end": "3784708"
  },
  {
    "text": "so metadata fields",
    "start": "3785750",
    "end": "3788958"
  },
  {
    "text": "and schema.tag or",
    "start": "3792750",
    "end": "3795500"
  },
  {
    "text": "ok ok we're up into something now we can do",
    "start": "3799583",
    "end": "3807250"
  },
  {
    "text": "aggregate dot metadata fields",
    "start": "3811041",
    "end": "3813750"
  },
  {
    "text": "and what are you complaining about oh i passed something in that is not",
    "start": "3816541",
    "end": "3822458"
  },
  {
    "text": "an actual schema",
    "start": "3822750",
    "end": "3826041"
  },
  {
    "text": "i don't need that one ok ok",
    "start": "3840041",
    "end": "3844916"
  },
  {
    "text": "ok we're up into something ok that means that if i try to use",
    "start": "3845750",
    "end": "3853250"
  },
  {
    "text": "the make constructor make",
    "start": "3853250",
    "end": "3858375"
  },
  {
    "text": "ok ok the new name is required the ID is required",
    "start": "3860375",
    "end": "3866750"
  },
  {
    "text": "the aggregate root is not required because will be automatically filled with",
    "start": "3866750",
    "end": "3872458"
  },
  {
    "text": "products and products only yeah and the aggregate ID is what i want",
    "start": "3872875",
    "end": "3878416"
  },
  {
    "text": "to say so if i wanted to change a product name with say new",
    "start": "3878416",
    "end": "3884833"
  },
  {
    "text": "product and will say that the ID of the message is message",
    "start": "3884833",
    "end": "3891041"
  },
  {
    "text": "and we will also see that the aggregate ID is",
    "start": "3892750",
    "end": "3898625"
  },
  {
    "text": "product ABC",
    "start": "3898750",
    "end": "3902958"
  },
  {
    "text": "yeah that could work thanks for the suggestion Maxwell that could work",
    "start": "3909750",
    "end": "3915166"
  },
  {
    "text": "definitely could work the only thing",
    "start": "3916458",
    "end": "3921083"
  },
  {
    "text": "that the only thing is that",
    "start": "3922666",
    "end": "3926750"
  },
  {
    "text": "may be additionally required is that",
    "start": "3930458",
    "end": "3935625"
  },
  {
    "text": "that way i do not have by just knowing that",
    "start": "3936916",
    "end": "3942875"
  },
  {
    "text": "i do not know if this is a query for a command",
    "start": "3942875",
    "end": "3949291"
  },
  {
    "text": "i need to attach",
    "start": "3950750",
    "end": "3953708"
  },
  {
    "text": "value just into the runtime type that says this message is",
    "start": "3955916",
    "end": "3963416"
  },
  {
    "text": "a query or this message is but other ways",
    "start": "3964750",
    "end": "3970500"
  },
  {
    "text": "that could definitely work it is not so different from",
    "start": "3970750",
    "end": "3976000"
  },
  {
    "text": "the api I envision it is very very similar and it is",
    "start": "3976000",
    "end": "3982958"
  },
  {
    "text": "also more easier yeah that could work",
    "start": "3983250",
    "end": "3989250"
  },
  {
    "text": "definitely definitely",
    "start": "3989750",
    "end": "3993750"
  },
  {
    "text": "and the only thing that we need to find a way to attach is as i said a way to tell",
    "start": "3996833",
    "end": "4002958"
  },
  {
    "text": "each of these tag requests here is a query or a comment",
    "start": "4002958",
    "end": "4009416"
  },
  {
    "text": "but yeah because could be something like",
    "start": "4010750",
    "end": "4016458"
  },
  {
    "text": "a static message type",
    "start": "4016625",
    "end": "4020250"
  },
  {
    "text": "query let's say that this is the most kind of absolute simple thing that we can do",
    "start": "4022625",
    "end": "4029333"
  },
  {
    "text": "but yeah i like",
    "start": "4031208",
    "end": "4036458"
  },
  {
    "text": "this one more in kind of being more short and more explicit but i like this one more",
    "start": "4037208",
    "end": "4044541"
  },
  {
    "text": "in terms of being more effect standard not something",
    "start": "4044541",
    "end": "4049791"
  },
  {
    "text": "completely custom so nothing some that won't require any",
    "start": "4050208",
    "end": "4055875"
  },
  {
    "text": "any for example type level magic to to get the type things right",
    "start": "4056208",
    "end": "4062666"
  },
  {
    "text": "because that would have required that as the schema target request here",
    "start": "4063250",
    "end": "4070625"
  },
  {
    "text": "can we .pipe? can we .py",
    "start": "4082791",
    "end": "4085125"
  },
  {
    "text": "i am thinking something",
    "start": "4097625",
    "end": "4101375"
  },
  {
    "text": "because",
    "start": "4107208",
    "end": "4108041"
  },
  {
    "text": "Maybe I have something that goes like for function pass a function yeah i could just use a notation",
    "start": "4113875",
    "end": "4125166"
  },
  {
    "text": "that is the thing that i was thinking yeah",
    "start": "4125166",
    "end": "4129583"
  },
  {
    "text": "is that the i could use an annotation just to do that yeah because",
    "start": "4132375",
    "end": "4138666"
  },
  {
    "text": "i the only thing that concerns me about using annotations is that",
    "start": "4138666",
    "end": "4143625"
  },
  {
    "text": "i do not have type level information about the thing being a comment",
    "start": "4144208",
    "end": "4150208"
  },
  {
    "text": "or a query. That is the only thing that concerns me",
    "start": "4150208",
    "end": "4155208"
  },
  {
    "text": "the thing that i was about to try something like make query",
    "start": "4156000",
    "end": "4160666"
  },
  {
    "text": "of A let's say that return A",
    "start": "4162208",
    "end": "4166375"
  },
  {
    "text": "is Query",
    "start": "4170208",
    "end": "4173541"
  },
  {
    "text": "let me just try if i have a function that has a signature like that",
    "start": "4176375",
    "end": "4183791"
  },
  {
    "text": "okay make query",
    "start": "4188250",
    "end": "4192166"
  },
  {
    "text": "so this ChangeProductNameWithSchema",
    "start": "4195166",
    "end": "4200291"
  },
  {
    "text": "and that could work that could work that has the additional",
    "start": "4207208",
    "end": "4212875"
  },
  {
    "text": "type level information to know that this is a query",
    "start": "4213208",
    "end": "4217208"
  },
  {
    "text": "and yeah yeah yeah that could work yeah and the actual implementation could be more",
    "start": "4223958",
    "end": "4230333"
  },
  {
    "text": "like something like",
    "start": "4230333",
    "end": "4232458"
  },
  {
    "text": "this is the base class and i want return as class",
    "start": "4235541",
    "end": "4242416"
  },
  {
    "text": "x extends",
    "start": "4242416",
    "end": "4244000"
  },
  {
    "text": "let me just finish this one static is query",
    "start": "4250333",
    "end": "4254583"
  },
  {
    "text": "okay and here obviously i need to return",
    "start": "4263208",
    "end": "4268708"
  },
  {
    "text": "okay and here obviously it complains because",
    "start": "4270208",
    "end": "4275833"
  },
  {
    "text": "this needs to be something newable but yeah",
    "start": "4276208",
    "end": "4279291"
  },
  {
    "text": "and what are you complaining for",
    "start": "4290041",
    "end": "4293375"
  },
  {
    "text": "a boolean is that oh yeah",
    "start": "4296208",
    "end": "4297541"
  },
  {
    "text": "this is always yeah let me just",
    "start": "4307208",
    "end": "4312416"
  },
  {
    "text": "I just want to it's any party guys",
    "start": "4314166",
    "end": "4319166"
  },
  {
    "text": "okay I just want to see if that works",
    "start": "4320208",
    "end": "4325291"
  },
  {
    "text": "you know so is query now has a static field that says",
    "start": "4325291",
    "end": "4333208"
  },
  {
    "text": "is query yeah and now if I have something else that",
    "start": "4333208",
    "end": "4340291"
  },
  {
    "text": "is not a query that won't have that static field yeah that will work",
    "start": "4340750",
    "end": "4346541"
  },
  {
    "text": "yeah okay I think that my time is running out so",
    "start": "4346541",
    "end": "4352375"
  },
  {
    "text": "we will work on this APIs better next time but",
    "start": "4352375",
    "end": "4356458"
  },
  {
    "text": "thanks again everyone for joining and thanks for every suggestion you made",
    "start": "4357500",
    "end": "4364833"
  },
  {
    "text": "and see you next time folks bye bye",
    "start": "4365583",
    "end": "4369750"
  }
]