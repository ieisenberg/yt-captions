[
  {
    "text": "So today we're gonna go back to effect/cluster as always. I want to fix some",
    "start": "3883",
    "end": "13132"
  },
  {
    "text": "stuff. Yesterday we worked a lot over JS docs and today I wanna fix a lot of",
    "start": "13133",
    "end": "20833"
  },
  {
    "text": "things and let's see what we can do",
    "start": "20983",
    "end": "26900"
  },
  {
    "text": "today. Okay I wanted to start from something very simple like here for",
    "start": "26900",
    "end": "34400"
  },
  {
    "text": "example image list I had",
    "start": "34400",
    "end": "39816"
  },
  {
    "text": "\"Refrive recipient type to be effect data instead of interfaces\" okay so",
    "start": "40616",
    "end": "45599"
  },
  {
    "text": "right now we have cluster SRC recipientType",
    "start": "45633",
    "end": "55365"
  },
  {
    "text": "okay right now those are interfaces but I want to move those to effrect data",
    "start": "55366",
    "end": "63666"
  },
  {
    "text": "and I always thought where is actually recipient type as an alias used let's see",
    "start": "63666",
    "end": "72715"
  },
  {
    "text": "find references okay okay there",
    "start": "72716",
    "end": "78433"
  },
  {
    "text": "are indeed some yeah those there are use",
    "start": "78433",
    "end": "85066"
  },
  {
    "text": "when I'm registering the recipient okay that's fine okay so let's start here okay",
    "start": "85066",
    "end": "92916"
  },
  {
    "text": "recipientType very well okay so let's start by importing",
    "start": "92916",
    "end": "101933"
  },
  {
    "text": "import as data from effect/Data import",
    "start": "101933",
    "end": "111783"
  },
  {
    "text": "maybe okay and I want",
    "start": "111783",
    "end": "119366"
  },
  {
    "text": "to change this to be export class \"EntityType of MSG extends",
    "start": "119366",
    "end": "129132"
  },
  {
    "text": "Message.Message.Any extends Data.Class\"",
    "start": "129133",
    "end": "138983"
  },
  {
    "text": "and we'll move all of data.TaggedClass maybe and we want to provide the tag",
    "start": "139883",
    "end": "151500"
  },
  {
    "text": "which is for now EntityType and then we",
    "start": "151500",
    "end": "161400"
  },
  {
    "text": "have the name of the entity and this schema okay here we go",
    "start": "161433",
    "end": "170366"
  },
  {
    "text": "okay and this is the first one",
    "start": "170366",
    "end": "176416"
  },
  {
    "text": "and we want to move all of those into this kind of syntax and also",
    "start": "176416",
    "end": "183833"
  },
  {
    "text": "rewrite the constructors and eventually move everything to effect/data okay same goes for",
    "start": "183833",
    "end": "194116"
  },
  {
    "text": "TopicType export class TopicType which is what represent",
    "start": "194116",
    "end": "203333"
  },
  {
    "text": "entities that we can leave on multiple pods extends Message.Message.Any extends Data.TaggedClass of",
    "start": "203333",
    "end": "218316"
  },
  {
    "text": "TopicType okay and those are the",
    "start": "218316",
    "end": "227666"
  },
  {
    "text": "properties okay now we",
    "start": "227666",
    "end": "234066"
  },
  {
    "text": "have rewritten those using data class this is the same thing okay",
    "start": "235366",
    "end": "243633"
  },
  {
    "text": "oh hi Mike and then we need to change make entity type because this",
    "start": "243633",
    "end": "250983"
  },
  {
    "text": "now doesn't make any sense so this is return new EntityType",
    "start": "250983",
    "end": "258733"
  },
  {
    "text": "and we have the name and the schema and",
    "start": "258866",
    "end": "264500"
  },
  {
    "text": "unfortunately we have to cast the schema as any I don't like",
    "start": "264500",
    "end": "274599"
  },
  {
    "text": "as any but the thing is that I don't either want this type to care about the",
    "start": "274599",
    "end": "282000"
  },
  {
    "text": "encoder type so that's why I cast that and the same goes for",
    "start": "282000",
    "end": "288983"
  },
  {
    "text": "return new TopicType and",
    "start": "288983",
    "end": "299033"
  },
  {
    "text": "we have name and the schema and the schema needs to be casted as any",
    "start": "299033",
    "end": "304916"
  },
  {
    "text": "okay that's it okay and",
    "start": "304916",
    "end": "316416"
  },
  {
    "text": "now ideally if we run all of our tests nothing should have been broken",
    "start": "316416",
    "end": "323400"
  },
  {
    "text": "oh I need to start I need",
    "start": "323400",
    "end": "329283"
  },
  {
    "text": "to start how is it called",
    "start": "329283",
    "end": "334666"
  },
  {
    "text": "those works those works okay everything seems okay cluster pg is not working because it's not",
    "start": "337699",
    "end": "344466"
  },
  {
    "text": "started the service yeah enough runtime okay that's fine that's because I have shut down my",
    "start": "344500",
    "end": "350783"
  },
  {
    "text": "test container service right now so that's fine maybe I can start",
    "start": "350783",
    "end": "356883"
  },
  {
    "text": "that okay so we can run those",
    "start": "356883",
    "end": "363483"
  },
  {
    "text": "again applications okay is now",
    "start": "363583",
    "end": "376199"
  },
  {
    "text": "started so ideally if I run again now with Docker started",
    "start": "376199",
    "end": "382916"
  },
  {
    "text": "all of those should be running okay they are now perfect okay okay",
    "start": "383266",
    "end": "402383"
  },
  {
    "text": "now that the RecipientType are classes what I wanted also to",
    "start": "402383",
    "end": "411466"
  },
  {
    "text": "look for is to customize how the hash and equal works for",
    "start": "411466",
    "end": "418666"
  },
  {
    "text": "the EntityType because I wanted them to be referred just by the",
    "start": "418666",
    "end": "423916"
  },
  {
    "text": "type and the name I don't care about the schema the schema is something that I don't want to be inside the equals",
    "start": "423916",
    "end": "430383"
  },
  {
    "text": "implementation and the hash implementation of the tagged class I just care about the name which is basically the identifier and so",
    "start": "430483",
    "end": "440099"
  },
  {
    "text": "what I will do is something around the lines of checking",
    "start": "440099",
    "end": "445266"
  },
  {
    "text": "out the class implementation go to the definition let's see how effect does",
    "start": "445300",
    "end": "452166"
  },
  {
    "text": "that okay so we have here modules effect packages cluster node",
    "start": "452166",
    "end": "468116"
  },
  {
    "text": "modules effect data and",
    "start": "468116",
    "end": "473916"
  },
  {
    "text": "sorry SRC data not from here but",
    "start": "473916",
    "end": "479166"
  },
  {
    "text": "we should have SRC data internal data ",
    "start": "479199",
    "end": "488416"
  },
  {
    "text": "data okay okay I need to",
    "start": "488416",
    "end": "493482"
  },
  {
    "text": "yeah hash symbol equal symbol yeah I need something like that",
    "start": "493483",
    "end": "500066"
  },
  {
    "text": "structural objects in this structural okay I need to find out maybe",
    "start": "500066",
    "end": "510433"
  },
  {
    "text": "request does something similar I want to omit some properties I",
    "start": "510433",
    "end": "515982"
  },
  {
    "text": "remember seeing somewhere an equals implementation that doesn't care about",
    "start": "515983",
    "end": "522583"
  },
  {
    "text": "some properties of the object but I don't remember",
    "start": "522583",
    "end": "528233"
  },
  {
    "text": "where okay well let's let's just do it in",
    "start": "528233",
    "end": "534899"
  },
  {
    "text": "some other way we can just remember that in order to",
    "start": "534899",
    "end": "540116"
  },
  {
    "text": "implement data we have to both hash and equal if I remember correctly yeah ash and equal perfect",
    "start": "540116",
    "end": "546233"
  },
  {
    "text": "okay so we can go back to our code and say cluster back to",
    "start": "547866",
    "end": "558699"
  },
  {
    "text": "RecipientType okay we can Hash.symbol",
    "start": "558699",
    "end": "570133"
  },
  {
    "text": "return Hash.structure and we have  the name",
    "start": "580566",
    "end": "595316"
  },
  {
    "text": "this.name and also the tag ",
    "start": "601633",
    "end": "615850"
  },
  {
    "text": "this.tag and also name",
    "start": "615850",
    "end": "622266"
  },
  {
    "text": "this.name and also this equal symbol import everything as equal",
    "start": "622266",
    "end": "629649"
  },
  {
    "text": "from effect equal yes equal.symbol",
    "start": "629649",
    "end": "640899"
  },
  {
    "text": "and if I remember this correctly it will accept this and",
    "start": "640899",
    "end": "648066"
  },
  {
    "text": "that okay you can just snug it here structural",
    "start": "648066",
    "end": "654865"
  },
  {
    "text": "so to survive okay you can just copy from here this",
    "start": "655366",
    "end": "666100"
  },
  {
    "text": "and that okay this is EntityType of Msg and that is another entity",
    "start": "666100",
    "end": "675949"
  },
  {
    "text": "type oh that is equal not equal okay all makes sense because we don't know actually if that is",
    "start": "675949",
    "end": "682865"
  },
  {
    "text": "something we okay so we need to ensure that first is EntityType",
    "start": "682866",
    "end": "694050"
  },
  {
    "text": "we have this one no we don't have one okay so we can do as we",
    "start": "694050",
    "end": "702916"
  },
  {
    "text": "always do with a fine const RecipientTypeSymbolKey",
    "start": "702916",
    "end": "722899"
  },
  {
    "text": "equals \"@effect/cluster/RecipientType\"",
    "start": "722899",
    "end": "741316"
  },
  {
    "text": " and this is the key that will be used by our export const RecipientTypeId",
    "start": "741316",
    "end": "751933"
  },
  {
    "text": "which is kind of a repetition but is what actually is a symbol for",
    "start": "751933",
    "end": "757733"
  },
  {
    "text": "RecipientTypeSymbolKey and we want this to be an unique symbol",
    "start": "757733",
    "end": "766350"
  },
  {
    "text": "and we'll put the js dock annotations for",
    "start": "769366",
    "end": "775149"
  },
  {
    "text": "this because we are exporting it okay now we have a recipient type ID okay",
    "start": "775149",
    "end": "786066"
  },
  {
    "text": "so we can now shove that into our classes saying that",
    "start": "786066",
    "end": "795116"
  },
  {
    "text": "get RecipientTypeId equals recipient",
    "start": "795766",
    "end": "803250"
  },
  {
    "text": "type ID we can maybe mark that as readonly",
    "start": "803250",
    "end": "809550"
  },
  {
    "text": "okay we'll come back later to this one okay and also the same",
    "start": "811933",
    "end": "819633"
  },
  {
    "text": "goes for TopicType readonly",
    "start": "819633",
    "end": "822566"
  },
  {
    "text": "RecipientTypeId equals RecipientTypeId so now that we have put",
    "start": "825483",
    "end": "830800"
  },
  {
    "text": "a type ID inside of our data what we can do is create a function which",
    "start": "830800",
    "end": "842250"
  },
  {
    "text": "is basically a type predicate that will ensure that given",
    "start": "842250",
    "end": "851233"
  },
  {
    "text": "value is our recipient type",
    "start": "851233",
    "end": "857350"
  },
  {
    "text": "and will be export function isRecipientType that will take in a value as unknown",
    "start": "860899",
    "end": "869966"
  },
  {
    "text": "and will the returning value is a recipient type of unknown",
    "start": "870733",
    "end": "876516"
  },
  {
    "text": "because we don't can make any maybe we can just put as a type parameter",
    "start": "876516",
    "end": "883166"
  },
  {
    "text": "a so it's up to the user okay and say return type of",
    "start": "883166",
    "end": "890866"
  },
  {
    "text": "value equals object and value is not null",
    "start": "890966",
    "end": "898316"
  },
  {
    "text": "and RecipientTypeId in value",
    "start": "898316",
    "end": "904865"
  },
  {
    "text": "and this value recipient type ID equals",
    "start": "906333",
    "end": "912100"
  },
  {
    "text": "recipient type ID okay perfect so now we have a function",
    "start": "912100",
    "end": "918415"
  },
  {
    "text": "that will tell us if value is a RecipientTypeId  so here in our equal",
    "start": "918500",
    "end": "925633"
  },
  {
    "text": "implementation we was about right we can do something like if",
    "start": "925633",
    "end": "931433"
  },
  {
    "text": "is RecipientType that otherwise we return false if a recipient",
    "start": "931433",
    "end": "945115"
  },
  {
    "text": "type and we also know now that",
    "start": "945116",
    "end": "949066"
  },
  {
    "text": "if this is a recipient type to check if those are equal we will just return if",
    "start": "950899",
    "end": "956466"
  },
  {
    "text": "this._tag equals that._tag and this.name",
    "start": "956899",
    "end": "965350"
  },
  {
    "text": "equals that.name okay",
    "start": "965350",
    "end": "971566"
  },
  {
    "text": "and I think that's it oh okay we need to drop the get",
    "start": "971566",
    "end": "980000"
  },
  {
    "text": "get okay",
    "start": "980016",
    "end": "983233"
  },
  {
    "text": "I need a semicolon here because okay because JavaScript is dumb okay so equal.symbol will",
    "start": "985933",
    "end": "995149"
  },
  {
    "text": "check this recipient type recipient type will check that there is the same type and same name",
    "start": "995216",
    "end": "1000165"
  },
  {
    "text": "otherwise it's false okay and I think that the same thing will",
    "start": "1000250",
    "end": "1005566"
  },
  {
    "text": "go on for the topic type",
    "start": "1005566",
    "end": "1009466"
  },
  {
    "text": "okay and now we have an error where is the error here because",
    "start": "1013966",
    "end": "1021350"
  },
  {
    "text": "yeah a extends we have a",
    "start": "1021350",
    "end": "1027016"
  },
  {
    "text": "violator a constraint a should extend message.message.any okay",
    "start": "1027666",
    "end": "1037516"
  },
  {
    "text": "take one read one a piece of entity type and topic type of no oh this is topic type right",
    "start": "1042566",
    "end": "1048733"
  },
  {
    "text": "you're right as always this is a topic type of Msg and okay we have no build",
    "start": "1049000",
    "end": "1056250"
  },
  {
    "text": "okay we have no builder compilers okay so now we can write maybe some tests",
    "start": "1057699",
    "end": "1063149"
  },
  {
    "text": "just to ensure that everything is fine so a recipient type",
    "start": "1064416",
    "end": "1071266"
  },
  {
    "text": "test yes let me snag some stuff from the",
    "start": "1071316",
    "end": "1079899"
  },
  {
    "text": "other test because I'm lazy and I don't want to write",
    "start": "1079899",
    "end": "1084966"
  },
  {
    "text": "code I want my code to be just copy and paste as always okay so now",
    "start": "1084966",
    "end": "1091449"
  },
  {
    "text": "we have this and we want to describe how our RecipientType that the",
    "start": "1091449",
    "end": "1099949"
  },
  {
    "text": "type works okay and we",
    "start": "1099949",
    "end": "1108466"
  },
  {
    "text": "don't care about this oh no we actually care because in order to define a recipient type we",
    "start": "1108466",
    "end": "1113833"
  },
  {
    "text": "need to have a sample message because as a recipient type is defined by",
    "start": "1113833",
    "end": "1119716"
  },
  {
    "text": "a name and a schema so import everything as schema from",
    "start": "1119716",
    "end": "1125833"
  },
  {
    "text": "fx schema schema schema okay this is our",
    "start": "1126100",
    "end": "1136000"
  },
  {
    "text": "sample schema and we also need to import import everything",
    "start": "1136000",
    "end": "1141915"
  },
  {
    "text": "as message from effect cluster message",
    "start": "1142166",
    "end": "1148466"
  },
  {
    "text": "okay this is our sample message okay",
    "start": "1152383",
    "end": "1158399"
  },
  {
    "text": "and we'll also say that we expect",
    "start": "1163199",
    "end": "1166516"
  },
  {
    "text": "expect recipient type recipient equals to work as expected",
    "start": "1171783",
    "end": "1183233"
  },
  {
    "text": "okay and we will say that we expect equals",
    "start": "1186166",
    "end": "1192566"
  },
  {
    "text": "and we will declare new also need to",
    "start": "1196733",
    "end": "1202250"
  },
  {
    "text": "import recipient type maybe import everything as recipient type which is what we are",
    "start": "1202250",
    "end": "1208566"
  },
  {
    "text": "testing from  @effect/cluster/RecipientType",
    "start": "1208566",
    "end": "1216283"
  },
  {
    "text": "and we do const user maybe any recipient",
    "start": "1216649",
    "end": "1227833"
  },
  {
    "text": "type dot make entity type",
    "start": "1227833",
    "end": "1233366"
  },
  {
    "text": "name will be user and the schema will be just the sample message",
    "start": "1235133",
    "end": "1239500"
  },
  {
    "text": "and we'll have also",
    "start": "1240166",
    "end": "1243933"
  },
  {
    "text": "const notifications maybe recipient type",
    "start": "1245216",
    "end": "1250799"
  },
  {
    "text": "dot make entity type maybe topic type make topic type",
    "start": "1250800",
    "end": "1256966"
  },
  {
    "text": "notifications having the sample message the sample message and we'll create",
    "start": "1258100",
    "end": "1265016"
  },
  {
    "text": "another sample message maybe sample two sample two sample two",
    "start": "1265016",
    "end": "1273233"
  },
  {
    "text": "and we'll return a string maybe instead and maybe we'll change the property name",
    "start": "1273233",
    "end": "1280916"
  },
  {
    "text": "to id2 okay so now we expect user to equal itself",
    "start": "1280916",
    "end": "1289449"
  },
  {
    "text": "to be true",
    "start": "1289699",
    "end": "1292065"
  },
  {
    "text": "okay so we expect equals user and notification",
    "start": "1295850",
    "end": "1301632"
  },
  {
    "text": "to be false",
    "start": "1304966",
    "end": "1306632"
  },
  {
    "text": "okay and we also expect just a sip of tea",
    "start": "1310500",
    "end": "1316166"
  },
  {
    "text": "okay and we want so want to create const user two equals recipient type",
    "start": "1319750",
    "end": "1327750"
  },
  {
    "text": "make entity type of the same name but using a different schema",
    "start": "1328733",
    "end": "1334466"
  },
  {
    "text": "and now i want also to expect that we equals user and",
    "start": "1334466",
    "end": "1343300"
  },
  {
    "text": "user two should be true",
    "start": "1343300",
    "end": "1348933"
  },
  {
    "text": "to be true okay notifications okay",
    "start": "1351233",
    "end": "1358966"
  },
  {
    "text": "okay so let's try again recipient type run",
    "start": "1358966",
    "end": "1368666"
  },
  {
    "text": "everything okay test passed perfectly",
    "start": "1368666",
    "end": "1372933"
  },
  {
    "text": "and now maybe we can do the same for the hashes",
    "start": "1375533",
    "end": "1380050"
  },
  {
    "text": "expect hash to work expecting and we need to import everything as hash from",
    "start": "1385333",
    "end": "1396716"
  },
  {
    "text": "effect/hash and now we expect the",
    "start": "1396733",
    "end": "1406533"
  },
  {
    "text": "hash i thought that it was",
    "start": "1408116",
    "end": "1414550"
  },
  {
    "text": "is hash is this the method i don't",
    "start": "1414566",
    "end": "1423649"
  },
  {
    "text": "remember let's see hash.hash",
    "start": "1423649",
    "end": "1426449"
  },
  {
    "text": "yes this one expect hash.hashUser to be",
    "start": "1430250",
    "end": "1438716"
  },
  {
    "text": "ash.ashUser2 the user and the",
    "start": "1439133",
    "end": "1447216"
  },
  {
    "text": "same goes for expect hash.hashUser",
    "start": "1447216",
    "end": "1452449"
  },
  {
    "text": "to be equal of the ash.ashUser2",
    "start": "1453699",
    "end": "1459750"
  },
  {
    "text": "and we expect hash.hashUser",
    "start": "1459750",
    "end": "1466166"
  },
  {
    "text": "not to be hash.hash of the notifications",
    "start": "1472433",
    "end": "1480949"
  },
  {
    "text": "because those ones are different so let's try again run the test okay it passed",
    "start": "1480949",
    "end": "1488065"
  },
  {
    "text": "perfectly okay so this is",
    "start": "1488066",
    "end": "1494966"
  },
  {
    "text": "great because now that it implements the hash and the equal",
    "start": "1494966",
    "end": "1502899"
  },
  {
    "text": "interface i remember having some point that i will ",
    "start": "1502899",
    "end": "1510016"
  },
  {
    "text": "i want to later change to take advantage of this",
    "start": "1510016",
    "end": "1514166"
  },
  {
    "text": "okay so let's run pnpm clean let's run",
    "start": "1518250",
    "end": "1526233"
  },
  {
    "text": "everything and see that it's still building a running pnpm build",
    "start": "1526233",
    "end": "1531100"
  },
  {
    "text": "oh we broke something what did we broke everything oh that's",
    "start": "1536016",
    "end": "1548000"
  },
  {
    "text": "fantastic as always pnpm build",
    "start": "1548000",
    "end": "1552500"
  },
  {
    "text": "oh you want an explicit return type okay that's fine by me that's fine by me okay",
    "start": "1560816",
    "end": "1570199"
  },
  {
    "text": "number and we'll return a boolean",
    "start": "1573866",
    "end": "1578699"
  },
  {
    "text": "number and this will return a boolean",
    "start": "1583533",
    "end": "1585933"
  },
  {
    "text": "okay",
    "start": "1590000",
    "end": "1596600"
  },
  {
    "text": "and we now build again",
    "start": "1596600",
    "end": "1603116"
  },
  {
    "text": "okay now it passed and now we'll test then fix",
    "start": "1612533",
    "end": "1620316"
  },
  {
    "text": "so but test should work because we tested before",
    "start": "1626600",
    "end": "1631850"
  },
  {
    "text": "and so that everything worked so",
    "start": "1634966",
    "end": "1641466"
  },
  {
    "text": "yeah i think that that's passed go docker go you can make it",
    "start": "1647216",
    "end": "1652632"
  },
  {
    "text": "yeah it time out of the past but yeah i",
    "start": "1652666",
    "end": "1668983"
  },
  {
    "text": "don't care because now this is in recipient type and it worked so we're fine okay i'm pretty",
    "start": "1668983",
    "end": "1679850"
  },
  {
    "text": "pleased with that that was something that i wanted to do for a long time and now let's just check",
    "start": "1679850",
    "end": "1688783"
  },
  {
    "text": "all the changes we have oh we need to run docgen",
    "start": "1688783",
    "end": "1693550"
  },
  {
    "text": "in order to see if that is completely",
    "start": "1694016",
    "end": "1699132"
  },
  {
    "text": "pnpm docgen let's see that you haven't missed any",
    "start": "1699133",
    "end": "1704166"
  },
  {
    "text": "documentation and we have indeed okay uh all right we need to put the scenes and",
    "start": "1704166",
    "end": "1712466"
  },
  {
    "text": "everything else over every field we add uh this is uh not models with these",
    "start": "1712466",
    "end": "1722216"
  },
  {
    "text": "symbols models okay and",
    "start": "1722216",
    "end": "1727132"
  },
  {
    "text": "here uh since",
    "start": "1732483",
    "end": "1735850"
  },
  {
    "text": "1.0.0 because we are still near alpha so we can brake whatever we want",
    "start": "1737766",
    "end": "1743433"
  },
  {
    "text": "and people will scream at us okay okay",
    "start": "1745216",
    "end": "1750582"
  },
  {
    "text": "and that's it i think let's try again",
    "start": "1750583",
    "end": "1754816"
  },
  {
    "text": "pnpm docgen",
    "start": "1756350",
    "end": "1757049"
  },
  {
    "text": "oh you want also for the type id okay fine by me",
    "start": "1764866",
    "end": "1772133"
  },
  {
    "text": "okay docs succeeded so i think that we are ready for a pr git",
    "start": "1779583",
    "end": "1786933"
  },
  {
    "text": "check out minus b and we'll call this",
    "start": "1787683",
    "end": "1793433"
  },
  {
    "text": "use use data for recipient type",
    "start": "1795316",
    "end": "1802716"
  },
  {
    "text": "okay and we'll push this and use this no use this effect data for recipient type",
    "start": "1805933",
    "end": "1815933"
  },
  {
    "text": "and implement custom tables and hash",
    "start": "1818883",
    "end": "1826016"
  },
  {
    "text": " okay perfect for me i know maybe",
    "start": "1828649",
    "end": "1834149"
  },
  {
    "text": "we and the issue we want to close is the number",
    "start": "1834183",
    "end": "1841016"
  },
  {
    "text": "number 67 number 67",
    "start": "1845050",
    "end": "1849416"
  },
  {
    "text": "publish okay",
    "start": "1853616",
    "end": "1858883"
  },
  {
    "text": "okay let's wait for github to catch it up pull requests",
    "start": "1861283",
    "end": "1867648"
  },
  {
    "text": "okay so let's see what we want tackle next",
    "start": "1868866",
    "end": "1872633"
  },
  {
    "text": "okay maybe i can show here okay so we had this one which is the the",
    "start": "1874933",
    "end": "1885133"
  },
  {
    "text": "ci is running okay what we have next",
    "start": "1885133",
    "end": "1890050"
  },
  {
    "text": "this is a low priority this is low priority maybe i can",
    "start": "1894183",
    "end": "1899533"
  },
  {
    "text": "start put some labels on those uh this can be considered something that",
    "start": "1899533",
    "end": "1906933"
  },
  {
    "text": "maybe it's the discussion time maybe we'll need question",
    "start": "1908983",
    "end": "1914149"
  },
  {
    "text": "okay okay the ci worked",
    "start": "1923233",
    "end": "1929250"
  },
  {
    "text": "perfectly so we can just",
    "start": "1929250",
    "end": "1932449"
  },
  {
    "text": "we change this one yeah that's fine we added this recipient type",
    "start": "1934583",
    "end": "1939283"
  },
  {
    "text": "we added some tests okay i think that we can merge this one",
    "start": "1941149",
    "end": "1945533"
  },
  {
    "text": "perfect another one down in the to do list okay so",
    "start": "1954116",
    "end": "1961050"
  },
  {
    "text": "i really want to tackle this one about about relying on effect rpc",
    "start": "1964266",
    "end": "1971716"
  },
  {
    "text": "instead of using my own trait",
    "start": "1971716",
    "end": "1976250"
  },
  {
    "text": "and the thing is that right now i have basically the two traits",
    "start": "1980266",
    "end": "1985866"
  },
  {
    "text": "to the pods service i think the pods service yeah this one and the",
    "start": "1985866",
    "end": "1993266"
  },
  {
    "text": "other one is uh the elf i think basically we have two",
    "start": "1993266",
    "end": "1999816"
  },
  {
    "text": "services that deal with the communication with the pods and the thing is that right now those",
    "start": "1999816",
    "end": "2006882"
  },
  {
    "text": "one are just defining the methods and then i have a cluster node",
    "start": "2006983",
    "end": "2013815"
  },
  {
    "text": "package that implements those yeah implement the pods http yeah",
    "start": "2013816",
    "end": "2021148"
  },
  {
    "text": "but to be honest i think that directory relying on http",
    "start": "2024350",
    "end": "2030266"
  },
  {
    "text": "uh not really great yeah it's something",
    "start": "2030350",
    "end": "2035516"
  },
  {
    "text": "more low level maybe more performant but since now effect rpc is",
    "start": "2035516",
    "end": "2041050"
  },
  {
    "text": "part of the effect ecosystem why not just create a cluster rpc package",
    "start": "2041050",
    "end": "2049982"
  },
  {
    "text": "and instead of you having cluster node having cluster",
    "start": "2049983",
    "end": "2054966"
  },
  {
    "text": "rpc and all of those methods can be defined as rpc and then",
    "start": "2055083",
    "end": "2061632"
  },
  {
    "text": "the user can use whatever rpc he wants rpc http rpc in memory rpc",
    "start": "2061633",
    "end": "2072065"
  },
  {
    "text": "workers whatever he wants i wouldn't care then about",
    "start": "2072066",
    "end": "2076566"
  },
  {
    "text": "what happens over the wire and that to me seems pretty a big deal so",
    "start": "2077216",
    "end": "2085065"
  },
  {
    "text": "maybe we'll start tackling that okay let's move back to origin/main",
    "start": "2085066",
    "end": "2091132"
  },
  {
    "text": "and get pull okay so i",
    "start": "2091133",
    "end": "2098366"
  },
  {
    "text": "think that we can start tackling this yeah i'm not sure if i want to rename the",
    "start": "2098366",
    "end": "2104250"
  },
  {
    "text": "effect node package into yeah i think i want to rename the entire",
    "start": "2104250",
    "end": "2109433"
  },
  {
    "text": "effect node package into effect rpc yeah",
    "start": "2109433",
    "end": "2112333"
  },
  {
    "text": "and then yeah because if we rename this to effect rpc",
    "start": "2115316",
    "end": "2123133"
  },
  {
    "text": "pods http will become pods rpc",
    "start": "2123133",
    "end": "2127183"
  },
  {
    "text": "and then we have sharding protocol which",
    "start": "2128183",
    "end": "2133666"
  },
  {
    "text": "will be the router of the rpc and sharding services http will be",
    "start": "2133666",
    "end": "2140683"
  },
  {
    "text": "sharding rpc sharding methods of rpc yeah",
    "start": "2140683",
    "end": "2145916"
  },
  {
    "text": "um yeah the more i think about it the more i want to do it okay so let's start something new",
    "start": "2146916",
    "end": "2156149"
  },
  {
    "text": "interesting let's see something about effect rpc",
    "start": "2156149",
    "end": "2161133"
  },
  {
    "text": "oh yeah welcome Pruxis uh what we are building we are basically",
    "start": "2164033",
    "end": "2170050"
  },
  {
    "text": "working on effect cluster effect cluster is a package built over",
    "start": "2170050",
    "end": "2176983"
  },
  {
    "text": "effect and the aim of effect cluster is to be able to build",
    "start": "2176983",
    "end": "2183366"
  },
  {
    "text": "a cluster of system basically having distributed entities that live over multiple different",
    "start": "2183949",
    "end": "2191233"
  },
  {
    "text": "processes and they speak all together over messaging and you",
    "start": "2191233",
    "end": "2197050"
  },
  {
    "text": "don't care where the  the entity actually live you have basically something like",
    "start": "2197050",
    "end": "2203716"
  },
  {
    "text": "this maybe i can find you an example yeah you just know the entity id",
    "start": "2203716",
    "end": "2209750"
  },
  {
    "text": "and you send messages like we want to increment a counter so we send an increment message to a",
    "start": "2209750",
    "end": "2217016"
  },
  {
    "text": "counter named counter number one and the counter behavior will",
    "start": "2217016",
    "end": "2222250"
  },
  {
    "text": "live whatever he wants to so this allows you to build scalable",
    "start": "2222266",
    "end": "2227883"
  },
  {
    "text": "system because you can start with a single server with a single pod and have all of your",
    "start": "2227883",
    "end": "2233833"
  },
  {
    "text": "entities over that server and when you start to have a lot of entities that",
    "start": "2233833",
    "end": "2240283"
  },
  {
    "text": "needs to do stuff and you don't have enough processing power on a single server you can spin up",
    "start": "2240283",
    "end": "2247515"
  },
  {
    "text": "a second server and they will start talk together through a shard manager it's basically sharding",
    "start": "2247516",
    "end": "2253916"
  },
  {
    "text": "don't know if you know about it but yeah and this will",
    "start": "2253916",
    "end": "2259233"
  },
  {
    "text": "be part of the effect ecosystem this is in alpha stage and yeah we are tackling many",
    "start": "2259233",
    "end": "2266083"
  },
  {
    "text": "many many improvements that we want to do over the package and we",
    "start": "2266516",
    "end": "2271649"
  },
  {
    "text": "just ended renaming using effect data for a data type and now i was",
    "start": "2271649",
    "end": "2279433"
  },
  {
    "text": "thinking about renaming a package from cluster node to cluster rpc and use effect rpc",
    "start": "2279433",
    "end": "2286666"
  },
  {
    "text": "instead of an HTTP server so let's start by saying what is",
    "start": "2286666",
    "end": "2291750"
  },
  {
    "text": "effect rpc? effect rpc is an effect package that allows you to build rpc",
    "start": "2291783",
    "end": "2299816"
  },
  {
    "text": "servers and client couples without caring about basically what the",
    "start": "2299816",
    "end": "2305866"
  },
  {
    "text": "wire is you first define the rpc using effect rpc and then",
    "start": "2305866",
    "end": "2312033"
  },
  {
    "text": "there would be other packages like rpc HTTP or rpc worker or rpc",
    "start": "2312033",
    "end": "2317816"
  },
  {
    "text": "browser or rpc whatever that will actually implement the messaging over the",
    "start": "2317816",
    "end": "2323149"
  },
  {
    "text": "wire over the rpc so we were looking into rpc to see",
    "start": "2323149",
    "end": "2328816"
  },
  {
    "text": "how it works basically distributed",
    "start": "2328850",
    "end": "2334016"
  },
  {
    "text": "compute through effect without having to manage all the layers around it such as messaging, read,",
    "start": "2334016",
    "end": "2339116"
  },
  {
    "text": "write etc yes exactly messaging is built-in you will need",
    "start": "2339116",
    "end": "2345083"
  },
  {
    "text": "to define your messages but yeah that's the concept yeah for example here node",
    "start": "2345083",
    "end": "2351566"
  },
  {
    "text": "cluster node example we define for example in common this is",
    "start": "2351566",
    "end": "2358633"
  },
  {
    "text": "the schema that we define for our entities we define a counter the counter have the ability to",
    "start": "2358633",
    "end": "2364983"
  },
  {
    "text": "get the counter and number of the counter and that will return the number and we'll have no",
    "start": "2364983",
    "end": "2373083"
  },
  {
    "text": "errors in processing that we call increment increment we'll have no error and return nothing we",
    "start": "2373083",
    "end": "2380233"
  },
  {
    "text": "call decrement that will decrement no error will return nothing and finally we define a counter",
    "start": "2380233",
    "end": "2387433"
  },
  {
    "text": "entity which is basically an entity named counter that handles message of type counter Msg",
    "start": "2387433",
    "end": "2394549"
  },
  {
    "text": "this is just the protocol well we called it the protocol",
    "start": "2394550",
    "end": "2400666"
  },
  {
    "text": "and this is the kind of messages that the entity is able to manage and then you",
    "start": "2401383",
    "end": "2406850"
  },
  {
    "text": "define your behavior for your entity for example here we have a very simple behavior that",
    "start": "2406850",
    "end": "2412033"
  },
  {
    "text": "is stateful it starts with the number zero so effect that's set zero",
    "start": "2412033",
    "end": "2417133"
  },
  {
    "text": "we receive messages that can be one of get current increment or decrement we have seen",
    "start": "2417133",
    "end": "2422533"
  },
  {
    "text": "before and for example for increment we increment the counter in the ref we log that we incremented the",
    "start": "2422533",
    "end": "2429633"
  },
  {
    "text": "counter and then we exit the same goes for decrement and for get current we go back as processed",
    "start": "2429633",
    "end": "2436966"
  },
  {
    "text": "it is already working right now maybe i can show you let's see i need to spawn up a few",
    "start": "2436966",
    "end": "2445316"
  },
  {
    "text": "windows in order to show you how it works because we needed multiple processes so let's move to",
    "start": "2445316",
    "end": "2452333"
  },
  {
    "text": "desktop cluster and we'll move to um pictures",
    "start": "2452333",
    "end": "2458983"
  },
  {
    "text": "packages cluster node yeah okay pnpm example",
    "start": "2461066",
    "end": "2468866"
  },
  {
    "text": "example manager okay first thing you need",
    "start": "2469149",
    "end": "2480132"
  },
  {
    "text": "to have a manager the manager is basically the thing that let me let me increase the size of the",
    "start": "2480133",
    "end": "2490233"
  },
  {
    "text": "terminal increase okay the manager is basically",
    "start": "2490233",
    "end": "2495966"
  },
  {
    "text": "the server the process that coordinates everything that keeps track of the servers being",
    "start": "2496250",
    "end": "2501266"
  },
  {
    "text": "alive and assign entities to its server and now we can start the",
    "start": "2501316",
    "end": "2506382"
  },
  {
    "text": "sample manager okay we're saying now that the server manager is loaded and now we can",
    "start": "2506383",
    "end": "2512083"
  },
  {
    "text": "start another process maybe and this other process will be for example",
    "start": "2512083",
    "end": "2521516"
  },
  {
    "text": "yeah we'll move into cd",
    "start": "2522916",
    "end": "2528816"
  },
  {
    "text": "desktop cluster packages",
    "start": "2528816",
    "end": "2533333"
  },
  {
    "text": "cluster node okay pnpm example",
    "start": "2536266",
    "end": "2544966"
  },
  {
    "text": "sample-shard okay so now we start what is",
    "start": "2546516",
    "end": "2552066"
  },
  {
    "text": "called a pod basically an application behavior server",
    "start": "2552066",
    "end": "2558083"
  },
  {
    "text": "this is the process that will actually handle the logic of our",
    "start": "2558600",
    "end": "2563949"
  },
  {
    "text": "counter and as you can see in the except moment that i have started",
    "start": "2563949",
    "end": "2571133"
  },
  {
    "text": "this process we see things happening in both our",
    "start": "2571133",
    "end": "2576466"
  },
  {
    "text": "process that we have just started and in our server that we had before now basically the",
    "start": "2577149",
    "end": "2582250"
  },
  {
    "text": "server acknowledged that the pod the client had a request to register itself",
    "start": "2582283",
    "end": "2589116"
  },
  {
    "text": "into server the server received the request and now registered",
    "start": "2589116",
    "end": "2594250"
  },
  {
    "text": "the pod oh yeah sure thank",
    "start": "2594250",
    "end": "2602050"
  },
  {
    "text": "you Mike so now as you can see the pod has started and asked the",
    "start": "2602050",
    "end": "2607949"
  },
  {
    "text": "shard manager okay can you please uh register me and registering the pod address and now this",
    "start": "2607949",
    "end": "2616366"
  },
  {
    "text": "process has an unique identifier which is basically the host plus the port is running on and as",
    "start": "2616366",
    "end": "2624733"
  },
  {
    "text": "you can see that triggered a rebalance basically a rebalance is a process where the shard manager this",
    "start": "2624733",
    "end": "2631433"
  },
  {
    "text": "process will say okay now i need to move entities over to you because we need to split even the",
    "start": "2631433",
    "end": "2639250"
  },
  {
    "text": "work that we need to perform to the behaviors of the entities he basically moved",
    "start": "2639250",
    "end": "2646783"
  },
  {
    "text": "everything because it is the only server we have right now and now what i can start is i can start",
    "start": "2646783",
    "end": "2654166"
  },
  {
    "text": "another process here and now",
    "start": "2654166",
    "end": "2658899"
  },
  {
    "text": "maybe moving again cd desktop cluster packages",
    "start": "2660433",
    "end": "2669133"
  },
  {
    "text": "cluster node pnpm example",
    "start": "2672833",
    "end": "2677883"
  },
  {
    "text": "sample-connect okay and as you",
    "start": "2678833",
    "end": "2688583"
  },
  {
    "text": "can see this process now is basically sending messages",
    "start": "2688583",
    "end": "2692483"
  },
  {
    "text": "and it's sending messages without knowing where the entity is",
    "start": "2695783",
    "end": "2701366"
  },
  {
    "text": "hosted as you can see now it's starting and saying a lot okay is",
    "start": "2701366",
    "end": "2710883"
  },
  {
    "text": "there any concerns so i'll go used yet as raft not yet right now the shell manager",
    "start": "2710883",
    "end": "2719149"
  },
  {
    "text": "is one but we are planning on using raft indeed so first we are moving and ensuring that",
    "start": "2719149",
    "end": "2727266"
  },
  {
    "text": "everything is working with using a fixed shard manager better than fixed i'd say with the fixed",
    "start": "2727266",
    "end": "2735549"
  },
  {
    "text": "address and later on we can indeed move that by using any consensus like raft yeah",
    "start": "2735550",
    "end": "2743050"
  },
  {
    "text": "another interesting thing we can do now now that the",
    "start": "2743050",
    "end": "2749233"
  },
  {
    "text": "sending is is working now that we are basically sending increments to the messages we can maybe",
    "start": "2750666",
    "end": "2757566"
  },
  {
    "text": "try to start another process here now we",
    "start": "2758133",
    "end": "2765333"
  },
  {
    "text": "have only one pod running which is this one and this one",
    "start": "2765333",
    "end": "2770182"
  },
  {
    "text": "will have you can see it's receiving http request and sending back the results",
    "start": "2770483",
    "end": "2776533"
  },
  {
    "text": "okay what we can try to do is try to start another pod",
    "start": "2776833",
    "end": "2783933"
  },
  {
    "text": "which will host the entities and what will happen ideally is that the",
    "start": "2783933",
    "end": "2790916"
  },
  {
    "text": "shard manager should move some of the entities from the old pod to the new one okay let's try to",
    "start": "2790916",
    "end": "2798050"
  },
  {
    "text": "see if if we have broke something desktop cluster packages",
    "start": "2798050",
    "end": "2803966"
  },
  {
    "text": "cluster node okay and i can't start it immediately",
    "start": "2806666",
    "end": "2814983"
  },
  {
    "text": "because i need to give this process a different port from the previous one because if i try to",
    "start": "2814983",
    "end": "2821750"
  },
  {
    "text": "start it right now it will fail indeed so we have a way",
    "start": "2821750",
    "end": "2828416"
  },
  {
    "text": "from reading from the environment the",
    "start": "2828416",
    "end": "2833583"
  },
  {
    "text": "port so shutting from config if i use something like",
    "start": "2833583",
    "end": "2841733"
  },
  {
    "text": "port equals so if i type port equals one two three four and then pnpm example",
    "start": "2844033",
    "end": "2855533"
  },
  {
    "text": " sample-shard okay now",
    "start": "2857266",
    "end": "2863283"
  },
  {
    "text": "ideally we're gonna start another application server another pod and what will happen is that",
    "start": "2863283",
    "end": "2870449"
  },
  {
    "text": "now it will call the shard manager the shard manager",
    "start": "2870449",
    "end": "2876333"
  },
  {
    "text": "now registered that we have a new pod one two three four and",
    "start": "2876350",
    "end": "2882533"
  },
  {
    "text": "ideally what should happen now is that slowly it just happened slowly it",
    "start": "2882533",
    "end": "2889649"
  },
  {
    "text": "will start to rebalance so slowly it's starting to move the entities from the ",
    "start": "2889649",
    "end": "2896583"
  },
  {
    "text": "other pod the first one we started to this new one as you can see here we just moved",
    "start": "2896583",
    "end": "2902682"
  },
  {
    "text": "entities now he moved the entities",
    "start": "2902683",
    "end": "2906266"
  },
  {
    "text": "slowly but surely it's moving entities and you can see now some",
    "start": "2908266",
    "end": "2913449"
  },
  {
    "text": "entities have a slower count a counter because right now the entities doesn't store anything in",
    "start": "2913449",
    "end": "2919965"
  },
  {
    "text": "no database so when they are restarted on another pod they restart the counter this is effectively",
    "start": "2919966",
    "end": "2927166"
  },
  {
    "text": "something that you don't want in production but it's just as an example and now as you can see here the new",
    "start": "2927166",
    "end": "2934316"
  },
  {
    "text": "process is processing the entities and you see that messages are incoming in here so this",
    "start": "2934316",
    "end": "2941649"
  },
  {
    "text": "is really fancy really handy because you when you write your code when you write your behavior",
    "start": "2941649",
    "end": "2947016"
  },
  {
    "text": "you don't care where the entities are running you just care about receiving messages processing messages and that's it",
    "start": "2947016",
    "end": "2953516"
  },
  {
    "text": "now i actually have two different javascript processes this one and the",
    "start": "2953783",
    "end": "2960233"
  },
  {
    "text": "other one is this one this one are receiving requests and",
    "start": "2960233",
    "end": "2966083"
  },
  {
    "text": "processes them if i move down we'll see that okay as you can see those one are",
    "start": "2966083",
    "end": "2975149"
  },
  {
    "text": "processing messages both this one and this one",
    "start": "2975149",
    "end": "2979649"
  },
  {
    "text": "this one is the first one we started so right now is more busy has more entities to process",
    "start": "2982366",
    "end": "2987266"
  },
  {
    "text": "but as you can see right now the shard manager is slowly moving entities you can see that here for",
    "start": "2987633",
    "end": "2993849"
  },
  {
    "text": "example we always see entity one entity six and here we have all the others zero two three four",
    "start": "2993883",
    "end": "3001166"
  },
  {
    "text": "five seven eight nine okay and slowly but surely this is a setting",
    "start": "3001166",
    "end": "3006283"
  },
  {
    "text": "you can change into oh entity two just move one two six and this is a",
    "start": "3006283",
    "end": "3013050"
  },
  {
    "text": "setting you can change in after the cluster and tell how many entities to move each time you",
    "start": "3013050",
    "end": "3018116"
  },
  {
    "text": "rebalance is in a basic percentage and it is in order to",
    "start": "3018116",
    "end": "3023366"
  },
  {
    "text": "let the server start and warm up and do not move too much things too",
    "start": "3024116",
    "end": "3029383"
  },
  {
    "text": "much faster because you know that's not great because you may",
    "start": "3029383",
    "end": "3035432"
  },
  {
    "text": "accidentally change too quickly the network shape of your entities",
    "start": "3035433",
    "end": "3040733"
  },
  {
    "text": "but yeah eventually they should became",
    "start": "3041066",
    "end": "3047033"
  },
  {
    "text": "almost even one two six one two six eight nine and",
    "start": "3047033",
    "end": "3053583"
  },
  {
    "text": "this scales forever and if for example now i shut down this",
    "start": "3053783",
    "end": "3061766"
  },
  {
    "text": "process the first one ideally what will happen is that it should",
    "start": "3061766",
    "end": "3070050"
  },
  {
    "text": "understand that the first entity died",
    "start": "3070050",
    "end": "3073533"
  },
  {
    "text": "and eventually should move everything back to the first process",
    "start": "3077066",
    "end": "3080583"
  },
  {
    "text": "as you can see it notified that there is an unhealthy pod and now he assigned new shards and slowly",
    "start": "3085066",
    "end": "3095883"
  },
  {
    "text": "but surely it will keep up and restart again",
    "start": "3095883",
    "end": "3099283"
  },
  {
    "text": "so this pattern is really really really really really nice it's basically all actor model",
    "start": "3103199",
    "end": "3109966"
  },
  {
    "text": "and location transparency you don't care where the entity lives it's so nice it's something that",
    "start": "3111233",
    "end": "3116466"
  },
  {
    "text": "changed my mind okay so back to what we were doing so now i can close everything",
    "start": "3117016",
    "end": "3125233"
  },
  {
    "text": "so we were thinking about using effect rpc instead of",
    "start": "3130399",
    "end": "3137566"
  },
  {
    "text": "providing our own HTTP server such that later on we can take advantage",
    "start": "3137566",
    "end": "3143016"
  },
  {
    "text": "of all the potential future protocols provided by",
    "start": "3143016",
    "end": "3149733"
  },
  {
    "text": "effect rpc let me just take a sip",
    "start": "3149733",
    "end": "3153783"
  },
  {
    "text": "so i'm not too familiar with the effect rpc so let's try together and see how it works",
    "start": "3159133",
    "end": "3165449"
  },
  {
    "text": "okay so we have both rpc and rpc HTTP so",
    "start": "3166183",
    "end": "3171333"
  },
  {
    "text": "let's start by the second one which has examples okay let's see we have a client a router",
    "start": "3171333",
    "end": "3178765"
  },
  {
    "text": "and a schema a schema because as we can imagine",
    "start": "3178766",
    "end": "3184133"
  },
  {
    "text": "messages of the rpc are going over the wire so indeed we need a",
    "start": "3184350",
    "end": "3189366"
  },
  {
    "text": "schema we have here a user",
    "start": "3189366",
    "end": "3194349"
  },
  {
    "text": "oh and then we extend rpc.stream request or TaggedRequest okay that's fine",
    "start": "3196183",
    "end": "3203116"
  },
  {
    "text": "and this one i think are the request that your rpc server can handle and then we have",
    "start": "3206433",
    "end": "3214566"
  },
  {
    "text": "a client and a router.  Let's start by the router",
    "start": "3214750",
    "end": "3218983"
  },
  {
    "text": "okay the router basically handles okay the messages and replies",
    "start": "3221233",
    "end": "3229882"
  },
  {
    "text": "okay and this is the user router okay and then it creates the rpc server",
    "start": "3229883",
    "end": "3238765"
  },
  {
    "text": "by saying the router post rpc",
    "start": "3238766",
    "end": "3244966"
  },
  {
    "text": "to a page okay to a page HTTP and then we have the router okay",
    "start": "3246183",
    "end": "3252149"
  },
  {
    "text": "HTTP.serve we serve with the middleware with log address okay i see yeah so i",
    "start": "3252149",
    "end": "3261016"
  },
  {
    "text": "think that maybe the first thing that we should do is start defining our messages and our",
    "start": "3261016",
    "end": "3266783"
  },
  {
    "text": "router okay so let's go",
    "start": "3266783",
    "end": "3272983"
  },
  {
    "text": "back to the code okay packages uh cluster node first thing we'll do is",
    "start": "3272983",
    "end": "3284333"
  },
  {
    "text": "add a dependency over cluster rpc maybe before doing",
    "start": "3284333",
    "end": "3293533"
  },
  {
    "text": "that we can update all the packages yeah that would be nice yeah",
    "start": "3293533",
    "end": "3298750"
  },
  {
    "text": "oh 3.0.6 just released okay so why not let's upgrade",
    "start": "3298750",
    "end": "3305966"
  },
  {
    "text": "first okay so effect 3.0.4",
    "start": "3305966",
    "end": "3309416"
  },
  {
    "text": "in reason okay we'll be count 3.0.6",
    "start": "3312116",
    "end": "3317066"
  },
  {
    "text": "yes please and the schema uh 0.66.9 okay",
    "start": "3320750",
    "end": "3327382"
  },
  {
    "text": "0.66.7 will become 0.66.9",
    "start": "3329316",
    "end": "3334483"
  },
  {
    "text": "yes please and then platform node we need to update this as well",
    "start": "3336750",
    "end": "3342733"
  },
  {
    "text": "uh 0.47.6 yeah two patch versions basically",
    "start": "3342766",
    "end": "3351633"
  },
  {
    "text": "an effect platform .6 yes",
    "start": "3351633",
    "end": "3356916"
  },
  {
    "text": "okay this is basically just bookkeeping okay and i think another dependency i",
    "start": "3361949",
    "end": "3374050"
  },
  {
    "text": "have and is not listed here is effect rpc",
    "start": "3374050",
    "end": "3379316"
  },
  {
    "text": "yes here it is which is used in the example app at the moment",
    "start": "3381716",
    "end": "3387616"
  },
  {
    "text": "package rpc and the latest one is",
    "start": "3387616",
    "end": "3392883"
  },
  {
    "text": "30.11 okay",
    "start": "3393866",
    "end": "3398983"
  },
  {
    "text": "replace perfect okay so now pnpm install",
    "start": "3404433",
    "end": "3413133"
  },
  {
    "text": "okay and hope that we",
    "start": "3413783",
    "end": "3421316"
  },
  {
    "text": "didn't break anything okay so install worked so pnpm clean",
    "start": "3421316",
    "end": "3429533"
  },
  {
    "text": "pnpm build should work oh what did we break",
    "start": "3432433",
    "end": "3439500"
  },
  {
    "text": "what did we break let's see",
    "start": "3443566",
    "end": "3446483"
  },
  {
    "text": "what did you break maybe i'm gonna check let's see what",
    "start": "3450283",
    "end": "3457683"
  },
  {
    "text": "right oh a lot of things we break",
    "start": "3457683",
    "end": "3462683"
  },
  {
    "text": "yeah this is just because uh shutting off time unknown",
    "start": "3469316",
    "end": "3475483"
  },
  {
    "text": "i don't understand let me just reload oh",
    "start": "3477566",
    "end": "3482666"
  },
  {
    "text": "okay type unknown why why are you unknown what",
    "start": "3482666",
    "end": "3490283"
  },
  {
    "text": "that's odd key set is a set of powder dress key set",
    "start": "3491350",
    "end": "3499516"
  },
  {
    "text": "is a set of powder dress this should be an pod address right why don't you",
    "start": "3499516",
    "end": "3506216"
  },
  {
    "text": "understand this is a pod address maybe we are not on the",
    "start": "3506216",
    "end": "3512333"
  },
  {
    "text": "right version of TypeScript let's see we are oh we are on fifth dot",
    "start": "3512333",
    "end": "3520649"
  },
  {
    "text": "four four yeah yeah yeah yeah and maybe maybe they just moved to",
    "start": "3520649",
    "end": "3529983"
  },
  {
    "text": "let's see for example effect",
    "start": "3532516",
    "end": "3535133"
  },
  {
    "text": "it's in the root in the root package JSON maybe type script oh no it's fifth dot four dot",
    "start": "3547383",
    "end": "3556750"
  },
  {
    "text": "five so we should be okay so why don't you understand",
    "start": "3556750",
    "end": "3561716"
  },
  {
    "text": "that this is a pod address let's try to break it in too many parts",
    "start": "3562649",
    "end": "3569750"
  },
  {
    "text": "okay okay this should be an hash set of",
    "start": "3569800",
    "end": "3580116"
  },
  {
    "text": "pod addresses and that's fine and this should be a iterable right",
    "start": "3580116",
    "end": "3586516"
  },
  {
    "text": "yeah a iterable of pod address",
    "start": "3586516",
    "end": "3590183"
  },
  {
    "text": "I think that the problem is that it's making some mess with the",
    "start": "3598333",
    "end": "3604366"
  },
  {
    "text": "signatures yeah just moving it around fix the issue yeah uh those",
    "start": "3604366",
    "end": "3611182"
  },
  {
    "text": "damn TypeScript overloads yeah yeah the thing is that the type of pod has become unknown for no",
    "start": "3611183",
    "end": "3619883"
  },
  {
    "text": "reason the data first version infers as unknown and if instead I use",
    "start": "3619883",
    "end": "3627816"
  },
  {
    "text": "the pipeable version the pipeable version now infers correctly yeah",
    "start": "3627816",
    "end": "3634765"
  },
  {
    "text": "that's what I yeah no infer yeah",
    "start": "3634766",
    "end": "3638383"
  },
  {
    "text": "I am on fifth dot four I think",
    "start": "3640266",
    "end": "3643483"
  },
  {
    "text": "let me check TypeScript yeah 5.4.4 I think yeah",
    "start": "3645933",
    "end": "3652399"
  },
  {
    "text": "yeah but I'm fine to be honest it's even more readable if I use only the pipeable version yeah",
    "start": "3653750",
    "end": "3659199"
  },
  {
    "text": "let's see if there are other there are other parts where this",
    "start": "3660383",
    "end": "3665899"
  },
  {
    "text": "is an issue yeah that was the only part in the entire code base so the forEach signature",
    "start": "3667666",
    "end": "3674233"
  },
  {
    "text": "was the only one I think the issue yeah build",
    "start": "3676616",
    "end": "3680833"
  },
  {
    "text": "yeah I thought maybe I will try that I just want to see yeah it worked okay so maybe we can update",
    "start": "3685366",
    "end": "3692166"
  },
  {
    "text": "everything to 5.4.5 maybe fix something okay so",
    "start": "3692166",
    "end": "3700383"
  },
  {
    "text": "yeah let's check it out uh TypeScript",
    "start": "3700533",
    "end": "3705966"
  },
  {
    "text": "here's the 5.4.5 here",
    "start": "3705983",
    "end": "3714182"
  },
  {
    "text": "okay that's goes I need to understand still why if I told",
    "start": "3717666",
    "end": "3724983"
  },
  {
    "text": "you to exclude node modules you are still showing node modules here",
    "start": "3724983",
    "end": "3731100"
  },
  {
    "text": "was it that if I were a little back to knowing for to use the custom one yeah I saw that yesterday yeah so maybe that will also fix it okay",
    "start": "3733183",
    "end": "3743166"
  },
  {
    "text": "so 5.4.5 and I should have no",
    "start": "3743166",
    "end": "3750416"
  },
  {
    "text": "more instances I think yeah that's the only part okay so let's",
    "start": "3750416",
    "end": "3758300"
  },
  {
    "text": "try again pnpm install okay and let's try restarting TypeScript",
    "start": "3758300",
    "end": "3768133"
  },
  {
    "text": "server uh where was the thing it wasn't here it was shard manager",
    "start": "3768133",
    "end": "3773316"
  },
  {
    "text": "okay let's try to put it back how it was before",
    "start": "3783483",
    "end": "3788016"
  },
  {
    "text": "here and restart the window and see",
    "start": "3789916",
    "end": "3796783"
  },
  {
    "text": "no seems like same issue even with TypeScript 5.4.5",
    "start": "3798333",
    "end": "3803566"
  },
  {
    "text": "uh effect should be already be updated should be 3.0.5 five I think",
    "start": "3805149",
    "end": "3811083"
  },
  {
    "text": "let me check the package JSON but should be already the latest one um yeah 3.0.6 sorry not five six",
    "start": "3812949",
    "end": "3820899"
  },
  {
    "text": "yeah already latest one maybe maybe there's also something going",
    "start": "3820899",
    "end": "3826899"
  },
  {
    "text": "on with the cache let me just clean and pnpm clean",
    "start": "3826899",
    "end": "3830766"
  },
  {
    "text": "okay pnpm build",
    "start": "3832416",
    "end": "3835300"
  },
  {
    "text": "yeah yeah still failing okay uh so let's be a good citizen and",
    "start": "3841516",
    "end": "3847949"
  },
  {
    "text": "report box so for now I'll move this one in here okay let's try to",
    "start": "3847949",
    "end": "3854500"
  },
  {
    "text": "create a minimal repro something like repro dot yes",
    "start": "3854500",
    "end": "3861000"
  },
  {
    "text": "okay import everything as HashSet from effect HashSet",
    "start": "3861300",
    "end": "3870116"
  },
  {
    "text": "const a equal HashSet",
    "start": "3872600",
    "end": "3875649"
  },
  {
    "text": "from iterable and we'll say something like a b c",
    "start": "3879949",
    "end": "3887766"
  },
  {
    "text": "and then we'll do something like const b equals pipe",
    "start": "3888500",
    "end": "3897215"
  },
  {
    "text": "a effect.forEach",
    "start": "3902016",
    "end": "3906016"
  },
  {
    "text": "and we'll do something like Effect.void",
    "start": "3908983",
    "end": "3914316"
  },
  {
    "text": "okay and here here is who or oh this is the pipable version yeah",
    "start": "3918683",
    "end": "3924166"
  },
  {
    "text": "is expected to work but here if I do see and if I",
    "start": "3924166",
    "end": "3930383"
  },
  {
    "text": "use the data first version",
    "start": "3930383",
    "end": "3933550"
  },
  {
    "text": "and this should infer as unknown ideally",
    "start": "3936016",
    "end": "3940783"
  },
  {
    "text": "it was working it is working with this oh maybe it's maybe it's not an",
    "start": "3943850",
    "end": "3952449"
  },
  {
    "text": "issue yeah but it was inside let's try with",
    "start": "3952449",
    "end": "3957683"
  },
  {
    "text": "something more class PodAddress Oh maybe it's not just that",
    "start": "3957683",
    "end": "3966366"
  },
  {
    "text": "Is that I also add all other things inside the pipe",
    "start": "3966533",
    "end": "3970765"
  },
  {
    "text": "So maybe I need also to put in the",
    "start": "3972500",
    "end": "3975516"
  },
  {
    "text": "For each Oh map Chunk.fromIterable Yeah I think that is this one that",
    "start": "3977616",
    "end": "3984199"
  },
  {
    "text": "Yeah yeah I think that it's this one that make it",
    "start": "3985466",
    "end": "3988899"
  },
  {
    "text": "Yeah this works And this one shouldn't",
    "start": "4014899",
    "end": "4020666"
  },
  {
    "text": "What is actually the issue I think is having Changdot from either ball",
    "start": "4040333",
    "end": "4046466"
  },
  {
    "text": "And if I move this one Oh we also had concurrency inherit maybe it's this one",
    "start": "4046466",
    "end": "4052765"
  },
  {
    "text": "Because that will trigger a different",
    "start": "4054300",
    "end": "4056216"
  },
  {
    "text": "pod address, yeah",
    "start": "4060633",
    "end": "4062216"
  },
  {
    "text": "Let's try snagging this one This is also this is effect adapter not pipe",
    "start": "4075466",
    "end": "4081366"
  },
  {
    "text": "So yeah maybe it's inside effect adapter, yeah",
    "start": "4081366",
    "end": "4085166"
  },
  {
    "text": "Cons test equals effect.gen function",
    "start": "4086533",
    "end": "4092199"
  },
  {
    "text": "Oh you were able to reproduce it Nice Effect forEach",
    "start": "4097966",
    "end": "4103433"
  },
  {
    "text": "Yeah I wanna try that I just didn't understand if it was me or something else",
    "start": "4104883",
    "end": "4111149"
  },
  {
    "text": "You can see the app So basically it's something like",
    "start": "4113050",
    "end": "4118983"
  },
  {
    "text": "Effect forEach",
    "start": "4121283",
    "end": "4122783"
  },
  {
    "text": "HashSet Union",
    "start": "4126533",
    "end": "4130500"
  },
  {
    "text": "And we had HashSet.make New PodAddress",
    "start": "4132149",
    "end": "4137183"
  },
  {
    "text": "A Hashset.make New PodAddress B",
    "start": "4137416",
    "end": "4145283"
  },
  {
    "text": "And then we have method N Effect.void",
    "start": "4147416",
    "end": "4154899"
  },
  {
    "text": "This is unknown, yeah Yeah this is unknown So the thing is related to",
    "start": "4159283",
    "end": "4165683"
  },
  {
    "text": "Hashset.union Right",
    "start": "4165683",
    "end": "4168616"
  },
  {
    "text": "Yeah it's Hashset.union That Screws up everything Yeah",
    "start": "4172416",
    "end": "4177833"
  },
  {
    "text": "That's odd Yeah that's odd",
    "start": "4178416",
    "end": "4184100"
  },
  {
    "text": "Okay So back to what we were doing",
    "start": "4186100",
    "end": "4189733"
  },
  {
    "text": "Okay for now we will move to the pipeable one Which also makes more sense Because we were",
    "start": "4191483",
    "end": "4196550"
  },
  {
    "text": "already inside some pipeable Uh yeah",
    "start": "4196550",
    "end": "4200883"
  },
  {
    "text": "Also ideally this one should not be required anymore",
    "start": "4202300",
    "end": "4205066"
  },
  {
    "text": "So the fourth one",
    "start": "4208866",
    "end": "4209833"
  },
  {
    "text": "This was related to Yeah exactly",
    "start": "4214383",
    "end": "4217500"
  },
  {
    "text": "Yeah this one actually should be removed anyway Okay So",
    "start": "4224366",
    "end": "4230466"
  },
  {
    "text": "Back to where we were",
    "start": "4231366",
    "end": "4233000"
  },
  {
    "text": "HelloHanSohai I actually done a bit of Skylife X System before",
    "start": "4237366",
    "end": "4242166"
  },
  {
    "text": "And I feel it's complicated How's your experience with Effect-TS? Okay so I fell in love with Effect-TS",
    "start": "4242383",
    "end": "4249733"
  },
  {
    "text": "About three years ago Almost four years ago And the thing is that",
    "start": "4249733",
    "end": "4255399"
  },
  {
    "text": "Scala Effect System I don't have any experience with Scala But I've been orbiting",
    "start": "4255550",
    "end": "4263333"
  },
  {
    "text": "through this Scala world And the thing is that I think that in TypeScript",
    "start": "4263333",
    "end": "4269266"
  },
  {
    "text": "It's way way way simpler than Scala Because in the way the language works",
    "start": "4269383",
    "end": "4276766"
  },
  {
    "text": "The way TypeScript works makes it even easier Uh I've read people",
    "start": "4276766",
    "end": "4283483"
  },
  {
    "text": "comparing Scala 3 to TypeScript Saying that they are more similar than it was with Scala 2",
    "start": "4283483",
    "end": "4289600"
  },
  {
    "text": "But yeah My experience is very very very great And you don't need to",
    "start": "4289600",
    "end": "4296800"
  },
  {
    "text": "learn a lot about Effect To get started with it Sure if you learn a lot about it",
    "start": "4296800",
    "end": "4302033"
  },
  {
    "text": "You can get almost everything from it",
    "start": "4302033",
    "end": "4307766"
  },
  {
    "text": "But yeah To start with Effect you just need to know few operators Very few",
    "start": "4308016",
    "end": "4314050"
  },
  {
    "text": "Four or five methods And start with those And I can assure you that I have a",
    "start": "4314366",
    "end": "4320250"
  },
  {
    "text": "production app I built And shipped And this started by using",
    "start": "4320250",
    "end": "4326349"
  },
  {
    "text": "I think 20 Effect methods Nothing more And then one year after",
    "start": "4326350",
    "end": "4332483"
  },
  {
    "text": "I started improving that But yeah you can start using Effect with knowing very very few methods",
    "start": "4332483",
    "end": "4339948"
  },
  {
    "text": "My personal list of Effect methods you need to start with Maybe I can show you something",
    "start": "4340366",
    "end": "4346366"
  },
  {
    "text": "Something like Methods Not just, okay",
    "start": "4346366",
    "end": "4351899"
  },
  {
    "text": "Let's say that Import everything as effect From Effect",
    "start": "4352683",
    "end": "4359633"
  },
  {
    "text": "You start from something like Effect.succeed True",
    "start": "4361383",
    "end": "4367199"
  },
  {
    "text": "That just creates an effect that will always succeed with the value of true And then you start",
    "start": "4368033",
    "end": "4374850"
  },
  {
    "text": "tackling the error channel Using Effect.fail",
    "start": "4374850",
    "end": "4380433"
  },
  {
    "text": "From user For example And this is the second method you start going through",
    "start": "4383983",
    "end": "4390599"
  },
  {
    "text": "And you see that it will never succeed But will fail with the string error And then you start doing okay",
    "start": "4390600",
    "end": "4397583"
  },
  {
    "text": "But those are pure values So how can I actually use that",
    "start": "4397583",
    "end": "4402765"
  },
  {
    "text": "And inside your code base you may have Synchronous function Like for example",
    "start": "4402766",
    "end": "4408000"
  },
  {
    "text": "Effect.sync Something like math.random",
    "start": "4409383",
    "end": "4414966"
  },
  {
    "text": "And this is an effect that every time it's evaluated will return a number",
    "start": "4414966",
    "end": "4421800"
  },
  {
    "text": "And this is the first kind of effect you will try to introduce into your application But the most one you will use is",
    "start": "4422366",
    "end": "4429100"
  },
  {
    "text": "something that is async Like something Effect.tryPromise",
    "start": "4429100",
    "end": "4435233"
  },
  {
    "text": "And will try to run a promise Something like Fetch.blahblahblah",
    "start": "4437216",
    "end": "4443066"
  },
  {
    "text": "And will eventually catch the error And maybe translate the error in",
    "start": "4445033",
    "end": "4450233"
  },
  {
    "text": "something like a string So now we have an effect that will run",
    "start": "4450233",
    "end": "4457100"
  },
  {
    "text": "Will return a response And then have a string as an error",
    "start": "4457366",
    "end": "4463666"
  },
  {
    "text": "But maybe the other operator you will use is okay",
    "start": "4464366",
    "end": "4469750"
  },
  {
    "text": "Now I have all of those effects How can I combine them So you can start",
    "start": "4469750",
    "end": "4475133"
  },
  {
    "text": "building your first program",
    "start": "4475133",
    "end": "4476466"
  },
  {
    "text": "Using Effect.gen Which is just basically a replacement",
    "start": "4480366",
    "end": "4488300"
  },
  {
    "text": "For async await And you can say maybe const response Equals yield*",
    "start": "4489366",
    "end": "4496500"
  },
  {
    "text": "And you yield async that you defined before",
    "start": "4497366",
    "end": "4502949"
  },
  {
    "text": "And now you see that this response is the response And then you can build and go on",
    "start": "4503366",
    "end": "4509449"
  },
  {
    "text": "For example You can do something that takes the response and gets the result back",
    "start": "4509449",
    "end": "4515483"
  },
  {
    "text": "Or whatever This is the first method you will use I can assure you that you can build an",
    "start": "4515483",
    "end": "4522283"
  },
  {
    "text": "entire application by just using that And that's it Effect in 3 minutes",
    "start": "4522283",
    "end": "4528333"
  },
  {
    "text": "Nothing more",
    "start": "4528366",
    "end": "4531649"
  },
  {
    "text": "Oh also if you have There is a function",
    "start": "4537066",
    "end": "4540533"
  },
  {
    "text": "Let's also see something Async Function",
    "start": "4543366",
    "end": "4547399"
  },
  {
    "text": "Test Await Fetch",
    "start": "4548399",
    "end": "4552783"
  },
  {
    "text": "Okay There is also a language server Plugin that ideally if you have an async function",
    "start": "4560033",
    "end": "4565066"
  },
  {
    "text": "You can rewrite to effect.gen with failures",
    "start": "4565366",
    "end": "4569500"
  },
  {
    "text": "And this is the same code That will try to use effects",
    "start": "4571366",
    "end": "4576183"
  },
  {
    "text": "And now you can see that this will return An effect with void",
    "start": "4577449",
    "end": "4582782"
  },
  {
    "text": "because we did not return nothing And will also automatically put for you",
    "start": "4582783",
    "end": "4588283"
  },
  {
    "text": "Tagged errors, error number 1 You can then rename or change whatever you want",
    "start": "4588516",
    "end": "4594049"
  },
  {
    "text": "And yeah, this is a quick way to get started with that And slowly, slowly, slowly",
    "start": "4594366",
    "end": "4600149"
  },
  {
    "text": "adopt effect into your code base You start with these methods And you will have initially a lot of",
    "start": "4600149",
    "end": "4607666"
  },
  {
    "text": "Try promises And run promise Which is the way you actually run an effect",
    "start": "4608016",
    "end": "4612983"
  },
  {
    "text": "And then slowly, slowly, slowly start incorporating Effect into your whole code base",
    "start": "4613366",
    "end": "4620583"
  },
  {
    "text": "Okay, so Back to our effect update",
    "start": "4623766",
    "end": "4627350"
  },
  {
    "text": "We run install We try to build Maybe pnpm clean before",
    "start": "4629366",
    "end": "4635783"
  },
  {
    "text": "Okay, pnpm build Let's see if we have other errors Okay, indeed we have other errors",
    "start": "4638366",
    "end": "4644266"
  },
  {
    "text": "But those are in this file that I need to delete",
    "start": "4644366",
    "end": "4649433"
  },
  {
    "text": "Move to trash Pnpm build",
    "start": "4650366",
    "end": "4653950"
  },
  {
    "text": "Okay Now it's building",
    "start": "4657366",
    "end": "4660066"
  },
  {
    "text": "Now we maybe  -fix And then we test",
    "start": "4665049",
    "end": "4672149"
  },
  {
    "text": "Pnpm test Okay, seems like nothing has broken",
    "start": "4675933",
    "end": "4682983"
  },
  {
    "text": "Let's just wait for the test to complete while I sip some tea",
    "start": "4683366",
    "end": "4687966"
  },
  {
    "text": "So are you guys already using effect? Or are you looking",
    "start": "4693366",
    "end": "4699250"
  },
  {
    "text": "forward to start using effect In some of your project?",
    "start": "4699250",
    "end": "4703850"
  },
  {
    "text": "Really interested in hearing from you I have a few effect projects out there",
    "start": "4706399",
    "end": "4713950"
  },
  {
    "text": "I think that I have almost five production grade effect projects",
    "start": "4713950",
    "end": "4719899"
  },
  {
    "text": "Yeah, but there are a lot of There are a lot of lines of code in those",
    "start": "4720133",
    "end": "4726750"
  },
  {
    "text": "So yeah, the oldest one is four years Yeah, this end of okay, that's fine",
    "start": "4727149",
    "end": "4732500"
  },
  {
    "text": "The oldest one is started four years ago As is a warehouse management application",
    "start": "4733133",
    "end": "4739932"
  },
  {
    "text": "And has all of the front end using effect And now we are starting to rewrite",
    "start": "4740133",
    "end": "4748765"
  },
  {
    "text": "We are starting to analyze how to rewrite the backend From C sharp to",
    "start": "4749133",
    "end": "4755115"
  },
  {
    "text": "I am proposing using node And potentially now we will start using",
    "start": "4756133",
    "end": "4762349"
  },
  {
    "text": "effect also on the backend But yeah, it's something that we are still I'm still trying to convince",
    "start": "4762350",
    "end": "4768899"
  },
  {
    "text": "people out using node and etc Because my company most of the backend",
    "start": "4768899",
    "end": "4774316"
  },
  {
    "text": "people are .NET people So moving them from one language to another",
    "start": "4774316",
    "end": "4779566"
  },
  {
    "text": "Could be something more difficult Okay, so let's see what we have changed",
    "start": "4780149",
    "end": "4786750"
  },
  {
    "text": "We have changed our packages Okay, our log file I've changed indeed",
    "start": "4787133",
    "end": "4793299"
  },
  {
    "text": "Yeah, we have changed dependency Here we have a temporary work around for that issue",
    "start": "4794133",
    "end": "4799533"
  },
  {
    "text": "And here, okay Okay, okay",
    "start": "4800133",
    "end": "4806649"
  },
  {
    "text": "So git scout branch update effect",
    "start": "4807266",
    "end": "4813633"
  },
  {
    "text": "3.0.6 Okay, update effect",
    "start": "4815783",
    "end": "4823615"
  },
  {
    "text": "init, yes, publish",
    "start": "4825133",
    "end": "4828416"
  },
  {
    "text": "Okay, now create a pull request",
    "start": "4832133",
    "end": "4834032"
  },
  {
    "text": "Maybe pull request on effect cluster Instead of the effect code base",
    "start": "4839583",
    "end": "4845049"
  },
  {
    "text": "Here it is, compare and pull request Update effect, nothing more to say",
    "start": "4845133",
    "end": "4851765"
  },
  {
    "text": "Let's see",
    "start": "4858133",
    "end": "4860133"
  },
  {
    "text": "Oh yeah, you're right ghpr create -f Yeah, also I should use",
    "start": "4864049",
    "end": "4872416"
  },
  {
    "text": "I have lazygit It was introduced to me by Datner",
    "start": "4873766",
    "end": "4879865"
  },
  {
    "text": "And yeah, it's actually great but yeah I need to start thinking more about that",
    "start": "4879866",
    "end": "4886399"
  },
  {
    "text": "I am always I always learn new thing and then",
    "start": "4886399",
    "end": "4892116"
  },
  {
    "text": "completely forget about that Yeah, it's basically for people like me that don't know",
    "start": "4892116",
    "end": "4898500"
  },
  {
    "text": "almost nothing about git And this litigate interface is very very great",
    "start": "4898799",
    "end": "4905765"
  },
  {
    "text": "because it's something like a CLI interface You can click around things and see and have your branches",
    "start": "4905799",
    "end": "4912766"
  },
  {
    "text": "and whatever you want And then you can investigate your",
    "start": "4912799",
    "end": "4917916"
  },
  {
    "text": "branches and whatever And you can create new branches and push and do whatever you want from here",
    "start": "4917916",
    "end": "4923566"
  },
  {
    "text": "And yeah example, we'll kill this",
    "start": "4923566",
    "end": "4928216"
  },
  {
    "text": "update effect, this is the one I'm working on right now Yeah, everything",
    "start": "4928866",
    "end": "4933916"
  },
  {
    "text": "passed, so squash and merge",
    "start": "4933916",
    "end": "4935683"
  },
  {
    "text": "But yeah, I need to start using the gh CLI That will also delete the branch once",
    "start": "4941283",
    "end": "4949383"
  },
  {
    "text": "it created the pull request I need to move that",
    "start": "4949799",
    "end": "4955483"
  },
  {
    "text": "Let's move back to the main branch",
    "start": "4956799",
    "end": "4958583"
  },
  {
    "text": "Okay Okay And this pull Everything up to date",
    "start": "4964966",
    "end": "4970483"
  },
  {
    "text": "Okay So I'm starting to run out of time I think",
    "start": "4972799",
    "end": "4978316"
  },
  {
    "text": "Yeah, it's what time is it? Yeah, it's almost lunch time, so yeah",
    "start": "4978316",
    "end": "4984166"
  },
  {
    "text": "I think that for now I will close the stream here",
    "start": "4984799",
    "end": "4988816"
  },
  {
    "text": "We did up some cleanup today It was a pleasure speaking with you guys",
    "start": "4991649",
    "end": "4999333"
  },
  {
    "text": "And today we accomplished two PRs I think, yeah Yeah, we updated the effect",
    "start": "5001200",
    "end": "5008133"
  },
  {
    "text": "We used the effect data We showed the effect cluster to other people",
    "start": "5008799",
    "end": "5014600"
  },
  {
    "text": "And yeah, so hope you had some fun Thanks for joining in See you soon next time",
    "start": "5016049",
    "end": "5023083"
  },
  {
    "text": "Bye bye",
    "start": "5023466",
    "end": "5023799"
  }
]