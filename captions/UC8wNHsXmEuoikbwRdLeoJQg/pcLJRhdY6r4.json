[
  {
    "text": "Hey, everybody. We're doing another quick cluster design session, also to let Mike test out",
    "start": "3266",
    "end": "8699"
  },
  {
    "text": "his fancy new headphones. But yeah, I think I found--",
    "start": "8699",
    "end": "14933"
  },
  {
    "text": "so what I've been working on is trying to find an encoding for the envelope type that works well",
    "start": "15233",
    "end": "21900"
  },
  {
    "text": "at serialization boundaries, but also allows us to propagate the",
    "start": "22500",
    "end": "28466"
  },
  {
    "text": "context that might be required by a message schema for serialization",
    "start": "28466",
    "end": "34466"
  },
  {
    "text": "and deserialization. Because effect schema, for those of you who don't know, does support running effectful",
    "start": "34466",
    "end": "41800"
  },
  {
    "text": "transformations, where you can access the environment.",
    "start": "41800",
    "end": "47633"
  },
  {
    "text": "And so you may actually have environmental dependencies",
    "start": "48333",
    "end": "53333"
  },
  {
    "text": "in your schemas. And so I think I found an encoding for envelope that's",
    "start": "53599",
    "end": "58533"
  },
  {
    "text": "working well. But anyways, Mike and I thought it'd be good to just hop on and run through it,",
    "start": "59166",
    "end": "64533"
  },
  {
    "text": "see if I'm missing something. So we talked last time about how an",
    "start": "65433",
    "end": "71766"
  },
  {
    "text": "envelope is basically just the address of an entity and the message that's",
    "start": "71766",
    "end": "77800"
  },
  {
    "text": "going to that entity. And I was thinking about what an envelope looks",
    "start": "77800",
    "end": "85366"
  },
  {
    "text": "like at serialization boundaries. And I think that the first thing",
    "start": "85366",
    "end": "91599"
  },
  {
    "text": "adjustment I made here is I made envelope a subtype of serializable, which basically",
    "start": "91599",
    "end": "97433"
  },
  {
    "text": "allows us to use the serializable module from schema",
    "start": "97599",
    "end": "103199"
  },
  {
    "text": "to serialize and deserialize an envelope. And you can basically embed the schema directly",
    "start": "104533",
    "end": "109933"
  },
  {
    "text": "inside the envelope, which is what's nice about the serializable interface.",
    "start": "110099",
    "end": "114899"
  },
  {
    "text": "Kind of show what that looks like in a minute. But anyways, with this type--",
    "start": "115599",
    "end": "119000"
  },
  {
    "text": "Now the envelope in itself is not serialized. So it contains the message",
    "start": "121133",
    "end": "127033"
  },
  {
    "text": "rather than the serialized message. Well, the deserialized envelope.",
    "start": "127033",
    "end": "135532"
  },
  {
    "text": "So in a serializable, the first type parameter here is the deserialized output type.",
    "start": "136533",
    "end": "144033"
  },
  {
    "text": "The second parameter is the serialized input type. And then the third",
    "start": "144800",
    "end": "149965"
  },
  {
    "text": "parameter is any context that's required to serialize or deserialize. Yeah, I'm referring to the field's",
    "start": "149966",
    "end": "156366"
  },
  {
    "text": "address and message. Yeah, so the envelope itself, this interface",
    "start": "156366",
    "end": "163199"
  },
  {
    "text": "here, represents the deserialized envelope. The encoded version, which I'll show in a second,",
    "start": "163533",
    "end": "169400"
  },
  {
    "text": "represents what happens when you run a serializable.serialize on an envelope. And the encoded version, if you notice,",
    "start": "170233",
    "end": "176965"
  },
  {
    "text": "doesn't carry any information about the message. It's just the message",
    "start": "177599",
    "end": "182833"
  },
  {
    "text": "field in the encoded interface is just unknown. And in addition, the address is the type",
    "start": "182833",
    "end": "190633"
  },
  {
    "text": "of the encoded address. So we lose basically all, as we should, at the serialization boundaries, we lose",
    "start": "190633",
    "end": "196500"
  },
  {
    "text": "all type information and we encode the envelope into something that's basically JSON serializable.",
    "start": "196500",
    "end": "201965"
  },
  {
    "text": "So the message becomes unknown and the entity address becomes its encoded counterpart.",
    "start": "202433",
    "end": "210233"
  },
  {
    "text": "And to achieve this type signature up here,",
    "start": "211033",
    "end": "217733"
  },
  {
    "text": "where now, if we have an envelope and we run serializable, that serialize on an envelope, we end up",
    "start": "218166",
    "end": "225699"
  },
  {
    "text": "getting the encoded version out. To do this, I had to declare",
    "start": "225766",
    "end": "230833"
  },
  {
    "text": "a couple of different schemas. So I'm going to skip over the prototype and go to the bottom and talk about the",
    "start": "230833",
    "end": "236500"
  },
  {
    "text": "different schemas that I declared. So the first thing I want to talk about",
    "start": "236500",
    "end": "242433"
  },
  {
    "text": "is I kind of took inspiration from how Giulio and Mattia and I had",
    "start": "242633",
    "end": "248766"
  },
  {
    "text": "worked on a version of this before, but I kind of changed the way it works a little bit.",
    "start": "248766",
    "end": "253633"
  },
  {
    "text": "But I took inspiration for declaring these schemas from how Giulio defines",
    "start": "254500",
    "end": "260065"
  },
  {
    "text": "schemas that take generic types in. So like either an exit, an option,",
    "start": "260533",
    "end": "265699"
  },
  {
    "text": "and all the schemas for those things. We basically dropped down to the schema.declare API.",
    "start": "265933",
    "end": "271500"
  },
  {
    "text": "So here, this envelope from self type basically declares a",
    "start": "272866",
    "end": "278400"
  },
  {
    "text": "schema that encodes-- it's still an envelope here.",
    "start": "278400",
    "end": "284932"
  },
  {
    "text": "Actually, I think this is-- yeah, this is good.",
    "start": "285833",
    "end": "289699"
  },
  {
    "text": "This is basically a schema that represents an envelope and getting an envelope from itself.",
    "start": "290966",
    "end": "296633"
  },
  {
    "text": "I still think I have to tweak some of these types because I think this is wrong. I think envelope from self",
    "start": "296633",
    "end": "303066"
  },
  {
    "text": "probably has on both sides the same type, but I might be wrong.",
    "start": "303066",
    "end": "312199"
  },
  {
    "text": "Yeah, I haven't written any tests for this, but I'm pretty sure you're right. I think this is supposed to be this.",
    "start": "313033",
    "end": "317599"
  },
  {
    "text": "But I'm going to leave it like this for now because I'm going to be writing tests after this call.",
    "start": "318366",
    "end": "322666"
  },
  {
    "text": "But the point is-- Yeah, well, especially when I'm doing stuff that I'm not fully sure works.",
    "start": "324400",
    "end": "331266"
  },
  {
    "text": "But the idea here is that we can encode information about the message into this schema.",
    "start": "332933",
    "end": "339932"
  },
  {
    "text": "And then similarly, I think this one, this envelope schema here is actually declared",
    "start": "340933",
    "end": "346133"
  },
  {
    "text": "correctly where we essentially want to be able to declare the conversion between an envelope",
    "start": "346133",
    "end": "352533"
  },
  {
    "text": "that contains a message and an envelope that's encoded. And this is the actual schema that",
    "start": "352733",
    "end": "358333"
  },
  {
    "text": "gets embedded into the serializable side of an envelope. So I'll show you what that looks like in a second.",
    "start": "358333",
    "end": "364199"
  },
  {
    "text": "But basically, this envelope schema here is the important one where",
    "start": "365000",
    "end": "370866"
  },
  {
    "text": "we have the message coming in, this message type here that comes in.",
    "start": "370866",
    "end": "376633"
  },
  {
    "text": "And we grab the-- this is basically just the",
    "start": "377500",
    "end": "382566"
  },
  {
    "text": "schema type for a message. Basically, just expands out the type parameters here.",
    "start": "382566",
    "end": "386833"
  },
  {
    "text": "And then we declare the encoded envelope type or schema here.",
    "start": "388400",
    "end": "393533"
  },
  {
    "text": "And then we declare a transformation between the encoded and",
    "start": "394733",
    "end": "400332"
  },
  {
    "text": "the not encoded envelope where we can basically",
    "start": "400333",
    "end": "405800"
  },
  {
    "text": "use the different schemas that we have here to encode and decode between the different",
    "start": "405800",
    "end": "412699"
  },
  {
    "text": "representations of the envelope. So at a serialization boundary, this is the schema that's actually being used",
    "start": "412699",
    "end": "418666"
  },
  {
    "text": "to do the conversion from an encoded to a decoded and vice versa.",
    "start": "419233",
    "end": "423133"
  },
  {
    "text": "And then this envelope schema here is what actually gets embedded inside the prototype.",
    "start": "424699",
    "end": "429533"
  },
  {
    "text": "Where is it? Here. For an envelope. So this serializable symbol here is what",
    "start": "431333",
    "end": "440500"
  },
  {
    "text": "the serializable module uses under the hood to do serialization.",
    "start": "440500",
    "end": "445433"
  },
  {
    "text": "And essentially, what's nice here is when we actually construct an envelope-- so when we use make and",
    "start": "446366",
    "end": "452466"
  },
  {
    "text": "we create this prototype-- we'll automatically get",
    "start": "452466",
    "end": "457533"
  },
  {
    "text": "this serializable schema constructed from the message. And so at boundaries where we actually",
    "start": "457533",
    "end": "463666"
  },
  {
    "text": "need to do this transformation, it becomes really easy. We just call serializable serialize or deserialize.",
    "start": "463666",
    "end": "469000"
  },
  {
    "text": "So anyways, I wanted to show this first, because this leads me to the point",
    "start": "470633",
    "end": "475966"
  },
  {
    "text": "about what I think I have achieved in the sharding",
    "start": "476133",
    "end": "481500"
  },
  {
    "text": "service that allows us to carry context to the appropriate places for the user.",
    "start": "481666",
    "end": "487166"
  },
  {
    "text": "So what do I mean by that? I mean, when a user declares a message type,",
    "start": "487966",
    "end": "492800"
  },
  {
    "text": "we want to be able to propagate the contact requirements for that schema to the appropriate places.",
    "start": "494633",
    "end": "500366"
  },
  {
    "text": "And so let me show what I did. Maybe we can start with the interface for sharding",
    "start": "501433",
    "end": "507333"
  },
  {
    "text": "as it is currently. So in the sharding service, there",
    "start": "507566",
    "end": "513932"
  },
  {
    "text": "are a couple of additional methods, I think since we spoke last time, one of them",
    "start": "513933",
    "end": "519166"
  },
  {
    "text": "being this make messenger method. This make messenger method is what",
    "start": "519233",
    "end": "525833"
  },
  {
    "text": "allows you to construct a messenger that can then be used to communicate with an entity.",
    "start": "525833",
    "end": "531066"
  },
  {
    "text": "And this is kind of the first piece. So when a user is",
    "start": "532033",
    "end": "537333"
  },
  {
    "text": "interacting with sharding and actually needs to know about the context of messages that",
    "start": "537333",
    "end": "542699"
  },
  {
    "text": "need to be provided, there's only really two points at which that happens, at least that I know of at the moment.",
    "start": "542699",
    "end": "549066"
  },
  {
    "text": "The first is when you are creating a messenger.",
    "start": "550733",
    "end": "556365"
  },
  {
    "text": "Because when you create a messenger, then that messenger can be used to send messages directly to an entity, whether",
    "start": "557366",
    "end": "563933"
  },
  {
    "text": "it's like a remote entity or a local entity is kind of abstracted away by the messenger.",
    "start": "563933",
    "end": "568133"
  },
  {
    "text": "But the point here is that when you create a messenger, at this point, the",
    "start": "570633",
    "end": "577466"
  },
  {
    "text": "requirements from that message are actually added to this effect.",
    "start": "577466",
    "end": "583365"
  },
  {
    "text": "So when you construct a messenger, it requires the context that's used to serialize",
    "start": "584000",
    "end": "589800"
  },
  {
    "text": "and deserialize messages. And then the other place where this is added is when we actually register an entity.",
    "start": "589800",
    "end": "596000"
  },
  {
    "text": "And by adding the context for a message in these two places,",
    "start": "598266",
    "end": "604233"
  },
  {
    "text": "I think I've arrived at something that is pretty nice from a usability perspective",
    "start": "605899",
    "end": "611899"
  },
  {
    "text": "on the user end. Because when a message--",
    "start": "613066",
    "end": "618600"
  },
  {
    "text": "so on a given pod, when you create a messenger",
    "start": "619366",
    "end": "624566"
  },
  {
    "text": "and you use a messenger to communicate with an entity, that's one place where",
    "start": "624866",
    "end": "630332"
  },
  {
    "text": "messages are being fired off to different entities. But the other side is when a",
    "start": "630333",
    "end": "635865"
  },
  {
    "text": "pod actually receives a message. And then you want to forward that message to the local entity manager for that service.",
    "start": "635866",
    "end": "642365"
  },
  {
    "text": "Yeah, Mattia, I think the serializable with results piece-- I haven't decided if envelopes should also contain the result",
    "start": "643199",
    "end": "651300"
  },
  {
    "text": "yet because we basically haven't talked at all about the client side yet. So that's why I haven't",
    "start": "651500",
    "end": "659166"
  },
  {
    "text": "included the success and failure context yet in these types because we",
    "start": "659166",
    "end": "666500"
  },
  {
    "text": "haven't talked at all about what the client interface is going to look like or how it's going to work yet. Right now, I think",
    "start": "666500",
    "end": "671966"
  },
  {
    "text": "we're focusing pretty much on intercluster communication. We haven't really talked about the client protocols.",
    "start": "671966",
    "end": "676966"
  },
  {
    "text": "Eventually, we might need this to be not just the serializable context, but we may need to extend the envelope again",
    "start": "677199",
    "end": "683899"
  },
  {
    "text": "with the result types. But I think that conversation can be deferred. And it's pretty easy to extend these",
    "start": "683899",
    "end": "690966"
  },
  {
    "text": "context types later. But anyways, the other place where--",
    "start": "690966",
    "end": "696766"
  },
  {
    "text": "the other side is when a pod receives a message, the pod needs to take that message",
    "start": "698000",
    "end": "704600"
  },
  {
    "text": "and forward it to the appropriate entity manager. And to do that, it needs to deserialize the envelope.",
    "start": "704600",
    "end": "709365"
  },
  {
    "text": "So that gets inside sharding.",
    "start": "710899",
    "end": "719032"
  },
  {
    "text": "And I'll show how it works. But inside sharding, I was able to abstract that away.",
    "start": "719033",
    "end": "725300"
  },
  {
    "text": "So let's take a look and show what I'm talking about. So inside sharding.",
    "start": "725699",
    "end": "732365"
  },
  {
    "text": "The first thing I want to show-- the messenger interface has not been fleshed out yet,",
    "start": "734699",
    "end": "739966"
  },
  {
    "text": "because ideally, a messenger would have the ability to ask and tell, just like a normal client would.",
    "start": "740300",
    "end": "746865"
  },
  {
    "text": "But we haven't talked about client communication or anything like that",
    "start": "747633",
    "end": "752833"
  },
  {
    "text": "yet, which I just mentioned. So right now, the messenger interface is kind of a stub inside here.",
    "start": "752833",
    "end": "758866"
  },
  {
    "text": "But the point is the same. So when you register a messenger, when you create a messenger, you need to provide the context for the message.",
    "start": "758866",
    "end": "767300"
  },
  {
    "text": "And then we can just grab-- inside this generator, we can just grab the context and then provide it",
    "start": "768366",
    "end": "773699"
  },
  {
    "text": "anywhere where we actually send the message. So when a-- By the way, it might make sense to",
    "start": "773699",
    "end": "780600"
  },
  {
    "text": "actually take the runtime, also propagate eventual custom loggers",
    "start": "780600",
    "end": "788466"
  },
  {
    "text": "and stuff like that. I think that that's going to be what this turns into.",
    "start": "788466",
    "end": "793800"
  },
  {
    "text": "But I wanted to start here, because the other thing we might want to do is allow for propagating not just",
    "start": "794733",
    "end": "801266"
  },
  {
    "text": "the serializable context, but any custom requirements as well from sending--",
    "start": "801533",
    "end": "806300"
  },
  {
    "text": "we may want to extend this more, basically. I think this should probably turn into a runtime.",
    "start": "806766",
    "end": "812366"
  },
  {
    "text": "Instead of grabbing just the context, like you said, grab the full runtime and then use that.",
    "start": "813766",
    "end": "818633"
  },
  {
    "text": "It's quite literally the same signature. And you can provide a runtime, so not a big deal.",
    "start": "819266",
    "end": "824300"
  },
  {
    "text": "And then-- so basically, the messenger-- I feel like this is nice, because now when you actually",
    "start": "825766",
    "end": "831733"
  },
  {
    "text": "send messages, like ask or tell or whatever, you don't have to worry about any context.",
    "start": "831800",
    "end": "836300"
  },
  {
    "text": "The context is dealt with, at least from the perspective of serialization for messages.",
    "start": "836966",
    "end": "842000"
  },
  {
    "text": "The context is dealt with at the time that you're actually creating the messenger. You don't have to deal with it at the time",
    "start": "842466",
    "end": "848100"
  },
  {
    "text": "that you're sending messages. So from communication with an entity,",
    "start": "848199",
    "end": "855600"
  },
  {
    "text": "from that perspective, I feel like this is a nice pattern.",
    "start": "856366",
    "end": "862199"
  },
  {
    "text": "I think we've arrived at a nice pattern, at least for propagating context. And then what's also nice about this",
    "start": "862666",
    "end": "868633"
  },
  {
    "text": "is we had talked before that no matter whether we're sending envelopes between the local--",
    "start": "869333",
    "end": "877833"
  },
  {
    "text": "no matter whether we're sending messages locally or to a remote pod, we still want to go through the full process of serializing it",
    "start": "879399",
    "end": "885899"
  },
  {
    "text": "into an envelope and then sending it off to the Entity Manager, where the Entity Manager will deserialize.",
    "start": "885899",
    "end": "891033"
  },
  {
    "text": "And we want that process to be the same regardless. And what's nice here is when we actually send a message",
    "start": "891033",
    "end": "897699"
  },
  {
    "text": "from a messenger, we basically do that. We serialize the full envelope to get the encoded version.",
    "start": "897899",
    "end": "903866"
  },
  {
    "text": "And then now the envelope that we're working with inside the messenger itself",
    "start": "904766",
    "end": "911100"
  },
  {
    "text": "is an encoded envelope. And if we look on the sharding service, there's this send envelope method",
    "start": "911399",
    "end": "917466"
  },
  {
    "text": "that essentially takes an encoded envelope and either propagates to the local Entity Manager",
    "start": "918266",
    "end": "924133"
  },
  {
    "text": "or sends it to a remote Entity Manager. So by doing this, we've essentially",
    "start": "924533",
    "end": "931100"
  },
  {
    "text": "achieved the other goal",
    "start": "931199",
    "end": "936566"
  },
  {
    "text": "that we had of making sure that no matter whether we're sending locally or remotely, we're always going through the full",
    "start": "936566",
    "end": "943233"
  },
  {
    "text": "process of serializing and then allowing the Entity Manager itself to do the deserialization.",
    "start": "943233",
    "end": "948966"
  },
  {
    "text": "I think Mattia is asking, why additional context on the messenger client? Shouldn't that additional context",
    "start": "950466",
    "end": "957300"
  },
  {
    "text": "be in the behavior instead? I mean, messenger should just encode and send over the wire",
    "start": "957466",
    "end": "962365"
  },
  {
    "text": "and then the code back. I think that's the context required to encode and decode.",
    "start": "962899",
    "end": "967332"
  },
  {
    "text": "It's basically the context propagated from the schema. Yeah, no. Most of the time, it'll be never.",
    "start": "968100",
    "end": "974199"
  },
  {
    "text": "But given that schema allows for that. Yeah, and I mean, Mattia is right.",
    "start": "974566",
    "end": "980100"
  },
  {
    "text": "I think that any additional context would be behavior related probably.",
    "start": "980366",
    "end": "986865"
  },
  {
    "text": "The messenger context will be just pretty much only related to serialization and",
    "start": "987433",
    "end": "995866"
  },
  {
    "text": "deserialization or schema related. Any additional context from a user perspective",
    "start": "995866",
    "end": "1002033"
  },
  {
    "text": "would only be relevant inside the behavior. So yeah.",
    "start": "1002033",
    "end": "1006600"
  },
  {
    "text": "Sometimes, especially if we make a concrete example on when would you use",
    "start": "1007199",
    "end": "1013133"
  },
  {
    "text": "that type of context? For example, let's say you have pieces of data",
    "start": "1013133",
    "end": "1018366"
  },
  {
    "text": "that contains sensitive information that you want to encrypt and decrypt.",
    "start": "1018366",
    "end": "1022833"
  },
  {
    "text": "You would probably pass down the piece through a contextual interface.",
    "start": "1023600",
    "end": "1031365"
  },
  {
    "text": "Right. Some kind of stuff like that. Yeah, and I mean, when",
    "start": "1032733",
    "end": "1038133"
  },
  {
    "text": "the behavior is registered, so it brings me to my next point so we can go there now.",
    "start": "1038133",
    "end": "1044399"
  },
  {
    "text": "So this is from a messenger perspective, because when you're communicating with sharding,",
    "start": "1045333",
    "end": "1051033"
  },
  {
    "text": "the two primary things you're doing, besides starting sharding and stopping sharding, the other two primary things you're",
    "start": "1051033",
    "end": "1056600"
  },
  {
    "text": "going to be doing is registering entities along with the protocol and the behavior",
    "start": "1056600",
    "end": "1064333"
  },
  {
    "text": "associated with that protocol. And then the other thing you're probably going to be doing is creating messengers. So those are the three",
    "start": "1064333",
    "end": "1070000"
  },
  {
    "text": "to four primary things you're doing with the sharding service. So we already talked about creating a messenger",
    "start": "1070000",
    "end": "1075933"
  },
  {
    "text": "and how we've achieved, I think, most of the flow",
    "start": "1076266",
    "end": "1081500"
  },
  {
    "text": "that we're looking for there. I mean, there's obvious refinements we can make here,",
    "start": "1081500",
    "end": "1087065"
  },
  {
    "text": "but the general flow we were looking for, I think, is starting to get there.",
    "start": "1087066",
    "end": "1092600"
  },
  {
    "text": "The other thing you're going to be doing most of the time is going to be registering an entity.",
    "start": "1093800",
    "end": "1098933"
  },
  {
    "text": "And when you register-- right now, behavior just doesn't have any context. It's very easy to add",
    "start": "1099633",
    "end": "1105333"
  },
  {
    "text": "this into the type signature. I will do that at some point.",
    "start": "1105333",
    "end": "1108433"
  },
  {
    "text": "Quite literally forwarding an R. Right. But I wanted to keep it simple for the purposes",
    "start": "1110666",
    "end": "1116000"
  },
  {
    "text": "of the example here, where when you register an entity,",
    "start": "1116133",
    "end": "1121133"
  },
  {
    "text": "you're giving it the entity, the behavior, and any options related to entity registration.",
    "start": "1122800",
    "end": "1127333"
  },
  {
    "text": "And this is the other place where, in addition to the R that we'll probably add for propagating--",
    "start": "1128399",
    "end": "1135299"
  },
  {
    "text": "let me just add this in right now. For now. Let's put never for the--",
    "start": "1136699",
    "end": "1142933"
  },
  {
    "text": "By the way, an interesting point now that I look at this signature once again.",
    "start": "1149600",
    "end": "1156033"
  },
  {
    "text": "We could allow the behavior to fail with specific reasons.",
    "start": "1157199",
    "end": "1164166"
  },
  {
    "text": "For example, let's say that the behavior decides to passivate itself.",
    "start": "1164533",
    "end": "1169898"
  },
  {
    "text": "We could quite literally return an error from the behavior.",
    "start": "1172133",
    "end": "1177266"
  },
  {
    "text": "And the runtime would then detect that the behavior",
    "start": "1178066",
    "end": "1183533"
  },
  {
    "text": "voluntarily passivate itself. Because time out of that, if queue is empty,",
    "start": "1183533",
    "end": "1191466"
  },
  {
    "text": "then I can passivate myself. Yeah, it's kind of-- That's just an idea. No, it's a good idea.",
    "start": "1191699",
    "end": "1196833"
  },
  {
    "text": "It's kind of like what we do with stream, with the optional component of the error channel.",
    "start": "1196833",
    "end": "1201766"
  },
  {
    "text": "Where basically specific error types might have specific behaviors associated with them. If returned from a behavior.",
    "start": "1203333",
    "end": "1208933"
  },
  {
    "text": "But getting back to the-- Or like Mattia said, return interrupted. Could actually be another--",
    "start": "1209300",
    "end": "1214600"
  },
  {
    "text": "Why are you overcomplicating things? The other piece that I want--",
    "start": "1216000",
    "end": "1221133"
  },
  {
    "text": "so basically, the other piece when",
    "start": "1221133",
    "end": "1226566"
  },
  {
    "text": "registering an entity is that this is the other place where you would need to provide the serialization context",
    "start": "1226566",
    "end": "1234100"
  },
  {
    "text": "for your messages. And what's cool about this, I think,",
    "start": "1234100",
    "end": "1239566"
  },
  {
    "text": "is that now an entity manager, which is not",
    "start": "1240300",
    "end": "1245565"
  },
  {
    "text": "exposed to the client-- it's an implementation detail. But by doing it this way,",
    "start": "1245633",
    "end": "1252033"
  },
  {
    "text": "the entity manager actually doesn't even need to know about, in a global sense, the type of message it's dealing with.",
    "start": "1252233",
    "end": "1258233"
  },
  {
    "text": "It just needs to know about the entity it's dealing with, because the entity has the message itself.",
    "start": "1258766",
    "end": "1263500"
  },
  {
    "text": "What do I mean by that? By doing it this way, I was able to remove the message generic",
    "start": "1263800",
    "end": "1271233"
  },
  {
    "text": "from the entity manager. So if I look at",
    "start": "1271533",
    "end": "1278066"
  },
  {
    "text": "sharding again, and then I'll open the entity manager side by side.",
    "start": "1278066",
    "end": "1282233"
  },
  {
    "text": "In here, when we register an entity, we create the entity manager.",
    "start": "1284566",
    "end": "1290199"
  },
  {
    "text": "And then we basically add it to the hash map of entity managers",
    "start": "1292166",
    "end": "1297898"
  },
  {
    "text": "that we have here, these entity managers thing. And that's really all registration of an entity",
    "start": "1297899",
    "end": "1303565"
  },
  {
    "text": "does for the moment. But when we create a messenger here,",
    "start": "1303566",
    "end": "1310632"
  },
  {
    "text": "the messenger basically checks to make sure",
    "start": "1311333",
    "end": "1317533"
  },
  {
    "text": "that it grabs the correct",
    "start": "1317666",
    "end": "1323466"
  },
  {
    "text": "shard from the shard assignments that we have registered to this pod.",
    "start": "1323466",
    "end": "1329133"
  },
  {
    "text": "It serializes the envelope that we're passing in for this message.",
    "start": "1330433",
    "end": "1334533"
  },
  {
    "text": "And then it basically takes the encoded envelope that we've created and the",
    "start": "1335666",
    "end": "1341833"
  },
  {
    "text": "pod, and it sends the envelope to that pod. What does sending an envelope do? Basically just checks if the",
    "start": "1341833",
    "end": "1347899"
  },
  {
    "text": "pod address that we're getting is equal to the existing pod, then we send it to a local entity manager, the envelope.",
    "start": "1347899",
    "end": "1354666"
  },
  {
    "text": "Otherwise, we send the envelope to a remote entity manager. This is a stub for the moment.",
    "start": "1355133",
    "end": "1360633"
  },
  {
    "text": "But sending to a local entity manager,",
    "start": "1362133",
    "end": "1364066"
  },
  {
    "text": "basically, all it does is-- this check here might be somewhat redundant, but I'm going to leave it in there",
    "start": "1367233",
    "end": "1373100"
  },
  {
    "text": "because I think it's good. But essentially, what we do is we grab the entity manager",
    "start": "1373100",
    "end": "1379899"
  },
  {
    "text": "for the address inside this encoded envelope because the encoded envelope still",
    "start": "1381933",
    "end": "1387333"
  },
  {
    "text": "contains the address details. So we can create an",
    "start": "1387633",
    "end": "1394100"
  },
  {
    "text": "address using schema.validate to create an actual--",
    "start": "1394100",
    "end": "1397899"
  },
  {
    "text": "the constructed type of entity address. We can use that address to grab the appropriate entity",
    "start": "1399699",
    "end": "1404933"
  },
  {
    "text": "manager, and then we can run entity manager.send and give it the encoded envelope.",
    "start": "1405033",
    "end": "1410600"
  },
  {
    "text": "And then we end up-- and that's basically all the shard manager is doing.",
    "start": "1411166",
    "end": "1416199"
  },
  {
    "text": "We then end up in the entity manager where we run this send",
    "start": "1416733",
    "end": "1426600"
  },
  {
    "text": "method here.",
    "start": "1426699",
    "end": "1427600"
  },
  {
    "text": "I know I've got type errors, so it's just because my signatures need to be updated.",
    "start": "1432166",
    "end": "1436233"
  },
  {
    "text": "But here, this is kind of like the important piece in here,",
    "start": "1437866",
    "end": "1443466"
  },
  {
    "text": "is when we create an entity manager, we can, in the closure,",
    "start": "1443766",
    "end": "1450500"
  },
  {
    "text": "give it this decode envelope function, which basically uses the entity schema inside the struct.",
    "start": "1450966",
    "end": "1459433"
  },
  {
    "text": "And then when we actually send an encoded envelope to the entity manager, it just decodes the envelope,",
    "start": "1461266",
    "end": "1466433"
  },
  {
    "text": "saves it to storage, and then sends it to the appropriate entity. So there's still a lot of details",
    "start": "1467300",
    "end": "1475233"
  },
  {
    "text": "that need to be figured out about what should come back from saving a message. And when we send a message to an entity,",
    "start": "1475233",
    "end": "1482633"
  },
  {
    "text": "what does it look like in all of that piece? But I feel like the serialization boundaries",
    "start": "1482633",
    "end": "1488033"
  },
  {
    "text": "look really nice now, where the type that's",
    "start": "1488266",
    "end": "1496033"
  },
  {
    "text": "being dealt with primarily from the outside is just-- it's a completely generic encoded envelope",
    "start": "1496033",
    "end": "1501733"
  },
  {
    "text": "where the message type is unknown. And the entity manager itself is dealing",
    "start": "1501966",
    "end": "1507033"
  },
  {
    "text": "with decoding messages and getting everything that it needs from that message.",
    "start": "1507033",
    "end": "1513299"
  },
  {
    "text": "So I feel like when we spoke previously,",
    "start": "1513399",
    "end": "1517899"
  },
  {
    "text": "the requirements we had really were that no matter which flow",
    "start": "1518533",
    "end": "1523832"
  },
  {
    "text": "we were going through, we wanted the envelope to go through the full serialization and deserialization process.",
    "start": "1523833",
    "end": "1529065"
  },
  {
    "text": "And I feel like we ended up-- we're there now with this current design.",
    "start": "1529366",
    "end": "1534666"
  },
  {
    "text": "But obviously, there's a lot of details to be figured out from a behavior and manager perspective.",
    "start": "1534966",
    "end": "1540466"
  },
  {
    "text": "So yeah, curious to hear your thoughts on this.",
    "start": "1541333",
    "end": "1546133"
  },
  {
    "text": "I think overall is nice. Clearly, we have to-- I like the new",
    "start": "1549433",
    "end": "1555898"
  },
  {
    "text": "management of the envelope thing.",
    "start": "1555899",
    "end": "1561266"
  },
  {
    "text": "It's better than the previous one, for sure.",
    "start": "1563433",
    "end": "1567665"
  },
  {
    "text": "As a suggestion, I was suggesting making it parametric on R, but making it",
    "start": "1568833",
    "end": "1575600"
  },
  {
    "text": "parametric on the message makes a lot of sense anyway.",
    "start": "1575633",
    "end": "1579199"
  },
  {
    "text": "And in regards to the rest, I think we",
    "start": "1581433",
    "end": "1586933"
  },
  {
    "text": "need, at some point, to define--",
    "start": "1586933",
    "end": "1590533"
  },
  {
    "text": "start to speak about the protocols and progressively remove stub versions in favor",
    "start": "1592800",
    "end": "1602966"
  },
  {
    "text": "of concrete implementations. And I think we're going to discover more.",
    "start": "1603199",
    "end": "1608166"
  },
  {
    "text": "Yeah, I agree. Like, once I get the envelope communication to--",
    "start": "1609966",
    "end": "1617466"
  },
  {
    "text": "finished up, I think the next piece I was going to start taking a look at",
    "start": "1618366",
    "end": "1622933"
  },
  {
    "text": "is how the behavior is currently managed inside the entity managers or inside the entities.",
    "start": "1624033",
    "end": "1630266"
  },
  {
    "text": "By the way, one thing I was noticing, you have a check for the local shard",
    "start": "1631166",
    "end": "1638666"
  },
  {
    "text": "Effect on this is on local shard.",
    "start": "1642233",
    "end": "1645466"
  },
  {
    "text": "That checks for basically the entity being--",
    "start": "1647566",
    "end": "1651898"
  },
  {
    "text": "the shard of the entity being currently allocated to the pod. We also need to think about",
    "start": "1654600",
    "end": "1660033"
  },
  {
    "text": "reinfencing of the shards, because we have to be sure that only one pod has a shard",
    "start": "1660033",
    "end": "1669533"
  },
  {
    "text": "allocated, even if the pod goes past. So these links back to the health checks",
    "start": "1669566",
    "end": "1677533"
  },
  {
    "text": "that we were chatting about last time. Yeah, these shard",
    "start": "1677699",
    "end": "1684933"
  },
  {
    "text": "assignments and unassignments is totally unimplemented in the shard manager at the moment.",
    "start": "1684933",
    "end": "1690266"
  },
  {
    "text": "That's another thing I have to take a look at. The other thing I have to take a look at is how the shard manager fits in with pod health,",
    "start": "1690699",
    "end": "1697100"
  },
  {
    "text": "because basically, like in here, you see this to do. But basically, this is an area where",
    "start": "1697433",
    "end": "1703433"
  },
  {
    "text": "we should be probably checking if pods are unhealthy when we're actually trying to send to a remote entity manager.",
    "start": "1703433",
    "end": "1708600"
  },
  {
    "text": "I'm pretty sure that's how it worked in the previous implementation as well. But yeah, after having",
    "start": "1708600",
    "end": "1714065"
  },
  {
    "text": "hacked on this a little bit, I think that I'm a little bit happier with how--",
    "start": "1714066",
    "end": "1721766"
  },
  {
    "text": "essentially, how the serialization boundaries are being managed for an envelope.",
    "start": "1722233",
    "end": "1727333"
  },
  {
    "text": "Matias said that-- Yeah, it makes a lot of sense, because again, the first time that that check, I think,",
    "start": "1728266",
    "end": "1736899"
  },
  {
    "text": "needs to be in the entity manager inside the ref synchronized,",
    "start": "1736899",
    "end": "1742033"
  },
  {
    "text": "I don't understand why it should be synchronized. I don't think it was even synchronized",
    "start": "1742300",
    "end": "1750166"
  },
  {
    "text": "in the previous implementation, but-- \"leaks less possibilities\" says, Matias.",
    "start": "1750166",
    "end": "1754966"
  },
  {
    "text": "No, if the check is synchronized, there's no difference.",
    "start": "1755866",
    "end": "1760933"
  },
  {
    "text": "It's basically over-synchronizing. But yes, the final check",
    "start": "1761633",
    "end": "1768366"
  },
  {
    "text": "is on the entity itself.",
    "start": "1768366",
    "end": "1773033"
  },
  {
    "text": "I think we can-- even if the message is",
    "start": "1773699",
    "end": "1778733"
  },
  {
    "text": "sent to the local entity, at the very end, the entity should always check--",
    "start": "1778733",
    "end": "1784366"
  },
  {
    "text": "even the mailbox take should always check that the pod is healthy and the shard is allocated.",
    "start": "1784366",
    "end": "1790899"
  },
  {
    "text": "So that the very moment we get a deallocated from the shard",
    "start": "1791833",
    "end": "1798166"
  },
  {
    "text": "manager, we are sure that we stop all the--",
    "start": "1798300",
    "end": "1802433"
  },
  {
    "text": "basically, we stop the shard locally. Yeah. Hi, Dillon. We have Dillon on the shard.",
    "start": "1803633",
    "end": "1809933"
  },
  {
    "text": "Ciao, Dillon. Ciao, Dillon. I'm using same headphones",
    "start": "1810800",
    "end": "1816333"
  },
  {
    "text": "that you suggested to Max. They're nice. Let me see if there were",
    "start": "1816333",
    "end": "1821500"
  },
  {
    "text": "any other questions I had, actually, while we're all here. Trying to think of the things that I was working on.",
    "start": "1821500",
    "end": "1828133"
  },
  {
    "text": "One thing that I'm not 100% happy about-- I mean, I guess it's fine.",
    "start": "1830033",
    "end": "1835133"
  },
  {
    "text": "It has to be this way. But ideally, this send envelope thing would be an internal method on sharding,",
    "start": "1835433",
    "end": "1842500"
  },
  {
    "text": "something that's not exposed to the client. Should have a list of entity states and the entity manager where they are updated.",
    "start": "1843133",
    "end": "1849466"
  },
  {
    "text": "That should have been a ref synchronized or a synchronized",
    "start": "1850199",
    "end": "1856898"
  },
  {
    "text": "ref so that updates and modifications are only in one place for the whole app.",
    "start": "1856899",
    "end": "1862665"
  },
  {
    "text": "What I don't understand with this is are the modifications effectful?",
    "start": "1864300",
    "end": "1872100"
  },
  {
    "text": "Because if the updates are not effectful, but they're simply synchronous updates,",
    "start": "1874166",
    "end": "1878600"
  },
  {
    "text": "then you don't need the synchronized thing. Let's take a quick peek.",
    "start": "1879600",
    "end": "1885266"
  },
  {
    "text": "So this is where I get or create the entity state. And this is--",
    "start": "1889800",
    "end": "1895166"
  },
  {
    "text": "well, I guess-- Sure. What he thinks that that ensures no race",
    "start": "1899000",
    "end": "1904132"
  },
  {
    "text": "conditions of having still the entity on the local assignments, but they are in an assigned phase.",
    "start": "1904133",
    "end": "1912266"
  },
  {
    "text": "I think that the--",
    "start": "1917033",
    "end": "1920699"
  },
  {
    "text": "this synchronized ref here is where I'm creating the entity state. I also modified the type of entity state",
    "start": "1922500",
    "end": "1928299"
  },
  {
    "text": "a little bit to keep it simple while we're starting to iterate. But basically, entity state at the moment is just two things.",
    "start": "1928300",
    "end": "1935398"
  },
  {
    "text": "This is still very much not finished, so please don't judge.",
    "start": "1937199",
    "end": "1941966"
  },
  {
    "text": "Also, by the way, a very important element, the entity-- sorry, the shard manager",
    "start": "1945266",
    "end": "1954466"
  },
  {
    "text": "should not deallocate a shard from a pod without the pod",
    "start": "1956066",
    "end": "1961300"
  },
  {
    "text": "confirming the deallocation. So it should be I'm going to deallocate,",
    "start": "1961300",
    "end": "1966500"
  },
  {
    "text": "then the pod does all the necessary work to shut down the behavior,",
    "start": "1967733",
    "end": "1973565"
  },
  {
    "text": "and then only after the behavior is-- all the behaviors that",
    "start": "1974399",
    "end": "1979766"
  },
  {
    "text": "are basically instantiated for that specific shard needs to be shut down.",
    "start": "1979766",
    "end": "1985000"
  },
  {
    "text": "Only at that point, the pod is going to confirm back to the shard manager",
    "start": "1985666",
    "end": "1992166"
  },
  {
    "text": "that it is deallocated, and then the shard manager",
    "start": "1992399",
    "end": "1997866"
  },
  {
    "text": "can reallocate it. Again, the shard manager should not trust that the pod",
    "start": "1998000",
    "end": "2003566"
  },
  {
    "text": "instantaneously deallocates everything. The only other case where",
    "start": "2003566",
    "end": "2009232"
  },
  {
    "text": "the shard manager can take a decision by itself is if the pod is considered down.",
    "start": "2009233",
    "end": "2015366"
  },
  {
    "text": "And if the pod is considered down, then we are back to the discussion of last time, which is that the timeouts",
    "start": "2017399",
    "end": "2024366"
  },
  {
    "text": "when the pod considered down",
    "start": "2024366",
    "end": "2029065"
  },
  {
    "text": "should be greater than the pod itself allows itself to be--",
    "start": "2029633",
    "end": "2034666"
  },
  {
    "text": "the checks should be every second, and the pod should be considered down if the last 10 checks failed.",
    "start": "2035199",
    "end": "2044933"
  },
  {
    "text": "So some of those checks are redundant. And this goes back to the",
    "start": "2046066",
    "end": "2053633"
  },
  {
    "text": "synchronizations locally. The issue with a synchronized ref",
    "start": "2053633",
    "end": "2058899"
  },
  {
    "text": "is that all the reads will also-- you can't have concurrent reads.",
    "start": "2059399",
    "end": "2064199"
  },
  {
    "text": "If your whole check is within the-- it would consider everything an update.",
    "start": "2064966",
    "end": "2071932"
  },
  {
    "text": "So it would be less performant. Maybe STM would be a better primitive for this.",
    "start": "2072766",
    "end": "2078000"
  },
  {
    "text": "But I think we can defer to a later point.",
    "start": "2078000",
    "end": "2082100"
  },
  {
    "text": "Yeah, I think that the-- Like you might as well say,",
    "start": "2084000",
    "end": "2089199"
  },
  {
    "text": "I'm known for good points. I think that the--",
    "start": "2089199",
    "end": "2093500"
  },
  {
    "text": "what's going on inside the Entity Manager definitely needs a lot of work.",
    "start": "2097699",
    "end": "2101466"
  },
  {
    "text": "At the moment, it's definitely-- it's not doing everything that it should be doing.",
    "start": "2103133",
    "end": "2108066"
  },
  {
    "text": "For example, I still haven't incorporated your last point, Mike, about when--",
    "start": "2110100",
    "end": "2115466"
  },
  {
    "text": "like, what's the last active time of a pod? It should be like the last time you finished processing a message, not the last time you",
    "start": "2116800",
    "end": "2123399"
  },
  {
    "text": "finished receiving a message. But anyways, at least from the",
    "start": "2123500",
    "end": "2130866"
  },
  {
    "text": "perspective of messaging, I feel like we're in a really good place in sharding.",
    "start": "2130866",
    "end": "2137233"
  },
  {
    "text": "I do think that propagating the message between the external world and the Entity",
    "start": "2137566",
    "end": "2143133"
  },
  {
    "text": "Managers, I feel like we've achieved at least something reasonable.",
    "start": "2143133",
    "end": "2147466"
  },
  {
    "text": "And also reasonably type safe. Because the few points",
    "start": "2148566",
    "end": "2155733"
  },
  {
    "text": "at which a user actually needs to do something that concerns serialization,",
    "start": "2155733",
    "end": "2160132"
  },
  {
    "text": "we're able to at least propagate that context to those points.",
    "start": "2161033",
    "end": "2163633"
  },
  {
    "text": "Yeah, I think overall it looks very, very much on the right track.",
    "start": "2167566",
    "end": "2173133"
  },
  {
    "text": "So yeah, that was kind of like the main thing I wanted to show off is the new encoding for Envelope.",
    "start": "2174100",
    "end": "2180765"
  },
  {
    "text": "I do think I need to write some tests for Envelope because I'm pretty certain--",
    "start": "2181266",
    "end": "2187433"
  },
  {
    "text": "I'm pretty, pretty certain that this is wrong, specifically",
    "start": "2188833",
    "end": "2194432"
  },
  {
    "text": "this type here. I think it should be type type. I think so too.",
    "start": "2194666",
    "end": "2199966"
  },
  {
    "text": "But I'm not 100% sure. I have to write a few tests.",
    "start": "2201199",
    "end": "2206266"
  },
  {
    "text": "I mean, this is kind of an internal anyway. Yeah, it's not this--",
    "start": "2207300",
    "end": "2212933"
  },
  {
    "text": "I mean, we don't even have to technically export this. Like technically, this is the only one",
    "start": "2213233",
    "end": "2218933"
  },
  {
    "text": "that even really needs to be exported. And even this Envelope schema thing technically doesn't even really need",
    "start": "2218933",
    "end": "2224466"
  },
  {
    "text": "to be exported because it sits inside the type. So everything here is technically internal",
    "start": "2224466",
    "end": "2229966"
  },
  {
    "text": "and can be internalized. But--",
    "start": "2230166",
    "end": "2233866"
  },
  {
    "text": "Which by the way, another small point. I don't quite understand these serializable with the getter.",
    "start": "2236000",
    "end": "2243699"
  },
  {
    "text": "Like if we have an instance of the object, can't we just check the constructor?",
    "start": "2245066",
    "end": "2250599"
  },
  {
    "text": "Why do we need a method? Like the schemas are on",
    "start": "2253199",
    "end": "2260633"
  },
  {
    "text": "the static side of the class anyway.",
    "start": "2260633",
    "end": "2264066"
  },
  {
    "text": "I don't understand why we need the get serializable.symbol",
    "start": "2265899",
    "end": "2271166"
  },
  {
    "text": "method. But this is beyond cluster. It's more of a point on schema",
    "start": "2271666",
    "end": "2277833"
  },
  {
    "text": "and on the serializable trait. Yeah, I mean, in this particular case,",
    "start": "2277833",
    "end": "2283966"
  },
  {
    "text": "having it on the instance side is helpful because I'm using the message dynamically here.",
    "start": "2283966",
    "end": "2290466"
  },
  {
    "text": "But-- The schema itself is created with the message inside?",
    "start": "2291233",
    "end": "2296466"
  },
  {
    "text": "Because message is a schema. Any message here technically, like envelope.anymessage",
    "start": "2297633",
    "end": "2303766"
  },
  {
    "text": "is basically just a type alias for a tagged request and a primary key.",
    "start": "2304033",
    "end": "2308899"
  },
  {
    "text": "Then this is actually a good reason.",
    "start": "2309133",
    "end": "2315133"
  },
  {
    "text": "That sort of answer is why the getter instead.",
    "start": "2315766",
    "end": "2319133"
  },
  {
    "text": "And then, I mean, yeah. So yeah, I'm pretty",
    "start": "2321166",
    "end": "2329099"
  },
  {
    "text": "happy with envelope now. I hadn't been for a while. But now I'm kind of happy with it.",
    "start": "2329100",
    "end": "2333766"
  },
  {
    "text": "I think through usage, now it'll become clear whether this is good. And envelope as a type,",
    "start": "2334399",
    "end": "2339733"
  },
  {
    "text": "like almost all the methods could probably be internalized and we just expose the type. Because in reality, a",
    "start": "2341666",
    "end": "2348533"
  },
  {
    "text": "user really shouldn't be-- I don't think it ever surfaces the API",
    "start": "2348533",
    "end": "2355099"
  },
  {
    "text": "unless you end up implementing yourself some-- Yeah, I guess like--",
    "start": "2356333",
    "end": "2361833"
  },
  {
    "text": "yeah, because I do-- wait, the only thing I can think of is mailbox storage. But I'm pretty sure by the",
    "start": "2362800",
    "end": "2368933"
  },
  {
    "text": "time it hits mailbox storage, you're dealing with the message itself.",
    "start": "2368933",
    "end": "2373366"
  },
  {
    "text": "We're thinking if a user ends up implementing a custom",
    "start": "2374500",
    "end": "2380933"
  },
  {
    "text": "messaging protocol, communicate via web sockets instead of HTTP, communicate via",
    "start": "2383933",
    "end": "2390066"
  },
  {
    "text": "Kafka, or really whatever, then probably they have",
    "start": "2390066",
    "end": "2395466"
  },
  {
    "text": "to interact with that type. Yeah, because pods, the pods interface, which again,",
    "start": "2395466",
    "end": "2401932"
  },
  {
    "text": "is like literally just the stub at the moment, this deals with the",
    "start": "2401933",
    "end": "2407500"
  },
  {
    "text": "encoded side of the envelope. So if a user-- I guess there are situations where maybe some method--",
    "start": "2407500",
    "end": "2414166"
  },
  {
    "text": "but again, you're never the one constructing an envelope there's very few methods",
    "start": "2414166",
    "end": "2419333"
  },
  {
    "text": "that a user would actually need access to. But anyways--",
    "start": "2419333",
    "end": "2424233"
  },
  {
    "text": "Which would probably only expose those. I know. I agree.",
    "start": "2424766",
    "end": "2430265"
  },
  {
    "text": "Subscribing to too much stability on the API. If the API is a single function, then we're stable day one.",
    "start": "2433133",
    "end": "2438366"
  },
  {
    "text": "Trust me, the second that I get to the point that something is runnable, I'm going to trim the API to the most minimal",
    "start": "2439133",
    "end": "2445599"
  },
  {
    "text": "that I think is reasonable. But I just don't know. Because I'm not at the point",
    "start": "2446266",
    "end": "2452133"
  },
  {
    "text": "where this is even runnable, I just don't know what's needed and what's not yet.",
    "start": "2452133",
    "end": "2456432"
  },
  {
    "text": "But yeah, I think the messaging, we're in a good place, I feel like. So cool.",
    "start": "2459133",
    "end": "2466266"
  },
  {
    "text": "I know it was a quick stream, but we just thought it would be fun to hop on and",
    "start": "2467466",
    "end": "2473132"
  },
  {
    "text": "discuss the progress that's been made on messaging so far.",
    "start": "2473133",
    "end": "2477399"
  },
  {
    "text": "It was really not a planned thing. Maxwell wrote to me, I'm",
    "start": "2478266",
    "end": "2483299"
  },
  {
    "text": "excited for the new envelope thing. I was like, I want to test out my new headphones.",
    "start": "2483300",
    "end": "2489433"
  },
  {
    "text": "Let's go stream. I think both are great though.",
    "start": "2489966",
    "end": "2493766"
  },
  {
    "text": "So yeah, hope everybody enjoyed it. And yeah, we'll see you folks next time.",
    "start": "2495433",
    "end": "2502000"
  },
  {
    "text": "Cheers. Cheers.",
    "start": "2502466",
    "end": "2503466"
  }
]