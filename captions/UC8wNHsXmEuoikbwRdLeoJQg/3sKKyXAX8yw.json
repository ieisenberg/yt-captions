[
  {
    "text": "welcome everybody uh today we have Maxwell and Sebastian and Maxwell has been working",
    "start": "3719",
    "end": "10559"
  },
  {
    "text": "in some pretty dope things for the latest release of effect CI which is an",
    "start": "10559",
    "end": "17279"
  },
  {
    "text": "amazing library to as you might guess create CLI applications using uh using",
    "start": "17279",
    "end": "23439"
  },
  {
    "text": "effect and today both me and Sebastian",
    "start": "23439",
    "end": "28760"
  },
  {
    "text": "will be on the look for being hyped about features that Max will present",
    "start": "28760",
    "end": "35320"
  },
  {
    "text": "without further Ado I'll leave it over to Max or his kind of presentation",
    "start": "35320",
    "end": "41160"
  },
  {
    "text": "screen share whatever he he wants to do yeah thanks Mike um I think one of",
    "start": "41160",
    "end": "48199"
  },
  {
    "text": "the primary goals we had when building effect C or that I had when building",
    "start": "48199",
    "end": "53359"
  },
  {
    "text": "effect C was um I wanted to provide a good user story around um command line",
    "start": "53359",
    "end": "59559"
  },
  {
    "text": "application written with effect um I wanted to give people a way to run their applications from the command line",
    "start": "59559",
    "end": "65960"
  },
  {
    "text": "because I felt like that was a natural fit for effect-based applications um and so I the main goal",
    "start": "65960",
    "end": "74000"
  },
  {
    "text": "of the project was really to give people a good way to integrate the command line",
    "start": "74000",
    "end": "79159"
  },
  {
    "text": "with their effect applications and make it really easy to parse arguments and run whatever programs they wanted to run",
    "start": "79159",
    "end": "87119"
  },
  {
    "text": "um and it kind of started off initially is a direct Port of zooc CLI which is a",
    "start": "87119",
    "end": "92960"
  },
  {
    "text": "great piece of software that's developed by the zoof folks um but",
    "start": "92960",
    "end": "98159"
  },
  {
    "text": "gradually um as with our core effect Library um the CLI library has sort of",
    "start": "98159",
    "end": "105360"
  },
  {
    "text": "evolved to really take advantage of a lot of the features that typescript provides that we get you know just",
    "start": "105360",
    "end": "112040"
  },
  {
    "text": "natively with with JavaScript um and so we've kind of",
    "start": "112040",
    "end": "117079"
  },
  {
    "text": "diverged quite a bit now from Zo and I think it's led to some really exciting",
    "start": "117079",
    "end": "122479"
  },
  {
    "text": "features that we've been able to introduce um and also a really nice user experience especially with the most",
    "start": "122479",
    "end": "127920"
  },
  {
    "text": "recent release of effect CLI um I think we've really improved how one can",
    "start": "127920",
    "end": "134640"
  },
  {
    "text": "integrate the actual program they want to run with the parsed command line arguments um so I'll go ahead and I'll",
    "start": "134640",
    "end": "140760"
  },
  {
    "text": "share my screen and so right now we're just sort of sitting um inside the",
    "start": "140760",
    "end": "147640"
  },
  {
    "text": "effect CLI project um um and I can kind of talk a little bit at a high level",
    "start": "147640",
    "end": "153239"
  },
  {
    "text": "about how one goes through writing a CLI application with with the CL library and",
    "start": "153239",
    "end": "159159"
  },
  {
    "text": "then maybe if there's interest we can talk a little bit about how it's implemented",
    "start": "159159",
    "end": "164400"
  },
  {
    "text": "internally um but maybe we'll take a look at one of the most simple examples",
    "start": "164400",
    "end": "170120"
  },
  {
    "text": "we have right now which is just kind of like a a mini git uh CLI which we",
    "start": "170120",
    "end": "175879"
  },
  {
    "text": "actually have a tutorial for in the readme as well um um so if I crack open",
    "start": "175879",
    "end": "182040"
  },
  {
    "text": "the readme and render it at the bottom of the readme we",
    "start": "182040",
    "end": "187799"
  },
  {
    "text": "actually have a tutorial that walks through building up this example um and really the goal of the",
    "start": "187799",
    "end": "193040"
  },
  {
    "text": "example is to just mock out a few of the actual git command line commands um and",
    "start": "193040",
    "end": "200319"
  },
  {
    "text": "some of their arguments and options um so in effect CLI The Primitives that you",
    "start": "200319",
    "end": "209840"
  },
  {
    "text": "use to build up your application are commands options and arguments um so",
    "start": "209840",
    "end": "216400"
  },
  {
    "text": "commands correspond to actual command line commands or sub commands of a",
    "start": "216400",
    "end": "222319"
  },
  {
    "text": "command line command so for example like git would be your root command uh for the git CLI and then you have sub",
    "start": "222319",
    "end": "229599"
  },
  {
    "text": "commands like ad and clone and and whatever else",
    "start": "229599",
    "end": "234799"
  },
  {
    "text": "um and then options correspond to either command line Flags or command line",
    "start": "234799",
    "end": "241879"
  },
  {
    "text": "options meaning options that come with some value associated with them so things like the verbose flag for mini",
    "start": "241879",
    "end": "250400"
  },
  {
    "text": "for get ad um or um some built-in options that are already available with",
    "start": "250400",
    "end": "256040"
  },
  {
    "text": "every program which we can talk about in a minute such as like the version option or help um and then arguments correspond to",
    "start": "256040",
    "end": "265840"
  },
  {
    "text": "positional arguments on the command line so things like like if you are at when",
    "start": "265840",
    "end": "271639"
  },
  {
    "text": "you run get ad you would add some paths to the to Stage them for the current",
    "start": "271639",
    "end": "277800"
  },
  {
    "text": "commit for example um so using each these three Primitives um you can build",
    "start": "277800",
    "end": "285320"
  },
  {
    "text": "up to a fully blown command line application um and one of the",
    "start": "285320",
    "end": "291320"
  },
  {
    "text": "enhancements that we've made with the most recent release of effect CLI is that previously the logic IC associated",
    "start": "291320",
    "end": "300919"
  },
  {
    "text": "with running a command with some options and arguments was totally separate from the actual Declaration of the command um",
    "start": "300919",
    "end": "308600"
  },
  {
    "text": "but now we've made it a little bit more user friendly where you can Define the logic that you want to run with a",
    "start": "308600",
    "end": "313919"
  },
  {
    "text": "particular Command right alongside the Declaration of that command",
    "start": "313919",
    "end": "319000"
  },
  {
    "text": "um so maybe we can start really quickly and feel free to interrupt me if there's questions um but maybe we can start just",
    "start": "319000",
    "end": "326160"
  },
  {
    "text": "by looking at um this first top level Minit command that we're creating so the",
    "start": "326160",
    "end": "331960"
  },
  {
    "text": "goal is to create a command that sort of looks like this where we have the Minit",
    "start": "331960",
    "end": "338280"
  },
  {
    "text": "command that we can run um we have a version flag that's optional as indicated by the square brackets a help",
    "start": "338280",
    "end": "344560"
  },
  {
    "text": "flag that's optional that also has a short Alias DH and then another command",
    "start": "344560",
    "end": "351800"
  },
  {
    "text": "line option that's uh optional the- C flag which corresponds to configuration values which are given in the key value",
    "start": "351800",
    "end": "358479"
  },
  {
    "text": "format um and it's pretty easy to do this",
    "start": "358479",
    "end": "365160"
  },
  {
    "text": "so the because effect every command and",
    "start": "365160",
    "end": "370319"
  },
  {
    "text": "effect CLI ships with some built-in commands already available um we",
    "start": "370319",
    "end": "375880"
  },
  {
    "text": "actually don't have to declare the version or help flag for any of our commands because they come pre-built and",
    "start": "375880",
    "end": "382880"
  },
  {
    "text": "we'll kind of show off what some of those things do when we actually run some of these examples but um if th if",
    "start": "382880",
    "end": "388720"
  },
  {
    "text": "folks are curious ious what comes built in with every command there's a listing of the built-in options here so",
    "start": "388720",
    "end": "395440"
  },
  {
    "text": "generating completions um getting the help documentation getting the version of your CLI application and running the",
    "start": "395440",
    "end": "402080"
  },
  {
    "text": "wizard mode which will also show off later um are all built in commands that you don't have to declare",
    "start": "402080",
    "end": "407759"
  },
  {
    "text": "yourself um so really the only command is there a way I can enable or disable",
    "start": "407759",
    "end": "414800"
  },
  {
    "text": "those built-in commands or not not currently uh um but there was a feature",
    "start": "414800",
    "end": "421280"
  },
  {
    "text": "request made recently to have the built-in commands show up in the help",
    "start": "421280",
    "end": "427479"
  },
  {
    "text": "documentation by default uh because right now when you run the uh help",
    "start": "427479",
    "end": "432800"
  },
  {
    "text": "documentation for a command which maybe I can show down here in the terminal um if we run",
    "start": "432800",
    "end": "438479"
  },
  {
    "text": "the U mini get",
    "start": "438479",
    "end": "442199"
  },
  {
    "text": "example the help documentation doesn't um like the built-in uh options that are",
    "start": "446080",
    "end": "452759"
  },
  {
    "text": "available don't show up by default so I've been considering to accommodate that feature",
    "start": "452759",
    "end": "459160"
  },
  {
    "text": "request adding another um option or flag to the CLI config which uh I'll I can",
    "start": "459160",
    "end": "465800"
  },
  {
    "text": "show a little bit later the CLI config is basically a way to provide configuration to a CLI program um but I",
    "start": "465800",
    "end": "473400"
  },
  {
    "text": "was considering adding an a additional option to the CLI configuration that allows for printing built-in options",
    "start": "473400",
    "end": "480879"
  },
  {
    "text": "with each command um and also allows for toggling them on and off for particular",
    "start": "480879",
    "end": "486440"
  },
  {
    "text": "commands um what would be the use case for toggling it off",
    "start": "486440",
    "end": "492680"
  },
  {
    "text": "completely if for example you had a different if you wanted to independently version your commands and subcommands if",
    "start": "492680",
    "end": "499479"
  },
  {
    "text": "you didn't want the version that's printed to be the version of your actual CLI application because when you declare",
    "start": "499479",
    "end": "507400"
  },
  {
    "text": "when you finally get ready to run your CLI application after you've composed all of your commands together um with",
    "start": "507400",
    "end": "514080"
  },
  {
    "text": "declaring your top level commands your sub commands when you actually get ready to run this one of the there's two",
    "start": "514080",
    "end": "520279"
  },
  {
    "text": "required arguments when you actually create your CLI app um there's a name",
    "start": "520279",
    "end": "526080"
  },
  {
    "text": "which you have to give to your CLI application and a version and the",
    "start": "526080",
    "end": "531600"
  },
  {
    "text": "version in this case when you run the-- version flag for your CLI application",
    "start": "531600",
    "end": "537959"
  },
  {
    "text": "the version version that's printed is always the version that you provide to your CLI app um but to Mike's point one",
    "start": "537959",
    "end": "546120"
  },
  {
    "text": "of the use cases for this could be like you know if you had a different um if you wanted to override the default",
    "start": "546120",
    "end": "551839"
  },
  {
    "text": "version um I believe it's already possible uh it's not I'm sorry it's not",
    "start": "551839",
    "end": "557959"
  },
  {
    "text": "already possible to do that because um built-in arguments are parsed",
    "start": "557959",
    "end": "563519"
  },
  {
    "text": "first in the parsing algorithm they're always tried first um so yeah it would",
    "start": "563519",
    "end": "569640"
  },
  {
    "text": "have to be like some configuration or something like that to make something like that possible but it's something I've been tossing around because I know",
    "start": "569640",
    "end": "576200"
  },
  {
    "text": "there's use cases for enabling and disabling those things does that answer your question",
    "start": "576200",
    "end": "581760"
  },
  {
    "text": "Mike yeah it does cool um yeah so if we",
    "start": "581760",
    "end": "587440"
  },
  {
    "text": "wanted to set up a optional parameter that we can pass to our top level miniate command that takes key value um",
    "start": "587440",
    "end": "595320"
  },
  {
    "text": "options um we can do that just by declaring a key key value map type of",
    "start": "595320",
    "end": "600720"
  },
  {
    "text": "option uh giving it the name that we want which will correspond to a short flag uh here and then piping this uh",
    "start": "600720",
    "end": "610279"
  },
  {
    "text": "option that we've created here to a combinator called options. optional which basically makes this option this",
    "start": "610279",
    "end": "617480"
  },
  {
    "text": "command line option uh an optional value and returns an option of a hashmap of",
    "start": "617480",
    "end": "622839"
  },
  {
    "text": "strings because again we can actually provide multiple key value pairs here so",
    "start": "622839",
    "end": "628680"
  },
  {
    "text": "the use case might be like you're running mini git and you have uh a",
    "start": "628680",
    "end": "634680"
  },
  {
    "text": "couple of key value pairs",
    "start": "634680",
    "end": "640240"
  },
  {
    "text": "um and when you run this um you want to be able to use these so the actual logic",
    "start": "641000",
    "end": "647440"
  },
  {
    "text": "here is literally just taking that key value map um make turning it into an array and printing it back out but the",
    "start": "647440",
    "end": "653360"
  },
  {
    "text": "point is you can pass uh key value map is a vartic option argument you can pass",
    "start": "653360",
    "end": "658440"
  },
  {
    "text": "multiple Val values to it and that's actually reflected in The Help documentation as well so if we rerun",
    "start": "658440",
    "end": "664880"
  },
  {
    "text": "help you can see that the- c option that we've declared here we automatically get",
    "start": "664880",
    "end": "670160"
  },
  {
    "text": "a bunch of help text here which describes what it does and some of this can be overridden by the user meaning",
    "start": "670160",
    "end": "675680"
  },
  {
    "text": "you can Pro provide additional help documentation if you want to um but this indicates that it's a user find piece of",
    "start": "675680",
    "end": "682279"
  },
  {
    "text": "text it's a property which can be specified a single time with multiple key value pairs or you can specify the",
    "start": "682279",
    "end": "689040"
  },
  {
    "text": "flag multiple times if that's your I assume it's also possible to have arbitrary varia um options simply as a",
    "start": "689040",
    "end": "695519"
  },
  {
    "text": "list of whatever it is in it is indeed so if",
    "start": "695519",
    "end": "700920"
  },
  {
    "text": "you wanted to have for example another option here which we can use the Beloved",
    "start": "700920",
    "end": "706880"
  },
  {
    "text": "Foo um and we wanted to make it vartic uh in the way that it's utilized it's",
    "start": "706880",
    "end": "713240"
  },
  {
    "text": "very easy to do that we can just you know create our Fu option options dot it's going to be we can say maybe",
    "start": "713240",
    "end": "720600"
  },
  {
    "text": "some uh text let's put",
    "start": "720600",
    "end": "726160"
  },
  {
    "text": "some text",
    "start": "726160",
    "end": "731399"
  },
  {
    "text": "here and we can give this a name of Fu and we can just pipe this to options",
    "start": "731399",
    "end": "737760"
  },
  {
    "text": "dot uh there's a couple of combinators that allow you to make an option vartic there's at least meaning you have to",
    "start": "737760",
    "end": "744360"
  },
  {
    "text": "specify an option at least one time or at least two times or whatever um there's at most so you can only specify",
    "start": "744360",
    "end": "752240"
  },
  {
    "text": "this option at most two times or whatever there's between um for specifying options uh",
    "start": "752240",
    "end": "758680"
  },
  {
    "text": "between some Min and max number of times or if you don't really care about the number of times you can just do repeated",
    "start": "758680",
    "end": "764800"
  },
  {
    "text": "which in this case is what we would do and then again um if it it depending on the uh vartic combinator",
    "start": "764800",
    "end": "774160"
  },
  {
    "text": "you use um the option may or may not be required um but to expl explicitly say",
    "start": "774160",
    "end": "779839"
  },
  {
    "text": "that this is optional um we could do options. optional but with repeated",
    "start": "779839",
    "end": "786839"
  },
  {
    "text": "um depending again on the combinator that you use the option may or may not",
    "start": "786839",
    "end": "792720"
  },
  {
    "text": "be a required option it might be like something that you need or you don't need um so anyways there's a lot of",
    "start": "792720",
    "end": "800160"
  },
  {
    "text": "combinators oop sorry at that point you specify the the fu together with the",
    "start": "800160",
    "end": "806279"
  },
  {
    "text": "configs in line seven and you get access to that in in your Handler after oh let",
    "start": "806279",
    "end": "813240"
  },
  {
    "text": "me let me actually show that off so um maybe this is a good time to go",
    "start": "813240",
    "end": "819600"
  },
  {
    "text": "over the generic command. make Constructor and how it's used so um",
    "start": "819600",
    "end": "825040"
  },
  {
    "text": "command. make takes three arguments it takes the name of the command that you want to run which in this case is Minit",
    "start": "825040",
    "end": "832440"
  },
  {
    "text": "it takes what we've so sort of decided This Is A New Concept in effect CLI so",
    "start": "832440",
    "end": "838000"
  },
  {
    "text": "we've we've called called it the config um probably not the greatest name we can you know always make better names but",
    "start": "838000",
    "end": "845240"
  },
  {
    "text": "the type that's inserted in here if you actually look at the uh definition of command of this make",
    "start": "845240",
    "end": "852399"
  },
  {
    "text": "Command make the config is what we've decided to",
    "start": "852399",
    "end": "857800"
  },
  {
    "text": "call it could probably be a better name but um and you basically have the",
    "start": "857800",
    "end": "863600"
  },
  {
    "text": "ability to pass uh options and arguments in here freely um so let's",
    "start": "863600",
    "end": "870920"
  },
  {
    "text": "do Fu um and what this will end up doing is uh Pro in the third argument which is",
    "start": "870920",
    "end": "878680"
  },
  {
    "text": "the actual command Handler the thing that allows you to handle the options and arguments that were parsed you then",
    "start": "878680",
    "end": "884279"
  },
  {
    "text": "gain access to the par version of that option in here so now we have a foo in",
    "start": "884279",
    "end": "890120"
  },
  {
    "text": "here which is now the par version which is a for a readon string um and as you can see like the",
    "start": "890120",
    "end": "897759"
  },
  {
    "text": "type of fu is in options of read only string um so basically we get like the",
    "start": "897759",
    "end": "904320"
  },
  {
    "text": "pars version in the actual Handler um and the nice thing about config is that you can have multiple",
    "start": "904320",
    "end": "912199"
  },
  {
    "text": "levels of nesting in the config object so if I had like you know uh if I wanted",
    "start": "912199",
    "end": "918600"
  },
  {
    "text": "to make like my special",
    "start": "918600",
    "end": "923839"
  },
  {
    "text": "Bo this in theory should work",
    "start": "924560",
    "end": "930319"
  },
  {
    "text": "so now my special Fu would get parsed as the object as well so we've kind of made the ability to allow users to structure",
    "start": "930319",
    "end": "938160"
  },
  {
    "text": "the par options and arguments the way whatever way they want in the Handler which is kind of nice um and you can",
    "start": "938160",
    "end": "945240"
  },
  {
    "text": "also pass arrays in as uh sub arguments here so we could have an array of Foo I",
    "start": "945240",
    "end": "950759"
  },
  {
    "text": "I feel the style of Team here this is definitely uh the style of Tim I have to",
    "start": "950759",
    "end": "957040"
  },
  {
    "text": "give a ton of credit to Tim for for the implementation of the parsing of config and whatnot CU he did a ton of work um",
    "start": "957040",
    "end": "964480"
  },
  {
    "text": "getting this done so shout out to Tim for doing this this is this was a huge",
    "start": "964480",
    "end": "969600"
  },
  {
    "text": "win in terms of um usability I'm also excited about those changes for for sub",
    "start": "969600",
    "end": "975440"
  },
  {
    "text": "commands um D around Subs especially yeah one of the coolest things is um",
    "start": "975440",
    "end": "983800"
  },
  {
    "text": "when we decided to implement this localized handling",
    "start": "983800",
    "end": "988959"
  },
  {
    "text": "logic um one of the things that we were thinking about is well at the",
    "start": "988959",
    "end": "994480"
  },
  {
    "text": "moment previously what you would do is you would take your final command and you would create an actual",
    "start": "994480",
    "end": "1001519"
  },
  {
    "text": "CLI app out of that which we can actually demo because it's still possible I",
    "start": "1001519",
    "end": "1007800"
  },
  {
    "text": "think C app yeah I've done that in the past and it always fail a bit like a lot",
    "start": "1007800",
    "end": "1013399"
  },
  {
    "text": "of C ceremony around um the same and it was indeed uh so my test app",
    "start": "1013399",
    "end": "1024000"
  },
  {
    "text": "uh it definitely was um if we give it the same like sort of parameters and",
    "start": "1024000",
    "end": "1029199"
  },
  {
    "text": "then you would also pass your command in here um and",
    "start": "1029199",
    "end": "1035798"
  },
  {
    "text": "the the problem with this was that when you actually went to run your CLI app so",
    "start": "1035799",
    "end": "1042000"
  },
  {
    "text": "you would run do like a CLI op. run uh my app you pass in some you know",
    "start": "1042000",
    "end": "1047400"
  },
  {
    "text": "arguments and then you would get a single execute function",
    "start": "1047400",
    "end": "1052640"
  },
  {
    "text": "which wasn't great because it was good and not good um the good thing was you",
    "start": "1052640",
    "end": "1060080"
  },
  {
    "text": "would get the fully parsed structure of your commands and subcommands but it required like an additional layer of",
    "start": "1060080",
    "end": "1067200"
  },
  {
    "text": "mapping where you had to go from the C parsed CLI domain to some intermediate",
    "start": "1067200",
    "end": "1072679"
  },
  {
    "text": "domain which would then allow you to handle the logic that you wanted to run",
    "start": "1072679",
    "end": "1078840"
  },
  {
    "text": "um and that it it always felt a little clunky to me we didn't have a we didn't we couldn't think of a good way to do it",
    "start": "1078840",
    "end": "1083919"
  },
  {
    "text": "before we always knew we wanted to localize uh the logic um but the problem was when we",
    "start": "1083919",
    "end": "1091280"
  },
  {
    "text": "first started talking about localized command handlers um we did not want to",
    "start": "1091280",
    "end": "1097440"
  },
  {
    "text": "take away users's ability to have access to parent options and arguments in their",
    "start": "1097440",
    "end": "1103840"
  },
  {
    "text": "subc commands because like I said before previously you'd get the fully parsed structure of your command line and you",
    "start": "1103840",
    "end": "1112039"
  },
  {
    "text": "could pass it wherever you wanted in that execute command the execute command just is a function that takes the pars",
    "start": "1112039",
    "end": "1117880"
  },
  {
    "text": "uh args and options and return in effect um so you could you know parse the fully",
    "start": "1117880",
    "end": "1123640"
  },
  {
    "text": "uh pass the fully pared structure into your subc commmand handlers into your Parent Command Handler you had access to",
    "start": "1123640",
    "end": "1130159"
  },
  {
    "text": "all the options and arguments you wanted um from the parent in the subc commmand",
    "start": "1130159",
    "end": "1135320"
  },
  {
    "text": "if you wanted it to do it that way so we were a little worried about localized",
    "start": "1135320",
    "end": "1140720"
  },
  {
    "text": "handlers because you lose that uh when you do this right so if we look at for example one of the subcommand or we",
    "start": "1140720",
    "end": "1147280"
  },
  {
    "text": "thought we would lose that I'll uh I'll leave a little bit of a cliffhanger um",
    "start": "1147280",
    "end": "1152480"
  },
  {
    "text": "if we look at the Declaration of one of our mini get subcommands here where we wanted to create an ad subcommand give",
    "start": "1152480",
    "end": "1158480"
  },
  {
    "text": "it two um two things here a verbose argument which has a short flag and a",
    "start": "1158480",
    "end": "1165039"
  },
  {
    "text": "and a long version short option long option uh and then an opt optional vartic argument",
    "start": "1165039",
    "end": "1171799"
  },
  {
    "text": "of path specs so just paths that you can pass to get ad um so to create this",
    "start": "1171799",
    "end": "1178240"
  },
  {
    "text": "particular um option um so yeah we would take the options. Boolean",
    "start": "1178240",
    "end": "1184520"
  },
  {
    "text": "Constructor um pipe that to options. withth Alias to basically give this",
    "start": "1184520",
    "end": "1189600"
  },
  {
    "text": "option the ability to either take the- v short flag or Dash Das for Bose um and",
    "start": "1189600",
    "end": "1195799"
  },
  {
    "text": "then we have another new feature which I don't want to like touch on too many new features at the same time but we",
    "start": "1195799",
    "end": "1201559"
  },
  {
    "text": "recently introduced a combinator literally like 3 days ago I think Tim I",
    "start": "1201559",
    "end": "1206600"
  },
  {
    "text": "need this so often um but we basically allowed uh for",
    "start": "1206600",
    "end": "1211720"
  },
  {
    "text": "falling back to um parsing using effects config uh if you wanted to so you can",
    "start": "1211720",
    "end": "1218080"
  },
  {
    "text": "fall back to like environment variables or really anything from your config provider that's running in your effect",
    "start": "1218080",
    "end": "1225559"
  },
  {
    "text": "application um so this was a awesome enhancement um but I don't want to get",
    "start": "1225559",
    "end": "1231240"
  },
  {
    "text": "too much into the different features the point being here is that we have a Boolean argument that we're constructing",
    "start": "1231240",
    "end": "1236720"
  },
  {
    "text": "um and note that booleans are always optional um you can either they're there",
    "start": "1236720",
    "end": "1242840"
  },
  {
    "text": "or they're not so they're always in a true false State um booleans can take some additional arguments in here so",
    "start": "1242840",
    "end": "1250240"
  },
  {
    "text": "there's an if presentes argument meaning like if it's present on the command line",
    "start": "1250240",
    "end": "1255760"
  },
  {
    "text": "set it to set this to you know return false it defaults to true you can still pass true if you want to be explicit um",
    "start": "1255760",
    "end": "1263480"
  },
  {
    "text": "but if that flag is present what's the value is the point here um and then there's also a negation names so you can",
    "start": "1263480",
    "end": "1271760"
  },
  {
    "text": "basically provide a um an array of like negation names for",
    "start": "1271760",
    "end": "1277159"
  },
  {
    "text": "this command so for example like no verbose or something like that which would give the inverse uh of that",
    "start": "1277159",
    "end": "1283159"
  },
  {
    "text": "Boolean option that's good to know actually because I always wondered maybe this is some feedback here um if present",
    "start": "1283159",
    "end": "1290720"
  },
  {
    "text": "wasn't immediately obvious to me what that meant um maybe if provider I don't know but wasn't clear to me that that",
    "start": "1290720",
    "end": "1296919"
  },
  {
    "text": "meant user provided this value on the command line yeah is",
    "start": "1296919",
    "end": "1303559"
  },
  {
    "text": "hard um but that's good feedback I i' I've never been happy with the with the",
    "start": "1303640",
    "end": "1309640"
  },
  {
    "text": "option name either but that's what we have for the moment um this library is definitely under heavy development we",
    "start": "1309640",
    "end": "1315840"
  },
  {
    "text": "have a lot of features we want to add but getting back back to the the problem that we were talking about before um we",
    "start": "1315840",
    "end": "1321480"
  },
  {
    "text": "have this uh mini get ad command um that is a subcommand of",
    "start": "1321480",
    "end": "1328159"
  },
  {
    "text": "Minit and um maybe we want to access",
    "start": "1328159",
    "end": "1334520"
  },
  {
    "text": "some parent AR uh options or arguments in this subc Command right we want to",
    "start": "1334520",
    "end": "1340720"
  },
  {
    "text": "maybe we want to get those configuration values from the parent um and access",
    "start": "1340720",
    "end": "1346720"
  },
  {
    "text": "them in this sub command at the mo we thought initially that there was going to be no way to do this U but then once",
    "start": "1346720",
    "end": "1353600"
  },
  {
    "text": "again Tim had a very very good idea um it's always the case that we",
    "start": "1353600",
    "end": "1359360"
  },
  {
    "text": "think it's impossible and then team ends up providing the",
    "start": "1359360",
    "end": "1365200"
  },
  {
    "text": "solution way absolutely I have to give a lot of credit to Tim for why localized",
    "start": "1365200",
    "end": "1370919"
  },
  {
    "text": "handlers exist so if you are out there and watching and like the fact that localized handlers are a thing now um",
    "start": "1370919",
    "end": "1378000"
  },
  {
    "text": "definitely let Tim know that you are very happy about that um so anyways if",
    "start": "1378000",
    "end": "1383039"
  },
  {
    "text": "we want to access the Parent Command here so I'm going to quickly highlight the type here um so the type of this",
    "start": "1383039",
    "end": "1389679"
  },
  {
    "text": "command is the name of the command um which is important for uh we'll see in a",
    "start": "1389679",
    "end": "1395960"
  },
  {
    "text": "second um then we actually have all the parameters for or the first two",
    "start": "1395960",
    "end": "1401840"
  },
  {
    "text": "parameters that get passed to an effect so we have the maybe it'll be easier if I take you to the Command",
    "start": "1401840",
    "end": "1410440"
  },
  {
    "text": "Module so the type of a command if we just consider this this first line here",
    "start": "1412240",
    "end": "1417720"
  },
  {
    "text": "we've got the name we've got the environment that is going to be utilized",
    "start": "1417720",
    "end": "1422840"
  },
  {
    "text": "by our Handler we have the errors that could be returned by our Handler and",
    "start": "1422840",
    "end": "1428720"
  },
  {
    "text": "then a is actually the parsed command line arguments it's not the value that's",
    "start": "1428720",
    "end": "1434880"
  },
  {
    "text": "returned from our Handler our handlers always return void CU you there's no reason to return a value from a Handler",
    "start": "1434880",
    "end": "1440960"
  },
  {
    "text": "um in CLI but a is actually corresponding to the parsed command line arguments again",
    "start": "1440960",
    "end": "1447320"
  },
  {
    "text": "probably better names we could use here but um the the re Anda parameters here",
    "start": "1447320",
    "end": "1453880"
  },
  {
    "text": "correspond to things that are happening within our Handler so um if we wanted to make use of the",
    "start": "1453880",
    "end": "1463360"
  },
  {
    "text": "configs in our subc Command um it's actually reasonably easy to do that we just",
    "start": "1463360",
    "end": "1468840"
  },
  {
    "text": "convert this to for example an",
    "start": "1468840",
    "end": "1472679"
  },
  {
    "text": "effect and",
    "start": "1477440",
    "end": "1480720"
  },
  {
    "text": "then we can got I probably yield the return yeah my Vim was just freaking out",
    "start": "1483440",
    "end": "1489960"
  },
  {
    "text": "for a second get rid of this break",
    "start": "1489960",
    "end": "1495760"
  },
  {
    "text": "point um so now same exact Behavior as we had before except we're we now have",
    "start": "1495760",
    "end": "1503000"
  },
  {
    "text": "an effect. gen happening here but like if we wanted to get access to the Parent",
    "start": "1503000",
    "end": "1508039"
  },
  {
    "text": "Command um we've actually made commands uh subtypes of effable meaning",
    "start": "1508039",
    "end": "1514200"
  },
  {
    "text": "that they're they're b or sub types of effect meaning that they're yieldable um and when you yield a parent",
    "start": "1514200",
    "end": "1520960"
  },
  {
    "text": "command in a sub command you get access to all the pars options and arguments",
    "start": "1520960",
    "end": "1526120"
  },
  {
    "text": "from this Parent Command in your that's really smart pun",
    "start": "1526120",
    "end": "1531880"
  },
  {
    "text": "intended I hope I hope Tim watches just so he hears that particular pun um so",
    "start": "1533679",
    "end": "1542279"
  },
  {
    "text": "mini get and now if we want to just like you know take a look at the parsed type",
    "start": "1542279",
    "end": "1548440"
  },
  {
    "text": "here you can see we basically get the fully parsed oops fully parsed Parent",
    "start": "1548440",
    "end": "1553799"
  },
  {
    "text": "Command options and arguments that config object uh um we get that in our",
    "start": "1553799",
    "end": "1559120"
  },
  {
    "text": "child command now and can use it however we want and the even cooler part about",
    "start": "1559120",
    "end": "1565080"
  },
  {
    "text": "this so configs now you can see is our option of hashmap we can use it and there we",
    "start": "1565080",
    "end": "1571880"
  },
  {
    "text": "actually do use it in the um clone command here to just demo how you could",
    "start": "1571880",
    "end": "1577279"
  },
  {
    "text": "potentially you know use it if you wanted to but what's really cool about",
    "start": "1577279",
    "end": "1583039"
  },
  {
    "text": "this is we've also made this type safe in that when you yield a parent",
    "start": "1583039",
    "end": "1588919"
  },
  {
    "text": "command in a sub command The Parent Command gets added to the environment of the subc",
    "start": "1588919",
    "end": "1595159"
  },
  {
    "text": "command and when you provide the parent to that",
    "start": "1595159",
    "end": "1602039"
  },
  {
    "text": "subcommand with the with sub commands combinator um it erases that type the",
    "start": "1602039",
    "end": "1607200"
  },
  {
    "text": "parent will erase the type from the child command um and you end up with uh never in the environment so if you don't",
    "start": "1607200",
    "end": "1614360"
  },
  {
    "text": "do that um you'll end up with a type error um because the command. Run should",
    "start": "1614360",
    "end": "1620720"
  },
  {
    "text": "expect uh never for the environment so we've made it type safe to be able to do",
    "start": "1620720",
    "end": "1626679"
  },
  {
    "text": "this which again was something I really never thought we would be able to get to I was very excited about localized handlers I didn't really think we'd get",
    "start": "1626679",
    "end": "1633039"
  },
  {
    "text": "this far um but through some uh Tim Smart magic we made it",
    "start": "1633039",
    "end": "1640159"
  },
  {
    "text": "happen um yeah so that's probably one of like the coolest features about the",
    "start": "1640159",
    "end": "1645840"
  },
  {
    "text": "localized handlers that we've been able to figure F out is we took this problem that we thought was going to basically negate the value of localized handlers",
    "start": "1645840",
    "end": "1653480"
  },
  {
    "text": "and made it into a feature um and we made it type safe so this is something that you don't you know you you you",
    "start": "1653480",
    "end": "1660279"
  },
  {
    "text": "don't just struggle with the previous versions of CLI but you also like this is a problem that you always had",
    "start": "1660279",
    "end": "1665799"
  },
  {
    "text": "problems with in Yaks commander and all of the other CLI tools out there this is",
    "start": "1665799",
    "end": "1671360"
  },
  {
    "text": "uh impressive yeah I agree I mean I think",
    "start": "1671360",
    "end": "1677320"
  },
  {
    "text": "um there is a lot of value in when you have a program that has Comm parent commands",
    "start": "1677320",
    "end": "1683840"
  },
  {
    "text": "that can take arguments and subcommands that can take arguments um and being able to pass those arguments to The",
    "start": "1683840",
    "end": "1690320"
  },
  {
    "text": "Parent Command run the subc command and still have the ability to utilize them it just makes sense to me um when you",
    "start": "1690320",
    "end": "1696120"
  },
  {
    "text": "have a CLI program for your subcommand to be able to utilize the values that you're passing to the parent um so yeah",
    "start": "1696120",
    "end": "1703880"
  },
  {
    "text": "we're very excited about this um fun is only possible because of uh fact having",
    "start": "1703880",
    "end": "1711000"
  },
  {
    "text": "a context and right I I guess from what we spoke",
    "start": "1711000",
    "end": "1717600"
  },
  {
    "text": "before this kind of a tag which is generated I we even saw it in the in the",
    "start": "1717600",
    "end": "1723399"
  },
  {
    "text": "type of the command before so when you create a command there is a tag which is generated and that's exactly what what",
    "start": "1723399",
    "end": "1731760"
  },
  {
    "text": "leads to the possibility of providing to the child or reading from the parent that that's that's very very nice there",
    "start": "1731760",
    "end": "1737880"
  },
  {
    "text": "all the pieces falling into place it's great one one open question that this leaves for me um so now you have all of",
    "start": "1737880",
    "end": "1744440"
  },
  {
    "text": "these different inherited options and ARS from different layers of your nested",
    "start": "1744440",
    "end": "1749840"
  },
  {
    "text": "command um utility uh what if I wanted to do some",
    "start": "1749840",
    "end": "1756000"
  },
  {
    "text": "validation on top of the instructions that I'm passing along the options and ARS uh when I'm like for for the passing",
    "start": "1756000",
    "end": "1763279"
  },
  {
    "text": "so if I wanted to for instance do some schema um magic to to to you know have more more control over which ARS are",
    "start": "1763279",
    "end": "1770559"
  },
  {
    "text": "accepted and what what what isn't accepted yeah that's a good question",
    "start": "1770559",
    "end": "1776640"
  },
  {
    "text": "it's it's relatively um we don't have a good user story around it yet um we are thinking",
    "start": "1776640",
    "end": "1785480"
  },
  {
    "text": "or I'm I was kind of considering adding a um I can I would consider I would",
    "start": "1785480",
    "end": "1791480"
  },
  {
    "text": "consider this like a drop- down options uh Constructor where you can give",
    "start": "1791480",
    "end": "1798399"
  },
  {
    "text": "um the you can it maybe it would be called like options. schema or make or whatever with",
    "start": "1798399",
    "end": "1805519"
  },
  {
    "text": "from schema I don't know um but basically the point would be you would",
    "start": "1805519",
    "end": "1810600"
  },
  {
    "text": "give the option a name and a schema and it would just parse using that schema um",
    "start": "1810600",
    "end": "1816519"
  },
  {
    "text": "because then you could do some really complex stuff like providing Json on the command line and making it available um",
    "start": "1816519",
    "end": "1822360"
  },
  {
    "text": "you know inside your program there's a lot of use cases for that um you know if you're especially you're writing like JQ",
    "start": "1822360",
    "end": "1828399"
  },
  {
    "text": "heavy um CLI stuff in bash and you want to pipe it to like an effect CLI",
    "start": "1828399",
    "end": "1833559"
  },
  {
    "text": "application or something like that or if you're curling some API response and you're getting Json back and you want to",
    "start": "1833559",
    "end": "1838679"
  },
  {
    "text": "validate it um so it's something I've been considering as a feature um to add because I don't actually think it would",
    "start": "1838679",
    "end": "1844960"
  },
  {
    "text": "be that difficult because if we look uh I'll drop into the internals for I mean to some extent it's already possible in",
    "start": "1844960",
    "end": "1852399"
  },
  {
    "text": "the sense that you could declare the schemas are the the arguments as string and and in the command Handler as yeah",
    "start": "1852399",
    "end": "1859360"
  },
  {
    "text": "but then as the first thing what I was wondering how would then the sub command also get the past version of that you",
    "start": "1859360",
    "end": "1865760"
  },
  {
    "text": "know after sche yeah you would need to reparse it or or have a separated tag",
    "start": "1865760",
    "end": "1872559"
  },
  {
    "text": "that you propagate manually which is not the not the best and obviously can can",
    "start": "1872559",
    "end": "1878279"
  },
  {
    "text": "be automated and it would be awesome to have it automated so may maybe this is a",
    "start": "1878279",
    "end": "1883480"
  },
  {
    "text": "good time to talk about the internals a little bit also just so people can understand what's going on maybe under",
    "start": "1883480",
    "end": "1889080"
  },
  {
    "text": "the hood a tiny bit um maybe we show first the usage sure sure let's take a",
    "start": "1889080",
    "end": "1897840"
  },
  {
    "text": "look I don't know why my the wizard in",
    "start": "1897840",
    "end": "1903000"
  },
  {
    "text": "action um we have another example in here um called Naval fate Naval fate is",
    "start": "1903000",
    "end": "1910440"
  },
  {
    "text": "a CLI a make believe CI application that was sort of Po popularized by uh the do",
    "start": "1910440",
    "end": "1917360"
  },
  {
    "text": "oped command line specification so I thought it would be a fun challenge to",
    "start": "1917360",
    "end": "1923279"
  },
  {
    "text": "build it with effect CLI um it's not exactly the",
    "start": "1923279",
    "end": "1928760"
  },
  {
    "text": "specification um that Naval fate specifies um so maybe I can like show",
    "start": "1928760",
    "end": "1935440"
  },
  {
    "text": "that a little bit uh if we open up",
    "start": "1935440",
    "end": "1941799"
  },
  {
    "text": "Chrome dock opt so it's not the exact uh spec here",
    "start": "1941799",
    "end": "1950039"
  },
  {
    "text": "because um in my opinion having two Boolean flags that invert one another is",
    "start": "1950039",
    "end": "1955080"
  },
  {
    "text": "somewhat unintuitive but you could theoretically make this work in effect CLI by adding drifting as a negation",
    "start": "1955080",
    "end": "1961559"
  },
  {
    "text": "name to your Boolean I did not do that with my implementation but um the point",
    "start": "1961559",
    "end": "1966799"
  },
  {
    "text": "is if we go back um we built this little Naval fate or I built this little Naval fade",
    "start": "1966799",
    "end": "1972000"
  },
  {
    "text": "example to show um how you might make a slightly more complex version that has like persist distance to a local storage",
    "start": "1972000",
    "end": "1978600"
  },
  {
    "text": "area and um you know just to kind of show off like um something a little bit",
    "start": "1978600",
    "end": "1985480"
  },
  {
    "text": "more complicated um so it might be more fun to run the wizard on a slightly more complex uh CLI app um so the first thing",
    "start": "1985480",
    "end": "1993679"
  },
  {
    "text": "we might want to do is just run the help documentation I was about to say let's",
    "start": "1993679",
    "end": "1999799"
  },
  {
    "text": "start from the help so so when you run help um it gives you the help",
    "start": "1999799",
    "end": "2007679"
  },
  {
    "text": "for the command that you run help for now I recognize that what I just said",
    "start": "2007679",
    "end": "2013200"
  },
  {
    "text": "might be slightly like recursive but um as the help command",
    "start": "2013200",
    "end": "2018919"
  },
  {
    "text": "is true um so when we run help for our Parent Command it gives us the help for",
    "start": "2018919",
    "end": "2026679"
  },
  {
    "text": "all of its options arguments and subcommands so whenever you run help for command it'll give you the enumeration",
    "start": "2026679",
    "end": "2033639"
  },
  {
    "text": "of help for um itself and then also for any sub commands that it defines so we",
    "start": "2033639",
    "end": "2039080"
  },
  {
    "text": "don't have any top level custom commands right now um it's just the built-in help and version commands so if we run",
    "start": "2039080",
    "end": "2047839"
  },
  {
    "text": "version we also get access to the version but the cool thing about help is if you you can run it for sub commands",
    "start": "2047839",
    "end": "2054800"
  },
  {
    "text": "as well so for example if we run sub uh help for the ship command we get the specific usage for the ship command so",
    "start": "2054800",
    "end": "2062878"
  },
  {
    "text": "in this case ship does have an option that it defines which I don't have in my little spec up here um but we have a",
    "start": "2062879",
    "end": "2070760"
  },
  {
    "text": "verbose option which is why it shows up in the help dox and then it also shows the help for the subcommands of ship um",
    "start": "2070760",
    "end": "2078679"
  },
  {
    "text": "and then similarly if we go one level",
    "start": "2078679",
    "end": "2082638"
  },
  {
    "text": "deeper it's a way to be able to help users understand uh",
    "start": "2084280",
    "end": "2091240"
  },
  {
    "text": "the levels of your CLI application um in a textual format",
    "start": "2091240",
    "end": "2098240"
  },
  {
    "text": "but it's still not great because you have to run help multiple times you have",
    "start": "2098240",
    "end": "2103480"
  },
  {
    "text": "to like kind of Step through the CLI app yourself um and so I thought it would be",
    "start": "2103480",
    "end": "2108839"
  },
  {
    "text": "cool if we built a wizard mode that basically did this for a user for your",
    "start": "2108839",
    "end": "2115119"
  },
  {
    "text": "CLI app automatically basic basically walks a user through by the way it's already very impressive that all of that",
    "start": "2115119",
    "end": "2121560"
  },
  {
    "text": "is generated out of just descriptions and stuff like this is already nuts to me and you can you can see here actually",
    "start": "2121560",
    "end": "2128760"
  },
  {
    "text": "that we're adding custom descriptions to our arguments um which you get uh in the",
    "start": "2128760",
    "end": "2133920"
  },
  {
    "text": "help documentation as well um so it is kind of cool like you know you get the",
    "start": "2133920",
    "end": "2139839"
  },
  {
    "text": "ability to add pieces of information you can add descriptions to your commands as well and kind of see those things in the",
    "start": "2139839",
    "end": "2146520"
  },
  {
    "text": "terminal um sorry can I can I also take control of the examples",
    "start": "2146520",
    "end": "2152359"
  },
  {
    "text": "um when I'm building a sine take command examples with you know all of the the different options there um can I also",
    "start": "2152359",
    "end": "2158920"
  },
  {
    "text": "control what is printed there or is this all generated always so the the control you have over",
    "start": "2158920",
    "end": "2169119"
  },
  {
    "text": "the generated help documentation is somewhat limited you can't take advant uh control of the examples here because",
    "start": "2169119",
    "end": "2176800"
  },
  {
    "text": "these exam this this is not really an example it's the usage of the command so if you like you know when you run the",
    "start": "2176800",
    "end": "2183640"
  },
  {
    "text": "help for example like if we look here at the new command sub command of ship uh when we run the",
    "start": "2183640",
    "end": "2189880"
  },
  {
    "text": "help documentation for um sorry when we run the help",
    "start": "2189880",
    "end": "2195400"
  },
  {
    "text": "documentation for new or move or whatever um we end up getting like the",
    "start": "2195400",
    "end": "2201160"
  },
  {
    "text": "uh and I think I actually just found a small bug um we're getting the incorrect help documentation for this is a good",
    "start": "2201160",
    "end": "2208640"
  },
  {
    "text": "piece of information to have um and I actually think I know why this is happening which I was going to hint at",
    "start": "2208640",
    "end": "2214800"
  },
  {
    "text": "at the end of our recording but we just removed an entire like primitive from",
    "start": "2214800",
    "end": "2220480"
  },
  {
    "text": "the command descriptions um but the",
    "start": "2220480",
    "end": "2226119"
  },
  {
    "text": "point is like these command descriptions are the actual usage of your subc command so taking control of",
    "start": "2226119",
    "end": "2232960"
  },
  {
    "text": "them might be helpful in certain circumstances but at the moment we don't I meant more like for example values for",
    "start": "2232960",
    "end": "2238880"
  },
  {
    "text": "instance in this case speed here that you basically say speed 10 or instead of integer",
    "start": "2238880",
    "end": "2244119"
  },
  {
    "text": "right uh I see what you're saying um yeah I mean it help documentation is one",
    "start": "2244119",
    "end": "2251440"
  },
  {
    "text": "area of the CLI that I haven't spent a ton of time recently and I want to",
    "start": "2251440",
    "end": "2257040"
  },
  {
    "text": "improve the user story around help docs because I feel like there's a huge opportunity there to make",
    "start": "2257040",
    "end": "2264240"
  },
  {
    "text": "like creating this text output much easier no one does it manually like this is this is why this is so so so great",
    "start": "2264240",
    "end": "2271599"
  },
  {
    "text": "like no one writes these detailed descriptions and examples for for",
    "start": "2271599",
    "end": "2276800"
  },
  {
    "text": "commands and help texts by themselves and having that generated just from me look look up there it's like 10 lines of",
    "start": "2276800",
    "end": "2283119"
  },
  {
    "text": "code for declaring the args and the options and then you get all of this output for free it's",
    "start": "2283119",
    "end": "2289440"
  },
  {
    "text": "nuts yeah and it it's it's definitely like a lot of fun for you know building",
    "start": "2289440",
    "end": "2295480"
  },
  {
    "text": "a CLI you don't have to worry about the annoying Parts which is for most of",
    "start": "2295480",
    "end": "2300640"
  },
  {
    "text": "developers the annoying part is documentation so at least the documentation is created for you",
    "start": "2300640",
    "end": "2307079"
  },
  {
    "text": "um but again the help documentation is super cool it's useful I have to fix",
    "start": "2307079",
    "end": "2312280"
  },
  {
    "text": "this bug it's not released so don't worry but um the cooler part I think the",
    "start": "2312280",
    "end": "2320560"
  },
  {
    "text": "better user story in my opinion um is not forcing a user to walk through your",
    "start": "2320560",
    "end": "2326160"
  },
  {
    "text": "CLI yourself or themselves but to automatically walk the",
    "start": "2326160",
    "end": "2331880"
  },
  {
    "text": "user through the CLI application we have a full as internally which we can show",
    "start": "2331880",
    "end": "2337319"
  },
  {
    "text": "off in a little while that we basically Traverse to be able to generate the help documentation to be able to um generate",
    "start": "2337319",
    "end": "2345319"
  },
  {
    "text": "the completions which we can also show off um and we also use it to generate",
    "start": "2345319",
    "end": "2350720"
  },
  {
    "text": "wizard mode so if we run every CLI app has this by the way",
    "start": "2350720",
    "end": "2357200"
  },
  {
    "text": "every effect not every CLI app every effect CLI app has this built in um so",
    "start": "2357200",
    "end": "2363160"
  },
  {
    "text": "if you build your CLI with effect you get this for free um and all you have to",
    "start": "2363160",
    "end": "2368280"
  },
  {
    "text": "do is run wizard um and when you run this it will basically start an interactive uh wizard mode for your user",
    "start": "2368280",
    "end": "2375079"
  },
  {
    "text": "that walks them through how to use your CLI application um so the first thing we're",
    "start": "2375079",
    "end": "2381760"
  },
  {
    "text": "greeted with here is that we're running wizard mode for our Naval fate application uh wizard Mode's going to",
    "start": "2381760",
    "end": "2388319"
  },
  {
    "text": "assist us with constructing a command for Naval fate so please answer all the prompts provided first thing I'll show",
    "start": "2388319",
    "end": "2395000"
  },
  {
    "text": "is that when you quit wizard mode um one of the fun bugs that we had for a little",
    "start": "2395000",
    "end": "2400920"
  },
  {
    "text": "while was that you'd get a full like stack Trace when you quit wizard mode because we I wasn't handling like the",
    "start": "2400920",
    "end": "2406720"
  },
  {
    "text": "quitting properly but now you just get a nice message that hey you're quitting that's it you're not going to get",
    "start": "2406720",
    "end": "2412599"
  },
  {
    "text": "anything else um and if we restart wizard mode um we can actually go",
    "start": "2412599",
    "end": "2418440"
  },
  {
    "text": "through every one of these commands and options and figure out the command that we were want to run and the other thing",
    "start": "2418440",
    "end": "2425280"
  },
  {
    "text": "that's kind of cool about wizard mode is the command itself is um incrementally",
    "start": "2425280",
    "end": "2431400"
  },
  {
    "text": "updated as you walk through the wizard so the top level command has two sub",
    "start": "2431400",
    "end": "2437000"
  },
  {
    "text": "commands that we can run it's got no options and arguments so we're not generating any help or wizard uh prompts",
    "start": "2437000",
    "end": "2443800"
  },
  {
    "text": "for options and arguments um but oops if we want just like before",
    "start": "2443800",
    "end": "2452240"
  },
  {
    "text": "I felt team style now I feel max style this is definitely your baby this is my",
    "start": "2452240",
    "end": "2458520"
  },
  {
    "text": "baby I've had a lot of fun with wizard mode fun and hair pulling out moments",
    "start": "2458520",
    "end": "2463920"
  },
  {
    "text": "like why isn't this working um so anyways if uh we have the ability to",
    "start": "2463920",
    "end": "2470560"
  },
  {
    "text": "flip back and forth between our subcommands one Improvement that I could potentially make here is adding the",
    "start": "2470560",
    "end": "2476280"
  },
  {
    "text": "description uh alongside each one of these like uh select commands because um",
    "start": "2476280",
    "end": "2483319"
  },
  {
    "text": "prompts are also built directly into effect CL you can add prompt based",
    "start": "2483319",
    "end": "2488680"
  },
  {
    "text": "commands to your CLI like very very easily um there's a whole examples",
    "start": "2488680",
    "end": "2494720"
  },
  {
    "text": "module for uh looking at that as well and this wizard mode is built on the",
    "start": "2494720",
    "end": "2499800"
  },
  {
    "text": "prompt module um so let's just step through",
    "start": "2499800",
    "end": "2504839"
  },
  {
    "text": "some of this so maybe we want to create uh let's say that our goal is to create a new ship okay so um we selected our",
    "start": "2504839",
    "end": "2512240"
  },
  {
    "text": "ship command and you can see that the command that we're building up here has now updated to include our ship command",
    "start": "2512240",
    "end": "2517599"
  },
  {
    "text": "and now we're running the options wizard for ship um we have a little toggle",
    "start": "2517599",
    "end": "2524599"
  },
  {
    "text": "here um and it's telling us that we're going to basically select a value for the verbose option that we've provided",
    "start": "2524599",
    "end": "2531480"
  },
  {
    "text": "here um do we want it to be true do we want it to be false I don't want to run in verbose mode I want to run not",
    "start": "2531480",
    "end": "2537040"
  },
  {
    "text": "verbose mode um so it continues to update our Command",
    "start": "2537040",
    "end": "2542200"
  },
  {
    "text": "here um and wizard mode is like very explicit so Boolean options can accept",
    "start": "2542200",
    "end": "2549079"
  },
  {
    "text": "the actual Boolean value they can accept kind of a couple of different true and false values um and it's documented in",
    "start": "2549079",
    "end": "2557760"
  },
  {
    "text": "the Boolean uh combinator um but when wizard mode is",
    "start": "2557760",
    "end": "2565359"
  },
  {
    "text": "generating the command line output um it's it it itself is very verbose meaning that it will use the long form",
    "start": "2565359",
    "end": "2571760"
  },
  {
    "text": "Boolean option always instead of uh just using the command line",
    "start": "2571760",
    "end": "2576839"
  },
  {
    "text": "flag um which to be honest I prefer because it's the most descriptive I mean",
    "start": "2576839",
    "end": "2583440"
  },
  {
    "text": "I I don't IM this is still a learning tool I don't imagine you want to use your CLI through a visard mode usually",
    "start": "2583440",
    "end": "2592200"
  },
  {
    "text": "but especially when you're figuring out new commands and so on and so forth I I'd love to use the wizard mode then",
    "start": "2592200",
    "end": "2599079"
  },
  {
    "text": "copy the command and put it on a on a script file that's exactly exactly and in the script file if you have the the",
    "start": "2599079",
    "end": "2605800"
  },
  {
    "text": "very long and descripting things it's very helpful when when you read it to to",
    "start": "2605800",
    "end": "2611319"
  },
  {
    "text": "understand it instead of having an implicit context I agree and that was the one of the thoughts I had the other",
    "start": "2611319",
    "end": "2618280"
  },
  {
    "text": "reason why it exists this way is because it would be almost prohibitively",
    "start": "2618280",
    "end": "2624720"
  },
  {
    "text": "difficult to uh when you're when we're generating a wizard for a Boolean option",
    "start": "2624720",
    "end": "2631040"
  },
  {
    "text": "to under to while we're running the wizard to be able to know the negation",
    "start": "2631040",
    "end": "2636240"
  },
  {
    "text": "name not the negation names the um value for if present or not uh as we're",
    "start": "2636240",
    "end": "2641839"
  },
  {
    "text": "traversing so it's just it's also easier uh to do it this way but the other reason it's done this way is to be",
    "start": "2641839",
    "end": "2648680"
  },
  {
    "text": "intentionally verbos because we want to make sure users have a good understanding of like what they're",
    "start": "2648680",
    "end": "2653960"
  },
  {
    "text": "actually running to your point Mike um so we want to create a new ship so we'll",
    "start": "2653960",
    "end": "2659880"
  },
  {
    "text": "select new and now we're running an args wizard for the new argument um so you can see we're we're",
    "start": "2659880",
    "end": "2666880"
  },
  {
    "text": "running it for the name ARG it's a userdefined piece of text the name of the ship we want to create um so maybe",
    "start": "2666880",
    "end": "2672359"
  },
  {
    "text": "we want to create the uh I don't know may to because I don't know if I've",
    "start": "2672359",
    "end": "2678880"
  },
  {
    "text": "already created one let's find out um and then once you're done with",
    "start": "2678880",
    "end": "2684760"
  },
  {
    "text": "all of the prompts that wizard mode is going to run for you it will give you the option of",
    "start": "2684760",
    "end": "2690800"
  },
  {
    "text": "running the command using the CLI itself so um um you can either take this",
    "start": "2690800",
    "end": "2698640"
  },
  {
    "text": "command line set of arguments and run it although uh one of the improvements I'd",
    "start": "2698640",
    "end": "2704559"
  },
  {
    "text": "like to make which also is sort of impossible uh because we don't actually",
    "start": "2704559",
    "end": "2709920"
  },
  {
    "text": "get this information inside the CLI but um getting the actual executable uh that",
    "start": "2709920",
    "end": "2717319"
  },
  {
    "text": "the user is running uh to run their C would be nice so for example I'm running this with like PM pnpm TSX file name",
    "start": "2717319",
    "end": "2726359"
  },
  {
    "text": "right it would be nice if I could figure out a way to get that in here instead of just using the name of the Parent Command we actually isn't it process do",
    "start": "2726359",
    "end": "2734680"
  },
  {
    "text": "arv Z so process. rv0 in this case would be pnpm but the full executable is pnpm",
    "start": "2734680",
    "end": "2742800"
  },
  {
    "text": "TSX file name um and because of the way",
    "start": "2742800",
    "end": "2747960"
  },
  {
    "text": "that effect CLI is designed it's designed to be agnostic to first of all",
    "start": "2747960",
    "end": "2753240"
  },
  {
    "text": "the the platform it's running on you provide the platform form uh that it's running on as a service from the effect",
    "start": "2753240",
    "end": "2759400"
  },
  {
    "text": "platform repository and it's also designed to be agnostic of the arguments you provide it the arguments um so the",
    "start": "2759400",
    "end": "2767920"
  },
  {
    "text": "arguments that effect CLI has to work with already have the executable trimmed off uh usually um and in all the",
    "start": "2767920",
    "end": "2775800"
  },
  {
    "text": "examples you'll see we're running in node um but we trim off the first two arguments",
    "start": "2775800",
    "end": "2784640"
  },
  {
    "text": "because for our examples we're assuming you're running pnpm TSX blah blah blah",
    "start": "2784640",
    "end": "2789720"
  },
  {
    "text": "um so it trims off the first few arguments in order to make it work um so",
    "start": "2789720",
    "end": "2794800"
  },
  {
    "text": "that's it's if we've intentionally designed it this way we've intentionally designed it to allow you to pass in the",
    "start": "2794800",
    "end": "2801119"
  },
  {
    "text": "arguments explicitly um we believe it's better this way um but this is one area",
    "start": "2801119",
    "end": "2808079"
  },
  {
    "text": "that I'd like to find a better still I mean you you could Define the name of",
    "start": "2808079",
    "end": "2815960"
  },
  {
    "text": "the CLI by using the process. AR arv and then it would be it's kind of up to the",
    "start": "2815960",
    "end": "2823800"
  },
  {
    "text": "user yeah we could uses the name so whatever name I provide it's gonna use",
    "start": "2823800",
    "end": "2829760"
  },
  {
    "text": "it if I'm using this node the name could be generated from RV or",
    "start": "2829760",
    "end": "2835640"
  },
  {
    "text": "whatever yeah it would be it it it's definitely something that we want to",
    "start": "2835640",
    "end": "2840800"
  },
  {
    "text": "explore more in the future U because the way that you run a CLI can vary like if",
    "start": "2840800",
    "end": "2846079"
  },
  {
    "text": "you compile a binary using bun or if you uh are running node file name or if",
    "start": "2846079",
    "end": "2852559"
  },
  {
    "text": "you're running it with pnpm or so it's a it for now we've decided to make",
    "start": "2852559",
    "end": "2858119"
  },
  {
    "text": "providing the arguments to the program as being explicit um but and we feel",
    "start": "2858119",
    "end": "2863680"
  },
  {
    "text": "like it's a good compromise or I feel like it's a good compromise because when you run wizard mode even though the uh",
    "start": "2863680",
    "end": "2869760"
  },
  {
    "text": "arguments that you get out in at the end of wizard mode may not reflect the executable that you're running um the",
    "start": "2869760",
    "end": "2877640"
  },
  {
    "text": "you have the option to just run the command directly at that point so now if we want to run this command we can",
    "start": "2877640",
    "end": "2882960"
  },
  {
    "text": "indicate whether or not we want to run it yes or no um let's run the command would it be possible to like provide to",
    "start": "2882960",
    "end": "2889400"
  },
  {
    "text": "the Run command instead of only the arguments also the binary name sure yeah",
    "start": "2889400",
    "end": "2896160"
  },
  {
    "text": "it's definitely possible it's not it's not it's it is definitely a thing that is possible",
    "start": "2896160",
    "end": "2902800"
  },
  {
    "text": "absolutely um I mean it's still agnostic from the environment and everything else you give the whole thing the the",
    "start": "2902800",
    "end": "2909240"
  },
  {
    "text": "rendering and everything else is completely it's completely detached so sounds sounds like a good compromise",
    "start": "2909240",
    "end": "2916680"
  },
  {
    "text": "yeah and it's something I've wanted to do because there are a lot of places inside CLI where having the name of the",
    "start": "2916680",
    "end": "2922440"
  },
  {
    "text": "executable would be nice um but anyways if we actually decide we want to run the",
    "start": "2922440",
    "end": "2930359"
  },
  {
    "text": "command that we've generated from The Wizard if we click yes it'll run the command back through the CLI app um and",
    "start": "2930359",
    "end": "2936960"
  },
  {
    "text": "we'll have created our ship and because of the way that the little example is designed here we have this little mock",
    "start": "2936960",
    "end": "2942559"
  },
  {
    "text": "store um that the ships are created in so if we for example rm-rf the naval",
    "start": "2942559",
    "end": "2950200"
  },
  {
    "text": "fate store and we run our uh pnpm TSX Naval",
    "start": "2950200",
    "end": "2955640"
  },
  {
    "text": "fate ship new the basically the exact same command that we ran through our",
    "start": "2955640",
    "end": "2962798"
  },
  {
    "text": "wizard the little example that we have um persists to like a little key Value",
    "start": "2963160",
    "end": "2970599"
  },
  {
    "text": "Store as like an example of how to use it um so and it uses like the example uses",
    "start": "2970599",
    "end": "2976760"
  },
  {
    "text": "schema it uses a bunch of different tools um excuse me um to make things a little",
    "start": "2976760",
    "end": "2985200"
  },
  {
    "text": "bit um more understandable more comprehensive we've gotten some feedback",
    "start": "2985200",
    "end": "2991319"
  },
  {
    "text": "that some of the examples that we provide are not in-depth enough so I wanted to make sure that this NE Naval fade example was a little bit more",
    "start": "2991319",
    "end": "2997400"
  },
  {
    "text": "involved to show people how you could potentially do some complicated things with the CLI",
    "start": "2997400",
    "end": "3003680"
  },
  {
    "text": "um the last really cool feature which I will show um is Let's",
    "start": "3003680",
    "end": "3010960"
  },
  {
    "text": "do let's get fish on our machine for example we could do it with Zsa with",
    "start": "3010960",
    "end": "3016480"
  },
  {
    "text": "zish we could do it with bash um but I just want to show the fish users specifically because this feature was",
    "start": "3016480",
    "end": "3022880"
  },
  {
    "text": "something that johannas had requested from me for I think two years and by the way the the",
    "start": "3022880",
    "end": "3028920"
  },
  {
    "text": "other day who was asking me about mik do we already have something for a prompt",
    "start": "3028920",
    "end": "3035920"
  },
  {
    "text": "in effect okay go to Max that was my",
    "start": "3035920",
    "end": "3041240"
  },
  {
    "text": "answer we do indeed um and you can actually see in the prompt examples while I'm downloading fish um you can",
    "start": "3041240",
    "end": "3048960"
  },
  {
    "text": "see the examples of using the prompt module um heavily heavily inspired by",
    "start": "3048960",
    "end": "3054640"
  },
  {
    "text": "prompt Js um Great Library heavily inspired especially the styling heavily inspired",
    "start": "3054640",
    "end": "3061559"
  },
  {
    "text": "um by that um we can actually show off some of this but basically you can create a prompt using the prompt module",
    "start": "3061559",
    "end": "3068040"
  },
  {
    "text": "and then you can R you can compose your prompts together so prompts have the ability to be like mapped flat mapped if",
    "start": "3068040",
    "end": "3075559"
  },
  {
    "text": "you flatmap a prompt it runs them in sequence it's kind of cool um but",
    "start": "3075559",
    "end": "3080760"
  },
  {
    "text": "basically once you have your final prompt that you want to run um you just pass it to command.",
    "start": "3080760",
    "end": "3086880"
  },
  {
    "text": "prompt and then you can run it as a normal like sub commmand of your C ass that's also how the wizard is",
    "start": "3086880",
    "end": "3092319"
  },
  {
    "text": "implemented right using all these yeah indeed um indeed regarding wizard mode",
    "start": "3092319",
    "end": "3097640"
  },
  {
    "text": "is there any um future where I can take some control over how the wizard is",
    "start": "3097640",
    "end": "3104319"
  },
  {
    "text": "generated for my command line application so for instance uh because I I like to wrap all of my programs in CIS",
    "start": "3104319",
    "end": "3111880"
  },
  {
    "text": "even if they are for Server runtimes um just to make them a little bit more configurable uh and um sometimes there I",
    "start": "3111880",
    "end": "3119880"
  },
  {
    "text": "have like let's say 50 different options um if that's a good design decision I",
    "start": "3119880",
    "end": "3124920"
  },
  {
    "text": "don't know but I do and so what what are my my options there for for uh maybe",
    "start": "3124920",
    "end": "3132200"
  },
  {
    "text": "excluding some of those from Wizard is that something that's",
    "start": "3132200",
    "end": "3136760"
  },
  {
    "text": "planned um probably not in the short term I",
    "start": "3137280",
    "end": "3142839"
  },
  {
    "text": "think like the goal would be to give as much control as we can um over what",
    "start": "3142839",
    "end": "3148559"
  },
  {
    "text": "you're running in the CLI as possible to the user um it's probably not a short-term goal I",
    "start": "3148559",
    "end": "3156200"
  },
  {
    "text": "have other features I want to tackle first um for example improving the help documentation and um kind of simplifying",
    "start": "3156200",
    "end": "3162760"
  },
  {
    "text": "some of the internals to make it a little bit more maintainable um adding some additional",
    "start": "3162760",
    "end": "3168040"
  },
  {
    "text": "features that have been requested for example um the with fallback from config combinators that allow you to fall back",
    "start": "3168040",
    "end": "3174440"
  },
  {
    "text": "from the effect config provider um the uh handling of secret",
    "start": "3174440",
    "end": "3181880"
  },
  {
    "text": "values um on the CLI which is I think something you requested Sebastian so that's actually currently in the works",
    "start": "3181880",
    "end": "3188359"
  },
  {
    "text": "um I've got a work in progress PR uh cooking for that um so there are just",
    "start": "3188359",
    "end": "3194960"
  },
  {
    "text": "like some other like higher priority features that I have to that I want to accomplish oh then another one is was",
    "start": "3194960",
    "end": "3201319"
  },
  {
    "text": "brought up on the Discord recently where um people want to be able to take more control over uh command line option and",
    "start": "3201319",
    "end": "3208760"
  },
  {
    "text": "argument processing um meaning at the moment we actually have a very specific set of",
    "start": "3208760",
    "end": "3215920"
  },
  {
    "text": "specifications over how the command line options and args are parsed um",
    "start": "3215920",
    "end": "3222760"
  },
  {
    "text": "so by default options and args of a command are only recognized before their subc commands meaning that in this",
    "start": "3222760",
    "end": "3230400"
  },
  {
    "text": "example- V is an argument for the program command u in this example example- V is an argument for the sub",
    "start": "3230400",
    "end": "3237440"
  },
  {
    "text": "command um we also have the the thing that people I think want to take more",
    "start": "3237440",
    "end": "3242559"
  },
  {
    "text": "control over is option and argument processing so processing of like option Flags or options themselves versus",
    "start": "3242559",
    "end": "3251119"
  },
  {
    "text": "positional args U because at the moment um the way the parser is defined",
    "start": "3251119",
    "end": "3257760"
  },
  {
    "text": "uh and it's it it's definitely doable it just requires some time the way the parser is defined right now options are",
    "start": "3257760",
    "end": "3264240"
  },
  {
    "text": "always parsed before positional arguments um definitely a limitation that I want",
    "start": "3264240",
    "end": "3270319"
  },
  {
    "text": "to remove uh from CLI um and potentially give people more control over how",
    "start": "3270319",
    "end": "3278960"
  },
  {
    "text": "options and args are processed for command I'm not exactly sure how it's going to work yet but it's definitely",
    "start": "3278960",
    "end": "3285480"
  },
  {
    "text": "something that I want to do um as a feature um I want to highlight prompts",
    "start": "3285480",
    "end": "3290880"
  },
  {
    "text": "really quick uh before we look at completions um and then I can answer any other questions you guys have so in this",
    "start": "3290880",
    "end": "3297880"
  },
  {
    "text": "prompt example I've sort of just done like a kitchen sync of some of the different prompts that are available U",
    "start": "3297880",
    "end": "3304040"
  },
  {
    "text": "just to kind of show off you know how you could potentially use the prompts so uh the first prompt uh we're using",
    "start": "3304040",
    "end": "3310880"
  },
  {
    "text": "prompt. all here which again just runs through the prompts in sequence um you can flatmap the prompts to get access to",
    "start": "3310880",
    "end": "3318160"
  },
  {
    "text": "the value from the previous prompt to use in your next prompt um so it's like it's very uh interesting and like fun to",
    "start": "3318160",
    "end": "3325240"
  },
  {
    "text": "design these prompt-based CIS um and again you can run it just like the prompt itself with prompt. run prompt is",
    "start": "3325240",
    "end": "3331960"
  },
  {
    "text": "also an effect so you don't even need to run prompt. run um you could just flatmap it as an effect uh but a lot of",
    "start": "3331960",
    "end": "3340720"
  },
  {
    "text": "times people want a specific subcommand in their CLI application to be a prompt",
    "start": "3340720",
    "end": "3345880"
  },
  {
    "text": "so you could you know make a subcommand in your CLI a command. prompt um and",
    "start": "3345880",
    "end": "3351039"
  },
  {
    "text": "then when people run that particular sub command they get these prompts so",
    "start": "3351039",
    "end": "3356240"
  },
  {
    "text": "um this is just again a kitchen sync um you can have select based prompts where",
    "start": "3356240",
    "end": "3361280"
  },
  {
    "text": "you provide descriptions you can disable options um so these are some options",
    "start": "3361280",
    "end": "3367039"
  },
  {
    "text": "that have descriptions we can't actually select the blue option because it's",
    "start": "3367039",
    "end": "3373520"
  },
  {
    "text": "disabled um but we can select red we have confirm based prompts so yes",
    "start": "3373520",
    "end": "3380400"
  },
  {
    "text": "or no um and you can flip in here there's a lot of like config parameters uh I forget what they",
    "start": "3380400",
    "end": "3388079"
  },
  {
    "text": "are uh and I forget how to show on my Mac ah um what the initial value is what",
    "start": "3388079",
    "end": "3395160"
  },
  {
    "text": "the label is going to be is there a placeholder like what does it look like um so you have some like config options",
    "start": "3395160",
    "end": "3401640"
  },
  {
    "text": "here we'll just say yes this is the coolest one uh I'm just going to like take some credit for this uh again super",
    "start": "3401640",
    "end": "3409280"
  },
  {
    "text": "heavily inspired by prompts JS great work on that Library um but you can",
    "start": "3409280",
    "end": "3414520"
  },
  {
    "text": "basic Ally um design a uh date mask for your date",
    "start": "3414520",
    "end": "3422240"
  },
  {
    "text": "prompt um and slowly iterate through it so uh like if we're back on the command line here we can use the K andj or up",
    "start": "3422240",
    "end": "3429359"
  },
  {
    "text": "and down to go through the different years that we have here I I have an immediate use case for this because it's",
    "start": "3429359",
    "end": "3435440"
  },
  {
    "text": "so painful in one of my programs to uh input dates I I need a start date for",
    "start": "3435440",
    "end": "3440559"
  },
  {
    "text": "when to start scraping data from an endpoint I I need this there right",
    "start": "3440559",
    "end": "3446160"
  },
  {
    "text": "now so you and you also get for some of these prompts you get the ability to validate so let's just say like we right",
    "start": "3446160",
    "end": "3452240"
  },
  {
    "text": "now we're looking to see if like uh we have a future date so let's just pick some future date and you get error",
    "start": "3452240",
    "end": "3458920"
  },
  {
    "text": "messages on the CLI as well uh if you provide like something that's invalid wait and then it lets you fix it so",
    "start": "3458920",
    "end": "3464720"
  },
  {
    "text": "the that's great yeah you can just keep you can just keep changing the value and",
    "start": "3464720",
    "end": "3470680"
  },
  {
    "text": "for the there I mean that's such a little thing right but having to restart the",
    "start": "3470680",
    "end": "3478079"
  },
  {
    "text": "program such a little thing it's such a little thing that it lets you retry here and fix the value instead of just flat",
    "start": "3478079",
    "end": "3484440"
  },
  {
    "text": "out breaking the CLI and letting you start over right um we have again validation for",
    "start": "3484440",
    "end": "3491640"
  },
  {
    "text": "like you know you can you can provide your own custom validation there's some validation that's built in I think for some of these prompts um",
    "start": "3491640",
    "end": "3499160"
  },
  {
    "text": "so uh we can you know we can go negative",
    "start": "3499160",
    "end": "3505319"
  },
  {
    "text": "if we want to and again it works with K andj you can also type numbers in won't",
    "start": "3505319",
    "end": "3510480"
  },
  {
    "text": "let you type letters um and if we don't provide something it's it's not happy",
    "start": "3510480",
    "end": "3516440"
  },
  {
    "text": "there's text prompts that can be changed in terms of how they're rendered so um",
    "start": "3516440",
    "end": "3523920"
  },
  {
    "text": "text prompts at the moment are uh are by default it's literally just text so you",
    "start": "3523920",
    "end": "3529240"
  },
  {
    "text": "saw it a lot in the Wizard where for example when I was entering the the ship's name that was a text based prompt you're just entering text",
    "start": "3529240",
    "end": "3535760"
  },
  {
    "text": "um but you can also change it to be either a password or a hidden uh type of",
    "start": "3535760",
    "end": "3542119"
  },
  {
    "text": "prompt so and this is actually one of the use cases for a secret um like",
    "start": "3542119",
    "end": "3547760"
  },
  {
    "text": "parsing things to secrets so if we set it to a password-based prompt um maybe",
    "start": "3547760",
    "end": "3553720"
  },
  {
    "text": "in that case like we should by default parse it to a secret if it's hidden or if it's just if it's a password so",
    "start": "3553720",
    "end": "3559480"
  },
  {
    "text": "password prompts will render as a password um and",
    "start": "3559480",
    "end": "3566039"
  },
  {
    "text": "uh hidden prompts are the type of prompts that you get like for example when you do like a a read- s in bash",
    "start": "3566039",
    "end": "3573280"
  },
  {
    "text": "where it's going to read the value but it's not going to print it as you type it right so if I did a hidden prompt I'd",
    "start": "3573280",
    "end": "3578680"
  },
  {
    "text": "be typing here but you wouldn't see anything um we've got toggle prompts um",
    "start": "3578680",
    "end": "3584799"
  },
  {
    "text": "you can change how they're rendered um and then when you're done um",
    "start": "3584799",
    "end": "3590799"
  },
  {
    "text": "I just print out like all of these but you basically get the structure uh the same type that you've defined in",
    "start": "3590799",
    "end": "3597960"
  },
  {
    "text": "your prompt is the structure that you get when it comes out um and again this is the basis for",
    "start": "3597960",
    "end": "3604240"
  },
  {
    "text": "Wizard mode so that's why it looks a little bit like wizard mode wizard mode does a little bit more like advanced",
    "start": "3604240",
    "end": "3610599"
  },
  {
    "text": "stuff to make it work um but it's based on the prompt module um and there are",
    "start": "3610599",
    "end": "3618520"
  },
  {
    "text": "again plans to add additional prompts like multi- select prompts and um other",
    "start": "3618520",
    "end": "3625039"
  },
  {
    "text": "types of prompts that exist there's I've seen prompts out there that are like uh",
    "start": "3625039",
    "end": "3630520"
  },
  {
    "text": "um I forget who showed me there's a prompt Library out there that generates prompts in uh in like a a rating format",
    "start": "3630520",
    "end": "3638200"
  },
  {
    "text": "where you can like it's like a you can like select like one star five star and it's like a rating and I thought that",
    "start": "3638200",
    "end": "3644280"
  },
  {
    "text": "was cool um so maybe I'll Implement that can create a custom prompt you can",
    "start": "3644280",
    "end": "3649480"
  },
  {
    "text": "indeed it's very complicated at the moment I'll show you the code for one um",
    "start": "3649480",
    "end": "3655240"
  },
  {
    "text": "so all of these prompts are built on the prompt. custom",
    "start": "3655240",
    "end": "3660319"
  },
  {
    "text": "combinator and this uh I have no uh dis the only disclaimer I will give about",
    "start": "3660319",
    "end": "3666440"
  },
  {
    "text": "the prompt internals is that they are very likely to change because I'm not happy with them um so the custom",
    "start": "3666440",
    "end": "3673319"
  },
  {
    "text": "combinator May is likely to change in the future um but if we look at for",
    "start": "3673319",
    "end": "3680039"
  },
  {
    "text": "example like the text prompt so all the prompts are built on",
    "start": "3680039",
    "end": "3686160"
  },
  {
    "text": "the prompt. custom combinator which takes in some initial state for your prompt a render function which gets the",
    "start": "3686160",
    "end": "3693359"
  },
  {
    "text": "previous the next state the and the action to The Prompt action to run and then a process function U because really",
    "start": "3693359",
    "end": "3701599"
  },
  {
    "text": "the uh prompt Runner the thing that runs the prompt is basically like a game loop",
    "start": "3701599",
    "end": "3708079"
  },
  {
    "text": "it's renders frame by frame so every single time you type something into the CLI it erases the whole screen and Reen",
    "start": "3708079",
    "end": "3714400"
  },
  {
    "text": "renders it so it's it's it's literally like a frame by frame renderer um but I'm really not happy with the design of",
    "start": "3714400",
    "end": "3722000"
  },
  {
    "text": "this it's unnecessarily complex it works um but it's not fun to write a prompt",
    "start": "3722000",
    "end": "3729319"
  },
  {
    "text": "that's custom at the moment uh and so I guess you're you're gonna have to do it only a few times",
    "start": "3729319",
    "end": "3735720"
  },
  {
    "text": "hopefully yeah I I think like the the internals are where I want to focus um I think there's a lot of room",
    "start": "3735720",
    "end": "3743039"
  },
  {
    "text": "for improvement but the what you get externally is pretty nice and the default prompts that",
    "start": "3743039",
    "end": "3749039"
  },
  {
    "text": "exist I think cover a lot of different use cases um but the thing is like when you drop down to the custom level you",
    "start": "3749039",
    "end": "3755799"
  },
  {
    "text": "take full control over rendering uh and full control over processing so you get",
    "start": "3755799",
    "end": "3761720"
  },
  {
    "text": "uh the the current state and the input when you're processing um and you get",
    "start": "3761720",
    "end": "3767680"
  },
  {
    "text": "previous next state and the prompt action when you're rendering um and prompt action is just a way for the",
    "start": "3767680",
    "end": "3774799"
  },
  {
    "text": "renderer currently to know when it should exit and when it should like for example trigger a uh beep uh I have it",
    "start": "3774799",
    "end": "3782559"
  },
  {
    "text": "disabled on my computer but like you know a lot of people when they enter something in their ter terminal they'll hear like a beep if it's incorrect so",
    "start": "3782559",
    "end": "3789079"
  },
  {
    "text": "you can do that with with uh the prompt-based actions as",
    "start": "3789079",
    "end": "3795440"
  },
  {
    "text": "well um so anyways last feature I will show off uh is we should now have fish",
    "start": "3795440",
    "end": "3803799"
  },
  {
    "text": "installed great um so the last feature I'll show",
    "start": "3803799",
    "end": "3810599"
  },
  {
    "text": "off is the automatic generation of completions so we can generate completions for um the bass shell we can",
    "start": "3810599",
    "end": "3818640"
  },
  {
    "text": "generate completions for Z CSH whatever you call it um I call it CSH I use CSH",
    "start": "3818640",
    "end": "3825200"
  },
  {
    "text": "um and then you can also generate completions for fish um so if you want to generate",
    "start": "3825200",
    "end": "3832599"
  },
  {
    "text": "completions we can maybe use the Naval fate example again examples Naval",
    "start": "3832599",
    "end": "3841559"
  },
  {
    "text": "fate and uh again every command has those built-in arguments right one of",
    "start": "3841559",
    "end": "3846720"
  },
  {
    "text": "them is completions um and it takes one of four",
    "start": "3846720",
    "end": "3853359"
  },
  {
    "text": "different arguments um so if I run it like this uh you'll just get the help",
    "start": "3853359",
    "end": "3858599"
  },
  {
    "text": "documentation which again I think is one reason why folks have been asking for the built-in command uh options to show",
    "start": "3858599",
    "end": "3865039"
  },
  {
    "text": "up here because if you run it if you run a CLI with a built-in option and it's wrong it'll show you the help",
    "start": "3865039",
    "end": "3871160"
  },
  {
    "text": "documentation but it won't show you the built-in options how to fix it right so",
    "start": "3871160",
    "end": "3876440"
  },
  {
    "text": "it's a good it's definitely a good suggestion uh for for the individual that made that that request um but",
    "start": "3876440",
    "end": "3882880"
  },
  {
    "text": "anyways uh if we run it for example with bash",
    "start": "3882880",
    "end": "3888520"
  },
  {
    "text": "we'll get a big generated bash script that uh you can then source to get all",
    "start": "3888520",
    "end": "3894640"
  },
  {
    "text": "the bash completions um same thing with zish I'm curious if you can uh",
    "start": "3894640",
    "end": "3901799"
  },
  {
    "text": "expose the the the default commands as normal commands that the",
    "start": "3901799",
    "end": "3908680"
  },
  {
    "text": "user can just Import in their in their",
    "start": "3908680",
    "end": "3914920"
  },
  {
    "text": "CLI it it's possible actually they can already I lied it's possible already um",
    "start": "3914920",
    "end": "3923279"
  },
  {
    "text": "it's like that then they would show in documentation they would flow the normal the only problem is that if you use them",
    "start": "3923279",
    "end": "3931039"
  },
  {
    "text": "as options in your CLI it sort of like duplicates everything um so like uh",
    "start": "3931039",
    "end": "3937720"
  },
  {
    "text": "they'll show up in your help but then they'll also show up in like the wizard for example um where you probably don't",
    "start": "3937720",
    "end": "3944000"
  },
  {
    "text": "want them so I think a good compromise here is probably to add that config to",
    "start": "3944000",
    "end": "3949119"
  },
  {
    "text": "the CLI where by default it shows the help for everything and then you can shut it off off with a CLI configuration",
    "start": "3949119",
    "end": "3956279"
  },
  {
    "text": "um which if you wanted to customize the CLI config for those who are curious there's not a whole lot of customization",
    "start": "3956279",
    "end": "3962720"
  },
  {
    "text": "at the moment um you can configure a few different things but you would basically provide",
    "start": "3962720",
    "end": "3970720"
  },
  {
    "text": "your custom CLI config as a layer to your CLI and it would overwrite the default configuration with whatever you",
    "start": "3970720",
    "end": "3977559"
  },
  {
    "text": "provide um and there's uh combinators in here to construct a",
    "start": "3977559",
    "end": "3984520"
  },
  {
    "text": "um CLI config just with like partial parameters it'll merge it with the default Etc so um so",
    "start": "3984520",
    "end": "3991680"
  },
  {
    "text": "yeah um so if we want to run generate",
    "start": "3991680",
    "end": "3997920"
  },
  {
    "text": "completions for fish for Naval fate um we'll get all these fish completions generated for us but we can then pipe it",
    "start": "3997920",
    "end": "4004400"
  },
  {
    "text": "to uh completions do fish right and then we can start a fish",
    "start": "4004400",
    "end": "4010720"
  },
  {
    "text": "shell and we can maybe source completions do",
    "start": "4010720",
    "end": "4016599"
  },
  {
    "text": "fish and now even though the naval fade binary doesn't exist on Our naal",
    "start": "4016599",
    "end": "4023079"
  },
  {
    "text": "Fate um we'll get generated completions for fish um so you'll get like the you",
    "start": "4023079",
    "end": "4029720"
  },
  {
    "text": "know stuff you can go through ship move new",
    "start": "4029720",
    "end": "4035039"
  },
  {
    "text": "shoot um and then similarly if we were to use a subcommand uh that takes",
    "start": "4035039",
    "end": "4041880"
  },
  {
    "text": "options what's one um move hang on I can't",
    "start": "4041880",
    "end": "4049880"
  },
  {
    "text": "remember ship move and you'll see all the generat",
    "start": "4051480",
    "end": "4056599"
  },
  {
    "text": "again my shell is not configured to render fish output pretty like some people is where they have like a nice",
    "start": "4056599",
    "end": "4061760"
  },
  {
    "text": "little thing that they can walk through and whatever and it's nice uh mine does it like this but um you can basically go",
    "start": "4061760",
    "end": "4068640"
  },
  {
    "text": "through and in this you actually in the completion script you actually do get the built-ins uh rendered for you um but",
    "start": "4068640",
    "end": "4076599"
  },
  {
    "text": "you can like you know go ahead and um you can go ahead and like do this and",
    "start": "4076599",
    "end": "4083240"
  },
  {
    "text": "of course I'm getting an error because this binary doesn't exist but um so yeah we have the ability to",
    "start": "4083240",
    "end": "4089319"
  },
  {
    "text": "generate completions for bash zsh and fish um if you notice anything weird",
    "start": "4089319",
    "end": "4095160"
  },
  {
    "text": "about completions please let me know uh I think in combination with what Mike earlier mentioned about passing in the",
    "start": "4095160",
    "end": "4100199"
  },
  {
    "text": "binary name here this this is a weird thing where like what if binary name actually on your machine is quite",
    "start": "4100199",
    "end": "4105600"
  },
  {
    "text": "differently than n fate exactly exactly this is a perfect",
    "start": "4105600",
    "end": "4112359"
  },
  {
    "text": "example of a place where I really wanted the binary name like the executable and I didn't have it so uh this is a really",
    "start": "4112359",
    "end": "4120278"
  },
  {
    "text": "good example of a place that I really wanted it um I think in most cases if",
    "start": "4120279",
    "end": "4125480"
  },
  {
    "text": "you were sourcing completions for an application you probably have it available on your system as like a an",
    "start": "4125480",
    "end": "4130920"
  },
  {
    "text": "executable like a binary that's just going to be the the program name but I don't want to make that assumption I",
    "start": "4130920",
    "end": "4135960"
  },
  {
    "text": "think it would be better to uh again to Mike's Point maybe Source",
    "start": "4135960",
    "end": "4141520"
  },
  {
    "text": "the executable as an additional argument um by the way an an idea",
    "start": "4141520",
    "end": "4147758"
  },
  {
    "text": "about the proposal of um of exposing the",
    "start": "4147759",
    "end": "4152798"
  },
  {
    "text": "the default as plain and normal commands I get that you want a bit of flexibility but uh like if you run the",
    "start": "4152799",
    "end": "4161278"
  },
  {
    "text": "wizard mode why can't you simply exclude the wizard flag from like you're",
    "start": "4161279",
    "end": "4169120"
  },
  {
    "text": "only going to access the wizard like for example when I when you do the wizard currently and you are one",
    "start": "4169120",
    "end": "4177440"
  },
  {
    "text": "step showing a sub command you don't show everything from the previous one so",
    "start": "4177440",
    "end": "4182640"
  },
  {
    "text": "if you enter the wizard wizard is already start that that should not even",
    "start": "4182640",
    "end": "4188080"
  },
  {
    "text": "it should not even appear I'm not I'm not closed off to the idea I think like I I welcome any ideas",
    "start": "4188080",
    "end": "4195840"
  },
  {
    "text": "because I think there's like I think there's huge opportunity for improvement with the CLI even with the way it is",
    "start": "4195840",
    "end": "4201880"
  },
  {
    "text": "currently like there's huge opportunities to improve it I think the internals are also like",
    "start": "4201880",
    "end": "4208719"
  },
  {
    "text": "approachable to somebody who's like intermediate with effect um so like uh",
    "start": "4208719",
    "end": "4215640"
  },
  {
    "text": "contributions and PRS are welcomed um but like the there I welcome",
    "start": "4215640",
    "end": "4222280"
  },
  {
    "text": "all suggestions because I think I really think that the effect CLI could be uh something like really really",
    "start": "4222280",
    "end": "4229640"
  },
  {
    "text": "excellent to use could be a great user story for developing applications with effect um it already is I think like",
    "start": "4229640",
    "end": "4236760"
  },
  {
    "text": "getting there but I have a lot of like improvements that I want to make um to improve the user experience uh using",
    "start": "4236760",
    "end": "4243320"
  },
  {
    "text": "effect CLI um so yeah I think there's definitely room for improvement and I'm welcome to all suggestions um what's the",
    "start": "4243320",
    "end": "4250520"
  },
  {
    "text": "best way for a potential future contributor hi YouTube uh to come and get in touch with",
    "start": "4250520",
    "end": "4257520"
  },
  {
    "text": "you uh definitely going on the effect Discord which will hopefully be included in the comments below by Mike um so",
    "start": "4257560",
    "end": "4265480"
  },
  {
    "text": "definitely join us on Discord there's a thriving community of um folks who love",
    "start": "4265480",
    "end": "4271520"
  },
  {
    "text": "effect love to use effect like to use effect to build really cool things um",
    "start": "4271520",
    "end": "4277480"
  },
  {
    "text": "and especially if you're curious about CLI or want to get involved with CLI development or learn some more about the",
    "start": "4277480",
    "end": "4283080"
  },
  {
    "text": "internals of how some of these things are built um definitely join us and you'll also be in Vienna for the effect",
    "start": "4283080",
    "end": "4288560"
  },
  {
    "text": "days right good I will I am CL I will be",
    "start": "4288560",
    "end": "4294360"
  },
  {
    "text": "there uh potentially we'll see no spoilers yet huh no no",
    "start": "4294360",
    "end": "4299719"
  },
  {
    "text": "spoilers The Talk has already been announced so um but yeah so the there's a lot",
    "start": "4299719",
    "end": "4309080"
  },
  {
    "text": "going on in this Library um I think we're probably I don't know if we're out of time to talk about the internals but",
    "start": "4309080",
    "end": "4316440"
  },
  {
    "text": "um there's definitely I it's like I said I think the internals are very approachable so I think folks who don't",
    "start": "4316440",
    "end": "4323120"
  },
  {
    "text": "have a lot of experience with effect um could potentially use this as like a place to start contributing if they",
    "start": "4323120",
    "end": "4329040"
  },
  {
    "text": "wanted to so maybe if like if maybe you want to spend like five minutes just",
    "start": "4329040",
    "end": "4335840"
  },
  {
    "text": "giving us a high level overview of the internals like if I if I wear a beginner",
    "start": "4335840",
    "end": "4342199"
  },
  {
    "text": "and trying to dig into the code base where where would I where would I start",
    "start": "4342199",
    "end": "4347840"
  },
  {
    "text": "and which are the components that mov together and sure very short I think we",
    "start": "4347840",
    "end": "4353320"
  },
  {
    "text": "are already we already showed an enough",
    "start": "4353320",
    "end": "4358400"
  },
  {
    "text": "material for for folks to be extremely excited and I I know usually folks after",
    "start": "4358400",
    "end": "4364920"
  },
  {
    "text": "after an hour an hour T trending to an hour and a half the the attention span",
    "start": "4364920",
    "end": "4371320"
  },
  {
    "text": "decreases so that's cool I'll give a brief overview I won't walk through like any of like the combinators or anything",
    "start": "4371320",
    "end": "4377159"
  },
  {
    "text": "like that um I'll just talk about like the overarching design because it might look a little weird to folks who aren't",
    "start": "4377159",
    "end": "4382600"
  },
  {
    "text": "familiar with it but um the idea is that again we have command options args um",
    "start": "4382600",
    "end": "4388520"
  },
  {
    "text": "options and args are built on top of this internal primitive class or not class data",
    "start": "4388520",
    "end": "4394159"
  },
  {
    "text": "type um and each one of these Primitives knows uh about its value and how to",
    "start": "4394159",
    "end": "4400560"
  },
  {
    "text": "parse that value um and then this is kind of built upon by like the options and and arguments modules um all of",
    "start": "4400560",
    "end": "4408040"
  },
  {
    "text": "these modules are built internally as an uh abstract syntax tree or a DSL an aeda",
    "start": "4408040",
    "end": "4414560"
  },
  {
    "text": "DSL however you want to call it um of instructions that are used to build up",
    "start": "4414560",
    "end": "4420480"
  },
  {
    "text": "to the argument or option or whatever so for example Primitives can be any one of",
    "start": "4420480",
    "end": "4425679"
  },
  {
    "text": "the Primitive is not really a DSL it's uh it's literally just a bunch of different data types but once you get",
    "start": "4425679",
    "end": "4432159"
  },
  {
    "text": "out of the prim module and start looking at the higher level options and arguments",
    "start": "4432159",
    "end": "4437760"
  },
  {
    "text": "modules we have an that we actually build up to describe options and",
    "start": "4437760",
    "end": "4442840"
  },
  {
    "text": "arguments um so while externally you just have like the options type internally we uh drop down to a tiny bit",
    "start": "4442840",
    "end": "4450400"
  },
  {
    "text": "of uh type on safety and we utilize un uh this instruction type to represent",
    "start": "4450400",
    "end": "4457679"
  },
  {
    "text": "the as that we're building up and you'll see this pattern repeated in the arguments module where we have a bunch",
    "start": "4457679",
    "end": "4462760"
  },
  {
    "text": "of instructions that we want to use inside the command descriptor module which is the basis for the Command",
    "start": "4462760",
    "end": "4468760"
  },
  {
    "text": "Module where we have a bunch of different types of instructions um and most of the",
    "start": "4468760",
    "end": "4474480"
  },
  {
    "text": "combinators in each one of these modules all they're doing is uh switching",
    "start": "4474480",
    "end": "4480520"
  },
  {
    "text": "through the different um switching through the different uh instructions and trying to execute some logic so for",
    "start": "4480520",
    "end": "4487800"
  },
  {
    "text": "example wizard mode if we take a look is really just just creating a",
    "start": "4487800",
    "end": "4494600"
  },
  {
    "text": "loop that goes through um each of these different internal instructions and gets",
    "start": "4494600",
    "end": "4501800"
  },
  {
    "text": "out of these instructions the information that it needs to render the wizard and then obtain information from",
    "start": "4501800",
    "end": "4507360"
  },
  {
    "text": "the user um there it and I would say 90%",
    "start": "4507360",
    "end": "4513040"
  },
  {
    "text": "of the combinators implemented inside args options and command are all just uh",
    "start": "4513040",
    "end": "4520840"
  },
  {
    "text": "basically switching through instructions which is why I think like this this",
    "start": "4520840",
    "end": "4526719"
  },
  {
    "text": "library is um somewhat accessible to uh affect beginner slash maybe a tiny bit",
    "start": "4526719",
    "end": "4534120"
  },
  {
    "text": "of intermediate level uh knowledge because when you look at it there's really not um the complexity level of",
    "start": "4534120",
    "end": "4542360"
  },
  {
    "text": "the logic of the combinators is low what actually like is going on inside handling each one of those instructions",
    "start": "4542360",
    "end": "4548880"
  },
  {
    "text": "might be somewhat complicated but I think like understanding the overall purpose purpose of the combinators",
    "start": "4548880",
    "end": "4555120"
  },
  {
    "text": "there's a low barrier to entry there and and also I would say the patterns that",
    "start": "4555120",
    "end": "4560360"
  },
  {
    "text": "you are using here are very common within the other effect projects uh we",
    "start": "4560360",
    "end": "4566719"
  },
  {
    "text": "use exactly the same type of patterns in in the core libraries and uh if I can",
    "start": "4566719",
    "end": "4573120"
  },
  {
    "text": "spend just a few words to describe why we go through this amount of pain and",
    "start": "4573120",
    "end": "4578360"
  },
  {
    "text": "through the the small price of typ and safety as you as you as you said before",
    "start": "4578360",
    "end": "4584800"
  },
  {
    "text": "it's because really uh we want to have two set of types one for the external",
    "start": "4584800",
    "end": "4592360"
  },
  {
    "text": "API what's consumable and one for the internal API and we don't want to um if",
    "start": "4592360",
    "end": "4600239"
  },
  {
    "text": "you imagine a stable release of CLI or if you imagine a stable release of effect we don't want to have all the",
    "start": "4600239",
    "end": "4607159"
  },
  {
    "text": "internals be part of the external facing interfaces otherwise those would",
    "start": "4607159",
    "end": "4613840"
  },
  {
    "text": "would be fixed in stone and never changed so what this allows us is",
    "start": "4613840",
    "end": "4618920"
  },
  {
    "text": "actually to have a lot of power to change things while keeping the API uh",
    "start": "4618920",
    "end": "4626400"
  },
  {
    "text": "very stable that that's something we learned over over time and U it's repeated over all the libraries and this",
    "start": "4626400",
    "end": "4634840"
  },
  {
    "text": "is indeed a good a good starting point because if if you check this then you you you'll find the same pieces in in",
    "start": "4634840",
    "end": "4642440"
  },
  {
    "text": "effect I if you if you go on the stream data types and all of those are all built around the same uh the same",
    "start": "4642440",
    "end": "4650199"
  },
  {
    "text": "ideas cool um I really appreciate the opportunity to come and talk about some",
    "start": "4650199",
    "end": "4656280"
  },
  {
    "text": "of the work I've done on this Library huge shout out to again to Tim Smart for",
    "start": "4656280",
    "end": "4661400"
  },
  {
    "text": "the help that he uh provided in getting localized handlers and access to parent",
    "start": "4661400",
    "end": "4666440"
  },
  {
    "text": "commands and fallback configuration um all over the Finish Line um so huge shout out to him definitely give him",
    "start": "4666440",
    "end": "4673080"
  },
  {
    "text": "mudos on Discord um and if you're not already a member of the Discord Community please join us we have a great",
    "start": "4673080",
    "end": "4678960"
  },
  {
    "text": "group of developers um who really enjoy helping one another and um really enjoy",
    "start": "4678960",
    "end": "4684679"
  },
  {
    "text": "like sharing their enthusiasm about effect especially Sebastian uh as you can see by his background um so yeah",
    "start": "4684679",
    "end": "4692600"
  },
  {
    "text": "definitely join us on Discord and thanks again for thank you so much Max this is a an incredible early Christmas",
    "start": "4692600",
    "end": "4699199"
  },
  {
    "text": "present I I can only double down on what Bastian said that's it's been extremely",
    "start": "4699199",
    "end": "4705679"
  },
  {
    "text": "fun to watch this and I can say that any any CLI I've ever built I wanted to have",
    "start": "4705679",
    "end": "4713400"
  },
  {
    "text": "those fishes I wanted to have that flexibility and I never I never found that in any language uh so that just",
    "start": "4713400",
    "end": "4722280"
  },
  {
    "text": "just the fact that now I can get out and build those clis it's I'm I'm thinking",
    "start": "4722280",
    "end": "4727520"
  },
  {
    "text": "about 100 clis to to be built I'm going to transition myself into a Sebastian",
    "start": "4727520",
    "end": "4733239"
  },
  {
    "text": "for a for a while well thank you guys I appreciate it thank",
    "start": "4733239",
    "end": "4739239"
  },
  {
    "text": "you",
    "start": "4741400",
    "end": "4744400"
  }
]