[
  {
    "text": "all right i guess we are live we are we are fantastic uh so welcome to",
    "start": "15599",
    "end": "24480"
  },
  {
    "text": "another episode of effect time um i think we're again one or two weeks",
    "start": "24480",
    "end": "29679"
  },
  {
    "text": "late but i think we have a valid excuse we haven't got a retweet come on",
    "start": "29679",
    "end": "35840"
  },
  {
    "text": "exactly so we um max mike and i and and some others uh",
    "start": "35840",
    "end": "41120"
  },
  {
    "text": "have been meeting in sunny worm spain roughly two weeks ago",
    "start": "41120",
    "end": "46160"
  },
  {
    "text": "or two weekends ago for the nice occasion of um a zeo",
    "start": "46160",
    "end": "51280"
  },
  {
    "text": "conference um zeo world and malaga um and so we",
    "start": "51280",
    "end": "56800"
  },
  {
    "text": "yeah we we get to to meet a whole bunch of awesome folks from uh from the zio's gala community",
    "start": "56800",
    "end": "63680"
  },
  {
    "text": "and use this as a as a nice opportunity to also meet in person uh which was great we had a blast had a",
    "start": "63680",
    "end": "70720"
  },
  {
    "text": "lot of good foods lots of great conversations about effect and about sort of like the",
    "start": "70720",
    "end": "76159"
  },
  {
    "text": "future of effect which we also want to progressively share here with you um today it's going to be fairly normal",
    "start": "76159",
    "end": "83680"
  },
  {
    "text": "like we're going to take a look at a specific kind of use case that we that we consider interesting",
    "start": "83680",
    "end": "89600"
  },
  {
    "text": "um and that actually has some practical implications but uh yeah rest assured",
    "start": "89600",
    "end": "95200"
  },
  {
    "text": "that we have some some really cool things in the pipeline we've already shared a nice road map",
    "start": "95200",
    "end": "101360"
  },
  {
    "text": "with you i think in the discord channel and we are also actively working on the documentation that we're gonna uh could",
    "start": "101360",
    "end": "109040"
  },
  {
    "text": "use some some help on in in the future but today the uh topic will be about",
    "start": "109040",
    "end": "115680"
  },
  {
    "text": "file watching so uh file watching maybe uh if you're in javascript",
    "start": "115680",
    "end": "123200"
  },
  {
    "text": "uh and um you you need to solve a problem",
    "start": "123200",
    "end": "129039"
  },
  {
    "text": "how do i joke there you go um if you need to ever do",
    "start": "129039",
    "end": "134480"
  },
  {
    "text": "like file watching in javascript you've probably stumbled uh over this library",
    "start": "134480",
    "end": "139920"
  },
  {
    "text": "here jokidar um and that's what you could use for example to say hey watch specific",
    "start": "139920",
    "end": "147520"
  },
  {
    "text": "directory and then for given file events do something",
    "start": "147520",
    "end": "152560"
  },
  {
    "text": "so um i had to use plenty of times uh use this",
    "start": "152560",
    "end": "157920"
  },
  {
    "text": "um and jokidar is uh i guess it's all right um i've i had a few um issues with it",
    "start": "157920",
    "end": "166160"
  },
  {
    "text": "however over the time and um uh investigated also alternatives so",
    "start": "166160",
    "end": "172800"
  },
  {
    "text": "um and i think the the folks working on bs code um which i",
    "start": "172800",
    "end": "178480"
  },
  {
    "text": "typically use as an editor uh i think they were using chokidar in the past and they've moved over to something to an",
    "start": "178480",
    "end": "186000"
  },
  {
    "text": "alternative and one set i'm not sure whether this is exactly the alternative but one",
    "start": "186000",
    "end": "192640"
  },
  {
    "text": "alternative that's increasingly popular is the parcel",
    "start": "192640",
    "end": "199680"
  },
  {
    "text": "parcel file watcher um there you go so",
    "start": "199680",
    "end": "206000"
  },
  {
    "text": "this is uh yeah done by the great folks working on on parcel",
    "start": "206000",
    "end": "211840"
  },
  {
    "text": "uh is is made available standalone so this is an alternative to jokidar",
    "start": "211840",
    "end": "218319"
  },
  {
    "text": "um that is very interesting i have actually a few use cases for um for my own project where i want to use this but",
    "start": "218319",
    "end": "225440"
  },
  {
    "text": "obviously i'm building these projects with effect and so i was wondering hey is there a",
    "start": "225440",
    "end": "232159"
  },
  {
    "text": "way how i can use chocolate or parcel watcher with effect and that's what we today",
    "start": "232159",
    "end": "239200"
  },
  {
    "text": "want to look into um in the past i've actually already taken a step at this",
    "start": "239200",
    "end": "245599"
  },
  {
    "text": "um when working on content layer so um in content there there is already",
    "start": "245599",
    "end": "252400"
  },
  {
    "text": "some file watching functionality for the",
    "start": "252400",
    "end": "257680"
  },
  {
    "text": "for the local file source so i think here in source files",
    "start": "257680",
    "end": "263120"
  },
  {
    "text": "um maybe we have it [Music] uh here the fest watcher oh it's in the",
    "start": "263120",
    "end": "269680"
  },
  {
    "text": "utils package i think it might be in the in the there's part of it in the cli as well",
    "start": "269680",
    "end": "274880"
  },
  {
    "text": "right yeah exactly um so yeah this is uh we've already and",
    "start": "274880",
    "end": "280400"
  },
  {
    "text": "i think this was with the help of patrick from the effect community if i",
    "start": "280400",
    "end": "285520"
  },
  {
    "text": "remember correctly uh thanks patrick for your initial help here this is where we had a joke dar wrapper",
    "start": "285520",
    "end": "293440"
  },
  {
    "text": "for effect um for like a file watcher and the abstraction that we leveraged here",
    "start": "293440",
    "end": "300400"
  },
  {
    "text": "uh was the abstraction of a of a stream um",
    "start": "300400",
    "end": "306000"
  },
  {
    "text": "if i remember correctly or maybe maybe i'm mistaken we had a",
    "start": "306000",
    "end": "312000"
  },
  {
    "text": "hold on let me actually take a look how we",
    "start": "312000",
    "end": "317440"
  },
  {
    "text": "how we ended up using this what do we",
    "start": "317440",
    "end": "324240"
  },
  {
    "text": "think we had this make and subscribe use somewhere um which we then",
    "start": "324240",
    "end": "330720"
  },
  {
    "text": "actually combined here with like a eos build uh alternative as well yeah and i think",
    "start": "330720",
    "end": "336160"
  },
  {
    "text": "here we're returning it into into a stream so we're basically going to take a look today at something similar",
    "start": "336160",
    "end": "342880"
  },
  {
    "text": "but uh much more refined and based on parcel watcher and uh turns out that",
    "start": "342880",
    "end": "350080"
  },
  {
    "text": "max has actually already taken a step at this in the past and this is why it felt like a good topic to",
    "start": "350080",
    "end": "357039"
  },
  {
    "text": "share with you all and dive more deeper into and depending on how far we get we'll actually have a",
    "start": "357039",
    "end": "365199"
  },
  {
    "text": "real code base in a real package that's a nice building block for others to use so i think we're starting off",
    "start": "365199",
    "end": "372720"
  },
  {
    "text": "from a fresh project today that's like a fresh mono repo project here",
    "start": "372720",
    "end": "378080"
  },
  {
    "text": "um contains already way too many config files but at least they already exist",
    "start": "378080",
    "end": "383520"
  },
  {
    "text": "um and this will get simpler over time it allow",
    "start": "383520",
    "end": "389039"
  },
  {
    "text": "um and so here we have uh yeah that's just like a",
    "start": "389039",
    "end": "394240"
  },
  {
    "text": "bootstrapping uh a bootstrap project where we can that we can now use as a",
    "start": "394240",
    "end": "399840"
  },
  {
    "text": "foundation to build the the file watcher and i think once we've built the",
    "start": "399840",
    "end": "404880"
  },
  {
    "text": "functionality and the test um maybe we have enough time to build a little example up with it as well",
    "start": "404880",
    "end": "411919"
  },
  {
    "text": "um maybe using the effects cli package but yeah that that's sort of the the scope for today really excited to dig",
    "start": "411919",
    "end": "419360"
  },
  {
    "text": "into this i think it's going to be useful for many others certainly going to be useful for me in the future",
    "start": "419360",
    "end": "425440"
  },
  {
    "text": "um and yeah without further ado i would hand it over to to max",
    "start": "425440",
    "end": "431120"
  },
  {
    "text": "um that max can sort of like take the the driver's seat um and and walk us through um building",
    "start": "431120",
    "end": "438639"
  },
  {
    "text": "this little module from scratch and and seeing what what it takes to build this an effect",
    "start": "438639",
    "end": "445039"
  },
  {
    "text": "so um yeah and for for those who have joined the call live welcome and if you",
    "start": "445039",
    "end": "451520"
  },
  {
    "text": "have any questions in the meanwhile feel free to to ask them using the chat and",
    "start": "451520",
    "end": "456639"
  },
  {
    "text": "we'll weave them in all right um then relax i'll stop sharing my",
    "start": "456639",
    "end": "461680"
  },
  {
    "text": "screen and you can take over sounds good yeah if anybody has any questions you can either post them in the chat here or",
    "start": "461680",
    "end": "468000"
  },
  {
    "text": "post them in discord we'll try to answer them as we can",
    "start": "468000",
    "end": "473039"
  },
  {
    "text": "let me make sure i share the correct screen this one",
    "start": "473680",
    "end": "480080"
  },
  {
    "text": "can you guys see my screen yes we can you might want to bump up this the font",
    "start": "480080",
    "end": "485199"
  },
  {
    "text": "size once oh yes uh just once i think that's all right yep twice maybe",
    "start": "485199",
    "end": "492800"
  },
  {
    "text": "all right is that good yeah i think that's all right yeah cool um yeah so",
    "start": "492800",
    "end": "498400"
  },
  {
    "text": "i had taken an initial stab at this uh using parcel watcher a while ago",
    "start": "498400",
    "end": "503759"
  },
  {
    "text": "um and i think maybe it would be a good idea to start from kind of the process",
    "start": "503759",
    "end": "509199"
  },
  {
    "text": "that i took to go through this and then we can sort of iterate from there um",
    "start": "509199",
    "end": "515039"
  },
  {
    "text": "so i guess the first step would be to install parcel watcher into the project and then sort of describe like how one",
    "start": "515039",
    "end": "521120"
  },
  {
    "text": "might approach not necessarily like this specific api but how one might approach incorporating",
    "start": "521120",
    "end": "527839"
  },
  {
    "text": "a callback type api into like wrapping it with effect",
    "start": "527839",
    "end": "533040"
  },
  {
    "text": "and then we can talk about kind of some of the limitations with the default way of wrapping things in",
    "start": "533040",
    "end": "540399"
  },
  {
    "text": "effect with this particular package and how we can kind of get around them by using some of the",
    "start": "540399",
    "end": "545920"
  },
  {
    "text": "other data types that effect provides so i guess i'll start by installing parcel",
    "start": "545920",
    "end": "551519"
  },
  {
    "text": "watcher into the project can we before installing take a quick look at like the starting the the api um as is with power",
    "start": "551519",
    "end": "558480"
  },
  {
    "text": "supply just so that we can build a bit of an intuition",
    "start": "558480",
    "end": "563680"
  },
  {
    "text": "in two steps or multiple steps number one build an intuition for how parcel watcher",
    "start": "563680",
    "end": "570399"
  },
  {
    "text": "um looks and feels right now um what the how the api works",
    "start": "570399",
    "end": "575920"
  },
  {
    "text": "and maybe then we can uh sketch out like a at least a mental model for like",
    "start": "575920",
    "end": "581680"
  },
  {
    "text": "how we want that to be what that should map to in effect like should that be a stream or what should",
    "start": "581680",
    "end": "588240"
  },
  {
    "text": "that map to and then sort of going into implementation mode just to make sure that we are like",
    "start": "588240",
    "end": "595279"
  },
  {
    "text": "have so um yeah roughly like a direction uh sorted out before",
    "start": "595279",
    "end": "600720"
  },
  {
    "text": "sure i think the easiest place to start would be just subscribing to a directory",
    "start": "600720",
    "end": "606079"
  },
  {
    "text": "and kind of trying to understand what what that does and what you're going to get from that so",
    "start": "606079",
    "end": "611440"
  },
  {
    "text": "johannes kind of touched on this a little bit earlier but parcel watcher is basically a",
    "start": "611440",
    "end": "617120"
  },
  {
    "text": "package that you can use to subscribe to and query file system events um the nice thing about it is it's it or",
    "start": "617120",
    "end": "624880"
  },
  {
    "text": "arguably not nice thing about it is that it's a c plus native module um so you know there are some",
    "start": "624880",
    "end": "631200"
  },
  {
    "text": "there's pros and cons of of having those bindings um but we probably won't touch too much on this unless we get into",
    "start": "631200",
    "end": "638320"
  },
  {
    "text": "you know cli at some point maybe in a later effect time but it's got a bunch of cool features",
    "start": "638320",
    "end": "645519"
  },
  {
    "text": "i think the one that we will probably stick to for effect time today is just",
    "start": "645519",
    "end": "650959"
  },
  {
    "text": "watching a specific directory for changes to the files within that directory",
    "start": "650959",
    "end": "657760"
  },
  {
    "text": "and yeah i mean if we have time we can sort of talk about some of the other features",
    "start": "657760",
    "end": "662800"
  },
  {
    "text": "that partial parcel watcher provides but i think we'll stick to just subscribing to and watching a directory",
    "start": "662800",
    "end": "668079"
  },
  {
    "text": "um the before i go into this example one other thing i'll highlight",
    "start": "668079",
    "end": "673519"
  },
  {
    "text": "is that um it does have a bunch of different file system watching back-ends which is",
    "start": "673519",
    "end": "679680"
  },
  {
    "text": "kind of interesting so it is cross-platform it works on linux windows and mac os um and depending on the",
    "start": "679680",
    "end": "685440"
  },
  {
    "text": "platform it's running on it swaps the back end that it's using to watch the file system whether it's using inotify on linux or",
    "start": "685440",
    "end": "692480"
  },
  {
    "text": "fs events or read directory changes on windows so that's kind of another nice feature of parcel watchers you get",
    "start": "692480",
    "end": "699440"
  },
  {
    "text": "automatically swapped back ends based on the architecture or the platform that you're running on that's awesome seems like some of the",
    "start": "699440",
    "end": "706079"
  },
  {
    "text": "limitations i've been running into with jokidar was um like yeah some some things haven't been",
    "start": "706079",
    "end": "713040"
  },
  {
    "text": "as smooth on these lower levels and we're sometimes like i got an event triggered before the file",
    "start": "713040",
    "end": "719839"
  },
  {
    "text": "was actually written and then uh like the suggestion was basically okay you just have to",
    "start": "719839",
    "end": "726079"
  },
  {
    "text": "um wait a little bit before you react on that event but that by definition made my made my app slower so um this is",
    "start": "726079",
    "end": "734240"
  },
  {
    "text": "where i i'm hoping that parcel watcher uh can can make this a bit more smooth",
    "start": "734240",
    "end": "739440"
  },
  {
    "text": "and more reliable and um since speed is of the essence for these sort of tools",
    "start": "739440",
    "end": "744800"
  },
  {
    "text": "i'm i welcome that um some some folks went above and beyond that try to make",
    "start": "744800",
    "end": "749839"
  },
  {
    "text": "it as fast as possible right and you know just for those who are maybe not as familiar with what a file",
    "start": "749839",
    "end": "756560"
  },
  {
    "text": "watcher actually does essentially the watch functionality in this case would",
    "start": "756560",
    "end": "762160"
  },
  {
    "text": "subscribe to a directory on your file system and basically spit out any changes to that file system whatever",
    "start": "762160",
    "end": "768160"
  },
  {
    "text": "file system it's watching so if you pick a directory on your file system and you decide to watch it",
    "start": "768160",
    "end": "773440"
  },
  {
    "text": "you'll get notified of all of the different events that come through depending on the you know parameters",
    "start": "773440",
    "end": "778800"
  },
  {
    "text": "that you set up with parcel watcher but basically you'd get notified if files are created modified deleted that sort",
    "start": "778800",
    "end": "784399"
  },
  {
    "text": "of thing and like johannes mentioned that can be useful in a lot of different circumstances especially when you're",
    "start": "784399",
    "end": "789839"
  },
  {
    "text": "working with um projects where maybe you want to incorporate some sort of dev mode where",
    "start": "789839",
    "end": "796880"
  },
  {
    "text": "you want to you know be able to react to a user changing files on their file system or something like that",
    "start": "796880",
    "end": "804720"
  },
  {
    "text": "um so okay so let's take a look at the example of watching and subscribing to a",
    "start": "804720",
    "end": "810000"
  },
  {
    "text": "directory on the file system um so one thing you'll notice pretty quickly",
    "start": "810000",
    "end": "816639"
  },
  {
    "text": "is this is this big enough i can make it a little bigger um when looking at this example",
    "start": "816639",
    "end": "823839"
  },
  {
    "text": "um is that we get kind of the native or you know old-school node callback api",
    "start": "823839",
    "end": "830639"
  },
  {
    "text": "um which in it it's it's generally speaking faster than",
    "start": "830639",
    "end": "836399"
  },
  {
    "text": "promises but inside it can be hard to deal with um in certain scenarios um",
    "start": "836399",
    "end": "843120"
  },
  {
    "text": "and so you know this is one thing to kind of be aware of is that when you're subscribing to a directory all the event the events",
    "start": "843120",
    "end": "849120"
  },
  {
    "text": "that you're getting would be passed it's like kind of a callback and to be fair like promises wouldn't",
    "start": "849120",
    "end": "854480"
  },
  {
    "text": "even be an option here since it's like doesn't just fire once but correct we want to wait for something multiple",
    "start": "854480",
    "end": "860639"
  },
  {
    "text": "times so i think like observables might be the the other the other",
    "start": "860639",
    "end": "866000"
  },
  {
    "text": "or async iterators um but yeah this is certainly a more",
    "start": "866000",
    "end": "871440"
  },
  {
    "text": "uh a simpler api that i think most people have an easier time at least",
    "start": "871440",
    "end": "877360"
  },
  {
    "text": "getting started with yeah i mean i think the api that they've provided here is very nice um you basically like johanna",
    "start": "877360",
    "end": "884720"
  },
  {
    "text": "said you're you get kind of returned a subscription um so you're going to get notified of all the events that that",
    "start": "884720",
    "end": "890480"
  },
  {
    "text": "that happen to that file system um and then you know because you get returned the subscription later on when",
    "start": "890480",
    "end": "896560"
  },
  {
    "text": "you want to unsubscribe from the directory that you're watching you call unsubscribe which is also a promise and",
    "start": "896560",
    "end": "901760"
  },
  {
    "text": "you end up unsubscribing from that directory um there are about like i said there's a bunch of other features of parcel",
    "start": "901760",
    "end": "907360"
  },
  {
    "text": "watcher that we probably won't touch on today because we're focusing on building",
    "start": "907360",
    "end": "912480"
  },
  {
    "text": "kind of just a file watcher but maybe if we have time at the end we can look into some of the other features and",
    "start": "912480",
    "end": "917680"
  },
  {
    "text": "how we might think about incorporating them here for example you've just highlighted one thing that would be a hard",
    "start": "917680",
    "end": "923680"
  },
  {
    "text": "limitation in running with observables the fact that the unsubscribe itself is",
    "start": "923680",
    "end": "929440"
  },
  {
    "text": "an asynchronous operation because in observables while the emitter",
    "start": "929440",
    "end": "934560"
  },
  {
    "text": "can do asynchronous stuff the cancel callback is always synchronous one",
    "start": "934560",
    "end": "942160"
  },
  {
    "text": "that's a great point all right um so i guess now that we have better understanding for how this works",
    "start": "942399",
    "end": "950160"
  },
  {
    "text": "maybe we can maybe we can build up a little bit of an intuition for how we might do this with like an effect api",
    "start": "950160",
    "end": "956240"
  },
  {
    "text": "exactly exactly so i think what mike was pointing at if i add up one",
    "start": "956240",
    "end": "962399"
  },
  {
    "text": "two plus two here uh then i think the unsubscribe that's whenever we need to",
    "start": "962399",
    "end": "968720"
  },
  {
    "text": "clean something up to me that sounds like a good use case for like the concept of a managed",
    "start": "968720",
    "end": "975120"
  },
  {
    "text": "um and given that we want something that",
    "start": "975120",
    "end": "980839"
  },
  {
    "text": "can return multiple uh multiple return values not just one that to me sounds",
    "start": "980839",
    "end": "987920"
  },
  {
    "text": "like a stream so um did i did i already hit on the",
    "start": "987920",
    "end": "993680"
  },
  {
    "text": "the major points here yeah you indeed did such a surprise",
    "start": "993680",
    "end": "999440"
  },
  {
    "text": "so you definitely yeah so i know i would point it i would point out that manage is getting removed so in right in the",
    "start": "999440",
    "end": "1007440"
  },
  {
    "text": "future uh lingo it would be a scoped effect",
    "start": "1007440",
    "end": "1013519"
  },
  {
    "text": "as an effect that acquired and released resources and let's feel that the way how we can build it today and then uh",
    "start": "1013519",
    "end": "1021199"
  },
  {
    "text": "see how we would change it uh to to match well into the future hopefully just the type sicknesses",
    "start": "1021199",
    "end": "1027839"
  },
  {
    "text": "change all right yep um so yeah johannes i agree with you this definitely lends itself to a",
    "start": "1027839",
    "end": "1033678"
  },
  {
    "text": "streaming uh situation because you could potentially have an infinite stream of file if you",
    "start": "1033679",
    "end": "1039678"
  },
  {
    "text": "never unsubscribe from the directory that you're watching you can deal you're basically dealing with an infinite stream of file system events",
    "start": "1039679",
    "end": "1046400"
  },
  {
    "text": "um and i forget off the top of my head but i'm fairly certain that events here is",
    "start": "1046400",
    "end": "1053120"
  },
  {
    "text": "actually an iterable of events or an array of events uh or in the effect lingo you can think",
    "start": "1053120",
    "end": "1059120"
  },
  {
    "text": "of it as kind of like a chunk of events there's a we have a group of events that we're receiving at a time",
    "start": "1059120",
    "end": "1064160"
  },
  {
    "text": "um so we kind of there's kind of like a concept of buffering as well with the parcel watcher where you get",
    "start": "1064160",
    "end": "1070000"
  },
  {
    "text": "uh an arbitrary number of events that you can process at a time with each",
    "start": "1070000",
    "end": "1075120"
  },
  {
    "text": "emission of the subscription um so again also really lends itself to",
    "start": "1075120",
    "end": "1080240"
  },
  {
    "text": "the streaming api that that effect provides because you can you get you basically get all of that out of the box",
    "start": "1080240",
    "end": "1086960"
  },
  {
    "text": "including the concept of opening and closing a resource because you can also do that you can basically um unwrap a",
    "start": "1086960",
    "end": "1093919"
  },
  {
    "text": "managed into a stream when you're when you're working with this so",
    "start": "1093919",
    "end": "1099520"
  },
  {
    "text": "so yeah um if if anybody has any questions about what the things that we were saying please",
    "start": "1099520",
    "end": "1105440"
  },
  {
    "text": "let us know um otherwise maybe we can flip over to start sketching out how we might",
    "start": "1105440",
    "end": "1112320"
  },
  {
    "text": "in a naive implementation take this basic api and convert it into",
    "start": "1112320",
    "end": "1118720"
  },
  {
    "text": "an effect uh wrap it wrap it with effect and then talk about why that might not work the",
    "start": "1118720",
    "end": "1124320"
  },
  {
    "text": "way we think it's going to does that sound good okay cool so the first thing let me",
    "start": "1124320",
    "end": "1130799"
  },
  {
    "text": "install this into the project and i guess in this case it would be an",
    "start": "1130799",
    "end": "1135919"
  },
  {
    "text": "actual dependency not a pure dependency right uh well it would",
    "start": "1135919",
    "end": "1141520"
  },
  {
    "text": "still better to use pure dependencies sure well",
    "start": "1141520",
    "end": "1146720"
  },
  {
    "text": "i guess like optional peer dependency it seems like a good uh yeah good setup here not sure whether",
    "start": "1146720",
    "end": "1153120"
  },
  {
    "text": "you can can i do that for the command line or dude uh i think the optional part we need to do separately",
    "start": "1153120",
    "end": "1160160"
  },
  {
    "text": "yeah anyway you have a dev dependency on the on the root of the repository under and appear on the",
    "start": "1160160",
    "end": "1168000"
  },
  {
    "text": "yarn",
    "start": "1170400",
    "end": "1173400"
  },
  {
    "text": "and then if i want to make this an optional pure dependency in here i think you have another field called",
    "start": "1181520",
    "end": "1188720"
  },
  {
    "text": "pure dependency method yeah pure dependencies meta okay",
    "start": "1188720",
    "end": "1196160"
  },
  {
    "text": "and inside that i believe it's right water complete",
    "start": "1196160",
    "end": "1203840"
  },
  {
    "text": "it's a json i'm not getting anything you're not getting anything",
    "start": "1203840",
    "end": "1211039"
  },
  {
    "text": "optional something i'll let you know okay um while you're looking into that",
    "start": "1211039",
    "end": "1217600"
  },
  {
    "text": "i'm just gonna copy this over into our project",
    "start": "1217600",
    "end": "1224000"
  },
  {
    "text": "and comment it out",
    "start": "1224000",
    "end": "1226880"
  },
  {
    "text": "okay so mike just interrupt me when you find out what it what i need to put in the",
    "start": "1232559",
    "end": "1238559"
  },
  {
    "text": "package json um here you have an example um i'll share",
    "start": "1238559",
    "end": "1244480"
  },
  {
    "text": "it with you in the discord i was about to do this name exactly same fight",
    "start": "1244480",
    "end": "1252559"
  },
  {
    "text": "let's take a look down no there okay",
    "start": "1252799",
    "end": "1258559"
  },
  {
    "text": "let's do that really quick so we don't have to worry about it",
    "start": "1258559",
    "end": "1263640"
  },
  {
    "text": "cool all right i'm gonna get rid of our",
    "start": "1269760",
    "end": "1275120"
  },
  {
    "text": "silly test method here and i'll do the same over here",
    "start": "1275120",
    "end": "1281120"
  },
  {
    "text": "and leave it like this for now so nothing yells at me",
    "start": "1281679",
    "end": "1290559"
  },
  {
    "text": "um and just so you go uh for those watching we're running uh the typescript build server in watch mode and we're",
    "start": "1290559",
    "end": "1295840"
  },
  {
    "text": "also running the tests for our tests so we have those running on the terminal here um",
    "start": "1295840",
    "end": "1301039"
  },
  {
    "text": "just in case you're wondering what's on the screen um okay",
    "start": "1301039",
    "end": "1307520"
  },
  {
    "text": "so i'm gonna get rid of the tests for a second and think about this kind of conceptually so usually when",
    "start": "1307520",
    "end": "1314400"
  },
  {
    "text": "in in the um in the node.js world when we have and",
    "start": "1314400",
    "end": "1319600"
  },
  {
    "text": "even in the scala world um when when you're trying to incorporate",
    "start": "1319600",
    "end": "1324960"
  },
  {
    "text": "an asynchronous callback api into an effect program",
    "start": "1324960",
    "end": "1330880"
  },
  {
    "text": "um effect gives us a bunch of different combinators or methods that that allow",
    "start": "1330880",
    "end": "1337280"
  },
  {
    "text": "us to kind of do that type of thing and the streaming api also gives us similar",
    "start": "1337280",
    "end": "1344000"
  },
  {
    "text": "combinators which handle incorporation of asynchronous events um so",
    "start": "1344000",
    "end": "1349919"
  },
  {
    "text": "in kind of like a nine and in a naive implementation we might think that we can just wrap this callback",
    "start": "1349919",
    "end": "1356559"
  },
  {
    "text": "with a with the asynchronous api from effect",
    "start": "1356559",
    "end": "1362400"
  },
  {
    "text": "um so let's go ahead and do that and then we can talk about maybe like why that's not going to work the way we",
    "start": "1362400",
    "end": "1367520"
  },
  {
    "text": "think it is yeah i think that would be great to kind of like approach the problem step by step see",
    "start": "1367520",
    "end": "1374640"
  },
  {
    "text": "what the limitation might be and then what the solution might be",
    "start": "1374640",
    "end": "1379760"
  },
  {
    "text": "in the the data types that we have available and we're going to use the experimental",
    "start": "1379760",
    "end": "1385600"
  },
  {
    "text": "streaming api which is actually the non-experimental streaming api now",
    "start": "1385600",
    "end": "1391679"
  },
  {
    "text": "this has become the default in zeo and it will be the default api in our upcoming",
    "start": "1391679",
    "end": "1397919"
  },
  {
    "text": "version of effect so we're just gonna stick to the experimental api",
    "start": "1397919",
    "end": "1404000"
  },
  {
    "text": "um okay and then let's get parcel watcher in here",
    "start": "1404000",
    "end": "1409760"
  },
  {
    "text": "and obviously we'll have to fix this but",
    "start": "1412240",
    "end": "1416679"
  },
  {
    "text": "okay so if we uh basically take this exact example",
    "start": "1423279",
    "end": "1431279"
  },
  {
    "text": "and for for a moment let's pretend this doesn't return a promise okay if we had a normal uh asynchronous",
    "start": "1431279",
    "end": "1438080"
  },
  {
    "text": "callback function that we were dealing with here and we wanted to wrap this with an effect or stream",
    "start": "1438080",
    "end": "1445279"
  },
  {
    "text": "we would probably reach for the async combinators on either effect or stream respectively",
    "start": "1445279",
    "end": "1452559"
  },
  {
    "text": "so for example if we wanted to wrap this it doesn't make sense for this use case",
    "start": "1452559",
    "end": "1458720"
  },
  {
    "text": "but let's just say we wanted to use effect to wrap this particular api we",
    "start": "1458720",
    "end": "1463760"
  },
  {
    "text": "can use any of the um the oh i forget that the names are different",
    "start": "1463760",
    "end": "1470400"
  },
  {
    "text": "yeah right these names are also changing in the upcoming version of effects to become much clearer but um effect gives",
    "start": "1470400",
    "end": "1476799"
  },
  {
    "text": "us a couple of different uh combinators to deal with asynchronous",
    "start": "1476799",
    "end": "1482000"
  },
  {
    "text": "callbacks right so the base most basic one is effect async which provides you which provides you a",
    "start": "1482000",
    "end": "1489039"
  },
  {
    "text": "function which receives a callback as an argument and if we examine the type of this callback this",
    "start": "1489039",
    "end": "1494960"
  },
  {
    "text": "callback is basically a function that expects to receive some effect as its input right so",
    "start": "1494960",
    "end": "1501600"
  },
  {
    "text": "you know if we think about something really simple like uh if we",
    "start": "1501600",
    "end": "1507039"
  },
  {
    "text": "are just loading a file",
    "start": "1507039",
    "end": "1510320"
  },
  {
    "text": "let me do read well",
    "start": "1513200",
    "end": "1519278"
  },
  {
    "text": "give it some file we either get the file or we get the",
    "start": "1519600",
    "end": "1526320"
  },
  {
    "text": "i'll buffer call this buffer um",
    "start": "1527440",
    "end": "1533120"
  },
  {
    "text": "the way that one could wrap a function like this which is returning the entire",
    "start": "1533120",
    "end": "1538480"
  },
  {
    "text": "everything that you expect all at once you could wrap this with effect relatively easily by doing something",
    "start": "1538480",
    "end": "1543840"
  },
  {
    "text": "along the lines of",
    "start": "1543840",
    "end": "1546880"
  },
  {
    "text": "checking first if we have an error and if we do",
    "start": "1552480",
    "end": "1557760"
  },
  {
    "text": "we can call this callback with some maybe like a tdot fail i don't know this is a dumb example so",
    "start": "1557760",
    "end": "1564799"
  },
  {
    "text": "we're just gonna say failed otherwise we'd call the callback with",
    "start": "1564799",
    "end": "1573120"
  },
  {
    "text": "the actual buffer um and one thing you might notice is that we don't get",
    "start": "1573120",
    "end": "1580080"
  },
  {
    "text": "wonderful type inference here and that's kind of a limitation of typescript because of the way that we're calling this function so when you're",
    "start": "1580080",
    "end": "1586159"
  },
  {
    "text": "using the async api in effect you should provide uh the actual types that you're",
    "start": "1586159",
    "end": "1592559"
  },
  {
    "text": "expecting so in this case we wow i just keep doing that we don't expect any environment",
    "start": "1592559",
    "end": "1599600"
  },
  {
    "text": "we are going to fail potentially with a string and we're going to succeed with a buffer right and the nice thing is once we",
    "start": "1599600",
    "end": "1606159"
  },
  {
    "text": "provide these then the callback actually expects those things so if i fail with a number here for example we get a type",
    "start": "1606159",
    "end": "1612880"
  },
  {
    "text": "error saying like you know we we're expecting to fail with the string um so we need to make sure we succeed",
    "start": "1612880",
    "end": "1618799"
  },
  {
    "text": "and fail with the data types that we're expecting um",
    "start": "1618799",
    "end": "1623840"
  },
  {
    "text": "any questions about this so far um i i think that's very similar to what",
    "start": "1624000",
    "end": "1629440"
  },
  {
    "text": "mike and i have done in the past where we've been wrapping dfs uh package",
    "start": "1629440",
    "end": "1634480"
  },
  {
    "text": "so uh yeah that's a that's a good reminder but i guess like one of the big",
    "start": "1634480",
    "end": "1639520"
  },
  {
    "text": "differences here is like read file just returns once or the callback gets called",
    "start": "1639520",
    "end": "1645039"
  },
  {
    "text": "once where it's like we were interested in something that calls back multiple times",
    "start": "1645039",
    "end": "1652000"
  },
  {
    "text": "right and lucky for us stream gives us exactly that right so",
    "start": "1652000",
    "end": "1660720"
  },
  {
    "text": "stream also has async combinators and we actually have",
    "start": "1660799",
    "end": "1666159"
  },
  {
    "text": "the modern naming in uh the experimental stream so these names shouldn't really",
    "start": "1666159",
    "end": "1671279"
  },
  {
    "text": "change too much in the upcoming version of effect um but",
    "start": "1671279",
    "end": "1676399"
  },
  {
    "text": "we have a couple of different ways that we can handle asynchronous operations with with stream with the streaming api",
    "start": "1676399",
    "end": "1682559"
  },
  {
    "text": "uh but to johannes's point with the streaming api the callback can",
    "start": "1682559",
    "end": "1687600"
  },
  {
    "text": "be is it can be called multiple times instead of just once the difference here",
    "start": "1687600",
    "end": "1692960"
  },
  {
    "text": "is that the callback that we receive here we'll call it emit and we'll see why in",
    "start": "1692960",
    "end": "1699200"
  },
  {
    "text": "a second um this callback can be we can have multiple emissions of that value we're",
    "start": "1699200",
    "end": "1706320"
  },
  {
    "text": "not expecting to return and move on we're expecting this to kind of emit a",
    "start": "1706320",
    "end": "1711440"
  },
  {
    "text": "potentially infinite uh call this callback a potentially infinite number of times essentially",
    "start": "1711440",
    "end": "1717919"
  },
  {
    "text": "um so when i first started considering this problem and i thought",
    "start": "1717919",
    "end": "1723840"
  },
  {
    "text": "to myself okay well we have a callback based api it's it's something that could potentially emit um",
    "start": "1723840",
    "end": "1730559"
  },
  {
    "text": "an infinite number of events uh i immediately reached for the streaming the async combinators and streams",
    "start": "1730559",
    "end": "1737520"
  },
  {
    "text": "and so we'll just do that",
    "start": "1737520",
    "end": "1743520"
  },
  {
    "text": "and we'll do something very similar for now we'll just",
    "start": "1747360",
    "end": "1752960"
  },
  {
    "text": "do an admit and with the um with the streaming api uh we got kind of",
    "start": "1752960",
    "end": "1758799"
  },
  {
    "text": "a bunch of um helper methods uh this is this data type emit",
    "start": "1758799",
    "end": "1765279"
  },
  {
    "text": "gives us a bunch of helpers which can help us handle um various situations uh within the stream",
    "start": "1765279",
    "end": "1772480"
  },
  {
    "text": "so for example um if we want to succeed with a value we can or if we want to",
    "start": "1772480",
    "end": "1779200"
  },
  {
    "text": "emit a single value where is it single",
    "start": "1779200",
    "end": "1785360"
  },
  {
    "text": "we can emit a single value of some type we can also emit a chunk",
    "start": "1785360",
    "end": "1790480"
  },
  {
    "text": "of values because essentially the a stream in effect is optimized for",
    "start": "1790480",
    "end": "1796559"
  },
  {
    "text": "handling uh i see a group groups of values at a time",
    "start": "1796559",
    "end": "1801919"
  },
  {
    "text": "so that's why we also expose these chunk helpers because you can sometimes improve performance by working with um",
    "start": "1801919",
    "end": "1808720"
  },
  {
    "text": "groups of values at a time can i can i this when can i when do i have to decide how many i process on the",
    "start": "1808720",
    "end": "1815520"
  },
  {
    "text": "in uh ingestion side or on the consuming side",
    "start": "1815520",
    "end": "1821360"
  },
  {
    "text": "so from the consumer side you can you can sort of not think about chunks if you want to",
    "start": "1821360",
    "end": "1828000"
  },
  {
    "text": "like if you don't want to think about chunks currently on the output side you don't really have to think about chunks from that perspective",
    "start": "1828000",
    "end": "1834559"
  },
  {
    "text": "you can feed chunks into a stream and get the elements out or you can get the chunk like groups of",
    "start": "1834559",
    "end": "1840880"
  },
  {
    "text": "chunks out like you can buffer a stream at a time there's lots of different combinators for handling both the input",
    "start": "1840880",
    "end": "1846320"
  },
  {
    "text": "and output to a stream but just kind of know that on the back end of the way that stream is implemented",
    "start": "1846320",
    "end": "1853360"
  },
  {
    "text": "it's basically implemented on a data type called the channel and the channel expects chunks as input and chunks as",
    "start": "1853360",
    "end": "1859440"
  },
  {
    "text": "output is kind of like the simple way to think about it and then the stream just kind of",
    "start": "1859440",
    "end": "1865200"
  },
  {
    "text": "abstracts over that and makes things a little bit easier from a user perspective",
    "start": "1865200",
    "end": "1870480"
  },
  {
    "text": "okay um so yeah we have a bunch of different helper methods on the this kind of emit thing that we get back we",
    "start": "1871120",
    "end": "1876640"
  },
  {
    "text": "can also complete the stream with a value or we can complete the stream",
    "start": "1876640",
    "end": "1882000"
  },
  {
    "text": "with uh nothing or we can complete the stream by failing so there's a bunch of different ways",
    "start": "1882000",
    "end": "1888240"
  },
  {
    "text": "that we can actually say that we're actually finished um when we're",
    "start": "1888240",
    "end": "1893600"
  },
  {
    "text": "constructing a stream but for now i'm just gonna go back to me you know a month ago when",
    "start": "1893600",
    "end": "1900320"
  },
  {
    "text": "i first did this and just think about this like in my very naive way at the time",
    "start": "1900320",
    "end": "1905440"
  },
  {
    "text": "so emit.fail so let's just say error for now",
    "start": "1905440",
    "end": "1911679"
  },
  {
    "text": "we'll make this all better in a little bit and then",
    "start": "1911679",
    "end": "1917760"
  },
  {
    "text": "in this case let's do this so you can see that chunk events is actually an array in this case",
    "start": "1917760",
    "end": "1924399"
  },
  {
    "text": "which is good for us because again it's streams are optimized for handling chunks so we can use",
    "start": "1924399",
    "end": "1932880"
  },
  {
    "text": "the chunk data type from effect",
    "start": "1933279",
    "end": "1937120"
  },
  {
    "text": "and please forgive me if i keep importing things from the wrong place i've been working on the next version of effect for too long",
    "start": "1939120",
    "end": "1945200"
  },
  {
    "text": "that i forgot how to do things in the normal version or the current version i should say",
    "start": "1945200",
    "end": "1951200"
  },
  {
    "text": "um and once again if we examine the types here you'll see that we don't get any inference again",
    "start": "1951279",
    "end": "1957519"
  },
  {
    "text": "because of the way that this is implemented where you know we're essentially using this function to figure out what we're",
    "start": "1957519",
    "end": "1962720"
  },
  {
    "text": "returning so there's really no way to do inference in that situation so in this case we can say",
    "start": "1962720",
    "end": "1968399"
  },
  {
    "text": "let's say we don't need an environment we fail with an error and we'll make this better in a little",
    "start": "1968399",
    "end": "1975039"
  },
  {
    "text": "bit and we succeed with a watcher dot event",
    "start": "1975039",
    "end": "1982640"
  },
  {
    "text": "okay so this was like my first very naive stab",
    "start": "1983519",
    "end": "1988640"
  },
  {
    "text": "at trying to wrap this api and then i quickly realized that there were problems with this because",
    "start": "1988640",
    "end": "1995519"
  },
  {
    "text": "specifically if this returned a promise and did",
    "start": "1995519",
    "end": "2001360"
  },
  {
    "text": "nothing else i think it would actually have been a little bit easier but because the subscription need we",
    "start": "2001360",
    "end": "2007679"
  },
  {
    "text": "need to unsubscribe at some point there's really no way to do something like this",
    "start": "2007679",
    "end": "2014320"
  },
  {
    "text": "you know and then like do this part later on at least from from the basic perspective",
    "start": "2017120",
    "end": "2023519"
  },
  {
    "text": "kind of like how you're at have and react you you have like use effect and sort of like the cleanup callback",
    "start": "2023519",
    "end": "2031039"
  },
  {
    "text": "right now now to that point actually honest that's actually a really uh good segue into",
    "start": "2031039",
    "end": "2036960"
  },
  {
    "text": "what i was going to discuss next because again i'm proceeding down my thought process when i first started doing this",
    "start": "2036960",
    "end": "2042880"
  },
  {
    "text": "um there is a combinator and effect related a stream related combinator that also exists",
    "start": "2042880",
    "end": "2048398"
  },
  {
    "text": "on effect that is called wow okay",
    "start": "2048399",
    "end": "2053839"
  },
  {
    "text": "it's called async interrupt and again uh i'm approaching this from my very naive",
    "start": "2053919",
    "end": "2059919"
  },
  {
    "text": "original perspective right that's great taking us on the journey you went through",
    "start": "2059919",
    "end": "2065760"
  },
  {
    "text": "so async interrupt if we look at the description of the method",
    "start": "2065760",
    "end": "2071040"
  },
  {
    "text": "um it creates a stream from an asynchronous callback that can be called multiple times we're using the registration of the",
    "start": "2071040",
    "end": "2078079"
  },
  {
    "text": "callback uh this this function here that we're passing into async interrupt or async we kind of refer to that as the",
    "start": "2078079",
    "end": "2083679"
  },
  {
    "text": "register function because we're figuring out what code we want to run to actually do the emission of data",
    "start": "2083679",
    "end": "2090560"
  },
  {
    "text": "um and then with the async interrupt we can actually",
    "start": "2090560",
    "end": "2095839"
  },
  {
    "text": "return a a basically like an effect that we can use",
    "start": "2095839",
    "end": "2103119"
  },
  {
    "text": "to um in in in the streaming world it's we can",
    "start": "2103119",
    "end": "2108560"
  },
  {
    "text": "return a stream in the effect world we return an effect but we can basically return something that cancels",
    "start": "2108560",
    "end": "2114560"
  },
  {
    "text": "uh whatever we were doing inside here so a really good example of this",
    "start": "2114560",
    "end": "2120560"
  },
  {
    "text": "is like if you were using something like",
    "start": "2120560",
    "end": "2126240"
  },
  {
    "text": "async interrupt",
    "start": "2127200",
    "end": "2130838"
  },
  {
    "text": "right yeah right and you had something like you know whatever and then you wanted to",
    "start": "2136640",
    "end": "2145480"
  },
  {
    "text": "and this is not strictly correct but",
    "start": "2146240",
    "end": "2150079"
  },
  {
    "text": "interesting yeah that very much resembles sort of like the the api of react use effect even though a react",
    "start": "2152480",
    "end": "2159599"
  },
  {
    "text": "effect and here and effect effect are not quite the same thing but they certainly share a few few ideas",
    "start": "2159599",
    "end": "2167599"
  },
  {
    "text": "yeah so i mean i would have to say that the again the one of the biggest problem in",
    "start": "2167599",
    "end": "2172960"
  },
  {
    "text": "react use effect is that the finalizer which is the thing that you are returning",
    "start": "2172960",
    "end": "2178960"
  },
  {
    "text": "is a simple function can do anything job in the in that return function in this",
    "start": "2178960",
    "end": "2186079"
  },
  {
    "text": "case you are returning a full effect which can do whatever whatever you want",
    "start": "2186079",
    "end": "2191200"
  },
  {
    "text": "yeah that's a great point whereas like it's probably more forgiving on the ui development side to have that limitation",
    "start": "2191200",
    "end": "2197520"
  },
  {
    "text": "but here for like more logic heavy things uh you you pro is probably more",
    "start": "2197520",
    "end": "2202640"
  },
  {
    "text": "important um max just a quick pointer in line 27 i think you want to await that subscribe",
    "start": "2202640",
    "end": "2209359"
  },
  {
    "text": "calls already there's actually a reason why i left it as a promise here okay okay",
    "start": "2209359",
    "end": "2215359"
  },
  {
    "text": "yeah there's the i because again i was that we i'll explain this in a second why i",
    "start": "2215359",
    "end": "2221280"
  },
  {
    "text": "can't await this call um but this is kind of like you said this is this is very uh reminiscent of you know what a lot of",
    "start": "2221280",
    "end": "2228960"
  },
  {
    "text": "people who use react are probably very familiar with we have some logic that we're performing and then we",
    "start": "2228960",
    "end": "2234000"
  },
  {
    "text": "also want to have something that cancels that logic at some point if our program shuts down or if the fiber running this",
    "start": "2234000",
    "end": "2240560"
  },
  {
    "text": "effect gets killed or whatever we have a way to kind of clean up the work that we're doing",
    "start": "2240560",
    "end": "2247520"
  },
  {
    "text": "um but while we have this capability in the streaming api as well um it doesn't",
    "start": "2247520",
    "end": "2254560"
  },
  {
    "text": "strictly work the way that you would think um because",
    "start": "2254560",
    "end": "2260960"
  },
  {
    "text": "it's we don't just want to unsubscribe necessarily",
    "start": "2260960",
    "end": "2266560"
  },
  {
    "text": "when um we don't just want to unsubscribe in the cancer we want to have we really need a",
    "start": "2266560",
    "end": "2273760"
  },
  {
    "text": "full fully scoped effect to unsubscribe in all of the cases where we need to",
    "start": "2273760",
    "end": "2279119"
  },
  {
    "text": "actually do the unsubscription um and johannes to your point this async",
    "start": "2279119",
    "end": "2284800"
  },
  {
    "text": "interrupt function does not accept uh a promise",
    "start": "2284800",
    "end": "2290240"
  },
  {
    "text": "right so i can't async await here um because if i did they would turn this",
    "start": "2290240",
    "end": "2295680"
  },
  {
    "text": "function into a promise and then i'd get a type error and so like if i tried to do something along these lines it wouldn't work",
    "start": "2295680",
    "end": "2302880"
  },
  {
    "text": "so unless there isn't a sync",
    "start": "2304800",
    "end": "2310480"
  },
  {
    "text": "interrupt effect i think effect interrupts on some other weird combinator of that type that's not very",
    "start": "2310480",
    "end": "2317119"
  },
  {
    "text": "well i mean we have async effect with streaming but i don't think we have an async effect interrupt",
    "start": "2317119",
    "end": "2324079"
  },
  {
    "text": "yeah in effect we have effect async interrupt and we have a whole bunch of other actually like interesting ones",
    "start": "2324079",
    "end": "2331280"
  },
  {
    "text": "um but we have we have a little bit more restriction on the streaming side because obviously we're trying to handle",
    "start": "2331280",
    "end": "2338160"
  },
  {
    "text": "emission of multiple values over time um so we can't necessarily do every all of the things that we can do with just a",
    "start": "2338160",
    "end": "2344640"
  },
  {
    "text": "plain old effect um okay so",
    "start": "2344640",
    "end": "2350880"
  },
  {
    "text": "again proceeding down my train of thought i was like okay",
    "start": "2350880",
    "end": "2355839"
  },
  {
    "text": "thank you",
    "start": "2356400",
    "end": "2358799"
  },
  {
    "text": "so i thought to myself well that's fine i'll just you know i'll just do the cleanup logic and the canceller right",
    "start": "2361839",
    "end": "2368480"
  },
  {
    "text": "and just fyi for those of you who might be looking at the type signature of",
    "start": "2368480",
    "end": "2374000"
  },
  {
    "text": "this and seeing the either here",
    "start": "2374000",
    "end": "2378720"
  },
  {
    "text": "so um the the reason why you can return an either",
    "start": "2379440",
    "end": "2385839"
  },
  {
    "text": "as a canceler um is because if you return a left and either dot left",
    "start": "2385839",
    "end": "2390880"
  },
  {
    "text": "i'm pretty sure it's left if you return on either dot left it expects the canceler to be called synchronously",
    "start": "2390880",
    "end": "2397440"
  },
  {
    "text": "and if you return an either.write with the canceller it expects the canceler to be returned asynchronously and mike you",
    "start": "2397440",
    "end": "2402880"
  },
  {
    "text": "can verify that i might have that backwards but anyways one",
    "start": "2402880",
    "end": "2408640"
  },
  {
    "text": "one side is for synchronous cleanup functions and the other one is for uh synchronous cancellers and then one is",
    "start": "2408640",
    "end": "2414800"
  },
  {
    "text": "for asynchronous cancellers pretty sure i was right with left and right but anyways i was thinking okay we can take",
    "start": "2414800",
    "end": "2423520"
  },
  {
    "text": "our cleanup function not sure it's like that",
    "start": "2423520",
    "end": "2431200"
  },
  {
    "text": "it's in the same effect terms it's you either return the effect synchronously or a concealer",
    "start": "2432560",
    "end": "2439838"
  },
  {
    "text": "not a synchronous concealer or an asynchronous concealer i may have it mixed up with effect then",
    "start": "2440560",
    "end": "2446079"
  },
  {
    "text": "because in the effect in the new async effect api it indicates whether or not the uh the cancer is an asynchronous or",
    "start": "2446079",
    "end": "2452480"
  },
  {
    "text": "synchronous operation but i can't remember which side of this",
    "start": "2452480",
    "end": "2457520"
  },
  {
    "text": "um all right so in this case the canceler is going to be in effect",
    "start": "2457520",
    "end": "2465280"
  },
  {
    "text": "and i thought okay well i could just do something like this",
    "start": "2465520",
    "end": "2470000"
  },
  {
    "text": "right seems logical however the problem being here",
    "start": "2472000",
    "end": "2477839"
  },
  {
    "text": "that we haven't retrieved the actual async subscribe the actual ascent async",
    "start": "2477839",
    "end": "2484319"
  },
  {
    "text": "subscription here so the i can't actually call and subscribe on the promise so i'd",
    "start": "2484319",
    "end": "2490160"
  },
  {
    "text": "have to await the promise first and then unsubscribe from it so i would again thinking about this from my train of",
    "start": "2490160",
    "end": "2496880"
  },
  {
    "text": "thought i was like okay",
    "start": "2496880",
    "end": "2503760"
  },
  {
    "text": "because i guess we could like then uh like wrap it in a then etc but that wouldn't be cancelable i guess",
    "start": "2504960",
    "end": "2512800"
  },
  {
    "text": "well you are in a you know you know finalize it so here you go you are already in an on in an unconsolable",
    "start": "2512800",
    "end": "2518400"
  },
  {
    "text": "scope so that would be fine oh my god i'm flat mapping",
    "start": "2518400",
    "end": "2524160"
  },
  {
    "text": "and that's sweden i promise i turned them off specifically for",
    "start": "2530400",
    "end": "2535520"
  },
  {
    "text": "johannes because i thought he was going to be edited i mean for mike because i thought he was going to be editing these files",
    "start": "2535520",
    "end": "2541760"
  },
  {
    "text": "um okay i'm a vim positive person same but you know mike always yells at",
    "start": "2542720",
    "end": "2548800"
  },
  {
    "text": "me so anyways um this was like my first attempt at doing",
    "start": "2548800",
    "end": "2554800"
  },
  {
    "text": "this and it sort of worked but it had a lot of problems",
    "start": "2554800",
    "end": "2560000"
  },
  {
    "text": "um and perhaps mike if you want to explain like some of the issues related to",
    "start": "2560000",
    "end": "2566160"
  },
  {
    "text": "handling the subscription and unsubscription and the canceller because",
    "start": "2566160",
    "end": "2571200"
  },
  {
    "text": "i think the main one is basically that you know you're never actually doing this until you're actually canceling it",
    "start": "2571200",
    "end": "2577359"
  },
  {
    "text": "but maybe you want to kind of go over some of the limitations here oh well uh because of how promises works in the",
    "start": "2577359",
    "end": "2583920"
  },
  {
    "text": "moment you call the watcher.subscribe the promise is already started so in theory it is kind of",
    "start": "2583920",
    "end": "2591520"
  },
  {
    "text": "code works in producing the the outcome you would expect there is only one case",
    "start": "2591520",
    "end": "2596800"
  },
  {
    "text": "where we are not cleaning up the subscription and it's the case where we'll have an",
    "start": "2596800",
    "end": "2602000"
  },
  {
    "text": "error when the stream ends the finalizer is not called",
    "start": "2602000",
    "end": "2607838"
  },
  {
    "text": "because this analyzer will only be called if the fiber is interrupted",
    "start": "2608319",
    "end": "2613599"
  },
  {
    "text": "and if you have an exit the fiber goes to an ex process without calling",
    "start": "2613599",
    "end": "2618720"
  },
  {
    "text": "the the finalizer in this case johannes does that make sense to you",
    "start": "2618720",
    "end": "2624240"
  },
  {
    "text": "that makes perfect sense yeah okay um so at this point uh i was thoroughly",
    "start": "2624240",
    "end": "2630960"
  },
  {
    "text": "confused about how we could wrap an api like this with effect",
    "start": "2630960",
    "end": "2636319"
  },
  {
    "text": "so i got some advice from mike and then i started think we started thinking",
    "start": "2636319",
    "end": "2642400"
  },
  {
    "text": "about how we could use leverage some of the other data types that effect provides",
    "start": "2642400",
    "end": "2647760"
  },
  {
    "text": "to um do a little bit oh sorry go ahead so just sorry tundra interrupt here uh no",
    "start": "2647760",
    "end": "2654480"
  },
  {
    "text": "pun intended um uh just two revisits of like the first two attempts that we've that we had like",
    "start": "2654480",
    "end": "2661440"
  },
  {
    "text": "the first one so you basically got a working uh you got a working implementation um that",
    "start": "2661440",
    "end": "2668880"
  },
  {
    "text": "that looked very simple but that didn't allow for unsubscribing that would basically just run forever",
    "start": "2668880",
    "end": "2675040"
  },
  {
    "text": "now you have one that allows for unsubscribing but doesn't handle the error case",
    "start": "2675040",
    "end": "2680400"
  },
  {
    "text": "whereas the previous one probably did handle the error case and now we basically want to have",
    "start": "2680400",
    "end": "2686319"
  },
  {
    "text": "um we had red and blue and now we won't have both yeah that's basically what we're going",
    "start": "2686319",
    "end": "2692160"
  },
  {
    "text": "for right yes yes yeah to boil it down yes but the",
    "start": "2692160",
    "end": "2697680"
  },
  {
    "text": "technically this version handles some errors but not all of them right it doesn't unsubscribe on error",
    "start": "2697680",
    "end": "2704480"
  },
  {
    "text": "right and well yeah there there are certain situations here where the unsubscription will be",
    "start": "2704480",
    "end": "2710319"
  },
  {
    "text": "called specifically if the fiber dies um i'm pretty sure that we won't actually get",
    "start": "2710319",
    "end": "2716480"
  },
  {
    "text": "the uh the cancer called properly",
    "start": "2716480",
    "end": "2722480"
  },
  {
    "text": "even though for for anyone like watching this and thinking like oh my gosh this is like",
    "start": "2722480",
    "end": "2727520"
  },
  {
    "text": "fairly complicated etc so just uh the perspective that i would suggest here we are right now wearing",
    "start": "2727520",
    "end": "2734640"
  },
  {
    "text": "our library implementation heads so for someone like future me i would",
    "start": "2734640",
    "end": "2740720"
  },
  {
    "text": "actually not have to know how this works i could just use the effect file watcher",
    "start": "2740720",
    "end": "2746000"
  },
  {
    "text": "package and it has a stream and would basically just magically work typically",
    "start": "2746000",
    "end": "2751119"
  },
  {
    "text": "the way how i expected so that's actually the power of effect that i don't need to like",
    "start": "2751119",
    "end": "2758319"
  },
  {
    "text": "you this is a really great um set of mechanisms that allows me to encapsulate the right behavior on that",
    "start": "2758319",
    "end": "2765040"
  },
  {
    "text": "level but then now wearing our head of like library authors uh even there it's quite complicated and",
    "start": "2765040",
    "end": "2772000"
  },
  {
    "text": "here having these building blocks to implement this behavior makes it a lot easier",
    "start": "2772000",
    "end": "2777839"
  },
  {
    "text": "than if we wouldn't have it but it is quite complicated",
    "start": "2777839",
    "end": "2783280"
  },
  {
    "text": "i think the goal is that from an api user perspective like for somebody using this library they wouldn't have to think",
    "start": "2783280",
    "end": "2789119"
  },
  {
    "text": "about um am i handling all of the error cases appropriately like to actually perform",
    "start": "2789119",
    "end": "2795119"
  },
  {
    "text": "file watching obviously they can handle their domain errors from from doing the watching of files and like whatever but",
    "start": "2795119",
    "end": "2802000"
  },
  {
    "text": "they don't have to think about well am i performing the unsubscription properly am i handling all of the error scenarios",
    "start": "2802000",
    "end": "2807520"
  },
  {
    "text": "am i shutting down properly kind of all of those things we'd like to make sure we take care of in a robust way before",
    "start": "2807520",
    "end": "2813280"
  },
  {
    "text": "like the library is actually exposed yeah okay so",
    "start": "2813280",
    "end": "2819599"
  },
  {
    "text": "you know so yeah so the the next step was kind of thinking about a",
    "start": "2819599",
    "end": "2825520"
  },
  {
    "text": "way that we could leverage some of the other effect related data types",
    "start": "2825520",
    "end": "2831680"
  },
  {
    "text": "to allow us to still have in the still have the",
    "start": "2831680",
    "end": "2837440"
  },
  {
    "text": "asynchronous open closed semantics of the subscription right be able to like",
    "start": "2837440",
    "end": "2842800"
  },
  {
    "text": "create the subscription and then also unsubscribe from that subscription so we kind of have open closed semantics that",
    "start": "2842800",
    "end": "2848720"
  },
  {
    "text": "johannes pointed out very astutely that lend themselves very nicely to a managed resource",
    "start": "2848720",
    "end": "2854240"
  },
  {
    "text": "but we also have the concept of streaming here and we want to be able to capture all of those things over time",
    "start": "2854240",
    "end": "2861680"
  },
  {
    "text": "so there is another data type in effect which",
    "start": "2862240",
    "end": "2868800"
  },
  {
    "text": "we we decided we were going to incorporate into our into our",
    "start": "2868800",
    "end": "2875119"
  },
  {
    "text": "function here called hue",
    "start": "2875119",
    "end": "2879920"
  },
  {
    "text": "one sec we get it um",
    "start": "2880240",
    "end": "2885280"
  },
  {
    "text": "and q is um really i think it's somewhat underutilized uh",
    "start": "2885280",
    "end": "2893280"
  },
  {
    "text": "but it's a very cool data type um it's a very it's a lightweight um",
    "start": "2893280",
    "end": "2898559"
  },
  {
    "text": "kind of in-memory queue that you can use to perform uh it's it's a fully asynchronous queue",
    "start": "2898559",
    "end": "2904559"
  },
  {
    "text": "so you can have asynchronous operations that you that you um that you can",
    "start": "2904559",
    "end": "2909599"
  },
  {
    "text": "use to write to the queue um and you can it's um",
    "start": "2909599",
    "end": "2915280"
  },
  {
    "text": "back pressured uh depending on the strategy that you use to create the queue you can either have a sliding",
    "start": "2915280",
    "end": "2920960"
  },
  {
    "text": "queue a back pressured queue you can have an unbounded queue you so you can you get a lot of benefit out of um",
    "start": "2920960",
    "end": "2926640"
  },
  {
    "text": "the different uh types of cues that you can actually create here um and the nice thing about using",
    "start": "2926640",
    "end": "2933680"
  },
  {
    "text": "thinking about incorporating a cue here is you're thinking well what if we store",
    "start": "2933680",
    "end": "2938880"
  },
  {
    "text": "the events temporarily in a queue back pressure them into a queue while still giving us the open closed",
    "start": "2938880",
    "end": "2944000"
  },
  {
    "text": "semantics and kind of like do that within a managed instead of using the",
    "start": "2944000",
    "end": "2949680"
  },
  {
    "text": "primitive exposed by stream here so we get the open closed semantics we still get the streaming api um",
    "start": "2949680",
    "end": "2957200"
  },
  {
    "text": "but we no longer have all of the limitations of the stream",
    "start": "2957200",
    "end": "2962240"
  },
  {
    "text": "basically first create a managed queue and then use the managed queue to",
    "start": "2962240",
    "end": "2967839"
  },
  {
    "text": "produce a stream by reiterating the pole on the managed tube",
    "start": "2967839",
    "end": "2974559"
  },
  {
    "text": "got it and i imagine like that the stream under the hood also has some similar mechanics so we're basically",
    "start": "2974559",
    "end": "2981119"
  },
  {
    "text": "just decomposing some parts here to uh to to fully um leverage our use case",
    "start": "2981119",
    "end": "2990079"
  },
  {
    "text": "yeah exactly um so let's start out by maybe like scrolling",
    "start": "2990079",
    "end": "2996160"
  },
  {
    "text": "down a little bit here and let's kind of scrap this for temporarily and just",
    "start": "2996160",
    "end": "3001280"
  },
  {
    "text": "create a new function something that we think we might expose in the future like watch or something",
    "start": "3001280",
    "end": "3008160"
  },
  {
    "text": "and for now we'll just take a directory and we won't annotate a return type for",
    "start": "3008160",
    "end": "3014480"
  },
  {
    "text": "the moment um so let's",
    "start": "3014480",
    "end": "3019760"
  },
  {
    "text": "to keep this like simple and iterative let's take the step of first creating a",
    "start": "3019760",
    "end": "3026160"
  },
  {
    "text": "managed resource out of our subscription here",
    "start": "3026160",
    "end": "3031359"
  },
  {
    "text": "so maybe like a good i find that sometimes when i'm",
    "start": "3031359",
    "end": "3038000"
  },
  {
    "text": "when i'm prototyping it's helpful to use the generator versions of",
    "start": "3038000",
    "end": "3045440"
  },
  {
    "text": "effect and stream and all of that because uh because",
    "start": "3045440",
    "end": "3050480"
  },
  {
    "text": "yeah you need to know less ahead of time like how you combine things and like later on it's easier to than to refactor",
    "start": "3050480",
    "end": "3058000"
  },
  {
    "text": "it right it just makes it a little bit easier and you can sort of iterate and you can actually program it in an",
    "start": "3058000",
    "end": "3063359"
  },
  {
    "text": "imperative fashion for a period of time and then you can kind of take what you've written as long as it works and you can sort of",
    "start": "3063359",
    "end": "3069760"
  },
  {
    "text": "get rid of the generator iteratively if you if you don't want it to be if you don't want to implement it in terms of a",
    "start": "3069760",
    "end": "3075359"
  },
  {
    "text": "generator um you have to take a parameter function oh",
    "start": "3075359",
    "end": "3082079"
  },
  {
    "text": "yeah i should have used this do i still have this",
    "start": "3082079",
    "end": "3088160"
  },
  {
    "text": "no i don't let's make a dollar sign for now in",
    "start": "3088160",
    "end": "3093280"
  },
  {
    "text": "honor of observables um okay so",
    "start": "3093280",
    "end": "3099359"
  },
  {
    "text": "the first thing that might be a good thing to do is actually creating our stream uh not stream q",
    "start": "3099359",
    "end": "3106240"
  },
  {
    "text": "and for the moment we're gonna ignore a couple of things we're going to ignore",
    "start": "3106240",
    "end": "3111760"
  },
  {
    "text": "the different types of cues that we have available to us and we're also going to ignore back pressuring in the queue",
    "start": "3111760",
    "end": "3117680"
  },
  {
    "text": "to a certain degree the queue will handle back pressuring for us but we're going to ignore like",
    "start": "3117680",
    "end": "3123359"
  },
  {
    "text": "capacity and all of that sort of thing for the moment and we're just going to create an unbounded queue",
    "start": "3123359",
    "end": "3129280"
  },
  {
    "text": "um so let's do a queue dot make unbounded",
    "start": "3130079",
    "end": "3135680"
  },
  {
    "text": "and we're gonna right we're returning a queue of effects",
    "start": "3135680",
    "end": "3142559"
  },
  {
    "text": "which we can say for now",
    "start": "3142559",
    "end": "3147680"
  },
  {
    "text": "we don't know or maybe we don't know what we're doing so for now we can just return an error",
    "start": "3147680",
    "end": "3153839"
  },
  {
    "text": "and for now let's say this because i think this is how we originally decided we i",
    "start": "3153839",
    "end": "3160720"
  },
  {
    "text": "think this is how i originally did it then",
    "start": "3160720",
    "end": "3167838"
  },
  {
    "text": "and you can actually um shut down a queue as well and since we're in a managed we might as well we",
    "start": "3169599",
    "end": "3176079"
  },
  {
    "text": "would shutting down the q mean basically uh canceling all the of all the operations",
    "start": "3176079",
    "end": "3182800"
  },
  {
    "text": "shutting down hue means cancelling both the ballers and the pushers",
    "start": "3182800",
    "end": "3189119"
  },
  {
    "text": "okay because both pushing and pulling can be yielded in an asynchronous way",
    "start": "3189119",
    "end": "3196160"
  },
  {
    "text": "so you can push asynchronously and pull asynchronously so your pool is waiting if",
    "start": "3196160",
    "end": "3203040"
  },
  {
    "text": "the queue has reached the capacity the take is waiting if there are no elements",
    "start": "3203040",
    "end": "3210240"
  },
  {
    "text": "when you shut down a queue both of those operations also fire the interrupt",
    "start": "3210240",
    "end": "3216480"
  },
  {
    "text": "and uh just as like a quick aside the what mike said is a hundred percent true",
    "start": "3216480",
    "end": "3221520"
  },
  {
    "text": "but i find it very cool the way it's actually implemented which is using uh promises not javascript promises effect",
    "start": "3221520",
    "end": "3228640"
  },
  {
    "text": "promises on the back end which would be a really cool topic for another effect time at a certain point in time but",
    "start": "3228640",
    "end": "3234960"
  },
  {
    "text": "using promises is how that back pressure is actually implemented again not guess what i have to make the promise to",
    "start": "3234960",
    "end": "3242640"
  },
  {
    "text": "cover that another time okay frank when he think",
    "start": "3242640",
    "end": "3248079"
  },
  {
    "text": "yes so you can see here completely ignoring that um that we're returning a managed",
    "start": "3248079",
    "end": "3255200"
  },
  {
    "text": "resource here um but because we're in a generator we can do we can yield it",
    "start": "3255200",
    "end": "3261920"
  },
  {
    "text": "with a star with a star i don't have any of my helpers in here",
    "start": "3261920",
    "end": "3268400"
  },
  {
    "text": "yeah but forgot to post the helpers and now uh we actually get",
    "start": "3268400",
    "end": "3274000"
  },
  {
    "text": "access to the actual queue implementation itself so what we're saying here is basically we have a queue",
    "start": "3274000",
    "end": "3279599"
  },
  {
    "text": "in which we can enqueue effects uh which can either fail with an error or return an event a watcher event um",
    "start": "3279599",
    "end": "3287599"
  },
  {
    "text": "and the we basically want to the reason we are",
    "start": "3287599",
    "end": "3292880"
  },
  {
    "text": "returning an effect instead of like the actual event um is because these",
    "start": "3292880",
    "end": "3298240"
  },
  {
    "text": "which these are going to represent asynchronous emissions of our stream um at a certain",
    "start": "3298240",
    "end": "3304000"
  },
  {
    "text": "when we actually incorporate it so rather even if you if even if they",
    "start": "3304000",
    "end": "3310400"
  },
  {
    "text": "are not synchronous asynchronous you still have exit to represent a full exit case you",
    "start": "3310400",
    "end": "3317599"
  },
  {
    "text": "might have errors you might have defects and effect can represent all of those",
    "start": "3317599",
    "end": "3323200"
  },
  {
    "text": "all of those cases yes it's like a more powerful either in",
    "start": "3323200",
    "end": "3329119"
  },
  {
    "text": "this um yeah no that's that's actually a really good point um",
    "start": "3329119",
    "end": "3335599"
  },
  {
    "text": "and again we're kind of ignoring for the moment different types of cues that we can actually implement for the back end",
    "start": "3335599",
    "end": "3342000"
  },
  {
    "text": "for our watcher maybe as a enhancement to the library we can expose different either either different versions of",
    "start": "3342000",
    "end": "3348559"
  },
  {
    "text": "watch you know watch unbounded watch but you know sliding whatever or we can um",
    "start": "3348559",
    "end": "3354079"
  },
  {
    "text": "expose like a parameter that takes in a cue strategy or something like that probably just easier to expose multiple",
    "start": "3354079",
    "end": "3359920"
  },
  {
    "text": "combinators but those are kinds of some of the api level decisions to make down the line once we have something that's",
    "start": "3359920",
    "end": "3365760"
  },
  {
    "text": "working um okay now we can",
    "start": "3365760",
    "end": "3372160"
  },
  {
    "text": "maybe wrap our watcher",
    "start": "3372160",
    "end": "3376838"
  },
  {
    "text": "so i'm just going to sketch this out",
    "start": "3377760",
    "end": "3382960"
  },
  {
    "text": "it will become clear in a moment so instead of emitting",
    "start": "3385839",
    "end": "3393040"
  },
  {
    "text": "errors and chunks into the stream um we're actually going to try to",
    "start": "3393680",
    "end": "3400000"
  },
  {
    "text": "what we want to do in this case is we want to emit the events",
    "start": "3400000",
    "end": "3406880"
  },
  {
    "text": "um into our queue and we want to also let the queue know if there's a failure",
    "start": "3406880",
    "end": "3413200"
  },
  {
    "text": "right so we since we don't have the streaming api here we want to just enqueue those things so",
    "start": "3413200",
    "end": "3420880"
  },
  {
    "text": "let's let's see what happens if we just do oh my god",
    "start": "3420880",
    "end": "3426240"
  },
  {
    "text": "i'm i'm operating in ts plus world right now",
    "start": "3426319",
    "end": "3431359"
  },
  {
    "text": "so let's say if there's an error we want to offer a failed effect",
    "start": "3431599",
    "end": "3438880"
  },
  {
    "text": "to the queue which fails with this error",
    "start": "3438880",
    "end": "3445119"
  },
  {
    "text": "and if we succeed we're going to offer a success",
    "start": "3445200",
    "end": "3451839"
  },
  {
    "text": "value um and it was at this point i believe that i",
    "start": "3451839",
    "end": "3456880"
  },
  {
    "text": "realized that we actually want to emit a chunk into the queue",
    "start": "3456880",
    "end": "3464558"
  },
  {
    "text": "because when we succeed here we're going to do a chunk dot from events",
    "start": "3464880",
    "end": "3470000"
  },
  {
    "text": "now there's a problem here which is that",
    "start": "3470000",
    "end": "3475200"
  },
  {
    "text": "because these cues are asynchronous that just like mike said they have back",
    "start": "3475200",
    "end": "3480240"
  },
  {
    "text": "pressure semantics that are backed by the whole effect system offering and taking items from the queue",
    "start": "3480240",
    "end": "3486319"
  },
  {
    "text": "are effective operations or effectual of however you say whatever the proper term is we",
    "start": "3486319",
    "end": "3492559"
  },
  {
    "text": "it it's it's an if you're basically performing an effect when you offer an item or take",
    "start": "3492559",
    "end": "3498160"
  },
  {
    "text": "an item from the queue so that poses a problem here because",
    "start": "3498160",
    "end": "3503280"
  },
  {
    "text": "running this offer as some of the previous effect times have shown us will just return the",
    "start": "3503280",
    "end": "3509040"
  },
  {
    "text": "effect it won't actually run the effect so how do we actually run an effect well we need a runtime right and we have",
    "start": "3509040",
    "end": "3519119"
  },
  {
    "text": "and combinators that can help us access the run the current runtime to be able to run effects",
    "start": "3519520",
    "end": "3525760"
  },
  {
    "text": "so let's do a what is it called runtime yup",
    "start": "3525760",
    "end": "3531599"
  },
  {
    "text": "tito run time pretty much",
    "start": "3532960",
    "end": "3539039"
  },
  {
    "text": "and again a lot of this can be improved but now we can do we can basically take",
    "start": "3539440",
    "end": "3544559"
  },
  {
    "text": "these effects and we can use the run time to run those effects on a fiber",
    "start": "3544559",
    "end": "3550480"
  },
  {
    "text": "all right so runtime dot run fiber",
    "start": "3550480",
    "end": "3556040"
  },
  {
    "text": "and now we've essentially what does that and what's that run fiber what does it return a fiber",
    "start": "3565040",
    "end": "3571040"
  },
  {
    "text": "yep fiber it's the lowest level that you can that you can",
    "start": "3571040",
    "end": "3576559"
  },
  {
    "text": "go on the on the run systems i guess that's fairly like a fairly rare",
    "start": "3576559",
    "end": "3582160"
  },
  {
    "text": "case that you actually need that yeah almost never you almost never need",
    "start": "3582160",
    "end": "3587599"
  },
  {
    "text": "that but for a case where performance matters and you don't",
    "start": "3587599",
    "end": "3592880"
  },
  {
    "text": "care at all about doing anything else post the effect is running you're not taking care of",
    "start": "3592880",
    "end": "3598799"
  },
  {
    "text": "watching the exit value and anything else just to run fiverr and doesn't allocate any",
    "start": "3598799",
    "end": "3605520"
  },
  {
    "text": "any infrastructure to to just wait got it okay so it's a bit of a trade-off",
    "start": "3605520",
    "end": "3610720"
  },
  {
    "text": "where you could do run promise there right right so there's like yeah there's a",
    "start": "3610720",
    "end": "3617119"
  },
  {
    "text": "couple i mean there's a few different methods on the runtime i think um but i think",
    "start": "3617119",
    "end": "3623119"
  },
  {
    "text": "fibers probably like mike said the okay most performant but maybe like",
    "start": "3623119",
    "end": "3629040"
  },
  {
    "text": "worth a discussion at a later point in time um but again if we just examine the",
    "start": "3629040",
    "end": "3635839"
  },
  {
    "text": "type here once again we're left with an effect that returns a nice async subscription",
    "start": "3635839",
    "end": "3642559"
  },
  {
    "text": "so we've effectively got ourselves back so that one's for you johannes that",
    "start": "3642559",
    "end": "3648400"
  },
  {
    "text": "we've effectively got ourselves back to the situation we were in before but before we kind of did this piece of",
    "start": "3648400",
    "end": "3654880"
  },
  {
    "text": "unsubscribing or whatever we've gotten ourselves kind of back to the position where we're returning uh an",
    "start": "3654880",
    "end": "3660559"
  },
  {
    "text": "async subscription instead of oops instead of in a promise now we've got it in an effect",
    "start": "3660559",
    "end": "3666880"
  },
  {
    "text": "um but that is beneficial because now we actually have a way to handle this so",
    "start": "3666880",
    "end": "3672880"
  },
  {
    "text": "let's continue so we're running this within a managed right and we have this async subscription within an effect",
    "start": "3672880",
    "end": "3681839"
  },
  {
    "text": "and as we've done above with our queue we can take an effect and create a managed out of it using make exit and",
    "start": "3681839",
    "end": "3689359"
  },
  {
    "text": "make exit gives us access to the resource so that we can actually do some",
    "start": "3689359",
    "end": "3694400"
  },
  {
    "text": "operations with that resource to shut it down right and in that case that's exactly what we want here",
    "start": "3694400",
    "end": "3700079"
  },
  {
    "text": "we want access to the subscription so that we can properly shut it down",
    "start": "3700079",
    "end": "3706160"
  },
  {
    "text": "in my inside my exit yeah i know i know",
    "start": "3706640",
    "end": "3712559"
  },
  {
    "text": "and it's inside him m dot",
    "start": "3712559",
    "end": "3718000"
  },
  {
    "text": "okay all right all right this is why ts plus",
    "start": "3718000",
    "end": "3724640"
  },
  {
    "text": "everyone should use it um okay",
    "start": "3725680",
    "end": "3730720"
  },
  {
    "text": "doesn't missing parentheses",
    "start": "3730720",
    "end": "3734319"
  },
  {
    "text": "i told you mike was gonna need to edit these files anything live",
    "start": "3735920",
    "end": "3742319"
  },
  {
    "text": "and again the unsubscription as we saw on the previous",
    "start": "3742319",
    "end": "3747839"
  },
  {
    "text": "screen here the unsubscription is an asynchronous operation as well which we hope doesn't fail um if we",
    "start": "3747839",
    "end": "3754720"
  },
  {
    "text": "wanted to be really robust here we could do a try uh try catch promise i think it's called or try",
    "start": "3754720",
    "end": "3761680"
  },
  {
    "text": "yeah in this case you need to die anyway right so we would do an or die in this case most likely um let's do",
    "start": "3761680",
    "end": "3770400"
  },
  {
    "text": "subscription unsubscribe and we can pipe this or we can just do a",
    "start": "3770400",
    "end": "3776400"
  },
  {
    "text": "tdot or die this is already what's going on here the",
    "start": "3776400",
    "end": "3782720"
  },
  {
    "text": "yeah behind the scenes it's going to die no matter what right um",
    "start": "3785359",
    "end": "3790400"
  },
  {
    "text": "because i should say in the new effect t.promise has an unknown on the error and",
    "start": "3790400",
    "end": "3796880"
  },
  {
    "text": "automatically does a retry uh another retry a try catch",
    "start": "3796880",
    "end": "3802319"
  },
  {
    "text": "so it's more it's more explicit if you wanna add if you want to have an effect you're gonna have to do dot promise",
    "start": "3802319",
    "end": "3809119"
  },
  {
    "text": "or die right um",
    "start": "3809119",
    "end": "3814319"
  },
  {
    "text": "okay and now we actually have a managed resource here um with our",
    "start": "3814319",
    "end": "3821520"
  },
  {
    "text": "we actually have like exactly what we wanted here a managed resource that returns an async subscription",
    "start": "3821520",
    "end": "3826880"
  },
  {
    "text": "and in this case all we have to do is run it",
    "start": "3826880",
    "end": "3830880"
  },
  {
    "text": "please point out anything else i do wrong no that's correct",
    "start": "3835920",
    "end": "3841838"
  },
  {
    "text": "okay so at this point we've run our async or our subscription so if we",
    "start": "3842240",
    "end": "3847359"
  },
  {
    "text": "actually looked at the return type here um we have access to our asian async",
    "start": "3847359",
    "end": "3852559"
  },
  {
    "text": "subscription we don't really actually need it because all of the values that we're emitting from that subscription are",
    "start": "3852559",
    "end": "3859359"
  },
  {
    "text": "going into our computer exactly yep so",
    "start": "3859359",
    "end": "3865200"
  },
  {
    "text": "now and the closing of the subscription is already handled within the manager",
    "start": "3865359",
    "end": "3870480"
  },
  {
    "text": "now that we've done that we can actually create our stream um and",
    "start": "3870480",
    "end": "3876799"
  },
  {
    "text": "you could do you could do two things you could even return directly the hue here",
    "start": "3876799",
    "end": "3882000"
  },
  {
    "text": "and you will have first a managed queue like we said at the beginning and then from managed q you can create the folder",
    "start": "3882000",
    "end": "3891039"
  },
  {
    "text": "yeah that's actually like an interesting thought is like we could expose you know different combinators from here",
    "start": "3891039",
    "end": "3896160"
  },
  {
    "text": "that have different uh levels of kind of indirection in terms",
    "start": "3896160",
    "end": "3901440"
  },
  {
    "text": "of like getting access to the events um but from the implementation that i",
    "start": "3901440",
    "end": "3906640"
  },
  {
    "text": "landed on or that we landed on when we first did this we'll stick with that for now",
    "start": "3906640",
    "end": "3913520"
  },
  {
    "text": "yeah but i mean even speaking speaking for that for the purpose of explanation is better if you extract dismantled this",
    "start": "3913520",
    "end": "3920799"
  },
  {
    "text": "m.gen into a constant within the same function even",
    "start": "3920799",
    "end": "3926319"
  },
  {
    "text": "that's like make managed q",
    "start": "3926319",
    "end": "3930920"
  },
  {
    "text": "right okay and then what did you want me to do from here mike s",
    "start": "3936720",
    "end": "3942960"
  },
  {
    "text": "a stream dot and drop",
    "start": "3942960",
    "end": "3947000"
  },
  {
    "text": "um what does unwrapped managed here yeah we need the actual uh we need to show",
    "start": "3951520",
    "end": "3956880"
  },
  {
    "text": "the stream yeah so unwrap managed is a method that takes a",
    "start": "3956880",
    "end": "3962880"
  },
  {
    "text": "managed that returns a stream okay so in this case right now um",
    "start": "3962880",
    "end": "3969200"
  },
  {
    "text": "if we don't need it we don't need to go into it now but no you we we do need it okay but uh",
    "start": "3969200",
    "end": "3974720"
  },
  {
    "text": "so unwrap managed is what we're going to eventually use to transform this whole thing into a stream because it just",
    "start": "3974720",
    "end": "3980000"
  },
  {
    "text": "takes it basically takes a managed resource that returns a stream and converts that into a stream so it",
    "start": "3980000",
    "end": "3986720"
  },
  {
    "text": "basically pulls the stream out of the managed resource let's write the stream and let's let's",
    "start": "3986720",
    "end": "3992400"
  },
  {
    "text": "see the signature so [Music]",
    "start": "3992400",
    "end": "3998240"
  },
  {
    "text": "we can do this if we wanted to i think oh no we can't",
    "start": "3998240",
    "end": "4005280"
  },
  {
    "text": "um i think you have to use the repeat effect",
    "start": "4005280",
    "end": "4012680"
  },
  {
    "text": "yes okay this gives me a and if so what i'm doing here is i'm basically",
    "start": "4020240",
    "end": "4027200"
  },
  {
    "text": "taking the cue pulling off an element and then flattening it because if i didn't flatten the effect i'd get a",
    "start": "4027200",
    "end": "4033520"
  },
  {
    "text": "nested effect so you can see here i'm getting an effect with a nested effect inside of it",
    "start": "4033520",
    "end": "4038640"
  },
  {
    "text": "but we had a queue of effects so when we pull out",
    "start": "4038640",
    "end": "4043760"
  },
  {
    "text": "one effect from the queue we got back our effect pulling out is also an effect it's like",
    "start": "4043760",
    "end": "4049440"
  },
  {
    "text": "a problem 43 we basically have the an effect in there yeah right and because really what",
    "start": "4049440",
    "end": "4055839"
  },
  {
    "text": "are we trying to do here like taking a quick step back what are we trying to do we're trying to dq the effect",
    "start": "4055839",
    "end": "4063520"
  },
  {
    "text": "and then run it and then take the elements we get back and put them into a stream but basically at the if you",
    "start": "4063520",
    "end": "4070079"
  },
  {
    "text": "wouldn't flatten it we would just get like effects back but now that you flatten it this is actually the point where we either get",
    "start": "4070079",
    "end": "4076799"
  },
  {
    "text": "the the value or in case of an error where it actually fails yeah yeah it makes sense so this",
    "start": "4076799",
    "end": "4084240"
  },
  {
    "text": "is it we're almost there in terms of actually creating our stream right um and we actually have a helper method on",
    "start": "4084240",
    "end": "4091839"
  },
  {
    "text": "stream i believe uh repeat effect",
    "start": "4091839",
    "end": "4098798"
  },
  {
    "text": "chunk yep beautiful so now",
    "start": "4098799",
    "end": "4104640"
  },
  {
    "text": "uh if we look at the type of watch we're still not a hundred percent there we're like ninety percent of the way there",
    "start": "4104640",
    "end": "4111359"
  },
  {
    "text": "because now johannes is exactly what i was saying before um right now we have a managed",
    "start": "4111359",
    "end": "4117278"
  },
  {
    "text": "that returns a stream right we have a managed resource that returns a stream",
    "start": "4117279",
    "end": "4122480"
  },
  {
    "text": "but what we want is the stream we don't care about the manage necessarily right we want another type of flattening there",
    "start": "4122480",
    "end": "4128560"
  },
  {
    "text": "right but what about the semantics of the the exit so these the the combinator within",
    "start": "4128560",
    "end": "4135440"
  },
  {
    "text": "stream there's a combinator within stream that handles all that for you basically it pulls and there's like a a",
    "start": "4135440",
    "end": "4143040"
  },
  {
    "text": "similar like similar to how managed has a an exit thing stream also has an exit thing so it basically just relocates",
    "start": "4143040",
    "end": "4150318"
  },
  {
    "text": "that basically it basically moved the stream to be first acquiring",
    "start": "4150319",
    "end": "4157120"
  },
  {
    "text": "the resources then using the stream and then closing down the resources streams themselves can",
    "start": "4157120",
    "end": "4163199"
  },
  {
    "text": "handle resources quite well right so we can we can probably just",
    "start": "4163199",
    "end": "4169278"
  },
  {
    "text": "wrap it at this point uh oops s dot unwrap managed and also just for",
    "start": "4169279",
    "end": "4175600"
  },
  {
    "text": "those of you who are curious there's unwrap managed there's also unwrap which",
    "start": "4175600",
    "end": "4181120"
  },
  {
    "text": "is specifically for effects um unwrap managed handles managed resources",
    "start": "4181120",
    "end": "4187199"
  },
  {
    "text": "to know this if getting rid of managed also gets rid of the tube on rock and it seemed piano",
    "start": "4187199",
    "end": "4193600"
  },
  {
    "text": "i believe it is unwrapped scoped in the new version i think that that was how they renamed",
    "start": "4193600",
    "end": "4199840"
  },
  {
    "text": "it because you require i think they still require a scope so at this point now that we've",
    "start": "4199840",
    "end": "4205679"
  },
  {
    "text": "unwrapped our managed our stream from a managed if we look at our type of watch",
    "start": "4205679",
    "end": "4212640"
  },
  {
    "text": "we have the type that we were actually hoping for here um",
    "start": "4212640",
    "end": "4217920"
  },
  {
    "text": "which is very interesting um and the nice part about this is we have a couple of",
    "start": "4217920",
    "end": "4224800"
  },
  {
    "text": "uh hidden performance benefits here which is that since we're returning a chunk in here so",
    "start": "4224800",
    "end": "4232239"
  },
  {
    "text": "we're actually there's a there's a kind of there's layers of buffering happening",
    "start": "4232239",
    "end": "4237600"
  },
  {
    "text": "here we have a queue of chunks a queue of effective chunks right and because instead of returning like the individual",
    "start": "4237600",
    "end": "4243760"
  },
  {
    "text": "events in this effect if since we're returning chunks we actually again get that",
    "start": "4243760",
    "end": "4249440"
  },
  {
    "text": "benefit of having the chunked um emission of resources into the stream",
    "start": "4249440",
    "end": "4254560"
  },
  {
    "text": "that kind of like buffering that happens um you probably want to use",
    "start": "4254560",
    "end": "4259760"
  },
  {
    "text": "directory here yeah good point okay that's what i get for copy paste",
    "start": "4259760",
    "end": "4264960"
  },
  {
    "text": "otherwise we get mike freaking out that this is also an effect calling process",
    "start": "4264960",
    "end": "4271600"
  },
  {
    "text": "you're in working directory it is an effect um you would be right",
    "start": "4271600",
    "end": "4277090"
  },
  {
    "text": "[Laughter] [Music] so um yeah at this point",
    "start": "4277090",
    "end": "4282159"
  },
  {
    "text": "um we have something that we can actually use and probably would be kind of fun to just",
    "start": "4282159",
    "end": "4288320"
  },
  {
    "text": "like do a smoke test of this really quick instead of writing a test because i think that's fun",
    "start": "4288320",
    "end": "4295280"
  },
  {
    "text": "i like tests but i like smoke tests as well and i also like annotating return types so one other uh",
    "start": "4295440",
    "end": "4302719"
  },
  {
    "text": "improvement we can make here is uh improving the error type so we could",
    "start": "4302719",
    "end": "4309040"
  },
  {
    "text": "do like a file watcher uh",
    "start": "4309040",
    "end": "4315640"
  },
  {
    "text": "yeah i guess we don't have quite enough time to write like full tests etc so i think we should just like try to do a",
    "start": "4326800",
    "end": "4333520"
  },
  {
    "text": "first script to to run it by hand and then uh wrote up here i think we",
    "start": "4333520",
    "end": "4340480"
  },
  {
    "text": "have our nice examples directory perfect yeah this will be the last improvement",
    "start": "4340480",
    "end": "4346480"
  },
  {
    "text": "we make before we just run a couple of quick looks just have a read only on the bearing line",
    "start": "4346480",
    "end": "4352080"
  },
  {
    "text": "thank you um and we want to basically take this",
    "start": "4352080",
    "end": "4358159"
  },
  {
    "text": "and put it here",
    "start": "4358159",
    "end": "4360960"
  },
  {
    "text": "all right i think you need to oh no never mind and now we have a nicer",
    "start": "4369440",
    "end": "4375679"
  },
  {
    "text": "type here which i'm going to annotate because of that guy",
    "start": "4375679",
    "end": "4381040"
  },
  {
    "text": "i'm also that guy both guys know that you have a",
    "start": "4382159",
    "end": "4387920"
  },
  {
    "text": "refactoring with vs code that can do it automatically yeah but i just like making things",
    "start": "4387920",
    "end": "4393120"
  },
  {
    "text": "difficult for myself um okay so let's let's do some let's make",
    "start": "4393120",
    "end": "4399120"
  },
  {
    "text": "some stuff awesome it turns out we were not after some function after all",
    "start": "4399120",
    "end": "4405520"
  },
  {
    "text": "well we could run a sum function on every on every five",
    "start": "4406880",
    "end": "4412080"
  },
  {
    "text": "i am fairly certain i can do something like this",
    "start": "4412080",
    "end": "4418480"
  },
  {
    "text": "no yes relative to the parent probably",
    "start": "4418480",
    "end": "4423600"
  },
  {
    "text": "i don't know if we run it with workspace if it's going to point to like this file system like by default or",
    "start": "4423600",
    "end": "4430320"
  },
  {
    "text": "we'll see that we want to do",
    "start": "4430320",
    "end": "4435280"
  },
  {
    "text": "let's take like i mean of a stream uh let's take like the first two",
    "start": "4438880",
    "end": "4445440"
  },
  {
    "text": "or four or five",
    "start": "4445440",
    "end": "4449120"
  },
  {
    "text": "okay we log everything",
    "start": "4452239",
    "end": "4458159"
  },
  {
    "text": "run collect collects all the outputs in in an array and given this is gonna be an infinite stream",
    "start": "4459840",
    "end": "4465920"
  },
  {
    "text": "here here we're gonna blow off memory a little bit",
    "start": "4465920",
    "end": "4472080"
  },
  {
    "text": "let's just log out the events for now oops so it's a remote server it's",
    "start": "4473840",
    "end": "4479920"
  },
  {
    "text": "fine okay so let's do this",
    "start": "4480840",
    "end": "4486400"
  },
  {
    "text": "all right i don't know if i don't know if this happening i don't know if this path is 100 correct but we'll work",
    "start": "4486400",
    "end": "4491840"
  },
  {
    "text": "through that in a second uh",
    "start": "4491840",
    "end": "4497520"
  },
  {
    "text": "dev",
    "start": "4497520",
    "end": "4499840"
  },
  {
    "text": "so we as we as we can see we see nothing so that seems correct yeah so it should be we",
    "start": "4502640",
    "end": "4509199"
  },
  {
    "text": "because we're draining the stream and uh the stream is basically infinite we shouldn't this pro the program should",
    "start": "4509199",
    "end": "4516719"
  },
  {
    "text": "not shut down so behavior is as expected currently uh i was told once to instead of",
    "start": "4516719",
    "end": "4523440"
  },
  {
    "text": "uh here line for tnt run from us to use node run main yeah but i don't have",
    "start": "4523440",
    "end": "4529440"
  },
  {
    "text": "effect node installed right now okay",
    "start": "4529440",
    "end": "4533520"
  },
  {
    "text": "oh there we go wow yes so now if we say this is really cool",
    "start": "4534640",
    "end": "4543360"
  },
  {
    "text": "there we go yes i mean we did not expect i mean this could be actually now",
    "start": "4543520",
    "end": "4548719"
  },
  {
    "text": "if yeah well we could install the node package with fs and then",
    "start": "4548719",
    "end": "4553840"
  },
  {
    "text": "i can like flat map over to each stream thing and actually also get the file contents",
    "start": "4553840",
    "end": "4559199"
  },
  {
    "text": "that that would be now something that's really easy to do but i think we",
    "start": "4559199",
    "end": "4564880"
  },
  {
    "text": "that that could be left as an exercise for for the keen observer here",
    "start": "4564880",
    "end": "4570560"
  },
  {
    "text": "yeah so other than we do within five minutes all right uh we shall be the keynote",
    "start": "4570560",
    "end": "4577199"
  },
  {
    "text": "service let's do it like maybe install node as a as a dependency",
    "start": "4577199",
    "end": "4584560"
  },
  {
    "text": "yes node i hope that i have published the fs module option",
    "start": "4587600",
    "end": "4594480"
  },
  {
    "text": "it would be fun so well since we did that we can also do uh run main",
    "start": "4594480",
    "end": "4601280"
  },
  {
    "text": "from one time",
    "start": "4601280",
    "end": "4606800"
  },
  {
    "text": "i keep trying to use them",
    "start": "4606800",
    "end": "4609840"
  },
  {
    "text": "[Music] all right",
    "start": "4615340",
    "end": "4620239"
  },
  {
    "text": "so i i think we can keep keep that tab and",
    "start": "4620960",
    "end": "4626400"
  },
  {
    "text": "then map uh like chain afterwards and then lock the other thing as well",
    "start": "4626400",
    "end": "4634320"
  },
  {
    "text": "do you okay uh what do you want me to do like after line 14 uh do like s chain",
    "start": "4634320",
    "end": "4642158"
  },
  {
    "text": "or chain effect or whatever that's called it's tab tab is",
    "start": "4642719",
    "end": "4648560"
  },
  {
    "text": "no it's not effect if you want to change the result type of fact",
    "start": "4648560",
    "end": "4654239"
  },
  {
    "text": "um events and now let's see what we got in the fs",
    "start": "4654239",
    "end": "4661920"
  },
  {
    "text": "read file yep",
    "start": "4662400",
    "end": "4668239"
  },
  {
    "text": "and let's just add this as um like in a tuple or something",
    "start": "4669760",
    "end": "4675840"
  },
  {
    "text": "drupal or like basically just uh do not lose the party create a new event",
    "start": "4675840",
    "end": "4682800"
  },
  {
    "text": "where it also adds a fire content basically maybe add a property to the events uh",
    "start": "4682800",
    "end": "4688640"
  },
  {
    "text": "to the event object where it adds like a contents oh seriously",
    "start": "4688640",
    "end": "4696000"
  },
  {
    "text": "it could be t-struct yeah you really have events",
    "start": "4698880",
    "end": "4706320"
  },
  {
    "text": "let's file like buffer",
    "start": "4706320",
    "end": "4710239"
  },
  {
    "text": "what is it again buffer dot t string or it's uh let's say to",
    "start": "4718560",
    "end": "4724320"
  },
  {
    "text": "to string utf-8 but that could also fail or not it's not encoded in utf-8",
    "start": "4724320",
    "end": "4732560"
  },
  {
    "text": "yeah whatever we can do it exactly what johanna said we can do this",
    "start": "4736800",
    "end": "4741840"
  },
  {
    "text": "we can do um over the fields again",
    "start": "4741840",
    "end": "4750800"
  },
  {
    "text": "and then i would say event yeah we can just keep it as event and",
    "start": "4750880",
    "end": "4756560"
  },
  {
    "text": "then have the contents oh",
    "start": "4756560",
    "end": "4761400"
  },
  {
    "text": "consent i think here we actually don't want succeed with but we actually want to",
    "start": "4770480",
    "end": "4775920"
  },
  {
    "text": "call the fs thing",
    "start": "4775920",
    "end": "4779120"
  },
  {
    "text": "and that returns returns a buffer so to print i guess here we want a map",
    "start": "4785280",
    "end": "4791840"
  },
  {
    "text": "we don't want a chain actually even give him what",
    "start": "4792400",
    "end": "4798640"
  },
  {
    "text": "we're gonna have to do all right mr correctness officer it's nice",
    "start": "4798640",
    "end": "4806560"
  },
  {
    "text": "it's very precise there you go tells us obviously we need to provide",
    "start": "4806960",
    "end": "4812239"
  },
  {
    "text": "the default",
    "start": "4812239",
    "end": "4815198"
  },
  {
    "text": "i system we have it as a layer write some layer now",
    "start": "4817760",
    "end": "4822719"
  },
  {
    "text": "live maker live fs that's the make function",
    "start": "4823679",
    "end": "4829280"
  },
  {
    "text": "live fs there we go",
    "start": "4829520",
    "end": "4833440"
  },
  {
    "text": "and we should see log something probably oh yeah",
    "start": "4836159",
    "end": "4841679"
  },
  {
    "text": "and just copy the the one above let's just do it like this",
    "start": "4841679",
    "end": "4846960"
  },
  {
    "text": "since we're getting the event anyways yeah i think it'd be",
    "start": "4846960",
    "end": "4852800"
  },
  {
    "text": "would be cool to keep like both to keep both log statements whatever your heart desires you honest",
    "start": "4852800",
    "end": "4859760"
  },
  {
    "text": "absolutely what my heart desires so okay",
    "start": "4859760",
    "end": "4864960"
  },
  {
    "text": "okay",
    "start": "4866800",
    "end": "4869800"
  },
  {
    "text": "now look at this this is really cool",
    "start": "4874800",
    "end": "4881360"
  },
  {
    "text": "really really cool nice all right this was a was a big",
    "start": "4882400",
    "end": "4887920"
  },
  {
    "text": "success yeah so great success",
    "start": "4887920",
    "end": "4893760"
  },
  {
    "text": "so you know there's definitely ways that we can improve um the things that are exposed by this",
    "start": "4893760",
    "end": "4899600"
  },
  {
    "text": "module i think you know the watch functionality is like the minimum that we can do um there's other features and whatnot",
    "start": "4899600",
    "end": "4906080"
  },
  {
    "text": "but uh hopefully sort of like having our first vertical slice and now we can sort of like",
    "start": "4906080",
    "end": "4911360"
  },
  {
    "text": "sprinkle different variants over it make it more configurable etc right that's um",
    "start": "4911360",
    "end": "4917760"
  },
  {
    "text": "yeah that's great hopefully this gives everybody a little bit of a better idea also to handle um",
    "start": "4917760",
    "end": "4924159"
  },
  {
    "text": "some less typical uh asynchronous operations with effect and how you could potentially approach uh those problems",
    "start": "4924159",
    "end": "4931280"
  },
  {
    "text": "instead of just relying on the async combinators that's awesome um",
    "start": "4931280",
    "end": "4937760"
  },
  {
    "text": "all right that's great thanks so much uh max for for sharing your your stream streaming wisdom with",
    "start": "4937760",
    "end": "4945280"
  },
  {
    "text": "us here today um it's been been super uh super",
    "start": "4945280",
    "end": "4952400"
  },
  {
    "text": "interesting for me to to learn about these pieces of effect here and yeah guess unless there's any any",
    "start": "4952400",
    "end": "4960159"
  },
  {
    "text": "more questions uh we'll probably uh call it a day here",
    "start": "4960159",
    "end": "4965199"
  },
  {
    "text": "um and looking forward to seeing you all back in a few weeks for",
    "start": "4965199",
    "end": "4970400"
  },
  {
    "text": "the next episode sounds good guys thank you thanks so much that's good thank you very much",
    "start": "4970400",
    "end": "4975840"
  },
  {
    "text": "alrighty bye",
    "start": "4975840",
    "end": "4979560"
  }
]