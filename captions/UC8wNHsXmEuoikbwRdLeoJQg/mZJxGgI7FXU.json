[
  {
    "start": "0",
    "end": "103000"
  },
  {
    "text": "(audience applauds) Hello.",
    "start": "0",
    "end": "3740"
  },
  {
    "text": "Hi, everyone. Thank you so much for having me here. I'm going to be talking about effective state machines for complex logic.",
    "start": "9480",
    "end": "15198"
  },
  {
    "text": "My name's David. It doesn't really matter. No one really cares. So let's talk about Johannes.",
    "start": "15839",
    "end": "20359"
  },
  {
    "text": "So the first time I actually heard about Effect was Johannes was sliding into my DMs and saying,",
    "start": "21120",
    "end": "29359"
  },
  {
    "text": "I'm having a few problems with XState. He was working on an awesome project called Overtone.",
    "start": "30079",
    "end": "34560"
  },
  {
    "text": "And he was working on some XState logic in there. And he's like, I'm running into a bunch of TypeScript issues.",
    "start": "35119",
    "end": "40759"
  },
  {
    "text": "Now, this was back when XState was in version 4. So I was helping him debug those and saying, I'm sorry.",
    "start": "40759",
    "end": "47039"
  },
  {
    "text": "A lot of things are missing. And so he was saying, oh, OK, well, hopefully the types",
    "start": "47280",
    "end": "54119"
  },
  {
    "text": "could get better, et cetera. And so I was actually really interested in the amount of craziness he was trying to do with types",
    "start": "54119",
    "end": "61359"
  },
  {
    "text": "because he was running into things where it's like, yeah, I know that this is an issue. It's a bit of an edge case for us.",
    "start": "61479",
    "end": "67599"
  },
  {
    "text": "And not many people run into it. But he was running into these things a lot. And so I was like, what is he using?",
    "start": "67599",
    "end": "73599"
  },
  {
    "text": "And so he was using something called Effect. And so I took a look at this. And he was complaining about the types.",
    "start": "73879",
    "end": "79359"
  },
  {
    "text": "And so I started complaining to him about, there's no documentation. I can't even help you with this because there's",
    "start": "79359",
    "end": "85879"
  },
  {
    "text": "zero documentation. So that really pushed us to finally release XState version 5, which has much improved typings.",
    "start": "85879",
    "end": "94519"
  },
  {
    "text": "And of course, Effect now has amazing documentation. So I'm going to be talking about basically the mixture",
    "start": "94760",
    "end": "101719"
  },
  {
    "text": "of both of them. Now, when I first learned about Effect, one of the things--",
    "start": "101719",
    "end": "106680"
  },
  {
    "text": "I remember seeing Michael give his original talk. And I thought it was really amazing how basically you",
    "start": "107040",
    "end": "115000"
  },
  {
    "text": "could take a complex promise and deal with things such as cancellation retries, et cetera,",
    "start": "115040",
    "end": "121280"
  },
  {
    "text": "and just make that really simple and really explicit. Because we know that when you're executing programs,",
    "start": "121280",
    "end": "127879"
  },
  {
    "text": "whether they're sync or async, it's not just about getting the output. It's about dealing with everything else too: observability,",
    "start": "127879",
    "end": "134319"
  },
  {
    "text": "concurrency, errors, timeouts, et cetera, et cetera. And so this is what I really appreciate about Effect,",
    "start": "134319",
    "end": "141520"
  },
  {
    "text": "where it's forcing developers, you all, to think about these problems up front.",
    "start": "141520",
    "end": "146239"
  },
  {
    "text": "But let's zoom out a little, because XState sort of operates at a different level of abstraction.",
    "start": "147080",
    "end": "152960"
  },
  {
    "text": "So Effect is lower level. XState and state machines are more higher level. Let's say that you have a workflow.",
    "start": "153360",
    "end": "159599"
  },
  {
    "text": "And workflows, as we know, are things where you have a step. And then once that step's",
    "start": "160120",
    "end": "166120"
  },
  {
    "text": "done, you might do something else. And then once that thing is done, you might do further processing and eventually reach",
    "start": "166120",
    "end": "171800"
  },
  {
    "text": "some sort of end state. But we know that if you've ever programmed a workflow,",
    "start": "171800",
    "end": "176520"
  },
  {
    "text": "they're not always this simple. It's never just ABC. As Effect would tell you, you would also",
    "start": "176960",
    "end": "183599"
  },
  {
    "text": "have to deal with errors. But there's different use cases too.",
    "start": "183599",
    "end": "188159"
  },
  {
    "text": "And this sort of takes it out of that level of abstraction, where you also have to deal with alternate flows.",
    "start": "188759",
    "end": "195239"
  },
  {
    "text": "A user can, for example, in a checkout flow, pay via card, pay via cash.",
    "start": "196360",
    "end": "201439"
  },
  {
    "text": "Or I don't know how you do that online. Don't know why I said that. But also pay via PayPal.",
    "start": "201879",
    "end": "205758"
  },
  {
    "text": "[LAUGHTER] Right? And you could also... it's not a directed acyclic graph.",
    "start": "207000",
    "end": "212199"
  },
  {
    "text": "It could actually be cyclic. So when you have an error, you might have some compensation logic. Or you might want to retry it.",
    "start": "212199",
    "end": "218519"
  },
  {
    "text": "Or if you're going through an alternate flow, you might want them to be able to go back and to do a different flow.",
    "start": "218719",
    "end": "223680"
  },
  {
    "text": "And these graphs can just grow bigger and bigger over time as the number of use cases and edge cases in your app",
    "start": "224000",
    "end": "230800"
  },
  {
    "text": "grow too. And each one of those flows, like each one of those steps in the flow, can itself be a multi-step flow.",
    "start": "230960",
    "end": "237879"
  },
  {
    "text": "For instance, if you're asking an AI app, like, hey, can you please process this for me or produce",
    "start": "238360",
    "end": "243759"
  },
  {
    "text": "some sort of output, likely it's not just going to say, OK, I'm going to just ask ChatGPT and return you the results.",
    "start": "243759",
    "end": "250800"
  },
  {
    "text": "It might do some processing on that data. So there might be some sub-steps or sub-flows involved in that.",
    "start": "251120",
    "end": "256759"
  },
  {
    "text": "And so things get really complicated. So we know that Effect is really good for the low-level stuff.",
    "start": "257560",
    "end": "262879"
  },
  {
    "text": "But when it comes to the higher-level stuff, we need to think at a different level of abstraction",
    "start": "263160",
    "end": "269120"
  },
  {
    "text": "and understand all of the different flows that can happen, all of the different use cases and edge cases.",
    "start": "269639",
    "end": "276160"
  },
  {
    "start": "275000",
    "end": "359000"
  },
  {
    "text": "And so this is why I have been so interested in state machines. Because not only does it help",
    "start": "276680",
    "end": "282000"
  },
  {
    "text": "you make those edge cases and use cases explicit, but it also does it so that you",
    "start": "282000",
    "end": "287399"
  },
  {
    "text": "could present it to someone who is either technical or non-technical. So for example, if you're explaining a flow for logging in,",
    "start": "287439",
    "end": "294720"
  },
  {
    "text": "you say that there's two different options. Like, the credentials could be correct, and then you would be logged in.",
    "start": "295319",
    "end": "301040"
  },
  {
    "text": "Or the credentials would be incorrect, and you would be in an unauthorized state,",
    "start": "301439",
    "end": "307360"
  },
  {
    "text": "and then you would need to retry it. How many of you are actually familiar with state machines?",
    "start": "307600",
    "end": "312720"
  },
  {
    "text": "You know what they are. I don't have to explain this. Most of you.",
    "start": "312720",
    "end": "317399"
  },
  {
    "text": "And if not, just talk to me or say state machines somewhere, and I will run up to you and",
    "start": "317759",
    "end": "323120"
  },
  {
    "text": "talk to you about state machines. But yeah, so it maps directly to user requirements.",
    "start": "323120",
    "end": "329439"
  },
  {
    "text": "So given the user is logged out, when the user logs in with the correct credentials, then they should be logged in.",
    "start": "329720",
    "end": "335240"
  },
  {
    "text": "So it's that classic given, when, then formats that can be easily",
    "start": "335240",
    "end": "340160"
  },
  {
    "text": "translated for non-technical stakeholders. And of course, as a developer, you could zoom into the different parts",
    "start": "340279",
    "end": "346839"
  },
  {
    "text": "of the state machine and say, OK, this part has to do all of these different things.",
    "start": "346839",
    "end": "351919"
  },
  {
    "text": "But these are implementation details that you could compartmentalize in the different parts of the state machine,",
    "start": "352160",
    "end": "357720"
  },
  {
    "text": "which is really nice. Now, making a state machine does not require a library.",
    "start": "358040",
    "end": "363199"
  },
  {
    "start": "359000",
    "end": "516000"
  },
  {
    "text": "You don't need to use XState necessarily to make a state machine. One of the most classic ways of making one",
    "start": "363399",
    "end": "369120"
  },
  {
    "text": "is using switch statements, where instead of switching on the event or the action, if you've used Redux before,",
    "start": "369240",
    "end": "375599"
  },
  {
    "text": "you would switch on the state. So depending on which state you're in, such as the cart state,",
    "start": "376000",
    "end": "380959"
  },
  {
    "text": "you then check, OK, which events just happened. So if the event.type is checkout, then we",
    "start": "381959",
    "end": "388279"
  },
  {
    "text": "will go to the shipping state. And the reason we do this is because with state machines,",
    "start": "388279",
    "end": "393000"
  },
  {
    "text": "you want events to have an effect only in certain states.",
    "start": "393399",
    "end": "398599"
  },
  {
    "text": "That's the entire premise of a state machine. You want to make impossible transitions impossible.",
    "start": "398839",
    "end": "404240"
  },
  {
    "text": "And of course, impossible states impossible too. Now, I don't really like writing switch statements,",
    "start": "405000",
    "end": "410399"
  },
  {
    "text": "so I instead prefer to do an object lookup. Now, this also does not require a library too.",
    "start": "410839",
    "end": "416639"
  },
  {
    "text": "You could do this yourself, where we basically have the same structure as a switch statement.",
    "start": "416639",
    "end": "422079"
  },
  {
    "text": "We're just doing it in a more declarative and more serializable way. So you could say, OK, my states",
    "start": "422360",
    "end": "428399"
  },
  {
    "text": "are cart, shipping, contact, et cetera. And then we have our transitions. So on these events, I'm going to tell you",
    "start": "428399",
    "end": "434959"
  },
  {
    "text": "what the next state in my state machine should be. And then we could just use a simple transition function",
    "start": "434959",
    "end": "441120"
  },
  {
    "text": "to get the current state and the event and return what the next state should be.",
    "start": "441560",
    "end": "446160"
  },
  {
    "text": "Now, XState takes this to the next level, but it also keeps a lot of things the same.",
    "start": "447160",
    "end": "452240"
  },
  {
    "text": "So instead of having just a plain object, we just wrap this in create machine.",
    "start": "452519",
    "end": "457800"
  },
  {
    "text": "As you can see here, it's pretty much the same structure. And new in version 5, since",
    "start": "458800",
    "end": "465439"
  },
  {
    "text": "we've thought a lot about the typing after Johannes's talk to me, we now have this setup function",
    "start": "465439",
    "end": "472839"
  },
  {
    "text": "where you could actually provide ahead of time the implementations, such as actions, actors, guards, et cetera,",
    "start": "473240",
    "end": "479920"
  },
  {
    "text": "and also the types for the context and the events that you could provide. And sneak peek, this is where",
    "start": "479920",
    "end": "485959"
  },
  {
    "text": "Effect is going to come really, really handy. And then you could just interpret that machine",
    "start": "485959",
    "end": "492240"
  },
  {
    "text": "by creating an actor from it. Now, real quick, a machine is like the logic,",
    "start": "492759",
    "end": "498519"
  },
  {
    "text": "the brain inside an entity. An actor is something that is an instance of that machine.",
    "start": "498519",
    "end": "505439"
  },
  {
    "text": "So it's something that's actually alive. You could subscribe to it. You could send it events.",
    "start": "505439",
    "end": "510279"
  },
  {
    "text": "And of course, you could start it so that it would start processing those events.",
    "start": "510720",
    "end": "515518"
  },
  {
    "text": "And so the entire philosophy behind XState is really the representation of this actor logic",
    "start": "516399",
    "end": "522159"
  },
  {
    "text": "as given the current state and the event that you received, you're going to produce a next state,",
    "start": "522399",
    "end": "529159"
  },
  {
    "text": "but you're also going to execute Effects. And this is a huge thing that is actually missing in a lot",
    "start": "529159",
    "end": "534519"
  },
  {
    "text": "of state management libraries, is how do we declaratively represent Effects?",
    "start": "534519",
    "end": "539519"
  },
  {
    "start": "540000",
    "end": "682000"
  },
  {
    "text": "So one of the biggest benefits that I love for using state machines is that",
    "start": "541159",
    "end": "546960"
  },
  {
    "text": "this declarative representation can actually be converted to a diagram like this.",
    "start": "546960",
    "end": "551639"
  },
  {
    "text": "And so this is an example state machine for a video player. We start in a closed state.",
    "start": "552039",
    "end": "556639"
  },
  {
    "text": "And when you click the small video, it opens. And then we execute some Effects, which I'm going to talk about soon.",
    "start": "557080",
    "end": "563199"
  },
  {
    "text": "But then in this open state, we actually have nested states. And so this is what's called a state's chart.",
    "start": "564159",
    "end": "569600"
  },
  {
    "text": "So a state machine is that state event, state event. A state chart allows you to have",
    "start": "570159",
    "end": "576120"
  },
  {
    "text": "nested states, parallel states. So it's sort of like state machines, but with a lot more features.",
    "start": "576120",
    "end": "582519"
  },
  {
    "text": "And so you could be playing, in which we execute some Effects. And then you could pause it.",
    "start": "583039",
    "end": "588959"
  },
  {
    "text": "And the video could stop, et cetera. So we have the idea of declarative Effects",
    "start": "589399",
    "end": "596000"
  },
  {
    "text": "in state charts. And these Effects can either be actions or actors,",
    "start": "596559",
    "end": "601878"
  },
  {
    "text": "which I'm going to talk about soon. So actions always happen on transitions.",
    "start": "601879",
    "end": "607279"
  },
  {
    "text": "So for example, if the user presses the Stop button, then the Stop Video action should execute.",
    "start": "607759",
    "end": "613519"
  },
  {
    "text": "Now, we also have entry and exit actions on states, which means that any transition that",
    "start": "614559",
    "end": "619759"
  },
  {
    "text": "goes into a state is going to execute that entry action. And any transition that exits a state",
    "start": "619799",
    "end": "625519"
  },
  {
    "text": "will execute the exit action. And then there is invoke. And so these are... you could think of them",
    "start": "625879",
    "end": "631199"
  },
  {
    "text": "as long-lived actions or long-lived Effects. These are Effects that you actually have to take care of.",
    "start": "631200",
    "end": "636960"
  },
  {
    "text": "You have to babysit. They live for the lifetime of the state. So there are things that could actually communicate back",
    "start": "636960",
    "end": "642840"
  },
  {
    "text": "with the state machine. And they're not just fire and forget like a normal action.",
    "start": "642840",
    "end": "647559"
  },
  {
    "text": "This is an example of this behavior. And this actually really showcases",
    "start": "649519",
    "end": "654799"
  },
  {
    "text": "where state machines are useful for expressing things that might not be just trivial logic.",
    "start": "655000",
    "end": "661279"
  },
  {
    "text": "It's easy enough to just show a video player press play, press pause. But if you're needing to model something like this video",
    "start": "661679",
    "end": "668000"
  },
  {
    "text": "player should be in an expanded mode until it's done, then we should close it. Or the user should be able to close it",
    "start": "668000",
    "end": "675000"
  },
  {
    "text": "by pressing the Escape key or by pressing outside the video player, then that logic starts to become complex.",
    "start": "675000",
    "end": "681279"
  },
  {
    "start": "682000",
    "end": "775000"
  },
  {
    "text": "All right, so I talked about the two different types of Effects that we have in state machines. And they are represented in XState.",
    "start": "683279",
    "end": "688519"
  },
  {
    "text": "Actions, which are fire and forget. And Actors, which are live entities. So I want to talk a little bit about the actor model,",
    "start": "689159",
    "end": "696600"
  },
  {
    "text": "mostly because I really wish to see this in Effect one day. So the actor model is actually the core abstraction,",
    "start": "697120",
    "end": "704639"
  },
  {
    "text": "the unit of abstraction in XSate. And it's actually pretty simple to understand.",
    "start": "705159",
    "end": "709919"
  },
  {
    "text": "So in the actor model, an actor performs all computation. So it's not performed outside each unit of computation",
    "start": "710679",
    "end": "718879"
  },
  {
    "text": "or sorry, each unit, which is the actor, performs all of the computation. Actors can communicate through each other only",
    "start": "719440",
    "end": "726720"
  },
  {
    "text": "through messages. So just like I can't read your mind, an actor can't read another actor's internal state.",
    "start": "726840",
    "end": "732839"
  },
  {
    "text": "It needs to communicate through via a message. And so in response to these messages,",
    "start": "733080",
    "end": "738759"
  },
  {
    "text": "an actor can change its state or behavior, which is pretty much interchangeable.",
    "start": "739279",
    "end": "744000"
  },
  {
    "text": "It could send messages to other actors. And it could create a finite number of child actors.",
    "start": "745039",
    "end": "750879"
  },
  {
    "text": "So an actor, if you've used Redux or another state management library like that, you know what a store is.",
    "start": "751519",
    "end": "756960"
  },
  {
    "text": "A store is something where it contains its own internal state. And you could send it an event. And it will update its state.",
    "start": "756960",
    "end": "763120"
  },
  {
    "text": "So an Actor is like a store. But that store could create other stores. And that store can also talk to other stores.",
    "start": "763600",
    "end": "770720"
  },
  {
    "text": "And like we'll see soon, the store can actually execute Effects too. So just to bring this into more human terms,",
    "start": "771320",
    "end": "778080"
  },
  {
    "text": "let's say that I'm at a cafe. And I order a cafe. So I'm an Actor. And I'm sending a message to the barista saying,",
    "start": "778080",
    "end": "785079"
  },
  {
    "text": "I would like a coffee, or the cashier. And the cashier would tell the barista, OK,",
    "start": "785320",
    "end": "790799"
  },
  {
    "text": "they want this coffee. The cashier would ask me for euros. I would give them euros, I guess.",
    "start": "790799",
    "end": "796279"
  },
  {
    "text": "And then they would give me a receipt. And then the barista would give the cashier the coffee.",
    "start": "797399",
    "end": "802639"
  },
  {
    "text": "Or they might deliver it directly to me. But either way, this is showing how message passing",
    "start": "802960",
    "end": "808839"
  },
  {
    "text": "happens between Actors. And so that's why I really like the Actor model because it's very understandable from the real world.",
    "start": "809000",
    "end": "815879"
  },
  {
    "text": "It's just people communicating with each other. And in our applications, actors also",
    "start": "816279",
    "end": "821360"
  },
  {
    "text": "communicate with each other too. So again, just like I cannot read your mind,",
    "start": "821399",
    "end": "827199"
  },
  {
    "text": "a cashier cannot really read your mind either. So it's that human to human communication",
    "start": "827759",
    "end": "833919"
  },
  {
    "text": "where it really exemplifies what the actor model is. This is like one of two German phrases I know.",
    "start": "834440",
    "end": "840399"
  },
  {
    "text": "So they would say, here you go. And I would say the only other German phrase I know.",
    "start": "841120",
    "end": "846759"
  },
  {
    "start": "846000",
    "end": "941000"
  },
  {
    "text": "So Actor logic. This is the thing that",
    "start": "848120",
    "end": "853840"
  },
  {
    "text": "expresses how Actors actually operate. So this would be, for example, a barista.",
    "start": "853840",
    "end": "859279"
  },
  {
    "text": "Let's say that a coffee was ordered. They would be making a coffee. But if another coffee was ordered,",
    "start": "859879",
    "end": "865799"
  },
  {
    "text": "you see that there is no transition from the making coffee state with ordered. So they would be like, I'm sorry, I'm making a coffee.",
    "start": "866840",
    "end": "873960"
  },
  {
    "text": "I'm not going to handle that event right now. But actor logic can be represented",
    "start": "874279",
    "end": "879600"
  },
  {
    "text": "in many different ways, which I'll talk about soon. Actor systems are groups of actors.",
    "start": "879600",
    "end": "885399"
  },
  {
    "text": "So basically, an actor, when an actor spawns other actors, then they have references to each other.",
    "start": "885720",
    "end": "892480"
  },
  {
    "text": "And they could talk to each other. So they naturally form this sort of hierarchy. And each actor has its own mailbox, too.",
    "start": "892759",
    "end": "899799"
  },
  {
    "text": "And the mailbox is like a queue. So this is how an actor receives a message.",
    "start": "899799",
    "end": "903759"
  },
  {
    "text": "I'm going to breeze through this a little bit because yeah. So actor mailboxes are, like I said, they're queues.",
    "start": "905200",
    "end": "913679"
  },
  {
    "text": "They receive messages. But one interesting thing about mailboxes is that when you're processing a message,",
    "start": "914159",
    "end": "921159"
  },
  {
    "text": "you have to handle what happens if you get a message while you're trying to process a state.",
    "start": "921159",
    "end": "925959"
  },
  {
    "text": "And so that's why they're represented as queues, because you could process one message at a time.",
    "start": "926519",
    "end": "932519"
  },
  {
    "text": "And so again, this is going a bit into the details. You could definitely talk to me afterwards.",
    "start": "933200",
    "end": "938039"
  },
  {
    "text": "Be happy to talk your ears off about actors and state machines and all of that. So in XState, you could",
    "start": "939000",
    "end": "945240"
  },
  {
    "start": "941000",
    "end": "1116000"
  },
  {
    "text": "actually not even use a state machine if you don't want to. There's many different ways of expressing",
    "start": "945240",
    "end": "951279"
  },
  {
    "text": "Actor logic in XState. One of the ways is by promises. So I have over here to do use Effects,",
    "start": "951360",
    "end": "958000"
  },
  {
    "text": "which I'll talk about soon. But it's very possible to just use Effects",
    "start": "958320",
    "end": "963399"
  },
  {
    "text": "to model the behavior of these Actors. So with XState, you could just",
    "start": "963399",
    "end": "968559"
  },
  {
    "text": "have a simple promise over here. And that is going to create an actor that doesn't really",
    "start": "968559",
    "end": "974720"
  },
  {
    "text": "do anything with events that it receives. But eventually, it's going to give you an output value that you could subscribe to.",
    "start": "974720",
    "end": "981000"
  },
  {
    "text": "Transitions are sort of the same way, except that they could receive events. And so depending on the events, they",
    "start": "981960",
    "end": "987320"
  },
  {
    "text": "change their internal states. So you would have the logic over here. And you would have the initial states that you start with.",
    "start": "987320",
    "end": "994759"
  },
  {
    "text": "So it's pretty much just like your normal reducers. Then there's callback logic, which is really",
    "start": "994799",
    "end": "1000360"
  },
  {
    "text": "the most flexible type. You have two things over here. You have send back and receive.",
    "start": "1000759",
    "end": "1006399"
  },
  {
    "text": "So for example, if we're listening for window resizes, you could send back the resize event.",
    "start": "1007240",
    "end": "1013360"
  },
  {
    "text": "And that sends back to the parent's actor. And you could also receive events from other actors.",
    "start": "1013639",
    "end": "1020320"
  },
  {
    "text": "So for example, if I send an event that says stop listening, it could actually just call remove listener",
    "start": "1020639",
    "end": "1026039"
  },
  {
    "text": "so that it stops receiving those resize events. And of course, we have a",
    "start": "1026240",
    "end": "1031679"
  },
  {
    "text": "cleanup function for that callback. This is probably one of the most flexible Actor types.",
    "start": "1031680",
    "end": "1036519"
  },
  {
    "text": "And it really does show you that you don't need to use a state machine, at least at first, when you're expressing actor logic.",
    "start": "1037119",
    "end": "1043039"
  },
  {
    "text": "So there's also observable logic, really simple. Effect has the concept of Streams.",
    "start": "1044039",
    "end": "1049679"
  },
  {
    "text": "This is based on the TC39 observable proposal. So you could actually use any sort of compatible observable",
    "start": "1050440",
    "end": "1056880"
  },
  {
    "text": "with XState. And of course, there is state machine logic too, like we just talked about.",
    "start": "1057119",
    "end": "1062680"
  },
  {
    "text": "So actors in XState and this is me sort of just if you don't know what XState is,",
    "start": "1063920",
    "end": "1069559"
  },
  {
    "text": "you're going to learn in 30 seconds. So you import your Actor logic that you've created.",
    "start": "1069559",
    "end": "1075599"
  },
  {
    "text": "You create the Actor from the logic. And you optionally give it some input.",
    "start": "1076599",
    "end": "1082358"
  },
  {
    "text": "Then you could actually subscribe to the actor and do whatever you want with those updated snapshot values.",
    "start": "1083000",
    "end": "1088359"
  },
  {
    "text": "And then you start the Actor. So actors are lazy. Just like in Effect, programs are not",
    "start": "1089119",
    "end": "1094599"
  },
  {
    "text": "started immediately by default. And this is by design. You want to control when the execution of that event",
    "start": "1094720",
    "end": "1100839"
  },
  {
    "text": "happens. And then, of course, you could send those actors events. And what's really nice is that all of that logic,",
    "start": "1100960",
    "end": "1108680"
  },
  {
    "text": "whether you represent it as a state machine or something else, they all pretty much have the same interface.",
    "start": "1108680",
    "end": "1115960"
  },
  {
    "start": "1116000",
    "end": "1131000"
  },
  {
    "text": "So I want to mention real quick, ZIO Actors, because ZIO has Actors. I would love to see actors in Effect.",
    "start": "1117559",
    "end": "1123319"
  },
  {
    "text": "So if anyone here is on the Effect team and they're listening, please add actors for me. Thank you.",
    "start": "1123640",
    "end": "1128900"
  },
  {
    "text": "All right. So I wanted to show a quick demo, because you might be thinking, OK, why would I use Actors?",
    "start": "1130960",
    "end": "1138960"
  },
  {
    "start": "1131000",
    "end": "1353000"
  },
  {
    "text": "Why would I use state machines? What exactly is the points of all of this?",
    "start": "1139200",
    "end": "1143559"
  },
  {
    "text": "And one of the reasons that I think that using state machines and Actors are really, really",
    "start": "1145039",
    "end": "1150720"
  },
  {
    "text": "useful is the diagramming, so the visual part of it. So in this example, I have a",
    "start": "1150799",
    "end": "1158278"
  },
  {
    "text": "I'll go to the state machine real quick. And I'll hope that the Wi-Fi works. By the way, this is because Code Sandbox is using",
    "start": "1158640",
    "end": "1164400"
  },
  {
    "text": "an outdated version of TypeScript. It's not my fault. So ignore the red squigglies.",
    "start": "1164400",
    "end": "1168720"
  },
  {
    "text": "But basically, what's going to happen is that a user can insert a card, and so that's going to send an event",
    "start": "1169880",
    "end": "1176079"
  },
  {
    "text": "to a card reader. And so the card reader will say, I read the card, and then I validated the card.",
    "start": "1176240",
    "end": "1182319"
  },
  {
    "text": "And so that's an interesting concept, because it's not just a promise. We're actually waiting on multiple events.",
    "start": "1182319",
    "end": "1190039"
  },
  {
    "text": "So we get that the card was entered and that the card is eventually valid.",
    "start": "1190720",
    "end": "1196400"
  },
  {
    "text": "So if I open this up, so when the card is valid, we're going to go to the selecting states.",
    "start": "1197319",
    "end": "1203039"
  },
  {
    "text": "And so in selecting, this is a simple Cocoa dispenser machine. So you're able to only select one drink, basically,",
    "start": "1203599",
    "end": "1211159"
  },
  {
    "text": "which is Cocoa. And then we're going to be talking to a different actor. And this Actor is the dispenser.",
    "start": "1211160",
    "end": "1217200"
  },
  {
    "text": "So you could think of it as some sort of robotic parts of the machine that actually dispenses the hot cocoa.",
    "start": "1217200",
    "end": "1222960"
  },
  {
    "text": "And so it's going to be dispensing. And it's also going to report its progress.",
    "start": "1223799",
    "end": "1228319"
  },
  {
    "text": "So again, these aren't just simple promises. These are Actors that are communicating multiple events",
    "start": "1229039",
    "end": "1234480"
  },
  {
    "text": "back to the parent machine. And then once that's finished, then, well, we have our hot cocoa.",
    "start": "1234920",
    "end": "1239679"
  },
  {
    "text": "So I'm actually going to reload this. Hopefully the Wi-Fi works. And you'll see that we're actually",
    "start": "1240440",
    "end": "1247640"
  },
  {
    "text": "inspecting that machine live. So that exact same code that we saw over there",
    "start": "1247720",
    "end": "1253039"
  },
  {
    "text": "is being sent over to... this is the stately inspector. And we're visualizing it in real time.",
    "start": "1253160",
    "end": "1258839"
  },
  {
    "text": "So we start in the idle state. And like I said, we go to card inserted. Then selecting, we might have an error.",
    "start": "1258839",
    "end": "1265799"
  },
  {
    "text": "And then it will be ready to dispense dispensing. And then once the dispensing is done, we're finished.",
    "start": "1266240",
    "end": "1272679"
  },
  {
    "text": "And we can go back. And we can make another hot cocoa. So if I go back a screen, if I can.",
    "start": "1272680",
    "end": "1279118"
  },
  {
    "text": "Let me see. Hard to do this with one hand. OK, there we go.",
    "start": "1280519",
    "end": "1285900"
  },
  {
    "text": "So I'm actually going to... I didn't really work on the UI for this. So it's going to be pretty simple. But we insert our card.",
    "start": "1286480",
    "end": "1293319"
  },
  {
    "text": "It's validating the card. Takes a while. And then you can select your drink.",
    "start": "1293319",
    "end": "1297920"
  },
  {
    "text": "So you select a hot cocoa that's ready to dispense. It's reporting back the progress.",
    "start": "1298559",
    "end": "1303160"
  },
  {
    "text": "And then finally, we're finished. So if we go back here, we could actually see",
    "start": "1303680",
    "end": "1310319"
  },
  {
    "text": "and I'll zoom in a little bit that we have generated a sequence diagram of all",
    "start": "1310720",
    "end": "1316039"
  },
  {
    "text": "of those actors communicating with each other, which I think is extremely valuable. And this is really why I want Actors in Effect,",
    "start": "1316039",
    "end": "1323400"
  },
  {
    "text": "so that we have OpenTelemetry. But I really like sequence diagrams, too. So we see that the card was entered.",
    "start": "1323400",
    "end": "1330920"
  },
  {
    "text": "The card was read. And we got another event saying the card was valid. So then the user selects hot cocoa.",
    "start": "1331319",
    "end": "1337079"
  },
  {
    "text": "We dispense it. The dispenser reports the progress back to us. And then eventually, the dispenser says that we're done.",
    "start": "1337559",
    "end": "1345039"
  },
  {
    "text": "And then after one second, the cocoa state machine transitions itself back to the idle state.",
    "start": "1345480",
    "end": "1351240"
  },
  {
    "start": "1353000",
    "end": "1609000"
  },
  {
    "text": "So you could actually use stately.ai slash inspect. It's an open source package. And you don't even need to use XState for it, either.",
    "start": "1353920",
    "end": "1361559"
  },
  {
    "text": "You could just send events directly if you really want to generate those sequence diagrams from your actual application code,",
    "start": "1361559",
    "end": "1368960"
  },
  {
    "text": "regardless of what you're using. Now, I talked about the different types of Effects",
    "start": "1369440",
    "end": "1375440"
  },
  {
    "text": "in XState and where they could live. So what can we actually use for these Effects?",
    "start": "1375759",
    "end": "1381279"
  },
  {
    "text": "Well, we could use Effect. And this has been something that I've been really excited about,",
    "start": "1381599",
    "end": "1387639"
  },
  {
    "text": "because for the most part, XState was really, really useful for modeling the state machine,",
    "start": "1387720",
    "end": "1394039"
  },
  {
    "text": "the state chart, your overall flow. But in terms of the actual Effects, such as actors or actions, it really left it up to you.",
    "start": "1394039",
    "end": "1402039"
  },
  {
    "text": "It said, you know what? You could do whatever you want in there. Just know that this needs to be sequestered in an Effect,",
    "start": "1402599",
    "end": "1411440"
  },
  {
    "text": "or like an action or an Actor. And it's not something that XState is going to directly handle for you.",
    "start": "1411440",
    "end": "1416680"
  },
  {
    "text": "And so that's really where Effects comes in. So I made a little example over here.",
    "start": "1416960",
    "end": "1424519"
  },
  {
    "text": "I don't have a demo to show you. But I promise you that this does work. Basically, I converted the video player example,",
    "start": "1424519",
    "end": "1430400"
  },
  {
    "text": "where we're going from the small screen to the big screen when you click the video. And I'm using Effects for the actions here.",
    "start": "1430400",
    "end": "1438359"
  },
  {
    "text": "And so this is what's really nice about the setup function, too, is that you could define those Effects up",
    "start": "1438759",
    "end": "1444599"
  },
  {
    "text": "front inside of here. So I'm using effect at a very basic level over here.",
    "start": "1444759",
    "end": "1449440"
  },
  {
    "text": "I'm just using Effect.sync for the actions, because actions, these fire and forget actions,",
    "start": "1450119",
    "end": "1455880"
  },
  {
    "text": "are really meant to be synchronous. So for play video, I'm just getting the video ref,",
    "start": "1456119",
    "end": "1461920"
  },
  {
    "text": "and I'm playing it. And same thing for pause video. I'm getting the video ref, and I'm pausing it.",
    "start": "1462240",
    "end": "1467079"
  },
  {
    "text": "Now, actors are a little bit of a different story. So for example, if I wanted to load the video,",
    "start": "1467920",
    "end": "1473599"
  },
  {
    "text": "I might run this as Effect.runPromise. And for listening if the video ended,",
    "start": "1474039",
    "end": "1480160"
  },
  {
    "text": "this is something where you could incrementally adopt Effect and then really get into the deeper, more advanced parts",
    "start": "1480920",
    "end": "1489400"
  },
  {
    "text": "of Effects, such as Queues and Streams and things like that. But I was lazy, so I didn't do that.",
    "start": "1489400",
    "end": "1495079"
  },
  {
    "text": "So I'm just setting up event handlers over here. And for example, whenever the video ends,",
    "start": "1496160",
    "end": "1501039"
  },
  {
    "text": "I'm using Effects to actually execute this side Effect and piping it through Effect.runSync.",
    "start": "1501480",
    "end": "1507680"
  },
  {
    "text": "And same thing with key.escape. So I'm sure that many of you could see this and say,",
    "start": "1508240",
    "end": "1513559"
  },
  {
    "text": "I have an idea of how to make this better in Effect. If you do, please see me. But the main point is that you could incrementally adopt",
    "start": "1513960",
    "end": "1522559"
  },
  {
    "text": "Effect pretty much anywhere, especially in XState. And this is something that I'm super excited about",
    "start": "1522720",
    "end": "1529720"
  },
  {
    "text": "and something I want to experiment with more. So what's really interesting about this,",
    "start": "1529720",
    "end": "1535559"
  },
  {
    "text": "though, is that even though we are using Effect, the whole philosophy behind XState",
    "start": "1535680",
    "end": "1541960"
  },
  {
    "text": "is that this is all declarative. It doesn't really matter what you're using for your action",
    "start": "1542440",
    "end": "1547559"
  },
  {
    "text": "or your actor or guard, et cetera, implementation, because it's all abstracted away anyway.",
    "start": "1547799",
    "end": "1554000"
  },
  {
    "text": "So you see, for example, here, we know that we're invoking this load video Actor.",
    "start": "1554559",
    "end": "1559359"
  },
  {
    "text": "And it doesn't matter where it comes from. This is just a declarative representation of, hey, we're doing this.",
    "start": "1560240",
    "end": "1565960"
  },
  {
    "text": "We're not exposing any implementation details. And so same thing with the actions. So if I'm in the full screen, I know that on entry,",
    "start": "1566440",
    "end": "1573960"
  },
  {
    "text": "I'm going to play the video. And I'm going to pass the video ref. And when I exit, we're going to pause the video.",
    "start": "1573960",
    "end": "1580440"
  },
  {
    "text": "And we're also passing the video ref there. If you want to learn more about using Effect in XState,",
    "start": "1581079",
    "end": "1586920"
  },
  {
    "text": "I would also really highly recommend following Sandro Maglione, which is somewhere here. Where are you?",
    "start": "1586920",
    "end": "1592420"
  },
  {
    "text": "There you are. He really makes excellent tutorials. So he also made an excellent tutorial",
    "start": "1593039",
    "end": "1598400"
  },
  {
    "text": "on getting started with XState and Effect in an audio player, not a video player, so a little bit more complex.",
    "start": "1598400",
    "end": "1603640"
  },
  {
    "text": "But yeah, I really recommend reading that article and following him on social media.",
    "start": "1604519",
    "end": "1608400"
  },
  {
    "start": "1609000",
    "end": "1669000"
  },
  {
    "text": "So in summary for this, the state machine expresses the different states",
    "start": "1609960",
    "end": "1615680"
  },
  {
    "text": "and transitions you can be in. And it really leaves it up to you for implementing those Effects.",
    "start": "1615680",
    "end": "1621559"
  },
  {
    "text": "And so that's what we just saw. What we didn't see, and I would leave as an exercise to the reader, is how Effects can actually execute",
    "start": "1622240",
    "end": "1630480"
  },
  {
    "text": "that state machine. Because XState doesn't really dictate how you run the state machine or how you run any actor",
    "start": "1630480",
    "end": "1638319"
  },
  {
    "text": "that you create in XState either. So it's up to you to say, I want to run this through Effect",
    "start": "1638319",
    "end": "1643758"
  },
  {
    "text": "and get all the benefits, such as observability, retries, et cetera.",
    "start": "1644160",
    "end": "1648159"
  },
  {
    "text": "And so this is why I think of Effects like a super powered car and XState like the roads.",
    "start": "1649599",
    "end": "1658039"
  },
  {
    "text": "And I know some of you might think, where we're going, we don't need roads. So of course, you could use XState without Effect.",
    "start": "1658559",
    "end": "1664518"
  },
  {
    "text": "You could use Effect without XState. But using them together is a really powerful combination.",
    "start": "1664799",
    "end": "1669720"
  },
  {
    "start": "1669000",
    "end": "1780000"
  },
  {
    "text": "And also, I really think that what we're trying to do here, the ultimate goal is not just writing TypeScript",
    "start": "1671160",
    "end": "1679359"
  },
  {
    "text": "to impress other developers, saying, look at all these cool lines of Effect that somehow do something.",
    "start": "1679359",
    "end": "1685279"
  },
  {
    "text": "I worked with RxJS for a while. And I remember people just coming up with seven concise lines of operators.",
    "start": "1686559",
    "end": "1693400"
  },
  {
    "text": "But I was like, I have no idea what this does. There's like tap and with latest from, blah, blah, blah,",
    "start": "1693720",
    "end": "1699160"
  },
  {
    "text": "and fork map. I have no idea. But it's like, it worked. I have no idea how it works, but it worked.",
    "start": "1699160",
    "end": "1704880"
  },
  {
    "text": "So let's not do that with Effects. And also, let's not do that with XState. I really believe that when we're developing software,",
    "start": "1705319",
    "end": "1713559"
  },
  {
    "text": "our ultimate goal in developing the logic should be to make it understandable not only",
    "start": "1714079",
    "end": "1719200"
  },
  {
    "text": "to other developers, but also to other people who need to be involved in the decision making",
    "start": "1719200",
    "end": "1725440"
  },
  {
    "text": "process and the understanding of the code. So if you're coding a workflow, whether it's on the back end",
    "start": "1725599",
    "end": "1731400"
  },
  {
    "text": "or if you're coding a multi-step form on the front end, it's super important to say, this is the flow.",
    "start": "1731640",
    "end": "1737839"
  },
  {
    "text": "Here's all of the steps. Here's everything that could happen at each step. And here's all of the paths that a user could take.",
    "start": "1738240",
    "end": "1744960"
  },
  {
    "text": "And same thing with effects. When you're modeling Effects with Effect, you should be able to declaratively say,",
    "start": "1745599",
    "end": "1751920"
  },
  {
    "text": "this is going to retry. This is how much concurrency we have. These are the Effects that are going to happen without forcing",
    "start": "1752480",
    "end": "1757960"
  },
  {
    "text": "someone to read hundreds of lines of code, like Johannes showed earlier. So that's why I think that combination is really, really",
    "start": "1758039",
    "end": "1765679"
  },
  {
    "text": "powerful. And using visual representations, whether it's diagrams generated by stately",
    "start": "1765799",
    "end": "1772159"
  },
  {
    "text": "or Telemetry traces generated by OpenTelemetry using Effect,",
    "start": "1772599",
    "end": "1776960"
  },
  {
    "text": "extremely helpful. So just think beyond the code. And so that's why I think that XState and Effect",
    "start": "1777759",
    "end": "1784319"
  },
  {
    "start": "1780000",
    "end": "1804000"
  },
  {
    "text": "are a great combination using XState for that stateful thinking, so that higher level of abstraction,",
    "start": "1784519",
    "end": "1790119"
  },
  {
    "text": "thinking through all of your user flows, and Effect for thinking about everything that happens within those Effectful parts",
    "start": "1790799",
    "end": "1798160"
  },
  {
    "text": "of your application. So with that, thank you very much. (audience applauds)",
    "start": "1798160",
    "end": "1803518"
  }
]