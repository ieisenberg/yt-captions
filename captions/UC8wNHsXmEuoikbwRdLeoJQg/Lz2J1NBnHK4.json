[
  {
    "start": "0",
    "end": "322000"
  },
  {
    "text": "[Applause] all right good morning everyone uh can we all hear me okay yes all right well",
    "start": "710",
    "end": "8519"
  },
  {
    "text": "I'm really excited to be here um I hope you're really excited to be here uh I think we're going to learn a lot today",
    "start": "8519",
    "end": "14639"
  },
  {
    "text": "and so uh let's just get straight into things so I am Ethan nicer uh you've probably seen a couple of my YouTube",
    "start": "14639",
    "end": "20160"
  },
  {
    "text": "videos before um I've made some about effect I made some about this uh stack called the best stack I made this mpm",
    "start": "20160",
    "end": "26599"
  },
  {
    "text": "package called type safe uh URL and fulltime I actually a high school student so missing class right now but I",
    "start": "26599",
    "end": "33879"
  },
  {
    "text": "think I'd much rather be here so uh I first found out about effect um around a",
    "start": "33879",
    "end": "39840"
  },
  {
    "text": "year ago and I think I was I was just really blown away right from the start um and the reason for that is I think",
    "start": "39840",
    "end": "47120"
  },
  {
    "text": "the big thing to understand about effect is that it makes our programs easier to understand so when you go to the website",
    "start": "47120",
    "end": "52840"
  },
  {
    "text": "right on the homepage you'll see all these words you'll see like safer more composable more observable and those are",
    "start": "52840",
    "end": "58120"
  },
  {
    "text": "all really really true um but I think again the the core of it is that effect is a framework that makes our programs",
    "start": "58120",
    "end": "63719"
  },
  {
    "text": "easier to understand so uh today what are we going to do um we're going to start with a",
    "start": "63719",
    "end": "70240"
  },
  {
    "text": "introduction to effects Core Concepts so I know some of you may have worked with effect before some of us are beginners",
    "start": "70240",
    "end": "77119"
  },
  {
    "text": "and so we're going to start out all the way from the beginning and go over um from the very first kind of uh Core",
    "start": "77119",
    "end": "82880"
  },
  {
    "text": "Concepts and kind of build our way up and so then we're going to move into some real world examples we're going to",
    "start": "82880",
    "end": "88600"
  },
  {
    "text": "rewrite uh two different applications that are not in effect and we're going to slowly kind of incrementally rewrite",
    "start": "88600",
    "end": "94000"
  },
  {
    "text": "them to effect and then we're going to end off the day with a peak into advanced effect and so these are just",
    "start": "94000",
    "end": "99560"
  },
  {
    "text": "kind of some more advanced topics that you might be a little scared to try out on your own and so uh we're just going",
    "start": "99560",
    "end": "104840"
  },
  {
    "text": "to kind of uh show you a little bit of of that and uh the one thing I want to",
    "start": "104840",
    "end": "110479"
  },
  {
    "text": "stress today is that uh there's a lot of room for elasticity in the schedule so if the kind of first section takes",
    "start": "110479",
    "end": "117439"
  },
  {
    "text": "longer than the kind of first 90 minutes we have blocked out out that's totally okay if we don't end up getting to",
    "start": "117439",
    "end": "123320"
  },
  {
    "text": "everything uh that's totally okay I promise you will learn uh a lot and so um if we run out of stuff to talk about",
    "start": "123320",
    "end": "129879"
  },
  {
    "text": "there is plenty of stuff to talk about but in the much more kind of likely scenario where uh things are going a little bit slower uh it's totally fine",
    "start": "129879",
    "end": "135879"
  },
  {
    "text": "if we don't get to everything all right uh so what do you need for today so there's a git repo um it's on my GitHub",
    "start": "135879",
    "end": "143440"
  },
  {
    "text": "and so uh this is not actually required you could just pay attention but if you want to follow along there's a lot of",
    "start": "143440",
    "end": "148480"
  },
  {
    "text": "exercises we're going to do obviously the um apps we're going to rewrite you can follow along on your own and so if",
    "start": "148480",
    "end": "153800"
  },
  {
    "text": "you want to run it locally uh you can clone it but if you want to open it in a GitHub code space that's also um a",
    "start": "153800",
    "end": "160040"
  },
  {
    "text": "really easy option and then the other thing you're going to need is just some way to run typescript uh so I'm going to",
    "start": "160040",
    "end": "166040"
  },
  {
    "text": "be using bun just because um it's a lot faster to run files but if you are using node that's totally okay um if you have",
    "start": "166040",
    "end": "173440"
  },
  {
    "text": "uh TS node or TSX um both of those are going to work just fine just you need some way uh to run types script um and",
    "start": "173440",
    "end": "180760"
  },
  {
    "text": "then if you are opening in a GitHub code space I made this little start.sh file and all this does is install bun and",
    "start": "180760",
    "end": "186959"
  },
  {
    "text": "runs bun install so it's very very simple um if you are having trouble uh kind of getting the repo set up um",
    "start": "186959",
    "end": "193440"
  },
  {
    "text": "please let me know and so uh while you're doing that I'm just going to kind of keep talking uh while you set that up",
    "start": "193440",
    "end": "199599"
  },
  {
    "text": "uh so the one thing that I also want to really stress today is to do your best to not feel overwhelmed I know some of you again have worked with effect before",
    "start": "199599",
    "end": "205879"
  },
  {
    "text": "some of us are brand new effect can be really overwhelming uh there's a lot going on I don't know how many of you",
    "start": "205879",
    "end": "211560"
  },
  {
    "text": "have looked at the API reference page before there's like 30 modules you go into each module there's like 200",
    "start": "211560",
    "end": "217159"
  },
  {
    "text": "functions and uh that can be really overwhelming and so uh what I want to stress is that the learning curve is",
    "start": "217159",
    "end": "223120"
  },
  {
    "text": "actually uh quite gentle um there's a lot of modules and functions that you could go years and basically never touch",
    "start": "223120",
    "end": "229319"
  },
  {
    "text": "and so today we're going to start off with kind of the most common um and most",
    "start": "229319",
    "end": "234599"
  },
  {
    "text": "basic uh things to understand and so um here's a graph I made and uh basically",
    "start": "234599",
    "end": "240400"
  },
  {
    "text": "on the top we have or on the y- axis we have usage frequency and on the x-axis we have complexity and so this is kind",
    "start": "240400",
    "end": "245560"
  },
  {
    "text": "of how a lot of the um functions and modules in effect are are kind of uh",
    "start": "245560",
    "end": "251239"
  },
  {
    "text": "used right where the most common things are used all the time and as you kind of get more and more obscure there's going",
    "start": "251239",
    "end": "257239"
  },
  {
    "text": "to be a lot of functions that are are very Advanced very low-level that you might never use and so uh we're going to",
    "start": "257239",
    "end": "262560"
  },
  {
    "text": "spend most of our time today if I pull up here we're going to spend most of our time today like here in this area and",
    "start": "262560",
    "end": "268759"
  },
  {
    "text": "then the last section we're going to look a little bit here um and so again don't uh don't feel overwhelmed if you",
    "start": "268759",
    "end": "275960"
  },
  {
    "text": "kind of go to the API reference page and you see some of this stuff and you're like wow that that seems like a lot right and then the other thing is uh",
    "start": "275960",
    "end": "283199"
  },
  {
    "text": "interactivity today I really don't want to be up here talking for five and a half hours so please please please ask questions um I've planned in some spots",
    "start": "283199",
    "end": "290320"
  },
  {
    "text": "we're going to have uh kind of review problems and exercises and I'm going to be asking for questions a lot but I want",
    "start": "290320",
    "end": "295800"
  },
  {
    "text": "to make sure everyone kind of feels comfortable Pro prompting uh interaction as well and then we also have um some",
    "start": "295800",
    "end": "301280"
  },
  {
    "text": "other kind of effect people in the room I know Tim is here some other people might come in and out and so if we have like some maybe some more advanced",
    "start": "301280",
    "end": "306880"
  },
  {
    "text": "questions or questions that um kind of go off topic uh they can be there to to help out and answer those but I would",
    "start": "306880",
    "end": "312680"
  },
  {
    "text": "say most of the stuff I can I can definitely handle um and with that said",
    "start": "312680",
    "end": "317800"
  },
  {
    "text": "uh is everyone kind of good setting up the repo no one's having trouble all right uh so the first thing that we're",
    "start": "317800",
    "end": "324160"
  },
  {
    "start": "322000",
    "end": "627000"
  },
  {
    "text": "going to talk about is what is an effect right this is pretty core concept and so",
    "start": "324160",
    "end": "330160"
  },
  {
    "text": "uh what is an effect right there's kind of this this formal definition so something brought about by a cause or an",
    "start": "330160",
    "end": "336639"
  },
  {
    "text": "agent um right so we have cause and effect and then you know we're we're programmers right we have these things",
    "start": "336639",
    "end": "342240"
  },
  {
    "text": "called side effects um our programs kind of have effects on the outside world uh",
    "start": "342240",
    "end": "347319"
  },
  {
    "text": "we know that kind of you know some functional language try to like capture side effects how um how do we uh",
    "start": "347319",
    "end": "352720"
  },
  {
    "text": "structure them in our programs and then of course in effect we have this thing called the effect type and so the effect",
    "start": "352720",
    "end": "358600"
  },
  {
    "text": "type is a thing in effect um that is really the core of uh the kind of entire",
    "start": "358600",
    "end": "364039"
  },
  {
    "text": "effect framework and so if you go to the website uh the effect uh it says an effect is a description of a program",
    "start": "364039",
    "end": "371000"
  },
  {
    "text": "that is lazy and immutable okay so the kind of three words that stand out to me there are program lazy and immutable so",
    "start": "371000",
    "end": "380720"
  },
  {
    "text": "what is a program well I would say a program is kind of a series of steps right and so maybe we could say uh a",
    "start": "380720",
    "end": "387400"
  },
  {
    "text": "short JavaScript script right like I would describe this as a a very basic program and uh we can run this program",
    "start": "387400",
    "end": "396240"
  },
  {
    "text": "ah of course um I forgot to mention so in the uh GitHub repo um there's a read",
    "start": "396240",
    "end": "403120"
  },
  {
    "text": "me you might have checked it out the the main thing uh in the repo here is there",
    "start": "403120",
    "end": "408280"
  },
  {
    "text": "are scripts to run each file so um they",
    "start": "408280",
    "end": "413720"
  },
  {
    "text": "the way the repo is organized is there's a folder for each of the parts and then within each parts there's some folders",
    "start": "413720",
    "end": "419879"
  },
  {
    "text": "there some exercises there some Snippets in the middle two parts there's uh a project and a breakpoints folder um and",
    "start": "419879",
    "end": "427400"
  },
  {
    "text": "to run each file uh in package.json there's um a bunch of scripts I've laid out and so if you are not using bun uh",
    "start": "427400",
    "end": "434720"
  },
  {
    "text": "you can just find and replace uh bun run with like uh npx TSX if you're using TSX",
    "start": "434720",
    "end": "442599"
  },
  {
    "text": "um and so the the pattern is basically the number of the part the first letter of the folder and then the number of the",
    "start": "442599",
    "end": "449560"
  },
  {
    "text": "file so I'm going about I'm about to run this first kind of one what is a program. JS file and so to run that I'd",
    "start": "449560",
    "end": "455919"
  },
  {
    "text": "run one S1 and so that's going to be the pattern for most of the files so you could obviously run it just by typing",
    "start": "455919",
    "end": "462520"
  },
  {
    "text": "out the full path but some of the paths uh can get a bit long and so uh when we run this",
    "start": "462520",
    "end": "468759"
  },
  {
    "text": "obviously um we kind of get the expected output and so one of the other things",
    "start": "468759",
    "end": "473840"
  },
  {
    "text": "about uh this program right is it's kind of inherently lazy right like there's",
    "start": "473840",
    "end": "479360"
  },
  {
    "text": "nothing that happens on our computer until we kind of pass this program to bun or node and then with even within",
    "start": "479360",
    "end": "485680"
  },
  {
    "text": "our program right like if we throw an error halfway through and we run it again the final console log never goes",
    "start": "485680",
    "end": "492120"
  },
  {
    "text": "off and so that's where we kind of start get it get we start to get into this uh second aspect of laziness where we delay",
    "start": "492120",
    "end": "499560"
  },
  {
    "text": "work until it's needed right so in this script uh we don't kind of our computer",
    "start": "499560",
    "end": "506039"
  },
  {
    "text": "doesn't calculate uh this kind of second square root it doesn't do this law and so the final thing uh that I",
    "start": "506039",
    "end": "512680"
  },
  {
    "text": "mentioned uh is immutability right and so um scripts are kind of inherently",
    "start": "512680",
    "end": "519279"
  },
  {
    "text": "immutable right like when we like we can mutate our script by editing it but after we give it to node after we give",
    "start": "519279",
    "end": "524800"
  },
  {
    "text": "it to bun um our source code is not being mutated in real time right so that's kind of those three concepts",
    "start": "524800",
    "end": "532720"
  },
  {
    "text": "of uh immutability laziness and a program um now obviously uh We've looked",
    "start": "532720",
    "end": "541040"
  },
  {
    "text": "at like a JavaScript script but um the effect has this an effect has all three",
    "start": "541040",
    "end": "547720"
  },
  {
    "text": "of these these properties but an effect is an inmemory type right so it's something inside JavaScript so um what",
    "start": "547720",
    "end": "554760"
  },
  {
    "text": "is something that is is not in effect but is also kind of inside JavaScript that has all three of these properties",
    "start": "554760",
    "end": "560200"
  },
  {
    "text": "so a program lazy and immutable",
    "start": "560200",
    "end": "565399"
  },
  {
    "text": "anyone um okay so uh I would say a a function right so a function is",
    "start": "565440",
    "end": "571440"
  },
  {
    "text": "something that exists within JavaScript and a function is it's a description of",
    "start": "571440",
    "end": "576519"
  },
  {
    "text": "a program um right like so we have this function Fu and this function kind of describes uh some Behavior so it's a",
    "start": "576519",
    "end": "582920"
  },
  {
    "text": "description of a program it's also uh lazy because um if we run uh this script",
    "start": "582920",
    "end": "589800"
  },
  {
    "text": "right nothing happens even though we've declared the function right functions are lazy until we call them right only",
    "start": "589800",
    "end": "595800"
  },
  {
    "text": "when we call a function that's when uh we're kind of executing that behavior we've described and then finally uh we",
    "start": "595800",
    "end": "603120"
  },
  {
    "text": "have mutability right like we can't mutate what this function does after we've declared it we can reassign that",
    "start": "603120",
    "end": "608880"
  },
  {
    "text": "variable name but there's really no way to mutate um the body of a",
    "start": "608880",
    "end": "614200"
  },
  {
    "text": "function and so uh that's where um effects come in right effects are not",
    "start": "614200",
    "end": "619880"
  },
  {
    "text": "functions but they kind of have all three of these properties but they build on top of what functions are able to",
    "start": "619880",
    "end": "625640"
  },
  {
    "text": "offer so now we're going to move on to kind of what a effects are able",
    "start": "625640",
    "end": "632079"
  },
  {
    "start": "627000",
    "end": "1161000"
  },
  {
    "text": "to so now we're going to move on to what effects kind of offer on on top of functions right like um obviously we use",
    "start": "637880",
    "end": "644399"
  },
  {
    "text": "functions all the time what what can effects kind of bring us that function St and so the first uh is this kind of",
    "start": "644399",
    "end": "651240"
  },
  {
    "text": "type right and this describes basically most functions we have some type of arguments and some return type and if",
    "start": "651240",
    "end": "657279"
  },
  {
    "text": "you've watched some of my videos before you know that um the problem with this function is it doesn't really prescribe an error type within it right and so a",
    "start": "657279",
    "end": "664240"
  },
  {
    "text": "lot of our Behavior within our programs can error and we kind of want to encode that error in the types of our programs",
    "start": "664240",
    "end": "670680"
  },
  {
    "text": "but by default obviously uh with try catch when we throw something we don't really know uh what error kind of is",
    "start": "670680",
    "end": "677320"
  },
  {
    "text": "getting thrown and so we can create uh safer functions that return uh unions of",
    "start": "677320",
    "end": "683320"
  },
  {
    "text": "either um whatever type they're uh returning or some kind of error um but",
    "start": "683320",
    "end": "689160"
  },
  {
    "text": "still some problems with this and so the first problem with this is that uh it can become kind of hard to discriminate",
    "start": "689160",
    "end": "695600"
  },
  {
    "text": "the error so uh in this first example um we use instance of to discriminate the",
    "start": "695600",
    "end": "701399"
  },
  {
    "text": "error in the second example we use uh kind of strict equals um and so obviously another kind of solution that",
    "start": "701399",
    "end": "708399"
  },
  {
    "text": "you can use instead is tagged errors um but even then uh we kind of get into",
    "start": "708399",
    "end": "713600"
  },
  {
    "text": "this next problem of composing functions that error and so this is a pattern you'll see a lot in code uh that kind of",
    "start": "713600",
    "end": "720160"
  },
  {
    "text": "has these uh Union error types where we have an inner function that might error and an outer function that also might",
    "start": "720160",
    "end": "726480"
  },
  {
    "text": "error and we want to kind of only operate on the value if it's not an error and otherwise kind of continue",
    "start": "726480",
    "end": "732639"
  },
  {
    "text": "that error and so in this code we get the result and then we have to manually check if it's an error and then if so we",
    "start": "732639",
    "end": "738959"
  },
  {
    "text": "return the error and otherwise we can work on the result and so uh this is kind of a limitation of um functions",
    "start": "738959",
    "end": "746880"
  },
  {
    "text": "that can return a union because you have to kind of manually check and so this is",
    "start": "746880",
    "end": "752160"
  },
  {
    "text": "something that uh right we have to we are forced to handle errors at every Point even if we uh don't necessarily",
    "start": "752160",
    "end": "759079"
  },
  {
    "text": "care about the error and so effects are different so the first way effects are different are they have a a error type",
    "start": "759079",
    "end": "766000"
  },
  {
    "text": "parameter so an effect right here's uh kind of the what the effect type looks like and the effect has uh two type",
    "start": "766000",
    "end": "773040"
  },
  {
    "text": "parameters so we have a value and an error and the error is by default never",
    "start": "773040",
    "end": "778240"
  },
  {
    "text": "and what that means is is that that effect can never error and so uh this first example we",
    "start": "778240",
    "end": "783680"
  },
  {
    "text": "have Fu and Foo is an effect never or number never which is the same as an",
    "start": "783680",
    "end": "789199"
  },
  {
    "text": "effect number because again the second type parameter is by default never and so this describes an effect that can",
    "start": "789199",
    "end": "794600"
  },
  {
    "text": "either succeed with a uh a number and it will never fail there's no possible way for it to fail and uh this next example",
    "start": "794600",
    "end": "803279"
  },
  {
    "text": "this bar is an effect that may succeed with a number and otherwise it may fail",
    "start": "803279",
    "end": "808360"
  },
  {
    "text": "with an error type like the error class and so what this does is um and we",
    "start": "808360",
    "end": "814399"
  },
  {
    "text": "can kind of we'll go through how you kind of build on top of this but by um having errors as kind of first class uh",
    "start": "814399",
    "end": "822279"
  },
  {
    "text": "citizens right we are encoding the types of our errors all throughout our programs right so we can describe",
    "start": "822279",
    "end": "828240"
  },
  {
    "text": "effects that have errors and what types those errors actually are and then the kind of error composition problem I",
    "start": "828240",
    "end": "834440"
  },
  {
    "text": "talked about effects have a really cool way of solving that which we'll get to in a bit",
    "start": "834440",
    "end": "839920"
  },
  {
    "text": "so uh and for the the people coming in um late uh I'm glad you're here the one",
    "start": "839920",
    "end": "845720"
  },
  {
    "text": "thing uh I want to make sure that you are um able to uh be with us is there is",
    "start": "845720",
    "end": "852639"
  },
  {
    "text": "a a git repo so it's on my GitHub it's called effect workshop and so you can uh",
    "start": "852639",
    "end": "858480"
  },
  {
    "text": "clone it and um all you need is some way to run typescripts so either uh node",
    "start": "858480",
    "end": "864320"
  },
  {
    "text": "with TSX or bun um whatever works I'm going to be using bun and if you that you're pretty much good to",
    "start": "864320",
    "end": "872040"
  },
  {
    "text": "go and so the next thing that we kind of gain on top of functions when using effects is uh dependencies so here's an",
    "start": "875519",
    "end": "883759"
  },
  {
    "text": "example where we have a function that kind of has this implicit dependency on this database import",
    "start": "883759",
    "end": "890120"
  },
  {
    "text": "and uh it would be ideal if we could uh kind of provide that dependency uh",
    "start": "890120",
    "end": "896079"
  },
  {
    "text": "explicitly and so that would look like um kind of pass passing it in as a function parameter and the benefits we",
    "start": "896079",
    "end": "901680"
  },
  {
    "text": "get from this are um we can kind of mock the service or the kind of database much",
    "start": "901680",
    "end": "908040"
  },
  {
    "text": "easier right so if we're testing this function we can provide either um a real database or we can provide an in-memory",
    "start": "908040",
    "end": "914560"
  },
  {
    "text": "database it really doesn't matter as long as it conforms to this uh database interface that we provide um and so this",
    "start": "914560",
    "end": "922279"
  },
  {
    "text": "is something that uh is kind of uh beneficial in our code and the problem",
    "start": "922279",
    "end": "928240"
  },
  {
    "text": "is a lot of the times it's really kind of obtuse to passing in by function parameter like this and so a lot of",
    "start": "928240",
    "end": "934680"
  },
  {
    "text": "times we just end up importing it and the reason for that is while this example is pretty simple a lot a lot of",
    "start": "934680",
    "end": "940680"
  },
  {
    "text": "the time our code ends up looking like this right we have a database and we have a logger and we have Telemetry and we have a number of other things that we",
    "start": "940680",
    "end": "947240"
  },
  {
    "text": "need uh that we're all passing into our functions and this can get um kind of a lot right like we now have more",
    "start": "947240",
    "end": "952360"
  },
  {
    "text": "parameters that are are really not about the logic of a function than the actual um what the function is doing",
    "start": "952360",
    "end": "959399"
  },
  {
    "text": "and so this leads into um the third type parameter that an effect has so it has the value type parameter it has the",
    "start": "959399",
    "end": "965560"
  },
  {
    "text": "error type parameter and it has this third requirements type parameter and what the requirements type parameter",
    "start": "965560",
    "end": "970959"
  },
  {
    "text": "describes is the types of the services that effects requires so as an example",
    "start": "970959",
    "end": "976920"
  },
  {
    "text": "this function requires a database and a logger and a Telemetry and so here we have an effect and this effect is called",
    "start": "976920",
    "end": "982759"
  },
  {
    "text": "G user and this get user is an effect that will succeed with a user value it",
    "start": "982759",
    "end": "988000"
  },
  {
    "text": "will fail with a not found error value and it requires a database and so what this is",
    "start": "988000",
    "end": "993959"
  },
  {
    "text": "saying is that this effect uses a database of this database type somewhere within it but it doesn't yet have an",
    "start": "993959",
    "end": "1000720"
  },
  {
    "text": "implementation and so then uh the reason this is important is because on a type level we can say that there we shouldn't",
    "start": "1000720",
    "end": "1007480"
  },
  {
    "text": "be able to kind of execute any effects where this third type parameter is not never right because if it's not never",
    "start": "1007480",
    "end": "1013160"
  },
  {
    "text": "it's saying well we depend on some some type some service that we don't have and",
    "start": "1013160",
    "end": "1018720"
  },
  {
    "text": "so in that way we can track these dependencies throughout our program and so uh this next example we have a update",
    "start": "1018720",
    "end": "1025839"
  },
  {
    "text": "email effect and so this is going to um similarly kind of return a user or it's",
    "start": "1025839",
    "end": "1031038"
  },
  {
    "text": "going to have a not found error but this run requires multiple services so it's going to require either uh or not either",
    "start": "1031039",
    "end": "1037240"
  },
  {
    "text": "so um the one kind of thing with Services is they're encoded as a union uh but that's uh and the reason for that",
    "start": "1037240",
    "end": "1043880"
  },
  {
    "text": "is it's a bit complex but you um need all of them so this is saying that this effect requires a database and a logger",
    "start": "1043880",
    "end": "1050760"
  },
  {
    "text": "and Telemetry and so only when the effect has a uh third type parameter",
    "start": "1050760",
    "end": "1055799"
  },
  {
    "text": "this requirement type parameter of never is when it's safe to execute and so we can see that where this is just some",
    "start": "1055799",
    "end": "1061640"
  },
  {
    "text": "pseudo code but we have this provide dependencies function and so if we provide dependencies to this get user",
    "start": "1061640",
    "end": "1068280"
  },
  {
    "text": "effect up here we can see that now um we can provide the database to that effect",
    "start": "1068280",
    "end": "1074360"
  },
  {
    "text": "and now the third type parameter is never and also we can provide a kind of mock DB right as long as it also",
    "start": "1074360",
    "end": "1080520"
  },
  {
    "text": "conforms to this database service um both of these are going to end up as never uh the next thing that effects",
    "start": "1080520",
    "end": "1087799"
  },
  {
    "text": "kind of provide to us over functions is they abstract away sync versus async so",
    "start": "1087799",
    "end": "1094000"
  },
  {
    "text": "obviously with functions we have asynchronous functions we have synchronous functions and you kind of run into this function coloring problem",
    "start": "1094000",
    "end": "1099880"
  },
  {
    "text": "as it's called where you can only call asynchronous functions from asynchronous functions and uh as soon as you have one",
    "start": "1099880",
    "end": "1106080"
  },
  {
    "text": "synchronous function everything kind of becomes async and so effects abstract this away so there is no async effect",
    "start": "1106080",
    "end": "1111880"
  },
  {
    "text": "there is no sync effect there is just the effect um and you might be wondering kind of how effect handles that",
    "start": "1111880",
    "end": "1117080"
  },
  {
    "text": "difference because it is an important difference um and we will talk about that uh in a bit but just for now you",
    "start": "1117080",
    "end": "1122360"
  },
  {
    "text": "can understand that there is no sync effect there is no async effect there is just the effect and then finally we have",
    "start": "1122360",
    "end": "1128280"
  },
  {
    "text": "execution so um as I kind of showed earlier uh functions are just objects right they're just values and so if we",
    "start": "1128280",
    "end": "1134200"
  },
  {
    "text": "just log the value of a function we just get that function and we have to call the fun function before it actually does",
    "start": "1134200",
    "end": "1139799"
  },
  {
    "text": "anything and so effects are the same way except we run them so we have an effect and if we log the effect right we just",
    "start": "1139799",
    "end": "1146280"
  },
  {
    "text": "get this value but if we run the effect that's when the kind of contents of the",
    "start": "1146280",
    "end": "1151679"
  },
  {
    "text": "effect get executed and so there's a couple different ways to run effects we'll talk about that in a bit um but again just like you call a function you",
    "start": "1151679",
    "end": "1158440"
  },
  {
    "text": "run an effect so now we're going to move on to creating effects right we need to kind",
    "start": "1158440",
    "end": "1164600"
  },
  {
    "start": "1161000",
    "end": "1754000"
  },
  {
    "text": "of uh this is like the the lowest level kind of Base uh how to get started right",
    "start": "1164600",
    "end": "1169679"
  },
  {
    "text": "we have to create effects from nothing and so we're going to go over um seven functions to create effects and I",
    "start": "1169679",
    "end": "1176559"
  },
  {
    "text": "know that sounds like a lot in actuality there's uh over 20 but like I said don't get overwhelmed a lot of these are kind",
    "start": "1176559",
    "end": "1182919"
  },
  {
    "text": "of just kind of slightly different versions of other ones um and so like I said we're just going to stick to",
    "start": "1182919",
    "end": "1189840"
  },
  {
    "text": "seven so I'm going to go into uh the creating effects file here if you want",
    "start": "1190480",
    "end": "1196600"
  },
  {
    "text": "to follow along is the the text big enough for everyone yep all right so the first two",
    "start": "1196600",
    "end": "1205000"
  },
  {
    "text": "uh functions we're going to look at are Su succeed and fail and so these create effects from values from just values and",
    "start": "1205000",
    "end": "1212240"
  },
  {
    "text": "so this is important because we talked about kind of uh laziness right like functions are lazy um and effects are",
    "start": "1212240",
    "end": "1218159"
  },
  {
    "text": "also lazy and so when you evaluate a function all the function arguments get",
    "start": "1218159",
    "end": "1224440"
  },
  {
    "text": "evaluated when you call the function and so if we're creating a function from a value it's important that that value is",
    "start": "1224440",
    "end": "1231960"
  },
  {
    "text": "not like doing anything it's just a value so we have just a number one or just a string two and so um the two kind",
    "start": "1231960",
    "end": "1240039"
  },
  {
    "text": "of Constructors to create things from values are succeed and fail and so succeed here we're calling effect.",
    "start": "1240039",
    "end": "1245360"
  },
  {
    "text": "succeed one and by the way we're importing the effect module from effect at the top and so effect. succeed one is",
    "start": "1245360",
    "end": "1253400"
  },
  {
    "text": "going to return an effect number never never right and so of course course you can write that just as effect number",
    "start": "1253400",
    "end": "1260159"
  },
  {
    "text": "because those other two default to never and so what this is saying is this is an effect that when we run it is going to",
    "start": "1260159",
    "end": "1267360"
  },
  {
    "text": "return uh or kind of succeed with a number and it can never fail right because we haven't even given it a way",
    "start": "1267360",
    "end": "1272880"
  },
  {
    "text": "to fail it's only it only can succeed and so the opposite of that of course is fail and so fail is going to fail with",
    "start": "1272880",
    "end": "1279440"
  },
  {
    "text": "the value you pass it to and so this is going to be an effect never string right because this effect can never succeed",
    "start": "1279440",
    "end": "1285159"
  },
  {
    "text": "and it's going to fail with a string and so as like talked about um you don't want to do anything that's a side effect",
    "start": "1285159",
    "end": "1292279"
  },
  {
    "text": "or some kind of computation when you're using these value Constructors um because so for example if we create this",
    "start": "1292279",
    "end": "1299120"
  },
  {
    "text": "effect. suced date. now this is going to return uh a number but it's going to",
    "start": "1299120",
    "end": "1304400"
  },
  {
    "text": "return the number of the date when we created the effect not when we run the effect um and so this is equivalent to",
    "start": "1304400",
    "end": "1310480"
  },
  {
    "text": "basically uh creating a variable that has now and then creating a function that just always returns that one value",
    "start": "1310480",
    "end": "1318320"
  },
  {
    "text": "and so if we want to do more than just create from values then we have creating effects from synchronous",
    "start": "1318320",
    "end": "1323919"
  },
  {
    "text": "computations and so for that we have effect. sync and effect. sync takes what's called a thunk which is basically",
    "start": "1323919",
    "end": "1330039"
  },
  {
    "text": "a function that doesn't have any arguments and it's going to return some value and the value that it returns is",
    "start": "1330039",
    "end": "1336640"
  },
  {
    "text": "going to be what this effect itself returns so this effect is also an effect number right because uh date. now",
    "start": "1336640",
    "end": "1344640"
  },
  {
    "text": "returns a number but what we're saying is um when we execute this effect only",
    "start": "1344640",
    "end": "1350360"
  },
  {
    "text": "then we're going to run this in this function inside and so that's going to get the kind of date when you run the",
    "start": "1350360",
    "end": "1357240"
  },
  {
    "text": "effect instead of when we're evaluating the effect um and this is also where we can",
    "start": "1357240",
    "end": "1362960"
  },
  {
    "text": "start to introduce side effects so if we want to log to the console uh we can put that inside the thk of an effect. sync",
    "start": "1362960",
    "end": "1371679"
  },
  {
    "text": "and that way we're only logging to the console when again we execute the effect now something you also notice is",
    "start": "1371679",
    "end": "1378840"
  },
  {
    "text": "if we throw an error the effect that's returned is still a never in the error",
    "start": "1378840",
    "end": "1384720"
  },
  {
    "text": "Channel and the reason for this is that um effect. sync assumes that the",
    "start": "1384720",
    "end": "1390000"
  },
  {
    "text": "function you pass to it will never throw um and this is uh an important assumption because a lot of the times",
    "start": "1390000",
    "end": "1395120"
  },
  {
    "text": "functions you kind of can know they won't throw um but if this function",
    "start": "1395120",
    "end": "1400360"
  },
  {
    "text": "throws uh it's not going to be considered an error in effect it's going to be considered a a defect we'll talk a",
    "start": "1400360",
    "end": "1406760"
  },
  {
    "text": "bit more about defects later but a defect is basically like a panic um or an uncaught exception right from other",
    "start": "1406760",
    "end": "1412720"
  },
  {
    "text": "languages and a defect is basically going to end your program right it's an unexpected error um but we don't want",
    "start": "1412720",
    "end": "1418679"
  },
  {
    "text": "unexpected errors we want expected errors right that's why we have that error type parameter in the first place because we want to um kind of see the",
    "start": "1418679",
    "end": "1425720"
  },
  {
    "text": "errors coming throughout our programs and so that's where we can start to introduce errors uh with try and so",
    "start": "1425720",
    "end": "1432240"
  },
  {
    "text": "effect. try is kind of a version of effect. sync that is going to now",
    "start": "1432240",
    "end": "1437440"
  },
  {
    "text": "propagate any errors into the returned effect so this uh is basically the same",
    "start": "1437440",
    "end": "1443000"
  },
  {
    "text": "thing as up here but we're using effect. try instead and so effect. TR is going",
    "start": "1443000",
    "end": "1448960"
  },
  {
    "text": "to return an effect number or unknown exception and so it's telling us here on",
    "start": "1448960",
    "end": "1454320"
  },
  {
    "text": "a type level that hey this effect you've told me it might error and if it errors",
    "start": "1454320",
    "end": "1460080"
  },
  {
    "text": "it's going to return this unknown exception type and the reason for that is uh we haven't kind of told it what",
    "start": "1460080",
    "end": "1467039"
  },
  {
    "text": "kind of error uh is going to uh be thrown right or what kind of error is going to come out of this effect and so",
    "start": "1467039",
    "end": "1474640"
  },
  {
    "text": "um by default when you catch something uh any you could catch anything any type right when you catch it's unknown and so",
    "start": "1474640",
    "end": "1481200"
  },
  {
    "text": "this is saying this is an unknown exception but unknown exceptions are not very useful um right like this is almost",
    "start": "1481200",
    "end": "1486679"
  },
  {
    "text": "no better than TR catch because uh we don't really have any kind of useful information about this error and so",
    "start": "1486679",
    "end": "1493159"
  },
  {
    "text": "that's why most of the time when you use effect. TR you're going to use this overloaded version verion and so this is",
    "start": "1493159",
    "end": "1499600"
  },
  {
    "text": "the same thing as try except we're instead of just passing the function we're passing an object uh with a tri",
    "start": "1499600",
    "end": "1506640"
  },
  {
    "text": "function and a catch function and so the tri function is the function that we want to execute and that's going to",
    "start": "1506640",
    "end": "1512640"
  },
  {
    "text": "whatever this function returns is going to be the success type of the effect so json. parse returns any this effect is",
    "start": "1512640",
    "end": "1518279"
  },
  {
    "text": "going to return any but if this Tri function throws then effect is going to",
    "start": "1518279",
    "end": "1523840"
  },
  {
    "text": "move into your catch function and so the catch function takes a unknown error",
    "start": "1523840",
    "end": "1528880"
  },
  {
    "text": "right because this is whatever is caught and we have no clue what this value is and then you going to remap it to some",
    "start": "1528880",
    "end": "1534640"
  },
  {
    "text": "kind of known error right and so then we can see that this effect now errors with",
    "start": "1534640",
    "end": "1540159"
  },
  {
    "text": "an error type because that's what we've told effect to kind of remap that error to and so something else we could do is",
    "start": "1540159",
    "end": "1547240"
  },
  {
    "text": "maybe we can create our own error type we can call this Json parse",
    "start": "1547240",
    "end": "1552760"
  },
  {
    "text": "error and instead of returning this error we can return a new Json parse",
    "start": "1552760",
    "end": "1558880"
  },
  {
    "text": "error and then that's what's going to be kind of in place in here and so you can",
    "start": "1558880",
    "end": "1564960"
  },
  {
    "text": "create your own error types and kind of and in in this case you know you can obviously uh create a class with with",
    "start": "1564960",
    "end": "1571799"
  },
  {
    "text": "any values you want any kind of data you want but in this case uh kind of having this own this distinct error type um",
    "start": "1571799",
    "end": "1578559"
  },
  {
    "text": "even without like the message we had before this might be enough to kind of know what happened right because when",
    "start": "1578559",
    "end": "1584000"
  },
  {
    "text": "we're processing these errors later we can see oh well this was a Json parse error it's not like some opaque error",
    "start": "1584000",
    "end": "1589840"
  },
  {
    "text": "type that we have to look into its string message to get right so we're having typed errors which is um really",
    "start": "1589840",
    "end": "1595440"
  },
  {
    "text": "powerful so uh obviously that was just synchronous stuff so now we're going to move on to asynch asynchronous uh",
    "start": "1595440",
    "end": "1602880"
  },
  {
    "text": "computations so for these next examples we have uh this weight function as an example of something that returns a",
    "start": "1602880",
    "end": "1609760"
  },
  {
    "text": "promise so this function is going to take a number milliseconds and it's going to return a promise that resolves",
    "start": "1609760",
    "end": "1615200"
  },
  {
    "text": "with a string after that that time and so we can create an effect from a",
    "start": "1615200",
    "end": "1621039"
  },
  {
    "text": "function that returns a promise with effect. promise so here we call effect. promise and then we're calling weight",
    "start": "1621039",
    "end": "1626840"
  },
  {
    "text": "within the function that we pass to it and that's going to return a string never and you'll notice that's not",
    "start": "1626840",
    "end": "1632919"
  },
  {
    "text": "promis string right because effect is handling all the asynchronous stuff for us it's just saying you gave me a",
    "start": "1632919",
    "end": "1638559"
  },
  {
    "text": "promise string here is an effect string and so uh just like try promise is going",
    "start": "1638559",
    "end": "1644640"
  },
  {
    "text": "to assume that this function you pass to it that this function is not going to throw and the promise return from it is",
    "start": "1644640",
    "end": "1649840"
  },
  {
    "text": "not going to reject and so just like there's try there's try promise and so",
    "start": "1649840",
    "end": "1654960"
  },
  {
    "text": "try promise also has a kind of un overloaded version with an unknown exception or a overloaded version where",
    "start": "1654960",
    "end": "1661360"
  },
  {
    "text": "we can remap the error to a kind of known useful error type and then if you're not necessarily",
    "start": "1661360",
    "end": "1667880"
  },
  {
    "text": "working with promises if you're working with kind of callback based apis uh there's effect. async and effect. async",
    "start": "1667880",
    "end": "1674799"
  },
  {
    "text": "is going to give you this resume callback that we can uh either pass a",
    "start": "1674799",
    "end": "1679919"
  },
  {
    "text": "effect failure to or an effect success to and so here we're using read file from NOS which um takes a call back with",
    "start": "1679919",
    "end": "1688000"
  },
  {
    "text": "um either our error or our data and so if it's an error we're going to fail with the error and if it's a success or",
    "start": "1688000",
    "end": "1693679"
  },
  {
    "text": "if it's not an error we're going to succeed with the data and then all these other uh examples so far we've all been",
    "start": "1693679",
    "end": "1700440"
  },
  {
    "text": "inferring the types but this last example you'll notice we do have to",
    "start": "1700440",
    "end": "1705480"
  },
  {
    "text": "manually type these and the reason for that is that it's just a limitation of typescript that it can't infer the types",
    "start": "1705480",
    "end": "1711519"
  },
  {
    "text": "for this outer function from how the call back is used internally so in order",
    "start": "1711519",
    "end": "1716840"
  },
  {
    "text": "to kind of use effect. async you do have to Define um the success type and the error",
    "start": "1716840",
    "end": "1722720"
  },
  {
    "text": "type uh so uh to recap right we have succeed and fail for values we have sync",
    "start": "1722720",
    "end": "1730640"
  },
  {
    "text": "and try for synchronous functions promise and tri promise for async functions and async for callbacks and",
    "start": "1730640",
    "end": "1737240"
  },
  {
    "text": "then of course if your functions have any chance to error or your promises have any chance to reject you're going to want to use try or try promise so",
    "start": "1737240",
    "end": "1743799"
  },
  {
    "text": "that those errors are kind of known typed errors and not defects uh any questions so far on what",
    "start": "1743799",
    "end": "1749559"
  },
  {
    "text": "we just looked at cool all right so next we have uh",
    "start": "1749559",
    "end": "1756760"
  },
  {
    "start": "1754000",
    "end": "2286000"
  },
  {
    "text": "running effects right we've um kind of created these effects uh but they don't",
    "start": "1756760",
    "end": "1763919"
  },
  {
    "text": "they don't do anything right now they're not they're not that useful they're just values and so talked about just like we call a function we run an effect so we",
    "start": "1763919",
    "end": "1770320"
  },
  {
    "text": "have a couple ways to do that um and so for uh this kind of",
    "start": "1770320",
    "end": "1777000"
  },
  {
    "text": "snippet we're going to have these three example programs so the first program is a program that's going to succeed it's",
    "start": "1777000",
    "end": "1783440"
  },
  {
    "text": "going to uh console to it's going to log to the console and then it's going to return a number so this program is",
    "start": "1783440",
    "end": "1789080"
  },
  {
    "text": "effect number never never and here we have a program that's always going to fail right it's going to return either a",
    "start": "1789080",
    "end": "1796320"
  },
  {
    "text": "number or an unknown exception but really it's always going to kind of fail with that unknown exception because we're thrown and then finally we have a",
    "start": "1796320",
    "end": "1803440"
  },
  {
    "text": "program that's internally asynchronous right again effect is not kind of you can't tell whether it's sync or async",
    "start": "1803440",
    "end": "1809279"
  },
  {
    "text": "from the outside but we know that this program is ascus from the inside because we're using effect.",
    "start": "1809279",
    "end": "1814880"
  },
  {
    "text": "promise and so um if we kind of log these out uh and this is going to be",
    "start": "1814880",
    "end": "1822399"
  },
  {
    "text": "1s 5 we kind of get these values and um",
    "start": "1822399",
    "end": "1829679"
  },
  {
    "text": "these are kind of interesting to start kind of looking at how effects kind of work under the hood right so this kind of synchronous effect basically what it",
    "start": "1829679",
    "end": "1836159"
  },
  {
    "text": "is is just this object that has the function that we we gave it inside um but you really never need to worry about",
    "start": "1836159",
    "end": "1841919"
  },
  {
    "text": "the the internals of the effect right we're just kind of um thinking of them as as kind of opaque we really only care",
    "start": "1841919",
    "end": "1847919"
  },
  {
    "text": "about the type right and so to run effects that are purely synchronous we",
    "start": "1847919",
    "end": "1853279"
  },
  {
    "text": "can use the Run sync function so we pass our successful program to run sync and",
    "start": "1853279",
    "end": "1858679"
  },
  {
    "text": "it's going to synchronously return whatever the success type of that effect was so in this case a number and so we",
    "start": "1858679",
    "end": "1865880"
  },
  {
    "text": "can uh log that out so if we run this again right we're going to get uh the console log and the",
    "start": "1865880",
    "end": "1873240"
  },
  {
    "text": "result being 42 and so run sync uh if the effect kind",
    "start": "1873240",
    "end": "1879760"
  },
  {
    "text": "of that we pass to it if the effect fails it's going to throw uh an error with whatever the type of the fail the",
    "start": "1879760",
    "end": "1886639"
  },
  {
    "text": "failure type of that effect so this effect could throw with an unknown exception and when we run it you can see",
    "start": "1886639",
    "end": "1892480"
  },
  {
    "text": "that we get this unknown exception thrown out and then finally uh the reason it's",
    "start": "1892480",
    "end": "1899840"
  },
  {
    "text": "able to return the effect synchronously is because it um will only execute",
    "start": "1899840",
    "end": "1905000"
  },
  {
    "text": "effects that are purely synchronous internally right even though um and so this is obviously not you're not able to",
    "start": "1905000",
    "end": "1911679"
  },
  {
    "text": "tell from the outside so we don't get a type error when we call run sync on this async effect but but when we try to run",
    "start": "1911679",
    "end": "1918519"
  },
  {
    "text": "it we're going to get this kind of cryptic error it's going to say run sync async error cannot be resolved",
    "start": "1918519",
    "end": "1924159"
  },
  {
    "text": "synchronously caused using run sync on an effect that performs async work and so what's happening under the hood here",
    "start": "1924159",
    "end": "1930120"
  },
  {
    "text": "is again although externally the effect we can't tell internally um that kind of a async effect is kind of async instead",
    "start": "1930120",
    "end": "1937840"
  },
  {
    "text": "of sync and so when we call run sync it's basically as it's executing the effects it's saying if there's an async",
    "start": "1937840",
    "end": "1944080"
  },
  {
    "text": "effect well I don't know how to execute this because I can return synchronously so I'm going to kind of throw this",
    "start": "1944080",
    "end": "1949960"
  },
  {
    "text": "air and so if you have uh any part of your program even like one effect that",
    "start": "1949960",
    "end": "1955559"
  },
  {
    "text": "basically uses promise or Tri promise or anything async um you're going to need to use run promise instead and so this",
    "start": "1955559",
    "end": "1962840"
  },
  {
    "text": "ends up being uh what you use for the vast majority of programs because it's kind of very rare that you're doing",
    "start": "1962840",
    "end": "1968080"
  },
  {
    "text": "anything a fact that's not async in at least some capacity um and so if we run if we pass our program to run promise",
    "start": "1968080",
    "end": "1974799"
  },
  {
    "text": "we're going to get a promise that succeed that resolves with the result with the value type of the promise so in",
    "start": "1974799",
    "end": "1981960"
  },
  {
    "text": "this case we have our async program that whose value type is number and so run",
    "start": "1981960",
    "end": "1987039"
  },
  {
    "text": "promise is going to return a promise of a number and so we can call. then and get the result and then uh also if we",
    "start": "1987039",
    "end": "1995799"
  },
  {
    "text": "pass the failed program that promise is going to reject with the type um of the",
    "start": "1995799",
    "end": "2002039"
  },
  {
    "text": "error type of the failed program so if we run these right we get the",
    "start": "2002039",
    "end": "2007880"
  },
  {
    "text": "um run promise result and we get this this error which is catching uh the",
    "start": "2007880",
    "end": "2014080"
  },
  {
    "text": "failed program and then finally there's this function called run sync exit and",
    "start": "2014080",
    "end": "2019360"
  },
  {
    "text": "there's also run promise exit and run sync exit is going to return a exit type",
    "start": "2019360",
    "end": "2025039"
  },
  {
    "text": "and we'll talk a bit more about this in a second but you can basically think of it as instead of just throwing the error",
    "start": "2025039",
    "end": "2030559"
  },
  {
    "text": "we can get this exit type which is basically a union between either the success or the error and so then we can",
    "start": "2030559",
    "end": "2036320"
  },
  {
    "text": "kind of um discriminate on that exit type um which uh is a lot of the times",
    "start": "2036320",
    "end": "2042279"
  },
  {
    "text": "much more kind of useful than just throwing the error and then we're kind of back into TR catch line right um so",
    "start": "2042279",
    "end": "2049358"
  },
  {
    "text": "if we log this one out we log these you'll see we get this uh exit and",
    "start": "2049359",
    "end": "2056638"
  },
  {
    "text": "this has a tag of a failure and so again we'll talk a bit more about um exits in a bit but just that there's",
    "start": "2056639",
    "end": "2064040"
  },
  {
    "text": "uh uh other functions that kind of instead of throwing or rejecting the values right we can get them as a a",
    "start": "2064040",
    "end": "2073119"
  },
  {
    "text": "union all right um so so far oh",
    "start": "2073359",
    "end": "2080480"
  },
  {
    "text": "yes uh it's similar so we're in in a couple in like probably 20 30 minutes",
    "start": "2083879",
    "end": "2089079"
  },
  {
    "text": "we'll kind of really look into the exit type but you can basically think of it as an an either it's actually um a bit",
    "start": "2089079",
    "end": "2095000"
  },
  {
    "text": "more powerful than an either um um and I promise we will talk about that in a bit but you can kind of conceptually think",
    "start": "2095000",
    "end": "2100599"
  },
  {
    "text": "of it as either the success or an error",
    "start": "2100599",
    "end": "2105920"
  },
  {
    "text": "yes yes yes yes um so uh and I do think we cover this a bit",
    "start": "2108359",
    "end": "2113760"
  },
  {
    "text": "later but a tag is so the question I'm sorry for not repeating it is what is the kind of underscore tag field of a",
    "start": "2113760",
    "end": "2120320"
  },
  {
    "text": "lot of the objects in effect and so this is a very very common pattern you'll see all over and so a tag is a field to",
    "start": "2120320",
    "end": "2127119"
  },
  {
    "text": "discriminate two things and so the usefulness for this is on a type level and also on a runtime level so on a type",
    "start": "2127119",
    "end": "2133640"
  },
  {
    "text": "level it's useful because uh typescript will merge um two OB two kind of items",
    "start": "2133640",
    "end": "2139760"
  },
  {
    "text": "in a union if they're the exact same so if we have like a uh and we can show",
    "start": "2139760",
    "end": "2145960"
  },
  {
    "text": "this um so if we have like type um we're",
    "start": "2145960",
    "end": "2152319"
  },
  {
    "text": "going to call this one this going to be Fu string and if we have type two is",
    "start": "2152319",
    "end": "2158280"
  },
  {
    "text": "going to be F string let's capitalize this so if we",
    "start": "2158280",
    "end": "2163880"
  },
  {
    "text": "call this type Union and this is going to equal one or two you'll notice that",
    "start": "2163880",
    "end": "2169079"
  },
  {
    "text": "this actually um if",
    "start": "2169079",
    "end": "2175160"
  },
  {
    "text": "we uh I guess it doesn't it won't happen here but there's kind of scenarios in in",
    "start": "2176079",
    "end": "2181560"
  },
  {
    "text": "typescript where uh unions will kind of get merged implicitly if uh there's not",
    "start": "2181560",
    "end": "2187000"
  },
  {
    "text": "if the objects are the exact same and so what what the tag does is the tag will",
    "start": "2187000",
    "end": "2192319"
  },
  {
    "text": "basically say um it might be because I think if we make",
    "start": "2192319",
    "end": "2199560"
  },
  {
    "text": "these I'm",
    "start": "2204119",
    "end": "2207240"
  },
  {
    "text": "sorry yeah okay yes um so what he said for you guys",
    "start": "2209960",
    "end": "2218680"
  },
  {
    "text": "was if you have uh certain kinds of classes in a union um they can get merged and so uh what the tag looks like",
    "start": "2218680",
    "end": "2225359"
  },
  {
    "text": "is we'll have this readon tag field as one [Music]",
    "start": "2225359",
    "end": "2232340"
  },
  {
    "text": "or and so what this tells typescript um is that these kind of objects are",
    "start": "2233560",
    "end": "2239480"
  },
  {
    "text": "distinct types right because even if the rest of the the type is the same that",
    "start": "2239480",
    "end": "2244640"
  },
  {
    "text": "these are are different because of this tag and it also is important on a runtime level because if we uh kind of declare a",
    "start": "2244640",
    "end": "2252760"
  },
  {
    "text": "union we can kind of switch on the Union right and so then if we uh have the the",
    "start": "2252760",
    "end": "2261920"
  },
  {
    "text": "based on the tag the tag is a union of all the possible tags and so when we kind of check manually to make sure that",
    "start": "2261920",
    "end": "2267880"
  },
  {
    "text": "the tag is a specific value we automatically know the type of the rest of the thing assuming all the tags are",
    "start": "2267880",
    "end": "2274119"
  },
  {
    "text": "unique right so a tag is a way to discrimin minate two types both on a type level and both on a runtime level",
    "start": "2274119",
    "end": "2281319"
  },
  {
    "text": "does that answer your question okay um so so far our programs are uh quite",
    "start": "2281319",
    "end": "2288880"
  },
  {
    "start": "2286000",
    "end": "3942000"
  },
  {
    "text": "limited um what we really want to do is kind of start to compose our effects so",
    "start": "2288880",
    "end": "2294240"
  },
  {
    "text": "um right now we can only kind of create effects from values we can create effects from functions we can run them",
    "start": "2294240",
    "end": "2300720"
  },
  {
    "text": "uh but we really want to kind of build up our programs and so uh this is an example of composing function",
    "start": "2300720",
    "end": "2307280"
  },
  {
    "text": "right so we have a get date function and we have a double function and then this uh double date function uh doubles the",
    "start": "2307280",
    "end": "2313520"
  },
  {
    "text": "date right this is a very basic example but we're kind of combining the behavior of two separate things and so let's say",
    "start": "2313520",
    "end": "2319560"
  },
  {
    "text": "we want to kind of combine the behavior of two effects right so we have get date",
    "start": "2319560",
    "end": "2324839"
  },
  {
    "text": "which is an effect that kind of synchronously calculates the date and we have a double function um the way to do",
    "start": "2324839",
    "end": "2330000"
  },
  {
    "text": "it is uh definitely not definitely not this um you never want to run effects",
    "start": "2330000",
    "end": "2335720"
  },
  {
    "text": "inside other effects and we'll talk about uh a better way to do this in a second um but running effects inside",
    "start": "2335720",
    "end": "2343160"
  },
  {
    "text": "other effects is like the one big no no of effect you basically throw away all the benefits of using effect if you run",
    "start": "2343160",
    "end": "2349800"
  },
  {
    "text": "effects inside other effects and so you should only run effects at the edges of your program and what this means is kind",
    "start": "2349800",
    "end": "2357119"
  },
  {
    "text": "of when you have to interact with something else so if that's uh if your program is entirely effect then usually",
    "start": "2357119",
    "end": "2364359"
  },
  {
    "text": "you can call run once a single time and that's going to run your entire program as an effect but if you need to interact",
    "start": "2364359",
    "end": "2371400"
  },
  {
    "text": "with um kind of other code right so if you are uh using effect kind of",
    "start": "2371400",
    "end": "2376520"
  },
  {
    "text": "interruptedly with with other libraries that um don't use effect that's when you have to call run because you need to",
    "start": "2376520",
    "end": "2382480"
  },
  {
    "text": "kind of convert the effect to the value right but running effect at the edges of your program so what is a better way to",
    "start": "2382480",
    "end": "2389720"
  },
  {
    "text": "do this um so we're gonna answer that in a second but the first thing we're going to talk about uh is",
    "start": "2389720",
    "end": "2398400"
  },
  {
    "text": "pipelines and so a lot of the times in our programs we want to basically transform data through",
    "start": "2398880",
    "end": "2405280"
  },
  {
    "text": "a series of functions um and so here we have an example we have a function called get date we have a function",
    "start": "2405280",
    "end": "2411040"
  },
  {
    "text": "called double it's going to double a number we have two string it's going to call two string on the number two uppercase it's going to call two uppercase on the number and a lot of",
    "start": "2411040",
    "end": "2417960"
  },
  {
    "text": "times really kind of how our programs uh end up is just as the kind of su uh",
    "start": "2417960",
    "end": "2423839"
  },
  {
    "text": "successive piping of data through one function into the next function into the next function and so we can kind of uh",
    "start": "2423839",
    "end": "2430839"
  },
  {
    "text": "look at that like this right we can call G date and call Double on G date call to string on that call to uppercase um but",
    "start": "2430839",
    "end": "2437640"
  },
  {
    "text": "this can be a little hard to read um you kind of have to read inside to out and",
    "start": "2437640",
    "end": "2442920"
  },
  {
    "text": "it can get pretty complex if you start having kind of other parameters baked in here right like what is the function actually operating on it can get a",
    "start": "2442920",
    "end": "2449400"
  },
  {
    "text": "little uh complicated and so there's some other kind of Alternatives here right like",
    "start": "2449400",
    "end": "2455960"
  },
  {
    "text": "object oriented programming we can make classes and we can use this kind of cool method syntax right and that way we can",
    "start": "2455960",
    "end": "2462760"
  },
  {
    "text": "uh very clearly kind of read left to right um but this kind of loses a lot of",
    "start": "2462760",
    "end": "2467839"
  },
  {
    "text": "problems right or introduces some problems where um especially when we make CL things classes uh es if we want",
    "start": "2467839",
    "end": "2474280"
  },
  {
    "text": "to kind of give those classes a lot of behavior like let's say we have a class with a 100 methods but we end up only",
    "start": "2474280",
    "end": "2479520"
  },
  {
    "text": "using two well all those 100 methods they have to be on the Prototype of of",
    "start": "2479520",
    "end": "2484640"
  },
  {
    "text": "every kind of instance of that class and so there's no real way to tree shake the the kind of the methods of functions and",
    "start": "2484640",
    "end": "2490599"
  },
  {
    "text": "so that's why or the methods of classes sorry and so that's why effect uses functions um and that's why we do this",
    "start": "2490599",
    "end": "2497839"
  },
  {
    "text": "kind of uh if you'll notice from from before right we use we import effect and",
    "start": "2497839",
    "end": "2503480"
  },
  {
    "text": "then we call all these functions as kind of namespaced uh functions or namespaced Imports right like this is not a method",
    "start": "2503480",
    "end": "2510079"
  },
  {
    "text": "of some big effect class this is a function from the effect module um and",
    "start": "2510079",
    "end": "2516800"
  },
  {
    "text": "so we want to be able to get this kind of same really easy to read left to",
    "start": "2516800",
    "end": "2521960"
  },
  {
    "text": "right composition uh without um all the kind of drawbacks of throwing everything on a class and so the the solution to",
    "start": "2521960",
    "end": "2529400"
  },
  {
    "text": "that is something called pipe so pipe is a function that we can import from effect and when we pipe things we are",
    "start": "2529400",
    "end": "2536520"
  },
  {
    "text": "basically uh giving it a value and a list of functions and what you'll notice",
    "start": "2536520",
    "end": "2541599"
  },
  {
    "text": "is that this example down here with pipe actually looks very very similar to this",
    "start": "2541599",
    "end": "2546640"
  },
  {
    "text": "method example right like they the functions kind of line up almost perfectly and so we get the same",
    "start": "2546640",
    "end": "2552000"
  },
  {
    "text": "readability of kind of getting our date and then doubling it and then calling two string and calling two uppercase uh",
    "start": "2552000",
    "end": "2557359"
  },
  {
    "text": "but we do this in a much more functional and much more composable way and so pipes are really really core to effect",
    "start": "2557359",
    "end": "2563800"
  },
  {
    "text": "because basically everything we're doing is functions we're calling functions passing them to other functions and other functions and so it's really",
    "start": "2563800",
    "end": "2569760"
  },
  {
    "text": "important to have pipes to be able to um very neatly uh be able to call Executive",
    "start": "2569760",
    "end": "2576319"
  },
  {
    "text": "functions on our data and so now we're going to go back to effect um knowing this kind of pipe",
    "start": "2576319",
    "end": "2583960"
  },
  {
    "text": "because we're going to be using pipes in a second and again we have this example the bad example calling run sync and",
    "start": "2583960",
    "end": "2590480"
  },
  {
    "text": "sign effect and so we don't want to do this but what can we do instead well we have",
    "start": "2590480",
    "end": "2598040"
  },
  {
    "text": "uh we can try this right we can try to pipe G date into double and this obviously isn't going to work right",
    "start": "2598040",
    "end": "2604280"
  },
  {
    "text": "because double takes a number and this is an effect of a number um and those are kind of incompatible so we need a",
    "start": "2604280",
    "end": "2610720"
  },
  {
    "text": "way to kind of get in to that effect like kind of operate on the value within the effect without uh running it and so",
    "start": "2610720",
    "end": "2618119"
  },
  {
    "text": "the way we do that is this function called map and so what map is going to do is it's going to take an effect and a",
    "start": "2618119",
    "end": "2625319"
  },
  {
    "text": "function that operates on the type of the value of that effect so this function is a number and then we can",
    "start": "2625319",
    "end": "2630880"
  },
  {
    "text": "call Double on that number and the effect that's returned from map is going",
    "start": "2630880",
    "end": "2636119"
  },
  {
    "text": "to be the result of whatever this map function returns so instead we could call X do2 string right and now this is",
    "start": "2636119",
    "end": "2642800"
  },
  {
    "text": "an effect of a string and so what this is doing is uh again these are are new",
    "start": "2642800",
    "end": "2648480"
  },
  {
    "text": "values like this double date 3 is a a new kind of separate immutable value",
    "start": "2648480",
    "end": "2653559"
  },
  {
    "text": "from this previous git date function and so double date 3 is now a program that",
    "start": "2653559",
    "end": "2658960"
  },
  {
    "text": "represents first kind of do whatever git date says and then if it succeeds right",
    "start": "2658960",
    "end": "2664920"
  },
  {
    "text": "and we have the value then apply this function to that value call this function with that value and",
    "start": "2664920",
    "end": "2671079"
  },
  {
    "text": "then that's going to be the new result of this effect and so now we can recreate um our",
    "start": "2671079",
    "end": "2676960"
  },
  {
    "text": "program up here where we kind of call G date and the double and two string into two uppercase and we can take our git",
    "start": "2676960",
    "end": "2683240"
  },
  {
    "text": "date effect and pipe it into effect. map with the double function and pipe it",
    "start": "2683240",
    "end": "2688319"
  },
  {
    "text": "into effect. map with the two string function and then into the two uppercase function and we can create one effect",
    "start": "2688319",
    "end": "2696040"
  },
  {
    "text": "that represents all those operations combined and uh we can run it I think",
    "start": "2696040",
    "end": "2703079"
  },
  {
    "text": "this will work and uh that's going to be the the",
    "start": "2703079",
    "end": "2710520"
  },
  {
    "text": "doubled string um so something you might be wondering is up here we use effect. map",
    "start": "2710520",
    "end": "2717319"
  },
  {
    "text": "with two parameters right we pass the effect as the first argument and the function as the second argument um and",
    "start": "2717319",
    "end": "2723760"
  },
  {
    "text": "this is a pretty common pattern where we the kind of the thing that we're operating on is the first argument and",
    "start": "2723760",
    "end": "2729520"
  },
  {
    "text": "then kind of the subsequent things are kind of argu or kind of options to that function but here uh we only pass one",
    "start": "2729520",
    "end": "2736200"
  },
  {
    "text": "argument right we only pass the function and the reason for that is that effect.",
    "start": "2736200",
    "end": "2741359"
  },
  {
    "text": "map and basically every other function in effect has two overloads so these are called the data first and the data last",
    "start": "2741359",
    "end": "2747079"
  },
  {
    "text": "version and you really actually don't need to know the names because you'll almost never think about this everything just kind of works and so if you want to",
    "start": "2747079",
    "end": "2753359"
  },
  {
    "text": "call the function uh with the effect as the first argument um you can and it just works but if you want to use it in",
    "start": "2753359",
    "end": "2759880"
  },
  {
    "text": "a pipeline and you uh you can just leave it out and the reason for that is because if you leave out the first",
    "start": "2759880",
    "end": "2766599"
  },
  {
    "text": "argument this is actually going to return a a function that takes an effect and so",
    "start": "2766599",
    "end": "2775280"
  },
  {
    "text": "what this is kind of doing internally right is it's calling the result of this",
    "start": "2775280",
    "end": "2780440"
  },
  {
    "text": "with this right this is what what that looks like so we're calling the function that effect. map returns",
    "start": "2780440",
    "end": "2786359"
  },
  {
    "text": "with Git datee and so that's how we're able to use these functions in pipe without having to do something like this",
    "start": "2786359",
    "end": "2793000"
  },
  {
    "text": "right like previous and then we can call effect. map previous and",
    "start": "2793000",
    "end": "2803480"
  },
  {
    "text": "then right this is what we would have to do if that wasn't the case we'd have to kind of every uh effect or every",
    "start": "2804640",
    "end": "2810800"
  },
  {
    "text": "function that didn't have one argument we'd have to kind of use this Anonymous function but because basically every",
    "start": "2810800",
    "end": "2817319"
  },
  {
    "text": "single function in effect has this um overload Behavior you can just leave out that first argument and it's just going",
    "start": "2817319",
    "end": "2823520"
  },
  {
    "text": "to kind of work really easily in pipelines um so the next thing we're",
    "start": "2823520",
    "end": "2830640"
  },
  {
    "text": "going to do is map with this divide function so this divide function is a",
    "start": "2830640",
    "end": "2835800"
  },
  {
    "text": "function that returns an effect of a number or an error and basically first",
    "start": "2835800",
    "end": "2841200"
  },
  {
    "text": "we check if the kind of thing we're dividing by is zero and instead of kind of returning",
    "start": "2841200",
    "end": "2846319"
  },
  {
    "text": "Nan right we're going to return this error and so what we really want to do",
    "start": "2846319",
    "end": "2851839"
  },
  {
    "text": "is uh map with this divide function right so we have uh we succeed with a",
    "start": "2851839",
    "end": "2857520"
  },
  {
    "text": "tuple and then we're mapping with the kind of the contents of that Tuple and the thing we're mapping to is the the",
    "start": "2857520",
    "end": "2864000"
  },
  {
    "text": "result of dividing by that thing and so if we look at the type of this program it's an effect whose success value is",
    "start": "2864000",
    "end": "2871640"
  },
  {
    "text": "itself an effect and so this is kind of a problem right like we really don't want to run uh the effect and then run",
    "start": "2871640",
    "end": "2878119"
  },
  {
    "text": "the effect we get from that and so what we really need is a way to kind of flatten those two effects and so that's",
    "start": "2878119",
    "end": "2883680"
  },
  {
    "text": "why we have this function called effect. flatmap and so flat map is basically the same as map except it's used when the",
    "start": "2883680",
    "end": "2891240"
  },
  {
    "text": "function that we're mapping against also returns an effect so here right we",
    "start": "2891240",
    "end": "2896520"
  },
  {
    "text": "succeed with this Tuple and then we map on the Tuple and we divide and the",
    "start": "2896520",
    "end": "2902200"
  },
  {
    "text": "result is going to be one single effect and when we flatmap the result of the",
    "start": "2902200",
    "end": "2909319"
  },
  {
    "text": "kind of s the the resulting effect will have the whatever value type this effect",
    "start": "2909319",
    "end": "2916920"
  },
  {
    "text": "returns right so this effect returns a number so this effect is going to succeed with a number succeed right not",
    "start": "2916920",
    "end": "2922680"
  },
  {
    "text": "return and also uh flat map is going to combine the errors right so um that's",
    "start": "2922680",
    "end": "2929319"
  },
  {
    "text": "not in this example but if this effect right if this effect uh had an error",
    "start": "2929319",
    "end": "2935599"
  },
  {
    "text": "then that error is still going to come through in the flat map the result of the flat map right it's going to combine",
    "start": "2935599",
    "end": "2941839"
  },
  {
    "text": "the errors because if this first effect failed then that uh failure is right we",
    "start": "2941839",
    "end": "2947440"
  },
  {
    "text": "can only flat map on the success result so if the first effect fails the kind of resulting effect of the flat map will",
    "start": "2947440",
    "end": "2952839"
  },
  {
    "text": "also fail and if the effect returned by the flat map if that fails right the",
    "start": "2952839",
    "end": "2958160"
  },
  {
    "text": "whole thing is also going to fail with that value so uh this is going to succeed or yeah succeed with the success",
    "start": "2958160",
    "end": "2965760"
  },
  {
    "text": "type of this effect it's going to error with the types of Errors from both the first effect and the effect we're flat",
    "start": "2965760",
    "end": "2972440"
  },
  {
    "text": "mapping against and so an example I came up with to kind of uh help conceptually",
    "start": "2972440",
    "end": "2979119"
  },
  {
    "text": "understand what's going on here is we have this bash command we have LS piped into GP and we can think of these kind",
    "start": "2979119",
    "end": "2986480"
  },
  {
    "text": "of like effects right so LS is a program right if an effect is a program LS is a program that when we run it kind of does",
    "start": "2986480",
    "end": "2994520"
  },
  {
    "text": "something and grep is its own program right like grep takes some input and it's it's its own thing and so pipe is",
    "start": "2994520",
    "end": "3001040"
  },
  {
    "text": "kind of like flatmap right we can pipe LS into grep and now this resulting",
    "start": "3001040",
    "end": "3008240"
  },
  {
    "text": "string right this is now its own program that describes both of those behaviors and so that was what um flatmap is",
    "start": "3008240",
    "end": "3014200"
  },
  {
    "text": "basically doing um the next thing we're going to look at is uh kind of uh triggering side",
    "start": "3014200",
    "end": "3023079"
  },
  {
    "text": "effects without kind of altering the value of our effect so what I want to do",
    "start": "3023079",
    "end": "3028760"
  },
  {
    "text": "we have this pipeline right so again we're synchronously calculating the date and then we're mapping with some",
    "start": "3028760",
    "end": "3033799"
  },
  {
    "text": "functions and what I want to do is in between before we call two string I want",
    "start": "3033799",
    "end": "3039640"
  },
  {
    "text": "to log out the value here right I want to um kind of inspect the value if you will and so the way I could do that is",
    "start": "3039640",
    "end": "3047160"
  },
  {
    "text": "this right so we're adding in this map and what this is going to do is it's going to kind of do our side effect it's",
    "start": "3047160",
    "end": "3052760"
  },
  {
    "text": "going to log the thing and then we have to return X here because if we don't return X here um and we actually can",
    "start": "3052760",
    "end": "3059280"
  },
  {
    "text": "just make this like one expression right if we do this then we're going to get an error down here because now this is void",
    "start": "3059280",
    "end": "3067559"
  },
  {
    "text": "right because this we're flat mapping against the result or we're we're mapping not flat mapping we're mapping against the result of this and console.",
    "start": "3067559",
    "end": "3074040"
  },
  {
    "text": "log returns void so now this returns an effect that succeeds with void um and",
    "start": "3074040",
    "end": "3079799"
  },
  {
    "text": "so uh kind of returning the value through right so that this next map function still has the same value that",
    "start": "3079799",
    "end": "3086119"
  },
  {
    "text": "we've been working on before this is a little bit kind of annoying and so that's why we have this function called",
    "start": "3086119",
    "end": "3091440"
  },
  {
    "text": "tap and so tap is basically map except we are completely ignoring the result of",
    "start": "3091440",
    "end": "3097119"
  },
  {
    "text": "Whatever Gets returned right we're just doing something so we could call right like we could double X in here um but",
    "start": "3097119",
    "end": "3103240"
  },
  {
    "text": "that's not going to impact X at all right and so this is where we can kind of do side effects on the result of our",
    "start": "3103240",
    "end": "3110760"
  },
  {
    "text": "effect without changing um the value itself",
    "start": "3110760",
    "end": "3117359"
  },
  {
    "text": "and so the final thing we're going to look at is how to combine",
    "start": "3118880",
    "end": "3126240"
  },
  {
    "text": "effects so we have effect. all and what effect. all is going to do is it takes",
    "start": "3126240",
    "end": "3131359"
  },
  {
    "text": "an array of effects and returns a array of their",
    "start": "3131359",
    "end": "3137000"
  },
  {
    "text": "results so we have this first effect that calculates the date we have the second effect that calculates the date",
    "start": "3137000",
    "end": "3142760"
  },
  {
    "text": "yesterday and we take we go from an array of effects to an effect that has",
    "start": "3142760",
    "end": "3147880"
  },
  {
    "text": "an array of two numbers and so then right we can call effect. all and then we can map on the",
    "start": "3147880",
    "end": "3154359"
  },
  {
    "text": "value and of course now it's a tuple and so we can kind of unpack that and uh combine those and so another useful",
    "start": "3154359",
    "end": "3161280"
  },
  {
    "text": "thing you can do with effect. all is instead of passing an array you can pass an object right so we can pass an object",
    "start": "3161280",
    "end": "3168520"
  },
  {
    "text": "where uh the values of the object are effect and we're going to get back a",
    "start": "3168520",
    "end": "3173640"
  },
  {
    "text": "object where the Val values are the results of those effects um the next thing we're going to",
    "start": "3173640",
    "end": "3180280"
  },
  {
    "text": "look at is effect generators so you might have seen effects generators before they're probably like the most uh",
    "start": "3180280",
    "end": "3186359"
  },
  {
    "text": "the thing that stands out the most about effect um and they're an alternative way to compose effects so instead of using",
    "start": "3186359",
    "end": "3193960"
  },
  {
    "text": "functions we can use generators and so to introduce generators um I have this Pipeline and",
    "start": "3193960",
    "end": "3201200"
  },
  {
    "text": "so this pipeline again we're reusing this divide function from earlier which again returns an effect of either a",
    "start": "3201200",
    "end": "3207680"
  },
  {
    "text": "number or an error and so we're synchronously getting the date we're mapping it uh which with a function that",
    "start": "3207680",
    "end": "3213520"
  },
  {
    "text": "doubles we're flat mapping with this divide function and then we're mapping with two string and so uh if you look at this",
    "start": "3213520",
    "end": "3221280"
  },
  {
    "text": "pipeline um it kind of looks like something and so uh does anyone kind of",
    "start": "3221280",
    "end": "3227000"
  },
  {
    "text": "does this remind anyone of anything uh it reminds me a lot of a promise chain so instead of calling uh",
    "start": "3227000",
    "end": "3235680"
  },
  {
    "text": "map we call then instead of calling flat map we call then where we return a promise and so the reason that these",
    "start": "3235680",
    "end": "3242839"
  },
  {
    "text": "look so similar is because they actually they are very similar and so the reason",
    "start": "3242839",
    "end": "3248319"
  },
  {
    "text": "we need uh to kind of do these these callbacks is because when something is",
    "start": "3248319",
    "end": "3253799"
  },
  {
    "text": "async we don't know when it's going to come back but if we split all of our comp all of our kind of Transformations",
    "start": "3253799",
    "end": "3260319"
  },
  {
    "text": "into these kind of very individual functions then we can say right that basically what then is doing is we're",
    "start": "3260319",
    "end": "3266520"
  },
  {
    "text": "saying wait until the value comes back and then apply this function and so that's basically what effect is doing as",
    "start": "3266520",
    "end": "3271920"
  },
  {
    "text": "well right it's saying um wait until uh or it's not necessarily async but if it",
    "start": "3271920",
    "end": "3277319"
  },
  {
    "text": "is async but it's basically saying calculate the first effect and then when you get the value of that first effect then map it with this function and so",
    "start": "3277319",
    "end": "3284880"
  },
  {
    "text": "just like how these are very similar um generators are very similar to async or a weight right so um in async a weight",
    "start": "3284880",
    "end": "3293599"
  },
  {
    "text": "we basically uh we're doing the same thing as this but it's a bit more hidden",
    "start": "3293599",
    "end": "3299640"
  },
  {
    "text": "right like all these kind of break points are still there right so this is a breakpoint where we're we're getting",
    "start": "3299640",
    "end": "3305359"
  },
  {
    "text": "we're operating on the number and then we're doubling the number and this is a breakpoint where when we get kind of this result we're getting a promise",
    "start": "3305359",
    "end": "3312520"
  },
  {
    "text": "that's uh kind of does this first if it checks to zero it's going to reject right and so the same kind of separation",
    "start": "3312520",
    "end": "3320119"
  },
  {
    "text": "is happening in an async function it's just kind of hidden a bit more and it's hidden because it's it's only between",
    "start": "3320119",
    "end": "3326280"
  },
  {
    "text": "the await points right like between the await points is where um everything is",
    "start": "3326280",
    "end": "3331680"
  },
  {
    "text": "synchronous right like to the function everything is synchronous but when we await we're basically halting execution",
    "start": "3331680",
    "end": "3338160"
  },
  {
    "text": "of the function and so that's that's how async functions are able to work because",
    "start": "3338160",
    "end": "3343319"
  },
  {
    "text": "the function instead of right in here the there's no like stopping the function we just split all of our",
    "start": "3343319",
    "end": "3349280"
  },
  {
    "text": "Behavior into different functions where here we have all our Behavior as one function but we basically kind of stop",
    "start": "3349280",
    "end": "3356400"
  },
  {
    "text": "it and restart it and so just like uh asyn O8 kind of",
    "start": "3356400",
    "end": "3361520"
  },
  {
    "text": "allows us to do that with promises generators allow us to do that with",
    "start": "3361520",
    "end": "3366680"
  },
  {
    "text": "effects so first we um have a a",
    "start": "3366680",
    "end": "3371799"
  },
  {
    "text": "synchronous effect that has a date and so instead of a weight we do this yield",
    "start": "3371799",
    "end": "3377160"
  },
  {
    "text": "star yield star and so if you you kind of squint your eyes it almost looks like a weight right it's also five characters",
    "start": "3377160",
    "end": "3383640"
  },
  {
    "text": "I guess six with the star um and so if we yield this effect you'll",
    "start": "3383640",
    "end": "3390440"
  },
  {
    "text": "notice that we don't get an effect back we just get a number and then instead of mapping we can just kind of do the thing",
    "start": "3390440",
    "end": "3397440"
  },
  {
    "text": "and then if we want to flat map we just yield another effect using the value",
    "start": "3397440",
    "end": "3403280"
  },
  {
    "text": "that we've already gotten and so uh something like really cool is that",
    "start": "3403280",
    "end": "3410039"
  },
  {
    "text": "this divide function which remember returns this returns either a number or",
    "start": "3410039",
    "end": "3415240"
  },
  {
    "text": "an error well this Z that we get back after yielding it is a number right so",
    "start": "3415240",
    "end": "3421559"
  },
  {
    "text": "where did the error go the error has automatically propagated to the result",
    "start": "3421559",
    "end": "3426640"
  },
  {
    "text": "of the generator function and so this is really really powerful right this is kind of where I talked about you don't",
    "start": "3426640",
    "end": "3432000"
  },
  {
    "text": "have to manually inspect the error and return it at every point and so we can do this kind of it's called like happy",
    "start": "3432000",
    "end": "3438480"
  },
  {
    "text": "path programming right where inside this function the errors basically don't exist but they're all still tracked on a",
    "start": "3438480",
    "end": "3446200"
  },
  {
    "text": "type level right they're all still getting passed through so generators are really really",
    "start": "3446200",
    "end": "3451880"
  },
  {
    "text": "common you'll see them all over if you go to the documentation there's like a generator version and a pipe version of everything and the generator version is",
    "start": "3451880",
    "end": "3457799"
  },
  {
    "text": "actually the one that loads by default you have to click to the pipe version and this is because um I think everyone is is very familiar with async A8 right",
    "start": "3457799",
    "end": "3464559"
  },
  {
    "text": "this is something we use basically all the time and so generators allow us to write code uh that looks like a single",
    "start": "3464559",
    "end": "3471880"
  },
  {
    "text": "weight code right where this code is very it's very functional right like we have everything is a function we're",
    "start": "3471880",
    "end": "3477400"
  },
  {
    "text": "piping into functions more functions um where this right again if you squint",
    "start": "3477400",
    "end": "3482440"
  },
  {
    "text": "your eyes you're like wow this this almost looks like asyn we but everything you can do with functions you can do with generators everything you can do",
    "start": "3482440",
    "end": "3488480"
  },
  {
    "text": "with generators you can do with just functions it really comes down to your style um and uh like I find that there's",
    "start": "3488480",
    "end": "3496359"
  },
  {
    "text": "some things that um I you know could do in a generator that I I like doing in",
    "start": "3496359",
    "end": "3501760"
  },
  {
    "text": "pipes I find there's some things I could do in pipes I like doing in generators and so it's really just up to you uh the next thing I want to talk",
    "start": "3501760",
    "end": "3508160"
  },
  {
    "text": "about is this this underscore function um why is it necessary the reason is for",
    "start": "3508160",
    "end": "3515400"
  },
  {
    "text": "the the types right to get this kind of really crazy type stuff going on where we're able to propagate these errors um",
    "start": "3515400",
    "end": "3523599"
  },
  {
    "text": "if you don't use this underscore function it won't work uh on a type level like theoretically we could uh",
    "start": "3523599",
    "end": "3530599"
  },
  {
    "text": "it's possible to kind of get this to work just by calling yield without the underscore function function um but to",
    "start": "3530599",
    "end": "3536640"
  },
  {
    "text": "to get the types right uh that's required and so it's called the the adapter um and so you can kind of Alias",
    "start": "3536640",
    "end": "3543960"
  },
  {
    "text": "it to whatever you want so uh the dollar sign character used to be kind of popular now I think the docs use",
    "start": "3543960",
    "end": "3549720"
  },
  {
    "text": "underscore I like underscore um but you can do whatever you want the other thing with generators is uh often they can be",
    "start": "3549720",
    "end": "3557440"
  },
  {
    "text": "a bit kind of verbose to write out this like function star and write out this yield star and so if you go to the",
    "start": "3557440",
    "end": "3563599"
  },
  {
    "text": "bottom of the read me um there's some Snippets for vs code that I use a lot and so there's",
    "start": "3563599",
    "end": "3570440"
  },
  {
    "text": "basically two that I use which are these two and so what these do is if we go to",
    "start": "3570440",
    "end": "3578200"
  },
  {
    "text": "here I can type EG and press Tab and that's going to make the generator for",
    "start": "3578200",
    "end": "3583559"
  },
  {
    "text": "me and then I can type const one equals and I type y y and that types that out",
    "start": "3583559",
    "end": "3590240"
  },
  {
    "text": "for me so that makes things pretty fast again that's at the bottom of the readme if you use vs code um and if you don't",
    "start": "3590240",
    "end": "3595680"
  },
  {
    "text": "it's probably pretty easy to translate to whatever you do use uh the one other thing that is kind",
    "start": "3595680",
    "end": "3603160"
  },
  {
    "text": "of nice about the adapter because even though we're forced to use it we can we actually make it a pipe so instead of",
    "start": "3603160",
    "end": "3610880"
  },
  {
    "text": "having to use pipe inside the adapter function you can just give it a value and a list of functions and so what this",
    "start": "3610880",
    "end": "3617359"
  },
  {
    "text": "is going to do is it's going to take this effect pipe it into map pipe it into this map and then yield the result",
    "start": "3617359",
    "end": "3623559"
  },
  {
    "text": "of all of that and so the final thing uh we're going to look at is the pipe method so the pipe",
    "start": "3623559",
    "end": "3630880"
  },
  {
    "text": "method is uh available on basically every type in effect and all it does is",
    "start": "3630880",
    "end": "3635960"
  },
  {
    "text": "instead of calling pipe with the value as the first um argument we can call the pipe method and basically the value has",
    "start": "3635960",
    "end": "3643160"
  },
  {
    "text": "kind of already been provided so we just do these functions instead so these are",
    "start": "3643160",
    "end": "3648880"
  },
  {
    "text": "uh these are essentially equivalent um and so often times it could just be",
    "start": "3648880",
    "end": "3654200"
  },
  {
    "text": "easier to type pipe instead uh there's these three functions",
    "start": "3654200",
    "end": "3659319"
  },
  {
    "text": "which I want to talk about briefly um so the first is zip so zip is basically",
    "start": "3659319",
    "end": "3664880"
  },
  {
    "text": "like effect. all but only with two effects so it's going to take two effects it's going to return a tupal of",
    "start": "3664880",
    "end": "3671079"
  },
  {
    "text": "the results so pretty simple effect. all but two effects so it's zipping together two effects and so then we have this one",
    "start": "3671079",
    "end": "3678559"
  },
  {
    "text": "kind of modification of zip called zip left and zip left you can basic think of",
    "start": "3678559",
    "end": "3685319"
  },
  {
    "text": "as effect. all and then we um are going to pipe it into effect. map and we can",
    "start": "3685319",
    "end": "3693559"
  },
  {
    "text": "call this left and right and we're going to map",
    "start": "3693559",
    "end": "3698599"
  },
  {
    "text": "to just the left just the left so that's basically what zip left is doing so it's",
    "start": "3698599",
    "end": "3703960"
  },
  {
    "text": "combining the two effects and then just taking the result of the left effect but",
    "start": "3703960",
    "end": "3709200"
  },
  {
    "text": "of course the errors will be combined because um if both error right we need that kind of result or that effect that",
    "start": "3709200",
    "end": "3714920"
  },
  {
    "text": "encompasses the computation of both of them to represent all the possible errors um but it's just going to succeed",
    "start": "3714920",
    "end": "3721119"
  },
  {
    "text": "with the type of the left result and so right is the same and so sometimes it can be a bit",
    "start": "3721119",
    "end": "3728119"
  },
  {
    "text": "confusing when to use zip right verse flatmap or zip left vers tap and so what",
    "start": "3728119",
    "end": "3734319"
  },
  {
    "text": "that looks like is right we can effect out flat map um kind of some effect we",
    "start": "3734319",
    "end": "3739520"
  },
  {
    "text": "can take like the after here and um",
    "start": "3739520",
    "end": "3746079"
  },
  {
    "text": "and then call right like effect dot succeed after and so we can do that but",
    "start": "3746079",
    "end": "3752760"
  },
  {
    "text": "we can also or how about we're just going to effect. succeed with 12 we can",
    "start": "3752760",
    "end": "3757799"
  },
  {
    "text": "also effect. zip right and the one thing I'm going to",
    "start": "3757799",
    "end": "3762960"
  },
  {
    "text": "change here is this right so these both basically do the same thing um so what's",
    "start": "3762960",
    "end": "3770480"
  },
  {
    "text": "the difference right so flat map has this function and so we don't have to take the argument from this function but",
    "start": "3770480",
    "end": "3777079"
  },
  {
    "text": "it gives us the argument and so what that is is the value of the previous effect right and so the difference here",
    "start": "3777079",
    "end": "3783440"
  },
  {
    "text": "is that zip right doesn't kind of depend on the value of the previous effect right so zip right is just saying I have",
    "start": "3783440",
    "end": "3789880"
  },
  {
    "text": "this effect I have this effect do this effect first and then return the result of this effect where this is saying do",
    "start": "3789880",
    "end": "3797319"
  },
  {
    "text": "this effect and then construct the next effect based off the result of the previous effect and so it's a bit of",
    "start": "3797319",
    "end": "3804480"
  },
  {
    "text": "semantic difference um but really it doesn't matter uh like you don't you can just do this um but if semantically you",
    "start": "3804480",
    "end": "3812000"
  },
  {
    "text": "want to like be uh as meaningful as possible right I would say that there is",
    "start": "3812000",
    "end": "3817799"
  },
  {
    "text": "some kind of difference where this says again I I depend on the result of the",
    "start": "3817799",
    "end": "3822839"
  },
  {
    "text": "previous effect where zippr says I do not depend on the result of the previous effect and so that goes the same with",
    "start": "3822839",
    "end": "3828640"
  },
  {
    "text": "zip left and tap right because zip left is going to take the result of the",
    "start": "3828640",
    "end": "3833720"
  },
  {
    "text": "previous effect of the first effect and discard the result of the second effect it's very similar to um tap I guess",
    "start": "3833720",
    "end": "3841359"
  },
  {
    "text": "there's a function I think called",
    "start": "3841359",
    "end": "3846279"
  },
  {
    "text": "tap yeah okay um and so if you want to",
    "start": "3846880",
    "end": "3853279"
  },
  {
    "text": "uh ignore basically all of that there's a function called and then and and then",
    "start": "3853279",
    "end": "3858760"
  },
  {
    "text": "is basically a combination of everything we've looked at so and then can take a value and then can take a promise and",
    "start": "3858760",
    "end": "3865880"
  },
  {
    "text": "then can take an effect and then can take a function that returns a value it can take a function that returns a promise it can take a function that",
    "start": "3865880",
    "end": "3872279"
  },
  {
    "text": "returns an effect and so if you ever want to do something after an effect you can use and then um the one thing to",
    "start": "3872279",
    "end": "3879599"
  },
  {
    "text": "notice about this though is we talked about the difference between sync and try and try and promise versus Tri",
    "start": "3879599",
    "end": "3885400"
  },
  {
    "text": "promise um if you call and then with a synchronous function it is going to be",
    "start": "3885400",
    "end": "3890440"
  },
  {
    "text": "equivalent to sync where it's like uh where it's where it says say basically I am trusting you that this function will",
    "start": "3890440",
    "end": "3896559"
  },
  {
    "text": "not throw but if you call it with a function that returns a promise um it's",
    "start": "3896559",
    "end": "3902680"
  },
  {
    "text": "going to actually not trust you so slightly different Behavior there I don't know why um I would say I I'm not",
    "start": "3902680",
    "end": "3910440"
  },
  {
    "text": "personally a big fan of doing this I would kind of wrap these into their own synchronous effect like effect. sync",
    "start": "3910440",
    "end": "3916920"
  },
  {
    "text": "with this computation or effect. promise with this computation and then you're a little bit more explicit about like am I",
    "start": "3916920",
    "end": "3922319"
  },
  {
    "text": "saying that I trust this function not to throw or am I saying I trust this promise not to reject um but combining",
    "start": "3922319",
    "end": "3929319"
  },
  {
    "text": "two effects and then can make things pretty easy if you're like there's five function I don't know what to use and",
    "start": "3929319",
    "end": "3936200"
  },
  {
    "text": "then um so to recap on",
    "start": "3936200",
    "end": "3941559"
  },
  {
    "text": "that uh we have these four combinators right so just to recap map we take an",
    "start": "3941559",
    "end": "3947440"
  },
  {
    "start": "3942000",
    "end": "4990000"
  },
  {
    "text": "effect we have a function that returns a new value and the effect that that returns will be the first effect and",
    "start": "3947440",
    "end": "3953880"
  },
  {
    "text": "then taking the success value of the first effect and calling the second effect with it um also I I it's in the",
    "start": "3953880",
    "end": "3961880"
  },
  {
    "text": "readme but I forgot to mention um the slides they're a web app there's a link in the readme to the slides they're all",
    "start": "3961880",
    "end": "3968200"
  },
  {
    "text": "available um for you after they're also if you want CD into the slides directory and you run vev you can run them locally",
    "start": "3968200",
    "end": "3975039"
  },
  {
    "text": "if you want to they're all available in markdown there's a slides on markdown file so the slides um are all there for",
    "start": "3975039",
    "end": "3982119"
  },
  {
    "text": "you flat map uh flat map transforms the value of one effect um into another",
    "start": "3982119",
    "end": "3989760"
  },
  {
    "text": "effect right so we take the first effect take the value and we have a new effect",
    "start": "3989760",
    "end": "3995039"
  },
  {
    "text": "that uses that value and flat map kind of combines them tap we perform a side",
    "start": "3995039",
    "end": "4000680"
  },
  {
    "text": "effect on the value of an effect or the kind of success of an effect without affecting the value and all we're",
    "start": "4000680",
    "end": "4008359"
  },
  {
    "text": "merging multiple effects into a single effect uh so so far we we've kind of",
    "start": "4008359",
    "end": "4014760"
  },
  {
    "text": "danced around error handling so we um you know we've looked at at errors um",
    "start": "4014760",
    "end": "4020520"
  },
  {
    "text": "but we haven't really kind of seen how to handle errors um and so now we're going to look at how to handle",
    "start": "4020520",
    "end": "4026720"
  },
  {
    "text": "errors and so effect has has really really powerful error handling and this is all kind of based around the fact",
    "start": "4026720",
    "end": "4033000"
  },
  {
    "text": "that again errors are tracked on a type level so in this example effect we're going to use throughout this this next",
    "start": "4033000",
    "end": "4039640"
  },
  {
    "text": "snippet um we have two kinds of Errors we have this Fu error which again has is it's this tag kind of denoting it as a f",
    "start": "4039640",
    "end": "4046559"
  },
  {
    "text": "error and we have a bar error um and something you're going to notice is classes right for a functional framework",
    "start": "4046559",
    "end": "4053200"
  },
  {
    "text": "classes are actually used quite a lot in effect and the reason for this is that",
    "start": "4053200",
    "end": "4058359"
  },
  {
    "text": "you're able to do a lot in kind of very few um kind of characters lines of code",
    "start": "4058359",
    "end": "4063599"
  },
  {
    "text": "right like this is constructing it's constructing a type right like we would have to make a type called bar error",
    "start": "4063599",
    "end": "4069920"
  },
  {
    "text": "that has right a readon tag and then we have to create a Constructor",
    "start": "4069920",
    "end": "4076240"
  },
  {
    "text": "function uh right I think so we could we' have to create a function called bar",
    "start": "4076240",
    "end": "4081480"
  },
  {
    "text": "error and that's going to take like the arguments and return a bar error and so class is doing all of that in at the",
    "start": "4081480",
    "end": "4087680"
  },
  {
    "text": "same time it's the only way to declare a type and a value at the exact same time in types SC and that's actually another thing",
    "start": "4087680",
    "end": "4093839"
  },
  {
    "text": "that's very common in effect declaring types and values that have the same name right so in effect we have um effect",
    "start": "4093839",
    "end": "4102600"
  },
  {
    "text": "that's going to have all the all the functions of an effect but it's also at the same time it's a name space that has",
    "start": "4102600",
    "end": "4109000"
  },
  {
    "text": "types right so the effect. effect type uh or if we kind of never right",
    "start": "4109000",
    "end": "4117560"
  },
  {
    "text": "uh so the effect type is a is a type within is an interface within the effect",
    "start": "4118679",
    "end": "4125679"
  },
  {
    "text": "namespace right where the uh this is a",
    "start": "4125679",
    "end": "4132480"
  },
  {
    "text": "value on the effect object right so types and functions are all on the same",
    "start": "4132480",
    "end": "4139400"
  },
  {
    "text": "kind of one effect uh thing that you import so classes are very common as",
    "start": "4139400",
    "end": "4146159"
  },
  {
    "text": "kind of a really really fast way of kind of prescribing behavior and so we'll see them later even extending classes so",
    "start": "4146159",
    "end": "4153238"
  },
  {
    "text": "effect will give us classes that we can extend with our own classes and these kind of are able to create a lot of behavior in kind of very very quickly so",
    "start": "4153239",
    "end": "4161359"
  },
  {
    "text": "this example we're going to use uh and we can kind of change the behavior of it so we have these three conditions so I",
    "start": "4161359",
    "end": "4167520"
  },
  {
    "text": "set them all to True right now and so if the first condition is true we're going to fail with a foo error and if the",
    "start": "4167520",
    "end": "4174719"
  },
  {
    "text": "second condition is true we're going to fail with a bar error and if the third condition is true we're going to do this thing called Dot and so Dy sounds a",
    "start": "4174719",
    "end": "4181480"
  },
  {
    "text": "little violent um and that's because it is right so I talked about defects and so D is going to create a defect and",
    "start": "4181480",
    "end": "4188318"
  },
  {
    "text": "again this is like a panic um in other kind of in in go or in rust or a uncaught exception in other languages",
    "start": "4188319",
    "end": "4194840"
  },
  {
    "text": "and this is um something that we don't expect to happen right this is like our program is in an invalid State something",
    "start": "4194840",
    "end": "4200560"
  },
  {
    "text": "is terribly wrong we need to end the program now and so this is called an unexpected error and so unexpected",
    "start": "4200560",
    "end": "4207080"
  },
  {
    "text": "errors are not tracked on the type system so if we look at here we have the foo error and the bar error in the error",
    "start": "4207080",
    "end": "4212840"
  },
  {
    "text": "type parameter but we don't have the boom because when we have an unexpected",
    "start": "4212840",
    "end": "4218239"
  },
  {
    "text": "error it's unexpected right we we have no clue what it is and so those are not tracked on the type system um because",
    "start": "4218239",
    "end": "4224920"
  },
  {
    "text": "it's it's really not worth kind of expecting them to happen if they're unexpected",
    "start": "4224920",
    "end": "4229960"
  },
  {
    "text": "errors um and there there are actually ways to recover from defects um we're",
    "start": "4229960",
    "end": "4235520"
  },
  {
    "text": "not going to look at those uh right now um but if you do need to recover from a defect there are ways to do that so we",
    "start": "4235520",
    "end": "4241920"
  },
  {
    "text": "have this effect and so this effect can either fail with a f or it can fail with a bar error and that's like encoded in",
    "start": "4241920",
    "end": "4247719"
  },
  {
    "text": "the type of that effect and so uh the other thing to kind",
    "start": "4247719",
    "end": "4253760"
  },
  {
    "text": "of talk about right now is short circuiting so effects we talked about laziness right effects as soon as they",
    "start": "4253760",
    "end": "4260760"
  },
  {
    "text": "hit the first error if there's no error handling Logic the entire program is going to stop right there and so if we",
    "start": "4260760",
    "end": "4267239"
  },
  {
    "text": "have this effect that's going to log to the console and also uh in effect so",
    "start": "4267239",
    "end": "4272360"
  },
  {
    "text": "this is like uppercase C console and so this is actually importing console from",
    "start": "4272360",
    "end": "4277600"
  },
  {
    "text": "effect and the console module in effect is basically it has all the same functions as the lowercase C console",
    "start": "4277600",
    "end": "4283760"
  },
  {
    "text": "except they're effects so uppercase C console.log returns an effect and so that way you don't have to basically do",
    "start": "4283760",
    "end": "4290040"
  },
  {
    "text": "effect. sync right console.log uh lowercase console.log",
    "start": "4290040",
    "end": "4296440"
  },
  {
    "text": "right so instead you can just do uppercase console.log uh the other thing about this is and we'll talk about this a bit",
    "start": "4296440",
    "end": "4302280"
  },
  {
    "text": "more later right we have we have Services it's possible to kind of swap out the behavior of this console um and",
    "start": "4302280",
    "end": "4309719"
  },
  {
    "text": "so we'll talk we might cover that um later but that's something cool you can do",
    "start": "4309719",
    "end": "4315320"
  },
  {
    "text": "uh so if in in this function right we are consing one um we're failing and",
    "start": "4315320",
    "end": "4320880"
  },
  {
    "text": "then we have two and so this two will not run because as soon as a failure",
    "start": "4320880",
    "end": "4326719"
  },
  {
    "text": "occurs um the program is going to stop right it's going to fail with that",
    "start": "4326719",
    "end": "4332560"
  },
  {
    "text": "error um and so the first function we're going to look at to handle errors is called catch all so catch all is similar",
    "start": "4332840",
    "end": "4339920"
  },
  {
    "text": "to to try catch right we're catching but unlike Tri catch where we get unknown",
    "start": "4339920",
    "end": "4345639"
  },
  {
    "text": "here we get a typed error right we get Foo error or bar error and this is because our effect up here we've said",
    "start": "4345639",
    "end": "4351679"
  },
  {
    "text": "the only possible errors are fo error or bar error so if we catch all the possible errors right we get either a",
    "start": "4351679",
    "end": "4357840"
  },
  {
    "text": "foo error or a bar error and then this is again where the tag becomes useful right so in this function we can um kind",
    "start": "4357840",
    "end": "4365520"
  },
  {
    "text": "of do different things based on the tag um but actually there's a another function that does this for us and",
    "start": "4365520",
    "end": "4372400"
  },
  {
    "text": "that's called catch tag and so catch tag if we uh kind of autocomplete here is it's going to look",
    "start": "4372400",
    "end": "4378880"
  },
  {
    "text": "at the error type and it's going to see all the possible errors that have that underscore tag field and so we can",
    "start": "4378880",
    "end": "4386880"
  },
  {
    "text": "handle the error where it's a foo error and then the function that kind of handles the error is only going to give",
    "start": "4386880",
    "end": "4394040"
  },
  {
    "text": "the fo error so this is only in the case where there's a fo error and then we can return an effect uh and this the effect",
    "start": "4394040",
    "end": "4400480"
  },
  {
    "text": "that we return from these catch functions this VI L it's an effect so it could be a success or it could be a failure and so if we wanted to fail",
    "start": "4400480",
    "end": "4408280"
  },
  {
    "text": "instead right we could fail with now a string instead and so this is basically saying instead of a foo error or a bar",
    "start": "4408280",
    "end": "4415480"
  },
  {
    "text": "error now we're always failing with a string um but you can have other kinds",
    "start": "4415480",
    "end": "4421719"
  },
  {
    "text": "of other kinds of logic so uh maybe specific kinds of Errors uh your",
    "start": "4421719",
    "end": "4427080"
  },
  {
    "text": "succeeding where other kinds of Errors you're kind of continuing the failure and so uh back to catch tag so",
    "start": "4427080",
    "end": "4433800"
  },
  {
    "text": "catch tag um and you also uh of course I didn't explain we're taking the errors",
    "start": "4433800",
    "end": "4441000"
  },
  {
    "text": "and this so this is the effect from the top the example effect which can either fail with a f or a bar error and we're",
    "start": "4441000",
    "end": "4447159"
  },
  {
    "text": "calling do pipe and then we're piping that into catch all so that's how we're kind of incorporating the catch logic",
    "start": "4447159",
    "end": "4454760"
  },
  {
    "text": "with our previous effect we're piping the previous effect into the catch function and that's going to return an",
    "start": "4454760",
    "end": "4459920"
  },
  {
    "text": "effect that is the previous effect plus the catch logic and so if we again notice the return",
    "start": "4459920",
    "end": "4466159"
  },
  {
    "text": "type of the catch all the error type has gone to never because we've caught every possible error in the catch tag example",
    "start": "4466159",
    "end": "4473239"
  },
  {
    "text": "the error type is now bar error because before it was bar error or Foo error we've caught the bar error and now all",
    "start": "4473239",
    "end": "4479040"
  },
  {
    "text": "that's left is the F ER there's also a function called catch tags so catch tags is basically like",
    "start": "4479040",
    "end": "4486040"
  },
  {
    "text": "catch tag but multiple tags at the same time and so what it does is it takes an object where the keys are the tags",
    "start": "4486040",
    "end": "4494159"
  },
  {
    "text": "and then the values are the functions to catch for that error so in the F error we have the F error in the bar ER we",
    "start": "4494159",
    "end": "4500280"
  },
  {
    "text": "have the bar error and so again this one the air channel is now never because we've caught all the possible",
    "start": "4500280",
    "end": "4507560"
  },
  {
    "text": "errors and so there there are a lot of functions for handling errors uh if you go to um and I think it's important to",
    "start": "4507560",
    "end": "4514320"
  },
  {
    "text": "introduce the uh API docs not all of you may be familiar um so the API docs are",
    "start": "4514320",
    "end": "4520159"
  },
  {
    "text": "available uh I think the link is on the effect website if you go to",
    "start": "4520159",
    "end": "4529239"
  },
  {
    "text": "docs and then you go all the way to the bottom you go to API reference um those are going to be available here and so",
    "start": "4530560",
    "end": "4537960"
  },
  {
    "text": "this is where I talked about it looks overwhelming um because there's a lot but if you go to effect and this is how",
    "start": "4537960",
    "end": "4543920"
  },
  {
    "text": "you can kind of find functions not brand if we go to",
    "start": "4543920",
    "end": "4549360"
  },
  {
    "text": "effect there we go and they're kind of split into categories and so I believe there is a",
    "start": "4551760",
    "end": "4559560"
  },
  {
    "text": "um error management category yeah right so error handling and here are all the error handling functions there's a lot",
    "start": "4559560",
    "end": "4565760"
  },
  {
    "text": "we're going to go over just a couple and so the next one is called or else so or",
    "start": "4565760",
    "end": "4571000"
  },
  {
    "text": "else is kind of similar to the kind of uh flat map versus zip right thing we",
    "start": "4571000",
    "end": "4576800"
  },
  {
    "text": "talked about where uh catch catch like all the catch functions are s are kind",
    "start": "4576800",
    "end": "4583360"
  },
  {
    "text": "of doing something based on the result of the error where or else you'll notice this function doesn't take any arguments",
    "start": "4583360",
    "end": "4590080"
  },
  {
    "text": "so or else is saying I don't care about the error just whatever it is do this instead so or else kind of implicitly",
    "start": "4590080",
    "end": "4597719"
  },
  {
    "text": "handles all the possible error cases and so here we're saying no matter what the error is if the error if an error occurs",
    "start": "4597719",
    "end": "4606679"
  },
  {
    "text": "instead succeed with this effect and so um you might be wondering",
    "start": "4606679",
    "end": "4613440"
  },
  {
    "text": "right like if this function doesn't take any arguments why do we have it behind a function to begin with right like we",
    "start": "4613440",
    "end": "4619320"
  },
  {
    "text": "could uh kind of in theory just do this um kind of like how zip right Works",
    "start": "4619320",
    "end": "4624520"
  },
  {
    "text": "where we don't put it behind a function um and the reason for this is because there is some kind of cost to",
    "start": "4624520",
    "end": "4631639"
  },
  {
    "text": "constructing this effect right like it's it's an object we have to allocate that object and so we kind of assume that",
    "start": "4631639",
    "end": "4637360"
  },
  {
    "text": "things are not going to fail right and so we kind of say that hey like we don't need to create this this effect create",
    "start": "4637360",
    "end": "4644600"
  },
  {
    "text": "this object if until the effect fails right when the effect fails then we can run this function and get the failure um",
    "start": "4644600",
    "end": "4651040"
  },
  {
    "text": "and so that's that's kind of why this is behind a function even though it doesn't take the the error as an",
    "start": "4651040",
    "end": "4657520"
  },
  {
    "text": "input uh the next function or else fail so or else fail uh is basically like or",
    "start": "4657520",
    "end": "4664000"
  },
  {
    "text": "else and I think there's an or else succeed as well yeah so or else takes an effect where or else succeed and or else",
    "start": "4664000",
    "end": "4670880"
  },
  {
    "text": "fail take values but they're automatically mapped to either the success or the failure channel so or else succeed takes just a value not an",
    "start": "4670880",
    "end": "4677600"
  },
  {
    "text": "effect and always uh succeeds with that value or else fail takes a value and always fails with that",
    "start": "4677600",
    "end": "4684239"
  },
  {
    "text": "value uh the next thing is map error so map error is going to modify the type or",
    "start": "4684239",
    "end": "4690440"
  },
  {
    "text": "it doesn't have to modify the type it can just modify the current error so before right we had fo error or",
    "start": "4690440",
    "end": "4696480"
  },
  {
    "text": "bar error and now we have a function that takes the foo error or the bar error and just returns an error and so",
    "start": "4696480",
    "end": "4703080"
  },
  {
    "text": "now this is error right so this is very similar to map except instead of mapping on the success Channel we're mapping on",
    "start": "4703080",
    "end": "4708239"
  },
  {
    "text": "the error channel uh another function we have effect. match and so effect. match",
    "start": "4708239",
    "end": "4715080"
  },
  {
    "text": "handles both cases at the same time so here we're saying if the previous effect",
    "start": "4715080",
    "end": "4720320"
  },
  {
    "text": "succeeds then this this kind of resulting effect should succeed with",
    "start": "4720320",
    "end": "4725440"
  },
  {
    "text": "this string and if the previous effect failed then we should succeed with this",
    "start": "4725440",
    "end": "4730679"
  },
  {
    "text": "string and there's also uh these kind of always map to the success Channel but if",
    "start": "4730679",
    "end": "4735760"
  },
  {
    "text": "you want to map to effects there's also match effect and so match effect is the same thing we have on success this is",
    "start": "4735760",
    "end": "4742199"
  },
  {
    "text": "going to return an effect and on failure this is going to return an effect and of course these are effects so they could also fail",
    "start": "4742199",
    "end": "4749239"
  },
  {
    "text": "um next function first success of so you're going to give it a list of effects and it's going to give you the",
    "start": "4749239",
    "end": "4755600"
  },
  {
    "text": "first success the first effect that succeeds in those lists so it's going to run them in order um there's also r",
    "start": "4755600",
    "end": "4763679"
  },
  {
    "text": "there's timeouts there's kind of uh I talked about that short Circ Behavior if you want to opt out of the short Circ",
    "start": "4763679",
    "end": "4769719"
  },
  {
    "text": "Behavior so you want to kind of accumulate errors there's a way to do to do that there's ways to do that as well",
    "start": "4769719",
    "end": "4775960"
  },
  {
    "text": "um and so lots of possible error handling strategies um we'll kind of look into some of them in the example",
    "start": "4775960",
    "end": "4781320"
  },
  {
    "text": "apps but uh there's basically every kind of",
    "start": "4781320",
    "end": "4787280"
  },
  {
    "text": "operation you might want to do on errors ways to kind of handle errors uh you are able to do and and so now I want to talk",
    "start": "4787280",
    "end": "4793600"
  },
  {
    "text": "about how how to handle errors in generators right all the functions we've kind of looked at so far have been pipes",
    "start": "4793600",
    "end": "4799400"
  },
  {
    "text": "right like we take our effect we pipe it into these error functions these catch functions and so how do we handle errors",
    "start": "4799400",
    "end": "4805760"
  },
  {
    "text": "in generators so there's kind of three options and so the first is to just wait",
    "start": "4805760",
    "end": "4811400"
  },
  {
    "text": "until the end of the generator to handle the error and so this is where I talked about like the Happy path right so here",
    "start": "4811400",
    "end": "4817400"
  },
  {
    "text": "we're not doing any error handling at all in the generator we're just saying",
    "start": "4817400",
    "end": "4822560"
  },
  {
    "text": "if there's an error uh kind of pass the error on but within the generator this is only the happy path this is only the",
    "start": "4822560",
    "end": "4829080"
  },
  {
    "text": "success path and then right this whole effect. gen function returns an effect",
    "start": "4829080",
    "end": "4834679"
  },
  {
    "text": "so we can then call pipe on that and that's where we can put our air handling logic so we have the effect with the",
    "start": "4834679",
    "end": "4840800"
  },
  {
    "text": "happy path and then we pipe this into our error handling logic at the end the other option",
    "start": "4840800",
    "end": "4847280"
  },
  {
    "text": "is um doing the error handling inside uh the adapter pipe right so here we're",
    "start": "4847280",
    "end": "4853920"
  },
  {
    "text": "yielding an effect that might fail so this is an effect that might error and so inside the adapter pipe that's where",
    "start": "4853920",
    "end": "4860440"
  },
  {
    "text": "we're doing our um error handling and so this is going to be a",
    "start": "4860440",
    "end": "4865760"
  },
  {
    "text": "number and this is going to have never because what this does is these kind of",
    "start": "4865760",
    "end": "4870840"
  },
  {
    "text": "combine and so then we yield that err which we've already handled air or that",
    "start": "4870840",
    "end": "4876159"
  },
  {
    "text": "effect which we've already we've already handled the air and then finally um if if you both",
    "start": "4876159",
    "end": "4883639"
  },
  {
    "text": "of these options what they don't do is give you the error as a value with inside your generator if you want the",
    "start": "4883639",
    "end": "4889800"
  },
  {
    "text": "error as a value inside your generator there's basically one way to do that and that's with effect. either and so I know",
    "start": "4889800",
    "end": "4895760"
  },
  {
    "text": "we kind of talked about the either type a bit before but the either type we'll talk about even more in a second uh but",
    "start": "4895760",
    "end": "4902679"
  },
  {
    "text": "is basically a union it's a kind of Union of two things so there's a left type and a right type and the either is",
    "start": "4902679",
    "end": "4908360"
  },
  {
    "text": "two things and so what effect. either does is it takes an effect right so we",
    "start": "4908360",
    "end": "4913480"
  },
  {
    "text": "have effect um kind of like string number and it's going to convert that",
    "start": "4913480",
    "end": "4919840"
  },
  {
    "text": "effect into a effect either string number and so what this is doing is it's",
    "start": "4919840",
    "end": "4926440"
  },
  {
    "text": "moving the error channel into the success Channel and so that way when we",
    "start": "4926440",
    "end": "4932400"
  },
  {
    "text": "yield so this effect might fail with a number or an error when we call effect.",
    "start": "4932400",
    "end": "4937440"
  },
  {
    "text": "either now this is going to return a uh uh oh it's up here it's going to",
    "start": "4937440",
    "end": "4945280"
  },
  {
    "text": "return an effect of either a number or an error and so that way when we uh get this now we can discriminate within our",
    "start": "4945280",
    "end": "4954679"
  },
  {
    "text": "generator and so if it's then there's a bunch we again we'll talk more about ISS later there's a bunch of ways to figure out kind of which side of the either you",
    "start": "4954679",
    "end": "4961280"
  },
  {
    "text": "have left or right how to operate on that value but kind of in theory we have a an is right and so if it's right then",
    "start": "4961280",
    "end": "4967920"
  },
  {
    "text": "we know that this represents the success right this is the number and if it's left well we know that this is the error",
    "start": "4967920",
    "end": "4974199"
  },
  {
    "text": "and so that's how we get the error as a value within the generators we use effect. either and then we can",
    "start": "4974199",
    "end": "4979400"
  },
  {
    "text": "discriminate whether it's a success or an error all",
    "start": "4979400",
    "end": "4986080"
  },
  {
    "text": "right um back to the slides so we have a recap slide for this",
    "start": "4986080",
    "end": "4992040"
  },
  {
    "start": "4990000",
    "end": "7562000"
  },
  {
    "text": "right so catch all we recover from all errors catch tag from one error a tagged",
    "start": "4992040",
    "end": "4997719"
  },
  {
    "text": "error we have map error it's like map but on the error Channel we have match",
    "start": "4997719",
    "end": "5003239"
  },
  {
    "text": "to handle both cases and we have either to move the error channel into the success channel so any questions about",
    "start": "5003239",
    "end": "5010280"
  },
  {
    "text": "error handling okay",
    "start": "5010280",
    "end": "5017000"
  },
  {
    "text": "yes",
    "start": "5018440",
    "end": "5021440"
  },
  {
    "text": "yes yeah we can take a look so the question was um I talked about effect. die and so how to recover from",
    "start": "5024120",
    "end": "5031480"
  },
  {
    "text": "defects",
    "start": "5031480",
    "end": "5034480"
  },
  {
    "text": "so",
    "start": "5038760",
    "end": "5041760"
  },
  {
    "text": "yes uh so the question was what are some scenarios where we want to recover from defects and so I think some scenario I",
    "start": "5050960",
    "end": "5059280"
  },
  {
    "text": "I'll get to both um some scenarios where you want to recover from defects are um probably when you're interacting with",
    "start": "5059280",
    "end": "5065040"
  },
  {
    "text": "non-ff code right so or I mean it's kind of arguable there too right like if you have a defect the Run functions are just",
    "start": "5065040",
    "end": "5071840"
  },
  {
    "text": "going to throw so then the non-ff code is probably expecting if there's an error just to throw as well I would say",
    "start": "5071840",
    "end": "5078520"
  },
  {
    "text": "like if you have um I was going to say if you have some",
    "start": "5078520",
    "end": "5084280"
  },
  {
    "text": "resources to clean up but we'll talk about resources in a sec and in resources and effect they automatically close even if there's a defect um so",
    "start": "5084280",
    "end": "5093119"
  },
  {
    "text": "uh I don't know um there are definitely scenarios where you do I would say most",
    "start": "5093119",
    "end": "5099480"
  },
  {
    "text": "of the times um in effect you basically always want",
    "start": "5099480",
    "end": "5105320"
  },
  {
    "text": "to type your errors right ideally like you're typing every error and so um",
    "start": "5105320",
    "end": "5111280"
  },
  {
    "text": "ideally you're only throwing or you're only dying in scenarios where you don't want to recover from it um and so again",
    "start": "5111280",
    "end": "5119000"
  },
  {
    "text": "if you you don't have to do that but um any scenario where you would want to recover from an error I would say you",
    "start": "5119000",
    "end": "5125080"
  },
  {
    "text": "should just not die you should use a typed error but let's look at two things so one we're going to look at how to",
    "start": "5125080",
    "end": "5130520"
  },
  {
    "text": "recover from a defect so I'm going to call this const defects and this is",
    "start": "5130520",
    "end": "5135880"
  },
  {
    "text": "going to equal effect. die and then what I'm going to do is I'm",
    "start": "5135880",
    "end": "5142040"
  },
  {
    "text": "going to pipe this into effect. as and so effect. as is a function that um and",
    "start": "5142040",
    "end": "5149119"
  },
  {
    "text": "this is actually a value uh something you'll notice",
    "start": "5149119",
    "end": "5154280"
  },
  {
    "text": "is this not a value I think this takes a",
    "start": "5154440",
    "end": "5161480"
  },
  {
    "text": "message there you go and there's also there's also there's a die message there's a couple other yeah there's a",
    "start": "5161480",
    "end": "5167880"
  },
  {
    "text": "die sync that takes a function that then generates the message um but just die I",
    "start": "5167880",
    "end": "5173239"
  },
  {
    "text": "think takes a string and so as as kind of purely uh what as does is you can",
    "start": "5173239",
    "end": "5179760"
  },
  {
    "text": "kind of think of as like a a uh a zip right where it's basically saying",
    "start": "5179760",
    "end": "5186679"
  },
  {
    "text": "whatever the previous effect did this is now going to succeed with",
    "start": "5186679",
    "end": "5191760"
  },
  {
    "text": "zero and so this is sometimes useful on like a type level where if we have a function that always fails um right so",
    "start": "5191760",
    "end": "5198760"
  },
  {
    "text": "for example we have effect. like fail uh and just some kind of string right now",
    "start": "5198760",
    "end": "5204600"
  },
  {
    "text": "this has effect. number present um even though this this effect will always fail immediately on a on a type level this is",
    "start": "5204600",
    "end": "5211840"
  },
  {
    "text": "saying like hey this if this first effect didn't fail this is going to succeed with a number um and so it can",
    "start": "5211840",
    "end": "5218639"
  },
  {
    "text": "kind of be useful for having effects that are not like if you know an effect",
    "start": "5218639",
    "end": "5224280"
  },
  {
    "text": "is going to fail or or basically it's remapping an effect to a specific value",
    "start": "5224280",
    "end": "5230040"
  },
  {
    "text": "no matter what so we're saying uh whatever this effect is kind of remap it",
    "start": "5230040",
    "end": "5235719"
  },
  {
    "text": "as zero and so in this case it's just kind of remapping this failure to have a",
    "start": "5235719",
    "end": "5241560"
  },
  {
    "text": "success type um I don't think I'm explaining that the best but back to die back to die so this",
    "start": "5241560",
    "end": "5248480"
  },
  {
    "text": "is going to create a defect so if we and I'm actually going to move this to the pad so this is just like a scratch Pad",
    "start": "5248480",
    "end": "5255239"
  },
  {
    "text": "so I'm going to import effect from effect and here and then we can effect",
    "start": "5255239",
    "end": "5260679"
  },
  {
    "text": "dot run",
    "start": "5260679",
    "end": "5264320"
  },
  {
    "text": "sync um so here we get our our defect right",
    "start": "5265960",
    "end": "5271679"
  },
  {
    "text": "it's logging out the error exiting with a non-zero exit code so if we want to handle this error we can I'm going to",
    "start": "5271679",
    "end": "5278199"
  },
  {
    "text": "rewrite this a bit differently I'm going to rewrite this um with pipe I'm going to say defects and then I'm going to",
    "start": "5278199",
    "end": "5283679"
  },
  {
    "text": "pipe this into effect. run promise or run sync",
    "start": "5283679",
    "end": "5289960"
  },
  {
    "text": "actually and the reason I'm doing that is so that we can put some other function in between here right and so",
    "start": "5289960",
    "end": "5295600"
  },
  {
    "text": "here we're going to effect. catch uh so there's catch all defect there's catch",
    "start": "5295600",
    "end": "5300679"
  },
  {
    "text": "um some defect so I'm to say catch all defect and this is going to give us uh the",
    "start": "5300679",
    "end": "5306800"
  },
  {
    "text": "defect and it's going to take I'm just going to say effect. [Music]",
    "start": "5306800",
    "end": "5313159"
  },
  {
    "text": "succeed zero for now need a comma uh and the defect is of type",
    "start": "5313159",
    "end": "5320000"
  },
  {
    "text": "unknown right because we have no clue what it is it's like try catch and so this is how you would do that there's catch some defect instead and so some",
    "start": "5320000",
    "end": "5326960"
  },
  {
    "text": "some defect is going to give you a way to say um to kind of inspect that value",
    "start": "5326960",
    "end": "5333320"
  },
  {
    "text": "where this is going to no matter what the defect is we're recovering from it where catch some defects is going to",
    "start": "5333320",
    "end": "5339199"
  },
  {
    "text": "give you a chance to say uh like here's the defect I want to recover from here's a defect I don't want you to recover",
    "start": "5339199",
    "end": "5345199"
  },
  {
    "text": "from and if you don't recover from it obviously it's going to continue to defect and so if we do this instead um",
    "start": "5345199",
    "end": "5351239"
  },
  {
    "text": "obviously it's going to succeed the one other thing and again we'll talk about exit in a second but if you run sync",
    "start": "5351239",
    "end": "5357840"
  },
  {
    "text": "exit we're going to get an exit and um we can just talk about this now",
    "start": "5357840",
    "end": "5364400"
  },
  {
    "text": "so an exit is conceptually equal to an either of the a or a cause",
    "start": "5364400",
    "end": "5370840"
  },
  {
    "text": "e and so I can't type so an exit is basically either the",
    "start": "5370840",
    "end": "5377719"
  },
  {
    "text": "success or this cause type and so the cause type represents a bunch of",
    "start": "5377719",
    "end": "5383480"
  },
  {
    "text": "possible failure cases right because having one possible failure case might seem powerful um but what about when you",
    "start": "5383480",
    "end": "5389800"
  },
  {
    "text": "have parallel errors right like when you're doing two things concurrently and they both error are we going to return",
    "start": "5389800",
    "end": "5395280"
  },
  {
    "text": "the one that happened first or are we going to return both um and so in cause",
    "start": "5395280",
    "end": "5400960"
  },
  {
    "text": "we can so there's a function if we import exit there's exit. match and so",
    "start": "5400960",
    "end": "5407000"
  },
  {
    "text": "we can pass it our exit and then we can give",
    "start": "5407000",
    "end": "5412239"
  },
  {
    "text": "it right so exit is an either right so there's either a success or this cause",
    "start": "5414119",
    "end": "5419320"
  },
  {
    "text": "and then inside the cause we can import cause and we can match on the cause and the",
    "start": "5419320",
    "end": "5424920"
  },
  {
    "text": "reason I'm matching on this is so that you can see all the all the match arms and so you can see that so here are",
    "start": "5424920",
    "end": "5431800"
  },
  {
    "text": "all the possible kind of members of the cause Union so there's empty which basically represents no error or success",
    "start": "5431800",
    "end": "5438760"
  },
  {
    "text": "there's just a simple failure there's a die which represents a defect there's an",
    "start": "5438760",
    "end": "5443960"
  },
  {
    "text": "interrupt right if like something gets interrupted that's so you can think of the cause as kind of like the output of",
    "start": "5443960",
    "end": "5450679"
  },
  {
    "text": "a program right so a program um it's kind of simplistic again to look at it as either a success or an error so here",
    "start": "5450679",
    "end": "5457280"
  },
  {
    "text": "we can say um it either succeeded or it failed or it died or it was interrupted and then we have these either sequential",
    "start": "5457280",
    "end": "5463040"
  },
  {
    "text": "errors or parallel errors and so the cause um data type is kind of how even",
    "start": "5463040",
    "end": "5468840"
  },
  {
    "text": "without kind of catching a defect we can encode the result of our program",
    "start": "5468840",
    "end": "5474880"
  },
  {
    "text": "um handling kind of these possible uh cases that are kind of more advanced",
    "start": "5474880",
    "end": "5479960"
  },
  {
    "text": "than just success or error does that answer your question okay uh so the next thing we're going to",
    "start": "5479960",
    "end": "5486800"
  },
  {
    "text": "look at is context management so I talked about effects third type parameter right and so uh in effects",
    "start": "5486800",
    "end": "5495520"
  },
  {
    "text": "third type parameter is where it stores the types of the services oh I think we're we're at 11 here um so we're going",
    "start": "5495520",
    "end": "5502080"
  },
  {
    "text": "to continue uh this first part we're most of the way through it uh when we get back but we are going to take a",
    "start": "5502080",
    "end": "5507679"
  },
  {
    "text": "15-minute break definitely get some water and uh yeah thank you thank you everyone so we'll come back at 11:15 I",
    "start": "5507679",
    "end": "5515830"
  },
  {
    "text": "[Applause] believe uh I think we're just going to go ahead and start um by the way we are",
    "start": "5515830",
    "end": "5522920"
  },
  {
    "text": "a bit behind schedule but like I said we're probably not going to get to get to everything that's totally okay uh",
    "start": "5522920",
    "end": "5528520"
  },
  {
    "text": "what's probably going to come out is like the second half of the the second app um but we are definitely going to get to the um the final part at the end",
    "start": "5528520",
    "end": "5537080"
  },
  {
    "text": "for sure so that's that's really important so um the were a couple questions during",
    "start": "5537080",
    "end": "5542560"
  },
  {
    "text": "the break that I want to kind of to answer to everyone and so the first was",
    "start": "5542560",
    "end": "5548239"
  },
  {
    "text": "about how to handle um kind of excessive nesting of pipes so we have a pipe and",
    "start": "5548239",
    "end": "5553560"
  },
  {
    "text": "then inside our pipeline we're piping even more then inside that pipeline we're piping even more and so there's a couple solutions to that um one this is",
    "start": "5553560",
    "end": "5561400"
  },
  {
    "text": "not really a solution but it's something kind of good to know about is this function called flow and flow is",
    "start": "5561400",
    "end": "5566639"
  },
  {
    "text": "basically a pipe but uh without the kind of value as the first argument so instead of of um kind of composing",
    "start": "5566639",
    "end": "5573360"
  },
  {
    "text": "functions and then applying it to the first argument we're just composing the functions and that's going to return a function that represents kind of all",
    "start": "5573360",
    "end": "5579960"
  },
  {
    "text": "those Transformations and so this can be useful for kind of separating out logic so if we want to kind of declare a bunch",
    "start": "5579960",
    "end": "5587480"
  },
  {
    "text": "of functions kind of externally as one function we can use flow to do that right so here we have these functions",
    "start": "5587480",
    "end": "5593920"
  },
  {
    "text": "and flow is going to be a function that takes some input the input to the first function and then calls the first",
    "start": "5593920",
    "end": "5599679"
  },
  {
    "text": "function calls the second function calls the next function the one thing that is kind of hard about doing this with effect is that you lose",
    "start": "5599679",
    "end": "5606040"
  },
  {
    "text": "a lot of type inference right so if we try to like map and catch all and map um",
    "start": "5606040",
    "end": "5612119"
  },
  {
    "text": "we don't really get the type inference that really Powers a lot of the effects uh functions and so uh this is something",
    "start": "5612119",
    "end": "5618719"
  },
  {
    "text": "kind of good to know but something I don't think I've I've ever used flow really um the other solution and there's",
    "start": "5618719",
    "end": "5624199"
  },
  {
    "text": "a whole uh dedicated docs page to this um it's on the left if you scroll down to code style to simplifying accessive",
    "start": "5624199",
    "end": "5631880"
  },
  {
    "text": "nesting um the kind of most simple solution is just to use effect. gen",
    "start": "5631880",
    "end": "5637440"
  },
  {
    "text": "right because in effect. gen we can uh and the to kind of show the thing we're",
    "start": "5637440",
    "end": "5642520"
  },
  {
    "text": "trying to prevent here we have this and the reason this happens is because we have effects that are dependent on",
    "start": "5642520",
    "end": "5648199"
  },
  {
    "text": "another effect that are dependent on another effect and so we have this kind of series of indentations and so with",
    "start": "5648199",
    "end": "5653400"
  },
  {
    "text": "effect. Gen we can kind of store the results of previous effects uh in one",
    "start": "5653400",
    "end": "5658639"
  },
  {
    "text": "function right rather than having this is like the same as like the kind of uh call back hell with promises right",
    "start": "5658639",
    "end": "5663920"
  },
  {
    "text": "instead of needing excessive callbacks we can store the results of previous computations so uh the question I had",
    "start": "5663920",
    "end": "5670159"
  },
  {
    "text": "was they want this kind of uh ability to store values without creating more callbacks but they don't want to use",
    "start": "5670159",
    "end": "5676080"
  },
  {
    "text": "generators they it's really like pipes right and so the solution to that is this function called effect. do and so",
    "start": "5676080",
    "end": "5682320"
  },
  {
    "text": "we have this do simulation which is a very functional thing if you come from like hasal um but this is actually doing",
    "start": "5682320",
    "end": "5688679"
  },
  {
    "text": "basically the same thing so here we're declaring variabl right we have a variable that's the result of an effect we have a variable",
    "start": "5688679",
    "end": "5694480"
  },
  {
    "text": "that's the result of effect here we're binding the result of an effect to this like string value and we're binding the",
    "start": "5694480",
    "end": "5701360"
  },
  {
    "text": "result of this effect to the string value and what this is doing is effect. do actually returns an effect whose",
    "start": "5701360",
    "end": "5708960"
  },
  {
    "text": "value whose like success is just this empty object and instead of having like a function scope this object represents",
    "start": "5708960",
    "end": "5715800"
  },
  {
    "text": "the scope and so when we declare a variable we're just giving this object a",
    "start": "5715800",
    "end": "5721560"
  },
  {
    "text": "value we're giving this object a value and so you can see um we can kind of use",
    "start": "5721560",
    "end": "5728000"
  },
  {
    "text": "variables from our scope by kind of unwrapping the result of the previous effect um so we can create a new",
    "start": "5728000",
    "end": "5735199"
  },
  {
    "text": "variable based off the the previous variables and we can kind of look at the current variables because they're just an object and so that's a way if you",
    "start": "5735199",
    "end": "5741679"
  },
  {
    "text": "don't want to use gen to uh yeah to kind of simplify the",
    "start": "5741679",
    "end": "5747400"
  },
  {
    "text": "excessiveness uh so now we are going to talk about um context",
    "start": "5747400",
    "end": "5754119"
  },
  {
    "text": "management and uh context management is again the third type parameter I talked",
    "start": "5754119",
    "end": "5759679"
  },
  {
    "text": "about where we can store these services or these dependencies that an effect requires and a question I also got",
    "start": "5759679",
    "end": "5766280"
  },
  {
    "text": "during the break was um when do you kind of uh the difference between function",
    "start": "5766280",
    "end": "5771600"
  },
  {
    "text": "arguments and these effect dependencies and so you can kind of think of this right like if we have a function called",
    "start": "5771600",
    "end": "5778159"
  },
  {
    "text": "like add one and this takes a number and it adds one to the number right like",
    "start": "5778159",
    "end": "5784760"
  },
  {
    "text": "the number that we're passing to it is kind of like the most simple dependency to this function right like we're giving this some that it requires before it can",
    "start": "5784760",
    "end": "5792159"
  },
  {
    "text": "run and so uh in effect you can create functions like this the same way right",
    "start": "5792159",
    "end": "5797440"
  },
  {
    "text": "you can have add one and this can uh take a number and return a effect.",
    "start": "5797440",
    "end": "5804800"
  },
  {
    "text": "success um that is Success succeed X plus one",
    "start": "5804800",
    "end": "5811639"
  },
  {
    "text": "right like you can you can do this uh and that is totally okay that is a very simple way of providing some kind",
    "start": "5811639",
    "end": "5818239"
  },
  {
    "text": "of dependency to a function but the other thing that you can do and we'll see in a SE is you can also create like",
    "start": "5818239",
    "end": "5823960"
  },
  {
    "text": "we can declare a add one service and this is going to be a effect.",
    "start": "5823960",
    "end": "5831280"
  },
  {
    "text": "effect that returns a number uh never requires like a a x",
    "start": "5831280",
    "end": "5838480"
  },
  {
    "text": "service and we could just say typ or don't worry about that for now",
    "start": "5838480",
    "end": "5844920"
  },
  {
    "text": "right and so this uh kind of theor or conceptually is very similar right so",
    "start": "5844920",
    "end": "5850480"
  },
  {
    "text": "here we're requiring some dependency through a function argument here this is not a function right like this is just a",
    "start": "5850480",
    "end": "5855960"
  },
  {
    "text": "value and we're requiring the dependency through this kind of dependencies type",
    "start": "5855960",
    "end": "5861239"
  },
  {
    "text": "parameter and so it can kind of be a bit of a blurry line of when should we pass",
    "start": "5861239",
    "end": "5866320"
  },
  {
    "text": "something to a function and when should it become a dependency like a service that's what they're call and So my",
    "start": "5866320",
    "end": "5873159"
  },
  {
    "text": "answer is there's kind of different categories of things so if you have like a database right like that's the best example a database is something that um",
    "start": "5873159",
    "end": "5881360"
  },
  {
    "text": "is not really kind of uh specific to this function right like we have lots of",
    "start": "5881360",
    "end": "5887520"
  },
  {
    "text": "functions that may require a database and so a database is something also that we might use kind of a lot through our application it's something that we might",
    "start": "5887520",
    "end": "5894000"
  },
  {
    "text": "want to swap out the implementation of and so that's a really good candidate for something as a service but if you",
    "start": "5894000",
    "end": "5900000"
  },
  {
    "text": "have a function called called like get by ID you could make the ID a service um",
    "start": "5900000",
    "end": "5906080"
  },
  {
    "text": "but it doesn't make a ton of sense right it probably makes more sense to create a function that takes an ID and returns an",
    "start": "5906080",
    "end": "5911280"
  },
  {
    "text": "effect with that ID um so with that said what are services so services are some",
    "start": "5911280",
    "end": "5916679"
  },
  {
    "text": "kind of functionality that an effect requires to run and they're defined by their type signature and the reason that",
    "start": "5916679",
    "end": "5922800"
  },
  {
    "text": "they're defined by their type signature is because when we use the service we use it completely independently of the",
    "start": "5922800",
    "end": "5929599"
  },
  {
    "text": "implementation of the service so we use the service just by its type signature so we get the service and we get",
    "start": "5929599",
    "end": "5935880"
  },
  {
    "text": "something of the value of the type of the service and then we can use that thing because we know the types and then",
    "start": "5935880",
    "end": "5943159"
  },
  {
    "text": "later somewhere else uh completely separately we can",
    "start": "5943159",
    "end": "5948280"
  },
  {
    "text": "provide some value as long as it's the same type and so that's kind of where we",
    "start": "5948280",
    "end": "5953719"
  },
  {
    "text": "can uh depend on Services based on their types and provide services again based",
    "start": "5953719",
    "end": "5959280"
  },
  {
    "text": "on their types but these are very separate things and so now we'll look at kind of how that looks in",
    "start": "5959280",
    "end": "5964400"
  },
  {
    "text": "practice so here we're defining the type of our service so this service is going to be a service that generates random",
    "start": "5964400",
    "end": "5971040"
  },
  {
    "text": "numbers so it has one property called Next and one function called Next in",
    "start": "5971040",
    "end": "5976320"
  },
  {
    "text": "between and so uh a lot of the times with kind of random things you expect next to be like a method right like we",
    "start": "5976320",
    "end": "5982560"
  },
  {
    "text": "call next and that's because without effects the only way for something to be lazy and of course generating a random",
    "start": "5982560",
    "end": "5987679"
  },
  {
    "text": "number is something that we want to be lazy we don't want that to happen until we call next normally that's a function but a lot of the time in effect if you",
    "start": "5987679",
    "end": "5995080"
  },
  {
    "text": "have a function that takes no arguments and returns an effect most of the time that can just be a value right like this",
    "start": "5995080",
    "end": "6002239"
  },
  {
    "text": "is just a value there's no need to make this a method because um usually constructing effects",
    "start": "6002239",
    "end": "6008760"
  },
  {
    "text": "uh is is pure it doesn't have side effects um that sometimes isn't the case but most of the time there's no need to",
    "start": "6008760",
    "end": "6015000"
  },
  {
    "text": "make a function that has no arguments that returns an effect you could just make it a value so we have a value that",
    "start": "6015000",
    "end": "6020320"
  },
  {
    "text": "is an effect that returns a number and we have a function that takes two numbers and returns in effect that returns a number so this is the type of",
    "start": "6020320",
    "end": "6028280"
  },
  {
    "text": "our service and so now we're going to create a tag and a tag is a placeholder",
    "start": "6028280",
    "end": "6034159"
  },
  {
    "text": "for our service and so the tag is uh is a class and this is where I talked about using classes and so there's a way to do",
    "start": "6034159",
    "end": "6040760"
  },
  {
    "text": "this without classes but classes make this super convenient right this is literally a single line and so we extend",
    "start": "6040760",
    "end": "6046320"
  },
  {
    "text": "context. tag and so we import context from effect and so we give it a couple",
    "start": "6046320",
    "end": "6051560"
  },
  {
    "text": "things so we give it a string tag and this is important because uh this does",
    "start": "6051560",
    "end": "6057199"
  },
  {
    "text": "two things so this is what separates it in the types right so if you have two tags that have the same uh like",
    "start": "6057199",
    "end": "6065080"
  },
  {
    "text": "interface and the same string tag um actually I don't think it's the",
    "start": "6065080",
    "end": "6070639"
  },
  {
    "text": "interface but anyways what's really important is that these tags are unique throughout your application that's very",
    "start": "6070639",
    "end": "6075880"
  },
  {
    "text": "very important because on a type level and on a runtime level the string is how",
    "start": "6075880",
    "end": "6081360"
  },
  {
    "text": "effect is going to map your tags to your services so basically how it's going to inject the services at runtime so it's",
    "start": "6081360",
    "end": "6087679"
  },
  {
    "text": "very very important that these tags are unique between your services so a lot of times what you'll see is you can have",
    "start": "6087679",
    "end": "6092800"
  },
  {
    "text": "like a like an app like the name of your app slash like the module slash like randomrandom right and so if you do that",
    "start": "6092800",
    "end": "6099880"
  },
  {
    "text": "very unlikely you'd name something else the same thing um but it's very very important that these are unique strings",
    "start": "6099880",
    "end": "6105639"
  },
  {
    "text": "throughout your entire application and so then this takes two generics uh two type parameters so the",
    "start": "6105639",
    "end": "6112239"
  },
  {
    "text": "first is actually the the class that you're defining so this is the same name we're using it within its own definition",
    "start": "6112239",
    "end": "6118280"
  },
  {
    "text": "and the next is the type of the service so this is the type of the thing that we",
    "start": "6118280",
    "end": "6123360"
  },
  {
    "text": "are consuming and the type of the thing that we're uh injecting later and so this is where and you can Define this",
    "start": "6123360",
    "end": "6128560"
  },
  {
    "text": "like in line right like we could Define this down here but you can also Define it externally and so the class random again",
    "start": "6128560",
    "end": "6135880"
  },
  {
    "text": "this is a tag and so the tag we are going to use in our effects as if it was",
    "start": "6135880",
    "end": "6141760"
  },
  {
    "text": "the real thing and then later we're going to provide the thing so let's take",
    "start": "6141760",
    "end": "6147239"
  },
  {
    "text": "a look at using it so using it as as simple as calling yield on the tag and",
    "start": "6147239",
    "end": "6153480"
  },
  {
    "text": "so this is the same as like you could also um effect. map random and then you'll",
    "start": "6153480",
    "end": "6161239"
  },
  {
    "text": "see here in a second uh so Random these tags they're",
    "start": "6161239",
    "end": "6167840"
  },
  {
    "text": "what's known as a subtype of effect so we can use them anywhere we would use an effect so just like we would yield an",
    "start": "6167840",
    "end": "6174400"
  },
  {
    "text": "effect we can yield a tag just like we would map an effect we can map a tag and so there's a couple types like this that",
    "start": "6174400",
    "end": "6179960"
  },
  {
    "text": "we'll look at um and so these are very useful because all the effect functions we already know are going to work with",
    "start": "6179960",
    "end": "6185760"
  },
  {
    "text": "all these types that are subtypes of effect so when we use a tag as an effect",
    "start": "6185760",
    "end": "6191800"
  },
  {
    "text": "what it's going to give back is the type of the kind of implementation we told it",
    "start": "6191800",
    "end": "6196920"
  },
  {
    "text": "right so now we yield the random and what this is doing it's getting the uh",
    "start": "6196920",
    "end": "6205159"
  },
  {
    "text": "it's at runtime right there's going to exist some real value for this service",
    "start": "6205159",
    "end": "6211719"
  },
  {
    "text": "and so that is what's going to be returned here right but we're this is completely independent of whatever that ends up being so then just like uh as if",
    "start": "6211719",
    "end": "6219440"
  },
  {
    "text": "it were the real thing we can call next in between and we can also we could call next instead right so this random is",
    "start": "6219440",
    "end": "6227480"
  },
  {
    "text": "whatever type we said it would be and you'll notice that when we consume uh this random tag the random is now going",
    "start": "6227480",
    "end": "6235560"
  },
  {
    "text": "to appear in the third type parameter right so this is saying this effect requires something of the random type",
    "start": "6235560",
    "end": "6243480"
  },
  {
    "text": "like the random service to be provided to it before you can run it because if we don't do that like there's no way to",
    "start": "6243480",
    "end": "6249400"
  },
  {
    "text": "run this without a random like the code doesn't work right and so you'll see that we get a",
    "start": "6249400",
    "end": "6255679"
  },
  {
    "text": "type error here and if you scroll to the bottom it's going to say type random is not assignable to type never right the",
    "start": "6255679",
    "end": "6260840"
  },
  {
    "text": "third type parameter must be never before we can run effects and so what we need to do now is",
    "start": "6260840",
    "end": "6268920"
  },
  {
    "text": "provide the implementation of the service and so the way we can do that is",
    "start": "6268920",
    "end": "6276159"
  },
  {
    "text": "create like some object that represents the actual implementation of that service and so the really common way to",
    "start": "6276159",
    "end": "6281599"
  },
  {
    "text": "name these is live so this is random live and the reason it's called live is because this is what's going to be used",
    "start": "6281599",
    "end": "6287000"
  },
  {
    "text": "when the program is actually running right like at runtime this is the live ver version of that service so here",
    "start": "6287000",
    "end": "6292440"
  },
  {
    "text": "right we just return effect. Sync math.random here we have a function that returns effect. sync math. random with",
    "start": "6292440",
    "end": "6298080"
  },
  {
    "text": "some some more math and so now what we can do is use the effect. provid service function so we're taking our program",
    "start": "6298080",
    "end": "6304119"
  },
  {
    "text": "which again requires a random and we're piping it into effect. provide service and provide service takes two things it",
    "start": "6304119",
    "end": "6310599"
  },
  {
    "text": "takes the tag that you're providing and it takes the thing of the type of that service and then what we get out of that",
    "start": "6310599",
    "end": "6318320"
  },
  {
    "text": "is the effect without that service require right we fulfilled that requirement so now there that type that",
    "start": "6318320",
    "end": "6324760"
  },
  {
    "text": "so now that effect no longer requires that service and then we can run that effect so if we run that",
    "start": "6324760",
    "end": "6331719"
  },
  {
    "text": "get this is eight need a",
    "start": "6331719",
    "end": "6337440"
  },
  {
    "text": "dash uh that's because there's a declare somewhere here I forgot about that but in theory if we run this right now",
    "start": "6337800",
    "end": "6344719"
  },
  {
    "text": "what's going to happen is it's going to execute this effect and when it gets to here it's going to say pull the whatever",
    "start": "6344719",
    "end": "6352400"
  },
  {
    "text": "the live implementation of random is that you've given me from the context there's this thing called the context that stores all the services so it's",
    "start": "6352400",
    "end": "6359400"
  },
  {
    "text": "going to say give me the random service from the context and it knows what servic is which Again by this string",
    "start": "6359400",
    "end": "6365199"
  },
  {
    "text": "identifier that's why it needs to be unique and then it's going to give it whatever you provided it and then use",
    "start": "6365199",
    "end": "6372599"
  },
  {
    "text": "it um and so again you can start to see how uh this can be very useful for we",
    "start": "6372599",
    "end": "6379119"
  },
  {
    "text": "can create tags for a database or we can create tags for a logger or we can",
    "start": "6379119",
    "end": "6384280"
  },
  {
    "text": "create tags for um all kinds of things and just like how errors kind of Stack up uh we can have effects that depend on",
    "start": "6384280",
    "end": "6391480"
  },
  {
    "text": "multiple services and if we only provide one service all those other services are still going to be there um and only when",
    "start": "6391480",
    "end": "6397639"
  },
  {
    "text": "we've provided all the services that's when it's finally going to be runnable um does anyone have any",
    "start": "6397639",
    "end": "6404280"
  },
  {
    "text": "questions right now yes",
    "start": "6404280",
    "end": "6409400"
  },
  {
    "text": "kind okay great question so they said is this tagging kind of also possible with",
    "start": "6409400",
    "end": "6415560"
  },
  {
    "text": "errors so I would say this tag is very different from like the uh underscore",
    "start": "6415560",
    "end": "6421560"
  },
  {
    "text": "tag field right like uh right this tag",
    "start": "6421560",
    "end": "6427080"
  },
  {
    "text": "is not the same as this tag uh and so like with errors like you",
    "start": "6427080",
    "end": "6433159"
  },
  {
    "text": "wouldn't really want to create a service for an error um you want to create",
    "start": "6433159",
    "end": "6438280"
  },
  {
    "text": "services for like functionality and so uh does that kind of answer your",
    "start": "6438280",
    "end": "6443400"
  },
  {
    "text": "question okay um yeah yeah so the service can be",
    "start": "6443400",
    "end": "6449560"
  },
  {
    "text": "anything the service could be a value like it could be a single constant it could be a big object right um and that",
    "start": "6449560",
    "end": "6456840"
  },
  {
    "text": "object could have functions that do anything right it could be normal functions it could be functions that return effects the service could be an",
    "start": "6456840",
    "end": "6463880"
  },
  {
    "text": "effect itself although that doesn't make a lot of sense um so what's a good example um",
    "start": "6463880",
    "end": "6472320"
  },
  {
    "text": "like later uh this kind of later in the app we're going to rewrite at one point we have we create like a a websocket",
    "start": "6472400",
    "end": "6478760"
  },
  {
    "text": "server right and the websocket server is a class right new websocket server and so what we do is we create a tag that",
    "start": "6478760",
    "end": "6484960"
  },
  {
    "text": "represents the websocket server and so we can use the websocket server in our effects and then later provide the",
    "start": "6484960",
    "end": "6492520"
  },
  {
    "text": "websocket server um so that's one",
    "start": "6492520",
    "end": "6498520"
  },
  {
    "text": "example",
    "start": "6499239",
    "end": "6502239"
  },
  {
    "text": "yes so yes um the tag API changed um",
    "start": "6505000",
    "end": "6510159"
  },
  {
    "text": "quite recently and so before you used to have to do um a couple things like there",
    "start": "6510159",
    "end": "6516159"
  },
  {
    "text": "would be two different types you'd have to declare there would be one type and there still kind of is that right like",
    "start": "6516159",
    "end": "6521679"
  },
  {
    "text": "there's uh the implementation type and the kind of identifier type like these are kind of two separate things and this",
    "start": "6521679",
    "end": "6527880"
  },
  {
    "text": "is important for how effect implements this right right um all you need to know is that like this type is the type of",
    "start": "6527880",
    "end": "6535280"
  },
  {
    "text": "the thing right the the type of the thing you're using in your effects the type of the thing you're providing is",
    "start": "6535280",
    "end": "6541119"
  },
  {
    "text": "this second type parameter that and then this is how effect because effect like",
    "start": "6541119",
    "end": "6548040"
  },
  {
    "text": "just from this type there's no way for effect to like um kind of figure out",
    "start": "6548040",
    "end": "6553960"
  },
  {
    "text": "like when you call uh when you use the service effect has to know which Serv it",
    "start": "6553960",
    "end": "6560520"
  },
  {
    "text": "is it can't do that from the type of the thing and so that's where this string",
    "start": "6560520",
    "end": "6565760"
  },
  {
    "text": "tag comes in again it used to be like you used to have to declare like a unique symbol type um but now it is only",
    "start": "6565760",
    "end": "6572440"
  },
  {
    "text": "based off the",
    "start": "6572440",
    "end": "6574920"
  },
  {
    "text": "string um uh I mean let's let's see let's see Michael might know this",
    "start": "6580280",
    "end": "6588400"
  },
  {
    "text": "but",
    "start": "6589119",
    "end": "6592119"
  },
  {
    "text": "app name you're not going to name the same way but yes you can think of",
    "start": "6603440",
    "end": "6613639"
  },
  {
    "text": "context a map where you have keys Andes and the",
    "start": "6613639",
    "end": "6619040"
  },
  {
    "text": "identif",
    "start": "6619040",
    "end": "6622040"
  },
  {
    "text": "yeah so that's where I talked",
    "start": "6628440",
    "end": "6631198"
  },
  {
    "text": "about so if you have like in your app this is a way that like again you can almost surely make sure that you're not",
    "start": "6634679",
    "end": "6640760"
  },
  {
    "text": "going to interfere with anything if you're using a library you can call this the name of your library um and then also on on the type level the example I",
    "start": "6640760",
    "end": "6647960"
  },
  {
    "text": "want to show here is uh",
    "start": "6647960",
    "end": "6655599"
  },
  {
    "text": "see here if we get rid of this um so this is an example of like an",
    "start": "6657760",
    "end": "6665880"
  },
  {
    "text": "external Library tag so This Server type comes from some other Library I in in",
    "start": "6665880",
    "end": "6670920"
  },
  {
    "text": "this example this is like a very far example but uh this is an example of a tag that does not come from a libr like",
    "start": "6670920",
    "end": "6677480"
  },
  {
    "text": "I this is not a tag I declare this is some Library tag and so um in your effects it is like you can't see the",
    "start": "6677480",
    "end": "6684960"
  },
  {
    "text": "kind of uh prefix name I think there might be a way but basically if you are",
    "start": "6684960",
    "end": "6691040"
  },
  {
    "text": "uh declaring tags that have a very generic name in a library uh it might be useful to name them kind of uh more",
    "start": "6691040",
    "end": "6698360"
  },
  {
    "text": "specific to your library names um and so that way again here server I don't",
    "start": "6698360",
    "end": "6704199"
  },
  {
    "text": "really know where the server is coming from like I do um because like I know what library it's coming from but if you",
    "start": "6704199",
    "end": "6709280"
  },
  {
    "text": "have a library that what's like something super common",
    "start": "6709280",
    "end": "6714639"
  },
  {
    "text": "uh there's also like a couple names I think effect uses internally like if you're making something called logger",
    "start": "6714639",
    "end": "6721040"
  },
  {
    "text": "um I think it it's kind of a a fine line like obviously if you know how you're",
    "start": "6721280",
    "end": "6727040"
  },
  {
    "text": "using your own services and you want to give them very common names um but in in a library context uh it might be useful",
    "start": "6727040",
    "end": "6733560"
  },
  {
    "text": "to give them more descriptive names kind of unique to your library uh hopefully",
    "start": "6733560",
    "end": "6739159"
  },
  {
    "text": "that did that answer your question okay um so next we're going to look at",
    "start": "6739159",
    "end": "6744560"
  },
  {
    "text": "uh with this function effect. provid Service uh you'll notice that the the service we're giving it is just a value",
    "start": "6744560",
    "end": "6750880"
  },
  {
    "text": "like it is one value um and so you might wonder well how do we create uh services",
    "start": "6750880",
    "end": "6757520"
  },
  {
    "text": "from effects right like let's say I have an effect that generates this random thing um probably creating this random",
    "start": "6757520",
    "end": "6766840"
  },
  {
    "text": "thing a good example of this actually for random is let's say gen we want to generate a seed right our random thing",
    "start": "6766840",
    "end": "6772639"
  },
  {
    "text": "has a seed and we want to generate the seed and the generation of that seed is a side effect right like we want to",
    "start": "6772639",
    "end": "6779239"
  },
  {
    "text": "effect. sync generate the seed right and then we want to construct our random",
    "start": "6779239",
    "end": "6784400"
  },
  {
    "text": "service using that seed right so basically we are constructing the effect effect um the way you can do that is",
    "start": "6784400",
    "end": "6792599"
  },
  {
    "text": "this layer type um and the other thing the layer type does that's really important is when our dependencies",
    "start": "6792599",
    "end": "6800119"
  },
  {
    "text": "themselves have dependencies so those are two separate use cases creating dependencies from effects and creating",
    "start": "6800119",
    "end": "6807320"
  },
  {
    "text": "dependencies from other dependencies so uh for the first one right like let's",
    "start": "6807320",
    "end": "6812920"
  },
  {
    "text": "say uh we are going to con uh make random and this is going to be a effect.",
    "start": "6812920",
    "end": "6822079"
  },
  {
    "text": "sync and this is going to let's just say generate I'm I'm going to call math. random here but let's imagine this is",
    "start": "6822079",
    "end": "6829000"
  },
  {
    "text": "like generating the seed right like it's doing something effectful and then uh we can pipe this",
    "start": "6829000",
    "end": "6835040"
  },
  {
    "text": "to effect. map and then we're just going to throw",
    "start": "6835040",
    "end": "6840159"
  },
  {
    "text": "this exact same thing in",
    "start": "6840159",
    "end": "6843119"
  },
  {
    "text": "there and so now instead of a random imple right we have a effect that",
    "start": "6848560",
    "end": "6854639"
  },
  {
    "text": "succeeds with a random inut and so the way we can uh use",
    "start": "6854639",
    "end": "6861678"
  },
  {
    "text": "the way we can create uh I'm sorry the way we can create services from effects",
    "start": "6864800",
    "end": "6872320"
  },
  {
    "text": "is using uh the layer thing as I talked about so layers have three type parameters very similar to effects and",
    "start": "6872320",
    "end": "6878920"
  },
  {
    "text": "so like effect has a success an error and a requirements a layer has a out an",
    "start": "6878920",
    "end": "6884679"
  },
  {
    "text": "error and an in so the out is what services this layer creat creates so um",
    "start": "6884679",
    "end": "6892880"
  },
  {
    "text": "and so for as an example here uh we can call this random layer",
    "start": "6892880",
    "end": "6899239"
  },
  {
    "text": "and this is going to be layer. effect it's going to be random our tag and then the the make",
    "start": "6899239",
    "end": "6906719"
  },
  {
    "text": "random that's not right layer and this is something you",
    "start": "6907639",
    "end": "6913639"
  },
  {
    "text": "also need to import from effect so now this is a layer that",
    "start": "6913639",
    "end": "6919079"
  },
  {
    "text": "returns a random or generates a random and so layers can represent the",
    "start": "6919079",
    "end": "6925840"
  },
  {
    "text": "effectful creation of services and so instead of using provide service up here",
    "start": "6925840",
    "end": "6931639"
  },
  {
    "text": "what we're instead going to do is a slightly different function we call this runnable two we're going to effect. provide and",
    "start": "6931639",
    "end": "6939920"
  },
  {
    "text": "we're going to provide the random layer and this is going to do um after",
    "start": "6939920",
    "end": "6948360"
  },
  {
    "text": "typescripts I'm just going",
    "start": "6948599",
    "end": "6954520"
  },
  {
    "text": "to oh of",
    "start": "6956960",
    "end": "6961920"
  },
  {
    "text": "course so the reason why uh you don't need to provide the tag is because the layer itself describes what services it",
    "start": "6963960",
    "end": "6971440"
  },
  {
    "text": "produces because when you create the layer you give it the tag there right so when you provide a layer uh and the",
    "start": "6971440",
    "end": "6978079"
  },
  {
    "text": "reason for this is because layers can provide multiple effects and so we wouldn't want to pass multiple tags but",
    "start": "6978079",
    "end": "6984119"
  },
  {
    "text": "we can create a layer and you can create a layer for for one service create a layer for another service and there's functions to merge layers so we can then",
    "start": "6984119",
    "end": "6990679"
  },
  {
    "text": "from a layer for each service we can create a layer that uh can create multiple services and so uh kind of just",
    "start": "6990679",
    "end": "6998960"
  },
  {
    "text": "like how in effect you can kind of combine your effects and then you run one effect you can create layers for all",
    "start": "6998960",
    "end": "7006159"
  },
  {
    "text": "your different services and combine all your layers and then provide one like main layer to your effect right um and",
    "start": "7006159",
    "end": "7014320"
  },
  {
    "text": "so what this is going to do is I like to think of it as kind of the opposite of",
    "start": "7014320",
    "end": "7019760"
  },
  {
    "text": "flat map not like exactly but conceptually where flat map is going to do an effect after the first effect",
    "start": "7019760",
    "end": "7026840"
  },
  {
    "text": "creating a layer from an effect is going to say execute that effect first and then run the main effect with the result",
    "start": "7026840",
    "end": "7033079"
  },
  {
    "text": "of that effect as the service right so layer is this kind of world that happens before your program right um and so you",
    "start": "7033079",
    "end": "7040880"
  },
  {
    "text": "can do lots of things in layers right we can establish a database connection we can uh start a logging kind of",
    "start": "7040880",
    "end": "7046159"
  },
  {
    "text": "connection we can do all kinds of things and that happens before your effects and then your your effect",
    "start": "7046159",
    "end": "7052679"
  },
  {
    "text": "starts and so um layers because they can uh come from effects they can error",
    "start": "7052679",
    "end": "7058960"
  },
  {
    "text": "right so that's where this error the second type parameter comes in so if you create an effect uh a service from an",
    "start": "7058960",
    "end": "7064679"
  },
  {
    "text": "effect that can fail that layer can also fail and then finally just like how",
    "start": "7064679",
    "end": "7070599"
  },
  {
    "text": "effects can have requirements of other services layers can require other services so here we have an example so I",
    "start": "7070599",
    "end": "7077760"
  },
  {
    "text": "have two tags so we have a tag that is a feature flags and so feature Flags has one",
    "start": "7077760",
    "end": "7084480"
  },
  {
    "text": "function which uh takes a string and returns a effect of a",
    "start": "7084480",
    "end": "7091960"
  },
  {
    "text": "Boolean and then we have another tag called a config file and the config file basically represents the contents of a",
    "start": "7091960",
    "end": "7098280"
  },
  {
    "text": "file uh kind of a Json file that's parsed to an object and so when we implement the feature Flags we want it",
    "start": "7098280",
    "end": "7105679"
  },
  {
    "text": "to basically depend on the config file so we're creating a layer from an effect for the feature Flags tag and first",
    "start": "7105679",
    "end": "7113119"
  },
  {
    "text": "we're using the config file tag right so this is equivalent to yielding the config file so we're saying give me the",
    "start": "7113119",
    "end": "7119119"
  },
  {
    "text": "config file from the context and then with that config file I can use it in",
    "start": "7119119",
    "end": "7124320"
  },
  {
    "text": "this next function right I can say um uh I can make an is enabled function",
    "start": "7124320",
    "end": "7130679"
  },
  {
    "text": "that's going to read the contents of that file and like if it's true we can return true otherwise false and so then",
    "start": "7130679",
    "end": "7138079"
  },
  {
    "text": "this layer now depends on config file and so if we want to use this layer we",
    "start": "7138079",
    "end": "7143800"
  },
  {
    "text": "first have to give it the config file and so we can kind of generate this tree of dependencies where everything's everything's tracked right and so then",
    "start": "7143800",
    "end": "7151440"
  },
  {
    "text": "our config file is also going to be an effect because first it needs to read the file right that's that's an effect",
    "start": "7151440",
    "end": "7157320"
  },
  {
    "text": "and so we're reading the file in Tri promp and we're using FS from node and so we're reading the file and then we're",
    "start": "7157320",
    "end": "7163800"
  },
  {
    "text": "parsing the file which is on that parse again with try for errors and then that's going to generate",
    "start": "7163800",
    "end": "7170040"
  },
  {
    "text": "the uh config file there and so then uh we have this main",
    "start": "7170040",
    "end": "7175639"
  },
  {
    "text": "function and this represents a function that uses feature flags and so if we just try to provide feature Flags right",
    "start": "7175639",
    "end": "7182000"
  },
  {
    "text": "it's going to say hey you can't run this like this still uh depends on config file right because feature Flags depends",
    "start": "7182000",
    "end": "7187560"
  },
  {
    "text": "on config file we haven't provided config file we've only provided fature Flags which also depends on config file",
    "start": "7187560",
    "end": "7194239"
  },
  {
    "text": "so what we can do is provide from layer right so we can have one layer and",
    "start": "7194239",
    "end": "7199400"
  },
  {
    "text": "provide it another layer and so if we provide the feature Flags layer the config file layer then we get this final",
    "start": "7199400",
    "end": "7206560"
  },
  {
    "text": "layer that has no requirements and that layer generates the feature Flags we can provide that to",
    "start": "7206560",
    "end": "7213079"
  },
  {
    "text": "our an effect and run it so um layers are a way to again",
    "start": "7213079",
    "end": "7219960"
  },
  {
    "text": "uh do effectful things before your effects and create these trees of",
    "start": "7219960",
    "end": "7225320"
  },
  {
    "text": "dependencies we can have dependencies that depend on other dependencies that depend on other dependencies",
    "start": "7225320",
    "end": "7232320"
  },
  {
    "text": "um the other thing that's really common to do because we create our tags as classes is we can Define the",
    "start": "7232320",
    "end": "7239119"
  },
  {
    "text": "implementation in one place and you don't have to do this but it's very convenient to kind of create a static uh",
    "start": "7239119",
    "end": "7245440"
  },
  {
    "text": "member called live and this is going to be the layer and that way when we want to provide like we use the tag called Fu",
    "start": "7245440",
    "end": "7253239"
  },
  {
    "text": "and then provide we just provide fu. live and so so that way um you can kind",
    "start": "7253239",
    "end": "7259119"
  },
  {
    "text": "of put the the tag and an implementation of the tag in the same place again you don't have to right the implementation",
    "start": "7259119",
    "end": "7264840"
  },
  {
    "text": "can come from anywhere um but this is kind of a convenient way to define those in in one",
    "start": "7264840",
    "end": "7271679"
  },
  {
    "text": "place um the another thing that is also kind",
    "start": "7271920",
    "end": "7277400"
  },
  {
    "text": "of very common is deriving the type of a service from the kind of function or",
    "start": "7277400",
    "end": "7284320"
  },
  {
    "text": "effect you use to create it and so here we have a tag or we have a function",
    "start": "7284320",
    "end": "7289800"
  },
  {
    "text": "called make service and this is an effect that has like an object of this shape right and then we have uh a tag",
    "start": "7289800",
    "end": "7296360"
  },
  {
    "text": "where the the kind of implementation type of that tag is this effect. effect. success type of make service and so",
    "start": "7296360",
    "end": "7302719"
  },
  {
    "text": "effect. effect. success is basically just a type that uh pulls out the",
    "start": "7302719",
    "end": "7308719"
  },
  {
    "text": "success type of an effect so you pass it an effect type it gives you the success of that effect and so just like success",
    "start": "7308719",
    "end": "7314199"
  },
  {
    "text": "there's also um I think there's uh like fail",
    "start": "7314199",
    "end": "7320400"
  },
  {
    "text": "and error right so we can kind of pull out the the error types and these are actually very simple right uh in here",
    "start": "7320400",
    "end": "7326920"
  },
  {
    "text": "it's just uh you can't see but it's just kind of inferring uh the type so if you have a effect number effect. effect.",
    "start": "7326920",
    "end": "7334199"
  },
  {
    "text": "success number it's going to give you number so here we are inferring the success type of this make service and",
    "start": "7334199",
    "end": "7340880"
  },
  {
    "text": "that's going to be the type of this effect or this tag um does anyone have any questions",
    "start": "7340880",
    "end": "7346560"
  },
  {
    "text": "about this I know that's a",
    "start": "7346560",
    "end": "7349560"
  },
  {
    "text": "lot yes of course",
    "start": "7357280",
    "end": "7363599"
  },
  {
    "text": "so yeah so um there's this kind of interesting dilemma well let's say we",
    "start": "7364480",
    "end": "7369960"
  },
  {
    "text": "have a service called one a service called two and a service called three and one and two both depend on",
    "start": "7369960",
    "end": "7378239"
  },
  {
    "text": "three if we Prov and so and creating three is effectful right like when we create let's just say uh creating three",
    "start": "7378239",
    "end": "7386440"
  },
  {
    "text": "logs to the console and one and two both depend on three when we provide three to",
    "start": "7386440",
    "end": "7392400"
  },
  {
    "text": "both one and two should it create three twice and cause all those side effects",
    "start": "7392400",
    "end": "7398000"
  },
  {
    "text": "twice or should it create three once and share the the kind of service that we",
    "start": "7398000",
    "end": "7403199"
  },
  {
    "text": "created between one and two and so by default what effect does is it memorizes layers so what that means is basically",
    "start": "7403199",
    "end": "7410079"
  },
  {
    "text": "caching the result so in your entire dependency tree if a service appears multiple times it's only going to be",
    "start": "7410079",
    "end": "7416800"
  },
  {
    "text": "created once um the there are some kind of ways to op out of that and so if we go to the",
    "start": "7416800",
    "end": "7422719"
  },
  {
    "text": "docs um because I don't want to get this wrong uh if we go to the docs um",
    "start": "7422719",
    "end": "7429679"
  },
  {
    "text": "you can and the also the reason if this is the same there's there's a couple uh kind of",
    "start": "7429679",
    "end": "7436719"
  },
  {
    "text": "nuance things and the docs going to talk about it but you if you want to ensure that you're getting a brand new not cach",
    "start": "7436719",
    "end": "7442800"
  },
  {
    "text": "version there's this thing called layer. Fresh and layer. fresh is going to basically return you whatever type you",
    "start": "7442800",
    "end": "7448520"
  },
  {
    "text": "passed in but it's going to no matter what recreate it even if you've already created it um there's also uh providing uh",
    "start": "7448520",
    "end": "7458320"
  },
  {
    "text": "locally right so you don't have to provide um layers at the very edge of your program",
    "start": "7458320",
    "end": "7464000"
  },
  {
    "text": "right like you can provide every service your program needs once at the very bottom but if you have kind of effects",
    "start": "7464000",
    "end": "7470079"
  },
  {
    "text": "within your program you can provide right there like you can provide services Let me Give an",
    "start": "7470079",
    "end": "7477520"
  },
  {
    "text": "example my",
    "start": "7480719",
    "end": "7483880"
  },
  {
    "text": "code",
    "start": "7487760",
    "end": "7490760"
  },
  {
    "text": "by default yeah um but even if it's effectful even if it's effectful the the only kind of like",
    "start": "7493639",
    "end": "7500599"
  },
  {
    "text": "static Service is like not an effect right provide service is literally just a value but if you're using layers and",
    "start": "7500599",
    "end": "7506960"
  },
  {
    "text": "layers um just like a fact like layers have a a bunch of Constructors so there's layer do um succeed and so",
    "start": "7506960",
    "end": "7513040"
  },
  {
    "text": "layer. suced is like effect. suced it's going to just create from a value and layer. sync is going to create from a",
    "start": "7513040",
    "end": "7520360"
  },
  {
    "text": "function and layer. effect is going to create from an effect so there's a bunch of Constructors they're kind of similar",
    "start": "7520360",
    "end": "7525880"
  },
  {
    "text": "um to effect but no matter how you construct your layer by default if you use that layer multiple times it's going",
    "start": "7525880",
    "end": "7531920"
  },
  {
    "text": "to reuse the same one and again there's ways to kind of opt out of that um and there's also ways",
    "start": "7531920",
    "end": "7537599"
  },
  {
    "text": "to uh like manually memorize layers with layer. memorize um the docs page for",
    "start": "7537599",
    "end": "7544159"
  },
  {
    "text": "this by the way is in context management dependency memorization does that answer your question okay",
    "start": "7544159",
    "end": "7551760"
  },
  {
    "text": "um so now uh let's recap let's recap that so if I go",
    "start": "7551760",
    "end": "7559920"
  },
  {
    "text": "to here so services are functionality whose",
    "start": "7559920",
    "end": "7566280"
  },
  {
    "start": "7562000",
    "end": "9757000"
  },
  {
    "text": "type signature is separate from the implementation so we Define the type up front we use the type we Define the",
    "start": "7566280",
    "end": "7572280"
  },
  {
    "text": "implementation later as long as it conforms to the type the tag is a placeholder we can provide the service",
    "start": "7572280",
    "end": "7578880"
  },
  {
    "text": "if we're just providing a value we can provide with a layer if we have kind of more complex dependencies that depend on",
    "start": "7578880",
    "end": "7584760"
  },
  {
    "text": "other dependencies or we have dependencies that need to be created effectly um and so now we're going to do",
    "start": "7584760",
    "end": "7593119"
  },
  {
    "text": "some exercises and I also I have exercises for error handling so we're going to do that in a sec because I forgot to do them but we're going to do",
    "start": "7593119",
    "end": "7599239"
  },
  {
    "text": "the uh context exercises first and then we're going to go back to the airror handling exercises so if you go into",
    "start": "7599239",
    "end": "7605880"
  },
  {
    "text": "part one into exercises into cont context I have uh two exercises for you",
    "start": "7605880",
    "end": "7613000"
  },
  {
    "text": "and the way I've structured these exercises um I don't know if hard is the right word but they kind of",
    "start": "7613000",
    "end": "7621400"
  },
  {
    "text": "uh they probably the basically my goal with these exercises is to kind of show",
    "start": "7621400",
    "end": "7627480"
  },
  {
    "text": "you new apis that I haven't taught you and so the idea is that you might be able to discover them yourself um but if",
    "start": "7627480",
    "end": "7634320"
  },
  {
    "text": "you can't discover them yourself that's totally okay because we're going to go over the solutions but the idea is is that you can try to kind of figure it",
    "start": "7634320",
    "end": "7640159"
  },
  {
    "text": "out by yourself um and kind of how most of these end is I say here's a kind of",
    "start": "7640159",
    "end": "7645440"
  },
  {
    "text": "manual solution and then here's an effect function that does the same thing for you um so the first argument is and",
    "start": "7645440",
    "end": "7651280"
  },
  {
    "text": "this is actually pretty hard um but is getting so like I said there's this there's this context so every effect has",
    "start": "7651280",
    "end": "7657960"
  },
  {
    "text": "a context and that's where all the services are stored and so when you yield a tag what it's doing is getting",
    "start": "7657960",
    "end": "7664760"
  },
  {
    "text": "the context and then grabbing that tag from the context and so the first exercise is getting that manually which",
    "start": "7664760",
    "end": "7670480"
  },
  {
    "text": "I can see Michael laughing this is this is difficult but I gave you a little hint um and so I would say the best way",
    "start": "7670480",
    "end": "7675639"
  },
  {
    "text": "you're probably going to be able to figure this out is by um kind of importing I also I already imported the context module but if you kind of press",
    "start": "7675639",
    "end": "7682199"
  },
  {
    "text": "Dot and you kind of look through the functions uh you might have a chance and but again we're going to go over uh kind",
    "start": "7682199",
    "end": "7688599"
  },
  {
    "text": "of how that works and then uh the next exercise um just kind of uh or do we do",
    "start": "7688599",
    "end": "7695920"
  },
  {
    "text": "we want to do one at a time or do we want me to kind of explain both one at a time all right so let's take a couple minutes and then we'll come back good",
    "start": "7695920",
    "end": "7704000"
  },
  {
    "text": "luck before I kind of go over the solution does anyone want to share how they try to approach this I mean there's",
    "start": "7704840",
    "end": "7711719"
  },
  {
    "text": "actually kind of only one way but did anyone did anyone was able anyone able to get the test to pass no I'm sorry",
    "start": "7711719",
    "end": "7717880"
  },
  {
    "text": "this one this one actually was probably a bad one to start but um I think the solution will actually make a lot of sense so if we go to context so here's",
    "start": "7717880",
    "end": "7726360"
  },
  {
    "text": "the solution so first we use a effect. context to get the context and you can't see but this is like a context type and",
    "start": "7726360",
    "end": "7733800"
  },
  {
    "text": "then we use context. with the tag to get the item from the context and so what's going on here and we can actually let's",
    "start": "7733800",
    "end": "7739679"
  },
  {
    "text": "move this back over what's going on here is",
    "start": "7739679",
    "end": "7747400"
  },
  {
    "text": "um uh as Mike talked about the way these kind of services are implemented internally is a it's just a map from the",
    "start": "7747400",
    "end": "7754280"
  },
  {
    "text": "tags to the values right so when you provide the services you're kind of filling that map you're saying here's",
    "start": "7754280",
    "end": "7760400"
  },
  {
    "text": "the tag here's the value here's the tag here's the value and so at runtime what we're doing is we're getting the context",
    "start": "7760400",
    "end": "7766079"
  },
  {
    "text": "we're getting that map and then just pulling out the value that is equivalent to that service and so there's this",
    "start": "7766079",
    "end": "7773199"
  },
  {
    "text": "function called effect. context and effect. context is going to give you a context of some some type and that's",
    "start": "7773199",
    "end": "7782559"
  },
  {
    "text": "uh and that type um and the reason that this is like safe is because uh getting",
    "start": "7782559",
    "end": "7788400"
  },
  {
    "text": "the context of this type requires that the kind of resulting effect also has this type and so what we get back is",
    "start": "7788400",
    "end": "7794079"
  },
  {
    "text": "this context Fu and so this is saying this is a context that has a foo service in it and so then we can get the context",
    "start": "7794079",
    "end": "7800480"
  },
  {
    "text": "just like kind of getting from a map we can get the the foo uh the value of the",
    "start": "7800480",
    "end": "7805679"
  },
  {
    "text": "food tag and that's going to give us back the value um of kind of the Tag's implementation so again I'm sorry this",
    "start": "7805679",
    "end": "7813400"
  },
  {
    "text": "was kind of a difficult one but hopefully that kind of helps you a bit understand kind of what's going on behind the scenes when you uh yield a",
    "start": "7813400",
    "end": "7819960"
  },
  {
    "text": "tag it's not uh super magic um what is a little magic is like where this context comes from and we we might get to that",
    "start": "7819960",
    "end": "7826159"
  },
  {
    "text": "at the end but uh you can just imagine that that's that's a bit magic for now um",
    "start": "7826159",
    "end": "7833239"
  },
  {
    "text": "yes",
    "start": "7836559",
    "end": "7839559"
  },
  {
    "text": "yes yeah yeah so um effect. context if you leave this out and this is actually probably um pretty easy to do uh it",
    "start": "7847119",
    "end": "7854920"
  },
  {
    "text": "returns Unknown by default right and so this is a just a context we we don't know what's in it's just like some map",
    "start": "7854920",
    "end": "7860199"
  },
  {
    "text": "right and so um here we can kind of manually say that this is uh a context",
    "start": "7860199",
    "end": "7865960"
  },
  {
    "text": "that contains a Fu um so the next exercise I think will be yes",
    "start": "7865960",
    "end": "7871920"
  },
  {
    "text": "Ser just an exercise or do we have like a",
    "start": "7871920",
    "end": "7877159"
  },
  {
    "text": "real just to show how great question so um I would",
    "start": "7877159",
    "end": "7885079"
  },
  {
    "text": "say uh there is some use case although I think it is a bit obscure where that kind of comes in is the context module",
    "start": "7885079",
    "end": "7892840"
  },
  {
    "text": "you can create contextes manually so we can um I'll show if",
    "start": "7892840",
    "end": "7899159"
  },
  {
    "text": "we",
    "start": "7900520",
    "end": "7903520"
  },
  {
    "text": "context",
    "start": "7907159",
    "end": "7910159"
  },
  {
    "text": "yes yes so I would say um the in terms of getting something manually from the",
    "start": "7925719",
    "end": "7931520"
  },
  {
    "text": "context there's probably no uh real world use case for doing that um",
    "start": "7931520",
    "end": "7936840"
  },
  {
    "text": "probably ever basic like you can always just yield the T Mike's saying Mike's shaking his head",
    "start": "7936840",
    "end": "7942800"
  },
  {
    "text": "um so there probably is a use case uh but what I would say the more common use case is understanding that context is",
    "start": "7942800",
    "end": "7949040"
  },
  {
    "text": "like a data type that you can work with so we can create um a empty",
    "start": "7949040",
    "end": "7956320"
  },
  {
    "text": "context uh by calling context. empty right and this is a context never and",
    "start": "7956320",
    "end": "7963679"
  },
  {
    "text": "then we can pipe that um and we can say context.",
    "start": "7963679",
    "end": "7970400"
  },
  {
    "text": "add uh through f. live I that should",
    "start": "7970400",
    "end": "7975719"
  },
  {
    "text": "work because this is not if we there right and now we have a context",
    "start": "7975719",
    "end": "7982440"
  },
  {
    "text": "Fu and so these are things you can kind of make manually and where that comes in is you can um",
    "start": "7982440",
    "end": "7989320"
  },
  {
    "text": "effect. provide uh what is",
    "start": "7989320",
    "end": "7996360"
  },
  {
    "text": "it oh okay so in addition to taking layers you can also provide a context um",
    "start": "7996360",
    "end": "8003920"
  },
  {
    "text": "and so this is going to uh you can actually see what's happening by the scenes right this is going to exclude Fu",
    "start": "8003920",
    "end": "8009400"
  },
  {
    "text": "from the effect that we provide it to um and this also has a couple other places where this shows up as well um but the",
    "start": "8009400",
    "end": "8015559"
  },
  {
    "text": "context is like a whole module and again it's just a map from tags to services and you can um again this is a bit more",
    "start": "8015559",
    "end": "8021400"
  },
  {
    "text": "obscure like most of the time you can just seal the tag most of the time you can just create a layer create provide service um but context is the module",
    "start": "8021400",
    "end": "8029159"
  },
  {
    "text": "that kind of powers them if that answers your question so the next",
    "start": "8029159",
    "end": "8036159"
  },
  {
    "text": "exercise um is we have this class or this",
    "start": "8036159",
    "end": "8042119"
  },
  {
    "text": "tag and so this is a service uh it kind of looks very similar to what we have before right it's a random service um it",
    "start": "8042119",
    "end": "8049239"
  },
  {
    "text": "has a next in a next pool and a next in between and uh the implementation of the service actually doesn't matter for what",
    "start": "8049239",
    "end": "8055679"
  },
  {
    "text": "we're going to do and what we're going to do instead is basically create three",
    "start": "8055679",
    "end": "8061159"
  },
  {
    "text": "values and so what these are going to be is instead of first yielding the service and then kind of like getting the random",
    "start": "8061159",
    "end": "8067920"
  },
  {
    "text": "and then calling random. next in or random. next pool what I want you to try to do is create one value called Next",
    "start": "8067920",
    "end": "8074639"
  },
  {
    "text": "int which is just an effect and you'll see that this effect depends on random",
    "start": "8074639",
    "end": "8079719"
  },
  {
    "text": "so what you're going to hopefully do is create an effect that first gets the random and then um does next in so it's",
    "start": "8079719",
    "end": "8088520"
  },
  {
    "text": "basically in uh kind of the yielding of the tag like getting the tag and then uh next in as kind of one operation so that",
    "start": "8088520",
    "end": "8096159"
  },
  {
    "text": "way again the alternative is we yield random uh const random equals random and",
    "start": "8096159",
    "end": "8105159"
  },
  {
    "text": "then we call random. next int where what I want you",
    "start": "8105159",
    "end": "8110239"
  },
  {
    "text": "to try to do is create some value next int where you don't call random. next in you just call next int and it gets the",
    "start": "8110239",
    "end": "8117280"
  },
  {
    "text": "random first and then does next in um yes good",
    "start": "8117280",
    "end": "8124360"
  },
  {
    "text": "luck all right everyone was that we like most people were able to do it or or",
    "start": "8127000",
    "end": "8132800"
  },
  {
    "text": "raise your hand if you were able to get the test to pass no one okay who who's who's close",
    "start": "8132800",
    "end": "8139280"
  },
  {
    "text": "who needs like a bit more time or are we stuck um yeah I'm going to startor I'm",
    "start": "8139280",
    "end": "8145920"
  },
  {
    "text": "I'm sorry if these are very hard but uh I think think the solution to this one is actually quite simple um and so all",
    "start": "8145920",
    "end": "8151800"
  },
  {
    "text": "we're going to do is random. pipe and this is basically a map we can think of",
    "start": "8151800",
    "end": "8156920"
  },
  {
    "text": "this as as effect. map and so we're first using the service in effect context and then we're just mapping to a",
    "start": "8156920",
    "end": "8164000"
  },
  {
    "text": "member of that service right so I can um I'm going to bring this over",
    "start": "8164000",
    "end": "8170480"
  },
  {
    "text": "here and so we can use map to be a bit more clear right so kind of using a tag",
    "start": "8172480",
    "end": "8178520"
  },
  {
    "text": "as if it was an effect is equivalent to kind of getting the effect from that or getting the service from that context",
    "start": "8178520",
    "end": "8184159"
  },
  {
    "text": "and then this is the random service and instead of using the random Service uh we're just kind of mapping it to just",
    "start": "8184159",
    "end": "8190800"
  },
  {
    "text": "that one value and so that's going to return uh or this needs to be flat map right or not flat map U this is right",
    "start": "8190800",
    "end": "8197638"
  },
  {
    "text": "yeah uh because oh were my I I think I might",
    "start": "8197639",
    "end": "8204719"
  },
  {
    "text": "have messed up the test cases um or these",
    "start": "8204719",
    "end": "8209678"
  },
  {
    "text": "or no this can be fun yeah this is right right so this is",
    "start": "8210840",
    "end": "8217399"
  },
  {
    "text": "an effect that is going to um first get random from Context and then get next in",
    "start": "8217400",
    "end": "8224800"
  },
  {
    "text": "from that random and uh kind of call it or uh use it I'm using the wrong words",
    "start": "8224800",
    "end": "8232319"
  },
  {
    "text": "um and so these other ones are the exact same right like this first function uh and you can write these in slightly",
    "start": "8232320",
    "end": "8237678"
  },
  {
    "text": "different ways right like we can um write this as a uh as a generator right",
    "start": "8237679",
    "end": "8243080"
  },
  {
    "text": "so we can do effect. gen and so first we can say con random equals um just the",
    "start": "8243080",
    "end": "8249439"
  },
  {
    "text": "random tag and then we can return random. next pool actually we need",
    "start": "8249440",
    "end": "8255399"
  },
  {
    "text": "to yield the result of random expent um so that might be a little bit",
    "start": "8255400",
    "end": "8261598"
  },
  {
    "text": "clear and so uh does this make sense to everyone yeah um and so like I said the",
    "start": "8261599",
    "end": "8269518"
  },
  {
    "text": "my goal with some of these exercises was to kind of uh find our way into kind of built-in",
    "start": "8269519",
    "end": "8275319"
  },
  {
    "text": "apis so in effect there's this function called effect. service members or we can",
    "start": "8275320",
    "end": "8283120"
  },
  {
    "text": "look at Service uh functions first there's there service constants there service function I think members is all",
    "start": "8283120",
    "end": "8288880"
  },
  {
    "text": "of them and so what this is going to do",
    "start": "8288880",
    "end": "8295120"
  },
  {
    "text": "uh function",
    "start": "8295120",
    "end": "8299519"
  },
  {
    "text": "oh because these are these are renamed but um what effect that service members does is it gives you back an object of",
    "start": "8309679",
    "end": "8316000"
  },
  {
    "text": "all the functions and all of the constants um from that service but in this kind of form where we don't have to",
    "start": "8316000",
    "end": "8323040"
  },
  {
    "text": "yield the service first um which is useful sometimes just a cool thing you",
    "start": "8323040",
    "end": "8328240"
  },
  {
    "text": "can do um and so if we get rid of all of these right now we have uh these",
    "start": "8328240",
    "end": "8334040"
  },
  {
    "text": "variables that kind of implicitly uh depend on",
    "start": "8334040",
    "end": "8339960"
  },
  {
    "text": "the on the service right so this is just an effect that first gets a service it's doing exactly um what we just kind of",
    "start": "8339960",
    "end": "8346478"
  },
  {
    "text": "implemented manually and so there's service members there's service functions which just gives you the functions so surface constants which",
    "start": "8346479",
    "end": "8352800"
  },
  {
    "text": "just gives you the constants and so this is a way where um maybe you have like a really big object that uh uh instead of",
    "start": "8352800",
    "end": "8362080"
  },
  {
    "text": "kind of getting it from Context or I mean it's all like just kind of top level properties um but yeah this is",
    "start": "8362080",
    "end": "8368800"
  },
  {
    "text": "something interesting you can do uh any questions about",
    "start": "8368800",
    "end": "8375638"
  },
  {
    "text": "this no okay",
    "start": "8375639",
    "end": "8380398"
  },
  {
    "text": "um oh yeah speaking",
    "start": "8381599",
    "end": "8389439"
  },
  {
    "text": "toes lers don't want to way because it will",
    "start": "8391520",
    "end": "8400000"
  },
  {
    "text": "propagate depc you want to separate the access",
    "start": "8400000",
    "end": "8405240"
  },
  {
    "text": "from the user you want to access instruction and use what you access",
    "start": "8405240",
    "end": "8412841"
  },
  {
    "text": "PRI depend",
    "start": "8413760",
    "end": "8419359"
  },
  {
    "text": "when like and just",
    "start": "8421000",
    "end": "8427840"
  },
  {
    "text": "use effect then this is very hand because you have to separated access the",
    "start": "8427840",
    "end": "8434319"
  },
  {
    "text": "service and that there are cases when want",
    "start": "8434319",
    "end": "8439760"
  },
  {
    "text": "separated access the",
    "start": "8439760",
    "end": "8443200"
  },
  {
    "text": "Dag the other small point is the next is a",
    "start": "8446319",
    "end": "8453240"
  },
  {
    "text": "function so check",
    "start": "8453240",
    "end": "8457120"
  },
  {
    "text": "that um so I think something really great there is talking about separating",
    "start": "8472120",
    "end": "8477800"
  },
  {
    "text": "the uh kind of accessing from the context versus the usage and that is where uh to answer your question I",
    "start": "8477800",
    "end": "8483520"
  },
  {
    "text": "believe of when kind of calling effect. context is useful in the real world is exactly that case where we want to",
    "start": "8483520",
    "end": "8489760"
  },
  {
    "text": "separate uh the kind of access from the usage so what that looks like is if you'll notice from here um calling uh",
    "start": "8489760",
    "end": "8498280"
  },
  {
    "text": "cons service",
    "start": "8498280",
    "end": "8503319"
  },
  {
    "text": "equals I cannot Ty",
    "start": "8505439",
    "end": "8509240"
  },
  {
    "text": "if you notice that this Returns the service synchronously it doesn't return us an effect and so you can think of um",
    "start": "8513960",
    "end": "8520479"
  },
  {
    "text": "kind of yielding the tag as actually the same thing as this kind of service members right it's doing two things at",
    "start": "8520479",
    "end": "8526640"
  },
  {
    "text": "once it's getting the service um and or it's a little bit different but uh I",
    "start": "8526640",
    "end": "8533399"
  },
  {
    "text": "think there's what I'm trying to say is yeah so getting and using the reason",
    "start": "8533399",
    "end": "8541439"
  },
  {
    "text": "that context is useful to get is because getting from the context is synchronous and the reason when that is useful is",
    "start": "8541439",
    "end": "8548960"
  },
  {
    "text": "because interrupting with non-effect code so the example Mike gave me is",
    "start": "8548960",
    "end": "8554040"
  },
  {
    "text": "let's say inside your effect you have non-ff code or code that basically can't be effects it has to be purely",
    "start": "8554040",
    "end": "8559920"
  },
  {
    "text": "synchronous so you can effectly get the context with effect. context outside of",
    "start": "8559920",
    "end": "8566560"
  },
  {
    "text": "that purely synchronous code and then inside the purely synchronous code then you can use context. to synchronously",
    "start": "8566560",
    "end": "8573240"
  },
  {
    "text": "get from the context where if you didn't use that the only other option is yielding the tag which is an effect",
    "start": "8573240",
    "end": "8580000"
  },
  {
    "text": "right but by using effect. context we first effectiv get the context and then we can give that to some code that",
    "start": "8580000",
    "end": "8586640"
  },
  {
    "text": "cannot be effectful and it can synchronously get items from the",
    "start": "8586640",
    "end": "8592000"
  },
  {
    "text": "context um bit of an advanced use case uh I would say if you use that um as",
    "start": "8592000",
    "end": "8597359"
  },
  {
    "text": "pretty cool I have definitely never used that but uh it's kind of interesting to think about",
    "start": "8597359",
    "end": "8602560"
  },
  {
    "text": "um I'm a bit conflicted on whether to do the uh the error exercises because they",
    "start": "8602560",
    "end": "8608600"
  },
  {
    "text": "are a bit on the hard side um and we are",
    "start": "8608600",
    "end": "8613640"
  },
  {
    "text": "uh dangerously behind schedule um it's it's almost 12:30 which is when the second session is supposed to stop um so",
    "start": "8613640",
    "end": "8621560"
  },
  {
    "text": "we can I think we're going to eat lunch but when we come back um",
    "start": "8621560",
    "end": "8628399"
  },
  {
    "text": "uh like I said we're a little bit behind schedule but that's totally okay um so we have a couple other topics to cover",
    "start": "8628399",
    "end": "8633520"
  },
  {
    "text": "um in this kind of first core part and I think we we will uh do the exercises just so I can kind of walk you guys",
    "start": "8633520",
    "end": "8639800"
  },
  {
    "text": "through the solutions um and at this rate we are probably not going to get to very much of the second or third Parts",
    "start": "8639800",
    "end": "8644960"
  },
  {
    "text": "but that is totally okay um and so I hope everyone is uh learning um a",
    "start": "8644960",
    "end": "8652800"
  },
  {
    "text": "lot and if you have any questions during lunch please please please talk to me um um and we have uh 90 minutes so we're",
    "start": "8652800",
    "end": "8659720"
  },
  {
    "text": "going to come back at two and yeah thank",
    "start": "8659720",
    "end": "8665970"
  },
  {
    "text": "[Applause] you all right welcome back everyone um I",
    "start": "8665970",
    "end": "8671960"
  },
  {
    "text": "think let's uh go over quickly just a bit of an updated schedule um so I think",
    "start": "8671960",
    "end": "8677920"
  },
  {
    "text": "what we're going to do is we're going to finish going through uh the rest of part one so we have uh resource management",
    "start": "8677920",
    "end": "8685120"
  },
  {
    "text": "and then we're going to do the uh resource exercises then we have the data types we're going to do the data",
    "start": "8685120",
    "end": "8691200"
  },
  {
    "text": "exercises and then we're going to end with the error exercises um because I think uh they kind of have some stuff",
    "start": "8691200",
    "end": "8697920"
  },
  {
    "text": "that is going to we're going to learn and then we're going to use in those and then we should have time to get through",
    "start": "8697920",
    "end": "8703920"
  },
  {
    "text": "all of part two and I think that will be very helpful to kind of see the effect in uh in use and and then we'll end the",
    "start": "8703920",
    "end": "8711600"
  },
  {
    "text": "day with some of the stuff from part four right um so let's just uh pick back",
    "start": "8711600",
    "end": "8717600"
  },
  {
    "text": "up with um so we we finished uh context management and we finished the exercises",
    "start": "8717600",
    "end": "8725439"
  },
  {
    "text": "for that the one thing uh there was a question um kind of during our break about if you have so you can have",
    "start": "8725439",
    "end": "8732279"
  },
  {
    "text": "different implementations for a service right so the example was you have a database service and you have like the",
    "start": "8732279",
    "end": "8737600"
  },
  {
    "text": "live database and a fallback database and so the question was about with memorization if we provide kind of two",
    "start": "8737600",
    "end": "8744399"
  },
  {
    "text": "versions of a service um how does effect kind of know which one like how do we",
    "start": "8744399",
    "end": "8751160"
  },
  {
    "text": "kind of determine if it's the same value and so the answer is that you should never be providing um two different",
    "start": "8751160",
    "end": "8758080"
  },
  {
    "text": "layers with for the same service with two different values right and because those should actually be two different",
    "start": "8758080",
    "end": "8763640"
  },
  {
    "text": "Services right so if you have uh and you could have two services with the same kind of interface right uh because the",
    "start": "8763640",
    "end": "8770640"
  },
  {
    "text": "interface is separate from the identifier and so in this case right the solution is not to have two different implementations of the database service",
    "start": "8770640",
    "end": "8778080"
  },
  {
    "text": "it's to have a kind of first database service and a fallback database service with the same type and then you can",
    "start": "8778080",
    "end": "8784880"
  },
  {
    "text": "provide implementations for both of those services and then if you wanted to you can make like another kind of parent database service that depends on both of",
    "start": "8784880",
    "end": "8791800"
  },
  {
    "text": "those database services and then kind of internally does the fallback right um",
    "start": "8791800",
    "end": "8797000"
  },
  {
    "text": "but I think that's a an important kind of thing to take away where if you have a service um the layers are kind of",
    "start": "8797000",
    "end": "8805319"
  },
  {
    "text": "separate layers right like you have your live layer and you have your test layer and those represent the live versus the",
    "start": "8805319",
    "end": "8810520"
  },
  {
    "text": "test implementation of that service and you should only provide that layer like you should only use one version of a",
    "start": "8810520",
    "end": "8816399"
  },
  {
    "text": "service um in your app so either you're providing the test layer or you're providing the live layer but you should",
    "start": "8816399",
    "end": "8822000"
  },
  {
    "text": "not provide both um so hopefully that uh that makes sense um so moving on to",
    "start": "8822000",
    "end": "8829000"
  },
  {
    "text": "Resource Management and so resource management is all about this special data type called scope and so scope is",
    "start": "8829000",
    "end": "8836160"
  },
  {
    "text": "something that is going to be a service but it's kind of a special service it's not really a service in the way that all",
    "start": "8836160",
    "end": "8841680"
  },
  {
    "text": "the other services we've looked at so far are and so scope is all about managing resources so those are things",
    "start": "8841680",
    "end": "8847920"
  },
  {
    "text": "with a lifetime are basically things that have some kind of finalizer right so if we think about opening a file",
    "start": "8847920",
    "end": "8853720"
  },
  {
    "text": "closing a file right and so what a scope defines is a scope basically has a",
    "start": "8853720",
    "end": "8860120"
  },
  {
    "text": "series of functions called finalizers and when the scope is closed all those finalizer functions are going to run",
    "start": "8860120",
    "end": "8867760"
  },
  {
    "text": "and uh the way this kind of presents itself is by a scope type appearing as a",
    "start": "8867760",
    "end": "8875600"
  },
  {
    "text": "service but it's again different from other services because we're not providing an implementation for the",
    "start": "8875600",
    "end": "8880680"
  },
  {
    "text": "scope right the scope already exists when we kind of create when we Define finalizers which we'll look at how to do",
    "start": "8880680",
    "end": "8886960"
  },
  {
    "text": "in a sec that creates the scope and so it's actually just kind of a convenient way to use the service kind of uh",
    "start": "8886960",
    "end": "8894960"
  },
  {
    "text": "interface that we've already but we're using for other things to Define resources so when we use something",
    "start": "8894960",
    "end": "8900279"
  },
  {
    "text": "resourceful so like we open a file and I'll show some examples of this in a sec when we use a file that is going to have",
    "start": "8900279",
    "end": "8906920"
  },
  {
    "text": "an effect that requires a scope and where we provide the scope kind of",
    "start": "8906920",
    "end": "8912439"
  },
  {
    "text": "determines where that scope ends and so I'm going to go through some examples now that might be a",
    "start": "8912439",
    "end": "8918319"
  },
  {
    "text": "lot and so the scope just kind of like how context is just like a value you can work with a scope is just a value so we",
    "start": "8918319",
    "end": "8924880"
  },
  {
    "text": "can make a scope and we can add finalizers and so these are just effects that when we close the scope it's going",
    "start": "8924880",
    "end": "8931720"
  },
  {
    "text": "to go through all its finalizers and run all those finalizers and so the first kind of way",
    "start": "8931720",
    "end": "8936760"
  },
  {
    "text": "to work with scope is if you have um something that only has a release phase",
    "start": "8936760",
    "end": "8942880"
  },
  {
    "text": "so if you have a file there's like an acquire phase and a release phase opening the file closing the file so if we uh we can use this Effect called",
    "start": "8942880",
    "end": "8949800"
  },
  {
    "text": "effect. add finalizer and this is going to return an effect that requires this",
    "start": "8949800",
    "end": "8955240"
  },
  {
    "text": "scope type and so what this is saying is I have some kind of",
    "start": "8955240",
    "end": "8961279"
  },
  {
    "text": "finalizer uh I like this effect does something and it has a finalizer and the scope appearing is saying I need you to",
    "start": "8961279",
    "end": "8967800"
  },
  {
    "text": "tell me when I should run that finalizer right because um just based off this effect right when do we run this",
    "start": "8967800",
    "end": "8973960"
  },
  {
    "text": "finalizer do we run it uh after the effect finishes if we're composing it with other effects where where does that",
    "start": "8973960",
    "end": "8980040"
  },
  {
    "text": "kind of uh scope it closed and so just like with other services if we try to run this it's going to say right scope",
    "start": "8980040",
    "end": "8985960"
  },
  {
    "text": "is not a sign M type never and so instead of providing the scope service we have this special",
    "start": "8985960",
    "end": "8992160"
  },
  {
    "text": "function called effect. scoped and effect. scope is going to remove the scope from the service type parameter",
    "start": "8992160",
    "end": "8999040"
  },
  {
    "text": "and what it's going to do is Define the boundary of that scope so this is going to say do this effect and then after you",
    "start": "8999040",
    "end": "9006240"
  },
  {
    "text": "do this effect where effect. scope gets called close run all the finalizers of the current scope right close the scope",
    "start": "9006240",
    "end": "9013240"
  },
  {
    "text": "so then the scope is removed so when we run this it's going to run first and then it's going to close the scope and",
    "start": "9013240",
    "end": "9019520"
  },
  {
    "text": "it's going to run last which let's",
    "start": "9019520",
    "end": "9024398"
  },
  {
    "text": "see there up here so first or there's some other stuff going on I should have commented them out but",
    "start": "9027880",
    "end": "9034560"
  },
  {
    "text": "conceptually all right this is uh declaring the finalizer so this is going to run first and the the scope is closed",
    "start": "9034560",
    "end": "9040960"
  },
  {
    "text": "this is going to run and so uh here we have a function",
    "start": "9040960",
    "end": "9047359"
  },
  {
    "text": "where we call effect. add finalizer and then we call scoped before we yield it",
    "start": "9047359",
    "end": "9052920"
  },
  {
    "text": "right and so what this is going to do is because the where we call effect. scope defines the scope this creates an effect",
    "start": "9052920",
    "end": "9060080"
  },
  {
    "text": "within a scope with with a scope this immediately closes the scope and so this",
    "start": "9060080",
    "end": "9065240"
  },
  {
    "text": "is going to log right away and then this is going to log right so um we have a bunch of functions",
    "start": "9065240",
    "end": "9072920"
  },
  {
    "text": "to kind of uh create yeah we have a bunch of functions to",
    "start": "9072920",
    "end": "9078920"
  },
  {
    "text": "create scoped resources so the most basic one of these is called acquire release so acquire release uh takes two",
    "start": "9078920",
    "end": "9085640"
  },
  {
    "text": "functions so one function is going to create the resource and the release function is going to release the resource this is like a subscribe",
    "start": "9085640",
    "end": "9091720"
  },
  {
    "text": "unsubscribe function so here our acquire function is going to open a file so it's",
    "start": "9091720",
    "end": "9097319"
  },
  {
    "text": "going to use uh FS from node and it's going to try promise on fs. openen and",
    "start": "9097319",
    "end": "9103920"
  },
  {
    "text": "then it's going to log out f file opened and then release is going to take",
    "start": "9103920",
    "end": "9109800"
  },
  {
    "text": "the file handle and call file. close and then log file closed and so when we give",
    "start": "9109800",
    "end": "9115880"
  },
  {
    "text": "both of these functions to acquire release we get a function that gives us the file handle but also requires the",
    "start": "9115880",
    "end": "9123240"
  },
  {
    "text": "scope and so that way when we use this file",
    "start": "9123240",
    "end": "9128800"
  },
  {
    "text": "um and so here you can see this Ed file function so this is going to take the file handle so we can uh get file right",
    "start": "9128800",
    "end": "9136840"
  },
  {
    "text": "this is this and we're piping it into effect. flatmap and so after we kind of evaluate that effect right we get the",
    "start": "9136840",
    "end": "9143399"
  },
  {
    "text": "handle and then we use the file and so this is going to be uh void because",
    "start": "9143399",
    "end": "9149439"
  },
  {
    "text": "using the file this returns void because console. log returns void and so this is saying right this still has the scope",
    "start": "9149439",
    "end": "9155760"
  },
  {
    "text": "but when we provide effect. scoped after this uh after we use the file then the",
    "start": "9155760",
    "end": "9161600"
  },
  {
    "text": "file gets closed um so I can yes",
    "start": "9161600",
    "end": "9168239"
  },
  {
    "text": "so yes oh yes I'm sorry so the question is",
    "start": "9171000",
    "end": "9176600"
  },
  {
    "text": "like what does effect. scope do and so effect. scope closes the scope and at",
    "start": "9176600",
    "end": "9182240"
  },
  {
    "text": "the same time it removes the scope uh service from the dependencies type parameter",
    "start": "9182240",
    "end": "9189520"
  },
  {
    "text": "right um and so uh another way to kind of work with",
    "start": "9189520",
    "end": "9196960"
  },
  {
    "text": "scoped resources if we kind of know the exact kind of place if we're just using it in one function is this acquire use",
    "start": "9196960",
    "end": "9205840"
  },
  {
    "text": "release and so acquire use release we're able to avoid working with like having",
    "start": "9205840",
    "end": "9211520"
  },
  {
    "text": "to manually close the scope because we very explicitly say where we're using the resource so use we're saying the",
    "start": "9211520",
    "end": "9219200"
  },
  {
    "text": "only place we have access to the resource is within this use function so we don't need to close the scope because",
    "start": "9219200",
    "end": "9224600"
  },
  {
    "text": "after this use function is finished then we're releasing it and so this is going to um return whatever use uh",
    "start": "9224600",
    "end": "9234200"
  },
  {
    "text": "returns um there is one kind of uh foot gun to",
    "start": "9234200",
    "end": "9240200"
  },
  {
    "text": "this which is that if you close the scope too early um you still get the",
    "start": "9240200",
    "end": "9246240"
  },
  {
    "text": "thing that has already been closed so for example here uh this example is okay",
    "start": "9246240",
    "end": "9252800"
  },
  {
    "text": "so we're getting the file and so this remember file is returns a file handle",
    "start": "9252800",
    "end": "9257840"
  },
  {
    "text": "but requires a scope and so only after we use the scope then we're calling effect. scoped but if we close the scope",
    "start": "9257840",
    "end": "9267000"
  },
  {
    "text": "before we use the file um there's only so much can kind of effect can do on a",
    "start": "9267000",
    "end": "9272160"
  },
  {
    "text": "type level uh to prevent you from uh kind of misusing the lifetime of resources right and so in this case this",
    "start": "9272160",
    "end": "9280640"
  },
  {
    "text": "is going to close the file immediately but we're still going to get the file handle back but that file has already been closed so so so that can lead to",
    "start": "9280640",
    "end": "9286560"
  },
  {
    "text": "errors so this can help you uh yeah uh does anyone have any",
    "start": "9286560",
    "end": "9292880"
  },
  {
    "text": "questions about Scopes so we're going to look at some exercises now so uh the",
    "start": "9292880",
    "end": "9300439"
  },
  {
    "text": "first one I think we all should be able to do which is great so we have a mock",
    "start": "9300439",
    "end": "9306880"
  },
  {
    "text": "file class and the mock file class has a close uh static function or a open",
    "start": "9306880",
    "end": "9313439"
  },
  {
    "text": "static function and a close method and you your job is to create a function",
    "start": "9313439",
    "end": "9320359"
  },
  {
    "text": "that takes a file descriptor and returns an effect that",
    "start": "9320359",
    "end": "9326040"
  },
  {
    "text": "uh returns a",
    "start": "9326040",
    "end": "9331240"
  },
  {
    "text": "number this should be void I think you can make that void um and basically we",
    "start": "9332160",
    "end": "9338720"
  },
  {
    "text": "want a effect that represents the opening and the closing of that",
    "start": "9338720",
    "end": "9344399"
  },
  {
    "text": "file um and the the way this works by the way is so there's this log test method and so",
    "start": "9344399",
    "end": "9351960"
  },
  {
    "text": "the when you run the test uh with this like test run method it's going to keep",
    "start": "9351960",
    "end": "9357279"
  },
  {
    "text": "track of things you log with this log test so what we're expecting here is",
    "start": "9357279",
    "end": "9363319"
  },
  {
    "text": "when you open the file uh this is going to run and it's going to open one and then when you open the second file down",
    "start": "9363319",
    "end": "9369760"
  },
  {
    "text": "here open two is going to get logged and then when you hopefully uh when this",
    "start": "9369760",
    "end": "9374960"
  },
  {
    "text": "scope gets closed down here here close two is going to get logged and then close one is going to get logged so your",
    "start": "9374960",
    "end": "9380720"
  },
  {
    "text": "job is to create this file function which is going to create an effect that",
    "start": "9380720",
    "end": "9386640"
  },
  {
    "text": "opens the file and then closes the file when the scope is closed and by the way I believe the",
    "start": "9386640",
    "end": "9392800"
  },
  {
    "text": "correct type for the effect should be the mock file like you should get the",
    "start": "9392800",
    "end": "9398200"
  },
  {
    "text": "instance of the mock file that's returned from the open function yeah ah that is correct thank",
    "start": "9398200",
    "end": "9405600"
  },
  {
    "text": "you so yeah so the way this log test function works is it requires this test",
    "start": "9405600",
    "end": "9411920"
  },
  {
    "text": "which I think so this t. I don't even think I exported oh I do no I",
    "start": "9411920",
    "end": "9420880"
  },
  {
    "text": "don't all right so here's one solution um so first so this is going to require",
    "start": "9433080",
    "end": "9438560"
  },
  {
    "text": "the scope because of the finalizer here right so first we're opening the file and that's actually what we're returning",
    "start": "9438560",
    "end": "9443600"
  },
  {
    "text": "but before we return it we're adding this finalizer where we close it right",
    "start": "9443600",
    "end": "9449000"
  },
  {
    "text": "and so this is going to return an effect that Returns the file but requires the scope because of the finalizer and this",
    "start": "9449000",
    "end": "9455160"
  },
  {
    "text": "is basically what the function that um uh that what acquire release does under",
    "start": "9455160",
    "end": "9460800"
  },
  {
    "text": "the hood right so the alternative is we can kind of doing this in one step step",
    "start": "9460800",
    "end": "9466760"
  },
  {
    "text": "is acquire release and we open the file and then we close the",
    "start": "9466760",
    "end": "9472439"
  },
  {
    "text": "file uh does anyone have any questions about",
    "start": "9472439",
    "end": "9477359"
  },
  {
    "text": "that um and the other the other solution was uh here right so uh this is like the",
    "start": "9477560",
    "end": "9485439"
  },
  {
    "text": "manual way of doing a choir release where you kind of do the require function and then that's what you end up",
    "start": "9485439",
    "end": "9490800"
  },
  {
    "text": "returning but before you return you do the release function as in a finalizer and so that's chire release is kind of",
    "start": "9490800",
    "end": "9496720"
  },
  {
    "text": "doing in one step yes Mike saying there's a minor uh difference between um",
    "start": "9496720",
    "end": "9503200"
  },
  {
    "text": "the two solutions the one if you go back to the acquire release one this",
    "start": "9503200",
    "end": "9509000"
  },
  {
    "text": "over so here uh okay thank",
    "start": "9509000",
    "end": "9514760"
  },
  {
    "text": "you so in the in the second solution the mock file. open uh will run",
    "start": "9514760",
    "end": "9523960"
  },
  {
    "text": "uninterruptable so if you if if that was an asynchronous operation now opening a file is probably",
    "start": "9523960",
    "end": "9531080"
  },
  {
    "text": "synchronous and pretty fast so you wouldn't get interrupted in between but",
    "start": "9531080",
    "end": "9536479"
  },
  {
    "text": "um generally speaking when you acquire resources you want the acquisition to be non-interruptible",
    "start": "9536479",
    "end": "9541880"
  },
  {
    "text": "the acquir release runs both the acquisition and the finalization in",
    "start": "9541880",
    "end": "9548040"
  },
  {
    "text": "non-interruptible regions so they cannot be interrupted the solution uh number",
    "start": "9548040",
    "end": "9554399"
  },
  {
    "text": "one uh if you interrupt it while opening the file you may risk of leaking open handle",
    "start": "9554399",
    "end": "9563359"
  },
  {
    "text": "or or stuff like that so it's a little bit more tedious if you want to do it manually in a non-interruptible way",
    "start": "9563359",
    "end": "9569840"
  },
  {
    "text": "which is why we have the the acquir release uh so what Mike is talking about um we will talk about near the very very",
    "start": "9569840",
    "end": "9576720"
  },
  {
    "text": "end but in effect there's this concept of interruption which is um again we're going to get near it to we're going to",
    "start": "9576720",
    "end": "9583040"
  },
  {
    "text": "get to it near the end um but there's this IDE idea that we can interrupt things and usually when we're acquiring",
    "start": "9583040",
    "end": "9589040"
  },
  {
    "text": "a resource or when we're uh releasing a resource that's like the worst time for Interruption right like we want to make",
    "start": "9589040",
    "end": "9595279"
  },
  {
    "text": "sure that our resources are like very kind of clearly like all the acquire operations go through and we never want",
    "start": "9595279",
    "end": "9601920"
  },
  {
    "text": "to like stop a release operation and so uh we'll talk about interruptions in a bit but um you can and again you can",
    "start": "9601920",
    "end": "9609240"
  },
  {
    "text": "manually do that but acquire release is very convenient and it's going to make sure that both the acquire phase and the",
    "start": "9609240",
    "end": "9614640"
  },
  {
    "text": "release phase are wrapped those uh uninterruptible things um which I know that's a lot kind of throwing at you but",
    "start": "9614640",
    "end": "9620080"
  },
  {
    "text": "uh we will get to that a bit um the next exercise um I'm actually not going to",
    "start": "9620080",
    "end": "9626160"
  },
  {
    "text": "have you do because uh I kind of structured it where there's like I",
    "start": "9626160",
    "end": "9631240"
  },
  {
    "text": "haven't taught you how to do it and there's only one way to do it so I'm just going to explain uh what's happened",
    "start": "9631240",
    "end": "9636319"
  },
  {
    "text": "um and so the the Crux of the problem is if you notice right this effect returns a scope or requires a scope this effect",
    "start": "9636319",
    "end": "9642880"
  },
  {
    "text": "requires a scope and this effect if we get rid of this",
    "start": "9642880",
    "end": "9649319"
  },
  {
    "text": "um this effect doesn't require like scope one and scope two it just requires",
    "start": "9649319",
    "end": "9655200"
  },
  {
    "text": "the one scope right the Scopes have kind of merged magically somehow um which usually is is kind of useful right if we",
    "start": "9655200",
    "end": "9662160"
  },
  {
    "text": "have a couple things all in the same function they can all share the same scope implicitly and then we can close",
    "start": "9662160",
    "end": "9667359"
  },
  {
    "text": "all of them at one time um but there might be a case where like we want to",
    "start": "9667359",
    "end": "9673160"
  },
  {
    "text": "close uh the first file before the second file right so by default they're kind of get close in in the reverse",
    "start": "9673160",
    "end": "9679000"
  },
  {
    "text": "order they were added but let's say we want to manually um prevent those Scopes",
    "start": "9679000",
    "end": "9684080"
  },
  {
    "text": "from merging and so there is a way to do this um and the way to do it is using",
    "start": "9684080",
    "end": "9690439"
  },
  {
    "text": "this function called scope. extend so we can manually make a scope which again is",
    "start": "9690439",
    "end": "9696200"
  },
  {
    "text": "just it's this data type that contains a series of finalizers so we can manually create a scope and we can create two",
    "start": "9696200",
    "end": "9702080"
  },
  {
    "text": "Scopes and then when we call scope. extend what we're saying is take this",
    "start": "9702080",
    "end": "9707359"
  },
  {
    "text": "effect and take all of its finalizers and put them into this other scope's",
    "start": "9707359",
    "end": "9712960"
  },
  {
    "text": "finalizers and so in that way what this is doing is removing the scope from this because we're saying take this scope and",
    "start": "9712960",
    "end": "9719960"
  },
  {
    "text": "put it into scope one and here we're saying take this scope and put it into scope two and then we can manually close",
    "start": "9719960",
    "end": "9726279"
  },
  {
    "text": "with scope. close each of those Scopes um so this is like actually fairly",
    "start": "9726279",
    "end": "9731640"
  },
  {
    "text": "lowlevel like I can't think of a lot of times you would need to do this um I mean there are like a ton of valid use",
    "start": "9731640",
    "end": "9737439"
  },
  {
    "text": "cases uh but it is kind of interesting to see how to prevent those Scopes from merging and also to know that they kind",
    "start": "9737439",
    "end": "9743399"
  },
  {
    "text": "of merge automatically uh so I have a recap slide",
    "start": "9743399",
    "end": "9750520"
  },
  {
    "text": "about",
    "start": "9750520",
    "end": "9753039"
  },
  {
    "start": "9757000",
    "end": "9795000"
  },
  {
    "text": "this so Resource Management right a scope contains finalizers that run when the scope is closed when a scope when an",
    "start": "9757000",
    "end": "9764200"
  },
  {
    "text": "effect requires a scope it's saying I have some resources I have some finalizers I need you to tell me",
    "start": "9764200",
    "end": "9769720"
  },
  {
    "text": "when to run those finalizers and using effect. scoped to provide the scope is",
    "start": "9769720",
    "end": "9775640"
  },
  {
    "text": "indicating that boundary right indicating where that scope needs to be closed and then if we want to create",
    "start": "9775640",
    "end": "9780840"
  },
  {
    "text": "scope resources there's this helper function called acquire release where we can define a acquire function define a",
    "start": "9780840",
    "end": "9786520"
  },
  {
    "text": "release function and it's going to make an effect that's automatically scoped for us does anyone have any questions",
    "start": "9786520",
    "end": "9792520"
  },
  {
    "text": "about this okay uh the next thing we're going to look at",
    "start": "9792520",
    "end": "9797640"
  },
  {
    "start": "9795000",
    "end": "12516000"
  },
  {
    "text": "is effect data types so there's a lot of data types in effect um and outside of",
    "start": "9797640",
    "end": "9804240"
  },
  {
    "text": "just the effect type like the effect is its own type but usually these types are are used as as data um we're effect",
    "start": "9804240",
    "end": "9809760"
  },
  {
    "text": "we're not really we're kind of describing computations right not using this data so the first type is option if",
    "start": "9809760",
    "end": "9815760"
  },
  {
    "text": "you've worked in any kind of functional something before this is should be pretty familiar and so an option is a",
    "start": "9815760",
    "end": "9822160"
  },
  {
    "text": "union of either some or none right so we either have some value or we don't have a value and the option describes both of",
    "start": "9822160",
    "end": "9828680"
  },
  {
    "text": "those possibilities and so there's an option type in effect and all these functions are coming from the option module so you",
    "start": "9828680",
    "end": "9834399"
  },
  {
    "text": "import option from effect and so uh there's we can create a none with",
    "start": "9834399",
    "end": "9840080"
  },
  {
    "text": "option. none and create a sum with option. sum and then also to option has a lot of",
    "start": "9840080",
    "end": "9846920"
  },
  {
    "text": "ways to kind of convert in and out of knowable values so we can create an option from a knowable value and then",
    "start": "9846920",
    "end": "9853720"
  },
  {
    "text": "we'll see in a second a lot of ways to kind of get the values out of options um here are some operations on",
    "start": "9853720",
    "end": "9860319"
  },
  {
    "text": "options so there's a is some right so and there's also an is none so this is will return a Boolean if it's some or",
    "start": "9860319",
    "end": "9867520"
  },
  {
    "text": "none and actually if you want to do this on your own I mean this is like kind of to see how option works right like",
    "start": "9867520",
    "end": "9873240"
  },
  {
    "text": "there's just a tag field and tag is uh you can see it's either none or some and",
    "start": "9873240",
    "end": "9881200"
  },
  {
    "text": "so option is quite simple right like either it's a as a tag none there's no value or it has a tag sum and there's a",
    "start": "9881200",
    "end": "9887640"
  },
  {
    "text": "value property with the thing um just like how we can map on an effect we can map on an option and so what this is",
    "start": "9887640",
    "end": "9894040"
  },
  {
    "text": "doing is it's saying if it's none right just like if there's a like if we have an effect that's a failure if it's a failure obviously we can't map on the",
    "start": "9894040",
    "end": "9899720"
  },
  {
    "text": "failure just like with that with option if it's a none we can't map on the option but if there's a value we can modify the value with this function uh",
    "start": "9899720",
    "end": "9906800"
  },
  {
    "text": "there's also flat map right where we're returning an option from the M the map function uh there's match where we can",
    "start": "9906800",
    "end": "9912920"
  },
  {
    "text": "do something based on the result of uh either none or some and then to get",
    "start": "9912920",
    "end": "9918359"
  },
  {
    "text": "the value out of an option we can use get or else which is going to provide a",
    "start": "9918359",
    "end": "9923840"
  },
  {
    "text": "fallback value we can use get or throw which is going to throw we can use get or null which is going to return either",
    "start": "9923840",
    "end": "9928960"
  },
  {
    "text": "the thing or a null and get or undefined um and so this is a kind of a way to",
    "start": "9928960",
    "end": "9935359"
  },
  {
    "text": "describe right either having something or nothing that is a bit more clear and also um kind of the benefits you get",
    "start": "9935359",
    "end": "9941960"
  },
  {
    "text": "over just having like T or null or t or on mind is that you have a lot of",
    "start": "9941960",
    "end": "9947000"
  },
  {
    "text": "functions to work with those values right like if you had t or null and it's and you wanted to map on it you'd first",
    "start": "9947000",
    "end": "9952960"
  },
  {
    "text": "have to check if it's not null or use like the kind of optional um there's a couple ways to do that but uh this is",
    "start": "9952960",
    "end": "9959399"
  },
  {
    "text": "how it's a bit more I would say clear there's a lot of combinators to to look",
    "start": "9959399",
    "end": "9964560"
  },
  {
    "text": "with that so just like option is either right again very very common thing and so",
    "start": "9964560",
    "end": "9971439"
  },
  {
    "text": "option you can actually think of as either where and either is just two things there's a left or a right and",
    "start": "9971439",
    "end": "9977600"
  },
  {
    "text": "option you can think of as either where one of the things is basically nothing um and so here we have uh we can",
    "start": "9977600",
    "end": "9985000"
  },
  {
    "text": "describe like an either that's either a number or a string um the one thing to know about either is that",
    "start": "9985000",
    "end": "9992279"
  },
  {
    "text": "the the two sides of the either are described as right and left so there's the right side and the left side those",
    "start": "9992279",
    "end": "9998200"
  },
  {
    "text": "are the two kind of members of the Union the one thing that is confusing is that right is actually the left type",
    "start": "9998200",
    "end": "10005680"
  },
  {
    "text": "parameter so the right is the number and the left is the string and so there's",
    "start": "10005680",
    "end": "10011000"
  },
  {
    "text": "there's a couple reasons for this um mainly because people felt like uh so in",
    "start": "10011000",
    "end": "10016040"
  },
  {
    "text": "effect right the value is the first thing um in there's a couple other types where the first thing is like the most",
    "start": "10016040",
    "end": "10021920"
  },
  {
    "text": "important and even though either isn't like biased to either side there's no like correct side that either where in",
    "start": "10021920",
    "end": "10027880"
  },
  {
    "text": "an effect like there's a success and a failure left and right there's really no difference but people felt like right",
    "start": "10027880",
    "end": "10033840"
  },
  {
    "text": "was like the success and left was the the error so uh Right comes first but",
    "start": "10033840",
    "end": "10039720"
  },
  {
    "text": "just like with you have is some and is none there's an is right there's an is left you can map you can map left just",
    "start": "10039720",
    "end": "10044920"
  },
  {
    "text": "like with like map error and effect you can map on both you can flat map you can match um lots of things you can do with",
    "start": "10044920",
    "end": "10051760"
  },
  {
    "text": "either um a really key distinction here is either kind of looks eily similar to",
    "start": "10051760",
    "end": "10057600"
  },
  {
    "text": "effect right and effect we have success and failure and either we have right and left um so there's a lot of functions",
    "start": "10057600",
    "end": "10064319"
  },
  {
    "text": "where Maybe maybe you could return an either or you could return an effect right if you're doing something that involves side effects should always",
    "start": "10064319",
    "end": "10071120"
  },
  {
    "text": "return an effect always return an effect but let's say you're doing something kind of purely synchronous that's only",
    "start": "10071120",
    "end": "10077000"
  },
  {
    "text": "operating on data uh then it's maybe a bit more hard to say I think the answer",
    "start": "10077000",
    "end": "10082240"
  },
  {
    "text": "I've been given before is you'll never be wrong just using effect everywhere even if you're not doing side effects",
    "start": "10082240",
    "end": "10087520"
  },
  {
    "text": "you can use effects everywhere right and then it's it's even more clear right with right or left again even though",
    "start": "10087520",
    "end": "10092920"
  },
  {
    "text": "right is kind of like the people say it's like the success type there's kind of no kind of buil-in definition where",
    "start": "10092920",
    "end": "10100359"
  },
  {
    "text": "success with effect it's very clear a success is either an effect is either a success or a failure and so um uh",
    "start": "10100359",
    "end": "10109160"
  },
  {
    "text": "someone had kind of come up to me over the break and talked about how if you're coming from kind of other functional libraries you may be used to kind of you",
    "start": "10109160",
    "end": "10115399"
  },
  {
    "text": "can have like an either and you can have an IO either so that describes an IO operation that can succeed or fail where",
    "start": "10115399",
    "end": "10121439"
  },
  {
    "text": "in effect those are kind of all kind of merged into one and so I would say",
    "start": "10121439",
    "end": "10126760"
  },
  {
    "text": "either is kind of most useful for describing data if you have data that's something or nothing you can use an",
    "start": "10126760",
    "end": "10132359"
  },
  {
    "text": "either if you have like some kind of computation that can succeed or fail that's where you use effect the other oh and then the one",
    "start": "10132359",
    "end": "10139760"
  },
  {
    "text": "other distinction is that effects are lazy and options or either are eager so when we have effect and then effect. map",
    "start": "10139760",
    "end": "10147000"
  },
  {
    "text": "and effect. flatmap uh all those are going to become one effect and uh like",
    "start": "10147000",
    "end": "10154040"
  },
  {
    "text": "they're kind of lazy we have to execute that effect to run all those through but all operations on options or either are",
    "start": "10154040",
    "end": "10160080"
  },
  {
    "text": "synchronous they just happen right when you call option. map it executes",
    "start": "10160080",
    "end": "10165399"
  },
  {
    "text": "immediately uh so here we have a side effect a side effect so it's going to take a number and log the side effect so",
    "start": "10165399",
    "end": "10171720"
  },
  {
    "text": "if we map with the side effect the log's not going to run right because we have to run the effect to trigger the side effect but with either uh it the side",
    "start": "10171720",
    "end": "10180600"
  },
  {
    "text": "effect happens immediately because either an option are eager",
    "start": "10180600",
    "end": "10186560"
  },
  {
    "text": "um the other use is interrupting with non-ff code because option and either",
    "start": "10186560",
    "end": "10191640"
  },
  {
    "text": "are purely synchronous they're a really great way to um kind of also get that",
    "start": "10191640",
    "end": "10197359"
  },
  {
    "text": "like either success or error data type um that you don't have to wrap everything in effect so if you're",
    "start": "10197359",
    "end": "10203279"
  },
  {
    "text": "working with non effect code uh you can kind of use either's in that",
    "start": "10203279",
    "end": "10209840"
  },
  {
    "text": "way so how do we convert um from one to the other",
    "start": "10209840",
    "end": "10216200"
  },
  {
    "text": "mainly from options and ISS to effects and so I talked about uh tags right tags",
    "start": "10216200",
    "end": "10222479"
  },
  {
    "text": "are a subtype of effect so we can use them in any effect Concept in any effect",
    "start": "10222479",
    "end": "10228000"
  },
  {
    "text": "context as if they were an effect and so in the same way you can use an option",
    "start": "10228000",
    "end": "10233120"
  },
  {
    "text": "and you can use an either as if it were an effect and how that Maps is if you have an option that's basically",
    "start": "10233120",
    "end": "10239160"
  },
  {
    "text": "equivalent to an effect that is either succeeds with the value or fails with this no such element exception",
    "start": "10239160",
    "end": "10245680"
  },
  {
    "text": "and if you wi either the either maps to an effect where the type parameters are flipped so here we have flat map right",
    "start": "10245680",
    "end": "10253000"
  },
  {
    "text": "effect. flatmap and we're flat mapping on an option and it actually just works",
    "start": "10253000",
    "end": "10258760"
  },
  {
    "text": "actually just works um and you can also see that we're flat mapping not to an effect but to an either and even though",
    "start": "10258760",
    "end": "10265319"
  },
  {
    "text": "it's an either it's not an effect it just works right um now these can probably be overused uh again if you",
    "start": "10265319",
    "end": "10272800"
  },
  {
    "text": "have a computation prescribe it in an effect um but this is a convenient way to uh convert options",
    "start": "10272800",
    "end": "10280399"
  },
  {
    "text": "or convert from either's uh into effects uh next we kind of already",
    "start": "10280399",
    "end": "10286279"
  },
  {
    "text": "looked at this but we have exit and so as I mentioned earlier exit is equivalent to an either or cause e and",
    "start": "10286279",
    "end": "10293040"
  },
  {
    "text": "we can get an exit from the Run sync exit and something you'll also notice is if we go back to uh resource management",
    "start": "10293040",
    "end": "10301479"
  },
  {
    "text": "is when we um uh call a finalizer I believe in",
    "start": "10301479",
    "end": "10308000"
  },
  {
    "text": "here we get an exit and so what this is saying is all effects when they kind of",
    "start": "10308000",
    "end": "10314640"
  },
  {
    "text": "finish executing they have an exit right the outcome of that program and so what",
    "start": "10314640",
    "end": "10319960"
  },
  {
    "text": "this finalizer allows us to do is to determine what to kind of do in the",
    "start": "10319960",
    "end": "10325120"
  },
  {
    "text": "finalizer based on the exit of the effect where the scope is closed",
    "start": "10325120",
    "end": "10331680"
  },
  {
    "text": "um and so exit right we can m on exit and it's a union of either a failure of a cause or the success value of just the",
    "start": "10332040",
    "end": "10339399"
  },
  {
    "text": "value and so the cause as again we looked at earlier kind of describes all the possible ways a computation can fail",
    "start": "10339399",
    "end": "10347040"
  },
  {
    "text": "right so more than just pure failure there's lots of other kind of more advanced failure cases right is this a",
    "start": "10347040",
    "end": "10352800"
  },
  {
    "text": "known failure is this a defect right an unexpected failure was the effect interrupted right uh is that considered",
    "start": "10352800",
    "end": "10359200"
  },
  {
    "text": "failure is a not considered failure right so we have it as a separate option and then did errors happen sequentially",
    "start": "10359200",
    "end": "10365439"
  },
  {
    "text": "or in parallel and so the cause can encode all of those possible",
    "start": "10365439",
    "end": "10371319"
  },
  {
    "text": "scenarios the next data type we have is duration and so duration is kind of a uh",
    "start": "10371319",
    "end": "10378359"
  },
  {
    "text": "type that represents a Time duration and you can construct it from milliseconds from seconds zero Infinity I think",
    "start": "10378359",
    "end": "10385800"
  },
  {
    "text": "there's days as well um you can decode from this kind of string seven hours",
    "start": "10385800",
    "end": "10393040"
  },
  {
    "text": "uh and then you can uh get these out as milliseconds or seconds and there's",
    "start": "10393040",
    "end": "10398200"
  },
  {
    "text": "there's a couple other Constructors a couple other destructors but it's a way to kind of um rather than kind of taking",
    "start": "10398200",
    "end": "10403640"
  },
  {
    "text": "in a number uh in your API and being like is that milliseconds is that seconds you can take in a duration and",
    "start": "10403640",
    "end": "10411200"
  },
  {
    "text": "the user of that API can kind of provide whatever duration they want from whatever units they want and you can get out whatever units you want and of",
    "start": "10411200",
    "end": "10417840"
  },
  {
    "text": "course there's uh a lot of functions on that less than greater than some times um and those will all kind of uh uh",
    "start": "10417840",
    "end": "10425200"
  },
  {
    "text": "modify the kind of internal value of a duration so the next data structures",
    "start": "10425200",
    "end": "10432160"
  },
  {
    "text": "we're going to look at are your more like typical data structures so we have a link list we have a hashmap we have a",
    "start": "10432160",
    "end": "10437200"
  },
  {
    "text": "hashset there's a red black tree there's a couple of these and these are all um unlike a JavaScript map or a JavaScript",
    "start": "10437200",
    "end": "10444080"
  },
  {
    "text": "set which is mutable these are all functional and they're all immutable so what that means is basically every",
    "start": "10444080",
    "end": "10449439"
  },
  {
    "text": "operation is going to be a function and not a method and every time you operate on a uh on one of these data sets you",
    "start": "10449439",
    "end": "10456680"
  },
  {
    "text": "get back a new um copy of that data so um if you've never worked with this",
    "start": "10456680",
    "end": "10462560"
  },
  {
    "text": "before right if we have a hashmap we have an empty hashmap and we assign that to a variable and then we say hash map.",
    "start": "10462560",
    "end": "10468640"
  },
  {
    "text": "uh set the key and the value um we're going to get back a new hashmap the original hashmap will still be empty",
    "start": "10468640",
    "end": "10475040"
  },
  {
    "text": "right so the next data type um and I'm not going to go into these too much I",
    "start": "10475040",
    "end": "10480600"
  },
  {
    "text": "think we'll look at one in one of the examples uh but these are just to kind of let you know that they exist um the",
    "start": "10480600",
    "end": "10486920"
  },
  {
    "text": "most common is probably hashmap and hash set which actually will come back to in a second but the the most common data",
    "start": "10486920",
    "end": "10494520"
  },
  {
    "text": "type you're likely to run into is this thing called a chunk and a chunk is very similar to an array right it's a kind of",
    "start": "10494520",
    "end": "10501200"
  },
  {
    "text": "collection of elements that are uh ordered and you can conceptually think",
    "start": "10501200",
    "end": "10507800"
  },
  {
    "text": "of this as being equivalent to array but there's a lot happening under the under the hood um that is going to",
    "start": "10507800",
    "end": "10515040"
  },
  {
    "text": "to uh it does some cool stuff and so the reason is it's um immutable like all the",
    "start": "10515040",
    "end": "10521000"
  },
  {
    "text": "other data types but the reason this is important is because when we um append to a chunk",
    "start": "10521000",
    "end": "10529520"
  },
  {
    "text": "right instead of copying all the elements from the previous array and copying them into a new array except",
    "start": "10529520",
    "end": "10535600"
  },
  {
    "text": "with the element at the start what it's going to do under the hood is basically create this new thing um that has a",
    "start": "10535600",
    "end": "10542560"
  },
  {
    "text": "pointer to the new element and a pointer to the previous elements and so only",
    "start": "10542560",
    "end": "10547680"
  },
  {
    "text": "when you kind of tell it hey I want the chunk as an array it's going to go through its kind of internal structure",
    "start": "10547680",
    "end": "10553160"
  },
  {
    "text": "that might be split up into a couple things and copy all those elements to an array but uh by default there's a lot",
    "start": "10553160",
    "end": "10559080"
  },
  {
    "text": "happening under the hood um that makes us a bit more powerful than than just a function right so it's not going to",
    "start": "10559080",
    "end": "10564560"
  },
  {
    "text": "fully copy everything every time you mutate it and so you can make a chunk you can",
    "start": "10564560",
    "end": "10569800"
  },
  {
    "text": "make a chunk from an itable you can append you can drop right all very common array operations",
    "start": "10569800",
    "end": "10574880"
  },
  {
    "text": "um but internally the chunk is doing kind of different things and so if you want it out as an array you can call uh",
    "start": "10574880",
    "end": "10581520"
  },
  {
    "text": "chunk. two readon array but there's also kind of built in there's like a chunk. four each and there's a couple other",
    "start": "10581520",
    "end": "10587479"
  },
  {
    "text": "methods built in and so that way uh even if it's kind of broken up in its internal structure the the chunk knows",
    "start": "10587479",
    "end": "10593160"
  },
  {
    "text": "how to kind of go through that internal structure so you don't have to copy everything to an array to kind of go through all the elements in the",
    "start": "10593160",
    "end": "10599880"
  },
  {
    "text": "chunk and so finally are these thing called traits and I put traits in kind of big quotes um and so the two traits",
    "start": "10599880",
    "end": "10608319"
  },
  {
    "text": "uh effect has are equal and hash and so they're very similar to kind of the",
    "start": "10608319",
    "end": "10613560"
  },
  {
    "text": "iterator trait again big quotes great where we can Define uh our different",
    "start": "10613560",
    "end": "10619239"
  },
  {
    "text": "data types to become iterators by giving them like the symbol. iterator uh key",
    "start": "10619239",
    "end": "10625000"
  },
  {
    "text": "and then it can return an iterator and then we can use it in functions that take iterators right there's an iterator",
    "start": "10625000",
    "end": "10631439"
  },
  {
    "text": "interface and so just like that effect has traits and so equals um works with a",
    "start": "10631439",
    "end": "10637279"
  },
  {
    "text": "function called Equals and half represents a function called hash and so",
    "start": "10637279",
    "end": "10644000"
  },
  {
    "text": "uh equals takes two two things and Compares them it's going to return a Boolean either true or false and a hash",
    "start": "10644000",
    "end": "10650760"
  },
  {
    "text": "is going to take a thing and return a number right that is some kind of hash of that thing and so all types have a",
    "start": "10650760",
    "end": "10658160"
  },
  {
    "text": "default implementation um so you all equals will always work with any type hash will",
    "start": "10658160",
    "end": "10664040"
  },
  {
    "text": "always work with any type but you can provide custom implementations and so where this comes into play is you can",
    "start": "10664040",
    "end": "10670000"
  },
  {
    "text": "Define for example uh deep equality right we can create a custom",
    "start": "10670000",
    "end": "10675160"
  },
  {
    "text": "implementation of equals that doesn't just check referential equality it checks deep",
    "start": "10675160",
    "end": "10680720"
  },
  {
    "text": "equality and uh we I'll show you that in a sec but where this becomes really useful is with normal sets in JavaScript",
    "start": "10680720",
    "end": "10689160"
  },
  {
    "text": "they only work off referential equality right so if we kind of make a chunk and we add another chunk the size of this",
    "start": "10689160",
    "end": "10696200"
  },
  {
    "text": "set will be two because we added two separate objects right the first chunk and then the second chunk and these are",
    "start": "10696200",
    "end": "10701720"
  },
  {
    "text": "two separate objects but with if we use the effect hashmap and we add these two",
    "start": "10701720",
    "end": "10709279"
  },
  {
    "text": "chunks the size will actually be one because these chunks have a special",
    "start": "10709279",
    "end": "10715000"
  },
  {
    "text": "equals implementation that makes them so when you use the effect equals they're going to be true and when you hash both",
    "start": "10715000",
    "end": "10721960"
  },
  {
    "text": "of them they're going to have the same hash and so because that's the case the",
    "start": "10721960",
    "end": "10727319"
  },
  {
    "text": "effect hashmap which operates off uh the effect traits is going to say well these",
    "start": "10727319",
    "end": "10732800"
  },
  {
    "text": "have the same value so I am not going to create the obviously they go in the same spot in the",
    "start": "10732800",
    "end": "10738880"
  },
  {
    "text": "hash so do Implement a trait you implement it just like the interval",
    "start": "10738880",
    "end": "10744040"
  },
  {
    "text": "right so here we have a Fu and Fu one which just takes a number and we have F",
    "start": "10744040",
    "end": "10749800"
  },
  {
    "text": "two and F2 implements the equal. equal trait and the hash do and these are really just",
    "start": "10749800",
    "end": "10756880"
  },
  {
    "text": "um functions right so here's the equal interface and it just has this equal symbol and it takes a that and returns a",
    "start": "10756880",
    "end": "10764680"
  },
  {
    "text": "Boolean and so hash is the same except it returns a number and so how this looks like in practice is we Define a",
    "start": "10764680",
    "end": "10772760"
  },
  {
    "text": "function for the equals symbol that returns a Boolean so in this case we're checking if the other thing is an",
    "start": "10772760",
    "end": "10779520"
  },
  {
    "text": "instance of Fu and if the numbers are the same right so kind of a deep equality check and then hash is just",
    "start": "10779520",
    "end": "10786160"
  },
  {
    "text": "going to return uh this hash do number function with this. X and so when we do",
    "start": "10786160",
    "end": "10792439"
  },
  {
    "text": "this we can see that uh if we add right so we have F two where we've manually",
    "start": "10792439",
    "end": "10797960"
  },
  {
    "text": "implemented these and we have f one where we have not and so if we add two Fu ones and two F tws then the size is",
    "start": "10797960",
    "end": "10804760"
  },
  {
    "text": "going to be three because the hash set is going to see these as distinct and it's going to see these as the same and",
    "start": "10804760",
    "end": "10811439"
  },
  {
    "text": "with equals we can call equals. equals and so this is equals like the equal module right we're importing equal from",
    "start": "10811439",
    "end": "10818680"
  },
  {
    "text": "effect and so we call equal side equals on the two fo and",
    "start": "10818680",
    "end": "10824080"
  },
  {
    "text": "these are different but the ones where we manually defined the implementation they're the",
    "start": "10824080",
    "end": "10830721"
  },
  {
    "text": "same so next is the data module and so data module contains a number of",
    "start": "10831080",
    "end": "10836800"
  },
  {
    "text": "functions that basically Implement deep equality and hashing for you so uh if",
    "start": "10836800",
    "end": "10842319"
  },
  {
    "text": "you want to manually Implement stuff you can and this is probably most useful if you like uh have an equality check that",
    "start": "10842319",
    "end": "10849520"
  },
  {
    "text": "only depends on on some kind of like you have a type with kind of multiple things",
    "start": "10849520",
    "end": "10854560"
  },
  {
    "text": "within it and maybe you only care if they're equal about two of them right and so what equal is going to do is is Def find a kind of default",
    "start": "10854560",
    "end": "10860800"
  },
  {
    "text": "implementation that by default is going to check deep equality so all the things are equal to all the",
    "start": "10860800",
    "end": "10866399"
  },
  {
    "text": "things and so the first way there's kind of each of these ways has has two ways",
    "start": "10866399",
    "end": "10872520"
  },
  {
    "text": "so the first way is with a class where I talked about class you can define a type and a value at the same time and so",
    "start": "10872520",
    "end": "10878640"
  },
  {
    "text": "there's a class way and the non-class way you have to define the type first and then you define the value so for",
    "start": "10878640",
    "end": "10883880"
  },
  {
    "text": "data. case we first Define this type and then we Define The Constructor where we pass the type in and then we get back",
    "start": "10883880",
    "end": "10891080"
  },
  {
    "text": "this Constructor where we get back uh this value of the interface type but",
    "start": "10891080",
    "end": "10897359"
  },
  {
    "text": "this value has a uh special equals implementation and a special hash",
    "start": "10897359",
    "end": "10902640"
  },
  {
    "text": "implementation uh for us done for us and if you are doing something that",
    "start": "10902640",
    "end": "10910080"
  },
  {
    "text": "is tagged which is quite common um you use data. tagged instead and so I would",
    "start": "10910080",
    "end": "10916239"
  },
  {
    "text": "say the much more common way of doing this is with classes right so we can create a kind of data. class here and",
    "start": "10916239",
    "end": "10923359"
  },
  {
    "text": "this is automatically going to implement the hash and the equality for us and obvious with tag class the same thing",
    "start": "10923359",
    "end": "10930439"
  },
  {
    "text": "but automatically tagged with this string tag and the other useful things about tags or with classes is if you",
    "start": "10930439",
    "end": "10937720"
  },
  {
    "text": "want to Define additional Behavior at the same time uh you",
    "start": "10937720",
    "end": "10943278"
  },
  {
    "text": "can and then there's this other function which uh a very common kind of thing in",
    "start": "10944040",
    "end": "10950439"
  },
  {
    "text": "effect is to have unions of tagged data types right and so there's this function",
    "start": "10950439",
    "end": "10955960"
  },
  {
    "text": "that kind of can create all of the Constructor functions for Union of tag data types at once uh which is can be",
    "start": "10955960",
    "end": "10962840"
  },
  {
    "text": "useful and the last thing is data. tagged error",
    "start": "10962840",
    "end": "10971040"
  },
  {
    "text": "and so data. tagged error is basically the same as these other functions we've looked at but there's something special",
    "start": "10971040",
    "end": "10976439"
  },
  {
    "text": "about this data type which is that you can yield it just like an effect so",
    "start": "10976439",
    "end": "10982960"
  },
  {
    "text": "normally you'd have to wrap this in effect. fail to create a failure but if you use data. tagged",
    "start": "10982960",
    "end": "10989880"
  },
  {
    "text": "error you can um omit that effect. fail it will automatically know that this is",
    "start": "10989880",
    "end": "10995920"
  },
  {
    "text": "a failure so now we're going to look at the exercises for data and so the first one I have for you",
    "start": "10995920",
    "end": "11003960"
  },
  {
    "text": "is to manually Implement equals and hash so I have a type it has three fields and",
    "start": "11003960",
    "end": "11010120"
  },
  {
    "text": "your job is to implement the equals interface and implement the hash",
    "start": "11010120",
    "end": "11015160"
  },
  {
    "text": "interface and then um I think we'll try to do both of these at the same time now",
    "start": "11015399",
    "end": "11020720"
  },
  {
    "text": "so the second exercise is to create a data type for a string that is guaranteed to be only asy so I gave you",
    "start": "11020720",
    "end": "11027200"
  },
  {
    "text": "a Rex and so however you want to do that uh create a some kind of function that",
    "start": "11027200",
    "end": "11032800"
  },
  {
    "text": "takes in a string make sure it's only asky and then returns some kind of special",
    "start": "11032800",
    "end": "11039359"
  },
  {
    "text": "type and yeah we'll take",
    "start": "11039359",
    "end": "11044279"
  },
  {
    "text": "510 um so the brand was actually what I had in mind um now there are a couple",
    "start": "11047080",
    "end": "11052720"
  },
  {
    "text": "and the reason for that is uh so who does anyone not know what a brand is in typescript just raise your hand yes okay",
    "start": "11052720",
    "end": "11059520"
  },
  {
    "text": "let's go over this so um we talked about this whole module is about data right creating our own",
    "start": "11059520",
    "end": "11065800"
  },
  {
    "text": "data types and so one option for this would be to kind of create a maybe I",
    "start": "11065800",
    "end": "11071800"
  },
  {
    "text": "think a class is a good way to do this um called asky string that has a uh Constructor and it",
    "start": "11071800",
    "end": "11081279"
  },
  {
    "text": "takes a value string oh I'm very sorry I'm very",
    "start": "11081279",
    "end": "11088521"
  },
  {
    "text": "sorry there we go um so one way to do this is declaring",
    "start": "11089840",
    "end": "11096520"
  },
  {
    "text": "a class right a class is a new data type and so then in the Constructor of that data type we are kind of doing some",
    "start": "11096520",
    "end": "11103520"
  },
  {
    "text": "validation logic um but the thing with classes is their objects right and there is some",
    "start": "11103520",
    "end": "11109760"
  },
  {
    "text": "overhead to creating an object right like the especially if this only exists",
    "start": "11109760",
    "end": "11115840"
  },
  {
    "text": "as a wrapper to a string it will never do anything more than a string it is literally just a string that we have",
    "start": "11115840",
    "end": "11121840"
  },
  {
    "text": "added some validation logic to but we never want to confuse it with a string right an an asky only string is a",
    "start": "11121840",
    "end": "11128520"
  },
  {
    "text": "completely kind of separate thing than a normal string and so if we just do this",
    "start": "11128520",
    "end": "11134760"
  },
  {
    "text": "if we just say type asky string equals string um this is not the same even if",
    "start": "11134760",
    "end": "11142279"
  },
  {
    "text": "we write a function that first validates something um we can",
    "start": "11142279",
    "end": "11148160"
  },
  {
    "text": "basically we can right we can pass this non- asky",
    "start": "11148160",
    "end": "11154720"
  },
  {
    "text": "string into this asky string and so the question then becomes",
    "start": "11154720",
    "end": "11160120"
  },
  {
    "text": "how can we make uh a type distinct from another type without creating a wrapper",
    "start": "11160120",
    "end": "11166319"
  },
  {
    "text": "type and so the solution to that is something called a brand which is a",
    "start": "11166319",
    "end": "11171359"
  },
  {
    "text": "useful typescript trick and what a brand does is it allows us to",
    "start": "11171359",
    "end": "11176800"
  },
  {
    "text": "kind of uh take primitive types so A Primitive type is like a string or a",
    "start": "11176800",
    "end": "11182800"
  },
  {
    "text": "number or a Boolean and take these types and separate them where make an asky",
    "start": "11182800",
    "end": "11190520"
  },
  {
    "text": "string separate from a normal string make it something new and so the way you do that is you add this thing called a",
    "start": "11190520",
    "end": "11197479"
  },
  {
    "text": "brand um and so we're going to use the brand module from effect and so we're going to say brand. brand it's going to",
    "start": "11197479",
    "end": "11203600"
  },
  {
    "text": "take a string asky string and you don't actually have to use the effect way like",
    "start": "11203600",
    "end": "11209319"
  },
  {
    "text": "this is a useful thing to do but you can actually a lot of times this is called brand uh aski string but the idea is on",
    "start": "11209319",
    "end": "11217399"
  },
  {
    "text": "a type level um this is now distinct from a string because uh even though",
    "start": "11217399",
    "end": "11224880"
  },
  {
    "text": "this this intersection is is not actually possible to create a value I mean you could but basically because a",
    "start": "11224880",
    "end": "11232239"
  },
  {
    "text": "string doesn't have this brand property it is now a separate type from a just",
    "start": "11232239",
    "end": "11238399"
  },
  {
    "text": "base string and so now you see we get this error string is not table to ask you",
    "start": "11238399",
    "end": "11243560"
  },
  {
    "text": "string and so in effect there's this thing called a brand where we can",
    "start": "11243560",
    "end": "11248960"
  },
  {
    "text": "manually make this with brand. brand and then we can write a function",
    "start": "11248960",
    "end": "11256399"
  },
  {
    "text": "called validate asky um and this is going to return an",
    "start": "11256399",
    "end": "11261640"
  },
  {
    "text": "asky string and so then if we uh kind",
    "start": "11261640",
    "end": "11268520"
  },
  {
    "text": "of validate aski hello right and then do",
    "start": "11268520",
    "end": "11275200"
  },
  {
    "text": "this now",
    "start": "11275200",
    "end": "11280960"
  },
  {
    "text": "uh this should work right and so again the reason this is useful is we can",
    "start": "11283279",
    "end": "11289359"
  },
  {
    "text": "create a new type that is distinct from some other perim type but without the",
    "start": "11289359",
    "end": "11295279"
  },
  {
    "text": "overhead of creating a wrapper and so effect gives you um some actually some",
    "start": "11295279",
    "end": "11300760"
  },
  {
    "text": "nice ways to create Brands um and",
    "start": "11300760",
    "end": "11306120"
  },
  {
    "text": "so that's going to look like this right so the type brand has this",
    "start": "11306120",
    "end": "11312960"
  },
  {
    "text": "brand. brand and then there's two functions in the brand module there's a",
    "start": "11312960",
    "end": "11318359"
  },
  {
    "text": "function called brand. refined and there's a function called brand. nominal",
    "start": "11318359",
    "end": "11324080"
  },
  {
    "text": "and so brand. nominal is going to return a",
    "start": "11324080",
    "end": "11329479"
  },
  {
    "text": "function and this function is like the Constructor function it takes in the previous type just a string and it gives",
    "start": "11329479",
    "end": "11336239"
  },
  {
    "text": "you an asky string and the reason for this is because again strings and asky strings are different and to get an asky",
    "start": "11336239",
    "end": "11341640"
  },
  {
    "text": "string actually the only way to get an asky string is to manually cast the string to an asky string and so nominal",
    "start": "11341640",
    "end": "11347359"
  },
  {
    "text": "says that um there's no uh kind of validation",
    "start": "11347359",
    "end": "11352520"
  },
  {
    "text": "logic with want to do first we just want to create an asky string from a string but this brand function uh takes a",
    "start": "11352520",
    "end": "11360239"
  },
  {
    "text": "validation function and so that's that was my goal here was to say um to kind of show this function and show you how",
    "start": "11360239",
    "end": "11366880"
  },
  {
    "text": "you can create a new type that first is going to test the string against the Rex",
    "start": "11366880",
    "end": "11373640"
  },
  {
    "text": "and otherwise you can map it to this brand error um and that way you can create these",
    "start": "11373640",
    "end": "11381800"
  },
  {
    "text": "types um uh and you could again you could do this manually but this is effect provides uh",
    "start": "11381800",
    "end": "11388479"
  },
  {
    "text": "a way to do this um so this is what what I did um so I think this was very",
    "start": "11388479",
    "end": "11395000"
  },
  {
    "text": "similar to what uh you had done in the back where first right we're checking and so these are actually um there's no",
    "start": "11395000",
    "end": "11401200"
  },
  {
    "text": "right way to do this right like you could decide that I only am deciding these are equal if the IDS are equal and",
    "start": "11401200",
    "end": "11406239"
  },
  {
    "text": "maybe these checks are like uh expensive but you know if the IDS are equal that these are the same and so",
    "start": "11406239",
    "end": "11414040"
  },
  {
    "text": "uh this is one way to check all of the items um but again you can how you",
    "start": "11414040",
    "end": "11421279"
  },
  {
    "text": "define equals is up to you and it can change per data type right and then for hash so you actually you could do",
    "start": "11421279",
    "end": "11428080"
  },
  {
    "text": "something like you could return uh like this. id. length plus",
    "start": "11428080",
    "end": "11436040"
  },
  {
    "text": "this. amount plus this. time.get time um",
    "start": "11436040",
    "end": "11441960"
  },
  {
    "text": "but the hash mod module provides some functions that uh if you look at them they they basically do a bunch of math",
    "start": "11441960",
    "end": "11448239"
  },
  {
    "text": "and and kind of bit shifting and stuff um and so uh this is one option right maybe",
    "start": "11448239",
    "end": "11454720"
  },
  {
    "text": "this is a bad hash maybe it's a good hash we don't know um a probably better hash is doing this where we use the",
    "start": "11454720",
    "end": "11461200"
  },
  {
    "text": "functions from the hash module and so first we hash do string and then there's this hash do combine function which",
    "start": "11461200",
    "end": "11466920"
  },
  {
    "text": "takes two hashes and combines them and so uh this is again one solution but the",
    "start": "11466920",
    "end": "11473000"
  },
  {
    "text": "whole idea of this is that you can Implement however you want for your data type or I guess I I did make the test",
    "start": "11473000",
    "end": "11478200"
  },
  {
    "text": "cases so that they should be the same but in in theory you could make them however you um so the question was this person",
    "start": "11478200",
    "end": "11485680"
  },
  {
    "text": "is US using this thing called schema which I'll talk about in a second and um they're kind of unclear uh kind of where",
    "start": "11485680",
    "end": "11492640"
  },
  {
    "text": "with all these different modules what is like the right way to define our data types where should the types come from",
    "start": "11492640",
    "end": "11498239"
  },
  {
    "text": "where should the values come from what about all these different errors and so um on schema so schema is something",
    "start": "11498239",
    "end": "11505600"
  },
  {
    "text": "we're going to talk about we're hopefully going to get to and we will is a effect First Data validation Library",
    "start": "11505600",
    "end": "11511760"
  },
  {
    "text": "so uh many of you are probably familiar with Zod so effect has its own version of Zod called schema does some really",
    "start": "11511760",
    "end": "11517080"
  },
  {
    "text": "really cool things which we will get to um it can kind of be confusing",
    "start": "11517080",
    "end": "11522680"
  },
  {
    "text": "sometimes uh where the kind of definitions for your data should come from so for example you can define a",
    "start": "11522680",
    "end": "11529520"
  },
  {
    "text": "schema uh uh you can a schema like within the library schema and then you can derive",
    "start": "11529520",
    "end": "11537000"
  },
  {
    "text": "the type of that structure from the schema and then you can create a data",
    "start": "11537000",
    "end": "11543520"
  },
  {
    "text": "type of the same type right and so that might be one way to do it there's also",
    "start": "11543520",
    "end": "11549680"
  },
  {
    "text": "within schema there is a way uh to create uh a",
    "start": "11549680",
    "end": "11555000"
  },
  {
    "text": "class which also creates a data type and so there's a lot of ways um and I don't",
    "start": "11555000",
    "end": "11561399"
  },
  {
    "text": "think there's like one good answer I think it kind of depends on on what you require so",
    "start": "11561399",
    "end": "11568960"
  },
  {
    "text": "if um I mean this is even without effect it's also I think if you're using Zod a",
    "start": "11568960",
    "end": "11575279"
  },
  {
    "text": "lot of people like Wonder like do I Define my my data types first and then create aod validator or some kind of",
    "start": "11575279",
    "end": "11581319"
  },
  {
    "text": "schema for that type or do I make the validator then derive the type of the data from that",
    "start": "11581319",
    "end": "11587720"
  },
  {
    "text": "validator and I don't think there is a good answer I think",
    "start": "11587720",
    "end": "11593840"
  },
  {
    "text": "when you're defining your own data types in your",
    "start": "11593840",
    "end": "11597601"
  },
  {
    "text": "application uh as like a default I think you can't",
    "start": "11598920",
    "end": "11604359"
  },
  {
    "text": "go wrong with just um I think classes are are really convenient but you don't have to use classes but uh again the",
    "start": "11604359",
    "end": "11611000"
  },
  {
    "text": "thing that's convenient about classes is you're getting the type and the value in one place and then if you want to use",
    "start": "11611000",
    "end": "11616279"
  },
  {
    "text": "the data module you don't have to right the data module is going to um provide",
    "start": "11616279",
    "end": "11622279"
  },
  {
    "text": "kind of implementations of these so if you think okay I'm probably going to need a strict equal implementation I'm",
    "start": "11622279",
    "end": "11630080"
  },
  {
    "text": "going to need a hash implementation then you can use the data module uh classes",
    "start": "11630080",
    "end": "11637680"
  },
  {
    "text": "like this um I don't think that was a great",
    "start": "11637680",
    "end": "11643680"
  },
  {
    "text": "answer uh but I think the answer is basically it's it's complicated and there's lots of different ways to do it",
    "start": "11643680",
    "end": "11650680"
  },
  {
    "text": "um and yeah I'm sorry did that kind of get to what you were",
    "start": "11650680",
    "end": "11656960"
  },
  {
    "text": "asking yeah I'm sure Michael would have an interesting answer um as always I I",
    "start": "11656960",
    "end": "11662359"
  },
  {
    "text": "think Mel kind of talked about joining the Discord if you guys do have questions um on the Discord people",
    "start": "11662359",
    "end": "11667399"
  },
  {
    "text": "answer all the time uh there's a beginners Channel there's a not beginners Channel but don't be scared to ask the not beginers Channel um there's",
    "start": "11667399",
    "end": "11674439"
  },
  {
    "text": "channels for different modules so if you have uh questions even as simple as like hey like I have some type how do I",
    "start": "11674439",
    "end": "11679840"
  },
  {
    "text": "Define this type there's like five different ways you've told me to Define types um so definitely feel free to ask",
    "start": "11679840",
    "end": "11684960"
  },
  {
    "text": "in the Discord so finally on to the the errors exercises um I have a couple things that",
    "start": "11684960",
    "end": "11693000"
  },
  {
    "text": "I want to kind of hints I want to give you so that these are are much more doable and",
    "start": "11693000",
    "end": "11700720"
  },
  {
    "text": "so the first one is let's talk about I'm going to",
    "start": "11700720",
    "end": "11706760"
  },
  {
    "text": "talk about all of them and then I'm going to give you a chance to do all of them just because I want to kind of explain each one so here we have an",
    "start": "11706760",
    "end": "11713080"
  },
  {
    "text": "effect and this one uses effect. suspend which we haven't talked about yet but",
    "start": "11713080",
    "end": "11718479"
  },
  {
    "text": "effect. suspend is a way to uh just like how in effect. sync we're delaying the",
    "start": "11718479",
    "end": "11726600"
  },
  {
    "text": "creation of the value until we run the effect and so effect. suspend is the",
    "start": "11726600",
    "end": "11731960"
  },
  {
    "text": "same but instead of creating a value we're creating an effect so it's saying it's basically creating an effect behind",
    "start": "11731960",
    "end": "11738199"
  },
  {
    "text": "a Thun so effect. suspend creates an effect from a Thun so so we're lazily creating an effect and there's a couple",
    "start": "11738199",
    "end": "11745120"
  },
  {
    "text": "reasons why you might want to do that um this is one of them there's probably better ways to write this effect but",
    "start": "11745120",
    "end": "11750840"
  },
  {
    "text": "this is a way so we have a variable I that we are incrementing every time we",
    "start": "11750840",
    "end": "11756000"
  },
  {
    "text": "call this effect and if it's 100 then we're going to succeed otherwise we're going to fail and so the challenge is to",
    "start": "11756000",
    "end": "11763199"
  },
  {
    "text": "find a way to basically keep running this effect like repeating this effect until it doesn't fail and so uh the hint",
    "start": "11763199",
    "end": "11770920"
  },
  {
    "text": "I'm going to give you is is there's this function called effect. retry and effect. retry is going to kind of do",
    "start": "11770920",
    "end": "11778040"
  },
  {
    "text": "what it says on the tin which is uh retry and so we can put eventually",
    "start": "11778040",
    "end": "11783640"
  },
  {
    "text": "succeeds and then I'm going to give you a chance to take a look at the type of",
    "start": "11783640",
    "end": "11788920"
  },
  {
    "text": "this kind of second argument and you can try to figure out a way to uh have this keep going now the second",
    "start": "11788920",
    "end": "11795840"
  },
  {
    "text": "one is going to utilize effect. all so as I talked about one of the things with effect. all is that when you run Run 10",
    "start": "11795840",
    "end": "11803000"
  },
  {
    "text": "effects if the first effect fails the other ones aren't even going to run because the entire operation will fail",
    "start": "11803000",
    "end": "11810239"
  },
  {
    "text": "and so uh the challenge for you is to instead of short circuiting right instead of stopping on that first error",
    "start": "11810239",
    "end": "11816080"
  },
  {
    "text": "to collect all of the errors and fail with an array of them and so the way",
    "start": "11816080",
    "end": "11821399"
  },
  {
    "text": "you're probably going to want to do that is there's in effect. all there's a second argument and you can give it a",
    "start": "11821399",
    "end": "11828600"
  },
  {
    "text": "mode and the mode for this one you're going to want to use is validate so I'll let you look at what validate does and",
    "start": "11828600",
    "end": "11835120"
  },
  {
    "text": "then try to get the array of Errors from that and then finally for this last one",
    "start": "11835120",
    "end": "11840880"
  },
  {
    "text": "instead of just having an array of Errors you're going to run all the effects get an array of all the",
    "start": "11840880",
    "end": "11846199"
  },
  {
    "text": "successes and all the errors and for this one you're going to want to use mode either and so just like with",
    "start": "11846199",
    "end": "11852600"
  },
  {
    "text": "validate I'll give you a chance to take a look at what that does to the type signature and then try to kind of modify",
    "start": "11852600",
    "end": "11858080"
  },
  {
    "text": "the result I'm sorry to uh cut off people's",
    "start": "11858080",
    "end": "11864640"
  },
  {
    "text": "work but um we're basically at the end of of this session so we're going to go over this and then take a short break",
    "start": "11864640",
    "end": "11873198"
  },
  {
    "text": "um did anyone was anyone able let me unfreeze this was anyone able to get",
    "start": "11873359",
    "end": "11880040"
  },
  {
    "text": "one Okay who wants to share their solution",
    "start": "11880199",
    "end": "11887800"
  },
  {
    "text": "yes okay that is one solution um and we'll",
    "start": "11891120",
    "end": "11897080"
  },
  {
    "text": "talk about schedule in a second the the other solution that's maybe a bit simpler is uh you can have",
    "start": "11897080",
    "end": "11903319"
  },
  {
    "text": "while and then true um and so to to start I know I",
    "start": "11903319",
    "end": "11908920"
  },
  {
    "text": "didn't necessarily introduce this maybe the most formally but effect. retry there's two functions that kind of are",
    "start": "11908920",
    "end": "11914439"
  },
  {
    "text": "the core functions of repeating effects so there's effect. repeat and there's effect. retry and so they're kind of",
    "start": "11914439",
    "end": "11920600"
  },
  {
    "text": "opposites in that effect. repeat is going to repeat and effect while it succeeds and effect. retry is going to",
    "start": "11920600",
    "end": "11926399"
  },
  {
    "text": "repeat and effect while it fails right so we're retrying and effect if it fails otherwise we're repeating it if it",
    "start": "11926399",
    "end": "11932199"
  },
  {
    "text": "succeeds and so uh here we have an effect that's going to fail the first 99 times we run it it's it's going to",
    "start": "11932199",
    "end": "11938520"
  },
  {
    "text": "succeed the 100th time and so um we can use retry and while true is basically",
    "start": "11938520",
    "end": "11945199"
  },
  {
    "text": "just going to retry it forever and then on the 100th time this is finally going to succeed and so this is one of the",
    "start": "11945199",
    "end": "11953680"
  },
  {
    "text": "first Solutions the other one is there's some other options here right we can say",
    "start": "11953680",
    "end": "11958840"
  },
  {
    "text": "times we could say infinity if you put anything over 100 it also work um and",
    "start": "11958840",
    "end": "11965279"
  },
  {
    "text": "then the other option is there's this thing in effect which I don't think we'll be able to cover too much um but",
    "start": "11965279",
    "end": "11971680"
  },
  {
    "text": "there is I wrote a lot about it so if you want to like when we go home there's a whole schedule file but the schedule",
    "start": "11971680",
    "end": "11977760"
  },
  {
    "text": "is basically a data type that kind of describes the repetition of an effect",
    "start": "11977760",
    "end": "11982880"
  },
  {
    "text": "and so there's a schedule called Forever which is just going to repeat forever and so this is another",
    "start": "11982880",
    "end": "11988000"
  },
  {
    "text": "solution um was anyone able to get exercise",
    "start": "11988000",
    "end": "11993120"
  },
  {
    "text": "two okay um do you want to [Music] share",
    "start": "11993120",
    "end": "11999040"
  },
  {
    "text": "um yes uh so what does validate do so validate if you look at the result um if",
    "start": "11999040",
    "end": "12006279"
  },
  {
    "text": "we get rid of this for a second so validate returns either so",
    "start": "12006279",
    "end": "12012120"
  },
  {
    "text": "right this is this is a an array of effects number succeed with number fail with string and so this is going to turn",
    "start": "12012120",
    "end": "12019640"
  },
  {
    "text": "this from a uh if we don't have it",
    "start": "12019640",
    "end": "12025000"
  },
  {
    "text": "right it's going to be a it's either going to succeed with the array of the",
    "start": "12025000",
    "end": "12030840"
  },
  {
    "text": "successes or the first failure and so what validate does is it's saying either",
    "start": "12030840",
    "end": "12036040"
  },
  {
    "text": "all the successes or all of the errors and so the reason that the errors are an",
    "start": "12036040",
    "end": "12041199"
  },
  {
    "text": "option of the error type is because some of them might still succeed right so let's say the first succeeds and the",
    "start": "12041199",
    "end": "12047120"
  },
  {
    "text": "rest fail then the first one is going to be a none and the rest are going to be the option sum of all of the error so",
    "start": "12047120",
    "end": "12054520"
  },
  {
    "text": "it's representing um all the in the case that any of them fail is representing",
    "start": "12054520",
    "end": "12061359"
  },
  {
    "text": "either the error if it exists or it doesn't because that effect succeeded for all the effects that we run and so",
    "start": "12061359",
    "end": "12068680"
  },
  {
    "text": "then we can use map error to kind of mod mod ify that error type which again is",
    "start": "12068680",
    "end": "12074120"
  },
  {
    "text": "an option of a string and we can filter is sum right because we have either sum",
    "start": "12074120",
    "end": "12080319"
  },
  {
    "text": "of the string or none and so then if we once we know that it's sum we can use",
    "start": "12080319",
    "end": "12086199"
  },
  {
    "text": "value to get at the value um so this is kind of combining some of the data stuff we looked at and so um the third one is",
    "start": "12086199",
    "end": "12092880"
  },
  {
    "text": "also going to kind of look at the data stuff because the either mode is going to return either so this is basically",
    "start": "12092880",
    "end": "12098960"
  },
  {
    "text": "equivalent to before you pass it to effect. all mapping with the effect. either",
    "start": "12098960",
    "end": "12104080"
  },
  {
    "text": "function and was anyone able to get this one yes so the solution to this one is",
    "start": "12104080",
    "end": "12110560"
  },
  {
    "text": "actually quite similar to the previous one where basically we're mapping on the result and we're filtering based on",
    "start": "12110560",
    "end": "12116560"
  },
  {
    "text": "either that is right or either that is left um anyone have any questions about",
    "start": "12116560",
    "end": "12123479"
  },
  {
    "text": "this before we take a break all right yes",
    "start": "12123479",
    "end": "12130760"
  },
  {
    "text": "yes so I think um yes yes so the the question is if you",
    "start": "12130760",
    "end": "12136359"
  },
  {
    "text": "do this then this is typed as some string but instead if you do this in the",
    "start": "12136359",
    "end": "12142040"
  },
  {
    "text": "kind of nonpoint free style where we take uh we take kind of whatever this is",
    "start": "12142040",
    "end": "12148040"
  },
  {
    "text": "and we option. is sum on this then this is no longer typed to sum",
    "start": "12148040",
    "end": "12155640"
  },
  {
    "text": "it's typed as option and the reason for that is because uh this function is kind",
    "start": "12155640",
    "end": "12160680"
  },
  {
    "text": "of manually typed as self is string and so if we type this as this is option.",
    "start": "12160680",
    "end": "12167760"
  },
  {
    "text": "suum string um you'll notice that this this still works and so this is basically",
    "start": "12167760",
    "end": "12174000"
  },
  {
    "text": "just a typescript limitation um",
    "start": "12174000",
    "end": "12179319"
  },
  {
    "text": "but I imagine that so first of all that cast",
    "start": "12180040",
    "end": "12185239"
  },
  {
    "text": "is a safe cast right because you you just checked so that what the cast I'm talking about is if you do this",
    "start": "12185239",
    "end": "12192279"
  },
  {
    "text": "um casting this as uh yeah as option sum of string and so",
    "start": "12192279",
    "end": "12199359"
  },
  {
    "text": "um that might be a case where that cast is safe because you just checked um there probably are better ways to do",
    "start": "12199359",
    "end": "12205880"
  },
  {
    "text": "this that might get the types right um but yeah does that answer your question",
    "start": "12205880",
    "end": "12211680"
  },
  {
    "text": "and actually there's a a typescript PR that's very recent that um the goal of",
    "start": "12211680",
    "end": "12217520"
  },
  {
    "text": "the the pr is to have typescript automatically infer type cards um so if that went through this would work but",
    "start": "12217520",
    "end": "12224080"
  },
  {
    "text": "we'll see um so we're going to take a break and we're going to come back",
    "start": "12224080",
    "end": "12229840"
  },
  {
    "text": "in say 10 minutes so 340 and uh finish off",
    "start": "12229840",
    "end": "12237380"
  },
  {
    "text": "[Applause] here the thing I want to do right now is",
    "start": "12237380",
    "end": "12242880"
  },
  {
    "text": "go through um kind of how the rest of the content is structured that we're not going to get into uh because I want to",
    "start": "12242880",
    "end": "12249319"
  },
  {
    "text": "make sure while we have time to do my best to kind of explain how you can best",
    "start": "12249319",
    "end": "12255080"
  },
  {
    "text": "take advantage of all the content that uh I spent a lot of time on but in hindsight um",
    "start": "12255080",
    "end": "12261160"
  },
  {
    "text": "probably uh I think would have realized we might have gone a bit slower but that's okay because now it's all for you",
    "start": "12261160",
    "end": "12267000"
  },
  {
    "text": "at home so these next two parts the way they're structured is uh we basically the first",
    "start": "12267000",
    "end": "12273600"
  },
  {
    "text": "one is a CLI the second one is a uh server that a a chat server that uses",
    "start": "12273600",
    "end": "12279399"
  },
  {
    "text": "websockets and so um uh we kind of incrementally rewrite them to effect and",
    "start": "12279399",
    "end": "12285040"
  },
  {
    "text": "in the breakpoints folder there's a changes file which describes all the different steps along the way and so",
    "start": "12285040",
    "end": "12291960"
  },
  {
    "text": "each step there's dipping our toes in adding type errors adding type dependencies um and then each folder in",
    "start": "12291960",
    "end": "12297399"
  },
  {
    "text": "here is the version of the app at each step and so you can go through and look",
    "start": "12297399",
    "end": "12303560"
  },
  {
    "text": "at the one step and then go in the change log and see what's changed and um kind of see the",
    "start": "12303560",
    "end": "12308920"
  },
  {
    "text": "difference and uh and then also in uh the project folder which was where you",
    "start": "12308920",
    "end": "12316120"
  },
  {
    "text": "can kind of if you want to do the rewrite yourself this is the the first breakpoint there's also a after the",
    "start": "12316120",
    "end": "12321399"
  },
  {
    "text": "workshop um which kind of assuming we had had got to it uh there's a bunch of opt features you can add um so I would",
    "start": "12321399",
    "end": "12328600"
  },
  {
    "text": "say this is still something you can do um and I think the usefulness is even if",
    "start": "12328600",
    "end": "12334600"
  },
  {
    "text": "you kind of uh don't do the rewrite yourself I think definitely look through the different stages and then you can",
    "start": "12334600",
    "end": "12340319"
  },
  {
    "text": "kind of go through look at the final stage and do your best to understand it and then I still think these would be",
    "start": "12340319",
    "end": "12345520"
  },
  {
    "text": "great exercises there's a bunch of features that you can do try to add uh to the the final um the final stage of",
    "start": "12345520",
    "end": "12352840"
  },
  {
    "text": "the rewrite and so these are all things you can try to do um and so in part two there's that in part three there's that",
    "start": "12352840",
    "end": "12359560"
  },
  {
    "text": "and then also all the new modules uh that I use there's these Snippets files for all of them so for schema for match",
    "start": "12359560",
    "end": "12365520"
  },
  {
    "text": "for schedule for config there's files with examples and explanation and all the explanation there's explanation and comments um",
    "start": "12365520",
    "end": "12371920"
  },
  {
    "text": "and so uh you can there's some docs Pages for some of these most of these and there's also all these you can go",
    "start": "12371920",
    "end": "12377520"
  },
  {
    "text": "through and there's also a couple exercises um that you can go through and so all of that uh you can go over and",
    "start": "12377520",
    "end": "12386760"
  },
  {
    "text": "like I said part three um the one thing to know about part three is there's a client and a server so the thing I",
    "start": "12386760",
    "end": "12393199"
  },
  {
    "text": "rewrite is the server but to use the client the client I wrote in effect and that's in the the final breakpoint in",
    "start": "12393199",
    "end": "12399920"
  },
  {
    "text": "the client folder and so so there's a special script to run that which is uh bun run and it's three project C and so",
    "start": "12399920",
    "end": "12407760"
  },
  {
    "text": "that's going to run the project um and so if you want to kind of test the server using the client that's how you",
    "start": "12407760",
    "end": "12414199"
  },
  {
    "text": "can run the client and the same thing there's there's a bunch of break points and there's a change log and there's stuff uh for you to features for you to",
    "start": "12414199",
    "end": "12421199"
  },
  {
    "text": "try to add um I think these would all be a very good challenge um",
    "start": "12421199",
    "end": "12428720"
  },
  {
    "text": "and and then also if we don't get to uh any of of this stuff again all all",
    "start": "12428720",
    "end": "12434720"
  },
  {
    "text": "this is all here there's there's tons and tons of comments um all explaining it all and of course the slides are all",
    "start": "12434720",
    "end": "12440120"
  },
  {
    "text": "available those are recap stuff and then the one final thing is there's this cheat sheet. markdown file and this is",
    "start": "12440120",
    "end": "12446319"
  },
  {
    "text": "basically a cheat sheet for most of the stuff we uh ended up going over so basically all of the um construction the",
    "start": "12446319",
    "end": "12452359"
  },
  {
    "text": "running the pipelines uh error handling context management data is all going to",
    "start": "12452359",
    "end": "12457399"
  },
  {
    "text": "be in this cheat sheet here which is in markdown um so hopefully that's useful to um so what I want to do with our time",
    "start": "12457399",
    "end": "12464080"
  },
  {
    "text": "left is we have a couple options the one thing I do want to definitely definitely do is talk about schema um and",
    "start": "12464080",
    "end": "12471880"
  },
  {
    "text": "then with the time left uh we can either talk about so there's there's like three",
    "start": "12471880",
    "end": "12479399"
  },
  {
    "text": "options so one is we start the rewrite of the CLI and we don't really finish uh",
    "start": "12479399",
    "end": "12485520"
  },
  {
    "text": "the second option is we don't really rewrite the CLI as much as we look at",
    "start": "12485520",
    "end": "12490600"
  },
  {
    "text": "how I rewrote it and so I say like here's the start here's the end here's what I did and then the final option is",
    "start": "12490600",
    "end": "12498239"
  },
  {
    "text": "um concurrency uh is a is a really big effects concurrency model there's this thing called fibers which you might have",
    "start": "12498239",
    "end": "12504399"
  },
  {
    "text": "heard of and so I can talk uh for a little bit about fibers and that's probably more advanced but it is also",
    "start": "12504399",
    "end": "12510680"
  },
  {
    "text": "very interesting so we can um kind of decide what we want to do there after schema and the reason I want to talk",
    "start": "12510680",
    "end": "12517199"
  },
  {
    "start": "12516000",
    "end": "13612000"
  },
  {
    "text": "about schema is because schema is really cool even if you're not using effect so you can use schema and effect it works",
    "start": "12517199",
    "end": "12523359"
  },
  {
    "text": "really well but you don't have to use effect to use schema and so I mentioned earlier but schema is a data validation",
    "start": "12523359",
    "end": "12530479"
  },
  {
    "text": "Library um just like Zod right so we have a some type that is unknown and we",
    "start": "12530479",
    "end": "12535920"
  },
  {
    "text": "get out the type of the schema we declare but where schema um becomes",
    "start": "12535920",
    "end": "12542120"
  },
  {
    "text": "really really powerful is that it is it describes two-way Transformations so most uh kind of",
    "start": "12542120",
    "end": "12548800"
  },
  {
    "text": "schema libraries like Zod you can define a one-way trans information right so you can uh Define a schema that kind of",
    "start": "12548800",
    "end": "12555040"
  },
  {
    "text": "asserts some types and then operates on those types right like within uh Zod there's like uh z. string and then you",
    "start": "12555040",
    "end": "12563560"
  },
  {
    "text": "can I think it's transform and you can um kind of transform the number uh kind",
    "start": "12563560",
    "end": "12570199"
  },
  {
    "text": "of like a map function right what's powerful about schema is it's two ways",
    "start": "12570199",
    "end": "12575520"
  },
  {
    "text": "so a schema is generic over three parameters an a an i and an R and so the",
    "start": "12575520",
    "end": "12581600"
  },
  {
    "text": "r is a requirements um just like an effect and that's because the Transformations can be effectful like I",
    "start": "12581600",
    "end": "12586840"
  },
  {
    "text": "said imagine effect doesn't exist imagine there's only two and so what a schema with two these two typew rameters",
    "start": "12586840",
    "end": "12594120"
  },
  {
    "text": "can describe is asserting that a type of unknown is the first type parameter the",
    "start": "12594120",
    "end": "12600640"
  },
  {
    "text": "the type of the first type parameter it can assert that a type unknown is the type of the second type parameter and it",
    "start": "12600640",
    "end": "12605840"
  },
  {
    "text": "can describe transforming between the two types and so this is really really powerful because this is a really",
    "start": "12605840",
    "end": "12612560"
  },
  {
    "text": "important Concept in kind of sending things over the network right we have this like serialization and deserialization right and so Json par",
    "start": "12612560",
    "end": "12619080"
  },
  {
    "text": "Json stringify are very kind of simplistic uh ways to do this but there's all kinds of types that cannot",
    "start": "12619080",
    "end": "12624960"
  },
  {
    "text": "be very simply stringified and pars right so like dates um the date object",
    "start": "12624960",
    "end": "12630080"
  },
  {
    "text": "in JavaScript right you can't Json stringify and Json pars it and so that's where these Transformations can become",
    "start": "12630080",
    "end": "12635359"
  },
  {
    "text": "really really important because we can define a data type and we can define a schema of of how to encode that type to",
    "start": "12635359",
    "end": "12644080"
  },
  {
    "text": "a string and how to decode that type from a string and it doesn't have to be a string we can decode and encode from any type to any type and so that's why",
    "start": "12644080",
    "end": "12651760"
  },
  {
    "text": "schema is so so so powerful and so um quickly to tie back to your question",
    "start": "12651760",
    "end": "12657600"
  },
  {
    "text": "about how should I make my data types I talked to Mike and what Mike said was if",
    "start": "12657600",
    "end": "12662760"
  },
  {
    "text": "you have a data type that you at any point basically anticipating wanting to serialize it then you should create it",
    "start": "12662760",
    "end": "12669239"
  },
  {
    "text": "in schema you should Define as a schema and because that uh will allow you to",
    "start": "12669239",
    "end": "12674399"
  },
  {
    "text": "very easily Define the serialization deserialization for that type and the way you probably will end up doing that",
    "start": "12674399",
    "end": "12680720"
  },
  {
    "text": "is there's a schema do class which I actually don't cover um but uh the",
    "start": "12680720",
    "end": "12686080"
  },
  {
    "text": "schema docs are super super there's a big readme if you go to the schema repo the readme is massive it is crazy this",
    "start": "12686080",
    "end": "12693120"
  },
  {
    "text": "Library does so many things um but the schema has a class that allows you to like Define data types and the schema in",
    "start": "12693120",
    "end": "12699760"
  },
  {
    "text": "one place we're just going to going to look at creating schemas and using them and so um also the second type",
    "start": "12699760",
    "end": "12707080"
  },
  {
    "text": "parameter by default is equal to the first type parameter and this is because not all like types need to be",
    "start": "12707080",
    "end": "12713040"
  },
  {
    "text": "transformed right like a schema that just validates that something is a string there is no transformation there",
    "start": "12713040",
    "end": "12718479"
  },
  {
    "text": "it's just it's a string and so um if both of these types are the same",
    "start": "12718479",
    "end": "12723600"
  },
  {
    "text": "obviously there's no real transformation between the same type it's the same thing and so let's look at this first",
    "start": "12723600",
    "end": "12730920"
  },
  {
    "text": "schema so schema. string and by the way uh you import schema from a different package it's not located in the same",
    "start": "12730920",
    "end": "12736800"
  },
  {
    "text": "package as effect it might at some point but I not sure if it will and the way",
    "start": "12736800",
    "end": "12742680"
  },
  {
    "text": "you import it is this Nam spaced import so you import Star as schema from atact",
    "start": "12742680",
    "end": "12747800"
  },
  {
    "text": "schema schema and the other thing you might see is aliasing this as s instead of schema um but we import it from a",
    "start": "12747800",
    "end": "12754319"
  },
  {
    "text": "different place so schema. string is a schema that again string string so this",
    "start": "12754319",
    "end": "12760399"
  },
  {
    "text": "is a schema that validates that something is a string and schema. number this is a number a schema that validates",
    "start": "12760399",
    "end": "12766120"
  },
  {
    "text": "from a number to or that something is a number so here we can look at kind of the most basic",
    "start": "12766120",
    "end": "12772160"
  },
  {
    "text": "transform so we in transform it takes four arguments it takes a schema for the",
    "start": "12772160",
    "end": "12778080"
  },
  {
    "text": "type that you're transforming uh from it takes a schema for the type that you're transforming into and it takes a",
    "start": "12778080",
    "end": "12784439"
  },
  {
    "text": "function to convert from the type of the the first to the second and the second to the first right and the reason that",
    "start": "12784439",
    "end": "12791479"
  },
  {
    "text": "you need both schemas the input type and the output type is because uh we'll see",
    "start": "12791479",
    "end": "12796800"
  },
  {
    "text": "in a second but basically there are um a couple functions that you can use with this schema and the first uh actually",
    "start": "12796800",
    "end": "12804080"
  },
  {
    "text": "we'll get to that when we get to that right but this is how we we can describe Transformations by giving it a function",
    "start": "12804080",
    "end": "12809920"
  },
  {
    "text": "from one to the other and one to the the from the other way around um just like anything right these transforms can fail",
    "start": "12809920",
    "end": "12817479"
  },
  {
    "text": "and so we get this transform or fail function where this kind of looks very similar to effect we have this like try",
    "start": "12817479",
    "end": "12823840"
  },
  {
    "text": "and a try catch and we return this parse result error and so schema has its own",
    "start": "12823840",
    "end": "12830359"
  },
  {
    "text": "error it's called parse error and I believe it's it's in its own module so there's this whole parse I think it's",
    "start": "12830359",
    "end": "12836399"
  },
  {
    "text": "just in parse result so parse result is its own module that kind of describes this parse error type and there's a lot",
    "start": "12836399",
    "end": "12843560"
  },
  {
    "text": "of cool stuff where uh parse errors there's ways to there's like a tree form",
    "start": "12843560",
    "end": "12848600"
  },
  {
    "text": "matter and there's another formatter but there's like the pretty printing the errors get pretty printed um by default",
    "start": "12848600",
    "end": "12854600"
  },
  {
    "text": "which is really cool I think there's an example that shows that and then of course a really common pattern is",
    "start": "12854600",
    "end": "12859760"
  },
  {
    "text": "deriving types from our schemas so schema. schema. two is going to derive",
    "start": "12859760",
    "end": "12865040"
  },
  {
    "text": "uh the first type right this is going to be number and from is going to um get the second type which is",
    "start": "12865040",
    "end": "12872239"
  },
  {
    "text": "string and so now let's look at how we can use these schemas so I have uh two",
    "start": "12872239",
    "end": "12878439"
  },
  {
    "text": "examples here so we have takes number which takes a number take string which takes a string and we have a string and",
    "start": "12878439",
    "end": "12884319"
  },
  {
    "text": "a number and something that's unknown and so the way the schema",
    "start": "12884319",
    "end": "12889399"
  },
  {
    "text": "functions work is there's a couple of them and here's an example but we give",
    "start": "12889399",
    "end": "12894520"
  },
  {
    "text": "our schema to one of these schema functions and it returns back a function and so I know I talked about with a lot",
    "start": "12894520",
    "end": "12901120"
  },
  {
    "text": "of the effect functions there's like the kind of two overloads where we can either pass the value first or just kind",
    "start": "12901120",
    "end": "12907399"
  },
  {
    "text": "of leave it out and then we get back a function but these you always get back a function so if you want to call it um",
    "start": "12907399",
    "end": "12913680"
  },
  {
    "text": "like we can declare this first as like its own function right is number",
    "start": "12913680",
    "end": "12920319"
  },
  {
    "text": "um and then use is number right this is a",
    "start": "12920319",
    "end": "12925399"
  },
  {
    "text": "function um but if you want to call it just in one spot you this is a function",
    "start": "12925399",
    "end": "12932120"
  },
  {
    "text": "and then we call that function with unknown so first is is and so is is a a",
    "start": "12932120",
    "end": "12937279"
  },
  {
    "text": "type guard right so it says you is number and so you can use it in in an if statement to assert that unknown is a",
    "start": "12937279",
    "end": "12944399"
  },
  {
    "text": "number um something you'll notice about this is that there's no effect here right we're not yielding an effect this",
    "start": "12944399",
    "end": "12950600"
  },
  {
    "text": "is just synchronously returning a true or false and so this is where I said you don't need to use um effect to uh use",
    "start": "12950600",
    "end": "12959000"
  },
  {
    "text": "schema right there's synchronous methods for all the schema methods um the one thing is though I talked",
    "start": "12959000",
    "end": "12966239"
  },
  {
    "text": "about you can have effectful Transformations and so just like calling run sync on an asynchronous function if",
    "start": "12966239",
    "end": "12972760"
  },
  {
    "text": "you use one of the synchronous schema methods on a sync schema that has a",
    "start": "12972760",
    "end": "12977800"
  },
  {
    "text": "effectful transformation obviously there's no way to do that um synchronously so that's not",
    "start": "12977800",
    "end": "12984520"
  },
  {
    "text": "possible next is schema. asserts and so schema. asserts returns a function that",
    "start": "12984520",
    "end": "12989920"
  },
  {
    "text": "asserts input is numbered which basically means it's going to throw if input is not number and so if we call",
    "start": "12989920",
    "end": "12995760"
  },
  {
    "text": "that then unknown is number uh",
    "start": "12995760",
    "end": "13001120"
  },
  {
    "text": "next we have validate and so validate is quite similar to is except it's a",
    "start": "13001120",
    "end": "13008160"
  },
  {
    "text": "effect so here we're in an effect and we can yield the result and if it's true we",
    "start": "13008160",
    "end": "13014040"
  },
  {
    "text": "assert that unknown is a number um and you notice all of these operate on this this first type",
    "start": "13014040",
    "end": "13020560"
  },
  {
    "text": "parameter so the the two type parameter and now for",
    "start": "13020560",
    "end": "13026640"
  },
  {
    "text": "Transformations so to encode from a to I so in this case that's from number to string we use incode and to uh go from I",
    "start": "13026640",
    "end": "13035120"
  },
  {
    "text": "to a so a string to a number we use decode and so there's a number of",
    "start": "13035120",
    "end": "13040960"
  },
  {
    "text": "functions that kind of give you different outputs so there's encode encode sync encode promise encode option",
    "start": "13040960",
    "end": "13046800"
  },
  {
    "text": "encode either and so encode gives you an effect and encode sync just gives you",
    "start": "13046800",
    "end": "13053000"
  },
  {
    "text": "the value synchronously and promise gives you as a promise option gives you as an option and either gives you as an",
    "start": "13053000",
    "end": "13059199"
  },
  {
    "text": "either and so um these are kind of useful for not throwing right so this",
    "start": "13059199",
    "end": "13064439"
  },
  {
    "text": "incode sync it's going to throw an error if the validation fails where in this",
    "start": "13064439",
    "end": "13069960"
  },
  {
    "text": "way you get the the error back as a value and obviously this this would uh",
    "start": "13069960",
    "end": "13075279"
  },
  {
    "text": "reject with the parse error instead of throwing and then if we return it as an effect that error is encoded within the",
    "start": "13075279",
    "end": "13082640"
  },
  {
    "text": "effect and so all these um would work the other way too right so we just like",
    "start": "13082640",
    "end": "13087880"
  },
  {
    "text": "we can encode we can decode and then the one other thing is all these have unknown versions so there's incode",
    "start": "13087880",
    "end": "13094840"
  },
  {
    "text": "unknown an incode unknown sync an incode unknown promise and the decode unknown",
    "start": "13094840",
    "end": "13100040"
  },
  {
    "text": "sync which is three words I know big words but schema. decode unknown sync this is",
    "start": "13100040",
    "end": "13108600"
  },
  {
    "text": "basically equal to like Zod do. parse this is your your basic I have unknown",
    "start": "13108600",
    "end": "13116199"
  },
  {
    "text": "synchronously tell me whether this is the right thing and so uh the reason that's the case is first we have to",
    "start": "13116199",
    "end": "13123000"
  },
  {
    "text": "specify that it's synchronous and then we're decoding",
    "start": "13123000",
    "end": "13129160"
  },
  {
    "text": "um and the UN what the unknown methods do is if you notice in code must take a",
    "start": "13129520",
    "end": "13137160"
  },
  {
    "text": "number and so this actually um doesn't do validation right I think it actually",
    "start": "13137160",
    "end": "13142720"
  },
  {
    "text": "does internally but you can kind of conceptually think of it as not and so what this is doing is it's only doing",
    "start": "13142720",
    "end": "13148720"
  },
  {
    "text": "the transform so in the transform we had four things we had the the in schema the out schema the transform Function One",
    "start": "13148720",
    "end": "13154319"
  },
  {
    "text": "transform function two incode is just calling that transform function decode is just going that uh decode function",
    "start": "13154319",
    "end": "13162040"
  },
  {
    "text": "but when we decode unknown what we're doing is taking unknown using that the",
    "start": "13162040",
    "end": "13167199"
  },
  {
    "text": "schema that we passed to it to verify that it's the input and then transforming it or verifying that's it's",
    "start": "13167199",
    "end": "13172640"
  },
  {
    "text": "the output and then decoding um and so if",
    "start": "13172640",
    "end": "13179000"
  },
  {
    "text": "we look look at this example so this example uses there's a lot of buil-in",
    "start": "13179000",
    "end": "13184720"
  },
  {
    "text": "schemas so this schema is called date from string and it's a schema that can",
    "start": "13184720",
    "end": "13190239"
  },
  {
    "text": "uh decode a date to a string and or encode a date to a string and decode a string to a date and so if we schema.",
    "start": "13190239",
    "end": "13197239"
  },
  {
    "text": "incode sync with this state it's going to give us a string and if we schema. decode sync it's going to give us back",
    "start": "13197239",
    "end": "13203120"
  },
  {
    "text": "the date um the one question that I most had about schema was one-way transformations",
    "start": "13203120",
    "end": "13210279"
  },
  {
    "text": "right like sometimes we have Transformations where there is no way to go back right we lose some information it's not possible and so um the way to",
    "start": "13210279",
    "end": "13217319"
  },
  {
    "text": "kind of handle those is in the uh function where you're going back right",
    "start": "13217319",
    "end": "13223520"
  },
  {
    "text": "the decode function you can just make this function always fail so that's always going to result in a parse error",
    "start": "13223520",
    "end": "13228640"
  },
  {
    "text": "because it's not possible um like I said the readme for",
    "start": "13228640",
    "end": "13234800"
  },
  {
    "text": "schema is uh very very very",
    "start": "13234800",
    "end": "13241840"
  },
  {
    "text": "I open this up it is very robust and very very long",
    "start": "13241840",
    "end": "13247640"
  },
  {
    "text": "and very very detailed um but the schema module is super super powerful because",
    "start": "13247640",
    "end": "13253560"
  },
  {
    "text": "it um is a really powerful way of defining the shapes of our data ensuring",
    "start": "13253560",
    "end": "13259840"
  },
  {
    "text": "that our data are those shapes and defining the Transformations between different types different data types um",
    "start": "13259840",
    "end": "13265960"
  },
  {
    "text": "and again this is something that you can use even without effect even without effect",
    "start": "13265960",
    "end": "13272040"
  },
  {
    "text": "uh does anyone have any questions on schema I have some some exercises for schema if we want to do them um yeah",
    "start": "13272319",
    "end": "13280319"
  },
  {
    "text": "let's do it let's do it I think this will be good so uh the first uh exercise",
    "start": "13280319",
    "end": "13286000"
  },
  {
    "text": "is I've created some types and so you are going to do your best to create a schema that when we",
    "start": "13286000",
    "end": "13293640"
  },
  {
    "text": "infer the type of the schema it's going to equal this type and so um I'm going going",
    "start": "13293640",
    "end": "13301399"
  },
  {
    "text": "to uh kind of give you some hints so there is a function called I think it's schema. struct and that's how you create",
    "start": "13301399",
    "end": "13308159"
  },
  {
    "text": "an object and obviously all the kind of core types are just the the name so s.",
    "start": "13308159",
    "end": "13313760"
  },
  {
    "text": "number again it's it's alast as s here and then here you're probably going to",
    "start": "13313760",
    "end": "13318880"
  },
  {
    "text": "want to use uh schema. Union um there's schema. array and again",
    "start": "13318880",
    "end": "13326199"
  },
  {
    "text": "uh everything's functions there's no method so in Zod you might be used to kind of calling methods on something where in schema we're",
    "start": "13326199",
    "end": "13332399"
  },
  {
    "text": "calling functions so you can either s. string. pipe s. array or s. array of a",
    "start": "13332399",
    "end": "13338560"
  },
  {
    "text": "St string and then the second test if",
    "start": "13338560",
    "end": "13344520"
  },
  {
    "text": "you're able to get to it uh is kind of creating a schema that can transform from the URL type to a string and back",
    "start": "13344520",
    "end": "13351159"
  },
  {
    "text": "and",
    "start": "13351159",
    "end": "13353319"
  },
  {
    "text": "forth I um I should have explained better but the way to um or I'll wait",
    "start": "13357159",
    "end": "13365000"
  },
  {
    "text": "until we go over all of them but um are we we ready I think I think we can come back I want to have enough time to get",
    "start": "13365000",
    "end": "13370920"
  },
  {
    "text": "to one other thing so uh the solutions for this um and again",
    "start": "13370920",
    "end": "13377760"
  },
  {
    "text": "these are functions that I uh did not teach you so it's okay if you didn't get them um but the first is with s. struct",
    "start": "13377760",
    "end": "13385000"
  },
  {
    "text": "so that's how we can kind of declare a object type and there's Boolean number string symbol the next is s. literal so",
    "start": "13385000",
    "end": "13392560"
  },
  {
    "text": "there's two options you can do s. Union of multiple s. literals but s do s.",
    "start": "13392560",
    "end": "13398159"
  },
  {
    "text": "literal can also take multiple literals and it will be a union of all of those that's um then the next kind of really",
    "start": "13398159",
    "end": "13405600"
  },
  {
    "text": "hard one is uh this template literal function which uh has um kind of",
    "start": "13405600",
    "end": "13412199"
  },
  {
    "text": "questionable use but it's cool that you can do it and so this is going to construct a template literal of kind of",
    "start": "13412199",
    "end": "13419000"
  },
  {
    "text": "combining other schemas and literal strings and then uh to get a tuple",
    "start": "13419000",
    "end": "13426680"
  },
  {
    "text": "there's s. Tuple and then we can call s. array to get an array s. key of to do key of um with d uh if we want to have",
    "start": "13426680",
    "end": "13436040"
  },
  {
    "text": "recursive schemas we can use s. suspend and so um that's that's always a",
    "start": "13436040",
    "end": "13442840"
  },
  {
    "text": "bit tricky one the other thing is you have to manually declare the type of this schema um in order for that to work",
    "start": "13442840",
    "end": "13450720"
  },
  {
    "text": "and then there is Union and there is partial um so again I didn't teach you",
    "start": "13450720",
    "end": "13456680"
  },
  {
    "text": "any of this but maybe you got a couple um and hopefully you kind of have a better understanding of how to construct schemas so the next one I don't even",
    "start": "13456680",
    "end": "13463319"
  },
  {
    "text": "know how many of you got to it but it's okay uh so this is an example of how to transform from a string to a URL so we",
    "start": "13463319",
    "end": "13470319"
  },
  {
    "text": "take the string and um if you didn't want to if we want to capture the error",
    "start": "13470319",
    "end": "13475720"
  },
  {
    "text": "because the URL Constructor throws if the um string is not a valid URL we",
    "start": "13475720",
    "end": "13481680"
  },
  {
    "text": "can um use this parse result. try and we can catch the error and kind of remap it",
    "start": "13481680",
    "end": "13488040"
  },
  {
    "text": "um and then otherwise we can just uh call url. twring and so then uh in schemas there's",
    "start": "13488040",
    "end": "13496399"
  },
  {
    "text": "schemas that filter right so s. filter creates a new schema that doesn't change",
    "start": "13496399",
    "end": "13501600"
  },
  {
    "text": "the kind of types logic but we can uh kind of filter like true or false on the",
    "start": "13501600",
    "end": "13508640"
  },
  {
    "text": "values of the data right so this is going to also return the same types as this first URL from string but it's",
    "start": "13508640",
    "end": "13515279"
  },
  {
    "text": "going to make sure that the URL protocol is https so another example like you can",
    "start": "13515279",
    "end": "13520439"
  },
  {
    "text": "have a string uh s. number and then we can pipe it and filter to make sure the",
    "start": "13520439",
    "end": "13525600"
  },
  {
    "text": "number is greater than 10 okay and then um composing these two we can",
    "start": "13525600",
    "end": "13533080"
  },
  {
    "text": "uh compose schemas and so if we have a schema from A to B and a schema from B",
    "start": "13533080",
    "end": "13538960"
  },
  {
    "text": "to C we can compose them to get a schema from a to c",
    "start": "13538960",
    "end": "13544120"
  },
  {
    "text": "um so uh to end the day I know I talked about a couple of our options I think I",
    "start": "13544120",
    "end": "13551880"
  },
  {
    "text": "am leaning towards the concurrency because I think we are not going to get",
    "start": "13551880",
    "end": "13557040"
  },
  {
    "text": "very far into the rewrites but the concurrency I think is decently complex",
    "start": "13557040",
    "end": "13562600"
  },
  {
    "text": "and the docs page on it is decent but I think you can read the docs page and still be confused and I think I have I'm",
    "start": "13562600",
    "end": "13569720"
  },
  {
    "text": "going to do my best to give you the best possible explanation of something that I think um is one of the scarier parts of effect so I think that's what we're",
    "start": "13569720",
    "end": "13575920"
  },
  {
    "text": "going to go with so um yeah the way I want to start",
    "start": "13575920",
    "end": "13580960"
  },
  {
    "text": "this out is usage frequency versus complexity um I would say what we're about to look at is maybe like here um",
    "start": "13580960",
    "end": "13588880"
  },
  {
    "text": "what we're going to talk about is fibers and concurrency and of course concurrency is in all of our apps we're doing web things we're calling apis",
    "start": "13588880",
    "end": "13594840"
  },
  {
    "text": "we're calling databases right asyn weight is everywhere and so concurrency is something we think about fairly often what we're going to look at is a little",
    "start": "13594840",
    "end": "13601600"
  },
  {
    "text": "bit of how effect handles concurrency under the scenes which is more like here but then I'm going to bring it back and",
    "start": "13601600",
    "end": "13606800"
  },
  {
    "text": "show you kind of some apis that bring concurrency like high level concurrency that you're going to use all the",
    "start": "13606800",
    "end": "13613279"
  },
  {
    "start": "13612000",
    "end": "13903000"
  },
  {
    "text": "time um so the first example I have is this snippet um and I kind of spoiled it",
    "start": "13613279",
    "end": "13618840"
  },
  {
    "text": "here but when you log this or when you run this nothing gets logged out um does",
    "start": "13618840",
    "end": "13625199"
  },
  {
    "text": "anyone know why yes the event Loop is blocked so we",
    "start": "13625199",
    "end": "13630359"
  },
  {
    "text": "create this interval and you would expect that the interval is going to go off but the way JavaScript works is this",
    "start": "13630359",
    "end": "13636920"
  },
  {
    "text": "while true keeps the event uh the main thread kind of spinning and these timeouts keep piling up and they're",
    "start": "13636920",
    "end": "13642920"
  },
  {
    "text": "waiting and they're waiting but they can never go through because the wild true never ends and so um I have this next example",
    "start": "13642920",
    "end": "13650199"
  },
  {
    "text": "which is basically the same thing in effect it's a little bit different so instead of the set interval we have this",
    "start": "13650199",
    "end": "13656680"
  },
  {
    "text": "console.log and instead of set timeout we're going to to repeat it and then we're going to use this function which",
    "start": "13656680",
    "end": "13662439"
  },
  {
    "text": "I'm not going to actually say what it does just yet called effect. fork and then we're going to call that so that's",
    "start": "13662439",
    "end": "13667600"
  },
  {
    "text": "setting up this timeout and so if we don't have this at all like imagine this is not there um this is just going to",
    "start": "13667600",
    "end": "13673319"
  },
  {
    "text": "log on an interval and then if we add in this while true which is just going to increment the I it actually uh works and",
    "start": "13673319",
    "end": "13681520"
  },
  {
    "text": "so I can try and show that here right so here's the first",
    "start": "13681520",
    "end": "13687120"
  },
  {
    "text": "example if we do this and we need one run it's going to be 4 E1 uh 4",
    "start": "13687120",
    "end": "13693880"
  },
  {
    "text": "S1 this is not going to work but if we run this effect even though we",
    "start": "13693880",
    "end": "13701319"
  },
  {
    "text": "have this W true loop it's going to start logging um something interesting is it doesn't log every 250 milliseconds",
    "start": "13701319",
    "end": "13708239"
  },
  {
    "text": "it actually takes a bit longer and we'll talk about why in a bit um the fact that it logs at all kind of tells us that",
    "start": "13708239",
    "end": "13714040"
  },
  {
    "text": "that there's something else going on here right like no longer is the main the main thread kind of spinning in a",
    "start": "13714040",
    "end": "13719399"
  },
  {
    "text": "Loop while these other things are piling up um and so uh effect is kind of doing",
    "start": "13719399",
    "end": "13725040"
  },
  {
    "text": "quite a lot behind the scenes and [Music]",
    "start": "13725040",
    "end": "13730319"
  },
  {
    "text": "so and so there's this kind of concept of Cooperative multitasking versus preemptive multitasking and these are",
    "start": "13734880",
    "end": "13740680"
  },
  {
    "text": "kind of big words and big Concepts and you might not have run into these before but Cooperative multitasking is how",
    "start": "13740680",
    "end": "13745960"
  },
  {
    "text": "javascripts event Loop works and so what this is doing is the reason Cooperative",
    "start": "13745960",
    "end": "13751520"
  },
  {
    "text": "is because we basically say we have like different concurrent tasks let's say we have two tasks and they're both concurrent and so what Cooperative means",
    "start": "13751520",
    "end": "13759000"
  },
  {
    "text": "is that one task has to cooperate it has to kind of give up it has to either stop or it has to say I'm done for now kind",
    "start": "13759000",
    "end": "13766120"
  },
  {
    "text": "of do something else right like I'm cooperating and I'm helping out and so that's how JavaScript works right we have two ways a task can end either the",
    "start": "13766120",
    "end": "13772720"
  },
  {
    "text": "stack can clear and so what's currently running can finish or we can call await and what await is going to do is it's",
    "start": "13772720",
    "end": "13778239"
  },
  {
    "text": "going to yield right it's going to basically give up and cooperate and give control to something else and so that's",
    "start": "13778239",
    "end": "13785199"
  },
  {
    "text": "yep um and uh tasks are just a call back",
    "start": "13785199",
    "end": "13790279"
  },
  {
    "text": "and a queue right like when we call promise. then we are storing a call back and when the event Loop kind of finishes",
    "start": "13790279",
    "end": "13796880"
  },
  {
    "text": "we're calling all the callbacks and so this was kind of the model like the kind of concept behind node.js right was we",
    "start": "13796880",
    "end": "13802960"
  },
  {
    "text": "can have concurrency for very cheap because we can literally just store a pointer to these callbacks and then just",
    "start": "13802960",
    "end": "13808399"
  },
  {
    "text": "call them when the the main thread finishes and so the opposite of this is preempting multitasking and this is how",
    "start": "13808399",
    "end": "13814239"
  },
  {
    "text": "operating systems work and so instead of giving up control themselves there's some kind of external thing and so uh",
    "start": "13814239",
    "end": "13821680"
  },
  {
    "text": "you can think of this like in your in your um like on an operating system level right we have uh processes that",
    "start": "13821680",
    "end": "13827840"
  },
  {
    "text": "run or applications and they don't really yield they just run and our operating system and our CPU will kind",
    "start": "13827840",
    "end": "13834120"
  },
  {
    "text": "of stop them and it will externally kind of preemptively stop them before they even uh kind of finish or",
    "start": "13834120",
    "end": "13840479"
  },
  {
    "text": "yield and so tasks run in this model as if they're the only thing running so",
    "start": "13840479",
    "end": "13846399"
  },
  {
    "text": "they act like there's nothing else running and the reason we can do that is because the task itself doesn't think",
    "start": "13846399",
    "end": "13851960"
  },
  {
    "text": "about the concurrency it just thinks about what it's doing and there's something else some kind of like scheduler responsible for switching",
    "start": "13851960",
    "end": "13857840"
  },
  {
    "text": "between tasks yes um and tasks can be paused and",
    "start": "13857840",
    "end": "13863199"
  },
  {
    "text": "they can be resumed um and the the reason this is able to be done is",
    "start": "13863199",
    "end": "13869640"
  },
  {
    "text": "because tasks are more than just a function right in the JavaScript model tasks are a function and we can model",
    "start": "13869640",
    "end": "13874720"
  },
  {
    "text": "them as just a function because either the function is finished or it's not right like it's very very simple but in",
    "start": "13874720",
    "end": "13879920"
  },
  {
    "text": "this model we have like a threadlike thing and thread is kind of like an operating system thread and so tasks",
    "start": "13879920",
    "end": "13887199"
  },
  {
    "text": "have state they have like a stack and that's how we can like when the task is running it's putting things on its stack",
    "start": "13887199",
    "end": "13893359"
  },
  {
    "text": "and then we can stop it and come back to it and the stack is still there so it can resume what it was doing right these are kind of stateful things and that's",
    "start": "13893359",
    "end": "13899520"
  },
  {
    "text": "how we're able to to pause them and resume them and so effect fiber model uses it",
    "start": "13899520",
    "end": "13906920"
  },
  {
    "start": "13903000",
    "end": "15291000"
  },
  {
    "text": "doesn't use this Cooperative uh multitasking it uses this preemptive multitasking",
    "start": "13906920",
    "end": "13913438"
  },
  {
    "text": "model and so there's these things called fibers which you might have heard of and fibers are you may have also heard of a",
    "start": "13913760",
    "end": "13919680"
  },
  {
    "text": "green thread right like in go there's a go routine um there kind of exists in kind of other Concepts maybe you've",
    "start": "13919680",
    "end": "13925439"
  },
  {
    "text": "worked with alexir those processes um and so these are a lightweight in memory thread so they are a thing they're an",
    "start": "13925439",
    "end": "13932479"
  },
  {
    "text": "object in memory and uh in in effect they actually do have a stack like they have an actual stack but there are a",
    "start": "13932479",
    "end": "13937760"
  },
  {
    "text": "thing that exists within memory um that represent kind of some computation and we can have uh lots of these we can",
    "start": "13937760",
    "end": "13944399"
  },
  {
    "text": "spawn thousands are very very cheap they're basically an object with some properties and so if an effect is a",
    "start": "13944399",
    "end": "13950319"
  },
  {
    "text": "description of a program a fiber is an running instance of that program so when",
    "start": "13950319",
    "end": "13956359"
  },
  {
    "text": "we run an effect we run it in a fiber and while that effect is running there's a fiber that represents the running of",
    "start": "13956359",
    "end": "13962960"
  },
  {
    "text": "that effect and so uh fibers can be paused they can be",
    "start": "13962960",
    "end": "13968600"
  },
  {
    "text": "restarted or they can be awaited to get the result of that effect or we can interrupt them right so we have this",
    "start": "13968600",
    "end": "13973960"
  },
  {
    "text": "thing called a fiber it is running an effect and it is like a value it is an object and we can externally interact",
    "start": "13973960",
    "end": "13981159"
  },
  {
    "text": "with it and we can stop it and we can restart it and we can wait for it to finish lots of operations on this",
    "start": "13981159",
    "end": "13987960"
  },
  {
    "text": "thing and this is how we're able to abstract away sync vers async right that was one of the things I said at the very",
    "start": "13987960",
    "end": "13994080"
  },
  {
    "text": "beginning there's no sync effect there's no async effect there are only effects and the reason this is able to happen is",
    "start": "13994080",
    "end": "14001199"
  },
  {
    "text": "because when we run the fiber just like how um the the fiber everything is sync to",
    "start": "14001199",
    "end": "14008760"
  },
  {
    "text": "the fiber there there is no async the fiber only runs when it has values like",
    "start": "14008760",
    "end": "14013840"
  },
  {
    "text": "when we when we if you think about um a generator function when we uh",
    "start": "14013840",
    "end": "14020359"
  },
  {
    "text": "when we yield a value we can kind of operate our our generator function is kind of written as if that value comes",
    "start": "14020359",
    "end": "14026120"
  },
  {
    "text": "back immediately but it might not come back immediately but the reason we can work like that is because effect is",
    "start": "14026120",
    "end": "14032159"
  },
  {
    "text": "doing a lot of stuff behind the scenes that basically if that fiber is waiting on the result that fact will",
    "start": "14032159",
    "end": "14037640"
  },
  {
    "text": "asynchronously resolve that fiber basically gets paused and we only restart it when we have the result of",
    "start": "14037640",
    "end": "14043040"
  },
  {
    "text": "the thing that that fiber was waiting on yes",
    "start": "14043040",
    "end": "14050880"
  },
  {
    "text": "um I would say that like the basis of that question has",
    "start": "14056840",
    "end": "14062640"
  },
  {
    "text": "a misunderstanding of fibers but I'm hoping that I will show you more examples and that will make sense okay",
    "start": "14062640",
    "end": "14069720"
  },
  {
    "text": "um so uh quickly back to the slides how is this possible right",
    "start": "14069720",
    "end": "14076680"
  },
  {
    "text": "because like I said effect or javascripts Asing model is completely different right and so I don't know how",
    "start": "14076680",
    "end": "14083319"
  },
  {
    "text": "many of you are familiar with how operating systems work but in your operating system like your CPU basically",
    "start": "14083319",
    "end": "14088560"
  },
  {
    "text": "there there's no way to stop kind of an impress uh thing as it's running like there has to be something else and so in",
    "start": "14088560",
    "end": "14095120"
  },
  {
    "text": "in an operating system kind of uh context there's like a CIS call which",
    "start": "14095120",
    "end": "14100760"
  },
  {
    "text": "is basically yielding to the operating system or there's a hardware inter which kind of transfer control back to the operating system and uh basically in",
    "start": "14100760",
    "end": "14107279"
  },
  {
    "text": "JavaScript right there're is no way to stop like that wild true Loop right like",
    "start": "14107279",
    "end": "14112439"
  },
  {
    "text": "no no matter how hard we try that wild true Loop will never resolve and so what",
    "start": "14112439",
    "end": "14117680"
  },
  {
    "text": "we need to do is uh basically split up our program into a bunch of little steps",
    "start": "14117680",
    "end": "14124279"
  },
  {
    "text": "right if we split up our program into a bunch of little steps and then have something like an an external thing we",
    "start": "14124279",
    "end": "14129600"
  },
  {
    "text": "can maybe call it a runtime that's going to execute each of those steps one by one well then if we want to stop we can",
    "start": "14129600",
    "end": "14135560"
  },
  {
    "text": "just not execute next effect right or the next thing effect right because this",
    "start": "14135560",
    "end": "14141479"
  },
  {
    "text": "is what um effect is actually doing um and so right when we have the",
    "start": "14141479",
    "end": "14147760"
  },
  {
    "text": "these programs that are made up of effects they're made up of all these kind of individual operations right we",
    "start": "14147760",
    "end": "14153159"
  },
  {
    "text": "have a succeed and then a map and then a flat math and so that's how we're able to stop the computation of something",
    "start": "14153159",
    "end": "14160800"
  },
  {
    "text": "because we've split up the computations into all these little steps the effect runtime can as it's running an effect uh",
    "start": "14160800",
    "end": "14167960"
  },
  {
    "text": "just not run the next step and do something else instead okay um but again the runtime",
    "start": "14167960",
    "end": "14174720"
  },
  {
    "text": "isn't Magic so if we call W true within effect or in this case do this if we do",
    "start": "14174720",
    "end": "14180640"
  },
  {
    "text": "this um there's nothing effect can do right it can only do so much and so there's this saying in uh in Rust async",
    "start": "14180640",
    "end": "14188600"
  },
  {
    "text": "um which is applicable here of don't block the executor if you and this is really no different than if you have a",
    "start": "14188600",
    "end": "14194479"
  },
  {
    "text": "uh because JavaScript is only single threaded if you have an async web server and you do a like read file sync your",
    "start": "14194479",
    "end": "14202399"
  },
  {
    "text": "entire web server is blocked uh for that the duration of that big synchronous call no matter how hard you try right",
    "start": "14202399",
    "end": "14207880"
  },
  {
    "text": "there's only one main thread and so um yeah just like with normal async if you",
    "start": "14207880",
    "end": "14213359"
  },
  {
    "text": "have a big long blocking call there's not much we can do um and",
    "start": "14213359",
    "end": "14220640"
  },
  {
    "text": "so let's see uh here so right if we have this big",
    "start": "14220640",
    "end": "14228720"
  },
  {
    "text": "long blocking call with an effect. sync that's going to block the runtime but again if we split this up into Little",
    "start": "14228720",
    "end": "14234279"
  },
  {
    "text": "Steps where instead of having this big while true Loop if we while true yield",
    "start": "14234279",
    "end": "14239560"
  },
  {
    "text": "effects that's going to yield a 100,000 effects and so then we have 100,000 opportunities for the effect runtime to",
    "start": "14239560",
    "end": "14246359"
  },
  {
    "text": "come in and say stop right I'm going to do something else um and",
    "start": "14246359",
    "end": "14254561"
  },
  {
    "text": "so we are almost back to the first example now um and the question is how do we spawn",
    "start": "14255040",
    "end": "14260920"
  },
  {
    "text": "new fibers and that's where we use effect. fork and so effect. Fork is",
    "start": "14260920",
    "end": "14266680"
  },
  {
    "text": "going to uh take an effect it's going to give you",
    "start": "14266680",
    "end": "14272800"
  },
  {
    "text": "a kind of handle to the fiber so it's going to spawn a new fiber it's going to run the effect you give to effect. fork",
    "start": "14272800",
    "end": "14279439"
  },
  {
    "text": "in that fiber and give you back basically a handle to that fiber and",
    "start": "14279439",
    "end": "14284960"
  },
  {
    "text": "so uh we can look at this example and so let me make sure I commented out up",
    "start": "14284960",
    "end": "14293600"
  },
  {
    "text": "here so here we're going to call effect. Fork on effect. never and this is basically an effect that will never um",
    "start": "14293600",
    "end": "14299600"
  },
  {
    "text": "complete we'll just always uh kind of suspend basically and so if we run this",
    "start": "14299600",
    "end": "14304880"
  },
  {
    "text": "we can see we get this this fiber if we call fiber. ID right a fiber is like a thing it's a thing and so a fiber uh",
    "start": "14304880",
    "end": "14314159"
  },
  {
    "text": "like I said it's it's represents the running of an effect and so it it's generical over two parameters which are",
    "start": "14314159",
    "end": "14320640"
  },
  {
    "text": "the success and error of the effect it's running right because um just like how",
    "start": "14320640",
    "end": "14328439"
  },
  {
    "text": "uh so the fiber is encoded with the type of the effect inside of it and so what that means is if we await a fiber we're",
    "start": "14328439",
    "end": "14336399"
  },
  {
    "text": "going to get back an exit of the same types right an exit of the same success",
    "start": "14336399",
    "end": "14341560"
  },
  {
    "text": "value success type and the same error type right and this exit type we talked about is kind of the outcome of a",
    "start": "14341560",
    "end": "14347560"
  },
  {
    "text": "computation so anytime a fiber completes there's an exit value and so uh awaiting a fiber so",
    "start": "14347560",
    "end": "14356159"
  },
  {
    "text": "again to clarify we're calling Fork calling Fork on an effect and that's giving us a fiber that's running that",
    "start": "14356159",
    "end": "14362239"
  },
  {
    "text": "effect and so when we await the fiber we get back the result uh as an exit if we",
    "start": "14362239",
    "end": "14367760"
  },
  {
    "text": "join the fiber we get back the result as just the value um and so hopefully that's enough",
    "start": "14367760",
    "end": "14374760"
  },
  {
    "text": "to explain this first example because What's Happening Here is we have this",
    "start": "14374760",
    "end": "14381040"
  },
  {
    "text": "uh and actually interestingly if we get rid of this effect. Fork this wild true",
    "start": "14381040",
    "end": "14386960"
  },
  {
    "text": "Loop will never be reached because what's happening is this effect. repeat",
    "start": "14386960",
    "end": "14392760"
  },
  {
    "text": "is blocking so when we uh repeat this like this schedule. space this is going to repeat this effect every 250",
    "start": "14392760",
    "end": "14399279"
  },
  {
    "text": "milliseconds forever and so when we yield this it's waiting for it to end it's waiting for it to end it's waiting for it to end and it's never going to",
    "start": "14399279",
    "end": "14405399"
  },
  {
    "text": "end because we've never like told it to like we could have a schedule that does 250 milliseconds five times or here",
    "start": "14405399",
    "end": "14411880"
  },
  {
    "text": "we've just said repeat forever and so this that that kind of running that effect um kind of creates an operation",
    "start": "14411880",
    "end": "14419239"
  },
  {
    "text": "that uh does not complete and so that's the reason this won't end this will",
    "start": "14419239",
    "end": "14424560"
  },
  {
    "text": "never kind of go through because this entire effect is kind of waiting on this to finish and it's never going to finish",
    "start": "14424560",
    "end": "14430319"
  },
  {
    "text": "and so if we want to do other things while that's running we can call effect. Fork and so now we have two fibers we",
    "start": "14430319",
    "end": "14437399"
  },
  {
    "text": "have the main fiber and the fork fiber and so the main fiber is going to move on and it's going to do this big WRA",
    "start": "14437399",
    "end": "14443920"
  },
  {
    "text": "Loop and keep incrementing and then every so often the effect runtime is going to stop that main fiber by just",
    "start": "14443920",
    "end": "14449239"
  },
  {
    "text": "saying hey uh you've you've done enough right like I'm not going to execute your next thing and it's going to switch to",
    "start": "14449239",
    "end": "14454479"
  },
  {
    "text": "this other fiber and say what do you have to do and it says I need to log every 250 milliseconds and it's going to",
    "start": "14454479",
    "end": "14460640"
  },
  {
    "text": "do that so that is how we can have kind of concurrent things happening um",
    "start": "14460640",
    "end": "14465920"
  },
  {
    "text": "without a sync or async because the effect runtime is kind of managing this",
    "start": "14465920",
    "end": "14472000"
  },
  {
    "text": "and so it is um we can have different fibers and the different fibers are",
    "start": "14472000",
    "end": "14477040"
  },
  {
    "text": "being kind of scheduled by the effect runtime um I know that's a lot",
    "start": "14477040",
    "end": "14483760"
  },
  {
    "text": "uh can I run it of course um this was the same as uh",
    "start": "14483800",
    "end": "14490740"
  },
  {
    "text": "[Music] before I need",
    "start": "14490740",
    "end": "14497239"
  },
  {
    "text": "to rid of this and so",
    "start": "14497239",
    "end": "14502640"
  },
  {
    "text": "um one thing that uh I talked about how this is not logging every 250 milliseconds logging every second um",
    "start": "14502640",
    "end": "14508600"
  },
  {
    "text": "something we can do is instead of doing this WOW true we can yield this",
    "start": "14508600",
    "end": "14514279"
  },
  {
    "text": "increment function um with effect. forever and so this is going to repeat something",
    "start": "14514279",
    "end": "14519840"
  },
  {
    "text": "forever and if we do that now it's going to repeat every 250 milliseconds and so there's a couple reasons kind of behind",
    "start": "14519840",
    "end": "14525880"
  },
  {
    "text": "the scenes why that's happening um the next thing I want to talk about or",
    "start": "14525880",
    "end": "14531720"
  },
  {
    "text": "let's look at this example so in this example we're declaring I and then we're creating this",
    "start": "14531720",
    "end": "14538960"
  },
  {
    "text": "fiber we're forking a new fiber that's going to log the value of I every 250 milliseconds and then we're setting I to",
    "start": "14538960",
    "end": "14546080"
  },
  {
    "text": "100 and that's the end so when we run this what do we think is going to",
    "start": "14546080",
    "end": "14552199"
  },
  {
    "text": "happen anyone",
    "start": "14552199",
    "end": "14560159"
  },
  {
    "text": "is it going to log okay uh this is not going to log",
    "start": "14560279",
    "end": "14567840"
  },
  {
    "text": "anything and so the reason this doesn't log anything is because of a very key thing",
    "start": "14567840",
    "end": "14574120"
  },
  {
    "text": "of effects concurrency model called structured concurrency and so in structured concurrency every fiber has",
    "start": "14574120",
    "end": "14581479"
  },
  {
    "text": "this parent child relationship so we have a fiber and when we spawn a fiber we spawn it as a child of the current",
    "start": "14581479",
    "end": "14587399"
  },
  {
    "text": "fiber and there's this important concept that no child can live longer than its parent fiber and this is really important",
    "start": "14587399",
    "end": "14594199"
  },
  {
    "text": "because um there's a kind of other mindset where we just have every fiber living in this big Global scope and",
    "start": "14594199",
    "end": "14601560"
  },
  {
    "text": "that's a problem because we can start leaking things right like if you in a program let's say you call a library function and it starts a a interval",
    "start": "14601560",
    "end": "14608880"
  },
  {
    "text": "calls set interval there's like and it doesn't give you a handle to that interval there's no way to get that",
    "start": "14608880",
    "end": "14615080"
  },
  {
    "text": "interval it's like impossible to stop at this point right or maybe there's a way but basically there's no easy way and so",
    "start": "14615080",
    "end": "14622479"
  },
  {
    "text": "the and what's powerful about this is if we kind of some Library effect we know",
    "start": "14622479",
    "end": "14629159"
  },
  {
    "text": "that any kind of fibers it creates will all be cleaned up when the kind of parent fiber is cleaned up and so in",
    "start": "14629159",
    "end": "14634239"
  },
  {
    "text": "that way we don't really leak fibers um and there are some kind of Escape hatches so you can actually create a",
    "start": "14634239",
    "end": "14639399"
  },
  {
    "text": "fiber that can outlive its parent but it's kind of a more advanced use case but by default all child fibers cannot",
    "start": "14639399",
    "end": "14646359"
  },
  {
    "text": "outlive their parent fiber and so it's Happening Here is we have the main fiber we have the child fiber and the main",
    "start": "14646359",
    "end": "14651520"
  },
  {
    "text": "fiber ends it finishes after we set it 100 it ends and so this child fiber",
    "start": "14651520",
    "end": "14656840"
  },
  {
    "text": "after this ends it says hey I need to kill all the child fibers and so this never gets a chance to",
    "start": "14656840",
    "end": "14662680"
  },
  {
    "text": "run and so um this is really really important um and I talk about a couple",
    "start": "14662680",
    "end": "14670600"
  },
  {
    "text": "reasons for why this is so important and so there's this diagram I really like this diagram so this kind of shows how",
    "start": "14670600",
    "end": "14676120"
  },
  {
    "text": "we can kind of create these kind of deeply NE fiber models but they always clean up right we can be assured that",
    "start": "14676120",
    "end": "14682279"
  },
  {
    "text": "there are no fiber leaks because as soon as the parent fiber ends it's going to interrupt all its children all it children all its children and I also",
    "start": "14682279",
    "end": "14688560"
  },
  {
    "text": "think this is where we talked about Interruption Mike talked about Interruption earlier we can now kind of think about how we're able to interrupt",
    "start": "14688560",
    "end": "14693920"
  },
  {
    "text": "the computation of a fiber or of an effect because if we're executing an effect in a fiber we can externally",
    "start": "14693920",
    "end": "14700239"
  },
  {
    "text": "interrupt that fiber and we can basically stay wherever you're at in that in the execution of that fiber stop",
    "start": "14700239",
    "end": "14707279"
  },
  {
    "text": "and that's that's how it exits it exits as an interruption and um where",
    "start": "14707279",
    "end": "14713720"
  },
  {
    "text": "uh the kind of the value of doing things like scope is effect will automatically make sure when you interrupt a Fiverr if",
    "start": "14713720",
    "end": "14720880"
  },
  {
    "text": "it has finalizers it's going to run all those finalizers and it's going to run all those finalizers in a way where they cannot be um interrupted and so um",
    "start": "14720880",
    "end": "14728640"
  },
  {
    "text": "that's quite important for having resources that right we don't want to inter leak a resource because that thing",
    "start": "14728640",
    "end": "14734439"
  },
  {
    "text": "got interrupted if the thing gets interrupted of course we want to make sure the resource sources associated with with it gets gets closed so I",
    "start": "14734439",
    "end": "14741520"
  },
  {
    "text": "talked about the Alternatives so callbacks are kind of all kind of live in this kind of obscure Global scope",
    "start": "14741520",
    "end": "14746560"
  },
  {
    "text": "there's also if you've ever worked with go you you can't get a handle to a go routine you just call go routine and",
    "start": "14746560",
    "end": "14751600"
  },
  {
    "text": "they just live magically you have no way to inspect them and so again we can leak tasks also um if a task errors right if",
    "start": "14751600",
    "end": "14759720"
  },
  {
    "text": "a set timeout throws or a set interval throws who's responsible for that error right it's unclear",
    "start": "14759720",
    "end": "14766080"
  },
  {
    "text": "where um in effect right when you have this parent child relationship you can say okay the parent is responsible for",
    "start": "14766080",
    "end": "14771680"
  },
  {
    "text": "all the errors of its children fibers um same with resources right and",
    "start": "14771680",
    "end": "14778319"
  },
  {
    "text": "uh how do you stop a task from the outside um we can because we have a handle to it um and this is quite",
    "start": "14778319",
    "end": "14784960"
  },
  {
    "text": "similar to memory management so if you've ever worked in C or C++ you know there's a whole kind of uh kind of a",
    "start": "14784960",
    "end": "14791199"
  },
  {
    "text": "bunch of Errors you can make around memory management where you can uh forget to free memory you can leak",
    "start": "14791199",
    "end": "14796760"
  },
  {
    "text": "memory you can free memory to too early and so Russ came in and Russ said I'm",
    "start": "14796760",
    "end": "14801920"
  },
  {
    "text": "going to give memory an owner and memory can only have one owner and when the owner drops it that's when we free the",
    "start": "14801920",
    "end": "14807640"
  },
  {
    "text": "memory and so this is quite similar where in C or C++ you could do everything properly and you probably",
    "start": "14807640",
    "end": "14813840"
  },
  {
    "text": "wouldn't run into any issues but you probably will eventually and so it's the same with concurrency right like um if",
    "start": "14813840",
    "end": "14819720"
  },
  {
    "text": "we did everything we might uh kind of do it right but here we can say okay this",
    "start": "14819720",
    "end": "14826359"
  },
  {
    "text": "concurrent task as an owner and when that owner gets interrupted or or it finishes or it succeeds whatever happens",
    "start": "14826359",
    "end": "14832640"
  },
  {
    "text": "uh that other concurrent task can't leak um and so I talked about some",
    "start": "14832640",
    "end": "14838399"
  },
  {
    "text": "Escape hatches so the main one is this thing called Fork demon Fork Damon and so this is going to spawn a fiber in the",
    "start": "14838399",
    "end": "14844439"
  },
  {
    "text": "global scope so that's how you opt out of the kind of parent child hierarchy although you um should only do this if",
    "start": "14844439",
    "end": "14851199"
  },
  {
    "text": "you know what you're doing right because you kind of throw out all the guarantees of this kind of um relationship if you",
    "start": "14851199",
    "end": "14856960"
  },
  {
    "text": "don't and so I have some examples here",
    "start": "14856960",
    "end": "14862080"
  },
  {
    "text": "to look at um actually most of these are on",
    "start": "14862080",
    "end": "14867560"
  },
  {
    "text": "fibert fiber communication so does anyone have questions about fibers so um unfortunately I have not",
    "start": "14867560",
    "end": "14874600"
  },
  {
    "text": "worked with alexir enough to have a a good understanding of what an agent is but I think um effects or fibers can be",
    "start": "14874600",
    "end": "14881199"
  },
  {
    "text": "stateful and that like the uh the kind of computations they're",
    "start": "14881199",
    "end": "14886880"
  },
  {
    "text": "running can be stateful and so this is where um we can look at uh fibert fiber communication so you can have two fibers",
    "start": "14886880",
    "end": "14893560"
  },
  {
    "text": "and they can talk to each other so this is very common in Alexa right instead of operating on shared State we can message",
    "start": "14893560",
    "end": "14899720"
  },
  {
    "text": "pass between these kind of concurrent tasks and so there's a bunch of really cool ways to do this in effect so there's this thing called a deferred and",
    "start": "14899720",
    "end": "14906239"
  },
  {
    "text": "a deferred is basically a promise um but better and so a deferred has a success type and an error type just like most",
    "start": "14906239",
    "end": "14912720"
  },
  {
    "text": "things in effect and one uh fiber can you can wait on a deferred you can pull",
    "start": "14912720",
    "end": "14918040"
  },
  {
    "text": "a deferred and then another fiber can resolve the defer or reject the defer and so in this way you can kind of",
    "start": "14918040",
    "end": "14923199"
  },
  {
    "text": "synchronize fibers right you can have four fibers waiting on something and then one other fiber kind of resolves",
    "start": "14923199",
    "end": "14928439"
  },
  {
    "text": "that deferred and now these can can finish and there's also a Q and A Q is basically a channel so we can um send uh",
    "start": "14928439",
    "end": "14935800"
  },
  {
    "text": "to a que we can um take from the que and so these are kind of how we communicate",
    "start": "14935800",
    "end": "14941600"
  },
  {
    "text": "between fibers and q's um are async but they're they're async in that the operations on a q",
    "start": "14941600",
    "end": "14948119"
  },
  {
    "text": "are blocking um and this is where I talked about how we're able to have these blocking things um but still be",
    "start": "14948119",
    "end": "14953560"
  },
  {
    "text": "async so when you pull from a que if the queue is empty it's going to block that fiber but the reason that it can block",
    "start": "14953560",
    "end": "14960319"
  },
  {
    "text": "is because the the effect runtime is going to see that's it's blocked it's basically going to say well I know that you're waiting on something that hasn't",
    "start": "14960319",
    "end": "14966000"
  },
  {
    "text": "happened yet so I'm going to go execute other fibers in the meantime right and so that's how we can have these apis",
    "start": "14966000",
    "end": "14971479"
  },
  {
    "text": "that that block the current fiber but other things can still run and so um cues like I said have customizable back",
    "start": "14971479",
    "end": "14977560"
  },
  {
    "text": "pressure so what that means is if we are sending things into the queue faster than they're being consumed we can uh",
    "start": "14977560",
    "end": "14984800"
  },
  {
    "text": "you can set an unbounded que so the queue can the kind of buffer that's holding all the items that haven't been taken out yet that can grow indefinitely",
    "start": "14984800",
    "end": "14991159"
  },
  {
    "text": "we can have a bounded queue that makes when we try to put something onto the queue that can block if the queue is",
    "start": "14991159",
    "end": "14997840"
  },
  {
    "text": "full we can also have a sliding queue or a dropping queue and so if we try to put onto the queue when it's full can either",
    "start": "14997840",
    "end": "15003239"
  },
  {
    "text": "drop from the front or drop from the back there's also this thing called a pub sub which is a way to um publish",
    "start": "15003239",
    "end": "15010199"
  },
  {
    "text": "messages to multiple subscribers so we can create the pub sub and we can put messages into the pub sub and we",
    "start": "15010199",
    "end": "15016399"
  },
  {
    "text": "subscribe from the pub sub we get a way to pull messages out um and this is like each subscription will get its own",
    "start": "15016399",
    "end": "15022680"
  },
  {
    "text": "instance of every message where with a queue if you have multiple fibers trying to pull off the same queue well there's only kind of like for each item in that",
    "start": "15022680",
    "end": "15029600"
  },
  {
    "text": "queue can only be pulled off once but a subscription every subscription is going to get its own copy of every value that",
    "start": "15029600",
    "end": "15034720"
  },
  {
    "text": "gets put on and then the other thing uh something kind of cool is the subscriptions have a scope so that's how",
    "start": "15034720",
    "end": "15040720"
  },
  {
    "text": "they're able to kind of uh like when you subscribe the the subscription of the",
    "start": "15040720",
    "end": "15046159"
  },
  {
    "text": "pub sub requires a scope and so when you close the scope it unsubscribes to the pub sub so that's a kind of cool use of",
    "start": "15046159",
    "end": "15052720"
  },
  {
    "text": "scope uh we have a couple minutes left um I'm going to quickly run through this",
    "start": "15052720",
    "end": "15058520"
  },
  {
    "text": "uh I'm actually going to skip this um high level abstractions I talked about we talked about fibers super low what's",
    "start": "15058520",
    "end": "15063920"
  },
  {
    "text": "the stuff you're going to use all the time there's working with fibers directly uh is not very common um basically every",
    "start": "15063920",
    "end": "15070800"
  },
  {
    "text": "combinator that operates on multiple effects has a concurrency option so um in effect. all which is the most common",
    "start": "15070800",
    "end": "15078439"
  },
  {
    "text": "place you'll see this um you will see the effect. all",
    "start": "15078439",
    "end": "15083640"
  },
  {
    "text": "concurrency unbounded and so what this internally is going to do is it's going to spawn a fiber for each effect and",
    "start": "15083640",
    "end": "15090239"
  },
  {
    "text": "it's going to run each fiber in in effect currently and if one of them fails it's going to automatically interrupt the other fibers for you right",
    "start": "15090239",
    "end": "15097600"
  },
  {
    "text": "and so this is doing a lot of work under the hood and you get all the benefits of the structured concurrency right like if we run this and then the fiber that's",
    "start": "15097600",
    "end": "15104399"
  },
  {
    "text": "running this gets interrupted all the fibers that are getting run concurrently in here they're all going to get interrupted right so we get all the",
    "start": "15104399",
    "end": "15110319"
  },
  {
    "text": "benefits of structured concurrency in one line and then this is something you can't do with promise.all if you want to",
    "start": "15110319",
    "end": "15116680"
  },
  {
    "text": "run these let's say with a maximum concurrency of two at a time you literally just put a number and now it's",
    "start": "15116680",
    "end": "15122000"
  },
  {
    "text": "only going to spawn two fibers and uh we're only going to maximally run two of these effects that we passed to it",
    "start": "15122000",
    "end": "15127920"
  },
  {
    "text": "concurrently um at the time and so we can see that down here um",
    "start": "15127920",
    "end": "15133680"
  },
  {
    "text": "and this can also be control controlled externally so we can use concurrency inherit and then somewhere kind of",
    "start": "15133680",
    "end": "15139880"
  },
  {
    "text": "higher up in our program uh one sec we can call effect. with concurrency and that's going to set the concurrency",
    "start": "15139880",
    "end": "15145960"
  },
  {
    "text": "limit for effects that use concurrency inherit deeper down",
    "start": "15145960",
    "end": "15151199"
  },
  {
    "text": "yes one process right yes all one node process so there's a thing called",
    "start": "15151359",
    "end": "15158600"
  },
  {
    "text": "effect. cluster which I'm pretty sure there's a talk about tomorrow that kind of talks about um more than one node",
    "start": "15158600",
    "end": "15164680"
  },
  {
    "text": "process but this is all happening on one node process just one thread just one",
    "start": "15164680",
    "end": "15170199"
  },
  {
    "text": "thread there are there are so that's something we didn't get to um in if you check out there's a a slide so there's",
    "start": "15171000",
    "end": "15177319"
  },
  {
    "text": "this thing called effect. platform and this is a good thing to know about an effect. platform is a package that",
    "start": "15177319",
    "end": "15183119"
  },
  {
    "text": "describes uh platform independent interfaces for common plat platform things and so there's a terminal uh",
    "start": "15183119",
    "end": "15190840"
  },
  {
    "text": "service there's a file system service there's a worker service there's tons of worker abstractions and then we can",
    "start": "15190840",
    "end": "15196920"
  },
  {
    "text": "import there's like a platform node a platform bun a platform browser right and we can provide platform specific",
    "start": "15196920",
    "end": "15202800"
  },
  {
    "text": "implementations of those Services um depending on what platform we're using and so that's a really kind of uh great",
    "start": "15202800",
    "end": "15209439"
  },
  {
    "text": "example of how to use uh or a usage of the kind of services is effect. platform",
    "start": "15209439",
    "end": "15215159"
  },
  {
    "text": "and there are tons of of worker abstraction I would say if you want to look the best example of that is in the",
    "start": "15215159",
    "end": "15221000"
  },
  {
    "text": "source code in uh platform I think platform node or just platform in one of",
    "start": "15221000",
    "end": "15226479"
  },
  {
    "text": "the examples or in the tests there's a worker example and that will show you that um and then the one final thing I",
    "start": "15226479",
    "end": "15234560"
  },
  {
    "text": "want to talk about is uh the or no that that's too much okay um so yeah the big",
    "start": "15234560",
    "end": "15241359"
  },
  {
    "text": "thing is all effects that operate on multiple values so effect. all effect. zip um there's a bunch of them",
    "start": "15241359",
    "end": "15248199"
  },
  {
    "text": "concurrency either unbounded or inherit or a number and that's going to allow you to run stuff concurrently oh oh yes",
    "start": "15248199",
    "end": "15254239"
  },
  {
    "text": "yes yes and but but this is the same where we talked about so this is going to Short Circuit by default right so if",
    "start": "15254239",
    "end": "15259560"
  },
  {
    "text": "one fails um all of them are going to fail and so actually like using like this or using um like this you actually",
    "start": "15259560",
    "end": "15267000"
  },
  {
    "text": "like you really don't think about fibers because this is going to operate basically the same way as if you didn't do this but concurrently and so you",
    "start": "15267000",
    "end": "15273600"
  },
  {
    "text": "don't have to think about fibers at all doing this but it it is going to have the fibers under the hood",
    "start": "15273600",
    "end": "15278840"
  },
  {
    "text": "um and yeah any more questions about",
    "start": "15278840",
    "end": "15285920"
  },
  {
    "text": "schedulers or not schedulers um fers I think we're running out of time the one last thing I want to talk",
    "start": "15285920",
    "end": "15292159"
  },
  {
    "start": "15291000",
    "end": "15391000"
  },
  {
    "text": "about is performance um so I'm just going to fly through these um performance is a big thing we all want",
    "start": "15292159",
    "end": "15297800"
  },
  {
    "text": "to be performant uh obviously effect code it's kind of doing a lot right there's this whole runtime there's a",
    "start": "15297800",
    "end": "15303840"
  },
  {
    "text": "schuer there's all these fibers we're encoding everything in these objects and so effect has some overhead it's",
    "start": "15303840",
    "end": "15309880"
  },
  {
    "text": "never going to be as fast as just writing pure JavaScript um but effect is made for application code where the limitation is almost always IO anyway",
    "start": "15309880",
    "end": "15317279"
  },
  {
    "text": "right and so that's where um if you talk to Mike you would literally say uh like find me when effect is your bottleneck",
    "start": "15317279",
    "end": "15322920"
  },
  {
    "text": "right and so um effect will likely per improve the performance with its",
    "start": "15322920",
    "end": "15329279"
  },
  {
    "text": "powerful concurrency Primitives so the ability to um structure concurrency Interruption um and like worker pool",
    "start": "15329279",
    "end": "15336000"
  },
  {
    "text": "abstractions these are tools to that can we can use to control concurrency better and that will have a much bigger impact on the performance of our code then",
    "start": "15336000",
    "end": "15342399"
  },
  {
    "text": "finally if you're writing CPU bound code uh you probably should not use a um or you probably shouldn't really be using",
    "start": "15342399",
    "end": "15348119"
  },
  {
    "text": "JavaScript or typescript right um so that's all I got for today um the slides",
    "start": "15348119",
    "end": "15353520"
  },
  {
    "text": "in the GitHub and the code will all be available on my GitHub um there is a lot for you to go through with those two",
    "start": "15353520",
    "end": "15358920"
  },
  {
    "text": "middle things I think there's a lot you can learn from and the exercises in there there's also more Snippets tons",
    "start": "15358920",
    "end": "15364159"
  },
  {
    "text": "and tons to learn um if you have Fe Fe back I know there's the box over there but um yeah I don't I don't I I wouldn't",
    "start": "15364159",
    "end": "15370560"
  },
  {
    "text": "use that but um if you want to use the feedback box it's over there uh if you want to talk to me on Discord talk to me",
    "start": "15370560",
    "end": "15376000"
  },
  {
    "text": "on Twitter um feel free I I would love to speak about effect with you I'd love to um teach you more and then of course",
    "start": "15376000",
    "end": "15381399"
  },
  {
    "text": "I'm going to be at the conference tomorrow so so please please please uh come say hi to me I'd love to talk to you and I hope you learned a lot thank",
    "start": "15381399",
    "end": "15386840"
  },
  {
    "text": "you so much everyone",
    "start": "15386840",
    "end": "15392560"
  }
]