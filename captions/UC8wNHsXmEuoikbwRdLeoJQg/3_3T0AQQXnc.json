[
  {
    "text": "(audience applauds)",
    "start": "0",
    "end": "625"
  },
  {
    "text": "Thank you, Johannes, so much for the introduction.",
    "start": "7208",
    "end": "8750"
  },
  {
    "text": "And of course, thank you to the Effect team",
    "start": "9041",
    "end": "10250"
  },
  {
    "text": "for inviting me to speak here today.",
    "start": "10250",
    "end": "11750"
  },
  {
    "text": "I'm Ethan Niser.",
    "start": "12958",
    "end": "13875"
  },
  {
    "text": "I'm currently a freshman at the University of Florida.",
    "start": "13875",
    "end": "16041"
  },
  {
    "text": "And since I discovered Effect a few years ago,",
    "start": "17000",
    "end": "19166"
  },
  {
    "text": "I've just been a really, really big advocate of it,",
    "start": "19166",
    "end": "21291"
  },
  {
    "text": "and mainly through creating content, especially on YouTube.",
    "start": "21541",
    "end": "23875"
  },
  {
    "text": "And last year, I was at Effect Days 2024.",
    "start": "25041",
    "end": "28500"
  },
  {
    "text": "This was me in the hotel, work on my workshop.",
    "start": "28541",
    "end": "30541"
  },
  {
    "text": "And that was a great experience.",
    "start": "30541",
    "end": "31375"
  },
  {
    "text": "And so it's really great to be",
    "start": "31916",
    "end": "32708"
  },
  {
    "text": "back here speaking this time.",
    "start": "32708",
    "end": "34375"
  },
  {
    "text": "Last year was in Austria.",
    "start": "35250",
    "end": "36125"
  },
  {
    "text": "This year was in Italy.",
    "start": "36500",
    "end": "37458"
  },
  {
    "text": "I think by the time I graduated college,",
    "start": "37458",
    "end": "38958"
  },
  {
    "text": "I'll probably have been to every country in Europe,",
    "start": "38958",
    "end": "40750"
  },
  {
    "text": "just going to Effect conferences.",
    "start": "41291",
    "end": "42375"
  },
  {
    "text": "But you can find me everywhere online at Ethan Niser.",
    "start": "43041",
    "end": "45250"
  },
  {
    "text": "So if you couldn't tell from",
    "start": "45541",
    "end": "48166"
  },
  {
    "text": "the title, kind of gave it away.",
    "start": "48166",
    "end": "49125"
  },
  {
    "text": "But I did rebuild Redis with Effect.",
    "start": "49125",
    "end": "51250"
  },
  {
    "text": "It's called Effectis.",
    "start": "51875",
    "end": "52958"
  },
  {
    "text": "I didn't implement everything, but there is quite a lot.",
    "start": "53791",
    "end": "56500"
  },
  {
    "text": "It's fully compatible with the official Redis CLI",
    "start": "56500",
    "end": "59375"
  },
  {
    "text": "and official Redis clients.",
    "start": "59375",
    "end": "60458"
  },
  {
    "text": "And what we are going to be looking at some code today,",
    "start": "61333",
    "end": "63291"
  },
  {
    "text": "I don't want to get into the nitty gritty too much.",
    "start": "63666",
    "end": "65708"
  },
  {
    "text": "And so I want to start by first discussing why even rebuild",
    "start": "65708",
    "end": "68666"
  },
  {
    "text": "Redis in the first place.",
    "start": "68666",
    "end": "69666"
  },
  {
    "text": "It's not like the official implementation really",
    "start": "69666",
    "end": "72000"
  },
  {
    "text": "needs replacing.",
    "start": "72000",
    "end": "72958"
  },
  {
    "text": "And then assuming we have a good reason to do this,",
    "start": "73625",
    "end": "75375"
  },
  {
    "text": "I'm kind of looking at what Redis represents",
    "start": "75666",
    "end": "77916"
  },
  {
    "text": "and its different components, and what might be hard",
    "start": "77916",
    "end": "80041"
  },
  {
    "text": "about kind of implementing those things.",
    "start": "80458",
    "end": "82833"
  },
  {
    "text": "And then, of course, we're all here for Effect.",
    "start": "83291",
    "end": "84791"
  },
  {
    "text": "So how can Effect help us take on those challenges?",
    "start": "84875",
    "end": "87166"
  },
  {
    "text": "And then the last thing I wanted to look at",
    "start": "87750",
    "end": "89083"
  },
  {
    "text": "was a kind of brief analysis of performance",
    "start": "89125",
    "end": "92500"
  },
  {
    "text": "and kind of how that comes into play with Effect.",
    "start": "93500",
    "end": "95291"
  },
  {
    "text": "So I think almost everyone has probably used Redis before.",
    "start": "96791",
    "end": "99458"
  },
  {
    "text": "It's an in-memory key value store.",
    "start": "99833",
    "end": "101291"
  },
  {
    "text": "But really, it's a lot more than that.",
    "start": "101791",
    "end": "103416"
  },
  {
    "text": "That was something I really, I think,",
    "start": "103416",
    "end": "104708"
  },
  {
    "text": "got to see a lot through this project,",
    "start": "104708",
    "end": "106083"
  },
  {
    "text": "was just how deep the Redis iceberg goes.",
    "start": "106083",
    "end": "108250"
  },
  {
    "text": "I didn't know about eval.",
    "start": "108250",
    "end": "109291"
  },
  {
    "text": "You can send Redis a string of Lua code to interpret.",
    "start": "109291",
    "end": "112750"
  },
  {
    "text": "That was pretty cool.",
    "start": "112750",
    "end": "113291"
  },
  {
    "text": "I think what's really great about Redis as a project",
    "start": "114416",
    "end": "116291"
  },
  {
    "text": "is that it represents a very diverse set of requirements.",
    "start": "117250",
    "end": "120166"
  },
  {
    "text": "There's a lot of things going on in Redis.",
    "start": "120958",
    "end": "122791"
  },
  {
    "text": "And I like to think that everyone",
    "start": "123000",
    "end": "124625"
  },
  {
    "text": "has a pretty good idea of how they would implement Redis",
    "start": "124625",
    "end": "126875"
  },
  {
    "text": "in their own kind of favorite",
    "start": "126875",
    "end": "128541"
  },
  {
    "text": "framework or language of choice.",
    "start": "128541",
    "end": "130291"
  },
  {
    "text": "And I think how you go about doing this",
    "start": "130875",
    "end": "132083"
  },
  {
    "text": "reveals a lot about the framework or language",
    "start": "132083",
    "end": "134040"
  },
  {
    "text": "that you're using.",
    "start": "134041",
    "end": "134708"
  },
  {
    "text": "And so by showing you how I used Effect,",
    "start": "134708",
    "end": "136875"
  },
  {
    "text": "I hope it reveals a lot about Effect itself.",
    "start": "136875",
    "end": "138666"
  },
  {
    "text": "So of these kind of different components of Redis,",
    "start": "139625",
    "end": "141625"
  },
  {
    "text": "I think there's kind of this correlation between,",
    "start": "141625",
    "end": "143500"
  },
  {
    "text": "as you go deeper down the iceberg, obviously, things",
    "start": "144125",
    "end": "146000"
  },
  {
    "text": "get a bit more complex.",
    "start": "146000",
    "end": "147041"
  },
  {
    "text": "So at the start, we just have a simple map from string",
    "start": "147041",
    "end": "149416"
  },
  {
    "text": "to string.",
    "start": "149416",
    "end": "149791"
  },
  {
    "text": "I think everyone can do this.",
    "start": "149791",
    "end": "151166"
  },
  {
    "text": "And then we have networking.",
    "start": "151166",
    "end": "152916"
  },
  {
    "text": "So we have a TCP server.",
    "start": "153250",
    "end": "154458"
  },
  {
    "text": "That server needs to operate on some kind of protocol.",
    "start": "154458",
    "end": "156333"
  },
  {
    "text": "Redis has complex data types, so not just strings.",
    "start": "157291",
    "end": "159166"
  },
  {
    "text": "There's sets and arrays.",
    "start": "159500",
    "end": "160833"
  },
  {
    "text": "Then in Redis, keys can have an expiration.",
    "start": "162083",
    "end": "164540"
  },
  {
    "text": "So now you have something asynchronous.",
    "start": "164875",
    "end": "166875"
  },
  {
    "text": "There's timing.",
    "start": "166875",
    "end": "167458"
  },
  {
    "text": "You might need to do some garbage collection.",
    "start": "168333",
    "end": "170000"
  },
  {
    "text": "Persistence... so this involves writing to the file system.",
    "start": "170666",
    "end": "172958"
  },
  {
    "text": "PubSub introduces push-based updates,",
    "start": "174000",
    "end": "176875"
  },
  {
    "text": "so not just request response.",
    "start": "176875",
    "end": "177875"
  },
  {
    "text": "And then transactions... you need to provide isolation",
    "start": "178833",
    "end": "181583"
  },
  {
    "text": "and atomicity.",
    "start": "181583",
    "end": "182333"
  },
  {
    "text": "And then at the very end, we have clustering,",
    "start": "182791",
    "end": "184375"
  },
  {
    "text": "which is obviously very hard to Effect has a whole library",
    "start": "184375",
    "end": "187083"
  },
  {
    "text": "for this.",
    "start": "187083",
    "end": "187583"
  },
  {
    "text": "So while I drew these out in kind of a linear path up here,",
    "start": "187875",
    "end": "190500"
  },
  {
    "text": "you've probably seen this chart before.",
    "start": "191000",
    "end": "192375"
  },
  {
    "text": "This is from the Effect landing page.",
    "start": "192375",
    "end": "193500"
  },
  {
    "text": "And this is probably, I think, in a couple other talks.",
    "start": "193916",
    "end": "196250"
  },
  {
    "text": "But really, these features just exponentially",
    "start": "196250",
    "end": "199041"
  },
  {
    "text": "grow in complexity.",
    "start": "199333",
    "end": "200083"
  },
  {
    "text": "But I really hope that I can show you",
    "start": "201041",
    "end": "203083"
  },
  {
    "text": "that some of these higher-level features, especially",
    "start": "203166",
    "end": "204666"
  },
  {
    "text": "transactions and clustering, aren't so hard,",
    "start": "204666",
    "end": "207333"
  },
  {
    "text": "given the kind of strong foundation that Effect provides.",
    "start": "207333",
    "end": "209208"
  },
  {
    "text": "So now let's look at some Effect.",
    "start": "210541",
    "end": "211958"
  },
  {
    "text": "So to start with the networking, so Redis operates on a TCP",
    "start": "213083",
    "end": "216165"
  },
  {
    "text": "model.",
    "start": "216416",
    "end": "216916"
  },
  {
    "text": "So every connection gets its own kind of TCP connection.",
    "start": "216916",
    "end": "221541"
  },
  {
    "text": "And this is done in Effect using Effect Platform.",
    "start": "222208",
    "end": "225165"
  },
  {
    "text": "So if you don't know what Effect Platform is,",
    "start": "225458",
    "end": "226833"
  },
  {
    "text": "it's Platform Independent Interfaces",
    "start": "226833",
    "end": "228415"
  },
  {
    "text": "with platform-specific implementations.",
    "start": "228416",
    "end": "230000"
  },
  {
    "text": "And one of those Platform Independent Interfaces",
    "start": "230708",
    "end": "232833"
  },
  {
    "text": "is the socket server interface.",
    "start": "233041",
    "end": "234125"
  },
  {
    "text": "So we can use this in our main Effect.",
    "start": "234791",
    "end": "236250"
  },
  {
    "text": "And then we give it a function",
    "start": "236625",
    "end": "237916"
  },
  {
    "text": "to handle every new connection.",
    "start": "237916",
    "end": "239041"
  },
  {
    "text": "And then through the power dependency injection,",
    "start": "239958",
    "end": "241665"
  },
  {
    "text": "we can give it different implementations.",
    "start": "242083",
    "end": "243415"
  },
  {
    "text": "So in the actual Effectis code,",
    "start": "243958",
    "end": "247250"
  },
  {
    "text": "we're using this top one here,",
    "start": "247250",
    "end": "248458"
  },
  {
    "text": "NodeSocketServer.layer",
    "start": "249375",
    "end": "250166"
  },
  {
    "text": "And this creates a TCP version of a socket server",
    "start": "250166",
    "end": "252500"
  },
  {
    "text": "Eusing the node-net package.",
    "start": "252916",
    "end": "253916"
  },
  {
    "text": "But you could just as easily run this over a WebSocket",
    "start": "254500",
    "end": "256750"
  },
  {
    "text": "if the client supported that as well.",
    "start": "257000",
    "end": "258333"
  },
  {
    "text": "This one, I think, uses the WebSockets package.",
    "start": "259208",
    "end": "261250"
  },
  {
    "text": "But for example, you could also use UWebSockets",
    "start": "261416",
    "end": "263291"
  },
  {
    "text": "as long as it conforms to the same interface.",
    "start": "264041",
    "end": "265332"
  },
  {
    "text": "So this function, the handle connection function,",
    "start": "266958",
    "end": "268166"
  },
  {
    "text": "takes in this socket type.",
    "start": "268166",
    "end": "269582"
  },
  {
    "text": "And with the socket type, we can call this socket.toChannel",
    "start": "270125",
    "end": "272708"
  },
  {
    "text": "function.",
    "start": "272833",
    "end": "273333"
  },
  {
    "text": "And this converts the socket into a channel.",
    "start": "273500",
    "end": "275208"
  },
  {
    "text": "But what is a channel?",
    "start": "275916",
    "end": "276750"
  },
  {
    "text": "Well, one of the things that's really great about Effect",
    "start": "277375",
    "end": "279250"
  },
  {
    "text": "is the kind of primitives it provides.",
    "start": "279458",
    "end": "281041"
  },
  {
    "text": "And channel is one of those primitives.",
    "start": "281291",
    "end": "282416"
  },
  {
    "text": "So Channel is really the core",
    "start": "283166",
    "end": "284250"
  },
  {
    "text": "of the stream types in Effect.",
    "start": "284250",
    "end": "285791"
  },
  {
    "text": "So people might be more",
    "start": "286541",
    "end": "287541"
  },
  {
    "text": "familiar with the streams in Node.js.",
    "start": "287541",
    "end": "289250"
  },
  {
    "text": "And so you can kind of think of Channel",
    "start": "289875",
    "end": "291791"
  },
  {
    "text": "as the Effect equivalent to a Node duplex stream.",
    "start": "292125",
    "end": "294125"
  },
  {
    "text": "So this is a Stream that can be",
    "start": "294125",
    "end": "294958"
  },
  {
    "text": "both read from and written to.",
    "start": "294958",
    "end": "296500"
  },
  {
    "text": "And the other two types of streams in Node,",
    "start": "297250",
    "end": "298666"
  },
  {
    "text": "which are Readable and Writable, both",
    "start": "298666",
    "end": "300166"
  },
  {
    "text": "have their kind of rough Effect equivalents in the Stream",
    "start": "300166",
    "end": "302166"
  },
  {
    "text": "and Sync types.",
    "start": "302166",
    "end": "303000"
  },
  {
    "text": "One of the things you might notice right away",
    "start": "304750",
    "end": "306041"
  },
  {
    "text": "about these types is just how",
    "start": "306041",
    "end": "307207"
  },
  {
    "text": "many type parameters they have.",
    "start": "307208",
    "end": "308500"
  },
  {
    "text": "This is really what makes them so great.",
    "start": "308791",
    "end": "310375"
  },
  {
    "text": "And it shows just how much information",
    "start": "310583",
    "end": "312208"
  },
  {
    "text": "they're able to encode and really how much information",
    "start": "312208",
    "end": "314416"
  },
  {
    "text": "that the Node types are leaving out.",
    "start": "314416",
    "end": "316332"
  },
  {
    "text": "In addition, the Node stream APIs,",
    "start": "318000",
    "end": "319500"
  },
  {
    "text": "they leave a lot to be desired.",
    "start": "320250",
    "end": "321333"
  },
  {
    "text": "Those APIs are pretty old, almost older than me actually.",
    "start": "321583",
    "end": "323583"
  },
  {
    "text": "And especially around type safety and also",
    "start": "324666",
    "end": "328125"
  },
  {
    "text": "kind of ergonomics, the more modern web Stream APIs",
    "start": "328125",
    "end": "330958"
  },
  {
    "text": "so transform stream, readable stream, and writable stream",
    "start": "331291",
    "end": "333000"
  },
  {
    "text": "they're a little bit better in type safety.",
    "start": "333000",
    "end": "334666"
  },
  {
    "text": "They're kind of generic over the types they operate on.",
    "start": "334666",
    "end": "337750"
  },
  {
    "text": "But they still have a lot of the same issues,",
    "start": "338208",
    "end": "339541"
  },
  {
    "text": "especially around their kind of",
    "start": "339541",
    "end": "340457"
  },
  {
    "text": "imperative callback based API.",
    "start": "340458",
    "end": "341750"
  },
  {
    "text": "In comparison, Effect Stream types",
    "start": "343458",
    "end": "345250"
  },
  {
    "text": "bring along all the benefits of the normal Effect type",
    "start": "345416",
    "end": "348291"
  },
  {
    "text": "that we're used to.",
    "start": "348291",
    "end": "348957"
  },
  {
    "text": "So they're fully type safe over success, error,",
    "start": "348958",
    "end": "351916"
  },
  {
    "text": "and requirements.",
    "start": "351916",
    "end": "352457"
  },
  {
    "text": "But that's really just the beginning.",
    "start": "353125",
    "end": "354250"
  },
  {
    "text": "Just like Effect, Streams are lazy by default,",
    "start": "354583",
    "end": "356708"
  },
  {
    "text": "they have seamless resource management and interruption.",
    "start": "356916",
    "end": "358707"
  },
  {
    "text": "And of course, they're fully declarative,",
    "start": "359333",
    "end": "360500"
  },
  {
    "text": "so no messy callbacks or listening to string events.",
    "start": "360500",
    "end": "363166"
  },
  {
    "text": "And just like all the other modules in Effect,",
    "start": "364083",
    "end": "365541"
  },
  {
    "text": "there's just tons and tons of utilities",
    "start": "365833",
    "end": "367500"
  },
  {
    "text": "for all the merging and piping and literally everything",
    "start": "367500",
    "end": "370333"
  },
  {
    "text": "you could ever need.",
    "start": "370333",
    "end": "370916"
  },
  {
    "text": "And so the way Effect is set up is really",
    "start": "372375",
    "end": "374500"
  },
  {
    "text": "it's this pipeline of a stream",
    "start": "374541",
    "end": "376500"
  },
  {
    "text": "and different transformations",
    "start": "376500",
    "end": "377458"
  },
  {
    "text": "on that stream.",
    "start": "377458",
    "end": "378083"
  },
  {
    "text": "So we start with some bytes in, which",
    "start": "378583",
    "end": "380166"
  },
  {
    "text": "are just come straight out of the socket.",
    "start": "380166",
    "end": "381332"
  },
  {
    "text": "And then we need to parse that into a string",
    "start": "381791",
    "end": "383166"
  },
  {
    "text": "and then parse that into RESP, which stands for the Redis",
    "start": "383166",
    "end": "385541"
  },
  {
    "text": "Serialization Protocol.",
    "start": "385541",
    "end": "386416"
  },
  {
    "text": "And then with that RESP, we can parse that",
    "start": "387250",
    "end": "389333"
  },
  {
    "text": "into individual commands, like get and set.",
    "start": "389333",
    "end": "391000"
  },
  {
    "text": "And then we run that against our storage",
    "start": "391458",
    "end": "392916"
  },
  {
    "text": "I'm supposed to be clicking through here.",
    "start": "392916",
    "end": "393875"
  },
  {
    "text": "And then we run those against our storage",
    "start": "394125",
    "end": "395541"
  },
  {
    "text": "to get some RESP out.",
    "start": "395541",
    "end": "396332"
  },
  {
    "text": "And then we can convert that back into bytes.",
    "start": "396791",
    "end": "398666"
  },
  {
    "text": "And then given these functions, these functions",
    "start": "399500",
    "end": "401500"
  },
  {
    "text": "like take in a stream and return a new Stream",
    "start": "401500",
    "end": "403375"
  },
  {
    "text": "with a different type, we can compose these all with flow",
    "start": "403458",
    "end": "406625"
  },
  {
    "text": "to get a single function from a Stream of bytes",
    "start": "406625",
    "end": "408750"
  },
  {
    "text": "in to a stream of bytes out.",
    "start": "408750",
    "end": "409791"
  },
  {
    "text": "You could also represent this as Channels.",
    "start": "411458",
    "end": "413208"
  },
  {
    "text": "So instead of a function from Stream A to Stream B,",
    "start": "413875",
    "end": "415750"
  },
  {
    "text": "you could have a Channel that takes type A in and returns B",
    "start": "415958",
    "end": "418750"
  },
  {
    "text": "out.",
    "start": "418750",
    "end": "419208"
  },
  {
    "text": "And you can just also pipe",
    "start": "419208",
    "end": "420291"
  },
  {
    "text": "those Channels through each other.",
    "start": "420291",
    "end": "421250"
  },
  {
    "text": "I thought it was a little bit easier",
    "start": "421750",
    "end": "422875"
  },
  {
    "text": "to think in just Streams, but Streams",
    "start": "423250",
    "end": "424541"
  },
  {
    "text": "are actually implemented with Channels under the hood.",
    "start": "424541",
    "end": "426332"
  },
  {
    "text": "So it's kind of the same.",
    "start": "426333",
    "end": "427708"
  },
  {
    "text": "Although if I were to do it again,",
    "start": "428291",
    "end": "429416"
  },
  {
    "text": "I would probably use Channels just",
    "start": "429416",
    "end": "431457"
  },
  {
    "text": "because of some of the more niche things that came up",
    "start": "431458",
    "end": "433083"
  },
  {
    "text": "later, but the Stream API is generally more ergonomic.",
    "start": "433125",
    "end": "436416"
  },
  {
    "text": "And so I would probably reach for that first",
    "start": "436625",
    "end": "438166"
  },
  {
    "text": "before you move on to Channels.",
    "start": "438166",
    "end": "439125"
  },
  {
    "text": "So this bytes to RESP and RESP to bytes part",
    "start": "440625",
    "end": "442875"
  },
  {
    "text": "is a pretty important part of the app.",
    "start": "442875",
    "end": "444125"
  },
  {
    "text": "And we need to parse in raw strings that",
    "start": "445000",
    "end": "447500"
  },
  {
    "text": "come in looking like this.",
    "start": "447500",
    "end": "448916"
  },
  {
    "text": "So the first character says what the type is.",
    "start": "448916",
    "end": "452166"
  },
  {
    "text": "And so a star represents an array.",
    "start": "452458",
    "end": "454208"
  },
  {
    "text": "It's an array with two items.",
    "start": "454208",
    "end": "455166"
  },
  {
    "text": "And then there's a separator, which",
    "start": "455375",
    "end": "456583"
  },
  {
    "text": "is a carriage return and a new line.",
    "start": "456583",
    "end": "458000"
  },
  {
    "text": "And then we have two different items.",
    "start": "458500",
    "end": "460250"
  },
  {
    "text": "We have the plus indicates a string.",
    "start": "460250",
    "end": "461875"
  },
  {
    "text": "And then the minus indicates an error.",
    "start": "461958",
    "end": "463208"
  },
  {
    "text": "And so what we really want to do is parse this into a kind",
    "start": "463750",
    "end": "466291"
  },
  {
    "text": "of in-memory representation that we can pattern match on.",
    "start": "466291",
    "end": "468582"
  },
  {
    "text": "And that would kind of look like this.",
    "start": "468833",
    "end": "470083"
  },
  {
    "text": "So we'd have an object with a type array.",
    "start": "470625",
    "end": "472250"
  },
  {
    "text": "And it has an array of these objects, which have their tag",
    "start": "472250",
    "end": "474916"
  },
  {
    "text": "and then a value.",
    "start": "474916",
    "end": "475500"
  },
  {
    "text": "And this actually represents a really great use case",
    "start": "476708",
    "end": "479000"
  },
  {
    "text": "for effect schema, because Effect schema can encode",
    "start": "479083",
    "end": "481500"
  },
  {
    "text": "both a two-way transformation.",
    "start": "481791",
    "end": "483125"
  },
  {
    "text": "So I'm going to show an",
    "start": "483750",
    "end": "484250"
  },
  {
    "text": "example for this simple string type.",
    "start": "484250",
    "end": "485958"
  },
  {
    "text": "And so this is the one with the tag simple string,",
    "start": "486458",
    "end": "489000"
  },
  {
    "text": "then the value OK.",
    "start": "489000",
    "end": "489791"
  },
  {
    "text": "And we're converting from this plus OK carriage return new",
    "start": "489916",
    "end": "493000"
  },
  {
    "text": "line.",
    "start": "493000",
    "end": "493500"
  },
  {
    "text": "And so the first thing we're going to do",
    "start": "493791",
    "end": "494832"
  },
  {
    "text": "is declare the kind of final schema for the in-memory type.",
    "start": "495000",
    "end": "497708"
  },
  {
    "text": "So we're using Schema.TaggedStruct to create",
    "start": "497708",
    "end": "499416"
  },
  {
    "text": "the object with that string tag and then",
    "start": "499416",
    "end": "501291"
  },
  {
    "text": "the value of type string.",
    "start": "501291",
    "end": "502707"
  },
  {
    "text": "And then this schema represents the transformation.",
    "start": "503333",
    "end": "505125"
  },
  {
    "text": "So it's kind of a lot.",
    "start": "505458",
    "end": "506125"
  },
  {
    "text": "But if you kind of look from the top down, first,",
    "start": "506458",
    "end": "509500"
  },
  {
    "text": "this is the input type.",
    "start": "510625",
    "end": "511500"
  },
  {
    "text": "So we're taking a string.",
    "start": "511500",
    "end": "512541"
  },
  {
    "text": "And then we're making sure that it starts",
    "start": "512541",
    "end": "514166"
  },
  {
    "text": "with the prefix we expect.",
    "start": "514166",
    "end": "515250"
  },
  {
    "text": "And we're making sure it starts with the suffix we expect.",
    "start": "515500",
    "end": "516958"
  },
  {
    "text": "And then once we know that, we",
    "start": "517375",
    "end": "518250"
  },
  {
    "text": "can kind of chop the ends off",
    "start": "518250",
    "end": "519375"
  },
  {
    "text": "and then make a new instance of the struct",
    "start": "519875",
    "end": "522750"
  },
  {
    "text": "with that inner value.",
    "start": "523166",
    "end": "523791"
  },
  {
    "text": "And then on the encode side, we can pull the value out",
    "start": "524333",
    "end": "527375"
  },
  {
    "text": "of the struct and then put",
    "start": "527375",
    "end": "528916"
  },
  {
    "text": "back on the prefix and the suffix.",
    "start": "528916",
    "end": "530250"
  },
  {
    "text": "And that's pretty much it.",
    "start": "531041",
    "end": "532416"
  },
  {
    "text": "And so this is for that simple string.",
    "start": "532708",
    "end": "534000"
  },
  {
    "text": "There's a couple other types in res.",
    "start": "534875",
    "end": "536250"
  },
  {
    "text": "And we can do this for all of them.",
    "start": "537166",
    "end": "539000"
  },
  {
    "text": "And then we can make a schema union of all of them.",
    "start": "539250",
    "end": "541583"
  },
  {
    "text": "And we actually end up with a single schema that can encode",
    "start": "541583",
    "end": "543833"
  },
  {
    "text": "and decode from any res spring to any res object",
    "start": "543833",
    "end": "546958"
  },
  {
    "text": "and back and forth.",
    "start": "546958",
    "end": "547583"
  },
  {
    "text": "And that's pretty cool.",
    "start": "548583",
    "end": "550000"
  },
  {
    "text": "So now that we have some kind of RESP,",
    "start": "550458",
    "end": "551833"
  },
  {
    "text": "we need an actual storage engine to run it against.",
    "start": "551833",
    "end": "554041"
  },
  {
    "text": "And I implemented this as an Effect service.",
    "start": "554875",
    "end": "557291"
  },
  {
    "text": "And it has just one kind of function",
    "start": "558166",
    "end": "561166"
  },
  {
    "text": "called run, which takes in a command.",
    "start": "561291",
    "end": "563166"
  },
  {
    "text": "This is a command like get or set,",
    "start": "563166",
    "end": "565000"
  },
  {
    "text": "and returns some output RESP.",
    "start": "566208",
    "end": "567500"
  },
  {
    "text": "And so the theory with this kind of service",
    "start": "568083",
    "end": "571375"
  },
  {
    "text": "is that, while for Redis, it's probably an in-memory store,",
    "start": "571375",
    "end": "574583"
  },
  {
    "text": "in theory, because it's just an opaque service.",
    "start": "575041",
    "end": "576750"
  },
  {
    "text": "It could actually be writing to the file system,",
    "start": "577041",
    "end": "578583"
  },
  {
    "text": "or writing to an object store over the network.",
    "start": "578583",
    "end": "579958"
  },
  {
    "text": "And so I created this in-memory store type",
    "start": "581875",
    "end": "584708"
  },
  {
    "text": "that kind of looks like this, which just has this one store",
    "start": "584708",
    "end": "587250"
  },
  {
    "text": "property, and then the",
    "start": "587333",
    "end": "588500"
  },
  {
    "text": "function that operates on that store.",
    "start": "588500",
    "end": "589833"
  },
  {
    "text": "And so that store type looks like this.",
    "start": "590500",
    "end": "593166"
  },
  {
    "text": "So it's a HashMap from a string to this stored value.",
    "start": "593166",
    "end": "596208"
  },
  {
    "text": "And stored value is a tagged enum.",
    "start": "596666",
    "end": "598791"
  },
  {
    "text": "And this is a type from the data module and Effect, which",
    "start": "598791",
    "end": "600625"
  },
  {
    "text": "makes it easy to create a tag discriminated union.",
    "start": "601708",
    "end": "604250"
  },
  {
    "text": "And so it maps from the tag to the actual in-memory",
    "start": "604833",
    "end": "607625"
  },
  {
    "text": "representation of that type.",
    "start": "607750",
    "end": "608708"
  },
  {
    "text": "So there's a HashSet, or a hash type in Redis.",
    "start": "608708",
    "end": "612416"
  },
  {
    "text": "And that maps to the HashMap type from Effect.",
    "start": "612708",
    "end": "615541"
  },
  {
    "text": "And we're using a lot of Effect data types here.",
    "start": "616000",
    "end": "617541"
  },
  {
    "text": "Something to point out is that all these Effect data",
    "start": "618125",
    "end": "619791"
  },
  {
    "text": "types are immutable.",
    "start": "619791",
    "end": "620541"
  },
  {
    "text": "That'll be important a bit later.",
    "start": "621083",
    "end": "622416"
  },
  {
    "text": "The next thing to think about is expiration",
    "start": "623958",
    "end": "625666"
  },
  {
    "text": "and how to encode that in our store.",
    "start": "626000",
    "end": "627541"
  },
  {
    "text": "And what we can do is go ahead",
    "start": "628041",
    "end": "629083"
  },
  {
    "text": "and, to each of these fields,",
    "start": "629083",
    "end": "630583"
  },
  {
    "text": "we're adding a new...",
    "start": "630833",
    "end": "631750"
  },
  {
    "text": "each of these union members are adding a new field",
    "start": "633208",
    "end": "635250"
  },
  {
    "text": "called expiration, which is of type Option",
    "start": "635250",
    "end": "637750"
  },
  {
    "text": "And a DateTime is a type and Effect that represents a date",
    "start": "638750",
    "end": "640625"
  },
  {
    "text": "time.",
    "start": "640625",
    "end": "640958"
  },
  {
    "text": "It's a bit more ergonomic than the default JavaScript date",
    "start": "640958",
    "end": "644000"
  },
  {
    "text": "object and has a lot of utilities and helpers.",
    "start": "644000",
    "end": "645791"
  },
  {
    "text": "And so if the expiration is none,",
    "start": "646416",
    "end": "647666"
  },
  {
    "text": "that represents a value that doesn't have an expiration set",
    "start": "648041",
    "end": "650625"
  },
  {
    "text": "at all.",
    "start": "650625",
    "end": "651125"
  },
  {
    "text": "And if the option is some, then the date time",
    "start": "651291",
    "end": "653583"
  },
  {
    "text": "represents when that value expires.",
    "start": "653666",
    "end": "655708"
  },
  {
    "text": "And so to abide by this, when we get from our store,",
    "start": "656750",
    "end": "659916"
  },
  {
    "text": "we wrap this in this larger function.",
    "start": "660500",
    "end": "662291"
  },
  {
    "text": "And so the first thing we do is actually",
    "start": "663333",
    "end": "664416"
  },
  {
    "text": "get the raw value from the hash map.",
    "start": "664416",
    "end": "666375"
  },
  {
    "text": "But before we return it, we have to check",
    "start": "666791",
    "end": "668416"
  },
  {
    "text": "if that expiration value is some.",
    "start": "668916",
    "end": "671208"
  },
  {
    "text": "And if it's some, then we can compare it",
    "start": "671666",
    "end": "673583"
  },
  {
    "text": "to the current date time.",
    "start": "673583",
    "end": "674500"
  },
  {
    "text": "And if the date time is passed, then we return an option",
    "start": "674958",
    "end": "677750"
  },
  {
    "text": "of none, which is the same as",
    "start": "677750",
    "end": "679458"
  },
  {
    "text": "if the value wasn't there at all.",
    "start": "679458",
    "end": "680500"
  },
  {
    "text": "You might notice that this doesn't actually delete expired",
    "start": "681333",
    "end": "683833"
  },
  {
    "text": "keys.",
    "start": "683958",
    "end": "684333"
  },
  {
    "text": "It just soft deletes them.",
    "start": "684333",
    "end": "685833"
  },
  {
    "text": "We wouldn't return them.",
    "start": "685833",
    "end": "686750"
  },
  {
    "text": "They would still stay around in memory.",
    "start": "687000",
    "end": "688208"
  },
  {
    "text": "And to do this, we can set up a cleanup job",
    "start": "688958",
    "end": "692708"
  },
  {
    "text": "that will occasionally go over the store",
    "start": "692708",
    "end": "694208"
  },
  {
    "text": "and take out expired keys.",
    "start": "694583",
    "end": "695916"
  },
  {
    "text": "And we can set this up inside the layer",
    "start": "696750",
    "end": "698375"
  },
  {
    "text": "that creates the service.",
    "start": "698375",
    "end": "699375"
  },
  {
    "text": "So the key thing to notice here is",
    "start": "699833",
    "end": "701291"
  },
  {
    "text": "that we're first creating an instance of this in-memory",
    "start": "701291",
    "end": "704125"
  },
  {
    "text": "store at the top, and then",
    "start": "704250",
    "end": "705375"
  },
  {
    "text": "we're returning it at the bottom.",
    "start": "705375",
    "end": "706458"
  },
  {
    "text": "And that's really the main thing that's going on here.",
    "start": "706791",
    "end": "708375"
  },
  {
    "text": "But then in the middle, we set up this side Effect,",
    "start": "708375",
    "end": "710750"
  },
  {
    "text": "where we call this purge expired function.",
    "start": "711750",
    "end": "713291"
  },
  {
    "text": "And this is a function that goes over the store",
    "start": "713916",
    "end": "716166"
  },
  {
    "text": "and checks all the expirations to see if they exist",
    "start": "716541",
    "end": "718416"
  },
  {
    "text": "and see if that key has expired, and then removes it",
    "start": "718666",
    "end": "720625"
  },
  {
    "text": "if it's expired.",
    "start": "720625",
    "end": "721125"
  },
  {
    "text": "And then we can...",
    "start": "721958",
    "end": "722458"
  },
  {
    "text": "this layer takes in a Duration, and then",
    "start": "723250",
    "end": "725708"
  },
  {
    "text": "we can repeat this Effect according to a space",
    "start": "725708",
    "end": "729083"
  },
  {
    "text": "Schedule on that Duration.",
    "start": "729125",
    "end": "730250"
  },
  {
    "text": "So if the input was like Duration.minutes(5),",
    "start": "730250",
    "end": "732291"
  },
  {
    "text": "then we would repeat this",
    "start": "732750",
    "end": "733916"
  },
  {
    "text": "purge expired function, the cleanup",
    "start": "733916",
    "end": "735458"
  },
  {
    "text": "function, every five minutes.",
    "start": "735541",
    "end": "737000"
  },
  {
    "text": "And then we're calling fork scoped,",
    "start": "737458",
    "end": "738708"
  },
  {
    "text": "which runs this repeated cleanup task",
    "start": "739333",
    "end": "742833"
  },
  {
    "text": "in a separate concurrent Fiber.",
    "start": "743250",
    "end": "744500"
  },
  {
    "text": "And forkScoped ties that Fiber's lifetime to a Scope.",
    "start": "745375",
    "end": "748291"
  },
  {
    "text": "And then using Layer.scoped, that kind of absorbs",
    "start": "748666",
    "end": "751291"
  },
  {
    "text": "that Scope into the Layer.",
    "start": "751291",
    "end": "752375"
  },
  {
    "text": "So this concurrent task's lifetime",
    "start": "752750",
    "end": "755291"
  },
  {
    "text": "is tied to the lifetime of the Layer.",
    "start": "755291",
    "end": "756750"
  },
  {
    "text": "The next thing I wanted to point out",
    "start": "760000",
    "end": "762000"
  },
  {
    "text": "was I talked about the DateTime module having",
    "start": "762083",
    "end": "764166"
  },
  {
    "text": "a lot of different utilities.",
    "start": "764166",
    "end": "765625"
  },
  {
    "text": "One of the ones I found particularly useful",
    "start": "765916",
    "end": "767541"
  },
  {
    "text": "was this DateTime.add(duration).",
    "start": "767541",
    "end": "769125"
  },
  {
    "text": "So this came up in this set handler.",
    "start": "769750",
    "end": "772666"
  },
  {
    "text": "And so set as a command takes a key and a value",
    "start": "773375",
    "end": "776041"
  },
  {
    "text": "and optionally has an expiration.",
    "start": "776041",
    "end": "777458"
  },
  {
    "text": "And so if the expiration is",
    "start": "779125",
    "end": "780708"
  },
  {
    "text": "sum, we can get the current time",
    "start": "780708",
    "end": "783500"
  },
  {
    "text": "and then use DateTime.add(duration), which",
    "start": "783500",
    "end": "785416"
  },
  {
    "text": "returns a new DateTime, which is the Duration",
    "start": "785583",
    "end": "787458"
  },
  {
    "text": "past the first DateTime, to get the actual value that we",
    "start": "787666",
    "end": "790708"
  },
  {
    "text": "store in the database.",
    "start": "790708",
    "end": "791500"
  },
  {
    "text": "And the reason I thought this was a really good example",
    "start": "792583",
    "end": "794291"
  },
  {
    "text": "is because it really shows how the Effect modules build",
    "start": "794291",
    "end": "796458"
  },
  {
    "text": "on one another.",
    "start": "796458",
    "end": "797000"
  },
  {
    "text": "This API can only really exist because Effect",
    "start": "797750",
    "end": "799541"
  },
  {
    "text": "has a very robust DateTime module,",
    "start": "799708",
    "end": "801458"
  },
  {
    "text": "and it also has a very robust duration module.",
    "start": "801666",
    "end": "803625"
  },
  {
    "text": "And so it can write these kind of cross-module helpers,",
    "start": "803875",
    "end": "805791"
  },
  {
    "text": "where if you were using a separate daytime package",
    "start": "806625",
    "end": "808833"
  },
  {
    "text": "and a separate Duration package, you",
    "start": "808833",
    "end": "810541"
  },
  {
    "text": "would have to write these yourself.",
    "start": "810541",
    "end": "811666"
  },
  {
    "text": "And this compounds to all the different modules in Effect.",
    "start": "811666",
    "end": "814750"
  },
  {
    "text": "Now, if you remember our stored value tagged enum type",
    "start": "816500",
    "end": "821083"
  },
  {
    "text": "from earlier, there we were first declaring the type.",
    "start": "821083",
    "end": "823750"
  },
  {
    "text": "But what we can do instead is declare that type",
    "start": "824166",
    "end": "826583"
  },
  {
    "text": "as a schema first and then derive the type from it.",
    "start": "826583",
    "end": "829083"
  },
  {
    "text": "We can make a schema for all the different",
    "start": "829541",
    "end": "831291"
  },
  {
    "text": "the string and the list and the hash.",
    "start": "832125",
    "end": "833833"
  },
  {
    "text": "And then we can make a schema for the entire store",
    "start": "834375",
    "end": "836541"
  },
  {
    "text": "using Schema.HashMap.",
    "start": "836958",
    "end": "837916"
  },
  {
    "text": "And the benefit of this is that we",
    "start": "838708",
    "end": "840333"
  },
  {
    "text": "can create these transformation schemas that",
    "start": "840375",
    "end": "842916"
  },
  {
    "text": "are able to transform from our store type",
    "start": "842916",
    "end": "844833"
  },
  {
    "text": "to any arbitrary type.",
    "start": "844833",
    "end": "845833"
  },
  {
    "text": "So a good example of this is if we want to make a snapshot.",
    "start": "846500",
    "end": "848625"
  },
  {
    "text": "So Redis has a special binary snapshot format.",
    "start": "848875",
    "end": "851125"
  },
  {
    "text": "And so we can create a schema that",
    "start": "851833",
    "end": "853833"
  },
  {
    "text": "knows how to encode and decode",
    "start": "854916",
    "end": "856500"
  },
  {
    "text": "from our in-memory store type",
    "start": "856500",
    "end": "858416"
  },
  {
    "text": "to this raw binary snapshot format.",
    "start": "858833",
    "end": "860791"
  },
  {
    "text": "So speaking of snapshots, I implemented...",
    "start": "862333",
    "end": "865416"
  },
  {
    "text": "there's two kinds of persistence in Redis.",
    "start": "865416",
    "end": "867041"
  },
  {
    "text": "So there's file system...",
    "start": "867041",
    "end": "868333"
  },
  {
    "text": "or there are both files.",
    "start": "868625",
    "end": "869500"
  },
  {
    "text": "But there's log-based persistence,",
    "start": "870208",
    "end": "872541"
  },
  {
    "text": "which is an append-only file.",
    "start": "872791",
    "end": "875166"
  },
  {
    "text": "And it writes out all the...",
    "start": "875416",
    "end": "877000"
  },
  {
    "text": "it's the write ahead log.",
    "start": "877708",
    "end": "878500"
  },
  {
    "text": "And then there's snapshot-based persistence,",
    "start": "879000",
    "end": "880875"
  },
  {
    "text": "which stores a whole copy of the database every so often",
    "start": "880875",
    "end": "884625"
  },
  {
    "text": "and on shutdown.",
    "start": "884625",
    "end": "885125"
  },
  {
    "text": "And so I implemented both.",
    "start": "885875",
    "end": "887708"
  },
  {
    "text": "We're just going to look at the snapshot-based ones.",
    "start": "888333",
    "end": "890208"
  },
  {
    "text": "And so the first thing we need to do",
    "start": "890875",
    "end": "891916"
  },
  {
    "text": "is update our storage interface.",
    "start": "891916",
    "end": "895166"
  },
  {
    "text": "So this was the one that just had that one run command.",
    "start": "895166",
    "end": "897041"
  },
  {
    "text": "And so now, because the",
    "start": "897708",
    "end": "899541"
  },
  {
    "text": "storage interface is kind of opaque,",
    "start": "899541",
    "end": "900958"
  },
  {
    "text": "we don't really know how it's actually stored.",
    "start": "900958",
    "end": "902875"
  },
  {
    "text": "The storage interface has to tell us.",
    "start": "903291",
    "end": "905166"
  },
  {
    "text": "It has to be able to give us a snapshot.",
    "start": "905416",
    "end": "907333"
  },
  {
    "text": "And so if you wanted, you could use the Schema technique",
    "start": "907916",
    "end": "910916"
  },
  {
    "text": "I just described on the last slide.",
    "start": "910916",
    "end": "913000"
  },
  {
    "text": "But really, it could be anything.",
    "start": "913333",
    "end": "914041"
  },
  {
    "text": "And so then I made a new service,",
    "start": "915291",
    "end": "917333"
  },
  {
    "text": "which represents a way to store a snapshot.",
    "start": "917833",
    "end": "920083"
  },
  {
    "text": "So this just takes in the byte array",
    "start": "920666",
    "end": "921958"
  },
  {
    "text": "and then does something with it.",
    "start": "922250",
    "end": "923208"
  },
  {
    "text": "And one example of that is this file system version, which",
    "start": "923750",
    "end": "927666"
  },
  {
    "text": "uses the FileSystem module from Effect Platform",
    "start": "928791",
    "end": "930791"
  },
  {
    "text": "to just write out that snapshot to this file.",
    "start": "931375",
    "end": "934666"
  },
  {
    "text": "And so now that we have these two parts,",
    "start": "936916",
    "end": "938125"
  },
  {
    "text": "we have a storage that can generate a snapshot.",
    "start": "938125",
    "end": "940291"
  },
  {
    "text": "And we have a persistence service,",
    "start": "940291",
    "end": "942041"
  },
  {
    "text": "which can store the snapshot.",
    "start": "942333",
    "end": "943166"
  },
  {
    "text": "Then we can combine those.",
    "start": "943750",
    "end": "944708"
  },
  {
    "text": "And I'm doing this inside a Layer.",
    "start": "945458",
    "end": "946875"
  },
  {
    "text": "Namely, this is a Layer that says scopedDiscard.",
    "start": "947458",
    "end": "950125"
  },
  {
    "text": "So they're like discard constructors for Layers.",
    "start": "950375",
    "end": "952291"
  },
  {
    "text": "They don't actually produce any services.",
    "start": "952291",
    "end": "954000"
  },
  {
    "text": "They just kind of have side effects.",
    "start": "954000",
    "end": "955333"
  },
  {
    "text": "And so this Layer uses both the storage service",
    "start": "956125",
    "end": "959291"
  },
  {
    "text": "and the persistence service and",
    "start": "959625",
    "end": "961500"
  },
  {
    "text": "has this take in store snapshot",
    "start": "961500",
    "end": "964083"
  },
  {
    "text": "variable.",
    "start": "964291",
    "end": "964791"
  },
  {
    "text": "And you can see, first, it calls storage.generateSnapshot,",
    "start": "964958",
    "end": "967333"
  },
  {
    "text": "which generates a snapshot.",
    "start": "967666",
    "end": "968708"
  },
  {
    "text": "And then it calls, from the storage persistence service,",
    "start": "969375",
    "end": "971500"
  },
  {
    "text": "store snapshot.",
    "start": "971500",
    "end": "972000"
  },
  {
    "text": "And so that is one Effect that",
    "start": "972666",
    "end": "974208"
  },
  {
    "text": "represents taking the snapshot,",
    "start": "974208",
    "end": "976125"
  },
  {
    "text": "storing the snapshot.",
    "start": "976333",
    "end": "976833"
  },
  {
    "text": "And then what we can do is very",
    "start": "977375",
    "end": "978791"
  },
  {
    "text": "similar to the garbage collection",
    "start": "978791",
    "end": "980833"
  },
  {
    "text": "technique from earlier, is we can",
    "start": "980833",
    "end": "982333"
  },
  {
    "text": "repeat that according to a schedule",
    "start": "982333",
    "end": "983625"
  },
  {
    "text": "and fork it into a Scope and then using Layer.scoped.",
    "start": "984083",
    "end": "986416"
  },
  {
    "text": "And so we can have this asynchronous task",
    "start": "986416",
    "end": "987958"
  },
  {
    "text": "that will take and store these snapshots every so often.",
    "start": "988583",
    "end": "991083"
  },
  {
    "text": "And the other thing is that",
    "start": "991583",
    "end": "992416"
  },
  {
    "text": "we're using Effect.addFinalizer",
    "start": "992416",
    "end": "994125"
  },
  {
    "text": "to make sure that if the process gets interrupted,",
    "start": "994750",
    "end": "996916"
  },
  {
    "text": "we take a snapshot right before we exit.",
    "start": "996916",
    "end": "998375"
  },
  {
    "text": "The next thing I really want to look at",
    "start": "1000250",
    "end": "1001458"
  },
  {
    "text": "was transactions.",
    "start": "1001541",
    "end": "1002250"
  },
  {
    "text": "And for transactions, we're going",
    "start": "1002833",
    "end": "1003791"
  },
  {
    "text": "to be using Effect Software Transactional Memory, or STM",
    "start": "1003791",
    "end": "1006875"
  },
  {
    "text": "library.",
    "start": "1006875",
    "end": "1007375"
  },
  {
    "text": "And this is kind of a niche part of Effect.",
    "start": "1007666",
    "end": "1009000"
  },
  {
    "text": "But it will make implementing transactions,",
    "start": "1010375",
    "end": "1012000"
  },
  {
    "text": "which is usually quite difficult, literally",
    "start": "1012000",
    "end": "1014666"
  },
  {
    "text": "a couple lines of code.",
    "start": "1014666",
    "end": "1015500"
  },
  {
    "text": "So before, or up until now, we've had a normal HashMap.",
    "start": "1016750",
    "end": "1020291"
  },
  {
    "text": "And all of our operations on this HashMap are synchronous.",
    "start": "1020708",
    "end": "1023166"
  },
  {
    "text": "We're just getting and setting to the HashMap.",
    "start": "1023166",
    "end": "1024791"
  },
  {
    "text": "But in order to use STM, we",
    "start": "1025958",
    "end": "1027125"
  },
  {
    "text": "need to put this HashMap inside a TRef",
    "start": "1027125",
    "end": "1028750"
  },
  {
    "text": "or transactional reference.",
    "start": "1028750",
    "end": "1030333"
  },
  {
    "text": "And a TRef requires that the type inside is immutable.",
    "start": "1031708",
    "end": "1036291"
  },
  {
    "text": "But we already have fulfilled that requirement",
    "start": "1036791",
    "end": "1038666"
  },
  {
    "text": "because we're using Effect's immutable data types.",
    "start": "1038791",
    "end": "1041000"
  },
  {
    "text": "And so before, where our operations were",
    "start": "1043375",
    "end": "1045416"
  },
  {
    "text": "synchronous, or we could wrap them in the Effect type,",
    "start": "1045458",
    "end": "1047416"
  },
  {
    "text": "now all of our operations on the TRef",
    "start": "1047833",
    "end": "1049625"
  },
  {
    "text": "become an instance of this STM type.",
    "start": "1049750",
    "end": "1051416"
  },
  {
    "text": "And you can think of STM as the sibling to the Effect type.",
    "start": "1051625",
    "end": "1054250"
  },
  {
    "text": "It has the same three type parameters of success,",
    "start": "1054250",
    "end": "1056166"
  },
  {
    "text": "error, and requirements.",
    "start": "1056166",
    "end": "1056875"
  },
  {
    "text": "But where an Effect represents a possibly asynchronous,",
    "start": "1057625",
    "end": "1060791"
  },
  {
    "text": "possibly effectful computation, STM",
    "start": "1062208",
    "end": "1067166"
  },
  {
    "text": "represents a pure transactional computation.",
    "start": "1067208",
    "end": "1069208"
  },
  {
    "text": "So they're kind of like slightly different things,",
    "start": "1069208",
    "end": "1070625"
  },
  {
    "text": "but with very similar APIs.",
    "start": "1071125",
    "end": "1072791"
  },
  {
    "text": "And so what we do is...",
    "start": "1073708",
    "end": "1076333"
  },
  {
    "text": "next slide.",
    "start": "1077083",
    "end": "1079041"
  },
  {
    "text": "There we go.",
    "start": "1079041",
    "end": "1079541"
  },
  {
    "text": "We can kind of call the related...",
    "start": "1081166",
    "end": "1082875"
  },
  {
    "text": "so I have this function which returns an STM.",
    "start": "1082875",
    "end": "1084833"
  },
  {
    "text": "And you could do one of these for each of the operations,",
    "start": "1085375",
    "end": "1087958"
  },
  {
    "text": "so I get or set.",
    "start": "1087958",
    "end": "1088500"
  },
  {
    "text": "But here I just have get.",
    "start": "1088500",
    "end": "1089166"
  },
  {
    "text": "And then we can match on the command that comes in",
    "start": "1089541",
    "end": "1091500"
  },
  {
    "text": "and call the related function.",
    "start": "1091500",
    "end": "1093333"
  },
  {
    "text": "And so we get back an STM,",
    "start": "1093708",
    "end": "1094958"
  },
  {
    "text": "which represents the update to the TRef",
    "start": "1094958",
    "end": "1099291"
  },
  {
    "text": "But we haven't actually committed it yet.",
    "start": "1099666",
    "end": "1100958"
  },
  {
    "text": "It's like an Effect that you haven't yielded yet.",
    "start": "1101583",
    "end": "1102875"
  },
  {
    "text": "And so then we can use STM.commit.",
    "start": "1103916",
    "end": "1106166"
  },
  {
    "text": "And that returns an Effect that represents actually running",
    "start": "1106625",
    "end": "1109333"
  },
  {
    "text": "and committing that transaction.",
    "start": "1109625",
    "end": "1110583"
  },
  {
    "text": "And so this isn't really that different from what",
    "start": "1111750",
    "end": "1113250"
  },
  {
    "text": "we were doing before with just one command.",
    "start": "1113333",
    "end": "1114708"
  },
  {
    "text": "But for example, if we wanted",
    "start": "1116041",
    "end": "1117083"
  },
  {
    "text": "to bring in an array of commands",
    "start": "1117083",
    "end": "1118833"
  },
  {
    "text": "instead of just one command, for example, in a transaction,",
    "start": "1118833",
    "end": "1122333"
  },
  {
    "text": "what we can do is map over this",
    "start": "1122750",
    "end": "1124250"
  },
  {
    "text": "array with that same get command",
    "start": "1124250",
    "end": "1125875"
  },
  {
    "text": "STM function.",
    "start": "1126000",
    "end": "1126583"
  },
  {
    "text": "And we'll end up with an array of STMs.",
    "start": "1126958",
    "end": "1128958"
  },
  {
    "text": "And then just how we use Effect.all",
    "start": "1129583",
    "end": "1131625"
  },
  {
    "text": "to turn an array of Effects into an Effect of an array,",
    "start": "1131916",
    "end": "1134500"
  },
  {
    "text": "we can do the exact same with STM.",
    "start": "1135000",
    "end": "1136500"
  },
  {
    "text": "And so now we have a single STM, which",
    "start": "1136875",
    "end": "1138875"
  },
  {
    "text": "represents all of the kind of individual updates",
    "start": "1138916",
    "end": "1142333"
  },
  {
    "text": "for each of the commands.",
    "start": "1143250",
    "end": "1144041"
  },
  {
    "text": "And then because we just have one STM,",
    "start": "1144666",
    "end": "1146250"
  },
  {
    "text": "we can just commit that one STM.",
    "start": "1146541",
    "end": "1148083"
  },
  {
    "text": "And because STM operates as it",
    "start": "1148333",
    "end": "1150958"
  },
  {
    "text": "either commits or rolls back,",
    "start": "1150958",
    "end": "1152333"
  },
  {
    "text": "that's transactions.",
    "start": "1153208",
    "end": "1153750"
  },
  {
    "text": "That's all you need to do.",
    "start": "1154041",
    "end": "1154708"
  },
  {
    "text": "And Redis doesn't actually have the concept of rollbacks",
    "start": "1155666",
    "end": "1158666"
  },
  {
    "text": "too much.",
    "start": "1158666",
    "end": "1159041"
  },
  {
    "text": "I think it might be possible in the Lua code,",
    "start": "1159041",
    "end": "1161500"
  },
  {
    "text": "but just with normal commands.",
    "start": "1161500",
    "end": "1162625"
  },
  {
    "text": "It doesn't really have that concept.",
    "start": "1163000",
    "end": "1165125"
  },
  {
    "text": "But if we wanted to implement that here,",
    "start": "1166000",
    "end": "1167291"
  },
  {
    "text": "it would also be possible.",
    "start": "1167291",
    "end": "1168250"
  },
  {
    "text": "You can just fail from an STM, just how you effect.fail.",
    "start": "1169166",
    "end": "1172291"
  },
  {
    "text": "You can STM.fail.",
    "start": "1172333",
    "end": "1173041"
  },
  {
    "text": "And if we have five commands in that array,",
    "start": "1173625",
    "end": "1177000"
  },
  {
    "text": "and the first three succeed, but the fourth one",
    "start": "1177416",
    "end": "1179375"
  },
  {
    "text": "were to fail, then the whole transaction kind of aborts",
    "start": "1179375",
    "end": "1181958"
  },
  {
    "text": "and the tref never gets updated.",
    "start": "1181958",
    "end": "1183041"
  },
  {
    "text": "So I made this other service that's",
    "start": "1185666",
    "end": "1187916"
  },
  {
    "text": "called the transaction driver.",
    "start": "1187916",
    "end": "1189333"
  },
  {
    "text": "And this kind of represents the external way of interacting",
    "start": "1189750",
    "end": "1192791"
  },
  {
    "text": "with transactions.",
    "start": "1193125",
    "end": "1193708"
  },
  {
    "text": "Really, it's just a wrapper around this internal state,",
    "start": "1194541",
    "end": "1197458"
  },
  {
    "text": "which is an option of an array.",
    "start": "1197666",
    "end": "1199041"
  },
  {
    "text": "And so if the option is none, then",
    "start": "1199666",
    "end": "1201625"
  },
  {
    "text": "there's no transaction in progress.",
    "start": "1201666",
    "end": "1202791"
  },
  {
    "text": "If the option is some, then the array",
    "start": "1202791",
    "end": "1204875"
  },
  {
    "text": "represents the queued commands.",
    "start": "1204916",
    "end": "1206083"
  },
  {
    "text": "And then the service just kind of abstracts on that",
    "start": "1206666",
    "end": "1209125"
  },
  {
    "text": "a little bit.",
    "start": "1209125",
    "end": "1209583"
  },
  {
    "text": "It has an Effect to if a transaction is in progress.",
    "start": "1209583",
    "end": "1213708"
  },
  {
    "text": "And it's like starting one, appending a command,",
    "start": "1214458",
    "end": "1216250"
  },
  {
    "text": "aborting a transaction, and executing it.",
    "start": "1216250",
    "end": "1217958"
  },
  {
    "text": "The next thing is PubSub.",
    "start": "1219666",
    "end": "1221583"
  },
  {
    "text": "An Effect actually has a type called PubSub,",
    "start": "1222000",
    "end": "1223833"
  },
  {
    "text": "which basically did 90% of what was needed.",
    "start": "1224125",
    "end": "1226250"
  },
  {
    "text": "And so very similar to the transaction driver.",
    "start": "1227541",
    "end": "1230291"
  },
  {
    "text": "This has its own service, which",
    "start": "1230583",
    "end": "1231625"
  },
  {
    "text": "just has a slightly abstracted",
    "start": "1231625",
    "end": "1232750"
  },
  {
    "text": "interface around a kind of inner PubSub instance.",
    "start": "1233083",
    "end": "1235958"
  },
  {
    "text": "And it returns a stream, which you can subscribe to.",
    "start": "1237208",
    "end": "1240833"
  },
  {
    "text": "And then that stream gets converted into RESP",
    "start": "1240833",
    "end": "1243250"
  },
  {
    "text": "and then kind of forwarded through that pipeline shown",
    "start": "1243250",
    "end": "1245833"
  },
  {
    "text": "earlier.",
    "start": "1245916",
    "end": "1246416"
  },
  {
    "text": "And then Redis, it's like a server.",
    "start": "1247833",
    "end": "1250333"
  },
  {
    "text": "You usually need to start it over CLI.",
    "start": "1250333",
    "end": "1251666"
  },
  {
    "text": "And we're using, in fact, CLI for that.",
    "start": "1252041",
    "end": "1253541"
  },
  {
    "text": "I didn't get too deep into",
    "start": "1254375",
    "end": "1255500"
  },
  {
    "text": "this part, as it's pretty simple.",
    "start": "1255500",
    "end": "1256875"
  },
  {
    "text": "But I just wanted to point out this option,",
    "start": "1257125",
    "end": "1258458"
  },
  {
    "text": "this port option as a very good",
    "start": "1258916",
    "end": "1260291"
  },
  {
    "text": "example of the declarative API",
    "start": "1260291",
    "end": "1261875"
  },
  {
    "text": "that Effect CLI gives you.",
    "start": "1261875",
    "end": "1262375"
  },
  {
    "text": "So this represents Options.integer.",
    "start": "1264208",
    "end": "1266000"
  },
  {
    "text": "So this represents an option.",
    "start": "1266291",
    "end": "1267833"
  },
  {
    "text": "So it would say --port=3000.",
    "start": "1267833",
    "end": "1269958"
  },
  {
    "text": "And then we can give it these additional combinators.",
    "start": "1270416",
    "end": "1272625"
  },
  {
    "text": "So we can give it an alias.",
    "start": "1272625",
    "end": "1273500"
  },
  {
    "text": "So it could work with just -p.",
    "start": "1273500",
    "end": "1274916"
  },
  {
    "text": "And we can give it a default value.",
    "start": "1275375",
    "end": "1276666"
  },
  {
    "text": "And we can also have it fall",
    "start": "1276666",
    "end": "1277583"
  },
  {
    "text": "back to an environment variable.",
    "start": "1277583",
    "end": "1278875"
  },
  {
    "text": "And then we pass this into Command.make.",
    "start": "1279250",
    "end": "1282166"
  },
  {
    "text": "And then Command.make gives it back to us",
    "start": "1282500",
    "end": "1284500"
  },
  {
    "text": "in the arguments for the handler.",
    "start": "1284625",
    "end": "1287166"
  },
  {
    "text": "So in that final handler inside the object,",
    "start": "1287625",
    "end": "1290666"
  },
  {
    "text": "the port is just a number.",
    "start": "1291041",
    "end": "1292041"
  },
  {
    "text": "And it's kind of like, did it come from the environment",
    "start": "1292291",
    "end": "1293958"
  },
  {
    "text": "variable?",
    "start": "1294041",
    "end": "1294416"
  },
  {
    "text": "Did it come from the default?",
    "start": "1294416",
    "end": "1295125"
  },
  {
    "text": "Did it come from being passed to the CLI?",
    "start": "1295125",
    "end": "1296375"
  },
  {
    "text": "It doesn't really matter.",
    "start": "1296500",
    "end": "1297166"
  },
  {
    "text": "We just get it back.",
    "start": "1297166",
    "end": "1297791"
  },
  {
    "text": "And then we can provide that to the Layer constructor",
    "start": "1298125",
    "end": "1301000"
  },
  {
    "text": "for our SocketServer.",
    "start": "1301291",
    "end": "1302333"
  },
  {
    "text": "And that is what actually changes the port",
    "start": "1302750",
    "end": "1305458"
  },
  {
    "text": "that the SocketServer starts on.",
    "start": "1305458",
    "end": "1306500"
  },
  {
    "text": "So I know that was kind of a lot, actually a lot of code,",
    "start": "1308500",
    "end": "1310500"
  },
  {
    "text": "a bit more than I wanted.",
    "start": "1310500",
    "end": "1311250"
  },
  {
    "text": "But let's try to take a step back and really distill down",
    "start": "1311250",
    "end": "1314041"
  },
  {
    "text": "Effect's key impact points.",
    "start": "1314125",
    "end": "1315625"
  },
  {
    "text": "I think the number one thing here",
    "start": "1316416",
    "end": "1317708"
  },
  {
    "text": "is just working on top of fundamentally better",
    "start": "1317708",
    "end": "1319666"
  },
  {
    "text": "primitives.",
    "start": "1319708",
    "end": "1320208"
  },
  {
    "text": "I think the effects of using Effect over Promise.",
    "start": "1321000",
    "end": "1324666"
  },
  {
    "text": "I've really been talking about a lot.",
    "start": "1325000",
    "end": "1326000"
  },
  {
    "text": "I think people are very familiar with that.",
    "start": "1326000",
    "end": "1327250"
  },
  {
    "text": "But in the same way, the Etream types, in Effect,",
    "start": "1328333",
    "end": "1330541"
  },
  {
    "text": "really shine over their node and web counterparts.",
    "start": "1330541",
    "end": "1333416"
  },
  {
    "text": "And so it's not just the Effect type.",
    "start": "1334541",
    "end": "1336833"
  },
  {
    "text": "It extends to Streams and Channels and STM.",
    "start": "1336833",
    "end": "1339000"
  },
  {
    "text": "And really, all these things are possible because they're",
    "start": "1339291",
    "end": "1341583"
  },
  {
    "text": "built on really robust primitives.",
    "start": "1341583",
    "end": "1343250"
  },
  {
    "text": "And so all the things we love in effect: type safety,",
    "start": "1343250",
    "end": "1344958"
  },
  {
    "text": "error handling, dependency injection, interruption,",
    "start": "1345416",
    "end": "1347541"
  },
  {
    "text": "declarative APIs...",
    "start": "1347541",
    "end": "1348166"
  },
  {
    "text": "all kind of stems from these primitives.",
    "start": "1348916",
    "end": "1350250"
  },
  {
    "text": "Next is swappable services and dependency injection.",
    "start": "1351750",
    "end": "1354250"
  },
  {
    "text": "And this is used a lot in this app.",
    "start": "1355041",
    "end": "1356500"
  },
  {
    "text": "You have the Transaction driver, the PubSub driver,",
    "start": "1356791",
    "end": "1359708"
  },
  {
    "text": "the storage interface, the persistence,",
    "start": "1359708",
    "end": "1362083"
  },
  {
    "text": "both the snapshot persistence and the log persistence.",
    "start": "1364500",
    "end": "1367041"
  },
  {
    "text": "It's all services.",
    "start": "1367041",
    "end": "1367708"
  },
  {
    "text": "And this is really great for testing and composability",
    "start": "1368500",
    "end": "1372041"
  },
  {
    "text": "and swapping out implementations.",
    "start": "1372333",
    "end": "1373291"
  },
  {
    "text": "And then finally is the rich Effect standard library.",
    "start": "1374791",
    "end": "1377208"
  },
  {
    "text": "And this is just all over this app.",
    "start": "1377208",
    "end": "1378791"
  },
  {
    "text": "So we're using Schema for the encoding and decoding",
    "start": "1378791",
    "end": "1381125"
  },
  {
    "text": "the RESP, STM for transactions, PubSub for Redis, pub sub,",
    "start": "1381125",
    "end": "1385375"
  },
  {
    "text": "DateTime for doing the expirations.",
    "start": "1385791",
    "end": "1387250"
  },
  {
    "text": "There's Option, Duration, Schedule.",
    "start": "1387666",
    "end": "1389166"
  },
  {
    "text": "I didn't get to talk about it, but I used match as well",
    "start": "1389958",
    "end": "1392166"
  },
  {
    "text": "for pattern matching.",
    "start": "1392166",
    "end": "1392958"
  },
  {
    "text": "And then from Effect Platform, Socket and SocketServer,",
    "start": "1393166",
    "end": "1396000"
  },
  {
    "text": "and FileSystem, and then finally, Effect CLI.",
    "start": "1396000",
    "end": "1397791"
  },
  {
    "text": "And yes.",
    "start": "1399791",
    "end": "1403875"
  },
  {
    "text": "Moving on to performance.",
    "start": "1404625",
    "end": "1406041"
  },
  {
    "text": "I want to investigate performance a little bit",
    "start": "1407625",
    "end": "1409500"
  },
  {
    "text": "with this app, considering this app's kind",
    "start": "1409500",
    "end": "1411375"
  },
  {
    "text": "of relative complexity.",
    "start": "1411375",
    "end": "1412333"
  },
  {
    "text": "And also that Redis ships with",
    "start": "1412625",
    "end": "1414125"
  },
  {
    "text": "a binary called Redis benchmark,",
    "start": "1414125",
    "end": "1415458"
  },
  {
    "text": "considering that Effectis is Redis compatible.",
    "start": "1416208",
    "end": "1419208"
  },
  {
    "text": "I was really curious to see how it would hold up.",
    "start": "1419708",
    "end": "1421291"
  },
  {
    "text": "The answer is not well.",
    "start": "1421958",
    "end": "1422916"
  },
  {
    "text": "So on the left is the official Redis implementation,",
    "start": "1425000",
    "end": "1427000"
  },
  {
    "text": "and on the right is Effectis.",
    "start": "1427291",
    "end": "1428708"
  },
  {
    "text": "Now, I know this looks pretty bad.",
    "start": "1428708",
    "end": "1430125"
  },
  {
    "text": "But to be fair, Redis is written in C,",
    "start": "1430541",
    "end": "1432708"
  },
  {
    "text": "and it's been highly optimized for a decade.",
    "start": "1433208",
    "end": "1435583"
  },
  {
    "text": "And I spent a total of zero minutes",
    "start": "1436083",
    "end": "1437625"
  },
  {
    "text": "trying to optimize Effectis.",
    "start": "1437625",
    "end": "1438875"
  },
  {
    "text": "I really tried to give",
    "start": "1439583",
    "end": "1440750"
  },
  {
    "text": "Effectis a much more fair comparison,",
    "start": "1440750",
    "end": "1442791"
  },
  {
    "text": "and that would be a node JavaScript implementation",
    "start": "1442791",
    "end": "1446166"
  },
  {
    "text": "of Redis that's not using Effect.",
    "start": "1446375",
    "end": "1448375"
  },
  {
    "text": "But I really couldn't find one.",
    "start": "1448958",
    "end": "1450708"
  },
  {
    "text": "And I could have implemented it myself,",
    "start": "1451500",
    "end": "1453125"
  },
  {
    "text": "but I think implementing Redis once was enough.",
    "start": "1453708",
    "end": "1456000"
  },
  {
    "text": "And also, the whole idea was that using Effect",
    "start": "1456000",
    "end": "1458708"
  },
  {
    "text": "is the fun, easy way to do this.",
    "start": "1458916",
    "end": "1461208"
  },
  {
    "text": "I didn't really want to do the annoying hard way.",
    "start": "1461333",
    "end": "1462791"
  },
  {
    "text": "So from now on, I'm just going to be comparing Effectis",
    "start": "1463750",
    "end": "1465916"
  },
  {
    "text": "to itself.",
    "start": "1465916",
    "end": "1466416"
  },
  {
    "text": "And so the first thing I did was",
    "start": "1467416",
    "end": "1469291"
  },
  {
    "text": "we used Bun, and Bun gave a",
    "start": "1471666",
    "end": "1473041"
  },
  {
    "text": "30% jump, which was pretty good.",
    "start": "1473041",
    "end": "1474583"
  },
  {
    "text": "You might be curious about the V1 at the bottom there.",
    "start": "1475125",
    "end": "1477416"
  },
  {
    "text": "And it turned out my original",
    "start": "1477708",
    "end": "1479291"
  },
  {
    "text": "version, the zero optimization",
    "start": "1479291",
    "end": "1480625"
  },
  {
    "text": "version, kind of sucked.",
    "start": "1480875",
    "end": "1481833"
  },
  {
    "text": "What I was doing was, while my",
    "start": "1483083",
    "end": "1485041"
  },
  {
    "text": "Schema-based parser was very,",
    "start": "1485041",
    "end": "1486750"
  },
  {
    "text": "very cool, it was not the most efficient,",
    "start": "1486750",
    "end": "1489125"
  },
  {
    "text": "because it wasn't an incremental parser.",
    "start": "1489541",
    "end": "1491125"
  },
  {
    "text": "So it only... you could give it a string",
    "start": "1491333",
    "end": "1492666"
  },
  {
    "text": "and it would either succeed or fail.",
    "start": "1492666",
    "end": "1494000"
  },
  {
    "text": "So what I did was I took the input string, split it",
    "start": "1494416",
    "end": "1496791"
  },
  {
    "text": "into individual characters, and then we just",
    "start": "1496791",
    "end": "1498375"
  },
  {
    "text": "append on one character and run the parser,",
    "start": "1498500",
    "end": "1500958"
  },
  {
    "text": "and it would either succeed or fail.",
    "start": "1500958",
    "end": "1502125"
  },
  {
    "text": "And I'd append on the next one, append on the next one.",
    "start": "1502125",
    "end": "1504083"
  },
  {
    "text": "And you can imagine that there would be a lot of failures",
    "start": "1504500",
    "end": "1506583"
  },
  {
    "text": "before one success.",
    "start": "1506583",
    "end": "1507375"
  },
  {
    "text": "And so it turned out that 30% of my code execution time",
    "start": "1507791",
    "end": "1510458"
  },
  {
    "text": "was just constructing error objects.",
    "start": "1510833",
    "end": "1512416"
  },
  {
    "text": "And so I found a library on NPM called Redis parser.",
    "start": "1513791",
    "end": "1517333"
  },
  {
    "text": "I don't actually think this one is particularly efficient",
    "start": "1517916",
    "end": "1520041"
  },
  {
    "text": "as well, but it's a little bit better.",
    "start": "1520041",
    "end": "1521375"
  },
  {
    "text": "And especially the way I wrapped it,",
    "start": "1521958",
    "end": "1523041"
  },
  {
    "text": "I turned it into a node duplex stream,",
    "start": "1523041",
    "end": "1524666"
  },
  {
    "text": "and then you can turn that node duplex stream",
    "start": "1524958",
    "end": "1526333"
  },
  {
    "text": "into an Effect Channel.",
    "start": "1526333",
    "end": "1527166"
  },
  {
    "text": "But with just that, we were able to double the performance.",
    "start": "1528541",
    "end": "1531416"
  },
  {
    "text": "So that's pretty good.",
    "start": "1531666",
    "end": "1532500"
  },
  {
    "text": "And this was also kind of expanded to Bun as well.",
    "start": "1533583",
    "end": "1535750"
  },
  {
    "text": "Now, again, I don't have a non-Effect version",
    "start": "1537375",
    "end": "1539083"
  },
  {
    "text": "to compare to, but if you imagine",
    "start": "1539083",
    "end": "1541500"
  },
  {
    "text": "or some people are often concerned",
    "start": "1542375",
    "end": "1543875"
  },
  {
    "text": "about Effect's performance.",
    "start": "1544041",
    "end": "1544708"
  },
  {
    "text": "Here's why I don't personally think it matters too much.",
    "start": "1546500",
    "end": "1549500"
  },
  {
    "text": "Really, the comparison is not against native languages,",
    "start": "1550666",
    "end": "1553750"
  },
  {
    "text": "but against non-Effect JS,",
    "start": "1553750",
    "end": "1555000"
  },
  {
    "text": "which I think the Effect slowdown is",
    "start": "1555583",
    "end": "1561375"
  },
  {
    "text": "definitely not on the",
    "start": "1561500",
    "end": "1562458"
  },
  {
    "text": "I think the original versus the Redis implementation",
    "start": "1562750",
    "end": "1564958"
  },
  {
    "text": "was 300 times slower, or it was 300 times faster.",
    "start": "1564958",
    "end": "1568291"
  },
  {
    "text": "And so when you're looking at Effect versus non-effect,",
    "start": "1568291",
    "end": "1570166"
  },
  {
    "text": "you're looking at probably 2 to 10 times at the most.",
    "start": "1570375",
    "end": "1573750"
  },
  {
    "text": "OK, even less, 20% says Mike.",
    "start": "1576875",
    "end": "1579250"
  },
  {
    "text": "But still, there is always going to be some costs.",
    "start": "1580625",
    "end": "1582458"
  },
  {
    "text": "There's a runtime.",
    "start": "1582958",
    "end": "1583583"
  },
  {
    "text": "You're wrapping your code in all these objects.",
    "start": "1583583",
    "end": "1585000"
  },
  {
    "text": "There's a lot going on.",
    "start": "1585000",
    "end": "1585958"
  },
  {
    "text": "Really, the main use for JavaScript on the server",
    "start": "1586875",
    "end": "1589291"
  },
  {
    "text": "is not highly parallelized CPU-bound code.",
    "start": "1589291",
    "end": "1591416"
  },
  {
    "text": "It's business logic.",
    "start": "1591416",
    "end": "1592458"
  },
  {
    "text": "And in business logic, async rules supreme.",
    "start": "1592458",
    "end": "1594833"
  },
  {
    "text": "And this is because async costs, like network calls,",
    "start": "1594833",
    "end": "1597666"
  },
  {
    "text": "they're shared equally by all code,",
    "start": "1598041",
    "end": "1599500"
  },
  {
    "text": "but they're slower fast.",
    "start": "1599500",
    "end": "1600416"
  },
  {
    "text": "And then they're usually orders of magnitude",
    "start": "1600416",
    "end": "1601875"
  },
  {
    "text": "larger than even large sync discrepancies.",
    "start": "1602208",
    "end": "1604125"
  },
  {
    "text": "So I created this chart.",
    "start": "1605250",
    "end": "1606041"
  },
  {
    "text": "And you can kind of think of these like two implementations",
    "start": "1606375",
    "end": "1608208"
  },
  {
    "text": "of a server.",
    "start": "1608500",
    "end": "1609000"
  },
  {
    "text": "And this represents like client response time.",
    "start": "1609583",
    "end": "1613000"
  },
  {
    "text": "So I like make response to the server,",
    "start": "1613000",
    "end": "1614125"
  },
  {
    "text": "how long before it comes back.",
    "start": "1614125",
    "end": "1614916"
  },
  {
    "text": "So we have two implementations.",
    "start": "1615375",
    "end": "1616666"
  },
  {
    "text": "The green one is 10 times faster than the blue one.",
    "start": "1617000",
    "end": "1620208"
  },
  {
    "text": "And so on localhost, where there's no network delay,",
    "start": "1620583",
    "end": "1622166"
  },
  {
    "text": "there's a pretty big gap.",
    "start": "1622500",
    "end": "1623500"
  },
  {
    "text": "But as soon as you're looking at like 30 milliseconds,",
    "start": "1624208",
    "end": "1626083"
  },
  {
    "text": "this is like a nearby city,",
    "start": "1626083",
    "end": "1627166"
  },
  {
    "text": "you're already down to just 29%.",
    "start": "1627666",
    "end": "1629125"
  },
  {
    "text": "And if you're going across the globe to another continent,",
    "start": "1630000",
    "end": "1632125"
  },
  {
    "text": "you have 100 milliseconds plus,",
    "start": "1632583",
    "end": "1634000"
  },
  {
    "text": "which is down to less than 10%.",
    "start": "1634291",
    "end": "1635708"
  },
  {
    "text": "And this stuff is unavoidable at just speed of light.",
    "start": "1636708",
    "end": "1638583"
  },
  {
    "text": "Now, you might say that while the client times might not",
    "start": "1639791",
    "end": "1641958"
  },
  {
    "text": "be that different, still like my server can handle",
    "start": "1641958",
    "end": "1644250"
  },
  {
    "text": "the green one can handle 10 times the throughput.",
    "start": "1644583",
    "end": "1646208"
  },
  {
    "text": "And this is true.",
    "start": "1647000",
    "end": "1647791"
  },
  {
    "text": "But this is less of a concern in serverless apps,",
    "start": "1649416",
    "end": "1651875"
  },
  {
    "text": "which are a very, very popular way of running JavaScript",
    "start": "1652166",
    "end": "1654250"
  },
  {
    "text": "on the server these days.",
    "start": "1654250",
    "end": "1655041"
  },
  {
    "text": "The other thing that's really important to mention",
    "start": "1656250",
    "end": "1657541"
  },
  {
    "text": "is that Effect puts you on the path",
    "start": "1657958",
    "end": "1659166"
  },
  {
    "text": "to writing more performant async code by default.",
    "start": "1659166",
    "end": "1661666"
  },
  {
    "text": "And this can actually make up for the kind of smaller sync",
    "start": "1662166",
    "end": "1664750"
  },
  {
    "text": "performance losses you might see.",
    "start": "1664791",
    "end": "1666000"
  },
  {
    "text": "And this comes from stuff like structured concurrency",
    "start": "1666500",
    "end": "1668166"
  },
  {
    "text": "and proper interruption, where in Promised-land,",
    "start": "1668958",
    "end": "1670875"
  },
  {
    "text": "you might spawn just like way too many promises,",
    "start": "1671666",
    "end": "1673625"
  },
  {
    "text": "or you can drop a lot of promises,",
    "start": "1673625",
    "end": "1675041"
  },
  {
    "text": "which will still eat up execution time,",
    "start": "1675500",
    "end": "1677083"
  },
  {
    "text": "even though they'll never be consumed.",
    "start": "1677083",
    "end": "1678250"
  },
  {
    "text": "And I also talked a lot about primitives so far.",
    "start": "1679375",
    "end": "1681708"
  },
  {
    "text": "And using Effect means working with the right primitives",
    "start": "1681958",
    "end": "1684708"
  },
  {
    "text": "and the right abstraction from the start.",
    "start": "1684708",
    "end": "1686333"
  },
  {
    "text": "And it means you're not hacking together",
    "start": "1686416",
    "end": "1687625"
  },
  {
    "text": "your own worse, slower version",
    "start": "1687625",
    "end": "1689333"
  },
  {
    "text": "of Effect, which would obviously",
    "start": "1689333",
    "end": "1690291"
  },
  {
    "text": "be less performant.",
    "start": "1690458",
    "end": "1691500"
  },
  {
    "text": "And it also means that the really talented developers",
    "start": "1691750",
    "end": "1693500"
  },
  {
    "text": "on the Effect team can do these",
    "start": "1693500",
    "end": "1695500"
  },
  {
    "text": "low-level runtime optimizations",
    "start": "1695500",
    "end": "1697791"
  },
  {
    "text": "for you and ship you that over updates.",
    "start": "1698083",
    "end": "1699666"
  },
  {
    "text": "And so I've been told that effect 4.0 will have some small",
    "start": "1700166",
    "end": "1702375"
  },
  {
    "text": "performance improvements to look forward to,",
    "start": "1702375",
    "end": "1703958"
  },
  {
    "text": "that all the users",
    "start": "1704083",
    "end": "1705500"
  },
  {
    "text": "obviously, you didn't have to spend any time on that.",
    "start": "1706000",
    "end": "1707791"
  },
  {
    "text": "Now, you might notice I left out clustering",
    "start": "1710000",
    "end": "1712458"
  },
  {
    "text": "kind of like the big elephant in the room all the way",
    "start": "1712458",
    "end": "1714083"
  },
  {
    "text": "that complexity chart.",
    "start": "1715166",
    "end": "1716041"
  },
  {
    "text": "And clustering is really hard to get right.",
    "start": "1717625",
    "end": "1720416"
  },
  {
    "text": "But obviously, earlier, we saw Effect Cluster.",
    "start": "1721166",
    "end": "1723333"
  },
  {
    "text": "And Effect Cluster is really, really exciting.",
    "start": "1723875",
    "end": "1725291"
  },
  {
    "text": "Unfortunately, while I was working on this,",
    "start": "1725500",
    "end": "1727000"
  },
  {
    "text": "it just wasn't ready yet.",
    "start": "1727291",
    "end": "1728208"
  },
  {
    "text": "It was kind of in pre-alpha, which is not particularly",
    "start": "1728208",
    "end": "1730666"
  },
  {
    "text": "when you want to be using a library.",
    "start": "1730916",
    "end": "1732000"
  },
  {
    "text": "But once it's more stable, which now I think",
    "start": "1732500",
    "end": "1734250"
  },
  {
    "text": "alpha is stable enough, I'd really",
    "start": "1734583",
    "end": "1736750"
  },
  {
    "text": "love to try to get a Redis cluster-style API using",
    "start": "1736750",
    "end": "1741916"
  },
  {
    "text": "Effect Cluster with this project.",
    "start": "1741916",
    "end": "1743083"
  },
  {
    "text": "So finally, a quick recap for what we covered today.",
    "start": "1744208",
    "end": "1746541"
  },
  {
    "text": "We looked at Redis, which is a real-world app with kind",
    "start": "1746916",
    "end": "1749875"
  },
  {
    "text": "of advanced higher-level requirements.",
    "start": "1749875",
    "end": "1751333"
  },
  {
    "text": "So there's like expiration, async, networking,",
    "start": "1751750",
    "end": "1753875"
  },
  {
    "text": "transactions, persistence.",
    "start": "1754208",
    "end": "1755166"
  },
  {
    "text": "And we looked at how Effect's tools in practice really",
    "start": "1756333",
    "end": "1758666"
  },
  {
    "text": "give us a strong foundation to build apps that have to take",
    "start": "1758666",
    "end": "1761000"
  },
  {
    "text": "on these sorts of challenges.",
    "start": "1761000",
    "end": "1761875"
  },
  {
    "text": "We looked at a brief performance analysis",
    "start": "1763000",
    "end": "1764916"
  },
  {
    "text": "and ultimately why I don't think Effect's",
    "start": "1765791",
    "end": "1767416"
  },
  {
    "text": "very small performance penalty matters too much",
    "start": "1767916",
    "end": "1770166"
  },
  {
    "text": "for async-limited business code.",
    "start": "1770250",
    "end": "1771791"
  },
  {
    "text": "And finally, some future stuff to look forward",
    "start": "1772458",
    "end": "1773750"
  },
  {
    "text": "to with Cluster.",
    "start": "1773875",
    "end": "1774375"
  },
  {
    "text": "So if you're curious, all the",
    "start": "1774708",
    "end": "1776166"
  },
  {
    "text": "sources available on my GitHub,",
    "start": "1776166",
    "end": "1777333"
  },
  {
    "text": "there's a lot of stuff that I didn't get to talk about that",
    "start": "1777333",
    "end": "1779375"
  },
  {
    "text": "might be worth looking at.",
    "start": "1779375",
    "end": "1780250"
  },
  {
    "text": "And of course, you can find me",
    "start": "1781125",
    "end": "1782250"
  },
  {
    "text": "at Ethan Niser on everything.",
    "start": "1782250",
    "end": "1783666"
  },
  {
    "text": "It was really a pleasure to be",
    "start": "1783666",
    "end": "1785000"
  },
  {
    "text": "here to talk to you all today.",
    "start": "1785000",
    "end": "1785750"
  },
  {
    "text": "Thank you so much.",
    "start": "1786000",
    "end": "1786500"
  },
  {
    "text": "(audience applauds)",
    "start": "1788000",
    "end": "1789250"
  }
]