[
  {
    "text": "Welcome everybody back to our Effect Cluster Development sessions.",
    "start": "3900",
    "end": "9665"
  },
  {
    "text": "So I think the last time we met, we were still doing a lot of design work on cluster.",
    "start": "10500",
    "end": "16666"
  },
  {
    "text": "And since then, I've started to try to implement some of the things that we talked about.",
    "start": "16933",
    "end": "21400"
  },
  {
    "text": "And while I was doing that, it became increasingly clear that it was going to be more challenging to shoehorn what we",
    "start": "22133",
    "end": "30133"
  },
  {
    "text": "were chatting about into the existing cluster library than to potentially just try rewriting from scratch and borrowing",
    "start": "30133",
    "end": "37633"
  },
  {
    "text": "a lot of the ideas from our previous implementation along the way. So that's basically what I did. I started",
    "start": "37633",
    "end": "45066"
  },
  {
    "text": "this cluster rewrite branch, which I've started kind of like hacking on.",
    "start": "45066",
    "end": "51933"
  },
  {
    "text": "But basically, I moved everything from the old cluster into this cluster old",
    "start": "52666",
    "end": "58400"
  },
  {
    "text": "folder, and we have the existing cluster folder here. And if we take a look at source, I",
    "start": "58400",
    "end": "68166"
  },
  {
    "text": "already implemented a couple of different things which we can talk about. But yeah, I think that it would maybe be",
    "start": "68166",
    "end": "74633"
  },
  {
    "text": "a good place to start to talk about some of the things that I've already started implementing here.",
    "start": "74633",
    "end": "79599"
  },
  {
    "text": "So that's just one small thing, given that you don't use the mouse anyway, get",
    "start": "81066",
    "end": "87433"
  },
  {
    "text": "it out of the screen. So in the middle of the screen, it is. OK, sorry, I don't see it when it. So thank you.",
    "start": "87433",
    "end": "94699"
  },
  {
    "text": "Fine, you use the text editor with your keywords. So there's advantages that you can.",
    "start": "95033",
    "end": "100266"
  },
  {
    "text": "I'm just saying, I don't see it on my screen. My mouse goes away. But if it still shows up in the stream, definitely let me know.",
    "start": "100666",
    "end": "105599"
  },
  {
    "text": "Anyways, so one of the first things I did was in the previous cluster",
    "start": "106833",
    "end": "113099"
  },
  {
    "text": "implementation, like shard IDs, entity IDs, message IDs,",
    "start": "113099",
    "end": "117766"
  },
  {
    "text": "all of these were just kind of raw, like string and number types. So the first thing I did was I created branded types",
    "start": "119066",
    "end": "125099"
  },
  {
    "text": "for them to see how it felt. I'm not 100 percent sure that I'll stick",
    "start": "125099",
    "end": "130166"
  },
  {
    "text": "with this, but I thought it would be a good place to start to have branded types by default for now.",
    "start": "130166",
    "end": "136933"
  },
  {
    "text": "Just again, to make things a little bit more explicit. So I have this shard ID type, which is an",
    "start": "137466",
    "end": "143533"
  },
  {
    "text": "integer that we branded. And then not currently using this particular schema down here.",
    "start": "143533",
    "end": "150699"
  },
  {
    "text": "Can you use the class variants? Yes. How do I brand a class variant?",
    "start": "151333",
    "end": "159033"
  },
  {
    "text": "I think you can just do like export class shard ID extends schema dot int dot pipe.",
    "start": "160199",
    "end": "167732"
  },
  {
    "text": "If I recall correctly, Giulio made every schema. Classable.",
    "start": "168333",
    "end": "173800"
  },
  {
    "text": "It's not going to be the. Class shard ID. Let's try extends schema dot.",
    "start": "175833",
    "end": "181966"
  },
  {
    "text": "And given that we are rewriting everything, who cares? Schema dot int.",
    "start": "182199",
    "end": "187198"
  },
  {
    "text": "It should be dot int dot pipe. But pipe schema dot brand.",
    "start": "188800",
    "end": "196733"
  },
  {
    "text": "Oops. Shard ID.",
    "start": "197033",
    "end": "201733"
  },
  {
    "text": "That's cool. Giulio doing all of these very,",
    "start": "208466",
    "end": "213833"
  },
  {
    "text": "very cool things with schema.",
    "start": "213833",
    "end": "215000"
  },
  {
    "text": "And we should then access the type like which shard ID dot type type of shard ID dot type.",
    "start": "220500",
    "end": "226500"
  },
  {
    "text": "We need that since the class is already a type. Yes, because this is a number only.",
    "start": "227066",
    "end": "234400"
  },
  {
    "text": "Only the. Where ID equals 20. The equals type of shard ID dot.",
    "start": "235266",
    "end": "241633"
  },
  {
    "text": "Yeah, well, we can't do that.",
    "start": "243599",
    "end": "245066"
  },
  {
    "text": "We can do export namespace shard ID export declare namespace shard ID",
    "start": "251733",
    "end": "256932"
  },
  {
    "text": "And have a. Type.",
    "start": "259800",
    "end": "261866"
  },
  {
    "text": "Export type type type of shard ID dot type.",
    "start": "267400",
    "end": "274500"
  },
  {
    "text": "Yeah, I think that's that's it. Even though it's not very important because I mean, those",
    "start": "276300",
    "end": "282333"
  },
  {
    "text": "will be unaliased anyway.",
    "start": "282333",
    "end": "285000"
  },
  {
    "text": "Yeah, right now I'm not using this one here. But we might.",
    "start": "287500",
    "end": "291400"
  },
  {
    "text": "Actually, am I using it? I don't remember. But yeah, this is already very good.",
    "start": "293033",
    "end": "298432"
  },
  {
    "text": "Well, let's give the same treatment then to.",
    "start": "301366",
    "end": "304833"
  },
  {
    "text": "So I did the same thing with entity ID. I mean, I think we should like.",
    "start": "307500",
    "end": "313733"
  },
  {
    "text": "We should have a think in terms of.",
    "start": "315233",
    "end": "318199"
  },
  {
    "text": "Accessing that type. Is it too painful to do type off. And just access it locally because when",
    "start": "321066",
    "end": "329300"
  },
  {
    "text": "we decode and encode, it's not going to use the alias anyway.",
    "start": "329300",
    "end": "332233"
  },
  {
    "text": "So even though we define the type, it's not going to be used by",
    "start": "334599",
    "end": "339900"
  },
  {
    "text": "default uses the on aliased thing. So we need them to type it manually. If we need to type everything manually,",
    "start": "339900",
    "end": "347699"
  },
  {
    "text": "then I think your style is better because at least you have type and schema.",
    "start": "347933",
    "end": "355699"
  },
  {
    "text": "Using the same. The same name. Yeah, you don't get that",
    "start": "357000",
    "end": "362500"
  },
  {
    "text": "with the with the class. I think it'll become clear from usage.",
    "start": "362500",
    "end": "367033"
  },
  {
    "text": "Like I think we need to get to the point where we can like write up a small example. And then it'll become a little bit",
    "start": "368133",
    "end": "376333"
  },
  {
    "text": "clearer with usage, I feel like. Like I think our best option would be to",
    "start": "376333",
    "end": "383099"
  },
  {
    "text": "revert what what you've done in the shard ID to your initial.",
    "start": "383099",
    "end": "387433"
  },
  {
    "text": "Your initial thing and then with usage with you with usage we see.",
    "start": "388733",
    "end": "392500"
  },
  {
    "text": "All right, let's do that then.",
    "start": "393800",
    "end": "395332"
  },
  {
    "text": "All right, so we have shared ID. It's just a branded integer.",
    "start": "401533",
    "end": "405466"
  },
  {
    "text": "We also have entity ID, which is a branded non empty trimmed string.",
    "start": "406833",
    "end": "411833"
  },
  {
    "text": "And then we also have a message ID, which",
    "start": "413466",
    "end": "419533"
  },
  {
    "text": "is also a branded non empty string. And then entity type is also a branded",
    "start": "419533",
    "end": "425500"
  },
  {
    "text": "type because in our version, if folks recall, the well, we can",
    "start": "425500",
    "end": "435333"
  },
  {
    "text": "actually just look at it first. The first thing that we might be interested in is how pods in the cluster are addressed.",
    "start": "435333",
    "end": "440966"
  },
  {
    "text": "So we have this pod address type here that allows us to address",
    "start": "441633",
    "end": "446833"
  },
  {
    "text": "pods by their host import. And then similarly, the next logical",
    "start": "446833",
    "end": "453233"
  },
  {
    "text": "question is like, okay, we can address pods, but how do we actually address entities on those pods?",
    "start": "453233",
    "end": "458466"
  },
  {
    "text": "And for that, we have an entity address, which contains the shard ID, the entity",
    "start": "458466",
    "end": "464033"
  },
  {
    "text": "ID and the entity type that we're trying to address. Because if you if we think back to the previous stream where we like sketched",
    "start": "464033",
    "end": "470666"
  },
  {
    "text": "out what a single pod actually looks like on a given pod, you might have multiple shards.",
    "start": "470666",
    "end": "476199"
  },
  {
    "text": "And in those shards, you may have entities of the same type, but that have different IDs. So you have user with ID one two maybe",
    "start": "476533",
    "end": "484366"
  },
  {
    "text": "there's like a to do entity, whatever. So the idea here is we can now address",
    "start": "484366",
    "end": "491000"
  },
  {
    "text": "like entities using their shard ID, the entity ID and the entity type. And I actually like putting the entity",
    "start": "491000",
    "end": "497466"
  },
  {
    "text": "type first because it's the less specific.",
    "start": "497466",
    "end": "499833"
  },
  {
    "text": "So then. So we talked about pod",
    "start": "503166",
    "end": "509000"
  },
  {
    "text": "address, entity address. What else did I do? I re-added our entity type from the",
    "start": "509000",
    "end": "517399"
  },
  {
    "text": "existing cluster, which I renamed just like a few things. But essentially, an entity within our",
    "start": "517399",
    "end": "525033"
  },
  {
    "text": "cluster can be either just a standard entity, which exists in a single location on a pod.",
    "start": "525033",
    "end": "532233"
  },
  {
    "text": "Or it can be we had in the previous iteration of cluster, we called this. A entity, it was this data type was",
    "start": "532800",
    "end": "542433"
  },
  {
    "text": "called like a recipient type, and it was either a recipient type could be an",
    "start": "542433",
    "end": "548933"
  },
  {
    "text": "entity or it could be a topic. In the previous cluster implementation, I",
    "start": "548933",
    "end": "554032"
  },
  {
    "text": "changed the name to like entity and just made it a standard entity versus a cluster entity.",
    "start": "554033",
    "end": "559033"
  },
  {
    "text": "And cluster entities you can broadcast to, whereas standard entities you just message directly.",
    "start": "560733",
    "end": "566433"
  },
  {
    "text": "So the naming is like debatable, but I thought entity was a better name than",
    "start": "566500",
    "end": "573233"
  },
  {
    "text": "recipient type from like a usage perspective. Because when you actually like declare an",
    "start": "573233",
    "end": "579833"
  },
  {
    "text": "entity and its protocol, you're going to do something like, you can actually look",
    "start": "579833",
    "end": "585899"
  },
  {
    "text": "in the cluster node code example.",
    "start": "585899",
    "end": "587433"
  },
  {
    "text": "When you actually declare an entity, instead of doing this like recipient type dot make entity type or recipient type",
    "start": "593366",
    "end": "600633"
  },
  {
    "text": "dot make topic type, you would now do like entity dot standard. You would say like export const counter",
    "start": "600633",
    "end": "609566"
  },
  {
    "text": "entity equals new and see that standard.",
    "start": "609566",
    "end": "614433"
  },
  {
    "text": "The type would be counter and the schema would be counter message.",
    "start": "616733",
    "end": "622933"
  },
  {
    "text": "So just basically trying to like rename things to make them a little.",
    "start": "624500",
    "end": "629233"
  },
  {
    "text": "I don't know. What's the point of a cluster identity? I'm not sure.",
    "start": "630933",
    "end": "635633"
  },
  {
    "text": "I don't know yet. That was it's it's in the previous implementation. It's like it was called a",
    "start": "636633",
    "end": "642300"
  },
  {
    "text": "topic and that's the same like parlance that shardcake uses. I don't know what the",
    "start": "642300",
    "end": "647966"
  },
  {
    "text": "purpose of it is yet, honestly. But I think the idea is it's something that you can broadcast to like it's an",
    "start": "647966",
    "end": "654500"
  },
  {
    "text": "entity that lives on multiple pods that you can broadcast to. But I honestly don't know even from",
    "start": "654500",
    "end": "661133"
  },
  {
    "text": "looking at shardcake their docs don't make it clear. I left it there for now, but it's very",
    "start": "661133",
    "end": "667699"
  },
  {
    "text": "possible that I will take it out because it might not make sense. I was about to say if you are rewriting",
    "start": "667699",
    "end": "673033"
  },
  {
    "text": "from scratch, it might be best to just remove things that we don't understand and add them when they make sense.",
    "start": "673033",
    "end": "679433"
  },
  {
    "text": "Yeah, I mean, it's very possible. I'll end up taking this out because at the moment it doesn't make sense to me.",
    "start": "683000",
    "end": "688899"
  },
  {
    "text": "What I understood is that a topic type or what we're calling a clustered entity here is an entity that could live on",
    "start": "689966",
    "end": "696800"
  },
  {
    "text": "multiple pods that you can broadcast to because if we look at the previous cluster implementation.",
    "start": "696800",
    "end": "702433"
  },
  {
    "text": "When you create, when you use sharding to",
    "start": "703466",
    "end": "709033"
  },
  {
    "text": "create either a messenger to create a messenger that is addressing a single entity, but you can also use sharding to",
    "start": "709033",
    "end": "715966"
  },
  {
    "text": "create a broadcaster. I understand it from the point of",
    "start": "715966",
    "end": "722300"
  },
  {
    "text": "communication, not from the point of the entity itself. Yeah, I agree. I think",
    "start": "722300",
    "end": "727500"
  },
  {
    "text": "that it's not clear to me yet. Having a messenger that can broadcast to",
    "start": "727500",
    "end": "734933"
  },
  {
    "text": "all of the entities of the same type makes sense.",
    "start": "734933",
    "end": "739133"
  },
  {
    "text": "But when I create an entity, it has a single ID. So it has an identifier, it cannot leave in",
    "start": "740433",
    "end": "745532"
  },
  {
    "text": "multiple places the same one. So I think there's a mixture of concepts",
    "start": "745533",
    "end": "755399"
  },
  {
    "text": "like in shardcake, it probably refers to the messenger, not to the entity type.",
    "start": "755399",
    "end": "760800"
  },
  {
    "text": "So it's probably not an entity that can leave in multiple places. It's just a messenger that can target all the",
    "start": "761833",
    "end": "769333"
  },
  {
    "text": "entities of the same type. In shardcake, there are two, so there are",
    "start": "769333",
    "end": "778766"
  },
  {
    "text": "two recipient types. There's an entity type and a topic type.",
    "start": "778766",
    "end": "783500"
  },
  {
    "text": "And they also have the concept of a messenger where like you have either a messenger or a broadcaster. A messenger",
    "start": "784466",
    "end": "790500"
  },
  {
    "text": "addresses like an entity type, a broadcaster addresses a topic type. Yeah, but the topic type targets multiple",
    "start": "790500",
    "end": "797100"
  },
  {
    "text": "entities. It's not a different type of entity. an entity's link to a behavior.",
    "start": "797100",
    "end": "803833"
  },
  {
    "text": "Yes. So it's very confusing to have a cluster identity versus a standard identity. I don't.",
    "start": "804766",
    "end": "812266"
  },
  {
    "text": "Yeah, it's not clear to me either. And so I'll probably remove it, but I was just moving stuff over for now.",
    "start": "812766",
    "end": "817733"
  },
  {
    "text": "So I left that as is. The other thing I moved over pretty much as is was the message state type.",
    "start": "818899",
    "end": "824433"
  },
  {
    "text": "But we had discussed, I think this was offline, that we might want an additional",
    "start": "825466",
    "end": "831100"
  },
  {
    "text": "message state of like received here for decoding purposes when it comes out of the database. But again, I'm not I haven't had to use",
    "start": "831100",
    "end": "838833"
  },
  {
    "text": "this yet, so I'm not exactly sure if we'll need it. But what I do want to talk about now,",
    "start": "838833",
    "end": "844000"
  },
  {
    "text": "which I think is like a useful thing for us to discuss. First is what I've been working on for",
    "start": "844000",
    "end": "851833"
  },
  {
    "text": "mailbox storage. So we talked last time.",
    "start": "851833",
    "end": "856466"
  },
  {
    "text": "A little bit about how when when when a pod receives a message.",
    "start": "857933",
    "end": "863966"
  },
  {
    "text": "That message is wrapped up into an envelope, which contains other metadata about the entity that we're addressing on",
    "start": "864866",
    "end": "872233"
  },
  {
    "text": "that particular pod. And we had talked about the.",
    "start": "872233",
    "end": "880733"
  },
  {
    "text": "Like how we wanted this to work. Basically, the idea that we had had was that the mailbox storage would be when a",
    "start": "882633",
    "end": "892500"
  },
  {
    "text": "pod receives a message. The first thing it would try to do is persist that message into mailbox storage.",
    "start": "892500",
    "end": "899300"
  },
  {
    "text": "If the message gets persisted successfully, then we know that that",
    "start": "899300",
    "end": "904633"
  },
  {
    "text": "message is not a duplicate. It's a new message. And the.",
    "start": "904633",
    "end": "909665"
  },
  {
    "text": "The pod can then forward that message along to the entity that's being addressed by that envelope.",
    "start": "910133",
    "end": "916800"
  },
  {
    "text": "So maybe even better, first thing to take a look at would be this envelope type,",
    "start": "917166",
    "end": "923399"
  },
  {
    "text": "because I'm really I'm not satisfied with this type. I wasn't satisfied with it in the",
    "start": "923399",
    "end": "929199"
  },
  {
    "text": "previous iteration that we had because I think it was difficult to work with. I still think it can be improved. So",
    "start": "929199",
    "end": "935966"
  },
  {
    "text": "maybe let's take a look at this. So let's take a look at this and see if we can make this a little better.",
    "start": "935966",
    "end": "945133"
  },
  {
    "text": "So right now, the envelope.",
    "start": "945133",
    "end": "949466"
  },
  {
    "text": "As I mentioned, is a wrapper that contains all the information we need to address an entity and then also contains",
    "start": "951199",
    "end": "958399"
  },
  {
    "text": "information about the message that we're sending the message ID and the body of",
    "start": "958399",
    "end": "964600"
  },
  {
    "text": "that message, which is just like whatever we're we're actually sending.",
    "start": "964600",
    "end": "968066"
  },
  {
    "text": "But working with envelope at the moment is difficult because. How do we know?",
    "start": "969800",
    "end": "975333"
  },
  {
    "text": "When a pod receives an envelope. We know how to address the entity that it",
    "start": "976066",
    "end": "981899"
  },
  {
    "text": "should go to, but then like decoding the message becomes somewhat annoying.",
    "start": "981899",
    "end": "988166"
  },
  {
    "text": "And so we can talk a little bit about that. But first. On initial glance, does this envelope",
    "start": "988166",
    "end": "993833"
  },
  {
    "text": "type look like what you had envisioned when we had previously spoken about it? Basically.",
    "start": "993833",
    "end": "998833"
  },
  {
    "text": "Having the address for the entity itself and then having the information about the message that we need to be able to address it.",
    "start": "1000566",
    "end": "1006100"
  },
  {
    "text": "Yeah, I think so. I don't quite get why this has to be a schema. It has to be serializable, but.",
    "start": "1009033",
    "end": "1014699"
  },
  {
    "text": "Well, we had said the envelope was the thing going over the wire, right? Between pods.",
    "start": "1015733",
    "end": "1021399"
  },
  {
    "text": "Like the envelope was the basically like the packet of communication that's going to be serialized to go over the wire",
    "start": "1024333",
    "end": "1029500"
  },
  {
    "text": "between pods. And then that's kind of the first step of like getting the message out is like to serializing the envelope",
    "start": "1029500",
    "end": "1037600"
  },
  {
    "text": "so that we get that information. Yeah, I kind of meant the runtime representation, not not",
    "start": "1037600",
    "end": "1043266"
  },
  {
    "text": "really the thing that travels. Point is we have a serialized message inside here. So if we then serialize the",
    "start": "1043266",
    "end": "1050433"
  },
  {
    "text": "envelope too we have twice serialization, which I'm not sure it makes sense.",
    "start": "1050433",
    "end": "1055033"
  },
  {
    "text": "Right. And that actually. Was still a problem with the previous.",
    "start": "1055666",
    "end": "1060766"
  },
  {
    "text": "Envelope implementation, we actually had a triple serialization problem there because we had the runtime representation",
    "start": "1062233",
    "end": "1068699"
  },
  {
    "text": "that had the type information. Oh, hey, Mattia. We had.",
    "start": "1068699",
    "end": "1072866"
  },
  {
    "text": "Yeah, Mattia is in the chat. Yeah, the envelope is a serialized packet. It could be omitted and not be a",
    "start": "1075333",
    "end": "1081333"
  },
  {
    "text": "schema of it then would require. Yeah, so I'm still not convinced that this is the right like abstraction because it it's",
    "start": "1081333",
    "end": "1088398"
  },
  {
    "text": "difficult to work with. I think. We need something that represents the",
    "start": "1088399",
    "end": "1094466"
  },
  {
    "text": "message that travels over the wire and gets persisted into the mailbox storage",
    "start": "1094466",
    "end": "1100232"
  },
  {
    "text": "and then we need a way to take like. The idea being that like pod receives a",
    "start": "1100233",
    "end": "1107933"
  },
  {
    "text": "message message attempts to put that message into the mailbox storage, right?",
    "start": "1107933",
    "end": "1113132"
  },
  {
    "text": "If it successfully does it, then we should get a message back from mailbox",
    "start": "1113766",
    "end": "1120600"
  },
  {
    "text": "storage, right? We should get like metadata about that message. So like in this implementation here,",
    "start": "1120600",
    "end": "1126565"
  },
  {
    "text": "sequence number and all right, we get we get here what I've called like a mailbox storage entry.",
    "start": "1126833",
    "end": "1131699"
  },
  {
    "text": "It's like basically represents what we have in the table. But the message body here is still like",
    "start": "1132733",
    "end": "1139699"
  },
  {
    "text": "something that we don't know. It's like an unknown structure and technically the entry it's a string, but we",
    "start": "1139699",
    "end": "1145166"
  },
  {
    "text": "left it as unknown for now. So this is kind of like the first step.",
    "start": "1145166",
    "end": "1150733"
  },
  {
    "text": "The pod receives this envelope. We attempt to put it into mailbox storage. This should not be because it should",
    "start": "1150733",
    "end": "1157566"
  },
  {
    "text": "really be like some error type, but for now I left it as an option and.",
    "start": "1157566",
    "end": "1162766"
  },
  {
    "text": "Then if we successfully get an entry back, we know that mailbox storage persisted that message, which means the",
    "start": "1164300",
    "end": "1171066"
  },
  {
    "text": "message was not seen before, which means that we can then take that message and forward it on to the queue of the entity",
    "start": "1171066",
    "end": "1177566"
  },
  {
    "text": "like to the actual mailbox of the entity that we need. So what I'd really like to talk about like in granular terms now is like how do",
    "start": "1177566",
    "end": "1184966"
  },
  {
    "text": "we represent all these types because envelope is still difficult to work with. I think we can find a better way.",
    "start": "1184966",
    "end": "1190199"
  },
  {
    "text": "And then we need to talk about like, okay, we get an envelope and we need to serialize it into when we get an envelope",
    "start": "1190800",
    "end": "1198199"
  },
  {
    "text": "and we need to persist the message, which I already have some code. We can look at like from mailbox storage.",
    "start": "1198199",
    "end": "1204066"
  },
  {
    "text": "And then assuming we successfully persist it and then we need to forward it onto the entity, how can we",
    "start": "1205366",
    "end": "1211233"
  },
  {
    "text": "basically give the entity the. Ideally like the message itself.",
    "start": "1211233",
    "end": "1216333"
  },
  {
    "text": "Like or I mean, because the entity is the thing that knows how to Deserialize the message, right? Like you",
    "start": "1217366",
    "end": "1224833"
  },
  {
    "text": "might have multiple entities on. On that pod, right? The entity is the",
    "start": "1224833",
    "end": "1230799"
  },
  {
    "text": "only thing that has the protocol for that message that knows how to like actually take it and decode it.",
    "start": "1230800",
    "end": "1235600"
  },
  {
    "text": "The pod doesn't know how to do that. The entity does. So we have to talk about that piece as well. But maybe we can start with we receive a message over the",
    "start": "1236633",
    "end": "1243800"
  },
  {
    "text": "wire. What does that look like? Like is envelope the right abstraction or not? And then we put that into mailbox",
    "start": "1243800",
    "end": "1249800"
  },
  {
    "text": "storage. I think that's like a good place to start. Maybe. I mean, envelope is just a pair of two",
    "start": "1249800",
    "end": "1255366"
  },
  {
    "text": "things. So either we have a type for that or we just have two things address and message.",
    "start": "1255366",
    "end": "1261600"
  },
  {
    "text": "I don't quite see these. Well, what makes more sense? Packaging it",
    "start": "1262633",
    "end": "1268899"
  },
  {
    "text": "up, making it a serializable thing or. Either I would start by saying, why do",
    "start": "1268899",
    "end": "1276799"
  },
  {
    "text": "you think it's hard to work with that? What problem does it generate? Well, the problem really happens after",
    "start": "1276800",
    "end": "1284866"
  },
  {
    "text": "we've tried to persist it. Like right now, working with envelope is fine up until the point we get an",
    "start": "1284866",
    "end": "1290600"
  },
  {
    "text": "entry back from mailbox storage. But when we get an entry back from mailbox storage, the envelope is gone.",
    "start": "1290600",
    "end": "1297266"
  },
  {
    "text": "There's no longer an envelope. True. So.",
    "start": "1297866",
    "end": "1302266"
  },
  {
    "text": "So maybe, OK, let's take a look at mailbox storage, the actual code. So.",
    "start": "1303833",
    "end": "1309699"
  },
  {
    "text": "Like the envelope is the input that procedure, not the output. Right. So I've got a some code here to",
    "start": "1311366",
    "end": "1321299"
  },
  {
    "text": "actually create the mailbox storage. I think having multiple implementations would be useful, like especially if",
    "start": "1321300",
    "end": "1328366"
  },
  {
    "text": "you're trying to test like having a memory implementation would be really useful if you have a single pod and you just want to test having memory",
    "start": "1328366",
    "end": "1334500"
  },
  {
    "text": "implementations. All of these would be good. I need to be one in the browser.",
    "start": "1334500",
    "end": "1338666"
  },
  {
    "text": "Exactly. So make this make SQL one creates a is a constructor for mailbox",
    "start": "1340033",
    "end": "1345066"
  },
  {
    "text": "storage that relies on a SQL client, basically. And I wrote this in such a way",
    "start": "1345066",
    "end": "1351733"
  },
  {
    "text": "that hopefully it's dialect. I do a good enough job with the dialects to handle.",
    "start": "1351733",
    "end": "1356966"
  },
  {
    "text": "I know that this works in my SQL because I've tested it against a live database, but I don't know about other databases. We definitely need like tests, obviously.",
    "start": "1357500",
    "end": "1363632"
  },
  {
    "text": "But. This. This.",
    "start": "1364866",
    "end": "1370133"
  },
  {
    "text": "So the first thing we Why are we using on dialect? Because my SQL.",
    "start": "1370800",
    "end": "1376033"
  },
  {
    "text": "OK. We show you the dialect independent one and then I'll show you why we need on dialect.",
    "start": "1376466",
    "end": "1381066"
  },
  {
    "text": "When we insert into the mailbox table. We're doing an insert select. We've",
    "start": "1383633",
    "end": "1390833"
  },
  {
    "text": "talked about this query before, but we're basically doing an insert select so that we can filter out",
    "start": "1390833",
    "end": "1396699"
  },
  {
    "text": "duplicate messages. Right. And we can also.",
    "start": "1396699",
    "end": "1400966"
  },
  {
    "text": "Use coalesce to increment the mailbox, the message sequence number if it's there, otherwise",
    "start": "1402633",
    "end": "1407666"
  },
  {
    "text": "defaulted to zero. Right. The point the problem that we're solving",
    "start": "1407666",
    "end": "1413699"
  },
  {
    "text": "with on dialect is basically returning the information from the query. So using",
    "start": "1413699",
    "end": "1419566"
  },
  {
    "text": "a returning to get the information back for the mailbox entry, which is not supported in my SQL.",
    "start": "1419566",
    "end": "1424398"
  },
  {
    "text": "So in the my everything else, every other dialect falls into this or else category because I'm I don't actually know about",
    "start": "1427566",
    "end": "1435000"
  },
  {
    "text": "my SQL server or SQL server. But I know Postgres and SQLite the other",
    "start": "1435000",
    "end": "1441533"
  },
  {
    "text": "two dialects that we support with our SQL clients do support returning.",
    "start": "1441533",
    "end": "1445800"
  },
  {
    "text": "So for now I had to write a separate implementation for my SQL where we do the insert first and I added this new raw",
    "start": "1446800",
    "end": "1453866"
  },
  {
    "text": "helper to all of our SQL the statement type in SQL.",
    "start": "1453866",
    "end": "1459000"
  },
  {
    "text": "In effect SQL. So all the SQL clients support this like raw. Type helper on",
    "start": "1460233",
    "end": "1467633"
  },
  {
    "text": "statements, which allows you to get. In the previous implementation when you'd",
    "start": "1467633",
    "end": "1473500"
  },
  {
    "text": "run it or in the current implementation when you run a statement. If it it does a little bit of filtering",
    "start": "1473500",
    "end": "1480766"
  },
  {
    "text": "to get the rows back. So if you're not returning an array, you essentially get an empty set of rows.",
    "start": "1480766",
    "end": "1486366"
  },
  {
    "text": "But in my with my SQL too. When you do an insert statement, you get",
    "start": "1487100",
    "end": "1492533"
  },
  {
    "text": "metadata back about what actually happened during that insert since it didn't it it doesn't actually support",
    "start": "1492533",
    "end": "1498666"
  },
  {
    "text": "returning, but it does give you metadata back. And that metadata is called a result set",
    "start": "1498666",
    "end": "1504366"
  },
  {
    "text": "header. One of the things in that result set header is the number of affected rows by the insert statement.",
    "start": "1504366",
    "end": "1509866"
  },
  {
    "text": "So using raw you actually get the raw response back from that SQL client. So raw is like an unknown.",
    "start": "1510600",
    "end": "1517033"
  },
  {
    "text": "Has an unknown type here because you don't know what you're getting back. It's literally the raw result that happens",
    "start": "1518533",
    "end": "1525899"
  },
  {
    "text": "when you actually run that SQL client, whether it's my SQL two or SQL light or whatever against the database.",
    "start": "1525899",
    "end": "1531800"
  },
  {
    "text": "But what's useful about this is now I can actually look at the number of affected rows and decide whether or not I need I",
    "start": "1532033",
    "end": "1538233"
  },
  {
    "text": "can run my select statement. So I try to run my insert query here to",
    "start": "1538233",
    "end": "1543566"
  },
  {
    "text": "do the insert of the message into the database. If the number of affected rows is greater than zero, then I actually try",
    "start": "1543566",
    "end": "1549733"
  },
  {
    "text": "to select it. Otherwise I get a give back an empty array. I'm wondering if we can somehow forward",
    "start": "1549733",
    "end": "1560000"
  },
  {
    "text": "the two queries at once and make the second conditional because this way we",
    "start": "1560000",
    "end": "1565333"
  },
  {
    "text": "have a full network round trip to insert the message, which would be a lot more slow.",
    "start": "1565333",
    "end": "1571266"
  },
  {
    "text": "I mean, we could probably do this with a... I'm going to say this these words and",
    "start": "1571866",
    "end": "1578833"
  },
  {
    "text": "then I'm going to regret them. We could do this with like a stored procedure in mySQL",
    "start": "1578833",
    "end": "1582766"
  },
  {
    "text": "But I don't I don't I even the words coming out of my mouth don't feel right. So let's not do that.",
    "start": "1585466",
    "end": "1590566"
  },
  {
    "text": "I don't know how we would do this without doing two network round trips with MySQL Or even a storage procedure.",
    "start": "1590866",
    "end": "1596766"
  },
  {
    "text": "No, no, no, no. If we're not doing it, that's gross. This has the first",
    "start": "1597399",
    "end": "1603266"
  },
  {
    "text": "network round trip to insert. They reach the response and has a second network round trip to fetch the thing.",
    "start": "1603266",
    "end": "1610632"
  },
  {
    "text": "That's two times back and forth from the network. That's pretty intensive for a single message.",
    "start": "1610633",
    "end": "1616899"
  },
  {
    "text": "I mean, it is. That's the problem with I mean.",
    "start": "1617899",
    "end": "1621966"
  },
  {
    "text": "Either we do something dirty like a stored procedure or.",
    "start": "1623533",
    "end": "1628132"
  },
  {
    "text": "We make it known in the documentation that like, you know, you might not have as good performance with MySQL than",
    "start": "1629533",
    "end": "1636100"
  },
  {
    "text": "you would with like Postgres or SQLite or something like that. Well.",
    "start": "1636100",
    "end": "1640733"
  },
  {
    "text": "Optimizing for MySQL sort of makes sense because.",
    "start": "1642066",
    "end": "1646899"
  },
  {
    "text": "If we target clustered environments. Postgres is really not great at",
    "start": "1647933",
    "end": "1654333"
  },
  {
    "text": "clustering in the sense that every connection to Postgres is extremely expensive.",
    "start": "1654333",
    "end": "1659266"
  },
  {
    "text": "And MySQL is much cheaper in that terrible database otherwise.",
    "start": "1661166",
    "end": "1667000"
  },
  {
    "text": "But yeah, I mean, Postgres is is the real deal when when talking about SQL.",
    "start": "1668300",
    "end": "1674733"
  },
  {
    "text": "But the issue is scaling Postgres where you then need like bouncers on top",
    "start": "1674733",
    "end": "1681533"
  },
  {
    "text": "that do connection pooling and it's much more much more more complex.",
    "start": "1681533",
    "end": "1687533"
  },
  {
    "text": "Yeah. If you use MySQL, then you have even",
    "start": "1688233",
    "end": "1693699"
  },
  {
    "text": "stuff like Vitess, which does insane.",
    "start": "1693699",
    "end": "1698065"
  },
  {
    "text": "Sharding plus scalability of MySQL systems, which is what, for",
    "start": "1699166",
    "end": "1704933"
  },
  {
    "text": "example, is used behind the scenes in planetscale and those serverless",
    "start": "1704933",
    "end": "1710066"
  },
  {
    "text": "providers for for MySQL So I do see like if we think a normal",
    "start": "1710066",
    "end": "1715533"
  },
  {
    "text": "target to deploy this beast, you would have like a database coming from planet",
    "start": "1715533",
    "end": "1720933"
  },
  {
    "text": "scale and you will have some persistent processes coming from, for example,",
    "start": "1720933",
    "end": "1726033"
  },
  {
    "text": "FLY.IO in a more long term future, you might",
    "start": "1726133",
    "end": "1732565"
  },
  {
    "text": "have everything inside an effectful cloud if it ever exists. But still you have you need",
    "start": "1732566",
    "end": "1740533"
  },
  {
    "text": "a database that can support. Yeah, a growing amount of connections and",
    "start": "1740533",
    "end": "1746233"
  },
  {
    "text": "and usually you get you get easily on MySQL Now you can also get a Postgres with neon",
    "start": "1746233",
    "end": "1752333"
  },
  {
    "text": "with other with other stuff, but the scalability of that is more is more limited.",
    "start": "1752333",
    "end": "1757799"
  },
  {
    "text": "So my point being trying to optimize for",
    "start": "1757899",
    "end": "1764133"
  },
  {
    "text": "Postgres, but we should not ignore MySQL it is equally important.",
    "start": "1764133",
    "end": "1769866"
  },
  {
    "text": "Oh, yeah, we start with a Postgres at the beginning just because it's a better",
    "start": "1770899",
    "end": "1776033"
  },
  {
    "text": "database, but at some point I've in my previous life, I had to actually move",
    "start": "1776033",
    "end": "1781766"
  },
  {
    "text": "from from Postgres to MySQL due to performance at scale.",
    "start": "1781766",
    "end": "1786833"
  },
  {
    "text": "I mean, we were hitting one terabyte of memory That was a bit too much.",
    "start": "1787199",
    "end": "1792066"
  },
  {
    "text": "The other thing like I mean, this is getting a little bit out of scope of like this particular discussion. Maybe not. But like the other thing I had",
    "start": "1793500",
    "end": "1800033"
  },
  {
    "text": "been thinking about is migrations and like if we want to manage a stored",
    "start": "1800033",
    "end": "1806633"
  },
  {
    "text": "procedure for MySQL specifically, I think it would be possible. I can look into it as like an option",
    "start": "1806633",
    "end": "1813166"
  },
  {
    "text": "here, but for migrations, I was actually thinking it would be a really nice user",
    "start": "1813166",
    "end": "1818199"
  },
  {
    "text": "experience if we did something like I don't know. Have you ever used the Alembic like like it's in Python.",
    "start": "1818199",
    "end": "1826398"
  },
  {
    "text": "Yeah, of course. Yeah, I really like I mean, I think that the experience there is nice.",
    "start": "1826899",
    "end": "1833166"
  },
  {
    "text": "So for like for things that use of Limbic under the hood, for example, like if",
    "start": "1833166",
    "end": "1838733"
  },
  {
    "text": "anybody's ever deployed airflow into like an environment or like trying",
    "start": "1838733",
    "end": "1844566"
  },
  {
    "text": "to think of like another one. There are plenty of things that use Alembic under the hood.",
    "start": "1844566",
    "end": "1850366"
  },
  {
    "text": "But what's nice is that we could probably do something similar with Effect where",
    "start": "1851066",
    "end": "1857632"
  },
  {
    "text": "migrations are not necessarily persisted to the file system with the sequel client, but like we have like a table",
    "start": "1857633",
    "end": "1864166"
  },
  {
    "text": "that we write to our sequel database that allows us to basically cleanly migrate between like",
    "start": "1864166",
    "end": "1873033"
  },
  {
    "text": "In Alembic you'd have like a version number for the schema that you're applying and you can",
    "start": "1873033",
    "end": "1878500"
  },
  {
    "text": "up and down grade the schemas with with that. So like the reason I'm bringing this up",
    "start": "1878500",
    "end": "1885533"
  },
  {
    "text": "is because we could potentially support a stored procedure if we manage like migrations that way.",
    "start": "1885533",
    "end": "1891466"
  },
  {
    "text": "I understand from a user perspective if you want to use the database for anything else, but we are only requiring a single",
    "start": "1896366",
    "end": "1906399"
  },
  {
    "text": "table in that database, which is the the mailbox table.",
    "start": "1906399",
    "end": "1910866"
  },
  {
    "text": "Yes, yes and no, because technically, we also have other cluster storage you don't I separate I kept them separate because",
    "start": "1911899",
    "end": "1919100"
  },
  {
    "text": "like you may want sequel for your mailbox storage. And maybe you want like Redis for your",
    "start": "1919100",
    "end": "1926333"
  },
  {
    "text": "shard assignments and things like that, but like in theory, they're",
    "start": "1926333",
    "end": "1932533"
  },
  {
    "text": "two different things though. Right, but that's what I'm saying. Like I kept them separate for now, but in theory, like you could use the same",
    "start": "1932533",
    "end": "1938733"
  },
  {
    "text": "database for your regular storage, which is where you would do things like your shard assignments and like your pod",
    "start": "1938733",
    "end": "1945866"
  },
  {
    "text": "assignments, things like that. But I do think the cluster environment",
    "start": "1945866",
    "end": "1953166"
  },
  {
    "text": "itself could manage the database. Yeah, yeah, yeah.",
    "start": "1953166",
    "end": "1958366"
  },
  {
    "text": "So instead of the user running the migration, which would be what you do with alembic.",
    "start": "1958366",
    "end": "1962632"
  },
  {
    "text": "You'd have the cluster. Well, no, I manage. I was thinking I was thinking more about",
    "start": "1964899",
    "end": "1971300"
  },
  {
    "text": "how like software like airflow uses alembic where you don't actually run the migration.",
    "start": "1971300",
    "end": "1975866"
  },
  {
    "text": "Okay, got it. You have the ability to because the airflow like exposes that via their CLI and things like that you can migrate",
    "start": "1976899",
    "end": "1982866"
  },
  {
    "text": "between different versions, but you essentially give airflow database.",
    "start": "1982866",
    "end": "1987366"
  },
  {
    "text": "Even if it's like within like, you know, your my sequel cluster or your postgres, whatever, you may have other databases",
    "start": "1988366",
    "end": "1994066"
  },
  {
    "text": "running there, but like you give it a database and it manages it for you like it, you know, migrates up",
    "start": "1994066",
    "end": "2000333"
  },
  {
    "text": "and down as it needs to. It'll give you error messages if migrations fail, etc. And like that experience is what I was",
    "start": "2000333",
    "end": "2006632"
  },
  {
    "text": "kind of thinking would be nice with cluster is like we you give cluster a database and it manages it for you.",
    "start": "2006633",
    "end": "2011966"
  },
  {
    "text": "Whether you use it for your other cluster storage in addition to mailbox storage is",
    "start": "2013366",
    "end": "2018399"
  },
  {
    "text": "like your prerogative. But anyway, I can look into.",
    "start": "2018399",
    "end": "2023665"
  },
  {
    "text": "I think we can kind of have this discussion of the later point because first we make it work.",
    "start": "2023933",
    "end": "2031733"
  },
  {
    "text": "Yeah, we make it efficient. And then we make user experience very nice because the I think that that has to",
    "start": "2032399",
    "end": "2039533"
  },
  {
    "text": "be in between one and two. Yeah, but I think I think for now we can",
    "start": "2039533",
    "end": "2045966"
  },
  {
    "text": "go with this just so that we have something to test with. And then I can start looking into as like",
    "start": "2045966",
    "end": "2052166"
  },
  {
    "text": "a performance optimization and like optimizing around the my sequel case, I can start looking into like what it would",
    "start": "2052166",
    "end": "2058765"
  },
  {
    "text": "take to write a stored procedure to get like this sort of information out whether or not that would",
    "start": "2058766",
    "end": "2063898"
  },
  {
    "text": "actually make sense and whatnot. But for now, this actually works reasonably well, aside from the fact that",
    "start": "2063899",
    "end": "2070466"
  },
  {
    "text": "it requires two full network round trips, which obviously is not efficient, but. So this this is basically the",
    "start": "2070466",
    "end": "2079966"
  },
  {
    "text": "sequel that does the inserting. And like I said, I've tested this against a my sequel database I was running just",
    "start": "2079966",
    "end": "2086132"
  },
  {
    "text": "to see like if the query behaves the way we expect it to. And it does. It actually works pretty",
    "start": "2086133",
    "end": "2091333"
  },
  {
    "text": "nice in terms of like, you know, incrementing the message sequence number when we want it to.",
    "start": "2091333",
    "end": "2096533"
  },
  {
    "text": "Yeah, and then the other things that I have in here, so we have this like save",
    "start": "2101899",
    "end": "2107566"
  },
  {
    "text": "message query, right, which. Is the thing that actually gets the",
    "start": "2107566",
    "end": "2113266"
  },
  {
    "text": "envelope and this is the part that I have not integrated into sharding it, but I",
    "start": "2113266",
    "end": "2118733"
  },
  {
    "text": "think once I start integrating it into the sharding service, it'll probably become clear like how I would instead use",
    "start": "2118733",
    "end": "2124766"
  },
  {
    "text": "the entry instead of like. The envelope. But anyways.",
    "start": "2124766",
    "end": "2129966"
  },
  {
    "text": "When we save a message. We do the insert with all of these like",
    "start": "2131966",
    "end": "2137166"
  },
  {
    "text": "things, so we actually run the query I showed you above. Obviously, there will be a better error",
    "start": "2137166",
    "end": "2143766"
  },
  {
    "text": "message in the future, maybe. Right now, I'm just dying, but.",
    "start": "2143766",
    "end": "2148132"
  },
  {
    "text": "The other thing I wanted to show you was updating just just just one. One idea.",
    "start": "2149899",
    "end": "2155866"
  },
  {
    "text": "Entities are registered on the pot. Okay, so we have a registry.",
    "start": "2157866",
    "end": "2163433"
  },
  {
    "text": "Of entities. Right. In theory, the mailbox storage.",
    "start": "2164899",
    "end": "2169633"
  },
  {
    "text": "Could fetch the entity type, get the get the protocol message and actually",
    "start": "2170733",
    "end": "2176533"
  },
  {
    "text": "validate the thing because there is an edge case here. Edge case is.",
    "start": "2176533",
    "end": "2181899"
  },
  {
    "text": "Maybe even a security vulnerability. A malicious actor could.",
    "start": "2183933",
    "end": "2189000"
  },
  {
    "text": "Send a valid. A valid looking envelope. With a message that cannot be",
    "start": "2190333",
    "end": "2197066"
  },
  {
    "text": "deserialized from the entity. So you would save an invalid message because there's no validation happening.",
    "start": "2197066",
    "end": "2204033"
  },
  {
    "text": "This point we receive a serialized structure. We save the serialized structure.",
    "start": "2204899",
    "end": "2209265"
  },
  {
    "text": "It would be very nice if this piece of the code does the decoding checks that",
    "start": "2210300",
    "end": "2215765"
  },
  {
    "text": "everything is right, then saves the encoded version. That already received. There's no point like decoding getting",
    "start": "2215766",
    "end": "2223366"
  },
  {
    "text": "coding again, but then it returns an entry of a rather than so an entry with",
    "start": "2223366",
    "end": "2229766"
  },
  {
    "text": "the serialized message in it. Something like could be so receive message from wire.",
    "start": "2229766",
    "end": "2238599"
  },
  {
    "text": "To de serialize serialized based on the",
    "start": "2239899",
    "end": "2246132"
  },
  {
    "text": "based on the entity type and the entity ID in the registry. Get the protocol.",
    "start": "2246133",
    "end": "2250666"
  },
  {
    "text": "Right, so de serialize and validate the message to obtain. Or sorry.",
    "start": "2252033",
    "end": "2257266"
  },
  {
    "text": "This would have to de serialize the message. To de serialize the message, we need to",
    "start": "2261966",
    "end": "2267466"
  },
  {
    "text": "scheme for the message. No, we don't. We need to. Sorry, this is to de serialize the envelope rather.",
    "start": "2267466",
    "end": "2272633"
  },
  {
    "text": "We have the envelope, so I'm de serialize is the wrong word used. Maybe use envelope to fetch the entity.",
    "start": "2272633",
    "end": "2281965"
  },
  {
    "text": "The addressed. The addressed entity. Three would be.",
    "start": "2285666",
    "end": "2290566"
  },
  {
    "text": "Validate. You really need the entity type, basically, not the not the instance. Then in that case, we",
    "start": "2292533",
    "end": "2299399"
  },
  {
    "text": "just need the entity manager. We don't because the entity manager maps to a type basically so like and then that",
    "start": "2299399",
    "end": "2305399"
  },
  {
    "text": "entity manager actually manages. All the types for an entity. So use the envelope to fetch the",
    "start": "2305399",
    "end": "2313133"
  },
  {
    "text": "addressed to fetch the associated entity manager. Then that entity manager can be used to",
    "start": "2313133",
    "end": "2320966"
  },
  {
    "text": "essentially validate the protocol. Right. De serialize the message, validate the protocol.",
    "start": "2320966",
    "end": "2326133"
  },
  {
    "text": "Use the entity manager to de serialize the message. And slash validate protocol. Because de serializing decoding the",
    "start": "2327466",
    "end": "2339033"
  },
  {
    "text": "message will essentially validate the protocol.",
    "start": "2339033",
    "end": "2342633"
  },
  {
    "text": "If successful, then persist.",
    "start": "2344266",
    "end": "2349066"
  },
  {
    "text": "The message to storage storage.",
    "start": "2350833",
    "end": "2354233"
  },
  {
    "text": "Right. That's actually a very tight entry. So that's which",
    "start": "2357566",
    "end": "2362932"
  },
  {
    "text": "contains the real message. Return a typed.",
    "start": "2362933",
    "end": "2367166"
  },
  {
    "text": "Entry which contains the message. Yeah, this is actually a much better.",
    "start": "2369899",
    "end": "2375066"
  },
  {
    "text": "This is a very, very good point. Actually, let me actually write that in here.",
    "start": "2375899",
    "end": "2379699"
  },
  {
    "text": "Johannes in these cases would say I'm known for good points.",
    "start": "2385899",
    "end": "2389833"
  },
  {
    "text": "A potential security vulnerability. With the with the current implementation.",
    "start": "2392333",
    "end": "2398533"
  },
  {
    "text": "Is if I just want to keep track of this. If a malicious",
    "start": "2400000",
    "end": "2404866"
  },
  {
    "text": "Actor writes a valid.",
    "start": "2405199",
    "end": "2410800"
  },
  {
    "text": "Issues a request with a valid looking envelope.",
    "start": "2414899",
    "end": "2421500"
  },
  {
    "text": "But. Like an invalid message or",
    "start": "2423533",
    "end": "2430533"
  },
  {
    "text": "but with an invalid message.",
    "start": "2430533",
    "end": "2433899"
  },
  {
    "text": "In this case we would end up persisting.",
    "start": "2436033",
    "end": "2442833"
  },
  {
    "text": "Invalid. Data. Message.",
    "start": "2443566",
    "end": "2448399"
  },
  {
    "text": "Data into the database.",
    "start": "2449366",
    "end": "2451066"
  },
  {
    "text": "Yeah, very, very good point. Cool. And also interface wise kind of make more",
    "start": "2454899",
    "end": "2461366"
  },
  {
    "text": "sense because at this point then we have our entry which is. The thing that you",
    "start": "2461366",
    "end": "2466666"
  },
  {
    "text": "basically ship to the entity. Yeah, it's no longer the entity that has",
    "start": "2466666",
    "end": "2471699"
  },
  {
    "text": "to do the deserialization. The entity receives. Basic as an internal queue of.",
    "start": "2471699",
    "end": "2478265"
  },
  {
    "text": "Like the actual messages and actually and actually the end that actually makes my",
    "start": "2478266",
    "end": "2483866"
  },
  {
    "text": "life a lot easier because right now I have the entity manager typed. With its message, but",
    "start": "2483866",
    "end": "2489466"
  },
  {
    "text": "this actually doesn't really. I mean it works, but it doesn't really work because if you look at the actual",
    "start": "2489466",
    "end": "2496265"
  },
  {
    "text": "sharding service which manages the entity managers. It's just typed with any because it can't know the type but.",
    "start": "2496266",
    "end": "2502666"
  },
  {
    "text": "It doesn't mean in reality that type should be an existential type and they",
    "start": "2504100",
    "end": "2509366"
  },
  {
    "text": "don't they don't exist in TypeScript. Because he has an internal consistency but. Like a protocol then another interface",
    "start": "2509366",
    "end": "2517733"
  },
  {
    "text": "that accepts the same message but you don't know that type externally. But the nice thing about this is like we",
    "start": "2517733",
    "end": "2524466"
  },
  {
    "text": "can certainly have a. A map of. Entity managers of anything right but",
    "start": "2524466",
    "end": "2531466"
  },
  {
    "text": "with your solution when we actually do the storage persisting and blah blah blah when we get the entry back we already",
    "start": "2531466",
    "end": "2537466"
  },
  {
    "text": "know that that entry has been validated with the with the empty manager. So when I actually implement in sharding",
    "start": "2537466",
    "end": "2544333"
  },
  {
    "text": "the thing that accepts. The because I think the thing that.",
    "start": "2544333",
    "end": "2549166"
  },
  {
    "text": "I had already started working on like this send to local entity manager function, this is the actual thing that",
    "start": "2550066",
    "end": "2557266"
  },
  {
    "text": "you know the wire protocol between pods is pluggable and it will continue to be I",
    "start": "2557266",
    "end": "2563833"
  },
  {
    "text": "think the default is. The default of it being RPC is good. But it's it is technically pluggable and",
    "start": "2563833",
    "end": "2571833"
  },
  {
    "text": "it I think it should continue to be but the idea is that when you actually use",
    "start": "2571833",
    "end": "2577066"
  },
  {
    "text": "that protocol to message between pods when that message is received on the other end.",
    "start": "2577066",
    "end": "2582433"
  },
  {
    "text": "You address you extract charting from your environment and you run this send a local entity manager and this is the",
    "start": "2583600",
    "end": "2589099"
  },
  {
    "text": "thing that'll get the storage do the validation of the message do all of that sort of stuff so. Now I can actually work on this in a much",
    "start": "2589100",
    "end": "2598166"
  },
  {
    "text": "more like principled way I think because now when the entity manager actually gets",
    "start": "2598166",
    "end": "2603633"
  },
  {
    "text": "the message it doesn't have to do any work of like. When it when it actually sends the",
    "start": "2603633",
    "end": "2609433"
  },
  {
    "text": "message to its internal queue. It already knows it's a valid message it's been persisted",
    "start": "2609433",
    "end": "2614632"
  },
  {
    "text": "it's a valid message etc.",
    "start": "2614633",
    "end": "2616133"
  },
  {
    "text": "That probably. Like if that works after persistence it gets.",
    "start": "2621899",
    "end": "2627500"
  },
  {
    "text": "A message entry. No not an envelope. Well it depends on where we put that",
    "start": "2628633",
    "end": "2636733"
  },
  {
    "text": "right because like the send a local entity manager here is just going to get",
    "start": "2636733",
    "end": "2642500"
  },
  {
    "text": "the envelope from the wire and then it can do everything like it can try to find",
    "start": "2642500",
    "end": "2647733"
  },
  {
    "text": "the entity manager for that envelope use the entity manager to. Deserialize the message if it's valid put",
    "start": "2647733",
    "end": "2652966"
  },
  {
    "text": "it in storage and then write it to the mailbox queue. What the mailbox storage be actually part",
    "start": "2652966",
    "end": "2660166"
  },
  {
    "text": "of the entity manager.",
    "start": "2660166",
    "end": "2662166"
  },
  {
    "text": "I think it makes more sense for the mailbox storage to be on the sharding",
    "start": "2665300",
    "end": "2670965"
  },
  {
    "text": "service because we I think we it's like pod scope because.",
    "start": "2670966",
    "end": "2676033"
  },
  {
    "text": "In my mind like. The envelope hitting the pod like the",
    "start": "2677399",
    "end": "2682500"
  },
  {
    "text": "first thing we try to do is persist it right then it gets forwarded onto the entity managers.",
    "start": "2682500",
    "end": "2687300"
  },
  {
    "text": "So it that is like now case to persist it we need the entity manager.",
    "start": "2688633",
    "end": "2693033"
  },
  {
    "text": "It is a valid like question right like should the storage be should the mailbox",
    "start": "2693899",
    "end": "2699233"
  },
  {
    "text": "storage be associated with an entity manager or should it just be associated with. The sharding service I think",
    "start": "2699233",
    "end": "2704765"
  },
  {
    "text": "it's apples and orange I mean. Would it be wild to think that two",
    "start": "2704766",
    "end": "2710100"
  },
  {
    "text": "entities might have different storage. No I don't think so because right now in",
    "start": "2710100",
    "end": "2716899"
  },
  {
    "text": "the way we've designed our table right the way we designed the table.",
    "start": "2716899",
    "end": "2722233"
  },
  {
    "text": "The primary key already basically separates entities by type.",
    "start": "2723199",
    "end": "2726933"
  },
  {
    "text": "Like there's totally distinct within the table even the message sequence number.",
    "start": "2729399",
    "end": "2734266"
  },
  {
    "text": "In theory I could have an entity type which is stored in a database and a different",
    "start": "2734866",
    "end": "2740833"
  },
  {
    "text": "entity type which is stored in another one. In theory yeah.",
    "start": "2740833",
    "end": "2744633"
  },
  {
    "text": "I'll try it out I'll see how it feels because that's kind of interesting. I don't know how it would work from like",
    "start": "2746233",
    "end": "2754199"
  },
  {
    "text": "a user perspective maybe like when you're actually constructing the entity you provide you if you know you have the",
    "start": "2754199",
    "end": "2761000"
  },
  {
    "text": "ability to provide it with mailbox storage as well specific storage or it",
    "start": "2761000",
    "end": "2766066"
  },
  {
    "text": "inherits from a generic like the X we can think about the X. But I do see cases where will actually",
    "start": "2766066",
    "end": "2775733"
  },
  {
    "text": "make a lot of sense because you may have something like you know I don't know a user storage where you store your users",
    "start": "2775733",
    "end": "2782432"
  },
  {
    "text": "then you have something else and these are even makes it a nice point if you",
    "start": "2782433",
    "end": "2789566"
  },
  {
    "text": "really have a database that does ABC and you want to have some workflows running in that database you could quite",
    "start": "2789566",
    "end": "2796666"
  },
  {
    "text": "literally create an entity type. Link it to your existing database and",
    "start": "2796666",
    "end": "2801966"
  },
  {
    "text": "that entity has access to that that thing automatically even you",
    "start": "2801966",
    "end": "2807965"
  },
  {
    "text": "may be even transactory but. Yeah that's like transactions don't make quite quite a lot of sense here.",
    "start": "2807966",
    "end": "2813733"
  },
  {
    "text": "I'll try it out because I think that's it's definitely interesting. The other thing I wanted to bring up I",
    "start": "2814433",
    "end": "2821199"
  },
  {
    "text": "know where we only have a little bit more time but the other thing I wanted to talk about was the way I've",
    "start": "2821199",
    "end": "2828733"
  },
  {
    "text": "designed behavior so. I kind of went back to a shard cake ask",
    "start": "2828733",
    "end": "2835866"
  },
  {
    "text": "behavior design where a behavior.",
    "start": "2835866",
    "end": "2841099"
  },
  {
    "text": "We had talked about this and I decided to design it exactly that way which is the",
    "start": "2841100",
    "end": "2847033"
  },
  {
    "text": "behavior of an entity is literally an effect that never ends so this could be",
    "start": "2847033",
    "end": "2852533"
  },
  {
    "text": "for example a fiber that like never I mean it does end up getting forked into a Damon fiber behind the scenes but.",
    "start": "2852533",
    "end": "2859000"
  },
  {
    "text": "The point here is that like. Basically why look that fetches messages constantly forever and you can fetch",
    "start": "2859566",
    "end": "2866333"
  },
  {
    "text": "messages however you want but an interesting thing for us to look at and",
    "start": "2866333",
    "end": "2871933"
  },
  {
    "text": "you know the type can be improved here there you know there's environment and I was also thinking about Mattia and I had",
    "start": "2871933",
    "end": "2877699"
  },
  {
    "text": "talked about how we could give. Behaviors access to a scope like that you",
    "start": "2877699",
    "end": "2884533"
  },
  {
    "text": "know closes at a particular point in time. We can talk about that at a separate time",
    "start": "2884533",
    "end": "2889699"
  },
  {
    "text": "like I had there's ideas I have around that but what I do want to just quickly talk about is my.",
    "start": "2889699",
    "end": "2897233"
  },
  {
    "text": "Why it would probably be an ever ending scope. Well it depends like it well it depends",
    "start": "2897233",
    "end": "2905466"
  },
  {
    "text": "right because a behavior is associated with a particular entity right that entity has an idle time which in this",
    "start": "2905466",
    "end": "2911566"
  },
  {
    "text": "design like I have I kept the ability to. Provide because we had talked about this",
    "start": "2911566",
    "end": "2917166"
  },
  {
    "text": "as well I kept the ability to provide an entity with don't remember where it is.",
    "start": "2917166",
    "end": "2923733"
  },
  {
    "text": "In the options here in the registration options there's the ability to provide like a max idle time.",
    "start": "2924533",
    "end": "2930366"
  },
  {
    "text": "Which basically is the maximum duration of an activity after which an entity will be interrupted by the way here there's a",
    "start": "2931333",
    "end": "2939132"
  },
  {
    "text": "key difference between shark cake and our implementation this idle has to be.",
    "start": "2939133",
    "end": "2944000"
  },
  {
    "text": "Not from the message received but from the last message processed. Otherwise I might I might have an idle",
    "start": "2945266",
    "end": "2952633"
  },
  {
    "text": "time of 15 seconds and a process that takes a minute and I'll kill the process halfway.",
    "start": "2952633",
    "end": "2957466"
  },
  {
    "text": "Yeah that's a good point without. Yeah having having.",
    "start": "2957766",
    "end": "2964733"
  },
  {
    "text": "So I don't receive the process. Received or processed a message.",
    "start": "2967000",
    "end": "2975466"
  },
  {
    "text": "I do have to make that adjustment from a code perspective but the idea here is that.",
    "start": "2977566",
    "end": "2982800"
  },
  {
    "text": "Hang on. The idea here being that like.",
    "start": "2983833",
    "end": "2990500"
  },
  {
    "text": "If if an entity is interrupted if you have services scoped services that are registered to that behavior like you",
    "start": "2991433",
    "end": "2997666"
  },
  {
    "text": "still want maybe you want those to shut down like independently like.",
    "start": "2997666",
    "end": "3001566"
  },
  {
    "text": "So but that's just an effect dot scoped around the behavior. I guess we can talk about it I",
    "start": "3002833",
    "end": "3009233"
  },
  {
    "text": "think that there may be merit. But anyways I wanted to talk about in the time we have left with about mailbox.",
    "start": "3009233",
    "end": "3016800"
  },
  {
    "text": "Which is a type that I was working on.",
    "start": "3024100",
    "end": "3026033"
  },
  {
    "text": "So. Basically I modeled mailbox as a queue",
    "start": "3036600",
    "end": "3041833"
  },
  {
    "text": "with some additional methods on it. I think.",
    "start": "3041833",
    "end": "3047033"
  },
  {
    "text": "The side of the mailbox that gets exposed to a behavior should be like a read only mailbox maybe where we don't allow the",
    "start": "3048033",
    "end": "3055566"
  },
  {
    "text": "because otherwise you could literally offer messages directly into the queue of the entity as your processing of behavior.",
    "start": "3055566",
    "end": "3060733"
  },
  {
    "text": "Maybe that's desirable but probably not because then you bypass all of the like rest of the things that are going on.",
    "start": "3061233",
    "end": "3067932"
  },
  {
    "text": "So if you want that you have to message yourself from the exactly you",
    "start": "3068066",
    "end": "3073866"
  },
  {
    "text": "still want to go through the. yeah we still want to go through the full process of like serialize to",
    "start": "3073866",
    "end": "3079600"
  },
  {
    "text": "deserialize all of that sort of stuff because I think otherwise we we talked about this you run into weird bugs.",
    "start": "3079600",
    "end": "3084699"
  },
  {
    "text": "But. The mailbox itself the side that the cluster sees not that the behavior sees",
    "start": "3085766",
    "end": "3093133"
  },
  {
    "text": "so from the user side will get the read only side of this where you have the take the take side the DQ.",
    "start": "3093133",
    "end": "3099899"
  },
  {
    "text": "As well as like all of these methods methods here the acknowledge succeed fail blah blah blah.",
    "start": "3099899",
    "end": "3105133"
  },
  {
    "text": "But what's nice about having the queue. Right side exposed here is that once",
    "start": "3105866",
    "end": "3113733"
  },
  {
    "text": "we're done like we talked about like once we're done and we grabbed the entity manager after having validated an",
    "start": "3113733",
    "end": "3120633"
  },
  {
    "text": "envelope you can then literally grab the mailbox from that entity. And offer directly to the associated",
    "start": "3120633",
    "end": "3128366"
  },
  {
    "text": "entity which is nice. So.",
    "start": "3128366",
    "end": "3130933"
  },
  {
    "text": "There's a bunch of helper methods on here that just basically allow you to either",
    "start": "3133433",
    "end": "3140300"
  },
  {
    "text": "acknowledge or process a message. And then the implementation.",
    "start": "3140300",
    "end": "3147866"
  },
  {
    "text": "There's going to be some errors here because I was working on this before we had our call.",
    "start": "3149666",
    "end": "3153566"
  },
  {
    "text": "I shut that off this. Yeah. So.",
    "start": "3155766",
    "end": "3159833"
  },
  {
    "text": "The interesting one here I think is complete effect because everything else is based on this or not complete because",
    "start": "3161266",
    "end": "3168366"
  },
  {
    "text": "everything else is based on this but. Essentially the when you want to acknowledge a message.",
    "start": "3168366",
    "end": "3174399"
  },
  {
    "text": "It just grabs the the mailbox storage and",
    "start": "3174399",
    "end": "3179465"
  },
  {
    "text": "for that particular message writes an acknowledged state. I'll show you what this looks like and",
    "start": "3179466",
    "end": "3184599"
  },
  {
    "text": "looks like in a second. And then when you want to complete a",
    "start": "3184600",
    "end": "3190066"
  },
  {
    "text": "message we get the actual results which is the exit for having processed this",
    "start": "3190066",
    "end": "3197100"
  },
  {
    "text": "message and then  We run the same storage update message but instead we run it with a message",
    "start": "3197100",
    "end": "3204099"
  },
  {
    "text": "state processed with that exit value. And if we look at.",
    "start": "3204100",
    "end": "3209432"
  },
  {
    "text": "I'm just going to turn my types back on. If we look at in the mailbox storage what that looks like.",
    "start": "3210833",
    "end": "3217066"
  },
  {
    "text": "So here we get an address we get a message and we get the state of that message to write.",
    "start": "3218333",
    "end": "3224333"
  },
  {
    "text": "And what's nice about this message message state type is that we can match",
    "start": "3225833",
    "end": "3231000"
  },
  {
    "text": "on the state and either acknowledge or process the actual message so",
    "start": "3231000",
    "end": "3236199"
  },
  {
    "text": "acknowledging is easy. I'll show you what that look the query looks like in a second but it's pretty straightforward.",
    "start": "3236199",
    "end": "3240599"
  },
  {
    "text": "Processing is nice because we can the message itself has the serializable result.",
    "start": "3241833",
    "end": "3246899"
  },
  {
    "text": "Symbol so we can directly serialize the exit. And then complete that message so we look",
    "start": "3247833",
    "end": "3256733"
  },
  {
    "text": "at the actual queries. Acknowledging a message is just a void a",
    "start": "3256733",
    "end": "3266599"
  },
  {
    "text": "scheme of void request which gets message identifiers. So the message identifiers are just like",
    "start": "3266600",
    "end": "3272399"
  },
  {
    "text": "shard ID entity type entity ID and message ID and essentially just sets message acknowledged to one.",
    "start": "3272399",
    "end": "3277800"
  },
  {
    "text": "In the table for that message. And then completing a message gets this",
    "start": "3278833",
    "end": "3284666"
  },
  {
    "text": "complete message type which I'll show you because it's relevant. But if we look at the actual request the",
    "start": "3284666",
    "end": "3291300"
  },
  {
    "text": "exit at this point has been serialized so down below it's encoded but not",
    "start": "3291300",
    "end": "3298066"
  },
  {
    "text": "technically like serialized yet. I'll show you what this looks like just a",
    "start": "3298066",
    "end": "3304100"
  },
  {
    "text": "second but basically we ensure that acknowledge is set to one just in case there's like any",
    "start": "3304100",
    "end": "3309399"
  },
  {
    "text": "weird statement database. And the other thing to note here is we're always making sure that the message result hasn't been set already when we",
    "start": "3309399",
    "end": "3315899"
  },
  {
    "text": "run these queries because if it has then something weird has gone on and we don't want to overwrite.",
    "start": "3315899",
    "end": "3321466"
  },
  {
    "text": "Well also the message of knowledge should be zero.",
    "start": "3321466",
    "end": "3325266"
  },
  {
    "text": "True. Or this one.",
    "start": "3327466",
    "end": "3330599"
  },
  {
    "text": "And. Good call.",
    "start": "3332800",
    "end": "3336966"
  },
  {
    "text": "Equals zero.",
    "start": "3337933",
    "end": "3338433"
  },
  {
    "text": "I guess it's the same on the other. No right because we can complete a message after it's already been acknowledged right.",
    "start": "3343133",
    "end": "3350933"
  },
  {
    "text": "Because if we do for example like. The at most process at",
    "start": "3353800",
    "end": "3358966"
  },
  {
    "text": "most once processing. We're going to acknowledge the message right away. We're not necessarily going",
    "start": "3358966",
    "end": "3364800"
  },
  {
    "text": "to complete it till later. Yeah that's true. But the last thing I'll show you before",
    "start": "3364800",
    "end": "3371333"
  },
  {
    "text": "we have to wrap up is this complete message schema. by the way we have to think about.",
    "start": "3371333",
    "end": "3379566"
  },
  {
    "text": "If we even want these not most ones. Thing because the.",
    "start": "3380899",
    "end": "3386099"
  },
  {
    "text": "It makes more complex to model the caller of that 'cause basically",
    "start": "3387333",
    "end": "3392366"
  },
  {
    "text": "when you call something. You'd send a message. You don't know if you're going to get the response.",
    "start": "3392366",
    "end": "3397765"
  },
  {
    "text": "Because if it's at most once it acknowledges the entity dies.",
    "start": "3399500",
    "end": "3403833"
  },
  {
    "text": "You're never going to. Get a result but how do you know.",
    "start": "3404899",
    "end": "3408766"
  },
  {
    "text": "Like and the first thing is that. You see the acknowledged.",
    "start": "3410166",
    "end": "3415000"
  },
  {
    "text": "But. You can't even error because as you described.",
    "start": "3416800",
    "end": "3421266"
  },
  {
    "text": "You can acknowledge and only after. Process.",
    "start": "3422199",
    "end": "3426699"
  },
  {
    "text": "The final message. So I think it sort of. creates problem.",
    "start": "3427800",
    "end": "3433600"
  },
  {
    "text": "In multiple in multiple. Places I think we should force the user",
    "start": "3435566",
    "end": "3442100"
  },
  {
    "text": "to deal with the fact that you might get. You have to do things idempotently.",
    "start": "3442100",
    "end": "3447199"
  },
  {
    "text": "And that's. Yeah I mean I think it's probably the best.",
    "start": "3447933",
    "end": "3452633"
  },
  {
    "text": "I think it's going to be like one of those things that once we finish the initial. set of features here, we're going to like",
    "start": "3453033",
    "end": "3459899"
  },
  {
    "text": "start testing it out just like, and we're going to realize very quickly, oh, this works, this doesn't, this works, this doesn't, etc.",
    "start": "3459899",
    "end": "3465300"
  },
  {
    "text": "And I think that's probably going to be one of those things that is the first place where we'll run into like weird issues where a",
    "start": "3466199",
    "end": "3472000"
  },
  {
    "text": "user might arrive in an inconsistent state and they won't know why.",
    "start": "3472000",
    "end": "3476366"
  },
  {
    "text": "Well, I simply mean the interface for like the ask.",
    "start": "3477399",
    "end": "3482766"
  },
  {
    "text": "You have an after you ask a message, but if that message is then processed at most",
    "start": "3483466",
    "end": "3490766"
  },
  {
    "text": "ones, it might never be processed. Right. So what way do caller wise wait for",
    "start": "3490800",
    "end": "3496300"
  },
  {
    "text": "eternity time out after 30 seconds. I don't think either of the choices make a lot of sense.",
    "start": "3496300",
    "end": "3502432"
  },
  {
    "text": "If there is a reply, I should get the reply. Now.",
    "start": "3503366",
    "end": "3507266"
  },
  {
    "text": "We still haven't really discussed at length what the protocol piece is going to be like",
    "start": "3509133",
    "end": "3514566"
  },
  {
    "text": "for a client, right? We haven't, we haven't been that's, I think that's going to be an interesting thing for",
    "start": "3514566",
    "end": "3520300"
  },
  {
    "text": "us to talk about, like on a later design session, because basically we're ignoring that",
    "start": "3520300",
    "end": "3525466"
  },
  {
    "text": "right now. Yeah. But the last thing I'll leave you all",
    "start": "3525466",
    "end": "3531500"
  },
  {
    "text": "with, because I think that I'm just like, I was very",
    "start": "3531500",
    "end": "3537066"
  },
  {
    "text": "enamored by the APIs that Tim provides in SQL and all the other",
    "start": "3538000",
    "end": "3544366"
  },
  {
    "text": "contributors to SQL as well. But the.",
    "start": "3544366",
    "end": "3547333"
  },
  {
    "text": "What's nice with this complete message type is we know that the database is going to give us something that's totally unknown.",
    "start": "3549399",
    "end": "3555699"
  },
  {
    "text": "Right. But we know that it's going to be we know",
    "start": "3556399",
    "end": "3561533"
  },
  {
    "text": "that when we try to complete a message we're getting it's going to be unknown, but we're serializing an exit previously.",
    "start": "3561533",
    "end": "3566866"
  },
  {
    "text": "So we know we're getting an exit that's unknown. So if we wrap it with parse JSON, we",
    "start": "3566899",
    "end": "3572100"
  },
  {
    "text": "actually go to update message and run the actual",
    "start": "3572100",
    "end": "3577833"
  },
  {
    "text": "complete. The serialized side of this, like the encoded side, gives us back",
    "start": "3577833",
    "end": "3584099"
  },
  {
    "text": "the JSON string because we know that when we run this complete, we're going to be getting the.",
    "start": "3584100",
    "end": "3590399"
  },
  {
    "text": "Exit here and we can actually like, you know, have the exit come in here as well.",
    "start": "3591800",
    "end": "3595800"
  },
  {
    "text": "But anyways, I thought this was like I just really like the APIs around SQL. I think it's really flexible and schema",
    "start": "3597399",
    "end": "3603199"
  },
  {
    "text": "obviously powers a lot of that, too. So kudos to the rest of the team that are working on these APIs.",
    "start": "3603199",
    "end": "3609199"
  },
  {
    "text": "And I'm not sure if you've seen the latest thing that Tim is working on the model.",
    "start": "3610000",
    "end": "3616500"
  },
  {
    "text": "Model class variance. Yeah, it's I actually tested out whether",
    "start": "3616566",
    "end": "3621800"
  },
  {
    "text": "or not I could use it in cluster. I think that it might require a tiny bit more work for to be",
    "start": "3621800",
    "end": "3627399"
  },
  {
    "text": "usable in cluster, but like it already looks so good from the perspective of like basically defining",
    "start": "3627399",
    "end": "3633666"
  },
  {
    "text": "for those of you who don't know or haven't seen it, it's basically a way to define a",
    "start": "3633666",
    "end": "3639166"
  },
  {
    "text": "single model for your data that encodes like everything to do with like",
    "start": "3639166",
    "end": "3645866"
  },
  {
    "text": "if you're persisting that information or not, it encodes like insert, update schemas, like basically all of that",
    "start": "3645866",
    "end": "3651666"
  },
  {
    "text": "with like a single API which is really, really nice.",
    "start": "3651666",
    "end": "3654566"
  },
  {
    "text": "But yeah, I am kind of out of time for today. Well, but this is really good.",
    "start": "3657500",
    "end": "3664066"
  },
  {
    "text": "I think that the comments that you made about the mailbox storage make a lot of sense and",
    "start": "3664066",
    "end": "3669100"
  },
  {
    "text": "I'll go in that direction and we can probably talk about it the next time. good good.",
    "start": "3669100",
    "end": "3675166"
  },
  {
    "text": "It was a fun session. Very fun. I like digging into code. I like design sessions too, but I also",
    "start": "3675166",
    "end": "3681300"
  },
  {
    "text": "like digging into code and like thinking about it from a design perspective. Maxwell likes to code.",
    "start": "3681300",
    "end": "3686199"
  },
  {
    "text": "I like to code. But anyways, thank you",
    "start": "3686733",
    "end": "3693599"
  },
  {
    "text": "guys all for joining. I hope it was fun and we'll see you all next week.",
    "start": "3693600",
    "end": "3698133"
  },
  {
    "text": "Thank you folks.",
    "start": "3699133",
    "end": "3699699"
  }
]