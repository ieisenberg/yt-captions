[
  {
    "text": "(audience applauds) Hello everyone, it's good to see you all here.",
    "start": "0",
    "end": "5125"
  },
  {
    "text": "It's been really exciting to see the community grow over the past year.",
    "start": "6833",
    "end": "10500"
  },
  {
    "text": "It's kind of breathtaking to see all these beautiful faces here and it all culminating in this event.",
    "start": "12541",
    "end": "19416"
  },
  {
    "text": "So thank you for being here. And to introduce myself, hi, I'm Tim Smart",
    "start": "20125",
    "end": "25125"
  },
  {
    "text": "and I'm a Founding Engineer at Effectful. And my role is to just make Effect awesome really.",
    "start": "26000",
    "end": "33041"
  },
  {
    "text": "And you can find me online on GitHub and Twitter, sorry, I mean X. And I also hover around the Effect Discord.",
    "start": "33666",
    "end": "40833"
  },
  {
    "text": "So if you ever have a question, ask on Discord and I'll probably answer. And today I'm gonna talk about Effect's Latest and Greatest.",
    "start": "41041",
    "end": "48666"
  },
  {
    "text": "So as part of my role as a Founding Engineer at Effectful",
    "start": "49458",
    "end": "53583"
  },
  {
    "text": "is to explore the problems we are facing as developers and make sure,",
    "start": "55083",
    "end": "59833"
  },
  {
    "text": "discover the kind of problems that we face every day, the challenging ones, and make sure we have a solution and Effect",
    "start": "62666",
    "end": "69250"
  },
  {
    "text": "that makes it easier and Effect Native. So today I'm gonna explore a few problems, few common problems you might face in your apps",
    "start": "70000",
    "end": "76375"
  },
  {
    "text": "and present you some solutions. So first up, one problem I wanna take a look at",
    "start": "77041",
    "end": "84541"
  },
  {
    "text": "is CPU-bound work. So in JavaScript, we're limited to a single thread.",
    "start": "84666",
    "end": "92958"
  },
  {
    "text": "And one tricky problem with that is if you have a UI app, such as a React App or a React Native App,",
    "start": "94125",
    "end": "100458"
  },
  {
    "text": "and you wanna let's say process an image, that's gonna block the thread and we can't have that because that will mean you have a janky app.",
    "start": "101125",
    "end": "107833"
  },
  {
    "text": "So there are solutions to this problem. Well, you can't do this in React Native,",
    "start": "109500",
    "end": "115416"
  },
  {
    "text": "on a Node server you could have multiple processes. So that might look like having multiple app instances.",
    "start": "115500",
    "end": "123625"
  },
  {
    "text": "So if you orchestrate your app with Kubernetes, you could just spin out more replicas, or you could spawn a child process",
    "start": "124500",
    "end": "130500"
  },
  {
    "text": "and communicate with it with RPC. Those are both valid solutions. Another one is you could use another language.",
    "start": "130750",
    "end": "137000"
  },
  {
    "text": "Nice. You could use Rust, you could use C, you could use Zig and then compile it down to a Node module",
    "start": "139041",
    "end": "145541"
  },
  {
    "text": "or a Native module in Bun. And just talk to it from your JavaScript app.",
    "start": "145541",
    "end": "151541"
  },
  {
    "text": "And that's another perfectly valid solution. Or you could use workers. So in the browser, we have web workers,",
    "start": "152375",
    "end": "157541"
  },
  {
    "text": "in node, we have worker threads, and in Bun, you kind of have web workers,",
    "start": "158833",
    "end": "164041"
  },
  {
    "text": "a slightly different API. And so I'm gonna focus a bit more on workers.",
    "start": "164041",
    "end": "169541"
  },
  {
    "text": "But there are some problems with workers. And the first problem is, there's a slightly different API for each platform.",
    "start": "171625",
    "end": "177750"
  },
  {
    "text": "So browser web workers are slightly different to worker threads. They do share some common traits,",
    "start": "178083",
    "end": "184333"
  },
  {
    "text": "but they are slightly different. And Bun is almost identical to the browser,",
    "start": "184333",
    "end": "189625"
  },
  {
    "text": "but there's a few slight quirks. And the other problem is serialization.",
    "start": "189625",
    "end": "194041"
  },
  {
    "text": "Trying to cross the, trying to, you can't just stuff anything down a message port.",
    "start": "195666",
    "end": "200125"
  },
  {
    "text": "If you try throwing one of your custom classes down there, you'll probably just get the class method is not a function",
    "start": "201083",
    "end": "206125"
  },
  {
    "text": "And this is the JavaScript runtime defeating you once again.",
    "start": "207708",
    "end": "210750"
  },
  {
    "text": "We've all been defeated by the JavaScript runtime. And this is where I'd like to introduce Platform Workers.",
    "start": "213083",
    "end": "219000"
  },
  {
    "text": "So as part of, over the past few months, I've been working on the Platform packages that help make it easier for Effect work across Platforms.",
    "start": "219708",
    "end": "227541"
  },
  {
    "text": "And as part of that, we've introduced a Worker module. And this Worker module aims to make it easier",
    "start": "228041",
    "end": "235833"
  },
  {
    "text": "to use Workers in Effect by providing the same API for every Platform. So if you're in the Browser, or in Node, or in Bun,",
    "start": "235833",
    "end": "243375"
  },
  {
    "text": "you just implement the same code everywhere, and you just provide a different, kind of like a different implementation Layer to it.",
    "start": "244333",
    "end": "252000"
  },
  {
    "text": "And it supports Effect Schema that we all know and love. Well, hopefully you all know and love it.",
    "start": "252750",
    "end": "258040"
  },
  {
    "text": "You should go and love it after this. (audience laughing) And it supports response streaming.",
    "start": "258041",
    "end": "264524"
  },
  {
    "text": "So if you have, if you need a kind of like a long-lived response coming back, you can stream it back, and it just works.",
    "start": "264524",
    "end": "270583"
  },
  {
    "text": "Oh, and it's tracing for free. And who doesn't love free stuff?",
    "start": "271666",
    "end": "275166"
  },
  {
    "text": "So first up, we, so I've mentioned it supports Effect Schema.",
    "start": "277208",
    "end": "281625"
  },
  {
    "text": "And the first thing you need to do to use workers in Effect is to define some Requests.",
    "start": "282416",
    "end": "287332"
  },
  {
    "text": "So there's a bit of code here, but I'll step through it. And you can see here, we're\nimporting from the Schema module",
    "start": "288875",
    "end": "294082"
  },
  {
    "text": "and the Platform module. But first up, we are extending a TaggedRequest base class",
    "start": "294916",
    "end": "300500"
  },
  {
    "text": "from the Schema package, which gives you a lot of stuff out of the box.",
    "start": "300500",
    "end": "304833"
  },
  {
    "text": "To create one of these, first you pass in a string tag. And we need this, so as the request goes over the wire,",
    "start": "305666",
    "end": "312125"
  },
  {
    "text": "the other side knows what kind of request it is. And then we get type-safe errors,",
    "start": "312708",
    "end": "318041"
  },
  {
    "text": "which is a killer feature in Effect. But also what's cool to note here is it's fully serializable.",
    "start": "318375",
    "end": "324333"
  },
  {
    "text": "By using Schema.TaggedError, you get serialization for free. And we move down, and we pass in a Success Schema.",
    "start": "324958",
    "end": "333250"
  },
  {
    "text": "And here we're using the Transferable module from the Platform package. So what Transferable does is it automatically",
    "start": "334083",
    "end": "341041"
  },
  {
    "text": "kind of like takes the array buffer that backs the image data, and instead of copying it over to the worker,",
    "start": "341500",
    "end": "348125"
  },
  {
    "text": "it will just be, I think it's just shared, but it uses the WebSocket Transfers API under the hood.",
    "start": "348125",
    "end": "354666"
  },
  {
    "text": "And then you need the request parameters. So the worker needs to know what to do. So this is the data we're gonna give to the worker",
    "start": "356000",
    "end": "363583"
  },
  {
    "text": "so it can crop the image. So we'll crop the image and then give back the cropped image data.",
    "start": "363583",
    "end": "370041"
  },
  {
    "text": "And once you define multiple requests, we're just defining one here, but you could define it as many as you want.",
    "start": "371083",
    "end": "376707"
  },
  {
    "text": "We create a union of all these requests and kind of like package it all up into a single schema.",
    "start": "377583",
    "end": "382750"
  },
  {
    "text": "And we also extract the type for it. So once you define a request,",
    "start": "383625",
    "end": "389208"
  },
  {
    "text": "you can start implementing a worker.",
    "start": "389208",
    "end": "390625"
  },
  {
    "text": "And here is the code for that. We'll just quickly step through it. So first you can, you create a Layer",
    "start": "395458",
    "end": "401958"
  },
  {
    "text": "using the layerSerialized function and you pass in your union of schema requests,",
    "start": "403000",
    "end": "408375"
  },
  {
    "text": "union of request schemas. And then for each request in that union, you implement it.",
    "start": "409250",
    "end": "414916"
  },
  {
    "text": "And here we're just using a fake crop function. And then if you had more requests,",
    "start": "415333",
    "end": "421541"
  },
  {
    "text": "you would also add them in here. And then what's key to note here is,",
    "start": "421791",
    "end": "426500"
  },
  {
    "text": "this is completely platform agnostic at this point. So we can still hear the, see here that there's a missing dependency.",
    "start": "427125",
    "end": "433833"
  },
  {
    "text": "And that is the, that dependency is the platform that we eventually provide",
    "start": "434541",
    "end": "440707"
  },
  {
    "text": "it with the platform we are targeting, which I'll show you in the next slide. And if you're stripped away all the types,",
    "start": "440708",
    "end": "447375"
  },
  {
    "text": "I just added there for, so you can see what was going on. It's actually quite concise, easy to read,",
    "start": "447375",
    "end": "453291"
  },
  {
    "text": "and it gets the job done with quite a few lines of code. So we run the worker now.",
    "start": "453625",
    "end": "459708"
  },
  {
    "text": "First we import that layer we just created. And then this is the key part.",
    "start": "460666",
    "end": "465791"
  },
  {
    "text": "We're providing the, kind of like the browser implementation of workers to our worker.",
    "start": "465791",
    "end": "472458"
  },
  {
    "text": "And that will, under the hood, use web workers and run it for you. And then you can just run it using Layer.launch,",
    "start": "473208",
    "end": "479041"
  },
  {
    "text": "or you could use Effect.runFork. But runMain is quite a cool part of the Platform package",
    "start": "479666",
    "end": "485333"
  },
  {
    "text": "and it will just set up interruption for you. So if the attempts to detect if the browser window",
    "start": "485333",
    "end": "491958"
  },
  {
    "text": "was closed, the browser was shut down, and that cleans everything up safely.",
    "start": "492291",
    "end": "496375"
  },
  {
    "text": "So once you've, at this point, we've got a fully working kind of like worker runner. And now we do implement the client.",
    "start": "497791",
    "end": "504457"
  },
  {
    "text": "And for the client, we use this makePoolSerialized function from the Worker module. And at this point, you can\npass just the type of your union.",
    "start": "505333",
    "end": "513458"
  },
  {
    "text": "So it doesn't actually, you can actually tree-shake. If you have 100 requests and only use two of them,",
    "start": "514208",
    "end": "521083"
  },
  {
    "text": "the other 98 schemas will get in your bundle. And then we can pass in the size of the pool we want.",
    "start": "521625",
    "end": "527916"
  },
  {
    "text": "So you could also use something like the number of CPUs here, I think in the browser,",
    "start": "528208",
    "end": "533541"
  },
  {
    "text": "you can use navigator hardware concurrency. You can also use minSize and maxSize if you want to have like an auto scaling pool.",
    "start": "533750",
    "end": "540166"
  },
  {
    "text": "And then once you've created your pool, you can just start sending requests to it. Easy as that.",
    "start": "541333",
    "end": "546375"
  },
  {
    "text": "And then last step is to provide the Platform you're targeting.",
    "start": "548041",
    "end": "553291"
  },
  {
    "text": "So here we're targeting the Browser. So we provide the Browser Layer and we tell it how to support a Worker.",
    "start": "553583",
    "end": "558750"
  },
  {
    "text": "And just like that, we have an end-to-end type-safe Worker implementation in Effect.",
    "start": "560500",
    "end": "565625"
  },
  {
    "text": "And it supports streaming. And you get Tracing for free.",
    "start": "567291",
    "end": "571708"
  },
  {
    "text": "And who doesn't love free stuff? (audience laughing) So the next thing I wanna tackle is very similar,",
    "start": "572791",
    "end": "577833"
  },
  {
    "text": "is type safety over boundaries. But in this case, it's network boundaries.",
    "start": "578458",
    "end": "582750"
  },
  {
    "text": "And this is quite an important problem when you wanna have a full stack Effect application,",
    "start": "583625",
    "end": "590833"
  },
  {
    "text": "but you wanna have type safety from client to server. So if you have an API, you could use something",
    "start": "591375",
    "end": "599416"
  },
  {
    "text": "like an RPC package and then you could get end-to-end type safety.",
    "start": "599416",
    "end": "603958"
  },
  {
    "text": "There are solutions already. If you Google, there's like 50 different RPC libraries.",
    "start": "605916",
    "end": "610750"
  },
  {
    "text": "Probably one of the most popular ones right now is TRPC. But they all share some common issues.",
    "start": "611500",
    "end": "617291"
  },
  {
    "text": "They're not actually end-to-end type safe. Shot color. TRPC is actually only really does,",
    "start": "618333",
    "end": "625625"
  },
  {
    "text": "well basically the schemas aren't bidirectional. So if you, they have a schema for the request coming in,",
    "start": "627083",
    "end": "633541"
  },
  {
    "text": "but for the response going out, you can't really use like a custom class or custom data types.",
    "start": "634166",
    "end": "640291"
  },
  {
    "text": "They try to get around it with things like SuperJSON, but it only supports JavaScript primitives.",
    "start": "641125",
    "end": "646500"
  },
  {
    "text": "And pretty much every RPC library out there kind of shares this problem.",
    "start": "648375",
    "end": "652500"
  },
  {
    "text": "But as we mentioned before, Effect Schema, it supports bidirectional schemas.",
    "start": "653458",
    "end": "658958"
  },
  {
    "text": "So it'd be really great if we could use that here. This is where I'd like to introduce Effect RPC.",
    "start": "659375",
    "end": "664125"
  },
  {
    "text": "It's built for Effect, that goes without saying. It supports bidirectional schemas.",
    "start": "665625",
    "end": "671250"
  },
  {
    "text": "And one key thing to note, it uses Effect RequestResolver under the hood.",
    "start": "673500",
    "end": "677708"
  },
  {
    "text": "And Request Resolvers in Effect, one of the more powerful primitives we have for sending requests and has out of the sport for batching.",
    "start": "678875",
    "end": "688666"
  },
  {
    "text": "And it's also a composable primitive in effect. So you can do things like,",
    "start": "689000",
    "end": "693458"
  },
  {
    "text": "I'll talk a little bit more about this later, but you can do things like transform it to kind of like limit the batch sizes",
    "start": "695166",
    "end": "701750"
  },
  {
    "text": "and all sorts of amazing, wonderful things. And then also RPC also supports response streaming.",
    "start": "702041",
    "end": "708833"
  },
  {
    "text": "So if you have a long live response, also works for that situation. And has tracing for free.",
    "start": "709541",
    "end": "716333"
  },
  {
    "text": "And who doesn't love free stuff? (audience laughing) And again, it's very similar to Workers.",
    "start": "717083",
    "end": "722166"
  },
  {
    "text": "You define your Requests, but probably the main difference here is we don't need to define our union.",
    "start": "722625",
    "end": "728583"
  },
  {
    "text": "So again, you have the string tag, error type, success type, request parameters.",
    "start": "730125",
    "end": "734791"
  },
  {
    "text": "And then this is where it starts to get different. Here we're creating an RPC router.",
    "start": "736500",
    "end": "742416"
  },
  {
    "text": "And we're passing in a procedure call that returns an Effect. And we get the user ID and return a new user.",
    "start": "744083",
    "end": "750958"
  },
  {
    "text": "Very simple. And then at the end, we extract the type of our router.",
    "start": "752000",
    "end": "756750"
  },
  {
    "text": "So we can then use it to derive a client. And then we can just add it to a Platform HTTP server.",
    "start": "757958",
    "end": "764916"
  },
  {
    "text": "We can use any endpoint we want as long as it's a POST endpoint. And then it comes with a module",
    "start": "765916",
    "end": "772333"
  },
  {
    "text": "to convert it to a request handler. You'll route it into a request handler. And then at this point, we have a fully working server.",
    "start": "772333",
    "end": "779958"
  },
  {
    "text": "And for the client, we can use our router type we extracted earlier.",
    "start": "780791",
    "end": "786250"
  },
  {
    "text": "So the key thing to note\nhere is that it's importing the type. So when it gets compiled into JavaScript,",
    "start": "786958",
    "end": "791833"
  },
  {
    "text": "it gets completely erased. So your server doesn't get into your client, which would be bad.",
    "start": "792500",
    "end": "797000"
  },
  {
    "text": "And then we're using a make client function and just passing in our endpoint.",
    "start": "798125",
    "end": "802208"
  },
  {
    "text": "And make client is actually quite a simple wrapper. Behind the scenes, it's creating a RequestResolver,",
    "start": "803750",
    "end": "809666"
  },
  {
    "text": "which is quite a powerful primitive, as I mentioned earlier.",
    "start": "810375",
    "end": "814250"
  },
  {
    "text": "And then in the next slide, I'll show you how you can create a RequestResolver if you wanna use that.",
    "start": "815625",
    "end": "821166"
  },
  {
    "text": "Once you've created your client, you can just start putting requests into it and you either get the Stream back or the Effect back,",
    "start": "822375",
    "end": "828750"
  },
  {
    "text": "depending on what type of procedure call it was. And then here, this is the more kind of like low level API.",
    "start": "828750",
    "end": "836625"
  },
  {
    "text": "You can create a RequestResolver. And the key thing to note is we're passing in our custom HTTP client here.",
    "start": "836833",
    "end": "844916"
  },
  {
    "text": "And we're setting the URL. And then you can stack on things like retry policies or error handling, whatever you need.",
    "start": "845541",
    "end": "852583"
  },
  {
    "text": "So if the connection goes down, that retries exponentially. And then there's this API Resolver.toClient",
    "start": "852583",
    "end": "861458"
  },
  {
    "text": "that converts it into an easy to use client. And at this point, you have a end-to-end type safe RPC",
    "start": "862625",
    "end": "871083"
  },
  {
    "text": "solution in Effect. And you get, yeah, end-to-end type safe,",
    "start": "871375",
    "end": "878250"
  },
  {
    "text": "it's bi-directional schemas. So anything you, any schema you use will work with it.",
    "start": "878250",
    "end": "883500"
  },
  {
    "text": "You can shut down your custom data types and you get tracing for free.",
    "start": "883958",
    "end": "887791"
  },
  {
    "text": "And I sort of started covering off RequestResolver here. And I mentioned that they're really powerful primitives.",
    "start": "890375",
    "end": "895125"
  },
  {
    "text": "So I wanna dive a little bit deeper into that and show you some of the new things we've added that make RequestResolvers",
    "start": "895416",
    "end": "900666"
  },
  {
    "text": "a really amazing tool when you're talking. And the first problem with request resolvers",
    "start": "901208",
    "end": "907083"
  },
  {
    "text": "that I wanna tackle is batching it across context. So by default in Effect,",
    "start": "907291",
    "end": "912750"
  },
  {
    "text": "you might not be familiar with a RequestResolvers, but they give you batching for free.",
    "start": "913500",
    "end": "918875"
  },
  {
    "text": "And but the problem with the batching implementation and request resolvers out of the box is it only happens in a single execution context.",
    "start": "919750",
    "end": "927041"
  },
  {
    "text": "So if you send off 100 requests in one location and then 200 requests in another location,",
    "start": "928333",
    "end": "934250"
  },
  {
    "text": "they will actually still send off two batches. They won't get joined together.",
    "start": "935458",
    "end": "938875"
  },
  {
    "text": "So, and we wanna join them together in some situations to cut down on API calls to the underlying resource",
    "start": "940583",
    "end": "947416"
  },
  {
    "text": "or there's a myriad of reasons. So one thing we want to get in our apps",
    "start": "947666",
    "end": "953125"
  },
  {
    "text": "is the DataLoader pattern. And this is where a new package called experimental",
    "start": "953125",
    "end": "959208"
  },
  {
    "text": "in Effect, we've added to Effect and don't let experimental skew you too much.",
    "start": "960416",
    "end": "966000"
  },
  {
    "text": "But in the experimental package, we have a RequestResolver module. And in the RequestResolver module,",
    "start": "967541",
    "end": "973291"
  },
  {
    "text": "we have a couple of functions to help you out. And I'll show you a quick example.",
    "start": "973375",
    "end": "978041"
  },
  {
    "text": "So here we're importing a dataLoader function. And here, I'm just using the RequestResolver",
    "start": "979041",
    "end": "986583"
  },
  {
    "text": "that we created in our RPC example earlier. And then we have a couple of lines of code.",
    "start": "986583",
    "end": "991500"
  },
  {
    "text": "We pass it into that dataLoader function, give it a timeWindow and a maxBatchSize.",
    "start": "992166",
    "end": "997583"
  },
  {
    "text": "So we can say within 100 milliseconds, regardless of where the requests come from,",
    "start": "998208",
    "end": "1003375"
  },
  {
    "text": "add it to the same batch. And so regardless, if you send off 100 requests here",
    "start": "1003375",
    "end": "1009250"
  },
  {
    "text": "or 200 requests over here, if they both occur in the same time window, they get added to the same batch.",
    "start": "1009250",
    "end": "1015375"
  },
  {
    "text": "And then maxBatchSize. So if that batch ever exceeds 1000 items,",
    "start": "1016416",
    "end": "1021291"
  },
  {
    "text": "it will get sent off immediately and a new batch would start being created.",
    "start": "1021833",
    "end": "1025541"
  },
  {
    "text": "So a couple of extra lines of code, we've taken a RequestResolver without this kind of DataLoader functionality",
    "start": "1027291",
    "end": "1035250"
  },
  {
    "text": "and then transformed it into this new RequestResolver. And kind of building on top of that,",
    "start": "1036000",
    "end": "1043166"
  },
  {
    "text": "the last problem with RequestResolvers we are gonna tackle today is persistence.",
    "start": "1043750",
    "end": "1047625"
  },
  {
    "text": "So it's really great if you send it, it's really great if you get all this batching stuff,",
    "start": "1049083",
    "end": "1055958"
  },
  {
    "text": "but wouldn't be great if we could cache between app instances or app restarts.",
    "start": "1055958",
    "end": "1060583"
  },
  {
    "text": "And this is really helpful when you have more than one app running.",
    "start": "1061791",
    "end": "1066750"
  },
  {
    "text": "So if you have more than one replica or you have like a CLI app that is short-lived,",
    "start": "1067125",
    "end": "1072208"
  },
  {
    "text": "so if you spin it back up again, you wanna make sure like your cache is still warm.",
    "start": "1072416",
    "end": "1077250"
  },
  {
    "text": "And again, in the experimental package, we have this new Persistence module. And what this aims to tackle is,",
    "start": "1080833",
    "end": "1087083"
  },
  {
    "text": "this aims to tackle serialization, sorry, aims to tackle like storing results for your requests.",
    "start": "1088500",
    "end": "1094166"
  },
  {
    "text": "So it's built on Effect Schema again, and it has several adapters. So we have in-memory,",
    "start": "1095083",
    "end": "1099875"
  },
  {
    "text": "we support the KeyValueStore module from the Platform package, we support LMDB, and there's plenty more to come.",
    "start": "1101000",
    "end": "1108875"
  },
  {
    "text": "Eventually we would like to\nadd things like Redis or memcache and then add options to like set the time to live",
    "start": "1108875",
    "end": "1114833"
  },
  {
    "text": "and max capacity. And I'm sure I'll get to that over the next couple months.",
    "start": "1115000",
    "end": "1119416"
  },
  {
    "text": "And again, to use this, we define our request like earlier, but the key difference is we add a primary key.",
    "start": "1121333",
    "end": "1128666"
  },
  {
    "text": "And this primary key is used to identify in the underlying storage.",
    "start": "1128666",
    "end": "1131666"
  },
  {
    "text": "And then here we've got an example of using it with a RequestResolver.",
    "start": "1134000",
    "end": "1138291"
  },
  {
    "text": "So again, the same RequestResolver from our RPC example, we pass it into this persisted function",
    "start": "1139416",
    "end": "1145583"
  },
  {
    "text": "from the experimental package, and then we give it a store ID. And that store ID allows you to have multiple resolvers",
    "start": "1146000",
    "end": "1153833"
  },
  {
    "text": "using the same storage backend. And then once you've done that, you just need to provide the storage implementation",
    "start": "1154083",
    "end": "1160916"
  },
  {
    "text": "that you wanna use. So here we're gonna use the KeyValueStore from Platform package,",
    "start": "1161250",
    "end": "1165791"
  },
  {
    "text": "and we're just gonna store everything on the file system. So with those extra few lines of code,",
    "start": "1166333",
    "end": "1172958"
  },
  {
    "text": "we now have our RequestResolver that is fully persisted between app instances.",
    "start": "1173041",
    "end": "1178708"
  },
  {
    "text": "So regardless if your app restarts through what's in a different place, they all share the same storage backend.",
    "start": "1180791",
    "end": "1186958"
  },
  {
    "text": "Cool, well, the last thing I'd like to look at today, last one we'd like to look at today",
    "start": "1189958",
    "end": "1195000"
  },
  {
    "text": "is observability and development. So tracing metrics is all cool,",
    "start": "1195000",
    "end": "1201916"
  },
  {
    "text": "it's really hard to get a good stack set up in development. It takes a bit of work, a bit of fiddling around.",
    "start": "1202458",
    "end": "1207750"
  },
  {
    "text": "Docker and stuff makes it easier. So yeah, Docker, Tempo and Prometheus",
    "start": "1208708",
    "end": "1213000"
  },
  {
    "text": "is one thing you could do. A lot of people just have a docker-compose file and play around with it for a few hours",
    "start": "1213875",
    "end": "1219666"
  },
  {
    "text": "to get it just right. But again, it's still something you have to add to your development stack. It's a bit of a pain in the ass, let's be honest.",
    "start": "1219666",
    "end": "1226541"
  },
  {
    "text": "Or you could console.log, which is a bit lame. It's great for small things,",
    "start": "1228125",
    "end": "1233958"
  },
  {
    "text": "but we're better than that, guys. So today I would like to announce something",
    "start": "1233958",
    "end": "1240416"
  },
  {
    "text": "we've been working on, and that is a VSCode extension for Effect.",
    "start": "1240416",
    "end": "1245166"
  },
  {
    "text": "(audience applauding)",
    "start": "1247291",
    "end": "1250875"
  },
  {
    "text": "So over the past couple months, we've been hacking in the background. And the thing we wanted to solve with it",
    "start": "1255208",
    "end": "1262291"
  },
  {
    "text": "is just making it really easy to, I mean, Effect has great tracing and metrics.",
    "start": "1262333",
    "end": "1267375"
  },
  {
    "text": "I mean, if you've ever tried to use OpenTelemetry in a normal TypeScript project,",
    "start": "1267583",
    "end": "1271791"
  },
  {
    "text": "you've probably, everyone's like, why are you swearing? But with this VSCode extension,",
    "start": "1272916",
    "end": "1280416"
  },
  {
    "text": "we want to make tracing really easy in Effect apps. And we also want to make metrics really easy in Effect apps.",
    "start": "1280416",
    "end": "1286375"
  },
  {
    "text": "And we also want to make it really easy to debug Effect apps. So if you like set a breakpoint somewhere,",
    "start": "1288375",
    "end": "1294166"
  },
  {
    "text": "we want you to be able to inspect the context of your Effect application.",
    "start": "1294791",
    "end": "1299000"
  },
  {
    "text": "To quickly show this to you, actually, oh yeah, it's all inside VSCode. So you don't have to leave your editor.",
    "start": "1301125",
    "end": "1306958"
  },
  {
    "text": "And just make a quick note that this is early alpha. So it's very early, and we plan to add more features",
    "start": "1308583",
    "end": "1315000"
  },
  {
    "text": "in the future like visualization and other things. But I think we've got enough now",
    "start": "1315166",
    "end": "1320208"
  },
  {
    "text": "to make developing Effect apps even easier. And to show this to you today, I'll give a quick demo.",
    "start": "1320291",
    "end": "1327541"
  },
  {
    "text": "It's gonna test this mic, yeah, it's working. (audience laughing)",
    "start": "1336750",
    "end": "1340791"
  },
  {
    "text": "Full screen. Alright here, I've got a little app I made just to show this off.",
    "start": "1346041",
    "end": "1351458"
  },
  {
    "text": "And we've got in here, it's gonna move this a bit, HTTP server.",
    "start": "1352708",
    "end": "1358083"
  },
  {
    "text": "And the key thing to note here is this new thing.",
    "start": "1360041",
    "end": "1363458"
  },
  {
    "text": "All good? Just fixing the mic, bear with us. Is we're providing this DevTools Layer.",
    "start": "1365791",
    "end": "1372875"
  },
  {
    "text": "And this is the only thing you need to add to start using the Effective tools, which is what we've called the extension.",
    "start": "1373416",
    "end": "1379416"
  },
  {
    "text": "And this DevTools Layer can be found in the experimental package. So I'll have a quick look at the HTTP app",
    "start": "1380541",
    "end": "1386916"
  },
  {
    "text": "so you can see what it does. There's a single endpoint, and in this case, we're using an RPC server.",
    "start": "1386916",
    "end": "1393875"
  },
  {
    "text": "And then we're just listening, listening, providing some dependencies,",
    "start": "1395750",
    "end": "1399875"
  },
  {
    "text": "listening on a really good port. And then we're defining an RPC router",
    "start": "1401583",
    "end": "1407750"
  },
  {
    "text": "with two endpoints, two procedure calls, one that streams back a list of user IDs.",
    "start": "1408208",
    "end": "1412666"
  },
  {
    "text": "And then we've got another procedure call that, for a given user ID, gives us back a user",
    "start": "1413708",
    "end": "1418750"
  },
  {
    "text": "from the user repository. So having a quick look at the user repository, we can see two methods here.",
    "start": "1418750",
    "end": "1425083"
  },
  {
    "text": "We've got a find by ID function, which given an ID will give us back a user.",
    "start": "1425083",
    "end": "1429666"
  },
  {
    "text": "And then we've got our all IDs method which returns user IDs 1 through 10.",
    "start": "1430625",
    "end": "1436708"
  },
  {
    "text": "But the key things to note here is we've added some metrics. So up here, I have defined a few metrics that we can use.",
    "start": "1438083",
    "end": "1444083"
  },
  {
    "text": "And we're tracking things like the duration this took, if it was successful or if it failed.",
    "start": "1445500",
    "end": "1450958"
  },
  {
    "text": "And then we're adding a tracing span and adding some attributes to that span.",
    "start": "1452125",
    "end": "1457250"
  },
  {
    "text": "So that kind of tackles the server side of it. And if we have a quick look at the client,",
    "start": "1459333",
    "end": "1463958"
  },
  {
    "text": "it's pulling out our RPC client from the context and it's streaming back those user IDs.",
    "start": "1465000",
    "end": "1470166"
  },
  {
    "text": "And then for every user ID that it gets back, it's fetching the corresponding user.",
    "start": "1471000",
    "end": "1475458"
  },
  {
    "text": "It's also worth noting that this RPC client is using that dataLoader function from before.",
    "start": "1477500",
    "end": "1484333"
  },
  {
    "text": "So everything will get sent off in a single batch. And then for every user in the stream,",
    "start": "1484875",
    "end": "1490458"
  },
  {
    "text": "it will just log it to the console. And then down here, we're also providing the DevTools Layer to our client.",
    "start": "1490458",
    "end": "1497375"
  },
  {
    "text": "So it also supports merging server and client spans into the same VSCode extension.",
    "start": "1497833",
    "end": "1503416"
  },
  {
    "text": "So if we go over to, sorry that I put my sidebar onto the right.",
    "start": "1506083",
    "end": "1510083"
  },
  {
    "text": "Some of you will probably be triggered by that, but that's fine.",
    "start": "1512416",
    "end": "1514708"
  },
  {
    "text": "So first thing we'll do is we'll start up our dev tools server and we'll open a terminal.",
    "start": "1518000",
    "end": "1523208"
  },
  {
    "text": "I forgot to ask if you could see that in the back. Is that all right? The text size, brilliant. Thank you for that person that acknowledged.",
    "start": "1524416",
    "end": "1529500"
  },
  {
    "text": "And I'm gonna open up a debug terminal, which is a great feature of VSCode.",
    "start": "1530875",
    "end": "1535833"
  },
  {
    "text": "This allows me to start a server and it also attaches the debugger.",
    "start": "1536625",
    "end": "1541000"
  },
  {
    "text": "And over in the debugger, you can always see this new tab here called Effect Context. So if you ever hit a break point,",
    "start": "1542875",
    "end": "1549041"
  },
  {
    "text": "that will get populated with the contents of the context.",
    "start": "1549500",
    "end": "1553333"
  },
  {
    "text": "So we'll switch back to the dev tools and close this clients window. And we can already see in real time metrics streaming in.",
    "start": "1555125",
    "end": "1562583"
  },
  {
    "text": "Here we can see the fiber count going up and up and up. And that is actually the DevTools itself",
    "start": "1563583",
    "end": "1568041"
  },
  {
    "text": "polling for all these metrics. But we can't see any traces yet.",
    "start": "1568625",
    "end": "1573583"
  },
  {
    "text": "So we'll fire off some requests by running the client.",
    "start": "1573958",
    "end": "1577000"
  },
  {
    "text": "Cool, so we've sent off our requests",
    "start": "1580125",
    "end": "1586500"
  },
  {
    "text": "and then immediately we can see some traces coming in. So there's the RPC request",
    "start": "1587500",
    "end": "1593000"
  },
  {
    "text": "that streams back our user IDs. And we dig into it. We can see it left the client,",
    "start": "1593291",
    "end": "1599500"
  },
  {
    "text": "hit the RPC router and then hit the user repository and we get all the timing information.",
    "start": "1599916",
    "end": "1604625"
  },
  {
    "text": "And then you can see all the trace and span IDs there. And then for every ID, all this, this is the,",
    "start": "1605500",
    "end": "1611416"
  },
  {
    "text": "because everything got batched together, oh sorry, the stream was a single HTTP request. So we can see that there.",
    "start": "1612041",
    "end": "1616875"
  },
  {
    "text": "And then for every ID that came in, we can see it,",
    "start": "1618166",
    "end": "1620583"
  },
  {
    "text": "came in as a request. And then again, there's the user repository span",
    "start": "1623500",
    "end": "1629000"
  },
  {
    "text": "and there's the span attributes. So it's like a really quick way of getting your,",
    "start": "1629875",
    "end": "1635000"
  },
  {
    "text": "getting your tracing information into your editor. And then if we jump down to the metrics, we can start seeing some results come in.",
    "start": "1635875",
    "end": "1644500"
  },
  {
    "text": "Earlier, you may have noticed that it failed when the ID was greater than 10. So I've just kind of simulated failure here.",
    "start": "1645625",
    "end": "1651166"
  },
  {
    "text": "And we can see that's how we come into the metrics. We had 10 successful requests. And we can see how long each request took.",
    "start": "1651750",
    "end": "1658833"
  },
  {
    "text": "So that's tracing metrics quickly. And the last thing we'll take a look at is",
    "start": "1661000",
    "end": "1664833"
  },
  {
    "text": "the context inspection. So we go into our user repository and set a break point somewhere,",
    "start": "1666375",
    "end": "1672041"
  },
  {
    "text": "maybe here. And we'll fire off some more requests.",
    "start": "1673291",
    "end": "1676833"
  },
  {
    "text": "Great, it worked. And straight away, we can start seeing all the dependencies in our app,",
    "start": "1680333",
    "end": "1686416"
  },
  {
    "text": "as well as the default dependencies that Effects adds for you.",
    "start": "1687541",
    "end": "1691875"
  },
  {
    "text": "So we can see here we're in a scope. And Scope and Effect is for resources",
    "start": "1692625",
    "end": "1698458"
  },
  {
    "text": "We can see all our platform dependencies here. Here's our user repository.",
    "start": "1699083",
    "end": "1702500"
  },
  {
    "text": "But more interesting is you can see things like the HTTP requests that came in.",
    "start": "1704291",
    "end": "1709875"
  },
  {
    "text": "We can have a look at the headers. You can look at the URL. Or you could even look at the JSON body that came in.",
    "start": "1710416",
    "end": "1718333"
  },
  {
    "text": "So it's really useful if you're in the middle of an Effect app and wanna set a break point and see all the information",
    "start": "1718833",
    "end": "1724750"
  },
  {
    "text": "at your fingertips.",
    "start": "1724750",
    "end": "1726541"
  },
  {
    "text": "And... I keep pressing resume. Yeah, keeps coming in.",
    "start": "1730083",
    "end": "1735666"
  },
  {
    "text": "So hopefully from that, you get a quick idea of what the VSCode extension can do.",
    "start": "1736333",
    "end": "1742458"
  },
  {
    "text": "And you may ask, when can I use it? Well, why don't we just quickly publish it?",
    "start": "1743791",
    "end": "1748875"
  },
  {
    "text": "(audience applauding)",
    "start": "1748875",
    "end": "1754024"
  },
  {
    "text": "This is going to be really boring because I've set up CI. But I'm just going to merge the pull requests.",
    "start": "1756274",
    "end": "1762791"
  },
  {
    "text": "(audience applauding)",
    "start": "1764333",
    "end": "1768625"
  },
  {
    "text": "So if CI doesn't fail, it will be available in 15 minutes or so. It will probably fail.",
    "start": "1773333",
    "end": "1780500"
  },
  {
    "text": "Cool, so that concludes my talk. Hopefully you saw something today that might interest you or something you might be able to use in your applications.",
    "start": "1784083",
    "end": "1789875"
  },
  {
    "text": "I covered that really quickly. So I don't expect it to have sunk in.",
    "start": "1791500",
    "end": "1795833"
  },
  {
    "text": "So if you have questions, just tap me on the shoulder. I'll be around for the whole conference and ask away.",
    "start": "1796666",
    "end": "1801625"
  },
  {
    "text": "So again, great to see everyone here. Happy Effecting. (audience applauding)",
    "start": "1803083",
    "end": "1807916"
  }
]