[
  {
    "text": "So hello everyone. We are finally back.",
    "start": "5802",
    "end": "8988"
  },
  {
    "text": "And today we're going to continuing building our effect.",
    "start": "10923",
    "end": "15128"
  },
  {
    "text": "warehouse app And I did some work off stream.",
    "start": "16696",
    "end": "22135"
  },
  {
    "text": "I think I improved some of the interfaces we had before.",
    "start": "23202",
    "end": "28875"
  },
  {
    "text": "And maybe let's start by looking at whatever I changed of",
    "start": "29575",
    "end": "34781"
  },
  {
    "text": "stream and whatever I improved. So let's start by having a look.",
    "start": "34781",
    "end": "42355"
  },
  {
    "text": "I have separated what was before, aggregated message in different things.",
    "start": "42588",
    "end": "48194"
  },
  {
    "text": "Now we have a message ID, which is for now just a non empty string.",
    "start": "48928",
    "end": "53533"
  },
  {
    "text": "And we will use maybe later a UUID or something like that. And then we also have changed.",
    "start": "54117",
    "end": "63026"
  },
  {
    "text": "Here we have. Our message that.",
    "start": "64477",
    "end": "69182"
  },
  {
    "text": "Now we don't have all of the headers fields like the message ID",
    "start": "70216",
    "end": "76255"
  },
  {
    "text": "or the fields like let's say.",
    "start": "76255",
    "end": "80276"
  },
  {
    "text": "Other things like the correlation ID of the causation ID etc.",
    "start": "81761",
    "end": "87684"
  },
  {
    "text": "We have moved everything into this kind of structure called message headers and",
    "start": "88351",
    "end": "93389"
  },
  {
    "text": "the same message headers For now we have message ID, causation ID, correlation ID.",
    "start": "93389",
    "end": "98461"
  },
  {
    "text": "And this is also one point where we could also think about putting some trace ID in",
    "start": "98811",
    "end": "104450"
  },
  {
    "text": "case we want distributed tracing to see a conversation across different boundaries.",
    "start": "104450",
    "end": "109989"
  },
  {
    "text": "And. I am quite a little changed the message as well.",
    "start": "112208",
    "end": "119515"
  },
  {
    "text": "And. I have thanks to with the help of Giulio Canti, the author of effect schema.",
    "start": "120767",
    "end": "127190"
  },
  {
    "text": "And I have this kind of only on type utility.",
    "start": "127907",
    "end": "131994"
  },
  {
    "text": "And what this utility does is really simple. We have now the ability to attach some",
    "start": "133596",
    "end": "141554"
  },
  {
    "text": "fields over an object. And those fields are not present into the",
    "start": "141554",
    "end": "148027"
  },
  {
    "text": "encoded shape but are present with a fixed default value on the runtime value.",
    "start": "148027",
    "end": "155268"
  },
  {
    "text": "And that's exactly the case for example of the message kind annotation ID and the",
    "start": "155651",
    "end": "162875"
  },
  {
    "text": "message aggregate root name here we have basically the name of",
    "start": "162875",
    "end": "168064"
  },
  {
    "text": "the entity products. Documents users whatever and here we have",
    "start": "168064",
    "end": "174587"
  },
  {
    "text": "the kind of message we have seen last time like query event comment and whatever.",
    "start": "174587",
    "end": "180743"
  },
  {
    "text": "And so here let's have a look at our test media can rename that now we are not",
    "start": "182428",
    "end": "189302"
  },
  {
    "text": "about an aggregate message are about message. Okay and now we have our test we can see",
    "start": "189302",
    "end": "196692"
  },
  {
    "text": "that this is our updated shape of definition we first create an aggregate.",
    "start": "196692",
    "end": "202165"
  },
  {
    "text": "And I get all of type products and then we find messages. We have messages of type query.",
    "start": "203232",
    "end": "211040"
  },
  {
    "text": "In this case this query has no parameters we have comments and this comment have a",
    "start": "213209",
    "end": "221484"
  },
  {
    "text": "parameter which is the new name this is change product name and this is the name we want to give.",
    "start": "221484",
    "end": "225972"
  },
  {
    "text": "Or events like the product name have changed and here we have the product name",
    "start": "226722",
    "end": "232745"
  },
  {
    "text": "with the old name and the new name. So here we have some tests.",
    "start": "232745",
    "end": "237600"
  },
  {
    "text": "That basically assure whatever we did before. That given a schema or a message we can",
    "start": "238668",
    "end": "246375"
  },
  {
    "text": "get the kind of message that we have.",
    "start": "246375",
    "end": "249712"
  },
  {
    "text": "So here we expect that a query is of type query commands of type command and event of type event and we also expect for",
    "start": "251414",
    "end": "258888"
  },
  {
    "text": "example that has I said before when we create the headers. And new messages now we expect for",
    "start": "258888",
    "end": "265810"
  },
  {
    "text": "example that if this message change product name is for the aggregate of type",
    "start": "265811",
    "end": "273134"
  },
  {
    "text": "products we expect that. The get aggregation theme of the message",
    "start": "273135",
    "end": "279275"
  },
  {
    "text": "equals to the aggregate root name products and if we run this test we can",
    "start": "279275",
    "end": "286883"
  },
  {
    "text": "see that indeed we passed this test. OK so let's start",
    "start": "286883",
    "end": "293673"
  },
  {
    "text": "moving to something new. So today I want to start having a look at",
    "start": "293673",
    "end": "300980"
  },
  {
    "text": "how I want logic of the warehouse to",
    "start": "300980",
    "end": "306052"
  },
  {
    "text": "persist and basically work inside of the system.",
    "start": "306052",
    "end": "311624"
  },
  {
    "text": "And let's start by saying that I want to take kind of an event sourced approach.",
    "start": "314193",
    "end": "320466"
  },
  {
    "text": "I want to store event that we have just defined and I want to recreate the",
    "start": "321167",
    "end": "329392"
  },
  {
    "text": "current aggregate state based on that. And that would mean that basically.",
    "start": "329392",
    "end": "337483"
  },
  {
    "text": "We can drop any table of the system",
    "start": "337667",
    "end": "344490"
  },
  {
    "text": "except the event log and recreate the entire system every time",
    "start": "344490",
    "end": "349745"
  },
  {
    "text": "starting by reading event log That could be done in memory.",
    "start": "349745",
    "end": "355685"
  },
  {
    "text": "We can have an event any table to the system or we can have table that just",
    "start": "356168",
    "end": "365645"
  },
  {
    "text": "holds a temporary snapshot of which is the in memory representation.",
    "start": "365645",
    "end": "369849"
  },
  {
    "text": "And before doing that we want to scratch out we started that the last time we",
    "start": "371083",
    "end": "377540"
  },
  {
    "text": "scratched out what kind of APIs we want. So we want to define first aggregate.",
    "start": "377540",
    "end": "382495"
  },
  {
    "text": "We have two different aggregate product and members and now we want to create an",
    "start": "383379",
    "end": "389035"
  },
  {
    "text": "event source aggregate. Here we want to pass in the aggregate",
    "start": "389035",
    "end": "394056"
  },
  {
    "text": "route and the kind of events that that aggregates support.",
    "start": "394056",
    "end": "399311"
  },
  {
    "text": "You can now see that for example we can define product event journal which is an",
    "start": "399829",
    "end": "405968"
  },
  {
    "text": "event journal of a product aggregate that takes in events of type product name",
    "start": "405968",
    "end": "412474"
  },
  {
    "text": "changed or product has been discontinued. And based on those two events basically",
    "start": "412475",
    "end": "419548"
  },
  {
    "text": "we can recreate the state of the aggregate. But indeed you can see here that we are",
    "start": "419548",
    "end": "427123"
  },
  {
    "text": "missing one key point. We are missing the shape of the state.",
    "start": "427123",
    "end": "431293"
  },
  {
    "text": "So let's start maybe by defining how we want that to be tackled.",
    "start": "433045",
    "end": "439769"
  },
  {
    "text": "I would like to do that. Maybe let's try first by",
    "start": "441554",
    "end": "448043"
  },
  {
    "text": "doing just that in memory. So we can recreate the aggregate state in",
    "start": "448043",
    "end": "454834"
  },
  {
    "text": "memory and then evolve from that. And maybe when we receive an event we",
    "start": "454834",
    "end": "460505"
  },
  {
    "text": "have sent to persist we performs a walk. And if we opt in for not having a shape",
    "start": "460506",
    "end": "469565"
  },
  {
    "text": "but instead performing work that could be interesting because that means that we",
    "start": "469565",
    "end": "477706"
  },
  {
    "text": "can for example use regular SQL tables and perform queries.",
    "start": "477706",
    "end": "483262"
  },
  {
    "text": "So when product name has changed we can perform a query that updates the name on the table for example and don't care",
    "start": "483796",
    "end": "491270"
  },
  {
    "text": "about adding a specific shape of the state in the event journal. And maybe I will start by",
    "start": "491270",
    "end": "497726"
  },
  {
    "text": "adopting this kind of approach. We could try that and see",
    "start": "497726",
    "end": "503149"
  },
  {
    "text": "what comes out from that. So I want first to have the definition of",
    "start": "503149",
    "end": "514560"
  },
  {
    "text": "an event journal storage. So interface event journal storage.",
    "start": "514560",
    "end": "525488"
  },
  {
    "text": "And that interface will represent the ability of appending events.",
    "start": "527173",
    "end": "533696"
  },
  {
    "text": "And for each event I want event, type event, event.",
    "start": "536315",
    "end": "546592"
  },
  {
    "text": "But I would like as well to have the schema for that event.",
    "start": "548477",
    "end": "552865"
  },
  {
    "text": "So schema that takes the event.",
    "start": "553732",
    "end": "557236"
  },
  {
    "text": "And I don't care too much about the encoded chip. It's fine for me to be any but I don't",
    "start": "559488",
    "end": "566846"
  },
  {
    "text": "want any context for now. And that is indeed an effectful operation",
    "start": "566846",
    "end": "572167"
  },
  {
    "text": "that won't return me nothing for now.",
    "start": "572167",
    "end": "577223"
  },
  {
    "text": "And there could be an error such as failure in persisting but for now we",
    "start": "578757",
    "end": "584329"
  },
  {
    "text": "don't care about it. We'll start real simple and evolve from that. OK.",
    "start": "584330",
    "end": "589185"
  },
  {
    "text": "And then when we create our event source aggregate we want to use this interface",
    "start": "590035",
    "end": "597910"
  },
  {
    "text": "to ensure that we persist messages into our actual storage.",
    "start": "597910",
    "end": "602431"
  },
  {
    "text": "OK. So let's start here by seeing things like OK.",
    "start": "604800",
    "end": "610422"
  },
  {
    "text": "I would like to append events and that's fine.",
    "start": "610472",
    "end": "615211"
  },
  {
    "text": "But I would also like to be able to read events.",
    "start": "615861",
    "end": "620382"
  },
  {
    "text": "So read. And in order to be able to read events I",
    "start": "621333",
    "end": "626805"
  },
  {
    "text": "think that I need two things. I want to know basically the both the",
    "start": "626805",
    "end": "636732"
  },
  {
    "text": "schema for the events that can be persisted and also the",
    "start": "636732",
    "end": "643289"
  },
  {
    "text": "journals I want to read. OK. So maybe we can say something like I want",
    "start": "643289",
    "end": "649411"
  },
  {
    "text": "to read something from an aggregate route",
    "start": "649411",
    "end": "654450"
  },
  {
    "text": "and we will pass in aggregate route.",
    "start": "654450",
    "end": "657436"
  },
  {
    "text": "And this is the aggregate. And I also want an aggregate.",
    "start": "665861",
    "end": "670950"
  },
  {
    "text": "ID to read from. And for now I think that aggregate ID has",
    "start": "672067",
    "end": "677756"
  },
  {
    "text": "been always be defined but just a string I think. But maybe that's not best.",
    "start": "677756",
    "end": "684430"
  },
  {
    "text": "Let me have a look at message.",
    "start": "685447",
    "end": "689468"
  },
  {
    "text": "Yeah. For now we have just defined that as a non empty string. That's not so rude.",
    "start": "690803",
    "end": "698209"
  },
  {
    "text": "Maybe we can create a new domain type for that new file.",
    "start": "698727",
    "end": "703966"
  },
  {
    "text": "Aggregate ID. And we'll do something like import everything.",
    "start": "704750",
    "end": "711557"
  },
  {
    "text": "as schema from.",
    "start": "711557",
    "end": "713325"
  },
  {
    "text": "Schema schema export const class.",
    "start": "718263",
    "end": "723669"
  },
  {
    "text": "aggregate ID extends schema non empty string.",
    "start": "725304",
    "end": "731860"
  },
  {
    "text": "Schema. Anointations. I want to identify that as an aggregate.",
    "start": "733445",
    "end": "741904"
  },
  {
    "text": "Id. That's perfect. OK.",
    "start": "744640",
    "end": "749845"
  },
  {
    "text": "And now we can update our message to import everything as aggregate ID from.",
    "start": "750512",
    "end": "760988"
  },
  {
    "text": "aggregate ID. And here. Type of",
    "start": "763842",
    "end": "769364"
  },
  {
    "text": "Aggregate ID. Aggregate ID. OK.",
    "start": "771483",
    "end": "774803"
  },
  {
    "text": "Ideally we shouldn't have broken anything. Ideally.",
    "start": "776705",
    "end": "781126"
  },
  {
    "text": "Because right now they are equivalent so let's try to run our tests.",
    "start": "782327",
    "end": "787415"
  },
  {
    "text": "Yeah. They are all passing I think. Yep.",
    "start": "788350",
    "end": "792954"
  },
  {
    "text": "Perfect. And now let's go back where we were.",
    "start": "794289",
    "end": "799094"
  },
  {
    "text": "We were seeing here in our scratch file. We were seeing that we want to maybe",
    "start": "799411",
    "end": "804899"
  },
  {
    "text": "import a aggregate ID.",
    "start": "804900",
    "end": "807536"
  },
  {
    "text": "But maybe let's do something like maybe I want to change that into export const.",
    "start": "810539",
    "end": "816445"
  },
  {
    "text": "Aggregate ID. equals That's fine.",
    "start": "817329",
    "end": "822501"
  },
  {
    "text": "Export. For. aggregate ID equals.",
    "start": "823168",
    "end": "829241"
  },
  {
    "text": "schema dot schema",
    "start": "831944",
    "end": "833845"
  },
  {
    "text": "Perfect. And that's a string for now. Perfect.",
    "start": "840369",
    "end": "845140"
  },
  {
    "text": "And this is a schema. Perfect. We need. I will say that by",
    "start": "846442",
    "end": "852748"
  },
  {
    "text": "putting a dollar sign at the end And in our message we want to type all to",
    "start": "852748",
    "end": "859755"
  },
  {
    "text": "the aggregate ID schema. That's perfect. And back into the",
    "start": "859755",
    "end": "865644"
  },
  {
    "text": "scratch we want to import.",
    "start": "865644",
    "end": "869113"
  },
  {
    "text": "Everything as Aggregate ID from.",
    "start": "871533",
    "end": "875270"
  },
  {
    "text": "Aggregate ID. And now we can see.",
    "start": "876788",
    "end": "881727"
  },
  {
    "text": "Aggregate ID. And I want to be able to",
    "start": "882861",
    "end": "887916"
  },
  {
    "text": "read the journal from sequence. And this will be a number.",
    "start": "887916",
    "end": "893555"
  },
  {
    "text": "Then this ideally will say we have a journal that does this event. And I want to start reading from a",
    "start": "895674",
    "end": "901330"
  },
  {
    "text": "specific point in time. And going on. And trying to recreate the state from that.",
    "start": "901330",
    "end": "905550"
  },
  {
    "text": "Most of the times this will be zero When we start reading from the beginning.",
    "start": "906418",
    "end": "911490"
  },
  {
    "text": "But well I can see situations where I would like to read.",
    "start": "911990",
    "end": "917813"
  },
  {
    "text": "mayve from a specific point in time. Instead of going back to the beginning.",
    "start": "918263",
    "end": "922084"
  },
  {
    "text": "And the other thing that we are missing here is the schema of the events.",
    "start": "923452",
    "end": "929808"
  },
  {
    "text": "So maybe something like event schema extends. And here you will have",
    "start": "930609",
    "end": "937533"
  },
  {
    "text": "things like schema, schema all.",
    "start": "937533",
    "end": "943105"
  },
  {
    "text": "And this and this. Event schema.",
    "start": "944456",
    "end": "947476"
  },
  {
    "text": "Of type event schema.",
    "start": "949461",
    "end": "953315"
  },
  {
    "text": "Perfect. And the return type here.",
    "start": "955701",
    "end": "960772"
  },
  {
    "text": "Instead of having a single effect that returns a list of events.",
    "start": "962674",
    "end": "968413"
  },
  {
    "text": "That could be one choice. I think we could opt in for",
    "start": "968730",
    "end": "973735"
  },
  {
    "text": "using streams from effect. Which are pool based stream. And say import as",
    "start": "973735",
    "end": "980142"
  },
  {
    "text": "stream from effect schema. Sorry from effect stream.",
    "start": "980142",
    "end": "986431"
  },
  {
    "text": "Stream. And now here we can say that this function returns a stream.",
    "start": "988917",
    "end": "995123"
  },
  {
    "text": "of schema schema type event schema.",
    "start": "996725",
    "end": "1007552"
  },
  {
    "text": "Okay. So this is the basic interface that will allow to persist an",
    "start": "1010739",
    "end": "1017545"
  },
  {
    "text": "event into the event stream. Maybe we want also to",
    "start": "1017546",
    "end": "1026088"
  },
  {
    "text": "want the information. Or this sequence we want to append.",
    "start": "1026088",
    "end": "1031860"
  },
  {
    "text": "So maybe we can say something like schema's first argument.",
    "start": "1034229",
    "end": "1038400"
  },
  {
    "text": "And then we pass in the expected sequence.",
    "start": "1040686",
    "end": "1044990"
  },
  {
    "text": "And this will be a number. And basically we have an event journal with event zero, one, two, three.",
    "start": "1046892",
    "end": "1053548"
  },
  {
    "text": "When we want to append we need to know where we expect to append.",
    "start": "1053782",
    "end": "1058520"
  },
  {
    "text": "And that way if that is not the last sequence it will fail.",
    "start": "1059171",
    "end": "1064175"
  },
  {
    "text": "Or if someone is running in a race condition. Where basically we have two writers",
    "start": "1066778",
    "end": "1071867"
  },
  {
    "text": "trying to write in the same journal. That will fail because they will have both the same expected sequence.",
    "start": "1071867",
    "end": "1078472"
  },
  {
    "text": "So one of the writer will fail and restart again, retry.",
    "start": "1078907",
    "end": "1083695"
  },
  {
    "text": "So here it appends schema expected sequence and the event itself.",
    "start": "1085380",
    "end": "1091503"
  },
  {
    "text": "Event. Okay that's perfect. And maybe just a little documentation.",
    "start": "1093121",
    "end": "1100429"
  },
  {
    "text": "This function allows to append new",
    "start": "1101446",
    "end": "1110772"
  },
  {
    "text": "events into the journal. We expect to receive the expected",
    "start": "1110772",
    "end": "1121183"
  },
  {
    "text": "sequence number in order to",
    "start": "1121183",
    "end": "1127072"
  },
  {
    "text": "check for race conditions.",
    "start": "1127072",
    "end": "1130575"
  },
  {
    "text": "Perfect. And read. Okay. And this function returns a stream of",
    "start": "1133979",
    "end": "1146507"
  },
  {
    "text": "the persisted events into the journal.",
    "start": "1146508",
    "end": "1151029"
  },
  {
    "text": "Perfect Okay so now we have an event journal storage.",
    "start": "1153014",
    "end": "1159104"
  },
  {
    "text": "And maybe we can create a file for that. So here.",
    "start": "1160222",
    "end": "1165559"
  },
  {
    "text": "Here. New file.",
    "start": "1166978",
    "end": "1171967"
  },
  {
    "text": "We will have the event journals storage",
    "start": "1172768",
    "end": "1177856"
  },
  {
    "text": "Yes. Perfect. Now we will remove this definition in here.",
    "start": "1178890",
    "end": "1184062"
  },
  {
    "text": "Perfect. export interface Let me check. the required input we need.",
    "start": "1187549",
    "end": "1194689"
  },
  {
    "text": "And we need to import everything as aggregate root from aggregate root.",
    "start": "1195223",
    "end": "1203482"
  },
  {
    "text": "import everything as schema. From, guess what?",
    "start": "1205150",
    "end": "1210922"
  },
  {
    "text": "effect schema schema. And we need to import",
    "start": "1211973",
    "end": "1217229"
  },
  {
    "text": "We import a stream. Stream. Yep, from",
    "start": "1217596",
    "end": "1222083"
  },
  {
    "text": "effect Stream. That's perfect.",
    "start": "1223084",
    "end": "1227923"
  },
  {
    "text": "And let builds check.",
    "start": "1228773",
    "end": "1232210"
  },
  {
    "text": "What we are missing. The aggregate ID. Import everything as aggregate ID.",
    "start": "1233879",
    "end": "1239701"
  },
  {
    "text": "From. aggregate ID.",
    "start": "1241036",
    "end": "1244673"
  },
  {
    "text": "And yeah. Yep. We are still having a one. Oh effect",
    "start": "1247259",
    "end": "1252731"
  },
  {
    "text": "Yep. we need effect as well. import everything as effect from effect effect.",
    "start": "1252948",
    "end": "1261890"
  },
  {
    "text": "Yes, yes, yes. perfect. Now we don't have any errors as well.",
    "start": "1265310",
    "end": "1274102"
  },
  {
    "text": "Okay. So let's try to write maybe mostly as",
    "start": "1274369",
    "end": "1280575"
  },
  {
    "text": "something that we will use in tests. Let's try to build an in-memory",
    "start": "1280575",
    "end": "1287148"
  },
  {
    "text": "implementation of the event journal. And maybe we can do something like...",
    "start": "1287148",
    "end": "1293255"
  },
  {
    "text": "First we can define a tag. So...",
    "start": "1295624",
    "end": "1298726"
  },
  {
    "text": "import everything as context From. effect",
    "start": "1300812",
    "end": "1305867"
  },
  {
    "text": "context Okay. export class",
    "start": "1307485",
    "end": "1311573"
  },
  {
    "text": "Oh yeah, I know. There is this new fancy API I want to try from effect that allows",
    "start": "1312607",
    "end": "1318546"
  },
  {
    "text": "you to create both the type definition and the",
    "start": "1318546",
    "end": "1323951"
  },
  {
    "text": "actual tag in the same thing.",
    "start": "1323952",
    "end": "1328623"
  },
  {
    "text": "So I should be able to do something like... Let me run in just this one for a second.",
    "start": "1329140",
    "end": "1334396"
  },
  {
    "text": "I should be able to do something like... Extends, context.",
    "start": "1335246",
    "end": "1340034"
  },
  {
    "text": "And I think I need to provide in the ID for that.",
    "start": "1343672",
    "end": "1349344"
  },
  {
    "text": "Yeah. So event journal storage maybe.",
    "start": "1349911",
    "end": "1354849"
  },
  {
    "text": "And this is the... Event journal.",
    "start": "1356201",
    "end": "1361473"
  },
  {
    "text": "Oh no, I need to provide that later. This one. Then I need to provide the event journal.",
    "start": "1363858",
    "end": "1371566"
  },
  {
    "text": "Wait, we need that maybe Yep. Perfect.",
    "start": "1373451",
    "end": "1378256"
  },
  {
    "text": "And then I think we have a link.",
    "start": "1379975",
    "end": "1383528"
  },
  {
    "text": "Yep, you need two type arguments, which is the second one. the shape, yeah.",
    "start": "1385480",
    "end": "1389884"
  },
  {
    "text": "And that's what we have here. So if I copy this one and",
    "start": "1390485",
    "end": "1398309"
  },
  {
    "text": "put it here and format it. Yep. This is a new fancy API from effect that",
    "start": "1398309",
    "end": "1405567"
  },
  {
    "text": "allows you to define in the same place both the text. Both the tag for a service.",
    "start": "1405567",
    "end": "1411221"
  },
  {
    "text": "So event journal storage. Let's just use that thing.",
    "start": "1412107",
    "end": "1417445"
  },
  {
    "text": "On the same thing. And I think one of the benefits of that is that we should get",
    "start": "1419798",
    "end": "1425704"
  },
  {
    "text": "for free things like... Event journal storage.",
    "start": "1425704",
    "end": "1432243"
  },
  {
    "text": "const a equals. Event journal storage. There are a lot.",
    "start": "1433611",
    "end": "1439167"
  },
  {
    "text": "There should be ideally things that...",
    "start": "1440752",
    "end": "1443320"
  },
  {
    "text": "Oh, here they are. Yeah, that effect.",
    "start": "1452981",
    "end": "1455400"
  },
  {
    "text": "Yeah, yeah, yeah. That's really nice. Yeah.",
    "start": "1458453",
    "end": "1463792"
  },
  {
    "text": "Okay, so enough messing around. And now we need to create, as I said",
    "start": "1465293",
    "end": "1470415"
  },
  {
    "text": "before, an in memory implementation. So let's start with saying export const",
    "start": "1470415",
    "end": "1480108"
  },
  {
    "text": "in memory equals effect dot gen.",
    "start": "1480108",
    "end": "1484446"
  },
  {
    "text": "Function. Start. Okay. So I need to create a",
    "start": "1487315",
    "end": "1494172"
  },
  {
    "text": "ref or something in memory. So import everything as ref from effect ref.",
    "start": "1494172",
    "end": "1501463"
  },
  {
    "text": "And the ref will hold basically the state. So and we'll say const state",
    "start": "1502280",
    "end": "1509971"
  },
  {
    "text": "equals yield star ref dot make",
    "start": "1509971",
    "end": "1515143"
  },
  {
    "text": "And we will start by having... We need to index both the",
    "start": "1515977",
    "end": "1523151"
  },
  {
    "text": "aggregate root, the aggregate ID, and then we will have an array.",
    "start": "1523151",
    "end": "1527922"
  },
  {
    "text": "So we can say something like...",
    "start": "1530375",
    "end": "1533711"
  },
  {
    "text": "Maybe we can platter it out. But I would like to...",
    "start": "1535430",
    "end": "1540434"
  },
  {
    "text": "index that. So maybe we can use something like...",
    "start": "1540451",
    "end": "1543771"
  },
  {
    "text": "import everything as hash map From effect hash map",
    "start": "1545573",
    "end": "1552063"
  },
  {
    "text": "We will use an hash map And the hash map will have",
    "start": "1553932",
    "end": "1560305"
  },
  {
    "text": "as key the aggregate root,",
    "start": "1560305",
    "end": "1565760"
  },
  {
    "text": "aggregate root. And as value, another hash map that has as",
    "start": "1567462",
    "end": "1573251"
  },
  {
    "text": "key the aggregate ID. And as value we will have basically an array.",
    "start": "1573251",
    "end": "1579624"
  },
  {
    "text": "Yeah, that's fine. So now you're complaining.",
    "start": "1580475",
    "end": "1585313"
  },
  {
    "text": "You're complaining why? Because here we want any value.",
    "start": "1585980",
    "end": "1591034"
  },
  {
    "text": "Yeah, and oh yeah, empty.",
    "start": "1592053",
    "end": "1597475"
  },
  {
    "text": "And make takes, if I remember correctly,",
    "start": "1602630",
    "end": "1607001"
  },
  {
    "text": "for hash map, go to dedinition",
    "start": "1608770",
    "end": "1612407"
  },
  {
    "text": "Yeah, takes, value, then makes that. Okay, so make, then...",
    "start": "1615109",
    "end": "1621014"
  },
  {
    "text": "Oh, that's the error. Yeah, we need to provide the actual value that will be an empty",
    "start": "1621583",
    "end": "1627221"
  },
  {
    "text": "hash map by default Yes. So this is our state.",
    "start": "1627455",
    "end": "1632143"
  },
  {
    "text": "We have the ref that will hold our aggregate root.",
    "start": "1632660",
    "end": "1637715"
  },
  {
    "text": "And then we have our aggregate ID. And finally we have the list of events.",
    "start": "1638316",
    "end": "1642604"
  },
  {
    "text": "And that's perfect. But first we need to ensure",
    "start": "1643655",
    "end": "1649894"
  },
  {
    "text": "that we have proper hashing.",
    "start": "1649894",
    "end": "1656251"
  },
  {
    "text": "Either maybe we can use an aggregate name or have proper hashing of aggregates in",
    "start": "1657151",
    "end": "1663625"
  },
  {
    "text": "order to be able to ensure that we look up correctly. So maybe that starts simple by you having just a string here,",
    "start": "1663625",
    "end": "1670265"
  },
  {
    "text": "which is the aggregate name, the ID, and et cetera. So let's start by writing the append function.",
    "start": "1670581",
    "end": "1676154"
  },
  {
    "text": "So const append will be something that we will take in.",
    "start": "1677055",
    "end": "1682427"
  },
  {
    "text": "We will take in basically the schema we",
    "start": "1684445",
    "end": "1691085"
  },
  {
    "text": "don't care because we are using in memory, the expected sequence, and the event.",
    "start": "1691085",
    "end": "1696007"
  },
  {
    "text": "Oh yeah, you can see here that I forgot something really important.",
    "start": "1696607",
    "end": "1700745"
  },
  {
    "text": "We still need to provide the aggregate and the aggregate root because we need to tell to which",
    "start": "1702080",
    "end": "1708703"
  },
  {
    "text": "aggregate we want to append things. Here, here, yeah.",
    "start": "1708703",
    "end": "1714309"
  },
  {
    "text": "That's that. So let's format everything.",
    "start": "1715410",
    "end": "1720981"
  },
  {
    "text": "Yeah. Aggregate root, aggregate ID, and maybe we can put it later,",
    "start": "1721349",
    "end": "1726921"
  },
  {
    "text": "the expected sequence, the schema, and event. Yeah, I feel very comfortable with this.",
    "start": "1726921",
    "end": "1732743"
  },
  {
    "text": "The sequence, okay, so they are visibly similar. And then we have const append, which is now we have this is",
    "start": "1733711",
    "end": "1744288"
  },
  {
    "text": "basically event journal storage type append.",
    "start": "1744288",
    "end": "1751462"
  },
  {
    "text": "And this will be the aggregate root, the aggregate ID,",
    "start": "1753598",
    "end": "1761723"
  },
  {
    "text": "and then we have expected sequence, and then we have the schema,",
    "start": "1763074",
    "end": "1770581"
  },
  {
    "text": "you don't care about that, and we have finally the event.",
    "start": "1770915",
    "end": "1775136"
  },
  {
    "text": "Okay? So this will be an effect, and we need to update our app,",
    "start": "1776187",
    "end": "1780975"
  },
  {
    "text": "and we need to say, first, we can do that",
    "start": "1782660",
    "end": "1788900"
  },
  {
    "text": "only one shot, I think. Yeah, because our app is in memory, so we can do maybe just ref.update,",
    "start": "1788900",
    "end": "1801262"
  },
  {
    "text": "and we have kind of our state ref Okay, and now we need to provide a",
    "start": "1803448",
    "end": "1809002"
  },
  {
    "text": "function that given the old value, the old state creates the new one.",
    "start": "1809003",
    "end": "1813474"
  },
  {
    "text": "So that needs to happen in some steps, I think.",
    "start": "1815226",
    "end": "1821249"
  },
  {
    "text": "I think that need to first get, we need",
    "start": "1822850",
    "end": "1836214"
  },
  {
    "text": "first to get into our,",
    "start": "1836214",
    "end": "1840501"
  },
  {
    "text": "from our old state into HashMap.get the aggregate root dot,",
    "start": "1841402",
    "end": "1850428"
  },
  {
    "text": "aggregate root name, okay.",
    "start": "1850611",
    "end": "1854080"
  },
  {
    "text": "This may, we need to import this, okay,",
    "start": "1855983",
    "end": "1861506"
  },
  {
    "text": "and this will return an option, and we are not fine by that, and that's",
    "start": "1862056",
    "end": "1869063"
  },
  {
    "text": "because basically we can say option, we need to import option maybe,",
    "start": "1869063",
    "end": "1874051"
  },
  {
    "text": "import everything as option from Effect option, okay,",
    "start": "1875453",
    "end": "1882960"
  },
  {
    "text": "and option get or else.",
    "start": "1887131",
    "end": "1891302"
  },
  {
    "text": "So if we didn't find anything under this aggregate root name,",
    "start": "1892353",
    "end": "1897742"
  },
  {
    "text": "we start with hashmap.empty,",
    "start": "1898192",
    "end": "1903381"
  },
  {
    "text": "so we will basically get an empty one, it doesn't exist yet for that specific aggregate root,",
    "start": "1904682",
    "end": "1911154"
  },
  {
    "text": "and then we also need, now",
    "start": "1912273",
    "end": "1917410"
  },
  {
    "text": "that we have the HashMap entry,",
    "start": "1917411",
    "end": "1921983"
  },
  {
    "text": "this is the entry, and now this entry, we need to say something like,",
    "start": "1924452",
    "end": "1928990"
  },
  {
    "text": "HashMap.get, and we will get",
    "start": "1929473",
    "end": "1935196"
  },
  {
    "text": "basically the aggregate ID, and this is basically",
    "start": "1935196",
    "end": "1943271"
  },
  {
    "text": "the inner HashMap, this one, the one that has this, and for this,",
    "start": "1943271",
    "end": "1953014"
  },
  {
    "text": "maybe we can say something like, const innerMap equals",
    "start": "1953447",
    "end": "1959086"
  },
  {
    "text": "from maybe current array, yep, and this",
    "start": "1961255",
    "end": "1971315"
  },
  {
    "text": "is the current array here, as you can see, that may not exist yet, and as again,",
    "start": "1971315",
    "end": "1978573"
  },
  {
    "text": "if it doesn't exist yet, we can say something like, option get or else, and use an empty",
    "start": "1978889",
    "end": "1985513"
  },
  {
    "text": "array, it doesn't exist yet. So this is basically the current event array,",
    "start": "1985513",
    "end": "1994288"
  },
  {
    "text": "and we will say that we want",
    "start": "1997108",
    "end": "2002413"
  },
  {
    "text": "to basically concat the events,",
    "start": "2002413",
    "end": "2007101"
  },
  {
    "text": "and set those into the key of the aggregate root.",
    "start": "2008686",
    "end": "2013708"
  },
  {
    "text": "So we should have a method, modify at, I think,",
    "start": "2014141",
    "end": "2019030"
  },
  {
    "text": "they will be invoked with the current value of the key, if exists or no key if no such value exists, yep.",
    "start": "2028406",
    "end": "2038282"
  },
  {
    "text": "Perfect, so modify at, old state,",
    "start": "2040117",
    "end": "2044605"
  },
  {
    "text": "and the key aggregate root, aggregate root name,",
    "start": "2045790",
    "end": "2051194"
  },
  {
    "text": "and this is our update function,",
    "start": "2052063",
    "end": "2053546"
  },
  {
    "text": "we'll have maybe state,",
    "start": "2058185",
    "end": "2064842"
  },
  {
    "text": "and this should be an option, yep, an option of an HashMap, and we",
    "start": "2065393",
    "end": "2071349"
  },
  {
    "text": "will say something like, pipe, maybe state option",
    "start": "2071349",
    "end": "2078572"
  },
  {
    "text": "get or else HashMap empty here, perfect,",
    "start": "2078889",
    "end": "2087064"
  },
  {
    "text": "and now we have the HashMap, and here we'll say again,",
    "start": "2088382",
    "end": "2093020"
  },
  {
    "text": "HashMap, modify at,",
    "start": "2094772",
    "end": "2101328"
  },
  {
    "text": "see is aggregateID and maybe event list equals,",
    "start": "2103114",
    "end": "2111205"
  },
  {
    "text": "here maybe event list option,",
    "start": "2113641",
    "end": "2118662"
  },
  {
    "text": "get or else, empty array and then we will have also import everything",
    "start": "2119146",
    "end": "2129056"
  },
  {
    "text": "as array from effect array,",
    "start": "2129056",
    "end": "2132725"
  },
  {
    "text": "array.append, and we'll have our event,",
    "start": "2137381",
    "end": "2143053"
  },
  {
    "text": "here, that's fine, and what are you complaining about?",
    "start": "2149527",
    "end": "2155432"
  },
  {
    "text": "Oh, modify at wants to, let's say, let's go to the definition, it uses an update function, and the",
    "start": "2160287",
    "end": "2169313"
  },
  {
    "text": "update function takes in an option and removes an option, perfect, so we need to say basically,",
    "start": "2169313",
    "end": "2175736"
  },
  {
    "text": "just here we get or else, we modify, and",
    "start": "2176737",
    "end": "2182960"
  },
  {
    "text": "then here we say option some,",
    "start": "2182960",
    "end": "2192269"
  },
  {
    "text": "and the same goes here, option some,",
    "start": "2194522",
    "end": "2200044"
  },
  {
    "text": "yeah, you're right, you're right, you're right, you're right,",
    "start": "2209954",
    "end": "2213541"
  },
  {
    "text": "we want to say that this is this one, maybestate,",
    "start": "2219129",
    "end": "2224901"
  },
  {
    "text": "and if we have that, if we don't have that,",
    "start": "2227037",
    "end": "2230090"
  },
  {
    "text": "Why are you saying that A is the thing, it's not A, it's something completely",
    "start": "2233227",
    "end": "2240501"
  },
  {
    "text": "different, yeah, let's see, see, modify here, here, have that,",
    "start": "2240501",
    "end": "2251128"
  },
  {
    "text": "but you're not happy with that, and why",
    "start": "2261088",
    "end": "2266160"
  },
  {
    "text": "are you not happy with that, I don't fully understand, so let's start in the event thing, yeah,",
    "start": "2266160",
    "end": "2272550"
  },
  {
    "text": "oh, because this is, oh yeah, I see, I see, I see, I see,",
    "start": "2273934",
    "end": "2279422"
  },
  {
    "text": "HashMap.empty takes an aggregateID  and there's any,",
    "start": "2280441",
    "end": "2287565"
  },
  {
    "text": "yeah, now you have to, yeah, that's great, that's it, and that",
    "start": "2288148",
    "end": "2294672"
  },
  {
    "text": "should be what we were looking for,",
    "start": "2294672",
    "end": "2297825"
  },
  {
    "text": "here, here, here,",
    "start": "2301562",
    "end": "2304832"
  },
  {
    "text": "and now we need to do the same thing, but to read all of the events,",
    "start": "2307935",
    "end": "2313741"
  },
  {
    "text": "so we can say const read, and we'll need event journal storage,",
    "start": "2314842",
    "end": "2320431"
  },
  {
    "text": "type read",
    "start": "2320447",
    "end": "2326353"
  },
  {
    "text": "equals, aggregate root aggregate id",
    "start": "2326353",
    "end": "2333243"
  },
  {
    "text": "from sequence",
    "start": "2334161",
    "end": "2337815"
  },
  {
    "text": "and we'll run the schema we don't care about, because we are writing an in memory representation, so we don't need, again,",
    "start": "2339249",
    "end": "2345255"
  },
  {
    "text": "to serialize or deserialize, so let's see, now we should do something",
    "start": "2345255",
    "end": "2354181"
  },
  {
    "text": "exactly like before, same like pipe, state, ref dot",
    "start": "2354181",
    "end": "2364307"
  },
  {
    "text": "get from our state,",
    "start": "2364308",
    "end": "2369680"
  },
  {
    "text": "we read our entire state, when we have our entire state, we say something like,",
    "start": "2370247",
    "end": "2377888"
  },
  {
    "text": "Effect.map we have state, state value,",
    "start": "2379223",
    "end": "2387330"
  },
  {
    "text": "and from the state value, we say state value,",
    "start": "2389600",
    "end": "2393504"
  },
  {
    "text": "HashMap dot get, and the key we want",
    "start": "2394822",
    "end": "2400010"
  },
  {
    "text": "to get is aggregate root",
    "start": "2400010",
    "end": "2403714"
  },
  {
    "text": "aggregate root name, and if we don't have that, again, get or else, HashMap, empty,",
    "start": "2405516",
    "end": "2414475"
  },
  {
    "text": "with a string key and any as value,",
    "start": "2415442",
    "end": "2417944"
  },
  {
    "text": "and then we want again to say that, yeah,",
    "start": "2423817",
    "end": "2433309"
  },
  {
    "text": "we get the first level, which is from the aggregator's name, and then we say, again, HashMap dot get,",
    "start": "2433544",
    "end": "2439666"
  },
  {
    "text": "we want to became the aggregate id, and if we don't have that, we",
    "start": "2440200",
    "end": "2447691"
  },
  {
    "text": "are fine returning as any,",
    "start": "2447691",
    "end": "2451045"
  },
  {
    "text": "and this will think the type script is yelling at us,",
    "start": "2454164",
    "end": "2459235"
  },
  {
    "text": "because now we have an array of events that is not acceptable,",
    "start": "2459236",
    "end": "2465876"
  },
  {
    "text": "to an array of schema, and they are not also compatible,",
    "start": "2466110",
    "end": "2471498"
  },
  {
    "text": "because this is an effect and is not a stream, so first we need also",
    "start": "2471498",
    "end": "2478789"
  },
  {
    "text": "to do something like, stream from iterable, and",
    "start": "2478789",
    "end": "2486280"
  },
  {
    "text": "that will return a stream, but now it's a stream of any, and not of that,",
    "start": "2486280",
    "end": "2493420"
  },
  {
    "text": "so we need to stream",
    "start": "2493470",
    "end": "2499609"
  },
  {
    "text": "unwrap, I think, it's called, yeah, stream dot unwrap.",
    "start": "2499610",
    "end": "2505332"
  },
  {
    "text": "stream dot unwrap, what does is, if we have an effect that returns a stream, it unwraps the effect into the stream,",
    "start": "2505632",
    "end": "2512105"
  },
  {
    "text": "so that it's performed while acquisition and releasing, and then we have our perfect stream.",
    "start": "2512422",
    "end": "2518494"
  },
  {
    "text": "Perfect. And now we have defined both append and read,",
    "start": "2519296",
    "end": "2524084"
  },
  {
    "text": "and we will say return append and read,",
    "start": "2524401",
    "end": "2528704"
  },
  {
    "text": "and this is ideally our in-memory service, okay?",
    "start": "2529556",
    "end": "2536630"
  },
  {
    "text": "But now we need to convert this effect into a layer to use it.",
    "start": "2536880",
    "end": "2542436"
  },
  {
    "text": "So, let's say that import, everything",
    "start": "2543453",
    "end": "2551712"
  },
  {
    "text": "as layer from effect layer,",
    "start": "2551712",
    "end": "2557683"
  },
  {
    "text": "and we will see that we can convert this effect layer from effect,",
    "start": "2558602",
    "end": "2567110"
  },
  {
    "text": "and we need to provide the tag, which is our event journal storage,",
    "start": "2569680",
    "end": "2574785"
  },
  {
    "text": "and look at the magic, now we have a layer that constructs an event journal storage.",
    "start": "2575502",
    "end": "2582226"
  },
  {
    "text": "Perfect. Okay, so, here, now we have our effect,",
    "start": "2584127",
    "end": "2592002"
  },
  {
    "text": "we have something that is complaining about, let me see, oh yeah, from sequence, we",
    "start": "2592986",
    "end": "2598275"
  },
  {
    "text": "actually, we will use that, so that's a news value, perfect.",
    "start": "2598275",
    "end": "2603029"
  },
  {
    "text": "Okay, let's maybe write some test to ensure that this actually works.",
    "start": "2604147",
    "end": "2608268"
  },
  {
    "text": "new file, event journal storage,",
    "start": "2609286",
    "end": "2615492"
  },
  {
    "text": ".test, .ts, okay, so let's start by copying from this.",
    "start": "2617611",
    "end": "2625269"
  },
  {
    "text": "Okay, we will use just this, this, I",
    "start": "2625302",
    "end": "2637915"
  },
  {
    "text": "don't care about everything else. Perfect. So, we want to describe the capabilities",
    "start": "2637915",
    "end": "2644370"
  },
  {
    "text": "of our event journal storage,",
    "start": "2644371",
    "end": "2650794"
  },
  {
    "text": "and this is actually really really simple,",
    "start": "2654264",
    "end": "2659002"
  },
  {
    "text": "because what we want to do is just say,",
    "start": "2661054",
    "end": "2666343"
  },
  {
    "text": "we want first, here, it dot effect, we want to say",
    "start": "2669296",
    "end": "2681525"
  },
  {
    "text": "that journal should persist,",
    "start": "2681525",
    "end": "2687481"
  },
  {
    "text": "then read messages, events, sorry. Okay, and we need to",
    "start": "2689216",
    "end": "2699109"
  },
  {
    "text": "provide a function, okay, and first we need to define class,",
    "start": "2699109",
    "end": "2708151"
  },
  {
    "text": "sample event one, extents, schema,",
    "start": "2708635",
    "end": "2714691"
  },
  {
    "text": "tagged class, yeah, that's fine. Sample event one, yep, we want the",
    "start": "2715926",
    "end": "2728472"
  },
  {
    "text": "identifier, no, okay, so the tag is sample event one,",
    "start": "2728472",
    "end": "2733777"
  },
  {
    "text": "and the fields we will have, nothing for now,",
    "start": "2735228",
    "end": "2740801"
  },
  {
    "text": "and we will do the same thing as sample event two, sample event two, sample event two,",
    "start": "2741485",
    "end": "2748542"
  },
  {
    "text": "and cost event union equals schema union",
    "start": "2750077",
    "end": "2757534"
  },
  {
    "text": "of sample event one, sample event two, okay.",
    "start": "2757534",
    "end": "2762288"
  },
  {
    "text": "So here, we will say something like, we",
    "start": "2763957",
    "end": "2769413"
  },
  {
    "text": "want the effect dot gen function, so, const journal",
    "start": "2769413",
    "end": "2780841"
  },
  {
    "text": "equals yield, and here we went to import everything as",
    "start": "2780841",
    "end": "2788515"
  },
  {
    "text": "event journal storage, from",
    "start": "2788515",
    "end": "2797373"
  },
  {
    "text": "SRC event journal storage,",
    "start": "2797374",
    "end": "2801111"
  },
  {
    "text": "yield event, you will need journal storage, event journal, and now we will have an instance of, oh, nothing, why?",
    "start": "2803263",
    "end": "2812272"
  },
  {
    "text": "I don't know, why, why, why?",
    "start": "2812305",
    "end": "2818694"
  },
  {
    "text": "Oh, yield star, oh, yeah, and now we",
    "start": "2819796",
    "end": "2831992"
  },
  {
    "text": "have our journal, perfect, and now what we test is",
    "start": "2831992",
    "end": "2837197"
  },
  {
    "text": "that if we do something like,",
    "start": "2837197",
    "end": "2841568"
  },
  {
    "text": "first we need to provide dot pipe, effect dot provide, and",
    "start": "2844404",
    "end": "2857167"
  },
  {
    "text": "event journal storage in memory,",
    "start": "2857167",
    "end": "2863073"
  },
  {
    "text": "okay, and now you can see that it's empty, because before it added a requirement of the event journal,",
    "start": "2865775",
    "end": "2871231"
  },
  {
    "text": "and now we provide a in memory representation, now we try to say something like, yield journal dot append",
    "start": "2871231",
    "end": "2879588"
  },
  {
    "text": "an event, we need to provide an actual aggregator, yeah,",
    "start": "2879589",
    "end": "2884895"
  },
  {
    "text": "so we need to import everything as, do we really want the entire aggregators?",
    "start": "2884895",
    "end": "2891751"
  },
  {
    "text": "Yeah, maybe we are fine with just the aggregate name, I think. Yeah, let's change that.",
    "start": "2892502",
    "end": "2897991"
  },
  {
    "text": "Let evolve the thing. Yeah, yeah, maybe we can just say, here",
    "start": "2899259",
    "end": "2911304"
  },
  {
    "text": "we just aggregate root name,",
    "start": "2911304",
    "end": "2914074"
  },
  {
    "text": "and the symbols for the, oh yeah, that's the old one here,",
    "start": "2916326",
    "end": "2921231"
  },
  {
    "text": "so I forgot to delete that, and I was saying that I don't care about",
    "start": "2921748",
    "end": "2928287"
  },
  {
    "text": "actually using an object, I'm fine by just having the aggregate root name,",
    "start": "2928288",
    "end": "2934311"
  },
  {
    "text": "instead of the entire aggregate root definition for now, and string, aggregate root name, that's",
    "start": "2934945",
    "end": "2944421"
  },
  {
    "text": "the, that we need to apply here, this is aggregate root name, and this is",
    "start": "2944421",
    "end": "2954881"
  },
  {
    "text": "as well, the aggregate root name,",
    "start": "2954881",
    "end": "2956750"
  },
  {
    "text": "rename, aggregate root",
    "start": "2961254",
    "end": "2967093"
  },
  {
    "text": "name, and here as well,",
    "start": "2967093",
    "end": "2971047"
  },
  {
    "text": "aggregate root name, perfect, save, okay,",
    "start": "2973116",
    "end": "2979656"
  },
  {
    "text": "and now we don't need this dependency anymore, we have uncoupled our service, basically,",
    "start": "2983076",
    "end": "2990367"
  },
  {
    "text": "and that's always a good thing, okay, event union, so I will set append,",
    "start": "2991534",
    "end": "3000594"
  },
  {
    "text": "let's have a look, I will need to provide an aggregate root, products,",
    "start": "3001645",
    "end": "3005832"
  },
  {
    "text": "product one, and expect this sequence for",
    "start": "3008234",
    "end": "3014524"
  },
  {
    "text": "now, and we can say one, event union,",
    "start": "3014524",
    "end": "3019546"
  },
  {
    "text": "I will say new sample event two, okay,",
    "start": "3020730",
    "end": "3027036"
  },
  {
    "text": "and now we want to read events, all the journal, so journal.read for the",
    "start": "3027554",
    "end": "3036262"
  },
  {
    "text": "same product, products, product one,",
    "start": "3036262",
    "end": "3042385"
  },
  {
    "text": "from sequence zero, event union, and this will be a stream,",
    "start": "3045221",
    "end": "3050644"
  },
  {
    "text": "but I think that if we yield the stream, yeah, we cannot yield",
    "start": "3051294",
    "end": "3058034"
  },
  {
    "text": "that, but we can yield stream. Yeah, and to import stream, import",
    "start": "3058034",
    "end": "3065325"
  },
  {
    "text": "everything as stream from effect stream,",
    "start": "3065325",
    "end": "3071714"
  },
  {
    "text": "stream.read, collect, run collect here,",
    "start": "3073316",
    "end": "3080422"
  },
  {
    "text": "and these events now is a chunk, perfect, of those, and yeah, perfect,",
    "start": "3084844",
    "end": "3094070"
  },
  {
    "text": "improt everything as chunk from effect chunk,",
    "start": "3096072",
    "end": "3102662"
  },
  {
    "text": "and now we can see that, say that we expect chunk.length,",
    "start": "3107367",
    "end": "3120263"
  },
  {
    "text": "size of events to equal one,",
    "start": "3120296",
    "end": "3129172"
  },
  {
    "text": "basically, we have added an event, and we expect that to be",
    "start": "3130573",
    "end": "3137097"
  },
  {
    "text": "true, and that's indeed the case, and I want to add another test, which is",
    "start": "3137097",
    "end": "3144387"
  },
  {
    "text": "very similar, but what does is, we add an event to, basically, a journal",
    "start": "3144387",
    "end": "3153363"
  },
  {
    "text": "should differentiate entities,",
    "start": "3153363",
    "end": "3160370"
  },
  {
    "text": "if we add product one, but then we read from product two, I want that to be zero,",
    "start": "3161588",
    "end": "3166843"
  },
  {
    "text": "and let's check, if we run",
    "start": "3169312",
    "end": "3178087"
  },
  {
    "text": "this test, this pass, perfect, so all of our tests should",
    "start": "3178087",
    "end": "3184310"
  },
  {
    "text": "be passing right now, perfect, so we have now a simple in-memory event",
    "start": "3184310",
    "end": "3191384"
  },
  {
    "text": "journal, that's something that will allow us to mock",
    "start": "3191384",
    "end": "3196289"
  },
  {
    "text": "our implementations, so let's go on, now",
    "start": "3197724",
    "end": "3205265"
  },
  {
    "text": "that we have an event journal, storage, we append things",
    "start": "3205265",
    "end": "3211119"
  },
  {
    "text": "and we read things from that,",
    "start": "3211120",
    "end": "3213873"
  },
  {
    "text": "now we want to get into the stuff of actually defining the",
    "start": "3216342",
    "end": "3226953"
  },
  {
    "text": "actual event source entities,",
    "start": "3226953",
    "end": "3232292"
  },
  {
    "text": "so let's call it, let's go back to our",
    "start": "3232292",
    "end": "3238748"
  },
  {
    "text": "scratch, I want to call event journal, we are defined, we don't care anymore, so",
    "start": "3238748",
    "end": "3247824"
  },
  {
    "text": "I want to call it something like,",
    "start": "3247824",
    "end": "3250593"
  },
  {
    "text": "I need an aggregate root to create that, and that's perfect, because I will pick the name from that,",
    "start": "3253263",
    "end": "3260286"
  },
  {
    "text": "I want events from that, and that's fine,",
    "start": "3261287",
    "end": "3264173"
  },
  {
    "text": "but I also want, I also want here,",
    "start": "3268144",
    "end": "3273449"
  },
  {
    "text": "I also want here the ability to update",
    "start": "3276052",
    "end": "3281741"
  },
  {
    "text": "without using effects, so as we said before,",
    "start": "3281741",
    "end": "3287263"
  },
  {
    "text": "with that method we persist event, and I",
    "start": "3287297",
    "end": "3292685"
  },
  {
    "text": "was thinking that maybe we should add a type parameter, maybe, we should add a type parameter of",
    "start": "3292685",
    "end": "3299909"
  },
  {
    "text": "the environment that is required by the event journal, for now maybe we can start without that,",
    "start": "3299909",
    "end": "3306583"
  },
  {
    "text": "but I could see that that could be useful, but yeah, let's go back to what we were",
    "start": "3306883",
    "end": "3313389"
  },
  {
    "text": "trying to do and then we will say",
    "start": "3313389",
    "end": "3318828"
  },
  {
    "text": "that a syntax like that is really what I'm looking for,",
    "start": "3318828",
    "end": "3323483"
  },
  {
    "text": "you have the aggregate and then we have the schemas of the all possible events,",
    "start": "3323883",
    "end": "3331691"
  },
  {
    "text": "and that's perfect, the only thing is",
    "start": "3332709",
    "end": "3341401"
  },
  {
    "text": "that maybe in the event journal instead of,",
    "start": "3341401",
    "end": "3346689"
  },
  {
    "text": "instead of having, instead of having",
    "start": "3347724",
    "end": "3353229"
  },
  {
    "text": "things like a single union, if you",
    "start": "3353229",
    "end": "3360036"
  },
  {
    "text": "remember we passed a single union of the event schema, maybe it could be interesting instead of",
    "start": "3360036",
    "end": "3366676"
  },
  {
    "text": "having a union of passing an array with the single elements, and that's because if I know, I can statistically",
    "start": "3366676",
    "end": "3377486"
  },
  {
    "text": "know if I take a look at product name changed dot,",
    "start": "3377487",
    "end": "3383576"
  },
  {
    "text": "we should have tag in here, and this is the actual tag, so if we persist, if we",
    "start": "3384444",
    "end": "3394971"
  },
  {
    "text": "have, let's say, one of the storage that,",
    "start": "3394971",
    "end": "3397724"
  },
  {
    "text": "persist that as well, we could implement logic that actually fetches only the kind",
    "start": "3401711",
    "end": "3407967"
  },
  {
    "text": "of the events that are supported by the aggregate instead of hashing them all,",
    "start": "3407967",
    "end": "3414873"
  },
  {
    "text": "this could be really interesting indeed, yeah, that could be really interesting,",
    "start": "3415441",
    "end": "3420763"
  },
  {
    "text": "but that won't change much into the APIs, that will change just the event journal most of the GPI, I think that this API",
    "start": "3421314",
    "end": "3428588"
  },
  {
    "text": "will stay the same, yeah, okay, so let's go back, okay, so let's",
    "start": "3428588",
    "end": "3439632"
  },
  {
    "text": "rename this make, this a is basically the aggregate,",
    "start": "3439632",
    "end": "3445138"
  },
  {
    "text": "this is the aggregate and then we want to take in the list of the events",
    "start": "3459035",
    "end": "3466576"
  },
  {
    "text": "and then we have the update aggregate state, I think that maybe this already",
    "start": "3466576",
    "end": "3473599"
  },
  {
    "text": "fully describes what I want, yeah, I was thinking if there is something else I want, you may want to",
    "start": "3473599",
    "end": "3490399"
  },
  {
    "text": "provide an initial state as well, yeah, I",
    "start": "3490399",
    "end": "3495588"
  },
  {
    "text": "want to provide maybe an initial, a product aggregate initial state, both product aggregate and a state schema, and",
    "start": "3495588",
    "end": "3503529"
  },
  {
    "text": "then we provide an initial state, yeah, yeah, yeah, yeah, yeah, yeah, yeah, yeah,",
    "start": "3503529",
    "end": "3508734"
  },
  {
    "text": "Let's reason for a second about what we want.",
    "start": "3508734",
    "end": "3513156"
  },
  {
    "text": "So we want to have the aggregate that's",
    "start": "3513840",
    "end": "3520096"
  },
  {
    "text": "needed to get the correct stream.",
    "start": "3520096",
    "end": "3525567"
  },
  {
    "text": "And then we also want the event types.",
    "start": "3530623",
    "end": "3536479"
  },
  {
    "text": "I use it both to read and persist the storage.",
    "start": "3538164",
    "end": "3544119"
  },
  {
    "text": "And I'm debating if I want",
    "start": "3548474",
    "end": "3553513"
  },
  {
    "text": "to have a state shape or not.",
    "start": "3553513",
    "end": "3556082"
  },
  {
    "text": "For now let's try just with the state shape and do everything in a plural way.",
    "start": "3558818",
    "end": "3567710"
  },
  {
    "text": "As a starter we can do that. As a starter we can do that. And so I was saying yeah I want the",
    "start": "3567710",
    "end": "3575268"
  },
  {
    "text": "aggregate, I want the event style and I want the state shape.",
    "start": "3575268",
    "end": "3578955"
  },
  {
    "text": "And that means that I want also the initial state.",
    "start": "3581190",
    "end": "3584827"
  },
  {
    "text": "Okay.",
    "start": "3587079",
    "end": "3587413"
  },
  {
    "text": "So we want the... Maybe we can say something like interface.",
    "start": "3592185",
    "end": "3596922"
  },
  {
    "text": "and the arguments And I want the aggregate root to be of type aggregate",
    "start": "3622865",
    "end": "3632708"
  },
  {
    "text": "I also want as I said in the event types",
    "start": "3645087",
    "end": "3650442"
  },
  {
    "text": "events And let put the",
    "start": "3654981",
    "end": "3658501"
  },
  {
    "text": "This one? The thing is that I don't know if",
    "start": "3665124",
    "end": "3670563"
  },
  {
    "text": "typescript will be smart enough to understand that those key type signatures are not related to the other",
    "start": "3670563",
    "end": "3676736"
  },
  {
    "text": "I don't really think so usually it it's not so smart But we can try. Let's see if let's say",
    "start": "3677870",
    "end": "3685962"
  },
  {
    "text": "that those are the type parameters Yep, and then I want the args to be",
    "start": "3685962",
    "end": "3696072"
  },
  {
    "text": "logged, height being then true So you can use Source aggregate args",
    "start": "3696072",
    "end": "3703329"
  },
  {
    "text": "aggregate and then events Perfect save let's just look in here",
    "start": "3703329",
    "end": "3713272"
  },
  {
    "text": "now we will need to update that and say aggregate root is product aggregate and",
    "start": "3713873",
    "end": "3719862"
  },
  {
    "text": "events are Those ones",
    "start": "3720429",
    "end": "3725151"
  },
  {
    "text": "Okay Yeah doesn't seem to be so smart about it",
    "start": "3728688",
    "end": "3737146"
  },
  {
    "text": "Schema type events And why?",
    "start": "3738147",
    "end": "3744703"
  },
  {
    "text": "Yeah, that's yeah. Yeah. Yeah, that's true. That's true. Let's maybe just remove that",
    "start": "3744704",
    "end": "3749974"
  },
  {
    "text": "For now and have a look Oh, and they inferring that's occurring",
    "start": "3751994",
    "end": "3757550"
  },
  {
    "text": "They are are you inferring everything correctly? Yeah, it seems so",
    "start": "3758968",
    "end": "3765590"
  },
  {
    "text": "product name changed or product discontinued that's perfect and Now that we have that",
    "start": "3766709",
    "end": "3774967"
  },
  {
    "text": "Now that we have that",
    "start": "3774967",
    "end": "3777369"
  },
  {
    "text": "Now that we have that We could",
    "start": "3784593",
    "end": "3790232"
  },
  {
    "text": "We could we could we could See that maybe we can also",
    "start": "3791834",
    "end": "3797373"
  },
  {
    "text": "pass in here the state shape so",
    "start": "3797373",
    "end": "3801794"
  },
  {
    "text": "we want the state Extend a schema because they need to",
    "start": "3802461",
    "end": "3808084"
  },
  {
    "text": "persist anything schema dot schema dot all",
    "start": "3808084",
    "end": "3812271"
  },
  {
    "text": "And state in here",
    "start": "3816575",
    "end": "3822431"
  },
  {
    "text": "State extends schema schema state all",
    "start": "3825134",
    "end": "3831540"
  },
  {
    "text": "And this state of type state perfect",
    "start": "3832274",
    "end": "3836762"
  },
  {
    "text": "Now it's okay. It's complaining and let's say that the state is of kind, you know",
    "start": "3839348",
    "end": "3845905"
  },
  {
    "text": "For now, let's just use k dot string",
    "start": "3846839",
    "end": "3850409"
  },
  {
    "text": "Seems that it's working now what I really want to try if that is smart enough to",
    "start": "3855581",
    "end": "3861003"
  },
  {
    "text": "say that if I say member member joined",
    "start": "3861003",
    "end": "3866075"
  },
  {
    "text": "Are you complaining? Yeah Yeah, it's smart enough. Yeah. Yeah.",
    "start": "3866876",
    "end": "3873816"
  },
  {
    "text": "Yeah, it's smart enough. Yeah and That's really good maybe I can rename",
    "start": "3873816",
    "end": "3880589"
  },
  {
    "text": "these two event types",
    "start": "3880589",
    "end": "3883042"
  },
  {
    "text": "And this is the state yeah, perfect",
    "start": "3887580",
    "end": "3891183"
  },
  {
    "text": "and now the last thing that I need to pass in and",
    "start": "3892918",
    "end": "3898240"
  },
  {
    "text": "Maybe I can do that in here in the same function is",
    "start": "3898240",
    "end": "3903462"
  },
  {
    "text": "the reduce That even the state and the event",
    "start": "3903796",
    "end": "3911704"
  },
  {
    "text": "schema",
    "start": "3912438",
    "end": "3912771"
  },
  {
    "text": "Oh, yeah state is a schema as well. So",
    "start": "3920779",
    "end": "3923148"
  },
  {
    "text": "Will return an updated state so schema dot schema type",
    "start": "3930105",
    "end": "3936195"
  },
  {
    "text": "of the state",
    "start": "3937196",
    "end": "3938664"
  },
  {
    "text": "Okay, so right now",
    "start": "3943152",
    "end": "3945070"
  },
  {
    "text": "It should be complaining yeah because Here okay now it's complaining because we",
    "start": "3948324",
    "end": "3956065"
  },
  {
    "text": "are missing a required parameter which is reduce and We will see that we have our",
    "start": "3956065",
    "end": "3963656"
  },
  {
    "text": "state which is a string and Product name changed or product",
    "start": "3963656",
    "end": "3968711"
  },
  {
    "text": "discontinued. Perfect. So let's say that for example our state was a schema dot option",
    "start": "3968711",
    "end": "3975183"
  },
  {
    "text": "of a string and We could for example in our dream world",
    "start": "3976302",
    "end": "3982374"
  },
  {
    "text": "API to do something like event and then say switch",
    "start": "3982374",
    "end": "3987613"
  },
  {
    "text": "event tag and based on the case of",
    "start": "3988113",
    "end": "3993469"
  },
  {
    "text": "Product name changed do we want the state to be option dot some",
    "start": "3994703",
    "end": "3999275"
  },
  {
    "text": "some of the event dot new name",
    "start": "4000392",
    "end": "4005547"
  },
  {
    "text": "We need obviously to import option option from",
    "start": "4006031",
    "end": "4012054"
  },
  {
    "text": "Effect option and In case we have a product discontinued we",
    "start": "4012054",
    "end": "4020713"
  },
  {
    "text": "can just say return option dot none To say that the product is now discontinued. I",
    "start": "4020713",
    "end": "4028787"
  },
  {
    "text": "really really like this and Yeah, and obviously if someone needs for",
    "start": "4028787",
    "end": "4035744"
  },
  {
    "text": "example to say state dot I can also access the old state and",
    "start": "4035744",
    "end": "4040916"
  },
  {
    "text": "Into the event they also have headers with additional information like the",
    "start": "4041033",
    "end": "4046872"
  },
  {
    "text": "message ID and whatever. Yeah Yeah, yeah, I really really like this. Yeah, I think that we are",
    "start": "4046872",
    "end": "4052711"
  },
  {
    "text": "Going into the right direction Again Here that's really nice because now if I",
    "start": "4054830",
    "end": "4061387"
  },
  {
    "text": "say for example member joined it will complain that that's not one of the events of",
    "start": "4061387",
    "end": "4068344"
  },
  {
    "text": "The products aggregate. Yeah",
    "start": "4068427",
    "end": "4070262"
  },
  {
    "text": "Okay, so now that we have done that",
    "start": "4073832",
    "end": "4079571"
  },
  {
    "text": "we need nasically to define the APIs of our",
    "start": "4082708",
    "end": "4088047"
  },
  {
    "text": "Event-sourced aggregate and and I think that",
    "start": "4090432",
    "end": "4096654"
  },
  {
    "text": "the APIs are quite simple Because if I think about that",
    "start": "4098540",
    "end": "4104762"
  },
  {
    "text": "The kind of operation I want to do are basically accessing the current state of",
    "start": "4106014",
    "end": "4114223"
  },
  {
    "text": "the aggregate and if I would just want to read",
    "start": "4114540",
    "end": "4121028"
  },
  {
    "text": "the state that's it if I want to Update the state I need to append new",
    "start": "4121029",
    "end": "4126884"
  },
  {
    "text": "events into the aggregate",
    "start": "4126885",
    "end": "4128803"
  },
  {
    "text": "So we can do something like",
    "start": "4131990",
    "end": "4133992"
  },
  {
    "text": "I don't care about that anymore interface event sourced",
    "start": "4140783",
    "end": "4145987"
  },
  {
    "text": "aggregate not args, but just pick args aggregate. We will have the same type parameters of",
    "start": "4145988",
    "end": "4153194"
  },
  {
    "text": "The schema",
    "start": "4154430",
    "end": "4155464"
  },
  {
    "text": "Yep and Here we will have maybe",
    "start": "4160152",
    "end": "4166225"
  },
  {
    "text": "the API that just Modify maybe",
    "start": "4166225",
    "end": "4172664"
  },
  {
    "text": "and This modify",
    "start": "4174433",
    "end": "4177903"
  },
  {
    "text": "will have function that",
    "start": "4179621",
    "end": "4184359"
  },
  {
    "text": "have the current state and",
    "start": "4185310",
    "end": "4187296"
  },
  {
    "text": "Not sure if I want to pass in Maybe instead of passing in the current",
    "start": "4192100",
    "end": "4198239"
  },
  {
    "text": "state I could do something like I Get back both the function to read the",
    "start": "4198240",
    "end": "4206515"
  },
  {
    "text": "current state and want to append Yeah, yeah, yeah, yeah, I",
    "start": "4206515",
    "end": "4213105"
  },
  {
    "text": "Will basically get back read that will be an effect dot",
    "start": "4213105",
    "end": "4220312"
  },
  {
    "text": "Effect of different and it obviously needs to import effect",
    "start": "4221780",
    "end": "4226735"
  },
  {
    "text": "Want to have an effect that reads the schema dot schema dot type of our",
    "start": "4232875",
    "end": "4240716"
  },
  {
    "text": "Event sourced aggregate, so we have a state here",
    "start": "4243035",
    "end": "4251076"
  },
  {
    "text": "Yeah, and then I Want us to",
    "start": "4251994",
    "end": "4257382"
  },
  {
    "text": "legit append And that append will take in an event",
    "start": "4257900",
    "end": "4263272"
  },
  {
    "text": "Do I really care in the actual event sourced aggregate about the schema? I mean",
    "start": "4272464",
    "end": "4277569"
  },
  {
    "text": "I care about it when I make it But once I actually have the instance maybe",
    "start": "4277569",
    "end": "4283325"
  },
  {
    "text": "I don't care about the schema anymore Because the schema is just an internal",
    "start": "4283325",
    "end": "4289214"
  },
  {
    "text": "thing to persist it. Yeah I think that the aggregate is okay",
    "start": "4289214",
    "end": "4294703"
  },
  {
    "text": "And the events can be just",
    "start": "4295571",
    "end": "4299041"
  },
  {
    "text": "Let's just use the schema later on I think that I don't actually care about that an event. He is one of type",
    "start": "4302094",
    "end": "4309767"
  },
  {
    "text": "schema dot schema dot type of events",
    "start": "4310852",
    "end": "4315723"
  },
  {
    "text": "number I Can append one of these event and it will be ",
    "start": "4316525",
    "end": "4322431"
  },
  {
    "text": "This all modified will be an effect dot",
    "start": "4329688",
    "end": "4335544"
  },
  {
    "text": "Void",
    "start": "4338447",
    "end": "4338913"
  },
  {
    "text": "Okay Okay, so I can modify and The modify will have read and append",
    "start": "4346204",
    "end": "4353260"
  },
  {
    "text": "yeah, maybe I should extract those into something better",
    "start": "4353261",
    "end": "4359101"
  },
  {
    "text": "Yeah into something like Interface",
    "start": "4360168",
    "end": "4365674"
  },
  {
    "text": "Draft I will call that. Yeah draft",
    "start": "4373565",
    "end": "4377285"
  },
  {
    "text": "Extends I don't care about the aggregate because I already have that I",
    "start": "4381323",
    "end": "4386712"
  },
  {
    "text": "only care about I only care about Read yeah, I don't",
    "start": "4386712",
    "end": "4393285"
  },
  {
    "text": "care about the aggregate Yeah, and just care of all the events. Yeah",
    "start": "4393285",
    "end": "4397105"
  },
  {
    "text": "The other one is the state yeah And this will be a function as I said",
    "start": "4402244",
    "end": "4408866"
  },
  {
    "text": "that will  return an effect",
    "start": "4408867",
    "end": "4412187"
  },
  {
    "text": "So one effect that does nothing But we'll get as arguments to function",
    "start": "4413889",
    "end": "4420028"
  },
  {
    "text": "that are read And these will be an effect of state",
    "start": "4420612",
    "end": "4428886"
  },
  {
    "text": "and append that will basically take any event",
    "start": "4433909",
    "end": "4439631"
  },
  {
    "text": "Events and returns",
    "start": "4444886",
    "end": "4448740"
  },
  {
    "text": "Yeah, I was thinking I was thinking about that and Modify",
    "start": "4455130",
    "end": "4460752"
  },
  {
    "text": "will take in a draft function",
    "start": "4461903",
    "end": "4464673"
  },
  {
    "text": "So draft which is",
    "start": "4467125",
    "end": "4470045"
  },
  {
    "text": "we pass the schema dot schema type of",
    "start": "4479621",
    "end": "4485193"
  },
  {
    "text": "events Events number",
    "start": "4485527",
    "end": "4490115"
  },
  {
    "text": "So now I ipotetically on Product event journal if I see product",
    "start": "4503328",
    "end": "4509501"
  },
  {
    "text": "event journal dot",
    "start": "4509534",
    "end": "4512704"
  },
  {
    "text": "Yeah, I need to return it that yeah, I make Where is my make here? Yeah, this should",
    "start": "4514890",
    "end": "4522764"
  },
  {
    "text": "return aggregate",
    "start": "4522764",
    "end": "4527284"
  },
  {
    "text": "events and state",
    "start": "4528720",
    "end": "4532207"
  },
  {
    "text": "So now it's just a mock up of the API's so I don't care about modify and",
    "start": "4534609",
    "end": "4542501"
  },
  {
    "text": "Here we have function that takes symbol read",
    "start": "4542501",
    "end": "4545320"
  },
  {
    "text": "And here I can do whatever I want if I call read Really will get an option of the string",
    "start": "4547606",
    "end": "4553528"
  },
  {
    "text": "which is the state and append Can append any event of type product name",
    "start": "4553528",
    "end": "4558934"
  },
  {
    "text": "changed or product discontinued perfect perfect perfect perfect",
    "start": "4558934",
    "end": "4564305"
  },
  {
    "text": "And now we need to provide the actual implementation",
    "start": "4566374",
    "end": "4570729"
  },
  {
    "text": "And that is a little trickier",
    "start": "4573014",
    "end": "4577035"
  },
  {
    "text": "Okay, so the actual implementation for that let's go back to our make Okay, so we have all the arguments now we",
    "start": "4579404",
    "end": "4590048"
  },
  {
    "text": "need to return a modify function",
    "start": "4590048",
    "end": "4593268"
  },
  {
    "text": "Maybe we don't actually need to Have a method we could just use that as a",
    "start": "4596454",
    "end": "4604029"
  },
  {
    "text": "function that for now Yeah, now let's use the method so",
    "start": "4604029",
    "end": "4607983"
  },
  {
    "text": "we want to create our event Sourced Aggregate Draft",
    "start": "4612821",
    "end": "4618727"
  },
  {
    "text": "So modify needs to do something first",
    "start": "4621196",
    "end": "4626184"
  },
  {
    "text": "first we need to acquire the journal",
    "start": "4628887",
    "end": "4632740"
  },
  {
    "text": "we have our journal and This is the journal",
    "start": "4660352",
    "end": "4663788"
  },
  {
    "text": "All right, there it is. Okay. Here we are our journal and",
    "start": "4679487",
    "end": "4684658"
  },
  {
    "text": "now when we modify the first thing that we need to do is",
    "start": "4684659",
    "end": "4689614"
  },
  {
    "text": "And we have oh I see what I'm missing. Yeah. Yeah. Yeah",
    "start": "4704946",
    "end": "4712103"
  },
  {
    "text": "When I call modify Here I need to tell",
    "start": "4713488",
    "end": "4718560"
  },
  {
    "text": "which Which entity which aggregated idea wants to modify so would be something like",
    "start": "4719127",
    "end": "4726701"
  },
  {
    "text": "So modify will get",
    "start": "4736561",
    "end": "4739114"
  },
  {
    "text": "Let's fix the import",
    "start": "4754062",
    "end": "4755530"
  },
  {
    "text": "Okay Okay, and I want to read the journal for that aggregate root",
    "start": "4759601",
    "end": "4765340"
  },
  {
    "text": "We have that aggregate id consequent zero and",
    "start": "4765807",
    "end": "4771446"
  },
  {
    "text": "The event schema you guess what? We already had that it",
    "start": "4771446",
    "end": "4776683"
  },
  {
    "text": "just say schema dot union products dot event types and",
    "start": "4776684",
    "end": "4785944"
  },
  {
    "text": "Ideally that will return a stream of all the events",
    "start": "4786094",
    "end": "4792834"
  },
  {
    "text": "okay, and this is just an effect with a stream of our events",
    "start": "4797088",
    "end": "4803044"
  },
  {
    "text": "Obviously that is not well typed. Yeah because of this and",
    "start": "4804796",
    "end": "4808883"
  },
  {
    "text": "What are you complaining about?",
    "start": "4811119",
    "end": "4812821"
  },
  {
    "text": "Here in types is if I run back one events, which is a read only array",
    "start": "4818042",
    "end": "4822714"
  },
  {
    "text": "This should work, but now what do you want?",
    "start": "4834809",
    "end": "4837428"
  },
  {
    "text": "Why are you feeling me? But let me check later down that yeah, we",
    "start": "4845370",
    "end": "4852327"
  },
  {
    "text": "wanted indeed to change these three out So maybe we can do that, but yeah",
    "start": "4852327",
    "end": "4858233"
  },
  {
    "text": "Yeah, let me check This can change that and say that instead",
    "start": "4859834",
    "end": "4865790"
  },
  {
    "text": "of adding a single schema for the event What we could do is instead have an array",
    "start": "4865790",
    "end": "4873281"
  },
  {
    "text": "Of schemas Yeah, let's change to that",
    "start": "4874849",
    "end": "4879821"
  },
  {
    "text": "events An array of schema schema all",
    "start": "4880371",
    "end": "4888880"
  },
  {
    "text": "And that is event And now event is schema",
    "start": "4892784",
    "end": "4899724"
  },
  {
    "text": "schema type of the events number",
    "start": "4899724",
    "end": "4904963"
  },
  {
    "text": "Okay, so we change a little the semantic the symbols for it",
    "start": "4907448",
    "end": "4913388"
  },
  {
    "text": "Can say maybe events Extends array",
    "start": "4915640",
    "end": "4920195"
  },
  {
    "text": "This and Then we have schema",
    "start": "4921162",
    "end": "4925884"
  },
  {
    "text": "Perfect and now here same events in number",
    "start": "4931523",
    "end": "4938880"
  },
  {
    "text": "Perfect. Oh Sorry, that's wrong. We want events",
    "start": "4940365",
    "end": "4945703"
  },
  {
    "text": "That's it So given the schema we get back all",
    "start": "4947822",
    "end": "4955480"
  },
  {
    "text": "the events yeah, and let's go back to our scratch Okay, and now",
    "start": "4955480",
    "end": "4961618"
  },
  {
    "text": "We already have that that's is that's it. Yeah",
    "start": "4962520",
    "end": "4966808"
  },
  {
    "text": "Is read only Is read only is read only because that is",
    "start": "4974482",
    "end": "4981089"
  },
  {
    "text": "a read only array and Maybe we can change that into the storage as well",
    "start": "4981089",
    "end": "4987345"
  },
  {
    "text": "Read only array and read only array or maybe iterable",
    "start": "4988212",
    "end": "4993985"
  },
  {
    "text": "Yeah, maybe read only array so that's about to be it Okay",
    "start": "4997121",
    "end": "5002543"
  },
  {
    "text": "Okay So here events",
    "start": "5003895",
    "end": "5006764"
  },
  {
    "text": "Any for aggregate is just a subtype. Oh, yeah. Yeah, yeah, but yeah, that's fine",
    "start": "5013771",
    "end": "5019294"
  },
  {
    "text": "We can just cast those yeah That's fine",
    "start": "5019727",
    "end": "5023815"
  },
  {
    "text": "Yeah, that's fine Okay. Now we have basically read the",
    "start": "5024766",
    "end": "5030571"
  },
  {
    "text": "entire journal so we can",
    "start": "5030571",
    "end": "5033140"
  },
  {
    "text": "Now we get a stream is the only effect of stream perfect Then we say something like",
    "start": "5037295",
    "end": "5045703"
  },
  {
    "text": "Fold I think that's called. Yeah, and that starts from an initial state",
    "start": "5049807",
    "end": "5055780"
  },
  {
    "text": "Oh, that's the other argument we are missing state Initial state and the",
    "start": "5057949",
    "end": "5065890"
  },
  {
    "text": "initial state I think debase the",
    "start": "5065890",
    "end": "5069811"
  },
  {
    "text": "That's It so here",
    "start": "5091049",
    "end": "5093568"
  },
  {
    "text": "Okay, and our fold is Guess what?",
    "start": "5100692",
    "end": "5106881"
  },
  {
    "text": "yeah we have unknown",
    "start": "5110368",
    "end": "5114605"
  },
  {
    "text": "State now the event is now unknown due to that. Yeah",
    "start": "5125349",
    "end": "5129187"
  },
  {
    "text": "Here we can just say",
    "start": "5130471",
    "end": "5132940"
  },
  {
    "text": "Why don't that you want events is nothing",
    "start": "5140481",
    "end": "5143634"
  },
  {
    "text": "Let me check I expected that to work",
    "start": "5145486",
    "end": "5152326"
  },
  {
    "text": "But I think that the problem is that if I am asking too much from inference",
    "start": "5154462",
    "end": "5158549"
  },
  {
    "text": "yeah here is having a really hard time",
    "start": "5159734",
    "end": "5164422"
  },
  {
    "text": "having too much hard time Inferring from this. Yeah, not fun to do",
    "start": "5174882",
    "end": "5181873"
  },
  {
    "text": "any no context to be honest, that's the real thing",
    "start": "5188362",
    "end": "5194135"
  },
  {
    "text": "I don't want to care about context or no at least in the encoding decoding part",
    "start": "5194852",
    "end": "5199790"
  },
  {
    "text": "Okay The problem is the same right? Yeah",
    "start": "5200808",
    "end": "5204928"
  },
  {
    "text": "any for aggregate is not a schema. Why are",
    "start": "5206247",
    "end": "5212119"
  },
  {
    "text": "you expecting any? Hey, where is where is where is where it",
    "start": "5212119",
    "end": "5218860"
  },
  {
    "text": "is where it is where it is a message any for aggregate?",
    "start": "5218860",
    "end": "5222929"
  },
  {
    "text": "Are you happy now maybe I don't know let's see",
    "start": "5240832",
    "end": "5245169"
  },
  {
    "text": "No I think not I built everything Yeah, oh well, that's",
    "start": "5249307",
    "end": "5254744"
  },
  {
    "text": "expected. I need to pass a union now Instead of the specific event. Yeah,",
    "start": "5254745",
    "end": "5260251"
  },
  {
    "text": "that's fine. That's expected Where are the errors right now?",
    "start": "5260251",
    "end": "5267041"
  },
  {
    "text": "We don't need to pass the event in anymore",
    "start": "5269577",
    "end": "5271846"
  },
  {
    "text": "Ok that's better That is how it is expected to work",
    "start": "5284442",
    "end": "5291232"
  },
  {
    "text": "Okay, and now that we have fixed all it's expected to work",
    "start": "5292183",
    "end": "5296270"
  },
  {
    "text": "Let's go back to our scratch Oh guess what? now types work and now events",
    "start": "5297305",
    "end": "5304427"
  },
  {
    "text": "should be correctly typed. Yeah, that's nice and now state",
    "start": "5304428",
    "end": "5309934"
  },
  {
    "text": "reduce should work oh",
    "start": "5309934",
    "end": "5314956"
  },
  {
    "text": "Yes, oh look at it, okay, so",
    "start": "5314956",
    "end": "5320061"
  },
  {
    "text": "This is actually a read current state from journal",
    "start": "5321028",
    "end": "5326601"
  },
  {
    "text": "Okay, and this is an internal utility that we will have to have",
    "start": "5327668",
    "end": "5332990"
  },
  {
    "text": "And now we need to create",
    "start": "5334942",
    "end": "5339313"
  },
  {
    "text": "function that basically creates the draft and the draft will work as this",
    "start": "5340147",
    "end": "5346020"
  },
  {
    "text": "We will first Read all events",
    "start": "5347738",
    "end": "5353493"
  },
  {
    "text": "From storage and create the current state and",
    "start": "5354462",
    "end": "5362269"
  },
  {
    "text": "that's what the first function we have implemented right now does and",
    "start": "5362269",
    "end": "5367525"
  },
  {
    "text": "Secondly we want to",
    "start": "5367942",
    "end": "5372046"
  },
  {
    "text": "Create a ref storing the current state",
    "start": "5374148",
    "end": "5378769"
  },
  {
    "text": "And third We want to do things such as",
    "start": "5380955",
    "end": "5391048"
  },
  {
    "text": "Create an append function that will both",
    "start": "5392466",
    "end": "5400490"
  },
  {
    "text": "Update the ref and and",
    "start": "5402593",
    "end": "5406130"
  },
  {
    "text": "persist the event to journal",
    "start": "5409100",
    "end": "5412787"
  },
  {
    "text": "So it will do both and then I think that's it",
    "start": "5414388",
    "end": "5422079"
  },
  {
    "text": "Package those two into the draft",
    "start": "5423547",
    "end": "5430287"
  },
  {
    "text": "Objects that's our plan Okay",
    "start": "5431322",
    "end": "5435543"
  },
  {
    "text": "Okay, so we have a way to read all events from",
    "start": "5438746",
    "end": "5442933"
  },
  {
    "text": "ReadCurrentStateFromJournal that will create That and we'll obviously use the event",
    "start": "5443751",
    "end": "5450508"
  },
  {
    "text": "journal storage service and now",
    "start": "5450508",
    "end": "5454160"
  },
  {
    "text": "We need to create the draft functions",
    "start": "5456180",
    "end": "5458949"
  },
  {
    "text": "And I was thinking that",
    "start": "5463170",
    "end": "5467024"
  },
  {
    "text": "Yeah, I could create those Because we are inside an effect. Yeah, we're inside an effect so I can create",
    "start": "5470311",
    "end": "5476967"
  },
  {
    "text": "those so that will work something like that",
    "start": "5476967",
    "end": "5479870"
  },
  {
    "text": "Star I said, okay",
    "start": "5492299",
    "end": "5495535"
  },
  {
    "text": "Obviously, we need to say aggregate id",
    "start": "5513237",
    "end": "5516640"
  },
  {
    "text": "So",
    "start": "5523781",
    "end": "5524430"
  },
  {
    "text": "We need to create an effect ref again ref dot",
    "start": "5538345",
    "end": "5542765"
  },
  {
    "text": "And I will need to import that import everything as ref from",
    "start": "5543584",
    "end": "5549273"
  },
  {
    "text": "Effect ref and let's go back where we were. Okay",
    "start": "5549790",
    "end": "5556380"
  },
  {
    "text": "the initial state will be the current state and maybe",
    "start": "5556380",
    "end": "5561684"
  },
  {
    "text": "let's call it just initial state That's better okay",
    "start": "5561685",
    "end": "5569927"
  },
  {
    "text": "And then we have our state ref that all steady perfect and",
    "start": "5570911",
    "end": "5577735"
  },
  {
    "text": "the read function Will be nothing more",
    "start": "5578152",
    "end": "5584592"
  },
  {
    "text": "than ",
    "start": "5584592",
    "end": "5588344"
  },
  {
    "text": "And that is the same shape of read",
    "start": "5590114",
    "end": "5594852"
  },
  {
    "text": "that's perfect and Then we have",
    "start": "5595669",
    "end": "5600474"
  },
  {
    "text": "const append that will take an event an",
    "start": "5602076",
    "end": "5608332"
  },
  {
    "text": "event can be of type An event here we can",
    "start": "5608332",
    "end": "5616507"
  },
  {
    "text": "be of type schema dot schema dot type of",
    "start": "5616507",
    "end": "5622112"
  },
  {
    "text": "events number Okay We have the event and",
    "start": "5622580",
    "end": "5629353"
  },
  {
    "text": "when we get an event We need to do some things so",
    "start": "5629353",
    "end": "5634892"
  },
  {
    "text": "We need to read the journal And we need to read the journal so",
    "start": "5635542",
    "end": "5644551"
  },
  {
    "text": "Basically and now that we",
    "start": "5646420",
    "end": "5652075"
  },
  {
    "text": "have the journal",
    "start": "5652076",
    "end": "5655162"
  },
  {
    "text": "Will do",
    "start": "5660034",
    "end": "5661001"
  },
  {
    "text": "Whoa here we also need to keep track. Oh Of the expected sequence right right.",
    "start": "5682156",
    "end": "5689346"
  },
  {
    "text": "Yeah, yeah",
    "start": "5690981",
    "end": "5692149"
  },
  {
    "text": "That what that's what we need to do and after we have done that",
    "start": "5700307",
    "end": "5705396"
  },
  {
    "text": "We need to Update our ref so effect dot tsap",
    "start": "5706664",
    "end": "5714571"
  },
  {
    "text": "We will",
    "start": "5717374",
    "end": "5718108"
  },
  {
    "text": "Modify Sorry, not modify but update",
    "start": "5723063",
    "end": "5727700"
  },
  {
    "text": "We have our state ref and the function Will do basically",
    "start": "5730954",
    "end": "5738262"
  },
  {
    "text": "Something like",
    "start": "5740097",
    "end": "5741682"
  },
  {
    "text": "Okay, and that will update the ref",
    "start": "5753994",
    "end": "5756180"
  },
  {
    "text": "We also need as I said",
    "start": "5760768",
    "end": "5764722"
  },
  {
    "text": "Also, not just the Not just the state, but we also need to",
    "start": "5766790",
    "end": "5773680"
  },
  {
    "text": "provide the expected sequence so when we read the journal, I think that",
    "start": "5773680",
    "end": "5779987"
  },
  {
    "text": "we need to provide both the journal event and",
    "start": "5781155",
    "end": "5786093"
  },
  {
    "text": "The sequence I think yeah So",
    "start": "5788045",
    "end": "5793233"
  },
  {
    "text": "Let's say something like ",
    "start": "5795552",
    "end": "5798605"
  },
  {
    "text": "That has a sequence Which is a number and",
    "start": "5807765",
    "end": "5813453"
  },
  {
    "text": "Event which is of type event",
    "start": "5814388",
    "end": "5818025"
  },
  {
    "text": "Okay Okay",
    "start": "5822980",
    "end": "5827668"
  },
  {
    "text": "Okay, and now Instead of returning a stream of",
    "start": "5833457",
    "end": "5839813"
  },
  {
    "text": "just events with a stream of Event journal storage entry",
    "start": "5839813",
    "end": "5845869"
  },
  {
    "text": "Okay, and we need to change this as well",
    "start": "5856763",
    "end": "5861251"
  },
  {
    "text": "Because here we have a stream of iterable but yeah",
    "start": "5863987",
    "end": "5868725"
  },
  {
    "text": "Yeah, instead we need to",
    "start": "5871545",
    "end": "5877234"
  },
  {
    "text": "And we have both the event to sequence",
    "start": "5880270",
    "end": "5884525"
  },
  {
    "text": "and so we need to pack those as an object",
    "start": "5885309",
    "end": "5890013"
  },
  {
    "text": "the event and sequence but",
    "start": "5890914",
    "end": "5894201"
  },
  {
    "text": "this worked as well but The thing is that now in our scratch",
    "start": "5901024",
    "end": "5906563"
  },
  {
    "text": "when we read the current state and We run folds we start",
    "start": "5907147",
    "end": "5913871"
  },
  {
    "text": "from the initial state but We want to have",
    "start": "5913871",
    "end": "5919660"
  },
  {
    "text": "both the state and the last sequence so we can do something like state",
    "start": "5920377",
    "end": "5924982"
  },
  {
    "text": "Is this and last sequence is 0",
    "start": "5925999",
    "end": "5931872"
  },
  {
    "text": "That is what we start them from and then we say that",
    "start": "5932906",
    "end": "5939112"
  },
  {
    "text": "we update saying that now the",
    "start": "5950774",
    "end": "5955996"
  },
  {
    "text": "State sequence yeah, and then we also have the event",
    "start": "5958982",
    "end": "5964905"
  },
  {
    "text": "this is not useful. Yep, and we can say that the new state",
    "start": "5973513",
    "end": "5980854"
  },
  {
    "text": "is",
    "start": "5983223",
    "end": "5984024"
  },
  {
    "text": "I don't know if I care about providing the whole event or no entry",
    "start": "6004161",
    "end": "6008548"
  },
  {
    "text": "Maybe I care",
    "start": "6014454",
    "end": "6015205"
  },
  {
    "text": "Let's try to make it this more thing yeah, maybe we can do something like",
    "start": "6024264",
    "end": "6030453"
  },
  {
    "text": "Maybe I care about that. Yeah, maybe I care indeed because he here",
    "start": "6036793",
    "end": "6041915"
  },
  {
    "text": "have the whole journal entry. Yeah",
    "start": "6041915",
    "end": "6044584"
  },
  {
    "text": "That has both the sequence and event yeah and",
    "start": "6047387",
    "end": "6054361"
  },
  {
    "text": "Here in our reduce we will get both the",
    "start": "6054428",
    "end": "6060033"
  },
  {
    "text": "And I need to export that interface maybe",
    "start": "6065789",
    "end": "6068508"
  },
  {
    "text": "Shouldbe as well.",
    "start": "6071928",
    "end": "6075549"
  },
  {
    "text": "perfect",
    "start": "6085876",
    "end": "6086226"
  },
  {
    "text": "He will take both the entry",
    "start": "6094251",
    "end": "6095502"
  },
  {
    "text": "So it's the journal entry needs and the last sequence",
    "start": "6102626",
    "end": "6108765"
  },
  {
    "text": "Because we expect to read the journal in order Okay, so now this is change a little now",
    "start": "6114704",
    "end": "6121395"
  },
  {
    "text": "we get an effect that returns a state and past sequence perfect",
    "start": "6121395",
    "end": "6125431"
  },
  {
    "text": "And maybe we can change that to",
    "start": "6126666",
    "end": "6130554"
  },
  {
    "text": "Current state Perfect",
    "start": "6132155",
    "end": "6135909"
  },
  {
    "text": "Okay, so we have current state last sequence",
    "start": "6138061",
    "end": "6143900"
  },
  {
    "text": "Current state, okay, and we also need to const",
    "start": "6147687",
    "end": "6152225"
  },
  {
    "text": "Last sequence perfect",
    "start": "6167274",
    "end": "6169643"
  },
  {
    "text": "Perfect then Okay, then we need to",
    "start": "6172913",
    "end": "6178235"
  },
  {
    "text": "change this a little Maybe I can just switch to Effect dot",
    "start": "6178235",
    "end": "6184574"
  },
  {
    "text": "gen which is more readable",
    "start": "6184574",
    "end": "6187110"
  },
  {
    "text": "This one and then we need to const",
    "start": "6200707",
    "end": "6205428"
  },
  {
    "text": "This",
    "start": "6212552",
    "end": "6213219"
  },
  {
    "text": "And yeah, we need to append events yeah",
    "start": "6226082",
    "end": "6229035"
  },
  {
    "text": "Here we also need to optimistically",
    "start": "6235041",
    "end": "6236760"
  },
  {
    "text": "And with this one",
    "start": "6257781",
    "end": "6260165"
  },
  {
    "text": "Okay And Now that we have a new sequence and we",
    "start": "6268141",
    "end": "6276416"
  },
  {
    "text": "appended we also need to modify",
    "start": "6276416",
    "end": "6280453"
  },
  {
    "text": "our in memory representation and we can easily do that by saying update and",
    "start": "6283240",
    "end": "6290981"
  },
  {
    "text": "You say that current state. Oh we need to provide this state ref",
    "start": "6291231",
    "end": "6299005"
  },
  {
    "text": "Current state and that's our state. Yes, and we call ",
    "start": "6301675",
    "end": "6306929"
  },
  {
    "text": "And we have current state and The event now we can optimistically create",
    "start": "6307948",
    "end": "6313802"
  },
  {
    "text": "that and see that event is the event we passed and the sequence is our new sequence and we're renaming",
    "start": "6313803",
    "end": "6320126"
  },
  {
    "text": "to just sequence",
    "start": "6320794",
    "end": "6322162"
  },
  {
    "text": "I think that now we don't have anything that's complaining Yeah, so now we have",
    "start": "6327250",
    "end": "6333222"
  },
  {
    "text": "created read append and now We just need to",
    "start": "6333223",
    "end": "6339446"
  },
  {
    "text": "I think that now we just need to Pack those as function and call it and that's it. Yep",
    "start": "6344768",
    "end": "6354059"
  },
  {
    "text": "Yeah, so Modify we said that also needs to",
    "start": "6355712",
    "end": "6361985"
  },
  {
    "text": "take in",
    "start": "6363103",
    "end": "6363803"
  },
  {
    "text": "That's the event sourced aggregate and now that's fine. It's not complaining anymore",
    "start": "6373647",
    "end": "6378501"
  },
  {
    "text": "perfect and then What we need also need to do is say now that this modify",
    "start": "6378952",
    "end": "6387127"
  },
  {
    "text": "Here we have to find that let's find that",
    "start": "6398872",
    "end": "6402842"
  },
  {
    "text": "okay, and Now we should have",
    "start": "6404594",
    "end": "6409165"
  },
  {
    "text": "Both the aggregate id and the draft",
    "start": "6410233",
    "end": "6413153"
  },
  {
    "text": "Which is",
    "start": "6415305",
    "end": "6416322"
  },
  {
    "text": "Yep.",
    "start": "6445985",
    "end": "6446753"
  },
  {
    "text": "Oh yeah, I missed one here. Okay. And that's perfect.",
    "start": "6451691",
    "end": "6455895"
  },
  {
    "text": "Okay. And now draft is callable with read and append.",
    "start": "6459032",
    "end": "6467507"
  },
  {
    "text": "Perfectly.",
    "start": "6469843",
    "end": "6470210"
  },
  {
    "text": "Oh yeah, the thing is that instead of reading the journal in",
    "start": "6475098",
    "end": "6480670"
  },
  {
    "text": "here, we need to write the journal on the side.",
    "start": "6480670",
    "end": "6484824"
  },
  {
    "text": "Perfect. So now that works. And now that we have",
    "start": "6488695",
    "end": "6495602"
  },
  {
    "text": "that, that returns an effect. So we just need to yield that.",
    "start": "6495602",
    "end": "6499873"
  },
  {
    "text": "And we should be golden. You should now have our",
    "start": "6501591",
    "end": "6507347"
  },
  {
    "text": "event source implementation. That works.",
    "start": "6507347",
    "end": "6512051"
  },
  {
    "text": "Let's try. Our initial state, this should be option.none for example.",
    "start": "6515054",
    "end": "6519793"
  },
  {
    "text": "Why are you complaining?",
    "start": "6522645",
    "end": "6523646"
  },
  {
    "text": "Are you happy now? Oh yeah. silly me. The problem is not that.",
    "start": "6528601",
    "end": "6534224"
  },
  {
    "text": "The problem is that. That is lazy. Yeah. Okay.",
    "start": "6534224",
    "end": "6537510"
  },
  {
    "text": "Yeah. Now, yeah. Now that's not the thing anymore. If I want just event, I need to...",
    "start": "6540063",
    "end": "6547220"
  },
  {
    "text": "destructure that Yeah.",
    "start": "6548505",
    "end": "6549656"
  },
  {
    "text": "Now, the thing is that here I can be seeing things like pipe, read, and that thing we",
    "start": "6554077",
    "end": "6562402"
  },
  {
    "text": "get read or just append. And I can append whatever event I want.",
    "start": "6562402",
    "end": "6567407"
  },
  {
    "text": "Perfect.",
    "start": "6568291",
    "end": "6568491"
  },
  {
    "text": "I'm not happy with the modify name. I don't know if you guys can come up with a better name.",
    "start": "6576599",
    "end": "6582655"
  },
  {
    "text": "It's something like touch or modify with draft, something like that.",
    "start": "6584190",
    "end": "6589511"
  },
  {
    "text": "Because actually I get a draft. And oh, what are all",
    "start": "6590230",
    "end": "6596653"
  },
  {
    "text": "these squiggly lines? Oh yeah. Now I can format. Here, here, I actually need",
    "start": "6596653",
    "end": "6602992"
  },
  {
    "text": "to eventually return modify.",
    "start": "6602992",
    "end": "6605511"
  },
  {
    "text": "And it will complain because... Oh yeah.",
    "start": "6609949",
    "end": "6615588"
  },
  {
    "text": "That's true. Because he left finding modify.",
    "start": "6616522",
    "end": "6620643"
  },
  {
    "text": "I lied. Yeah. That's actually a good name.",
    "start": "6621711",
    "end": "6626865"
  },
  {
    "text": "Yeah. I could just use produce.",
    "start": "6627400",
    "end": "6629118"
  },
  {
    "text": "Yeah. A draft that you modify in the callback you pass that. That's the same thing",
    "start": "6632572",
    "end": "6638528"
  },
  {
    "text": "basically I'm trying to do. This is the draft. The couple of methods, read and append is basically my draft.",
    "start": "6638528",
    "end": "6645051"
  },
  {
    "text": "I can read the draft or append events into the draft. And as I append events into the draft,",
    "start": "6645435",
    "end": "6652358"
  },
  {
    "text": "the read function will read the updated version. Yeah. Yeah.",
    "start": "6652859",
    "end": "6658014"
  },
  {
    "text": "Thanks for the suggestion. And anyway, welcome to the stream.",
    "start": "6658131",
    "end": "6663786"
  },
  {
    "text": "Let's see. Let's see. Let's see. Let's see. We call that produce. So let's check that back.",
    "start": "6666589",
    "end": "6675080"
  },
  {
    "text": "Here, we have the draft. And the draft.",
    "start": "6679919",
    "end": "6684791"
  },
  {
    "text": "is a method in here.",
    "start": "6685308",
    "end": "6689879"
  },
  {
    "text": "Maybe I can call this draft callback.",
    "start": "6692398",
    "end": "6695351"
  },
  {
    "text": "And I want another interface just for the specific draft.",
    "start": "6698988",
    "end": "6704127"
  },
  {
    "text": "And the draft will have the properties read and append. Okay.",
    "start": "6706996",
    "end": "6711718"
  },
  {
    "text": "That seems more reasonable. And here I can have draft, which is event",
    "start": "6712418",
    "end": "6719442"
  },
  {
    "text": "sourced",
    "start": "6719442",
    "end": "6721493"
  },
  {
    "text": "Yep. That's better. Okay.",
    "start": "6728167",
    "end": "6732288"
  },
  {
    "text": "Let's have a draft callback. And the draft callback isn't so useful.",
    "start": "6734073",
    "end": "6742098"
  },
  {
    "text": "Maybe I can just define the produce instead.",
    "start": "6742398",
    "end": "6747052"
  },
  {
    "text": "Events sourced aggregate producer.",
    "start": "6748254",
    "end": "6750555"
  },
  {
    "text": "Okay. And the producer has is a function that",
    "start": "6756229",
    "end": "6762935"
  },
  {
    "text": "takes in both the aggregate ID, and the",
    "start": "6762935",
    "end": "6773379"
  },
  {
    "text": "function that given the function that given",
    "start": "6773379",
    "end": "6782471"
  },
  {
    "text": "the draft, it's just an",
    "start": "6782472",
    "end": "6788728"
  },
  {
    "text": "effect dot effect void.",
    "start": "6788728",
    "end": "6790880"
  },
  {
    "text": "Okay. Here and now this is instead of that is",
    "start": "6795001",
    "end": "6801973"
  },
  {
    "text": "event sourced aggregate producer of events.",
    "start": "6801974",
    "end": "6807080"
  },
  {
    "text": "schema dot schema dot type events number.",
    "start": "6809982",
    "end": "6814420"
  },
  {
    "text": "And schema dot schema dot type state.",
    "start": "6816706",
    "end": "6820827"
  },
  {
    "text": "Okay. And aggregate ID is always of type aggregate ID.",
    "start": "6825031",
    "end": "6829769"
  },
  {
    "text": "Okay. So now this is a produce. And now instead of having two parameters,",
    "start": "6832572",
    "end": "6839679"
  },
  {
    "text": "I have an object, which I can deconstruct. Here read is a read, append is a append.",
    "start": "6840079",
    "end": "6847136"
  },
  {
    "text": "Perfect. For example, I have an append that sits and here I can say, for example, new and",
    "start": "6847553",
    "end": "6853960"
  },
  {
    "text": "say product name changed because for some reason has changed and I",
    "start": "6853960",
    "end": "6861767"
  },
  {
    "text": "can create the new product name. Yes. Perfect.",
    "start": "6861767",
    "end": "6865621"
  },
  {
    "text": "We are slowly working through the APIs that I want.",
    "start": "6867140",
    "end": "6870977"
  },
  {
    "text": "Maybe we can start by before ending the stream. Yeah, we have I think other 15 minutes,",
    "start": "6872378",
    "end": "6879569"
  },
  {
    "text": "something like that. I think that before ending the stream, I want to clean up this.",
    "start": "6880153",
    "end": "6886993"
  },
  {
    "text": "Do some things like produce here. And this produce is an event sourced aggregate producer",
    "start": "6888895",
    "end": "6899972"
  },
  {
    "text": "that takes the schema, schema, type of events.",
    "start": "6899972",
    "end": "6907196"
  },
  {
    "text": "And the state schema, schema type of the state.",
    "start": "6915154",
    "end": "6919842"
  },
  {
    "text": "So that here I don't need to type in the specific types.",
    "start": "6921777",
    "end": "6926315"
  },
  {
    "text": "OK. Because ideally now they are correctly typed.",
    "start": "6928618",
    "end": "6935156"
  },
  {
    "text": "Perfect. And now it's complaining because that's this thing I said before I got my types wrong.",
    "start": "6935408",
    "end": "6942131"
  },
  {
    "text": "And the producer actually needs an access",
    "start": "6943149",
    "end": "6948287"
  },
  {
    "text": "to the event journal. So the producer will not really affect",
    "start": "6948287",
    "end": "6955394"
  },
  {
    "text": "the service maybe void.",
    "start": "6955394",
    "end": "6957079"
  },
  {
    "text": "And now we should almost be ready.",
    "start": "6966155",
    "end": "6972128"
  },
  {
    "text": "Yeah. Right now we have an object instead of just one draft is an object here.",
    "start": "6972778",
    "end": "6980836"
  },
  {
    "text": "We have to tweak the white spaces. Yeah. Slowly but surely I think that we are",
    "start": "6981554",
    "end": "6989478"
  },
  {
    "text": "ready to start to move things into a separate file. So we clean up everything.",
    "start": "6989478",
    "end": "6996034"
  },
  {
    "text": "But yeah, this is roughly what you should do. Let's go back to what we do.",
    "start": "6996369",
    "end": "7001406"
  },
  {
    "text": "We have a produce in here. The produce will take in an aggregate ID",
    "start": "7002558",
    "end": "7008614"
  },
  {
    "text": "and then you get basically the function either for appending or for reading the current state of the aggregate.",
    "start": "7008614",
    "end": "7016137"
  },
  {
    "text": "And when you append an event, what happens is that the event is both",
    "start": "7017156",
    "end": "7022862"
  },
  {
    "text": "appended into the storage and also it's",
    "start": "7022862",
    "end": "7027949"
  },
  {
    "text": "appended into the actual in-memory representation and the memory",
    "start": "7027950",
    "end": "7033456"
  },
  {
    "text": "representation is updated. And each time we call produce what we do",
    "start": "7033456",
    "end": "7039195"
  },
  {
    "text": "is we read the whole history of the events from the journal and we recreate the in",
    "start": "7039195",
    "end": "7044834"
  },
  {
    "text": "memory representation on the domain aggregate and we read that. He used that as a draft.",
    "start": "7044834",
    "end": "7050606"
  },
  {
    "text": "We append events and that's it. Yeah. So let's try maybe two more things just",
    "start": "7051140",
    "end": "7058447"
  },
  {
    "text": "to clean up some things. So let's start by creating a new file.",
    "start": "7058447",
    "end": "7064937"
  },
  {
    "text": "Okay. Let's start by saying that we want first div things.",
    "start": "7073329",
    "end": "7079869"
  },
  {
    "text": "We want to import",
    "start": "7080336",
    "end": "7081420"
  },
  {
    "text": "We need also the aggregate message.",
    "start": "7090863",
    "end": "7093348"
  },
  {
    "text": "Here message. So we need to update any. Yeah.",
    "start": "7105161",
    "end": "7110299"
  },
  {
    "text": "Yeah. The name symbol. It's not hold that so we need to.",
    "start": "7110833",
    "end": "7115720"
  },
  {
    "text": "And they then message. This is an unused import.",
    "start": "7116589",
    "end": "7121177"
  },
  {
    "text": "And so that is just message. We need to import effects schema.",
    "start": "7122928",
    "end": "7128134"
  },
  {
    "text": "Okay. And we need to import the aggregateID",
    "start": "7135157",
    "end": "7138978"
  },
  {
    "text": "Yeah. I'm getting hungry.",
    "start": "7146318",
    "end": "7148921"
  },
  {
    "text": "I was soon on the stream to go get something to eat.",
    "start": "7152241",
    "end": "7155927"
  },
  {
    "text": "It's almost dinner time. I'm not sure about you guys but",
    "start": "7157246",
    "end": "7163219"
  },
  {
    "text": "definitely getting so much hungry.",
    "start": "7163219",
    "end": "7167139"
  },
  {
    "text": "This.",
    "start": "7170392",
    "end": "7170626"
  },
  {
    "text": "And I think that's all of those for the interface. So we moved to the interface.",
    "start": "7182555",
    "end": "7188827"
  },
  {
    "text": "And we also need the producer.",
    "start": "7190429",
    "end": "7196035"
  },
  {
    "text": "Things. Not the type the holes on time.",
    "start": "7198337",
    "end": "7202958"
  },
  {
    "text": "Here. And we need to import effect",
    "start": "7204944",
    "end": "7212368"
  },
  {
    "text": "What are we missing? Nothing else. It's I think yes. We need the interface",
    "start": "7234240",
    "end": "7239778"
  },
  {
    "text": "for the event sourced. aggregate which is. Basically.",
    "start": "7239778",
    "end": "7244149"
  },
  {
    "text": "The main thing of this module we need to export as well.",
    "start": "7245301",
    "end": "7249238"
  },
  {
    "text": "And that relies on the user I will put up to that.",
    "start": "7252508",
    "end": "7256662"
  },
  {
    "text": "Okay.",
    "start": "7258330",
    "end": "7258514"
  },
  {
    "text": "Here is the draft. Here we've built the draft in between.",
    "start": "7265638",
    "end": "7270142"
  },
  {
    "text": "Yeah. Okay. And finally we have our make function.",
    "start": "7271176",
    "end": "7276232"
  },
  {
    "text": "Here.",
    "start": "7277366",
    "end": "7277650"
  },
  {
    "text": "And we'll say export function make.",
    "start": "7289562",
    "end": "7293115"
  },
  {
    "text": "And we need to import.",
    "start": "7296285",
    "end": "7297469"
  },
  {
    "text": "We have some types that we just imported that we need to change as real imports.",
    "start": "7303442",
    "end": "7309148"
  },
  {
    "text": "And stream effect as well.",
    "start": "7312368",
    "end": "7315287"
  },
  {
    "text": "Well stream we didn't import. We import everything as stream from effect stream.",
    "start": "7324930",
    "end": "7333489"
  },
  {
    "text": "Okay. And. What are we missing here.",
    "start": "7337359",
    "end": "7342631"
  },
  {
    "text": "I think a lot of things. We're missing what.",
    "start": "7342915",
    "end": "7347769"
  },
  {
    "text": "Oh ref can I find name right. Yeah.",
    "start": "7348837",
    "end": "7351607"
  },
  {
    "text": "Oh sure. Whatever question we want. We're here.",
    "start": "7374680",
    "end": "7378167"
  },
  {
    "text": "Wait. Why did they do that thing the module I don't know.",
    "start": "7380386",
    "end": "7384506"
  },
  {
    "text": "message Oh maybe I did a mess of from.",
    "start": "7386041",
    "end": "7391380"
  },
  {
    "text": "Oh I should have studied your name that to message. Oh man.",
    "start": "7399154",
    "end": "7404059"
  },
  {
    "text": "Why did I do that. That was schema",
    "start": "7405394",
    "end": "7411166"
  },
  {
    "text": "When I see him. Okay.",
    "start": "7417373",
    "end": "7421360"
  },
  {
    "text": "Hello. Okay.",
    "start": "7423078",
    "end": "7426965"
  },
  {
    "text": "Now we fix that. And.",
    "start": "7430269",
    "end": "7433322"
  },
  {
    "text": "then this is message Oh yeah because before",
    "start": "7435708",
    "end": "7442047"
  },
  {
    "text": "I renamed something that. Broke everything yeah. And yeah I think that I will just finish",
    "start": "7442047",
    "end": "7449271"
  },
  {
    "text": "moving here things in here. Fixing.",
    "start": "7449271",
    "end": "7455210"
  },
  {
    "text": "add two things In here message.",
    "start": "7455210",
    "end": "7459131"
  },
  {
    "text": "And message.",
    "start": "7464720",
    "end": "7465204"
  },
  {
    "text": "Okay we should not have any problem here. I think that I will just import everything as the model we",
    "start": "7470743",
    "end": "7477816"
  },
  {
    "text": "just created is",
    "start": "7477816",
    "end": "7480786"
  },
  {
    "text": "So with that I think that I'll close here a stream. I'm really happy of what we did today.",
    "start": "7508814",
    "end": "7515754"
  },
  {
    "text": "We basically have written all the code from for the event journal storage and",
    "start": "7516588",
    "end": "7523095"
  },
  {
    "text": "the actual event source aggregate implementation and next stream I think that we will write some tests for those",
    "start": "7523095",
    "end": "7531003"
  },
  {
    "text": "and see if they actually behave. how we expect and maybe we will",
    "start": "7531003",
    "end": "7537559"
  },
  {
    "text": "start implementing a real world journal that we will use based maybe on SQLite or",
    "start": "7537559",
    "end": "7545050"
  },
  {
    "text": "SQL and for that I think that we will use indeed SQL.",
    "start": "7545050",
    "end": "7550088"
  },
  {
    "text": "And with that I thank you all for joining the stream and we will",
    "start": "7552057",
    "end": "7557546"
  },
  {
    "text": "see you all next Thursday. So one week from now ",
    "start": "7557546",
    "end": "7562267"
  },
  {
    "text": "one week for now at 6 30 room time.",
    "start": "7562634",
    "end": "7568423"
  },
  {
    "text": "And thank you again for joining the stream. And please follow me on Twitter if you",
    "start": "7569575",
    "end": "7576048"
  },
  {
    "text": "want to get notified for my stream And thank you again. Have a nice day. Bye bye. See you everyone.",
    "start": "7576048",
    "end": "7581969"
  }
]