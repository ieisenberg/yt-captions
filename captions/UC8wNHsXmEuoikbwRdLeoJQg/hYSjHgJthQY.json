[
  {
    "text": "Okay, so I did some work off stream.",
    "start": "5449",
    "end": "10500"
  },
  {
    "text": "Nothing, nothing so big, just some changes.",
    "start": "11050",
    "end": "15833"
  },
  {
    "text": "I have added some fields into the Message Headers",
    "start": "17516",
    "end": "22333"
  },
  {
    "text": "I have added a field called Expires In. And these fields will be",
    "start": "23266",
    "end": "29983"
  },
  {
    "text": "used mainly in comments. And these fields can be",
    "start": "29983",
    "end": "35698"
  },
  {
    "text": "either known or a duration. And what will happen is that when the",
    "start": "35699",
    "end": "45199"
  },
  {
    "text": "entity will receive this message, what will happen is that if that message",
    "start": "45199",
    "end": "52683"
  },
  {
    "text": "is processed between, let's say, that the message says, \"Okay, I want to",
    "start": "52683",
    "end": "59066"
  },
  {
    "text": "add a new document.\" And that message expires in 20 seconds.",
    "start": "59066",
    "end": "66349"
  },
  {
    "text": "If that message didn't get processed between the 20 seconds until he has been",
    "start": "67733",
    "end": "74949"
  },
  {
    "text": "received and then processed, that message will be considered as expired",
    "start": "74983",
    "end": "80750"
  },
  {
    "text": "and won't be processed anymore. And this is one utility that made me,",
    "start": "81466",
    "end": "90833"
  },
  {
    "text": "obviously, change a little our event journal we built on stream last time,",
    "start": "90833",
    "end": "95933"
  },
  {
    "text": "because now I have not just this sequence and event, but now I also have the date",
    "start": "97166",
    "end": "104266"
  },
  {
    "text": "of when the message has been persisted. Or maybe it's better to call it,",
    "start": "104266",
    "end": "111583"
  },
  {
    "text": "rather than persisted, it's created at",
    "start": "112699",
    "end": "115349"
  },
  {
    "text": "That's better, because that date is actually not the date of the persistence",
    "start": "118199",
    "end": "127199"
  },
  {
    "text": "persisting event, but is created by the",
    "start": "128266",
    "end": "134283"
  },
  {
    "text": "event's sourced aggregate. Persisting that, it reads the current time, and then this",
    "start": "134283",
    "end": "142782"
  },
  {
    "text": "persisted at will just rename to \"created at,\" then becomes this.",
    "start": "142783",
    "end": "151199"
  },
  {
    "text": "Perfect. So, a very small change, but that also",
    "start": "153050",
    "end": "160583"
  },
  {
    "text": "changes now our tests. Now, I don't need to pass the sequencing",
    "start": "160583",
    "end": "166750"
  },
  {
    "text": "to the journal.append method, but instead I pass an entire event journal storage entry,",
    "start": "166750",
    "end": "173166"
  },
  {
    "text": "and this event journal storage entry now takes in also the dates. It has been created",
    "start": "173933",
    "end": "179666"
  },
  {
    "text": "the sequence and event. Okay, so we left last time saying that",
    "start": "179666",
    "end": "186483"
  },
  {
    "text": "right now we have tests for an event journal that is in memory, and before starting using",
    "start": "186483",
    "end": "196633"
  },
  {
    "text": "that, maybe we want something more persistent. Maybe we want to have something that is",
    "start": "196633",
    "end": "204500"
  },
  {
    "text": "persisted, for example, into an SQLite database.",
    "start": "204500",
    "end": "208566"
  },
  {
    "text": "And so what I think that we will really work on today is using",
    "start": "211083",
    "end": "217349"
  },
  {
    "text": "effect SQL in order to persist those messages.",
    "start": "218183",
    "end": "221349"
  },
  {
    "text": "So, let's start by adding, obviously, the package.",
    "start": "223833",
    "end": "229433"
  },
  {
    "text": "Oh, we already have that. Perfect.",
    "start": "231133",
    "end": "233083"
  },
  {
    "text": "We need to create a new kind of event journal storage. This one is the one in memory.",
    "start": "237400",
    "end": "244665"
  },
  {
    "text": "The one we need to create is instead persisted by SQL.",
    "start": "245650",
    "end": "249800"
  },
  {
    "text": "So, let's start by saying const SQL",
    "start": "251283",
    "end": "256650"
  },
  {
    "text": "persistence SQLite, maybe.",
    "start": "256650",
    "end": "262766"
  },
  {
    "text": "And let's see. We can copy some logic from here, I",
    "start": "268500",
    "end": "275866"
  },
  {
    "text": "think, but we'll say First, we need to provide file name which",
    "start": "275866",
    "end": "286800"
  },
  {
    "text": "is string, and this will be the actual database file. And then we can create an effect.",
    "start": "286800",
    "end": "294283"
  },
  {
    "text": "Function star. Okay. Okay, so let's have a look altogether at",
    "start": "296550",
    "end": "308083"
  },
  {
    "text": "the documentation for effect SQL.",
    "start": "308083",
    "end": "310500"
  },
  {
    "text": "So, let's go to the effect website docs. As you can see, docs has changed.",
    "start": "315666",
    "end": "321083"
  },
  {
    "text": "They are now more usable, in my opinion, faster.",
    "start": "321750",
    "end": "325633"
  },
  {
    "text": "So, that's better. So, let's have a look and see",
    "start": "326849",
    "end": "333050"
  },
  {
    "text": "if we have documentation here. Effect SQL.",
    "start": "333050",
    "end": "337166"
  },
  {
    "text": "Those are not documentation. Let's go for the API reference.",
    "start": "340383",
    "end": "345166"
  },
  {
    "text": "That should be in here on the left, I think.",
    "start": "346783",
    "end": "350650"
  },
  {
    "text": "Oh, well, I moved it to the blog. Here, we should have API reference for...",
    "start": "351849",
    "end": "356932"
  },
  {
    "text": "Oh, we don't have windows. Oh, well. Let's go to the GitHub page.",
    "start": "359516",
    "end": "364099"
  },
  {
    "text": "Effect. Packages.",
    "start": "365633",
    "end": "368400"
  },
  {
    "text": "SQLite. We are running in one, so...",
    "start": "373849",
    "end": "379233"
  },
  {
    "text": "Test. We have examples here. Let's have a look at the examples.",
    "start": "382483",
    "end": "386099"
  },
  {
    "text": "Okay, we need to call make client. Here, basically, it creates a file.",
    "start": "387550",
    "end": "393949"
  },
  {
    "text": "So, we need to definitely add...",
    "start": "394966",
    "end": "398400"
  },
  {
    "text": "Create table test. Inserting to... Yeah, okay.",
    "start": "400166",
    "end": "405349"
  },
  {
    "text": "So, let's try. So, first, we need to add package that...",
    "start": "405833",
    "end": "416366"
  },
  {
    "text": "Yield, we need to import the SQL function, which comes from Yield,",
    "start": "421183",
    "end": "427266"
  },
  {
    "text": "yielding Effect.SQL. So, import everything as",
    "start": "427650",
    "end": "434000"
  },
  {
    "text": "SQL from Effect/SQL/client",
    "start": "434000",
    "end": "440066"
  },
  {
    "text": "So, ideally, if I do const SQL equals Yield star SQL client,",
    "start": "446866",
    "end": "454432"
  },
  {
    "text": "this should be an SQL-like client. Perfect. Then we can do things",
    "start": "456166",
    "end": "461983"
  },
  {
    "text": "like Yield star SQL. Yeah, we can do things like create table.",
    "start": "461983",
    "end": "470266"
  },
  {
    "text": "And here, we can create our tables. Okay. So, create table events.",
    "start": "472449",
    "end": "478233"
  },
  {
    "text": "Event journal. And we'll have as keys,",
    "start": "480516",
    "end": "486550"
  },
  {
    "text": "aggregate root of type text.",
    "start": "488133",
    "end": "492266"
  },
  {
    "text": "And then we have sequence.",
    "start": "498949",
    "end": "502949"
  },
  {
    "text": "that was int. And then we have entry",
    "start": "504233",
    "end": "512883"
  },
  {
    "text": "event payload, maybe.",
    "start": "512883",
    "end": "519716"
  },
  {
    "text": "Text as well. And that's it. That we've created a table.",
    "start": "521166",
    "end": "526633"
  },
  {
    "text": "Okay. And then we need to provide the read functions and the append function.",
    "start": "530316",
    "end": "536332"
  },
  {
    "text": "So let's start by using append. So const...",
    "start": "537066",
    "end": "542566"
  },
  {
    "text": "We can copy that from here. Const append. Those are the arguments.",
    "start": "544949",
    "end": "548933"
  },
  {
    "text": "Okay. So we have to basically perform here just an SQL here.",
    "start": "553166",
    "end": "565833"
  },
  {
    "text": "And this will be insert into event journal.",
    "start": "567433",
    "end": "574500"
  },
  {
    "text": "And then event payload.",
    "start": "590449",
    "end": "595332"
  },
  {
    "text": "And if I remember correctly, there is a syntax.",
    "start": "598533",
    "end": "602883"
  },
  {
    "text": "into effect SQL. That allows you to do",
    "start": "605633",
    "end": "614949"
  },
  {
    "text": "more easily inserts. Oh well, that's not what I wanted.",
    "start": "614949",
    "end": "619833"
  },
  {
    "text": "Effect SQLite. bun",
    "start": "620933",
    "end": "626500"
  },
  {
    "text": "And these... Sorry. SQLite client.",
    "start": "627850",
    "end": "632649"
  },
  {
    "text": "Okay. And this should be a thing like...",
    "start": "636100",
    "end": "640083"
  },
  {
    "text": "Insert into rows. That's fine. Let's just do it the old way.",
    "start": "641916",
    "end": "647916"
  },
  {
    "text": "So here values",
    "start": "648816",
    "end": "650865"
  },
  {
    "text": "And here should be able to just...",
    "start": "654133",
    "end": "657949"
  },
  {
    "text": "Seeing more sample SQLite node maybe.",
    "start": "660100",
    "end": "663615"
  },
  {
    "text": "Oh, there they are. Yeah.",
    "start": "668550",
    "end": "669816"
  },
  {
    "text": "Here you can see that you can insert value. Whatever. Insert into...",
    "start": "673833",
    "end": "678166"
  },
  {
    "text": "Perfect. With SQL with transaction.",
    "start": "679949",
    "end": "685233"
  },
  {
    "text": "Ooh, nice.",
    "start": "685716",
    "end": "686283"
  },
  {
    "text": "Okay.",
    "start": "692683",
    "end": "692816"
  },
  {
    "text": "Okay. So values. And here we'll have our actual values.",
    "start": "699899",
    "end": "705283"
  },
  {
    "text": "And I remember, I think that you can use things like SQL...",
    "start": "705983",
    "end": "713233"
  },
  {
    "text": "Oh, sorry. Here, SQL.",
    "start": "714166",
    "end": "719165"
  },
  {
    "text": "There you can see that you have values. Utility. Save.",
    "start": "722983",
    "end": "728216"
  },
  {
    "text": "And here, I think that with save. You get automatically escape.",
    "start": "732566",
    "end": "738165"
  },
  {
    "text": "So they get automatically escaped. So I don't need to do anything.",
    "start": "739683",
    "end": "745683"
  },
  {
    "text": "That's even better. I can just say aggregate root name.",
    "start": "746616",
    "end": "749899"
  },
  {
    "text": "Aggregate ID. And then we have...",
    "start": "752866",
    "end": "760649"
  },
  {
    "text": "journal entry, like journal entry.sequence.",
    "start": "761016",
    "end": "766399"
  },
  {
    "text": "And then we have our actual journal entry.",
    "start": "768949",
    "end": "774683"
  },
  {
    "text": "But guess what? That won't work. Because this is an object.",
    "start": "775300",
    "end": "783250"
  },
  {
    "text": "But instead we need to persist a string. So let's see.",
    "start": "784616",
    "end": "789733"
  },
  {
    "text": "Void SQL. Oh, right. We will eventually get SQL errors while",
    "start": "792433",
    "end": "799149"
  },
  {
    "text": "reading or appending. So that's true. So we can change a little our interface.",
    "start": "799149",
    "end": "805983"
  },
  {
    "text": "And either we see that the semantic is",
    "start": "806949",
    "end": "812199"
  },
  {
    "text": "retrying indefinitely until you succeed persisting.",
    "start": "812199",
    "end": "816100"
  },
  {
    "text": "And well, that's one choice. Or we create a network specifically for that.",
    "start": "817350",
    "end": "823083"
  },
  {
    "text": "So let's start maybe by saying export class.",
    "start": "825649",
    "end": "830983"
  },
  {
    "text": "Extends data.tag error.",
    "start": "845866",
    "end": "849550"
  },
  {
    "text": "And tag is for now. This one.",
    "start": "852350",
    "end": "855782"
  },
  {
    "text": "Perfect. And then you want...",
    "start": "857399",
    "end": "865350"
  },
  {
    "text": "The possible fields. I don't want any. Maybe I can just provide the entry itself.",
    "start": "868283",
    "end": "874633"
  },
  {
    "text": "Maybe I want to use number. Okay.",
    "start": "882183",
    "end": "887032"
  },
  {
    "text": "So we can say that appending may result into an event.",
    "start": "889016",
    "end": "894183"
  },
  {
    "text": "Event journal. append field for some reason.",
    "start": "894750",
    "end": "901133"
  },
  {
    "text": "And so we say pipe",
    "start": "909550",
    "end": "911649"
  },
  {
    "text": "And we will squash the SQL error into a new.",
    "start": "920516",
    "end": "923850"
  },
  {
    "text": "Event journal. append entry failed Sequence journal entry.",
    "start": "926066",
    "end": "932033"
  },
  {
    "text": "Sequence. Okay. So now the types are happy for the whole function.",
    "start": "932983",
    "end": "938316"
  },
  {
    "text": "And the thing is that here journal entry",
    "start": "938500",
    "end": "944399"
  },
  {
    "text": "is not assignable to a string, a number or whatever.",
    "start": "944399",
    "end": "949649"
  },
  {
    "text": "And that is because. As I said before, that is an object.",
    "start": "951233",
    "end": "957032"
  },
  {
    "text": "We cannot persist into SQL an object. So that's why we have here.",
    "start": "957933",
    "end": "966483"
  },
  {
    "text": "Schemas argument. And this is a read only array of the",
    "start": "967883",
    "end": "973500"
  },
  {
    "text": "possible schemas for the event we are trying to append. So maybe we should change a little.",
    "start": "973500",
    "end": "980949"
  },
  {
    "text": "And instead, maybe the first thing we do is something like schema.encode.",
    "start": "981783",
    "end": "991100"
  },
  {
    "text": "We want to transform our object into something that can be persisted. Like a JSON string.",
    "start": "991399",
    "end": "996833"
  },
  {
    "text": "And the schema we will use is schema.parseJSON.",
    "start": "997800",
    "end": "1002983"
  },
  {
    "text": "A schema.parseJSON is a combinator that given a schema converts",
    "start": "1003800",
    "end": "1009183"
  },
  {
    "text": "a string into unknown. So it parses.",
    "start": "1009183",
    "end": "1014949"
  },
  {
    "text": "But I think that there is also a JSON. Yeah.",
    "start": "1017050",
    "end": "1022199"
  },
  {
    "text": "parse season. But you can also provide I think Yeah.",
    "start": "1022199",
    "end": "1027199"
  },
  {
    "text": "You can also provide a specific structure. And in our case, that's",
    "start": "1027533",
    "end": "1033199"
  },
  {
    "text": "schema.union of schemas.",
    "start": "1033199",
    "end": "1038016"
  },
  {
    "text": "Okay. And this will get us. Maybe let's just write it like that so we",
    "start": "1041383",
    "end": "1047199"
  },
  {
    "text": "can see more clearly what is the type.",
    "start": "1047199",
    "end": "1050016"
  },
  {
    "text": "So this is basically an encode function that given a string, create a parse",
    "start": "1052766",
    "end": "1061648"
  },
  {
    "text": "error, and it gets unknown. Why we get unknown because here I'm passing schemas, which is an array,",
    "start": "1061649",
    "end": "1067100"
  },
  {
    "text": "but instead I'm supposed to spread them. And now you can see that we get the type we expect.",
    "start": "1067100",
    "end": "1073316"
  },
  {
    "text": "So basically we can give a string. We either fail because there is a malformed error or we eventually get our...",
    "start": "1074133",
    "end": "1083899"
  },
  {
    "text": "Sorry. Oh, we encode. Yeah. So given our object, we get the string",
    "start": "1085449",
    "end": "1090833"
  },
  {
    "text": "and if the JSON error will parse error and the context required is the one from our schema.",
    "start": "1090833",
    "end": "1096016"
  },
  {
    "text": "Right. Perfect. So we actually need to provide the value we want to encode.",
    "start": "1096550",
    "end": "1103300"
  },
  {
    "text": "And that's journal entry dot event. I don't care about the other data.",
    "start": "1103800",
    "end": "1111016"
  },
  {
    "text": "And now this is an effect that returns a string. Perfect. And so now we can do",
    "start": "1112550",
    "end": "1119750"
  },
  {
    "text": "the same we did before. So...",
    "start": "1119750",
    "end": "1123049"
  },
  {
    "text": "Effect dot gen maybe just to keep it more readable.",
    "start": "1125216",
    "end": "1128882"
  },
  {
    "text": "I could have used flatmap as well. So here I'm saying that...",
    "start": "1130899",
    "end": "1139500"
  },
  {
    "text": "The event payload equals yield.",
    "start": "1141216",
    "end": "1147299"
  },
  {
    "text": "And this is a string hypothetically.",
    "start": "1148449",
    "end": "1152833"
  },
  {
    "text": "Oh, yield star. Sorry. That is a string. Perfect. And now we need to",
    "start": "1154433",
    "end": "1162016"
  },
  {
    "text": "perform the actual insertion.",
    "start": "1162016",
    "end": "1164882"
  },
  {
    "text": "So we encoded the payload and then we perform the insert into the database.",
    "start": "1169633",
    "end": "1176933"
  },
  {
    "text": "Here, as you can see, it's screaming at me because this purpose sequence",
    "start": "1179233",
    "end": "1187449"
  },
  {
    "text": "is missing in parse error because this function is expected to return, as we have seen",
    "start": "1187800",
    "end": "1193250"
  },
  {
    "text": "before, an append fail error. So we need to say, Effect catch all whatever the error is.",
    "start": "1193250",
    "end": "1201799"
  },
  {
    "text": "We will say nil. Event journal,",
    "start": "1202050",
    "end": "1207199"
  },
  {
    "text": "append entry failed. The expected sequence and then the journal entry dot sequence",
    "start": "1207266",
    "end": "1214833"
  },
  {
    "text": "Okay. Now context is not assignable to type never.",
    "start": "1216350",
    "end": "1222299"
  },
  {
    "text": "Oh yeah. And that's because schemas,",
    "start": "1222550",
    "end": "1227800"
  },
  {
    "text": "schemas, any no context. So this should not have any context.",
    "start": "1228316",
    "end": "1235315"
  },
  {
    "text": "That's fine. So here, why are you trying to say...",
    "start": "1237216",
    "end": "1244333"
  },
  {
    "text": "context the event's number.",
    "start": "1244350",
    "end": "1248382"
  },
  {
    "text": "Oh, this is already, yeah. This is kind of...",
    "start": "1253966",
    "end": "1258683"
  },
  {
    "text": "Okay. So now we need to say that this doesn't care about that.",
    "start": "1263899",
    "end": "1269315"
  },
  {
    "text": "So let me just... Let me just clear that up.",
    "start": "1270449",
    "end": "1275616"
  },
  {
    "text": "One step at a time. Here we have...",
    "start": "1277016",
    "end": "1281983"
  },
  {
    "text": "Why do you say unknown? Oh yeah, this should be spread. It was covered before.",
    "start": "1285399",
    "end": "1290016"
  },
  {
    "text": "Okay. The thing now is that this context is not valid. So I'll just type in for it.",
    "start": "1290716",
    "end": "1298433"
  },
  {
    "text": "So I'll say that. This one is an effect.",
    "start": "1299199",
    "end": "1302916"
  },
  {
    "text": "We'll encode here.",
    "start": "1305233",
    "end": "1307033"
  },
  {
    "text": "Maybe we can say something like const.",
    "start": "1314199",
    "end": "1316833"
  },
  {
    "text": "We'll have a function. Let me... That was the same thing.",
    "start": "1321300",
    "end": "1325300"
  },
  {
    "text": "Const make event union schema.",
    "start": "1326533",
    "end": "1331132"
  },
  {
    "text": "Flingshoot, that takes in events,",
    "start": "1334800",
    "end": "1338883"
  },
  {
    "text": "extends with the library of schema dot schema.",
    "start": "1340050",
    "end": "1348550"
  },
  {
    "text": "Any no context. Okay. And this is the events we can have.",
    "start": "1350616",
    "end": "1358783"
  },
  {
    "text": "And now we need to return a schema...",
    "start": "1361050",
    "end": "1364800"
  },
  {
    "text": "Schema dot union of events.",
    "start": "1369033",
    "end": "1373116"
  },
  {
    "text": "And I want to type these such as... This is a schema.",
    "start": "1376983",
    "end": "1382033"
  },
  {
    "text": "Schema of... And here we have schema...",
    "start": "1384016",
    "end": "1389116"
  },
  {
    "text": "Oops. Dot schema dot type of...",
    "start": "1389699",
    "end": "1394882"
  },
  {
    "text": "An event number.",
    "start": "1396633",
    "end": "1398916"
  },
  {
    "text": "Right. A number with a lower case maybe. Okay.",
    "start": "1409949",
    "end": "1414799"
  },
  {
    "text": "And then we have schema... Dot schema encoded of schema.",
    "start": "1415500",
    "end": "1422850"
  },
  {
    "text": "Dot schema dot encoded events number.",
    "start": "1425550",
    "end": "1432149"
  },
  {
    "text": "And we don't want any context.",
    "start": "1434066",
    "end": "1436300"
  },
  {
    "text": "Okay. Okay, so let's try to understand why it's complaining.",
    "start": "1441483",
    "end": "1447716"
  },
  {
    "text": "It's saying that a context of this is not acceptable to type another.",
    "start": "1448100",
    "end": "1454000"
  },
  {
    "text": "So union. I think that when you use union...",
    "start": "1455033",
    "end": "1460800"
  },
  {
    "text": "Members... Members.",
    "start": "1464633",
    "end": "1469350"
  },
  {
    "text": "Extend ast dot members. Read only array, not empty array.",
    "start": "1470733",
    "end": "1476433"
  },
  {
    "text": "Oh yeah. Or maybe... Oh, I see.",
    "start": "1476699",
    "end": "1481149"
  },
  {
    "text": "A type script. Always fighting towards ruin.",
    "start": "1483850",
    "end": "1488433"
  },
  {
    "text": "Events. Okay. Now these... Yeah, these... These... Yeah, this is what I actually want.",
    "start": "1489866",
    "end": "1496683"
  },
  {
    "text": "Yeah. And yeah, in this case, context is not",
    "start": "1496983",
    "end": "1502683"
  },
  {
    "text": "allowed to type any... Yeah. Let's try again.",
    "start": "1502683",
    "end": "1508000"
  },
  {
    "text": "If I say the same thing here...",
    "start": "1508550",
    "end": "1512783"
  },
  {
    "text": "Oh well, I don't have events here, but yeah. Now I need to say...",
    "start": "1521166",
    "end": "1526899"
  },
  {
    "text": "Here make event union... schema events...",
    "start": "1529000",
    "end": "1534783"
  },
  {
    "text": "Schema's.",
    "start": "1537500",
    "end": "1538083"
  },
  {
    "text": "Okay. Now you can see that I get the encoded value.",
    "start": "1545933",
    "end": "1550333"
  },
  {
    "text": "Schema dot... Schema dot included. parse error and never",
    "start": "1552766",
    "end": "1557883"
  },
  {
    "text": "That's because I have forced that in in here.",
    "start": "1561216",
    "end": "1565616"
  },
  {
    "text": "But yeah, the thing is that... I want...",
    "start": "1566550",
    "end": "1570933"
  },
  {
    "text": "I'm using something wrong. Let's have a look together.",
    "start": "1572050",
    "end": "1576183"
  },
  {
    "text": "Let's see. Here events is schema any no context.",
    "start": "1578050",
    "end": "1586299"
  },
  {
    "text": "So any no context means that those have no context, right?",
    "start": "1587533",
    "end": "1593649"
  },
  {
    "text": "And it's a read-only array. Okay.",
    "start": "1596233",
    "end": "1598850"
  },
  {
    "text": "So ideally... If I do type context...",
    "start": "1601600",
    "end": "1608783"
  },
  {
    "text": "Equals schema... dot schema, dot context of schema...",
    "start": "1611899",
    "end": "1619350"
  },
  {
    "text": "dot schema... Any no context. This should be never by default, right?",
    "start": "1621383",
    "end": "1626382"
  },
  {
    "text": "That is correct. So there is something wrong in my code that makes that unknown or...",
    "start": "1628100",
    "end": "1636816"
  },
  {
    "text": "Events number is that... Okay.",
    "start": "1637766",
    "end": "1641116"
  },
  {
    "text": "So let's see. I think that that may be",
    "start": "1643583",
    "end": "1649050"
  },
  {
    "text": "caused by the fact that...",
    "start": "1649050",
    "end": "1650733"
  },
  {
    "text": "Here we have the type, number, schema dot encoded.",
    "start": "1654083",
    "end": "1658733"
  },
  {
    "text": "Oh, I have typed that two times. That's one problem.",
    "start": "1659199",
    "end": "1662699"
  },
  {
    "text": "Okay. Yeah, I think that the problem is that by extending the read-only array here, I lose some...",
    "start": "1664633",
    "end": "1670699"
  },
  {
    "text": "Type inference, but yeah, I can just... Wish this.",
    "start": "1671733",
    "end": "1676899"
  },
  {
    "text": "And now this should be fine. Yeah, we get the encoded shape.",
    "start": "1678050",
    "end": "1682433"
  },
  {
    "text": "Parse error, never. Perfect. And that we need to say schema...",
    "start": "1683616",
    "end": "1688516"
  },
  {
    "text": "Dot parse JSON of this.",
    "start": "1690483",
    "end": "1693399"
  },
  {
    "text": "This. And this should be an effect that string parse error, never.",
    "start": "1696266",
    "end": "1701250"
  },
  {
    "text": "Perfect. Okay. Now we can go back to our effect dot gen function star.",
    "start": "1701833",
    "end": "1710383"
  },
  {
    "text": "This is our function. Perfect. And then we can say... pipe effect dot catch all.",
    "start": "1712316",
    "end": "1720516"
  },
  {
    "text": "And whatever will be just a new event journal append failed.",
    "start": "1721433",
    "end": "1725783"
  },
  {
    "text": "Perfect. This is missing... That is...",
    "start": "1732533",
    "end": "1737549"
  },
  {
    "text": "Perfect. Okay. Now this is an effect in order to get the actual value.",
    "start": "1740283",
    "end": "1745083"
  },
  {
    "text": "We need to yield that. And we'll get now the string payload. Perfect.",
    "start": "1745399",
    "end": "1749616"
  },
  {
    "text": "Now we get the string payload. And so instead of appending that, we need to append the event payload.",
    "start": "1751183",
    "end": "1757149"
  },
  {
    "text": "That's perfect. And that will basically be our append function.",
    "start": "1758266",
    "end": "1763916"
  },
  {
    "text": "And we need to return... append And that's it.",
    "start": "1765800",
    "end": "1771316"
  },
  {
    "text": "Okay. So that's the append function. Now that we have the append function, creating the...",
    "start": "1772733",
    "end": "1779550"
  },
  {
    "text": "read function should be easier. This is our signature.",
    "start": "1781899",
    "end": "1787000"
  },
  {
    "text": "We can copy from here. We have then read.",
    "start": "1787383",
    "end": "1791433"
  },
  {
    "text": "Okay. And read will be...",
    "start": "1793449",
    "end": "1797100"
  },
  {
    "text": "Let's start by saying... effect gen function.",
    "start": "1799233",
    "end": "1803983"
  },
  {
    "text": "By the way, you're not forced to use effect dot gen.",
    "start": "1805733",
    "end": "1809333"
  },
  {
    "text": "Okay. So we can say... raw data equals...",
    "start": "1811333",
    "end": "1816333"
  },
  {
    "text": "Yield. Star SQL.",
    "start": "1817550",
    "end": "1820483"
  },
  {
    "text": "And select everything from event journal.",
    "start": "1824683",
    "end": "1830416"
  },
  {
    "text": "Order... By sequence.",
    "start": "1832250",
    "end": "1836383"
  },
  {
    "text": "ascending And... Where...",
    "start": "1838216",
    "end": "1841199"
  },
  {
    "text": "aggregate root equals...",
    "start": "1845533",
    "end": "1847982"
  },
  {
    "text": "aggregate root name. And... aggregate id...",
    "start": "1850550",
    "end": "1856399"
  },
  {
    "text": "aggregate id. Perfect.",
    "start": "1862649",
    "end": "1866783"
  },
  {
    "text": "And this one returns...",
    "start": "1869449",
    "end": "1871648"
  },
  {
    "text": "Which is... a row... array.",
    "start": "1880633",
    "end": "1884882"
  },
  {
    "text": "And so if we say... raw data. I think that there is also utilities to",
    "start": "1887199",
    "end": "1893416"
  },
  {
    "text": "read as it was a schema. bidding into that.",
    "start": "1893416",
    "end": "1899216"
  },
  {
    "text": "And then... Let me check.",
    "start": "1906666",
    "end": "1911648"
  },
  {
    "text": "Here we have read the message. Here we have the raw data. If we go to raw data 0.",
    "start": "1913016",
    "end": "1920500"
  },
  {
    "text": "We can see that raw data. We go to type definition. raw data is a read only.",
    "start": "1921033",
    "end": "1928383"
  },
  {
    "text": "Sorry. raw data. You go to type definition.",
    "start": "1928683",
    "end": "1933600"
  },
  {
    "text": "Let's go connection row. Which is basically a column and then a primitive",
    "start": "1934699",
    "end": "1940300"
  },
  {
    "text": "Yeah, that's fine. So here for each of those entry we get.",
    "start": "1940633",
    "end": "1948016"
  },
  {
    "text": "We need to decode that. Because that will be a row. Having aggregate root,",
    "start": "1949050",
    "end": "1954283"
  },
  {
    "text": "aggregate id sequence. Oh, we are missing another important value. We recently edit.",
    "start": "1954283",
    "end": "1960233"
  },
  {
    "text": "Created at Yeah, definitely. Okay.",
    "start": "1961583",
    "end": "1966482"
  },
  {
    "text": "Sequence. Oh well, we have",
    "start": "1968133",
    "end": "1973300"
  },
  {
    "text": "created that into the payload. So well, doesn't matter.",
    "start": "1973300",
    "end": "1976516"
  },
  {
    "text": "So we're seeing here we select the values. And once you have selected the values,",
    "start": "1978783",
    "end": "1983500"
  },
  {
    "text": "what we can do is go and say for something like",
    "start": "1983833",
    "end": "1992116"
  },
  {
    "text": "const stream equals a stream from iterable",
    "start": "1993199",
    "end": "1999398"
  },
  {
    "text": "And we will start from our raw data. And then we'll get a stream of rows perfectly.",
    "start": "2000216",
    "end": "2007483"
  },
  {
    "text": "But now that we have our stream of rows,",
    "start": "2007983",
    "end": "2014250"
  },
  {
    "text": "maybe we need to for each item transform that in that rule item.",
    "start": "2018833",
    "end": "2024433"
  },
  {
    "text": "We need to decode the payload. So we have stream dot map Effect row.",
    "start": "2024649",
    "end": "2034283"
  },
  {
    "text": "And we need to do something like schema dot decode.",
    "start": "2035250",
    "end": "2041800"
  },
  {
    "text": "And the schema we want to decode is again schema dot partition make event union schema.",
    "start": "2043750",
    "end": "2051699"
  },
  {
    "text": "We should have here the events schemas.",
    "start": "2052399",
    "end": "2059783"
  },
  {
    "text": "Okay. We need to pass in our",
    "start": "2066166",
    "end": "2072283"
  },
  {
    "text": "value, which is row dot. It was called I think event payload.",
    "start": "2072283",
    "end": "2082116"
  },
  {
    "text": "Perfect. But that, as you can see, is screaming at",
    "start": "2084633",
    "end": "2089699"
  },
  {
    "text": "us because first we need to.",
    "start": "2089699",
    "end": "2092449"
  },
  {
    "text": "because we had an effect returning a stream, but instead we want just a stream.",
    "start": "2097433",
    "end": "2103133"
  },
  {
    "text": "So we need to pull on wrap in order to get that. And then it's saying that parse error or SQL",
    "start": "2103133",
    "end": "2108583"
  },
  {
    "text": "error is not assignable to type never. And that's it, because we said here in",
    "start": "2108583",
    "end": "2116483"
  },
  {
    "text": "our time definition that reading the journal is an unfailable thing.",
    "start": "2116483",
    "end": "2122783"
  },
  {
    "text": "And I think that I will keep it as it is. So up to now we say stream or die.",
    "start": "2124116",
    "end": "2132600"
  },
  {
    "text": "And that's fine. Okay. So now we have something",
    "start": "2134116",
    "end": "2141983"
  },
  {
    "text": "that is screaming at us because yeah, that could be of any type, but we can for",
    "start": "2145733",
    "end": "2153233"
  },
  {
    "text": "now just cast that into a string.",
    "start": "2153233",
    "end": "2156250"
  },
  {
    "text": "Okay.",
    "start": "2159466",
    "end": "2159683"
  },
  {
    "text": "Okay. And now ideally,",
    "start": "2165350",
    "end": "2168916"
  },
  {
    "text": "yeah, read needs to be used. I think that now ideally we should be up",
    "start": "2170699",
    "end": "2178649"
  },
  {
    "text": "and running because now we read from the journal and order by sequence where they are",
    "start": "2178649",
    "end": "2186483"
  },
  {
    "text": "getting what we want. And then for each of that, we pass the JSON and if it fails we die yeah,",
    "start": "2186483",
    "end": "2194183"
  },
  {
    "text": "that's really unlookable code, but it should work. So let's see.",
    "start": "2194983",
    "end": "2200949"
  },
  {
    "text": "Let's see. Let's see. Let's see if we can make it better.",
    "start": "2201983",
    "end": "2206583"
  },
  {
    "text": "Let's see. I think that there is.",
    "start": "2209633",
    "end": "2212599"
  },
  {
    "text": "There is room for improvements. Because for example,",
    "start": "2219100",
    "end": "2224850"
  },
  {
    "text": "we can say things like,",
    "start": "2225550",
    "end": "2228750"
  },
  {
    "text": "we can say things like when we select here,",
    "start": "2231183",
    "end": "2235233"
  },
  {
    "text": "you can say dot row, I think.",
    "start": "2236616",
    "end": "2239816"
  },
  {
    "text": "And we can type out the fields we have ",
    "start": "2246433",
    "end": "2249833"
  },
  {
    "text": "Error that comes from EffectSQL",
    "start": "2254883",
    "end": "2258183"
  },
  {
    "text": "So. So let's type the fields we",
    "start": "2262350",
    "end": "2268216"
  },
  {
    "text": "have in our event journal. Maybe we can say interface event journal SQLite.",
    "start": "2268216",
    "end": "2280699"
  },
  {
    "text": "row And this would be as we have just said on aggregate root string.",
    "start": "2283050",
    "end": "2290632"
  },
  {
    "text": "On aggregate ID of type string.",
    "start": "2291949",
    "end": "2295716"
  },
  {
    "text": "And then we will have.",
    "start": "2297733",
    "end": "2301733"
  },
  {
    "text": "Sequence. Which will be number.",
    "start": "2303133",
    "end": "2306516"
  },
  {
    "text": "And event payload. Which will be string.",
    "start": "2308699",
    "end": "2314216"
  },
  {
    "text": "Okay, so this is basically an interface that represents our row in our database.",
    "start": "2316766",
    "end": "2323550"
  },
  {
    "text": "And now when we do select here, we can now say that.",
    "start": "2325683",
    "end": "2333649"
  },
  {
    "text": "Here we will get. An even journal SQL lite row array.",
    "start": "2335399",
    "end": "2341949"
  },
  {
    "text": "So now that cast is not needed anymore. I think.",
    "start": "2344616",
    "end": "2349050"
  },
  {
    "text": "Yeah, because. It understands that this is a string.",
    "start": "2350383",
    "end": "2355000"
  },
  {
    "text": "Because we have casted it when we do the query in the same place.",
    "start": "2355800",
    "end": "2359833"
  },
  {
    "text": "And I think that we should be up and running.",
    "start": "2361816",
    "end": "2366199"
  },
  {
    "text": "We have three errors that are the things that.",
    "start": "2367416",
    "end": "2370716"
  },
  {
    "text": "Maybe. Maybe instead of.",
    "start": "2375100",
    "end": "2379300"
  },
  {
    "text": "Maybe instead of passing in. entire file name.",
    "start": "2381899",
    "end": "2388149"
  },
  {
    "text": "We can just don't care about the file name and the final name will be provided when",
    "start": "2389483",
    "end": "2395300"
  },
  {
    "text": "we create the actual SQLite connection. So this is an effect.",
    "start": "2395300",
    "end": "2399583"
  },
  {
    "text": "But again, we need that as a layer. So pipe.",
    "start": "2400550",
    "end": "2404799"
  },
  {
    "text": "Layer dot effect. And.",
    "start": "2406149",
    "end": "2409533"
  },
  {
    "text": "Journal storage. I think. Yeah. And now. That is happy.",
    "start": "2412316",
    "end": "2418350"
  },
  {
    "text": "Okay, so I'll move. Something maybe I'll keep this type",
    "start": "2419416",
    "end": "2424683"
  },
  {
    "text": "internal but move it down. Maybe. This is function.",
    "start": "2424683",
    "end": "2430199"
  },
  {
    "text": "Here, maybe we can move it. After the interface. Yeah, okay.",
    "start": "2434183",
    "end": "2439149"
  },
  {
    "text": "Okay, so we can clean that up later. But yeah.",
    "start": "2441250",
    "end": "2444616"
  },
  {
    "text": "Okay, so. In here. Why are you screaming?",
    "start": "2447000",
    "end": "2451600"
  },
  {
    "text": "append Oh, yeah.",
    "start": "2453633",
    "end": "2456850"
  },
  {
    "text": "We have said now that.",
    "start": "2458733",
    "end": "2461932"
  },
  {
    "text": "Append could fail. With an event journal append event entry failed",
    "start": "2464116",
    "end": "2471515"
  },
  {
    "text": "And so we need to say that. When we try to.",
    "start": "2472116",
    "end": "2477000"
  },
  {
    "text": "Append here, we need to propagate the failure.",
    "start": "2478666",
    "end": "2482099"
  },
  {
    "text": "So where do we want to propagate the failure? Let's say that.",
    "start": "2484250",
    "end": "2488300"
  },
  {
    "text": "We have a producer. basically we can have two different kind of ideas.",
    "start": "2491466",
    "end": "2498683"
  },
  {
    "text": "We can either say that.",
    "start": "2499449",
    "end": "2501599"
  },
  {
    "text": "This. Function. This producer.",
    "start": "2505483",
    "end": "2509899"
  },
  {
    "text": "May fail. With that.",
    "start": "2511800",
    "end": "2516015"
  },
  {
    "text": "And for now. That's. event journal storage.",
    "start": "2517316",
    "end": "2522983"
  },
  {
    "text": "And for now, that is the easiest thing to do by.",
    "start": "2526583",
    "end": "2530533"
  },
  {
    "text": "Doing the development of our application. We will see that.",
    "start": "2531916",
    "end": "2535599"
  },
  {
    "text": "We can. If everything is done into a transaction.",
    "start": "2538066",
    "end": "2543283"
  },
  {
    "text": "It can say things like. If we appended.",
    "start": "2543850",
    "end": "2548233"
  },
  {
    "text": "If the journal appends and he failed for some reason. We can retry that in some cases.",
    "start": "2549033",
    "end": "2554616"
  },
  {
    "text": "We can have, for example, concurrency case. If everything the entity performs is in a transaction.",
    "start": "2556183",
    "end": "2562432"
  },
  {
    "text": "If it tries to append an entity and sees that the sequence is broken. Because someone else write a new event.",
    "start": "2563183",
    "end": "2569583"
  },
  {
    "text": "We can retry everything because if we are performing everything in memory.",
    "start": "2570483",
    "end": "2575333"
  },
  {
    "text": "inside a transaction or whatever. We can basically roll back as we never did anything.",
    "start": "2575699",
    "end": "2580616"
  },
  {
    "text": "Okay. So here.",
    "start": "2585199",
    "end": "2589833"
  },
  {
    "text": "Right now why are you screaming at me.",
    "start": "2593233",
    "end": "2596299"
  },
  {
    "text": "I've put into the wrong place. my failure.",
    "start": "2605016",
    "end": "2609833"
  },
  {
    "text": "Into the producer. Yeah. It's void. Then that.",
    "start": "2611033",
    "end": "2616883"
  },
  {
    "text": "And that is void. That and that never. Okay.",
    "start": "2617616",
    "end": "2621800"
  },
  {
    "text": "Perfect. Last error appends.",
    "start": "2623483",
    "end": "2626715"
  },
  {
    "text": "we need to change the signature of the producer as well.",
    "start": "2630466",
    "end": "2636183"
  },
  {
    "text": "Producer. That is the draft. And the draft append may fail with.",
    "start": "2637649",
    "end": "2643050"
  },
  {
    "text": "Event journal. Storage.",
    "start": "2645216",
    "end": "2647949"
  },
  {
    "text": "Okay. Now. We are perfect. Okay.",
    "start": "2650783",
    "end": "2658116"
  },
  {
    "text": "Let's try. Maybe do some tests. For. Our code.",
    "start": "2659966",
    "end": "2664516"
  },
  {
    "text": "So first thing I think we need to do is.",
    "start": "2665683",
    "end": "2670266"
  },
  {
    "text": "Include.",
    "start": "2670983",
    "end": "2671983"
  },
  {
    "text": "SQL.",
    "start": "2679616",
    "end": "2681800"
  },
  {
    "text": "And I think that now when I will run PNPM installer, it will broke everything.",
    "start": "2702366",
    "end": "2708316"
  },
  {
    "text": "So let's see.",
    "start": "2710083",
    "end": "2710816"
  },
  {
    "text": "OK. So it is installing better SQLite.",
    "start": "2728649",
    "end": "2731449"
  },
  {
    "text": "Yeah, that is what I was expecting.",
    "start": "2754750",
    "end": "2758350"
  },
  {
    "text": "We are getting a matte error, yeah, because we have older versions, yeah.",
    "start": "2766283",
    "end": "2772432"
  },
  {
    "text": "Yeah. So let's see. Let me bring it up.",
    "start": "2774833",
    "end": "2780750"
  },
  {
    "text": "Let's see. Maybe, maybe, maybe. Do we have a clean task?",
    "start": "2783916",
    "end": "2788416"
  },
  {
    "text": "Let me see.",
    "start": "2789916",
    "end": "2790783"
  },
  {
    "text": "PNPM clean. Let's see if that cleans up also the normal use.",
    "start": "2796666",
    "end": "2802483"
  },
  {
    "text": "No, it doesn't. Let's remove the lock files.",
    "start": "2802483",
    "end": "2808816"
  },
  {
    "text": "And PNPM install again.",
    "start": "2813916",
    "end": "2816033"
  },
  {
    "text": "Why, why, why, why, why, why? Why did I do that?",
    "start": "2819116",
    "end": "2823333"
  },
  {
    "text": "Oh, it's recreating that from the normal use. Yeah, yeah, yeah. Let's trash it away as well.",
    "start": "2825083",
    "end": "2830916"
  },
  {
    "text": "OK. Now And perform a clean install and see.",
    "start": "2832883",
    "end": "2839449"
  },
  {
    "text": "It will take a while.",
    "start": "2842250",
    "end": "2843050"
  },
  {
    "text": "OK.",
    "start": "2859716",
    "end": "2859916"
  },
  {
    "text": "OK. Now we should be in a better place.",
    "start": "2867266",
    "end": "2872033"
  },
  {
    "text": "Maybe I need to restart. reload window.",
    "start": "2873333",
    "end": "2879750"
  },
  {
    "text": "OK.",
    "start": "2887000",
    "end": "2887850"
  },
  {
    "text": "OK. Now we should be able in here to say things like.",
    "start": "2892616",
    "end": "2899983"
  },
  {
    "text": "and the test will be like",
    "start": "2915816",
    "end": "2920000"
  },
  {
    "text": "basically the same one as this for example",
    "start": "2923250",
    "end": "2928883"
  },
  {
    "text": "We can use the same test and that's one of the great things of",
    "start": "2941283",
    "end": "2946300"
  },
  {
    "text": "the dependency injection of effect. But instead of providing memory, we will say SQLite.",
    "start": "2946300",
    "end": "2952783"
  },
  {
    "text": "Now it will complain saying that it needs an SQLite connection, right?",
    "start": "2952783",
    "end": "2958149"
  },
  {
    "text": "SQLite is not assignable to type test services, right? And then we need to actually provide one.",
    "start": "2959500",
    "end": "2968083"
  },
  {
    "text": "So I think that it works the way like import everything as",
    "start": "2968949",
    "end": "2975133"
  },
  {
    "text": "SQLite node from effect",
    "start": "2975133",
    "end": "2980483"
  },
  {
    "text": "SQLite node. SQLite client.",
    "start": "2980483",
    "end": "2983683"
  },
  {
    "text": "And then you can do things like SQLite client node dot make.",
    "start": "2988149",
    "end": "3003716"
  },
  {
    "text": "And this should return an effect. Yeah.",
    "start": "3005333",
    "end": "3008916"
  },
  {
    "text": "And effect that creates the SQLite client. Yeah. Isn't there also layer?",
    "start": "3012266",
    "end": "3018616"
  },
  {
    "text": "Yeah, layer. That's better. So we can say effect dot provide SQLite client node dot layer.",
    "start": "3018949",
    "end": "3032182"
  },
  {
    "text": "And I think that will require file name. Test.",
    "start": "3032699",
    "end": "3037616"
  },
  {
    "text": "dot db",
    "start": "3038600",
    "end": "3039483"
  },
  {
    "text": "But seems like that. Now it's happy Maybe I",
    "start": "3044633",
    "end": "3050899"
  },
  {
    "text": "accidentally when missing parents. Yeah. Okay.",
    "start": "3050899",
    "end": "3055199"
  },
  {
    "text": "Well, now we should have everything we",
    "start": "3055949",
    "end": "3061949"
  },
  {
    "text": "need to try to run this test.",
    "start": "3061949",
    "end": "3065316"
  },
  {
    "text": "And it passed. I don't know. Well, we have a DB.",
    "start": "3067233",
    "end": "3073283"
  },
  {
    "text": "I think that I had an extension SQL.",
    "start": "3075633",
    "end": "3078816"
  },
  {
    "text": "I think that I had an extension showing SQLite. database Let's see extension SQLite.",
    "start": "3082750",
    "end": "3090432"
  },
  {
    "text": "Let's see.",
    "start": "3099316",
    "end": "3099649"
  },
  {
    "text": "This one seems nice. Let's use this.",
    "start": "3106566",
    "end": "3111199"
  },
  {
    "text": "Okay. So I think that now we can do things like",
    "start": "3113183",
    "end": "3118800"
  },
  {
    "text": "SQLite, open database,",
    "start": "3118800",
    "end": "3124250"
  },
  {
    "text": "test DB, SQLite Explorer, test DB.",
    "start": "3126250",
    "end": "3131433"
  },
  {
    "text": "We have our table, even journal. And have a look at that.",
    "start": "3131649",
    "end": "3137149"
  },
  {
    "text": "We have our sample event.",
    "start": "3138416",
    "end": "3141050"
  },
  {
    "text": "That's perfect. The only thing that I don't like...",
    "start": "3144316",
    "end": "3150199"
  },
  {
    "text": "Oh, well. The only thing that I expected different",
    "start": "3152566",
    "end": "3158949"
  },
  {
    "text": "is that here we have...",
    "start": "3158949",
    "end": "3163849"
  },
  {
    "text": "Oh, yeah, yeah, yeah, yeah, yeah, yeah, yeah. That's right, because in our test, I",
    "start": "3164533",
    "end": "3170116"
  },
  {
    "text": "expected here to also have other metadata. But yeah, in our test, we",
    "start": "3170116",
    "end": "3175316"
  },
  {
    "text": "don't use those metadata. If I have a look, that's right.",
    "start": "3175316",
    "end": "3180949"
  },
  {
    "text": "Sample event just has the tags and that's it. Maybe we can add some complex fields to",
    "start": "3180949",
    "end": "3188816"
  },
  {
    "text": "make it this more interesting. But yeah, that seems to work.",
    "start": "3188816",
    "end": "3194316"
  },
  {
    "text": "And if I try to run again that, that should ideally fail.",
    "start": "3195333",
    "end": "3201149"
  },
  {
    "text": "And I'll show you why. Let me close that.",
    "start": "3202133",
    "end": "3206000"
  },
  {
    "text": "I don't care about why I get a split view.",
    "start": "3207616",
    "end": "3212882"
  },
  {
    "text": "I don't want a split view. Close all. Perfect. And close all.",
    "start": "3213250",
    "end": "3218616"
  },
  {
    "text": "Okay. Let me show you. If I try to run again the test, it will fail.",
    "start": "3220516",
    "end": "3226016"
  },
  {
    "text": "And saying fail to prepare statement. And that is because we already have the",
    "start": "3227333",
    "end": "3235215"
  },
  {
    "text": "event journal table.",
    "start": "3235216",
    "end": "3238149"
  },
  {
    "text": "And is there a way to run a query? Yeah. drop table event journal, I think.",
    "start": "3240350",
    "end": "3251816"
  },
  {
    "text": "And I think that if I save, it will run.",
    "start": "3252983",
    "end": "3256432"
  },
  {
    "text": "Let's see. SQLite. run query.",
    "start": "3259933",
    "end": "3264599"
  },
  {
    "text": "Okay. It should have run. If I refresh, we don't have the table anymore.",
    "start": "3266216",
    "end": "3271683"
  },
  {
    "text": "But if we run the test again, it runs.",
    "start": "3272600",
    "end": "3277733"
  },
  {
    "text": "So I don't know if SQLite, because usually I use Microsoft",
    "start": "3278600",
    "end": "3285116"
  },
  {
    "text": "SQLite, Microsoft SQL is the deaf SQLite. But we see SQLite.",
    "start": "3285116",
    "end": "3292316"
  },
  {
    "text": "does it supports create table if not exists.",
    "start": "3292949",
    "end": "3296616"
  },
  {
    "text": "Create table if not exists. So here it's even",
    "start": "3298616",
    "end": "3306816"
  },
  {
    "text": "smarter than Microsoft SQL. And say that in our journal here, we say",
    "start": "3306816",
    "end": "3314633"
  },
  {
    "text": "create table if not exists.",
    "start": "3314633",
    "end": "3319550"
  },
  {
    "text": "Perfect. And save. And now if we run again our tests, I",
    "start": "3321233",
    "end": "3331449"
  },
  {
    "text": "still expect a failure. Guess why?",
    "start": "3331449",
    "end": "3335883"
  },
  {
    "text": "We run the test.",
    "start": "3338633",
    "end": "3341399"
  },
  {
    "text": "Expected 2 to deeply equal one. And that is because if we take a look at",
    "start": "3344149",
    "end": "3351932"
  },
  {
    "text": "our test db, we don't have any key or whatever.",
    "start": "3351933",
    "end": "3359183"
  },
  {
    "text": "show table. Yep. That is.",
    "start": "3361300",
    "end": "3366515"
  },
  {
    "text": "Yeah. We don't have any primary key or whatever. And that means that we can append how",
    "start": "3366800",
    "end": "3373050"
  },
  {
    "text": "many times we want the same event. And that's not exactly what I want.",
    "start": "3373050",
    "end": "3378449"
  },
  {
    "text": "So we need to either create a primary key",
    "start": "3379216",
    "end": "3382233"
  },
  {
    "text": "or a unique key that",
    "start": "3385100",
    "end": "3390783"
  },
  {
    "text": "says that the triplet aggregates root, aggregate ID, and sequence",
    "start": "3390783",
    "end": "3396416"
  },
  {
    "text": "is something that should not be violated.",
    "start": "3396416",
    "end": "3400133"
  },
  {
    "text": "So let's again query and",
    "start": "3403100",
    "end": "3413833"
  },
  {
    "text": "drop table event journal.",
    "start": "3413833",
    "end": "3417833"
  },
  {
    "text": "And then run query",
    "start": "3419416",
    "end": "3423816"
  },
  {
    "text": "Now we should have dropped our table. Perfect. Let's see.",
    "start": "3425916",
    "end": "3431349"
  },
  {
    "text": "How can we express?",
    "start": "3431600",
    "end": "3433100"
  },
  {
    "text": "Let's try. Let's see.",
    "start": "3436699",
    "end": "3440616"
  },
  {
    "text": "We can say create table. Where is aggregate storage here?",
    "start": "3447266",
    "end": "3453849"
  },
  {
    "text": "When we create our table, here, create table if not exist.",
    "start": "3455000",
    "end": "3459833"
  },
  {
    "text": "And then we start the description of the table with aggregate",
    "start": "3460816",
    "end": "3466016"
  },
  {
    "text": "root, aggregate ID, sequence, event payload.",
    "start": "3466016",
    "end": "3470949"
  },
  {
    "text": "And then we will see something like primary key.",
    "start": "3471449",
    "end": "3478233"
  },
  {
    "text": "And then, aggregate root, aggregate ID, sequence.",
    "start": "3479949",
    "end": "3489233"
  },
  {
    "text": "This is the primary key I expect to have. And if we try to run again",
    "start": "3490916",
    "end": "3496500"
  },
  {
    "text": "our test, it should fail still.",
    "start": "3496500",
    "end": "3500449"
  },
  {
    "text": "But failed to prepare statement",
    "start": "3502100",
    "end": "3506149"
  },
  {
    "text": "what did I do wrong? Primary key.",
    "start": "3507500",
    "end": "3512933"
  },
  {
    "text": "Oh, maybe",
    "start": "3515816",
    "end": "3517549"
  },
  {
    "text": "Yeah.",
    "start": "3520949",
    "end": "3521233"
  },
  {
    "text": "Maybe it's that the recipe",
    "start": "3527566",
    "end": "3529682"
  },
  {
    "text": "Where is my database explorer here?",
    "start": "3534233",
    "end": "3537783"
  },
  {
    "text": "Let's try to run the query.",
    "start": "3547583",
    "end": "3549216"
  },
  {
    "text": "syntax error. Oh, did you want that?",
    "start": "3559833",
    "end": "3567333"
  },
  {
    "text": "Sorry. No.",
    "start": "3570449",
    "end": "3575399"
  },
  {
    "text": "Create table if not exist.",
    "start": "3581250",
    "end": "3582350"
  },
  {
    "text": "Are you expecting that to work that way? Let's see.",
    "start": "3586649",
    "end": "3591333"
  },
  {
    "text": "Oh, it's missing a comma in here. Man.",
    "start": "3608149",
    "end": "3611733"
  },
  {
    "text": "Oh, man. Yeah, that works. Yeah. Okay, so it's missing a comma.",
    "start": "3613516",
    "end": "3621199"
  },
  {
    "text": "Yeah. Perfect.",
    "start": "3621983",
    "end": "3623899"
  },
  {
    "text": "But now, if we try to run our test, it should run.",
    "start": "3627149",
    "end": "3632133"
  },
  {
    "text": "But the second time it should fail. Yes, perfect.",
    "start": "3632683",
    "end": "3636500"
  },
  {
    "text": "And if I take a look,",
    "start": "3639149",
    "end": "3640500"
  },
  {
    "text": "I'm in the back on our tests.",
    "start": "3644183",
    "end": "3646716"
  },
  {
    "text": "Here. Yep, errors occurred Yep.",
    "start": "3650433",
    "end": "3655333"
  },
  {
    "text": "And the error is that we have broken our primary key.",
    "start": "3657550",
    "end": "3663483"
  },
  {
    "text": "If I try to append with a different",
    "start": "3664783",
    "end": "3671099"
  },
  {
    "text": "sequence, for example, with the sequence two, and save,",
    "start": "3671100",
    "end": "3675000"
  },
  {
    "text": "and run again, it works. But again, we have two events into",
    "start": "3677583",
    "end": "3683750"
  },
  {
    "text": "the table, that's expected. So the thing is that now we need to make",
    "start": "3683750",
    "end": "3689833"
  },
  {
    "text": "so the tests actually recreate their DB every time instead of that.",
    "start": "3689833",
    "end": "3702015"
  },
  {
    "text": "Let's see. If we have file name readonly",
    "start": "3702433",
    "end": "3704550"
  },
  {
    "text": "Well, unfortunately, we don't have method to recreate what is on the file.",
    "start": "3707983",
    "end": "3713416"
  },
  {
    "text": "But yeah, we could.",
    "start": "3715133",
    "end": "3717083"
  },
  {
    "text": "We could say things like",
    "start": "3721600",
    "end": "3727283"
  },
  {
    "text": "const SQL equals Yield star SQL",
    "start": "3727300",
    "end": "3734216"
  },
  {
    "text": "client.",
    "start": "3736949",
    "end": "3738316"
  },
  {
    "text": "And then we can say, yueld star.",
    "start": "3743183",
    "end": "3746833"
  },
  {
    "text": "Is there a drop table if it not exist?",
    "start": "3750600",
    "end": "3753183"
  },
  {
    "text": "Let's see.",
    "start": "3758083",
    "end": "3758683"
  },
  {
    "text": "Yeah, we can do things like SQL.",
    "start": "3767066",
    "end": "3770132"
  },
  {
    "text": "And the drop table if exists.",
    "start": "3773949",
    "end": "3777716"
  },
  {
    "text": "Event journal.",
    "start": "3779350",
    "end": "3781933"
  },
  {
    "text": "Okay, now the test. an error is occurred Why?",
    "start": "3789949",
    "end": "3794916"
  },
  {
    "text": "Let's see what can be the possible error.",
    "start": "3802250",
    "end": "3805683"
  },
  {
    "text": "Let's run that.",
    "start": "3807683",
    "end": "3809083"
  },
  {
    "text": "Okay, and see here. Let's run the test in debug mode.",
    "start": "3822916",
    "end": "3830899"
  },
  {
    "text": "Here. Oh, yeah. Yeah, to be honest.",
    "start": "3834733",
    "end": "3841233"
  },
  {
    "text": "Oh, now it passed.",
    "start": "3846600",
    "end": "3848500"
  },
  {
    "text": "Oh, I add the file in usage. Yeah, yeah, yeah, yeah. Makes sense.",
    "start": "3851800",
    "end": "3855283"
  },
  {
    "text": "Okay. No, well, no, it's actually.",
    "start": "3856833",
    "end": "3861033"
  },
  {
    "text": "Let's see if I say the thing is that",
    "start": "3868283",
    "end": "3873283"
  },
  {
    "text": "I passed that.",
    "start": "3873916",
    "end": "3877350"
  },
  {
    "text": "Now the error has occurred.",
    "start": "3879133",
    "end": "3880383"
  },
  {
    "text": "I wish it gave more information than only just error has occurred.",
    "start": "3894466",
    "end": "3900283"
  },
  {
    "text": "Let's see.",
    "start": "3901800",
    "end": "3903583"
  },
  {
    "text": "Expect the append to fail. So if I debug.",
    "start": "3906949",
    "end": "3914283"
  },
  {
    "text": "I expect come here. And then fails. Okay.",
    "start": "3916283",
    "end": "3920916"
  },
  {
    "text": "Okay.",
    "start": "3926983",
    "end": "3927182"
  },
  {
    "text": "Let's see.",
    "start": "3935100",
    "end": "3935433"
  },
  {
    "text": "I expect to also reach that point.",
    "start": "3940933",
    "end": "3944850"
  },
  {
    "text": "If it fails. Okay, that's the error.",
    "start": "3946016",
    "end": "3950116"
  },
  {
    "text": "Fail. Oh, yeah. Oh, yeah, yeah, yeah. That append journal entry failed",
    "start": "3951149",
    "end": "3957816"
  },
  {
    "text": "with the sequence zero. Okay.",
    "start": "3957949",
    "end": "3961500"
  },
  {
    "text": "Okay. So let's maybe put a breakpoint in there.",
    "start": "3963066",
    "end": "3969383"
  },
  {
    "text": "And see which is the actual.",
    "start": "3971333",
    "end": "3974333"
  },
  {
    "text": "Okay. debug test again.",
    "start": "3979766",
    "end": "3983633"
  },
  {
    "text": "Here, we append. Okay, here.",
    "start": "3986449",
    "end": "3990399"
  },
  {
    "text": "It was too late. Okay.",
    "start": "3998383",
    "end": "4001149"
  },
  {
    "text": "Okay. I don't know why in line. Fails to prepare a statement.",
    "start": "4037100",
    "end": "4044050"
  },
  {
    "text": "No such table, event journal. Oh, makes sense.",
    "start": "4044383",
    "end": "4049383"
  },
  {
    "text": "I dropped the table. But the table is created when the layer is provided.",
    "start": "4050883",
    "end": "4057399"
  },
  {
    "text": "Yeah, yeah, yeah, yeah, yeah, yeah. So delete from.",
    "start": "4057399",
    "end": "4062699"
  },
  {
    "text": "Yep. seen the mistakes and how to make them.",
    "start": "4066949",
    "end": "4070100"
  },
  {
    "text": "Okay. Now, it should pass every time. Yeah.",
    "start": "4073133",
    "end": "4078116"
  },
  {
    "text": "Because each time it cleans up the event journal. Perfect.",
    "start": "4078550",
    "end": "4083633"
  },
  {
    "text": "Perfect. Okay. So we can even go more",
    "start": "4085433",
    "end": "4092766"
  },
  {
    "text": "towards some customization. Maybe instead of having a fixed name for",
    "start": "4092766",
    "end": "4100149"
  },
  {
    "text": "the event journal table, we can say something like",
    "start": "4100149",
    "end": "4104532"
  },
  {
    "text": "export interface.",
    "start": "4108649",
    "end": "4113865"
  },
  {
    "text": "And event journal.",
    "start": "4117300",
    "end": "4121365"
  },
  {
    "text": "Make args And this could be table.",
    "start": "4127266",
    "end": "4131566"
  },
  {
    "text": "journal table name.",
    "start": "4134449",
    "end": "4140533"
  },
  {
    "text": "It's string. So that way you get to pass in event journal SQLite make args",
    "start": "4141800",
    "end": "4153382"
  },
  {
    "text": "And here instead of hard coding the name of the table, we can do things like",
    "start": "4155666",
    "end": "4162632"
  },
  {
    "text": "Unsafe, I think. Now that creates a statement.",
    "start": "4178533",
    "end": "4183250"
  },
  {
    "text": "There was a way to say that I want this exact string.",
    "start": "4190850",
    "end": "4195216"
  },
  {
    "text": "Literal. Yep.",
    "start": "4196866",
    "end": "4199533"
  },
  {
    "text": "So that creates a table with a dynamic name. And inserting to, we",
    "start": "4206783",
    "end": "4213149"
  },
  {
    "text": "need to use the same thing. And select from, same thing.",
    "start": "4213149",
    "end": "4220166"
  },
  {
    "text": "So now in our test, we can save things like",
    "start": "4224300",
    "end": "4230633"
  },
  {
    "text": "And right now it should behave exactly as before.",
    "start": "4241949",
    "end": "4245633"
  },
  {
    "text": "Perfect. Okay.",
    "start": "4248083",
    "end": "4251316"
  },
  {
    "text": "And I think that with that, I am almost",
    "start": "4258183",
    "end": "4264616"
  },
  {
    "text": "happy with how it works. I think that we can spend some time",
    "start": "4264616",
    "end": "4269783"
  },
  {
    "text": "cleaning up the code because it's quite a mess right now.",
    "start": "4269783",
    "end": "4273616"
  },
  {
    "text": "So let's see.",
    "start": "4275016",
    "end": "4275933"
  },
  {
    "text": "These are the arguments. Nothing much more to clean. We will get a SQLite client.",
    "start": "4280550",
    "end": "4286666"
  },
  {
    "text": "And then we create the events table if not exist.",
    "start": "4287966",
    "end": "4296633"
  },
  {
    "text": "Create. And here then we have all of our madness.",
    "start": "4300233",
    "end": "4307783"
  },
  {
    "text": "Yeah, we can do that. Now that we have write the function, we",
    "start": "4309683",
    "end": "4315716"
  },
  {
    "text": "can do that only in one pipe.",
    "start": "4315716",
    "end": "4319115"
  },
  {
    "text": "Effect.tap.",
    "start": "4320766",
    "end": "4322766"
  },
  {
    "text": "And perform the SQL.",
    "start": "4330183",
    "end": "4331949"
  },
  {
    "text": "So we don't use Effect.gen.",
    "start": "4336316",
    "end": "4338233"
  },
  {
    "text": "That is event payload. Oh, well.",
    "start": "4342183",
    "end": "4346865"
  },
  {
    "text": "Let's go back while I screwed up. Here, here. Yeah, okay.",
    "start": "4348183",
    "end": "4353333"
  },
  {
    "text": "Maybe let's keep it like that. That's fine.",
    "start": "4353766",
    "end": "4358083"
  },
  {
    "text": "The only thing that I am not so happy that we need to see is that",
    "start": "4360050",
    "end": "4367766"
  },
  {
    "text": "maybe instead of catching all, we can say",
    "start": "4369183",
    "end": "4373083"
  },
  {
    "text": ".catch.",
    "start": "4375550",
    "end": "4376649"
  },
  {
    "text": "SQL error. So in case of an SQL error, we return.",
    "start": "4385483",
    "end": "4392883"
  },
  {
    "text": "In case of that, we return that. Or we die.",
    "start": "4402633",
    "end": "4408782"
  },
  {
    "text": "So that way, if we have an SQL error, we fail.",
    "start": "4410466",
    "end": "4415383"
  },
  {
    "text": "And given we just perform an inserting too.",
    "start": "4415933",
    "end": "4419766"
  },
  {
    "text": "That means that either table does exists or we have broken the primary key,",
    "start": "4421416",
    "end": "4427983"
  },
  {
    "text": "which will be most of the cases. I don't need to return that.",
    "start": "4427983",
    "end": "4434266"
  },
  {
    "text": "That's so we can create it up. Okay.",
    "start": "4437116",
    "end": "4440483"
  },
  {
    "text": "And here, we can do things like we have our raw data.",
    "start": "4445633",
    "end": "4454133"
  },
  {
    "text": "From our raw data, we create a stream.fromIterable Yeah, I think that this can be expressed",
    "start": "4455550",
    "end": "4463550"
  },
  {
    "text": "in a more clean way than the one we have right now.",
    "start": "4463550",
    "end": "4468916"
  },
  {
    "text": "So let's try to clean up this code. We need to perform the",
    "start": "4469433",
    "end": "4476250"
  },
  {
    "text": "query, and that is the query. So we can maybe, yeah, we have the query.",
    "start": "4476250",
    "end": "4484865"
  },
  {
    "text": "Then from that, can do that.",
    "start": "4485616",
    "end": "4492683"
  },
  {
    "text": "Stream, then we need to map effect. Yeah, given here, we have stream, and stream doesn't play",
    "start": "4494983",
    "end": "4501666"
  },
  {
    "text": "really nice with effect.gen, because the thing is that stream is a",
    "start": "4501666",
    "end": "4507966"
  },
  {
    "text": "multi-shot, meaning that it may trigger multiple times for each value that the stream emits.",
    "start": "4507966",
    "end": "4513716"
  },
  {
    "text": "There is no again syntax for stream. So the other approach we can use here is",
    "start": "4514149",
    "end": "4521566"
  },
  {
    "text": "to use a pipe syntax. And so it will be something like performing the query",
    "start": "4521566",
    "end": "4528866"
  },
  {
    "text": "first to get the raw data.",
    "start": "4528866",
    "end": "4531666"
  },
  {
    "text": "So let's just move in here, perform the query, then we'll get the raw data of",
    "start": "4540100",
    "end": "4546483"
  },
  {
    "text": "pipe, and then we say stream from iterable",
    "start": "4546483",
    "end": "4552983"
  },
  {
    "text": "Oh well, that is an effect, yeah. Then from, yeah, yeah, yeah, yeah, we",
    "start": "4557433",
    "end": "4564133"
  },
  {
    "text": "need to, that cannot work. We still need one level of effect, yeah.",
    "start": "4564133",
    "end": "4571133"
  },
  {
    "text": "We still need one level of effect, because, yeah, we need, not execute from",
    "start": "4572850",
    "end": "4578166"
  },
  {
    "text": "iterable, we need to have the actual array, so we need to perform the effect first.",
    "start": "4578166",
    "end": "4582750"
  },
  {
    "text": "Yeah, yeah, let's keep it like that for now. Yeah, we will find something more",
    "start": "4596833",
    "end": "4602149"
  },
  {
    "text": "intelligent, definitely next time, yeah.",
    "start": "4602149",
    "end": "4607166"
  },
  {
    "text": "But yeah, for now, I think that I am happy with what I've done.",
    "start": "4608183",
    "end": "4613416"
  },
  {
    "text": "We also have tested, our event journal, if we look at the table, we have things,",
    "start": "4617516",
    "end": "4625365"
  },
  {
    "text": "we have records, so that's really nice. Yeah, I think that right now we have",
    "start": "4626416",
    "end": "4634816"
  },
  {
    "text": "built half of the infrastructure we need, and the other part of the infrastructure",
    "start": "4634816",
    "end": "4640850"
  },
  {
    "text": "we need that we will look into next time is definitely creating the actual APIs.",
    "start": "4640850",
    "end": "4647750"
  },
  {
    "text": "So right now we have just doing infrastructure, but next time we will use",
    "start": "4649183",
    "end": "4655750"
  },
  {
    "text": "effect in order to create restful APIs",
    "start": "4655750",
    "end": "4661933"
  },
  {
    "text": "that consumes our event journal and that eventually append new things",
    "start": "4661933",
    "end": "4667916"
  },
  {
    "text": "into the event journal. Okay, so let's just have a quick final",
    "start": "4667916",
    "end": "4674166"
  },
  {
    "text": "look at every test is up and running. They are perfectly all running.",
    "start": "4674166",
    "end": "4678549"
  },
  {
    "text": "Maybe let's just rename this test. Oh no, create SQLite events, we already",
    "start": "4679833",
    "end": "4686533"
  },
  {
    "text": "have named that, perfect. Okay, let me just check one last thing.",
    "start": "4686533",
    "end": "4693166"
  },
  {
    "text": "Okay, here we have built the table, the",
    "start": "4697883",
    "end": "4705216"
  },
  {
    "text": "code is working, everything that right now.",
    "start": "4705216",
    "end": "4711282"
  },
  {
    "text": "Right now that is okay, that is okay.",
    "start": "4711283",
    "end": "4717783"
  },
  {
    "text": "Okay, so right now we perform those",
    "start": "4718683",
    "end": "4728983"
  },
  {
    "text": "insert queries, each one into a different",
    "start": "4728983",
    "end": "4735333"
  },
  {
    "text": "transaction basically. The thing that we need to change right now, and I would like to have is",
    "start": "4735333",
    "end": "4744133"
  },
  {
    "text": "something that when we have our, let me go to an actual usage,",
    "start": "4744133",
    "end": "4749866"
  },
  {
    "text": "maybe we have our scratchpad yeah, scratch. Right now each event is",
    "start": "4751533",
    "end": "4762716"
  },
  {
    "text": "appended as if is a transaction.",
    "start": "4762716",
    "end": "4765166"
  },
  {
    "text": "the real reason I built these produce like API is that I would",
    "start": "4768183",
    "end": "4775516"
  },
  {
    "text": "like to everything that happens inside this function to eventually",
    "start": "4775516",
    "end": "4783032"
  },
  {
    "text": "run into an SQLite transaction.",
    "start": "4783033",
    "end": "4788166"
  },
  {
    "text": "That way, everything that happens here is",
    "start": "4789183",
    "end": "4795283"
  },
  {
    "text": "performing a set of transactions. So is either appending events or is there we don't.",
    "start": "4795283",
    "end": "4800166"
  },
  {
    "text": "And the thing is that either we",
    "start": "4802333",
    "end": "4809750"
  },
  {
    "text": "introducing to the interface concept of a",
    "start": "4809750",
    "end": "4814816"
  },
  {
    "text": "transaction, but I think that given we",
    "start": "4814816",
    "end": "4820133"
  },
  {
    "text": "then want everything inside that to be in the same transaction.",
    "start": "4820133",
    "end": "4825182"
  },
  {
    "text": "Maybe we can look up if, if we do",
    "start": "4826116",
    "end": "4832716"
  },
  {
    "text": "something like, if we do something like",
    "start": "4832716",
    "end": "4839615"
  },
  {
    "text": "SQL with transaction.",
    "start": "4839616",
    "end": "4846049"
  },
  {
    "text": "This runs an entire effect into a transaction.",
    "start": "4847183",
    "end": "4852683"
  },
  {
    "text": "So I think that we don't need any change.",
    "start": "4856233",
    "end": "4860766"
  },
  {
    "text": "Because we could just wrap our produce with SQL dot with transaction.",
    "start": "4863516",
    "end": "4870450"
  },
  {
    "text": "Yeah. Oh, yeah.",
    "start": "4872216",
    "end": "4877666"
  },
  {
    "text": "Yeah, that means that we can just do things like, this is our producer and",
    "start": "4878933",
    "end": "4886316"
  },
  {
    "text": "then do like with transaction and everything that the storage will do inside that will be run",
    "start": "4886316",
    "end": "4893833"
  },
  {
    "text": "into a transaction thing. I think.",
    "start": "4893833",
    "end": "4898166"
  },
  {
    "text": "It only depends on where my SQL",
    "start": "4899183",
    "end": "4904750"
  },
  {
    "text": "clients is resolved. I think.",
    "start": "4904750",
    "end": "4908933"
  },
  {
    "text": "Because we.",
    "start": "4913950",
    "end": "4914916"
  },
  {
    "text": "Yeah, here. Solved here. So that means that we need to create both",
    "start": "4920183",
    "end": "4931016"
  },
  {
    "text": "the storage on inside the producer. Yeah, yeah, that's fine. That's fine. Every",
    "start": "4931016",
    "end": "4937449"
  },
  {
    "text": "time we handle the events, we create the storage again. Yeah, makes sense.",
    "start": "4937450",
    "end": "4941166"
  },
  {
    "text": "Yeah, definitely. Yeah. Okay, so I'm running out of time.",
    "start": "4943399",
    "end": "4948166"
  },
  {
    "text": "But yeah, it was a quick stream. I wanted to do.",
    "start": "4949183",
    "end": "4955683"
  },
  {
    "text": "Just to start dealing with. Effect SQL, which I didn't use before I",
    "start": "4956516",
    "end": "4964666"
  },
  {
    "text": "had just toyed with never using a real world scenario. And this application will",
    "start": "4964666",
    "end": "4970216"
  },
  {
    "text": "be one that will make heavy use of effect SQL. Because all of the",
    "start": "4970216",
    "end": "4977233"
  },
  {
    "text": "persistence will be down there. And I think that with that, I will thank",
    "start": "4977233",
    "end": "4985250"
  },
  {
    "text": "you everyone for listening to this streaming tuning in.",
    "start": "4985250",
    "end": "4990816"
  },
  {
    "text": "And I think that we will see again next time in a week. And next time we will",
    "start": "4990816",
    "end": "4998149"
  },
  {
    "text": "start tackling our actual HTTP APIs that",
    "start": "4998149",
    "end": "5003216"
  },
  {
    "text": "will be used to interact with our data. Now that we have a framework that",
    "start": "5003216",
    "end": "5009149"
  },
  {
    "text": "allows us to basically to build entities and define events and then",
    "start": "5009149",
    "end": "5017166"
  },
  {
    "text": "create the state of the event. The entity is based on the state of.",
    "start": "5017166",
    "end": "5022833"
  },
  {
    "text": "The event journal. So thank you again very much and hope to see you everyone",
    "start": "5023899",
    "end": "5031166"
  },
  {
    "text": "again next time. Bye bye.",
    "start": "5031166",
    "end": "5033549"
  }
]