[
  {
    "start": "0",
    "end": "215000"
  },
  {
    "text": "foreign welcome everybody",
    "start": "240",
    "end": "6500"
  },
  {
    "text": "manzati that Matia has been working sort of in secret for the last",
    "start": "8360",
    "end": "16520"
  },
  {
    "text": "whatever four or five four five six six seven eight nine months on on a little",
    "start": "16520",
    "end": "23640"
  },
  {
    "text": "project that that we had which which is little little yeah",
    "start": "23640",
    "end": "30560"
  },
  {
    "text": "a little Wicked project that took about six months but yeah a little we could",
    "start": "31040",
    "end": "36239"
  },
  {
    "text": "cross it and and that's supposed to become actually the first layer one",
    "start": "36239",
    "end": "41899"
  },
  {
    "text": "infrastructural looking project that we have in the effect organization",
    "start": "41899",
    "end": "47640"
  },
  {
    "text": "now I I'll start by explaining a little bit the the problem statement and and",
    "start": "47640",
    "end": "52980"
  },
  {
    "text": "then I leave I live over to to Matia to dissect all the all the details",
    "start": "52980",
    "end": "60000"
  },
  {
    "text": "the point being is parallelism JavaScript is kind of a weird",
    "start": "60000",
    "end": "66619"
  },
  {
    "text": "kind of inexistent and in general any form of parallelism that",
    "start": "66619",
    "end": "72900"
  },
  {
    "text": "you can get in JavaScript has the same problems that you would find in distributed systems when you have",
    "start": "72900",
    "end": "79380"
  },
  {
    "text": "basically um a cluster of independent processes that can die can come back can",
    "start": "79380",
    "end": "86460"
  },
  {
    "text": "and and you need a way kind of orchestrate those and refer to them uh",
    "start": "86460",
    "end": "92040"
  },
  {
    "text": "by name not by location because they they could be",
    "start": "92040",
    "end": "97820"
  },
  {
    "text": "processes spawned uh everywhere and you need reliability of uh processes you",
    "start": "97820",
    "end": "104640"
  },
  {
    "text": "need reliability of persistence and and so on and so on and so forth generally",
    "start": "104640",
    "end": "110340"
  },
  {
    "text": "speaking in effect We Believe layer one infrastructure projects will be very",
    "start": "110340",
    "end": "115619"
  },
  {
    "text": "important and and this is kind of the foundation for cluster management and and you you see",
    "start": "115619",
    "end": "124200"
  },
  {
    "text": "what Mathias in mind and but but keep in mind this is layer one there is going to",
    "start": "124200",
    "end": "132180"
  },
  {
    "text": "be layer two things built on top of you being uh",
    "start": "132180",
    "end": "137459"
  },
  {
    "text": "of you having the ability of managing smoothly clusters which can be both in",
    "start": "137459",
    "end": "143640"
  },
  {
    "text": "servers or inside browsers and and so on and so forth so please Matia I yeah I shut shut up",
    "start": "143640",
    "end": "152520"
  },
  {
    "text": "from now on I don't use questions from from time to time yeah you're very",
    "start": "152520",
    "end": "158160"
  },
  {
    "text": "welcome to interact and see whatever whatever and so basically as I said the problem",
    "start": "158160",
    "end": "165900"
  },
  {
    "text": "is that in JavaScript there are as there's actually no management of concurrent processes and that means that",
    "start": "165900",
    "end": "175220"
  },
  {
    "text": "one thing I always wanted is to try to maximize and speak about system in",
    "start": "175220",
    "end": "183660"
  },
  {
    "text": "JavaScript without having all the trouble all the problem all the weight",
    "start": "183660",
    "end": "190319"
  },
  {
    "text": "of thinking about uh protocols between systems or ensuring that all those",
    "start": "190319",
    "end": "196560"
  },
  {
    "text": "systems are actually up and running and all those systems are actually running",
    "start": "196560",
    "end": "202560"
  },
  {
    "text": "as they should without interfering with each other so I'll take a little a real",
    "start": "202560",
    "end": "208980"
  },
  {
    "text": "world example and this real world example is actually really connected to what I do at work at work I basically",
    "start": "208980",
    "end": "217140"
  },
  {
    "start": "215000",
    "end": "950000"
  },
  {
    "text": "work with warehouse management systems there is always these things this",
    "start": "217140",
    "end": "222420"
  },
  {
    "text": "example you have may seen or a thousand times and this example is that if you",
    "start": "222420",
    "end": "228360"
  },
  {
    "text": "have two users they are creating orders in your systems and basically you have",
    "start": "228360",
    "end": "234900"
  },
  {
    "text": "system where if there isn't isn't enough stock in your Warehouse you should",
    "start": "234900",
    "end": "241620"
  },
  {
    "text": "either reject the order or do something else in order to handle that",
    "start": "241620",
    "end": "246860"
  },
  {
    "text": "and when you work with monolithic application that is really easy because",
    "start": "246860",
    "end": "253580"
  },
  {
    "text": "usually what you do is wrap everything with the single database transaction and",
    "start": "253580",
    "end": "260459"
  },
  {
    "text": "that's all basically you block everyone until that happens but unfortunately",
    "start": "260459",
    "end": "267780"
  },
  {
    "text": "um with the time passing with systems changing even with interior",
    "start": "267780",
    "end": "273259"
  },
  {
    "text": "interpretation of different systems uh having a single transaction isn't any",
    "start": "273259",
    "end": "279300"
  },
  {
    "text": "more real option and most importantly I would I would have to mention one one",
    "start": "279300",
    "end": "285479"
  },
  {
    "text": "particular fact about transactions uh a transaction is good only within the",
    "start": "285479",
    "end": "293400"
  },
  {
    "text": "boundaries of a single system you may have one database which is asset compliant and transactional but even if",
    "start": "293400",
    "end": "300360"
  },
  {
    "text": "you've got two assists databases acid compliance transactions don't",
    "start": "300360",
    "end": "306960"
  },
  {
    "text": "really compose yeah so you cannot have a transaction that spawns two databases",
    "start": "306960",
    "end": "313680"
  },
  {
    "text": "even if they are winning themselves perfectly compliant with asset rules and",
    "start": "313680",
    "end": "319199"
  },
  {
    "text": "and so on and so forth so really uh I I will have to say that any system ends up",
    "start": "319199",
    "end": "325259"
  },
  {
    "text": "being a distributed system yeah even if you're building a a simple app in kind",
    "start": "325259",
    "end": "331020"
  },
  {
    "text": "of next JS and you have a database and you have same grid to send out emails",
    "start": "331020",
    "end": "336780"
  },
  {
    "text": "for for registration well that's already too independent systems that you can",
    "start": "336780",
    "end": "342539"
  },
  {
    "text": "orchestrate in a transactional manner directly so that's already a distributed",
    "start": "342539",
    "end": "348060"
  },
  {
    "text": "system just yeah yeah I will also say that as long as you have a user and a database you already",
    "start": "348060",
    "end": "355620"
  },
  {
    "text": "have a system which is distributed because also the user is also the user might be binding after in the system of",
    "start": "355620",
    "end": "362639"
  },
  {
    "text": "course yeah yeah exactly so basically importantly the the user's browsers",
    "start": "362639",
    "end": "368400"
  },
  {
    "text": "yeah the user is a system uh so basically there isn't any real world",
    "start": "368400",
    "end": "374639"
  },
  {
    "text": "situation where you have only one system where you can have so many guarantees",
    "start": "374639",
    "end": "380039"
  },
  {
    "text": "about only one system so the reality is that we have to deal with multiple",
    "start": "380039",
    "end": "385199"
  },
  {
    "text": "systems and usually that ends up as I said before uh with two different",
    "start": "385199",
    "end": "391680"
  },
  {
    "text": "strategies to ensure the system data is you know uh not a Corrupted State due to",
    "start": "391680",
    "end": "398699"
  },
  {
    "text": "conspiracy problem and those Solutions usually either involve either having a",
    "start": "398699",
    "end": "406380"
  },
  {
    "text": "global lock which means that somehow you are able to stop the world",
    "start": "406380",
    "end": "413039"
  },
  {
    "text": "yeah exactly stop the world stop the time all I will perform the work just",
    "start": "413039",
    "end": "419639"
  },
  {
    "text": "now and nobody else should work until I tell yeah you can resume you can make",
    "start": "419639",
    "end": "425100"
  },
  {
    "text": "the time go again and as you can find out that is almost",
    "start": "425100",
    "end": "430440"
  },
  {
    "text": "impossible to realize in a real world scenario even with whatever you can",
    "start": "430440",
    "end": "436919"
  },
  {
    "text": "think of log files uh Global transaction logs whatever you can not uh guarantee",
    "start": "436919",
    "end": "444539"
  },
  {
    "text": "that you are able to perform such things of having a global lock",
    "start": "444539",
    "end": "450720"
  },
  {
    "text": "and also this this skill performance because this means that as I said you",
    "start": "450720",
    "end": "457800"
  },
  {
    "text": "have to stop the word and perform your work and finally there is a lock",
    "start": "457800",
    "end": "464099"
  },
  {
    "text": "or you can assure that all the work",
    "start": "464099",
    "end": "469319"
  },
  {
    "text": "related to an entity to something is handled uh by a single process instances",
    "start": "469319",
    "end": "478740"
  },
  {
    "text": "basically you are assuring that uh whatever you receive a request of",
    "start": "478740",
    "end": "484560"
  },
  {
    "text": "writing an order uh what you actually do is instead of processing the distance in",
    "start": "484560",
    "end": "491580"
  },
  {
    "text": "that system you redirect that request to another system and that system is the",
    "start": "491580",
    "end": "497160"
  },
  {
    "text": "only one that will perform the behavior of that order so for example in this",
    "start": "497160",
    "end": "503759"
  },
  {
    "text": "scenario we solve the problem of concurrent orders because basically the",
    "start": "503759",
    "end": "510360"
  },
  {
    "text": "only system that is running our orders is the system number three and whenever",
    "start": "510360",
    "end": "517440"
  },
  {
    "text": "system one or two tries to interact with stock will instead redirect the request",
    "start": "517440",
    "end": "524279"
  },
  {
    "text": "to the system three and that means that we put ourselves in",
    "start": "524279",
    "end": "530040"
  },
  {
    "text": "that real world scenario of only one system",
    "start": "530040",
    "end": "535760"
  },
  {
    "text": "behaving within a single transaction the internet in in a situation where",
    "start": "535760",
    "end": "541080"
  },
  {
    "text": "basically you are in a happy environment where you can do whatever you want with",
    "start": "541080",
    "end": "546480"
  },
  {
    "text": "your entity because you are sure that the entity you're the only one doing it yeah they are the only one doing it your",
    "start": "546480",
    "end": "553620"
  },
  {
    "text": "entity only lives there and nobody nowhere else and basically that is the premise of",
    "start": "553620",
    "end": "561620"
  },
  {
    "text": "what and I I would have to say this approach compared to a global lock",
    "start": "561620",
    "end": "567420"
  },
  {
    "text": "actually scales because yeah you can kind of transparently allocate",
    "start": "567420",
    "end": "574620"
  },
  {
    "text": "different entities in different places and and have sharp Primitives that where",
    "start": "574620",
    "end": "580200"
  },
  {
    "text": "you say out of what 10 servers you have 500 different",
    "start": "580200",
    "end": "586980"
  },
  {
    "text": "entities are located each one doing completely different things or even the same thing for like processing orders",
    "start": "586980",
    "end": "593940"
  },
  {
    "text": "but for two different uh subsystems that don't don't Collide between between each",
    "start": "593940",
    "end": "600120"
  },
  {
    "text": "other for example and and I'm thinking I had the same troubles when I was",
    "start": "600120",
    "end": "606060"
  },
  {
    "text": "developing trading platforms and you've got a lot of instruments and orders are",
    "start": "606060",
    "end": "611459"
  },
  {
    "text": "usually per instrument so you would have your entities defined as the single",
    "start": "611459",
    "end": "616500"
  },
  {
    "text": "instruments and your users would interact with those entities but if you",
    "start": "616500",
    "end": "622140"
  },
  {
    "text": "both traded the same instruments you ended up in the same single single writer that managed that specific that",
    "start": "622140",
    "end": "629700"
  },
  {
    "text": "specific instrument we were doing so in in Scala and in the jvm so it's kind of",
    "start": "629700",
    "end": "636360"
  },
  {
    "text": "curious now the the ability of doing it across systems in",
    "start": "636360",
    "end": "641399"
  },
  {
    "text": "typescript with effect is is just amazing yeah and that is also really awesome",
    "start": "641399",
    "end": "649260"
  },
  {
    "text": "because as I can see here I bought systems so since we are running",
    "start": "649260",
    "end": "656399"
  },
  {
    "text": "typescript and effect so basically JavaScript uh that thing that you said",
    "start": "656399",
    "end": "662519"
  },
  {
    "text": "about running Scala in the back end is not so true here because",
    "start": "662519",
    "end": "668300"
  },
  {
    "text": "nobody says that these systems cannot be the browser and this system 3 can be a",
    "start": "668300",
    "end": "674700"
  },
  {
    "text": "background worker so basically you can have your user interface interacting or multiple tabs of the same browser",
    "start": "674700",
    "end": "681480"
  },
  {
    "text": "interacting with a single worker behind the scene doing actually all the State",
    "start": "681480",
    "end": "688200"
  },
  {
    "text": "Management all the rights all the API interaction so as you can see",
    "start": "688200",
    "end": "693980"
  },
  {
    "text": "running with distributed systems is actually a problem everywhere again front end API interaction whatever",
    "start": "693980",
    "end": "700920"
  },
  {
    "text": "especially if you get to more kind of edge architectures like you want your app to work offline well if you want",
    "start": "700920",
    "end": "708899"
  },
  {
    "text": "your app to work offline you're better off thinking in a local first manner",
    "start": "708899",
    "end": "714140"
  },
  {
    "text": "which in simple words end up end up meaning running a database locally",
    "start": "714140",
    "end": "721040"
  },
  {
    "text": "which is exactly one of those systems that that could propagate State manage",
    "start": "721040",
    "end": "727440"
  },
  {
    "text": "state and and so on and so forth I I I can kind of think about a friend a",
    "start": "727440",
    "end": "733500"
  },
  {
    "text": "common friend we have he's also an effect power user that that would enjoy",
    "start": "733500",
    "end": "738660"
  },
  {
    "text": "using this system a lot yeah of course calling Johannes sheikling which is",
    "start": "738660",
    "end": "744839"
  },
  {
    "text": "being Overton as a local first app and and using actually a lot of workers",
    "start": "744839",
    "end": "752279"
  },
  {
    "text": "to offshift intensive tasks and and stuff like that kind of a year ago I was",
    "start": "752279",
    "end": "758459"
  },
  {
    "text": "telling him buddy you are actually developing a distributed system inside your browser like yeah that's that's the",
    "start": "758459",
    "end": "767100"
  },
  {
    "text": "first number of Silence seeing it but but if you want your app to work beautifully and fast that's actually a",
    "start": "767100",
    "end": "773700"
  },
  {
    "text": "smart way it's actually a very smart way yeah and that's so smart also because you who",
    "start": "773700",
    "end": "781339"
  },
  {
    "text": "relieve so much the user interface thread so basically you perform all the",
    "start": "781339",
    "end": "787320"
  },
  {
    "text": "heavy work in the back end and the user interface is just interacting with those",
    "start": "787320",
    "end": "793500"
  },
  {
    "text": "external systems so either those systems are running on a remote server or",
    "start": "793500",
    "end": "798540"
  },
  {
    "text": "running in a worker does not really matter right you're just",
    "start": "798540",
    "end": "804000"
  },
  {
    "text": "interacting with systems yeah you may have a little like it's up to serialization because of course if",
    "start": "804000",
    "end": "810120"
  },
  {
    "text": "you're if you're running in a in a worker's environment then you might be able to share for example buy buffers",
    "start": "810120",
    "end": "817320"
  },
  {
    "text": "or or other stuff and if you're not in that environment you may not yeah but as",
    "start": "817320",
    "end": "823320"
  },
  {
    "text": "we win later on it's all pluggable so yeah exactly",
    "start": "823320",
    "end": "828560"
  },
  {
    "text": "and so basically this is what we are trying to solve with shark kick and this",
    "start": "828560",
    "end": "836100"
  },
  {
    "text": "is inspired by our original Scala library from the video Community by the",
    "start": "836100",
    "end": "842399"
  },
  {
    "text": "sisters but we plan to integrate more behaviors more things inside of what RK",
    "start": "842399",
    "end": "850139"
  },
  {
    "text": "does but what we already accomplished is uh that single writer uh approach",
    "start": "850139",
    "end": "857279"
  },
  {
    "text": "basically with shark cake you can ensure that its entity is running only one time",
    "start": "857279",
    "end": "862620"
  },
  {
    "text": "in one place as we said before and the other nice thing is that you can",
    "start": "862620",
    "end": "868740"
  },
  {
    "text": "communicate with entities with just knowing their ID so as I said before knowing if that API is running on one",
    "start": "868740",
    "end": "877740"
  },
  {
    "text": "server or another or in a web worker actually doesn't matter as long as you know the ID of the entity you want to",
    "start": "877740",
    "end": "885600"
  },
  {
    "text": "interact to uh that's enough you can create a communication with that entity",
    "start": "885600",
    "end": "891720"
  },
  {
    "text": "as long obviously there is network connection between those entities trying",
    "start": "891720",
    "end": "897180"
  },
  {
    "text": "to provide it that they communicate but well that's we have still not solved",
    "start": "897180",
    "end": "904199"
  },
  {
    "text": "physical boundaries yeah exactly we are trying to but well that's a harder",
    "start": "904199",
    "end": "910980"
  },
  {
    "text": "problem that we can tackle and [Music] um",
    "start": "910980",
    "end": "916040"
  },
  {
    "text": "these two basic things actually end up solving a lot of problems",
    "start": "916040",
    "end": "922279"
  },
  {
    "text": "and these are kind of two fundamental Primitives yeah exactly and basically",
    "start": "922279",
    "end": "928320"
  },
  {
    "text": "one you can once you can ensure that a person can be only in one place at a",
    "start": "928320",
    "end": "934560"
  },
  {
    "text": "time so basically that the single writer and you know the idea of that person so",
    "start": "934560",
    "end": "941279"
  },
  {
    "text": "you can interact with that person by just knowing that ID you have enough",
    "start": "941279",
    "end": "946440"
  },
  {
    "text": "because with that you can build whatever Behavior you want and before going to having a dive with",
    "start": "946440",
    "end": "955620"
  },
  {
    "start": "950000",
    "end": "1400000"
  },
  {
    "text": "what we accomplished having a simple example and I want just you uh to put",
    "start": "955620",
    "end": "961620"
  },
  {
    "text": "some keywords because uh when I approach this word I had some trouble fully",
    "start": "961620",
    "end": "966779"
  },
  {
    "text": "understand these keywords so entity when I say entity basically I say",
    "start": "966779",
    "end": "974480"
  },
  {
    "text": "a behavior so we have the user entity which is the behavior of how a user",
    "start": "974480",
    "end": "981959"
  },
  {
    "text": "accepts messages and perform its works and maybe replies to other entities or",
    "start": "981959",
    "end": "989399"
  },
  {
    "text": "how to do entity which basically hands have what to do Behavior so basically with the entity is the behavior defines",
    "start": "989399",
    "end": "995579"
  },
  {
    "text": "how an entity behaves in the system and and fundamentally you can have instances",
    "start": "995579",
    "end": "1002180"
  },
  {
    "text": "of entities exactly exactly individual invocations that behave according to the",
    "start": "1002180",
    "end": "1008540"
  },
  {
    "text": "specific behavior if you kind of want a mental model that's that's a class versus the object created exactly",
    "start": "1008540",
    "end": "1015759"
  },
  {
    "text": "exactly probably the most similar concept yeah we can find other at a",
    "start": "1015759",
    "end": "1022220"
  },
  {
    "text": "higher level because again this is not a local class it's kind of a distributed and automatically allocated Plus",
    "start": "1022220",
    "end": "1030260"
  },
  {
    "text": "yeah and also there is this pod concept and",
    "start": "1030260",
    "end": "1036260"
  },
  {
    "text": "basically um waterpod is is Apple is",
    "start": "1036260",
    "end": "1041660"
  },
  {
    "text": "you can see a process but basically a pod is something hosting",
    "start": "1041660",
    "end": "1046819"
  },
  {
    "text": "the the instances of those entities will be we defined before so basically uh in",
    "start": "1046819",
    "end": "1055100"
  },
  {
    "text": "analogy is the server is the process running the behavior and we have this concept of Shard and",
    "start": "1055100",
    "end": "1064460"
  },
  {
    "text": "basically The Shard is a grouping of instances of entities so basically we",
    "start": "1064460",
    "end": "1071240"
  },
  {
    "text": "can have a entity be a part of a chart and The Shard may be run inside of a pod",
    "start": "1071240",
    "end": "1081220"
  },
  {
    "text": "exactly strict sense not directly instances but charts that each Shard",
    "start": "1084919",
    "end": "1091160"
  },
  {
    "text": "hosts a number of uh instances of entities exactly exactly and that",
    "start": "1091160",
    "end": "1097700"
  },
  {
    "text": "relation is called assignments so basically the correlation between the Pod and The Shard and knowing in which",
    "start": "1097700",
    "end": "1106700"
  },
  {
    "text": "part is running a particular Shard so a particular group of entities uh is",
    "start": "1106700",
    "end": "1112160"
  },
  {
    "text": "called the assignments and those assignments uh are decided by",
    "start": "1112160",
    "end": "1117980"
  },
  {
    "text": "a shot manager and the shared manager has basically um the job of supervising the pods and",
    "start": "1117980",
    "end": "1125419"
  },
  {
    "text": "ensuring the ports are alive and if some parts is not alive it performs again the",
    "start": "1125419",
    "end": "1132260"
  },
  {
    "text": "work of assignments so it will decide which group of entities uh should run",
    "start": "1132260",
    "end": "1138020"
  },
  {
    "text": "where in which spot and basically rebalances the systems as the system uh",
    "start": "1138020",
    "end": "1144679"
  },
  {
    "text": "topology changes you can think about that I think that this is the simplest",
    "start": "1144679",
    "end": "1150919"
  },
  {
    "text": "way I can Define that the work that the sharp manager does and most importantly",
    "start": "1150919",
    "end": "1156140"
  },
  {
    "text": "again this is a single instance but yeah it has to manage the assignments between",
    "start": "1156140",
    "end": "1161179"
  },
  {
    "text": "pods and shards not between entities themselves so it",
    "start": "1161179",
    "end": "1167419"
  },
  {
    "text": "means even without the coordinator running as long as there are no fundamental",
    "start": "1167419",
    "end": "1174620"
  },
  {
    "text": "changes in the topology yeah like you can't add new nodes",
    "start": "1174620",
    "end": "1180260"
  },
  {
    "text": "and you cannot rebalance nodes if one is down but but as long as anything stays the",
    "start": "1180260",
    "end": "1188840"
  },
  {
    "text": "same the system is operational and if not it's only partially not operational",
    "start": "1188840",
    "end": "1194419"
  },
  {
    "text": "because like you may have a note down and some entities are not running but",
    "start": "1194419",
    "end": "1200120"
  },
  {
    "text": "the other 95 percent of entities will be running yeah just fine",
    "start": "1200120",
    "end": "1205160"
  },
  {
    "text": "so that's similar to a design that that we now know in vpns I'm very passionate",
    "start": "1205160",
    "end": "1212000"
  },
  {
    "text": "about tailscale which is kind of based on wireguard but it's a VPN where",
    "start": "1212000",
    "end": "1218780"
  },
  {
    "text": "if the coordinator is down you communicate peer-to-peer between nodes so it's like yeah it doesn't really make",
    "start": "1218780",
    "end": "1224960"
  },
  {
    "text": "sense to distribute the the coordinator further because it's actually a perfect job for a single",
    "start": "1224960",
    "end": "1232299"
  },
  {
    "text": "by Paradox it's another usage of the single writer principle the shark",
    "start": "1232299",
    "end": "1238400"
  },
  {
    "text": "manager itself it's should be instantiated in one place yeah",
    "start": "1238400",
    "end": "1243559"
  },
  {
    "text": "and one place one only and and also um what's really great is that uh having",
    "start": "1243559",
    "end": "1250700"
  },
  {
    "text": "a single shot matter also prevents problems and like you know",
    "start": "1250700",
    "end": "1257059"
  },
  {
    "text": "um if if you had multiple shot matter you have Collision about the assignments",
    "start": "1257059",
    "end": "1263299"
  },
  {
    "text": "entities that should I run on that pod as shed manager one said or on the other",
    "start": "1263299",
    "end": "1269539"
  },
  {
    "text": "live share manager to set and you know there are I have problems related to",
    "start": "1269539",
    "end": "1275240"
  },
  {
    "text": "that and the shared manager is also so dumb in the implementation that it takes",
    "start": "1275240",
    "end": "1282700"
  },
  {
    "text": "milliseconds to start and so as you said even if it fails uh you know the system",
    "start": "1282700",
    "end": "1289940"
  },
  {
    "text": "will continue to be have and you will have uh it will take so small time to go",
    "start": "1289940",
    "end": "1298640"
  },
  {
    "text": "up again that you may even don't feel that the shot manager full and mostly",
    "start": "1298640",
    "end": "1304700"
  },
  {
    "text": "because it's another plugable part of the system so nobody actually forbids to in the future like develop one chart",
    "start": "1304700",
    "end": "1312799"
  },
  {
    "text": "manager on top of ptcd and have a small cluster if if one wishes to deploy",
    "start": "1312799",
    "end": "1319940"
  },
  {
    "text": "something like etcd or zookeeper or other yeah sort of databases that are",
    "start": "1319940",
    "end": "1326299"
  },
  {
    "text": "made to orchestrate one like I I can't think of Kafka initially",
    "start": "1326299",
    "end": "1332000"
  },
  {
    "text": "they had yeah it's similar in in in some sense and initially they had a zookeeper",
    "start": "1332000",
    "end": "1338720"
  },
  {
    "text": "now they're doing internal paxos but still you've got one system that is",
    "start": "1338720",
    "end": "1344299"
  },
  {
    "text": "dedicated to allocating charts the reliability and consistency of that",
    "start": "1344299",
    "end": "1351260"
  },
  {
    "text": "system again that that cannot be high throughput that's that's the limitation on on the",
    "start": "1351260",
    "end": "1359179"
  },
  {
    "text": "single thing but if if you don't need high throughput and with a system like that you literally don't you can you can",
    "start": "1359179",
    "end": "1366679"
  },
  {
    "text": "manage The Shard manager very very well in probably 100 different ways in the future",
    "start": "1366679",
    "end": "1371960"
  },
  {
    "text": "yeah also because thinking about it in this in this context you really will not",
    "start": "1371960",
    "end": "1379159"
  },
  {
    "text": "have so many servers or pods going up and down continuously so yeah that's the",
    "start": "1379159",
    "end": "1385159"
  },
  {
    "text": "point the complexity of The Shard manager is POD versus shards not pod",
    "start": "1385159",
    "end": "1391159"
  },
  {
    "text": "versus entities entities yeah yeah and",
    "start": "1391159",
    "end": "1397220"
  },
  {
    "text": "basically how it works well as we said before we have the sharing manager which",
    "start": "1397220",
    "end": "1402500"
  },
  {
    "start": "1400000",
    "end": "1756000"
  },
  {
    "text": "basically is the singular entity that a single process that is running and The",
    "start": "1402500",
    "end": "1408500"
  },
  {
    "text": "Shard manager uh to the Pod CPI uh will basically assign and assign to each spot",
    "start": "1408500",
    "end": "1416360"
  },
  {
    "text": "or application server uh the assignment of which Sharda should be run and both",
    "start": "1416360",
    "end": "1423620"
  },
  {
    "text": "the Charmander and the values application server pods will have their",
    "start": "1423620",
    "end": "1429200"
  },
  {
    "text": "own storage so basically each spot has a local cache of the assignments of the",
    "start": "1429200",
    "end": "1435679"
  },
  {
    "text": "entire network and so in the of course in the case that the sharp manager goes",
    "start": "1435679",
    "end": "1442400"
  },
  {
    "text": "down the local cache will be fine enough to continue it to the work and interact",
    "start": "1442400",
    "end": "1448220"
  },
  {
    "text": "with all the other ports and the entities in the system and there's also an optional pop Health",
    "start": "1448220",
    "end": "1456620"
  },
  {
    "text": "API that as you mentioned before if you have systems where you know for example",
    "start": "1456620",
    "end": "1462679"
  },
  {
    "text": "your channel manager is running on top of kubernetes or whatever other instances where you can programmatically",
    "start": "1462679",
    "end": "1469760"
  },
  {
    "text": "know uh the status of uh a particular pod a particular server if",
    "start": "1469760",
    "end": "1476299"
  },
  {
    "text": "it has too much work uh if if CPU is almost bound the situation like that you",
    "start": "1476299",
    "end": "1482600"
  },
  {
    "text": "can provide an API that basically will tell the shared manager consider that server as it is almost",
    "start": "1482600",
    "end": "1490520"
  },
  {
    "text": "dead so do not even try to assign new uh pod new shards and eventually brain some",
    "start": "1490520",
    "end": "1498320"
  },
  {
    "text": "drain some parts out of that pod yeah exactly it try to get some relief to the",
    "start": "1498320",
    "end": "1504860"
  },
  {
    "text": "Pod so basically all the system tries to stay balanced even in the work",
    "start": "1504860",
    "end": "1511120"
  },
  {
    "text": "and these shapes that are different color are actually different Services",
    "start": "1511120",
    "end": "1516940"
  },
  {
    "text": "inside of our code thanks to effect in",
    "start": "1516940",
    "end": "1522080"
  },
  {
    "text": "its plugability uh the serialization is completely pluggable so for example now",
    "start": "1522080",
    "end": "1527299"
  },
  {
    "text": "we relieve on physical Json serialization thanks to effect schema",
    "start": "1527299",
    "end": "1533840"
  },
  {
    "text": "but nobody forbids that some days someone implements something based on",
    "start": "1533840",
    "end": "1538940"
  },
  {
    "text": "zrpc for example and for example also Storage storage up to now I implemented",
    "start": "1538940",
    "end": "1547100"
  },
  {
    "text": "three different storages just to make try the system and ensure that it",
    "start": "1547100",
    "end": "1552679"
  },
  {
    "text": "actually works and those systems are in memory or for example a file based",
    "start": "1552679",
    "end": "1557900"
  },
  {
    "text": "system where I use files as storage if you have only one server for example and",
    "start": "1557900",
    "end": "1563419"
  },
  {
    "text": "different processes that's enough and also on a circulite implementation that",
    "start": "1563419",
    "end": "1569900"
  },
  {
    "text": "I'm trying to evolve into area World database implementation for storage but",
    "start": "1569900",
    "end": "1576559"
  },
  {
    "text": "real world application will have something like redis for example",
    "start": "1576559",
    "end": "1582220"
  },
  {
    "text": "yeah yeah whatever as long as you can store",
    "start": "1583539",
    "end": "1589900"
  },
  {
    "text": "Blobs of stuff indexed by yeah yeah",
    "start": "1589900",
    "end": "1595000"
  },
  {
    "text": "and basically the requirement is that you can store and you can also get",
    "start": "1595000",
    "end": "1601100"
  },
  {
    "text": "update from the database because um this part of this database yeah",
    "start": "1601100",
    "end": "1607279"
  },
  {
    "text": "exactly exactly because um in the eventual case that The Shard",
    "start": "1607279",
    "end": "1612980"
  },
  {
    "text": "manager or the application server are not uh for some network issues are not",
    "start": "1612980",
    "end": "1618380"
  },
  {
    "text": "able to directly communicate but the storage can what will happen is that as",
    "start": "1618380",
    "end": "1624320"
  },
  {
    "text": "a fullback the shared manager will directly write the assignment in the database and every pod will watch that",
    "start": "1624320",
    "end": "1631880"
  },
  {
    "text": "assignment changes it actually pull directly from the storage that is a second failed fallback that",
    "start": "1631880",
    "end": "1638960"
  },
  {
    "text": "the system does just in case for some network issues uh and their their",
    "start": "1638960",
    "end": "1644659"
  },
  {
    "text": "communication doesn't work how does the assignment work and yes to be able to de-assign you've",
    "start": "1644659",
    "end": "1652640"
  },
  {
    "text": "got to have a confirmation that either no longer exists or",
    "start": "1652640",
    "end": "1658880"
  },
  {
    "text": "that be actual shark basically allocated before you assign it again",
    "start": "1658880",
    "end": "1664159"
  },
  {
    "text": "yeah basically it it wants the assign uh what it will do it will update its",
    "start": "1664159",
    "end": "1669440"
  },
  {
    "text": "internal cache and its internal cash is what the system uh will try to use when",
    "start": "1669440",
    "end": "1676520"
  },
  {
    "text": "try to interact uh with another pod so basically what will happen is that",
    "start": "1676520",
    "end": "1682880"
  },
  {
    "text": "um if for an example the shutter manager goes down okay but you get an update from the storage okay you get to",
    "start": "1682880",
    "end": "1690500"
  },
  {
    "text": "remember that the only writer into the storage is the sharp manager so you can",
    "start": "1690500",
    "end": "1695600"
  },
  {
    "text": "ensure that the assignment that got written into the storage are correct and",
    "start": "1695600",
    "end": "1700940"
  },
  {
    "text": "if they are root in the storage uh they are written the storage because the sharp manager actually ensured that the",
    "start": "1700940",
    "end": "1707779"
  },
  {
    "text": "chart is completely full when assigned from the Pod okay but the short manager",
    "start": "1707779",
    "end": "1714080"
  },
  {
    "text": "checks that the the yeah yeah which has been the assigned yeah exactly will will",
    "start": "1714080",
    "end": "1721760"
  },
  {
    "text": "perform that only if the shot the shot is completely unassigned",
    "start": "1721760",
    "end": "1728020"
  },
  {
    "text": "so that means that there is actually no Shard assigned to that bot okay",
    "start": "1730120",
    "end": "1736779"
  },
  {
    "text": "okay so I think that now we can have a dive into the code maybe yep okay so",
    "start": "1736779",
    "end": "1745760"
  },
  {
    "text": "I'll just just a second I'll switch into",
    "start": "1745760",
    "end": "1751720"
  },
  {
    "text": "okay okay so just a second for it to warm up",
    "start": "1753020",
    "end": "1758779"
  },
  {
    "start": "1756000",
    "end": "3010000"
  },
  {
    "text": "okay okay so I think that we can start by",
    "start": "1758779",
    "end": "1764960"
  },
  {
    "text": "having a look in a simple example of how the library can be used",
    "start": "1764960",
    "end": "1771159"
  },
  {
    "text": "and we start by saying that basically as we said before the fifth thing we have",
    "start": "1771159",
    "end": "1777320"
  },
  {
    "text": "to do is Define entities find behaviors and in order to define a behavior the",
    "start": "1777320",
    "end": "1784580"
  },
  {
    "text": "first thing you have to do is actually Define a protocol for that behavior so",
    "start": "1784580",
    "end": "1789980"
  },
  {
    "text": "basically the list of incoming methods that the the behavior will handle and",
    "start": "1789980",
    "end": "1796760"
  },
  {
    "text": "eventually the list of responses that that you have your candidate",
    "start": "1796760",
    "end": "1802520"
  },
  {
    "text": "so here for example we have a counter behavior and this counter as you can see",
    "start": "1802520",
    "end": "1809000"
  },
  {
    "text": "is powered by FX schema so we Define the protocol using effect schema and",
    "start": "1809000",
    "end": "1814779"
  },
  {
    "text": "what we will do basically is create an Union of all the possible incoming",
    "start": "1814779",
    "end": "1820279"
  },
  {
    "text": "messages so as you can see can you show me a little for a second",
    "start": "1820279",
    "end": "1826840"
  },
  {
    "text": "close this window for a moment yeah when you do message dot schema what are",
    "start": "1826840",
    "end": "1833299"
  },
  {
    "text": "you getting back okay so um because I see two two things called",
    "start": "1833299",
    "end": "1839240"
  },
  {
    "text": "get current yeah exactly I get uh two things back one is the schema",
    "start": "1839240",
    "end": "1846620"
  },
  {
    "text": "that gets injected a replier so basically where their reply will be",
    "start": "1846620",
    "end": "1852260"
  },
  {
    "text": "stored okay and where the function call for posting the PRI to back to the",
    "start": "1852260",
    "end": "1858799"
  },
  {
    "text": "sender uh and the second is just a utility it's basically a construction",
    "start": "1858799",
    "end": "1863960"
  },
  {
    "text": "function that given all the data is required by the messages except the",
    "start": "1863960",
    "end": "1871460"
  },
  {
    "text": "replier and given the reply ID that needs to be constructed Inside by",
    "start": "1871460",
    "end": "1876500"
  },
  {
    "text": "sharkic will create the complete message that will run over the wire it might be",
    "start": "1876500",
    "end": "1883100"
  },
  {
    "text": "worth to you to have a subtype of schema called like message",
    "start": "1883100",
    "end": "1889360"
  },
  {
    "text": "or both both of the things in the same in the same object structure so it get",
    "start": "1889360",
    "end": "1896240"
  },
  {
    "text": "current and get current dot yeah uh it may be worth uh the challenge",
    "start": "1896240",
    "end": "1903260"
  },
  {
    "text": "is that um this reply ID actually gets injected",
    "start": "1903260",
    "end": "1909399"
  },
  {
    "text": "only when you actually send the message so uh the challenge here is that you can",
    "start": "1909399",
    "end": "1917539"
  },
  {
    "text": "affect on basically saying have this get current as a function of the schema just",
    "start": "1917539",
    "end": "1923360"
  },
  {
    "text": "there yeah yeah yeah that maybe yeah that maybe a good idea would think that so you have a",
    "start": "1923360",
    "end": "1930799"
  },
  {
    "text": "single object instead of the bubble yeah you have to spread yeah exactly exactly",
    "start": "1930799",
    "end": "1936860"
  },
  {
    "text": "exactly yeah precisely yeah you can both both",
    "start": "1936860",
    "end": "1942559"
  },
  {
    "text": "join together yeah that could be something uh um basically have schema with a",
    "start": "1942559",
    "end": "1949940"
  },
  {
    "text": "Constructor yeah yeah exactly and here we Define the messages these",
    "start": "1949940",
    "end": "1957440"
  },
  {
    "text": "are messages that are sent only basically you send those messages and",
    "start": "1957440",
    "end": "1962720"
  },
  {
    "text": "you don't have any kind of reply and here instead those you pointed out are",
    "start": "1962720",
    "end": "1968779"
  },
  {
    "text": "two different kind of messages one is a message a message schema and a message",
    "start": "1968779",
    "end": "1974240"
  },
  {
    "text": "schema basically only has a single reply when you uh given the get current",
    "start": "1974240",
    "end": "1981020"
  },
  {
    "text": "account request I can only reply with a number and this is instead another kind",
    "start": "1981020",
    "end": "1986960"
  },
  {
    "text": "of message is a stream message and this instead of having a",
    "start": "1986960",
    "end": "1992559"
  },
  {
    "text": "replyer has a stream replier so basically what happens is that when",
    "start": "1992559",
    "end": "1998000"
  },
  {
    "text": "cooling when sending the message to The Entity you will get back a stream and",
    "start": "1998000",
    "end": "2003880"
  },
  {
    "text": "basically in that stream The Entity under a remote on the remote pod will",
    "start": "2003880",
    "end": "2009460"
  },
  {
    "text": "push values and you can consume values on the cooler side so basically you have",
    "start": "2009460",
    "end": "2015399"
  },
  {
    "text": "things like subscription in this case or whatever you want basically on streams",
    "start": "2015399",
    "end": "2020919"
  },
  {
    "text": "and that's actually really neat because I the at this part this specific part of",
    "start": "2020919",
    "end": "2027220"
  },
  {
    "text": "streaming responses uh is one that I really love a lot and I think is missing",
    "start": "2027220",
    "end": "2033220"
  },
  {
    "text": "in a lot of systems and again those Solutions can be for example HTTP push",
    "start": "2033220",
    "end": "2038919"
  },
  {
    "text": "events websockets yeah whatever whatever basically right now is handles any",
    "start": "2038919",
    "end": "2046120"
  },
  {
    "text": "effect Stream So basically by that by having if extreme you can",
    "start": "2046120",
    "end": "2052599"
  },
  {
    "text": "then model whatever you want like you said for example you can consume that stream and publish that into a websocket",
    "start": "2052599",
    "end": "2059560"
  },
  {
    "text": "or like the actual Implement real world implementation does uh it use",
    "start": "2059560",
    "end": "2065679"
  },
  {
    "text": "server-side sent event in order to uh once you post the the message to the",
    "start": "2065679",
    "end": "2072460"
  },
  {
    "text": "remote pod you get back basically a streaming response of whatever comes",
    "start": "2072460",
    "end": "2078398"
  },
  {
    "text": "back and and with this basically you define the",
    "start": "2078399",
    "end": "2083618"
  },
  {
    "text": "protocol you define the entity the behavior and as you can see we have make entity",
    "start": "2083619",
    "end": "2090280"
  },
  {
    "text": "type and why we say entity type because actually we also have other types of",
    "start": "2090280",
    "end": "2097420"
  },
  {
    "text": "entity we have also a topic type and a topic type is kind of a topic where",
    "start": "2097420",
    "end": "2105520"
  },
  {
    "text": "multiple entities multiple subscribers can subscribe to and push through and",
    "start": "2105520",
    "end": "2112240"
  },
  {
    "text": "basically you then broadcast",
    "start": "2112240",
    "end": "2115560"
  },
  {
    "text": "basically we have the concept of an entity running only on a single pod Etc",
    "start": "2117900",
    "end": "2124060"
  },
  {
    "text": "and here we define basically the entire protocol of our entity",
    "start": "2124060",
    "end": "2130780"
  },
  {
    "text": "then we start actually registering The Entity Behavior",
    "start": "2130780",
    "end": "2136420"
  },
  {
    "text": "because now given that counter entity that we defined before",
    "start": "2136420",
    "end": "2142599"
  },
  {
    "text": "and we have only the protocol of the entity we actually implement the behavior of the and the entity and the",
    "start": "2142599",
    "end": "2151599"
  },
  {
    "text": "behavior is actually defined by a really simple signature uh basically this",
    "start": "2151599",
    "end": "2158020"
  },
  {
    "text": "significant of the behavior is that given the entity ID because as we said",
    "start": "2158020",
    "end": "2163960"
  },
  {
    "text": "before for a behavior we may have multiple instances so basically this is the",
    "start": "2163960",
    "end": "2169839"
  },
  {
    "text": "instance ID and we will get a DQ and that the queue",
    "start": "2169839",
    "end": "2175480"
  },
  {
    "text": "basically we will pull for all the methods that will be put there by other",
    "start": "2175480",
    "end": "2182320"
  },
  {
    "text": "entities or whatever is trying to interact with our system and one thing that I want to",
    "start": "2182320",
    "end": "2190900"
  },
  {
    "text": "um also to note is that in that the queue we also get this poison pill and",
    "start": "2190900",
    "end": "2196359"
  },
  {
    "text": "basically this poison pill is put by the",
    "start": "2196359",
    "end": "2201460"
  },
  {
    "text": "system when he tries to shut down an entity because you can specify when when",
    "start": "2201460",
    "end": "2207460"
  },
  {
    "text": "you register an entity Behavior also things like uh ha if this entity doesn't",
    "start": "2207460",
    "end": "2214240"
  },
  {
    "text": "receive any message for five minutes you can assure that this entity can be shut",
    "start": "2214240",
    "end": "2221380"
  },
  {
    "text": "down in order to avoid consume too much memory or things like that or you can",
    "start": "2221380",
    "end": "2226599"
  },
  {
    "text": "force shutdown of an entity and that message is put here instead of using",
    "start": "2226599",
    "end": "2233320"
  },
  {
    "text": "regular effect termination or interrupt so that we can actually perform a fully",
    "start": "2233320",
    "end": "2240160"
  },
  {
    "text": "clean uh Interruption of the behavior so basically we can also ensure that you",
    "start": "2240160",
    "end": "2246160"
  },
  {
    "text": "can have Behavior such as end up consuming all the methods that",
    "start": "2246160",
    "end": "2251320"
  },
  {
    "text": "are in the queue and then shut down so ensuring that you actually reply to",
    "start": "2251320",
    "end": "2256800"
  },
  {
    "text": "askers that ask before you shutting down and things like that and this is really",
    "start": "2256800",
    "end": "2263079"
  },
  {
    "text": "great because this is very pluggable so having the behavior of the finance this allows you to actually Define the",
    "start": "2263079",
    "end": "2271480"
  },
  {
    "text": "combinator that consume this DQ and perform the behavior whatever you want",
    "start": "2271480",
    "end": "2277359"
  },
  {
    "text": "so the most most of the times what you will do is basically try to take from",
    "start": "2277359",
    "end": "2283960"
  },
  {
    "text": "that the queue and here we have a simple combinator that basically what does",
    "start": "2283960",
    "end": "2289180"
  },
  {
    "text": "behind the scene is that Q dot Peak it will take from Little queue",
    "start": "2289180",
    "end": "2295839"
  },
  {
    "text": "foreign",
    "start": "2295839",
    "end": "2298500"
  },
  {
    "text": "peel what will happen is that it will interrupt the effect so if we shut down",
    "start": "2301140",
    "end": "2306400"
  },
  {
    "text": "and then we have the methods and then we handle the message for example when we get an increment we upgrade",
    "start": "2306400",
    "end": "2313960"
  },
  {
    "text": "um we increment our counter we decrement when we get current what happens uh in",
    "start": "2313960",
    "end": "2321339"
  },
  {
    "text": "order to reply to the message we have that replier that we said we have seen before and inside that reply here we",
    "start": "2321339",
    "end": "2328359"
  },
  {
    "text": "have the reply method and basically with the prime methods we get back an effect well where we will send back the",
    "start": "2328359",
    "end": "2335920"
  },
  {
    "text": "response to our client to our requester and same goes for uh replying with a",
    "start": "2335920",
    "end": "2343119"
  },
  {
    "text": "string a stream so basically we have a reply and then for example here I reply",
    "start": "2343119",
    "end": "2348760"
  },
  {
    "text": "with the stream changes of my subscription left of the changes",
    "start": "2348760",
    "end": "2355200"
  },
  {
    "text": "and basically this is how simple you can behave we Define your behavior",
    "start": "2355200",
    "end": "2362440"
  },
  {
    "text": "and then uh you define your behavior but how can I interact with a behavior well",
    "start": "2362440",
    "end": "2370720"
  },
  {
    "text": "in order to interact a behavior first thing you need to set up the connection to the sharding basically",
    "start": "2370720",
    "end": "2377820"
  },
  {
    "text": "the connection to the shopping system that we as we have said before uh this",
    "start": "2377820",
    "end": "2383320"
  },
  {
    "text": "system is completely pluggable so all those Liars we discussed before can be interchanged with different",
    "start": "2383320",
    "end": "2389859"
  },
  {
    "text": "configuration no different Behavior or different implementation and then one simple example here that is",
    "start": "2389859",
    "end": "2398140"
  },
  {
    "text": "still written with those syntax but for example here we first create a messenger",
    "start": "2398140",
    "end": "2403359"
  },
  {
    "text": "so basically we get a messenger that is able to interact with a counter entity",
    "start": "2403359",
    "end": "2408460"
  },
  {
    "text": "and then when we have our messenger we send uh for example a message also send",
    "start": "2408460",
    "end": "2415119"
  },
  {
    "text": "stream we send And subscribe to the reply stream of changes so yeah here's",
    "start": "2415119",
    "end": "2421599"
  },
  {
    "text": "the price of changes or the most simple use case is that we send the message and we don't",
    "start": "2421599",
    "end": "2428980"
  },
  {
    "text": "care about reply so we send this card and we need to specify obviously the",
    "start": "2428980",
    "end": "2434560"
  },
  {
    "text": "instance we want to interact with and the message we want to send or sometimes we want to get back the",
    "start": "2434560",
    "end": "2443200"
  },
  {
    "text": "actual result of the replier so what we do is basically a messenger.send Again",
    "start": "2443200",
    "end": "2449220"
  },
  {
    "text": "The Entity ID we want to interact with and the methods we want and here you can",
    "start": "2449220",
    "end": "2454720"
  },
  {
    "text": "see that the L that helper gets nice because you get everything already typed",
    "start": "2454720",
    "end": "2460900"
  },
  {
    "text": "out as you want and finally you get back obviously our number",
    "start": "2460900",
    "end": "2466680"
  },
  {
    "text": "and well and for example here we could also compact probably we send API given",
    "start": "2466680",
    "end": "2475720"
  },
  {
    "text": "that in the message we already know if there is a reply or if there is no replyer yeah actually you know if it's a",
    "start": "2475720",
    "end": "2482260"
  },
  {
    "text": "stream or not and yeah and you could just have a send function that returns",
    "start": "2482260",
    "end": "2487900"
  },
  {
    "text": "either a stream or an effect or so on and so forth yeah whatever that's very",
    "start": "2487900",
    "end": "2494920"
  },
  {
    "text": "nice yeah and whatever",
    "start": "2494920",
    "end": "2501640"
  },
  {
    "text": "um we now we have defined our protocol we have defined our behavior and we",
    "start": "2501640",
    "end": "2508060"
  },
  {
    "text": "Define the code that wants to interact with how are we our entity and well the",
    "start": "2508060",
    "end": "2514119"
  },
  {
    "text": "last thing you need to do is basically create the shared manager and the shunt",
    "start": "2514119",
    "end": "2519520"
  },
  {
    "text": "manager as said before is not uh something like a process or something",
    "start": "2519520",
    "end": "2526720"
  },
  {
    "text": "that you need to install on a server but is poorly effective and is completely",
    "start": "2526720",
    "end": "2532900"
  },
  {
    "text": "effect Native so basically it's something that you have to can actually embed inside of your application and",
    "start": "2532900",
    "end": "2539920"
  },
  {
    "text": "what basically does it um provides some HTTP API",
    "start": "2539920",
    "end": "2545859"
  },
  {
    "text": "and all the shards need to know the address of the shot manager in order to interact with those API so maybe",
    "start": "2545859",
    "end": "2556060"
  },
  {
    "text": "if you don't have any question maybe we can see this example running we should",
    "start": "2556060",
    "end": "2561579"
  },
  {
    "text": "definitely see that example right first thing with uh we start",
    "start": "2561579",
    "end": "2569020"
  },
  {
    "text": "the sample manager have you built it ideally yes indeed yes",
    "start": "2569020",
    "end": "2577000"
  },
  {
    "text": "we will see oh that's running yes notes so that shouldn't be yes exactly yeah",
    "start": "2577000",
    "end": "2582760"
  },
  {
    "text": "yeah it uses the compiled build of the library but it compiles on on the Fly",
    "start": "2582760",
    "end": "2588640"
  },
  {
    "text": "the example okay so as you can see here I have four",
    "start": "2588640",
    "end": "2593680"
  },
  {
    "text": "logging enabled so we can see that the share manager has loaded as now is listening on HTTP port 8080.",
    "start": "2593680",
    "end": "2601599"
  },
  {
    "text": "and now we start another process and this process we start sample Sharp the",
    "start": "2601599",
    "end": "2610300"
  },
  {
    "text": "sample shot is basically the pot that will run our charts",
    "start": "2610300",
    "end": "2615579"
  },
  {
    "text": "and here the first thing that you will see happen as we say I've seen before in",
    "start": "2615579",
    "end": "2622380"
  },
  {
    "text": "our little diagram on how the system behaves is that now this the Pod will",
    "start": "2622380",
    "end": "2630400"
  },
  {
    "text": "start its own on its own port uh the API",
    "start": "2630400",
    "end": "2635740"
  },
  {
    "text": "that allows other parts to communicate with this bots so basically receive",
    "start": "2635740",
    "end": "2640900"
  },
  {
    "text": "message and reply to the messages and but also we register itself to the",
    "start": "2640900",
    "end": "2646780"
  },
  {
    "text": "shared manager and what happened if we go back to the shared manager we can see that all these long string that we see",
    "start": "2646780",
    "end": "2655119"
  },
  {
    "text": "in the console is basically the list of design the shards that got assigned to",
    "start": "2655119",
    "end": "2661060"
  },
  {
    "text": "our pod and basically we can see that the Pod has registered",
    "start": "2661060",
    "end": "2666960"
  },
  {
    "text": "and since the bot is registered the topology of the network changed because before we haven't got any pods and now",
    "start": "2666960",
    "end": "2674440"
  },
  {
    "text": "we have and so the sharp manager started other balancing",
    "start": "2674440",
    "end": "2679839"
  },
  {
    "text": "um process and inside their balancing process is so that the only node is that pulse so basically assigned all the",
    "start": "2679839",
    "end": "2686079"
  },
  {
    "text": "shards to that pod and now one other thing that we can do",
    "start": "2686079",
    "end": "2692560"
  },
  {
    "text": "is basically run the sample connect and the sample connect is an example of",
    "start": "2692560",
    "end": "2700119"
  },
  {
    "text": "a process that is connected throughout interact with the entities yeah exactly",
    "start": "2700119",
    "end": "2707520"
  },
  {
    "text": "uh it's going not to be an active part of the system because you can also have",
    "start": "2707520",
    "end": "2714160"
  },
  {
    "text": "nodes that aren't active PODS of the system but can only resistor into the",
    "start": "2714160",
    "end": "2720040"
  },
  {
    "text": "system and interact with the system for example I usually thinks that API",
    "start": "2720040",
    "end": "2725619"
  },
  {
    "text": "Gateway or something like that maybe can be an example of this kind of scenarios where you have some kind of processes",
    "start": "2725619",
    "end": "2732520"
  },
  {
    "text": "that are part of the Sha are part of the sharding but are not hosting entities",
    "start": "2732520",
    "end": "2739060"
  },
  {
    "text": "so need to know how to interact with the entities but will not host any entities",
    "start": "2739060",
    "end": "2745420"
  },
  {
    "text": "so here we'll see that as we can see before I was logging every",
    "start": "2745420",
    "end": "2751480"
  },
  {
    "text": "time there was a subscription change of our counter and we finally called get",
    "start": "2751480",
    "end": "2759099"
  },
  {
    "text": "current to get the current value of the counter current count is true",
    "start": "2759099",
    "end": "2765300"
  },
  {
    "text": "in the behavior I had a log saying basically counter is now and logging",
    "start": "2765640",
    "end": "2772480"
  },
  {
    "text": "each time a message got in the current value of the counter and you can see that that is",
    "start": "2772480",
    "end": "2779760"
  },
  {
    "text": "logged on the pod process not on the connect instance so",
    "start": "2779760",
    "end": "2787300"
  },
  {
    "text": "basically we interacted with different processes and ideally if I am quick",
    "start": "2787300",
    "end": "2792819"
  },
  {
    "text": "enough to restart again our sample connect before the entity will be",
    "start": "2792819",
    "end": "2798220"
  },
  {
    "text": "automatically shut down due to interactive time Echo you can see that",
    "start": "2798220",
    "end": "2803980"
  },
  {
    "text": "now he received again increment increase so go three four and now it's uh four",
    "start": "2803980",
    "end": "2811540"
  },
  {
    "text": "and then even if I shut down my connect the entity is living inside",
    "start": "2811540",
    "end": "2817800"
  },
  {
    "text": "the pot so that's really nice that's really for me",
    "start": "2817800",
    "end": "2823960"
  },
  {
    "text": "and clearly this is not yet persistent in in the science that the state we are",
    "start": "2823960",
    "end": "2829480"
  },
  {
    "text": "keeping it in memory with a subscription ref yeah exactly you could you could",
    "start": "2829480",
    "end": "2834640"
  },
  {
    "text": "store that state in any database you want when the entity comes up restore the the state from the database or when",
    "start": "2834640",
    "end": "2843220"
  },
  {
    "text": "when the entity updates literally right to the database and publish publish back",
    "start": "2843220",
    "end": "2848800"
  },
  {
    "text": "basically this gives you all the basic tools to have the behavior have the location transparency in this user land",
    "start": "2848800",
    "end": "2856300"
  },
  {
    "text": "code you write something like this where you actually don't care where the entity is running or how to interact with the",
    "start": "2856300",
    "end": "2863079"
  },
  {
    "text": "entity uh all this taken care about short kick and what you will actually",
    "start": "2863079",
    "end": "2868480"
  },
  {
    "text": "take care of is things like you said for example how to persist the state right",
    "start": "2868480",
    "end": "2874660"
  },
  {
    "text": "but even into that as I said when starting the stream we are planning to",
    "start": "2874660",
    "end": "2881700"
  },
  {
    "text": "extend the functionalities of shark kick and also includes some uh persistent",
    "start": "2881700",
    "end": "2889540"
  },
  {
    "text": "behaviors such as even Source behaviors or behaviors that actually store",
    "start": "2889540",
    "end": "2894700"
  },
  {
    "text": "snapshots of the state and well there's a lot of work to be",
    "start": "2894700",
    "end": "2899980"
  },
  {
    "text": "done but something is uh already has been done and",
    "start": "2899980",
    "end": "2905740"
  },
  {
    "text": "and also in this system there are also already built in other things like for",
    "start": "2905740",
    "end": "2911859"
  },
  {
    "text": "example um singletones for example you can define a process that should be always",
    "start": "2911859",
    "end": "2919060"
  },
  {
    "text": "up and running and we think Singleton you basically can maybe take a look",
    "start": "2919060",
    "end": "2926560"
  },
  {
    "text": "think of it for example like distributed Crown tabs or stuff like that yeah exactly the easiest oceans have a single",
    "start": "2926560",
    "end": "2933339"
  },
  {
    "text": "process that does the ground up and communicates to the rest yeah or if you have something that needs to",
    "start": "2933339",
    "end": "2939339"
  },
  {
    "text": "continuously pull from external systems well that exactly uh an example of",
    "start": "2939339",
    "end": "2946240"
  },
  {
    "text": "single atom basically a Singleton you need to give an ID of the Singleton and",
    "start": "2946240",
    "end": "2951460"
  },
  {
    "text": "then you define the behavior of the Singleton for example here in the test what I do is just completed the third",
    "start": "2951460",
    "end": "2956680"
  },
  {
    "text": "but here in will be the effect that as we said before will for example pull or",
    "start": "2956680",
    "end": "2962859"
  },
  {
    "text": "this is a thing that never whatever yeah exactly it maps to an effect fiber",
    "start": "2962859",
    "end": "2969040"
  },
  {
    "text": "which is running in some parts basically yeah exactly exactly well not in some parts by exactly what exactly one part",
    "start": "2969040",
    "end": "2976900"
  },
  {
    "text": "exactly and by default is the Pod number one but you can change also that so",
    "start": "2976900",
    "end": "2982119"
  },
  {
    "text": "basically you can ensure that is running loose always in a",
    "start": "2982119",
    "end": "2987700"
  },
  {
    "text": "particular pod and",
    "start": "2987700",
    "end": "2991980"
  },
  {
    "text": "say that maybe if not no other question we can move to",
    "start": "2993339",
    "end": "2999520"
  },
  {
    "text": "see another example oops I think we can switch to the persistent",
    "start": "2999520",
    "end": "3006960"
  },
  {
    "text": "example with a with a bit of Outsourcing yeah okay",
    "start": "3006960",
    "end": "3013339"
  },
  {
    "start": "3010000",
    "end": "3790000"
  },
  {
    "text": "so basically what I am also experimenting is that as I said before",
    "start": "3013339",
    "end": "3019339"
  },
  {
    "text": "that behavior of having I need a defining Behavior to an identifier at",
    "start": "3019339",
    "end": "3026880"
  },
  {
    "text": "the queue and providing that an effect that basically pulls messages from that",
    "start": "3026880",
    "end": "3032220"
  },
  {
    "text": "the queue it is so basic and it's so powerful that allows as we said before",
    "start": "3032220",
    "end": "3038099"
  },
  {
    "text": "to do whatever we want based on that just by just composing that signature",
    "start": "3038099",
    "end": "3044040"
  },
  {
    "text": "and for example what I'm also experimenting with just one small uh",
    "start": "3044040",
    "end": "3049559"
  },
  {
    "text": "yeah piece of in that code if you go after that code it's probably this was written before we",
    "start": "3049559",
    "end": "3058440"
  },
  {
    "text": "made yeah the generator yeah I don't remember where I was you",
    "start": "3058440",
    "end": "3064980"
  },
  {
    "text": "know which file I was before this one yeah okay yeah you've got a yeah with a",
    "start": "3064980",
    "end": "3070680"
  },
  {
    "text": "poly thing yeah yeah that that was yeah I I am a so long time",
    "start": "3070680",
    "end": "3079319"
  },
  {
    "text": "in an effect user that or sometimes I miss all the fancy new things that",
    "start": "3079319",
    "end": "3085140"
  },
  {
    "text": "happens and I'm still attained to the old",
    "start": "3085140",
    "end": "3091559"
  },
  {
    "text": "adapter you know well which took a single yeah I took a single argument yeah exactly",
    "start": "3091559",
    "end": "3098240"
  },
  {
    "text": "and back to what we were saying oh yes um here basically we can also experiment",
    "start": "3098240",
    "end": "3106680"
  },
  {
    "text": "with different type of behavior for example anniversus one and the heaven",
    "start": "3106680",
    "end": "3112079"
  },
  {
    "text": "sourced one is very similar to the one we had before where we still have the",
    "start": "3112079",
    "end": "3118559"
  },
  {
    "text": "messages increment increment card and subscribe count but what we also have is",
    "start": "3118559",
    "end": "3124740"
  },
  {
    "text": "the protocol of communication doesn't really care if it's events yes or not yeah that that means that the protocol",
    "start": "3124740",
    "end": "3131880"
  },
  {
    "text": "is still the same basically we are only changing the internal behavior of the entity but for the outside world you",
    "start": "3131880",
    "end": "3140040"
  },
  {
    "text": "still have to interact with pushing messages and what changes is that we have an even",
    "start": "3140040",
    "end": "3146760"
  },
  {
    "text": "Source Behavior so we also need to Define events for example we Define that",
    "start": "3146760",
    "end": "3151920"
  },
  {
    "text": "the counter has incremented or the counter has decremented and then we Define the level Source",
    "start": "3151920",
    "end": "3159359"
  },
  {
    "text": "Behavior by combining the protocol with the events that can be raised by that",
    "start": "3159359",
    "end": "3165480"
  },
  {
    "text": "entity so basically we tie that together and finally we Define the behavior with",
    "start": "3165480",
    "end": "3172440"
  },
  {
    "text": "a combinator that given the protocol and the events that can be arise we Define",
    "start": "3172440",
    "end": "3178920"
  },
  {
    "text": "the initial state of the counter which basically is zero and we receive the new",
    "start": "3178920",
    "end": "3185460"
  },
  {
    "text": "comments here we have the union of the commons and based on the command and the",
    "start": "3185460",
    "end": "3191339"
  },
  {
    "text": "current state of the entity we can decide if we want to emit new events or",
    "start": "3191339",
    "end": "3198420"
  },
  {
    "text": "not maybe there are commands like incremental recommend that change the value of the counter so they emit events",
    "start": "3198420",
    "end": "3205559"
  },
  {
    "text": "or messages that just read the stay and reply back to the cooler for example get",
    "start": "3205559",
    "end": "3212040"
  },
  {
    "text": "current or subscribe count and then those events that are emitted",
    "start": "3212040",
    "end": "3218220"
  },
  {
    "text": "are then folded and the current state is",
    "start": "3218220",
    "end": "3223559"
  },
  {
    "text": "then created by folding those events and what gets really interesting is that",
    "start": "3223559",
    "end": "3230819"
  },
  {
    "text": "with that signature we can do basic persistence and if we persist basically",
    "start": "3230819",
    "end": "3236880"
  },
  {
    "text": "the information of the event that occurred and the idea of the entity and",
    "start": "3236880",
    "end": "3244859"
  },
  {
    "text": "for example I implemented sqlite as a simple system mechanism and we can see",
    "start": "3244859",
    "end": "3251339"
  },
  {
    "text": "that I have a simple table event Journal where I store basically the sequence of",
    "start": "3251339",
    "end": "3256740"
  },
  {
    "text": "the order of the uh the event that happened the type of entity and the ID",
    "start": "3256740",
    "end": "3264200"
  },
  {
    "text": "and you can see here that we have basically the serialization of the events the",
    "start": "3264200",
    "end": "3271020"
  },
  {
    "text": "Earth chord and now if I try to restart",
    "start": "3271020",
    "end": "3276660"
  },
  {
    "text": "my behavior what happens is that before accepting new messages",
    "start": "3276660",
    "end": "3282859"
  },
  {
    "text": "The Entity will basically replay all those events and basically recreate its",
    "start": "3282859",
    "end": "3291420"
  },
  {
    "text": "internal state by and again it could do snapshotting and so on yeah exactly",
    "start": "3291420",
    "end": "3297540"
  },
  {
    "text": "exactly snapshot thing basically is an optimization where we will truncate uh",
    "start": "3297540",
    "end": "3303359"
  },
  {
    "text": "at some time the the event log and before that you before interact with the",
    "start": "3303359",
    "end": "3309599"
  },
  {
    "text": "snapshotting but as said before it is currently a lot is ongoing a lot is uh",
    "start": "3309599",
    "end": "3316859"
  },
  {
    "text": "still to be have performed but a lot is already working so that's the the spot",
    "start": "3316859",
    "end": "3323400"
  },
  {
    "text": "or where things got interesting where you have a system that is kind of working but you want to experiment",
    "start": "3323400",
    "end": "3329880"
  },
  {
    "text": "basically what is capable to do and what you said is really uh is really",
    "start": "3329880",
    "end": "3335640"
  },
  {
    "text": "interesting you can also have snapshotting for example and and here we have already have a",
    "start": "3335640",
    "end": "3342180"
  },
  {
    "text": "persistent Behavior so basically you can write an application that",
    "start": "3342180",
    "end": "3348839"
  },
  {
    "text": "only persists its events and snapshot and is not tied to the ear shape of the",
    "start": "3348839",
    "end": "3355680"
  },
  {
    "text": "database a distributed readers on steroids yeah exactly exactly exactly it's a",
    "start": "3355680",
    "end": "3363240"
  },
  {
    "text": "distributed for users like me that back in the days use the um",
    "start": "3363240",
    "end": "3369680"
  },
  {
    "text": "with some persistent plugins that basically every time the state changes",
    "start": "3370400",
    "end": "3377960"
  },
  {
    "text": "yeah persisting it in storage or whatever basically this is it",
    "start": "3378380",
    "end": "3385200"
  },
  {
    "text": "and this is it but this is built in with affect so you get all the nice things",
    "start": "3385200",
    "end": "3391020"
  },
  {
    "text": "that effect does and most importantly you have a distributed orchestrator yeah",
    "start": "3391020",
    "end": "3396720"
  },
  {
    "text": "I kind of did not have with Redux and persistence yeah exactly it looks like",
    "start": "3396720",
    "end": "3403680"
  },
  {
    "text": "that but this is this gets executed in a in a cluster where you reference entities by ID and you don't care where",
    "start": "3403680",
    "end": "3411660"
  },
  {
    "text": "they are where they are located yeah and",
    "start": "3411660",
    "end": "3417420"
  },
  {
    "text": "and you know there are really really really thousands of things that can be built on",
    "start": "3417420",
    "end": "3424319"
  },
  {
    "text": "top of this and for example I also started working on something that you know now you have entities that emit",
    "start": "3424319",
    "end": "3431880"
  },
  {
    "text": "events so now maybe it's time to also have some logic coordinators some",
    "start": "3431880",
    "end": "3438480"
  },
  {
    "text": "process managers so I'm also starting to work on something based on that and to",
    "start": "3438480",
    "end": "3444119"
  },
  {
    "text": "my surprise I also find out that basically any process is just an entity",
    "start": "3444119",
    "end": "3450660"
  },
  {
    "text": "itself so basically you find out that this simple",
    "start": "3450660",
    "end": "3456720"
  },
  {
    "text": "um abstraction is so powerful that once you know that you can interact with",
    "start": "3456720",
    "end": "3462420"
  },
  {
    "text": "everything by just knowing it's ID and you can ensure that that is running only in one place",
    "start": "3462420",
    "end": "3469578"
  },
  {
    "text": "yeah that's that's already a lot because then a lot of patterns arise naturally",
    "start": "3469760",
    "end": "3474900"
  },
  {
    "text": "from that because yeah like a study orchestrator or a thing like that yeah you will have one process that is",
    "start": "3474900",
    "end": "3482460"
  },
  {
    "text": "responsible for the orchestrational specific possibility yeah exactly yeah",
    "start": "3482460",
    "end": "3487500"
  },
  {
    "text": "exactly for example the way I'm starting to implement that is basically uh are you really show on the sample connect",
    "start": "3487500",
    "end": "3496460"
  },
  {
    "text": "because that's just the behavior but yeah exactly that's the behavior uh we",
    "start": "3497660",
    "end": "3504180"
  },
  {
    "text": "have first we have obviously the creation of the sharding system here for",
    "start": "3504180",
    "end": "3509460"
  },
  {
    "text": "example like creating an in-memory chart and this memory type of configuration that we saw before plus some persistence",
    "start": "3509460",
    "end": "3516900"
  },
  {
    "text": "related conflict Maybe yeah exactly and here we have the protocol as we said",
    "start": "3516900",
    "end": "3523559"
  },
  {
    "text": "we have seen before the behavior and five final with the final word",
    "start": "3523559",
    "end": "3530700"
  },
  {
    "text": "program when we find our program first thing that we do is we register our entity basically we Define that the",
    "start": "3530700",
    "end": "3537480"
  },
  {
    "text": "sample entity is handled by this behavior and I also put a configuration",
    "start": "3537480",
    "end": "3543000"
  },
  {
    "text": "where I said that after half a second uh if there are no incoming messages I want",
    "start": "3543000",
    "end": "3548819"
  },
  {
    "text": "to shut down the entity and we register the sharding so basically this is",
    "start": "3548819",
    "end": "3554460"
  },
  {
    "text": "register scope tool is what um will eventually register this spot uh",
    "start": "3554460",
    "end": "3560099"
  },
  {
    "text": "to the shot manager and then we get the messenger so we get",
    "start": "3560099",
    "end": "3565920"
  },
  {
    "text": "a messenger able to communicate with increment decrement all the messages",
    "start": "3565920",
    "end": "3571099"
  },
  {
    "text": "we also start you know in a separate fiber",
    "start": "3571099",
    "end": "3576960"
  },
  {
    "text": "um I change the subscription that will lock the changes and in separate fiber",
    "start": "3576960",
    "end": "3582720"
  },
  {
    "text": "and then I send an increment of 10 a decrement of 10 without carrying of",
    "start": "3582720",
    "end": "3588180"
  },
  {
    "text": "actual response also an example of a request where I",
    "start": "3588180",
    "end": "3593280"
  },
  {
    "text": "send the message and I want to get back a result current is a number",
    "start": "3593280",
    "end": "3598680"
  },
  {
    "text": "then just for the artifact of seeing the process The Entity stopping I see here",
    "start": "3598680",
    "end": "3605220"
  },
  {
    "text": "for example that I sleep for one second so that basically times out our entity",
    "start": "3605220",
    "end": "3612119"
  },
  {
    "text": "and then I send again a message after that and to ensure that basically",
    "start": "3612119",
    "end": "3618299"
  },
  {
    "text": "the behavior replied correctly the events and get the current value of the",
    "start": "3618299",
    "end": "3623700"
  },
  {
    "text": "events and then finally we have all the layer we need to provide for example here we",
    "start": "3623700",
    "end": "3629940"
  },
  {
    "text": "have memory sharding the event store as a secure light implementation uh",
    "start": "3629940",
    "end": "3635760"
  },
  {
    "text": "serialization um set the log level Etc and this happens those could be packed on the on",
    "start": "3635760",
    "end": "3643740"
  },
  {
    "text": "the main layer having a yeah single thing to provide yeah yeah yeah",
    "start": "3643740",
    "end": "3649160"
  },
  {
    "text": "yeah and basically that is built on and other services that is required that is",
    "start": "3649160",
    "end": "3656640"
  },
  {
    "text": "the event store and basically this event store is that another service so basically it would be implemented in",
    "start": "3656640",
    "end": "3663299"
  },
  {
    "text": "wherever yeah provider you want yeah exactly for example here this is",
    "start": "3663299",
    "end": "3668400"
  },
  {
    "text": "implemented both in memory I have an in-memory one that is baked by RF",
    "start": "3668400",
    "end": "3673920"
  },
  {
    "text": "um or the the actual one this is",
    "start": "3673920",
    "end": "3679040"
  },
  {
    "text": "sqlite yeah you can see I it performs yeah up to now I don't support snapshot",
    "start": "3679700",
    "end": "3686640"
  },
  {
    "text": "at the moment so basically I just do a three basic methods that are already",
    "start": "3686640",
    "end": "3691680"
  },
  {
    "text": "stream that basically for an entity for a specific entity uh starting from a",
    "start": "3691680",
    "end": "3697319"
  },
  {
    "text": "specific versions or a specific state in the time of the life of the entity I get",
    "start": "3697319",
    "end": "3703319"
  },
  {
    "text": "back all the events that occurred in theory the snapshot store could even be a separated interface yeah exactly",
    "start": "3703319",
    "end": "3709799"
  },
  {
    "text": "exactly and the event store just has the Primitive to read from yeah",
    "start": "3709799",
    "end": "3716960"
  },
  {
    "text": "for it to the even stream basically and persist the event in the event stream",
    "start": "3716960",
    "end": "3723480"
  },
  {
    "text": "I've also added the ability to um read the entire Journal starting from",
    "start": "3723480",
    "end": "3730020"
  },
  {
    "text": "a single point in time and that's nice because if you have process manager or",
    "start": "3730020",
    "end": "3735900"
  },
  {
    "text": "things that needs to subscribe basically to every event or event inside the",
    "start": "3735900",
    "end": "3741480"
  },
  {
    "text": "system that's nice that's not the way the standard way you would want to do",
    "start": "3741480",
    "end": "3747000"
  },
  {
    "text": "that but I think that this you know then that's admissible then",
    "start": "3747000",
    "end": "3754220"
  },
  {
    "text": "that possible that doesn't do nothing bad inside our system",
    "start": "3754220",
    "end": "3759900"
  },
  {
    "text": "and basically here is what we will have to expand on in future days because",
    "start": "3759900",
    "end": "3768079"
  },
  {
    "text": "right now what we have is the behavior the",
    "start": "3768079",
    "end": "3773400"
  },
  {
    "text": "child transparency the the messaging what we are actually just missing is",
    "start": "3773400",
    "end": "3780839"
  },
  {
    "text": "basically all the different Behavior the",
    "start": "3780839",
    "end": "3786059"
  },
  {
    "text": "difference under behaviors that we could have for example one of the most useful that that I have found in past",
    "start": "3786059",
    "end": "3793260"
  },
  {
    "start": "3790000",
    "end": "4130000"
  },
  {
    "text": "experience is to sort of use the",
    "start": "3793260",
    "end": "3798480"
  },
  {
    "text": "event storage but but in a non-traditional way where",
    "start": "3798480",
    "end": "3805319"
  },
  {
    "text": "basically you always store an updated version of the state in the database so",
    "start": "3805319",
    "end": "3811140"
  },
  {
    "text": "you never end up having to reply the only moment you would reply is when you",
    "start": "3811140",
    "end": "3816240"
  },
  {
    "text": "want to do version upgrading and you could potentially even run two parallel",
    "start": "3816240",
    "end": "3821640"
  },
  {
    "text": "things one subscribing to the work of the other but for example um",
    "start": "3821640",
    "end": "3828660"
  },
  {
    "text": "I could then with this model I could leverage a single asset compliant",
    "start": "3828660",
    "end": "3833760"
  },
  {
    "text": "database have a table for the event storage and my database was the the",
    "start": "3833760",
    "end": "3840839"
  },
  {
    "text": "state of the application and everything was getting updated perfectly and and I had",
    "start": "3840839",
    "end": "3847079"
  },
  {
    "text": "transactional guarantees between State and uh because the one of the key",
    "start": "3847079",
    "end": "3852540"
  },
  {
    "text": "problems with having everything separated is the only place you can trust for the",
    "start": "3852540",
    "end": "3859619"
  },
  {
    "text": "state of something is the single writer it's not very efficient to ask to the",
    "start": "3859619",
    "end": "3864660"
  },
  {
    "text": "single writer for current state you would want in some scenarios only",
    "start": "3864660",
    "end": "3870359"
  },
  {
    "text": "some parts of queries going directly to the writer and some part of queries to go off the read read systems but you",
    "start": "3870359",
    "end": "3879359"
  },
  {
    "text": "don't have any guarantee that the read system is up to date with the single writer uh maybe you use an answer",
    "start": "3879359",
    "end": "3886140"
  },
  {
    "text": "compliant database and you have guarantees between us natural of the state and and the events you know your",
    "start": "3886140",
    "end": "3894359"
  },
  {
    "text": "only only querying always the the latest thing and and for some",
    "start": "3894359",
    "end": "3900540"
  },
  {
    "text": "problems that was the obvious solution I I can remember for example a lot of people speaking about",
    "start": "3900540",
    "end": "3908099"
  },
  {
    "text": "users and emails you gotta have a unique email and a unique user yeah the user is",
    "start": "3908099",
    "end": "3914400"
  },
  {
    "text": "allowed to change email yeah so unless you're unless you put all",
    "start": "3914400",
    "end": "3920400"
  },
  {
    "text": "the users and all the emails in a single writer or the entirety of your system which",
    "start": "3920400",
    "end": "3926819"
  },
  {
    "text": "maybe is likely to complicate it or you use a normal asset compliant database",
    "start": "3926819",
    "end": "3932040"
  },
  {
    "text": "and store current states so if one user takes an email the same another",
    "start": "3932040",
    "end": "3937740"
  },
  {
    "text": "aggregate doesn't it's not able to take the same email sorry the transactional boundaries you",
    "start": "3937740",
    "end": "3944520"
  },
  {
    "text": "you Flex them and having a plugable system we have a way of easily",
    "start": "3944520",
    "end": "3950220"
  },
  {
    "text": "kind of shift those things Without Really changing code from the from the usage perspective here",
    "start": "3950220",
    "end": "3957720"
  },
  {
    "text": "there's nothing that talks about persistence even yeah event sourcing or anything else",
    "start": "3957720",
    "end": "3963720"
  },
  {
    "text": "that's just communicating via messages",
    "start": "3963720",
    "end": "3967640"
  },
  {
    "text": "yeah exactly exactly it's a very simple mental model yeah I",
    "start": "3968900",
    "end": "3976079"
  },
  {
    "text": "the more time passes it the more I find out that basically everything is an",
    "start": "3976079",
    "end": "3981960"
  },
  {
    "text": "actor some extent yeah but the realization was an actor is",
    "start": "3981960",
    "end": "3987960"
  },
  {
    "text": "actually a Fiverr with a cue yeah exactly exactly exactly",
    "start": "3987960",
    "end": "3993359"
  },
  {
    "text": "and so basically in the end everything is just an identity that receives",
    "start": "3993359",
    "end": "3999359"
  },
  {
    "text": "something well that is nice well see well and I guess we we do plan",
    "start": "3999359",
    "end": "4008720"
  },
  {
    "text": "to make this uh an official part of the organization so it gets maintained it",
    "start": "4008720",
    "end": "4015260"
  },
  {
    "text": "gets extended and so on and so forth we did expect to have these a few months",
    "start": "4015260",
    "end": "4020720"
  },
  {
    "text": "ago but at some point we thought this was one week away from working yeah and",
    "start": "4020720",
    "end": "4027799"
  },
  {
    "text": "apparently they ended up taking a little a little longer you know estimates in information on",
    "start": "4027799",
    "end": "4033799"
  },
  {
    "text": "technology works like that you know yeah it doesn't really matter",
    "start": "4033799",
    "end": "4038260"
  },
  {
    "text": "and for for anything in the effect organization is",
    "start": "4041180",
    "end": "4047180"
  },
  {
    "text": "we only put it there when we actually know it works when we actually know it's",
    "start": "4047180",
    "end": "4052700"
  },
  {
    "text": "gonna have a future there's a lot of experimentation behind the scenes this",
    "start": "4052700",
    "end": "4057859"
  },
  {
    "text": "is not the first iteration we go through with this with this",
    "start": "4057859",
    "end": "4062900"
  },
  {
    "text": "project yeah exactly there's also a lot of nice things that for example as",
    "start": "4062900",
    "end": "4070760"
  },
  {
    "text": "I said this started as an inspiration of a Shortcake from the Scala award and",
    "start": "4070760",
    "end": "4077720"
  },
  {
    "text": "what happens is that also by writing it in typescript I find out problem Source",
    "start": "4077720",
    "end": "4084640"
  },
  {
    "text": "case situation that also existed in the real original sharking you know so that",
    "start": "4084640",
    "end": "4090740"
  },
  {
    "text": "a system is never fully complete you know yeah but but but we figure it out",
    "start": "4090740",
    "end": "4096020"
  },
  {
    "text": "even with the fact that having it wrote in two languages is actually a good way of figuring edge cases yeah exactly",
    "start": "4096020",
    "end": "4103420"
  },
  {
    "text": "it kind of uh next level of writing tests you know you write the system you",
    "start": "4103420",
    "end": "4110359"
  },
  {
    "text": "write tests for that and then you write that system in another language and find out the problem",
    "start": "4110359",
    "end": "4117278"
  },
  {
    "text": "exactly exactly I see all the stuff there for example workflows you were",
    "start": "4117279",
    "end": "4122778"
  },
  {
    "text": "mentioning you are starting to experiment uh given now we have a persistent thing yeah I'm starting to working on that",
    "start": "4122779",
    "end": "4133160"
  },
  {
    "start": "4130000",
    "end": "4825000"
  },
  {
    "text": "um is not actually working right now but basically the idea is that",
    "start": "4133160",
    "end": "4140440"
  },
  {
    "text": "um maybe maybe I'm a little more of the week on",
    "start": "4141500",
    "end": "4148179"
  },
  {
    "text": "uh no no no no no nothing the same thing maybe a day of that week okay so because",
    "start": "4148179",
    "end": "4155600"
  },
  {
    "text": "basically here I said that now that we have the concept of uh behavior of an",
    "start": "4155600",
    "end": "4161960"
  },
  {
    "text": "entity and now I can define a workflow uh",
    "start": "4161960",
    "end": "4167238"
  },
  {
    "text": "basically as something that consumes event and eventually produce new events",
    "start": "4167239",
    "end": "4174798"
  },
  {
    "text": "to be sent [Music] um by those that got consumed so here I'm",
    "start": "4174799",
    "end": "4182540"
  },
  {
    "text": "looking for an implementation of workflows that is basically based on the",
    "start": "4182540",
    "end": "4188359"
  },
  {
    "text": "narrators um basically the idea the API that I'm",
    "start": "4188359",
    "end": "4194060"
  },
  {
    "text": "looking for is something like for example const or flow",
    "start": "4194060",
    "end": "4202480"
  },
  {
    "text": "function I'm looking something like I Define a generator uh and then I want",
    "start": "4202719",
    "end": "4209920"
  },
  {
    "text": "something like while uh yield star",
    "start": "4209920",
    "end": "4216760"
  },
  {
    "text": "uh take and I want to take an end an event of type",
    "start": "4216880",
    "end": "4224000"
  },
  {
    "text": "um user created and when the user got created maybe I",
    "start": "4224000",
    "end": "4231440"
  },
  {
    "text": "want to do this to saving the event equals I want to give a syntax like that",
    "start": "4231440",
    "end": "4239719"
  },
  {
    "text": "when then I want to yield star truth",
    "start": "4239719",
    "end": "4244880"
  },
  {
    "text": "and I want to send a specific to a specific entity for example you know",
    "start": "4244880",
    "end": "4252100"
  },
  {
    "text": "Google one",
    "start": "4252100",
    "end": "4256100"
  },
  {
    "text": "you know I wanted to basically and if then that pattern exactly exactly I I",
    "start": "4258560",
    "end": "4265100"
  },
  {
    "text": "want to give and if that in then that basic based on generators and that's I want to give that based on",
    "start": "4265100",
    "end": "4273020"
  },
  {
    "text": "generators because uh first that generators have a syntax that allows to",
    "start": "4273020",
    "end": "4280040"
  },
  {
    "text": "suspend um this kind of suspension is different from the effect suspension I want to",
    "start": "4280040",
    "end": "4287120"
  },
  {
    "text": "support an effect in this kind of definition like effect.gen does but I",
    "start": "4287120",
    "end": "4293360"
  },
  {
    "text": "also want to have some kind of signal that is I suspended the workflow because",
    "start": "4293360",
    "end": "4300620"
  },
  {
    "text": "I'm waiting for an external event something happened in the external system",
    "start": "4300620",
    "end": "4306400"
  },
  {
    "text": "and in order to achieve that since the the kind of syntax the first thing that",
    "start": "4306400",
    "end": "4312980"
  },
  {
    "text": "I need to achieve is that I need to ensure that this can be defined as",
    "start": "4312980",
    "end": "4319219"
  },
  {
    "text": "behavior and this Behavior will run in southern entity and that entity who will have the",
    "start": "4319219",
    "end": "4329360"
  },
  {
    "text": "um we basically will basically have uh the requirement of the entity uh receiving",
    "start": "4329360",
    "end": "4336560"
  },
  {
    "text": "all the events of the entire system uh in in order maybe if not in order the",
    "start": "4336560",
    "end": "4344600"
  },
  {
    "text": "ABM you need to know when to wait for order to happen and also",
    "start": "4344600",
    "end": "4351199"
  },
  {
    "text": "um that means that I have to have a Singleton in my system that pulls from",
    "start": "4351199",
    "end": "4357020"
  },
  {
    "text": "the events stored in events and Define the activation rules for when an",
    "start": "4357020",
    "end": "4363920"
  },
  {
    "text": "instance of this workflow need to be activated so you know there's a lot of",
    "start": "4363920",
    "end": "4370100"
  },
  {
    "text": "things that um comes out from that requirement and up",
    "start": "4370100",
    "end": "4375320"
  },
  {
    "text": "to now I am I just implemented and it kind of works the part well basically",
    "start": "4375320",
    "end": "4382100"
  },
  {
    "text": "um you define a workflow by giving it a single a name what kind of entity events",
    "start": "4382100",
    "end": "4389480"
  },
  {
    "text": "it watches and you have an activation rule that is basically when I receive this kind of message I can create an",
    "start": "4389480",
    "end": "4398360"
  },
  {
    "text": "instance of a specific kind of workflow instance",
    "start": "4398360",
    "end": "4404440"
  },
  {
    "text": "and then like returning an identifier for the for the workflow yeah exactly",
    "start": "4404440",
    "end": "4410540"
  },
  {
    "text": "exactly that uh gets great I call that activation because uh ideally uh they",
    "start": "4410540",
    "end": "4417260"
  },
  {
    "text": "will this will be the activation condition of the workflow and but uh it will happen for example",
    "start": "4417260",
    "end": "4425300"
  },
  {
    "text": "that uh another that same event will be triggered again and you get back the",
    "start": "4425300",
    "end": "4431239"
  },
  {
    "text": "same instance of the workflow nothing will happen because it will end up sending again the same event to the same",
    "start": "4431239",
    "end": "4438620"
  },
  {
    "text": "workflow and the workflow will know that you already received that event so we'll",
    "start": "4438620",
    "end": "4444199"
  },
  {
    "text": "skip that event you know there are uh mostly beautiful really means kind of",
    "start": "4444199",
    "end": "4449659"
  },
  {
    "text": "sub basically yeah exactly exactly exactly and it's mostly Saga it's mostly",
    "start": "4449659",
    "end": "4455480"
  },
  {
    "text": "Saga [Applause] um sorry maybe a better name would be Saga",
    "start": "4455480",
    "end": "4460940"
  },
  {
    "text": "woman yeah exactly yeah exactly and then you know you have the the",
    "start": "4460940",
    "end": "4466580"
  },
  {
    "text": "single tool that you need to inject that needs to read the journal and that gets a binary event I need to know if that",
    "start": "4466580",
    "end": "4474260"
  },
  {
    "text": "specific workflow is watching or waiting for that specific kind of event you know",
    "start": "4474260",
    "end": "4480020"
  },
  {
    "text": "and this is the first uh write that I did of that workflow that Saga so this",
    "start": "4480020",
    "end": "4486380"
  },
  {
    "text": "is the first implementation will be probably changed a lot yeah I'm doing it yeah because I also talk about not",
    "start": "4486380",
    "end": "4494360"
  },
  {
    "text": "having an activation because if you think about it you can Define the",
    "start": "4494360",
    "end": "4501679"
  },
  {
    "text": "activation inside another Saga itself so maybe you don't need activation you",
    "start": "4501679",
    "end": "4508580"
  },
  {
    "text": "can just have something that is guaranteed to receive the entity I mean",
    "start": "4508580",
    "end": "4513860"
  },
  {
    "text": "the events and maybe that will spawn new sagas and then you register those sagas",
    "start": "4513860",
    "end": "4520760"
  },
  {
    "text": "to receive all the events this is this is just another type of",
    "start": "4520760",
    "end": "4526880"
  },
  {
    "text": "actor where basically yeah exactly you have you you created by ID yeah exactly a new",
    "start": "4526880",
    "end": "4535280"
  },
  {
    "text": "saga ID and you say okay this Saga is gonna watch on is",
    "start": "4535280",
    "end": "4542060"
  },
  {
    "text": "and and you just need to specify the entities not to not to have it listen to the whole world of dance maybe specify",
    "start": "4542060",
    "end": "4550699"
  },
  {
    "text": "matching matching entities and and that's it yeah",
    "start": "4550699",
    "end": "4555920"
  },
  {
    "text": "yeah this is mostly uh for peculiar Event Source systems yeah yeah but it",
    "start": "4555920",
    "end": "4563900"
  },
  {
    "text": "might be helpful even even for simple coordination of",
    "start": "4563900",
    "end": "4570739"
  },
  {
    "text": "actually I subscribe I don't need to have events though sorry you do need to have events for",
    "start": "4570739",
    "end": "4577040"
  },
  {
    "text": "this to work yeah yeah I was just saying I was just about to say that um I am actually I'm subscribing to an",
    "start": "4577040",
    "end": "4584600"
  },
  {
    "text": "event store but now that I I am saying it loud loud maybe that's this can just",
    "start": "4584600",
    "end": "4590360"
  },
  {
    "text": "be a topic um inside I was about to say yeah yeah I",
    "start": "4590360",
    "end": "4595940"
  },
  {
    "text": "and I can I can subscribe to a topic and I can have a single turn maybe that upon",
    "start": "4595940",
    "end": "4601699"
  },
  {
    "text": "starting ensure that all the past events are published again to the topic so if",
    "start": "4601699",
    "end": "4607520"
  },
  {
    "text": "someone missed the events on the topic you know or some or some kind of behavior that if an entity a workflow",
    "start": "4607520",
    "end": "4616219"
  },
  {
    "text": "starts and figures out that he received an event uh way up before what you",
    "start": "4616219",
    "end": "4622699"
  },
  {
    "text": "expect so for example we received the event with sequence 10 but he is stuck",
    "start": "4622699",
    "end": "4628880"
  },
  {
    "text": "with five maybe he wants to get what happened before you know the only",
    "start": "4628880",
    "end": "4634340"
  },
  {
    "text": "requirements actually is getting events and getting ordered events I think",
    "start": "4634340",
    "end": "4639980"
  },
  {
    "text": "yeah um nothing more but ordered events",
    "start": "4639980",
    "end": "4646280"
  },
  {
    "text": "I mean they should you can't have really ordering guarantees across entity types unless",
    "start": "4646280",
    "end": "4652580"
  },
  {
    "text": "yeah for everything in a single yeah",
    "start": "4652580",
    "end": "4656440"
  },
  {
    "text": "sense that uh not completely out of time because if well maybe you can actually",
    "start": "4657800",
    "end": "4665960"
  },
  {
    "text": "have them out of order and the thing is that then in your workflow",
    "start": "4665960",
    "end": "4672560"
  },
  {
    "text": "implementation you don't have the guarantee that uh they are in the correct order and well you can we you",
    "start": "4672560",
    "end": "4681320"
  },
  {
    "text": "will always assume that you can have the correct order for the same entity but",
    "start": "4681320",
    "end": "4686840"
  },
  {
    "text": "not across different entities well that that's okay and well",
    "start": "4686840",
    "end": "4692739"
  },
  {
    "text": "you know yeah it is kind of it's worth an entire discussion",
    "start": "4692739",
    "end": "4698900"
  },
  {
    "text": "discussion because you know uh it's true that you cannot guarantee uh ordering",
    "start": "4698900",
    "end": "4704840"
  },
  {
    "text": "between different entities because as you pointed out our defense systems",
    "start": "4704840",
    "end": "4710260"
  },
  {
    "text": "but if you for example are interested in",
    "start": "4710260",
    "end": "4715480"
  },
  {
    "text": "events of two different entities at least you need to ensure that inside the",
    "start": "4715480",
    "end": "4722600"
  },
  {
    "text": "stream of the events uh there aren't interest inconsistence of a single",
    "start": "4722600",
    "end": "4728120"
  },
  {
    "text": "entities so okay you are getting the stream of different events but at least",
    "start": "4728120",
    "end": "4733340"
  },
  {
    "text": "the events of the same entities could arrive in the correct order right",
    "start": "4733340",
    "end": "4741100"
  },
  {
    "text": "I mean you can only usually guarantee that within a single entity",
    "start": "4741739",
    "end": "4747320"
  },
  {
    "text": "yes I don't accept time which is a week yeah it's a weak constraints of ordering",
    "start": "4747320",
    "end": "4755480"
  },
  {
    "text": "yeah but even there if you have to include time I I'm not sure which query you use to actually query the event Vlog",
    "start": "4755480",
    "end": "4762020"
  },
  {
    "text": "yeah yeah so to be honest yeah you're right the the most sensible thing would do",
    "start": "4762020",
    "end": "4768560"
  },
  {
    "text": "something like uh having the topic publish all the events and basically",
    "start": "4768560",
    "end": "4774860"
  },
  {
    "text": "then it's up to the single in theory a second itself is a yeah is in itself an",
    "start": "4774860",
    "end": "4782780"
  },
  {
    "text": "event source officer but where the consumption of events is a command",
    "start": "4782780",
    "end": "4789080"
  },
  {
    "text": "so you're never gonna Replay that that one if you want to update the",
    "start": "4789080",
    "end": "4795380"
  },
  {
    "text": "the workflow you will have to replay the events that the world",
    "start": "4795380",
    "end": "4800560"
  },
  {
    "text": "but but only the one step the workflow generates not damn good events now the",
    "start": "4800560",
    "end": "4808219"
  },
  {
    "text": "input you have to watch one by one and you can never restart because otherwise it's as you said you",
    "start": "4808219",
    "end": "4815480"
  },
  {
    "text": "don't get any any form of ordering yeah yeah",
    "start": "4815480",
    "end": "4821920"
  },
  {
    "text": "exactly there are tons of and I know this kind of things is also the things",
    "start": "4824679",
    "end": "4830179"
  },
  {
    "start": "4825000",
    "end": "5040000"
  },
  {
    "text": "that maybe is happy to you know uh there are these systems you know get",
    "start": "4830179",
    "end": "4837980"
  },
  {
    "text": "really interesting not only for uh back-end but also for front-end because",
    "start": "4837980",
    "end": "4843080"
  },
  {
    "text": "you know maybe when you have something that is so message driven like these",
    "start": "4843080",
    "end": "4848659"
  },
  {
    "text": "systems maybe then you can start exchange messages between backend and front-end and maybe you can have systems",
    "start": "4848659",
    "end": "4855800"
  },
  {
    "text": "where the boundaries between front and the back end almost disappear you know",
    "start": "4855800",
    "end": "4861199"
  },
  {
    "text": "you are messaging with an entity and who knows that if that entity is running on",
    "start": "4861199",
    "end": "4867199"
  },
  {
    "text": "a client browser connected to our application or is running on the server",
    "start": "4867199",
    "end": "4873140"
  },
  {
    "text": "um I I can see a future that where that maybe a is something that we won't care",
    "start": "4873140",
    "end": "4879199"
  },
  {
    "text": "about either and we will just think about we have behaviors that runs and",
    "start": "4879199",
    "end": "4884840"
  },
  {
    "text": "those Behavior there are some behaviors that maybe run only on the browser there are behaviors that may be around only on",
    "start": "4884840",
    "end": "4890960"
  },
  {
    "text": "the back end but um we I I can see a future where",
    "start": "4890960",
    "end": "4896060"
  },
  {
    "text": "basically we don't think anymore about uh you know sending data through API",
    "start": "4896060",
    "end": "4902920"
  },
  {
    "text": "connection uh we are just thinking about yeah I think the message is this is a",
    "start": "4902920",
    "end": "4909140"
  },
  {
    "text": "step further from yeah yeah yeah in RPC you you pretend that you're calling",
    "start": "4909140",
    "end": "4916580"
  },
  {
    "text": "servers as functions here you you don't even want to know that they are servers you just call Things by name and yeah",
    "start": "4916580",
    "end": "4924219"
  },
  {
    "text": "you message inter interconnected pieces yeah of your application this is this is",
    "start": "4924219",
    "end": "4931520"
  },
  {
    "text": "very interesting yeah yeah well good good",
    "start": "4931520",
    "end": "4938320"
  },
  {
    "text": "um yeah and",
    "start": "4938420",
    "end": "4943460"
  },
  {
    "text": "thank you very much for uh for doing this introduction yeah it was it was a",
    "start": "4943460",
    "end": "4948739"
  },
  {
    "text": "pleasure for me and I guess we will uh shortly after this discussion and move",
    "start": "4948739",
    "end": "4954920"
  },
  {
    "text": "move the project onto the organization so we can yeah we can smash it uh a",
    "start": "4954920",
    "end": "4961460"
  },
  {
    "text": "little bit and try to implement different uh different behaviors and stuff yeah definitely yeah I can see",
    "start": "4961460",
    "end": "4968360"
  },
  {
    "text": "that for sure there's a lot of people interested in in building this type of systems with with effect yeah there are",
    "start": "4968360",
    "end": "4977540"
  },
  {
    "text": "a lot of things that are raising up and a lot of things that can be built up of",
    "start": "4977540",
    "end": "4983000"
  },
  {
    "text": "this kind of systems yeah at some extent it goes back to models like erlang and",
    "start": "4983000",
    "end": "4988580"
  },
  {
    "text": "other yeah based systems it's funny enough at the end it's all yeah it's all",
    "start": "4988580",
    "end": "4994820"
  },
  {
    "text": "aside when you get back to it yeah yeah yeah we always get back to that paper written in 1960",
    "start": "4994820",
    "end": "5002280"
  },
  {
    "text": "actors you know you always come back it's the real language exactly",
    "start": "5002280",
    "end": "5009460"
  },
  {
    "text": "exactly good well so on that note again Matia thank you very much",
    "start": "5009760",
    "end": "5015280"
  },
  {
    "text": "thank you again for having me for the viewers",
    "start": "5015280",
    "end": "5020620"
  },
  {
    "text": "check out the links and everything and every reference and well let's give",
    "start": "5020620",
    "end": "5027219"
  },
  {
    "text": "Matia feedback and and let's bring this forward thank you bye",
    "start": "5027219",
    "end": "5034960"
  }
]