[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "Homework 1, hard deadline, uh, section. Tomorrow, um, we're gonna go through",
    "start": "5540",
    "end": "12900"
  },
  {
    "text": "the backpropagation example which I went through very briefly in the last lecture. Talk about diverse neighbors,",
    "start": "12900",
    "end": "19050"
  },
  {
    "text": "which I did in one minute. And also, we're gonna talk about scikit-learn, which is- it is a really useful tool for doing",
    "start": "19050",
    "end": "26670"
  },
  {
    "text": "machine learning which might be useful for your final projects, good to know. So, uh, please come to section.",
    "start": "26670",
    "end": "32579"
  },
  {
    "text": "All right, let's, ah, do a little bit of review of where we are.",
    "start": "32580",
    "end": "37680"
  },
  {
    "start": "34000",
    "end": "53000"
  },
  {
    "text": "So we've talked about, ah, we're talking about machine learning in particular supervised learning where we",
    "start": "37680",
    "end": "45170"
  },
  {
    "text": "start with feature extraction where we take examples and convert them into a feature vector,",
    "start": "45170",
    "end": "50795"
  },
  {
    "text": "um, which is more amenable for our learning algorithm. Um, we can take either linear predictors or neural networks which gives us scores, um,",
    "start": "50795",
    "end": "62565"
  },
  {
    "start": "53000",
    "end": "78000"
  },
  {
    "text": "and the score is either defined via a simple dot product between the weight vector and the feature vector,",
    "start": "62565",
    "end": "68320"
  },
  {
    "text": "or some sort of more fancy non-linear combination. At the end of the day, we have these model families that gives us you know, score functions",
    "start": "68320",
    "end": "75170"
  },
  {
    "text": "which then can be used for classification regression. We also talked about loss functions as",
    "start": "75170",
    "end": "81140"
  },
  {
    "start": "78000",
    "end": "222000"
  },
  {
    "text": "a way to assess the quality of a particular predictor. So in, ah, linear classification,",
    "start": "81140",
    "end": "86360"
  },
  {
    "text": "ah, we had the zero, one loss and the hinge loss as example of loss functions that we, ah, might care about.",
    "start": "86360",
    "end": "94640"
  },
  {
    "text": "Ah, the training loss is an average over the losses on individual examples.",
    "start": "94640",
    "end": "100775"
  },
  {
    "text": "And to optimize all this, ah, we can use, ah, the stochastic gradient algorithm which takes an example x, y,",
    "start": "100775",
    "end": "111520"
  },
  {
    "text": "and, ah, computes the gradient on that particular example and then just updates,",
    "start": "111520",
    "end": "116899"
  },
  {
    "text": "ah, you know the weights based on that. Okay. So hopefully this should be all, you know, review.",
    "start": "116900",
    "end": "123160"
  },
  {
    "text": "Okay. So now, I'm going to ask the following question. You know, let's be a little bit philosophical here?",
    "start": "123160",
    "end": "130085"
  },
  {
    "text": "So what is the true objective you know, of machine learning? So how many of you think it is to minimize the error on the training set?",
    "start": "130085",
    "end": "138170"
  },
  {
    "text": "Show of hands. No one? This is what we've been talking about, right? We've been talking about minimizing your own training sets.",
    "start": "138170",
    "end": "144905"
  },
  {
    "text": "Okay, well, uh, maybe that's, um, maybe that's not right then. Um, what about minimizing,",
    "start": "144905",
    "end": "151115"
  },
  {
    "text": "ah, training error with regularization? Because regularization is probably a good idea. How many of you think that's, ah, that's the goal?",
    "start": "151115",
    "end": "158875"
  },
  {
    "text": "What about minimizing error on the test set? Okay, seems like it's closer, right?",
    "start": "158875",
    "end": "165770"
  },
  {
    "text": "You know, the test sets. Test accuracies are things maybe you care about.",
    "start": "165770",
    "end": "171129"
  },
  {
    "text": "Um, um, what about minimizing error on unseen future examples? Okay. So the majority of you think that's the right answer.",
    "start": "171230",
    "end": "179935"
  },
  {
    "text": "What about, ah, learning about machines, and that's the true objective. Who doesn't want to learn about machines? That's actually the true objective.",
    "start": "179935",
    "end": "186175"
  },
  {
    "text": "Now, um, so the correct answer is minimizing error on unseen future examples.",
    "start": "186175",
    "end": "192820"
  },
  {
    "text": "So I think all of you have an intuition that we are doing some machine learning, we're learning on data,",
    "start": "192820",
    "end": "197920"
  },
  {
    "text": "but what we really care about is how this predictor performs on in the future.",
    "start": "197920",
    "end": "203140"
  },
  {
    "text": "Because we're going to deploy this in a system, and it's going to be the future, it's going to be unseen. Um, and then- but then- okay,",
    "start": "203140",
    "end": "210400"
  },
  {
    "text": "so then how do we- do you think about all these other things? You know training set, regularization tests.",
    "start": "210400",
    "end": "216890"
  },
  {
    "text": "So that's going to be something we'll come back to, um, later. Okay. So there's two topics today,",
    "start": "216890",
    "end": "224000"
  },
  {
    "start": "222000",
    "end": "238000"
  },
  {
    "text": "I wanna talk about generalization, which is I think a pretty subtle but important thing to keep in mind when you're doing machine learning.",
    "start": "224000",
    "end": "230720"
  },
  {
    "text": "Um, and then we're going to switch gears and talk about unsupervised learning where we don't have labels, but we can still, um, do something.",
    "start": "230720",
    "end": "238459"
  },
  {
    "start": "238000",
    "end": "266000"
  },
  {
    "text": "So we've been talking about training loss, right? We've- you know, I've made a big deal about,",
    "start": "238460",
    "end": "244710"
  },
  {
    "text": "you write down what you want, and then you optimize. So the question is like,",
    "start": "244710",
    "end": "250140"
  },
  {
    "text": "ah, is this training loss a good objective function? Um, well, let's take this literally.",
    "start": "250140",
    "end": "258454"
  },
  {
    "text": "Suppose we really wanted to just minimize the training loss, what would we do? Well, here- here's an algorithm for you.",
    "start": "258455",
    "end": "265340"
  },
  {
    "text": "So you just store your training examples, okay. And then you're going to define your predictor is as follows.",
    "start": "265340",
    "end": "271940"
  },
  {
    "start": "266000",
    "end": "315000"
  },
  {
    "text": "So if you see that particular, ah, example in your training set, then you're just going to output, um, ah,",
    "start": "271940",
    "end": "278240"
  },
  {
    "text": "the out- the output that you saw in the training set. And then otherwise, you're just going to segfault.",
    "start": "278240",
    "end": "284310"
  },
  {
    "text": "And this is going to crash, [BACKGROUND] right? So this is great. It minimizes the training error perfectly.",
    "start": "284310",
    "end": "290240"
  },
  {
    "text": "It gets zero loss assuming your training examples don't have, ah, conflicts. But you know you're all laughing because this is clearly a bad idea.",
    "start": "290240",
    "end": "298340"
  },
  {
    "text": "So somehow purely following this minimizing training set objective is,",
    "start": "298340",
    "end": "303820"
  },
  {
    "text": "ah, error objective is not really the right thing. Um, So this is an example- a very extreme example of overfitting.",
    "start": "303820",
    "end": "313340"
  },
  {
    "text": "So overfitting is this phenomena that you see where you, ah, have some data and usually the data has some noise,",
    "start": "313340",
    "end": "320660"
  },
  {
    "start": "315000",
    "end": "351000"
  },
  {
    "text": "and you are trying to fit a predictor, but you're really trying too hard, right? So if you're fitting this,",
    "start": "320660",
    "end": "325879"
  },
  {
    "text": "um, green squiggly line, you are fitting the data and getting zero training error,",
    "start": "325880",
    "end": "331010"
  },
  {
    "text": "but you're kinda missing the big picture which is you know this black curve, or in grant regression.",
    "start": "331010",
    "end": "337095"
  },
  {
    "text": "Some of you you've probably seen examples where you have a bunch of points usually with noise, and if you really try hard to fit the points and you're gonna get zero error,",
    "start": "337095",
    "end": "344479"
  },
  {
    "text": "but you're kinda missing this general, ah, trend. And overfitting can really kind of bite you if you're not careful.",
    "start": "344480",
    "end": "351860"
  },
  {
    "start": "351000",
    "end": "560000"
  },
  {
    "text": "So let's try a formula- formalize this a little bit more. How do we assess whether a predictor is good?",
    "start": "351860",
    "end": "358640"
  },
  {
    "text": "Because if we can't measure it, we can't really, um, you know optimize it. Okay. So, um, the key idea is that we",
    "start": "358640",
    "end": "366260"
  },
  {
    "text": "really care about error on unseen future examples, okay? So this is great as you know,",
    "start": "366260",
    "end": "373010"
  },
  {
    "text": "uh, aspiration to write down. But the question is how do we actually you know, optimize this, right?",
    "start": "373010",
    "end": "380720"
  },
  {
    "text": "Because it's the future and it's also unseen. Um, so you know high-definition, we've had, get a handle, get a handle on this.",
    "start": "380720",
    "end": "390230"
  },
  {
    "text": "Um, so typically what people do is, ah, the next best thing which is you gather a test set,",
    "start": "390230",
    "end": "396140"
  },
  {
    "text": "which is supposed to be representative of all the types of things you would see. And then you guard it, uh, carefully,",
    "start": "396140",
    "end": "403700"
  },
  {
    "text": "and make sure you don't touch it too much, right? Because, you know what happens if you, ah,",
    "start": "403700",
    "end": "410265"
  },
  {
    "text": "start looking at the test set and- you know, or the worst case that you train on a test set, right?",
    "start": "410265",
    "end": "415850"
  },
  {
    "text": "So you know, the test set being a surrogate for unseen future examples,",
    "start": "415850",
    "end": "422384"
  },
  {
    "text": "um, just completely goes away, right? And even if you start looking at it and you're- you're really trying to optimize it,",
    "start": "422384",
    "end": "428730"
  },
  {
    "text": "um, you can get you know, into this overfitting regime, right? So really be careful of that.",
    "start": "428730",
    "end": "433775"
  },
  {
    "text": "And I want to emphasize that the test set is really a surrogate for what you actually care about. So, um, don't blindly just, you know,",
    "start": "433775",
    "end": "441139"
  },
  {
    "text": "try to make test accuracy numbers go up at all costs, okay?",
    "start": "441140",
    "end": "447330"
  },
  {
    "text": "Okay. So, um, but for now let's assume we have a test set though,",
    "start": "447330",
    "end": "453639"
  },
  {
    "text": "you know, we have to work with. So there- there's this kind of really peculiar thing about machine learning,",
    "start": "453640",
    "end": "460510"
  },
  {
    "text": "which is this leap of faith, right. You- the training algorithm, um, is only operating on a training set.",
    "start": "460510",
    "end": "467470"
  },
  {
    "text": "And then all of a sudden, you go to these unseen examples or the test set and you're expected to do well.",
    "start": "467470",
    "end": "473845"
  },
  {
    "text": "So why is there- why would you expect that, you know, to happen? And as I alluded to on the first day of class,",
    "start": "473845",
    "end": "481150"
  },
  {
    "text": "there is some kind of actually pretty deep mathematical reasons for why this might happen,",
    "start": "481150",
    "end": "486205"
  },
  {
    "text": "um, but, you know, rather go and get into the math, I just kinda wanna give you a maybe intuitive picture of how to think about,",
    "start": "486205",
    "end": "494020"
  },
  {
    "text": "um, this- this gap. Okay. So remember, ah, we had this picture that it's,",
    "start": "494020",
    "end": "500440"
  },
  {
    "text": "ah, of all predictors. So these are all the functions that you could possibly want in your wildest dreams.",
    "start": "500440",
    "end": "506995"
  },
  {
    "text": "Um, and then when you define, um, a feature, ah, extractor or a neural net architecture or any sort of,",
    "start": "506995",
    "end": "515909"
  },
  {
    "text": "um, you know, a- a structure. You're basically saying, \"Hey I'm only",
    "start": "515910",
    "end": "521039"
  },
  {
    "text": "interested in these sets of functions, not all functions.\" Okay. And then learning is, um,",
    "start": "521040",
    "end": "527215"
  },
  {
    "text": "trying to find some element of the- the class of functions that you've,",
    "start": "527215",
    "end": "532495"
  },
  {
    "text": "ah, set out, ah, to find. Okay. So there's a decomposition which is useful.",
    "start": "532495",
    "end": "540490"
  },
  {
    "text": "So let's take out this point G. So G is going to be the best, um, function in this class.",
    "start": "540490",
    "end": "548019"
  },
  {
    "text": "The best predictor that you can possibly get. So if some oracle came and set your neural net weights to something,",
    "start": "548020",
    "end": "555790"
  },
  {
    "text": "how well could you do? Okay. So now there's two gaps here.",
    "start": "555790",
    "end": "560829"
  },
  {
    "start": "560000",
    "end": "687000"
  },
  {
    "text": "One is approximation error. Approximation error is the difference between F star which is the- the true, ah, predictor.",
    "start": "560830",
    "end": "569305"
  },
  {
    "text": "So this is the thing that always gets the right answer and G which is the best thing in your, ah, class.",
    "start": "569305",
    "end": "576820"
  },
  {
    "text": "Okay. So this really measures how good is your hypothesis class. Remember last time we said that, we want hypothesis class to be expressive.",
    "start": "576820",
    "end": "584274"
  },
  {
    "text": "If you only have linear, ah, functions and your data looks, ah,",
    "start": "584275",
    "end": "589495"
  },
  {
    "text": "sinusoidal then that is not expressive enough to capture, um, the data.",
    "start": "589495",
    "end": "596050"
  },
  {
    "text": "Okay. So the second part is estimation error. This is the difference between the best thing in",
    "start": "596050",
    "end": "602005"
  },
  {
    "text": "your hypothesis class and the- the function you actually find. Right. And this measures how good is",
    "start": "602005",
    "end": "608740"
  },
  {
    "text": "a learned predictor kind of relative to the potential of the hypothesis class. You define this hypothesis classes,",
    "start": "608740",
    "end": "615520"
  },
  {
    "text": "um, here are things that I'm willing to, you know, consider but at the end of the day based on a finite amount of data,",
    "start": "615520",
    "end": "621850"
  },
  {
    "text": "you- you can't get to G. You only can kind of estimate, um, you know, some- you do a learning and you get to some F hat.",
    "start": "621850",
    "end": "629935"
  },
  {
    "text": "So, um, in kind of more mathematical terms, if you look at the error of the thing that your learning algorithm actually",
    "start": "629935",
    "end": "639340"
  },
  {
    "text": "returns minus the- the era of the best thing possible which, you know, in many cases is, you know, zero.",
    "start": "639340",
    "end": "646780"
  },
  {
    "text": "Um, then this can be written as follows. So all I'm doing is minus- subtracting error of G and",
    "start": "646780",
    "end": "653755"
  },
  {
    "text": "adding error of G. So this is the same quantity as this, um, but then I can look at these two terms.",
    "start": "653755",
    "end": "660100"
  },
  {
    "text": "So the estimation error is the difference in error between the thing that your learning algorithm produces minus",
    "start": "660100",
    "end": "666250"
  },
  {
    "text": "the best thing in the class G. And then the difference- approximation error is the difference between the error of G and error of F star.",
    "start": "666250",
    "end": "674065"
  },
  {
    "text": "Okay. So this is going to be useful as a way to kind of conceptualize,",
    "start": "674065",
    "end": "680740"
  },
  {
    "text": "um, the different trade-offs. Right. So, you know, just to kind of explore this a little bit. Suppose I increase the hypothesis class size, right,",
    "start": "680740",
    "end": "689380"
  },
  {
    "start": "687000",
    "end": "771000"
  },
  {
    "text": "so I add more features or I, you know, add, ah, increase the dimension of my neural networks.",
    "start": "689380",
    "end": "695860"
  },
  {
    "text": "Um, what- what happens? So the approximation error will go down. And why is that?",
    "start": "695860",
    "end": "704560"
  },
  {
    "text": "Because we're taking a minimum over a larger set. So, um, G is always the minimum possible error",
    "start": "704560",
    "end": "710590"
  },
  {
    "text": "over the set F. And if I make the set larger, I have just more possibilities of driving the error down.",
    "start": "710590",
    "end": "716395"
  },
  {
    "text": "Okay. So the approximation error is gonna go down, um, but the estimation error is going to go up, right?",
    "start": "716395",
    "end": "722515"
  },
  {
    "text": "As I make my hypothesis class more expressive. And that's because it's harder to estimate something more complex.",
    "start": "722515",
    "end": "730735"
  },
  {
    "text": "So I'm leaving it kind of vague right now. There's a mathematical way to formalize this which, um, you can ask me about offline.",
    "start": "730735",
    "end": "738080"
  },
  {
    "text": "Okay. So you can see there's kind of tension here. Right, you really want to make your hypothesis class large so you can, um,",
    "start": "738930",
    "end": "747699"
  },
  {
    "text": "drive down the approximation error but you don't want to make it too large that it becomes impossible to, um, estimate.",
    "start": "747700",
    "end": "754310"
  },
  {
    "text": "Okay. So now we have this kind of abstract frame work. What are some kind of knobs we can tune?",
    "start": "754500",
    "end": "760645"
  },
  {
    "text": "How do we control the size of the hypothesis class? So we're gonna talk about two essentially classes of,",
    "start": "760645",
    "end": "768875"
  },
  {
    "text": "um, types of ways. So strategy one is, um, dimensionality.",
    "start": "768875",
    "end": "775750"
  },
  {
    "start": "771000",
    "end": "814000"
  },
  {
    "text": "So remember for linear classifiers, a predictor is specified by a wave vector.",
    "start": "775750",
    "end": "781030"
  },
  {
    "text": "So this is D numbers, right? And we can change D. We can make D smaller by removing features.",
    "start": "781030",
    "end": "787480"
  },
  {
    "text": "We can make D larger by adding features. And, ah, pictorially you can think about as",
    "start": "787480",
    "end": "794575"
  },
  {
    "text": "reducing D as reducing the dimensionality of your- of your hypothesis class.",
    "start": "794575",
    "end": "800020"
  },
  {
    "text": "So if you are in three dimensions, you have three numbers, three degrees of freedom, you have this kind of a ball and you- if",
    "start": "800020",
    "end": "805720"
  },
  {
    "text": "you re- remove one of the dimensions now you have this, ah, ball or a circle in two dimensions.",
    "start": "805720",
    "end": "812290"
  },
  {
    "text": "Okay. So concretely what this means, is, ah, you can manually add uh, you know,",
    "start": "812290",
    "end": "818200"
  },
  {
    "start": "814000",
    "end": "861000"
  },
  {
    "text": "this is a little bit heuristic. You can add features if they seem to be, you know, helping and remove features if they don't, ah, help.",
    "start": "818200",
    "end": "825595"
  },
  {
    "text": "So you can, um, kind of modulate the dimensionality of your, ah, weight vector.",
    "start": "825595",
    "end": "831595"
  },
  {
    "text": "Or there are also automatic feature selection methods, um, such as boosting or L1 regularization,",
    "start": "831595",
    "end": "838764"
  },
  {
    "text": "um, which are outside the scope of this- this class. Um, to be- if you take a machine learning class you'll learn more about this, um,",
    "start": "838765",
    "end": "845845"
  },
  {
    "text": "this stuff but the main point is that, ah, you can determine by setting the number of features you have.",
    "start": "845845",
    "end": "854830"
  },
  {
    "text": "You can, um, vary the expressive power of your hypothesis.",
    "start": "854830",
    "end": "860090"
  },
  {
    "text": "Okay. So the se- second strategy is, um, looking at the norm,",
    "start": "860490",
    "end": "866875"
  },
  {
    "start": "861000",
    "end": "1461000"
  },
  {
    "text": "or the norm, or the length of a vector. So this one is maybe a little bit less, um, obvious.",
    "start": "866875",
    "end": "874045"
  },
  {
    "text": "Um, so again for linear, ah, predictors, the wave vector is just, ah,",
    "start": "874045",
    "end": "879790"
  },
  {
    "text": "a d-dimensional vector and you look at how long this vector is. So what is - and the length,",
    "start": "879790",
    "end": "886900"
  },
  {
    "text": "um, pictorially it looks like this. So if you have, um, let's say all the weight vectors in,",
    "start": "886900",
    "end": "893889"
  },
  {
    "text": "um, each W can be ex- thought about as a point as well.",
    "start": "893890",
    "end": "899105"
  },
  {
    "text": "So this circle contains all the weight vectors up to a certain length.",
    "start": "899105",
    "end": "905404"
  },
  {
    "text": "And if by making this smaller, now you're considering, you know, a smaller number of weight vectors.",
    "start": "905405",
    "end": "911649"
  },
  {
    "text": "Okay. So at that level it's, um, perhaps intuitive. Um, so what does this actually look like?",
    "start": "911650",
    "end": "917290"
  },
  {
    "text": "Um, so let's suppose we're doing one-dimensional linear regression and here's the board. Um, and we're looking at,",
    "start": "917290",
    "end": "924800"
  },
  {
    "text": "um, x y. Um, so remember what- and in one-dimension, um,",
    "start": "924800",
    "end": "930805"
  },
  {
    "text": "we're- all we're looking at is, um, you know, W is just a single number.",
    "start": "930805",
    "end": "935935"
  },
  {
    "text": "Right? And the number represents the slope of this line. So by saying, um,",
    "start": "935935",
    "end": "941610"
  },
  {
    "text": "you know, let's draw some slopes here. Okay. Um, so by saying that, ah,",
    "start": "941610",
    "end": "948325"
  },
  {
    "text": "the weight vector or the weight is a small magnitude, that's basically saying the slope is,",
    "start": "948325",
    "end": "955900"
  },
  {
    "text": "ah, you know, smaller or closer to 0. So if you think about, um, you know,",
    "start": "955900",
    "end": "962170"
  },
  {
    "text": "slope equals- let's say this is slope equals 1, so W equals 1. So anything- anything let's say, ah,",
    "start": "962170",
    "end": "969069"
  },
  {
    "text": "less than 1 or greater than minus 1 is fair game. And now if you reduce this to half,",
    "start": "969070",
    "end": "975110"
  },
  {
    "text": "now you're looking at a kinda a smaller, um, window here and if you keep on reducing it, now you're basically, um,",
    "start": "975110",
    "end": "981940"
  },
  {
    "text": "converging to, you know, essentially very flat and constant functions. Okay. So you can understand this two ways.",
    "start": "981940",
    "end": "989660"
  },
  {
    "text": "One is just that the total number of, um, possible weight vectors you're considering,",
    "start": "989660",
    "end": "995460"
  },
  {
    "text": "it's just shrinking because you're putting more constraints. They have to be, you know, smaller. From this picture you can also think about it as,",
    "start": "995460",
    "end": "1003279"
  },
  {
    "text": "what you're really doing is, um, making the function, you know, smoother. Right? Because, um, a flat function is kinda the smoothest function.",
    "start": "1003280",
    "end": "1012839"
  },
  {
    "text": "It doesn't kind of, you know, vary too much and, ah, a complicated function is one that can go, you know,",
    "start": "1012840",
    "end": "1018750"
  },
  {
    "text": "very- jump up very steeply and, you know, for quadratic functions can also come down really quickly.",
    "start": "1018750",
    "end": "1025059"
  },
  {
    "text": "So you get a kind of very, ah, wiggly functions. Those are- tend to be more complicated.",
    "start": "1025060",
    "end": "1030709"
  },
  {
    "text": "Okay. Any questions about this so far? Yeah?",
    "start": "1032540",
    "end": "1039630"
  },
  {
    "text": "Um, trying to not overfit. So like what if we had like latent structures within the data set that sensor tra- that",
    "start": "1039630",
    "end": "1049440"
  },
  {
    "text": "says if you try to like not overfit we're really just kind of like this tricking ourselves like a perpendicular set of like distributions that we say, \"Okay.",
    "start": "1049440",
    "end": "1056250"
  },
  {
    "text": "This data must have like come from like something normal, it must have come from something reasonable.\" But saying that we're like not really capturing",
    "start": "1056250",
    "end": "1063270"
  },
  {
    "text": "the full- the full like scope of our data sets. Um, I'm not sure, so let's see.",
    "start": "1063270",
    "end": "1070530"
  },
  {
    "text": "So the- so the question is if there's a particular structure inside your data set, for example,",
    "start": "1070530",
    "end": "1078630"
  },
  {
    "text": "if some, um, things are sparse or low rank or something, um, you know, how do you capture that with a regularization?",
    "start": "1078630",
    "end": "1088600"
  },
  {
    "text": "Regularization. But you have like, perhaps not even just like price spikes like this.",
    "start": "1089300",
    "end": "1094650"
  },
  {
    "text": "Like if you have a causal model inside, inside between your like parameters like how would you like, would a regularization like impede some of those relations?",
    "start": "1094650",
    "end": "1104010"
  },
  {
    "text": "Oh yeah so um, so all of this is kind of very generic, right?",
    "start": "1104010",
    "end": "1111120"
  },
  {
    "text": "You're not making any assumptions about the, the what the classifier is or the features is.",
    "start": "1111120",
    "end": "1118860"
  },
  {
    "text": "So they're kinda like big cameras that you can just apply. So if you have models where you have",
    "start": "1118860",
    "end": "1125700"
  },
  {
    "text": "more structural domain knowledge or if you, um, which we'll see.",
    "start": "1125700",
    "end": "1131414"
  },
  {
    "text": "For example if you have you know, Bayesian networks later in the class then there's much more you can do.",
    "start": "1131415",
    "end": "1139095"
  },
  {
    "text": "And this is just kind of you know, two techniques",
    "start": "1139095",
    "end": "1144240"
  },
  {
    "text": "for as a kind of a generic way of controlling for overfitting.",
    "start": "1144240",
    "end": "1149505"
  },
  {
    "text": "Yeah. Making sure I'm understanding correctly. This approach is actually creating constraints on each element in",
    "start": "1149505",
    "end": "1159360"
  },
  {
    "text": "the vector W that the magnitude of it versus the other one was actually counting elements in a potential vector W?",
    "start": "1159360",
    "end": "1165750"
  },
  {
    "text": "Yeah so um, so let's look at W here. So let's say you're in 3-dimensions.",
    "start": "1165750",
    "end": "1172289"
  },
  {
    "text": "So W is W1, W2, W3. So the first method just says okay let's",
    "start": "1172290",
    "end": "1178350"
  },
  {
    "text": "just kill some of these um, elements and make it smaller. This one is saying that I mean formally,",
    "start": "1178350",
    "end": "1186960"
  },
  {
    "text": "it's looking at the squared values of each of these and looking at the square root, that's what the norm is.",
    "start": "1186960",
    "end": "1196320"
  },
  {
    "text": "So it's saying that each of these should be, you know, small according to this particular metric.",
    "start": "1196320",
    "end": "1206500"
  },
  {
    "text": "Yeah. [NOISE] Yeah so that's what I'm going to get to. So this is just kind of giving you intuition",
    "start": "1208550",
    "end": "1215159"
  },
  {
    "text": "for in terms of hypothesis classes and how you want them to be small. How do you actually implement this?",
    "start": "1215160",
    "end": "1223005"
  },
  {
    "text": "Um, you know there's several ways to do this but the most popular way is to add regularization.",
    "start": "1223005",
    "end": "1228660"
  },
  {
    "text": "And by regularization what I mean is take your original objective function which is train loss of W and you just add this, um, penalty term.",
    "start": "1228660",
    "end": "1238695"
  },
  {
    "text": "So Lambda is called the regularization strength. It's just a positive number let's say- let's say 1.",
    "start": "1238695",
    "end": "1245070"
  },
  {
    "text": "And this is the squared length of W. Okay,",
    "start": "1245070",
    "end": "1251654"
  },
  {
    "text": "so what is this doing is by adding this it's saying that, \"okay optimizer you should really try to make",
    "start": "1251655",
    "end": "1259410"
  },
  {
    "text": "a train loss small but you should also try to make this small as well.\"",
    "start": "1259410",
    "end": "1264310"
  },
  {
    "text": "Okay. And there's uh, if you study convex optimization there's kind of this duality between, um,",
    "start": "1265010",
    "end": "1274050"
  },
  {
    "text": "this- this is called the Lagrangian form where you have a penalize objective where you add a penalty on the weight vector and",
    "start": "1274050",
    "end": "1282840"
  },
  {
    "text": "the constraint form where you just say that I want to minimize training loss with subject to the norm of W being less than some value.",
    "start": "1282840",
    "end": "1292080"
  },
  {
    "text": "But this is more of that kind of a typical one that you're going to see in practice.",
    "start": "1292080",
    "end": "1298125"
  },
  {
    "text": "Okay, so here's objective function. Great. How do I optimize it? Yeah, I think i will use the same W leading into the train",
    "start": "1298125",
    "end": "1311220"
  },
  {
    "text": "Yeah. Okay, so the process of minimizing train loss is further minimized. Yeah so it's important that these be the same W and you're optimizing the sum.",
    "start": "1311220",
    "end": "1319470"
  },
  {
    "text": "So the optimizer is going to make these trade-offs. If it says, \"Oh okay, I can drive the training loss down.",
    "start": "1319470",
    "end": "1326265"
  },
  {
    "text": "But if this is shooting up then that's not good and it'll try to balance these two.\" Yeah, [NOISE] it's basically saying try to fit the data but not at the expense of,",
    "start": "1326265",
    "end": "1340409"
  },
  {
    "text": "uh, having huge weight vectors. [NOISE] Yeah, so if there's another way to say it is that,",
    "start": "1340410",
    "end": "1348810"
  },
  {
    "text": "um, kind of think about Occam's razor. It's saying if there is a simple way to fit your data then you should just do that.",
    "start": "1348810",
    "end": "1355815"
  },
  {
    "text": "Instead of finding some really complicated weight vector that fits your data, so prefer simple solutions. Okay.",
    "start": "1355815",
    "end": "1364800"
  },
  {
    "text": "So once you have this objective you know we have a standard crank we can turn to turn this into an algorithm.",
    "start": "1364800",
    "end": "1371370"
  },
  {
    "text": "You can just do gradient ascent. Um, and the you know if you just take the derivative of this then you have this gradient.",
    "start": "1371370",
    "end": "1379365"
  },
  {
    "text": "And then you also have Lambda W which is the gradient of this term.",
    "start": "1379365",
    "end": "1384960"
  },
  {
    "text": "So you can understand this as basically you're doing gradient descent as we were doing before. Um, and now all you're doing is you're shrinking the weights towards 0 by lambda.",
    "start": "1384960",
    "end": "1395549"
  },
  {
    "text": "So Lambda is a regularization strength. If it's large that means you're trying to really kind of push down on the magnitude of the weights.",
    "start": "1395550",
    "end": "1403050"
  },
  {
    "text": "So the gradient optimizer is basically going to say, hey I'm going to try to step in a direction that makes the training loss small but then",
    "start": "1403050",
    "end": "1410130"
  },
  {
    "text": "I'm going to also push the weights towards 0.",
    "start": "1410130",
    "end": "1415530"
  },
  {
    "text": "Okay. In neural nets literature this is also known as a weight decay.",
    "start": "1415530",
    "end": "1421590"
  },
  {
    "text": "And in optimization and statistics it's known as L2 regularization because this is the Euclidean or 2-norm.",
    "start": "1421590",
    "end": "1430990"
  },
  {
    "text": "Okay so here is another strategy which intuitively gets at the same idea but it's in some sense you know, more crude.",
    "start": "1432830",
    "end": "1443820"
  },
  {
    "text": "So it's called early stopping. And the idea is very simple. You just stop early instead of going and training",
    "start": "1443820",
    "end": "1452640"
  },
  {
    "text": "for 100 iterations you just train for 50. Okay. So why, why does this, why is this a good idea?",
    "start": "1452640",
    "end": "1463424"
  },
  {
    "start": "1461000",
    "end": "1654000"
  },
  {
    "text": "Um, the intuition is that if you start with the weights at 0, so that's the smallest",
    "start": "1463425",
    "end": "1470130"
  },
  {
    "text": "you can make the norm of W, right? So every time you update on a training you know, set,",
    "start": "1470130",
    "end": "1477180"
  },
  {
    "text": "generally the norm goes up, you know there's no guarantee that it will always go up but generally this is what happens.",
    "start": "1477180",
    "end": "1483765"
  },
  {
    "text": "So if you stop early that means you are giving less of an opportunity for the norm to grow, grow.",
    "start": "1483765",
    "end": "1491414"
  },
  {
    "text": "So fewer updates translates to generally a lower norm. You can also make this formal mathematically but the connection is not",
    "start": "1491415",
    "end": "1499740"
  },
  {
    "text": "as tight as the explicit regularization from the previous slide.",
    "start": "1499740",
    "end": "1504700"
  },
  {
    "text": "Okay, so the lesson here is you know try to minimize the training error but don't try you know, too hard.",
    "start": "1505130",
    "end": "1512430"
  },
  {
    "text": "Yeah, question? It depends on how we initialize the weights?",
    "start": "1512430",
    "end": "1517845"
  },
  {
    "text": "Question is, does this depend on how we initialize the weights? Most of the time you're going to initialize the weights from you know,",
    "start": "1517845",
    "end": "1527430"
  },
  {
    "text": "some sort of weights which is kind of a baseline either 0, or for neural nets maybe like",
    "start": "1527430",
    "end": "1534135"
  },
  {
    "text": "random vectors around 0 but they're pretty small weights and usually the weights grow from outside from small to large.",
    "start": "1534135",
    "end": "1542955"
  },
  {
    "text": "There's other cases where if you think about your pre-training, you have a pre-trained model you",
    "start": "1542955",
    "end": "1549840"
  },
  {
    "text": "start with some weights and then you do gradient descent from that. Then you're saying basically don't go too far from your initialization.",
    "start": "1549840",
    "end": "1558774"
  },
  {
    "text": "Yeah. This means that like want to [inaudible] like focus on the train loss",
    "start": "1558775",
    "end": "1570210"
  },
  {
    "text": "[inaudible] ? Right. So the question is why aren't we focusing on minimizing the train loss,",
    "start": "1570210",
    "end": "1576200"
  },
  {
    "text": "or why focus on w? It's always going to be a combination. So the optimizer is still trying to push down",
    "start": "1576200",
    "end": "1582200"
  },
  {
    "text": "on the training loss by taking these gradient updates, right? Notice that the, the gradient with respect to the regularizer actually doesn't come in here.",
    "start": "1582200",
    "end": "1589565"
  },
  {
    "text": "It kind of comes in explicitly through the fact that you are stopping it early.",
    "start": "1589565",
    "end": "1595200"
  },
  {
    "text": "But it's always kind of a balance between, uh, minimizing the training loss and also making sure your, um,",
    "start": "1595540",
    "end": "1602600"
  },
  {
    "text": "class- classifier weights doe- doesn't get too complicated. Yeah.",
    "start": "1602600",
    "end": "1608789"
  },
  {
    "text": "How do you decide what value of lambda of T to set as? Yeah. So the question is how you decide the value of T here,",
    "start": "1609220",
    "end": "1616910"
  },
  {
    "text": "and how you decide the value of lambda? [NOISE] So these are called hyperparameters, and I'll talk a little bit more about that later.",
    "start": "1616910",
    "end": "1623309"
  },
  {
    "text": "Okay. So here's the kind of the general philosophy, uh, that you should have in machine learning.",
    "start": "1625720",
    "end": "1631760"
  },
  {
    "text": "So you should try to minimize the training error, because really, that's the only thing you can do. That's your data, and that's,",
    "start": "1631760",
    "end": "1638830"
  },
  {
    "text": "you know, you have your data there, but you should try to do so in a way that keeps your hypothesis small.",
    "start": "1638830",
    "end": "1645115"
  },
  {
    "text": "So try to minimize the training set error, but don't try too hard. I guess it's the, it's the lesson here.",
    "start": "1645115",
    "end": "1653060"
  },
  {
    "text": "Okay. So now, going back to the question earlier.",
    "start": "1653060",
    "end": "1658310"
  },
  {
    "start": "1654000",
    "end": "1822000"
  },
  {
    "text": "If you notice through all these, um, my presentation, there's, there's all sorts of properties of the learning algorithm, you know,",
    "start": "1658310",
    "end": "1666470"
  },
  {
    "text": "which features you have, which regularization parameter you have, the number of iterations, the step size for gradient descent.",
    "start": "1666470",
    "end": "1674509"
  },
  {
    "text": "Um, these are all considered hyperparameters. So, so far, they're just magical values that are given to the learning algorithm,",
    "start": "1674510",
    "end": "1682190"
  },
  {
    "text": "and the learning algorithm runs with them. But someone has to set them, and how do you set them?",
    "start": "1682190",
    "end": "1687620"
  },
  {
    "text": "[inaudible]? Yeah. You can ask me, uh, I don't know the answer to that.",
    "start": "1687620",
    "end": "1693650"
  },
  {
    "text": "[LAUGHTER] Um, okay. So here- here's an idea. So let's choose hyperparameters to minimize the training error.",
    "start": "1693650",
    "end": "1701255"
  },
  {
    "text": "So how many of you think that's a good idea? Okay. Not too many.",
    "start": "1701255",
    "end": "1707270"
  },
  {
    "text": "So why is this a bad idea? Yeah. You can over-fit, right?",
    "start": "1707270",
    "end": "1712595"
  },
  {
    "text": "So suppose you took, uh, lambda and you say, \"Hey, um, you know,",
    "start": "1712595",
    "end": "1718775"
  },
  {
    "text": "let's choose the lambda that will minimize the training error.\" Okay. And the, the learning algorithm says \"Well,",
    "start": "1718775",
    "end": "1726769"
  },
  {
    "text": "okay, you know, I wanted to make this stat go down. What is this doing in the way? Let's just set lambda to 0,",
    "start": "1726770",
    "end": "1732830"
  },
  {
    "text": "and then I don't have to worry about this.\" So it's kind of, um, you know, cheating in a way.",
    "start": "1732830",
    "end": "1739115"
  },
  {
    "text": "And also, early stopping would say like, don't stop, just keep on going because you're always going",
    "start": "1739115",
    "end": "1744710"
  },
  {
    "text": "to drive the training error lower and lower. Okay. So that's not good. So how about, um,",
    "start": "1744710",
    "end": "1750470"
  },
  {
    "text": "choosing hyperparameters to minimize the test error? How many of you say, \"Yeah, it's a good idea\"?",
    "start": "1750470",
    "end": "1757309"
  },
  {
    "text": "Yeah. Not, not so good, it turns out. Um, so why?",
    "start": "1757310",
    "end": "1763520"
  },
  {
    "text": "And this is again stressing the point that the test error is not the thing you care about.",
    "start": "1763520",
    "end": "1769940"
  },
  {
    "text": "Because what happens when you look at that- uh, we, we try to use a test set,",
    "start": "1769940",
    "end": "1775909"
  },
  {
    "text": "then it becomes an unreliable estimate of the actual unseen error. Because if you're tuning hyperparameters on the test set, that means that,",
    "start": "1775910",
    "end": "1785434"
  },
  {
    "text": "um, it's no longer- it becomes less and less unseen and less future. Yeah.",
    "start": "1785435",
    "end": "1790580"
  },
  {
    "text": "[inaudible].",
    "start": "1790580",
    "end": "1796850"
  },
  {
    "text": "Yeah. So we could do cross-validation which I'll describe in a second.",
    "start": "1796850",
    "end": "1800850"
  },
  {
    "text": "Okay? So I want to emphasize this point. When you're doing your final project, you have your test set,",
    "start": "1802090",
    "end": "1808610"
  },
  {
    "text": "you have it sitting there, and, uh, you should not be, you know, fiddling with it too much or else,",
    "start": "1808610",
    "end": "1815150"
  },
  {
    "text": "um, it becomes less reliable. Okay. So you can't use the test set, so what do you do?",
    "start": "1815150",
    "end": "1823174"
  },
  {
    "start": "1822000",
    "end": "2178000"
  },
  {
    "text": "So here's the idea behind, uh, a validation set, it's that you take your training set,",
    "start": "1823175",
    "end": "1828409"
  },
  {
    "text": "and you sacrifice some amount of it, maybe it's, you know, 10% maybe 20%,",
    "start": "1828410",
    "end": "1833935"
  },
  {
    "text": "and you use it to estimate the test error. So this is a validation set, right?",
    "start": "1833935",
    "end": "1840010"
  },
  {
    "text": "The test set is, you know, off to the side, it's locked in a safe, uh, you're not gonna touch it.",
    "start": "1840010",
    "end": "1847610"
  },
  {
    "text": "And then, um, you're just gonna tune hyperparameters on the validation set,",
    "start": "1847610",
    "end": "1854179"
  },
  {
    "text": "and use that to guide your model development.",
    "start": "1854180",
    "end": "1859310"
  },
  {
    "text": "So, the, um, the proportion itself is not a hyperparameter?",
    "start": "1859310",
    "end": "1864365"
  },
  {
    "text": "The proportion itself, uh, [LAUGHTER] is a hyper, hyperparameter.",
    "start": "1864365",
    "end": "1869585"
  },
  {
    "text": "You know, I- us- yeah, you know, I usually don't tune that. I mean, usually, it's- how you choose it is, um,",
    "start": "1869585",
    "end": "1877535"
  },
  {
    "text": "kind of this balance between you want the validation set to be large enough so it gives you reliable estimates, but you also want to use most of your data for training. Yeah.",
    "start": "1877535",
    "end": "1887300"
  },
  {
    "text": "How do you choose like lambda and like the other like T? How do we choose those hyperparameters?",
    "start": "1887300",
    "end": "1893840"
  },
  {
    "text": "Yeah. So how do you choose the hyperparameters? Um, so the, the answer is you try a particular value,",
    "start": "1893840",
    "end": "1902389"
  },
  {
    "text": "so, so you- for example, try let's say lambda equals, um, 0.01 and 0.11, and then",
    "start": "1902390",
    "end": "1909455"
  },
  {
    "text": "you run your algorithm and then you look at your validation error, and then you just choose the one that has the lowest.",
    "start": "1909455",
    "end": "1916220"
  },
  {
    "text": "Yeah. It's pretty crude but [NOISE] yeah. [inaudible] and I got a hyperparameter without just doing like a,",
    "start": "1916220",
    "end": "1925940"
  },
  {
    "text": "like a, like a search, like try this one then try this one, then try this one. Yeah. So how- is there a better way to search for hyperparameters?",
    "start": "1925940",
    "end": "1934370"
  },
  {
    "text": "Um, you could do, uh, your, er, grid search generally is fine, random sampling is fine.",
    "start": "1934370",
    "end": "1940505"
  },
  {
    "text": "There's fancier things based on Bayesian Optimization which might give you some benefits but it's actually the jury's out on that and they're more complicated.",
    "start": "1940505",
    "end": "1950600"
  },
  {
    "text": "Um, there's also you can use better, um, learning algorithms which are less sensitive to the step size.",
    "start": "1950600",
    "end": "1956360"
  },
  {
    "text": "So you don't have to nail it like, \"Oh, 0.1 works but 0.11 doesn't.\" So you don't- you don't want that.",
    "start": "1956360",
    "end": "1963710"
  },
  {
    "text": "But in all of the high-level answer is that there's no, um, real kind of principled way of like here's a formula",
    "start": "1963710",
    "end": "1971420"
  },
  {
    "text": "that lambda equals and you just evaluate that formula, and you're done, um, because there's this is,",
    "start": "1971420",
    "end": "1977795"
  },
  {
    "text": "you know, the kind of the- uh, I don't know, the dirty side of machine learning, there's always this tuning that needs to happen to get your,",
    "start": "1977795",
    "end": "1985355"
  },
  {
    "text": "you know, good results. Um, yeah. Question over there. [inaudible] is this process usually automated or is this manual?",
    "start": "1985355",
    "end": "1997130"
  },
  {
    "text": "So the question is, uh, is this process automated? Increasingly, it becomes much more automated.",
    "start": "1997130",
    "end": "2002335"
  },
  {
    "text": "So, um, it requires a fair amount of compute, right? Because usually, if you have a large data-set,",
    "start": "2002335",
    "end": "2007480"
  },
  {
    "text": "even training one model might take a little while. And now, you're talking about, you know, training let's say 100 models.",
    "start": "2007480",
    "end": "2014065"
  },
  {
    "text": "So it can be very expensive and there's things that you can do to make it, uh, faster.",
    "start": "2014065",
    "end": "2019134"
  },
  {
    "text": "But I mean, in general, I would advise that don't hyperparameter tune kind of blindly,",
    "start": "2019135",
    "end": "2025270"
  },
  {
    "text": "especially when you're kind of learning the ropes. I think doing it kind of manually and getting intuition for what, uh,",
    "start": "2025270",
    "end": "2031900"
  },
  {
    "text": "step size, um, like factor of step size algorithm is still valuable to have.",
    "start": "2031900",
    "end": "2039115"
  },
  {
    "text": "And then once you kind of get a hang of it, then maybe you can automate. But I wouldn't try to automate too, you know, early. Yeah?",
    "start": "2039115",
    "end": "2045895"
  },
  {
    "text": "Small changes of hyperparameters need to vary big changes in prediction accuracy,",
    "start": "2045895",
    "end": "2052825"
  },
  {
    "text": "is that considered [inaudible]?",
    "start": "2052825",
    "end": "2058750"
  },
  {
    "text": "Yeah. So your question is, if you change the hyperparameters a little bit and that causes your, um, training or, or model performance to change quite a bit,",
    "start": "2058750",
    "end": "2068020"
  },
  {
    "text": "does that mean your model's not robust? Uh, yeah, it means your model is probably not as robust. And sometimes, you actually don't choose a hy- hyperparameter set at all,",
    "start": "2068020",
    "end": "2076554"
  },
  {
    "text": "and you still get varying, you know, model performances. Um, so, you know, you should always check that first because there could be just inherent randomness,",
    "start": "2076555",
    "end": "2085690"
  },
  {
    "text": "especially if you're doing neural networks that could get stuck in local optimum, there's all sorts of, um, you know, things that can happen.",
    "start": "2085690",
    "end": "2092710"
  },
  {
    "text": "Okay. Final question now so we can move on. So we found out that the optimal hyperparameter, is it [inaudible]?",
    "start": "2092710",
    "end": "2101580"
  },
  {
    "text": "Uh, so how do you choose, uh, an optimal hyperparameter?",
    "start": "2101580",
    "end": "2108325"
  },
  {
    "text": "So you basically have like a for loop that says for lambda in,",
    "start": "2108325",
    "end": "2114384"
  },
  {
    "text": "you known, 0.1, 0.011, whatever values for t equals, uh, you know, something.",
    "start": "2114384",
    "end": "2122190"
  },
  {
    "text": "Um, you train on this- all these training examples with manual validation,",
    "start": "2122190",
    "end": "2128835"
  },
  {
    "text": "and then you test the model on the validation, you get a number, and you just use, uh,",
    "start": "2128835",
    "end": "2134515"
  },
  {
    "text": "whichever setting gives you the lowest number. [inaudible]?",
    "start": "2134515",
    "end": "2140380"
  },
  {
    "text": "I'm sorry? We- we do have know the numbers it's not like the uh, [inaudible]?",
    "start": "2140380",
    "end": "2149585"
  },
  {
    "text": "Yeah. Usually, you just have to be in the ballpark. You don't have to get like 99 versus 100.",
    "start": "2149585",
    "end": "2154955"
  },
  {
    "text": "The, the things I would just advise is like you know, let's say what kind of orders of magnitude.",
    "start": "2154955",
    "end": "2160640"
  },
  {
    "text": "Because if it- if it really matters like being down to a precise number, then, um, you probably have other worry- things to worry about.",
    "start": "2160640",
    "end": "2169640"
  },
  {
    "text": "Okay. Let's move on. So what I'm gonna do now is go through a kind of a sample, uh, problem, right?",
    "start": "2169640",
    "end": "2176570"
  },
  {
    "text": "Because I think the, the theory of machine learning and the practice of it, are actually kind of quite different in",
    "start": "2176570",
    "end": "2181760"
  },
  {
    "start": "2178000",
    "end": "3308000"
  },
  {
    "text": "terms of the types of things that you have to think about. Um, so here's a simplify named entity recognition problem.",
    "start": "2181760",
    "end": "2187220"
  },
  {
    "text": "So named entity is this, uh, recognition is this popular task in NLP where you're trying to find names of,",
    "start": "2187220",
    "end": "2193954"
  },
  {
    "text": "uh, people and locations and, um, organizations. So the input is a string,",
    "start": "2193955",
    "end": "2199655"
  },
  {
    "text": "um, where, which has, you know, a particular, potentially named with,",
    "start": "2199655",
    "end": "2205640"
  },
  {
    "text": "uh, the left and right context words. Okay. And the, the goal is to predict whether, um,",
    "start": "2205640",
    "end": "2211910"
  },
  {
    "text": "this x contains, you know, if they're a person, um, which is plus 1 or not.",
    "start": "2211910",
    "end": "2217295"
  },
  {
    "text": "Okay. So, so here's the, the recipe for success.",
    "start": "2217295",
    "end": "2222650"
  },
  {
    "text": "Um, when you're doing your fin- final project or something, um, you get a data set, um,",
    "start": "2222650",
    "end": "2227750"
  },
  {
    "text": "it have- if it hasn't been already split, split it into train, validation, and test,",
    "start": "2227750",
    "end": "2233990"
  },
  {
    "text": "and lock the test set away. And then, first, I would try to look at the data to get some,",
    "start": "2233990",
    "end": "2239360"
  },
  {
    "text": "you know, intuition, you know. Al- always remember, you want to make sure that you understand your, your data.",
    "start": "2239360",
    "end": "2246920"
  },
  {
    "text": "Don't just immediately start coding up the most fancy algorithm you can think of. Um, and then you repeat.",
    "start": "2246920",
    "end": "2253280"
  },
  {
    "text": "You implement some, you know, feature, maybe change the architecture of your network,",
    "start": "2253280",
    "end": "2258470"
  },
  {
    "text": "um, and then you tune some, you, you set some hyperparameters and you run the learning algorithm,",
    "start": "2258470",
    "end": "2264619"
  },
  {
    "text": "and then you look at, uh, the, the training error and validation error rates,",
    "start": "2264620",
    "end": "2270950"
  },
  {
    "text": "um, to see, you know, how they're doing, if you're underfitting or overfitting. Um, in some cases,",
    "start": "2270950",
    "end": "2276589"
  },
  {
    "text": "you can look at the weights for linear classifiers, um, in, for neural nets it might be a little bit harder.",
    "start": "2276590",
    "end": "2281885"
  },
  {
    "text": "And then you- I will recommend look at the predictions of your model. I always have- I always try to log as much information as I have.",
    "start": "2281885",
    "end": "2289575"
  },
  {
    "text": "You can, so that you can go back and understand what the model is, you know, trying to do. And then you brainstorm some improvements,",
    "start": "2289575",
    "end": "2295954"
  },
  {
    "text": "and you kind of do this until, uh, you either, are happy or you run out of time, and then you run it on that final test set and you get",
    "start": "2295955",
    "end": "2303500"
  },
  {
    "text": "your final error rates which you put in your, uh, report. Okay? So let's go through an example of what this might, uh, look like.",
    "start": "2303500",
    "end": "2311869"
  },
  {
    "text": "Um, so this is going to be based on the code base for the sentiment homework.",
    "start": "2311870",
    "end": "2317570"
  },
  {
    "text": "Um, so, okay, so here's where we're starting.",
    "start": "2317570",
    "end": "2323915"
  },
  {
    "text": "We're reading, uh, a training set. Let's look at this training set. So there are, you know, 7,000 lines here.",
    "start": "2323915",
    "end": "2330980"
  },
  {
    "text": "Each line contains the label which is minus 1 or plus 1, along with the input,",
    "start": "2330980",
    "end": "2336350"
  },
  {
    "text": "which is going to be, uh, you know, remember, the left context, the actual entity and the, the right context.",
    "start": "2336350",
    "end": "2346760"
  },
  {
    "text": "Okay? All right. So you also have a development or validation set. Um, and what this code does is,",
    "start": "2346760",
    "end": "2353839"
  },
  {
    "text": "eh, it's gonna learn a predictor, which, uh, takes the training set and a feature extractor which we're gonna fill out.",
    "start": "2353840",
    "end": "2361310"
  },
  {
    "text": "Um, and then it's gonna output either, uh, both the, the weights and, um, some error analysis which you can look- use to look at the predictions.",
    "start": "2361310",
    "end": "2368734"
  },
  {
    "text": "And finally, there's this test which I'm gonna not do for now. Okay. So, um, so the first thing is,",
    "start": "2368735",
    "end": "2378380"
  },
  {
    "text": "uh, let's define this feature extractor. So this feature extractor is,",
    "start": "2378380",
    "end": "2384440"
  },
  {
    "text": "uh, Phi of x. And we're gonna use the sparse, uh, you know, map representation of, of features.",
    "start": "2384440",
    "end": "2392270"
  },
  {
    "text": "So Phi, Phi is, um, there's this really nice community structure called defaultdict.",
    "start": "2392270",
    "end": "2399365"
  },
  {
    "text": "So this is kind of like saying, you have, uh, you know, uh, you know, a map,",
    "start": "2399365",
    "end": "2404540"
  },
  {
    "text": "but, um, you can't, you know, access it. And if the element is in there, then you return zero.",
    "start": "2404540",
    "end": "2410645"
  },
  {
    "text": "Um, okay. So Phi equals that, and then you return Phi. Okay. So this is the,",
    "start": "2410645",
    "end": "2415715"
  },
  {
    "text": "the simplest feature vector you can come up with. Um, the dimensionality is zero because you have no features.x",
    "start": "2415715",
    "end": "2422620"
  },
  {
    "text": "Okay. So- but, you know, we can run this and see how we do on this.",
    "start": "2422620",
    "end": "2428510"
  },
  {
    "text": "Okay. So let's run this. Um, okay.",
    "start": "2428670",
    "end": "2435230"
  },
  {
    "text": "So over a number of iterations, um, you can see that learning isn't doing anything because there's no way it's still updating.",
    "start": "2435230",
    "end": "2440645"
  },
  {
    "text": "Okay. So- but, you know, it doesn't crash, uh, which is good. Um, okay. So I'm getting 72%, uh,",
    "start": "2440645",
    "end": "2447350"
  },
  {
    "text": "error, which is, you know, pretty bad but I haven't really done anything. So, um, that's to be expected.",
    "start": "2447350",
    "end": "2453694"
  },
  {
    "text": "Okay. Where did my window go? Okay. So now, let's, um, start defining some, you know, features.",
    "start": "2453695",
    "end": "2460460"
  },
  {
    "text": "Okay. So remember, what is x? X is something like, uh,",
    "start": "2460460",
    "end": "2465500"
  },
  {
    "text": "um, took Mauritius into, right? So there's this entity on left and right.",
    "start": "2465500",
    "end": "2471190"
  },
  {
    "text": "So let's break this up. So I'm going to, tokens equals x.split.",
    "start": "2471190",
    "end": "2477430"
  },
  {
    "text": "So that's gonna give me a bunch of tokens, and then I'm going to define left entity, right equals.",
    "start": "2477430",
    "end": "2484000"
  },
  {
    "text": "So this is the- token zero is the left, that's gonna be took. Um, tokens 1 through minus 1 is gonna be everything until the last token,",
    "start": "2484000",
    "end": "2492200"
  },
  {
    "text": "and then tokens minus 1 is the last one. Okay. So now, I can define,",
    "start": "2492200",
    "end": "2498049"
  },
  {
    "text": "um, a feature template. So remember, a good- nice way to go about it is to define a feature template. So I can just say entity is, um, ent- blank.",
    "start": "2498049",
    "end": "2507530"
  },
  {
    "text": "Um, that's how I would've write- written it as a feature template. In code, um, this is actually pretty, you know, transparent.",
    "start": "2507530",
    "end": "2515585"
  },
  {
    "text": "It's saying, I'm defining a feature which is going to be one, um, for this, uh, you know, feature template.",
    "start": "2515585",
    "end": "2523220"
  },
  {
    "text": "So entity is gonna be some value, I plug it in, I get a, a particular feature value or feat- feature name.",
    "start": "2523220",
    "end": "2529625"
  },
  {
    "text": "And I'm gonna set that feature name to be- have a feature value of 1. Okay. So let's, uh, run this.",
    "start": "2529625",
    "end": "2538100"
  },
  {
    "text": "Okay, so, um, let's go over here, run it.",
    "start": "2538100",
    "end": "2543920"
  },
  {
    "text": "Uh, oops. Um, so entity is, uh, a, a list. So I'm going just gonna turn it into a string.",
    "start": "2543920",
    "end": "2549860"
  },
  {
    "text": "[NOISE] Okay. So now, I'm getting, uh, what happened?",
    "start": "2549860",
    "end": "2558740"
  },
  {
    "text": "So the, um, the training error is, uh, pretty low, right?",
    "start": "2558740",
    "end": "2564290"
  },
  {
    "text": "I'm basically fitting the training error pretty, uh, for training set pretty well.",
    "start": "2564290",
    "end": "2569300"
  },
  {
    "text": "But, you know, noticed, I, I don't, we don't- I don't care about the training, so I care about the, uh, tester.",
    "start": "2569300",
    "end": "2574700"
  },
  {
    "text": "So just one note, it says test here but it's really the, the validation, um, should probably change that.",
    "start": "2574700",
    "end": "2581825"
  },
  {
    "text": "Um, it's just what- whatever non training set you passed in. Okay. So this is still a 20% error which is not great.",
    "start": "2581825",
    "end": "2589025"
  },
  {
    "text": "Okay so, uh, at this point, remember, I wanna go back and look at, um,",
    "start": "2589025",
    "end": "2594065"
  },
  {
    "text": "some, you know, get some intuition for what's going on here. So let's look at the weights.",
    "start": "2594065",
    "end": "2599240"
  },
  {
    "text": "Okay. So this is the weight vector that's learned. So for this weight, er, uh,",
    "start": "2599240",
    "end": "2606140"
  },
  {
    "text": "feature, the weight is 1, and all of these are 1. And this, you know,",
    "start": "2606140",
    "end": "2612125"
  },
  {
    "text": "corresponds to the names that, um, the people names that have been seen at training time.",
    "start": "2612125",
    "end": "2618185"
  },
  {
    "text": "Because whenever I see a person name then I'm going to, um, you know, give that feature a 1,",
    "start": "2618185",
    "end": "2623690"
  },
  {
    "text": "so I can get that training example right. And if you look at the bottom, these are the entities which,",
    "start": "2623690",
    "end": "2628819"
  },
  {
    "text": "uh, are not people names. Okay. So this is a sanity check that it's doing what it's,",
    "start": "2628820",
    "end": "2634520"
  },
  {
    "text": "um, you know, supposed to do. Um, so the nice thing about with these kind of really interpretable features of that,",
    "start": "2634520",
    "end": "2642440"
  },
  {
    "text": "you can kind of almost compute the- what the weight should be in your- in your head, yeah.",
    "start": "2642440",
    "end": "2648170"
  },
  {
    "text": "[inaudible] one feature for every, almost every example that you learn?",
    "start": "2648170",
    "end": "2653600"
  },
  {
    "text": "Yeah. Okay. Yeah. Yeah. So I have one- essentially, one feature for every entity,",
    "start": "2653600",
    "end": "2659150"
  },
  {
    "text": "which has almost, you know, number [OVERLAPPING]. Most of them are unique. Yeah. So there's 3,900 features here.",
    "start": "2659150",
    "end": "2665840"
  },
  {
    "text": "[inaudible] [NOISE]. Uh, so we're gonna change that. But, um, we- we'll get. We're not done yet.",
    "start": "2665840",
    "end": "2673595"
  },
  {
    "text": "Okay so, okay, so the other thing we wanna look at is, um, the error analysis.",
    "start": "2673595",
    "end": "2679204"
  },
  {
    "text": "Okay. So this shows you- here is an example, Eduardo Romero. Um, the ground truth is positive but we predicted minus 1.",
    "start": "2679205",
    "end": "2688145"
  },
  {
    "text": "And why do we predict minus 1? It's because this feature, uh, has weight 0.",
    "start": "2688145",
    "end": "2694234"
  },
  {
    "text": "And why does it have weight 0? Because we never saw this name at training time. Okay? Um, we did get some right,",
    "start": "2694235",
    "end": "2700805"
  },
  {
    "text": "we saw Senate at training time and we just rightly, uh, predicted that was minus 1. Okay. But, you know,",
    "start": "2700805",
    "end": "2707585"
  },
  {
    "text": "you look at these errors and you say, \"Okay. Well, you know, this is, um, maybe the- we should add more features.\"",
    "start": "2707585",
    "end": "2717515"
  },
  {
    "text": "Okay? So if you look- remember, this, um, you know, example here.",
    "start": "2717515",
    "end": "2722720"
  },
  {
    "text": "Maybe the context helps, right? Because if you have governor, blank, then you probably know it's a person because only people can,",
    "start": "2722720",
    "end": "2730640"
  },
  {
    "text": "you know, be governors. Uh, so let's add a feature.",
    "start": "2730640",
    "end": "2736070"
  },
  {
    "text": "So I'm gonna add a feature which is, uh, left is left. [NOISE] And for symmetry,",
    "start": "2736070",
    "end": "2742039"
  },
  {
    "text": "I'll just add right is right. Okay. So this, eh, defines some indicator features on, you know, the context.",
    "start": "2742040",
    "end": "2749090"
  },
  {
    "text": "So in this case, it will be took him into. [NOISE] Okay. So now, I have three feature templates.",
    "start": "2749090",
    "end": "2755005"
  },
  {
    "text": "Let's go and train this model. Um, and now I'm down to just,",
    "start": "2755005",
    "end": "2760150"
  },
  {
    "text": "uh, 11% error. Okay. So I'm making some progress.",
    "start": "2760150",
    "end": "2764930"
  },
  {
    "text": "Um, oops, um, let's look at the error analysis.",
    "start": "2765480",
    "end": "2771320"
  },
  {
    "text": "Okay? So now, I'm getting this correct. Um, and let's look at what else am I getting it wrong.",
    "start": "2771320",
    "end": "2778460"
  },
  {
    "text": "So Simitis blamed, um, you know, Felix Mantilla.",
    "start": "2778460",
    "end": "2784400"
  },
  {
    "text": "And, you know, again, it hasn't seen, um, this exact, uh, actually, maybe it, uh,",
    "start": "2784400",
    "end": "2790220"
  },
  {
    "text": "did see this string before, but it still got it wrong. Um, uh, you know, I think there's kind of a general intuition though that,",
    "start": "2790220",
    "end": "2800865"
  },
  {
    "text": "well, if you have, you know, Felix, um, you know,",
    "start": "2800865",
    "end": "2806115"
  },
  {
    "text": "even if it- you've never seen Felix Mantilla. If you see Felix something, you know, chances are it probably is a person, um,",
    "start": "2806115",
    "end": "2813240"
  },
  {
    "text": "not always but, ah, as- as we noted before features are not meant to be like deterministic rules.",
    "start": "2813240",
    "end": "2818670"
  },
  {
    "text": "They're just pieces of information which are useful. So let's go over here and we want to define let's say a feature for every,",
    "start": "2818670",
    "end": "2827730"
  },
  {
    "text": "ah, possible word that's in- in entity. So word and entity.",
    "start": "2827730",
    "end": "2833370"
  },
  {
    "text": "Remember, entity is a list of tokens which occur between left and right. And I'm gonna say entity contains a word.",
    "start": "2833370",
    "end": "2842680"
  },
  {
    "text": "Okay? So now let's run this",
    "start": "2843770",
    "end": "2849480"
  },
  {
    "text": "again and now I'm down to 6% error which is, you know, a lot better.",
    "start": "2849480",
    "end": "2855359"
  },
  {
    "text": "Um, if you look at the error analysis,",
    "start": "2855360",
    "end": "2860605"
  },
  {
    "text": "um, so I think the F- maybe the Felix example and now I get this right.",
    "start": "2860605",
    "end": "2869480"
  },
  {
    "text": "Um, and, you know, what else- what else can I do? Um, so you know what I'm- kind of this general strategy here I'm, ah,",
    "start": "2869480",
    "end": "2884760"
  },
  {
    "text": "following here is, um, you know, which is not always the- necessarily the right one but you start with kind of very,",
    "start": "2884760",
    "end": "2893130"
  },
  {
    "text": "uh, very specific features and then you try to kind of generalize, you know, as you go.",
    "start": "2893130",
    "end": "2898980"
  },
  {
    "text": "Um, so how can I generalize this more, right? So if you look at,",
    "start": "2898980",
    "end": "2905040"
  },
  {
    "text": "um, worker, so Kurdistan, right? If your word ends in stan, um,",
    "start": "2905040",
    "end": "2912779"
  },
  {
    "text": "or then- I mean may- maybe it's, ah, less likely to be a person.",
    "start": "2912780",
    "end": "2918555"
  },
  {
    "text": "I actually don't know but, you know, maybe like suffixes and prefixes, um, you know, are helpful too.",
    "start": "2918555",
    "end": "2925035"
  },
  {
    "text": "So, um, I'm going to add features. Let's say entity contains prefix and then I'm going to let's say just, you know,",
    "start": "2925035",
    "end": "2933960"
  },
  {
    "text": "heuristically look at the first four tokens, um, and suffix the last four tokens.",
    "start": "2933960",
    "end": "2943290"
  },
  {
    "text": "Um, and then run this again and now I'm down to,",
    "start": "2943290",
    "end": "2950205"
  },
  {
    "text": "you know, 4% error. Um, okay. I'm probably gonna,",
    "start": "2950205",
    "end": "2956085"
  },
  {
    "text": "you know, stop right now. Um, at this point, you can, um,",
    "start": "2956085",
    "end": "2961740"
  },
  {
    "text": "actually run it on your test set and we get, um, you know, 4% error as well. Yeah.",
    "start": "2961740",
    "end": "2971010"
  },
  {
    "text": "[BACKGROUND] Oh, yeah. I guess, um, this was, um,",
    "start": "2971010",
    "end": "2978195"
  },
  {
    "text": "all planned out so that the test error would go down. But actually more often than not,",
    "start": "2978195",
    "end": "2984420"
  },
  {
    "text": "you'll add a feature that you really, really think should help. But it doesn't help for whatever reason, so.",
    "start": "2984420",
    "end": "2990660"
  },
  {
    "text": "[inaudible] cause of that certainly not get worse. We agree that the cause of due date, sorry, not get [inaudible] with whatever cause, would it get worse?",
    "start": "2990660",
    "end": "2999135"
  },
  {
    "text": "Yeah. You- you s- yeah, some of the time, you- yeah, it doesn't move.",
    "start": "2999135",
    "end": "3005345"
  },
  {
    "text": "Uh, that's kind of probably the more of the time but sometimes it can go up, if you add a really, you know,",
    "start": "3005345",
    "end": "3010700"
  },
  {
    "text": "bad feature or something. [inaudible] don't consider this at all, you know, it says here.",
    "start": "3010700",
    "end": "3016850"
  },
  {
    "text": "So the more features you add generally the training error will go down, right? So all the algorithm knows is like it's driving training error down,",
    "start": "3016850",
    "end": "3023480"
  },
  {
    "text": "so it doesn't know that. It doesn't, you know, generalize. Yeah. Okay. So this is definitely the happy path.",
    "start": "3023480",
    "end": "3030994"
  },
  {
    "text": "I think when you go and actually do machine learning, it's going to be more often than not,",
    "start": "3030995",
    "end": "3036590"
  },
  {
    "text": "ah, the test error will not go down. So don't get too frustrated. Um, just keep on trying. Yeah.",
    "start": "3036590",
    "end": "3044105"
  },
  {
    "text": "Are we expected to keep optimizing after like 5% error? [NOISE] Um, are you expected to optimize after 5% error?",
    "start": "3044105",
    "end": "3052580"
  },
  {
    "text": "Um, it's- it really depends, um, um, you know,",
    "start": "3052580",
    "end": "3059525"
  },
  {
    "text": "there's kind of a limit to every data set. So data sets have noise. So sometimes, you- you shouldn't definitely not optimize below the noise, ah, limit.",
    "start": "3059525",
    "end": "3068750"
  },
  {
    "text": "So one thing that you might imagine is, for example, um, you have an oracle which,",
    "start": "3068750",
    "end": "3074255"
  },
  {
    "text": "um, let's say it's, uh, human agreement. Like if your data set is annotated by humans and if humans can't even agree like 3% of the time,",
    "start": "3074255",
    "end": "3081155"
  },
  {
    "text": "then you can't really do better than 3% of the time, as a general rule. There are exceptions, but- okay. Any other questions? Yeah.",
    "start": "3081155",
    "end": "3092694"
  },
  {
    "text": "Uh, kind of like through all your training, you're happy and then you- you see the kinds of errors, um,",
    "start": "3092695",
    "end": "3100040"
  },
  {
    "text": "hence in fair view applications, say in the advent you try and test that and you find it's not good,",
    "start": "3100040",
    "end": "3105335"
  },
  {
    "text": "um, what do you do? Oh, yeah. What happens if you accidentally, ah, if you train on the test that and it's not good.",
    "start": "3105335",
    "end": "3111815"
  },
  {
    "text": "Um, that's you- to say that it's not good [LAUGHTER] in some level.",
    "start": "3111815",
    "end": "3119845"
  },
  {
    "text": "So there's many things that could happen. One is that your test set might actually be different for whatever reason.",
    "start": "3119845",
    "end": "3126475"
  },
  {
    "text": "Maybe it was collected in a different day and, um, your performance just doesn't hold up on that test set.",
    "start": "3126475",
    "end": "3133350"
  },
  {
    "text": "Um, in that case, well, that's your test error, right? Remember, the test error is just- if you didn't look at it,",
    "start": "3133350",
    "end": "3139670"
  },
  {
    "text": "it's really a honest representation of how good this model is. And if it's not good,",
    "start": "3139670",
    "end": "3145130"
  },
  {
    "text": "well, that's just the truth. There wasn't- your model is not that good. In some cases there are some like bug,",
    "start": "3145130",
    "end": "3152735"
  },
  {
    "text": "like something was misprocessed in a way and it wasn't really fair. So, you know, there are cases where you want to",
    "start": "3152735",
    "end": "3159290"
  },
  {
    "text": "like investigate if it's like way off the mark. If I had gone like 70% error, then maybe you- something was wrong and you would have to go investigate.",
    "start": "3159290",
    "end": "3167330"
  },
  {
    "text": "But if it's in the ballpark and whatever it is, that's kind of what, um, you have to deal with, right?",
    "start": "3167330",
    "end": "3173720"
  },
  {
    "text": "So what you wanna do also is make sure your validation error is kind of representative of your- if your test error so that you don't have,",
    "start": "3173720",
    "end": "3182645"
  },
  {
    "text": "you know, surprises at the end of the day, right? I mean it's- I think fine, er, to run it on a test set, um,",
    "start": "3182645",
    "end": "3190204"
  },
  {
    "text": "just to make sure that there's no catastrophic problems but the- the kind of aggressive tuning on a test set is something that would,",
    "start": "3190205",
    "end": "3197285"
  },
  {
    "text": "you know, have uh, warned against. Um, yeah. Is there any sort of standard as to how you should split",
    "start": "3197285",
    "end": "3205460"
  },
  {
    "text": "the data into train that and like validation testing. Generally, like what percentage of your data you should allocate to each one,",
    "start": "3205460",
    "end": "3214100"
  },
  {
    "text": "just randomize it or- Um, yeah. So the question is how do you split, uh, into train, validation and test?",
    "start": "3214100",
    "end": "3224270"
  },
  {
    "text": "Um, it- it depends on how large your data set is. So generally people, um, you know, shuffle the data and then randomly split it into test validation and- and train.",
    "start": "3224270",
    "end": "3233630"
  },
  {
    "text": "Um, maybe let's say like 80%, 10%, 10% just as a kind of, ah, a rule of thumb.",
    "start": "3233630",
    "end": "3238940"
  },
  {
    "text": "There are cases where you don't wanna do that. Um, there's cases where you, for example,",
    "start": "3238940",
    "end": "3245030"
  },
  {
    "text": "wanna train on the past and test on the future because that simulates the more realistic settings.",
    "start": "3245030",
    "end": "3251180"
  },
  {
    "text": "Um, remember, the test set is meant to kind of be representative as possible of the situations that you would see at- in the- in the real world. Yeah.",
    "start": "3251180",
    "end": "3262715"
  },
  {
    "text": "Have like, uh, some examples or something like labeled plus one and minus one.",
    "start": "3262715",
    "end": "3268265"
  },
  {
    "text": "Do you have to do that manually? So the question is that dataset was labeled.",
    "start": "3268265",
    "end": "3274505"
  },
  {
    "text": "There's 7,000 of them. Um, I personally did not label this dataset. [BACKGROUND] This is a center dataset that, uh,",
    "start": "3274505",
    "end": "3280115"
  },
  {
    "text": "someone labeled, um, you know, sometimes these data-sets come from, um, you know,",
    "start": "3280115",
    "end": "3285185"
  },
  {
    "text": "crowd workers, sometimes they come from, you know, experts. Um, yeah, it varies.",
    "start": "3285185",
    "end": "3291829"
  },
  {
    "text": "Um, yeah, sometimes they come from grad students. It's actually a good exercise to go and label.",
    "start": "3291830",
    "end": "3296930"
  },
  {
    "text": "I've labeled a lot of data also, in my life, um. [BACKGROUND]",
    "start": "3296930",
    "end": "3302210"
  },
  {
    "text": "Yeah, exactly. Okay, let's go on. So switching gears now, let's talk about unsupervised learning.",
    "start": "3302210",
    "end": "3309005"
  },
  {
    "start": "3308000",
    "end": "3492000"
  },
  {
    "text": "So, so far we've talked about supervised learning where the training set contains input-output pairs.",
    "start": "3309005",
    "end": "3314600"
  },
  {
    "text": "So you are given the input and this is the output that your predictor should output. Um, but, you know,",
    "start": "3314600",
    "end": "3321454"
  },
  {
    "text": "uh, this is very, uh, timely. Um, we were just talking about how fully labeled data is very expensive to obtain because,",
    "start": "3321455",
    "end": "3329120"
  },
  {
    "text": "you know, 10,000 is actually not that much, you know, you can often have, you know, 100,000 or even a million examples which,",
    "start": "3329120",
    "end": "3335690"
  },
  {
    "text": "uh, you do not want to, um, be sitting down and annotating yourself.",
    "start": "3335690",
    "end": "3340920"
  },
  {
    "text": "Um, so here's another possibility, so unsupervised learning.",
    "start": "3340920",
    "end": "3345934"
  },
  {
    "text": "Unsupervised learning, the training data only contains inputs and",
    "start": "3345935",
    "end": "3351005"
  },
  {
    "text": "unlabeled data is much cheaper to obtain in certain situations.",
    "start": "3351005",
    "end": "3356644"
  },
  {
    "text": "So for example if you're doing text classification, you have a lot of text out there. People write a lot on the Internet and you can easily download,",
    "start": "3356645",
    "end": "3365660"
  },
  {
    "text": "you know, gigabytes of text and all that is unlabeled. And yeah, you can do something with it. That would be, you know,",
    "start": "3365660",
    "end": "3371914"
  },
  {
    "text": "you turn that into gold or something. Um, and also images, videos, um, and so on.",
    "start": "3371915",
    "end": "3379745"
  },
  {
    "text": "Um, you know, it's not always possible to obtain unlabeled data.",
    "start": "3379745",
    "end": "3385325"
  },
  {
    "text": "For example, if you have, you know, some device that is producing, uh, data and you only have one of that device that you built yourself,",
    "start": "3385325",
    "end": "3393170"
  },
  {
    "text": "then, you know, you're not going to be able to get that much data. But we're gonna focus on a case where you do have basically infinite amount of,",
    "start": "3393170",
    "end": "3400925"
  },
  {
    "text": "uh, data and you want to do something with it. Um, so here's some examples I want to share with you.",
    "start": "3400925",
    "end": "3408650"
  },
  {
    "text": "This is a classic, uh, example from NLP that goes back to, um, you know, the early 90s.",
    "start": "3408650",
    "end": "3415865"
  },
  {
    "text": "So if these ideas were clustering, the input you g- will have a bunch of raw text, lots of news articles and you put it into this algorithm,",
    "start": "3415865",
    "end": "3422795"
  },
  {
    "text": "which I'm not going to describe, but I'm going to look at- we're going to look at the output. So what is this output?",
    "start": "3422795",
    "end": "3428645"
  },
  {
    "text": "It returns a bunch of clusters where for each cluster, it has a certain set of words associated with that cluster.",
    "start": "3428645",
    "end": "3436070"
  },
  {
    "text": "Okay, and when you look at the clusters, they're pretty coherent. So this is roughly- the first cluster is days of the week,",
    "start": "3436070",
    "end": "3442880"
  },
  {
    "text": "second cluster is months, um, third cluster is some sort of, uh, you know, m- m- materials, um, um,",
    "start": "3442880",
    "end": "3450380"
  },
  {
    "text": "fourth cluster is, uh, synonyms of like, you know, big, and so on.",
    "start": "3450380",
    "end": "3456035"
  },
  {
    "text": "And, you know, one th-, one thing though, the critical thing to note is that the input was just raw text.",
    "start": "3456035",
    "end": "3463370"
  },
  {
    "text": "Nowhere did someone say, \"Hey, these, these are days of the month, learn them and I'll go test you later.\"",
    "start": "3463370",
    "end": "3469055"
  },
  {
    "text": "It's all unsupervised. So this is actually, um, you know, on a personal note,",
    "start": "3469055",
    "end": "3474545"
  },
  {
    "text": "the kind of th- th- the, uh, example when I was doing a Masters, uh, that got me into doing NLP research because I was looking at this and I was like, \"Wow,",
    "start": "3474545",
    "end": "3483635"
  },
  {
    "text": "you can actually take unlabeled data and actually mine-\" really interesting kind of signals, you know, out of it.",
    "start": "3483635",
    "end": "3490865"
  },
  {
    "text": "Um, more recently, there's these, uh, things called word vectors, uh,",
    "start": "3490865",
    "end": "3495980"
  },
  {
    "start": "3492000",
    "end": "3538000"
  },
  {
    "text": "which do something very similar instead of clustering words, they embed words in,",
    "start": "3495980",
    "end": "3501320"
  },
  {
    "text": "uh-, into a vector space. So if you zoom in here, um, each word is associated with a particular position and, uh,",
    "start": "3501320",
    "end": "3509270"
  },
  {
    "text": "s- words which are similar actually t- happened to be close by in vector space.",
    "start": "3509270",
    "end": "3515210"
  },
  {
    "text": "So for example, these are country, um, names, these are, uh, pronouns, these are,",
    "start": "3515210",
    "end": "3521330"
  },
  {
    "text": "you know, years, months, and so on. Okay? So this is kind of operating on a very similar principle.",
    "start": "3521330",
    "end": "3527060"
  },
  {
    "text": "Um, there's also contextualized word vectors like, um, Elmo and Bert if you've, you know, heard of those things which have been really taking",
    "start": "3527060",
    "end": "3534349"
  },
  {
    "text": "the NLP community by storm m- more recently. On, on the v- vision side,",
    "start": "3534350",
    "end": "3540460"
  },
  {
    "start": "3538000",
    "end": "4987000"
  },
  {
    "text": "you also have, uh, the ability to do unsupervised learning. Um, so this is an example from 2015 where you run, um,",
    "start": "3540460",
    "end": "3549240"
  },
  {
    "text": "a clustering algorithm which is also jointly learning the features during this kind of deep neural network and it can identify, um,",
    "start": "3549240",
    "end": "3557525"
  },
  {
    "text": "different types of digits: zeros, and nines, and fours that look like nines,",
    "start": "3557525",
    "end": "3563164"
  },
  {
    "text": "threes and- or fives that look like three's and so on. So remember this is not doing classification, right?",
    "start": "3563165",
    "end": "3569840"
  },
  {
    "text": "You're not, um, uh, telling the algorithm, \"Here's our fives, here's our twos.\" It's just looking at examples and finding the structure that,",
    "start": "3569840",
    "end": "3578345"
  },
  {
    "text": "\"Oh, these are kind of the same thing and these are also the same thing.\" And sometimes but not always,",
    "start": "3578345",
    "end": "3584795"
  },
  {
    "text": "these clusters actually correspond to labels. Um, so here's another example of,",
    "start": "3584795",
    "end": "3592310"
  },
  {
    "text": "um, um, ships, planes, and birds that look like planes.",
    "start": "3592310",
    "end": "3598430"
  },
  {
    "text": "Um, so you can see kind of this is not doing classification, it's just kind of looking at visual similarity, okay?",
    "start": "3598430",
    "end": "3606020"
  },
  {
    "text": "All right so the general idea behind supervised learning is that, you know, data has a lot of rich latent structure in that, in that.",
    "start": "3606020",
    "end": "3614240"
  },
  {
    "text": "And in that, by that mean- I mean there's, there's kind of patterns in there. Um, and we want to develop methods that can",
    "start": "3614240",
    "end": "3621470"
  },
  {
    "text": "discover this structure, you know, automatically. So there's multiple types of unsupervised learning.",
    "start": "3621470",
    "end": "3628250"
  },
  {
    "text": "There's clustering, dimensionality reduction. Um, um, but we're going to focus on, you know,",
    "start": "3628250",
    "end": "3634040"
  },
  {
    "text": "clustering- in particular K-means clustering for, um, this lecture.",
    "start": "3634040",
    "end": "3639455"
  },
  {
    "text": "Okay. So let's get into it more formally. So the definition of clustering is as follows.",
    "start": "3639455",
    "end": "3646865"
  },
  {
    "text": "I give you a set of points, so x_1 through x_n and you want to output an assignment of each point to a cluster,",
    "start": "3646865",
    "end": "3657635"
  },
  {
    "text": "and the assignment variables are going to be z_1 through z_n. So for every data point, I'm going to have a z_i that tells me which of the K clusters I'm in,",
    "start": "3657635",
    "end": "3666095"
  },
  {
    "text": "1 through K, okay? So pictorially this looks like this on the board here where I have,",
    "start": "3666095",
    "end": "3672515"
  },
  {
    "text": "uh, let's say, uh, let's say I have seven points.",
    "start": "3672515",
    "end": "3677880"
  },
  {
    "text": "Okay. And if I gave you only these seven points and I tell you, \"Hey,",
    "start": "3679000",
    "end": "3684860"
  },
  {
    "text": "I want you to cluster them into two clusters, \" you know,",
    "start": "3684860",
    "end": "3689975"
  },
  {
    "text": "intuitively, you can kind of see maybe there's a left cluster over here and a right cluster over here, okay?",
    "start": "3689975",
    "end": "3696170"
  },
  {
    "text": "Um, but how do we formulate that kind of mathematically?",
    "start": "3696170",
    "end": "3701160"
  },
  {
    "text": "So, um, here's the, K-means objective function.",
    "start": "3701890",
    "end": "3707329"
  },
  {
    "text": "So this is the principle by which we're going to derive, um, clusterings, okay?",
    "start": "3707330",
    "end": "3713840"
  },
  {
    "text": "So K-means says that, uh, every cluster, there's going to be two clusters,",
    "start": "3713840",
    "end": "3720740"
  },
  {
    "text": "is going to be associated with a centroid, okay? So I'm gonna draw a centroid and,",
    "start": "3720740",
    "end": "3726020"
  },
  {
    "text": "um, uh, a red square here. And the centroid is a point in the space along with the,",
    "start": "3726020",
    "end": "3733730"
  },
  {
    "text": "uh, you know, the data points. And, um, I'm gonna th- this is kinda representing where the cluster is.",
    "start": "3733730",
    "end": "3741349"
  },
  {
    "text": "And then I'm going to associate each of the points with a particular centroid.",
    "start": "3741350",
    "end": "3749390"
  },
  {
    "text": "So I'm going to denote this by a blue arrow pointing from the point into the centroid,",
    "start": "3749390",
    "end": "3754849"
  },
  {
    "text": "um, and, you know, these two quantities, um,",
    "start": "3754850",
    "end": "3761060"
  },
  {
    "text": "are going to kind of represent the clustering. I have the locations of the clusterings in red and also",
    "start": "3761060",
    "end": "3767630"
  },
  {
    "text": "the assignments of the points into the clusters in, in blue.",
    "start": "3767630",
    "end": "3772640"
  },
  {
    "text": "Okay, so of course neither the red or the blue are known and that's something we're going to have to optimize.",
    "start": "3772640",
    "end": "3780740"
  },
  {
    "text": "Okay, so, but first we have to define, um, what the optimization, uh, objective function is.",
    "start": "3780740",
    "end": "3787755"
  },
  {
    "text": "Um, so intuitively, what do we want? We want each point, uh,",
    "start": "3787755",
    "end": "3793609"
  },
  {
    "text": "Phi of X_i to be close to the centroid, right? For the centroid to be really representative like,",
    "start": "3793610",
    "end": "3799625"
  },
  {
    "text": "of the points in that cluster, that centroid should be close to all the points in that cluster, okay?",
    "start": "3799625",
    "end": "3805850"
  },
  {
    "text": "So this is captured by this objective function where I look at all the points. For every point, I measure the distance between that point and,",
    "start": "3805850",
    "end": "3814579"
  },
  {
    "text": "um, the centroid that that point is associated with it. So remember z_i is a number between one 1 K. So that indexes which of the Mu,",
    "start": "3814580",
    "end": "3823145"
  },
  {
    "text": "uh, Mu 1 or Mu 2 I'm talking about. I'm looking at the squared distance between those;",
    "start": "3823145",
    "end": "3828440"
  },
  {
    "text": "two, the centroid and the point. Yeah? How does each point get assigned to a centroid?",
    "start": "3828440",
    "end": "3835160"
  },
  {
    "text": "Yeah, how does each point get to, assigned to a centroid? So that's going to be specified by the z's which,",
    "start": "3835160",
    "end": "3842180"
  },
  {
    "text": "um, is going to be optimized overall. A priori, you don't know. Yeah?",
    "start": "3842180",
    "end": "3846300"
  },
  {
    "text": "The holes have a pretty good idea of how many labels they can support, I guess-",
    "start": "3847210",
    "end": "3853460"
  },
  {
    "text": "How many clusters. -clusters it could be? Yeah, the question is do we know how many clusters there are?",
    "start": "3853460",
    "end": "3858695"
  },
  {
    "text": "In general, no. So there are ways to select.",
    "start": "3858695",
    "end": "3863915"
  },
  {
    "text": "It's another hyperparameter. So it's something that you have to set before you run the k means object function.",
    "start": "3863915",
    "end": "3871070"
  },
  {
    "text": "So when you're tuning, you try different number of clusters and see which one kind of works better.",
    "start": "3871070",
    "end": "3877920"
  },
  {
    "text": "Okay, so we need to choose the centroids and the assignments jointly. So though this- this hopefully is clear,",
    "start": "3879460",
    "end": "3886970"
  },
  {
    "text": "you just want to find the assignment z and the centroids mu to make this number as small as possible.",
    "start": "3886970",
    "end": "3893839"
  },
  {
    "text": "So how do you do this?",
    "start": "3893840",
    "end": "3896730"
  },
  {
    "text": "Well, let's- let's look at a simple one-dimensional example,",
    "start": "3899710",
    "end": "3906619"
  },
  {
    "text": "and let's build up some questions, okay? So we have 1d now,",
    "start": "3906620",
    "end": "3912875"
  },
  {
    "text": "and we have four points and the points are at- they are going to be at 0,",
    "start": "3912875",
    "end": "3920914"
  },
  {
    "text": "2, 10, and 12, okay? So I have our points,",
    "start": "3920914",
    "end": "3927200"
  },
  {
    "text": "four points at these locations. Okay, I want to cluster, and intuitively you think I want two clusters here.",
    "start": "3927200",
    "end": "3934430"
  },
  {
    "text": "There's going to be two centroids. And suppose I know the centroids, okay?",
    "start": "3934430",
    "end": "3942950"
  },
  {
    "text": "So just- someone told you magically that the centroids of this example is- are going to be like at 1 and 11, okay?",
    "start": "3942950",
    "end": "3954350"
  },
  {
    "text": "So someone told you that and now you have to figure out the assignments. Yeah, how would you do this?",
    "start": "3954350",
    "end": "3961230"
  },
  {
    "text": "Let's assign this point, where should it go? You look at this distance, which is one.",
    "start": "3962470",
    "end": "3969035"
  },
  {
    "text": "You look at this distance, which is 11. Which are smaller? One is smaller. So you say,",
    "start": "3969035",
    "end": "3974840"
  },
  {
    "text": "\"Okay, that's where I should go.\" Same with this point, 1 is smaller, for these, 11 is smaller.",
    "start": "3974840",
    "end": "3981410"
  },
  {
    "text": "And that's it, okay? So mathematically, you can see it's comparing the distance from each point",
    "start": "3981410",
    "end": "3988130"
  },
  {
    "text": "to each of the centers and choosing the center which is closest, okay?",
    "start": "3988130",
    "end": "3995015"
  },
  {
    "text": "And you can convince yourself that that's the way to- if the cluster centroids were- centroids would fix,",
    "start": "3995015",
    "end": "4001030"
  },
  {
    "text": "how you would minimize the objective function. Because if you choose a centroid which is farther away,",
    "start": "4001030",
    "end": "4006520"
  },
  {
    "text": "then you get just- a larger value and you want the value to be as small as possible, okay?",
    "start": "4006520",
    "end": "4017599"
  },
  {
    "text": "I don't know why this is two. I think this should be one, right?",
    "start": "4020160",
    "end": "4024710"
  },
  {
    "text": "Okay, so let's do it the other way now. Suppose I now have the assignments.",
    "start": "4028200",
    "end": "4037660"
  },
  {
    "text": "So I know that these two should be in some cluster. These two should be in a different cluster, cluster two.",
    "start": "4037660",
    "end": "4045310"
  },
  {
    "text": "And now I have to place the- the centers. Where- where should I place it? Should I place it here?",
    "start": "4045310",
    "end": "4051984"
  },
  {
    "text": "Should I place it here? Should I place it here? Where should I place it?",
    "start": "4051985",
    "end": "4057310"
  },
  {
    "text": "And if you look at the slide here, what you're doing is you're saying, \"Okay,",
    "start": "4057310",
    "end": "4063505"
  },
  {
    "text": "for the first cluster, I know 2 and 0 are assigned to that cluster. And I know that the sum of the distances to this- this centroid mu is this,",
    "start": "4063505",
    "end": "4075640"
  },
  {
    "text": "and I want this number to be as small as possible.\" Okay? And if you did the first homework you know",
    "start": "4075640",
    "end": "4082779"
  },
  {
    "text": "that whenever you have one of these kind of squared of some objectives, you should be averaging the points here.",
    "start": "4082780",
    "end": "4091405"
  },
  {
    "text": "So you can actually solve that in closed form, and you- given the assignments here,",
    "start": "4091405",
    "end": "4097810"
  },
  {
    "text": "you know the center should be there, which is average of 0 and 2. And for these- these cluster,",
    "start": "4097810",
    "end": "4104875"
  },
  {
    "text": "you should average the two points here, and that should be at 11. Yeah.",
    "start": "4104875",
    "end": "4115480"
  },
  {
    "text": "[inaudible]. Okay, so what's the difference between centroid and assignment?",
    "start": "4115480",
    "end": "4122859"
  },
  {
    "text": "So when you're clustering, you have k clusters, so there's k centroids.",
    "start": "4122860",
    "end": "4128784"
  },
  {
    "text": "So in this case there's two centroids. There- those are the- the red. The assignments are the association between the points and the centroid.",
    "start": "4128785",
    "end": "4138190"
  },
  {
    "text": "So you have n assignments. And these are the things that move.",
    "start": "4138190",
    "end": "4143239"
  },
  {
    "text": "Is the k a hyperparameter or is that somehow [OVERLAPPING]. Yeah, so k here is a hyperparameter,",
    "start": "4146730",
    "end": "4152890"
  },
  {
    "text": "which is the number of clusters which you can turn. Okay, so here's a chicken and egg problem, right?",
    "start": "4152890",
    "end": "4161125"
  },
  {
    "text": "If I knew the centroids, I could pretty easily come up with assignments.",
    "start": "4161125",
    "end": "4167290"
  },
  {
    "text": "And if I knew the assignments, I could come up with the centroids. But I don't know either one. So how do I get started?",
    "start": "4167290",
    "end": "4174400"
  },
  {
    "text": "So the key idea here is alternating minimization, which is this general idea in optimization which is usually not a bad idea.",
    "start": "4175100",
    "end": "4185574"
  },
  {
    "text": "And the principle is well, you have a hard problem, maybe you can solve it by tackling kind of two easy problems here.",
    "start": "4185575",
    "end": "4193165"
  },
  {
    "text": "So here's a k-means algorithm. So step one is you're going to- you're given the centroids,",
    "start": "4193165",
    "end": "4203244"
  },
  {
    "text": "now you kind of go into more general notation, mu 1 through mu k. And I want to figure out the assignments.",
    "start": "4203244",
    "end": "4211780"
  },
  {
    "text": "So for every data point, I'm going to assign that data point to the cluster with the closest centroid.",
    "start": "4211780",
    "end": "4219820"
  },
  {
    "text": "So here I'm looking at all the clusters, 1 through k, and I'm going to test how far is that point from that centroid,",
    "start": "4219820",
    "end": "4227170"
  },
  {
    "text": "and I'm just going to take the smallest value, and that's going to be where I assign that point, okay?",
    "start": "4227170",
    "end": "4236500"
  },
  {
    "text": "Step two, flip it around. You're given the cluster assignments now, Z_1 through Z_n.",
    "start": "4236500",
    "end": "4242485"
  },
  {
    "text": "And now we're trying to find the best centroids. So what centroids should I pick? So now you go through each cluster 1 through k,",
    "start": "4242485",
    "end": "4250315"
  },
  {
    "text": "and you're going to set the centroid of the kth cluster to the average of the points assigned to the cluster, right?",
    "start": "4250315",
    "end": "4257680"
  },
  {
    "text": "So mathematically this looks like that. You just sum over all the points i which have been assigned to cluster k,",
    "start": "4257680",
    "end": "4266695"
  },
  {
    "text": "and you- you basically add up all the feature vectors. And then you just divide by the number of things you summed over, okay?",
    "start": "4266695",
    "end": "4280795"
  },
  {
    "text": "So putting it together, if you want to optimize this objective function the K-means reconstructor and loss.",
    "start": "4280795",
    "end": "4289240"
  },
  {
    "text": "First you initialize mu 1 through mu K randomly. There's many ways to do this.",
    "start": "4289240",
    "end": "4295449"
  },
  {
    "text": "And then you just iterate, set assignments given the clusters,",
    "start": "4295450",
    "end": "4302140"
  },
  {
    "text": "the centroids, and then set the centroids given the cluster assignments.",
    "start": "4302140",
    "end": "4307285"
  },
  {
    "text": "Just alternate. Yeah. Yeah this makes sense for like coordinates, for like images,",
    "start": "4307285",
    "end": "4313210"
  },
  {
    "text": "where like if you read in a similar image by bytes it looks the same, but like words, where words that are spelled totally",
    "start": "4313210",
    "end": "4319900"
  },
  {
    "text": "differently can have like these same like semantic meanings. How would you accurately map them to like a same location to cluster essentially around?",
    "start": "4319900",
    "end": "4329410"
  },
  {
    "text": "Yeah, so the question is like maybe for images distances in pixel space makes kinda more- more sense.",
    "start": "4329410",
    "end": "4338065"
  },
  {
    "text": "But if you have words, then- two words which- you shouldn't be looking at it like the edit distance between,",
    "start": "4338065",
    "end": "4347110"
  },
  {
    "text": "you know, the, the words and two synonyms like big and large, look very different, but they are somehow similar.",
    "start": "4347110",
    "end": "4354460"
  },
  {
    "text": "So this is something that word vectors, you know address, which we're not going to talk about.",
    "start": "4354460",
    "end": "4362020"
  },
  {
    "text": "Basically you want to capture the representation of a word by its context.",
    "start": "4362020",
    "end": "4370645"
  },
  {
    "text": "So the contexts in which big and large occur is going to be kind of similar.",
    "start": "4370645",
    "end": "4377845"
  },
  {
    "text": "And you can construct these context vectors that give you a better representation. We can talk more offline. Yeah.",
    "start": "4377845",
    "end": "4384610"
  },
  {
    "text": "[inaudible] things where you can get stuck at like a local minima or you're guaranteed if you do it enough times [inaudible].",
    "start": "4384610",
    "end": "4391989"
  },
  {
    "text": "Yeah, you can get stuck and I'll show you an example. Any other questions about the general algorithm? Yeah.",
    "start": "4391990",
    "end": "4400280"
  },
  {
    "text": "Unstable in that they say you get stuck, and then like you like kind of [inaudible] multiple.",
    "start": "4400380",
    "end": "4407605"
  },
  {
    "text": "Yeah, I'll- maybe I'll- I'll answer that. I'll show you an example. Make sure you show using a fixed number of iterations,",
    "start": "4407605",
    "end": "4414549"
  },
  {
    "text": "but some kind of criteria like doesn't change anymore as the stopping condition? Yeah, so this is going up to a fixed number of iterations t. Typically,",
    "start": "4414549",
    "end": "4424810"
  },
  {
    "text": "you would have some sort of- you would monitor this objective function. And once it gets below,",
    "start": "4424810",
    "end": "4431770"
  },
  {
    "text": "stops changing very much, then you just stop. Actually, this is that the k-means algorithm is guaranteed",
    "start": "4431770",
    "end": "4438340"
  },
  {
    "text": "to always converge to a local minimum. So why don't I just show you this demo,",
    "start": "4438340",
    "end": "4443469"
  },
  {
    "text": "and I think it'll maybe make some things clear. Okay, so here I have a bunch of points. So this is a JavaScript demo.",
    "start": "4443470",
    "end": "4450369"
  },
  {
    "text": "You can go and play around and change the points if you want. It's linked off the course website. And then I'm going to run K-means.",
    "start": "4450370",
    "end": "4457239"
  },
  {
    "text": "Okay, so I initialize with these three centroids,",
    "start": "4457240",
    "end": "4462295"
  },
  {
    "text": "and these regions are basically the points that would be assigned to that centroid.",
    "start": "4462295",
    "end": "4471070"
  },
  {
    "text": "So this is a Voronoi diagram of these- these centroids. Okay, and this is the loss function which will hopefully should be going down.",
    "start": "4471070",
    "end": "4479739"
  },
  {
    "text": "Okay, so now I iterate- so iteration one, I'm going to assign the points to the clusters.",
    "start": "4479740",
    "end": "4486670"
  },
  {
    "text": "So these get assigned to blue, this one gets assigned to red, these get assigned to green.",
    "start": "4486670",
    "end": "4491965"
  },
  {
    "text": "And then the step two is going to be optimizing the centroids.",
    "start": "4491965",
    "end": "4498364"
  },
  {
    "text": "So given all the blue points, I put the center in the smack in the middle of these blue points.",
    "start": "4498365",
    "end": "4505185"
  },
  {
    "text": "And then same with green and red. Notice that now these points are in the red region.",
    "start": "4505185",
    "end": "4513190"
  },
  {
    "text": "So if I reassign, then these become red, and then I can iterate, and then, you know,",
    "start": "4513190",
    "end": "4519250"
  },
  {
    "text": "keep on going, and you can see that the algorithm, you know, eventually converges to clustering,",
    "start": "4519250",
    "end": "4526810"
  },
  {
    "text": "where these points are blue, these points are red, and these are green.",
    "start": "4526810",
    "end": "4532135"
  },
  {
    "text": "And if you keep on running it, you're not going to make any progress, because if assignments don't change, then the cluster centers aren't going to change either.",
    "start": "4532135",
    "end": "4539900"
  },
  {
    "text": "Okay. Um, so let me actually,",
    "start": "4541020",
    "end": "4548905"
  },
  {
    "text": "you know, skip this since I'm- I was just gonna do it on the board but I think you kind of get the idea. Um, so let's talk about this local minima problem.",
    "start": "4548905",
    "end": "4558205"
  },
  {
    "text": "So K-means is not guarantee is, is, is guaranteed to converge to a local minimum,",
    "start": "4558205",
    "end": "4563619"
  },
  {
    "text": "um, but it's not guaranteed to find the global minimum. So if you think about this as a coy visualization of the objective function,",
    "start": "4563620",
    "end": "4572844"
  },
  {
    "text": "you know, by going downhill, we can get stuck here but it won't get to that point.",
    "start": "4572845",
    "end": "4577960"
  },
  {
    "text": "So you- so you take an example for different random seeds.",
    "start": "4577960",
    "end": "4583219"
  },
  {
    "text": "You can- let's say you initialize here. Okay, so now all the three centers are here and if I run this and I run this,",
    "start": "4583770",
    "end": "4594490"
  },
  {
    "text": "now I get this other solution which is actually a lot worse. Remember the other one was 44 and this is 114,",
    "start": "4594490",
    "end": "4601555"
  },
  {
    "text": "and that's where the algorithm converged and you're just stuck. So in practice, people typically try different initializations,",
    "start": "4601555",
    "end": "4611094"
  },
  {
    "text": "run it from different random points and then just take the best. Um, there's also a particular way of initialization called K-means plus",
    "start": "4611095",
    "end": "4620079"
  },
  {
    "text": "plus where you put down a point and you put down a point which is as farthest away as possible and then as far away as possible.",
    "start": "4620080",
    "end": "4626790"
  },
  {
    "text": "And then that kind of spreads out the centers. So they don't, kind of, inter- interfere with each other",
    "start": "4626790",
    "end": "4631875"
  },
  {
    "text": "and that generally works pretty well. But still there's no necessary guarantee of converging to a global optimum.",
    "start": "4631875",
    "end": "4639890"
  },
  {
    "text": "Okay, any questions about K-means? Yeah.",
    "start": "4643620",
    "end": "4652660"
  },
  {
    "text": "[inaudible] How do you choose K? You guys love these hyper-parameter tuning questions. Uh, so, uh, one thing you can,",
    "start": "4652660",
    "end": "4659440"
  },
  {
    "text": "kind of, draw is the following picture. Um, so K then your loss that you get from K. And usually,",
    "start": "4659440",
    "end": "4670120"
  },
  {
    "text": "if you have one cluster, the loss is gonna be very high and that at some point, it's, you know,",
    "start": "4670120",
    "end": "4675449"
  },
  {
    "text": "going to go down and you generally, uh, you know, lop it off when it's,",
    "start": "4675450",
    "end": "4682335"
  },
  {
    "text": "you know, not going down by very much. So you can monitor that curve. Another thing you can do is you have a validation set,",
    "start": "4682335",
    "end": "4690355"
  },
  {
    "text": "um, and you can measure reconstruction error on the, you know, validation set and choose the minimum based on that,",
    "start": "4690355",
    "end": "4697180"
  },
  {
    "text": "which is just another hyper-parameter that you can turn. Yeah. How is the training loss calculated [inaudible]",
    "start": "4697180",
    "end": "4704260"
  },
  {
    "text": "How's the training loss calculated? Uh, so the training loss is this quantity.",
    "start": "4704260",
    "end": "4710725"
  },
  {
    "text": "Um, so you sum over all your points and then you look at",
    "start": "4710725",
    "end": "4715750"
  },
  {
    "text": "the distance between that point and the sign centroid and you square that and you just add all those numbers up.",
    "start": "4715750",
    "end": "4724220"
  },
  {
    "text": "Okay. So to wrap up, um, oh actually I have- actually,",
    "start": "4725790",
    "end": "4731619"
  },
  {
    "text": "I have more slides here. [LAUGHTER] So, um, unsupervised learning you're trying to leverage a lot of data and we can,",
    "start": "4731620",
    "end": "4739645"
  },
  {
    "text": "kind of, get around this difficult optimization problem by, you know, doing this alternating minimization.",
    "start": "4739645",
    "end": "4744775"
  },
  {
    "text": "So these will be quick. Um, so just to, kind of, summarize the learning section, we've talked about feature extraction.",
    "start": "4744775",
    "end": "4750804"
  },
  {
    "text": "And I want you to think about the hypothesis class that's defined by a set of features.",
    "start": "4750805",
    "end": "4756205"
  },
  {
    "text": "Um, prediction which boils down to kind of",
    "start": "4756205",
    "end": "4761530"
  },
  {
    "text": "what kind of model you're looking at for classification and regression.",
    "start": "4761530",
    "end": "4766570"
  },
  {
    "text": "Supervised learning, you have linear models and neural networks, and for clustering you have a K-means object- objective loss functions which,",
    "start": "4766570",
    "end": "4775240"
  },
  {
    "text": "you know, in many cases all you need to do is compute the gradient. Um, and then there's generalization which",
    "start": "4775240",
    "end": "4783265"
  },
  {
    "text": "is what we talked about for the first half of this lecture which is really important to think about.",
    "start": "4783265",
    "end": "4788575"
  },
  {
    "text": "You know, the task set remember is, kind of, only a surrogate for future examples.",
    "start": "4788575",
    "end": "4793885"
  },
  {
    "text": "Um, so a lot of these ideas that we presented are actually quite old.",
    "start": "4793885",
    "end": "4799105"
  },
  {
    "text": "So the idea of least squares, you know, the- for regression goes back to, you know,",
    "start": "4799105",
    "end": "4804130"
  },
  {
    "text": "Gauss when he was, you know, solve- trying to solve some astronomy problem. Logistic regression was, you know, from statistics.",
    "start": "4804130",
    "end": "4811585"
  },
  {
    "text": "For an AI, there was actually some learning that was done even in the, you know, in the '50s for playing checkers.",
    "start": "4811585",
    "end": "4819280"
  },
  {
    "text": "As I mentioned, the first day of our class, there was a period where learning kinda fell out of favor but it came back",
    "start": "4819280",
    "end": "4826179"
  },
  {
    "text": "with back-propagation and then much of the '90s actually a lot more, kind of,",
    "start": "4826180",
    "end": "4831550"
  },
  {
    "text": "rigorous treatment of optimization and formalization of when algorithms are guaranteed to converge um that- that happened in the '90s.",
    "start": "4831550",
    "end": "4841240"
  },
  {
    "text": "And then in the 2000s, we know that people looked at kind of structure prediction and,",
    "start": "4841240",
    "end": "4848485"
  },
  {
    "text": "um, there was a revival of neural networks. Um, some things that we haven't covered here are,",
    "start": "4848485",
    "end": "4856390"
  },
  {
    "text": "you know, feedback loops, right? So learning assumes kinda the static view where you take data.",
    "start": "4856390",
    "end": "4862165"
  },
  {
    "text": "You train a model and then you go and generate predictions. But if you deploy the system in the real world,",
    "start": "4862165",
    "end": "4867610"
  },
  {
    "text": "those predictions are actually gonna come around and beat data. And those feedback loops can also cause",
    "start": "4867610",
    "end": "4873085"
  },
  {
    "text": "problems that you might not be aware of if you're only thinking about, ah, here's- I'm doing my machine-learning thing.",
    "start": "4873085",
    "end": "4879625"
  },
  {
    "text": "How can you build classifiers that don't discriminate? So, um, we, uh,",
    "start": "4879625",
    "end": "4885370"
  },
  {
    "text": "often have classifiers, you're minimizing the training set- average of the training set.",
    "start": "4885370",
    "end": "4890980"
  },
  {
    "text": "So by- by a kind of construction, you're trying to drive down the losses of,",
    "start": "4890980",
    "end": "4896005"
  },
  {
    "text": "you know, kind of common examples. But often you get these situations where minority groups actually get, you know,",
    "start": "4896005",
    "end": "4902710"
  },
  {
    "text": "pretty high loss because they look different and almost look like outliers but you're not really able to fit them.",
    "start": "4902710",
    "end": "4908575"
  },
  {
    "text": "But, um, the training loss doesn't kind of, you know, care. So there's other ways.",
    "start": "4908575",
    "end": "4913840"
  },
  {
    "text": "Um, there's techniques like distribution and robust optimization that tries to, um, you know, get around some of these issues.",
    "start": "4913840",
    "end": "4920200"
  },
  {
    "text": "Um, there's also privacy concerns. How can you learn actually if you don't have access to an entire dataset?",
    "start": "4920200",
    "end": "4926860"
  },
  {
    "text": "So there are some techniques based on randomization that can help you. And then interpretability, how can you understand what,",
    "start": "4926860",
    "end": "4933520"
  },
  {
    "text": "you know, the algorithms are doing especially if you have a deep neural network. You've learned a model and there's, you know,",
    "start": "4933520",
    "end": "4939190"
  },
  {
    "text": "work which I am happy to discuss with you offline. So the general- so we've concluded three lectures on machine learning.",
    "start": "4939190",
    "end": "4948010"
  },
  {
    "text": "Um, but I wanted you, kind of, to think about learning in the most general way possible,",
    "start": "4948010",
    "end": "4953050"
  },
  {
    "text": "which is that, you know, programs should improve with, you know, experience. Right. So I think we've talked about, you know,",
    "start": "4953050",
    "end": "4961210"
  },
  {
    "text": "linear classifiers and all these kind of nuts and bolts of basically reflex models. But in the next lectures,",
    "start": "4961210",
    "end": "4968620"
  },
  {
    "text": "we're gonna see how learning can be used in state-based models and also, you know, variable-based models.",
    "start": "4968620",
    "end": "4974455"
  },
  {
    "text": "Okay. With that, so that concludes. Um, next week, Dorsa will be giving the lecture on state-based models.",
    "start": "4974455",
    "end": "4981230"
  }
]