[
  {
    "text": "It occurred to me at that time that that, you know, it's nice in the holiday season to say something about trees are endlessly fascinating.",
    "start": "1860",
    "end": "7910"
  },
  {
    "text": "The computer scientists especially and and so, as far as I know, probably never run out of interesting things to say about them.",
    "start": "7910",
    "end": "17000"
  },
  {
    "text": "This is the sixth annual Christmas tree lecture. And today I'm talking about something which one of the most fundamental problems in",
    "start": "17000",
    "end": "24180"
  },
  {
    "text": "coding theory is the question of how to get the best possible alphabetic prefix codes.",
    "start": "24180",
    "end": "31350"
  },
  {
    "text": "And I talk a little bit about that. The main method I'm going to be talking about today is called the Garcia Wax Algorithm.",
    "start": "31350",
    "end": "38900"
  },
  {
    "text": "And I guess the one way to do it is to show you the home pages of Garcia and Wax.",
    "start": "38900",
    "end": "46700"
  },
  {
    "text": "So how do Garcia was one of my. Okay. I forgot to copy his CV.",
    "start": "46700",
    "end": "51730"
  },
  {
    "text": "I clicked on this, too. Anyway, he was one of my professors at Caltech when I was a student there.",
    "start": "51730",
    "end": "58610"
  },
  {
    "text": "And he he's 70 years old, is here and still very healthy, as you see in the picture here.",
    "start": "58610",
    "end": "65690"
  },
  {
    "text": "Very charismatic guy. I've been a professor at UCSD for more than 30 years.",
    "start": "65690",
    "end": "72840"
  },
  {
    "text": "And then one of his students who is also listed, if you go to a severe list, all the students and you can click on Michelle's home page.",
    "start": "72840",
    "end": "83460"
  },
  {
    "text": "And Michelle Wex is is a professor in Miami.",
    "start": "83460",
    "end": "90350"
  },
  {
    "text": "And she is is well known now for very deep research.",
    "start": "90350",
    "end": "95840"
  },
  {
    "text": "And in areas of heartbreak, combinatorics are kind of like lattice theories,",
    "start": "95840",
    "end": "101450"
  },
  {
    "text": "such as I was talking about last year when I was talking about lettuce, of lettuces, of trees.",
    "start": "101450",
    "end": "106469"
  },
  {
    "text": "And one thing you'll notice about her home page is that she has a tree on it.",
    "start": "106470",
    "end": "111990"
  },
  {
    "text": "So, in fact, this tree also would define a prefix code, and that's what I'm lecturing about.",
    "start": "111990",
    "end": "119759"
  },
  {
    "text": "So she must still be interested in in trees. This was her thesis work in 1977 or 1976, 77, sort of like that.",
    "start": "119760",
    "end": "130429"
  },
  {
    "text": "And. And and it's it's still still the best algorithm for this problem that anybody knows.",
    "start": "130430",
    "end": "142280"
  },
  {
    "text": "And that's when you have a binary tree like this. If you can imagine that.",
    "start": "142280",
    "end": "148500"
  },
  {
    "text": "Well, I'm actually going to take the the case where the nodes that have no descendants of",
    "start": "148500",
    "end": "157010"
  },
  {
    "text": "drama squares and circles will be no good have to do sentence in a binary tree.",
    "start": "157010",
    "end": "162799"
  },
  {
    "text": "And you start at the root and you and you write down a zero every time you go to the left than a one every time you go to the right.",
    "start": "162800",
    "end": "168920"
  },
  {
    "text": "This could be zero zero zero and you'd be zero zero one.",
    "start": "168920",
    "end": "175099"
  },
  {
    "text": "And here is zero one one zero one one.",
    "start": "175100",
    "end": "181310"
  },
  {
    "text": "These these symbols for prefix code in the sense that if I if I take any string of zeros and ones whatsoever,",
    "start": "181310",
    "end": "192020"
  },
  {
    "text": "just write down any random string of those one. I could I could consider that to be a message and a five letter alphabet where there's five leaves in this tree.",
    "start": "192020",
    "end": "203930"
  },
  {
    "text": "And so so I. Well, almost any sequence of zeros and ones.",
    "start": "203930",
    "end": "210530"
  },
  {
    "text": "Maybe a random number generator. But you see, you go until you get to a leaf.",
    "start": "210530",
    "end": "216630"
  },
  {
    "text": "And that gives you your first first word of the code in one zero. It is a code word, one one one zero one one one zero one one.",
    "start": "216630",
    "end": "225680"
  },
  {
    "text": "I have very good random number generator. No. OK, let me show you another.",
    "start": "225680",
    "end": "235280"
  },
  {
    "text": "I'll show you another previous caller. But the point is, if you have a prefix code, you can you can represent as a binary tree.",
    "start": "235280",
    "end": "242150"
  },
  {
    "text": "And if you have a binary tree is defined the prefix code. So so there are equivalent concepts. And that's what I that's the connection with trees today is the idea.",
    "start": "242150",
    "end": "249950"
  },
  {
    "text": "But it's also alphabetic prefix code. And that means that if I if I consider that these were like A, B, C, D,",
    "start": "249950",
    "end": "258470"
  },
  {
    "text": "E and I had a message and I had a word made out of ABC and Disney and then I converted into binary like this,",
    "start": "258470",
    "end": "268710"
  },
  {
    "text": "if one word is less than another, lexically graphically like in a dictionary, then also in the binary sequence you'll be less than the other.",
    "start": "268710",
    "end": "276539"
  },
  {
    "text": "So sorry. So this this encoding not only gives us letters, but it also preserves the order of of of words.",
    "start": "276540",
    "end": "285650"
  },
  {
    "text": "And that's why it's called an alphabetic encoding. It depends on the order. Now, the case of coding without an alphabetic constraint is the.",
    "start": "285650",
    "end": "301520"
  },
  {
    "text": "The main idea is, in that case, Karl Huffman, coding, I think most of you know about Huffman coding.",
    "start": "301520",
    "end": "310150"
  },
  {
    "text": "All right. This this is what I suppose I have an alphabet and I know the probability of of each letter in the alphabet.",
    "start": "310150",
    "end": "318259"
  },
  {
    "text": "For example, you might say that's that. All Amy seen to say is the most common letter, for example.",
    "start": "318260",
    "end": "326210"
  },
  {
    "text": "And so we have this. So we have weights. And I typically will say W zero, w one.",
    "start": "326210",
    "end": "334250"
  },
  {
    "text": "And in this talk, I'm going to go off the end of the end plus one weights on. If you have any one letter alphabet. It turns out because you need the number is this way.",
    "start": "334250",
    "end": "345310"
  },
  {
    "text": "And and the idea for Hofman code is to find a prefix code where we for where we attach the WS at the leaves",
    "start": "345310",
    "end": "355250"
  },
  {
    "text": "of the tree w one w o w three might appear here and somehow these things are put together in a tree w two,",
    "start": "355250",
    "end": "363860"
  },
  {
    "text": "but they don't have to be in left to right. They don't have to be in left-to-right order leaves won't have to be in the right order.",
    "start": "363860",
    "end": "370580"
  },
  {
    "text": "But the idea is that the that if that, if the words represent the, the frequencies of using these leaves then,",
    "start": "370580",
    "end": "380840"
  },
  {
    "text": "then letter, letter K let's say has a has frequency or weight W.K. then the the card for K has length.",
    "start": "380840",
    "end": "400760"
  },
  {
    "text": "OK, what the length is the depth in the tree. So for example this, this, this called has length three.",
    "start": "400760",
    "end": "410060"
  },
  {
    "text": "So we had to go down. One, two, three. This is def zero. One, two, three. So, so the the cost of the tree are crossed over.",
    "start": "410060",
    "end": "421430"
  },
  {
    "text": "Prefix code, which I'm going to call a tree is equal to the sum of the weights times the length.",
    "start": "421430",
    "end": "433060"
  },
  {
    "text": "So, so we really we try to find is a code that has the minimum cost.",
    "start": "433060",
    "end": "438680"
  },
  {
    "text": "They require the fewest bits to transmit letters. If we have if the letters occur in that frequency, you with me on it.",
    "start": "438680",
    "end": "447050"
  },
  {
    "text": "Now it was one of the most basic things in information theory.",
    "start": "447050",
    "end": "452949"
  },
  {
    "text": "Khwaja and publishes his provisional work in the late forties. Is that. Was to show how you could how entropy was a lower bound on them from the cost of a",
    "start": "452950",
    "end": "466819"
  },
  {
    "text": "tree and and how you could get very close to the entropy by certain construction.",
    "start": "466820",
    "end": "472940"
  },
  {
    "text": "And Dave Hoffmann was a student at my team. In those days. And and he showed one of his teachers.",
    "start": "472940",
    "end": "480230"
  },
  {
    "text": "He had this construction. He said that I can. And showed how you can get close to an optimal code.",
    "start": "480230",
    "end": "486950"
  },
  {
    "text": "I can prove how you can get actually the best possible code with with given weights. And his teacher said, no, this all your method is too simple.",
    "start": "486950",
    "end": "494840"
  },
  {
    "text": "It couldn't possibly work because otherwise Shannon would've found something. I don't know. But but it turned out that Huffman was right and he and his paper was published.",
    "start": "494840",
    "end": "506060"
  },
  {
    "text": "I don't know if he won or something very early. And I suppose a lot of you know him.",
    "start": "506060",
    "end": "512750"
  },
  {
    "text": "He's a professor at UC Santa Cruz for for the last 30 years or so.",
    "start": "512750",
    "end": "519800"
  },
  {
    "text": "So Huffman's idea is this. Suppose that the weights are are ordered without loss of Generali since since it seems the order of the letters doesn't matter.",
    "start": "519800",
    "end": "531710"
  },
  {
    "text": "We might as well assume that the doctor ordered with the smallest stuff you can we can we know what the smallest weights are.",
    "start": "531710",
    "end": "539390"
  },
  {
    "text": "This idea was simply this. Take take the two smallest ones and combine them into another into another super weight, which is the sum of the two.",
    "start": "539390",
    "end": "551710"
  },
  {
    "text": "And so you have these two leaves here. And so now you have new weights, w zero bar or w one bar.",
    "start": "551710",
    "end": "562820"
  },
  {
    "text": "Let's say is equal to W zero plus W one. So you two bar is W two and W Embar is W and so we, we've gone from N plus one weights now to any weight where we just,",
    "start": "562820",
    "end": "577940"
  },
  {
    "text": "we just added together the two smallest weights and his his idea is now solved.",
    "start": "577940",
    "end": "583210"
  },
  {
    "text": "The problem for this. So the small problem has one fewer weight with the same method combined.",
    "start": "583210",
    "end": "589430"
  },
  {
    "text": "Its two smallest guys. And and keep on going until you've got everything down to one three.",
    "start": "589430",
    "end": "594830"
  },
  {
    "text": "And that's your that's your best possible dream. Now they are the reason that Huffman's algorithm worth.",
    "start": "594830",
    "end": "601970"
  },
  {
    "text": "And there's lots of neat, fast ways to implement it, but the reason that it works is is not too hard to to see.",
    "start": "601970",
    "end": "611389"
  },
  {
    "text": "But I've got a cheat sheet here, too, so I can make it the most elegant way to show it anyway.",
    "start": "611390",
    "end": "618120"
  },
  {
    "text": "OK. So, so. So in other words. So why does Huffins construction work? And so what we do is we take any.",
    "start": "618120",
    "end": "628640"
  },
  {
    "text": "Well what I want to show is then that the that the optimum three, four, four is given.",
    "start": "628640",
    "end": "634790"
  },
  {
    "text": "And plus one weights is equal to can be found. One way to find an optimum tree for you then plus one weights is to form these N weights minus two smallest.",
    "start": "634790",
    "end": "645980"
  },
  {
    "text": "And then finally documentary for that. And then take this weight and and expand it out.",
    "start": "645980",
    "end": "654230"
  },
  {
    "text": "Expand it back again. So the proof that this works is the following.",
    "start": "654230",
    "end": "659269"
  },
  {
    "text": "Suppose we take the cost of the optimum of the optimum three.",
    "start": "659270",
    "end": "666730"
  },
  {
    "text": "For four, for the small number of ways that the W bars and I add W zero plus W one to it, this will be the cause of some tree for the originals.",
    "start": "666730",
    "end": "686660"
  },
  {
    "text": "In other words, I find the best possible tree here. And then I. That I'll have one leaf called W. one bar while I replace that leaf by a little subtree that has has two guys on it.",
    "start": "686660",
    "end": "699640"
  },
  {
    "text": "So what have I done to change the cost?",
    "start": "699640",
    "end": "705360"
  },
  {
    "text": "Now neither end plus one leaves and the cost of that tree is the cost to the other one.",
    "start": "705360",
    "end": "710470"
  },
  {
    "text": "Except that, except that to the pairs I've got got longer.",
    "start": "710470",
    "end": "720750"
  },
  {
    "text": "Because they used to be it used to be this way.",
    "start": "720750",
    "end": "726280"
  },
  {
    "text": "W1 bar at that level five say, but now it's W zero at level six and W one level six.",
    "start": "726280",
    "end": "731980"
  },
  {
    "text": "So now we had previously were counting both of them off to level five. Now not not each each got one more.",
    "start": "731980",
    "end": "737740"
  },
  {
    "text": "So. So this is the cost of some three. But. But now if like if I got to the optimum three for those end plus one weight.",
    "start": "737740",
    "end": "747720"
  },
  {
    "text": "Then I then I can get even better cost maybe. OK, but now look at any look at this optimum tree for all the ways.",
    "start": "747720",
    "end": "757740"
  },
  {
    "text": "So that optimum tree at some it's some binary tree.",
    "start": "757740",
    "end": "762760"
  },
  {
    "text": "How does it look? I don't know. But it's got a W zeros sitting somewhere and um and w one is sitting somewhere in the tree.",
    "start": "762760",
    "end": "776250"
  },
  {
    "text": "I don't know where. But what we can do is though is swap these guys so that they appear at the deepest level.",
    "start": "776250",
    "end": "785920"
  },
  {
    "text": "So so if if W. zero, if there was if W zero wasn't at the at the deepest level of any leaf in the tree,",
    "start": "785920",
    "end": "792600"
  },
  {
    "text": "I let's say this was W three here or something like that, I can swap it down and and put W zero here.",
    "start": "792600",
    "end": "799560"
  },
  {
    "text": "I get another tree, but it's, it's better because W zero is the smallest weight of all. And so. And so. Bye bye.",
    "start": "799560",
    "end": "809190"
  },
  {
    "text": "You know I by lengthening the code for, for something with small weight and shortening the code for something with larger weight,",
    "start": "809190",
    "end": "816410"
  },
  {
    "text": "I certainly certainly can't be doing any harm. So I'm getting a better tree or the same. At least the same cause. Similar. I can swap W one over here with with with with whoever is the the sibling of of this guy at the lowest level.",
    "start": "816410",
    "end": "832170"
  },
  {
    "text": "So. So this means then that, that this will that I can get an even better tree or since this was alcohol I really couldn't improve it.",
    "start": "832170",
    "end": "841829"
  },
  {
    "text": "This would be a tree for W that has w zero and W one as as siblings in a tree.",
    "start": "841830",
    "end": "856280"
  },
  {
    "text": "So I converted this, I converted convert tree which was the best for the weight into one. That's, that's maybe even better. So it would have to be no better because it was best.",
    "start": "856280",
    "end": "868100"
  },
  {
    "text": "Anyway I do know that zero and one are now are no brothers or sisters or whatever, you know, whatever gender you prefer from them now.",
    "start": "868100",
    "end": "877860"
  },
  {
    "text": "But this but the cost of this tree is equal to it. But now now you see this is a w a zero possibility one plus the cost of some tree for W bar.",
    "start": "877860",
    "end": "890870"
  },
  {
    "text": "Because because this tree. I might as well leave these two guys are our partners, so.",
    "start": "890870",
    "end": "896660"
  },
  {
    "text": "So now I can I can say, well, well, prune them off. And I got end weights and I've got some three for those. Anyway, it's the W vase.",
    "start": "896660",
    "end": "904970"
  },
  {
    "text": "And this is greater than or equal to the best possible tree for the W bars. So the optimum for for the label. And so I started out with.",
    "start": "904970",
    "end": "915740"
  },
  {
    "text": "And I got something great and equal to itself. So it has to be equal. All the way, all the way down the line. So this proves the connection between Ottoman trees for these N waves and the Ottoman trees for them plus one way.",
    "start": "915740",
    "end": "929709"
  },
  {
    "text": "So that's why Hoffmann's algorithm works. OK. So Hoffmann did this, as I said, in the early 50s.",
    "start": "929710",
    "end": "934970"
  },
  {
    "text": "Now, at the end of the 50s, Gilbert Moore at Bell Labs raised the question of alphabetic codes and and wrote a very, very interesting paper there.",
    "start": "934970",
    "end": "946100"
  },
  {
    "text": "But they didn't have a particularly good way to find an optimum code.",
    "start": "946100",
    "end": "953670"
  },
  {
    "text": "It looked like because there's a certain number of trees with within given leaves.",
    "start": "953670",
    "end": "958880"
  },
  {
    "text": "Goes something like four to the end. So you got. So you have to do around here. But they give heuristic methods to methods that would be guaranteed to get within two of the entropy.",
    "start": "958880",
    "end": "969350"
  },
  {
    "text": "And there's very nice paper. But it was open how to find the optimum alphabetic code.",
    "start": "969350",
    "end": "976040"
  },
  {
    "text": "And and and so now professor at UCSD, Keesey, who let's see, I'm not sure.",
    "start": "976040",
    "end": "985699"
  },
  {
    "text": "I think he was working at IBM and in the early 60s anyway, he came up with in 1961 or so with with a method that he couldn't prove.",
    "start": "985700",
    "end": "993590"
  },
  {
    "text": "But it seemed to work and were where in every case he tried, he he was able to get the optimum alphabetic code.",
    "start": "993590",
    "end": "1004070"
  },
  {
    "text": "And and he kept looking at it here. theSea is a guy with with the great Comintern intuition.",
    "start": "1004070",
    "end": "1011470"
  },
  {
    "text": "He can get some psych out things. He discovered quite a few interesting algorithms for scheduling and things like that in those days and wrote books on energy programing.",
    "start": "1011470",
    "end": "1023220"
  },
  {
    "text": "He but he couldn't figure out any way to prove that this method was working.",
    "start": "1023220",
    "end": "1028419"
  },
  {
    "text": "He just sort of, you know, felt in his bones that it was correct. But that wasn't good enough.",
    "start": "1028420",
    "end": "1033500"
  },
  {
    "text": "And almost 10 years went by and and and he used to continue to work on it.",
    "start": "1033500",
    "end": "1040220"
  },
  {
    "text": "And one together with one of his students, Alan Tucker, the they finally they found a proof about 1970.",
    "start": "1040220",
    "end": "1051100"
  },
  {
    "text": "And. And this was the famous one time who Tucker algorithm.",
    "start": "1051100",
    "end": "1057640"
  },
  {
    "text": "And in the first edition of my book on sorting and searching, this is the one that came out in 1973.",
    "start": "1057640",
    "end": "1065170"
  },
  {
    "text": "I, I, I, I presented the WHO Tucker algorithm, but I couldn't really give it in detail.",
    "start": "1065170",
    "end": "1072190"
  },
  {
    "text": "I had to I had to give it in indirectly and I gave it you gave an example of the construction and so on.",
    "start": "1072190",
    "end": "1079120"
  },
  {
    "text": "And then I, I'll read you this part here. It says, It is beyond the scope of this book to give a proof that the Who Tucker algorithm is valid.",
    "start": "1079120",
    "end": "1086470"
  },
  {
    "text": "No simple proof is known as quite possible. No simple proof will ever be found. That turned out to be false. There was a fairly if they could.",
    "start": "1086470",
    "end": "1097179"
  },
  {
    "text": "The proof was cut down to about five or ten pages in nineteen seventy seven. But anyway, I tried to. Yeah.",
    "start": "1097180",
    "end": "1106000"
  },
  {
    "text": "Anyway, it's a very complicated method and an almost almost miraculous that that it worked.",
    "start": "1106000",
    "end": "1114030"
  },
  {
    "text": "And in this and you know, in the next phase I tried to present an idea to prove that the implementation could be done in order and log in time,",
    "start": "1114030",
    "end": "1124570"
  },
  {
    "text": "which was which was actually a new result at the time my book came out. But anyway, that was the way it stood. And in the new edition of my book, which, you know, makes a marvelous Christmas present.",
    "start": "1124570",
    "end": "1140170"
  },
  {
    "text": "This is one of the sections that I rewrote completely. So now we have the Garcia Wax algorithm and.",
    "start": "1140170",
    "end": "1148510"
  },
  {
    "text": "And just as I say, was Michelle Y-axis thesis. She was a student of our D.A. in 76, 77.",
    "start": "1148510",
    "end": "1157330"
  },
  {
    "text": "It just occurred to me today while I was swimming that that I spent the whole summer of 1977 with T.C., who you're losing China.",
    "start": "1157330",
    "end": "1165279"
  },
  {
    "text": "And we never talked about this particular problem at the time, but it was all going on at that point.",
    "start": "1165280",
    "end": "1171520"
  },
  {
    "text": "I don't know. The guys who likes children is very similar to the WHO and Tucker all. But it's but it's it's got a new insight, a new approach that made the whole thing start to get simpler.",
    "start": "1171520",
    "end": "1183850"
  },
  {
    "text": "Still, the proof that Garcia and Weiss gave was would have been beyond the scope of my of my book.",
    "start": "1183850",
    "end": "1189830"
  },
  {
    "text": "But. But in any way, here it is in the new book, you see now what used to be called the Tucker idea and is now called grassy, like the star here means beware.",
    "start": "1189830",
    "end": "1200420"
  },
  {
    "text": "You know, it's not going to be real easy. But anyway, it's important.",
    "start": "1200420",
    "end": "1208080"
  },
  {
    "text": "And and ah, but the great thing, however, was that Jeffrey Kingston about 10 years ago.",
    "start": "1208080",
    "end": "1219190"
  },
  {
    "text": "So another 10 years went by. And then Jeffrey Kingston found a beautifully short way to prove the Garcia wax algorithm.",
    "start": "1219190",
    "end": "1227019"
  },
  {
    "text": "That's what I'm going to present to you today. And a few a few more ideas. I want to give the whole proof, because I it's hard for me to prove something from the eyes.",
    "start": "1227020",
    "end": "1235360"
  },
  {
    "text": "I'm going to give you the idea of the proof. And and so that's I think you'll be able to you'll be able to follow it if you do buy this book.",
    "start": "1235360",
    "end": "1245470"
  },
  {
    "text": "However, I have to I have to warn you that as I was preparing this lecture, I noticed a few typographical errors.",
    "start": "1245470",
    "end": "1254710"
  },
  {
    "text": "And although this is really the third printing of the book, which is the first printing was was in April and the third printing was in August of this year.",
    "start": "1254710",
    "end": "1265519"
  },
  {
    "text": "So you'll have to wait for the fourth printing to get this particular page correct, because I just made the change today.",
    "start": "1265520",
    "end": "1273700"
  },
  {
    "text": "But there's a online Arada that you can get off of the Web. And if you look for page 447 on the red eye, you'll see that I have for example,",
    "start": "1273700",
    "end": "1284710"
  },
  {
    "text": "here is a few a few little things where you change plus size to minus signs in my case.",
    "start": "1284710",
    "end": "1291279"
  },
  {
    "text": "I don't know what I was doing something with Emacs at the time. And I got a copy.",
    "start": "1291280",
    "end": "1297850"
  },
  {
    "text": "I made a mistake with editing. So. So. And then on the next page, I got to write another couple of typos cause I was changing notation in midstream and changing my notes.",
    "start": "1297850",
    "end": "1307260"
  },
  {
    "text": "Kingston's paper, when left to write mine, went right to left and so on. So I said, all right. So I. I'm sorry about that.",
    "start": "1307260",
    "end": "1314770"
  },
  {
    "text": "But anyway, go book like this.",
    "start": "1314770",
    "end": "1320840"
  },
  {
    "text": "I went when I'm the one who finds the errors. It means two things. First of all, nobody's reading this page. And and and secondly, I don't have to pay anybody for finding the book.",
    "start": "1320840",
    "end": "1340300"
  },
  {
    "text": "But I do like it better when somebody else finds a mistake. But I don't like to make mistakes. Still, though, this this is this was fairly hairy stuff.",
    "start": "1340300",
    "end": "1351610"
  },
  {
    "text": "Now you see how we do in here, which I got to trying to gauge.",
    "start": "1351610",
    "end": "1356980"
  },
  {
    "text": "Makes the first when you retire the first cut. Can you move your class? Yeah. The first thing that goes is your sense of timing. So when you're recursive. Okay.",
    "start": "1356980",
    "end": "1366519"
  },
  {
    "text": "Well, now I think what I'll do is is is first tell you how this method Holly algorithm works because it is.",
    "start": "1366520",
    "end": "1375790"
  },
  {
    "text": "So you can see it's still a little bit miraculous. And then I will show you something.",
    "start": "1375790",
    "end": "1385420"
  },
  {
    "text": "Another thing you can download from the web, by the way, is a program for the guys who works algorithm. You should look at my home page. And one of the things you can click on is downloadable programs and on a page of downloadable programs.",
    "start": "1385420",
    "end": "1396760"
  },
  {
    "text": "One of the uses, Carsey, Alexa Elgan. This is a this is a two page program and this is the whole thing, just two pages of that.",
    "start": "1396760",
    "end": "1408020"
  },
  {
    "text": "That that does it all. This is exact. In fact, I have to admit that sometimes I write program without my many comments.",
    "start": "1408020",
    "end": "1415780"
  },
  {
    "text": "You know, this is this was exactly the program that I wrote when I was writing this part of the book and and preparing the illustrations in that book.",
    "start": "1415780",
    "end": "1426280"
  },
  {
    "text": "So if there's anything wrong with this program, they probably something wrong with illustrations to help.",
    "start": "1426280",
    "end": "1432040"
  },
  {
    "text": "Maybe if you haven't seen a slew of programs before, the idea of C Web is,",
    "start": "1432040",
    "end": "1438040"
  },
  {
    "text": "is that you that the program appears in small and small segments in each segment that tells you to read in other segments.",
    "start": "1438040",
    "end": "1445010"
  },
  {
    "text": "For example, here's the main program and it can. The main program says it says a fair few registers and then say scan the command line two,",
    "start": "1445010",
    "end": "1455740"
  },
  {
    "text": "which means Section two will tell you what kind of command line means. And then says, do phase one, do phase two.",
    "start": "1455740",
    "end": "1461290"
  },
  {
    "text": "Do phase three. And then you can find out what that is. So so Scandic main line is this thing here which, you know, looks and sees if you give a usage message,",
    "start": "1461290",
    "end": "1469770"
  },
  {
    "text": "if it doesn't have this man on it, stuff like that, and then and then it reads out. In this case, I, I defined the program.",
    "start": "1469770",
    "end": "1477340"
  },
  {
    "text": "So that just takes the weight w zero to w end and you just put them on the on the command line and it kind of tells you how then do.",
    "start": "1477340",
    "end": "1490090"
  },
  {
    "text": "One is this little piece of code here, which it prints out, saying, I'm doing phase one,",
    "start": "1490090",
    "end": "1495669"
  },
  {
    "text": "and then it does a little bit a little loop here, which calls a combined subroutine.",
    "start": "1495670",
    "end": "1501190"
  },
  {
    "text": "A combined subroutine is the is the guts of the algorithm. I'll talk mostly about that two.",
    "start": "1501190",
    "end": "1506200"
  },
  {
    "text": "Phase two. This is this this this really short program here. Can you read that? Yeah. So it just column call sovereignty a recursive subroutine and a recursive subroutine is this long.",
    "start": "1506200",
    "end": "1519610"
  },
  {
    "text": "So phase two is is trivial. Phase three is also pretty trivial if it calls another subroutine in.",
    "start": "1519610",
    "end": "1526510"
  },
  {
    "text": "And so anyway, that's the whole program. But the Garcia works algorithm is a three phase algorithm that that did, I think was a two page program to keep this program.",
    "start": "1526510",
    "end": "1538130"
  },
  {
    "text": "And and if you want to experiment with it yourself, you can you can get this this code and play with.",
    "start": "1538130",
    "end": "1545910"
  },
  {
    "text": "While I think about it, last night I gave at the end of October, I was talking about bubble sort at random and I and I and I proved the theorem that said that that if",
    "start": "1545910",
    "end": "1556090"
  },
  {
    "text": "you choose a by random method to construct a primitive sorting network of four and squared steps,",
    "start": "1556090",
    "end": "1566309"
  },
  {
    "text": "it is is an upper bound on amount of time that you need to get a sorting method.",
    "start": "1566310",
    "end": "1572290"
  },
  {
    "text": "Right after that lecture, I decided to try and find out what was the best possible constant. I proved upper bound before and squared.",
    "start": "1572290",
    "end": "1578620"
  },
  {
    "text": "But the question, natural question is how long you have to keep going until you get a sorting network, not necessarily bubble sort.",
    "start": "1578620",
    "end": "1584940"
  },
  {
    "text": "And. And the answer is almost certainly two and squared.",
    "start": "1584940",
    "end": "1590830"
  },
  {
    "text": "I mean, I computed lots and lots of cases with less and less random numbers, and the constant came out to like one point nine nine seven plus or minus something.",
    "start": "1590830",
    "end": "1599380"
  },
  {
    "text": "So so I wouldn't want to be anything but two if it's that close to two. So. So that that's a, you know, unsolved problem.",
    "start": "1599380",
    "end": "1611080"
  },
  {
    "text": "But the kind of a fascinating conjecture, I think, to how long would it take to generate a sorting method of at random.",
    "start": "1611080",
    "end": "1618269"
  },
  {
    "text": "And that's another program you can download is to is to do that kind of experiment, to do the empirical studies on on unsorted network.",
    "start": "1618270",
    "end": "1626650"
  },
  {
    "text": "OK. Now to the Garcia works algorithm. What we do is this method.",
    "start": "1626650",
    "end": "1632530"
  },
  {
    "text": "You take the weights and we write them down. And in this case, they aren't necessarily in increasing order.",
    "start": "1632530",
    "end": "1638740"
  },
  {
    "text": "And if they were increasing order, we know and we put infinity before and after the weights.",
    "start": "1638740",
    "end": "1646570"
  },
  {
    "text": "And now we find the smallest. Index, Kay.",
    "start": "1646570",
    "end": "1653840"
  },
  {
    "text": "With W K minus one less than or equal W.K. plus one.",
    "start": "1653840",
    "end": "1662809"
  },
  {
    "text": "So we're looking at things that are two apart in the list, and we try to find the first time when when we get to when we get a less than or equal, now we're bound to get a less than or equals.",
    "start": "1662810",
    "end": "1677090"
  },
  {
    "text": "Sooner or later, because this is a sticking in here. So w n minus one is less than or equal to to infinity.",
    "start": "1677090",
    "end": "1684380"
  },
  {
    "text": "So, so, so there will be some K. But that has this property Keiko's in is going to work even if any zero.",
    "start": "1684380",
    "end": "1692330"
  },
  {
    "text": "But, but go to that and keep going, you know, try to find the smallest K the first time this occurs.",
    "start": "1692330",
    "end": "1699409"
  },
  {
    "text": "And then. And then we combine. W K minus one, plus WC, so add the two numbers together and.",
    "start": "1699410",
    "end": "1714550"
  },
  {
    "text": "Move left. Until you find a place where W.J. minus one is greater than or equal.",
    "start": "1714550",
    "end": "1730030"
  },
  {
    "text": "W. This new weight here. W K plus one. And that is.",
    "start": "1730030",
    "end": "1736730"
  },
  {
    "text": "It is. What?",
    "start": "1736730",
    "end": "1743080"
  },
  {
    "text": "This is a K minus one and a K. I got yeah. Keep us one just sits out there. It might be infinity in fact. I wouldn't want to add to infinity. And but.",
    "start": "1743080",
    "end": "1754570"
  },
  {
    "text": "But this is. And w so.",
    "start": "1754570",
    "end": "1760450"
  },
  {
    "text": "So I got to move it left until it's until it bumps against some something that's bigger than or equal.",
    "start": "1760450",
    "end": "1767110"
  },
  {
    "text": "So this has to be bigger than W.J. W.J. plus one.",
    "start": "1767110",
    "end": "1772840"
  },
  {
    "text": "And so on up to WCAU minus two. Anything between the place where he started.",
    "start": "1772840",
    "end": "1779770"
  },
  {
    "text": "Stop it. If in other words, after I add these two guys together, I.",
    "start": "1779770",
    "end": "1786960"
  },
  {
    "text": "I have to shift him to the left. If they're bigger than the guy to their left, I got to shift it.",
    "start": "1786960",
    "end": "1792690"
  },
  {
    "text": "And so let me show you. Let me show you an example. And I will show you on this on on this particular run here, the program where I started out with with 10 weights.",
    "start": "1792690",
    "end": "1803710"
  },
  {
    "text": "One hundred. One thousand. I used all powers of 10 in here so that the addition isn't going to be a hang up.",
    "start": "1803710",
    "end": "1809320"
  },
  {
    "text": "We can and we can. And we can actually, you know, these are these are these are ten different powers of ten.",
    "start": "1809320",
    "end": "1814750"
  },
  {
    "text": "And so there's an add up to one on one on one. OK. So we start out, in fact. So we put it we imagine infinity before and after the whole.",
    "start": "1814750",
    "end": "1823480"
  },
  {
    "text": "The whole the whole business infinity. And then since I'm looking for the smaller scale, you have to input the whole the whole array first I.",
    "start": "1823480",
    "end": "1833300"
  },
  {
    "text": "I keep trying. So. So I look at things that are two apart. And as long as I've got a greater than relation, I keep going.",
    "start": "1833300",
    "end": "1838780"
  },
  {
    "text": "So one hundred, you know, infinity is greater than one. So then the next thing is one thousand one hundred is not greater than 1000.",
    "start": "1838780",
    "end": "1847860"
  },
  {
    "text": "And so at this point I have to combine these two guys. So I combine them and that's it.",
    "start": "1847860",
    "end": "1854670"
  },
  {
    "text": "No problem here, because the Naureen, the slide left, so, so. So here's what my program type Soldats is. I've created Node nine, which is one to one.",
    "start": "1854670",
    "end": "1863490"
  },
  {
    "text": "It's the sum of these two guys as a sum of No. Zero and node one.",
    "start": "1863490",
    "end": "1868770"
  },
  {
    "text": "This was node zero one two up to no, no, No.",
    "start": "1868770",
    "end": "1874170"
  },
  {
    "text": "Eight maybe. May be. Is it. This is zero. One, two, three, four, five, six, seven, eight.",
    "start": "1874170",
    "end": "1880830"
  },
  {
    "text": "Yeah. I've got eight. I've got nine nodes. But but they're number two. It's a node nine. It has a weight of one to one. And it's the sum of those two weights. So now there it is now.",
    "start": "1880830",
    "end": "1892110"
  },
  {
    "text": "And 1000. I didn't really put 1000 in the buffer until I until I knew it would it would be OK.",
    "start": "1892110",
    "end": "1903059"
  },
  {
    "text": "So then then the next time, the next guy coming in is ten thousand.",
    "start": "1903060",
    "end": "1908670"
  },
  {
    "text": "Again, it's it's going it's going to cost some combination. And so it's another trivial combination. We we had the one to one. There's a ten thousand sitting out here which I guess I can put out there in parenthesis.",
    "start": "1908670",
    "end": "1919860"
  },
  {
    "text": "Now I combine these two and I get one one oh one and then we add the ten thousand gone.",
    "start": "1919860",
    "end": "1925890"
  },
  {
    "text": "It'll it'll be down here now. What comes after ten thousand or a million is a huge guy.",
    "start": "1925890",
    "end": "1932130"
  },
  {
    "text": "So, so same deal that gets combined in there.",
    "start": "1932130",
    "end": "1938400"
  },
  {
    "text": "And then we got a million sitting out here. Now we can watch the computer sits next. Next thing comes down is ten and that's good because it's still there. See, this guy is bigger than this guy and infinity is bigger than this guy.",
    "start": "1938400",
    "end": "1949800"
  },
  {
    "text": "And this guy is bigger than this guy. Then the next one is going to cause another combination. The next one, I should I guess I should print it out here. But it's it's big.",
    "start": "1949800",
    "end": "1958150"
  },
  {
    "text": "It's it's it's kind of a big one. So it causes this combination now where we're going to have to do some kind of a shift left.",
    "start": "1958150",
    "end": "1964080"
  },
  {
    "text": "One of these times is gonna be a little more interesting. So node fifteen.",
    "start": "1964080",
    "end": "1972510"
  },
  {
    "text": "Let's see what's happening here. So this. So I add this in this together.",
    "start": "1972510",
    "end": "1980110"
  },
  {
    "text": "Maybe if I. I'll tell you what I'll do.",
    "start": "1980110",
    "end": "1986179"
  },
  {
    "text": "I'm going to write just the logarithm of these numbers or just a number of digits. Four, five, nine, two, six, eight, seven.",
    "start": "1986180",
    "end": "1996650"
  },
  {
    "text": "This happens to be related to the expansion of PI. Now, just just a pure coincidence.",
    "start": "1996650",
    "end": "2004180"
  },
  {
    "text": "So. So. But now. So. So we put infinity here right now. Now, what's happening on this case instead of instead of adding the numbers together, we're just taking the max.",
    "start": "2004180",
    "end": "2013210"
  },
  {
    "text": "Because when I had to get a 2010, you know, then this is the only thing that matters as far as the decisive numbers is the.",
    "start": "2013210",
    "end": "2022529"
  },
  {
    "text": "It is to take the max. So I'll take the max. So three is this is less than four.",
    "start": "2022530",
    "end": "2028270"
  },
  {
    "text": "That's gonna cause the three and one to combine into a into the max of three and one which is a three to four and a five.",
    "start": "2028270",
    "end": "2035200"
  },
  {
    "text": "The three is less than the five of us can combine the three and four together into a four, the four and the nine is going to cause this to combine into a five others.",
    "start": "2035200",
    "end": "2044080"
  },
  {
    "text": "So what's the combination going on here? No, I got infinity. Five. Nine. Two. Nine.",
    "start": "2044080",
    "end": "2051399"
  },
  {
    "text": "Six to eight. So eight is going to cause us to six and two to combine into a six.",
    "start": "2051400",
    "end": "2057250"
  },
  {
    "text": "But the six is supported by nine on the left. So I don't have to I don't have to bring the six to the left. So at this point, I'm sitting here with infinity five, nine, six, eight.",
    "start": "2057250",
    "end": "2065740"
  },
  {
    "text": "And I haven't looked yet at the rest of the guys, which is seven infinity. So the six seven is gonna cause the eight to two.",
    "start": "2065740",
    "end": "2073179"
  },
  {
    "text": "Again, eight is supported by the nine. And the AIDS is bigger than infinity, so.",
    "start": "2073180",
    "end": "2081359"
  },
  {
    "text": "So that's going to cause the seven to go. In fact, this isn't ever getting into the next part, into the next part of the loop.",
    "start": "2081360",
    "end": "2087370"
  },
  {
    "text": "So. So infinity causes this to combine into an eight and an eight.",
    "start": "2087370",
    "end": "2092629"
  },
  {
    "text": "That causes the nine and eight to combine. Huh? Now it gives me a nine. At this point, the nine doesn't get inserted after the five,",
    "start": "2092630",
    "end": "2099290"
  },
  {
    "text": "but it gets inserted before the five because of my rule is after you add the two together.",
    "start": "2099290",
    "end": "2104830"
  },
  {
    "text": "Then you have to shift it to the left if necessary. If the guy to your left was smaller than you.",
    "start": "2104830",
    "end": "2111530"
  },
  {
    "text": "All right. That's the Garcia like algorithm. It's the phase one and up.",
    "start": "2111530",
    "end": "2119020"
  },
  {
    "text": "And I illustrated on Exline real data. And the next page. Well, actually, at the bottom of this page here, the real data.",
    "start": "2119020",
    "end": "2128480"
  },
  {
    "text": "I'm taking data from English where I'm using a twenty seven letter code with space.",
    "start": "2128480",
    "end": "2135580"
  },
  {
    "text": "And in twenty six letters of the alphabet. So so first of all, this one eighty six, that's the frequency of spaces.",
    "start": "2135580",
    "end": "2143030"
  },
  {
    "text": "And then sixty four is for the for the spaces. For the letter. A letter B and finally the letter Z has a relative frequency of one and these numbers all add up to a thousand in this case.",
    "start": "2143030",
    "end": "2154580"
  },
  {
    "text": "So the question would be to find the best possible code for the alphabetic prefix code for English text only using uppercase letters C.",
    "start": "2154580",
    "end": "2167720"
  },
  {
    "text": "And in this case, as we as we read through, you see one eighty six is bigger than thirteen.",
    "start": "2167720",
    "end": "2174859"
  },
  {
    "text": "Sixty four is bigger than twenty two. But thirteen is less than 32. So this 32 is going to cause us to add 13 plus twenty two together and we'll put and we combine these and get thirty five.",
    "start": "2174860",
    "end": "2186570"
  },
  {
    "text": "We'll see if it gets, if the computer actually did that comes in here and says yep. Thirteen plus twenty two is thirty five. OK.",
    "start": "2186570",
    "end": "2194810"
  },
  {
    "text": "Next to 30. This one or three. Thirty five is less than one or three. So that's going to, that's going to cause the thirty two and thirty, thirty five to combined into sixty seven.",
    "start": "2194810",
    "end": "2203600"
  },
  {
    "text": "But now that's going to have to shift to the left of the sixty four because sixty seven is bigger than sixty four. Here we get. So, so, so this sixty seven actually has to slide in here to the left of the 64 and that's what.",
    "start": "2203600",
    "end": "2215910"
  },
  {
    "text": "And that's the states that you see at this point here where it's one eighty six sixty seven sixty four.",
    "start": "2215910",
    "end": "2221910"
  },
  {
    "text": "One or three is coming up now. And.",
    "start": "2221910",
    "end": "2232589"
  },
  {
    "text": "Wait, what? Where did the one all three go? Let's go to break.",
    "start": "2232590",
    "end": "2240140"
  },
  {
    "text": "Let's get a little you're making. Don't break my legs, geographic or.",
    "start": "2240140",
    "end": "2249089"
  },
  {
    "text": "Yes. Yes, this is exactly why it's an amazing algorithm.",
    "start": "2249090",
    "end": "2254380"
  },
  {
    "text": "So, so, so. And we're going to have to do this.",
    "start": "2254380",
    "end": "2259430"
  },
  {
    "text": "Yes. I'm glad you noticed that, because this is the whole the whole the whole reason why why nobody believes to see for so many years.",
    "start": "2259430",
    "end": "2266849"
  },
  {
    "text": "Yeah. Yeah. Because I've got a different I've got a different problem. I moved the 67 out. So. So. So yeah.",
    "start": "2266850",
    "end": "2273910"
  },
  {
    "text": "But no, I'm just trying to figure out what happened to one oh three. Excuse me.",
    "start": "2273910",
    "end": "2280180"
  },
  {
    "text": "So this combines again. So the all three is sitting still sitting out there in 60 feet and seven combines with the 64.",
    "start": "2280180",
    "end": "2287540"
  },
  {
    "text": "Yeah, but it's that the left is 64. No, it's not at the right. So that's actually going to be somewhat important.",
    "start": "2287540",
    "end": "2294070"
  },
  {
    "text": "And then the one three comes out here and we keep on going. OK. Now the whole process is is shown here in this in this chart.",
    "start": "2294070",
    "end": "2301270"
  },
  {
    "text": "So so you see the 13 and 22. Can you zoom in? Give the give the close up. So in 13 and twenty two combined. Make this thirty five.",
    "start": "2301270",
    "end": "2310030"
  },
  {
    "text": "Then the 32 makes sixty seven. But that shifts or shifts over with sixty four and combined into one thirty 131 and so on.",
    "start": "2310030",
    "end": "2315700"
  },
  {
    "text": "Makes this, makes this a rather rather herry combination.",
    "start": "2315700",
    "end": "2322839"
  },
  {
    "text": "But the, the fact is that even though we were sliding these things around and destroying the alphabetic order,",
    "start": "2322840",
    "end": "2329890"
  },
  {
    "text": "we're getting a problem that turns out to be equivalent in a proper sense of equivalent to the original problem.",
    "start": "2329890",
    "end": "2337220"
  },
  {
    "text": "And that's the weirdest thing. So, so, so weak. So we get this tree and it and it finally it oh, we would use this thing down.",
    "start": "2337220",
    "end": "2345400"
  },
  {
    "text": "So we got only one week left. And one of the exercises in this Guinness book says, well, what happens if you if you expand it,",
    "start": "2345400",
    "end": "2355609"
  },
  {
    "text": "if if you untwisted everything and open it up into a binary tree, you know, and said, well, what order with the leaves appear in this in this thing?",
    "start": "2355610",
    "end": "2362830"
  },
  {
    "text": "And if you look at the answer to that exercise, it tells you the order in which the in which the things appear.",
    "start": "2362830",
    "end": "2369880"
  },
  {
    "text": "Of course, you're not supposed to look at the answers, you know, unless you're the author.",
    "start": "2369880",
    "end": "2376930"
  },
  {
    "text": "Now, here it is. This is the order. Actually, the space is at the end instead of the beginning, and it comes first.",
    "start": "2376930",
    "end": "2384700"
  },
  {
    "text": "Now, let me let me let me explain that. What's the first leftmost thing in the tree?",
    "start": "2384700",
    "end": "2389980"
  },
  {
    "text": "We follow all the left branches. So you go left here and you go left here and you go left here and you go left here and you get to the letter E!",
    "start": "2389980",
    "end": "2398980"
  },
  {
    "text": "And and and what's the right most character when you go right and fix to the right, to the right?",
    "start": "2398980",
    "end": "2404280"
  },
  {
    "text": "And you're down here at the space. So. So you untwist this whole thing. You get a weird binary three.",
    "start": "2404280",
    "end": "2412809"
  },
  {
    "text": "However, the thing about this binary tree is that it's going to turn out that it has the same cost as the best possible alphabetic code.",
    "start": "2412810",
    "end": "2423830"
  },
  {
    "text": "So the binary tree that you get turns out you can be a tree that that, you know, it has all kind of branching,",
    "start": "2423830",
    "end": "2434980"
  },
  {
    "text": "goes to the left and goes to the left and hasn't all of a sudden has an E here. You know, and goes to the right a few times and you see actually at the second level,",
    "start": "2434980",
    "end": "2449180"
  },
  {
    "text": "the space occurs and the E occurs at the one, two, one, two, three, four, fifth level one.",
    "start": "2449180",
    "end": "2456619"
  },
  {
    "text": "So one, two, three, four, fourth level zero, one, two, three, four.",
    "start": "2456620",
    "end": "2463910"
  },
  {
    "text": "So so the E should actually be here, but you can expand that that whole three out and you can figure out the level of every of every leaf in the tree.",
    "start": "2463910",
    "end": "2474859"
  },
  {
    "text": "So you get a pattern of level numbers. And the as they say, like the space was at that level, too.",
    "start": "2474860",
    "end": "2484500"
  },
  {
    "text": "Now, you know, you sort the leave leaves and you keep their levels and you say, well, spaces at level two A is that level four.",
    "start": "2484500",
    "end": "2494310"
  },
  {
    "text": "B, is that level six. C is at level six. Is that level five?",
    "start": "2494310",
    "end": "2500380"
  },
  {
    "text": "He is a level four. As I said, it turned out to be a level six and so on. Z turned out to be a level seven, Y, X and Y. We're at level eight.",
    "start": "2500380",
    "end": "2508500"
  },
  {
    "text": "And now you you if you look only at these level numbers.",
    "start": "2508500",
    "end": "2515570"
  },
  {
    "text": "And you build a binary tree that's defined by these level numbers, and that turns out to be the answer to the problem.",
    "start": "2515570",
    "end": "2523640"
  },
  {
    "text": "Is this magic or is this man? I mean, this is this is like this is. And it's the same kind of thing happened in the WHO Tucker algorithm.",
    "start": "2523640",
    "end": "2529829"
  },
  {
    "text": "You you started out and you started moving his nose around and destroying alphabetical order. And then all of a sudden at the end, it says, OK, now you've got a binary tree that gives you level numbers.",
    "start": "2529830",
    "end": "2539420"
  },
  {
    "text": "Now use those level numbers and the level numbers from that final are the ones you finally you end up.",
    "start": "2539420",
    "end": "2547760"
  },
  {
    "text": "And as I say, they finally found a long proof that that showed that it was true.",
    "start": "2547760",
    "end": "2554120"
  },
  {
    "text": "And and Kingston found a short proof.",
    "start": "2554120",
    "end": "2559640"
  },
  {
    "text": "So. So this is the this is the the winning code for the alphabetic frequency data.",
    "start": "2559640",
    "end": "2569900"
  },
  {
    "text": "And if we if we convert that two to two, actually, there is one.",
    "start": "2569900",
    "end": "2575839"
  },
  {
    "text": "Here's what here's what it says. Make a space come out as double zero and the letter E has four four bits to it and so on.",
    "start": "2575840",
    "end": "2581840"
  },
  {
    "text": "And the average number of bits per letter, according to this, is four point two.",
    "start": "2581840",
    "end": "2588710"
  },
  {
    "text": "So. Well, 27 letters are you are you could do it with five that code just because there's a on 30.",
    "start": "2588710",
    "end": "2595609"
  },
  {
    "text": "You can get thirty two letters in a in a five that call the four point two. You still say you're saving about 15 percent. It's not too bad. In fact it's optimal.",
    "start": "2595610",
    "end": "2604240"
  },
  {
    "text": "It's the best you can possibly do for four alphabetic coding. Now how can anybody prove that such such and such a method works?",
    "start": "2604240",
    "end": "2612980"
  },
  {
    "text": "And the and the the the thing that Kingson started out with was it was a very nice,",
    "start": "2612980",
    "end": "2622520"
  },
  {
    "text": "beautiful, simple observation that that leads to that makes the problem start to simplify.",
    "start": "2622520",
    "end": "2629900"
  },
  {
    "text": "And the that his his main idea is suppose you have a case where w k minus one is greater than W.K. plus one,",
    "start": "2629900",
    "end": "2639079"
  },
  {
    "text": "as in our example, he says if this holds then in the optimum tree.",
    "start": "2639080",
    "end": "2647570"
  },
  {
    "text": "In any optimum tree. Level of kay is less than or equal level of K plus one, if, in other words.",
    "start": "2647570",
    "end": "2658360"
  },
  {
    "text": "If if you've got a large weight and then you followed a step to by a small weight,",
    "start": "2658360",
    "end": "2665580"
  },
  {
    "text": "then the weight and then the guy in the middle is actually going to be up higher in the tree or at the same level as the as as the small guy is.",
    "start": "2665580",
    "end": "2674880"
  },
  {
    "text": "So I mean, small weight usually corresponds to a large level. So so this is the this this is the the first year and second.",
    "start": "2674880",
    "end": "2683970"
  },
  {
    "text": "And furthermore, if they're equal. Then in some.",
    "start": "2683970",
    "end": "2692820"
  },
  {
    "text": "Optimum theory, not all of them. This inequality holds.",
    "start": "2692820",
    "end": "2701900"
  },
  {
    "text": "This is every up. And this is some so. So now how do we prove that? And that's the that's a key to the thing.",
    "start": "2701900",
    "end": "2711660"
  },
  {
    "text": "So let's suppose that is false. So suppose that I have a case where I have an optimum I have a tree.",
    "start": "2711660",
    "end": "2720490"
  },
  {
    "text": "Let's say that that doesn't have L.K. less than or equal L.K. plus one.",
    "start": "2720490",
    "end": "2727290"
  },
  {
    "text": "So suppose we have a tree with L.K. greater than L.K. plus one.",
    "start": "2727290",
    "end": "2735750"
  },
  {
    "text": "So that means that there's a leaf. No K is sitting here. But it's at a higher level than leaf.",
    "start": "2735750",
    "end": "2743310"
  },
  {
    "text": "Then came K plus one. Keiko's one might be one level higher. Might be to level three. Level five of fire. But it. It's not.",
    "start": "2743310",
    "end": "2750859"
  },
  {
    "text": "It's definitely in this in this direction.",
    "start": "2750860",
    "end": "2755910"
  },
  {
    "text": "And and remember that I've got this relationship, one of these two relationships on the on the weights here.",
    "start": "2755910",
    "end": "2765750"
  },
  {
    "text": "Now, if this is true, then that means that this Leaf K has to be the right child of his family.",
    "start": "2765750",
    "end": "2773320"
  },
  {
    "text": "So, so so there is the it's certainly not going to be the left child because then then K plus one would be down here somewhere.",
    "start": "2773320",
    "end": "2783910"
  },
  {
    "text": "Caples won't even be the the brother sister or it would be nephew niece or something.",
    "start": "2783910",
    "end": "2790079"
  },
  {
    "text": "So. So we got. So I know that it's the left child and then it has a sibling which either is a leaf or maybe goes and goes below.",
    "start": "2790080",
    "end": "2804810"
  },
  {
    "text": "But but. But there's some weight here which. Which is the sum of all the leaf waits here.",
    "start": "2804810",
    "end": "2810809"
  },
  {
    "text": "And K minus one is sitting here eating either K minus one is sitting here or it's it's, it's somewhere in this, in the subtree.",
    "start": "2810810",
    "end": "2817710"
  },
  {
    "text": "So I know that W is bigger than or equal W two to the weight of the of a leaf.",
    "start": "2817710",
    "end": "2825089"
  },
  {
    "text": "K minus one. Whatever the weight is that, that, that's on this half of this, on this half of the equation that there's some.",
    "start": "2825090",
    "end": "2832750"
  },
  {
    "text": "So some tree here might be just one leaf. But anyway it has a total weight exceeding it. And I have to say that the weights are assumed to be non-negative. Huffman's algorithm works with negative weight.",
    "start": "2832750",
    "end": "2844260"
  },
  {
    "text": "But this alphabetical order. I know. I think it's open problem. What, to do it? No, I think somebody did figure that one out. But it's it's this algorithm is only two very definitely to not make it a weight.",
    "start": "2844260",
    "end": "2857560"
  },
  {
    "text": "So. So. So the reason I can get this inequality is say that it's either the weight of W either equal to W Kapos one or the score or some other.",
    "start": "2857560",
    "end": "2866920"
  },
  {
    "text": "So some other weights added onto that. So. So it's got to be more. OK. So here, here's the idea.",
    "start": "2866920",
    "end": "2872220"
  },
  {
    "text": "Now we take this tree and we and we form a new tree that moves w up one level and end up moves K plus one down a level and joins it to K.",
    "start": "2872220",
    "end": "2889560"
  },
  {
    "text": "This is this is another tree which which has the same leaves in the same order.",
    "start": "2889560",
    "end": "2894750"
  },
  {
    "text": "And so I can see what happened. So. So the new. So this is the old tree. That's the new tree. The new cost is equal to the old cost.",
    "start": "2894750",
    "end": "2906030"
  },
  {
    "text": "Minus W. Because because everything in W shifted up one. And then plus W.K. US one because what was this leaf shifting down plus one.",
    "start": "2906030",
    "end": "2916890"
  },
  {
    "text": "And then it also might minus something depending if K plus one is actually just one level higher than K state.",
    "start": "2916890",
    "end": "2925950"
  },
  {
    "text": "It stayed on the same level where it was. But if Kapos one was sitting up to levels higher than K has moved up and we've saved the new costs of even less than before.",
    "start": "2925950",
    "end": "2935760"
  },
  {
    "text": "So. So it's so it's less than or equal to this. But W is bigger than W, T minus one, so minus W less than or equal minus WC minus one, which is less than or equal to W w K plus one.",
    "start": "2935760",
    "end": "2952450"
  },
  {
    "text": "So this is equal to W. This is less than or equal to the old. So the new class is less frequently of course that means than.",
    "start": "2952450",
    "end": "2959220"
  },
  {
    "text": "So I started with an optimum tree. In fact it would be like if I started with, with, with this it was a strict inequality here.",
    "start": "2959220",
    "end": "2967790"
  },
  {
    "text": "It would be strictly less than. This would be a strict, strict class at this point.",
    "start": "2967790",
    "end": "2973460"
  },
  {
    "text": "And so I couldn't have had an optimum tree, just couldn't have been an item treated. I got a better tree. In the case of strictly. But if I had the equals sign here.",
    "start": "2973460",
    "end": "2984020"
  },
  {
    "text": "So these two are equal, then I have found a tree in which these guys are at the same level. And so so there exists in some optimum tree with, with L.K. less than or equal LDK plus one.",
    "start": "2984020",
    "end": "2998330"
  },
  {
    "text": "Either it was less than or it was, it was equal to. It could have been less than. Because I started out assuming not less than OK.",
    "start": "2998330",
    "end": "3006280"
  },
  {
    "text": "So that's that's the the initial the initial problem that makes that that starts to crack this.",
    "start": "3006280",
    "end": "3013560"
  },
  {
    "text": "This is just an open and now they the weeks we start to explore it.",
    "start": "3013560",
    "end": "3021220"
  },
  {
    "text": "But by considering you might remember when I got these these infinities here, the W-2 that supposed that I had,",
    "start": "3021220",
    "end": "3027640"
  },
  {
    "text": "I'm building out the sequence of weights in which W zero is bigger than W two is bigger than W four.",
    "start": "3027640",
    "end": "3033799"
  },
  {
    "text": "You know, these things are bigger than W thick. W one is bigger than W3. Bigger than W fine.",
    "start": "3033800",
    "end": "3042910"
  },
  {
    "text": "But now maybe it's less than equal W seven. Here's where the collapsing rule starts to take place in the grassy rec sovereign.",
    "start": "3042910",
    "end": "3049299"
  },
  {
    "text": "In this case we would start adding together. Can we find one sexual. Suppose we have a situation like this.",
    "start": "3049300",
    "end": "3055810"
  },
  {
    "text": "Now look at. Look at. Look at at. At our lemme tells us. Since W zero is greater than W two, dilemma tells us that level one has to be less than or equal level two.",
    "start": "3055810",
    "end": "3071859"
  },
  {
    "text": "Because that was the, you know, take Cagle's, take a Cagle's one here.",
    "start": "3071860",
    "end": "3078620"
  },
  {
    "text": "Came out now. But now W one is is greater than W three. So now we take Keiko's to incenses. Level two is less than or equal level three.",
    "start": "3078620",
    "end": "3086539"
  },
  {
    "text": "And so this keeps on going. And so we get a nice monist monotone condition here on our levels until level six because W4 is greater than W six.",
    "start": "3086540",
    "end": "3098700"
  },
  {
    "text": "Now, W five is less than or equal W seven. Now I'm going to use this llamo in reverse.",
    "start": "3098700",
    "end": "3105770"
  },
  {
    "text": "And so let's write down the reflection of Islama if w w K plus one is less than W Kapler.",
    "start": "3105770",
    "end": "3115130"
  },
  {
    "text": "And then in an all optimum Trease, L.K. is less than or equal L.K. minus one.",
    "start": "3115130",
    "end": "3123589"
  },
  {
    "text": "You just flip and flip left and right in the whole thing. If it equals holds here, then there is there is some optimum tree in which the same thing holds.",
    "start": "3123590",
    "end": "3133000"
  },
  {
    "text": "L.K. listener OK. Minus one. And so the conclusion is that this whole thing in all optimum trees.",
    "start": "3133000",
    "end": "3141910"
  },
  {
    "text": "And L. Six is less than or equal L five. Let's put it all in here.",
    "start": "3141910",
    "end": "3148130"
  },
  {
    "text": "No. Six is less than equal in some optimum three. Because of the left right reflection of that lemma, therefore L5 equals L six in some optimum three.",
    "start": "3148130",
    "end": "3164099"
  },
  {
    "text": "So much so I've got these two notes that I was going to add together. I've got them at the same level at least. This is the way you start to start getting insight into the problem.",
    "start": "3164100",
    "end": "3175440"
  },
  {
    "text": "And I know I don't have time to go into it. The book out has almost correct explanations which which show you how you get further structure by by going to the left.",
    "start": "3175440",
    "end": "3188380"
  },
  {
    "text": "Saying if this sum is bigger than the guy to the left, then we will slide. We keep looking for a place where we fly to the left and that that gives you the next level here,",
    "start": "3188380",
    "end": "3200260"
  },
  {
    "text": "which gives us further structure, which which tells us what slide to the left. And you just change the pluses and minuses. You've got a good proof.",
    "start": "3200260",
    "end": "3207580"
  },
  {
    "text": "And and then what turns out is that ism is something that you can see at the bottom of the page here.",
    "start": "3207580",
    "end": "3218020"
  },
  {
    "text": "I take my two leaves that there that we were going to add together.",
    "start": "3218020",
    "end": "3224470"
  },
  {
    "text": "And I move on and I move on off to the left. Insert between J. Minus one and J. Where they fit according to the ordering.",
    "start": "3224470",
    "end": "3234460"
  },
  {
    "text": "And I've now got a problem on one less weight, because if I add together these two weights, I got a problem on one less weight, which would see this.",
    "start": "3234460",
    "end": "3244730"
  },
  {
    "text": "Q I am using Q instead of W right here. But if you and I together those two weights and you get a problem that has on the end leaves instead of in plus one leaves and you solve that problem.",
    "start": "3244730",
    "end": "3258390"
  },
  {
    "text": "And now you show that every solution to that problem also corresponds to a solution to the return",
    "start": "3258390",
    "end": "3265809"
  },
  {
    "text": "to the original problem on which these notes put would appear at the same level in another tree.",
    "start": "3265810",
    "end": "3274760"
  },
  {
    "text": "So. So. So basically the solution to this all solution to this problem in this order correspond to solutions,",
    "start": "3274760",
    "end": "3286270"
  },
  {
    "text": "two to two trees that have the optimum cost in the original problem and the end after you find the three.",
    "start": "3286270",
    "end": "3296170"
  },
  {
    "text": "You can you can slide. There is a way to to keep leaves on the same level and get a code that that has all the leaves in the correct order.",
    "start": "3296170",
    "end": "3304960"
  },
  {
    "text": "And that's the solution to this. This thing, it seems incredibly impossible.",
    "start": "3304960",
    "end": "3310510"
  },
  {
    "text": "But it is actually works. And the proof is there. I have just a few minutes left and I wanted to show you some computing I did today,",
    "start": "3310510",
    "end": "3322990"
  },
  {
    "text": "this morning with this one this afternoon, actually with this with this program.",
    "start": "3322990",
    "end": "3328420"
  },
  {
    "text": "Because it's not it's not really known much about the running time of the other thing.",
    "start": "3328420",
    "end": "3336480"
  },
  {
    "text": "Now, it's it turns out that the particular algorithm that I've got for downloading is order and squared.",
    "start": "3336480",
    "end": "3348560"
  },
  {
    "text": "It's it's possible that c as you're as you're as you're adding adding things together and moving them to the left, you've got a slide.",
    "start": "3348560",
    "end": "3358480"
  },
  {
    "text": "You've got to slide some numbers less than me. I've got some I got some bunch of numbers like this.",
    "start": "3358480",
    "end": "3367990"
  },
  {
    "text": "And I add these two together and I stick them over here and I'm implementing this in sequential, sequential memory.",
    "start": "3367990",
    "end": "3378430"
  },
  {
    "text": "I actually haven't done well. And after you stick it in here, you have to also check again.",
    "start": "3378430",
    "end": "3384579"
  },
  {
    "text": "This might cause ripple effect that you that that you have to add that that you'll have to combine some of these guys and move and keep on moving down.",
    "start": "3384580",
    "end": "3393590"
  },
  {
    "text": "It doesn't it is not just [INAUDIBLE] stopping. You still have to have this condition of the thing being sorted by twos afterwards.",
    "start": "3393590",
    "end": "3401950"
  },
  {
    "text": "So as I'm as I move this over, I'm shifting these guys oh oh,",
    "start": "3401950",
    "end": "3407770"
  },
  {
    "text": "one space to the left and I'm shifting these guys one space to the right in order to make room for the new guy.",
    "start": "3407770",
    "end": "3413290"
  },
  {
    "text": "So I'm doing a potentially order and moves each time I do this and I repeat this orderings times.",
    "start": "3413290",
    "end": "3421570"
  },
  {
    "text": "And I can actually I could go as order and squared in. You can concoct examples where it will take that amount of time.",
    "start": "3421570",
    "end": "3429130"
  },
  {
    "text": "But exercise, there's a there's a course of using better data structure so you can you can do it.",
    "start": "3429130",
    "end": "3436779"
  },
  {
    "text": "The best solution I know is to keep. However, it's fairly complicated. You need to keep a balanced tree together with doubly linked list of all the lead of all the leaves.",
    "start": "3436780",
    "end": "3445570"
  },
  {
    "text": "But that's enough to implement this in the guaranteed log in and log in time.",
    "start": "3445570",
    "end": "3451270"
  },
  {
    "text": "But there still are there's all kinds of algorithms out there where where there is or where people do overkill in order to guarantee the worst case.",
    "start": "3451270",
    "end": "3459400"
  },
  {
    "text": "I mean, they make the program so much so, so complex. Hated that, that they're paying a terrific overhead penalty, not just in order to guarantee that they're going to get good running time.",
    "start": "3459400",
    "end": "3470529"
  },
  {
    "text": "And in fact, it might turn out that it's really rare that you ever have to move very many guys to the left of very many guys to the right.",
    "start": "3470530",
    "end": "3477430"
  },
  {
    "text": "It's only in the worst case that this happened. In fact, you know, a couple of years ago, I talked about the problem about optimum rounding and which we should reduce to network flow problem.",
    "start": "3477430",
    "end": "3491770"
  },
  {
    "text": "You use the fancy algorithm for network flow and they were running a lot slower than than the brute force algorithm.",
    "start": "3491770",
    "end": "3497920"
  },
  {
    "text": "They wouldn't have any good guarantee at all. So I was wondering about this algorithm, what was what actually happens on it?",
    "start": "3497920",
    "end": "3504069"
  },
  {
    "text": "And I and I, I. So I, I took one model of the problem where it looked like my decimal one is based on PI and over.",
    "start": "3504070",
    "end": "3515260"
  },
  {
    "text": "But I'm using binary numbers and so. And so imagine that the leaves of the tree are all powers of two, all distinct powers or two, but they appear in a random permutation.",
    "start": "3515260",
    "end": "3526119"
  },
  {
    "text": "That's one model of seeing a random a random data. But this means the weights are pretty spread out and it's equivalent to taking",
    "start": "3526120",
    "end": "3533620"
  },
  {
    "text": "this algorithm and using the operation of Macs instead of plus as we as we saw. And so. So it's interesting to say how many times are you gonna be sliding things to the left side of things, to the right and off?",
    "start": "3533620",
    "end": "3546490"
  },
  {
    "text": "And so I tried it out on, for example, running end equals one hundred. And this is just my random numbers seen. So this number. And so I did 10 runs on random numbers of random permutations of 100 elements.",
    "start": "3546490",
    "end": "3560360"
  },
  {
    "text": "And with how many times do I slide something downward? And how many times do I slide things up? And so it was pretty much about thirteen and a half tightened downward per fitting in.",
    "start": "3560360",
    "end": "3572710"
  },
  {
    "text": "And one point six or sixteen point two. Typically only coming up. So if I do a thousand, I was kidding.",
    "start": "3572710",
    "end": "3583089"
  },
  {
    "text": "Whereas the total didn't get in there. Well, I mean, see, it's all coming about the same here.",
    "start": "3583090",
    "end": "3588850"
  },
  {
    "text": "It's one of ten thousand. So here you see I, I didn't generate this by computer, but I do it by text.",
    "start": "3588850",
    "end": "3600420"
  },
  {
    "text": "But I took it out of the shell. Out of the shell. Out of the shell in the well. Anyway, I didn't want to show you my you know, my my typos. So notice what's happening here.",
    "start": "3600420",
    "end": "3611710"
  },
  {
    "text": "It looks like it's converging. In fact, here I'm doing a million items and taking a ten random permutation of a million items and very close to to saying that going.",
    "start": "3611710",
    "end": "3626860"
  },
  {
    "text": "This is about one point four. We're very close to one point four or one point three, nine to one point three, nine times the number of items,",
    "start": "3626860",
    "end": "3634690"
  },
  {
    "text": "one point three eight seems to be converging to some constant whatever that is going linearly. The modest amount of emotion. So the algorithm on this model where you take random permutations of of powers, a two as your weights.",
    "start": "3634690",
    "end": "3648870"
  },
  {
    "text": "It is definitely somebody's got to be able to prove that this is that this is linear.",
    "start": "3648870",
    "end": "3654400"
  },
  {
    "text": "In fact, look at this constant one one point six six six, six, seven times the number of items.",
    "start": "3654400",
    "end": "3660640"
  },
  {
    "text": "If that isn't five thirds, I don't know what is. So, so. So.",
    "start": "3660640",
    "end": "3665670"
  },
  {
    "text": "So this has to be you know, it has to be true that you're doing five. I don't know what this constant is, but, you know, but there it is. Maybe there is constant plus something.",
    "start": "3665670",
    "end": "3675790"
  },
  {
    "text": "But anyway, it's this is this is really suggested that the amount of time you slice that something up during this process.",
    "start": "3675790",
    "end": "3684670"
  },
  {
    "text": "And the algorithm is just the one that I described. Except that instead of taking the sum, you take the plot, you take the maximum and then you and then you shifted to the left.",
    "start": "3684670",
    "end": "3695079"
  },
  {
    "text": "We have to you count how much you've shifted things to the left and right. And this is the number that I'm giving you.",
    "start": "3695080",
    "end": "3700720"
  },
  {
    "text": "Then I tried another model where I took random weights, random fractions between zero and one on the leaves.",
    "start": "3700720",
    "end": "3706570"
  },
  {
    "text": "And here I haven't had a chance to look at it yet. But at the data.",
    "start": "3706570",
    "end": "3712390"
  },
  {
    "text": "But it's sick. It seems like it's going it's it's going like and squared because here you see,",
    "start": "3712390",
    "end": "3721210"
  },
  {
    "text": "I went from one hundred items to a thousand items and and I and the number of motion seems to have gone up by about one hundred.",
    "start": "3721210",
    "end": "3732460"
  },
  {
    "text": "So I went up by a factor of ten. And this is not quite one hundred. This is about, you know, 86.",
    "start": "3732460",
    "end": "3738670"
  },
  {
    "text": "And then here it's it's not it's not 100. It's more like the factor of 50.",
    "start": "3738670",
    "end": "3744780"
  },
  {
    "text": "And this is still gives this one up by about 100 hundred. This this is not going up by that much.",
    "start": "3744780",
    "end": "3749890"
  },
  {
    "text": "Those are 70. So this is so. So I haven't. But these numbers are pretty, pretty stable here. They might depend on the quality.",
    "start": "3749890",
    "end": "3758500"
  },
  {
    "text": "Depends something on the actual way that that this number breaks down as a sum of powers. Who because because they're in because what happens is when you have this,",
    "start": "3758500",
    "end": "3767010"
  },
  {
    "text": "what sort of waves appear at different logarithm levels when you're adding numbers together and things start to group by round a certain.",
    "start": "3767010",
    "end": "3774700"
  },
  {
    "text": "The ones that are some of five quantities tend to group. And then the next to the ones that are some of six quite evens and so on.",
    "start": "3774700",
    "end": "3781010"
  },
  {
    "text": "So for their family some to do that, I haven't any explanation for this one is definitely looks like it's it's a it's going on.",
    "start": "3781010",
    "end": "3789610"
  },
  {
    "text": "No it's not in squared into some high power or something or other. Here's a case where I took the weights instead of being random fractioning zero.",
    "start": "3789610",
    "end": "3798550"
  },
  {
    "text": "I wanted to grant effect's between one and two and you get different, you get different statistics.",
    "start": "3798550",
    "end": "3804660"
  },
  {
    "text": "There are nothing moves down in a small case. But I was getting, again, something like this, but not quite.",
    "start": "3804660",
    "end": "3816740"
  },
  {
    "text": "And square behavior. Oh, wait. This was going. This went up by a factor of 200. Yeah. It's very inexplicable, but no.",
    "start": "3816740",
    "end": "3825630"
  },
  {
    "text": "Looks like the depending on the kind of weights that you're that you're working on.",
    "start": "3825630",
    "end": "3831250"
  },
  {
    "text": "And it is you would want to use a more efficient algorithm then got a large, large problem for a large code.",
    "start": "3831250",
    "end": "3839280"
  },
  {
    "text": "It would would be good to use a better data structure than pure sequential.",
    "start": "3839280",
    "end": "3844320"
  },
  {
    "text": "You would use a large code like this if you were, for example, making a code for English. But not only on for one letter at a time, but you would you would take three groups of three letters or something like that and",
    "start": "3844320",
    "end": "3854640"
  },
  {
    "text": "then find the best alphabetic code or variable sized groups making a variable code.",
    "start": "3854640",
    "end": "3860289"
  },
  {
    "text": "Anyway, there's there's a of different alphabetic coding techniques. OK. The biggest open problem, the most famous open problem is to is to get a lower bound.",
    "start": "3860290",
    "end": "3871560"
  },
  {
    "text": "Nobody has been able to prove that, just that there doesn't exist an algorithm that a linear time algorithm for this problem.",
    "start": "3871560",
    "end": "3882140"
  },
  {
    "text": "The best this algorithm I say you can it would good data structure you can implement and then log in time. But nobody has been able to think of a way to show that it's that it's got",
    "start": "3882140",
    "end": "3890049"
  },
  {
    "text": "to take and that that that somebody might not next week invent a linear time algorithm to find out the only alphabetic code you can get the optimum Huffman code in linear time once the weights are sorted for you in advance.",
    "start": "3890050",
    "end": "3905830"
  },
  {
    "text": "And that is known. If the weights answer in advance, it's still it's not known whether or not the Hofman code algorithm is that can't be done in your time.",
    "start": "3905830",
    "end": "3917090"
  },
  {
    "text": "OK. So. So those are the open problems I know right now.",
    "start": "3917090",
    "end": "3922110"
  },
  {
    "text": "This just this one about the five third's, which has to be true, which is just a, you know, an interesting little algorithm that has a has a known or average time, but no known proof why it should has that average done.",
    "start": "3922110",
    "end": "3934140"
  },
  {
    "text": "And then there's this famous poem about what's the fastest way to get an optimum alphabetical.",
    "start": "3934140",
    "end": "3942289"
  },
  {
    "text": "Any questions? Come on, it's got to be a question.",
    "start": "3942290",
    "end": "3947920"
  },
  {
    "text": "Yes, I would be pretty fair and square also.",
    "start": "3947920",
    "end": "3957069"
  },
  {
    "text": "So it could be it could be done with log. But the constant proportionality was huge. It was really you know, it was like a. It used to be a level forty one problem in my book to implement it in log in time.",
    "start": "3957070",
    "end": "3970119"
  },
  {
    "text": "In other words, a rather difficult term project for a team for a couple of of of students in 144 C 144.",
    "start": "3970120",
    "end": "3981960"
  },
  {
    "text": "And but but not. But, you know, this is this so. Another page of code and I would have an implementation that would be in line again.",
    "start": "3981960",
    "end": "3992740"
  },
  {
    "text": "Oh, I forgot to mention one another. Really nice theorem that is. Suppose you know the weights that you don't know.",
    "start": "3992740",
    "end": "3998290"
  },
  {
    "text": "And you but you want to get an upper bound on the alphabet of code. Or let's think in other ways.",
    "start": "3998290",
    "end": "4003550"
  },
  {
    "text": "You've got a bunch of weights and somebody says, move these weights around, find the hardest possible order in which to in order to make a code for these weights.",
    "start": "4003550",
    "end": "4013050"
  },
  {
    "text": "You. So so now we're knowing only the weights of any ends.",
    "start": "4013050",
    "end": "4018210"
  },
  {
    "text": "And here again, your your your enemy is allowed to put those weights in in any order whatsoever.",
    "start": "4018210",
    "end": "4024780"
  },
  {
    "text": "What's the hardest order that he can do to make it hard for you to Lou? And here's what you're supposed to wait for.",
    "start": "4024780",
    "end": "4030690"
  },
  {
    "text": "We're actually, you know, in in increasing order, w zero is the smallest of the actual the actual worst worst case to do it.",
    "start": "4030690",
    "end": "4043500"
  },
  {
    "text": "I believe is something like this. You go on like this and then you leave gaps in here and then you and then you go, I'm sorry.",
    "start": "4043500",
    "end": "4053100"
  },
  {
    "text": "No w w w one right now.",
    "start": "4053100",
    "end": "4060270"
  },
  {
    "text": "That's the another word for an alphabetic code.",
    "start": "4060270",
    "end": "4065320"
  },
  {
    "text": "You're given the order of the leaves. So so Hofman code, you're not. So so if your weights are one, two, three, four, seven, ten, eleven, eleven or something like that.",
    "start": "4065320",
    "end": "4080660"
  },
  {
    "text": "And Huffins, the optimum code, if you if you didn't have to preserve alphabetic order in the messages you're transmitting.",
    "start": "4080660",
    "end": "4089530"
  },
  {
    "text": "You could make a half huffins of it and would tell you how to, how to combine these and get a code.",
    "start": "4089530",
    "end": "4095260"
  },
  {
    "text": "But the code and the code would preserve messages but wouldn't preserve order of messages.",
    "start": "4095260",
    "end": "4100690"
  },
  {
    "text": "The the.",
    "start": "4100690",
    "end": "4105900"
  },
  {
    "text": "But but in the alphabetic code you're also seeing the order has to has to be preserved.",
    "start": "4105900",
    "end": "4111250"
  },
  {
    "text": "And the idea is actually you put the. You.",
    "start": "4111250",
    "end": "4117830"
  },
  {
    "text": "You would. Let's just make this 13 so they're all on equal. So given these weights, what's the hardest order to to to achieve, to to handle?",
    "start": "4117830",
    "end": "4126589"
  },
  {
    "text": "And you do it this way. One thirteen to eleven.",
    "start": "4126590",
    "end": "4132920"
  },
  {
    "text": "Three. No, you're right. One, two, three, four. And then you put the thirteen, eleven, ten, seven in that order.",
    "start": "4132920",
    "end": "4140230"
  },
  {
    "text": "So. So it's this, it's this kind of a mixed up order where you where you take the smallest and the largest in the second smallest.",
    "start": "4140230",
    "end": "4146690"
  },
  {
    "text": "Second largest. And keep on going like that. And now you see apply the guards who act the algorithm and the guys who excel and work.",
    "start": "4146690",
    "end": "4154190"
  },
  {
    "text": "Very, very neat way on this. It adds one to 13 and make 14.",
    "start": "4154190",
    "end": "4159469"
  },
  {
    "text": "And it adds to an eleven. And that's three. It does it as these guys.",
    "start": "4159470",
    "end": "4164620"
  },
  {
    "text": "And so it turns out you're adding together the largest and smallest, the second or the second smallest and so on.",
    "start": "4164620",
    "end": "4170600"
  },
  {
    "text": "And then it turns out to be equal with Hofman Dahlgren after that point. And so the.",
    "start": "4170600",
    "end": "4177140"
  },
  {
    "text": "So the. This is a theorem, equipment and sex. Danny Danny Kleitman and Mike Saksa prove that this. That of all the arrangements of this one has the worst possible coding final coding length.",
    "start": "4177140",
    "end": "4191480"
  },
  {
    "text": "The final outcome, encoding length. And you can get it by adding together the extreme. Guys like this and then applying Hoffman's algorithm,",
    "start": "4191480",
    "end": "4199370"
  },
  {
    "text": "because this particular style of ordering you can show that Garcia likes algorithm emulates Hoffman's algorithm.",
    "start": "4199370",
    "end": "4210450"
  },
  {
    "text": "Craig casts a shadow over its original figure is worse than Hoffman code.",
    "start": "4210450",
    "end": "4222020"
  },
  {
    "text": "By a little bit. By a constant factor. That's your version of the sample that it cuts.",
    "start": "4222020",
    "end": "4228300"
  },
  {
    "text": "It's like it's an equivalent. Yes. Yes, that's theorem. Yeah, that's that's theorem M.",
    "start": "4228300",
    "end": "4240710"
  },
  {
    "text": "You've got a bias. So I am on page four forty five, which might have a you know, nobody's read this page yet.",
    "start": "4240710",
    "end": "4251340"
  },
  {
    "text": "So yeah, you might be able to recoup the cost of buying the book.",
    "start": "4251340",
    "end": "4256670"
  },
  {
    "text": "If you find it better. But the yeah. There's a very nice little analog of the Earth Medek coding that applies to this, to this case.",
    "start": "4256670",
    "end": "4267260"
  },
  {
    "text": "In fact. No, I'm sorry. That's your mama is even more general in what you asked.",
    "start": "4267260",
    "end": "4272489"
  },
  {
    "text": "The the the original case was actually solved by Gilbert. More of the arithmetic coding for for AlphaBeta case was solved by human who.",
    "start": "4272490",
    "end": "4283410"
  },
  {
    "text": "Well, well, Shannon himself came up with the arithmetic code for the unordered case.",
    "start": "4283410",
    "end": "4288560"
  },
  {
    "text": "That's all in here anyway. Yes. Is the ratio of the weights to stay the same? And it's today.",
    "start": "4288560",
    "end": "4298770"
  },
  {
    "text": "Like that range between zero and one. That's not true. You see, if you add it both, you add a constant to every to every leaf.",
    "start": "4298770",
    "end": "4307220"
  },
  {
    "text": "So every leaf now has weights. The M plus M plus W zero M plus W one M plus and so on.",
    "start": "4307220",
    "end": "4315710"
  },
  {
    "text": "OK. Now what's happening is that is that you're you're adding to every year you're adding m times the the length to the whole thing.",
    "start": "4315710",
    "end": "4326660"
  },
  {
    "text": "So it goes to infinity. You. The computer gonna be something. Everything appears that log in. Well yes.",
    "start": "4326660",
    "end": "4336619"
  },
  {
    "text": "But there isn't any. I tried the case where all the weights a constant. And there it was going as very. It was actually. There were no downs and the ups was very small.",
    "start": "4336620",
    "end": "4348050"
  },
  {
    "text": "The algorithm is very good in that case. Just with the little twiddles caused by the randomness caused the shifting around.",
    "start": "4348050",
    "end": "4355030"
  },
  {
    "text": "But in case of equality, the thing who sit there and be very nice, pretty close and balance such applications,",
    "start": "4355030",
    "end": "4364119"
  },
  {
    "text": "everybody is that we do not care about the absolute optimal so much but some.",
    "start": "4364120",
    "end": "4372320"
  },
  {
    "text": "Second worst case length of each sleep is limited to us.",
    "start": "4372320",
    "end": "4379810"
  },
  {
    "text": "Yeah. OK. So there's, there are other algorithms that are that get a little bit more complicated but,",
    "start": "4379810",
    "end": "4385810"
  },
  {
    "text": "but still can be based on this, this theory that that give you the.",
    "start": "4385810",
    "end": "4391040"
  },
  {
    "text": "That give you things with bounded level. And those are discussed in exercises here.",
    "start": "4391040",
    "end": "4397940"
  },
  {
    "text": "But that's the I didn't go into that. Now they butt out. But when you say that you only concerned about getting within a close, you know,",
    "start": "4397940",
    "end": "4404360"
  },
  {
    "text": "small, small amount of the the outcome of this stuff, I think that's just tradition.",
    "start": "4404360",
    "end": "4411560"
  },
  {
    "text": "I mean I mean, really, these these methods are. Give you enough of a percentage that.",
    "start": "4411560",
    "end": "4419870"
  },
  {
    "text": "That it can be important, I mean, some some people say that, you know, it doesn't matter. Throw away a factor of of two, you know, effective of 20 percent or something.",
    "start": "4419870",
    "end": "4428119"
  },
  {
    "text": "But but but that's not their opinion when you talk about their salary.",
    "start": "4428120",
    "end": "4434820"
  },
  {
    "text": "So there are cases where where people, you know, will fight for that 20 percent. And. And. And so I.",
    "start": "4434820",
    "end": "4442930"
  },
  {
    "text": "I considered, for example, in here a case where the were the best the best possible theorem says that the lower bound on the court,",
    "start": "4442930",
    "end": "4453130"
  },
  {
    "text": "which you can construct from the entropy, is three point three eight. And the and. And the best upper bound saying there exists a code by this general scheme is six point six.",
    "start": "4453130",
    "end": "4463750"
  },
  {
    "text": "But then you actually work through the algorithm when you find out that you get a code that's, you know, five point one.",
    "start": "4463750",
    "end": "4470680"
  },
  {
    "text": "And so so it's it it's so if these algorithms are actually it can actually give you a payoff.",
    "start": "4470680",
    "end": "4478090"
  },
  {
    "text": "If, you know, if you if you're if dollars mean anything to you and you can convert this to the home, you can give me out knocks on exactly.",
    "start": "4478090",
    "end": "4491420"
  },
  {
    "text": "Cost coding. I know that. I guess that isn't necessarily. That's the the Linnik that you meet for Alpha.",
    "start": "4491420",
    "end": "4503429"
  },
  {
    "text": "Yeah. I'm not here to think about the. The I mean, it's I don't know if anybody's implemented it conceptually,",
    "start": "4503430",
    "end": "4512980"
  },
  {
    "text": "it's very it's very it's very nice because you just look at the partial sums of the frequency distribution and then you and you and you and you,",
    "start": "4512980",
    "end": "4522840"
  },
  {
    "text": "you, you cut off. But when you say linear time, Miles, it's not not clear when you I mean the preprocessing.",
    "start": "4522840",
    "end": "4533969"
  },
  {
    "text": "How you handle it? Yeah, I. There is a foot.",
    "start": "4533970",
    "end": "4540890"
  },
  {
    "text": "I had a paper once on something that also Gallagher had done earlier. I didn't know about it, but it was for linnear for for doing Huffman coding on the fly, dynamically updating it.",
    "start": "4540890",
    "end": "4554470"
  },
  {
    "text": "Like if you're trying to if you're trying to send files by FCP or something, you want to compress them and you want to sort of know, learn the statistics of the source as you go.",
    "start": "4554470",
    "end": "4563590"
  },
  {
    "text": "And so you keep on updating it. And I had a method that was, you know, that was that was linear time.",
    "start": "4563590",
    "end": "4569020"
  },
  {
    "text": "But it needed in some cases, you were looking at the tree up from the top down and other cases from the bottom up.",
    "start": "4569020",
    "end": "4575320"
  },
  {
    "text": "And so when you actually started to study the hardware, it was it was it was not exactly clear what you meant by linear time.",
    "start": "4575320",
    "end": "4582699"
  },
  {
    "text": "These questions are kind of tricky. Now, next year, probably the beginning of February, I'm going to give another talk and I'm really excited.",
    "start": "4582700",
    "end": "4593940"
  },
  {
    "text": "Right now I'm designing a new computer and I'm going to. It's going to be the the computer for the next millennium. So I'll present it in the next talk in this series.",
    "start": "4593940",
    "end": "4607020"
  },
  {
    "text": "Thanks very much. And have.",
    "start": "4607020",
    "end": "4620283"
  }
]