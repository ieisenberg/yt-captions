[
  {
    "text": "thank you good afternoon this talk is mostly addressed to the high end of the mill CPU family",
    "start": "10360",
    "end": "19400"
  },
  {
    "text": "it's a family in the sense that the 360 is a family and at the lowend the kinds",
    "start": "19400",
    "end": "25039"
  },
  {
    "text": "of issues that he uh speaks of are essentially not a problem I mean uh an",
    "start": "25039",
    "end": "30320"
  },
  {
    "text": "x86 can decode four instructions in a cycle if all you need is four this is",
    "start": "30320",
    "end": "35600"
  },
  {
    "text": "established art it's when you're at the high end and you need to pull a whole lot more um other talks other times or",
    "start": "35600",
    "end": "43480"
  },
  {
    "text": "questions I can remark on what we do at the low end they are uh equally",
    "start": "43480",
    "end": "48520"
  },
  {
    "text": "Innovative as what we have here",
    "start": "48520",
    "end": "54600"
  },
  {
    "text": "the this being a university class for credit we do the traditional and start",
    "start": "55719",
    "end": "61239"
  },
  {
    "text": "with a short quiz you all know the various kinds of",
    "start": "61239",
    "end": "66799"
  },
  {
    "text": "architectures there's accumulator machines and stack machines and this",
    "start": "66799",
    "end": "72840"
  },
  {
    "text": "that and the other so if I give you a set of specifications for an existing chip can you tell me what architecture",
    "start": "72840",
    "end": "80920"
  },
  {
    "text": "that chip is one is incidentally this is an",
    "start": "80920",
    "end": "86200"
  },
  {
    "text": "existing top-of-the-line product from a major manufacturer four",
    "start": "86200",
    "end": "91680"
  },
  {
    "text": "cores each one of which can handle four operations per cycle you may need fre on",
    "start": "91680",
    "end": "98920"
  },
  {
    "text": "cooling 3,300 MHz using 130 Watts that's where the",
    "start": "98920",
    "end": "105159"
  },
  {
    "text": "freon comes in 52 Giga operations per",
    "start": "105159",
    "end": "113000"
  },
  {
    "text": "second for $885 list anyone want to guess what the",
    "start": "113000",
    "end": "118520"
  },
  {
    "text": "architecture of that ship is is don't all speak at",
    "start": "118520",
    "end": "124758"
  },
  {
    "text": "once someone yes some random",
    "start": "125640",
    "end": "132280"
  },
  {
    "text": "8086 but the architecture not oh the architect what is this organized is it a",
    "start": "132280",
    "end": "138480"
  },
  {
    "text": "stack machine it's a it's a it's a register impoverished",
    "start": "138480",
    "end": "144640"
  },
  {
    "text": "machine I'll take that one it is in fact a general purpose out of order super",
    "start": "145239",
    "end": "152160"
  },
  {
    "text": "scaler which in particular is an Intel",
    "start": "152160",
    "end": "158280"
  },
  {
    "text": "Zeon now fre",
    "start": "158280",
    "end": "164400"
  },
  {
    "text": "on um one more example this one's got one",
    "start": "165760",
    "end": "171599"
  },
  {
    "text": "core issuing eight operations per cycle clock rate of not quite 5 00",
    "start": "172800",
    "end": "182120"
  },
  {
    "text": "MHz only 1.1 Watts am I in the way of people seeing this I can move over if if",
    "start": "182640",
    "end": "189280"
  },
  {
    "text": "it would help um only three Giga",
    "start": "189280",
    "end": "196760"
  },
  {
    "text": "operations but also only $17 anyone want to guess what the",
    "start": "196760",
    "end": "203040"
  },
  {
    "text": "architectural category that chip belongs",
    "start": "203040",
    "end": "207480"
  },
  {
    "text": "to is it a DSP it's a DSP and in",
    "start": "208239",
    "end": "216120"
  },
  {
    "text": "particular it's an in order vliw DSP and it",
    "start": "216239",
    "end": "221799"
  },
  {
    "text": "is a Texas Instruments DSP",
    "start": "221799",
    "end": "228040"
  },
  {
    "text": "now in abstract terms these two are very very different but if you compare",
    "start": "228040",
    "end": "235280"
  },
  {
    "text": "them which is better well it's apples and oranges of course but over the last decade the",
    "start": "235280",
    "end": "243040"
  },
  {
    "text": "industry has sort of Consolidated itself into a accepted figure of Merit which is",
    "start": "243040",
    "end": "250079"
  },
  {
    "text": "a good rule of thumb that figure of Merit is performance per watt per",
    "start": "250079",
    "end": "258040"
  },
  {
    "text": "dollar and obviously you do need certain other things you need the io complement",
    "start": "258040",
    "end": "263320"
  },
  {
    "text": "that you have and everything else but just for purposes of General comparisons this has become the standard",
    "start": "263320",
    "end": "271600"
  },
  {
    "text": "now there's our two cores our two chips and the outof order super",
    "start": "275600",
    "end": "283720"
  },
  {
    "text": "scaler is your half of myips for your watch and your",
    "start": "283720",
    "end": "289840"
  },
  {
    "text": "dollar the in order DSP gives you 195 mips for your Watt and your",
    "start": "289840",
    "end": "297759"
  },
  {
    "text": "dollar it's a factor 400 now you'd think that by now somebody",
    "start": "297759",
    "end": "304520"
  },
  {
    "text": "would said seeing a market opportunity in this and tried to Arbitrage that number away but that difference has been",
    "start": "304520",
    "end": "311039"
  },
  {
    "text": "around for a long time so why is there a 400x",
    "start": "311039",
    "end": "316639"
  },
  {
    "text": "difference one is simple the Texas instrument chip is a 32-bit chip if you want to do 64-bit",
    "start": "316639",
    "end": "324520"
  },
  {
    "text": "addressing space you need the uh super scaler",
    "start": "324520",
    "end": "329759"
  },
  {
    "text": "other is total raw horsepower it takes an awful lot of those Texas instrument chips to add up to the total number of",
    "start": "329759",
    "end": "336360"
  },
  {
    "text": "Ops that you can get through the super scaler but what really makes the difference is that the workloads are",
    "start": "336360",
    "end": "344520"
  },
  {
    "text": "incompatible a the ti chip running on a general",
    "start": "344520",
    "end": "350319"
  },
  {
    "text": "purpose workload is truly awful it is designed for things which stay in Loops",
    "start": "350319",
    "end": "356440"
  },
  {
    "text": "forever software pipeline loops and um code that is just full of random flow of",
    "start": "356440",
    "end": "362680"
  },
  {
    "text": "control and random memory references which is characteristics of your general purpose code it tends to be very bad on",
    "start": "362680",
    "end": "369840"
  },
  {
    "text": "now the Intel chip would make a fairly decent DSP if you could have you buy a fre",
    "start": "369840",
    "end": "375160"
  },
  {
    "text": "on so the problem the fundamental problem is the signal processing is not the same",
    "start": "375160",
    "end": "381680"
  },
  {
    "text": "as general purpose which defined our goal and our technical challenge as a company when we",
    "start": "381680",
    "end": "388199"
  },
  {
    "text": "started out to design a new processor from scratch we wanted to provide DSP",
    "start": "388199",
    "end": "394400"
  },
  {
    "text": "numbers on general purpose workloads",
    "start": "394400",
    "end": "401199"
  },
  {
    "text": "well the numbers I'm about to give you are coming out of sim or our best guess for marketing we do not have something",
    "start": "401199",
    "end": "408479"
  },
  {
    "text": "which is actually for sale at this point take it with a large grain of salt the particular chip is two",
    "start": "408479",
    "end": "416720"
  },
  {
    "text": "course issuing 33 operations per cycle each at a clock rate of 1200",
    "start": "416720",
    "end": "425720"
  },
  {
    "text": "MHz using 28 watts and producing not quite 80 Giga",
    "start": "425720",
    "end": "432919"
  },
  {
    "text": "operations per second total and our best guess is $85 although",
    "start": "432919",
    "end": "439800"
  },
  {
    "text": "there's a gentleman sitting over there who probably may have a difference of",
    "start": "439800",
    "end": "445120"
  },
  {
    "text": "opinion that's our gold CPU architecture one of several I said it was a family",
    "start": "445120",
    "end": "451759"
  },
  {
    "text": "and in fact a duol core one and you're getting 33 mips per watts per dollar out of that",
    "start": "451759",
    "end": "460960"
  },
  {
    "text": "configuration now in that list of what gold does you may have noticed",
    "start": "463680",
    "end": "470800"
  },
  {
    "text": "that can we get rid of this light is it all possible or are other",
    "start": "470800",
    "end": "476759"
  },
  {
    "text": "people not getting glare off the screen excellent much",
    "start": "476759",
    "end": "481440"
  },
  {
    "text": "better that number 33 is just completely beyond what existing chips do your x86",
    "start": "482240",
    "end": "490120"
  },
  {
    "text": "max out at 45 um some chips well the ti goes up to",
    "start": "490120",
    "end": "495560"
  },
  {
    "text": "eight the upper limit of anything commercial I've ever seen is like 10 or 11 that can be issued",
    "start": "495560",
    "end": "502479"
  },
  {
    "text": "simultaneously why on Earth would you want to put out 33",
    "start": "502479",
    "end": "507879"
  },
  {
    "text": "Ops the answer is even in general purpose code 80% of all the code is in",
    "start": "507879",
    "end": "514240"
  },
  {
    "text": "loops and if you can software pipeline those Loops which of",
    "start": "514240",
    "end": "521518"
  },
  {
    "text": "course is what the all the dsps do then you have in fact unbounded ILP",
    "start": "521519",
    "end": "529680"
  },
  {
    "text": "you can soak up every Adder you can throw at it",
    "start": "529680",
    "end": "535080"
  },
  {
    "text": "forever but in current state-ofthe-art rather few",
    "start": "536440",
    "end": "542480"
  },
  {
    "text": "general purpose chips can be pipelined at least on conventional",
    "start": "542480",
    "end": "550279"
  },
  {
    "text": "architectures the solution find a way to pipeline almost",
    "start": "550360",
    "end": "555680"
  },
  {
    "text": "all loops and we have done that but that's not the subject of today's",
    "start": "555680",
    "end": "561440"
  },
  {
    "text": "talk and throw Hardware at it few people realize that how little of",
    "start": "561519",
    "end": "569040"
  },
  {
    "text": "a chips area and power are consumed with the actual functional units the adders and multipliers and things like",
    "start": "569040",
    "end": "576560"
  },
  {
    "text": "that 6% of the total chip is the usual number for that you could double the",
    "start": "576560",
    "end": "584279"
  },
  {
    "text": "number and still be only at 12% of the chip um the constraint is not that you",
    "start": "584279",
    "end": "592480"
  },
  {
    "text": "can't fit more adders and multipliers on the constraint is that you can't interconnect them and you can't feed",
    "start": "592480",
    "end": "598240"
  },
  {
    "text": "them with instructions this talk is about feeding them with",
    "start": "598240",
    "end": "604279"
  },
  {
    "text": "instructions once you have done that well you've taken care of the loop",
    "start": "604560",
    "end": "611320"
  },
  {
    "text": "part of the problem MD doll's law still exists and we handle the open code",
    "start": "611320",
    "end": "617200"
  },
  {
    "text": "non-loop code as well but that also is not this talk so if you're going to try 33",
    "start": "617200",
    "end": "625040"
  },
  {
    "text": "operations per cycle Peak how you going to do it",
    "start": "625040",
    "end": "630320"
  },
  {
    "text": "well of the various possible bottlenecks within the Machine by far actually the",
    "start": "630320",
    "end": "636560"
  },
  {
    "text": "biggest problem is decoding this stuff um there's two basic models for",
    "start": "636560",
    "end": "643800"
  },
  {
    "text": "instruction layout you can have fix to format instructions where every instruction is the same length your typical risk",
    "start": "643800",
    "end": "650200"
  },
  {
    "text": "instruction set they are dirt easy to Parts you just drop the thing into a",
    "start": "650200",
    "end": "655240"
  },
  {
    "text": "decoder and the next one into a decoder and the next thing into a decoder and Away you go Bob's your",
    "start": "655240",
    "end": "660959"
  },
  {
    "text": "uncle but if each instruction is 32 bits",
    "start": "660959",
    "end": "667000"
  },
  {
    "text": "and you have 33 of them 33 of them the total space is 132 bytes that's over two",
    "start": "667000",
    "end": "675399"
  },
  {
    "text": "cach lines at 64 bytes per cach line and you're simply not going to be getting 6",
    "start": "675399",
    "end": "681320"
  },
  {
    "text": "two cach lines per cycle out of your top level instruction cache so that's pretty hopeless it's an",
    "start": "681320",
    "end": "691440"
  },
  {
    "text": "ouch the other side of that problem is instruction cach pressure you can't have",
    "start": "691440",
    "end": "698279"
  },
  {
    "text": "unlimited instruction cash everybody needs more instruction cash but the bigger they are the further they are",
    "start": "698279",
    "end": "704240"
  },
  {
    "text": "from the functional units and the longer they take and you start paying in in your cycle time well if you have a",
    "start": "704240",
    "end": "712720"
  },
  {
    "text": "typical size of a 32k instruction cache and they are occupying 132 bytes",
    "start": "712720",
    "end": "720320"
  },
  {
    "text": "each you only get 248 instructions in that cache and as a rule of thumb you",
    "start": "720320",
    "end": "725440"
  },
  {
    "text": "need at least 1,000 instructions at your top level cach so we're a long way from",
    "start": "725440",
    "end": "731880"
  },
  {
    "text": "that now the alternative is variable length",
    "start": "732120",
    "end": "737800"
  },
  {
    "text": "instructions like the 86 instruction set they are hard to",
    "start": "737800",
    "end": "743920"
  },
  {
    "text": "Parts Intel is very very good at heroics and the they throw hardware and",
    "start": "743920",
    "end": "750800"
  },
  {
    "text": "they throw power and they throw everything else at parsing and they only are able to to decode um four",
    "start": "750800",
    "end": "758519"
  },
  {
    "text": "instructions at a time and then only if it's a restricted subset of the instruction set because if you some of",
    "start": "758519",
    "end": "765399"
  },
  {
    "text": "the the really lple loser instructions in the x86 instructions set you get one out",
    "start": "765399",
    "end": "772480"
  },
  {
    "text": "maybe so we actually have got a very compact instruction set in coding",
    "start": "772480",
    "end": "779839"
  },
  {
    "text": "and we run around 15 bits per operation for per add per multiply per load",
    "start": "779839",
    "end": "786279"
  },
  {
    "text": "whatever on the average we run around 15 bits we put an awful lot of effort to being compact because of this",
    "start": "786279",
    "end": "792199"
  },
  {
    "text": "instruction cach problem and that times 33 Ops well we're",
    "start": "792199",
    "end": "797240"
  },
  {
    "text": "still around a whole cach line as per cycle and we really don't want to do",
    "start": "797240",
    "end": "802600"
  },
  {
    "text": "that so that's a little painful too and the instruction cash pressure",
    "start": "802600",
    "end": "808320"
  },
  {
    "text": "well we've doubled the available number of operations or a number of instruction the cash but we're still nowhere near a",
    "start": "808320",
    "end": "816680"
  },
  {
    "text": "th000 instructions so let me digress a little bit in order to explain how we get",
    "start": "816680",
    "end": "822680"
  },
  {
    "text": "around this first back at the very beginning what is it that we're handling",
    "start": "822680",
    "end": "828399"
  },
  {
    "text": "we're handling a stream of instructions Mr Von noyman and Company which the",
    "start": "828399",
    "end": "834360"
  },
  {
    "text": "location in the Stream in the sequential thing is indicated by a program counter you p an instruction out drop it into",
    "start": "834360",
    "end": "841279"
  },
  {
    "text": "decode to figure out in terms of signals what the rest of the machine should do and then you go execute those signals",
    "start": "841279",
    "end": "847720"
  },
  {
    "text": "That's The Logical view the real world doesn't work like that on Modern",
    "start": "847720",
    "end": "854519"
  },
  {
    "text": "machines because you have to grab more than one instruction per cycle we call a common term actually the",
    "start": "854519",
    "end": "863079"
  },
  {
    "text": "group of instructions that you're going to grab per cycle a bundle and the logic will Hardware will",
    "start": "863079",
    "end": "870680"
  },
  {
    "text": "grab that group a whole bundle out of the instruction stream where the start of the bundle is indicated by the",
    "start": "870680",
    "end": "877160"
  },
  {
    "text": "program counter drop it into decode and that in turn winds up being fanned out to multiple operation functional",
    "start": "877160",
    "end": "885360"
  },
  {
    "text": "units if these are fixed length instructions decode is easy you simply",
    "start": "885440",
    "end": "891600"
  },
  {
    "text": "have one decoder for each position in the bundle drop them in bit to bit this",
    "start": "891600",
    "end": "897320"
  },
  {
    "text": "is why risk was was uh able to fit in the trip back at the beginning of the wrist days and Away you",
    "start": "897320",
    "end": "904759"
  },
  {
    "text": "go if however now they're easy and big yes if",
    "start": "904759",
    "end": "911839"
  },
  {
    "text": "you go for variable length instructions well you start having an",
    "start": "911839",
    "end": "917360"
  },
  {
    "text": "issue where does the next bundle start this bundle along here how long",
    "start": "917360",
    "end": "925600"
  },
  {
    "text": "how many bytes that is varies from instru exec cycle to cycle and we need",
    "start": "925600",
    "end": "933079"
  },
  {
    "text": "in if we're going to get the next one in the following cycle we need to be able to find the end of it we also need to be",
    "start": "933079",
    "end": "939800"
  },
  {
    "text": "able to find the start points of each of the instructions within the bundle that has polinomial",
    "start": "939800",
    "end": "949199"
  },
  {
    "text": "cost um as and indeed this is why Intel is not able to get more than",
    "start": "949199",
    "end": "956360"
  },
  {
    "text": "four well polinomial is not fine of n is 3 but it's not verified at all of n is",
    "start": "956360",
    "end": "964560"
  },
  {
    "text": "30 so we need a way around that but here was the first",
    "start": "964560",
    "end": "972279"
  },
  {
    "text": "Insight because it's polinomial you can caruse two bundles of",
    "start": "972279",
    "end": "978160"
  },
  {
    "text": "Len then much faster much easier much less power much less trouble than one",
    "start": "978160",
    "end": "984360"
  },
  {
    "text": "bundle of length 2 in okay",
    "start": "984360",
    "end": "989680"
  },
  {
    "text": "just normal polinomial so split each bundle in",
    "start": "989680",
    "end": "999079"
  },
  {
    "text": "half and have two streams of half",
    "start": "999079",
    "end": "1004839"
  },
  {
    "text": "bundles that's what it looks like you have two program counters one",
    "start": "1005880",
    "end": "1011160"
  },
  {
    "text": "pointing into each of this half bundle streams each one feeds its own decoder",
    "start": "1011160",
    "end": "1016880"
  },
  {
    "text": "this one handling that this one handling that but the te coders only have half the",
    "start": "1016880",
    "end": "1022360"
  },
  {
    "text": "load they're not trying to do 30 they're trying to do 15 well welcome to",
    "start": "1022360",
    "end": "1028038"
  },
  {
    "text": "polinomial that's a big good thing there are two physical",
    "start": "1028039",
    "end": "1034558"
  },
  {
    "text": "streams and one logical stream this is a single thread of",
    "start": "1034559",
    "end": "1041160"
  },
  {
    "text": "execution this is not Vector arithmetic this is not a GPU um it's your this kind",
    "start": "1041160",
    "end": "1049080"
  },
  {
    "text": "thing that you're doing in your laptop or whatever it's a single thread of execution with the sequence of",
    "start": "1049080",
    "end": "1055160"
  },
  {
    "text": "instructions split up into two",
    "start": "1055160",
    "end": "1059400"
  },
  {
    "text": "streams the problem of course is how do you Branch it you've got two program",
    "start": "1060679",
    "end": "1065840"
  },
  {
    "text": "counters and if you're going to do a branch or a call you need to be",
    "start": "1065840",
    "end": "1071799"
  },
  {
    "text": "able to send both program counters to their new location well a branch operation carries an effective address",
    "start": "1071799",
    "end": "1079640"
  },
  {
    "text": "but if you have try and have a branch operation with two effective addresses in it well uh suddenly your code started",
    "start": "1079640",
    "end": "1087120"
  },
  {
    "text": "to get bigger and then you have to think about what does a function pointer look like when it's got two addresses in the",
    "start": "1087120",
    "end": "1092679"
  },
  {
    "text": "function pointer this doesn't work very well well to explain that I need to back",
    "start": "1092679",
    "end": "1099559"
  },
  {
    "text": "off a little bit and introduce a term most of you will be familiar with the extended basic block these are sometimes",
    "start": "1099559",
    "end": "1107080"
  },
  {
    "text": "called super blocks this is the sequence of code which has got a single entry point called the head",
    "start": "1107080",
    "end": "1114960"
  },
  {
    "text": "and may have multiple exit points where it goes to someplace else we are unusual in that we permit",
    "start": "1114960",
    "end": "1122200"
  },
  {
    "text": "embedded calls inside an nebb but that's not relevant to today's",
    "start": "1122200",
    "end": "1128080"
  },
  {
    "text": "talk so your two program counters are actually describing not so much a stream",
    "start": "1128080",
    "end": "1135440"
  },
  {
    "text": "of instructions as a sequence of Ebbs we enter one that will Branch to the",
    "start": "1135440",
    "end": "1142559"
  },
  {
    "text": "head of another that will eventually go to the head of another and so forth and just like there's an ebb in the full",
    "start": "1142559",
    "end": "1150200"
  },
  {
    "text": "bundles there's also uh a pair of Ebbs in the half bundle streams there's two of them as",
    "start": "1150200",
    "end": "1159679"
  },
  {
    "text": "shown the branches can only target an ebb entry point this includes",
    "start": "1161080",
    "end": "1166360"
  },
  {
    "text": "calls it is not possible to jump into the middle of it by definition that's what they",
    "start": "1166360",
    "end": "1174039"
  },
  {
    "text": "are so take two of our half",
    "start": "1174039",
    "end": "1179120"
  },
  {
    "text": "Ebbs this is colorcoded to indicate the two half bundles which will decode and issue in",
    "start": "1179960",
    "end": "1188039"
  },
  {
    "text": "the same cycle the two blues will go together they are actually part of the same instruction this will split in half",
    "start": "1188039",
    "end": "1195080"
  },
  {
    "text": "the two purples will go together and so forth so that's a color coding merely to indicate which of the two halves belong",
    "start": "1195080",
    "end": "1203880"
  },
  {
    "text": "together they're organized from lower member to higher memory as",
    "start": "1203880",
    "end": "1209399"
  },
  {
    "text": "usual execution order so you rotate one in",
    "start": "1210120",
    "end": "1216720"
  },
  {
    "text": "memory now one of them executes toward increasing addresses and the other one is going to",
    "start": "1216720",
    "end": "1225039"
  },
  {
    "text": "execute in terms of decreasing addresses notice we still have them",
    "start": "1225039",
    "end": "1230640"
  },
  {
    "text": "colorcoded that was still run together",
    "start": "1230960",
    "end": "1237280"
  },
  {
    "text": "now join them together",
    "start": "1238600",
    "end": "1242480"
  },
  {
    "text": "head-to-head the entry point of both the the dark blue um",
    "start": "1254000",
    "end": "1260640"
  },
  {
    "text": "bundle is now at the same address it's just that they decode in the opposite",
    "start": "1260640",
    "end": "1268039"
  },
  {
    "text": "direction consequently the branch problem is solved you Branch here you",
    "start": "1268400",
    "end": "1273760"
  },
  {
    "text": "Branch both programs there and one goes one way and one goes the other",
    "start": "1273760",
    "end": "1280720"
  },
  {
    "text": "way so to take a branch some random code",
    "start": "1283240",
    "end": "1290520"
  },
  {
    "text": "of which is we are of interest is the jump operation the jump will carry an effective",
    "start": "1291360",
    "end": "1298039"
  },
  {
    "text": "address and that effective address goes to the entry point of the now joined two",
    "start": "1298039",
    "end": "1304360"
  },
  {
    "text": "half Ebbs joined into a single ebb note you're now always jumping at to the head",
    "start": "1304360",
    "end": "1310919"
  },
  {
    "text": "of an ebb logically but you're jumping to the middle of an evbb physically",
    "start": "1310919",
    "end": "1320399"
  },
  {
    "text": "now how that works there two program counters they point",
    "start": "1322480",
    "end": "1328158"
  },
  {
    "text": "there we have to bring up the decode in the execute you remember we were doing",
    "start": "1329480",
    "end": "1335240"
  },
  {
    "text": "decode we pull off the two Central",
    "start": "1335440",
    "end": "1340080"
  },
  {
    "text": "bundles we move the program counters to the next bundle",
    "start": "1342960",
    "end": "1348640"
  },
  {
    "text": "the decode does its thing sends the signals to the execute execute",
    "start": "1348640",
    "end": "1356559"
  },
  {
    "text": "executes pull off the next",
    "start": "1358360",
    "end": "1362120"
  },
  {
    "text": "pair down and execute and so",
    "start": "1366080",
    "end": "1371399"
  },
  {
    "text": "on there we go",
    "start": "1372559",
    "end": "1376880"
  },
  {
    "text": "and that will keep on going until somebody does a branch whereon the two program counters both go off to someplace else yes the cach lines fit",
    "start": "1381960",
    "end": "1390600"
  },
  {
    "text": "into this well let me get to it that'll come up in a minute the short answer is that",
    "start": "1390600",
    "end": "1398720"
  },
  {
    "text": "there's two caches one for each decoder okay",
    "start": "1398720",
    "end": "1406039"
  },
  {
    "text": "now for historical reasons internally our two streams we refer to as the",
    "start": "1409000",
    "end": "1415240"
  },
  {
    "text": "execute or exu flow stre uh stream and the flow stream and in fact all of the",
    "start": "1415240",
    "end": "1421720"
  },
  {
    "text": "operations that are things like adds and multiplies are in one stream and all of the operations that contain effective",
    "start": "1421720",
    "end": "1427880"
  },
  {
    "text": "addresses um such as branches or loads and stores are in the other stream and",
    "start": "1427880",
    "end": "1433360"
  },
  {
    "text": "this winds up giving us a pretty good bandwidth balance between the two sides uh um so xpc there is the program",
    "start": "1433360",
    "end": "1441240"
  },
  {
    "text": "counter for the XU side and FPC is the program counter for the Flow side and",
    "start": "1441240",
    "end": "1446960"
  },
  {
    "text": "when you take a branch you go to the entry point increasing addresses this",
    "start": "1446960",
    "end": "1452640"
  },
  {
    "text": "way decreasing address is that way but both program cers go to the same",
    "start": "1452640",
    "end": "1459000"
  },
  {
    "text": "place after some number of Cycles later the program counters have diverged",
    "start": "1460240",
    "end": "1468000"
  },
  {
    "text": "physical layout in cash everybody needs to get their cach",
    "start": "1471960",
    "end": "1477360"
  },
  {
    "text": "as close to the decoders as they possibly can because it's a critical",
    "start": "1477360",
    "end": "1482520"
  },
  {
    "text": "distance that critical distance is From The Far Side of the cache to the front",
    "start": "1482520",
    "end": "1488760"
  },
  {
    "text": "side of the decoder wires are",
    "start": "1488760",
    "end": "1493799"
  },
  {
    "text": "time so you can only get those so far apart and that's what puts your upper",
    "start": "1493799",
    "end": "1499440"
  },
  {
    "text": "limit on um uh either paying for it in your clock rate or alternatively paying",
    "start": "1499440",
    "end": "1505840"
  },
  {
    "text": "for it in the size of your instruction cache now you can in fact have a bigger",
    "start": "1505840",
    "end": "1514600"
  },
  {
    "text": "cache but you also wind up with a bigger critical",
    "start": "1516919",
    "end": "1521679"
  },
  {
    "text": "distance this is what the mill looks like at the same abstract level the 2 decod ERS are on either side",
    "start": "1522279",
    "end": "1530120"
  },
  {
    "text": "of the execution units and outbound of each of them are the two top level",
    "start": "1530120",
    "end": "1535240"
  },
  {
    "text": "instruction caches that's our critical distance you",
    "start": "1535240",
    "end": "1542320"
  },
  {
    "text": "see it's the same as the short critical distance up here on the left but the total capacity is the same as the large",
    "start": "1542320",
    "end": "1549360"
  },
  {
    "text": "critical distance we have doubled the instruction cache",
    "start": "1549360",
    "end": "1555679"
  },
  {
    "text": "capacity at no increase in per operation power area or",
    "start": "1555679",
    "end": "1563200"
  },
  {
    "text": "heat now that gets us down to having a bundle in the decoder a half siiz bundle in the",
    "start": "1564440",
    "end": "1570320"
  },
  {
    "text": "decoder now we have to take the bundle apart the bundle is itself variable length and filled with variable length",
    "start": "1570320",
    "end": "1578200"
  },
  {
    "text": "operations we issue one instruction per cycle dis disregarding stalls of course",
    "start": "1579200",
    "end": "1587120"
  },
  {
    "text": "and that will be two half bundles there can be a large number of",
    "start": "1587120",
    "end": "1593120"
  },
  {
    "text": "independent operations go and total to 33 on that gold that I showed",
    "start": "1593120",
    "end": "1598600"
  },
  {
    "text": "you and but they all issue together we are an in order statically scheduled",
    "start": "1598600",
    "end": "1604200"
  },
  {
    "text": "machine like a vliw in this respect and they execute in",
    "start": "1604200",
    "end": "1609799"
  },
  {
    "text": "parallel the internal structure of each bundle every bundle starts with a header",
    "start": "1609799",
    "end": "1618799"
  },
  {
    "text": "following the header there's some number of independent blocks and containing operations and the",
    "start": "1618799",
    "end": "1626760"
  },
  {
    "text": "operations in any single block are all exactly the same size they're fixed size",
    "start": "1626760",
    "end": "1632840"
  },
  {
    "text": "within the block consequently if you can isolate a single block they are easy to",
    "start": "1632840",
    "end": "1638720"
  },
  {
    "text": "decode just like any other fixed size format so the problem",
    "start": "1638720",
    "end": "1644799"
  },
  {
    "text": "reduces isolating blocks",
    "start": "1645360",
    "end": "1649919"
  },
  {
    "text": "each one of those blocks is are variable size they may not all be present the",
    "start": "1651480",
    "end": "1657960"
  },
  {
    "text": "machine bundles are B aligned but the individual operations and hence the",
    "start": "1657960",
    "end": "1663559"
  },
  {
    "text": "blocks are bit aligned and that means there's usually an alignment hole in the",
    "start": "1663559",
    "end": "1669559"
  },
  {
    "text": "middle not yet wasted bits you'll see later",
    "start": "1669559",
    "end": "1676080"
  },
  {
    "text": "so how that generic form getss decoded assume magically that you have",
    "start": "1676080",
    "end": "1683600"
  },
  {
    "text": "an instruction buffer that has got a left line bundle in it bundle buffer",
    "start": "1683600",
    "end": "1689080"
  },
  {
    "text": "probably would be a better term that header contains among other",
    "start": "1689080",
    "end": "1696039"
  },
  {
    "text": "things the bike count of the whole",
    "start": "1696039",
    "end": "1700960"
  },
  {
    "text": "bundle consequently we can send that it's furthermore it's in a fixed position here so it's easy to get out",
    "start": "1701360",
    "end": "1708960"
  },
  {
    "text": "we can send that bike count to a bundle shifter that in one",
    "start": "1708960",
    "end": "1716080"
  },
  {
    "text": "cycle will move the whole thing over and bring in the next bundle we don't have",
    "start": "1716080",
    "end": "1721720"
  },
  {
    "text": "to parse it to figure out how long it is we tell it how long it is the bike count",
    "start": "1721720",
    "end": "1727039"
  },
  {
    "text": "is right in there actually it's a tap count on the shifter but that effectively it's a bike",
    "start": "1727039",
    "end": "1732760"
  },
  {
    "text": "count now in addition besides the bike count",
    "start": "1732760",
    "end": "1737880"
  },
  {
    "text": "the bundle by count there is a operation count for each one of the blocks there's",
    "start": "1737880",
    "end": "1745679"
  },
  {
    "text": "something that says we've got three operations in Block one and five in Block two or Etc this is all encoded in",
    "start": "1745679",
    "end": "1752799"
  },
  {
    "text": "that header now the header itself is fixed size",
    "start": "1752799",
    "end": "1759559"
  },
  {
    "text": "consequently if we have this thing left aligned in a bundle buffer that point is know because the",
    "start": "1759559",
    "end": "1768559"
  },
  {
    "text": "header is fixed size that point is fixed consequently we can drop all of the",
    "start": "1768559",
    "end": "1774039"
  },
  {
    "text": "putative block once all of the things that might be a block one operation into block one",
    "start": "1774039",
    "end": "1779840"
  },
  {
    "text": "decut say that the maximum number of block one Ops that the machine can",
    "start": "1779840",
    "end": "1785840"
  },
  {
    "text": "handle is nine just to pick a number well we can drop nine blocks of nine",
    "start": "1785840",
    "end": "1792080"
  },
  {
    "text": "hunks of bits into block 1 decode there may only be three of them but we we",
    "start": "1792080",
    "end": "1798159"
  },
  {
    "text": "figure that out later and throw the excess away so we can",
    "start": "1798159",
    "end": "1804600"
  },
  {
    "text": "immediately begin decode of block one in addition because we know how many",
    "start": "1804600",
    "end": "1812760"
  },
  {
    "text": "are actually present in Block one we'll send that count to to that decoder and shifter so it can knows how much to",
    "start": "1812760",
    "end": "1818799"
  },
  {
    "text": "throw away in addition because we know how many there are we know where that",
    "start": "1818799",
    "end": "1825240"
  },
  {
    "text": "is and at the same time as we're Shifting the whole bundle a different",
    "start": "1825240",
    "end": "1831120"
  },
  {
    "text": "shifter is going to be starting there and shifting block two into a block two",
    "start": "1831120",
    "end": "1837399"
  },
  {
    "text": "buffer well one cycle later this is what you",
    "start": "1837399",
    "end": "1843518"
  },
  {
    "text": "got the whole bundle shifter shifted our whole bundle over but if you stop and",
    "start": "1844159",
    "end": "1850559"
  },
  {
    "text": "think about it this is the header of the following bundle if you stop and think",
    "start": "1850559",
    "end": "1855799"
  },
  {
    "text": "about it if the header is left aligned in the bundle buffer then necessarily",
    "start": "1855799",
    "end": "1863760"
  },
  {
    "text": "the end of the previous instruction is Right aligned in the bundle buffer we pulling both of them along",
    "start": "1863760",
    "end": "1872039"
  },
  {
    "text": "consequently we know where block three is and we can drop all of block three",
    "start": "1872039",
    "end": "1877120"
  },
  {
    "text": "into its own personal decoder block 3 is soft meanwhile we had",
    "start": "1877120",
    "end": "1884279"
  },
  {
    "text": "already shifted block two into block 2's own buffer that's properly aligned and that gets dropped",
    "start": "1884279",
    "end": "1890679"
  },
  {
    "text": "in now I've shown it for three blocks it happens on the mill that each side does",
    "start": "1890679",
    "end": "1898120"
  },
  {
    "text": "in fact have an encoding with three blocks because it turns out this is all we needed but the general principle here",
    "start": "1898120",
    "end": "1904760"
  },
  {
    "text": "is applicable to an arbitrarily large number each cycle you're going to get two more blocks working in from both",
    "start": "1904760",
    "end": "1912159"
  },
  {
    "text": "ends we decode from both ends to the bundle one in the first cycle block one",
    "start": "1912159",
    "end": "1918880"
  },
  {
    "text": "and two every sucing cycle after",
    "start": "1918880",
    "end": "1923320"
  },
  {
    "text": "that now I mentioned that alignment hole in the",
    "start": "1931760",
    "end": "1937600"
  },
  {
    "text": "middle anything any machine with a um",
    "start": "1937600",
    "end": "1943279"
  },
  {
    "text": "statically scheduled layout has to deal with the situation that there nothing",
    "start": "1943279",
    "end": "1948360"
  },
  {
    "text": "for the machine to do sometimes um we're in the middle of a floating Point multiply and there ain't",
    "start": "1948360",
    "end": "1954559"
  },
  {
    "text": "nothing to do until we're done and this is a standard vliw problem",
    "start": "1954559",
    "end": "1959880"
  },
  {
    "text": "and every vliw problem has some way of encoding how do you do a noop cheap",
    "start": "1959880",
    "end": "1965200"
  },
  {
    "text": "because you don't want to have to have a whole full-size bundle full of nothing but noops so in our case we",
    "start": "1965200",
    "end": "1975000"
  },
  {
    "text": "encode what's called a lag count in the alignment",
    "start": "1975000",
    "end": "1980600"
  },
  {
    "text": "hole if that's zero the alignment hole value refers to",
    "start": "1980600",
    "end": "1987240"
  },
  {
    "text": "the other side if that's zero he issues immediately if on the other hand if",
    "start": "1987240",
    "end": "1994760"
  },
  {
    "text": "that's one he lags for one cycle before",
    "start": "1994760",
    "end": "2001799"
  },
  {
    "text": "issuing each one encodes the lag of the other side",
    "start": "2001960",
    "end": "2009080"
  },
  {
    "text": "consequently no Ops because they're in fact encoded in the alignment",
    "start": "2010679",
    "end": "2016960"
  },
  {
    "text": "hole cost nothing they're already there now of course if it happens that you",
    "start": "2016960",
    "end": "2023519"
  },
  {
    "text": "don't have an alignment hole because all the bits happen to line up exactly the right way then you have to explicitly",
    "start": "2023519",
    "end": "2028679"
  },
  {
    "text": "encode it and yes the M the instruction set supports that but um it's happens",
    "start": "2028679",
    "end": "2034760"
  },
  {
    "text": "extremely rarely hello there we",
    "start": "2034760",
    "end": "2041080"
  },
  {
    "text": "go now putting all this together I'm going to give you a very",
    "start": "2041080",
    "end": "2047279"
  },
  {
    "text": "rough sketch of the front end of the mil pipeline instructions start out in",
    "start": "2047279",
    "end": "2052398"
  },
  {
    "text": "memory or the L2 as lines standard cache",
    "start": "2052399",
    "end": "2060000"
  },
  {
    "text": "layout the prefetch we have a precise prefetch this talk will also not address",
    "start": "2060879",
    "end": "2068320"
  },
  {
    "text": "um prediction but a prediction machine has a precise prefetch it's not an",
    "start": "2068320",
    "end": "2073800"
  },
  {
    "text": "approximate or algorithmic prefetch it's precise and the amount of time it takes",
    "start": "2073800",
    "end": "2079878"
  },
  {
    "text": "to get for memory or L2 as driven by the prefecture it but does",
    "start": "2079879",
    "end": "2085960"
  },
  {
    "text": "vary and the stuff will eventually wind up in in your uh L1 top level",
    "start": "2085960",
    "end": "2091118"
  },
  {
    "text": "instruction cach still as lines from there a separate uh step is",
    "start": "2091119",
    "end": "2098560"
  },
  {
    "text": "fetch to get um lines from the L1 and",
    "start": "2098560",
    "end": "2104240"
  },
  {
    "text": "that is the the Cycles F0 through F1 and F2 because it typically takes three",
    "start": "2104240",
    "end": "2109960"
  },
  {
    "text": "Cycles to get a value out of the instruction cache up to where you're going to use it this is pretty standard",
    "start": "2109960",
    "end": "2116880"
  },
  {
    "text": "in terms of physical layout and you'll wind up in the l0o we are unusual in that there is a um",
    "start": "2116880",
    "end": "2125440"
  },
  {
    "text": "top level instruction cach which is a level Above The Logical level of on the",
    "start": "2125440",
    "end": "2130680"
  },
  {
    "text": "data side it's much smaller it's fully associative um and you can think of it",
    "start": "2130680",
    "end": "2137160"
  },
  {
    "text": "as being a transient buffer for instructions as opposed to a fullscale cache but it's still it's a",
    "start": "2137160",
    "end": "2143960"
  },
  {
    "text": "cache now that has a one cycle delay to go into the bundle shifter the top level",
    "start": "2143960",
    "end": "2151680"
  },
  {
    "text": "of what you saw a few slides ago and that's in the d0o cycle which immediately follows the F2 cycle",
    "start": "2151680",
    "end": "2159640"
  },
  {
    "text": "the bundle is taken apart in D d0 D1 and",
    "start": "2162400",
    "end": "2170119"
  },
  {
    "text": "D2 there is no issue",
    "start": "2171920",
    "end": "2175920"
  },
  {
    "text": "stage that's where it would appear and things go directly into the",
    "start": "2177319",
    "end": "2182560"
  },
  {
    "text": "adders as operations and as within a execute pipeline L this um your simple things",
    "start": "2182560",
    "end": "2190200"
  },
  {
    "text": "take one cycle and more complicated things take longer there's no retire stage",
    "start": "2190200",
    "end": "2197640"
  },
  {
    "text": "either so the add to add um data flow",
    "start": "2197640",
    "end": "2204760"
  },
  {
    "text": "time is zero Cycles I can have a full data flow dependent ad um cycle after",
    "start": "2204760",
    "end": "2211280"
  },
  {
    "text": "cycle after cycle after cycle for a one cycle ad and we we have a four cycle",
    "start": "2211280",
    "end": "2218520"
  },
  {
    "text": "mispredict penalty if we're coming out of the lzo we are commonly coming out of the LZ",
    "start": "2218520",
    "end": "2225880"
  },
  {
    "text": "in cases like for example you've got if then L saddle um and you went down the",
    "start": "2225880",
    "end": "2231319"
  },
  {
    "text": "wrong way and both sides will be in the L zeros and that's a common situation if",
    "start": "2231319",
    "end": "2237040"
  },
  {
    "text": "it's not in the l0o you're going to have to add this the um two two and two and a",
    "start": "2237040",
    "end": "2243200"
  },
  {
    "text": "half actually in a peculiar way Cycles to get out of the L1 and and if you miss there and mind up all the way going all",
    "start": "2243200",
    "end": "2249760"
  },
  {
    "text": "the way to Dam well you can suck your thumb for 400 Cycles So In Sum the mill uses a",
    "start": "2249760",
    "end": "2259520"
  },
  {
    "text": "splitstream double-ended decoding technique",
    "start": "2259520",
    "end": "2264880"
  },
  {
    "text": "because there are three of those blocks on each side there's a total of six",
    "start": "2264880",
    "end": "2270200"
  },
  {
    "text": "blocks in each and over 33 this means that each",
    "start": "2270200",
    "end": "2275480"
  },
  {
    "text": "block has on the average five six possible positions to hold an",
    "start": "2275480",
    "end": "2280520"
  },
  {
    "text": "operation but because the decoder only has to deal with three we have no",
    "start": "2280520",
    "end": "2285599"
  },
  {
    "text": "greater problem and in fact naturally Less Problem than an x86 has to get out get um four done um so in essence we are",
    "start": "2285599",
    "end": "2296520"
  },
  {
    "text": "a we are decoding 33 individual Ops maximum peak of course um",
    "start": "2296520",
    "end": "2304000"
  },
  {
    "text": "at full speed there are true program Ram counters they're following two",
    "start": "2304000",
    "end": "2310800"
  },
  {
    "text": "instruction bundle streams they are drawn from two instruction",
    "start": "2310800",
    "end": "2316079"
  },
  {
    "text": "cashes they feed two decoders one of which runs",
    "start": "2316079",
    "end": "2322640"
  },
  {
    "text": "backwards both bundles are pass pars from both ends for each side the instruction size",
    "start": "2324000",
    "end": "2331680"
  },
  {
    "text": "15 bits times 17 Ops not times 33 Ops because we split them well that's only",
    "start": "2331680",
    "end": "2338480"
  },
  {
    "text": "32 bytes and that's tolerable we can the memory hierarchy can feed 32 bytes to to",
    "start": "2338480",
    "end": "2346359"
  },
  {
    "text": "a decoder per cycle without that much trouble I me other chips do it",
    "start": "2346359",
    "end": "2352599"
  },
  {
    "text": "too the instruction cash pressure because we have twice as much cash",
    "start": "2352599",
    "end": "2358760"
  },
  {
    "text": "between having small operations and twice as much cash we're over that magic",
    "start": "2358760",
    "end": "2364200"
  },
  {
    "text": "number of a th000 instructions per uh in the",
    "start": "2364200",
    "end": "2369960"
  },
  {
    "text": "cache the decode rate 30 plus operations per",
    "start": "2369960",
    "end": "2376400"
  },
  {
    "text": "cycle this is instruction en coding the stuff that there that I talked about",
    "start": "2377480",
    "end": "2383359"
  },
  {
    "text": "here are things that have gone in in the patent filings we are madly in the process of",
    "start": "2383359",
    "end": "2389839"
  },
  {
    "text": "doing more patent filings and while I welcome questions some of the answers will be I'm sorry but the patent for",
    "start": "2389839",
    "end": "2396560"
  },
  {
    "text": "that hasn't gone yet and I can't talk about it but I can talk about other aspects of the mill or more about this",
    "start": "2396560",
    "end": "2402960"
  },
  {
    "text": "if you see fit uh coming up in usnick we are going",
    "start": "2402960",
    "end": "2408680"
  },
  {
    "text": "to be talking about the um architecture of the machine the basic category",
    "start": "2408680",
    "end": "2414359"
  },
  {
    "text": "remember when we started there was a vliw chip and there was an outof order super scaler the mill is not one of",
    "start": "2414359",
    "end": "2420880"
  },
  {
    "text": "those categories it is a belt machine that's a new category and it has say",
    "start": "2420880",
    "end": "2429040"
  },
  {
    "text": "um well let me put it this way there are no General registers and the programming model is quite",
    "start": "2429040",
    "end": "2435920"
  },
  {
    "text": "different um and that'll be presented at your next coming up in September we'll",
    "start": "2435920",
    "end": "2442319"
  },
  {
    "text": "be talking about uh the way our memory systems subsystems works for the i e and",
    "start": "2442319",
    "end": "2450000"
  },
  {
    "text": "we have a technical mailing list that you can sign up for and you'll get announcements of white paper",
    "start": "2450000",
    "end": "2455760"
  },
  {
    "text": "availability and things like that um this is not a marketing mailing list",
    "start": "2455760",
    "end": "2461359"
  },
  {
    "text": "we're quite a long ways from having something that we could market so um we",
    "start": "2461359",
    "end": "2466440"
  },
  {
    "text": "won't be marketing to you it's this is technical questions here let me leave",
    "start": "2466440",
    "end": "2473160"
  },
  {
    "text": "that up questions comments what would you like to",
    "start": "2473160",
    "end": "2478760"
  },
  {
    "text": "know yes what D you for not generalizing it to end streams is it the end",
    "start": "2478760",
    "end": "2485640"
  },
  {
    "text": "dimensional memory you would have",
    "start": "2485640",
    "end": "2489240"
  },
  {
    "text": "you ask the question again why is there only two instruction",
    "start": "2491400",
    "end": "2496960"
  },
  {
    "text": "streams and not n so could you generalize it to end streams and you you",
    "start": "2496960",
    "end": "2502960"
  },
  {
    "text": "certainly could but only with two can you get one address for two now if we",
    "start": "2502960",
    "end": "2508200"
  },
  {
    "text": "had nend dimensional memory and we could go in four ways but uh Samsung just",
    "start": "2508200",
    "end": "2513760"
  },
  {
    "text": "turned me down with my suggestion that they do a hyper Cube memory and I don't know",
    "start": "2513760",
    "end": "2519880"
  },
  {
    "text": "why okay more questions yes how much of an improvement do you think there is a",
    "start": "2520880",
    "end": "2527760"
  },
  {
    "text": "decoding 30 instructions rather than having a simd that's 30 wide for say",
    "start": "2527760",
    "end": "2534440"
  },
  {
    "text": "spec FP 30 wide blw on spec",
    "start": "2534440",
    "end": "2542400"
  },
  {
    "text": "FP the difficulty is usually in some way you can look at the way we encode is",
    "start": "2543520",
    "end": "2549040"
  },
  {
    "text": "being very VW like um the real problem is that while you occasionally need 30",
    "start": "2549040",
    "end": "2556319"
  },
  {
    "text": "plus instructions you frequently need three and you want an encoding which is",
    "start": "2556319",
    "end": "2562319"
  },
  {
    "text": "compact for the three case as well as for the 33 case and it",
    "start": "2562319",
    "end": "2567640"
  },
  {
    "text": "is difficult to take a conventional VW layout and do that in fact that's",
    "start": "2567640",
    "end": "2574760"
  },
  {
    "text": "essentially what we did we started with a convention vliw layout and uh came up",
    "start": "2574760",
    "end": "2580119"
  },
  {
    "text": "with this so that we could handle have um the same kind of performance both for",
    "start": "2580119",
    "end": "2585520"
  },
  {
    "text": "big and small it's purely an encoding",
    "start": "2585520",
    "end": "2590000"
  },
  {
    "text": "issue uh generally the basic size of basic block is quite Limited in the the",
    "start": "2591640",
    "end": "2597200"
  },
  {
    "text": "General in applications how do you how do you a couple is that extending the",
    "start": "2597200",
    "end": "2603599"
  },
  {
    "text": "size of basic blocks well",
    "start": "2603599",
    "end": "2608720"
  },
  {
    "text": "as with the most Poes super blocks which is not our technology this is a wellestablished compiler technology most",
    "start": "2608720",
    "end": "2615520"
  },
  {
    "text": "some approaches to Super blocks attempt to get the maximum length of ebb that",
    "start": "2615520",
    "end": "2620800"
  },
  {
    "text": "they can and um there are standard techniques frequently called if",
    "start": "2620800",
    "end": "2626599"
  },
  {
    "text": "conversion for doing so where if then El's are folded down into data flow is",
    "start": "2626599",
    "end": "2632000"
  },
  {
    "text": "through the form of conditional moves or select operations we have a select oper",
    "start": "2632000",
    "end": "2637079"
  },
  {
    "text": "op ation not a conditional move and so consequently we do the same there are",
    "start": "2637079",
    "end": "2642440"
  },
  {
    "text": "two fundamental problems of taking it much further than what that you'll read in the literature one of those problems",
    "start": "2642440",
    "end": "2649760"
  },
  {
    "text": "has to deal with calls calls are very frequent and if you treat a um call as",
    "start": "2649760",
    "end": "2656000"
  },
  {
    "text": "being the end of an ebb you're in trouble um we are unusual in our",
    "start": "2656000",
    "end": "2661200"
  },
  {
    "text": "definition in that we do permit embedded calls even within a single ebb but I",
    "start": "2661200",
    "end": "2667319"
  },
  {
    "text": "need slides to explain how we do that um it's it's been filed but I",
    "start": "2667319",
    "end": "2673680"
  },
  {
    "text": "without a slide it's not a good not something I want to take on um the other",
    "start": "2673680",
    "end": "2680319"
  },
  {
    "text": "problem is how to handle exceptions and other uh hazards that occur in the",
    "start": "2680319",
    "end": "2686440"
  },
  {
    "text": "middle of an ebb if you're attempting to fold in and and um spec do speculative",
    "start": "2686440",
    "end": "2693839"
  },
  {
    "text": "execution which of course is is what if conversion uh uh is um you have to be",
    "start": "2693839",
    "end": "2699280"
  },
  {
    "text": "able to deal with the possibility that an exception happened down the path that you didn't actually take and um there",
    "start": "2699280",
    "end": "2708000"
  },
  {
    "text": "are various techniques if you want to see something truly baroke but actually works fairly well um learn um learn the",
    "start": "2708000",
    "end": "2716160"
  },
  {
    "text": "itanium instruction set and how they recover from exceptions we don't do it",
    "start": "2716160",
    "end": "2722440"
  },
  {
    "text": "like that at all but um we have a recovery method so such that we are not",
    "start": "2722440",
    "end": "2728440"
  },
  {
    "text": "subject to exceptions down the wrong path and consequently can do much more extensive if conversion and lengthening",
    "start": "2728440",
    "end": "2735319"
  },
  {
    "text": "of epbs again that's another talk more please you started out this talk talking",
    "start": "2735319",
    "end": "2742160"
  },
  {
    "text": "about loops now um do you have any constraints then on what kinds of",
    "start": "2742160",
    "end": "2748599"
  },
  {
    "text": "instructions can be within a bundle like you said this isn't a vector architecture this is well it is a vector",
    "start": "2748599",
    "end": "2755559"
  },
  {
    "text": "every one of those operations can be a vector up those 33 however are mimy independent scaler UPS um but the way",
    "start": "2755559",
    "end": "2764319"
  },
  {
    "text": "the architecture Works um it's a two-dimensional there's mimd in one dimension and simd in the other",
    "start": "2764319",
    "end": "2770200"
  },
  {
    "text": "dimension and so any one of those Ops could be doing Vector operations uh",
    "start": "2770200",
    "end": "2776040"
  },
  {
    "text": "except of course things like branches which are inherently scalar um so it's not a vector architecture in the sense",
    "start": "2776040",
    "end": "2783760"
  },
  {
    "text": "that the GPU is it is a vector operation how uh architecture s the next 86 is the",
    "start": "2783760",
    "end": "2790280"
  },
  {
    "text": "vector architecture um we are not constrained um we there are many ways to",
    "start": "2790280",
    "end": "2797599"
  },
  {
    "text": "organize your bundle contents in fact this this technique can be applied to a conventional instruction set as well as",
    "start": "2797599",
    "end": "2804160"
  },
  {
    "text": "an Our Kind A peculiar kind of thing but a the way we organize it is that we",
    "start": "2804160",
    "end": "2811240"
  },
  {
    "text": "partition the um operation the entire instruction set to two groups",
    "start": "2811240",
    "end": "2817640"
  },
  {
    "text": "all the ads are over there all the loads are over there consequently the decoders",
    "start": "2817640",
    "end": "2822800"
  },
  {
    "text": "are somewhat simpler because this side doesn't have to worry about decoding a load and this side doesn't have to worry",
    "start": "2822800",
    "end": "2827880"
  },
  {
    "text": "about decoding an net and simpler is better lower power etc etc etc that's",
    "start": "2827880",
    "end": "2834359"
  },
  {
    "text": "the way we do it yes sometimes you wind up being totally saturated with ads and the loads beside is doing nothing but",
    "start": "2834359",
    "end": "2842960"
  },
  {
    "text": "it's it's purely a matter of load balancing and it's well worth the cost",
    "start": "2842960",
    "end": "2848640"
  },
  {
    "text": "okay do you re use the op codes H do you reuse the op codes on on either",
    "start": "2848640",
    "end": "2855280"
  },
  {
    "text": "side again do you reuse the up do I reuse the bitten patterns of the up",
    "start": "2855280",
    "end": "2861960"
  },
  {
    "text": "yes which also makes things compact I there somebody behind you John",
    "start": "2861960",
    "end": "2868720"
  },
  {
    "text": "somebody over there I guess not you're up okay um x86 processors",
    "start": "2868720",
    "end": "2875520"
  },
  {
    "text": "implicitly are targeting x86 existing code to run DSP processors are",
    "start": "2875520",
    "end": "2880760"
  },
  {
    "text": "implicitly targeting DSP problems and so forth um what is the",
    "start": "2880760",
    "end": "2888119"
  },
  {
    "text": "target area here or what uh what's the instruction mix that you're using in",
    "start": "2888119",
    "end": "2893319"
  },
  {
    "text": "order to make your decisions in order to evaluate your performance in order to give the in order to evaluate how",
    "start": "2893319",
    "end": "2901160"
  },
  {
    "text": "to target market for the family general purpose",
    "start": "2901160",
    "end": "2907559"
  },
  {
    "text": "typically in load store heavy control flow hand heavy and not enough",
    "start": "2907559",
    "end": "2913960"
  },
  {
    "text": "regularity that you can do anything useful in the line that you wouldn't deliver more",
    "start": "2913960",
    "end": "2920559"
  },
  {
    "text": "Loops um the lowest it's inherently a 64-bit machine we do not compete against",
    "start": "2920559",
    "end": "2927880"
  },
  {
    "text": "32-bit or 16bit machines we require the presence of 64-bit address space um so",
    "start": "2927880",
    "end": "2935480"
  },
  {
    "text": "uh the z80 market safe from us um at the high end we're way",
    "start": "2935480",
    "end": "2942640"
  },
  {
    "text": "above um all existing architectures and because it's an architectural Advantage",
    "start": "2942640",
    "end": "2948920"
  },
  {
    "text": "not a Fab Advantage each new node they get better but so do",
    "start": "2948920",
    "end": "2954240"
  },
  {
    "text": "we it's architectural um one of the reasons why",
    "start": "2954240",
    "end": "2960119"
  },
  {
    "text": "we did not well several reasons why we did not focus on the high performance",
    "start": "2960119",
    "end": "2965480"
  },
  {
    "text": "Computing Market the floating Point Market two is two reasons really one is",
    "start": "2965480",
    "end": "2972280"
  },
  {
    "text": "that Livermore Loops a conventional processor does a fairly decent job and we wanted someplace where we had a",
    "start": "2972280",
    "end": "2978839"
  },
  {
    "text": "larger gain for Market entry reasons the other is that nobody makes any money building supercomputers and we're ear it",
    "start": "2978839",
    "end": "2985599"
  },
  {
    "text": "for the money the uh flip side of my question",
    "start": "2985599",
    "end": "2991040"
  },
  {
    "text": "the followup is that um things that try to be all things to all people",
    "start": "2991040",
    "end": "2996720"
  },
  {
    "text": "frequently end up not being real competitive on much of any I'm not I don't know your design well enough to",
    "start": "2996720",
    "end": "3002839"
  },
  {
    "text": "critique it uh many many many years ago one of our speakers was Bob cwell who designed the penum pro which is",
    "start": "3002839",
    "end": "3010880"
  },
  {
    "text": "basically everything indel has introduced in the last 20 years has been I know him well based on that um in his",
    "start": "3010880",
    "end": "3017680"
  },
  {
    "text": "book The um pendium Memoirs or something Chronicles thank you um I think he",
    "start": "3017680",
    "end": "3024599"
  },
  {
    "text": "comments that he was he was really glad that they were constrained in a lot of ways because",
    "start": "3024599",
    "end": "3030960"
  },
  {
    "text": "that let them Target things but more than any other one factor more Processor architectures have failed because they",
    "start": "3030960",
    "end": "3037720"
  },
  {
    "text": "didn't accept any constraints and they wanted to be all things to all people um",
    "start": "3037720",
    "end": "3043760"
  },
  {
    "text": "privately I'm told that uh the Pentium the itanium may suffer from that that",
    "start": "3043760",
    "end": "3049640"
  },
  {
    "text": "during the design phase they weren't willing to accept any compromises and thus they came up with something that",
    "start": "3049640",
    "end": "3055280"
  },
  {
    "text": "was sort of a hodge podge I leaping ahead to your question um I think we've",
    "start": "3055280",
    "end": "3060640"
  },
  {
    "text": "adopted the wisdom of IBM IBM realize they could not do a",
    "start": "3060640",
    "end": "3065960"
  },
  {
    "text": "single processor which was all things to all men they didn't try they produced a family of nine",
    "start": "3065960",
    "end": "3073160"
  },
  {
    "text": "processors which were all things to a whole lot of different men we're doing exactly the same",
    "start": "3073160",
    "end": "3081000"
  },
  {
    "text": "thing yes did uh virtualization come in to your design",
    "start": "3081000",
    "end": "3087880"
  },
  {
    "text": "thinking um once um virtualization will control what",
    "start": "3087880",
    "end": "3094319"
  },
  {
    "text": "instructure you're seeing in the caches but once you've pulled up a line that belongs to",
    "start": "3094319",
    "end": "3101119"
  },
  {
    "text": "you from that from that point on you uh you decode it just like you would if you",
    "start": "3101119",
    "end": "3106880"
  },
  {
    "text": "weren't in a virtual environment yes um common knowledge is that general purpose",
    "start": "3106880",
    "end": "3113599"
  },
  {
    "text": "code has an ILP of three or four and not more so I really wonder how you get up",
    "start": "3113599",
    "end": "3119480"
  },
  {
    "text": "to the 33 and if you do why didn't you take 66",
    "start": "3119480",
    "end": "3125760"
  },
  {
    "text": "or whatever how many because it's only 80% of the code and there amal's",
    "start": "3125760",
    "end": "3131359"
  },
  {
    "text": "law um sing and Pat Uh Professor Pat from",
    "start": "3131359",
    "end": "3140760"
  },
  {
    "text": "Austin um did a study in which they took Alpha code straight out out of the",
    "start": "3140760",
    "end": "3146839"
  },
  {
    "text": "compiler in binary and worked out if they had an",
    "start": "3146839",
    "end": "3152079"
  },
  {
    "text": "unlimited number of functional units that could feed them at what point in",
    "start": "3152079",
    "end": "3157240"
  },
  {
    "text": "adding more functional units um would be diminishing",
    "start": "3157240",
    "end": "3162760"
  },
  {
    "text": "returns and their answer was that you actually didn't need that many more floating Point units than at least in",
    "start": "3162760",
    "end": "3170000"
  },
  {
    "text": "their code sample which was all your usual benchmarks um than what a modern",
    "start": "3170000",
    "end": "3176000"
  },
  {
    "text": "machine has you needed four to six floating Point units but they still had",
    "start": "3176000",
    "end": "3181720"
  },
  {
    "text": "use for more alus with 24",
    "start": "3181720",
    "end": "3188760"
  },
  {
    "text": "alus the parallelism is there it's just not parallelism that will fit in a in a",
    "start": "3190680",
    "end": "3198839"
  },
  {
    "text": "um instruction window we don't have any instruction Windows um or alternatively all of",
    "start": "3198839",
    "end": "3205799"
  },
  {
    "text": "memory is struction window depending on how you want to look at it um",
    "start": "3205799",
    "end": "3212640"
  },
  {
    "text": "if that 33 is completely wasted an open",
    "start": "3212640",
    "end": "3217599"
  },
  {
    "text": "coat but look at your own Cod how much of your code is in",
    "start": "3217880",
    "end": "3223520"
  },
  {
    "text": "Loops rather little of that code in modern uh compilers can be turned into",
    "start": "3223520",
    "end": "3229760"
  },
  {
    "text": "software pipelines soon no sooner does it have internal flow of control or it's a while loop or",
    "start": "3229760",
    "end": "3237040"
  },
  {
    "text": "uh lots lots of other things and the compiler throws up its hands and does",
    "start": "3237040",
    "end": "3242079"
  },
  {
    "text": "not attempt to software pipeline because it doesn't know how and you can get a PhD TR trying to figure out that how to",
    "start": "3242079",
    "end": "3248880"
  },
  {
    "text": "do better um we do not have any compiler Wizardry we we um it's there just isn't",
    "start": "3248880",
    "end": "3255640"
  },
  {
    "text": "any the Wizardry is in the architecture and we can in fact software pipeline",
    "start": "3255640",
    "end": "3260799"
  },
  {
    "text": "because of the way the architecture works we can software pipeline through control flow we can software pipeline",
    "start": "3260799",
    "end": "3266960"
  },
  {
    "text": "while loops and the software pipeline reductions and a whole lot of other",
    "start": "3266960",
    "end": "3272520"
  },
  {
    "text": "things one thing that I will give credit to the itanium for Bob row realized the software",
    "start": "3272520",
    "end": "3280000"
  },
  {
    "text": "pipelines mattered and that for a high-end machine he needed to support software",
    "start": "3280000",
    "end": "3285920"
  },
  {
    "text": "pipelines hence the rotating registers in the itanium",
    "start": "3285920",
    "end": "3291960"
  },
  {
    "text": "um it's it was an early effort",
    "start": "3291960",
    "end": "3297640"
  },
  {
    "text": "and Bob didn't move long enough to do it",
    "start": "3297640",
    "end": "3301400"
  },
  {
    "text": "again others yeah yes is your plan to use to",
    "start": "3303559",
    "end": "3310319"
  },
  {
    "text": "program this thing using conventional languages you're not entirely but as I",
    "start": "3310319",
    "end": "3315640"
  },
  {
    "text": "say we're in it to make money we're not trying to sell somebody a language I just want to make sure about",
    "start": "3315640",
    "end": "3320799"
  },
  {
    "text": "no th this is running C Straight off the web we've been in Sim for several years",
    "start": "3320799",
    "end": "3328318"
  },
  {
    "text": "okay and I mean it's you got an ad you put the ad in the bundle is this purely",
    "start": "3329000",
    "end": "3335520"
  },
  {
    "text": "an encoding issue we that what I've described here doesn't care what the instruction set is doesn't care what",
    "start": "3335520",
    "end": "3341799"
  },
  {
    "text": "language is how do you get the bits apart um You probably won't be able to",
    "start": "3341799",
    "end": "3348039"
  },
  {
    "text": "go into much detail because this may not be something that you haven't filed a patent for yet you sort of said this",
    "start": "3348039",
    "end": "3353880"
  },
  {
    "text": "wasn't a conventional register machine it's apparent not a stack machine you indicated Bel machine machine okay I",
    "start": "3353880",
    "end": "3360680"
  },
  {
    "text": "love to brag about my baby um there are no General",
    "start": "3360680",
    "end": "3366039"
  },
  {
    "text": "registers the programmer's model and bear in mind this is a model this is not",
    "start": "3366039",
    "end": "3372599"
  },
  {
    "text": "a physical reality the model of an x86 is we do one instruction till it's finished then we do one instruction till",
    "start": "3372599",
    "end": "3378960"
  },
  {
    "text": "it's finished but it doesn't work like that on the inside at all but the programmer's model is this is one at a",
    "start": "3378960",
    "end": "3385240"
  },
  {
    "text": "time the programmer's model on the mill is a belt machine the communication of",
    "start": "3385240",
    "end": "3392480"
  },
  {
    "text": "data has well you know how a stack Machine Works you shove a value on the stack then you add the top two items of",
    "start": "3392480",
    "end": "3398960"
  },
  {
    "text": "the stack and shove the result on on on the back but there's no no addressing of oper you don't have to have a register",
    "start": "3398960",
    "end": "3405119"
  },
  {
    "text": "in there in our situation the programming model is a conveyor belt all of the operations drop their",
    "start": "3405119",
    "end": "3413079"
  },
  {
    "text": "results at the front of the belt and pushes everything else along if you want to do an add",
    "start": "3413079",
    "end": "3420920"
  },
  {
    "text": "um um you can say I want this value off of the belt and I want that value off",
    "start": "3420920",
    "end": "3426079"
  },
  {
    "text": "the belt and they'll add it together and the result of the ad will appear in the front of the belt and everything gets shoved along again now when I say give",
    "start": "3426079",
    "end": "3433960"
  },
  {
    "text": "me this one and this one what I'm actually doing is I'm saying give me the",
    "start": "3433960",
    "end": "3439480"
  },
  {
    "text": "third most recent value that got dropped on the belt and the fifth most recent value",
    "start": "3439480",
    "end": "3446359"
  },
  {
    "text": "they got dropped on the Belt CU every cycle new things are being dropped on the belt and the whole thing is being pushed",
    "start": "3446359",
    "end": "3452079"
  },
  {
    "text": "along so what we're doing here is not spatial addressing not register numbers",
    "start": "3452079",
    "end": "3458520"
  },
  {
    "text": "not memory addresses we're doing temporal addressing we're",
    "start": "3458520",
    "end": "3464520"
  },
  {
    "text": "saying this sequence in time its addresses change each cycle the location",
    "start": "3464520",
    "end": "3471400"
  },
  {
    "text": "is different eventually it reaches the end of the physical belt and drops off and if you have a value that needs to be",
    "start": "3471400",
    "end": "3478160"
  },
  {
    "text": "saved longer well you have to move it to someplace else and we have mechanisms for doing",
    "start": "3478160",
    "end": "3483720"
  },
  {
    "text": "this another professor Pat is producing very good good papers but another one of",
    "start": "3483720",
    "end": "3489920"
  },
  {
    "text": "his papers he took aart to see what the average actual dependency lifetime was",
    "start": "3489920",
    "end": "3498599"
  },
  {
    "text": "for values produced again huge master code using a",
    "start": "3498599",
    "end": "3503880"
  },
  {
    "text": "conventional compiler and a conventional instruction set something myips I think um and he found that 80% of all",
    "start": "3503880",
    "end": "3513880"
  },
  {
    "text": "operation results are used once and period that's",
    "start": "3513880",
    "end": "3522000"
  },
  {
    "text": "it 14% are used two or more",
    "start": "3523039",
    "end": "3529680"
  },
  {
    "text": "times and 6% are never used at all in his code sample",
    "start": "3529680",
    "end": "3535920"
  },
  {
    "text": "now as we're dropping things in the belt the compiler the compiler is scheduling",
    "start": "3537319",
    "end": "3544119"
  },
  {
    "text": "code data flow style so that the consumer is close to the",
    "start": "3544119",
    "end": "3549920"
  },
  {
    "text": "producer in vws this is a 20y old compiler technique and we use exactly",
    "start": "3549920",
    "end": "3556400"
  },
  {
    "text": "the same thing nothing novel there um so um if the ad is produced a result that's",
    "start": "3556400",
    "end": "3563039"
  },
  {
    "text": "going to be used by a multiply well you schedule the multiply as soon as results going to be available and that takes care of your 80",
    "start": "3563039",
    "end": "3570839"
  },
  {
    "text": "and it takes care of about half of um the",
    "start": "3570839",
    "end": "3576599"
  },
  {
    "text": "14% uh because um half of them the in the the immediately following",
    "start": "3576599",
    "end": "3581799"
  },
  {
    "text": "consumption is going to be soon enough that the value is going to be still on the Belt it's only the values which need",
    "start": "3581799",
    "end": "3588520"
  },
  {
    "text": "to be kept for some time considerably later that need to be run off somewhere",
    "start": "3588520",
    "end": "3593559"
  },
  {
    "text": "and that is running around 6 or 8% of all operants now if you've got",
    "start": "3593559",
    "end": "3599359"
  },
  {
    "text": "physically a small belt like our low- ended machines you can't be dropping a whole lot because things will run off",
    "start": "3599359",
    "end": "3605000"
  },
  {
    "text": "the belt before you before uh you're done with them um if you've got",
    "start": "3605000",
    "end": "3610039"
  },
  {
    "text": "something like that double gold you need a whopping big physical belt um because",
    "start": "3610039",
    "end": "3616599"
  },
  {
    "text": "you're going to want to use them before they get to the end and disappear so there's a a a configuration trade-off",
    "start": "3616599",
    "end": "3623640"
  },
  {
    "text": "between length of belt and the amount of work you're spending running things from the belt off to temporary storage or",
    "start": "3623640",
    "end": "3629280"
  },
  {
    "text": "scratch pad and back um and that's purely a matter of configuring a",
    "start": "3629280",
    "end": "3634760"
  },
  {
    "text": "particular member of the family as to where you want to make that balance does that mean that the lowend",
    "start": "3634760",
    "end": "3641760"
  },
  {
    "text": "machine requires a different binary than the high-end machine or do you jit that we use another trick from",
    "start": "3641760",
    "end": "3649520"
  },
  {
    "text": "IBM I'm not proud I'll steal from anybody um IBM in in the system 38",
    "start": "3649520",
    "end": "3657920"
  },
  {
    "text": "um had a an an awesome and very interesting capability architecture but",
    "start": "3659119",
    "end": "3665599"
  },
  {
    "text": "they wound up changing that architecture several times at the at the bit level",
    "start": "3665599",
    "end": "3670640"
  },
  {
    "text": "encoding basis but their mechanism for supporting that and being able to run",
    "start": "3670640",
    "end": "3676039"
  },
  {
    "text": "the same code on every member of that they ever built was that the final step",
    "start": "3676039",
    "end": "3683079"
  },
  {
    "text": "of going from program to to bit and coding was done at install time or even",
    "start": "3683079",
    "end": "3690160"
  },
  {
    "text": "in some cases at load time so we are binary compatible as they",
    "start": "3690160",
    "end": "3695720"
  },
  {
    "text": "were at the load module level but not at the bit level we've got",
    "start": "3695720",
    "end": "3701880"
  },
  {
    "text": "libraries which if you want to write a jit for us for example you you don't",
    "start": "3701880",
    "end": "3707200"
  },
  {
    "text": "generate the the the bitsies at all you generate our um slightly higher level",
    "start": "3707200",
    "end": "3712960"
  },
  {
    "text": "representation of what mil code looks like and feed it to our library and our library will give you",
    "start": "3712960",
    "end": "3719440"
  },
  {
    "text": "bits which is what we ourselves use I've got a lot more we got one over",
    "start": "3719440",
    "end": "3727079"
  },
  {
    "text": "here your your model for this belt thing sounds to me like remember Sy stolic arrays you recall that architecture well",
    "start": "3727079",
    "end": "3735839"
  },
  {
    "text": "inspiration from them um it is but it's it's of limited length um but rather",
    "start": "3735839",
    "end": "3742720"
  },
  {
    "text": "than feeding directly in in in a the way systolic machine would where um the data is",
    "start": "3742720",
    "end": "3750599"
  },
  {
    "text": "directly goes from producer to Consumer on more or less dedicated data path um",
    "start": "3750599",
    "end": "3756400"
  },
  {
    "text": "the on the Belt the values are just dropped on the belt and 16 people can pick up the same value all at",
    "start": "3756400",
    "end": "3762720"
  },
  {
    "text": "once if you got 16 Ops which a systolic array can't do that we're intended for",
    "start": "3762720",
    "end": "3768319"
  },
  {
    "text": "general purpose code where there's no a priori um predictable structure to what",
    "start": "3768319",
    "end": "3775079"
  },
  {
    "text": "the access patter than it's going to be done um I think you mentioned that",
    "start": "3775079",
    "end": "3783440"
  },
  {
    "text": "there are a lot of calls in any program one of the main motivators for risk way back when was different techniques of",
    "start": "3783440",
    "end": "3789960"
  },
  {
    "text": "trying to optimize calls parameter passing perly risk spark focused on",
    "start": "3789960",
    "end": "3795200"
  },
  {
    "text": "register windows that would overlap for parameter sake um 29,000 had a stack of",
    "start": "3795200",
    "end": "3800440"
  },
  {
    "text": "parameters where you always had access at some base Point um 29 U",
    "start": "3800440",
    "end": "3806480"
  },
  {
    "text": "some of the risks had local register sets and Global register sets um no we do not have a local belt",
    "start": "3806480",
    "end": "3814440"
  },
  {
    "text": "what everybody agrees is that this is parameter passing is a big issue getting in and out of rou tees is important",
    "start": "3814440",
    "end": "3820799"
  },
  {
    "text": "being able to return multiple values is something you need to focus on everything you've said sort of suggests",
    "start": "3820799",
    "end": "3826599"
  },
  {
    "text": "that there's no obvious parameter passing convention because when you follow a routine who knows what the",
    "start": "3826599",
    "end": "3833119"
  },
  {
    "text": "order was to put things onto the belt such that they may not be present in the order each time in the same way each",
    "start": "3833119",
    "end": "3839799"
  },
  {
    "text": "time the routine is called well that' be degress very much slightly and tell and",
    "start": "3839799",
    "end": "3845680"
  },
  {
    "text": "tell you how a divide Works a divide is logically a two- res",
    "start": "3845680",
    "end": "3851520"
  },
  {
    "text": "operation quot remainder this is a royal pain in the button most instructions at",
    "start": "3851520",
    "end": "3857440"
  },
  {
    "text": "architectures because everything is designed and encoded for a single result going to a single register and they use",
    "start": "3857440",
    "end": "3863599"
  },
  {
    "text": "implicit registers and this and that that and the other in order to to solve the problem and it's always a",
    "start": "3863599",
    "end": "3870039"
  },
  {
    "text": "CL on a belt it's easy you drop two results that simple this is what",
    "start": "3870039",
    "end": "3877960"
  },
  {
    "text": "function calls do too you can have a function call which produces an well not an arbitrarily",
    "start": "3877960",
    "end": "3885160"
  },
  {
    "text": "large it's it is limited but a large number of individual results all your output or in output parameters get",
    "start": "3885160",
    "end": "3892079"
  },
  {
    "text": "turned into results for us um uh you've got textually one result and three in uh",
    "start": "3892079",
    "end": "3898480"
  },
  {
    "text": "three output parameters um well that we just turn that into a function call with",
    "start": "3898480",
    "end": "3903920"
  },
  {
    "text": "four four results all dropped now to go the other direction which is to get",
    "start": "3903920",
    "end": "3910240"
  },
  {
    "text": "arguments into the call the values which are on the Belt we will assume that",
    "start": "3910240",
    "end": "3915839"
  },
  {
    "text": "we've just computed them so all the values we want are on the Belt but they're not at all necessarily in order",
    "start": "3915839",
    "end": "3921480"
  },
  {
    "text": "and they've got cruff from other operations scattered in the middle of it so what a call operation is gives a",
    "start": "3921480",
    "end": "3928640"
  },
  {
    "text": "Target address and a belt list not just one oper not just two operants but a",
    "start": "3928640",
    "end": "3935880"
  },
  {
    "text": "long list whose length is determined by other matters that don't matter but typically up to 16",
    "start": "3935880",
    "end": "3942960"
  },
  {
    "text": "arguments and it says I want that one and that one and that one and this one and then I want this one again and so",
    "start": "3942960",
    "end": "3949200"
  },
  {
    "text": "forth and all of that winds up being picked up off of the belt and the call E",
    "start": "3949200",
    "end": "3955799"
  },
  {
    "text": "gets a brand new to him empty belt with all the arguments in order this takes",
    "start": "3955799",
    "end": "3962799"
  },
  {
    "text": "place in one cycle and how we do that is another talk I think you've heard that",
    "start": "3962799",
    "end": "3969760"
  },
  {
    "text": "before um this is also how the way interrupts work an interrupt is for us",
    "start": "3969760",
    "end": "3975680"
  },
  {
    "text": "is nothing except an an an implicit unexpected function call and works",
    "start": "3975680",
    "end": "3981760"
  },
  {
    "text": "exactly the same as our own function operation the interrupt comes in there's his arguments and the belt the rest the",
    "start": "3981760",
    "end": "3988359"
  },
  {
    "text": "remainder of the the belt is filled with invalid but you got to put it back",
    "start": "3988359",
    "end": "3994599"
  },
  {
    "text": "together again when he returns from the interrupt again please you've got to put the belt back together again when you return from the",
    "start": "3994599",
    "end": "4000880"
  },
  {
    "text": "interrupt as I said that's another talk um yes you do and um as I said in",
    "start": "4000880",
    "end": "4010839"
  },
  {
    "text": "there's not a who and big shift register in this thing trust me there is no big shift",
    "start": "4010839",
    "end": "4016359"
  },
  {
    "text": "this is the programming model is there a big shift register but there isn't one really and what actually internally what",
    "start": "4016359",
    "end": "4024160"
  },
  {
    "text": "it looks like is sort of like a cross between a Content addressable memory and",
    "start": "4024160",
    "end": "4029640"
  },
  {
    "text": "a bypass Network on a conventional machine um that's what it looks like internally in Hardware terms but that",
    "start": "4029640",
    "end": "4036720"
  },
  {
    "text": "needs slides to explain yes so debugging must be fun on",
    "start": "4036720",
    "end": "4043799"
  },
  {
    "text": "this machine debugging debugging",
    "start": "4043799",
    "end": "4049640"
  },
  {
    "text": "debugging well like anybody else the bulk of the debuggers code you want to do wants to",
    "start": "4049640",
    "end": "4056359"
  },
  {
    "text": "be line by line and if it's been heavily optimized it's impossible and that's true for us",
    "start": "4056359",
    "end": "4062599"
  },
  {
    "text": "too um jits are more of a problem because",
    "start": "4062599",
    "end": "4067880"
  },
  {
    "text": "the jit has to produce whole evbs which many jits don't and we do not support self-modifying code at all of any kind",
    "start": "4067880",
    "end": "4075720"
  },
  {
    "text": "you got to produce a whole new ebb and then get us to move the thing into into",
    "start": "4075720",
    "end": "4081000"
  },
  {
    "text": "uh the the data path for the instruction cache um anybody who does self-",
    "start": "4081000",
    "end": "4087160"
  },
  {
    "text": "modifying code deserves it um the the actual debugging itself at",
    "start": "4087160",
    "end": "4095079"
  },
  {
    "text": "the Machine level if you actually do need to look add",
    "start": "4095079",
    "end": "4100719"
  },
  {
    "text": "operations um yes we have a debugger",
    "start": "4100719",
    "end": "4107000"
  },
  {
    "text": "um if you are thoroughly familiar with the way the Machine Works it's easy to",
    "start": "4107000",
    "end": "4113679"
  },
  {
    "text": "use and even one might say friendly the interface is the same as GDB we we just",
    "start": "4113679",
    "end": "4119920"
  },
  {
    "text": "copy the the interface not the code but but the way the interface works with a few minor exceptions to deal with with",
    "start": "4119920",
    "end": "4126880"
  },
  {
    "text": "some things that GDB doesn't know about like wide instructions um Dave yos wherever he is",
    "start": "4126880",
    "end": "4136199"
  },
  {
    "text": "there he is um designed and we have put off implementing a graphic um debugger",
    "start": "4136199",
    "end": "4145238"
  },
  {
    "text": "that would actually let you watch visually the execution of the machine um",
    "start": "4145239",
    "end": "4152758"
  },
  {
    "text": "instruction by instruction as things went uh go went along and we will probably do that at some point but guys",
    "start": "4152759",
    "end": "4160040"
  },
  {
    "text": "we're starving startup we've got limited resources and things that will be beautiful for end users need to wait",
    "start": "4160040",
    "end": "4166758"
  },
  {
    "text": "until we have end users one question what about uh user",
    "start": "4166759",
    "end": "4173120"
  },
  {
    "text": "and colel mode protection issues protection yeah not filed not",
    "start": "4173120",
    "end": "4182120"
  },
  {
    "text": "filed um I can say that the uh machine",
    "start": "4182120",
    "end": "4187480"
  },
  {
    "text": "is a static shared address model it is intended to run a um a nanocore",
    "start": "4187480",
    "end": "4195400"
  },
  {
    "text": "operating system and what Steve Jobs thought he was going to do before he discovered",
    "start": "4195400",
    "end": "4202080"
  },
  {
    "text": "that existing chips wouldn't do it right um and um yes it's got very",
    "start": "4202080",
    "end": "4211640"
  },
  {
    "text": "interesting protection characteristics including among other things that it is immune for a large number of common",
    "start": "4211640",
    "end": "4218280"
  },
  {
    "text": "exploits are simply not physically possible so capabilities",
    "start": "4218280",
    "end": "4223440"
  },
  {
    "text": "or is it some sort of a cap capability architecture it is not a capability architecture I would love to do a",
    "start": "4223440",
    "end": "4230719"
  },
  {
    "text": "capability architecture I think the C caps are the most wonderful thing in the world I know how to build one and I",
    "start": "4230719",
    "end": "4237640"
  },
  {
    "text": "don't know how to sell one we're in the goal to make",
    "start": "4237640",
    "end": "4243080"
  },
  {
    "text": "money John last okay um you mentioned that interrupts were handled the same way as calls in one interrupt model uh",
    "start": "4243080",
    "end": "4251719"
  },
  {
    "text": "interrupt just as a hardware and vot call it returns to where it was but there are a lot of other cases where you",
    "start": "4251719",
    "end": "4257360"
  },
  {
    "text": "might have to save State and restore State and switch among threads and do multitasking or multi-user support or",
    "start": "4257360",
    "end": "4264760"
  },
  {
    "text": "exceptions that may return where it was or may return to a Handler so what is the machine state is it possible talk",
    "start": "4264760",
    "end": "4271480"
  },
  {
    "text": "about or to characterize in order to completely encapsulate where you are go",
    "start": "4271480",
    "end": "4277199"
  },
  {
    "text": "to something arbitrarily different and weeks later come back and resume with",
    "start": "4277199",
    "end": "4282520"
  },
  {
    "text": "everything in the origin of course it's general purpose code um you want co- routines you want moldy thread you want",
    "start": "4282520",
    "end": "4289120"
  },
  {
    "text": "parallel tests yeah we do all of those um securely",
    "start": "4289120",
    "end": "4294520"
  },
  {
    "text": "um it's the target is the code that you are using every",
    "start": "4294520",
    "end": "4300719"
  },
  {
    "text": "day um the quantity of State in the machine",
    "start": "4300719",
    "end": "4305800"
  },
  {
    "text": "depends on what model it is the",
    "start": "4305800",
    "end": "4311280"
  },
  {
    "text": "um um a machine like that gold with a large number of functional units some of which um have got large quantities of",
    "start": "4311280",
    "end": "4319040"
  },
  {
    "text": "inflight State you know you got a bunch of multipliers and things halfway through a multiply and that state um",
    "start": "4319040",
    "end": "4326480"
  },
  {
    "text": "there's uh the belt itself the belt contents itself um but belt sizes the",
    "start": "4326480",
    "end": "4333280"
  },
  {
    "text": "smallest belt on on our smallest member is eight long most of them are 16 um",
    "start": "4333280",
    "end": "4339520"
  },
  {
    "text": "some at the high end are 32 long but compare those numbers compared to the number of rename Reg registers or even",
    "start": "4339520",
    "end": "4346719"
  },
  {
    "text": "physical registers what do itanium got for a register count like 400 or something ridiculous like that all of",
    "start": "4346719",
    "end": "4353199"
  },
  {
    "text": "which a state that has to be saved no we don't do any of that um",
    "start": "4353199",
    "end": "4358360"
  },
  {
    "text": "it's it's a quite low State machine um and deliberately done so we wanted to",
    "start": "4358360",
    "end": "4364040"
  },
  {
    "text": "keep things simple and and you got enough State and but you're paying in wire length and",
    "start": "4364040",
    "end": "4370280"
  },
  {
    "text": "heat it does 3 seconds the i860 failed because",
    "start": "4370280",
    "end": "4377239"
  },
  {
    "text": "they could save all the machine state but had no way to restore it properly because all pipelines they couldn't access yeah well it's smoking mirrors um",
    "start": "4377239",
    "end": "4387560"
  },
  {
    "text": "it's um the spark and the more recent itanium",
    "start": "4387560",
    "end": "4395920"
  },
  {
    "text": "have the right idea and that is that programs have got no business mucking",
    "start": "4395920",
    "end": "4401199"
  },
  {
    "text": "with steak that Hardware should muck with steak because Hardware knows what the",
    "start": "4401199",
    "end": "4406360"
  },
  {
    "text": "state is and um the biggest single overhead in",
    "start": "4406360",
    "end": "4412639"
  },
  {
    "text": "most codes on most machines is the amount of work you have to do to do a call the Preamble of the call and the",
    "start": "4412639",
    "end": "4420239"
  },
  {
    "text": "call the the Preamble in the inside of the call and what you got to do when you unwind it the other way this like a",
    "start": "4420239",
    "end": "4427320"
  },
  {
    "text": "dozen instructions for one call up this is ridiculous so instead do a call well the",
    "start": "4427320",
    "end": "4435320"
  },
  {
    "text": "hardware knows what you mean by a call give me a frame and save the state and this and that and the other let the",
    "start": "4435320",
    "end": "4441000"
  },
  {
    "text": "hardware Do It um no reason why the programmer has to mck with that or the compiler for",
    "start": "4441000",
    "end": "4447560"
  },
  {
    "text": "that matter well that was",
    "start": "4447560",
    "end": "4452840"
  },
  {
    "text": "back a call instruction that did everything and as you recall myips re",
    "start": "4452840",
    "end": "4458520"
  },
  {
    "text": "myips was a reaction to the call instruction well",
    "start": "4458520",
    "end": "4464960"
  },
  {
    "text": "if you consider that the vax was done with flip carts um the major breakthroughs in our",
    "start": "4465520",
    "end": "4472719"
  },
  {
    "text": "industry have been primarily breakthroughs not in architecture rather little of what we do was not at least",
    "start": "4472719",
    "end": "4480239"
  },
  {
    "text": "foreshadowed by the IBM stretch and this gentleman sitting here what worked on the stretch the 7030 and he is on in our",
    "start": "4480239",
    "end": "4488639"
  },
  {
    "text": "team and um he keeps our nose uh he keeps Young Whipper Snappers like",
    "start": "4488639",
    "end": "4496159"
  },
  {
    "text": "myself from claiming credit for for ideas that are in fact well known to everybody but me um",
    "start": "4496159",
    "end": "4505040"
  },
  {
    "text": "the um the major advances have been packaging advances not architecture but",
    "start": "4505040",
    "end": "4510480"
  },
  {
    "text": "packaging the data General Nova was the first computer that would fit on one",
    "start": "4510480",
    "end": "4516760"
  },
  {
    "text": "circuit board on a 19inch rack they build a company out of that a",
    "start": "4516760",
    "end": "4522120"
  },
  {
    "text": "nice big one the first processor that you could fit on a",
    "start": "4522120",
    "end": "4529040"
  },
  {
    "text": "microchip we call that company today Intel the reason why risk",
    "start": "4529040",
    "end": "4538159"
  },
  {
    "text": "existed had absolutely nothing to do with the philosophical merits of risk which the arguments are pro and con and",
    "start": "4538159",
    "end": "4545679"
  },
  {
    "text": "they're valid arguments both pro and con the reason why risk existed is that you",
    "start": "4545679",
    "end": "4551000"
  },
  {
    "text": "could fit a risk on a CHP and you couldn't fit a non-risk on a CHP",
    "start": "4551000",
    "end": "4556440"
  },
  {
    "text": "that was a node window that lasted about two nodes maybe eight years and after",
    "start": "4556440",
    "end": "4562080"
  },
  {
    "text": "that there's absolutely no excuse for a classic risk architecture and sure enough they've all",
    "start": "4562080",
    "end": "4569800"
  },
  {
    "text": "been migrating more and more cruff into it unfortunately they're not doing it from restarting from scratch so it's",
    "start": "4569800",
    "end": "4577440"
  },
  {
    "text": "cruff on top of the of something else that wasn't intended for it rather than doing what we are we we've got the",
    "start": "4577440",
    "end": "4585040"
  },
  {
    "text": "luxury of being able to rethink this thing completely from scratch we have",
    "start": "4585040",
    "end": "4590520"
  },
  {
    "text": "got no compatibility either mental emotional philosophical or architectural",
    "start": "4590520",
    "end": "4596120"
  },
  {
    "text": "issues um and when you go back and rethink something from scratch you wind up with something like that which is",
    "start": "4596120",
    "end": "4603199"
  },
  {
    "text": "kind of different cool",
    "start": "4603199",
    "end": "4610199"
  }
]