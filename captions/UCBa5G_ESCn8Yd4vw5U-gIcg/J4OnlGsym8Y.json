[
  {
    "text": "Welcome to Exploring Computing. Today's video is\n\"Computer Theory--",
    "start": "0",
    "end": "6570"
  },
  {
    "text": "Analysis of Algorithms.\" So choosing the right algorithm\ncan make a big difference when you're programming.",
    "start": "6570",
    "end": "13125"
  },
  {
    "text": "And in fact, it can\nmake the difference between having a\nprogram that runs in a reasonable amount of\ntime and a program that",
    "start": "13125",
    "end": "20029"
  },
  {
    "text": "takes too long to run for\nreasonable sized data sets. So for small data sets, there's\na lot of different algorithms",
    "start": "20030",
    "end": "29605"
  },
  {
    "text": "that will work. But when you start working\nwith large amounts of data,",
    "start": "29605",
    "end": "35000"
  },
  {
    "text": "more and more the particular\nalgorithm that you're using is going to make a huge\ndifference in whether or not",
    "start": "35000",
    "end": "40040"
  },
  {
    "text": "you're actually able\nto analyze the data in a reasonable amount of time. Or it's just going\nto take long enough",
    "start": "40040",
    "end": "47059"
  },
  {
    "text": "that, for all practical\npurposes, you can't do it. In thise lecture,\nwe're going to start",
    "start": "47060",
    "end": "52160"
  },
  {
    "text": "by taking a look at how to look\nfor an item in a collection. And we'll compare some\ndifferent ways of doing this.",
    "start": "52160",
    "end": "59539"
  },
  {
    "text": "And then after we've\ndone that, we're going to take a\nlittle bit of a look at how computer scientists\ngo about comparing",
    "start": "59540",
    "end": "67280"
  },
  {
    "text": "different algorithms from\na theoretical standpoint. All right. So here, I've got a list\nof different sovereigns",
    "start": "67280",
    "end": "75810"
  },
  {
    "text": "of England. And the simplest way I can\ngo about trying to find out whether or not a particular\nname is on the list",
    "start": "75810",
    "end": "82110"
  },
  {
    "text": "is using something\ncalled a linear search. In a linear search,\nwe're going to start off",
    "start": "82110",
    "end": "87330"
  },
  {
    "text": "with the first item. And then we would go through\neach of the different items one at a time in order.",
    "start": "87330",
    "end": "93030"
  },
  {
    "text": "So suppose we're looking\nfor the name Henry. We would start with Mary,\nsay, hey, is Mary Henry?",
    "start": "93030",
    "end": "101549"
  },
  {
    "text": "No, it's not. And then we'd go down to\nthe next item and say, is Anne Henry? No, it's not the item\nwe're looking for.",
    "start": "101550",
    "end": "107460"
  },
  {
    "text": "Is George Henry? No, it's not the item\nwe're looking for. Is Henry Henry? Oh yeah, that's the\nitem we're looking for.",
    "start": "107460",
    "end": "113650"
  },
  {
    "text": "Therefore, the item\nis in our list. Now, if we're looking for\na name that's not actually",
    "start": "113650",
    "end": "120090"
  },
  {
    "text": "on the list, we start off\nagain by comparing to Mary. We compare to Anne. We compare to George. We go all the way\nthrough the list.",
    "start": "120090",
    "end": "126840"
  },
  {
    "text": "We get to William. We still haven't found\nthe name on the list because the name\nis not on the list. And then we realize we're\nat the end of the list.",
    "start": "126840",
    "end": "133802"
  },
  {
    "text": "And so we conclude,\nbecause we've gone all the way\nthrough the list and we haven't found a\nparticular item therefore,",
    "start": "133802",
    "end": "139680"
  },
  {
    "text": "this item is not\non the list at all. So one thing to be\nthinking about here",
    "start": "139680",
    "end": "144930"
  },
  {
    "text": "is, how long does\nit take to find a particular item on the list? So suppose we're\nlooking for Elizabeth.",
    "start": "144930",
    "end": "150990"
  },
  {
    "text": "You can see Elizabeth\nis somewhere in the middle of the list. Suppose we're looking for Mary. Mary's at the start of the list.",
    "start": "150990",
    "end": "156810"
  },
  {
    "text": "So we can find her pretty quick. Suppose we're\nlooking for Melanie. Melanie is not on the list. So we need to go all the\nway through the list.",
    "start": "156810",
    "end": "164130"
  },
  {
    "text": "So basically, we can consider a\nnumber of different situations when we're talking about how\nfast an algorithm will run.",
    "start": "164130",
    "end": "171959"
  },
  {
    "text": "We can think about\nwhat's the best case. So in the case of linear\nsearch, the best case is, well, it's the\nfirst item on the list.",
    "start": "171960",
    "end": "179840"
  },
  {
    "text": "It's very, very\nquick to determine if Mary is on this list. We just look at the first time. It's Mary.",
    "start": "179840",
    "end": "185130"
  },
  {
    "text": "We're done. And what's the worst case? Well, the worst case in\nthis particular algorithm is the item is not\non the list at all.",
    "start": "185130",
    "end": "192685"
  },
  {
    "text": "And that means we\nneed to compare all the different items. And then we finally\nget to the end. And we're like, yeah,\nwe checked everything.",
    "start": "192685",
    "end": "198379"
  },
  {
    "text": "It's not on here. And then we've got\nthe average case.",
    "start": "198380",
    "end": "204240"
  },
  {
    "text": "Generally, when we're talking\nabout algorithm analysis, we're concerned\nwith what happens",
    "start": "204240",
    "end": "209680"
  },
  {
    "text": "for large numbers of items,\nas I mentioned earlier. If you've got a small\nnumber of items, you can have a pretty\npoorly thought-out algorithm",
    "start": "209680",
    "end": "216849"
  },
  {
    "text": "and still get it to work. It's not very efficient. But as long as the\nnumbers are pretty small,",
    "start": "216850",
    "end": "222898"
  },
  {
    "text": "it will still work. It's when you start getting\nlarger and larger numbers of items that it really\nbecomes a problem.",
    "start": "222898",
    "end": "228650"
  },
  {
    "text": "So suppose if I've got\na list of 1,000 items, it takes an average\nof one minute",
    "start": "228650",
    "end": "234430"
  },
  {
    "text": "to find an item on the list. How long would it\ntake on average",
    "start": "234430",
    "end": "239580"
  },
  {
    "text": "to find an item if we\ndoubled this size to 2,00? Well, I mean, I think\nthis is pretty clear.",
    "start": "239580",
    "end": "247050"
  },
  {
    "text": "If we double the size of the\nlist from 1,000 to 2,000, we will double\nthe amount of time",
    "start": "247050",
    "end": "252600"
  },
  {
    "text": "on average it's going to take. So instead of taking\none minute, on average it will take two minutes. And in fact, we can\nwrite a little formula",
    "start": "252600",
    "end": "259350"
  },
  {
    "text": "that looks like this. Average time to find an\nitem is equal to the number of items divided by\n1,000 times 1 minute.",
    "start": "259350",
    "end": "266340"
  },
  {
    "text": "But it turns out that\nour little formula here is highly dependent upon\nthe specific computer",
    "start": "266340",
    "end": "272550"
  },
  {
    "text": "because if I have\na faster computer, I can find an item on\naverage faster than one",
    "start": "272550",
    "end": "279270"
  },
  {
    "text": "minute for 1,000 items. And so really, if we want\na more general formula,",
    "start": "279270",
    "end": "284427"
  },
  {
    "text": "we would actually\nwrite it like this. We would say average time to\nfind is equal to constant times the number of items,\nwhere that constant",
    "start": "284428",
    "end": "291360"
  },
  {
    "text": "is going to vary depending upon\na particular type of computer. But I still know\nthis general formula,",
    "start": "291360",
    "end": "298050"
  },
  {
    "text": "where I have some given\nconstant determined by the speed of the computer,\ntimes the number of items.",
    "start": "298050",
    "end": "303350"
  },
  {
    "text": "So as the number of items\nincreases, the amount of time it's going to take me will also\nincrease at a constant rate.",
    "start": "303350",
    "end": "312060"
  },
  {
    "text": "OK. So can we do a search that\nis faster than linear search? Yes.",
    "start": "312060",
    "end": "318230"
  },
  {
    "text": "If the list is\nordered, we can do what's called a binary search. How does a binary search work? In a binary search,\nwhat we're going to do",
    "start": "318230",
    "end": "324590"
  },
  {
    "text": "is we're going to take the list. And we're going to\ndivide it in half. And we will determine if the\nitem that we're looking for",
    "start": "324590",
    "end": "332800"
  },
  {
    "text": "is in the upper half of\nthe list or in the lower half of the list. And this is similar to--",
    "start": "332800",
    "end": "340419"
  },
  {
    "text": "this analogy is getting old. But I have previously\nasked students. And they continue\nto tell me they",
    "start": "340420",
    "end": "346030"
  },
  {
    "text": "do understand this analogy. So I'm going to\ncontinue using it. So the analogy would\nbe similar to if you",
    "start": "346030",
    "end": "352449"
  },
  {
    "text": "have a physical telephone book. And you're trying to find\na name in that phone book.",
    "start": "352450",
    "end": "360220"
  },
  {
    "text": "You split the\nphone book in half. And you say, is the name in the\nfirst half of the phone book? Or is in the last half\nof the phone book?",
    "start": "360220",
    "end": "366760"
  },
  {
    "text": "Oh, it's in the first\nhalf of the phone book. OK. I'm going to split that half\nof the phone book in half. So now, we're looking\nat quarter sections.",
    "start": "366760",
    "end": "373570"
  },
  {
    "text": "Is it in the first quarter? Or is it in the second quarter? Oh, it's in the first quarter. I'm going to split that in\nhalf and look at an eighth",
    "start": "373570",
    "end": "380560"
  },
  {
    "text": "versus an eighth and so on. And this is the same\nway you would also look for a word in a\ndictionary if you actually",
    "start": "380560",
    "end": "387520"
  },
  {
    "text": "had a physical dictionary. So let's look at\nhow this might work for our monarchs of England.",
    "start": "387520",
    "end": "394680"
  },
  {
    "text": "I've reordered the list because,\nagain, binary search requires that the items are ordered.",
    "start": "394680",
    "end": "401550"
  },
  {
    "text": "OK. So suppose we're\nlooking for Edward. What we're going to do is going\nto split the list in half. Now, it turns out,\nin some cases,",
    "start": "401550",
    "end": "409130"
  },
  {
    "text": "we can't split the\nlist evenly in half. And so in this case, I'm going\nto split the list in half",
    "start": "409130",
    "end": "416840"
  },
  {
    "text": "and start with Henry. I'm going to compare\nEdward to Henry and see if-- maybe I\nsplit the list in half. This is like I open\nup the telephone book.",
    "start": "416840",
    "end": "424940"
  },
  {
    "text": "And it happens to be that\nthe item I'm looking for is actually right there.",
    "start": "424940",
    "end": "434210"
  },
  {
    "text": "I split it in half. And there's the name\nI'm looking for. That happens to just\nexactly be on that page.",
    "start": "434210",
    "end": "439349"
  },
  {
    "text": "So it is possible to\nsplit the list in half. And actually, the\nhalfway point, that's the name we're looking for.",
    "start": "439350",
    "end": "445475"
  },
  {
    "text": "But in this case, it's not. And so what I can do here is I\ncan say, does the name Edward--",
    "start": "445475",
    "end": "453020"
  },
  {
    "text": "if it were actually\non this list, does that come before\nHenry or after Henry?",
    "start": "453020",
    "end": "458150"
  },
  {
    "text": "And in this case, since\nthe list is alphabetized, I know that E comes\nbefore H. And therefore, I",
    "start": "458150",
    "end": "464090"
  },
  {
    "text": "toss out all the items\nfrom Henry onwards. I'm not interested in those.",
    "start": "464090",
    "end": "469470"
  },
  {
    "text": "And I know that if\nEdward is on the list, it needs to be somewhere in\nthe first half of the list,",
    "start": "469470",
    "end": "475220"
  },
  {
    "text": "somewhere between\nAnne and George. So I go ahead and\ntoss those items out.",
    "start": "475220",
    "end": "480860"
  },
  {
    "text": "And then I split the\nlist in half again. And again, this list\ndoes not split evenly.",
    "start": "480860",
    "end": "486278"
  },
  {
    "text": "So you need to have\nsome sort of rule in terms of if the list\ndoesn't split evenly, are you going to go slightly\nlower or are you going to",
    "start": "486278",
    "end": "493340"
  },
  {
    "text": "go slightly higher? So I'm going to\ngo slightly higher and say we're going to go\nahead and look at Elizabeth. Is Edward Elizabeth?",
    "start": "493340",
    "end": "499250"
  },
  {
    "text": "No, it's not. If Edward were on\nthe list, would he",
    "start": "499250",
    "end": "505550"
  },
  {
    "text": "come above Elizabeth\nor below Elizabeth? Well, alphabetically, they both\nstart with E. D comes before L.",
    "start": "505550",
    "end": "514651"
  },
  {
    "text": "And so that means I would be\nin the first half of the list. So I'm going to go ahead and\ntoss out Elizabeth onwards.",
    "start": "514652",
    "end": "521599"
  },
  {
    "text": "And I'm just going to\nfocus on Anne and Edward. And of course, there's\nEdward right there. And so we're done.",
    "start": "521600",
    "end": "528130"
  },
  {
    "text": "So it seems pretty complicated. But actually, it's\ngoing to turn out",
    "start": "528130",
    "end": "534970"
  },
  {
    "text": "this is much faster\nthan a linear search. One of the reasons why this\nseems kind of complicated",
    "start": "534970",
    "end": "542440"
  },
  {
    "text": "and you may not be\nseeing the benefits here is that the\nbenefits are really going to show up as the\nlist size increases.",
    "start": "542440",
    "end": "549760"
  },
  {
    "text": "So if we've got 10,000\nitems, the binary search",
    "start": "549760",
    "end": "554890"
  },
  {
    "text": "is going to make\na huge difference. If we've got five\nitems, not so much. It seems sort of complicated.",
    "start": "554890",
    "end": "561879"
  },
  {
    "text": "And you're going to be\ndoing all these comparisons. And it just may not seem like\nyou're getting a big benefit.",
    "start": "561880",
    "end": "567347"
  },
  {
    "text": "And we're actually going to\ntalk about that a little bit later on in terms\nof, well, if you",
    "start": "567347",
    "end": "573040"
  },
  {
    "text": "have small amounts of items,\nthe algorithm that you're using,",
    "start": "573040",
    "end": "578180"
  },
  {
    "text": "there are different\nthings to think about. Like, is there big\nstart-up costs?",
    "start": "578180",
    "end": "583460"
  },
  {
    "text": "And so these are\ndifferent concerns. So keep in mind, when we're\ntalking about analysis of algorithms, we're\ngenerally talking",
    "start": "583460",
    "end": "588980"
  },
  {
    "text": "about what happens when\nthe numbers get really large because when the\nnumbers get really large, that's when we can't actually--",
    "start": "588980",
    "end": "595970"
  },
  {
    "text": "if we choose the\nwrong algorithm, we aren't actually able\nto have a program that actually completes in a\nreasonable amount of time.",
    "start": "595970",
    "end": "601950"
  },
  {
    "text": "So maybe I can write the program\nand run it on the data set. And in three years, it\nwill finish running.",
    "start": "601950",
    "end": "608900"
  },
  {
    "text": "Well, that's not a\nreasonable amount of time. That program is\npretty much useless.",
    "start": "608900",
    "end": "614480"
  },
  {
    "text": "OK. So binary search is much faster,\nparticularly as the number of items increases.",
    "start": "614480",
    "end": "620980"
  },
  {
    "text": "The number of times\nwe need to search doesn't increase linearly. So we saw that, with\nthe linear search, if we doubled the number of\nitems in the linear search,",
    "start": "620980",
    "end": "629110"
  },
  {
    "text": "the amount of time it's\ngoing to take to carry out the linear search doubles. If we quintuple\nthe amount of times",
    "start": "629110",
    "end": "637270"
  },
  {
    "text": "the number of items in the\nlist for linear search, the amount of time it's going\nto take is going to quintuple.",
    "start": "637270",
    "end": "644500"
  },
  {
    "text": "But what happens\nwith a binary search is it doesn't increase\nat that linear rate because we keep on\nsplitting our list in half.",
    "start": "644500",
    "end": "650917"
  },
  {
    "text": "We split the list in half. We split the list in half. And it turns out that a\nbinary search actually",
    "start": "650917",
    "end": "657010"
  },
  {
    "text": "increases at a log. So you may recall that the way\nlogs work is they're basically",
    "start": "657010",
    "end": "664720"
  },
  {
    "text": "determined based on power. So if I have log 10,\nthat's actually 1.",
    "start": "664720",
    "end": "670930"
  },
  {
    "text": "Log of 100 is 2 because 10\nof the second power is 100.",
    "start": "670930",
    "end": "676180"
  },
  {
    "text": "Log of 1,000 is 3 because 10\nto the third power is 1,000. And log of 10,000 is\n4 because if I take 10",
    "start": "676180",
    "end": "685480"
  },
  {
    "text": "to the fourth\npower, it's 10,000. Now, in computer science, and\nin particular for binary search,",
    "start": "685480",
    "end": "691210"
  },
  {
    "text": "in computer science in general\nwe often use powers of 2. And in binary search, we\ndefinitely use powers of 2",
    "start": "691210",
    "end": "696730"
  },
  {
    "text": "because we are repeatedly\nsplitting the list in half, in half, in half, in half. So I've gone ahead and\nwritten the logs base 2 here.",
    "start": "696730",
    "end": "705760"
  },
  {
    "text": "And we can write that as\nlog with a little subscript",
    "start": "705760",
    "end": "711520"
  },
  {
    "text": "2 there, meaning that we are\nusing base 2 numbers instead of base 10 numbers.",
    "start": "711520",
    "end": "716980"
  },
  {
    "text": "And this is also sometimes\nwritten as ln of n. But the main thing to note here\nis that this is much faster.",
    "start": "716980",
    "end": "726450"
  },
  {
    "text": "OK. So we can write the\nformula for how long it takes like this--\naverageTimeToFind is equal to constant times log\nbase 2 of NumberOfItems.",
    "start": "726450",
    "end": "735320"
  },
  {
    "text": "And again, if you\nactually work out log base 2 of the\nnumber of items",
    "start": "735320",
    "end": "740990"
  },
  {
    "text": "versus just the number\nof items and you were to plot the\ntwo on a graph, you would see that log of base\n2 is much, much better.",
    "start": "740990",
    "end": "748490"
  },
  {
    "text": " And again, I've got\nthat constant in there",
    "start": "748490",
    "end": "753980"
  },
  {
    "text": "because we are concerned with-- the particular computer\nis going to vary in speed.",
    "start": "753980",
    "end": "761240"
  },
  {
    "text": "And so what I want to know\nis, in general, if I'm trying to compare this\nalgorithm to another algorithm",
    "start": "761240",
    "end": "768110"
  },
  {
    "text": "regardless of the specific\ncomputer I'm using and how long that\ncomputer's going to take,",
    "start": "768110",
    "end": "774167"
  },
  {
    "text": "that's where we go ahead\nand put in that constant. So I don't know if I\nhave a fast computer or I have a slow computer.",
    "start": "774167",
    "end": "780290"
  },
  {
    "text": "But I do know that,\nfor binary search, it's going to increase based on\nthe log of the number of items",
    "start": "780290",
    "end": "788779"
  },
  {
    "text": "that I'm using. OK. So log base n is actually a\npretty good speed improvement.",
    "start": "788780",
    "end": "797790"
  },
  {
    "text": "Can I do better? Now, as it turns out,\nthe answer is yes. And when I first saw this\nwhen I was a college student,",
    "start": "797790",
    "end": "806020"
  },
  {
    "text": "this blew my mind. I thought this was the\ngreatest thing ever. And so we're going to use a\ntechnique called hash tables.",
    "start": "806020",
    "end": "813510"
  },
  {
    "text": "And hash tables\ndepends on something called a hash\nfunction, which we'll take a look at in a minute. So with a hash table,\nwhat we're going to do is",
    "start": "813510",
    "end": "820368"
  },
  {
    "text": "we're going to store all\nthe different items that are going to be in our\ndata set in an array.",
    "start": "820368",
    "end": "827910"
  },
  {
    "text": "And we're going to\ngive instant access to any item in the array. So we had to go through\neach of the individual items",
    "start": "827910",
    "end": "836010"
  },
  {
    "text": "using a linear search. With the binary search, we\nsplit the items in half, checked the upper versus the\nlower half, Split the items",
    "start": "836010",
    "end": "843630"
  },
  {
    "text": "in half, checked the upper\nhalf versus the lower half, split the items in half. And if we've got a\nlarge list, that's",
    "start": "843630",
    "end": "850560"
  },
  {
    "text": "going to be a lot\nof splits there. And it's definitely going to\nbe a lot for the linear search. For the hash tables, we are\ngoing to get instant access.",
    "start": "850560",
    "end": "857340"
  },
  {
    "text": "You tell me what item\nyou want, and I'll be like, that's exactly\nwhere the item is. How do we do this?",
    "start": "857340",
    "end": "862710"
  },
  {
    "text": "It's like magic. It's amazing. All right. So as I mentioned, we are\ngoing to use something",
    "start": "862710",
    "end": "868570"
  },
  {
    "text": "called a hash function. A hash function is going\nto create an ordinal number from a more complex item.",
    "start": "868570",
    "end": "875290"
  },
  {
    "text": "And so in our example, we're\nlooking upwards in a table. But this technique can\nbe used for other types",
    "start": "875290",
    "end": "881110"
  },
  {
    "text": "of data other than just words. OK. So I'm going to use\na simple hash here.",
    "start": "881110",
    "end": "886339"
  },
  {
    "text": "This is not necessarily-- there's a whole\nscience and mathematics",
    "start": "886340",
    "end": "893830"
  },
  {
    "text": "to choosing proper hashes. And I'm not going\nto get into it.",
    "start": "893830",
    "end": "899510"
  },
  {
    "text": "And I have not\nstudied this stuff since I was your age, like\nliterally 35 years ago,",
    "start": "899510",
    "end": "908899"
  },
  {
    "text": "40 years ago. It's been a long time. OK. So we're going to use a simple\nhash that's easy for everybody",
    "start": "908900",
    "end": "915290"
  },
  {
    "text": "to understand. What we're going to\ndo is we are going to form our hash by adding\nall the ordinal positions",
    "start": "915290",
    "end": "921620"
  },
  {
    "text": "of the letters in the\nword that we are going to place into our data set.",
    "start": "921620",
    "end": "926810"
  },
  {
    "text": "OK. So suppose we have the word cat. C is the third letter.",
    "start": "926810",
    "end": "932190"
  },
  {
    "text": "A is the first letter. And T is the 20th letter. And so I'm going to go ahead\nand form my hash by adding those",
    "start": "932190",
    "end": "938650"
  },
  {
    "text": "up together. I'm going to say\n3 plus 1 plus 20 because third letter plus\nfirst letter plus 20th letter.",
    "start": "938650",
    "end": "945070"
  },
  {
    "text": "Add those three\ntogether, I'm going to say our hash\nfunction gives us a 24.",
    "start": "945070",
    "end": "951330"
  },
  {
    "text": "Now, if we've actually\ngot over 24 slots, then we're good to go.",
    "start": "951330",
    "end": "956740"
  },
  {
    "text": "But if we don't have\n24 slots, if we've got a limited number of slots\nwhere the hash function can",
    "start": "956740",
    "end": "965600"
  },
  {
    "text": "come up with larger numbers than\nthe actual number of positions we have, which is\npretty common--",
    "start": "965600",
    "end": "970730"
  },
  {
    "text": "in fact, in this\ncase with cat, you can make the argument that,\nwell, I can have 26 characters.",
    "start": "970730",
    "end": "981260"
  },
  {
    "text": "So it'd 26 plus 26 plus 26. But that only works if all of\nour words have three letters.",
    "start": "981260",
    "end": "989449"
  },
  {
    "text": "Anyway, so it's pretty\ncommon to have hash functions with numbers that\nare much larger than the size of the table that\nyou're storing the data in.",
    "start": "989450",
    "end": "995800"
  },
  {
    "text": "So what we're going\nto do is we're going to go ahead and\nperform a modulus. You may recall that modulus\ngives me integer remainder",
    "start": "995800",
    "end": "1003250"
  },
  {
    "text": "dividing something out. So what I'm going\nto do is I'm going to take the hash\nfunction, the value",
    "start": "1003250",
    "end": "1009550"
  },
  {
    "text": "returned by the hash function. I'm going to modulus it\nby the number of slots I have in my table.",
    "start": "1009550",
    "end": "1016332"
  },
  {
    "text": "And that's actually where I'm\ngoing to go ahead and look up the item. So in this particular\ncase, suppose",
    "start": "1016332",
    "end": "1021730"
  },
  {
    "text": "we're storing these items in\nan array which has 10 slots.",
    "start": "1021730",
    "end": "1027261"
  },
  {
    "text": "What we're going\nto do is I'm going to go ahead and take\ncat, which gave me the 3 plus 1 plus 20 is 24.",
    "start": "1027262",
    "end": "1033849"
  },
  {
    "text": "And I need that to\nfit between 0 and 9. And so I'm going to go\nahead and take the 24 and do a modulus on 10.",
    "start": "1033849",
    "end": "1040480"
  },
  {
    "text": "And so again, modules\ngives an integer remainder. So this is basically saying\ntake 24, divide it by 10.",
    "start": "1040480",
    "end": "1046869"
  },
  {
    "text": "That would give you 2, if we\nwere doing integer arithmetic. What's the remainder? The remainder is 4.",
    "start": "1046869",
    "end": "1052390"
  },
  {
    "text": "So the modulus is 4. And so I would go\nahead and put cat in the fourth slot\nin our array here.",
    "start": "1052390",
    "end": "1059080"
  },
  {
    "text": "OK. So we can do a bunch of these. So dog, D is the fourth letter. O is the 15th letter.",
    "start": "1059080",
    "end": "1065039"
  },
  {
    "text": "And G is the seventh letter. And so I go ahead and\nadd those all together. That gives me 26.",
    "start": "1065040",
    "end": "1070710"
  },
  {
    "text": "I take the modulus,\nwhich gives me 6. So I would go ahead\nand place cat in slot 4",
    "start": "1070710",
    "end": "1077490"
  },
  {
    "text": "and dog in slot 6. Tip-- and these are\njust three letter words.",
    "start": "1077490",
    "end": "1082590"
  },
  {
    "text": "But you can use whatever\nlength word that you want. And that'll get you larger and\nlarger numbers, potentially.",
    "start": "1082590",
    "end": "1088980"
  },
  {
    "text": "But since we're always\nmodulusing thing by 10, it doesn't really matter. We're always going to end up\nwith a number between 0 and 9",
    "start": "1088980",
    "end": "1094887"
  },
  {
    "text": "after we've completed\nthat modulus. OK. So tip-- T is the 20th letter.",
    "start": "1094887",
    "end": "1100672"
  },
  {
    "text": "I is the ninth letter. And p is the 16th letter. That gives me 45. Modulus 10, I'm going to go\nahead and put that in slot 5.",
    "start": "1100672",
    "end": "1107909"
  },
  {
    "text": "Now, one thing that you\nmay be thinking here is that, hey, isn't\nit possible to end up",
    "start": "1107910",
    "end": "1115100"
  },
  {
    "text": "with two items in the same slot? Absolutely it is. So if I've got a cat,\nthat's 3 plus 1 plus 20,",
    "start": "1115100",
    "end": "1121940"
  },
  {
    "text": "and I've got act,\nthat's 1 plus 3 plus 20, those both hash to\nthe same location.",
    "start": "1121940",
    "end": "1127720"
  },
  {
    "text": "And so this is\ncalled a collision. And there's a variety\nof different techniques that can be used to\nhandle collisions.",
    "start": "1127720",
    "end": "1134510"
  },
  {
    "text": "But we're not going to talk\nabout them in this class. If you have a well-chosen\nhashing function,",
    "start": "1134510",
    "end": "1140990"
  },
  {
    "text": "and if you have a lot of\nslots, it's not a problem. And it actually turns out--",
    "start": "1140990",
    "end": "1146509"
  },
  {
    "text": "I haven't studied this. But if you study\nthis, it turns out",
    "start": "1146510",
    "end": "1152430"
  },
  {
    "text": "that you can have a\nsurprisingly small hash table and still be pretty efficient.",
    "start": "1152430",
    "end": "1157540"
  },
  {
    "text": "So you might be thinking,\nwell, if I've got 50 items and I have a hash table\nthat's 1,000 items.",
    "start": "1157540",
    "end": "1165180"
  },
  {
    "text": "But you have to\nstore 1,000 items. And I'm not going to have\nthat many collisions. And that is certainly true. But it turns out,\nyou don't actually",
    "start": "1165180",
    "end": "1170820"
  },
  {
    "text": "need a table that's all\nthat big in order to not have that many collisions.",
    "start": "1170820",
    "end": "1175920"
  },
  {
    "text": "I was actually kind of\nsurprised by that result. OK. So we've been talking\nabout using the hash",
    "start": "1175920",
    "end": "1181540"
  },
  {
    "text": "to put items in the table. And then of course,\nif you're trying to figure out if an item\nis in the table as opposed",
    "start": "1181540",
    "end": "1187110"
  },
  {
    "text": "to putting an item\ninto the table, you just do the same thing. So suppose I want to look up\nand see if box in our table.",
    "start": "1187110",
    "end": "1195280"
  },
  {
    "text": "Well, I go ahead and\ncalculate the hash. B is the second letter. O is the 15th letter.",
    "start": "1195280",
    "end": "1201330"
  },
  {
    "text": "And X is the 24th letter. I add them all up. That gives me 41. 41 Modulus 10 is 1.",
    "start": "1201330",
    "end": "1207630"
  },
  {
    "text": "And then I check if the item\nis in the given location. So I say, hey, let's go ahead\nand check item 1 in our table.",
    "start": "1207630",
    "end": "1215789"
  },
  {
    "text": "Is that box? If there's nothing\nthere, then I know",
    "start": "1215790",
    "end": "1222050"
  },
  {
    "text": "that box is not in the table. If there's something\nelse in slot 1, well, that's the collision\nthing that we just",
    "start": "1222050",
    "end": "1228920"
  },
  {
    "text": "talked about a minute ago. And that definitely has some\nfairly reasonable solutions.",
    "start": "1228920",
    "end": "1235669"
  },
  {
    "text": "But they're a\nlittle complicated. So we're not going to\ndescribe them in this lecture.",
    "start": "1235670",
    "end": "1241790"
  },
  {
    "text": "Just be aware that, yes, hashing\nfunctions can cause collisions where two things has\nto the same location.",
    "start": "1241790",
    "end": "1248700"
  },
  {
    "text": "That's totally a thing. If you were looking\nat this going, hey, isn't there something--",
    "start": "1248700",
    "end": "1254210"
  },
  {
    "text": "I seem to recall a\njoke about dog and God. Won't that create\nthe same hash value?",
    "start": "1254210",
    "end": "1261480"
  },
  {
    "text": "Yes, it will. And there are ways to handle it. OK.",
    "start": "1261480",
    "end": "1266920"
  },
  {
    "text": "So how does hash tables compare\nwith linear search and binary search? Hash tables are\nmuch, much better.",
    "start": "1266920",
    "end": "1271960"
  },
  {
    "text": "Like I said, it's like magic. This stuff's amazing. So with hash tables, what\nare my table contains?",
    "start": "1271960",
    "end": "1279160"
  },
  {
    "text": "20 items, 200 items,\n200,000 items, it still takes the exact\nsame amount of time",
    "start": "1279160",
    "end": "1284470"
  },
  {
    "text": "to determine if the\nitem's in the table. I just go ahead look at the\nitem that I'm trying to look up. I calculate its\nhash function, which",
    "start": "1284470",
    "end": "1291610"
  },
  {
    "text": "does not change based\non the number of items that are in the table. Calculate that hash function.",
    "start": "1291610",
    "end": "1297050"
  },
  {
    "text": "It'll take longer if the\nword's a little bit longer. But in terms of how\nmany data items I have, it doesn't matter how many\ndata items I'm working with.",
    "start": "1297050",
    "end": "1304203"
  },
  {
    "text": "I could have a\nmillion data items. It's still going to take\nthe same amount of time for me to determine the\nhash for an individual item.",
    "start": "1304203",
    "end": "1310570"
  },
  {
    "text": "And then it's just super easy. Once you have the hash, you\njust go to a particular item",
    "start": "1310570",
    "end": "1315638"
  },
  {
    "text": "in the array. That's pretty much\ninstantaneous. So this works super, super well.",
    "start": "1315638",
    "end": "1321940"
  },
  {
    "text": "Again, I think it's\npretty amazing. I was amazed when\nI saw this when",
    "start": "1321940",
    "end": "1328240"
  },
  {
    "text": "I was a college student,\nwhich, again, probably says quite a bit about me. But I thought it was\nreally, really cool.",
    "start": "1328240",
    "end": "1334750"
  },
  {
    "text": "I was like, wow, this is great. Anyway, so if we want to\nwrite a formula for how long",
    "start": "1334750",
    "end": "1340932"
  },
  {
    "text": "it takes to find an\nitem in a hash table, here it is right here. The time to find\nis just a constant.",
    "start": "1340932",
    "end": "1346120"
  },
  {
    "text": "The exact constant\nvaries, again, depending upon how fast\nor slow our computer is. So in computer science, we\ncategorize different algorithms",
    "start": "1346120",
    "end": "1354309"
  },
  {
    "text": "using what's called O-notation. So using O-notation, we'd\nsay that linear search is O of n, which essentially\nmeans that the time it",
    "start": "1354310",
    "end": "1361630"
  },
  {
    "text": "takes to carry out a linear\nsearch increases directly with n, where n is the\nnumber of items in the list.",
    "start": "1361630",
    "end": "1368520"
  },
  {
    "text": "Binary search is\nO of log n, which means that the amount of time\nto carry out a binary search increases with the\nlogarithm of n.",
    "start": "1368520",
    "end": "1376120"
  },
  {
    "text": "And hash tables are O of 1,\nwhich means the amount of time to determine if an item is\nin a hash table is constant",
    "start": "1376120",
    "end": "1382030"
  },
  {
    "text": "and does not change with n. Let's take a look at the\nformal definition of O of n.",
    "start": "1382030",
    "end": "1388890"
  },
  {
    "text": "So f of x is O of g of x if\nthere exists constants c and k",
    "start": "1388890",
    "end": "1394590"
  },
  {
    "text": "such that 0 is less than or\nequal to f of n is less than or equal to c of g of n,\nwhere n is greater than k.",
    "start": "1394590",
    "end": "1402140"
  },
  {
    "text": "So the f of x here is the actual\nperformance of our algorithm. So that would be, for example,\nhow much time it actually takes",
    "start": "1402140",
    "end": "1410210"
  },
  {
    "text": "to carry out a binary search. And so the g of x, in the\ncase of binary search,",
    "start": "1410210",
    "end": "1415990"
  },
  {
    "text": "would be log n. So I would say, the performance\nof binary search is O of log n",
    "start": "1415990",
    "end": "1423899"
  },
  {
    "text": "because the actual\nperformance of binary search-- that's the f of x--",
    "start": "1423900",
    "end": "1428909"
  },
  {
    "text": "is less than or equal\nto log of n times some constant for n is\ngreater than or equal to k.",
    "start": "1428910",
    "end": "1436140"
  },
  {
    "text": "Let's take a look at\nthis c and k business here and see what's\ngoing on there.",
    "start": "1436140",
    "end": "1441620"
  },
  {
    "text": "OK. So 0 is less than or equal\nto f of n is less than or equal to c of g of n.",
    "start": "1441620",
    "end": "1447460"
  },
  {
    "text": "That's telling us that\nwhat we're looking at here is an upper limit. So f of n is the\nactual performance.",
    "start": "1447460",
    "end": "1453010"
  },
  {
    "text": "And g of n is the performance\nthat we're comparing it to. So we know that f of n is less\nthan or equal to c of g of n.",
    "start": "1453010",
    "end": "1460810"
  },
  {
    "text": "And so if we're not able to\nfind the exact performance, but we're able to say, hey,\nI know this works better",
    "start": "1460810",
    "end": "1467230"
  },
  {
    "text": "than this other algorithm-- I know this does\nbetter than n squared or I know this does better\nthan n cubed, that's",
    "start": "1467230",
    "end": "1472840"
  },
  {
    "text": "good enough for O-notation. What about that c factor there? Why is it c of g of n\ninstead of just g of n?",
    "start": "1472840",
    "end": "1480290"
  },
  {
    "text": "That multiplier there,\nthat c multiplier there, tells us that the\namount of time it takes to process an individual\nitem is not important.",
    "start": "1480290",
    "end": "1488120"
  },
  {
    "text": "So maybe it takes 30 seconds for\none iteration of binary search and it takes one second for\neach iteration of linear search.",
    "start": "1488120",
    "end": "1496130"
  },
  {
    "text": "And so it turns out that means\nthat, for small numbers of n, the linear search is\ngoing to be faster.",
    "start": "1496130",
    "end": "1501600"
  },
  {
    "text": "But for large numbers\nof n, the binary search is ultimately going\nto be much faster. Let's take a look at\nhow that might work.",
    "start": "1501600",
    "end": "1508350"
  },
  {
    "text": "So again, assuming 30\nseconds for an iteration of binary search, one second for\nan iteration of linear search,",
    "start": "1508350",
    "end": "1514940"
  },
  {
    "text": "it turns out that if\nwe have 1,025 items and we take log to the\nbase 2 of 1,025, I get 10,",
    "start": "1514940",
    "end": "1523399"
  },
  {
    "text": "approximately 10. So this means that if I have\naround 1,025 items, on average,",
    "start": "1523400",
    "end": "1528890"
  },
  {
    "text": "I'm going to need\nto do 10 iterations of our binary search. If it takes 30 seconds for each\niteration of our binary search,",
    "start": "1528890",
    "end": "1535340"
  },
  {
    "text": "it's going to take 300 seconds\nto process all 1,025 items",
    "start": "1535340",
    "end": "1540470"
  },
  {
    "text": "or to search if I need to go\nthrough those 1,025 items. In contrast, I said\nlinear search only",
    "start": "1540470",
    "end": "1547640"
  },
  {
    "text": "takes one second per iteration. But if I have 1,025 items,\nI'm going to, on average,",
    "start": "1547640",
    "end": "1555620"
  },
  {
    "text": "need to do 500 comparisons. And that's going to\ntake 500 seconds. So what we're seeing\nhere is, sure,",
    "start": "1555620",
    "end": "1561620"
  },
  {
    "text": "for small n, that 30 seconds per\niteration on the binary search is going to make\na big difference.",
    "start": "1561620",
    "end": "1567080"
  },
  {
    "text": "If I've got 5 items\nin the list and it takes 30 seconds for an\niteration of binary search, even if I only had to\ndo a single iteration,",
    "start": "1567080",
    "end": "1574280"
  },
  {
    "text": "I'm already in trouble. But as n gets larger, and\nlarger, and larger, the fact",
    "start": "1574280",
    "end": "1579799"
  },
  {
    "text": "that a single iteration takes\na lot more time is a lot less important than the total number\nof iterations I need to do.",
    "start": "1579800",
    "end": "1585470"
  },
  {
    "text": "So that's what that c\nfactor in there is saying. It's saying, I\ndon't care if it's a constant difference in\nterms of the amount of time",
    "start": "1585470",
    "end": "1591800"
  },
  {
    "text": "per iteration. I really care about the\namount of iterations. ",
    "start": "1591800",
    "end": "1597820"
  },
  {
    "text": "All right. What about that n is\ngreater than or equal to k? So what that's talking\nabout is startup time.",
    "start": "1597820",
    "end": "1603480"
  },
  {
    "text": "So again, it's possible\nfor small numbers of items that the initial\nstartup time is going",
    "start": "1603480",
    "end": "1609840"
  },
  {
    "text": "to swamp the actual\ntime in order to process each of the individual items. So let's say it takes a\nminute for a binary search",
    "start": "1609840",
    "end": "1616680"
  },
  {
    "text": "to get started, whereas a linear\nsearch starts automatically. Maybe there's some\nsetup stuff I need to do for the binary search.",
    "start": "1616680",
    "end": "1622110"
  },
  {
    "text": "I need to set up some\ndata structures in order to do the binary search. For small numbers\nof n, this could",
    "start": "1622110",
    "end": "1628768"
  },
  {
    "text": "mean that the binary search\nis not the right way to go. But as my numbers get\nlarger and larger, if I'm processing 1,000 items,\ndoes that one minute startup",
    "start": "1628768",
    "end": "1636392"
  },
  {
    "text": "time make a difference? If I'm processing 10,000 items,\ndoes that one minute of startup time make a difference? If I'm processing\n100,000 items--",
    "start": "1636392",
    "end": "1642630"
  },
  {
    "text": "at some point, the\nbetter algorithm, the algorithm the\nbetter O-notation",
    "start": "1642630",
    "end": "1648360"
  },
  {
    "text": "is going to win out\nover the algorithm that has a smaller setup time, but\nends up having many, many more",
    "start": "1648360",
    "end": "1655050"
  },
  {
    "text": "iterations of processing\nthat it needs to carry out. So that's the basic idea\nhere behind O-notation.",
    "start": "1655050",
    "end": "1663070"
  },
  {
    "text": "So what we're saying\nis, first of all, we're saying that this is an\nupper end on the performance,",
    "start": "1663070",
    "end": "1669707"
  },
  {
    "text": "that the performance\nof our algorithm might actually be better\nthan the stated O-notation. We'll talk about that\na little bit later.",
    "start": "1669708",
    "end": "1675660"
  },
  {
    "text": "There's some other related\nnotations that tighten that up. I'm saying that it doesn't\nmatter how long it takes",
    "start": "1675660",
    "end": "1682770"
  },
  {
    "text": "on a particular iteration. And I'm saying it doesn't matter\nhow much startup time there is.",
    "start": "1682770",
    "end": "1688350"
  },
  {
    "text": "Ultimately, for large numbers\nof items, the type of O-notation",
    "start": "1688350",
    "end": "1697410"
  },
  {
    "text": "will overwhelm these\nother factors regardless of the startup time,\nregardless the amount of time",
    "start": "1697410",
    "end": "1704310"
  },
  {
    "text": "in each iteration. Ultimately, the\nbig winner is going to be the number of iterations. And that's what\nO-notation is measuring.",
    "start": "1704310",
    "end": "1711940"
  },
  {
    "text": "OK. So here are some\ncommon O-notations, here along with their names. O of 1 is what we\nrefer to as constant.",
    "start": "1711940",
    "end": "1719880"
  },
  {
    "text": "So that's like we see\nwith the hash table. It doesn't matter\nhow many times--",
    "start": "1719880",
    "end": "1725680"
  },
  {
    "text": "it doesn't matter how\nmany items I'm processing. It's always going to take\nthe same amount of time. O of log n, that's logarithmic.",
    "start": "1725680",
    "end": "1733559"
  },
  {
    "text": "We saw that with\nour binary search. Logarithmic is a great,\ngreat O-notation.",
    "start": "1733560",
    "end": "1739190"
  },
  {
    "text": "So if you've got an algorithm\nthat works on O of log n, that's a good algorithm. O of n, that's linear.",
    "start": "1739190",
    "end": "1746640"
  },
  {
    "text": "O of n log n, that's OK.",
    "start": "1746640",
    "end": "1753597"
  },
  {
    "text": "It's going to depend upon the\nparticular algorithm we're using. So if we're doing a sorting\nalgorithm of n log n, that's pretty good.",
    "start": "1753597",
    "end": "1759634"
  },
  {
    "text": "O of n squared,\nthat's quadratic. That's bad. And O of 2 to the n,\nthat's exponential. And that's pretty much like\nyou might as well just give up.",
    "start": "1759635",
    "end": "1766880"
  },
  {
    "text": "That's not going\nbe able to finish in any reasonable amount of\ntime for any reasonable amount of items.",
    "start": "1766880",
    "end": "1772070"
  },
  {
    "text": "All right. So let's take a look at\nsome related notations. OK. So we're using O-notation.",
    "start": "1772070",
    "end": "1778000"
  },
  {
    "text": "We've been talking\nabout O-notation. That's actually\nthe most common way to talk about these algorithms. And as we've seen,\nO-notation says",
    "start": "1778000",
    "end": "1784070"
  },
  {
    "text": "our algorithm is equal to or\nbetter than the given notation. So if I say it's O\nof n squared, that means it's no worse\nthan n squared.",
    "start": "1784070",
    "end": "1791149"
  },
  {
    "text": "And it might actually be a\nbit better than n squared. There's also big omega notation.",
    "start": "1791150",
    "end": "1797660"
  },
  {
    "text": "And that means our algorithm\nis equal to or worse than a given formula. So if I say something is\nbig omega of n squared,",
    "start": "1797660",
    "end": "1805610"
  },
  {
    "text": "that means we know we aren't\nbetter than n squared. But we actually might be worse. And then there's\nbig theta notation,",
    "start": "1805610",
    "end": "1812497"
  },
  {
    "text": "which means our algorithm is\nexactly equal to the given formal. Why do we have these? It's because when\nwe're trying to analyze",
    "start": "1812498",
    "end": "1818330"
  },
  {
    "text": "a particular algorithm,\nit's not always obvious exactly what the big\ntheta notation is.",
    "start": "1818330",
    "end": "1824360"
  },
  {
    "text": "But we can often find either an\nupper bound or a lower bound. ",
    "start": "1824360",
    "end": "1830240"
  },
  {
    "text": "Also, when we're talking\nabout O-notation, typically, we're\ntalking about time.",
    "start": "1830240",
    "end": "1835580"
  },
  {
    "text": "But we could also be\ntalking about space. So usually, I'm\nsaying, as the number of items increases,\nhow much time is",
    "start": "1835580",
    "end": "1842809"
  },
  {
    "text": "this going to take to process. But I might actually be\nsaying, as the number of items increases-- some\nalgorithms require",
    "start": "1842810",
    "end": "1849350"
  },
  {
    "text": "some extra space in addition\nto the space actually used to store those items-- and so\nhow does that space complexity",
    "start": "1849350",
    "end": "1854750"
  },
  {
    "text": "increase. And in fact, we will find that\nthere's often a time space",
    "start": "1854750",
    "end": "1859910"
  },
  {
    "text": "trade-off, where I can\nprocess something quickly but it requires a lot of space,\nor I can process something",
    "start": "1859910",
    "end": "1866100"
  },
  {
    "text": "a small amount of space but it's\ngoing to take a lot more time. Mergesort is an\nexample of something",
    "start": "1866100",
    "end": "1872389"
  },
  {
    "text": "where the time and\nspace complexity change. And so Mergesort actually has\npretty good time complexity",
    "start": "1872390",
    "end": "1877790"
  },
  {
    "text": "to sort all the items in a list. But it actually turns\nout, in contrast to most of the sorting\nalgorithms where",
    "start": "1877790",
    "end": "1882919"
  },
  {
    "text": "you can go ahead sort the items\nin their original location-- it turns out that\nMergesort is going",
    "start": "1882920",
    "end": "1888560"
  },
  {
    "text": "to need some additional\nspace in order to sort the individual items. So when considering whether\nor not to use Mergesort,",
    "start": "1888560",
    "end": "1893960"
  },
  {
    "text": "you need to consider\nboth the amount of time it's going to take\nand the fact that it is going to require some extra space.",
    "start": "1893960",
    "end": "1900770"
  },
  {
    "text": "We should also be concerned with\naverage case versus worst case performance.",
    "start": "1900770",
    "end": "1907020"
  },
  {
    "text": "In general, the\nmost important thing to be concerned with\nits average case. But if you start worrying\nabout what the worst case",
    "start": "1907020",
    "end": "1913650"
  },
  {
    "text": "performance is,\nthis is useful both if you want to make absolutely\nsure that this performance doesn't start dropping off--\nwell, how is this going",
    "start": "1913650",
    "end": "1920790"
  },
  {
    "text": "to perform in the worst case? It also turns out that analyzing\nthe worst case performance can lead to some\ntweaks in the algorithm",
    "start": "1920790",
    "end": "1928050"
  },
  {
    "text": "to avoid ever running\ninto that worst case. So probably one of the better\nexamples of this is Quicksort.",
    "start": "1928050",
    "end": "1936030"
  },
  {
    "text": "So Quicksort is, on average,\none of the best sorting algorithms that's out there. On average, it gets us O\nof n log n performance.",
    "start": "1936030",
    "end": "1943570"
  },
  {
    "text": "However, if the list\nis already sorted, it turns out that the\nperformance of Quicksort is actually much worse.",
    "start": "1943570",
    "end": "1948929"
  },
  {
    "text": "It gives us O of n\nsquared performance. And so there's different games\nthat people play in order",
    "start": "1948930",
    "end": "1954480"
  },
  {
    "text": "to ensure that the list that\nQuicksort is using is not, in fact, already sorted. And if it is sorted, they tweak\nthe list around a little bit",
    "start": "1954480",
    "end": "1962730"
  },
  {
    "text": "to make it no longer\ncompletely sorted. And that reverts Quicksort\nback to having closer to O of n",
    "start": "1962730",
    "end": "1969780"
  },
  {
    "text": "log n performance. All right, that's it for\nour analysis of algorithms.",
    "start": "1969780",
    "end": "1974800"
  },
  {
    "text": "Next, we're going to\ntake a look at what are called undecidable problems. I'll talk to you soon.",
    "start": "1974800",
    "end": "1981090"
  },
  {
    "start": "1981090",
    "end": "1986000"
  }
]