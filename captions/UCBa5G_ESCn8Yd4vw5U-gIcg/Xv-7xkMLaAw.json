[
  {
    "text": "Watching these lectures on I tunes these days, I'm there on our iPod. So it's this kind of. It's a big responsibility for me to be here to try to get that right now.",
    "start": "6100",
    "end": "16400"
  },
  {
    "text": "No, I don't know. I think people are going to be. Know. Hey. OK. Hello, everyone. This is the book. This is the 13th time I've done this at at.",
    "start": "16400",
    "end": "28060"
  },
  {
    "text": "In December, giving a talk about what I thought was the coolest thing I learned about trees during the year.",
    "start": "28060",
    "end": "35210"
  },
  {
    "text": "Their annual Christmas tree lecture. And. And. Well, equal. It's usually not always the thing I learned in that year because I.",
    "start": "35210",
    "end": "45620"
  },
  {
    "text": "Because there's so many interesting things. You have to carry something over from last year. So what I'm talking about today is actually is actually a follow up on one of the questions that that somebody asked, I think was Liow Ramshaw,",
    "start": "45620",
    "end": "59070"
  },
  {
    "text": "the lecture I gave a year more than a year ago at Halloween time when I was talking about something we called Plato Logic Computing.",
    "start": "59070",
    "end": "70550"
  },
  {
    "text": "Since then, we've changed the net. The people in in Greece didn't like the name Plato logic and and which we tossed around a bunch of Greek term to find out,",
    "start": "70550",
    "end": "79100"
  },
  {
    "text": "found out that actually an English term would be better. So we're going to. So I'm calling that whole whole topic broad word computing now instead of Plato.",
    "start": "79100",
    "end": "87760"
  },
  {
    "text": "Anyway, I mentioned that in response to one of the questions at the end of that lecture.",
    "start": "87760",
    "end": "93590"
  },
  {
    "text": "I just made a brief reference to two sideways heaps. And that's the topic of today's lecture, Sideways Heap's, which I think is really something that deserves to be really well known.",
    "start": "93590",
    "end": "107750"
  },
  {
    "text": "But I don't think there's any any textbooks mentioning it at the moment. And so it can be a nice part of every programmer's took it.",
    "start": "107750",
    "end": "118550"
  },
  {
    "text": "So what is. Before I tell you a sideways heap, let me remind you what a heap is.",
    "start": "118550",
    "end": "125060"
  },
  {
    "text": "In fact, it is kind of embarrassing because there are many,",
    "start": "125060",
    "end": "131150"
  },
  {
    "text": "many different definitions of of heap's in computer science and mathematics with different meanings.",
    "start": "131150",
    "end": "138349"
  },
  {
    "text": "But the kind that I'm talking about here tonight, I'm talking about a data structure that's at an infinite binary tree or a finite part of the infinite binary tree.",
    "start": "138350",
    "end": "150080"
  },
  {
    "text": "And it looks like this. And we've got nodes number one, two, three, four or five and so on as far as you want to go.",
    "start": "150080",
    "end": "159470"
  },
  {
    "text": "And it's a binary tree, meaning that every node has, except the root has two children.",
    "start": "159470",
    "end": "166790"
  },
  {
    "text": "And so they go like this. And just the easiest thing in the world to imagine,",
    "start": "166790",
    "end": "178230"
  },
  {
    "text": "infinite tree that goes like that goes on and on where we just write the numbers so long as long as we can.",
    "start": "178230",
    "end": "189080"
  },
  {
    "text": "And of course, we went on a paper pretty soon and it's pretty crowded, but it goes on and on forever.",
    "start": "189080",
    "end": "199310"
  },
  {
    "text": "So this this is a infinite binary tree that has no leaves because it never ends.",
    "start": "199310",
    "end": "211270"
  },
  {
    "text": "But it's wonderful to use this in lots of algorithms because it gets what we call implicit data structure,",
    "start": "211270",
    "end": "220990"
  },
  {
    "text": "where we where we have the structure of a tree without actually storing any explicit links anywhere. We don't have to ever say in any of the noise of the tree. This is the way to get to hear your left child.",
    "start": "220990",
    "end": "232870"
  },
  {
    "text": "And this is a way to get to your right child or this is a way to get to your parent or to your or tears or to your sibling,",
    "start": "232870",
    "end": "242830"
  },
  {
    "text": "because it's obvious just from the address of the note itself, what it is. So if you're at Node K, your left child is.",
    "start": "242830",
    "end": "253330"
  },
  {
    "text": "OK. And you're right. Child is two K plus one.",
    "start": "253330",
    "end": "260010"
  },
  {
    "text": "And your parent, it might come this way or might this might come this way, but your parent up there is.",
    "start": "260010",
    "end": "269390"
  },
  {
    "text": "Well, what do you say? Hey, over to Rounded Rock Ground into an integer.",
    "start": "269390",
    "end": "276170"
  },
  {
    "text": "It's a floor of K over two. I'm gonna I'm gonna write it in the in the C language notation, way K write shift one, because we're gonna be talking about sideways heaps.",
    "start": "276170",
    "end": "288080"
  },
  {
    "text": "We're gonna, we're gonna do more complicated shifting later. And so instead of writing, you know, it's also I could, I could have said K over to but this is this is gonna be better purpose.",
    "start": "288080",
    "end": "299660"
  },
  {
    "text": "And what about your brother or sister. I mean, I don't want to be sexist here. What.",
    "start": "299660",
    "end": "309590"
  },
  {
    "text": "What is that. K xor with one and a C notation for that is K X or one.",
    "start": "309590",
    "end": "317240"
  },
  {
    "text": "But I'm not going to use C notation for that guy. I'm going to use Circle plus because I like that better.",
    "start": "317240",
    "end": "325590"
  },
  {
    "text": "This is this other one gets too confusing with explains. So. So your, your. So it's easy then to, to move around in this, in its implicit data structure.",
    "start": "325590",
    "end": "337700"
  },
  {
    "text": "Saving you memory. And also if we, if we happen to have a heap of size 10, then, you know,",
    "start": "337700",
    "end": "346690"
  },
  {
    "text": "we would just take these notes and we have to make little tests at the end to see that we're not running off the end.",
    "start": "346690",
    "end": "355070"
  },
  {
    "text": "We can increase end by was decreasing by one. If we want to. But. But everything is compactly start.",
    "start": "355070",
    "end": "362569"
  },
  {
    "text": "So it's also very good from the standpoint of of cached memory and other things that make computers run faster.",
    "start": "362570",
    "end": "368780"
  },
  {
    "text": "OK. So that's the that's a heap. And what's the sideways heap.",
    "start": "368780",
    "end": "376540"
  },
  {
    "text": "OK, so sideways heap is something else that really is so simple. It's it's amazing that it did that. It doesn't seem to have caught on to it to have another name.",
    "start": "376540",
    "end": "389479"
  },
  {
    "text": "So I made up this name sideways last year. I don't know if it's going to. Somebody might find a better name for it, but it's it it's again, an infinite tree, which makes it really nice, implicit data structure.",
    "start": "389480",
    "end": "406550"
  },
  {
    "text": "But it's quite different from the ordinary heap because we think, as this name might imply, we're going to go at it sideways.",
    "start": "406550",
    "end": "413659"
  },
  {
    "text": "So we start out with one. And then here's two up here and then three.",
    "start": "413660",
    "end": "421190"
  },
  {
    "text": "And then here's four. And here's five down here.",
    "start": "421190",
    "end": "428630"
  },
  {
    "text": "And the parent of five is six and then seven and eight.",
    "start": "428630",
    "end": "437630"
  },
  {
    "text": "Tell me when you get the idea, there is going to be can anybody guess what this is going to be over here?",
    "start": "437630",
    "end": "446280"
  },
  {
    "text": "Well, good, good. And this guy is gonna be 10, here's gonna be nine eleven, 14, 13 fifteen up here.",
    "start": "446280",
    "end": "463550"
  },
  {
    "text": "16. OK. Now I'm trying to I'm trying to draw this a little bit carefully so that if you project the numbers down, it's going to be an increasing order.",
    "start": "463550",
    "end": "473780"
  },
  {
    "text": "One, two, three, four, five, six, seven, eight, nine, 10 or 15. Because because you see the the so-called symmetric order of of the nodes in this tree from left to right is is the natural order of the integer.",
    "start": "473780",
    "end": "489020"
  },
  {
    "text": "OK, well, now this tree. So 17 is going to be here and it's going to go up to 18 and 19 and then 20 is going to be.",
    "start": "489020",
    "end": "497389"
  },
  {
    "text": "So now this is the sideways heap.",
    "start": "497390",
    "end": "503180"
  },
  {
    "text": "And you notice that it has plenty of leaves.",
    "start": "503180",
    "end": "508770"
  },
  {
    "text": "It's got infinitely many leaves. All right. All the odd numbers are the leaves.",
    "start": "508770",
    "end": "519140"
  },
  {
    "text": "And then what are the numbers that are at the next level, right above the leaves?",
    "start": "519140",
    "end": "525540"
  },
  {
    "text": "This is something that goes way back. No, no theories have been talking about these things since the medieval times.",
    "start": "525540",
    "end": "530670"
  },
  {
    "text": "But I mean, there's Latin terms for these four for these oddly even numbers.",
    "start": "530670",
    "end": "538019"
  },
  {
    "text": "Right. So these are not these are the odd multiples of two. And at the next level, we've got the odd multiples of four.",
    "start": "538020",
    "end": "545630"
  },
  {
    "text": "And and the next level are the things that are divisible by eight, but not by 16.",
    "start": "545630",
    "end": "551460"
  },
  {
    "text": "And and so on. OK. But the the thing is about this, this is a tree, a binary tree.",
    "start": "551460",
    "end": "558840"
  },
  {
    "text": "But it doesn't have a root. Everybody has a parent. Nobody not. Does not. So this this has a root.",
    "start": "558840",
    "end": "567870"
  },
  {
    "text": "No leaves. This as leaves. And nor if any man leaves in. No group of guys who just came in.",
    "start": "567870",
    "end": "573990"
  },
  {
    "text": "There's some there's some great seats up in the front row here. And I can't lecture if anybody standing. And in fact, in my lecture improves exponentially with the number of people sitting in the front row.",
    "start": "573990",
    "end": "586890"
  },
  {
    "text": "So that's a very big. So now let's have it.",
    "start": "586890",
    "end": "599460"
  },
  {
    "text": "Let's take a look at the at the sideways heap here. Getting better and better and better.",
    "start": "599460",
    "end": "608330"
  },
  {
    "text": "How do we how do we navigate? How do we move around in this thing? Let's try to figure out a rule that before can get.",
    "start": "608330",
    "end": "629279"
  },
  {
    "text": "Okay. Repair and see where did you lose me sideways.",
    "start": "629280",
    "end": "636660"
  },
  {
    "text": "Oh, I see. All right. So we want to figure out how to move around in this in this data structure.",
    "start": "636660",
    "end": "644590"
  },
  {
    "text": "So we want to know how to find the parent, the left child, the right side and so on.",
    "start": "644590",
    "end": "649900"
  },
  {
    "text": "Now, can somebody let's see if we can think of a formula that would that would take us to the to the to the parent, for example.",
    "start": "649900",
    "end": "665080"
  },
  {
    "text": "Just consider the parent of a leaf at the beginning. So the parent of a leaf has to be somebody some odd multiple of two.",
    "start": "665080",
    "end": "676170"
  },
  {
    "text": "So let's take let's take 2007. That's a leaf. So put 2007 in binary one one one one oh one oh one one one.",
    "start": "676170",
    "end": "687089"
  },
  {
    "text": "Right. I don't know.",
    "start": "687090",
    "end": "692500"
  },
  {
    "text": "I mean, I just happened to know that one. OK. Now, what's the parent of this?",
    "start": "692500",
    "end": "697680"
  },
  {
    "text": "Oh, this. This guy. It's going. It's gonna have to be something that ends with a zero and and a one here.",
    "start": "697680",
    "end": "712070"
  },
  {
    "text": "It's it it's gonna be yeah, it's gonna be an odd multiple of two because because all the parents of leaves are odd multiples of two,",
    "start": "712070",
    "end": "718990"
  },
  {
    "text": "but which I'd multipotent know. What are the other bits of this thing that got you in the copy?",
    "start": "718990",
    "end": "725240"
  },
  {
    "text": "Coquille copy them all the same here. So this is actually you know the parent is 2006.",
    "start": "725240",
    "end": "732990"
  },
  {
    "text": "Of this here. Well, I guess everybody knew that. But, you know, what's the you know, this is the this is the, you know, the largest of what we call these oddly even number.",
    "start": "732990",
    "end": "745930"
  },
  {
    "text": "What are the the other even number? This is the this is the largest oddly even number less than two thousand.",
    "start": "745930",
    "end": "752660"
  },
  {
    "text": "And what's the what's the smallest and even number bigger than 2007? Well that would have to add one to this. This thing here, I mean, to these to these bits all the way to the left.",
    "start": "752660",
    "end": "763750"
  },
  {
    "text": "So. So that would end with a one zero one zero. So that would be up there as 2010. A 2010 what?",
    "start": "763750",
    "end": "776410"
  },
  {
    "text": "What's your problem? Make you happy.",
    "start": "776410",
    "end": "788639"
  },
  {
    "text": "Okay. You know, I did that on purpose just to see if any. But 2010, you sitting there with his little iPhone or something.",
    "start": "788640",
    "end": "803400"
  },
  {
    "text": "OK. So what we're doing is actually we're rounding to the nearest multiple of two twenty two thousand six, 2010.",
    "start": "803400",
    "end": "816320"
  },
  {
    "text": "2006 is closer. If I had if I'd been in 2005, I have my choice of 2006, 2002, the closer one would be 2006.",
    "start": "816320",
    "end": "825890"
  },
  {
    "text": "So see round to the nearest multiple of the next guy. Let's see, what's the period of 2006 then? Well, it's going to end in like this and.",
    "start": "825890",
    "end": "837620"
  },
  {
    "text": "And the nearest is going to actually be comping again. So you think, oh, this is just going to be too trivial.",
    "start": "837620",
    "end": "844760"
  },
  {
    "text": "That's 2004. So what's the parent of 2004?",
    "start": "844760",
    "end": "849800"
  },
  {
    "text": "It's going to have to go like this. Now, what do I do?",
    "start": "849800",
    "end": "857820"
  },
  {
    "text": "I'm zero. That seems to be right. I guess at the bottom to bits to one zero and I. And I mean business. So to thought.",
    "start": "857820",
    "end": "867290"
  },
  {
    "text": "That's the year 2000, the turn of the century. And then you got. Then the next one is going to be.",
    "start": "867290",
    "end": "878190"
  },
  {
    "text": "Right now. This is 2008.",
    "start": "878190",
    "end": "884980"
  },
  {
    "text": "Yeah, that's right, we went up 2008. Yep, I'm I'm anticipating here.",
    "start": "884980",
    "end": "895120"
  },
  {
    "text": "What's it going to be at this point? I have to be at the end with five zeros and a one.",
    "start": "895120",
    "end": "904010"
  },
  {
    "text": "But no, I don't want to go up any any higher, so it's going to be there.",
    "start": "904010",
    "end": "909370"
  },
  {
    "text": "So actually, two thousand is is is the next ancestor.",
    "start": "909370",
    "end": "916040"
  },
  {
    "text": "And now we're going to start speeding up here. This guy is.",
    "start": "916040",
    "end": "922860"
  },
  {
    "text": "2016. Hope to live that long.",
    "start": "922860",
    "end": "930430"
  },
  {
    "text": "What next? Bo.",
    "start": "930430",
    "end": "938029"
  },
  {
    "text": "Well, this one is George Orwell's favorite year, 1984, and then we go, you know, and and so on.",
    "start": "938030",
    "end": "948410"
  },
  {
    "text": "We're going to start creeping into these ones here. We're going to get 1920 and then we're going to get 1792 of the French Revolution.",
    "start": "948410",
    "end": "955190"
  },
  {
    "text": "And then fifteen, thirty six and ten thousand twenty four. And then we're going to zoom up. 2004, we're going to go up by powers of two afterwards.",
    "start": "955190",
    "end": "964069"
  },
  {
    "text": "OK, so we've moved up there up in the tree. And now what we want is a formula that will take us from K to it to the parent of K.",
    "start": "964070",
    "end": "975260"
  },
  {
    "text": "Now, here's where I might want to take a second, a simpler thing first, although, yeah, I can take a simpler thing first.",
    "start": "975260",
    "end": "991010"
  },
  {
    "text": "Let's try to figure out the sibling of of a node. Remember that.",
    "start": "991010",
    "end": "996350"
  },
  {
    "text": "Remember our node for a rule for for finding the breath for brother or sister in the heap was to do an exclusive hour of one.",
    "start": "996350",
    "end": "1006850"
  },
  {
    "text": "Now what's the rule here? If we're if we're a leaf, we're going to change nine to 11.",
    "start": "1006850",
    "end": "1013779"
  },
  {
    "text": "Seven to five. One to three. What does that. What is that? That's an exclusive or of two.",
    "start": "1013780",
    "end": "1021940"
  },
  {
    "text": "On the next last bit, if it's up here, we're doing the exclusive of four and here and exclusive of eight and so on,",
    "start": "1021940",
    "end": "1030350"
  },
  {
    "text": "that compliment the next to the last bit. Exactly. That preservative, we think.",
    "start": "1030350",
    "end": "1035419"
  },
  {
    "text": "And so what's the last bit of a book of the number K? And here we have something that I talked about when I talked about Pridemore in computing.",
    "start": "1035420",
    "end": "1045500"
  },
  {
    "text": "That's K and minus K. If you if you compute K at Analogical and with minus K, you get you get the lowest bit.",
    "start": "1045500",
    "end": "1056060"
  },
  {
    "text": "And so if you, if I now shift that left one it's one, it's one more one one bit to the left of the lowest bit.",
    "start": "1056060",
    "end": "1066230"
  },
  {
    "text": "And so I take K exclusive with this guy. And this is equal to the sibling of K.",
    "start": "1066230",
    "end": "1076740"
  },
  {
    "text": "Now, how would you do a similar thing to get the parent of K?",
    "start": "1076740",
    "end": "1085760"
  },
  {
    "text": "So I'm I'm I'm going to first I'm going to calculate J. Which is the. Which is. Sorry, I get it.",
    "start": "1085760",
    "end": "1094080"
  },
  {
    "text": "J is K and minus K. This is the the least bit of K.",
    "start": "1094080",
    "end": "1099220"
  },
  {
    "text": "K is a positive integer. So it's always got to, it's always got the least bit.",
    "start": "1099220",
    "end": "1104799"
  },
  {
    "text": "So this is gonna be a one followed by as many zeros as as, as, as the level we are in the sideways heap.",
    "start": "1104800",
    "end": "1112390"
  },
  {
    "text": "Now I want to go to the parent. I want around. I want around that. And so what? And so the rule is well, and I'll write it down.",
    "start": "1112390",
    "end": "1121540"
  },
  {
    "text": "And then then you can see the point is not that that you can discover the room, but that it's a simple rule.",
    "start": "1121540",
    "end": "1127420"
  },
  {
    "text": "K minus J. Or with K left shift one.",
    "start": "1127420",
    "end": "1134810"
  },
  {
    "text": "In in the simple case that that J was equal to one. Now this week we have a leaf of an odd number is the idea of an odd numbers when K and minus K is one.",
    "start": "1134810",
    "end": "1148730"
  },
  {
    "text": "And in that case, what we're doing is we subtract one and then orien or in one to the left.",
    "start": "1148730",
    "end": "1155600"
  },
  {
    "text": "That's another way of saying this operation that I just did on two thousand seven, but shifted one perhaps instead of K.",
    "start": "1155600",
    "end": "1167150"
  },
  {
    "text": "I could have shifted J. No, it's not. Bring it in because I have to zero it up to emulous. Let's try, let's try that.",
    "start": "1167150",
    "end": "1177230"
  },
  {
    "text": "It's a it's a good suggestion. Let's try it. If I have like five or let's say six.",
    "start": "1177230",
    "end": "1182809"
  },
  {
    "text": "OK, so. So then this is K and then J is is.",
    "start": "1182810",
    "end": "1189890"
  },
  {
    "text": "Is this. You know, minus K to get minus K, you you compliment everything to the left of the of the.",
    "start": "1189890",
    "end": "1203370"
  },
  {
    "text": "That's minus K right there. So I ended with minus K and everything, everything zeroes out except at the except for the right most to bits.",
    "start": "1203370",
    "end": "1212010"
  },
  {
    "text": "Now, if I shifted, Jay left one. Oh, this here, you mean this guy?",
    "start": "1212010",
    "end": "1218270"
  },
  {
    "text": "Yeah, that that's that's right. I thought you meant I should shift J one before I before I do it here.",
    "start": "1218270",
    "end": "1225110"
  },
  {
    "text": "But that's. But you're right. I, I have to shiftiness this number, which would be two if is one or for it is two or whatever.",
    "start": "1225110",
    "end": "1235630"
  },
  {
    "text": "OK. So that's right. I have to or that end. But then that was the track for subtract nine I or I or.",
    "start": "1235630",
    "end": "1242460"
  },
  {
    "text": "And that, that, that gets to the parent. So this is parent of K.",
    "start": "1242460",
    "end": "1250620"
  },
  {
    "text": "And the sibling of care we got. Now that the the children can also be found easily.",
    "start": "1250620",
    "end": "1260760"
  },
  {
    "text": "But let's go on and on. I guess what it is, is I might as well say the children, the children.",
    "start": "1260760",
    "end": "1273730"
  },
  {
    "text": "OK. Just just to prove that it's it's it's nice.",
    "start": "1273730",
    "end": "1279260"
  },
  {
    "text": "It's Kate minus J. Right. Shift one and K plus J.",
    "start": "1279260",
    "end": "1285230"
  },
  {
    "text": "Right. Shift one. And of course when J is one, you don't have any children.",
    "start": "1285230",
    "end": "1291710"
  },
  {
    "text": "So there's this formula gives you K back again and you know that the leaves don't have any children.",
    "start": "1291710",
    "end": "1297710"
  },
  {
    "text": "So. So. So that. So this is if if k on.",
    "start": "1297710",
    "end": "1306289"
  },
  {
    "text": "So so we can we can navigate that in a sideways heap and get and get around. And we have the other advantages that it accommodates.",
    "start": "1306290",
    "end": "1318870"
  },
  {
    "text": "If we want to look at just as a small, finite segment of this, we could get a sideways of 10 elements and almost as good as it's taking a heap of 10 elements, but not quite.",
    "start": "1318870",
    "end": "1331390"
  },
  {
    "text": "If I if I look at that at the first 10 elements of this thing,",
    "start": "1331390",
    "end": "1336420"
  },
  {
    "text": "I really sort of want to include number 12 in here, too, in order to have it in order to have a tree structure.",
    "start": "1336420",
    "end": "1343440"
  },
  {
    "text": "Because sometimes the parent will take you out of the first end of the first and element, but it'll never take you pass to him.",
    "start": "1343440",
    "end": "1355600"
  },
  {
    "text": "Will it always be less than two? And in fact, so so it's still compacted.",
    "start": "1355600",
    "end": "1360870"
  },
  {
    "text": "If you have a sideways heap with, you know, with 1000 elements, you're never gonna need anything.",
    "start": "1360870",
    "end": "1368910"
  },
  {
    "text": "Two thousand or more. The address is two thousand or more showing up in this missing bit.",
    "start": "1368910",
    "end": "1375530"
  },
  {
    "text": "But there is this little little glitch here. Now, there are so these properties with respect to data structures where I believe first noticed by by a man named Doug Harrell in his PSAT thesis.",
    "start": "1375530",
    "end": "1394860"
  },
  {
    "text": "1980. And when you see a reference to a paper by DRL, it chances are of the papers by David Herschelle because he wrote he wrote more papers.",
    "start": "1394860",
    "end": "1415390"
  },
  {
    "text": "Whose thesis was 1978. Had nothing to do with sideways heaps whatsoever.",
    "start": "1415390",
    "end": "1420670"
  },
  {
    "text": "So DRL. There's two liberals that that are. Have been doing great computer science at least.",
    "start": "1420670",
    "end": "1427570"
  },
  {
    "text": "And David Herschelle is my. Is my grand thesis student.",
    "start": "1427570",
    "end": "1433690"
  },
  {
    "text": "He's a he's a student of my student Von Praagh. And Doug Harwell is a grad student of Jeff Olman.",
    "start": "1433690",
    "end": "1441039"
  },
  {
    "text": "So anyway, there there's all of Stanford connections here. You have to see somehow. But but but I don't think either Jeff or I realized that Sideways Heap was going to be a really nice implicit data structure.",
    "start": "1441040",
    "end": "1458679"
  },
  {
    "text": "But if Jeff is here, he can tell me. He can tell me that I. OK. Now, let's see people who are standing in the back.",
    "start": "1458680",
    "end": "1465700"
  },
  {
    "text": "That guy I mentioned before that the lecture gets exponentially better the more people are sitting down and the closer to the front.",
    "start": "1465700",
    "end": "1472750"
  },
  {
    "text": "You said the better. So please come. Please come appearance. Now, one of the.",
    "start": "1472750",
    "end": "1483200"
  },
  {
    "text": "But you say, well, OK, so it's it's cute. But but what what good is it.",
    "start": "1483200",
    "end": "1489669"
  },
  {
    "text": "And one of the nice one of the nice job applications is actually even more recent too.",
    "start": "1489670",
    "end": "1502300"
  },
  {
    "text": "And some people in Finland kind of Jane, and described the data structure that they found was what was very nice and compact.",
    "start": "1502300",
    "end": "1514000"
  },
  {
    "text": "They call it a navigation pile. You see that? Yeah. So so what they put what we're doing here is I'm showing you a an example of a navigation pile with ten leaves.",
    "start": "1514000",
    "end": "1527590"
  },
  {
    "text": "And in this case, it's different from 10 notes because of me. But it's sort of it's sort of similar. It's as if I had 20 nodes instead of it and leaves it and two in and nodes within it.",
    "start": "1527590",
    "end": "1544720"
  },
  {
    "text": "What they're they're doing is they're representing a priority queue with a sideways heap.",
    "start": "1544720",
    "end": "1551919"
  },
  {
    "text": "The priority queue is a data structure that's good at finding the, let's say, finding the largest element.",
    "start": "1551920",
    "end": "1560350"
  },
  {
    "text": "And then you can delete the largest insert a new element and an update to your data structure and always be quite be able to to quickly zoom in,",
    "start": "1560350",
    "end": "1569620"
  },
  {
    "text": "plane, find the largest guy. And and in fact, he was the first application of Heap's was to let's use them as a priority queue and",
    "start": "1569620",
    "end": "1580059"
  },
  {
    "text": "to stand and to move things around so that the just guy was in the room and that.",
    "start": "1580060",
    "end": "1585970"
  },
  {
    "text": "And then it's such, you know, you put numbers in, you put data in in the cells and then then you play a tournament.",
    "start": "1585970",
    "end": "1594740"
  },
  {
    "text": "And if the winner of a tournament bumps out the moves up and and the guy up there moves down any way you get to",
    "start": "1594740",
    "end": "1602330"
  },
  {
    "text": "do a heap condition as well as navigation pile is it is a different idea if you put the data all in the leaves.",
    "start": "1602330",
    "end": "1613210"
  },
  {
    "text": "But then then up here you have a pointer to the largest people in your life is can you subtree.",
    "start": "1613210",
    "end": "1621010"
  },
  {
    "text": "So under node two, he would point to node one because the largest leaf in his subtree is his final three, being bigger than 087.",
    "start": "1621010",
    "end": "1631780"
  },
  {
    "text": "Six similarly points to five 12 year, four points to five twelve. Also, because the largest of the four leaves underneath Node four is is 512.",
    "start": "1631780",
    "end": "1641080"
  },
  {
    "text": "The largest of the eight leaves under underneath node eight is nine away. So eight points down here. Twelve has four guys under it.",
    "start": "1641080",
    "end": "1649570"
  },
  {
    "text": "Nine oh eight. One seventy two to seventy five. Eight ninety seven. Twelve points to the biggest of these. So this is this is idea of a navigation pile.",
    "start": "1649570",
    "end": "1658150"
  },
  {
    "text": "But the it's very similar to what we've been doing here for years and years when we're doing some little replacement selection,",
    "start": "1658150",
    "end": "1668170"
  },
  {
    "text": "sort the various things with the new the new idea that made that made this work especially well is that",
    "start": "1668170",
    "end": "1676030"
  },
  {
    "text": "they realize that these pointers only have you only need a one bit pointer for the guys at this level.",
    "start": "1676030",
    "end": "1683070"
  },
  {
    "text": "It's either appointed to the left or to the right. You'll need a two bit pointer for the guys at the next level up, because those four can point to only, you know, four places.",
    "start": "1683070",
    "end": "1695510"
  },
  {
    "text": "So. So you can encode that at. Zero zero zero one one zero one one. And similarly, at the next level, three bits is all you need for the pointer.",
    "start": "1695510",
    "end": "1704860"
  },
  {
    "text": "So you can pack this. This navigation pile into very tightly into memory.",
    "start": "1704860",
    "end": "1710640"
  },
  {
    "text": "The leaves are sitting here and that's your data. It might be a whole world of data, but but you can keep all of the all of the pointers for n words of data.",
    "start": "1710640",
    "end": "1721170"
  },
  {
    "text": "You only need to end bits to store all the pointers in in in the navigation pile.",
    "start": "1721170",
    "end": "1727290"
  },
  {
    "text": "And instead of two N words of the of. So this is the factors of 64. You're saving a lot of memory and a lot of space in cash.",
    "start": "1727290",
    "end": "1738149"
  },
  {
    "text": "Not now. In order to extract these pointers, you have to. You have to do shifting around and masking in the register.",
    "start": "1738150",
    "end": "1744840"
  },
  {
    "text": "You have to you have to do a little calculation. Given that, you know, given given that you want to know the the the pointer from Node 16,",
    "start": "1744840",
    "end": "1755190"
  },
  {
    "text": "for example, you have to say, well, this has four bits and the four bits are packed somewhere.",
    "start": "1755190",
    "end": "1763139"
  },
  {
    "text": "Where are they? And then you have to do a dozen or so computer operations to unpack it.",
    "start": "1763140",
    "end": "1770850"
  },
  {
    "text": "But the way computers work now. That's things that computer does fast.",
    "start": "1770850",
    "end": "1777030"
  },
  {
    "text": "Computer can go through doesn't instruction zip. But as soon as it tries to tick to access memory, it slows down because memory speeds have gotten.",
    "start": "1777030",
    "end": "1786360"
  },
  {
    "text": "Have have not followed Moore's Law the way register speeds have. And so so, you know, you're often taking a order of magnitude, orders of magnitude longer.",
    "start": "1786360",
    "end": "1800399"
  },
  {
    "text": "When you when you reference memory. But but but just taking packed arrays of bits and shifting them around and and extracting out the pointer goes fast enough.",
    "start": "1800400",
    "end": "1810120"
  },
  {
    "text": "So that's the idea. And other navigation pile. And if if you want to know where.",
    "start": "1810120",
    "end": "1816660"
  },
  {
    "text": "So so let's let's imagine that I that I actually was storing this in memory and packing it together for.",
    "start": "1816660",
    "end": "1826050"
  },
  {
    "text": "I can show I can show you here. This is. Can we all.",
    "start": "1826050",
    "end": "1836770"
  },
  {
    "text": "Good exercise. Coming up. What I'm showing you here is a draft of Section seven 1-3 of art of computer programing.",
    "start": "1836770",
    "end": "1846350"
  },
  {
    "text": "It's going to be published next spring. So here's the navigation pile of illustration in the text.",
    "start": "1846350",
    "end": "1852710"
  },
  {
    "text": "And then at the end of that section, there is an exercise, 153, which says we could we could pack the pointers in a binary strings.",
    "start": "1852710",
    "end": "1861830"
  },
  {
    "text": "So the first pointer seat from two is a zero from six to zero from tennies zero. Fourteen is a one. And the pointer from four is two bit no pointer from eight is a three bit number.",
    "start": "1861830",
    "end": "1873920"
  },
  {
    "text": "Pointer from sixteen is a four bit number. And the question is what position from the left is for the pointer from Node J.",
    "start": "1873920",
    "end": "1885980"
  },
  {
    "text": "And the answer is, is that that the number of pointers in it, in note, the number of bits in a pointer and in case what we call Roget.",
    "start": "1885980",
    "end": "1904370"
  },
  {
    "text": "This is the ruler function of J. And I talked about it in my head in my other lecture.",
    "start": "1904370",
    "end": "1910610"
  },
  {
    "text": "But this is the this is the number of zeros. The number of zeros.",
    "start": "1910610",
    "end": "1918549"
  },
  {
    "text": "Zeros after. After the rightmost.",
    "start": "1918550",
    "end": "1924990"
  },
  {
    "text": "The right most one. So I had no row of J zero, and I and I'd be even number the role of J as one.",
    "start": "1924990",
    "end": "1935860"
  },
  {
    "text": "And so on. So this is the number of bits in pointer from No. J in a sideways heap. And in a navigation pile.",
    "start": "1935860",
    "end": "1944200"
  },
  {
    "text": "It's the number of bits in the pointer. The number of zeros. And then there's a nice identity in order to get up to that.",
    "start": "1944200",
    "end": "1956039"
  },
  {
    "text": "I put up the J we we calculate ro on plus row to. Less of. And so on. Up to Roget. It turns out that there's a very simple formula for this as just happens to be J.",
    "start": "1956040",
    "end": "1969790"
  },
  {
    "text": "Minus knew of J. Renew of J is the number of one bits in J.",
    "start": "1969790",
    "end": "1976280"
  },
  {
    "text": "Four, for example. Row of one is zero. Row of two is one of three is zero or four is two.",
    "start": "1976280",
    "end": "1983980"
  },
  {
    "text": "Let's take Jake with four. Four minus one is you know, Jake J equals four.",
    "start": "1983980",
    "end": "1995500"
  },
  {
    "text": "J equals five. It has two. It would be five. Minus two would be what you know, this was two plus zero.",
    "start": "1995500",
    "end": "2002730"
  },
  {
    "text": "And J equal six would be the next case. Zero one zero two zero one.",
    "start": "2002730",
    "end": "2008370"
  },
  {
    "text": "Which would be six minus two. Some of this is four. Right. So. So this is a nice identity.",
    "start": "2008370",
    "end": "2017370"
  },
  {
    "text": "That tells you as long as you can keep as long as you can easily calculate the number of one bits in an integer,",
    "start": "2017370",
    "end": "2024240"
  },
  {
    "text": "you can easily calculate where you've stored this. The planers for navigation, power and questions on this.",
    "start": "2024240",
    "end": "2033600"
  },
  {
    "text": "So this is the this is a function new NUJ actually for 50 years, people call it the sideways edition of NINJA.",
    "start": "2033600",
    "end": "2045940"
  },
  {
    "text": "And you sort of take a binary number and add sideways at. Now add all the Wonsan. But more recently, people are calling it the population can't function.",
    "start": "2045940",
    "end": "2058100"
  },
  {
    "text": "There are other there are other names. But but it but a lot of computers have this built in now.",
    "start": "2058100",
    "end": "2065840"
  },
  {
    "text": "So it can be done easily. OK. Now, while I mentioned the role function, let me let me mention another the the the dual function,",
    "start": "2065840",
    "end": "2076879"
  },
  {
    "text": "which is the land of function, which is the number of zeros.",
    "start": "2076880",
    "end": "2082980"
  },
  {
    "text": "All right. I can't write anymore. Getting very old. After the leftmost one. So this is also equal to the floor of the log base, two of J.",
    "start": "2082980",
    "end": "2103520"
  },
  {
    "text": "But what if I have it it? So I have a number 2007. And you remember what that was so.",
    "start": "2103520",
    "end": "2117740"
  },
  {
    "text": "Oh, one, oh one, one one. So then Roe is zero and Lambda is one, two, three, four, five, six, seven, eight, nine, 10.",
    "start": "2117740",
    "end": "2131850"
  },
  {
    "text": "The number of digits let's call it. A bit after the leftmost one, it's not the number of zeros I'm sorry, it's a number of bits.",
    "start": "2131850",
    "end": "2142420"
  },
  {
    "text": "Bits have to leftmost one. So it's.",
    "start": "2142420",
    "end": "2151140"
  },
  {
    "text": "It's an amazing thing that there's is an identity that connects the role and the and the lambda functions.",
    "start": "2151140",
    "end": "2160890"
  },
  {
    "text": "And this is something that really surprised me when I discovered when I when I ran across it.",
    "start": "2160890",
    "end": "2170309"
  },
  {
    "text": "I think it was a year ago. And that is this, that if we take the maximum.",
    "start": "2170310",
    "end": "2177570"
  },
  {
    "text": "Of row of I, row of I, plus one through row of J.",
    "start": "2177570",
    "end": "2187320"
  },
  {
    "text": "Equals. Land of J and minus.",
    "start": "2187320",
    "end": "2194730"
  },
  {
    "text": "I. Don't ask me why such a formula should exist, but they.",
    "start": "2194730",
    "end": "2203240"
  },
  {
    "text": "But it happens to just happens that it works out. And so somebody give me an Iron Atlas train I IFJ and try to understand why this is true.",
    "start": "2203240",
    "end": "2212800"
  },
  {
    "text": "So I don't take I equals five. And J equals nine.",
    "start": "2212800",
    "end": "2221080"
  },
  {
    "text": "Let's say ok so the of I.",
    "start": "2221080",
    "end": "2226120"
  },
  {
    "text": "So ok, so roll five is zero. So let me, let me write it down.",
    "start": "2226120",
    "end": "2231900"
  },
  {
    "text": "Roll five rolls, six rolls, seven, eight or nine. So I went to Max this. So that's the max of zero one zero three zero.",
    "start": "2231900",
    "end": "2251600"
  },
  {
    "text": "Now, what is that? What is J. What is nine and minus I. So nine. This is J is nine. It's one or one.",
    "start": "2251600",
    "end": "2259450"
  },
  {
    "text": "Minus five is minus five. That's a compliment. Everything. This is one zero.",
    "start": "2259450",
    "end": "2267930"
  },
  {
    "text": "A whole bunch of ones here. So like I and these together and I get one zero zero one.",
    "start": "2267930",
    "end": "2276500"
  },
  {
    "text": "Oh yeah. One zero zero one and then zeros afterwards. So I take lambda of this lambda.",
    "start": "2276500",
    "end": "2283180"
  },
  {
    "text": "This is three. So it just works.",
    "start": "2283180",
    "end": "2288970"
  },
  {
    "text": "I for at least you could, you can pretty you know, if you look at the, you look at the sideways heap and you see what works.",
    "start": "2288970",
    "end": "2296740"
  },
  {
    "text": "So. So let's look at the sideways. And so what we're doing is suppose we take an interval in the sideways.",
    "start": "2296740",
    "end": "2303550"
  },
  {
    "text": "That means you take consecutive nodes from Ida J. And then, you know, so.",
    "start": "2303550",
    "end": "2308800"
  },
  {
    "text": "So I might start at six or something. But then then it's gonna go down and it's going to go go for a while.",
    "start": "2308800",
    "end": "2315760"
  },
  {
    "text": "So what's the the highest it gets. What's the highest it gets between I and J.",
    "start": "2315760",
    "end": "2323780"
  },
  {
    "text": "And. Well the thing is you can compute it by this. Why this binary thing you take J.",
    "start": "2323780",
    "end": "2329960"
  },
  {
    "text": "You take minus a logical and of those two numbers and then you look you then you look at the land, the function, the logarithm base to.",
    "start": "2329960",
    "end": "2337599"
  },
  {
    "text": "And that's how high it could get. And you can prove it by induction. But I don't know how to prove it by intuition.",
    "start": "2337600",
    "end": "2344710"
  },
  {
    "text": "It just seems that, you know, I, I, I started writing down cases and kept simplifying, simplifying, simplifying until finally there it was.",
    "start": "2344710",
    "end": "2352950"
  },
  {
    "text": "And you know it in in this calculation. So it's just a very simple thing.",
    "start": "2352950",
    "end": "2359420"
  },
  {
    "text": "Right now, what I want to do in the rest of this talk is describe to you a beautiful algorithm by Baruch Schieber and Lucy Bushkin, Uber and Myshkin.",
    "start": "2359420",
    "end": "2377170"
  },
  {
    "text": "And this algorithm they published in 1988. And boy, I was excited.",
    "start": "2377170",
    "end": "2383049"
  },
  {
    "text": "It took me two days to do nothing else to understand it. But it's beautiful. It's gorgeous algorithm. And and I won.",
    "start": "2383050",
    "end": "2392260"
  },
  {
    "text": "And I'm just, you know, at that moment I wrote down to say someday I wanted to give a computer musing on a",
    "start": "2392260",
    "end": "2397270"
  },
  {
    "text": "Christmas tree lecture explaining this algorithm is just the test of a fantastic,",
    "start": "2397270",
    "end": "2404140"
  },
  {
    "text": "fantastically nice method for solving the problem of least common ancestor in a in in in a forest.",
    "start": "2404140",
    "end": "2416049"
  },
  {
    "text": "So now let. So I've got to define what I what that problem is.",
    "start": "2416050",
    "end": "2422970"
  },
  {
    "text": "And it's first of all, let's let's suppose we just have nodes in the sideways heap.",
    "start": "2422970",
    "end": "2436050"
  },
  {
    "text": "Gutteral noticed in his thesis that it's that if you happen to have any noise in the sideways heap,",
    "start": "2436050",
    "end": "2442480"
  },
  {
    "text": "it's very, very easy to calculate their least common ancestor that you're nearest common ancestor.",
    "start": "2442480",
    "end": "2449730"
  },
  {
    "text": "Let me my got. I got to say. Right. Nearest common ancestor. Actually more Bob Dargin.",
    "start": "2449730",
    "end": "2462330"
  },
  {
    "text": "We've got to follow his advice. He wants to call us the nearest common ancestor and he's right. Is the bell in a better term than least common ancestor, although it's somehow natural.",
    "start": "2462330",
    "end": "2472510"
  },
  {
    "text": "You know, if you're if you take any family tree and and you meet some relatives at Christmas vacation and you and you try to figure out,",
    "start": "2472510",
    "end": "2479770"
  },
  {
    "text": "you know, in what way are you cousins? So you go back to your nearest common ancestor.",
    "start": "2479770",
    "end": "2486070"
  },
  {
    "text": "And then depending on how far away that person is, that tells you how many. What kind of a cousin you are and how far removed you are.",
    "start": "2486070",
    "end": "2496150"
  },
  {
    "text": "And so you take any two nodes in the sideways heap and there and it's not not that hard to figure out.",
    "start": "2496150",
    "end": "2507099"
  },
  {
    "text": "The nearest nearest common ancestor is by doing this magic of ending and shifting and masking and things like that to go now.",
    "start": "2507100",
    "end": "2517930"
  },
  {
    "text": "But in general, this week we will have a perfect binary structure like this.",
    "start": "2517930",
    "end": "2527380"
  },
  {
    "text": "Somebody just gives us an arbitrary and an arbitrary oriented forest.",
    "start": "2527380",
    "end": "2533670"
  },
  {
    "text": "And then oriented forest is a is a situation where you have a.",
    "start": "2533670",
    "end": "2541010"
  },
  {
    "text": "If something like this, I will draw you a typical oriented forest here.",
    "start": "2541010",
    "end": "2549530"
  },
  {
    "text": "A, B, C. Let's put D. Here underneath A. Everybody has at most one rock art coming out of it.",
    "start": "2549530",
    "end": "2560760"
  },
  {
    "text": "Every node has has has a point or two parent except the root knows.",
    "start": "2560760",
    "end": "2567570"
  },
  {
    "text": "And and we actually imagine that the root nodes have a pointer to the two to a normal parent.",
    "start": "2567570",
    "end": "2573210"
  },
  {
    "text": "So, so there's, there's a there's a special magical divinity that has that is the parent of all the roots.",
    "start": "2573210",
    "end": "2586560"
  },
  {
    "text": "But but we put all of the all of the Marcal nodes have had the most one parent and the roots have have had the immortal parent.",
    "start": "2586560",
    "end": "2598980"
  },
  {
    "text": "OK. So this is an example of of a.",
    "start": "2598980",
    "end": "2606600"
  },
  {
    "text": "Of a forest oriented forest.",
    "start": "2606600",
    "end": "2612280"
  },
  {
    "text": "So in this case, that everybody has a parent. Except except scepters, there's no loop's in the in the in the diagram.",
    "start": "2612280",
    "end": "2619830"
  },
  {
    "text": "And that's the idea. So now, in this particular example, there's no family that has that has three children in it.",
    "start": "2619830",
    "end": "2627750"
  },
  {
    "text": "But but the Schieber Myshkin algorithm works in general, no matter how you can have families that are arbitrarily large.",
    "start": "2627750",
    "end": "2634930"
  },
  {
    "text": "I just this particular example doesn't make use of that.",
    "start": "2634930",
    "end": "2641369"
  },
  {
    "text": "But this problem of finding the nearest common ancestor of two nodes in the structure occurs fairly often in practice,",
    "start": "2641370",
    "end": "2651150"
  },
  {
    "text": "where we where we have sites where we have data that's represented with a a cyclic structure like this.",
    "start": "2651150",
    "end": "2662029"
  },
  {
    "text": "And we like to find the closest common way that they point to. Every two nodes have a near common ancestor, because if they're in different trees, it's two.",
    "start": "2662030",
    "end": "2673890"
  },
  {
    "text": "It's the special node at the end. At the top. Is there NIRS common ancestor?",
    "start": "2673890",
    "end": "2679319"
  },
  {
    "text": "So the the idea is, is this.",
    "start": "2679320",
    "end": "2688590"
  },
  {
    "text": "If if you if you goes to V, then then V is parent of you.",
    "start": "2688590",
    "end": "2700970"
  },
  {
    "text": "If you goes in zero or more steps to V, this is V is an ancestor of of you.",
    "start": "2700970",
    "end": "2711760"
  },
  {
    "text": "OK, so the ancestors of what are the ancestors of G.",
    "start": "2711760",
    "end": "2717850"
  },
  {
    "text": "In this diagram? D and G g itself.",
    "start": "2717850",
    "end": "2725510"
  },
  {
    "text": "Everybody is considered an ancestor of their cell because this star notation means zero or more times.",
    "start": "2725510",
    "end": "2731250"
  },
  {
    "text": "So. So it turns out that it is better to have this definition where somebody is its own ancestor,",
    "start": "2731250",
    "end": "2738260"
  },
  {
    "text": "because otherwise, what would be the nearest common ancestor of DNA? H. It has to be an ancestor of both the both the N h and so and so it has to be deep.",
    "start": "2738260",
    "end": "2747470"
  },
  {
    "text": "Would have to be near its common ancestor DNA. And so. OK. So the idea is the nearest common ancestor.",
    "start": "2747470",
    "end": "2758079"
  },
  {
    "text": "Let's just say the NCAA of you and V equals W. Which means that W is an ancestor. Well, OK, W is an ancestor, and it's and and every other at six W is a common ancestor,",
    "start": "2758080",
    "end": "2777990"
  },
  {
    "text": "both of them and every other common ancestor is also an ancestor of W. So. So I mean formally that says that if you,",
    "start": "2777990",
    "end": "2785670"
  },
  {
    "text": "if Ze is an ancestor of view and Z is an ancestor of V then W Well if and only if dub if he is an ancestor of W.",
    "start": "2785670",
    "end": "2798059"
  },
  {
    "text": "This is the definition of a news common ancestor in logic. But the intuition is clear.",
    "start": "2798060",
    "end": "2806020"
  },
  {
    "text": "Now the one I described to you, the algorithm Mashiba in Michigan to find the nearest common ancestor in a such a data structure.",
    "start": "2806020",
    "end": "2819420"
  },
  {
    "text": "And you might say, well, why am I so fascinated by this algorithm? And reason is that it gives you the answer in in the constant number of steps, no matter how big your look, no matter how big your data structure is.",
    "start": "2819420",
    "end": "2834300"
  },
  {
    "text": "Oh, it it it just does. It just does a few calculations, zips, hips, zip.",
    "start": "2834300",
    "end": "2841410"
  },
  {
    "text": "And it says here was your nearest common ancestor. And it does this by looking at the, you know, the integers that are representing you and V and some preprocessing has gone on.",
    "start": "2841410",
    "end": "2854849"
  },
  {
    "text": "So so Cubavision algorithm is not a diet. It's not you're not Milgrim for the dynamic Nuristan ancestor problem.",
    "start": "2854850",
    "end": "2864180"
  },
  {
    "text": "It says you've got a fixed database and you're and you're going to be answering a lot of questions about common ancestors in this database.",
    "start": "2864180",
    "end": "2870990"
  },
  {
    "text": "But but but but what when when you have a setup like that.",
    "start": "2870990",
    "end": "2877020"
  },
  {
    "text": "And so you know that a lot of people are going to be asking questions about the same the same structure.",
    "start": "2877020",
    "end": "2882630"
  },
  {
    "text": "Then you can if you can make up a couple of magic tables and and she revision all of them,",
    "start": "2882630",
    "end": "2888569"
  },
  {
    "text": "tells you how to calculate the nearest common ancestor just by a small number of of computer instruction now.",
    "start": "2888570",
    "end": "2896970"
  },
  {
    "text": "And it's it's like I think it's quite beautiful, but amazingly, it's gotten bad press in the literature.",
    "start": "2896970",
    "end": "2903960"
  },
  {
    "text": "They said it came out in nineteen eighty eight. And I thought that as I kept they would keep on reading, I would find people saying, oh yeah.",
    "start": "2903960",
    "end": "2910380"
  },
  {
    "text": "And this is the, you know, here's, this is a great, a great thing. But instead I find people recommending other other algorithms that and saying,",
    "start": "2910380",
    "end": "2919500"
  },
  {
    "text": "you know, well you know, here's here's my improvement on Schieber Myshkin algorithm. And when I look at these improvements, I fail to see why they're an improvement, because it takes some picking.",
    "start": "2919500",
    "end": "2930430"
  },
  {
    "text": "It takes it run slower on the computer. And it takes me a lot longer to write the program. The only reason these other improvements are improvements, as far as I can see, is that that the proof is simpler.",
    "start": "2930430",
    "end": "2942750"
  },
  {
    "text": "Now, I'm sure it's easier to prove that some Algoma like cracked, but the but the computer doesn't slow down when it gets to the substructure instructions.",
    "start": "2942750",
    "end": "2951480"
  },
  {
    "text": "It doesn't understand. You know, this is. Yeah. So I, I, I don't like this philosophy that some people seem to have it.",
    "start": "2951480",
    "end": "2959680"
  },
  {
    "text": "Nobody's ever allowed to write a subtle computer program that, you know, that if if, if,",
    "start": "2959680",
    "end": "2965390"
  },
  {
    "text": "if a freshman can understand the program, we have to throw it out because we won't be able to maintain it.",
    "start": "2965390",
    "end": "2971890"
  },
  {
    "text": "You know, this is this this will lock computer science back at a certain level that'll never be able to advance between.",
    "start": "2971890",
    "end": "2977640"
  },
  {
    "text": "So when somebody discovers a brilliant new algorithm that runs fast. So what if it takes a few pages to prove that is correct.",
    "start": "2977640",
    "end": "2983970"
  },
  {
    "text": "You know, the computer is still going to. Is still going to love because Zip's exist that much faster and the code is shorter and nice.",
    "start": "2983970",
    "end": "2991359"
  },
  {
    "text": "So and so I think Schieber and Risk deserve to have their algorithms better known.",
    "start": "2991360",
    "end": "2999300"
  },
  {
    "text": "I have to admit, though, that that it took me two days to understand your paper and might take you three days to understand my write up of their method.",
    "start": "2999300",
    "end": "3006930"
  },
  {
    "text": "But but it is correct. And and I'm and I'll just be able to give you the basic ideas of it.",
    "start": "3006930",
    "end": "3014720"
  },
  {
    "text": "And then, you know, you can look at the at the text one later on to see to see what I learned long ago.",
    "start": "3014720",
    "end": "3022849"
  },
  {
    "text": "It's not a good idea to do formal proofs in the middle of an audit, but in the middle of a lecture at least,",
    "start": "3022850",
    "end": "3029270"
  },
  {
    "text": "I want to give this I want to give the basic ideas how they do this magic. So. So listen up. What they have to do is, is preprocess every given structure.",
    "start": "3029270",
    "end": "3045420"
  },
  {
    "text": "Oh, wait. Before I do that, let me give you more motivation. Why? Why do we care about Nereus common ancestor.",
    "start": "3045420",
    "end": "3051839"
  },
  {
    "text": "Yeah. So there's another there's another problem that is equivalent to the nearest common ancestor problem.",
    "start": "3051840",
    "end": "3059730"
  },
  {
    "text": "But it's amazing. It's amazing that it's equivalent. It's called the range. Minimum query. Problem range. Minimum query.",
    "start": "3059730",
    "end": "3068190"
  },
  {
    "text": "Problem is, is this.",
    "start": "3068190",
    "end": "3074220"
  },
  {
    "text": "And I can give you an example of the range minimum crime problem.",
    "start": "3074220",
    "end": "3079320"
  },
  {
    "text": "We have an array of numbers and I'll use PI as an example, three one four one five nine.",
    "start": "3079320",
    "end": "3085540"
  },
  {
    "text": "See where I did? I work it out here. Yeah. Three one four one five nine two six five three five eight nine I think.",
    "start": "3085540",
    "end": "3093720"
  },
  {
    "text": "Anyway, six, we have an array of data and these are in locations.",
    "start": "3093720",
    "end": "3100650"
  },
  {
    "text": "One, two, three up to N. And, and the range minimum query problem says give me I and J tell me the the place where the smallest item is between positions I and J inclusive.",
    "start": "3100650",
    "end": "3122369"
  },
  {
    "text": "So if I is five and J is nine then the smallest, but the range minimum query would say six because it's in position six is where the smallest guy is between those between these, these positions.",
    "start": "3122370",
    "end": "3136180"
  },
  {
    "text": "So, so the range minimum. So K of ija is, is it is is such that a sub K.J. equals the men of a of I through a J.",
    "start": "3136180",
    "end": "3156599"
  },
  {
    "text": "That's the arrangement of Macquarie problem. And in case of ties we take the left most of the leftmost position where it is now.",
    "start": "3156600",
    "end": "3166290"
  },
  {
    "text": "So the arrangement I'm quite problem turns out to be equivalent to the nearest common ancestor problem.",
    "start": "3166290",
    "end": "3171570"
  },
  {
    "text": "And there's a beautiful construction that will demonstrate this. And I show you how it works. You take these numbers and you and you insert them into this.",
    "start": "3171570",
    "end": "3185880"
  },
  {
    "text": "You aren't all going to understand this, but I gotta show it to work for those of you who do understand you.",
    "start": "3185880",
    "end": "3194250"
  },
  {
    "text": "Let me sort them first by with the bottom component first.",
    "start": "3194250",
    "end": "3201640"
  },
  {
    "text": "And and so that be one two one four two six three one three nine and so on six.",
    "start": "3201640",
    "end": "3209250"
  },
  {
    "text": "But then then I enter them into a binary tree according to the binary search tree method and quartering with the top guy for so, so illustrated.",
    "start": "3209250",
    "end": "3221820"
  },
  {
    "text": "So for the smallest, the smallest pair here. If I take, if I give preference to the bottom guy is one to the next smallest is one four.",
    "start": "3221820",
    "end": "3230970"
  },
  {
    "text": "I'm going to put it into a binary tree, but I use the upper guy now as the tiebreaker. So that is so. So in this case, four is greater than two. Next comes to six.",
    "start": "3230970",
    "end": "3243540"
  },
  {
    "text": "And so six is bigger than four. So two six is gonna go here. Then comes three one.",
    "start": "3243540",
    "end": "3249880"
  },
  {
    "text": "Right. So I'm crossing them out to the smallest guy on the left based on the bottom elements of three.",
    "start": "3249880",
    "end": "3259920"
  },
  {
    "text": "One is next. But when I put three one in here, I am going to put the one here to the left,",
    "start": "3259920",
    "end": "3265440"
  },
  {
    "text": "because when I'm putting into the tree, I'm using the upper guy to do this already.",
    "start": "3265440",
    "end": "3270630"
  },
  {
    "text": "So three nine nine is is he is here of four, three comes in here.",
    "start": "3270630",
    "end": "3281640"
  },
  {
    "text": "So like four is tie with this four. But is three is bigger. So I'm going to go this way and then put the four three here and.",
    "start": "3281640",
    "end": "3294820"
  },
  {
    "text": "Five, five, we're coming here, five.",
    "start": "3294820",
    "end": "3301570"
  },
  {
    "text": "Eight coming here. Open in five, good five 10 will come in here.",
    "start": "3301570",
    "end": "3312200"
  },
  {
    "text": "Six, seven for the seven is is coming in this way.",
    "start": "3312200",
    "end": "3318910"
  },
  {
    "text": "Eight. Between four and five, I forgot the nine.",
    "start": "3318910",
    "end": "3324589"
  },
  {
    "text": "Oh, well, it's it's still random. Eight eleven is going to is going to wind up here in twelve.",
    "start": "3324590",
    "end": "3333210"
  },
  {
    "text": "OK, so so anyway, I get a binary three here, a binary search tree.",
    "start": "3333210",
    "end": "3338420"
  },
  {
    "text": "Well, it turns out that if you want to find the range minimum query of two guys, it's just the least common ancestor in history.",
    "start": "3338420",
    "end": "3345540"
  },
  {
    "text": "The nearest common ancestor in history, for example, like, you know, between five and nine.",
    "start": "3345540",
    "end": "3351800"
  },
  {
    "text": "We had five to six by three. Well, that's this five, two, six, nine, three of these guys here.",
    "start": "3351800",
    "end": "3360920"
  },
  {
    "text": "And their nearest common ancestor is the one that happens to be highest in history. So. So. So this converts the the arrangement and query problem into a into a forest binary tree, in fact.",
    "start": "3360920",
    "end": "3376700"
  },
  {
    "text": "And if if I can solve the nearest common ancestor problem in the binary tree, then I've got the Riesman query problems nailed.",
    "start": "3376700",
    "end": "3385369"
  },
  {
    "text": "And this this beautiful construction was due to help Gabbar and John Bentley and Bob Tahj and I believe.",
    "start": "3385370",
    "end": "3395840"
  },
  {
    "text": "And conversely, if I have a good algorithm solved the range minim query problem, I also have a good algorithm to solve the newest common ancestor.",
    "start": "3395840",
    "end": "3406460"
  },
  {
    "text": "But I don't know any algorithm for the range minimum Craig problem that competes with Schieber in Michigan.",
    "start": "3406460",
    "end": "3411710"
  },
  {
    "text": "So Schieber investors is the winner? I think the for both of these guys. When the database is fixed. Databases can't.",
    "start": "3411710",
    "end": "3422779"
  },
  {
    "text": "Now let's talk. So now I hope I motivated this enough. What, like why somebody would care about Schieber and Baskin's elgan. And we now have to explain how they do it.",
    "start": "3422780",
    "end": "3436010"
  },
  {
    "text": "And what they do is they map this map. This given forest into a sideways heap in a very clever way.",
    "start": "3436010",
    "end": "3450150"
  },
  {
    "text": "So first of all, we we give a number to every node using using preorder of the fourth.",
    "start": "3450150",
    "end": "3461400"
  },
  {
    "text": "Now preorder is is like the order of succession to the throne. So you imagine that that these are, you know, kings and queens of lords or something like this and the and the first and,",
    "start": "3461400",
    "end": "3473900"
  },
  {
    "text": "you know, the children of of Green Elizabeth or something. And so no one this this guy would do would be first.",
    "start": "3473900",
    "end": "3482069"
  },
  {
    "text": "What if if if he dies, this guy's second.",
    "start": "3482070",
    "end": "3489660"
  },
  {
    "text": "I think it's still a guy's name and I'm not sure, but maybe not. But anyway, this person and and and anybody knows Alec Guinness Movie, where he kills off the top 13 people and then gets thrown into prison.",
    "start": "3489660",
    "end": "3505560"
  },
  {
    "text": "OK. So so this is this is preorder.",
    "start": "3505560",
    "end": "3510570"
  },
  {
    "text": "They order a succession of the show and get four, five, six, seven, eight, nine, 10.",
    "start": "3510570",
    "end": "3518580"
  },
  {
    "text": "So in this ordering the children of a family, all the descendants are consecutive.",
    "start": "3518580",
    "end": "3526950"
  },
  {
    "text": "All the descendants of of one are the nodes between one and eight, two, three, four.",
    "start": "3526950",
    "end": "3534810"
  },
  {
    "text": "And all the descendants of four are five, six or seven. So this isn't a nice it's a nice order.",
    "start": "3534810",
    "end": "3540260"
  },
  {
    "text": "So so everything has an order now. And we and what we do is then.",
    "start": "3540260",
    "end": "3548640"
  },
  {
    "text": "So I have my notes. ABC. D e f g h i j.",
    "start": "3548640",
    "end": "3554940"
  },
  {
    "text": "And I. And so associate. So call this this node V and pi a V will be the order of the preorder index of V.",
    "start": "3554940",
    "end": "3566670"
  },
  {
    "text": "So A is one. She is two. F is three. D four.",
    "start": "3566670",
    "end": "3573599"
  },
  {
    "text": "G is five. J is six. Eight. Six, seven. He is eight, nine.",
    "start": "3573600",
    "end": "3580920"
  },
  {
    "text": "Ten. So these are. This is Pi v and.",
    "start": "3580920",
    "end": "3590380"
  },
  {
    "text": "Next thing I feel like I have something called Bita of V, which is which is really the tricky part.",
    "start": "3590380",
    "end": "3601400"
  },
  {
    "text": "And I am. And I say it's the greatest movie is the nearest common ancestor of.",
    "start": "3601400",
    "end": "3616010"
  },
  {
    "text": "All of the of the following set pae of you, where you as a child is a child descendant.",
    "start": "3616010",
    "end": "3627310"
  },
  {
    "text": "V. Not answers to, but the Senate. So, for example, to figure out Bita of of these.",
    "start": "3627310",
    "end": "3640430"
  },
  {
    "text": "It's gonna be the nearest common ancestor of all of the descendants of D. Can you see him here? This is pie of the pie of G.",
    "start": "3640430",
    "end": "3651800"
  },
  {
    "text": "Pie of J. And pie of H. All right. So that's four, five, six and seven.",
    "start": "3651800",
    "end": "3660160"
  },
  {
    "text": "So he's going to be it. It's always going to be a consecutive thing here because all of the descendants are consecutive in preorder.",
    "start": "3660160",
    "end": "3671150"
  },
  {
    "text": "So what's the nearest common ancestor of those four nodes in the sideways heap in the site?",
    "start": "3671150",
    "end": "3678079"
  },
  {
    "text": "In the sideways, he. So if.",
    "start": "3678080",
    "end": "3685030"
  },
  {
    "text": "Me, sideways. There is only one side we see. It's this guy. But I'm glad you asked because you are not the only person wondering about that.",
    "start": "3685030",
    "end": "3693720"
  },
  {
    "text": "In fact, I'm now wondering which sideways hit because I lost my picture.",
    "start": "3693720",
    "end": "3701310"
  },
  {
    "text": "But here it is. This is these sideways. And so the nearest common ancestor of four or five, six and seven is for the year.",
    "start": "3701310",
    "end": "3714440"
  },
  {
    "text": "OK, so if we if we ask ourselves then if if if we have some node in it and it's preorder number is let me take a random a random number like 20.",
    "start": "3714440",
    "end": "3735060"
  },
  {
    "text": "Suppose suppose suppose pi a V is twenty. So. So I have some, you know the 20th node in my given the 20th node in my, in my given forest.",
    "start": "3735060",
    "end": "3747900"
  },
  {
    "text": "And now what can I figure out vedova. Well this is gonna be there is common ancestor of twenty twenty one up to something.",
    "start": "3747900",
    "end": "3763530"
  },
  {
    "text": "The last, the last descendant of, of the four of you.",
    "start": "3763530",
    "end": "3770100"
  },
  {
    "text": "Depending on how many kids. How many descendants. No. Twenty handed. And so if, if it doesn't have any 20 any descendants at all.",
    "start": "3770100",
    "end": "3779910"
  },
  {
    "text": "You know, six, six one year common ancestor of of twenty. All by itself is just 20. If I have 20 and 21. Well I didn't put that on a chart here, but you have to imagine that's 20, 21.",
    "start": "3779910",
    "end": "3795119"
  },
  {
    "text": "That's still going to be 20, 20, 21, 22, even 23.",
    "start": "3795120",
    "end": "3800640"
  },
  {
    "text": "It's gonna be 20. But if I get a 24. The nearest common ancestor of ours is going to be 24 because it's a multiple of eight.",
    "start": "3800640",
    "end": "3813359"
  },
  {
    "text": "So so there's going to be. OK, I'll find the one that has the largest role in here, the largest value of the router function.",
    "start": "3813360",
    "end": "3822520"
  },
  {
    "text": "And that's what we felt figured out before. And when we had this magical relation between the router function in an interval and the end, the lambda function.",
    "start": "3822520",
    "end": "3832000"
  },
  {
    "text": "So in other words, the NCA of your member of J.",
    "start": "3832000",
    "end": "3839140"
  },
  {
    "text": "Through K is actually going to be equal to Lambda of K.",
    "start": "3839140",
    "end": "3847380"
  },
  {
    "text": "And minus Jay. According to the formula. Right, I'm sorry, too, to this power.",
    "start": "3847380",
    "end": "3855690"
  },
  {
    "text": "No. Oh, no. I'm sorry. No, that's not it. That's not it. It's going to be the ancestor of of Jay at this level.",
    "start": "3855690",
    "end": "3867000"
  },
  {
    "text": "So it's a form of. I have to write down. But it depends on. It depends on this quantity, which I can calculate just in a few few machine instructions.",
    "start": "3867000",
    "end": "3875070"
  },
  {
    "text": "So anyway, the the the the gist of this is then since we're running out of time,",
    "start": "3875070",
    "end": "3880890"
  },
  {
    "text": "I got a concern out that that bita a V beta of beta a V is always going to be equal to beta.",
    "start": "3880890",
    "end": "3887940"
  },
  {
    "text": "So it can be a fixed point. So on. So, so, so, so upchuck. I can work it out. What Beta V is in this, in this chart. And, and it's not hard.",
    "start": "3887940",
    "end": "3897970"
  },
  {
    "text": "A has to sentence. One, two, three, four, five, six, seven. So the largest guy is gonna be for their, for B it's eight, nine and 10.",
    "start": "3897970",
    "end": "3907690"
  },
  {
    "text": "It's gonna be eight. For C it's two and three which is two.",
    "start": "3907690",
    "end": "3912720"
  },
  {
    "text": "For D it's four, five, six and seven is four is nine and and it's gonna be ten.",
    "start": "3912720",
    "end": "3920590"
  },
  {
    "text": "I just choose among all the descendants, the one that that has that's divisible by the most twos, three,",
    "start": "3920590",
    "end": "3929910"
  },
  {
    "text": "all the leaves are going to go into themselves because they have no descendants except themselves.",
    "start": "3929910",
    "end": "3936119"
  },
  {
    "text": "G has five and six is going to be six and I is going to be ten. So. So anyway, that's what Beta V is and.",
    "start": "3936120",
    "end": "3947310"
  },
  {
    "text": "OK. Then there's an Alpha of V which is.",
    "start": "3947310",
    "end": "3955860"
  },
  {
    "text": "Uh. Given by a formula, alpha of V equals the sum of.",
    "start": "3955860",
    "end": "3967210"
  },
  {
    "text": "The sum of two to the row of Bater of V, W for all V that go through that that our ancestors have W.",
    "start": "3967210",
    "end": "3977130"
  },
  {
    "text": "So anyway, Victor is there is there are these magical numbers that we can calculate.",
    "start": "3977130",
    "end": "3983700"
  },
  {
    "text": "And it turns out that this is going to be then it turns out this for this is two",
    "start": "3983700",
    "end": "3989670"
  },
  {
    "text": "plus for those of you watching it on television will be able to check me on this.",
    "start": "3989670",
    "end": "3995339"
  },
  {
    "text": "But this is four. This is gonna be. Eight plus two F is its one plus two plus four.",
    "start": "3995340",
    "end": "4009810"
  },
  {
    "text": "It's that you look at all the ancestors and you add together to to that to the those powers of two and you get a binary number anyway.",
    "start": "4009810",
    "end": "4018290"
  },
  {
    "text": "These are all numbers. This is going to be a number between one and an.",
    "start": "4018290",
    "end": "4026240"
  },
  {
    "text": "And Veda V is gonna be between one and an Alpha. Alpha V can is all you can be listened to.",
    "start": "4026240",
    "end": "4032840"
  },
  {
    "text": "So these are numbers that we can calculate. And I, I will just write down the the XI revision algorithm so that you can see how fast it is.",
    "start": "4032840",
    "end": "4046800"
  },
  {
    "text": "And then and. And so we start out and we calculate.",
    "start": "4046800",
    "end": "4053730"
  },
  {
    "text": "So suddenly here's a Schieber Visger algorithm.",
    "start": "4053730",
    "end": "4059420"
  },
  {
    "text": "S.V. algorithm for the nearest common or nearest common ancestor of X and Y.",
    "start": "4059420",
    "end": "4067190"
  },
  {
    "text": "The first step is calculate. H is equal to lamda of beta Y ampersand minus beta x.",
    "start": "4067190",
    "end": "4081770"
  },
  {
    "text": "Sorry beta y ampersand minus beta x. If beta X is less than or equal pay to Y or the other way around beta X and minus beta y if beta.",
    "start": "4081770",
    "end": "4095120"
  },
  {
    "text": "Why is it is greater than or equal to either. Either one gives the same answer. If they're equal. Now the next step is we calculate K.",
    "start": "4095120",
    "end": "4109880"
  },
  {
    "text": "And that is Alpha X and with Alpha Y and it with minus one left shifted H.",
    "start": "4109880",
    "end": "4120529"
  },
  {
    "text": "And then we recalculate H. And we change it to lambda K an ampersand minus K three.",
    "start": "4120530",
    "end": "4132449"
  },
  {
    "text": "Set J. Two. Theta X.",
    "start": "4132450",
    "end": "4138710"
  },
  {
    "text": "Right. Shift H or one. And left shift H.",
    "start": "4138710",
    "end": "4146779"
  },
  {
    "text": "And next skep, I said, I calculate x half is equal to.",
    "start": "4146780",
    "end": "4160670"
  },
  {
    "text": "Data X. J equals.",
    "start": "4160670",
    "end": "4166230"
  },
  {
    "text": "I'm sorry, excuse. X is equal to X. If.",
    "start": "4166230",
    "end": "4171580"
  },
  {
    "text": "Peter. X equals J.",
    "start": "4171580",
    "end": "4176850"
  },
  {
    "text": "Otherwise, it's equal to total. I didn't tell you what time is of the X minus one.",
    "start": "4176850",
    "end": "4188190"
  },
  {
    "text": "Now there's another table called Tao where L equals Lambda of Alpha X ampersand one.",
    "start": "4188190",
    "end": "4200480"
  },
  {
    "text": "She's you get it. So here we are. All right. So and then y bar is the same thing with X and Y.",
    "start": "4200480",
    "end": "4209960"
  },
  {
    "text": "OK. So now Tao is is this little table here.",
    "start": "4209960",
    "end": "4221510"
  },
  {
    "text": "OK. OK, I'll explain. I spent time in a person. I want to show you why the algorithm is fast. And finally the last step is if and then Z.",
    "start": "4221510",
    "end": "4233040"
  },
  {
    "text": "This is the nearest current assets. This is our answer. And it's equal to expire. If by X Bar is less than or equal pie y y hat sorry.",
    "start": "4233040",
    "end": "4242550"
  },
  {
    "text": "And Y hat. If my ex is great and or equal pi y. OK, well this is that, this is the whole algorithm. And you see why.",
    "start": "4242550",
    "end": "4250470"
  },
  {
    "text": "I mean at that point it's OK. It's a finite number of steps.",
    "start": "4250470",
    "end": "4255910"
  },
  {
    "text": "It goes zip, zip, zip. What it's about. But if we can't. How many operations there are.",
    "start": "4255910",
    "end": "4262290"
  },
  {
    "text": "This is one two. Let's see this.",
    "start": "4262290",
    "end": "4267980"
  },
  {
    "text": "This is one, two. Lambda cause something. So that's that's that's three steps here.",
    "start": "4267980",
    "end": "4276330"
  },
  {
    "text": "There's a test here. There's a test here. The test here. So I have to make three tests and then but then calculations outside of the test go this way.",
    "start": "4276330",
    "end": "4285210"
  },
  {
    "text": "I can do these things in parallel in modern computer here. I've got one up. One, two, three, four.",
    "start": "4285210",
    "end": "4296460"
  },
  {
    "text": "This call is for operations like imagine that I fixed Fitbit X and Health X already into register close to other operations if you want.",
    "start": "4296460",
    "end": "4306960"
  },
  {
    "text": "Here's one to land is three operations. Here's one, two, three operations here.",
    "start": "4306960",
    "end": "4317370"
  },
  {
    "text": "It turns out I have to make no operations or eight operations. If I if I have to do the second case and there's maybe eight operations calculating my head.",
    "start": "4317370",
    "end": "4325130"
  },
  {
    "text": "And then here is just this test again. So. So in total, I'm making about 20 operations.",
    "start": "4325130",
    "end": "4331500"
  },
  {
    "text": "Three tests. And. And I have to fetch tão lambda.",
    "start": "4331500",
    "end": "4340080"
  },
  {
    "text": "I guess I counted Lamda already as fetching. But it goes, it goes zip, zip, zip.",
    "start": "4340080",
    "end": "4346270"
  },
  {
    "text": "Anyway, much, much fewer operations then. Then these other competing algorithms for for that, for the thing.",
    "start": "4346270",
    "end": "4354000"
  },
  {
    "text": "Now the intuition as to why it works is that that you that you map the given forest",
    "start": "4354000",
    "end": "4362430"
  },
  {
    "text": "into the sideways heap and and you can you put like in this part of the heap,",
    "start": "4362430",
    "end": "4371010"
  },
  {
    "text": "J and G go into the heap. I'm showing them the beta value.",
    "start": "4371010",
    "end": "4376360"
  },
  {
    "text": "So, so, so whatever, whatever nodes better value is, you put it there in a heap and then everything that this turns out to be a useful operation.",
    "start": "4376360",
    "end": "4387000"
  },
  {
    "text": "Also in other algorithms based on the sideways we see, because what it does is it takes it it it takes this arbitrary forest and maps it in into",
    "start": "4387000",
    "end": "4400170"
  },
  {
    "text": "this nice binary structure in such a way that if if several guys go into the same place,",
    "start": "4400170",
    "end": "4407520"
  },
  {
    "text": "they correspond to a path in the original forest. So you divide your original forest up into little paths and those little paths fit into the sideways heap.",
    "start": "4407520",
    "end": "4416130"
  },
  {
    "text": "And then to find the nearest common ancestor. It turns out to be an easy in quotes calculation on the sideways.",
    "start": "4416130",
    "end": "4426719"
  },
  {
    "text": "Because it can be done by arithmetic.",
    "start": "4426720",
    "end": "4431890"
  },
  {
    "text": "OK. So it's not one of those algorithms that I can prove easily. Quickly. But but when you when you look at the code, it's only a few.",
    "start": "4431890",
    "end": "4440310"
  },
  {
    "text": "It you know, it it's only a dozen lines of code in there. In your program. And the computer goes very fast through it. So this is a I don't know, I hate to say this.",
    "start": "4440310",
    "end": "4449910"
  },
  {
    "text": "Maybe, you know, do you mind if we have algorithms, the future like this that are based on a number based on on mathematics that takes that takes some Googling.",
    "start": "4449910",
    "end": "4459920"
  },
  {
    "text": "I guess they say that the computer doesn't doesn't feel bad about it.",
    "start": "4459920",
    "end": "4466310"
  },
  {
    "text": "The computer here doesn't know if he's executing a stupid program or a subtle program. A computer just goes just disclosing follows or.",
    "start": "4466310",
    "end": "4474450"
  },
  {
    "text": "So so that's a very brief and and not too clear introduction, but I hope at least those of you who whoever need to calculate his comments,",
    "start": "4474450",
    "end": "4489290"
  },
  {
    "text": "sisters will know that she provision Helgason is something to look at. If you're going to you're going to do it. Hey, thanks for your patients getting through this.",
    "start": "4489290",
    "end": "4500450"
  },
  {
    "text": "I'm ready to take questions. Processing time?",
    "start": "4500450",
    "end": "4515060"
  },
  {
    "text": "Yeah, it's linear. That's right, that's exactly the right question. Yeah. You guys, that that's exercise. Hundred and forty four. I mean, you got there. Does it take some time for both the arrangement of inquiry and the.",
    "start": "4515060",
    "end": "4527580"
  },
  {
    "text": "And the newscaster's is it goes on any time, although. Hello. My definition was, was x mental time. The, the actual.",
    "start": "4527580",
    "end": "4536020"
  },
  {
    "text": "There is actually a way to calculate these magic tables, the PI, the Alpha, the the Tao and the lambda table which you might as well keep in there all out in in order and time where constant is small.",
    "start": "4536020",
    "end": "4556820"
  },
  {
    "text": "Thanks for that. Yeah, if you if you're out in the street, if you're in Austin, I know you have to be fast, you have to go here.",
    "start": "4556820",
    "end": "4565050"
  },
  {
    "text": "But that's too bad. Yeah. No, no. In that case, he gets to log in.",
    "start": "4565050",
    "end": "4571130"
  },
  {
    "text": "There are other methods of very, very complicated, which I would hate to program that, you know, that that do these and that they do these fast.",
    "start": "4571130",
    "end": "4580460"
  },
  {
    "text": "But certainly Schieber Briskin algorithm is good for the static case, not a dynamic case.",
    "start": "4580460",
    "end": "4586610"
  },
  {
    "text": "And but it but I like it both because it's it's fast.",
    "start": "4586610",
    "end": "4595940"
  },
  {
    "text": "It's, you know, and because it's got this is based on theory that that excites me.",
    "start": "4595940",
    "end": "4603170"
  },
  {
    "text": "I mean, I think it just hangs together in a very elegant fashion,",
    "start": "4603170",
    "end": "4608870"
  },
  {
    "text": "even though it looks like you could simplify the reason I spent I spent two days, I looked like you should be able to simplify.",
    "start": "4608870",
    "end": "4617000"
  },
  {
    "text": "But then I showed that that certain cases can, in certain cases that occur rarely where you can sort of have an entangling things as you're doing this betting you actually need the complexities.",
    "start": "4617000",
    "end": "4634080"
  },
  {
    "text": "I mean, the algorithm, you know, takes takes twenty five steps or something.",
    "start": "4634080",
    "end": "4639570"
  },
  {
    "text": "I don't know how twenty 24. But I think each of those steps arises because, because it unusual cases require.",
    "start": "4639570",
    "end": "4657400"
  },
  {
    "text": "OK. So as I said before, a lot of people came in after, so I've got I got some freebies on the table here for Christmas Breton's for anyone who's who's who happens to get their first and is interesting.",
    "start": "4657400",
    "end": "4670520"
  },
  {
    "text": "And so Merry Christmas to all.",
    "start": "4670520",
    "end": "4679935"
  }
]