[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "My name is Sergio. I'll be talking to you today about a framework called Rocket.",
    "start": "0",
    "end": "5070"
  },
  {
    "text": "That's my email address, you'll see again at the end of the talk if you want to chat with me about any of this.",
    "start": "5070",
    "end": "10094"
  },
  {
    "start": "10000",
    "end": "43000"
  },
  {
    "text": "Yeah, so Rocket. So, Rocket is a web framework for Rust that ideally makes it simple to write secure,",
    "start": "10095",
    "end": "18960"
  },
  {
    "text": "correct web applications without sacrificing flexibility, so you're able to do what you want,",
    "start": "18960",
    "end": "24210"
  },
  {
    "text": "not what the web framework wants you to do or performance. It should be really, really fast, even if we have all these really, really nice guarantees.",
    "start": "24210",
    "end": "31350"
  },
  {
    "text": "Just to be very clear, what I mean by web framework. I mean, these types of things like Django, or Spring, or Rails, you know,",
    "start": "31350",
    "end": "38114"
  },
  {
    "text": "libraries that help you write sort of web backend code, your web application's backend.",
    "start": "38115",
    "end": "43480"
  },
  {
    "start": "43000",
    "end": "159000"
  },
  {
    "text": "And if you're not familiar with Rust, it is a programming language sort of, mostly developed by Mozilla.",
    "start": "43480",
    "end": "49140"
  },
  {
    "text": "Uh, started at Mozilla research that is memory safe without a garbage collector using, you know, PL stuff.",
    "start": "49140",
    "end": "55690"
  },
  {
    "text": "It has no data races, guarantee at compile time. If your thing compiles, then you don't have any data races.",
    "start": "55690",
    "end": "61995"
  },
  {
    "text": "It also has a very, very, very small runtime like on the order of C++ or even smaller,",
    "start": "61995",
    "end": "68040"
  },
  {
    "text": "so you can write things like operating systems. And sort of most necessary for Rocket is that it has macro systems,",
    "start": "68040",
    "end": "75604"
  },
  {
    "text": "let's say systems because it has two, not just one but two and sort of the C style declarative kind of macros,",
    "start": "75605",
    "end": "83175"
  },
  {
    "text": "but there's also this different kind of macro called procedural macro which effectively gives you an AST at compile time.",
    "start": "83175",
    "end": "90190"
  },
  {
    "text": "It lets you execute arbitrary Rust code that generates other Rust code that is then inserted into the user's program.",
    "start": "90190",
    "end": "98580"
  },
  {
    "text": "So, this is what Rocket uses, sort of most of Rocket's niceties and",
    "start": "98580",
    "end": "103710"
  },
  {
    "text": "security and correct these properties come from procedural macros. The fact that we're able to take a user's web application and change it,",
    "start": "103710",
    "end": "111105"
  },
  {
    "text": "explore it, verify it, validate it, at compile time to give all these nice guarantees. So, yeah, Rocket is a web framework for Rust that makes it simple to write secure,",
    "start": "111105",
    "end": "119670"
  },
  {
    "text": "correct web applications without sacrificing flexibility or performance. Now, a big part of this talk will be sort of focusing on the properties,",
    "start": "119670",
    "end": "127409"
  },
  {
    "text": "the secure, the security and correct properties that Rocket gives you. But I want to emphasize is that the vast majority of",
    "start": "127410",
    "end": "132780"
  },
  {
    "text": "these properties are being guaranteed at compile time. That is if your program compiles,",
    "start": "132780",
    "end": "138959"
  },
  {
    "text": "you have all of these guarantees about what it, what it can and cannot do. For instance, Rocket will guarantee at compile time that there",
    "start": "138960",
    "end": "145710"
  },
  {
    "text": "are no cross-site scripting or CSRF vulnerabilities. It will guarantee at compile time that you don't have any directory traversal attacks.",
    "start": "145710",
    "end": "152690"
  },
  {
    "text": "It will guarantee at compile time that you have no SQL Injection attacks. If your thing compiles, you know all these things to be true.",
    "start": "152690",
    "end": "158250"
  },
  {
    "text": "Okay. So, this is sort of the timeline of Rocket, just to give you an idea of sort of where it sits in the world, in space and time.",
    "start": "158250",
    "end": "166740"
  },
  {
    "start": "159000",
    "end": "236000"
  },
  {
    "text": "It launched about a year and a half ago, that was the first public release. About a couple of months after that,",
    "start": "166740",
    "end": "173220"
  },
  {
    "text": "we had 0.2, and a few months after that, we had 0.3, and now it's been a bit, a bit later,",
    "start": "173220",
    "end": "178680"
  },
  {
    "text": "it's been almost, I don't know, like eight months after 0.3. Uh, people in GitHub seem to like it a lot,",
    "start": "178680",
    "end": "183960"
  },
  {
    "text": "it's got 4,200 stars and counting. I think, think something really, really interesting is how quickly Rocket was put into production use,",
    "start": "183960",
    "end": "191910"
  },
  {
    "text": "how quickly someone told me that they were actually using Rocket in production. And you might guess at this point is sort of farther on this line,",
    "start": "191910",
    "end": "199200"
  },
  {
    "text": "you might hope at this point is sort of farther on the line. But in fact, it's right there. It was like a week after a Rocket was released,",
    "start": "199200",
    "end": "206900"
  },
  {
    "text": "someone said that they rewrote their Node application in Rocket and their boss was super happy because they could toss away,",
    "start": "206900",
    "end": "212430"
  },
  {
    "text": "you know, like a tenth of their server or something because it's just so much faster. So, that was pretty interesting.",
    "start": "212430",
    "end": "217829"
  },
  {
    "text": "Now, more companies are using it in production. My count is in dozens, my guess is roughly 100 or so.",
    "start": "217830",
    "end": "224840"
  },
  {
    "text": "In particular companies like NPM and System76 and Mozilla are either using Rocket in production today,",
    "start": "224840",
    "end": "231330"
  },
  {
    "text": "that's NPM and System76, and Mozilla is sort of exploring, using it in production which is pretty neat.",
    "start": "231330",
    "end": "236880"
  },
  {
    "start": "236000",
    "end": "417000"
  },
  {
    "text": "Okay. So, yeah. Once again, Rocket is a web framework for Rust that makes it simple to write secure,",
    "start": "236880",
    "end": "242685"
  },
  {
    "text": "correct web applications without sacrificing flexibility or performance. All right, so this is a security workshop,",
    "start": "242685",
    "end": "248130"
  },
  {
    "text": "so presumably we're going to talk a lot about security here. So, let's talk about security. So, when I say Rocket helps with security,",
    "start": "248130",
    "end": "255314"
  },
  {
    "text": "I'm really talking about all these vulnerabilities that you might encounter if you've written a web application,",
    "start": "255315",
    "end": "260670"
  },
  {
    "text": "and you know, these are them here. So, all of these terms here, ideally Rocket can help you with them.",
    "start": "260670",
    "end": "267730"
  },
  {
    "text": "Kind of want separate these things, these things into three buckets.",
    "start": "267740",
    "end": "272875"
  },
  {
    "text": "So, the first I'm going to say that these are things that things like Spring or Rails,",
    "start": "272875",
    "end": "278565"
  },
  {
    "text": "already do pretty well. Someone color this in green here. Things like directory traversal or cross-site request forgery,",
    "start": "278565",
    "end": "285585"
  },
  {
    "text": "you know they, they handle it pretty okay. If you write your application on Rails or Spring Boot or something like that,",
    "start": "285585",
    "end": "290790"
  },
  {
    "text": "then you're probably not vulnerable to these things. Now, there's a second class where they kind of try to prevent these things,",
    "start": "290790",
    "end": "297870"
  },
  {
    "text": "but still it happens in practice that a lot of people are vulnerable to these issues. These are things like cross-site scripting or remote code execution",
    "start": "297870",
    "end": "305970"
  },
  {
    "text": "which you'd think like just don't execute code that the user gives you, but in practice, we leak everyone's Social Security numbers because,",
    "start": "305970",
    "end": "313724"
  },
  {
    "text": "you know, we're Experian. So, these things just happen, so clearly we're not doing a good job.",
    "start": "313725",
    "end": "319850"
  },
  {
    "text": "And finally, sort of this last class of things that no one really tackles because it's just really arbitrary.",
    "start": "319850",
    "end": "328250"
  },
  {
    "text": "Like what does it mean to validate input? That depends entirely on what the input looks like,",
    "start": "328250",
    "end": "333530"
  },
  {
    "text": "that's very application specific. And so, something like Rails, doesn't really do anything but let you call functions that say, no, don't do this.",
    "start": "333530",
    "end": "341085"
  },
  {
    "text": "Rocket sort of makes it its priority to handle these things. So, yeah. So, these are the three sort of class of issues.",
    "start": "341085",
    "end": "348060"
  },
  {
    "text": "We have these things here that we're just going to, Rocket is just going to use the existing solutions, there's no reason not to, they work really well.",
    "start": "348060",
    "end": "354875"
  },
  {
    "text": "But on top of that, Rocket is going to guarantee that the solutions are actually enforced.",
    "start": "354875",
    "end": "360305"
  },
  {
    "text": "If your thing compiles, it will not be vulnerable to cross-site request forgery. So, we're going to use these existing solutions,",
    "start": "360305",
    "end": "366460"
  },
  {
    "text": "we're going to do it in such a way that in compile time, we know that they're enforced. This second class of things sort of similarly we're going to sort of do what we already know,",
    "start": "366460",
    "end": "374750"
  },
  {
    "text": "but then we're going to go a step further. For instance, for cross-site scripting, we're going to automatically insert things like CSP headers so",
    "start": "374750",
    "end": "381260"
  },
  {
    "text": "that your thing is guaranteed to not be vulnerable to cross-site scripting. And if your thing compiles then the headers must be inserted on every request,",
    "start": "381260",
    "end": "388875"
  },
  {
    "text": "and you can't possibly- you couldn't have possibly gotten it wrong because Rocket will do everything for you or give you a compile time error that it didn't happen.",
    "start": "388875",
    "end": "396175"
  },
  {
    "text": "And finally, you know, these are things that nothing really handles and I'm going to show you, hopefully I'm going to convince you that Rocket has the tools to sort of solve these issues.",
    "start": "396175",
    "end": "404290"
  },
  {
    "text": "Okay. And if everything works out okay, then we'll be able to color all of these things green, and we'll say, okay,",
    "start": "404290",
    "end": "409580"
  },
  {
    "text": "now we have solutions for everything and we can sort of write web applications, and not be concerned about all of these issues,",
    "start": "409580",
    "end": "415060"
  },
  {
    "text": "just kind of write the happy path. Okay. Well, so that's cool and uh, there are sort of three things that Rocket",
    "start": "415060",
    "end": "424110"
  },
  {
    "text": "does or three sort of principles that Rocket has that kind of enables it to, to sort of handle these things for you.",
    "start": "424110",
    "end": "431220"
  },
  {
    "text": "So, the first thing that Rocket does a little differently is that it has no global state. If you use basically any other web framework,",
    "start": "431220",
    "end": "438920"
  },
  {
    "text": "there is usually something global. The application is global, the request is global, there's some global state.",
    "start": "438920",
    "end": "444050"
  },
  {
    "text": "In Rocket, that's just not the case. In Rocket, everything is sort of a function, and the function's parameters,",
    "start": "444050",
    "end": "450010"
  },
  {
    "text": "the function's declaration contains all the information necessary to validate and process that request.",
    "start": "450010",
    "end": "455854"
  },
  {
    "text": "There is nothing outside of that function. If you see it in the function, it's going to be used and if it's not in the function, it cannot be used.",
    "start": "455855",
    "end": "464160"
  },
  {
    "text": "The second is that all of the requests that are processed by a Rocket application are guaranteed to have been validated.",
    "start": "464160",
    "end": "474165"
  },
  {
    "text": "So, before any processing happens, before your code actually executes on a request,",
    "start": "474165",
    "end": "480030"
  },
  {
    "text": "then Rocket has ensured that, that request has been validated according to your own policies, according to your sort of arbitrary policies.",
    "start": "480030",
    "end": "487600"
  },
  {
    "text": "And this sort of is happening at the type level. So, as you see in the second, we have these types that dictate sort of what things must be true about the request,",
    "start": "487600",
    "end": "493785"
  },
  {
    "text": "and Rocket will ensure that those things in fact are true before it passes you a value of that type. In fact, it can't pass you a value of that type unless those things are true.",
    "start": "493785",
    "end": "501759"
  },
  {
    "text": "And finally, everything in Rocket is extensible. Rocket's core is really, really small.",
    "start": "501760",
    "end": "507060"
  },
  {
    "text": "Validation, templating, serialization, sessions, configuration. Think about it, it doesn't happen in Rocket's core, it happens outside.",
    "start": "507060",
    "end": "515349"
  },
  {
    "text": "So there's a canonical contrib library that includes all of these things, so you don't have to write them yourself.",
    "start": "515350",
    "end": "520655"
  },
  {
    "text": "But if you wanted to, you could. You could completely change the way validation works in Rocket if you wanted to. And the nice thing is that all of these things sort of feel first class.",
    "start": "520655",
    "end": "527520"
  },
  {
    "text": "They don't feel like you're importing a Ruby gem from outside the world and you're kind of bolting it in. They're just, they're just kind of part of the framework.",
    "start": "527520",
    "end": "535005"
  },
  {
    "text": "Okay. So, all of these things sort of make Rocket, Rocket. Here's what it looks like.",
    "start": "535005",
    "end": "541445"
  },
  {
    "text": "So, if you have, say you have a Pastebin and somebody has uploaded a paste to your website,",
    "start": "541445",
    "end": "548220"
  },
  {
    "text": "to your Pastebin, and then trying to retrieve the paste, well, there's a few things that we want to sort of be sure about to retrieve that paste.",
    "start": "548220",
    "end": "555510"
  },
  {
    "text": "We want to make sure that, one, there is a user logged in, and two, that that paste sort of exists so that the ID they give you sort of makes sense.",
    "start": "555510",
    "end": "561940"
  },
  {
    "text": "And so the way you write this in Rocket sort of looks like this. The thing at the very top is an attribute.",
    "start": "561940",
    "end": "568250"
  },
  {
    "text": "It declares a things that must be true about the incoming requests to sort of match on it. So, in this case, we just need an ID from the user.",
    "start": "568250",
    "end": "575355"
  },
  {
    "text": "Now, the cool thing is that all of this is typed. So, sort of in the request parameters, you declare the types for the incoming request,",
    "start": "575355",
    "end": "582220"
  },
  {
    "text": "the things that must be true about the incoming request. In this case, there has to be a user logged in, and the ID that you saw in the sort of request parameter there has",
    "start": "582220",
    "end": "591060"
  },
  {
    "text": "to validate as whatever the paste ID type implies. And finally, sort of this extends all throughout the function declaration.",
    "start": "591060",
    "end": "599925"
  },
  {
    "text": "This return type sort of means something, it means that you can optionally return a file. If you don't return the file, it automatically gives you a 404.",
    "start": "599925",
    "end": "607029"
  },
  {
    "text": "If you do return the file, then it would actually render that file for whatever that actually means in this case.",
    "start": "607030",
    "end": "612360"
  },
  {
    "text": "And then, your actual function body does sort of lookups. So, in this case, you can see that it creates",
    "start": "612360",
    "end": "617399"
  },
  {
    "text": "the string that presumably is some directory, so upload/users/ID, and then it just opens that file.",
    "start": "617400",
    "end": "625440"
  },
  {
    "text": "Now this might look really, really sketchy because, well, isn't there like a path traversal attack going on here,",
    "start": "625440",
    "end": "632110"
  },
  {
    "text": "like isn't there a directory traversal attack here. Nice thing is that the answer is no. Otherwise, I wouldn't be showing you this.",
    "start": "632110",
    "end": "637380"
  },
  {
    "text": "All of this is guaranteed to sort of look the way you wanted to, there's input validation happening implicitly. If you got this user type,",
    "start": "637380",
    "end": "643649"
  },
  {
    "text": "it looks the way you thought it looked, otherwise, we couldn't have created this issue type. They got this paste ID type and it looks the way you wanted it to.",
    "start": "643650",
    "end": "650130"
  },
  {
    "text": "So, sort of this concatenation, the thing that you kind of just want to do, just you can do.",
    "start": "650130",
    "end": "655260"
  },
  {
    "text": "So, you only write the happy path, everything else happens for you. Okay. So, I said there are all these sort of security,",
    "start": "655260",
    "end": "662040"
  },
  {
    "text": "vulnerabilities, you know, how does what I just presented kind of solve this. Yeah? So what does that mean, I can't add dot dot to my user? That's right.",
    "start": "662040",
    "end": "670180"
  },
  {
    "text": "[OVERLAPPING] Un- unless you wanted to sure, you can make you can make that happen if you wanted to, yeah. In this case because we're using it this way we're",
    "start": "670180",
    "end": "675300"
  },
  {
    "text": "sort of assuming that you that you don't, yeah. [NOISE] But yeah. Yeah so we have all the security vulnerability stuff,",
    "start": "675300",
    "end": "681904"
  },
  {
    "text": "you know, how does this prevent it? Maybe you can sort of look ahead and say, okay, I see how we're preventing some of these things,",
    "start": "681905",
    "end": "687160"
  },
  {
    "text": "um, but maybe you're not convinced. Maybe you even think that, \"Hey these things actually aren't real issues. I've written a lot of web application code,",
    "start": "687160",
    "end": "693560"
  },
  {
    "text": "and my code is not vulnerable to these things.\" Well, I'm here to tell you prob- probably is,",
    "start": "693560",
    "end": "699185"
  },
  {
    "text": "and a lot of people's code is, as well, and I'm going to show you three particular examples, uh, that I think are pretty illustrative of sort of what happens in the real world.",
    "start": "699185",
    "end": "707850"
  },
  {
    "text": "[NOISE] So, the first one is WordPress which everyone is probably familiar with. This is a vulnerability from 2009, it's an impact",
    "start": "707850",
    "end": "714260"
  },
  {
    "text": "10 vulnerability which means it's as bad as it can get. [NOISE] And it goes like this,",
    "start": "714260",
    "end": "719310"
  },
  {
    "text": "the CVE says that, \"WordPress before 2.8.3 allows remote attackers to gain privileges via direct request to 8 different endpoints.\"",
    "start": "719310",
    "end": "726960"
  },
  {
    "text": "And what this means is that if you have a computer, and you're able to make web requests then you can be",
    "start": "726960",
    "end": "732450"
  },
  {
    "text": "an administrator on any WordPress site before 2.8.3 by issuing a web request. You really have to do absolutely nothing.",
    "start": "732450",
    "end": "738370"
  },
  {
    "text": "You just issue a web request, and that's it. [NOISE] So, the fix is well let's check that the person, you know,",
    "start": "738370",
    "end": "743780"
  },
  {
    "text": "the entity executing this web request is in fact the administrator, and how how would you fix this? Well, if you're WordPress then you're written in PHP,",
    "start": "743780",
    "end": "750800"
  },
  {
    "text": "and you insert all of these if statements to check that you know, that user logged in has a certain permission that you require.",
    "start": "750800",
    "end": "758200"
  },
  {
    "text": "And here I show four but in fact there were like eight or 12, and there was a separate- separate sort of patch set to fix other issues,",
    "start": "758200",
    "end": "765560"
  },
  {
    "text": "but sort of the fix here is to add these if conditions. If you actually look at these WordPress files you'll see",
    "start": "765560",
    "end": "770720"
  },
  {
    "text": "a bunch of if conditions for things that look exactly like this. [NOISE] So, by contrast,",
    "start": "770720",
    "end": "776035"
  },
  {
    "text": "how would we do this in Rocket. Well i n Rocket we sort of would do what we just showed in the overview you'd have this parameter that says,",
    "start": "776035",
    "end": "782210"
  },
  {
    "text": "\"Oh this is a user\" you know, so we had this before in the example. So, we have this parameter that says this a user, in this case we don't need a regular user,",
    "start": "782210",
    "end": "789270"
  },
  {
    "text": "we need an admin, so we change that to be an admin there so we now require an admin.",
    "start": "789270",
    "end": "794800"
  },
  {
    "text": "And now, this function can only execute if there is an administrator logged in. So, by virtue of simply declaring that you need an administrator,",
    "start": "794800",
    "end": "803025"
  },
  {
    "text": "then you know, you know that this can all execute if there is in fact an administrator. Now, you might say what if I forget to actually put",
    "start": "803025",
    "end": "809750"
  },
  {
    "text": "this administrative parameter on there as sort of WordPress did, presumably they had no data dependency between the parameter, this you know,",
    "start": "809750",
    "end": "816920"
  },
  {
    "text": "this check, and uh, and um you know, the fact that it exists. So, you know, yeah well,",
    "start": "816920",
    "end": "822944"
  },
  {
    "text": "the nice thing is that we cover that, too. So, if you look at this function body, you'll see that we have this file: open_sensitive method.",
    "start": "822945",
    "end": "829080"
  },
  {
    "text": "And the open_sensitive will require a value of type admin. In this case, you know, this user type.",
    "start": "829080",
    "end": "834995"
  },
  {
    "text": "And so, what we've created here is a sort of capability-based data dependency. i.e., we required admin to exist,",
    "start": "834995",
    "end": "841110"
  },
  {
    "text": "thus if the admin exists then we can call this open_sensitive method. If this admin does not exist,",
    "start": "841110",
    "end": "846279"
  },
  {
    "text": "we can't call this open sensitive method. Thus, this open sensitive method can only be called if an administrator was in fact authenticated by the request.",
    "start": "846280",
    "end": "853880"
  },
  {
    "text": "And so, this vulnerability that happened at WordPress is just caught at compile time. If you can't say that there is an administrator authenticated,",
    "start": "853880",
    "end": "860605"
  },
  {
    "text": "you can't call this sensitive method. [NOISE] Okay. So, that's the WordPress vulnerability. Next we want to talk about is Spree Commerce which is a sort",
    "start": "860605",
    "end": "868860"
  },
  {
    "start": "862000",
    "end": "1067000"
  },
  {
    "text": "of shopping cart application written in Rails, it's what Chipotle uses to run their online store.",
    "start": "868860",
    "end": "875629"
  },
  {
    "text": "[NOISE] Um, so I- I don't have a CVE for this, the- they I don't know what happened to it.",
    "start": "875630",
    "end": "880740"
  },
  {
    "text": "They got rid of it it was weird. It existed and it didn't. I don't know what happened. Um, so the vulnerability goes like this,",
    "start": "880740",
    "end": "887155"
  },
  {
    "text": "\"By passing the right parameters while updating a user, that user is able to assign any existing role to themselves.\"",
    "start": "887155",
    "end": "893420"
  },
  {
    "text": "That means if you're Bob, and you're just you know, shopping for tacos on Chipotle's website,",
    "start": "893420",
    "end": "899240"
  },
  {
    "text": "and you really want to be the Chipotle administrator, then you just send a particularly crafted web request and you become the Chipotle administrator.",
    "start": "899240",
    "end": "905209"
  },
  {
    "text": "[NOISE] The vulnerability looked like this; they had some code that updated the user,",
    "start": "905210",
    "end": "911140"
  },
  {
    "text": "and this isn't Ruby so everything's sort of dynamically typed, and there was this params hash that just",
    "start": "911140",
    "end": "916399"
  },
  {
    "text": "gets the parameters for the incoming web request. So, if you were to index it with this colon user the symbol,",
    "start": "916400",
    "end": "922325"
  },
  {
    "text": "then you would get all of the all of the properties of the user passed in, and then what the function did, what the method did was update to the current user to have those parameters.",
    "start": "922325",
    "end": "931655"
  },
  {
    "text": "So, this is some magical Ruby dynamic stuff happening here which would be really difficult to do in a language like Rust which is statically typed.",
    "start": "931655",
    "end": "938230"
  },
  {
    "text": "Um, but sort of what goes wrong here is that the user passes in a property of role as a parameter then you just update the role in the user.",
    "start": "938230",
    "end": "948415"
  },
  {
    "text": "Sort of it just takes whatever the user passed in and saves that to the database. That's sort of, that's the other thing going on here in Rails,",
    "start": "948415",
    "end": "955100"
  },
  {
    "text": "everything is sort of tied to the database so if you update your user object it updates the user object in the database.",
    "start": "955100",
    "end": "960860"
  },
  {
    "text": "[NOISE] Now, uh, this is this is sort of one instance of a really big class of vulnerabilities that kind of impacted",
    "start": "960860",
    "end": "968335"
  },
  {
    "text": "the entire Rails world because this is the canonical way to write a Rails application. You sort of do this mass assignment thing, and everyone was like,",
    "start": "968335",
    "end": "974960"
  },
  {
    "text": "\"This is awesome that we can do this and Ruby and Rails\", until they realize oh the whole thing is actually a vulnerability which was termed a mass assignment vulnerability.",
    "start": "974960",
    "end": "982269"
  },
  {
    "text": "So, a bunch of web applications sort of had to stop doing the canonical thing to fix themselves. [NOISE] Now, how would it how would this look like in Rocket.",
    "start": "982270",
    "end": "989475"
  },
  {
    "text": "Well in Rocket if you wanted to take parameters from the outside world while as with everything else in Rocket they have to be typed.",
    "start": "989475",
    "end": "995385"
  },
  {
    "text": "So, if you wanted, oh sorry, this is the fix. This is what they did to fix it. They just deleted the role from the incoming parameters.",
    "start": "995385",
    "end": "1002530"
  },
  {
    "text": "[NOISE] So, that was pretty funny because well, you gotta see the issue. Okay. Yes. So, in Rocket if you wanted to actually do something like this,",
    "start": "1002530",
    "end": "1010829"
  },
  {
    "text": "well you'd have to type the incoming parameters, so it looked kind of like this, we have some structure call in a user,",
    "start": "1010830",
    "end": "1018120"
  },
  {
    "text": "and then you'd specify the field so say it had a name, and age, and you know, whatever other things. [NOISE] And then you declare your route over here,",
    "start": "1018120",
    "end": "1025329"
  },
  {
    "text": "and you would say I'm expecting some data, and the data is gonna have the parameter name user, and the type for that is going to be a form that is going to be serialized into a user.",
    "start": "1025330",
    "end": "1034794"
  },
  {
    "text": "All right, what Rocket will do is that will generate all the code for you so this derive from form on top of this user struct generates the deserialization code for a for a form wwwwwwwwwwwwwwwwwwwwwwwcoming in as a user,",
    "start": "1034795",
    "end": "1044834"
  },
  {
    "text": "and then you know, on line eight here that declares this user type to be of that form type which is what actually is going to",
    "start": "1044835",
    "end": "1051020"
  },
  {
    "text": "execute the deserialization automatically for you. So, there's no pop- if they pass in a role field deserialization will fail.",
    "start": "1051020",
    "end": "1058250"
  },
  {
    "text": "You can also ask it to succeed but in any case you're not going to keep that data. So, there's no way for you to ever",
    "start": "1058250",
    "end": "1063309"
  },
  {
    "text": "possibly save a role in the database if you do it this way. That would be really, really weird. [NOISE] Okay.",
    "start": "1063310",
    "end": "1068825"
  },
  {
    "start": "1067000",
    "end": "1286000"
  },
  {
    "text": "So, that's Spree Commerce. The last thing I want to talk about is GitLab. GitLab is a sort of GitHub open source GitHub alternative kind of thing.",
    "start": "1068825",
    "end": "1076850"
  },
  {
    "text": "[NOISE] And they had this cool feature where you could if you were an administrator impersonate any other user,",
    "start": "1076850",
    "end": "1083205"
  },
  {
    "text": "so you could see, you know, how they see their their GitHub their git repositories or whatever. [NOISE] They had a vulnerability associated with this.",
    "start": "1083205",
    "end": "1090070"
  },
  {
    "text": "This is CVE-2016-4340 impact 8.8. It was a 10 and they downgraded it to an 8.8.",
    "start": "1090070",
    "end": "1096120"
  },
  {
    "text": "I don't really know what it means at that point. But, yeah. [NOISE] And it goes like this it says, they had a blog post and they said,\" We discovered",
    "start": "1096120",
    "end": "1103110"
  },
  {
    "text": "a critical security flaw the \"impersonate\" feature was not properly secured. It was possible for any authenticated user,",
    "start": "1103110",
    "end": "1109415"
  },
  {
    "text": "administrator or not to \"log in\" as any other using as any other user including administrators.\" So, that meant that anyone could be anyone else on any GitLab instance, just pretty bad.",
    "start": "1109415",
    "end": "1118940"
  },
  {
    "text": "[NOISE] Um, so I want to just quickly show you sort of what authentication and authorization looks like in- in this in this Rails application.",
    "start": "1118940",
    "end": "1128130"
  },
  {
    "text": "You sort of saw what we would do in Rocket by having an admin type, that automatic authenticate and autho- and authorizes,",
    "start": "1128130",
    "end": "1134119"
  },
  {
    "text": "uh, if you would do this in something like Rails  it looks very, very different. Um, this is the attack by the way, uh, you log in,",
    "start": "1134119",
    "end": "1140395"
  },
  {
    "text": "you get an authenticity token, you then send a request, and that's it. That's literally the entire attack.",
    "start": "1140395",
    "end": "1147195"
  },
  {
    "text": "So, it's a very, very, very simple attack. You just need to grab a cookie from your browser, and then send a HTTP request with those parameters filled in,",
    "start": "1147195",
    "end": "1155980"
  },
  {
    "text": "and then you're whoever you want to be, you're that username. [NOISE] Okay. This is the code that sort of led to that.",
    "start": "1155980",
    "end": "1161475"
  },
  {
    "text": "Don't worry about most of it. Worry about this little part here. So, this is what actually does the authorization authentication.",
    "start": "1161475",
    "end": "1167909"
  },
  {
    "text": "This authorized the impersonator to sort of hopefully does what you expect, it checks the session and it tries to find that user,",
    "start": "1167910",
    "end": "1174640"
  },
  {
    "text": "and it checks if that user is an administrator. [NOISE] Um, in this impersonation controller thing they have this before action.",
    "start": "1174640",
    "end": "1182390"
  },
  {
    "text": "This is something it's supposed to execute before anything else executes. So, they say before action authorize the impersonator.",
    "start": "1182390",
    "end": "1189450"
  },
  {
    "text": "Okay. But they also have a skip before action which has under certain conditions don't do these things.",
    "start": "1189450",
    "end": "1195325"
  },
  {
    "text": "So, skip before action, do not authenticate the administrator, if you're doing it destroy.",
    "start": "1195325",
    "end": "1200830"
  },
  {
    "text": "Okay. So, destroy is actually going to be the method that's going to be sort of vulnerable here. So, what they've written is.",
    "start": "1200830",
    "end": "1207245"
  },
  {
    "text": "If this destroy method gets called at any point by Rails don't authenticate the admin, but do authenticate the impersonator.",
    "start": "1207245",
    "end": "1213210"
  },
  {
    "text": "[NOISE] It sounds okay I suppose. So, what sort of goes wrong sort of what this destroying method does is it you know,",
    "start": "1213210",
    "end": "1220235"
  },
  {
    "text": "checks if there's an impersonator logged in, and it sets the user to be able to be the parameter that was passed in by the impersonator,",
    "start": "1220235",
    "end": "1227085"
  },
  {
    "text": "and uh, you sort of redirect to wherever you need to go, you know, to the- the person you're impersonating's page.",
    "start": "1227085",
    "end": "1234540"
  },
  {
    "text": "[NOISE] And the hope is that this destroy method doesn't run unless the person is allowed to impersonate someone.",
    "start": "1234540",
    "end": "1239675"
  },
  {
    "text": "Because if it can, well then anyone can be anyone they want. And the problem is that this authorized impersonator method is is wrong",
    "start": "1239675",
    "end": "1246845"
  },
  {
    "text": "because if there is not an impersonator ID in the session, then if this case does run,",
    "start": "1246845",
    "end": "1252715"
  },
  {
    "text": "and you don't do any authentication at all. And because it's Ruby, you sort of get this nil which I don't know, presumably evaluates to true or something,",
    "start": "1252715",
    "end": "1261419"
  },
  {
    "text": "uh, and then this destroy method just kind of runs which is just pretty bad. So, clearly this would look nothing,",
    "start": "1261420",
    "end": "1267980"
  },
  {
    "text": "I mean we would just have like an impersonator type in Rocket and we would sort of guard this destroy method by that type and none of this would happen.",
    "start": "1267980",
    "end": "1274790"
  },
  {
    "text": "[NOISE] Okay. So, those are just three three sort of examples. I mean, there's there's just so many of these.",
    "start": "1274790",
    "end": "1280850"
  },
  {
    "text": "It happens all the time. These are three notable examples that impacted, you know, presumably millions and millions of people.",
    "start": "1280850",
    "end": "1286310"
  },
  {
    "start": "1286000",
    "end": "1403000"
  },
  {
    "text": "[NOISE] Okay. So, now I'm going to tell you about Rocket, that was a fancy animation, cool.",
    "start": "1286310",
    "end": "1291875"
  },
  {
    "text": "Now I'm going to tell you about Rocket. [NOISE] Um, show you \"Hello, world!\" of Rocket, which is basically an overview of the overview.",
    "start": "1291875",
    "end": "1299100"
  },
  {
    "text": "So, here's our \"Hello, world!\" This is the simplest Rocket application that we can write.",
    "start": "1299100",
    "end": "1304905"
  },
  {
    "text": "The thing up top here, we call it Route Attributes. Again, this is just a description of the matching conditions.",
    "start": "1304905",
    "end": "1311000"
  },
  {
    "text": "This one says, we're gonna handle all get requests to the route path. This thing down here is the handler.",
    "start": "1311000",
    "end": "1317059"
  },
  {
    "text": "It's the thing that's actually gonna do- gonna do the processing, and as we saw before, it's gonna include a bunch of types that actually validate the request.",
    "start": "1317060",
    "end": "1323850"
  },
  {
    "text": "And eventually it's gonna produce a response. In this case, it produces a string that is in the static- in the binary itself.",
    "start": "1323850",
    "end": "1331015"
  },
  {
    "text": "Okay. And that's it, that's really what Rocket applications look like. They're just composed of routes that look exactly like this.",
    "start": "1331015",
    "end": "1337845"
  },
  {
    "text": "And if you were to run this, you'd get this \"Hello, world!\" So, you'd just go to localhost 8- 8,000 and see \"Hello, world!\"",
    "start": "1337845",
    "end": "1344635"
  },
  {
    "text": "Pretty simple. Now, you should write just a little bit more. If you want to actually get this thing to compile and run, you need to tell Rocket about this route.",
    "start": "1344635",
    "end": "1352095"
  },
  {
    "text": "So, you do this by mounting the thing, and then, uh, you pass in the name of the route. In this- in this case, it's called, Hello.",
    "start": "1352095",
    "end": "1358475"
  },
  {
    "text": "And you call launch to actually start the application. So, the sequence is ignite, can turn on the Rocket,",
    "start": "1358475",
    "end": "1363785"
  },
  {
    "text": "mount to put- mounts on to put handlers on the Rocket and launch to actually launch Rocket.",
    "start": "1363785",
    "end": "1369465"
  },
  {
    "text": "In practice, if you have a Rocket, put things onto it before you ignite it, that's the general sequence of things.",
    "start": "1369465",
    "end": "1375440"
  },
  {
    "text": "Okay. So, you call a launch and that actually starts up the server, so Rocket sort of has its own server, and it also prints some emojis for fun.",
    "start": "1375440",
    "end": "1382060"
  },
  {
    "text": "And it looks like this, it sort of tells you all the configuration that it knows about.",
    "start": "1382060",
    "end": "1387355"
  },
  {
    "text": "If it finds any issues with a configuration, it will immediately abort. And if it doesn't, it'll start and even you can go to that localhost,",
    "start": "1387355",
    "end": "1394830"
  },
  {
    "text": "localhost 8,000 page and, and see your \"Hello, world!\" Okay. So, that's sort of the full simplest \"Hello,",
    "start": "1394830",
    "end": "1402409"
  },
  {
    "text": "world!\" application in Rocket. Yeah, there's a lot more to Rocket, uh, I'm gonna tell you about a couple of things,",
    "start": "1402410",
    "end": "1407950"
  },
  {
    "start": "1403000",
    "end": "1473000"
  },
  {
    "text": "I don't have time to tell you about everything. I'm gonna tell you about three features. So, the first is Dynamic Paths,",
    "start": "1407950",
    "end": "1414110"
  },
  {
    "text": "and Dynamic Paths we already saw. I'm just gonna tell you about them in a bit more detail. I'll show you how this thing's actually working. So, Dynamic Paths are those things in brackets at the top there,",
    "start": "1414110",
    "end": "1422830"
  },
  {
    "text": "at the top of the route. And parameters and brackets will match any text that's applied in that URL segment.",
    "start": "1422830",
    "end": "1429705"
  },
  {
    "text": "So, if you do /bob/5 you know 50, then name will be Bob and age will be 50.",
    "start": "1429705",
    "end": "1435830"
  },
  {
    "text": "And these things are- these things are matched to function arguments. So, it has to have a function argument of the same name.",
    "start": "1435830",
    "end": "1442955"
  },
  {
    "text": "If you have a function argument with a different name. So, let's say we change age to number, then you get a- an error at compile time.",
    "start": "1442955",
    "end": "1449720"
  },
  {
    "text": "And the error tries to be very helpful, it'll tell you, \"Hey, you gave me this age, uh, variable- this age parameter",
    "start": "1449720",
    "end": "1456170"
  },
  {
    "text": "but you didn't say- have anything in the function declaration. Here- here's what your function declaration actually looks like.",
    "start": "1456170",
    "end": "1461440"
  },
  {
    "text": "So, go fix it.\" So we fix that. Um, you know, then everything works okay.",
    "start": "1461440",
    "end": "1467735"
  },
  {
    "text": "Every parameter is also associated with a type, this is just Rust. Uh, and in particular in Rocket,",
    "start": "1467735",
    "end": "1475325"
  },
  {
    "start": "1473000",
    "end": "1598000"
  },
  {
    "text": "every type has to implement a certain interface, in Rust, we call them traits.",
    "start": "1475325",
    "end": "1480550"
  },
  {
    "text": "But you can think about them as Java interfaces or go interfaces or interfaces basically everywhere if you have Haskell type classes.",
    "start": "1480550",
    "end": "1487529"
  },
  {
    "text": "Um, and any type that implements the FromParam interface is allowed in that position.",
    "start": "1487530",
    "end": "1493270"
  },
  {
    "text": "That includes your own types. So, here, Rocket has implemented them for the sort of standard library type string and u8 which is an eight-bit integer.",
    "start": "1493270",
    "end": "1500875"
  },
  {
    "text": "But, you can have your own types, we saw like user and paste ID before. So, you can implement them for whatever you want.",
    "start": "1500875",
    "end": "1507679"
  },
  {
    "text": "And then, sort of when this executes, when this- when- when this- when there is a request that matches this- these parameters,",
    "start": "1507680",
    "end": "1514450"
  },
  {
    "text": "this get/name/age, then Rocket will execute the FromParam implementation which actually does the validation and conversion.",
    "start": "1514450",
    "end": "1522225"
  },
  {
    "text": "So, in this case, for the age parameter it'll actually check if it can parse it as an eight-bit integer. If it can, it'll parse it as an eight-bit integer,",
    "start": "1522225",
    "end": "1528605"
  },
  {
    "text": "and then pass it in as the age parameter. And so this is how we get sort of- in this particular case a tiny form of input validation for segments and parameters.",
    "start": "1528605",
    "end": "1537570"
  },
  {
    "text": "So, one place where this is kind of fun, uh, sort of what this is the- totally applicable is in preventing directory traversal attacks.",
    "start": "1537570",
    "end": "1544180"
  },
  {
    "text": "So, if we have this code here which is going to fetch a- a file from our file system.",
    "start": "1544180",
    "end": "1550145"
  },
  {
    "text": "So, here that gets the- the attribute says that we want any path the dot dot says not only",
    "start": "1550145",
    "end": "1556429"
  },
  {
    "text": "give me this segment but every other segment thereafter. And the type of that thing is PathBuf which is a heap allocated path.",
    "start": "1556430",
    "end": "1563005"
  },
  {
    "text": "And Rocket's implementation for FromParam is actually going to verify that the path is safe to be used as a suffix to any other path.",
    "start": "1563005",
    "end": "1571550"
  },
  {
    "text": "In particular, uh, sort of what Dan was alluding to before, it will ensure that there are no dot dots in that path. It'll do, uh, it'll- it'll make that path canonical so you can use it as a suffix.",
    "start": "1571550",
    "end": "1580195"
  },
  {
    "text": "And so, that means that we can write a static file server literally in four lines like this. We just take the path, and then we prepend it with another path,",
    "start": "1580195",
    "end": "1588405"
  },
  {
    "text": "and we return that, if it exists. And that's it. So this is how you write a sort of four-line, uh,",
    "start": "1588405",
    "end": "1593910"
  },
  {
    "text": "static file server in Rocket that is immune to directory traversal attacks. Which is pretty fun.",
    "start": "1593910",
    "end": "1599285"
  },
  {
    "start": "1598000",
    "end": "1677000"
  },
  {
    "text": "Okay. So that's pretty, all I want to say about. There- it's not too difficult to sort of do this. The name parameter thing, uh,",
    "start": "1599285",
    "end": "1605120"
  },
  {
    "text": "where it gets much more interesting in sort of trying to be arbitrary about the input validation that you're trying to do. And the mechanism that Rocket has for this,",
    "start": "1605120",
    "end": "1612170"
  },
  {
    "text": "uh, we call Request Guards. So, Request Guards I think are the most interesting part about Rocket that sort of- I haven't seen any other web programming,",
    "start": "1612170",
    "end": "1619270"
  },
  {
    "text": "that does anything like Request Guards, which is really fun. So, what are Requests Guards? So, Request Guards are these parameters that",
    "start": "1619270",
    "end": "1626840"
  },
  {
    "text": "appear in your route that don't have a matching parameter in the attribute. So, we here we have get/admin.",
    "start": "1626840",
    "end": "1633804"
  },
  {
    "text": "A- admin is not in brackets, thus it's not sort of one of these dynamic parameters. And, but we still have this admin parameter inside of the function.",
    "start": "1633805",
    "end": "1642664"
  },
  {
    "text": "And because it doesn't have a matching parameter in the attribute, it's called a Request Guard. [NOISE] And you can have as many of these as you want,",
    "start": "1642665",
    "end": "1648905"
  },
  {
    "text": "here we just have one. We can have as many of these as you want. And the restriction on these types is that they have to implement a different trait,",
    "start": "1648905",
    "end": "1656990"
  },
  {
    "text": "a different type class, a different interface called FromRequest. And it can do whatever it wants.",
    "start": "1656990",
    "end": "1662399"
  },
  {
    "text": "Just like, we saw before we had a user, and then we had this admin type. Here, we have an admin user type which presumably means that it's just an admin that's also a user.",
    "start": "1662400",
    "end": "1669845"
  },
  {
    "text": "And it'll- Rocket will run these for you automatically and it will only execute your function. Your handler if these validations hold true.",
    "start": "1669845",
    "end": "1677140"
  },
  {
    "start": "1677000",
    "end": "1882000"
  },
  {
    "text": "Okay. So, yeah. So, these Request Guards, they validate the incoming request and they protect handlers",
    "start": "1677140",
    "end": "1682549"
  },
  {
    "text": "from running under, you know, erroneous conditions. The guards may fail I- if you don't have an admin logged in.",
    "start": "1682550",
    "end": "1689270"
  },
  {
    "text": "Then, the guard will fail and the request won't be processed any further because that indicates that there's,",
    "start": "1689270",
    "end": "1695090"
  },
  {
    "text": "you know, something wrong with incoming request. The guard may also forward which indicates that it has failed,",
    "start": "1695090",
    "end": "1700550"
  },
  {
    "text": "sort of, for now. But, something else might be able to- to process or- this request in the future.",
    "start": "1700550",
    "end": "1705865"
  },
  {
    "text": "And I'll make this a little clearer in just a second. So, let's say we have, sort of, another- uh, another route here.",
    "start": "1705865",
    "end": "1712655"
  },
  {
    "text": "So, you know that they both match get/admin. So, it's sort of there's no ordering with just get/admin so the given ordering,",
    "start": "1712655",
    "end": "1720750"
  },
  {
    "text": "you have to- you have to- you call these colliding routes. To give an ordering, you have to give them a rank,",
    "start": "1720750",
    "end": "1725800"
  },
  {
    "text": "and if you don't give them a rank so- so you just had this. Then, um, so you can give a rank to sort of fix it.",
    "start": "1725800",
    "end": "1732480"
  },
  {
    "text": "If you don't give it a rank, if you have just this, then Rocket will sort of complain and tell you that there are colliding routes.",
    "start": "1732480",
    "end": "1738190"
  },
  {
    "text": "And it has to do this at runtime because routes can be generated, uh, dynamically. So unfortunately, we can't do it at compile time,",
    "start": "1738190",
    "end": "1743680"
  },
  {
    "text": "we have to do it at runtime. But, before your application does anything, all of this stuff is checked. So, this is again sort of trying to fix misconfiguration issues,",
    "start": "1743680",
    "end": "1750365"
  },
  {
    "text": "and it will tell you exactly which routes are colliding and, you know, it'll give you a hint about how to fix it, particularly using ranking.",
    "start": "1750365",
    "end": "1757310"
  },
  {
    "text": "Okay. So, if we go back and rank these. Uh, Rocket will try colliding routes in ascending rank order.",
    "start": "1757310",
    "end": "1763070"
  },
  {
    "text": "So, first it'll try the route at the top, and then it'll try the next route. So what's gonna happen here,",
    "start": "1763070",
    "end": "1768190"
  },
  {
    "text": "is if someone makes a request to the /admin path, a get request. Then that first route will run which requires their- there to be an admin user logged in.",
    "start": "1768190",
    "end": "1777375"
  },
  {
    "text": "So that's going to do something like check the cookies for a session ID you know, check the database for that session,",
    "start": "1777375",
    "end": "1783685"
  },
  {
    "text": "check that- that identifies a user, check the- the role for that user is an admin and if so sort of deserialize the stuff in a database into this admin user type and finally return it.",
    "start": "1783685",
    "end": "1791555"
  },
  {
    "text": "So, do all- all the things that needs to do. If that forwards, that means, try the next thing, try the next route in the chain.",
    "start": "1791555",
    "end": "1798910"
  },
  {
    "text": "If it- if it fails, then it won't try anything else. So in this case, if it forwards, it'll try that route at the bottom.",
    "start": "1798910",
    "end": "1804900"
  },
  {
    "text": "This one also has sort of a requirement that there is a user logged in on an admin user, but sort of just a regular user.",
    "start": "1804900",
    "end": "1811215"
  },
  {
    "text": "And, uh, so in this case, if there's a regular user logged in, it'll execute that second route, and if it can't,",
    "start": "1811215",
    "end": "1816930"
  },
  {
    "text": "if it forwards, it'll try the next one. If there is no next one, it'll 404. If it fails, it'll sort of, uh,",
    "start": "1816930",
    "end": "1822670"
  },
  {
    "text": "404 immediately or 400 depending on how it's sort of implemented. And you can sort of extend this further,",
    "start": "1822670",
    "end": "1828310"
  },
  {
    "text": "so we have a third route. If this user type forwards, then it'll go to this third route,",
    "start": "1828310",
    "end": "1833950"
  },
  {
    "text": "this rank three route. In this case, there are no requirements for the request. There's no- there are no types in the input which means",
    "start": "1833950",
    "end": "1840179"
  },
  {
    "text": "that you don't need any sort of validation, this will always run. So, if you imagine this sort of a real application,",
    "start": "1840180",
    "end": "1845210"
  },
  {
    "text": "this is sort of implementing, authorization, and authentication. If there is an admin user presumably given the admin panel, the first thing runs.",
    "start": "1845210",
    "end": "1852235"
  },
  {
    "text": "If there is a regular user, you sort of give him, you know, you tell him, \"Hey, you need to be an administrator to actually access the admin panel.\"",
    "start": "1852235",
    "end": "1858470"
  },
  {
    "text": "And if there is no one logged in, then you redirect them to the log-in page. So, this is sort of implementing authorization.",
    "start": "1858470",
    "end": "1865095"
  },
  {
    "text": "Well, not sort of this is implementing, authorization, and authentication, and sort of the policy for what it means to have",
    "start": "1865095",
    "end": "1870600"
  },
  {
    "text": "certain roles for an admin panel in one go. And Rocket is kind of doing everything for you. You just sort of write the happy case.",
    "start": "1870600",
    "end": "1876830"
  },
  {
    "text": "If there is an admin, do this. If there aren't an admin, but there's a user, do this. If there is nothing, then do this other thing.",
    "start": "1876830",
    "end": "1882720"
  },
  {
    "start": "1882000",
    "end": "2032000"
  },
  {
    "text": "Okay. So, that's sort of a combination of request guards and forwarding, which I think is sort of the most interesting part here.",
    "start": "1882720",
    "end": "1889090"
  },
  {
    "text": "Now, the last sort of feature I wanna talk about is Typed URIs, and this is sort of looking into how Rocket",
    "start": "1889090",
    "end": "1894330"
  },
  {
    "text": "tries to try to help you in terms of correctness. So, let's say you have a route that looks like this.",
    "start": "1894330",
    "end": "1899465"
  },
  {
    "text": "You're implementing some kind of shopping cart or something, and you allow people to get an item of a certain kind so like a shirt or something,",
    "start": "1899465",
    "end": "1906895"
  },
  {
    "text": "and of a certain id like 23 or something. So, you're gonna run this, you know, someone will request this product with that id,",
    "start": "1906895",
    "end": "1912860"
  },
  {
    "text": "you're gonna return them the item, and that's gonna render it somehow. So, if you want to get URL to a particular product,",
    "start": "1912860",
    "end": "1920025"
  },
  {
    "text": "well, you need to have a valid product name and a valid id. So, one thing you could do is you can just, you know,",
    "start": "1920025",
    "end": "1926130"
  },
  {
    "text": "create this random string so you can sort of, uh, do string interpolation with, uh, the word shirt and with the number of 2417 and get a string.",
    "start": "1926130",
    "end": "1934295"
  },
  {
    "text": "But shirt may no longer be your product like so you stop using shirt as a product or, you know, this URL just changed completely.",
    "start": "1934295",
    "end": "1941235"
  },
  {
    "text": "Uh, instead of inventory, you had it somewhere else. And who knows if 2417 is a valid id?",
    "start": "1941235",
    "end": "1947335"
  },
  {
    "text": "So, sort of the problem here is we wanna create these URIs, but we also wanna make sure these URIs are correct. And to do that,",
    "start": "1947335",
    "end": "1953570"
  },
  {
    "text": "we're gonna use the type information when you use the fact that sh- product has to be of the type product, an id has to be a usize to sort of create valid ids.",
    "start": "1953570",
    "end": "1961679"
  },
  {
    "text": "So, instead of doing this format thing, we're gonna do this URI thing. We're gonna say URI bang for the route named item,",
    "start": "1961680",
    "end": "1968255"
  },
  {
    "text": "parsed in the type parameters, product shirt, and the number 2417. And what Rocket is gonna do is gonna,",
    "start": "1968255",
    "end": "1974630"
  },
  {
    "text": "you know, check these things against the actual route. So, sort of if, if you, if you wanna pass in th- the names,",
    "start": "1974630",
    "end": "1980850"
  },
  {
    "text": "you can do that, you can flip them around. But if you get them wrong, so if you do item equals product shirt. And you can see that there's no item parameter in the URL,",
    "start": "1980850",
    "end": "1988860"
  },
  {
    "text": "then Rocket will complain. It will say, \"You tried to pass in a parameter named item, but there's no such parameter in the route.\"",
    "start": "1988860",
    "end": "1995085"
  },
  {
    "text": "And so this thing will just fail at compile time. If you get the wrong type, you're gonna get the same issue. You're gonna get not the same error, but a similar error.",
    "start": "1995085",
    "end": "2003180"
  },
  {
    "text": "And, uh, finally, if everything sort of works out okay, you're gonna get this, uh, you're gonna get this string at compile time.",
    "start": "2003180",
    "end": "2009304"
  },
  {
    "text": "So all of this is sort of happening at compile time, the type checking is happening at compile time, the name of URL parameter checking is happening at compile time.",
    "start": "2009305",
    "end": "2015990"
  },
  {
    "text": "So you really can't get URIs wrong. If you change, you know, this route to have a different URI later,",
    "start": "2015990",
    "end": "2021304"
  },
  {
    "text": "this, this thing is guaranteed to fail to compile, if it's changed in a type-incompatible way. So, it's just the sort of a small way,",
    "start": "2021305",
    "end": "2027899"
  },
  {
    "text": "but a very helpful way that Rocket tries to, you know, fix correctness issues in applications.",
    "start": "2027900",
    "end": "2033165"
  },
  {
    "start": "2032000",
    "end": "2107000"
  },
  {
    "text": "Okay, so that's most of what I want to say about, about Rocket. Now, there is one last thing that I sort of mentioned",
    "start": "2033165",
    "end": "2039590"
  },
  {
    "text": "in this introduction thing which was performance. So, the last thing I want to talk about is sort of how",
    "start": "2039590",
    "end": "2045340"
  },
  {
    "text": "Rocket does in comparison to other web frameworks. And, uh, so I compared against sort of what people are using.",
    "start": "2045340",
    "end": "2052560"
  },
  {
    "text": "Nowadays, there's no Java, which presumably is what people are using in Enterprise. But it's, when I compare against Java my guess is,",
    "start": "2052560",
    "end": "2058280"
  },
  {
    "text": "it's somewhere between what I did compare it against. What I did compare it against are these sort of free web frameworks.",
    "start": "2058280",
    "end": "2064740"
  },
  {
    "text": "Rails, which is the Ruby web framework, Express, which is the Node web framework, and Flask, which is a Python web framework.",
    "start": "2064740",
    "end": "2070820"
  },
  {
    "text": "Sort of a minimalistic Python web framework, and then Rocket. So, this is a measure of throughput.",
    "start": "2070820",
    "end": "2077110"
  },
  {
    "text": "This is on a sort of 12 core eight, nine-year-old machine. So, presumably if you run this on your own servers,",
    "start": "2077110",
    "end": "2083379"
  },
  {
    "text": "you're gonna get, you know, four, five, 6x what we see here. Uh, yeah. So, this is throughput.",
    "start": "2083380",
    "end": "2088760"
  },
  {
    "text": "So, Rocket gets around 38,000 requests per second here. Express is the next leader,",
    "start": "2088760",
    "end": "2094149"
  },
  {
    "text": "this is Node, this is Javascript. This is around 20, 27 or so. So Rocket gets around 12,000 more requests per second,",
    "start": "2094150",
    "end": "2102085"
  },
  {
    "text": "and Express ended, you know, both of them do significantly better, better than what you get in, in either Rails or Flask.",
    "start": "2102085",
    "end": "2107970"
  },
  {
    "start": "2107000",
    "end": "2228000"
  },
  {
    "text": "So, this is okay. Really, we really see really big differences, and this is a lot, there's a lot to do with the language that it's written in,",
    "start": "2107970",
    "end": "2114515"
  },
  {
    "text": "is when we look at latency. So these are the numbers for latency. This is average latency.",
    "start": "2114515",
    "end": "2119620"
  },
  {
    "text": "So, Rails, Express, and Flask, all have sort of, this is on local network by the way.",
    "start": "2119620",
    "end": "2124755"
  },
  {
    "text": "Obviously, you're not gonna see sub-microsecond latency on, on a sort of, uh, on the Internet, that's, that'll be awesome, but, uh, not gonna see that anytime soon.",
    "start": "2124755",
    "end": "2131345"
  },
  {
    "text": "Um, this is on a local network, uh, sort of Rails, Express, and Flask don't do,",
    "start": "2131345",
    "end": "2137010"
  },
  {
    "text": "don't do so great. Um, but what's sort of even more shocking is what the tail looks like,",
    "start": "2137010",
    "end": "2142730"
  },
  {
    "text": "what the tail latency looks like. So, if we look at, if we look at the 99.99% tail, or 99.95% tail, we see this,",
    "start": "2142730",
    "end": "2150000"
  },
  {
    "text": "which is really rather extraordinary. I mean it's so hard to read that. I had to change it to this log scale here to kind of make sense of this.",
    "start": "2150000",
    "end": "2157424"
  },
  {
    "text": "So, Rocket is the only thing with still sub-microsecond latency and everything else is magnitudes worse.",
    "start": "2157425",
    "end": "2164410"
  },
  {
    "text": "So, you know, Rocket and Rust don't have a garbage collector. There was never garbage collection pause.",
    "start": "2164410",
    "end": "2169660"
  },
  {
    "text": "My guess is that we're seeing this because Rails, Express, and Flask, uh, well, all of these things are, have garbage collectors.",
    "start": "2169660",
    "end": "2175565"
  },
  {
    "text": "So, my guess is that we just caught them at their garbage collection time, and that's when we see this really, really bad latency, is really build with bad tail latency.",
    "start": "2175565",
    "end": "2182525"
  },
  {
    "text": "Um, yes, so Rocket really just does significant, significantly better in this case. So these are, uh, this is,",
    "start": "2182525",
    "end": "2188740"
  },
  {
    "text": "these are the two combined things. So there's average latency and max latency just to give you an overview of comparison.",
    "start": "2188740",
    "end": "2194410"
  },
  {
    "text": "This is really where Rocket shines, um, in latency. It also has much higher throughput than effectively everything else,",
    "start": "2194410",
    "end": "2199985"
  },
  {
    "text": "but it has really much better latency than everything else. These are the three graphs, just to give an overview of this thing.",
    "start": "2199985",
    "end": "2206020"
  },
  {
    "text": "It looks like, um, we have a lot of plans to make Rocket significantly faster. This is sort of very preliminary with",
    "start": "2206020",
    "end": "2212245"
  },
  {
    "text": "almost zero sort of performance optimization effort. I mean, no weird performance optimizations effort.",
    "start": "2212245",
    "end": "2217500"
  },
  {
    "text": "This is just write reasonable code in, and, you know, do the right thing kind of thing. Um, whereas something like Rails has had",
    "start": "2217500",
    "end": "2224345"
  },
  {
    "text": "almost a decade of performance work and this stuff put into it. Okay. So that's, that really is all I want to say about Rocket.",
    "start": "2224345",
    "end": "2231965"
  },
  {
    "text": "If you want to learn more about Rocket, uh, oh, that's not all I want to say. There's a bunch of stuff here. Uh, there's a bunch of stuff I didn't talk about.",
    "start": "2231965",
    "end": "2238924"
  },
  {
    "text": "There's a bunch of stuff that it, that it does, and I just cannot cover in the time that I have. In particular, I talked a lot about CSRF and cross-site scripting prevention,",
    "start": "2238925",
    "end": "2247170"
  },
  {
    "text": "and that comes through it's type, Typed Templating engine. Sort of these are templates that get compiled, and when they compile,",
    "start": "2247170",
    "end": "2252480"
  },
  {
    "text": "they're guaranteed to be immune to CSRF and cross-site scripting vulnerabilities. There's a lot of stuff that happens yo- we type everything.",
    "start": "2252480",
    "end": "2257994"
  },
  {
    "text": "So, you type all the data, you get automatic deserialization. You sort of saw that with forms. We type query thing, strings,",
    "start": "2257995",
    "end": "2264270"
  },
  {
    "text": "we type database connections, and there's bi- built-in unit integration testing frameworks. So these are all things that, you know,",
    "start": "2264270",
    "end": "2269855"
  },
  {
    "text": "you kind of want if you're going to write production applications. And we have at least hundreds of production users. So, you know, they like these things.",
    "start": "2269855",
    "end": "2275830"
  },
  {
    "start": "2274000",
    "end": "2314000"
  },
  {
    "text": "Okay, so this is the website. If you wanna learn more about Rocket, you can go to this website, that's rocket.rs.",
    "start": "2275830",
    "end": "2281510"
  },
  {
    "text": "There's a guide, there's a tutorial, there is documentation, um, API docs, there's news and there's a link to the GitHub repository",
    "start": "2281510",
    "end": "2288790"
  },
  {
    "text": "Rocket is MIT and Apache 2.0 license, you choose. That's me again, I'm Sergio.",
    "start": "2288790",
    "end": "2294080"
  },
  {
    "text": "That's my email address, and thank you so much for listening. [APPLAUSE]",
    "start": "2294080",
    "end": "2303420"
  },
  {
    "text": "Any, uh, any questions? Yeah.",
    "start": "2303420",
    "end": "2312197"
  },
  {
    "text": "Do you [inaudible] or in C++. Yeah, um, a little bit.",
    "start": "2312197",
    "end": "2317660"
  },
  {
    "start": "2314000",
    "end": "2437000"
  },
  {
    "text": "Yeah. So the question is can I compare with some web frameworks and go or what was your language C++?",
    "start": "2317660",
    "end": "2324320"
  },
  {
    "text": "Uh, C++. [inaudible] Yeah, so C++ is sort of a completely different world because",
    "start": "2324320",
    "end": "2330650"
  },
  {
    "text": "it's not memory safe, right. So, if you write your thing in C++ and you expose it to the world on the Internet sort of,",
    "start": "2330650",
    "end": "2336410"
  },
  {
    "text": "it's probably not a great idea. So, I would never write a web application with C++ for that very reason. So, that's really different class of thing.",
    "start": "2336410",
    "end": "2343460"
  },
  {
    "text": "Um, Now Go is, Go is memory safe and it's sort of kind of built to do network applications. It's a really good thing to compare it against.",
    "start": "2343460",
    "end": "2350000"
  },
  {
    "text": "When I did performance measurements, it's the thing that comes closest to Rocket. In fact, it beats Rocket on some throughput tests.",
    "start": "2350000",
    "end": "2355070"
  },
  {
    "text": "It still has the same latency issues, Rocket is just really sort of far again, far ahead in terms of latency, um, but Go has had a lot of effort put",
    "start": "2355070",
    "end": "2362299"
  },
  {
    "text": "into sort of throughput and so it does really, really well. Um, now the big difference is that sort",
    "start": "2362300",
    "end": "2369299"
  },
  {
    "text": "of all of this stuff that I talked about that Rocket does, you can sort of emulate in Go a little bit like this forms parsing thing,",
    "start": "2369300",
    "end": "2375900"
  },
  {
    "text": "you can sort of emulate it in Go, but it's all dynamic. There is no compile time anything that tells you that this is happening,",
    "start": "2375900",
    "end": "2381830"
  },
  {
    "text": "it's all through sort of dynamic introspection. And so you can have type errors at runtime because",
    "start": "2381830",
    "end": "2387220"
  },
  {
    "text": "someone passed in the wrong form and you didn't specify the right values in your, you know, in your form attributes or whatever.",
    "start": "2387220",
    "end": "2392400"
  },
  {
    "text": "Um, yeah, so the really, really big difference is that and nothing really has this property but you get all of these checks at compile time.",
    "start": "2392400",
    "end": "2398950"
  },
  {
    "text": "There is no performance degradation as a result, and you have guarantees if your thing compiles, that's the really, really big difference here.",
    "start": "2398950",
    "end": "2405540"
  },
  {
    "text": "Hi. I have couple of questions. You can take one out of your questions. Yeah.",
    "start": "2405540",
    "end": "2412310"
  },
  {
    "text": "Uh, I think there are two problems here. One is, you know, a framework providing the right syntax and",
    "start": "2412310",
    "end": "2418390"
  },
  {
    "text": "semantics to write secure code and the second one is they're developers not using it. Yeah. Um, so this provides very tight syntax and semantics to write secure code.",
    "start": "2418390",
    "end": "2427430"
  },
  {
    "text": "Um, if the developer doesn't write those policies uh, you know, you mentioned request guards,",
    "start": "2427430",
    "end": "2433050"
  },
  {
    "text": "typed URIs so the functions with the right arguments and all that, um, does that prevent that?",
    "start": "2433050",
    "end": "2438410"
  },
  {
    "start": "2437000",
    "end": "2599000"
  },
  {
    "text": "Yeah, I mean if you do it wrong, it's going to be wrong, that's for sure. Uh, yeah, so we have no way of saying like definitely do the right thing.",
    "start": "2438410",
    "end": "2446465"
  },
  {
    "text": "Now there are some things that they can't escape. They can't escape cross site scripting, you know, validation.",
    "start": "2446465",
    "end": "2451790"
  },
  {
    "text": "They can't escape CSRF, they can't escape injection safety. Um, for arbitrary policies,",
    "start": "2451790",
    "end": "2457595"
  },
  {
    "text": "yeah they they can do the wrong thing. If you're gonna validate a user and you're going to write the wrong code to validate that user, we can't really do anything except give them",
    "start": "2457595",
    "end": "2463799"
  },
  {
    "text": "a library that does it for them so they can't get it wrong. Now, the thing where I still, so so let me let me do sort of two things here.",
    "start": "2463800",
    "end": "2470605"
  },
  {
    "text": "One, let me sort of give you anecdotes and then two, let me sort of give you a more formalized version of these anecdotes. So one, what I've seen is that when people do the wrong thing,",
    "start": "2470605",
    "end": "2478835"
  },
  {
    "text": "they come in IRC, they come on, you know, they come chat with me, and they say hey I did this thing.",
    "start": "2478835",
    "end": "2483869"
  },
  {
    "text": "It feels really, really wrong, I'm allocating everywhere and, uh, I don't know and I'll take a look at their code and it will be vulnerable.",
    "start": "2483870",
    "end": "2490410"
  },
  {
    "text": "And so there is something to say about sort of the way that Rocket forces you to do this validation in the first place,",
    "start": "2490410",
    "end": "2496740"
  },
  {
    "text": "gets people to think that they might be doing the wrong thing or that what they're doing is sort of, you know, very risky. And so, sort of anecdotally I've seen a lot of people that do the right thing,",
    "start": "2496740",
    "end": "2505815"
  },
  {
    "text": "that don't say anything but say, hey, here's the application. People do the wrong thing that say this feels weird, what's going on?",
    "start": "2505815",
    "end": "2511250"
  },
  {
    "text": "And they're doing the wrong thing. Now sort of more formally speaking, I think something that Rocket really enables and something that I really want to explore more,",
    "start": "2511250",
    "end": "2517135"
  },
  {
    "text": "is that it lets you sort of containerize, I hate that word. Sort of let me, let me not use that word hate that word.",
    "start": "2517135",
    "end": "2522674"
  },
  {
    "text": "It lets you type your validation. There's nothing else that says, given a type user, I know all of these things must be true.",
    "start": "2522675",
    "end": "2529365"
  },
  {
    "text": "And so if you're you know a company, then all you have to do is have a library that says validation,",
    "start": "2529365",
    "end": "2534580"
  },
  {
    "text": "Rocket validations and then ship that across your application. So you have, you know, three, four or five most trusted developers write these types and everyone else just uses them.",
    "start": "2534580",
    "end": "2542775"
  },
  {
    "text": "And because it's so easy to use a type that's given to you with Rocket, then there's like really little incentive not",
    "start": "2542775",
    "end": "2548200"
  },
  {
    "text": "to and thus much more probability of they're going to get it right. So sort of that's an argument towards reducing the amount of code that has to be written,",
    "start": "2548200",
    "end": "2554925"
  },
  {
    "text": "and the amount of, and increasing the amount of code reused to getting the thing right. Yeah. Thanks. Yeah. Yeah.",
    "start": "2554925",
    "end": "2561309"
  },
  {
    "text": "So, I have a couple of questions starts with first one. Uh, So framework related vulnerabilities are getting primed",
    "start": "2561310",
    "end": "2569430"
  },
  {
    "text": "nowadays like charts and Spring and so on so forth. So, are you getting a similar trend in Rocket?",
    "start": "2569430",
    "end": "2576990"
  },
  {
    "text": "Uh, trend. Sorry, I missed the first part of the question. Like, framework related vulnerabilities reporting by third-party researcher or",
    "start": "2576990",
    "end": "2585890"
  },
  {
    "text": "open source projects like Spring's charts, and et cetera.",
    "start": "2585890",
    "end": "2590940"
  },
  {
    "text": "So those are getting more concentrated towards the vulnerabilities disclosures,",
    "start": "2590940",
    "end": "2596390"
  },
  {
    "text": "so similarly do you seeing any trend in Rocket? Towards having like security vulnerabilities being disclosed.",
    "start": "2596390",
    "end": "2602860"
  },
  {
    "start": "2599000",
    "end": "2808000"
  },
  {
    "text": "Well, we've had one security vulnerability thus far and it was in 0.1. Um, and so yeah,",
    "start": "2602860",
    "end": "2609150"
  },
  {
    "text": "so people are letting us know there's something wrong with Rocket. And it was like an Edge case with IE,",
    "start": "2609150",
    "end": "2614504"
  },
  {
    "text": "like IE6 or something in fact in the directory traversal prevention stuff. Um, so we fixed that immediately.",
    "start": "2614504",
    "end": "2620205"
  },
  {
    "text": "Uh, so yeah, I mean no one else has found a security problem and that doesn't mean they don't exist. Look at it, take a look. Uh, Dan,",
    "start": "2620205",
    "end": "2626900"
  },
  {
    "text": "Dan was concerned about our cookie handling code, so we made it more robust. I'm still not convinced that there was an exploit there but now it's more robust.",
    "start": "2626900",
    "end": "2632970"
  },
  {
    "text": "Um, so yeah I mean we had one and a half sort of reports. You know, my count is about 10,000 users using Rocket,",
    "start": "2632970",
    "end": "2641650"
  },
  {
    "text": "so either they're not telling us or they're not finding issues, I don't know.",
    "start": "2641650",
    "end": "2646724"
  },
  {
    "text": "Um, second question is, do you use any third parties bundled with the framework? Sorry, third party?",
    "start": "2646725",
    "end": "2653335"
  },
  {
    "text": "Like log for the any of the common libraries. For logging? Logging or similar do you have any third parties bundled within the framework?",
    "start": "2653335",
    "end": "2662234"
  },
  {
    "text": "Uh, we don't. Um, but there are several companies that have written their own and not released them.",
    "start": "2662235",
    "end": "2667555"
  },
  {
    "text": "Uh, so yeah we don't have anything that Rocket ships but if someone has already written it or if you want to write it,",
    "start": "2667555",
    "end": "2674250"
  },
  {
    "text": "you want to contribute it, we'll put it in Rocket. It is a milestone issue for version 0.5. There will be some, some logging solutions soon enough.",
    "start": "2674250",
    "end": "2681830"
  },
  {
    "text": "Uh, next question is if one want to define framework level defini- definitions.",
    "start": "2681830",
    "end": "2687680"
  },
  {
    "text": "Like you said get request is there. If I want to restrict myself to the post only when I'm defining application or creating application.",
    "start": "2687680",
    "end": "2694810"
  },
  {
    "text": "[OVERLAPPING] Yeah. Is there any such configuration exists in the Rocket? So you only want post? Yes. Routes. Um, yeah, I mean. Yeah, a really good question.",
    "start": "2694810",
    "end": "2705579"
  },
  {
    "text": "Yeah, so sort of is there any application level validation that you can do in Rocket? And the example is can I restrict my my Rocket application to only have post requests,",
    "start": "2705580",
    "end": "2713809"
  },
  {
    "text": "to only take in post requests? Yeah, so there are two things you could do. So one you could catch it before your application even launches",
    "start": "2713810",
    "end": "2719780"
  },
  {
    "text": "by- Rocket lets you inspect all of the routes that have been registered, so you could just iterate through the routes and say oh that's a,",
    "start": "2719780",
    "end": "2725570"
  },
  {
    "text": "that's not a post route and just cancel there. Alternatively you, if you want to sort of stop it when the request happens,",
    "start": "2725570",
    "end": "2731505"
  },
  {
    "text": "then you have this middleware type stuff, and you can just check is this a post request or not and if it's not, just cancel it.",
    "start": "2731505",
    "end": "2737720"
  },
  {
    "text": "Um, yeah so you could do it sort of at the beginning or dynamically. Yeah, you can do whatever you want. Uh, next question is, uh, [LAUGHTER] sorry.",
    "start": "2737720",
    "end": "2747405"
  },
  {
    "text": "You talked about performance and you talked about security, but you didn't talk about scalability.",
    "start": "2747405",
    "end": "2752580"
  },
  {
    "text": "So do you see any bottleneck in Rocket? Uh, Scalability. I mean it sort of scales to many core machines, that's for sure.",
    "start": "2752580",
    "end": "2761050"
  },
  {
    "text": "Um, we haven't- NPM is the, you know, they have millions and millions of users.",
    "start": "2761050",
    "end": "2767030"
  },
  {
    "text": "Uh, so they have started deploying it to production and I have not received an angry email yet.",
    "start": "2767030",
    "end": "2773099"
  },
  {
    "text": "So my guess is, it also scales to millions of users. Now, I don't, I don't know but you you- we don't give",
    "start": "2773100",
    "end": "2779460"
  },
  {
    "text": "you any sort of interesting tools to scale it, we're not AWS. Um, you know you're going to have to do your own scaling",
    "start": "2779460",
    "end": "2784930"
  },
  {
    "text": "but as far as the software itself is concerned, I have no reason to believe it doesn't scale to millions of users.",
    "start": "2784930",
    "end": "2790010"
  },
  {
    "text": "The next- [NOISE] Yeah, okay [LAUGHTER].",
    "start": "2790010",
    "end": "2796430"
  },
  {
    "text": "Uh, the type based validation that you're doing it seems pretty interesting for almost any network protocol, not just HTTP, of course HTTP is like the thousand pound gorilla.",
    "start": "2796430",
    "end": "2804005"
  },
  {
    "text": "But how hard would it be to extend this basic concept to other network protocols that have similar problems?",
    "start": "2804005",
    "end": "2809319"
  },
  {
    "start": "2808000",
    "end": "2953000"
  },
  {
    "text": "Not hard at all, we've already done it. Yeah. So yes. What what protocols have you extended to?",
    "start": "2809320",
    "end": "2815130"
  },
  {
    "text": "Uh, for arbitrary protocols is what we've done. Yeah, so we have sort of a framework where you sort of annotate your thing and then it calls",
    "start": "2815130",
    "end": "2821530"
  },
  {
    "text": "something else to finish whatever it means to process that annotation. So, where we've seen someone apply this is like GRPC,",
    "start": "2821530",
    "end": "2828865"
  },
  {
    "text": "sort of doing a similar thing. Now it seems to be what you want, good. Uh, so GRPC is where we've seen it applied but you can do it for like SOAP,",
    "start": "2828865",
    "end": "2834600"
  },
  {
    "text": "you can do it for whatever. You can do for your own, you know, networking protocols. Um, yeah so and we've even,",
    "start": "2834600",
    "end": "2841030"
  },
  {
    "text": "we've even extended this further to like system calls which kind of look like RPCs. Anything that kind of looks like RPC,",
    "start": "2841030",
    "end": "2846665"
  },
  {
    "text": "this, this fits in perfectly. So, we've done it for like system calls, where someone calls you and you need to validate all the inputs before you actually do any processing.",
    "start": "2846665",
    "end": "2853495"
  },
  {
    "text": "So, yeah, it's kind of a general mechanism, but it's really well suited for HTTP. Great. Are there any other questions?",
    "start": "2853495",
    "end": "2861380"
  },
  {
    "text": "I have to ask one question. So the syntax is kind of a syntax that not a lot of developers are used to.",
    "start": "2861380",
    "end": "2868400"
  },
  {
    "text": "Yeah. Have you looked at how hard it is to kind of come up to speed from like zero Rust to Rocket?",
    "start": "2868400",
    "end": "2873410"
  },
  {
    "text": "Yeah. So, yeah, so the question is, sort of how easy is it for someone to grok this new syntax?",
    "start": "2873410",
    "end": "2879655"
  },
  {
    "text": "Um, so so it sort of looks a lot like Flask which is the Python web framework so a lot of people kind of feel comfortable",
    "start": "2879655",
    "end": "2886530"
  },
  {
    "text": "just kind of looking at it in that, in that way. But even then you still have to sort of know Rust. Now the thing that, so I don't know we'd have to do like a,",
    "start": "2886530",
    "end": "2893680"
  },
  {
    "text": "some weird study or some sort. But what is really cool is that, uh, from what I've gathered a not-insignificant amount",
    "start": "2893680",
    "end": "2901540"
  },
  {
    "text": "of new Rust users start using Rust because of Rocket. Yeah, so that was really, really shocking.",
    "start": "2901540",
    "end": "2907279"
  },
  {
    "text": "You'll see, so in IRC there's a Rust beginner's, uh, thing and we'll say hey I just started writing a new Rocket application, this is my first time writing Rust,",
    "start": "2907280",
    "end": "2913380"
  },
  {
    "text": "you know, I'm running into this issue. And so, it's at least inviting enough, that people feel okay with doing it and on GitHub there's 3,800 Rocket applications.",
    "start": "2913380",
    "end": "2923765"
  },
  {
    "text": "Uh, most of them seem to be people that have like a single Rust repository, which is Rocket. So, people are writing things that have never written Rust",
    "start": "2923765",
    "end": "2931940"
  },
  {
    "text": "before and succeeding for the most part. Yeah it's cool, definitely. Cool. All right.",
    "start": "2931940",
    "end": "2937160"
  },
  {
    "text": "All right, awesome. Thank you. [APPLAUSE]",
    "start": "2937160",
    "end": "2943120"
  }
]