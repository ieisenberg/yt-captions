[
  {
    "text": " Today, we're going to\ncontinue our discussion",
    "start": "0",
    "end": "8109"
  },
  {
    "text": "of transactional memory. We'll talk about software\nand hardware implementations.",
    "start": "8109",
    "end": "14530"
  },
  {
    "text": "Just to remind you\nof where we left off at the end of last lecture,\nwe talked about well",
    "start": "14530",
    "end": "22912"
  },
  {
    "text": "during the lecture,\nwe talked about all the transactional\nmemory properties",
    "start": "22912",
    "end": "28180"
  },
  {
    "text": "that we wanted to preserve. And we talked about\nthe advantages, and then we talked about\nthe different kinds",
    "start": "28180",
    "end": "36160"
  },
  {
    "text": "of aspects of the\ntransactional memory design that you need to consider. One was of what data\nversioning policy",
    "start": "36160",
    "end": "43810"
  },
  {
    "text": "you use to keep track of\nthe old transactional data that had been committed and\nthe new transactional data that",
    "start": "43810",
    "end": "52720"
  },
  {
    "text": "is being created as the\ntransactions execute, and then how we\nactually detected conflicts between transactions.",
    "start": "52720",
    "end": "59210"
  },
  {
    "text": "And we said there were two\ndata versioning policies, eager and lazy. And then we said that there\nwere two conflict detection",
    "start": "59210",
    "end": "66920"
  },
  {
    "text": "policies, pessimistic\nwhere you detect the conflict as the memory\nreferences are made, and then",
    "start": "66920",
    "end": "76549"
  },
  {
    "text": "optimistic, which assumes that\nthere will be no conflicts, and you detect the conflicts\nwhen any transaction commits.",
    "start": "76550",
    "end": "86270"
  },
  {
    "text": "All right. And so we did some examples. And we saw that in\ncertain case for.",
    "start": "86270",
    "end": "95840"
  },
  {
    "text": "And for the pessimistic\nconflict detection policy,",
    "start": "95840",
    "end": "101929"
  },
  {
    "text": "that sometimes we\nhad a situation where we had a livelock, and\nwe needed to detect",
    "start": "101930",
    "end": "107060"
  },
  {
    "text": "that and the\ntransactional memory system would have to\nrecover from livelock",
    "start": "107060",
    "end": "112430"
  },
  {
    "text": "to make sure that the\napplication could make forward progress. And then, we also did\nthe optimistic case.",
    "start": "112430",
    "end": "119090"
  },
  {
    "text": "And we saw in the\ncase where you had livelock, in the\npessimistic case, you didn't have livelock here.",
    "start": "119090",
    "end": "127160"
  },
  {
    "text": "And the reason is, of course, is\nthat the committing transaction always wins.",
    "start": "127160",
    "end": "132200"
  },
  {
    "text": "And the committing transaction,\nremember, the check was you compare the write state\nof the committing transaction",
    "start": "132200",
    "end": "140620"
  },
  {
    "text": "with the read state of all the\noutstanding transactions that are still in execution. And if there's a conflict,\nthen those transactions",
    "start": "140620",
    "end": "147790"
  },
  {
    "text": "have to abort, and the\ncommitting transaction does gets to commit.",
    "start": "147790",
    "end": "154150"
  },
  {
    "text": "So any questions on what\nwe've discussed so far as far as the way\ntransactional memory",
    "start": "154150",
    "end": "160540"
  },
  {
    "text": "is supposed to work\nand the properties that needed to be preserved?",
    "start": "160540",
    "end": "167160"
  },
  {
    "text": "All right. So let's discuss an explicit\nimplementation or a couple",
    "start": "167160",
    "end": "173740"
  },
  {
    "text": "of explicit implementations. As you can imagine, given that\nyou've got a space of policies",
    "start": "173740",
    "end": "179490"
  },
  {
    "text": "that you can implement,\nthere's a wide range of different\nimplementations that",
    "start": "179490",
    "end": "186090"
  },
  {
    "text": "pick different points in the\ndesign space of the policies that you select, right?",
    "start": "186090",
    "end": "191860"
  },
  {
    "text": "So you can have lazy optimistic. You can have eager\noptimistic, eager pessimistic,",
    "start": "191860",
    "end": "200550"
  },
  {
    "text": "as we've already\ndiscussed, eager optimistic doesn't work out too well\nbecause at the point at which",
    "start": "200550",
    "end": "208709"
  },
  {
    "text": "you detect that\nthere is a conflict, you may have already kind of\nmodified the memory in ways that",
    "start": "208710",
    "end": "216659"
  },
  {
    "text": "are difficult to recover from. So those are the\nsoftware systems. The software system that\nwe're going to look at",
    "start": "216660",
    "end": "222390"
  },
  {
    "text": "is, in fact, a\nkind of hybrid that is eager, optimistic for reads\nbut pessimistic for writes.",
    "start": "222390",
    "end": "229250"
  },
  {
    "text": "And we'll see how you can\nhave both at the same time by treating reads and writes\na slightly differently.",
    "start": "229250",
    "end": "237200"
  },
  {
    "text": "And then, of course, we'll also\nlook at some hardware systems. First of all, we're going to\nmotivate why you want hardware.",
    "start": "237200",
    "end": "242350"
  },
  {
    "text": "And, of course, you\nalways want hardware if you want to\nimprove performance. And so there are\nperformance overheads",
    "start": "242350",
    "end": "249310"
  },
  {
    "text": "that we'll see from the\nsoftware systems that can be mitigated by using hardware.",
    "start": "249310",
    "end": "256898"
  },
  {
    "text": "And, of course, you\ncan have some hybrid where you can mix\nhardware and software, and you try and attack the\ncomponents of the software",
    "start": "256899",
    "end": "264520"
  },
  {
    "text": "systems that are really going\nto provide the most overhead,",
    "start": "264520",
    "end": "269770"
  },
  {
    "text": "and try and reduce those\noverheads by judicious use of hardware.",
    "start": "269770",
    "end": "275110"
  },
  {
    "text": "So let's start by looking at\nsoftware transactional memory implementation.",
    "start": "275110",
    "end": "280160"
  },
  {
    "text": "And this is a canonical\nway of implementing a transactional\nsystem in software.",
    "start": "280160",
    "end": "286220"
  },
  {
    "text": "But it's applied\nin this situation to transactional\nmemory, but you could imagine implementing something\nlike this for other cases",
    "start": "286220",
    "end": "295420"
  },
  {
    "text": "where you want it to keep data\nconsistent in some manner.",
    "start": "295420",
    "end": "300590"
  },
  {
    "text": "So given this atomic\nregion, you've got reads and writes that\nare shown in the code",
    "start": "300590",
    "end": "310090"
  },
  {
    "text": "here, in the\nstatements of the code. And somehow you need to indicate\nto the transactional memory",
    "start": "310090",
    "end": "318580"
  },
  {
    "text": "system what actions are being\ntaken place inside the program.",
    "start": "318580",
    "end": "325909"
  },
  {
    "text": "And that is done by the use of\nwhat we call software barriers. And software barriers\nare basically calls",
    "start": "325910",
    "end": "331240"
  },
  {
    "text": "into the transactional\nmemory system to indicate to the system what\nbookkeeping has to be taken.",
    "start": "331240",
    "end": "342319"
  },
  {
    "text": "So the idea is that\nyou've got to rewrite the code that the\nprogrammer gives you",
    "start": "342320",
    "end": "347889"
  },
  {
    "text": "and add these extra calls into\nthe transactional memory system. So for every write, you\nneed to, put in a TM write.",
    "start": "347890",
    "end": "359599"
  },
  {
    "text": "And for every read, you need\nto make that into a TM read.",
    "start": "359600",
    "end": "365540"
  },
  {
    "text": "OK, so these are called\nsoftware barriers, not to be confused with\nbarriers for synchronization.",
    "start": "365540",
    "end": "372270"
  },
  {
    "text": "This is just basically a call\ninto the transactional memory system specified by these\nTM read and write functions.",
    "start": "372270",
    "end": "383060"
  },
  {
    "text": "So you need this\nbookkeeping, of course, to keep track of\nwhat's happening with the state of the\ntransactional memory system.",
    "start": "383060",
    "end": "390750"
  },
  {
    "text": "As we'll see, a lot of these\nTM calls are redundant, and you can optimize them away.",
    "start": "390750",
    "end": "397170"
  },
  {
    "text": "And we'll see an example\nof that in just a moment. All right.",
    "start": "397170",
    "end": "402370"
  },
  {
    "text": "So we've essentially\nnow have to transfer this code on the left, which the\nprogrammer wrote into something",
    "start": "402370",
    "end": "409830"
  },
  {
    "text": "that interacts with the\ntransactional memory system. And, of course, if\nyou have code that",
    "start": "409830",
    "end": "415440"
  },
  {
    "text": "is both executed\ninside transactions and outside\ntransactions, then you need two copies,\none that doesn't",
    "start": "415440",
    "end": "421770"
  },
  {
    "text": "have the instrumentation\non the left and one that does on the right. And if you've got some of\nvirtual memory system--",
    "start": "421770",
    "end": "433750"
  },
  {
    "text": "so if you're running\nin Java or in C-Sharp, then maybe you can do some of\nthis what's called function",
    "start": "433750",
    "end": "439740"
  },
  {
    "text": "cloning automatically where\nyou clone the function and you add the\nappropriate software",
    "start": "439740",
    "end": "445830"
  },
  {
    "text": "barriers to interact with the\ntransactional memory system. ",
    "start": "445830",
    "end": "450870"
  },
  {
    "text": "All right. So now the question is,\nwhat data structures do you need to keep track of\nthe transactional memory state",
    "start": "450870",
    "end": "461430"
  },
  {
    "text": "and make sure that everything\noperates correctly? So we need some way of\nmapping the data that",
    "start": "461430",
    "end": "470280"
  },
  {
    "text": "is being manipulated\nby the application into the data structures\nthat need to be used to track",
    "start": "470280",
    "end": "479340"
  },
  {
    "text": "the transactional memory state. And so this is called a\ntransactional descriptor.",
    "start": "479340",
    "end": "485430"
  },
  {
    "text": "And this can be two components,\na transactional descriptor, which is per thread.",
    "start": "485430",
    "end": "491830"
  },
  {
    "text": "So this is information about\nundo logs, write buffers,",
    "start": "491830",
    "end": "498720"
  },
  {
    "text": "conflict detection and the read. So you need the read set. And the write set is also part\nof the transaction descriptor.",
    "start": "498720",
    "end": "507490"
  },
  {
    "text": "And this is per thread\nor per transaction. You need a transaction\ndescriptor. And then you need a transaction\nrecord per data element.",
    "start": "507490",
    "end": "516679"
  },
  {
    "text": "And this could be\nassociated with objects or with a finer granularity\nof data within the objects.",
    "start": "516679",
    "end": "525020"
  },
  {
    "text": "And so essentially here\nwith the transaction record, you're going to essentially\nkeep the metadata that tells you",
    "start": "525020",
    "end": "534100"
  },
  {
    "text": "how the data is being accessed. And so if you make an\nanalog to discussion",
    "start": "534100",
    "end": "541180"
  },
  {
    "text": "of cache coherence, where we\nsaid that you needed the cache state to tell you whether\nthe data was shared",
    "start": "541180",
    "end": "549519"
  },
  {
    "text": "by multiple CPUs, or, in this\ncase, multiple transactions,",
    "start": "549520",
    "end": "555550"
  },
  {
    "text": "or whether it was exclusive\nto one transaction. So as a direct analog\nbetween the way",
    "start": "555550",
    "end": "562630"
  },
  {
    "text": "that we handle\ntransactions and the way that we discuss doing\ncache coherency.",
    "start": "562630",
    "end": "568629"
  },
  {
    "text": "So then the question is,\nhow do you actually map",
    "start": "568630",
    "end": "574560"
  },
  {
    "text": "the data that is being\nused by the program",
    "start": "574560",
    "end": "583620"
  },
  {
    "text": "to the transaction record. And so you can do\nthis in two ways.",
    "start": "583620",
    "end": "590100"
  },
  {
    "text": "You can do it per object where\neach object has a transaction",
    "start": "590100",
    "end": "597120"
  },
  {
    "text": "record. And so this is shown\nby the top, you can either use some\nsort of table associated",
    "start": "597120",
    "end": "604020"
  },
  {
    "text": "with the object, or you have\nsome hash into a global data",
    "start": "604020",
    "end": "609450"
  },
  {
    "text": "table, or you could do it\nper individual data element.",
    "start": "609450",
    "end": "617590"
  },
  {
    "text": "And, of course, in C or C++\nwhere you might have to do this based on address.",
    "start": "617590",
    "end": "623519"
  },
  {
    "text": "And so the question\nis, of course, this is a finer granularity\nof information about the data",
    "start": "623520",
    "end": "631470"
  },
  {
    "text": "than doing it per object. So there is some\ntrade off to be had.",
    "start": "631470",
    "end": "636500"
  },
  {
    "text": "And as you're already\nthinking about this, because you're making the\nanalogy to cache coherence,",
    "start": "636500",
    "end": "643510"
  },
  {
    "text": "you're thinking, so what is\nthe trade off that we're going to see between doing\nthings at the object level,",
    "start": "643510",
    "end": "650020"
  },
  {
    "text": "or doing things at a finer\ngranularity at the individual field, or individual 32-bit\nor 64-bit data element level.",
    "start": "650020",
    "end": "664890"
  },
  {
    "text": "Yeah, I guess, when\nyou have something that's an object\nlevel, you assume",
    "start": "664890",
    "end": "670980"
  },
  {
    "text": "all the properties\nare handled together, even though they could\nactually be independent.",
    "start": "670980",
    "end": "676470"
  },
  {
    "text": "Like, x and y could\nbe independent too for a finer gradient. So what is going to be\nthe impact of doing that?",
    "start": "676470",
    "end": "683339"
  },
  {
    "text": "If it's not independent,\nthen the transactions like we saw previously, the\nway that the memory works,",
    "start": "683340",
    "end": "688829"
  },
  {
    "text": "it will have unnecessary\naborts and restart. Exactly. You'll have more conflicts\nthan really required.",
    "start": "688830",
    "end": "696220"
  },
  {
    "text": "So this is exactly\nthe trade off. And so with object\ngranularity, you're",
    "start": "696220",
    "end": "701850"
  },
  {
    "text": "going to have lower\noverhead of actually keeping track of the data.",
    "start": "701850",
    "end": "708390"
  },
  {
    "text": "And you might have some\nopportunities for optimization if you are doing repeated--",
    "start": "708390",
    "end": "716070"
  },
  {
    "text": "you're repeatedly\nusing the same object, then you can amortize the\noverhead of managing the data",
    "start": "716070",
    "end": "726360"
  },
  {
    "text": "record for that object. But the key thing that you\ndo get with this coarser granularity are these false\nconflicts, as you pointed out.",
    "start": "726360",
    "end": "735870"
  },
  {
    "text": "So here's the example then. So if you've got element\nor field granularity,",
    "start": "735870",
    "end": "743070"
  },
  {
    "text": "then you can reduce the\nincidence of false conflicts and potentially\nimprove concurrency.",
    "start": "743070",
    "end": "749680"
  },
  {
    "text": "And if you look at the\nexample on the right here, we access the field x and y\nfrom object A in transaction 1",
    "start": "749680",
    "end": "758760"
  },
  {
    "text": "and we access the field\nz in transaction 2.",
    "start": "758760",
    "end": "764980"
  },
  {
    "text": "And if you're doing things on\nan object level, of course, these two transactions conflict.",
    "start": "764980",
    "end": "770590"
  },
  {
    "text": "But if you're doing things at\na field level of granularity, then there is no conflict,",
    "start": "770590",
    "end": "775810"
  },
  {
    "text": "So that's the benefit. And, of course, the\ndownside of doing things at the element or\nfield granularity",
    "start": "775810",
    "end": "785710"
  },
  {
    "text": "is increased overhead. And then, of course, you\ncan imagine doing things that cache line\nbecause that matches",
    "start": "785710",
    "end": "792310"
  },
  {
    "text": "what you might do in hardware. But then this doesn't\nhave a direct analog with what you wrote\nas a programmer,",
    "start": "792310",
    "end": "798110"
  },
  {
    "text": "so it might be difficult to\nunderstand what's going on. And if you're doing\nthings in software,",
    "start": "798110",
    "end": "804400"
  },
  {
    "text": "you can mix and match things. You might say,\nwell, for objects,",
    "start": "804400",
    "end": "814050"
  },
  {
    "text": "I'm going to do things\nat the object level. And then for arrays, I might\nthink about doing things",
    "start": "814050",
    "end": "819670"
  },
  {
    "text": "at the element level,\nand this turns out to be a pretty good trade off.",
    "start": "819670",
    "end": "825026"
  },
  {
    "text": "OK, so with that in mind,\nso we have a way of--",
    "start": "825026",
    "end": "830890"
  },
  {
    "text": "we have a way of thinking about\nthe transaction descriptor.",
    "start": "830890",
    "end": "837200"
  },
  {
    "text": "And then we have the data\nrecord for the individual data. So now let's talk about\na specific STM algorithm.",
    "start": "837200",
    "end": "848570"
  },
  {
    "text": "And the one that we're going\nto use comes from Intel.",
    "start": "848570",
    "end": "854415"
  },
  {
    "text": "It was developed\nquite a few years ago. The algo is called McRT. And it is an eager\nversioning with optimistic",
    "start": "854415",
    "end": "863769"
  },
  {
    "text": "reads write which means-- we'll say explicitly\nhow the reads are",
    "start": "863770",
    "end": "868870"
  },
  {
    "text": "optimistic in just a moment-- and then pessimistic\nwrites, which means you're going to take\nlocks in order to do the writes.",
    "start": "868870",
    "end": "878020"
  },
  {
    "text": "And so it's based on this idea\nof versioning or timestamping to determine what data is being\nshared by multiple transactions.",
    "start": "878020",
    "end": "888970"
  },
  {
    "text": "And so the idea is that there\nis a global timestamp that is incremented when a\ntransaction commits write.",
    "start": "888970",
    "end": "895190"
  },
  {
    "text": "So any transaction that\ncommits in the system increments the global timestamp.",
    "start": "895190",
    "end": "900560"
  },
  {
    "text": "And then there's\na local timestamp, which gets stamped on the\ntransaction when it begins.",
    "start": "900560",
    "end": "906850"
  },
  {
    "text": "And so this will be used for\ndetermining whether conflicts",
    "start": "906850",
    "end": "912490"
  },
  {
    "text": "happen on data. And then there's a\ntransaction record associated",
    "start": "912490",
    "end": "919180"
  },
  {
    "text": "with each of the transactions. And it's so with each\nof the transactions, so",
    "start": "919180",
    "end": "927319"
  },
  {
    "text": "transient record associated with\neach of the data, I should say. And it's a 32-bit value with\nthe most significant bit--",
    "start": "927320",
    "end": "938990"
  },
  {
    "text": "sorry, the least significant\nbit that is either",
    "start": "938990",
    "end": "945800"
  },
  {
    "text": "0, which means it's locked. And then that means that this\nwould be a transaction pointer.",
    "start": "945800",
    "end": "953892"
  },
  {
    "start": "953893",
    "end": "959450"
  },
  {
    "text": "And then if the left\nsignificant bit is a 1, then this is essentially\na version number.",
    "start": "959450",
    "end": "967410"
  },
  {
    "text": "So by looking at the\nleast significant bit of the transaction\nrecord, you can",
    "start": "967410",
    "end": "972769"
  },
  {
    "text": "tell whether the particular\nobject or the data element",
    "start": "972770",
    "end": "979745"
  },
  {
    "text": "is it. So you can think of this\nas when you've got a 1,",
    "start": "979745",
    "end": "987110"
  },
  {
    "text": "how should you think about\nthe state of the data? Make an analog to\ncache coherence.",
    "start": "987110",
    "end": "994899"
  },
  {
    "text": "Yeah, it's shared. And when it's a\n0, it's exclusive. And it's being written\nby this transaction,",
    "start": "994900",
    "end": "1002860"
  },
  {
    "text": "the one that says the pointer. So that's the way to\nthink about things. So we're either in\nshared or exclusive mode.",
    "start": "1002860",
    "end": "1012430"
  },
  {
    "text": "And the transaction\nrecord indicates that.",
    "start": "1012430",
    "end": "1017440"
  },
  {
    "text": "All right. So now that we've got the\nnotion of version tracking",
    "start": "1017440",
    "end": "1023750"
  },
  {
    "text": "and transaction\nrecord, let's think about exactly what operations\nwe need to perform in order",
    "start": "1023750",
    "end": "1030439"
  },
  {
    "text": "to implement transactional\nmemory in this software environment. So you've got for every time\nthat you want to do a read,",
    "start": "1030440",
    "end": "1039230"
  },
  {
    "text": "you're going to call STM read. And this is optimistic\nin the sense",
    "start": "1039230",
    "end": "1044929"
  },
  {
    "text": "that even though, as we'll\nsee, you do try and validate the data that you\nare about to read,",
    "start": "1044930",
    "end": "1053000"
  },
  {
    "text": "once you've done that, you're\ngolden until some other",
    "start": "1053000",
    "end": "1058070"
  },
  {
    "text": "transaction decides to commit. So, in this case, it's\neager, so you would direct",
    "start": "1058070",
    "end": "1064520"
  },
  {
    "text": "read from the memory location. You validate the\ndata you're trying",
    "start": "1064520",
    "end": "1069590"
  },
  {
    "text": "to read by checking to\nsee that it's unlocked. So if it's locked, then what\ndo you know about the data",
    "start": "1069590",
    "end": "1076460"
  },
  {
    "text": "that you're trying to read? Yeah. It could be invalid.",
    "start": "1076460",
    "end": "1083909"
  },
  {
    "text": "What specifically about the\ndata that you're trying to read?",
    "start": "1083910",
    "end": "1091237"
  },
  {
    "text": "It could be stale because\nsomeone else could be writing. Well, you haven't-- let's\nsuppose that to make things",
    "start": "1091237",
    "end": "1100350"
  },
  {
    "text": "a little more clear, let's\nassume that you're at a point",
    "start": "1100350",
    "end": "1112299"
  },
  {
    "text": "in the program and you're\ndoing this a direct read from",
    "start": "1112300",
    "end": "1118640"
  },
  {
    "text": "the memory. But you could\npotentially not read,",
    "start": "1118640",
    "end": "1127440"
  },
  {
    "text": "you could do the check first. Let's assume you\ndo the check first. Then what do you know? ",
    "start": "1127440",
    "end": "1139010"
  },
  {
    "text": "If the data is locked,\nwhat do you know? ",
    "start": "1139010",
    "end": "1148170"
  },
  {
    "text": "It might be [? old ?]\nlike someone might be in the\nprocess of writing it. You know that there\nis a transaction that",
    "start": "1148170",
    "end": "1154440"
  },
  {
    "text": "is writing that data. So should you go\nahead and read it? Probably not.",
    "start": "1154440",
    "end": "1161910"
  },
  {
    "text": "Your contention managers might\nsay, well, let's just wait. Let's just wait for that\ntransaction to finish.",
    "start": "1161910",
    "end": "1168250"
  },
  {
    "text": "And when it's done, then\nwe'll read the data. So you can imagine, at\nthis point, if it's locked,",
    "start": "1168250",
    "end": "1173940"
  },
  {
    "text": "that you just wait. If it's unlocked, that\nmeans that some other--",
    "start": "1173940",
    "end": "1181440"
  },
  {
    "text": "if it's unlocked\nand the data version is less than the local\ntimestamp, what does that mean? ",
    "start": "1181440",
    "end": "1192130"
  },
  {
    "text": "Yeah. It's in a shared space that you\ncan take it in exclusive now. OK, but what does it mean\nthat the data version is",
    "start": "1192130",
    "end": "1198490"
  },
  {
    "text": "less than the local timestamp? Yeah. That means that something\nhasn't changed it before transaction started.",
    "start": "1198490",
    "end": "1206020"
  },
  {
    "text": "So after the\ntransaction started, some other transaction\nhas modified.",
    "start": "1206020",
    "end": "1212440"
  },
  {
    "text": "Now, does it mean that\nthis transaction has read the wrong thing?",
    "start": "1212440",
    "end": "1217810"
  },
  {
    "text": "Not yet because, in fact,\nthe data has been updated.",
    "start": "1217810",
    "end": "1224230"
  },
  {
    "text": "It got the latest copy. But now it needs to make sure\nthat all the rest of its data",
    "start": "1224230",
    "end": "1231550"
  },
  {
    "text": "is actually good. And so it tries to validate the\nwhole of its read set again.",
    "start": "1231550",
    "end": "1236602"
  },
  {
    "text": "And we'll talk about exactly\nwhat that means but just wants to make sure that\neverything is up to date.",
    "start": "1236602",
    "end": "1242080"
  },
  {
    "text": "So if we validated\nthe read data, then we can insert it in the\nread set and return the value.",
    "start": "1242080",
    "end": "1249289"
  },
  {
    "text": "So clearly there's more work\nto do with transactional memory than just reading the data.",
    "start": "1249290",
    "end": "1255020"
  },
  {
    "text": "You need to keep\ntrack of the state of the transactional memory. Now, STM write is\npessimistic in that you now",
    "start": "1255020",
    "end": "1263020"
  },
  {
    "text": "have to check and grab a lock. So you check if it's unlocked,\nand the data version is",
    "start": "1263020",
    "end": "1271000"
  },
  {
    "text": "less than the local timestamp. And if that check passes,\nthen you acquire the lock,",
    "start": "1271000",
    "end": "1278600"
  },
  {
    "text": "insert it in the write set,\ncreate your undo log entry,",
    "start": "1278600",
    "end": "1283850"
  },
  {
    "text": "and write the data in place\nbecause this is, in fact, eager. So you grab the lock.",
    "start": "1283850",
    "end": "1289250"
  },
  {
    "text": "And that makes this policy\nfor doing writes pessimistic.",
    "start": "1289250",
    "end": "1295160"
  },
  {
    "text": "But it's optimistic for reads\nbecause you didn't actually check to see that there\nwere any readers that",
    "start": "1295160",
    "end": "1304190"
  },
  {
    "text": "had read this data here. So the readers can\nblithely go along.",
    "start": "1304190",
    "end": "1312809"
  },
  {
    "text": "It might turn out that later\nwhen this transaction tries to commit, that the\nconflict gets detected,",
    "start": "1312810",
    "end": "1319309"
  },
  {
    "text": "but it doesn't get\ndetected at the time that the write is happening. So, in that sense, it's\noptimistic for reads.",
    "start": "1319310",
    "end": "1327890"
  },
  {
    "text": "OK, any questions?  All right. So how do we do\nread set validation?",
    "start": "1327890",
    "end": "1335650"
  },
  {
    "text": "Well, we get the\nglobal time stamp. And for each of the\nentries in the read set,",
    "start": "1335650",
    "end": "1343380"
  },
  {
    "text": "we check that if it's\nlocked or the data version",
    "start": "1343380",
    "end": "1348750"
  },
  {
    "text": "is greater than the local time\nstamp that we have to abort. What do we know has\nhappened if it's locked?",
    "start": "1348750",
    "end": "1354770"
  },
  {
    "text": " Yeah. [INAUDIBLE] Right.",
    "start": "1354770",
    "end": "1359800"
  },
  {
    "text": "And you basically\nread the wrong thing. And it's also true\nif the data version",
    "start": "1359800",
    "end": "1366193"
  },
  {
    "text": "is greater than the\nlocal times, so that means that we've\ngot bad data, and we",
    "start": "1366193",
    "end": "1371640"
  },
  {
    "text": "need to abort this\ntransaction and start again. Suppose every element\nin the read set checks,",
    "start": "1371640",
    "end": "1379110"
  },
  {
    "text": "then we can update the local\ntimestamp for this transaction",
    "start": "1379110",
    "end": "1386950"
  },
  {
    "text": "because it's as if\nit started executing at this point in which you\njust got the local timestamp as",
    "start": "1386950",
    "end": "1393539"
  },
  {
    "text": "opposed to the\noriginal time that it got its local timestamp,\nwhich was earlier, because you've completely\nvalidated the read",
    "start": "1393540",
    "end": "1401400"
  },
  {
    "text": "set at this point. OK. Yeah. Why do both of these checks\nblocked by the auditor version",
    "start": "1401400",
    "end": "1409549"
  },
  {
    "text": "of like-- I think that both of them\ndo the same thing, right? No. What's the difference?",
    "start": "1409550",
    "end": "1416090"
  },
  {
    "text": "Can someone enlighten\nus about what's the difference between\nthe data being locked",
    "start": "1416090",
    "end": "1422120"
  },
  {
    "text": "and the timestamp being updated? Yeah, I'm pretty sure\nso if it's locked,",
    "start": "1422120",
    "end": "1428750"
  },
  {
    "text": "then another transaction is\ncurrently writing to that data. Yeah. And where\n[? is the data written, ?] [INAUDIBLE] it's already active.",
    "start": "1428750",
    "end": "1435000"
  },
  {
    "text": "Exactly. That's the difference. One is in the writes\nare in progress,",
    "start": "1435000",
    "end": "1440890"
  },
  {
    "text": "one is the write has\nalready happened. Good. OK.",
    "start": "1440890",
    "end": "1446200"
  },
  {
    "text": "So STM commit. So now you need to\nincrement the timestamp.",
    "start": "1446200",
    "end": "1453130"
  },
  {
    "text": "You're going to do it by 2. Why do we do it by 2? ",
    "start": "1453130",
    "end": "1458659"
  },
  {
    "text": "Preserves it there. Yeah, because the least\nsignificant bit is actually",
    "start": "1458660",
    "end": "1464480"
  },
  {
    "text": "keeping track of whether\nit's locked or not. So we always have\nto increment it by 2",
    "start": "1464480",
    "end": "1470480"
  },
  {
    "text": "to make sure that we can use\nthat least significant bit.",
    "start": "1470480",
    "end": "1480290"
  },
  {
    "text": "Then we're going to\ntake the old timestamp",
    "start": "1480290",
    "end": "1485450"
  },
  {
    "text": "and validate the read\nset just to make sure",
    "start": "1485450",
    "end": "1492929"
  },
  {
    "text": "that there aren't any recently\ncommitted transactions that would cause us to abort. And then for each\nitem in the write set,",
    "start": "1492930",
    "end": "1501000"
  },
  {
    "text": "we're going to release the\nlock and set the version number to the global timestamp. So that's it.",
    "start": "1501000",
    "end": "1510240"
  },
  {
    "text": "So now let's look\nat an example, which is a slight modification\nof what I just told",
    "start": "1510240",
    "end": "1517410"
  },
  {
    "text": "you, but it's close\nenough to make sense.",
    "start": "1517410",
    "end": "1523210"
  },
  {
    "text": "So here what we're\ntrying to do is we have two\ntransactions x1 and x2.",
    "start": "1523210",
    "end": "1529290"
  },
  {
    "text": "And x1 is going to atomically\ncopy object foo to object bar.",
    "start": "1529290",
    "end": "1540155"
  },
  {
    "text": " And then x2 is going\nto read object bar,",
    "start": "1540155",
    "end": "1548140"
  },
  {
    "text": "and it should read\nalso atomically. And so it should read\neither 0,0 or 9,7.",
    "start": "1548140",
    "end": "1555680"
  },
  {
    "text": "It shouldn't see any partial\nupdates to the object. That clear?",
    "start": "1555680",
    "end": "1562190"
  },
  {
    "text": "All right. So let's see how this works. So we start by\nexecuting the first read",
    "start": "1562190",
    "end": "1575309"
  },
  {
    "text": "of the x element of foo.",
    "start": "1575310",
    "end": "1581820"
  },
  {
    "text": "And so this needs to\ngo into the read set. So it goes into the read set as\nfoo and the time stamp is 3:00.",
    "start": "1581820",
    "end": "1591940"
  },
  {
    "text": "So the idea is that there\nare no local or global time stamps here. Let's just assume that each of\nthe objects has a timestamp.",
    "start": "1591940",
    "end": "1600450"
  },
  {
    "text": "And the initial object\ntime stamp for foo is 3:00 and for bar is 5:00.",
    "start": "1600450",
    "end": "1606789"
  },
  {
    "text": "So we've got read the foo in the\nread set with time stamp 3:00,",
    "start": "1606790",
    "end": "1615840"
  },
  {
    "text": "and then we have a read of bar,\nand it gets time stamp 5:00.",
    "start": "1615840",
    "end": "1625090"
  },
  {
    "text": "And so that goes into\nthe read set of x2.",
    "start": "1625090",
    "end": "1630360"
  },
  {
    "text": "Then we get a write to bar.",
    "start": "1630360",
    "end": "1638210"
  },
  {
    "text": "And so what has to happen? We have to take the write lock. So we have a write lock,\nand that's indicated",
    "start": "1638210",
    "end": "1650720"
  },
  {
    "text": "by the transaction point of x1. Now we need to indicate that\nin the transaction descriptor",
    "start": "1650720",
    "end": "1663490"
  },
  {
    "text": "by updating the write\nset and the undo log,",
    "start": "1663490",
    "end": "1669190"
  },
  {
    "text": "since this is a eager mode, so\nwe have to have an undo log.",
    "start": "1669190",
    "end": "1674779"
  },
  {
    "text": "So we put the old value of\nbar.x x into the undo log. ",
    "start": "1674780",
    "end": "1682216"
  },
  {
    "text": "We continue executing, and\nwe are going to read bar.y.",
    "start": "1682216",
    "end": "1689065"
  },
  {
    "text": "And so what should happen here? Yeah. Well, I think because the\ngranularity of all bars,",
    "start": "1689065",
    "end": "1696549"
  },
  {
    "text": "and it should say\nthat's invalid. So what should happen? ",
    "start": "1696550",
    "end": "1704250"
  },
  {
    "text": "Yeah, so It's going to\nsee that bar is locked.",
    "start": "1704250",
    "end": "1709680"
  },
  {
    "text": "So as it tries to do the\nvalidate for the read of bar,",
    "start": "1709680",
    "end": "1717030"
  },
  {
    "text": "it's going to say\nthe object is locked, and so let's assume that we\njust wait, that we stall.",
    "start": "1717030",
    "end": "1725399"
  },
  {
    "text": "So x2 waits. So x1 continues.",
    "start": "1725400",
    "end": "1734070"
  },
  {
    "text": "We have another read of foo. ",
    "start": "1734070",
    "end": "1740669"
  },
  {
    "text": "foo.y and that gets\nput into the read set.",
    "start": "1740670",
    "end": "1748050"
  },
  {
    "text": "And then we have another\nwrite of bar with that value.",
    "start": "1748050",
    "end": "1753930"
  },
  {
    "text": "And that all gets put\ninto the write set. OK, all right, now we\nneed to commit right?",
    "start": "1753930",
    "end": "1766020"
  },
  {
    "text": "And so what do we\nneed to do on commit? ",
    "start": "1766020",
    "end": "1773385"
  },
  {
    "text": "Yeah? [INAUDIBLE] Is that the first thing we do?",
    "start": "1773385",
    "end": "1778660"
  },
  {
    "text": "No. I think that you do\nthat when first you want to actually do the\ncommit and update values.",
    "start": "1778660",
    "end": "1785660"
  },
  {
    "text": "So what do we do before that? Validate the read set. Validate the read set, exactly.",
    "start": "1785660",
    "end": "1790730"
  },
  {
    "text": "So first we want to\nmake sure that the reads that we got are in fact valid.",
    "start": "1790730",
    "end": "1797309"
  },
  {
    "text": "And so we check. And the timestamp for\nfoo is still the same",
    "start": "1797310",
    "end": "1804200"
  },
  {
    "text": "for both of the reads of foo. And so we say read\nset validated.",
    "start": "1804200",
    "end": "1810620"
  },
  {
    "text": "We're cool. And we can go ahead and commit. And the commit is going to\nincrement the time stamp on bar",
    "start": "1810620",
    "end": "1822620"
  },
  {
    "text": "by 2, so it goes from 5 to 7. OK, yeah. So when we had the read\n[INAUDIBLE] in two separate--",
    "start": "1822620",
    "end": "1831110"
  },
  {
    "text": "like, is this two separate\nreads that reads it? Yeah. But there's only\none in the right.",
    "start": "1831110",
    "end": "1836497"
  },
  {
    "text": "So can you talk\nthrough why that is? [INAUDIBLE] the part about\nx equals t, so that means,",
    "start": "1836497",
    "end": "1843659"
  },
  {
    "text": "we have whatever bar.x-- be a part in the write set?",
    "start": "1843660",
    "end": "1849195"
  },
  {
    "text": "Right. And then we wrote the\npart of y equals t, then it was just we\njust added [INAUDIBLE].",
    "start": "1849195",
    "end": "1854692"
  },
  {
    "text": "We didn't add another\nelement to the write set. Yeah, that probably\nis incorrect.",
    "start": "1854692",
    "end": "1860070"
  },
  {
    "text": "Yeah, we probably should add\nan entry to the write set for both writes to bar.",
    "start": "1860070",
    "end": "1865450"
  },
  {
    "text": "OK, yeah. Although-- yeah, since\nit's doing it by--",
    "start": "1865450",
    "end": "1875770"
  },
  {
    "text": " yeah, you probably should use--",
    "start": "1875770",
    "end": "1881730"
  },
  {
    "text": "Well, I thought maybe it was\nbecause it's [INAUDIBLE]. I mean, it is at the\nobject level granularity.",
    "start": "1881730",
    "end": "1889320"
  },
  {
    "text": "And so once you know that-- ",
    "start": "1889320",
    "end": "1896840"
  },
  {
    "text": "yeah, in this case, the\nwrite set isn't so important",
    "start": "1896840",
    "end": "1902880"
  },
  {
    "text": "because you're doing\npessimistic detection anyway,",
    "start": "1902880",
    "end": "1910100"
  },
  {
    "text": "and you have an undo log. So figuring out, in this case,\nexactly what's in the write set",
    "start": "1910100",
    "end": "1921530"
  },
  {
    "text": "isn't that important. You need, of course, to\npotentially on a conflict,",
    "start": "1921530",
    "end": "1934260"
  },
  {
    "text": "use the undo log. But to be completely\ncorrect, you're right.",
    "start": "1934260",
    "end": "1940533"
  },
  {
    "text": "You should probably have\nanother entry in here for the other write to bar. ",
    "start": "1940533",
    "end": "1948559"
  },
  {
    "text": "All right. So we commit. And now we can--",
    "start": "1948560",
    "end": "1957789"
  },
  {
    "text": "let's get rid of-- ",
    "start": "1957790",
    "end": "1963550"
  },
  {
    "text": "OK, so we're at the\npoint that x2 waits. We get to the commit.",
    "start": "1963550",
    "end": "1968830"
  },
  {
    "text": "All right. Now, what happens is we can\nnow release the stall on x2.",
    "start": "1968830",
    "end": "1975585"
  },
  {
    "text": " And then we get another read\nfrom the x2 transaction.",
    "start": "1975585",
    "end": "1988610"
  },
  {
    "text": "And this, of course, now\nhas the new timestamp. OK, so then x2 gets\nto the commit point.",
    "start": "1988610",
    "end": "1996140"
  },
  {
    "text": "And what do we do first? Validate the read set. Validate the read set. So we validate the first read.",
    "start": "1996140",
    "end": "2003160"
  },
  {
    "text": "And does it validate? No. So you have to abort.",
    "start": "2003160",
    "end": "2009690"
  },
  {
    "text": "And once you've aborted, you\ncan re-execute and then get",
    "start": "2009690",
    "end": "2016200"
  },
  {
    "text": "the right values\nfor the bar object. OK, any questions\non how this works?",
    "start": "2016200",
    "end": "2024429"
  },
  {
    "text": "Yeah. On the STM operations,\nbut I don't think this really makes\nthat much of a difference.",
    "start": "2024430",
    "end": "2029830"
  },
  {
    "text": "But do we atomically\nupdate the global timestamp and then use the old one to\nmake the read set validation?",
    "start": "2029830",
    "end": "2037050"
  },
  {
    "text": "Yes. Or do we do it the\nother way around? Well, let's go back\nto what was said.",
    "start": "2037050",
    "end": "2045880"
  },
  {
    "text": "Yeah, so atomically increment\nthe global timestamp, and then you use the\nold global timestamp",
    "start": "2045880",
    "end": "2053020"
  },
  {
    "text": "to validate the read set. Yeah. The goal at the\nopposite [INAUDIBLE]. Right. Yeah.",
    "start": "2053020",
    "end": "2058169"
  },
  {
    "text": " OK. Any other questions on that?",
    "start": "2058170",
    "end": "2064154"
  },
  {
    "text": " All right, then to\nsummarize, so we've",
    "start": "2064155",
    "end": "2069699"
  },
  {
    "text": "talked about the various\noptions for TM implementation,",
    "start": "2069699",
    "end": "2076210"
  },
  {
    "text": "So we can be optimistic\nor pessimistic in terms of contention. We can be lazy or eager in\nterms of data versioning.",
    "start": "2076210",
    "end": "2082600"
  },
  {
    "text": "And that with the software TM\nsystems, the compiler or the--",
    "start": "2082600",
    "end": "2088969"
  },
  {
    "text": "typically, compiler or\nthe virtual memory system adds these barriers, these\nsoftware transactional memory",
    "start": "2088969",
    "end": "2098350"
  },
  {
    "text": "barriers or instrumentation\ncode to call into the transactional memory\nsystem to do the bookkeeping.",
    "start": "2098350",
    "end": "2105190"
  },
  {
    "text": "And the basic data structures\nare the transaction descriptor per thread or per transaction\nand transactional records",
    "start": "2105190",
    "end": "2114309"
  },
  {
    "text": "per data that keeps track\nof the state of the data, whether it's locked\nor version number.",
    "start": "2114310",
    "end": "2121839"
  },
  {
    "text": "So it turns out, of course, that\nthese barriers add overhead. And a lot of the work that\ngets done inside the barriers",
    "start": "2121840",
    "end": "2129220"
  },
  {
    "text": "is, in fact redundant. And so if you can\ndecompose the barriers into the individual\ncomponents, in fact,",
    "start": "2129220",
    "end": "2138310"
  },
  {
    "text": "you've got logging of the\nobject, opening it for write.",
    "start": "2138310",
    "end": "2144452"
  },
  {
    "text": "And you'll see that a lot\nof the operations that",
    "start": "2144452",
    "end": "2150130"
  },
  {
    "text": "are composed in the barriers\nare redundant and can be optimized away.",
    "start": "2150130",
    "end": "2155540"
  },
  {
    "text": "And so you get lower overhead. ",
    "start": "2155540",
    "end": "2161010"
  },
  {
    "text": "And then the question\nis, once you've done with this kind\nof optimization,",
    "start": "2161010",
    "end": "2168030"
  },
  {
    "text": "what kind of\nperformance do you get? So this is some data from\none of the papers that",
    "start": "2168030",
    "end": "2174960"
  },
  {
    "text": "was published on McRT, and it's\nlooking at two data structures, hash map and tree map.",
    "start": "2174960",
    "end": "2181119"
  },
  {
    "text": "And for hash map, I think it\nwas of 80% gets and 20% puts.",
    "start": "2181120",
    "end": "2192550"
  },
  {
    "text": "And so you look at\nthe different bars, this is the overhead\non a single processor.",
    "start": "2192550",
    "end": "2199910"
  },
  {
    "text": "So you're trying to look at\nhow much overhead you get. And so 0% would be the\nnon-threadsafe code.",
    "start": "2199910",
    "end": "2208820"
  },
  {
    "text": "The blue bar\nrepresents the overhead by using a single coarse\ngrain lock synchronized",
    "start": "2208820",
    "end": "2216580"
  },
  {
    "text": "over the whole method. And the reddish bar,\npurple-reddish bar",
    "start": "2216580",
    "end": "2225850"
  },
  {
    "text": "is what happens if you use\na software transactional memory that does not have\nany compiler optimization.",
    "start": "2225850",
    "end": "2232970"
  },
  {
    "text": "So then you get 70% to 80%\noverhead on a single processor. However, if you combine an STM\nwith compiler optimizations,",
    "start": "2232970",
    "end": "2242470"
  },
  {
    "text": "the overhead comes\ndown dramatically as shown by this pinkish bar\nor the pinkish orange bar.",
    "start": "2242470",
    "end": "2248980"
  },
  {
    "text": "And then the overhead is roughly\n40% over no concurrency control",
    "start": "2248980",
    "end": "2254980"
  },
  {
    "text": "and 30% over a\nsingle coarse grain",
    "start": "2254980",
    "end": "2260170"
  },
  {
    "text": "lock based synchronization. Yeah. [INAUDIBLE] this refers to the\npercentage of the total work",
    "start": "2260170",
    "end": "2266380"
  },
  {
    "text": "that is overhead, right? It's how much\nextra time it takes",
    "start": "2266380",
    "end": "2272020"
  },
  {
    "text": "to run your code with\nthese overheads in. And so if you have\nno extra code,",
    "start": "2272020",
    "end": "2280810"
  },
  {
    "text": "then that's the\ntime that you just got by running your\ncode without any support",
    "start": "2280810",
    "end": "2287230"
  },
  {
    "text": "for transactional memory or\nany synchronization at all. So it's not thread safe. So your code is not thread safe.",
    "start": "2287230",
    "end": "2294170"
  },
  {
    "text": "You can make it thread safe\nwith a coarse grain lock. As we've seen,\nthat's fairly easy. In Java, just put synchronized\naround the whole method.",
    "start": "2294170",
    "end": "2303579"
  },
  {
    "text": "It seems that would be a\nlot faster than [INAUDIBLE].",
    "start": "2303580",
    "end": "2308710"
  },
  {
    "text": "Faster in what sense? I assume it's only 10%. Yeah, it is faster but remember,\nthis is on a single processor.",
    "start": "2308710",
    "end": "2316960"
  },
  {
    "text": "It won't scale. We saw that earlier, right? Didn't scale. So now if you want\nsomething that's scalable,",
    "start": "2316960",
    "end": "2322847"
  },
  {
    "text": "then maybe you have to go to\nfine grained locking, which is actually not shown here,\nor you go to transactions.",
    "start": "2322847",
    "end": "2329710"
  },
  {
    "text": "And on a single processor,\nyour overhead is 30% to 40%",
    "start": "2329710",
    "end": "2334839"
  },
  {
    "text": "but really should compare it to\nthe overhead of synchronization",
    "start": "2334840",
    "end": "2341860"
  },
  {
    "text": "since after all, if you don't\nput anything in your code, then it's not thread safe. And so you can run it\ncorrectly in parallel mode.",
    "start": "2341860",
    "end": "2349970"
  },
  {
    "text": "And now with transactional\nmemory and compiler optimization, you\nget something that's",
    "start": "2349970",
    "end": "2357730"
  },
  {
    "text": "both scalable with\nreasonable overheads. ",
    "start": "2357730",
    "end": "2366040"
  },
  {
    "text": "So just to refresh your\nmemory, let's suppose that we have an atomic region,\nand we are assigning 42",
    "start": "2366040",
    "end": "2376010"
  },
  {
    "text": "to the f1 field of the object,\nwhat steps are required",
    "start": "2376010",
    "end": "2386970"
  },
  {
    "text": "to implement the atomic\nregion, assuming that there's some way of getting\ntransaction descriptor",
    "start": "2386970",
    "end": "2392640"
  },
  {
    "text": "and we're going to do things at\nthe granularity of an object. What are the operations\nwe need to perform?",
    "start": "2392640",
    "end": "2403460"
  },
  {
    "text": "Once we have the transaction\ndescriptor, what should we do? ",
    "start": "2403460",
    "end": "2409130"
  },
  {
    "text": "Yeah, It's optimistic read,\npessimistic write eager versioning just like the one\nexample that we just described.",
    "start": "2409130",
    "end": "2418380"
  },
  {
    "text": "We want to implement\nthis atomic region, what steps do we need to take?",
    "start": "2418380",
    "end": "2425145"
  },
  {
    "text": " Yeah. If it's unlocked--",
    "start": "2425145",
    "end": "2431010"
  },
  {
    "text": "Right. --like to validate\nthe [INAUDIBLE].",
    "start": "2431010",
    "end": "2436350"
  },
  {
    "text": "And then you get the\nlock in your write set",
    "start": "2436350",
    "end": "2442460"
  },
  {
    "text": "added to the undo log,\nand then write the data. OK, good. So open for write is kind\nof you check, and you're",
    "start": "2442460",
    "end": "2449942"
  },
  {
    "text": "going to log it, and\nthen you're actually going to do the write\nsince it's eager. Good.",
    "start": "2449942",
    "end": "2456140"
  },
  {
    "text": "All right. So here's some more data\nabout the performance of STM,",
    "start": "2456140",
    "end": "2461840"
  },
  {
    "text": "but here this STM\nis unoptimized. So it's not as optimized as the\nMcRT example with the compiler",
    "start": "2461840",
    "end": "2469789"
  },
  {
    "text": "optimization I just showed you. But the problem is, is you've\ngot this overhead in terms",
    "start": "2469790",
    "end": "2474830"
  },
  {
    "text": "of performance or, in this\ncase, it's two to eight times",
    "start": "2474830",
    "end": "2483390"
  },
  {
    "text": "per thread due to the software\ntransactional memory barriers. And if we decompose the time,\nwe see in these two examples,",
    "start": "2483390",
    "end": "2493380"
  },
  {
    "text": "vacation is this three\ntier server, example it's just K-means clustering.",
    "start": "2493380",
    "end": "2498900"
  },
  {
    "text": "And you see that a lot\nof the time the white and the black portions\nof the stacked bar chart",
    "start": "2498900",
    "end": "2507300"
  },
  {
    "text": "are due to the STM\nwrite which is black,",
    "start": "2507300",
    "end": "2513110"
  },
  {
    "text": "and the STM read which is write. So the STM barriers add a lot\nof overhead and committing",
    "start": "2513110",
    "end": "2523070"
  },
  {
    "text": "also adds a bunch of overhead. And so the question is, how\ncan we remove those overheads",
    "start": "2523070",
    "end": "2530450"
  },
  {
    "text": "by judiciously using hardware? Well, we could try\nand attack the need",
    "start": "2530450",
    "end": "2536990"
  },
  {
    "text": "to have barriers at all. And so if you have\na hardware mechanism",
    "start": "2536990",
    "end": "2542870"
  },
  {
    "text": "for doing transactional\nmemory, then you don't need explicit barriers. You don't need to tell the\ntransactional memory system,",
    "start": "2542870",
    "end": "2550220"
  },
  {
    "text": "hey, I'm doing a read, or\nhey, I'm doing a write. Why don't you go take the\nnecessary actions to implement",
    "start": "2550220",
    "end": "2557089"
  },
  {
    "text": "the transactional memory? All I need to do is\njust do loads and stores and let the hardware\ntransactional memory",
    "start": "2557090",
    "end": "2564950"
  },
  {
    "text": "system do the correct thing. And so, as you might\nimagine, the way",
    "start": "2564950",
    "end": "2572600"
  },
  {
    "text": "that we are going to\nimplement this in hardware is we're going to ride on top or\nexploit the fact that we already",
    "start": "2572600",
    "end": "2579839"
  },
  {
    "text": "have a coherent\nshared memory system. And you already have\ncaches, and so we",
    "start": "2579840",
    "end": "2587340"
  },
  {
    "text": "can do the data\nversioning in the caches. And we could do the\nconflict detection",
    "start": "2587340",
    "end": "2593010"
  },
  {
    "text": "by riding on top of coherency. So we already have\nthe mechanisms for implementing transactional\nmemory inside a modern processor",
    "start": "2593010",
    "end": "2603150"
  },
  {
    "text": "anyway. So we use the caches to do the\nwrite buffer or the undo log,",
    "start": "2603150",
    "end": "2610180"
  },
  {
    "text": "and the conflict\ndetection can be done by enhancing the\ncoherency protocol.",
    "start": "2610180",
    "end": "2617460"
  },
  {
    "text": "So the one component\nthat you also need in order to take a\ncheckpoint so that you",
    "start": "2617460",
    "end": "2625150"
  },
  {
    "text": "can come back and abort is you\nneed to checkpoint the register state. So you've got a context\nassociated with the register",
    "start": "2625150",
    "end": "2633839"
  },
  {
    "text": "contents of the\nprocessor, and you need to hold those values\naround so that when you abort,",
    "start": "2633840",
    "end": "2640829"
  },
  {
    "text": "you can come back and\nget to the same state. So you need the checkpoint\ngoes away somehow,",
    "start": "2640830",
    "end": "2646300"
  },
  {
    "text": "and a lot of processes\nallow you to do that. All right.",
    "start": "2646300",
    "end": "2651310"
  },
  {
    "text": "So let's look at a hardware\ntransactional memory design. So what we're going\nto do is we are",
    "start": "2651310",
    "end": "2657990"
  },
  {
    "text": "going to enhance our\nmetadata on the cache line. So we're going to\nadd for each cache",
    "start": "2657990",
    "end": "2664650"
  },
  {
    "text": "line we've got our messy\nstate bits, our coherence bits",
    "start": "2664650",
    "end": "2672351"
  },
  {
    "text": "that we've already discussed. And we're going to add two other\nbits, an R bit and a W bit.",
    "start": "2672352",
    "end": "2678490"
  },
  {
    "text": "What do these represent?",
    "start": "2678490",
    "end": "2683890"
  },
  {
    "text": "The read and write state. So if the R bit is set,\nsays, hey, this cache line",
    "start": "2683890",
    "end": "2691119"
  },
  {
    "text": "is part of my read state. If the W bit is set\nsays this cache line is part of my write state.",
    "start": "2691120",
    "end": "2698289"
  },
  {
    "text": "OK, so then now you\ncan think about how you do the conflict detection.",
    "start": "2698290",
    "end": "2703430"
  },
  {
    "text": "So if you see a shared request\nto a line that has a W bit set,",
    "start": "2703430",
    "end": "2712599"
  },
  {
    "text": "you know that is, in fact\na read-write conflict.",
    "start": "2712600",
    "end": "2717740"
  },
  {
    "text": "So you've already written this\nline to some other processor",
    "start": "2717740",
    "end": "2723190"
  },
  {
    "text": "wants to read it.  And so there's a\npotential conflict there.",
    "start": "2723190",
    "end": "2730510"
  },
  {
    "text": "If you see a exclusive\nrequest to a cache line that",
    "start": "2730510",
    "end": "2738940"
  },
  {
    "text": "has the R bit set,\nthen you know that we have a write-read\nconflict You've already",
    "start": "2738940",
    "end": "2745220"
  },
  {
    "text": "read the particular cache\nline, and some other processor wants to read it.",
    "start": "2745220",
    "end": "2750530"
  },
  {
    "text": "So that again, of\ncourse, is a conflict. Another example would be,\nhey, the W bit set and you",
    "start": "2750530",
    "end": "2758240"
  },
  {
    "text": "see an exclusive\nrequest that says, hey, there's a write-read conflict. I've already written\nthis cache line,",
    "start": "2758240",
    "end": "2763700"
  },
  {
    "text": "and there's other processor\nthat also wants to write it. And we're currently both\ninside a transaction,",
    "start": "2763700",
    "end": "2771060"
  },
  {
    "text": "and so something has to be\ndone to make sure that we deal with that conflict.",
    "start": "2771060",
    "end": "2776730"
  },
  {
    "text": "So with that in mind,\nlet's look at an example.",
    "start": "2776730",
    "end": "2781850"
  },
  {
    "text": "So we have in our CPU, the\nregisters and the read state",
    "start": "2781850",
    "end": "2786950"
  },
  {
    "text": "kind of is indicating\nthe extra state that we need to implement\ntransactional memory.",
    "start": "2786950",
    "end": "2793550"
  },
  {
    "text": "So we've got a register\ncheckpoint that we need to take, and then we have some\nextra state associated",
    "start": "2793550",
    "end": "2799070"
  },
  {
    "text": "with abort handlers-- where\nexactly do you go in the program",
    "start": "2799070",
    "end": "2805370"
  },
  {
    "text": "to deal with aborts if there's\nany software cleanup that needs to be done.",
    "start": "2805370",
    "end": "2811100"
  },
  {
    "text": "And then the key elements\nthat we've added are--",
    "start": "2811100",
    "end": "2818310"
  },
  {
    "text": "so our W bits which indicate\nour transactional memory state.",
    "start": "2818310",
    "end": "2827180"
  },
  {
    "text": "So R says it's part\nof the read set, and w says it's part\nof the write set.",
    "start": "2827180",
    "end": "2833670"
  },
  {
    "text": "So given an example now. This is a very simple\ntransaction, loads A and B",
    "start": "2833670",
    "end": "2842490"
  },
  {
    "text": "and stores 5 to C,\nand then we commit.",
    "start": "2842490",
    "end": "2848130"
  },
  {
    "text": "So first thing that\nhappens is we load A,",
    "start": "2848130",
    "end": "2853500"
  },
  {
    "text": "the cache line becomes valid. Let's assume for the\nsake of simplicity",
    "start": "2853500",
    "end": "2859800"
  },
  {
    "text": "that the cache line\nsize is a single word.",
    "start": "2859800",
    "end": "2865550"
  },
  {
    "text": "And we also have to indicate\nthat it's part of the read set. So we need to set the R bit.",
    "start": "2865550",
    "end": "2872960"
  },
  {
    "text": "Similarly for B, we set the\nR bit for the B address.",
    "start": "2872960",
    "end": "2882295"
  },
  {
    "text": " And then for C, we probably\nwant to put 5 in here just",
    "start": "2882295",
    "end": "2895910"
  },
  {
    "text": "to be correct. So this needs to be\npart of the write set.",
    "start": "2895910",
    "end": "2902060"
  },
  {
    "text": "So now that we get to the\ncommit point, we need to--",
    "start": "2902060",
    "end": "2910600"
  },
  {
    "text": " let's assume that\nwe did not see--",
    "start": "2910600",
    "end": "2916050"
  },
  {
    "text": "Well, we'll get to\nthe commit point, and assuming that there have\nbeen no other conflicts, what",
    "start": "2916050",
    "end": "2924770"
  },
  {
    "text": "should we do? ",
    "start": "2924770",
    "end": "2933280"
  },
  {
    "text": "So in particular is this\nvalue that we wrote to see",
    "start": "2933280",
    "end": "2942590"
  },
  {
    "text": "how do we indicate to\nthe rest of the system that, in fact, this is data that\nis actually committed state?",
    "start": "2942590",
    "end": "2954400"
  },
  {
    "text": "At the moment, it's\ninside our cache. We've indicated it's\npart of our write set, but the rest of the other\ntransactions and threads",
    "start": "2954400",
    "end": "2965230"
  },
  {
    "text": "don't actually know about it. Because remember, the property\nof transactions that we want",
    "start": "2965230",
    "end": "2970840"
  },
  {
    "text": "is isolation. That each of these transactions\nis isolated from each other. And the way that we get that is\nthat each of these transactions",
    "start": "2970840",
    "end": "2978250"
  },
  {
    "text": "are operating on their\nindividual caches. So now we get to\nthe commit point,",
    "start": "2978250",
    "end": "2983380"
  },
  {
    "text": "and we need to\npublicize the fact that we have written\nto the address, C. OK,",
    "start": "2983380",
    "end": "2992830"
  },
  {
    "text": "so how do we do that. Yeah. You upgrade to the\nexclusive state. You need to upgrade to\nthe exclusive state.",
    "start": "2992830",
    "end": "2999140"
  },
  {
    "text": "That's exactly\nwhat has to happen. So we need to upgrade. And so now we\nindicate that C is now",
    "start": "2999140",
    "end": "3007080"
  },
  {
    "text": "in the dirty state\nor exclusive state. And we send that out to\nall the other processes.",
    "start": "3007080",
    "end": "3014020"
  },
  {
    "text": "And let's suppose that\nsome other processor",
    "start": "3014020",
    "end": "3020870"
  },
  {
    "text": "was doing commits\nof a transaction with writes to A and D before\nthis transaction committed,",
    "start": "3020870",
    "end": "3029550"
  },
  {
    "text": "what would happen? Well, if we saw an upgrade\nto A, then we would say what?",
    "start": "3029550",
    "end": "3036600"
  },
  {
    "text": "Conflict, right? ",
    "start": "3036600",
    "end": "3042150"
  },
  {
    "text": "Because A is in our cache,\nand it's part of our read set.",
    "start": "3042150",
    "end": "3050039"
  },
  {
    "text": "And so, note maybe you read A\nbefore the transaction started,",
    "start": "3050040",
    "end": "3057330"
  },
  {
    "text": "that it could be in the cache\nbut not have the read R bit set.",
    "start": "3057330",
    "end": "3062650"
  },
  {
    "text": "So, just the fact\nthat A is in the cache doesn't mean that there's\ngoing to be a conflict.",
    "start": "3062650",
    "end": "3070650"
  },
  {
    "text": "But if there is, in fact,\nthe R bit set, then it says, hey, not only is\nit in the cache,",
    "start": "3070650",
    "end": "3076440"
  },
  {
    "text": "but I read it during\nthe transaction. And so now this\nwould be a conflict.",
    "start": "3076440",
    "end": "3082860"
  },
  {
    "text": "And this other case is where\nI see an upgrade for D, what happens as far as this\ntransaction is concerned?",
    "start": "3082860",
    "end": "3090940"
  },
  {
    "text": "Nothing, right? D is not in the cache. There's no match with\nthe entries in our cache,",
    "start": "3090940",
    "end": "3098580"
  },
  {
    "text": "and so there can be no conflict. So let's assume then that we--",
    "start": "3098580",
    "end": "3107410"
  },
  {
    "text": "going back to the commit-- so we validate by requesting\nthe write set lines.",
    "start": "3107410",
    "end": "3116553"
  },
  {
    "text": " So as kind of\ndescribed so far, how",
    "start": "3116553",
    "end": "3127740"
  },
  {
    "text": "would you describe the policies\nin this hardware system?",
    "start": "3127740",
    "end": "3143800"
  },
  {
    "text": "Think about it in terms of\nthe data versioning policy",
    "start": "3143800",
    "end": "3156030"
  },
  {
    "text": "and the conflict\ndetected policy. It's eager to [? control. ?]",
    "start": "3156030",
    "end": "3163140"
  },
  {
    "text": "It's eager, right? Because as when the--\nwell, is it eager? ",
    "start": "3163140",
    "end": "3171369"
  },
  {
    "text": "I mean, every time you're\ntrying to write or read-- When do the upgrades\nactually take place?",
    "start": "3171370",
    "end": "3178300"
  },
  {
    "text": "At the [INAUDIBLE]. Sounds optimistic\nto me, doesn't it? ",
    "start": "3178300",
    "end": "3187849"
  },
  {
    "text": "And then in terms of\nthe data versioning?",
    "start": "3187850",
    "end": "3199610"
  },
  {
    "text": "It's also lazy. It's lazy, optimistic, yeah. That's the way I feel about--",
    "start": "3199610",
    "end": "3205260"
  },
  {
    "text": "Yeah, Excuse me, we're using the\ncaches like the logs and stuff, right? It's the write buffer.",
    "start": "3205260",
    "end": "3212039"
  },
  {
    "text": "It's the write buffer. It's buffering the writes. And then when you get\nto the commit point,",
    "start": "3212040",
    "end": "3218520"
  },
  {
    "text": "you say, OK, here are\nall the things I wrote. Now I'm going to publish\nthem to the world.",
    "start": "3218520",
    "end": "3223900"
  },
  {
    "text": "And anybody else who\nhappened to have-- so it's exactly the\ncase that we described,",
    "start": "3223900",
    "end": "3230500"
  },
  {
    "text": "which is you get to\nthe commit point, you have a bunch of\nthings in your write set, you're going to compare them\nto everybody's read set.",
    "start": "3230500",
    "end": "3237455"
  },
  {
    "text": "And how are you\ngoing to do that? By sending out these upgrades.",
    "start": "3237455",
    "end": "3243300"
  },
  {
    "text": "Yeah. Trying to relate this with\nthe existing controls. Like now when we try to store\nC, in general, what we would do",
    "start": "3243300",
    "end": "3252450"
  },
  {
    "text": "is we would go to\nan exclusive state, and it was not present\nin any other cache.",
    "start": "3252450",
    "end": "3257550"
  },
  {
    "text": "And here we use\nthe exclusive state as a way to indicate\nthat, OK, I'm afraid",
    "start": "3257550",
    "end": "3262810"
  },
  {
    "text": "[? about ?] committing. So in this particular\npragma, do we think about--",
    "start": "3262810",
    "end": "3268770"
  },
  {
    "text": "whenever we read something,\nwe go to the modify state first and then-- I'm just trying to think of\nit from a protocol transition",
    "start": "3268770",
    "end": "3275340"
  },
  {
    "text": "perspective. So as far as the state of\nthe cache line, remember,",
    "start": "3275340",
    "end": "3287244"
  },
  {
    "text": "it's isolated. So you don't really\nparticipate in coherence",
    "start": "3287244",
    "end": "3294660"
  },
  {
    "text": "until you get to\nthe commit point. ",
    "start": "3294660",
    "end": "3300862"
  },
  {
    "text": "That makes sense. Yeah. Yeah. For the cache lines that\nare in the read set,",
    "start": "3300862",
    "end": "3308170"
  },
  {
    "text": "I know for the writes that we\nhave to issue a read exclusive. What do we have to\ndo for the read set?",
    "start": "3308170",
    "end": "3315270"
  },
  {
    "text": "We just issue just\nlike a read exclusive? Yeah, you just do a read.",
    "start": "3315270",
    "end": "3322019"
  },
  {
    "text": "Let's assume that you\ngo get it from memory. It's shared. ",
    "start": "3322020",
    "end": "3329259"
  },
  {
    "text": "Or you do a read, you\nget it some memory, or you get it from whoever had\nit in its modified state lost.",
    "start": "3329260",
    "end": "3336670"
  },
  {
    "text": " So we've determined that this\nis, in fact, lazy, optimistic.",
    "start": "3336670",
    "end": "3344175"
  },
  {
    "text": " So we can do the review.",
    "start": "3344175",
    "end": "3353830"
  },
  {
    "text": "Let's do one more\nexample just to really--",
    "start": "3353830",
    "end": "3359770"
  },
  {
    "text": "this is, in fact, an explicit,\nlazy, optimistic scheme",
    "start": "3359770",
    "end": "3366400"
  },
  {
    "text": "in which you're not-- the way that you do coherence\nis with the transactional memory",
    "start": "3366400",
    "end": "3372070"
  },
  {
    "text": "system. So the idea here is that when\nyou get to a commit point,",
    "start": "3372070",
    "end": "3378880"
  },
  {
    "text": "you take all the\nstate that you have, and you update\neverybody else, which",
    "start": "3378880",
    "end": "3385130"
  },
  {
    "text": "is classic, lazy, optimistic. But there are no other\nstates because all the ever",
    "start": "3385130",
    "end": "3394490"
  },
  {
    "text": "happens is transactions execute,\nthey get to the commit point,",
    "start": "3394490",
    "end": "3399740"
  },
  {
    "text": "and then they send out all the\nstate that they've modified and update everybody else. So that's what's happening here.",
    "start": "3399740",
    "end": "3407360"
  },
  {
    "text": "We've got a bunch\nof processes, three. And then each of\nthem is executing",
    "start": "3407360",
    "end": "3415670"
  },
  {
    "text": "transactions that\ndo reads and writes to two different variables.",
    "start": "3415670",
    "end": "3423260"
  },
  {
    "text": "And the assumptions are there's\none commit per execution",
    "start": "3423260",
    "end": "3428960"
  },
  {
    "text": "step across all processes. And the reason you want\nthat for simplicity is, hey,",
    "start": "3428960",
    "end": "3434569"
  },
  {
    "text": "there's only one. It's kind of a bus-based scheme\nthat only one transaction is committing at a time, and\nit's updating everybody else.",
    "start": "3434570",
    "end": "3442339"
  },
  {
    "text": "And when one transaction\ncauses another transaction to abort and re-execute,\nyou can assume",
    "start": "3442340",
    "end": "3448880"
  },
  {
    "text": "that the commit of one\ntransaction can overlap with the begin of another transaction.",
    "start": "3448880",
    "end": "3455359"
  },
  {
    "text": "So with that in\nmind, then the idea is given these processes\nthree processes and these four",
    "start": "3455360",
    "end": "3464630"
  },
  {
    "text": "transactions, why don't you\nlay out the fill out the table",
    "start": "3464630",
    "end": "3475670"
  },
  {
    "text": "as shown here? So what actions? What's the read set P1, the\nwrite set on P1, and the actions",
    "start": "3475670",
    "end": "3483440"
  },
  {
    "text": "and read and write sets\non the other processes. And so it's partially\nfilled in here.",
    "start": "3483440",
    "end": "3491549"
  },
  {
    "text": "So we started executing\ntransaction 1 on processor 1.",
    "start": "3491550",
    "end": "3499290"
  },
  {
    "text": "And at the point at which\nwe do this write of C,",
    "start": "3499290",
    "end": "3506810"
  },
  {
    "text": "A is in the read set,\nand A is in the write set",
    "start": "3506810",
    "end": "3512960"
  },
  {
    "text": "and C is in the write\nset for processor 1. ",
    "start": "3512960",
    "end": "3519460"
  },
  {
    "text": "A is in read set of\nprocesses 2 and so on.",
    "start": "3519460",
    "end": "3525750"
  },
  {
    "text": "So now we're at the\npoint which C commits.",
    "start": "3525750",
    "end": "3547310"
  },
  {
    "text": "OK, so what do we do in\norder to validate the--",
    "start": "3547310",
    "end": "3555620"
  },
  {
    "text": "[INAUDIBLE] so\nprocessor 1 commands.",
    "start": "3555620",
    "end": "3561590"
  },
  {
    "text": "Sorry, processor 1,\nC yeah, this commits. C is the commit. So yeah, transaction 1\ncommits on processor 1.",
    "start": "3561590",
    "end": "3571230"
  },
  {
    "text": "What do we need to do?  Yeah?",
    "start": "3571230",
    "end": "3578609"
  },
  {
    "text": "Nothing in its read set is\nin someone else's write side. So what's the rule for\na lazy, optimistic?",
    "start": "3578610",
    "end": "3585150"
  },
  {
    "start": "3585150",
    "end": "3592069"
  },
  {
    "text": "What's the rule for\nlazy, optimistic?  We just talked about it.",
    "start": "3592070",
    "end": "3598089"
  },
  {
    "text": " We saw it last lecture and\na couple of times today.",
    "start": "3598090",
    "end": "3606520"
  },
  {
    "text": "Someone tell me. You merge what the write set\nto other people read set.",
    "start": "3606520",
    "end": "3613320"
  },
  {
    "text": "Exactly. OK, so what's the right set of\nthis committing transaction? [INAUDIBLE]",
    "start": "3613320",
    "end": "3619529"
  },
  {
    "text": "OK. What is the read set of\nthe other transactions?",
    "start": "3619530",
    "end": "3632486"
  },
  {
    "text": "[INAUDIBLE] Doesn't have any.",
    "start": "3632486",
    "end": "3637609"
  },
  {
    "text": "So it looks like we're OK. ",
    "start": "3637610",
    "end": "3659040"
  },
  {
    "text": "Huh, I should have gone\nback to this last case. How about this case?",
    "start": "3659040",
    "end": "3667380"
  },
  {
    "text": "Transaction 2 is committing. ",
    "start": "3667380",
    "end": "3674890"
  },
  {
    "text": "Transaction 4 has to be started. Yes, transaction\n4 has to restart because the read set of\nthat transaction 4 contains.",
    "start": "3674890",
    "end": "3683780"
  },
  {
    "text": "E. So the rule says, hey,\nwhen transaction 2 commits,",
    "start": "3683780",
    "end": "3698770"
  },
  {
    "text": "we can overlap that with the\nbeginning of transaction four, which had to abort and restart.",
    "start": "3698770",
    "end": "3704560"
  },
  {
    "text": "So anyway, you can go\nand look at the details, but in general, you\nshould be able to solve",
    "start": "3704560",
    "end": "3711130"
  },
  {
    "text": "problems something like this,\ngiven a sequence of transactions",
    "start": "3711130",
    "end": "3718900"
  },
  {
    "text": "and some rules to follow, you\ncan figure out what happens. Yeah. In terms of this is\nactually implemented,",
    "start": "3718900",
    "end": "3724630"
  },
  {
    "text": "do we assume it's all exactly\nthe same time when we just looked at the other\nprocesses in the [INAUDIBLE].",
    "start": "3724630",
    "end": "3731920"
  },
  {
    "text": "Yeah, just assume\nthat at the time that the commit\nhappens, globally known",
    "start": "3731920",
    "end": "3739150"
  },
  {
    "text": "what was in the right state\nof the committing transaction",
    "start": "3739150",
    "end": "3744819"
  },
  {
    "text": "or processor. Is it serialized? And you have to batch\ntransactions, so simultaneously",
    "start": "3744820",
    "end": "3751260"
  },
  {
    "text": "in that-- No. I mean, we could imagine\nsystems that are not",
    "start": "3751260",
    "end": "3757180"
  },
  {
    "text": "buses in which that happens. And in which case, the problem\nwould be a lot more difficult.",
    "start": "3757180",
    "end": "3763580"
  },
  {
    "text": "But with a bus, the\nnice thing about it is only one transaction\ncan be on at any one time.",
    "start": "3763580",
    "end": "3769880"
  },
  {
    "text": "And that simplifies matters. We always like to\nserialize things",
    "start": "3769880",
    "end": "3775240"
  },
  {
    "text": "because serialization means\nit's easier to think about and easier to reason about.",
    "start": "3775240",
    "end": "3781190"
  },
  {
    "text": "And buses give you that\nserialization point. Yeah. From an instruction\nset perspective,",
    "start": "3781190",
    "end": "3787190"
  },
  {
    "text": "so we just put atomic\nand then brackets around, let's say, for getting the\nBeginT [? rather ?] than commit?",
    "start": "3787190",
    "end": "3793980"
  },
  {
    "text": "Yeah. So is there an\nexplicit instruction in hardware from\nan INC standpoint?",
    "start": "3793980",
    "end": "3800380"
  },
  {
    "text": "Yes, it would be. It would be. Yeah.",
    "start": "3800380",
    "end": "3805750"
  },
  {
    "text": "I'm just-- at this stage\nnow like transaction P1 is commit table, and it\nhas a C in the write set.",
    "start": "3805750",
    "end": "3813830"
  },
  {
    "text": "And transaction P3 also\nhas a C in its write set.",
    "start": "3813830",
    "end": "3819100"
  },
  {
    "text": "So it should have both write? Should it? I get the read set matters.",
    "start": "3819100",
    "end": "3825837"
  },
  {
    "text": "Only the read set matters. It's like overwriting. It's overwriting, yeah. It doesn't matter. ",
    "start": "3825837",
    "end": "3832730"
  },
  {
    "text": "The question is who\ngets there first? But from the point of view of\nthe consistency of the data,",
    "start": "3832730",
    "end": "3844339"
  },
  {
    "text": "it doesn't matter. It never read it. It just overrode it.",
    "start": "3844340",
    "end": "3850030"
  },
  {
    "text": "So you'll still get\nthe right result. Yeah. When you said once it utilizes\nit, you just duplicate the bus.",
    "start": "3850030",
    "end": "3856360"
  },
  {
    "text": "Is that how you get\naround this on the bus? [INAUDIBLE] space, of course. You could have\nmultiple buses, right?",
    "start": "3856360",
    "end": "3862910"
  },
  {
    "text": "And then if you\nhave multiple buses, then you've lost a\nserialization benefit,",
    "start": "3862910",
    "end": "3869570"
  },
  {
    "text": "and now you've got to think\nabout different schemes. [INAUDIBLE] configure\n[INAUDIBLE]. Right.",
    "start": "3869570",
    "end": "3874730"
  },
  {
    "text": " I mean, all of these\nthings are necessary if you want scalable performance,\nand buses don't scale.",
    "start": "3874730",
    "end": "3882690"
  },
  {
    "text": "We only think about\nbuses because they're easier to talk about in\nclasses like this where-- if you go back in time, yes, the\nearliest multi-core processors",
    "start": "3882690",
    "end": "3890809"
  },
  {
    "text": "were, in fact, bus based,\nbecause that was the simplest to implement and building\nhardware was very expensive.",
    "start": "3890810",
    "end": "3897300"
  },
  {
    "text": "But today, nobody builds\nanything with a bus. It's just doesn't perform well.",
    "start": "3897300",
    "end": "3904222"
  },
  {
    "text": "At the end of his example,\nlike, on this very slide, if we just go to the\nend of the table?",
    "start": "3904222",
    "end": "3910609"
  },
  {
    "text": "We see that when we're\ncommitting T4, T3 restarts,",
    "start": "3910610",
    "end": "3916130"
  },
  {
    "text": "I believe. Where? If you just go like\none more next slide.",
    "start": "3916130",
    "end": "3921450"
  },
  {
    "text": " So, in this case, I just want to\nclarify that the reason for this",
    "start": "3921450",
    "end": "3929740"
  },
  {
    "text": "is because there is\na conflict between-- ",
    "start": "3929740",
    "end": "3936940"
  },
  {
    "text": "is it the conflict\nbetween E, which is like it's in the\nread set for T4.",
    "start": "3936940",
    "end": "3946090"
  },
  {
    "text": "So the right set\nfor T4 is B and C.",
    "start": "3946090",
    "end": "3952900"
  },
  {
    "text": "But there's no conflict\nbetween the write set of T4 and the read set of T3. ",
    "start": "3952900",
    "end": "3961360"
  },
  {
    "text": "Hold on. You said it was restarting,\nbut I don't see the restart.",
    "start": "3961360",
    "end": "3967510"
  },
  {
    "text": "For C T3 is that another-- No, that's committing. Did that install for\n[INAUDIBLE] and C T3?",
    "start": "3967510",
    "end": "3975680"
  },
  {
    "text": "Yeah. That's [? installing. ?] It just installed [INAUDIBLE]. ",
    "start": "3975680",
    "end": "3982780"
  },
  {
    "text": "Let's see. Sorry, I don't-- So can you only\ncommit one at a time?",
    "start": "3982780",
    "end": "3988579"
  },
  {
    "text": "Is that why it's restarting? Yeah, that was the rule\nthat you can commit one.",
    "start": "3988580",
    "end": "3993780"
  },
  {
    "text": "Yeah. Oh, I see. Yeah, Yeah.",
    "start": "3993780",
    "end": "3998974"
  },
  {
    "text": "W C 4 and W E 5 basically in P2.",
    "start": "3998974",
    "end": "4005170"
  },
  {
    "text": "But based on the\ncode that we have. Yeah, it's possible. Yeah Yeah.",
    "start": "4005170",
    "end": "4010277"
  },
  {
    "text": "[LAUGHS] I won't guarantee\nthere's no bugs in it. [LAUGHS] Yeah.",
    "start": "4010277",
    "end": "4015880"
  },
  {
    "text": "Probably should fix that. So somebody is paying attention.",
    "start": "4015880",
    "end": "4022700"
  },
  {
    "text": "Any other question? All right. Gosh.",
    "start": "4022700",
    "end": "4027900"
  },
  {
    "text": "All right. So hardware, transactional\nmemory support has been implemented\nin Intel architectures.",
    "start": "4027900",
    "end": "4034210"
  },
  {
    "text": "For various reasons it\ndidn't work out so well. The software to use\nit wasn't developed",
    "start": "4034210",
    "end": "4042910"
  },
  {
    "text": "as well as one would hope. And it was not all that\ncapable in the sense",
    "start": "4042910",
    "end": "4049900"
  },
  {
    "text": "that transactions could\nabort for almost any reason whatsoever.",
    "start": "4049900",
    "end": "4055430"
  },
  {
    "text": "And a lot of the times you had\nmore aborts than necessary.",
    "start": "4055430",
    "end": "4060500"
  },
  {
    "text": "But what finally\nkind of put the nail in the coffin of the\ntransactional memory support",
    "start": "4060500",
    "end": "4066220"
  },
  {
    "text": "was it opened up security\nholes that people exploited. And there's still in\nthe Intel roadmap,",
    "start": "4066220",
    "end": "4077410"
  },
  {
    "text": "there is the plan to put\nin transactional memory, but we haven't seen any\nimplementations yet.",
    "start": "4077410",
    "end": "4083440"
  },
  {
    "text": "So if you look at\nthe Intel ISA manual,",
    "start": "4083440",
    "end": "4089589"
  },
  {
    "text": "then there are the\ndefinitions of instructions to support transactional memory\nbut the latest implementations",
    "start": "4089590",
    "end": "4098950"
  },
  {
    "text": "don't have them in. So just to recap then,\ntransactional memory",
    "start": "4098950",
    "end": "4106149"
  },
  {
    "text": "implementation you can\ndo software or hardware. You have the ability to\nmake these trade offs",
    "start": "4106149",
    "end": "4113259"
  },
  {
    "text": "between the different\npoints in the design space and that if you\nreally want to reduce",
    "start": "4113260",
    "end": "4119950"
  },
  {
    "text": "the overheads of software, then\nhardware is a key requirement.",
    "start": "4119950",
    "end": "4125990"
  },
  {
    "text": "And once you understand\ncache coherence, it's a minor delta\nto understanding",
    "start": "4125990",
    "end": "4135100"
  },
  {
    "text": "how you would implement a\ntransactional memory system. Yeah It's surprising that towards\nthe end of the lecture,",
    "start": "4135100",
    "end": "4142250"
  },
  {
    "text": "you just told that\nmaybe Intel is not-- currently, it's not\nvery widespread,",
    "start": "4142250",
    "end": "4147380"
  },
  {
    "text": "is it, the use of\ntransactional memory? And so this is\nwith the X86 series",
    "start": "4147380",
    "end": "4152479"
  },
  {
    "text": "because you spoke\nabout [INAUDIBLE]. But does this [? Py ?] even\nthink about supporting something",
    "start": "4152479",
    "end": "4157790"
  },
  {
    "text": "like this?  It's flexible, and\nit [? sucks. ?]",
    "start": "4157790",
    "end": "4164028"
  },
  {
    "text": "So the extensions means\nthat I could add something-- You could add something\nto it if you wanted.",
    "start": "4164029",
    "end": "4169040"
  },
  {
    "text": "IBM has also\nimplemented processes that add in, so has SUN before\nthey got acquired by Oracle.",
    "start": "4169040",
    "end": "4176549"
  },
  {
    "text": "So lots of people have\nexperimented with it. In terms of commercial uses of\nit, there's been more software.",
    "start": "4176550",
    "end": "4186020"
  },
  {
    "text": "But software where you\nlocalize a transactional memory",
    "start": "4186020",
    "end": "4191149"
  },
  {
    "text": "use to places that would be\nvery difficult to implement with locking. So certain database, system\nimplementations that kind of use",
    "start": "4191149",
    "end": "4201530"
  },
  {
    "text": "at the core of the\ndatabase management system, use transactional\nmemory ideas in order",
    "start": "4201530",
    "end": "4206780"
  },
  {
    "text": "to implement parts\nof the system. Yeah. I have a follow-on\nto the answer.",
    "start": "4206780",
    "end": "4212460"
  },
  {
    "text": "So I think one\nthing that relates to the previous slide was\none of the major problems was if something goes out\nof the cache, for example,",
    "start": "4212460",
    "end": "4219560"
  },
  {
    "text": "then you basically abort it. Like having companies talk\nabout having a separate cache",
    "start": "4219560",
    "end": "4226790"
  },
  {
    "text": "or somehow prioritizing-- Well, you never want to\nspecialize because if you",
    "start": "4226790",
    "end": "4232550"
  },
  {
    "text": "specialize, then you don't\nget to use those resources for programs that are not\nusing transactional memory.",
    "start": "4232550",
    "end": "4239470"
  },
  {
    "text": "So you'd like to reuse\nthe same resources. What about some\nof priority order.",
    "start": "4239470",
    "end": "4244730"
  },
  {
    "text": "Like so, I understand\nwe use [INAUDIBLE].",
    "start": "4244730",
    "end": "4250070"
  },
  {
    "text": "There's lots of literature\non every kind of-- transactional memory\nhas been an area",
    "start": "4250070",
    "end": "4256700"
  },
  {
    "text": "that has generated\na huge amount of-- you go back 10 years\nor so, and there's just",
    "start": "4256700",
    "end": "4263990"
  },
  {
    "text": "a lot of work in this area. And I can point you to it. And it's probably-- if you just\ntype in transactional memory",
    "start": "4263990",
    "end": "4274909"
  },
  {
    "text": "into Google, you'll\nsee an unlimited number of ideas and papers. Yeah.",
    "start": "4274910",
    "end": "4280400"
  },
  {
    "text": "So I guess my takeaway is it\nseems that transactional memory works better in fine\ngrained locking than in less",
    "start": "4280400",
    "end": "4289875"
  },
  {
    "text": "fine grained locking. But in practice, commercially\nit's not really used that much. It's not used that\nmuch because--",
    "start": "4289875",
    "end": "4296869"
  },
  {
    "text": " well, it's not used\nthat much because you",
    "start": "4296870",
    "end": "4305390"
  },
  {
    "text": "have to have this transactional\nmemory system implemented",
    "start": "4305390",
    "end": "4311840"
  },
  {
    "text": "in software. And in order to really\nget good performance, you need compiler support.",
    "start": "4311840",
    "end": "4317245"
  },
  {
    "text": " And then you've got something\nthat is not Completely general,",
    "start": "4317245",
    "end": "4327750"
  },
  {
    "text": "in the sense that now you now\nneed to clone your code in order",
    "start": "4327750",
    "end": "4333980"
  },
  {
    "text": "to make it work with a\ntransactional memory system. And so that makes the whole\nsystem a little less robust.",
    "start": "4333980",
    "end": "4342720"
  },
  {
    "text": "And so the right way to\nthink about the ways in which",
    "start": "4342720",
    "end": "4348230"
  },
  {
    "text": "transactional memory\nhas really been used is people come up with\ndata structures that",
    "start": "4348230",
    "end": "4353420"
  },
  {
    "text": "are optimized for working\nwith transactional memory. And then they have\npart of their system",
    "start": "4353420",
    "end": "4359810"
  },
  {
    "text": "that is being implemented\nwith transactional memory,",
    "start": "4359810",
    "end": "4365150"
  },
  {
    "text": "but they're not using\ntransactional memory over the whole of\ntheir parallel system.",
    "start": "4365150",
    "end": "4370380"
  },
  {
    "text": "They just localize\nthe components of it. And will that\nlocalized component be on the transactional\nunits protocol?",
    "start": "4370380",
    "end": "4378380"
  },
  {
    "text": "It's usually, most of\nthe commercial systems that use transactional memory\nuse software-based schemes.",
    "start": "4378380",
    "end": "4383844"
  },
  {
    "text": "Almost no one uses\n[INAUDIBLE] schemes. Almost nobody uses the hardware\nbecause the hardware is broken. ",
    "start": "4383845",
    "end": "4392300"
  },
  {
    "text": "Yeah. Is there any like time in the\nfuture where is actually going to work like in the hardware?",
    "start": "4392300",
    "end": "4397480"
  },
  {
    "text": "[LAUGHTER] That's a good question. It's an open question. Yeah. ",
    "start": "4397480",
    "end": "4404340"
  },
  {
    "text": "All right. I think we don't have\nmuch time to talk about heterogeneous parallelism.",
    "start": "4404340",
    "end": "4410610"
  },
  {
    "text": "But let me get going a little. ",
    "start": "4410610",
    "end": "4418729"
  },
  {
    "text": "So far, we talked about\nusing processes and GPUs",
    "start": "4418729",
    "end": "4429930"
  },
  {
    "text": "and SIMD execution to\nexploit parallelism.",
    "start": "4429930",
    "end": "4435600"
  },
  {
    "text": "And the focus has been on\ngeneral purpose computation",
    "start": "4435600",
    "end": "4443940"
  },
  {
    "text": "and writing parallel programs\nthat are fairly general.",
    "start": "4443940",
    "end": "4451020"
  },
  {
    "text": "However, it turns\nout that if you want to get much better\nefficiency in terms",
    "start": "4451020",
    "end": "4460260"
  },
  {
    "text": "of the use of your hardware,\nyou might want something which is much more specialized.",
    "start": "4460260",
    "end": "4466180"
  },
  {
    "text": "And so what we want\nto talk about today",
    "start": "4466180",
    "end": "4471540"
  },
  {
    "text": "or a couple of minutes,\nkind of just introduce the idea, sort of\nwhat can you do",
    "start": "4471540",
    "end": "4477300"
  },
  {
    "text": "to specialize your CPU to make\nit tremendously more efficient.",
    "start": "4477300",
    "end": "4482320"
  },
  {
    "text": "So we've talked to so far\nabout given the current set of resources that you might have\nin a modern CPU or modern GPU,",
    "start": "4482320",
    "end": "4490780"
  },
  {
    "text": "how do you use those\nmost effectively. But you can go further\nand say, what if I've",
    "start": "4490780",
    "end": "4496420"
  },
  {
    "text": "got something that I want to-- some algorithm that I want\nto run very efficiently,",
    "start": "4496420",
    "end": "4502520"
  },
  {
    "text": "how can I make that work\nmuch more energy efficiently? ",
    "start": "4502520",
    "end": "4511780"
  },
  {
    "text": "You look across most\nreal-world applications, they've got complex\nworkload characteristics.",
    "start": "4511780",
    "end": "4519130"
  },
  {
    "text": "Some of them have\nparallelism that you can exploit using multiple threads.",
    "start": "4519130",
    "end": "4524180"
  },
  {
    "text": "Some of them have\nSIMD parallelism that you can exploit by using\nvector and SIMD execution.",
    "start": "4524180",
    "end": "4532300"
  },
  {
    "text": "If you look at the memory\naccesses, which, of course, are a key component to the\nperformance of your application,",
    "start": "4532300",
    "end": "4540880"
  },
  {
    "text": "some of the memory accesses that\nhave been made are predictable. And if they're predictable,\nthen, of course,",
    "start": "4540880",
    "end": "4546320"
  },
  {
    "text": "you can prefetch those accesses. If they're not predictable,\nthen maybe they cache well.",
    "start": "4546320",
    "end": "4553489"
  },
  {
    "text": "So hopefully, you can\nget one or potentially both of these characteristics.",
    "start": "4553490",
    "end": "4559990"
  },
  {
    "text": "And so the question\nthen is, if you want to be able to exploit the\nwide variety of characteristics",
    "start": "4559990",
    "end": "4568120"
  },
  {
    "text": "of the application\nspace, then maybe you want to specialize\nyour components",
    "start": "4568120",
    "end": "4575329"
  },
  {
    "text": "to exploit the particular\ncharacteristics of your application.",
    "start": "4575330",
    "end": "4582420"
  },
  {
    "text": "And so that's the\nidea of heterogeneity. And it turns out that\nall modern processes",
    "start": "4582420",
    "end": "4590060"
  },
  {
    "text": "are in fact heterogeneous, So\ntake the Skylake processor.",
    "start": "4590060",
    "end": "4596660"
  },
  {
    "text": "That's the Intel I7 core\narchitecture in these machines.",
    "start": "4596660",
    "end": "4603330"
  },
  {
    "text": "They are, in fact,\nheterogeneous. So the focus of\nour programming has",
    "start": "4603330",
    "end": "4609980"
  },
  {
    "text": "been on the CPU cores and\ntheir associated caches.",
    "start": "4609980",
    "end": "4615510"
  },
  {
    "text": "But, of course, they've also\ngot integrated GPU and graphics",
    "start": "4615510",
    "end": "4622429"
  },
  {
    "text": "and media unit, which\ntakes a significant amount of the area of the chip.",
    "start": "4622430",
    "end": "4627630"
  },
  {
    "text": "And they've also got some\nother specialized components.",
    "start": "4627630",
    "end": "4636020"
  },
  {
    "text": "So the point here is\nthat this heterogeneity means that you can\nget greater efficiency",
    "start": "4636020",
    "end": "4643750"
  },
  {
    "text": "in the use of the resources\nof the silicon in terms",
    "start": "4643750",
    "end": "4649930"
  },
  {
    "text": "of the use of energy. But, of course, it creates\na more difficult programming",
    "start": "4649930",
    "end": "4656230"
  },
  {
    "text": "paradigm. We've already seen that. You need multiple threads\nfor the CPU cores.",
    "start": "4656230",
    "end": "4661550"
  },
  {
    "text": "You need some of data\nparallel programming model like CUDA for the GPU.",
    "start": "4661550",
    "end": "4668540"
  },
  {
    "text": "And you might need a\ndifferent programming model for the media components. And so next time, we want\nto talk a little bit more",
    "start": "4668540",
    "end": "4676210"
  },
  {
    "text": "about the types of\nheterogeneity that you might see in the modern\ncomputing landscape",
    "start": "4676210",
    "end": "4682780"
  },
  {
    "text": "and talk about how you address\nsome of these programming aspects, especially\nfor, applications",
    "start": "4682780",
    "end": "4692810"
  },
  {
    "text": "such as the ones that you're\ndoing in your programming assignment, so machine\nlearning applications.",
    "start": "4692810",
    "end": "4702150"
  },
  {
    "text": "So we'll continue\nthat next week.",
    "start": "4702150",
    "end": "4709030"
  },
  {
    "start": "4709030",
    "end": "4713000"
  }
]