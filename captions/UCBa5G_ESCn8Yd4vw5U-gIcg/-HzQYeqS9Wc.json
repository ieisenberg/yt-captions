[
  {
    "text": "OK. Welcome, everybody, to the 14th annual Christmas Tree Lecture.",
    "start": "11000",
    "end": "20540"
  },
  {
    "text": "I don't know how many of you have seen any of the others, but at this time of year, I try to say, what's the coolest thing I learned about trees during the year?",
    "start": "20540",
    "end": "31400"
  },
  {
    "text": "And. And it seems that isn't there's always plenty of stuff new to learn about trees.",
    "start": "31400",
    "end": "39350"
  },
  {
    "text": "And who knows what I'll learn next year. But but if I don't learn any more, well, maybe this will be the last.",
    "start": "39350",
    "end": "46170"
  },
  {
    "text": "But I did. I doubt it. So nice to see a lot of old friends and a lot of new friends here tonight.",
    "start": "46170",
    "end": "53149"
  },
  {
    "text": "I got no I'm in a great position when you're giving a talk.",
    "start": "53150",
    "end": "58270"
  },
  {
    "text": "It's suppose it's always more fun when you have something to say.",
    "start": "58270",
    "end": "64010"
  },
  {
    "text": "And in fact, down the line, I think I'm suffering from from a little bit of a I've too much to say tonight because there's I learned so much about this topic,",
    "start": "64010",
    "end": "73900"
  },
  {
    "text": "BDD since the beginning of summer, that that I can't really tell you even half of it.",
    "start": "73900",
    "end": "82130"
  },
  {
    "text": "I mean, I would need three or four lectures to go through it. And I'm and I really believe that that if I were still active in teaching, I would enjoy teaching a one of for one quarter course.",
    "start": "82130",
    "end": "95840"
  },
  {
    "text": "Just out of the out of this part of my book that I've got to finish the draft.",
    "start": "95840",
    "end": "103189"
  },
  {
    "text": "Take a look at this. I'll see if Jason can get out of here. This is you can download this right now has called a pre farcical.",
    "start": "103190",
    "end": "111500"
  },
  {
    "text": "You can download this. And I have to warn you, it's one hundred and forty something, hundred and forty some pages, including the index.",
    "start": "111500",
    "end": "123140"
  },
  {
    "text": "And not only that, but I'm going to change it next week. So if you download it now, it would be a mistake to print it.",
    "start": "123140",
    "end": "130229"
  },
  {
    "text": "No, wait, wait a couple of weeks. But what's going to happen is that after after I after I make the revisions that I that I recently learned about,",
    "start": "130230",
    "end": "141500"
  },
  {
    "text": "then then I'm going to combine this with Professor School 1A, which is will then make a paperback book called Farcical One.",
    "start": "141500",
    "end": "151220"
  },
  {
    "text": "And and we're expecting a published at about the end of January. And that will that will then.",
    "start": "151220",
    "end": "159080"
  },
  {
    "text": "Then the beginning of art of computer programing volume four will all be in place then starting with fiscal zero,",
    "start": "159080",
    "end": "166550"
  },
  {
    "text": "one, two, three and four, which makes about eight hundred and some pages of material.",
    "start": "166550",
    "end": "173180"
  },
  {
    "text": "This is the missing link that that goes between zero and the. And two, three and four that that have already been published.",
    "start": "173180",
    "end": "181069"
  },
  {
    "text": "So anyway, this but this section alone, just this, the second half and farcical one I see I could make a course out of it for advanced undergrads and and and beginning grad students.",
    "start": "181070",
    "end": "198590"
  },
  {
    "text": "And I don't think, you know, and I and I might still not get through all the stuff because there is just an awful lot of good stuff that I",
    "start": "198590",
    "end": "206300"
  },
  {
    "text": "believe is is of lasting value that that I had no idea was there when I began to work on this material now.",
    "start": "206300",
    "end": "214880"
  },
  {
    "text": "OK. So how many people were at my lecture that I gave on in June about BDD?",
    "start": "214880",
    "end": "222250"
  },
  {
    "text": "I talked about the beginning on about half of the people. How many people know what a BDD is, a binary decision data?",
    "start": "222250",
    "end": "228530"
  },
  {
    "text": "How many don't know what to be? Oh, good, good.",
    "start": "228530",
    "end": "234080"
  },
  {
    "text": "Actually, the less you know about BDD, the better in some sense, I think, because.",
    "start": "234080",
    "end": "239390"
  },
  {
    "text": "Well, anyway, what I'm going to talk about today, the ZT, do you as well as we get into it, it it it's an outgrowth of BDD.",
    "start": "239390",
    "end": "250150"
  },
  {
    "text": "And since this this thing called a BTD was discovered first and then about seven, eight years later came the CTD as a variation of.",
    "start": "250150",
    "end": "263669"
  },
  {
    "text": "It's amazing to write his name down right now. It was introduced by Shickshinny Cheesman Minato.",
    "start": "263670",
    "end": "275270"
  },
  {
    "text": "In 1993. And.",
    "start": "275270",
    "end": "283840"
  },
  {
    "text": "And he had noticed that when he's working on combinatorial problems, he could say he could he could do a lot better than we've been in a BDD.",
    "start": "283840",
    "end": "293220"
  },
  {
    "text": "Bye bye, Chenu. The data structure a little bit. And so CTD came along as a variation of the BTD and and the word ZT.",
    "start": "293220",
    "end": "303570"
  },
  {
    "text": "It was actually he called it zero suppressed binary decision diagram.",
    "start": "303570",
    "end": "308760"
  },
  {
    "text": "And then. And then for a while this was called Z. BDD. And more recently, there is it's getting so important that we can't bother to say so many letters all the time.",
    "start": "308760",
    "end": "321190"
  },
  {
    "text": "We were used to it. Right. So so. So now we know ZT. And there's a, I don't know, 300000 Google hits for four for DDD.",
    "start": "321190",
    "end": "330960"
  },
  {
    "text": "That means the decision diagram. There's also a lot of other flaky stuff that you can always find on.",
    "start": "330960",
    "end": "338280"
  },
  {
    "text": "You give any three letters to the two Google and it'll and it'll turn up some relation to erotic things and so on.",
    "start": "338280",
    "end": "344530"
  },
  {
    "text": "But. But this is erotic enough for me, this computer.",
    "start": "344530",
    "end": "354960"
  },
  {
    "text": "So but but but I'm saying maybe, maybe a knowledge of BDD might might be hurtful to understand OCD because it's actually even though a lot of the theory it",
    "start": "354960",
    "end": "366199"
  },
  {
    "text": "shares a great deal of the theory with the BDD for almost every everything that that's that we study quantitatively about BDD.",
    "start": "366200",
    "end": "375710"
  },
  {
    "text": "There's a corresponding theorem about ZT. Still, it's there's a dramatic difference between the two.",
    "start": "375710",
    "end": "383419"
  },
  {
    "text": "In the intuition, in the kinds of things that are good at it with BDD, you really want to try to find a way that keep the number of variables down.",
    "start": "383420",
    "end": "397070"
  },
  {
    "text": "Wizzy [INAUDIBLE]. Maybe you're better off having a lots of variables instead of just a few variables in the end. And anyway, so I'm trying to explain that it's that that's really a different concept.",
    "start": "397070",
    "end": "407240"
  },
  {
    "text": "The BDD was invented to has great data structure and it's a data structure of choice for boolean functions representing a boolean function inside a computer.",
    "start": "407240",
    "end": "417120"
  },
  {
    "text": "EDTA is is not really a data structure for boolean function. It's it's a date. It's a data structure for what Minato called sets of combinations.",
    "start": "417120",
    "end": "428360"
  },
  {
    "text": "But there's so many other names for this in the world. And what I, what I believe is the probably the most common and the most easy.",
    "start": "428360",
    "end": "439879"
  },
  {
    "text": "And he agrees with me now is families of sets.",
    "start": "439880",
    "end": "445010"
  },
  {
    "text": "So it's as easy as that is because I believe the data structure of choice to represent a family of sets.",
    "start": "445010",
    "end": "450980"
  },
  {
    "text": "Now, what are the families that once it's a set of sets. It's a but I just call it the family of sets because I made a call.",
    "start": "450980",
    "end": "458780"
  },
  {
    "text": "I couldn't call it a set of families or something. But we've got to have. I don't have to two words so that there's there's two levels there.",
    "start": "458780",
    "end": "468560"
  },
  {
    "text": "There's three loved those objects of a universe. And then there's sets of objects and then sets of sets of objects or families of sets of objects.",
    "start": "468560",
    "end": "477400"
  },
  {
    "text": "OK, so when. So a huge number of common toil problems are based on studying a family of sets of objects and and in fact, it's gifts.",
    "start": "477400",
    "end": "491759"
  },
  {
    "text": "The fancy the fancy name is really a hypergrowth. A hyper graph is a family of sets.",
    "start": "491760",
    "end": "498260"
  },
  {
    "text": "You know what a graph is? A graph is a sick is a set of edges and edges, but it's a family of edges, a graph of a family of edges.",
    "start": "498260",
    "end": "506120"
  },
  {
    "text": "Each edge has two elements to it. Well, a hyper graph is a family of edges, but each edge might have, you know, any number of elements in it.",
    "start": "506120",
    "end": "515159"
  },
  {
    "text": "So. So you just. So so again, CTD is the data structure of choice of in many cases for representing of a hyper graph inside a computer.",
    "start": "515160",
    "end": "532730"
  },
  {
    "text": "Except that the kind of things that people do with traditionally with hyper graphs only only has a few kind of things",
    "start": "532730",
    "end": "539329"
  },
  {
    "text": "that people do at families of sets and many other applications of families of sets are occurring commentaries.",
    "start": "539330",
    "end": "547190"
  },
  {
    "text": "And they don't call them hyper graphs because they don't use any geometric intuition in the way that the graph theories do.",
    "start": "547190",
    "end": "554610"
  },
  {
    "text": "So I like family as a living. The question for me is what happens if if Minato would have invented the CTD",
    "start": "554610",
    "end": "563149"
  },
  {
    "text": "structure first and then the BETETA you had come along eight years after that.",
    "start": "563150",
    "end": "568190"
  },
  {
    "text": "What would this think? What would the thing be called? I have no idea what we might call an HDD or something for hydrograph.",
    "start": "568190",
    "end": "573710"
  },
  {
    "text": "But but. But, but then BTD might have been thought of as a, as a very and avidity who somehow I hope it will be clear me when I finally get into",
    "start": "573710",
    "end": "584000"
  },
  {
    "text": "telling you what it's all what it really is instead of just talking about the name.",
    "start": "584000",
    "end": "589400"
  },
  {
    "text": "I hope it'll be clear to you that these are. And that it's nice to think of it as if you you want a data structure for a",
    "start": "589400",
    "end": "597530"
  },
  {
    "text": "family of sets and not to think about it as you want something that that's it.",
    "start": "597530",
    "end": "602810"
  },
  {
    "text": "That's related to boolean functions. But then you're modifying it for combinatorial application.",
    "start": "602810",
    "end": "609210"
  },
  {
    "text": "At what? At the end of my lecture in June and June, David Dill raised the question.",
    "start": "609210",
    "end": "615860"
  },
  {
    "text": "He said, Don, you haven't talked to Bazini d did you realize that there's this other structure that's good for a combinatorial problems?",
    "start": "615860",
    "end": "626720"
  },
  {
    "text": "And I said and I said, yeah, I'm just about to start looking at them. I haven't written that part yet of my own, and I'm going to spend the summer doing that.",
    "start": "626720",
    "end": "634250"
  },
  {
    "text": "And wow, what happened during the summer? I kept I kept lern every week. I kept fixing more and more things that powerful things about this CTD that I that I had no idea what was there.",
    "start": "634250",
    "end": "648740"
  },
  {
    "text": "And and I believe it's correct to say that whilst the people.",
    "start": "648740",
    "end": "657510"
  },
  {
    "text": "Most of the stuff isn't really very much in the literature.",
    "start": "657510",
    "end": "662790"
  },
  {
    "text": "I know there are there are a lot of great papers there, but I saw other people signing these papers.",
    "start": "662790",
    "end": "672630"
  },
  {
    "text": "They just would sort of Perry the parrot, the abstract. And they didn't really seem to understand the brilliant ideas that were in those papers.",
    "start": "672630",
    "end": "679290"
  },
  {
    "text": "So I. So I think a lot of the authors of these all these paper, you know, I'm not the only person that saw this.",
    "start": "679290",
    "end": "685500"
  },
  {
    "text": "It's funny that the that the community using 3D hasn't.",
    "start": "685500",
    "end": "692050"
  },
  {
    "text": "Has not been that the combinatorial community that that deserves to feel that the most so far.",
    "start": "692050",
    "end": "699839"
  },
  {
    "text": "And so a lot of this beautiful stuff is still way is still in its infancy. And and in fact, I finally decided that, you know, I, I better just wrap up this book.",
    "start": "699840",
    "end": "712350"
  },
  {
    "text": "It's already, already way longer than it should be. And there's no way that I'm going to get to the end of it every week.",
    "start": "712350",
    "end": "718350"
  },
  {
    "text": "I keep finding another thing that deserves to be in there. So let's let it go anyway.",
    "start": "718350",
    "end": "724860"
  },
  {
    "text": "I can't solve all the problems of the world and I let everybody have the fun of doing it.",
    "start": "724860",
    "end": "730860"
  },
  {
    "text": "So I'm just gonna give it a whole bunch of examples of of the beginning of this subject. So let let's not. Yeah. So. So we have a family of set and more precisely, I mean a family of subsets of an ordered universe.",
    "start": "730860",
    "end": "747950"
  },
  {
    "text": "So so I haven't a universe and the universe is ordered and.",
    "start": "747950",
    "end": "753650"
  },
  {
    "text": "And so the. So we, we have the empty family is one thing. We've got to start with the with the simplest stuff. And anybody who knows me knows that I like to start small.",
    "start": "753650",
    "end": "767100"
  },
  {
    "text": "All the time. I, I, I, I don't know. I feel I'm in more in show. So the empty family and we call this the empty set of with.",
    "start": "767100",
    "end": "777270"
  },
  {
    "text": "Well I could write it in tech but forget it. Then there's the unit family which is the the next simpliste family of sets in the empty family has no sense whatsoever.",
    "start": "777270",
    "end": "790019"
  },
  {
    "text": "The unit family has one set but the set, it's empty. So it's the set consisting of the empty set. Okay, so we write it this way and then I need a notation for that.",
    "start": "790020",
    "end": "801720"
  },
  {
    "text": "So I'm going to call that Epsilon. Now. OK, so we represent that inside the computer, the empty family corresponds to a note in the computer that I that I write this way as a bottom element.",
    "start": "801720",
    "end": "817610"
  },
  {
    "text": "And I put a square around it, meaning that it's if it's a node that doesn't have any.",
    "start": "817610",
    "end": "823170"
  },
  {
    "text": "It's not going to point to any other nodes. Now, the the unit family is going to correspond also to one of these sink nodes.",
    "start": "823170",
    "end": "833240"
  },
  {
    "text": "But this stop what they call it with this. And when we talk when we were doing boolean functions.",
    "start": "833240",
    "end": "841630"
  },
  {
    "text": "The there are zero billion function correspond to this guy and the all one billion function correspond to this guy with his EDV.",
    "start": "841630",
    "end": "850360"
  },
  {
    "text": "However, the function that corresponds to this guy is is not the all one function,",
    "start": "850360",
    "end": "857890"
  },
  {
    "text": "but it's the function that is true only when all the variables are false.",
    "start": "857890",
    "end": "863290"
  },
  {
    "text": "It's a it's a family that has only one set.",
    "start": "863290",
    "end": "868360"
  },
  {
    "text": "So that function is is true. OK, I better say, why is why are brilliant functions like families of sets.",
    "start": "868360",
    "end": "879970"
  },
  {
    "text": "And the answer is we can if you have it, if you have any boolean function on on this universe.",
    "start": "879970",
    "end": "887860"
  },
  {
    "text": "So every, every possible subset of the universe corresponds to an encoding of the of some of the boolean variables x1 x2 up to X.",
    "start": "887860",
    "end": "898899"
  },
  {
    "text": "And as to whether or not you know in any set corresponds to we set exi to one if if if if.",
    "start": "898900",
    "end": "908290"
  },
  {
    "text": "Element IIs in the set. Otherwise exi zero. And so. So boolean function is true at a certain number of of of Interpol's x1 through accent.",
    "start": "908290",
    "end": "919840"
  },
  {
    "text": "Those are the dollar called the solutions of the boolean function. What are the X F of X is one and every X can be thought of as a set.",
    "start": "919840",
    "end": "931720"
  },
  {
    "text": "If X is zero one zero one. This is a set consisting of two and four. Say something like that. OK. So then the set of all solutions is a family of sets.",
    "start": "931720",
    "end": "943930"
  },
  {
    "text": "So we have a family of sets. You can even find a boolean function that is equal to one at all at all combinations of X",
    "start": "943930",
    "end": "952839"
  },
  {
    "text": "that defined one of the sets of the family family and it's equal to zero in the other cases.",
    "start": "952840",
    "end": "957930"
  },
  {
    "text": "So, so sick families have sensors that can be encoded is a boolean function.",
    "start": "957930",
    "end": "963730"
  },
  {
    "text": "But sometimes it's much better to think of them as just in terms of families of sets and",
    "start": "963730",
    "end": "969279"
  },
  {
    "text": "elements and things like this directly instead of instead of thinking I'm a boolean wise.",
    "start": "969280",
    "end": "976280"
  },
  {
    "text": "Now. The more complicated family, so it f is any other family.",
    "start": "976280",
    "end": "985500"
  },
  {
    "text": "Besides the empty family in the unit family, then what do we know about it?",
    "start": "985500",
    "end": "993660"
  },
  {
    "text": "Well, it's an it keeps not empty, so it has at least one element. One what? One set in the family. And it's not the unit family.",
    "start": "993660",
    "end": "1001430"
  },
  {
    "text": "So there's at least some element in it in this set. OK. So so we say let me be the least element.",
    "start": "1001430",
    "end": "1015480"
  },
  {
    "text": "Of the universe. That F supports.",
    "start": "1015480",
    "end": "1024020"
  },
  {
    "text": "This is just you've got to have some some some word F supports it, meaning that it appears in at least one member of F the least, some said of the family that contains V.",
    "start": "1024020",
    "end": "1035990"
  },
  {
    "text": "OK, so. So we look at all the variables that that occur. And I said that you wasn't it wasn't an ordered universe and it's a finite universe.",
    "start": "1035990",
    "end": "1044030"
  },
  {
    "text": "If you if you're a mathematician, you'd say, what did you do? What do you mean? The real numbers are something. It's got to be a well ordered universe then. But I see Pursey in the background.",
    "start": "1044030",
    "end": "1053870"
  },
  {
    "text": "I just heard him give a marvelous lecture about, well, our insets. And so it popped up anyway.",
    "start": "1053870",
    "end": "1060320"
  },
  {
    "text": "I can I'm willing to go some sometimes up to Carnival Infinity, but but in computer programing, it's hard to get beyond that now.",
    "start": "1060320",
    "end": "1070500"
  },
  {
    "text": "OK. So there is some smallest, smallest element of the universe that appears in one of the sets.",
    "start": "1070500",
    "end": "1077330"
  },
  {
    "text": "If we're not one of these two family and so on. And so I, I can find two subfamilies.",
    "start": "1077330",
    "end": "1085790"
  },
  {
    "text": "Now, EF zero is the set of all sets. The family of all sets that are in the family, F and V is not a member of Alpha.",
    "start": "1085790",
    "end": "1098430"
  },
  {
    "text": "And if one is is the set of all. Elkhart is the set of all set, the family of all sets.",
    "start": "1098430",
    "end": "1107930"
  },
  {
    "text": "So that Alpha together with V is in the family and and V is not in the set.",
    "start": "1107930",
    "end": "1117140"
  },
  {
    "text": "OK, so in other words, just knock out V from all the ones it's in, this gives us two subfamilies, either either they contain V or they don't contain.",
    "start": "1117140",
    "end": "1126080"
  },
  {
    "text": "And then inside the computer, F is represented as a circular node.",
    "start": "1126080",
    "end": "1134570"
  },
  {
    "text": "Which is sort of a branch on V. And then I draw a dotted line to F zero and a solid line to F one.",
    "start": "1134570",
    "end": "1143480"
  },
  {
    "text": "And here I give the representations of F zero and F one. But now V isn't in there anymore.",
    "start": "1143480",
    "end": "1149330"
  },
  {
    "text": "So it's gone out. So I can continue this definition recursively until eventually I get a representation of the whole family of sets.",
    "start": "1149330",
    "end": "1157730"
  },
  {
    "text": "Okay. Well, I'll give an example so that you're all with me.",
    "start": "1157730",
    "end": "1169700"
  },
  {
    "text": "In fact, I could show you an example if I were using PowerPoint, you know, but I've been sitting through so many PowerPoint lectures where the guy turns that and clicks too fast for me.",
    "start": "1169700",
    "end": "1181850"
  },
  {
    "text": "And so I'm going to draw out a solution so that you can see what do I consider it?",
    "start": "1181850",
    "end": "1189260"
  },
  {
    "text": "Instead of just just flashing the answer to you, I'm going to actually actually write it out here. And so let's let's suppose that F is the is a very simple family.",
    "start": "1189260",
    "end": "1197590"
  },
  {
    "text": "It's gonna be the two element subsets. Of all of the universe.",
    "start": "1197590",
    "end": "1207450"
  },
  {
    "text": "One, two, three. And so this is in other words, though.",
    "start": "1207450",
    "end": "1215039"
  },
  {
    "text": "Well, it could be called as sub two of one, two, three.",
    "start": "1215040",
    "end": "1220320"
  },
  {
    "text": "And so. So how how to represent. Well, what's the smallest element of the universe that that's supported by this?",
    "start": "1220320",
    "end": "1229500"
  },
  {
    "text": "You see, F has had three sets in it. One, two, one, three and two, three.",
    "start": "1229500",
    "end": "1234580"
  },
  {
    "text": "That's the family we're talking about. One one one three three. One one. No. That's what he said. We're talking about two elements.",
    "start": "1234580",
    "end": "1241820"
  },
  {
    "text": "Subset. So. So set a set doesn't have repeated elements.",
    "start": "1241820",
    "end": "1250220"
  },
  {
    "text": "You can represent Molly says also. Bye bye.",
    "start": "1250220",
    "end": "1255250"
  },
  {
    "text": "By a sequence of CTD and and monazite does this by, for example,",
    "start": "1255250",
    "end": "1261390"
  },
  {
    "text": "having a ZT for all the things that appear, all assets that occur an odd number of times.",
    "start": "1261390",
    "end": "1268830"
  },
  {
    "text": "And then another one for all all that occur, an odd multiple of two number of times, things like that. And you can you can play games like that. But that's that's that's one of the things that I won't talk about any more today.",
    "start": "1268830",
    "end": "1280350"
  },
  {
    "text": "But that's OK. Keep asking questions when when, when they occur to you. If that's the way this interactive. OK, so so we start out then there's two.",
    "start": "1280350",
    "end": "1292150"
  },
  {
    "text": "So so the smallest variable, the smallest element that's that's supported is one.",
    "start": "1292150",
    "end": "1298730"
  },
  {
    "text": "And there are the sets that contain one and a sense that don't contain one. So the what the ones that that don't contain one are as two of two and three.",
    "start": "1298730",
    "end": "1313980"
  },
  {
    "text": "The two elements, sets of two and three. The ones that do contain one. After you throw one out are right that there s one of two three.",
    "start": "1313980",
    "end": "1323640"
  },
  {
    "text": "There are the things that contain one more element of of two and three. OK. And so now I can you know, so I can expand this output with the recursive idea here.",
    "start": "1323640",
    "end": "1335910"
  },
  {
    "text": "I'll put it two and then I'm going to have s on this set size gonna be s two of three which which turns out to be nothing now.",
    "start": "1335910",
    "end": "1343930"
  },
  {
    "text": "So. So this will go to the empty family. But if it, if it doesn't contain one, but it does contain two, then it's got that then.",
    "start": "1343930",
    "end": "1355650"
  },
  {
    "text": "Then we come to s one of three which is going to be three. And you know, if three doesn't have it, three isn't it isn't in there then we lose.",
    "start": "1355650",
    "end": "1367620"
  },
  {
    "text": "One if three is there, then we win.",
    "start": "1367620",
    "end": "1373500"
  },
  {
    "text": "Because if it if it doesn't contain one does contain two does contain three.",
    "start": "1373500",
    "end": "1379920"
  },
  {
    "text": "What's left is the empty family. Which is this guy here. I'm sorry. The unit family epsilon. Now on the right hand branch.",
    "start": "1379920",
    "end": "1390360"
  },
  {
    "text": "I'm going. I'm going to s one of two and three.",
    "start": "1390360",
    "end": "1395429"
  },
  {
    "text": "So that means I want one element out of you two or three, but not both. So if I don't have to. Well, let's let's suppose I do have two.",
    "start": "1395430",
    "end": "1404670"
  },
  {
    "text": "Then I better not have three. OK. So what what's what's the case.",
    "start": "1404670",
    "end": "1411480"
  },
  {
    "text": "There would be it would be s zero of three. And that's the unit family.",
    "start": "1411480",
    "end": "1417000"
  },
  {
    "text": "So this will go branch will go right down to here. If it contains one and two.",
    "start": "1417000",
    "end": "1424580"
  },
  {
    "text": "It comes here, but we don't mention three. We bypass three. Really? That means three can appear in this in this branch.",
    "start": "1424580",
    "end": "1432539"
  },
  {
    "text": "It's not supported on this branch. On the other hand, on the if you look at it, you come.",
    "start": "1432540",
    "end": "1439100"
  },
  {
    "text": "Coming way. Wait a minute. I, I, I, I, I, I do this wrong with C.",
    "start": "1439100",
    "end": "1444360"
  },
  {
    "text": "S three. Is she not?",
    "start": "1444360",
    "end": "1449830"
  },
  {
    "text": "Yeah. That's weird. This is fine. So. But if I have one, but I don't have to.",
    "start": "1449830",
    "end": "1461309"
  },
  {
    "text": "Then I've got to have three. All right. But now notice I came to the same note, and that's something I forgot to tell you.",
    "start": "1461310",
    "end": "1468930"
  },
  {
    "text": "That is, we always make sure that no note appears twice in our data structure.",
    "start": "1468930",
    "end": "1475650"
  },
  {
    "text": "And this is a huge importance. So although I'm not I'm saying I'm given a Christmas tree lecture and it looks like I'm giving you a tree here because I have a root.",
    "start": "1475650",
    "end": "1485280"
  },
  {
    "text": "And I've got these branches. This isn't a true tree because overlapping some trees are combined into one.",
    "start": "1485280",
    "end": "1492300"
  },
  {
    "text": "Is the director this a circular graph? Not a not a true. Not strictly a tree.",
    "start": "1492300",
    "end": "1499260"
  },
  {
    "text": "But I'll bring trees in later. Don't worry, Don. So inside the computer then these what I drew as circles and squares.",
    "start": "1499260",
    "end": "1513180"
  },
  {
    "text": "Ah ah ah. Nose and a few cells. A memory filled with, with with three things and will output.",
    "start": "1513180",
    "end": "1525149"
  },
  {
    "text": "I'll give it more detail in a second. But in fact.",
    "start": "1525150",
    "end": "1531030"
  },
  {
    "text": "Yeah. Why don't I do that. Let, let me let me do one more example and I'll do this one. I'll do this real quick and you stop me if I, if I make a mistake. But here I'm going to have a family that contains two sets.",
    "start": "1531030",
    "end": "1543630"
  },
  {
    "text": "One, two and four. Yeah.",
    "start": "1543630",
    "end": "1549330"
  },
  {
    "text": "The first piece of paper we work with. Yeah. The first piece of paper. Adam, you took on the F one is equal to the Union of Alpha and V.",
    "start": "1549330",
    "end": "1561149"
  },
  {
    "text": "That's this one here, EF1. OK, this is right. This is the family of all alpha such that Alpha Union V is in the four.",
    "start": "1561150",
    "end": "1571770"
  },
  {
    "text": "Alpha is a set of elements. And if I throw V and I could I could have put a V in. I could have put braces around the V.",
    "start": "1571770",
    "end": "1581220"
  },
  {
    "text": "Yeah. This is a this is this is a simplification that's often used by people who are given lectures.",
    "start": "1581220",
    "end": "1587789"
  },
  {
    "text": "Also also by people who are giving or writing textbooks and doing doing research.",
    "start": "1587790",
    "end": "1593340"
  },
  {
    "text": "And we said, oh, we we we allow ourselves to consider what gobbler a one element set.",
    "start": "1593340",
    "end": "1601470"
  },
  {
    "text": "But actually, you know, you're a true computer scientist because you draw a level.",
    "start": "1601470",
    "end": "1607350"
  },
  {
    "text": "No, no, no. This is your true computer science. Because when you're programing, you've got to know the difference.",
    "start": "1607350",
    "end": "1613309"
  },
  {
    "text": "Okay. But. Right. Yeah. So, so. So. So you're correct in it.",
    "start": "1613310",
    "end": "1618470"
  },
  {
    "text": "You now are on record now saying that I'm true.",
    "start": "1618470",
    "end": "1627580"
  },
  {
    "text": "Is your boss sitting in the seat? Sure. Well.",
    "start": "1627580",
    "end": "1633299"
  },
  {
    "text": "You know, I really meant yes. OK. So here's another one, another simple example. Let's let's let's do this quickly.",
    "start": "1633300",
    "end": "1642490"
  },
  {
    "text": "What's the smallest element supported here? One. All right. So now, if I if I don't have a one, then what's going to happen?",
    "start": "1642490",
    "end": "1651520"
  },
  {
    "text": "I'm looking at the. Yeah. You want maybe you want my definition up here, but.",
    "start": "1651520",
    "end": "1657970"
  },
  {
    "text": "OK. So. So OK, so so if I don't have a one.",
    "start": "1657970",
    "end": "1663289"
  },
  {
    "text": "What's what's left? It it it it the family of one set for.",
    "start": "1663290",
    "end": "1668490"
  },
  {
    "text": "And so that's easy. That's. That goes like this. Now, the other one.",
    "start": "1668490",
    "end": "1681770"
  },
  {
    "text": "If it does have a one, then we have to have a similar thing, but with two instead.",
    "start": "1681770",
    "end": "1687440"
  },
  {
    "text": "Right. So it just goes like that. Now, let me throw another family into the into the mix here, too, because G is another family.",
    "start": "1687440",
    "end": "1697570"
  },
  {
    "text": "And G is a family containing the empty set first. And and one, two and one for.",
    "start": "1697570",
    "end": "1709320"
  },
  {
    "text": "Now, the reason I'm doing it to two families, a sense instead of just one, is because really when we're working in a computer, we don't have just one Zebedee for one family.",
    "start": "1709320",
    "end": "1720540"
  },
  {
    "text": "We've got lots of families that were tech that we're working with in a problem. And so we really have is not just as EDV, but as ZT base.",
    "start": "1720540",
    "end": "1729159"
  },
  {
    "text": "Oh, you know, and we share the data structures among everything in India CBD base.",
    "start": "1729160",
    "end": "1736800"
  },
  {
    "text": "So so this is this is sort of f corresponds to to this known but geo correspond to another node.",
    "start": "1736800",
    "end": "1743460"
  },
  {
    "text": "What's the smallest thing? What's the smallest element in this universe for G. Well that's that's also one is this is a small sky that appears.",
    "start": "1743460",
    "end": "1756269"
  },
  {
    "text": "So if I, if I now say one does not appear, what is the left branch of of.",
    "start": "1756270",
    "end": "1765900"
  },
  {
    "text": "In that case for G anybody.",
    "start": "1765900",
    "end": "1771120"
  },
  {
    "text": "Don't work. Don't worry about the Uniloc you epsilon. Absolutely. So. So that goes down here. But if you, if it does contain one then it says it's a family that contain either two or four.",
    "start": "1771120",
    "end": "1783770"
  },
  {
    "text": "All right. So. It's gonna go. Then we're gonna check on two and and if if if.",
    "start": "1783770",
    "end": "1792730"
  },
  {
    "text": "Two is in there, then. Good. But if two isn't in there, it's going to be four. So anyway, this is a ZT base for both FFG and let's suppose that I put these in memories.",
    "start": "1792730",
    "end": "1809190"
  },
  {
    "text": "So I have cell zero for four for the bottom sync, cell one for the top Seacom.",
    "start": "1809190",
    "end": "1815240"
  },
  {
    "text": "I put this in location to the order of these other locations isn't really important, but I might as well match my notes.",
    "start": "1815240",
    "end": "1827220"
  },
  {
    "text": "So call this location five, this location six here. So now inside inside a machine we could.",
    "start": "1827220",
    "end": "1839820"
  },
  {
    "text": "Yeah. When you said that there was very charming. No, no. Twice. That's just for one of the functions.",
    "start": "1839820",
    "end": "1847980"
  },
  {
    "text": "So I'm seemed to be repeaters. And you're saying you're seeing the two being repeated. No. Too easy. Yeah. Right. But once it but in one case, it has the dotted branch.",
    "start": "1847980",
    "end": "1860340"
  },
  {
    "text": "Is it going over here? And in the other case, the dotted branch is going over here.",
    "start": "1860340",
    "end": "1866640"
  },
  {
    "text": "So it's not the same note. Yeah. And and that'll be clear in a minute that if you look at this picture here, let's show this picture corresponds to that that CTD base.",
    "start": "1866640",
    "end": "1879679"
  },
  {
    "text": "So. So each node and I'm saying has three parts of be part a low pointer and a high pointer and up.",
    "start": "1879680",
    "end": "1889260"
  },
  {
    "text": "And for these sync nodes, I'm calling the V part infinity.",
    "start": "1889260",
    "end": "1895260"
  },
  {
    "text": "And it's not so and then I'm just saying the low, low and high point to themselves. But the other cases, so.",
    "start": "1895260",
    "end": "1902250"
  },
  {
    "text": "So, for example, in a location to hear the V is for the left branch goes the low branch goes here, the high branch goes to one location three.",
    "start": "1902250",
    "end": "1913350"
  },
  {
    "text": "I have no I have this guy the the low branch goes to zero, the high branch goes to one in location for the low branch goes to two and a high branch goes to one.",
    "start": "1913350",
    "end": "1924160"
  },
  {
    "text": "All right. So that is just the way it looks inside the inside the computer.",
    "start": "1924160",
    "end": "1930910"
  },
  {
    "text": "There's also a hash table to keep track that that so that if somebody later wants to make a note, we won't.",
    "start": "1930910",
    "end": "1938660"
  },
  {
    "text": "We want to check that we've already got it or not. So there's this little law here.",
    "start": "1938660",
    "end": "1943860"
  },
  {
    "text": "No two nodes have the same triple V low and high.",
    "start": "1943860",
    "end": "1948990"
  },
  {
    "text": "Furthermore, there is no node that has high equals zero.",
    "start": "1948990",
    "end": "1954330"
  },
  {
    "text": "This is important point. This is why Minato call them zip zero suppressed BDD in the first place.",
    "start": "1954330",
    "end": "1961260"
  },
  {
    "text": "You never have high equals zero except that node zero itself here.",
    "start": "1961260",
    "end": "1967410"
  },
  {
    "text": "And you see what you see why? Because if you if if you're going on the high branch, you're talking about going to some non-empty family of sets.",
    "start": "1967410",
    "end": "1982040"
  },
  {
    "text": "You would go to the you wouldn't have a high branch at all if you weren't supported.",
    "start": "1982040",
    "end": "1988530"
  },
  {
    "text": "There has to be some U.S. support, and so you have to be young. You are in some sense. So it's sort of so you will never go to a you never got to zero in this and this branch.",
    "start": "1988530",
    "end": "1998970"
  },
  {
    "text": "OK. Now, the other the other condition here is that there's ordering is important so that when you do go to the low branch,",
    "start": "1998970",
    "end": "2005210"
  },
  {
    "text": "you go to a larger view field than you had yourself and a high branch the same way.",
    "start": "2005210",
    "end": "2011570"
  },
  {
    "text": "So the beef fields are always increasing, as you know, as as you as you follow down is the structure.",
    "start": "2011570",
    "end": "2017769"
  },
  {
    "text": "So so this is this is the whole idea of a ZBB now and not not hard to implement,",
    "start": "2017770",
    "end": "2025490"
  },
  {
    "text": "but not trivial either because of this of this hash table which goes on behind the scenes. And then we we want to think, you know,",
    "start": "2025490",
    "end": "2036550"
  },
  {
    "text": "it's turn out that it turns out that we're going to want to find space for new nodes and then other nodes are going to are going to die.",
    "start": "2036550",
    "end": "2045560"
  },
  {
    "text": "And we can and we want to recycle. And and so garbage collection has to go on behind the scenes. And all that isn't really as simple as I'm going to be.",
    "start": "2045560",
    "end": "2053560"
  },
  {
    "text": "I'm going to come and forget about it for the rest of this talk. You read my book and talks about other things.",
    "start": "2053560",
    "end": "2060320"
  },
  {
    "text": "About what what goes on to make the but this is the whole the whole basis of the data structure.",
    "start": "2060320",
    "end": "2067470"
  },
  {
    "text": "Now, one more thing I mostly notice here, and that is that it uses the elements one, two and four.",
    "start": "2067470",
    "end": "2074690"
  },
  {
    "text": "It would have been just it wouldn't have been any bigger if I had used the elements one million, two million and formulae.",
    "start": "2074690",
    "end": "2083149"
  },
  {
    "text": "But if I was talking about a boolean function, I would have had to have had to have extra things saying that all of these all of",
    "start": "2083150",
    "end": "2090649"
  },
  {
    "text": "these variables that that haven't been mentioned have to have to evaluate to zero,",
    "start": "2090650",
    "end": "2096770"
  },
  {
    "text": "have to have to be not present. So the No.",
    "start": "2096770",
    "end": "2102230"
  },
  {
    "text": "So if I were representing this as a boolean function of other variables one, two, three and four,",
    "start": "2102230",
    "end": "2107930"
  },
  {
    "text": "I would have to worry about three separate me saying that X three has to be zero.",
    "start": "2107930",
    "end": "2113930"
  },
  {
    "text": "And so I have a lot of I would have to come and test three x three and in several places.",
    "start": "2113930",
    "end": "2119420"
  },
  {
    "text": "So this is why Minato found that he was if he was working on all of Commendatore problems",
    "start": "2119420",
    "end": "2126049"
  },
  {
    "text": "and he's looking at pooling functions that he got with those coming forward problems. And and a lot of those Bouley functions had the property that there were there were there were there were high branches that were always zero.",
    "start": "2126050",
    "end": "2138830"
  },
  {
    "text": "And he wanted to eliminate. That's that's where it started.",
    "start": "2138830",
    "end": "2144120"
  },
  {
    "text": "But but my point is that really, if we if we just intuit the whole idea of family sets and keep up moving functions as something that we'll think about tomorrow instead of today,",
    "start": "2144120",
    "end": "2156740"
  },
  {
    "text": "then this is a natural data structure just in the family sense world. And that's it in the family sense. World has lots of different users.",
    "start": "2156740",
    "end": "2165890"
  },
  {
    "text": "Then the fact, then the boolean function world. Okay, well, now I. This is the Christmas tree lecture and I saw it. So I want to bring in trees before I.",
    "start": "2165890",
    "end": "2176970"
  },
  {
    "text": "So let me show you one. In the last six years.",
    "start": "2176970",
    "end": "2184240"
  },
  {
    "text": "Oh, yes. One of our two elections we've talked about has listed parentheses at as Representative Womack The Nation.",
    "start": "2184240",
    "end": "2206650"
  },
  {
    "text": "I worried you lose me. I know. Welcome to another Christmas. All right.",
    "start": "2206650",
    "end": "2216400"
  },
  {
    "text": "Nested parentheses are one of the important ways to to describe tree structure inside a computer.",
    "start": "2216400",
    "end": "2222880"
  },
  {
    "text": "And I'm not going to dwell on that. But but here, here here are the five ways to take three left prentice's and three right parentheses and have them properly nested now.",
    "start": "2222880",
    "end": "2234760"
  },
  {
    "text": "Now, let me imagine that these are that these are words.",
    "start": "2234760",
    "end": "2241570"
  },
  {
    "text": "And we're going to go more into words later on. So I'm going to call his L1, L2, L3 R for R five or six for the first one, meaning that the first, the first character is left parenthesis and so on.",
    "start": "2241570",
    "end": "2259390"
  },
  {
    "text": "The fourth correct is the right parenthesis and so on. So, so here we are. L want l to r three. L four are five or six.",
    "start": "2259390",
    "end": "2270460"
  },
  {
    "text": "One l two hour three hour four l five six.",
    "start": "2270460",
    "end": "2276580"
  },
  {
    "text": "And you get the idea. But I'm still going to persist here.",
    "start": "2276580",
    "end": "2281980"
  },
  {
    "text": "L3, L4 are five are six and L one are two.",
    "start": "2281980",
    "end": "2288220"
  },
  {
    "text": "L three are four, five or six. Now this is a family of sets. Believe it or not, because I could put braces around all these things and the universe is that is the set of well be.",
    "start": "2288220",
    "end": "2303340"
  },
  {
    "text": "Did it become our rended l.",
    "start": "2303340",
    "end": "2311110"
  },
  {
    "text": "In which line do you want the second line to get the third and fourth line?",
    "start": "2311110",
    "end": "2319770"
  },
  {
    "text": "Be over this line? Right. So this arc for our foreign and L2 unfortified are for that should be L2 and no know if covering.",
    "start": "2319770",
    "end": "2336120"
  },
  {
    "text": "Yes, it does it there's a number there's there's the third letter is an arrow oil pointing out the fifth and sixth start.",
    "start": "2336120",
    "end": "2343020"
  },
  {
    "text": "So yeah, this is this is not the standard way to to represent parenthesis. I'm not subscript ing them according to their rank or anything, just according to the position in the string.",
    "start": "2343020",
    "end": "2353029"
  },
  {
    "text": "And and so I imagine I have a universe of twelve letters, l1, r1, l2 r2 up to L six are six.",
    "start": "2353030",
    "end": "2360880"
  },
  {
    "text": "And this is, these are five families of from that, from that universe. And I can now. I can. Right down the CTD for it, which turns out to be really nice and simple.",
    "start": "2360880",
    "end": "2376800"
  },
  {
    "text": "And I have it here and my cheat sheet, if I can find it. But but otherwise, I'll just wing it.",
    "start": "2376800",
    "end": "2385530"
  },
  {
    "text": "Well, I think it's it's on the bottom. Oh, hey, no, it's not. No people at. Oh, OK. So all the bad.",
    "start": "2385530",
    "end": "2397080"
  },
  {
    "text": "And now you're holding it, this guy. Yeah. But this right here, I did only the Ellson or not only the Rs, but.",
    "start": "2397080",
    "end": "2404020"
  },
  {
    "text": "OK. I want to do both. Both both our. Huh. OK. So because it's more and it turned out that when I gave when I did this I thought",
    "start": "2404020",
    "end": "2416060"
  },
  {
    "text": "I didn't think of combining the LS9 has been better to combine the old naso. So OK, so here we go.",
    "start": "2416060",
    "end": "2421250"
  },
  {
    "text": "Now that's not what I did though. Well. Maybe it's the back.",
    "start": "2421250",
    "end": "2429830"
  },
  {
    "text": "It's OK. So I start with L1. And if I don't have an L1, I'm dead.",
    "start": "2429830",
    "end": "2438100"
  },
  {
    "text": "They all they all have an L1. So I could write. Dot, dot, dot. And go to the. No, to the MTC. But that's going to mess up the diagram.",
    "start": "2438100",
    "end": "2447970"
  },
  {
    "text": "There's gonna be lots and lots of data that the obviously I'm just not going to write any of those any of those guys.",
    "start": "2447970",
    "end": "2455619"
  },
  {
    "text": "If if it's dot, dot, dot to the empty, I'm not going to write it then L2 is is a branch point here.",
    "start": "2455620",
    "end": "2462970"
  },
  {
    "text": "And. And it might end if I don't have an L2, I gotta have an art to it.",
    "start": "2462970",
    "end": "2471560"
  },
  {
    "text": "But then if I have the art to, then it's got to be L3. And and either L4 or are for a district, draw the whole darn thing out here.",
    "start": "2471560",
    "end": "2484650"
  },
  {
    "text": "And then L5. Now, what could this other branch is coming down here, if I have L1 and L2, then L3 is a possibility or not.",
    "start": "2484650",
    "end": "2498069"
  },
  {
    "text": "Our three here. And that's a solid line there.",
    "start": "2498070",
    "end": "2503600"
  },
  {
    "text": "This is sloppy, but that's that's the point that you have to supply some of your own intelligence.",
    "start": "2503600",
    "end": "2511980"
  },
  {
    "text": "So that makes you think about this, right. So huge. So the idea is that it's a it's a pretty, pretty nice and tidy CTD.",
    "start": "2511980",
    "end": "2529740"
  },
  {
    "text": "And as I said, if there's only one branch coming out of these guys, that means that you're supposed to just die and go down to the for the no sink.",
    "start": "2529740",
    "end": "2545010"
  },
  {
    "text": "Now, 14 nodes altogether. There's an old sink sitting out here getting a whole bunch of stuff.",
    "start": "2545010",
    "end": "2552570"
  },
  {
    "text": "One, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen. And it's representing a family of size five. Well, that's not a great win.",
    "start": "2552570",
    "end": "2560880"
  },
  {
    "text": "We could we could we just start the family of save five. But if I if instead I this is the case.",
    "start": "2560880",
    "end": "2568259"
  },
  {
    "text": "N equals three. I have three. Three President. But if you go to any equals twenty four for example, then the corresponding thing would look something like this.",
    "start": "2568260",
    "end": "2585450"
  },
  {
    "text": "It would start up actually the same way and it would have six hundred two nodes total.",
    "start": "2585450",
    "end": "2593329"
  },
  {
    "text": "And the total number of solutions. The total number of trees that encodes is, you know, a trillion and so on.",
    "start": "2593330",
    "end": "2604700"
  },
  {
    "text": "So this a nice compact way to represent trees. And if you're representing all these trees, you don't have to generate a lot.",
    "start": "2604700",
    "end": "2613640"
  },
  {
    "text": "You can you know, you've got. You can ask questions like not now we can we can look at at the families that contain L six or something like them very easily.",
    "start": "2613640",
    "end": "2626960"
  },
  {
    "text": "So so, so small. No small space inside the computer. We can represent large commentary's sets of interest and then we can represent other large common sense",
    "start": "2626960",
    "end": "2637310"
  },
  {
    "text": "of interest and then operate on them together and solve and solve other problems about them visually.",
    "start": "2637310",
    "end": "2646310"
  },
  {
    "text": "For example, random generation, if you have any any family of sets represented as a DVD, you can you can.",
    "start": "2646310",
    "end": "2656120"
  },
  {
    "text": "You can. You know, quickly, in terms of the size of this, EDV, get a random family, a random set of the family.",
    "start": "2656120",
    "end": "2666930"
  },
  {
    "text": "Let's see, how are we doing on time? OK. So now I got to talk about that. Lots and lots of applications. Instead of talking about the nuts and bolts and we'll see to some of things we can do.",
    "start": "2666930",
    "end": "2679130"
  },
  {
    "text": "So operation on the family is the next thing.",
    "start": "2679130",
    "end": "2685970"
  },
  {
    "text": "And. And depending on what part of commentaries you look at,",
    "start": "2685970",
    "end": "2692920"
  },
  {
    "text": "you find lots of t of uses for families of sets and people in different branches of common",
    "start": "2692920",
    "end": "2699000"
  },
  {
    "text": "talks have different operations that that they're that they're better than I key for them.",
    "start": "2699000",
    "end": "2708620"
  },
  {
    "text": "But the very the very nature of the very simplest ones are just take the union of two families.",
    "start": "2708620",
    "end": "2713900"
  },
  {
    "text": "So FFG family's assets. And the Union of two families is the family of all, says Alpha.",
    "start": "2713900",
    "end": "2719660"
  },
  {
    "text": "So that Alpha is in F or Alpha is in G, right.",
    "start": "2719660",
    "end": "2724970"
  },
  {
    "text": "F of Intersect G is the set of all the family of all sets that are in in both F and G.",
    "start": "2724970",
    "end": "2736280"
  },
  {
    "text": "F set minus a G. It's the set of a family of all sets that are in F, but not N, g.",
    "start": "2736280",
    "end": "2744200"
  },
  {
    "text": "And so on. I. I might as well go through this because of. It's not going to take that long.",
    "start": "2744200",
    "end": "2754819"
  },
  {
    "text": "So this is the F symmetric difference between F G is F minus G or G minus F.",
    "start": "2754820",
    "end": "2768710"
  },
  {
    "text": "Now, suppose F is not. It is a family of sense represented as a CTD with F zero and an F one here and G is a family",
    "start": "2768710",
    "end": "2778580"
  },
  {
    "text": "that is has W and F and G zero and G one as its representation of the algorithm for computing.",
    "start": "2778580",
    "end": "2789680"
  },
  {
    "text": "All four of these operations is very simple and so on.",
    "start": "2789680",
    "end": "2800609"
  },
  {
    "text": "Our car show you for four for all four cases, we have F Union, G, F intersect, g, f minus G F symmetric difference with G.",
    "start": "2800610",
    "end": "2810540"
  },
  {
    "text": "And those three cases, if V equals W. And then, in other words, that both of them have the smallest element of support.",
    "start": "2810540",
    "end": "2825640"
  },
  {
    "text": "Then what? What do we get for the union? Well, if it if it if it doesn't contain V, we want this we want the union of all of all things that were in F orangy.",
    "start": "2825640",
    "end": "2836680"
  },
  {
    "text": "So if it doesn't contain V, then it's got to be it's gonna be here f zero union G zero the ones that weren't in there.",
    "start": "2836680",
    "end": "2846670"
  },
  {
    "text": "And it's easy to see really that this is also F one union G one. So recursively we just go down to to the descendants of of FMG and continue the same process.",
    "start": "2846670",
    "end": "2861010"
  },
  {
    "text": "Eventually we get down to a sink or we get to a prop sub problem we've seen before and we and we don't have to.",
    "start": "2861010",
    "end": "2868640"
  },
  {
    "text": "And we keep a memo cash so that we don't have to do the same operation that we've already that we've already done it once.",
    "start": "2868640",
    "end": "2878470"
  },
  {
    "text": "We know that once once we've computer the union of who we remember it.",
    "start": "2878470",
    "end": "2885130"
  },
  {
    "text": "So we don't have to compute it again. This one same thing.",
    "start": "2885130",
    "end": "2891309"
  },
  {
    "text": "If it's not in what we do f zero intersect G zero f one intersect G one.",
    "start": "2891310",
    "end": "2899980"
  },
  {
    "text": "In fact, it's gonna be the same for the difference and the and F zero difference g zero f one difference.",
    "start": "2899980",
    "end": "2908600"
  },
  {
    "text": "Two and we half zero plus she's zero.",
    "start": "2908600",
    "end": "2916690"
  },
  {
    "text": "F one plus one. The interesting thing, because if this is different from W V is less than W for example,",
    "start": "2916690",
    "end": "2925510"
  },
  {
    "text": "then that means that that V occurs in the family F but it doesn't occur in family G.",
    "start": "2925510",
    "end": "2936970"
  },
  {
    "text": "So in the case of union, the algorithm is that we take F zero union G here and here.",
    "start": "2936970",
    "end": "2944470"
  },
  {
    "text": "We just branch to F one which we already knew in the case of intersection.",
    "start": "2944470",
    "end": "2950390"
  },
  {
    "text": "Well what we actually do is the V is not going to occur in the intersection.",
    "start": "2950390",
    "end": "2957039"
  },
  {
    "text": "And so, so we just give that, we just take F intersecting with G zero and V doesn't even appear in the in the result.",
    "start": "2957040",
    "end": "2965980"
  },
  {
    "text": "And similarly for this one is F minus G zero. And in the left and in the last one it turns out that it's W not V.",
    "start": "2965980",
    "end": "2977170"
  },
  {
    "text": "No V sorry. V. Oh, I know, I, I.",
    "start": "2977170",
    "end": "2984599"
  },
  {
    "text": "I did this wrong. There's V here going to F one on undecided's zero one with G.",
    "start": "2984600",
    "end": "2994100"
  },
  {
    "text": "You can work out these these details and I don't have time to draw.",
    "start": "2994100",
    "end": "3002370"
  },
  {
    "text": "And that's just to point out that it's easy recursive process. Once you've got what once you located the smallest element that supported then.",
    "start": "3002370",
    "end": "3011070"
  },
  {
    "text": "Then you can recursively define these operations on the remaining set. And there's a third case.",
    "start": "3011070",
    "end": "3016770"
  },
  {
    "text": "V is greater than W and it's not symmetrical to the case. V less and less than W because these rules are not symmetrical between left and right.",
    "start": "3016770",
    "end": "3026599"
  },
  {
    "text": "We have a rule about suppressing zero off of the high branch. But we don't have a rule about suppressing zero.",
    "start": "3026600",
    "end": "3033360"
  },
  {
    "text": "After lowbrow. Now if these equals W, then F just G should not have been a F plus G.",
    "start": "3033360",
    "end": "3042800"
  },
  {
    "text": "Oh yes. Yo yo. There will be, there will be a take for example.",
    "start": "3042800",
    "end": "3050700"
  },
  {
    "text": "F is equal to one two and G is equal to one three.",
    "start": "3050700",
    "end": "3056250"
  },
  {
    "text": "Now F zero is.",
    "start": "3056250",
    "end": "3064540"
  },
  {
    "text": "The things that are in that are in F, but not in G or in G, but not an F is the same as the union in this case.",
    "start": "3064540",
    "end": "3073860"
  },
  {
    "text": "Let Lisk take. Suppose I had this one then F plus G is going to be one, two and three.",
    "start": "3073860",
    "end": "3084430"
  },
  {
    "text": "It's the set. It's it's the difference. These are not elements of the sense. They're they're they're elements of the family. Their sense of the family here.",
    "start": "3084430",
    "end": "3093450"
  },
  {
    "text": "It in fact, I'm glad you asked that, because that's. That leads to my next definition.",
    "start": "3093450",
    "end": "3098920"
  },
  {
    "text": "So there are other operations on families that we will not include.",
    "start": "3098920",
    "end": "3106920"
  },
  {
    "text": "OK, I'll get to it in a minute, but. Right.",
    "start": "3106920",
    "end": "3113260"
  },
  {
    "text": "These are operations at the top level. We're taking the union of two families, but we're not taking the union of the elements of the sets and the families.",
    "start": "3113260",
    "end": "3121210"
  },
  {
    "text": "But that's another important operation on families, which we're going to get to in a minute.",
    "start": "3121210",
    "end": "3126599"
  },
  {
    "text": "Yeah. So if we intersect two sets that both have support for an element, how do we know the A.S. is support for the element?",
    "start": "3126600",
    "end": "3134590"
  },
  {
    "text": "It doesn't. If if we intersect two sets of both have support for an element. Yeah. Then what intersection does not necessarily have support for the elements.",
    "start": "3134590",
    "end": "3142990"
  },
  {
    "text": "So why can we ever know if this is true? Actually, if this turns out to be if this turns out to be an empty set, then then we actually leave.",
    "start": "3142990",
    "end": "3154570"
  },
  {
    "text": "Leave. We are. Yeah. I thought I should have mentioned it. I really don't come come to this. But afterwards, when I get to to checking whether this node actually appears, I hate it.",
    "start": "3154570",
    "end": "3167279"
  },
  {
    "text": "OK. If you if I ever try to create a node that looks like re empty alpha, then I just convert that to Alpha.",
    "start": "3167280",
    "end": "3180430"
  },
  {
    "text": "Yeah, you've done so. That's right. That might be my my subroutine create a node, froze this case out.",
    "start": "3180430",
    "end": "3189720"
  },
  {
    "text": "Do I answer your question? So, so, so it is.",
    "start": "3189720",
    "end": "3194990"
  },
  {
    "text": "Hello. This is the recursion that that I do afterwards. If this guy turns out to be empty, then then we don't put this in this being a data structure, after all.",
    "start": "3194990",
    "end": "3205170"
  },
  {
    "text": "Because because, of course, this whole thing might be might be empty.",
    "start": "3205170",
    "end": "3213910"
  },
  {
    "text": "F. I. Yeah. Now. But me. But I gotta get to the application because these are the amazing things and I have to just zoom through these.",
    "start": "3213910",
    "end": "3226460"
  },
  {
    "text": "So one of them application.",
    "start": "3226460",
    "end": "3233440"
  },
  {
    "text": "What one is. Exact cover problem.",
    "start": "3233440",
    "end": "3238650"
  },
  {
    "text": "So one of the one of the cut, one of the combinatorial applications that for which these these are are great is something like this.",
    "start": "3238650",
    "end": "3251390"
  },
  {
    "text": "Suppose I want to let everyone get it out of my notes here.",
    "start": "3251390",
    "end": "3257000"
  },
  {
    "text": "This is 27. Yeah.",
    "start": "3257000",
    "end": "3271290"
  },
  {
    "text": "So, okay, so, for example, we want to cover a chessboard with with 32 dominoes now, and how many ways are there to do this?",
    "start": "3271290",
    "end": "3283190"
  },
  {
    "text": "Well, it turns out there's a 30 million ways to do it.",
    "start": "3283190",
    "end": "3290280"
  },
  {
    "text": "But there's just an example of many other kind of exact covering problems. And we can describe that as a big matrix of zeros and ones where each row of the matrix is one way to place it, a domino on the chessboard.",
    "start": "3290280",
    "end": "3303900"
  },
  {
    "text": "So I could put a domino on the first two squares where I could put a domino vertically on the first square and,",
    "start": "3303900",
    "end": "3310190"
  },
  {
    "text": "you know, and then the square in the next row. This is this is 64 foot. Imagine 64 columns here. And then I have one hundred and twelve rows for the different places that you can put a domino on a chess on a chessboard.",
    "start": "3310190",
    "end": "3322650"
  },
  {
    "text": "And what we're trying to do is find 32 of these rows that exactly cover everything.",
    "start": "3322650",
    "end": "3328559"
  },
  {
    "text": "So if we add up those 32 rows, we get one one one one one one one one one. That's an exact cover problem.",
    "start": "3328560",
    "end": "3334010"
  },
  {
    "text": "Now, we can consider this a family of sets where where the winning sets are the way to choose the sets of 32 rows that that solve this problem.",
    "start": "3334010",
    "end": "3350240"
  },
  {
    "text": "And when the sets of sets of domino positions that cover the chessboard, well,",
    "start": "3350240",
    "end": "3355590"
  },
  {
    "text": "it turns out that the CDC has twenty three hundred nodes for that problem.",
    "start": "3355590",
    "end": "3363360"
  },
  {
    "text": "But there are 112 places to put the domino.",
    "start": "3363360",
    "end": "3370680"
  },
  {
    "text": "But what does he do? He hasn't. And and if he wants here, Zebedee is easy to count the number of solutions.",
    "start": "3370680",
    "end": "3378920"
  },
  {
    "text": "Now, here's a more interesting, more exotic kind of a covering problem in this case,",
    "start": "3378920",
    "end": "3385710"
  },
  {
    "text": "uncovering the chessboard not only with dominoes, but with my nominals or terminals. OK. So in other words, like I can have I can have one cell or like here or three cells.",
    "start": "3385710",
    "end": "3397560"
  },
  {
    "text": "And the dominoes can be either this L shape or or earth along time now.",
    "start": "3397560",
    "end": "3405030"
  },
  {
    "text": "So now, how many ways are there to do this?",
    "start": "3405030",
    "end": "3410460"
  },
  {
    "text": "OK. Nine. You know, this is this long, big number here, 90 to 60.",
    "start": "3410460",
    "end": "3415890"
  },
  {
    "text": "I don't know what it is and it takes almost no time to figure that out.",
    "start": "3415890",
    "end": "3422130"
  },
  {
    "text": "You have 468 variables. Now there's foreigners, 68 ways to place one of these animals somewhere on the chessboard.",
    "start": "3422130",
    "end": "3430440"
  },
  {
    "text": "And that gives you a that cover problem with form 68 rows and DDD turns out to have five hundred twelve thousand nodes to it,",
    "start": "3430440",
    "end": "3443190"
  },
  {
    "text": "and it doesn't take very long. Yes. Well, the calculation here, I said take seventy five mega memes.",
    "start": "3443190",
    "end": "3449420"
  },
  {
    "text": "I measure all the all the running times in my book by memory Access's because this is something that stays the same,",
    "start": "3449420",
    "end": "3456299"
  },
  {
    "text": "even though computers keep changing according to Moore's Law. So seventy five million times that I loaded or stored from memory.",
    "start": "3456300",
    "end": "3467040"
  },
  {
    "text": "And I calculated the number of ways to do discovery. Okay. Now, now that. So that's one kind of application. What one cool application of Zenati.",
    "start": "3467040",
    "end": "3480220"
  },
  {
    "text": "We can go further. In fact, we are in this only five make amends.",
    "start": "3480220",
    "end": "3486369"
  },
  {
    "text": "Are you including the algorithm that you use to compute the CDC?",
    "start": "3486370",
    "end": "3491560"
  },
  {
    "text": "This was this was I. I started with the and sixty eight rows or whatever it was.",
    "start": "3491560",
    "end": "3500020"
  },
  {
    "text": "I started with the with the given zeros and ones. But that's just trivial thing to create that.",
    "start": "3500020",
    "end": "3506040"
  },
  {
    "text": "So. So. So that's not gonna be a million more so. So what I'm counting is the, the everything that's involved with, with, with building the data structure,",
    "start": "3506040",
    "end": "3517300"
  },
  {
    "text": "garbage collection and and caching and everything that I'm doing in order to make sure that I that I don't have any repeated notes.",
    "start": "3517300",
    "end": "3526940"
  },
  {
    "text": "And and by the way, my my program for this is on is on the Web.",
    "start": "3526940",
    "end": "3533470"
  },
  {
    "text": "It's called BTD fifteen. You can get it from my downloadable programs page.",
    "start": "3533470",
    "end": "3542480"
  },
  {
    "text": "And and it shows me the way I did the. It's it's instrumented so that it shows you how I counted these these men.",
    "start": "3542480",
    "end": "3553380"
  },
  {
    "text": "OK. Now. Well, I'm wearing my I into that Daniels little let's consider some of the some of the ways of placing dominoes.",
    "start": "3553380",
    "end": "3568049"
  },
  {
    "text": "I work out with three colors. You can imagine red dominoes, white dominoes and blue dominoes.",
    "start": "3568050",
    "end": "3573510"
  },
  {
    "text": "And you give yourself a rule that you're not going to allow any two of them to touch.",
    "start": "3573510",
    "end": "3578970"
  },
  {
    "text": "Maybe at the corners, but not. But. But you can't have a red one red.",
    "start": "3578970",
    "end": "3583980"
  },
  {
    "text": "There has a whole edge and come in with another red one and so on. OK, so now here's a here's an exercise where and we want to use.",
    "start": "3583980",
    "end": "3595800"
  },
  {
    "text": "We want to use these for this. I mean, this is exercise 216, believe it or not.",
    "start": "3595800",
    "end": "3605640"
  },
  {
    "text": "How many ways can I cover a chessboard with red, white, blue dominoes with no. Two dominoes of the same color next to each other? And the answer, let's see, at exercise 216, the answer to exercise 216 is.",
    "start": "3605640",
    "end": "3628190"
  },
  {
    "text": "Oh, well, let's see. We get it here. OK.",
    "start": "3628190",
    "end": "3637710"
  },
  {
    "text": "Let me see. I got the numbers. A number of ways was 13 billion.",
    "start": "3637710",
    "end": "3648119"
  },
  {
    "text": "It gives every every coloring six times because red, white and blue would occur in different media, where are 13 million ways to do it?",
    "start": "3648120",
    "end": "3658440"
  },
  {
    "text": "And the zeeb and the running time was one point two giga memes.",
    "start": "3658440",
    "end": "3665220"
  },
  {
    "text": "So one point two billion then. So. So in other words, you are less than one tenth of the number of solution.",
    "start": "3665220",
    "end": "3675050"
  },
  {
    "text": "You know, for every solution that that occurs, you spent one tenth of a memory access in order to in order to determine it and and represent it now.",
    "start": "3675050",
    "end": "3685980"
  },
  {
    "text": "The second part of this exercise is how many sorry, how many of the domino coverings as these 30 million domino covering?",
    "start": "3685980",
    "end": "3695970"
  },
  {
    "text": "How many of them are three colorable? That's a different problem because sometimes there's many, many ways to take a domino covering and coat color with red,",
    "start": "3695970",
    "end": "3704100"
  },
  {
    "text": "red, white, blue, but other ones, there's no way whatsoever. So how many of them are are three colorable?",
    "start": "3704100",
    "end": "3710299"
  },
  {
    "text": "Well, it turned out within, you know, again, with EDI's It and another one point three giga mams, you could you could determine that answer.",
    "start": "3710300",
    "end": "3719160"
  },
  {
    "text": "And the. And it was. So you exercise are.",
    "start": "3719160",
    "end": "3725530"
  },
  {
    "text": "We thought so. So I have this uncovering function, which is which is easy to do recursively and the answer is three million and so on.",
    "start": "3725530",
    "end": "3733860"
  },
  {
    "text": "So these are problems that I have no idea. Chroot could be gained by any other method could could be done anywhere nearly so efficiently.",
    "start": "3733860",
    "end": "3742410"
  },
  {
    "text": "And I've been playing with other kind of combinatorial algorithms for a long time now.",
    "start": "3742410",
    "end": "3748250"
  },
  {
    "text": "All right. So that's a that's application one application, too. We're running short of time. So I got dictionaries because lots and lots of great ways to store collections of words that are already well known in computer science.",
    "start": "3748250",
    "end": "3767130"
  },
  {
    "text": "But the cities can also do some things that these other other things don't.",
    "start": "3767130",
    "end": "3774750"
  },
  {
    "text": "So here's an example. Suppose I'm doing the five letter words of English.",
    "start": "3774750",
    "end": "3783040"
  },
  {
    "text": "Now, I got many, many examples in my book are based on the set of all five letter words in the English language.",
    "start": "3783040",
    "end": "3790740"
  },
  {
    "text": "And it turns out there are exactly five thousand seven hundred and fifty seven such words, according to my my definition.",
    "start": "3790740",
    "end": "3799260"
  },
  {
    "text": "I decided in 1995 to define exactly what it means to be a five letter word of English.",
    "start": "3799260",
    "end": "3805020"
  },
  {
    "text": "That was that was before I knew the word Chadds and a few other words that have come up later like like blogs.",
    "start": "3805020",
    "end": "3815610"
  },
  {
    "text": "But anyway, these are my words. And so here I do it, something like I did with the Ellson hours of the parentheses, I,",
    "start": "3815610",
    "end": "3826579"
  },
  {
    "text": "I have one hundred and thirty elements of my universe, a one through Z one A two through C two and so on, a five through Z five.",
    "start": "3826580",
    "end": "3836430"
  },
  {
    "text": "And the word funny would would be represented as a set F one. You two and three and four y five. OK.",
    "start": "3836430",
    "end": "3844260"
  },
  {
    "text": "So the family of sets O family containing four fifty seven fifty seven sets and I end.",
    "start": "3844260",
    "end": "3852750"
  },
  {
    "text": "And I'm going to tell you what minute why I write this in a notation with an F in a square.",
    "start": "3852750",
    "end": "3858660"
  },
  {
    "text": "This square union sign instead of a sort of another symbol there. So this is f joined with you to join within three.",
    "start": "3858660",
    "end": "3866819"
  },
  {
    "text": "Join with N four. It's a joint operation. Joining elements together into a set and his words and so on.",
    "start": "3866820",
    "end": "3874890"
  },
  {
    "text": "And this whole this whole Zebedee for all of the fifth, all of the words of five letter words of English.",
    "start": "3874890",
    "end": "3881609"
  },
  {
    "text": "Starts out with A1. And then comes the you know, the things that start with a one.",
    "start": "3881610",
    "end": "3888900"
  },
  {
    "text": "The next possibility is to check if the second letter is in a two.",
    "start": "3888900",
    "end": "3893970"
  },
  {
    "text": "And if so, then the word is, argh! Argh! OK. If not, then then we look for a B two. OK. If you don't have any AA, then you have to have a b.",
    "start": "3893970",
    "end": "3903630"
  },
  {
    "text": "Then you might have a B. And if you have a B then it could be an AA and it could be a B baby.",
    "start": "3903630",
    "end": "3909779"
  },
  {
    "text": "I don't know that there must be words starting a baby and so on at the bottom of the tree.",
    "start": "3909780",
    "end": "3919590"
  },
  {
    "text": "It's kind of interesting. You have one branch comes from R.E., L.A. and then it can be either relax or relais.",
    "start": "3919590",
    "end": "3930880"
  },
  {
    "text": "So. So on the other hand, most other words that end with an X, there is only it has to be an X or nothing.",
    "start": "3930880",
    "end": "3938069"
  },
  {
    "text": "So at the bottom of the tree we have one one Z, five node. One life. I know two. Five knows, three W5 knows and so on.",
    "start": "3938070",
    "end": "3948730"
  },
  {
    "text": "But. But you can imagine this. This big tree containing defining all of 57, all of five letter words of English.",
    "start": "3948730",
    "end": "3956320"
  },
  {
    "text": "Now, it's similar to a work we had called a try memory.",
    "start": "3956320",
    "end": "3963280"
  },
  {
    "text": "But that's a tree instead of instead of a DAG. Try memory tr eii.",
    "start": "3963280",
    "end": "3973000"
  },
  {
    "text": "But but now if we use this CTD operations, we can do more things than. Let me give you a couple of quick examples of that.",
    "start": "3973000",
    "end": "3982380"
  },
  {
    "text": "So question one are words.",
    "start": "3982380",
    "end": "3990299"
  },
  {
    "text": "All words of the form T. Blank or t something you.",
    "start": "3990300",
    "end": "3996720"
  },
  {
    "text": "Something. H. What are the five that it was that that had this form?",
    "start": "3996720",
    "end": "4004200"
  },
  {
    "text": "What I feel like I can't hear you tough.",
    "start": "4004200",
    "end": "4009450"
  },
  {
    "text": "OK, that's a tough question. OK. I don't want to touch it.",
    "start": "4009450",
    "end": "4019770"
  },
  {
    "text": "OK. Touch and truth. Yeah, OK. In fact, that's it. Why are you are.",
    "start": "4019770",
    "end": "4028370"
  },
  {
    "text": "Oh, I'm sorry. What I do is I so f is my pattern.",
    "start": "4028370",
    "end": "4043210"
  },
  {
    "text": "If I there's a query that I can make. And so I. So I give the pattern. P and P is a family containing one one set.",
    "start": "4043210",
    "end": "4055180"
  },
  {
    "text": "And I call it T one joined with you three. Join with H five.",
    "start": "4055180",
    "end": "4061589"
  },
  {
    "text": "OK. And then I compute Operation R on this EDV.",
    "start": "4061590",
    "end": "4072100"
  },
  {
    "text": "And it will and it will very quickly give me get give me the answer. But let me show you the operations that, that, that, that I'm doing because this answers the question.",
    "start": "4072100",
    "end": "4082930"
  },
  {
    "text": "I promise I will get to that. You ask before. So if I have done more operations on family.",
    "start": "4082930",
    "end": "4091200"
  },
  {
    "text": "If a square. Cup of G is the Setto is the family of all Alpha Union Beta, such that Alpha is in F and a beta is in G.",
    "start": "4091200",
    "end": "4104330"
  },
  {
    "text": "There is F and this is called the joint.",
    "start": "4104330",
    "end": "4110029"
  },
  {
    "text": "And then there's the meat of two families. And that's a square cap.",
    "start": "4110030",
    "end": "4116270"
  },
  {
    "text": "And this is this the set of the family of all intersections where we take one element of one set from F. and one set from from G.",
    "start": "4116270",
    "end": "4127660"
  },
  {
    "text": "All right. So this is what you were asking about before. And it's different from the union of the two families.",
    "start": "4127660",
    "end": "4133620"
  },
  {
    "text": "It's the joint of the two family. And there is also F exclusive or G, which is what you had in mind when you were asking me, asking this question.",
    "start": "4133620",
    "end": "4142970"
  },
  {
    "text": "It's it's the family of all symmetric differences, the sector the same way.",
    "start": "4142970",
    "end": "4147980"
  },
  {
    "text": "So this is the delta of of two families. There's also something that I thought of two or three weeks ago.",
    "start": "4147980",
    "end": "4158549"
  },
  {
    "text": "That's that. I don't even have time to hardly mention it in my book.",
    "start": "4158550",
    "end": "4166250"
  },
  {
    "text": "I have I know with a notation is used for it anyway. But it's the set of all unions, family of all unions that Alpha is in F, Betis in G and Alpha is is disjoint from beta, the set of all disjointing.",
    "start": "4166250",
    "end": "4184339"
  },
  {
    "text": "So I call us the disjoined instead instead of the join. And this turns out to be to be important in a lot of commentary application.",
    "start": "4184340",
    "end": "4193819"
  },
  {
    "text": "And it's even easier to compute than the other one. But they the way these are, you just like we had for the union intersection, so on.",
    "start": "4193820",
    "end": "4203170"
  },
  {
    "text": "There's a simple recursive definition that applies to the CBD that computes the joint of of of two families.",
    "start": "4203170",
    "end": "4211550"
  },
  {
    "text": "The meat of two families, etc. And the disjoined.",
    "start": "4211550",
    "end": "4217250"
  },
  {
    "text": "And sometimes I believe this for some of the applications that I for which I use joint, if I, I could have just as well use disjointing would have run faster. But I haven't had I don't want to have time to.",
    "start": "4217250",
    "end": "4227800"
  },
  {
    "text": "Check this out yet. There's so many things still waiting to be done. Now there's another one.",
    "start": "4227800",
    "end": "4233360"
  },
  {
    "text": "The quotient if F over G. And this is the set.",
    "start": "4233360",
    "end": "4242030"
  },
  {
    "text": "This is the family of all sets Alpha that has the property that if if the Alpha Union Beta is in F and alpha intercept data is empty.",
    "start": "4242030",
    "end": "4259280"
  },
  {
    "text": "Sorry. This is equals empty here. Excuse me. I meant that. Did he get disjoint? Not not not that the Intersect.",
    "start": "4259280",
    "end": "4266110"
  },
  {
    "text": "So so the destroying was that one. But this one says that I take a disjoint union.",
    "start": "4266110",
    "end": "4272320"
  },
  {
    "text": "And this is for all not just for. For some. For all data in G. So. So it says that, for example, if.",
    "start": "4272320",
    "end": "4282440"
  },
  {
    "text": "If. Well, if G has only one. If there's only one beat all together then it's just saying look for all words that that include beta.",
    "start": "4282440",
    "end": "4296570"
  },
  {
    "text": "Look, look for all elements of F that that if we added data to it.",
    "start": "4296570",
    "end": "4305690"
  },
  {
    "text": "I'm sorry. Look for all alpha. So that if we added at a better time we would get it.",
    "start": "4305690",
    "end": "4310890"
  },
  {
    "text": "So. So. So this is just like something like. Like the one branch. If G was just a family containing the single element.",
    "start": "4310890",
    "end": "4323220"
  },
  {
    "text": "That's the single element V. And. And there's F Marjie, which is F minus G joined with F over G.",
    "start": "4323220",
    "end": "4337510"
  },
  {
    "text": "It's not time to dwell on, on the meaning of all these things.",
    "start": "4337510",
    "end": "4343039"
  },
  {
    "text": "But I but I just want to mention the query that we make in order to solve this question. All words of tough touch and truth. Here we specify a pattern.",
    "start": "4343040",
    "end": "4354390"
  },
  {
    "text": "And this will work for any pattern, of course. And then we compute f divided by the pattern.",
    "start": "4354390",
    "end": "4363260"
  },
  {
    "text": "And then we join that two to two the pattern. In this particular case, F divided by P would be the family that contains O two.",
    "start": "4363260",
    "end": "4374929"
  },
  {
    "text": "C four. O two. G four. And are two to four. Because this would make didn't it.",
    "start": "4374930",
    "end": "4384139"
  },
  {
    "text": "Now we join that the P and we. And we get touch tough and truth that this is the idea of taking the quotient of something's up.",
    "start": "4384140",
    "end": "4392210"
  },
  {
    "text": "So you'll find all words that, that, that, that contain everything in the in the denominator.",
    "start": "4392210",
    "end": "4400520"
  },
  {
    "text": "Okay. Now the second query in in what, five letter word.",
    "start": "4400520",
    "end": "4407460"
  },
  {
    "text": "If you want five letter words, can we?",
    "start": "4407460",
    "end": "4413050"
  },
  {
    "text": "Change B to an O and still have I can get another word.",
    "start": "4413050",
    "end": "4423290"
  },
  {
    "text": "Now, it's a little hard to do this because B is a constant noise of all so subtle,",
    "start": "4423290",
    "end": "4428730"
  },
  {
    "text": "but but there are there are a bunch of these and in my in this notation,",
    "start": "4428730",
    "end": "4438810"
  },
  {
    "text": "with these operations on families, I can, for example, say F divided by B one joined with.",
    "start": "4438810",
    "end": "4448710"
  },
  {
    "text": "Oh, no. B, one union or one. And and then I, I joined that would be one this would be a word.",
    "start": "4448710",
    "end": "4465469"
  },
  {
    "text": "I was. I looked for all five letter words that have either a B that I have that work with with B one and or one bullet.",
    "start": "4465470",
    "end": "4474320"
  },
  {
    "text": "And one of the answer is busts.",
    "start": "4474320",
    "end": "4482270"
  },
  {
    "text": "OK, busts out OK. There's also basis basis goes to Oasis.",
    "start": "4482270",
    "end": "4491960"
  },
  {
    "text": "OK, so then, you know, then I can do it with with other positions, it turns out in second position there.",
    "start": "4491960",
    "end": "4500060"
  },
  {
    "text": "There are none. But if I if I look at the third one here and I join it with B three, it turns out there's only one word and it's Bobby.",
    "start": "4500060",
    "end": "4511830"
  },
  {
    "text": "Changed to movie, OK? And and then and with and in the fourth position.",
    "start": "4511830",
    "end": "4519960"
  },
  {
    "text": "There are there are three answers and I will give you just one of them.",
    "start": "4519960",
    "end": "4528090"
  },
  {
    "text": "One, you thought. I'll let you find the others for yourself. But how about herbs?",
    "start": "4528090",
    "end": "4534659"
  },
  {
    "text": "So. So you get the idea. And so so with these operations that we have on family that says there's a need for a notation for them.",
    "start": "4534660",
    "end": "4549870"
  },
  {
    "text": "I found no you know, I find people using these these operations, but I don't have anywhere standard notation.",
    "start": "4549870",
    "end": "4557100"
  },
  {
    "text": "So I'm I'm trying to promote the notations that I came up with.",
    "start": "4557100",
    "end": "4562380"
  },
  {
    "text": "They look fairly good. And I've been working with them for a while. And so I call this family algebra. And so. So we have an algebra.",
    "start": "4562380",
    "end": "4569460"
  },
  {
    "text": "You know, you have boolean algebra. Well, there's also family algebra. So some family algebra has operations not only of union intersection has joined, meet and.",
    "start": "4569460",
    "end": "4580890"
  },
  {
    "text": "And there's more. OK.",
    "start": "4580890",
    "end": "4586350"
  },
  {
    "text": "I. What family values, family values.",
    "start": "4586350",
    "end": "4592550"
  },
  {
    "text": "Which is great. And I cut.",
    "start": "4592550",
    "end": "4599349"
  },
  {
    "text": "I could cut. I don't have time to give you, like, my other examples. But but here's like take this one.",
    "start": "4599350",
    "end": "4605640"
  },
  {
    "text": "F meet F minus F.",
    "start": "4605640",
    "end": "4611200"
  },
  {
    "text": "This would be F meet F is all of the.",
    "start": "4611200",
    "end": "4621150"
  },
  {
    "text": "It every it's a family of all things that and that can be read.",
    "start": "4621150",
    "end": "4627890"
  },
  {
    "text": "Oh, all fragments of a word, all or all partial words that that are the intersection of two of two different words.",
    "start": "4627890",
    "end": "4635280"
  },
  {
    "text": "Except take the word with itself. Every word.",
    "start": "4635280",
    "end": "4642829"
  },
  {
    "text": "Intersected with herself is justified their thing. But if I throw out those, then I'm getting all the sub words that are all the intersection of of of two distinct words.",
    "start": "4642830",
    "end": "4654050"
  },
  {
    "text": "OK. Like RCL A is one of the examples we had before which relais and relax when.",
    "start": "4654050",
    "end": "4662710"
  },
  {
    "text": "And and so on. Now our intersections of two distinct.",
    "start": "4662710",
    "end": "4670719"
  },
  {
    "text": "And I have lots of lots of other examples in my book, but I don't have time to do it.",
    "start": "4670720",
    "end": "4677540"
  },
  {
    "text": "And some of these calculations are I believe I can do much faster with these than with the with",
    "start": "4677540",
    "end": "4684710"
  },
  {
    "text": "it with the ordinary ways of representing dictionaries and compute what goes with palindromes.",
    "start": "4684710",
    "end": "4693260"
  },
  {
    "text": "But you are now called Palindrome Pelander. You know, this one right from.",
    "start": "4693260",
    "end": "4712869"
  },
  {
    "text": "But yes, you can. Yeah, you can. You can. Yeah. Yeah, you can. You can find paint. You can find palindromes with with with and and and other stuff, too.",
    "start": "4712870",
    "end": "4724380"
  },
  {
    "text": "But but but not not the. I mean, there are faster ways to get to get there.",
    "start": "4724380",
    "end": "4731500"
  },
  {
    "text": "Not all comments or problems. Go. Go. Best was. So up.",
    "start": "4731500",
    "end": "4736850"
  },
  {
    "text": "Just like overbuy. But but those. So a lot of times the more constrained it is that the more.",
    "start": "4736850",
    "end": "4746170"
  },
  {
    "text": "Some of these more classical and simpler methods. Well and well known methods.",
    "start": "4746170",
    "end": "4753040"
  },
  {
    "text": "OK. Now where am I. Here I think I could. So I'll never get to that.",
    "start": "4753040",
    "end": "4762040"
  },
  {
    "text": "So. Well, there's just so much so many things.",
    "start": "4762040",
    "end": "4768250"
  },
  {
    "text": "Let me let me see. So if they thought, you know, I never run so far over time before and you guys are very nice to stay this long, but are so.",
    "start": "4768250",
    "end": "4779130"
  },
  {
    "text": "So. So let me let me explain to what I what I would love to go on in more detail and",
    "start": "4779130",
    "end": "4785380"
  },
  {
    "text": "then you can download the thing and see why I wanted to make it a course in it.",
    "start": "4785380",
    "end": "4790540"
  },
  {
    "text": "So still more operations on families. We have the closure on. And these are things that people who who who wrote, you know, there's so many people working with families of sets in different parts of commentary.",
    "start": "4790540",
    "end": "4801010"
  },
  {
    "text": "So we talk about the closure, the set of all intersections that you can get.",
    "start": "4801010",
    "end": "4806260"
  },
  {
    "text": "Yeah. Anything that you can get by any number of intersections, not just two, but three intersections and things like that.",
    "start": "4806260",
    "end": "4814000"
  },
  {
    "text": "We can ask for the maximal elements of a family, those that aren't trained in any other other side of the family.",
    "start": "4814000",
    "end": "4822670"
  },
  {
    "text": "We can ask for the minimal elements of the family, lacross elements. It's too hard to explain the non subsets, the elements of F that are not contained in any in any elements of that of G.",
    "start": "4822670",
    "end": "4839050"
  },
  {
    "text": "The memories of F that are not contained in any memory that the memories of I, I use this this arrow here saying go away from f f in the subset category and go towards G.",
    "start": "4839050",
    "end": "4853190"
  },
  {
    "text": "And I'm going away from F for four super sets.",
    "start": "4853190",
    "end": "4858310"
  },
  {
    "text": "Is an arrow in this direction and an end by the way. There's, there's also an arrow going this way, which are the subsets, the ones that that the elements of f that are subsets of of some element of G.",
    "start": "4858310",
    "end": "4874110"
  },
  {
    "text": "So, so, so good to have notations for these operations. And all of these operations, again, have nice recursive definitions on the ZT d structure and don't take much time.",
    "start": "4874110",
    "end": "4887310"
  },
  {
    "text": "The ACL keyboard. Yeah. This is what I what I had.",
    "start": "4887310",
    "end": "4892860"
  },
  {
    "text": "Well I, I can use two letters but. Yeah. OK. But in my I, I can imagine what would've happened if it, if this had come along at the time.",
    "start": "4892860",
    "end": "4908740"
  },
  {
    "text": "APL is designed. OK now. So this gives us graph theory and hyper graph theory.",
    "start": "4908740",
    "end": "4920020"
  },
  {
    "text": "So a graph is a family of sets. Each set has has two elements in it. Hyper graph is the same kind of thing.",
    "start": "4920020",
    "end": "4930940"
  },
  {
    "text": "So the independent sets of a graph are the power set, not contain it.",
    "start": "4930940",
    "end": "4938920"
  },
  {
    "text": "OK. This this funny notation. I use the viasat ISP for this. But then this week. This is the. This is the family of all sets.",
    "start": "4938920",
    "end": "4948540"
  },
  {
    "text": "So so can take the family of all sets, but that are not contained in any in any element,",
    "start": "4948540",
    "end": "4955610"
  },
  {
    "text": "in any edge of of the graph, that's by definition an independent set.",
    "start": "4955610",
    "end": "4961600"
  },
  {
    "text": "And and this has a very simple DVD. It goes like one dot, dot, dot to dot that three and so on.",
    "start": "4961600",
    "end": "4973490"
  },
  {
    "text": "And and so anyway, we can we can find all independent sets.",
    "start": "4973490",
    "end": "4978920"
  },
  {
    "text": "We can find the maximal independent sets by taking the maximum elements of that guy. We can find all the dominating sets. And there is it is a fairly simple calculation.",
    "start": "4978920",
    "end": "4993020"
  },
  {
    "text": "Find the dummy sets of a graph, the minimal dominating sets. And so I give you the flavor of that.",
    "start": "4993020",
    "end": "5003000"
  },
  {
    "text": "But consider that the chessboard where I have a queen and and consider the graph where two cells are a chessboard are adjacent.",
    "start": "5003000",
    "end": "5017860"
  },
  {
    "text": "If if they are in the same role in the same column or same diagonal.",
    "start": "5017860",
    "end": "5023139"
  },
  {
    "text": "So now the famous A Queens problem is to find a maximal independent set of of of of Queens.",
    "start": "5023140",
    "end": "5031460"
  },
  {
    "text": "That would be eight queens like they're the. But there's also this is also a maximal independent set.",
    "start": "5031460",
    "end": "5041230"
  },
  {
    "text": "These queens don't attack each other. But if we place any six queen here, it would it would it would be in line with one of these five.",
    "start": "5041230",
    "end": "5051430"
  },
  {
    "text": "And so this is called a kernel of a graph. It's a maximal independent set, not just an independent set.",
    "start": "5051430",
    "end": "5058140"
  },
  {
    "text": "And the smallest kernels, ah ah are important in many common to our problems.",
    "start": "5058140",
    "end": "5064020"
  },
  {
    "text": "So this is an example of the smallest kernel. Then you have clicks here. There's a maximum clip. These are both maximal clicks and this the maximum click of Queens.",
    "start": "5064020",
    "end": "5075909"
  },
  {
    "text": "This was the view. These are dominating sets. A dominating set is so it is where all this everything.",
    "start": "5075910",
    "end": "5085260"
  },
  {
    "text": "It doesn't contain a queen on it. It is attacked by some queen.",
    "start": "5085260",
    "end": "5090599"
  },
  {
    "text": "And and this is the only case where you can leave out the entire middle of the board.",
    "start": "5090600",
    "end": "5096470"
  },
  {
    "text": "And it's not independent, you know. These aren't independent, but they dominate the whole board. And here here's another dominating set.",
    "start": "5096470",
    "end": "5105520"
  },
  {
    "text": "This is this. This is a problem that not not too well known place, 11 queens in such a way that that if you take any one of the eleven,",
    "start": "5105520",
    "end": "5117480"
  },
  {
    "text": "you leave such that you leave somebody uncovered one of the set, you know, all of these cells that don't have a queen in our cover here.",
    "start": "5117480",
    "end": "5127510"
  },
  {
    "text": "But if I left out any one of these 11 queens, you wouldn't it wouldn't be dominating the whole board. And you can't do that with twelve. But you can put 11 keys this way.",
    "start": "5127510",
    "end": "5136180"
  },
  {
    "text": "OK, so these are these are problems that are there. Very nice to sell with these and four oh oh graphs in hypergrowth.",
    "start": "5136180",
    "end": "5147400"
  },
  {
    "text": "And in many cases, I, I think it's better than backtracking, better than the other solutions that I used to know.",
    "start": "5147400",
    "end": "5155469"
  },
  {
    "text": "OK, now. So when I look at these graph terms, then there's there's path graph.",
    "start": "5155470",
    "end": "5165260"
  },
  {
    "text": "And so to my to my surprise,",
    "start": "5165260",
    "end": "5171940"
  },
  {
    "text": "I think I can take problems like this that say find all the paths from a corner",
    "start": "5171940",
    "end": "5182080"
  },
  {
    "text": "to corner of of the square that don't intersect them so they don't intersect.",
    "start": "5182080",
    "end": "5187310"
  },
  {
    "text": "So if we do it on a larger grid, that is eight by eight.",
    "start": "5187310",
    "end": "5193000"
  },
  {
    "text": "So this would be the number of ways to move a rook front from upper left corner of a chessboard to the lower right corner without ever going into the same cell twice.",
    "start": "5193000",
    "end": "5203850"
  },
  {
    "text": "There's seven hundred and eighty nine billion ways to do it. And the CBD has some thirty five thirty four thousand nodes where the this is as easy for the three by three case.",
    "start": "5203850",
    "end": "5220170"
  },
  {
    "text": "And so you can solve problems like bypass.",
    "start": "5220170",
    "end": "5228600"
  },
  {
    "text": "And here's an when I showed this to Andy Bryant, who's the guy who invented BDD.",
    "start": "5228600",
    "end": "5233980"
  },
  {
    "text": "He said, OK, done. How's this for a problem for you?",
    "start": "5233980",
    "end": "5239650"
  },
  {
    "text": "Suppose suppose I wanted to take a driving tour of the continental United States visiting all of the state capitals,",
    "start": "5239650",
    "end": "5245620"
  },
  {
    "text": "passing through each state only once. What role should I take to minimize the total distance?",
    "start": "5245620",
    "end": "5251070"
  },
  {
    "text": "The following diagram shows the shortest distances between neighboring capital cities like between the capital of Missouri and capital of Kentucky is 562 miles or so.",
    "start": "5251070",
    "end": "5260090"
  },
  {
    "text": "So you have the data here and this on his graph and you can make a ZT is supposed",
    "start": "5260090",
    "end": "5267929"
  },
  {
    "text": "to find a Hamiltonian path of the smallest total length in this in his graph. So what happens? Well, it turns out that.",
    "start": "5267930",
    "end": "5278960"
  },
  {
    "text": "There is a series of seventy eight hundred nodes for all night, all the pairs from California to Maine,",
    "start": "5278960",
    "end": "5291960"
  },
  {
    "text": "they don't that they don't, quote, go through any state twice and.",
    "start": "5291960",
    "end": "5299680"
  },
  {
    "text": "And not necessarily Hamiltonian, but but need a simple pass, just a simple path, that means that doesn't doesn't hit any vertex twice.",
    "start": "5299680",
    "end": "5308500"
  },
  {
    "text": "And you can also determine how many paths there are of each length from California to Maine. And, you know, there's four paths of length, Lhevinne, 124 of length, twelve and so on.",
    "start": "5308500",
    "end": "5317590"
  },
  {
    "text": "The longest paths are Hamiltonian and there are two million of them. Now, if we're just. OK. Anyway, we can solve it.",
    "start": "5317590",
    "end": "5328330"
  },
  {
    "text": "We can solve Randy's problem. And the took the total running time.",
    "start": "5328330",
    "end": "5333700"
  },
  {
    "text": "And I forget how many Megaman. Let's see. So name two. Any other state. There's 68 million ways to do it.",
    "start": "5333700",
    "end": "5343450"
  },
  {
    "text": "But Exercise 230 contains the answer. So I show you the answer.",
    "start": "5343450",
    "end": "5349490"
  },
  {
    "text": "And I guess we better wind up here. But but these are the unique minimum and maximum roots in his problem, starting from Maine.",
    "start": "5349490",
    "end": "5362690"
  },
  {
    "text": "And they write right by chance, they both end up in Virginia. If you if you follow them through the best ways, 11000 some miles, the worst way is 18000 some miles.",
    "start": "5362690",
    "end": "5375290"
  },
  {
    "text": "And the amazing thing is that with the Zaydi, it not you can not only easily figure the shortest route in the maximum route,",
    "start": "5375290",
    "end": "5385700"
  },
  {
    "text": "but you can also find the average cost of the average route, which is 14000 some.",
    "start": "5385700",
    "end": "5391490"
  },
  {
    "text": "And the standard deviation. OK. So between all these routes. So and somewhere in here, I mentioned the running time, which was quite rude, which was quite reasonable to do this.",
    "start": "5391490",
    "end": "5409469"
  },
  {
    "text": "Well. There is more.",
    "start": "5409470",
    "end": "5416660"
  },
  {
    "text": "As I said, I'm trying to find examples of. I was I was looking at spanning trees of a graph.",
    "start": "5416660",
    "end": "5424680"
  },
  {
    "text": "And I had I had constructed the BTD for the connected sets of a graph.",
    "start": "5424680",
    "end": "5429870"
  },
  {
    "text": "And that appeared that appeared here. I had this in this graph. I wanted to say which sets of edges are connected.",
    "start": "5429870",
    "end": "5439889"
  },
  {
    "text": "And this is a boolean function. That's true. If they're connected in false. If they aren't, then. I wanted the.",
    "start": "5439890",
    "end": "5449920"
  },
  {
    "text": "But I wanted the being connected means it contains a spanning tree. So then I wanted the like I wanted the BTD for all the all the spanning trees.",
    "start": "5449920",
    "end": "5462320"
  },
  {
    "text": "In other words, F of X is is one if and only if X is a spanning tree of this graph.",
    "start": "5462320",
    "end": "5467400"
  },
  {
    "text": "And that's a lot bigger. So like so I look for the CTD for the spanning trees.",
    "start": "5467400",
    "end": "5473520"
  },
  {
    "text": "And to my surprise, the Zebedee was exactly this.",
    "start": "5473520",
    "end": "5479920"
  },
  {
    "text": "And so I said, well, that's you know, I've got to find another example because.",
    "start": "5479920",
    "end": "5485449"
  },
  {
    "text": "But but I couldn't. It turned out that you take any any connected graph and you form the BTD for its connected subset.",
    "start": "5485450",
    "end": "5493740"
  },
  {
    "text": "That's also the ziti for all the spanning trees. And and and I, I, I saw sharding.",
    "start": "5493740",
    "end": "5506360"
  },
  {
    "text": "I mean, I guess he had to leave now. He proved the converse and consulted with Congress.",
    "start": "5506360",
    "end": "5511440"
  },
  {
    "text": "That is, if you have any, any graph monitoring function that's BBT is equal to the ZT of its prime applicants.",
    "start": "5511440",
    "end": "5522510"
  },
  {
    "text": "If and only if the prime applicants are the the independent sets of a Metroid, which which is.",
    "start": "5522510",
    "end": "5528900"
  },
  {
    "text": "Anyway, there's marvelous things out there just waiting to be discovered. These this theorem is about a month old and I'm in in Paris.",
    "start": "5528900",
    "end": "5539970"
  },
  {
    "text": "Last week I, I met Shalvey man who had been playing around with with CTD to represent integers,",
    "start": "5539970",
    "end": "5547020"
  },
  {
    "text": "huge integers and doing operations like multiplying integers represented as entities.",
    "start": "5547020",
    "end": "5553020"
  },
  {
    "text": "And I believe then that there's a lot more coming in this world as more and more people get to get to understand this marvelous data structure.",
    "start": "5553020",
    "end": "5566520"
  },
  {
    "text": "OK. Excuse me for for for going so far over time, I just couldn't help it.",
    "start": "5566520",
    "end": "5579221"
  }
]