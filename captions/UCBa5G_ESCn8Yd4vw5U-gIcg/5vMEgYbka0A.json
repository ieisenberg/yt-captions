[
  {
    "text": "So now we are shifting gears and we are talking about theory of graph neural networks.",
    "start": "3980",
    "end": "12735"
  },
  {
    "text": "And we are in particular going to ask ourselves how expressive are graph neural networks,",
    "start": "12735",
    "end": "18930"
  },
  {
    "text": "what are graph neural networks able to learn,",
    "start": "18930",
    "end": "21795"
  },
  {
    "text": "and what are they not uh, able to learn?",
    "start": "21795",
    "end": "24900"
  },
  {
    "text": "This is really the question for uh,",
    "start": "24900",
    "end": "27869"
  },
  {
    "text": "this part of the lecture.",
    "start": "27870",
    "end": "29490"
  },
  {
    "text": "So we talk about deep uh,",
    "start": "29490",
    "end": "32685"
  },
  {
    "text": "neural networks applied to graphs,",
    "start": "32685",
    "end": "35055"
  },
  {
    "text": "where through several um,",
    "start": "35055",
    "end": "37130"
  },
  {
    "text": "layers of non-linear propagation,",
    "start": "37130",
    "end": "39420"
  },
  {
    "text": "we are trying to come up with the embeddings of nodes, embeddings of networks.",
    "start": "39420",
    "end": "43980"
  },
  {
    "text": "So we can do various kinds of machine learning prediction tasks.",
    "start": "43980",
    "end": "48864"
  },
  {
    "text": "The key idea that graph neural networks have is this idea of aggregating",
    "start": "48865",
    "end": "55505"
  },
  {
    "text": "local neighborhoods around a given node",
    "start": "55505",
    "end": "59600"
  },
  {
    "text": "of interest to generate the embedding for that node.",
    "start": "59600",
    "end": "62850"
  },
  {
    "text": "Right, So this is kind of the classical picture we've been showing",
    "start": "62850",
    "end": "66095"
  },
  {
    "text": "several times in our discussions so far.",
    "start": "66095",
    "end": "70985"
  },
  {
    "text": "Right, so the intuition is that nodes",
    "start": "70985",
    "end": "73220"
  },
  {
    "text": "aggregate information from their neighbors using neural networks.",
    "start": "73220",
    "end": "77750"
  },
  {
    "text": "And so far we discussed what kind of design choices you have when deciding how to,",
    "start": "77750",
    "end": "84200"
  },
  {
    "text": "how to operationalize or how to design",
    "start": "84200",
    "end": "87695"
  },
  {
    "text": "this message transformation and aggregation operations.",
    "start": "87695",
    "end": "92785"
  },
  {
    "text": "So today, right now we are going to talk about the theory of graph neural networks.",
    "start": "92785",
    "end": "98465"
  },
  {
    "text": "And in particular, we are going to ask how powerful are graph neural networks.",
    "start": "98465",
    "end": "103149"
  },
  {
    "text": "How expressive are they?",
    "start": "103150",
    "end": "104930"
  },
  {
    "text": "What can they learn and what can they not learn?",
    "start": "104930",
    "end": "108425"
  },
  {
    "text": "This is especially important because there are many different and GNN models.",
    "start": "108425",
    "end": "113770"
  },
  {
    "text": "Right, we talked about the GCN, graph convolution neural network.",
    "start": "113770",
    "end": "117350"
  },
  {
    "text": "We talked about that, the graph attention network.",
    "start": "117350",
    "end": "119795"
  },
  {
    "text": "We talked about the GraphSAGE network and we talked about",
    "start": "119795",
    "end": "123110"
  },
  {
    "text": "the entire design space of these types of models.",
    "start": "123110",
    "end": "127195"
  },
  {
    "text": "So the question is, what is their expressive power?",
    "start": "127195",
    "end": "131045"
  },
  {
    "text": "Which basically means what is their ability to distinguish different nodes,",
    "start": "131045",
    "end": "135470"
  },
  {
    "text": "different graph structures, and how",
    "start": "135470",
    "end": "138170"
  },
  {
    "text": "expressive are they in learning different types of patterns?",
    "start": "138170",
    "end": "141685"
  },
  {
    "text": "And then what would be super cool today is that we will be actually able",
    "start": "141685",
    "end": "145670"
  },
  {
    "text": "to design the maximally expressive GNN models.",
    "start": "145670",
    "end": "149650"
  },
  {
    "text": "So in some sense, we'll be able to design",
    "start": "149650",
    "end": "151700"
  },
  {
    "text": "the most powerful graph neural network there is which is super cool.",
    "start": "151700",
    "end": "157935"
  },
  {
    "text": "So that's the- that's the plan.",
    "start": "157935",
    "end": "160680"
  },
  {
    "text": "So background is, we have many graph neural network models,",
    "start": "160680",
    "end": "165215"
  },
  {
    "text": "they all have different,",
    "start": "165215",
    "end": "167194"
  },
  {
    "text": "they all differ in terms of how they propagate,",
    "start": "167195",
    "end": "170900"
  },
  {
    "text": "aggregate, and transform messages.",
    "start": "170900",
    "end": "174034"
  },
  {
    "text": "And the question is,",
    "start": "174035",
    "end": "175925"
  },
  {
    "text": "can we understand what is their expressive power and how these different design choices",
    "start": "175925",
    "end": "180995"
  },
  {
    "text": "actually lead to different type of models.",
    "start": "180995",
    "end": "186834"
  },
  {
    "text": "So for example, in a graph,",
    "start": "186835",
    "end": "189560"
  },
  {
    "text": "convolutional neural networks, GCN.",
    "start": "189560",
    "end": "192200"
  },
  {
    "text": "It's using what is called mean pooling.",
    "start": "192200",
    "end": "194405"
  },
  {
    "text": "Right, so basically when,",
    "start": "194405",
    "end": "195635"
  },
  {
    "text": "when we aggregate information from neighbors,",
    "start": "195635",
    "end": "199489"
  },
  {
    "text": "we use  element-wise mean pooling.",
    "start": "199490",
    "end": "202715"
  },
  {
    "text": "And then we use a linear transformation plus a ReLU, nonlinearity.",
    "start": "202715",
    "end": "208834"
  },
  {
    "text": "That's for example, what a GCN is.",
    "start": "208835",
    "end": "211225"
  },
  {
    "text": "For example, GraphSAGE uses a multi-layer perceptron plus element-wise,",
    "start": "211225",
    "end": "218900"
  },
  {
    "text": "let say maximum pooling which is- which is different.",
    "start": "218900",
    "end": "222409"
  },
  {
    "text": "And the question is, what is better?",
    "start": "222410",
    "end": "224430"
  },
  {
    "text": "Is max better than, than average?",
    "start": "224430",
    "end": "226890"
  },
  {
    "text": "Or what's the difference between the two in terms of,",
    "start": "226890",
    "end": "230810"
  },
  {
    "text": "let's say, theoretical properties and expressive power?",
    "start": "230810",
    "end": "234790"
  },
  {
    "text": "Um, there is an important note I wanna- I wanna make so that we don't get confused later.",
    "start": "234790",
    "end": "242185"
  },
  {
    "text": "In graph neural networks,",
    "start": "242185",
    "end": "243940"
  },
  {
    "text": "we have two aspects.",
    "start": "243940",
    "end": "245229"
  },
  {
    "text": "We have the aspect of node features,",
    "start": "245229",
    "end": "247420"
  },
  {
    "text": "node properties, and we have the aspect of a graph structure.",
    "start": "247420",
    "end": "252175"
  },
  {
    "text": "And for the purpose of this lecture,",
    "start": "252175",
    "end": "254575"
  },
  {
    "text": "I'm going to use colors of nodes to represent their feature vectors.",
    "start": "254575",
    "end": "259880"
  },
  {
    "text": "What I mean by this, if two nodes are of the same color,",
    "start": "259880",
    "end": "262765"
  },
  {
    "text": "then they have the same feature vector,",
    "start": "262765",
    "end": "265615"
  },
  {
    "text": "they have the same feature representation.",
    "start": "265615",
    "end": "267895"
  },
  {
    "text": "Right? So for example,",
    "start": "267895",
    "end": "269199"
  },
  {
    "text": "in this graph here,",
    "start": "269200",
    "end": "270925"
  },
  {
    "text": "numbers represent node IDs.",
    "start": "270925",
    "end": "273580"
  },
  {
    "text": "So I can say I'm talking about node 1,",
    "start": "273580",
    "end": "275800"
  },
  {
    "text": "I'm talking about node 2,",
    "start": "275800",
    "end": "277659"
  },
  {
    "text": "but the features these nodes have are all the same.",
    "start": "277660",
    "end": "281300"
  },
  {
    "text": "So there is no featured information that would",
    "start": "281300",
    "end": "284659"
  },
  {
    "text": "allow me to distinguish nodes from one another, right?",
    "start": "284660",
    "end": "288140"
  },
  {
    "text": "So we don't, the color means what is the feature vector of the node.",
    "start": "288140",
    "end": "294185"
  },
  {
    "text": "So now for example, the question would be,",
    "start": "294185",
    "end": "296555"
  },
  {
    "text": "how well can a GNN distinguish different graphical structures, right?",
    "start": "296555",
    "end": "301160"
  },
  {
    "text": "Because if every node has",
    "start": "301160",
    "end": "302585"
  },
  {
    "text": "its own unique feature vector then it's easy to distinguish the nodes.",
    "start": "302585",
    "end": "306530"
  },
  {
    "text": "You just look at their feature vectors.",
    "start": "306530",
    "end": "308560"
  },
  {
    "text": "But if all the feature vectors are the same, like in this case,",
    "start": "308560",
    "end": "312035"
  },
  {
    "text": "all nodes are yellow,",
    "start": "312035",
    "end": "313220"
  },
  {
    "text": "then the question is, can you still distinguish the nodes?",
    "start": "313220",
    "end": "315850"
  },
  {
    "text": "Can you learn that node 5 is different than node 4,",
    "start": "315850",
    "end": "320200"
  },
  {
    "text": "for example, in this case.",
    "start": "320200",
    "end": "322460"
  },
  {
    "text": "So and in graph neural networks,",
    "start": "322460",
    "end": "326225"
  },
  {
    "text": "we are particularly interested in this notion of local neighborhood structures.",
    "start": "326225",
    "end": "331340"
  },
  {
    "text": "Where basically we are interested in quantifying",
    "start": "331340",
    "end": "334400"
  },
  {
    "text": "the local network neighborhood around each node in the graph.",
    "start": "334400",
    "end": "339354"
  },
  {
    "text": "So for example here,",
    "start": "339355",
    "end": "341360"
  },
  {
    "text": "let's say I'm interested in nodes 1 and 5 and I",
    "start": "341360",
    "end": "344180"
  },
  {
    "text": "say could I learn to distinguish nodes 1 and 5?",
    "start": "344180",
    "end": "347979"
  },
  {
    "text": "Distinguishing them would be quite easy",
    "start": "347980",
    "end": "350735"
  },
  {
    "text": "because they have different neighborhood structures,",
    "start": "350735",
    "end": "353914"
  },
  {
    "text": "even if you look at the number of edges that is adjacent to each of them,",
    "start": "353915",
    "end": "358310"
  },
  {
    "text": "you know, node 1 has degree 2 and node 5 has degree 3.",
    "start": "358310",
    "end": "362605"
  },
  {
    "text": "So it'll be very easy to distinguish them.",
    "start": "362605",
    "end": "365885"
  },
  {
    "text": "If you can capture the degree of the node in a graph neural network,",
    "start": "365885",
    "end": "370115"
  },
  {
    "text": "then you can differentiate between nodes 1 and 5.",
    "start": "370115",
    "end": "374595"
  },
  {
    "text": "Let's look now at the second example.",
    "start": "374595",
    "end": "377705"
  },
  {
    "text": "How about nodes 1 and 4?",
    "start": "377705",
    "end": "380944"
  },
  {
    "text": "Are they distinguishable?",
    "start": "380945",
    "end": "382660"
  },
  {
    "text": "Right? If you look at it from the single layer,",
    "start": "382660",
    "end": "389390"
  },
  {
    "text": "single hop neighborhood, then node 1 has degree 2.",
    "start": "389390",
    "end": "392950"
  },
  {
    "text": "And node 4 has degree 2.",
    "start": "392950",
    "end": "394755"
  },
  {
    "text": "So if I only am able to capture the degree of the node itself,",
    "start": "394755",
    "end": "398450"
  },
  {
    "text": "I cannot differentiate between 1 and 2, right?",
    "start": "398450",
    "end": "401540"
  },
  {
    "text": "They have the same feature vector and they have the same degree.",
    "start": "401540",
    "end": "404695"
  },
  {
    "text": "However, 1 and 2 are still different because if I look at,",
    "start": "404695",
    "end": "409040"
  },
  {
    "text": "let's say the second-degree neighborhood.",
    "start": "409040",
    "end": "411740"
  },
  {
    "text": "Right? You could say, ah-ha,  node 1 has two neighbors.",
    "start": "411740",
    "end": "415970"
  },
  {
    "text": "One has degree 2 and 1 has degree 3.",
    "start": "415970",
    "end": "419230"
  },
  {
    "text": "While node 4 also has two neighbors,",
    "start": "419230",
    "end": "422300"
  },
  {
    "text": "but one has degree 1 and the other one has degree 3.",
    "start": "422300",
    "end": "425659"
  },
  {
    "text": "So if I'm able to capture the degree of the node",
    "start": "425660",
    "end": "428090"
  },
  {
    "text": "4 of the node itself plus the degrees of the neighbors,",
    "start": "428090",
    "end": "432379"
  },
  {
    "text": "then 1 and 4 are distinguishable because their neighbors have different degrees.",
    "start": "432379",
    "end": "438350"
  },
  {
    "text": "Right? So now you see how maybe immediately two- two nodes look the same.",
    "start": "438350",
    "end": "443690"
  },
  {
    "text": "But if you go deeper into the network here,",
    "start": "443690",
    "end": "445925"
  },
  {
    "text": "I go to the neighbors,",
    "start": "445925",
    "end": "447275"
  },
  {
    "text": "then the two nodes become distinguishable.",
    "start": "447275",
    "end": "451185"
  },
  {
    "text": "And that is very interesting.",
    "start": "451185",
    "end": "453810"
  },
  {
    "text": "So now let's continue this investigation and look at another pair of nodes.",
    "start": "453810",
    "end": "458990"
  },
  {
    "text": "Let's look at nodes 1 and 2.",
    "start": "458990",
    "end": "462120"
  },
  {
    "text": "What is interesting is that 1 and 2- actually, um,",
    "start": "462120",
    "end": "465985"
  },
  {
    "text": "in this graph neural,",
    "start": "465985",
    "end": "467305"
  },
  {
    "text": "in this network are indistinguishable from one another.",
    "start": "467305",
    "end": "470574"
  },
  {
    "text": "Because they are kind of symmetric in the graph, right?",
    "start": "470575",
    "end": "473920"
  },
  {
    "text": "They both have degree 2, um, uh,",
    "start": "473920",
    "end": "476545"
  },
  {
    "text": "their neighbor, um, they both have two neighbors.",
    "start": "476545",
    "end": "480055"
  },
  {
    "text": "Uh, one of degree- of degree 2 and one of degree 3.",
    "start": "480055",
    "end": "483550"
  },
  {
    "text": "Um, if you go to the second hop neighborhood,",
    "start": "483550",
    "end": "486099"
  },
  {
    "text": "it's, uh, the node number 4,",
    "start": "486099",
    "end": "488080"
  },
  {
    "text": "uh, that has degree 2.",
    "start": "488080",
    "end": "489520"
  },
  {
    "text": "So basically their- their, uh,",
    "start": "489520",
    "end": "491875"
  },
  {
    "text": "network neighborhood is identical",
    "start": "491875",
    "end": "494965"
  },
  {
    "text": "regardless how deep or how far do we explore the network.",
    "start": "494965",
    "end": "498805"
  },
  {
    "text": "Because in- in both cases,",
    "start": "498805",
    "end": "500800"
  },
  {
    "text": "you know, they have,",
    "start": "500800",
    "end": "502074"
  },
  {
    "text": "each- each of them has one node of degree 2,",
    "start": "502075",
    "end": "505210"
  },
  {
    "text": "one node of degree 3.",
    "start": "505210",
    "end": "506740"
  },
  {
    "text": "At two-hop neighborhood, um,",
    "start": "506740",
    "end": "508465"
  },
  {
    "text": "they both have one neighbor of degree 2.",
    "start": "508465",
    "end": "511720"
  },
  {
    "text": "Three hops away they both have one neighbor of degree 1.",
    "start": "511720",
    "end": "514960"
  },
  {
    "text": "So you cannot distinguish one and two unless somebody gives you",
    "start": "514960",
    "end": "519370"
  },
  {
    "text": "some feature information that would allow you to s- tell 1 from 2.",
    "start": "519370",
    "end": "523750"
  },
  {
    "text": "But based on the graph structure,",
    "start": "523750",
    "end": "525325"
  },
  {
    "text": "you cannot distinguish them because they're kind of symmetric.",
    "start": "525325",
    "end": "528205"
  },
  {
    "text": "Their- their positions are isomorphic,",
    "start": "528205",
    "end": "530515"
  },
  {
    "text": "uh, in the graph, right?",
    "start": "530515",
    "end": "531820"
  },
  {
    "text": "So that's an exa- an- an example,",
    "start": "531820",
    "end": "534234"
  },
  {
    "text": "kind of trying to build up intuition how this,",
    "start": "534234",
    "end": "536920"
  },
  {
    "text": "uh, will all, uh, work out.",
    "start": "536920",
    "end": "539380"
  },
  {
    "text": "So the key question we wanna,",
    "start": "539380",
    "end": "542580"
  },
  {
    "text": "uh, look at is,",
    "start": "542580",
    "end": "544350"
  },
  {
    "text": "can a GNN node embedding distinguish different local neighborhood structures, right?",
    "start": "544350",
    "end": "550785"
  },
  {
    "text": "Local meaning neighborhoods structures around a given node.",
    "start": "550785",
    "end": "554555"
  },
  {
    "text": "And if it can, the question is when and if not,",
    "start": "554555",
    "end": "558100"
  },
  {
    "text": "what are the failure cases of graph neural networks?",
    "start": "558100",
    "end": "561519"
  },
  {
    "text": "So- so what we'll do next is we need to understand",
    "start": "561520",
    "end": "564895"
  },
  {
    "text": "how a GNN captures local neighborhood structures.",
    "start": "564895",
    "end": "568900"
  },
  {
    "text": "And we are going to understand this through this key concept of a computational graph.",
    "start": "568900",
    "end": "573640"
  },
  {
    "text": "So let me now talk about, uh,",
    "start": "573640",
    "end": "575935"
  },
  {
    "text": "what is a computational graph, right?",
    "start": "575935",
    "end": "579220"
  },
  {
    "text": "The way you think of this is that each, uh,",
    "start": "579220",
    "end": "581665"
  },
  {
    "text": "layer, uh, a GNN aggregates,",
    "start": "581665",
    "end": "584290"
  },
  {
    "text": "uh, neighborho- neighboring embeddings.",
    "start": "584290",
    "end": "586240"
  },
  {
    "text": "So in a GNN, uh,",
    "start": "586240",
    "end": "588490"
  },
  {
    "text": "we generate an embedding through",
    "start": "588490",
    "end": "589779"
  },
  {
    "text": "a computational graph defined on the node neighborhood structure.",
    "start": "589780",
    "end": "593890"
  },
  {
    "text": "So for example, if I say here is node 1,",
    "start": "593890",
    "end": "596635"
  },
  {
    "text": "the computational graph- let's say if I do",
    "start": "596635",
    "end": "599080"
  },
  {
    "text": "a two-layer GNN for node 1 is created here, right?",
    "start": "599080",
    "end": "603085"
  },
  {
    "text": "Node 1 aggregates information from nodes 2 and 5. Here they are.",
    "start": "603085",
    "end": "607930"
  },
  {
    "text": "Node 5- node 5 aggregates information from its neighbors,",
    "start": "607930",
    "end": "612325"
  },
  {
    "text": "5 has neighbors 1, 2, and 4.",
    "start": "612325",
    "end": "615325"
  },
  {
    "text": "And node 2 here,",
    "start": "615325",
    "end": "617350"
  },
  {
    "text": "aggregates information from its neighbors,",
    "start": "617350",
    "end": "619449"
  },
  {
    "text": "node 1 and node 5.",
    "start": "619450",
    "end": "620980"
  },
  {
    "text": "So this is what we call a computation graph.",
    "start": "620980",
    "end": "623665"
  },
  {
    "text": "It simply shows us how the messages gets- get aggregated from level,",
    "start": "623665",
    "end": "628000"
  },
  {
    "text": "uh, level 0 to level 1 to level 2.",
    "start": "628000",
    "end": "631195"
  },
  {
    "text": "And this is now the computation graph that describes",
    "start": "631195",
    "end": "634120"
  },
  {
    "text": "the two-layer graph neural network for,",
    "start": "634120",
    "end": "637240"
  },
  {
    "text": "uh, node, uh, node ID, uh, 1.",
    "start": "637240",
    "end": "640165"
  },
  {
    "text": "That's the idea here.",
    "start": "640165",
    "end": "642040"
  },
  {
    "text": "And what is interesting is that now if I take, for example, uh,",
    "start": "642040",
    "end": "646180"
  },
  {
    "text": "node I- node, uh,",
    "start": "646180",
    "end": "648070"
  },
  {
    "text": "number 2 and I create a computation graph for itself,",
    "start": "648070",
    "end": "651535"
  },
  {
    "text": "uh, here it is, right?",
    "start": "651535",
    "end": "652930"
  },
  {
    "text": "Two aggregates from nodes 1 and 5, uh,",
    "start": "652930",
    "end": "656665"
  },
  {
    "text": "5 again aggregates from,",
    "start": "656665",
    "end": "658990"
  },
  {
    "text": "uh, uh, 1, 2 and 4.",
    "start": "658990",
    "end": "660805"
  },
  {
    "text": "And, uh, node number 1 aggregates from 2 and 5, right?",
    "start": "660805",
    "end": "664810"
  },
  {
    "text": "What you notice is that computational graphs for nodes 1 and 2 are actually identical.",
    "start": "664810",
    "end": "671770"
  },
  {
    "text": "They both have, uh,",
    "start": "671770",
    "end": "673600"
  },
  {
    "text": "two children at- uh,",
    "start": "673600",
    "end": "675190"
  },
  {
    "text": "at level 1 and they have,",
    "start": "675190",
    "end": "677110"
  },
  {
    "text": "you know, one- one has 2,",
    "start": "677110",
    "end": "678399"
  },
  {
    "text": "and one has fi- uh,",
    "start": "678400",
    "end": "679510"
  },
  {
    "text": "one has 3, uh,",
    "start": "679510",
    "end": "680890"
  },
  {
    "text": "at level, uh, 0.",
    "start": "680890",
    "end": "682990"
  },
  {
    "text": "So what this means is,",
    "start": "682990",
    "end": "685464"
  },
  {
    "text": "because a GNN is only doing message-passing information,",
    "start": "685465",
    "end": "689800"
  },
  {
    "text": "uh, without any node IDs,",
    "start": "689800",
    "end": "692290"
  },
  {
    "text": "it only uses node feature vectors.",
    "start": "692290",
    "end": "694720"
  },
  {
    "text": "This means that, you know,",
    "start": "694720",
    "end": "696189"
  },
  {
    "text": "if you look at these propagation,",
    "start": "696190",
    "end": "697900"
  },
  {
    "text": "uh, trees, these computation graphs,",
    "start": "697900",
    "end": "699700"
  },
  {
    "text": "right now they are different because you say, oh,",
    "start": "699700",
    "end": "701740"
  },
  {
    "text": "obviously here is node number 1 and here is node number 2.",
    "start": "701740",
    "end": "704845"
  },
  {
    "text": "So obviously these trees are different.",
    "start": "704845",
    "end": "707125"
  },
  {
    "text": "But if you only look at the colors- if you only look at the node feature information,",
    "start": "707125",
    "end": "711715"
  },
  {
    "text": "then this is how these trees look like.",
    "start": "711715",
    "end": "713770"
  },
  {
    "text": "They look identical and there is no way to tell nodes apart from each other.",
    "start": "713770",
    "end": "719635"
  },
  {
    "text": "So in all cases,",
    "start": "719635",
    "end": "721210"
  },
  {
    "text": "all the graph neural network can do,",
    "start": "721210",
    "end": "722680"
  },
  {
    "text": "can aggregate, you know,",
    "start": "722680",
    "end": "724315"
  },
  {
    "text": "the information from these nodes.",
    "start": "724315",
    "end": "725710"
  },
  {
    "text": "They all have yellow color and here it can aggregate yellow color.",
    "start": "725710",
    "end": "729880"
  },
  {
    "text": "So all it can do it is to say,",
    "start": "729880",
    "end": "731605"
  },
  {
    "text": "oh, I have three yellow children.",
    "start": "731605",
    "end": "733600"
  },
  {
    "text": "This guy can say I have two yellow children.",
    "start": "733600",
    "end": "735894"
  },
  {
    "text": "And then this- here we can say, uh-huh you know,",
    "start": "735895",
    "end": "738625"
  },
  {
    "text": "I have two children an- and one of them has two and",
    "start": "738625",
    "end": "740980"
  },
  {
    "text": "the other one has three, uh, further children.",
    "start": "740980",
    "end": "743440"
  },
  {
    "text": "And that's how we can describe this computation graph.",
    "start": "743440",
    "end": "746425"
  },
  {
    "text": "But the point is that for two different nodes,",
    "start": "746425",
    "end": "748705"
  },
  {
    "text": "1 and 2, the computation graphs are the same.",
    "start": "748705",
    "end": "751435"
  },
  {
    "text": "So without any feature information,",
    "start": "751435",
    "end": "754195"
  },
  {
    "text": "without any node attribute information, uh,",
    "start": "754195",
    "end": "756930"
  },
  {
    "text": "these two- these two nodes,",
    "start": "756930",
    "end": "758430"
  },
  {
    "text": "these two computation graphs are the same.",
    "start": "758430",
    "end": "760440"
  },
  {
    "text": "So these two nodes will be embedded into the same point in the embedding space.",
    "start": "760440",
    "end": "765435"
  },
  {
    "text": "And what this means is that they will overlap so the graph neural network won't be able,",
    "start": "765435",
    "end": "770645"
  },
  {
    "text": "uh, to distinguish them,",
    "start": "770645",
    "end": "772090"
  },
  {
    "text": "uh, and won't be able to classify node 1 into a different class than node 2,",
    "start": "772090",
    "end": "776785"
  },
  {
    "text": "because their embeddings will be exactly the same.",
    "start": "776785",
    "end": "779319"
  },
  {
    "text": "They will overlap because the- the computation graphs are the same,",
    "start": "779320",
    "end": "784420"
  },
  {
    "text": "and there is no distinguishable, uh,",
    "start": "784420",
    "end": "786310"
  },
  {
    "text": "node feature information because that's kind of our assumption, uh, going in.",
    "start": "786310",
    "end": "791125"
  },
  {
    "text": "So if there is an important slide of this lecture,",
    "start": "791125",
    "end": "794425"
  },
  {
    "text": "this is the most important slide,",
    "start": "794425",
    "end": "796089"
  },
  {
    "text": "is that basically we- GNNs capture",
    "start": "796090",
    "end": "798670"
  },
  {
    "text": "the local neighborhood structure through the computation graph.",
    "start": "798670",
    "end": "801850"
  },
  {
    "text": "And if computation graph of two nodes are the same,",
    "start": "801850",
    "end": "805134"
  },
  {
    "text": "then the two nodes will be embedded exactly into the same point in the embedding space,",
    "start": "805135",
    "end": "809905"
  },
  {
    "text": "which means that we are not able to classify one into one class,",
    "start": "809905",
    "end": "814570"
  },
  {
    "text": "and the other one into the other because they are- they are identical,",
    "start": "814570",
    "end": "817900"
  },
  {
    "text": "they are overlapping, so we cannot distinguish, uh, between them.",
    "start": "817900",
    "end": "822250"
  },
  {
    "text": "So this means just kind of to summarize,",
    "start": "822250",
    "end": "825655"
  },
  {
    "text": "is that in this simple example,",
    "start": "825655",
    "end": "827605"
  },
  {
    "text": "a GNN will generate the same embedding for nodes 1 and 2 because of two facts.",
    "start": "827605",
    "end": "833545"
  },
  {
    "text": "First is that because the computational graphs are the same, they are identical.",
    "start": "833545",
    "end": "838149"
  },
  {
    "text": "And the second important part is that",
    "start": "838150",
    "end": "840895"
  },
  {
    "text": "node feature information in this case is identical, right?",
    "start": "840895",
    "end": "844600"
  },
  {
    "text": "All- all nodes the assumption of this lecture",
    "start": "844600",
    "end": "847360"
  },
  {
    "text": "is that node features are not useful in this case,",
    "start": "847360",
    "end": "850390"
  },
  {
    "text": "so all nodes have the same feature.",
    "start": "850390",
    "end": "852325"
  },
  {
    "text": "They are all yellow, right?",
    "start": "852325",
    "end": "854200"
  },
  {
    "text": "And because GNN does not care about node IDs,",
    "start": "854200",
    "end": "858460"
  },
  {
    "text": "it cares about the attributes,",
    "start": "858460",
    "end": "860530"
  },
  {
    "text": "features of the nodes and aggregates them.",
    "start": "860530",
    "end": "862750"
  },
  {
    "text": "This means that this GNN is not able to distinguish nodes 1 and 2.",
    "start": "862750",
    "end": "867970"
  },
  {
    "text": "So 1 and 2 will always have",
    "start": "867970",
    "end": "869920"
  },
  {
    "text": "exactly the same embedding so they will always be put into the same class,",
    "start": "869920",
    "end": "873925"
  },
  {
    "text": "or they will be assigned,",
    "start": "873925",
    "end": "875380"
  },
  {
    "text": "uh, the same label.",
    "start": "875380",
    "end": "877255"
  },
  {
    "text": "Which, uh, which is interesting and, uh,",
    "start": "877255",
    "end": "880330"
  },
  {
    "text": "which now seems, uh,",
    "start": "880330",
    "end": "881650"
  },
  {
    "text": "quite- uh, quite daunting,",
    "start": "881650",
    "end": "883210"
  },
  {
    "text": "a bit disappointing, right?",
    "start": "883210",
    "end": "884440"
  },
  {
    "text": "That we so quickly found a corner case,",
    "start": "884440",
    "end": "887215"
  },
  {
    "text": "or a- or a failure case for graph neural networks",
    "start": "887215",
    "end": "890080"
  },
  {
    "text": "where they basically cannot, uh, distinguish nodes.",
    "start": "890080",
    "end": "893830"
  },
  {
    "text": "So the important point that I wanted to make here is that in general,",
    "start": "893830",
    "end": "898585"
  },
  {
    "text": "different local neighborhoods define different computation graphs, right?",
    "start": "898585",
    "end": "903190"
  },
  {
    "text": "So, uh, here are computation graphs,",
    "start": "903190",
    "end": "905380"
  },
  {
    "text": "uh, for different nodes.",
    "start": "905380",
    "end": "906745"
  },
  {
    "text": "These are computation graphs for nodes 1 and 2, uh,",
    "start": "906745",
    "end": "909385"
  },
  {
    "text": "computation graphs for nodes 3 and 4,",
    "start": "909385",
    "end": "912205"
  },
  {
    "text": "as well as computation graph,",
    "start": "912205",
    "end": "913690"
  },
  {
    "text": "uh, for node 5.",
    "start": "913690",
    "end": "915055"
  },
  {
    "text": "So now we already know that we won't be able to",
    "start": "915055",
    "end": "917740"
  },
  {
    "text": "distinguish 1 and 2 because they have the same computation graphs.",
    "start": "917740",
    "end": "921160"
  },
  {
    "text": "That's- that's some- that's fact of life.",
    "start": "921160",
    "end": "923500"
  },
  {
    "text": "There's not much we can do.",
    "start": "923500",
    "end": "924970"
  },
  {
    "text": "But the question still remains,",
    "start": "924970",
    "end": "927379"
  },
  {
    "text": "how about 3 and 4?",
    "start": "927380",
    "end": "929375"
  },
  {
    "text": "Or 3 and 5?",
    "start": "929375",
    "end": "930885"
  },
  {
    "text": "Will our graph neural network be able to distinguish these nodes,",
    "start": "930885",
    "end": "933800"
  },
  {
    "text": "because obviously they have different computational graphs.",
    "start": "933800",
    "end": "936890"
  },
  {
    "text": "So perhaps the graph neural network is able to remember,",
    "start": "936890",
    "end": "940400"
  },
  {
    "text": "or capture the structure of the computation graph,",
    "start": "940400",
    "end": "944255"
  },
  {
    "text": "which means that nodes 3 and 4 will get a different embedding,",
    "start": "944255",
    "end": "947420"
  },
  {
    "text": "because their computation graphs are different, right?",
    "start": "947420",
    "end": "950029"
  },
  {
    "text": "That's the- in some sense,",
    "start": "950030",
    "end": "951320"
  },
  {
    "text": "the big question, right?",
    "start": "951320",
    "end": "953585"
  },
  {
    "text": "So basically what I'm- what is the point is?",
    "start": "953585",
    "end": "956650"
  },
  {
    "text": "The point is that computational graphs are identical to",
    "start": "956650",
    "end": "959990"
  },
  {
    "text": "the rooted subtree structures around each node, right?",
    "start": "959990",
    "end": "963410"
  },
  {
    "text": "So we can think of this rooted subtree as it defines",
    "start": "963410",
    "end": "967285"
  },
  {
    "text": "the topological structure of the neighborhood around, uh,",
    "start": "967285",
    "end": "971470"
  },
  {
    "text": "each node and two nodes will be able to distinguish",
    "start": "971470",
    "end": "975730"
  },
  {
    "text": "them in the best case if they have different rooted subtree structures,",
    "start": "975730",
    "end": "980740"
  },
  {
    "text": "if they have different computation graphs.",
    "start": "980740",
    "end": "982839"
  },
  {
    "text": "Of course, maybe our graph neural network is so imperfect that is",
    "start": "982840",
    "end": "987280"
  },
  {
    "text": "not even able to distinguish nodes that have different computation graphs,",
    "start": "987280",
    "end": "991810"
  },
  {
    "text": "meaning that the structure of these rooted trees is different.",
    "start": "991810",
    "end": "995335"
  },
  {
    "text": "And what we are going to look at next is under what cases,",
    "start": "995335",
    "end": "998604"
  },
  {
    "text": "you know, can 2 and 3 be distinguished,",
    "start": "998604",
    "end": "1000915"
  },
  {
    "text": "and in what cases 2 and 3 will simply be lumped",
    "start": "1000915",
    "end": "1003810"
  },
  {
    "text": "together into the same, uh, embedding. So-",
    "start": "1003810",
    "end": "1008820"
  },
  {
    "text": "Kind of to continue on this, right?",
    "start": "1008820",
    "end": "1011430"
  },
  {
    "text": "GNN's node embeddings capture rooted subtree structures.",
    "start": "1011430",
    "end": "1015810"
  },
  {
    "text": "They basically cap- they wanna capture the structure of the graphing- of the,",
    "start": "1015810",
    "end": "1020654"
  },
  {
    "text": "uh, computational graph of the network neighborhood around a given node.",
    "start": "1020655",
    "end": "1024584"
  },
  {
    "text": "And the most possible expressive graph neural network will map different, uh,",
    "start": "1024585",
    "end": "1030419"
  },
  {
    "text": "rooted subtrees into different node embeddings,",
    "start": "1030420",
    "end": "1033645"
  },
  {
    "text": "uh, here, for example,",
    "start": "1033645",
    "end": "1034829"
  },
  {
    "text": "represented by different, uh, colors, right?",
    "start": "1034830",
    "end": "1037199"
  },
  {
    "text": "So one and two,",
    "start": "1037200",
    "end": "1038309"
  },
  {
    "text": "because they have exactly identical computation graphs and exactly identical features,",
    "start": "1038310",
    "end": "1043454"
  },
  {
    "text": "will be mapped to the same point.",
    "start": "1043455",
    "end": "1045329"
  },
  {
    "text": "There is nothing we can do about",
    "start": "1045330",
    "end": "1046829"
  },
  {
    "text": "that with the current definition of graph neural networks.",
    "start": "1046830",
    "end": "1050580"
  },
  {
    "text": "Um, but for example,",
    "start": "1050580",
    "end": "1052080"
  },
  {
    "text": "nodes 3, 4 and 5,",
    "start": "1052080",
    "end": "1054269"
  },
  {
    "text": "they don't have identical computation graph structures,",
    "start": "1054270",
    "end": "1057810"
  },
  {
    "text": "so they should be mapped into different,",
    "start": "1057810",
    "end": "1060390"
  },
  {
    "text": "uh, points in the embedding space, right?",
    "start": "1060390",
    "end": "1062880"
  },
  {
    "text": "So the most expressive graph neural network will basically be",
    "start": "1062880",
    "end": "1067170"
  },
  {
    "text": "able to learn or capture what is the structure of the computation graph,",
    "start": "1067170",
    "end": "1071625"
  },
  {
    "text": "and based on the structure of the computation graph assign",
    "start": "1071625",
    "end": "1074820"
  },
  {
    "text": "a different embedding for each computation graph.",
    "start": "1074820",
    "end": "1078480"
  },
  {
    "text": "Um, that's the main, uh,",
    "start": "1078480",
    "end": "1081090"
  },
  {
    "text": "uh, premise, uh, that,",
    "start": "1081090",
    "end": "1083684"
  },
  {
    "text": "uh, we are making here.",
    "start": "1083685",
    "end": "1084885"
  },
  {
    "text": "So we wanna ensure that if two nodes have different computation graphs,",
    "start": "1084885",
    "end": "1089010"
  },
  {
    "text": "then they are mapped to different points in the embedding space.",
    "start": "1089010",
    "end": "1092835"
  },
  {
    "text": "And the question is,",
    "start": "1092835",
    "end": "1094515"
  },
  {
    "text": "can graph neural networks, uh, do that?",
    "start": "1094515",
    "end": "1097905"
  },
  {
    "text": "There is an important concept for mathematics that will allow us, uh,",
    "start": "1097905",
    "end": "1103890"
  },
  {
    "text": "to make further progress in understanding whether",
    "start": "1103890",
    "end": "1107040"
  },
  {
    "text": "a graph neural network can take two different computation graphs,",
    "start": "1107040",
    "end": "1111060"
  },
  {
    "text": "two different, um, rooted subtrees",
    "start": "1111060",
    "end": "1113520"
  },
  {
    "text": "and map them into different points in the embedding space.",
    "start": "1113520",
    "end": "1116595"
  },
  {
    "text": "And that is this notion, uh,",
    "start": "1116595",
    "end": "1118559"
  },
  {
    "text": "or definition of what an injective function is.",
    "start": "1118560",
    "end": "1122040"
  },
  {
    "text": "And a function that maps from the- the- from the domain X,",
    "start": "1122040",
    "end": "1126240"
  },
  {
    "text": "uh, to domain Y is called injective.",
    "start": "1126240",
    "end": "1129345"
  },
  {
    "text": "If it maps different elements into the different outputs.",
    "start": "1129345",
    "end": "1133440"
  },
  {
    "text": "So what this basically means that f retains the information of the input, right?",
    "start": "1133440",
    "end": "1138029"
  },
  {
    "text": "It means that whatever- whatever inputs you get,",
    "start": "1138030",
    "end": "1141225"
  },
  {
    "text": "you'll always map them into distinct,",
    "start": "1141225",
    "end": "1143490"
  },
  {
    "text": "um, distinct points, sort of distinct outputs.",
    "start": "1143490",
    "end": "1146400"
  },
  {
    "text": "Meaning, for example, it's not that 2 and 3 would",
    "start": "1146400",
    "end": "1149340"
  },
  {
    "text": "collide and you would give the same output A.",
    "start": "1149340",
    "end": "1152309"
  },
  {
    "text": "So every input maps to a different output.",
    "start": "1152310",
    "end": "1155760"
  },
  {
    "text": "That's a definition of an injective function.",
    "start": "1155760",
    "end": "1158055"
  },
  {
    "text": "And we will- this is a very important concept because we will use it,",
    "start": "1158055",
    "end": "1161985"
  },
  {
    "text": "uh, for the lo- rest- rest of the lecture, uh, quite heavily.",
    "start": "1161985",
    "end": "1165705"
  },
  {
    "text": "So we wanna know how expressive is a graph neural network.",
    "start": "1165705",
    "end": "1171885"
  },
  {
    "text": "And most expressive graph neural network should map these subtrees,",
    "start": "1171885",
    "end": "1177465"
  },
  {
    "text": "these, uh, computation graphs to node embeddings injectively,",
    "start": "1177465",
    "end": "1181815"
  },
  {
    "text": "meaning that for every different subtree,",
    "start": "1181815",
    "end": "1184544"
  },
  {
    "text": "we should map it into a different point in the embedding space,",
    "start": "1184544",
    "end": "1188190"
  },
  {
    "text": "um, and if this mapping is not injective,",
    "start": "1188190",
    "end": "1190889"
  },
  {
    "text": "meaning that two different inputs,",
    "start": "1190890",
    "end": "1193020"
  },
  {
    "text": "two different subtrees get mapped to the same point,",
    "start": "1193020",
    "end": "1196665"
  },
  {
    "text": "then, um, this is not an",
    "start": "1196665",
    "end": "1199815"
  },
  {
    "text": "injective mapping and that is, uh, the issue.",
    "start": "1199815",
    "end": "1203475"
  },
  {
    "text": "So we wanna have and show that graphed- what we wanna develop",
    "start": "1203475",
    "end": "1208860"
  },
  {
    "text": "a graph neural network that has this injective mapping where",
    "start": "1208860",
    "end": "1212010"
  },
  {
    "text": "different subtrees get mapped into different points,",
    "start": "1212010",
    "end": "1215385"
  },
  {
    "text": "uh, in the embedding space.",
    "start": "1215385",
    "end": "1217660"
  },
  {
    "text": "So the key observation, uh,",
    "start": "1218360",
    "end": "1221850"
  },
  {
    "text": "that will allow us to make progress is that trees of",
    "start": "1221850",
    "end": "1224820"
  },
  {
    "text": "the same depth can be recursively characterized,",
    "start": "1224820",
    "end": "1228345"
  },
  {
    "text": "uh, from the leaf nodes,",
    "start": "1228345",
    "end": "1229784"
  },
  {
    "text": "uh, to the root nodes.",
    "start": "1229785",
    "end": "1231075"
  },
  {
    "text": "So what I mean by this is if we are able to distinguish one level of the tree,",
    "start": "1231075",
    "end": "1235649"
  },
  {
    "text": "then we can recursively,",
    "start": "1235650",
    "end": "1237420"
  },
  {
    "text": "uh, take these, uh,",
    "start": "1237420",
    "end": "1238770"
  },
  {
    "text": "levels and aggregate them together into a unique description of the tree.",
    "start": "1238770",
    "end": "1242805"
  },
  {
    "text": "So what I mean by this is, for example, um,",
    "start": "1242805",
    "end": "1245670"
  },
  {
    "text": "the way you can characterize the tree is simply by the number of",
    "start": "1245670",
    "end": "1248610"
  },
  {
    "text": "children each node has, all right?",
    "start": "1248610",
    "end": "1251850"
  },
  {
    "text": "So for example, here you could say, aha,",
    "start": "1251850",
    "end": "1254325"
  },
  {
    "text": "at the lower level one node has three neighbors,",
    "start": "1254325",
    "end": "1256980"
  },
  {
    "text": "three children, and the other node has two children.",
    "start": "1256980",
    "end": "1260385"
  },
  {
    "text": "Um, and then you can say a-ha and then the node, uh, uh,",
    "start": "1260385",
    "end": "1264580"
  },
  {
    "text": "the- the- the- the root has,",
    "start": "1264580",
    "end": "1267674"
  },
  {
    "text": "uh, has, uh, um, has,",
    "start": "1267675",
    "end": "1269760"
  },
  {
    "text": "uh, two children as well.",
    "start": "1269760",
    "end": "1271140"
  },
  {
    "text": "So I can characterize this by saying, aha, um,",
    "start": "1271140",
    "end": "1274410"
  },
  {
    "text": "you know, uh, we have,",
    "start": "1274410",
    "end": "1276000"
  },
  {
    "text": "uh, two neighbors at, uh,",
    "start": "1276000",
    "end": "1277680"
  },
  {
    "text": "level 0, we have three neighbors at level 0, and, uh,",
    "start": "1277680",
    "end": "1280725"
  },
  {
    "text": "we have, uh, two neighbors,",
    "start": "1280725",
    "end": "1282419"
  },
  {
    "text": "uh, at level, uh, at level 1.",
    "start": "1282420",
    "end": "1284355"
  },
  {
    "text": "While for example, for this particular computation graph,",
    "start": "1284355",
    "end": "1287684"
  },
  {
    "text": "I have one child here, uh,",
    "start": "1287685",
    "end": "1290235"
  },
  {
    "text": "three- three children here,",
    "start": "1290235",
    "end": "1291750"
  },
  {
    "text": "and then, again, two children here.",
    "start": "1291750",
    "end": "1293190"
  },
  {
    "text": "So this description is different than their description.",
    "start": "1293190",
    "end": "1296519"
  },
  {
    "text": "So it means I'm able to separate out, um,",
    "start": "1296520",
    "end": "1299930"
  },
  {
    "text": "or to distinguish between these two- these two different, uh, uh trees.",
    "start": "1299930",
    "end": "1304715"
  },
  {
    "text": "Uh, the important thing is that trees can be decomposed level by level,",
    "start": "1304715",
    "end": "1308315"
  },
  {
    "text": "so if I'm able to capture the structure of a single level of the tree,",
    "start": "1308315",
    "end": "1312235"
  },
  {
    "text": "perhaps even just this level,",
    "start": "1312235",
    "end": "1314250"
  },
  {
    "text": "then I can recursively do this,",
    "start": "1314250",
    "end": "1316110"
  },
  {
    "text": "uh, level by level.",
    "start": "1316110",
    "end": "1317355"
  },
  {
    "text": "So what I mean is, um,",
    "start": "1317355",
    "end": "1320070"
  },
  {
    "text": "we only need to focus on how do we characterize one level of this, uh,",
    "start": "1320070",
    "end": "1324615"
  },
  {
    "text": "computation graph or this, uh,",
    "start": "1324615",
    "end": "1326490"
  },
  {
    "text": "rooted subtree around a given node, uh, of interest.",
    "start": "1326490",
    "end": "1330915"
  },
  {
    "text": "So, um, let's continue thinking and setting up the problem.",
    "start": "1330915",
    "end": "1335550"
  },
  {
    "text": "So if each step of GNN, uh,",
    "start": "1335550",
    "end": "1339090"
  },
  {
    "text": "aggregation process can fully retain the neighborhood information,",
    "start": "1339090",
    "end": "1343110"
  },
  {
    "text": "meaning how many children,",
    "start": "1343110",
    "end": "1344970"
  },
  {
    "text": "uh, neighbors does a given node have?",
    "start": "1344970",
    "end": "1347174"
  },
  {
    "text": "Then, uh, the generated node embeddings can distinguish different,",
    "start": "1347175",
    "end": "1351330"
  },
  {
    "text": "uh, subtree structures, right?",
    "start": "1351330",
    "end": "1353250"
  },
  {
    "text": "If I can say, um,",
    "start": "1353250",
    "end": "1355140"
  },
  {
    "text": "at level, uh, 1, uh,",
    "start": "1355140",
    "end": "1356910"
  },
  {
    "text": "in- in one tree I have two- two children in the other one I have three.",
    "start": "1356910",
    "end": "1361650"
  },
  {
    "text": "Um, and if I can kind of capture",
    "start": "1361650",
    "end": "1363600"
  },
  {
    "text": "this information and propagate it all the way up to the node 1.",
    "start": "1363600",
    "end": "1366990"
  },
  {
    "text": "And in this other tree I can kind of capture the information that one,",
    "start": "1366990",
    "end": "1371040"
  },
  {
    "text": "uh, one node has one child and the other node has, uh, three children.",
    "start": "1371040",
    "end": "1374895"
  },
  {
    "text": "And again, I'm able to retain this information, uh,",
    "start": "1374895",
    "end": "1377850"
  },
  {
    "text": "all the way to the top layer,",
    "start": "1377850",
    "end": "1379575"
  },
  {
    "text": "then obviously the- the number of children, um, is different.",
    "start": "1379575",
    "end": "1383955"
  },
  {
    "text": "So these two, uh, these two trees, uh,",
    "start": "1383955",
    "end": "1386414"
  },
  {
    "text": "we are able to, uh, distinguish them, right?",
    "start": "1386415",
    "end": "1389310"
  },
  {
    "text": "So the point is, in some sense,",
    "start": "1389310",
    "end": "1391005"
  },
  {
    "text": "are we able to aggregate information from the children and somehow",
    "start": "1391005",
    "end": "1394380"
  },
  {
    "text": "store it so that when we pass it on to our parent in the tree,",
    "start": "1394380",
    "end": "1398400"
  },
  {
    "text": "this information, uh, gets retained?",
    "start": "1398400",
    "end": "1401175"
  },
  {
    "text": "As in this case, the information that",
    "start": "1401175",
    "end": "1403305"
  },
  {
    "text": "two and three got retained all the way up to the root of the tree.",
    "start": "1403305",
    "end": "1407505"
  },
  {
    "text": "That's, uh, the question, uh, we wanna answer.",
    "start": "1407505",
    "end": "1411675"
  },
  {
    "text": "So in other words,",
    "start": "1411675",
    "end": "1414780"
  },
  {
    "text": "what we wanna do is we wanna say that",
    "start": "1414780",
    "end": "1417420"
  },
  {
    "text": "the most expressive graph neural network would use",
    "start": "1417420",
    "end": "1420660"
  },
  {
    "text": "an injective neighborhood aggregation for each step,",
    "start": "1420660",
    "end": "1424530"
  },
  {
    "text": "for each layer of the or for each level of the computation graph.",
    "start": "1424530",
    "end": "1429075"
  },
  {
    "text": "So this means that it will map",
    "start": "1429075",
    "end": "1430500"
  },
  {
    "text": "different neighborhoods into different, um, embeddings, right?",
    "start": "1430500",
    "end": "1434550"
  },
  {
    "text": "So we want to be able to capture the number of children at level 1,",
    "start": "1434550",
    "end": "1438315"
  },
  {
    "text": "oh sorry, at level 0, at level 1,",
    "start": "1438315",
    "end": "1440460"
  },
  {
    "text": "and then aggregate this- kind of retain this information as we are pushing it",
    "start": "1440460",
    "end": "1444840"
  },
  {
    "text": "up the tree so that the tree knows how many children each of its,",
    "start": "1444840",
    "end": "1449684"
  },
  {
    "text": "um, each of its, uh,",
    "start": "1449685",
    "end": "1451110"
  },
  {
    "text": "uh, inner nodes, uh, have.",
    "start": "1451110",
    "end": "1453480"
  },
  {
    "text": "So that's essentially the idea.",
    "start": "1453480",
    "end": "1456360"
  },
  {
    "text": "So the summary so far is the following.",
    "start": "1456360",
    "end": "1459600"
  },
  {
    "text": "To generate a node embedding,",
    "start": "1459600",
    "end": "1461414"
  },
  {
    "text": "GNN uses a computational graph that",
    "start": "1461415",
    "end": "1464310"
  },
  {
    "text": "corresponds to a rooted subtree structure around each node.",
    "start": "1464310",
    "end": "1468420"
  },
  {
    "text": "So if I have a node,",
    "start": "1468420",
    "end": "1470550"
  },
  {
    "text": "I have this notion of a computational graph that is simply a-",
    "start": "1470550",
    "end": "1473565"
  },
  {
    "text": "a rooted subtree structure that describes",
    "start": "1473565",
    "end": "1476054"
  },
  {
    "text": "the local neighborhood structure around this node.",
    "start": "1476054",
    "end": "1479144"
  },
  {
    "text": "And then different rooted subtrees,",
    "start": "1479145",
    "end": "1482130"
  },
  {
    "text": "different computation graphs will be distinguishable",
    "start": "1482130",
    "end": "1484995"
  },
  {
    "text": "if we are using injective neighborhood aggregation,",
    "start": "1484995",
    "end": "1488115"
  },
  {
    "text": "meaning we are able to distinguish different subtrees.",
    "start": "1488115",
    "end": "1491205"
  },
  {
    "text": "And GNNs can- as we are going to see, um,",
    "start": "1491205",
    "end": "1495015"
  },
  {
    "text": "GNNs can fully distinguish different subtree structures",
    "start": "1495015",
    "end": "1498254"
  },
  {
    "text": "if at every level its neighborhood aggregation,",
    "start": "1498254",
    "end": "1501720"
  },
  {
    "text": "meaning it's aggregation for the children, is injective,",
    "start": "1501720",
    "end": "1505080"
  },
  {
    "text": "which means that no information, uh, gets lost.",
    "start": "1505080",
    "end": "1509190"
  },
  {
    "text": "So then we can fully characterize, uh,",
    "start": "1509190",
    "end": "1511485"
  },
  {
    "text": "the computation graph and distinguish one computation graph, uh, from the other.",
    "start": "1511485",
    "end": "1516730"
  }
]