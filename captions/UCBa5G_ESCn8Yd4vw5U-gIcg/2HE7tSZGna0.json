[
  {
    "text": "hi there so I'm dick sites and I've been doing this sort of thing for 50 odd years and the thing I like to do is to",
    "start": "10310",
    "end": "19910"
  },
  {
    "text": "understand why things are slow and to build tools to get the data to explain",
    "start": "19910",
    "end": "25760"
  },
  {
    "text": "why things are slow is it possible for the people in the room if we can lower the front lights okay",
    "start": "25760",
    "end": "34210"
  },
  {
    "text": "so I'm going to talk about a problem that I've dealt with working at places",
    "start": "34210",
    "end": "39920"
  },
  {
    "text": "like Google the solution that I bring to the table and then give a whole bunch of",
    "start": "39920",
    "end": "45230"
  },
  {
    "text": "examples and then at the end talk about contributions and take a bunch of",
    "start": "45230",
    "end": "50510"
  },
  {
    "text": "questions so this is the problem I want",
    "start": "50510",
    "end": "55940"
  },
  {
    "text": "to understand why in complex real-time software this is user facing data center",
    "start": "55940",
    "end": "62690"
  },
  {
    "text": "software real-time controls for airplanes and cars those sorts of things",
    "start": "62690",
    "end": "69290"
  },
  {
    "text": "why in complex your climb software but it's sometimes slow sometimes not slow",
    "start": "69290",
    "end": "76929"
  },
  {
    "text": "if you're doing transactions and you look at some measurement of how long",
    "start": "78429",
    "end": "83539"
  },
  {
    "text": "each transaction takes you find over on the lower left that there's often a",
    "start": "83539",
    "end": "88880"
  },
  {
    "text": "bunch of fast or normal speed transactions and then there's some slow ones in this particular picture there's",
    "start": "88880",
    "end": "94460"
  },
  {
    "text": "one very slow one at the bottom this is sorted by duration and a bunch of slow",
    "start": "94460",
    "end": "99530"
  },
  {
    "text": "ones and you can see there's an obvious step function cliffs of these are really slow these these are medium fastings are",
    "start": "99530",
    "end": "105469"
  },
  {
    "text": "really fast or if you're doing real-time controls of you know ailerons or",
    "start": "105469",
    "end": "111740"
  },
  {
    "text": "steering wheels or whatever you may have periodic execution tasks that run like",
    "start": "111740",
    "end": "119869"
  },
  {
    "text": "once every thirtieth of a second or something and if one task runs too long",
    "start": "119869",
    "end": "125749"
  },
  {
    "text": "then the following task doesn't run on time and things happen like you drop a",
    "start": "125749",
    "end": "131930"
  },
  {
    "text": "video frame and you're going down the road at a hundred feet per second or you know something absurd this is a picture",
    "start": "131930",
    "end": "140060"
  },
  {
    "text": "from a bunch of Google search transactions showing just one remote procedure call search",
    "start": "140060",
    "end": "146030"
  },
  {
    "text": "that starts up at the top and then it does a fan-out in this case of 93",
    "start": "146030",
    "end": "151340"
  },
  {
    "text": "they're not all shown 93 calls to other machine saying please do a piece of the search and then get the results back and",
    "start": "151340",
    "end": "159070"
  },
  {
    "text": "rank them and sort them and then display 10 answers what you see over here at",
    "start": "159070",
    "end": "164480"
  },
  {
    "text": "this time diagram that goes 160 milliseconds is some stuff happens the beginning and then these these parallel",
    "start": "164480",
    "end": "170300"
  },
  {
    "text": "calls go out and they come back at different times and because you're waiting for all the answers the last guy",
    "start": "170300",
    "end": "177580"
  },
  {
    "text": "determines the response time and so I'm the person interested in in these",
    "start": "177580",
    "end": "182990"
  },
  {
    "text": "hindered transactions of wire they start because my experience has been that if you can if you understand why why it's",
    "start": "182990",
    "end": "190460"
  },
  {
    "text": "slow there's almost always something you can do to fix it in about 20 minutes even if it took you 3 months to figure",
    "start": "190460",
    "end": "197450"
  },
  {
    "text": "out why it's slow it's very gratifying here's some disk server measurements of",
    "start": "197450",
    "end": "205730"
  },
  {
    "text": "times to go read 64 K or something off of a disk in a dis server around a",
    "start": "205730",
    "end": "211250"
  },
  {
    "text": "datacenter room and you get the usual spikes at zero milliseconds of hitting",
    "start": "211250",
    "end": "218150"
  },
  {
    "text": "on on data that's in the in ram cache you get a spike around 3 milliseconds of",
    "start": "218150",
    "end": "223250"
  },
  {
    "text": "hitting on data that's in the drive in the drives track buffer then you get the",
    "start": "223250",
    "end": "229430"
  },
  {
    "text": "hump around 15 milliseconds of actually seeking a reading then you get this long tail the 99th percentile of this",
    "start": "229430",
    "end": "235160"
  },
  {
    "text": "particular 24-hour measurement 696 milliseconds well the average was back",
    "start": "235160",
    "end": "242330"
  },
  {
    "text": "there or the median actually was back there at 26 so I'm interested in understanding the long ones traditional",
    "start": "242330",
    "end": "248720"
  },
  {
    "text": "performance tools as an industry are incapable of explaining these slow",
    "start": "248720",
    "end": "254180"
  },
  {
    "text": "things counters you know a number of things that happen performance counters things like that they only tell you",
    "start": "254180",
    "end": "260959"
  },
  {
    "text": "about average behavior they they don't distinguish the good cases from the bad cases they just say here's what happened",
    "start": "260959",
    "end": "266650"
  },
  {
    "text": "overall over the last 10 minutes or whatever profiles were you sampled a PC",
    "start": "266650",
    "end": "272360"
  },
  {
    "text": "and read them see what's doing again just average together the good cases and the bad",
    "start": "272360",
    "end": "277800"
  },
  {
    "text": "cases and and in doing so they drop the signal-to-noise ratio about the bad",
    "start": "277800",
    "end": "282810"
  },
  {
    "text": "cases by Factor Honor it they're also blind CPU profiles are",
    "start": "282810",
    "end": "290130"
  },
  {
    "text": "completely blind to not executing an awful lot of transaction work involves",
    "start": "290130",
    "end": "296970"
  },
  {
    "text": "waiting for something else and if the picture in your head of what you're waiting for and the reality of what you're waiting for it are totally",
    "start": "296970",
    "end": "302850"
  },
  {
    "text": "different you can't explain why it's so slow because it's waiting on something you don't you don't understand and",
    "start": "302850",
    "end": "309440"
  },
  {
    "text": "traditional traces where you trace everything that's happening are much too",
    "start": "309440",
    "end": "315480"
  },
  {
    "text": "slow to use in like live data centers or in live vehicle control so what we've",
    "start": "315480",
    "end": "325260"
  },
  {
    "text": "done is in industry is we see something that slow some performance problem you look at it for a while you study the circumstances a bit and then you guess",
    "start": "325260",
    "end": "331700"
  },
  {
    "text": "you try some experiment to see if the guess is right and then you guess again and my observation is that programmers",
    "start": "331700",
    "end": "338160"
  },
  {
    "text": "are singularly inept at guessing how the picture of their heads is different from reality so brought forward a solution",
    "start": "338160",
    "end": "350180"
  },
  {
    "text": "first did this at Google more than ten years ago but the version I'm displaying",
    "start": "350180",
    "end": "355470"
  },
  {
    "text": "today built from scratch without any any Google code after I left if you have a",
    "start": "355470",
    "end": "364470"
  },
  {
    "text": "bunch of transactions or events or video frames or whatever and you don't know",
    "start": "364470",
    "end": "370320"
  },
  {
    "text": "ahead of time which ones are going to be slow you need to watch everything that's happening for a while until you get some",
    "start": "370320",
    "end": "376500"
  },
  {
    "text": "bad ones so you can go figure out what they are like and how they're different from the good ones and so I'm a strong believer with this level problem that",
    "start": "376500",
    "end": "383970"
  },
  {
    "text": "all you can do is trace everything sampling techniques the only sample",
    "start": "383970",
    "end": "389130"
  },
  {
    "text": "because the overhead of your tool is too high to use all the time so you only use it a little bit a little bit a little",
    "start": "389130",
    "end": "395220"
  },
  {
    "text": "bit when you're sampling you you inevitably miss what the real problem is",
    "start": "395220",
    "end": "401060"
  },
  {
    "text": "so Kay you trace is this but traces all the transitions between",
    "start": "402170",
    "end": "408669"
  },
  {
    "text": "kernel mode and user mode so every system call system return interrupt",
    "start": "408669",
    "end": "414010"
  },
  {
    "text": "interrupt return fault fault return every context switch that's all it does",
    "start": "414010",
    "end": "420389"
  },
  {
    "text": "the only reason is fast is it's not ambitious there are no options there are",
    "start": "420389",
    "end": "427840"
  },
  {
    "text": "no controls there's no sub setting and",
    "start": "427840",
    "end": "433020"
  },
  {
    "text": "the current version the overhead is a quarter of a percent if you're getting two hundred thousand events per second",
    "start": "433020",
    "end": "438910"
  },
  {
    "text": "two hundred thousand transitions in user mode in kernel mode per core so if",
    "start": "438910",
    "end": "444910"
  },
  {
    "text": "you're running a 32 core machine you're getting 32 times 2,000 events per second but the total overhead is still a",
    "start": "444910",
    "end": "451030"
  },
  {
    "text": "quarter of a percent so it's like thirty times faster than trace you cannot use F",
    "start": "451030",
    "end": "457990"
  },
  {
    "text": "trace in a real live data center environment because it slows everything down so the point by just tracing the",
    "start": "457990",
    "end": "467919"
  },
  {
    "text": "transitions is time is going on everything is happening the transitions tell you right after each transition",
    "start": "467919",
    "end": "474180"
  },
  {
    "text": "what is executing this system cause executing this interrupt handler is",
    "start": "474180",
    "end": "479440"
  },
  {
    "text": "executing this user program by process ID is executing there's nothing missing",
    "start": "479440",
    "end": "486570"
  },
  {
    "text": "because I'm just recording the transitions I'm not recording durations and so every CPU core give it",
    "start": "486570",
    "end": "495250"
  },
  {
    "text": "transitions into a syst call for something it's in that doing something",
    "start": "495250",
    "end": "501190"
  },
  {
    "text": "until eventually there's a transition out in this idea that there's nothing",
    "start": "501190",
    "end": "506740"
  },
  {
    "text": "missing turns out to be really important because then you can say definitively X",
    "start": "506740",
    "end": "512620"
  },
  {
    "text": "didn't happen for instance if you guess so this program is slow because it's waiting on the disk and you take some",
    "start": "512620",
    "end": "518740"
  },
  {
    "text": "you know minute long trace and you look at it and there are no disk interrupts you can say it is not waiting on the",
    "start": "518740",
    "end": "525400"
  },
  {
    "text": "disk if you're doing sampling you can't say that all you can say is when I",
    "start": "525400",
    "end": "530980"
  },
  {
    "text": "looked I didn't see any disk activity but I didn't look very often",
    "start": "530980",
    "end": "537120"
  },
  {
    "text": "the tracing since it's showing you everything that's happening on all of the CPU cores gives you the reason that",
    "start": "537300",
    "end": "544470"
  },
  {
    "text": "everything is slow there's nothing missing there's no there's no magic from",
    "start": "544470",
    "end": "550620"
  },
  {
    "text": "the outside world that subtly makes a program executes differently there's something that that's going on on the",
    "start": "550620",
    "end": "556950"
  },
  {
    "text": "machine in the trace that makes it X to you differently so why curl user",
    "start": "556950",
    "end": "563640"
  },
  {
    "text": "transitions tracing more events than",
    "start": "563640",
    "end": "568830"
  },
  {
    "text": "that for instance every procedure entry and exit in user code and in kernel code it's just too slow like I could not make",
    "start": "568830",
    "end": "575370"
  },
  {
    "text": "I've tried I can't make a tool that does that with one percent overhead 14",
    "start": "575370",
    "end": "580470"
  },
  {
    "text": "percent yes one percent no Tracey fewer events like just context what you saw",
    "start": "580470",
    "end": "585570"
  },
  {
    "text": "you're running this program do I need that programming means it's a third program that has even lower overhead but",
    "start": "585570",
    "end": "591780"
  },
  {
    "text": "it doesn't give you enough information to explain why why things are slow so this is the just right part like I can",
    "start": "591780",
    "end": "600000"
  },
  {
    "text": "assign every nanosecond for every CPU core what it's doing with very tiny",
    "start": "600000",
    "end": "606480"
  },
  {
    "text": "overhead everything else is post processing so this is the mechanism this",
    "start": "606480",
    "end": "612120"
  },
  {
    "text": "is implemented in Linux there is over on the far left some user code there's the",
    "start": "612120",
    "end": "617220"
  },
  {
    "text": "Linux kernel there's a handful of patches the current patches are in nineteen files only because the",
    "start": "617220",
    "end": "624180"
  },
  {
    "text": "interrupt handling in x86 Linux is scattered across half a dozen different files timer interrupts are different",
    "start": "624180",
    "end": "631890"
  },
  {
    "text": "from the regular interrupts and there's handfuls of special cases and the",
    "start": "631890",
    "end": "637620"
  },
  {
    "text": "patches are on the order of two lines per file saying trace the beginning of a",
    "start": "637620",
    "end": "643200"
  },
  {
    "text": "system call trace the end of a system call that's that that's the set of patches in this get in the SIS call",
    "start": "643200",
    "end": "649670"
  },
  {
    "text": "entry there's trace interrupt handling end of tracing interrupt handling those",
    "start": "649670",
    "end": "656460"
  },
  {
    "text": "hooks which are just one line macros that say if tracing is on do this call a",
    "start": "656460",
    "end": "662070"
  },
  {
    "text": "go to a loadable module and if the module wasn't loaded a tracing is NaN and",
    "start": "662070",
    "end": "668160"
  },
  {
    "text": "that's that there's a user mode control program can turn the tracing on and off",
    "start": "668160",
    "end": "674009"
  },
  {
    "text": "and dump the trace file the trace goes in to raw reserved buffer in the kernel",
    "start": "674009",
    "end": "680899"
  },
  {
    "text": "anywhere from a megabyte to ten gigabytes or whatever you want and then",
    "start": "680899",
    "end": "687750"
  },
  {
    "text": "after that's right out and put on disk the post process and think about it for a while mm-hmm",
    "start": "687750",
    "end": "693360"
  },
  {
    "text": "so this is the entire patch free syscall there's the extra line that's the K",
    "start": "693360",
    "end": "699990"
  },
  {
    "text": "trace one macro that says trace the beginning of a system call turns out",
    "start": "699990",
    "end": "705689"
  },
  {
    "text": "there's a mapping of the system call number that has to do with backwards compatibility with 32-bit system calls",
    "start": "705689",
    "end": "712079"
  },
  {
    "text": "and the register that's passed in is the Lord or the first argument of the system",
    "start": "712079",
    "end": "717990"
  },
  {
    "text": "call which turns out to be really useful information it's like which file is getting touched - which file ID and the",
    "start": "717990",
    "end": "725699"
  },
  {
    "text": "thing being passed for the return is the return value which could be one of",
    "start": "725699",
    "end": "732079"
  },
  {
    "text": "several dozen error codes or it could be things like the number of bytes read and",
    "start": "732079",
    "end": "737250"
  },
  {
    "text": "having that number turns out to be really useful in looking carefully at what's going on then there's this",
    "start": "737250",
    "end": "744360"
  },
  {
    "text": "post-processing chain of a few programs that takes over all trace file turns it into individual events just long text",
    "start": "744360",
    "end": "753089"
  },
  {
    "text": "files and then there's an event to span program that takes all the transitions and turns them into time spans and so",
    "start": "753089",
    "end": "760709"
  },
  {
    "text": "its output is a bunch of back to back time spans that cover every CPU core",
    "start": "760709",
    "end": "766560"
  },
  {
    "text": "every nanosecond of the entire trace and the trace is typically run 30 seconds to",
    "start": "766560",
    "end": "771870"
  },
  {
    "text": "a couple minutes I haven't found the need to do more than about two minutes",
    "start": "771870",
    "end": "777480"
  },
  {
    "text": "you learn an awful lot in two minutes but there is a flight recorder a version where you can just trace continuously",
    "start": "777480",
    "end": "783540"
  },
  {
    "text": "until you stop and then you get to see the previous 30 seconds to two minutes then there's finally a little bit that",
    "start": "783540",
    "end": "791430"
  },
  {
    "text": "takes the JSON and turns it into an HTML file and I'll show you output from a bunch of those",
    "start": "791430",
    "end": "797209"
  },
  {
    "text": "so I'm going to go through four sets of examples first one is hello world so",
    "start": "797209",
    "end": "803430"
  },
  {
    "text": "this is hello world I simply added to it two lines one of which is a call to this",
    "start": "803430",
    "end": "810269"
  },
  {
    "text": "is user code a trick a trace library that says add a marker to the trace that",
    "start": "810269",
    "end": "815370"
  },
  {
    "text": "says hello and after the printf Adam working to the trace that says slash hello I just picked the slash convention",
    "start": "815370",
    "end": "822779"
  },
  {
    "text": "for like HTML tags you compile it on it and I'll show you a bunch of diagrams",
    "start": "822779",
    "end": "829470"
  },
  {
    "text": "with this notation these are all gonna be time lines per CPU core and the thin",
    "start": "829470",
    "end": "834930"
  },
  {
    "text": "black lines are the idle tasks the tall I colored lines are kernel-mode execution and the half-light ones are",
    "start": "834930",
    "end": "840930"
  },
  {
    "text": "user mode and the middle colors just distinguish by process ID mod 15 a mod",
    "start": "840930",
    "end": "847980"
  },
  {
    "text": "17 which processes run a nor did sis call number mod 15 of on 17 you get",
    "start": "847980",
    "end": "855690"
  },
  {
    "text": "different colors or different sis calls that kind of thing for the kernel stuff",
    "start": "855690",
    "end": "862970"
  },
  {
    "text": "things that are false have pink edges and things that are interrupt handling",
    "start": "862970",
    "end": "869959"
  },
  {
    "text": "have blue edges and things that are system calls i've green edges so you can distinguish and those are the only three",
    "start": "869959",
    "end": "877740"
  },
  {
    "text": "ways of getting from user mode to kernel mode there's nothing else you get a",
    "start": "877740",
    "end": "887760"
  },
  {
    "text": "two-bit ECC or in memory there's a machine or interrupt and so you're doing",
    "start": "887760",
    "end": "893639"
  },
  {
    "text": "interrupt handling so this is a trace of hello world user mode only looking at",
    "start": "893639",
    "end": "902519"
  },
  {
    "text": "the 40 milliseconds here's the flag at the beginning of the main program here's the flag it put into the trace at the",
    "start": "902519",
    "end": "907980"
  },
  {
    "text": "end of the main program and it just says I'm executing this hello world program the colors or whatever the process ID",
    "start": "907980",
    "end": "913860"
  },
  {
    "text": "was for hello world and there's some camps as you'll see in this whole thing is 40 micro seconds so not very",
    "start": "913860",
    "end": "919079"
  },
  {
    "text": "interesting most user mode tools in this",
    "start": "919079",
    "end": "924149"
  },
  {
    "text": "industry that's all you get to see and that almost never explains why",
    "start": "924149",
    "end": "931110"
  },
  {
    "text": "complex software is slow so here's the same picture with all the the rest of",
    "start": "931110",
    "end": "937230"
  },
  {
    "text": "the user mode execution the previous picture was this part over here on the",
    "start": "937230",
    "end": "942540"
  },
  {
    "text": "right and the dotted lines all of this other stuff is getting hello world started in fact it actually started over",
    "start": "942540",
    "end": "947700"
  },
  {
    "text": "here on CPU three ran for a little while got migrated over to CPU one and then ran for a while and then finally got to",
    "start": "947700",
    "end": "954330"
  },
  {
    "text": "the first line of main this is all setting up stacks and opening to sis out",
    "start": "954330",
    "end": "959460"
  },
  {
    "text": "and all these things and back here it's like reading it off disk in this case",
    "start": "959460",
    "end": "964710"
  },
  {
    "text": "reading it from the file cache in memory because I read this program twice and I",
    "start": "964710",
    "end": "970200"
  },
  {
    "text": "trace the second one okay but here's what's in the gaps it's all the user all",
    "start": "970200",
    "end": "975420"
  },
  {
    "text": "the kernel mode code and most of which are page faults it turns out and that's",
    "start": "975420",
    "end": "983040"
  },
  {
    "text": "not a complete picture at all what's going on because here's all of the other stuff going on on the same machine at",
    "start": "983040",
    "end": "988920"
  },
  {
    "text": "the same time all the other programs and if you have interference with your",
    "start": "988920",
    "end": "993990"
  },
  {
    "text": "program from other programs you only can learn what's going on if you can see the other programs okay so",
    "start": "993990",
    "end": "1002660"
  },
  {
    "text": "this is now for CPU cores and we can see everything that's going on every one of them it turns out CPU zero is only doing",
    "start": "1002660",
    "end": "1009710"
  },
  {
    "text": "the idle job there's a timer interrupts way off to the right and left but this is the complete picture what's going on",
    "start": "1009710",
    "end": "1016070"
  },
  {
    "text": "including it on CPU - this happened to have a program that's just running continuously beating memory to death and",
    "start": "1016070",
    "end": "1021970"
  },
  {
    "text": "possibly and in fact would be slowing down something on CPU zero there were something running there and you will see",
    "start": "1021970",
    "end": "1028459"
  },
  {
    "text": "that in example four so that's just to calibrate yes",
    "start": "1028460",
    "end": "1034839"
  },
  {
    "text": "sure so let me let me repeat the question what's the overhead of putting these",
    "start": "1053940",
    "end": "1059590"
  },
  {
    "text": "marks in Oh minus the hello world printf",
    "start": "1059590",
    "end": "1071320"
  },
  {
    "text": "no no but that's fine I will talk about",
    "start": "1071320",
    "end": "1081190"
  },
  {
    "text": "the overhead of the tracing and why it's so small and the including the overhead of those two calls because the top row",
    "start": "1081190",
    "end": "1093520"
  },
  {
    "text": "that's all white is CPU zero the middle row is CPU one that has some stuff on at",
    "start": "1093520",
    "end": "1098530"
  },
  {
    "text": "CPU two is white and CPU three down at the bottom is executing oh yeah because",
    "start": "1098530",
    "end": "1111240"
  },
  {
    "text": "processed 55 was running on CP u 3 and then later processed 55 was running on",
    "start": "1111240",
    "end": "1116650"
  },
  {
    "text": "CP u 1 I'm tracing all the context switches that's part of what happens inside of the kernel scheduler when",
    "start": "1116650",
    "end": "1123010"
  },
  {
    "text": "you're when you're leaving an interrupt or something of course that's that's where the colors",
    "start": "1123010",
    "end": "1128890"
  },
  {
    "text": "are coming from if you don't record the process number you have no idea what's running just like you don't record the",
    "start": "1128890",
    "end": "1134260"
  },
  {
    "text": "SIS call number you have no idea which system calls are running yeah go on",
    "start": "1134260",
    "end": "1139300"
  },
  {
    "text": "quick two questions than I have to keep going I'm getting to that but but not in this example they're",
    "start": "1139300",
    "end": "1147580"
  },
  {
    "text": "doing things like setting up the stack they're all copy on writes of stuff that's allocated and and all the points",
    "start": "1147580",
    "end": "1154060"
  },
  {
    "text": "table entries point to the all-0 page and then the first time you write to it you take a page fault and inside the",
    "start": "1154060",
    "end": "1159340"
  },
  {
    "text": "page all routine you says oh this is just starting up a copy it go find a real page copy all the zeros into it",
    "start": "1159340",
    "end": "1165780"
  },
  {
    "text": "slowly nobody optimized the am i copying from the all zero page just store zero stop",
    "start": "1165780",
    "end": "1172210"
  },
  {
    "text": "reading the zeros and then go back and then the page fault doesn't happen because you've made the PT writable",
    "start": "1172210",
    "end": "1177760"
  },
  {
    "text": "pointing to the real page and then it goes on and writes the stack for the first time so that's a sort of your",
    "start": "1177760",
    "end": "1185230"
  },
  {
    "text": "quick calibrate and so I took some traces of the Linux schedulers there's a completely fair",
    "start": "1185230",
    "end": "1192130"
  },
  {
    "text": "schedule or CFS which is the default and it simply runs each task at equal speed",
    "start": "1192130",
    "end": "1197260"
  },
  {
    "text": "and each task is supposed to get if you have five CPUs and 50 tasks each tasks",
    "start": "1197260",
    "end": "1202480"
  },
  {
    "text": "is supposed to get one tenth of the CPU times the first-in first-out schedulers intended to be real-time scheduler that",
    "start": "1202480",
    "end": "1209290"
  },
  {
    "text": "the first program that arrives and runs to completion and then the next thing runs and then the next thing first-in first-out",
    "start": "1209290",
    "end": "1215100"
  },
  {
    "text": "round-robin says oh that's very good but if the first thing blocks will go put it at the end of the queue so that all the",
    "start": "1215100",
    "end": "1221680"
  },
  {
    "text": "other things can run and then later these were layered with oh if it's run",
    "start": "1221680",
    "end": "1228100"
  },
  {
    "text": "for a while wow maybe we should go ahead and and preempt it and let one of the other things run and in particular if",
    "start": "1228100",
    "end": "1236500"
  },
  {
    "text": "you're running a high priority real-time task that's in a tight loop by a common mistake you'd like to be able to get",
    "start": "1236500",
    "end": "1244090"
  },
  {
    "text": "control see and things like that to actually get some cycles so you can kill it so this preemption two that were",
    "start": "1244090",
    "end": "1250210"
  },
  {
    "text": "useful so I simply ran the three different schedulers with a little program that spawns one task and then",
    "start": "1250210",
    "end": "1257710"
  },
  {
    "text": "when that finish responds to and when those finish wants three up through twelve and each of those tasks simply",
    "start": "1257710",
    "end": "1262960"
  },
  {
    "text": "does a bunch of checksumming of a 240 kilobyte array chosen to mostly fill up",
    "start": "1262960",
    "end": "1269650"
  },
  {
    "text": "the l2 cache and here's what they look like we have in time I've sorted now by",
    "start": "1269650",
    "end": "1276580"
  },
  {
    "text": "process ID instead of sorting by CPU number same data different sort really",
    "start": "1276580",
    "end": "1283270"
  },
  {
    "text": "useful so by process ID there's bashes up at the top here and it spawns one",
    "start": "1283270",
    "end": "1290980"
  },
  {
    "text": "process that it runs for about a second and it's done and then and the top level",
    "start": "1290980",
    "end": "1296110"
  },
  {
    "text": "program spawns two processes and that when they finish it spawns three and then four and out here as well as twelve",
    "start": "1296110",
    "end": "1301420"
  },
  {
    "text": "you'll notice it gets longer longer longer because there's only four CPUs so after four CPUs the total run time",
    "start": "1301420",
    "end": "1307810"
  },
  {
    "text": "starts getting longer because they have to actually swap off I'm gonna look at",
    "start": "1307810",
    "end": "1314340"
  },
  {
    "text": "the trace of seven of these so here's what happens with this",
    "start": "1314340",
    "end": "1319450"
  },
  {
    "text": "completely fair scheduler there's seven lines here showing seven different processes and when they're running so",
    "start": "1319450",
    "end": "1325750"
  },
  {
    "text": "there's a context we are switch here that starts this process in 12 milliseconds later the context switch",
    "start": "1325750",
    "end": "1330850"
  },
  {
    "text": "that stops it and starts some other process first thing I noticed is process",
    "start": "1330850",
    "end": "1337659"
  },
  {
    "text": "seven stopped back here in process one stopped way out there there's a 30%",
    "start": "1337659",
    "end": "1343620"
  },
  {
    "text": "variability in how long it took these seven processes each of these seven",
    "start": "1343620",
    "end": "1349330"
  },
  {
    "text": "processes to run this is not completely fair you also notice that there's",
    "start": "1349330",
    "end": "1359159"
  },
  {
    "text": "unpredictably these stretches where some processes run for a lot more than 12",
    "start": "1359159",
    "end": "1364299"
  },
  {
    "text": "milliseconds and they don't get switched out the first-in-first-out scheduler",
    "start": "1364299",
    "end": "1371580"
  },
  {
    "text": "starts this guy and it doesn't run very much that's the first one launched the second",
    "start": "1371580",
    "end": "1376840"
  },
  {
    "text": "one launched runs so the first 3 launched actually take a long time the fourth one it's a shorter time and",
    "start": "1376840",
    "end": "1383580"
  },
  {
    "text": "there's an 18% variance there and the round-robin one looks pretty similar to",
    "start": "1383580",
    "end": "1388690"
  },
  {
    "text": "the first-in first-out since it's only a small modification and there's a 22% variance so I'd like to explain be able",
    "start": "1388690",
    "end": "1395230"
  },
  {
    "text": "to explain these long ones why aren't they all fast so we get to look at a",
    "start": "1395230",
    "end": "1400809"
  },
  {
    "text": "little more what's going on this is now in detail the last picture was 2.2",
    "start": "1400809",
    "end": "1405909"
  },
  {
    "text": "seconds across the page across the screen this is 120 milliseconds of just the beginning of launching seven and",
    "start": "1405909",
    "end": "1413679"
  },
  {
    "text": "then one of the launch threads runs another one runs and after 12",
    "start": "1413679",
    "end": "1419440"
  },
  {
    "text": "milliseconds context switches context switches back context switches context switches back and across this if you",
    "start": "1419440",
    "end": "1426250"
  },
  {
    "text": "look a little further out there's all seven of them slopping around periodically over here on the right",
    "start": "1426250",
    "end": "1431860"
  },
  {
    "text": "there's starting everything up and you may notice these dotted lines of connecting making something runnable",
    "start": "1431860",
    "end": "1438909"
  },
  {
    "text": "with where it actually runs and how much later it actually runs so I'm going to zoom in on the startup the startup has",
    "start": "1438909",
    "end": "1447240"
  },
  {
    "text": "two views the top four lines are the CPUs the bottom seven eight lines are the",
    "start": "1447240",
    "end": "1454250"
  },
  {
    "text": "individual processes again the same data so this this lump of execution on CPU",
    "start": "1454250",
    "end": "1459740"
  },
  {
    "text": "zero is exactly that love of execution for the batch process this lump over",
    "start": "1459740",
    "end": "1465110"
  },
  {
    "text": "here is exactly there's two lumps there is that one in that one so what we see",
    "start": "1465110",
    "end": "1471440"
  },
  {
    "text": "at the beginning is with these four arrows is bash does four clone calls to",
    "start": "1471440",
    "end": "1477410"
  },
  {
    "text": "start up the other threads but the other three clone calls happen later not in",
    "start": "1477410",
    "end": "1483980"
  },
  {
    "text": "the picture in your head the reason they happen later is these three threads that are started actually",
    "start": "1483980",
    "end": "1489980"
  },
  {
    "text": "start and bash gets context switched out because they're all running equal priority and if finally gets back in",
    "start": "1489980",
    "end": "1496340"
  },
  {
    "text": "here and gets another thread going and then it gets contest switched out and finally gets back in here and gets another car going it so this last guy",
    "start": "1496340",
    "end": "1502250"
  },
  {
    "text": "starts 400 what microseconds later than",
    "start": "1502250",
    "end": "1509750"
  },
  {
    "text": "the first one this is just an example of the kind of dynamics that sometimes there there are hundreds of thousands of",
    "start": "1509750",
    "end": "1516650"
  },
  {
    "text": "microseconds and dozens of milliseconds",
    "start": "1516650",
    "end": "1521800"
  },
  {
    "text": "there's several more things going on here so these threads that are cloned they don't actually start immediately but",
    "start": "1521920",
    "end": "1528530"
  },
  {
    "text": "they start fairly soon and the first thing they do is they stop executing and they don't do real execution to kill out",
    "start": "1528530",
    "end": "1534680"
  },
  {
    "text": "here ways so I'm going to zoom in a bit more I have to explain the notation",
    "start": "1534680",
    "end": "1540470"
  },
  {
    "text": "first these dotted lines for the process lines are showing what it's waiting for",
    "start": "1540470",
    "end": "1547580"
  },
  {
    "text": "when it's not running so we trace that this little piece of",
    "start": "1547580",
    "end": "1553040"
  },
  {
    "text": "code runs and then it blocks technically it goes into the kernel scheduler it",
    "start": "1553040",
    "end": "1559280"
  },
  {
    "text": "goes out of the kernel scheduler it goes into idle after awhile it comes out of",
    "start": "1559280",
    "end": "1564380"
  },
  {
    "text": "idle by there's an interrupt that happens or the schedule or distribute to a cross process that are out from an",
    "start": "1564380",
    "end": "1570170"
  },
  {
    "text": "interrupt routine on a different core or whatever and the scheduler says oh I can run this guy again and in between",
    "start": "1570170",
    "end": "1576340"
  },
  {
    "text": "depending on what is going on there may be some other process that sets the",
    "start": "1576340",
    "end": "1581660"
  },
  {
    "text": "runnable bit for the one that's going to start up saying you can now run and so I simply",
    "start": "1581660",
    "end": "1587130"
  },
  {
    "text": "look at which piece of the kernel is executing when the set runnable bid is",
    "start": "1587130",
    "end": "1593430"
  },
  {
    "text": "done if it's executing inside of the disk interrupt handler then I say I was",
    "start": "1593430",
    "end": "1599490"
  },
  {
    "text": "waiting on disk if it's executing inside the network receiver transmit interrupt",
    "start": "1599490",
    "end": "1605250"
  },
  {
    "text": "handler when it says make that other thread runnable and say all that thread was waiting on the network if a threat",
    "start": "1605250",
    "end": "1611850"
  },
  {
    "text": "is made runnable but doesn't run because it doesn't have a CPU assigned to it",
    "start": "1611850",
    "end": "1617100"
  },
  {
    "text": "because for instance the CPUs are all busy doing other stuff then it's waiting",
    "start": "1617100",
    "end": "1622470"
  },
  {
    "text": "for a CPU and I mark that in the post-processing it's all done in the post-processing it's not done by adding",
    "start": "1622470",
    "end": "1629910"
  },
  {
    "text": "extra trace entries those entries are already there other than the micron 0.3 which turned out to be a key thing why",
    "start": "1629910",
    "end": "1640830"
  },
  {
    "text": "do you for memory is the page fault yeah so what's going on here I think I have this on the next slide yeah",
    "start": "1640830",
    "end": "1646260"
  },
  {
    "text": "so this is an expansion of that so what's happening up here is CPU 0 up here on the left clones these other threads with lazy",
    "start": "1646260",
    "end": "1654420"
  },
  {
    "text": "sharing of the pages remember these are child processes sharing memory with the",
    "start": "1654420",
    "end": "1659580"
  },
  {
    "text": "parent process so the first thing that happen is one of these child processes it starts executing and bam if it's a",
    "start": "1659580",
    "end": "1665010"
  },
  {
    "text": "page fault on this first copy-on-write except that because of the lazy the bash",
    "start": "1665010",
    "end": "1671010"
  },
  {
    "text": "hasn't actually finished setting up the sharing but it has it has a lock so this",
    "start": "1671010",
    "end": "1677460"
  },
  {
    "text": "first page fault has to wait for Bash to run and get its M protect system call together and actually get things going",
    "start": "1677460",
    "end": "1685020"
  },
  {
    "text": "and in the middle of M protect that wakes up the guy that the back here was waiting to say okay you can go finish",
    "start": "1685020",
    "end": "1690210"
  },
  {
    "text": "your page fault now and this bouncing back and forth happens until everybody has their memory Pte set up properly to",
    "start": "1690210",
    "end": "1699360"
  },
  {
    "text": "share and and then and then you're off and running so there's a lot of bouncing",
    "start": "1699360",
    "end": "1707190"
  },
  {
    "text": "back and forth to get started but you you expect that doesn't matter very much",
    "start": "1707190",
    "end": "1712400"
  },
  {
    "text": "but you would be wrong because you might find in some programs that you're in",
    "start": "1712400",
    "end": "1717700"
  },
  {
    "text": "this kind of behavior all the time but you don't know it and of course you notice there's a lot of idle time and",
    "start": "1717700",
    "end": "1722919"
  },
  {
    "text": "there's a sign waves that we'll get to what things aren't executing very much",
    "start": "1722919",
    "end": "1727950"
  },
  {
    "text": "so in fact there's 382 microseconds of idle time this 320 is is the elapsed",
    "start": "1727950",
    "end": "1736419"
  },
  {
    "text": "time so there's four times that total time to be accounted for 540 microseconds are the sine waves that",
    "start": "1736419",
    "end": "1742750"
  },
  {
    "text": "we'll get to if we could get rid of those two this whole thing this whole stir up would be three times faster so",
    "start": "1742750",
    "end": "1751289"
  },
  {
    "text": "we'll get back to that a bit you have to talk about power saving on modern",
    "start": "1751289",
    "end": "1757690"
  },
  {
    "text": "processors running on batteries yes what",
    "start": "1757690",
    "end": "1766720"
  },
  {
    "text": "would happen if you if you didn't do lazy copy-on-write to do pages as",
    "start": "1766720",
    "end": "1772210"
  },
  {
    "text": "somebody says so malloc a megabyte you simply allocate a megabyte of real memory space and you fill all megabyte",
    "start": "1772210",
    "end": "1778600"
  },
  {
    "text": "with zero what happens is everything gets really slow because there's lots of stuff that allocates much more space",
    "start": "1778600",
    "end": "1785110"
  },
  {
    "text": "than it ever intends to use and you would actually allocate as real memory and you would you would spend dozens and",
    "start": "1785110",
    "end": "1792820"
  },
  {
    "text": "dozens of microseconds zeroing it and nobody's ever going to touch it",
    "start": "1792820",
    "end": "1798360"
  },
  {
    "text": "FreeBSD did that for awhile and took it out yeah",
    "start": "1798360",
    "end": "1803070"
  },
  {
    "text": "okay so so my goal here is not to explain how to fix all these things my goal is to show them to you so you can",
    "start": "1809690",
    "end": "1815879"
  },
  {
    "text": "think about them and you will all have good ideas and they will all take 20 minutes to fix right but I need to show",
    "start": "1815879",
    "end": "1822960"
  },
  {
    "text": "you some more examples so first off drill down a little bit is lottery CPUs",
    "start": "1822960",
    "end": "1829080"
  },
  {
    "text": "to save power go into deep sleep states and which time they lower the clock rate",
    "start": "1829080",
    "end": "1835230"
  },
  {
    "text": "and the voltage in Stairsteps and coordinated because if you lower the voltage really quickly and you leave the",
    "start": "1835230",
    "end": "1840960"
  },
  {
    "text": "clock rate too high that everything craps out so you have to lower the clock rate first and then the voltage and then",
    "start": "1840960",
    "end": "1846090"
  },
  {
    "text": "cooperate involved okay meanwhile after a while if you're being serious about saving power you turn off a complete",
    "start": "1846090",
    "end": "1851519"
  },
  {
    "text": "core to do that you have to turn off its caches okay to do that you have to write",
    "start": "1851519",
    "end": "1856919"
  },
  {
    "text": "back everything that's in the cache out here and you have to reload it back here because in between it's off it's not",
    "start": "1856919",
    "end": "1863429"
  },
  {
    "text": "it's not paying attention to who's else's writing and everything else okay and and so when it comes back up not",
    "start": "1863429",
    "end": "1868679"
  },
  {
    "text": "only does it have no concept of who else has data where it doesn't even have good",
    "start": "1868679",
    "end": "1874499"
  },
  {
    "text": "parody in any of the cache lines or perhaps in half of them because you",
    "start": "1874499",
    "end": "1879749"
  },
  {
    "text": "randomly power up and say off so the first thing that happens in here is writing good parity cache lines which",
    "start": "1879749",
    "end": "1886499"
  },
  {
    "text": "were a 256 K second level cache takes a little while several microseconds so this is the",
    "start": "1886499",
    "end": "1894149"
  },
  {
    "text": "going off this is how it's triggered this is Intel x86 Intel and AMD 64-bit",
    "start": "1894149",
    "end": "1901950"
  },
  {
    "text": "there's an EM Wade instruction that gives a hint to the processor it says oh you could go into c6 deep sleep now in",
    "start": "1901950",
    "end": "1907730"
  },
  {
    "text": "this trace this M wait was issued 800",
    "start": "1907730",
    "end": "1913859"
  },
  {
    "text": "odd nanoseconds after entering idle the auto loop actually loops for a little while and it says oh it's time to do an M wait and",
    "start": "1913859",
    "end": "1920100"
  },
  {
    "text": "shuts down the CPU core 870 nanoseconds at the other end there's eventually some",
    "start": "1920100",
    "end": "1927359"
  },
  {
    "text": "interrupt that gets directed to that CPU and the hardware says I can't execute instructions the I cache is off the",
    "start": "1927359",
    "end": "1934830"
  },
  {
    "text": "secondary cache is off the the clocks are way low so so get the ball rolling again and",
    "start": "1934830",
    "end": "1940000"
  },
  {
    "text": "that takes a while 30 microseconds this",
    "start": "1940000",
    "end": "1946990"
  },
  {
    "text": "matters if you care about interrupt latency and some like remote DMA kind of a network thing and you're expecting",
    "start": "1946990",
    "end": "1953470"
  },
  {
    "text": "microsecond turnaround and you are running on a machine that's otherwise on",
    "start": "1953470",
    "end": "1958480"
  },
  {
    "text": "a CPU core that's otherwise idle BAM you're doing 30 microseconds all the time so that's what's going on in this",
    "start": "1958480",
    "end": "1965919"
  },
  {
    "text": "little game here these are all this guy runs for a little bit goes into idle",
    "start": "1965919",
    "end": "1972450"
  },
  {
    "text": "turns off the core the next thing that happens is somebody else says oh you can run after all and it takes a long time",
    "start": "1972450",
    "end": "1979390"
  },
  {
    "text": "to come back up and then it runs for a little bit and then turns off the core",
    "start": "1979390",
    "end": "1984210"
  },
  {
    "text": "so in fact in this particular trace if the M weights weren't there and you just",
    "start": "1984600",
    "end": "1992500"
  },
  {
    "text": "bounce back and forth this whole thing would be three times faster you'd never go into c6 you've wondered spent a long",
    "start": "1992500",
    "end": "1998529"
  },
  {
    "text": "time so this is the design flaw if it takes time T to come out of some weird",
    "start": "1998529",
    "end": "2003630"
  },
  {
    "text": "state you should wait time T before you go in hoping that you don't have to go",
    "start": "2003630",
    "end": "2009539"
  },
  {
    "text": "in if you do that you're no worse than a factor of two off from the optimal",
    "start": "2009539",
    "end": "2015510"
  },
  {
    "text": "algorithm if you knew what the future held so going in in less than a",
    "start": "2015510",
    "end": "2021600"
  },
  {
    "text": "microsecond to something that's going to cost you 30 microseconds to come out is just a bad design flaw but one that you",
    "start": "2021600",
    "end": "2027990"
  },
  {
    "text": "cannot see and no one has seen until this stuff started happening I have as",
    "start": "2027990",
    "end": "2038850"
  },
  {
    "text": "it turns out at every time we take I also record the PC value of the thing that was interrupted see so I just added",
    "start": "2038850",
    "end": "2045000"
  },
  {
    "text": "this last week so you can get standard PC sample profiles of what's going on",
    "start": "2045000",
    "end": "2050520"
  },
  {
    "text": "inside of user code that's not doing any transitions to kernel code it's just CPU",
    "start": "2050520",
    "end": "2057240"
  },
  {
    "text": "bound and I just wanted to show you on the scale this this is that startup stuff we were looking at expanded here's",
    "start": "2057240",
    "end": "2064138"
  },
  {
    "text": "a four millisecond Sampo is a formula second samplers and other ones so there's 20 of them on this screen across",
    "start": "2064139",
    "end": "2069839"
  },
  {
    "text": "the four CPUs the K you trace has 2,100 samples over",
    "start": "2069839",
    "end": "2075000"
  },
  {
    "text": "that section of the trace so a hundred times more information yes no turning",
    "start": "2075000",
    "end": "2096240"
  },
  {
    "text": "off too soon is a bad idea attorney if you're going to be off for four milliseconds by all means turn off it's",
    "start": "2096240",
    "end": "2110490"
  },
  {
    "text": "a good decision to turn off if you have a cell phone because you care about the battery and you don't care about the",
    "start": "2110490",
    "end": "2115859"
  },
  {
    "text": "performance it's a bad decision to turn off if you don't need to turn off because you're about to do something",
    "start": "2115859",
    "end": "2121650"
  },
  {
    "text": "just a few microseconds later and that happens a lot in data centers and until",
    "start": "2121650",
    "end": "2128220"
  },
  {
    "text": "we could see it until I added the sine waves we didn't know what was happening",
    "start": "2128220",
    "end": "2133550"
  },
  {
    "text": "so here's a example three this is a client and a server so machinae a sends",
    "start": "2133640",
    "end": "2140040"
  },
  {
    "text": "some requests to machine B machine B is running this toy in memory database it's it's a C++ map key and value and machine",
    "start": "2140040",
    "end": "2149730"
  },
  {
    "text": "a a hundred times says go right this megabyte into the database sometimes later there's going to be a million",
    "start": "2149730",
    "end": "2156030"
  },
  {
    "text": "reads or something but right now it's just the right both the client and the",
    "start": "2156030",
    "end": "2161400"
  },
  {
    "text": "server in this setup report about eighty-five transactions per second or about 11.5 milliseconds per transaction",
    "start": "2161400",
    "end": "2169010"
  },
  {
    "text": "the server over here B reports that each transaction actually only takes one and",
    "start": "2169010",
    "end": "2174569"
  },
  {
    "text": "1/2 milliseconds of user time user compute on and only about 2.8",
    "start": "2174569",
    "end": "2181349"
  },
  {
    "text": "milliseconds of elapsed time and the server reports that is 97% idle you",
    "start": "2181349",
    "end": "2191490"
  },
  {
    "text": "might want to get more than 85 transactions per second if you could understand why it's so slow so here's a",
    "start": "2191490",
    "end": "2199380"
  },
  {
    "text": "little trace this is a a few seconds of Cronos is less",
    "start": "2199380",
    "end": "2204539"
  },
  {
    "text": "a few seconds and I'm like this is the second across and we have these little flags because I put that into the toy",
    "start": "2204539",
    "end": "2211289"
  },
  {
    "text": "program so we could see what was happening but but all of the annotation stuff is optional so this says right",
    "start": "2211289",
    "end": "2217859"
  },
  {
    "text": "right right so these are the beginnings of the bunch of rights and some of them it's running on CPU one some of them",
    "start": "2217859",
    "end": "2223229"
  },
  {
    "text": "returning on three CPU three some of those learning on CPU zero because this thing is getting migrated around as it's blocked and as others stuff could be",
    "start": "2223229",
    "end": "2229979"
  },
  {
    "text": "running in this case nothing else is running but the operating system is migrating stuff anyway which might not",
    "start": "2229979",
    "end": "2235349"
  },
  {
    "text": "have been in the picture in your head okay so if we look at the beginning this",
    "start": "2235349",
    "end": "2241469"
  },
  {
    "text": "is actually the right I screwed up and over wrote it with what this thing is which is a read and this thing over here",
    "start": "2241469",
    "end": "2247559"
  },
  {
    "text": "is a bottom half interrupt handler for our X for receiving from the from the",
    "start": "2247559",
    "end": "2254130"
  },
  {
    "text": "network so what's happening here is we're getting Network interrupts networking and written networking",
    "start": "2254130",
    "end": "2259410"
  },
  {
    "text": "they're up and the client that I'm sorry the server program is doing read read",
    "start": "2259410",
    "end": "2264929"
  },
  {
    "text": "read read of the the data just came in and this read for instance returned a",
    "start": "2264929",
    "end": "2270179"
  },
  {
    "text": "length of 0 but the reads back here were returning lengths that were on the order of 1,800 bytes",
    "start": "2270179",
    "end": "2275989"
  },
  {
    "text": "this is the megabyte coming across the network ah now you do the arithmetic and",
    "start": "2275989",
    "end": "2282869"
  },
  {
    "text": "megabyte per second it's a gigabit per second Network link in line that desk at",
    "start": "2282869",
    "end": "2288779"
  },
  {
    "text": "home so it's around 100 megabytes per second so a megabyte should take about 10 milliseconds to go across the wire",
    "start": "2288779",
    "end": "2295559"
  },
  {
    "text": "and you can interview you've zoomed around on this you could see all 10 milliseconds I'll be going across the",
    "start": "2295559",
    "end": "2300929"
  },
  {
    "text": "wire in pieces you're not going to get more than 85 transactions per second",
    "start": "2300929",
    "end": "2306929"
  },
  {
    "text": "because you're waiting on the network it's all busy ok however there's more",
    "start": "2306929",
    "end": "2312019"
  },
  {
    "text": "there's all these page faults after we finally get up and going we get a",
    "start": "2312019",
    "end": "2317969"
  },
  {
    "text": "megabyte it's sitting in a kernel mode buffer actually the city and kernel mode",
    "start": "2317969",
    "end": "2323519"
  },
  {
    "text": "buffers and chunks of about 18,000 bytes this particular protocol for remote",
    "start": "2323519",
    "end": "2330449"
  },
  {
    "text": "procedure calls the receiving and we reads a header for a message that could",
    "start": "2330449",
    "end": "2337499"
  },
  {
    "text": "be our surely long and the header says how long the rest is at which time this program",
    "start": "2337499",
    "end": "2343990"
  },
  {
    "text": "Malick's in this case a megabyte actually 1 0 0 0 0 bytes and then as the",
    "start": "2343990",
    "end": "2351770"
  },
  {
    "text": "data comes in it ends up copying that into the",
    "start": "2351770",
    "end": "2358549"
  },
  {
    "text": "allocated space which is actually going to be a string in the map that's getting that is the database so there are 245",
    "start": "2358549",
    "end": "2366680"
  },
  {
    "text": "page faults in a row here and that is 1 0 0 0 0 0 divided by 4096 rounded up",
    "start": "2366680",
    "end": "2377500"
  },
  {
    "text": "it's the right number of page faults for the length that sent it's also all",
    "start": "2377500",
    "end": "2383390"
  },
  {
    "text": "wasted effort and that's why this is so slow at the beginning but it's the same game as the copy-on-write zeros for",
    "start": "2383390",
    "end": "2389599"
  },
  {
    "text": "allocated stuff and there's some some timer interrupts in the middle you'll notice these two timer interrupts start",
    "start": "2389599",
    "end": "2395510"
  },
  {
    "text": "sooner than that timer interrupts in fact they start sooner by pretty much the length of the sine wave which is 30",
    "start": "2395510",
    "end": "2401299"
  },
  {
    "text": "millisecond microseconds it turns out on this particular processor CPU cores 0 &",
    "start": "2401299",
    "end": "2407750"
  },
  {
    "text": "2 are too hyper threads there's only one physical processor core and 1 in 3 3",
    "start": "2407750",
    "end": "2414319"
  },
  {
    "text": "isn't shown are another hyper threaded on the other of the two cores and what",
    "start": "2414319",
    "end": "2420349"
  },
  {
    "text": "you see here is the time render it comes in on a CPU core that's busy no delay",
    "start": "2420349",
    "end": "2427069"
  },
  {
    "text": "this one comes in on a CPU core that mile to the left my left went into deep",
    "start": "2427069",
    "end": "2434059"
  },
  {
    "text": "sleep with an M wait and this is coming back out at E sleep so you can see from the transition measurements you can",
    "start": "2434059",
    "end": "2440930"
  },
  {
    "text": "absolutely confirm what the timing is for coming out of sleep it turns out the",
    "start": "2440930",
    "end": "2446299"
  },
  {
    "text": "intel numbers has documented or off by a factor of 10 they said that the counts involved in this table in the Linux",
    "start": "2446299",
    "end": "2451520"
  },
  {
    "text": "kernel were microseconds they're tenths of microseconds and I just proved it with this picture ah so we've got",
    "start": "2451520",
    "end": "2461170"
  },
  {
    "text": "sending a megabyte nothing to do about changing that other than the binary",
    "start": "2461170",
    "end": "2466279"
  },
  {
    "text": "faster network but if you want more than 85 that's the thing you do because you know you know you know that's the bottleneck okay the client",
    "start": "2466279",
    "end": "2473020"
  },
  {
    "text": "takes about 1 and 1/2 milliseconds after finishing a right I didn't show this",
    "start": "2473020",
    "end": "2479230"
  },
  {
    "text": "here but but when the server sends back is you know 10 bytes says I'm done",
    "start": "2479230",
    "end": "2484359"
  },
  {
    "text": "the next incoming Network packet interrupt is about 1.5 milliseconds",
    "start": "2484359",
    "end": "2491410"
  },
  {
    "text": "later that means it took the client that long to get its act together to do the next request so 1.5 milliseconds to do",
    "start": "2491410",
    "end": "2498940"
  },
  {
    "text": "the next request so you can conceivably could go figure out why the clients so slow and speed that up or a double",
    "start": "2498940",
    "end": "2504880"
  },
  {
    "text": "buffer you know the usual things you can all solve this problem now that you know what it is yes can you correlate these",
    "start": "2504880",
    "end": "2517599"
  },
  {
    "text": "across machines absolutely all of the stuff is mapped back in to get time of",
    "start": "2517599",
    "end": "2523299"
  },
  {
    "text": "day and if you have two machines and you get time of day on the two machines you",
    "start": "2523299",
    "end": "2528339"
  },
  {
    "text": "come pretty close and I can explain how close but if you then adjust the times to be within about a microsecond of each",
    "start": "2528339",
    "end": "2535059"
  },
  {
    "text": "other you can line up what the client did and what the server did in time perfectly and you do that not by having",
    "start": "2535059",
    "end": "2540970"
  },
  {
    "text": "fancy expensive hardware you do that by saying oh I sent this thing and it arrived over here and I sent this answer",
    "start": "2540970",
    "end": "2547660"
  },
  {
    "text": "back in it right over there and you get bounds on how far on what the offset could possibly be between the two clocks",
    "start": "2547660",
    "end": "2553829"
  },
  {
    "text": "on the two machines and pretty soon you get some packets that aren't impeded in",
    "start": "2553829",
    "end": "2560650"
  },
  {
    "text": "any way and just so let's open get there and and you do short things like pinging or whatever now and then or ACK and you",
    "start": "2560650",
    "end": "2567220"
  },
  {
    "text": "get some really tight bounds and then you do that early init race and do that late inner trace and you also then can",
    "start": "2567220",
    "end": "2573430"
  },
  {
    "text": "calculate the slope of how the two clocks are drifting with respect to each other over the course of a minute or so and then you line them up every every",
    "start": "2573430",
    "end": "2582190"
  },
  {
    "text": "year when I thought about this I have my students write that program because then they know they don't need to buy",
    "start": "2582190",
    "end": "2587470"
  },
  {
    "text": "expensive hardware so and the final thing of course is all these page faults",
    "start": "2587470",
    "end": "2593170"
  },
  {
    "text": "and that's because of this malloc and free malloc and free Malka free and if you just had if the server allocated static buffers",
    "start": "2593170",
    "end": "2600339"
  },
  {
    "text": "perhaps reallocating until they're big enough and then just reuse you get rid of all that and that's the",
    "start": "2600339",
    "end": "2606490"
  },
  {
    "text": "one performance thing that's worth doing here so there's more some of the",
    "start": "2606490",
    "end": "2611620"
  },
  {
    "text": "transactions are three times faster than the others here's one transaction that takes fourteen hundred microseconds the",
    "start": "2611620",
    "end": "2619360"
  },
  {
    "text": "very next one it's a very next one took four hundred eight microseconds and",
    "start": "2619360",
    "end": "2625330"
  },
  {
    "text": "there's a bunch of the slow ones and then there's some phase change and then there's a bunch of fast once and then there's a phase change and there's a",
    "start": "2625330",
    "end": "2631000"
  },
  {
    "text": "bunch of slow ones so we're back to why",
    "start": "2631000",
    "end": "2636330"
  },
  {
    "text": "so one of the things it can do when I'm reading the time at every transition I",
    "start": "2636900",
    "end": "2643210"
  },
  {
    "text": "can also read the number of instructions retired and so you have a transition",
    "start": "2643210",
    "end": "2649330"
  },
  {
    "text": "here of a transition here you read the number you read the cycle counter here you mean cycle counter there you subtract you read the instructions",
    "start": "2649330",
    "end": "2655180"
  },
  {
    "text": "you're tired here you read the instructions that retire there you subtract you divide you get instructions per cycle not over the course of ten",
    "start": "2655180",
    "end": "2662110"
  },
  {
    "text": "seconds over the course of three microseconds or whatever this interval is that you're measuring so these little",
    "start": "2662110",
    "end": "2670780"
  },
  {
    "text": "triangles are displaying like a speedometer they're displaying the instructions for cycle over here on",
    "start": "2670780",
    "end": "2676570"
  },
  {
    "text": "pointing to the far left flat is zero instructions per cycle and over here we",
    "start": "2676570",
    "end": "2682000"
  },
  {
    "text": "don't have it in this picture of the triangle were pointing flat to the writer before instructions to recycle",
    "start": "2682000",
    "end": "2687700"
  },
  {
    "text": "this is an Intel i3 four-issue machine straight up is one dialing up north east",
    "start": "2687700",
    "end": "2695080"
  },
  {
    "text": "is two instructions per cycle diagonally up north west is half of instruction per",
    "start": "2695080",
    "end": "2700510"
  },
  {
    "text": "cycle so what we see here on the slow thing is the instructions for cycle is running about 1/4 of an instruction per",
    "start": "2700510",
    "end": "2708010"
  },
  {
    "text": "cycle one instruction every four cycles sometimes one instruction every two cycles down here at the bottom what we",
    "start": "2708010",
    "end": "2715180"
  },
  {
    "text": "see is it's running 7/8 of instruction two one instruction per cycle okay so",
    "start": "2715180",
    "end": "2721210"
  },
  {
    "text": "the reason it's slow is it's taking longer for every instruction it's not way do something else it's not how can",
    "start": "2721210",
    "end": "2729790"
  },
  {
    "text": "that happen",
    "start": "2729790",
    "end": "2732390"
  },
  {
    "text": "yeah so maybe this guy is running with lots of cash interference or cache misses and this guy is running with lots",
    "start": "2736410",
    "end": "2743529"
  },
  {
    "text": "of cache hits we look in the original",
    "start": "2743529",
    "end": "2748869"
  },
  {
    "text": "trace they actually might not be anything else running on the other CPUs to serving the caches so I don't",
    "start": "2748869",
    "end": "2755500"
  },
  {
    "text": "actually have a good explanation for this but the two choices are there's something good about the cache layout in",
    "start": "2755500",
    "end": "2761829"
  },
  {
    "text": "the fast case and those these things are filling up a good chunk of the of the l3 cache on this little processor so maybe",
    "start": "2761829",
    "end": "2769150"
  },
  {
    "text": "the operating system got to allocating the same physical pages every time after you know the hell with this malloc free",
    "start": "2769150",
    "end": "2775299"
  },
  {
    "text": "malloc free the operating systems it's all your it's always doing the same 245 pages I'll just give you the same pages",
    "start": "2775299",
    "end": "2781150"
  },
  {
    "text": "every time they haven't already in the cache by fluke I don't think that's part of the design of allocating physical",
    "start": "2781150",
    "end": "2787480"
  },
  {
    "text": "memory but it would help it helps by factor of three in this particular case",
    "start": "2787480",
    "end": "2792720"
  },
  {
    "text": "so these are all things that when you see them occurring in the code you care about you know what to do about them",
    "start": "2792720",
    "end": "2798369"
  },
  {
    "text": "when you can't see them occurring you an idea quick question",
    "start": "2798369",
    "end": "2803430"
  },
  {
    "text": "yeah when you allocate memories define to be zeroed not necessarily when you",
    "start": "2812830",
    "end": "2817910"
  },
  {
    "text": "allocate it but by the time you use it in particular by the time you write to it that's the whole point of this delayed until you you've got a page",
    "start": "2817910",
    "end": "2825800"
  },
  {
    "text": "fault and then you do the copy-on-write that's what all these page faults are doing yeah so the right answer this was",
    "start": "2825800",
    "end": "2838580"
  },
  {
    "text": "several slides back is you a better server design would allocate a buffer and reuse it the cost of malloc and free",
    "start": "2838580",
    "end": "2847250"
  },
  {
    "text": "isn't in the time you measured in the library routine for malloc and in the library routine for free in the user",
    "start": "2847250",
    "end": "2853430"
  },
  {
    "text": "code which is the measurement you always get if you profile and you say I'm spending 5% of my time in malloc and",
    "start": "2853430",
    "end": "2859760"
  },
  {
    "text": "free that's wrong the time is right after that when you do all these copy on writes that you can't see that's where",
    "start": "2859760",
    "end": "2867080"
  },
  {
    "text": "the time is really going that's half of the time in this stretch in this stretch until it's all up and running we have",
    "start": "2867080",
    "end": "2874580"
  },
  {
    "text": "crappy tools in this industry to see what's really going on and it does matter so example for you sir for three",
    "start": "2874580",
    "end": "2887030"
  },
  {
    "text": "programs running each of which is beating to death something like a 100 megabyte array so it's sweeping through",
    "start": "2887030",
    "end": "2894349"
  },
  {
    "text": "the l3 cache it's always going out to main memory what we see I picked three",
    "start": "2894349",
    "end": "2899839"
  },
  {
    "text": "on purpose so two of them have to be running on the same physical CPU core in",
    "start": "2899839",
    "end": "2904880"
  },
  {
    "text": "this case one and three but we see these are running as about five-eighths of an instruction per cycle and this other one",
    "start": "2904880",
    "end": "2912230"
  },
  {
    "text": "also simultaneously at about 5/8 of an instruction per cycle so between them",
    "start": "2912230",
    "end": "2917359"
  },
  {
    "text": "they're getting a total of 1 and 1/4 instructions out of that physical core",
    "start": "2917359",
    "end": "2923079"
  },
  {
    "text": "over here on CPU 2 this is running with only 3 idle jobs contending against it",
    "start": "2923650",
    "end": "2931040"
  },
  {
    "text": "and it runs all by itself at one",
    "start": "2931040",
    "end": "2936940"
  },
  {
    "text": "instruction per cycle instead of five-eighths so it doesn't quite hit the 2",
    "start": "2936940",
    "end": "2942109"
  },
  {
    "text": "that these to get and in fact what these two are doing of course is is each of them is getting some more instructions",
    "start": "2942109",
    "end": "2948289"
  },
  {
    "text": "done while the other one is waiting for the cache miss that's the whole point of hyper-threading so you get a little bit",
    "start": "2948289",
    "end": "2955069"
  },
  {
    "text": "more than one CPUs worth of work out of two of these each getting not half of a",
    "start": "2955069",
    "end": "2962450"
  },
  {
    "text": "CPU but but somewhere between half and all of us CPU depending on how many stall cycles there there are so that's",
    "start": "2962450",
    "end": "2970249"
  },
  {
    "text": "the advantage you get you get some and then this thing runs all by itself it runs fast when it's running",
    "start": "2970249",
    "end": "2976279"
  },
  {
    "text": "overlapped it runs slower all by itself it's actually running at one and a",
    "start": "2976279",
    "end": "2982039"
  },
  {
    "text": "quarter instructions per cycle and in the overlap case it's running at one instruction per cycle and here we have a",
    "start": "2982039",
    "end": "2987410"
  },
  {
    "text": "partial overlap and it's running at one and then it speeds up when the other two stop you can learn almost everything you",
    "start": "2987410",
    "end": "2995180"
  },
  {
    "text": "ever wanted to learn about interference and hardware sharing just from looking at instructions per cycle you don't need",
    "start": "2995180",
    "end": "3002319"
  },
  {
    "text": "the other 39 different performance counters but you need to look at a very",
    "start": "3002319",
    "end": "3009130"
  },
  {
    "text": "fine timescale if you're going to correlate it with what the programs are doing and therefore what you need to fix",
    "start": "3009130",
    "end": "3016950"
  },
  {
    "text": "so here's one more example this is a from the schedule fest this is again the programs that simply scan through the LV",
    "start": "3017430",
    "end": "3025150"
  },
  {
    "text": "l2 cache they don't go all the way out to main memory and over here this guy is running all by itself on CPU - and this",
    "start": "3025150",
    "end": "3032859"
  },
  {
    "text": "one all by itself on CPU three this linear scheduler is hyper threaded where and puts these on different CPUs on",
    "start": "3032859",
    "end": "3040480"
  },
  {
    "text": "purpose different physical CPUs when there's only two things running rather than putting both on the same physical",
    "start": "3040480",
    "end": "3046239"
  },
  {
    "text": "CPU and having it having it work hard and the other ones doing nothing so these are getting like 1.75 instructions",
    "start": "3046239",
    "end": "3052989"
  },
  {
    "text": "per cycle standalone and then these two here on on one and three are the same",
    "start": "3052989",
    "end": "3058420"
  },
  {
    "text": "core and they're only getting two instructions per cycle I got it the",
    "start": "3058420",
    "end": "3066700"
  },
  {
    "text": "other way these are - these are 175s and 175s add up to 3.5 so between these two",
    "start": "3066700",
    "end": "3072430"
  },
  {
    "text": "on on one and three I mean simultaneously",
    "start": "3072430",
    "end": "3077760"
  },
  {
    "text": "on a single-core they are nearly completely burying the ten cycles or so",
    "start": "3077760",
    "end": "3083040"
  },
  {
    "text": "for the l1 cache miss that hits nailed to this is in fact very sophisticated",
    "start": "3083040",
    "end": "3089310"
  },
  {
    "text": "hardware in this village cheap $79 part okay so that's what you get to see from",
    "start": "3089310",
    "end": "3094710"
  },
  {
    "text": "instructions per cycle and you get to see about all sorts of interference between programs main memory Bush caches",
    "start": "3094710",
    "end": "3101340"
  },
  {
    "text": "translation buffers using the non pipeline floating point divider heavily",
    "start": "3101340",
    "end": "3106770"
  },
  {
    "text": "in two different programs and they they they conflict with each other for thirty five cycles translation buffer missus",
    "start": "3106770",
    "end": "3113340"
  },
  {
    "text": "microcode walks through the translation buffer you get all of the interferes",
    "start": "3113340",
    "end": "3119010"
  },
  {
    "text": "that that's there you get to see in instructions per cycle dropping and you",
    "start": "3119010",
    "end": "3124830"
  },
  {
    "text": "get to see what's running on the other CPU so you get to see why it's dropping you can't do better than that so here's",
    "start": "3124830",
    "end": "3132630"
  },
  {
    "text": "a couple quick experimental examples then I'll finish up and take questions a friend of mine drew Netflix took a",
    "start": "3132630",
    "end": "3139740"
  },
  {
    "text": "couple days from the source code that I put in github and ported it to FreeBSD",
    "start": "3139740",
    "end": "3145140"
  },
  {
    "text": "instead of Linux and ran it on one of the 32 core servers that Netflix I guess they get it from Amazon and did a trace",
    "start": "3145140",
    "end": "3152720"
  },
  {
    "text": "and we were both amazed I actually spent",
    "start": "3152720",
    "end": "3157950"
  },
  {
    "text": "some time consulting at a car company and put this on a six core ARM processor",
    "start": "3157950",
    "end": "3163800"
  },
  {
    "text": "and we got to see some anomalies I don't have any of the original data but I have the picture this is two programs that",
    "start": "3163800",
    "end": "3170640"
  },
  {
    "text": "are running on two different processors when a third thing starts up and the first two that we're out here now or",
    "start": "3170640",
    "end": "3176580"
  },
  {
    "text": "swapping back and forth on CPU to every three and a half microseconds all",
    "start": "3176580",
    "end": "3183990"
  },
  {
    "text": "they're doing is swapping back and forth they're not making any progress they're making progress until they go back to this",
    "start": "3183990",
    "end": "3190849"
  },
  {
    "text": "no it's an older version of Linux and they had no idea this dynamic was",
    "start": "3196390",
    "end": "3202760"
  },
  {
    "text": "happening of course it's of course the the the problem is is this forded microsecond system call which they then",
    "start": "3202760",
    "end": "3211370"
  },
  {
    "text": "had to go deal with but what my job was to do the traces create traces so we",
    "start": "3211370",
    "end": "3216740"
  },
  {
    "text": "could all look at them and this is the beginning of that just expanded you know",
    "start": "3216740",
    "end": "3223460"
  },
  {
    "text": "three and a half point go seconds Bam Bam Bam Bam Bam Bam but this is just you know simple loop and every time you go around the loop to a schedule around the",
    "start": "3223460",
    "end": "3230090"
  },
  {
    "text": "loop into a scheduled and nobody thought to say gee maybe I should around the loop ten times and then do a scheduled",
    "start": "3230090",
    "end": "3235640"
  },
  {
    "text": "and then then the switching would be instead of every three and a half microseconds every 35 microseconds I",
    "start": "3235640",
    "end": "3244210"
  },
  {
    "text": "have no idea what else is going on there I do know that this column here is timer",
    "start": "3246910",
    "end": "3254780"
  },
  {
    "text": "interrupts and and further out in the trace but I just picked a chunk further",
    "start": "3254780",
    "end": "3259850"
  },
  {
    "text": "out there's timer interrupts every microsecond derson every millisecond yeah but it's serving video traffic",
    "start": "3259850",
    "end": "3268910"
  },
  {
    "text": "there's a lot live machine and my friend",
    "start": "3268910",
    "end": "3277220"
  },
  {
    "text": "that Tesla was driving when we took this trace this is this is the whole point of",
    "start": "3277220",
    "end": "3282980"
  },
  {
    "text": "it's fast enough that it doesn't distort and you can use it for real instead of",
    "start": "3282980",
    "end": "3288140"
  },
  {
    "text": "oh I can use it on my desktop running Val grind for five days no this is just it's so fast it's okay",
    "start": "3288140",
    "end": "3296710"
  },
  {
    "text": "so those are the contributions coming up first only tracing for several minutes of",
    "start": "3296710",
    "end": "3303080"
  },
  {
    "text": "everything that's going on on all of the cores of machine can help you catch unpredictably slow things if you know",
    "start": "3303080",
    "end": "3311030"
  },
  {
    "text": "all of that transaction coming up is going to be slow then you could do something simpler but you don't know you",
    "start": "3311030",
    "end": "3318170"
  },
  {
    "text": "just never know once you understand the mechanism that makes it slow you can predict when it's going to happen again",
    "start": "3318170",
    "end": "3323570"
  },
  {
    "text": "because now you understand it all mysteries are simple once you know what they're doing so so",
    "start": "3323570",
    "end": "3332570"
  },
  {
    "text": "Tracy only works in C chew for real-time traffic if it overhead is extremely",
    "start": "3332570",
    "end": "3337850"
  },
  {
    "text": "small 40 CPU cycles 12 and a half nanoseconds per event including the",
    "start": "3337850",
    "end": "3346250"
  },
  {
    "text": "average cost of a cache miss out to main memory every 64 bytes worth of trace",
    "start": "3346250",
    "end": "3351740"
  },
  {
    "text": "buffer measured by having some program",
    "start": "3351740",
    "end": "3356900"
  },
  {
    "text": "that does a million system calls and you run it with an uninstrumented kernel you run it with an instrument in kernel with",
    "start": "3356900",
    "end": "3363170"
  },
  {
    "text": "tracing turned off you run it with an instrument in kernel the trace and turned on you run it with an instrument you colonel with tracing turn on and",
    "start": "3363170",
    "end": "3369110"
  },
  {
    "text": "instructions per cycle turned on and you count the times and you subtract and you",
    "start": "3369110",
    "end": "3374840"
  },
  {
    "text": "say ah this is the overhead the overhead of having the hooks compiled in but",
    "start": "3374840",
    "end": "3380810"
  },
  {
    "text": "tracing turned off is negligible could never measure it zero the overhead of",
    "start": "3380810",
    "end": "3387470"
  },
  {
    "text": "the vanilla tracing is 12 and 1/2 nanoseconds per event that my budget was",
    "start": "3387470",
    "end": "3392720"
  },
  {
    "text": "50 nanoseconds 50 nanoseconds for an event every 5 microseconds is 1% version",
    "start": "3392720",
    "end": "3400100"
  },
  {
    "text": "we built at Google was 50 now seconds of version I built later for myself is four times faster when you turn on the",
    "start": "3400100",
    "end": "3406690"
  },
  {
    "text": "instructions per cycle the overhead is three-quarters of a percent because it's",
    "start": "3406690",
    "end": "3412310"
  },
  {
    "text": "like 36 cycles to read the instructions per cycle counter because it's a micro code they have all these various choices",
    "start": "3412310",
    "end": "3418220"
  },
  {
    "text": "you can do and then there's a 20 cycle divide I did the divide on the fly in",
    "start": "3418220",
    "end": "3424250"
  },
  {
    "text": "order to keep the size of the trace small otherwise I'd have to keep both quotient and both numerator denominator",
    "start": "3424250",
    "end": "3429530"
  },
  {
    "text": "if I did the device later still it's less than a microsecond so there's three",
    "start": "3429530",
    "end": "3434810"
  },
  {
    "text": "things that you can do you can do execution all everything's going on you can do waiting of keeping track when",
    "start": "3434810",
    "end": "3441290"
  },
  {
    "text": "something gets unblocked that's the key moment you go look at what unblocked it that's what it was waiting for always so",
    "start": "3441290",
    "end": "3450130"
  },
  {
    "text": "if the disk interrupt handler unblocked it it was waiting for disk if it",
    "start": "3450130",
    "end": "3456380"
  },
  {
    "text": "unblocked inside a few tax it was waiting for a lock",
    "start": "3456380",
    "end": "3461760"
  },
  {
    "text": "that's what futex does and with a little extra work in the locking libraries in",
    "start": "3461760",
    "end": "3467490"
  },
  {
    "text": "user code if you have a company that uses common locking libraries across the whole company you put in the extra ke",
    "start": "3467490",
    "end": "3475020"
  },
  {
    "text": "trace call that says here's which lock it is and once you have that then you",
    "start": "3475020",
    "end": "3480660"
  },
  {
    "text": "have this thing and you can turn it into not only so 84 lock is waiting for this lock and the thing that freed the lock",
    "start": "3480660",
    "end": "3487530"
  },
  {
    "text": "is in the trace that's that's the one the other thread that did the make runnable in its locking library when it",
    "start": "3487530",
    "end": "3494760"
  },
  {
    "text": "said I'm done with this lock oh there's somebody waiting on it wake them up and of course it's the fret this the thread",
    "start": "3494760",
    "end": "3501270"
  },
  {
    "text": "that's holding the lock that you want to fix for performance it's not the thread that's waiting if you say oh this thread",
    "start": "3501270",
    "end": "3507480"
  },
  {
    "text": "is waiting forever for launch you don't fix that thread you fixed the one that's",
    "start": "3507480",
    "end": "3512730"
  },
  {
    "text": "holding the lock way too long and that's something you don't get from the normal tools okay finally there's this case of",
    "start": "3512730",
    "end": "3520560"
  },
  {
    "text": "executing but executing slowly that's the interference case somebody else is sharing the disks or the",
    "start": "3520560",
    "end": "3527640"
  },
  {
    "text": "networks or the memory bus or the caches or whatever or the floating point divider you get to see those purely from",
    "start": "3527640",
    "end": "3534210"
  },
  {
    "text": "instructions per cycle so the overhead I've told you there's this philosophy",
    "start": "3534210",
    "end": "3540180"
  },
  {
    "text": "that I feel strongly about is there's nothing missing I give you a trace I show you every nanosecond not in every",
    "start": "3540180",
    "end": "3546420"
  },
  {
    "text": "CPU core it's not like I once designed a disservice goal and I used some",
    "start": "3546420",
    "end": "3556500"
  },
  {
    "text": "accounting data that the company had about da how much time that this server program took and I undersized the",
    "start": "3556500",
    "end": "3564600"
  },
  {
    "text": "hardware I built by 25% because I was",
    "start": "3564600",
    "end": "3569820"
  },
  {
    "text": "unaware that the accounting data it is accounted for kernel execution on behalf",
    "start": "3569820",
    "end": "3575220"
  },
  {
    "text": "of programs so it wasn't that bad but it so if you go to if there was a system",
    "start": "3575220",
    "end": "3581910"
  },
  {
    "text": "call and get a counter for the program that did the system call over there was an outbound Network transmit the transmitter up would get accounted for",
    "start": "3581910",
    "end": "3588540"
  },
  {
    "text": "with the program but incoming Network interrupts I didn't know which program they were for - after was process",
    "start": "3588540",
    "end": "3594460"
  },
  {
    "text": "you said oh here's an interrupt and somewhere in the TCP stack much later you figure out oh it's for that thread",
    "start": "3594460",
    "end": "3601799"
  },
  {
    "text": "they simply threw away all of the incoming interrupts from network processing time and it turned out for a",
    "start": "3601799",
    "end": "3610690"
  },
  {
    "text": "disc server program that's heavily loaded on a small machine that was 25%",
    "start": "3610690",
    "end": "3615880"
  },
  {
    "text": "of all of the CPU time was spent in interrupt handling for incoming packets",
    "start": "3615880",
    "end": "3621390"
  },
  {
    "text": "that's why I undersized dit if they had simply said we don't know where this belongs to here's the other bucket and",
    "start": "3621390",
    "end": "3627640"
  },
  {
    "text": "they put in the other bucket you could see oh other assembly is 25% we better pay attention the assumption of course",
    "start": "3627640",
    "end": "3633940"
  },
  {
    "text": "was other was negligible we don't care the way you figure that out is you have another bucket you put the stuff in and",
    "start": "3633940",
    "end": "3639880"
  },
  {
    "text": "you look to you big it is if it's negligible great you were right it was 25% well you've got some more work to do",
    "start": "3639880",
    "end": "3648690"
  },
  {
    "text": "so this is built one implementation for Linux I've moved it to across a couple",
    "start": "3649829",
    "end": "3655420"
  },
  {
    "text": "versions of Linux takes about half an hour to put the patches from one version into another version so we looked at",
    "start": "3655420",
    "end": "3663849"
  },
  {
    "text": "hello world we looked at the scheduler dynamics we looked at transactions we looked across program interference all",
    "start": "3663849",
    "end": "3671200"
  },
  {
    "text": "of that you can see from this one simple mechanism of all the transitions nothing else so the thing this is different",
    "start": "3671200",
    "end": "3678819"
  },
  {
    "text": "about this is the only tool at least the only one I know of that it's fast enough you can run in 6u with live traffic both",
    "start": "3678819",
    "end": "3684400"
  },
  {
    "text": "in the network traffic sense and in they wrote an airplane traffic sense keeping",
    "start": "3684400",
    "end": "3695920"
  },
  {
    "text": "track of the make runnable event turned out to be a key to understanding the",
    "start": "3695920",
    "end": "3702339"
  },
  {
    "text": "interactions between threads adding the",
    "start": "3702339",
    "end": "3707470"
  },
  {
    "text": "instructions per cycle turned out to be a key to understanding interference and came from somebody asking me to talk like this three years ago so how come",
    "start": "3707470",
    "end": "3715390"
  },
  {
    "text": "you can't tell us about cache interference and I went off and thought about it said well if I do instructions recycle I can so I did that and the so",
    "start": "3715390",
    "end": "3724329"
  },
  {
    "text": "idea is that if you do a total trace of some things you got the client-side the",
    "start": "3724329",
    "end": "3731270"
  },
  {
    "text": "network the server-side executing and waiting and executing slowly then you",
    "start": "3731270",
    "end": "3736760"
  },
  {
    "text": "can see exactly why something is slow you can just read it off the timeline no guesses and then there's little user",
    "start": "3736760",
    "end": "3745819"
  },
  {
    "text": "mode libraries you can put in put in labels and I added the PC tracing last",
    "start": "3745819",
    "end": "3751130"
  },
  {
    "text": "Friday found a latent bug yesterday and",
    "start": "3751130",
    "end": "3756140"
  },
  {
    "text": "then there's this post-processing that produces all the stuff that you can pan and zoom and you can take two minute",
    "start": "3756140",
    "end": "3762319"
  },
  {
    "text": "trace and zoom into 10 nanosecond intervals across the screen so if",
    "start": "3762319",
    "end": "3772900"
  },
  {
    "text": "anybody is interesting this wanted to help out a bit these are the kinds of things that I hope actually not to do",
    "start": "3772900",
    "end": "3780440"
  },
  {
    "text": "but hope to get someone else to do of other operating systems and there's a few things to complete right I would",
    "start": "3780440",
    "end": "3785809"
  },
  {
    "text": "like to do an arm port to a Raspberry Pi for I have the Raspberry Pi for that's as far as I've gotten so far so any",
    "start": "3785809",
    "end": "3793430"
  },
  {
    "text": "other remaining questions and then we'll be out of here yeah",
    "start": "3793430",
    "end": "3797740"
  },
  {
    "text": "no it's used to be two lines of code",
    "start": "3802339",
    "end": "3807459"
  },
  {
    "text": "somebody in the kernel group complained to me that that wasn't the right style for the kernel so I turned it into a",
    "start": "3807459",
    "end": "3813680"
  },
  {
    "text": "macro the macro expansion is if K you trace is on then call this routine in",
    "start": "3813680",
    "end": "3822140"
  },
  {
    "text": "the loadable module that's the entire expansion it just puts it just puts",
    "start": "3822140",
    "end": "3831559"
  },
  {
    "text": "another four byte entry into the trace so the trace entries are four bytes that's why it's fast there's 12 bits of",
    "start": "3831559",
    "end": "3839499"
  },
  {
    "text": "what event happened that covers 300 odd system call off screen around system",
    "start": "3839499",
    "end": "3845329"
  },
  {
    "text": "returns 300 odd 32 bit backwards compatibility system calls that are different 32 bit 32 that returns a",
    "start": "3845329",
    "end": "3853339"
  },
  {
    "text": "couple hundred interrupts a couple hundred faults context switch if you other things like I'm a label that's it",
    "start": "3853339",
    "end": "3858920"
  },
  {
    "text": "12 bits of event number and 20 bits of timestamp timestamp is the cycle counter",
    "start": "3858920",
    "end": "3864859"
  },
  {
    "text": "shifted over 6 bits so it increments about every 18 to 20 nanoseconds and it",
    "start": "3864859",
    "end": "3870979"
  },
  {
    "text": "wraps around every 18 to 20 milliseconds 20 bits million okay and so I end on",
    "start": "3870979",
    "end": "3878089"
  },
  {
    "text": "getting timer interrupts at least once per wrap around so that there's an event so that everything of creating the high",
    "start": "3878089",
    "end": "3884959"
  },
  {
    "text": "order cycle counter bits is done in post-processing",
    "start": "3884959",
    "end": "3890078"
  },
  {
    "text": "know the the call that I had on the screen passes in the event number it says I'm doing a system call and I Ord",
    "start": "3892359",
    "end": "3899390"
  },
  {
    "text": "in the system call number yeah I'll do",
    "start": "3899390",
    "end": "3905179"
  },
  {
    "text": "four and then we'll stop",
    "start": "3905179",
    "end": "3908259"
  },
  {
    "text": "I'm more to be more useful but it makes the trace bigger I mean if you want more you can use F trace 30 times slower you",
    "start": "3913040",
    "end": "3919430"
  },
  {
    "text": "can record all of the parameters and you can you can have run kind decoding in which system call has five parameters and which has two I wanted something I",
    "start": "3919430",
    "end": "3927380"
  },
  {
    "text": "could run in a real data center during the busiest hour of the day with no slowdown the so the what's stored in the",
    "start": "3927380",
    "end": "3936230"
  },
  {
    "text": "trace is just the Lord or sixteen bits of the first parameter but that's really useful it's good enough it's an",
    "start": "3936230",
    "end": "3942950"
  },
  {
    "text": "engineering balance when I entered the instructions for segue I had to add four bits to every entry which I did with a",
    "start": "3942950",
    "end": "3950630"
  },
  {
    "text": "parallel array of bytes because I didn't want to you know make all the entries twice as big question if I could only",
    "start": "3950630",
    "end": "3962960"
  },
  {
    "text": "have four CPU performance counters yeah issue slots so of a machine can issue",
    "start": "3962960",
    "end": "3969890"
  },
  {
    "text": "four instructions per cycle four times the number of cycles and I mean the real cycles not the constant cycles depending",
    "start": "3969890",
    "end": "3975800"
  },
  {
    "text": "on if the if the clock is slower then there's fewer sets of four issue slots",
    "start": "3975800",
    "end": "3981320"
  },
  {
    "text": "per second if the clock is faster there's more issue thoughts so number of issue slots just a freerunning counter",
    "start": "3981320",
    "end": "3987680"
  },
  {
    "text": "keeps getting larger number of issue slots with instructions in them the ones",
    "start": "3987680",
    "end": "3994070"
  },
  {
    "text": "that don't have instructions in them are waiting on the I cache they may be no they I catch because it's a cache miss",
    "start": "3994070",
    "end": "3999650"
  },
  {
    "text": "they may be waiting on the I cash because there was a branch mispredict and it's going back to the front of the pipeline to go fetch or whatever and",
    "start": "3999650",
    "end": "4006310"
  },
  {
    "text": "it's six cycles away before you get to the issue slot but whatever so issue",
    "start": "4006310",
    "end": "4013359"
  },
  {
    "text": "slots that have instructions in them issue slots that have instructions in them that actually issue if they don't",
    "start": "4013359",
    "end": "4019900"
  },
  {
    "text": "issue means you're waiting on the back end typically you're waiting on a back end loader store unit that's that's got",
    "start": "4019900",
    "end": "4026890"
  },
  {
    "text": "24 of them in front of you but you could be waiting on the not pipeline a floating-point divide unit but almost",
    "start": "4026890",
    "end": "4033310"
  },
  {
    "text": "everything else in backends these days are fully pipeline you can start a new one of whatever every cycle so those",
    "start": "4033310",
    "end": "4038950"
  },
  {
    "text": "don't wait until you get backed up in some way ok and then the fourth one is instructions retired",
    "start": "4038950",
    "end": "4045670"
  },
  {
    "text": "okay with those four you could subtract instructions retired from issue slots",
    "start": "4045670",
    "end": "4052779"
  },
  {
    "text": "that actually issued and the difference is speculative instructions that were",
    "start": "4052779",
    "end": "4057940"
  },
  {
    "text": "thrown away and sometimes that's a big number and so you need to know you can't",
    "start": "4057940",
    "end": "4066160"
  },
  {
    "text": "assume all that's trivial forget it you might find you're spending thirty percent of your program in that and you need to restructure your branching stuff",
    "start": "4066160",
    "end": "4072579"
  },
  {
    "text": "a bit or you need to switch your algorithm a little bit so you're doing table lookups instead of if-if-if okay",
    "start": "4072579",
    "end": "4081099"
  },
  {
    "text": "once you see speculative execution popping up as it's noticeable you almost",
    "start": "4081099",
    "end": "4088480"
  },
  {
    "text": "always could fix it in twenty minutes okay so those are the four counters it's",
    "start": "4088480",
    "end": "4093849"
  },
  {
    "text": "really helpful to have a fifth thing which is a free running one hundred",
    "start": "4093849",
    "end": "4099670"
  },
  {
    "text": "megahertz counter just every ten nanoseconds does not change based on the clock going faster or slower battery",
    "start": "4099670",
    "end": "4105940"
  },
  {
    "text": "saving whatever and it's the same for all the cores and nobody can write to it",
    "start": "4105940",
    "end": "4111310"
  },
  {
    "text": "it just keeps counting and and that to be read in one cycle not thirty six",
    "start": "4111310",
    "end": "4117940"
  },
  {
    "text": "cycles and to be read without having to set up these other control registers to say the thing I want to look at is what",
    "start": "4117940",
    "end": "4124600"
  },
  {
    "text": "time it is you know and by the way when I do that nobody else can do looking at",
    "start": "4124600",
    "end": "4129790"
  },
  {
    "text": "some other counter there's global state the way these things are now which is terrible I mean when I run gathering",
    "start": "4129790",
    "end": "4137048"
  },
  {
    "text": "IPC's I take over the the performance counters for the whole machine for whatever the multiplexer is that has",
    "start": "4137049",
    "end": "4144130"
  },
  {
    "text": "instructions none of the other choices that aren't just overwrite them in the kernel with okay here's what I'm going",
    "start": "4144130",
    "end": "4149650"
  },
  {
    "text": "to measure and to hell with everybody else which is not a good design okay the other thing is to have the performance",
    "start": "4149650",
    "end": "4156040"
  },
  {
    "text": "counters the four that I named be per process per thread so that they are",
    "start": "4156040",
    "end": "4163298"
  },
  {
    "text": "saved and restored at context which time along with the other registers I think of them if you've got sixteen registers",
    "start": "4163299",
    "end": "4169659"
  },
  {
    "text": "as four more registers save all twenty new thread restore all twenty",
    "start": "4169659",
    "end": "4177640"
  },
  {
    "text": "and they should be one cycle read the",
    "start": "4177640",
    "end": "4184509"
  },
  {
    "text": "time stamp counter is free running when you get a chip that has constant times",
    "start": "4184510",
    "end": "4191560"
  },
  {
    "text": "tab counter but nobody tells you what its frequency is you have to go screw",
    "start": "4191560",
    "end": "4197290"
  },
  {
    "text": "around in an operating specific system specific way to find out oh this is 3.6",
    "start": "4197290",
    "end": "4202900"
  },
  {
    "text": "gigahertz on this other machine right next to it is 3.2 key guards okay and",
    "start": "4202900",
    "end": "4208840"
  },
  {
    "text": "and you and you have to keep writing that code you know every time for every new version of every operation but sometimes you have to go read /proc /dp",
    "start": "4208840",
    "end": "4215500"
  },
  {
    "text": "info in ascii and pull out some characters crazy if it were architected",
    "start": "4215500",
    "end": "4221230"
  },
  {
    "text": "as just a hundred megahertz and everybody has a hundred megahertz counter that's the thing they're multiplying up to get 2.7 gigahertz 2.8",
    "start": "4221230",
    "end": "4228010"
  },
  {
    "text": "2.9 it's a hundred megahertz counter with a multiplier in a face lock loop I",
    "start": "4228010",
    "end": "4234150"
  },
  {
    "text": "just want to count the hundred megahertz",
    "start": "4234150",
    "end": "4238050"
  },
  {
    "text": "no you can't measure it reliably because because it's constant but you might be",
    "start": "4239190",
    "end": "4245530"
  },
  {
    "text": "running on a machine that's coming out of idle and and it's not actually running anywhere near that speed while",
    "start": "4245530",
    "end": "4251560"
  },
  {
    "text": "you're measuring and then you're off by a factor of two or you get interrupts in the middle and you could screw around and you can build routines that's sort",
    "start": "4251560",
    "end": "4257920"
  },
  {
    "text": "of more or less measure but that's crazy just architected a constant rate thing that everybody knows that the",
    "start": "4257920",
    "end": "4263890"
  },
  {
    "text": "documentary rate I've got two more questions to do awesome yeah",
    "start": "4263890",
    "end": "4269250"
  },
  {
    "text": "yeah so if you're concerned about battery time or temperature variations",
    "start": "4287610",
    "end": "4292840"
  },
  {
    "text": "in clock speed and stuff you could you can use current tools to measure a lot",
    "start": "4292840",
    "end": "4299860"
  },
  {
    "text": "of those things because they're they're millisecond scales I mean when something gets hot it doesn't get hot in a",
    "start": "4299860",
    "end": "4305619"
  },
  {
    "text": "microsecond it gets hot in tens of milliseconds so there's no point having",
    "start": "4305619",
    "end": "4311320"
  },
  {
    "text": "a carefully engineered fast transition thing measuring you just need to have",
    "start": "4311320",
    "end": "4316960"
  },
  {
    "text": "some user mode program that reads if you",
    "start": "4316960",
    "end": "4329500"
  },
  {
    "text": "wanted to really care about battery consumption you would want to get the apples and Samsung's of the world to",
    "start": "4329500",
    "end": "4337480"
  },
  {
    "text": "deliver better measurements by process ID of who the hell's using up the battery but it only needs to be by",
    "start": "4337480",
    "end": "4344650"
  },
  {
    "text": "process ID it doesn't need to be by microsecond by microsecond so last",
    "start": "4344650",
    "end": "4350079"
  },
  {
    "text": "question you have to program the PMU",
    "start": "4350079",
    "end": "4357130"
  },
  {
    "text": "counter in order to get instruction if you're tired there is no things like that it's exactly that number it's a",
    "start": "4357130",
    "end": "4364510"
  },
  {
    "text": "pain in the ass and it's different on the a on the rise ins that on the i3 so",
    "start": "4364510",
    "end": "4369880"
  },
  {
    "text": "you have to do you have to have the loadable module that does this has to have code in and says you know what process there am I on it's crazy",
    "start": "4369880",
    "end": "4376329"
  },
  {
    "text": "okay I'm on Don thank you very much [Applause]",
    "start": "4376329",
    "end": "4384250"
  }
]