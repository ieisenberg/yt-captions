[
  {
    "text": " OK, so today--",
    "start": "0",
    "end": "7170"
  },
  {
    "text": "I should remind if\nyou have three grades, please get them in by Wednesday.",
    "start": "7170",
    "end": "12540"
  },
  {
    "text": "And I think we're\ngoing to be fairly stringent about that deadline. So if you've got three grades,\nmake sure you get those in.",
    "start": "12540",
    "end": "21150"
  },
  {
    "text": "So, today, we are\ngoing to return to the subject of programming\nwith shared memory, which you're",
    "start": "21150",
    "end": "28560"
  },
  {
    "text": "all pretty familiar with. And the topic will\nbe how we make",
    "start": "28560",
    "end": "34350"
  },
  {
    "text": "programming with synchronization\neasier using a concept called transactional memory,\nwhich is pretty interesting.",
    "start": "34350",
    "end": "40750"
  },
  {
    "text": "And so let me\nintroduce the topic by talking about what\nyou already know.",
    "start": "40750",
    "end": "49200"
  },
  {
    "text": "So we've talked about\nsynchronization primitives, low-level synchronization\nprimitives.",
    "start": "49200",
    "end": "55420"
  },
  {
    "text": "And we said that the\nkey hardware mechanism you need to implement\nsynchronization",
    "start": "55420",
    "end": "62550"
  },
  {
    "text": "is an atomic load and store. And these come in a\nvariety of different types.",
    "start": "62550",
    "end": "70810"
  },
  {
    "text": "You can have fetch-and-op,\ntest-and-set, compare-and-swap.",
    "start": "70810",
    "end": "76939"
  },
  {
    "text": "And then we said that\non modern systems, they actually break these into\ntwo different memory operations,",
    "start": "76940",
    "end": "85520"
  },
  {
    "text": "load linked and\nstore conditional. And the coherence system\nconnects them together",
    "start": "85520",
    "end": "92030"
  },
  {
    "text": "and makes them atomic. All right. So the key thing you need\nto implement synchronization primitives is an\natomic load and store.",
    "start": "92030",
    "end": "101119"
  },
  {
    "text": "And so once you've got\nthis in your hardware, then you can implement\nvarious different kinds",
    "start": "101120",
    "end": "107140"
  },
  {
    "text": "of atomic operations,\nsynchronization, operations like locks, and barriers.",
    "start": "107140",
    "end": "114220"
  },
  {
    "text": "And of course, with locks, you\ncan implement lock-free data structures. However, programming\nwith these higher-level",
    "start": "114220",
    "end": "124150"
  },
  {
    "text": "synchronization primitives\nis still pretty difficult. So we've seen that it's actually\npretty challenging to develop",
    "start": "124150",
    "end": "132430"
  },
  {
    "text": "lock-free data structures\nif you're not careful. And you do the wrong\nsynchronization order.",
    "start": "132430",
    "end": "139790"
  },
  {
    "text": "You end up with deadlock. And so the question\nis, are there better ways of dealing\nwith synchronization?",
    "start": "139790",
    "end": "146960"
  },
  {
    "text": "And, in particular, can you\nraise the level of abstraction and make it easier\nfor programmers to get both correct programs\nand high performance programs?",
    "start": "146960",
    "end": "155930"
  },
  {
    "text": "Which is what we're all after. OK, So the idea\nthen is we're going to talk about transactions.",
    "start": "155930",
    "end": "162520"
  },
  {
    "text": "And we're going to talk about\nthe fundamental programmer's view of transactions, which is\nreally basically pretty simple.",
    "start": "162520",
    "end": "170170"
  },
  {
    "text": "And then we're going to\ntalk about how transactions differ from synchronization\nprimitives like lock and unlock.",
    "start": "170170",
    "end": "179080"
  },
  {
    "text": "And then once we understand why\nyou'd want to use transactions and how you'd use\ntransactions, then we",
    "start": "179080",
    "end": "185590"
  },
  {
    "text": "want to talk about how you\nimplement transactions. And they're both software\nand hardware ways",
    "start": "185590",
    "end": "191530"
  },
  {
    "text": "of implementing transactions\nwith different performance characteristics. And so we'll talk about that.",
    "start": "191530",
    "end": "197650"
  },
  {
    "text": "But before we talk\nabout the details, we'll also talk about some\nof the basic design space trade-offs that you have for\nimplementing transactions,",
    "start": "197650",
    "end": "206180"
  },
  {
    "text": "dealing with how you deal with\nthe different versions that get created with transactions,\nhow you detect whether there are",
    "start": "206180",
    "end": "213400"
  },
  {
    "text": "conflicts between transactions,\nand the granularity of detection. And this will remind you of our\ndiscussion of cache coherence.",
    "start": "213400",
    "end": "225650"
  },
  {
    "text": "And when we talk\nabout cache coherence, we talked about two levels at\nwhich you could do detection.",
    "start": "225650",
    "end": "232610"
  },
  {
    "text": "We spent a lot of time\ntalking about doing detection at the level of cache lines.",
    "start": "232610",
    "end": "237980"
  },
  {
    "text": "And what was the problem\nwith doing things with at the level\nof cache lines? Well, something that, of course,\nyou revisited on the midterm.",
    "start": "237980",
    "end": "247340"
  },
  {
    "text": "What happens? Yeah. You get full sharing. You get full sharing. So what if you do the\ngranularity of detection",
    "start": "247340",
    "end": "253097"
  },
  {
    "text": "at the operating\nsystem page level? Full sharing gets\nmuch, much worse.",
    "start": "253097",
    "end": "259010"
  },
  {
    "text": "So we'll see this notion of\ngranularity of detection rear",
    "start": "259010",
    "end": "265300"
  },
  {
    "text": "its ugly head again as we\ntalk about transactions. So, first of all, so why is\nlocking, as we've currently",
    "start": "265300",
    "end": "273010"
  },
  {
    "text": "discussed it, difficult? The fundamental problem\nis there's this trade off that the programmer has\nto make between having",
    "start": "273010",
    "end": "280750"
  },
  {
    "text": "a correct program, which\nis what we all want, and having a high performance\nprogram, which is also",
    "start": "280750",
    "end": "287410"
  },
  {
    "text": "what we want. I mean, the purpose of taking\nthis course parallel programming is to develop high\nperformance programs, right?",
    "start": "287410",
    "end": "294268"
  },
  {
    "text": "So there's this\nfundamental trade-off that one has to deal with. And this comes down\nto the granularity",
    "start": "294268",
    "end": "300730"
  },
  {
    "text": "at which you do the locking. So if you do it\nat a coarse grain,",
    "start": "300730",
    "end": "307310"
  },
  {
    "text": "then you get a low\ndegree of concurrency. So you imagine--\nwhen we're talking about locking data\nstructures, you",
    "start": "307310",
    "end": "313990"
  },
  {
    "text": "can have a lock around\nthe whole data structure. Or, even worse, you\ncan imagine that I have",
    "start": "313990",
    "end": "319930"
  },
  {
    "text": "a lock on all of shared memory. So every time I touch shared\nmemory, I have to grab a lock.",
    "start": "319930",
    "end": "325340"
  },
  {
    "text": "And that means that only\none thread can be touching shared memory at any one time. So this is low concurrency.",
    "start": "325340",
    "end": "331730"
  },
  {
    "text": "And, of course, the\nopposite extreme is to go to some sort of\nfine-grained locking scheme.",
    "start": "331730",
    "end": "337400"
  },
  {
    "text": "And this can have much\nhigher concurrency because now many threads\ncould potentially",
    "start": "337400",
    "end": "343750"
  },
  {
    "text": "be touching the same\ndata structure if you've got fine-grained locking.",
    "start": "343750",
    "end": "349060"
  },
  {
    "text": "However, the problem\nis now you open yourself up to the potential\nfor problems with correctness--",
    "start": "349060",
    "end": "360880"
  },
  {
    "text": "so deadlock races and the such. So the question\nthen is, is there a better way of thinking about\nor implementing synchronization?",
    "start": "360880",
    "end": "369050"
  },
  {
    "text": "And that is the reason\nfor transactions. So let's look at an example.",
    "start": "369050",
    "end": "376550"
  },
  {
    "text": "So suppose I want to make a\ndeposit into your account. So the first thing I need to do\nis to get your account balance.",
    "start": "376550",
    "end": "382740"
  },
  {
    "text": "And then I need to increment the\naccount balance by the amount of money being deposited.",
    "start": "382740",
    "end": "388500"
  },
  {
    "text": "So first, I do a get\nfrom your account. And then I increment\nthe balance,",
    "start": "388500",
    "end": "395870"
  },
  {
    "text": "and I put that back\nin your account. Well, you'd be pretty annoyed\nif, in the middle of the get,",
    "start": "395870",
    "end": "403790"
  },
  {
    "text": "somebody else wanted\nto give you some money and so they got the\nwrong amount because you",
    "start": "403790",
    "end": "414680"
  },
  {
    "text": "didn't have synchronization. So the way to fix that is to\nmake the deposit method atomic",
    "start": "414680",
    "end": "425000"
  },
  {
    "text": "by using locks. And so you put locks around--\nyou take an account lock.",
    "start": "425000",
    "end": "431660"
  },
  {
    "text": "And so if you do this\nright, then you're going to ensure that the\ndeposit method is atomic.",
    "start": "431660",
    "end": "439370"
  },
  {
    "text": "However, you could, instead,\nif you were using transactions,",
    "start": "439370",
    "end": "444780"
  },
  {
    "text": "you would just wrap\nthe atomic construct around the whole of the\ncontents of the deposit method.",
    "start": "444780",
    "end": "451670"
  },
  {
    "text": "And you're declaring\nto the system that you want this sequence\nof statements to be atomic.",
    "start": "451670",
    "end": "459870"
  },
  {
    "text": "So the thing to take note of\nis that atomic is declarative.",
    "start": "459870",
    "end": "466560"
  },
  {
    "text": "You're saying what you want\nthe system behavior to be. And you don't have to explicitly\ntalk about how it's actually",
    "start": "466560",
    "end": "473990"
  },
  {
    "text": "implemented. So once you declare\natomic, then it's up to the system to implement\natomic in the right way.",
    "start": "473990",
    "end": "483830"
  },
  {
    "text": "In fact, under\nthe covers, atomic could be implemented with locks. But you as the programmer\ndon't see the locks.",
    "start": "483830",
    "end": "490676"
  },
  {
    "text": "Your interface is this\natomic declaration.",
    "start": "490676",
    "end": "496630"
  },
  {
    "text": "And then, of course, how\nexactly it gets implemented and how you make sure that\nyou get good performance",
    "start": "496630",
    "end": "503220"
  },
  {
    "text": "is the subject of the\nrest of the lecture. But it's important to\nnote that atomic is",
    "start": "503220",
    "end": "509430"
  },
  {
    "text": "this declarative abstraction. You say what you want,\nnot how to get it.",
    "start": "509430",
    "end": "514900"
  },
  {
    "text": "And we've seen this in the past. So we've talked about\ndeclarative abstractions",
    "start": "514900",
    "end": "520799"
  },
  {
    "text": "in which you say, execute these\nindependent files and tasks. So what's an example of\na declarative abstraction",
    "start": "520799",
    "end": "528450"
  },
  {
    "text": "that we've talked\nabout in this class. Like a book launch\nof [? iSBC ?] does.",
    "start": "528450",
    "end": "534470"
  },
  {
    "text": "Yes. So in [? iSBC, ?] you have\nfour each, for example. That's exactly\ncorrect-- as opposed",
    "start": "534470",
    "end": "540430"
  },
  {
    "text": "to an imperative abstraction\nwhere you say explicitly how you want the behavior to work.",
    "start": "540430",
    "end": "548870"
  },
  {
    "text": "So for example,\ninstead of saying, launch a bunch of\nindependent tasks,",
    "start": "548870",
    "end": "554209"
  },
  {
    "text": "you say spawn N worker threads. Assign threads to\nwork explicitly",
    "start": "554210",
    "end": "559240"
  },
  {
    "text": "using some of shared task queue. So the synchronization analog\nto declarative versus imperative",
    "start": "559240",
    "end": "569260"
  },
  {
    "text": "semantics are-- transactions says, perform this\nset of operations atomically.",
    "start": "569260",
    "end": "574390"
  },
  {
    "text": "Whereas if you are\ndealing with locking, then you have to\nexplicitly acquire",
    "start": "574390",
    "end": "580060"
  },
  {
    "text": "locks, perform the operations,\nand release the locks. And so the abstraction\nis much lower level,",
    "start": "580060",
    "end": "586269"
  },
  {
    "text": "and it's imperative. It says how to do it as\nopposed to what to do.",
    "start": "586270",
    "end": "596310"
  },
  {
    "text": "So imperative is how,\nand declarative is what. OK.",
    "start": "596310",
    "end": "601730"
  },
  {
    "text": "Any questions at this point? OK, so let's talk about\nwhat sorts of semantics",
    "start": "601730",
    "end": "612470"
  },
  {
    "text": "you have with transactions. So we're talking about\ntransactional memory,",
    "start": "612470",
    "end": "618630"
  },
  {
    "text": "which is inspired by\ndatabase transactions.",
    "start": "618630",
    "end": "624510"
  },
  {
    "text": "How many people here have\ntaken a database course? Good, a fair number of you. So in databases, you hear\nabout ACID properties.",
    "start": "624510",
    "end": "634410"
  },
  {
    "text": "So we have similar semantics\nfor transactional memory.",
    "start": "634410",
    "end": "641180"
  },
  {
    "text": "So you've got an\natomic, an isolated sequence of memory accesses.",
    "start": "641180",
    "end": "646920"
  },
  {
    "text": "So the first key thing that\nyou want in your transactions is atomicity.",
    "start": "646920",
    "end": "652110"
  },
  {
    "text": "It means all or nothing. Either all of the\nreads and writes",
    "start": "652110",
    "end": "658460"
  },
  {
    "text": "inside the transaction\ntake effect-- and, in particular, the\nwrites change the state of the memory system--",
    "start": "658460",
    "end": "664620"
  },
  {
    "text": "or it says if none of\nthem occurred at all. So you can imagine\nit's all or nothing.",
    "start": "664620",
    "end": "669630"
  },
  {
    "text": "And that means that you have\nthis atomicity property.",
    "start": "669630",
    "end": "675240"
  },
  {
    "text": "The second property\nof transactions is this notion of isolation, the\nfact that within a transaction,",
    "start": "675240",
    "end": "683550"
  },
  {
    "text": "any of the reads-- or, in particular, the writes--\nthat are made by the transaction",
    "start": "683550",
    "end": "688800"
  },
  {
    "text": "cannot be observed by any other\ntransactions in the system. So the operations\nwithin a transaction",
    "start": "688800",
    "end": "696510"
  },
  {
    "text": "are completely isolated. And then, lastly,\nthe last property is serializability,\nwhich says that, hey, I",
    "start": "696510",
    "end": "706139"
  },
  {
    "text": "can have a serialized\norder of the execution",
    "start": "706140",
    "end": "712650"
  },
  {
    "text": "of the transactions\nin the system. So I can order all\nthe transactions in the system in a serial order.",
    "start": "712650",
    "end": "719790"
  },
  {
    "text": "However, the exact order is not\nspecified by the programmer. That's left up to the system.",
    "start": "719790",
    "end": "727110"
  },
  {
    "text": "But there is a serializable\norder that we can impose--",
    "start": "727110",
    "end": "733240"
  },
  {
    "text": "the system will be imposed\non the order in which the transactions commit.",
    "start": "733240",
    "end": "740050"
  },
  {
    "text": "So we've got atomicity,\nisolation, and serializability. We don't really have\ndurability because, of course,",
    "start": "740050",
    "end": "747430"
  },
  {
    "text": "memory can fail. So the D is missing in the\nsemantics or the properties",
    "start": "747430",
    "end": "756950"
  },
  {
    "text": "of transactional memory. So the way to think about\ntransactional memory then is a transaction\nis a sequence of reads",
    "start": "756950",
    "end": "766100"
  },
  {
    "text": "and writes on various\naddresses that are both isolated and atomic.",
    "start": "766100",
    "end": "772830"
  },
  {
    "text": "So you can think about\nthe operations that",
    "start": "772830",
    "end": "778460"
  },
  {
    "text": "are made within the\ntransaction as being the same as a single\noperation that we",
    "start": "778460",
    "end": "785450"
  },
  {
    "text": "talked about in the\ncontext of cache coherency. So each of the\ntransactions then can",
    "start": "785450",
    "end": "791899"
  },
  {
    "text": "be thought of as a single atomic\nmemory operation that occurs,",
    "start": "791900",
    "end": "799130"
  },
  {
    "text": "and it can be serialized\nby the system. So with this in mind, then,\nwhat consistency model",
    "start": "799130",
    "end": "806089"
  },
  {
    "text": "do we have for\ntransactional memory? ",
    "start": "806090",
    "end": "811620"
  },
  {
    "text": "What consistency model does\ntransactional memory give you? Yeah?",
    "start": "811620",
    "end": "817172"
  },
  {
    "text": "Sequential consistency. It gives you basically\nsequential consistency. So you can imagine\nthat picture where",
    "start": "817172",
    "end": "823470"
  },
  {
    "text": "the pointer points\nfrom one thread",
    "start": "823470",
    "end": "828720"
  },
  {
    "text": "to the next in\nsome random order. But in this case, every time it\npoints to a particular thread,",
    "start": "828720",
    "end": "837459"
  },
  {
    "text": "it takes a whole transaction's\nworth of memory references. So it is essentially\nsequential consistency.",
    "start": "837460",
    "end": "844520"
  },
  {
    "text": "Some people have called this\ntransactional consistency to differentiate\nit from the fact",
    "start": "844520",
    "end": "851250"
  },
  {
    "text": "that-- you've got this\nbulk operation of memory references as opposed to a\nsingle memory reference that",
    "start": "851250",
    "end": "857790"
  },
  {
    "text": "gets selected each time. But, essentially, it is\nsequential consistency.",
    "start": "857790",
    "end": "863140"
  },
  {
    "text": "Question? Within a single\ntransaction, is it ever possible to read and\nwrite to the same variable?",
    "start": "863140",
    "end": "870240"
  },
  {
    "text": "Or would that mess up-- Read or write-- so you\ncan do whatever you want inside the single transaction. Because it's isolated, right?",
    "start": "870240",
    "end": "877240"
  },
  {
    "text": "So it doesn't\nmatter, for example, the order in which I read XYZ\nwithin that single transaction?",
    "start": "877240",
    "end": "882990"
  },
  {
    "text": "Well, you've got to\nmatch whatever was stated in the program order.",
    "start": "882990",
    "end": "890170"
  },
  {
    "text": "You can't mess that up-- well, in particular,\nthe dependencies",
    "start": "890170",
    "end": "895899"
  },
  {
    "text": "in the program order. If there are no\ndependencies, then of course you can reorder things.",
    "start": "895900",
    "end": "901520"
  },
  {
    "text": "If there are, you've\ngot to respect them. Yeah.",
    "start": "901520",
    "end": "906860"
  },
  {
    "text": "OK, so we basically have\nsequential consistency. So let's motivate\na little bit more",
    "start": "906860",
    "end": "912170"
  },
  {
    "text": "why you want\ntransactional memory. So this is a Java HashMap.",
    "start": "912170",
    "end": "918100"
  },
  {
    "text": "Right. So we used to run\nthis class in Java.",
    "start": "918100",
    "end": "923130"
  },
  {
    "text": "How many people\nactually know Java here? Good. All right, good. So here's a Java HashMap.",
    "start": "923130",
    "end": "931762"
  },
  {
    "text": "It maps a key to a value. You can look at the code.",
    "start": "931762",
    "end": "938160"
  },
  {
    "text": "It's fairly straightforward. You get a hash\nbucket, and then you find the element\nwithin the bucket.",
    "start": "938160",
    "end": "944339"
  },
  {
    "text": "But, of course,\nif you want to use this in a multithreaded parallel\ncontext, it's not thread safe.",
    "start": "944340",
    "end": "952010"
  },
  {
    "text": "So it's not thread safe. And so, of course,\nit doesn't have any extra overhead for locking.",
    "start": "952010",
    "end": "959580"
  },
  {
    "text": "But it'd be a bad idea to use\nthis in a threaded environment. So if you want to use it in\na threaded environment, what",
    "start": "959580",
    "end": "966750"
  },
  {
    "text": "you want is some of\nsynchronized map, which is what Java 1.4 gives you.",
    "start": "966750",
    "end": "975160"
  },
  {
    "text": "So it essentially\nuses synchronized, which is a way for specifying\nthat this method will--",
    "start": "975160",
    "end": "985319"
  },
  {
    "text": "you need to take a\nlock before you use it. However, you don't have to\nexplicitly release the lock.",
    "start": "985320",
    "end": "990815"
  },
  {
    "text": " So the system does the\nacquisition for you.",
    "start": "990815",
    "end": "997370"
  },
  {
    "text": "So synchronize-- it's easy. You make the whole\nHashMap synchronized.",
    "start": "997370",
    "end": "1003530"
  },
  {
    "text": "And now it's thread\nsafe, so you can use it within a threaded environment. However, the performance\nof this HashMap",
    "start": "1003530",
    "end": "1013970"
  },
  {
    "text": "may not be that\ngood because you've got this single lock which\nlocks the whole data structure.",
    "start": "1013970",
    "end": "1021540"
  },
  {
    "text": "So what should we do\nto potentially improve the performance of\nthe Java HashMap map?",
    "start": "1021540",
    "end": "1031280"
  },
  {
    "text": "What can we do? Yeah? Do a lock for [INAUDIBLE] to\neach bucket instead of a lock",
    "start": "1031280",
    "end": "1037126"
  },
  {
    "text": "for the entire-- Right. So we can do a s per\nbucket as opposed to a lock over\nthe whole HashMap.",
    "start": "1037127",
    "end": "1043409"
  },
  {
    "text": "And this would potentially give\nus more concurrency and more performance.",
    "start": "1043410",
    "end": "1050630"
  },
  {
    "text": "So now with this\nfine-grained locking, it's potentially thread safe.",
    "start": "1050630",
    "end": "1057620"
  },
  {
    "text": "But the problem is that now it's\nmore complicated to implement. So it's much more complicated\nthan just putting a synchronize",
    "start": "1057620",
    "end": "1067280"
  },
  {
    "text": "around the whole method. Now you've got to dig into the\ndetails of the implementation of the HashMap.",
    "start": "1067280",
    "end": "1073250"
  },
  {
    "text": "So in terms of\nperformance, things are going to look a lot better. So in this case, we're looking\nat the execution time--",
    "start": "1073250",
    "end": "1081810"
  },
  {
    "text": "so lower is better-- from one to 16 processors. And so Java, the synchronized--\nthe whole HashMap",
    "start": "1081810",
    "end": "1091100"
  },
  {
    "text": "doesn't really improve much. So you see performance\nroughly doesn't",
    "start": "1091100",
    "end": "1099500"
  },
  {
    "text": "improve with\nparallelization because you don't have enough concurrency.",
    "start": "1099500",
    "end": "1105059"
  },
  {
    "text": "However, with\nfine-grained locks, we do see this\nimprovement in performance",
    "start": "1105060",
    "end": "1110390"
  },
  {
    "text": "as we increase the\nnumber of processors. So this is all good. So thumbs up for\nfine-grained locking",
    "start": "1110390",
    "end": "1118429"
  },
  {
    "text": "because it's always a win. Is it always a win? ",
    "start": "1118430",
    "end": "1124930"
  },
  {
    "text": "What's happening here? So in this case, the\ncoarse-grained locks give you this\nno-concurrency line,",
    "start": "1124930",
    "end": "1136440"
  },
  {
    "text": "which doesn't improve\nwith number of processes. But what is happening\nwith fine-grained locks?",
    "start": "1136440",
    "end": "1143630"
  },
  {
    "text": "So we're going from a hashtable\nhere now to a balanced-tree data",
    "start": "1143630",
    "end": "1148960"
  },
  {
    "text": "structure. And now we are using\nfine-grained locks with the balanced tree.",
    "start": "1148960",
    "end": "1154160"
  },
  {
    "text": "So why at one processor do\nwe have the execution time",
    "start": "1154160",
    "end": "1160330"
  },
  {
    "text": "being so much worse than the\ncoarse-grained locking scheme? Yeah?",
    "start": "1160330",
    "end": "1166090"
  },
  {
    "text": "The ratio of work you\ndo for lock and unlock on the tree compared to what\nyou're doing with a hashtable,",
    "start": "1166090",
    "end": "1172550"
  },
  {
    "text": "where you're iterating over\na whole LinkedList for lock, unlock. Right. So if you're potentially\ndoing hand-over-hand lock,",
    "start": "1172550",
    "end": "1180610"
  },
  {
    "text": "you've got to take a lot\nof locking, a lot of locks, for very little work. And so you have a lot\nof overhead associated",
    "start": "1180610",
    "end": "1188730"
  },
  {
    "text": "with the fine-grained locks. And it takes you four-processors\nworth of capability",
    "start": "1188730",
    "end": "1197820"
  },
  {
    "text": "in order to overcome\nthe overheads of the fine-grained locks. So this is not so great.",
    "start": "1197820",
    "end": "1204580"
  },
  {
    "text": "It does scale, but\nthere's a lot of overhead that you have to overcome. So the question is,\ncould you do better?",
    "start": "1204580",
    "end": "1212100"
  },
  {
    "text": "And so with an\natomic construct, you",
    "start": "1212100",
    "end": "1217530"
  },
  {
    "text": "would just use atomic\nand say that you",
    "start": "1217530",
    "end": "1223530"
  },
  {
    "text": "want the method to be atomic.",
    "start": "1223530",
    "end": "1228780"
  },
  {
    "text": " So there's-- Huh.",
    "start": "1228780",
    "end": "1241790"
  },
  {
    "text": " Seem to be missing-- ",
    "start": "1241790",
    "end": "1252590"
  },
  {
    "text": "ah, it's coming\nlater, coming later. All right. So the idea is\nthat with atomic--",
    "start": "1252590",
    "end": "1259105"
  },
  {
    "start": "1259105",
    "end": "1265169"
  },
  {
    "text": "I just specify that the\nwhole HashMap is operation",
    "start": "1265170",
    "end": "1270390"
  },
  {
    "text": "is going to be atomic. So now it's good in\nthat it's thread safe.",
    "start": "1270390",
    "end": "1277890"
  },
  {
    "text": "It's just as easy as kind\nof locking the whole method with synchronized.",
    "start": "1277890",
    "end": "1284230"
  },
  {
    "text": "And the question is, will\nI get good performance? So let's look at the performance\nof a transactional system",
    "start": "1284230",
    "end": "1292980"
  },
  {
    "text": "in the context of a tree\nupdate by two threads. So in this case,\nwe've got a tree,",
    "start": "1292980",
    "end": "1299910"
  },
  {
    "text": "and we want to modify nodes\n3 and 4 in a thread-safe way.",
    "start": "1299910",
    "end": "1307170"
  },
  {
    "text": "And so let's assume\nthat we're going to use fine-grained locking. So we're going to do some\nhand-over-hand locking.",
    "start": "1307170",
    "end": "1313480"
  },
  {
    "text": "And so we need to lock\nthe path to node 3. ",
    "start": "1313480",
    "end": "1323049"
  },
  {
    "text": "So the red path is\nthe path to node 3. And the yellow path is the\npath from the root to node 4.",
    "start": "1323050",
    "end": "1334340"
  },
  {
    "text": "And since it goes\nthrough nodes 1 and 2, both paths go through\nnodes 1 and 2,",
    "start": "1334340",
    "end": "1341660"
  },
  {
    "text": "you potentially have a case\nwhere the update of node 3",
    "start": "1341660",
    "end": "1348190"
  },
  {
    "text": "delays the update of node 4. Does everybody see that?",
    "start": "1348190",
    "end": "1353940"
  },
  {
    "text": "OK. Now, the question is,\nshould there actually",
    "start": "1353940",
    "end": "1359559"
  },
  {
    "text": "be a case where we\ncan actually update",
    "start": "1359560",
    "end": "1366850"
  },
  {
    "text": "nodes 3 and 4 at the same time? They're independent, right? So potentially, we should\nbe able to do this.",
    "start": "1366850",
    "end": "1373399"
  },
  {
    "text": "And so with transactions, you\ncan actually make that happen. So the way to think\nabout transactions then",
    "start": "1373400",
    "end": "1380590"
  },
  {
    "text": "is that there's\nsome state that you read during the transaction,\ncalled the read state,",
    "start": "1380590",
    "end": "1387740"
  },
  {
    "text": "and the state that you write\nduring the transaction, called the write state. So the read state\nfor transaction a",
    "start": "1387740",
    "end": "1395180"
  },
  {
    "text": "is nodes 1, 2, and 3. And what's the write state?",
    "start": "1395180",
    "end": "1400825"
  },
  {
    "text": " 3. So 3 is the write state.",
    "start": "1400825",
    "end": "1407139"
  },
  {
    "text": "And then for transaction B,\nwhich is going to update node 4,",
    "start": "1407140",
    "end": "1413920"
  },
  {
    "text": "the read state is 1, 2, and\n4, and the write state is 4. And so what we're\ntrying to figure out",
    "start": "1413920",
    "end": "1423430"
  },
  {
    "text": "is whether the\ntransactions conflict. And they will\nconflict if there is",
    "start": "1423430",
    "end": "1429640"
  },
  {
    "text": "an intersection between the read\nand the write states of the two transactions. And so in this case,\nthere is no intersection.",
    "start": "1429640",
    "end": "1438320"
  },
  {
    "text": "And also, in that case,\nthere's no intersection. And so there's no read-write\nor write-write conflict.",
    "start": "1438320",
    "end": "1446179"
  },
  {
    "text": "And so these transactions can\nboth operate concurrently,",
    "start": "1446180",
    "end": "1451420"
  },
  {
    "text": "and they do not conflict. Yes? I think-- going back to what I\nwas trying to ask earlier was--",
    "start": "1451420",
    "end": "1457240"
  },
  {
    "text": "in this case, there's\nof course, no conflict. But in a case where two parallel\nthreads or whatever are writing",
    "start": "1457240",
    "end": "1464840"
  },
  {
    "text": "to transaction A and B and\nthey're both writing to 3, what would the behavior\nof the transaction in that case, given that\nthere would be a conflict?",
    "start": "1464840",
    "end": "1472100"
  },
  {
    "text": "OK, what do you\nthink it should be?  I guess one of them is given\npriority over the other.",
    "start": "1472100",
    "end": "1481540"
  },
  {
    "text": "Right. You've got to serialize those\ntransactions because there would be a conflict if you didn't.",
    "start": "1481540",
    "end": "1487170"
  },
  {
    "text": "So does the other\none get flushed, or does it still end up writing? Well, it's eventually\ngot to execute, right?",
    "start": "1487170",
    "end": "1494842"
  },
  {
    "text": "And the question is how\nwe manage the operation",
    "start": "1494842",
    "end": "1501060"
  },
  {
    "text": "of the transactions. We're going to get to that. But from the point of\nview of the abstraction,",
    "start": "1501060",
    "end": "1508389"
  },
  {
    "text": "those transactions\nwill be serialized. ",
    "start": "1508390",
    "end": "1514825"
  },
  {
    "text": "OK. So in this case, there is\nno read-write or write-write conflict.",
    "start": "1514826",
    "end": "1520690"
  },
  {
    "text": "But in the case that\nyou've just brought up, both the transactions are\ntrying to update node 3.",
    "start": "1520690",
    "end": "1529010"
  },
  {
    "text": "Now there is a conflict. And so we need to\nserialize them. ",
    "start": "1529010",
    "end": "1535060"
  },
  {
    "text": "OK, so this is the\ngraph that I thought was going to come earlier. But we're just showing that,\nOK, now you have transactions.",
    "start": "1535060",
    "end": "1543400"
  },
  {
    "text": "With the right\nsupport, you're going to get good performance\nas good as fine-grained",
    "start": "1543400",
    "end": "1549160"
  },
  {
    "text": "locking with transactions. That's the yellow\nline which is labeled",
    "start": "1549160",
    "end": "1555910"
  },
  {
    "text": "TCC, which is a transactional\nmemory system that has hardware support. And that also, even in the\ncase where you didn't do well",
    "start": "1555910",
    "end": "1565870"
  },
  {
    "text": "with fine-grained locks, you'll\ndo well with transactions-- again, with the right\nsort of hardware support.",
    "start": "1565870",
    "end": "1571580"
  },
  {
    "text": "So this is the motivation\nfor transactions, the idea that you can get\nan easy-to-use programming",
    "start": "1571580",
    "end": "1579309"
  },
  {
    "text": "model coupled with\nhigh performance because you get the\nperformance benefit",
    "start": "1579310",
    "end": "1589030"
  },
  {
    "text": "of fine-grained concurrency. So transactions will\nonly be serialized",
    "start": "1589030",
    "end": "1595850"
  },
  {
    "text": "when there are conflicts. Yeah? Just to confirm-- the job\nof figuring out what data is",
    "start": "1595850",
    "end": "1601225"
  },
  {
    "text": "in the read statement and\nwhat's in the write statement-- We're going to get to that. This is just the abstraction.",
    "start": "1601225",
    "end": "1606617"
  },
  {
    "text": "We're going to talk about\nthe details, believe me. [LAUGHS] Hold on. It's coming.",
    "start": "1606617",
    "end": "1612860"
  },
  {
    "text": "All right. So back to the\nabstraction here-- so we've got this\ndoubly-linked list.",
    "start": "1612860",
    "end": "1621210"
  },
  {
    "text": "And we've got this\nPushLeft method, and we want to make it thread\nsafe with transactions.",
    "start": "1621210",
    "end": "1629690"
  },
  {
    "text": "So the question is,\nhow should we do that? So I'll give you a couple of\nminutes to look at the code.",
    "start": "1629690",
    "end": "1635000"
  },
  {
    "text": "And you can consult\nwith your neighbor. And then we'll\nask for a solution",
    "start": "1635000",
    "end": "1642500"
  },
  {
    "text": "for how we make this code\nthread safe with transactions. ",
    "start": "1642500",
    "end": "1654720"
  },
  {
    "text": "[INTERPOSING VOICES] ",
    "start": "1654720",
    "end": "1660198"
  },
  {
    "text": "If somebody has a\nsolution, let me know. ",
    "start": "1660198",
    "end": "1666100"
  },
  {
    "text": "Yeah? You need to do atomic\non all the lines below the qn val equals val.",
    "start": "1666100",
    "end": "1672060"
  },
  {
    "text": "That's correct. So just make all\nof the operations",
    "start": "1672060",
    "end": "1677800"
  },
  {
    "text": "on the variables associated\nwith the doubly-linked atomic. And then you go--",
    "start": "1677800",
    "end": "1684400"
  },
  {
    "text": "none of the tricky\nhand-over-hand locking and figuring out what's what. You just say, hey, I want\nall this stuff to be atomic,",
    "start": "1684400",
    "end": "1692830"
  },
  {
    "text": "and, system, make sure\nthat you do as you're told. ",
    "start": "1692830",
    "end": "1700260"
  },
  {
    "text": "OK. So everybody get that, the idea\nthat it's fundamentally easier",
    "start": "1700260",
    "end": "1706240"
  },
  {
    "text": "to program with transactions? Another benefit of\ntransactions is what happens when failure occurs.",
    "start": "1706240",
    "end": "1713420"
  },
  {
    "text": "So how do you deal\nwith failure atomicity? In the case of\nlocking, you've got",
    "start": "1713420",
    "end": "1718840"
  },
  {
    "text": "to remember to, in\nyour exception handler, release any locks\nthat you've acquired",
    "start": "1718840",
    "end": "1725070"
  },
  {
    "text": "and clean up things\nin the right way and restore memory or\nthe state of the system",
    "start": "1725070",
    "end": "1730670"
  },
  {
    "text": "to the way it was before\nthe method executed.",
    "start": "1730670",
    "end": "1735950"
  },
  {
    "text": "And this is much easier\nwith transactions. Because essentially, when\nyou abort an a transaction,",
    "start": "1735950",
    "end": "1743430"
  },
  {
    "text": "it's like a big undo. So you get the\nstate of the system",
    "start": "1743430",
    "end": "1748789"
  },
  {
    "text": "back to the point\nat which you started executing the transaction. Great.",
    "start": "1748790",
    "end": "1754260"
  },
  {
    "text": "You don't have to worry about\nfiguring out what state you need to put back. You don't have to worry\nabout releasing any locks",
    "start": "1754260",
    "end": "1761630"
  },
  {
    "text": "that you've acquired. And so it's a very\nclean and easy way of recovering from exceptions.",
    "start": "1761630",
    "end": "1770420"
  },
  {
    "text": "So failure atomicity\nwith instructions-- so if you're trying to do\na transfer and it fails,",
    "start": "1770420",
    "end": "1786660"
  },
  {
    "text": "the transactional memory system\nwill guarantee that any memory",
    "start": "1786660",
    "end": "1793400"
  },
  {
    "text": "updates are undone\nand you don't have any",
    "start": "1793400",
    "end": "1798980"
  },
  {
    "text": "locks that you have acquired\nthat are lying around,",
    "start": "1798980",
    "end": "1804980"
  },
  {
    "text": "potentially causing deadlock. A really important idea\nin software development",
    "start": "1804980",
    "end": "1817520"
  },
  {
    "text": "is the idea that you should\ncompose smaller modules together",
    "start": "1817520",
    "end": "1823040"
  },
  {
    "text": "to build bigger, more\ncomplex software systems. And so you want\ncomposability in your system",
    "start": "1823040",
    "end": "1831110"
  },
  {
    "text": "in order to make sure that\nyou can build complex software",
    "start": "1831110",
    "end": "1836780"
  },
  {
    "text": "from simple components. But the problem is that\nwith locks, this idea",
    "start": "1836780",
    "end": "1843500"
  },
  {
    "text": "of composability breaks down. Look at this example. So we want to do a transfer\nfrom account A to account B.",
    "start": "1843500",
    "end": "1854630"
  },
  {
    "text": "And so what we're\ngoing to do is we're going to use a nested\nsynchronized in which we,",
    "start": "1854630",
    "end": "1868179"
  },
  {
    "text": "essentially, take a lock on\naccount A, followed by a lock on account B.",
    "start": "1868180",
    "end": "1873420"
  },
  {
    "text": "So this is fine. So if we call transfer\nfrom A to B on thread 0",
    "start": "1873420",
    "end": "1879260"
  },
  {
    "text": "and transfer from B to A\non thread 1, what happens?",
    "start": "1879260",
    "end": "1885410"
  },
  {
    "text": "Well, we get deadlock. Thread 1 first gets a lock on A,\nand thread 2 gets a lock on B.",
    "start": "1885410",
    "end": "1894950"
  },
  {
    "text": "And now we're in a deadlock,\nthe deadly embrace situation. So how do we fix this?",
    "start": "1894950",
    "end": "1901290"
  },
  {
    "text": "So what's the solution\nto not having deadlock in this situation? ",
    "start": "1901290",
    "end": "1909610"
  },
  {
    "text": "Yeah? Transactional memory. That's one solution. What if I don't give you\ntransactional memory?",
    "start": "1909610",
    "end": "1915100"
  },
  {
    "text": "I only give you locks. Yeah? Can you synchronize\nA [INAUDIBLE],",
    "start": "1915100",
    "end": "1921409"
  },
  {
    "text": "then synchronize B [INAUDIBLE]? ",
    "start": "1921410",
    "end": "1927650"
  },
  {
    "text": "Synchronized A-- no, but you\nwant this to be atomic, right? Yeah? You always have to\nsynchronize in the same order.",
    "start": "1927650",
    "end": "1934260"
  },
  {
    "text": "Right. So you need to order\nthe lock acquisition by some global order.",
    "start": "1934260",
    "end": "1941490"
  },
  {
    "text": "So maybe you could\nalways synchronize a lower-numbered lock before\na higher-numbered lock.",
    "start": "1941490",
    "end": "1949490"
  },
  {
    "text": "So you need some\nglobal mechanism. But this global mechanism\nbreaks composability",
    "start": "1949490",
    "end": "1956750"
  },
  {
    "text": "because now you need\nto know globally what to do in order to\ncompose these simpler",
    "start": "1956750",
    "end": "1962210"
  },
  {
    "text": "components together. And so this system-wide policy\nbreaks software modularity.",
    "start": "1962210",
    "end": "1972080"
  },
  {
    "text": "And so what you want\nthen is transactions. So you want to wrap an atomic\naround the withdraw and deposit.",
    "start": "1972080",
    "end": "1981460"
  },
  {
    "text": "But, as we've\nalready seen, there are atomics inside withdraw\nand inside deposit.",
    "start": "1981460",
    "end": "1988269"
  },
  {
    "text": "And so now you've\ngot nested atomics. But how should\nnested atomics work?",
    "start": "1988270",
    "end": "1994779"
  },
  {
    "text": "If I told you nested\natomics, what would you assume about the outer atomic?",
    "start": "1994780",
    "end": "1999935"
  },
  {
    "text": " Yeah? [INAUDIBLE] what\nthread [INAUDIBLE]?",
    "start": "1999935",
    "end": "2008660"
  },
  {
    "text": "Can you be more explicit? You're not going to be-- if you\nhave an outer atomic [INAUDIBLE]",
    "start": "2008660",
    "end": "2014120"
  },
  {
    "text": "going to be multiple\npeople looking inside that. Right. It subsumes what happens\nin the inner atomics.",
    "start": "2014120",
    "end": "2020070"
  },
  {
    "text": "So the outer atomic\ntakes precedence, and you assume that everything\nwithin the outer atomic",
    "start": "2020070",
    "end": "2025130"
  },
  {
    "text": "is going to be atomic. Good. All right. So now you declare your\nintent with this atomic,",
    "start": "2025130",
    "end": "2036480"
  },
  {
    "text": "and then the system\nwill implement things and manage concurrency.",
    "start": "2036480",
    "end": "2042180"
  },
  {
    "text": "And if it turns out that\nyou have no concurrency, as in this first transfer\nbetween accounts A and B,",
    "start": "2042180",
    "end": "2050570"
  },
  {
    "text": "then the atomic regions\nwill be serialized. But in the second\nexample, where we're",
    "start": "2050570",
    "end": "2058760"
  },
  {
    "text": "transferring between A\nand B in one transfer and account C and D in\nthe second transfer,",
    "start": "2058760",
    "end": "2067210"
  },
  {
    "text": "now we get concurrency. And the system should allow\nthat and provide the performance",
    "start": "2067210",
    "end": "2072260"
  },
  {
    "text": "benefit. Yeah? Just to clarify, for the\nsecond example of concurrency, you wouldn't put it\nin an atomic, right?",
    "start": "2072260",
    "end": "2078388"
  },
  {
    "text": "Because if you put it in-- Why would you not want\nto put it in atomic? Because, like you just said, if\nyou have a larger-scale atomic,",
    "start": "2078389",
    "end": "2085388"
  },
  {
    "text": "only one thing can happen\nat a time [INAUDIBLE] or-- No, no, no. Go back to the\nexample of the tree.",
    "start": "2085389",
    "end": "2092554"
  },
  {
    "text": "Oh, I see. In this case, is\nthere a conflict between this transaction\nand this transaction?",
    "start": "2092554",
    "end": "2099340"
  },
  {
    "text": "No. No conflict. Therefore, they should be\nable to run concurrently.",
    "start": "2099340",
    "end": "2104470"
  },
  {
    "text": "And that's regardless of if\nwe specified atomic or not. No. You are inside a transaction.",
    "start": "2104470",
    "end": "2109642"
  },
  {
    "text": "Both of them are inside--\nthere are two transactions. They're executing\nat the same time.",
    "start": "2109642",
    "end": "2115380"
  },
  {
    "text": "They're executing\nat the same time. And the question is,\ndo they conflict?",
    "start": "2115380",
    "end": "2120740"
  },
  {
    "text": "Yes? Then we serialize them. No? Then they should get\nto run concurrently.",
    "start": "2120740",
    "end": "2127730"
  },
  {
    "text": "So in this case, we serialize\nthe two transactions--",
    "start": "2127730",
    "end": "2132859"
  },
  {
    "text": "or the two transfers\nin this example. And in this case, we allow\nthem to run concurrently.",
    "start": "2132860",
    "end": "2140715"
  },
  {
    "text": "It's important\nthat you get that.  Thank you. Other questions?",
    "start": "2140715",
    "end": "2146520"
  },
  {
    "text": " All right. So that's the key\nbenefit of transactions,",
    "start": "2146520",
    "end": "2154310"
  },
  {
    "text": "is the fact that you do\nallow this concurrency if there are no conflicts.",
    "start": "2154310",
    "end": "2160420"
  },
  {
    "text": "All right. So just to recap now then-- about transactional memory and\nwhy we want to use a construct--",
    "start": "2160420",
    "end": "2173049"
  },
  {
    "text": "so, first of all, we've\ngot this notion of-- it's an easy-to-use\nsynchronization construct.",
    "start": "2173050",
    "end": "2179930"
  },
  {
    "text": "So we said it's\ndifficult for programmers to get synchronization right.",
    "start": "2179930",
    "end": "2185089"
  },
  {
    "text": "You're stuck between\noptimizing performance with fine-grained locking\nor getting correctness",
    "start": "2185090",
    "end": "2191950"
  },
  {
    "text": "with coarse-grained locking. And so the idea is\nthat transactions are as easy to use as\ncoarse-grained locks",
    "start": "2191950",
    "end": "2199580"
  },
  {
    "text": "but potentially could\ngive you the performance of fine-grained locking. And so the idea is, instead\nof you, the programmer,",
    "start": "2199580",
    "end": "2210360"
  },
  {
    "text": "having to worry about\nhow to implement the details of a fine-grained\nlocking scheme on a complex data",
    "start": "2210360",
    "end": "2217610"
  },
  {
    "text": "structure, such as a tree\nor a doubly-linked list, you let the system\ndo the work for you",
    "start": "2217610",
    "end": "2224390"
  },
  {
    "text": "and give you high performance. And then this notion of failure\natomicity and recovery--",
    "start": "2224390",
    "end": "2230270"
  },
  {
    "text": "this idea that you\ncan recover simply by aborting the transaction\nand letting the system recover",
    "start": "2230270",
    "end": "2237710"
  },
  {
    "text": "the data and not have\nto worry about releasing locks that you've acquired.",
    "start": "2237710",
    "end": "2243630"
  },
  {
    "text": "And lastly, a very\nimportant point is the fact that\ntransactions compose.",
    "start": "2243630",
    "end": "2250799"
  },
  {
    "text": "And so you can compose simpler\nmodular components together to form more complex\nsoftware systems",
    "start": "2250800",
    "end": "2258260"
  },
  {
    "text": "and not have to worry about\na global locking scheme. Yeah? Well, why is it that you can\nonly obtain most of the benefit?",
    "start": "2258260",
    "end": "2265200"
  },
  {
    "text": "Is this not optimal? Well, the question is that--",
    "start": "2265200",
    "end": "2270250"
  },
  {
    "text": "in certain cases, you\nmay know something",
    "start": "2270250",
    "end": "2277570"
  },
  {
    "text": "about the data structure,\nwhich means that by just looking at the\nread and write state,",
    "start": "2277570",
    "end": "2284599"
  },
  {
    "text": "you could do something\na little more optimized. And that's because\nyou know something about the data structure.",
    "start": "2284600",
    "end": "2290680"
  },
  {
    "text": "So if I just look at\nread and write state, I might say that these\nthings can conflict. But you may know that\nsomething else that says,",
    "start": "2290680",
    "end": "2298010"
  },
  {
    "text": "hey, they really don't\nconflict and, in fact, you could get concurrency here. ",
    "start": "2298010",
    "end": "2306140"
  },
  {
    "text": "Yeah, it's usually\nextra knowledge that you bring to the\nimplementation that",
    "start": "2306140",
    "end": "2311359"
  },
  {
    "text": "would allow you to\ndo better in the case of a pure transactional\nmemory system. Yeah?",
    "start": "2311360",
    "end": "2317420"
  },
  {
    "text": "Wouldn't fine-grained locks also\njust be better in some cases? Like, if you put\natomic on something,",
    "start": "2317420",
    "end": "2323869"
  },
  {
    "text": "they're always going to\nhave to be serialized. But the fine-grained lock,\nwould part of that actually",
    "start": "2323870",
    "end": "2330290"
  },
  {
    "text": "be concurrent? Yeah, maybe. Yeah. Again, you might be able\nto get finer granularity",
    "start": "2330290",
    "end": "2336530"
  },
  {
    "text": "than you can with a transaction. Yeah. ",
    "start": "2336530",
    "end": "2344390"
  },
  {
    "text": "OK. So it's important to\nunderstand that of there is this difference between\natomic and locking.",
    "start": "2344390",
    "end": "2354390"
  },
  {
    "text": "They're not the same. So atomic, again, is this\ndeclarative construct saying,",
    "start": "2354390",
    "end": "2360620"
  },
  {
    "text": "here is the behavior I\nexpect of the atomic region. And locks are a way of\nimplementing synchronization.",
    "start": "2360620",
    "end": "2367560"
  },
  {
    "text": "And locks can be used for\npurposes beyond atomicity.",
    "start": "2367560",
    "end": "2372590"
  },
  {
    "text": "And just because you\nhave atomic doesn't mean that all your\nproblems are solved. You could still use\natomic incorrectly.",
    "start": "2372590",
    "end": "2380220"
  },
  {
    "text": "And these are called\natomicity violations. And in certain cases,\natomic simply won't work.",
    "start": "2380220",
    "end": "2388710"
  },
  {
    "text": "So here's an example. So what about replacing\nsynchronized with atomic",
    "start": "2388710",
    "end": "2394130"
  },
  {
    "text": "in this example? Will this work? ",
    "start": "2394130",
    "end": "2404330"
  },
  {
    "text": "So I replace\nsynchronized with atomic.",
    "start": "2404330",
    "end": "2413040"
  },
  {
    "text": " It conflicts, right?",
    "start": "2413040",
    "end": "2418890"
  },
  {
    "text": "[INAUDIBLE]? Yeah, go ahead. Oh, sorry. No, yeah, that's fine. [INAUDIBLE] will be\nserialized, but one",
    "start": "2418890",
    "end": "2425850"
  },
  {
    "text": "has an infinite loop that's\nwaiting for the variable to change. Yeah. Fundamentally, what are\nthe semantics of atomic?",
    "start": "2425850",
    "end": "2436430"
  },
  {
    "start": "2436430",
    "end": "2445500"
  },
  {
    "text": "If there are conflicts, it's\ngoing to see the flagging. Like, [INAUDIBLE] here, then--",
    "start": "2445500",
    "end": "2451020"
  },
  {
    "text": "If I gave you this code-- and given that I've told you\nabout the semantics of atomic,",
    "start": "2451020",
    "end": "2457049"
  },
  {
    "text": "what would you expect to happen? Yeah? The two blocks need\nto be scheduled",
    "start": "2457050",
    "end": "2462870"
  },
  {
    "text": "in a serializable manner. And this code relies\non the flag set",
    "start": "2462870",
    "end": "2468720"
  },
  {
    "text": "being [? interleaved ?] between\nthe other thread's flag set and the while loop, right? So if I ran this code,\nwhat would happen?",
    "start": "2468720",
    "end": "2476830"
  },
  {
    "text": "Stall the system. Or a live lock, right? [LAUGHS] Yeah, this would\nbe an infinite loop.",
    "start": "2476830",
    "end": "2485265"
  },
  {
    "text": "Why? ",
    "start": "2485265",
    "end": "2490599"
  },
  {
    "text": "[INAUDIBLE] What do we know about\nthe semantics of atomic?",
    "start": "2490600",
    "end": "2496020"
  },
  {
    "text": "Everything within that block\nhas to happen all at once with respect to-- in our server.",
    "start": "2496020",
    "end": "2501819"
  },
  {
    "text": "So atomic, atomicity--\nwhat's the second one? ",
    "start": "2501820",
    "end": "2507570"
  },
  {
    "text": "What's the second\nproperty we talked about? Atomicity-- Isolation. Isolation.",
    "start": "2507570",
    "end": "2513250"
  },
  {
    "text": "So what does isolation say? Yeah, it says that we\ncan't observe the writes.",
    "start": "2513250",
    "end": "2518530"
  },
  {
    "text": "We can't observe the writes. So we will never\nsee anything that comes out of this transaction\nbefore it commits--",
    "start": "2518530",
    "end": "2523609"
  },
  {
    "text": " and the same for\nthis transaction.",
    "start": "2523610",
    "end": "2530170"
  },
  {
    "text": "Therefore, we're not going\nto get any forward progress with this code. ",
    "start": "2530170",
    "end": "2537040"
  },
  {
    "text": "OK. So this is a case where\nreplacing synchronized with atomic won't work.",
    "start": "2537040",
    "end": "2543890"
  },
  {
    "text": "What's wrong with this code? ",
    "start": "2543890",
    "end": "2557190"
  },
  {
    "text": "Yeah? You don't know\nthe order in which the three atomics will run.",
    "start": "2557190",
    "end": "2562600"
  },
  {
    "text": "And so if the pointer gets\nset to null after pointer set to A, then the last atomic will\nnot behave [INAUDIBLE] A, B or--",
    "start": "2562600",
    "end": "2573510"
  },
  {
    "start": "2573510",
    "end": "2579650"
  },
  {
    "text": "So what might happen? [INAUDIBLE] null\npointer [INAUDIBLE]. I may dereference\na null pointer.",
    "start": "2579650",
    "end": "2586040"
  },
  {
    "text": "And how would I fix it? I think one should\njust be one atomic. Right.",
    "start": "2586040",
    "end": "2591400"
  },
  {
    "text": "So we wanted to get\nrid of that, right? So this is known as an\natomicity violation.",
    "start": "2591400",
    "end": "2598920"
  },
  {
    "text": "It's when you put atomic\naround the wrong set of code,",
    "start": "2598920",
    "end": "2603950"
  },
  {
    "text": "and therefore, your atomicity\nbehavior is incorrect.",
    "start": "2603950",
    "end": "2612030"
  },
  {
    "text": " All right.",
    "start": "2612030",
    "end": "2618400"
  },
  {
    "text": "[LAUGHS] So any questions\nabout the abstraction",
    "start": "2618400",
    "end": "2625869"
  },
  {
    "text": "of transactional memory\nand why it's useful? OK, let's talk about the fun\nstuff, the implementation",
    "start": "2625870",
    "end": "2634869"
  },
  {
    "text": "of transactional memory. How do we actually make\nthis abstraction work?",
    "start": "2634870",
    "end": "2642171"
  },
  {
    "text": "So we got to talk\nabout the three",
    "start": "2642171",
    "end": "2648220"
  },
  {
    "text": "components of the abstraction,\nthe atomicity-- all or nothing-- isolation, which we just talked\nabout, and serializability.",
    "start": "2648220",
    "end": "2656490"
  },
  {
    "text": "And so these are the properties\nthat an implementation of transactional\nmemory has to provide.",
    "start": "2656490",
    "end": "2665660"
  },
  {
    "text": "And it has to provide these\nthings while giving you as much concurrency as possible.",
    "start": "2665660",
    "end": "2671319"
  },
  {
    "text": "So that's the goal. And in thinking about a\nset of transactional memory",
    "start": "2671320",
    "end": "2680260"
  },
  {
    "text": "implementations, there's\nan implementation space that is defined by how\nyou deal with they're",
    "start": "2680260",
    "end": "2688780"
  },
  {
    "text": "transactional memory state,\nwhich is called data versioning. So how you deal with\nthe uncommitted state--",
    "start": "2688780",
    "end": "2695650"
  },
  {
    "text": "that a transaction\nhasn't committed yet-- and the committed state, that\na transaction that's previously",
    "start": "2695650",
    "end": "2702730"
  },
  {
    "text": "committed has already updated. So that's the\ndata-versioning policy. And the second component\nof transactional memory",
    "start": "2702730",
    "end": "2710440"
  },
  {
    "text": "implementation is how we detect\nconflicts, when and how we",
    "start": "2710440",
    "end": "2717760"
  },
  {
    "text": "detect conflicts. And this is called the\ntransaction conflict detection",
    "start": "2717760",
    "end": "2723340"
  },
  {
    "text": "policy. So data-versioning policy and\nconflict-detection policy--",
    "start": "2723340",
    "end": "2728870"
  },
  {
    "text": "so let's start by talking\nabout data versioning.",
    "start": "2728870",
    "end": "2733990"
  },
  {
    "text": "So this is how we manage the\nstate that hasn't been committed",
    "start": "2733990",
    "end": "2739180"
  },
  {
    "text": "yet by the transaction and\nthe state that has already been committed by previously\ncompleted transactions.",
    "start": "2739180",
    "end": "2746089"
  },
  {
    "text": "There are two ways\nof managing data.",
    "start": "2746090",
    "end": "2752690"
  },
  {
    "text": "One is called eager\nversioning and requires",
    "start": "2752690",
    "end": "2759760"
  },
  {
    "text": "the component of a undo log.",
    "start": "2759760",
    "end": "2765260"
  },
  {
    "text": "And the second way\nis lazy versioning, where we have a write buffer as\nthe key element in the system.",
    "start": "2765260",
    "end": "2775059"
  },
  {
    "text": "So let's look at these two\nkinds of doing data versioning.",
    "start": "2775060",
    "end": "2780610"
  },
  {
    "text": "First, eager versioning--\nit's called eager because you update memory\nas early as possible.",
    "start": "2780610",
    "end": "2786950"
  },
  {
    "text": "The memory in this case\ncould be the cache. And as we said, the key element\nof the eager versioning scheme",
    "start": "2786950",
    "end": "2795760"
  },
  {
    "text": "is an undo log because\nwe need some way of undoing the data updates that\nwe've made in an eager manner.",
    "start": "2795760",
    "end": "2804390"
  },
  {
    "text": "So in this example,\nwe're going to have a single variable, x, that we\nare updating in the transaction.",
    "start": "2804390",
    "end": "2813410"
  },
  {
    "text": "And x initially has a\nvalue of 10 in memory. And the transaction is\ngoing to write 15 to x.",
    "start": "2813410",
    "end": "2822000"
  },
  {
    "text": "And so what we do then\nis we put the old value",
    "start": "2822000",
    "end": "2827060"
  },
  {
    "text": "of x into the undo log. So x-- value of 10\ngoes into the undo log.",
    "start": "2827060",
    "end": "2835430"
  },
  {
    "text": "And we eagerly update memory. So memory becomes 15.",
    "start": "2835430",
    "end": "2842240"
  },
  {
    "text": "This is good because now\nmemory is up to date, and that is always good.",
    "start": "2842240",
    "end": "2848368"
  },
  {
    "text": "Now, what happens when we\ncommit the transaction? What should we do? ",
    "start": "2848368",
    "end": "2856748"
  },
  {
    "text": "Clear the log. Yeah. Throw away the undo log.",
    "start": "2856748",
    "end": "2862000"
  },
  {
    "text": "We're done. Transaction's committed. Memory's up to date.",
    "start": "2862000",
    "end": "2867070"
  },
  {
    "text": "We're done. All right. What happens when we\nabort the transaction?",
    "start": "2867070",
    "end": "2874760"
  },
  {
    "text": "Now we need to restore\nmemory to the state before the transaction executed.",
    "start": "2874760",
    "end": "2881880"
  },
  {
    "text": "And so now this becomes a--",
    "start": "2881880",
    "end": "2887869"
  },
  {
    "text": "we need to apply the\nundo log to that, and we get memory back\nto its original state.",
    "start": "2887870",
    "end": "2895040"
  },
  {
    "text": "Yeah? Is this [INAUDIBLE]\ncaching, because then, do we have to put\nthe log somewhere? Yeah, yeah, yeah, yeah.",
    "start": "2895040",
    "end": "2901490"
  },
  {
    "text": "We're getting\nthere-- [LAUGHS] has all sorts of impacts on the\nimplementation of what you do.",
    "start": "2901490",
    "end": "2907857"
  },
  {
    "text": "And we're going to talk about\nboth hardware and software ways of managing this.",
    "start": "2907857",
    "end": "2913970"
  },
  {
    "text": "So you have this undo log. And we restore\nmemory to the state",
    "start": "2913970",
    "end": "2923240"
  },
  {
    "text": "that it was before we\nstarted the execution of the transaction. OK, so that's eager.",
    "start": "2923240",
    "end": "2929070"
  },
  {
    "text": "Yeah, question? When you transaction\nsupport [INAUDIBLE], is this for an\nerror or a conflict?",
    "start": "2929070",
    "end": "2934540"
  },
  {
    "text": "Well, you can abort for a--\nyou just pull the abort cord, and you can bail out of a\ntransaction whenever you want.",
    "start": "2934540",
    "end": "2941730"
  },
  {
    "text": "And you know that none of\nthe state of the memory is being changed. It's great, right?",
    "start": "2941730",
    "end": "2947490"
  },
  {
    "text": "But the other reason\nthat you might want to abort a transaction is\nbecause you detected a conflict.",
    "start": "2947490",
    "end": "2953280"
  },
  {
    "text": "Yeah? So you just do the transactions. And if there's a conflict, you\nundo and then do them later?",
    "start": "2953280",
    "end": "2960490"
  },
  {
    "text": "Well, the system\nhas to determine when to-- you usually just\nrestart the transaction.",
    "start": "2960490",
    "end": "2968340"
  },
  {
    "text": "You try again. Yeah? If your undo log is a certain\nsize, that kind of tells you",
    "start": "2968340",
    "end": "2974530"
  },
  {
    "text": "how much memory you\ncan [INAUDIBLE], right? Yeah, so depends where\nyou keep the undo log. So you could have an explicit\ncache for the undo log,",
    "start": "2974530",
    "end": "2982300"
  },
  {
    "text": "or you could just put\nit in regular memory-- and depending on whether you've\ngot specific hardware mechanisms",
    "start": "2982300",
    "end": "2989799"
  },
  {
    "text": "for handling it. Or you just put it in\nmemory, which would be the most scalable mechanism. You put it in memory,\nand you have a cache and",
    "start": "2989800",
    "end": "2995180"
  },
  {
    "text": "[? exception. ?] Right, right. So you assume that there's\nlocality in all your accesses. And caches work for memory\nthat you access here too.",
    "start": "2995180",
    "end": "3003780"
  },
  {
    "text": "Yeah. Yeah? Is it right to say that all the\ntransactions start concurrently",
    "start": "3003780",
    "end": "3008790"
  },
  {
    "text": "and under the observer\nfor [INAUDIBLE]? Like, the atomic,\n[INAUDIBLE] they would abort some of\nthe transactions?",
    "start": "3008790",
    "end": "3014670"
  },
  {
    "text": "So we're getting\nto copy protection. So now we're just talking\nabout how you manage data. The next topic will be how we\ndetect conflicts and what we do.",
    "start": "3014670",
    "end": "3022690"
  },
  {
    "text": "Yeah? Just to confirm,\nin the undo log, are we only keeping the\nvalues in the memory",
    "start": "3022690",
    "end": "3028330"
  },
  {
    "text": "before the thread\nstarted executing? We're not keeping intermediate-- No, no. Remember, you need to\nget back to the state",
    "start": "3028330",
    "end": "3035140"
  },
  {
    "text": "before the transaction\nstarted executing. So we only need to keep the\nfirst time you write to it.",
    "start": "3035140",
    "end": "3041870"
  },
  {
    "text": "Any subsequent updates don't\nneed to be put in the undo log. Yeah?",
    "start": "3041870",
    "end": "3047549"
  },
  {
    "text": "What happens if the undo log\ngets corrupted or something goes",
    "start": "3047550",
    "end": "3053740"
  },
  {
    "text": "wrong with the undo log before\nthe transaction's complete? Well, then your\nsystem is corrupted.",
    "start": "3053740",
    "end": "3059852"
  },
  {
    "text": "So this would not be resistant\nto that kind of a crash? Well, corrupted how?",
    "start": "3059852",
    "end": "3065780"
  },
  {
    "text": "you need some other mechanism\nfor dealing with memory fault tolerance if that was a problem,\nif it's a problem that you",
    "start": "3065780",
    "end": "3072520"
  },
  {
    "text": "wanted to guard against. But let's assume for\nthe sake of simplicity",
    "start": "3072520",
    "end": "3078299"
  },
  {
    "text": "that our system is robust. ",
    "start": "3078300",
    "end": "3084918"
  },
  {
    "text": "All right, lazy\nversioning-- so everybody likes to be lazy, right?",
    "start": "3084918",
    "end": "3090710"
  },
  {
    "text": "And here, we have a write\nbuffer as the key mechanism.",
    "start": "3090710",
    "end": "3097790"
  },
  {
    "text": "And so, again, in this\nexample, we're writing to x. So instead of updating\nmemory directly,",
    "start": "3097790",
    "end": "3108780"
  },
  {
    "text": "we write into the write buffer. And that's why it's called lazy.",
    "start": "3108780",
    "end": "3114680"
  },
  {
    "text": "So now that we've done this,\nhave we created some complexity",
    "start": "3114680",
    "end": "3122510"
  },
  {
    "text": "to what happens to\nthe rest of the reads",
    "start": "3122510",
    "end": "3127820"
  },
  {
    "text": "to x in the transaction? You have dependency, don't you? Well, you may have\ndependencies, clearly.",
    "start": "3127820",
    "end": "3135260"
  },
  {
    "text": "And the question is, where\nshould subsequent values of x come from?",
    "start": "3135260",
    "end": "3142932"
  },
  {
    "text": "From the [INAUDIBLE]? Memory? No. [LAUGHS] It has to come from\nthe write buffer, right?",
    "start": "3142932",
    "end": "3149010"
  },
  {
    "text": "Write buffer is the\nmost recent value",
    "start": "3149010",
    "end": "3154180"
  },
  {
    "text": "of any variable that\nhas been written. And so now we potentially\nhave to check in two places.",
    "start": "3154180",
    "end": "3161950"
  },
  {
    "text": "So there is this\nextra complexity that occurs, depending on\nhow it gets implemented.",
    "start": "3161950",
    "end": "3167690"
  },
  {
    "text": "But that's something\nto keep in mind, that because we have an\neagerly-updated memory,",
    "start": "3167690",
    "end": "3174670"
  },
  {
    "text": "we now have two places\npotentially where data-- that we may have to look for\nthe latest value of data.",
    "start": "3174670",
    "end": "3185920"
  },
  {
    "text": "As opposed to the undo log--\nyou never look in the undo log. You only use the undo\nlog when you're trying",
    "start": "3185920",
    "end": "3191770"
  },
  {
    "text": "to fix an aborted transaction.",
    "start": "3191770",
    "end": "3198130"
  },
  {
    "text": "All right. So in the case of\ncommit, we now have",
    "start": "3198130",
    "end": "3205510"
  },
  {
    "text": "to update memory from the write\nbuffer and then, of course, clear the write buffer.",
    "start": "3205510",
    "end": "3211900"
  },
  {
    "text": "What do we do in\nthe case of abort? Just throw it away. You just throw it away. We just throw away\nthe write buffer.",
    "start": "3211900",
    "end": "3219290"
  },
  {
    "text": "We haven't changed\nmemory, so we're good. All right. Everybody understands\nthe difference",
    "start": "3219290",
    "end": "3225130"
  },
  {
    "text": "between being lazy\nand being eager? So now let's talk about the\ntrade-offs between the two.",
    "start": "3225130",
    "end": "3233600"
  },
  {
    "text": "So in the case of\neager versioning, we update memory\ndirectly, which is good.",
    "start": "3233600",
    "end": "3242859"
  },
  {
    "text": "And we maintain this undo log. So we get faster commits. The data is already\nin memory, and we only",
    "start": "3242860",
    "end": "3249310"
  },
  {
    "text": "have to look in one place. But the problem is that\nwe have slower aborts.",
    "start": "3249310",
    "end": "3255040"
  },
  {
    "text": "And because we've\nupdated memory, managing fault\ntolerance is trickier",
    "start": "3255040",
    "end": "3261680"
  },
  {
    "text": "because now we've\ngot to figure out how to restore\nmemory in ways that",
    "start": "3261680",
    "end": "3268900"
  },
  {
    "text": "may not be completely obvious. ",
    "start": "3268900",
    "end": "3273970"
  },
  {
    "text": "Lazy versioning\nuses a write buffer. We potentially now have multiple\nplaces that we need to check.",
    "start": "3273970",
    "end": "3281630"
  },
  {
    "text": "It gives you faster\naborts because you just throw away the write buffer. But commits are\nslower because you now",
    "start": "3281630",
    "end": "3288700"
  },
  {
    "text": "need to take the contents\nof the write buffer and apply that to memory.",
    "start": "3288700",
    "end": "3295840"
  },
  {
    "text": "So that's data versioning. So now let's talk about\nconflict detection. Yeah, question? I have a question\non data versioning.",
    "start": "3295840",
    "end": "3302290"
  },
  {
    "text": "Does the eager-versioning\nscheme make isolation",
    "start": "3302290",
    "end": "3309268"
  },
  {
    "text": "harder if there's\nanother thread also doing a transaction, which\nmay [INAUDIBLE] main memory [INAUDIBLE] much\nlater gets read?",
    "start": "3309268",
    "end": "3314950"
  },
  {
    "text": "Yes. Well, it potentially\nmakes isolation trickier,",
    "start": "3314950",
    "end": "3324369"
  },
  {
    "text": "depending on how you do\nconflict detection, which we'll get to next. ",
    "start": "3324370",
    "end": "3331143"
  },
  {
    "text": "Well, we'll get\nto that, and it'll be clear as to what's going on. Yeah? What [INAUDIBLE] when you have,\nlet's say, a eager atomics,",
    "start": "3331143",
    "end": "3340170"
  },
  {
    "text": "right? You're going to be accessing\nthe memory very often as opposed",
    "start": "3340170",
    "end": "3345190"
  },
  {
    "text": "to-- so the amount of memory\nutilization is higher. So there could be more\nconflicts in the buffer, right?",
    "start": "3345190",
    "end": "3351970"
  },
  {
    "text": "Isn't that a consideration when\nwe're making these decisions?",
    "start": "3351970",
    "end": "3357640"
  },
  {
    "text": "So the key elements\nof how you make",
    "start": "3357640",
    "end": "3363579"
  },
  {
    "text": "the decision about what data\nversioning scheme to use have to do with the\ncombination, really,",
    "start": "3363580",
    "end": "3370480"
  },
  {
    "text": "of how you do conflict\ndetection and how you do-- Ah, it's both together. So they essentially go together.",
    "start": "3370480",
    "end": "3376280"
  },
  {
    "text": "And so once we talk\nabout conflict detection, then we can come back\nand revisit your question if it's not clear.",
    "start": "3376280",
    "end": "3383530"
  },
  {
    "text": "All right, so\nconflict detection-- so we need to detect conflicts,\neither read-write conflicts",
    "start": "3383530",
    "end": "3392860"
  },
  {
    "text": "or write-conflicts. So, essentially, you've got\ntwo transactions, A and B,",
    "start": "3392860",
    "end": "3400450"
  },
  {
    "text": "that there's either a conflict\nbecause one transaction wrote",
    "start": "3400450",
    "end": "3410230"
  },
  {
    "text": "an address and another\ntransaction read that address, or both transactions want\nto write the same address.",
    "start": "3410230",
    "end": "3416870"
  },
  {
    "text": "So we've already talked\nabout the concept of a read-set and a write-set\nin the context of that tree",
    "start": "3416870",
    "end": "3426130"
  },
  {
    "text": "example. But to be explicit\nhere now, read-set are the addresses that have been\nread during the transaction,",
    "start": "3426130",
    "end": "3433360"
  },
  {
    "text": "and write-set are the\naddresses that have been written during the transaction.",
    "start": "3433360",
    "end": "3439985"
  },
  {
    "text": "So, again, there\nare two schemes. There's pessimistic detection.",
    "start": "3439986",
    "end": "3445779"
  },
  {
    "text": "Or encounter detection\nis another name for it, where what you try and do\nis you try and detect--",
    "start": "3445780",
    "end": "3452530"
  },
  {
    "text": "you assume that the transactions\nare going to conflict, and you want to find the\nconflict as soon as possible.",
    "start": "3452530",
    "end": "3460140"
  },
  {
    "text": "That's why it's\ncalled pessimistic. ",
    "start": "3460140",
    "end": "3465301"
  },
  {
    "text": "And then the contention\nmanager decides whether you should stall\nor abort the transaction.",
    "start": "3465301",
    "end": "3472780"
  },
  {
    "text": "And we'll look at\nexamples where we do both. And so let's look at\npessimistic in this case.",
    "start": "3472780",
    "end": "3484480"
  },
  {
    "text": "So in these\ndiagrams, we're going",
    "start": "3484480",
    "end": "3490510"
  },
  {
    "text": "to assume an aggressive\ncontention manager that always",
    "start": "3490510",
    "end": "3496060"
  },
  {
    "text": "allows the writer to win. And so other transactions\nhave to abort.",
    "start": "3496060",
    "end": "3504470"
  },
  {
    "text": "And in each case, we\nwant to be able to look",
    "start": "3504470",
    "end": "3511340"
  },
  {
    "text": "at the pessimistic\ndetection policy.",
    "start": "3511340",
    "end": "3516560"
  },
  {
    "text": "And so on every access, you need\nto do the check for conflict.",
    "start": "3516560",
    "end": "3524745"
  },
  {
    "text": "OK. So in this case, we have a\nread of A by transaction 0.",
    "start": "3524745",
    "end": "3532350"
  },
  {
    "text": "So in this case, the read-set\nof transaction 0 is A.",
    "start": "3532350",
    "end": "3543410"
  },
  {
    "text": "And the right-set of\ntransaction 1 is empty.",
    "start": "3543410",
    "end": "3554089"
  },
  {
    "text": "So the check says no conflict. So we keep going.",
    "start": "3554090",
    "end": "3561319"
  },
  {
    "text": "And here, with this access,\nthe write-set of transaction 1",
    "start": "3561320",
    "end": "3572280"
  },
  {
    "text": "is B. And the read-set of\ntransaction 0 is still A.",
    "start": "3572280",
    "end": "3579420"
  },
  {
    "text": "And the write-set is empty. So again, no conflict.",
    "start": "3579420",
    "end": "3585890"
  },
  {
    "start": "3585890",
    "end": "3591700"
  },
  {
    "text": "And then on write a\nC by transaction 0,",
    "start": "3591700",
    "end": "3599140"
  },
  {
    "text": "now we have read-set 0 is A,\nand the write-set of 0 is C.",
    "start": "3599140",
    "end": "3609609"
  },
  {
    "text": "And here, we've got\nthe worker of 1 is B.",
    "start": "3609610",
    "end": "3614800"
  },
  {
    "text": "So, again, we do the check,\nand there's no conflict. And both transactions commit.",
    "start": "3614800",
    "end": "3621234"
  },
  {
    "text": " That's the first case. ",
    "start": "3621235",
    "end": "3628360"
  },
  {
    "text": "All right, second case--",
    "start": "3628360",
    "end": "3633690"
  },
  {
    "text": "let's get rid of the--",
    "start": "3633690",
    "end": "3638760"
  },
  {
    "text": "all right. So in the second case, I've got\na right of A, and I do a check.",
    "start": "3638760",
    "end": "3653400"
  },
  {
    "text": "And then I do have a read\nof A on transaction 1.",
    "start": "3653400",
    "end": "3659380"
  },
  {
    "text": "And so in this case, a write-set\nof 0 is A. And a read-set of 1",
    "start": "3659380",
    "end": "3679150"
  },
  {
    "text": "is also A. So this\nis a conflict. And so what are my options here?",
    "start": "3679150",
    "end": "3685260"
  },
  {
    "text": " Abort 1.",
    "start": "3685260",
    "end": "3691400"
  },
  {
    "text": "So I could abort\n1 and restart it.",
    "start": "3691400",
    "end": "3699410"
  },
  {
    "text": "Or I could assume\nthat at some point, the transaction 0 will complete.",
    "start": "3699410",
    "end": "3707390"
  },
  {
    "text": "And I can then commence--",
    "start": "3707390",
    "end": "3714170"
  },
  {
    "text": "so I can stall transaction 1. And what would be the benefit\nof stalling transaction",
    "start": "3714170",
    "end": "3719840"
  },
  {
    "text": "1 as opposed to aborting?  Yeah? You don't have to do\nthe read of A again.",
    "start": "3719840",
    "end": "3726810"
  },
  {
    "text": "Yeah, all this work\ndone in transactions so far does not\nhave to be flushed.",
    "start": "3726810",
    "end": "3733920"
  },
  {
    "text": "I can just hold the\nstate of transaction 1 until transaction 0 completes.",
    "start": "3733920",
    "end": "3743160"
  },
  {
    "text": "And then I can\nresume transaction 1",
    "start": "3743160",
    "end": "3748930"
  },
  {
    "text": "until it completes. So this is an early\ndetect and stall.",
    "start": "3748930",
    "end": "3754120"
  },
  {
    "text": "Yeah? But wouldn't that be\nan issue [INAUDIBLE] read of A, which is\nnot the correct value?",
    "start": "3754120",
    "end": "3759779"
  },
  {
    "text": "Well, you got to read it again. Oh. Yeah. And [? then ?] it would\nbe after the stall, you go back and read--",
    "start": "3759780",
    "end": "3764940"
  },
  {
    "text": "You go back and read it again. Oh, got it. Yeah. Yeah, absolutely. You have to. Yeah. Yeah. Yeah?",
    "start": "3764940",
    "end": "3770160"
  },
  {
    "text": "[INAUDIBLE], but what if you\nhad done maybe a read of B in T1 before and then that gets\nwritten to after you stalled?",
    "start": "3770160",
    "end": "3778890"
  },
  {
    "text": "So basically, when you\ngo to resume the T1, you have multiple conflicts.",
    "start": "3778890",
    "end": "3785560"
  },
  {
    "text": "So you're saying that later,\ntransaction 0 wrote B?",
    "start": "3785560",
    "end": "3795060"
  },
  {
    "text": "Yeah. Like, T1 finds that later,\nmultiple things it's read have been changed\nby T0 after it--",
    "start": "3795060",
    "end": "3801430"
  },
  {
    "text": "Well-- so, remember, every\ntime you do an access, you're doing the check--",
    "start": "3801430",
    "end": "3807220"
  },
  {
    "text": "Every time. So if there was not a\nconflict up to this point,",
    "start": "3807220",
    "end": "3812890"
  },
  {
    "text": "you would not have stalled. Now, if there was a\nlater write by T0,",
    "start": "3812890",
    "end": "3819910"
  },
  {
    "text": "then it would cause T1 to abort. You'd abort. OK. Yeah, yeah. ",
    "start": "3819910",
    "end": "3827230"
  },
  {
    "text": "Yeah? How do you know\nthat there's been a data [? hive ?]\nif you don't have saves since you converted it? Like, do you check on\n[INAUDIBLE] whether your current",
    "start": "3827230",
    "end": "3836500"
  },
  {
    "text": "read states are similar to-- Well, yeah, the system has to\nkeep track of the read state",
    "start": "3836500",
    "end": "3841900"
  },
  {
    "text": "and write state of\nall the transactions that were in execution. Yeah, but like, T0, let's say\nit's committed that transaction.",
    "start": "3841900",
    "end": "3848720"
  },
  {
    "text": "Once it's committed\nthe transaction, is it still sitting there? Is it still-- No. Then you're done.",
    "start": "3848720",
    "end": "3854120"
  },
  {
    "text": "It's committed the state.\nit's committed its state. It's updated the\nstate of the system.",
    "start": "3854120",
    "end": "3859280"
  },
  {
    "text": "And then every other\ntransaction that's running will get the latest state that--",
    "start": "3859280",
    "end": "3865630"
  },
  {
    "text": "Or, like he said,\nT1 has already read v, which has been written\nsomewhere [INAUDIBLE] in T0,",
    "start": "3865630",
    "end": "3871020"
  },
  {
    "text": "let's say. Yeah. At that point-- so pessimistic\ndetection says, on every access,",
    "start": "3871020",
    "end": "3879460"
  },
  {
    "text": "I do the check. How would you do the check here? Would you-- No, no. So the case is, suppose above\nhere, I had read B, for example.",
    "start": "3879460",
    "end": "3894922"
  },
  {
    "text": "And then down here, I\nwrote B. At this point,",
    "start": "3894922",
    "end": "3903080"
  },
  {
    "text": "this would cause this\ntransaction to abort. Oh, I see.",
    "start": "3903080",
    "end": "3909220"
  },
  {
    "text": "OK, I see. So even though it stalled-- Even though it stalled, yeah. The state's still around, and\nI'm still doing the checks.",
    "start": "3909220",
    "end": "3916940"
  },
  {
    "text": "Got it. So the stall becomes an abort.",
    "start": "3916940",
    "end": "3922369"
  },
  {
    "text": "Yeah. Any other questions?",
    "start": "3922370",
    "end": "3927460"
  },
  {
    "text": "Some of this can get tricky. It's going to get slightly\ntrickier but not much more.",
    "start": "3927460",
    "end": "3934660"
  },
  {
    "text": "All right. So in this case, we\ndo an early detect.",
    "start": "3934660",
    "end": "3940450"
  },
  {
    "text": "Instead of throwing\naway the work that we've executed in\nthe transaction so far,",
    "start": "3940450",
    "end": "3945890"
  },
  {
    "text": "we stall and hope for the best\nand wait for transaction 0",
    "start": "3945890",
    "end": "3951099"
  },
  {
    "text": "to commit. And then we can commence\nexecuting transaction 1.",
    "start": "3951100",
    "end": "3957039"
  },
  {
    "text": "All right. So case 3, we're going to do\na read of A. Read-set of 0",
    "start": "3957040",
    "end": "3967090"
  },
  {
    "text": "is A. The read-set and\nwrite-set of transaction 1",
    "start": "3967090",
    "end": "3973900"
  },
  {
    "text": "is empty, so the check passes.",
    "start": "3973900",
    "end": "3979010"
  },
  {
    "text": "And then we do a\nright of A on T1. So what happens in this case?",
    "start": "3979010",
    "end": "3985464"
  },
  {
    "text": " Abort. Yeah? T0 aborts.",
    "start": "3985465",
    "end": "3991410"
  },
  {
    "text": "T0 aborts, as we\njust talked about. So it restarts. And then we do a read of A. And\nthen we do a write of A. OK.",
    "start": "3991410",
    "end": "4010220"
  },
  {
    "start": "4010220",
    "end": "4019950"
  },
  {
    "text": "Read of A, stall, and\nthen we keep going.",
    "start": "4019950",
    "end": "4025158"
  },
  {
    "text": "Any questions? Yeah? When do you know to restart T0?",
    "start": "4025158",
    "end": "4031950"
  },
  {
    "text": "Remember, aggressive contention\nmanager, writer wins. So other transactions abort.",
    "start": "4031950",
    "end": "4039869"
  },
  {
    "text": "So writer always wins. So at this point, if there's\na read-write conflict,",
    "start": "4039870",
    "end": "4049319"
  },
  {
    "text": "the writer wins. So if another transaction\nis already written",
    "start": "4049320",
    "end": "4059430"
  },
  {
    "text": "and then you're doing\na read, then you stall. If you've read already--",
    "start": "4059430",
    "end": "4065920"
  },
  {
    "text": "you've read bad stuff and\ncomputed based on that-- and then a write comes along,\nthen you have to abort.",
    "start": "4065920",
    "end": "4073650"
  },
  {
    "text": "Remember, up until\nthis point, you haven't done anything\nthat would be a conflict.",
    "start": "4073650",
    "end": "4082170"
  },
  {
    "text": "You're checking to see whether\nthis read will cause a conflict.",
    "start": "4082170",
    "end": "4089640"
  },
  {
    "text": "If it doesn't, you\ngo ahead and do it. If it does, you just stall.",
    "start": "4089640",
    "end": "4095880"
  },
  {
    "text": "Because you haven't done it yet. You're thinking about it. And then once the\ncommit is done,",
    "start": "4095880",
    "end": "4102314"
  },
  {
    "text": "then you go ahead\nand do the read because you know that the stall\ncondition has been cleared. Yeah?",
    "start": "4102314",
    "end": "4107770"
  },
  {
    "text": "So I was just going\nto ask, in case 3, it looks like we start T0's\nreading before T1 is committed.",
    "start": "4107770",
    "end": "4120969"
  },
  {
    "text": "I'm just wondering, when\ndoes that restart happen? Or how do you know\nthat you can-- yeah.",
    "start": "4120970",
    "end": "4126024"
  },
  {
    "text": "Like, what condition\nrestarts the-- In this case, you abort\nand restart whenever",
    "start": "4126024",
    "end": "4133689"
  },
  {
    "text": "you see a write-read conflict. So you just restart immediately? Yeah, yeah, exactly.",
    "start": "4133689",
    "end": "4139100"
  },
  {
    "text": "Yeah. ",
    "start": "4139100",
    "end": "4144770"
  },
  {
    "text": "All right, case 4. So now we have a right\nof A. So what happens?",
    "start": "4144770",
    "end": "4153649"
  },
  {
    "text": "Does this check pass? Yep. Yep. ",
    "start": "4153649",
    "end": "4164790"
  },
  {
    "text": "We have a write of A on T1. Does this check pass?",
    "start": "4164790",
    "end": "4170460"
  },
  {
    "text": "No. So what should happen? Abort 1 A. Abort and restart. ",
    "start": "4170460",
    "end": "4181994"
  },
  {
    "text": "And we have a write of\nA. So what should happen? Restart. OK.",
    "start": "4181994",
    "end": "4187589"
  },
  {
    "text": "[LAUGHS] OK.",
    "start": "4187590",
    "end": "4193139"
  },
  {
    "text": "So we're not going to make\nany progress with this scheme. So the system has to\ndetect this situation",
    "start": "4193140",
    "end": "4200170"
  },
  {
    "text": "and allow one of the\ntransactions to complete.",
    "start": "4200170",
    "end": "4207335"
  },
  {
    "start": "4207335",
    "end": "4212765"
  },
  {
    "text": "OK. So this is a livelock condition,\nand you need to detect. It All right, so\nthis is pessimistic.",
    "start": "4212765",
    "end": "4218940"
  },
  {
    "text": "Yeah? Go. Would you ever design\na memory system that would give the reads\nprecedence over the write?",
    "start": "4218940",
    "end": "4225590"
  },
  {
    "text": "Like, so read cause\nthe write thread to [? eventually ?] not work. ",
    "start": "4225590",
    "end": "4239530"
  },
  {
    "text": "Let me think. So you've already written--",
    "start": "4239530",
    "end": "4245960"
  },
  {
    "text": "so this case-- you want to\ncause T0 to abort in this case.",
    "start": "4245960",
    "end": "4251560"
  },
  {
    "text": "Is this what you're-- Yeah. I can't see why you'd\nwant to do that.",
    "start": "4251560",
    "end": "4257640"
  },
  {
    "start": "4257640",
    "end": "4265134"
  },
  {
    "text": "Possibly, but I've never seen\na system that works that way. Yeah.",
    "start": "4265134",
    "end": "4270409"
  },
  {
    "text": "Yeah? What would be a different\ntype of condition [INAUDIBLE] [? topology. ?]",
    "start": "4270410",
    "end": "4277470"
  },
  {
    "text": "Other than allowing writes to-- Yeah. ",
    "start": "4277470",
    "end": "4285810"
  },
  {
    "text": "You could allow the read to--",
    "start": "4285810",
    "end": "4292484"
  },
  {
    "text": " you could allow the transaction\nthat's already running to--",
    "start": "4292484",
    "end": "4303167"
  },
  {
    "text": "you could abort the\ntransaction that's doing the write instead\nof having the reading",
    "start": "4303167",
    "end": "4311770"
  },
  {
    "text": "transaction be aborted. It's like a first\ncome, first serve. Yeah, right. ",
    "start": "4311770",
    "end": "4320050"
  },
  {
    "text": "There are many options\nfor contention management. And different systems\nhave been implemented",
    "start": "4320050",
    "end": "4326410"
  },
  {
    "text": "with different\nadvantages, depending on what the particular\napplication scenario is.",
    "start": "4326410",
    "end": "4335530"
  },
  {
    "text": "All right, so optimistic. The last five minutes--\nwe can at least make a run on optimistic.",
    "start": "4335530",
    "end": "4342080"
  },
  {
    "text": "So optimistic is, hey, I don't\nthink there are any conflicts.",
    "start": "4342080",
    "end": "4347450"
  },
  {
    "text": "Therefore, I'm\nonly going to check when the transaction commits.",
    "start": "4347450",
    "end": "4352930"
  },
  {
    "text": "Until that point,\nI'm going to assume that everything is hunky-dory\nand there are no conflicts. And so the nice\nthing about this is",
    "start": "4352930",
    "end": "4363830"
  },
  {
    "text": "that you can always\ngive precedence to the committing transaction. So the committing\ntransaction will",
    "start": "4363830",
    "end": "4371120"
  },
  {
    "text": "cause all other\ntransactions to abort. So let's look at\nthe example here.",
    "start": "4371120",
    "end": "4377780"
  },
  {
    "text": "We're not doing any checks. And so pessimistic\nis I detect as I go.",
    "start": "4377780",
    "end": "4384500"
  },
  {
    "text": "Optimistic is I need\nto check the write-set",
    "start": "4384500",
    "end": "4389540"
  },
  {
    "text": "of the committing\ntransaction, which is B, against the read-set\nof all other transactions--",
    "start": "4389540",
    "end": "4398389"
  },
  {
    "text": "in this case, just 0, which is\nA and C. There's no conflict.",
    "start": "4398390",
    "end": "4404570"
  },
  {
    "text": "And so the conflict\ndetection says no problem,",
    "start": "4404570",
    "end": "4412099"
  },
  {
    "text": "and the commit happens. Yeah? Is read-set A and write-set B?",
    "start": "4412100",
    "end": "4420120"
  },
  {
    "text": "Is read-set what? For T0-- Ah, sorry.",
    "start": "4420120",
    "end": "4425489"
  },
  {
    "text": "You're right. So right-set of\n0 is C. So you're",
    "start": "4425490",
    "end": "4431340"
  },
  {
    "text": "checking the write-set of\nthe committing transaction versus the read-set of the other\ntransactions in the system.",
    "start": "4431340",
    "end": "4444875"
  },
  {
    "text": " OK, I'll talk about the other--\nso in this case, what happens?",
    "start": "4444875",
    "end": "4456330"
  },
  {
    "text": "The write-set of the\ncommitting transaction is A. And the read-set of the other\ntransaction in the system, T1,",
    "start": "4456330",
    "end": "4463050"
  },
  {
    "text": "is also A. So what\nhas to happen? Abort [INAUDIBLE].",
    "start": "4463050",
    "end": "4468205"
  },
  {
    "text": "Right. You abort and restart. And so in this case,\nyou don't get to stall.",
    "start": "4468205",
    "end": "4476980"
  },
  {
    "text": "You don't detect\nearly that this is going to be-- this is sometimes\ncalled a doomed transaction.",
    "start": "4476980",
    "end": "4483880"
  },
  {
    "text": "Because you know at this point\nthat this transaction will not succeed because there's\nalready a write in the system",
    "start": "4483880",
    "end": "4491469"
  },
  {
    "text": "that's going to\ncause a conflict. And, therefore, you're going\nto waste all that work.",
    "start": "4491470",
    "end": "4498370"
  },
  {
    "text": "In case 3, we have\na read of A and and.",
    "start": "4498370",
    "end": "4512470"
  },
  {
    "text": "So we read A. Course,\nthat read of A could happen anywhere\nin the transaction.",
    "start": "4512470",
    "end": "4520030"
  },
  {
    "text": "It could have happened\nafter the write of A here. it could be down here in time.",
    "start": "4520030",
    "end": "4525900"
  },
  {
    "text": "But it doesn't matter. So in this case,\nT0 is committing,",
    "start": "4525900",
    "end": "4532560"
  },
  {
    "text": "and its write-set is empty. So you're checking the write-set\nof the committing transaction",
    "start": "4532560",
    "end": "4539100"
  },
  {
    "text": "versus the read-set\nof other transactions. And you say go ahead.",
    "start": "4539100",
    "end": "4545622"
  },
  {
    "text": "In some cases-- and if\nI gave you an example, I would say\nexplicitly, you might",
    "start": "4545622",
    "end": "4551670"
  },
  {
    "text": "want to check to see whether\nthe write-set of the existing",
    "start": "4551670",
    "end": "4559830"
  },
  {
    "text": "transaction conflicted. But it really doesn't matter.",
    "start": "4559830",
    "end": "4566489"
  },
  {
    "text": "Because the serialization\nis such that the committing\ntransaction is going",
    "start": "4566490",
    "end": "4575730"
  },
  {
    "text": "to update the state\nof the memory. And even though there are\nother writes that existed,",
    "start": "4575730",
    "end": "4586989"
  },
  {
    "text": "there will be no conflict. So in this case, we\ndo the commit of T0,",
    "start": "4586990",
    "end": "4595920"
  },
  {
    "text": "and then we do the commit of T1. And, in fact, the read of A--",
    "start": "4595920",
    "end": "4603921"
  },
  {
    "text": "you serialize\nthese transactions. The read of A happens\nbefore the write of A",
    "start": "4603921",
    "end": "4610274"
  },
  {
    "text": "in the serialized\ntransaction order. And so that means\nthat, of course,",
    "start": "4610274",
    "end": "4618000"
  },
  {
    "text": "transaction 0 should not see any\nof the updates of transaction 1.",
    "start": "4618000",
    "end": "4623255"
  },
  {
    "text": " All right. So in this case, we have\na read and write here.",
    "start": "4623255",
    "end": "4639400"
  },
  {
    "text": "And what should happen?",
    "start": "4639400",
    "end": "4644650"
  },
  {
    "text": "So the read-set of T1 and the\nread-set of T0 are both A.",
    "start": "4644650",
    "end": "4650890"
  },
  {
    "text": "And the write-set of T0\nand the write-set of T1 are both A. So what\nshould happen here?",
    "start": "4650890",
    "end": "4661420"
  },
  {
    "text": "Yeah? T0 restarts. T0 should restart\nbecause we have",
    "start": "4661420",
    "end": "4666900"
  },
  {
    "text": "a conflict between the\ncommitting transaction and the transaction\nthat already exists.",
    "start": "4666900",
    "end": "4676890"
  },
  {
    "text": "And then we restart. And then we go ahead and commit. And in this case, for the\npessimistic detection,",
    "start": "4676890",
    "end": "4685030"
  },
  {
    "text": "there was no forward progress. But here, with optimistic,\nyou do get forward progress.",
    "start": "4685030",
    "end": "4690460"
  },
  {
    "text": "Yeah? So here, so the write to\n[? T, ?] the T1 performs,",
    "start": "4690460",
    "end": "4695550"
  },
  {
    "text": "that value might\ndepend on the fact that T0 had written\nto A before, right?",
    "start": "4695550",
    "end": "4701743"
  },
  {
    "text": "Because T1 reads A\nafter T0 writes to a. So doesn't that mean that\nwhen we abort T0 and restart--",
    "start": "4701744",
    "end": "4710010"
  },
  {
    "text": "but T1 has already committed. The values that T1\nhas committed are committed [? assuming ?] that--",
    "start": "4710010",
    "end": "4715920"
  },
  {
    "text": "Remember, everything's isolated\nuntil the transaction commits. So there are no values\nbeing communicated",
    "start": "4715920",
    "end": "4723960"
  },
  {
    "text": "between transactions\nuntil commit time. So any values that T1 and\nT0 are reading at this point",
    "start": "4723960",
    "end": "4734890"
  },
  {
    "text": "existed before the\ntransactions commenced or were created inside the\ntransaction themselves.",
    "start": "4734890",
    "end": "4740660"
  },
  {
    "text": "Yeah? With eager versioning, where\nwe're writing it to memory, how do--",
    "start": "4740660",
    "end": "4746230"
  },
  {
    "text": "Yeah, so eager versioning\nand optimistic detection",
    "start": "4746230",
    "end": "4752230"
  },
  {
    "text": "don't go very well together. [LAUGHS] Yeah?",
    "start": "4752230",
    "end": "4757744"
  },
  {
    "text": "Why in case 3 we do not\nrestart, but in case 4, we do? What's the difference there?",
    "start": "4757744",
    "end": "4765310"
  },
  {
    "text": "In this case? Yeah. Remember, what's the rule\nfor a committing transaction with optimistic detection?",
    "start": "4765310",
    "end": "4772100"
  },
  {
    "text": " The write-set of the\ncommitting transaction",
    "start": "4772100",
    "end": "4778870"
  },
  {
    "text": "gets compared\nagainst the read-sets of all the other transactions. What's the right-set\nin the case of case 3?",
    "start": "4778870",
    "end": "4789290"
  },
  {
    "text": "It's empty, right? There's no conflict. But you don't compare the read. You only do one way.",
    "start": "4789290",
    "end": "4794480"
  },
  {
    "text": "You don't do the other way. No, it's the write-set of\nthe committing transaction. OK, so I think time's up.",
    "start": "4794480",
    "end": "4801210"
  },
  {
    "text": "So we'll pick this\nup again on Thursday when we talk about software\nand hardware implementations.",
    "start": "4801210",
    "end": "4807560"
  },
  {
    "text": "And we might move\ninto discussion of application-specific or\ndomain-specific hardware.",
    "start": "4807560",
    "end": "4815949"
  },
  {
    "start": "4815950",
    "end": "4820000"
  }
]