[
  {
    "start": "0",
    "end": "112000"
  },
  {
    "text": "good afternoon everyone thank you for being here and you know up a professor",
    "start": "10690",
    "end": "16430"
  },
  {
    "text": "cloud Barrett who is my collaborator on this project Clark and I we are going to talk about how to achieve dramatic",
    "start": "16430",
    "end": "22880"
  },
  {
    "text": "improvements in our validation and debug for system-on-chips and the scheme that",
    "start": "22880",
    "end": "29300"
  },
  {
    "text": "we will be using is called QED and symbolic QED now it's a loaded term QED",
    "start": "29300",
    "end": "35449"
  },
  {
    "text": "really stands for quick error detection that's what I'm going to talk about but we have another motive which is once you",
    "start": "35449",
    "end": "42140"
  },
  {
    "text": "know you use this QED technique to validate your chips you would say well",
    "start": "42140",
    "end": "47239"
  },
  {
    "text": "you know this chip works end of proof QED right so uh so of course you know",
    "start": "47239",
    "end": "53750"
  },
  {
    "text": "I'm here up I am presenting the work but all this work has been done by the",
    "start": "53750",
    "end": "60320"
  },
  {
    "text": "students on the collaborators so they deserve the credit you know we are just here to present their work so we know",
    "start": "60320",
    "end": "66860"
  },
  {
    "text": "that there is an explosive growth in our dependency on electronic systems and I was at a meeting of the National Academy",
    "start": "66860",
    "end": "72530"
  },
  {
    "text": "up you know like last year and they were talking about this you know societal a",
    "start": "72530",
    "end": "77719"
  },
  {
    "text": "scale problems right you know water world hunger education and all that and everybody said that the only way to",
    "start": "77719",
    "end": "84920"
  },
  {
    "text": "solve that problems is to information technology right and that's something that I felt very proud of because I work",
    "start": "84920",
    "end": "91460"
  },
  {
    "text": "in that space but guess what when you are going to plant electronics inside your body to monitor and actuate and do",
    "start": "91460",
    "end": "99049"
  },
  {
    "text": "all sorts of things you don't want that thing to just crash right which means that if you really have to achieve that",
    "start": "99049",
    "end": "106399"
  },
  {
    "text": "we must ensure robust operation right now if you look at chips today on the",
    "start": "106399",
    "end": "113929"
  },
  {
    "start": "112000",
    "end": "198000"
  },
  {
    "text": "other hand there is a staggering complexity of integrated circuits it's",
    "start": "113929",
    "end": "119509"
  },
  {
    "text": "no longer just you know talking about some processors and that's it this is an",
    "start": "119509",
    "end": "124670"
  },
  {
    "text": "SOC or a system-on-a-chip and you see that is it has a whole bunch of stuff it has a bunch of processors it has",
    "start": "124670",
    "end": "131900"
  },
  {
    "text": "accelerators like GPUs and DSPs and so on it has mixed signal components and it",
    "start": "131900",
    "end": "138950"
  },
  {
    "text": "has a whole bunch of other components that Intel if you were from Intel you would call it the uncor",
    "start": "138950",
    "end": "144319"
  },
  {
    "text": "which means everything that's outside the core and that would be like power management memory controllers network",
    "start": "144319",
    "end": "150530"
  },
  {
    "text": "controllers you name it so that's the beast that you know we must make sure",
    "start": "150530",
    "end": "155749"
  },
  {
    "text": "that it works right and guess what what's really going on in industry is",
    "start": "155749",
    "end": "161389"
  },
  {
    "text": "that you can have all sorts of new architectural features that you can",
    "start": "161389",
    "end": "166400"
  },
  {
    "text": "think about right if you are an architect you can have all sorts of new designs that you can think about to",
    "start": "166400",
    "end": "172669"
  },
  {
    "text": "solve the energy efficiency problem to improve performance and so on and so forth the only trouble is that you won't",
    "start": "172669",
    "end": "180799"
  },
  {
    "text": "be able to verify that whether your techniques actually work and as a result it won't see the light of the day so",
    "start": "180799",
    "end": "186949"
  },
  {
    "text": "here is a quote from my friend Ian young he's a senior fellow at Intel and he",
    "start": "186949",
    "end": "192590"
  },
  {
    "text": "said that new architectural features are limited by validation and you see",
    "start": "192590",
    "end": "197659"
  },
  {
    "text": "thought this was bad look at this chart so this is a very simplified carton a",
    "start": "197659",
    "end": "205480"
  },
  {
    "start": "198000",
    "end": "378000"
  },
  {
    "text": "picture of you know up how chips are built so you do a design and while you",
    "start": "205480",
    "end": "212000"
  },
  {
    "text": "design you write the Verilog or something and then you do what is called pre silicon verification to just make",
    "start": "212000",
    "end": "217489"
  },
  {
    "text": "sure that this design doesn't have bugs there you go no we don't want to install",
    "start": "217489",
    "end": "225889"
  },
  {
    "text": "ok and then up you send that chips to be built by the foundry and oh my goodness",
    "start": "225889",
    "end": "234949"
  },
  {
    "text": "forget was fun sorry good ok so the",
    "start": "234949",
    "end": "244669"
  },
  {
    "text": "chips are built by the foundry and the chips come back from the foundry you know you do a live in a post silicon",
    "start": "244669",
    "end": "249799"
  },
  {
    "text": "validation and bring up and then you know you have high volume of chips that you know go out to the customers now",
    "start": "249799",
    "end": "256340"
  },
  {
    "text": "guess what this is a chart from Intel and I often joke that how do you tell that a charges from Intel then there are no numbers on you know on any of the",
    "start": "256340",
    "end": "263360"
  },
  {
    "text": "axis right but if you look at the number of bugs that escaped during design and",
    "start": "263360",
    "end": "270530"
  },
  {
    "text": "show up during pre silicon during post silicon validation that's shooting up",
    "start": "270530",
    "end": "277940"
  },
  {
    "text": "and that me of this curve that you see that was sort of around the time that you know multi-core chips were",
    "start": "277940",
    "end": "283730"
  },
  {
    "text": "introduced so you can see the massive complexity over here so clearly the pre",
    "start": "283730",
    "end": "289250"
  },
  {
    "text": "silicon verification that we do today is inadequate and if you thought that was",
    "start": "289250",
    "end": "295820"
  },
  {
    "text": "bad I think things are going to get much worse and that's because the chips and",
    "start": "295820",
    "end": "302870"
  },
  {
    "text": "systems that we build today they are facing some major obstacles many walls",
    "start": "302870",
    "end": "308260"
  },
  {
    "text": "simultaneously all of you know about the power wall right that's why you cannot go to frys electronics and buy a 10",
    "start": "308260",
    "end": "315020"
  },
  {
    "text": "gigahertz microprocessor now why is that important you know in this context of complexity this is a reason the reason",
    "start": "315020",
    "end": "322190"
  },
  {
    "text": "that you cannot go and buy a 10 gigahertz microprocessor that has to do with fundamental physics which is called",
    "start": "322190",
    "end": "327710"
  },
  {
    "text": "the Dennard scaling of you know transistors but now when the transistors are not getting better from an energy",
    "start": "327710",
    "end": "334700"
  },
  {
    "text": "efficiency standpoint but my mom wants a better computer a better cell phone",
    "start": "334700",
    "end": "340910"
  },
  {
    "text": "which means that the world needs high performance systems the only way to get",
    "start": "340910",
    "end": "345980"
  },
  {
    "text": "performance and by performance I just don't mean speed I mean energy efficiency and all that the only way to",
    "start": "345980",
    "end": "352460"
  },
  {
    "text": "achieve performance when the technology is not getting better is by embracing a lot of complexity and that's exactly",
    "start": "352460",
    "end": "359090"
  },
  {
    "text": "what's happening today and that's why you are seeing up these accelerators this multiple cores you know power",
    "start": "359090",
    "end": "365090"
  },
  {
    "text": "management thermal management and you name it and as a result of this massive complexity this verification and the",
    "start": "365090",
    "end": "371780"
  },
  {
    "text": "problem of bugs gets very significantly difficult okay so what do we do about it",
    "start": "371780",
    "end": "378919"
  },
  {
    "start": "378000",
    "end": "442000"
  },
  {
    "text": "well you know what does the industry do today well you know so when these chips you got back from the foundry what would",
    "start": "378919",
    "end": "384800"
  },
  {
    "text": "you do well you know you plug into the system and I literally no of companies that play games on these systems because",
    "start": "384800",
    "end": "391700"
  },
  {
    "text": "games sometimes tend to expose bugs that you would not otherwise find right and if you are lucky you are going to see",
    "start": "391700",
    "end": "398210"
  },
  {
    "text": "the blue screen of death if you are not not not lucky your customers are going to see that and just consider yourselves",
    "start": "398210",
    "end": "404780"
  },
  {
    "text": "you know sitting in front of that blue screen staring at it and trying to find out that which one of the billions of",
    "start": "404780",
    "end": "411080"
  },
  {
    "text": "transistor that are there inside that chip just cause a little error in which ones of the trillions or quadrillions of cycles",
    "start": "411080",
    "end": "417080"
  },
  {
    "text": "that thing was running so that you can actually go and tell you know which part of the chip is not working and you know",
    "start": "417080",
    "end": "423470"
  },
  {
    "text": "that's called localization and then you have to root cause and fix your problem and it keeps going on and on and if you",
    "start": "423470",
    "end": "429440"
  },
  {
    "text": "look at the numbers from industry if you find that it takes weeks or months of manual work / bug right so that's crazy",
    "start": "429440",
    "end": "439030"
  },
  {
    "text": "so why is that so the reason is that the",
    "start": "439030",
    "end": "444229"
  },
  {
    "start": "442000",
    "end": "581000"
  },
  {
    "text": "existing techniques are completely ad-hoc now for those of you that are wondering you know what this is this",
    "start": "444229",
    "end": "452150"
  },
  {
    "text": "this picture was shared by my friend you know Jason Stinson who used to be at Intel and used to do a lot of this",
    "start": "452150",
    "end": "458449"
  },
  {
    "text": "validation stuff needs to be a very senior guy and you know but essentially",
    "start": "458449",
    "end": "463789"
  },
  {
    "text": "what's going on this is a very high-end validation system what's happening is that you actually cannot see the chip",
    "start": "463789",
    "end": "469880"
  },
  {
    "text": "which is sort of sitting somewhere over here right you cannot see it now who can",
    "start": "469880",
    "end": "475430"
  },
  {
    "text": "tell me what these windows are you can see those windows you know over there in",
    "start": "475430",
    "end": "480889"
  },
  {
    "text": "the picture first take action behind yeah there's a logic analyzers basically",
    "start": "480889",
    "end": "486349"
  },
  {
    "text": "right and all these things that you are seeing these are actually cables that",
    "start": "486349",
    "end": "491690"
  },
  {
    "text": "are connecting the the pins of the chip into this logic analyzers with the hope",
    "start": "491690",
    "end": "497419"
  },
  {
    "text": "that somebody will you know like collect all this information and be able to figure out what the heck is going wrong",
    "start": "497419",
    "end": "502729"
  },
  {
    "text": "you know with that chip right you know what caused that blue screen so essentially really this is not a",
    "start": "502729",
    "end": "508940"
  },
  {
    "text": "scalable way of doing things and as a result are the post silicon costs are rising faster than the design costs yes",
    "start": "508940",
    "end": "518620"
  },
  {
    "text": "in a system of this sort this complexity that much hardware and so forth this has",
    "start": "518620",
    "end": "524209"
  },
  {
    "text": "been tested at real time or is it necessary to slow down the main processor clock because of the delays to",
    "start": "524209",
    "end": "531140"
  },
  {
    "text": "the logic analyzers in bed the answer is all of the above right because first they would run real time",
    "start": "531140",
    "end": "537260"
  },
  {
    "text": "but then when they will find that up that there would be there would be a problem for example there is a hang i",
    "start": "537260",
    "end": "542900"
  },
  {
    "text": "will show you some you know real examples very soon then what do you do you know that's when you try to slow",
    "start": "542900",
    "end": "548210"
  },
  {
    "text": "down you try to decon figure and all that but guess what a lot of these bugs are what software guys would call",
    "start": "548210",
    "end": "553220"
  },
  {
    "text": "Heisenberg's because once you have slowed something down or Deacon figured something the bug is gone right so it's",
    "start": "553220",
    "end": "558740"
  },
  {
    "text": "a it's a it's a it's a nightmare you know to deal with I will show some actual examples of that this seems to be",
    "start": "558740",
    "end": "569120"
  },
  {
    "text": "an equal number of ethernet cables going somewhere okay and if you thought that",
    "start": "569120",
    "end": "580250"
  },
  {
    "text": "was a problem at the chip level and the chip guys have to deal with it here is actually a plot from Cisco so what does",
    "start": "580250",
    "end": "586550"
  },
  {
    "start": "581000",
    "end": "922000"
  },
  {
    "text": "Cisco do so they either build their own Essex or they buy asics from other vendors and they be large systems right",
    "start": "586550",
    "end": "593540"
  },
  {
    "text": "and when their customers complain that some system is not working well the first thing they have to do is to find",
    "start": "593540",
    "end": "599540"
  },
  {
    "text": "out with chip is not working right before they can go and do anything else and you don't have to really read these",
    "start": "599540",
    "end": "604970"
  },
  {
    "text": "histograms bottom line what it is saying is that up to sixty percent of the situation's they end up identifying the",
    "start": "604970",
    "end": "610940"
  },
  {
    "text": "incorrect chip to be the bad chip forget about trying to even figure out what in the world is going wrong so problem this",
    "start": "610940",
    "end": "618320"
  },
  {
    "text": "problem gets even magnified at the system level okay so how do we do about",
    "start": "618320",
    "end": "624290"
  },
  {
    "text": "it so you know so we sort of have to solve this problem so I always tell my students I say that you know like so",
    "start": "624290",
    "end": "630830"
  },
  {
    "text": "this problem looks like an impossible problem and why would you know somebody in academia try to solve an impossible problem some sounds like an industrial",
    "start": "630830",
    "end": "637940"
  },
  {
    "text": "problem and so on so I always tell my students that when there is a problem which looks impossible that means that",
    "start": "637940",
    "end": "644360"
  },
  {
    "text": "we really do not understand what the problem is right so we have to really understand what is the real problem here",
    "start": "644360",
    "end": "649970"
  },
  {
    "text": "and we have figured out what the real",
    "start": "649970",
    "end": "655040"
  },
  {
    "text": "problem is and i believe and i have enough evidence by now to prove to you",
    "start": "655040",
    "end": "661370"
  },
  {
    "text": "that the real problem is the following what is really going on is that so when you play that game run the test or whatever that is so what",
    "start": "661370",
    "end": "668890"
  },
  {
    "text": "is a bug a bug is a goblin sitting inside the chip right and at some point in time the Goblin triggers so when the",
    "start": "668890",
    "end": "676420"
  },
  {
    "text": "bug is triggered what does it do well some flip-flops somewhere inside the design by the way designs have millions",
    "start": "676420",
    "end": "683410"
  },
  {
    "text": "of flip-flops okay so some flip-flops somewhere inside the design captured a zero instead of a one or a one instead",
    "start": "683410",
    "end": "689650"
  },
  {
    "text": "of a zero right if I supposed to contain zero now it contains a one now you do not know that that one became was zero",
    "start": "689650",
    "end": "696279"
  },
  {
    "text": "or zero became a one right but up when the crash happened that's when you figure out that there was some kind of",
    "start": "696279",
    "end": "702730"
  },
  {
    "text": "an incorrect operation that was going on inside the tube that's why that crash happened not some hang happen or",
    "start": "702730",
    "end": "707920"
  },
  {
    "text": "something right so what the Goblin really did was at that real error occurred somewhere over here right but",
    "start": "707920",
    "end": "715900"
  },
  {
    "text": "you know about it over here now if that time difference was very short let us",
    "start": "715900",
    "end": "723370"
  },
  {
    "text": "see it was only ten clock cycles then you know you could do something right you know you might be able to go and",
    "start": "723370",
    "end": "728500"
  },
  {
    "text": "figure out that what was going wrong but in real life what happens is this time",
    "start": "728500",
    "end": "734140"
  },
  {
    "text": "difference is billions of clock cycles billions with Abby now 1 billion clock",
    "start": "734140",
    "end": "739690"
  },
  {
    "text": "cycle by the way is one second right so on real-world time it's very short but",
    "start": "739690",
    "end": "744970"
  },
  {
    "text": "it's billions of clock cycles and it's impossible to make a system go back billions of clock cycles to sort of",
    "start": "744970",
    "end": "751630"
  },
  {
    "text": "figure out what in the world is going wrong and that's why you have this whole validation and debugging nightmare okay",
    "start": "751630",
    "end": "759520"
  },
  {
    "text": "so what I'm going to show in the in the first part of this presentation is I'm",
    "start": "759520",
    "end": "764710"
  },
  {
    "text": "going to show you a technique called QED and hear the results that I am going to",
    "start": "764710",
    "end": "770140"
  },
  {
    "text": "show that QED is going to find the bugs billion times quicker billion with a B",
    "start": "770140",
    "end": "775570"
  },
  {
    "text": "which means that if that error detection latency that I was talking about if that was 10 billion cycles before now it will",
    "start": "775570",
    "end": "782589"
  },
  {
    "text": "be 10 cycles and i will show you actual hardware data to improve that also what i will show you is that since i find the",
    "start": "782589",
    "end": "789970"
  },
  {
    "text": "errors much quicker billions in a billion x quicker so the errors will have much fewer chances to get masked",
    "start": "789970",
    "end": "797260"
  },
  {
    "text": "and as a result i will be finding more bugs so as a result my coverage will go up and since I find this errors a billion",
    "start": "797260",
    "end": "805929"
  },
  {
    "text": "times quicker whatever takes weeks or months of manual work I can actually accomplish that overnight automatically",
    "start": "805929",
    "end": "813189"
  },
  {
    "text": "which means that nobody you know has to really do anything manually the designer can at the end of the workday can go",
    "start": "813189",
    "end": "820779"
  },
  {
    "text": "home and click a button and next morning when the designer comes back you know the system will be ready to tell you",
    "start": "820779",
    "end": "826600"
  },
  {
    "text": "know what kinds of bars are there in the system and how to fix those bugs and so on and so forth and it's broadly",
    "start": "826600",
    "end": "832269"
  },
  {
    "text": "applicable to in a processor cores uncle components form where in a logic bugs",
    "start": "832269",
    "end": "837699"
  },
  {
    "text": "electric electrical bugs you name it later in this presentation a professor",
    "start": "837699",
    "end": "843189"
  },
  {
    "text": "Clark Barrett is actually going to show you a symbolic version of this approach called symbolic QED and by doing that",
    "start": "843189",
    "end": "851019"
  },
  {
    "text": "and I'm stealing his thunder so that you should be in this room he can show you that he can actually run formal",
    "start": "851019",
    "end": "857439"
  },
  {
    "text": "verification formal okay formal verification on a billion transistors SOC okay automatically and as a result",
    "start": "857439",
    "end": "866379"
  },
  {
    "text": "this approach is not only just useful for post cilic and validation but it can find a huge chunk of bugs during pre",
    "start": "866379",
    "end": "874990"
  },
  {
    "text": "silicon verification as well so that's what he is going to show I was very",
    "start": "874990",
    "end": "882699"
  },
  {
    "text": "careful and the reason I was very carefully sigh I'm actually going to show you some data on software too so we",
    "start": "882699",
    "end": "888549"
  },
  {
    "text": "believe that this approach should be applicable to software but I don't have extensive data for you to prove to you",
    "start": "888549",
    "end": "895689"
  },
  {
    "text": "that you know like the effectiveness of this technique for soft I am very careful about what I claim you know so",
    "start": "895689",
    "end": "901240"
  },
  {
    "text": "that's why I did not write software but you will see that in C programs we were able to find bugs using this approach in",
    "start": "901240",
    "end": "910660"
  },
  {
    "text": "principle I have proved that you can do it but I have not spent an awful lot of time to really nail that now okay so uh",
    "start": "910660",
    "end": "921220"
  },
  {
    "text": "so let's let second the simplest example of a bug why would the error detection",
    "start": "921220",
    "end": "926470"
  },
  {
    "start": "922000",
    "end": "1315000"
  },
  {
    "text": "latencies be so long so let's take a multi-core chip okay and let's say that you know they're a bunch of course and",
    "start": "926470",
    "end": "931749"
  },
  {
    "text": "so on and so forth and people will really take you that oh you know I got a bug what is your bug or the system deadlox after a",
    "start": "931749",
    "end": "938319"
  },
  {
    "text": "while that's a bug but the deadlock is not really a bug right remember the bug is a goblin sitting inside the chip at",
    "start": "938319",
    "end": "944619"
  },
  {
    "text": "some point in time it changes as one to a zero or a 0 to a 1 right so what's really happening is the following for",
    "start": "944619",
    "end": "950769"
  },
  {
    "text": "this this is the simplest bug that you can think about right so essentially it was a it's a it's a multi-core chip with",
    "start": "950769",
    "end": "957249"
  },
  {
    "text": "a shared memory and then essentially what happens is this call one you know there is an instruction which tries to",
    "start": "957249",
    "end": "964449"
  },
  {
    "text": "store value a into memory location one and you know since you know that's sort",
    "start": "964449",
    "end": "969730"
  },
  {
    "text": "of shared between the two caches what you try to do is that you try to invalidate the other entry in the other",
    "start": "969730",
    "end": "975519"
  },
  {
    "text": "cache of core in right now because of the bug what happened is that the invalidation signal gets dropped right",
    "start": "975519",
    "end": "981579"
  },
  {
    "text": "so you know core n still has a valid you know value of memory location 1 but at",
    "start": "981579",
    "end": "988449"
  },
  {
    "text": "some point in time core n tries to you know perform some operations using memory location 1 and then you know it",
    "start": "988449",
    "end": "995470"
  },
  {
    "text": "did locks the key point over here is the distance the time distance is very long",
    "start": "995470",
    "end": "1001109"
  },
  {
    "text": "number one and even more importantly you know when core in deadlocks actually the",
    "start": "1001109",
    "end": "1008009"
  },
  {
    "text": "bug was happening when cold one was actually trying to create the you know was trying to do the operation so it's",
    "start": "1008009",
    "end": "1014399"
  },
  {
    "text": "almost impossible to go back and tell you know where in the world this problem was coming from and this is sort of is",
    "start": "1014399",
    "end": "1019829"
  },
  {
    "text": "the simplest situation you know that you can think about the real situations are much more difficult than this and and",
    "start": "1019829",
    "end": "1025620"
  },
  {
    "text": "the investor uses a whole bunch of techniques in app you know here's a long list i do not have to read this thing",
    "start": "1025620",
    "end": "1030740"
  },
  {
    "text": "bottom line is all these techniques that are out there they have very long error",
    "start": "1030740",
    "end": "1037019"
  },
  {
    "text": "detection latencies so what do we do how do we solve this problem and here comes",
    "start": "1037019",
    "end": "1042659"
  },
  {
    "text": "sort of the high level picture of what QED or quick error detection does what",
    "start": "1042659",
    "end": "1048960"
  },
  {
    "text": "it does is the following it takes existing tests that are called I call them original tests okay like for",
    "start": "1048960",
    "end": "1055200"
  },
  {
    "text": "example your games your applications or people even run you know sir all sorts of you know up you know random",
    "start": "1055200",
    "end": "1061320"
  },
  {
    "text": "instructions and so on and so forth and we pass them through a tool which is",
    "start": "1061320",
    "end": "1067379"
  },
  {
    "text": "called a key BD transformation to okay and you know what are these qet transformations they're like some you know mathematical",
    "start": "1067379",
    "end": "1073680"
  },
  {
    "text": "transformations i will give you some examples to give you give you an intuition very soon and what comes out",
    "start": "1073680",
    "end": "1079680"
  },
  {
    "text": "of this cutie transformations are a whole bunch of tests that we call QED",
    "start": "1079680",
    "end": "1084960"
  },
  {
    "text": "family tests ok now this committee family tests have some very interesting",
    "start": "1084960",
    "end": "1090750"
  },
  {
    "text": "properties for example you will be able to prove that the error detection",
    "start": "1090750",
    "end": "1096510"
  },
  {
    "text": "latency will be guaranteed very short for example and as i said earlier because the error detection latency will",
    "start": "1096510",
    "end": "1103320"
  },
  {
    "text": "be a very short the coverage will improve but even more interestingly you",
    "start": "1103320",
    "end": "1109260"
  },
  {
    "text": "can do this QED transformations completely in software which means that of course you don't trust me I'm making",
    "start": "1109260",
    "end": "1114990"
  },
  {
    "text": "all these clamps standing here right but you can actually try this on your chip today and you know you will be able to",
    "start": "1114990",
    "end": "1121170"
  },
  {
    "text": "see the benefits of this QED transformations now if you're a little bit bored and if you give me 0.01",
    "start": "1121170",
    "end": "1128280"
  },
  {
    "text": "percent of your silicon area then I can actually do this QED transformations even better but I know that you won't",
    "start": "1128280",
    "end": "1134340"
  },
  {
    "text": "trust me on day one and you will just want the software version of the QED rather than this hardware-assisted QED",
    "start": "1134340",
    "end": "1141000"
  },
  {
    "text": "ok so what does this QED do so you know up what it does is the following",
    "start": "1141000",
    "end": "1146100"
  },
  {
    "text": "remember I take existing tests and I sort of you know block down the existing tests into snippets what a snippets just",
    "start": "1146100",
    "end": "1153180"
  },
  {
    "text": "a bunch of lines of code for example right and then you know you have some kind of an error detection latency",
    "start": "1153180",
    "end": "1159060"
  },
  {
    "text": "target it doesn't really matter you know you do not you know like you mean have to worry about those you have some",
    "start": "1159060",
    "end": "1164160"
  },
  {
    "text": "intrusiveness constraints for example you know one of the companies that we were working with they said boy you are changing our tests make sure that do",
    "start": "1164160",
    "end": "1171300"
  },
  {
    "text": "this kind of in a part of the test we are writing some very specific values into the memory bus and you better not",
    "start": "1171300",
    "end": "1177660"
  },
  {
    "text": "touch that focus sir we are not going to touch that right you know we can respect all this constraints and what comes out",
    "start": "1177660",
    "end": "1184140"
  },
  {
    "text": "of these you know QED transformations is what I call tma which means too many",
    "start": "1184140",
    "end": "1189480"
  },
  {
    "text": "acronyms right which means that you don't really have to read through all these acronyms but you should focus on",
    "start": "1189480",
    "end": "1194550"
  },
  {
    "text": "is the following you still see that the snippets are still existing right snippet one you see a snippet one",
    "start": "1194550",
    "end": "1200100"
  },
  {
    "text": "snippet 2 and so on and so forth and I have added a whole bunch of other stuff that's shown in blue and you don't",
    "start": "1200100",
    "end": "1206280"
  },
  {
    "text": "have to worry about what those things are we will talk about it but the property that will be satisfied is the",
    "start": "1206280",
    "end": "1212040"
  },
  {
    "text": "following so let's say that snippet one was you know triggering a bug for",
    "start": "1212040",
    "end": "1217350"
  },
  {
    "text": "example I would know that by the beginning of snippet too with all this",
    "start": "1217350",
    "end": "1222420"
  },
  {
    "text": "blue stuff that I just added I will be detecting the error that is caused by the bug so since I know what I am going",
    "start": "1222420",
    "end": "1229710"
  },
  {
    "text": "to put in in this you know this blue stuff since I am controlling that I can control the error detection latency that",
    "start": "1229710",
    "end": "1236400"
  },
  {
    "text": "sort of is the key idea now the question is you know what is what are all this blue stuff that I add I will give you",
    "start": "1236400",
    "end": "1241740"
  },
  {
    "text": "some kind of you know trivial examples to motivate you you should not try that at home but that will give you a sense",
    "start": "1241740",
    "end": "1247980"
  },
  {
    "text": "for what I am trying to do but before getting there up so let me you know so",
    "start": "1247980",
    "end": "1254309"
  },
  {
    "text": "this is a you know big SOC for example and as I said that associates contain a whole bunch of components it has",
    "start": "1254309",
    "end": "1260580"
  },
  {
    "text": "processor cores it has uncle components like you know cache controllers memory controllers and so on and it has",
    "start": "1260580",
    "end": "1266910"
  },
  {
    "text": "accelerators for example so depending on what part of the associate targeting and",
    "start": "1266910",
    "end": "1273080"
  },
  {
    "text": "essentially we target the entire associ there are different kinds of QED transformations for different parts of",
    "start": "1273080",
    "end": "1279809"
  },
  {
    "text": "the SOC and I of course i won't have time to go through all these you know transformations in this talk but to give",
    "start": "1279809",
    "end": "1285809"
  },
  {
    "text": "you a sense for these transformations I will focus on two transformations one targeting the processor core which is",
    "start": "1285809",
    "end": "1291750"
  },
  {
    "text": "called an EDD IV transformation and later on I will show you a transformation called the PLC",
    "start": "1291750",
    "end": "1297330"
  },
  {
    "text": "transformation that targets are this uncle components for example but let's look at what EDD IV transformation is",
    "start": "1297330",
    "end": "1304740"
  },
  {
    "text": "and EDD I essentially stands for error detection by duplicated instructions and",
    "start": "1304740",
    "end": "1309929"
  },
  {
    "text": "you know you sort of get the idea of where I'm going I guess so up so up to",
    "start": "1309929",
    "end": "1315870"
  },
  {
    "start": "1315000",
    "end": "1474000"
  },
  {
    "text": "give you a motivation for this ed div transformation so let's take a validation program as i said i will show",
    "start": "1315870",
    "end": "1322559"
  },
  {
    "text": "you some pretty trivial examples just to get you a sense for things you know if you just try this at home without using",
    "start": "1322559",
    "end": "1329429"
  },
  {
    "text": "this QED stuff you know it won't exactly work because there will be you know some issues",
    "start": "1329429",
    "end": "1335280"
  },
  {
    "text": "but let's take this transformation right you know so let's take a bunch of cord you know and I just picked a bunch of",
    "start": "1335280",
    "end": "1340350"
  },
  {
    "text": "instructions and if you look at the trace of the instructions you know you have a bunch of you know r1 equals to r",
    "start": "1340350",
    "end": "1345690"
  },
  {
    "text": "1 plus 5 and so on and so forth if a bug gets triggered somewhere you see that",
    "start": "1345690",
    "end": "1350970"
  },
  {
    "text": "you know there is a very long error detection latency before you know that there is a problem for example right so",
    "start": "1350970",
    "end": "1356940"
  },
  {
    "text": "what I will do now is the following so I will actually divide up the registered",
    "start": "1356940",
    "end": "1362670"
  },
  {
    "text": "space of my processor into two halves now if you could not do that for some",
    "start": "1362670",
    "end": "1367680"
  },
  {
    "text": "reason that's perfectly fine there alternative ways to achieving what I am talking about but just for the simplest",
    "start": "1367680",
    "end": "1373890"
  },
  {
    "text": "case let's say that you know i have registers r1 r2 and r3 and the other",
    "start": "1373890",
    "end": "1379080"
  },
  {
    "text": "spaces are 16 or 18 and are 19 and what i have done is that i have identically initialized this in our 12 hour 16 r 2",
    "start": "1379080",
    "end": "1386790"
  },
  {
    "text": "to r 18 or 32 hour 19 right and then when i run this r1 equals to r 1 plus 5",
    "start": "1386790",
    "end": "1393990"
  },
  {
    "text": "i also run our 16 equals to r 16 plus 5 which mean and then you know when i run our tickets to our 2-1 Iran are 18",
    "start": "1393990",
    "end": "1400920"
  },
  {
    "text": "equals to r 18 minus r 16 and so on and so forth essentially by doing that what i am doing is on the same hardware i am",
    "start": "1400920",
    "end": "1408090"
  },
  {
    "text": "creating these two intertwined you know execution sequences which guarantee that",
    "start": "1408090",
    "end": "1416610"
  },
  {
    "text": "at certain points in time they should have consistent results and there's",
    "start": "1416610",
    "end": "1421830"
  },
  {
    "text": "chicks that are shown in blue over there whether r1 is equal to r 16 and articles you are 18 they are making this chicks",
    "start": "1421830",
    "end": "1428520"
  },
  {
    "text": "very frequently okay so I have instead of that one test that was running before",
    "start": "1428520",
    "end": "1433800"
  },
  {
    "text": "I have these two intertwined executions of the same tests that are running and very frequently I'm checking that little",
    "start": "1433800",
    "end": "1440400"
  },
  {
    "text": "those two executions are consistent with respect to each other or not right I",
    "start": "1440400",
    "end": "1446330"
  },
  {
    "text": "remember with parity up it comes from their notion of you know Martin as you",
    "start": "1448640",
    "end": "1453660"
  },
  {
    "text": "know that I work on fault tolerant computing and software you know implemented hardware fault tolerant computing and so on it comes from there",
    "start": "1453660",
    "end": "1460620"
  },
  {
    "text": "but why does it work in this space I will come to that little bit later but yeah the ideas are coming from that",
    "start": "1460620",
    "end": "1467340"
  },
  {
    "text": "domain basic right so what's really going on over here is that let's say that the bug up",
    "start": "1467340",
    "end": "1473179"
  },
  {
    "text": "was triggered by r1 equals to r 1 plus 5 you know then you know r1 equals to r 16",
    "start": "1473179",
    "end": "1479690"
  },
  {
    "start": "1474000",
    "end": "1504000"
  },
  {
    "text": "you know that would you know catch the error for example right if r 62 equals",
    "start": "1479690",
    "end": "1484909"
  },
  {
    "text": "to r 16 plus 5 did not exercise the bug in exactly the same way everybody agrees with that makes sense okay good so at",
    "start": "1484909",
    "end": "1492320"
  },
  {
    "text": "least you know you have some initial motion that we might be able to catch this bug very quickly right because I",
    "start": "1492320",
    "end": "1498470"
  },
  {
    "text": "have such fine grained chicks of this intertwined executions and I'm going to",
    "start": "1498470",
    "end": "1504830"
  },
  {
    "start": "1504000",
    "end": "1600000"
  },
  {
    "text": "come to that okay yeah so that's why i said that you know don't try this you know this trivial examples at home lock",
    "start": "1504830",
    "end": "1511309"
  },
  {
    "text": "stock and barrel because you have to be very careful about certain things so so",
    "start": "1511309",
    "end": "1516470"
  },
  {
    "text": "that's the example of you know my error detection latency was very short right now let me tell you that my coverage",
    "start": "1516470",
    "end": "1521899"
  },
  {
    "text": "will improve you know very significantly why so again let's take a test and when r 1 equals to r 1 plus 1 was running you",
    "start": "1521899",
    "end": "1529309"
  },
  {
    "text": "know the two got changed to a three but then what happened was you know at some point in the execution of the program",
    "start": "1529309",
    "end": "1534710"
  },
  {
    "text": "that our 1 got a value 0 and guess what a whole bunch of people in that in the",
    "start": "1534710",
    "end": "1539870"
  },
  {
    "text": "domain of verification we'll talk about what are called assertions for example right that's a big buzzword right and",
    "start": "1539870",
    "end": "1544970"
  },
  {
    "text": "let's just somebody had an assertion which is so check r1 equals to 0 da you know of course r1 equals to 0 and you",
    "start": "1544970",
    "end": "1551570"
  },
  {
    "text": "know that would be check and everything would be fine essentially what happened was the error that was created by that",
    "start": "1551570",
    "end": "1556759"
  },
  {
    "text": "bug got masked right now let's take our previous example that we were talking",
    "start": "1556759",
    "end": "1562850"
  },
  {
    "text": "about before right so when you around r1 equals to r 1 plus 1 and then our 18 equals to r 18 plus 1 and you do the",
    "start": "1562850",
    "end": "1568759"
  },
  {
    "text": "check you detect the bug although the bug would be masked later on and as a",
    "start": "1568759",
    "end": "1575059"
  },
  {
    "text": "result with no PVD you would have a bog escape but with QED you will have a very",
    "start": "1575059",
    "end": "1581059"
  },
  {
    "text": "quick detection of the bug now I'm absolutely sure all of you are thinking that G now this guy is just making all",
    "start": "1581059",
    "end": "1588409"
  },
  {
    "text": "these claims what happens when r 1 equals to r 1 plus 1 and r 18 equals to r 18 plus 1 get affected in I exactly",
    "start": "1588409",
    "end": "1595100"
  },
  {
    "text": "you know that same way then I would not be able to detect the bug and the here comes fault tolerance so in this world",
    "start": "1595100",
    "end": "1602190"
  },
  {
    "start": "1600000",
    "end": "1841000"
  },
  {
    "text": "there are two kinds of bugs the easy bugs and difficult bugs the easy bugs",
    "start": "1602190",
    "end": "1607769"
  },
  {
    "text": "are easy why are the easy because every time you run the test the bug is going",
    "start": "1607769",
    "end": "1613980"
  },
  {
    "text": "to make the system fail in exactly the same way this would be you know a lot of people would call this bore bugs basically right and if you have a bug",
    "start": "1613980",
    "end": "1621000"
  },
  {
    "text": "that has that kind of reproducibility you just need to do a very simple binary search and you will be exactly be able",
    "start": "1621000",
    "end": "1626820"
  },
  {
    "text": "to tell in logarithmic number of steps where the bug is and why is it failing",
    "start": "1626820",
    "end": "1631879"
  },
  {
    "text": "versus as I said the badness of the most difficult bugs are is is that they're",
    "start": "1631879",
    "end": "1638940"
  },
  {
    "text": "like Heisenberg's which means you know up they are not reproducible now what we",
    "start": "1638940",
    "end": "1644549"
  },
  {
    "text": "are doing over here is that we are turning that lemon into a lemonade why because now think about since you have",
    "start": "1644549",
    "end": "1651059"
  },
  {
    "text": "the same hardware that's running these intertwined executions when that I are",
    "start": "1651059",
    "end": "1656220"
  },
  {
    "text": "you know when that you know duplicated instruction is running the state of the system is very different the contents of",
    "start": "1656220",
    "end": "1663539"
  },
  {
    "text": "all this other flip-flops that are you know creating the state of the system or the electrical state of the system is very different as this gentleman was",
    "start": "1663539",
    "end": "1670440"
  },
  {
    "text": "saying that the timing is very different and the result and as a result this Heisenberg's what they do is that they",
    "start": "1670440",
    "end": "1676740"
  },
  {
    "text": "create this notion that you do not have the exact same erroneous behavior that",
    "start": "1676740",
    "end": "1682860"
  },
  {
    "text": "are affecting these two instructions so at a high level you can think of it this way that although the bug is happening",
    "start": "1682860",
    "end": "1689399"
  },
  {
    "text": "because there was a logic problem or there was an electrical problem or there was a farm where problem or even there",
    "start": "1689399",
    "end": "1695070"
  },
  {
    "text": "was a software problem the way that difficult Heisenberg behaves in a system",
    "start": "1695070",
    "end": "1701009"
  },
  {
    "text": "level it looks like as if there was a cosmic ray heat that came and you know like created a little error somewhere",
    "start": "1701009",
    "end": "1706169"
  },
  {
    "text": "and as a result this difficult bugs are automatically detected because of the",
    "start": "1706169",
    "end": "1712830"
  },
  {
    "text": "timing diversity of when you know these bugs are exercised in what way but if you are not happy with that answer",
    "start": "1712830",
    "end": "1719120"
  },
  {
    "text": "actually there are a very focused ways of creating diversity between these",
    "start": "1719120",
    "end": "1724320"
  },
  {
    "text": "various executions that are intertwined for example over here you can see that when i run the r1 equal to a plus B you",
    "start": "1724320",
    "end": "1731639"
  },
  {
    "text": "run our 18 equals 25 times a prime plus 5 times B Prime and you a check at a different space so what",
    "start": "1731639",
    "end": "1737820"
  },
  {
    "text": "would happen is that if a bug affects if both of these executions the net effect",
    "start": "1737820",
    "end": "1744270"
  },
  {
    "text": "is not going to be identical and you will be able to detect the bug and there is a whole bunch of literature on how to",
    "start": "1744270",
    "end": "1750420"
  },
  {
    "text": "create this diversity up you know somebody asked us this question right you know for the Intel floating-point bug you know that happened even before i",
    "start": "1750420",
    "end": "1758280"
  },
  {
    "text": "came to grad school you know would you find that bag and this diversity would be a perfect way actually to find that",
    "start": "1758280",
    "end": "1764520"
  },
  {
    "text": "bug okay so that was like you know one of the examples targeting processor",
    "start": "1764520",
    "end": "1770430"
  },
  {
    "text": "cores what do we do for the uncle components for example the PLC transformation that I promised to show",
    "start": "1770430",
    "end": "1775890"
  },
  {
    "text": "you essentially what i just said is that all these intertwined executions that i was talking about that would be very",
    "start": "1775890",
    "end": "1781920"
  },
  {
    "text": "good at finding bugs inside the processor course but if you look at two days I sources a very significant chunk",
    "start": "1781920",
    "end": "1788880"
  },
  {
    "text": "of the assessee actually the majority of the associate side the processor course and that's where a lot of bugs happen",
    "start": "1788880",
    "end": "1795150"
  },
  {
    "text": "because people you know do not have as much time to integrate all these various components and make sure that everything",
    "start": "1795150",
    "end": "1800880"
  },
  {
    "text": "is actually working right so as a result this uncle components are extremely important and they are very prone to",
    "start": "1800880",
    "end": "1806550"
  },
  {
    "text": "very difficult bugs so we will be using this another transformation called the PLC transformation to address bugs in",
    "start": "1806550",
    "end": "1814230"
  },
  {
    "text": "those parts of the SOC so how does the PLC transformation works well before getting there so you know I have a",
    "start": "1814230",
    "end": "1820620"
  },
  {
    "text": "design with many course as shown over here you know and then you know these were the original tests the first thing",
    "start": "1820620",
    "end": "1827190"
  },
  {
    "text": "that I would do is that using that ed div transformation i transformed that",
    "start": "1827190",
    "end": "1832590"
  },
  {
    "text": "you know the test that now would now be running on this individual processor course and then I will be adding this",
    "start": "1832590",
    "end": "1840720"
  },
  {
    "text": "other checks are the transformations on top of that this would be called the PLC",
    "start": "1840720",
    "end": "1845940"
  },
  {
    "start": "1841000",
    "end": "1910000"
  },
  {
    "text": "transformations or proactive load and check transformations what do they do essentially just like what we talked",
    "start": "1845940",
    "end": "1852690"
  },
  {
    "text": "about in DD div which was like sort of splitting the register space and kind of identical initializing them and making",
    "start": "1852690",
    "end": "1859740"
  },
  {
    "text": "sure that the intertwined executions are sort of you know our self consistent now i will be doing something similar for",
    "start": "1859740",
    "end": "1866340"
  },
  {
    "text": "the memory space which means that this proactive loaded make transformations every so often from",
    "start": "1866340",
    "end": "1871620"
  },
  {
    "text": "all the threads that are running on all this processor course they will be looking at some part of the memory space",
    "start": "1871620",
    "end": "1877230"
  },
  {
    "text": "and they will make sure that the memory contents are consistent with respect to",
    "start": "1877230",
    "end": "1883290"
  },
  {
    "text": "each other and that's how I have implicitly covered the entire SOC",
    "start": "1883290",
    "end": "1889110"
  },
  {
    "text": "because if some of this uncle components would create trouble with respect to",
    "start": "1889110",
    "end": "1894240"
  },
  {
    "text": "bugs what would happen is that ultimately some memory location will be messed up and by doing this proactive",
    "start": "1894240",
    "end": "1899700"
  },
  {
    "text": "load and check transformations very frequently I will be reducing the error detection latency and improving the",
    "start": "1899700",
    "end": "1905280"
  },
  {
    "text": "coverage with respect to you know those bugs as well so that's good so you know",
    "start": "1905280",
    "end": "1911460"
  },
  {
    "start": "1910000",
    "end": "2007000"
  },
  {
    "text": "hopefully now you sort of see the bigger picture that you know you deal with bugs inside the processor cores you deal with",
    "start": "1911460",
    "end": "1918030"
  },
  {
    "text": "bugs outside the processor cores now this gentleman has this fantastic question which is the following right he",
    "start": "1918030",
    "end": "1924270"
  },
  {
    "text": "said timing but let's take a step back what's really going on is I have some tests that was finding bugs and I have",
    "start": "1924270",
    "end": "1931320"
  },
  {
    "text": "transformed those tests into new tests and you know to find more bulbs and",
    "start": "1931320",
    "end": "1936750"
  },
  {
    "text": "finding more bugs more quickly but could you have really intrusiveness which means the fact that you are transforming",
    "start": "1936750",
    "end": "1944160"
  },
  {
    "text": "an existing test into a new test can that end up in a situation that you",
    "start": "1944160",
    "end": "1950730"
  },
  {
    "text": "might not find the bug in the first place because something got skewed up in a bad way right that sort of you know",
    "start": "1950730",
    "end": "1956970"
  },
  {
    "text": "where you are coming from probably and what does the bug coverage impact of",
    "start": "1956970",
    "end": "1962130"
  },
  {
    "text": "that would be so the way we deal with it so we have two ways to deal with it one is a software way to deal with it and",
    "start": "1962130",
    "end": "1969570"
  },
  {
    "text": "i'm going to show you and that's where this notion of QED family tests come but then there is actually a hardware way",
    "start": "1969570",
    "end": "1975540"
  },
  {
    "text": "which is that if you just give me 0.01 percent of the area then i can actually",
    "start": "1975540",
    "end": "1981420"
  },
  {
    "text": "play a tiny little bit twix and i can almost get rid of this notion of you know that i have to change the tests in",
    "start": "1981420",
    "end": "1988530"
  },
  {
    "text": "software a lot of these checks will be happening out of that hardware the 0.01 percent area of the hardware and a lot",
    "start": "1988530",
    "end": "1995460"
  },
  {
    "text": "of this intrusiveness will be gone but of course you are not going to give me this edition additional silicon area so",
    "start": "1995460",
    "end": "2000770"
  },
  {
    "text": "it's not worth talking about it at least in this present so I will tell you how I do it in software only so what I essentially do",
    "start": "2000770",
    "end": "2007800"
  },
  {
    "start": "2007000",
    "end": "2140000"
  },
  {
    "text": "is there is a trade-off between this error detection latency and",
    "start": "2007800",
    "end": "2012840"
  },
  {
    "text": "intrusiveness right what is the trade-off well of course my if my error detection latency is very long which means i don't even modify my test then i",
    "start": "2012840",
    "end": "2020040"
  },
  {
    "text": "would not have any intrusiveness versus if i go and you know sneak in these additional instructions that i was",
    "start": "2020040",
    "end": "2025920"
  },
  {
    "text": "showing you before every for each instruction right there then it would be really intrusive so essentially I have",
    "start": "2025920",
    "end": "2032160"
  },
  {
    "text": "to find a balance between error detection latency and this inclusiveness so what we do is that as you can see",
    "start": "2032160",
    "end": "2039300"
  },
  {
    "text": "over here that we actually change the snippets so what we do is that we window",
    "start": "2039300",
    "end": "2045000"
  },
  {
    "text": "it we say well you know four from each test you create a family of tests and in",
    "start": "2045000",
    "end": "2051060"
  },
  {
    "text": "each family of each each member of that family you know you have a certain window up where you actually go and do",
    "start": "2051060",
    "end": "2058740"
  },
  {
    "text": "the transformation or to be precise all the instructions within that window are",
    "start": "2058740",
    "end": "2064649"
  },
  {
    "text": "not affected and then only you add your whatever additional instructions you are adding right so now you have this window",
    "start": "2064650",
    "end": "2070800"
  },
  {
    "text": "over here you have a window over here and instructions inside the window are not affected you know like for one",
    "start": "2070800",
    "end": "2077280"
  },
  {
    "text": "member in the family and now what you can do is that you can slide that window and as a result you can show that at",
    "start": "2077280",
    "end": "2085649"
  },
  {
    "text": "least there will be one member in your family where if a bug got triggered by",
    "start": "2085650",
    "end": "2090990"
  },
  {
    "text": "that sequence of instructions that will be held as it was in the original test",
    "start": "2090990",
    "end": "2096419"
  },
  {
    "text": "and as a result the bug would be found by at least one test in the new family test and that's how we get around this",
    "start": "2096420",
    "end": "2103260"
  },
  {
    "text": "whole issue about you know inclusiveness and you know our hardware results show",
    "start": "2103260",
    "end": "2108600"
  },
  {
    "text": "that that is extremely effective in actually finding bugs okay good so I",
    "start": "2108600",
    "end": "2114660"
  },
  {
    "text": "talk a lot at this point what I'm going to show you is I'm going to show you some results and then I'm going to hand",
    "start": "2114660",
    "end": "2120420"
  },
  {
    "text": "it over to Clark who will get into this symbolic version of this QED to show that how you can use it for sort of",
    "start": "2120420",
    "end": "2126750"
  },
  {
    "text": "formal verification of very large associés you know we are going to show you results for an associate with half a",
    "start": "2126750",
    "end": "2132240"
  },
  {
    "text": "billion transistors billion with a be but before that let me show you that QED very effective for electrical bugs so I",
    "start": "2132240",
    "end": "2139040"
  },
  {
    "text": "was very fortunate that my friends at Intel they actually brought in an actual core i7 hardware into our lab okay and",
    "start": "2139040",
    "end": "2147400"
  },
  {
    "start": "2140000",
    "end": "2456000"
  },
  {
    "text": "what you can see over here this blue thing that you can see is actually a debug board it's a custom debug board",
    "start": "2147400",
    "end": "2153680"
  },
  {
    "text": "essentially through this port you can change the voltage and the frequency of that processor at a very fine level so",
    "start": "2153680",
    "end": "2160880"
  },
  {
    "text": "that's a way to create electrical bugs right and then the challenge was if you ran the original tests what would be the",
    "start": "2160880",
    "end": "2168170"
  },
  {
    "text": "error detection latency and coverage and if you ran this new QED tests what would",
    "start": "2168170",
    "end": "2173300"
  },
  {
    "text": "be the other detection latency and coverage and as you can see that with this QED you get six orders of magnitude",
    "start": "2173300",
    "end": "2180290"
  },
  {
    "text": "improvement in error detection latency a million times real Hardware result so the original tests had error detection",
    "start": "2180290",
    "end": "2186350"
  },
  {
    "text": "latencies of 1 to 10 billion clock cycles versus we have very short error detection latencies and it's no wonder",
    "start": "2186350",
    "end": "2193430"
  },
  {
    "text": "that we also detect lot more errors that the original test would not detect because we are detecting everything so",
    "start": "2193430",
    "end": "2199490"
  },
  {
    "text": "quickly now one question you might ask is that hey still you got zero to ten",
    "start": "2199490",
    "end": "2204500"
  },
  {
    "text": "thousand over here like why is it so why isn't it in a shorter than 10,000 well guess what in a since this was one of",
    "start": "2204500",
    "end": "2210830"
  },
  {
    "text": "the first experiments that we were doing I did not want my student to fiddle around with the x86 binary or the x86",
    "start": "2210830",
    "end": "2217490"
  },
  {
    "text": "assembly we said that we will be doing this QED at a sea level because this QED",
    "start": "2217490",
    "end": "2223010"
  },
  {
    "text": "technique can be applicable either at the sea level assembly level binary level you name it we can do it you know",
    "start": "2223010",
    "end": "2229040"
  },
  {
    "text": "and we have done it you know for many chips but so so if you if you instrument",
    "start": "2229040",
    "end": "2234740"
  },
  {
    "text": "this thing at the sea level then there would be some sea level library routines that we stuck in right now if the error",
    "start": "2234740",
    "end": "2240620"
  },
  {
    "text": "got triggered when that library routine was running you have to get out of that library routine for QED to detect it and",
    "start": "2240620",
    "end": "2246590"
  },
  {
    "text": "that sort of ended up having you know like very few cases with five thousand and six thousand cycles of error",
    "start": "2246590",
    "end": "2251840"
  },
  {
    "text": "detection latency as you can see the overwhelming majority was just a few hundred cycles of error detection",
    "start": "2251840",
    "end": "2257750"
  },
  {
    "text": "latency for this very complex chip you know up for you know just using software",
    "start": "2257750",
    "end": "2262910"
  },
  {
    "text": "only techniques the other question we were asked at that point is that all",
    "start": "2262910",
    "end": "2267980"
  },
  {
    "text": "these errors that we were detecting right had you know 4x more errors that we detected do those things correspond to",
    "start": "2267980",
    "end": "2275029"
  },
  {
    "text": "actually unique coverage improvement and the only way to demonstrate that would be through a smooth lot for those of you",
    "start": "2275029",
    "end": "2281359"
  },
  {
    "text": "that do not know what a schmoo plot is is essentially a frequency versus voltage plot so if you reduce a voltage",
    "start": "2281359",
    "end": "2288589"
  },
  {
    "text": "a lot this chip should not work right because at a very high frequency right so the Reds are bad the greens means",
    "start": "2288589",
    "end": "2295549"
  },
  {
    "text": "things have passed but if you look at this particular voltage frequency point of course I cannot tell you what that",
    "start": "2295549",
    "end": "2301160"
  },
  {
    "text": "numbers are up you know what you will see is that if you ran the original test",
    "start": "2301160",
    "end": "2306650"
  },
  {
    "text": "it would be green but if you run the QED test it would detect error which means",
    "start": "2306650",
    "end": "2311869"
  },
  {
    "text": "that it's a unique detection and by the way it since QED programs are absolutely valid programs it's not like bringing",
    "start": "2311869",
    "end": "2318859"
  },
  {
    "text": "you're bringing the processor to some illegal state and you are detecting something illegal basically you are",
    "start": "2318859",
    "end": "2324319"
  },
  {
    "text": "actually it's a real detection it's a true cover this improvement well what is",
    "start": "2324319",
    "end": "2329869"
  },
  {
    "text": "the only hardware you know like no you know like the my Intel friends also brought in what Intel would call a",
    "start": "2329869",
    "end": "2335839"
  },
  {
    "text": "single chip cloud computer I think it was a 48 core chip you don't have to read through everything on the slide",
    "start": "2335839",
    "end": "2341720"
  },
  {
    "text": "bottom line is the results are exactly similar as i was showing before does this mean that this technique works only",
    "start": "2341720",
    "end": "2348170"
  },
  {
    "text": "for electrical bugs no you know we it also works for logic bugs and i'm going",
    "start": "2348170",
    "end": "2353599"
  },
  {
    "text": "to show you some examples of that so here was a hardware that you know we",
    "start": "2353599",
    "end": "2359239"
  },
  {
    "text": "were challenged in it's an associate from freescale and what happened over here is that i was telling you right",
    "start": "2359239",
    "end": "2364400"
  },
  {
    "text": "they were running it for a 15 billion clock cycles after 15 seconds of",
    "start": "2364400",
    "end": "2369710"
  },
  {
    "text": "operation what essentially happened after 10 seconds of operation this was 1.5 gigahertz this chip would hang this",
    "start": "2369710",
    "end": "2378049"
  },
  {
    "text": "ship would hang but there would not be any observable failure so how would you go and tell we know what is the bug it",
    "start": "2378049",
    "end": "2384529"
  },
  {
    "text": "took them several months to figure out you know where the bug was so we were challenged you know what we did simply",
    "start": "2384529",
    "end": "2392210"
  },
  {
    "text": "was we took their original test whatever it was running and it was in binary so we did not even know what the test was",
    "start": "2392210",
    "end": "2397279"
  },
  {
    "text": "doing okay you just passed it through this QED you know trick that I just showed you and it took us a few seconds",
    "start": "2397279",
    "end": "2403609"
  },
  {
    "text": "to happy tell that the sequence of eight instructions that was actually causing",
    "start": "2403609",
    "end": "2410300"
  },
  {
    "text": "the problem and you have to find the problem so 8 plus 1 is 9 so as you can see that with nine within nine cycles we",
    "start": "2410300",
    "end": "2416750"
  },
  {
    "text": "could exactly tell where the bug is from that 15 billion and in a few seconds compared to several months okay so it",
    "start": "2416750",
    "end": "2424340"
  },
  {
    "text": "works for logic bugs whatever dollar logic bugs well I was very fortunate that all these companies that are shown",
    "start": "2424340",
    "end": "2430010"
  },
  {
    "text": "over here they gave me access to their actual bog databases where we found a",
    "start": "2430010",
    "end": "2435350"
  },
  {
    "text": "lots of very difficult bugs and one thing that we did is that we abstracted",
    "start": "2435350",
    "end": "2440360"
  },
  {
    "text": "this bugs into something what I call bug benchmark so that the community the",
    "start": "2440360",
    "end": "2446030"
  },
  {
    "text": "academic community can actually use this bug benchmarks to validate their verification techniques the lack of that",
    "start": "2446030",
    "end": "2452420"
  },
  {
    "text": "you are caught in a rot the other line is again over and over again you will",
    "start": "2452420",
    "end": "2458000"
  },
  {
    "start": "2456000",
    "end": "2484000"
  },
  {
    "text": "see that if you run existing ways of doing things you have very long error detection latencies with QED you very",
    "start": "2458000",
    "end": "2464420"
  },
  {
    "text": "significantly improve error detection latencies and you improve coverage this was an industrial cash by a company you",
    "start": "2464420",
    "end": "2471380"
  },
  {
    "text": "can see they were very proud of their tests you can see the 10 billion cycles of error detection latencies versus QED",
    "start": "2471380",
    "end": "2478490"
  },
  {
    "text": "finds it very quickly and it finds unique bugs that they couldn't have found and it goes over and over and on",
    "start": "2478490",
    "end": "2485120"
  },
  {
    "start": "2484000",
    "end": "2507000"
  },
  {
    "text": "and on and on you know like power management bugs you name it up in a farm where Boggs same story i am not going to",
    "start": "2485120",
    "end": "2492530"
  },
  {
    "text": "go through the details is skewed useful for hardware accelerators because aren't",
    "start": "2492530",
    "end": "2497630"
  },
  {
    "text": "we using software and if you had a hardware accelerator which is sort of you know you know shielded from the software how would you you know do QED",
    "start": "2497630",
    "end": "2504710"
  },
  {
    "text": "on that i'm not going to go through the details there is a paper that you know",
    "start": "2504710",
    "end": "2509750"
  },
  {
    "start": "2507000",
    "end": "2592000"
  },
  {
    "text": "talks about this thing the only point that i would like to mention is how do people design accelerators they take a",
    "start": "2509750",
    "end": "2515750"
  },
  {
    "text": "sea level design or c++ design or domain specific language design and bypass it through high level synthesis to create",
    "start": "2515750",
    "end": "2522020"
  },
  {
    "text": "hardware accelerators so when we did this work my challenge to the students was well then we should find bugs in the",
    "start": "2522020",
    "end": "2528770"
  },
  {
    "text": "C code right because that those are the real bugs and guess what we found unique bugs in the sea level design in the C",
    "start": "2528770",
    "end": "2536810"
  },
  {
    "text": "code corresponding to designs that people didn't know about and whoever maintains the sea level designs they confirm with us that those",
    "start": "2536810",
    "end": "2543560"
  },
  {
    "text": "were real bugs that were not found so as I said that you can find bugs in software but we didn't do a very",
    "start": "2543560",
    "end": "2549530"
  },
  {
    "text": "extensive study with you know commercial software that's why I did not make the claim earlier but we have some Inklings",
    "start": "2549530",
    "end": "2555620"
  },
  {
    "text": "that it might work for software too so now the question you know with the",
    "start": "2555620",
    "end": "2563840"
  },
  {
    "text": "symbolic qet technique that you know Clark is going to talk about that's where that comes in so the question",
    "start": "2563840",
    "end": "2569390"
  },
  {
    "text": "really is at this point that now that we have reduced the error detection latencies and you know we have improved coverage how do we really go from you",
    "start": "2569390",
    "end": "2577310"
  },
  {
    "text": "know months to overnight automatically which means that now once i have detected the bug very quickly i should",
    "start": "2577310",
    "end": "2584390"
  },
  {
    "text": "be able to localize the bug automatically without the designer intervention and what does localization",
    "start": "2584390",
    "end": "2590510"
  },
  {
    "text": "mean it means that i should be able to tell where in the big you know chip a tiny piece of hardware where the bug",
    "start": "2590510",
    "end": "2596780"
  },
  {
    "start": "2592000",
    "end": "2861000"
  },
  {
    "text": "resides and what is the nature of the bug which means that some kind of a very short trace that would expose the bug",
    "start": "2596780",
    "end": "2603650"
  },
  {
    "text": "right if it was a for example the logic bug or something and here is what you know Clark is going to show so with the",
    "start": "2603650",
    "end": "2609800"
  },
  {
    "text": "symbolic qvt technique he's going to show results as I said on a half a billion transistors SOC so traditionally",
    "start": "2609800",
    "end": "2616070"
  },
  {
    "text": "it would take weeks or months but a symbolic QED will be able to do this job within 20 minutes to five hours",
    "start": "2616070",
    "end": "2622810"
  },
  {
    "text": "depending on the size of the design blocks and so on traditionally it's manual symbolic QED will do it",
    "start": "2622810",
    "end": "2629330"
  },
  {
    "text": "automatically and finally traditionally you would have this really long bug dresses that you have to look at to find",
    "start": "2629330",
    "end": "2635420"
  },
  {
    "text": "out where exactly the bug is what's causing the bath versus symbolic QED will give you very short tresses very",
    "start": "2635420",
    "end": "2641840"
  },
  {
    "text": "succinct traces to nail down the bug I would stop at this point to take any",
    "start": "2641840",
    "end": "2646880"
  },
  {
    "text": "questions and then hand it over to Clark yes so bit earlier he mentioned that",
    "start": "2646880",
    "end": "2652460"
  },
  {
    "text": "you're mostly just when we talk about software implementations of QED but then",
    "start": "2652460",
    "end": "2657620"
  },
  {
    "text": "you are littered to there being some part where yes there is a mother which I did not talk about but I if you",
    "start": "2657620",
    "end": "2664140"
  },
  {
    "text": "are interested send me an e-mail I'll be very glad to sit down with you and chat about it the point is the hardware",
    "start": "2664140",
    "end": "2669750"
  },
  {
    "text": "overhead of adding that stuff is extremely small and actually you can reuse some of the for example memory",
    "start": "2669750",
    "end": "2675360"
  },
  {
    "text": "built-in self-test controllers that you already have inside your cheap you can use some of that to do the hardware version second question I when you were",
    "start": "2675360",
    "end": "2684030"
  },
  {
    "text": "just talking about high level synthesis based accelerators being saying like what type of accelerators so a whole",
    "start": "2684030",
    "end": "2692130"
  },
  {
    "text": "bunch of accelerators for example signal processing accelerators you know and I think some cryptographic stuff most",
    "start": "2692130",
    "end": "2698460"
  },
  {
    "text": "accelerators that people would use yeah and what we used is like a whole bunch of benchmarks that you know people have",
    "start": "2698460",
    "end": "2704580"
  },
  {
    "text": "academic community uses you gotta push yes you're getting like faster detection by adding these sequences in",
    "start": "2704580",
    "end": "2710960"
  },
  {
    "text": "electricians have you compared it to order the cases they're already industrial cases already include things",
    "start": "2710960",
    "end": "2716400"
  },
  {
    "text": "like Delta debugging my algorithms like test case reduction yes so you know we looked at a whole bunch of industrial",
    "start": "2716400",
    "end": "2723380"
  },
  {
    "text": "examples and all of them have very long error detection latencies that's the",
    "start": "2723380",
    "end": "2730020"
  },
  {
    "text": "trouble you know because most of the for example you know that simplest example of this Delta kind of stuff would be",
    "start": "2730020",
    "end": "2736290"
  },
  {
    "text": "like to you know put in a lot of assertions for example between various points or to have checkpointing for",
    "start": "2736290",
    "end": "2741540"
  },
  {
    "text": "example to go back to a state you know like and so on and so forth and and and",
    "start": "2741540",
    "end": "2747030"
  },
  {
    "text": "all of them have long interdiction latencies go ahead yes it's me silly yeah soft robot so much you do is",
    "start": "2747030",
    "end": "2752310"
  },
  {
    "text": "instead like adding more check once or something you would just say no it doesn't even cut the program in binary",
    "start": "2752310",
    "end": "2759150"
  },
  {
    "text": "search basically and those are very good at finding borebots that reproduce themselves very well but when you have a",
    "start": "2759150",
    "end": "2765600"
  },
  {
    "text": "Heisenberg like a like you know like that those are the most difficult bugs basically it's very hard because next",
    "start": "2765600",
    "end": "2770910"
  },
  {
    "text": "time you will be running those various binary chunks basically the effects of the bugs will be gone you're a question",
    "start": "2770910",
    "end": "2778800"
  },
  {
    "text": "yeah this operation taking here doing your moving reinforce its together yes",
    "start": "2778800",
    "end": "2785010"
  },
  {
    "text": "you know so there's as we noted in pre and post especially what I've been showing me you would see",
    "start": "2785010",
    "end": "2791300"
  },
  {
    "text": "that the exact similar ones you can be used in pre as well sheesh my expertise",
    "start": "2791300",
    "end": "2802280"
  },
  {
    "text": "is in formal methods and we start looking at you know this this qet",
    "start": "2802280",
    "end": "2808280"
  },
  {
    "text": "technique and wondering conformal health tears or something we can do and so the first observation of course is that this",
    "start": "2808280",
    "end": "2815240"
  },
  {
    "text": "everything you've seen so far is still a testing technique right so we take the existing test we make them better but if",
    "start": "2815240",
    "end": "2821600"
  },
  {
    "text": "your original tests can't find the bug then QED won't find the bug either so the first idea we had well is can we",
    "start": "2821600",
    "end": "2828590"
  },
  {
    "text": "make this more exhausted and then I think a nice observation is that all of",
    "start": "2828590",
    "end": "2834350"
  },
  {
    "text": "these two soul technique this cutie technique is based on the observation",
    "start": "2834350",
    "end": "2840140"
  },
  {
    "text": "that if there's above in an SOC the bug is observable by the processor core right because if the if it doesn't",
    "start": "2840140",
    "end": "2847940"
  },
  {
    "text": "affect the processor core in any way it's not a bug so there's a way to use the core as this sort of magic probe",
    "start": "2847940",
    "end": "2854870"
  },
  {
    "text": "that can probe all of the SOC and that's a key idea as well okay so the technique",
    "start": "2854870",
    "end": "2863600"
  },
  {
    "start": "2861000",
    "end": "2900000"
  },
  {
    "text": "we came up with symbolic quick error detection has the following properties",
    "start": "2863600",
    "end": "2868840"
  },
  {
    "text": "so if it is a more exhaustive technique okay so it's going to find bugs that",
    "start": "2868840",
    "end": "2873980"
  },
  {
    "text": "even your tests would miss it's going to do it automatically so it uses an",
    "start": "2873980",
    "end": "2879290"
  },
  {
    "text": "automatic formal engine and it works four cores as well as uncor and other",
    "start": "2879290",
    "end": "2884630"
  },
  {
    "text": "components and then because this is a formal technique meaning it runs on a",
    "start": "2884630",
    "end": "2890060"
  },
  {
    "text": "model of the processor not on the hardware you can use it both pre and post okay and it makes your engineers",
    "start": "2890060",
    "end": "2897500"
  },
  {
    "text": "happy all right so we're going to use a technology called bounded model checking",
    "start": "2897500",
    "end": "2903710"
  },
  {
    "start": "2900000",
    "end": "2948000"
  },
  {
    "text": "and just to introduce this to you if you're not unfamiliar with it the idea is you have a model a design some piece",
    "start": "2903710",
    "end": "2911300"
  },
  {
    "text": "of hardware and then you have to have a property that you want to check a property that this piece of hardware",
    "start": "2911300",
    "end": "2916700"
  },
  {
    "text": "should satisfy you put these two things into a BMC tool let it think and it will",
    "start": "2916700",
    "end": "2922970"
  },
  {
    "text": "automatically you back a counter example if one exists okay now the technology behind mounted",
    "start": "2922970",
    "end": "2929310"
  },
  {
    "text": "mall checking is based on the explosion of improvements in boolean",
    "start": "2929310",
    "end": "2935940"
  },
  {
    "text": "satisfiability and related satisfiability techniques which are remarkable and continue to improve very",
    "start": "2935940",
    "end": "2942030"
  },
  {
    "text": "quickly so so we're leveraging that breakthrough technology now to to show",
    "start": "2942030",
    "end": "2948720"
  },
  {
    "start": "2948000",
    "end": "3029000"
  },
  {
    "text": "you a little bit more in detail how this works what you you can look at your design as you know a set of flip-flops",
    "start": "2948720",
    "end": "2954840"
  },
  {
    "text": "running through some logic back into the flip-flops what we're going to do is we're going to take that sequential design and we're going to unroll it into",
    "start": "2954840",
    "end": "2962100"
  },
  {
    "text": "an into a combinational circuit that represents running that circuit for several cycles now the idea is you would",
    "start": "2962100",
    "end": "2970530"
  },
  {
    "text": "you would put some constraints on the initial set of flip-flops that would represent the state that you want to",
    "start": "2970530",
    "end": "2975750"
  },
  {
    "text": "start in you would put some constraints on the inputs that would represent what kinds of inputs are legal and then you",
    "start": "2975750",
    "end": "2983370"
  },
  {
    "text": "would put a check on the final set of flip-flops that would represent the property that you're trying to look for",
    "start": "2983370",
    "end": "2988770"
  },
  {
    "text": "and then you turn this whole thing into a satisfiability problem and the satisfiability engine looks for some set",
    "start": "2988770",
    "end": "2996330"
  },
  {
    "text": "of inputs that satisfy the constraints that you've given that would cause the property to be violated and if there",
    "start": "2996330",
    "end": "3002810"
  },
  {
    "text": "exists such a set of inputs it will find it furthermore the way you do this typically is you'll unroll it one level",
    "start": "3002810",
    "end": "3009770"
  },
  {
    "text": "at a time and do the check at each level so you're guaranteed to find the shortest the shortest distance from the",
    "start": "3009770",
    "end": "3018110"
  },
  {
    "text": "initial state that actually violates the property so that's one of the the key properties of bounded model checking as",
    "start": "3018110",
    "end": "3023630"
  },
  {
    "text": "you get these short counter examples okay now as you might expect there are",
    "start": "3023630",
    "end": "3031520"
  },
  {
    "start": "3029000",
    "end": "3166000"
  },
  {
    "text": "pros and cons to using this kind of technology so one of the most difficult issues is you have to have this property",
    "start": "3031520",
    "end": "3038570"
  },
  {
    "text": "where does the property come from you know and typically the way about a mile",
    "start": "3038570",
    "end": "3043610"
  },
  {
    "text": "checking is used in industries people right manual properties or they have some sort of automatic assertions that",
    "start": "3043610",
    "end": "3049250"
  },
  {
    "text": "get inserted but a lot of those assertions are probably junk or most of them don't catch bugs and just take up",
    "start": "3049250",
    "end": "3055220"
  },
  {
    "text": "extra space so this is not this is a typically one big bottle net",
    "start": "3055220",
    "end": "3060289"
  },
  {
    "text": "the other the other thing the next to the bounded model checking bound in the design sighs so for a lot obviously for",
    "start": "3060289",
    "end": "3067999"
  },
  {
    "text": "larger circuits you can unroll less but in any case you know there's sort of a",
    "start": "3067999",
    "end": "3073759"
  },
  {
    "text": "limit to how many cycles you can unroll before even the even today's fast",
    "start": "3073759",
    "end": "3078859"
  },
  {
    "text": "engines get bogged down and then of course the input constraints also need",
    "start": "3078859",
    "end": "3084440"
  },
  {
    "text": "to be specified and that's that's a project a problem that's dual to the property problem what's very nice about",
    "start": "3084440",
    "end": "3090499"
  },
  {
    "text": "the technique that we have is we in a very nice way we're able to deal with",
    "start": "3090499",
    "end": "3096499"
  },
  {
    "text": "all these problems so i'm going to show you how we deal with the property problem and basically what we're doing is we're leveraging the QED to come up",
    "start": "3096499",
    "end": "3104660"
  },
  {
    "text": "with a universal property which i think is very exciting the other thing is because the QED technique is designed to",
    "start": "3104660",
    "end": "3111529"
  },
  {
    "text": "find bugs fast we end up only having to unroll a few cycles we also have a",
    "start": "3111529",
    "end": "3117199"
  },
  {
    "text": "technique for dealing with large associés and part of the properties of QED allow us to partition the SOC in",
    "start": "3117199",
    "end": "3125509"
  },
  {
    "text": "various ways to get around a large design size and then we have a hardware",
    "start": "3125509",
    "end": "3130789"
  },
  {
    "text": "module that's only used during testing you don't have to put on your chip call the QED module that helps solve the",
    "start": "3130789",
    "end": "3137779"
  },
  {
    "text": "problem of the input constraints ok so the first problem I'm going to look at is the property issue so you don't know",
    "start": "3137779",
    "end": "3145609"
  },
  {
    "text": "what the bugs you're looking for so that makes it difficult to write good properties you would you ideally you",
    "start": "3145609",
    "end": "3151400"
  },
  {
    "text": "would like to write properties that cover all possible bugs but this is very difficult ok so the current state of the",
    "start": "3151400",
    "end": "3158569"
  },
  {
    "text": "art is that properties are big bottleneck and then the other challenge like I mentioned is the size so to",
    "start": "3158569",
    "end": "3167660"
  },
  {
    "start": "3166000",
    "end": "3239000"
  },
  {
    "text": "address property one what how on earth are we going to come up with the universal property ok so the key idea is",
    "start": "3167660",
    "end": "3175150"
  },
  {
    "text": "the property that we're going to check is does there exist any QED test that",
    "start": "3175150",
    "end": "3182539"
  },
  {
    "text": "could fail ok so we're going to leverage this idea of the QED test and we're",
    "start": "3182539",
    "end": "3188180"
  },
  {
    "text": "going to allow it to range over all possible sequences of instructions shins so just to remind you what was",
    "start": "3188180",
    "end": "3194690"
  },
  {
    "text": "said earlier this duplicate and duplicate and check technique it would",
    "start": "3194690",
    "end": "3200030"
  },
  {
    "text": "take a sequence of instructions duplicate them on a on a shadow set of registers in memory and then compare the",
    "start": "3200030",
    "end": "3206090"
  },
  {
    "text": "results okay so we can do this symbolically right so rather than saying",
    "start": "3206090",
    "end": "3212980"
  },
  {
    "text": "we're going to pick these three you know the instructions from your test we're going to say we're going to flip it on",
    "start": "3212980",
    "end": "3218930"
  },
  {
    "text": "its head and say the bounded model checker will now pick from the set of all possible instructions a sequence of",
    "start": "3218930",
    "end": "3225200"
  },
  {
    "text": "instructions and then we're going to duplicate that sequence and we're going to check if the result is is identical",
    "start": "3225200",
    "end": "3230690"
  },
  {
    "text": "and that whole problem now is symbolic so it's going to search the space of all possible sequences and duplicate",
    "start": "3230690",
    "end": "3236000"
  },
  {
    "text": "sequences okay now we have to be a",
    "start": "3236000",
    "end": "3241550"
  },
  {
    "start": "3239000",
    "end": "3294000"
  },
  {
    "text": "little bit careful about the property that we're checking right so in QED the property that we check is that the",
    "start": "3241550",
    "end": "3247220"
  },
  {
    "text": "registers and the shadow registers match obviously this isn't going to work",
    "start": "3247220",
    "end": "3253280"
  },
  {
    "text": "unless we are a little bit more careful about what the sequence looks like right so you could trivially set the two",
    "start": "3253280",
    "end": "3260210"
  },
  {
    "text": "registers to different values that's the legal sequence of instructions and it wouldn't match so what we have to do is",
    "start": "3260210",
    "end": "3265550"
  },
  {
    "text": "constrain the input sequence to be what we call a QED trace meaning that it",
    "start": "3265550",
    "end": "3271130"
  },
  {
    "text": "consists of a set of instructions followed by a duplicate set of instructions and only at that point do we check the result okay I think I just",
    "start": "3271130",
    "end": "3281900"
  },
  {
    "text": "said that in order to do that now that that kind of a constraint is a little",
    "start": "3281900",
    "end": "3287420"
  },
  {
    "text": "bit difficult to write so we're going to we're going to utilize a piece of hardware to do it this QED module so the",
    "start": "3287420",
    "end": "3294380"
  },
  {
    "start": "3294000",
    "end": "3421000"
  },
  {
    "text": "idea is we add this little QED module to our fetch unit and what happens is the",
    "start": "3294380",
    "end": "3299870"
  },
  {
    "text": "set of instructions that the bounded model checker chooses then passed through the module and the module",
    "start": "3299870",
    "end": "3307310"
  },
  {
    "text": "produces two sequences and this is actually pretty easy to do all you have to do is decode the instruction look for",
    "start": "3307310",
    "end": "3314000"
  },
  {
    "text": "the parts of the instructions that deal with either registers or memory and just move those into the shadow registers and",
    "start": "3314000",
    "end": "3320090"
  },
  {
    "text": "shadow memory when you do the duplicate okay so you basically have just a little state machine it's going to run sequence and then it's going to rerun",
    "start": "3320090",
    "end": "3326510"
  },
  {
    "text": "the same sequence and the second time you have the duplicate flag on and it's just going to make this transformation",
    "start": "3326510",
    "end": "3331610"
  },
  {
    "text": "okay and we've implemented this and the module is is not it's not difficult to",
    "start": "3331610",
    "end": "3337010"
  },
  {
    "text": "implement okay all right so how does this work now so we have the QED module",
    "start": "3337010",
    "end": "3344630"
  },
  {
    "text": "attached the processor core it automatically duplication instructions and it also knows when it's legal to do",
    "start": "3344630",
    "end": "3350240"
  },
  {
    "text": "this comparison right basically it's just you know I'm not going into all the",
    "start": "3350240",
    "end": "3355340"
  },
  {
    "text": "details but you know you have to be a little bit careful about things like when instructions commit and stuff like this so it tracks all of that and it",
    "start": "3355340",
    "end": "3361790"
  },
  {
    "text": "knows when both the original and the duplicate set of instructions are finished and committed and when it's",
    "start": "3361790",
    "end": "3366890"
  },
  {
    "text": "legal to compare the results okay now of course you also have to be careful about",
    "start": "3366890",
    "end": "3372800"
  },
  {
    "text": "the initial state remember I said part of setting up a bounded model checking problem is getting the right initial",
    "start": "3372800",
    "end": "3378230"
  },
  {
    "text": "state and hear what we have to do is just ensure that in the initial state the original and shadow copies of",
    "start": "3378230",
    "end": "3384260"
  },
  {
    "text": "everything are the same okay now you could do that symbolically what we found",
    "start": "3384260",
    "end": "3390350"
  },
  {
    "text": "is it was good enough just to run some simple simulation get to what we call a",
    "start": "3390350",
    "end": "3395870"
  },
  {
    "text": "QED consistent state where the the original and shadow memories and registers are the same and we just",
    "start": "3395870",
    "end": "3402140"
  },
  {
    "text": "extract that state and dump it into the mounted model checker and it turned out you know in our experiments what we saw",
    "start": "3402140",
    "end": "3408950"
  },
  {
    "text": "was that it didn't matter too much what tests we ran or you know at what point we captured the result just as long as",
    "start": "3408950",
    "end": "3416240"
  },
  {
    "text": "we had some consistent state it was it was able to work okay now remember what",
    "start": "3416240",
    "end": "3425240"
  },
  {
    "start": "3421000",
    "end": "3520000"
  },
  {
    "text": "suba she said that we have that QED has this property of guaranteeing quick detection what this means is that",
    "start": "3425240",
    "end": "3433540"
  },
  {
    "text": "because because we have this this property will be able to find a will",
    "start": "3433540",
    "end": "3441920"
  },
  {
    "text": "usually be able to find a bug if one exists in a few cycles and this addresses the issue of you know bounded",
    "start": "3441920",
    "end": "3448280"
  },
  {
    "text": "model checking gets worse as you unroll more cycles in fact for the for the",
    "start": "3448280",
    "end": "3453530"
  },
  {
    "text": "results will show you later we were able to find all the bugs in something like less than 10 psychic",
    "start": "3453530",
    "end": "3458870"
  },
  {
    "text": "so so there was always some QED test of just a few cycles long that would detect",
    "start": "3458870",
    "end": "3464750"
  },
  {
    "text": "the bug okay now of course you can invent pathological examples where this",
    "start": "3464750",
    "end": "3470810"
  },
  {
    "text": "is not the case but but for real bugs we believe this is the case okay so what do",
    "start": "3470810",
    "end": "3477890"
  },
  {
    "text": "we have now so now we have this Universal property we're going to search the space of all QED tests we have the",
    "start": "3477890",
    "end": "3485240"
  },
  {
    "text": "initial state that's just some QED consistent state and then we have our model plus the QED module and we're",
    "start": "3485240",
    "end": "3492620"
  },
  {
    "text": "going to put all that together into the bounded mall checker okay so that",
    "start": "3492620",
    "end": "3498710"
  },
  {
    "text": "addresses the first challenge which is properties which i think is pretty exciting so for basically if you have a",
    "start": "3498710",
    "end": "3505040"
  },
  {
    "text": "chip with processor with a core that has instructions you can apply this technique and you don't have to write",
    "start": "3505040",
    "end": "3512180"
  },
  {
    "text": "properties right you can just use the QED property now what about the second",
    "start": "3512180",
    "end": "3517910"
  },
  {
    "text": "challenge the design sighs okay so the idea we have here is to use something",
    "start": "3517910",
    "end": "3523610"
  },
  {
    "start": "3520000",
    "end": "4717000"
  },
  {
    "text": "called partial instantiation because in a multi-core chip what you typically have is lots of repeated components and",
    "start": "3523610",
    "end": "3530360"
  },
  {
    "text": "so we don't actually need all of the components in the soc in order to exercise the functionality in particular",
    "start": "3530360",
    "end": "3538190"
  },
  {
    "text": "for example if there's a bug in the uncor most likely we can find it with a single core worst case probably two",
    "start": "3538190",
    "end": "3545270"
  },
  {
    "text": "cores and some combination of instructions and those two cores will exercise the bug on the other hand if we",
    "start": "3545270",
    "end": "3551810"
  },
  {
    "text": "have a bug in the core we just need a core we don't need any of the uncor and so on so our idea is basically to just",
    "start": "3551810",
    "end": "3559280"
  },
  {
    "text": "partition this up in a bunch of different ways you know pick a partition like this pick another partition looks",
    "start": "3559280",
    "end": "3566240"
  },
  {
    "text": "like this another one looks like this and we're just going to run all of these different partitions in parallel and",
    "start": "3566240",
    "end": "3572020"
  },
  {
    "text": "whichever one pops out with a bug first great we'll take it furthermore what",
    "start": "3572020",
    "end": "3578690"
  },
  {
    "text": "this allows you to do is to localize with respect to the actual location the",
    "start": "3578690",
    "end": "3585290"
  },
  {
    "text": "module in the design so for example if we get to results with a bug trace",
    "start": "3585290",
    "end": "3591800"
  },
  {
    "text": "then we can look at the two and say AHA this one doesn't need that extra cash",
    "start": "3591800",
    "end": "3597830"
  },
  {
    "text": "mate we can find it with just a single cash mate ok so now why does this work",
    "start": "3597830",
    "end": "3604720"
  },
  {
    "text": "basically there's a key idea here which is this technique of using QED tests as",
    "start": "3604960",
    "end": "3611210"
  },
  {
    "text": "a property gives you a very nice compositional property right so suppose you are just writing assertions and you",
    "start": "3611210",
    "end": "3617600"
  },
  {
    "text": "want to check something about cache coherency you might have a property that",
    "start": "3617600",
    "end": "3622790"
  },
  {
    "text": "says something like if core one writes a particular line in the cache and core two reads the line then the line is in",
    "start": "3622790",
    "end": "3630380"
  },
  {
    "text": "the shared state ok so this is a great property it'll catch that bug but it's",
    "start": "3630380",
    "end": "3644990"
  },
  {
    "text": "not compositional with respect to removing parts of the design so if i",
    "start": "3644990",
    "end": "3650300"
  },
  {
    "text": "remove core two now what does this property become that doesn't make sense",
    "start": "3650300",
    "end": "3655390"
  },
  {
    "text": "however the QED checks are compositional because as long as you keep at least one",
    "start": "3655390",
    "end": "3661520"
  },
  {
    "text": "core you can run instructions on that core and you can configure your your system to have as many caches or memory",
    "start": "3661520",
    "end": "3668870"
  },
  {
    "text": "banks and basically you just have to have some legal configuration and these things are designed to be plugged together in various ways so just you",
    "start": "3668870",
    "end": "3676700"
  },
  {
    "text": "just have to have various legal configurations and all of them should work ok so the cute the property of QED",
    "start": "3676700",
    "end": "3683750"
  },
  {
    "text": "consistency or checking the QED test works for all of these configurations so it is compositional all right so to",
    "start": "3683750",
    "end": "3692660"
  },
  {
    "text": "summarize we have our universal property we have partial instances with the QED",
    "start": "3692660",
    "end": "3699140"
  },
  {
    "text": "modules and we put all this together in our bounded model checker tool and and",
    "start": "3699140",
    "end": "3705530"
  },
  {
    "text": "you can run this you know and within a few hours you do get these results ok so",
    "start": "3705530",
    "end": "3711680"
  },
  {
    "text": "i'm going to show you one example and i'll talk about results so what does it",
    "start": "3711680",
    "end": "3717050"
  },
  {
    "text": "look like for for very specific example suppose that we have a bug which at",
    "start": "3717050",
    "end": "3722570"
  },
  {
    "text": "which manifests as follows after you load from consecutive cache",
    "start": "3722570",
    "end": "3727590"
  },
  {
    "text": "lines the next load is corrupted alright",
    "start": "3727590",
    "end": "3732750"
  },
  {
    "text": "so what we would do is we would set the prop the property so we don't even know",
    "start": "3732750",
    "end": "3738690"
  },
  {
    "text": "what this bug is right we're just going to generally check whether there's any QED test that does something strange so",
    "start": "3738690",
    "end": "3747320"
  },
  {
    "text": "using this particular example symbolic you ed can find a bug trace with four instructions to original and to",
    "start": "3747320",
    "end": "3754380"
  },
  {
    "text": "duplicate instructions and what happens is basically it says we're going to load",
    "start": "3754380",
    "end": "3759410"
  },
  {
    "text": "our one from a particular memory address then load our two and notice that we're",
    "start": "3759410",
    "end": "3766140"
  },
  {
    "text": "loading our two from a consecutive cache line ok so the bug gets triggered now",
    "start": "3766140",
    "end": "3772430"
  },
  {
    "text": "these two instructions pass through the QED module and and for the first two",
    "start": "3772430",
    "end": "3778590"
  },
  {
    "text": "instructions it's just a no op right it's just identity function now we get to the end of the sequence and we send a",
    "start": "3778590",
    "end": "3785400"
  },
  {
    "text": "restart signal so the pc gets set back to the address of the first instruction and we actually load those two",
    "start": "3785400",
    "end": "3792120"
  },
  {
    "text": "instructions again but now the QED module is in the duplicate mode and it's going to transform them by changing the",
    "start": "3792120",
    "end": "3798900"
  },
  {
    "text": "register and the memory to use the duplicate address now what's going to happen is the load into our 17 is going",
    "start": "3798900",
    "end": "3806040"
  },
  {
    "text": "to get corrupted that's the that's the bug is that the next load after loads from consecutive cache lines is",
    "start": "3806040",
    "end": "3811920"
  },
  {
    "text": "corrupted so our 17 is not going to match our one and so when we get to the",
    "start": "3811920",
    "end": "3817530"
  },
  {
    "text": "final state our QED our BMC property that the registers in the shadows match",
    "start": "3817530",
    "end": "3822690"
  },
  {
    "text": "will be violated ok all right so just so",
    "start": "3822690",
    "end": "3831480"
  },
  {
    "text": "to review these are this is what we get and let's look at some results ok so we",
    "start": "3831480",
    "end": "3840240"
  },
  {
    "text": "did a case study using the open spark t2 this is a very large chip it's got half",
    "start": "3840240",
    "end": "3846810"
  },
  {
    "text": "a billion transistors and we inserted 92 difficult logic bugs that the bugs were",
    "start": "3846810",
    "end": "3852390"
  },
  {
    "text": "taken from various bugs in the database where we had all kinds of different activation criteria",
    "start": "3852390",
    "end": "3858140"
  },
  {
    "text": "mine's a different manifestations they included bugs in the core bugs in the uncor and power management bugs okay and",
    "start": "3858140",
    "end": "3868369"
  },
  {
    "text": "the first the first point to make is that any one of these bugs would be",
    "start": "3868369",
    "end": "3873950"
  },
  {
    "text": "extremely difficult to localize running the bounded mall checking was automatic",
    "start": "3873950",
    "end": "3880789"
  },
  {
    "text": "so once we'd set up the environment is the same environment for all the bugs it takes anywhere from 20 minutes to seven",
    "start": "3880789",
    "end": "3888109"
  },
  {
    "text": "hours okay and it found all of them and this gives you a little bit of a this",
    "start": "3888109",
    "end": "3895400"
  },
  {
    "text": "drills down a little bit showing you the time so for the processor core bugs it found them you quite quickly and one and",
    "start": "3895400",
    "end": "3901519"
  },
  {
    "text": "the reason is you only need to run bound and while checking on a single core to find these bugs right so you you have a",
    "start": "3901519",
    "end": "3907700"
  },
  {
    "text": "smaller design and you can find them quickly for the uncor bugs it took a little bit longer but still it was still",
    "start": "3907700",
    "end": "3915559"
  },
  {
    "text": "tractable and power management bugs find those too okay and just another point",
    "start": "3915559",
    "end": "3924710"
  },
  {
    "text": "here we ran we basically ran symbolic QED with an initial state obtained by",
    "start": "3924710",
    "end": "3930140"
  },
  {
    "text": "running an fft QED test and i'll show you also some comparisons of i think",
    "start": "3930140",
    "end": "3936890"
  },
  {
    "text": "i'll show you if not i'll tell you the comparison of what happens if you run QED versus symbolic QED ok now here's",
    "start": "3936890",
    "end": "3946700"
  },
  {
    "text": "where the real magic happens is the reduction in the bug trace okay so if",
    "start": "3946700",
    "end": "3952609"
  },
  {
    "text": "you run uh I'm not sure I actually have the results with comparing with QT I",
    "start": "3952609",
    "end": "3958759"
  },
  {
    "text": "don't ok so let me just tell you so if you what we found is if you run the",
    "start": "3958759",
    "end": "3964430"
  },
  {
    "text": "original test like fft or something else and just do end result checks basically",
    "start": "3964430",
    "end": "3971180"
  },
  {
    "text": "what you get is you know millions of clock cycles and we found half of the bugs okay if you run if you now take the",
    "start": "3971180",
    "end": "3978920"
  },
  {
    "text": "f of t test use the QED transforms on it you find all the bugs that's great the",
    "start": "3978920",
    "end": "3984470"
  },
  {
    "text": "error reduction the error latency is reduced to something on the order of a hundred to a thousand",
    "start": "3984470",
    "end": "3991340"
  },
  {
    "text": "clock cycles you do the same now if you take the same buggy design and run it",
    "start": "3991340",
    "end": "3996530"
  },
  {
    "text": "through symbolic you Ed it spits out a trace that is something like five instructions okay so even if you got",
    "start": "3996530",
    "end": "4005260"
  },
  {
    "text": "that 10,000 cycle trace from QED it still it would take a while to debug",
    "start": "4005260",
    "end": "4010420"
  },
  {
    "text": "that if you if you're given a trace of five instructions I mean that's going to take you a few minutes right you can you",
    "start": "4010420",
    "end": "4017470"
  },
  {
    "text": "can use a waveform viewer you can like trace through exactly what's going on and and that really gives you what you",
    "start": "4017470",
    "end": "4024160"
  },
  {
    "text": "need to find these things quickly okay",
    "start": "4024160",
    "end": "4029640"
  },
  {
    "text": "right so so yeah this is comparing against the original end result checks",
    "start": "4031500",
    "end": "4037650"
  },
  {
    "text": "just in more detail so like I said the original test found only half the bugs symbolic UT finds all the bugs the",
    "start": "4037650",
    "end": "4045550"
  },
  {
    "text": "number of cycles is something like you know on the order of 1 to 10 million and",
    "start": "4045550",
    "end": "4051250"
  },
  {
    "text": "the number of cycles for symbolic you ities on the order of 10 to 30 all right",
    "start": "4051250",
    "end": "4060940"
  },
  {
    "text": "so happy engineers all right so that's that's just to summarize then what we",
    "start": "4060940",
    "end": "4068560"
  },
  {
    "text": "have with with QED and symbolic QED is a set of techniques for finding bugs both",
    "start": "4068560",
    "end": "4074320"
  },
  {
    "text": "pre and post silicon drastically improving the error detection latency",
    "start": "4074320",
    "end": "4080880"
  },
  {
    "text": "giving you shorter error traces that you can debug quickly and this works for for",
    "start": "4080880",
    "end": "4088390"
  },
  {
    "text": "all kinds of bugs core encore etc the QED technique of course works for",
    "start": "4088390",
    "end": "4094090"
  },
  {
    "text": "electrical bugs post silicon symbolic QED technique that I presented today is only for logic bugs but we have work in",
    "start": "4094090",
    "end": "4101470"
  },
  {
    "text": "progress for how you might adapt that to even help find the electrical bugs post",
    "start": "4101470",
    "end": "4106779"
  },
  {
    "text": "silicon all right and I'll stop there and take any questions",
    "start": "4106780",
    "end": "4112140"
  },
  {
    "text": "I'm surprised you didn't say that we inserted 92 bucks and 518 because what",
    "start": "4114320",
    "end": "4123450"
  },
  {
    "text": "are the odds that there's not seen other bugs in the hot part that is right so we",
    "start": "4123450",
    "end": "4129540"
  },
  {
    "text": "actually were hoping to find some unknown bug and open spark we ran",
    "start": "4129540",
    "end": "4135088"
  },
  {
    "text": "symbolic QED up to a window I think of like 50 cycles now we didn't we didn't",
    "start": "4135089",
    "end": "4140700"
  },
  {
    "text": "find any so I guess open spark is a pretty thoroughly debug design you know",
    "start": "4140700",
    "end": "4147330"
  },
  {
    "text": "it could be that there are still bugs in there and and maybe if we we didn't use any diversity here right so you could do",
    "start": "4147330",
    "end": "4155520"
  },
  {
    "text": "symbolic you ed with diversity by having the QED module insert diversity as it transforms so yeah there are some other",
    "start": "4155520",
    "end": "4163350"
  },
  {
    "text": "things you know this is sort of a first proof of concept but yeah I suspect that with a less vetted design we would find",
    "start": "4163350",
    "end": "4171270"
  },
  {
    "text": "something yeah",
    "start": "4171270",
    "end": "4174560"
  },
  {
    "text": "so surely there are any number of us well that it designs in the world from",
    "start": "4176890",
    "end": "4182290"
  },
  {
    "text": "people that might welcome your help finding motors they don't already know about yeah we've been talking to a",
    "start": "4182290",
    "end": "4190330"
  },
  {
    "text": "number of Industry people who are interested in this yeah tortured those",
    "start": "4190330",
    "end": "4197860"
  },
  {
    "text": "pokey designs may have never survived right only did the graveyard yeah so 11",
    "start": "4197860",
    "end": "4205060"
  },
  {
    "text": "tests we did want to try that we didn't was maybe going back you know taking like revision histories and looking at",
    "start": "4205060",
    "end": "4211420"
  },
  {
    "text": "old buggy designs but I think the bugs there probably are are less difficult to",
    "start": "4211420",
    "end": "4216760"
  },
  {
    "text": "find the ones we inserted so I think we find them yeah I remember way about talking to both until the Sun but design",
    "start": "4216760",
    "end": "4224770"
  },
  {
    "text": "tools and Gaver the liver generally you should turn the camera on the fin Sons",
    "start": "4224770",
    "end": "4230560"
  },
  {
    "text": "songs design up to they found fewer errors may be that they were decides are",
    "start": "4230560",
    "end": "4236440"
  },
  {
    "text": "so good at the hardware whatever checking they did afterwards they didn't find too many bars on because each",
    "start": "4236440",
    "end": "4242140"
  },
  {
    "text": "outfit find a lot so they're very happy those two yeah gives you a few hints but",
    "start": "4242140",
    "end": "4248350"
  },
  {
    "text": "like super don't share who goes these these days nobody's nobody's not tiny",
    "start": "4248350",
    "end": "4253780"
  },
  {
    "text": "bugs right because the complexity is just pushing available yeah well they",
    "start": "4253780",
    "end": "4258790"
  },
  {
    "text": "have those young designers they don't have his old great reflection should have asked me um the Martin sort of",
    "start": "4258790",
    "end": "4269830"
  },
  {
    "text": "mentioned at the the old lockstep or redundant computation stuff with a",
    "start": "4269830",
    "end": "4275650"
  },
  {
    "text": "little diversity was that sort of proto QED in the sense that what I'm love",
    "start": "4275650",
    "end": "4280960"
  },
  {
    "text": "their different you just don't know why so was it possible they were detecting bugs and just writing it off with",
    "start": "4280960",
    "end": "4287410"
  },
  {
    "text": "something else because you weren't doing you put the computation frequent checks",
    "start": "4287410",
    "end": "4296610"
  },
  {
    "text": "deep inside Margaret back when they I believe the frame praise when Intel was",
    "start": "4296610",
    "end": "4302590"
  },
  {
    "text": "not bigger than IBM and I be able to say mainframe quality processors as opposed",
    "start": "4302590",
    "end": "4308680"
  },
  {
    "text": "to those toys yeah I think it's fair to say there a number of inspirations for QED and some things",
    "start": "4308680",
    "end": "4314230"
  },
  {
    "text": "that are similar i think what's really been done here is to sort of systematize it and and you know love us and was",
    "start": "4314230",
    "end": "4322000"
  },
  {
    "text": "testing i'm saying they were just finding finding discrepancies run it off to something else and yeah never",
    "start": "4322000",
    "end": "4330070"
  },
  {
    "text": "realized what there was a bug and instead of called called a very temporary fault akshay attic and even",
    "start": "4330070",
    "end": "4337810"
  },
  {
    "text": "more gray hair cut my flame i asked him about it I could that's how it started and he designed the floating point unit",
    "start": "4337810",
    "end": "4344350"
  },
  {
    "text": "for the IMC 6071 not meaningful but I going look 91 91 sorry oh and you",
    "start": "4344350",
    "end": "4353920"
  },
  {
    "text": "basically know about numerical analysis so yeah now to brake tests basically do",
    "start": "4353920",
    "end": "4359520"
  },
  {
    "text": "which are the digital analogue if you weigh show they get your version of",
    "start": "4359520",
    "end": "4364540"
  },
  {
    "text": "parody that's the reason why I mentioned parody before the miniature the findings",
    "start": "4364540",
    "end": "4369760"
  },
  {
    "text": "you can do high order parity the highest story is essentially majority okay so",
    "start": "4369760",
    "end": "4375130"
  },
  {
    "text": "you can have a whole complete spectrum yeah I mean there are a lot of other great techniques and in fact until you",
    "start": "4375130",
    "end": "4382929"
  },
  {
    "text": "has some very good formal people and they do they do some things actually",
    "start": "4382929",
    "end": "4389020"
  },
  {
    "text": "with higher order theorem proving where they where they take in particularly for their floating point stuff they're",
    "start": "4389020",
    "end": "4394840"
  },
  {
    "text": "actually able to you know come up with an algebraic model prove that against",
    "start": "4394840",
    "end": "4400090"
  },
  {
    "text": "some an intermediate model and then prove that against the actual rtl they have you know I some of that work is",
    "start": "4400090",
    "end": "4405969"
  },
  {
    "text": "really good i'll agree it's obviously in the algebraic content and that's why did",
    "start": "4405969",
    "end": "4411040"
  },
  {
    "text": "mention miami for but they are digital equivalent she said satisfiability what",
    "start": "4411040",
    "end": "4417699"
  },
  {
    "text": "does it really mean oh well it doesn't make one more bad jokes oh but your QED",
    "start": "4417699",
    "end": "4424960"
  },
  {
    "text": "you know there's also another meaning of QED what am I like two dynamics and quantum computing if you wish I have",
    "start": "4424960",
    "end": "4433060"
  },
  {
    "text": "something more reason than that that's cool pencil networks essentially they use singular value decomposition to get",
    "start": "4433060",
    "end": "4439840"
  },
  {
    "text": "close and that there's a boolean equivalent to that because what he satisfiability it's such",
    "start": "4439840",
    "end": "4445970"
  },
  {
    "text": "a question I can it being boarded because he is the logic any put that out",
    "start": "4445970",
    "end": "4451310"
  },
  {
    "text": "but would be invertible that's obvious now obviously most our circuits or not although they typically have a las told",
    "start": "4451310",
    "end": "4459950"
  },
  {
    "text": "me about the number of typically put same logic partisan square root of number of outputs up having more outputs",
    "start": "4459950",
    "end": "4466760"
  },
  {
    "text": "it's much more likely to make it invertible at that point you can basically use is in portability",
    "start": "4466760",
    "end": "4472790"
  },
  {
    "text": "properties then you can do it much more systematically even for the logic the",
    "start": "4472790",
    "end": "4478040"
  },
  {
    "text": "fun part is that's what's happening implicitly in quantum computing executive-level back this table number",
    "start": "4478040",
    "end": "4484460"
  },
  {
    "text": "alpha I don't art and via the satisfiability engines that we're using",
    "start": "4484460",
    "end": "4491210"
  },
  {
    "text": "here are you know they're quite at this kid so we used the mentor graphics",
    "start": "4491210",
    "end": "4497090"
  },
  {
    "text": "engine and the reason we use that is because I was actually involved in developing that inch and a long time ago",
    "start": "4497090",
    "end": "4502820"
  },
  {
    "text": "and it was a part of 0 and design automation my advisor was David Diehl would we work together on that but they",
    "start": "4502820",
    "end": "4510140"
  },
  {
    "text": "have higher you know I know that team and they have you know really good people who are up on the very latest",
    "start": "4510140",
    "end": "4515540"
  },
  {
    "text": "satisfiability techniques so it's actually you know that in and of itself just the satisfiability engine is quite",
    "start": "4515540",
    "end": "4521210"
  },
  {
    "text": "a marvel of technology so we're trying to leverage that as much as possible except most of these people don't know",
    "start": "4521210",
    "end": "4527150"
  },
  {
    "text": "anything about physics so they have a learned that the QED tricks to go around",
    "start": "4527150",
    "end": "4532340"
  },
  {
    "text": "in there basically QED but inherently as in portable operators right and that can be mapped back and ordinary logic I'm",
    "start": "4532340",
    "end": "4545510"
  },
  {
    "text": "thinking that one of the ways the military is criticized is they say the",
    "start": "4545510",
    "end": "4550610"
  },
  {
    "text": "generals are constantly fighting the previous war you know after ad we can't",
    "start": "4550610",
    "end": "4556070"
  },
  {
    "text": "agree after you've gone through something and you know that a possibility exists you get really good",
    "start": "4556070",
    "end": "4561560"
  },
  {
    "text": "at rediscovering that possibility to what extent are you might your system be",
    "start": "4561560",
    "end": "4570350"
  },
  {
    "text": "especially well suited finding the sorts of bugs you yourself can already envision it as opposed to",
    "start": "4570350",
    "end": "4576860"
  },
  {
    "text": "the sorts of bugs that nobody will see coming until lip and found and then they discover that your tools fail to take",
    "start": "4576860",
    "end": "4583370"
  },
  {
    "text": "that into account so I actually would be quite interested in exploring that question because what so I what I like",
    "start": "4583370",
    "end": "4590660"
  },
  {
    "text": "about this technique is it's very general right it will catch it will basically tell you if there is any QED",
    "start": "4590660",
    "end": "4596330"
  },
  {
    "text": "test that could fail so the question is what are the kinds of bugs that cannot",
    "start": "4596330",
    "end": "4602090"
  },
  {
    "text": "be caught by acuity test of some reasonable size right so it could fail in a couple of ways one is that for some",
    "start": "4602090",
    "end": "4608930"
  },
  {
    "text": "reason you know this this duplicate and duplicate in check with diversity still",
    "start": "4608930",
    "end": "4615440"
  },
  {
    "text": "misses it right and what is the class of bugs that that might miss I I think that's an excellent research question and then the other thing is what are the",
    "start": "4615440",
    "end": "4622520"
  },
  {
    "text": "classes of bugs that are only found where the minimum QED test is really",
    "start": "4622520",
    "end": "4627530"
  },
  {
    "text": "really long right that would be another class of bugs that we would have difficulty finding so you know what I",
    "start": "4627530",
    "end": "4634520"
  },
  {
    "text": "would love to do is go partner with a real design team and shake out a bunch of bugs first of all I think this is a",
    "start": "4634520",
    "end": "4641660"
  },
  {
    "text": "very general technique I think it's going to shake out a lot of bugs and once you once you're able to run this up",
    "start": "4641660",
    "end": "4647240"
  },
  {
    "text": "to like unrolls of a hundred and you don't find any bugs you know I'm would be pretty happy but then I'd be really",
    "start": "4647240",
    "end": "4653810"
  },
  {
    "text": "interested in knowing what came out after that right what are we missing and then how could you improve this",
    "start": "4653810",
    "end": "4659570"
  },
  {
    "text": "technique and I think sort of a you know in the trenches approach would be a good way to to try understand that problem",
    "start": "4659570",
    "end": "4668080"
  },
  {
    "text": "it's a quick comment of that my period and I own a fairly example it's the",
    "start": "4668080",
    "end": "4673220"
  },
  {
    "text": "simples I can imagine it's not though striking also not the most insightful whatever but they are all that",
    "start": "4673220",
    "end": "4679520"
  },
  {
    "text": "equivalents I said feel the other extremely tight flames or isn't it but",
    "start": "4679520",
    "end": "4684740"
  },
  {
    "text": "again you that's very limited in timonium difficult digital systems these days people cannot imagine any maps that",
    "start": "4684740",
    "end": "4692840"
  },
  {
    "text": "have anything to do with that so the typical approaches don't really help you right but they're they're out there",
    "start": "4692840",
    "end": "4699920"
  },
  {
    "text": "definitely cool well you",
    "start": "4699920",
    "end": "4706020"
  },
  {
    "text": "you",
    "start": "4714110",
    "end": "4716170"
  }
]