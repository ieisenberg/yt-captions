[
  {
    "start": "0",
    "end": "12000"
  },
  {
    "text": "Welcome to the second lecture. First we'll cover just some logistics. So, uh, Homework 1 will be posted today, uh,",
    "start": "5010",
    "end": "15510"
  },
  {
    "start": "12000",
    "end": "102000"
  },
  {
    "text": "and it's gonna be due Monday, October 7th and we'll cover actually some of the topics that will be,",
    "start": "15510",
    "end": "20630"
  },
  {
    "text": "uh, in Homework 1 today. Uh, so pay attention if you wanna be able to do Homework 1.",
    "start": "20630",
    "end": "28769"
  },
  {
    "text": "Uh, fill out preferences for papers by tomorrow so that we can start, uh, assigning papers to you.",
    "start": "28770",
    "end": "34530"
  },
  {
    "text": "We'll- we'll assign papers as quickly as possible especially for the first group that's presenting on Thursday next week.",
    "start": "34530",
    "end": "40045"
  },
  {
    "text": "Uh, also a reminder that the TensorFlow review session is tomorrow on- at 4:30 PM in Gates, B03 that's gonna be led by, uh,",
    "start": "40045",
    "end": "50110"
  },
  {
    "text": "and then if lastly for enrollment, if you filled out the form and, uh,",
    "start": "50110",
    "end": "55730"
  },
  {
    "text": "have not received a permission code then at this point I beli-, unless you filled out the code like a minute ago,",
    "start": "55730",
    "end": "61460"
  },
  {
    "text": "I think we've handled, uh, basically all of the cases so just send us, um, send the staff an email or a post on Piazza asking about that.",
    "start": "61460",
    "end": "69600"
  },
  {
    "text": "And we can, uh, look at that on a case by case basis. If you need to- if you still haven't filled out the form please do fill it out.",
    "start": "69600",
    "end": "76325"
  },
  {
    "text": "Although at this point, um, maybe let us know if you fill it out because we may not be mo- be monitoring it quite as frequently.",
    "start": "76325",
    "end": "82399"
  },
  {
    "text": "Okay, any logistical questions before we- yeah. What time is the homework due? [NOISE]",
    "start": "82400",
    "end": "89020"
  },
  {
    "text": "The homework will be due midnight on Monday October 7th and the date will also be posted- the time and date will be posted on the assignment.",
    "start": "89020",
    "end": "97229"
  },
  {
    "text": "Okay, great, so the plan for today, uh, we actually have a lot of material to cover.",
    "start": "98530",
    "end": "104630"
  },
  {
    "start": "102000",
    "end": "177000"
  },
  {
    "text": "So, uh, first we'll be talking about some of the basics of multi-task learning. Um, things like the types of - the type of models and architectures that these algorithms",
    "start": "104630",
    "end": "112925"
  },
  {
    "text": "typically use as well as how we actually go about the training process for multi-task learning. Uh, some of the challenges that arise when you try to train across multiple tasks and,",
    "start": "112925",
    "end": "122615"
  },
  {
    "text": "um, a case study of actually trying to use multi-task learning in a real-world application.",
    "start": "122615",
    "end": "128215"
  },
  {
    "text": "Uh, and some of the challenges that come up in some of, like, the results that were there. Uh, then we'll have a short break around like two minutes or so.",
    "start": "128215",
    "end": "136185"
  },
  {
    "text": "Uh, and then we'll be covering, um, some topics- uh, some kind of basic topics in meta-learning.",
    "start": "136185",
    "end": "141420"
  },
  {
    "text": "We'll- we'll get into more advanced topics in future lectures. This will include things like the meta-learning problem formulation, uh,",
    "start": "141420",
    "end": "147530"
  },
  {
    "text": "a general recipe of meta-learning algorithms, uh, and kind of how you go about building these types of algorithms.",
    "start": "147530",
    "end": "154020"
  },
  {
    "text": "And then lastly we'll talk about a specific class of meta-learning algorithms called the- that I'm gonna refer to as black-box adaptation approaches.",
    "start": "154020",
    "end": "161329"
  },
  {
    "text": "Uh, and these last two things, uh, actually how you go about setting up a meta-learning algorithm,",
    "start": "161330",
    "end": "166700"
  },
  {
    "text": "and implementing a simple approach to meta-learning will be the topic of Homework 1. Okay, so let's get started,",
    "start": "166700",
    "end": "174560"
  },
  {
    "text": "um, with multi-task learning. So and actually- before we even get into multi-task learning let's look at some notation.",
    "start": "174560",
    "end": "180560"
  },
  {
    "start": "177000",
    "end": "420000"
  },
  {
    "text": "So, uh, say we have some neural network. The neural network is gonna take in some input x and produce some output y.",
    "start": "180560",
    "end": "189579"
  },
  {
    "text": "Uh, and the input might be something like a picture. Uh, maybe the output is the class corresponding to that picture,",
    "start": "189580",
    "end": "197405"
  },
  {
    "text": "uh, the class of the animal for example. Another example of an input might be like the title of a paper for example,",
    "start": "197405",
    "end": "204110"
  },
  {
    "text": "maybe you're, uh, trying to decide which papers to read or which papers that you wanna review. And then you kind of want to decide whether or not the paper's gonna be too long or not.",
    "start": "204110",
    "end": "211340"
  },
  {
    "text": "Um, this is essentially a variety of classification type problems you might imagine. Um, the weights of the network we'll use,",
    "start": "211340",
    "end": "218730"
  },
  {
    "text": "uh, theta to denote the weights. And then you can basically view this neural network as producing a distribution over outputs Y given the input X.",
    "start": "218730",
    "end": "228155"
  },
  {
    "text": "Of course this could also be a deterministic function, um, viewing it as a distribution as a generalization of a deterministic function.",
    "start": "228155",
    "end": "236260"
  },
  {
    "text": "Okay, um, so in single task learning the way that you- this should mostly be review for all of you.",
    "start": "236260",
    "end": "242810"
  },
  {
    "text": "Uh, so single task learning, at least the supervised single task learning problem we have assumed some data-set",
    "start": "242810",
    "end": "248345"
  },
  {
    "text": "where we have input-output pairs. Uh, we probably have many input-output pairs corresponding to that data-set.",
    "start": "248345",
    "end": "254840"
  },
  {
    "text": "And our goal is to minimize some loss function that is a function of, uh, the parameters and the data set.",
    "start": "254840",
    "end": "262109"
  },
  {
    "text": "We want to minimize that loss function with respect to the parameters. And so one typical loss function,",
    "start": "262110",
    "end": "268955"
  },
  {
    "text": "uh, that we may use is something that looks like negative log-likelihood. Uh, so our loss function is going to correspond to the expectation of",
    "start": "268955",
    "end": "276350"
  },
  {
    "text": "the data points in our data-set, of the log probability of our predictions.",
    "start": "276350",
    "end": "281535"
  },
  {
    "text": "Um, the log probability of the labels under our neural network predictor given the input.",
    "start": "281535",
    "end": "287850"
  },
  {
    "text": "Okay so this is kind of standard single task learning. The way that you would typically optimize this log-likelihood",
    "start": "288070",
    "end": "294590"
  },
  {
    "text": "is by back-propagating into the parameters of the network. And running something like SGD or your favorite, uh,",
    "start": "294590",
    "end": "300525"
  },
  {
    "text": "optimizer, Adam, Autograd, Momentum, whatever. Okay. So now we'll actually call a task.",
    "start": "300525",
    "end": "309990"
  },
  {
    "text": "Uh, we talked about this a little bit, uh, last time on Monday and we'll try to talk about this a little bit more formally this time.",
    "start": "309990",
    "end": "317185"
  },
  {
    "text": "So, uh, the way that we're gonna define a task, for the sake of basically the first half of this course before we get to reinforcement learning,",
    "start": "317185",
    "end": "325039"
  },
  {
    "text": "is something that looks like this. Where we're gonna have some distribution over inputs. A distribution over the labels given the inputs and a loss function.",
    "start": "325039",
    "end": "333710"
  },
  {
    "text": "Uh, and essentially these two distributions P are gonna correspond to the true data generating distributions.",
    "start": "333710",
    "end": "342050"
  },
  {
    "text": "Um, and so of course we don't actually have access to these data distribution- data generating distributions but it allows us",
    "start": "342050",
    "end": "348770"
  },
  {
    "text": "to kind of reason about what we're gonna be seeing at training and test time. In particular what we're gonna be seeing, uh,",
    "start": "348770",
    "end": "354470"
  },
  {
    "text": "the kind of things that we will have access to, um, is we'll have a training set and a test set for each task.",
    "start": "354470",
    "end": "360860"
  },
  {
    "text": "Uh, and we'll assume that each of these distributions are drawn from the same data generating distribution P or Pi.",
    "start": "360860",
    "end": "370140"
  },
  {
    "text": "So essentially what a different task corresponds to- different tasks may vary based off of the input distribution,",
    "start": "370780",
    "end": "377014"
  },
  {
    "text": "the label distribution given the input or the loss function. Okay. Um, one notational note,",
    "start": "377015",
    "end": "386880"
  },
  {
    "text": "uh, is that we're all- in future slides I'll be using Di as shorthand for the training data-set.",
    "start": "386880",
    "end": "392150"
  },
  {
    "text": "And yeah we'll get to that in a couple- in a couple of minutes. Any questions on kind of the basic setup? Yeah.",
    "start": "392150",
    "end": "404370"
  },
  {
    "text": "[inaudible] Oh that just means that we're- we're defining the task to be equal to the thing on the right.",
    "start": "404370",
    "end": "412849"
  },
  {
    "text": "Okay so, um, this is our task. Uh, task- for each task we have corresponding data sets,",
    "start": "416130",
    "end": "424120"
  },
  {
    "start": "420000",
    "end": "836000"
  },
  {
    "text": "uh, sampled from, uh, some distribution. Let's look at some examples of what different tasks may be.",
    "start": "424120",
    "end": "430840"
  },
  {
    "text": "In particular what different sets of tasks may be. What- what kind of different problems they correspond to. So for example, uh,",
    "start": "430840",
    "end": "436690"
  },
  {
    "text": "we may have a multi-task classification problem, um, where we want to be able to perform different classification tasks.",
    "start": "436690",
    "end": "442505"
  },
  {
    "text": "Uh, and in this case, the loss function will be the same across all of the tasks. The loss function will be something like cross entropy loss for all the tasks.",
    "start": "442505",
    "end": "450620"
  },
  {
    "text": "Um, but the- the inputs like the images that you're seeing for each task or the labels corresponding to those inputs may vary across different tasks.",
    "start": "450620",
    "end": "460175"
  },
  {
    "text": "For example, uh, maybe different tasks corresponding- correspond to writing, uh, to be able to recognize handwriting digits,",
    "start": "460175",
    "end": "467825"
  },
  {
    "text": "uh, on a per language basis. Maybe you wanna like one task is to be able to recognize, uh, have characters corresponding to Braille for example.",
    "start": "467825",
    "end": "477875"
  },
  {
    "text": "While another, uh, corresponds to another language. Um, another multitask classification task might be like a personalized spam filter.",
    "start": "477875",
    "end": "485795"
  },
  {
    "text": "Uh, the emails that I get are probably very different than, uh, the emails that, eh, a high-schooler gets for example.",
    "start": "485795",
    "end": "492140"
  },
  {
    "text": "Or, um, like a professional athlete for example. And so the types of spam will be different. Uh, so classifying spam for one person could be",
    "start": "492140",
    "end": "499460"
  },
  {
    "text": "one task and classifying spam for another person could be a different task. Um, In that case, the- the loss function is the same across all tasks.",
    "start": "499460",
    "end": "506784"
  },
  {
    "text": "The P of X is different because the types of emails that each person will be receiving- the distribution of emails will be different,",
    "start": "506785",
    "end": "512690"
  },
  {
    "text": "so you'll have a different Pi of X for each person. And also different things might be, uh, one thing- one thing that might be spam for",
    "start": "512690",
    "end": "519060"
  },
  {
    "text": "one person might not be spam for the other person. And so you may have a different P- Pi of y given x.",
    "start": "519060",
    "end": "525720"
  },
  {
    "text": "Okay, um, so that's- that's one example. Another example, uh, of",
    "start": "525720",
    "end": "531140"
  },
  {
    "text": "a multi-task learning problem is what's called multi-label learning. In this case the- the loss function",
    "start": "531140",
    "end": "536584"
  },
  {
    "text": "and the distribution over the inputs is gonna be the same across tasks. And what's gonna be different is you're going to want to be able to make predictions, um,",
    "start": "536585",
    "end": "544149"
  },
  {
    "text": "different, they basically will be able to predict different labels, different, uh, perform different kind of output to tasks,",
    "start": "544150",
    "end": "549290"
  },
  {
    "text": "uh, given your input image. So one example of this is attribute recognition.",
    "start": "549290",
    "end": "554450"
  },
  {
    "text": "So if you have a data-set of faces in this A data-set for example. One task might be correspond to detecting whether or not the person is wearing a hat.",
    "start": "554450",
    "end": "562355"
  },
  {
    "text": "Another one might be correspond to detecting their hair color, things like that. So there p of x is the same.",
    "start": "562355",
    "end": "567710"
  },
  {
    "text": "The loss function is the same but y given x is different because you have different binary classification tasks.",
    "start": "567710",
    "end": "573545"
  },
  {
    "text": "Um, another example is something like seeing and understanding where maybe given an image you want to be able to predict,",
    "start": "573545",
    "end": "579260"
  },
  {
    "text": "uh, the depth of that image. The key- different key points, uh, the surface normals, uh, of that image as well.",
    "start": "579260",
    "end": "585350"
  },
  {
    "text": "So this is a common problem in computer vision. Um, so both these examples were- were settings where",
    "start": "585350",
    "end": "591110"
  },
  {
    "text": "the loss function was actually consistent across all tasks. Uh, and what was varying was the data distribution. Uh, and so what our settings were, the loss function might vary across the tasks.",
    "start": "591110",
    "end": "601550"
  },
  {
    "text": "So one setting is maybe one of your tasks corresponds to predicting a discrete variable whereas",
    "start": "601550",
    "end": "608150"
  },
  {
    "text": "another one corresponds to predicting a continuous variable. Uh, in that case, um, maybe one task- one task might have",
    "start": "608150",
    "end": "613980"
  },
  {
    "text": "a cross-entropy loss function whereas another might correspond to mean squared error, or something more sophisticated than that.",
    "start": "613980",
    "end": "620459"
  },
  {
    "text": "A different way to represent the likelihood essentially. Another setting where the- it might vary is",
    "start": "620460",
    "end": "626520"
  },
  {
    "text": "actually if you care more about one task than another task. Uh, maybe you care more about, uh,",
    "start": "626520",
    "end": "632120"
  },
  {
    "text": "accurately predicting the surface normals than about, uh, the depth for example. Um, then you might, kind of,",
    "start": "632120",
    "end": "639510"
  },
  {
    "text": "increase the - have a loss function weight corresponding to one task that's higher than the weight of another task.",
    "start": "639510",
    "end": "646360"
  },
  {
    "text": "Okay. Ah, so here's some examples of kind of different multitask classification or",
    "start": "647070",
    "end": "652075"
  },
  {
    "text": "different multitask learning problems that we might want to solve. Ah, how do you actually go about solving them?",
    "start": "652075",
    "end": "658555"
  },
  {
    "text": "So, ah, we can go back to our neural network. Ah, and if we want to- if we want our neural network to do multiple different things,",
    "start": "658555",
    "end": "665830"
  },
  {
    "text": "then we need to tell it what it should do. And so in some ways we kind of- we need to condition on the task in some way.",
    "start": "665830",
    "end": "672085"
  },
  {
    "text": "And so what we're gonna have is we're gonna have some task descriptor Z. And we're going to pass this task descriptor into the neural network in some way.",
    "start": "672085",
    "end": "678820"
  },
  {
    "text": "Ah, and so I'm just gonna draw an arrow towards the neural network to indicate that. And in a minute we'll talk about different ways that you can condition on that task descriptor.",
    "start": "678820",
    "end": "685895"
  },
  {
    "text": "And of course, now our neural network is not gonna be just a function of x but it's also going to be a function of this task descriptor Z_i.",
    "start": "685895",
    "end": "692920"
  },
  {
    "text": "Okay. So for example, um, in this case maybe x kind of we can go back to",
    "start": "693290",
    "end": "699100"
  },
  {
    "text": "the paper title example, maybe x corresponds to paper titles. Uh, and now instead of- oh, it's back.",
    "start": "699100",
    "end": "704665"
  },
  {
    "text": "Okay. So maybe try, try- instead of trying to figure out what, uh, what paper you wanna read, uh,",
    "start": "704665",
    "end": "710440"
  },
  {
    "text": "you now need to review the paper, uh, and produce a review for a conference and maybe you're a bit lazy. So you, you ask your neural network to predict a summary of the paper for you.",
    "start": "710440",
    "end": "717730"
  },
  {
    "text": "So that you can then base your, uh, review on the summary. Or maybe, maybe you're even lazier,",
    "start": "717730",
    "end": "722800"
  },
  {
    "text": "and you just want to output the paper review directly. [LAUGHTER] Uh, hopefully, these aren't the reviewers for your papers.",
    "start": "722800",
    "end": "728515"
  },
  {
    "text": "Uh, but, um, yeah. Okay. So what is this task descriptor thing?",
    "start": "728515",
    "end": "737245"
  },
  {
    "text": "The very- the simplest example of what this task descriptor might be is just a one-hot encoding of the task index,",
    "start": "737245",
    "end": "744520"
  },
  {
    "text": "uh, just a vector that tells you, uh, if it's task 1, task 2, task 3, etc.",
    "start": "744520",
    "end": "750460"
  },
  {
    "text": "This is just kind of an index, uh, corresponding to the task. Uh, but more generally, it can also be, uh,",
    "start": "750460",
    "end": "756520"
  },
  {
    "text": "whatever meta-data that you have about that task. Um, if your task corresponds to a personalizat- personalization,",
    "start": "756520",
    "end": "763630"
  },
  {
    "text": "then the task descriptor might include information about that person or that user. Uh, if it's something, uh,",
    "start": "763630",
    "end": "770079"
  },
  {
    "text": "maybe you have kind of a language description of the task you wanna perform. So you could provide that language description to the network. Uh, or maybe you have some formal specification of the task or maybe you're",
    "start": "770080",
    "end": "777880"
  },
  {
    "text": "trying to design circuits like was- because we've mentioned it on Monday. Then you might have kind of a formal specification of the type",
    "start": "777880",
    "end": "783430"
  },
  {
    "text": "of circuits that you might want your neural network to be producing. Okay. So this is the task descriptor.",
    "start": "783430",
    "end": "789730"
  },
  {
    "text": "And then, our objective now becomes, uh, basically the same as what it was before, but now we're going to be summing over all of the tasks that, um, that we have.",
    "start": "789730",
    "end": "799940"
  },
  {
    "text": "Okay, so this is the basic setup. Um, now we have a couple design decisions to make. So we have a model and we have an objective.",
    "start": "801060",
    "end": "808540"
  },
  {
    "text": "Uh, and so we have a decision for both of them. The first is, how should we design the model and the second is,",
    "start": "808540",
    "end": "814450"
  },
  {
    "text": "how should we optimize the, uh, the objective. So ,um, particularly the big decision that we have to make in multitask learning",
    "start": "814450",
    "end": "821800"
  },
  {
    "text": "is how do we condition on this task descriptors Z_i and the,",
    "start": "821800",
    "end": "826990"
  },
  {
    "text": "uh, algorithm decision like I mentioned is how do we optimize our objective. So let's first talk about this,",
    "start": "826990",
    "end": "832839"
  },
  {
    "text": "um, this first question. So, um, this is all about conditioning on the task.",
    "start": "832840",
    "end": "839545"
  },
  {
    "start": "836000",
    "end": "926000"
  },
  {
    "text": "Let's assume that, uh, Z_i for now is just gonna be the task index, like a one-hot encoding over a task index.",
    "start": "839545",
    "end": "845740"
  },
  {
    "text": "And, uh, we only know kind of information about our task is this index basically.",
    "start": "845740",
    "end": "851365"
  },
  {
    "text": "So I have a question for you which is, how should you condition on Z_i, uh,",
    "start": "851365",
    "end": "857240"
  },
  {
    "text": "in order to share as little as possible between the tasks in your neural network model?",
    "start": "857370",
    "end": "865375"
  },
  {
    "text": "Essentially, how should you structure your neural network model such that it shares basically as little as possible between the different tasks. Yeah.",
    "start": "865375",
    "end": "874390"
  },
  {
    "text": "[inaudible] Yeah, exactly. So what you can do is you can have separate networks for",
    "start": "874390",
    "end": "882370"
  },
  {
    "text": "each task where the- you have- each, each of them have completely separate weights.",
    "start": "882370",
    "end": "888295"
  },
  {
    "text": "And then the way that you condition on your task descriptor is you pick the corresponding task which corresponds to this sort of",
    "start": "888295",
    "end": "895690"
  },
  {
    "text": "multiplicative gating where you're just selecting which of the outputs you're going to produce based off of your, your task index.",
    "start": "895690",
    "end": "903310"
  },
  {
    "text": "Um, this is basically, uh, a complicated way to say that we're just gonna be training independent networks. Uh, and it's kind of one way to represent",
    "start": "903310",
    "end": "910105"
  },
  {
    "text": "independent networks within a single model essentially. Okay. Um, so we get independent training within a single neural network,",
    "start": "910105",
    "end": "919779"
  },
  {
    "text": "uh, and there's no shared parameters across tasks. Now, what about the other extreme.",
    "start": "919780",
    "end": "926980"
  },
  {
    "start": "926000",
    "end": "1273000"
  },
  {
    "text": "So the other extreme would be something like this where we take our neural network and we just",
    "start": "926980",
    "end": "932350"
  },
  {
    "text": "concatenate the task index somewhere either at the activations or at the input.",
    "start": "932350",
    "end": "937944"
  },
  {
    "text": "Um, and then train the network as normal. Um, and in this case,",
    "start": "937945",
    "end": "943880"
  },
  {
    "text": "all of the parameters are shared except for one tiny part of the parameter vector.",
    "start": "943880",
    "end": "951345"
  },
  {
    "text": "What is the, the kind of tiny part of the parameters that's not shared? [inaudible]",
    "start": "951345",
    "end": "961540"
  },
  {
    "text": "Sorry, repeat that. [inaudible]",
    "start": "961540",
    "end": "967210"
  },
  {
    "text": "Yeah exactly. So basically the weights that are, uh, right after the Z_i, the kind of,",
    "start": "967210",
    "end": "973584"
  },
  {
    "text": "if you have a fully connected layer right after Z_i concatenated with your features, the, the part of that matrix that corresponds to, uh,",
    "start": "973585",
    "end": "980440"
  },
  {
    "text": "that is basically right after Z_i will have basically different, um, different components that,",
    "start": "980440",
    "end": "986185"
  },
  {
    "text": "that are not shared for each of the tasks. Other than that half of that matrix, all the other parameters are shared. Yeah.",
    "start": "986185",
    "end": "993655"
  },
  {
    "text": "There's also kind of forces [inaudible]",
    "start": "993655",
    "end": "998680"
  },
  {
    "text": "Yeah. Yeah, exactly. So in this case, we assume that all the inputs have the same size, the same, uh, dimensions.",
    "start": "998680",
    "end": "1004770"
  },
  {
    "text": "One thing that you could do is, uh, if, if different tasks have different sizes, you can basically like, you would have some sort of,",
    "start": "1004770",
    "end": "1011175"
  },
  {
    "text": "uh, recurrent neural network, or some sort of attention based model that basically aggregates over the variable dimens- like if you- if one of them is time for example,",
    "start": "1011175",
    "end": "1019320"
  },
  {
    "text": "it aggregates over that, uh, whereas maybe some tasks have- are text and others image. Images in that case, you would probably wanna have different, um,",
    "start": "1019320",
    "end": "1026924"
  },
  {
    "text": "different first parts of that network to take in those different modalities of data. And we'll show- we'll see like an explicit example of,",
    "start": "1026925",
    "end": "1033600"
  },
  {
    "text": "of how that has been done in the past. Yeah.",
    "start": "1033600",
    "end": "1037839"
  },
  {
    "text": "So [inaudible] So this is, yeah, this is a good question.",
    "start": "1054590",
    "end": "1060060"
  },
  {
    "text": "It's, it's a f- it's a fairly nuanced point. So basically each, um, you can ba- you can view, uh,",
    "start": "1060060",
    "end": "1066285"
  },
  {
    "text": "the first- a fully connected layer corresponding to, um, a weight matrix times a vector. And when you, um,",
    "start": "1066285",
    "end": "1073035"
  },
  {
    "text": "when you take the, the top part of that matrix will correspond to- or sorry the left, um,",
    "start": "1073035",
    "end": "1078855"
  },
  {
    "text": "rows of that- the left columns of that matrix will correspond to the, the features and the right columns of that will correspond to the task,",
    "start": "1078855",
    "end": "1084765"
  },
  {
    "text": "uh, task vector that's being processed in this, in this input. Uh, and if you essentially- if the D_i is a one-hot vector,",
    "start": "1084765",
    "end": "1091410"
  },
  {
    "text": "then you'll have one entry in that matrix that is 1, and the other we- entries in that,",
    "start": "1091410",
    "end": "1096705"
  },
  {
    "text": "in that vector will be 0. Uh, and so basically all the ones where all of the columns that have, uh,",
    "start": "1096705",
    "end": "1102480"
  },
  {
    "text": "an entry in Z_i that corresponds to 0 will be zeroed out and won't be used for that task, whereas the columns that have the one will be used for that task. Yeah.",
    "start": "1102480",
    "end": "1111600"
  },
  {
    "text": "[inaudible]",
    "start": "1111600",
    "end": "1120330"
  },
  {
    "text": "Uh, technically, although, um, if you, kind of mathematically go through the gradients, the gradients for those columns will be zero for the tasks in which,",
    "start": "1120330",
    "end": "1129240"
  },
  {
    "text": "um, for the tasks in which the input is zero. Yeah. [inaudible].",
    "start": "1129240",
    "end": "1137039"
  },
  {
    "text": "Yeah. Exactly. So if z i was not a one-hot vector for example, then you would have that- that part of the matrix would be shared parameters.",
    "start": "1137040",
    "end": "1144480"
  },
  {
    "text": "Uh, another kind of, ah, somewhat interesting fact about this is if you could- if you could concatenate",
    "start": "1144480",
    "end": "1149790"
  },
  {
    "text": "z i at every single layer of the network you'll have more task-specific parameters. Whereas if you condition it only on a single layer of the network,",
    "start": "1149790",
    "end": "1156720"
  },
  {
    "text": "you'll only have kind of one set of task-specific perimeters. Yeah.",
    "start": "1156720",
    "end": "1165530"
  },
  {
    "text": "[inaudible]. Yeah, exactly. So the output of that, um, that part of the matrix is a linear transform on- on the one-hot which produces a vector.",
    "start": "1165530",
    "end": "1174210"
  },
  {
    "text": "Basically that- the- well, the column of that matrix corresponds to the resulting vector, um,",
    "start": "1174210",
    "end": "1179310"
  },
  {
    "text": "which could give you as essentially as an embedding- a linear embedding of that task. Yeah.",
    "start": "1179310",
    "end": "1187005"
  },
  {
    "text": "So ah, my understanding of [inaudible] is through [inaudible] of these other points.",
    "start": "1187005",
    "end": "1195420"
  },
  {
    "text": "Right? But if you have the, um, z i [inaudible] one linear versus multiple layers.",
    "start": "1195420",
    "end": "1202365"
  },
  {
    "text": "Um, in any case it doesn't really affect the weights [inaudible] um,",
    "start": "1202365",
    "end": "1207750"
  },
  {
    "text": "could you go in a little more detail on what kind of differences those make in terms of-of that [inaudible] was his first [inaudible].",
    "start": "1207750",
    "end": "1215610"
  },
  {
    "text": "Because they're not really affecting the weights per se. Yeah, so if you add z i to every layer then you",
    "start": "1215610",
    "end": "1222000"
  },
  {
    "text": "are- you're increasing the number of parameters per layer of course. And you're also, like the parameters that you're adding are all tasks.",
    "start": "1222000",
    "end": "1229365"
  },
  {
    "text": "Well, not there- they're not all task-specific, there- they're mostly task-specific. Um, maybe I [inaudible] it depends on the dimensionality of each vector.",
    "start": "1229365",
    "end": "1235440"
  },
  {
    "text": "It's somewhere around half- half of the new parameters are task-specific and half of the parameters are shared.",
    "start": "1235440",
    "end": "1240735"
  },
  {
    "text": "Um, so as you add weights to neural networks, they become more expressive,",
    "start": "1240735",
    "end": "1246134"
  },
  {
    "text": "as you add task specific weights then in some ways they've become even more expressive because for different tasks that can represent completely different things.",
    "start": "1246134",
    "end": "1252660"
  },
  {
    "text": "[inaudible].",
    "start": "1252660",
    "end": "1260720"
  },
  {
    "text": "We'll get to that in a second. Yeah. Okay. Um, so we've been talking a lot about shared parameters and,",
    "start": "1260720",
    "end": "1268760"
  },
  {
    "text": "ah, and task-specific parameters. Ah, and one kind of alternative view on",
    "start": "1268760",
    "end": "1274140"
  },
  {
    "start": "1273000",
    "end": "1508000"
  },
  {
    "text": "the multitask learning problem is that you can split your parameter vector into these shared parameters and toss",
    "start": "1274140",
    "end": "1279240"
  },
  {
    "text": "specific parameters which I'll denote as theta sh and theta i. Ah, and then if you view, um,",
    "start": "1279240",
    "end": "1286240"
  },
  {
    "text": "if you view kind of that as your parameter vector, then your objective looks something like this which is basically exactly the same as the previous objective.",
    "start": "1286240",
    "end": "1292695"
  },
  {
    "text": "Um, but it decomposes, um, it decomposes, it makes it obvious that the task specific parameters are",
    "start": "1292695",
    "end": "1299220"
  },
  {
    "text": "only optimized with respect to the objective for that task. Uh, whereas the shared parameters are optimized over,",
    "start": "1299220",
    "end": "1306525"
  },
  {
    "text": "um, for all i basically, optimized over all tasks. Uh, so one of the things that's somewhat interesting ah,",
    "start": "1306525",
    "end": "1315885"
  },
  {
    "text": "to note based on both of the examples that we saw that- the multiplicative gating example as well as the concatenation example,",
    "start": "1315885",
    "end": "1322259"
  },
  {
    "text": "um, is that choosing how you condition on z in many ways is equivalent to choosing how and where to share parameters.",
    "start": "1322260",
    "end": "1330674"
  },
  {
    "text": "Um, yeah. So essentially the, ah,",
    "start": "1330675",
    "end": "1337320"
  },
  {
    "text": "choosing how to condition on z corresponds to thinking about this sort of optimization problem and thinking about where those shared parameters",
    "start": "1337320",
    "end": "1343590"
  },
  {
    "text": "should lie and where those task-specific parameters should lie. Okay, um, so let's go",
    "start": "1343590",
    "end": "1349890"
  },
  {
    "text": "over a few more choices for how- how we might go about conditioning things. So we saw how we could do concatenation based conditioning where we basically take",
    "start": "1349890",
    "end": "1357150"
  },
  {
    "text": "that task descriptor and concatenate it with the features and then do a linear layer after that.",
    "start": "1357150",
    "end": "1362580"
  },
  {
    "text": "Um, another option to concatenation-based conditioning is to add the, um,",
    "start": "1362580",
    "end": "1370635"
  },
  {
    "text": "is to add the- the task vector to your- to your hidden units,",
    "start": "1370635",
    "end": "1376830"
  },
  {
    "text": "to your features where you basically have a linear layer, ah, to make sure that those feet- that kind of says that you can basically add it o-on in this-",
    "start": "1376830",
    "end": "1384320"
  },
  {
    "text": "such as the same dimensionality because the dimensionality of z i may not be the dimensionality of your features. Ah, you run it through that linear layer and then add it.",
    "start": "1384320",
    "end": "1391025"
  },
  {
    "text": "Um, Interestingly, I presented both of these as two different,",
    "start": "1391025",
    "end": "1396750"
  },
  {
    "text": "ah, two different options, but they're actually just the same thing. Um, so you can essentially view, ah,",
    "start": "1396750",
    "end": "1404355"
  },
  {
    "text": "additive and conde- concatenation based conditioning, um, [inaudible] same so for example, ah,",
    "start": "1404355",
    "end": "1410880"
  },
  {
    "text": "on the left side of this figure you see that you're concatenating, um, x and z and then you have this weight matrix that corresponds to the, ah,",
    "start": "1410880",
    "end": "1420240"
  },
  {
    "text": "corresponds to the kinda of the weights that are applied to each of those layers and you can view that as you kind of apply to matrix.",
    "start": "1420240",
    "end": "1426630"
  },
  {
    "text": "Multiply it to those two parts of the- the vector, you basically get um, these two components that are added together.",
    "start": "1426630",
    "end": "1433500"
  },
  {
    "text": "Um, which illustrates how- how basically the right hand side of this figure corresponds to the additive conditioning which is",
    "start": "1433500",
    "end": "1439560"
  },
  {
    "text": "equal to the left-hand side which is, ah, concatenation-based conditioning. Okay. Um, yeah.",
    "start": "1439560",
    "end": "1446730"
  },
  {
    "text": "[inaudible].",
    "start": "1446730",
    "end": "1453720"
  },
  {
    "text": "Yeah so this is assuming that these are one-hot vector. [inaudible].",
    "start": "1453720",
    "end": "1475830"
  },
  {
    "text": "Yeah absolutely. So if you have more information about how tasks are similar or dissimilar from one another,",
    "start": "1475830",
    "end": "1481590"
  },
  {
    "text": "then you can feed that into your network as opposed to z i. Uh, interestingly, determining how similar tasks are- to two tasks are to each other,",
    "start": "1481590",
    "end": "1488789"
  },
  {
    "text": "is actually a big part of the multitask learning problem itself, is kind of determining how you should be sharing, um, sharing content,",
    "start": "1488790",
    "end": "1495150"
  },
  {
    "text": "sharing parameters, sharing structure across these different tasks. Uh, and in many multi-task problems you don't necessarily have that a priori.",
    "start": "1495150",
    "end": "1502019"
  },
  {
    "text": "Um, but there are- there certainly many examples and we'll actually see a practical example where you do have some information about the task and you can use that,",
    "start": "1502020",
    "end": "1508950"
  },
  {
    "start": "1508000",
    "end": "1832000"
  },
  {
    "text": "um, to condition your network on it, ah, in a different way. Okay, um, a couple other very common conditioning choices, ah,",
    "start": "1508950",
    "end": "1518730"
  },
  {
    "text": "this is again for the-the one-hot case where you don't have a lot of information about how two tasks are shared.",
    "start": "1518730",
    "end": "1523905"
  },
  {
    "text": "One is kind of the- this- this form of multitask or multi-head architecture where you have some set of parameters,",
    "start": "1523905",
    "end": "1530909"
  },
  {
    "text": "ah, and then you split off the network, ah, into, ah, into different heads.",
    "start": "1530910",
    "end": "1537225"
  },
  {
    "text": "The citation here is for 2017, that's just for the visual. This has been something that people have used for a long time.",
    "start": "1537225",
    "end": "1543735"
  },
  {
    "text": "Um, and then one other i- interesting choice, er, or one other kind of very common choice that you can do is",
    "start": "1543735",
    "end": "1550470"
  },
  {
    "text": "multiplicative conditioning which is basically identical to additive conditioning, except instead of adding you multiply.",
    "start": "1550470",
    "end": "1556725"
  },
  {
    "text": "Um, so you project your task matrix, your task vector onto um,",
    "start": "1556725",
    "end": "1563100"
  },
  {
    "text": "a vector and then you multiply that onto your, um, on the activations either in the input or,",
    "start": "1563100",
    "end": "1570645"
  },
  {
    "text": "um, at kind of intermediate representations of your neural network. Okay, um, so why might this sort of multiplicative conditioning be a good idea?",
    "start": "1570645",
    "end": "1580515"
  },
  {
    "text": "There's actually a few different reasons. So one is it's- its more expressive than additive conditioning.",
    "start": "1580515",
    "end": "1585810"
  },
  {
    "text": "You can represent multiplicative interactions whereas with additive things you can, ah, you- it's- its much harder essentially.",
    "start": "1585810",
    "end": "1591990"
  },
  {
    "text": "Um, and the other reason is- if you think about something like multiplicative gating that we talked about before,",
    "start": "1591990",
    "end": "1598169"
  },
  {
    "text": "this sort of gating is something that can very naturally be represented by multiplicative conditioning.",
    "start": "1598170",
    "end": "1603705"
  },
  {
    "text": "Ah, and not just multiplicative gating, but also things like a multi-head architecture, um, where,",
    "start": "1603705",
    "end": "1609420"
  },
  {
    "text": "ah, you want to basically be choosing which parts of the network should be- should be used for different tasks.",
    "start": "1609420",
    "end": "1616245"
  },
  {
    "text": "So essentially there's sort of multiplicative conditioning where you're multiplying this embedding onto- onto your activations,",
    "start": "1616245",
    "end": "1622290"
  },
  {
    "text": "allows it to- to modulate different features, ah, such that you can completely turn off features,",
    "start": "1622290",
    "end": "1627510"
  },
  {
    "text": "you can completely- only use some heads for one task, only use some parts of the network for one task versus another task. Yeah.",
    "start": "1627510",
    "end": "1633720"
  },
  {
    "text": "[inaudible].",
    "start": "1633720",
    "end": "1641250"
  },
  {
    "text": "That's a good question. I would say it's a very simple form of attention mechanism. I think attention mechanisms usually involve dot products.",
    "start": "1641250",
    "end": "1648150"
  },
  {
    "text": "And in this case you're not actually summing across the dimensions, you're just doing an element wise multiplication. Yeah.",
    "start": "1648150",
    "end": "1656450"
  },
  {
    "text": "[inaudible].",
    "start": "1656450",
    "end": "1666210"
  },
  {
    "text": "Yeah you can definitely do that and we'll see an example of that in, in the case study actually.",
    "start": "1666210",
    "end": "1671220"
  },
  {
    "text": "Ah, and multiplicative conditioning allows you to do that. Or it allows it to actually learn how to do that,",
    "start": "1671220",
    "end": "1676545"
  },
  {
    "text": "um, in a completely automatic way. Yeah.",
    "start": "1676545",
    "end": "1683620"
  },
  {
    "text": "[inaudible]. Yeah. [inaudible] wouldn't be as- as expressive as the previous architecture as you said",
    "start": "1683620",
    "end": "1691680"
  },
  {
    "text": "[inaudible] actually. As expressive as the additive or Or, yeah, additive with another linear layer or something like that that would actually use the input. [OVERLAPPING] Right so these diagrams had been,",
    "start": "1691680",
    "end": "1702019"
  },
  {
    "text": "ah, kind of looking at a single layer at a time. Of course when you add neuron- add kind of layers, a neural- neural network is a universal function approximator,",
    "start": "1702020",
    "end": "1709530"
  },
  {
    "text": "and so if you concatenate two things and then wanted it to give you the product, a neural network can represent that function.",
    "start": "1709530",
    "end": "1714660"
  },
  {
    "text": "Um, and so technically the additive function can- the neural network can also represent this when you concatenate.",
    "start": "1714660",
    "end": "1720420"
  },
  {
    "text": "It's just, ah, in practice and so technically all of these are- are kind of all universal function approximators",
    "start": "1720420",
    "end": "1725640"
  },
  {
    "text": "for- in the multi-task setting. Um, in many ways it's kind of more about what you're readily allowing the network to do,",
    "start": "1725640",
    "end": "1731955"
  },
  {
    "text": "um, and how, kind of the optimization process itself, although it's much harder to say things about, ah,",
    "start": "1731955",
    "end": "1738495"
  },
  {
    "text": "optimization than, um, than about, ah, the types of things that like an individual layer can represent for example.",
    "start": "1738495",
    "end": "1746000"
  },
  {
    "text": "Yeah. [inaudible]",
    "start": "1746000",
    "end": "1762225"
  },
  {
    "text": "Can you repeat the question? Do you have to know like if we already like the number that you only train on [inaudible].",
    "start": "1762225",
    "end": "1773640"
  },
  {
    "text": "Are there methods where you can actually use the training model for [inaudible].",
    "start": "1773640",
    "end": "1779400"
  },
  {
    "text": "A task that you haven't seen any training data for? Yes. So yes, so that's a good question. Um, in that case if you want to be able to",
    "start": "1779400",
    "end": "1786210"
  },
  {
    "text": "generalize to an entirely new task that you haven't seen during training, you'll need something other than a one-hot vector,",
    "start": "1786210",
    "end": "1791595"
  },
  {
    "text": "uh, because if you only have a one-hot vector, then you are, uh, you don't know how that new task relates to anything that you've done before.",
    "start": "1791595",
    "end": "1798315"
  },
  {
    "text": "But if you have a language description for example then, um, then in principle these,",
    "start": "1798315",
    "end": "1803715"
  },
  {
    "text": "these models can learn how to generalize from basically given a new language description to perform that task,",
    "start": "1803715",
    "end": "1808845"
  },
  {
    "text": "given enough data of other language descriptions that share, uh, that share commonalities with what you're seeing at test time.",
    "start": "1808845",
    "end": "1816525"
  },
  {
    "text": "Um, and then in the second part of this lecture we'll be talking about how we can quickly learn new tasks from data,",
    "start": "1816525",
    "end": "1822360"
  },
  {
    "text": "uh, by using experience on tasks, on previously seen tasks.",
    "start": "1822360",
    "end": "1828640"
  },
  {
    "text": "Okay. Um, there are also more complex choices,",
    "start": "1829370",
    "end": "1835035"
  },
  {
    "start": "1832000",
    "end": "1872000"
  },
  {
    "text": "uh, that we can go with as well. So here are some architectures from, from the literature. For example these things include various modules, various, um,",
    "start": "1835035",
    "end": "1843330"
  },
  {
    "text": "attention, uh, components, uh, different gating mechanisms.",
    "start": "1843330",
    "end": "1848760"
  },
  {
    "text": "We don't have time to go through, uh, all of the possible choices that you do here. Uh, um, although some of the,",
    "start": "1848760",
    "end": "1855585"
  },
  {
    "text": "I think one or two of the, um, of the readings that we'll have will cover a couple different options there.",
    "start": "1855585",
    "end": "1861405"
  },
  {
    "text": "Um, yeah, so the main takeaway though that I'd like to give is that there are,",
    "start": "1861405",
    "end": "1867660"
  },
  {
    "text": "well, I guess one, there are a lot of different appro- like a lot of different choices we have to make when choosing the architecture. Uh, and unfortunately, these design decisions",
    "start": "1867660",
    "end": "1875175"
  },
  {
    "start": "1872000",
    "end": "1933000"
  },
  {
    "text": "are basically kind of corresponding to neural network architecture tuning. Um, in that they are problem dependent.",
    "start": "1875175",
    "end": "1881235"
  },
  {
    "text": "So one architecture will work well on one problem but won't necessarily work well on another problem or another set of,",
    "start": "1881235",
    "end": "1887370"
  },
  {
    "text": "um, another set of tasks. Uh, in many ways they're largely guided by intuition or knowledge of the problem.",
    "start": "1887370",
    "end": "1893520"
  },
  {
    "text": "So if you know that two tasks are similar, you might have them share more. Whereas if you know two, that two tasks are different, you might have them share less.",
    "start": "1893520",
    "end": "1899775"
  },
  {
    "text": "Um, and I would say that currently is in some ways more of an art than a science, uh,",
    "start": "1899775",
    "end": "1905160"
  },
  {
    "text": "and there, um, there isn't kind of like, uh, any guide that can tell you exactly how to, uh, how to do this.",
    "start": "1905160",
    "end": "1913514"
  },
  {
    "text": "Given a new problem- a new set of tasks that you want to be able to learn.",
    "start": "1913515",
    "end": "1918900"
  },
  {
    "text": "How- but hopefully in- this a very active area of research and hopefully in the upcoming years we'll have better, a better idea for how to do this.",
    "start": "1918900",
    "end": "1926715"
  },
  {
    "text": "Okay. So now that we've talked about the model architecture a lot,",
    "start": "1926715",
    "end": "1931815"
  },
  {
    "text": "what about actually optimizing this objective? Um, in many ways, this is- it's fairly straightforward compared to standard neural network training.",
    "start": "1931815",
    "end": "1940260"
  },
  {
    "start": "1933000",
    "end": "2067000"
  },
  {
    "text": "Uh, kind of a very basic version of optimizing this objective, would correspond to first sampling a mini-batch of tasks.",
    "start": "1940260",
    "end": "1947625"
  },
  {
    "text": "So we have different tasks. We used sample different tasks and then sample data points for each task.",
    "start": "1947625",
    "end": "1952890"
  },
  {
    "text": "So, um, unl- unlike the standard supervised setting, we won't just be sampling kind of sampling once, we'll be sampling twice.",
    "start": "1952890",
    "end": "1958305"
  },
  {
    "text": "Uh, then we're going to compute our loss function on our mini-batch. Uh, by kind of measuring a stochastic, uh,",
    "start": "1958305",
    "end": "1967710"
  },
  {
    "text": "basically kind of getting a stochastic gradient rather than a, uh, rather than the true gradient because we",
    "start": "1967710",
    "end": "1973245"
  },
  {
    "text": "can't evaluate the gradient on our entire data set. Uh, we back propagate the loss, uh, to compute the gradient and then apply the gradient to your parameters using your,",
    "start": "1973245",
    "end": "1983535"
  },
  {
    "text": "your favorite neural network optimizer. Um, so basically this is the same as standard single task learning except that we",
    "start": "1983535",
    "end": "1990270"
  },
  {
    "text": "will be sampling a batch of tasks and a batch of data points for each of those tasks. Um, and note that kind of these first two steps is to ensure",
    "start": "1990270",
    "end": "1997890"
  },
  {
    "text": "that the tasks are sampled uniformly, uh, regardless of data quantity.",
    "start": "1997890",
    "end": "2003260"
  },
  {
    "text": "So if you have one task that has a lot more data than another task, then this will ensure that you're sampling them at equal rates.",
    "start": "2003260",
    "end": "2009515"
  },
  {
    "text": "Which is what we're optimizing for, uh, in- on the top. If you care more about the task that has more data then, of course,",
    "start": "2009515",
    "end": "2017330"
  },
  {
    "text": "it makes sense to weight those differently, um, and sample at different proportions as well.",
    "start": "2017330",
    "end": "2022320"
  },
  {
    "text": "Okay, um, and one other tip here is that, uh, if your different tasks correspond to regression problems,",
    "start": "2022600",
    "end": "2029059"
  },
  {
    "text": "this isn't really necessarily specific to the, the optimization algorithm but, um, it's pretty important to make sure your tasks labels are on the same scale.",
    "start": "2029060",
    "end": "2036049"
  },
  {
    "text": "Uh, otherwise inherently your loss function is going to have a greater scale for which the,",
    "start": "2036050",
    "end": "2041195"
  },
  {
    "text": "uh, the labels have a greater magnitude. Okay. So now that we've gone over kind of the basics of, um,",
    "start": "2041195",
    "end": "2050165"
  },
  {
    "text": "of the architectures and the challenges, or the architectures and the algorithms, uh, let's talk about some of the challenges that come up.",
    "start": "2050165",
    "end": "2056315"
  },
  {
    "text": "So the, in many ways, the, uh, the kind of number one challenge that I view with",
    "start": "2056315",
    "end": "2062149"
  },
  {
    "text": "multitask learning is the problem of negative transfer. Uh, and this kind of symptom of this, uh,",
    "start": "2062150",
    "end": "2068675"
  },
  {
    "start": "2067000",
    "end": "2826000"
  },
  {
    "text": "is when like if you train independent networks and that's doing better than your multitask learning method,",
    "start": "2068675",
    "end": "2075935"
  },
  {
    "text": "then that means that you're getting negative transfer. It means that the, uh, kind of data and training from one task is adversely hurting,",
    "start": "2075935",
    "end": "2084274"
  },
  {
    "text": "is adversely, um, affecting the training of the other tasks. Uh, so for example,",
    "start": "2084275",
    "end": "2091024"
  },
  {
    "text": "uh, and this is actually a problem that is, is quite prevalent. Uh, in some cases maybe you care more about computational efficiency, it's not practical to train independent networks.",
    "start": "2091025",
    "end": "2098675"
  },
  {
    "text": "Um, but for example we're actually recently trying to write a paper on multitask learning. Um, there's this common, uh,",
    "start": "2098675",
    "end": "2104674"
  },
  {
    "text": "multitask version of the CIFAR data set where you break it down into um, into different tasks corresponding to the different kind of,",
    "start": "2104675",
    "end": "2111440"
  },
  {
    "text": "uh, upper-level categories of CIFAR. Um, and we kind of evaluated all the, uh,",
    "start": "2111440",
    "end": "2117515"
  },
  {
    "text": "multiple state of the art approaches, uh, for multitask learning, uh, and got various levels of accuracy on this data set and",
    "start": "2117515",
    "end": "2125090"
  },
  {
    "text": "then we trained independent networks and it was, uh, performing better than kind of all the recent papers.",
    "start": "2125090",
    "end": "2132540"
  },
  {
    "text": "Uh, so why, why does this happen? Why does negative transfer like why are we",
    "start": "2133300",
    "end": "2140150"
  },
  {
    "text": "actually getting benefit from training across multiple tasks? Um, one is optimization challenges.",
    "start": "2140150",
    "end": "2146615"
  },
  {
    "text": "Uh, so if, um, if basically gradients of one task or interfering with the,",
    "start": "2146615",
    "end": "2153710"
  },
  {
    "text": "uh, with the training of another task that basically when you apply it, you compute gradient for task one, compute gradient for task two.",
    "start": "2153710",
    "end": "2159890"
  },
  {
    "text": "If gradient one hurts, the weights for task two, uh, then the optimization will be more difficult.",
    "start": "2159890",
    "end": "2166910"
  },
  {
    "text": "Um, and also tasks we learn at different rates. So uh, if one task is learning a lot faster than another task,",
    "start": "2166910",
    "end": "2172700"
  },
  {
    "text": "you might end up learning, um, one task very quickly and then it, it might get stuck trying to learn task two because it's kind of already learned,",
    "start": "2172700",
    "end": "2179855"
  },
  {
    "text": "uh, something and it doesn't want to learn something else. Essentially how the optimization gets stuck it's,",
    "start": "2179855",
    "end": "2186289"
  },
  {
    "text": "it's, it's, it's kind of in this local optimum. Okay, um, and the other issue that you might run",
    "start": "2186290",
    "end": "2192770"
  },
  {
    "text": "into is maybe you have limited representational capacity. So, um, multitask networks in general often need to be much larger than single task networks.",
    "start": "2192770",
    "end": "2200720"
  },
  {
    "text": "This is, is very intuitive but it can be easy, uh, easy to forget and in this case the, um,",
    "start": "2200720",
    "end": "2208595"
  },
  {
    "text": "the- if, if it isn't as large as it needs to be then you're going to see under fitting,",
    "start": "2208595",
    "end": "2214670"
  },
  {
    "text": "uh, and that's a kind of, uh, a symptom of limited representational capacity.",
    "start": "2214670",
    "end": "2221369"
  },
  {
    "text": "Yeah. So that's a good question, uh, about basically how to handle, uh, like optimization challenges especially when one task has more data that another.",
    "start": "2249160",
    "end": "2258020"
  },
  {
    "text": "Um, one is kind of the thing that I mentioned before as you sampled, sampled the tasks and basically bounced them such that they have the same amount of data,",
    "start": "2258020",
    "end": "2266420"
  },
  {
    "text": "such that it doesn't favor one task over the other, um, because oftentimes if you don't,",
    "start": "2266420",
    "end": "2271910"
  },
  {
    "text": "if you don't do that, then it will learn the task that has a lot of data and it won't learn the other one. Um, people have explored curriculum learning techniques and we'll talk a bit about that,",
    "start": "2271910",
    "end": "2280670"
  },
  {
    "text": "um, later on in this course. In general, the- I would say that",
    "start": "2280670",
    "end": "2286460"
  },
  {
    "text": "the optimization challenges aren't completely well understood. Uh, we're still trying to understand kind of in general",
    "start": "2286460",
    "end": "2291790"
  },
  {
    "text": "the single task optimization landscapes let alone the, the multitask optimization landscapes. Um, I do think though that there's been a lot,",
    "start": "2291790",
    "end": "2298690"
  },
  {
    "text": "like I'm actually pretty optimistic about, uh, being able to understand these sorts of challenges very soon, um,",
    "start": "2298690",
    "end": "2304329"
  },
  {
    "text": "and we may even like later in the course cover, um, try to get a better understanding of these optimization challenges and how to mitigate them. Yeah.",
    "start": "2304330",
    "end": "2312340"
  },
  {
    "text": "So I'm confused about how you actually define this negative test [inaudible] because,",
    "start": "2312340",
    "end": "2317710"
  },
  {
    "text": "um, because we don't have perfect overlap between the different tasks otherwise they would be different so.",
    "start": "2317710",
    "end": "2323300"
  },
  {
    "text": "So when you have one network versus, um, like say 10, uh,",
    "start": "2323300",
    "end": "2328745"
  },
  {
    "text": "different networks rating out different tasks, assuming that all the training are like perfect to the network's capacity.",
    "start": "2328745",
    "end": "2336380"
  },
  {
    "text": "You then, uh, you got to have like worse performance with a single network versus like all 10 networks,",
    "start": "2336380",
    "end": "2343490"
  },
  {
    "text": "right, because you have, there's like extra information that you know, maybe the network isn't going to be able to express.",
    "start": "2343490",
    "end": "2350904"
  },
  {
    "text": "You expect larger networks but how do you compare if your network is larger?",
    "start": "2350905",
    "end": "2357790"
  },
  {
    "text": "So you're saying that you're like, why would you expect positive transfer? Why would you- Yeah.",
    "start": "2357790",
    "end": "2363130"
  },
  {
    "text": "Yeah. So one reason to- one situation to expect positive transfer is when you don't have a lot of data per task, um,",
    "start": "2363130",
    "end": "2369050"
  },
  {
    "text": "and so if the tasks are related, uh, enough, the features learned for one task will be",
    "start": "2369050",
    "end": "2375260"
  },
  {
    "text": "useful or the representations learned for one task will be useful for the other task. Um, so it's essentially a way to share data, um,",
    "start": "2375260",
    "end": "2382085"
  },
  {
    "text": "and as I'll talk about in like two slides, um,",
    "start": "2382085",
    "end": "2388920"
  },
  {
    "text": "you can basically kind of, another way to view multitask learning is essentially a form of regularization,",
    "start": "2389680",
    "end": "2396434"
  },
  {
    "text": "uh, and the if, um, if you're kind of problem setting,",
    "start": "2396435",
    "end": "2402880"
  },
  {
    "text": "if regularization would be helpful basically, uh, and more data would be helpful then those are some of the settings where you definitely expect positive transfer.",
    "start": "2402880",
    "end": "2409780"
  },
  {
    "text": "[inaudible] Generalization essentially, yeah. In reinforcement learning,",
    "start": "2409780",
    "end": "2415190"
  },
  {
    "text": "we'll see other benefits as well relating to exploration. Yeah.",
    "start": "2415190",
    "end": "2420980"
  },
  {
    "text": "Um, so if all the tasks have exactly the same data, is it usually [inaudible] to train independent networks?",
    "start": "2420980",
    "end": "2428340"
  },
  {
    "text": "That's a good question. So you mean all the same inputs, but not- but different labels?",
    "start": "2429730",
    "end": "2434900"
  },
  {
    "text": "Um, all the- all of them had the same input but I want to use the same input with the different things.",
    "start": "2434900",
    "end": "2440934"
  },
  {
    "text": "Yeah. So in that case, um, you can definitely still see benefits from multitask learning.",
    "start": "2440935",
    "end": "2446210"
  },
  {
    "text": "Essentially, each task has its own form of supervision, and, uh, when I was talking about data sharing,",
    "start": "2446210",
    "end": "2452720"
  },
  {
    "text": "it's- it's- it's not necessarily actually about sharing inputs, it's about sharing supervision. Uh, and so if you have, um, basically,",
    "start": "2452720",
    "end": "2461270"
  },
  {
    "text": "each of those tasks correspond to different amounts of supervision and that those can be used for building, uh, more flexible representations.",
    "start": "2461270",
    "end": "2468580"
  },
  {
    "text": "More powerful representations that can be used for, um, for better solving one of your tasks. Ah, yeah.",
    "start": "2468580",
    "end": "2474700"
  },
  {
    "text": "So if you wanted to move [NOISE] problem data transfer, but still, uh, like maintaining their leverage their representations to learn one task.",
    "start": "2474700",
    "end": "2484700"
  },
  {
    "text": "Uh, could you just do like a simple transfer learning where it most likely to do that when, uh, kind of [inaudible]",
    "start": "2484700",
    "end": "2490880"
  },
  {
    "text": "Yeah. You can definitely do that. Uh, in practice fine tuning. I'll talk a bit about fine tuning in the next lecture. In practice that makes, um,",
    "start": "2490880",
    "end": "2497270"
  },
  {
    "text": "f- fewer assumptions about the availability of data, because you assume that you can't, kind of, access that first data set,",
    "start": "2497270",
    "end": "2502970"
  },
  {
    "text": "and so in practice many times. If you have both data sets available, you- you should use both of them, uh,",
    "start": "2502970",
    "end": "2508130"
  },
  {
    "text": "and you'll be able to get better performance. Yeah?",
    "start": "2508130",
    "end": "2513220"
  },
  {
    "text": "Is there a simpler kind of like similarity metric that can you use, before you do this kind of training.",
    "start": "2513220",
    "end": "2518830"
  },
  {
    "text": "Or do you just have to form the optimizations to see if it performs well and that is sort of to measure,",
    "start": "2518830",
    "end": "2525050"
  },
  {
    "text": "how much shared structure there is? Yeah. That's a very good question. Uh, my- I don't- I don't think that this- this question is necessarily known,",
    "start": "2525050",
    "end": "2533480"
  },
  {
    "text": "and I think there maybe are techniques where we could better get a sense for this before training. Um, but my sense is that,",
    "start": "2533480",
    "end": "2540830"
  },
  {
    "text": "how similar two tasks are is intimately tied to how easy it is to learn them together.",
    "start": "2540830",
    "end": "2547070"
  },
  {
    "text": "Uh, and so, I guess the pessimistic side of me would answer that it's actually not possible to",
    "start": "2547070",
    "end": "2552920"
  },
  {
    "text": "a priori know how much you should share ahead of time. Um, but I think it is kind of-",
    "start": "2552920",
    "end": "2558890"
  },
  {
    "text": "the more optimistic side of me says that it kind of the optimizer should be able to figure it out. Throughout the- like in an online fashion throughout optimization,",
    "start": "2558890",
    "end": "2566119"
  },
  {
    "text": "um, during the learning process. So I don't think we can probably do it before learning but I think it can",
    "start": "2566119",
    "end": "2571250"
  },
  {
    "text": "happen during the learning process. Yeah? Yeah. I wanna understand better why, uh,",
    "start": "2571250",
    "end": "2577520"
  },
  {
    "text": "Multitasking networking is larger networks. So assuming we have multi- like the same network, um,",
    "start": "2577520",
    "end": "2584480"
  },
  {
    "text": "but it independent on train on different tasks, and it works okay. But [inaudible].",
    "start": "2584480",
    "end": "2589820"
  },
  {
    "text": "It seems to me that [inaudible]. Because they're sharing the same like activation is similar to the [inaudible].Or else in bigger networks would just be,",
    "start": "2589820",
    "end": "2599195"
  },
  {
    "text": "um, the backpropagate gradients, might be more sparse within the network so the drug can't sell as much.",
    "start": "2599195",
    "end": "2605630"
  },
  {
    "text": "Yeah, so it certainly could be that larger networks help because they alleviate optimization challenges.",
    "start": "2605630",
    "end": "2610715"
  },
  {
    "text": "Um, people have observed in general in single task learning that if you have a larger network they actually sometimes optimize faster than the smaller networks.",
    "start": "2610715",
    "end": "2617810"
  },
  {
    "text": "Um, but separate from optimization, there is also just the representational capacity of like. If you're doing a single task that's one function and if you're doing another task,",
    "start": "2617810",
    "end": "2625775"
  },
  {
    "text": "assuming that task is different. Uh, the representational capacity needed to represent both of those functions,",
    "start": "2625775",
    "end": "2631250"
  },
  {
    "text": "is greater than just an individual function. But it may be that actually the optimization challenges",
    "start": "2631250",
    "end": "2637190"
  },
  {
    "text": "potentially could even have a- a greater impact on- on this sort of, uh, observation. Yep.",
    "start": "2637190",
    "end": "2642485"
  },
  {
    "text": "So sometimes, um, when we test the machine learning algorithms, we sort of generate the data set where we know Bayes error.",
    "start": "2642485",
    "end": "2651155"
  },
  {
    "text": "So its like w-we know how well an algorithm in principle could do. Are they similar to sort of word problems in this setting where",
    "start": "2651155",
    "end": "2658970"
  },
  {
    "text": "beforehand we actually know how much positive transfer is possible.",
    "start": "2658970",
    "end": "2664680"
  },
  {
    "text": "Not off the top of my head. But there- there certainly could be literature",
    "start": "2665380",
    "end": "2670880"
  },
  {
    "text": "on that given the extent to which people have studied it. Um, yeah, feel free to like post that on Piazza or something.",
    "start": "2670880",
    "end": "2676730"
  },
  {
    "text": "And we can try to find something. [OVERLAPPING] I'm trying to look for that particular, because it's been hard to even understand like",
    "start": "2676730",
    "end": "2683285"
  },
  {
    "text": "because then would be more obvious to find some clear example Here there will be. Yeah, I do suspect that we will",
    "start": "2683285",
    "end": "2690080"
  },
  {
    "text": "be able to find an example with real data, uh, in real problems. [OVERLAPPING] But I think it will generate the,uh-.",
    "start": "2690080",
    "end": "2695960"
  },
  {
    "text": "Yeah, I think that- that would be interesting. Yeah. Uh, on the note of like meeting, you know,",
    "start": "2695960",
    "end": "2701675"
  },
  {
    "text": "obviously all those [inaudible] .",
    "start": "2701675",
    "end": "2706820"
  },
  {
    "text": "Um, If you have like records, in vectors at every single stage in the network and it's multiplying all these parameters,",
    "start": "2706820",
    "end": "2714295"
  },
  {
    "text": "like, some values that will typically be a hidden value. Will that be equal to like in,",
    "start": "2714295",
    "end": "2720085"
  },
  {
    "text": "you know the equivalence [inaudible] we'll have the equivalence rendered to like these different networks.",
    "start": "2720085",
    "end": "2730230"
  },
  {
    "text": "Um, in principle yes, if you use mostly the kind of multiplicative conditioning.",
    "start": "2730230",
    "end": "2736170"
  },
  {
    "text": "Um, so in principle it does have the representational capacity to represent completely separate networks.",
    "start": "2736170",
    "end": "2742550"
  },
  {
    "text": "Um, and that's- that actually is one of the good reasons to use that sort of gating, the, um,",
    "start": "2742550",
    "end": "2747890"
  },
  {
    "text": "in practice the optimizer might have challenge finding that- that solution. Um, yeah, and so it may not actually be able to- to find that solution.",
    "start": "2747890",
    "end": "2757990"
  },
  {
    "text": "But technically it should have that capacity. Okay. And I guess one thing I will add to that is we actually have observed very recently that,",
    "start": "2757990",
    "end": "2764650"
  },
  {
    "text": "uh, in many cases it's actually very challenging for the optimizer to find that solution, um, in tasks where the- where the type,",
    "start": "2764650",
    "end": "2772235"
  },
  {
    "text": "the things that you're learning are very distinct from one another. Yeah.",
    "start": "2772235",
    "end": "2777710"
  },
  {
    "text": "Um, if we have for example, uh, like one neural network sharing one task and also sharing another task.",
    "start": "2777710",
    "end": "2783110"
  },
  {
    "text": "Shouldn't we combine them so that, uh, it becomes a multitask network?",
    "start": "2783110",
    "end": "2787980"
  },
  {
    "text": "So you- you can combine them but very naively and stupidly by just kind of using a task selector to pick which one you want,",
    "start": "2789640",
    "end": "2796925"
  },
  {
    "text": "what network you want to use. Um, to my knowledge there aren't any techniques, well.",
    "start": "2796925",
    "end": "2802369"
  },
  {
    "text": "You actually use overlap so you get some advantage [NOISE] I don't know if any w- uh,",
    "start": "2802370",
    "end": "2807750"
  },
  {
    "text": "we'll cover this when we get to reinforcement learning. Yeah. So there are some techniques that- that do kind of take two",
    "start": "2808450",
    "end": "2814850"
  },
  {
    "text": "trained networks for tasks, and then try to learn a single network, um, that fuses them in some way.",
    "start": "2814850",
    "end": "2820835"
  },
  {
    "text": "Okay, I should probably get onto the next few slides. So, um, the takeaway here is",
    "start": "2820835",
    "end": "2827690"
  },
  {
    "start": "2826000",
    "end": "2930000"
  },
  {
    "text": "you I- I- I cannot - don't even know if I've even said this yet but I think all of you have inferred it is that if you",
    "start": "2827690",
    "end": "2832849"
  },
  {
    "text": "have negative transfer you can share less across tasks. Um, tra- train a bigger network, um,",
    "start": "2832850",
    "end": "2838580"
  },
  {
    "text": "and one of the interesting things here is actually sharing versus not sharing parameters is not just a binary decision.",
    "start": "2838580",
    "end": "2844130"
  },
  {
    "text": "Uh, you could actually also, uh, do what's called soft parameter sharing.",
    "start": "2844130",
    "end": "2849529"
  },
  {
    "text": "Um, and so what this looks like or one version of this is where you have, uh,",
    "start": "2849530",
    "end": "2854645"
  },
  {
    "text": "you can break down your objective as I showed before into shared parameters and task specific parameters and then basically add this term that",
    "start": "2854645",
    "end": "2860900"
  },
  {
    "text": "encourages the task specific parameters to be similar to one another. And you could do this at different layers of the network.",
    "start": "2860900",
    "end": "2866330"
  },
  {
    "text": "You could do it, um, for different pairs of tasks, for some pairs but not other pairs. You could also do it with respect to a single set of global parameters and tie",
    "start": "2866330",
    "end": "2874250"
  },
  {
    "text": "them all to a single set of global parameters instead of doing this sort of pairwise loss. Uh, and so what this looks like is you have two separate networks.",
    "start": "2874250",
    "end": "2882200"
  },
  {
    "text": "Um, and what you do is you kind of softly constrain the weights to be similar to one another rather than actually having them represent the same exact value.",
    "start": "2882200",
    "end": "2889595"
  },
  {
    "text": "Um, so one of the benefits of this is it allows for more fluid degrees of parameter sharing. Uh, where if you set the weight on this loss this-this right hand loss to 0.",
    "start": "2889595",
    "end": "2899000"
  },
  {
    "text": "Then you have zero parameter sharing. If you set it to be a very high, uh, value such that- such that essentially constraining the optimization,",
    "start": "2899000",
    "end": "2906230"
  },
  {
    "text": "to set them, uh, such that they are equal; then that corresponds to hard parameter sharing.",
    "start": "2906230",
    "end": "2912410"
  },
  {
    "text": "Um, the downside is that it is kind of yet another set of decisions and hyper parameters, that you need to tune, uh, and- and make sense of when you're,",
    "start": "2912410",
    "end": "2920465"
  },
  {
    "text": "uh, thinking about your- your algorithm. Okay. Um, and so now that I've talked about negative transfer, um,",
    "start": "2920465",
    "end": "2929300"
  },
  {
    "text": "another problem which is in- in many ways somewhat orthogonal to this chall- or kind of the opposite of this challenge is the challenge of overfitting.",
    "start": "2929300",
    "end": "2936140"
  },
  {
    "start": "2930000",
    "end": "2960000"
  },
  {
    "text": "Um, and so if you observe that if you have only a small amount of data per task and you find yourself overfitting to those tasks then,",
    "start": "2936140",
    "end": "2943565"
  },
  {
    "text": "uh, it actually may be that you're not sharing enough. Um, it may be that you just need more data, but it may be that, if you, um,",
    "start": "2943565",
    "end": "2949220"
  },
  {
    "text": "shared more that would act as a stronger form of regularization. Um, and you may be able to overfit less. Okay.",
    "start": "2949220",
    "end": "2959555"
  },
  {
    "text": "So now, we wanna go into kind of a case study of actually applying these sorts of multitask learning algorithms in practice,",
    "start": "2959555",
    "end": "2965884"
  },
  {
    "start": "2960000",
    "end": "3065000"
  },
  {
    "text": "and so this was actually a very recent paper that came out, um, in the past two months and they were looking at,",
    "start": "2965884",
    "end": "2973474"
  },
  {
    "text": "uh, making recommendations to users for YouTube. Uh, and it seems actually it's- it's from Google and,",
    "start": "2973475",
    "end": "2979250"
  },
  {
    "text": "uh, to my knowledge, this is- some of kind of what we'll be covering here are some of the decisions that they have made would actually making recommendations to users.",
    "start": "2979250",
    "end": "2988144"
  },
  {
    "text": "Um, yeah so here's an example. You have, uh, you're kind of watching this, uh,",
    "start": "2988145",
    "end": "2994010"
  },
  {
    "text": "this lecture on deep learning and then on the right, you might be getting some recommendations about,",
    "start": "2994010",
    "end": "2999425"
  },
  {
    "text": "uh, what video to watch next. So there are a couple challenges that come up,",
    "start": "2999425",
    "end": "3006385"
  },
  {
    "text": "um, in this sort of, uh, problem. And the way that they formulate it as a multitask problem is predicting, uh,",
    "start": "3006385",
    "end": "3012250"
  },
  {
    "text": "is to making predictions about user engagement and about user satisfaction. Uh, so you essentially have these conflicting objectives",
    "start": "3012250",
    "end": "3019194"
  },
  {
    "text": "to think about should I generate, uh, a video with that, uh, a user will rate highly, uh,",
    "start": "3019194",
    "end": "3024700"
  },
  {
    "text": "can I predict whether or not the users will share that whether or not they'll watch that video, um, and the types of things that you share are not necessarily",
    "start": "3024700",
    "end": "3032200"
  },
  {
    "text": "the types of things that you would watch for a long period of time for example. Um, the second challenge that comes up that I",
    "start": "3032200",
    "end": "3038380"
  },
  {
    "text": "won't have a lot of time to talk about today, but, um, is also a bit interesting is that in these sorts of recommendation systems you also have a form of",
    "start": "3038380",
    "end": "3044920"
  },
  {
    "text": "feedback loop where users may have watched something simply because you recommended it,",
    "start": "3044920",
    "end": "3049930"
  },
  {
    "text": "uh, and this leads to bias in your data. Uh, and so they also have an interesting technique that, uh,",
    "start": "3049930",
    "end": "3056635"
  },
  {
    "text": "they used to address this bias, uh, and if you want to kind of find out more information about that, you can look at the paper.",
    "start": "3056635",
    "end": "3064390"
  },
  {
    "text": "Um, Okay. So how do they actually set up this problem in this framework?",
    "start": "3064390",
    "end": "3070030"
  },
  {
    "start": "3065000",
    "end": "3135000"
  },
  {
    "text": "So the input is what the user is currently watching which is called the query video, and they also know some features for that user.",
    "start": "3070030",
    "end": "3076705"
  },
  {
    "text": "Uh, and then what they do is they first generate candidate, a few hundred candidate videos that they might think that user might wanna watch,",
    "start": "3076705",
    "end": "3083365"
  },
  {
    "text": "they then rank the candidates, uh, and then they served the top ranking videos to the user in that recommendations bar on the right.",
    "start": "3083365",
    "end": "3091705"
  },
  {
    "text": "Um, the candidate videos, um, this wasn't really the main focus of the paper,",
    "start": "3091705",
    "end": "3096790"
  },
  {
    "text": "but the way that they do this is they pull videos from multiple- multiple candidate generation algorithms. These algorithms do things like try to match",
    "start": "3096790",
    "end": "3103510"
  },
  {
    "text": "topics of the video that you're currently watching. Um, they also try to, uh, look at the videos that are most frequently watched",
    "start": "3103510",
    "end": "3109780"
  },
  {
    "text": "together with the video that you're currently watching, um, as well- as well as a number of other, uh, forms of metrics,",
    "start": "3109780",
    "end": "3116020"
  },
  {
    "text": "uh, and then kind of the central topic of- this paper was given, uh, a large number of candidate videos,",
    "start": "3116020",
    "end": "3121650"
  },
  {
    "text": "can you rank, um, can you figure out what basically rank the- the that those candidates into an ordered list,",
    "start": "3121650",
    "end": "3128020"
  },
  {
    "text": "uh, where the top things correspond to the ones that you actually want to serve. Okay. Um, so how do you actually formulate the  ranking problem?",
    "start": "3128020",
    "end": "3136825"
  },
  {
    "start": "3135000",
    "end": "3280000"
  },
  {
    "text": "Uh, what this looks like? Again, similar to before, your input is gonna consist of the query video and features of the user.",
    "start": "3136825",
    "end": "3143934"
  },
  {
    "text": "It's also gonna have- the input is also gonna be one of the candidate videos so there's gonna be operating on each of the candidate videos.",
    "start": "3143935",
    "end": "3149860"
  },
  {
    "text": "Um, and interestingly in this case, things like the query video and the candidate video,",
    "start": "3149860",
    "end": "3154975"
  },
  {
    "text": "uh, these are actually literally, uh, the videos, they correspond the information about those videos like, um,",
    "start": "3154975",
    "end": "3161260"
  },
  {
    "text": "features of a video such as, um, the to- the topic, the title, um,",
    "start": "3161260",
    "end": "3166464"
  },
  {
    "text": "the upload time, uh, and then also user features like, um, user and context features such as their user profile,",
    "start": "3166465",
    "end": "3173589"
  },
  {
    "text": "the time of day, um, and a variety of other things. So this includes both, uh,",
    "start": "3173589",
    "end": "3178870"
  },
  {
    "text": "textual data as well as non-textual data that they u- have used kind of different shared embedding network",
    "start": "3178870",
    "end": "3185214"
  },
  {
    "text": "to embed into a common representation space. Then the output of this model is to determine the engagement and",
    "start": "3185215",
    "end": "3192849"
  },
  {
    "text": "satisfaction of the candidate video for the user after watching the query video.",
    "start": "3192850",
    "end": "3199615"
  },
  {
    "text": "Um, and so engagement include things like whether or not they clicked on the candidate,",
    "start": "3199615",
    "end": "3205300"
  },
  {
    "text": "uh, that this, er, video, whether or not they, uh, spent time, uh, watching that video.",
    "start": "3205300",
    "end": "3210670"
  },
  {
    "text": "So this is both classification and regression. Uh, and the satisfaction corresponds to things like clicking like on that video,",
    "start": "3210670",
    "end": "3216070"
  },
  {
    "text": "uh, as well as, um, rating that video for example. So again, this is a both a kind of a mixed discrete and continuous problem.",
    "start": "3216070",
    "end": "3223000"
  },
  {
    "text": "Uh, and then kind of the big question is how do you figure out the score from these,",
    "start": "3223000",
    "end": "3228190"
  },
  {
    "text": "uh, from these different metrics and, uh, what they do is they actually just use a very simple weighted combination of",
    "start": "3228190",
    "end": "3235210"
  },
  {
    "text": "these predictions where the weights of those predictions are just manually tuned.",
    "start": "3235210",
    "end": "3241080"
  },
  {
    "text": "Um, and the- the reason why it, the kind of the motivation that they had here is that the- the system is very complex, uh,",
    "start": "3241080",
    "end": "3249849"
  },
  {
    "text": "itself and also the, um, the metrics for like for whether or not, um, for whether or not,",
    "start": "3249850",
    "end": "3256090"
  },
  {
    "text": "you're actually serving good videos are online metrics and they're ones that you cannot, um, they are very difficult to optimize with respect to.",
    "start": "3256090",
    "end": "3263025"
  },
  {
    "text": "And so by doing this in a way that's kind of done manually, um, it's a bit simpler,",
    "start": "3263025",
    "end": "3268214"
  },
  {
    "text": "it- it- it's easier to kind of, um, to- to iterate on the- on the model essentially.",
    "start": "3268215",
    "end": "3274700"
  },
  {
    "text": "Okay. Um, so let's talk about the kind of how we actually predict engagement and satisfaction.",
    "start": "3274710",
    "end": "3280555"
  },
  {
    "start": "3280000",
    "end": "3407000"
  },
  {
    "text": "So, um, they considered some basic option, which corresponds to the multi-head architecture that we",
    "start": "3280555",
    "end": "3285730"
  },
  {
    "text": "talked about before where you have some shared layers and also some layers that are predicting engagement and, uh, and satisfaction.",
    "start": "3285730",
    "end": "3294099"
  },
  {
    "text": "This was kind of their- their baseline. Um, and one of the things that they found is that when the correlation between the tasks is low,",
    "start": "3294100",
    "end": "3301330"
  },
  {
    "text": "that will harm the learning process. As we've kind of talked about before it's sort of negative transfer, right?",
    "start": "3301330",
    "end": "3307345"
  },
  {
    "text": "Um, and so what they did instead, uh, is they used, uh, a form of soft parameter sharing.",
    "start": "3307345",
    "end": "3312790"
  },
  {
    "text": "And this looks like this, uh, where I'll go, I'll go through the details kind of step-by-step.",
    "start": "3312790",
    "end": "3318880"
  },
  {
    "text": "So you have some shared bottom layer, um, and the goal is, uh, the kind of a sort of mixture of experts model is to",
    "start": "3318880",
    "end": "3325540"
  },
  {
    "text": "allow different parts of the network to specialize. So, um, you have these different expert neural networks,",
    "start": "3325540",
    "end": "3332665"
  },
  {
    "text": "uh, that- that you want to be specialized in different me- in different ways. Uh, so you kind of- you can see, this example has two different experts.",
    "start": "3332665",
    "end": "3339220"
  },
  {
    "text": "Then you want to decide which expert to use for an input and for a given task K. Uh,",
    "start": "3339220",
    "end": "3346869"
  },
  {
    "text": "and so what this corresponds to is you have is a different set of, uh, weight matrices for each task and you have,",
    "start": "3346870",
    "end": "3354430"
  },
  {
    "text": "uh, an input and you pr- uh, do a linear combination and a softmax to produce, um, this, uh,",
    "start": "3354430",
    "end": "3362200"
  },
  {
    "text": "this distribution over which expert to use and then you compute the features from the selected expert,",
    "start": "3362200",
    "end": "3368650"
  },
  {
    "text": "so you, um, there's this bottom layer corresponds to the, uh, uh, sorry, the- the- the expert corresponds to fi of X.",
    "start": "3368650",
    "end": "3374575"
  },
  {
    "text": "You then, uh, multiply this with the gating function in order to produce the,",
    "start": "3374575",
    "end": "3380589"
  },
  {
    "text": "uh, the kind of the selected expert output. Uh, and then lastly, you compute the output of this.",
    "start": "3380590",
    "end": "3385870"
  },
  {
    "text": "So, uh, then you take another neural network h that's gonna take the output of the expert and produce the result.",
    "start": "3385870",
    "end": "3391495"
  },
  {
    "text": "Um, so this is an example of an architecture that starts out shared, branches out into multiple- multiple experts where it actually made,",
    "start": "3391495",
    "end": "3398080"
  },
  {
    "text": "it may use multiple or it may use just a single expert and then comes back to a single, um, part of the model.",
    "start": "3398080",
    "end": "3404630"
  },
  {
    "text": "Okay. Um, so in the experiments, the- the set up here was actually quite interesting.",
    "start": "3404970",
    "end": "3411700"
  },
  {
    "start": "3407000",
    "end": "4663000"
  },
  {
    "text": "Uh, they used TensorFlow and TPUs as you might expect. Um, they trained in temporal order where they're feeding in the videos,",
    "start": "3411700",
    "end": "3418585"
  },
  {
    "text": "uh, over time, uh, and training continuously to consume the newly arriving data and they said that this is really important so that, um,",
    "start": "3418585",
    "end": "3425665"
  },
  {
    "text": "because the distribution over time of use- user engagement is changing, um, as, um, as different trends become popular, et cetera.",
    "start": "3425665",
    "end": "3433599"
  },
  {
    "text": "Uh, they had various offline and online metrics. For offline, they looked at AUC for classification tasks",
    "start": "3433600",
    "end": "3440485"
  },
  {
    "text": "and squared error matr- metrics for- for regression tasks. Uh, but the most important things were actually",
    "start": "3440485",
    "end": "3446335"
  },
  {
    "text": "the online metrics because those were actually, um, the ones that you ultimately care about, uh, and so they did AB testing, um,",
    "start": "3446335",
    "end": "3453160"
  },
  {
    "text": "in comparison to their production system. Uh, and the, uh,",
    "start": "3453160",
    "end": "3459895"
  },
  {
    "text": "the live metrics for this online testing corresponded to things like the time spent on, um,",
    "start": "3459895",
    "end": "3464980"
  },
  {
    "text": "on YouTube, uh, survey responses that different users filled out and the rate of dismissals,",
    "start": "3464980",
    "end": "3471490"
  },
  {
    "text": "which I- I'd guess would kind of, um, relate to whether or not they're actually kind of dismissing suggestions or,",
    "start": "3471490",
    "end": "3477220"
  },
  {
    "text": "uh, by the recommender system. Uh, and then the last thing",
    "start": "3477220",
    "end": "3483579"
  },
  {
    "text": "worth noting here is that because this is a massive system, uh, computational efficiency also really matters",
    "start": "3483580",
    "end": "3489160"
  },
  {
    "text": "and so this is one of the reasons why they didn't consider independent training and why they really want to do multi-task training such that they didn't have to,",
    "start": "3489160",
    "end": "3495820"
  },
  {
    "text": "uh, ha- basically compute everything separately for all of these different metrics.",
    "start": "3495820",
    "end": "3500980"
  },
  {
    "text": "Okay. Um, so here are the results.",
    "start": "3500980",
    "end": "3505990"
  },
  {
    "text": "So the- the top two rows are showing the- the baseline network that had- that corresponded to a multi-head network and the bottom two are corresponding",
    "start": "3505990",
    "end": "3513369"
  },
  {
    "text": "to the mixtures of- mixture of experts, uh, architecture. What we see is that there's a a substantial increase",
    "start": "3513370",
    "end": "3519865"
  },
  {
    "text": "in engagement and in satisfaction, uh, at around 0.4% and 3% for the larger mixture of experts model,",
    "start": "3519865",
    "end": "3528565"
  },
  {
    "text": "which is, uh, which is nice to see. Uh, and also, they looked at how different tasks are utilizing the different experts.",
    "start": "3528565",
    "end": "3536530"
  },
  {
    "text": "So each of these bars, um, correspond to a different task. So you can see that expert 7 is typically doing things for task 4 and for task 1.",
    "start": "3536530",
    "end": "3544390"
  },
  {
    "text": "Whereas, expert 2 is typically, uh, computing features for task 2 and for task 3.",
    "start": "3544390",
    "end": "3550885"
  },
  {
    "text": "Um, and then lastly, they found that 20% of this sort of gating polarization where each, uh, expert would, uh, would kind of, uh,",
    "start": "3550885",
    "end": "3560275"
  },
  {
    "text": "you- you would basically actually like not use an expert at all and what they found is that, um, if they use some sort of drop out such that, um,",
    "start": "3560275",
    "end": "3567940"
  },
  {
    "text": "to prevent it from like only using kind of one expert for all the tasks so we are not using one expert at all, um,",
    "start": "3567940",
    "end": "3573160"
  },
  {
    "text": "this was- was helpful for mitigating that . Okay. Yeah?",
    "start": "3573160",
    "end": "3583240"
  },
  {
    "text": "Why would you not [inaudible] ? Sorry, can you repeat the question?",
    "start": "3583240",
    "end": "3589330"
  },
  {
    "text": "If, if for example one task was different but the other one for some- for some reason given to chose for specific action.",
    "start": "3589330",
    "end": "3597865"
  },
  {
    "text": "Yeah. So I think that what they mean by polarization here is that they're actually using one expert for all of the tasks,",
    "start": "3597865",
    "end": "3603685"
  },
  {
    "text": "um, or not using one expert at all. Okay, um, let's take a quick like one-minute break.",
    "start": "3603685",
    "end": "3614559"
  },
  {
    "text": "Uh, you guys have been asking a lot of questions, which is awesome, uh, and then we'll try to get into some meta-learning.",
    "start": "3614560",
    "end": "3620290"
  },
  {
    "text": "But [inaudible] in the, in the [inaudible] Do they have any way to compare how",
    "start": "3620290",
    "end": "3631060"
  },
  {
    "text": "well these approaches, like some [inaudible]. Give an example of the other recommenda- recommender system.",
    "start": "3631060",
    "end": "3638829"
  },
  {
    "text": "Let's say, um, somewhere I kind of agree [inaudible].",
    "start": "3638830",
    "end": "3644740"
  },
  {
    "text": "I don't have a sudden- in reading the paper, I guess I didn't have a sense for if they did a comparison of this approach versus other things like collaborative filtering.",
    "start": "3644740",
    "end": "3652465"
  },
  {
    "text": "Um, but I guess I would encourage you to take a closer look at the paper to see if they, they talked about that [NOISE].",
    "start": "3652465",
    "end": "3659980"
  },
  {
    "text": "Okay. Let's get started on the second part. Um, so let's talk about meta-learning.",
    "start": "3659980",
    "end": "3666040"
  },
  {
    "text": "We may not have time to get through everything, but if we don't then I'll, um, I'll cover what we didn't cover at the beginning of lecture on Monday.",
    "start": "3666040",
    "end": "3673435"
  },
  {
    "text": "Well, um, so to start off, um.",
    "start": "3673435",
    "end": "3679285"
  },
  {
    "text": "In many ways I think that are kind of two ways to view meta-learning algorithms. Uh, one is somewhat of a mechanistic view,",
    "start": "3679285",
    "end": "3687385"
  },
  {
    "text": "and another is somewhat of a probabilistic view. So the mechanistic view is a view that I think is very helpful for figuring, uh,",
    "start": "3687385",
    "end": "3696790"
  },
  {
    "text": "out how you actually go about implementing one of these algorithms, and really understanding kind of the underlying mechanics of,",
    "start": "3696790",
    "end": "3702820"
  },
  {
    "text": "of how things work and how the implementation works. And the probabilistic view I find to be very helpful for understanding,",
    "start": "3702820",
    "end": "3708609"
  },
  {
    "text": "um, conceptually and intuitively what these algorithms are doing.",
    "start": "3708610",
    "end": "3714145"
  },
  {
    "text": "Uh, and so the, the kind of mechanistic view is that you kind of have this deep neural network that",
    "start": "3714145",
    "end": "3719680"
  },
  {
    "text": "reads in datasets and make- makes predictions for new data points, such that when you see a new dataset and you can make predictions for new data points.",
    "start": "3719680",
    "end": "3726485"
  },
  {
    "text": "Um, and training for this network uses a dataset of datasets, um, each for a different task.",
    "start": "3726485",
    "end": "3732735"
  },
  {
    "text": "And, yeah, I could have- as I said this makes it easier to implement meta-learning algorithms, uh, whereas kind of at a high-level the probabilistic view is looking at, um,",
    "start": "3732735",
    "end": "3741820"
  },
  {
    "text": "meta-learning as learning priors, uh, essentially learning priors over tasks tha- in a way that",
    "start": "3741820",
    "end": "3749020"
  },
  {
    "text": "enables kind of combining that prior with the small amount of data for a new task in order to more efficiently learn.",
    "start": "3749020",
    "end": "3755605"
  },
  {
    "text": "Um, yeah, so kind of learning a task for new prior uses a small amount of data. Uh, and I find that kind of thinking about it from",
    "start": "3755605",
    "end": "3762340"
  },
  {
    "text": "a Bayesian perspective can make it a bit easier to understand what's going on. Uh, so I'm going to start with the probabilistic view, uh,",
    "start": "3762340",
    "end": "3769270"
  },
  {
    "text": "to give some intuition for what these algorithms are doing, and then, uh, I'll go into the more mechanistic view of actually how you implement these algorithms.",
    "start": "3769270",
    "end": "3776770"
  },
  {
    "text": "So for the first part, don't worry about how you would actually go about implementing things. Uh, it's more about some of the,",
    "start": "3776770",
    "end": "3782335"
  },
  {
    "text": "the conceptual aspects of things. So, uh, we're gonna kind of go back to problem definitions here, uh,",
    "start": "3782335",
    "end": "3788860"
  },
  {
    "text": "and kind of redefine things from a Bayesian perspective in order to view meta-learning as a Bayesian perspective.",
    "start": "3788860",
    "end": "3793930"
  },
  {
    "text": "So, uh, you can view supervised learning as, uh, a maximum likelihood problem,",
    "start": "3793930",
    "end": "3800830"
  },
  {
    "text": "where you're maximizing the likelihood of your parameters given your data. Uh, and in this case Phi is gonna be the model parameters and D is gonna be the dataset.",
    "start": "3800830",
    "end": "3811630"
  },
  {
    "text": "Uh, and of course, it's kind of as before the dataset contains x-y pairs where you have inputs and labels.",
    "start": "3811630",
    "end": "3818635"
  },
  {
    "text": "Um, and you can also, uh, view this, uh,",
    "start": "3818635",
    "end": "3823690"
  },
  {
    "text": "kind of redefine it as maximizing the probability of the data given your parameters, and maximizing the marginal probability of your parameters.",
    "start": "3823690",
    "end": "3831820"
  },
  {
    "text": "Um, so the first term is your data likelihood, and the second term may be something like a regularizer, like something like weight decay for example,",
    "start": "3831820",
    "end": "3838435"
  },
  {
    "text": "which corresponds to putting a Gaussian prior on your weights with a fixed variance.",
    "start": "3838435",
    "end": "3845350"
  },
  {
    "text": "Okay. Um, and so then what this looks like is you have, uh,",
    "start": "3845350",
    "end": "3850390"
  },
  {
    "text": "some optimization over your dataset, uh, and given your weights and then you have your regularizer.",
    "start": "3850390",
    "end": "3856735"
  },
  {
    "text": "Um, unfortunately if your data is very large, uh, as we kind of, uh, if you're, sorry,",
    "start": "3856735",
    "end": "3862960"
  },
  {
    "text": "if your dataset is very small as we talked about, um, then you might overfit to that dataset.",
    "start": "3862960",
    "end": "3869845"
  },
  {
    "text": "Uh, and even if you have a regularizer there, it may not be enough to, uh, prevent you from overfitting or it may, uh,",
    "start": "3869845",
    "end": "3878035"
  },
  {
    "text": "not- it may kind of not, not be informative enough of actually what you should be learning or kind of the model that you're trying to learn.",
    "start": "3878035",
    "end": "3884380"
  },
  {
    "text": "Um, so the question in meta-learning, and kind of the key problem that it's trying to answer",
    "start": "3884380",
    "end": "3890490"
  },
  {
    "text": "is when we are solving supervised learning problems, can we incorporate additional data in some way?",
    "start": "3890490",
    "end": "3895935"
  },
  {
    "text": "Like maybe we're not learning from scratch, maybe we have experience from, from before that we've,",
    "start": "3895935",
    "end": "3902070"
  },
  {
    "text": "uh, kind of, we've experienced the world before at this point. Um, and that's what it's gonna be called the meta-training data.",
    "start": "3902070",
    "end": "3908325"
  },
  {
    "text": "We want to be able to use the meta-training data such that when we perform a new task, we can, uh, learn it more effectively and more efficiently.",
    "start": "3908325",
    "end": "3915395"
  },
  {
    "text": "Uh, and in particular in, in meta-learning, we- this additional data",
    "start": "3915395",
    "end": "3920740"
  },
  {
    "text": "is actually going to correspond to a set of datasets. Uh, basically a set of tasks or datasets that's corresponding to tasks.",
    "start": "3920740",
    "end": "3926800"
  },
  {
    "text": "We wanna be able to use those datasets such that when we see a data for a new task, we can learn parameters for that task.",
    "start": "3926800",
    "end": "3933350"
  },
  {
    "text": "Um, and then of course each of these individual data point- each of these individual datasets will have k-data points.",
    "start": "3933420",
    "end": "3939650"
  },
  {
    "text": "Um, so for example, if you want to solve a few shot classification problem,",
    "start": "3939720",
    "end": "3946120"
  },
  {
    "text": "maybe you're given five images and you wanna be able to classify new images, uh, as being among one of those five classes.",
    "start": "3946120",
    "end": "3952510"
  },
  {
    "text": "Uh, if you try to train a neural network from scratch on this problem, it will overfit massively or if your regularizer is too strong, it won't do anything.",
    "start": "3952510",
    "end": "3959830"
  },
  {
    "text": "Um, but if you have data from other image classes, uh, like shown here,",
    "start": "3959830",
    "end": "3966520"
  },
  {
    "text": "then, then this is your meta-training data. Then you may be able to use that meta-training data in a way that allows you to learn,",
    "start": "3966520",
    "end": "3971980"
  },
  {
    "text": "uh, from only five examples in a manner that is effective.",
    "start": "3971980",
    "end": "3977330"
  },
  {
    "text": "Um, and of course this doesn't need to be image classification problems. This could be, um,",
    "start": "3977910",
    "end": "3983665"
  },
  {
    "text": "different kind of sinusoidal prediction problems. It could be, um, really a variety of other problems that,",
    "start": "3983665",
    "end": "3989995"
  },
  {
    "text": "I do language classification or, or kind of, yeah, uh, decoding text for example, etc.",
    "start": "3989995",
    "end": "3998125"
  },
  {
    "text": "Okay. Um, so that's kind of the problem that we wanna solve, um, but what if we don't wanna keep her- keep running our past experience forever.",
    "start": "3998125",
    "end": "4006030"
  },
  {
    "text": "What if we, uh, if we're gonna be training on, on all our past experience across tasks then,",
    "start": "4006030",
    "end": "4011984"
  },
  {
    "text": "um, we don't wanna assume that we have to access that every time we want to learn a new task. Uh, and so what we're gonna do is we're gonna try to kind of compile",
    "start": "4011985",
    "end": "4019379"
  },
  {
    "text": "our meta-training dataset down to a set of parameters Theta, which I'm going to call the meta-parameters.",
    "start": "4019379",
    "end": "4024404"
  },
  {
    "text": "Um, and Theta is basically gonna correspond to whatever we need to know about the meta-training data in order to solve new tasks quickly.",
    "start": "4024405",
    "end": "4032500"
  },
  {
    "text": "So, um, basically if you kind of view the- if you want to introduce this kind of intermediary variable, um,",
    "start": "4032810",
    "end": "4040710"
  },
  {
    "text": "if we write out the likelihood of our parameters for our dataset given our past data- our past meta-training data,",
    "start": "4040710",
    "end": "4046830"
  },
  {
    "text": "we can write this out, uh, in a way that integrates over, uh, our meta-parameters Theta.",
    "start": "4046830",
    "end": "4052619"
  },
  {
    "text": "Um, so we first and for our meta-parameters data given our meta-training data,",
    "start": "4052620",
    "end": "4057780"
  },
  {
    "text": "and then we can make predictions of our, our, our prediction about our kind of our task parameters given our data and our meta-parameters.",
    "start": "4057780",
    "end": "4064845"
  },
  {
    "text": "Uh, and note that this assumes that the, um, our task-specific parameters and",
    "start": "4064845",
    "end": "4069990"
  },
  {
    "text": "our meta-training data are conditionally independent based, uh, conditioned on Theta. Uh, and we can basically approximate this,",
    "start": "4069990",
    "end": "4076950"
  },
  {
    "text": "uh, integral with- this is a fairly crude approximation, but we can approximate this integral with a point estimate for our meta-parameters, where the first,",
    "start": "4076950",
    "end": "4085665"
  },
  {
    "text": "uh, the- kind of the right-hand side of this is going to correspond to meta-training, where we wanna learn a set of meta-parameters given our meta-training data.",
    "start": "4085665",
    "end": "4092609"
  },
  {
    "text": "And the left-hand side of this objective is gonna correspond to adaptation where we wanna be able to learn new parameters for a new task,",
    "start": "4092610",
    "end": "4099375"
  },
  {
    "text": "given data from that task and our meta-parameters Theta-star. Okay. Um, where Theta-star is equal to basically,",
    "start": "4099375",
    "end": "4108674"
  },
  {
    "text": "uh, argmax of log p Theta given our meta-training data.",
    "start": "4108675",
    "end": "4114099"
  },
  {
    "text": "Okay. So essentially this right-hand side is the meta-learning problem where we're optimizing over our meta-parameters such that when we use them for,",
    "start": "4114110",
    "end": "4122535"
  },
  {
    "text": "uh, for adaptation, we can, um, effectively learn parameters for that task.",
    "start": "4122535",
    "end": "4129010"
  },
  {
    "text": "Okay. Um, so meta-training is that cap- that second term and,",
    "start": "4129590",
    "end": "4137429"
  },
  {
    "text": "and, and adaptation is that, uh, is the term now outlined in red.",
    "start": "4137430",
    "end": "4142545"
  },
  {
    "text": "Uh, let's first go over, how we can go about adaptation. So we can, kind of, look at a very simple example,",
    "start": "4142545",
    "end": "4148200"
  },
  {
    "text": "and we'll revisit this example, um, at the end. Uh, so say, we wanna be able to make predictions, about test data points.",
    "start": "4148200",
    "end": "4155205"
  },
  {
    "text": "Um, the parameters corresponding to this neural network will correspond to Phi star.",
    "start": "4155205",
    "end": "4160305"
  },
  {
    "text": "They'll be the parameters for that task. Uh, and we want to be able to infer these parameters from data.",
    "start": "4160305",
    "end": "4166935"
  },
  {
    "text": "So [NOISE] one very simple example, for how we might put- uh, infer these parameters from data,",
    "start": "4166935",
    "end": "4172095"
  },
  {
    "text": "is by training a neural network to take in, the dataset and output Phi star or Phi star for that task.",
    "start": "4172095",
    "end": "4178560"
  },
  {
    "text": "[NOISE] Uh, and so uh, where each of these examples correspond to our dataset.",
    "start": "4178560",
    "end": "4185850"
  },
  {
    "text": "Uh, and so essentially, what this would correspond to is, um, we would have, kind of,",
    "start": "4185850",
    "end": "4191850"
  },
  {
    "text": "these different meta-training datasets [NOISE] for, for this dataset D, we would pass them to the neural network. We would then give it a, uh, a new data point,",
    "start": "4191850",
    "end": "4198330"
  },
  {
    "text": "and we wanna be able to have it make a prediction for that data point, uh, based off of the computed task specific parameters.",
    "start": "4198330",
    "end": "4205335"
  },
  {
    "text": "Um, so you add this to your test input and then your inpu- uh, your test label.",
    "start": "4205335",
    "end": "4210600"
  },
  {
    "text": "Now, uh, one big question is okay, we have this- this is, kind of, how we're gonna do the adaptation process.",
    "start": "4210600",
    "end": "4217320"
  },
  {
    "text": "How do we actually, go about meta-training this, uh, this model? So, um, how do we actually basically,",
    "start": "4217320",
    "end": "4225014"
  },
  {
    "text": "learn the parameters of our recurrent neural network theta star, such that it produces the right task specific parameters Phi star?",
    "start": "4225015",
    "end": "4233219"
  },
  {
    "text": "Um, and so the key idea here is we can, uh, basically, match test-time to training time.",
    "start": "4233220",
    "end": "4239969"
  },
  {
    "text": "So the test-time, we're gonna be predicting Phi star, in order to make predictions about test data points. We want to be able to do the same thing in meta-training and basically,",
    "start": "4239970",
    "end": "4247020"
  },
  {
    "text": "train this recurrent neural network, such that it produces parameters that lead to effective predictions or, or, or accurate predictions.",
    "start": "4247020",
    "end": "4253740"
  },
  {
    "text": "So essentially, the key idea is that, uh, train and test conditions should match.",
    "start": "4253740",
    "end": "4259410"
  },
  {
    "text": "Um, that's basically like the, the principal rule of meta-learning basically.",
    "start": "4259410",
    "end": "4265575"
  },
  {
    "text": "Uh, if you wanna be able learn at test-time, you should basically train it to learn during meta-training. Essentially be learning how to learn.",
    "start": "4265575",
    "end": "4273130"
  },
  {
    "text": "Um, so and then you can, kind of, view the learning process, uh,",
    "start": "4273320",
    "end": "4278989"
  },
  {
    "text": "the adaptation processes at sort of, meta test-time, uh, if, if the former process is meta-train time.",
    "start": "4278990",
    "end": "4284610"
  },
  {
    "text": "Okay. Um, right, so the process of optimizing for theta is meta-training,",
    "start": "4284610",
    "end": "4294420"
  },
  {
    "text": "the optimize for, for producing Phi is meta-testing. Um, now, one of the things",
    "start": "4294420",
    "end": "4300570"
  },
  {
    "text": "that's pretty challenging if at meta-training time you're actually training it, to make predictions about test data points, um, where do these data points come from?",
    "start": "4300570",
    "end": "4308130"
  },
  {
    "text": "Uh, how do we actually, optimize for it to make predictions on new data points. Uh, and the important thing here is that, uh,",
    "start": "4308130",
    "end": "4315119"
  },
  {
    "text": "we need to be able to essentially reserve a test set for each task that we're gonna be meta-training over. Uh, so if we have, uh, a set of tasks,",
    "start": "4315120",
    "end": "4323370"
  },
  {
    "text": "then we have basically trained data for each task, we also need corresponding test sets for each of those tasks.",
    "start": "4323370",
    "end": "4330000"
  },
  {
    "text": "Uh, and these test sets, uh, are going to be held out images,",
    "start": "4330000",
    "end": "4335025"
  },
  {
    "text": "from those same image categories. Now, you might say, okay now you're gonna be testing-training on the test set.",
    "start": "4335025",
    "end": "4341415"
  },
  {
    "text": "This doesn't seem right? Uh, [LAUGHTER] uh, [NOISE] and that is- that's a good intuition to have.",
    "start": "4341415",
    "end": "4347130"
  },
  {
    "text": "[NOISE] But, uh, in this case, we- now- are now moving from meta-training- from training set to the meta-train sets,",
    "start": "4347130",
    "end": "4354075"
  },
  {
    "text": "and test sets to meta test sets. So each of these tasks, the training set and the test sets for the task correspond to the meta-training dataset.",
    "start": "4354075",
    "end": "4361830"
  },
  {
    "text": "And then at meta-test time were given new tasks. Uh, and we don't wanna train on the meta-test set.",
    "start": "4361830",
    "end": "4368560"
  },
  {
    "text": "Okay. Um, so we have our meta-learning data, this corresponds to training and test sets for every task, uh,",
    "start": "4368840",
    "end": "4375570"
  },
  {
    "text": "where each of the training set- datasets corresponds to K data points. Each of the test data- datasets correspond to a new set of K data points.",
    "start": "4375570",
    "end": "4382679"
  },
  {
    "text": "Um, yeah. Okay. So the complete, kind of,",
    "start": "4382680",
    "end": "4391395"
  },
  {
    "text": "optimization problem is that at test-time we're gonna be inferring a set of task specific parameters. Which can be some, some function that takes as input",
    "start": "4391395",
    "end": "4398340"
  },
  {
    "text": "the training dataset and outputs the task specific parameters. Where the parameters of that function or the meta parameters are theta star.",
    "start": "4398340",
    "end": "4406260"
  },
  {
    "text": "Um, and we essentially wanna learn a set of meta parameters such that, this function is good for held-out data points,",
    "start": "4406260",
    "end": "4414225"
  },
  {
    "text": "after being- after ge- getting the training dataset as input. Okay. Um, so essentially you can view theta star as optimizing this,",
    "start": "4414225",
    "end": "4422264"
  },
  {
    "text": "uh, objective [NOISE] where we want to optimi- optimize the, the probability of the parameters,",
    "start": "4422265",
    "end": "4427439"
  },
  {
    "text": "um, being effective at new data points. Okay. Um, cool.",
    "start": "4427439",
    "end": "4436920"
  },
  {
    "text": "So you could also, look at this as a graphical model, where theta is essentially your prior,",
    "start": "4436920",
    "end": "4442710"
  },
  {
    "text": "Phi i is your task specific parameters for a given task, and you have a training set and a test set for,",
    "start": "4442710",
    "end": "4449939"
  },
  {
    "text": "um, for each task. So Phi is, um,",
    "start": "4449939",
    "end": "4454950"
  },
  {
    "text": "Phi leads to, uh, the data and theta acts as a prior on the task specific parameters for all the tasks.",
    "start": "4454950",
    "end": "4462645"
  },
  {
    "text": "So theta is essentially the information that's shared across tasks.",
    "start": "4462645",
    "end": "4467590"
  },
  {
    "text": "Okay. Um, and then this dashed line does means that we don't know the, the kind of test labels for new tasks at meta task time.",
    "start": "4468320",
    "end": "4475965"
  },
  {
    "text": "But we do know the training dataset. Okay. Um, some terminology",
    "start": "4475965",
    "end": "4481679"
  },
  {
    "text": "before I get into some of the more mechanistic view of meta-learning. So, um, I talked about this.",
    "start": "4481680",
    "end": "4487920"
  },
  {
    "text": "We call- I call this the meta-train dataset. Um, each of these- each of row- each of these rows is a meta-training task.",
    "start": "4487920",
    "end": "4494460"
  },
  {
    "text": "Uh, and each of these tasks has a corresponding train set and test set.",
    "start": "4494460",
    "end": "4499905"
  },
  {
    "text": "Uh, the, the left side of these can be viewed as the training data,",
    "start": "4499905",
    "end": "4505380"
  },
  {
    "text": "and the right side can be viewed as the test data. Uh, but another common terminology for this, is support set and query set where you have some set of",
    "start": "4505380",
    "end": "4512970"
  },
  {
    "text": "support images or training images and some query images or test images. Uh, and f- if you have a K-shot learning problem or a few shot learning problem,",
    "start": "4512970",
    "end": "4523200"
  },
  {
    "text": "K is the number of data points in your training dataset. So if you're doing one-shot learning you're doing- you're learning from one example,",
    "start": "4523200",
    "end": "4530175"
  },
  {
    "text": "if you're doing K-shot learning you're learning from K examples. Okay. Um, how does this relate to other problem settings?",
    "start": "4530175",
    "end": "4538890"
  },
  {
    "text": "So multi-task learning like we talked about at the beginning of this lecture, you learn a model with,",
    "start": "4538890",
    "end": "4545160"
  },
  {
    "text": "um, with a single set of parameters that solves multiple tasks. Uh, you don't care about generalizing to new tasks.",
    "start": "4545160",
    "end": "4550949"
  },
  {
    "text": "[NOISE] Uh, and this essentially can be seen as in somewhat of a special case as meta-lear- as meta-learning where your task specific parameters and your, um,",
    "start": "4550950",
    "end": "4559635"
  },
  {
    "text": "your prior parameters are the same, uh, such that you just, um,",
    "start": "4559635",
    "end": "4564719"
  },
  {
    "text": "kind of, have a single network that is representing all of the tasks. Uh, and in many ways multi-task learning is a prerequisite",
    "start": "4564720",
    "end": "4571650"
  },
  {
    "text": "for meta-learning because if you can't solve the training tasks, then you have no chance of being able to learn new tasks, uh, more efficiently than, um,",
    "start": "4571650",
    "end": "4579150"
  },
  {
    "text": "than like learning from scratch for example. Um, it's also related to things like hyperparameter optimization and, and auto-ML.",
    "start": "4579150",
    "end": "4586380"
  },
  {
    "text": "So, uh, in hyperparameter optimization you can essentially view",
    "start": "4586380",
    "end": "4591525"
  },
  {
    "text": "theta as the hyperparameters and Phi is the network weights. Uh, and in architecture search you could use theta as the architecture,",
    "start": "4591525",
    "end": "4599594"
  },
  {
    "text": "Phi is the network weights, uh, and both of these are a, kind of, a very active a-, uh,",
    "start": "4599595",
    "end": "4604620"
  },
  {
    "text": "areas of research and outside of the scope of this class, of this tutorial. Okay, um, I think we're mostly out of time,",
    "start": "4604620",
    "end": "4613485"
  },
  {
    "text": "and so I will cover the next two parts of the lecture in the next lecture,",
    "start": "4613485",
    "end": "4619170"
  },
  {
    "text": "and we'll probably push back the, um, the due date for the homework assignment, uh, probably like a couple days, such that we,",
    "start": "4619170",
    "end": "4625965"
  },
  {
    "text": "um, you guys have enough time to complete it. Um, are there any questions about what I covered with",
    "start": "4625965",
    "end": "4631980"
  },
  {
    "text": "meta-learning before we wrap up? Okay [NOISE].",
    "start": "4631980",
    "end": "4638550"
  },
  {
    "text": "A couple quick reminders before you leave the, um, Homework 1 is posted today and is not due on Monday, October 7th.",
    "start": "4638550",
    "end": "4648034"
  },
  {
    "text": "Uh, fill out paper preferences by tomorrow, uh, and the TensorFlow review session will also be tomorrow at 4.30 PM.",
    "start": "4648035",
    "end": "4654530"
  },
  {
    "text": "Bye. ",
    "start": "4654530",
    "end": "4657000"
  }
]