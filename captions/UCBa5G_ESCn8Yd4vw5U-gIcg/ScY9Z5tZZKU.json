[
  {
    "text": "All right. So this is about Doubly-efficient zkSNARKs,",
    "start": "0",
    "end": "2910"
  },
  {
    "text": "ah, without trusted setup.",
    "start": "2910",
    "end": "4245"
  },
  {
    "text": "So, ah, zero knowledge succinct, ah,",
    "start": "4245",
    "end": "6689"
  },
  {
    "text": "non- interactive argument of knowledge or a zkSNARK, um,",
    "start": "6690",
    "end": "10065"
  },
  {
    "text": "these are- these have been the subject of some intense, ah,",
    "start": "10065",
    "end": "12450"
  },
  {
    "text": "research interest and more recently,",
    "start": "12450",
    "end": "14460"
  },
  {
    "text": "even some interest in the broader uh, tech-world.",
    "start": "14460",
    "end": "17025"
  },
  {
    "text": "So I'm going to tell you about some of the work that my Co-Authors and I did.",
    "start": "17025",
    "end": "20085"
  },
  {
    "text": "But I'm also going to try and give you a more general picture of the area,",
    "start": "20085",
    "end": "23550"
  },
  {
    "text": "and other, you know, systems in it.",
    "start": "23550",
    "end": "25304"
  },
  {
    "text": "So first; let's, let's try to cut a little bit through the jargon.",
    "start": "25305",
    "end": "28695"
  },
  {
    "text": "What is a zkSNARK?",
    "start": "28695",
    "end": "30869"
  },
  {
    "text": "Well, so, it's an argument,",
    "start": "30870",
    "end": "33195"
  },
  {
    "text": "that is it's a proof,",
    "start": "33195",
    "end": "34500"
  },
  {
    "text": "but one whose validity depends on some cryptographic assumption.",
    "start": "34500",
    "end": "38100"
  },
  {
    "text": "Um, and it's an argument of knowledge.",
    "start": "38100",
    "end": "40739"
  },
  {
    "text": "Which means you can use it to prove, roughly speaking,",
    "start": "40740",
    "end": "43725"
  },
  {
    "text": "that you know a secret and, it's zero knowledge.",
    "start": "43725",
    "end": "47160"
  },
  {
    "text": "Meaning that when you use it to prove that you know a secret,",
    "start": "47160",
    "end": "49980"
  },
  {
    "text": "you don't reveal anything about that secret.",
    "start": "49980",
    "end": "52650"
  },
  {
    "text": "Um, now the proof is succinct,",
    "start": "52650",
    "end": "55140"
  },
  {
    "text": "meaning that it's short and it's non-interactive.",
    "start": "55140",
    "end": "58260"
  },
  {
    "text": "So it can just be written down and then later somebody can come and read it.",
    "start": "58260",
    "end": "62295"
  },
  {
    "text": "It doesn't require any kind of conversation.",
    "start": "62295",
    "end": "64784"
  },
  {
    "text": "And finally, we are concerned about publicly verifiable proofs.",
    "start": "64785",
    "end": "68310"
  },
  {
    "text": "Meaning anyone who reads the proof,",
    "start": "68310",
    "end": "70395"
  },
  {
    "text": "will be convinced of its validity.",
    "start": "70395",
    "end": "72645"
  },
  {
    "text": "So, ah, when we compare these different kinds of",
    "start": "72645",
    "end": "75210"
  },
  {
    "text": "SNARKs there are at least five questions that we can ask.",
    "start": "75210",
    "end": "77655"
  },
  {
    "text": "One is how big is the proof?",
    "start": "77655",
    "end": "80220"
  },
  {
    "text": "We said it was small, succinct,",
    "start": "80220",
    "end": "82410"
  },
  {
    "text": "but some kinds of zkSNARKs are smaller than others and",
    "start": "82410",
    "end": "84900"
  },
  {
    "text": "generally speaking argument systems may or may not be succinct.",
    "start": "84900",
    "end": "88215"
  },
  {
    "text": "Proof size is important.",
    "start": "88215",
    "end": "89630"
  },
  {
    "text": "For example, if you're gonna be sending the proofs over a network,",
    "start": "89630",
    "end": "92159"
  },
  {
    "text": "or if you're going to be storing many proofs for a long time.",
    "start": "92159",
    "end": "94950"
  },
  {
    "text": "Another question is, how hard is it to generate a proof?",
    "start": "94950",
    "end": "98240"
  },
  {
    "text": "That is how much time does it take to write down the contents of the proof?",
    "start": "98240",
    "end": "103034"
  },
  {
    "text": "And relatedly, how much time does it take to check the proof?",
    "start": "103035",
    "end": "106440"
  },
  {
    "text": "Okay? And throughout the talk you're going to see these a script 'P',and script 'V'.",
    "start": "106440",
    "end": "110100"
  },
  {
    "text": "Those refer to the prover, and the verifier.",
    "start": "110100",
    "end": "112740"
  },
  {
    "text": "The entity that generates the proof, and the entity that checks the proof.",
    "start": "112740",
    "end": "116265"
  },
  {
    "text": "Okay. So, remember the validity of these proofs since their arguments really,",
    "start": "116265",
    "end": "120479"
  },
  {
    "text": "depend on some cryptographic assumption.",
    "start": "120480",
    "end": "122140"
  },
  {
    "text": "So another question we can ask is,",
    "start": "122140",
    "end": "123750"
  },
  {
    "text": "what is that cryptographic assumption?",
    "start": "123750",
    "end": "125670"
  },
  {
    "text": "Er, we might care about this because as you would guess the,",
    "start": "125670",
    "end": "128149"
  },
  {
    "text": "the cryptographic community has reason to believe that some assumptions,",
    "start": "128150",
    "end": "131159"
  },
  {
    "text": "are better than others, maybe because they've been battle-tested for longer.",
    "start": "131160",
    "end": "134240"
  },
  {
    "text": "And finally, some zkSNARKs including the ones, ah,",
    "start": "134240",
    "end": "137370"
  },
  {
    "text": "that are currently most widely deployed like in Zcash require a trusted setup.",
    "start": "137370",
    "end": "142549"
  },
  {
    "text": "Meaning, that somebody has to run",
    "start": "142550",
    "end": "144510"
  },
  {
    "text": "an expensive one time computation and you can only believe a proof is valid,",
    "start": "144510",
    "end": "150269"
  },
  {
    "text": "if you trust the entity or entities that ran that setup computation.",
    "start": "150270",
    "end": "155085"
  },
  {
    "text": "So you can see already this is a big design space and every kind of zkSNARK and",
    "start": "155085",
    "end": "159720"
  },
  {
    "text": "every kind of zero knowledge proof system more generally",
    "start": "159720",
    "end": "161850"
  },
  {
    "text": "gives some different mix of these properties.",
    "start": "161850",
    "end": "164550"
  },
  {
    "text": "So the zkSNARK my Co-Authors and I designed it,",
    "start": "164550",
    "end": "167220"
  },
  {
    "text": "we call it Hyrax and we, we,",
    "start": "167220",
    "end": "168890"
  },
  {
    "text": "and it represents sort of a new point in the space.",
    "start": "168890",
    "end": "171150"
  },
  {
    "text": "Hyrax proves the satisfiability of arithmetic circuits.",
    "start": "171150",
    "end": "174569"
  },
  {
    "text": "We'll see what in, what that means in more detail soon.",
    "start": "174570",
    "end": "176940"
  },
  {
    "text": "But for now, imagine that we have some computation,",
    "start": "176940",
    "end": "179280"
  },
  {
    "text": "C that's a circuit and that is to say,",
    "start": "179280",
    "end": "182490"
  },
  {
    "text": "you know, sort of has gates in it.",
    "start": "182490",
    "end": "184245"
  },
  {
    "text": "We'll get into more detail on that soon.",
    "start": "184245",
    "end": "186239"
  },
  {
    "text": "And the prover, convinces the verifier,",
    "start": "186240",
    "end": "188865"
  },
  {
    "text": "that it knows some value W which we will call the witness,",
    "start": "188865",
    "end": "192825"
  },
  {
    "text": "that makes the computation or the circuit output true.",
    "start": "192825",
    "end": "196069"
  },
  {
    "text": "Now, for efficiency, Hyrax requires that",
    "start": "196070",
    "end": "199080"
  },
  {
    "text": "the computation has some kind of repetitive structure.",
    "start": "199080",
    "end": "202140"
  },
  {
    "text": "For example, it could be many parallel copies of the same computation,",
    "start": "202140",
    "end": "205620"
  },
  {
    "text": "or it could be, repeated instances,",
    "start": "205620",
    "end": "207774"
  },
  {
    "text": "sort of in series of the computation.",
    "start": "207774",
    "end": "209715"
  },
  {
    "text": "Again we'll see a little bit more on that later.",
    "start": "209715",
    "end": "211530"
  },
  {
    "text": "Now, in terms of the five costs we just saw,",
    "start": "211530",
    "end": "213959"
  },
  {
    "text": "Hyrax's proofs that are concretely and asymptotically small,",
    "start": "213960",
    "end": "217620"
  },
  {
    "text": "and the prover is concretely fast and asymptotically optimal.",
    "start": "217620",
    "end": "220830"
  },
  {
    "text": "The verifier, is also fast,",
    "start": "220830",
    "end": "222930"
  },
  {
    "text": "ah, and it's slightly work saving,",
    "start": "222930",
    "end": "225165"
  },
  {
    "text": "which is to say, for big enough circuits,",
    "start": "225165",
    "end": "227588"
  },
  {
    "text": "the verifier has to do less work to check the circuit.",
    "start": "227589",
    "end": "230950"
  },
  {
    "text": "Then to check the proof,",
    "start": "230950",
    "end": "232185"
  },
  {
    "text": "then it would have to, to, to,",
    "start": "232185",
    "end": "233610"
  },
  {
    "text": "sort of check the witness itself.",
    "start": "233610",
    "end": "235860"
  },
  {
    "text": "Er, and finally, Hyrax relies on a discrete log assumption and it needs no trusted setup.",
    "start": "235860",
    "end": "241050"
  },
  {
    "text": "So these are all sort of,",
    "start": "241050",
    "end": "242640"
  },
  {
    "text": "em, you know, asymptotic statements,",
    "start": "242640",
    "end": "244950"
  },
  {
    "text": "or sort of general statements,",
    "start": "244950",
    "end": "246099"
  },
  {
    "text": "but you might ask sort of more concrete more practical questions,",
    "start": "246100",
    "end": "249060"
  },
  {
    "text": "like, how does it compare to other systems?",
    "start": "249060",
    "end": "251099"
  },
  {
    "text": "And so that's what we did. We ran,",
    "start": "251100",
    "end": "252570"
  },
  {
    "text": "em, several other, em,",
    "start": "252570",
    "end": "254790"
  },
  {
    "text": "SNARK systems and we sort of did a concrete comparison.",
    "start": "254790",
    "end": "258644"
  },
  {
    "text": "And I'll tell you more about this later but the upshot is,",
    "start": "258645",
    "end": "261780"
  },
  {
    "text": "that Hyrax gives small proofs in the sense that,",
    "start": "261780",
    "end": "264600"
  },
  {
    "text": "if you wanted them to be smaller,",
    "start": "264600",
    "end": "266354"
  },
  {
    "text": "it seems right now like you would have to pay more in terms",
    "start": "266354",
    "end": "268860"
  },
  {
    "text": "of prover or verifier computation or both.",
    "start": "268860",
    "end": "271844"
  },
  {
    "text": "And, Hyrax is fast.",
    "start": "271845",
    "end": "273720"
  },
  {
    "text": "Meaning, if you want the prover or verifier to get faster,",
    "start": "273720",
    "end": "276965"
  },
  {
    "text": "it seems like you have to accept bigger proofs.",
    "start": "276965",
    "end": "280005"
  },
  {
    "text": "So, that's not to say,",
    "start": "280005",
    "end": "281940"
  },
  {
    "text": "that Hyrax is anything like the best proof system.",
    "start": "281940",
    "end": "284595"
  },
  {
    "text": "It's not. Because there isn't a best one.",
    "start": "284595",
    "end": "286935"
  },
  {
    "text": "This isn't a competition and there isn't a winner.",
    "start": "286935",
    "end": "289525"
  },
  {
    "text": "Right? This is a design space,",
    "start": "289525",
    "end": "291565"
  },
  {
    "text": "and there are different applications that might use designs in this space.",
    "start": "291565",
    "end": "295380"
  },
  {
    "text": "So when you go shopping for a zero knowledge proof system,",
    "start": "295380",
    "end": "298110"
  },
  {
    "text": "decide what is important to you,",
    "start": "298110",
    "end": "300264"
  },
  {
    "text": "and choose the correct system.",
    "start": "300265",
    "end": "301630"
  },
  {
    "text": "The system that matches up with that.",
    "start": "301630",
    "end": "303035"
  },
  {
    "text": "The best. So that's what we're going to do.",
    "start": "303035",
    "end": "305090"
  },
  {
    "text": "We're going to start by taking a look at some of the,",
    "start": "305090",
    "end": "308165"
  },
  {
    "text": "the design space of general purpose zero knowledge proof systems.",
    "start": "308165",
    "end": "311330"
  },
  {
    "text": "And later we'll look more at Hyrax's design,",
    "start": "311330",
    "end": "313474"
  },
  {
    "text": "and then some of the evaluation results I mentioned.",
    "start": "313475",
    "end": "316010"
  },
  {
    "text": "So when we talk about general purpose proof systems,",
    "start": "316010",
    "end": "319369"
  },
  {
    "text": "usually we mean proof systems for NP languages.",
    "start": "319369",
    "end": "322819"
  },
  {
    "text": "So what that means is there is some relation R,",
    "start": "322820",
    "end": "325265"
  },
  {
    "text": "and we can think of that as a computation that takes some values,",
    "start": "325265",
    "end": "329105"
  },
  {
    "text": "and then returns True or False.",
    "start": "329105",
    "end": "330920"
  },
  {
    "text": "And the values, are an input X,",
    "start": "330920",
    "end": "333530"
  },
  {
    "text": "from the verifier, and a witness W, from the approver.",
    "start": "333530",
    "end": "336570"
  },
  {
    "text": "And we can think of the witness as a secret,",
    "start": "336570",
    "end": "338630"
  },
  {
    "text": "that the prover knows and R the relation as",
    "start": "338630",
    "end": "341480"
  },
  {
    "text": "a computation that checks whether the witness is somehow,",
    "start": "341480",
    "end": "344895"
  },
  {
    "text": "correct for the verifier's input.",
    "start": "344895",
    "end": "347535"
  },
  {
    "text": "And at a very high level,",
    "start": "347535",
    "end": "349070"
  },
  {
    "text": "these systems all operate by turning",
    "start": "349070",
    "end": "351590"
  },
  {
    "text": "the witness checking computation into a sort of two different computations.",
    "start": "351590",
    "end": "355505"
  },
  {
    "text": "One, that's the verifier's job,",
    "start": "355505",
    "end": "358385"
  },
  {
    "text": "and one, that's the prover's job.",
    "start": "358385",
    "end": "360410"
  },
  {
    "text": "So we can think of this as sort of happening in",
    "start": "360410",
    "end": "362270"
  },
  {
    "text": "two stages which we'll call the front end and the back end.",
    "start": "362270",
    "end": "365944"
  },
  {
    "text": "Now in the front end,",
    "start": "365945",
    "end": "367520"
  },
  {
    "text": "we convert the witness checking computation into an arithmetic circuit.",
    "start": "367520",
    "end": "371639"
  },
  {
    "text": "Which is to say a generalized Boolean circuit,",
    "start": "371640",
    "end": "374195"
  },
  {
    "text": "where we can think of AND Gates as becoming",
    "start": "374195",
    "end": "376430"
  },
  {
    "text": "multiplication and OR Gates as becoming addition.",
    "start": "376430",
    "end": "379164"
  },
  {
    "text": "And the front end constructs this arithmetic circuit such that",
    "start": "379165",
    "end": "382820"
  },
  {
    "text": "its satisfiability is tantamount to",
    "start": "382820",
    "end": "385340"
  },
  {
    "text": "the correct execution of the witness checking computation.",
    "start": "385340",
    "end": "389080"
  },
  {
    "text": "Okay? Then the back end, applies proving machinery,",
    "start": "389080",
    "end": "392800"
  },
  {
    "text": "which is some combination of complexity theoretic and cryptographic objects,",
    "start": "392800",
    "end": "396830"
  },
  {
    "text": "to produce approver and a verifier computation.",
    "start": "396830",
    "end": "399680"
  },
  {
    "text": "Em, so such that a valid proof establishes that the circuit is satisfied.",
    "start": "399680",
    "end": "404479"
  },
  {
    "text": "Which by any implication in the front end",
    "start": "404480",
    "end": "406535"
  },
  {
    "text": "establishes that the witness checking computation was run correctly.",
    "start": "406535",
    "end": "410710"
  },
  {
    "text": "So up to this point,",
    "start": "410710",
    "end": "412030"
  },
  {
    "text": "I've been talking about different kinds of zero knowledge proof systems and,",
    "start": "412030",
    "end": "415170"
  },
  {
    "text": "and really what I've been referring to is that,",
    "start": "415170",
    "end": "417130"
  },
  {
    "text": "that proof machinery in the back end.",
    "start": "417130",
    "end": "419200"
  },
  {
    "text": "So we're going to focus in a little bit more on that.",
    "start": "419200",
    "end": "421600"
  },
  {
    "text": "Ah, let's take a look at how some of the existing systems work.",
    "start": "421600",
    "end": "424505"
  },
  {
    "text": "So maybe the most well known zero knowledge proof systems are Pinocchio and Libsnark.",
    "start": "424505",
    "end": "428960"
  },
  {
    "text": "These are used for example,",
    "start": "428960",
    "end": "430130"
  },
  {
    "text": "as I said earlier, in Zcash.",
    "start": "430130",
    "end": "431600"
  },
  {
    "text": "Now these are built on an object called a linear PCP and very roughly speaking,",
    "start": "431600",
    "end": "436835"
  },
  {
    "text": "their properties are such that they give short proofs,",
    "start": "436835",
    "end": "439850"
  },
  {
    "text": "and very fast verification, but,",
    "start": "439850",
    "end": "442470"
  },
  {
    "text": "proving is slow, and they rely on cryptographic assumptions that are non-standard.",
    "start": "442470",
    "end": "446750"
  },
  {
    "text": "That we don't, we don't trust them maybe quite as much.",
    "start": "446750",
    "end": "449330"
  },
  {
    "text": "And finally, they require a trusted setup.",
    "start": "449330",
    "end": "451490"
  },
  {
    "text": "Somebody has to do that initial computation.",
    "start": "451490",
    "end": "453865"
  },
  {
    "text": "Now earlier today, ah,",
    "start": "453865",
    "end": "455419"
  },
  {
    "text": "you saw a talk by Benedikt on bullet proofs and, em,",
    "start": "455420",
    "end": "458600"
  },
  {
    "text": "this relies essentially on a different kind of linear PCP and some different crypto and",
    "start": "458600",
    "end": "463400"
  },
  {
    "text": "the result is that bullet proof gives short proofs and unlike Libsnark and Pinocchio,",
    "start": "463400",
    "end": "468280"
  },
  {
    "text": "it uses standard cryptographic assumptions,",
    "start": "468280",
    "end": "470540"
  },
  {
    "text": "and it requires no setup.",
    "start": "470540",
    "end": "472205"
  },
  {
    "text": "On the other hand, em, there's a little price,",
    "start": "472205",
    "end": "474629"
  },
  {
    "text": "and that is that the,",
    "start": "474630",
    "end": "476280"
  },
  {
    "text": "the proving and veri- especially the verifying gets a little bit slower.",
    "start": "476280",
    "end": "480580"
  },
  {
    "text": "An entirely different class of proof machinery comes from",
    "start": "480580",
    "end": "484000"
  },
  {
    "text": "multi party computation in the head which is due to [inaudible].",
    "start": "484000",
    "end": "487430"
  },
  {
    "text": "And ZKBoo and ZKB++ are sort of the first practical implementations of this paradigm.",
    "start": "487430",
    "end": "494259"
  },
  {
    "text": "And they have fast proving,",
    "start": "494260",
    "end": "496110"
  },
  {
    "text": "they build on a standard cryptographic assumption,",
    "start": "496110",
    "end": "498608"
  },
  {
    "text": "and they have no trusted setup.",
    "start": "498609",
    "end": "500405"
  },
  {
    "text": "But they give long proofs and verifying is slowish.",
    "start": "500405",
    "end": "504895"
  },
  {
    "text": "What does that mean? Well the asymptotics aren't great.",
    "start": "504895",
    "end": "508014"
  },
  {
    "text": "So, and they kick in, sort of,",
    "start": "508015",
    "end": "509985"
  },
  {
    "text": "even for moderately sized problems.",
    "start": "509985",
    "end": "512079"
  },
  {
    "text": "So, for very small computations,",
    "start": "512080",
    "end": "514015"
  },
  {
    "text": "these are blindingly fast but for bigger computations maybe think again.",
    "start": "514015",
    "end": "518750"
  },
  {
    "text": "So more recently Ligero improves on the approach from ZKBoo and ZKB++.",
    "start": "518750",
    "end": "524740"
  },
  {
    "text": "And it uses some different sort of",
    "start": "524740",
    "end": "526520"
  },
  {
    "text": "complexity theoretic objects to give shorter proofs and faster verification.",
    "start": "526520",
    "end": "530930"
  },
  {
    "text": "I still say -ish here because compared to Libsnark and bulletproofs,",
    "start": "530930",
    "end": "535145"
  },
  {
    "text": "um the proofs are still longer.",
    "start": "535145",
    "end": "538215"
  },
  {
    "text": "And compared to Libsnark, the,",
    "start": "538215",
    "end": "540245"
  },
  {
    "text": "the verifying is still much slower.",
    "start": "540245",
    "end": "542645"
  },
  {
    "text": "Okay and finally, there's this newest class of machinery.",
    "start": "542645",
    "end": "546550"
  },
  {
    "text": "In some sense building on the oldest class of theory.",
    "start": "546550",
    "end": "550625"
  },
  {
    "text": "The Short PCPs and",
    "start": "550625",
    "end": "553050"
  },
  {
    "text": "LibSTARK is right now the only practical implementation of this approach.",
    "start": "553050",
    "end": "556320"
  },
  {
    "text": "And it gives short proofs and fast verification and it needs no trusted setup.",
    "start": "556320",
    "end": "561505"
  },
  {
    "text": "But proving is slow and it relies on",
    "start": "561505",
    "end": "565105"
  },
  {
    "text": "an unproven conjecture that has some relation to the hardness of Reed-Solomon decoding.",
    "start": "565105",
    "end": "570495"
  },
  {
    "text": "So this table is not gospel,",
    "start": "570495",
    "end": "573400"
  },
  {
    "text": "it's just a rough approximation of the state of play.",
    "start": "573400",
    "end": "576240"
  },
  {
    "text": "But the important thing to get from it is,",
    "start": "576240",
    "end": "578435"
  },
  {
    "text": "that there are all these different systems that you might pick",
    "start": "578435",
    "end": "580810"
  },
  {
    "text": "depending on which of the columns is most important to you.",
    "start": "580810",
    "end": "583865"
  },
  {
    "text": "And none of them really is clearly best among these.",
    "start": "583865",
    "end": "587605"
  },
  {
    "text": "Right. Okay so with that landscape in mind,",
    "start": "587605",
    "end": "590310"
  },
  {
    "text": "let's take a quick look at Hyrax's machinery.",
    "start": "590310",
    "end": "592654"
  },
  {
    "text": "So Hyrax is built on a completely different thing called",
    "start": "592655",
    "end": "595495"
  },
  {
    "text": "an interactive proof which is essentially a probabilistic cross-examination.",
    "start": "595495",
    "end": "599725"
  },
  {
    "text": "And we make these interactive proofs zero knowledge",
    "start": "599725",
    "end": "601975"
  },
  {
    "text": "using techniques of Ben-Or et al and Cramer and Damgård.",
    "start": "601975",
    "end": "604904"
  },
  {
    "text": "But as we'll see naively applying those techniques results in poor performance.",
    "start": "604905",
    "end": "609585"
  },
  {
    "text": "So in Hyrax we also include several refinements which result in order of magnitudes",
    "start": "609585",
    "end": "614300"
  },
  {
    "text": "improvement in both verifier time and proof",
    "start": "614300",
    "end": "616620"
  },
  {
    "text": "size and small constant factors and improvement for the prover as well.",
    "start": "616620",
    "end": "620185"
  },
  {
    "text": "So the high level idea in Hyrax is,",
    "start": "620185",
    "end": "622950"
  },
  {
    "text": "that in an interactive proof,",
    "start": "622950",
    "end": "624770"
  },
  {
    "text": "the verifier sending questions and the prover is sending answers to those questions.",
    "start": "624770",
    "end": "628765"
  },
  {
    "text": "And what we're gonna do is replace all the answers that the prover",
    "start": "628765",
    "end": "632230"
  },
  {
    "text": "sends with cryptographic commitments to the answers.",
    "start": "632230",
    "end": "635894"
  },
  {
    "text": "And then the prover is gonna help the verifier,",
    "start": "635895",
    "end": "638300"
  },
  {
    "text": "um to check that the contents of the commitment are actually",
    "start": "638300",
    "end": "642985"
  },
  {
    "text": "a message that would have been valid in the sort of",
    "start": "642985",
    "end": "645230"
  },
  {
    "text": "underlying interactive proof without revealing anything else.",
    "start": "645230",
    "end": "648735"
  },
  {
    "text": "Um, so to review,",
    "start": "648735",
    "end": "650570"
  },
  {
    "text": "let's take a look at a cryptographic commitment.",
    "start": "650570",
    "end": "652430"
  },
  {
    "text": "So in a cryptographic commitment scheme we have a sender that computes",
    "start": "652430",
    "end": "655899"
  },
  {
    "text": "a commitment to a message and then it sends the commitment to a receiver.",
    "start": "655900",
    "end": "659515"
  },
  {
    "text": "The later the sender can open the commitment um,",
    "start": "659515",
    "end": "662689"
  },
  {
    "text": "and then reveal the message inside and convince the receiver that",
    "start": "662689",
    "end": "667565"
  },
  {
    "text": "the message that's revealed is consistent with the com- with the- with the um,",
    "start": "667565",
    "end": "672565"
  },
  {
    "text": "um commitment that was sent earlier.",
    "start": "672565",
    "end": "674555"
  },
  {
    "text": "So generally speaking, commitment schemes have two properties that we care about.",
    "start": "674555",
    "end": "678140"
  },
  {
    "text": "Hiding means that the commitment reveals nothing about the message",
    "start": "678140",
    "end": "681460"
  },
  {
    "text": "inside and binding means that the sender can't lie when it tries to open that commitment.",
    "start": "681460",
    "end": "686645"
  },
  {
    "text": "It can't decide, well I really wanted to send this other message,",
    "start": "686645",
    "end": "689680"
  },
  {
    "text": "so I'm gonna do that instead because it'll get caught cheating.",
    "start": "689680",
    "end": "692375"
  },
  {
    "text": "So Hyrax uses special class of commitments that have sort of a third, sorry,",
    "start": "692375",
    "end": "697035"
  },
  {
    "text": "they have sort of a third property a linear homomorphism,",
    "start": "697035",
    "end": "699964"
  },
  {
    "text": "which means there's some operator that we can",
    "start": "699965",
    "end": "701975"
  },
  {
    "text": "use essentially to add two commitments together.",
    "start": "701975",
    "end": "704315"
  },
  {
    "text": "So when we do that,",
    "start": "704315",
    "end": "705450"
  },
  {
    "text": "we get a new commitment that has inside of it,",
    "start": "705450",
    "end": "708040"
  },
  {
    "text": "a message that's the sum of the two.",
    "start": "708040",
    "end": "710329"
  },
  {
    "text": "And from that you can get sort of scaling by a- by",
    "start": "710330",
    "end": "712500"
  },
  {
    "text": "some constant factor because you can just add the same message to itself many times.",
    "start": "712500",
    "end": "717000"
  },
  {
    "text": "Okay, so the other thing that Hyrax builds on is an interactive proof",
    "start": "717000",
    "end": "720415"
  },
  {
    "text": "and specifically one due to Goldwasser, Kalai and Rothblum.",
    "start": "720415",
    "end": "723485"
  },
  {
    "text": "This is an interactive proof for layered arithmetic circuit evaluation,",
    "start": "723485",
    "end": "727250"
  },
  {
    "text": "which means that the inputs to the circuit feed one set of",
    "start": "727250",
    "end": "730365"
  },
  {
    "text": "gates and those- that the outputs from those gates feed a second set,",
    "start": "730365",
    "end": "733765"
  },
  {
    "text": "the outputs from those feed a third et cetera.",
    "start": "733765",
    "end": "735845"
  },
  {
    "text": "Um, so to start the proof the verifier gives some inputs to the prover and then",
    "start": "735845",
    "end": "740529"
  },
  {
    "text": "the prover is gonna evaluate the arithmetic circuit and produce some output y,",
    "start": "740530",
    "end": "745875"
  },
  {
    "text": "that it's gonna send to the verifier.",
    "start": "745875",
    "end": "747855"
  },
  {
    "text": "Now the verifier and the prover start to interact.",
    "start": "747855",
    "end": "750725"
  },
  {
    "text": "So first the verifier is gonna construct",
    "start": "750725",
    "end": "753089"
  },
  {
    "text": "a polynomial that relates the purported output that's y,",
    "start": "753090",
    "end": "756815"
  },
  {
    "text": "to the last layer of gates in the circuit.",
    "start": "756815",
    "end": "759065"
  },
  {
    "text": "Then it's gonna engage the prover in what's called a sum-check protocol.",
    "start": "759065",
    "end": "762585"
  },
  {
    "text": "This is sort of a foundational interactive proof.",
    "start": "762585",
    "end": "765265"
  },
  {
    "text": "And the result of that sum-check protocol is",
    "start": "765265",
    "end": "768410"
  },
  {
    "text": "a claim about the second last layer of the circuit.",
    "start": "768410",
    "end": "772024"
  },
  {
    "text": "Now in some sense that's not good enough",
    "start": "772025",
    "end": "774140"
  },
  {
    "text": "because the verifier can't check that very easily.",
    "start": "774140",
    "end": "776370"
  },
  {
    "text": "So what do the verifier and prover do?",
    "start": "776370",
    "end": "778180"
  },
  {
    "text": "They-they continue to interact.",
    "start": "778180",
    "end": "779630"
  },
  {
    "text": "So now we run another sum-check and we get a claim without the prior layer.",
    "start": "779630",
    "end": "783165"
  },
  {
    "text": "And we keep doing that and eventually we get",
    "start": "783165",
    "end": "785845"
  },
  {
    "text": "a claim whose truth is related to the inputs to the computation.",
    "start": "785845",
    "end": "789670"
  },
  {
    "text": "Now in a non-zero knowledge version of GKR, this would be it,",
    "start": "789670",
    "end": "793470"
  },
  {
    "text": "we would be done because the verifier has",
    "start": "793470",
    "end": "795209"
  },
  {
    "text": "those inputs and it can just check that claim directly.",
    "start": "795210",
    "end": "798020"
  },
  {
    "text": "But in Zero knowledge we need to make two modifications.",
    "start": "798020",
    "end": "801980"
  },
  {
    "text": "So the first one as I said earlier,",
    "start": "801980",
    "end": "803815"
  },
  {
    "text": "is that the prover  is going to replace all of its messages in",
    "start": "803815",
    "end": "807070"
  },
  {
    "text": "the sum-check invocations with commitments to those messages.",
    "start": "807070",
    "end": "810640"
  },
  {
    "text": "And the second, and this one's a little more complicated,",
    "start": "810640",
    "end": "813640"
  },
  {
    "text": "is that we need to give the verifier some way to check that final statement in the proof.",
    "start": "813640",
    "end": "819520"
  },
  {
    "text": "And remember, the verifier never gets to see the witness.",
    "start": "819520",
    "end": "823500"
  },
  {
    "text": "And since this is a witness checking computation,",
    "start": "823500",
    "end": "825980"
  },
  {
    "text": "somehow the inputs have to encode the witness.",
    "start": "825980",
    "end": "828214"
  },
  {
    "text": "So the verifier certainly can't check that directly.",
    "start": "828215",
    "end": "830850"
  },
  {
    "text": "So what's it gonna do? Well, we're going to use what we",
    "start": "830850",
    "end": "833130"
  },
  {
    "text": "call a polynomial commitment scheme.",
    "start": "833130",
    "end": "835925"
  },
  {
    "text": "So the the final check that the verifier needs to",
    "start": "835925",
    "end": "838649"
  },
  {
    "text": "do is just evaluating a polynomial that we'll call tilde m.",
    "start": "838650",
    "end": "842275"
  },
  {
    "text": "And this polynomial encodes both the input and the witness.",
    "start": "842275",
    "end": "846815"
  },
  {
    "text": "Now to run that check,",
    "start": "846815",
    "end": "848455"
  },
  {
    "text": "the prover will send a commitment to the verifier at the start of the protocol.",
    "start": "848455",
    "end": "854540"
  },
  {
    "text": "So before any interaction happens.",
    "start": "854540",
    "end": "856360"
  },
  {
    "text": "Okay then the prover and the verifier are gonna run",
    "start": "856360",
    "end": "859000"
  },
  {
    "text": "the interactive proof that we just saw on the previous slide.",
    "start": "859000",
    "end": "861785"
  },
  {
    "text": "And at the end the prover is just going to make a claim, it's going to say,",
    "start": "861785",
    "end": "864899"
  },
  {
    "text": "\"here the evaluation that you really want is this one, is this value here.\"",
    "start": "864900",
    "end": "868965"
  },
  {
    "text": "And finally the prover and the verifier are going to engage in an- in",
    "start": "868965",
    "end": "873310"
  },
  {
    "text": "an additional protocol that convinces",
    "start": "873310",
    "end": "875490"
  },
  {
    "text": "the verifier that the output that the prover just claimed,",
    "start": "875490",
    "end": "879070"
  },
  {
    "text": "is consistent with the commitments",
    "start": "879070",
    "end": "881255"
  },
  {
    "text": "that the prover sent at the beginning of the protocol.",
    "start": "881255",
    "end": "884075"
  },
  {
    "text": "So um, Hyrax uses",
    "start": "884075",
    "end": "886665"
  },
  {
    "text": "a new polynomial commitment scheme for multi linear polynomials which is what m tilde is.",
    "start": "886665",
    "end": "891230"
  },
  {
    "text": "And I'm going to show you a little bit about how that works now.",
    "start": "891230",
    "end": "893930"
  },
  {
    "text": "So these multilinear polynomials have a specific form.",
    "start": "893930",
    "end": "897210"
  },
  {
    "text": "Namely, we can think of them as a vector matrix, vector product.",
    "start": "897210",
    "end": "900405"
  },
  {
    "text": "So the vectors L and R depend only on",
    "start": "900405",
    "end": "903390"
  },
  {
    "text": "the point at which we evaluate the polynomial and the Matrix T",
    "start": "903390",
    "end": "907100"
  },
  {
    "text": "encodes the monomials of tilde M. In our case the matrix is encoding W the witness.",
    "start": "907100",
    "end": "914024"
  },
  {
    "text": "So a naive approach is that we would just build",
    "start": "914025",
    "end": "917450"
  },
  {
    "text": "a polynomial commitment scheme by having the prover commit",
    "start": "917450",
    "end": "920105"
  },
  {
    "text": "to each element of the Matrix T individually.",
    "start": "920105",
    "end": "922964"
  },
  {
    "text": "And I think- if you think about it,",
    "start": "922965",
    "end": "924345"
  },
  {
    "text": "you'll see that- that's enough already because",
    "start": "924345",
    "end": "926555"
  },
  {
    "text": "since then- these commitments as I said earlier have this linear homomorphism,",
    "start": "926555",
    "end": "930274"
  },
  {
    "text": "we can already compute a vector matrix vector product just by using that homomorphism.",
    "start": "930275",
    "end": "936230"
  },
  {
    "text": "Okay, but that's inefficient.",
    "start": "936230",
    "end": "937760"
  },
  {
    "text": "Why? Well the commitment size and the work to do",
    "start": "937760",
    "end": "941630"
  },
  {
    "text": "the polynomial- to compute the commitment to",
    "start": "941630",
    "end": "943940"
  },
  {
    "text": "the polynomial is linear in the size of the witness.",
    "start": "943940",
    "end": "947000"
  },
  {
    "text": "Right. So as the witness gets bigger,",
    "start": "947000",
    "end": "948560"
  },
  {
    "text": "it scales linearly and we'd rather scale sub linearly.",
    "start": "948560",
    "end": "951330"
  },
  {
    "text": "Um, so to sidestep that problem,",
    "start": "951330",
    "end": "953595"
  },
  {
    "text": "we're going to follow an idea due to Jens Groth who uses",
    "start": "953595",
    "end": "956680"
  },
  {
    "text": "multi commitment schemes to commit to each row of the matrix.",
    "start": "956680",
    "end": "960785"
  },
  {
    "text": "So what's a multi commitment?",
    "start": "960785",
    "end": "962230"
  },
  {
    "text": "Well it's a commitment where the message inside is a vector.",
    "start": "962230",
    "end": "965935"
  },
  {
    "text": "And if we use the Pedersen commitment then what we",
    "start": "965935",
    "end": "969230"
  },
  {
    "text": "get is a multi commitment that has a vector wise homomorphism.",
    "start": "969230",
    "end": "972690"
  },
  {
    "text": "So if we have two commitments,",
    "start": "972690",
    "end": "974105"
  },
  {
    "text": "two vectors and we use the add- addition operator on them,",
    "start": "974105",
    "end": "976940"
  },
  {
    "text": "what we get is a commitment to a new vector that's",
    "start": "976940",
    "end": "978950"
  },
  {
    "text": "the sum vector wise of the previous two.",
    "start": "978950",
    "end": "982180"
  },
  {
    "text": "Okay, so then how are we gonna use this?",
    "start": "982180",
    "end": "984830"
  },
  {
    "text": "Well, the verifier is gonna compute the vector matrix product,",
    "start": "984830",
    "end": "988115"
  },
  {
    "text": "L times T, uh,",
    "start": "988115",
    "end": "989600"
  },
  {
    "text": "by itself using that vector-wise homomorphism.",
    "start": "989600",
    "end": "992250"
  },
  {
    "text": "And I thi- and again, I think we can see how that happens.",
    "start": "992250",
    "end": "994415"
  },
  {
    "text": "The entries of L are each scaling one row of the Matrix T,",
    "start": "994415",
    "end": "998514"
  },
  {
    "text": "and then we sum those scaled versions together.",
    "start": "998515",
    "end": "1001240"
  },
  {
    "text": "And then second, the prover is gonna send",
    "start": "1001240",
    "end": "1003904"
  },
  {
    "text": "a commitment to a claimed evaluation of tilde M,",
    "start": "1003905",
    "end": "1007950"
  },
  {
    "text": "and then finally the prover is gonna use what's",
    "start": "1007950",
    "end": "1010280"
  },
  {
    "text": "called the dot product argument or an inner product argument,",
    "start": "1010280",
    "end": "1012670"
  },
  {
    "text": "to convince the verifier that the claimed evaluation is",
    "start": "1012670",
    "end": "1015740"
  },
  {
    "text": "consistent with the vector R and the vector matrix product L times T,",
    "start": "1015740",
    "end": "1020110"
  },
  {
    "text": "that the verifier previously computed.",
    "start": "1020110",
    "end": "1022084"
  },
  {
    "text": "Now, if this sounds familiar it's because you've",
    "start": "1022085",
    "end": "1024380"
  },
  {
    "text": "already seen this earlier today in Bulletproofs.",
    "start": "1024380",
    "end": "1026750"
  },
  {
    "text": "In fact, we adapt the dot product argument from Bulletproofs um,",
    "start": "1026750",
    "end": "1030725"
  },
  {
    "text": "and the result is that,",
    "start": "1030725",
    "end": "1032155"
  },
  {
    "text": "um, this has some, er,",
    "start": "1032155",
    "end": "1033370"
  },
  {
    "text": "kind of very low cost in terms of the communication.",
    "start": "1033370",
    "end": "1036230"
  },
  {
    "text": "Specifically, it's logarithmic in the length in,",
    "start": "1036230",
    "end": "1038549"
  },
  {
    "text": "in sort of the number of columns in the matrix.",
    "start": "1038550",
    "end": "1041490"
  },
  {
    "text": "Um, so that means if the matrix is a square,",
    "start": "1041490",
    "end": "1044584"
  },
  {
    "text": "then the prover is gonna send one commitment per row,",
    "start": "1044585",
    "end": "1047370"
  },
  {
    "text": "plus a logarithmic number of",
    "start": "1047370",
    "end": "1048770"
  },
  {
    "text": "extra messages that we don't need to worry too much about, they're small.",
    "start": "1048770",
    "end": "1051595"
  },
  {
    "text": "And the verifier's computation is gonna be",
    "start": "1051595",
    "end": "1053760"
  },
  {
    "text": "proportional to the sum of the number of rows and the number of columns.",
    "start": "1053760",
    "end": "1057265"
  },
  {
    "text": "And in total, both of these are just sort of square root-ish.",
    "start": "1057265",
    "end": "1060375"
  },
  {
    "text": "Okay. But alternatively, what we can do is we can adjust the size of the matrix.",
    "start": "1060375",
    "end": "1065080"
  },
  {
    "text": "We can make it sort of fewer rows and more columns.",
    "start": "1065080",
    "end": "1068044"
  },
  {
    "text": "And what that means, is that the prover ends up sending less information to the verifier,",
    "start": "1068045",
    "end": "1072475"
  },
  {
    "text": "and then the verifier ends up having to do a little more work to,",
    "start": "1072475",
    "end": "1075940"
  },
  {
    "text": "uh, to sort of compute over the columns of the matrix.",
    "start": "1075940",
    "end": "1080129"
  },
  {
    "text": "What this means at the,",
    "start": "1080130",
    "end": "1081875"
  },
  {
    "text": "at the end is that you can tailor Hyrax to your applications' needs.",
    "start": "1081875",
    "end": "1085545"
  },
  {
    "text": "If you need less communication,",
    "start": "1085545",
    "end": "1087540"
  },
  {
    "text": "you can pay for it with a little bit more verification time.",
    "start": "1087540",
    "end": "1091790"
  },
  {
    "text": "Okay, so I've described everything in terms of an interactive proof.",
    "start": "1091790",
    "end": "1095140"
  },
  {
    "text": "To get it non-interactive,",
    "start": "1095140",
    "end": "1096470"
  },
  {
    "text": "we use the Fiat-Shamir heuristic.",
    "start": "1096470",
    "end": "1097960"
  },
  {
    "text": "Um, and w- we give several other refinements that I'll leave to the paper,",
    "start": "1097960",
    "end": "1101059"
  },
  {
    "text": "but I'll just mention them quickly here.",
    "start": "1101060",
    "end": "1102480"
  },
  {
    "text": "First, we also use these multi commitments, um,",
    "start": "1102480",
    "end": "1105230"
  },
  {
    "text": "to save proof size and verifier work in the sum check invocations.",
    "start": "1105230",
    "end": "1108945"
  },
  {
    "text": "And second, we develop what we call a redistribution layer,",
    "start": "1108945",
    "end": "1111799"
  },
  {
    "text": "which remember I said,",
    "start": "1111800",
    "end": "1112900"
  },
  {
    "text": "we need some sort of repeated structure to the computation.",
    "start": "1112900",
    "end": "1116035"
  },
  {
    "text": "The point of the redistribution layer is to sort of give us a wider range of",
    "start": "1116035",
    "end": "1119590"
  },
  {
    "text": "computations that we can turn into something that has the appropriate repeated structure.",
    "start": "1119590",
    "end": "1123900"
  },
  {
    "text": "And finally, we tweak the giraffe interactive proof",
    "start": "1123900",
    "end": "1126560"
  },
  {
    "text": "which is prior work to make gi- Giraffe plus,",
    "start": "1126560",
    "end": "1129030"
  },
  {
    "text": "plus which reduces the proof size somewhat further.",
    "start": "1129030",
    "end": "1132795"
  },
  {
    "text": "Okay, so let's take a look at the evaluation results.",
    "start": "1132795",
    "end": "1137175"
  },
  {
    "text": "So, uh, our points of comparison are five existing systems.",
    "start": "1137175",
    "end": "1140680"
  },
  {
    "text": "That's BCCGP square root, Bulletproofs, ZKB++,",
    "start": "1140680",
    "end": "1144050"
  },
  {
    "text": "Ligero, LibSTARK, and then also two versions of Hyrax.",
    "start": "1144050",
    "end": "1148400"
  },
  {
    "text": "One, where the, the matrix T has sort of twice as many columns",
    "start": "1148400",
    "end": "1153050"
  },
  {
    "text": "as rows and we use the polynomial commitment scheme trick that I described earlier,",
    "start": "1153050",
    "end": "1157685"
  },
  {
    "text": "and the other where we leave off all the refinements.",
    "start": "1157685",
    "end": "1160280"
  },
  {
    "text": "We just do them the naive straightforward thing.",
    "start": "1160280",
    "end": "1162450"
  },
  {
    "text": "So, the idea there is let's see how much those refinements help.",
    "start": "1162450",
    "end": "1165144"
  },
  {
    "text": "And don't worry too much about memorizing the legend,",
    "start": "1165145",
    "end": "1168295"
  },
  {
    "text": "I will repeat it on the next lines, I promise.",
    "start": "1168295",
    "end": "1170020"
  },
  {
    "text": "Um, so we compare these systems at 90-bit security which",
    "start": "1170020",
    "end": "1174120"
  },
  {
    "text": "arguably is too low but maybe is sort of",
    "start": "1174120",
    "end": "1175780"
  },
  {
    "text": "the starting point for what you might use for a non-interactive proof.",
    "start": "1175780",
    "end": "1178580"
  },
  {
    "text": "Um, and the benchmark I'm gonna show you is what's called a SHA-256 Merkle tree.",
    "start": "1178580",
    "end": "1182630"
  },
  {
    "text": "So, in this benchmark, the prover is gonna convince",
    "start": "1182630",
    "end": "1184870"
  },
  {
    "text": "the verifier that it knows all the leaves of a hash tree,",
    "start": "1184870",
    "end": "1188385"
  },
  {
    "text": "that correspond to a root that the verifier holds.",
    "start": "1188385",
    "end": "1191770"
  },
  {
    "text": "Okay, so first up is proof size versus log of the number of leaves in the hash tree.",
    "start": "1191770",
    "end": "1198190"
  },
  {
    "text": "So, both X and Y axes are effectively logarithmic.",
    "start": "1198190",
    "end": "1201129"
  },
  {
    "text": "Um, and the green dots are Hyrax.",
    "start": "1201130",
    "end": "1203725"
  },
  {
    "text": "So remember Hyrax lets you tailor the proof size in the verifier time.",
    "start": "1203725",
    "end": "1206975"
  },
  {
    "text": "And as I said earlier,",
    "start": "1206975",
    "end": "1208289"
  },
  {
    "text": "we tailored it to sort of,",
    "start": "1208290",
    "end": "1209605"
  },
  {
    "text": "um, a sho- a, a, short fat matrix.",
    "start": "1209605",
    "end": "1212835"
  },
  {
    "text": "So, what I'm showing you here I call Hyrax one-third.",
    "start": "1212835",
    "end": "1215260"
  },
  {
    "text": "Um, and the result of that sort of tailoring is",
    "start": "1215260",
    "end": "1218570"
  },
  {
    "text": "that the Hyrax has kind of the second best proof size among these systems.",
    "start": "1218570",
    "end": "1222174"
  },
  {
    "text": "But, you can see that Bulletproofs has mu- much much better proof size, much smaller.",
    "start": "1222175",
    "end": "1226365"
  },
  {
    "text": "And on the other side, ZKBoo,",
    "start": "1226365",
    "end": "1228405"
  },
  {
    "text": "the red squares, has these very large proofs,",
    "start": "1228405",
    "end": "1230965"
  },
  {
    "text": "and the naive version of Hyrax where we don't apply",
    "start": "1230965",
    "end": "1233265"
  },
  {
    "text": "any of the optimizations is, is even worse, right?",
    "start": "1233265",
    "end": "1235790"
  },
  {
    "text": "It's huge, huge proofs. Um, okay.",
    "start": "1235790",
    "end": "1238245"
  },
  {
    "text": "But what that means is, is in some sense the refinements are,",
    "start": "1238245",
    "end": "1240545"
  },
  {
    "text": "are working already, right?",
    "start": "1240545",
    "end": "1241720"
  },
  {
    "text": "We can see that they improve the proof size.",
    "start": "1241720",
    "end": "1243370"
  },
  {
    "text": "Next up is a prover time.",
    "start": "1243370",
    "end": "1247195"
  },
  {
    "text": "Again, this is log, log scale.",
    "start": "1247195",
    "end": "1249259"
  },
  {
    "text": "Um, and remember ZKB++,",
    "start": "1249260",
    "end": "1252160"
  },
  {
    "text": "remember you'll see it, it had",
    "start": "1252160",
    "end": "1253440"
  },
  {
    "text": "the biggest proofs but now it also has the fastest prover, right?",
    "start": "1253440",
    "end": "1256590"
  },
  {
    "text": "So, if you need a screaming fast prover, you choose ZKB.",
    "start": "1256590",
    "end": "1259520"
  },
  {
    "text": "Uh, Ligero's prover, uh,",
    "start": "1259520",
    "end": "1261000"
  },
  {
    "text": "also has a, has a good showing.",
    "start": "1261000",
    "end": "1262890"
  },
  {
    "text": "Um, and then Hyrax is kind of next up.",
    "start": "1262890",
    "end": "1265055"
  },
  {
    "text": "And what you see is that whereas Bulletproofs had sort of a very small proof,",
    "start": "1265055",
    "end": "1270125"
  },
  {
    "text": "you pay for that by having to sort of work harder to generate that proof, right?",
    "start": "1270125",
    "end": "1275010"
  },
  {
    "text": "And this is sort of a theme that we'll see a couple more times.",
    "start": "1275010",
    "end": "1278200"
  },
  {
    "text": "And finally, you can see there's sort of",
    "start": "1278200",
    "end": "1280005"
  },
  {
    "text": "a small constant factor maybe 3X between the blue stars,",
    "start": "1280005",
    "end": "1283920"
  },
  {
    "text": "that's the unrefined version of Hyrax and",
    "start": "1283920",
    "end": "1285960"
  },
  {
    "text": "the green diamonds or the green hexes, the, uh, refined version.",
    "start": "1285960",
    "end": "1289845"
  },
  {
    "text": "Finally, let's look at the verifier time.",
    "start": "1289845",
    "end": "1292184"
  },
  {
    "text": "So, here LibSTARK has far and away the best performance and Ligero again,",
    "start": "1292185",
    "end": "1296765"
  },
  {
    "text": "very good performance and speed.",
    "start": "1296765",
    "end": "1298355"
  },
  {
    "text": "Um, for big enough problems,",
    "start": "1298355",
    "end": "1300905"
  },
  {
    "text": "the Hyrax is faster than ZKB++.",
    "start": "1300905",
    "end": "1303240"
  },
  {
    "text": "So, remember what I said the,",
    "start": "1303240",
    "end": "1305025"
  },
  {
    "text": "the verifier in ZKB is kind of slow-ish or fast-ish depending on how we think about it,",
    "start": "1305025",
    "end": "1309610"
  },
  {
    "text": "because once the problem gets big enough,",
    "start": "1309610",
    "end": "1311505"
  },
  {
    "text": "then the verifier time starts to run away.",
    "start": "1311505",
    "end": "1314255"
  },
  {
    "text": "And finally, this is another case where the improvements from, uh, from Hyrax,",
    "start": "1314255",
    "end": "1318910"
  },
  {
    "text": "th- the difference between the blue stars and the green hexes is really big.",
    "start": "1318910",
    "end": "1323390"
  },
  {
    "text": "So, those refinements really help in terms of the verifier time.",
    "start": "1323390",
    "end": "1327180"
  },
  {
    "text": "Okay, so let's conclude.",
    "start": "1327230",
    "end": "1329520"
  },
  {
    "text": "I've shown you Hyrax which is sort of a new general purpose ZKSNARK.",
    "start": "1329520",
    "end": "1333290"
  },
  {
    "text": "And as we saw,",
    "start": "1333290",
    "end": "1334975"
  },
  {
    "text": "Hyrax gives you kind of small proofs,",
    "start": "1334975",
    "end": "1336880"
  },
  {
    "text": "in the sense that if you want them to be smaller,",
    "start": "1336880",
    "end": "1338955"
  },
  {
    "text": "you gotta use a system with more prover and verifier cost.",
    "start": "1338955",
    "end": "1342154"
  },
  {
    "text": "And it's fast in the sense that if you want faster,",
    "start": "1342155",
    "end": "1344905"
  },
  {
    "text": "you have to pay with for that in bigger proofs.",
    "start": "1344905",
    "end": "1347345"
  },
  {
    "text": "But, again the most important takeaway here is that",
    "start": "1347345",
    "end": "1350260"
  },
  {
    "text": "there's no real winner because there's no actual competition.",
    "start": "1350260",
    "end": "1353305"
  },
  {
    "text": "Di- different proof systems give different combinations of properties,",
    "start": "1353305",
    "end": "1357020"
  },
  {
    "text": "and what we should be doing is thinking about our application carefully,",
    "start": "1357020",
    "end": "1360785"
  },
  {
    "text": "and then choosing the one that applies.",
    "start": "1360785",
    "end": "1362945"
  },
  {
    "text": "So Hyrax, from that point of view,",
    "start": "1362945",
    "end": "1364894"
  },
  {
    "text": "is just a point in the design space and of course there are",
    "start": "1364895",
    "end": "1367730"
  },
  {
    "text": "other points in the design space that are even better that we haven't reached yet.",
    "start": "1367730",
    "end": "1371240"
  },
  {
    "text": "So there's plenty more work to do.",
    "start": "1371240",
    "end": "1373325"
  },
  {
    "text": "Um, our paper and our code are available online and I hope you'll check them out.",
    "start": "1373325",
    "end": "1377340"
  },
  {
    "text": "And with that, I'll take any questions.",
    "start": "1377340",
    "end": "1379220"
  },
  {
    "text": "[APPLAUSE].",
    "start": "1379220",
    "end": "1384690"
  },
  {
    "text": "Any uh, any questions?",
    "start": "1384690",
    "end": "1386294"
  },
  {
    "text": "So, wh- why do you think there isn't gonna be",
    "start": "1386295",
    "end": "1390120"
  },
  {
    "text": "a proof system that just dominates everybody else in all coordinates?",
    "start": "1390120",
    "end": "1393465"
  },
  {
    "text": "Maybe that, that might happen?",
    "start": "1393465",
    "end": "1395054"
  },
  {
    "text": "Um, I think we, we should hope for it in the sense that it would make our lives easy.",
    "start": "1395055",
    "end": "1398250"
  },
  {
    "text": "We just run that proof system and be done and then everyone could concentrate on,",
    "start": "1398250",
    "end": "1401560"
  },
  {
    "text": "on improving it and,",
    "start": "1401560",
    "end": "1403670"
  },
  {
    "text": "and making a nice implementation.",
    "start": "1403670",
    "end": "1405390"
  },
  {
    "text": "But, er, you know, it's slightly,",
    "start": "1405390",
    "end": "1407335"
  },
  {
    "text": "I think for now magical to hope for it in the sense that everyone is, is,",
    "start": "1407335",
    "end": "1410924"
  },
  {
    "text": "using certain tricks to get their good points,",
    "start": "1410925",
    "end": "1413840"
  },
  {
    "text": "and in the, and in the end,",
    "start": "1413840",
    "end": "1415120"
  },
  {
    "text": "that's what's producing their bad points.",
    "start": "1415120",
    "end": "1416855"
  },
  {
    "text": "Any other questions?",
    "start": "1416855",
    "end": "1422280"
  },
  {
    "text": "All right.",
    "start": "1422280",
    "end": "1423980"
  },
  {
    "text": "Thanks, Devs.",
    "start": "1423980",
    "end": "1425100"
  },
  {
    "text": "[APPLAUSE]",
    "start": "1425100",
    "end": "1425160"
  }
]