[
  {
    "text": "so I'm going to talk about probably the culmination of about 35 years of attempts to find something better than",
    "start": "11599",
    "end": "17560"
  },
  {
    "text": "floating Point arithmetic starting in the 80s I think is when I started working on this right now I'm expatriated to University of Singapore",
    "start": "17560",
    "end": "24599"
  },
  {
    "text": "and they' provided a very good home for me to work on this kind of research and I appreciate that so why worry about",
    "start": "24599",
    "end": "29640"
  },
  {
    "text": "floating point I came up with a simple example because I found out that everybody trusts Matrix Matrix multiplication they use it for examples",
    "start": "29640",
    "end": "35760"
  },
  {
    "text": "all the time well suppose just one row in one column where happen to be this a and that b so you were taking their",
    "start": "35760",
    "end": "41840"
  },
  {
    "text": "scalar product in order to find out the result and these are fairly ordinary numbers these are integers they're not",
    "start": "41840",
    "end": "47360"
  },
  {
    "text": "that big 32 million 1 negative 1 80 million 40 million no perfectly ordinary",
    "start": "47360",
    "end": "52920"
  },
  {
    "text": "reasonable numbers if you do this in single Precision you'll get a. b equals z which would tell you hey these vectors",
    "start": "52920",
    "end": "59280"
  },
  {
    "text": "are orthogonal might be an important property to know check it by doing double precision and",
    "start": "59280",
    "end": "64799"
  },
  {
    "text": "you again get A.B equals 0 and you know what's coming uh let's suppose you do it with a binary sum collapse where you",
    "start": "64799",
    "end": "71040"
  },
  {
    "text": "don't do it from left to right but you do it these two these two and then add them which often helps the the behavior",
    "start": "71040",
    "end": "76280"
  },
  {
    "text": "a little bit you get one and those two numbers about as far apart as you can get in terms of meaning and accuracy the",
    "start": "76280",
    "end": "83360"
  },
  {
    "text": "correct answer is actually two so most linear algebra is unstable with floats",
    "start": "83360",
    "end": "89159"
  },
  {
    "text": "I'm always amused when I hear people talking about uh like this method is is is stable but this method is not",
    "start": "89159",
    "end": "94759"
  },
  {
    "text": "actually they're all unstable all of them are can be made very sensitive to Tiny changes in the input floating point",
    "start": "94759",
    "end": "101240"
  },
  {
    "text": "is as dangerous as all get out it is just nothing but a swamp and yet we get along with it just",
    "start": "101240",
    "end": "107079"
  },
  {
    "text": "fine because we're so used to it we've suffered under it and we've just said well you that's you got to learn to live",
    "start": "107079",
    "end": "112840"
  },
  {
    "text": "with it first of all my main objection with i e 754 the standard from 1985 is",
    "start": "112840",
    "end": "119360"
  },
  {
    "text": "that it's not a standard it's a guideline has a section of requirements it has a section of suggestions",
    "start": "119360",
    "end": "128479"
  },
  {
    "text": "recommendations well people take those or don't take those as soon as that happens you're going to get different",
    "start": "128479",
    "end": "133480"
  },
  {
    "text": "binary output from every different computer system actually the way that the standard is set up you can get two",
    "start": "133480",
    "end": "139000"
  },
  {
    "text": "different answers from the same computer running the same operating system just doing it a few seconds apart there isn't",
    "start": "139000",
    "end": "144920"
  },
  {
    "text": "even consistency from one run to another because it's affected by cash whether you took something out of the out of the",
    "start": "144920",
    "end": "150840"
  },
  {
    "text": "88087 uh uh stack and put it in the cash temporarily and then put it back suddenly you got an overflow in one case",
    "start": "150840",
    "end": "157200"
  },
  {
    "text": "but you got a nice reasonable number and the other that lack of guarantee is just crippling if you're trying to debug a",
    "start": "157200",
    "end": "163040"
  },
  {
    "text": "system and you're getting different answers on different systems the whole idea of a standard is that you get the same answer on every system the people",
    "start": "163040",
    "end": "169800"
  },
  {
    "text": "who conceived of java I remember James goling was just horrified when he discovered that using i e 754 was no",
    "start": "169800",
    "end": "177080"
  },
  {
    "text": "guarantee of identical results across all platforms in Java when you make mistakes in rounding errors of course",
    "start": "177080",
    "end": "183560"
  },
  {
    "text": "it's completely quiet they put in something called the inexact flag which every processor designer has to make",
    "start": "183560",
    "end": "189120"
  },
  {
    "text": "sure is maintained so if you get an inexact or rounded result the flag goes on inside the processor have you ever",
    "start": "189120",
    "end": "195239"
  },
  {
    "text": "seen a language that lets you see that flag in fact the only way you're going to see that flag is probably by getting",
    "start": "195239",
    "end": "201599"
  },
  {
    "text": "to the assembler and being very very good with a debugger and being able to reset the processor flag do an operation",
    "start": "201599",
    "end": "207159"
  },
  {
    "text": "then check the processor flag again it's never been uh made mainstream and of course it breaks the algebra law it's",
    "start": "207159",
    "end": "212959"
  },
  {
    "text": "like associative arithmetic a plus grouped B plus C is not the same as grouping a plus b and then adding C and",
    "start": "212959",
    "end": "219000"
  },
  {
    "text": "that means that compilers are not free to rearrange numbers without changing the answer but they do anyway of course",
    "start": "219000",
    "end": "226080"
  },
  {
    "text": "so does the distributive law also does not hold there was even once a machine that didn't have the commutative law",
    "start": "226080",
    "end": "231599"
  },
  {
    "text": "satisfied a * B was not equal to B * a that was the cray one incredible that",
    "start": "231599",
    "end": "237040"
  },
  {
    "text": "was a real headache they they finally fixed it by always sorting it so a was less than b so you got the same wrong",
    "start": "237040",
    "end": "242200"
  },
  {
    "text": "answer every time and people were happy anyway it overflows to Infinity if you",
    "start": "242200",
    "end": "247840"
  },
  {
    "text": "get too big of a number bigger than you can represent what does floating point do it says well let's just use Infinity",
    "start": "247840",
    "end": "253680"
  },
  {
    "text": "instead how stupid can you be which is closer to a a big number infinity or you",
    "start": "253680",
    "end": "260359"
  },
  {
    "text": "know 10 to the 38th or whatever your number is I found out why this happens from",
    "start": "260359",
    "end": "266040"
  },
  {
    "text": "that man right there dick sites he explained it to me when he was visiting in Singapore it's the rule is round to",
    "start": "266040",
    "end": "271120"
  },
  {
    "text": "nearest even well Infinity is an even number and zero is an even number in in terms of",
    "start": "271120",
    "end": "277320"
  },
  {
    "text": "this so oh round to that one well think about what you're doing because that makes the answer infinitely far away on",
    "start": "277320",
    "end": "282520"
  },
  {
    "text": "a logarithmic scale uh there's no way to express most of the real number line if you think about it all you can do is",
    "start": "282520",
    "end": "288479"
  },
  {
    "text": "pick little rational numbers and say everything's going to be close to one of these but most of the real number line",
    "start": "288479",
    "end": "294560"
  },
  {
    "text": "is not n * 2 the minus whatever so the key idea I came up with",
    "start": "294560",
    "end": "300520"
  },
  {
    "text": "a few years ago was to put a bit on the end of the number right at the end of the fraction that says is it exact or",
    "start": "300520",
    "end": "306639"
  },
  {
    "text": "not you see we've always had a way of expressing infinite precision and infinite decimal real numbers with a",
    "start": "306639",
    "end": "312919"
  },
  {
    "text": "finite set of symbols we've been doing it for a long time if you want to say pial 3.14 that's wrong but if you just",
    "start": "312919",
    "end": "318759"
  },
  {
    "text": "simply write pi equal 3.14 dot dot dot after it you mean there's more decimals after that that means it's between 3.14",
    "start": "318759",
    "end": "326160"
  },
  {
    "text": "and 3.15 it's not equal to either one if it was equal to 3.14 you wouldn't have",
    "start": "326160",
    "end": "331199"
  },
  {
    "text": "needed the dot dot dot if it was an infinite set of nines let's say after the 3.14 that's the same as 3.15 and you",
    "start": "331199",
    "end": "337639"
  },
  {
    "text": "would have said that so all you need is a dot dot dot or the absence of a dot dot dot to mean there's more decimals",
    "start": "337639",
    "end": "344880"
  },
  {
    "text": "after this well that's the open interval in between exact intervals and it's one bit so just like you put a sign bit in",
    "start": "344880",
    "end": "350199"
  },
  {
    "text": "front of a number to say whether it's positive or negative you put a UB bit after the number to indicate whether it's exact or in between exacts and",
    "start": "350199",
    "end": "357639"
  },
  {
    "text": "that's a very powerful idea that that lets you get some of the trappings of interval arithmetic and ballot methods",
    "start": "357639",
    "end": "363720"
  },
  {
    "text": "without having to have a pair of numbers in order to represent everything let's go back to i e 754 because I'm not done",
    "start": "363720",
    "end": "371400"
  },
  {
    "text": "hanging about it um the exponents are usually too large and if you've built",
    "start": "371400",
    "end": "376880"
  },
  {
    "text": "floating Point Hardware you know that it's easier to build an exponent than it is to build the the fraction I think",
    "start": "376880",
    "end": "383280"
  },
  {
    "text": "this was really one of the big reasons so these exponent sizes were decided by committee back in the 80s people saying",
    "start": "383280",
    "end": "388800"
  },
  {
    "text": "I want a 16 bit exponent I want 11 bit exponent and it was largely on what what was easiest to design not what people",
    "start": "388800",
    "end": "395199"
  },
  {
    "text": "were actually using we've done some studies at Lawrence Livermore that indicate that almost never do real",
    "start": "395199",
    "end": "400280"
  },
  {
    "text": "application codes go much outside of 10 the 13th to 10 Theus 13th and yet we've",
    "start": "400280",
    "end": "405680"
  },
  {
    "text": "got hundreds of orders of magnitude supported by the i e standard so the accuracy is fairly flat",
    "start": "405680",
    "end": "413160"
  },
  {
    "text": "of course there's right I'll show you the pictures of the wobbling accuracy of floating point it's it's fairly flat across the Vass range and then it falls",
    "start": "413160",
    "end": "419240"
  },
  {
    "text": "off off a cliff and there's probably a better way to manage accuracy there's a lot of wasted bit patterns you got both",
    "start": "419240",
    "end": "424919"
  },
  {
    "text": "zero and negative zero that means if you want to check if x equals to Y you can't just look at the bits you have to say",
    "start": "424919",
    "end": "430840"
  },
  {
    "text": "well if it's zero then check the first bit can imagine that complicating just check to see if two things are equal and",
    "start": "430840",
    "end": "437759"
  },
  {
    "text": "there's like five quintilian different ways to represent Nan in double Precision not a number I don't think we",
    "start": "437759",
    "end": "443000"
  },
  {
    "text": "need those there's a lot of other things we could do with those bit patterns subnormal numbers are a headache while",
    "start": "443000",
    "end": "448360"
  },
  {
    "text": "the Berkeley uh people come up with a fairly clever way of adding a bit to the architecture so that you don't have to suffer quite so much with subnormal",
    "start": "448360",
    "end": "454919"
  },
  {
    "text": "numbers mostly it just adds a whole lot of transistors and space to your chip and uh you know the benefits are are",
    "start": "454919",
    "end": "460960"
  },
  {
    "text": "limited for most people divides are always hard they're much harder than for multiplication and decimal floats while",
    "start": "460960",
    "end": "466479"
  },
  {
    "text": "they're part of the standard there is no 32-bit decimal float it Go 64 and 128 I",
    "start": "466479",
    "end": "471599"
  },
  {
    "text": "think are the only sizes for decimal so here's a quick introduction to the the Unum format that I introduced in 2015 I",
    "start": "471599",
    "end": "479360"
  },
  {
    "text": "call it type one because there's some variations and the the second variation is so different um it it preserves the",
    "start": "479360",
    "end": "485120"
  },
  {
    "text": "idea of an uncertainty bit but I was trying to do is doing the most gradual thing imaginable i' take the i e",
    "start": "485120",
    "end": "491080"
  },
  {
    "text": "standard and add three meta fields to it so you got the sign exponent and fraction for I for i e and this happens",
    "start": "491080",
    "end": "498159"
  },
  {
    "text": "to be a half Precision float which is five bits of exponent and 10 bits of fraction and that was pioneered by",
    "start": "498159",
    "end": "503759"
  },
  {
    "text": "Nvidia and I think Lucas Films they wanted something that they could store some of their their video information",
    "start": "503759",
    "end": "510440"
  },
  {
    "text": "and it had just barely enough dynamic range and enough Precision that it wouldn't lose all the goodies out of the movies but uh now it's being supported",
    "start": "510440",
    "end": "517680"
  },
  {
    "text": "in Hardware uh Nvidia started supporting native 16bit half Precision floats and",
    "start": "517680",
    "end": "524080"
  },
  {
    "text": "in Intel has made the transition from just supporting the format to actually doing the operations with only 16 bits",
    "start": "524080",
    "end": "529880"
  },
  {
    "text": "so these are starting to come in Vogue because they they look like they're good for neural networks and that's all the",
    "start": "529880",
    "end": "534920"
  },
  {
    "text": "Precision you need to train a neural net so I wanted to be upward compatible by adding the the U bit on the end and then",
    "start": "534920",
    "end": "540720"
  },
  {
    "text": "a field that says how many bits of exponent do you have and how many bits of fraction do you have and of course I",
    "start": "540720",
    "end": "546279"
  },
  {
    "text": "have to set the size of that field but in this case like a three bit exponent size size and a 4-bit fraction size size",
    "start": "546279",
    "end": "553519"
  },
  {
    "text": "suffice to give me a big range of sizes and this means that you track the amount of uncertainty because where the",
    "start": "553519",
    "end": "559480"
  },
  {
    "text": "uncertainty bit Falls will tell you how much range there is if it's in a very low Precision a low order bit then",
    "start": "559480",
    "end": "566040"
  },
  {
    "text": "you'll know it's a very approximate number but it's way off to the right then you know you have precise number and if anybody wants to know more about",
    "start": "566040",
    "end": "572279"
  },
  {
    "text": "this I'm not going to talk about it much tonight but this is the reference that I have at the bottom of the screen um it's",
    "start": "572279",
    "end": "578320"
  },
  {
    "text": "they keep running out of this at Amazon I see that they're down to four copies it's in its third Printing and it was briefly in the in the number best number",
    "start": "578320",
    "end": "586120"
  },
  {
    "text": "one bestseller which sounds good until you realize it's that's in the category of number systems but um there's 4,000 books in",
    "start": "586120",
    "end": "594360"
  },
  {
    "text": "number systems okay so it's something here's one graphical way to imagine",
    "start": "594360",
    "end": "599480"
  },
  {
    "text": "floats um as discrete points on the real number line and here I've got a five bit float that still follows I rules believe",
    "start": "599480",
    "end": "606800"
  },
  {
    "text": "it or not you can really push these things down if you if you are careful I think I got it all the way down to four once but uh there's the sign bit which",
    "start": "606800",
    "end": "613720"
  },
  {
    "text": "is all zero for the positive numbers and one the red one for the uh negative numbers and the hollow dots you can see",
    "start": "613720",
    "end": "621360"
  },
  {
    "text": "up there are the subnormal numbers denormalized numbers they actually fall below the smallest uh exponential type",
    "start": "621360",
    "end": "627920"
  },
  {
    "text": "number but uh anything which has two ones for the exponent in other words the",
    "start": "627920",
    "end": "633079"
  },
  {
    "text": "exponent completely full the first one is infinity and the everything else is is Nan cases so this is what you can",
    "start": "633079",
    "end": "640200"
  },
  {
    "text": "represent with a five bit float and you can see it goes like 0o one qu half 3/4",
    "start": "640200",
    "end": "645839"
  },
  {
    "text": "one one and 3/4 to finally gets up to three and a half the next number represents infinity and then after that",
    "start": "645839",
    "end": "651560"
  },
  {
    "text": "it's not a number not a number not a number kind of wasteful so what happens if you use my system with the ubit is",
    "start": "651560",
    "end": "658440"
  },
  {
    "text": "you can represent present the exact values or the range between exact values and that includes at the very last step",
    "start": "658440",
    "end": "665040"
  },
  {
    "text": "between four and infinity so this is exactly zero between zero and a half",
    "start": "665040",
    "end": "671279"
  },
  {
    "text": "exactly 1/2 and so on so that system allows you to cover the entire extended real number line with very low Precision",
    "start": "671279",
    "end": "678399"
  },
  {
    "text": "but if you ask what is the square root of two on this I'd say well that's between one and 1 and a half it's that",
    "start": "678399",
    "end": "684480"
  },
  {
    "text": "open interval and you can calculate with that and you can say mathematically correct things",
    "start": "684480",
    "end": "689519"
  },
  {
    "text": "with without you know making true misstatements about the value of a number the the risk of all of these",
    "start": "689519",
    "end": "695600"
  },
  {
    "text": "types of systems is that the intervals that you're bounding things with tend to grow and that's why interval arithmetic",
    "start": "695600",
    "end": "701720"
  },
  {
    "text": "and any kind of bounded arithmetic is tricky to use and has not caught on it was invented in the late 50s by a",
    "start": "701720",
    "end": "707120"
  },
  {
    "text": "Stanford man I think it was uh Ray Moore and it's been pioneered by several Stanford people ever since then but it's",
    "start": "707120",
    "end": "713920"
  },
  {
    "text": "always been kind of a cult following for Interval arithmetic because it's tricky to use and one of the reasons I did this is to try to make it easier to use so",
    "start": "713920",
    "end": "721560"
  },
  {
    "text": "type two UNS something I I had a flash about about a year ago which is instead",
    "start": "721560",
    "end": "728639"
  },
  {
    "text": "of using the real number line from negative Infinity to Infinity use the projective reals which meet at the top",
    "start": "728639",
    "end": "733680"
  },
  {
    "text": "at plus or minus infinity so imagine uh projecting a light at the top and it will cast a shadow on the real number",
    "start": "733680",
    "end": "739839"
  },
  {
    "text": "line okay so Plus at the very top it go either plus infinity or minus infinity",
    "start": "739839",
    "end": "745360"
  },
  {
    "text": "so you can Define these points uh within certain parameters but one always goes",
    "start": "745360",
    "end": "751720"
  },
  {
    "text": "over on the um on the East and negative one always goes directly on the west but the numbers you put in between you have",
    "start": "751720",
    "end": "757480"
  },
  {
    "text": "a lot of flexibility which means you can do a custom number system but one of the key ideas is that it's has perfect",
    "start": "757480",
    "end": "763800"
  },
  {
    "text": "reciprocation if x is here it's Mirror Image one /x is down here which means",
    "start": "763800",
    "end": "769199"
  },
  {
    "text": "you now have multiply and divide on equal basis the same way that add and subtract are equally easy you just",
    "start": "769199",
    "end": "774440"
  },
  {
    "text": "reflect you just because you can negate something with unary minus now you can reciprocate something with a unary slash",
    "start": "774440",
    "end": "781440"
  },
  {
    "text": "and it works perfectly so there's some beautiful advantages for this and here I I've shown you that I can do it with the",
    "start": "781440",
    "end": "786839"
  },
  {
    "text": "decimal lattice what's the catch well I don't really have circuitry that does",
    "start": "786839",
    "end": "794120"
  },
  {
    "text": "this it's very tricky circuitry if you're trying to do it with things like shifts Ander operations so I I have to",
    "start": "794120",
    "end": "800880"
  },
  {
    "text": "resort to table lookup and table lookup looks really good up to a certain Precision because table lookup could be",
    "start": "800880",
    "end": "807199"
  },
  {
    "text": "incredibly fast these are not numbers these are Pointers to numbers and so you can manipulate pointers much faster than",
    "start": "807199",
    "end": "812760"
  },
  {
    "text": "you can manipulate the numbers up to the point where you run out of memory of course but I suspect we can get a lot of ROM on chips so I still hope somebody",
    "start": "812760",
    "end": "819199"
  },
  {
    "text": "does these at least up to like 20 bit Precision I I wrestled with this for a year thinking if only we didn't have to",
    "start": "819199",
    "end": "825880"
  },
  {
    "text": "use table lookup if there was some better way to do it well let me contrast two calculation Aesthetics because",
    "start": "825880",
    "end": "831639"
  },
  {
    "text": "there's a lot of people out there talking about approximate Computing as the thing that's going to save us and",
    "start": "831639",
    "end": "836680"
  },
  {
    "text": "get us to excess scale which means make Computing even worse than floating point so that it can go faster and use less",
    "start": "836680",
    "end": "843040"
  },
  {
    "text": "power and make a lot of mistakes and maybe be good enough and they've explored to see what kinds of",
    "start": "843040",
    "end": "848480"
  },
  {
    "text": "applications are so tolerant of lousy Computing that you can get away with that trade-off well I think what they're",
    "start": "848480",
    "end": "854440"
  },
  {
    "text": "really reacting to is the fact that with I standard they they did something was",
    "start": "854440",
    "end": "860000"
  },
  {
    "text": "fast and and good enough and yeah left out some stuff and then they started throwing in some rigor just a little bit",
    "start": "860000",
    "end": "866920"
  },
  {
    "text": "of rigor let's give them multiple rounding modes so they can play with different rounding modes let's give them subnormal numbers so they can more",
    "start": "866920",
    "end": "873279"
  },
  {
    "text": "smoothly go to they did all kinds of things to try to improve the quality and get more verifiability well you can't do",
    "start": "873279",
    "end": "879399"
  },
  {
    "text": "that just a little bit or else you get nothing right it's not completely mathematical provable it still makes all",
    "start": "879399",
    "end": "885440"
  },
  {
    "text": "the mistakes with not following the laws of algebra then there's the people who want absolute rigor the people who do",
    "start": "885440",
    "end": "890800"
  },
  {
    "text": "interval arithmetic or they use Unum arithmetic the way the way I like to see it used um sets of real numbers can be",
    "start": "890800",
    "end": "897440"
  },
  {
    "text": "actually represented very precisely and you can manipulate them as as as well as you would do like with Mathematica or",
    "start": "897440",
    "end": "903079"
  },
  {
    "text": "Maple but actually still be doing arithmetic but that's a whole different aesthetic and as I say there's a lot",
    "start": "903079",
    "end": "908880"
  },
  {
    "text": "fewer people that are interested in that kind of absolute perfection unless you're designing a nuclear power plant",
    "start": "908880",
    "end": "913959"
  },
  {
    "text": "or you know trying to figure out how to land the the space shuttle maybe people don't particularly need that kind of a",
    "start": "913959",
    "end": "919480"
  },
  {
    "text": "special care they just want something that's fast enough most of the time it works especially if you're playing video games let's face it you don't really",
    "start": "919480",
    "end": "925320"
  },
  {
    "text": "care if you lose a pixel here and there when you're playing a video game but the thing is if you mix those two Aesthetics",
    "start": "925320",
    "end": "930839"
  },
  {
    "text": "which is what we do right now with itle floats you get neither it's not as fast as it could be because it's got all this",
    "start": "930839",
    "end": "936680"
  },
  {
    "text": "garbage in it to try to help you out and it's not rigorous because well it isn't you got to go all the way to one or all",
    "start": "936680",
    "end": "942120"
  },
  {
    "text": "the way to the other so instead of doing a proximate Computing I think we should do floating points aesthetic but do it",
    "start": "942120",
    "end": "949279"
  },
  {
    "text": "right for the first time so I call these things posits and a posit I looked it up is a statement that",
    "start": "949279",
    "end": "956279"
  },
  {
    "text": "is made on the assumption that will prove to be true true in philosophy and that's a more polite word than guess as",
    "start": "956279",
    "end": "963160"
  },
  {
    "text": "I was calling these things guesses and and William Khan got angry at me for doing that so uh I'm calling them posits",
    "start": "963160",
    "end": "969680"
  },
  {
    "text": "now it's a little softer word but let's face it it's not a provable number you say I think this is the right number and",
    "start": "969680",
    "end": "974720"
  },
  {
    "text": "I'm going to work with it it's just like you would introduce something philosophically so here's some metrics for number systems I've seen a lot of",
    "start": "974720",
    "end": "981759"
  },
  {
    "text": "papers saying here's a great number system it uses all logarithms or here's one that uses all rational numbers isn't",
    "start": "981759",
    "end": "988360"
  },
  {
    "text": "that cool but I never see them say what are your metrics for comparing one number system against another and",
    "start": "988360",
    "end": "994560"
  },
  {
    "text": "there's a lot of things we could use so most of this talk is going to be about what the metrics are for comparing two number systems well there's accuracy",
    "start": "994560",
    "end": "1002279"
  },
  {
    "text": "I've got a kind of a funny looking formula there you might think accuracy is well like relative difference so how",
    "start": "1002279",
    "end": "1007839"
  },
  {
    "text": "how far apart are they divided by their size or something like that but on a logarithmic scale if you if you think",
    "start": "1007839",
    "end": "1013720"
  },
  {
    "text": "about that it's actually the log of one minus the log of the other which is the log of the ratio and how many decimals",
    "start": "1013720",
    "end": "1019079"
  },
  {
    "text": "it is well you got to take another log so if you work it out negative log base 10 of the log of the base 10 of the",
    "start": "1019079",
    "end": "1025438"
  },
  {
    "text": "ratio of two numbers is the number of decimals of accuracy of two closely spaced numbers so as I as I tile the",
    "start": "1025439",
    "end": "1031678"
  },
  {
    "text": "system with numbers that's what's going to be my accuracy plot dynamic range is easy it's the ratio of the biggest",
    "start": "1031679",
    "end": "1037000"
  },
  {
    "text": "number to the smallest positive real number and uh if you take the log base 10 you get how many decades there are in",
    "start": "1037000",
    "end": "1043199"
  },
  {
    "text": "your system and you'd like it to be symmetric about one but not it isn't always that way what percentage of",
    "start": "1043199",
    "end": "1049640"
  },
  {
    "text": "operations are exact how often do you let's say add two numbers and you land exactly on another number in your system",
    "start": "1049640",
    "end": "1056240"
  },
  {
    "text": "instead of having to round it' be nice if that happened a lot because maybe you could do perfect computations for a",
    "start": "1056240",
    "end": "1061600"
  },
  {
    "text": "fairly large fraction of the time but when they aren't exact how much did you lose what how many decimals did you have",
    "start": "1061600",
    "end": "1069280"
  },
  {
    "text": "to round it by in order to get to the answer that you could represent and we can compile all of those and then we can",
    "start": "1069280",
    "end": "1075360"
  },
  {
    "text": "do like histograms or Scatter Plots or whatever and compare two different number systems think about the entropy",
    "start": "1075360",
    "end": "1081799"
  },
  {
    "text": "per bit if you had I'm imagining a bunch of LEDs that are all the bits of a 64bit number and they're flashing like crazy",
    "start": "1081799",
    "end": "1088039"
  },
  {
    "text": "as they represent every single floating Point number in in a computer as it goes by I'll bet you those exponent bits",
    "start": "1088039",
    "end": "1093559"
  },
  {
    "text": "aren't moving very much there's a whole bunch of them that are just sitting still all the time because you almost",
    "start": "1093559",
    "end": "1098919"
  },
  {
    "text": "never use 10 to the 300th power let's face it and so the high order bits of those are mostly wasted so they didn't",
    "start": "1098919",
    "end": "1105520"
  },
  {
    "text": "think about trying to maximize the the uh the the meaning of every bit when they design these things and finally I",
    "start": "1105520",
    "end": "1112240"
  },
  {
    "text": "think the real proof of the pudding is to come up with some benchmarks like evaluate this formula solve a system of",
    "start": "1112240",
    "end": "1118320"
  },
  {
    "text": "equations do an fft do the inverse fft see how close it came to coming back to the same thing do basic math Library",
    "start": "1118320",
    "end": "1124679"
  },
  {
    "text": "kernels and find out how accurate this system is versus another system and the",
    "start": "1124679",
    "end": "1129880"
  },
  {
    "text": "main cheat you have to watch out for is people can turn up their accuracy by turning down their dynamic range right",
    "start": "1129880",
    "end": "1135360"
  },
  {
    "text": "you take more bits from the fraction you know from the exponent and give it to the fraction well let's see if we can do",
    "start": "1135360",
    "end": "1141159"
  },
  {
    "text": "better with than we do with floats without having to do that so here is a diagram of a Posite arithmetic format",
    "start": "1141159",
    "end": "1148440"
  },
  {
    "text": "format and you notice the only thing that's got a solid vertical line is the sign bit the others the division will",
    "start": "1148440",
    "end": "1155600"
  },
  {
    "text": "vary the regime bits is the Run of bits that you have at the beginning like if",
    "start": "1155600",
    "end": "1161400"
  },
  {
    "text": "you have 1 one one 1 0 that would be",
    "start": "1161400",
    "end": "1166640"
  },
  {
    "text": "four represented by four ones and then terminated by a zero if it was 0 01 that",
    "start": "1166640",
    "end": "1173880"
  },
  {
    "text": "would be -3 it's a lot like extra extra large extra extra extra large I just",
    "start": "1173880",
    "end": "1180720"
  },
  {
    "text": "bought it just before I got here I went to Orchard Supply Hardware and got some steel wool and I was buying triple zero",
    "start": "1180720",
    "end": "1187440"
  },
  {
    "text": "steel wool there was double zero steel wool and there was quadruple zero Ste okay the number of zeros it keeps getting finer and finer it's like",
    "start": "1187440",
    "end": "1193440"
  },
  {
    "text": "women's sizes same thing so that's how the regime bits are defined the exponent bit if there are any are simply a",
    "start": "1193440",
    "end": "1201480"
  },
  {
    "text": "positive an unsigned integer there's no bias floating Point has to have this funnyl looking bias that you have and",
    "start": "1201480",
    "end": "1208280"
  },
  {
    "text": "then there's the fraction bits which are always a normalized that is there's always a hidden bit so this works like",
    "start": "1208280",
    "end": "1214360"
  },
  {
    "text": "floating Point except for that funny stuff in the beginning and I'll show you where that comes from I didn't use the",
    "start": "1214360",
    "end": "1219520"
  },
  {
    "text": "ubit because I'd much rather if I'm going to round every time I'd much rather have that that last bit for the fraction and get a little bit more",
    "start": "1219520",
    "end": "1225679"
  },
  {
    "text": "accuracy it will round after every operation but if you get too big of a number it will round down to the largest",
    "start": "1225679",
    "end": "1232320"
  },
  {
    "text": "representable number not up to Infinity so it doesn't make that mistake the es",
    "start": "1232320",
    "end": "1237360"
  },
  {
    "text": "is sort of the equivalent of the adjustable exponent size and you can have an es an exponent size of zero not",
    "start": "1237360",
    "end": "1243120"
  },
  {
    "text": "have one at all or one or two but you'll see that a very few small number of exponent bits gives you a a very large",
    "start": "1243120",
    "end": "1249760"
  },
  {
    "text": "dynamic range you actually have another vertical line there and that's the end and you haven't said anything about old",
    "start": "1249760",
    "end": "1256080"
  },
  {
    "text": "terms single precision I'm assuming people will pick a size and it will be 16bit 32bit 64bit and that will be the",
    "start": "1256080",
    "end": "1263400"
  },
  {
    "text": "standard these are things that are capable of being anything from three bits wide to thousands but uh I I I I I",
    "start": "1263400",
    "end": "1271080"
  },
  {
    "text": "suspect the hardware is not going to allow that flexibility I haven't yet I have yet to meet a hardware engineer that's willing to let everything be",
    "start": "1271080",
    "end": "1277760"
  },
  {
    "text": "floatable at runtime both the exponent size and and the the word size so I understand that so I assume that I'm",
    "start": "1277760",
    "end": "1283880"
  },
  {
    "text": "going to be beating floats at their own game 16bit versus 16bit 32bit versus",
    "start": "1283880",
    "end": "1289600"
  },
  {
    "text": "32bit let's duke it out okay maybe I should also bring out these numbers are isomorphic so the pattern doesn't change",
    "start": "1289600",
    "end": "1297480"
  },
  {
    "text": "so if you yeah except for the es so if you fix the es if you do a 16bit number",
    "start": "1297480",
    "end": "1303480"
  },
  {
    "text": "and a 64-bit number the beginning Parts look the same so you take a 16 bit number and extend with zeros it'll be",
    "start": "1303480",
    "end": "1310039"
  },
  {
    "text": "the same value in 64 bits that that's the amazing thing is that adding bits to the right actually increases both the",
    "start": "1310039",
    "end": "1317279"
  },
  {
    "text": "accuracy and it also increases the dynamic range which is kind of mind-blowing how can that possibly be",
    "start": "1317279",
    "end": "1322559"
  },
  {
    "text": "you think like fractions it works that way but it doesn't work with with dynamic range here's an example just to",
    "start": "1322559",
    "end": "1328520"
  },
  {
    "text": "see how it would work here is a sign bit is zero so that's a positive number same as floats regime bits 0 01 in this case",
    "start": "1328520",
    "end": "1336000"
  },
  {
    "text": "the UC which is 2 to the 2 the 3 or 256 is uh there's three regime bits that",
    "start": "1336000",
    "end": "1343200"
  },
  {
    "text": "terminated by a one so that's 256 Theus 3r power then you multiply it by the EXP bits which is represents the number five",
    "start": "1343200",
    "end": "1350120"
  },
  {
    "text": "one1 so it just scales up by five and now you finally got the scale factor so it's a floating Point number in the",
    "start": "1350120",
    "end": "1355400"
  },
  {
    "text": "sense that it's a power of two times an integer but the integer in here in this case is you know uh 221 over 256 with",
    "start": "1355400",
    "end": "1363600"
  },
  {
    "text": "the hidden bit and I think that if you can build a float out of conventional circuitry then it should be very simple",
    "start": "1363600",
    "end": "1370240"
  },
  {
    "text": "to build this as well it's going to be simpler because I'm going to strip out a whole lot of the exceptions that you have to wrestle with with i e and they",
    "start": "1370240",
    "end": "1377159"
  },
  {
    "text": "don't overflow and they don't underflow so you certainly don't need those flags and there is no Nan representation it's",
    "start": "1377159",
    "end": "1384960"
  },
  {
    "text": "not a number right why are you assigning a number to something that's not a number it's it's fundamentally illogical",
    "start": "1384960",
    "end": "1390760"
  },
  {
    "text": "if you are Computing something and you get a nonsense operation like 0 divided by 0 the right thing to do is stop and",
    "start": "1390760",
    "end": "1397080"
  },
  {
    "text": "report it or interrupt and let the interrupt Handler say I don't mind uh substitute this and go on whatever it is",
    "start": "1397080",
    "end": "1404200"
  },
  {
    "text": "you don't keep wasting energy and time by Computing something at this point where you've got garbage you report it",
    "start": "1404200",
    "end": "1410200"
  },
  {
    "text": "back to the user and let them do something about it so if you take out the Nan wow does that simplify a lot of",
    "start": "1410200",
    "end": "1415279"
  },
  {
    "text": "stuff so this should be simpler smaller and faster circuits than i e uh",
    "start": "1415279",
    "end": "1420799"
  },
  {
    "text": "754 let's go back to that projective real number line because I want to show what Isaac was just mentioning about now",
    "start": "1420799",
    "end": "1426200"
  },
  {
    "text": "about how you just add bits and you can increase something I'll pick a u seed of four which means uh the exponent size is",
    "start": "1426200",
    "end": "1433159"
  },
  {
    "text": "one so two to the two to the one is four and you'll see why these work out so elegantly",
    "start": "1433159",
    "end": "1438600"
  },
  {
    "text": "now that looks a lot like type two units and that I've got perfect reciprocation and you will always get perfect reciprocation for powers of two also",
    "start": "1438600",
    "end": "1446039"
  },
  {
    "text": "zero is exactly one over plus or minus infinity and backwards so those those work out just great you just take the",
    "start": "1446039",
    "end": "1452520"
  },
  {
    "text": "two's complement of everything but the first bit in order to take the reciprocal oh uh yeah if you have",
    "start": "1452520",
    "end": "1459000"
  },
  {
    "text": "something on the left- hand side and you say well that's a negative uh two's complement number so flip it over notice",
    "start": "1459000",
    "end": "1465679"
  },
  {
    "text": "that the the the what you're representing will be negative but flip it over and then I'll be talking about",
    "start": "1465679",
    "end": "1470919"
  },
  {
    "text": "the pattern of bits from that that you get on the positive right hand side so if you're inserting a number between",
    "start": "1470919",
    "end": "1477440"
  },
  {
    "text": "let's say the four and the infinity you factor another factor of four so now it's up by 16 four times bigger down at",
    "start": "1477440",
    "end": "1484520"
  },
  {
    "text": "the bottom if you're between 1/4 and zero it's 1/16th so if anytime you're you're interpolating between infinity",
    "start": "1484520",
    "end": "1491520"
  },
  {
    "text": "and your biggest number you make it you multiply it by the U so it keeps on getting bigger and bigger as you get you",
    "start": "1491520",
    "end": "1496960"
  },
  {
    "text": "know like like the Doomsday Clock very very close to midnight and uh if you're between if",
    "start": "1496960",
    "end": "1504120"
  },
  {
    "text": "you're between let's say 16 and two well you can put a power of two in there so that means I'm going to be adding uh uh",
    "start": "1504120",
    "end": "1511240"
  },
  {
    "text": "well I's see that I already did that one between four and one now that's that's",
    "start": "1511240",
    "end": "1516880"
  },
  {
    "text": "more than one U seed Factor but it's it's a it's a power of two so I can put a power of two in there which means now",
    "start": "1516880",
    "end": "1522919"
  },
  {
    "text": "we're looking at exponent bits and the exponent bits are showing up in blue here so I've got gold regime bits",
    "start": "1522919",
    "end": "1528960"
  },
  {
    "text": "followed by Blue exponent bits and that's the rule for doing this uh as a",
    "start": "1528960",
    "end": "1534480"
  },
  {
    "text": "recursive thing when you finally actually get something like between one and two the only thing you can do is now",
    "start": "1534480",
    "end": "1539880"
  },
  {
    "text": "interpolate it linearly so three halves goes between one and two and three goes between two and four and you see the",
    "start": "1539880",
    "end": "1545559"
  },
  {
    "text": "fraction bit shows up in Black at the end and I know this s sounds very complicated but it really is nothing",
    "start": "1545559",
    "end": "1551360"
  },
  {
    "text": "more than floating point that takes into account whether you're doing geometric increases or linear increases",
    "start": "1551360",
    "end": "1558200"
  },
  {
    "text": "automatically so if you round a number let's say between 4 and 16 I give you 12",
    "start": "1558200",
    "end": "1563679"
  },
  {
    "text": "well it would take it would use the geometric mean as with the number that goes in there instead of the arithmetic",
    "start": "1563679",
    "end": "1569080"
  },
  {
    "text": "mean so that's actually a better way of rounding but you don't have to do any special Hardware it's just the same thing as you would round normally except",
    "start": "1569080",
    "end": "1575360"
  },
  {
    "text": "don't round to infinity and don't round to zero but the cool thing is as you add bits you add a zero to something it",
    "start": "1575360",
    "end": "1581919"
  },
  {
    "text": "doesn't change it if you add a one so it's in in between two then you get this extra accuracy and you get more dynamic",
    "start": "1581919",
    "end": "1587679"
  },
  {
    "text": "range of the North and the South it gets bigger and smaller and on the right and the left it gets more accuracy there's",
    "start": "1587679",
    "end": "1594720"
  },
  {
    "text": "something fundamentally logical about this it just looks looks right to me as",
    "start": "1594720",
    "end": "1600919"
  },
  {
    "text": "opposed to being cobbled together so here's a metric based study and I I'm going to pick a number I I I have to",
    "start": "1600919",
    "end": "1607880"
  },
  {
    "text": "wrestle between doing a realistically large number and doing one where I can do every single possible case and study",
    "start": "1607880",
    "end": "1613320"
  },
  {
    "text": "it if I have an 8bit float or an 8bit posit then there the uh the addition",
    "start": "1613320",
    "end": "1618640"
  },
  {
    "text": "table is going to have 65,536 entries because I've got 256 by 256 possibilities I can study the errors",
    "start": "1618640",
    "end": "1625919"
  },
  {
    "text": "of every one of those and I can show them to you on the screen so that's where I picked let's say a quarter Precision I float not that there really",
    "start": "1625919",
    "end": "1632640"
  },
  {
    "text": "is such a thing in the official standard is a quarter Precision float maybe there should be but s bit four exponent bits",
    "start": "1632640",
    "end": "1638120"
  },
  {
    "text": "and three fraction bits seems to be kind of true to the aesthetic and it's got a dynamic range of five orders of",
    "start": "1638120",
    "end": "1644440"
  },
  {
    "text": "magnitude and two ways to represent zero unfortunately and 14 ways to say not a",
    "start": "1644440",
    "end": "1649760"
  },
  {
    "text": "number here's what the frequency the float accuracy looks like if you plot it it has tapered accuracy and that off",
    "start": "1649760",
    "end": "1656440"
  },
  {
    "text": "from the left you see it tapers down to zero now over on the right it had gradual underflow in other words but it",
    "start": "1656440",
    "end": "1662480"
  },
  {
    "text": "doesn't have gradual overflow that's where all the nans are they missed a trick when they the committee met they",
    "start": "1662480",
    "end": "1667880"
  },
  {
    "text": "didn't realize that all this stuff about tapering towards zero has a perfect analog on the other side that they could have used they could have had tapered",
    "start": "1667880",
    "end": "1674039"
  },
  {
    "text": "accuracy on the other side as well so remember remember these numbers um",
    "start": "1674039",
    "end": "1679600"
  },
  {
    "text": "average is 1.4 decimal of accuracy and maximum is 1.55 and I'll show you what",
    "start": "1679600",
    "end": "1684919"
  },
  {
    "text": "posits look like there's pauses the maximum is 1.86",
    "start": "1684919",
    "end": "1690159"
  },
  {
    "text": "decimals the same eight bits but there are seven orders of magnitude expressable it's much",
    "start": "1690159",
    "end": "1698240"
  },
  {
    "text": "wider it doesn't seem like this is possible but yes you can be both wider and higher at the same time let me put",
    "start": "1698240",
    "end": "1704399"
  },
  {
    "text": "both graphs on top of each other and you see there's a couple places where the floats actually exceed they stick out a",
    "start": "1704399",
    "end": "1710279"
  },
  {
    "text": "little bit by the way we're Distributing all these slides those people who are taking pictures of the slides I think we can get you a copy if you want probably",
    "start": "1710279",
    "end": "1716120"
  },
  {
    "text": "much resolution better resolution than your camera but uh asks you to put your",
    "start": "1716120",
    "end": "1721640"
  },
  {
    "text": "slid give them to him and he'll he already have I mailed them to them yesterday right they'll be on the website great so you can see that it",
    "start": "1721640",
    "end": "1729519"
  },
  {
    "text": "over on the right I can express numbers that the floats can't and uh for the very small numbers possibly floats do a",
    "start": "1729519",
    "end": "1735320"
  },
  {
    "text": "little bit better but most of your calculations are are in the vicinity of plus of of the unity right ratios so",
    "start": "1735320",
    "end": "1742720"
  },
  {
    "text": "that's where most calculations occur and I noticed that computational scientists everywhere scale their problems they",
    "start": "1742720",
    "end": "1748399"
  },
  {
    "text": "don't always work with let's say avagadro's number or planks constant so",
    "start": "1748399",
    "end": "1753960"
  },
  {
    "text": "everything is 10us 34th they they scale things through so things are back in the range of understandable numbers so I",
    "start": "1753960",
    "end": "1760440"
  },
  {
    "text": "think we're ready for round one round one un unary operations we're going to take reciprocals square root of x X2 log",
    "start": "1760440",
    "end": "1767559"
  },
  {
    "text": "base 2 of X and 2 to the X all one input one output and how well do we",
    "start": "1767559",
    "end": "1773120"
  },
  {
    "text": "do well here's reciprocation the floats make an a bunch",
    "start": "1773120",
    "end": "1778880"
  },
  {
    "text": "of errors on all there's 256 possibilities and I found out whatever the error is and sorted it from smallest",
    "start": "1778880",
    "end": "1785000"
  },
  {
    "text": "to largest I did the same thing for the posits you notice that the posit curve in a magenta is always underneath the",
    "start": "1785000",
    "end": "1790720"
  },
  {
    "text": "float curve it's always better and in the right hand side it's much better",
    "start": "1790720",
    "end": "1795840"
  },
  {
    "text": "because the uh the are that are made by floats are infinitely large floats get",
    "start": "1795840",
    "end": "1801120"
  },
  {
    "text": "13% exact and composits get almost 19% exact results so already it it goes a",
    "start": "1801120",
    "end": "1809080"
  },
  {
    "text": "little farther before the the the the magenta leaves the uh x-axis at all and",
    "start": "1809080",
    "end": "1816120"
  },
  {
    "text": "of course there's no overflow and there's no Nan I mean even one over Z",
    "start": "1816120",
    "end": "1821559"
  },
  {
    "text": "turns into plus or minus infinity and that's a perfectly closed operation so there are no exceptions to reciprocation",
    "start": "1821559",
    "end": "1828080"
  },
  {
    "text": "so that's already looking a lot better behaved than floats what about the square root only",
    "start": "1828080",
    "end": "1834880"
  },
  {
    "text": "slightly more exact 7.8% exact versus 7.03 but the real story is that curve of",
    "start": "1834880",
    "end": "1841440"
  },
  {
    "text": "what is the error when you do make an error how bad is it and you can see that the uh the cumulative error going from",
    "start": "1841440",
    "end": "1848559"
  },
  {
    "text": "from left to right is is much lower for the posit than it is for the floats I think it gets really",
    "start": "1848559",
    "end": "1854600"
  },
  {
    "text": "spectacular for X squ look look at that it's not only you know 15% exact versus",
    "start": "1854600",
    "end": "1861639"
  },
  {
    "text": "13% exact but when floats get it wrong they really get it wrong whereas this",
    "start": "1861639",
    "end": "1867559"
  },
  {
    "text": "this Dynamic Precision where it's tapering will try to accommodate very large and very small numbers it will do",
    "start": "1867559",
    "end": "1872840"
  },
  {
    "text": "a much better job of doing something right with those numbers and not getting it just uh totally giving up and once",
    "start": "1872840",
    "end": "1879720"
  },
  {
    "text": "again they've got look at that 12.5% underflow and 25% overflow that's a lot",
    "start": "1879720",
    "end": "1885200"
  },
  {
    "text": "of cases to be throwing away when you're just squaring a number this is the what one of the reasons that people uh have",
    "start": "1885200",
    "end": "1891679"
  },
  {
    "text": "libraries for even doing like complex arithmetic if you take a * B minus B * C just to do complex arithmetic people are",
    "start": "1891679",
    "end": "1898840"
  },
  {
    "text": "paranoid that they're going to get overflow or underflow when they take a * D and that costs a lot of time in a math",
    "start": "1898840",
    "end": "1904279"
  },
  {
    "text": "library trying to fix that here's the closure under the log and once again pod are more",
    "start": "1904279",
    "end": "1911320"
  },
  {
    "text": "frequently exact log base 2 of course is not maybe the most common thing you'd ask for but you can derive natural log",
    "start": "1911320",
    "end": "1916840"
  },
  {
    "text": "and L base 10 simply by multiplying that by a constant so all the math libraries for all the different kinds of logarithms usually start by Computing",
    "start": "1916840",
    "end": "1923639"
  },
  {
    "text": "the log base 2 and then they scale it why is U you're always saying that",
    "start": "1923639",
    "end": "1929840"
  },
  {
    "text": "the exact is more for posits than for floats the inexact is always greater also why is that do you say the inexact",
    "start": "1929840",
    "end": "1937679"
  },
  {
    "text": "is greater mostly it's taking it away from the nans and the exceptions so instead of saying oh I give up it's",
    "start": "1937679",
    "end": "1943399"
  },
  {
    "text": "overflow or it's underflow I I will give you an answer and so I'll get more exacts as well as more exacts and then",
    "start": "1943399",
    "end": "1949679"
  },
  {
    "text": "it didn't throw a gutter ball and say I give up that's what happens with with floats is they give up on too many of",
    "start": "1949679",
    "end": "1955080"
  },
  {
    "text": "the of the numbers and they don't give an answer at all where do the NS come from let's see in the uh log it's all",
    "start": "1955080",
    "end": "1960679"
  },
  {
    "text": "the negative numbers and why isn't at 50% okay so you get a certainly if you try to take the",
    "start": "1960679",
    "end": "1967159"
  },
  {
    "text": "log of plus or minus infinity that's going to be an n and in my case log of zero is not representable because I",
    "start": "1967159",
    "end": "1973559"
  },
  {
    "text": "don't have minus infinity all by itself so I call that an N I stop I can do the interval right next to zero",
    "start": "1973559",
    "end": "1979440"
  },
  {
    "text": "but I can't do exactly zero it would be a lie to say it's plus or minus infinity i' get I get big mistakes if I then",
    "start": "1979440",
    "end": "1984760"
  },
  {
    "text": "exponentiated it so that's I think that's the the simplest explanation",
    "start": "1984760",
    "end": "1990279"
  },
  {
    "text": "Here's 2 to the X which is you know making numbers very big very fast it's kind of funny that it still doesn't give",
    "start": "1990279",
    "end": "1996360"
  },
  {
    "text": "up and Round Up To infinity even though it's a huge number you know if I take the biggest number to the power the biggest number that's awfully big but it",
    "start": "1996360",
    "end": "2002279"
  },
  {
    "text": "still says no round it down well it's it's better than rounding to Infinity but I just lost 1,233",
    "start": "2002279",
    "end": "2009159"
  },
  {
    "text": "decimal of precision but that's better than infinity so that works out pretty",
    "start": "2009159",
    "end": "2014200"
  },
  {
    "text": "well okay ready for round two now here's the fun part because now we're finally going to do arithmetic plus minus times",
    "start": "2014200",
    "end": "2020720"
  },
  {
    "text": "divide of course we don't need minus that's that's perfect but times and divide are definitely a little bit different so I'll do those separately",
    "start": "2020720",
    "end": "2027760"
  },
  {
    "text": "I'm going to show you kind of an eye popping diagram because what I do is what I call a closure plot I'm going to",
    "start": "2027760",
    "end": "2032840"
  },
  {
    "text": "color code what happens so you can see the entire set of 65k 64 K values at",
    "start": "2032840",
    "end": "2038279"
  },
  {
    "text": "once so just brace yourself because black means exact magenta means an error blue is",
    "start": "2038279",
    "end": "2046360"
  },
  {
    "text": "underflow red is Overflow and yellow means not a number",
    "start": "2046360",
    "end": "2051599"
  },
  {
    "text": "indeterminate that's what addition looks like with floating Point arithmetic so you can see the little kind of",
    "start": "2051599",
    "end": "2058440"
  },
  {
    "text": "the the little bevel down there in the left lower left and the upper right where it overflows you can't underflow",
    "start": "2058440",
    "end": "2064040"
  },
  {
    "text": "with with addition you can underflow with a lot of things but not addition so that doesn't happen so there's no",
    "start": "2064040",
    "end": "2069520"
  },
  {
    "text": "there's no blue here but it's kind of a pretty pattern the uh the Stripe from upper left to bottom right is really",
    "start": "2069520",
    "end": "2076520"
  },
  {
    "text": "subtractions because uh you can't see it because it's so small but the smallest reel is on the bottom left zero Max real",
    "start": "2076520",
    "end": "2084440"
  },
  {
    "text": "and Max negative Max real zero to positive Max real so you're taking differences along that diagonal and",
    "start": "2084440",
    "end": "2090638"
  },
  {
    "text": "you're taking sums along this diagonal and it it's more likely you're going to wind up with a a small number that you",
    "start": "2090639",
    "end": "2097079"
  },
  {
    "text": "can represent if you take a subtraction but you see 70% are inexact 18.5% are",
    "start": "2097079",
    "end": "2103240"
  },
  {
    "text": "exact you're ready for the posit diagram I'll go back and forth between so you can compare them but try to remember",
    "start": "2103240",
    "end": "2109200"
  },
  {
    "text": "this diagram I'll show you what it looks like for posits okay well just about all the nans",
    "start": "2109200",
    "end": "2115640"
  },
  {
    "text": "went away so did all the all the overflows and all the underflows there it wasn't any underlow but you see what",
    "start": "2115640",
    "end": "2122480"
  },
  {
    "text": "I'm saying it here's here's what it was and there's what it is with posits",
    "start": "2122480",
    "end": "2127720"
  },
  {
    "text": "there is an N you'll never find it it's right here that little yellow",
    "start": "2127720",
    "end": "2134200"
  },
  {
    "text": "dot that's where you add plus or minus infinity to itself that's the only thing that causes an interrupt and says I",
    "start": "2134200",
    "end": "2139960"
  },
  {
    "text": "can't go any further I don't know what that is so 25% of the cases are exact",
    "start": "2139960",
    "end": "2145640"
  },
  {
    "text": "now if you have ever tried to design a dynamic number system that has a lot of orders of magnitude addition is the hard",
    "start": "2145640",
    "end": "2152440"
  },
  {
    "text": "part multiplication is easy to get closure right because you're scaling over an exponential series it's just",
    "start": "2152440",
    "end": "2157640"
  },
  {
    "text": "natural to make that work but trying to get the ads closed is really really the trick and I think I've got something",
    "start": "2157640",
    "end": "2163839"
  },
  {
    "text": "that's considerably better than than with floats here if I sort all 64k",
    "start": "2163839",
    "end": "2169680"
  },
  {
    "text": "losses from left to right and graph them you can see posits win uniformly",
    "start": "2169680",
    "end": "2175640"
  },
  {
    "text": "everywhere and they don't go to Infinity of course they the maximum addition loss of of accuracy you get is.3 decimal",
    "start": "2175640",
    "end": "2183000"
  },
  {
    "text": "that's the worst thing that can happen to you that's where you add the maximum real to itself you get twice the maximum",
    "start": "2183000",
    "end": "2188280"
  },
  {
    "text": "reel and you round it back down so you're off by a factor of two which is3 decimal all right let's Dy",
    "start": "2188280",
    "end": "2196760"
  },
  {
    "text": "multiplication and multiplication plots no matter how many bits of precision you use all have these big Corners cut off",
    "start": "2196760",
    "end": "2202560"
  },
  {
    "text": "because that's where they overflow and they also have a diamond in the Middle where it underflows it's not a perfect",
    "start": "2202560",
    "end": "2207760"
  },
  {
    "text": "diamond because gradual underflow so that's a little bit rounded in you can accommodate some of those those numbers",
    "start": "2207760",
    "end": "2215359"
  },
  {
    "text": "but uh this is where floats finally beat me for the first time they got",
    "start": "2215359",
    "end": "2221800"
  },
  {
    "text": "22.2% exact numbers I only got 18% but look at the cost look at all",
    "start": "2221800",
    "end": "2229720"
  },
  {
    "text": "those oops those those overflows and underflows it's knocking out almost one",
    "start": "2229720",
    "end": "2235319"
  },
  {
    "text": "quarter of the cases are just you're going to get garbage whereas posits just don't give up they",
    "start": "2235319",
    "end": "2242440"
  },
  {
    "text": "return an answer it's a meaningful answer with a lot of decimals so I'm willing to pay a slight price in the",
    "start": "2242440",
    "end": "2247680"
  },
  {
    "text": "number of exacts for getting that kind of closure in general now that's the sorted losses and",
    "start": "2247680",
    "end": "2256440"
  },
  {
    "text": "actually posits are much more robust than than floats at retaining information throughout a calculation and",
    "start": "2256440",
    "end": "2262839"
  },
  {
    "text": "not going completely off the rails so the division plot it looks a",
    "start": "2262839",
    "end": "2268920"
  },
  {
    "text": "little bit like a permutation of the multiplication plot there's a little bit of a cemetery you see there because I",
    "start": "2268920",
    "end": "2274680"
  },
  {
    "text": "obviously X over y it doesn't have a corresponding y overx symmetry you have",
    "start": "2274680",
    "end": "2279839"
  },
  {
    "text": "with with commutative multiplication but uh you get plenty of Nan values here always forms that Yellow",
    "start": "2279839",
    "end": "2286000"
  },
  {
    "text": "Frame around around the uh the float diagrams you get do some slight asymmetries here's what it looks like",
    "start": "2286000",
    "end": "2292280"
  },
  {
    "text": "for pauses and I didn't think it would show up on this screen but it's almost",
    "start": "2292280",
    "end": "2297960"
  },
  {
    "text": "symmetric you see a little yellow dot in the center yeah that's 0 divided by zero that's the only thing that stops you is",
    "start": "2297960",
    "end": "2304240"
  },
  {
    "text": "so in very tiny fraction of cases do get an N from 0 divid by 0 other than that it just keeps going you go back yeah",
    "start": "2304240",
    "end": "2311359"
  },
  {
    "text": "let's go see it here here wh it seems to be diagonal symmetry is it actually there there's diagonal symmetry yes",
    "start": "2311359",
    "end": "2318400"
  },
  {
    "text": "because uh that's about whether they change the sign right plus over plus is the same as minus over minus but you",
    "start": "2318400",
    "end": "2325640"
  },
  {
    "text": "other than that it's uh you don't have you don't have symmetry about reciprocation about one so it's if you",
    "start": "2325640",
    "end": "2332960"
  },
  {
    "text": "get the U the actual PDF of this talk it's kind of fun to really stare at this very Out close it's it's it's a like I",
    "start": "2332960",
    "end": "2338440"
  },
  {
    "text": "say it's kind of an eye popping chart but I believe having the hidden bit equal to one all the time is going to",
    "start": "2338440",
    "end": "2343599"
  },
  {
    "text": "simplify your Hardware it's just always one that's really nice it's like the old days when they didn't have subnormal",
    "start": "2343599",
    "end": "2350400"
  },
  {
    "text": "numbers to deal with and and hard most most Hardware Engineers really like that",
    "start": "2350400",
    "end": "2356040"
  },
  {
    "text": "situation so finally round three High higher Precision operations let's take these things out for a spin see what",
    "start": "2356040",
    "end": "2362240"
  },
  {
    "text": "they can do now I made up at least one very simple formula evaluate this",
    "start": "2362240",
    "end": "2367800"
  },
  {
    "text": "formula and tried it out on 32bits so I could say if you had a budget of 32-bit",
    "start": "2367800",
    "end": "2373599"
  },
  {
    "text": "values you couldn't cheat and use a pair of them you have to always stick to 32-bit values how well can you do to",
    "start": "2373599",
    "end": "2379920"
  },
  {
    "text": "evaluate that expression up there see that 27/10 minus E over Pi minus the sum",
    "start": "2379920",
    "end": "2387520"
  },
  {
    "text": "of Ro < tk2 + < tk3 all to the^ of 67 over 16 just a madeup formula I made it",
    "start": "2387520",
    "end": "2393319"
  },
  {
    "text": "up to be a little bit mean because obviously 27 over 10 is kind of close to",
    "start": "2393319",
    "end": "2399520"
  },
  {
    "text": "2.71828 so I just know I'm going to scrape off a couple decimals right away and a lot of people don't know it but",
    "start": "2399520",
    "end": "2405960"
  },
  {
    "text": "root2 plus root3 is really close to Pi you can figure out that by inscribing",
    "start": "2405960",
    "end": "2412280"
  },
  {
    "text": "a hexagon superscribed out root2 plus root3 is 3.14 and then some so I'm going to",
    "start": "2412280",
    "end": "2418359"
  },
  {
    "text": "scrape off three decimals in the denominator like I say I'm feeling mean because I know what that's going to do",
    "start": "2418359",
    "end": "2423480"
  },
  {
    "text": "to floating point and it's going to do it to me too actually if I try to do it with pauses you take it to the 67 over",
    "start": "2423480",
    "end": "2429400"
  },
  {
    "text": "16th power just to make sure you know how to take powers and taking things to Powers tends to inflate uh erors as well",
    "start": "2429400",
    "end": "2435920"
  },
  {
    "text": "so I guess we shouldn't be too surprised that an i e 32-bit float on the top line which nominally has 7.4 decimals of",
    "start": "2435920",
    "end": "2442800"
  },
  {
    "text": "accuracy Al it wobbles a little only gets three decimals right and of course",
    "start": "2442800",
    "end": "2448200"
  },
  {
    "text": "you don't know how many decimals you've got right it reported all these decimals but only the 302 is right after that",
    "start": "2448200",
    "end": "2454079"
  },
  {
    "text": "it's it's off in the weeds so the eror is 0297 now if you're going to do interval",
    "start": "2454079",
    "end": "2459800"
  },
  {
    "text": "arithmetic to be fair that's a pair of 16bit numbers right you don't get two",
    "start": "2459800",
    "end": "2464960"
  },
  {
    "text": "32-bit numbers you get a pair of 16bit numbers to fit in there that's your budget and look at that answer oh my God",
    "start": "2464960",
    "end": "2471480"
  },
  {
    "text": "this is why people don't use interval arithmetic it's somewhere between 18 and 33,000 usually you get something like",
    "start": "2471480",
    "end": "2477200"
  },
  {
    "text": "it's between minus infinity and infinity this is actually a pretty good answer for Interval arithmetic and that's the last time people use interval arithmetic",
    "start": "2477200",
    "end": "2483480"
  },
  {
    "text": "they try it once they said that's fine I'm going to go back to using floats but uh that's a very big range of 3.3 *",
    "start": "2483480",
    "end": "2489160"
  },
  {
    "text": "10 4th now type one unms I think are still unrivaled in terms of their",
    "start": "2489160",
    "end": "2494880"
  },
  {
    "text": "efficiency at representing an interval that's closed because it gets 302.7 five to 30 303 is a pretty tight interval",
    "start": "2494880",
    "end": "2502079"
  },
  {
    "text": "0.25 and that uses only 32 bits per number by being flexible and growing up",
    "start": "2502079",
    "end": "2508119"
  },
  {
    "text": "and down uh you really can't beat that that one uncertainty bit but the designer say ah it's variable size can't",
    "start": "2508119",
    "end": "2515920"
  },
  {
    "text": "stand variable size can't keep track of it we don't want to have a heap to manage the sizes we don't want to expand it out to the maximum size just give a",
    "start": "2515920",
    "end": "2523119"
  },
  {
    "text": "fixed size numbers okay done I heard you type two and type three are are that way",
    "start": "2523119",
    "end": "2530520"
  },
  {
    "text": "now type two UNS I can craft the lce to be really good uh for the for the decimal numbers because like I say you",
    "start": "2530520",
    "end": "2536319"
  },
  {
    "text": "can customize the lattice to be whatever you want just as long as you follow certain rules and I can actually get five decimals of accuracy three or 2.88",
    "start": "2536319",
    "end": "2543559"
  },
  {
    "text": "before it goes bad but with posits using an exponent side such that I have the same dynamic range or actually bigger 3",
    "start": "2543559",
    "end": "2549960"
  },
  {
    "text": "* 10 144th power no one can say that I cut down the dynamic range in order to get more accuracy bits I've got both",
    "start": "2549960",
    "end": "2556960"
  },
  {
    "text": "I've got six decimals of accuracy 32.8 A2 but if you let me reduce the exponent",
    "start": "2556960",
    "end": "2563880"
  },
  {
    "text": "size so I do get a little bit more accuracy and does I don't I still got an a dynamic range of 10 to the 36th power",
    "start": "2563880",
    "end": "2569400"
  },
  {
    "text": "on the bottom line I've got 10 decimals of accuracy from a 32-bit number",
    "start": "2569400",
    "end": "2577240"
  },
  {
    "text": "that's like the maximum you can get out of a 32-bit number even if it was an integer right I mean four billion is an",
    "start": "2577240",
    "end": "2583119"
  },
  {
    "text": "integer that's a 10 bit that's a 10 digigit number so posit speed floats at",
    "start": "2583119",
    "end": "2588240"
  },
  {
    "text": "both dynamic range and accuracy and that's what I got out of just this formula of course that's just one",
    "start": "2588240",
    "end": "2593960"
  },
  {
    "text": "formula let's try solving ax equals B and usually you'd probably do that with double Precision numbers but I'm going",
    "start": "2593960",
    "end": "2600000"
  },
  {
    "text": "to use a really small system of only 10 equations so I'm actually going to try to do that with 16bit numbers and it's",
    "start": "2600000",
    "end": "2606359"
  },
  {
    "text": "exactly by the rules of linpac if you know the rules of the top 500 scoring they fill a a matrix completely full of",
    "start": "2606359",
    "end": "2613559"
  },
  {
    "text": "it's a dense Matrix with random entries between zero and one then they sum the rows and and make that the right hand",
    "start": "2613559",
    "end": "2619559"
  },
  {
    "text": "side so that nominally the correct answer is one one one one one11 one but",
    "start": "2619559",
    "end": "2624720"
  },
  {
    "text": "you you solve it by Galaxy elimination you compare how close is your answer to just a series of ones and that's how you",
    "start": "2624720",
    "end": "2630160"
  },
  {
    "text": "know whether your computer system is working when you build a really big supercomputer because usually the first time you run it it's not a series of",
    "start": "2630160",
    "end": "2635760"
  },
  {
    "text": "Once is something wildly wrong but it's a good error check but it's also become",
    "start": "2635760",
    "end": "2640920"
  },
  {
    "text": "of course the the thing that scores all the all the world supercomputers even though it doesn't really relate to any real applications anymore it's not often",
    "start": "2640920",
    "end": "2647839"
  },
  {
    "text": "you want a million bym million system all completely populated not not sparse but uh I use the complete I use the",
    "start": "2647839",
    "end": "2654359"
  },
  {
    "text": "classic La pack method which is Lu factorization with partial pivoting so I'm always picking the biggest element of every column to use as a pivot",
    "start": "2654359",
    "end": "2660800"
  },
  {
    "text": "element and you can see with with i e 16bit floats dynamic range of 10 12th the rot",
    "start": "2660800",
    "end": "2667319"
  },
  {
    "text": "mean square error was 011 and I got 1.96 decimal of accuracy I",
    "start": "2667319",
    "end": "2673040"
  },
  {
    "text": "tried it with posits I can do a whole bunch of these statistically uh I just picked an example the ran square error",
    "start": "2673040",
    "end": "2679640"
  },
  {
    "text": "is 0.0026 so it's five times four times better and I got 2.58 decimals of",
    "start": "2679640",
    "end": "2686400"
  },
  {
    "text": "accuracy I call this beating floats at their own game floats are supposed to be good at some things like solving ax",
    "start": "2686400",
    "end": "2691680"
  },
  {
    "text": "equals B you do not want to try solving ax equals B with intervals they blow up",
    "start": "2691680",
    "end": "2697920"
  },
  {
    "text": "and everybody does they say oh I've got the Cal arithmetic let's try using Gussy elimination bad idea explos now here is",
    "start": "2697920",
    "end": "2705800"
  },
  {
    "text": "a totally unfair example that I picked out I'm going to admit that it's unfair but I did get it from somewhere else",
    "start": "2705800",
    "end": "2711480"
  },
  {
    "text": "it's from what every computer scientist should know about floating Point arithmetic which is a real classic by David Goldberg um in Computing surveys",
    "start": "2711480",
    "end": "2717680"
  },
  {
    "text": "from 1991 still worth reading um very good explanation in a few pages of what you should know about floating Point",
    "start": "2717680",
    "end": "2723640"
  },
  {
    "text": "arithmetic it's this like buckling concrete you know you're going to pop up the concrete by just very slight thermal",
    "start": "2723640",
    "end": "2728960"
  },
  {
    "text": "expansion and so these sides are only the big side is seven and these sides",
    "start": "2728960",
    "end": "2735079"
  },
  {
    "text": "are 7 Hales 3.5 plus 2 Theus 111th",
    "start": "2735079",
    "end": "2741040"
  },
  {
    "text": "power so I should be able to do this with quad Precision floats because quad",
    "start": "2741040",
    "end": "2746359"
  },
  {
    "text": "Precision floats have 113 bits of significance if you include the hidden bit so with I'll do it with 128bit I",
    "start": "2746359",
    "end": "2753920"
  },
  {
    "text": "floats and I'll do it with 128bit deposits just to show you I can scale up to any size just like float scan the",
    "start": "2753920",
    "end": "2760040"
  },
  {
    "text": "answer that's correct to 36 decimals at least is figured by Mathematica with extended Precision is as shown here I",
    "start": "2760040",
    "end": "2766000"
  },
  {
    "text": "don't expect you to remember that but it's pretty easy to remember the 3.14 part because by coincidence I landed on",
    "start": "2766000",
    "end": "2771599"
  },
  {
    "text": "a p like number times 10- 16th so here's what you get with i e",
    "start": "2771599",
    "end": "2778520"
  },
  {
    "text": "quad prision floats one decimal correct it's off by about",
    "start": "2778520",
    "end": "2784079"
  },
  {
    "text": "15% and of course it's as I say there's no indication that it's off because you don't have any kind of ubit to tell you",
    "start": "2784079",
    "end": "2790720"
  },
  {
    "text": "by the way you really screwed up here and you don't know anything about the number past the first decimal that's a",
    "start": "2790720",
    "end": "2796319"
  },
  {
    "text": "you know that's an awful lot of Labor to produce just one one bit or one decimal of accuracy with 128 bit posits it",
    "start": "2796319",
    "end": "2804240"
  },
  {
    "text": "gets in binary it got exactly the same answer as you get from rounding the the other one to 36 bits 36 digits so it",
    "start": "2804240",
    "end": "2812160"
  },
  {
    "text": "landed on it and if if you wanted to do that with itle floats you'd have to jump to octuple Precision I can shave down the size of a",
    "start": "2812160",
    "end": "2820359"
  },
  {
    "text": "posit by any number of bits and I found that by when I got to9 bits I was still getting the right answer for this 118 it",
    "start": "2820359",
    "end": "2826880"
  },
  {
    "text": "starts to get shaky but I can that's kind of the contest is 256 bits of float",
    "start": "2826880",
    "end": "2833160"
  },
  {
    "text": "119 bits of posit so you can see if you can save all that bandwidth save all that memory you're going to save energy",
    "start": "2833160",
    "end": "2839160"
  },
  {
    "text": "and power and the memory wall is going to be not so bad you're going to make better use of those bits so remember",
    "start": "2839160",
    "end": "2845599"
  },
  {
    "text": "this from the beginning the scalar product A.B uh you always get this right in",
    "start": "2845599",
    "end": "2852000"
  },
  {
    "text": "posits if you can represent those numbers and to represent the numbers 32 million and so on you only need is 25",
    "start": "2852000",
    "end": "2859000"
  },
  {
    "text": "bit posits the reason that that 25 bit suffices is because fused operations are",
    "start": "2859000",
    "end": "2864960"
  },
  {
    "text": "part of the posit definition fused multiply ad is part of the definition fused dotproduct",
    "start": "2864960",
    "end": "2871040"
  },
  {
    "text": "infus dotproduct you do all the multiplies and place them where they would be scaled appropriately so you're",
    "start": "2871040",
    "end": "2877680"
  },
  {
    "text": "doing like a great big sliding floating Point accumulation it maybe uh 400 bits",
    "start": "2877680",
    "end": "2884000"
  },
  {
    "text": "wide 800 bits wide but the amazing thing is it's faster than if you round after",
    "start": "2884000",
    "end": "2889440"
  },
  {
    "text": "every operation three to six times faster all it costs you is a few bits inside the CPU to accumulate as the",
    "start": "2889440",
    "end": "2895839"
  },
  {
    "text": "accumulator there is no reason in the world not to have a fuse dot product there was when it was patented which the",
    "start": "2895839",
    "end": "2902400"
  },
  {
    "text": "patent expired two years ago all R coolish over in Germany patented this thing and tried to get money for it I",
    "start": "2902400",
    "end": "2907839"
  },
  {
    "text": "think that prevented people from using the exact dot product although IBM bought a license but now that it's",
    "start": "2907839",
    "end": "2913040"
  },
  {
    "text": "expired it's high time to put it back into number systems because now you can do Matrix multiply with complete",
    "start": "2913040",
    "end": "2918400"
  },
  {
    "text": "confidence and know you're within one unit in the last place after you do the rounding because you only do one round",
    "start": "2918400",
    "end": "2924240"
  },
  {
    "text": "at the very end so if you have much less rounding and it's three to six times",
    "start": "2924240",
    "end": "2929359"
  },
  {
    "text": "faster I've got the reference there bian colen and Jack kig at the at UC Berkeley have got the the circuit working for",
    "start": "2929359",
    "end": "2936280"
  },
  {
    "text": "this then there's just not much of any reason not to use it uh 800 bits on a",
    "start": "2936280",
    "end": "2941440"
  },
  {
    "text": "chip is nothing these days right so in summary posits beat floats",
    "start": "2941440",
    "end": "2947400"
  },
  {
    "text": "at their own gain which is guessing their way through a calculation as best they can and minimizing the rounding",
    "start": "2947400",
    "end": "2953359"
  },
  {
    "text": "error it's better accuracy it's better dynamic range and it's better closure I",
    "start": "2953359",
    "end": "2959119"
  },
  {
    "text": "believe we are completely obsoleting floating point I can't see a single reason to make a new chip that uses",
    "start": "2959119",
    "end": "2965920"
  },
  {
    "text": "floating point when you could do this instead show me a place where floats don't do a worse job are harder to",
    "start": "2965920",
    "end": "2972799"
  },
  {
    "text": "design take up more space on the chip I mean they have absolutely no advantages as long as there's been a",
    "start": "2972799",
    "end": "2978920"
  },
  {
    "text": "tradeoff the float people have been able to defend well yeah you're better at this but I'm better at this so let's just keep things the same if you're",
    "start": "2978920",
    "end": "2984680"
  },
  {
    "text": "uniformly better with a different method and it does the same type of problems and all you have to do is drop in the",
    "start": "2984680",
    "end": "2990680"
  },
  {
    "text": "value and it works exactly like a float did you don't have to know anything about interval arithmetic or any of the",
    "start": "2990680",
    "end": "2996680"
  },
  {
    "text": "other mathematics all the same algorithms work they just work better then I think it is time to replace i e",
    "start": "2996680",
    "end": "3002480"
  },
  {
    "text": "floats with posits so I wonder who's going to be the first person to produce a chip with positive arithmetic I have a",
    "start": "3002480",
    "end": "3008920"
  },
  {
    "text": "very strong suspicion it's somebody in this room in fact they're in the back row they're already working on it Rex",
    "start": "3008920",
    "end": "3016040"
  },
  {
    "text": "Computing is here and uh they're in they've got their first silicon back and they're testing it but they're planning",
    "start": "3016040",
    "end": "3021520"
  },
  {
    "text": "for a second batch of silicon that at least will offer the alternative of Unum arithmetic so you can imagine a mode",
    "start": "3021520",
    "end": "3026799"
  },
  {
    "text": "where it says let's just just do i e Floats or in this mode use uh use the posit type style so I think that's going",
    "start": "3026799",
    "end": "3034559"
  },
  {
    "text": "to give us the ability to pack more floating Point units onto a chip the GPU people are going to love that right",
    "start": "3034559",
    "end": "3040440"
  },
  {
    "text": "because they are taking up a significant amount of silicon just with their with their floating Point multipliers and adders so if I make their fpus smaller",
    "start": "3040440",
    "end": "3046559"
  },
  {
    "text": "and they can suddenly pack a bunch more into that real estate they're going to really be interested it could be like a 30% maybe a 50% gain in the number of of",
    "start": "3046559",
    "end": "3055000"
  },
  {
    "text": "uh GP use you can get and I presume that the power consumption is going to go down as well because they're not having to do all this testing for for nans and",
    "start": "3055000",
    "end": "3063160"
  },
  {
    "text": "so on now at the end my able assistant Dr Yamoto is going to try to do a live",
    "start": "3063160",
    "end": "3069280"
  },
  {
    "text": "demonstration of these things using Julia he's implemented them in Julia which is uh a very fast but high level",
    "start": "3069280",
    "end": "3075359"
  },
  {
    "text": "language he's even got an audio thing where we did an fft both with floats and with posits so I hope you can get this",
    "start": "3075359",
    "end": "3081200"
  },
  {
    "text": "to work yeah all right so let's let's give this a shot so a couple things about this particular",
    "start": "3081200",
    "end": "3087760"
  },
  {
    "text": "implementation um it's not backed by I floating points everything is done as binary operations on on uh 64-bit",
    "start": "3087760",
    "end": "3096400"
  },
  {
    "text": "unsigned integers so there are a couple places where I cheat and tell that it's a signed integer for example to check",
    "start": "3096400",
    "end": "3101559"
  },
  {
    "text": "signs but the hardware doesn't really treat it any differently okay so um I",
    "start": "3101559",
    "end": "3106920"
  },
  {
    "text": "don't know how many of you guys are familiar with the Julia programming language if you ever do any sort of mathematical modeling and numerical",
    "start": "3106920",
    "end": "3113119"
  },
  {
    "text": "modeling it's a really great language for it um it lets you and in particular what's important about this is about",
    "start": "3113119",
    "end": "3119680"
  },
  {
    "text": "Julia for this this project is that it lets you redefine all of all of your",
    "start": "3119680",
    "end": "3125400"
  },
  {
    "text": "create your own numerical types they're first class citizens and you can basically plug them in anywhere you want",
    "start": "3125400",
    "end": "3131400"
  },
  {
    "text": "you can overload all the operations in such a way that if there's a builtin um",
    "start": "3131400",
    "end": "3137240"
  },
  {
    "text": "if there's a built-in algorithm to do something you can usually like for example matrix multiplication was a big",
    "start": "3137240",
    "end": "3142839"
  },
  {
    "text": "one you can usually go directly and just immediately have matrix multiplication once you've once you've implemented plus",
    "start": "3142839",
    "end": "3150440"
  },
  {
    "text": "uh minus and um and uh and multiplied I think they're still you",
    "start": "3150440",
    "end": "3156520"
  },
  {
    "text": "guys got it going we reversed this really we did",
    "start": "3156520",
    "end": "3164400"
  },
  {
    "text": "let's let's try this let me if I unplug and plug back",
    "start": "3164400",
    "end": "3168920"
  },
  {
    "text": "in uh desk HDMI 2 I think it was",
    "start": "3171599",
    "end": "3177160"
  },
  {
    "text": "oh vj2 sorry",
    "start": "3177160",
    "end": "3180160"
  },
  {
    "text": "vj2 oh no oh there we",
    "start": "3183000",
    "end": "3189319"
  },
  {
    "text": "go okay and then we'll just",
    "start": "3190160",
    "end": "3194078"
  },
  {
    "text": "move all right so this might be a little bit tricky because I'll have",
    "start": "3195680",
    "end": "3200839"
  },
  {
    "text": "to do it this way okay so let's fire up Julia",
    "start": "3200839",
    "end": "3207160"
  },
  {
    "text": "um so I'm going to import the sigmoid number pack package which uh which is so",
    "start": "3208280",
    "end": "3213359"
  },
  {
    "text": "all of this is open source on GitHub um so you should be able to um you should",
    "start": "3213359",
    "end": "3218400"
  },
  {
    "text": "be able to uh uh uh get this if you um if you also if you also get Julia I made",
    "start": "3218400",
    "end": "3225079"
  },
  {
    "text": "sure I was not under any kind of inal property agreements when I did all this so I could give it away under the MIT open source license right we're sticking",
    "start": "3225079",
    "end": "3231839"
  },
  {
    "text": "to that so um first uh we we'll do what so I'll um create a a type which",
    "start": "3231839",
    "end": "3238520"
  },
  {
    "text": "corresponds to uh an 8bit posit with one",
    "start": "3238520",
    "end": "3243400"
  },
  {
    "text": "es oops and uh let's take a look at what",
    "start": "3244359",
    "end": "3252240"
  },
  {
    "text": "the number one looks like in this",
    "start": "3252240",
    "end": "3255559"
  },
  {
    "text": "representation so you can see that the sign is zero but um this may be a little",
    "start": "3259680",
    "end": "3265200"
  },
  {
    "text": "bit confusing because so it's legit 8 Bits it's secretly backed by a 64-bit",
    "start": "3265200",
    "end": "3270400"
  },
  {
    "text": "integer in the system but it will only tell you that there's there's eight there but if we want if you want kind of a better description of what's going on",
    "start": "3270400",
    "end": "3277640"
  },
  {
    "text": "you can uh call it with a spacer and what that'll do is it'll it'll it'll show you the um the uh sign bit the um",
    "start": "3277640",
    "end": "3286040"
  },
  {
    "text": "the un uh regime bit regime bits um a uh",
    "start": "3286040",
    "end": "3292079"
  },
  {
    "text": "the es the exponent bits and then the last four digits are the fraction um if you want to see something like",
    "start": "3292079",
    "end": "3298359"
  },
  {
    "text": "256 uh maybe that's too big 16 let's for eight bits let's do 16 you can see that",
    "start": "3298359",
    "end": "3303559"
  },
  {
    "text": "the size of the uh the size of the regime has gone gone up it's still a unary it's a unary number that",
    "start": "3303559",
    "end": "3309799"
  },
  {
    "text": "corresponds to two to the 2 to the 3 or two the two to the 2 the zero is a flag",
    "start": "3309799",
    "end": "3316480"
  },
  {
    "text": "the zero that's a that's a that's um so the first zero is second zero the second",
    "start": "3316480",
    "end": "3323039"
  },
  {
    "text": "zero size a flag ends so if I so okay so let's do 32 that that will turn that",
    "start": "3323039",
    "end": "3330400"
  },
  {
    "text": "into a one you always have to flip the bit so it's r r r not R so in in this case",
    "start": "3330400",
    "end": "3337599"
  },
  {
    "text": "remember we're we're in the esze environment one so that means that for each of these unies the the exponent",
    "start": "3337599",
    "end": "3344000"
  },
  {
    "text": "goes up by two so in order to get to that exponent of two that's in between say two and eight or actually sorry one",
    "start": "3344000",
    "end": "3351400"
  },
  {
    "text": "and four or four and eight you need to have another bit that that that turns on those on those",
    "start": "3351400",
    "end": "3357720"
  },
  {
    "text": "exponents okay so let's do some slightly more substantial uh you like a chair uh",
    "start": "3357720",
    "end": "3363240"
  },
  {
    "text": "no it's fine sure yeah okay P one of three so just to prove to you that this",
    "start": "3363240",
    "end": "3368839"
  },
  {
    "text": "system like is can actually do some arithmetic um you know that works uh we",
    "start": "3368839",
    "end": "3374680"
  },
  {
    "text": "can also do an ADD and we can also do a divide um now 8",
    "start": "3374680",
    "end": "3380720"
  },
  {
    "text": "Bits is not very much resolution so this will report as5 9 375 which is the",
    "start": "3380720",
    "end": "3386119"
  },
  {
    "text": "closest representable Value to 6 which is what you would expect um let's do uh",
    "start": "3386119",
    "end": "3391640"
  },
  {
    "text": "let's do a slightly bigger",
    "start": "3391640",
    "end": "3394960"
  },
  {
    "text": "system oh thank you H and then we can do uh let's do the",
    "start": "3396880",
    "end": "3403039"
  },
  {
    "text": "same thing as before except do this in P2 and you can see it gets much",
    "start": "3403039",
    "end": "3411559"
  },
  {
    "text": "closer uh at the moment I don't permit that I want you to I mean this is kind of supposed to be like a hardware type",
    "start": "3411559",
    "end": "3418760"
  },
  {
    "text": "uh emulation and that's really discouraged certainly languages could",
    "start": "3418760",
    "end": "3424880"
  },
  {
    "text": "promote for you just like they do single Precision to double all right so if you want to take a look at what this looks",
    "start": "3424880",
    "end": "3430160"
  },
  {
    "text": "like oh let me add spacers um you can see that the this is the representation of this number um all",
    "start": "3430160",
    "end": "3438119"
  },
  {
    "text": "broken up and you can see that um you can see that uh there's a long fraction bit with repeating decimals it's",
    "start": "3438119",
    "end": "3444240"
  },
  {
    "text": "currently around running to nearest even which is why the last one is is a zero instead of one and it breaks the pattern",
    "start": "3444240",
    "end": "3450200"
  },
  {
    "text": "of the repeating decimal okay um just for reference we also have uh in this Library we can also",
    "start": "3450200",
    "end": "3458280"
  },
  {
    "text": "do uh we can do this control rounding uh controlled rounding no there's only one",
    "start": "3458280",
    "end": "3464240"
  },
  {
    "text": "rounding mode uh I I have actually implemented more than one rounding mode because they're useful for the valids you need them for valids but if you're",
    "start": "3464240",
    "end": "3470400"
  },
  {
    "text": "going to do posits there's only one rounding mode you don't have to have four or five or six rounding",
    "start": "3470400",
    "end": "3476000"
  },
  {
    "text": "before you go on yeah now the 32-bit number that ended in a zero what would the value of that number be if that",
    "start": "3476000",
    "end": "3482000"
  },
  {
    "text": "ended in one uh I'm sorry it would it be bad would it",
    "start": "3482000",
    "end": "3488960"
  },
  {
    "text": "be bigger by two uh yeah okay let's let's let's let's let's let's do that oh no no it just",
    "start": "3488960",
    "end": "3496400"
  },
  {
    "text": "rounded that value yes but what",
    "start": "3496400",
    "end": "3500038"
  },
  {
    "text": "if try get converting point",
    "start": "3503359",
    "end": "3507318"
  },
  {
    "text": "6 in other words is it always zero no no",
    "start": "3509720",
    "end": "3514839"
  },
  {
    "text": "no oops all",
    "start": "3514839",
    "end": "3518880"
  },
  {
    "text": "right that should be farther from 6 I mean I'm not going to do the math but it's farther from point 6 than the other",
    "start": "3527359",
    "end": "3533520"
  },
  {
    "text": "one okay excellent um okay so let's do something",
    "start": "3533520",
    "end": "3538680"
  },
  {
    "text": "maybe real uh so you didn't convince me you made that last Z I'm sorry to versus you were asking to",
    "start": "3538680",
    "end": "3548400"
  },
  {
    "text": "make it one larger you made it one smaller yeah no but I wanted to know if that very last zero at the top of the",
    "start": "3548400",
    "end": "3554599"
  },
  {
    "text": "screen it'll be slightly larger than 6 it'll be a little harder than be another",
    "start": "3554599",
    "end": "3560760"
  },
  {
    "text": "cuz the cuz the one with the zero is is is 6 1.9 so that'll make it farther away",
    "start": "3560760",
    "end": "3567680"
  },
  {
    "text": "do you still want to see it but when does it become one when does it become one round and",
    "start": "3567680",
    "end": "3573039"
  },
  {
    "text": "that's what I was trying to understand only previous round is only when it's the exact tie it has a choice between",
    "start": "3573039",
    "end": "3579200"
  },
  {
    "text": "zero and one it's halfway in between I'm sorry actually in fact this one isn't halfway in between so round to near you",
    "start": "3579200",
    "end": "3584359"
  },
  {
    "text": "don't use the round to near even semantic at all you just round it ask question asking what's next instead of",
    "start": "3584359",
    "end": "3590520"
  },
  {
    "text": "next to X can you increment the binary by one and transform it back into a real I don't know if you had that",
    "start": "3590520",
    "end": "3597000"
  },
  {
    "text": "facility yeah that's what I'm okay there you go okay okay all",
    "start": "3597000",
    "end": "3602319"
  },
  {
    "text": "right um all right so let's let's do",
    "start": "3602319",
    "end": "3608039"
  },
  {
    "text": "this so I'm going to go into 32 comma 2",
    "start": "3608039",
    "end": "3613720"
  },
  {
    "text": "and I'm going to create a random array of of numbers that are either one zero or negative one if I can find my",
    "start": "3613720",
    "end": "3622520"
  },
  {
    "text": "cursor uh and make 6, 65,536 of these",
    "start": "3622520",
    "end": "3628359"
  },
  {
    "text": "numbers okay and I'm now going to convert those into uh into into um",
    "start": "3628359",
    "end": "3635119"
  },
  {
    "text": "posits 32 comma 2 posits if you look at find p uh",
    "start": "3635119",
    "end": "3641559"
  },
  {
    "text": "p p do and you can see that those are all",
    "start": "3641559",
    "end": "3648359"
  },
  {
    "text": "those are all posits that are either one zero or negative one uh let's do a fast freway transform",
    "start": "3648359",
    "end": "3656599"
  },
  {
    "text": "on this array there's a lot of signal processing people that use one zero or negative one",
    "start": "3656599",
    "end": "3662240"
  },
  {
    "text": "for their signal the seism people do it the Astro radio astronomy people do it but then they want to do it to 64 bits",
    "start": "3662240",
    "end": "3668160"
  },
  {
    "text": "of per so this is the fast forward transform of that random junk um I",
    "start": "3668160",
    "end": "3674280"
  },
  {
    "text": "didn't actually program any complex numbers for for Julia uh for the for these number system I got them for free with Julia",
    "start": "3674280",
    "end": "3681240"
  },
  {
    "text": "um and what I'm going to do next is I'm going to do this form and I'll go over this formula real briefly what it does",
    "start": "3681240",
    "end": "3688119"
  },
  {
    "text": "is it's it's um it it takes the complex difference between the the the the",
    "start": "3688119",
    "end": "3694359"
  },
  {
    "text": "result and what it started with P right and the and the inverse fora transform",
    "start": "3694359",
    "end": "3699680"
  },
  {
    "text": "of the of the of the of the fora transform uh array and then it takes the",
    "start": "3699680",
    "end": "3706400"
  },
  {
    "text": "uh complex distance of of that difference and then it sums it together so you can see this is basically a net",
    "start": "3706400",
    "end": "3712720"
  },
  {
    "text": "sum difference between it remember that number it's 0.0022 let's do the same thing with uh",
    "start": "3712720",
    "end": "3719640"
  },
  {
    "text": "32-bit floating",
    "start": "3719640",
    "end": "3722640"
  },
  {
    "text": "points and then I'm going to do the same thing here",
    "start": "3726359",
    "end": "3731880"
  },
  {
    "text": "except here I've already pre-done I've done the I've done the 4A transform and then done the inverse 4A transform",
    "start": "3731880",
    "end": "3739160"
  },
  {
    "text": "uh and you can see that this is not as good point",
    "start": "3739160",
    "end": "3745400"
  },
  {
    "text": "in five times bigger area so one question is does this have",
    "start": "3745400",
    "end": "3750599"
  },
  {
    "text": "any like real world implications so I will go ahead and load a library from",
    "start": "3750599",
    "end": "3758200"
  },
  {
    "text": "Julia and what I'm going to do is I'm going to the details of this aren't important but I'm going to record some",
    "start": "3758440",
    "end": "3765480"
  },
  {
    "text": "sound uh from um the computer uh any any",
    "start": "3765480",
    "end": "3770599"
  },
  {
    "text": "anyone want to give me a word to say real quick before I let this go",
    "start": "3770599",
    "end": "3775640"
  },
  {
    "text": "okay I'll do it in honor of Rex Computing since they're",
    "start": "3775640",
    "end": "3780119"
  },
  {
    "text": "here Rex Computing Rex Computing all",
    "start": "3780720",
    "end": "3786880"
  },
  {
    "text": "right that transformed forward and back that we just heard uh no that's that's just what I recorded to prove that to",
    "start": "3786880",
    "end": "3793359"
  },
  {
    "text": "prove that I've done it get a little clipping there um so now I'm going to uh",
    "start": "3793359",
    "end": "3801200"
  },
  {
    "text": "uh write this formula here and uh this function here and uh basically um what",
    "start": "3801200",
    "end": "3809400"
  },
  {
    "text": "just happened here okay uh oh this is a very brave demo I must",
    "start": "3809400",
    "end": "3817160"
  },
  {
    "text": "say oh hold on sorry oh no I accidentally didn't hit",
    "start": "3817160",
    "end": "3823599"
  },
  {
    "text": "enter when I did that so I'm going to copy I'm going to copy the data so that I don't lose it first uh and then I'm",
    "start": "3823599",
    "end": "3829119"
  },
  {
    "text": "going to do this uh do this function here which will um which will basically",
    "start": "3829119",
    "end": "3835079"
  },
  {
    "text": "uh take the function do the fora transform the inverse 4A transform return it back to float 32 and then and",
    "start": "3835079",
    "end": "3840839"
  },
  {
    "text": "then output that as as a result buffer and you're doing that with floats first uh uh no this is I'm I'm going to do",
    "start": "3840839",
    "end": "3848039"
  },
  {
    "text": "this in um oh and note that it takes T which is going to be a data type so I can specify the data type when I call",
    "start": "3848039",
    "end": "3854079"
  },
  {
    "text": "this function okay so um first I'm going to do it with uh with um 8 bit posits 8 bit",
    "start": "3854079",
    "end": "3864039"
  },
  {
    "text": "yeah",
    "start": "3864039",
    "end": "3866200"
  },
  {
    "text": "it's also going to Output how how far away it is and the net different difference is",
    "start": "3872319",
    "end": "3878160"
  },
  {
    "text": "169 and now we can listen to it Rex Computing not so bad um now I'm going to",
    "start": "3878160",
    "end": "3884400"
  },
  {
    "text": "also load up a a custom library that I wrote called alt FP and what that is it's an alternate small floating Point",
    "start": "3884400",
    "end": "3891559"
  },
  {
    "text": "uh floating Point Library um this this provides ability to custom generate um a",
    "start": "3891559",
    "end": "3897720"
  },
  {
    "text": "floating points of of varying sizes um in this case I'm going to do um small",
    "start": "3897720",
    "end": "3903000"
  },
  {
    "text": "float 8 comma 3 um so let's do this um",
    "start": "3903000",
    "end": "3908039"
  },
  {
    "text": "which means that it's an 8bit float uh with only three bits of exponent you're going to have to trust me that that's",
    "start": "3908039",
    "end": "3913079"
  },
  {
    "text": "better than four uh and then you can see already that the",
    "start": "3913079",
    "end": "3919480"
  },
  {
    "text": "N that there's a numerical difference 180. 925 instead of 160 n so this is",
    "start": "3919480",
    "end": "3925079"
  },
  {
    "text": "slightly worse also uh this doesn't have nens so I just let it you know I'm doing",
    "start": "3925079",
    "end": "3931359"
  },
  {
    "text": "the thing which we do with posits make it a little bit Fair more fair and so this is what it sounds like I don't know",
    "start": "3931359",
    "end": "3937559"
  },
  {
    "text": "if you can hear the difference because when I tried this it was kind of an an noisy environment but Rex Computing yeah",
    "start": "3937559",
    "end": "3943400"
  },
  {
    "text": "maybe you can't really hear it but nonetheless for 8 bit for8 bit you know",
    "start": "3943400",
    "end": "3948520"
  },
  {
    "text": "um encodings is not not not doing so poorly but you did get a a Superior",
    "start": "3948520",
    "end": "3953640"
  },
  {
    "text": "Sound difference in one of your experiments with posits they sounded better uh it was it actually the other way but that's cuz I converted negative",
    "start": "3953640",
    "end": "3959480"
  },
  {
    "text": "numbers wrong okay okay all right so uh so okay so the next anyway you can do",
    "start": "3959480",
    "end": "3966160"
  },
  {
    "text": "fast for transforms they're they're more accurate using posits than they are than they are using um than they are using uh",
    "start": "3966160",
    "end": "3973000"
  },
  {
    "text": "floating point or floating Point sty numbers okay so the next thing I'm going to talk about is machine learning um",
    "start": "3973000",
    "end": "3978680"
  },
  {
    "text": "which as you might know is a pretty hot thing right now um I apologize this part",
    "start": "3978680",
    "end": "3984400"
  },
  {
    "text": "might take a little bit of time so um so a key a key thing that you can do with",
    "start": "3984400",
    "end": "3990160"
  },
  {
    "text": "these is to do a an ex a a a exor the",
    "start": "3990160",
    "end": "3995480"
  },
  {
    "text": "top bit and left shift and I you know I was going to do maybe some sort of like interactive uh thing where we try and",
    "start": "3995480",
    "end": "4001160"
  },
  {
    "text": "figure out what that does but I'm low on time so let's let's just do let's just do it this way so I'm going to show you",
    "start": "4001160",
    "end": "4008240"
  },
  {
    "text": "that uh this in fact does what you expect it to do so it's going to exort the top bit",
    "start": "4008240",
    "end": "4014839"
  },
  {
    "text": "and then left shift right so it ex exort the top bit and left shifted",
    "start": "4014839",
    "end": "4021319"
  },
  {
    "text": "too uh and then also um let's see",
    "start": "4021319",
    "end": "4027240"
  },
  {
    "text": "uh Let's do let's do one that's not",
    "start": "4027240",
    "end": "4031559"
  },
  {
    "text": "negative oops got this problem",
    "start": "4032520",
    "end": "4039279"
  },
  {
    "text": "bits that's the sigmoid function you need for deep learning imagine when it's takes to compute that with a floating",
    "start": "4039480",
    "end": "4046200"
  },
  {
    "text": "Point call to a library to do eus X and of course a divide withits it's it's you",
    "start": "4046200",
    "end": "4051960"
  },
  {
    "text": "flip the first bit and shift to right two places and you've got almost a perfect approximation of that function",
    "start": "4051960",
    "end": "4057359"
  },
  {
    "text": "which is why Isaac started calling them sigmoid numbers they're just made it's like they were tailor made for neural",
    "start": "4057359",
    "end": "4063119"
  },
  {
    "text": "networks okay this this I forgot to execute plot at the beginning to get to",
    "start": "4063119",
    "end": "4068440"
  },
  {
    "text": "get this to run faster oh and oh so you can so you can actually see this plot right here so that that's what this",
    "start": "4068440",
    "end": "4075440"
  },
  {
    "text": "thing looks like it has the same it has the same uh slope um as as as the either",
    "start": "4075440",
    "end": "4081200"
  },
  {
    "text": "the one 1 over 1 plus eus X so the natural question is can you actually use this for for machine learning okay so uh",
    "start": "4081200",
    "end": "4089880"
  },
  {
    "text": "and and are there some sort of are there like advantages that you can take advantage of because um uh because of",
    "start": "4089880",
    "end": "4096600"
  },
  {
    "text": "their nature um so I'm going to uh open up a library that I wrote called gen ml",
    "start": "4096600",
    "end": "4102238"
  },
  {
    "text": "which is kind of a very early stage General machine learning um uh machine",
    "start": "4102239",
    "end": "4107278"
  },
  {
    "text": "learning package um and then here I'm going to define something um a posit a",
    "start": "4107279",
    "end": "4113000"
  },
  {
    "text": "16-bit posit I'm going to call it",
    "start": "4113000",
    "end": "4116880"
  },
  {
    "text": "MLP um and what I'll do now is I will uh Define this function um which will it's",
    "start": "4119120",
    "end": "4125758"
  },
  {
    "text": "going to be a Boolean function that takes a vector of of of 10 of 10 10",
    "start": "4125759",
    "end": "4131520"
  },
  {
    "text": "Boolean variables and then calculates a Boolean formula on it and then scrambles",
    "start": "4131520",
    "end": "4136920"
  },
  {
    "text": "and then scrambles it uh 5% of the time so this is kind of like you know a",
    "start": "4136920",
    "end": "4142120"
  },
  {
    "text": "really cheesy version of some sort of noisy data that you might use for machine learning so in this case I'm",
    "start": "4142120",
    "end": "4147640"
  },
  {
    "text": "going to so the dollar sign is exor um exor is very important because it's not easy to do uh you require it requires",
    "start": "4147640",
    "end": "4154440"
  },
  {
    "text": "multiple layers in in in a neuron net to get an exor to work so it's going to be V3 or V4 exor with",
    "start": "4154440",
    "end": "4161719"
  },
  {
    "text": "V1 okay and and uh a couple of housekeeping things that I have to do",
    "start": "4161719",
    "end": "4166920"
  },
  {
    "text": "I'm going to assign um assign in the monkey patch in in the",
    "start": "4166920",
    "end": "4173318"
  },
  {
    "text": "in the Gen ml Library a couple of functions so instead of a sigmoid I'm going to do use the pseudo logistic",
    "start": "4173319",
    "end": "4178798"
  },
  {
    "text": "function which is exor top bit and left and and right shift two um okay uh and then a couple more",
    "start": "4178799",
    "end": "4188318"
  },
  {
    "text": "things I'm going to do is I'm going to and we have had a hard stop at 5:45",
    "start": "4188319",
    "end": "4195560"
  },
  {
    "text": "but sorry just the cameras go off we have an internal session afterwards you",
    "start": "4195560",
    "end": "4200880"
  },
  {
    "text": "can tell us to We have forever okay great uh so so",
    "start": "4200880",
    "end": "4206640"
  },
  {
    "text": "here I'm generating a a 500 data set array of random bus and then solving",
    "start": "4206640",
    "end": "4212960"
  },
  {
    "text": "them through the the noisy function to get a set of training results and then",
    "start": "4212960",
    "end": "4218040"
  },
  {
    "text": "uh uh sorry setting up a training results array and then and then um and then and then doing solving the function",
    "start": "4218040",
    "end": "4223960"
  },
  {
    "text": "f for that for those um for those values and then populating the training results",
    "start": "4223960",
    "end": "4229760"
  },
  {
    "text": "okay the next thing I'm going to do is I'm going to create a multi-layer perceptron",
    "start": "4229760",
    "end": "4237120"
  },
  {
    "text": "um that I'll call demonet and note that this takes values uh everywhere you can",
    "start": "4237640",
    "end": "4244320"
  },
  {
    "text": "see this posit 16 Z which means it's acting on on this 16bit posit everywhere",
    "start": "4244320",
    "end": "4249480"
  },
  {
    "text": "so all the data in here is a 16 is 16bit posits um all right so then I have this function",
    "start": "4249480",
    "end": "4255600"
  },
  {
    "text": "of train with the result that I'm going to copy in I'm just showing it to you so that you know I'm being honest and not doing anything sketchy um but uh this is",
    "start": "4255600",
    "end": "4263679"
  },
  {
    "text": "what it looks like it it basically does 30 rounds of batch of batch training with the entire data set as the batch",
    "start": "4263679",
    "end": "4270199"
  },
  {
    "text": "and then at the end it tests and outputs uh outputs the percentage it got correct",
    "start": "4270199",
    "end": "4275320"
  },
  {
    "text": "uh based off of testing 50 random 50 random values okay so let's do this",
    "start": "4275320",
    "end": "4280360"
  },
  {
    "text": "let's see what happens what happens when we when we train train this guy",
    "start": "4280360",
    "end": "4285560"
  },
  {
    "text": "okay excellent so I got 98% correct um I will um you know I will generate a",
    "start": "4287400",
    "end": "4293800"
  },
  {
    "text": "random I will generate a random uh Boolean array um and what was the",
    "start": "4293800",
    "end": "4300120"
  },
  {
    "text": "formula the formula was uh V1 xor V3 V3 or V4 so V3 or V4 is going to be uh",
    "start": "4300120",
    "end": "4309120"
  },
  {
    "text": "false or true which is going to be true and then V1 is false so that's going to",
    "start": "4309120",
    "end": "4314639"
  },
  {
    "text": "be uh false exort true so the answer should be true unless this is in the 2%",
    "start": "4314639",
    "end": "4320080"
  },
  {
    "text": "of Errors let's see what",
    "start": "4320080",
    "end": "4323159"
  },
  {
    "text": "happens oops right we need to sorry we need to convert that from not being not",
    "start": "4327000",
    "end": "4333440"
  },
  {
    "text": "being a posit into being a Boolean this is almost like you know which not so it evaluated correctly good I can",
    "start": "4333440",
    "end": "4341880"
  },
  {
    "text": "I can I can I can breathe a little bit easier here I I say this a brave demo so I'm going to do this again except",
    "start": "4341880",
    "end": "4348400"
  },
  {
    "text": "instead of doing um 16 bits I let's do it with 8 Bits And what do you think will",
    "start": "4348400",
    "end": "4354760"
  },
  {
    "text": "happen yeah it won't get 98% but you might get pretty",
    "start": "4356560",
    "end": "4362320"
  },
  {
    "text": "good okay so now this is the same thing except except with 8 bit posits all",
    "start": "4363719",
    "end": "4369239"
  },
  {
    "text": "right um so if I actually go ahead and train this it's going to get me no",
    "start": "4369239",
    "end": "4374719"
  },
  {
    "text": "better than random yeah okay so that's that's that's a problem that's too small okay so uh",
    "start": "4374719",
    "end": "4383239"
  },
  {
    "text": "how how can we fix this problem well maybe we can do it by",
    "start": "4383239",
    "end": "4388480"
  },
  {
    "text": "increasing the bit size so something catastrophic happens between between 16 bits and8 bits that make makes this not",
    "start": "4388480",
    "end": "4394840"
  },
  {
    "text": "work anymore all right um unfortunately I have to exit Julia and bring it back up",
    "start": "4394840",
    "end": "4401040"
  },
  {
    "text": "because otherwise otherwise it will it will not know that I'm handle what I'm about to",
    "start": "4401040",
    "end": "4407800"
  },
  {
    "text": "do well um so I'm going to do all the same things I'm going to redefine all",
    "start": "4407800",
    "end": "4412880"
  },
  {
    "text": "these all the things that I just uh defined",
    "start": "4412880",
    "end": "4417760"
  },
  {
    "text": "um uh so basically I've redefined f um I've I've imported all the libraries",
    "start": "4418800",
    "end": "4426120"
  },
  {
    "text": "assigned the sigmoid values uh generated the input Matrix and the training results uh and then this time I've set",
    "start": "4426120",
    "end": "4432560"
  },
  {
    "text": "it to a z just like before um and then i' I've created the new demo net and",
    "start": "4432560",
    "end": "4437719"
  },
  {
    "text": "populated with random random variables oh where did I mess up darn why don't",
    "start": "4437719",
    "end": "4445040"
  },
  {
    "text": "you just tell us how many bits it takes okay we'll trust you uh right so so the the key point is that all you have to do",
    "start": "4445040",
    "end": "4451520"
  },
  {
    "text": "is monkey patch the outer product and let the outer outer product be a 16bit",
    "start": "4451520",
    "end": "4456920"
  },
  {
    "text": "outer product and then magically everything works just one just one function okay in in the process and uh",
    "start": "4456920",
    "end": "4464560"
  },
  {
    "text": "and um yeah so when you do that uh when you do that it just it's able to it's",
    "start": "4464560",
    "end": "4469719"
  },
  {
    "text": "able to train correctly fantastic so if you could use eight bits instead of 16 bits you could go twice as fast as even",
    "start": "4469719",
    "end": "4475800"
  },
  {
    "text": "these special purpose Hardware things that they're building to do oh I see where the problem",
    "start": "4475800",
    "end": "4480880"
  },
  {
    "text": "is so how do you figure out what that was by trial and error and the",
    "start": "4481080",
    "end": "4488320"
  },
  {
    "text": "way that I did it was first I did it with the 16bit uh uh posits and then at",
    "start": "4488320",
    "end": "4494639"
  },
  {
    "text": "at every stage of the machine learning process I constricted the 16bit pro uh",
    "start": "4494639",
    "end": "4500639"
  },
  {
    "text": "um posits and and and trim them down to eight bits and then I found the one",
    "start": "4500639",
    "end": "4505920"
  },
  {
    "text": "place that was critical and then I did the inverse experiment which is to take eight bit posits and then see if I just",
    "start": "4505920",
    "end": "4511400"
  },
  {
    "text": "expanded to 16 bit posits in that one place it's trivial right there the representation is identical so",
    "start": "4511400",
    "end": "4516880"
  },
  {
    "text": "internally Julia doesn't know it's treating everything as as a 64-bit int uh under the hood but it just doesn't",
    "start": "4516880",
    "end": "4523880"
  },
  {
    "text": "truncate and round yeah um so so the so the so the interesting thing is that you",
    "start": "4523880",
    "end": "4529199"
  },
  {
    "text": "know this could be a way to make uh um um U machine learning much more",
    "start": "4529199",
    "end": "4534719"
  },
  {
    "text": "efficient um so actually if I I think one of the first places these things might show up is in gpus because as long",
    "start": "4534719",
    "end": "4540679"
  },
  {
    "text": "as it's putting the right pixels on the screen no one cares what the format is to a large extent I I tried to get AMD",
    "start": "4540679",
    "end": "4547840"
  },
  {
    "text": "interested in it but that was before AMD finally had some cash on hand and they couldn't do anything so maybe can",
    "start": "4547840",
    "end": "4553920"
  },
  {
    "text": "so actually I I'm pretty sure this will work so so here's here's here's monkey patching the um that one uh function um",
    "start": "4553920",
    "end": "4563960"
  },
  {
    "text": "you can see I've added these uh these widen uh directives here which will widen the values at at this one place",
    "start": "4563960",
    "end": "4571440"
  },
  {
    "text": "where it's doing the matrix multiplication okay um and then so it",
    "start": "4571440",
    "end": "4576800"
  },
  {
    "text": "gives me warnings CU I'm monkey patching a function and then if we train this now remember everything's still",
    "start": "4576800",
    "end": "4583600"
  },
  {
    "text": "eight bits 90% not bad yeah maybe",
    "start": "4583600",
    "end": "4590480"
  },
  {
    "text": "acceptable all right I think that concludes our talk sorry to go for",
    "start": "4590480",
    "end": "4596560"
  },
  {
    "text": "here thank you so now we can do questions and",
    "start": "4597080",
    "end": "4605360"
  },
  {
    "text": "discussion and you can tell me why this will never work which is",
    "start": "4605360",
    "end": "4611639"
  },
  {
    "text": "yes um say he's good we he slides up within an hour uhhuh great I thought he",
    "start": "4611639",
    "end": "4618520"
  },
  {
    "text": "disted them ahead of time so people could follow along it'll be on it'll be on second now okay good so yes so I have",
    "start": "4618520",
    "end": "4625719"
  },
  {
    "text": "several algorithms that require that I be able to control the rounding direction if I don't then the men could",
    "start": "4625719",
    "end": "4632520"
  },
  {
    "text": "cross the Max and then they don't work so um that's a that's a significant",
    "start": "4632520",
    "end": "4637880"
  },
  {
    "text": "thing to CR well I think as soon as you have start getting into things like that that says you need valid not floats in",
    "start": "4637880",
    "end": "4644320"
  },
  {
    "text": "other words don't use posits use valids there's all this machinery for doing wonderful calculations that that and and",
    "start": "4644320",
    "end": "4651880"
  },
  {
    "text": "and that's all developed you know like I say the other thing is the other thing is um I've successfully used the um",
    "start": "4651880",
    "end": "4658600"
  },
  {
    "text": "overflow and underflow sticky bits to run the fast algorithm check the bit and only if it had an overflow and underflow",
    "start": "4658600",
    "end": "4665840"
  },
  {
    "text": "rerun with the SL algor I've done that and I'm a big believer in that that",
    "start": "4665840",
    "end": "4671040"
  },
  {
    "text": "kind of runtime control as well and I've used NS to avoid exceptions in the middle of expensive calculations yeah I",
    "start": "4671040",
    "end": "4677199"
  },
  {
    "text": "think we we do need a way that you can keep on going let's say you're doing a just a whole list of calculations and",
    "start": "4677199",
    "end": "4682239"
  },
  {
    "text": "only one of them is bad you want some way of being able to continue to proceed throwing out that one about the number",
    "start": "4682239",
    "end": "4688639"
  },
  {
    "text": "format that there are features in the I that are there for a good reason yes I just don't want to keep feeding a nan as",
    "start": "4688639",
    "end": "4694400"
  },
  {
    "text": "an input into a floating Point Unit possible yeah conventional rounding in Fastway transform introduces a bias",
    "start": "4694400",
    "end": "4703120"
  },
  {
    "text": "do you have a way of changing that to say random rounding which is it how is it biased if you're uh let's see if",
    "start": "4703120",
    "end": "4709880"
  },
  {
    "text": "you're uh is your signal has a DC level yes oh yeah we we've run into that",
    "start": "4709880",
    "end": "4717678"
  },
  {
    "text": "um let's see that's a tough question uh I was using experiments where there was",
    "start": "4718120",
    "end": "4723360"
  },
  {
    "text": "no DC level and I wasn't running into it so if you're rounding if you're doing",
    "start": "4723360",
    "end": "4731040"
  },
  {
    "text": "you're saying round to nearest even introduces a bias I'm just saying rounding the conventional rounding",
    "start": "4731040",
    "end": "4736360"
  },
  {
    "text": "introduces a bias which can be eliminated by doing a random rounding up or",
    "start": "4736360",
    "end": "4742520"
  },
  {
    "text": "down instead of round to nearest even it add to the noise being PC down",
    "start": "4742520",
    "end": "4748960"
  },
  {
    "text": "yeah that's a tough one I'll have to think that one through yes um you said that that",
    "start": "4748960",
    "end": "4756040"
  },
  {
    "text": "project can be used as a drop in for floating point and I'm trying to understand what that means because if I",
    "start": "4756040",
    "end": "4761520"
  },
  {
    "text": "write a floating Point uh library and I had to pay attention to all have to add Logic for all the the underflows and",
    "start": "4761520",
    "end": "4767920"
  },
  {
    "text": "overflows and NS and so on so that software won't work exactly with posits what do you you won't get any NS you",
    "start": "4767920",
    "end": "4773639"
  },
  {
    "text": "won't get any overflows you won't get any underflows and your answer will be more accurate in that sense it's a drop in uh so all the exceptions you put in",
    "start": "4773639",
    "end": "4780960"
  },
  {
    "text": "to handle bad things code you have to be the only thing that could go wrong is if",
    "start": "4780960",
    "end": "4786520"
  },
  {
    "text": "you say if number bigger than two to the you know whatever and you got some magic numbers where you want to let's say say",
    "start": "4786520",
    "end": "4793199"
  },
  {
    "text": "trunk 8 to zero then those would probably have to be changed if you've hardwired things into your function and",
    "start": "4793199",
    "end": "4799159"
  },
  {
    "text": "I know let's say if you've got a routine for computing uh cosine of x and you've",
    "start": "4799159",
    "end": "4804400"
  },
  {
    "text": "got the polinomial coefficient slid out I I think You' probably want different polinomial coefficients for approximating cosine if you had posits",
    "start": "4804400",
    "end": "4811000"
  },
  {
    "text": "and if you wanted floats but in general there's nothing to do with um interval arithmetic where you would have to do",
    "start": "4811000",
    "end": "4817400"
  },
  {
    "text": "tiling methods or watch watch for expansion and things like that that's why I'm saying it's same algorithms",
    "start": "4817400",
    "end": "4823639"
  },
  {
    "text": "would work so as I showed in My Demo when I did the fastb transform with 32 bits",
    "start": "4823639",
    "end": "4828760"
  },
  {
    "text": "floats versus 32 deposits that did not Branch off into two different two",
    "start": "4828760",
    "end": "4833880"
  },
  {
    "text": "different like you know yeah logic in there for Point anomalies anyway the process was identical the",
    "start": "4833880",
    "end": "4840920"
  },
  {
    "text": "thing that the computer I mean obviously to actually do the adds subtracts and multiplies you know there were different",
    "start": "4840920",
    "end": "4847880"
  },
  {
    "text": "there there there's no right but like the actual outer the outer algorithm was",
    "start": "4847880",
    "end": "4854679"
  },
  {
    "text": "identical if you wanted to convert the nag Library over it wouldn't be that hard to convert it to posits it' be if",
    "start": "4854679",
    "end": "4861360"
  },
  {
    "text": "anything you you take code out because you wouldn't need it anymore and it would just get yeah the era you reported",
    "start": "4861360",
    "end": "4866880"
  },
  {
    "text": "for the fast 48 transform uh comparison sort of brushed over what could have",
    "start": "4866880",
    "end": "4872360"
  },
  {
    "text": "been some serious minor uh spotty errors did you",
    "start": "4872360",
    "end": "4877800"
  },
  {
    "text": "make any calculations to show the maximum error in the two different calculations that's a very good point uh",
    "start": "4877800",
    "end": "4883880"
  },
  {
    "text": "I just finished the fast for transform yesterday so not yet yeah you do",
    "start": "4883880",
    "end": "4889000"
  },
  {
    "text": "experiments first and you follow more theoretical underpinnings and try to figure out well is this just luck or is",
    "start": "4889000",
    "end": "4894400"
  },
  {
    "text": "this always going to happen then you get some proofs as to what's the worst thing that can happen we haven't done that yet",
    "start": "4894400",
    "end": "4899480"
  },
  {
    "text": "so when you talked about the it floating Point giving different answers on different machines yes um was that using",
    "start": "4899480",
    "end": "4905800"
  },
  {
    "text": "multiply ad and double extended or was that just the straight standard one of the first places that happens is if one",
    "start": "4905800",
    "end": "4911639"
  },
  {
    "text": "uses fuse multiply add and the other one doesn't for example but if one has an 80 bit accumulator let's say because it's",
    "start": "4911639",
    "end": "4917120"
  },
  {
    "text": "got 87 and the other one does not then you got problems there that's why the standard didn't include the 80 bit reg",
    "start": "4917120",
    "end": "4924440"
  },
  {
    "text": "in the registers and multiply ad is actually not allowed by the standard unless you call it a multiply ad you see",
    "start": "4924440",
    "end": "4932440"
  },
  {
    "text": "you do init arithmetic the compiler in in posit arithmetic should not be allowed to",
    "start": "4932440",
    "end": "4937600"
  },
  {
    "text": "replace a multiply and an ad by a multiply ad without per explicit permission by the user it's a different",
    "start": "4937600",
    "end": "4942840"
  },
  {
    "text": "function just as Fus dot product is a different function but the I standard itself doesn't include it and that's",
    "start": "4942840",
    "end": "4948600"
  },
  {
    "text": "just an that's just it there's a whole lot of things in the it standard where they were not thinking about making bitwise compatibility and you can add",
    "start": "4948600",
    "end": "4955000"
  },
  {
    "text": "them on and and and fix that yes my question was going to be the same thing this may be a semantic issue and so that",
    "start": "4955000",
    "end": "4961159"
  },
  {
    "text": "doesn't apply but it sounds like what you're saying if you do things that are beyond the scope of the original H",
    "start": "4961159",
    "end": "4966719"
  },
  {
    "text": "standard and get results the original it standard wouldn't allow you to get those results might not be the same I mean to",
    "start": "4966719",
    "end": "4973280"
  },
  {
    "text": "the if you were not allowed to extend the standard to do things like the fuse multiply ad would it still give you",
    "start": "4973280",
    "end": "4980120"
  },
  {
    "text": "potentially different results on different machines or are those differences because the machines took liberties with the standard why is this",
    "start": "4980120",
    "end": "4987440"
  },
  {
    "text": "uh okay the the reason the standard gives differences is because it has options as to what you can what you must",
    "start": "4987440",
    "end": "4992560"
  },
  {
    "text": "do and what you might want to do okay that's what I wantah runs his algorithms",
    "start": "4992560",
    "end": "4997679"
  },
  {
    "text": "without any of the options he I run him with all the options but he wanted he was he was interested in letting people",
    "start": "4997679",
    "end": "5003520"
  },
  {
    "text": "improve the results any way they can so if One processor said can I use a couple of guard bits here and keep them through",
    "start": "5003520",
    "end": "5008920"
  },
  {
    "text": "all the calculation and only round when I hit the equal sign he said yeah yeah I'll give better answers but every user",
    "start": "5008920",
    "end": "5014679"
  },
  {
    "text": "I know is really upset when they get a different answer and they don't know which one is the better answer they just know they're different and is it a bug",
    "start": "5014679",
    "end": "5021560"
  },
  {
    "text": "is it a rounding error pain",
    "start": "5021560",
    "end": "5028520"
  },
  {
    "text": "yeah the reason I was queuing in on that is one of the early Intel microprocessors that implemented the",
    "start": "5028600",
    "end": "5034800"
  },
  {
    "text": "fused op ad was the i860 machine oh yeah I remember 89 time",
    "start": "5034800",
    "end": "5041520"
  },
  {
    "text": "frame yep and there are people who have said that one reason that didn't succeed better is because they took this",
    "start": "5041520",
    "end": "5048800"
  },
  {
    "text": "particular Liberty with the putting wi standard and thus people did not get the same results and whether that was an",
    "start": "5048800",
    "end": "5053880"
  },
  {
    "text": "issue or not or whether it was Improvement or not the fact that it was different was a Target that people could throw at them here multiply these",
    "start": "5053880",
    "end": "5060600"
  },
  {
    "text": "numbers and you'll see that it didn't work right you might also remember the early days of the sea language when it",
    "start": "5060600",
    "end": "5065960"
  },
  {
    "text": "was first introduced the the rule was that as you entered a routine with floats they were automatically pres",
    "start": "5065960",
    "end": "5071360"
  },
  {
    "text": "promoted to doubles and people said how do we turn that off because they did not want it happening without their control",
    "start": "5071360",
    "end": "5077600"
  },
  {
    "text": "if they wanted doubles they're going to ask for doubles and but it's going to be so much better you're going to get double Precision it'll be great no they",
    "start": "5077600",
    "end": "5083760"
  },
  {
    "text": "don't stop helping stop helping we'll do it you know if we want it we'll do it",
    "start": "5083760",
    "end": "5088880"
  },
  {
    "text": "IBM had the same issue on the 360 series with the 36 6091 to get a pipeline",
    "start": "5088880",
    "end": "5094960"
  },
  {
    "text": "divide they actually did worse rounding sometimes a very small percentage of the",
    "start": "5094960",
    "end": "5100040"
  },
  {
    "text": "time and it meant the nuclear industry couldn't buy that machine but the scientific Computing people were very",
    "start": "5100040",
    "end": "5105719"
  },
  {
    "text": "happy because pipeline divides ran quite fast yeah well partial accumulation was",
    "start": "5105719",
    "end": "5111199"
  },
  {
    "text": "a quick way of U saving memory for a lot of stuff yeah but you know you're you had good",
    "start": "5111199",
    "end": "5118800"
  },
  {
    "text": "arguments on your your first two arguments at the beginning do this there's actually a third problem which",
    "start": "5118800",
    "end": "5125840"
  },
  {
    "text": "is in the ACM undergraduate curriculum uh the curriculum is only one",
    "start": "5125840",
    "end": "5132760"
  },
  {
    "text": "quarter for numerical methods I'm surprised there's that yeah no actually home State University in the country in",
    "start": "5132760",
    "end": "5139040"
  },
  {
    "text": "the world you can get a degree in computer science without ever touching numerical analysis that's that's right and actually a lot of that has to be",
    "start": "5139040",
    "end": "5145119"
  },
  {
    "text": "complaints by students who find discussions about floating Point like this exceedingly boring I had I had a",
    "start": "5145119",
    "end": "5152239"
  },
  {
    "text": "three quter numerical methods class myself and well when I teach parallel processing I teach them with things that",
    "start": "5152239",
    "end": "5158639"
  },
  {
    "text": "round and I I write in their face they get different answers when they group things in parallel instead of doing them",
    "start": "5158639",
    "end": "5164000"
  },
  {
    "text": "serly from left to right uh and they usually do not get taught that in most universities because it's an ugly example so I think you need a third",
    "start": "5164000",
    "end": "5170800"
  },
  {
    "text": "slide basically saying we have we have to change the thinking in a lot of Cs departments well maybe I mean I I when I",
    "start": "5170800",
    "end": "5177040"
  },
  {
    "text": "debated Khan last July he's of the U opinion that the whole world has to change so that we go back to analyzing",
    "start": "5177040",
    "end": "5183880"
  },
  {
    "text": "every single line of code for a surrounding error all you know 10 million lines of code that you've got",
    "start": "5183880",
    "end": "5189000"
  },
  {
    "text": "you have to analyze every single one and everybody's a bad person if they does don't do that I I don't think it's going",
    "start": "5189000",
    "end": "5195159"
  },
  {
    "text": "to happen I think even fewer people are doing numerical analysis now than the were 10 years ago even fewer than 20",
    "start": "5195159",
    "end": "5200320"
  },
  {
    "text": "years ago and we have to find ways to make it more automatic and higher quality there there is a difference between numerical analysis and numerical",
    "start": "5200320",
    "end": "5207440"
  },
  {
    "text": "methods yeah when I taught numerical methods I didn't teach why the algorithms would fail I taught them how",
    "start": "5207440",
    "end": "5214679"
  },
  {
    "text": "to figure out when the algorithms would fail but not through the proofs but just",
    "start": "5214679",
    "end": "5220000"
  },
  {
    "text": "by a higher you know a simpler analysis like turn down the Precision until it fails or something like that you didn't",
    "start": "5220000",
    "end": "5225840"
  },
  {
    "text": "have to go that far but so way numerical analysis is a very mathematical discipline yes numerical methods can be",
    "start": "5225840",
    "end": "5233119"
  },
  {
    "text": "taught as a more engineering approach right I I completely agree and you might be able to get away with teaching that",
    "start": "5233119",
    "end": "5238600"
  },
  {
    "text": "and getting some more literacy in that that's but there aren't that many numeric analysts out there yes getting",
    "start": "5238600",
    "end": "5244560"
  },
  {
    "text": "away from the technology in theory what's driving you to do this your love of numbers or is there some business",
    "start": "5244560",
    "end": "5254600"
  },
  {
    "text": "opportunity here what not for the money that's for sure I mean that's why I'm giving it all away although I I'm",
    "start": "5254600",
    "end": "5260560"
  },
  {
    "text": "discovering I'm making more money on Consulting than I ever would do probably if I were Tred to charge license or",
    "start": "5260560",
    "end": "5265600"
  },
  {
    "text": "royalty fee so I you don't if you're trying to introduce a new number system you don't fine people for using it right",
    "start": "5265600",
    "end": "5271440"
  },
  {
    "text": "they're never going to touch it but uh I think my royalties on this been almost a dollar an hour now for minimum as",
    "start": "5271440",
    "end": "5278199"
  },
  {
    "text": "minimum wage price so CU it yeah I'm G tell Dave Bailey you know he",
    "start": "5278199",
    "end": "5284960"
  },
  {
    "text": "needs to look at the what you just presented if he does you have to talk to Dave already well Dave baile was one of the reviewers of the book yeah yeah so",
    "start": "5284960",
    "end": "5291639"
  },
  {
    "text": "you know and also one of my other former co-workers who who used to do a lot of cfd and you know they there's",
    "start": "5291639",
    "end": "5298360"
  },
  {
    "text": "communities that appreciate this the Cs Community tends to appreciate less though so what really motivated me",
    "start": "5298360",
    "end": "5304560"
  },
  {
    "text": "mainly was at Intel we were trying to get to exos scale Computing and I was on the leading the research group trying to",
    "start": "5304560",
    "end": "5309639"
  },
  {
    "text": "drive that and we quickly identified that the pathway between D and processor",
    "start": "5309639",
    "end": "5314679"
  },
  {
    "text": "was going to use 100 megawatts all by itself and we're limited to 20 megawatts for an exus scale comp supercomputer so",
    "start": "5314679",
    "end": "5321760"
  },
  {
    "text": "if you can't get that down by technology Trends just saying well you know memory's getting low lower power because it wasn't the trends were not going to",
    "start": "5321760",
    "end": "5328080"
  },
  {
    "text": "get it down below 100 megawatts in in the foreseeable future use fewer bits",
    "start": "5328080",
    "end": "5333239"
  },
  {
    "text": "make them more meaningful and it might cost you more transistors on chip I said you might make a much more complicated",
    "start": "5333239",
    "end": "5340360"
  },
  {
    "text": "uh uh FPU but it'll pay you could maybe use three times as many transistors on the FPU but make every bit count and",
    "start": "5340360",
    "end": "5347560"
  },
  {
    "text": "you'd win because you'd be moving far fewer bits and you'd be able to get away with single Precision instead of double Precision everywhere we throw 64-bit",
    "start": "5347560",
    "end": "5354119"
  },
  {
    "text": "Precision at everything these days and that's one thing that's stopping us getting to exis scale so that's what really motivated me was was trying to",
    "start": "5354119",
    "end": "5360920"
  },
  {
    "text": "get past the memory wall problem but I'm always attracted to a problem where I see there's a better solution but",
    "start": "5360920",
    "end": "5367679"
  },
  {
    "text": "everybody's doing it this way cuz that's the way we've always done it and that was the way with parallel processing in the 80s we could see that parallel",
    "start": "5367679",
    "end": "5374000"
  },
  {
    "text": "processing was a great thing but hey you you you know it's you have to change all your code and it's already already",
    "start": "5374000",
    "end": "5379480"
  },
  {
    "text": "written and optimized for these Vector machines and it's not going to happen but it did happen I love i' love to see",
    "start": "5379480",
    "end": "5385239"
  },
  {
    "text": "those revolutions where it just goes to the breaking point suddenly everybody's doing it in the new way so what what",
    "start": "5385239",
    "end": "5392360"
  },
  {
    "text": "between the original UNS and posits is that that the posits are array friendly",
    "start": "5392360",
    "end": "5397719"
  },
  {
    "text": "because you you pick a fixed size for them um what about the the number of Cycles to do uh say multiply or divide",
    "start": "5397719",
    "end": "5405719"
  },
  {
    "text": "is that now constant yeah all posits just like it is with floats so so it's",
    "start": "5405719",
    "end": "5412119"
  },
  {
    "text": "also kind of GPU friendly that is very G friendly very Rex friendly theyve got a vliw they need to know exactly how many",
    "start": "5412119",
    "end": "5417679"
  },
  {
    "text": "clock Cycles everything takes so yeah you don't have and the the lack of handling should help you you have just",
    "start": "5417679",
    "end": "5423679"
  },
  {
    "text": "two exception numbers zero and plus or minus infinity those are the only two you have to watch out for and you do those off to the side while you're going",
    "start": "5423679",
    "end": "5430159"
  },
  {
    "text": "ahead the only thing I would caveat it with is my multiplier is going to be slightly bigger because I get a little",
    "start": "5430159",
    "end": "5436400"
  },
  {
    "text": "bit more Precision so like in a double Precision number 64 bits 61 of them might be the",
    "start": "5436400",
    "end": "5442159"
  },
  {
    "text": "fraction if you have an es of zero so you might need 122 bit multiplier in",
    "start": "5442159",
    "end": "5447800"
  },
  {
    "text": "order to be able to do to round correctly and that's a little bit bigger than 106 bit multip lier that you need right now but I'm I'm pretty sure that's",
    "start": "5447800",
    "end": "5454920"
  },
  {
    "text": "not going to swell the the Silicon area of the FPU that by that much you've got a lot of other logic that you've got to worry about in a an",
    "start": "5454920",
    "end": "5461960"
  },
  {
    "text": "FPU except taking exceptions out yeah taking exceptions out is is a very",
    "start": "5461960",
    "end": "5467920"
  },
  {
    "text": "helpful thing you guys should go have dinner with John now on Stanford so",
    "start": "5467920",
    "end": "5473080"
  },
  {
    "text": "let's go din all right let's do dinner thanks very",
    "start": "5473080",
    "end": "5477638"
  },
  {
    "text": "much",
    "start": "5480760",
    "end": "5483760"
  }
]