[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "Okay. Hi everyone. Okay. Let's get started.",
    "start": "4160",
    "end": "10410"
  },
  {
    "text": "Um- great to see you all here. Welcome back for um- week two of CS224N.",
    "start": "10410",
    "end": "17385"
  },
  {
    "text": "Um- so- so this is a little preview of what's coming up in the class for this week and next week.",
    "start": "17385",
    "end": "25800"
  },
  {
    "start": "21000",
    "end": "122000"
  },
  {
    "text": "Um- you know, this week is perhaps the worst week of this class. [LAUGHTER]. Um- so in week two of the class our hope is to actually kind of",
    "start": "25800",
    "end": "36435"
  },
  {
    "text": "go through some of the nitty gritty of neural networks and how they're trained,",
    "start": "36435",
    "end": "43360"
  },
  {
    "text": "and how we can learn good neural networks by backpropagation,",
    "start": "43360",
    "end": "48795"
  },
  {
    "text": "which means in particular we're gonna be sort of talking about the training algorithms and doing calculus to work out gradients from proving them.",
    "start": "48795",
    "end": "58100"
  },
  {
    "text": "Um, so we are looking a bi- a little bit, at- um- um, word window classification named entity recognition.",
    "start": "58100",
    "end": "67130"
  },
  {
    "text": "So there's a teeny bit of natural language processing in there, but basically,",
    "start": "67130",
    "end": "72289"
  },
  {
    "text": "sort of week two is sort of, um- math of deep learning and",
    "start": "72290",
    "end": "78440"
  },
  {
    "text": "neural network models and sort of really neural network fundamentals. Um, but the hope is that that will give you kind",
    "start": "78440",
    "end": "86130"
  },
  {
    "text": "of a good understanding of how these things really work, and we'll give you all the information you need to do,",
    "start": "86130",
    "end": "92570"
  },
  {
    "text": "um- the coming up homework and so then, in week three we kind of flips.",
    "start": "92570",
    "end": "98280"
  },
  {
    "text": "So, then week three is going to be mainly about natural language processing so we then gonna talk about how",
    "start": "98280",
    "end": "105020"
  },
  {
    "text": "to put syntactic structures over sentences, um- for building dependency parses of sentences",
    "start": "105020",
    "end": "111215"
  },
  {
    "text": "which is then actually what's used in homework three. So we're chugging along rapidly. And then we'll talk about this idea of the probability of",
    "start": "111215",
    "end": "119210"
  },
  {
    "text": "a sentence which leads into neural language models. Um- so on the homeworks.",
    "start": "119210",
    "end": "125640"
  },
  {
    "start": "122000",
    "end": "409000"
  },
  {
    "text": "Homework one was due approximately two minutes ago, um- so I hope everyone has submitted their homework one, I mean as,",
    "start": "125640",
    "end": "135189"
  },
  {
    "text": "um- one just sort of admonition, um- in general so you know homework one we",
    "start": "135190",
    "end": "141950"
  },
  {
    "text": "hope you found was a good warm up and not too too hard and so really be best to get homework one in quickly",
    "start": "141950",
    "end": "149059"
  },
  {
    "text": "rather than to burn lots of your late days doing homework one. Um, and now right now out on the website,",
    "start": "149059",
    "end": "155419"
  },
  {
    "text": "um there's homework two. Um so, we are chugging along. So homework two kind of corresponds to this week's lectures.",
    "start": "155419",
    "end": "164025"
  },
  {
    "text": "So on the first part of that we are expecting you to grind through some math problems of working out gradient derivations.",
    "start": "164025",
    "end": "172334"
  },
  {
    "text": "Um- and then the second part of that is then implementing your own version of word2vec making use of NumPy.",
    "start": "172335",
    "end": "179480"
  },
  {
    "text": "And so this time sort of writing a Python program. It's no longer an IPython notebook.",
    "start": "179480",
    "end": "184555"
  },
  {
    "text": "Um, I encourage you to get early, um- look at the materials,",
    "start": "184555",
    "end": "190545"
  },
  {
    "text": "um- on the web. I mean, in particular corresponding to today's lecture there's,",
    "start": "190545",
    "end": "195635"
  },
  {
    "text": "um- some quite good tutorial materials that are available on the website and so also encourage you to look at those.",
    "start": "195635",
    "end": "202250"
  },
  {
    "text": "[NOISE]. Um- more generally, just to make a couple more comments on things.",
    "start": "202250",
    "end": "207950"
  },
  {
    "text": "I mean, I guess this is true of a lot of classes at Stanford but,",
    "start": "207950",
    "end": "212989"
  },
  {
    "text": "you know when we get the course reviews for this class we always get the full spectrum from people who say the class is terrible and it's way too much work,",
    "start": "212990",
    "end": "222710"
  },
  {
    "text": "um- to the people who say it's a really great class, one of their favorite classes at Stanford, obvious the instructors care, et cetera.",
    "start": "222710",
    "end": "229519"
  },
  {
    "text": "And I mean, partly this reflects that we get this very, um- wide range of people coming to take this class on the one hand,",
    "start": "229520",
    "end": "237750"
  },
  {
    "text": "on the right hand margin perhaps we have the physics PhDs, and on the left hand margin we have some fresh who think this will be fun to do anyway.",
    "start": "237750",
    "end": "246140"
  },
  {
    "text": "Um, we welcome e- we welcome everybody, um- but in principle this is uh, graduate level class.",
    "start": "246140",
    "end": "253205"
  },
  {
    "text": "You know, that doesn't mean we want to fail people out, we'd like everyone to succeed but also like graduate level class.",
    "start": "253205",
    "end": "260295"
  },
  {
    "text": "Um- we'd like you to- you know, take some initiative in your success. Meaning, if there are things that you need to know to",
    "start": "260295",
    "end": "266900"
  },
  {
    "text": "do the assignments and you don't know them, um- then you should be taking some initiative to find some tutorials,",
    "start": "266900",
    "end": "273755"
  },
  {
    "text": "come to office hours and talk to people and get any help you need and learn to sort of for any holes in your knowledge.",
    "start": "273755",
    "end": "281615"
  },
  {
    "text": "Okay. So here's the plan for today. Um- so that was the course information update.",
    "start": "281615",
    "end": "287280"
  },
  {
    "text": "So you know, is- this is sort of, in some sense you know machine learning neural nets intro- Just to",
    "start": "287280",
    "end": "293030"
  },
  {
    "text": "try and make sure everyone else is up to speed on all of this stuff. So I'll talk a little bit about classification, um,",
    "start": "293030",
    "end": "299509"
  },
  {
    "text": "introduce neural networks, um, little detour into named Entity Recognition, then sort of show a model of doing um",
    "start": "299510",
    "end": "308580"
  },
  {
    "text": "Window- Word Window classification and then the end part, we sort of then dive deeper into what kind of tools we",
    "start": "308580",
    "end": "317030"
  },
  {
    "text": "need to learn neural networks and so today um we're gonna go through um somewhere between review and primer of matrix calculus and then that will",
    "start": "317030",
    "end": "329060"
  },
  {
    "text": "lead into next time's lecture where it's talking more about backpropagation and computation graphs.",
    "start": "329060",
    "end": "337040"
  },
  {
    "text": "So, yeah. So this material was especially the part at the end.",
    "start": "337040",
    "end": "342755"
  },
  {
    "text": "You know for some people it'll seem really babyish if- it's the kind of stuff you do every week, um,",
    "start": "342755",
    "end": "349430"
  },
  {
    "text": "for other people it um- might seem impossibly difficult but hopefully for a large percentage of you in the middle",
    "start": "349430",
    "end": "356300"
  },
  {
    "text": "this will be kind of a useful review of doing this kind of matrix calculus and the kind of things that we hope that you can do on homework two.",
    "start": "356300",
    "end": "366125"
  },
  {
    "text": "Um, okay. So um, yeah. So sorry if I'm boring some people.",
    "start": "366125",
    "end": "372000"
  },
  {
    "text": "If you sat through 229 last quarter you saw um what a classifier was like and hopefully this",
    "start": "372000",
    "end": "379509"
  },
  {
    "text": "will seem familiar but I'm just sort of hoping to try and have everyone in week two sort of up to speed and on roughly the same page.",
    "start": "379510",
    "end": "387160"
  },
  {
    "text": "So here's our classification setup. So we have assumed we have a- training data set where we have these um vector",
    "start": "387160",
    "end": "394800"
  },
  {
    "text": "x um of our x points and then for each one of them we have a class.",
    "start": "394800",
    "end": "401245"
  },
  {
    "text": "So the input might be words or sentences documents or something,",
    "start": "401245",
    "end": "406344"
  },
  {
    "text": "there are d to mention vector, um, the Yi, the labels or classes that we want to",
    "start": "406344",
    "end": "412490"
  },
  {
    "start": "409000",
    "end": "428000"
  },
  {
    "text": "classify to and we've got a set of C classes that we're trying to predict. And so those might be something like the topic of the document,",
    "start": "412490",
    "end": "420770"
  },
  {
    "text": "the sentiment positive or negative um of a document or later we'll look a bit more at named entities.",
    "start": "420770",
    "end": "428125"
  },
  {
    "start": "428000",
    "end": "532000"
  },
  {
    "text": "Okay. So if we have that um- for this sort of intuition is we got this vector space which we again have",
    "start": "428125",
    "end": "438569"
  },
  {
    "text": "a 2D picture and we have points in that vector space which correspond to Rx items and what we'd want to do is we'll",
    "start": "438570",
    "end": "447620"
  },
  {
    "text": "look at the ones in our training sample and see which ones are green and red for our two classes here and then we want to sort of learn",
    "start": "447620",
    "end": "455810"
  },
  {
    "text": "a line that could divide between the green and the red ones as best as possible and that learned line is our classifier.",
    "start": "455810",
    "end": "465669"
  },
  {
    "text": "So on traditional machine learning or statistics we have the sort of XI vectors that are data items that are purely fixed but",
    "start": "465670",
    "end": "474860"
  },
  {
    "text": "we're going to then multiply those XI by",
    "start": "474860",
    "end": "480245"
  },
  {
    "text": "some estimated weight vector and that estimated weight vector will then go into a classification decision.",
    "start": "480245",
    "end": "488215"
  },
  {
    "text": "And the classifier that I'm showing here is a softmax classifier which is almost identical but not quite to",
    "start": "488215",
    "end": "495050"
  },
  {
    "text": "logistic regression classifier which you should've seen in CS 109 or a stats",
    "start": "495050",
    "end": "500090"
  },
  {
    "text": "class or something like that which is giving a probability of different classes.",
    "start": "500090",
    "end": "506110"
  },
  {
    "text": "Okay. And in particular if you've got a softmax classifier or a logistic- logistic regression classifier,",
    "start": "506110",
    "end": "515195"
  },
  {
    "text": "these are what are called linear classifiers. So the decision boundary between two classes here",
    "start": "515195",
    "end": "521630"
  },
  {
    "text": "is a line in some suitably high-dimensional space. So it's a plane or a hyperplane once you've got a bigger expecter.",
    "start": "521630",
    "end": "530709"
  },
  {
    "text": "Okay. So here's our softmax classifier. Um, and there are sort of two parts to that.",
    "start": "530710",
    "end": "537815"
  },
  {
    "start": "532000",
    "end": "721000"
  },
  {
    "text": "So in the- in the weight matrix double U we have a row corresponding to each class and then for",
    "start": "537815",
    "end": "547600"
  },
  {
    "text": "that row we're sort of dot-producting it with our data point vector XI and that's giving us a kind of a score for",
    "start": "547600",
    "end": "557170"
  },
  {
    "text": "how likely it is that the example belongs to that class and then we're running that through a softmax function and just as we saw on week one,",
    "start": "557170",
    "end": "567190"
  },
  {
    "text": "the softmax takes a bunch of numbers and turn them into a probability distribution.",
    "start": "567190",
    "end": "572825"
  },
  {
    "text": "Does that makes sense to people? People remember that from last week? Good so far?",
    "start": "572825",
    "end": "578264"
  },
  {
    "text": "Okay. Um, I'm not gonna go to this in detail but I mean,",
    "start": "578265",
    "end": "583885"
  },
  {
    "text": "ah- essentially this is what the logistic regression does as well.",
    "start": "583885",
    "end": "590285"
  },
  {
    "text": "Um, the difference is that here in this setup we have a weight vector um",
    "start": "590285",
    "end": "598759"
  },
  {
    "text": "for each class whereas what the statisticians doing logistic regression is they say weight,",
    "start": "598760",
    "end": "607460"
  },
  {
    "text": "that gives us one more number of weight vectors than we really need. We can get away for- for C classes,",
    "start": "607460",
    "end": "615649"
  },
  {
    "text": "we can get away with C minus one weight vectors. So in particular if you're doing binary logistic regression you only need one weight vector whereas",
    "start": "615650",
    "end": "623780"
  },
  {
    "text": "this softmax regression formulation you've actually got two weight vectors one for each class.",
    "start": "623780",
    "end": "629115"
  },
  {
    "text": "Um, so there's that sort of a little difference there which we could get into but basically the same. It's just say it's we're either doing softmax or logistic regression, doesn't matter.",
    "start": "629115",
    "end": "638520"
  },
  {
    "text": "Um, so when we're training what we want to do is we want to be able to predict um the correct class.",
    "start": "638520",
    "end": "648865"
  },
  {
    "text": "And so the way we're gonna do that is we're gonna wanna train our model so it gives us highest probability as",
    "start": "648865",
    "end": "655730"
  },
  {
    "text": "possible to the correct class and therefore they'll give us low probability po- as possible um to um the wrong classes.",
    "start": "655730",
    "end": "666170"
  },
  {
    "text": "And so our criterion for doing that is we're going to create this negative log probability um of our assignments and then",
    "start": "666170",
    "end": "676160"
  },
  {
    "text": "we're gonna want to minimize the negative log probability which corresponds to maximizing",
    "start": "676160",
    "end": "681769"
  },
  {
    "text": "the log probability which corresponds to maximizing um the probability. Um.",
    "start": "681770",
    "end": "688155"
  },
  {
    "text": "And, but, um, sort of, pretty soon now, we're gonna start doing more stuff with deep learning frameworks,",
    "start": "688155",
    "end": "697464"
  },
  {
    "text": "in particular PyTorch and you can discover in that, that there's actually a thing called NLL",
    "start": "697465",
    "end": "703540"
  },
  {
    "text": "loss which stands for negative log-likelihood loss. Basically, no one uses it because the more convenient thing to use is what's called",
    "start": "703540",
    "end": "712150"
  },
  {
    "text": "the cross entropy loss and so you'll hear everywhere that we're training with cross entropy loss.",
    "start": "712150",
    "end": "718000"
  },
  {
    "text": "So, I just wanted to briefly mention that and explain what's going on there. Um, so the concept of cross entropy comes from",
    "start": "718000",
    "end": "726430"
  },
  {
    "start": "721000",
    "end": "1016000"
  },
  {
    "text": "baby Information Theory which is about the amount of information theory I know. Um, so, we're assuming that there's some true probability distribution P and our model,",
    "start": "726430",
    "end": "737800"
  },
  {
    "text": "we've built some probability distribution, Q. That's what we've built with our soft-max regression and we want to have",
    "start": "737800",
    "end": "745270"
  },
  {
    "text": "a measure of whether our estimated probability distribution is a good one.",
    "start": "745270",
    "end": "750685"
  },
  {
    "text": "And the way we do it in cross entropy is, we go through the classes and we say,",
    "start": "750685",
    "end": "756370"
  },
  {
    "text": "\"what's the probability of the class according to the true model?\" Using that waiting, we then work out the log of, um,",
    "start": "756370",
    "end": "764320"
  },
  {
    "text": "the probability according to our estimated model and we sum those up and negate it,",
    "start": "764320",
    "end": "770215"
  },
  {
    "text": "and that is our cross entropy measure. Okay. Um, but- so this in general gives you",
    "start": "770215",
    "end": "779635"
  },
  {
    "text": "a measure of sort of information, um, between distributions.",
    "start": "779635",
    "end": "786520"
  },
  {
    "text": "But in our particular case, remember that for each example,",
    "start": "786520",
    "end": "791725"
  },
  {
    "text": "we've sort of assuming that this is a piece of labeled training data so we are saying for that example,",
    "start": "791725",
    "end": "798025"
  },
  {
    "text": "the right answer is class seven. So therefore, our true distribution,",
    "start": "798025",
    "end": "803665"
  },
  {
    "text": "our p is- for this example, it's class seven with probability one and it's class,",
    "start": "803665",
    "end": "811029"
  },
  {
    "text": "um, anything else with probability zero. So if you think about then what happens with this formula,",
    "start": "811030",
    "end": "817929"
  },
  {
    "text": "you've got this summation of all the classes. The PFC is gonna be either one or zero and it's gonna be one",
    "start": "817929",
    "end": "825055"
  },
  {
    "text": "only for the true class here and so what you're left with is, this is going to equal minus the log of qc, um,",
    "start": "825055",
    "end": "834055"
  },
  {
    "text": "for the true class which is sort of what we were then computing in the previous slide.",
    "start": "834055",
    "end": "841464"
  },
  {
    "text": "Okay. So that's- um, yeah. So that's basically where you'd get with cross entropy loss.",
    "start": "841465",
    "end": "848425"
  },
  {
    "text": "Um, but one other concept to mention. So when you have a full data-set of a whole bunch of examples,",
    "start": "848425",
    "end": "856300"
  },
  {
    "text": "the cross entropy loss is then taking the per example average. So, I guess it's what information theory people sometimes call the cross entropy rate.",
    "start": "856300",
    "end": "865270"
  },
  {
    "text": "So additionally, factored in there. If you are training it on any examples is that one on in vector that's coming in there.",
    "start": "865270",
    "end": "873025"
  },
  {
    "text": "Okay. Um, okay. Um, so that's cross entropy loss.",
    "start": "873025",
    "end": "879865"
  },
  {
    "text": "Is that okay? Yeah. [NOISE] There's some- there's some mixture of the actual labels in the ground?",
    "start": "879865",
    "end": "885774"
  },
  {
    "text": "Sure. Good question. Right. So, the simplest case is that your gold data,",
    "start": "885775",
    "end": "892615"
  },
  {
    "text": "someone has hand labeled it and, um, they've labeled one and the rest is zero.",
    "start": "892615",
    "end": "898060"
  },
  {
    "text": "Um, they are- you can think of cases where that isn't the case. I mean, one case is you could believe that human beings",
    "start": "898060",
    "end": "905800"
  },
  {
    "text": "sometimes don't know the right answer so if human beings said, \"I'm not sure whether this should be class three or four,\" you could imagine that we",
    "start": "905800",
    "end": "913870"
  },
  {
    "text": "can make training data where we put probability half on both of them, um, and that wouldn't be a crazy thing to do,",
    "start": "913870",
    "end": "921550"
  },
  {
    "text": "and so then you'd have a true cross entropy loss using more of a distribution.",
    "start": "921550",
    "end": "926680"
  },
  {
    "text": "Um, the case where it's much more commonly used in actual practice is,",
    "start": "926680",
    "end": "934270"
  },
  {
    "text": "there are many circumstances in which people wanna do semi-supervised learning.",
    "start": "934270",
    "end": "939490"
  },
  {
    "text": "So, I guess this is a topic that both my group and Chris Re's group have worked on quite a lot,",
    "start": "939490",
    "end": "944740"
  },
  {
    "text": "where we don't actually have fully labeled data, but we've got some means of guessing what the labels",
    "start": "944740",
    "end": "951340"
  },
  {
    "text": "of the data are and if we try and guess labels of data, well then quite often we'll say,",
    "start": "951340",
    "end": "956845"
  },
  {
    "text": "\"Here's this data right in. It's two-thirds chances this label, but it could be these other four labels,\" and we'd use a probability distribution,",
    "start": "956845",
    "end": "965125"
  },
  {
    "text": "and yeah, then it's more general cross entropy loss. Okay? Um, right. So, um,",
    "start": "965125",
    "end": "972560"
  },
  {
    "text": "that's cross entropy loss, pretty good with. Um, this bottom bit is a little bit different, um,",
    "start": "972560",
    "end": "979425"
  },
  {
    "text": "which is to say, \"Well now we, this is the sort of the full data-set.\" The other thing to notice, um,",
    "start": "979425",
    "end": "985290"
  },
  {
    "text": "when we have a full data- we can have a full data-set of x's,",
    "start": "985290",
    "end": "993285"
  },
  {
    "text": "um, and then we have a full set of weights. Um, where here we're working a row,",
    "start": "993285",
    "end": "1000769"
  },
  {
    "text": "a row vector for the weights for one class, but we're gonna work it out for all classes. So, we can sort of simplify what we're writing",
    "start": "1000770",
    "end": "1008180"
  },
  {
    "text": "here and we can start using matrix notation and just work directly in terms of the matrix w. Okay.",
    "start": "1008180",
    "end": "1016980"
  },
  {
    "start": "1016000",
    "end": "1141000"
  },
  {
    "text": "So for traditional ML optimization, our parameters are these sets of weights,",
    "start": "1016980",
    "end": "1025199"
  },
  {
    "text": "um, for the different classes. So for each of the classes, we have a d-dimensional, um,",
    "start": "1025200",
    "end": "1032084"
  },
  {
    "text": "row vector of weights because we're gonna sort of dot-product wi- with rd, dimensional, input vector.",
    "start": "1032085",
    "end": "1039225"
  },
  {
    "text": "So we have c times d items and our W matrix and those are the parameters of our model.",
    "start": "1039225",
    "end": "1048975"
  },
  {
    "text": "So if we want to learn that model using the ideas of gradient descent,",
    "start": "1048975",
    "end": "1055304"
  },
  {
    "text": "stochastic gradient descent, we're gonna do sort of what we started to talk about last time.",
    "start": "1055305",
    "end": "1060585"
  },
  {
    "text": "We have these set of parameters. We work out, um, the gradient, the partial derivatives of all of these, um,",
    "start": "1060585",
    "end": "1070845"
  },
  {
    "text": "of the loss with respect to all of these parameters and we use that to get a gradient update on our loss function,",
    "start": "1070845",
    "end": "1078840"
  },
  {
    "text": "and we move around the w's, and moving around the w's corresponds to sort of",
    "start": "1078840",
    "end": "1084929"
  },
  {
    "text": "moving this line that separates between the classes and we fiddle that around so as to minimize our loss which corresponds to choosing a line that",
    "start": "1084930",
    "end": "1095490"
  },
  {
    "text": "best separates between the items of the classes in some sense.",
    "start": "1095490",
    "end": "1102045"
  },
  {
    "text": "Okay. So, that's a basic classifier. So the first question is, well,",
    "start": "1102045",
    "end": "1108945"
  },
  {
    "text": "how are things gonna be different with a neural network classifier?",
    "start": "1108945",
    "end": "1115840"
  },
  {
    "text": "Um, so the central observation is that sort of most of the classic classifiers that people used a lot of the time,",
    "start": "1116120",
    "end": "1126405"
  },
  {
    "text": "so that includes things like Naive Bayes models, um, basic support vector machines,",
    "start": "1126405",
    "end": "1132809"
  },
  {
    "text": "Softmax or logistic regressions. They're sort of fairly simple classifiers.",
    "start": "1132810",
    "end": "1140955"
  },
  {
    "text": "In particular those are all linear classifiers which are going to classified by drawing",
    "start": "1140955",
    "end": "1146100"
  },
  {
    "start": "1141000",
    "end": "1363000"
  },
  {
    "text": "a line or in the higher dimensional space by drawing some kind of plane that separates examples.",
    "start": "1146100",
    "end": "1152175"
  },
  {
    "text": "Having a simple classifier like that can be useful in certain circumstances.",
    "start": "1152175",
    "end": "1158235"
  },
  {
    "text": "I mean, that gives you what a machine learning as a high bias classifiers, there's lots of, talk of in CS229,",
    "start": "1158235",
    "end": "1165465"
  },
  {
    "text": "but if you have a data-set, um, that's like this, you can't do a very good job at classifying",
    "start": "1165465",
    "end": "1172050"
  },
  {
    "text": "all the points correctly if you have a high bias classifier because you're gonna only draw a line.",
    "start": "1172050",
    "end": "1178080"
  },
  {
    "text": "So you'd like to have a more powerful classifier. Essentially, what's been powering a lot of the use of",
    "start": "1178080",
    "end": "1186390"
  },
  {
    "text": "deep learning is that in a lot of cases when you have natural signals,",
    "start": "1186390",
    "end": "1191580"
  },
  {
    "text": "so those are things like, um, speech, language, images, and things like that,",
    "start": "1191580",
    "end": "1196620"
  },
  {
    "text": "you have a ton of data so you could learn a quite sophisticated classifier.",
    "start": "1196620",
    "end": "1202440"
  },
  {
    "text": "Um, but representing the classes in terms of the input data is sort of very complex.",
    "start": "1202440",
    "end": "1210179"
  },
  {
    "text": "You could never do it by just drawing a line between the two classes. So, you'd like to use some more complicated kind of classifier.",
    "start": "1210180",
    "end": "1219150"
  },
  {
    "text": "So neural networks, the multi-layer neural networks that we're gonna be starting to get into now,",
    "start": "1219150",
    "end": "1225015"
  },
  {
    "text": "precisely what they do is provide you a way to learn very complex,",
    "start": "1225015",
    "end": "1231480"
  },
  {
    "text": "you know, almost limitlessly complex classifiers. So that if you look at the decisions that they're making in terms of the original space,",
    "start": "1231480",
    "end": "1241364"
  },
  {
    "text": "they can be learning cases like this. Um, I put this- I put the,",
    "start": "1241364",
    "end": "1247049"
  },
  {
    "text": "um, pointer on a couple of the slides here. Um, this- this is a visualization that was done by Andrei Karpathy.",
    "start": "1247050",
    "end": "1255330"
  },
  {
    "text": "He was a PhD student here until a couple of years ago. So this is a little JavaScript, um,",
    "start": "1255330",
    "end": "1260535"
  },
  {
    "text": "app that you can find off his website and it's actually a lot of fun to play with to see what kind of,",
    "start": "1260535",
    "end": "1266385"
  },
  {
    "text": "um, decision boundaries you can get a neural net to come up with. Okay. Um, so for getting- for getting more advanced classification out of,",
    "start": "1266385",
    "end": "1281415"
  },
  {
    "text": "um, a neural net used for natural language, there are sort of two things going- that you can do,",
    "start": "1281415",
    "end": "1289260"
  },
  {
    "text": "that I want to talk about which are in some sense the same thing when it comes down to it.",
    "start": "1289260",
    "end": "1295110"
  },
  {
    "text": "But I'll sort of mention separately at the beginning that one of them is that we",
    "start": "1295110",
    "end": "1301890"
  },
  {
    "text": "have these word vectors and then the second one is that we're gonna build deeper multi-layer networks.",
    "start": "1301890",
    "end": "1309915"
  },
  {
    "text": "Okay. So, at first crucial difference said, um, we already started to see, um,",
    "start": "1309915",
    "end": "1316289"
  },
  {
    "text": "with what we were doing last week is rather than sort of having a word being this is the word house,",
    "start": "1316290",
    "end": "1323595"
  },
  {
    "text": "we instead say house is a vector of real numbers and what we can do is",
    "start": "1323595",
    "end": "1330720"
  },
  {
    "text": "change the vector that corresponds to house in such a way as we can build better classifiers,",
    "start": "1330720",
    "end": "1339030"
  },
  {
    "text": "which means that we are gonna be sort of moving houses representation around the space to capture things that we're interested in like word similarity,",
    "start": "1339030",
    "end": "1347220"
  },
  {
    "text": "analogies, and things like that. So this is actually, you know, kind of a weird idea compared to conventional steps or ML.",
    "start": "1347220",
    "end": "1355830"
  },
  {
    "text": "So rather than saying we just have the parameters w, we also say that all of these word representations are also parameters of our model.",
    "start": "1355830",
    "end": "1367289"
  },
  {
    "start": "1363000",
    "end": "1570000"
  },
  {
    "text": "So, we're actually going to change the representations of words to allow our classifiers to do better.",
    "start": "1367290",
    "end": "1374684"
  },
  {
    "text": "So, we're simultaneously changing the weights and we're changing the representation of words,",
    "start": "1374685",
    "end": "1380289"
  },
  {
    "text": "and we're optimizing both of them at once to try and make our model as, um, good as possible.",
    "start": "1380290",
    "end": "1386410"
  },
  {
    "text": "So, this is the sense in which people often talk about the deep learning models that we're doing representation learning.",
    "start": "1386410",
    "end": "1395210"
  },
  {
    "text": "I sort of said there are two ways, I was going to mention two things. One is this sort of, um,",
    "start": "1395230",
    "end": "1401539"
  },
  {
    "text": "word vector representation learning and then the second one is that we're going to start looking at deeper multi layer neural networks.",
    "start": "1401540",
    "end": "1409160"
  },
  {
    "text": "Um, sort of hidden over here on the slide is the observation that really you can think of word,",
    "start": "1409160",
    "end": "1417034"
  },
  {
    "text": "word vector embedding as just putting your, having a model with one more neural network layer.",
    "start": "1417035",
    "end": "1424280"
  },
  {
    "text": "So, if you imagine that each word was a one hot vector,",
    "start": "1424280",
    "end": "1430280"
  },
  {
    "text": "um, with, for the different word types in your model. So, you had a, uh, you know, 150,000 dimensional vector with the one-hot encoding of different words.",
    "start": "1430280",
    "end": "1440735"
  },
  {
    "text": "Um, then you could say you have a ma-, um, matrix L which is sort of your lexicon matrix and you will pass your one-hot vector for",
    "start": "1440735",
    "end": "1451790"
  },
  {
    "text": "a word through a layer of neural net which multiplies the one-hot vector or L1, the one-hot vector.",
    "start": "1451790",
    "end": "1460925"
  },
  {
    "text": "And since this was a one-hot vector, what that will have the effect of doing is taking out a column of L. So,",
    "start": "1460925",
    "end": "1470525"
  },
  {
    "text": "really, we've got an extra layer of matrix, um, in our neural net and we're learning",
    "start": "1470525",
    "end": "1477215"
  },
  {
    "text": "the parameters of that matrix in the same way as we're learning, um, a deep neural network for other purposes.",
    "start": "1477215",
    "end": "1484909"
  },
  {
    "text": "So, mathematically that completely makes sense and that's sort of a sensible way to think about,",
    "start": "1484910",
    "end": "1491375"
  },
  {
    "text": "um, what you're doing, um, with word embeddings in neural networks. Um, implementation wise, this makes",
    "start": "1491375",
    "end": "1498890"
  },
  {
    "text": "no sense at all and no one does this because it just doesn't make sense to do a matrix multiply when the result of the matrix multiply will be, okay.",
    "start": "1498890",
    "end": "1508100"
  },
  {
    "text": "This is word ID 17, um, sort of, then constructing a one-hot vector of length a 150,000 with a",
    "start": "1508100",
    "end": "1516380"
  },
  {
    "text": "one in position 17 and then doing a matrix multiplied, makes no sense. You just take up, um,",
    "start": "1516380",
    "end": "1522065"
  },
  {
    "text": "column or, or, the row, as we've discussed, 17 of your matrix and that's what everyone actually does.",
    "start": "1522065",
    "end": "1529230"
  },
  {
    "text": "Okay. Here's my one obligatory picture of neurons, um, for the class.",
    "start": "1529230",
    "end": "1535940"
  },
  {
    "text": "So, don't miss it, I'm not going to show it again, all class. Okay. So, the origins [LAUGHTER] of Neural Networks, um,",
    "start": "1535940",
    "end": "1542585"
  },
  {
    "text": "was in some sense to try and construct an artificial neuron that seemed to in",
    "start": "1542585",
    "end": "1550520"
  },
  {
    "text": "some sense kind of capture the kind of computations, um, that go on in human brains.",
    "start": "1550520",
    "end": "1557765"
  },
  {
    "text": "It's a very loose analogy for what was produced but, you know, our model here is these are our,",
    "start": "1557765",
    "end": "1564200"
  },
  {
    "text": "this is our a TB part of our human brains. So, here are neurons, this is a neuron cell here and so,",
    "start": "1564200",
    "end": "1572075"
  },
  {
    "start": "1570000",
    "end": "1636000"
  },
  {
    "text": "what does a neuron consist of. Um, so, up the back, it's got these dendrites, lots of dendrites.",
    "start": "1572075",
    "end": "1579455"
  },
  {
    "text": "Then it's got a cell body and if there's stuff coming in on the dendrites, um,",
    "start": "1579455",
    "end": "1585200"
  },
  {
    "text": "the cell body will become active and then it all starts spiking down this long thing which is called the Axon.",
    "start": "1585200",
    "end": "1592880"
  },
  {
    "text": "So, then these axons lead to the dendrites of a different cell or lots of different cells, right.",
    "start": "1592880",
    "end": "1599299"
  },
  {
    "text": "This one, um, I'm not sure it's shown but some of these are kind of going to different cells.",
    "start": "1599300",
    "end": "1604625"
  },
  {
    "text": "Um, and so, you then have these sort of, um, terminal buttons on the Axon which are kind of close",
    "start": "1604625",
    "end": "1611120"
  },
  {
    "text": "to the dendrites but have a little gap in them and some min-, miracles of biochemistry happen there.",
    "start": "1611120",
    "end": "1616955"
  },
  {
    "text": "So, that's the synapse, of course, which you'll then have sort of activation flowing which goes into the next neuron.",
    "start": "1616955",
    "end": "1623870"
  },
  {
    "text": "So, that was the starting off, um, model that people wanted to try and simulate in computation.",
    "start": "1623870",
    "end": "1630710"
  },
  {
    "text": "So, people came up with this model of an artificial neuron. So, that we have things coming in from other neurons at some level of activations.",
    "start": "1630710",
    "end": "1642050"
  },
  {
    "start": "1636000",
    "end": "1729000"
  },
  {
    "text": "So, that's a number X0, X1, X2. Um, then synapses vary depending on how excitable",
    "start": "1642050",
    "end": "1650690"
  },
  {
    "text": "they are as to how easily they'll let signal cross across the synapse. So, that's being modeled by multiplying them by a weight W0, W1, W2.",
    "start": "1650690",
    "end": "1662675"
  },
  {
    "text": "Then the cell body, sort of correctly, is sort of summing this amount of excitation it's",
    "start": "1662675",
    "end": "1670190"
  },
  {
    "text": "getting from the different dendrites, um, and then it can have its own biases to how likely it is to fire,",
    "start": "1670190",
    "end": "1678320"
  },
  {
    "text": "that's the B. Um, so, we get that and then it has some overall kind of threshold or propensity for firing.",
    "start": "1678320",
    "end": "1686240"
  },
  {
    "text": "So, we sort of stick it through an activation function, um, which will sort of,",
    "start": "1686240",
    "end": "1691280"
  },
  {
    "text": "will determine a firing rate and that will be, um, the signal that's going out on the output axon.",
    "start": "1691280",
    "end": "1697205"
  },
  {
    "text": "So, that was sort of the starting point of that but, you know, really, um,",
    "start": "1697205",
    "end": "1702575"
  },
  {
    "text": "for what we've ended up computing. We just have a little bit of baby math here which actually, um,",
    "start": "1702575",
    "end": "1708890"
  },
  {
    "text": "looks very familiar to the kind of baby math you see in linear algebra and statistics and so it's really no different.",
    "start": "1708890",
    "end": "1717919"
  },
  {
    "text": "So, in particular, um, a neuron can very easily be a Binary Logistic Regression Unit.",
    "start": "1717920",
    "end": "1726380"
  },
  {
    "text": "Um, so that, this is sort of, for logistic regression you're taking for your input X,",
    "start": "1726380",
    "end": "1732800"
  },
  {
    "start": "1729000",
    "end": "2117000"
  },
  {
    "text": "you multiply it by a weight vector. You're adding, um, your, um,",
    "start": "1732800",
    "end": "1738065"
  },
  {
    "text": "bias term and then you're putting it through, um, a non linearity,",
    "start": "1738065",
    "end": "1743990"
  },
  {
    "text": "like the logistic function. Um, and then, so you're calculating a logistic regression,",
    "start": "1743990",
    "end": "1750664"
  },
  {
    "text": "um, inside this sort of neuron model. Um, and so this is the,",
    "start": "1750665",
    "end": "1757535"
  },
  {
    "text": "this is the difference between the soft maximum logistic regression, that I was saying that there is the soft-max for two classes has two sets of parameters.",
    "start": "1757535",
    "end": "1766655"
  },
  {
    "text": "This sort of just has one set of parameters Z and your modeling the two classes by giving the probability of one class from 0 to one,",
    "start": "1766655",
    "end": "1775790"
  },
  {
    "text": "depending on whether the input to logistic regression is highly negative or highly positive.",
    "start": "1775790",
    "end": "1781490"
  },
  {
    "text": "Okay. So, really, we can just say these artificial neurons are sort of like",
    "start": "1781490",
    "end": "1787625"
  },
  {
    "text": "binary logistic regression units or we can make variants of binary logistic regression units by using some different F function.",
    "start": "1787625",
    "end": "1796730"
  },
  {
    "text": "And we'll come back to that again and pretty soon. Okay. Um, well, so that gives us one neuron.",
    "start": "1796730",
    "end": "1804560"
  },
  {
    "text": "So, one neuron is a logistic regression unit for current purposes. So, crucially what we're wanting to do with neural networks is say, well,",
    "start": "1804560",
    "end": "1813410"
  },
  {
    "text": "why only run one logistic regression, why don't we, um, run a whole bunch of logistic regressions at the same time?",
    "start": "1813410",
    "end": "1821960"
  },
  {
    "text": "So, you know, here are our inputs and here's our little logistic regression unit, um,",
    "start": "1821960",
    "end": "1827465"
  },
  {
    "text": "but we could run three logistic regressions at the same time or we can run any number of them.",
    "start": "1827465",
    "end": "1833855"
  },
  {
    "text": "Um, well, that's good but sort of for conventional training of",
    "start": "1833855",
    "end": "1839690"
  },
  {
    "text": "a statistical model which sort of have to determine for those orange outputs of the logistic regression.",
    "start": "1839690",
    "end": "1847865"
  },
  {
    "text": "You know, what we're training each of them to try and capture. We have to have data to predict what they're going to try and capture.",
    "start": "1847865",
    "end": "1856235"
  },
  {
    "text": "And so, the secret of sort of then building bigger neural networks is to say,",
    "start": "1856235",
    "end": "1862865"
  },
  {
    "text": "we don't actually want to decide ahead of time what those little orange logistic regressions are trying to capture.",
    "start": "1862865",
    "end": "1871595"
  },
  {
    "text": "We want the neural network to self-organize, so that those orange logistic regression,",
    "start": "1871595",
    "end": "1878450"
  },
  {
    "text": "um, units learn something useful. And well, what is something useful?",
    "start": "1878450",
    "end": "1885020"
  },
  {
    "text": "Well, our idea is to say, we do actually have some tasks that we want to do.",
    "start": "1885020",
    "end": "1891095"
  },
  {
    "text": "So, we- we have some tasks that we want to do. So maybe, we want to sort of decide whether a movie review is positive or negative,",
    "start": "1891095",
    "end": "1899450"
  },
  {
    "text": "something like sentiment analysis or something like that. There is something we want to do at the end of the day.",
    "start": "1899450",
    "end": "1904670"
  },
  {
    "text": "Um, and we're gonna have, uh, logistic regression classifier there telling us positive or negative.",
    "start": "1904670",
    "end": "1912275"
  },
  {
    "text": "Um, but the inputs to that aren't going to directly be something like words in the document.",
    "start": "1912275",
    "end": "1918784"
  },
  {
    "text": "They're going to be this intermediate layer of logistic regression units and we're gonna train this whole thing to minimize our cross entropy loss.",
    "start": "1918785",
    "end": "1929179"
  },
  {
    "text": "Essentially, what we're going to want to have happen in the back propagation algorithm will do for us,",
    "start": "1929180",
    "end": "1935015"
  },
  {
    "text": "is to say, you things in the middle, it's your job to find some useful way to calculate values from",
    "start": "1935015",
    "end": "1943280"
  },
  {
    "text": "the underlying data such that it'll help our final classifier make a good decision.",
    "start": "1943280",
    "end": "1949715"
  },
  {
    "text": "I mean in particular, you know, back to this picture, you know. The final classifier, its just a linear classifier,",
    "start": "1949715",
    "end": "1958520"
  },
  {
    "text": "a soft-max or logistic regression. It's gonna have a line like this. But if the intermediate classifiers,",
    "start": "1958520",
    "end": "1965900"
  },
  {
    "text": "they are like a word embedding, they can kind of sort of re-represent the space and shift things around.",
    "start": "1965900",
    "end": "1972260"
  },
  {
    "text": "So, they can learn to shift things around in such a way as you're learning a highly non-linear function of the original input space.",
    "start": "1972260",
    "end": "1983190"
  },
  {
    "text": "Okay. Um, and so at that point, it's simply a matter of saying,",
    "start": "1986810",
    "end": "1992430"
  },
  {
    "text": "well, why stop there? Maybe it gets even better if we put in more layers.",
    "start": "1992430",
    "end": "1998085"
  },
  {
    "text": "And this sort of gets us into the area of deep learning and sort of precisely,",
    "start": "1998085",
    "end": "2004399"
  },
  {
    "text": "um, this is, um, that sort of there was- sort of being three comings of neural networks.",
    "start": "2004400",
    "end": "2011179"
  },
  {
    "text": "So the first work in the 50s which is essentially when people had a model of a single neuron",
    "start": "2011180",
    "end": "2018320"
  },
  {
    "text": "like this and then only gradually worked out how it related to more conventional statistics than there was.",
    "start": "2018320",
    "end": "2025965"
  },
  {
    "text": "Um, the second version of neural networks which we saw the 80s and early 90s, um,",
    "start": "2025965",
    "end": "2033220"
  },
  {
    "text": "where people, um, built neural networks like this that had this one hidden layer where a representation could be learned in the middle.",
    "start": "2033220",
    "end": "2041865"
  },
  {
    "text": "But at that time it really wasn't effective. Of all people weren't able to build deeper networks and get them to do anything useful.",
    "start": "2041865",
    "end": "2052849"
  },
  {
    "text": "So you sort of had these neural networks with one hidden layer and so precisely with",
    "start": "2052850",
    "end": "2058040"
  },
  {
    "text": "research that started in- into deep learning that precisely the motivating question is,",
    "start": "2058040",
    "end": "2064715"
  },
  {
    "text": "um, we believe we'll be able to do even more sophisticated, um, classification for more complex tasks.",
    "start": "2064715",
    "end": "2072950"
  },
  {
    "text": "Things like speech recognition and image recognition if we could have a deeper network which will be able to more",
    "start": "2072950",
    "end": "2080960"
  },
  {
    "text": "effectively learn more sophisticated functions of the input which will allow us to do things like recognize sounds of a language.",
    "start": "2080960",
    "end": "2089405"
  },
  {
    "text": "How could we possibly train such a, um, network so they'll work effectively?",
    "start": "2089405",
    "end": "2095210"
  },
  {
    "text": "And that's the kind of thing, um, will go on to, um, more so starting this lecture more so in the next lecture.",
    "start": "2095210",
    "end": "2103055"
  },
  {
    "text": "But before we get to there, um, just to underline it again. So once we have something like this is our,",
    "start": "2103055",
    "end": "2111440"
  },
  {
    "text": "um, layer of a neural network. We have a vector of inputs, we have a vector of outputs and everything is",
    "start": "2111440",
    "end": "2121040"
  },
  {
    "start": "2117000",
    "end": "2794000"
  },
  {
    "text": "connected so that we've got this sort of weights along every one of these black lines.",
    "start": "2121040",
    "end": "2128135"
  },
  {
    "text": "And so we can say A1 is you're taking weights times each component of X1 and adding a bias term,",
    "start": "2128135",
    "end": "2136715"
  },
  {
    "text": "um, and then you're going to be running which is sort of this part and then running it through our non-linearity and that will give us an output.",
    "start": "2136715",
    "end": "2147575"
  },
  {
    "text": "And we're gonna do that for each of A1, A2, and A3. Um, so again, we can kind of regard A is a vector and we can",
    "start": "2147575",
    "end": "2156710"
  },
  {
    "text": "kind of collapse it into this matrix notation for working out the effects of layers.",
    "start": "2156710",
    "end": "2162260"
  },
  {
    "text": "The fully connected layers are effectively matrices of weights, um,",
    "start": "2162260",
    "end": "2167780"
  },
  {
    "text": "and commonly rewrite them like this where we have a bias term as a vector of bias terms.",
    "start": "2167780",
    "end": "2173720"
  },
  {
    "text": "There's sort of a choice there. You can either have an always on import and then the bias terms become part of the weights of a slightly bigger matrix with one extra,",
    "start": "2173720",
    "end": "2184190"
  },
  {
    "text": "uh, one extra either column or row.",
    "start": "2184190",
    "end": "2188670"
  },
  {
    "text": "One extra, a- row, right?",
    "start": "2190810",
    "end": "2196835"
  },
  {
    "text": "Or you can just sort of have them separately within those Bs. Okay. Um, and then the final note here- right?",
    "start": "2196835",
    "end": "2205580"
  },
  {
    "text": "So once we've calculated this part, we always put things through non-linearity which is referred to as",
    "start": "2205580",
    "end": "2214760"
  },
  {
    "text": "the activation function and so something like the logistic transform I showed earlier is an activation function.",
    "start": "2214760",
    "end": "2222395"
  },
  {
    "text": "And this is written as sort of vector in port, um,",
    "start": "2222395",
    "end": "2227660"
  },
  {
    "text": "activation function giving a vector output, and what this always means is that we apply this function element-wise.",
    "start": "2227660",
    "end": "2236060"
  },
  {
    "text": "So we're applying the logistic function which is sort of a naturally a one input one output function like the little graph I showed before.",
    "start": "2236060",
    "end": "2245705"
  },
  {
    "text": "So when we apply that to a vector, we apply it to each element of the vector element-wise.",
    "start": "2245705",
    "end": "2252845"
  },
  {
    "text": "Okay. We will come back very soon to sort of saying",
    "start": "2252845",
    "end": "2259820"
  },
  {
    "text": "more about non-linearities and what non-linearities people actually use.",
    "start": "2259820",
    "end": "2266945"
  },
  {
    "text": "Um, but, you know, something you might be wondering is well, why does he always have these non-linearities",
    "start": "2266945",
    "end": "2273849"
  },
  {
    "text": "and say there has to be an f function there? Why don't we just, um, calculate Z equals WX plus B in one layer and then go",
    "start": "2273850",
    "end": "2282190"
  },
  {
    "text": "on to another layer that also does Z2 equals W2,",
    "start": "2282190",
    "end": "2287250"
  },
  {
    "text": "Z1 plus B and keep on going with layers like that? And there's a very precise reason for that which is if you want",
    "start": "2287250",
    "end": "2296360"
  },
  {
    "text": "to have a neural network learn anything interesting,",
    "start": "2296360",
    "end": "2301540"
  },
  {
    "text": "you have to stick in some function F which is a non-linear function such as the logistic curve I showed before.",
    "start": "2301540",
    "end": "2310365"
  },
  {
    "text": "And the reason for that is that if you're sort of doing",
    "start": "2310365",
    "end": "2316955"
  },
  {
    "text": "linear transforms like WX plus B and then W2 Z1 plus B,",
    "start": "2316955",
    "end": "2323915"
  },
  {
    "text": "W3Z2 plus B and you're doing a sequence of linear transforms.",
    "start": "2323915",
    "end": "2329360"
  },
  {
    "text": "Well, multiple linear transforms just composed to become a linear transform, right?",
    "start": "2329360",
    "end": "2334790"
  },
  {
    "text": "So one linear transform is rotating and stretching the space somehow and you can",
    "start": "2334790",
    "end": "2341135"
  },
  {
    "text": "rotate and stretch the space again but the result of that is just one bigger rotate and stretch of the space.",
    "start": "2341135",
    "end": "2347915"
  },
  {
    "text": "So you don't get any extra power for a classifier by simply having multiple linear transforms.",
    "start": "2347915",
    "end": "2354619"
  },
  {
    "text": "But as soon as you stick in almost any kind of non-linearity,",
    "start": "2354620",
    "end": "2360980"
  },
  {
    "text": "then you get additional power. And so you know in general,",
    "start": "2360980",
    "end": "2366965"
  },
  {
    "text": "what we're doing when we're doing deep networks, um, in the middle of them we're not thinking, \"Ah,",
    "start": "2366965",
    "end": "2374210"
  },
  {
    "text": "it's really important to have non-linearity thinking about probabilities or something like that.\"",
    "start": "2374210",
    "end": "2381845"
  },
  {
    "text": "Our general picture is well, we want to be able to do effective function approximation or curve fitting.",
    "start": "2381845",
    "end": "2390095"
  },
  {
    "text": "We'd like to learn a space like this and we can only do that if we're sort of putting in",
    "start": "2390095",
    "end": "2395750"
  },
  {
    "text": "some non-linearities which allow us to learn these kind of curvy decision, um, patterns.",
    "start": "2395750",
    "end": "2403085"
  },
  {
    "text": "And so- so F is used effectively for doing accurate [NOISE] fu- function approximation or sort of pattern matching as you go along.",
    "start": "2403085",
    "end": "2414630"
  },
  {
    "text": "Okay. You are behind already. Um, okay.",
    "start": "2414880",
    "end": "2420365"
  },
  {
    "text": "So that was the intro to baby neural networks. All good? Any questions?",
    "start": "2420365",
    "end": "2428100"
  },
  {
    "text": "Yes? Yeah, like er, feature one and feature",
    "start": "2428200",
    "end": "2434779"
  },
  {
    "text": "four if- if you multiply it together it's highly indicative of like the label Y, can you get to that product relationship",
    "start": "2434780",
    "end": "2441845"
  },
  {
    "text": "to just say [NOISE] couple of layers that are linear? Um, yes. Good question. So, in conventional stats,",
    "start": "2441845",
    "end": "2449779"
  },
  {
    "text": "you have your basic input features and when people are building something like a logistic regression model by hand,",
    "start": "2449780",
    "end": "2458210"
  },
  {
    "text": "people often say well, something that's really important for classification is",
    "start": "2458210",
    "end": "2463910"
  },
  {
    "text": "looking at the pair of feature four and feature seven. Um, that you know,",
    "start": "2463910",
    "end": "2469625"
  },
  {
    "text": "if both of those are true at the same time something i-important happens and so that's referred to normally in stats as an interaction term,",
    "start": "2469625",
    "end": "2477545"
  },
  {
    "text": "and you can by hand a-add interaction terms to your model. So, essentially a large part of the secret here is having these intermediate layers.",
    "start": "2477545",
    "end": "2489490"
  },
  {
    "text": "They can learn, build interaction terms by themselves. Yeah, so it's sort of, um,",
    "start": "2489490",
    "end": "2496700"
  },
  {
    "text": "automating the search for higher-order terms that you wanna put into your model.",
    "start": "2496700",
    "end": "2502560"
  },
  {
    "text": "Okay. I'll go on, other questions? Okay. Um, so um, yeah.",
    "start": "2506800",
    "end": "2515360"
  },
  {
    "text": "So here's a brief little interlude on a teeny bit more of NLP which is sort of a kind of problem we're gonna to look at for a moment.",
    "start": "2515360",
    "end": "2523430"
  },
  {
    "text": "So this is the task of named entity recognition that I very briefly mentioned last time.",
    "start": "2523430",
    "end": "2528859"
  },
  {
    "text": "So, um, if we have some text, wait, it isn't appearing here.",
    "start": "2528860",
    "end": "2535595"
  },
  {
    "text": "Okay. Uh, okay. If we have some text, something that in all sorts of places people want to do",
    "start": "2535595",
    "end": "2542525"
  },
  {
    "text": "is I'd like to find the names of things that are mentioned.",
    "start": "2542525",
    "end": "2548799"
  },
  {
    "text": "Um and then normally, as well as, finding the names of things you'd actually like to classify them,",
    "start": "2548800",
    "end": "2555920"
  },
  {
    "text": "say it's like to say some of them are organizations, some of them are people,",
    "start": "2555920",
    "end": "2561065"
  },
  {
    "text": "um, some of them are places. And so you know this has lots of uses, you know,",
    "start": "2561065",
    "end": "2566855"
  },
  {
    "text": "people like to track mentions of companies and people and newspapers and things like that. Um, people when they do question-answering that a lot of the time the answers",
    "start": "2566855",
    "end": "2576320"
  },
  {
    "text": "to questions are what we call named entities the names of people, locations, organizations, pop songs,",
    "start": "2576320",
    "end": "2583430"
  },
  {
    "text": "movie names all of those kind of things are named entities. Um, and if you want to sort of start",
    "start": "2583430",
    "end": "2590570"
  },
  {
    "text": "building up a knowledge base automatically from a lot of text, well, what you normally wanna do is get out",
    "start": "2590570",
    "end": "2595730"
  },
  {
    "text": "the named entities and get out relations between them. So this is a common task.",
    "start": "2595730",
    "end": "2601250"
  },
  {
    "text": "So, how can we go about doing that? And a common way of doing that is to say well,",
    "start": "2601250",
    "end": "2608420"
  },
  {
    "text": "we're going to go through the words one at a time and they're gonna be words that are in a context just like they were for word to deck,",
    "start": "2608420",
    "end": "2618035"
  },
  {
    "text": "and what we're gonna do is run a classifier and we're going to assign them a class.",
    "start": "2618035",
    "end": "2623630"
  },
  {
    "text": "So we're gonna say first word is organization, second word is organization, third word isn't a named entity,",
    "start": "2623630",
    "end": "2630440"
  },
  {
    "text": "fourth word is a person, fifth word is a person and continue down. So in running a classification of a word within",
    "start": "2630440",
    "end": "2638300"
  },
  {
    "text": "a position in the text so it's got surrounding words around it. Um and so to say what the entities are",
    "start": "2638300",
    "end": "2647075"
  },
  {
    "text": "many entities are multi-word terms and so the simplest thing you can imagine doing is just say we'll take the sequence that are all classified the",
    "start": "2647075",
    "end": "2655880"
  },
  {
    "text": "same and call that the e-entity Shen Guofang or something like that.",
    "start": "2655880",
    "end": "2660934"
  },
  {
    "text": "There's a reason why that's slightly defective and so what people often use is that BIO encoding,",
    "start": "2660935",
    "end": "2666634"
  },
  {
    "text": "um, that I show on the right but I'll just gonna run ahead and not do that now. Um so, it might seem at first that named entity recognition is trivial because you know,",
    "start": "2666635",
    "end": "2677240"
  },
  {
    "text": "you have company names Google and Facebook are company names. And whenever you see Google or Facebook you just say company and how could you be wrong?",
    "start": "2677240",
    "end": "2687125"
  },
  {
    "text": "But in practice, there's a lot of subtlety and it's easy to be wrong in named entity recognition. So this is sort of just some of the hard cases.",
    "start": "2687125",
    "end": "2694370"
  },
  {
    "text": "So it's often hard to work out the boundaries of an entity. So in this sentence,",
    "start": "2694370",
    "end": "2699994"
  },
  {
    "text": "First National Bank don-donates two vans to Future School of Fort Smith. So, there's presumably the name of a bank there but is it National Bank and the first is",
    "start": "2699994",
    "end": "2710960"
  },
  {
    "text": "just the first word of a sentence which is cap-capitalized like first she ordered some food or something.",
    "start": "2710960",
    "end": "2718160"
  },
  {
    "text": "So kind of unclear what it is. Sometimes it's hard to know whether something's an entity at all.",
    "start": "2718160",
    "end": "2724310"
  },
  {
    "text": "So at the end of this sentence is Future School the name of",
    "start": "2724310",
    "end": "2729455"
  },
  {
    "text": "some exciting kind of 21st-century school or is it just meaning it's a future school that's gonna be built in this town, right?",
    "start": "2729455",
    "end": "2736970"
  },
  {
    "text": "Is it an entity or not at all? Working out the class of an entity is often difficult so to find out more",
    "start": "2736970",
    "end": "2744530"
  },
  {
    "text": "about Zig Ziglar and read features by what class is Zig Ziglar? Kinda hard to tell if you don't know.",
    "start": "2744530",
    "end": "2751369"
  },
  {
    "text": "Um, it's actually a person's name, um, and there are various entities that are ambiguous, right?",
    "start": "2751370",
    "end": "2758869"
  },
  {
    "text": "So Charles Schwab in text is 90% of the time an organization name because there's Charles Schwab Brokerage.",
    "start": "2758870",
    "end": "2768425"
  },
  {
    "text": "Um, but in this particular sentence here, in Woodside where Larry Ellison and Charles Schwab can live discreetly among wooded estates,",
    "start": "2768425",
    "end": "2776524"
  },
  {
    "text": "that is then a reference to Charles Schwab the person. So there's sort of a fair bit of understanding variously that's needed to get it right.",
    "start": "2776524",
    "end": "2785329"
  },
  {
    "text": "Okay. Um, so what are we gonna do with that? And so this suggests, um,",
    "start": "2785330",
    "end": "2792875"
  },
  {
    "text": "what we wanna do is build classifiers for language that work inside a context.",
    "start": "2792875",
    "end": "2800270"
  },
  {
    "start": "2794000",
    "end": "2888000"
  },
  {
    "text": "Um, so you know, in general, it's not very interesting classifying a word",
    "start": "2800270",
    "end": "2805460"
  },
  {
    "text": "outside a context we don't actually do that much in NLP. Um, but once you're in a context, um,",
    "start": "2805460",
    "end": "2811685"
  },
  {
    "text": "then it's interesting to do and named entity recognition is one case there are lots of other places that comes up.",
    "start": "2811685",
    "end": "2818300"
  },
  {
    "text": "I mean, here's a slightly cool one, that there are some words that can mean themselves and their opposite at the same time, right?",
    "start": "2818300",
    "end": "2826190"
  },
  {
    "text": "So to sanction something can either mean to allow something or it can mean to punish people who do",
    "start": "2826190",
    "end": "2832460"
  },
  {
    "text": "things or to seed something can either mean to plant seeds",
    "start": "2832460",
    "end": "2837770"
  },
  {
    "text": "and things that you're seeding the soil or it can take seeds out of something like a watermelon, right?",
    "start": "2837770",
    "end": "2843275"
  },
  {
    "text": "You just need to know the context as to which it is. Okay. So, that suggests the tasks that we can classify a word",
    "start": "2843275",
    "end": "2852195"
  },
  {
    "text": "in its context of neighboring words and any has an example of that. And the question is how might we do that?",
    "start": "2852195",
    "end": "2859530"
  },
  {
    "text": "And a very simple way to do it might be to say, \"Well, we have a bunch of words in a row",
    "start": "2859530",
    "end": "2866145"
  },
  {
    "text": "which each have a word vector from something like word to vec. Um, maybe we could just average",
    "start": "2866145",
    "end": "2872490"
  },
  {
    "text": "those word vectors and then classify the resulting vector. The problem is that doesn't work very well because you lose position information.",
    "start": "2872490",
    "end": "2882075"
  },
  {
    "text": "You don't actually know anymore which of those word vectors is the one that you're meant to be classifying.",
    "start": "2882075",
    "end": "2888270"
  },
  {
    "start": "2888000",
    "end": "3070000"
  },
  {
    "text": "So, a simple way to do better than that is to say, \"Well, why didn't we make a big vector of a word window?\"",
    "start": "2888270",
    "end": "2896190"
  },
  {
    "text": "So, here are words and they each have a word vector, and so to classify the middle word in the context of here plus or minus two words,",
    "start": "2896190",
    "end": "2906960"
  },
  {
    "text": "we're simply going to concatenate these five vectors together and say now we have",
    "start": "2906960",
    "end": "2911970"
  },
  {
    "text": "a bigger vector and let's build a classifier over that vector.",
    "start": "2911970",
    "end": "2917280"
  },
  {
    "text": "So, we're classifying this x window which is then a vector in, ah, 5D if we're using D dimensional word vectors.",
    "start": "2917280",
    "end": "2927150"
  },
  {
    "text": "We can do that um in the kind of way that we did previously which is, um,",
    "start": "2927150",
    "end": "2936525"
  },
  {
    "text": "that we could say, \"Okay, for that big vector we're going to learn w weights",
    "start": "2936525",
    "end": "2943110"
  },
  {
    "text": "and we're put- gonna put it through a softmax classifier, and then we're going to do the decisions.\"",
    "start": "2943110",
    "end": "2949485"
  },
  {
    "text": "Um, that's a perfectly good way to do things and, um, for the purpose of it.",
    "start": "2949485",
    "end": "2956640"
  },
  {
    "text": "What I want to get to in the last part of this is to start looking at my, um, matrix calculus.",
    "start": "2956640",
    "end": "2963240"
  },
  {
    "text": "And you know we could use this model and do a classifier and learn the weights of it and indeed, um,",
    "start": "2963240",
    "end": "2970740"
  },
  {
    "text": "for the handout on the website that we suggest you look at it does",
    "start": "2970740",
    "end": "2975750"
  },
  {
    "text": "do it with a softmax classifier of precisely this kind.",
    "start": "2975750",
    "end": "2981345"
  },
  {
    "text": "Um, but for the example I do in class I try to make it a bit simpler.",
    "start": "2981345",
    "end": "2986940"
  },
  {
    "text": "Um, and I've wanted to do this I think very quickly because I'm fast running out of time. So, one of the famous early papers of neural NLP, um,",
    "start": "2986940",
    "end": "2996150"
  },
  {
    "text": "was this paper by Collobert and Weston which was first an ICML paper in 2008 which actually just a couple of weeks ago,",
    "start": "2996150",
    "end": "3003755"
  },
  {
    "text": "um, won the ICML 2018 test of time award. Um, and then there's a more recent journal version of it 2011.",
    "start": "3003755",
    "end": "3013405"
  },
  {
    "text": "And um, they use this idea of window classification to assign classes like named entities,",
    "start": "3013405",
    "end": "3021880"
  },
  {
    "text": "ti- to words in context, um, but they did it in a slightly different way.",
    "start": "3021880",
    "end": "3028255"
  },
  {
    "text": "So, what they said is, \"Well, we've got these windows and this is one with the, um,",
    "start": "3028255",
    "end": "3035750"
  },
  {
    "text": "location named entity in the middle and this is one without a location entity in the middle.",
    "start": "3035750",
    "end": "3041660"
  },
  {
    "text": "So, what we want to do is have a system that returns a score,",
    "start": "3041660",
    "end": "3047825"
  },
  {
    "text": "and it should return a high score just as a real number in this case and it can should return a low score if it- if there isn't,",
    "start": "3047825",
    "end": "3056960"
  },
  {
    "text": "ah, location name in the middle of the window in this case. So, explicitly the model just return the score.",
    "start": "3056960",
    "end": "3065105"
  },
  {
    "text": "So, if you had the top level of your neural network a, and you just then dot product did with a vector u,",
    "start": "3065105",
    "end": "3073430"
  },
  {
    "start": "3070000",
    "end": "3308000"
  },
  {
    "text": "you then kind of with that final dot product, you just return a real number.",
    "start": "3073430",
    "end": "3079295"
  },
  {
    "text": "They use that as the basis of their classifier. So in full glory, what you had is you had this window of words,",
    "start": "3079295",
    "end": "3087950"
  },
  {
    "text": "you looked up a word vector for each word, you then, um, multiplied that the, the- well you",
    "start": "3087950",
    "end": "3095690"
  },
  {
    "text": "concatenated the word vectors for the window. You multiplied them by a matrix and edited a bias to get",
    "start": "3095690",
    "end": "3102680"
  },
  {
    "text": "a second hidden layer which is a and then you multiply that by a final vector and that gave you a score for the window and you",
    "start": "3102680",
    "end": "3111710"
  },
  {
    "text": "wanted the score to be large if it was the location and small, if it wasn't a location.",
    "start": "3111710",
    "end": "3118859"
  },
  {
    "text": "So, in this sort of pretend example where we have four dimensional word vectors,",
    "start": "3118860",
    "end": "3124900"
  },
  {
    "text": "um, that's meaning you know for the window, this is a 20 x 1 vector.",
    "start": "3124900",
    "end": "3131244"
  },
  {
    "text": "Um, for calculating the next hidden layer we've got an 8 by 20 matrix plus the bias vector.",
    "start": "3131245",
    "end": "3137515"
  },
  {
    "text": "Then, we've got this sort of 8-dimensional second hidden layer and then we are computing a final real number.",
    "start": "3137515",
    "end": "3144205"
  },
  {
    "text": "Okay. Um, and so crucially this is an example of what the question was about.",
    "start": "3144205",
    "end": "3151250"
  },
  {
    "text": "Um, we've put in this extra layer here, right? We could have just said here's a word vector,",
    "start": "3151250",
    "end": "3156620"
  },
  {
    "text": "a big word vector of, of context. Let's just stick a softmax or logistic classification on top to say yes or no for location.",
    "start": "3156620",
    "end": "3165455"
  },
  {
    "text": "But by putting in that extra hidden layer precisely this extra hidden layer can calculate",
    "start": "3165455",
    "end": "3171859"
  },
  {
    "text": "non-linear interactions between the input word vectors. So, it can calculate things like if",
    "start": "3171860",
    "end": "3178745"
  },
  {
    "text": "the first word is a word like museum and the second and the second was a word like the preposition in or",
    "start": "3178745",
    "end": "3186710"
  },
  {
    "text": "around then that's a very good signal that this should be, ah, location in the middle position of the window.",
    "start": "3186710",
    "end": "3194900"
  },
  {
    "text": "So, extra layers of a neural network let us calculate these kind of interaction terms between our basic features.",
    "start": "3194900",
    "end": "3202850"
  },
  {
    "text": "Okay. Um, so there's a few more slides here that sort of go through the details of their model,",
    "start": "3202850",
    "end": "3209734"
  },
  {
    "text": "but I'm gonna just skip those for now because I'm a little bit behind. And at the end of it we've just got this score.",
    "start": "3209735",
    "end": "3218120"
  },
  {
    "text": "So this is our model which is the one that I just outlined where we're calculating the score and we're wanting a big score, um, for location.",
    "start": "3218120",
    "end": "3227810"
  },
  {
    "text": "And so, what we're gonna want to do is consider, um, how we can use this model,",
    "start": "3227810",
    "end": "3236405"
  },
  {
    "text": "um, to learn, um, our parameters in a neural network.",
    "start": "3236405",
    "end": "3241580"
  },
  {
    "text": "Um, so in particular, remember it's the same story we've had before. We had a loss function J,",
    "start": "3241580",
    "end": "3248975"
  },
  {
    "text": "and we're wanting to work out, um, the gradient with respect to our current theta parameters of the loss function.",
    "start": "3248975",
    "end": "3257180"
  },
  {
    "text": "Then, we want to sort of subtract a little multiple of that, um,",
    "start": "3257180",
    "end": "3262490"
  },
  {
    "text": "given by the learning rate from our current parameters to get updated parameters, and if we repeatedly do then stochastic",
    "start": "3262490",
    "end": "3269570"
  },
  {
    "text": "gradient descent we'll have better and better parameters which give higher probability to the things",
    "start": "3269570",
    "end": "3275900"
  },
  {
    "text": "that we're actually observing in our training data. So, the thing we want to know is, well,",
    "start": "3275900",
    "end": "3282214"
  },
  {
    "text": "in general how can we do this um, differentiation and work out the gradient of our loss function?",
    "start": "3282215",
    "end": "3290585"
  },
  {
    "text": "And so, I sort of wanted to sort of this the remaining time in this lecture, um, go through how we can do that by hand, um,",
    "start": "3290585",
    "end": "3299270"
  },
  {
    "text": "using math and then that'll lead into sort of discussing and more generally the backpropagation algorithm,",
    "start": "3299270",
    "end": "3306275"
  },
  {
    "text": "um, for the next one. Okay. So, if we're doing um, gradients by hand well we're doing multi-variable calculus, multi-variable derivatives.",
    "start": "3306275",
    "end": "3316700"
  },
  {
    "start": "3308000",
    "end": "3584000"
  },
  {
    "text": "But in particular normally the most useful way to think about this is as doing",
    "start": "3316700",
    "end": "3323089"
  },
  {
    "text": "matrix calculus which means we're directly working with vectors and matrices to work out our gradients,",
    "start": "3323090",
    "end": "3330935"
  },
  {
    "text": "and that that's normally sort of much faster and more convenient for",
    "start": "3330935",
    "end": "3336230"
  },
  {
    "text": "summarizing our neural network layers than trying to do it in a non vectorized way.",
    "start": "3336230",
    "end": "3341660"
  },
  {
    "text": "But that doesn't mean that's the only way to do it. If you're sort of confused about what's going on,",
    "start": "3341660",
    "end": "3347285"
  },
  {
    "text": "sometimes thinking it through in the non vectorized way can be a better way to understand what's going on and,",
    "start": "3347285",
    "end": "3353780"
  },
  {
    "text": "um, make more progress. So, like when, um, last time I did the word2vec um",
    "start": "3353780",
    "end": "3359569"
  },
  {
    "text": "derivatives when I was writing too small on that board, sorry, um, that was doing it in a non vectorized way of working out the weights,",
    "start": "3359570",
    "end": "3368750"
  },
  {
    "text": "talking about them individually. Um, but here we're going to do it with, um, vectors and matrices.",
    "start": "3368750",
    "end": "3374945"
  },
  {
    "text": "And again, look for the lecture notes to cover this material in more detail. In particular, so that no one misses it.",
    "start": "3374945",
    "end": "3382025"
  },
  {
    "text": "Um, let me just clarify what I mean by lecture notes. So, if you look at the course syllabus on the left-hand column, um,",
    "start": "3382025",
    "end": "3389644"
  },
  {
    "text": "there's the slides that you can download and, on straight under the slides, it says lecture notes.",
    "start": "3389645",
    "end": "3395914"
  },
  {
    "text": "That's what I'm meaning by the lecture notes. In the- in the middle column it then has some readings and",
    "start": "3395915",
    "end": "3402530"
  },
  {
    "text": "actually there are some diffe- additional things there that cover similar material. Um, so there's, um,",
    "start": "3402530",
    "end": "3408724"
  },
  {
    "text": "so there's they might be helpful as well. But first the thing that's closest to what I'm about to present,",
    "start": "3408725",
    "end": "3414830"
  },
  {
    "text": "it's the lecture notes that appear immediately under the slides link. Okay. Um, so my hope here, um,",
    "start": "3414830",
    "end": "3423815"
  },
  {
    "text": "my hope here is the following: Um, if you can't remembered how to do single variable calculus,",
    "start": "3423815",
    "end": "3430730"
  },
  {
    "text": "sorry you're basically sunken and might as well leave now. Um, [LAUGHTER] I'm assuming you know how to do single-variable calculus and I'm assuming you know what a um a vector and a matrix is.",
    "start": "3430730",
    "end": "3441245"
  },
  {
    "text": "Um, but you know, um, I sort of hope that even if you never",
    "start": "3441245",
    "end": "3447680"
  },
  {
    "text": "did multi-variable calculus or you can't remember any of it, it's sort of for what we have to do here,",
    "start": "3447680",
    "end": "3454220"
  },
  {
    "text": "not that hard and you can do it. So, here's what, um, what you do.",
    "start": "3454220",
    "end": "3460430"
  },
  {
    "text": "Um, all right. So, if we have a simple function f of x equals x cubed, right.",
    "start": "3460430",
    "end": "3466820"
  },
  {
    "text": "Its gradient, um, and so the gradient is the slope, right? Saying how steep or shallow is the slope of something,",
    "start": "3466820",
    "end": "3473914"
  },
  {
    "text": "and then when we and also saw the direction of slope when we go into multiple dimensions.",
    "start": "3473915",
    "end": "3479075"
  },
  {
    "text": "Um, its gradient is just as derivatives. So, its derivative is 3x squared.",
    "start": "3479075",
    "end": "3484430"
  },
  {
    "text": "Um, so if you're at the point x equals 3, that you know, the sort of this 27 of sloppiness,",
    "start": "3484430",
    "end": "3490415"
  },
  {
    "text": "um, is very steep. Okay. So well, what if we have a function with one output but now it has many inputs?",
    "start": "3490415",
    "end": "3500059"
  },
  {
    "text": "Um, so that we're sort of doing that sort of, um, function that was like the dot products where we're doing the sort of the UTV or WTX,",
    "start": "3500060",
    "end": "3511295"
  },
  {
    "text": "um, to calculate a value. Well, then what we're gonna calculate is",
    "start": "3511295",
    "end": "3516410"
  },
  {
    "text": "a gradient which is a vector of partial derivatives with respect to each input.",
    "start": "3516410",
    "end": "3522815"
  },
  {
    "text": "So, you take, um, the slope of the function as you change x1,",
    "start": "3522815",
    "end": "3529505"
  },
  {
    "text": "the slope of the function as you change x2 through the slope of the, ah,",
    "start": "3529505",
    "end": "3535039"
  },
  {
    "text": "function as you change xn and each of these you can just calculate as if you were doing",
    "start": "3535040",
    "end": "3540710"
  },
  {
    "text": "single variable calculus and you just put them all in a vector and that's then giving you the gradient and then the gradient and multi-dimensional,",
    "start": "3540710",
    "end": "3549920"
  },
  {
    "text": "um, spaces then giving you the direction and slope of a sort of a surface that touches your multi-dimensional, um, f function.",
    "start": "3549920",
    "end": "3559730"
  },
  {
    "text": "Okay. So that's getting a bit scarier, but it gets a little bit scarier than that because if we have a neutral network layer, um,",
    "start": "3559730",
    "end": "3567635"
  },
  {
    "text": "we then have a function which will have n inputs, which are the input neurons,",
    "start": "3567635",
    "end": "3573770"
  },
  {
    "text": "and it will have m outputs. So if that's the case, um,",
    "start": "3573770",
    "end": "3579260"
  },
  {
    "text": "you then have a matrix of partial derivatives which is referred to as the Jacobian.",
    "start": "3579260",
    "end": "3584765"
  },
  {
    "start": "3584000",
    "end": "4731000"
  },
  {
    "text": "So in the Jacobian, um, you're sort of taking these partial derivatives, um,",
    "start": "3584765",
    "end": "3591695"
  },
  {
    "text": "with respect to each, um, output along the rows and with respect to each input down the columns.",
    "start": "3591695",
    "end": "3600455"
  },
  {
    "text": "And so you're getting these m by n partial derivatives, considering every combination of an output and an input.",
    "start": "3600455",
    "end": "3609620"
  },
  {
    "text": "Um, but again, you can fill in every cell of this matrix just by doing single-variable calculus provided you don't get yourself confused.",
    "start": "3609620",
    "end": "3618545"
  },
  {
    "text": "Okay. Um, then we already saw when we were doing word2vec,",
    "start": "3618545",
    "end": "3624665"
  },
  {
    "text": "that sort of a central tool that we have to use to work out, um, to work out, um,",
    "start": "3624665",
    "end": "3632480"
  },
  {
    "text": "our derivatives of something like a neural network model is we have",
    "start": "3632480",
    "end": "3637490"
  },
  {
    "text": "a sequence of functions that we run up one after another. So, um, in a neural network you're sort of",
    "start": "3637490",
    "end": "3643280"
  },
  {
    "text": "running a sequence of functions one after another. So we have to use, um, the chain rule to work out derivatives when we compose functions.",
    "start": "3643280",
    "end": "3652880"
  },
  {
    "text": "So if we have one variable function, so we have, um, C equals 3y and y equals x squared.",
    "start": "3652880",
    "end": "3660665"
  },
  {
    "text": "If we want to work out, um, the derivative of z with respect to x,",
    "start": "3660665",
    "end": "3667430"
  },
  {
    "text": "we say, aha, that's a composition of two functions. So I use the chain rule.",
    "start": "3667430",
    "end": "3673190"
  },
  {
    "text": "And so that means what I do is I multiply, um, the derivative.",
    "start": "3673190",
    "end": "3678349"
  },
  {
    "text": "So I take, um, dz/dy. So that's 2x, um,",
    "start": "3678350",
    "end": "3685220"
  },
  {
    "text": "wait, [NOISE] Sorry, I said that wrong, right? Is my example wrong?",
    "start": "3685220",
    "end": "3690530"
  },
  {
    "text": "Oh yeah, its right, dz/dy. So yeah, dz/dy is just three. That's, right, that's the derivative of the top line,",
    "start": "3690530",
    "end": "3696790"
  },
  {
    "text": "and then dy/dx is 2x. And I multiply those together and I get the answer, um,",
    "start": "3696790",
    "end": "3704005"
  },
  {
    "text": "that the derivative of z with respect to x is 6x. Okay. Um, this bit then gets a little bit freakier, but it's true.",
    "start": "3704005",
    "end": "3713990"
  },
  {
    "text": "If you have lots of variables at once, you simply multiply the Jacobians and you get the right answer.",
    "start": "3713990",
    "end": "3722465"
  },
  {
    "text": "So if we're now imagining our neural net, well sort of, this is our typical neural net right?",
    "start": "3722465",
    "end": "3727910"
  },
  {
    "text": "So we're doing the neural net layer where we have our weight matrix multiplied their input vector plus,",
    "start": "3727910",
    "end": "3735290"
  },
  {
    "text": "um, the bias, and then we're putting it through a non-linearity. And then if we want to know what's the partials of h with respect to x,",
    "start": "3735290",
    "end": "3744875"
  },
  {
    "text": "we just say, huh, it's a function composition. So this is easy to do. We work out our first Jacobian,",
    "start": "3744875",
    "end": "3751340"
  },
  {
    "text": "which is the partials of h with respect to z, and then we just multiply it by the partials of z with respect to x,",
    "start": "3751340",
    "end": "3758224"
  },
  {
    "text": "and we get the right answer. Um, easy.",
    "start": "3758225",
    "end": "3764135"
  },
  {
    "text": "Um, so here's sort of um an example Jacobian which is a special case that comes up a lot.",
    "start": "3764135",
    "end": "3773660"
  },
  {
    "text": "Um, so it's just good to realize this one which we'll see with our neural net.",
    "start": "3773660",
    "end": "3778849"
  },
  {
    "text": "So well one of the things that we have are these element-wise activation function. So we have h equals f of z.",
    "start": "3778850",
    "end": "3786035"
  },
  {
    "text": "So, um, what is the, um, partial derivative of h with respect to z. Um,",
    "start": "3786035",
    "end": "3794329"
  },
  {
    "text": "well the thing- remember that we sort of apply this element-wise. So we're actually saying hi equals f of zi.",
    "start": "3794330",
    "end": "3802474"
  },
  {
    "text": "So, you know, formally this function has n inputs and n outputs,",
    "start": "3802475",
    "end": "3808460"
  },
  {
    "text": "so it's partial derivatives are going to be an n by n Jacobian. But if we think about what's happening there,",
    "start": "3808460",
    "end": "3816528"
  },
  {
    "text": "um, what we're actually going to find is, sort of, when we're working out the terms of this so we're working out,",
    "start": "3816529",
    "end": "3825010"
  },
  {
    "text": "how does f of zi change as you change zj?",
    "start": "3825010",
    "end": "3830985"
  },
  {
    "text": "Well, if j is not equal to i, it's gonna make no difference at all, right?",
    "start": "3830985",
    "end": "3837410"
  },
  {
    "text": "So if my f function is something like putting it through the logistic function or anything else absolute valuing a number,",
    "start": "3837410",
    "end": "3844160"
  },
  {
    "text": "it's gonna make no difference for the calculation of f of zi if I chains zj because it's just not in the equation.",
    "start": "3844160",
    "end": "3852005"
  },
  {
    "text": "And so, therefore, the only terms that are actually going to occur and be non-zero are the terms where i equals j.",
    "start": "3852005",
    "end": "3862235"
  },
  {
    "text": "So for working out these partial derivatives if i does not equal j, um, it's zero.",
    "start": "3862235",
    "end": "3868300"
  },
  {
    "text": "If i does equal j, then we have to work out a single-variable calculus.",
    "start": "3868300",
    "end": "3874390"
  },
  {
    "text": "What's the derivative, um, of the, um, activation function, um,",
    "start": "3874390",
    "end": "3881290"
  },
  {
    "text": "for- and so this is what, a um, Jacobian looks like for an activation function.",
    "start": "3881290",
    "end": "3889444"
  },
  {
    "text": "It's a diagonal matrix. Everything else is zero, and we thought this activation function,",
    "start": "3889445",
    "end": "3895640"
  },
  {
    "text": "we work out its derivative, and then we calculate that for the difference, um, we have it for the different kind of um, zi values.",
    "start": "3895640",
    "end": "3905630"
  },
  {
    "text": "Okay. Um, so that's a,",
    "start": "3905630",
    "end": "3910970"
  },
  {
    "text": "um, Jacobians for an activation function. What are the other main cases, uh, that we need for a neural network?",
    "start": "3910970",
    "end": "3918410"
  },
  {
    "text": "And these I'll go in through a little bit more slowly in the same lecture notes.",
    "start": "3918410",
    "end": "3923690"
  },
  {
    "text": "But they're kind of similar to what we saw in the very first class. So if we are wanting to work out the partial derivatives of wx plus b with respect to x,",
    "start": "3923690",
    "end": "3934490"
  },
  {
    "text": "um, what we get is w. Um,",
    "start": "3934490",
    "end": "3939000"
  },
  {
    "text": "and if we want to work out the partial derivative of wx plus b with respect to b,",
    "start": "3939580",
    "end": "3947225"
  },
  {
    "text": "um, that means that we get an identity matrix because b is sort of like a 1b, right?",
    "start": "3947225",
    "end": "3954080"
  },
  {
    "text": "It's this almost always on vector, so you're just getting the ones coming out to preserve the b. Um,",
    "start": "3954080",
    "end": "3960455"
  },
  {
    "text": "this was the case, um, that we saw, um, when we were doing the word vectors.",
    "start": "3960455",
    "end": "3967640"
  },
  {
    "text": "That if you have a vector dot product of u and h and you say,",
    "start": "3967640",
    "end": "3973414"
  },
  {
    "text": "what's the partial derivatives of that with respect to u, then you get out h transpose.",
    "start": "3973415",
    "end": "3981530"
  },
  {
    "text": "Um, if you haven't seen those before, um, look at the lecture notes handouts, um,",
    "start": "3981530",
    "end": "3989420"
  },
  {
    "text": "and see if you can compute them and they make sense at home, um, but for the moment we're gonna believe those and use those to",
    "start": "3989420",
    "end": "3998540"
  },
  {
    "text": "see how we can then work out derivatives inside the neural network.",
    "start": "3998540",
    "end": "4004030"
  },
  {
    "text": "Okay. So here's the same neural network we saw before. So we have a window of words,",
    "start": "4004030",
    "end": "4011365"
  },
  {
    "text": "we're looking at word vectors, we're putting it through a hidden layer, and then we're just doing a vector modal, um,",
    "start": "4011365",
    "end": "4017590"
  },
  {
    "text": "vector dot product, you get this final score. And so, what we [NOISE] want to do to be able to train our neural network,",
    "start": "4017590",
    "end": "4025840"
  },
  {
    "text": "is we want to find out how- how s changes depending on all the parameters of the model.",
    "start": "4025840",
    "end": "4035425"
  },
  {
    "text": "The x, the w, the b, the u. Um, and so we want to work out partial derivatives of S with respect",
    "start": "4035425",
    "end": "4044320"
  },
  {
    "text": "to each of those because we can then work out okay if you move b up,",
    "start": "4044320",
    "end": "4050110"
  },
  {
    "text": "um, the score gets better, which is good if it's actually a plus in the middle,",
    "start": "4050110",
    "end": "4056350"
  },
  {
    "text": "and therefore we'll want to nudge up, um, elements of b appropriately. Okay, um, and so I'm just doing the gradient with",
    "start": "4056350",
    "end": "4065050"
  },
  {
    "text": "respect to the score here and I skipped over those couple of slides. Um, so if you're just, sort of,",
    "start": "4065050",
    "end": "4070930"
  },
  {
    "text": "staring at this picture and say, well, how do I work out the partial derivative of s with respect to b?",
    "start": "4070930",
    "end": "4078400"
  },
  {
    "text": "Um, probably it doesn't look obvious. So the first thing here that you want to do is sort of break up",
    "start": "4078400",
    "end": "4084520"
  },
  {
    "text": "the eq- equations into simple pieces that compose together, right? So you have the input x,",
    "start": "4084520",
    "end": "4092170"
  },
  {
    "text": "and then that goes into z equals wx plus b, and then you compose that with the next thing.",
    "start": "4092170",
    "end": "4099580"
  },
  {
    "text": "So h equals f of z, our activation function, and then this h goes into the next thing of s equals uTh.",
    "start": "4099580",
    "end": "4107500"
  },
  {
    "text": "So we've got these sequence of functions. And pretty much you want to break things up as much as you can.",
    "start": "4107500",
    "end": "4115480"
  },
  {
    "text": "I mean, I could have broken this up even further. I could have said z1 equals wx,",
    "start": "4115480",
    "end": "4121000"
  },
  {
    "text": "z equals z1 plus b. Um, it turns out um, but if you've just got things added and subtracted,",
    "start": "4121000",
    "end": "4128200"
  },
  {
    "text": "you can sort of do that in one step because that sort of pathway separating the, when doing the derivatives,",
    "start": "4128200",
    "end": "4134170"
  },
  {
    "text": "but sort of anything else that composes together you want to pull it out for the pieces. Okay. So now our neural net is doing a sequence of function compositions.",
    "start": "4134170",
    "end": "4145605"
  },
  {
    "text": "And when we say, okay, we know how to do that, the chain rule. So if you wanna work out the partials of s with respect to b,",
    "start": "4145605",
    "end": "4153975"
  },
  {
    "text": "it's just going to be the product of the derivatives of each step along the way.",
    "start": "4153975",
    "end": "4159960"
  },
  {
    "text": "So it's gonna be um the partial of s with respect to h times h with",
    "start": "4159960",
    "end": "4165130"
  },
  {
    "text": "respect to z times z with respect to b and that will give us the right answer.",
    "start": "4165130",
    "end": "4170529"
  },
  {
    "text": "So then all we have to do is actually compute that. Um, so, I think this just sort of",
    "start": "4170530",
    "end": "4178580"
  },
  {
    "text": "shows okay we're taking the partials of each step of that composition. Okay. So now we want to compute that.",
    "start": "4178580",
    "end": "4184975"
  },
  {
    "text": "And so this is where I'm going to sort of use the Jacobians that I sort of asserted without much proof on the preceding slide.",
    "start": "4184975",
    "end": "4194415"
  },
  {
    "text": "Okay. So first of all um we have ds/dh.",
    "start": "4194415",
    "end": "4200280"
  },
  {
    "text": "Well, that's just the dot product of two vectors. So the um, the Jacobian for that is just h transpose.",
    "start": "4200280",
    "end": "4211070"
  },
  {
    "text": "Okay, that's a start. Then we have um h equals f of z. Well, that's the activation function.",
    "start": "4211070",
    "end": "4218505"
  },
  {
    "text": "So the um Jacobian of that is this diagonal matrix made of the element wise um derivative of the function",
    "start": "4218505",
    "end": "4227615"
  },
  {
    "text": "f. And then we have the partial of z with respect to b and that's the bit that comes out as the identity matrix.",
    "start": "4227615",
    "end": "4237080"
  },
  {
    "text": "And so that's then giving us our calculation of the partial of s with respect to b.",
    "start": "4237080",
    "end": "4245950"
  },
  {
    "text": "And so we can see that the- the identity matrix sort of goes",
    "start": "4246460",
    "end": "4251890"
  },
  {
    "text": "away so we end up with this composition of ht times f prime of z.",
    "start": "4251890",
    "end": "4257905"
  },
  {
    "text": "Okay, suppose we then want to go on and compute now the partial of s with respect to w?",
    "start": "4257905",
    "end": "4265960"
  },
  {
    "text": "Well, as starting off point is exactly the same chain rule that we work out each of the stages.",
    "start": "4265960",
    "end": "4273640"
  },
  {
    "text": "So, that first of all you're working",
    "start": "4273640",
    "end": "4279120"
  },
  {
    "text": "out the z from the wx part then putting it through the non linearity,",
    "start": "4279120",
    "end": "4284500"
  },
  {
    "text": "then doing the dot product of the vectors. So that part is the same.",
    "start": "4284500",
    "end": "4289699"
  },
  {
    "text": "And what you should notice is that if you compare the partial of s with respect to w versus s with respect to b,",
    "start": "4289700",
    "end": "4299620"
  },
  {
    "text": "most of them are the same and it's only the part at the end that's different.",
    "start": "4299620",
    "end": "4305510"
  },
  {
    "text": "And that sort of makes sense in terms of our neural net right? That when we had our neural net that the w and the b were coming in here.",
    "start": "4305510",
    "end": "4317369"
  },
  {
    "text": "And once you've sort of done some stuff with them you're putting things through the same activation function and doing the same dot product to create a score.",
    "start": "4317370",
    "end": "4327230"
  },
  {
    "text": "So, you're sort of doing the same calculations that you're then composing with. So it sort of makes sense that you should be getting",
    "start": "4327230",
    "end": "4333675"
  },
  {
    "text": "the same derivatives that are occur- same partial derivatives that occurring at that point.",
    "start": "4333675",
    "end": "4340270"
  },
  {
    "text": "Oops. And so effectively you know",
    "start": "4340270",
    "end": "4346410"
  },
  {
    "text": "these partial dev- derivatives correspond to the computations in the neural network that are above where w and b are.",
    "start": "4346410",
    "end": "4355650"
  },
  {
    "text": "And so those are commonly referred to as delta, note delta which is different from partial derivative d. And so",
    "start": "4355650",
    "end": "4364880"
  },
  {
    "text": "delta is referred to as the error signal and neural network talk. So, it's the what you're calculating as",
    "start": "4364880",
    "end": "4372520"
  },
  {
    "text": "the partial derivatives above the parameters that you are working out the partial derivatives with respect to.",
    "start": "4372520",
    "end": "4379885"
  },
  {
    "text": "So, a lot of the secret as we'll see next time, a lot of the secret of what happens with backpropagation is",
    "start": "4379885",
    "end": "4391240"
  },
  {
    "text": "just we want to do efficient computation in the sort of way that's computer science people like to do efficient computation.",
    "start": "4391240",
    "end": "4399525"
  },
  {
    "text": "And so precisely what we want to notice is that there is one error signal that comes from above and we want to compute it once.",
    "start": "4399525",
    "end": "4408510"
  },
  {
    "text": "And then reuse that when calculating both partial derivatives with respect to w and with b.",
    "start": "4408510",
    "end": "4416075"
  },
  {
    "text": "Okay. So there's sort of two things to still do.",
    "start": "4416075",
    "end": "4423100"
  },
  {
    "text": "So one is well, it'd be kind of useful to know what the partial derivative",
    "start": "4423100",
    "end": "4429989"
  },
  {
    "text": "of s with respect to w actually looks like. I mean, is that a number, a vector,",
    "start": "4429990",
    "end": "4435065"
  },
  {
    "text": "a matrix, a three-dimensional tensor? And then we actually want to work out its values",
    "start": "4435065",
    "end": "4442000"
  },
  {
    "text": "and to work out its values we're going to still have to work out the partial derivative of z with respect to",
    "start": "4442000",
    "end": "4448640"
  },
  {
    "text": "w. But if first of all we just try and work out its shape,",
    "start": "4448640",
    "end": "4453755"
  },
  {
    "text": "what kind of shape does it have? And this is actually sort of a bit tricky and is",
    "start": "4453755",
    "end": "4460900"
  },
  {
    "text": "sort of a dirty underbelly of doing this kind of matrix calculus. So, since our weight vector is an n by m matrix,",
    "start": "4460900",
    "end": "4471060"
  },
  {
    "text": "the end result of the partial of s with respect to w is we have a function with",
    "start": "4471060",
    "end": "4477870"
  },
  {
    "text": "n times m inputs all of the elements of w and simply one output which is our score.",
    "start": "4477870",
    "end": "4485995"
  },
  {
    "text": "So, that makes it sound like according to what I said before we should have a one by n times m Jacobian.",
    "start": "4485995",
    "end": "4494380"
  },
  {
    "text": "But it turns out that's not really what we want, right? Because what we wanted to do is use what we calculate",
    "start": "4494380",
    "end": "4501449"
  },
  {
    "text": "inside this stochastic gradient descent update algorithm.",
    "start": "4501450",
    "end": "4507380"
  },
  {
    "text": "And if we're doing this with sort of like to have",
    "start": "4507380",
    "end": "4512469"
  },
  {
    "text": "the old weight matrix and we'd like to subtract a bit format to get a new weight matrix.",
    "start": "4512470",
    "end": "4519130"
  },
  {
    "text": "So, be kind of nice if the shape of our Jacobian was the same shape as w. And so we-",
    "start": "4519130",
    "end": "4529465"
  },
  {
    "text": "we and in general what you always want to do with neural nets is follow what we call the shape convention which",
    "start": "4529465",
    "end": "4537500"
  },
  {
    "text": "is we're going to sort of represent the Jacobian so it's in the same shape as the inputs.",
    "start": "4537500",
    "end": "4545875"
  },
  {
    "text": "And this whole thing is kind of the- the bad part of the bad part of doing matrix calculus.",
    "start": "4545875",
    "end": "4556105"
  },
  {
    "text": "Like there's a lot of inconsistency as to how people represent matrix calculus. That in general if you just go to different fields like",
    "start": "4556105",
    "end": "4563030"
  },
  {
    "text": "economics and physics some people use a numerator convention. Some people use a denominator convention.",
    "start": "4563030",
    "end": "4568085"
  },
  {
    "text": "We're using neither of those. We're going to use this shape convention so we match the shape of the input so it makes it easy to do our weight updates.",
    "start": "4568085",
    "end": "4576655"
  },
  {
    "text": "Okay. So. Right. So that's what we want the answer to look like.",
    "start": "4576655",
    "end": "4583125"
  },
  {
    "text": "So, then the final thing we need to do to work out on the partial of s with respect to w is we have the error signal delta",
    "start": "4583125",
    "end": "4590320"
  },
  {
    "text": "that's gonna be part of the answer and then we want to work out the partial of z with respect to w. Well,",
    "start": "4590320",
    "end": "4599415"
  },
  {
    "text": "um what's that going to be. Well, it turns out and I'm about to be",
    "start": "4599415",
    "end": "4607690"
  },
  {
    "text": "saved by the bell here since I'm down to two minutes left. Um, it turns out that what we end up with for that is we take",
    "start": "4607690",
    "end": "4617070"
  },
  {
    "text": "the product of the partial- the product of delta times x.",
    "start": "4617070",
    "end": "4623250"
  },
  {
    "text": "So effectively we've got the local error signal above w. And then we have the inputs x and we are working out an outer product of them.",
    "start": "4623250",
    "end": "4633715"
  },
  {
    "text": "And the sort of way to think about this is sort of for the w's.",
    "start": "4633715",
    "end": "4639565"
  },
  {
    "text": "You know, we've got the elements of the w matrix, these different connections between our neurons.",
    "start": "4639565",
    "end": "4646780"
  },
  {
    "text": "And so each one of these is connecting one output to one input.",
    "start": "4646780",
    "end": "4652170"
  },
  {
    "text": "And so we're going to be sort of making this n by m matrix of our partial derivatives that are going to be the product of",
    "start": "4652170",
    "end": "4660700"
  },
  {
    "text": "the error signal for the appropriate output multiplied by input and those goes give us the partial derivatives.",
    "start": "4660700",
    "end": "4670505"
  },
  {
    "text": "I'm skipping ahead quickly in my last one minute.",
    "start": "4670505",
    "end": "4675980"
  },
  {
    "text": "Okay. So uh, right. So this is sort of what I said have used",
    "start": "4675980",
    "end": "4681430"
  },
  {
    "text": "the shape con- convention. I'm going to skip that. Okay. So, um, I- I ran out of time a teeny bit at the end but I mean,",
    "start": "4681430",
    "end": "4690770"
  },
  {
    "text": "I think hopefully that's conveyed most of the idea of how you can sort of use the chain rule and",
    "start": "4690770",
    "end": "4698630"
  },
  {
    "text": "work out the derivatives and work them out in terms of these vector and matrix derivatives.",
    "start": "4698630",
    "end": "4706400"
  },
  {
    "text": "[NOISE] And essentially what we wanna do for backpropagation is to say how can we do ah get a computer to do this automatically for us and to do it efficiently.",
    "start": "4706400",
    "end": "4717205"
  },
  {
    "text": "And that's what's sort of the deep learning frameworks like TensorFlow and PyTorch do and how you can do that.",
    "start": "4717205",
    "end": "4723110"
  },
  {
    "text": "We'll look at more next time.",
    "start": "4723110",
    "end": "4725600"
  }
]