[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "Hi, everyone. I'm Abby. If you weren't here last week, I'm the head TA of this course.",
    "start": "4700",
    "end": "10190"
  },
  {
    "text": "And this is the second [NOISE] of three lectures that I'm going to be giving on RNNs and related topics.",
    "start": "10190",
    "end": "17180"
  },
  {
    "text": "Okay. So, welcome to week four. Today, we're going to be learning about vanishing gradients,",
    "start": "17360",
    "end": "22960"
  },
  {
    "text": "and some more complex types of RNNs. So, before we get started, I've got a few announcements.",
    "start": "22960",
    "end": "28000"
  },
  {
    "text": "Uh, the first announcement is that assignment four is released today, uh,",
    "start": "28000",
    "end": "33150"
  },
  {
    "text": "it's due Thursday of next week, not Tuesday, so that means you have two days more to do it than you did for all the other homeworks.",
    "start": "33150",
    "end": "39795"
  },
  {
    "start": "34000",
    "end": "186000"
  },
  {
    "text": "And the reason for that is assignment four is probably more work than the other homework so far, so don't be surprised by that.",
    "start": "39795",
    "end": "45415"
  },
  {
    "text": "Uh, assignment four is all about Neural Machine Translation. Uh, we're gonna learn about NMT on Thursday's lecture this week.",
    "start": "45415",
    "end": "52135"
  },
  {
    "text": "And, uh, this is really exciting, because actually CS 224 has never had an NMT assignment before,",
    "start": "52135",
    "end": "57600"
  },
  {
    "text": "so this is all new this year, and you're gonna be the first year students who are going to be doing an NMT assignment. Uh, something else that's different about",
    "start": "57600",
    "end": "64909"
  },
  {
    "text": "assignment four is that you're going to be using Azure, which is, uh, a cloud computing service, in order to train your NMT systems on a virtual machine with a GPU.",
    "start": "64910",
    "end": "73145"
  },
  {
    "text": "And, uh, this is necessary in order to be able to do it in a reasonable amount of time. So, I have a warning which is,",
    "start": "73145",
    "end": "79250"
  },
  {
    "text": "if you're a person who perhaps doesn't have, ah, learnt- a lot of experience working on remote machines, so for example if you're not very familiar with SSH,",
    "start": "79250",
    "end": "86359"
  },
  {
    "text": "or tmux, or remote text editing, then I advise you to budget some extra time for assignment four,",
    "start": "86360",
    "end": "91579"
  },
  {
    "text": "because that's probably gonna take you a little while to set up and get used to. So, again, I'm going to emphasize,",
    "start": "91580",
    "end": "97280"
  },
  {
    "text": "do get started early on assignment four, because, uh, the NMT system takes about four hours to train on your virtual machine,",
    "start": "97280",
    "end": "103775"
  },
  {
    "text": "so you really can't start it the night before and expect to get it in on time. Uh, and assignment four is really quite a lot more complicated than assignment three.",
    "start": "103775",
    "end": "111245"
  },
  {
    "text": "So, uh, don't get into a false sense of security if you found assignment three easy. Um, so Thursday's slides on NMT are ready on the website today,",
    "start": "111245",
    "end": "120640"
  },
  {
    "text": "so you can even start looking at it today if you want- if you wanna get started on assignment four early.",
    "start": "120640",
    "end": "125910"
  },
  {
    "text": "Uh, so, I have a few more announcements, uh, on the subject of projects, uh, next week's lectures are going to be all about projects.",
    "start": "125910",
    "end": "131860"
  },
  {
    "text": "So, you're going to hear about, uh, question answering, and the default final projects, and then you're also gonna get some tips about how you might,",
    "start": "131860",
    "end": "138620"
  },
  {
    "text": "uh, choose and define your own custom projects. So, it's fine if you're not thinking about a project this week, that's okay.",
    "start": "138620",
    "end": "144180"
  },
  {
    "text": "You can delay until next week to start thinking about it for the first time. But if you are a person who is already thinking about your projects,",
    "start": "144180",
    "end": "149630"
  },
  {
    "text": "for example, if you're trying to choose your custom projects, uh, then you should check out the website's project page, because it has quite a lot of information about, uh,",
    "start": "149630",
    "end": "156230"
  },
  {
    "text": "how to choose your projects, and also some inspiration. And that includes- we've collected some, uh,",
    "start": "156230",
    "end": "161645"
  },
  {
    "text": "project ideas from various members of the Stanford AI Lab. So, these are faculty and PhD students and postdocs,",
    "start": "161645",
    "end": "168155"
  },
  {
    "text": "who have ideas for, uh, NLP deep learning projects that they would like CS224n students such as yourself to work on.",
    "start": "168155",
    "end": "174150"
  },
  {
    "text": "So, especially, if you're looking to maybe get into research later, this is a really great opportunity, uh,",
    "start": "174150",
    "end": "179180"
  },
  {
    "text": "to work with someone in the Stanford AI Lab, and maybe get some mentorship as well. Okay. So here's an overview.",
    "start": "179180",
    "end": "186840"
  },
  {
    "start": "186000",
    "end": "220000"
  },
  {
    "text": "Uh, last week, we learned about Recurrent Neural Networks, um, we learned about why they're really great for Language Modeling.",
    "start": "186840",
    "end": "192725"
  },
  {
    "text": "And today, we're gonna learn about some problems with RNNs, and we're gonna learn about how to fix them. And this is gonna motiva- motivate us to learn about some more complex RNN variants.",
    "start": "192725",
    "end": "202035"
  },
  {
    "text": "And then, uh, next lecture on Thursday, we're going to, uh, have some more application-based, uh, contents,",
    "start": "202035",
    "end": "207570"
  },
  {
    "text": "so we are going to be learning about Neural Machine Translation, which is a really important task in, uh, NLP and deep learning, and in particular,",
    "start": "207570",
    "end": "213830"
  },
  {
    "text": "we're gonna learn about this architecture called sequence-to-sequence with attention. But in more detail,",
    "start": "213830",
    "end": "220080"
  },
  {
    "start": "220000",
    "end": "276000"
  },
  {
    "text": "today's lecture, uh, first, we are going to learn about the vanishing gradient problem. And this is gonna motivate us to learn about two new types of",
    "start": "220080",
    "end": "226220"
  },
  {
    "text": "RNN called Long Short-Term Memory, and Gated Recurrent Unit. We're also going to learn about some other kind of",
    "start": "226220",
    "end": "232940"
  },
  {
    "text": "miscellaneous fixes for the vanishing gradient problem, or the exploding gradient problem. Uh, so in particular,",
    "start": "232940",
    "end": "238370"
  },
  {
    "text": "we're going to learn about gradient clipping, which is, uh, fairly simple, but quite important. Uh, we're also going to learn about skip connections,",
    "start": "238370",
    "end": "244710"
  },
  {
    "text": "which is a fairly new neural architecture, which tries to, uh, fix the vanishing gradient problem. [NOISE] And then, at the end of the lecture,",
    "start": "244710",
    "end": "251640"
  },
  {
    "text": "we're gonna learn about some more fancy RNN variants such as, uh, bidirectional RN- RNNs, those are the ones which go not just left to right,",
    "start": "251640",
    "end": "257780"
  },
  {
    "text": "but also right to left, and we're going to learn about multi-layer RNNs. And that's when you stack multiple RNNs on top of each other.",
    "start": "257780",
    "end": "264880"
  },
  {
    "text": "So, there's a lot of important definitions today. Um, so, you're gonna find that the information in this lecture is pretty important for",
    "start": "264880",
    "end": "271160"
  },
  {
    "text": "assignment four and probably for your project as well. Okay. So, let's get started thinking about the vanishing gradients.",
    "start": "271160",
    "end": "280250"
  },
  {
    "start": "276000",
    "end": "382000"
  },
  {
    "text": "Uh, so here we have an RNN, with, let say, ah, four steps, and suppose that we have some kind of loss that's, uh,",
    "start": "280250",
    "end": "286955"
  },
  {
    "text": "J4, and that's computed based on the four hidden states. So, let's suppose we're interested in asking what is the derivative of this loss J4,",
    "start": "286955",
    "end": "296300"
  },
  {
    "text": "with respect to the hidden states, uh, h1, the first hidden state? So, I'm representing that with this, uh,",
    "start": "296300",
    "end": "303389"
  },
  {
    "text": "blue arrow notation to kind of represent how we have to make the gradients flow backwards in order to complete this.",
    "start": "303390",
    "end": "309070"
  },
  {
    "text": "So, if we're interested in what this gradient is, we can apply the chain rule and say, \"Well, it's the product of the, uh,",
    "start": "309070",
    "end": "315035"
  },
  {
    "text": "gradient of the loss with respect to h2, and then gradient of h2, with respect to h1.\"",
    "start": "315035",
    "end": "320975"
  },
  {
    "text": "And then, similarly, we can decompose that again using the chain rule, and we can do it again.",
    "start": "320975",
    "end": "327255"
  },
  {
    "text": "So, what we've done here is we've decomposed the gradient that we were interested in, into the products of these various intermediate gradients.",
    "start": "327255",
    "end": "335375"
  },
  {
    "text": "And in particular, we're seeing all these ht by ht minus 1, uh, adjacent gradients of the hidden states.",
    "start": "335375",
    "end": "341975"
  },
  {
    "text": "So, the thing I want to ask you is, what happens if these gradients are small?",
    "start": "341975",
    "end": "347130"
  },
  {
    "text": "Given that there's a lot of them, uh, what happens if they're small in magnitude? So, the overall problem of the vanishing gradient problem,",
    "start": "347130",
    "end": "356865"
  },
  {
    "text": "is that when these gradients are small, then our overall gradient is gonna get smaller and smaller,",
    "start": "356865",
    "end": "362525"
  },
  {
    "text": "as it back propagates further. Because the accumulated gradient is the product of all of these intermediate gradients.",
    "start": "362525",
    "end": "369150"
  },
  {
    "text": "And when you multiply something by something small, then the whole thing gets smaller. So, that's what I'm representing here with these, uh,",
    "start": "369150",
    "end": "375220"
  },
  {
    "text": "smaller and smaller blue arrows going backwards. So, that's the general idea of the vanishing gradient problem.",
    "start": "375220",
    "end": "381565"
  },
  {
    "text": "Here's a slightly more formal definition. So, if you remember from last time, uh, if we have a null RNN,",
    "start": "381565",
    "end": "388095"
  },
  {
    "start": "382000",
    "end": "882000"
  },
  {
    "text": "then the hidden state ht is computed as a function of the previous hidden state ht minus 1,",
    "start": "388095",
    "end": "393490"
  },
  {
    "text": "and the current input xt. Uh, so you might remember in the previous lecture we said that xt were one-hot vectors representing words,",
    "start": "393490",
    "end": "401075"
  },
  {
    "text": "and then ET is the embedding. Uh, this lecture we're going to be, uh, getting rid of that detail, and we're just gonna be thinking very abstractly about",
    "start": "401075",
    "end": "407060"
  },
  {
    "text": "an RNN that has some kind of input xt, and xt is just any kind of vector. Probably a dense vector,",
    "start": "407060",
    "end": "412259"
  },
  {
    "text": "but you know, it could be words or not. It could be one-hot or dense. Uh, but that's just the input.",
    "start": "412260",
    "end": "417810"
  },
  {
    "text": "So, that's the, uh, the definition that we learned last time for Vanilla RNNs.",
    "start": "417810",
    "end": "423365"
  },
  {
    "text": "So, this means that the derivative of ht, hidden state on step t with respect to the previous hidden state,",
    "start": "423365",
    "end": "428479"
  },
  {
    "text": "uh, is this expression here. Uh, so this is just an application of the chain rule, and, uh,",
    "start": "428480",
    "end": "433880"
  },
  {
    "text": "if you looked long enough or refer back to the backprop lecture you'll see, uh, that that make sense. So, in particular, we're, um,",
    "start": "433880",
    "end": "440585"
  },
  {
    "text": "multiplying by Wh at the end, uh, because we have the multiplication of Wh and ht minus 1 on the inside.",
    "start": "440585",
    "end": "447400"
  },
  {
    "text": "Okay. So, if you remember, on the previous slide, we were thinking about what's the gradient of the loss on some step,",
    "start": "447400",
    "end": "453650"
  },
  {
    "text": "step i I'd say, with respect to a hidden state hj, on some previous step j.",
    "start": "453650",
    "end": "458795"
  },
  {
    "text": "And maybe J is quite a few steps before i. So, we can now write this,",
    "start": "458795",
    "end": "464235"
  },
  {
    "text": "uh, in the following way. So just by applying the chain rule, now on the first line we're saying that this derivative that we're interested in",
    "start": "464235",
    "end": "471365"
  },
  {
    "text": "can be decomposed into the derivative with respect to step i, which is kind of the last step, and then do all of those intermediate gradients of the adjacent hidden states as well.",
    "start": "471365",
    "end": "480264"
  },
  {
    "text": "So, that- that first slide is just exactly the same thing as we were looking at on the, uh, the picture, uh, the diagram on the previous slide.",
    "start": "480265",
    "end": "488160"
  },
  {
    "text": "Okay. And then, given that we figured out what is, uh, dht by dht minus one,",
    "start": "488300",
    "end": "494030"
  },
  {
    "text": "ah, further on the slide, then we can just substitute that in. So, what we're finding is that this overall gradient that we're",
    "start": "494030",
    "end": "499370"
  },
  {
    "text": "interested in, in particular, has this term, uh, Wh, the weight matrix, and it's, uh,",
    "start": "499370",
    "end": "506790"
  },
  {
    "text": "multiplied by itself, i minus j times, because there's i minus j many steps between, uh,",
    "start": "506790",
    "end": "512534"
  },
  {
    "text": "step j and step i, which is the- the distance that we're traveling with this gradient. So, the big problem here is,",
    "start": "512535",
    "end": "519755"
  },
  {
    "text": "if this weight matrix Wh is small, then this term is gonna get vanishingly small,",
    "start": "519755",
    "end": "525445"
  },
  {
    "text": "exponentially small, as i and j get further apart. So, to give this a little more detail, uh,",
    "start": "525445",
    "end": "533740"
  },
  {
    "text": "we can think about the, uh, L2 matrix norms of all of these matrices, right? And, uh, as a- as a- uh, as a- sorry.",
    "start": "533740",
    "end": "543839"
  },
  {
    "text": "I'm- it's a known fact of, uh, L2 norms that you have this, um, inequality that's the, uh,",
    "start": "543840",
    "end": "550605"
  },
  {
    "text": "norm of the products of some matrices is less and equal to the product of the norms of the matrices.",
    "start": "550605",
    "end": "555740"
  },
  {
    "text": "So, in particular, we're seeing that the norm of this gradient that we're interested in, is less than or equal to, uh,",
    "start": "555740",
    "end": "561905"
  },
  {
    "text": "the product i minus j many times of the norm of the weight matrix Wh. So, this is what we mean when we say we're concerned about Wh being small,",
    "start": "561905",
    "end": "570415"
  },
  {
    "text": "because if it's small, then the thing on the left has to be exponentially small. So in particular in this,",
    "start": "570415",
    "end": "576000"
  },
  {
    "text": "uh, paper that, uh, you can take a look at the bottom if you're interested, um, uh, Pascanu et al showed that if",
    "start": "576000",
    "end": "581960"
  },
  {
    "text": "the largest eigenvalue of the weight matrix Wh is less than one, then this gradient on the left is going to shrink exponentially.",
    "start": "581960",
    "end": "589910"
  },
  {
    "text": "And you can probably see intuitively why this is true. So if, you know, as a simplifying assumption, we suppose that Wh was not a matrix,",
    "start": "589910",
    "end": "596090"
  },
  {
    "text": "but simply a scalar that was just a single number, then you can see why if that number was greater than one,",
    "start": "596090",
    "end": "601760"
  },
  {
    "text": "then the whole thing is gonna explode. And if that number is less than one, then it is going to shrink exponentially as you multiply by the same number again and again.",
    "start": "601760",
    "end": "609070"
  },
  {
    "text": "Uh, so you can check out the paper for more details, but here, uh, the bound is one,",
    "start": "609070",
    "end": "614960"
  },
  {
    "text": "partially because we have the sigmoid nonlinearity. And that's, uh, based on the bounds of what we know as the,",
    "start": "614960",
    "end": "621139"
  },
  {
    "text": "uh, norm of the sigmoid function to be. So, uh, this shows you why if the, uh,",
    "start": "621140",
    "end": "629399"
  },
  {
    "text": "Wh matrix is small, or if its largest eigenvalue was small, then we're going to have vanishing gradients. And similarly, if you check out the paper,",
    "start": "629400",
    "end": "635930"
  },
  {
    "text": "you can see that there's a similar proof, uh, relating if the largest eigenvalue is greater than one,",
    "start": "635930",
    "end": "640975"
  },
  {
    "text": "to having exploding gradients. So that's when the gradients get bigger and bigger, as you backprop further.",
    "start": "640975",
    "end": "647240"
  },
  {
    "text": "Okay. So hopefully I've convinced you that vanishing gradients is a phenomenon that happens in our norms.",
    "start": "648270",
    "end": "655240"
  },
  {
    "text": "But I haven't yet said why this is a problem. So, why should we view this as a bad thing,",
    "start": "655240",
    "end": "660339"
  },
  {
    "text": "if the gradients are getting larger and larger, or smaller and smaller as you backprop? So here's, uh, here's a picture that might illustrate why it's a bad thing.",
    "start": "660340",
    "end": "668795"
  },
  {
    "text": "So, uh, as before, suppose that we're thinking about, what's the derivative of the loss on",
    "start": "668795",
    "end": "674130"
  },
  {
    "text": "the fourth step with respect to the first hidden state? And we have this situation where the gradient is getting smaller and smaller as it goes backwards.",
    "start": "674130",
    "end": "681560"
  },
  {
    "text": "But then, think about what is the gradient of let's say the loss in the second step also with respect to the first hidden state.",
    "start": "681560",
    "end": "688270"
  },
  {
    "text": "So I'm representing that with the orange arrows. And what my point is here, is that the magnitude of the gradient signal from close by,",
    "start": "688270",
    "end": "697765"
  },
  {
    "text": "is a lot bigger than the magnitude of the gradient signal from far away. And this means that when you update your model weights,",
    "start": "697765",
    "end": "705790"
  },
  {
    "text": "the signal that you're getting from close by is gonna be so much bigger than the signal from far away, that essentially you're only going to learn,",
    "start": "705790",
    "end": "712585"
  },
  {
    "text": "you're only going to optimize with respect to these nearby effects and not the long-term effects. So you're gonna, you're gonna lose the long-term effects, er, inside the,",
    "start": "712585",
    "end": "722199"
  },
  {
    "text": "the nearby effects. Any questions about this, yeah?",
    "start": "722200",
    "end": "727385"
  },
  {
    "text": "So, uh, where they say there that you do actual updates. You know, there are actually some that are multiple chains, not just one chain.",
    "start": "727385",
    "end": "735235"
  },
  {
    "text": "So the nearer term should cover it. Sorry, what's the last part? The nearer term should have a larger effect considering you're",
    "start": "735235",
    "end": "742405"
  },
  {
    "text": "updating the sum of the weights over different chains. Okay. So I think, ah, the observation was that,",
    "start": "742405",
    "end": "749035"
  },
  {
    "text": "given that, for example, in Language Modeling you might be summing over multiple losses. There is a loss in every step and you sum all of them and that's your overall loss.",
    "start": "749035",
    "end": "755860"
  },
  {
    "text": "Then you do want to update more with respect to the nearby losses than the far losses. So I think, uh, yeah,",
    "start": "755860",
    "end": "761949"
  },
  {
    "text": "so if the design of your objective function is that it's the sum of the loss in every step, then you do want to, uh, weight all of them equally.",
    "start": "761950",
    "end": "768325"
  },
  {
    "text": "I think, uh, my point was more about, what is the influence of, uh, the action of the weight matrix at this early stage.",
    "start": "768325",
    "end": "775285"
  },
  {
    "text": "What is its influence on a loss that's nearby? And what is its influence on a loss that's far away? Um, and due to, uh,",
    "start": "775285",
    "end": "782875"
  },
  {
    "text": "the dynamics of how the vanishing gradient, uh, problem works, then, uh, the influence on the loss that's far away",
    "start": "782875",
    "end": "789250"
  },
  {
    "text": "is gonna be much less than the influence nearby. And I'm gonna give some more linguistics examples later of why you might want to learn,",
    "start": "789250",
    "end": "795040"
  },
  {
    "text": "uh, the connections that are farther away. So essentially the problem is, in situations where you do want to learn the connection",
    "start": "795040",
    "end": "800260"
  },
  {
    "text": "between something that happens early and something that happens later, then you're going to be unable to learn that connection. Uh, so we'll see some motivating examples in a minute.",
    "start": "800260",
    "end": "808330"
  },
  {
    "text": "Any other questions on this? Yeah?",
    "start": "808330",
    "end": "816130"
  },
  {
    "text": "Um, I'm getting confused like, why are you talking about like dh, dj dh. Uh, it's like H parameter, like, are we going-",
    "start": "816130",
    "end": "826509"
  },
  {
    "text": "Yeah. from- Okay. That's a great question. So you're asking why are we interested in some kind of dj by",
    "start": "826509",
    "end": "832510"
  },
  {
    "text": "dh given that we're not updating H. H is an activation not a weight. Um, so the reason why we're thinking about that,",
    "start": "832510",
    "end": "840520"
  },
  {
    "text": "is because when you think about what is dj by dw, which is a thing that we're going to update.",
    "start": "840520",
    "end": "845800"
  },
  {
    "text": "That's always gonna be in terms of dj by dh at some point, right? So if we're thinking about W, you know,",
    "start": "845800",
    "end": "852040"
  },
  {
    "text": "and how it acts on, uh, the transmission from h_1 to h_2, then dj4 by W in that position is going to have to go through dj4 by dh_2.",
    "start": "852040",
    "end": "861355"
  },
  {
    "text": "So if we're getting vanishing gradients, uh, as we back propagate further, then it's kind of like a bottleneck.",
    "start": "861355",
    "end": "867190"
  },
  {
    "text": "Then you're certainly going to have vanishing gradients as they affect, uh, the recurrence matrix there, and indeed the matrix that's applied to the inputs.",
    "start": "867190",
    "end": "875540"
  },
  {
    "text": "Okay. I'm gonna move off now. Uh, so another way to explain why vanishing gradients is a problem,",
    "start": "878880",
    "end": "886300"
  },
  {
    "start": "882000",
    "end": "971000"
  },
  {
    "text": "is you can think of it as, uh, a gradient. You can think of it as a measure of the effect of the past on the future.",
    "start": "886300",
    "end": "893185"
  },
  {
    "text": "So we've already talked about this little bit. Uh, gradient is like saying, if I change, uh, this weight or this activation a little bit,",
    "start": "893185",
    "end": "899575"
  },
  {
    "text": "then how much and how does it affect this thing in the future. So in particular, if our gradient is becoming vanishingly small over longer distances,",
    "start": "899575",
    "end": "908650"
  },
  {
    "text": "let say from step T, step T to step T plus N, then we can't tell whether in one of two situations.",
    "start": "908650",
    "end": "915790"
  },
  {
    "text": "So the first situation is maybe there's no dependency between step T and step T plus N in the data.",
    "start": "915790",
    "end": "922165"
  },
  {
    "text": "So perhaps we're learning on a task where, in the task there truly is no collect, uh,",
    "start": "922165",
    "end": "927190"
  },
  {
    "text": "connection or relationship to be learned between what happens on step T and what happens on step T plus N. So there truly is nothing to be",
    "start": "927190",
    "end": "933580"
  },
  {
    "text": "learned and it's actually correct that there should be, you know, small gradients with respect to those two things.",
    "start": "933580",
    "end": "938800"
  },
  {
    "text": "But the second possibility is that, yes, that is a true connection between those two things in the data and in the task.",
    "start": "938800",
    "end": "944964"
  },
  {
    "text": "And really ideally we should be learning that connection. Um, but we have the wrong parameters in our model to capture this thing,",
    "start": "944965",
    "end": "952480"
  },
  {
    "text": "and therefore that is why the, the gradients are small. Because the model doesn't see them as connected. So we are not learning the true dependency between these two things.",
    "start": "952480",
    "end": "960940"
  },
  {
    "text": "And the problem with the vanishing gradient problem is that it's, we're unable to tell in this situation, which of these two situations we're in.",
    "start": "960940",
    "end": "967795"
  },
  {
    "text": "Okay. So this is all pretty theoretical. I think this example should make it a little more, more clear why the vanishing gradient problem is bad.",
    "start": "967795",
    "end": "974589"
  },
  {
    "start": "971000",
    "end": "1228000"
  },
  {
    "text": "So, uh, last week we learned about RNN-Language Models. And if you remember Language Modeling is a task where you have some kind of",
    "start": "974590",
    "end": "980680"
  },
  {
    "text": "text and then you're trying to predict what word should come next. So, uh, here's a piece of text. It says, um, ''When she tried to print her tickets,",
    "start": "980680",
    "end": "988420"
  },
  {
    "text": "she found that the printer was out of toner. She went to the stationery store to buy more toner. It was very overpriced.",
    "start": "988420",
    "end": "994149"
  },
  {
    "text": "After installing the toner into the printer, she finally printed her,'' and can someone shout out what word you think should come next?",
    "start": "994150",
    "end": "1000524"
  },
  {
    "text": "Tickets. Tickets. Yes, exactly. So that was easy for you to do because, uh, it makes sense logically that if that was the thing she was trying to do,",
    "start": "1000524",
    "end": "1007274"
  },
  {
    "text": "that's the thing she's gonna do once she's gone the whole detour for the, for the toner. Um, so the question is,",
    "start": "1007275",
    "end": "1013830"
  },
  {
    "text": "can RNN-Language Models easily answer this question. Would they do well at this particular Language Modeling example?",
    "start": "1013830",
    "end": "1020429"
  },
  {
    "text": "So for an RNN-Language Model to do well at this kind of example, then they need to learn from this kind of example in the Training Data.",
    "start": "1020429",
    "end": "1027360"
  },
  {
    "text": "So if it solves the example in the Training Data, then the RNN-Language Model will need to model the dependency.",
    "start": "1027360",
    "end": "1032475"
  },
  {
    "text": "Learn the connection between the appearance of the word tickets early on on the 7th step, and the target word tickets at the end.",
    "start": "1032475",
    "end": "1040199"
  },
  {
    "text": "But if we have the vanishing gradient problem, then these gradients, uh, if they know the step,",
    "start": "1040200",
    "end": "1045855"
  },
  {
    "text": "the, the last step with respect to the early step, it's gonna be very small because it's, it's a fairly long distance, right?",
    "start": "1045855",
    "end": "1051120"
  },
  {
    "text": "And this means that the model is going to be unable to learn this dependency, easily or at all. So if the model can't learn this kind of dependency during training,",
    "start": "1051120",
    "end": "1059340"
  },
  {
    "text": "then the model is going to be unable to predict similar kinds of long distance dependencies at test-time.",
    "start": "1059340",
    "end": "1064845"
  },
  {
    "text": "Okay, here's another example. Um, here's a piece of text.",
    "start": "1064845",
    "end": "1070200"
  },
  {
    "text": "Uh, the text says and this isn't a full sentence. This is just a partial sentence. It says, the writer of the books, blank.",
    "start": "1070200",
    "end": "1076935"
  },
  {
    "text": "And I'm gonna give you two options. It's either, the writer of the books is or the writer of the books are.",
    "start": "1076935",
    "end": "1083325"
  },
  {
    "text": "So, uh, again shout out which one do you think it is, is or are? Is. Is, that's right. So, uh, the correct answer,",
    "start": "1083325",
    "end": "1090929"
  },
  {
    "text": "a correct possible continuation of the sentence would be, uh, the writer of the books is planning a sequel. I can't think of a continuation that goes the writer of the books are,",
    "start": "1090930",
    "end": "1098909"
  },
  {
    "text": "that would be, uh, grammatically correct. So the reason why I'm bringing up this example,",
    "start": "1098910",
    "end": "1104655"
  },
  {
    "text": "is because this shows a kind of tension between, uh, two things called, uh, syntactic recency and sem- uh, sequential recency.",
    "start": "1104655",
    "end": "1112725"
  },
  {
    "text": "So syntactic recency is the idea that in order to correctly predict the next word should be more is than are,",
    "start": "1112725",
    "end": "1120780"
  },
  {
    "text": "is that the word writer is the kind of syntactically close word here. So we say the writer of the books is because it's the writer is.",
    "start": "1120780",
    "end": "1128640"
  },
  {
    "text": "So you can see this as the word writer and is, are, uh, syntactically close. Because if you looked at the dependency paths for example,",
    "start": "1128640",
    "end": "1135975"
  },
  {
    "text": "then there would be a short path in that tree. So by contrast, se- sequential recency is the,",
    "start": "1135975",
    "end": "1145155"
  },
  {
    "text": "uh, simpler concepts of how close words are just in the sentence as a sequence of words.",
    "start": "1145155",
    "end": "1150960"
  },
  {
    "text": "So in this example, books and are, are very sequentially recent because they're right next to each other. So the reason I'm bringing this up is because,",
    "start": "1150960",
    "end": "1158475"
  },
  {
    "text": "the second one would be incorrect but it's kind of a tempting option. Because if you're mostly only paying attention to things that happened recently,",
    "start": "1158475",
    "end": "1166590"
  },
  {
    "text": "um, then you might get distracted and think, \"Oh, the books are, that sounds right.\" So the problem here is that RNN-Language Models",
    "start": "1166590",
    "end": "1175500"
  },
  {
    "text": "are better at learning from sequential recency than sicta- syntactic recency.",
    "start": "1175500",
    "end": "1181170"
  },
  {
    "text": "And this is partially due, due to the vanishing gradient problem. Because especially perhaps, if your syntactically,",
    "start": "1181170",
    "end": "1187289"
  },
  {
    "text": "uh, related word is actually kind of far away, then it might get really hard to use the information from the syntactically recent word,",
    "start": "1187290",
    "end": "1194355"
  },
  {
    "text": "especially if there's a lot of strong signal from the sequentially recent word. So, uh, there are some papers that show that RNN-Language Models make this kind of error,",
    "start": "1194355",
    "end": "1203520"
  },
  {
    "text": "of saying are, rather than is. Uh, they make this kind of error more often than you would like, uh, especially if you have multiple of these distracting words such as books, uh,",
    "start": "1203520",
    "end": "1211860"
  },
  {
    "text": "in between, uh, the word you're trying to predict and the true word that you should be, uh, referring to.",
    "start": "1211860",
    "end": "1217900"
  },
  {
    "text": "Okay, any questions on this? All right, moving on.",
    "start": "1219470",
    "end": "1227490"
  },
  {
    "text": "So, we briefly mentioned that exploding gradients, uh, is a problem. So, I'm briefly going to justify why is exploding gradients a problem,",
    "start": "1227490",
    "end": "1234960"
  },
  {
    "start": "1228000",
    "end": "1333000"
  },
  {
    "text": "and why does it, uh, what does it look like? [NOISE] So, the reason why exploding gradients are a problem,",
    "start": "1234960",
    "end": "1240015"
  },
  {
    "text": "is if you remember this is how SGD works. Uh, we say that the new parameters of the model, which we represent by Theta,",
    "start": "1240015",
    "end": "1246495"
  },
  {
    "text": "is equal to the old premises, and then you take some step in the direction of negative gradients because you're trying to minimize the loss of J.",
    "start": "1246495",
    "end": "1254040"
  },
  {
    "text": "So, the problem is if your gradient gets really big, uh, then your SGD update step is going to become really big too.",
    "start": "1254040",
    "end": "1261890"
  },
  {
    "text": "So, you're going to be taking a very big step, and you're going to be drastically changing your model parameters, Theta.",
    "start": "1261890",
    "end": "1267169"
  },
  {
    "text": "And this means that you can end up with some bad updates. We end up taking too large a step.",
    "start": "1267170",
    "end": "1273075"
  },
  {
    "text": "And we're changing the parameters too much. And this means that, uh, we kind of take a big step,",
    "start": "1273075",
    "end": "1278145"
  },
  {
    "text": "and we end up in some, uh, area where the parameters are actually very bad. Uh, with example the- for example,",
    "start": "1278145",
    "end": "1285450"
  },
  {
    "text": "they might have a much larger loss than they had before. So, in the worst case, this can often manifest as seeing, uh,",
    "start": "1285450",
    "end": "1292755"
  },
  {
    "text": "infinities or NaNs, not a number in your network when you're training it in practice.",
    "start": "1292755",
    "end": "1297920"
  },
  {
    "text": "[NOISE] So, this can happen because if you take such a big step that maybe you update your parameters so much that now they're infinity,",
    "start": "1297920",
    "end": "1305445"
  },
  {
    "text": "or minus infinity, something like that, then you're gonna have all of these infinities within your activations as well, and then all of your losses are going to be infinity,",
    "start": "1305445",
    "end": "1312195"
  },
  {
    "text": "and the whole thing just isn't going to work, at all. So, it's very annoying when this happens, and unfortunately it happens, uh, fairly often.",
    "start": "1312195",
    "end": "1318465"
  },
  {
    "text": "And if it does then you have to essentially restart training from some earlier checkpoint before you got the NaNs and the infinities because there's",
    "start": "1318465",
    "end": "1324480"
  },
  {
    "text": "no kind of salvaging it from its new state. [NOISE] So, what's the solution to this exploding gradient problem?",
    "start": "1324480",
    "end": "1330899"
  },
  {
    "text": "[NOISE] Uh, the solution is actually pretty simple and it's this technique called gradient clipping.",
    "start": "1330900",
    "end": "1336315"
  },
  {
    "start": "1333000",
    "end": "1698000"
  },
  {
    "text": "So, the main idea of gradient clipping, [NOISE] is that if the norm of your gradient is",
    "start": "1336315",
    "end": "1341610"
  },
  {
    "text": "greater than some threshold and the threshold is a hyperparameter that you choose. uh, then you want to scale down that gradient,",
    "start": "1341610",
    "end": "1349110"
  },
  {
    "text": "um, before you apply the SGD update. So, the intuition is yo- you're still gonna take a step in the same direction.",
    "start": "1349110",
    "end": "1355410"
  },
  {
    "text": "But you're gonna make sure that it's a smaller step. [NOISE] So, here, um, I've got a screenshot of some pseudocode from, uh,",
    "start": "1355410",
    "end": "1361995"
  },
  {
    "text": "the related paper that, uh, proposed gradient clipping, or at least some version of gradient clipping. [NOISE] And, um, it's pretty simple as you can see.",
    "start": "1361995",
    "end": "1368640"
  },
  {
    "text": "Uh, g hat is the vector which is the, uh, derivative of the error with respect to the premises,",
    "start": "1368640",
    "end": "1374475"
  },
  {
    "text": "and it's saying that if the norm of this gradient is greater than the threshold's, then you just scale it down.",
    "start": "1374475",
    "end": "1380070"
  },
  {
    "text": "But the important thing to note is that it's still pointing in the same direction, it's just a smaller step.",
    "start": "1380070",
    "end": "1386289"
  },
  {
    "text": "So, here's a picture to show how that might work out in practice. And, uh, this is a diagram from the, uh,",
    "start": "1386420",
    "end": "1393105"
  },
  {
    "text": "deep learning textbook which is also linked on [NOISE] the website. So, what's going on here, is that, uh,",
    "start": "1393105",
    "end": "1399615"
  },
  {
    "text": "the picture here is the loss surface of a simple RNN. So, they made a very simple RNN that instead of having, uh,",
    "start": "1399615",
    "end": "1407250"
  },
  {
    "text": "a sequence of vectors as the hidden states, it just suppose that each hidden state is simply just a single scalar.",
    "start": "1407250",
    "end": "1412545"
  },
  {
    "text": "So, this means that instead of having a weight matrix, w, and the bias vector, b, you have a scalar w and a scalar b.",
    "start": "1412545",
    "end": "1418605"
  },
  {
    "text": "So, that's why in the picture, you just have this like two-dimensional parameter space. And then the, the z-axis is your, is your loss.",
    "start": "1418605",
    "end": "1425805"
  },
  {
    "text": "So here, high loss is, is bad and low loss is good in what you're trying to get. So, uh, here in this picture,",
    "start": "1425805",
    "end": "1432825"
  },
  {
    "text": "you've got this kind of cliff, right, where you have this very steep cliff face, uh, where the loss changes very quickly.",
    "start": "1432825",
    "end": "1439290"
  },
  {
    "text": "[NOISE] And this cliff is really dangerous because it has steep, steep gradients. And you might be in danger of taking a really big,",
    "start": "1439290",
    "end": "1446159"
  },
  {
    "text": "[NOISE] uh, update step because you're on the area with a really steep gradient. [NOISE] So, on the left,",
    "start": "1446160",
    "end": "1452505"
  },
  {
    "text": "you've got a possible scenario of what might happen if you don't have gradient clipping. [NOISE] So, on the left, uh,",
    "start": "1452505",
    "end": "1459330"
  },
  {
    "text": "you can see that you start kind of at the bottom of the cliff, and you have a f- a si- a few small updates.",
    "start": "1459330",
    "end": "1465465"
  },
  {
    "text": "And then, in particular makes a bad update because you see there's a small kind of dip before it goes off the cliff.",
    "start": "1465465",
    "end": "1470760"
  },
  {
    "text": "So, th- the true local minimum, the optimal you're trying to get to is that the bottom of that small kind of ditch.",
    "start": "1470760",
    "end": "1476145"
  },
  {
    "text": "And, um, it starts off kind of near the edge of that ditch, and then there's a negative gradient going into it.",
    "start": "1476145",
    "end": "1482670"
  },
  {
    "text": "But unfortunately, the, the update kind of overshoots, and it ends up going a long way off the cliff.",
    "start": "1482670",
    "end": "1487785"
  },
  {
    "text": "So now, it's in this bad situation where it's taken a bad update, and now it's got a much bigger loss than it had [NOISE] before.",
    "start": "1487785",
    "end": "1492929"
  },
  {
    "text": "So now that it's on the cliff. Again it, it measures the gradient, and the gradient is very steep, right?",
    "start": "1492930",
    "end": "1498179"
  },
  {
    "text": "The gradient is very large. So, when it takes a, uh, update with respect to that gradient, then because the gradient is so big,",
    "start": "1498180",
    "end": "1504300"
  },
  {
    "text": "it takes a really huge step. And that's, um, the, the one to the right. You can see the step going to the right.",
    "start": "1504300",
    "end": "1509580"
  },
  {
    "text": "So, that's also a very bad update because it's just throwing it really far to some probably fairly random,",
    "start": "1509580",
    "end": "1515309"
  },
  {
    "text": "uh, configuration of w and b. So, on the left, you can see what can go wrong if you're taking",
    "start": "1515310",
    "end": "1520740"
  },
  {
    "text": "these really big steps because you were in areas with a very steep gradient. So, by contrast on the right,",
    "start": "1520740",
    "end": "1526519"
  },
  {
    "text": "you can see what might happen if you do have a gradient clipping. [NOISE] [NOISE] And, um, it's much less drastic, right?",
    "start": "1526520",
    "end": "1532549"
  },
  {
    "text": "You've got a similar kind of pattern where it takes a few steps into the ditch, and then ends up going off the cliff a little bit,",
    "start": "1532550",
    "end": "1537745"
  },
  {
    "text": "but not too much because the gradient was clipped. And then, it's on the cliff and there's again a really steep gradient, but it doesn't take such a big step because again the gradient was clipped,",
    "start": "1537745",
    "end": "1545490"
  },
  {
    "text": "so that it kind of comes back down. So, you can see that plausibly by using this gradient clipping method,",
    "start": "1545490",
    "end": "1551085"
  },
  {
    "text": "you've got a, a kind of safer update rule, where you're not gonna take any, any big crazy steps and you're more likely to kind of find the,",
    "start": "1551085",
    "end": "1557355"
  },
  {
    "text": "the true minimum which is at the bottom of the ditch. [NOISE] I think there was a question earlier. Was there a question over here? [NOISE]",
    "start": "1557355",
    "end": "1563940"
  },
  {
    "text": "I just want to see the value. [NOISE] [NOISE] Okay. Anyone else? [NOISE]",
    "start": "1563940",
    "end": "1569460"
  },
  {
    "text": "Yeah?",
    "start": "1569460",
    "end": "1581190"
  },
  {
    "text": "[NOISE] [inaudible] So, the question is, in assignment three, y- you saw the atom optimization algorithm which, uh,",
    "start": "1581190",
    "end": "1586320"
  },
  {
    "text": "has this thing called momentum, which essentially says that kind of like physical momentum in, in the real world, that if you've been traveling in the same direction for a while,",
    "start": "1586320",
    "end": "1595755"
  },
  {
    "text": "then you can take bigger steps, I think, and if you've recently kind of changed direction,",
    "start": "1595755",
    "end": "1601320"
  },
  {
    "text": "then you should take smaller steps. And I think there's another element as well, where you divide by some factor.",
    "start": "1601320",
    "end": "1607620"
  },
  {
    "text": "[NOISE] So, it is a similar kind of idea. I suppose it's a different criterion, right? So, what they both have in common is it's a kind of criterion for when to",
    "start": "1607620",
    "end": "1614429"
  },
  {
    "text": "scale up or scale down the size of your update step. Um, and I think they're based on different notions",
    "start": "1614430",
    "end": "1620190"
  },
  {
    "text": "of when should you take bigger steps and when should you take smaller steps. When should you be cautious or less cautious? So, I guess here the criterion is different.",
    "start": "1620190",
    "end": "1627510"
  },
  {
    "text": "It's kind of a simple criterion saying, like if it's really steep, then be careful. Yeah. Another question?",
    "start": "1627510",
    "end": "1633250"
  },
  {
    "text": "Uh, so the [inaudible]. [NOISE]",
    "start": "1646730",
    "end": "1651885"
  },
  {
    "text": "Okay. So the question is, is this similar to regularization of some kind, right?",
    "start": "1651885",
    "end": "1657150"
  },
  {
    "text": "So, I suppose, yeah, there is- there are some things in common. Say for, example, L2 regularization says that you want, for example,",
    "start": "1657150",
    "end": "1663690"
  },
  {
    "text": "your weight matrices to have a small L2 norm, right?",
    "start": "1663690",
    "end": "1669404"
  },
  {
    "text": "And the idea is that you're trying to prevent your model from over-fitting the data by, um, having some kind of constraint that says you have to keep your weights fairly simple,",
    "start": "1669405",
    "end": "1677190"
  },
  {
    "text": "that is keep them, you know, small. So, I suppose the relationship is that here we're saying that we don't want the norm of the gradients to be too big.",
    "start": "1677190",
    "end": "1683490"
  },
  {
    "text": "Ah, I don't know if this is related to overfitting. Um, I guess I have to think more carefully about that,",
    "start": "1683490",
    "end": "1689495"
  },
  {
    "text": "but I guess it's a similar kind of constraint that you're placing. Okay. I'm gonna move on for now.",
    "start": "1689495",
    "end": "1696440"
  },
  {
    "text": "Uh, so we've talked about how you might fix the exploding gradient problem with gradient clipping,",
    "start": "1696440",
    "end": "1703080"
  },
  {
    "start": "1698000",
    "end": "1781000"
  },
  {
    "text": "but we haven't talked about how we might fix the vanishing gradient problem. So, um, to recap,",
    "start": "1703080",
    "end": "1709410"
  },
  {
    "text": "I think one way to characterize the problem with the- the vanishing gradients in RNNs is that it's too difficult for the RNN to learn to preserve information over many timesteps.",
    "start": "1709410",
    "end": "1719620"
  },
  {
    "text": "So, in our example with printing the tickets and re- remembering that it's the tickets that she wants to print, you could think of it as it's hard for the RNN language model to correctly",
    "start": "1719620",
    "end": "1728419"
  },
  {
    "text": "predict tickets because in a way, it's too hard for the RNN language model to, uh, learn to retain the tickets information and use it later.",
    "start": "1728420",
    "end": "1736345"
  },
  {
    "text": "So, um, if you look at the equation for vanilla RNNs and how we compute the hidden state, uh,",
    "start": "1736345",
    "end": "1741630"
  },
  {
    "text": "based on the previous hidden state and- and the inputs, you can see that the hidden state is in a way constantly being rewritten.",
    "start": "1741630",
    "end": "1747495"
  },
  {
    "text": "It's always computed based on these, uh, linear transformations and the, you know, the non-linearity.",
    "start": "1747495",
    "end": "1753105"
  },
  {
    "text": "So, it's not all that easy to preserve the information from one hidden state to the other, in particular, because we are putting it through this non-linearity function.",
    "start": "1753105",
    "end": "1761145"
  },
  {
    "text": "So, this motivates us to ask what about an RNN with some kind of separate memory?",
    "start": "1761145",
    "end": "1766980"
  },
  {
    "text": "If we have some kind of separate place to store information that we want to use later, then would this make it easier for our RNN",
    "start": "1766980",
    "end": "1774630"
  },
  {
    "text": "to learn to preserve information over many timesteps? So, this is the motivating idea behind LSTMs or Long Short-Term Memory RNNs.",
    "start": "1774630",
    "end": "1785205"
  },
  {
    "start": "1781000",
    "end": "2426000"
  },
  {
    "text": "So, the idea here is that an LSTM is a type of RNN and it was proposed back in, uh, 1997.",
    "start": "1785205",
    "end": "1791549"
  },
  {
    "text": "And the idea is that this is, uh, this was proposed as an explicit solution to the vanishing gradients problem.",
    "start": "1791550",
    "end": "1796799"
  },
  {
    "text": "[NOISE] So, one of the main differences here is that on each step T instead of just having a hidden state h_t,",
    "start": "1796800",
    "end": "1803880"
  },
  {
    "text": "we have both the hidden state h_t and the cell state which we denote c_t. And both of these are vectors of some same length,",
    "start": "1803880",
    "end": "1812085"
  },
  {
    "text": "n, and the idea there is that the cell is meant to sto- store our long-term information that, that's on memory units.",
    "start": "1812085",
    "end": "1820110"
  },
  {
    "text": "Another super important thing is that the LSTM can erase and write [NOISE] and read information from the cell.",
    "start": "1820110",
    "end": "1826980"
  },
  {
    "text": "So, you kind of think of this a bit like memory in a computer, in that you can do these operations, reading and writing and erasing,",
    "start": "1826980",
    "end": "1833715"
  },
  {
    "text": "um, and that's how you're gonna keep your information. [NOISE].",
    "start": "1833715",
    "end": "1839220"
  },
  {
    "text": "Another super important thing is that the way the LSTM decides, whether it wants to erase, write, read,",
    "start": "1839220",
    "end": "1845490"
  },
  {
    "text": "information and decide how much and which information, uh, that's all controlled by these [NOISE] gates.",
    "start": "1845490",
    "end": "1851429"
  },
  {
    "text": "So, the idea is [NOISE] that the gates are themselves also vectors of length n,",
    "start": "1851430",
    "end": "1856560"
  },
  {
    "text": "and the idea there is that on each timestep, each element of these gates which are vectors are somewhere between zero and one.",
    "start": "1856560",
    "end": "1864960"
  },
  {
    "text": "So here, uh, one represents an open gate and zero represents a closed gate,",
    "start": "1864960",
    "end": "1870164"
  },
  {
    "text": "and you can have values anywhere in between. So, the overall idea, which we're gonna firm up on the next slide,",
    "start": "1870165",
    "end": "1875475"
  },
  {
    "text": "but the overall idea is that if the gate is open, that represents some kind of information being passed through,",
    "start": "1875475",
    "end": "1880590"
  },
  {
    "text": "and if the gate is closed, it [NOISE] means that information does not pass through. Okay. So, the last really important thing is that the gates are dynamic.",
    "start": "1880590",
    "end": "1888705"
  },
  {
    "text": "They're not just set at some constant value for the whole sequence. [NOISE] Um, they're dynamic,",
    "start": "1888705",
    "end": "1894330"
  },
  {
    "text": "which means that they're different on each timestep T, and the value that is the decision of whether they're open or closed and in which ways,",
    "start": "1894330",
    "end": "1901200"
  },
  {
    "text": "[NOISE] um, that is computed based on the current context. Okay. So here's, um,",
    "start": "1901200",
    "end": "1906945"
  },
  {
    "text": "here's the- the equations for the LSTM which might make it clearer. So, uh, suppose we have some sequence of i- inputs x_t and we",
    "start": "1906945",
    "end": "1914160"
  },
  {
    "text": "want to compute a sequence of hidden state h_t and cell states c_t. So, this is what happens on timestep t. Uh,",
    "start": "1914160",
    "end": "1922740"
  },
  {
    "text": "this process equation shows you the three gates that I talked about before. So, the first one is called the Forget Gates.",
    "start": "1922740",
    "end": "1929909"
  },
  {
    "text": "And the idea is that this one is controlling what is kept versus what is forgotten, um, from the previous cell state, the previous memory.",
    "start": "1929910",
    "end": "1938130"
  },
  {
    "text": "And you can see that this forget gate is computed based on, uh, the previous hidden state h_t minus one and the current input x_t.",
    "start": "1938130",
    "end": "1946465"
  },
  {
    "text": "Um, so that's what I meant when I said that it's dynamic and it's computed based on the- the current context.",
    "start": "1946465",
    "end": "1951929"
  },
  {
    "text": "[NOISE] Um, you can also see that it's computed using, uh, the sigmoid function,",
    "start": "1951930",
    "end": "1957389"
  },
  {
    "text": "which means that it is somewhere between zero and one. Okay. The next gate is called the input gate,",
    "start": "1957390",
    "end": "1963050"
  },
  {
    "text": "and this one controls what parts of the new cell contents are written to the cell.",
    "start": "1963050",
    "end": "1968645"
  },
  {
    "text": "So, the idea there is that you have this- this memory cell and this is kind of, um, controlling like ho- how and what you get to write to the memory cell.",
    "start": "1968645",
    "end": "1977235"
  },
  {
    "text": "Okay. And the last one is called the upper gate. So, this one is controlling, uh, what parts of the cell are outputs to the hidden state,",
    "start": "1977235",
    "end": "1984930"
  },
  {
    "text": "[NOISE] so you could view this as kind of like the read function, right? We're going to read some information from",
    "start": "1984930",
    "end": "1990090"
  },
  {
    "text": "our memory cell and that's gonna get put into our hidden states, and this gate is gonna control that. [NOISE] Okay.",
    "start": "1990090",
    "end": "1996990"
  },
  {
    "text": "[NOISE] Uh, yeah, that's just the sigmoid function as we noted before.",
    "start": "1996990",
    "end": "2002059"
  },
  {
    "text": "All right. So, the next set of equation shows how we use these gates. [NOISE] So, the first line, uh,",
    "start": "2002060",
    "end": "2008120"
  },
  {
    "text": "you could regard this, uh, c_tilde as the new [NOISE] cell content. So, uh, this is the new content that you want to write to the cell,",
    "start": "2008120",
    "end": "2014960"
  },
  {
    "text": "[NOISE] and this is also computed based on, uh, your previous hidden state and your current inputs, and this goes through your tan h non-linearity.",
    "start": "2014960",
    "end": "2021920"
  },
  {
    "text": "So, uh, this is kind of the- the main contents that you are computing based on the context and you want to write this into memory.",
    "start": "2021920",
    "end": "2029570"
  },
  {
    "text": "So, on the next line what's happening is that we're going to use the forget gate to selectively forget some of the information from the previous,",
    "start": "2029570",
    "end": "2040070"
  },
  {
    "text": "[NOISE] uh, memory cell. And you can see that we're doing these element-wise products, that's what the little circle is.",
    "start": "2040070",
    "end": "2046340"
  },
  {
    "text": "So, the idea is that if you remember that f_t is a vector full of values between zero and one,",
    "start": "2046340",
    "end": "2051980"
  },
  {
    "text": "when you do an element-wise product between f_t and the previous cell state c_t minus one, then what you're essentially doing is you're kind of masking",
    "start": "2051980",
    "end": "2059000"
  },
  {
    "text": "out some of the information from the previous hidden state. Sorry, no. Previous cell state. So, when f is one,",
    "start": "2059000",
    "end": "2066155"
  },
  {
    "text": "then you're copying over the information, but when f is zero, then you're getting rid of that information, you are erasing it or forgetting it.",
    "start": "2066155",
    "end": "2072840"
  },
  {
    "text": "Okay. And then the other half of this equation, um, i_t times c tilde t, uh,",
    "start": "2073930",
    "end": "2079550"
  },
  {
    "text": "that's the input gate controlling which parts of the new cell contents are gonna get written, written to the, to the cell.",
    "start": "2079550",
    "end": "2086910"
  },
  {
    "text": "Okay. And then the last thing we do is we, uh, pass the cell through a tan h,",
    "start": "2087130",
    "end": "2092899"
  },
  {
    "text": "that's just adding another non-linearity, and then you pass that through the output gates and that gives you [NOISE] the hidden state.",
    "start": "2092900",
    "end": "2099380"
  },
  {
    "text": "So, in LSTMs, we often think of the hidden states as being, uh, like the outputs of the RNN.",
    "start": "2099380",
    "end": "2105095"
  },
  {
    "text": "And the reason for this is that you kind of view the cell states as being this kind of internal memory that's not generally accessible to the outside,",
    "start": "2105095",
    "end": "2112984"
  },
  {
    "text": "but the hidden states are the parts that you're gonna pa- pass on to the next part of the model. So, that's why we view it as kind of like the output of the model.",
    "start": "2112985",
    "end": "2120620"
  },
  {
    "text": "[NOISE] Uh, and this is, yeah, x just to remind the- there is- circles are",
    "start": "2120620",
    "end": "2126410"
  },
  {
    "text": "element-wise products and that's how we apply the gates. Uh, did anyone have any questions about this? [NOISE].",
    "start": "2126410",
    "end": "2140990"
  },
  {
    "text": "Okay. [NOISE] Um, so as a reminder, all of these are vectors of some same length n.",
    "start": "2140990",
    "end": "2146420"
  },
  {
    "text": "[NOISE] Okay. So, some people learn better from diagrams than equations,",
    "start": "2146420",
    "end": "2152914"
  },
  {
    "text": "and here's a diagram presentation of the same idea. So, this is a really nice diagram from a blog post, uh, by Chris Olah about LSTMs,",
    "start": "2152914",
    "end": "2159665"
  },
  {
    "text": "and that was a good place to start if you want to get an intuitive understanding of what LSTMs are. So, in this diagram, uh,",
    "start": "2159665",
    "end": "2166505"
  },
  {
    "text": "the green boxes represent timesteps, um, and let's zoom in on the middle one and see what's happening here.",
    "start": "2166505",
    "end": "2172550"
  },
  {
    "text": "So, within one timestep, you can see that this diagram is showing exactly the same thing as",
    "start": "2172550",
    "end": "2177650"
  },
  {
    "text": "those six equations showed on the previous slide. So, uh, the first thing we do is we use the, uh, the current input x_t,",
    "start": "2177650",
    "end": "2185809"
  },
  {
    "text": "which is at the bottom and the previous hidden state h_t minus the one on the left, and we can use that to compute the forget gate.",
    "start": "2185810",
    "end": "2191420"
  },
  {
    "text": "[NOISE] And you can see f_t is on that arrow there. And then you apply the forget gate to the previous, uh, cell,",
    "start": "2191420",
    "end": "2199385"
  },
  {
    "text": "and that's the same thing as forgetting some of the- the cell content from last time. [NOISE] Okay.",
    "start": "2199385",
    "end": "2204695"
  },
  {
    "text": "And then after that, you can compute the input gate, uh, and that's computed in much the same way as the forget gate.",
    "start": "2204695",
    "end": "2210155"
  },
  {
    "text": "And then you use the input gate to decide which parts of this,",
    "start": "2210155",
    "end": "2215240"
  },
  {
    "text": "uh, new cell content get written to the cell, and that gives you the cell c_t.",
    "start": "2215240",
    "end": "2220565"
  },
  {
    "text": "So, here you can see that you computed the impu ga- input gates and the new content and then you use that to gate that and write it to the cell.",
    "start": "2220565",
    "end": "2228770"
  },
  {
    "text": "So, now we've got our new cell c_t, and then the last things we need to do is to compute our new output gate, that's o_t.",
    "start": "2228770",
    "end": "2235370"
  },
  {
    "text": "And then lastly, use the output gate to select which parts of the cell contents you're gonna read and put in the new hidden state h_t.",
    "start": "2235370",
    "end": "2245090"
  },
  {
    "text": "So, that's, that's, uh, that's the same thing as the equations we saw on the previous slide.",
    "start": "2245090",
    "end": "2250440"
  },
  {
    "text": "Okay. So, that's LSTMs. Um, is there a question?",
    "start": "2252400",
    "end": "2257510"
  },
  {
    "text": "What's the importance [NOISE]  [inaudible]",
    "start": "2257510",
    "end": "2270110"
  },
  {
    "text": "The question is, why are we applying a tan h on the very last equation on this, on this slide?",
    "start": "2270110",
    "end": "2275720"
  },
  {
    "text": "Why we're planning a tan h to the cell before applying the output gate?",
    "start": "2275720",
    "end": "2281119"
  },
  {
    "text": "Let's see. Um. Yeah. So, your question is, the- the cell,",
    "start": "2281120",
    "end": "2290330"
  },
  {
    "text": "the new cell content already went through a tan h. Um, I'm not sure.",
    "start": "2290330",
    "end": "2299330"
  },
  {
    "text": "So, I suppose a- a- a general answer is that it must be giving some kind of more expressivity in some way, and that it's not just applying",
    "start": "2299330",
    "end": "2306410"
  },
  {
    "text": "tan h's sequentially because you do have the gates in between.",
    "start": "2306410",
    "end": "2311420"
  },
  {
    "text": "Um, so I suppose there must be a reason, kind of similarly to when you apply- apply",
    "start": "2311420",
    "end": "2316445"
  },
  {
    "text": "a linear layer you won't have a non-linearity before the next linear layer. I suppose maybe we're viewing these cases as a kind of linear layer?",
    "start": "2316445",
    "end": "2323075"
  },
  {
    "text": "I'm not sure. I'll look it up. [NOISE] Okay.",
    "start": "2323075",
    "end": "2329450"
  },
  {
    "text": "So, uh, that's LSTMs. And, um, re- if you recall, we were- oh, question?",
    "start": "2329450",
    "end": "2335795"
  },
  {
    "text": "Yeah. Why is it that in the forget gate, you don't look at the previous cell state but you just look at the new hidden state?",
    "start": "2335795",
    "end": "2342185"
  },
  {
    "text": "Like it seems like if you're this- instead of deciding what to forget from the cell state, you should look at it. So the question is, why is the forget gate",
    "start": "2342185",
    "end": "2349670"
  },
  {
    "text": "computed only for the previous hidden state and the current input, why is it not computed based on ct minus one itself, right?",
    "start": "2349670",
    "end": "2356840"
  },
  {
    "text": "Because surely you want to look at the thing to figure out whether you want to forget it or not?",
    "start": "2356840",
    "end": "2361880"
  },
  {
    "text": "Um, that's a pretty good question. Uh, so, I suppose one reason why you might think that this- this works fine is that",
    "start": "2361880",
    "end": "2369740"
  },
  {
    "text": "the LSTM might be learning a general algorithm for where it stores different types of information in the cell, right?",
    "start": "2369740",
    "end": "2376730"
  },
  {
    "text": "So, maybe it's learning that in this particular position in the cell, I learn information about this particular semantic thing and then in this situation,",
    "start": "2376730",
    "end": "2384230"
  },
  {
    "text": "I want to use that or not use that, forget it or keep it. But, yeah, I haven't entirely convinced myself why you don't want to",
    "start": "2384230",
    "end": "2391579"
  },
  {
    "text": "look at the contents of the cell itself in order to decide. I suppose another thing to notice is that ht minus one was read from ct minus one.",
    "start": "2391580",
    "end": "2402530"
  },
  {
    "text": "So, I suppose there is some information there but not necessarily all of the information. Ah, yeah.",
    "start": "2402530",
    "end": "2411095"
  },
  {
    "text": "I'm not sure, that's another thing I need to look up I guess. [NOISE] Any other questions?",
    "start": "2411095",
    "end": "2418530"
  },
  {
    "text": "Okay. Ah, so, that's LSTMs and,",
    "start": "2421060",
    "end": "2426990"
  },
  {
    "start": "2426000",
    "end": "2677000"
  },
  {
    "text": "um, LSTMs were introduced to try to solve the vanishing gradient problem. So, the question is, ah,",
    "start": "2427780",
    "end": "2433640"
  },
  {
    "text": "how exactly is this architecture making the vanishing gradient problem any better? So, you could, ah, see that the LSTM architecture",
    "start": "2433640",
    "end": "2441710"
  },
  {
    "text": "actually makes it easier for RNNs to preserve information over many time steps. So, while it w as kind of difficult for",
    "start": "2441710",
    "end": "2448340"
  },
  {
    "text": "the vanilla RNN to preserve the information over all of the hidden states, there's actually a fairly easy strategy that makes",
    "start": "2448340",
    "end": "2454730"
  },
  {
    "text": "it simple for the LSTM to preserve the information. So, namely, if the forget gate is set to remember everything on every step, um,",
    "start": "2454730",
    "end": "2462289"
  },
  {
    "text": "that's a fairly simple strategy that will ensure that the information in the cell is going to be preserved indefinitely over many time steps.",
    "start": "2462290",
    "end": "2469820"
  },
  {
    "text": "So, I don't know if that's actually a good strategy for whatever task you're trying to do, but my point is that there is at least, um,",
    "start": "2469820",
    "end": "2475984"
  },
  {
    "text": "a fairly straightforward way for the LSTM to keep the information over many steps. And as we noted that's relatively harder for the vanilla RNN to do.",
    "start": "2475985",
    "end": "2485175"
  },
  {
    "text": "So, you can think of this as the key reason why LSTMs are more able, ah, to preserve the information",
    "start": "2485175",
    "end": "2491859"
  },
  {
    "text": "and thus are more robust to the vanishing gradient problem. Ah, however, I think you should still know that LSTMs don't",
    "start": "2491859",
    "end": "2498590"
  },
  {
    "text": "necessarily guarantee that we don't have a vanishing or exploding gradient problem. You could still have that problem,",
    "start": "2498590",
    "end": "2503615"
  },
  {
    "text": "but the thing to remember is that it's easier to avoid it anyway. Okay. So, um, LSTMs, ah,",
    "start": "2503615",
    "end": "2511420"
  },
  {
    "text": "have been shown to be more robust to the vanishing gradient problem, ah but I'm going to tell you a little about how they've",
    "start": "2511420",
    "end": "2517180"
  },
  {
    "text": "actually been more successful in real life. You have a question? Yeah,  [inaudible]",
    "start": "2517180",
    "end": "2541600"
  },
  {
    "text": "Okay. So it's a great question. The question is, why is it that just because you",
    "start": "2541600",
    "end": "2548480"
  },
  {
    "text": "have these LSTM defined forward equations, why do you not have the vanishing gradient problem? Why does the- the logic about, ah,",
    "start": "2548480",
    "end": "2556280"
  },
  {
    "text": "the chain rule kind of getting smaller and smaller or bigger and bigger not apply? So, I think the key here is that, um,",
    "start": "2556280",
    "end": "2563795"
  },
  {
    "text": "in the vanilla RNN, the hidden states are kind of like a bottleneck, right? Like all gradients must pass through them.",
    "start": "2563795",
    "end": "2570619"
  },
  {
    "text": "So, if that gradient is small then, all downstream gradients will be small, whereas here you could regard the cell as being kind of like",
    "start": "2570620",
    "end": "2578405"
  },
  {
    "text": "a shortcut connection at least in the case where the forget gate is set to remember things,",
    "start": "2578405",
    "end": "2584300"
  },
  {
    "text": "um, then that's kind of like a shortcut connection where the cell will stay the same if you have the forget gate set to remember things.",
    "start": "2584300",
    "end": "2591020"
  },
  {
    "text": "So, if the cell is staying mostly the same, then you are not going to be,",
    "start": "2591020",
    "end": "2597530"
  },
  {
    "text": "ah, having the vanishing gradient via the cell. So, that means that to get a connection from the gradient of something in the future with respect to something in the past,",
    "start": "2597530",
    "end": "2605465"
  },
  {
    "text": "there is a potential route for the gradient to go via the cell that doesn't necessarily vanish.",
    "start": "2605465",
    "end": "2610865"
  },
  {
    "text": "So in that, I have one more question. Um-uh. Since we have a shortcut [inaudible]",
    "start": "2610865",
    "end": "2629830"
  },
  {
    "text": "So I think the question was how do you check that your gradients are correct given that there are now multiple routes for information to travel?",
    "start": "2629830",
    "end": "2637895"
  },
  {
    "text": "Right. So, I suppose this somewhat relates to what we talked about last time with the multivariable chain rule about what is",
    "start": "2637895",
    "end": "2644660"
  },
  {
    "text": "the derivative of the loss with respect to a repeated weight matrix and we saw that, if there are multiple routes then",
    "start": "2644660",
    "end": "2650675"
  },
  {
    "text": "the multivariable chain rule says that you add up the gradients. So, if your question is how do you do the calculus correctly and make sure it's correct,",
    "start": "2650675",
    "end": "2656675"
  },
  {
    "text": "I guess you just kind of apply the multi-variable chain rule and it's more complicated than assessing with the LSTMs. Ah if you're using PyTorch 14 you do not have to do that yourself,",
    "start": "2656675",
    "end": "2664085"
  },
  {
    "text": "if you're going to implement it yourself then, you might have a more difficult time. Um, yeah. So, I guess, yeah.",
    "start": "2664085",
    "end": "2670775"
  },
  {
    "text": "Okay. All right, so, what do we get to. All right.",
    "start": "2670775",
    "end": "2678559"
  },
  {
    "start": "2677000",
    "end": "2786000"
  },
  {
    "text": "So, let's talk about LSTMs and how they work in the- in the real world. So, in the pretty recent past,",
    "start": "2678560",
    "end": "2684950"
  },
  {
    "text": "2013-2015 um LSTM started achieving a lot of state of the art results on a variety of different tasks including for example,",
    "start": "2684950",
    "end": "2692315"
  },
  {
    "text": "handwriting recognition, speech recognition, machine translation, parsing, image captioning.",
    "start": "2692315",
    "end": "2697805"
  },
  {
    "text": "So, over this period, LSTMs became the dominant approach in a lot of these application areas because they worked convincingly a lot better than vanilla RNNs.",
    "start": "2697805",
    "end": "2708230"
  },
  {
    "text": "However, today in 2019, things changed pretty fast in deep learning.",
    "start": "2708230",
    "end": "2713465"
  },
  {
    "text": "So, other approaches for example, transformers which you're going to learn about later in the class. Ah, in some of these application areas,",
    "start": "2713465",
    "end": "2720410"
  },
  {
    "text": "they seem to have become, ah, the dominant approach. So, to look into this,",
    "start": "2720410",
    "end": "2725480"
  },
  {
    "text": "I had a look at WMT which is a machine translation conference and also competition where people submit their MT systems to be evaluated.",
    "start": "2725480",
    "end": "2733865"
  },
  {
    "text": "And I looked at the report, the summary report for WMT 2016 and in this report,",
    "start": "2733865",
    "end": "2739760"
  },
  {
    "text": "I did a quick Ctrl+F, and I found the word RNN appeared 44 times. So, it seems that most people entering this competition were building",
    "start": "2739760",
    "end": "2746990"
  },
  {
    "text": "their MT systems based on RNNs and in particular LSTMs. And then I looked at the report from 2018,",
    "start": "2746990",
    "end": "2752945"
  },
  {
    "text": "just two years later and I found that the RNN, the word RNN only appeared nine times and the word transformer appeared 63 times,",
    "start": "2752945",
    "end": "2759785"
  },
  {
    "text": "and in fact the organizers noted that everyone, well, most people seem to using transformers now. So um, this shows that things change pretty fast in deep learning.",
    "start": "2759785",
    "end": "2767930"
  },
  {
    "text": "The thing that was hot and new just a few years ago um, is- is now being passed by perhaps by other kinds of approaches.",
    "start": "2767930",
    "end": "2775655"
  },
  {
    "text": "So, you're going to learn more about transformers later but I guess that gives you a kind of idea of where LSTMs are currently in applications.",
    "start": "2775655",
    "end": "2784385"
  },
  {
    "text": "Okay. So, the second kind of RNN we're going to learn about is gated recurrent units.",
    "start": "2784385",
    "end": "2789845"
  },
  {
    "start": "2786000",
    "end": "3156000"
  },
  {
    "text": "So, these fortunately are simpler than LSTMs, in fact that was the motivation for them being proposed.",
    "start": "2789845",
    "end": "2796070"
  },
  {
    "text": "They were proposed in 2014 as a way to try to retain the strengths of LSTMs by getting rid of any unnecessary complexities.",
    "start": "2796070",
    "end": "2805055"
  },
  {
    "text": "So, in a GRU, we don't have a cell state. We again just have a hidden state.",
    "start": "2805055",
    "end": "2810470"
  },
  {
    "text": "But the thing it has in ah in common with LSTMs is that we're going to be using gates to control the flow of information.",
    "start": "2810470",
    "end": "2817460"
  },
  {
    "text": "So, here are the equations for GRU. We start off with two gates.",
    "start": "2817460",
    "end": "2822890"
  },
  {
    "text": "So the first gate is called the update gate and this controls what parts of the hidden states are going to be updated versus preserved.",
    "start": "2822890",
    "end": "2831050"
  },
  {
    "text": "So, you can kind of view this as playing the role of both the forget gate and the input gate in",
    "start": "2831050",
    "end": "2837170"
  },
  {
    "text": "the LSTM and it's computed in much the same way as the gates in the LSTM were.",
    "start": "2837170",
    "end": "2844579"
  },
  {
    "text": "The second gate is called the reset gate rt, and this gate is controlling which parts of",
    "start": "2844580",
    "end": "2850550"
  },
  {
    "text": "the previous hidden state are going to be used to compute new contents. So, you can think of the- the reset gate as kind of selecting",
    "start": "2850550",
    "end": "2857735"
  },
  {
    "text": "which parts of the previous hidden states are useful versus not useful. So, it's going to discard some things and select some other things.",
    "start": "2857735",
    "end": "2865010"
  },
  {
    "text": "Okay. So, here's how those gates get used. Um, h tilde here. This is you can think of it as the new hidden state contents and what's",
    "start": "2865010",
    "end": "2874400"
  },
  {
    "text": "going on in that equation is that we are applying the reset gate to the previous hidden state ht minus",
    "start": "2874400",
    "end": "2879410"
  },
  {
    "text": "one um and then putting all of that through some linear transformations and a tan H and then this gives us the new content",
    "start": "2879410",
    "end": "2887420"
  },
  {
    "text": "which we want to write to the hidden cell. And then lastly our new hidden cell is going to be a combination",
    "start": "2887420",
    "end": "2895655"
  },
  {
    "text": "of ah this new content and the previous hidden state. So, the important thing to notice here is that we have this one minus u and u term.",
    "start": "2895655",
    "end": "2904790"
  },
  {
    "text": "So um, it's kind of like a balance right? U is ah is setting the balance between",
    "start": "2904790",
    "end": "2911079"
  },
  {
    "text": "preserving things from the previous hidden state versus writing new stuff. So, whereas in the LSTM,",
    "start": "2911079",
    "end": "2916359"
  },
  {
    "text": "those were two completely separate gates that could be whatever value. Here we have this constraint that U is being uh, balanced.",
    "start": "2916360",
    "end": "2922240"
  },
  {
    "text": "So, if you have more of one, you have to have less of the other. So, this is one way in which the creators of the GRU sought to make LSTMs more simple.",
    "start": "2922240",
    "end": "2931160"
  },
  {
    "text": "Was by having a single gate play both of these roles. Okay. So, that's GRUs and I think it's a little less obvious just looking at it.",
    "start": "2931160",
    "end": "2939410"
  },
  {
    "text": "Why GRUs help the vanishing gradients problem because there is no explicit ah memory",
    "start": "2939410",
    "end": "2944869"
  },
  {
    "text": "cell, like there is in LSTMs. So, I think the way to look at this here is um GRUs,",
    "start": "2944870",
    "end": "2950360"
  },
  {
    "text": "you can view this as also being a solution to the vanishing gradient problem because like LSTMs, GRUs make it easier to retain information ah long-term.",
    "start": "2950360",
    "end": "2959425"
  },
  {
    "text": "So, for example here, if the update gate ut is set to zero,",
    "start": "2959425",
    "end": "2965094"
  },
  {
    "text": "then we're going to be ah keeping the hidden state the same on every step.",
    "start": "2965094",
    "end": "2970385"
  },
  {
    "text": "And again that's maybe not a good idea but at least that is a strategy you can easily do in order to retain information over long distances.",
    "start": "2970385",
    "end": "2977315"
  },
  {
    "text": "So that's kind of like- like the same explanation of how GRUs make it potentially easier for RNNs to retain information long-term.",
    "start": "2977315",
    "end": "2984660"
  },
  {
    "text": "Okay. So, we've learned about these two different types of RNNs. Yes.",
    "start": "2986410",
    "end": "2991490"
  },
  {
    "text": "[inaudible]",
    "start": "2991490",
    "end": "3008230"
  },
  {
    "text": "I think the question was, if we view the two gates in the GRU, as being, uh, a precise, um, analogy to the gates in the LSTM or are they more of a fuzzy analogy.",
    "start": "3008230",
    "end": "3020440"
  },
  {
    "text": "I'd say probably more of a fuzzy analogy because there are other changes going on in here, like,",
    "start": "3020440",
    "end": "3026079"
  },
  {
    "text": "for example, the fact that there's no separate, um, memory cell, it means they're not performing exactly the same functions.",
    "start": "3026080",
    "end": "3032260"
  },
  {
    "text": "Yeah. Okay. So, we've learned about LSTMs and GRUs which are both,",
    "start": "3032260",
    "end": "3039895"
  },
  {
    "text": "um, more complicated forms of RNNs, more complicated than Vanilla RNNs. And they are both,",
    "start": "3039895",
    "end": "3045610"
  },
  {
    "text": "uh, more robust to the vanishing gradient problem. So, um, it would be useful to know which of these should we be using in practice?",
    "start": "3045610",
    "end": "3053950"
  },
  {
    "text": "Which one is more successful, the LSTM or GRU? Uh, so, I- I did a little reading and it looks like researchers have",
    "start": "3053950",
    "end": "3059770"
  },
  {
    "text": "proposed a lot of different types of gated RNNs. So, it's not just GRUs and LSTMs, there's many other papers with lots of other different variants.",
    "start": "3059770",
    "end": "3067585"
  },
  {
    "text": "Uh, but these are definitely the two that are most widely used. And, ah, you can probably say that the biggest difference between the two, um,",
    "start": "3067585",
    "end": "3075340"
  },
  {
    "text": "for sure is the fact that GRUs are simpler and quicker to compute and they have fewer parameters.",
    "start": "3075340",
    "end": "3081115"
  },
  {
    "text": "So, this makes an actual practical difference to you as, uh, a deep learning practitioner because if you build your net based on GRUs,",
    "start": "3081115",
    "end": "3087970"
  },
  {
    "text": "then it's gonna be faster to run forwards and, you know, faster to train and so on. So, other than that, there appears to be",
    "start": "3087970",
    "end": "3094540"
  },
  {
    "text": "no very conclusive evidence that one of these LSTM or GRUs, uh, is consistently outperforming the other on lots of different tasks.",
    "start": "3094540",
    "end": "3102790"
  },
  {
    "text": "Uh, it seems that often, uh, sometimes GRUs do perform as well as LSTMs,",
    "start": "3102790",
    "end": "3108250"
  },
  {
    "text": "but there are cases where one of them performs better than the other. So, as a rule of thumb,",
    "start": "3108250",
    "end": "3113440"
  },
  {
    "text": "it seems like LSTM is often a good default choice to start with, uh, especially if your data has",
    "start": "3113440",
    "end": "3118839"
  },
  {
    "text": "particularly long dependencies because there's evidence to think that LSTMs might be slightly better at keeping information over very long distances.",
    "start": "3118840",
    "end": "3125500"
  },
  {
    "text": "And also, if you have a lot of training data, you might think that LSTMs are a better choice because they have more parameters which means that,",
    "start": "3125500",
    "end": "3132339"
  },
  {
    "text": "um, maybe you need more train data to learn them.",
    "start": "3132340",
    "end": "3135860"
  },
  {
    "text": "So, a rule of thumb is that maybe you want to start with LSTMs and if you're happy with their performance and you're",
    "start": "3137940",
    "end": "3143500"
  },
  {
    "text": "happy with how long it takes to train, then you stick with that. But if you feel like you need it to be more efficient, then maybe you should switch to GRUs and see how that goes with the performance",
    "start": "3143500",
    "end": "3150850"
  },
  {
    "text": "and if it's faster. All right. So, um, we've talked so far about how",
    "start": "3150850",
    "end": "3156970"
  },
  {
    "start": "3156000",
    "end": "3475000"
  },
  {
    "text": "the vanishing/exploding gradients are a problem that occur a lot in RNNs. But, um, the question is,",
    "start": "3156970",
    "end": "3162415"
  },
  {
    "text": "is it only an RNN problem? Does this occur in other kinds of neural networks as well? And the answer is,",
    "start": "3162415",
    "end": "3168115"
  },
  {
    "text": "uh, no, it's not just an RNN problem. In fact, vanishing and exploding gradients are a pretty significant problem for",
    "start": "3168115",
    "end": "3175150"
  },
  {
    "text": "most neural architecture such as feed-forward and convolutional, especially when they're deep. And this is a really serious problem because there's no point having",
    "start": "3175150",
    "end": "3182410"
  },
  {
    "text": "a really cool neural architecture if you can't learn it efficiently because of the, uh, vanishing gradient problem.",
    "start": "3182410",
    "end": "3188500"
  },
  {
    "text": "So, in particular, uh, in these feed-forward and convolutional networks, uh, you often have a gradient becoming vanishingly",
    "start": "3188500",
    "end": "3195280"
  },
  {
    "text": "small over back-propagation, uh, because of the Chain Rule, because of this multiplying by all these different intermediate gradients or",
    "start": "3195280",
    "end": "3202390"
  },
  {
    "text": "sometimes due to your choice of non-linearity function. So, if this happens, this means that your- the lower layers of your, let's say,",
    "start": "3202390",
    "end": "3209260"
  },
  {
    "text": "convolutional or feed-forward network, they have a much smaller, uh, gradient than the high levels.",
    "start": "3209260",
    "end": "3215935"
  },
  {
    "text": "And this means that they get changed very slowly during SGD. So, this means that, overall,",
    "start": "3215935",
    "end": "3221290"
  },
  {
    "text": "your network is very slow to train because when you take updates, then your lower layers are changing very slowly.",
    "start": "3221290",
    "end": "3227080"
  },
  {
    "text": "So, one solution, uh, the kind of like a family of solutions that we've seen in recent years is that there's been lots of",
    "start": "3227080",
    "end": "3233620"
  },
  {
    "text": "proposals for new types of deep feed-forward or convolutional architectures.",
    "start": "3233620",
    "end": "3238720"
  },
  {
    "text": "And what they do is, they add more direct connections in the network. And the- the idea,",
    "start": "3238720",
    "end": "3244330"
  },
  {
    "text": "kind of as we talked about before, is that if you add all of these direct connections between layers, like maybe not just adjacent layers but further apart layers,",
    "start": "3244330",
    "end": "3252085"
  },
  {
    "text": "then it makes it much easier for the gradients to flow, and you're going to find it easier to train your network overall.",
    "start": "3252085",
    "end": "3257635"
  },
  {
    "text": "So, I'm going to show you some examples of these in particular because it's fairly likely you're going to run into these kinds of architectures when you're doing your projects and reading papers.",
    "start": "3257635",
    "end": "3265704"
  },
  {
    "text": "So, one example is something called residual connections or, uh, the network itself is sometimes referred to as ResNet.",
    "start": "3265705",
    "end": "3272515"
  },
  {
    "text": "And here we've got a figure from the related paper. So, what's going on in this diagram is that you have, uh,",
    "start": "3272515",
    "end": "3281070"
  },
  {
    "text": "the usual kind of you've got weight layer and a non-linearity which is ReLU, and another weight layer. So, if you regard that function as being f of x, ah,",
    "start": "3281070",
    "end": "3289180"
  },
  {
    "text": "what they're doing is instead of just, ah, transforming x to f of x, the- they're taking f of x plus x.",
    "start": "3289180",
    "end": "3295150"
  },
  {
    "text": "So they're adding this identity skip connection where the input x is skipped over those two layers and then,",
    "start": "3295150",
    "end": "3301990"
  },
  {
    "text": "um, added to the output of the two layers. So, the reason why this is a good idea,",
    "start": "3301990",
    "end": "3307510"
  },
  {
    "text": "uh, also known as skip connections, is that the identity connection is going to preserve information by default, right?",
    "start": "3307510",
    "end": "3315279"
  },
  {
    "text": "So, if you imagine perhaps if you, um, initialize your network and you initialize your weight layers to have small random values,",
    "start": "3315280",
    "end": "3322600"
  },
  {
    "text": "then if they're small and kind of close to zero, then you're going to have something like a noisy identity function, right?",
    "start": "3322600",
    "end": "3328885"
  },
  {
    "text": "So you're going to be preserving information by default through all of your layers. And if you have a very deep network, that means that even often many,",
    "start": "3328885",
    "end": "3335110"
  },
  {
    "text": "um, many layers, you're still gonna have something like your original input.",
    "start": "3335110",
    "end": "3339410"
  },
  {
    "text": "So, uh, the- the people who wrote this paper, they show that, uh, if you don't have something like skip connections then",
    "start": "3340320",
    "end": "3346660"
  },
  {
    "text": "actually you can find that deep layers- uh, deep networks perform worse on some tasks than shallow networks.",
    "start": "3346660",
    "end": "3353245"
  },
  {
    "text": "Not because they're not expressive enough, but because they're too difficult to learn. So, when you attempt to learn deep networks,",
    "start": "3353245",
    "end": "3358285"
  },
  {
    "text": "it just doesn't learn effectively and you end up getting worse performance in the shallow network. So, the people who wrote this paper, they show that when they add these skip connections,",
    "start": "3358285",
    "end": "3365050"
  },
  {
    "text": "then they made the deep networks, uh, much more effective and they managed to get good performance.",
    "start": "3365050",
    "end": "3370550"
  },
  {
    "text": "Uh, so another example which kinda take this- this idea further is something called dense connections or DenseNet.",
    "start": "3372000",
    "end": "3378220"
  },
  {
    "text": "And again, this was, uh, something proposed I think in a feed-forward or or convolutional setting.",
    "start": "3378220",
    "end": "3383964"
  },
  {
    "text": "And, ah, it's just kind of the same as skip connections but except , um, connects everything to everything. So, add more of these skip connections kind of",
    "start": "3383965",
    "end": "3390070"
  },
  {
    "text": "from all layers to all layers and they showed that this, uh, performs even better. And, uh, the last one I want to talk about which I don't have a picture",
    "start": "3390070",
    "end": "3397450"
  },
  {
    "text": "for is something called highway connections. So, this is similar to the residual or skip connections.",
    "start": "3397450",
    "end": "3403180"
  },
  {
    "text": "Ah, but the idea is that instead of just adding your x, adding your identity, uh, connection,",
    "start": "3403180",
    "end": "3408640"
  },
  {
    "text": "the idea is that you're gonna have a gate that controls the balance between, um, adding the identity and computing, ah, the transformation.",
    "start": "3408640",
    "end": "3415960"
  },
  {
    "text": "So, instead of f of x plus x, you're gonna have, you know, gate times f of x plus, you know, one minus gate times x, something like that.",
    "start": "3415960",
    "end": "3422110"
  },
  {
    "text": "Um, so, this work was actually inspired by LSTMs, but instead of applying it to a recurrent setting,",
    "start": "3422110",
    "end": "3427510"
  },
  {
    "text": "they were seeking to apply it to a feed-forward setting.",
    "start": "3427510",
    "end": "3431570"
  },
  {
    "text": "Okay. I'm gonna keep going for now. Um. So, overall the question was,",
    "start": "3433860",
    "end": "3439390"
  },
  {
    "text": "you know, how much uh, vanishing and exploding gradients a problem outside of the setting of RNNs? And I think uh, the important takeaway is that it is a big problem",
    "start": "3439390",
    "end": "3446710"
  },
  {
    "text": "but you should notice that it is particularly a problem for RNNs. So, um, RNNs are particularly unstable and",
    "start": "3446710",
    "end": "3454000"
  },
  {
    "text": "this is essentially due to the repeated multiplication by the same weight matrix. If you remember from last time, um,",
    "start": "3454000",
    "end": "3459174"
  },
  {
    "text": "the characteristic thing about RNNs that makes them recurrent is the fact that you are applying the same weight matrix over and over again.",
    "start": "3459175",
    "end": "3464769"
  },
  {
    "text": "So, this is actually the core reason why they are so prone to the vanishing and exploding gradients,",
    "start": "3464770",
    "end": "3469865"
  },
  {
    "text": "and ah, you can see some more information about that in the paper. Okay. So, I know there's been a lot of dense information today,",
    "start": "3469865",
    "end": "3477730"
  },
  {
    "start": "3475000",
    "end": "3540000"
  },
  {
    "text": "a lot of um, lot of notation. So, here's a recap, if I've lost you at any point. Now's a good time to jump back in because it's gonna",
    "start": "3477730",
    "end": "3483280"
  },
  {
    "text": "get a little easier to understand perhaps. So, okay, recap. What have we learned about today? Um, the first thing we learned about was the vanishing gradient problem.",
    "start": "3483280",
    "end": "3490435"
  },
  {
    "text": "We learned uh, what it is. We learned why it happens and we saw why it's bad for RNNs,",
    "start": "3490435",
    "end": "3495580"
  },
  {
    "text": "for example, RNN language models. Ah, and we also learned about LSTMs and GRUs which are",
    "start": "3495580",
    "end": "3501640"
  },
  {
    "text": "more complicated RNNs and they use gates to control the flow of information. And by doing that, they are more resilient to the vanishing gradient problem.",
    "start": "3501640",
    "end": "3509395"
  },
  {
    "text": "Okay. So, if the remainder of this lecture, I think we've got about 20 minutes left, ah, we're going to be learning about two more advanced type of RNNs.",
    "start": "3509395",
    "end": "3516445"
  },
  {
    "text": "So, the first one is bidirectional RNNs and that's all about information flowing left to right and right to left.",
    "start": "3516445",
    "end": "3523105"
  },
  {
    "text": "And then we're also going to learn about multi-layer RNNs which is when you apply multiple RNNs on top of each other.",
    "start": "3523105",
    "end": "3529780"
  },
  {
    "text": "So, I'd say that both of these are pretty simple conceptually. Um, so it shouldn't be too hard to understand.",
    "start": "3529780",
    "end": "3536905"
  },
  {
    "text": "All right, so let's start with bidirectional RNNs. Um, this is a picture which you saw at the end of last lecture.",
    "start": "3536905",
    "end": "3544224"
  },
  {
    "start": "3540000",
    "end": "4403000"
  },
  {
    "text": "So, if you remember, sentiment classification is the task when you have some kind of input sentence such as the movie was",
    "start": "3544225",
    "end": "3550150"
  },
  {
    "text": "terribly exciting and you want to classify this as a positive or negative sentiment.",
    "start": "3550150",
    "end": "3555460"
  },
  {
    "text": "So, in this example, it should be seen as positive sentiment. So, um, this is an example of how you might try to",
    "start": "3555460",
    "end": "3563650"
  },
  {
    "text": "solve sentiment classification using a fairly simple RNN model. Ah, here we're using the RNN as a kind of encoder of",
    "start": "3563650",
    "end": "3569830"
  },
  {
    "text": "the sentence and the hidden states represent the sentence. And we'll do some kind of combination of the hidden states to compute uh,",
    "start": "3569830",
    "end": "3575740"
  },
  {
    "text": "what we think the sentiment is. So, my question is, if we look at let's say, the hidden state that corresponds to the word terribly and we're regarding",
    "start": "3575740",
    "end": "3584350"
  },
  {
    "text": "this hidden state as a representation of the word terribly in the context of the sentence.",
    "start": "3584350",
    "end": "3589510"
  },
  {
    "text": "So, for this reason we- we sometimes call hidden states in this kind of situation a contextual representation because the idea is that it's",
    "start": "3589510",
    "end": "3595930"
  },
  {
    "text": "a representation of the word terribly in the context of the sentence. So, thing to think about here is that this contextual representation,",
    "start": "3595930",
    "end": "3604150"
  },
  {
    "text": "it only contains information about the left context. So, for terribly, the left context is the words um,",
    "start": "3604150",
    "end": "3610150"
  },
  {
    "text": "the movie was and this hidden state the one that's got a blue box around it has only seen information to the left.",
    "start": "3610150",
    "end": "3616435"
  },
  {
    "text": "It hasn't seen the information of the words exciting or exclamation mark. So, what we're asking is what about the right context?",
    "start": "3616435",
    "end": "3624715"
  },
  {
    "text": "The right context of terribly is- is what exciting and the exclamation mark. And do we think that the right context is useful here?",
    "start": "3624715",
    "end": "3633040"
  },
  {
    "text": "Do we think that this is something we want to know about? And I would argue that in this example, it is actually kind of important because we've got the phrase terribly exciting.",
    "start": "3633040",
    "end": "3641695"
  },
  {
    "text": "And if you look at the word terribly in isolation, terrible or terribly usually means something bad, right?",
    "start": "3641695",
    "end": "3647005"
  },
  {
    "text": "But terribly exciting, you can mean something good because it just means very exciting. So, if you know about the right context,",
    "start": "3647005",
    "end": "3653230"
  },
  {
    "text": "the word exciting then this might quite significantly modify your perception of the meaning of the word",
    "start": "3653230",
    "end": "3658900"
  },
  {
    "text": "terribly in the context of the sentence. And especially given that we're trying to do sentiment classification, this is- this is kind of important.",
    "start": "3658900",
    "end": "3665815"
  },
  {
    "text": "So this motivates why you might want to have information from both the left and the right when you're making your representations.",
    "start": "3665815",
    "end": "3673914"
  },
  {
    "text": "Ah, if when you were a kid, your parents told you to look both ways before you cross the street. You might regard it as the same kind of idea that there's",
    "start": "3673915",
    "end": "3680619"
  },
  {
    "text": "useful information to the left and the right that you'd like to know about ah, before you do anything. Okay. So that's the motivation and um,",
    "start": "3680620",
    "end": "3687925"
  },
  {
    "text": "here is how a bidirectional RNN might work in practice. I have a kind of accidentally festive color scheme here.",
    "start": "3687925",
    "end": "3695065"
  },
  {
    "text": "And so the idea is that you have two RNNs going on. You have the forward RNN as before that encodes the sentence left to right.",
    "start": "3695065",
    "end": "3702880"
  },
  {
    "text": "And then separately, you also have a backwards RNN. And this has completely separate weights to the forward RNN.",
    "start": "3702880",
    "end": "3709135"
  },
  {
    "text": "So, the backward RNN is just doing the same thing except that it's encoding the sequence from right to left.",
    "start": "3709135",
    "end": "3716109"
  },
  {
    "text": "So, each of the hidden states is computed based on the one to the right. And then finally, you just take the hidden states from",
    "start": "3716110",
    "end": "3722500"
  },
  {
    "text": "the two RNNs and then you concatenate them together and you've got your uh, your final kind of representations.",
    "start": "3722500",
    "end": "3729385"
  },
  {
    "text": "So, in particular, if we now think about this contextual representation of the word terribly in the context,",
    "start": "3729385",
    "end": "3736329"
  },
  {
    "text": "um, this- this vector has information from both the left and the right, right?",
    "start": "3736330",
    "end": "3742180"
  },
  {
    "text": "Because you had the forwards and backwards RNNs that respectively had information from both left and right.",
    "start": "3742180",
    "end": "3747295"
  },
  {
    "text": "So the idea is that these concatenated hidden states, those can be regarded as kind of like the outputs of the bidirectional RNN.",
    "start": "3747295",
    "end": "3754734"
  },
  {
    "text": "Like if you're going to use these hidden states for any kind of further computation, then ah, it's these concatenated hidden states that you are going to be",
    "start": "3754735",
    "end": "3760780"
  },
  {
    "text": "passing on to the next part of the network. Um, here- here are the equations that just say the same thing.",
    "start": "3760780",
    "end": "3768205"
  },
  {
    "text": "So, you have your forward RNN and here we've got ah, a notation that you might not have seen before",
    "start": "3768205",
    "end": "3773995"
  },
  {
    "text": "this kind of notation where it says RNN and then in brackets, the previous hidden state and the input that's simply saying that you know,",
    "start": "3773995",
    "end": "3780775"
  },
  {
    "text": "HT is computed from the previous hidden state and the input. And RNN forward could be a vanilla or a GRU or an LSTM.",
    "start": "3780775",
    "end": "3788589"
  },
  {
    "text": "It doesn't really matter, we're looking at it abstractly. So, you have these two separate RNNs,",
    "start": "3788590",
    "end": "3796104"
  },
  {
    "text": "RNN forwards and RNN backwards and generally, these have separate weights. Although I have seen some papers where they have shared weights.",
    "start": "3796104",
    "end": "3801910"
  },
  {
    "text": "So, it seems that sometimes that does work better, perhaps maybe when you have enough training data. And then finally, we regard these concatenated hidden states which you might just",
    "start": "3801910",
    "end": "3812020"
  },
  {
    "text": "notice ht as being like the hidden state of the bidirectional RNN.",
    "start": "3812020",
    "end": "3817610"
  },
  {
    "text": "So, um, the previous diagram is pretty unwieldy. So here's a simplified diagram.",
    "start": "3818550",
    "end": "3824395"
  },
  {
    "text": "And this is probably the only kind of diagram you're going to see from now on to denote bidirectional RNNs. Um, so, what we've done here is you've just",
    "start": "3824395",
    "end": "3830770"
  },
  {
    "text": "made all of the horizontal arrows go left and right ah, to represent that this is a bidirectional RNN.",
    "start": "3830770",
    "end": "3836260"
  },
  {
    "text": "So, the other thing you should assume is that the hidden states depicted here, you know, these red- red trying- red rectangles with the dots.",
    "start": "3836260",
    "end": "3844240"
  },
  {
    "text": "You can assume that those are the concatenated forwards, backwards hidden states from the bidirectional RNN. [inaudible]",
    "start": "3844240",
    "end": "3856000"
  },
  {
    "text": "Okay. So the question is, um, would you train your forwards and backwards RNNs kind of separately,",
    "start": "3856000",
    "end": "3862060"
  },
  {
    "text": "um, on some kind of task and then maybe concatenate them together once they're separately trained networks, or would you train them all together?",
    "start": "3862060",
    "end": "3868285"
  },
  {
    "text": "Um, it seems to me that it's much more common to train them together, but I don- I don't think I've heard of anyone training them separately.",
    "start": "3868285",
    "end": "3875230"
  },
  {
    "text": "Uh, so yeah, it seems like the standard practice is usually to train them together. Does that make sense? [inaudible].",
    "start": "3875230",
    "end": "3893289"
  },
  {
    "text": "So, let's suppose that we were trying to build a sentiment classification system using the bidirectional RNN.",
    "start": "3893290",
    "end": "3899440"
  },
  {
    "text": "Then what you do, which maybe I should have pictured but I didn't have space, is uh, you would do the same thing that you were doing with the unidirectional RNN, uh,",
    "start": "3899440",
    "end": "3907420"
  },
  {
    "text": "which was, let's say an element y is min or max, um, to get your sentence encoding. Maybe you just do that but over the concatenated, um, n states.",
    "start": "3907420",
    "end": "3916490"
  },
  {
    "text": "Okay. So, an important thing to note is that, uh, when talking about applying bidirectional RNNs,",
    "start": "3916950",
    "end": "3923020"
  },
  {
    "text": "we've assumed that we actually have access to the entire input sequence. So, we assume that we have the full sentence,",
    "start": "3923020",
    "end": "3928780"
  },
  {
    "text": "uh, the movie was very exciting, and, uh, that, that was a necessary assumption in order to",
    "start": "3928780",
    "end": "3934740"
  },
  {
    "text": "be able to run the forwards and the backwards RNN, right? Um, so there are some situations where you can't assume this.",
    "start": "3934740",
    "end": "3940935"
  },
  {
    "text": "Like, for example, in Language Modeling, you only have access to the left context kind of by definition of the task.",
    "start": "3940935",
    "end": "3947355"
  },
  {
    "text": "You only know the words that have come so far. You don't know what's coming next. So, you can't use a bidirectional RNN, uh,",
    "start": "3947355",
    "end": "3954070"
  },
  {
    "text": "to do Language Modeling, uh, in the way that we've depicted here because uh, you don't have the full sequence.",
    "start": "3954070",
    "end": "3959815"
  },
  {
    "text": "However, if you do have access to the entire sequence. Uh, so, for example, if you're doing any kind of encoding",
    "start": "3959815",
    "end": "3965230"
  },
  {
    "text": "similar to the sentiment example, uh, then bidirectionally- bidirectionality is pretty powerful.",
    "start": "3965230",
    "end": "3971680"
  },
  {
    "text": "And you should probably regard it as a good thing to do by default uh, because it turns out that getting this information from",
    "start": "3971680",
    "end": "3976869"
  },
  {
    "text": "both the left and the right, uh, makes it a lot easier to learn these more useful contextual representations.",
    "start": "3976870",
    "end": "3983724"
  },
  {
    "text": "So, in particular, as a preview of something you're going to learn about later in the class, uh, there's a model called BERT, B-E-R-T,",
    "start": "3983725",
    "end": "3990610"
  },
  {
    "text": "and that stands for Bidirectional Encoder Representations from Transformers. And this is a pretty recently.",
    "start": "3990610",
    "end": "3996010"
  },
  {
    "text": "Like, a few months ago, uh, proposed system, and it's this pre-trained contextual representation system.",
    "start": "3996010",
    "end": "4002460"
  },
  {
    "text": "Um, and it's heavily reliant on the idea of bidirectionality. It turns out that the bidirectional, uh,",
    "start": "4002460",
    "end": "4008760"
  },
  {
    "text": "nature of BERT is pretty important to its success. So, you're gonna learn more about that later, but that's just an example of how bidirectionality can give you much",
    "start": "4008760",
    "end": "4015990"
  },
  {
    "text": "more uh, powerful contextual representations. Okay. So the last thing we're going to talk about today is multi-layer RNNs.",
    "start": "4015990",
    "end": "4024390"
  },
  {
    "text": "Uh, so you could regard RNNs as already being deep in some sense because you've already unrolled them over potentially very many timesteps,",
    "start": "4024390",
    "end": "4034200"
  },
  {
    "text": "and you could regard that as a kind of depth, right? But there's another way that RNNs could be deep.",
    "start": "4034200",
    "end": "4039390"
  },
  {
    "text": "So, for example, if you applied multiple RNNs kind of one after another,",
    "start": "4039390",
    "end": "4045210"
  },
  {
    "text": "then this would be a different way to make your RNN deep, and this is the idea between, uh,",
    "start": "4045210",
    "end": "4050490"
  },
  {
    "text": "behind a multi-layer RNN. So, the reason why you would want to do this is because uh,",
    "start": "4050490",
    "end": "4057315"
  },
  {
    "text": "this might allow the network to compute more complex representations. So, this is the logic betwe- behind deep networks in general.",
    "start": "4057315",
    "end": "4063839"
  },
  {
    "text": "So, if you're familiar with the idea of why deeper is better for let's say convolutional networks, then this is kind of the same logic.",
    "start": "4063840",
    "end": "4069195"
  },
  {
    "text": "It's saying that, uh, your lower RNNs might be computing lower-level features like,",
    "start": "4069195",
    "end": "4074760"
  },
  {
    "text": "let's suppose maybe it's keeping track of syntax, and your higher  level RNN's gonna compute higher-level features like maybe semantics.",
    "start": "4074760",
    "end": "4081700"
  },
  {
    "text": "And a note on terminology, these are sometimes called stacked RNNs. So, this works much as you'd imagine.",
    "start": "4082100",
    "end": "4089640"
  },
  {
    "text": "So here's an example of how a multi-layer RNN might work. Uh, if it's three layers.",
    "start": "4089640",
    "end": "4095609"
  },
  {
    "text": "So this is a unidirectional RNN, but it could be bidirectional, um, If you have access to the entire input sequence.",
    "start": "4095610",
    "end": "4103679"
  },
  {
    "text": "So, I guess the, the main thing is that the hidden states from one RNN layer are going to",
    "start": "4103680",
    "end": "4109290"
  },
  {
    "text": "be used as the inputs to the RNN layer that's coming next.",
    "start": "4109290",
    "end": "4115390"
  },
  {
    "text": "Um, any questions on this? Yeah.",
    "start": "4115400",
    "end": "4125270"
  },
  {
    "text": "[inaudible]. That's a great question. So the question I think it's about the order of computation. What order will you compute all of these hidden states in?",
    "start": "4125270",
    "end": "4132390"
  },
  {
    "text": "I suppose there's some flexibility, right? But you could compute all of the step one ones,",
    "start": "4132390",
    "end": "4139640"
  },
  {
    "text": "like all of the V ones and then all of the movie ones, or you could do all of RNN layer one and then all of RNN layer two.",
    "start": "4139640",
    "end": "4145969"
  },
  {
    "text": "So, it's- I think that, um, when you- you know, call the PyTorch function to do a multi-layer RNN,",
    "start": "4145970",
    "end": "4151054"
  },
  {
    "text": "it will do all of RNN layer one, then two, then three. That's what I think happens. But it seems like logically,",
    "start": "4151055",
    "end": "4156270"
  },
  {
    "text": "there's no reason why you couldn't do it the other way. Yep?  [inaudible].",
    "start": "4156270",
    "end": "4170190"
  },
  {
    "text": "Yes, yes. That's a great point as well. Um, so uh, someone pointed out that if they were bidirectional,",
    "start": "4170190",
    "end": "4175949"
  },
  {
    "text": "then you no longer have that flexibility. You would have to do all of layer one before layer two. Yeah, good point. Anyone else?",
    "start": "4175950",
    "end": "4184089"
  },
  {
    "text": "Okay. Uh, so mostly RNNs in practice,",
    "start": "4187040",
    "end": "4192480"
  },
  {
    "text": "um, this tends to perform pretty well, uh, in that when I look at, um,",
    "start": "4192480",
    "end": "4198090"
  },
  {
    "text": "RNN-based systems that are doing very well on some kind of task, they usually are some kind of multi-layer RNN, um,",
    "start": "4198090",
    "end": "4204330"
  },
  {
    "text": "but they certainly aren't as deep as the deep convolutional or feed-forward networks you might have seen in,",
    "start": "4204330",
    "end": "4209429"
  },
  {
    "text": "for example, image tasks. So whereas, you know, very deep convolutional networks, I think hundreds of layers now, um,",
    "start": "4209430",
    "end": "4214469"
  },
  {
    "text": "you certainly aren't getting RNNs that are that deep. So, for example, um, in this paper from, uh, Google, uh,",
    "start": "4214470",
    "end": "4222300"
  },
  {
    "text": "they're doing this kind of large hyperparameter search for neural machine translation to find which kinds of hyperparameters work well for NMT.",
    "start": "4222300",
    "end": "4229740"
  },
  {
    "text": "And in this paper, they found that um, two to four layers was best for the encoder RNN, and four layers was best for the decoder RNN.",
    "start": "4229740",
    "end": "4236280"
  },
  {
    "text": "Uh, you'll find out more about what encoder and decoder mean next time. Um, but those are fairly small numbers. Although they did find that if you add these skip",
    "start": "4236280",
    "end": "4243330"
  },
  {
    "text": "connections or these dense connections, um, then it makes it much easier to learn some even deeper RNNs more effectively,",
    "start": "4243330",
    "end": "4249750"
  },
  {
    "text": "like, maybe up to eight layers, but these certainly aren'tx  hundreds of layers deep. And one of the reasons why, uh,",
    "start": "4249750",
    "end": "4255750"
  },
  {
    "text": "RNNs don't tend to be nearly as deep as these other kinds of networks, is that because as we commented before,",
    "start": "4255750",
    "end": "4261675"
  },
  {
    "text": "RNNs have to be computed, uh, sequentially; they can't be computed in parallel. This means that they're pretty expensive to compute.",
    "start": "4261675",
    "end": "4267330"
  },
  {
    "text": "If you have this depth in like, two-dimensions, you have the depth over the timesteps and then the depth over the RNN layer is two,",
    "start": "4267330",
    "end": "4273675"
  },
  {
    "text": "then it beco- it becomes very, very expensive to compute these, these RNNs. So, that's another reason why they don't get very deep.",
    "start": "4273675",
    "end": "4279885"
  },
  {
    "text": "Uh, so again, we just mentioned transformers. Uh, you gonna learn about transformers later.",
    "start": "4279885",
    "end": "4285165"
  },
  {
    "text": "But these, it seems, um, can be deeper fro- from what I can tell of,",
    "start": "4285165",
    "end": "4290400"
  },
  {
    "text": "of what people are using these days. Transformer-based networks can be pretty deep. So, uh, but for example,",
    "start": "4290400",
    "end": "4295530"
  },
  {
    "text": "there's a 24-layer version and a 12-layer version, um, and admittedly, that was trained by Google, and they have a lot of computational power.",
    "start": "4295530",
    "end": "4301860"
  },
  {
    "text": "Um, but I think part of the reason why these transformer-based networks can be quite deep, is that they have a lot of these skipping like connections.",
    "start": "4301860",
    "end": "4308220"
  },
  {
    "text": "In fact, the whole um, innovation of transformers is that they're built on a lot of, kind of, skip connections. Okay, any questions?",
    "start": "4308220",
    "end": "4317520"
  },
  {
    "text": "We're almost done. Okay. All right. So, uh, here's a summary of what we've learned today.",
    "start": "4317520",
    "end": "4324030"
  },
  {
    "text": "I know it's been a lot of information. Um, but I think here are four practical takeaways from today that, uh,",
    "start": "4324030",
    "end": "4331530"
  },
  {
    "text": "are probably useful to you in your projects, even if you, um, uh, even if you",
    "start": "4331530",
    "end": "4337800"
  },
  {
    "text": "didn't find them very interesting in themselves they're probably pretty useful. So, the first one is that LSTMs are very powerful.",
    "start": "4337800",
    "end": "4344190"
  },
  {
    "text": "They're certainly a lot powerful than, uh, more powerful than Vanila RNNs. Um, GRUs are also more powerful than, uh, Vanila RNNs.",
    "start": "4344190",
    "end": "4351450"
  },
  {
    "text": "Uh, and the only difference that is consistently the same is that GRUs are faster than LSTMs.",
    "start": "4351450",
    "end": "4357480"
  },
  {
    "text": "The next one is that you should probably clip your gradients, because if you don't clip your gradients, you're in danger of walking off cliffs and then ending up with NaNs in your model.",
    "start": "4357480",
    "end": "4367050"
  },
  {
    "text": "Uh, the next tip is that bidirectionality is useful if you can apply it.",
    "start": "4367050",
    "end": "4372105"
  },
  {
    "text": "And, basically, anytime when you have access to the entire input sequence, you can apply bidirectionality,",
    "start": "4372105",
    "end": "4377850"
  },
  {
    "text": "so you should probably do that by default. And then the last tip is that multi-layer RNNs are pretty powerful.",
    "start": "4377850",
    "end": "4384140"
  },
  {
    "text": "And again, you should probably do that if you, uh, have enough computational power to do so. But if you're going to make your multi-layer RNN pretty deep,",
    "start": "4384140",
    "end": "4391405"
  },
  {
    "text": "then you might need skip connections. All right. Thanks [NOISE].",
    "start": "4391405",
    "end": "4402840"
  }
]