[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "footings are all the students that hearing us it says something different that what you study until now it's a",
    "start": "11310",
    "end": "18250"
  },
  {
    "text": "different way of computing different type of architecture which is very useful for a machine learning so that",
    "start": "18250",
    "end": "26830"
  },
  {
    "text": "we'll talk today with agenda we'll start with with introduction to associative a",
    "start": "26830",
    "end": "33220"
  },
  {
    "text": "processing we see some useless example such a similarity search a large-scale I",
    "start": "33220",
    "end": "40300"
  },
  {
    "text": "attention computing for a for a NLP a few short one short learning based on",
    "start": "40300",
    "end": "47680"
  },
  {
    "text": "associative computing we show some of the software model which is based on the turns of flow in some future future ok",
    "start": "47680",
    "end": "56769"
  },
  {
    "start": "56000",
    "end": "128000"
  },
  {
    "text": "so what we say that matrix multiplication is not enough so actually",
    "start": "56769",
    "end": "61960"
  },
  {
    "text": "all what we know today the gpgpu try to improve the matrix multiplication but",
    "start": "61960",
    "end": "67270"
  },
  {
    "text": "that we know when if you look on the next iteration a new type of a machine",
    "start": "67270",
    "end": "73570"
  },
  {
    "text": "learning algorithm we see that we need high precision floating point operation",
    "start": "73570",
    "end": "79770"
  },
  {
    "text": "we need to support a multi-position from one bit to bit for bit etcetera for for",
    "start": "79770",
    "end": "85600"
  },
  {
    "text": "inference for real-time inference we have to do some linearity scalar for big",
    "start": "85600",
    "end": "91420"
  },
  {
    "text": "data we want to add want you to chip more cheap mobile together we want a nearly linear scale we have some",
    "start": "91420",
    "end": "98500"
  },
  {
    "text": "functions that are serial operations that cannot run in parallel with support",
    "start": "98500",
    "end": "103990"
  },
  {
    "text": "for example top K recommendation speech recognition classification and also",
    "start": "103990",
    "end": "111310"
  },
  {
    "text": "heavy computation such as non-linearity a exponent for example in softmax and of",
    "start": "111310",
    "end": "118600"
  },
  {
    "text": "course we have to support it is been been wet it been do a bandwidths to get",
    "start": "118600",
    "end": "124540"
  },
  {
    "text": "high speed in a low power ok let's start",
    "start": "124540",
    "end": "130060"
  },
  {
    "start": "128000",
    "end": "278000"
  },
  {
    "text": "from the 80s in the 80s this is the von Neumann architecture we know that there",
    "start": "130060",
    "end": "137260"
  },
  {
    "text": "is a memory there the CPU just the CP the memory is a dense",
    "start": "137260",
    "end": "143260"
  },
  {
    "text": "but slower in the CPU is just a logic and in the butt run runs faster then",
    "start": "143260",
    "end": "153760"
  },
  {
    "text": "when based on the growth of of of",
    "start": "153760",
    "end": "159190"
  },
  {
    "text": "Morelos a CPU become become faster in order to to support this or to support",
    "start": "159190",
    "end": "165849"
  },
  {
    "text": "the bandwidths people start adding more and more memory inside the CPU the cache this is about the 90s for example but in",
    "start": "165849",
    "end": "175750"
  },
  {
    "text": "the - 2006 there was a very very high very inefficient way to increase the",
    "start": "175750",
    "end": "183190"
  },
  {
    "text": "frequency so things become flattening and but more slows a number of",
    "start": "183190",
    "end": "191379"
  },
  {
    "text": "transistors that we can we can put in a chip hence it can continue to to",
    "start": "191379",
    "end": "197349"
  },
  {
    "text": "increase so in this point we start talking on parallel computing at two",
    "start": "197349",
    "end": "202359"
  },
  {
    "text": "cores at the same at the same CPU talking to a memory but there is but",
    "start": "202359",
    "end": "210250"
  },
  {
    "text": "there there is a okay so here okay well",
    "start": "210250",
    "end": "222579"
  },
  {
    "text": "we have to put some local in global memory not not just a local man we have to add local and global memory to",
    "start": "222579",
    "end": "229870"
  },
  {
    "text": "support to support a the bandwidth but as we can see here is that memory",
    "start": "229870",
    "end": "234880"
  },
  {
    "text": "becomes is a larger part of the chip we continue to add more and more memory on",
    "start": "234880",
    "end": "241169"
  },
  {
    "text": "top of a of a logic now even in GP GPUs",
    "start": "241169",
    "end": "246400"
  },
  {
    "text": "who have durham who have caches we still have we still have a memory so we have",
    "start": "246400",
    "end": "252879"
  },
  {
    "text": "very high power larger size expensive so what next so this is a von Neumann this",
    "start": "252879",
    "end": "259239"
  },
  {
    "text": "is a von Neumann architecture so what's next and they took from one of this time for",
    "start": "259239",
    "end": "265449"
  },
  {
    "text": "presentation as we can see here that the power consumption to bring data from the memory to the CPU is orders magnitude",
    "start": "265449",
    "end": "273159"
  },
  {
    "text": "higher than compute inside memory so now I'm going to show you how we",
    "start": "273159",
    "end": "281139"
  },
  {
    "start": "278000",
    "end": "312000"
  },
  {
    "text": "change the roles memory as we know traditional memory as we know are much",
    "start": "281139",
    "end": "288729"
  },
  {
    "text": "smarter than we think we can do a lot in standard conventional memory it's a not",
    "start": "288729",
    "end": "296649"
  },
  {
    "text": "a special memory it's not the other type of memory it's standard standard memory",
    "start": "296649",
    "end": "302709"
  },
  {
    "text": "it's not a quantum memory it's a standard memory that you see how smart",
    "start": "302709",
    "end": "308919"
  },
  {
    "text": "is a memory and what we can do with the memory so with APU which call it",
    "start": "308919",
    "end": "314469"
  },
  {
    "start": "312000",
    "end": "367000"
  },
  {
    "text": "associative processing unit that we will see as you can see here there is a memory which is the memory and compute",
    "start": "314469",
    "end": "321069"
  },
  {
    "text": "are in the same die connected connect together the Threepio and the memory are",
    "start": "321069",
    "end": "326110"
  },
  {
    "text": "connecting together it's the same and there is a simple view see how it's",
    "start": "326110",
    "end": "335379"
  },
  {
    "text": "wrong what exactly what we mean when we say compute computing memory it's not the memory and Sen and processor in the",
    "start": "335379",
    "end": "343299"
  },
  {
    "text": "same in the same chip is a memory as a processing is the same when I say the",
    "start": "343299",
    "end": "349299"
  },
  {
    "text": "same this means that the instruction it just read and write there is no addition or multiplication with read and write we can do addition",
    "start": "349299",
    "end": "356529"
  },
  {
    "text": "with read and write we can do multiplication just to instruction right instruction and right instruction that's",
    "start": "356529",
    "end": "362889"
  },
  {
    "text": "it this is the microcode now we'll see how how its work as we see here this is",
    "start": "362889",
    "end": "369759"
  },
  {
    "start": "367000",
    "end": "557000"
  },
  {
    "text": "again volume and computing what is a computer computer is what is lu lu is",
    "start": "369759",
    "end": "377349"
  },
  {
    "text": "just a machine with logic that has to read deleted from the memory one row at",
    "start": "377349",
    "end": "386139"
  },
  {
    "text": "a time one others at the time and 20 states there is a logic remove chinese state this is a computer the Lu has to change",
    "start": "386139",
    "end": "393519"
  },
  {
    "text": "the state of the memory has to read the data from the memory change state and write it back changing state so can we",
    "start": "393519",
    "end": "401589"
  },
  {
    "text": "achieve can we change the state take the memory this is 80 years people what they",
    "start": "401589",
    "end": "407529"
  },
  {
    "text": "do is just change state in the mirror so there is a different way to change the state not just bring the data to",
    "start": "407529",
    "end": "414820"
  },
  {
    "text": "tell you yes the conventional memory has the ability to change state during the",
    "start": "414820",
    "end": "422199"
  },
  {
    "text": "read and write operation you will see now suppose this is a memory this is a",
    "start": "422199",
    "end": "428560"
  },
  {
    "text": "memory with dead I want to change the state without CPU just with readwrite I",
    "start": "428560",
    "end": "435460"
  },
  {
    "text": "want to do an operation without connecting to the CPU just to the memory",
    "start": "435460",
    "end": "441389"
  },
  {
    "text": "what is the trick very simple",
    "start": "441389",
    "end": "446400"
  },
  {
    "text": "instead of actions one row at a time I artist multiple row many two three",
    "start": "447660",
    "end": "455199"
  },
  {
    "text": "four ten thousand reasonable and many for right so what what I'll get here",
    "start": "455199",
    "end": "463720"
  },
  {
    "text": "this is a bit line I know that I can read the bit line but if on this bit",
    "start": "463720",
    "end": "469300"
  },
  {
    "text": "line I just charge zero and one many zero one",
    "start": "469300",
    "end": "474880"
  },
  {
    "text": "I get something merge all of this function but no this is not emerging",
    "start": "474880",
    "end": "481330"
  },
  {
    "text": "this is just a simple operation so the memory as it's built today over",
    "start": "481330",
    "end": "488020"
  },
  {
    "text": "the last eight years his ability to do no repression during the bit line so",
    "start": "488020",
    "end": "495550"
  },
  {
    "text": "what we see here the memo is a memory is a bit line the bit lines itself are",
    "start": "495550",
    "end": "502169"
  },
  {
    "text": "changing the state during the read and write the bit line the wire the wire is",
    "start": "502169",
    "end": "508210"
  },
  {
    "text": "a gate the wire of the memo is the gate the data is the data and the War of the",
    "start": "508210",
    "end": "514719"
  },
  {
    "text": "gate so if it's a gate if we change state in the memory why we have to write",
    "start": "514719",
    "end": "520990"
  },
  {
    "text": "it to the CPU why just not keep it here so advocacy hew standard memory on the",
    "start": "520990",
    "end": "528430"
  },
  {
    "text": "grid line satisfied Moore's law because we have a sister if we have a system that can be Noren",
    "start": "528430",
    "end": "535500"
  },
  {
    "text": "and it satisfied the Morgan law so this meant that we can do any type of fraction addition multiplication",
    "start": "535500",
    "end": "543110"
  },
  {
    "text": "floating-point similarity search CN n DN n all inside a memory because we satisfy",
    "start": "543110",
    "end": "553530"
  },
  {
    "text": "the Morgan loop example now let's see just a we'll just run them to stable I",
    "start": "553530",
    "end": "560430"
  },
  {
    "start": "557000",
    "end": "774000"
  },
  {
    "text": "have ABC as input the output we have to",
    "start": "560430",
    "end": "566340"
  },
  {
    "text": "implement this by a gate you know this is Colonel table we know this with a",
    "start": "566340",
    "end": "572100"
  },
  {
    "text": "gate which is a logic function with a car no not a not b plus BC but this is",
    "start": "572100",
    "end": "583470"
  },
  {
    "text": "equal it put not not it's say I get not not a not C so this is the function",
    "start": "583470",
    "end": "591360"
  },
  {
    "text": "which is as you can see here this is an N of NAND so in memory can do nor on an",
    "start": "591360",
    "end": "600990"
  },
  {
    "text": "orange is the same if you define zero as a high and one is low it's an N so then",
    "start": "600990",
    "end": "607470"
  },
  {
    "text": "nor is the same so we have meant of Ned here so what we do here we do just wait",
    "start": "607470",
    "end": "618900"
  },
  {
    "text": "wait read and write read to input a note and see not and write to some temporary",
    "start": "618900",
    "end": "626640"
  },
  {
    "text": "different cell in the memory here we open this two-bit line a two-word line",
    "start": "626640",
    "end": "632760"
  },
  {
    "text": "and write to teach you and then with combines then another we just read t1",
    "start": "632760",
    "end": "640920"
  },
  {
    "text": "and t2 and write it invited to the destination so also so if you have",
    "start": "640920",
    "end": "652380"
  },
  {
    "text": "because it's a memory it's not like a CPU oh it's just bit like if you have",
    "start": "652380",
    "end": "658620"
  },
  {
    "text": "ten million of that 20 millions at 1 billion which technical clocks to do",
    "start": "658620",
    "end": "663960"
  },
  {
    "text": "that because it's a memory so every bit line now become a process or a process",
    "start": "663960",
    "end": "669510"
  },
  {
    "text": "of that can do floating-point 16-bit in one handling while in LT clocks but if",
    "start": "669510",
    "end": "675420"
  },
  {
    "text": "we really know that forget those beta operations so every midterm takes one",
    "start": "675420",
    "end": "684960"
  },
  {
    "text": "o'clock so memory traditional memory is a Kavanagh table a machine parallel car",
    "start": "684960",
    "end": "694440"
  },
  {
    "text": "notable machine traditional memories standard memory don't have to design just change this others controller with",
    "start": "694440",
    "end": "702930"
  },
  {
    "text": "the way that you can read and write multiple row at the same time so it's",
    "start": "702930",
    "end": "708150"
  },
  {
    "text": "actually as you can see a different type of computing it's not a CPU that just",
    "start": "708150",
    "end": "714779"
  },
  {
    "text": "bring the data by the CPU just control tell the memory just I want to do the",
    "start": "714779",
    "end": "720000"
  },
  {
    "text": "matrix multiplication is a and well it really does tell me that what the CPU is doing here another example suppose we",
    "start": "720000",
    "end": "729240"
  },
  {
    "text": "have the 8 bit 8 vector a 32 million number I want to add with another 32",
    "start": "729240",
    "end": "736200"
  },
  {
    "text": "million numbers or sitting in standard memory I looked on all I hoped I",
    "start": "736200",
    "end": "741480"
  },
  {
    "text": "implement the truth tables food either truth tables take four clocks so I go I I'm doing the truth table of the list if",
    "start": "741480",
    "end": "749010"
  },
  {
    "text": "every every bit slice at the time so it's take four clocks four beats lies",
    "start": "749010",
    "end": "754580"
  },
  {
    "text": "so it takes 32 clocks to do this addition in 532 million divided if it's",
    "start": "754580",
    "end": "760650"
  },
  {
    "text": "32 clock divided by 32 millions and run the membrane one gigahertz here just",
    "start": "760650",
    "end": "765870"
  },
  {
    "text": "simple examples that we can get 1 beta ops easily in the Des Moines ok this is",
    "start": "765870",
    "end": "775830"
  },
  {
    "start": "774000",
    "end": "883000"
  },
  {
    "text": "just the beginning this is just warming up we can do much more in the memory",
    "start": "775830",
    "end": "781020"
  },
  {
    "text": "they just so sure you float better we can do logic we can do more than memory",
    "start": "781020",
    "end": "787339"
  },
  {
    "text": "here we go now in we know that in deep learning we",
    "start": "787339",
    "end": "794210"
  },
  {
    "text": "want to do addition with application we want to do in memory to set bandwidth but there's many many cases that we want",
    "start": "794210",
    "end": "801260"
  },
  {
    "text": "to do search there is similarity search and exact search we want to do search we have a pattern and we have to look to",
    "start": "801260",
    "end": "807470"
  },
  {
    "text": "Northern all the memory as we say that we want to do some Teresa we want we don't want to add another memory another",
    "start": "807470",
    "end": "815030"
  },
  {
    "text": "memory a to that so if I have for example here a key here he 0 1 1 0 and I",
    "start": "815030",
    "end": "823220"
  },
  {
    "text": "want to search to search it here in the memory so he was the 1 1 so I want to",
    "start": "823220",
    "end": "830960"
  },
  {
    "text": "search so again this is traditional memory so what we do here we just",
    "start": "830960",
    "end": "837680"
  },
  {
    "text": "duplicating the data one line in one o'clock so if it's probably like four o'clock we duplicate duplicate with",
    "start": "837680",
    "end": "845960"
  },
  {
    "text": "inverse we duplicate with inverse the key now all places where there is",
    "start": "845960",
    "end": "853190"
  },
  {
    "text": "someone in the key opens reasonable and if and this guy looked only zero in its",
    "start": "853190",
    "end": "862730"
  },
  {
    "text": "nor operation its get one and here is get zero so it's match so just again the",
    "start": "862730",
    "end": "869810"
  },
  {
    "text": "key just opens a bit line is open sorry but it is open there's a the word",
    "start": "869810",
    "end": "875030"
  },
  {
    "text": "line just multiple reasonable that what we do okay but some time we want to we",
    "start": "875030",
    "end": "881600"
  },
  {
    "text": "have some cases that we have don't care 0 1 and don't care and we want to search",
    "start": "881600",
    "end": "887720"
  },
  {
    "start": "883000",
    "end": "987000"
  },
  {
    "text": "this 0 1 1 0 here so here they don't care don't care so I want that I want a",
    "start": "887720",
    "end": "894020"
  },
  {
    "text": "tag here and tag here to say that I found this one this guy so what is the trick here what we do here first of all",
    "start": "894020",
    "end": "901790"
  },
  {
    "text": "we put 0 here and put the data except",
    "start": "901790",
    "end": "907470"
  },
  {
    "text": "duplicate again the key opens reasonable get one anyone so okay now what we can",
    "start": "907470",
    "end": "922750"
  },
  {
    "text": "see that when we have a memory itself we know that it's a bit if it to bit it's a",
    "start": "922750",
    "end": "931779"
  },
  {
    "text": "two bit and also one input nor gate and one tecum gate if we take three it can",
    "start": "931779",
    "end": "939970"
  },
  {
    "text": "distribute the three input nor gate two input so we have all this we all this type of this type combination and and",
    "start": "939970",
    "end": "948640"
  },
  {
    "text": "there's no limit to how we can define it so there is a lot of room here for to do a lot of research how we can do more in",
    "start": "948640",
    "end": "955390"
  },
  {
    "text": "the memory that here okay",
    "start": "955390",
    "end": "959700"
  },
  {
    "text": "now what we can summarize this part is that we can looked on all bit line every",
    "start": "961290",
    "end": "968649"
  },
  {
    "text": "bit line is a different number as a vector we call it vector a and vector B we can do C we can if you can do a",
    "start": "968649",
    "end": "977110"
  },
  {
    "text": "normal run and operation it's depend on number of clock but we can implement any function we call it between alien be",
    "start": "977110",
    "end": "985290"
  },
  {
    "text": "what else we can do is a chip actually they were going to be a chip that it's",
    "start": "985290",
    "end": "992680"
  },
  {
    "start": "987000",
    "end": "1019000"
  },
  {
    "text": "not just science fiction it's going to have a chip by tapping out in in few",
    "start": "992680",
    "end": "998950"
  },
  {
    "text": "months it's going to be a product say mid mid next year with this associative",
    "start": "998950",
    "end": "1004170"
  },
  {
    "text": "agent so we have in the chipper capability to move section back and",
    "start": "1004170",
    "end": "1009209"
  },
  {
    "text": "forth before doing the operation in this give us the ability to do never the",
    "start": "1009209",
    "end": "1014400"
  },
  {
    "text": "Pershing's our example convolutional see FFT etc if we combine compute and and",
    "start": "1014400",
    "end": "1023730"
  },
  {
    "start": "1019000",
    "end": "1046000"
  },
  {
    "text": "the exact search we have for example we have a database we search as this twenty",
    "start": "1023730",
    "end": "1030329"
  },
  {
    "text": "we found that there are three we can count them inside and there's a lot of",
    "start": "1030329",
    "end": "1035339"
  },
  {
    "text": "applications for searching count like random forest nearest neighbor already so many find many many application in",
    "start": "1035339",
    "end": "1043120"
  },
  {
    "text": "any application together now if we compare ear this is a logarithmic scale",
    "start": "1043120",
    "end": "1050650"
  },
  {
    "start": "1046000",
    "end": "1248000"
  },
  {
    "text": "in this in a linear scale so here is this is a ap use associative this is the",
    "start": "1050650",
    "end": "1058360"
  },
  {
    "text": "GPU this is the FPGA and this is the CPU",
    "start": "1058360",
    "end": "1064240"
  },
  {
    "text": "so the different other pieces this is an FPGA sorry this is this is the GPGPU",
    "start": "1064240",
    "end": "1071110"
  },
  {
    "text": "right now the GPU and single chip can",
    "start": "1071110",
    "end": "1076210"
  },
  {
    "text": "support them eight teraflops and running in a small chip with support 1.6",
    "start": "1076210",
    "end": "1082630"
  },
  {
    "text": "teraflop so we are we are about the same order of magnitude as they as a GPU",
    "start": "1082630",
    "end": "1090580"
  },
  {
    "text": "actually the GPU starting from graphic processor so they push the matrix multiplication we all started we are a",
    "start": "1090580",
    "end": "1096910"
  },
  {
    "text": "memory company we were memory company and we started from memory and we we we move from memory to compute so so our",
    "start": "1096910",
    "end": "1105070"
  },
  {
    "text": "background is a memory to bring to do so we are pushing in this direction and the GPU to you push into this direction but",
    "start": "1105070",
    "end": "1112030"
  },
  {
    "text": "we have also solutions for that because in right now in in teraflops per that we",
    "start": "1112030",
    "end": "1121150"
  },
  {
    "text": "are more than 100 Giga frost profit which is better than better than the GPGPU but actually this not this not",
    "start": "1121150",
    "end": "1128140"
  },
  {
    "text": "this is not so important because it is we have the multi precision topic I",
    "start": "1128140",
    "end": "1134080"
  },
  {
    "text": "search later on you will see a soft max non-linearity scalability this what we",
    "start": "1134080",
    "end": "1139929"
  },
  {
    "text": "can get with a with the associative processing so here the point here that",
    "start": "1139929",
    "end": "1147070"
  },
  {
    "text": "in in in CPU in in CPU we send we send",
    "start": "1147070",
    "end": "1155320"
  },
  {
    "text": "others to the memory and in place computing in APU with we search by",
    "start": "1155320",
    "end": "1161380"
  },
  {
    "text": "content in CPU fetch the data from the memory and we mark the data in place so",
    "start": "1161380",
    "end": "1168040"
  },
  {
    "text": "we can mark the data and do the operation only two-bit line which we already mark we we",
    "start": "1168040",
    "end": "1175750"
  },
  {
    "text": "compute severally PACA we compute everything everything in place so this is the this is a different now let's",
    "start": "1175750",
    "end": "1183310"
  },
  {
    "text": "look a little bit about architecture internally there are many many banks in",
    "start": "1183310",
    "end": "1189430"
  },
  {
    "text": "many sections and every bit line every bit line I can do some nor own end",
    "start": "1189430",
    "end": "1197170"
  },
  {
    "text": "operation if you return back to our to our a car notable example here here we",
    "start": "1197170",
    "end": "1206470"
  },
  {
    "text": "want to implement this to an end and suppose we have this data here and and and we can implement in every section",
    "start": "1206470",
    "end": "1214680"
  },
  {
    "text": "this min term in this min term because it has disconnected so this is bit line actually it is 24 24 rolls in every",
    "start": "1214680",
    "end": "1223570"
  },
  {
    "text": "section in the chip now we are switch those two section together and and",
    "start": "1223570",
    "end": "1233130"
  },
  {
    "text": "connect the nor between the to read and get then a Norlin and get the final",
    "start": "1233130",
    "end": "1238690"
  },
  {
    "text": "result and then disconnected and continue this is the way how how it work",
    "start": "1238690",
    "end": "1244330"
  },
  {
    "text": "if you want to do some neighborhood operation who have the ability to ship this right to the left",
    "start": "1244330",
    "end": "1251170"
  },
  {
    "start": "1248000",
    "end": "1273000"
  },
  {
    "text": "connect/disconnect so we have all this ability in the memory so actually with",
    "start": "1251170",
    "end": "1257140"
  },
  {
    "text": "the readwrite operation and with the multi section is switches left right so",
    "start": "1257140",
    "end": "1265140"
  },
  {
    "text": "we built a library that support we have no limitation which function to do okay",
    "start": "1265140",
    "end": "1273760"
  },
  {
    "start": "1273000",
    "end": "1286000"
  },
  {
    "text": "so this is a retoucher has many call it MLB mm logic block memory logic because",
    "start": "1273760",
    "end": "1281530"
  },
  {
    "text": "we convert memory to logic and this is this is like the layout where the layout",
    "start": "1281530",
    "end": "1289120"
  },
  {
    "start": "1286000",
    "end": "1291000"
  },
  {
    "text": "of the chip so if we compare this layout to to to standard layout of GTB TV what",
    "start": "1289120",
    "end": "1295780"
  },
  {
    "start": "1291000",
    "end": "1433000"
  },
  {
    "text": "we see here here we have in gpgpu there is a block that dedicated to floating",
    "start": "1295780",
    "end": "1302050"
  },
  {
    "text": "point 64 blocks are dedicated to 232 every function every function has",
    "start": "1302050",
    "end": "1309730"
  },
  {
    "text": "different block here it's a it's it's it's based on a memorable it's",
    "start": "1309730",
    "end": "1314980"
  },
  {
    "text": "multifunction here for example here we can sometimes do floating-point sometimes we want to do softmax",
    "start": "1314980",
    "end": "1321720"
  },
  {
    "text": "sometimes we want to do it okay so it's fully programmable we don't lose if for",
    "start": "1321720",
    "end": "1328660"
  },
  {
    "text": "example this guy here we don't want to do floating-point 64 so all this area is",
    "start": "1328660",
    "end": "1335260"
  },
  {
    "text": "not useful it's not useful here's all the area everything is working all the",
    "start": "1335260",
    "end": "1341530"
  },
  {
    "text": "time to run our algorithm and of course",
    "start": "1341530",
    "end": "1347500"
  },
  {
    "text": "the power is much lower because we don't bring data to external memory just at",
    "start": "1347500",
    "end": "1354070"
  },
  {
    "text": "the beginning with a chunk the data and we do most of the computation inside the memory let's now look on some some some",
    "start": "1354070",
    "end": "1366490"
  },
  {
    "text": "example example applications okay okay",
    "start": "1366490",
    "end": "1379620"
  },
  {
    "text": "this is a table top of the KD K nearest neighbor K nearest neighbor here we have",
    "start": "1379620",
    "end": "1388200"
  },
  {
    "text": "in this example we have a s 3 groups",
    "start": "1388200",
    "end": "1393840"
  },
  {
    "text": "called the trailing green and blue a divided two-dimensional here x and y and",
    "start": "1393840",
    "end": "1402030"
  },
  {
    "text": "and we have a new items coming in and you want to decided to classify to which",
    "start": "1402030",
    "end": "1409540"
  },
  {
    "text": "groups its belong so what can use member say that for example k equal 4 find the",
    "start": "1409540",
    "end": "1417660"
  },
  {
    "text": "finds a for finds the four nearest neighbor of that and give me the",
    "start": "1417660",
    "end": "1425110"
  },
  {
    "text": "majority the majority is green in this case so it's it it is it is a green so",
    "start": "1425110",
    "end": "1432490"
  },
  {
    "text": "but but in real life will not have only a few product we have",
    "start": "1432490",
    "end": "1438480"
  },
  {
    "start": "1433000",
    "end": "1670000"
  },
  {
    "text": "billion of products and dimension is not 2x my dimension K be 100 feature 200",
    "start": "1438480",
    "end": "1445350"
  },
  {
    "text": "feature can be can be very big and K is not 3 sometimes want to find K equal",
    "start": "1445350",
    "end": "1450510"
  },
  {
    "text": "10,000 so it's this problem is cannot be",
    "start": "1450510",
    "end": "1456809"
  },
  {
    "text": "implemented in GPGPU and in services so it's take it can be implemented but it's",
    "start": "1456809",
    "end": "1462150"
  },
  {
    "text": "tech times takes hours thanks thanks here he will have the sauce ative memory",
    "start": "1462150",
    "end": "1468720"
  },
  {
    "text": "we just we define ok this is a bit line ok we have 100 feature each feature is",
    "start": "1468720",
    "end": "1475890"
  },
  {
    "text": "16-bit 16-bit by by 100 is 1.6 kept it ok",
    "start": "1475890",
    "end": "1481169"
  },
  {
    "text": "each we define every bit line 1.6 1.6 k bit and we dump them to get in the",
    "start": "1481169",
    "end": "1489600"
  },
  {
    "text": "memory then we have a query we are we",
    "start": "1489600",
    "end": "1495330"
  },
  {
    "text": "just we open the right enable and we are in 1 o'clock that it took o 0 & 1 we",
    "start": "1495330",
    "end": "1501900"
  },
  {
    "text": "distribute the date we distribute the query in all the memory in 2 o'clock not",
    "start": "1501900",
    "end": "1507059"
  },
  {
    "text": "1 by 1 in 2 o'clock with the stability query then we want to do operations we don't two-bit line with the norm and",
    "start": "1507059",
    "end": "1513540"
  },
  {
    "text": "operation with the logic as I show you before so so what would you here is here",
    "start": "1513540",
    "end": "1521549"
  },
  {
    "text": "we want to do some cosine similarity cosine similarity is a dot product and",
    "start": "1521549",
    "end": "1527160"
  },
  {
    "text": "add and it's always a dot product between between the two vectors and and",
    "start": "1527160",
    "end": "1534770"
  },
  {
    "text": "there are some some some normal little normalization so this is cosine I can do",
    "start": "1534770",
    "end": "1540540"
  },
  {
    "text": "hemming search any any type any type of that everything is memory then I show",
    "start": "1540540",
    "end": "1549240"
  },
  {
    "text": "you the next slide I found the top KEK in associative computing we can compute",
    "start": "1549240",
    "end": "1556679"
  },
  {
    "text": "top K is this is the owner literature that they can compute the top K in all",
    "start": "1556679",
    "end": "1561720"
  },
  {
    "text": "of one complexity this means that if we have 1 billion number and a 1 I want to",
    "start": "1561720",
    "end": "1568049"
  },
  {
    "text": "find the top 10,000 its Texas sometimes to find the top ten top",
    "start": "1568049",
    "end": "1574710"
  },
  {
    "text": "billion NOK top three any number same time all of one I will show you maybe",
    "start": "1574710",
    "end": "1582570"
  },
  {
    "text": "you start thinking how we can do that justice I hope I open your mind now",
    "start": "1582570",
    "end": "1587999"
  },
  {
    "text": "maybe you can imagine how we do that and then we we found the majority and and",
    "start": "1587999",
    "end": "1596700"
  },
  {
    "text": "get the data which is more than 1000 X improvement to any other architecture",
    "start": "1596700",
    "end": "1602519"
  },
  {
    "text": "and of course it's very easily in the memory this function already will run in",
    "start": "1602519",
    "end": "1608999"
  },
  {
    "text": "our chip run under tens of flow we already support tens of float top came",
    "start": "1608999",
    "end": "1614460"
  },
  {
    "text": "running which run necessity now let's",
    "start": "1614460",
    "end": "1619580"
  },
  {
    "text": "see how we can compute top K in associative way okay we start with the",
    "start": "1619580",
    "end": "1632639"
  },
  {
    "text": "most significant bit the bit lines going now horizontal we start with the most",
    "start": "1632639",
    "end": "1640799"
  },
  {
    "text": "significant bit suppose we have let's say millions and we looked on the",
    "start": "1640799",
    "end": "1645899"
  },
  {
    "text": "associative we can look on bits lines as much as we want so we looked on to all the more significant bit and say okay if",
    "start": "1645899",
    "end": "1654840"
  },
  {
    "text": "there's some which are zero I'm not candidate to be max only I looked on the one and then continue so I",
    "start": "1654840",
    "end": "1662940"
  },
  {
    "text": "start and this is al worden I start with",
    "start": "1662940",
    "end": "1667980"
  },
  {
    "text": "I define here a mask mask me that all",
    "start": "1667980",
    "end": "1673769"
  },
  {
    "start": "1670000",
    "end": "1882000"
  },
  {
    "text": "our candidate to be the top K all our candidate now went before I start for me",
    "start": "1673769",
    "end": "1679289"
  },
  {
    "text": "everybody can be the top K V is exact count that in in the progress here the",
    "start": "1679289",
    "end": "1685769"
  },
  {
    "text": "exact number of every if whatever if we have one here it will belong to the top",
    "start": "1685769",
    "end": "1691740"
  },
  {
    "text": "K now nothing is belong to the top K and now everything nothing is we don't talk",
    "start": "1691740",
    "end": "1697019"
  },
  {
    "text": "about but everyone now is a candidate this is candidate and this is the route rooftop",
    "start": "1697019",
    "end": "1702140"
  },
  {
    "text": "cake so we start with the most significant bit as you see here we are a",
    "start": "1702140",
    "end": "1707200"
  },
  {
    "text": "write another vector again in the memory the inverse of the data and and do end",
    "start": "1707200",
    "end": "1716690"
  },
  {
    "text": "with a mask because we want to know to whom to whom - to whom - discuss will",
    "start": "1716690",
    "end": "1727330"
  },
  {
    "text": "then we are with V movies right now zero and then we count the number of of this",
    "start": "1727330",
    "end": "1734860"
  },
  {
    "text": "register which is all done in parallel and we got eleven and for example we",
    "start": "1734860",
    "end": "1741950"
  },
  {
    "text": "want k equal four with its greater than than what we want so then we then we go",
    "start": "1741950",
    "end": "1747620"
  },
  {
    "text": "we break it to the mark and now continue and down continue to the next bit do it",
    "start": "1747620",
    "end": "1755720"
  },
  {
    "text": "again until by the end of the day we get",
    "start": "1755720",
    "end": "1760970"
  },
  {
    "text": "we get so the complexity depend on the bit slice it's all of the number of of",
    "start": "1760970",
    "end": "1766400"
  },
  {
    "text": "of the precision it's all funny because it doesn't matter what is the size a of",
    "start": "1766400",
    "end": "1772400"
  },
  {
    "text": "the record so actually we get off one complexity of top of top K it's very",
    "start": "1772400",
    "end": "1778730"
  },
  {
    "text": "very very important to application like a recommendation and deep learning many",
    "start": "1778730",
    "end": "1784310"
  },
  {
    "text": "people using using the top cake until now people it was hard to implement so",
    "start": "1784310",
    "end": "1790520"
  },
  {
    "text": "people try to find another direction how to implement some algorithm but this gives the ability to do top cake in real",
    "start": "1790520",
    "end": "1796880"
  },
  {
    "text": "time in microsecond level not in second so and it actually works and this is a",
    "start": "1796880",
    "end": "1805190"
  },
  {
    "text": "topic so if I have an ability to do top",
    "start": "1805190",
    "end": "1812150"
  },
  {
    "text": "K very efficiently I can maybe I looked",
    "start": "1812150",
    "end": "1817940"
  },
  {
    "text": "on a on recognition for example if I",
    "start": "1817940",
    "end": "1823490"
  },
  {
    "text": "have if I have an image or if I have a text or if I have a voice",
    "start": "1823490",
    "end": "1830200"
  },
  {
    "text": "I can convert any such signal to feature for example image I can generate feature",
    "start": "1830200",
    "end": "1837370"
  },
  {
    "text": "by the convolutional layer convolution layered generated feature not talking about the up to the fully connected if I",
    "start": "1837370",
    "end": "1844570"
  },
  {
    "text": "run the convolution layer again I again the feature of the image if I take a text I do some award embedding etc to",
    "start": "1844570",
    "end": "1853180"
  },
  {
    "text": "general generic feature so if I have if I if I can generate the future and if I",
    "start": "1853180",
    "end": "1859300"
  },
  {
    "text": "have a memory that can do compute I can put all these features in the memory and",
    "start": "1859300",
    "end": "1866610"
  },
  {
    "text": "then when they're coming in another signal such as another image I take his",
    "start": "1866610",
    "end": "1873190"
  },
  {
    "text": "feature and I I do the processing in real-time inside the associative array",
    "start": "1873190",
    "end": "1878230"
  },
  {
    "text": "to find to find a similarity okay",
    "start": "1878230",
    "end": "1884040"
  },
  {
    "start": "1882000",
    "end": "2048000"
  },
  {
    "text": "another example is sparse matrix multiplication as we know there is a",
    "start": "1884040",
    "end": "1890200"
  },
  {
    "text": "very very it's a problem to do a sparse matrix multiplication because there is a",
    "start": "1890200",
    "end": "1895360"
  },
  {
    "text": "lot of dependencies in is a sparse a lot",
    "start": "1895360",
    "end": "1901060"
  },
  {
    "text": "of dispenses because it needs a key value search a lot of dependencies so actually in GPGPU because they are wrong",
    "start": "1901060",
    "end": "1908020"
  },
  {
    "text": "to push everything to vector multiplication they do something like a",
    "start": "1908020",
    "end": "1913060"
  },
  {
    "text": "SVD so they break is a sparse to small",
    "start": "1913060",
    "end": "1918130"
  },
  {
    "text": "small matrix by by a the SVD and they do the matrix multiplication but here we",
    "start": "1918130",
    "end": "1923260"
  },
  {
    "text": "can do the matte accumulation but here we can also do the exact the matter to",
    "start": "1923260",
    "end": "1928840"
  },
  {
    "text": "obsession of real sparse matrix how we do that this is example show for example",
    "start": "1928840",
    "end": "1934690"
  },
  {
    "text": "dense dense vector by is pass by sparse matrix here here is here is a spouse as",
    "start": "1934690",
    "end": "1943150"
  },
  {
    "text": "you can see here there is a lot of 0 and I represent this matrices it can be 1",
    "start": "1943150",
    "end": "1948730"
  },
  {
    "text": "million by 1 million or more I represent this path by by a table by indices let's",
    "start": "1948730",
    "end": "1956380"
  },
  {
    "text": "say the value number three is its column number one a row number two the value of",
    "start": "1956380",
    "end": "1961480"
  },
  {
    "text": "five it's a column number two and Rhonda mercy it's a story etc so the number of item here is a number of the",
    "start": "1961480",
    "end": "1968270"
  },
  {
    "text": "nonzero element in the spouse in the sparse matrix so what we do here we we",
    "start": "1968270",
    "end": "1974360"
  },
  {
    "text": "said okay now this row is 0 so we're not talking about we say okay this we okay",
    "start": "1974360",
    "end": "1980750"
  },
  {
    "text": "we say okay search all columns equal whole number 2 - 0 number 2 I'm looking",
    "start": "1980750",
    "end": "1986929"
  },
  {
    "text": "all column which is although which is equal to there's only one here do search",
    "start": "1986929",
    "end": "1992330"
  },
  {
    "text": "do exact search and then - all of them I write the value minus 2 now I search a",
    "start": "1992330",
    "end": "1999770"
  },
  {
    "text": "column number 3 I search a column number 4 here I find here and here",
    "start": "1999770",
    "end": "2005380"
  },
  {
    "text": "so I write for them together - one mistake clock doesn't matter if they won",
    "start": "2005380",
    "end": "2011470"
  },
  {
    "text": "or many which states take one o'clock once the data in the memory so I use the",
    "start": "2011470",
    "end": "2017350"
  },
  {
    "text": "function of a exact search the function",
    "start": "2017350",
    "end": "2022630"
  },
  {
    "text": "of come a ability of the associative memory to bring the Delta to bring the",
    "start": "2022630",
    "end": "2031570"
  },
  {
    "text": "data by indices so the complexities of course is depend of the non zero element",
    "start": "2031570",
    "end": "2038380"
  },
  {
    "text": "and then I do the multiply multiplication in parallel and then I",
    "start": "2038380",
    "end": "2043750"
  },
  {
    "text": "get the result which as you can see here this is a complexity a sparse by spouse",
    "start": "2043750",
    "end": "2049888"
  },
  {
    "start": "2048000",
    "end": "2308000"
  },
  {
    "text": "multiplication even there is no it's so complicated isn't it's not this function",
    "start": "2049889",
    "end": "2055450"
  },
  {
    "text": "even is not supporting in terms of law but we're going to write our function to",
    "start": "2055450",
    "end": "2060878"
  },
  {
    "text": "tezo flow that supports pass with sparse matrix multiplication so here we have two table we have two to multiply two",
    "start": "2060879",
    "end": "2068919"
  },
  {
    "text": "indices table and to get third table here so so this is presentation of the",
    "start": "2068919",
    "end": "2077919"
  },
  {
    "text": "first step of the second table so actually the same with we get the first",
    "start": "2077919",
    "end": "2084128"
  },
  {
    "text": "day candidate a call it the road number one and then we search in and then we",
    "start": "2084129",
    "end": "2090908"
  },
  {
    "text": "mark over them and here we do the same as what we show before then after few iteration we got we got",
    "start": "2090909",
    "end": "2099290"
  },
  {
    "text": "is a output the output is the output result here so the complexity here as",
    "start": "2099290",
    "end": "2106130"
  },
  {
    "text": "you can see here is off beta plus log beta which which beta is a non zero",
    "start": "2106130",
    "end": "2111890"
  },
  {
    "text": "element so as long as we have more and more nonzero element there is more",
    "start": "2111890",
    "end": "2116960"
  },
  {
    "text": "efficiency to do it in a subset if it doesn't matter if the size of the matrix",
    "start": "2116960",
    "end": "2122540"
  },
  {
    "text": "is 1 billion by 1 billion it's only depend on the non zero element a compare",
    "start": "2122540",
    "end": "2128600"
  },
  {
    "text": "this ISM this is the best as they a gpgpu God which is depend of n square as",
    "start": "2128600",
    "end": "2136100"
  },
  {
    "text": "it try not on and third and square plus is plus plus which is more than 1000",
    "start": "2136100",
    "end": "2142040"
  },
  {
    "text": "improvement but it's depend on the size of n the number of for you it's my cocoa",
    "start": "2142040",
    "end": "2160700"
  },
  {
    "text": "python and of course things of law we support we support 10 to 1 which is a programming model of that but if there's",
    "start": "2160700",
    "end": "2167780"
  },
  {
    "text": "some people student whatever PhD that once you understand how to write an associative of course there is a lot of",
    "start": "2167780",
    "end": "2173780"
  },
  {
    "text": "room for new researchers they can contact us and we'll be more than happy to assist okay soft max soft max is very",
    "start": "2173780",
    "end": "2185960"
  },
  {
    "text": "useful today in in natural language processing for",
    "start": "2185960",
    "end": "2192080"
  },
  {
    "text": "example to predict the next role of if I have if I have a sentence in high ion I",
    "start": "2192080",
    "end": "2197900"
  },
  {
    "text": "need to some some attention because it give us probabilities so soft max is",
    "start": "2197900",
    "end": "2203420"
  },
  {
    "text": "very very important and this is a function a unfortunately it's very hard",
    "start": "2203420",
    "end": "2209540"
  },
  {
    "text": "to implement it when when the number of the items is big because we need to do a",
    "start": "2209540",
    "end": "2216710"
  },
  {
    "text": "dot product of a of millions of numbers sometimes we have non linearity function",
    "start": "2216710",
    "end": "2222109"
  },
  {
    "text": "we have exponent we have a we have dependencies because we have if you",
    "start": "2222109",
    "end": "2228620"
  },
  {
    "text": "if you sell the function of the softmax is is exponent by divided with the sum",
    "start": "2228620",
    "end": "2236120"
  },
  {
    "text": "of all the exponent of all the database so I cannot continue to the next step until I find the exponent or all the",
    "start": "2236120",
    "end": "2244100"
  },
  {
    "text": "data so supposed to have one mean where do you store them and if they e if its exponent is big its overflow some time",
    "start": "2244100",
    "end": "2250910"
  },
  {
    "text": "is more than 32 bit that there is more than 64 it's very hard to implement it so you can hear you need an associative",
    "start": "2250910",
    "end": "2257990"
  },
  {
    "text": "memory associative array to solve this this data so dynamic range what is",
    "start": "2257990",
    "end": "2266590"
  },
  {
    "text": "exponent if the number 20 a 32 bit floating is not enough even 64 in",
    "start": "2266590",
    "end": "2274340"
  },
  {
    "text": "associative you can define sometimes if for specific application I need floating",
    "start": "2274340",
    "end": "2280850"
  },
  {
    "text": "point with mantissa which is 200 and exponent is 50 I can divide it easily",
    "start": "2280850",
    "end": "2287390"
  },
  {
    "text": "for specific application and go back so I have no limitation on how to define it",
    "start": "2287390",
    "end": "2294110"
  },
  {
    "text": "it's not that hot precision double precision single precision it's not exist here it's not exist I can define",
    "start": "2294110",
    "end": "2300620"
  },
  {
    "text": "any precision I need to get the best performance",
    "start": "2300620",
    "end": "2306880"
  },
  {
    "text": "okay turn off various AGP GPU and the CPU use teller servers unfortunately to",
    "start": "2307030",
    "end": "2314660"
  },
  {
    "start": "2308000",
    "end": "2334000"
  },
  {
    "text": "get we already checked it to get a accuracy you need at least 20",
    "start": "2314660",
    "end": "2321050"
  },
  {
    "text": "coefficients at least 20 coefficients so let's count how many multiplications and 16 date is not enough 32 bit sometimes",
    "start": "2321050",
    "end": "2329450"
  },
  {
    "text": "even though even 64 it's terrible here I",
    "start": "2329450",
    "end": "2335980"
  },
  {
    "start": "2334000",
    "end": "2389000"
  },
  {
    "text": "want to talk about to remove this slide because its proprietary we have a way",
    "start": "2335980",
    "end": "2341930"
  },
  {
    "text": "how to do it very very efficiently very efficiently which is which is out of",
    "start": "2341930",
    "end": "2348320"
  },
  {
    "text": "magnitude faster and we have almost close to zero a 100 percent accuracy in",
    "start": "2348320",
    "end": "2356390"
  },
  {
    "text": "more than 99 point accuracy but we can go to 100 accuracy if we increase the precision so we have",
    "start": "2356390",
    "end": "2363220"
  },
  {
    "text": "very efficient way how to do how to do they say soft mark so there's no no limitation now we can do software we can",
    "start": "2363220",
    "end": "2372910"
  },
  {
    "text": "do top cap you can do now let's see NLP NLP is a hot day application today let's",
    "start": "2372910",
    "end": "2378040"
  },
  {
    "text": "see how we do we do a ok how we do NLP",
    "start": "2378040",
    "end": "2384040"
  },
  {
    "text": "NLP for pushing and answering you know this is an example of question and",
    "start": "2384040",
    "end": "2391690"
  },
  {
    "start": "2389000",
    "end": "2466000"
  },
  {
    "text": "answering for example I have I have a question answering problem for example",
    "start": "2391690",
    "end": "2398080"
  },
  {
    "text": "then put dog in the car then I have a very very long story and then my Mike took stance car",
    "start": "2398080",
    "end": "2407200"
  },
  {
    "text": "long story and he drove to San Francisco and I asked question where is the book",
    "start": "2407200",
    "end": "2412660"
  },
  {
    "text": "now so I have to it I cannot use simple a RNN because I need the memory need a",
    "start": "2412660",
    "end": "2420190"
  },
  {
    "text": "big memory a big memory to pay attention to or it which happen is a story another",
    "start": "2420190",
    "end": "2427840"
  },
  {
    "text": "example for language translation this is from case of the second example the cow",
    "start": "2427840",
    "end": "2434830"
  },
  {
    "text": "ate the head because it was delicious all because it was hungry it I want to",
    "start": "2434830",
    "end": "2441790"
  },
  {
    "text": "translate this from Lily into French from support there's two meanings to say eat they eat it is to the cow or it be",
    "start": "2441790",
    "end": "2450730"
  },
  {
    "text": "because of it because it was delicious so we need to do attention we have to",
    "start": "2450730",
    "end": "2457420"
  },
  {
    "text": "looked on all the data keep it in memory and and and do some soft marks a",
    "start": "2457420",
    "end": "2463330"
  },
  {
    "text": "function many many algorithm right one of them is is okay now okay story okay",
    "start": "2463330",
    "end": "2470130"
  },
  {
    "start": "2466000",
    "end": "2635000"
  },
  {
    "text": "let's see how we how we do it how it worked in the sauce ative we input the",
    "start": "2470130",
    "end": "2477010"
  },
  {
    "text": "data there is some encoder we input the data data may be sentence my Kaito in",
    "start": "2477010",
    "end": "2483970"
  },
  {
    "text": "the bottom sentence so I use encoder to convert it to features",
    "start": "2483970",
    "end": "2489910"
  },
  {
    "text": "you should remember I show you the future how we take feature and put in Vince Fontaine and something to commit to feature using neural network to",
    "start": "2489910",
    "end": "2496870"
  },
  {
    "text": "convert the future there is some way to convert text to feature which is which",
    "start": "2496870",
    "end": "2502600"
  },
  {
    "text": "is Ward embedding for example or you know I get a feature vector and",
    "start": "2502600",
    "end": "2512790"
  },
  {
    "text": "embedding in to the associative memory processor embedding this feature like",
    "start": "2512790",
    "end": "2518920"
  },
  {
    "text": "all other features of all the sentence all the book maybe all the Wikipedia can be Caesar now I have a bit but I call it",
    "start": "2518920",
    "end": "2528160"
  },
  {
    "text": "the key now I worry I have the feature",
    "start": "2528160",
    "end": "2534010"
  },
  {
    "text": "vector what they do here I do dot product get the result compute softmax",
    "start": "2534010",
    "end": "2540910"
  },
  {
    "text": "everything in the memory it softmax everything with read and write operation",
    "start": "2540910",
    "end": "2546790"
  },
  {
    "text": "again read and write operation the basic instructions so if you looked on the",
    "start": "2546790",
    "end": "2553030"
  },
  {
    "text": "atomic function it's written right operation again then I have to multiply",
    "start": "2553030",
    "end": "2558700"
  },
  {
    "text": "this of max by that by a value and I can get okay I can get the attention attention is it",
    "start": "2558700",
    "end": "2565690"
  },
  {
    "text": "is a vertical a whiting I didn't explain to you how we do vertical computing it's",
    "start": "2565690",
    "end": "2572260"
  },
  {
    "text": "also very efficient to do vertical it's it's two details to explain everything",
    "start": "2572260",
    "end": "2578170"
  },
  {
    "text": "right now but we can do the vertical we can do approach in this direction and in this version so we do the vertical",
    "start": "2578170",
    "end": "2583960"
  },
  {
    "text": "operation and get and get this attention and coming back this one rice called the",
    "start": "2583960",
    "end": "2590920"
  },
  {
    "text": "Yunnan developed by a by a Western I",
    "start": "2590920",
    "end": "2596370"
  },
  {
    "text": "think most of you are familiar with that a his network is you can till you you",
    "start": "2596370",
    "end": "2604450"
  },
  {
    "text": "take this your sentence embedding using RNN and and convert use",
    "start": "2604450",
    "end": "2611410"
  },
  {
    "text": "here softbox and multiply multiply the softbox by a value gets a tension and go",
    "start": "2611410",
    "end": "2618400"
  },
  {
    "text": "back back and forth and here you input the query the same so this function required softmax",
    "start": "2618400",
    "end": "2626200"
  },
  {
    "text": "require a dot product multiplication top",
    "start": "2626200",
    "end": "2631420"
  },
  {
    "text": "K everything is here so here how would implement of course key values of marks",
    "start": "2631420",
    "end": "2638470"
  },
  {
    "start": "2635000",
    "end": "2923000"
  },
  {
    "text": "all of this is in the associative array can be done very easily we are going to",
    "start": "2638470",
    "end": "2644349"
  },
  {
    "text": "demonstrate this in our chip this one of our demonstration to show and to end with Bobby a with Bobby text we're going",
    "start": "2644349",
    "end": "2654010"
  },
  {
    "text": "to show how it work here again sort of magnitude okay now let's see another hot",
    "start": "2654010",
    "end": "2665320"
  },
  {
    "text": "direction in in deep learning is low shot I'm not going to show how we do",
    "start": "2665320",
    "end": "2672160"
  },
  {
    "text": "CNN convolution neural network because this is many many good solution for that so I'm focusing on things which are hot",
    "start": "2672160",
    "end": "2679869"
  },
  {
    "text": "today which cannot be achieved since this is again multiplication we can put the coefficients in memory but I'm not",
    "start": "2679869",
    "end": "2687220"
  },
  {
    "text": "talking I'm just talking about things which are very exciting now in deep learning which call it low short one",
    "start": "2687220",
    "end": "2693880"
  },
  {
    "text": "short learning what is the problem with a one-shot today guarded based",
    "start": "2693880",
    "end": "2699579"
  },
  {
    "text": "optimization today we know it is a very impressive result today and for but it",
    "start": "2699579",
    "end": "2707050"
  },
  {
    "text": "was good for for image classification but this is what a lot a lot of data a",
    "start": "2707050",
    "end": "2712119"
  },
  {
    "text": "to learn and also in the database for example we need to put 5,000 different",
    "start": "2712119",
    "end": "2717849"
  },
  {
    "text": "on cat 5,000 different of dog 5,000 different a cow I want to put only two",
    "start": "2717849",
    "end": "2724480"
  },
  {
    "text": "dog took how three people two chairs this is this is a notion associative",
    "start": "2724480",
    "end": "2732250"
  },
  {
    "text": "computing is that a human because in our human body brain people when we take a",
    "start": "2732250",
    "end": "2738339"
  },
  {
    "text": "child you not show him 10,000 different on dogs and say this is a dog you teach",
    "start": "2738339",
    "end": "2744700"
  },
  {
    "text": "him that is a dog and say okay this dog anything that is the cat next time you show him a courtesy okay this is dog and",
    "start": "2744700",
    "end": "2750609"
  },
  {
    "text": "this is the cat so so why how pollution neural networks working today",
    "start": "2750609",
    "end": "2756890"
  },
  {
    "text": "is good for image batteries it's more academic it's not practice because you",
    "start": "2756890",
    "end": "2762200"
  },
  {
    "text": "need so much data so much data to do that let's see how we do it in",
    "start": "2762200",
    "end": "2768230"
  },
  {
    "text": "associative just show you the simple way but not going to send everything now we",
    "start": "2768230",
    "end": "2776990"
  },
  {
    "text": "go to show a zero shot and fusion now let's say I take with zero shot I said I",
    "start": "2776990",
    "end": "2786020"
  },
  {
    "text": "take a system that already trained for example i take v GG i take the v GG",
    "start": "2786020",
    "end": "2792440"
  },
  {
    "text": "already trained to all the database all the image that already trained a heavy v DG for me it doesn't matter now if I",
    "start": "2792440",
    "end": "2800030"
  },
  {
    "text": "input different images that what I teach for me the convolutional layer it's a",
    "start": "2800030",
    "end": "2806860"
  },
  {
    "text": "it's it's a feature generators it's a speech of generator generator features I",
    "start": "2806860",
    "end": "2813080"
  },
  {
    "text": "bet fit another image and get the feature get the feature map it doesn't matter with the dog I don't know what is a",
    "start": "2813080",
    "end": "2819710"
  },
  {
    "text": "feature it takes the image let's say to 2008 to 2010 elect features this feature",
    "start": "2819710",
    "end": "2824990"
  },
  {
    "text": "represent what I level to it in one case it can be cow one case it can be pencil",
    "start": "2824990",
    "end": "2831410"
  },
  {
    "text": "one casing can be chair but it's a rich feature i embedded into to the feature",
    "start": "2831410",
    "end": "2840110"
  },
  {
    "text": "inside and the next time won't have another dog I do some cosine similarity",
    "start": "2840110",
    "end": "2846230"
  },
  {
    "text": "and find the top K and get which is the",
    "start": "2846230",
    "end": "2852530"
  },
  {
    "text": "most grosser and second a second in and and continue so this is one way second",
    "start": "2852530",
    "end": "2860330"
  },
  {
    "text": "way is ah okay this is dimension reduction because in the convolution layer I want to get the feature I know",
    "start": "2860330",
    "end": "2866060"
  },
  {
    "text": "to put feature in the associative array so in if I looked on the convolution layer of VG for example the final state",
    "start": "2866060",
    "end": "2873860"
  },
  {
    "text": "of the convolution layer I have five I have seven by seven by 512 which is",
    "start": "2873860",
    "end": "2879680"
  },
  {
    "text": "20,000 I don't want to put twenty thousand each vector I want to",
    "start": "2879680",
    "end": "2885609"
  },
  {
    "text": "reduce this feature so I do some algorithm to reduce to reduce the",
    "start": "2885609",
    "end": "2891460"
  },
  {
    "text": "features to reduce the dimension is the input is twenty thousand the auto take",
    "start": "2891460",
    "end": "2897160"
  },
  {
    "text": "for example a two hundred the way how it's wrong I teach this matrix by if I",
    "start": "2897160",
    "end": "2905650"
  },
  {
    "text": "have two similarity between two vectors mm I want the same similarity of a",
    "start": "2905650",
    "end": "2912790"
  },
  {
    "text": "vector of two hundred this is a cost function so i generate i do this so this",
    "start": "2912790",
    "end": "2918910"
  },
  {
    "text": "is this way I reduce the feature and I'm bending it into the associative memory",
    "start": "2918910",
    "end": "2924510"
  },
  {
    "start": "2923000",
    "end": "3017000"
  },
  {
    "text": "no shot no shot in the in the one shot",
    "start": "2924510",
    "end": "2932350"
  },
  {
    "text": "we use already friend and trained data with the low shot it's well it will not",
    "start": "2932350",
    "end": "2937660"
  },
  {
    "text": "start with it with pro train we train the data but in different way we change",
    "start": "2937660",
    "end": "2942820"
  },
  {
    "text": "the date in the way that where for example vgg but we can put it even a",
    "start": "2942820",
    "end": "2948250"
  },
  {
    "text": "very simple network but we teach the",
    "start": "2948250",
    "end": "2953859"
  },
  {
    "text": "system that that we want a similarity between we want to keep similar value",
    "start": "2953859",
    "end": "2962109"
  },
  {
    "text": "between click between key that will be closed if the clause we want the error will be minimum is a far if it's not",
    "start": "2962109",
    "end": "2968980"
  },
  {
    "text": "close I want that the arrow will be will be a far away so I I do the learning",
    "start": "2968980",
    "end": "2977740"
  },
  {
    "text": "based on similarity search between two values and do the back propagation and",
    "start": "2977740",
    "end": "2984420"
  },
  {
    "text": "this oriented to cosine similarity similarity approach actually we do that",
    "start": "2984420",
    "end": "2990430"
  },
  {
    "text": "with a successful on the Omni God only got a characters we got in a few short",
    "start": "2990430",
    "end": "2999070"
  },
  {
    "text": "between one to four more than 99% of say affair of accuracy when with the",
    "start": "2999070",
    "end": "3006119"
  },
  {
    "text": "strength data based on similarity search instead of standard Gandhian",
    "start": "3006119",
    "end": "3013580"
  },
  {
    "text": "okay a programming model very simple",
    "start": "3013580",
    "end": "3019020"
  },
  {
    "start": "3017000",
    "end": "3076000"
  },
  {
    "text": "people rides their application tensorflow on standard CPU okay the",
    "start": "3019020",
    "end": "3027750"
  },
  {
    "text": "output is the tender flow graph is is written to the device memory of the card",
    "start": "3027750",
    "end": "3035250"
  },
  {
    "text": "and here the APU chip manipulate this",
    "start": "3035250",
    "end": "3041520"
  },
  {
    "text": "graphic dependencies an executive function so this way we program so you",
    "start": "3041520",
    "end": "3047820"
  },
  {
    "text": "write in standard a CPU right turns of law genetic execution graph download to",
    "start": "3047820",
    "end": "3055260"
  },
  {
    "text": "the memory its Excel it's not associative memory to another memory DRAM and then we have inside the chip I",
    "start": "3055260",
    "end": "3062970"
  },
  {
    "text": "didn't explain it inside the chip here we have for arc poor processor to take",
    "start": "3062970",
    "end": "3070109"
  },
  {
    "text": "care about that that to control to control the chip okay we are developing",
    "start": "3070109",
    "end": "3080490"
  },
  {
    "start": "3076000",
    "end": "3159000"
  },
  {
    "text": "okay now we are in stage in less than two months we are tapping out the chip",
    "start": "3080490",
    "end": "3085770"
  },
  {
    "text": "we are working on it more than two years or tapping out in two months and we're going to have a valuation",
    "start": "3085770",
    "end": "3090900"
  },
  {
    "text": "board in around the Royal Mail that will have four chips that it can be used for",
    "start": "3090900",
    "end": "3098280"
  },
  {
    "text": "testing to to evaluate the performance",
    "start": "3098280",
    "end": "3103320"
  },
  {
    "text": "the performance of the card aid we have in every chip where for APU chip every",
    "start": "3103320",
    "end": "3108540"
  },
  {
    "text": "chip have two million two million processors two million bit lines so with",
    "start": "3108540",
    "end": "3113760"
  },
  {
    "text": "eight millions we get between we get 8 beta boolean operations 8 Peter Williams",
    "start": "3113760",
    "end": "3120450"
  },
  {
    "text": "operation 6.4 tenth of this is for floating-point but for our other we as a pic photons 8 beta internal because the",
    "start": "3120450",
    "end": "3129630"
  },
  {
    "text": "computer memory we have to pet a bit per second internal ion and we also have",
    "start": "3129630",
    "end": "3138900"
  },
  {
    "text": "here some Durant form is memory device and tens of law tens of law",
    "start": "3138900",
    "end": "3144690"
  },
  {
    "text": "support okay this is a current product but we looked on the future let's see",
    "start": "3144690",
    "end": "3153480"
  },
  {
    "text": "how far we can go with this technology",
    "start": "3153480",
    "end": "3158480"
  },
  {
    "start": "3159000",
    "end": "3209000"
  },
  {
    "text": "this technology today it's work we convert SRAM to compute but if you",
    "start": "3159140",
    "end": "3166680"
  },
  {
    "text": "looked on the non-volatile memory which has very big bigger of tens of beginners",
    "start": "3166680",
    "end": "3173539"
  },
  {
    "text": "is very low dense see how they look then they also have itself they also have a",
    "start": "3173539",
    "end": "3181109"
  },
  {
    "text": "bit line and I can program them to do the neurone end but on selective on",
    "start": "3181109",
    "end": "3187650"
  },
  {
    "text": "unselective just bit line so the non-volatile memory in the future can do",
    "start": "3187650",
    "end": "3195720"
  },
  {
    "text": "associative computing so we can do computing on this on the storage not on",
    "start": "3195720",
    "end": "3202740"
  },
  {
    "text": "the memory on the storage in the future so this is how how how it goes",
    "start": "3202740",
    "end": "3207960"
  },
  {
    "text": "so if we looked on this map today we have how this flash DRAM L 1 l 2 3 and",
    "start": "3207960",
    "end": "3216020"
  },
  {
    "start": "3209000",
    "end": "3302000"
  },
  {
    "text": "cpu registers file this is same memory here we put all this type of associative",
    "start": "3216020",
    "end": "3222119"
  },
  {
    "text": "computing based on endurance here we have three ROM based as you can see here",
    "start": "3222119",
    "end": "3228000"
  },
  {
    "text": "he would have rerun bay is a PC ROM there are many types of non-volatile",
    "start": "3228000",
    "end": "3235349"
  },
  {
    "text": "memory this is busy with with this is this flash we can do processing flash versus",
    "start": "3235349",
    "end": "3242430"
  },
  {
    "text": "flashes if there is endurance problem we cannot write more than 100,000 times so",
    "start": "3242430",
    "end": "3248250"
  },
  {
    "text": "if I want to do some operation unless at the second eye eye I destroy it so it",
    "start": "3248250",
    "end": "3253799"
  },
  {
    "text": "cannot be but they can do some search more not just not read not write just",
    "start": "3253799",
    "end": "3259260"
  },
  {
    "text": "write Iram has a better as a better performance in endurance and every time",
    "start": "3259260",
    "end": "3266190"
  },
  {
    "text": "every step which I go here and go him with endurance here hidden joins better he knows better and in Estoril with no a",
    "start": "3266190",
    "end": "3273329"
  },
  {
    "text": "nine yards we are here right now we are here beginning 2000 Dean we convert estarán to associative",
    "start": "3273329",
    "end": "3281140"
  },
  {
    "text": "very poor so we are here that stt rom has also very good endurance so we",
    "start": "3281140",
    "end": "3288250"
  },
  {
    "text": "believe that in five years six years now we can convert we can convert the",
    "start": "3288250",
    "end": "3294490"
  },
  {
    "text": "resistant ROM to do to compute base and our approach our patterns we can do that",
    "start": "3294490",
    "end": "3301890"
  },
  {
    "text": "okay this is this summary as you can see here we can do off one met top K",
    "start": "3301890",
    "end": "3309280"
  },
  {
    "start": "3302000",
    "end": "3385000"
  },
  {
    "text": "similarity search it's a try etcetera it's fully programmable see it's more",
    "start": "3309280",
    "end": "3314590"
  },
  {
    "text": "programmable than the standard CPU or GPU because I have more capability I don't have building blocks that as",
    "start": "3314590",
    "end": "3322050"
  },
  {
    "text": "floating point fixed point it's it said its processor associative processor",
    "start": "3322050",
    "end": "3329440"
  },
  {
    "text": "based on memory technology so I have a lot a lot of flexibility and extending",
    "start": "3329440",
    "end": "3338950"
  },
  {
    "text": "more slow and and leveraging advanced memory technology growth so we are",
    "start": "3338950",
    "end": "3344590"
  },
  {
    "text": "following this to pattern the better of Muslim and in memory and memory",
    "start": "3344590",
    "end": "3351340"
  },
  {
    "text": "technology a ok so this is a last slide if there are some student Master PhDs",
    "start": "3351340",
    "end": "3359890"
  },
  {
    "text": "that want to collaborate to do some PhD project research we'll be more than",
    "start": "3359890",
    "end": "3365170"
  },
  {
    "text": "happy to help assist to they can contact us ok thank you very much",
    "start": "3365170",
    "end": "3371520"
  },
  {
    "text": "[Applause]",
    "start": "3371520",
    "end": "3376790"
  },
  {
    "text": "you",
    "start": "3381580",
    "end": "3383640"
  }
]