[
  {
    "start": "0",
    "end": "62000"
  },
  {
    "text": "good afternoon and thank you this is actually",
    "start": "10880",
    "end": "16080"
  },
  {
    "text": "the one of a series of talks are we up yes we are",
    "start": "16080",
    "end": "21920"
  },
  {
    "text": "up yeah about the mill architecture the mill is much too novel and complex to be",
    "start": "21920",
    "end": "28960"
  },
  {
    "text": "summarized in just one talk and this is a series you are there on the cash",
    "start": "28960",
    "end": "34960"
  },
  {
    "text": "hierarchy those ones which have already been done um including the one here that",
    "start": "34960",
    "end": "41039"
  },
  {
    "text": "Andy mentioned and um our thanks to Stanford for asking us to come back uh",
    "start": "41039",
    "end": "46879"
  },
  {
    "text": "those ones which have already been done are available on our website there and",
    "start": "46879",
    "end": "53359"
  },
  {
    "text": "this and future ones will also wind up being posted as",
    "start": "53359",
    "end": "58760"
  },
  {
    "text": "well the particular topic is Cash",
    "start": "58920",
    "end": "64559"
  },
  {
    "start": "62000",
    "end": "217000"
  },
  {
    "text": "access there are a number of sub isues involved in this you'll be uh I'll be",
    "start": "64560",
    "end": "70400"
  },
  {
    "text": "taking them one at a time they are fairly independent of each other but you'll see a Common Thread hooking",
    "start": "70400",
    "end": "76240"
  },
  {
    "text": "through them however I must warn you that what I have to say will be a gross",
    "start": "76240",
    "end": "82560"
  },
  {
    "text": "oversimplification of the way real chips actually work the I'm attempting to",
    "start": "82560",
    "end": "89040"
  },
  {
    "text": "provide an intuitive understanding for people who are not specialists in the field if you are in fact a specialist",
    "start": "89040",
    "end": "96320"
  },
  {
    "text": "you know that I am lying through my teeth and um please be patient with me",
    "start": "96320",
    "end": "103040"
  },
  {
    "text": "uh and consider the intended purpose if you actually wish to get down into the bitsies we've got bitsy answers for you",
    "start": "103040",
    "end": "110920"
  },
  {
    "text": "and feel free to ask about it",
    "start": "110920",
    "end": "114758"
  },
  {
    "text": "later first topic is referred loads and I will explain that but first I must",
    "start": "116840",
    "end": "124399"
  },
  {
    "text": "mention where we're coming from this is not a research project it's not an academic product it's intended to be a",
    "start": "124399",
    "end": "130399"
  },
  {
    "text": "commercial chip consequently we must in fact wind up being driven by the",
    "start": "130399",
    "end": "135879"
  },
  {
    "text": "marketplace and what the marketplace wants out of a CPU is high execution",
    "start": "135879",
    "end": "141680"
  },
  {
    "text": "throughput low power and cheap fortunately how to provide that",
    "start": "141680",
    "end": "150400"
  },
  {
    "text": "for at least certain kinds of programs has been well known for over 30 30 40",
    "start": "150400",
    "end": "156239"
  },
  {
    "text": "Years first your program needs to be wide issue your architecture needs to be wide issue if you're going to have high",
    "start": "156239",
    "end": "162680"
  },
  {
    "text": "execution throughput you need to be able to have high parallelism and have a whole stack of instructions that are",
    "start": "162680",
    "end": "168640"
  },
  {
    "text": "executed simultaneously however in addition if",
    "start": "168640",
    "end": "174640"
  },
  {
    "text": "you're going to have low power you have to get all of the what am I going to do next get ready to to do it next do it",
    "start": "174640",
    "end": "181879"
  },
  {
    "text": "and uh then figure out what I'm going to do after that logic which it consumes",
    "start": "181879",
    "end": "186920"
  },
  {
    "text": "90% of the performance of modern general purpose chips like your x86 aswells for",
    "start": "186920",
    "end": "194280"
  },
  {
    "text": "example and coupled with static scheduling you need to have an exposed",
    "start": "194280",
    "end": "199840"
  },
  {
    "text": "pipeline um for those two sort of come together if you're in fact going to wind",
    "start": "199840",
    "end": "206280"
  },
  {
    "text": "up having a low power environment you you can buy chips like that today most vws for example and the",
    "start": "206280",
    "end": "215040"
  },
  {
    "text": "mill works the same way to explain those terms the mill is wide issue like a VW",
    "start": "215040",
    "end": "223560"
  },
  {
    "start": "217000",
    "end": "302000"
  },
  {
    "text": "or the itanium Epic architecture um a single instruction",
    "start": "223560",
    "end": "228840"
  },
  {
    "text": "actually carries multiple operations um how many the mill is is a processor",
    "start": "228840",
    "end": "234760"
  },
  {
    "text": "family and how many a particular instruction uh can carry varies by the particular family member here for",
    "start": "234760",
    "end": "241159"
  },
  {
    "text": "example we instruction carrying three operations those operations will be issued",
    "start": "241159",
    "end": "247280"
  },
  {
    "text": "simultaneously we only issue one instruction but that means we're issuing three operations in this",
    "start": "247280",
    "end": "253519"
  },
  {
    "text": "example the lexical ordering within the instruction provides an ordering number",
    "start": "253519",
    "end": "259959"
  },
  {
    "text": "for the operations which are called slots and Slots correspond to functional unit pipelines in the execution Hardware",
    "start": "259959",
    "end": "268000"
  },
  {
    "text": "those pipelines are populated with functional units adders multipliers floating Point units load store what",
    "start": "268000",
    "end": "274000"
  },
  {
    "text": "have you but um each one of the instruction slots corresponds to a",
    "start": "274000",
    "end": "280000"
  },
  {
    "text": "pipeline so that if you want to issue an operation to a particular functional",
    "start": "280000",
    "end": "285080"
  },
  {
    "text": "unit it has to be in the slot of the pipeline that that oper that functional unit is",
    "start": "285080",
    "end": "292199"
  },
  {
    "text": "in the operations are dispatched um torn out of the",
    "start": "292199",
    "end": "297600"
  },
  {
    "text": "instruction and sent to the indiv individual pipelines who then proceed to",
    "start": "297600",
    "end": "302800"
  },
  {
    "start": "302000",
    "end": "556000"
  },
  {
    "text": "execute them an exposed pipeline means that each operation has a known",
    "start": "302800",
    "end": "308000"
  },
  {
    "text": "statically known latency when we start it now we know that it's going to be done with its results available four",
    "start": "308000",
    "end": "314360"
  },
  {
    "text": "Cycles from now one cycle from now whatever but always known thus for",
    "start": "314360",
    "end": "320000"
  },
  {
    "text": "example if we have that source code um a sum minus of product well the sum and",
    "start": "320000",
    "end": "326600"
  },
  {
    "text": "product are independent of each other and can be executed in parallel simultaneously so the instruction for",
    "start": "326600",
    "end": "333919"
  },
  {
    "text": "that is going to have two operations an ADD and a multiply that will of course wind up",
    "start": "333919",
    "end": "340520"
  },
  {
    "text": "being uh linked to uh two functional units an adder and a multiplier and the dotted pink line",
    "start": "340520",
    "end": "348759"
  },
  {
    "text": "there means a cycle boundary in this and future slides so um sometime after we",
    "start": "348759",
    "end": "356680"
  },
  {
    "text": "issue the ADD and the multiply we're going to have results which are we're now going to want to subtract so",
    "start": "356680",
    "end": "362440"
  },
  {
    "text": "there'll be a separate instruction with a subtracted it there may be other things as well but there'll be a subtract for purposes of this code",
    "start": "362440",
    "end": "368880"
  },
  {
    "text": "fragment and a corresponding functional unit one cycle later well we've got a",
    "start": "368880",
    "end": "376960"
  },
  {
    "text": "sum because an Adder takes one cycle but the multiplier isn't done yet multipliers are not one cycle operations",
    "start": "376960",
    "end": "384319"
  },
  {
    "text": "so it things are still in progress so we have to go for another cycle and now the",
    "start": "384319",
    "end": "391400"
  },
  {
    "text": "multiplier is done and it's got its result available those two results are",
    "start": "391400",
    "end": "396720"
  },
  {
    "text": "what we wanted for the subtractor so those they flow into the subtractor and",
    "start": "396720",
    "end": "402000"
  },
  {
    "text": "that in turn gets us the result of our final operation now you notice the grade out",
    "start": "402000",
    "end": "407440"
  },
  {
    "text": "item there that says who holds this that's a result which winds up being just held because we're waiting for",
    "start": "407440",
    "end": "414080"
  },
  {
    "text": "other things to come out but there's no really good reason to hold it instead",
    "start": "414080",
    "end": "419919"
  },
  {
    "text": "what we what you always really want is to have your code so scheduled such that",
    "start": "419919",
    "end": "426039"
  },
  {
    "text": "the producer's results come out just in front of when the first consumer wants",
    "start": "426039",
    "end": "431360"
  },
  {
    "text": "that value so what we really want is to do that so that the multiply starts",
    "start": "431360",
    "end": "439000"
  },
  {
    "text": "early because it takes longer then the ADD and then both results come out at",
    "start": "439000",
    "end": "444479"
  },
  {
    "text": "the same time they retire is the term for the operation completing",
    "start": "444479",
    "end": "449960"
  },
  {
    "text": "and uh it will wind up going down into the result available for the subtract",
    "start": "449960",
    "end": "455280"
  },
  {
    "text": "and we have our final result this mechanism is called Static scheduling with an exposed pipeline the mill works",
    "start": "455280",
    "end": "462560"
  },
  {
    "text": "that way there are lots of other trips that work the same way commonly in the embedded World stream processors lots of",
    "start": "462560",
    "end": "471599"
  },
  {
    "text": "things there's a catch there's always a catch the catch is the exposed pipeline",
    "start": "471960",
    "end": "479879"
  },
  {
    "text": "only works if you reliably have a statically known latency for every",
    "start": "479879",
    "end": "486720"
  },
  {
    "text": "operation because we've got to get things put out in the right order so that the issue comes out and the results",
    "start": "486720",
    "end": "492520"
  },
  {
    "text": "come out at the right time not all operations have got a fixed",
    "start": "492520",
    "end": "499840"
  },
  {
    "text": "latency that is recognizable the if the latency is not",
    "start": "499840",
    "end": "505879"
  },
  {
    "text": "statically knowable then the compiler must assume the common case which is um",
    "start": "505879",
    "end": "511520"
  },
  {
    "text": "typically the optimistic case and if the compiler is wrong then everything else",
    "start": "511520",
    "end": "519240"
  },
  {
    "text": "we have to stop issuing all other operations until we actually have that result um well we're wide machine so",
    "start": "519240",
    "end": "528360"
  },
  {
    "text": "stopping all other issues May mean that we are um stopping issuing tens hundreds",
    "start": "528360",
    "end": "534440"
  },
  {
    "text": "of operations that we otherwise could have done but it's doesn't work because",
    "start": "534440",
    "end": "539920"
  },
  {
    "text": "the timing turned out to be wrong",
    "start": "539920",
    "end": "546279"
  },
  {
    "text": "ouch in practice the only varying latency operation that matters is",
    "start": "546959",
    "end": "553839"
  },
  {
    "start": "556000",
    "end": "670000"
  },
  {
    "text": "load now to to show a bit of the detail about what we",
    "start": "556079",
    "end": "563399"
  },
  {
    "text": "do about it this problem I got to point out a little bit about the hierarchy if",
    "start": "563399",
    "end": "568600"
  },
  {
    "text": "you have a operation and it hits in the top level data cache",
    "start": "568600",
    "end": "573959"
  },
  {
    "text": "D1 um why on most machines that'll take fre",
    "start": "573959",
    "end": "580000"
  },
  {
    "text": "Cycles or thereabouts between the load and when the value has gone to the cash been checked if you do translation uh",
    "start": "580000",
    "end": "587720"
  },
  {
    "text": "translation has been involved the value has come back um the hardware Engineers who do processors uh put Blood Sweat",
    "start": "587720",
    "end": "595079"
  },
  {
    "text": "Toil and tears into making that as fast as possible because it is on the",
    "start": "595079",
    "end": "600200"
  },
  {
    "text": "critical path for all program execution and they can get it down to three cycles for many",
    "start": "600200",
    "end": "607120"
  },
  {
    "text": "architectures if the value you want is not in the top level cash in order to make it fast they make the top level",
    "start": "607120",
    "end": "613399"
  },
  {
    "text": "cash small which means very frequently the value you want will not be there",
    "start": "613399",
    "end": "619320"
  },
  {
    "text": "there isn't enough room to keep all the values you want so instead you go down the one more layer to the second level",
    "start": "619320",
    "end": "625360"
  },
  {
    "text": "cache D2 that's bigger but it also will take",
    "start": "625360",
    "end": "631560"
  },
  {
    "text": "10 typical Cycles to get a value back out if it's not there",
    "start": "631560",
    "end": "638040"
  },
  {
    "text": "either well there may be still another layer of cache but where you're seeing",
    "start": "638040",
    "end": "644120"
  },
  {
    "text": "the pattern here but eventually you'll wind up um having checked all your caches and you're going to wind up going",
    "start": "644120",
    "end": "650240"
  },
  {
    "text": "to dram and that can be 300 Cycles depending on exactly what it is that",
    "start": "650240",
    "end": "657320"
  },
  {
    "text": "your hook up and how lucky you were with respect to the dam refresh",
    "start": "657320",
    "end": "663320"
  },
  {
    "text": "logic that is extremely painful if your program has to do",
    "start": "663320",
    "end": "670120"
  },
  {
    "start": "670000",
    "end": "728000"
  },
  {
    "text": "that this is the load problem when you write for example an",
    "start": "670519",
    "end": "677680"
  },
  {
    "text": "ADD and then a load and then a shift and then a store well that's your logical program",
    "start": "677680",
    "end": "685440"
  },
  {
    "text": "that's the order you want things to happen because these operation need the results of the operations in front of",
    "start": "685440",
    "end": "691839"
  },
  {
    "text": "them but what you actually get is an ad a",
    "start": "691839",
    "end": "697279"
  },
  {
    "text": "load a stall a stall a stall for a",
    "start": "697279",
    "end": "703320"
  },
  {
    "text": "change another stall and finally the value came back and you can do the shift",
    "start": "703320",
    "end": "708880"
  },
  {
    "text": "and the store and so forth every architecture has this",
    "start": "708880",
    "end": "715200"
  },
  {
    "text": "problem they all must address it",
    "start": "715200",
    "end": "720959"
  },
  {
    "text": "the are the goal is to hide load latency there is a general strategy",
    "start": "723000",
    "end": "728680"
  },
  {
    "start": "728000",
    "end": "800000"
  },
  {
    "text": "which all architectures who attempt to address this follow you essentially ignore what the",
    "start": "728680",
    "end": "735320"
  },
  {
    "text": "program said and you issue operations as soon as their data is",
    "start": "735320",
    "end": "742399"
  },
  {
    "text": "available you issue loads as early as possible essentially as soon as the",
    "start": "742480",
    "end": "748399"
  },
  {
    "text": "address is known or even earlier this is called",
    "start": "748399",
    "end": "755000"
  },
  {
    "text": "prefetch then you find something else to do while you're waiting for the data there are two strategies for",
    "start": "755000",
    "end": "762279"
  },
  {
    "text": "finding something else to do there's a hardware approach called Dynamic",
    "start": "762279",
    "end": "768199"
  },
  {
    "text": "scheduling this is derived originally from the tomasulo algor algorithm on the",
    "start": "768199",
    "end": "774519"
  },
  {
    "text": "36091 I see a whole lot of people around the audience who like me we date from that vintage and know what we're talking",
    "start": "774519",
    "end": "781440"
  },
  {
    "text": "about on the other hand if you look inside a Haswell Mr thomasu would find it very familiar in many",
    "start": "781440",
    "end": "788920"
  },
  {
    "text": "ways um the alternative approach is a software approach static scheduling with",
    "start": "788920",
    "end": "796040"
  },
  {
    "text": "exposed pipelines And Delay slots the hardware approach with Dynamic",
    "start": "796040",
    "end": "802880"
  },
  {
    "start": "800000",
    "end": "1338000"
  },
  {
    "text": "scheduling well the hardware decodes ahead it's looking at the instructions",
    "start": "802880",
    "end": "809360"
  },
  {
    "text": "quite a long ways before when it actually execute them and it buffers the instructions that it decodes internally",
    "start": "809360",
    "end": "816959"
  },
  {
    "text": "that buffer is called the instruction window if you hear me talking about Windows later it tracks all the",
    "start": "816959",
    "end": "823800"
  },
  {
    "text": "operations whose data is not yet ready when the operations do have their",
    "start": "823800",
    "end": "830720"
  },
  {
    "text": "data available and the hardware to executed is available then it can issue",
    "start": "830720",
    "end": "835880"
  },
  {
    "text": "the operations and as operations retire um it updates those operations which might",
    "start": "835880",
    "end": "842800"
  },
  {
    "text": "have been waiting for that result um so as to make them uh known to be issuable",
    "start": "842800",
    "end": "848480"
  },
  {
    "text": "as soon as corresponding Hardware is available this is a good way of doing",
    "start": "848480",
    "end": "855759"
  },
  {
    "text": "things which is why this laptop and most general purpose",
    "start": "855759",
    "end": "860800"
  },
  {
    "text": "machines work this way the good news is that the strategy can in fact hide latency those recycles",
    "start": "860800",
    "end": "868800"
  },
  {
    "text": "if you happen to hit in the top level cash and it can hide at least some of",
    "start": "868800",
    "end": "874360"
  },
  {
    "text": "top level cash mishes mostly it can um hide top level cash miss it can hide",
    "start": "874360",
    "end": "880519"
  },
  {
    "text": "some second level cach Miss Al though typically it cannot hide 300 cycles of a",
    "start": "880519",
    "end": "885639"
  },
  {
    "text": "dam access but it can do essentially it can hide everything that it can find",
    "start": "885639",
    "end": "890959"
  },
  {
    "text": "anything else to do um otherwise it will stall the bad of it is that it's got",
    "start": "890959",
    "end": "899399"
  },
  {
    "text": "this narrow window that instruction buffer is not very big it can't be made very big for power and performance",
    "start": "899399",
    "end": "905240"
  },
  {
    "text": "reasons and it can only find it uh operations to execute which are have",
    "start": "905240",
    "end": "910639"
  },
  {
    "text": "been decoded and are sitting in that buffer there may be other operations in the program that could have issued while",
    "start": "910639",
    "end": "918160"
  },
  {
    "text": "I was waiting for the data but it can't because they're not in the buffer the truly horrible thing about it",
    "start": "918160",
    "end": "925399"
  },
  {
    "text": "however is that it's extraordinarily expensive in area and",
    "start": "925399",
    "end": "931680"
  },
  {
    "text": "power the software approach the compiler does all the work",
    "start": "931880",
    "end": "937440"
  },
  {
    "text": "not the hardware it determines dependencies among operations it can look at the",
    "start": "937440",
    "end": "945199"
  },
  {
    "text": "entire program to do so um rather than just a narrow window",
    "start": "945199",
    "end": "952279"
  },
  {
    "text": "it's schedules The Producers to retire just before the consumer wants the data it schedules independent operations",
    "start": "952279",
    "end": "960120"
  },
  {
    "text": "to issue together and schedules loads under the assumption that they will in fact hit in",
    "start": "960120",
    "end": "966880"
  },
  {
    "text": "the top level cach it assumes it assumes a latency of three for those",
    "start": "966880",
    "end": "973120"
  },
  {
    "text": "loads the good side of that cheap low power fast",
    "start": "973120",
    "end": "980040"
  },
  {
    "text": "Hardware there's no window limit can look at the whole program the",
    "start": "980040",
    "end": "986199"
  },
  {
    "text": "bad there's a limited load C concurrency um I sh go into details",
    "start": "986199",
    "end": "993319"
  },
  {
    "text": "about that but typically it can't have as many loads in Flight as the hardware approach",
    "start": "993319",
    "end": "998959"
  },
  {
    "text": "can the ugly side of it is that if it's wrong and we don't hit in the top level",
    "start": "998959",
    "end": "1006360"
  },
  {
    "text": "cash we're not doing anything else we're stopping issuing all operations waiting",
    "start": "1006360",
    "end": "1013040"
  },
  {
    "text": "for that value to come back this is the load problem",
    "start": "1013040",
    "end": "1019519"
  },
  {
    "text": "except that in fact this is not the load problem because there are in fact several different load",
    "start": "1019519",
    "end": "1025079"
  },
  {
    "text": "problems if you take that load problem apart you'll see that there's quite a bit of different cases which are",
    "start": "1025079",
    "end": "1030798"
  },
  {
    "text": "relevant you need to look at if you're going to attempt to have a solution the simplest case is the case",
    "start": "1030799",
    "end": "1038280"
  },
  {
    "text": "that you can't do anything about some loads will always miss to",
    "start": "1038280",
    "end": "1043558"
  },
  {
    "text": "damp if your program does nothing except random accesses into a half table which",
    "start": "1043559",
    "end": "1049039"
  },
  {
    "text": "is bigger than cash you are going to be pulling them from dram every single time",
    "start": "1049039",
    "end": "1055520"
  },
  {
    "text": "one 300 Cycles one 300 Cycles one 300 Cycles there's nothing that you the",
    "start": "1055520",
    "end": "1063440"
  },
  {
    "text": "hardware or the software can do about this some loads must wait for data",
    "start": "1063440",
    "end": "1069080"
  },
  {
    "text": "dependent addressing for example a link list um if I want to chain down link",
    "start": "1069080",
    "end": "1076919"
  },
  {
    "text": "list well I have to go and get the pointer to the next item and if that was in if the link list is in Dam that's a",
    "start": "1076919",
    "end": "1082640"
  },
  {
    "text": "300 cycle weight I now have an address I do another load and another 300 cycle weight an address another load another",
    "start": "1082640",
    "end": "1089840"
  },
  {
    "text": "300 cycle weight and so on",
    "start": "1089840",
    "end": "1094960"
  },
  {
    "text": "the there's been various proposals about putting logic into uh smart memory and",
    "start": "1094960",
    "end": "1102039"
  },
  {
    "text": "putting it lodic out into dram we're a commercial um operation and uh much as",
    "start": "1102039",
    "end": "1109039"
  },
  {
    "text": "we would like Samsung to help us out here Samsung is not",
    "start": "1109039",
    "end": "1114159"
  },
  {
    "text": "willing to do this and the research in this area is not working very",
    "start": "1114159",
    "end": "1120679"
  },
  {
    "text": "well no CPU as architecture has a good solution to these",
    "start": "1120679",
    "end": "1125919"
  },
  {
    "text": "cases we don't either excuse",
    "start": "1125919",
    "end": "1132720"
  },
  {
    "text": "me different category of pro load problems some loads depend on control",
    "start": "1132720",
    "end": "1140200"
  },
  {
    "text": "FL take this case um I'm assuming C from theity to",
    "start": "1140200",
    "end": "1145960"
  },
  {
    "text": "everyone this means um look at a and if it's true you don't look at B if it's",
    "start": "1145960",
    "end": "1151440"
  },
  {
    "text": "false then you go look at B if B is something that might fault or throw an",
    "start": "1151440",
    "end": "1156720"
  },
  {
    "text": "exception because it's a wild address or something but a is good then you better",
    "start": "1156720",
    "end": "1162159"
  },
  {
    "text": "not go look at a until you got look at B until you've gone and gotten a u because",
    "start": "1162159",
    "end": "1168559"
  },
  {
    "text": "the exception is in in fact not correct and you should not be issuing the corresponding",
    "start": "1168559",
    "end": "1175039"
  },
  {
    "text": "load this is not a load problem this is a speculation problem",
    "start": "1175039",
    "end": "1181559"
  },
  {
    "text": "operations and most machines there is a mechanism in which operations can be issued speculatively the hardware does",
    "start": "1181559",
    "end": "1188120"
  },
  {
    "text": "not know the program does not know that the operation is ever really going to be",
    "start": "1188120",
    "end": "1193679"
  },
  {
    "text": "used um but if we get it started early so long as nothing bad happens um if it",
    "start": "1193679",
    "end": "1201200"
  },
  {
    "text": "turns out that we might need the result and we turn out we do need the result",
    "start": "1201200",
    "end": "1206480"
  },
  {
    "text": "then by starting it early we're ahead and if we didn't need it well all we",
    "start": "1206480",
    "end": "1212000"
  },
  {
    "text": "wasted is little power um the mill does do",
    "start": "1212000",
    "end": "1217480"
  },
  {
    "text": "speculation however speculation is a subject of a future talk in this series we can only fit so much into an hour and",
    "start": "1217480",
    "end": "1225320"
  },
  {
    "text": "if you are interested in um hearing about that talk you can sign up for our",
    "start": "1225320",
    "end": "1231559"
  },
  {
    "text": "mailing list which announces these talks at that",
    "start": "1231559",
    "end": "1236640"
  },
  {
    "text": "Earl another category some loads come in related",
    "start": "1238760",
    "end": "1244640"
  },
  {
    "text": "groups a classic example is iterating over an array um if each element of the array",
    "start": "1244640",
    "end": "1253159"
  },
  {
    "text": "you want to do something that doesn't connect anything else just to that element well you can load a whole pile",
    "start": "1253159",
    "end": "1258440"
  },
  {
    "text": "of them in in advance and hide the 300 cycles of the first one you you'll have",
    "start": "1258440",
    "end": "1265039"
  },
  {
    "text": "300 Cycles to get the first one but if you can have three of them 300 of them out there um you can just stream the",
    "start": "1265039",
    "end": "1271919"
  },
  {
    "text": "values in because the addresses are known um this isn't a load problem",
    "start": "1271919",
    "end": "1279120"
  },
  {
    "text": "either this is a prefetch problem the goal here is to have",
    "start": "1279120",
    "end": "1286320"
  },
  {
    "text": "everything started up and streamed ready for you to per perform the fact that it's done through a load operation is",
    "start": "1286320",
    "end": "1292120"
  },
  {
    "text": "irrelevant what you really want is a stream of data and M pre Mill prefetching is in",
    "start": "1292120",
    "end": "1299559"
  },
  {
    "text": "fact the subject of a future talk in this series and you can in fact sign up",
    "start": "1299559",
    "end": "1304799"
  },
  {
    "text": "for the mailing list which will um get you an invite to that",
    "start": "1304799",
    "end": "1311840"
  },
  {
    "text": "talk now we've eliminated a number of cases which are either nobody can do",
    "start": "1311840",
    "end": "1318679"
  },
  {
    "text": "anything about or are different problems so what's",
    "start": "1318679",
    "end": "1323760"
  },
  {
    "text": "left some loads are collections not of related um operations not a bunch of",
    "start": "1323760",
    "end": "1331440"
  },
  {
    "text": "related loads but in fact are relatively independent thus for example a plus b",
    "start": "1331440",
    "end": "1336720"
  },
  {
    "text": "plus C we can load A and B and C simultaneously and we hope that they all come back together um but if it turns",
    "start": "1336720",
    "end": "1345039"
  },
  {
    "start": "1338000",
    "end": "1476000"
  },
  {
    "text": "out that one of them has to go to Dam or two of them have to go to D Ram we don't have to do 300 plus 300 we can only do",
    "start": "1345039",
    "end": "1352400"
  },
  {
    "text": "300 and have um everything come back all together so that's one",
    "start": "1352400",
    "end": "1359400"
  },
  {
    "text": "case another case is where you do perfectly ordinary load and it misses in",
    "start": "1359400",
    "end": "1365039"
  },
  {
    "text": "the dcash top level dcash but it does hit in the second level dcash and",
    "start": "1365039",
    "end": "1371559"
  },
  {
    "text": "because that's three Cycles versus 10 Cycles it took you an extra seven Cycles you didn't anticipate and but you may",
    "start": "1371559",
    "end": "1378679"
  },
  {
    "text": "have seven ads or multiplies or what have you that you can be doing in the meantime um second",
    "start": "1378679",
    "end": "1387720"
  },
  {
    "text": "case it's a way to hide unexpected delay of relatively small quantity of",
    "start": "1387760",
    "end": "1394400"
  },
  {
    "text": "unexpected delay um both hardware and software approaches may be able to find seven operations to perform but it's not",
    "start": "1394400",
    "end": "1401840"
  },
  {
    "text": "going to find 200 operations to perform while waiting for a a uh Dam",
    "start": "1401840",
    "end": "1409159"
  },
  {
    "text": "head outof order hand Hardware handles both of these cases and handles it very",
    "start": "1409159",
    "end": "1416278"
  },
  {
    "text": "well but only these cases this is a quote I love the Dirty",
    "start": "1416799",
    "end": "1425360"
  },
  {
    "text": "Little Secret of out of order is how little out of order there actually is",
    "start": "1425360",
    "end": "1430640"
  },
  {
    "text": "the source of this quote is Andy glue who some of you may know who he is but",
    "start": "1430640",
    "end": "1436200"
  },
  {
    "text": "he was responsible for the um the architecture of both AMD and",
    "start": "1436200",
    "end": "1442360"
  },
  {
    "text": "Intel CPUs and is now at myips and invented one of the mechanisms one of",
    "start": "1442360",
    "end": "1448760"
  },
  {
    "text": "the two standard mechanisms for doing out of order in his PhD thesis and is um",
    "start": "1448760",
    "end": "1454960"
  },
  {
    "text": "amongst the kenti is a recognized",
    "start": "1454960",
    "end": "1460080"
  },
  {
    "text": "wizard he's at Intel no he's at MEPS now he's been he's been at MEPS for over",
    "start": "1461159",
    "end": "1468159"
  },
  {
    "text": "a year um Mill Sol the mill solution is called",
    "start": "1468159",
    "end": "1474159"
  },
  {
    "text": "a deferred load we've given you what the background is now we tell you what we do",
    "start": "1474159",
    "end": "1479399"
  },
  {
    "start": "1476000",
    "end": "1736000"
  },
  {
    "text": "about it a generic Mill load operation you of course have an OP code",
    "start": "1479399",
    "end": "1486960"
  },
  {
    "text": "load you have an argument which is an address the mill has got a bunch of address modes there nothing greatly",
    "start": "1486960",
    "end": "1492279"
  },
  {
    "text": "surprising about that there's a 64-bit Base address a up to 32 bid offset and",
    "start": "1492279",
    "end": "1499600"
  },
  {
    "text": "optionally a scaled index um so plain so",
    "start": "1499600",
    "end": "1505880"
  },
  {
    "text": "common you also have to say how wide a thing you want um the mill supports 1",
    "start": "1505880",
    "end": "1512159"
  },
  {
    "text": "two 48 and 16 byte loads um or vectors of each of those and",
    "start": "1512159",
    "end": "1520000"
  },
  {
    "text": "so you have to say what it is that you want here's where things get strange",
    "start": "1520000",
    "end": "1525600"
  },
  {
    "text": "there's another argument called the delay this is the number of issue Cycles which",
    "start": "1525600",
    "end": "1532320"
  },
  {
    "text": "the hardware must wait until retiring the result of the",
    "start": "1532320",
    "end": "1539360"
  },
  {
    "text": "load if you spit in three the hardware",
    "start": "1539360",
    "end": "1544760"
  },
  {
    "text": "is required to return the result in three Cycles if it can't return the result in three Cycles you will have",
    "start": "1544760",
    "end": "1550159"
  },
  {
    "text": "stalls if you put in seven it Returns the result in seven Cycles so the",
    "start": "1550159",
    "end": "1555640"
  },
  {
    "text": "program is explicitly controlled in the retire time so the load issues",
    "start": "1555640",
    "end": "1564200"
  },
  {
    "text": "here we do another instruction we do another instruction we do another",
    "start": "1564200",
    "end": "1571679"
  },
  {
    "text": "instruction and a still a fourth instruction and now that's where the load",
    "start": "1571679",
    "end": "1579559"
  },
  {
    "text": "retires the consumer can be in the following cycle its data is available there how do",
    "start": "1579559",
    "end": "1586559"
  },
  {
    "text": "we know that the data is going to be available because the load operation",
    "start": "1586559",
    "end": "1592960"
  },
  {
    "text": "said retire is deferred for for",
    "start": "1592960",
    "end": "1597679"
  },
  {
    "text": "instructions now to compare this against the usual way of doing",
    "start": "1601520",
    "end": "1607200"
  },
  {
    "text": "things when there's nothing to do but wait we've got a load and there's no",
    "start": "1607200",
    "end": "1613600"
  },
  {
    "text": "other operation which is available that can be done while in until we get the result back from the",
    "start": "1613600",
    "end": "1620080"
  },
  {
    "text": "load we assume that there are no independent operations available well the static approach is",
    "start": "1620080",
    "end": "1627279"
  },
  {
    "text": "going to have the load and because the static knows that it's going to take three Cycles there'll be two noops in",
    "start": "1627279",
    "end": "1634880"
  },
  {
    "text": "the code because otherwise it doesn't know the two cycles have gone by typical",
    "start": "1634880",
    "end": "1640760"
  },
  {
    "text": "vliw will have no Ops in the these cases these are delay slot operations you I",
    "start": "1640760",
    "end": "1647000"
  },
  {
    "text": "may mention the dynamic case will issue the load it doesn't need",
    "start": "1647000",
    "end": "1653880"
  },
  {
    "text": "no Ops but we're assuming that we hit in the top level cash there will be two",
    "start": "1653880",
    "end": "1659080"
  },
  {
    "text": "cycles of stall the mill with deferred operations",
    "start": "1659080",
    "end": "1665120"
  },
  {
    "text": "will issue the load because it's statically scheduled it also has to say we're going to to idle for two cycles",
    "start": "1665120",
    "end": "1671760"
  },
  {
    "text": "worth of noops and the retire is there one difference between the the static",
    "start": "1671760",
    "end": "1678039"
  },
  {
    "text": "and the Deferred form despite the fact that all three have got the same performance the m noops in the encoding",
    "start": "1678039",
    "end": "1685799"
  },
  {
    "text": "occupy no extra space in the code stream mil noops have zero bits in nearly all",
    "start": "1685799",
    "end": "1694320"
  },
  {
    "text": "cases um and if you want to know how that works that was actually covered in",
    "start": "1694320",
    "end": "1699360"
  },
  {
    "text": "the first talk that was given here last May and the details are available at",
    "start": "1699360",
    "end": "1704919"
  },
  {
    "text": "that Earl on our website you can go to a look at the um video to see how it's",
    "start": "1704919",
    "end": "1710799"
  },
  {
    "text": "done yes so is that unfair because you have a two in the load that has to be",
    "start": "1710799",
    "end": "1716880"
  },
  {
    "text": "represented again please there there's a two in your load the delay number that says we have to delay for two but that",
    "start": "1716880",
    "end": "1723919"
  },
  {
    "text": "cost you some bits oh the delay cost you a few bits yes that's true but that's",
    "start": "1723919",
    "end": "1729000"
  },
  {
    "text": "per load not per delay",
    "start": "1729000",
    "end": "1732360"
  },
  {
    "text": "slot now so much for the case where we don't have",
    "start": "1734440",
    "end": "1739919"
  },
  {
    "start": "1736000",
    "end": "1977000"
  },
  {
    "text": "anything else to do now assume that there are enough operations to hide the",
    "start": "1739919",
    "end": "1745039"
  },
  {
    "text": "D1 latency and in fact that we hit in the D1 this example we assume that there",
    "start": "1745039",
    "end": "1750640"
  },
  {
    "text": "are five independent operations available the static case can only set",
    "start": "1750640",
    "end": "1757440"
  },
  {
    "text": "two of them because it the static will always have a latency of three but",
    "start": "1757440",
    "end": "1762799"
  },
  {
    "text": "they're five operations so it will schedule the load followed by five operations the retire value will in fact",
    "start": "1762799",
    "end": "1768720"
  },
  {
    "text": "retire between Op 2 and op three but that doesn't make any difference because we've got other things to do and the",
    "start": "1768720",
    "end": "1774840"
  },
  {
    "text": "fact that it did retired then doesn't matter or is irrelevant the dynamic case it's",
    "start": "1774840",
    "end": "1782159"
  },
  {
    "text": "essentially the same thing it has five operations to do um it will retire",
    "start": "1782159",
    "end": "1787480"
  },
  {
    "text": "earlier than the fifth one but it's going to be busy doing the other operations anyway so the fact they",
    "start": "1787480",
    "end": "1793880"
  },
  {
    "text": "retired early does doesn't matter the referred case is going to say well I've",
    "start": "1793880",
    "end": "1801000"
  },
  {
    "text": "got five independent operations so I will schedule my retire to happen after",
    "start": "1801000",
    "end": "1806840"
  },
  {
    "text": "the fifth operation and it will then perform of the five independent operations the",
    "start": "1806840",
    "end": "1812840"
  },
  {
    "text": "value could have been retired earlier but was not it was retired after the",
    "start": "1812840",
    "end": "1818519"
  },
  {
    "text": "fifth all three have the same performance now we come to the case when",
    "start": "1818519",
    "end": "1824559"
  },
  {
    "text": "things are different here we have those same five operations but we miss in the",
    "start": "1824559",
    "end": "1831399"
  },
  {
    "text": "D1 the static case well it schedules the load followed",
    "start": "1831399",
    "end": "1838399"
  },
  {
    "text": "by the two operations that knew about but then it will stall at least three",
    "start": "1838399",
    "end": "1844760"
  },
  {
    "text": "Cycles um and perhaps more the double yellow line there means an unknown",
    "start": "1844760",
    "end": "1850440"
  },
  {
    "text": "number of of Cycles if we happen to go to uh",
    "start": "1850440",
    "end": "1855600"
  },
  {
    "text": "dram eventually retirement but it's only actually executed two with the possible",
    "start": "1855600",
    "end": "1861240"
  },
  {
    "text": "five at the point of retire when it picks up again the dynamic case can do",
    "start": "1861240",
    "end": "1866919"
  },
  {
    "text": "better than that it can in fact get all five done before it has to stop and wait",
    "start": "1866919",
    "end": "1873200"
  },
  {
    "text": "for the value to come from wherever the value is coming from and picks up with the retire the mill deferred in",
    "start": "1873200",
    "end": "1881720"
  },
  {
    "text": "coding will have scheduled all five will'll do all five at that point point",
    "start": "1881720",
    "end": "1887399"
  },
  {
    "text": "that the value is not available yet we too will wait waiting for the value to come back and we will at that point",
    "start": "1887399",
    "end": "1895639"
  },
  {
    "text": "retire so the Deferred case is the same as dynamic in terms of timing and both",
    "start": "1895639",
    "end": "1901440"
  },
  {
    "text": "are better than static reordering of your code can give",
    "start": "1901440",
    "end": "1908880"
  },
  {
    "text": "you more opportunity to hide these stalls you manually can rewrite the",
    "start": "1908880",
    "end": "1914840"
  },
  {
    "text": "program or the compiler can do it for you or the hard work in reorder operations so long as program sematics",
    "start": "1914840",
    "end": "1922080"
  },
  {
    "text": "are maintained so for example if that's the initial code um",
    "start": "1922080",
    "end": "1930279"
  },
  {
    "text": "and that actual code is an operation there to hide one stall so there will be",
    "start": "1930279",
    "end": "1935760"
  },
  {
    "text": "a second stall even if we do hit in the L1 but loads can be hoisted over prior",
    "start": "1935760",
    "end": "1943000"
  },
  {
    "text": "operations they can be moved",
    "start": "1943000",
    "end": "1948120"
  },
  {
    "text": "and like that we now have two operations between the load and its consumer so",
    "start": "1948120",
    "end": "1954080"
  },
  {
    "text": "we're hiding two stalls if we hit in um the D1 there will be no stalling at",
    "start": "1954080",
    "end": "1961600"
  },
  {
    "text": "all in addition consumers may be lowered over later",
    "start": "1961600",
    "end": "1967638"
  },
  {
    "text": "operations we now have got three in between the load and the consumer that hides three",
    "start": "1968440",
    "end": "1975398"
  },
  {
    "text": "stalls their constraints you can't hoist a consumer",
    "start": "1976039",
    "end": "1981200"
  },
  {
    "start": "1977000",
    "end": "2090000"
  },
  {
    "text": "over its producer that you have to preserve data flow",
    "start": "1981200",
    "end": "1985840"
  },
  {
    "text": "order but you also have to look out for side channels there's two important",
    "start": "1986720",
    "end": "1992840"
  },
  {
    "text": "categories of side channels one is that loads and stores can communicate through memory and the other is operations can",
    "start": "1992840",
    "end": "2000600"
  },
  {
    "text": "communicate through exception handling if um the program it may be important",
    "start": "2000600",
    "end": "2006320"
  },
  {
    "text": "that any except ceptions are delivered in program order I won't address exceptions",
    "start": "2006320",
    "end": "2012480"
  },
  {
    "text": "exceptions are the subject of another talk um the hard the problem of going",
    "start": "2012480",
    "end": "2018399"
  },
  {
    "text": "through memory this talk is about memory the problem of going through",
    "start": "2018399",
    "end": "2023519"
  },
  {
    "text": "memory is um if the if loads and stores refer to the same address obviously a",
    "start": "2023519",
    "end": "2030799"
  },
  {
    "text": "load a store referring to different addresses um that are not communicating and uh in general can be reordered but",
    "start": "2030799",
    "end": "2038720"
  },
  {
    "text": "if they go to the same address well you can't hoist a load over a store or you'll get the former value where what",
    "start": "2038720",
    "end": "2045519"
  },
  {
    "text": "you're supposed to get is the later Value Hardware knows whether it's the same address or not one of the",
    "start": "2045519",
    "end": "2052440"
  },
  {
    "text": "advantages the hardware Dynamic scheduling the software approach does",
    "start": "2052440",
    "end": "2058440"
  },
  {
    "text": "not know whether it's the same address it can tell sometimes but all too frequently it cannot tell um because the",
    "start": "2058440",
    "end": "2067520"
  },
  {
    "text": "the two addresses May Alias they may overlap and um in the case when the",
    "start": "2067520",
    "end": "2073919"
  },
  {
    "text": "hardware winds up finding that they don't overlap but the compiler cannot prove that they don't overlap this is",
    "start": "2073919",
    "end": "2079679"
  },
  {
    "text": "called false aliasing and is a source of considerable inefficiency in pointer",
    "start": "2079679",
    "end": "2085520"
  },
  {
    "text": "heavy code like most of your C and C++ so eliminate",
    "start": "2085520",
    "end": "2093520"
  },
  {
    "start": "2090000",
    "end": "2153000"
  },
  {
    "text": "aliasing loads see memory as of a snapshot in",
    "start": "2094079",
    "end": "2099119"
  },
  {
    "text": "time all stores which take effect prior to that snapshot in time it can see all",
    "start": "2099119",
    "end": "2106079"
  },
  {
    "text": "stores which take effect after that snapshot of time as far as the load is concerned did not do not",
    "start": "2106079",
    "end": "2114119"
  },
  {
    "text": "happen the mill defines that loads see memory as of the Mills retire cycle not",
    "start": "2115560",
    "end": "2124119"
  },
  {
    "text": "where the load operation itself is is issued but where it",
    "start": "2124119",
    "end": "2130640"
  },
  {
    "text": "retires the in instruction Load 7 yes it means deliver the result after",
    "start": "2130839",
    "end": "2139720"
  },
  {
    "text": "seven Cycles but it also means deliver the",
    "start": "2139720",
    "end": "2145599"
  },
  {
    "text": "result as it will be after seven",
    "start": "2145599",
    "end": "2151400"
  },
  {
    "start": "2153000",
    "end": "2229000"
  },
  {
    "text": "instructions this gives Alias immunity load issue may be hoisted over stores",
    "start": "2153079",
    "end": "2160160"
  },
  {
    "text": "including stores at Alias because the issue is irrelevant the only thing that matters",
    "start": "2160160",
    "end": "2166000"
  },
  {
    "text": "is the retire if this is your original code with a load in consumer down there at",
    "start": "2166000",
    "end": "2173680"
  },
  {
    "text": "the bottom and a bunch of stores prior to it there's the retire and because",
    "start": "2173680",
    "end": "2180760"
  },
  {
    "text": "there's no in space in between the load and the consumer there'll be a few stalls in there and we actually execute",
    "start": "2180760",
    "end": "2186160"
  },
  {
    "text": "this code copying that over and modifying it there's there the same code but now",
    "start": "2186160",
    "end": "2192960"
  },
  {
    "text": "we're going to lift the load up ho it",
    "start": "2192960",
    "end": "2199200"
  },
  {
    "text": "suddenly we now have got six instructions that we can be operating on",
    "start": "2199200",
    "end": "2205000"
  },
  {
    "text": "in parallel and it does not matter if those stores are to the same address as",
    "start": "2205000",
    "end": "2210839"
  },
  {
    "text": "the load because the load is seeing memory as of the retire site",
    "start": "2210839",
    "end": "2218680"
  },
  {
    "text": "these are the same sematics and the same value",
    "start": "2218680",
    "end": "2224280"
  },
  {
    "start": "2229000",
    "end": "2294000"
  },
  {
    "text": "loaded loads can cross control",
    "start": "2230720",
    "end": "2235160"
  },
  {
    "text": "flow it's important that the control flow however have the same number of Cycles between the issue load and the",
    "start": "2238720",
    "end": "2245599"
  },
  {
    "text": "retire if I have an if then else that diamond there is an if then else and we do did a",
    "start": "2245599",
    "end": "2252319"
  },
  {
    "text": "load of nine cycles and if the then and the else are both six Cycles well it",
    "start": "2252319",
    "end": "2258560"
  },
  {
    "text": "doesn't matter which way the control flow went it's what we're doing is we're counting the number of instructions",
    "start": "2258560",
    "end": "2264119"
  },
  {
    "text": "issued and we'll get the retire there nine Cycles after the load was issued if",
    "start": "2264119",
    "end": "2270400"
  },
  {
    "text": "on the other hand the then and the else have got two different timings 6 versus",
    "start": "2270400",
    "end": "2276160"
  },
  {
    "text": "3 for example if we go down the uh six side well we'll retire there but if we",
    "start": "2276160",
    "end": "2284680"
  },
  {
    "text": "go down the three side we would retire there that's not going to",
    "start": "2284680",
    "end": "2292760"
  },
  {
    "text": "work so instead we have Define what we call pickup loads a pickup load operation looks very",
    "start": "2292760",
    "end": "2300599"
  },
  {
    "start": "2294000",
    "end": "2381000"
  },
  {
    "text": "much like a deferred load operation you have an OP code you have an address you",
    "start": "2300599",
    "end": "2305839"
  },
  {
    "text": "have a width but instead of a delay you supply a program selected name",
    "start": "2305839",
    "end": "2316119"
  },
  {
    "text": "which identifies this particular load the load issues there the example",
    "start": "2316119",
    "end": "2322280"
  },
  {
    "text": "uses T5 for a name it there is an instruction some number",
    "start": "2322280",
    "end": "2328920"
  },
  {
    "text": "of instructions and then we execute another operation called",
    "start": "2328920",
    "end": "2334440"
  },
  {
    "text": "pickup with the same name the pickup acts as the retire for",
    "start": "2334440",
    "end": "2340920"
  },
  {
    "text": "that load the retire the load retires",
    "start": "2340920",
    "end": "2349880"
  },
  {
    "text": "there it's available for the consumer it does not matter what control",
    "start": "2349880",
    "end": "2355599"
  },
  {
    "text": "flow there was between the load and its retire or how many cycles there was in",
    "start": "2355599",
    "end": "2361119"
  },
  {
    "text": "between we're not going to do anything until the corresponding pickup gets executed",
    "start": "2361119",
    "end": "2368440"
  },
  {
    "text": "the pickup load issues there the retire is deferred until the",
    "start": "2370319",
    "end": "2376839"
  },
  {
    "text": "matching pickup is executed and we're",
    "start": "2376839",
    "end": "2383560"
  },
  {
    "start": "2381000",
    "end": "2492000"
  },
  {
    "text": "done the compiler strategy for getting this kind of code into a code",
    "start": "2383560",
    "end": "2390359"
  },
  {
    "text": "stream it's actually quite simple most wide issue machines use time reverse",
    "start": "2390359",
    "end": "2396079"
  },
  {
    "text": "schedule eding and we do too you schedule the code in time reverse order",
    "start": "2396079",
    "end": "2402520"
  },
  {
    "text": "you decide where the consumers are first and then you schedule the producers for",
    "start": "2402520",
    "end": "2407760"
  },
  {
    "text": "that and then treat the producer as a consumer and schedule the producers for that and so forth so scheduling is done",
    "start": "2407760",
    "end": "2414680"
  },
  {
    "text": "in time reverse order although the resulting binary will be executed in time forward",
    "start": "2414680",
    "end": "2421680"
  },
  {
    "text": "order the schedules produced retire immediately in front of the first consumer of its",
    "start": "2421680",
    "end": "2428520"
  },
  {
    "text": "value you schedule the longest latency data flow in internally to the compiler",
    "start": "2428520",
    "end": "2435800"
  },
  {
    "text": "first that'll give you your best code and the shortest overall latency you Hoist the load issue to",
    "start": "2435800",
    "end": "2444560"
  },
  {
    "text": "immediately after where the address is produced for many loads this the address",
    "start": "2444560",
    "end": "2450480"
  },
  {
    "text": "is statically known and you don't have to do to um you can hoist it all the way to the the top of the function for",
    "start": "2450480",
    "end": "2457400"
  },
  {
    "text": "example if you're loading out of the the stack frame um if it turns out that there's",
    "start": "2457400",
    "end": "2463680"
  },
  {
    "text": "fewer than the minimum number of um Cycles in between the load issue and the",
    "start": "2463680",
    "end": "2469200"
  },
  {
    "text": "load retire you may have to add a few noops and when you've got that you",
    "start": "2469200",
    "end": "2475119"
  },
  {
    "text": "figure out how many cycles there are in between the load and its retire and",
    "start": "2475119",
    "end": "2480800"
  },
  {
    "text": "that's the delay that you put in the corresponding load operation this algorithm is straightforward it's quasi",
    "start": "2480800",
    "end": "2487800"
  },
  {
    "text": "linear and is real easy in the compiler the",
    "start": "2487800",
    "end": "2495519"
  },
  {
    "start": "2492000",
    "end": "2542000"
  },
  {
    "text": "tradeoff in out of order well you can hide parts of some misses and parts of all the misses you",
    "start": "2496560",
    "end": "2503440"
  },
  {
    "text": "can hide it is immune to false aliasing but you got complex and power",
    "start": "2503440",
    "end": "2510480"
  },
  {
    "text": "hungry Hardware static scheduling a Miss stalls instruction",
    "start": "2510480",
    "end": "2518240"
  },
  {
    "text": "issue you cannot resolve false aliasing but you got simple and",
    "start": "2518240",
    "end": "2524440"
  },
  {
    "text": "economical Hardware the mill we hide the same",
    "start": "2524440",
    "end": "2531720"
  },
  {
    "text": "misses as out of order we are also immune to false",
    "start": "2531720",
    "end": "2537000"
  },
  {
    "text": "aliasing but we have SIMPLE and economical",
    "start": "2537000",
    "end": "2542040"
  },
  {
    "start": "2542000",
    "end": "2613000"
  },
  {
    "text": "Hardware now I said when we start that we wouldn't talk much about implementation but this needs at least a",
    "start": "2543040",
    "end": "2549800"
  },
  {
    "text": "word or two about how um those work on the inside each Mill family member defines a",
    "start": "2549800",
    "end": "2558359"
  },
  {
    "text": "number of retire stations um these are Hardware units containing",
    "start": "2558359",
    "end": "2565400"
  },
  {
    "text": "buffers let's assume that the family member has got that number of retire",
    "start": "2565400",
    "end": "2571119"
  },
  {
    "text": "stations the load operation that load operation",
    "start": "2571119",
    "end": "2577319"
  },
  {
    "text": "we first allocate a",
    "start": "2577319",
    "end": "2580400"
  },
  {
    "text": "station it'll then unpack the arguments of the load into the",
    "start": "2582520",
    "end": "2588079"
  },
  {
    "text": "station and there's a data",
    "start": "2597520",
    "end": "2601200"
  },
  {
    "text": "buffer in parallel with this we send a request to the memory hierarchy for that",
    "start": "2602559",
    "end": "2609319"
  },
  {
    "text": "width number of bytes at that address in order to implement the fact",
    "start": "2609319",
    "end": "2616680"
  },
  {
    "start": "2613000",
    "end": "2766000"
  },
  {
    "text": "that we are having data as of retire cycle we have to see if there were in",
    "start": "2616680",
    "end": "2623079"
  },
  {
    "text": "fact any um aliasing stores while we're in the process of doing all this so when the store when",
    "start": "2623079",
    "end": "2631720"
  },
  {
    "text": "they a store a functional unit um handles aore store operation it Con",
    "start": "2631720",
    "end": "2637839"
  },
  {
    "text": "converts that into a store request which is sent to the D1 and there's your store functional",
    "start": "2637839",
    "end": "2645040"
  },
  {
    "text": "unit and there's the D1 that we're going to send",
    "start": "2645040",
    "end": "2649799"
  },
  {
    "text": "to Meanwhile any active retire stations are",
    "start": "2650400",
    "end": "2656240"
  },
  {
    "text": "monitoring the stream of store requests looking for aliases there's probably some inactive",
    "start": "2656240",
    "end": "2664880"
  },
  {
    "text": "stations but the active stations are going to be looking at the store requests as they Flow",
    "start": "2664880",
    "end": "2671079"
  },
  {
    "text": "by if they hit that is if there's a matching or overlapping",
    "start": "2671079",
    "end": "2678078"
  },
  {
    "text": "address the station discards any buffered data that it has and requests",
    "start": "2678920",
    "end": "2686240"
  },
  {
    "text": "the load that re request will'll see the",
    "start": "2686240",
    "end": "2691800"
  },
  {
    "text": "result of the store guess what that's a semantics we want it that the loads see the results",
    "start": "2691800",
    "end": "2700040"
  },
  {
    "text": "as of the retire cycle and if in fact there is aliasing and true aliasing is",
    "start": "2700040",
    "end": "2706480"
  },
  {
    "text": "very rare um in in real Code false aliasing is unfortunately rather",
    "start": "2706480",
    "end": "2712079"
  },
  {
    "text": "prevalent but true aliasing is rare but you look and well you got to reissue it",
    "start": "2712079",
    "end": "2718280"
  },
  {
    "text": "and that may take a little extra time but people who do aliasing deserve that",
    "start": "2718280",
    "end": "2724599"
  },
  {
    "text": "anyway um those of you who are familiar with the insides of the way lot and store buffers",
    "start": "2724599",
    "end": "2731319"
  },
  {
    "text": "work on a super scaler will know about um monitoring store streams this",
    "start": "2731319",
    "end": "2737720"
  },
  {
    "text": "mechanism is essentially the same implementation except that there are the substantially fewer retire stations than",
    "start": "2737720",
    "end": "2744800"
  },
  {
    "text": "there are load and store buffers when it reissues that request",
    "start": "2744800",
    "end": "2750760"
  },
  {
    "text": "that request goes down to the D1 and the value will go back up to the retire station which is now still",
    "start": "2750760",
    "end": "2758000"
  },
  {
    "text": "monitoring and May in fact need to discard its data and rquest it yet",
    "start": "2758000",
    "end": "2763040"
  },
  {
    "text": "again if it's unlucky retire stations get",
    "start": "2763040",
    "end": "2769480"
  },
  {
    "start": "2766000",
    "end": "2880000"
  },
  {
    "text": "allocated by the hardware the stations are frame local",
    "start": "2769480",
    "end": "2774680"
  },
  {
    "text": "each function logically has its own set of course they don't have a physical",
    "start": "2774680",
    "end": "2782640"
  },
  {
    "text": "set there's a fixed number of physically the physical stations are dynamically",
    "start": "2782640",
    "end": "2788839"
  },
  {
    "text": "allocated loads from different frames may be inlight concurrently so if that's a stack",
    "start": "2788839",
    "end": "2796119"
  },
  {
    "text": "frame and that green frame uh issues two loads it will have allocated two retire",
    "start": "2796119",
    "end": "2802960"
  },
  {
    "text": "stations which may retire quite some time in the future meanwhile we do a call new stack",
    "start": "2802960",
    "end": "2809960"
  },
  {
    "text": "frame the new stack frame the pink one may do its own loads and Al at a couple",
    "start": "2809960",
    "end": "2816240"
  },
  {
    "text": "of retire stations and do a call note these calls may be interrupts",
    "start": "2816240",
    "end": "2821319"
  },
  {
    "text": "for too um the blue one now does its own couple of loads we've got a whole bunch",
    "start": "2821319",
    "end": "2827599"
  },
  {
    "text": "of ones now in flight but the blue one wants to do yet another load it thinks",
    "start": "2827599",
    "end": "2832920"
  },
  {
    "text": "it's got a full set of eight it doesn't know that somebody else is using any of them so non-local stations that is non",
    "start": "2832920",
    "end": "2840839"
  },
  {
    "text": "blue in this example wind up being spilled the we pick one that pink one is",
    "start": "2840839",
    "end": "2848640"
  },
  {
    "text": "now turned red and the pink aspect of it winds up going to the Spiller which is a mill",
    "start": "2848640",
    "end": "2856520"
  },
  {
    "text": "Hardware State saave engine which is running in parallel with everything else that's going",
    "start": "2856520",
    "end": "2861880"
  },
  {
    "text": "on um and the red has now been reallocated to",
    "start": "2861880",
    "end": "2867079"
  },
  {
    "text": "Blue we only spill the address and the width and the",
    "start": "2867079",
    "end": "2873240"
  },
  {
    "text": "delay we do not spill the buffer contents instead when the return happens we",
    "start": "2873240",
    "end": "2882160"
  },
  {
    "start": "2880000",
    "end": "3033000"
  },
  {
    "text": "reallocate a retire station and request the load consequently we are able to",
    "start": "2882160",
    "end": "2889559"
  },
  {
    "text": "prefetch across calls because when that um uh return happens the value the",
    "start": "2889559",
    "end": "2897880"
  },
  {
    "text": "original load may have gone all the way to dram but in in addition to returning",
    "start": "2897880",
    "end": "2903640"
  },
  {
    "text": "a value we're not using it will have loaded the cach line into cach so",
    "start": "2903640",
    "end": "2909160"
  },
  {
    "text": "effectively it's acting as a prefetch fine print there are in fact a few rare cases",
    "start": "2909160",
    "end": "2917480"
  },
  {
    "text": "in which a hardware Dynamic allocator can find things to do that the mill algorithm cannot find it is an exercise",
    "start": "2917480",
    "end": "2926079"
  },
  {
    "text": "for the student to figure out such an example a hint is that these mostly",
    "start": "2926079",
    "end": "2931920"
  },
  {
    "text": "involve cascaded load operations they are fact rare in code but they do exist",
    "start": "2931920",
    "end": "2939799"
  },
  {
    "text": "and it's left as an exercise on the other hand because the",
    "start": "2939799",
    "end": "2945559"
  },
  {
    "text": "mill is doing static scheduling it's got a complete view of the entire program and can find operations that can be",
    "start": "2945559",
    "end": "2953400"
  },
  {
    "text": "issued in parallel which the um Hardware unit which is restricted only to the",
    "start": "2953400",
    "end": "2958720"
  },
  {
    "text": "instruction window cannot find this effect is also relatively",
    "start": "2958720",
    "end": "2964200"
  },
  {
    "text": "small the do delay I'm sorry I'm slightly deaf and I",
    "start": "2964200",
    "end": "2971520"
  },
  {
    "text": "can't hear that at all with the delay when you spill a load um the delay remains unchanged",
    "start": "2971520",
    "end": "2977160"
  },
  {
    "text": "you're only you're only counting um Cycles within the frame that issued the",
    "start": "2977160",
    "end": "2983400"
  },
  {
    "text": "load we're not counting Cycles within the called bodies so so it's not correct",
    "start": "2983400",
    "end": "2989359"
  },
  {
    "text": "to think of the delay as representing some sort of a fixed point in the instruction space it's a fix point with",
    "start": "2989359",
    "end": "2996640"
  },
  {
    "text": "respect to the code of that function call is one instruction the",
    "start": "2996640",
    "end": "3003599"
  },
  {
    "text": "call the call is one instruction no matter how long the sub routine takes yes the call counts as one",
    "start": "3003599",
    "end": "3010599"
  },
  {
    "text": "instruction um these two effects are both minor and",
    "start": "3010599",
    "end": "3017599"
  },
  {
    "text": "they're offsetting so do a first approximation the mill memory access is",
    "start": "3017599",
    "end": "3023680"
  },
  {
    "text": "essentially equivalent in performance to the dynamic out of order super scaler which this laptop",
    "start": "3023680",
    "end": "3031119"
  },
  {
    "text": "uses um however the power and um area and",
    "start": "3031119",
    "end": "3037880"
  },
  {
    "start": "3033000",
    "end": "3089000"
  },
  {
    "text": "complexity cost is vastly less another issue matter of fine",
    "start": "3037880",
    "end": "3047079"
  },
  {
    "text": "print retire stations at are spilled across functional calls or tasks which get reallocated and reloaded I",
    "start": "3047079",
    "end": "3054440"
  },
  {
    "text": "mentioned the original load will in fact have um brought the line into dram",
    "start": "3054440",
    "end": "3061000"
  },
  {
    "text": "typically though it may wind up getting kicked out depending on how complicated that call",
    "start": "3061000",
    "end": "3066680"
  },
  {
    "text": "was and in fact Branch prediction logic can anticipate that the factor return is going to happen and get the the um",
    "start": "3066680",
    "end": "3075160"
  },
  {
    "text": "reissued requests started ahead even before the return happens the branch",
    "start": "3075160",
    "end": "3080839"
  },
  {
    "text": "predictor may be wrong but that doesn't matter um because we're just simply going to toss away the reissues",
    "start": "3080839",
    "end": "3088720"
  },
  {
    "text": "anyway so much for loads however memory costs are not",
    "start": "3088920",
    "end": "3095520"
  },
  {
    "start": "3089000",
    "end": "3165000"
  },
  {
    "text": "restricted to loads there's a thing called a stor",
    "start": "3095520",
    "end": "3100480"
  },
  {
    "text": "miss you excuse",
    "start": "3102720",
    "end": "3106319"
  },
  {
    "text": "me when a program writes to memory and the line is not in Cache that",
    "start": "3108160",
    "end": "3114760"
  },
  {
    "text": "it's writing to traditional architectures have got two possible things they could",
    "start": "3114760",
    "end": "3120640"
  },
  {
    "text": "do they could take the new data and write it directly to Dam this is called right",
    "start": "3120640",
    "end": "3128119"
  },
  {
    "text": "through alternatively they can issue what amounts to a load a read to bring in the",
    "start": "3128119",
    "end": "3135760"
  },
  {
    "text": "cach line and then once the cach line is in then they can simply update it as if",
    "start": "3135760",
    "end": "3141079"
  },
  {
    "text": "it' been there there from the beginning this is called right back",
    "start": "3141079",
    "end": "3146760"
  },
  {
    "text": "either way that store has to be buffered it occupies uh memory traffic",
    "start": "3146760",
    "end": "3153160"
  },
  {
    "text": "and B bandwidth and it's a fair amount of arm waving and power cost within the logic",
    "start": "3153160",
    "end": "3160200"
  },
  {
    "text": "to handle it not on a",
    "start": "3160200",
    "end": "3165280"
  },
  {
    "start": "3165000",
    "end": "3530000"
  },
  {
    "text": "mill on a mill every bite in the caches is nine",
    "start": "3165880",
    "end": "3171599"
  },
  {
    "text": "bits long they're eight data bits and one bit that tells you whether the eight",
    "start": "3171599",
    "end": "3176880"
  },
  {
    "text": "data bits are meaningful a validity bit when you do a",
    "start": "3176880",
    "end": "3183240"
  },
  {
    "text": "store and you put a value into that bite the store supplies the eight datab bits",
    "start": "3183240",
    "end": "3189160"
  },
  {
    "text": "and the fact that they've been stored into sets the valid bit if you allocate a new cach line that",
    "start": "3189160",
    "end": "3196440"
  },
  {
    "text": "has not yet been stored all of the btes are",
    "start": "3196440",
    "end": "3202079"
  },
  {
    "text": "invalid so for example let's say we're storing eight bytes",
    "start": "3202440",
    "end": "3207960"
  },
  {
    "text": "containing the first part of hello world now that's not the actual store syntax",
    "start": "3207960",
    "end": "3213000"
  },
  {
    "text": "it's purely for illustration and there's no cash",
    "start": "3213000",
    "end": "3220200"
  },
  {
    "text": "line well when there's no cash line we will in fact allocate in Hardware a cash",
    "start": "3220200",
    "end": "3226319"
  },
  {
    "text": "line in the top level cash and the X's there mean that in fact",
    "start": "3226319",
    "end": "3232040"
  },
  {
    "text": "they're all invalid that value now gets written we now have",
    "start": "3232040",
    "end": "3239799"
  },
  {
    "text": "valid data eight bytes of it and the remaining bytes remain",
    "start": "3239799",
    "end": "3245720"
  },
  {
    "text": "invalid now assume that there's an interrupt",
    "start": "3246480",
    "end": "3252079"
  },
  {
    "text": "interrupts do a lot of code and frequently they their code will be enough to uh pretty much scrub your top",
    "start": "3252079",
    "end": "3259280"
  },
  {
    "text": "level cache and the data the dirty data that's in the top level cache will be moved down into the second level",
    "start": "3259280",
    "end": "3267559"
  },
  {
    "text": "cash like so note that the validity has remained unchanged it's still got eight bytes",
    "start": "3267799",
    "end": "3275599"
  },
  {
    "text": "that are valid and the remainder invalid now the interrupt is done we're",
    "start": "3275599",
    "end": "3281480"
  },
  {
    "text": "back to the main program and we do another store for the second half of our hello world note that the address is now",
    "start": "3281480",
    "end": "3289280"
  },
  {
    "text": "offset by eight well there isn't any cash line for it in the top level cash",
    "start": "3289280",
    "end": "3295640"
  },
  {
    "text": "so we allocate a cash line and we write to it we now have a line",
    "start": "3295640",
    "end": "3304799"
  },
  {
    "text": "for this address in two different caches these are two cach lines but they",
    "start": "3304799",
    "end": "3312200"
  },
  {
    "text": "refer to the same location in the address space once that's set up of course you",
    "start": "3312200",
    "end": "3319559"
  },
  {
    "text": "may want to read the value back so we'll do a load and when you issue a load the",
    "start": "3319559",
    "end": "3326839"
  },
  {
    "text": "request actually contains besides the line address it contains a mask of the btes that you want to return derived",
    "start": "3326839",
    "end": "3334079"
  },
  {
    "text": "from the length of the original request so if we do a load and say that",
    "start": "3334079",
    "end": "3340400"
  },
  {
    "text": "what we want is in fact um offset into the value we just read uh just U have",
    "start": "3340400",
    "end": "3348839"
  },
  {
    "text": "written well we'll allocate a retire station we'll create a request with a",
    "start": "3348839",
    "end": "3354119"
  },
  {
    "text": "mask and send that request down to the top level cach the top level cach will find the",
    "start": "3354119",
    "end": "3361920"
  },
  {
    "text": "corresponding line if it's there which it is in this case and see if there's any overlap between the valid bits of",
    "start": "3361920",
    "end": "3368960"
  },
  {
    "text": "The Cash Line and the request the mask bits and the request in this",
    "start": "3368960",
    "end": "3375799"
  },
  {
    "text": "case there are and those bytes get returned to the",
    "start": "3375799",
    "end": "3382480"
  },
  {
    "text": "retire station only those B but notice we still have some green",
    "start": "3382480",
    "end": "3388960"
  },
  {
    "text": "requests we still have not satisfied our entire request the remainder um need to",
    "start": "3388960",
    "end": "3394880"
  },
  {
    "text": "be passed down the cash hierarchy to look at the next level cash where again",
    "start": "3394880",
    "end": "3401160"
  },
  {
    "text": "we wind up checking to see if there is any overlap between the valid bits in",
    "start": "3401160",
    "end": "3406200"
  },
  {
    "text": "the line and the request bits there is and those values get returned to the",
    "start": "3406200",
    "end": "3413240"
  },
  {
    "text": "retire station now all of the request bits are satisfied we can simply discard",
    "start": "3413240",
    "end": "3419760"
  },
  {
    "text": "the request no need to go any further although if there were some still left",
    "start": "3419760",
    "end": "3424920"
  },
  {
    "text": "we wouldn't fact go further ultimately down into d a retire station is now satisfied and",
    "start": "3424920",
    "end": "3432640"
  },
  {
    "text": "the load can retire any line in this process that is",
    "start": "3432640",
    "end": "3439799"
  },
  {
    "text": "hit that supplies any valid bite will automatically be copied up one level in",
    "start": "3439799",
    "end": "3446680"
  },
  {
    "text": "the hierarchy so in this case we hit in both lines in both caches the D1 is",
    "start": "3446680",
    "end": "3453359"
  },
  {
    "text": "already at the top of the hierarchy but we'll copy the D2 cach line that we hit in up and merge its",
    "start": "3453359",
    "end": "3462920"
  },
  {
    "text": "data the rule for merger is at the top valid bite wins it's the obvious way of",
    "start": "3463240",
    "end": "3470280"
  },
  {
    "text": "doing things as a result it is impossible for",
    "start": "3470280",
    "end": "3477280"
  },
  {
    "text": "the mill to store Miss stores are always by definition satisfied in the top level",
    "start": "3477280",
    "end": "3485280"
  },
  {
    "text": "cash we don't have store buffers we don't have um all of the arm wavings of",
    "start": "3485280",
    "end": "3491839"
  },
  {
    "text": "right through it goes directly to",
    "start": "3491839",
    "end": "3496760"
  },
  {
    "text": "cash now well this takes care of a fair",
    "start": "3497920",
    "end": "3503400"
  },
  {
    "text": "amount of the problems of load and of store by far the cheapest form of memory",
    "start": "3503400",
    "end": "3509319"
  },
  {
    "text": "access is the memory access you didn't do in the first place so let's take a look at some of",
    "start": "3509319",
    "end": "3514720"
  },
  {
    "text": "those cases and to do that I have to give you a bit of a picture of the what",
    "start": "3514720",
    "end": "3520599"
  },
  {
    "text": "the cash hierarchy looks like at extremely t top level there's a CPU core of",
    "start": "3520599",
    "end": "3528480"
  },
  {
    "text": "course and um it's got load store functional units and it's got retire",
    "start": "3528480",
    "end": "3533720"
  },
  {
    "start": "3530000",
    "end": "5458000"
  },
  {
    "text": "stations and we're a Harvard architecture so there's a data cache and the load store",
    "start": "3533720",
    "end": "3541039"
  },
  {
    "text": "functional unit send requested the data cache and the data cach returns results to the retire",
    "start": "3541039",
    "end": "3546559"
  },
  {
    "text": "stations as a Harvard architector there's also an instruction side there's",
    "start": "3546559",
    "end": "3551680"
  },
  {
    "text": "a um for reasons which you can see if you look at our first um Talk on our",
    "start": "3551680",
    "end": "3559200"
  },
  {
    "text": "website that was given here last may we actually have two instruction caches and",
    "start": "3559200",
    "end": "3565520"
  },
  {
    "text": "um there's even a micro cach higher up irrelevant to this talk but I needed to",
    "start": "3565520",
    "end": "3571319"
  },
  {
    "text": "have it actually reflect reality there's a shared level too where Harvard only at the top",
    "start": "3571319",
    "end": "3577640"
  },
  {
    "text": "level so all of those values may flow from the",
    "start": "3577640",
    "end": "3583359"
  },
  {
    "text": "level two up to the respective level one caches below the level two cache we're",
    "start": "3583359",
    "end": "3589480"
  },
  {
    "text": "only level two in these examples you could have a level three cache that's entirely a configuration issue",
    "start": "3589480",
    "end": "3596000"
  },
  {
    "text": "the device controllers which feed to and from the level two cache and they are in turn are",
    "start": "3596000",
    "end": "3602720"
  },
  {
    "text": "hooked to a level of devices so far so",
    "start": "3602720",
    "end": "3609960"
  },
  {
    "text": "commonplace however you and I should mention that the actual organization is",
    "start": "3610359",
    "end": "3616799"
  },
  {
    "text": "mem dependent but typical one thing you may have noticed that ear not mentioned here is",
    "start": "3616799",
    "end": "3623480"
  },
  {
    "text": "translation and the translation look aide buffer which is present in um your memory",
    "start": "3623480",
    "end": "3629359"
  },
  {
    "text": "hierarchy we do have a tlb it's",
    "start": "3629359",
    "end": "3635160"
  },
  {
    "text": "there those of you who are chuckling know that this is not where it usually is in addition we have something that",
    "start": "3635680",
    "end": "3643039"
  },
  {
    "text": "most machines don't have called protection look aide buffers and there are in fact two of them one on the data",
    "start": "3643039",
    "end": "3650400"
  },
  {
    "text": "side and one on the instruction side and they are there",
    "start": "3650400",
    "end": "3656520"
  },
  {
    "text": "the protection looker side buffer is refer um essentially a cache over a protection control tables maintained by",
    "start": "3656880",
    "end": "3663640"
  },
  {
    "text": "the operating system just like the translation lookaside buffer is a cash over translation tables maintained by",
    "start": "3663640",
    "end": "3669599"
  },
  {
    "text": "the operating system commonly um protection and translation is done together on a",
    "start": "3669599",
    "end": "3676680"
  },
  {
    "text": "machine like this but not on the mill because of this organization the",
    "start": "3676680",
    "end": "3683559"
  },
  {
    "text": "mill users virtual caching rather than physical caching and it uses the single address",
    "start": "3683559",
    "end": "3690640"
  },
  {
    "text": "space model rather than having multiple address spaces is one statically Global",
    "start": "3690640",
    "end": "3696880"
  },
  {
    "text": "shared by everybody address",
    "start": "3696880",
    "end": "3700960"
  },
  {
    "text": "space everything within the blue dotted line uses virtual",
    "start": "3703839",
    "end": "3711558"
  },
  {
    "text": "addresses everything within that blue dot is line uses physical",
    "start": "3711839",
    "end": "3719960"
  },
  {
    "text": "addresses now to compare the models the traditional model program addresses must be",
    "start": "3721160",
    "end": "3728279"
  },
  {
    "text": "translated to physical addresses before they can be looked up in cash because the cash uses physical addressing so a",
    "start": "3728279",
    "end": "3735359"
  },
  {
    "text": "load operation passes a virtual address to the tlb the tlb turns it into a",
    "start": "3735359",
    "end": "3740480"
  },
  {
    "text": "physical address which goes to a cache which return lines to uh the CPU the tlb is doing both translation",
    "start": "3740480",
    "end": "3748720"
  },
  {
    "text": "and protection if the protection fails you'll get a fault a trap on the",
    "start": "3748720",
    "end": "3756200"
  },
  {
    "text": "mill all the tasks you're using virtual addresses there is no",
    "start": "3756200",
    "end": "3761720"
  },
  {
    "text": "aliasing across Tas of the OS so load operation actually sends the request to",
    "start": "3761720",
    "end": "3768680"
  },
  {
    "text": "two different entities one it sends directly to the cach translation is not required and data gets returned to the",
    "start": "3768680",
    "end": "3775640"
  },
  {
    "text": "CPU simultaneously and in parallel it sends the same request to the protection buffer and if the protection fails uh we",
    "start": "3775640",
    "end": "3783599"
  },
  {
    "text": "will get a fault just like anybody else um but that fault uh is done in such a",
    "start": "3783599",
    "end": "3790319"
  },
  {
    "text": "way that the data that would otherwise have been pulled never does actually get",
    "start": "3790319",
    "end": "3795480"
  },
  {
    "text": "back to the CPU it's done in parallel with the request in the",
    "start": "3795480",
    "end": "3802119"
  },
  {
    "text": "cash this critter the tlb is a",
    "start": "3802400",
    "end": "3809599"
  },
  {
    "text": "bottleneck because it's squarely in the middle of the of the critical path it is",
    "start": "3810000",
    "end": "3815720"
  },
  {
    "text": "vital that it be exceptionally fast fast means high",
    "start": "3815720",
    "end": "3821079"
  },
  {
    "text": "power fast means small consequently TR tlb misses or",
    "start": "3821079",
    "end": "3828640"
  },
  {
    "text": "common place and well",
    "start": "3828640",
    "end": "3835279"
  },
  {
    "text": "it's painful the reason why it's used is for",
    "start": "3835279",
    "end": "3841319"
  },
  {
    "text": "historical reasons back when there were only 32- bit address spaces",
    "start": "3841319",
    "end": "3847920"
  },
  {
    "text": "but computers started having multiple programs running whose cumulative total",
    "start": "3847920",
    "end": "3853079"
  },
  {
    "text": "address space across all programs was more than 32 bits would hold well you're",
    "start": "3853079",
    "end": "3860440"
  },
  {
    "text": "screwed and the solution was to give each program it own 32-bit address space",
    "start": "3860440",
    "end": "3867240"
  },
  {
    "text": "distinct from the physical address space used and translate everything from the program's own idea of what a particular",
    "start": "3867240",
    "end": "3873760"
  },
  {
    "text": "address bit pattern meant to what the hardware meant by a particular one that",
    "start": "3873760",
    "end": "3879599"
  },
  {
    "text": "translation is the tlb this is no longer relevant in a",
    "start": "3879599",
    "end": "3884880"
  },
  {
    "text": "64-bit address space you can fit lots and lots of",
    "start": "3884880",
    "end": "3890720"
  },
  {
    "text": "programs with lots and lots of stuff in 64",
    "start": "3890720",
    "end": "3896760"
  },
  {
    "text": "bits the cost it's the critical path it's power",
    "start": "3896760",
    "end": "3902720"
  },
  {
    "text": "hungry it's small so it has to be multiple leveled and real programs as",
    "start": "3902720",
    "end": "3908319"
  },
  {
    "text": "opposed to benchmarks frequently are spending as much as a quarter of their entire processing time dealing with",
    "start": "3908319",
    "end": "3915680"
  },
  {
    "text": "tlb why put translation after the cash",
    "start": "3916440",
    "end": "3922599"
  },
  {
    "text": "well the T is out of the critical path in particular you're only going to go to",
    "start": "3922599",
    "end": "3927960"
  },
  {
    "text": "the tlb if you miss in cash which means that 95% of all the loads and stores are never going to go to the",
    "start": "3927960",
    "end": "3935359"
  },
  {
    "text": "tlb consequently it can be",
    "start": "3935920",
    "end": "3941119"
  },
  {
    "text": "big it can be low power and if we're going to the tlb it",
    "start": "3941119",
    "end": "3946920"
  },
  {
    "text": "means we missed in cash and what's going to happen next is a 300 cycle Dam",
    "start": "3946920",
    "end": "3952720"
  },
  {
    "text": "weight so consequently if we take a cycle or two extra",
    "start": "3952720",
    "end": "3957880"
  },
  {
    "text": "to um be economical in our TB well 300 versus 302",
    "start": "3957880",
    "end": "3964720"
  },
  {
    "text": "Cycles nobody",
    "start": "3964720",
    "end": "3968160"
  },
  {
    "text": "cares a side benefit is that everybody uses has the",
    "start": "3974039",
    "end": "3979640"
  },
  {
    "text": "same meaning for a given bit pattern in a pointer consequently if you want to pass",
    "start": "3979640",
    "end": "3986119"
  },
  {
    "text": "a pointer between programs or most importantly a pointer between a program and the operating system the bit pattern",
    "start": "3986119",
    "end": "3993960"
  },
  {
    "text": "means exactly the same for both sender and receiver the two may have different",
    "start": "3993960",
    "end": "4001039"
  },
  {
    "text": "permissions one may say I have the rights to use this bit pattern the other",
    "start": "4001039",
    "end": "4006200"
  },
  {
    "text": "may not but they mean the same place consequently you don't have to do any",
    "start": "4006200",
    "end": "4012760"
  },
  {
    "text": "translation when you're sending these things across it turns out that on many",
    "start": "4012760",
    "end": "4018160"
  },
  {
    "text": "machines and many operating systems the operating systems winds up spending a",
    "start": "4018160",
    "end": "4023720"
  },
  {
    "text": "truly amazing quantity of time handling system calls that take pointers things like reads and writes and getting them",
    "start": "4023720",
    "end": "4030960"
  },
  {
    "text": "translated to what the operating system thinks is the corresponding address not",
    "start": "4030960",
    "end": "4036680"
  },
  {
    "text": "at all necessary on protection checking can be done in",
    "start": "4036680",
    "end": "4042920"
  },
  {
    "text": "parallel it's easy now when we allocate",
    "start": "4042920",
    "end": "4050559"
  },
  {
    "text": "memory on a conventional machine an allocation like a me map which is if",
    "start": "4050559",
    "end": "4056880"
  },
  {
    "text": "you're speak Unix um when we allocate a",
    "start": "4056880",
    "end": "4062400"
  },
  {
    "text": "megabyte it does not actually allocate physical memory what it does is it allocates",
    "start": "4062400",
    "end": "4068760"
  },
  {
    "text": "address space but it has to record the fact that it's allocated this and the way it",
    "start": "4068760",
    "end": "4074760"
  },
  {
    "text": "records that fact is it maintains a page table private to the operating",
    "start": "4074760",
    "end": "4080000"
  },
  {
    "text": "system and that page table is full of pte or page table entries one for each",
    "start": "4080000",
    "end": "4086599"
  },
  {
    "text": "page that says this hunk of um address space is in fact U Been allocated it",
    "start": "4086599",
    "end": "4093960"
  },
  {
    "text": "belongs to this program and because we haven't allocated any physical memory we",
    "start": "4093960",
    "end": "4099199"
  },
  {
    "text": "are saying that this page is unrealized it's not yet backed by any physical memory",
    "start": "4099199",
    "end": "4104798"
  },
  {
    "text": "this is a good thing because backing things by physical memory is expensive but the operating system sets up its",
    "start": "4104799",
    "end": "4110400"
  },
  {
    "text": "page table in map",
    "start": "4110400",
    "end": "4116440"
  },
  {
    "text": "when we do a store into the situation bear in mind there's no physical memory",
    "start": "4116560",
    "end": "4122640"
  },
  {
    "text": "again that store is going to go first time through remember translation is in",
    "start": "4122640",
    "end": "4129080"
  },
  {
    "text": "front of cash so we can't look at Cash yet so we go to the to the trans look",
    "start": "4129080",
    "end": "4134238"
  },
  {
    "text": "aside buffer the tlb the tlb will not find anything in there and so it",
    "start": "4134239",
    "end": "4140000"
  },
  {
    "text": "consults the OS page tables and it will find an entry in the page tables and it",
    "start": "4140000",
    "end": "4146520"
  },
  {
    "text": "will find that it is unrealized it will then cause the store to trap into the operating",
    "start": "4146520",
    "end": "4154798"
  },
  {
    "text": "system there's no physical memory somebody's got to get me some physical memory because stores always will go",
    "start": "4154799",
    "end": "4160838"
  },
  {
    "text": "wind up going to physical memory and the cashes will use a physical memory read address the OS winds up allocating a",
    "start": "4160839",
    "end": "4168000"
  },
  {
    "text": "physical page there zeros it which takes quite a long",
    "start": "4168000",
    "end": "4176400"
  },
  {
    "text": "while because it has to go actually to dram for all of this stuff you notice it takes a",
    "start": "4176400",
    "end": "4183040"
  },
  {
    "text": "while updates the a the page table entry to the corresponding physical address that's now turned green to indicate it's",
    "start": "4183040",
    "end": "4190480"
  },
  {
    "text": "correct fixes that the page table entry and returns from the trap and the store",
    "start": "4190480",
    "end": "4196199"
  },
  {
    "text": "can now proceed all is Happy except for the person who is looking at the",
    "start": "4196199",
    "end": "4202480"
  },
  {
    "text": "clock on the mill well we don't create page table",
    "start": "4202480",
    "end": "4209640"
  },
  {
    "text": "entries instead by definition any address space that is not covered by a",
    "start": "4209640",
    "end": "4214800"
  },
  {
    "text": "page table entry is",
    "start": "4214800",
    "end": "4219400"
  },
  {
    "text": "unrealized the m map well there's still a page table for those thing Pages which have had places allocated for them but",
    "start": "4220120",
    "end": "4228040"
  },
  {
    "text": "the M map allocates the address space but nothing gets put into the page",
    "start": "4228040",
    "end": "4234159"
  },
  {
    "text": "table we now do a store well remember stores don't go to",
    "start": "4234159",
    "end": "4239920"
  },
  {
    "text": "memor stores only go to the top level Cache no involvement with a",
    "start": "4239920",
    "end": "4247760"
  },
  {
    "text": "tlb um we don't have to find a page table entry there's no Associated physical",
    "start": "4247760",
    "end": "4255480"
  },
  {
    "text": "memory and the address space is backless this is backless memory things that live",
    "start": "4255480",
    "end": "4262320"
  },
  {
    "text": "entirely in cash not in Dam there's never even been dram",
    "start": "4262320",
    "end": "4268400"
  },
  {
    "text": "allocated if however the program does a no no and loads a value that never got",
    "start": "4268400",
    "end": "4274760"
  },
  {
    "text": "written it will miss in cash because it's never gotten written so we do issue a",
    "start": "4274760",
    "end": "4282560"
  },
  {
    "text": "load the load store functional unit does its thing we will check to see if we have",
    "start": "4282560",
    "end": "4288960"
  },
  {
    "text": "permissions for this area the PB will check and we'll say that it's",
    "start": "4288960",
    "end": "4294719"
  },
  {
    "text": "okay we will look in the dll one the the uh top level data cache nope no such",
    "start": "4294719",
    "end": "4303520"
  },
  {
    "text": "luck we'll then look in this is the request flowing down that you saw",
    "start": "4303520",
    "end": "4308560"
  },
  {
    "text": "earlier on we'll look in the second level of data cache nope",
    "start": "4308560",
    "end": "4314480"
  },
  {
    "text": "we'll Now find the page table entry which involves looking in the tlb just",
    "start": "4314480",
    "end": "4319520"
  },
  {
    "text": "like anybody else and when we the tlb won't find it but it'll look in the page",
    "start": "4319520",
    "end": "4324719"
  },
  {
    "text": "table and it won't find a page table entry either there isn't one at this point without going to",
    "start": "4324719",
    "end": "4333520"
  },
  {
    "text": "Dam we've got a retire station the tlb returns a",
    "start": "4333520",
    "end": "4339600"
  },
  {
    "text": "zero directly that is a Miss to backless memory implicitly",
    "start": "4339600",
    "end": "4347440"
  },
  {
    "text": "defines that backless memory is already zero we didn't have to allocate it we",
    "start": "4347440",
    "end": "4353960"
  },
  {
    "text": "didn't have to initialize it we simply load Miss into it oh this thing is",
    "start": "4353960",
    "end": "4359880"
  },
  {
    "text": "backless have a zero the retire station has a zero up",
    "start": "4359880",
    "end": "4366280"
  },
  {
    "text": "the value goes when it times out or the pickup happens and away we go there is",
    "start": "4366280",
    "end": "4372520"
  },
  {
    "text": "no access to Dam the other side of accessing dram is",
    "start": "4372520",
    "end": "4378639"
  },
  {
    "text": "an evict bear in mind the stores only go to the top level but eventually cash gets busy and we wind up evicting dirty",
    "start": "4378639",
    "end": "4384920"
  },
  {
    "text": "values that have to be written back well um that eviction there's all you'll",
    "start": "4384920",
    "end": "4392560"
  },
  {
    "text": "always pick a victim that victim of course will be in the second level cash because that's things to get written out",
    "start": "4392560",
    "end": "4399360"
  },
  {
    "text": "so we select the least recently used line standard algorithm and let's say it's that",
    "start": "4399360",
    "end": "4405679"
  },
  {
    "text": "line we'll search for a page table entry guess what there ain't",
    "start": "4405679",
    "end": "4411800"
  },
  {
    "text": "one so at that point we have to allocate a physical page we are in fact going to",
    "start": "4411800",
    "end": "4418920"
  },
  {
    "text": "put things out into Dam we need a physical page and let's say that that is the",
    "start": "4418920",
    "end": "4424600"
  },
  {
    "text": "physical page which you allocate we update the page",
    "start": "4424600",
    "end": "4430199"
  },
  {
    "text": "table by adding a new page table entry which refers to our new data our new um",
    "start": "4430199",
    "end": "4436440"
  },
  {
    "text": "physical memory we copy the data to",
    "start": "4436440",
    "end": "4441560"
  },
  {
    "text": "memory we discard the cach line the one we just evicted and that cash Line is now usable",
    "start": "4443199",
    "end": "4450480"
  },
  {
    "text": "by somebody else is that allocation of the main memory of an OS",
    "start": "4450480",
    "end": "4456159"
  },
  {
    "text": "function all steps are in",
    "start": "4456159",
    "end": "4460000"
  },
  {
    "text": "Hardware what happens in in case of memory map inut output so if I store to",
    "start": "4461679",
    "end": "4467159"
  },
  {
    "text": "memory map save it until after the talk otherwise I'm going to run into time",
    "start": "4467159",
    "end": "4472679"
  },
  {
    "text": "trouble I I will",
    "start": "4472679",
    "end": "4476280"
  },
  {
    "text": "answer um there are no traps to the",
    "start": "4478639",
    "end": "4483440"
  },
  {
    "text": "OS fine print of course you knew there was going to be fine",
    "start": "4483880",
    "end": "4489239"
  },
  {
    "text": "print the way this works the way the hardware is able to do it is that we use a hierarchical page table",
    "start": "4489639",
    "end": "4496080"
  },
  {
    "text": "which is a common mechanism in which you have different Siz pages but uniquely we",
    "start": "4496080",
    "end": "4502159"
  },
  {
    "text": "support Pages which are one line",
    "start": "4502159",
    "end": "4506760"
  },
  {
    "text": "long the hardware allocates out of a bit map of a bunch of oneline pages which",
    "start": "4509679",
    "end": "4515840"
  },
  {
    "text": "are all contiguous Hardware allocates that of bit Maps real",
    "start": "4515840",
    "end": "4521760"
  },
  {
    "text": "well if it's succeeds in running out of its bit map then the hardware will allocate from",
    "start": "4521760",
    "end": "4531800"
  },
  {
    "text": "a list of available other blocks which has got Associated bit",
    "start": "4531800",
    "end": "4537400"
  },
  {
    "text": "Maps if it runs out of blocks it triggers a",
    "start": "4537400",
    "end": "4544239"
  },
  {
    "text": "trap however there's a background OS process which is make sure that the",
    "start": "4544440",
    "end": "4550520"
  },
  {
    "text": "Hardware's lists of blocks is um full enough that actually running out is a",
    "start": "4550520",
    "end": "4556400"
  },
  {
    "text": "rare",
    "start": "4556400",
    "end": "4558678"
  },
  {
    "text": "event that's backless memory that takes care of many memory",
    "start": "4561840",
    "end": "4567840"
  },
  {
    "text": "things but not all of them a large quantity of",
    "start": "4567840",
    "end": "4573880"
  },
  {
    "text": "the um memory accesses for everyone is stack",
    "start": "4573880",
    "end": "4580840"
  },
  {
    "text": "frames probably the major majority of all memory references for everything except high performance Computing and uh",
    "start": "4580840",
    "end": "4590120"
  },
  {
    "text": "benchmarks um many of those references are",
    "start": "4590679",
    "end": "4597960"
  },
  {
    "text": "initialization and much of that initialization is to",
    "start": "4597960",
    "end": "4602760"
  },
  {
    "text": "zero when a stack frame exits all the lines in the frame are",
    "start": "4603800",
    "end": "4611440"
  },
  {
    "text": "garbage they are dead but they will be in dirty in cash and if",
    "start": "4611440",
    "end": "4618199"
  },
  {
    "text": "that we don't wind up reusing the space of that frame those will wind up being",
    "start": "4618199",
    "end": "4623440"
  },
  {
    "text": "evicted back out to dram even pointlessly because they're dead they're",
    "start": "4623440",
    "end": "4631320"
  },
  {
    "text": "meaningless access to uninitialized data is a common",
    "start": "4632239",
    "end": "4637678"
  },
  {
    "text": "bug and a common exploit is to browse in the rubble left by exited stack",
    "start": "4637719",
    "end": "4647120"
  },
  {
    "text": "frames you look up in your stack and there may be what was left of a frame",
    "start": "4647120",
    "end": "4654760"
  },
  {
    "text": "that was doing password validation and in the memory there is the password in",
    "start": "4654760",
    "end": "4661400"
  },
  {
    "text": "clear and if you just simply go and look there you'll find things you're not",
    "start": "4661400",
    "end": "4666440"
  },
  {
    "text": "supposed to this is a common source of exports the implicit zero",
    "start": "4666440",
    "end": "4675000"
  },
  {
    "text": "you've got a data stack Stacks screw up in this",
    "start": "4675000",
    "end": "4680198"
  },
  {
    "text": "example on the mill you allocate a stack frame with explicitly with the stack F",
    "start": "4680679",
    "end": "4687600"
  },
  {
    "text": "operation it takes an argument which is the amount of space You Want To Have and that is in units of",
    "start": "4687600",
    "end": "4694400"
  },
  {
    "text": "lines so stack F of four says I want four lines worth of a new",
    "start": "4694400",
    "end": "4701280"
  },
  {
    "text": "frame simultaneously there is a bit map the implicit zero bit map with one bit",
    "start": "4701920",
    "end": "4707840"
  },
  {
    "text": "for each of these lines there",
    "start": "4707840",
    "end": "4714239"
  },
  {
    "text": "and we associate one bit with each of the new lines these are bits are clear",
    "start": "4714239",
    "end": "4721719"
  },
  {
    "text": "they're false now if we do a load from an implicit",
    "start": "4721719",
    "end": "4728760"
  },
  {
    "text": "zero line as for example in that case we have",
    "start": "4728760",
    "end": "4734440"
  },
  {
    "text": "a retire station we send a request down there it looks at the bit map and it",
    "start": "4734440",
    "end": "4740600"
  },
  {
    "text": "says no this has no",
    "start": "4740600",
    "end": "4745679"
  },
  {
    "text": "data it returns a zero we didn't have to initialize it you",
    "start": "4745679",
    "end": "4752719"
  },
  {
    "text": "unconditionally will get a zero you can't browse in rubble you'll get a",
    "start": "4752719",
    "end": "4759760"
  },
  {
    "text": "zero if you do a store to an implicit zero it writes a",
    "start": "4761840",
    "end": "4769880"
  },
  {
    "text": "data there's a store request writes the",
    "start": "4770400",
    "end": "4778080"
  },
  {
    "text": "data sets the all of the bytes of the rest of that line remember it's a new",
    "start": "4779199",
    "end": "4787679"
  },
  {
    "text": "line to zero and sets the",
    "start": "4787679",
    "end": "4793960"
  },
  {
    "text": "bit subsequent loads will look at the bit and say oh",
    "start": "4793960",
    "end": "4799120"
  },
  {
    "text": "this line has been realized and we'll actually go and",
    "start": "4799120",
    "end": "4804320"
  },
  {
    "text": "look at the cash hierarchy for the",
    "start": "4804320",
    "end": "4807638"
  },
  {
    "text": "line a return operation discards all realized lines in",
    "start": "4810080",
    "end": "4817760"
  },
  {
    "text": "the frame that you're returning from so we've got one realized line here that",
    "start": "4817760",
    "end": "4823440"
  },
  {
    "text": "um is there we execute the return it is that line is discarded in the course of",
    "start": "4823440",
    "end": "4830120"
  },
  {
    "text": "cutting back the stack we we um reset so those lines are no longer part of the",
    "start": "4830120",
    "end": "4835920"
  },
  {
    "text": "stack we also reset the corresponding bits in",
    "start": "4835920",
    "end": "4841159"
  },
  {
    "text": "that bit mask the realized lines are",
    "start": "4841159",
    "end": "4847320"
  },
  {
    "text": "discarded in in fact what we wind up doing is we just simply clear all the valid bits",
    "start": "4847320",
    "end": "4854520"
  },
  {
    "text": "um consequently they will not be written back to DM we also clear the Dirty",
    "start": "4854520",
    "end": "4861198"
  },
  {
    "text": "Bit you knew there was going to be fine print compiler optimization can",
    "start": "4862560",
    "end": "4868920"
  },
  {
    "text": "recognize the fact that things are being initialized with zero and simply skip that",
    "start": "4868920",
    "end": "4874600"
  },
  {
    "text": "instruction you don't have to it's going to be",
    "start": "4874600",
    "end": "4878760"
  },
  {
    "text": "zero however the this greatly confuses um initialization error",
    "start": "4880120",
    "end": "4886600"
  },
  {
    "text": "detecting tools like purify or valr um so those have to be modified to",
    "start": "4886600",
    "end": "4895080"
  },
  {
    "text": "run on a mill so that they are aware of the existence of an implicit zero otherwise they will give you errors",
    "start": "4895080",
    "end": "4902360"
  },
  {
    "text": "all over everything it could be impli it could be used for other um kinds of allocation we",
    "start": "4902360",
    "end": "4909280"
  },
  {
    "text": "do not there's been some discussion about using it for the active allocation point in the garbage collecting system",
    "start": "4909280",
    "end": "4915280"
  },
  {
    "text": "but maybe someday the bit mask covers all of the",
    "start": "4915280",
    "end": "4922440"
  },
  {
    "text": "lines at the top of the stack and obviously it rotates with the stack in in the obvious way um consequently it",
    "start": "4922440",
    "end": "4929639"
  },
  {
    "text": "may um cover lines which are cover more than one stack uh more than one stack",
    "start": "4929639",
    "end": "4936120"
  },
  {
    "text": "frame um a typical implicit zero mask will be 64 bits covering the top 6 four",
    "start": "4936120",
    "end": "4942920"
  },
  {
    "text": "lines of the Mask which may be a number of different frames um as calls happen",
    "start": "4942920",
    "end": "4948320"
  },
  {
    "text": "the um the mask rotates so it's always covering the top lines of the",
    "start": "4948320",
    "end": "4954480"
  },
  {
    "text": "mask of of the stack",
    "start": "4954480",
    "end": "4960360"
  },
  {
    "text": "um you can ask for a stack frame which is bigger than those 64 lines in that",
    "start": "4960360",
    "end": "4966199"
  },
  {
    "text": "case um all the ones which are not covered by the implicit zero register are immediately um",
    "start": "4966199",
    "end": "4973080"
  },
  {
    "text": "uh allocated and initialized and realized um by the stack of operation",
    "start": "4973080",
    "end": "4978719"
  },
  {
    "text": "itself it just AO just generates the necessary numbers of of dummy",
    "start": "4978719",
    "end": "4985040"
  },
  {
    "text": "stores a task switch forces realization of",
    "start": "4985040",
    "end": "4990960"
  },
  {
    "text": "everything there's complications of implicit zero if you're running in a mold cor if um because the memory does",
    "start": "4991560",
    "end": "4999040"
  },
  {
    "text": "not reflect what the running core with the implicit is going to see um if some",
    "start": "4999040",
    "end": "5004960"
  },
  {
    "text": "other core has the ability to look at memory underneath it it will see the values that should be that are should be",
    "start": "5004960",
    "end": "5013120"
  },
  {
    "text": "zero but are not because it's looking at real memory the hardware has mechanisms",
    "start": "5013120",
    "end": "5018639"
  },
  {
    "text": "to handle this moldic cor is however a um topic of another talk um in this",
    "start": "5018639",
    "end": "5026280"
  },
  {
    "text": "series which we invite you to come in here",
    "start": "5026280",
    "end": "5031480"
  },
  {
    "text": "lastly memory consistency is an issue whether you are taking a long time for",
    "start": "5031480",
    "end": "5036880"
  },
  {
    "text": "your loads and stores or a short time for your loads and stores because memory consistency leads to memory consistency",
    "start": "5036880",
    "end": "5043040"
  },
  {
    "text": "bugs and um frequently very painful and slow operations to ensure",
    "start": "5043040",
    "end": "5049880"
  },
  {
    "text": "consistency if the program says that for an",
    "start": "5049880",
    "end": "5056360"
  },
  {
    "text": "example that's a semantic order whatever the program said that is the defines the",
    "start": "5056639",
    "end": "5063480"
  },
  {
    "text": "sematics of the execution of the program and the time order of execution",
    "start": "5063480",
    "end": "5068840"
  },
  {
    "text": "defines the semantic order of the program The Mill is a wide issue machine",
    "start": "5068840",
    "end": "5075000"
  },
  {
    "text": "so this turns into instructions and let us say that both",
    "start": "5075000",
    "end": "5080800"
  },
  {
    "text": "loads and the store were in um wind up being put into the same instruction",
    "start": "5080800",
    "end": "5086239"
  },
  {
    "text": "which they could be and there is a semantic ordering in",
    "start": "5086239",
    "end": "5091880"
  },
  {
    "text": "slot order for the wide issue it is the compiler's job to turn",
    "start": "5091880",
    "end": "5099520"
  },
  {
    "text": "to make sure that it um encodes the operations in the slots in the same",
    "start": "5099520",
    "end": "5105880"
  },
  {
    "text": "order as the program is specified so we know that the slot zero load must be the",
    "start": "5105880",
    "end": "5111520"
  },
  {
    "text": "load one on the left hand side because it has to be before the store and the",
    "start": "5111520",
    "end": "5117360"
  },
  {
    "text": "load in slot two on the right hand side must be the one load two which is after",
    "start": "5117360",
    "end": "5123000"
  },
  {
    "text": "the store in order to preserve sematic order",
    "start": "5123000",
    "end": "5129480"
  },
  {
    "text": "now we now have sematic ordering within an instruction that instruction winds up",
    "start": "5129480",
    "end": "5136199"
  },
  {
    "text": "being distributed out to functional units during decode as explained at the",
    "start": "5136199",
    "end": "5141800"
  },
  {
    "text": "very beginning and those wind up going out to the functional units in slot",
    "start": "5141800",
    "end": "5150040"
  },
  {
    "text": "order consequently there we are now defining a semantic order within the",
    "start": "5150040",
    "end": "5155800"
  },
  {
    "text": "functional units as they execute in fact physically they may be running in parallel but the visibility between",
    "start": "5155800",
    "end": "5163960"
  },
  {
    "text": "units is ordered in that same semantic",
    "start": "5163960",
    "end": "5168320"
  },
  {
    "text": "order those functional units issue requests those requests will wind up",
    "start": "5169440",
    "end": "5176239"
  },
  {
    "text": "going down to cache and they request defines a request",
    "start": "5176239",
    "end": "5181880"
  },
  {
    "text": "order which is also the same semantic order as from the beginning but Lo are as",
    "start": "5181880",
    "end": "5192040"
  },
  {
    "text": "of instruction quite true and if I could",
    "start": "5194119",
    "end": "5199760"
  },
  {
    "text": "put all of that on a slide I would",
    "start": "5199760",
    "end": "5205840"
  },
  {
    "text": "no no it there is a defined order take it take it after I finish I I'm soon to",
    "start": "5205840",
    "end": "5213639"
  },
  {
    "text": "finish okay so we have a defined order here in the cache and they may get",
    "start": "5213639",
    "end": "5220440"
  },
  {
    "text": "satisfied and things may go down further but they too will wind up retaining the order consequently top to bottom from",
    "start": "5220440",
    "end": "5228040"
  },
  {
    "text": "the original program all the way down through instructions functional units requests",
    "start": "5228040",
    "end": "5234960"
  },
  {
    "text": "and data there is no overtaking nothing is done out of the",
    "start": "5234960",
    "end": "5240679"
  },
  {
    "text": "original order this is called sequential consistency and is universally regarded as the most",
    "start": "5240679",
    "end": "5248560"
  },
  {
    "text": "intellectually understandable um memory model and",
    "start": "5248560",
    "end": "5254199"
  },
  {
    "text": "organization but it only applies within a monore within a single",
    "start": "5254199",
    "end": "5259599"
  },
  {
    "text": "core there are no membar instructions which are commonly required if you do",
    "start": "5259760",
    "end": "5265239"
  },
  {
    "text": "not have Hardware sequential consistency membar is extraordinarily expensive and",
    "start": "5265239",
    "end": "5270400"
  },
  {
    "text": "very very hard to get right there are no memory race",
    "start": "5270400",
    "end": "5277119"
  },
  {
    "text": "bugs if you are in fact running in a multicore you have a cache coherence",
    "start": "5277440",
    "end": "5284080"
  },
  {
    "text": "protocol moldic cor is the topic of another talk and um one of the aspects that will",
    "start": "5284080",
    "end": "5292040"
  },
  {
    "text": "be covered in that talk is the fact that our cache coherence protocol merges the",
    "start": "5292040",
    "end": "5297239"
  },
  {
    "text": "sequential consistency of each core into a globally sequentially consistent",
    "start": "5297239",
    "end": "5302440"
  },
  {
    "text": "ordering across all courts how it does that is 15 minutes with the slides so",
    "start": "5302440",
    "end": "5309480"
  },
  {
    "text": "you won't get it t today however interestingly enough due",
    "start": "5309480",
    "end": "5314679"
  },
  {
    "text": "to other aspects some of which were touched on today the resting cash coherence",
    "start": "5314679",
    "end": "5319960"
  },
  {
    "text": "protocol runs roughly twice the speed of a the cash coherence protocol on a",
    "start": "5319960",
    "end": "5325600"
  },
  {
    "text": "conventional and cash go protocols on a um High count multicore or can consume",
    "start": "5325600",
    "end": "5333280"
  },
  {
    "text": "an awful lot of your performance and power you can sign up at that Earl for",
    "start": "5333280",
    "end": "5343600"
  },
  {
    "text": "an invitation to that talk",
    "start": "5343600",
    "end": "5349800"
  },
  {
    "text": "summaries it'll hide cash latency and cash misses to the extent that it can be",
    "start": "5349800",
    "end": "5355360"
  },
  {
    "text": "done because we have there are in fact operations so the performance is like outof order Hardware and the power cost",
    "start": "5355360",
    "end": "5362800"
  },
  {
    "text": "is like static scheduling it is immune to false aliasing it will implicitly prefet",
    "start": "5362800",
    "end": "5369639"
  },
  {
    "text": "across interrupts and function calls doesn't need to zero initialize",
    "start": "5369639",
    "end": "5376920"
  },
  {
    "text": "stack frames doesn't write back dead frames prevents uninitialized frame",
    "start": "5376920",
    "end": "5385320"
  },
  {
    "text": "bugs has no store buffers as opposed to 50 odd on something like a has well",
    "start": "5386280",
    "end": "5392560"
  },
  {
    "text": "at extraordinary cost stores go to cash directly eliminates a great majority of",
    "start": "5392560",
    "end": "5399280"
  },
  {
    "text": "tlb references shared address space simplifies the operating",
    "start": "5399280",
    "end": "5405880"
  },
  {
    "text": "system backlist data needs no physical Pages um if you allocate a hung of",
    "start": "5406080",
    "end": "5414080"
  },
  {
    "text": "memory use it deallocate it there may never be any",
    "start": "5414080",
    "end": "5420440"
  },
  {
    "text": "memory at all and the OS is never",
    "start": "5420440",
    "end": "5424719"
  },
  {
    "text": "involved uniform sequential consistency",
    "start": "5425719",
    "end": "5430440"
  },
  {
    "text": "throughout I think didn't I mention that you could sign",
    "start": "5431600",
    "end": "5436920"
  },
  {
    "text": "up thank you",
    "start": "5437880",
    "end": "5441198"
  },
  {
    "text": "[Applause]",
    "start": "5443180",
    "end": "5448859"
  },
  {
    "text": "folks",
    "start": "5450840",
    "end": "5453840"
  }
]