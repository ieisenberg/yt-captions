[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "so basically um with that in mind when i say computing with fpgas",
    "start": "11679",
    "end": "16800"
  },
  {
    "text": "is to use fpgas to do some computations that you would generally do on",
    "start": "16800",
    "end": "22400"
  },
  {
    "text": "microprocessors and uh to explore what the potential is of this technology",
    "start": "22400",
    "end": "28720"
  },
  {
    "text": "to do such uh computations so um in order to get started uh first a",
    "start": "28720",
    "end": "35920"
  },
  {
    "start": "33000",
    "end": "235000"
  },
  {
    "text": "couple of points on why this could be a good idea or why we would like to do these kind of",
    "start": "35920",
    "end": "41680"
  },
  {
    "text": "things and uh what i'm claiming here is basically that you could have many orders of magnitude",
    "start": "41680",
    "end": "48160"
  },
  {
    "text": "improvement in performance and in power consumption when using fpgas as compared to",
    "start": "48160",
    "end": "54320"
  },
  {
    "text": "implementing a particular function on a microprocessor and i'll show some examples of these kind of applications that we",
    "start": "54320",
    "end": "62239"
  },
  {
    "text": "were already that we already have for um for fpgas",
    "start": "62239",
    "end": "68159"
  },
  {
    "text": "one neat thing about fpgas is that we have much more degrees of freedom than we have on microprocessors always a",
    "start": "68159",
    "end": "74880"
  },
  {
    "text": "little bit a scary thing because we really don't know exactly how to deal with all these degrees of freedom",
    "start": "74880",
    "end": "80240"
  },
  {
    "text": "how to handle all the flexibility that we have on this new technology",
    "start": "80240",
    "end": "86479"
  },
  {
    "text": "an advantage of using them is that you can just go into a store and buy some so instead of proposing a new",
    "start": "86479",
    "end": "92400"
  },
  {
    "text": "architecture that is actually doing something very well and then",
    "start": "92400",
    "end": "98000"
  },
  {
    "text": "having to persuade all of the world that this is the next architecture that they should be using here you can just go into a store buy",
    "start": "98000",
    "end": "104479"
  },
  {
    "text": "these parts and try to see what you can do with them to compete with with general purpose",
    "start": "104479",
    "end": "110479"
  },
  {
    "text": "processors in this case a further advantage of microprocessors is",
    "start": "110479",
    "end": "116240"
  },
  {
    "text": "the regular of of fpgas is the regular structure so you have a structure that is somewhere",
    "start": "116240",
    "end": "123119"
  },
  {
    "text": "between memory and microprocessors it is more regular than microprocessors",
    "start": "123119",
    "end": "128319"
  },
  {
    "text": "less regular than memory and uh ideally it should be possible to scale",
    "start": "128319",
    "end": "133520"
  },
  {
    "text": "this technology much larger and many people have made this point was a talk here actually a couple months ago",
    "start": "133520",
    "end": "139680"
  },
  {
    "text": "by nick tridenix talking about various uh parts of these aspects disadvantages uh",
    "start": "139680",
    "end": "146800"
  },
  {
    "text": "offhand the first thing that you see when using fpgas is that",
    "start": "146800",
    "end": "152800"
  },
  {
    "text": "the latency is going to be slower so you're running at roughly five times less clock frequency",
    "start": "152800",
    "end": "158319"
  },
  {
    "text": "and um taking this particular circuit and putting it on an fpga",
    "start": "158319",
    "end": "163680"
  },
  {
    "text": "you'll also realize that it's about 10 times larger the ballpark figure is that fpgas",
    "start": "163680",
    "end": "170160"
  },
  {
    "text": "today would use about 80 percent of of their area to allow",
    "start": "170160",
    "end": "177519"
  },
  {
    "text": "all the flexible interconnect that that they provide and this is basically wasted area so if",
    "start": "177519",
    "end": "184879"
  },
  {
    "text": "you have a circuit that you put in there eighty percent goes for the flexibility that you",
    "start": "184879",
    "end": "190239"
  },
  {
    "text": "that you get with the device so um if you look at this um uh the",
    "start": "190239",
    "end": "195920"
  },
  {
    "text": "disadvantages further we see also we have many years of",
    "start": "195920",
    "end": "202159"
  },
  {
    "text": "compiler development for microprocessors and programming methodologies and ways of actually dealing with these",
    "start": "202159",
    "end": "208720"
  },
  {
    "text": "devices whereas fpga is really are just targeted at this point by synthesis tools that are",
    "start": "208720",
    "end": "215120"
  },
  {
    "text": "coming from a different field from implementing chips and just apply to micro to fpgas",
    "start": "215120",
    "end": "221440"
  },
  {
    "text": "and you get the circuit in there it's really not a programming environment what you have is a design environment that will get",
    "start": "221440",
    "end": "228720"
  },
  {
    "text": "you a circuit that works perfectly but it will take you a long time to get there",
    "start": "228720",
    "end": "234319"
  },
  {
    "text": "so if you look at the summary of all these technologies",
    "start": "234319",
    "end": "239360"
  },
  {
    "start": "235000",
    "end": "324000"
  },
  {
    "text": "we see the availability is uh very well for uh the processors dsps",
    "start": "239360",
    "end": "245599"
  },
  {
    "text": "and fpgas on the asic if you have a fixed function either the asic exists or it doesn't exist so it depends on",
    "start": "245599",
    "end": "252000"
  },
  {
    "text": "what you want to do sometimes you get lucky and there is an asic that does exactly what you want sometimes you have to design it yourself",
    "start": "252000",
    "end": "258239"
  },
  {
    "text": "which is not very useful if you are in a programming environment where you really want to get some tasks done quickly",
    "start": "258239",
    "end": "265199"
  },
  {
    "text": "scalability on the ac again depends because depending on what what you is that you're implementing uh",
    "start": "265199",
    "end": "271040"
  },
  {
    "text": "processors and dsps present significant challenges if you have a new technology you have",
    "start": "271040",
    "end": "276080"
  },
  {
    "text": "significantly more area you have to throw a lot of engineers onto the problem and they have to try to decide what to do",
    "start": "276080",
    "end": "281919"
  },
  {
    "text": "with this added area how to scale the previous microprocessor onto this larger area that you have now",
    "start": "281919",
    "end": "288080"
  },
  {
    "text": "again the degrees of freedom that we had before fpgas have a lot at the cost of course that we saw",
    "start": "288080",
    "end": "294720"
  },
  {
    "text": "before and the performance and power advantage that",
    "start": "294720",
    "end": "301680"
  },
  {
    "text": "you might have theoretically lies between the microprocessor and the asic",
    "start": "301680",
    "end": "307840"
  },
  {
    "text": "so you expect that you would have the performance somewhere between a",
    "start": "307840",
    "end": "312880"
  },
  {
    "text": "customized asic and the microprocessor at the cost of of the flexible",
    "start": "312880",
    "end": "320400"
  },
  {
    "text": "interconnect so when i talk about computing with fpgas the thing that i have in mind in",
    "start": "320400",
    "end": "326960"
  },
  {
    "start": "324000",
    "end": "403000"
  },
  {
    "text": "general is a system where there is a microprocessor that runs most of the code",
    "start": "326960",
    "end": "332479"
  },
  {
    "text": "and there is an fpga that has some kind of optimization to",
    "start": "332479",
    "end": "339840"
  },
  {
    "text": "execute the part of the code that is running most frequently and that is tied in somehow",
    "start": "340320",
    "end": "347520"
  },
  {
    "text": "into the memory system and i'm not going to get into how you can put these things together there are many",
    "start": "347520",
    "end": "352800"
  },
  {
    "text": "different ways of combining processors fpgas and memory and lots of people looking into these issues",
    "start": "352800",
    "end": "358400"
  },
  {
    "text": "but uh yeah that's not what i'm interested in here so there are two basic parts of this talk uh first",
    "start": "358400",
    "end": "364479"
  },
  {
    "text": "i'm i'll show a couple of performance results and talk a little bit about how people",
    "start": "364479",
    "end": "369600"
  },
  {
    "text": "achieve these types of performance and why there is a benefit",
    "start": "369600",
    "end": "375680"
  },
  {
    "text": "of implementing these algorithms on an fpga and the second part is talking about how we can get",
    "start": "375680",
    "end": "381680"
  },
  {
    "text": "what we've learned from implementing applications to design a programming methodology so that anybody could just",
    "start": "381680",
    "end": "387600"
  },
  {
    "text": "sit down write a little program and target fpgas and get the same kind of performance",
    "start": "387600",
    "end": "393440"
  },
  {
    "text": "that we get when we sit down the hardware designer and let him work for a year and figure out the details of",
    "start": "393440",
    "end": "399280"
  },
  {
    "text": "of a particular application",
    "start": "399280",
    "end": "402560"
  },
  {
    "start": "403000",
    "end": "666000"
  },
  {
    "text": "so here are some of the examples that i had in mind when i said before that we have up to 100 times",
    "start": "404400",
    "end": "411919"
  },
  {
    "text": "the performance and people started in the beginning doing the obvious thing taking signal",
    "start": "411919",
    "end": "418000"
  },
  {
    "text": "processing algorithms putting them on an fpga and showing that for many signal",
    "start": "418000",
    "end": "423919"
  },
  {
    "text": "processing algorithms you can actually perform quite well compared to microprocessors the reason why they're",
    "start": "423919",
    "end": "429919"
  },
  {
    "text": "not currently switching everything from microprocessors and to fpgas is simply there is a cost",
    "start": "429919",
    "end": "437440"
  },
  {
    "text": "problem and you can't really um get the same",
    "start": "437440",
    "end": "442479"
  },
  {
    "text": "cost benefits that you have for a microprocessor but from the technology itself there are much more signal processing applications that",
    "start": "442479",
    "end": "449599"
  },
  {
    "text": "could run on fpga then they're currently being run on fpgas same goes for most",
    "start": "449599",
    "end": "455680"
  },
  {
    "text": "applications where you have a lot of data that you need to process and simply",
    "start": "455680",
    "end": "461280"
  },
  {
    "text": "stream it through an architecture so if you have this model you have a lot of data there is a little algorithm that",
    "start": "461280",
    "end": "467280"
  },
  {
    "text": "has to modify this data it's relatively straightforward to simply stream this data through the fpga",
    "start": "467280",
    "end": "474560"
  },
  {
    "text": "and get very high throughput this way you also get around the latency problem that",
    "start": "474560",
    "end": "479599"
  },
  {
    "text": "that i talked about before where uh you actually run it five times slower clock frequencies",
    "start": "479599",
    "end": "485360"
  },
  {
    "text": "so if you have basically pipelining you can get around that problem for uh many applications",
    "start": "485360",
    "end": "492400"
  },
  {
    "text": "other applications people have tried in earlier fpga computing projects is to look at",
    "start": "492400",
    "end": "500560"
  },
  {
    "text": "encryption scientific computing various applications there one",
    "start": "500560",
    "end": "506240"
  },
  {
    "text": "interesting one is an rsa speed record basically the fastest implementation",
    "start": "506240",
    "end": "511440"
  },
  {
    "text": "of rsa encryption was done by mark chand in 94 and was being run on fpgas",
    "start": "511440",
    "end": "519200"
  },
  {
    "text": "so using the flexibility that you have on fpgas actually for that particular point in time created the fastest",
    "start": "519200",
    "end": "525200"
  },
  {
    "text": "implementation so this just shows that there is a way to get around",
    "start": "525200",
    "end": "530720"
  },
  {
    "text": "the five times longer latency that you have on an fpga and um the question really arises",
    "start": "530720",
    "end": "539839"
  },
  {
    "text": "how you can generalize this thing to all problems so you don't have to hire mark chand to",
    "start": "539839",
    "end": "546000"
  },
  {
    "text": "to do all your designs or somebody who is equivalently clever with with his designs",
    "start": "546000",
    "end": "551839"
  },
  {
    "text": "uh another and he is closer yeah so another interesting project was",
    "start": "551839",
    "end": "559120"
  },
  {
    "text": "looking at graphics and uh we had a student at imperial college who implemented um",
    "start": "559120",
    "end": "566880"
  },
  {
    "text": "opengl or basically the open equivalent which is a mesa library and was running uh quake basically",
    "start": "566880",
    "end": "573839"
  },
  {
    "text": "accelerated with fpgas and again it took a significant design effort",
    "start": "573839",
    "end": "580720"
  },
  {
    "text": "but that's that's again one one way of using fpga is simply taking a library implementing the library functions then",
    "start": "580720",
    "end": "587279"
  },
  {
    "text": "having a general programming interface that uses this library that doesn't know about fpgas and just",
    "start": "587279",
    "end": "593120"
  },
  {
    "text": "just utilizes the the acceleration that you get from implementing this library",
    "start": "593120",
    "end": "600800"
  },
  {
    "text": "two others uh interesting applications that we were looking at we're trying to look at",
    "start": "601040",
    "end": "609760"
  },
  {
    "text": "basically two problems one is where you have applications that are memory bound",
    "start": "609760",
    "end": "615600"
  },
  {
    "text": "they're limited by the access to memory or the bandwidth to memory and the question is can we do something",
    "start": "615600",
    "end": "620800"
  },
  {
    "text": "about these type of applications and two interesting examples here one is to",
    "start": "620800",
    "end": "626399"
  },
  {
    "text": "solve boolean satisfiability can actually implement the balloon satisfiability problem on fpgas and get",
    "start": "626399",
    "end": "632640"
  },
  {
    "text": "very large speed ups there some more details on the following slides and another way of looking",
    "start": "632640",
    "end": "639760"
  },
  {
    "text": "at the memory latency problem where you have to let's say follow particular pointer is a new way to",
    "start": "639760",
    "end": "646079"
  },
  {
    "text": "implement data structures and algorithms together as a hardware structure on an fpga",
    "start": "646079",
    "end": "652240"
  },
  {
    "text": "and this way you don't actually need to go through pointers and go follow each pointer have the data in",
    "start": "652240",
    "end": "658800"
  },
  {
    "text": "your memory in this track in the type of structures that you have in the microprocessor so there are some examples following",
    "start": "658800",
    "end": "665519"
  },
  {
    "text": "here there's some more detail on the satisfiability that i was talking about um basically satisfiability you take a",
    "start": "665519",
    "end": "671760"
  },
  {
    "start": "666000",
    "end": "752000"
  },
  {
    "text": "boolean equation and you're trying to find an assignment to the input variables",
    "start": "671760",
    "end": "677920"
  },
  {
    "text": "that will make this equation true so what you can do is a brute force search",
    "start": "677920",
    "end": "684959"
  },
  {
    "text": "where all you need to do is evaluate the actual equation that you have",
    "start": "684959",
    "end": "691519"
  },
  {
    "text": "many times over until you find a possible solution and using an fpga you can take the",
    "start": "691519",
    "end": "697760"
  },
  {
    "text": "equation that you want to satisfy put it down into the fpga and simply evaluate it very quickly because now",
    "start": "697760",
    "end": "704320"
  },
  {
    "text": "it's just a circuit in your fpgas you have an instant specific way to configure these fpgas at runtime",
    "start": "704320",
    "end": "711519"
  },
  {
    "text": "whenever you get the data from the user you simply create the circuit put it in",
    "start": "711519",
    "end": "717360"
  },
  {
    "text": "the fpga and evaluate it as part of your execution and uh",
    "start": "717360",
    "end": "722399"
  },
  {
    "text": "the main drawback here that we've encountered is that you can do the brute force search",
    "start": "722399",
    "end": "728720"
  },
  {
    "text": "but still you have decades of research that people have done in order to solve",
    "start": "728720",
    "end": "734399"
  },
  {
    "text": "particular boolean satisfaction problems and these type of optimizations that have come up with",
    "start": "734399",
    "end": "739920"
  },
  {
    "text": "would have to be adapted to this new way of solving the problem so it's very hard to compete with these",
    "start": "739920",
    "end": "747360"
  },
  {
    "text": "optimized algorithms that you have there nevertheless for a couple of benchmarks",
    "start": "747360",
    "end": "754320"
  },
  {
    "start": "752000",
    "end": "853000"
  },
  {
    "text": "that we've looked at we've managed to outperform microprocessors",
    "start": "754320",
    "end": "759680"
  },
  {
    "text": "running the current state of the art in boolean satisfiability solving uh basically a tool that is called grasp",
    "start": "759680",
    "end": "768240"
  },
  {
    "text": "that solves boolean satisfiability and you can see um the five benchmarks that i show here",
    "start": "768240",
    "end": "774480"
  },
  {
    "text": "the first one hole six you have the left bar that says software and the right one that has the",
    "start": "774480",
    "end": "780720"
  },
  {
    "text": "hardware software is the time it takes for grasp to solve the problem and hardware is basically the time it",
    "start": "780720",
    "end": "787279"
  },
  {
    "text": "takes to solve the problem on an fpga the light blue or light gray depending on your monitor",
    "start": "787279",
    "end": "793200"
  },
  {
    "text": "uh kind of color on the right for hardware is the time it takes to generate the circuit and the black",
    "start": "793200",
    "end": "799519"
  },
  {
    "text": "part is the time it takes to actually run the circuit so you can see on the first three",
    "start": "799519",
    "end": "805440"
  },
  {
    "text": "benchmarks there is no time to run the circuit because compared to the time it takes to",
    "start": "805440",
    "end": "810720"
  },
  {
    "text": "generate the fpga circuit it is really negligible once we start to see some speed up you",
    "start": "810720",
    "end": "816639"
  },
  {
    "text": "have a little black graph black uh piece of this on top there",
    "start": "816639",
    "end": "821920"
  },
  {
    "text": "and so basically for the last two benchmarks whole nine and hole",
    "start": "821920",
    "end": "827279"
  },
  {
    "text": "10 you start getting speed ups where for hole 10 which is the largest one that we put on the fpga",
    "start": "827279",
    "end": "833199"
  },
  {
    "text": "we got the speed up of 100 times so the main problem is all these all",
    "start": "833199",
    "end": "839199"
  },
  {
    "text": "these benchmarks that we've used here are really toy problems and uh the goal of of this research is",
    "start": "839199",
    "end": "846480"
  },
  {
    "text": "to try to expand this now to real problems and use it in real software but this is just to show that",
    "start": "846480",
    "end": "851519"
  },
  {
    "text": "there is a huge potential for these kind of things i was talking about data structures and",
    "start": "851519",
    "end": "857839"
  },
  {
    "start": "853000",
    "end": "947000"
  },
  {
    "text": "implementing data structures and algorithms on an fpga so we want to avoid the memory ball and",
    "start": "857839",
    "end": "864639"
  },
  {
    "text": "the bottleneck that we have in the memory and one way to do that is to implement the data structure and the algorithm",
    "start": "864639",
    "end": "870560"
  },
  {
    "text": "that we want to run over this data structure in the fpga and one standard architecture that",
    "start": "870560",
    "end": "877440"
  },
  {
    "text": "probably most of you are familiar with is a content addressable memory and what that really is",
    "start": "877440",
    "end": "882560"
  },
  {
    "text": "is a data structure with a search algorithm and you can search the data that is in there relatively",
    "start": "882560",
    "end": "889040"
  },
  {
    "text": "quickly you can add values and delete values relatively quickly",
    "start": "889040",
    "end": "895120"
  },
  {
    "text": "and you don't have to think of the actual data structure and traversing the data structure in order to do this",
    "start": "895120",
    "end": "901279"
  },
  {
    "text": "computation so you can take this type of architecture",
    "start": "901279",
    "end": "906560"
  },
  {
    "text": "and put it on an fpga and whenever somebody needs let's say a data structure where you",
    "start": "906560",
    "end": "913360"
  },
  {
    "text": "need to search something you simply implement it as a call to to that particular",
    "start": "913360",
    "end": "918800"
  },
  {
    "text": "data structure and there is a similar or basically a way to encapsulate data",
    "start": "918800",
    "end": "924720"
  },
  {
    "text": "structures in their algorithms which was worked on in c plus plus called the standard template library",
    "start": "924720",
    "end": "930639"
  },
  {
    "text": "where you simply say what kind of data structure you want and the library provides you with the right",
    "start": "930639",
    "end": "936000"
  },
  {
    "text": "features that that you want for that and you could imagine implementing part of these",
    "start": "936000",
    "end": "941120"
  },
  {
    "text": "as specific hardware structures that deal with these data",
    "start": "941120",
    "end": "946079"
  },
  {
    "text": "another newer architecture that shows a different data structure",
    "start": "946959",
    "end": "953040"
  },
  {
    "start": "947000",
    "end": "1091000"
  },
  {
    "text": "and a different algorithm is let's say we want to have a graph and we want to solve the reachability",
    "start": "953040",
    "end": "958079"
  },
  {
    "text": "problem on that graph usually you need to implement the graph as pointers and you follow the pointers and you figure out if you can go through",
    "start": "958079",
    "end": "965279"
  },
  {
    "text": "this entire graph to go from node one to the second node and here is an",
    "start": "965279",
    "end": "970880"
  },
  {
    "text": "array-like structure that takes the adjacency matrix that i have on the left",
    "start": "970880",
    "end": "976880"
  },
  {
    "text": "and you can see for each one in the adjacency matrix there is a corresponding or gate in the",
    "start": "976880",
    "end": "983360"
  },
  {
    "text": "architecture on the other side so it's a very straightforward mapping now adding or deleting nodes or",
    "start": "983360",
    "end": "992079"
  },
  {
    "text": "connections between nodes is a simple modification of the structure on the on the right",
    "start": "992160",
    "end": "998639"
  },
  {
    "text": "and solving the reachability problem is a trivial uh problem now because all you need to",
    "start": "998639",
    "end": "1004000"
  },
  {
    "text": "do is to set the inputs of the particular wires basically set the wires of the",
    "start": "1004000",
    "end": "1011839"
  },
  {
    "text": "nodes that you want to check and see if the destination nodes can be reached so",
    "start": "1011839",
    "end": "1018959"
  },
  {
    "text": "let's say for example you want to go from node v0 to node v3 you can start at the upper line",
    "start": "1018959",
    "end": "1026319"
  },
  {
    "text": "on top here so you have here we started the top line",
    "start": "1026319",
    "end": "1033760"
  },
  {
    "text": "on this graph and you can follow the or gates to see if there is a path to go through all the",
    "start": "1033760",
    "end": "1040480"
  },
  {
    "text": "way to v3 and if you take a close look you can see that there is a path going through a couple of or gates",
    "start": "1040480",
    "end": "1046319"
  },
  {
    "text": "and telling you that v3 is reachable from v0 and the delay for this operation is",
    "start": "1046319",
    "end": "1052799"
  },
  {
    "text": "really just a couple of gates through through the array the",
    "start": "1052799",
    "end": "1058400"
  },
  {
    "text": "speed up that was obtained here is in the range of 10 to 1000 times",
    "start": "1058400",
    "end": "1064640"
  },
  {
    "text": "and main bottleneck here is really the size of circuit that you can put in an fpga",
    "start": "1064640",
    "end": "1070640"
  },
  {
    "text": "and size of data structure that you can therefore put in there so after you exceed the size of the fpga",
    "start": "1070640",
    "end": "1079679"
  },
  {
    "text": "the problem requires some tiling and partitioning of the initial problem and that then reduces a little bit the",
    "start": "1079679",
    "end": "1085360"
  },
  {
    "text": "potential benefit that you have another example here is encryption",
    "start": "1085360",
    "end": "1092240"
  },
  {
    "start": "1091000",
    "end": "1141000"
  },
  {
    "text": "a couple years ago i was interested in seeing if there is a benefit of implementing an algorithm on",
    "start": "1092240",
    "end": "1098160"
  },
  {
    "text": "an fpga compared to microprocessor in terms of power so i ran this little example implemented",
    "start": "1098160",
    "end": "1105520"
  },
  {
    "text": "the encryption um tried to run it on as low clock frequency as",
    "start": "1105520",
    "end": "1112320"
  },
  {
    "text": "possible and compared it to the most optimistic performance that i could imagine the microprocessor could ever get",
    "start": "1112320",
    "end": "1119039"
  },
  {
    "text": "i was looking at two architectures here the texas instruments and the digital strong arm and physically",
    "start": "1119039",
    "end": "1125679"
  },
  {
    "text": "figured out that we could get five to ten times better performance over power or",
    "start": "1125679",
    "end": "1133220"
  },
  {
    "text": "[Music] poor delay product anyway you want to look at that now the question arises here how do we",
    "start": "1133220",
    "end": "1140640"
  },
  {
    "text": "achieve this type of uh power advantage where does it come from um",
    "start": "1140640",
    "end": "1146400"
  },
  {
    "start": "1141000",
    "end": "1202000"
  },
  {
    "text": "if you look at the architecture that i used uh simply taking the data flow graph",
    "start": "1146400",
    "end": "1151520"
  },
  {
    "text": "and putting the data flow graph into the fpga as is fully pipelining it so that i can",
    "start": "1151520",
    "end": "1157760"
  },
  {
    "text": "achieve a clock frequency of the data rate basically i'm clocking this circuit",
    "start": "1157760",
    "end": "1163600"
  },
  {
    "text": "once for every wave of data that is coming in which is also the minimum clock frequency that you can use",
    "start": "1163600",
    "end": "1169679"
  },
  {
    "text": "in order to evaluate this particular circuit and use very small arithmetic units",
    "start": "1169679",
    "end": "1176080"
  },
  {
    "text": "that reduce the size of the circuit and basically create a pipeline that is",
    "start": "1176080",
    "end": "1182960"
  },
  {
    "text": "maybe 200 clock cycles deep so for one data item to go through this pipeline it takes about maybe 200 clock cycles",
    "start": "1182960",
    "end": "1190000"
  },
  {
    "text": "but then every following clocks actually get a data item out so you get very high throughputs and therefore very high performance if",
    "start": "1190000",
    "end": "1196320"
  },
  {
    "text": "you look at the time it takes to encrypt let's say one megabyte of data",
    "start": "1196320",
    "end": "1202240"
  },
  {
    "start": "1202000",
    "end": "1251000"
  },
  {
    "text": "looking at uh at the numbers here we have uh power delay is a function of",
    "start": "1202960",
    "end": "1209280"
  },
  {
    "text": "capacitance frequency voltage and delay uh very straightforward",
    "start": "1209280",
    "end": "1214720"
  },
  {
    "text": "we reduce the clock frequency to a minimum we reduce the delay by having the",
    "start": "1214720",
    "end": "1221200"
  },
  {
    "text": "architecture that pipelines the whole thing and creates very high data rates",
    "start": "1221200",
    "end": "1226720"
  },
  {
    "text": "and we increase the capacitance because we're using now an fpga instead of a very small microprocessor",
    "start": "1226720",
    "end": "1233919"
  },
  {
    "text": "and for this particular application we saw that there is actually uh up to an order of magnitude gain in",
    "start": "1233919",
    "end": "1239840"
  },
  {
    "text": "doing that and the question is really to how many applications this can be extended",
    "start": "1239840",
    "end": "1245200"
  },
  {
    "text": "and done but this is just to show that there is a huge potential here to actually reduce the power so if you",
    "start": "1245200",
    "end": "1252159"
  },
  {
    "start": "1251000",
    "end": "1338000"
  },
  {
    "text": "look at the global picture here putting everything together we have applications where the",
    "start": "1252159",
    "end": "1260559"
  },
  {
    "text": "kernel loop or the loop that is being executed most of the time is bound by cpu performance and we have",
    "start": "1260559",
    "end": "1267600"
  },
  {
    "text": "such loops that are bound by memory performance or either memory bandwidth or memory",
    "start": "1267600",
    "end": "1272960"
  },
  {
    "text": "latency so we can split both cases into bandwidth problems and latency problems and i've shown you a couple of",
    "start": "1272960",
    "end": "1279360"
  },
  {
    "text": "approaches for each one of these cases on how you can obtain competitive or",
    "start": "1279360",
    "end": "1285280"
  },
  {
    "text": "better performance on fpgas if you compare it to microprocessors",
    "start": "1285280",
    "end": "1292400"
  },
  {
    "text": "so now we get to the second part of the thought we've seen that we have the potential to create",
    "start": "1295600",
    "end": "1301760"
  },
  {
    "text": "high performance low power implementations of applications now",
    "start": "1301760",
    "end": "1308159"
  },
  {
    "text": "how do we program these unless it becomes significantly easier to access this performance it is really",
    "start": "1308159",
    "end": "1315840"
  },
  {
    "text": "not very useful because it takes significant effort to implement each one of these that i've shown before",
    "start": "1315840",
    "end": "1322159"
  },
  {
    "text": "and i'll show a couple of examples on how to simplify the programming",
    "start": "1322159",
    "end": "1328799"
  },
  {
    "text": "other issues are also maintenance and portability of such codes but that's not something",
    "start": "1328799",
    "end": "1334720"
  },
  {
    "text": "that i'm going to get into here in this talk so before i get started",
    "start": "1334720",
    "end": "1339840"
  },
  {
    "start": "1338000",
    "end": "1385000"
  },
  {
    "text": "with the programming just to show the magnitude of the problem we have here",
    "start": "1339840",
    "end": "1345039"
  },
  {
    "text": "vlsi synthesis and what analysts think that",
    "start": "1345039",
    "end": "1350640"
  },
  {
    "text": "that is going on there if we look at that we see that uh productivity of the average engineer",
    "start": "1350640",
    "end": "1359039"
  },
  {
    "text": "in designing circuits for vlsi grows at 21 a year while",
    "start": "1359039",
    "end": "1366000"
  },
  {
    "text": "the complexity of the actual design grows at 58 and that problem is uh significant in",
    "start": "1366000",
    "end": "1373840"
  },
  {
    "text": "vlsi design and there is a similar problem going on when you want to program fpgas because",
    "start": "1373840",
    "end": "1380400"
  },
  {
    "text": "at the end of the day really what you're doing is designing circuits what the second slide here shows is that",
    "start": "1380400",
    "end": "1388159"
  },
  {
    "start": "1385000",
    "end": "1590000"
  },
  {
    "text": "actually the problem is not as similar as it looks first",
    "start": "1388159",
    "end": "1394240"
  },
  {
    "text": "while circuits for vlsi are hard circuits basically circuits",
    "start": "1394960",
    "end": "1401120"
  },
  {
    "text": "that you design once and you have to make sure that they work forever they have to work for all cases they",
    "start": "1401120",
    "end": "1406240"
  },
  {
    "text": "have to work for variable temperatures and whatever",
    "start": "1406240",
    "end": "1412400"
  },
  {
    "text": "people want to use them at the fpga circuit is a software issue",
    "start": "1412400",
    "end": "1417840"
  },
  {
    "text": "and you can really ship a product over the internet and then ship a bug fix or ship a patch",
    "start": "1417840",
    "end": "1425600"
  },
  {
    "text": "just as you do for software and if you find another bug you simply fix it by shipping another circuit so",
    "start": "1425600",
    "end": "1432720"
  },
  {
    "text": "you don't need to go through as rigorous verification and testing as",
    "start": "1432720",
    "end": "1437760"
  },
  {
    "text": "you do in the blsi side programming fpgas",
    "start": "1437760",
    "end": "1443520"
  },
  {
    "text": "is more similar to actually programming microprocessors when you write some code you push a button you can download it",
    "start": "1443520",
    "end": "1449279"
  },
  {
    "text": "within 100 milliseconds and you just go through the loop of programming trial and error to",
    "start": "1449279",
    "end": "1455039"
  },
  {
    "text": "figure out what it is that you want to write you can have various libraries",
    "start": "1455039",
    "end": "1462080"
  },
  {
    "text": "that people can write and share which is very hard in the vlsi world because",
    "start": "1462080",
    "end": "1467279"
  },
  {
    "text": "there is so much more effort going into designing all these modules so if there is a lot of effort it's also",
    "start": "1467279",
    "end": "1473200"
  },
  {
    "text": "very hard to get it for free while if it's very simple to build modules or a little programs",
    "start": "1473200",
    "end": "1479120"
  },
  {
    "text": "so they're much easier to share them and and basically have many more of them out there another",
    "start": "1479120",
    "end": "1485039"
  },
  {
    "text": "issue is uh retiming if you want to for example have a circuit",
    "start": "1485039",
    "end": "1490400"
  },
  {
    "text": "and you want to change number of registers in this circuit for the lsi you really have all the",
    "start": "1490400",
    "end": "1496559"
  },
  {
    "text": "options out there you can put the registers wherever you want versus in fpga you really have this fixed architecture",
    "start": "1496559",
    "end": "1502640"
  },
  {
    "text": "where the locations of the registers are fixed and you have these registers there if",
    "start": "1502640",
    "end": "1508320"
  },
  {
    "text": "you want or not so you could as well use them in just the place where they are so the problem is slightly transformed",
    "start": "1508320",
    "end": "1515120"
  },
  {
    "text": "just to show that that there are significantly uh different problems out there when",
    "start": "1515120",
    "end": "1520559"
  },
  {
    "text": "dealing with programming fpgas as opposed to blsi now lastly i have here three points on",
    "start": "1520559",
    "end": "1528000"
  },
  {
    "text": "what the implications could be on changing the circuit every 100 milliseconds",
    "start": "1528000",
    "end": "1533360"
  },
  {
    "text": "and one that i already mentioned is that there is no verification or there is no need for verification",
    "start": "1533360",
    "end": "1539840"
  },
  {
    "text": "because you can simply try it out if it doesn't work you'll fix it at some point nobody has ever",
    "start": "1539840",
    "end": "1545360"
  },
  {
    "text": "verified unix i think and nobody has ever tried to verify c libraries",
    "start": "1545360",
    "end": "1550960"
  },
  {
    "text": "but you simply assume that they're working until you find the bug you send in a bug report don't fix it i'll",
    "start": "1550960",
    "end": "1556480"
  },
  {
    "text": "ship you a working version and you're done with it so that's a little bit of",
    "start": "1556480",
    "end": "1562960"
  },
  {
    "text": "a different environment that you really have for designing these circuits now when you",
    "start": "1562960",
    "end": "1568240"
  },
  {
    "text": "program fpgas what you have to do basically you have the flexibility",
    "start": "1568240",
    "end": "1574159"
  },
  {
    "text": "on the algorithm level the architectural level and their pit level and dealing with this flexibility on all",
    "start": "1574159",
    "end": "1581120"
  },
  {
    "text": "three levels is what we would try to do inside the programming environment that we have",
    "start": "1581120",
    "end": "1588480"
  },
  {
    "start": "1590000",
    "end": "1888000"
  },
  {
    "text": "so now the task of the programmer when you look at it uh what all the things are that you have to",
    "start": "1590960",
    "end": "1596720"
  },
  {
    "text": "do when implementing or programming such an fpga you have to pick an algorithm like like",
    "start": "1596720",
    "end": "1602400"
  },
  {
    "text": "when you work on a microprocessor but then you also have to pick an architecture",
    "start": "1602400",
    "end": "1608159"
  },
  {
    "text": "or a structure that is going to evaluate this particular algorithm and you can also pick the arithmetic or",
    "start": "1608159",
    "end": "1615039"
  },
  {
    "text": "the number presentation that you're using where microprocessor has integers and floating point numbers",
    "start": "1615039",
    "end": "1622159"
  },
  {
    "text": "because this this was a minimal set of number of presentations that people agreed on that they need we",
    "start": "1622159",
    "end": "1628880"
  },
  {
    "text": "are not restricted to these in fpga we could have any type of number presentation you can have",
    "start": "1628880",
    "end": "1634480"
  },
  {
    "text": "any number of bits for any variable which is at first uh a little bit",
    "start": "1634480",
    "end": "1640880"
  },
  {
    "text": "um difficult to grasp because you're used to having 16 bit integers",
    "start": "1640880",
    "end": "1647679"
  },
  {
    "text": "and they got used to thinking well we'll just pick whatever bit we need and",
    "start": "1647679",
    "end": "1652720"
  },
  {
    "text": "then we just have to go with it because that's what my data path in in my microprocessor is there is no need to do that you can",
    "start": "1652720",
    "end": "1660240"
  },
  {
    "text": "actually specify any bit with and and just have a compiler figure out how to build your architecture with the",
    "start": "1660240",
    "end": "1667200"
  },
  {
    "text": "different bits that you have in your data representation",
    "start": "1667200",
    "end": "1672480"
  },
  {
    "text": "so now we look at what i'm trying to do here",
    "start": "1674799",
    "end": "1679919"
  },
  {
    "text": "we look at what c does to a microprocessor you have assembly instructions or op codes and",
    "start": "1679919",
    "end": "1685679"
  },
  {
    "text": "here comes c and says i'm providing a higher level interface a language that has the same types that my architecture",
    "start": "1685679",
    "end": "1692960"
  },
  {
    "text": "supports um easy mapping from the language",
    "start": "1692960",
    "end": "1698720"
  },
  {
    "text": "down to assembly but i'm not going to keep for example the number of registers in my language",
    "start": "1698720",
    "end": "1704799"
  },
  {
    "text": "i'm not going to keep the actual limitations of my architecture that i have i'm going to let the compiler do",
    "start": "1704799",
    "end": "1710559"
  },
  {
    "text": "register allocation and scheduling which is something that i can easily do in a compiler and that",
    "start": "1710559",
    "end": "1716399"
  },
  {
    "text": "is tedious to do for the programmer but i'm going to let the programmer decide if a variable is going to be an",
    "start": "1716399",
    "end": "1722559"
  },
  {
    "text": "integer or a floating point number because that's something that the programmer can easily figure out it's not a too hard decision and it's",
    "start": "1722559",
    "end": "1729120"
  },
  {
    "text": "very hard for a compiler to actually make the optimal decision in terms of which data type should be used",
    "start": "1729120",
    "end": "1734640"
  },
  {
    "text": "for a particular operation doing the same thing for fpgas",
    "start": "1734640",
    "end": "1739919"
  },
  {
    "text": "now we don't have an instruction set instead of an instruction set we have module generators so basically",
    "start": "1739919",
    "end": "1747039"
  },
  {
    "text": "we have a huge number of instructions any module that we possibly could get",
    "start": "1747039",
    "end": "1752640"
  },
  {
    "text": "our hands on we gathered into our little database that's our instruction set and we're",
    "start": "1752640",
    "end": "1758480"
  },
  {
    "text": "trying to map an application down to this particular instruction set that is limited by the amount of modules that i have in",
    "start": "1758480",
    "end": "1764960"
  },
  {
    "text": "my module generation environment now in order to map that down to the",
    "start": "1764960",
    "end": "1772399"
  },
  {
    "text": "modules i want to use the same idea basically having types and operators on these types so you",
    "start": "1772399",
    "end": "1779279"
  },
  {
    "text": "could imagine number of presentations being the types that are supported where the width is part of the number of",
    "start": "1779279",
    "end": "1784720"
  },
  {
    "text": "presentation and the operations on these number of presentations can be mapped",
    "start": "1784720",
    "end": "1790480"
  },
  {
    "text": "automatically by a compiler to the modules that you have in your model generation environment",
    "start": "1790480",
    "end": "1796480"
  },
  {
    "text": "now i'm working at uh at this one particular compiler that is going down to fpgas and",
    "start": "1797440",
    "end": "1804240"
  },
  {
    "text": "the general concept here is that we're splitting up the design space of architectures",
    "start": "1804240",
    "end": "1810399"
  },
  {
    "text": "into application domains where each application domain basically corresponds to particular way of doing computation",
    "start": "1810399",
    "end": "1817600"
  },
  {
    "text": "particularly architecture when i say architecture i mean something like a microprocessor which is a specific architecture to",
    "start": "1817600",
    "end": "1823760"
  },
  {
    "text": "implement a particular function or the stream architecture that i just showed before",
    "start": "1823760",
    "end": "1829440"
  },
  {
    "text": "which is a slightly different way of computing so once we know that we are targeting a",
    "start": "1829440",
    "end": "1834480"
  },
  {
    "text": "stream architecture we can write a compiler that targets this particular",
    "start": "1834480",
    "end": "1839520"
  },
  {
    "text": "architecture which is a stream architecture and knows how to do the equivalent of register location or",
    "start": "1839520",
    "end": "1845120"
  },
  {
    "text": "scheduling for this particular architecture so you have an infrastructure below that",
    "start": "1845120",
    "end": "1850640"
  },
  {
    "text": "is basically the module generation environment and you can target that multi-generation environment with",
    "start": "1850640",
    "end": "1856559"
  },
  {
    "text": "a set of different compilers that are each specialized to particular architecture they know this one architecture and they know how",
    "start": "1856559",
    "end": "1862880"
  },
  {
    "text": "to map to that architecture but they have less concept of which architecture you",
    "start": "1862880",
    "end": "1870480"
  },
  {
    "text": "should be choosing so choosing a particular type of architecture is left to the programmer",
    "start": "1870480",
    "end": "1876159"
  },
  {
    "text": "and mapping the algorithm down to that particular architecture is being shared between the programmer",
    "start": "1876159",
    "end": "1881679"
  },
  {
    "text": "and the compiler looking at the levels of abstraction if",
    "start": "1881679",
    "end": "1887279"
  },
  {
    "text": "we compare microprocessors fpgas and a6 here we are in blsi synthesis we have software that maps all",
    "start": "1887279",
    "end": "1894000"
  },
  {
    "start": "1888000",
    "end": "2116000"
  },
  {
    "text": "the way down from an algorithm down to the gate level has uh ultimate flexibility and",
    "start": "1894000",
    "end": "1900159"
  },
  {
    "text": "there are uh levels of abstraction that the people have figured out that they want to go for and",
    "start": "1900159",
    "end": "1906960"
  },
  {
    "text": "have different tools to do that for fpgas what i'm suggesting here is to have the module generation",
    "start": "1906960",
    "end": "1912960"
  },
  {
    "text": "and the domain specific compilers on top of that that map down to this particular module",
    "start": "1912960",
    "end": "1919440"
  },
  {
    "text": "generation environment",
    "start": "1919440",
    "end": "1922398"
  },
  {
    "text": "here is the little bit more detail uh on the c plus plus class structure that uh that",
    "start": "1924480",
    "end": "1930399"
  },
  {
    "text": "the compiler is using just to show the mapping between uh the ideas before",
    "start": "1930399",
    "end": "1936000"
  },
  {
    "text": "and c plus plus is a language to implement these kind of ideas and there is really a very nice match between",
    "start": "1936000",
    "end": "1941679"
  },
  {
    "text": "the classes provided in c plus plus and the idea of modules and mapping down to",
    "start": "1941679",
    "end": "1947600"
  },
  {
    "text": "these modules we can encapsulate hardware objects inside c plus class",
    "start": "1947600",
    "end": "1955440"
  },
  {
    "text": "and map down to that same way you can encapsulate an architecture as a c plus class and map the actual modules",
    "start": "1955440",
    "end": "1964240"
  },
  {
    "text": "into that class by just overloading the operators of the different",
    "start": "1964240",
    "end": "1970240"
  },
  {
    "text": "representations that we have so i have a couple examples here",
    "start": "1970240",
    "end": "1975360"
  },
  {
    "text": "before we go into the examples um the main question that arises is you have the architecture and",
    "start": "1975519",
    "end": "1981600"
  },
  {
    "text": "you have a program how do you define which pieces of the program",
    "start": "1981600",
    "end": "1987120"
  },
  {
    "text": "map onto which pieces of your architecture how do you map your algorithm down to that particular",
    "start": "1987120",
    "end": "1992960"
  },
  {
    "text": "architecture once you know what the architecture is and the way this is done at the current moment is uh",
    "start": "1992960",
    "end": "1999039"
  },
  {
    "text": "for the stream architecture you have different types of variables or different kinds of variables you can",
    "start": "1999039",
    "end": "2005279"
  },
  {
    "text": "see in this structure there is there are four streams coming in in zero to in three",
    "start": "2005279",
    "end": "2010640"
  },
  {
    "text": "and you have uh four streams coming out out zero to all three and you have other variables that are",
    "start": "2010640",
    "end": "2017600"
  },
  {
    "text": "intermediate variables that just connect the nodes inside of your data flow graph that we want to put",
    "start": "2017600",
    "end": "2023120"
  },
  {
    "text": "down into the fpga and then there are these little worms that i have between the bubbles",
    "start": "2023120",
    "end": "2028559"
  },
  {
    "text": "which are denoting fifo's and these are really part of the scheduling where we want to",
    "start": "2028559",
    "end": "2034880"
  },
  {
    "text": "ensure that all data items arrive at the right time to their arithmetic unit",
    "start": "2034880",
    "end": "2040399"
  },
  {
    "text": "so you have let's say an ad that needs two operands you want the two operands to get",
    "start": "2040399",
    "end": "2045519"
  },
  {
    "text": "to the ad at the right time so here is one example and you can see",
    "start": "2045519",
    "end": "2052720"
  },
  {
    "text": "there is a hardware integer that is the type of the variable in and",
    "start": "2052720",
    "end": "2058560"
  },
  {
    "text": "i declare that to be an input or a stream into that architecture i can also tell how many bits i want",
    "start": "2058560",
    "end": "2064480"
  },
  {
    "text": "that to be and i can declare various other types like that",
    "start": "2064480",
    "end": "2070240"
  },
  {
    "text": "and just simply write a program that uses regular c plus class syntax",
    "start": "2070240",
    "end": "2077200"
  },
  {
    "text": "to describe what it is that i want to compute and i've solved the problems that are",
    "start": "2077200",
    "end": "2083118"
  },
  {
    "text": "really hard to solve for the compiler which is how to map the variables",
    "start": "2083119",
    "end": "2088720"
  },
  {
    "text": "onto the particular features of my architecture and i let the compiler do things like",
    "start": "2088720",
    "end": "2094000"
  },
  {
    "text": "scheduling and building off the data flow graph",
    "start": "2094000",
    "end": "2101040"
  },
  {
    "text": "shifting between different sizes of operations uh putting everything together the way",
    "start": "2101040",
    "end": "2106880"
  },
  {
    "text": "that that makes actual sense and get me the resulting circuit",
    "start": "2106880",
    "end": "2113200"
  },
  {
    "text": "another example here a little bit larger is that the encryption where i started uh in the beginning by",
    "start": "2113200",
    "end": "2119839"
  },
  {
    "start": "2116000",
    "end": "2230000"
  },
  {
    "text": "writing many many pages of rtl level code to create the idea encryption in the beginning",
    "start": "2119839",
    "end": "2126400"
  },
  {
    "text": "here i can just write a couple lines of code that give me the full encryption and i didn't even have",
    "start": "2126400",
    "end": "2132400"
  },
  {
    "text": "to write this because the definition of uh of the idea encryption algorithm is in c",
    "start": "2132400",
    "end": "2138079"
  },
  {
    "text": "and you just get it down from the web and all you need to do is to change the types to basically",
    "start": "2138079",
    "end": "2144240"
  },
  {
    "text": "set which variables have which functionality in your architecture and it compiles down into that",
    "start": "2144240",
    "end": "2150240"
  },
  {
    "text": "architecture just by compiling it with a new c plus plus compiler",
    "start": "2150240",
    "end": "2158800"
  },
  {
    "text": "another example here that shows a compound arithmetic unit we can basically build an arithmetic unit that",
    "start": "2158800",
    "end": "2166000"
  },
  {
    "text": "is much more powerful than the general add and subtract for example we can have a rotate",
    "start": "2166000",
    "end": "2171119"
  },
  {
    "text": "primitive that takes x and y and an angle and rotates",
    "start": "2171119",
    "end": "2176720"
  },
  {
    "text": "x and y and we can build a 3d motion circuit where i stream in three",
    "start": "2176720",
    "end": "2183599"
  },
  {
    "text": "inputs the three inputs are x y and z of the point in three dimensional space and these couple of operations here",
    "start": "2183599",
    "end": "2190240"
  },
  {
    "text": "simply move and rotate this point to another position and i get another x y and z out at the",
    "start": "2190240",
    "end": "2195680"
  },
  {
    "text": "bottom of this whole thing the rotate primitive here is simply just",
    "start": "2195680",
    "end": "2200880"
  },
  {
    "text": "a primitive that i have in my module generation environment so it's one of my instructions and i don't really have to bother uh",
    "start": "2200880",
    "end": "2207520"
  },
  {
    "text": "with how this is implemented or why this is actually rotating a point",
    "start": "2207520",
    "end": "2212640"
  },
  {
    "text": "all these tricky issues so now a question that arises",
    "start": "2212640",
    "end": "2220320"
  },
  {
    "text": "is what if there is a loop with a dependency how do i deal with the actual problem that i have a",
    "start": "2220320",
    "end": "2225760"
  },
  {
    "text": "dependency and a loop around it and there is a straightforward example here a fibonacci",
    "start": "2225760",
    "end": "2232160"
  },
  {
    "start": "2230000",
    "end": "2300000"
  },
  {
    "text": "series where you really need the previous two values in order to get the next value and the delay of your addition is really",
    "start": "2232160",
    "end": "2239599"
  },
  {
    "text": "what limits your performance and the way to do that is uh for example",
    "start": "2239599",
    "end": "2246240"
  },
  {
    "text": "to choose a number presentation where this ad can be done very quickly so you could transform x and y x",
    "start": "2246240",
    "end": "2253359"
  },
  {
    "text": "into a redundant representation and use redundant arithmetic to speed up the actual",
    "start": "2253359",
    "end": "2261599"
  },
  {
    "text": "computation and with this trick you can basically try to make up for the five",
    "start": "2261599",
    "end": "2266800"
  },
  {
    "text": "times slower adder that you have in fpga as compared to microprocessor so the microprocessor will just have the",
    "start": "2266800",
    "end": "2272960"
  },
  {
    "text": "fastest adder available and spin through it versus here i would have to use a more",
    "start": "2272960",
    "end": "2278720"
  },
  {
    "text": "redundant representation use more bits to represent my number but then have a much faster execution",
    "start": "2278720",
    "end": "2285200"
  },
  {
    "text": "so that's one way of of dealing with this and the conclusion is basically that our compilers have to now become",
    "start": "2285200",
    "end": "2291359"
  },
  {
    "text": "experts in arithmetic in order to be able to do these kind of things so what does that mean well if what are",
    "start": "2291359",
    "end": "2299280"
  },
  {
    "text": "all the possibilities all the uh tricks spells and whistles that we want to",
    "start": "2299280",
    "end": "2304720"
  },
  {
    "start": "2300000",
    "end": "2358000"
  },
  {
    "text": "pull on on this particular issue and here just a couple that that i could think of",
    "start": "2304720",
    "end": "2309839"
  },
  {
    "text": "at the top of my head which is to look at the number presentation",
    "start": "2309839",
    "end": "2314880"
  },
  {
    "text": "we can look at the precision and range that we want to have we can look at the arithmetic style of",
    "start": "2314880",
    "end": "2320000"
  },
  {
    "text": "course where we have sequential parallel pipeline combinational various kinds and we can look at larger functions like",
    "start": "2320000",
    "end": "2327200"
  },
  {
    "text": "i showed before the rotation primitive you can implement the whole thing and just",
    "start": "2327200",
    "end": "2333200"
  },
  {
    "text": "map down to a very efficient little hardware structure that implements a larger function",
    "start": "2333200",
    "end": "2339359"
  },
  {
    "text": "and also maybe less significant but also interesting for these type of",
    "start": "2339359",
    "end": "2346480"
  },
  {
    "text": "problems you can take a fresh look at rounding and overflow modes and maybe find more appropriate rounding",
    "start": "2346480",
    "end": "2353920"
  },
  {
    "text": "and overflow modes for particular applications",
    "start": "2353920",
    "end": "2358078"
  },
  {
    "start": "2358000",
    "end": "2415000"
  },
  {
    "text": "now looking at the details here we have",
    "start": "2358960",
    "end": "2364078"
  },
  {
    "text": "let's say in the previous case we had just hardware integers but we could as well have a hardware fix",
    "start": "2364160",
    "end": "2369839"
  },
  {
    "text": "variable we could have a hardware log variable or type we could have a redundant",
    "start": "2369839",
    "end": "2375520"
  },
  {
    "text": "variable type it could have residue numbers and these are all fairly standard",
    "start": "2375520",
    "end": "2381440"
  },
  {
    "text": "arithmetic methods that people use in order to design vlsi chips and",
    "start": "2381440",
    "end": "2387920"
  },
  {
    "text": "we can basically move these type of methods into the compiler the compiler can understand how to deal with these",
    "start": "2387920",
    "end": "2392960"
  },
  {
    "text": "representations and you simply let the programmer",
    "start": "2392960",
    "end": "2398000"
  },
  {
    "text": "understand what happens if he uses this uh particular number of presentation",
    "start": "2398000",
    "end": "2403760"
  },
  {
    "text": "without the need to actually understand how i add two residue numbers or how i",
    "start": "2403760",
    "end": "2409040"
  },
  {
    "text": "multiply uh two redundant numbers or things like that",
    "start": "2409040",
    "end": "2414160"
  },
  {
    "start": "2415000",
    "end": "2501000"
  },
  {
    "text": "a second point was uh precision and range optimization we want to find the optimal number of bits that we",
    "start": "2415119",
    "end": "2420880"
  },
  {
    "text": "really need in order to represent a particular data value and this is uh turned out to be quite a",
    "start": "2420880",
    "end": "2426640"
  },
  {
    "text": "challenge uh there are lots of different things that need to be considered when trying to limit the number of bits",
    "start": "2426640",
    "end": "2435440"
  },
  {
    "text": "the advantages of why we're trying to do this are basically we could convert floating",
    "start": "2435440",
    "end": "2440880"
  },
  {
    "text": "point to a fixed point code which has obvious advantages in execution speed",
    "start": "2440880",
    "end": "2446880"
  },
  {
    "text": "we reduce memory bandwidth because we are now trying to get less data from the memory we're just",
    "start": "2446880",
    "end": "2453200"
  },
  {
    "text": "getting the data that we actually need we minimize the area on the fpga",
    "start": "2453200",
    "end": "2459440"
  },
  {
    "text": "and reduce the latency for these particular applications and we can therefore also decrease the",
    "start": "2459440",
    "end": "2464720"
  },
  {
    "text": "power consumption so these are all ways to try to optimize",
    "start": "2464720",
    "end": "2471040"
  },
  {
    "text": "an inefficient implementation on the fpga and once you can optimize",
    "start": "2471040",
    "end": "2477280"
  },
  {
    "text": "more than you lose with the fpga you actually have a better",
    "start": "2477280",
    "end": "2482880"
  },
  {
    "text": "implementation than you have on the microprocessor so the direction that we are currently",
    "start": "2482880",
    "end": "2488640"
  },
  {
    "text": "looking at um is really to combine interval arithmetic and something called automatic",
    "start": "2488640",
    "end": "2493839"
  },
  {
    "text": "differentiation but that's also beyond beyond the time that i have here so i'm not going to get",
    "start": "2493839",
    "end": "2499920"
  },
  {
    "text": "too much into that arithmetic styles are straightforward you can pipeline you can parallelize you can",
    "start": "2499920",
    "end": "2505440"
  },
  {
    "start": "2501000",
    "end": "2519000"
  },
  {
    "text": "build a combinational circuit fairly straightforward stuff really where really this is the",
    "start": "2505440",
    "end": "2511359"
  },
  {
    "text": "one that you don't want to use because there is a lot of control overhead but all the others are fair game and can be",
    "start": "2511359",
    "end": "2517280"
  },
  {
    "text": "used to optimize what you're doing now i talked a little bit about compound arithmetic if you want to implement a",
    "start": "2517280",
    "end": "2523599"
  },
  {
    "start": "2519000",
    "end": "2573000"
  },
  {
    "text": "larger function one of the problems i said we can have any bit with but let's say you want to",
    "start": "2523599",
    "end": "2528720"
  },
  {
    "text": "compute sine of a number you need to be able to generate",
    "start": "2528720",
    "end": "2533760"
  },
  {
    "text": "a 17-bit sign generator and there is a significant problem how",
    "start": "2533760",
    "end": "2539680"
  },
  {
    "text": "do you create the parametrization how do you generate a sign generator for a particular bit",
    "start": "2539680",
    "end": "2546319"
  },
  {
    "text": "width and for this particular architecture that i show up here they've basically figured out how to do",
    "start": "2546319",
    "end": "2552640"
  },
  {
    "text": "that there is a nice mathematical formula that you just plug in and you",
    "start": "2552640",
    "end": "2558160"
  },
  {
    "text": "get how many number how many bits you need in your table and how many bits you need for your multiply add and you can basically",
    "start": "2558160",
    "end": "2565440"
  },
  {
    "text": "evaluate your function whatever the function is to a particular precision",
    "start": "2565440",
    "end": "2572240"
  },
  {
    "start": "2573000",
    "end": "2806000"
  },
  {
    "text": "now to slowly wrap up here i have a couple thoughts on",
    "start": "2573839",
    "end": "2580319"
  },
  {
    "text": "synthetics and semantics that they're just hand-waving arguments really but just to",
    "start": "2580319",
    "end": "2587119"
  },
  {
    "text": "show what what the ideas are here they're basically two objectives that you can",
    "start": "2587119",
    "end": "2593680"
  },
  {
    "text": "have either you want the language to be easy to use or you want the language to be",
    "start": "2593680",
    "end": "2599280"
  },
  {
    "text": "easy to learn if it's easy to use you assume that the person is already an expert in using this language and this",
    "start": "2599280",
    "end": "2605280"
  },
  {
    "text": "is really the most perfect language to express a particular problem in and",
    "start": "2605280",
    "end": "2610400"
  },
  {
    "text": "the problem is it's hard to persuade people to actually learn your language the other approach is you go for the",
    "start": "2610400",
    "end": "2616160"
  },
  {
    "text": "most common language that everybody already knows and you try to squeeze your problem that doesn't fit that language somehow",
    "start": "2616160",
    "end": "2622640"
  },
  {
    "text": "onto that and see if you can map from that language that everybody speaks down",
    "start": "2622640",
    "end": "2629280"
  },
  {
    "text": "to whatever you want to do and in my opinion which is a little bit biased",
    "start": "2629280",
    "end": "2634960"
  },
  {
    "text": "here um it seems like uh the c plus class approach that i'm going is really the easy to",
    "start": "2634960",
    "end": "2642960"
  },
  {
    "text": "learn one where most people are in no crc plus plus and we're trying to squeeze whatever want to do onto that language",
    "start": "2642960",
    "end": "2648640"
  },
  {
    "text": "where maybe a better approach would be to use other languages maybe functional languages or",
    "start": "2648640",
    "end": "2653680"
  },
  {
    "text": "languages that capture encapsulate more of the structure of what you actually want to do",
    "start": "2653680",
    "end": "2659440"
  },
  {
    "text": "the problem there seems to be or most people that advocate that uh have a big struggle in convincing the",
    "start": "2659440",
    "end": "2666079"
  },
  {
    "text": "rest of the world that this is really a good way to do things and that you really should sit down and learn this new way of",
    "start": "2666079",
    "end": "2671680"
  },
  {
    "text": "programming and structuring your problems on the semantic side uh",
    "start": "2671680",
    "end": "2678720"
  },
  {
    "text": "we really try needs to map from the semantics that you have in designing",
    "start": "2678800",
    "end": "2683839"
  },
  {
    "text": "this architecture down to particular language and uh what you currently do if you use",
    "start": "2683839",
    "end": "2689839"
  },
  {
    "text": "a hardware description language use languages that were really meant for simulation",
    "start": "2689839",
    "end": "2695680"
  },
  {
    "text": "and were kind of uh cut and squeezed and pushed into",
    "start": "2695680",
    "end": "2702720"
  },
  {
    "text": "a little box in order to be synthesizable and to get the circuit out uh versus",
    "start": "2702720",
    "end": "2709520"
  },
  {
    "text": "what we really need is uh to get back on the semantics also to look at uh",
    "start": "2709520",
    "end": "2714720"
  },
  {
    "text": "is uh of learning them or ease of use",
    "start": "2714720",
    "end": "2719838"
  },
  {
    "text": "so now going beyond that work what i've assumed is that we will take a",
    "start": "2720640",
    "end": "2726720"
  },
  {
    "text": "couple of architectures and try to map to these architectures but really have the flexibility on the architecture level",
    "start": "2726720",
    "end": "2732640"
  },
  {
    "text": "and the main open question that i see here is really given a particular problem how many",
    "start": "2732640",
    "end": "2739280"
  },
  {
    "text": "architectures are there to evaluate this how do we look at the design space we don't even have a clue",
    "start": "2739280",
    "end": "2745520"
  },
  {
    "text": "of what the number of possible architectures is that we could possibly map that to",
    "start": "2745520",
    "end": "2752240"
  },
  {
    "text": "what we have is we have point solutions we have whole fields that go towards uh solving",
    "start": "2752240",
    "end": "2757920"
  },
  {
    "text": "problems with a particular architecture let's say like neural networks there's a whole field out there lots of",
    "start": "2757920",
    "end": "2762960"
  },
  {
    "text": "people looking at how to solve things with neural networks but if you're not in that field you're",
    "start": "2762960",
    "end": "2768240"
  },
  {
    "text": "probably not going to consider using it and there's also no way to quantify",
    "start": "2768240",
    "end": "2774160"
  },
  {
    "text": "how a neural network is an architecture compares to now a systolic array or a microprocessor or",
    "start": "2774160",
    "end": "2780160"
  },
  {
    "text": "stream architecture any other way to do uh these kind of things so i see that",
    "start": "2780160",
    "end": "2785760"
  },
  {
    "text": "really as the main challenge of programming fpgas to somehow",
    "start": "2785760",
    "end": "2791599"
  },
  {
    "text": "try to understand what the possibilities are what is out there in terms of architectures what is the design space",
    "start": "2791599",
    "end": "2797440"
  },
  {
    "text": "how can we parametrize such a design space and look at how to compute on fpgas",
    "start": "2797440",
    "end": "2803280"
  },
  {
    "text": "so to summarize um i've showed that there is a potential to speed up",
    "start": "2803280",
    "end": "2810000"
  },
  {
    "start": "2806000",
    "end": "3611000"
  },
  {
    "text": "applications up to 100 times shown that there is more than one application where we can actually",
    "start": "2810000",
    "end": "2816240"
  },
  {
    "text": "achieve a speed up the main problem are the two little words up to",
    "start": "2816240",
    "end": "2822480"
  },
  {
    "text": "and the question is you can get the speed up up to 100",
    "start": "2822480",
    "end": "2827520"
  },
  {
    "text": "but how can you consistently get the speed up for a wide range of applications how can",
    "start": "2827520",
    "end": "2832960"
  },
  {
    "text": "you use these kind of things i've shown one little example of an architecture where",
    "start": "2832960",
    "end": "2838880"
  },
  {
    "text": "you have a good potential to do these kind of things shown the use of the main specific",
    "start": "2838880",
    "end": "2844240"
  },
  {
    "text": "arithmetic how you can map use the flexibility on the bit level on fpga to actually gain a benefit",
    "start": "2844240",
    "end": "2850720"
  },
  {
    "text": "or gain an advantage over a microprocessor and i've shown the example of a stream compiler",
    "start": "2850720",
    "end": "2856480"
  },
  {
    "text": "now this little circle down that at the end of this slide really shows why i'm having so much fun doing this kind",
    "start": "2856480",
    "end": "2862720"
  },
  {
    "text": "of thing and the nice thing about it is that you can work on the architecture of what you're",
    "start": "2862720",
    "end": "2868720"
  },
  {
    "text": "trying to do and on the compiler and cycle do the cycle of doing this on a",
    "start": "2868720",
    "end": "2875280"
  },
  {
    "text": "daily basis as opposed to on a yearly basis as is done for microprocessors where people",
    "start": "2875280",
    "end": "2880880"
  },
  {
    "text": "worked on the architecture and then the compiler guys take over and they figure out how they compile to some other features and then they're",
    "start": "2880880",
    "end": "2886720"
  },
  {
    "text": "being put into the microprocessor and each each uh spin around this loop between",
    "start": "2886720",
    "end": "2892240"
  },
  {
    "text": "compiler people and architecture people really takes about a year or two at least until they get together and can",
    "start": "2892240",
    "end": "2899680"
  },
  {
    "text": "do something whereas here you have a very tight loop and you can actually move fairly quickly once you know what you're doing thank",
    "start": "2899680",
    "end": "2908720"
  },
  {
    "text": "got time for you um as i understand it your fpgas were",
    "start": "2913040",
    "end": "2921359"
  },
  {
    "text": "originally created for supporting items and rapid development right now using the extended duration test",
    "start": "2921359",
    "end": "2928640"
  },
  {
    "text": "how if at all would you prefer fpgas to be designed to suit better",
    "start": "2928640",
    "end": "2934960"
  },
  {
    "text": "your needs than using them for extended computing",
    "start": "2934960",
    "end": "2940240"
  },
  {
    "text": "it's really a hard question how would i change fpgas if i would want them to be",
    "start": "2941359",
    "end": "2946720"
  },
  {
    "text": "more suitable for computing um that question is really slightly",
    "start": "2946720",
    "end": "2952720"
  },
  {
    "text": "orthogonal to what i'm trying to do and there are lots of people looking into that",
    "start": "2952720",
    "end": "2957839"
  },
  {
    "text": "the main problem with that is that you would have to understand what it is that you want to create so",
    "start": "2957839",
    "end": "2965359"
  },
  {
    "text": "it's kind of a chicken and egg problem and i don't understand yet all the possibilities of what it is that i want",
    "start": "2965359",
    "end": "2971760"
  },
  {
    "text": "to generate that's why i think it's a little bit too early to start thinking about what the optimal architecture for the fpga is i",
    "start": "2971760",
    "end": "2979440"
  },
  {
    "text": "think the way it is now it is good enough for for us to reason about what we want",
    "start": "2979440",
    "end": "2984800"
  },
  {
    "text": "to generate on these chips once we have a better understanding of",
    "start": "2984800",
    "end": "2990319"
  },
  {
    "text": "what it is that we can map down onto fpgas it will also be easier to answer that",
    "start": "2990319",
    "end": "2995440"
  },
  {
    "text": "question so i think my answer is i don't know",
    "start": "2995440",
    "end": "3000240"
  },
  {
    "text": "yeah there's a company called salaxica whose technology is based on work done",
    "start": "3000880",
    "end": "3006400"
  },
  {
    "text": "at oxford university and they have a language based on c and the claim they're making is that c",
    "start": "3006400",
    "end": "3012079"
  },
  {
    "text": "programmers come up to speed very quickly on the language and are programming some very impressive",
    "start": "3012079",
    "end": "3017520"
  },
  {
    "text": "applications if you were at fccm over the last three days you would have",
    "start": "3017520",
    "end": "3023200"
  },
  {
    "text": "seen very impressive demonstrations of what the key programmers could do in a very short",
    "start": "3023200",
    "end": "3029599"
  },
  {
    "text": "amount relatively short amount of time are you aware of scholastica's siloxica's technology and if so do you",
    "start": "3029599",
    "end": "3037040"
  },
  {
    "text": "have any comments on it yeah in particular have they solved the programming problem",
    "start": "3037040",
    "end": "3042640"
  },
  {
    "text": "um they have uh advanced certainly advanced the state of the art in programming fpgas and they are",
    "start": "3042640",
    "end": "3050880"
  },
  {
    "text": "basically providing a product something that is feasible today with today's technology in today's understanding of these architectures",
    "start": "3050880",
    "end": "3058160"
  },
  {
    "text": "um the difference between what i'm trying to do and what they're doing is that they're",
    "start": "3058160",
    "end": "3063920"
  },
  {
    "text": "selling a product that is uh currently",
    "start": "3063920",
    "end": "3070880"
  },
  {
    "text": "targeted to what people want to do on fpgas which is getting people up to speed",
    "start": "3070880",
    "end": "3076720"
  },
  {
    "text": "quickly to design circuit mass much faster there is very little",
    "start": "3076720",
    "end": "3082160"
  },
  {
    "text": "information on the actual architecture that is being compiled to which provides some difficulty for uh for people to get",
    "start": "3082160",
    "end": "3089359"
  },
  {
    "text": "started also there is uh not even close to the flexibility",
    "start": "3089359",
    "end": "3094480"
  },
  {
    "text": "that i was talking about here in terms of uh arithmetic and in terms of uh",
    "start": "3094480",
    "end": "3102960"
  },
  {
    "text": "various other things that i showed in this talk which would take too long so the difference between the two",
    "start": "3102960",
    "end": "3109680"
  },
  {
    "text": "projects is really that one is more market oriented and the other one is more uh research oriented where i hope that",
    "start": "3109680",
    "end": "3117280"
  },
  {
    "text": "uh what i'm doing here will be feasible or somebody would pay money for it maybe in the 10-year time frame",
    "start": "3117280",
    "end": "3125359"
  },
  {
    "text": "so yeah when you're trying to come up with a",
    "start": "3125359",
    "end": "3130880"
  },
  {
    "text": "speed-up figure like that how do you determine which process to compare the fpga to",
    "start": "3130880",
    "end": "3139838"
  },
  {
    "text": "well that's a good question i mean basically",
    "start": "3141119",
    "end": "3147119"
  },
  {
    "text": "you pick one and show the number microprocessors",
    "start": "3147119",
    "end": "3152880"
  },
  {
    "text": "of a given technology with a given clock frequency don't vary that much in performance",
    "start": "3152880",
    "end": "3161200"
  },
  {
    "text": "you don't have five times different performance if you run a program on an alpha versus pentium",
    "start": "3161200",
    "end": "3168720"
  },
  {
    "text": "it's twenty thirty percent fifty percent different so that's why this number has just",
    "start": "3168720",
    "end": "3175520"
  },
  {
    "text": "really one or two significant digits uh because i don't care if it's uh 99.5",
    "start": "3175520",
    "end": "3181920"
  },
  {
    "text": "or or 101.5 it's just to show the ballpark that there is a potential for order of",
    "start": "3181920",
    "end": "3189359"
  },
  {
    "text": "magnitude improvement the actual number at this point is not meaningful exactly for that reason",
    "start": "3189359",
    "end": "3195838"
  },
  {
    "text": "yeah your algorithms specifically take into account large performance that you get every time you need",
    "start": "3196400",
    "end": "3203359"
  },
  {
    "text": "one algorithm where you said you could divide things up",
    "start": "3203359",
    "end": "3209838"
  },
  {
    "text": "how do you address um the idea is that you have to justify",
    "start": "3214000",
    "end": "3219680"
  },
  {
    "text": "changing the circuit on the fpga by running the circuit about 10 times longer than it takes to",
    "start": "3219680",
    "end": "3226319"
  },
  {
    "text": "actually change the configuration so that's usually the way it is done that's",
    "start": "3226319",
    "end": "3232480"
  },
  {
    "text": "why people like to implement applications with a lot of data",
    "start": "3232480",
    "end": "3238240"
  },
  {
    "text": "because you simply gain the flexibility in time where you can",
    "start": "3238240",
    "end": "3245520"
  },
  {
    "text": "process one megabyte of data and that can take a while can take long enough to justify",
    "start": "3245520",
    "end": "3252319"
  },
  {
    "text": "reconfiguring the fpga entering it again so that's why i didn't show too much about the first couple applications that",
    "start": "3252319",
    "end": "3258640"
  },
  {
    "text": "i had which deal with applications that have a lot of data because this is a rather trivial problem",
    "start": "3258640",
    "end": "3264480"
  },
  {
    "text": "because you simply take enough you process enough data to justify the reconfiguration",
    "start": "3264480",
    "end": "3271280"
  },
  {
    "text": "so that's why the applications i showed are slightly tougher problems where you actually have tighter loops or",
    "start": "3271280",
    "end": "3278319"
  },
  {
    "text": "you have the memory in there or uh you have other types of problems that are",
    "start": "3278319",
    "end": "3283440"
  },
  {
    "text": "slightly harder to address your straightens with motivation",
    "start": "3283440",
    "end": "3291280"
  },
  {
    "text": "yes yes so the stream compiler basically that that's what it does it streams the data through",
    "start": "3291280",
    "end": "3296559"
  },
  {
    "text": "lets the data being streamed through the fpga to justify the reconfiguration by having enough data to process",
    "start": "3296559",
    "end": "3304480"
  },
  {
    "text": "one of the things one of the ways you get performance increase in this sort of model is to uh take advantage of",
    "start": "3305520",
    "end": "3312799"
  },
  {
    "text": "inherent parallelism uh you're specifying your algorithms however in terms of",
    "start": "3312799",
    "end": "3318079"
  },
  {
    "text": "c plus plus which is uh if anything a sequential language",
    "start": "3318079",
    "end": "3323200"
  },
  {
    "text": "uh how do you discover the parallelism how do you map things out or are you simply really just recreating",
    "start": "3323200",
    "end": "3329680"
  },
  {
    "text": "the c plus plus program as a data flow program in the uh",
    "start": "3329680",
    "end": "3334880"
  },
  {
    "text": "in the fpga it is really the recreation of the program so you take the data flow graph of",
    "start": "3334880",
    "end": "3341040"
  },
  {
    "text": "whatever it is that you have and you you just put it into the fpga as",
    "start": "3341040",
    "end": "3346559"
  },
  {
    "text": "is and that makes it very simple to fully pipeline and it makes it also very simple um",
    "start": "3346559",
    "end": "3354720"
  },
  {
    "text": "to just handle the control of that so there is no control overhead there is no power or",
    "start": "3354720",
    "end": "3359920"
  },
  {
    "text": "area or time wasted on controlling that circuit there",
    "start": "3359920",
    "end": "3365599"
  },
  {
    "text": "essentially is no control because data only streams through which is another uh",
    "start": "3365599",
    "end": "3371599"
  },
  {
    "text": "advantage of this architectural microprocessors that spend a lot of time decoding and",
    "start": "3371599",
    "end": "3377359"
  },
  {
    "text": "looking at instructions and typing through true but many algorithms would perhaps decompose into multiple",
    "start": "3377359",
    "end": "3384240"
  },
  {
    "text": "pipelines which operate independently and you could get even additional",
    "start": "3384240",
    "end": "3389280"
  },
  {
    "text": "performance if you were able to discover that is this something which you're going to look at at some point",
    "start": "3389280",
    "end": "3395200"
  },
  {
    "text": "uh definitely yes how do you handle loops",
    "start": "3395200",
    "end": "3401599"
  },
  {
    "text": "well loops the weight is handled now are being unrolled so you have a loop",
    "start": "3401680",
    "end": "3408640"
  },
  {
    "text": "and you unroll the loop in order to create the full data flow graph so that's one way of handling loops if",
    "start": "3408640",
    "end": "3414799"
  },
  {
    "text": "you know how so basically there are different types of loops you have loops that loop through an array",
    "start": "3414799",
    "end": "3423520"
  },
  {
    "text": "which is basically going through the array and streaming that array into a stream architecture",
    "start": "3423520",
    "end": "3430400"
  },
  {
    "text": "there are other types of loops where you do something five times which can be easily unrolled",
    "start": "3430400",
    "end": "3437599"
  },
  {
    "text": "and then there are again other types of loops where you have a dependency between the loops and you have to figure out when to stop looping",
    "start": "3437599",
    "end": "3444880"
  },
  {
    "text": "basically you have a condition on the end of the loop and that is what i was talking about in the one slide",
    "start": "3444880",
    "end": "3450400"
  },
  {
    "text": "with with looking at loops which is where you need the feedback inside your data flow graph and you have",
    "start": "3450400",
    "end": "3457119"
  },
  {
    "text": "to optimize the critical path through this loop in order to get your performance up",
    "start": "3457119",
    "end": "3463200"
  },
  {
    "text": "and this is where you use the number of presentations to shorten that critical path no but",
    "start": "3463200",
    "end": "3468960"
  },
  {
    "text": "then how do you achieve pipeline you just wait for the entire task to",
    "start": "3468960",
    "end": "3474559"
  },
  {
    "text": "flow beyond that loop before you can get the next task um pipelining is",
    "start": "3474559",
    "end": "3481520"
  },
  {
    "text": "implicit in in the architecture you have for example a multiplier that",
    "start": "3481520",
    "end": "3487680"
  },
  {
    "text": "is already pipelined like i said the registers are fixed in the fpga you can't move them you can as",
    "start": "3487680",
    "end": "3494000"
  },
  {
    "text": "well use them right after you go through a lookup table or some piece of logic",
    "start": "3494000",
    "end": "3500799"
  },
  {
    "text": "you can as well go into a register because it's already there not using it is not going to help you much so",
    "start": "3500799",
    "end": "3507119"
  },
  {
    "text": "you know already where the registers are and there is really no no big question about where to put them",
    "start": "3507119",
    "end": "3514960"
  },
  {
    "text": "so pipelining is implicit um yes we've seen that this technology has",
    "start": "3514960",
    "end": "3521200"
  },
  {
    "text": "tremendous potential for evolutionary programming deductive systems is that caught on yet are we in",
    "start": "3521200",
    "end": "3526960"
  },
  {
    "text": "that age yes um john koza is is doing uh experiments uh for a couple years",
    "start": "3526960",
    "end": "3533920"
  },
  {
    "text": "already uh evolving all kinds of circuits or helping evolution or doing these kind of things so yes",
    "start": "3533920",
    "end": "3540400"
  },
  {
    "text": "there are a couple papers out still very in a very initial stage and",
    "start": "3540400",
    "end": "3546880"
  },
  {
    "text": "and lots of problems associated with them but what we've started looking for",
    "start": "3546880",
    "end": "3553200"
  },
  {
    "text": "what did you think of the ideas that microdenic was presented basically uh one way to implement large",
    "start": "3554559",
    "end": "3562000"
  },
  {
    "text": "complicated systems would be to swap in and swap out uh to a",
    "start": "3562000",
    "end": "3567040"
  },
  {
    "text": "fpga engine a a particular architecture",
    "start": "3567040",
    "end": "3573839"
  },
  {
    "text": "um well",
    "start": "3574160",
    "end": "3579920"
  },
  {
    "text": "nick has a little bit more radical ideas um",
    "start": "3581839",
    "end": "3588000"
  },
  {
    "text": "to tell the truth i'm not really sure how i would do that but i'm always interested to to",
    "start": "3588240",
    "end": "3596160"
  },
  {
    "text": "see how this would work any other questions okay",
    "start": "3596160",
    "end": "3603280"
  },
  {
    "text": "thanks very much",
    "start": "3603280",
    "end": "3612799"
  }
]