[
  {
    "start": "0",
    "end": "5660"
  },
  {
    "text": "Last Tuesday, we were talking\nabout linear reachability or reachability\nfor linear systems.",
    "start": "5660",
    "end": "11370"
  },
  {
    "text": "And we left off where we\nwere having this problem where there was--",
    "start": "11370",
    "end": "16910"
  },
  {
    "text": "we were propagating polytopes\nthrough these linear equations. And we saw that every single\ntime step up to some depth,",
    "start": "16910",
    "end": "23790"
  },
  {
    "text": "we were accumulating\nthis number of vertices. And we had this\nexponential growth",
    "start": "23790",
    "end": "29270"
  },
  {
    "text": "in the number of vertices. And so we were worried because\nthat can quickly become computationally intractable.",
    "start": "29270",
    "end": "36687"
  },
  {
    "text": "And so we said one\nthing that we could do to help with this was\nrepresent things as zonotopes. And for zonotopes, the\nnumber of generators",
    "start": "36687",
    "end": "43610"
  },
  {
    "text": "grows linearly with the depth. And so that was much better. But zonotopes, we can't\nrepresent all polytopes",
    "start": "43610",
    "end": "50690"
  },
  {
    "text": "as zonotopes. So sometimes, maybe that's\nnot what we want to do. And so another option\nwe were talking",
    "start": "50690",
    "end": "55820"
  },
  {
    "text": "about at the end of lecture\nwas to overapproximate things. And basically, we said an\napproximation is just a set.",
    "start": "55820",
    "end": "63590"
  },
  {
    "text": "So here's the set maybe that\nwe want to over approximate. And overapproximation\nis just a set that is guaranteed to\ncontain the set that we",
    "start": "63590",
    "end": "70600"
  },
  {
    "text": "were trying to overapproximate. And we typically represent\nthese overapproximate sets by putting a\nbar on top of them.",
    "start": "70600",
    "end": "78250"
  },
  {
    "text": "And the idea was that\nif we have a set that has lots and lots of vertices,\nthen we could overapproximate it",
    "start": "78250",
    "end": "84370"
  },
  {
    "text": "with a set that\nhas fewer vertices, and then we have fewer\nvertices to keep track of.",
    "start": "84370",
    "end": "90070"
  },
  {
    "text": "But then we have to make sure\nthat we-- we still want to get guarantees out of this because\nwe're using formal methods here.",
    "start": "90070",
    "end": "97520"
  },
  {
    "text": "You want to guarantee\nthat a system is safe. And so we had to say,\nwhat kind of guarantees can we get if we only know, for\nexample, the overapproximate",
    "start": "97520",
    "end": "104430"
  },
  {
    "text": "set? So say this was our\noverapproximation of the reachable set. And we said, if the\noverapproximation still",
    "start": "104430",
    "end": "112119"
  },
  {
    "text": "doesn't intersect with the avoid\nset, then we know for a fact that our true reachable\nset also won't",
    "start": "112120",
    "end": "118000"
  },
  {
    "text": "intersect with the avoid set. And so we can still make\nconclusions about safety, even if we\noverapproximate things.",
    "start": "118000",
    "end": "125380"
  },
  {
    "text": "But if the overapproximate\nset does intersect with the avoid set,\nthen we definitely",
    "start": "125380",
    "end": "130600"
  },
  {
    "text": "can't say that it's safe. But we also can't\nsay that it's unsafe because we don't really\nknow what the true reachable",
    "start": "130600",
    "end": "136510"
  },
  {
    "text": "set looks like. It could just be\nsome small portion of this that actually doesn't\nintersect with the avoid set. But we don't know that,\nand so we, basically, just",
    "start": "136510",
    "end": "143350"
  },
  {
    "text": "have to leave this as\nkind of inconclusive. So to recap, if the\noverapproximate reachable set",
    "start": "143350",
    "end": "150027"
  },
  {
    "text": "does not intersect\nwith the avoid set, we can still make\nclaims about safety. We're good to go. But if it does\nintersect, then we",
    "start": "150027",
    "end": "155560"
  },
  {
    "text": "can't really conclude anything.  OK, and so then we\nleft off talking",
    "start": "155560",
    "end": "162130"
  },
  {
    "text": "about how in practice, what\nwe might do to then reduce this computational cost about\nthis growing number of vertices",
    "start": "162130",
    "end": "168782"
  },
  {
    "text": "is, every once in a while,\nso every few iterations-- this is kind of\nproblem-dependent-- you could overapproximate\nyour reachable set,",
    "start": "168783",
    "end": "176550"
  },
  {
    "text": "and then overapproximate it with\na set that has fewer vertices and use that from there on out. And so your number of vertices\ndoesn't grow as quickly.",
    "start": "176550",
    "end": "185150"
  },
  {
    "text": "And the amazing thing is,\nour favorite package LazySets can just do this\nautomatically for us. So basically, all that's going\non in this algorithm here",
    "start": "185150",
    "end": "192469"
  },
  {
    "text": "is we have some\nfrequency, which is after how many steps or\nevery how many steps do we want to do this\noverapproximation?",
    "start": "192470",
    "end": "198450"
  },
  {
    "text": "And then we just call this\noverapproximate function that's provided by LazySets,\ngive it some error tolerance,",
    "start": "198450",
    "end": "204470"
  },
  {
    "text": "and it will overapproximate\nthe set for us with a set that\nhas fewer vertices.",
    "start": "204470",
    "end": "210710"
  },
  {
    "text": "And if you want to know exactly\nhow this algorithm works, we do talk about it in the book. And so if you want to know\nwhat LazySets is actually",
    "start": "210710",
    "end": "217793"
  },
  {
    "text": "doing when you\ncall that function, you can check out this\nsection in the book. I'm not really going to\ngo through how it works,",
    "start": "217793",
    "end": "225150"
  },
  {
    "text": "but after I show\nyou this figure, I am going to show you a little\nbit of the general concepts",
    "start": "225150",
    "end": "232489"
  },
  {
    "text": "behind that algorithm. But first, let's look at this. So this is just\nvisually showing what",
    "start": "232490",
    "end": "239055"
  },
  {
    "text": "we were doing where we\nwere overapproximating every few steps. So let's say we wanted to\noverapproximate the set",
    "start": "239055",
    "end": "244200"
  },
  {
    "text": "every three steps\nin our reachability, then we start with our initial\nset, like we've been doing,",
    "start": "244200",
    "end": "249760"
  },
  {
    "text": "we get the reachable\nset at time step two. And then when we get\nto time step three, we compute the reachable set.",
    "start": "249760",
    "end": "254920"
  },
  {
    "text": "This has some number\nof vertices in it, some number more than four. And then we overapproximate\nit with a set",
    "start": "254920",
    "end": "261810"
  },
  {
    "text": "that has four vertices. And we can control how much\noverapproximation error we have if we allow for more vertices\nof this overapproximate set.",
    "start": "261810",
    "end": "270033"
  },
  {
    "text": "But let's say we\njust wanted four. That's all we could\nkeep track of. And then we take this new\nset and we propagate this",
    "start": "270033",
    "end": "275790"
  },
  {
    "text": "forward from there on out. And so you can see there's a\ntrade off here because we're getting this extra\noverapproximation",
    "start": "275790",
    "end": "282870"
  },
  {
    "text": "error because we started\nwith this overapproximate set to compute the reachable\nset at time step four.",
    "start": "282870",
    "end": "288040"
  },
  {
    "text": "So there's this\ntradeoff that goes on between how much\ncomputation you have to do and the accuracy of\nyour reachable sets",
    "start": "288040",
    "end": "297640"
  },
  {
    "text": "or the conservativeness of them. So now I want to talk about the\ngeneral idea for how we can go",
    "start": "297640",
    "end": "304470"
  },
  {
    "text": "about overapproximating a set. And the key concept here that's\nreally behind all of this",
    "start": "304470",
    "end": "309945"
  },
  {
    "text": "is this idea of something\ncalled a support vector. So a support vector\nmathematically looks like this.",
    "start": "309945",
    "end": "316590"
  },
  {
    "text": "A support vector-- so this\nis confusing, or at least confused me at some point.",
    "start": "316590",
    "end": "321672"
  },
  {
    "text": "What's interesting\nabout it is it's a function that\ntakes in a direction. So we take in a direction. So this is like a\nmultidimensional vector",
    "start": "321672",
    "end": "328080"
  },
  {
    "text": "that gives us a direction in our\nspace, and it returns a vector. So essentially what this\nsigma of D represents",
    "start": "328080",
    "end": "335715"
  },
  {
    "text": "is this is going to give us the\nsupport vector in the direction D. So these are all with respect\nto some direction in our space.",
    "start": "335715",
    "end": "343542"
  },
  {
    "text": "And then what we're\ndoing is, we're just looking at all of\nthe points in our set and finding the point that\nmaximizes this dot product here.",
    "start": "343542",
    "end": "351993"
  },
  {
    "text": "So I think it's a lot easier to\nlook at support vectors visually because they're actually\na pretty intuitive idea.",
    "start": "351993",
    "end": "357540"
  },
  {
    "text": "And the idea is just, we\nspecify some direction. So let's say we picked\nthis direction here.",
    "start": "357540",
    "end": "362730"
  },
  {
    "text": "And we want to find\nthe support vector in this direction for this\nparticular shape, which is a polytope here.",
    "start": "362730",
    "end": "368460"
  },
  {
    "text": "And basically, what you can\nimagine for the support vector is, all we do is we\ndraw a line that is",
    "start": "368460",
    "end": "373830"
  },
  {
    "text": "perpendicular to this vector. And then you can imagine we're\njust going to take this vector, and we're going to\npush on this line",
    "start": "373830",
    "end": "380610"
  },
  {
    "text": "until it's just barely\ntouching the set. So we're of maximizing\nthis dot product here",
    "start": "380610",
    "end": "388290"
  },
  {
    "text": "by pushing it as far\nas we can until we're no longer in the set, so\nthat's what's going on there.",
    "start": "388290",
    "end": "394600"
  },
  {
    "text": "And then this point here\nwhere this line touches, that's our support vector. So if we were to draw\na line to that point,",
    "start": "394600",
    "end": "400770"
  },
  {
    "text": "that would be the\nsupport vector. And what's cool about\nthis is this actually",
    "start": "400770",
    "end": "406229"
  },
  {
    "text": "defines a half space because we\nknow that since this maximized it, all the points below\nit must be in the set.",
    "start": "406230",
    "end": "414530"
  },
  {
    "text": "So this allows us\nto basically bound the set with some half space. And we can say that\neverything in this set",
    "start": "414530",
    "end": "421330"
  },
  {
    "text": "is going to be within\nthat half space. So this gives us, basically,\na bounding half space.",
    "start": "421330",
    "end": "428920"
  },
  {
    "text": "And so then you can imagine--\nthis is one direction that we evaluated the support vector. But let's try to do it\nin another direction.",
    "start": "428920",
    "end": "435260"
  },
  {
    "text": "So let's say that we pick this\ndirection here for example. So we draw our line. And again, we're\ngoing to imagine",
    "start": "435260",
    "end": "441310"
  },
  {
    "text": "that we're going to\ntake this direction, and we're going to push\nthis line until it just barely touches our set.",
    "start": "441310",
    "end": "446600"
  },
  {
    "text": "So we do this again. And now, this is going to\ngive us another half space. And we know that our\nset must be on this side",
    "start": "446600",
    "end": "454450"
  },
  {
    "text": "of this particular half space. And so now, we don't have a\nbounding half space anymore.",
    "start": "454450",
    "end": "459830"
  },
  {
    "text": "We now have a\nbounding polyhedron. And then, let's do\nthis one more time.",
    "start": "459830",
    "end": "464960"
  },
  {
    "text": "Let's pick a direction\nlike this here. So we're going to\ngo straight down. And again, we're going to\nimagine pushing this line down",
    "start": "464960",
    "end": "472163"
  },
  {
    "text": "until it just barely\ntouches the set. And now, we add\nin our half space. And then we have\nthis triangle here.",
    "start": "472163",
    "end": "480270"
  },
  {
    "text": "And we've got a\nbounded set that over approximates our current set. So we have a bounding polytope,\nwhich is what we were after.",
    "start": "480270",
    "end": "489410"
  },
  {
    "text": "And you can imagine that-- so we\njust did three directions here. But we could keep doing this\nin many different directions,",
    "start": "489410",
    "end": "494580"
  },
  {
    "text": "and we'll get different planes\nand different slices here. And so our\noverapproximation is just going to get more\nand more accurate.",
    "start": "494580",
    "end": "500130"
  },
  {
    "text": "It's going to get closer and\ncloser to this actual set, but it will have more vertices. So that's how we get\nthat tradeoff there.",
    "start": "500130",
    "end": "507830"
  },
  {
    "text": "And specifically, the\ndirections that we pick for evaluating the\nsupport vector, that's",
    "start": "507830",
    "end": "513409"
  },
  {
    "text": "going to determine what this\nbounding polytope looks like. So these three directions\ngave us this triangle here.",
    "start": "513409",
    "end": "519390"
  },
  {
    "text": "If we add another direction\nmaybe going this way, we'll get another one\nthat slices through here, and we'll have more than\nthree vertices, et cetera.",
    "start": "519390",
    "end": "527310"
  },
  {
    "text": "And basically what\nthat algorithm that LazySets is using,\nit just has this smart way",
    "start": "527310",
    "end": "532920"
  },
  {
    "text": "of actually picking\nthese directions so that it can most efficiently\noverapproximate the set.",
    "start": "532920",
    "end": "540180"
  },
  {
    "text": "And so this is something that\nyou can play around with. And hint, hint\nfor project three, if you want to optimize\nyour leaderboard score",
    "start": "540180",
    "end": "547110"
  },
  {
    "text": "on the small problem,\nyou might want to be smart about how you\npick these directions. If you just want to pass,\nyou can just make it a box.",
    "start": "547110",
    "end": "555000"
  },
  {
    "text": "OK, is there any\nquestions on that? Yeah. Are there any [INAUDIBLE]\nfor what could looks like in these directions?",
    "start": "555000",
    "end": "562320"
  },
  {
    "text": "Yeah, good question. Let's say that I'm going to\nshow something at the end that will clear that up, I think.",
    "start": "562320",
    "end": "567579"
  },
  {
    "text": "Yeah? [INAUDIBLE] don't have\nto computationally",
    "start": "567580",
    "end": "576360"
  },
  {
    "text": "have as many things to look\nat within this bounding box. But then it's better\nif we're closer",
    "start": "576360",
    "end": "582630"
  },
  {
    "text": "to the actual reachability\nspace is only going to make more certain guarantees about--",
    "start": "582630",
    "end": "588490"
  },
  {
    "text": "OK, OK. Yep, yep. That's exactly right. So to summarize, we're\ntrying to overapproximate so we don't have to keep\ntrack of as many vertices.",
    "start": "588490",
    "end": "595340"
  },
  {
    "text": "But the tighter this\napproximation is, the more likely\nwe're going to be able to still make good\nguarantees because if it gets",
    "start": "595340",
    "end": "601600"
  },
  {
    "text": "huge and it's just\nthe entire space, then we'll probably\nintersect with the avoid set, and we won't be able to\nmake those guarantees.",
    "start": "601600",
    "end": "607370"
  },
  {
    "text": "[INAUDIBLE] approximation other\nthan the computational cost?",
    "start": "607370",
    "end": "613930"
  },
  {
    "text": "Because I guess, like\nfor this instance, around the triangle\nregions, you see",
    "start": "613930",
    "end": "619090"
  },
  {
    "text": "you don't have a lot of the\noriginal set in there, I guess,",
    "start": "619090",
    "end": "624460"
  },
  {
    "text": "or the edges-- Like over here? Yeah. Is there any benefit to\nhaving a bounded area",
    "start": "624460",
    "end": "633790"
  },
  {
    "text": "around your reachability set? I suppose if you\nfelt like you had",
    "start": "633790",
    "end": "640630"
  },
  {
    "text": "some uncertainty\nin your system, you could can inflate your reachable\nset to account for that.",
    "start": "640630",
    "end": "646140"
  },
  {
    "text": "But then that would already be\naccounted for by modeling it in the disturbances. So typically want the\ntightest approximation",
    "start": "646140",
    "end": "652490"
  },
  {
    "text": "you can with the\nfewest vertices. Yeah.",
    "start": "652490",
    "end": "657889"
  },
  {
    "text": "Yeah. So this is only for\nconvex sets, right?",
    "start": "657890",
    "end": "663170"
  },
  {
    "text": "You can bound any set\nwith its support function",
    "start": "663170",
    "end": "668339"
  },
  {
    "text": "even if it's non-convex. It just might not be tight. But it might be some points\noutside the bounding polytope",
    "start": "668340",
    "end": "679019"
  },
  {
    "text": "if I pick, I say, like\ncertain directions. Let me see if I can draw this. So let's say we had our\nactual set was like this.",
    "start": "679020",
    "end": "686460"
  },
  {
    "text": "So this part's no\nlonger inside of it. So this is like our set. So this is non-convex.",
    "start": "686460",
    "end": "692160"
  },
  {
    "text": "If I evaluate the support\nfunction, for example, in this direction, I'll\nget something like this. If I evaluate it in, I\ndon't know, this direction,",
    "start": "692160",
    "end": "699150"
  },
  {
    "text": "I'll get something like this. And we're still actually going\nto end up bounding that set.",
    "start": "699150",
    "end": "704910"
  },
  {
    "text": "Did that get it-- [INAUDIBLE] it's like weird\nand it's shaped [INAUDIBLE]",
    "start": "704910",
    "end": "711750"
  },
  {
    "text": "like a protruding shape. [INAUDIBLE] protruding.",
    "start": "711750",
    "end": "717000"
  },
  {
    "text": "Shaped something. It's like being extending beyond\none of the bounding [INAUDIBLE].",
    "start": "717000",
    "end": "725192"
  },
  {
    "text": "The support function will\nalways bound your set. ",
    "start": "725192",
    "end": "732120"
  },
  {
    "text": "Yeah. But yeah. We're typically talking about\npolytopes in this class. But if you have a\nnon-convex shape,",
    "start": "732120",
    "end": "738630"
  },
  {
    "text": "the support function\nwill still bound it. It will bound it\nas a convex shape.",
    "start": "738630",
    "end": "744610"
  },
  {
    "text": "Maybe that clears things up. Were you going to say something? OK.",
    "start": "744610",
    "end": "750709"
  },
  {
    "text": "Cool. ",
    "start": "750710",
    "end": "755760"
  },
  {
    "text": "So that's set\npropagation techniques. And then the last thing\nwe're going to talk about,",
    "start": "755760",
    "end": "760870"
  },
  {
    "text": "somewhat briefly, is\noptimization techniques. And so what we just saw\nis that we could bound",
    "start": "760870",
    "end": "766510"
  },
  {
    "text": "our set with support vectors. And for that, we\npropagated the set through,",
    "start": "766510",
    "end": "773453"
  },
  {
    "text": "we got the exact\nreachable set, and then we bounded that with\nsupport vectors. But we could also just solve for\nthese support vectors directly",
    "start": "773453",
    "end": "780610"
  },
  {
    "text": "without doing any\nset propagation. And specifically, to do that,\nwe would look for the solution",
    "start": "780610",
    "end": "786129"
  },
  {
    "text": "to this optimization problem. And it will give us the support\nvector of the reachable set",
    "start": "786130",
    "end": "791410"
  },
  {
    "text": "in direction d. So all this is saying, it looks\njust like what we had before. We've just replaced the x,\nkind of the generic x we",
    "start": "791410",
    "end": "798790"
  },
  {
    "text": "were talking about before, with\nthe states in our reachable set. So we want to basically solve\nthis optimization problem.",
    "start": "798790",
    "end": "804890"
  },
  {
    "text": "And that will give\nus a bounding-- some bounds on a reachable set. So for example, if this is\nour reachable set at time step",
    "start": "804890",
    "end": "811930"
  },
  {
    "text": "d, what we're doing when\nwe evaluate the support function in some\ndirection, it's just getting some hyperplane\nto bound our reachable set",
    "start": "811930",
    "end": "819935"
  },
  {
    "text": "at that particular time. Yeah. Sorry. What is this place here.",
    "start": "819935",
    "end": "825680"
  },
  {
    "text": "All I'm saying is we don't\nexplicitly know our d. So I'm going to show you\nin a second an optimization",
    "start": "825680",
    "end": "830960"
  },
  {
    "text": "problem where we\njust calculate this, but we don't actually\nknow what this was. We're only going to\ncalculate the support vector.",
    "start": "830960",
    "end": "838222"
  },
  {
    "text": "So this equation could be\nlike d is argmax this thing? Yeah, it could be that.",
    "start": "838222",
    "end": "843230"
  },
  {
    "text": "And that's actually called\nthe support function, which is introduced in the book. I just didn't want to get too\nmany terms in the lecture,",
    "start": "843230",
    "end": "849350"
  },
  {
    "text": "but yeah. OK. All right.",
    "start": "849350",
    "end": "854430"
  },
  {
    "text": "So this, as itself, we don't\nactually know how to solve this. But it turns out we can convert\nthis maximization problem",
    "start": "854430",
    "end": "859580"
  },
  {
    "text": "to something that we can solve. And so the idea is we\nkeep the same objective.",
    "start": "859580",
    "end": "864779"
  },
  {
    "text": "So we're saying the\nstates at time step d. So that's going to be the\nstates in the reachable set at time step d.",
    "start": "864780",
    "end": "870140"
  },
  {
    "text": "We want to maximize this\ndirection vector dot product with that state.",
    "start": "870140",
    "end": "875480"
  },
  {
    "text": "And then we're going\nto choose our states at each time step and our\ndisturbances at each time step.",
    "start": "875480",
    "end": "881895"
  },
  {
    "text": "But we have some\nconstraints that say the initial state needs to\ncome from the initial state set. These are things that we\nhave already specified.",
    "start": "881895",
    "end": "888890"
  },
  {
    "text": "The disturbance\nat each time step needs to come from\nthe disturbance set for that particular time step.",
    "start": "888890",
    "end": "894710"
  },
  {
    "text": "And then our final constraint is\njust the dynamics of the system. So it needs to be the case\nthat st plus 1 is feasible,",
    "start": "894710",
    "end": "902550"
  },
  {
    "text": "basically. It needs to be the\nstate that results when we take a step from\nst using disturbance xt.",
    "start": "902550",
    "end": "908150"
  },
  {
    "text": "So it's just kind of saying like\nwe can't just pick any old s1 and xt, we need this\ntrajectory to be",
    "start": "908150",
    "end": "913360"
  },
  {
    "text": "an actual valid trajectory. So just to summarize\nthat, all this is saying",
    "start": "913360",
    "end": "918385"
  },
  {
    "text": "is like the initial state needs\nto be part of the initial state set. The disturbances need to be part\nof their bounded disturbance",
    "start": "918385",
    "end": "924700"
  },
  {
    "text": "sets, and then it needs\nto be a valid trajectory. So this step\nfunction here is just",
    "start": "924700",
    "end": "929845"
  },
  {
    "text": "that linear step function that\nwe get for the linear systems.",
    "start": "929845",
    "end": "935839"
  },
  {
    "text": "And so it turns out,\nthis is a linear program. Everything in this is linear\nas long as these are polytopes.",
    "start": "935840",
    "end": "941540"
  },
  {
    "text": "And so we actually know\nhow to solve these exactly. I'm not going to talk\nabout how to solve them. But if you want to know, maybe\ntake AA 222 next quarter.",
    "start": "941540",
    "end": "950959"
  },
  {
    "text": "But yeah, so we can\nactually solve this. Is there any questions\non this setup?",
    "start": "950960",
    "end": "956190"
  },
  {
    "text": "Yeah. So for this\n[INAUDIBLE], I guess, we must have convex initial\nstate sets and disturbance sets?",
    "start": "956190",
    "end": "961380"
  },
  {
    "text": "Yeah. Any convex. So in that case,\nI'm wondering what is the advantage of\nthis optimization",
    "start": "961380",
    "end": "966860"
  },
  {
    "text": "framework versus if we had just\nstarted with our convex sets and done our typical\nset propagation?",
    "start": "966860",
    "end": "973070"
  },
  {
    "text": "Is there an advantage to\nthis optimization technique? The advantage is\nkind of the same",
    "start": "973070",
    "end": "978290"
  },
  {
    "text": "as if you don't want to keep\ntrack of all the vertices, you can get an over\napproximate set,",
    "start": "978290",
    "end": "983310"
  },
  {
    "text": "but you could just\ndirectly do it without doing any\nset propagation. But in terms of\ncomputational efficiency,",
    "start": "983310",
    "end": "989280"
  },
  {
    "text": "is there an advantage\nor disadvantage, one way or the other? ",
    "start": "989280",
    "end": "996240"
  },
  {
    "text": "I don't know if\nit's easy to claim. I think it might\ndepend on the system and the linear\nprogramming solver",
    "start": "996240",
    "end": "1002120"
  },
  {
    "text": "specifically that you're using. Yeah. Excellent. Yeah. From a practical standpoint\nfor both linear systems, when",
    "start": "1002120",
    "end": "1009680"
  },
  {
    "text": "you want to do this [INAUDIBLE] It is an overapproximation.",
    "start": "1009680",
    "end": "1014847"
  },
  {
    "text": "There's one thing I left out of\nthe slides that's in the book. If you just want\nto know, is there",
    "start": "1014847",
    "end": "1020029"
  },
  {
    "text": "a point where my reachable set\nintersects with the avoid set. So if you only want\nto check the property,",
    "start": "1020030",
    "end": "1025560"
  },
  {
    "text": "you don't actually care about\ncomputing what the set actually looks like. You just want to say,\nis there any point, any state that would\nintersect with my avoid set.",
    "start": "1025560",
    "end": "1032280"
  },
  {
    "text": "You can solve that exactly\nusing an optimization problem. Very similar to this. You just change up the objective\nto say like basically minimize",
    "start": "1032280",
    "end": "1039800"
  },
  {
    "text": "the distance between a\npoint and your reachable set and a point in the avoid set. And if that goes to 0,\nthen that there could",
    "start": "1039800",
    "end": "1048319"
  },
  {
    "text": "be a state in your avoid set. You can check out the book. I didn't put it in here. But so that allows you to do it\nexactly if all you want to do",
    "start": "1048319",
    "end": "1055379"
  },
  {
    "text": "is check that property. Yeah. Yeah. So in this optimization problem,\nthe variable we're optimizing",
    "start": "1055380",
    "end": "1062519"
  },
  {
    "text": "is s1 for d and x for d, right? And then what do we\nassign to the [INAUDIBLE]?",
    "start": "1062520",
    "end": "1070093"
  },
  {
    "text": "This would be like\nsomething you have to pick. So in order to get\na bounding polytope, you'll have to solve\nit in a few directions",
    "start": "1070093",
    "end": "1075630"
  },
  {
    "text": "in order to make sure you get\nlike enough support vectors to bound it. ",
    "start": "1075630",
    "end": "1081870"
  },
  {
    "text": "Because the sentence\nabove says, the solution to this optimization\nproblem will give us d-- give us the support--",
    "start": "1081870",
    "end": "1087585"
  },
  {
    "text": "The support vector direction. So we just pick some d, and\nthen we will solve this.",
    "start": "1087585",
    "end": "1093280"
  },
  {
    "text": "And then this will tell us-- It will tell us\nlike that thing we",
    "start": "1093280",
    "end": "1098670"
  },
  {
    "text": "saw before where we\nhad that shape and then we had the support vector-- What's the furthest--\nhow far it goes.",
    "start": "1098670",
    "end": "1105100"
  },
  {
    "text": "OK. Thanks. Any other questions on this? ",
    "start": "1105100",
    "end": "1112750"
  },
  {
    "text": "This just formalized\nthe kind of process that we went through,\nlike finding [INAUDIBLE]",
    "start": "1112750",
    "end": "1118540"
  },
  {
    "text": "just what this process was. Basically, yeah. It's just that we didn't have\nto do any set propagation to do this.",
    "start": "1118540",
    "end": "1123920"
  },
  {
    "text": "So we could just write\nour system down like this and evaluate the\nsupport vector already",
    "start": "1123920",
    "end": "1129250"
  },
  {
    "text": "without having to propagate sets\nand then over approximate those. ",
    "start": "1129250",
    "end": "1136490"
  },
  {
    "text": "OK. So let's look at what\nthis looks like in code. So I'm not going to go\nthrough this too much. But it uses-- we used, I think,\nconvex.jl, maybe, in the book.",
    "start": "1136490",
    "end": "1145600"
  },
  {
    "text": "I forget, actually. To solve this linear\nprogram, and so we just implement this\noptimization problem",
    "start": "1145600",
    "end": "1151930"
  },
  {
    "text": "in constraints and\nvariables in Julia. And you can then solve\nthis program in code.",
    "start": "1151930",
    "end": "1159789"
  },
  {
    "text": "That's JuMP. That's JuMP. Cool. jump.jl.",
    "start": "1159790",
    "end": "1164972"
  },
  {
    "text": "And you can check out\nthe algorithm in the book if you want to see more. OK.",
    "start": "1164972",
    "end": "1170374"
  },
  {
    "text": "So there's been a\nlot of questions of what are all these\ndirections and what does it look like when we\nevaluate the support function.",
    "start": "1170374",
    "end": "1177380"
  },
  {
    "text": "So here's one of the last\nfigures in this chapter where we give you some intuition\nfor what's going on with all",
    "start": "1177380",
    "end": "1184670"
  },
  {
    "text": "of these different directions. And so if we solve this\noptimization problem in these four\ndirections, for example,",
    "start": "1184670",
    "end": "1191490"
  },
  {
    "text": "so that's like the four kind\nof axis aligned directions, then we're going to\nget a bounding box",
    "start": "1191490",
    "end": "1197150"
  },
  {
    "text": "for our reachable set\nbecause we're going to push up as far as we can. We're going to push to the\nright as far as we can,",
    "start": "1197150",
    "end": "1203340"
  },
  {
    "text": "to the left and down. And then the samples,\nthey don't tell us what the true reachable set is\nbecause that's inexact to just",
    "start": "1203340",
    "end": "1210302"
  },
  {
    "text": "do a bunch of rollouts. But they give us an idea of\nwhat the shape should be. So you can see that when we\njust do a bounding box for each",
    "start": "1210302",
    "end": "1216800"
  },
  {
    "text": "of our time steps. So we just evaluate\nthe support function in these four axis\naligned directions.",
    "start": "1216800",
    "end": "1222320"
  },
  {
    "text": "We have a lot of over\napproximation error, it seems, because there's a\nlot of extra space here where it doesn't seem like\nany of our samples ended up.",
    "start": "1222320",
    "end": "1230678"
  },
  {
    "text": "So then there's other\nways that we could go about picking these directions. So maybe we just sample\n10 random directions",
    "start": "1230678",
    "end": "1236549"
  },
  {
    "text": "and then evaluate the\nsupport function in those. That gives us these polytopes.",
    "start": "1236550",
    "end": "1242230"
  },
  {
    "text": "You can see it,\nmaybe our sampling didn't work out so well,\nor it wasn't so great because we actually had\nsome cases where it even",
    "start": "1242230",
    "end": "1248519"
  },
  {
    "text": "intersected with a void set. So maybe we could increase the\nnumber of random directions",
    "start": "1248520",
    "end": "1254010"
  },
  {
    "text": "we do. So maybe we do 50\nrandom directions. And in this case, things\nseem to get a bunch better.",
    "start": "1254010",
    "end": "1261779"
  },
  {
    "text": "But it turns out one of\nthe best things we could do is all we need is four\ndifferent directions.",
    "start": "1261780",
    "end": "1267340"
  },
  {
    "text": "And all we do is we\nlook at our samples. So at each time step, we\nmaybe do some rollouts,",
    "start": "1267340",
    "end": "1273490"
  },
  {
    "text": "get some samples. And that can give us an idea of\nthe shape of the reachable set. And we look at those and we do\nprincipal component analysis",
    "start": "1273490",
    "end": "1280200"
  },
  {
    "text": "on those samples. So if you're not familiar with\nprincipal component analysis, no worries. It just kind of\ngives us what are the primary directions that this\ndata is kind of pointing in.",
    "start": "1280200",
    "end": "1288702"
  },
  {
    "text": "And so when we do\nthat, we can understand what directions might be\nimportant to close in this data.",
    "start": "1288702",
    "end": "1295030"
  },
  {
    "text": "And so if we just do\nprincipal component analysis and use the directions\nthat come out of that with just\nfour support vectors,",
    "start": "1295030",
    "end": "1302420"
  },
  {
    "text": "we can get this really\nnice tight approximation of the reachable set.",
    "start": "1302420",
    "end": "1307640"
  },
  {
    "text": "Yeah. So this is running\nthe entire LP thing on top of each of those sets.",
    "start": "1307640",
    "end": "1312880"
  },
  {
    "text": "So we do set propagation\nto get each column. And then we do the LP\nthing to get the box.",
    "start": "1312880",
    "end": "1318520"
  },
  {
    "text": "You don't need to do\nany set propagation to run the linear program. Right. But how do we get\neach distinct column?",
    "start": "1318520",
    "end": "1325975"
  },
  {
    "text": "How do you get these? They're like R2, R3, R4. Yeah. So we'd have to run\nthe LP to get this.",
    "start": "1325975",
    "end": "1331160"
  },
  {
    "text": "You run the LP to get this. Run it to get this. Run to get this. OK. ",
    "start": "1331160",
    "end": "1339950"
  },
  {
    "text": "Any other questions on this? Sorry. We still compute the definition\nof RD with set operations.",
    "start": "1339950",
    "end": "1349110"
  },
  {
    "text": " To compute this bounding\nover approximate set,",
    "start": "1349110",
    "end": "1355140"
  },
  {
    "text": "you don't need to do\nany set operations. ",
    "start": "1355140",
    "end": "1360245"
  },
  {
    "text": "You need to solve this\noptimization problem with different directions. Oh, I see what's happening. OK, cool.",
    "start": "1360245",
    "end": "1365580"
  },
  {
    "text": "Thanks. And then the rollouts\nare orthogonal solvers? The rollouts gives\nus an idea of what the reachable set looks like.",
    "start": "1365580",
    "end": "1371340"
  },
  {
    "text": "So actually, we use\nthe rollouts to do PCA because we need some\nsamples to understand. But yeah, you don't\ntechnically need them.",
    "start": "1371340",
    "end": "1377580"
  },
  {
    "text": "And it can indicate, though,\nthat something's going wrong if one of your rollouts is\noutside of your reachable",
    "start": "1377580",
    "end": "1382700"
  },
  {
    "text": "set because then you've\ncomputed something wrong. So that's a good sanity check. ",
    "start": "1382700",
    "end": "1390680"
  },
  {
    "text": "Any other questions on this? Yeah. [INAUDIBLE] I'm just wondering.",
    "start": "1390680",
    "end": "1398270"
  },
  {
    "text": "Like in the direction\nof the x-axis, y-axis. And then the 10 random\ndirections [INAUDIBLE]",
    "start": "1398270",
    "end": "1406730"
  },
  {
    "text": "Yeah. These were just like\nsampled random ones. And this one, we actually\nlooked at our rollouts and try to understand\nwhat were the best",
    "start": "1406730",
    "end": "1412990"
  },
  {
    "text": "directions we could pick. [INAUDIBLE] those.",
    "start": "1412990",
    "end": "1418190"
  },
  {
    "text": "No. So the number of\nvertices will be-- so equal number\nof support vectors",
    "start": "1418190",
    "end": "1424450"
  },
  {
    "text": "possibly equal to the\nnumber of support vectors. I have to think about that. But in general, this has\nmore vertices than this one.",
    "start": "1424450",
    "end": "1430580"
  },
  {
    "text": "This one has four. This have four. And this probably\nhas close to 50. And this probably\nhas close to 10.",
    "start": "1430580",
    "end": "1436960"
  },
  {
    "text": "Yeah. In the code, so the\noptimization problem is you said it's linear,\neverything, right?",
    "start": "1436960",
    "end": "1442279"
  },
  {
    "text": "OK. Good. Because you use a\nsolver that's like can do much, much\nmore than linear.",
    "start": "1442280",
    "end": "1447890"
  },
  {
    "text": "So I think it's kind of\nan overkill situation. But OK. Just to clarify we\ndon't need anything. Don't cause lots of\ndifferent solvers.",
    "start": "1447890",
    "end": "1454820"
  },
  {
    "text": "Yeah. When you go to the code,\nit's not so important. But use SCS optimizer,\nI was like, what's this?",
    "start": "1454820",
    "end": "1460680"
  },
  {
    "text": "And it's like, it can\ndo a lot of things, but we just need\nthe linear function. Yeah. You can plug-in any\nsolver you want.",
    "start": "1460680",
    "end": "1466710"
  },
  {
    "text": "Great. Well, yeah. Yeah. OK. Cool.",
    "start": "1466710",
    "end": "1472050"
  },
  {
    "text": "So that wraps up this lecture\non linear reachability. And we'll go to the next one.",
    "start": "1472050",
    "end": "1478789"
  },
  {
    "text": "OK. Yeah. I have a question here\nfrom last lecture.",
    "start": "1478790",
    "end": "1483890"
  },
  {
    "text": "Could we actually find\nthe adversarial examples, counter examples. And I guess the LP would\nactually give us that, possibly.",
    "start": "1483890",
    "end": "1492260"
  },
  {
    "text": "Or maybe, it's still\nan overapproximation. So maybe even if we get\nthe disturbance sequence, it's not going to.",
    "start": "1492260",
    "end": "1498683"
  },
  {
    "text": "The one that I was talking\nabout that I didn't put in the slides, where you\ncan solve it exactly just to check if it intersects with\nthe set, that would give you",
    "start": "1498683",
    "end": "1506195"
  },
  {
    "text": "the example. So yeah. Good thing in there. OK.",
    "start": "1506195",
    "end": "1511265"
  },
  {
    "text": "So now that kind of wrapped up\nreachability for linear systems. And now we're going to\ntalk about reachability",
    "start": "1511265",
    "end": "1517730"
  },
  {
    "text": "for non-linear systems. OK. So in this previous lecture\nwhen we were doing all this set",
    "start": "1517730",
    "end": "1523050"
  },
  {
    "text": "propagation stuff, which is what\nwe did for most of the lecture, we saw that we could apply\nthese nice linear operators",
    "start": "1523050",
    "end": "1528540"
  },
  {
    "text": "to polytopes. So specifically, we could\napply matrix multiplication in addition to polytopes.",
    "start": "1528540",
    "end": "1535710"
  },
  {
    "text": "But it turns out that if we try\nto apply non-linear operators to polytopes, this becomes\nmuch less straightforward.",
    "start": "1535710",
    "end": "1543395"
  },
  {
    "text": "So things are generally a\nlittle bit more difficult for non-linear reachability. And I'll demonstrate why or\nwhat this looks like anyway.",
    "start": "1543395",
    "end": "1551350"
  },
  {
    "text": "So let's say we want to\napply a linear operation to some polytope. So in this case, our\npolytope has two vertices.",
    "start": "1551350",
    "end": "1558460"
  },
  {
    "text": "It's just a line\nor line segment. We apply some linear\noperation to it. So maybe 2x plus 1.",
    "start": "1558460",
    "end": "1564880"
  },
  {
    "text": "So this is just multiplication\nand addition like before. And the line turns\ninto something like this, which is still a\npolytope, still a line segment.",
    "start": "1564880",
    "end": "1573750"
  },
  {
    "text": "But now let's imagine that we\nhave the same polytope or line segment, and we apply some\nnonlinear operation to it.",
    "start": "1573750",
    "end": "1579950"
  },
  {
    "text": "So maybe we take the sine of x\nplus 1 or something like that. And then we get this set out.",
    "start": "1579950",
    "end": "1585950"
  },
  {
    "text": "That's definitely not\na polytope anymore. And in fact, it's\nnot even convex",
    "start": "1585950",
    "end": "1592480"
  },
  {
    "text": "because we're able to\ntake two points in this and draw a line between them. And the line does\nnot lie in the set.",
    "start": "1592480",
    "end": "1597620"
  },
  {
    "text": "And so this is non-convex. And as we mentioned\nlast lecture, non-convex sets are much\nmore difficult to work with.",
    "start": "1597620",
    "end": "1604222"
  },
  {
    "text": "It's a lot less\nstraightforward how to do these kind of\noperations on them. And while it's possible, there's\nlots of research on this,",
    "start": "1604222",
    "end": "1609860"
  },
  {
    "text": "it's not so easy. So that's kind of what\nincreases the difficulty for this nonlinear reachability.",
    "start": "1609860",
    "end": "1617940"
  },
  {
    "text": "OK. But one thing that we can do,\nand that we're pretty much going to do for the rest\nof this lecture, is we can take these things that\nare not polytopes and bound them",
    "start": "1617940",
    "end": "1624700"
  },
  {
    "text": "or over approximate them with\nthings that are polytopes. So make them easier\nfor us to work with.",
    "start": "1624700",
    "end": "1630820"
  },
  {
    "text": "So that's going to be the\ngeneral idea behind all the topics that I talk\nabout in lecture today.",
    "start": "1630820",
    "end": "1636260"
  },
  {
    "text": "So the first one is\ninterval arithmetic. The second one extends that\nto something called inclusion functions, talk about\nsomething called",
    "start": "1636260",
    "end": "1642470"
  },
  {
    "text": "tailor models, concrete\nreachability, and partitioning. OK. Let's just get into it. So like I said, we just\nsaw that we can't really",
    "start": "1642470",
    "end": "1650390"
  },
  {
    "text": "propagate arbitrary polytopes\nthrough non-linear systems.",
    "start": "1650390",
    "end": "1655540"
  },
  {
    "text": "But it turns out, one\nthing that we can do is actually propagate these\nthings called intervals. So an interval is probably kind\nof exactly what you think it is.",
    "start": "1655540",
    "end": "1663960"
  },
  {
    "text": "So we represent\nintervals like this where we have some\nvariable x and we put these two brackets on it.",
    "start": "1663960",
    "end": "1669360"
  },
  {
    "text": "That means that that's an\ninterval over the variable x. The interval is defined by some\nlower bound, which we represent",
    "start": "1669360",
    "end": "1676310"
  },
  {
    "text": "with this underline x\nand some upper bound, which we represent\nwith this overline x.",
    "start": "1676310",
    "end": "1681930"
  },
  {
    "text": "And the interval\nis just all x that are between the lower\nbound and the upper bound. So nothing too crazy going on.",
    "start": "1681930",
    "end": "1687680"
  },
  {
    "text": "It's kind of exactly\nwhat you would think. We start at some lower bound,\ngo to some upper bound, and the interval includes\nall points in between it.",
    "start": "1687680",
    "end": "1695220"
  },
  {
    "text": "We can go beyond\njust 1D, though. So when we do that, we\nend up with this thing that we call an interval box.",
    "start": "1695220",
    "end": "1702360"
  },
  {
    "text": "And to do that, we just\ntake the Cartesian product. So this here is the\nCartesian product",
    "start": "1702360",
    "end": "1707460"
  },
  {
    "text": "of a bunch of\none-dimensional intervals. And we represent that by same\nthing with these brackets here.",
    "start": "1707460",
    "end": "1714460"
  },
  {
    "text": "But x is now boldface\nbecause it's a vector. It's more than one-dimension.",
    "start": "1714460",
    "end": "1719940"
  },
  {
    "text": "So just to see what\nthat looks like, you can imagine we just\ntake two 1D intervals. So x1 and x2.",
    "start": "1719940",
    "end": "1725580"
  },
  {
    "text": "We just take their\nCartesian product, which just looks like a kind\nof rolling them out and looking at where they overlap.",
    "start": "1725580",
    "end": "1731680"
  },
  {
    "text": "So the Cartesian product of\nx1 and x2 is this bold x, this square here.",
    "start": "1731680",
    "end": "1738360"
  },
  {
    "text": "This might look familiar. Hopefully, it looks\nfamiliar to all of you. It's just the same thing\nas a hyperrectangle.",
    "start": "1738360",
    "end": "1743685"
  },
  {
    "text": "So when people talk\nabout interval arithmetic and intervals and stuff, they\noften call them interval boxes.",
    "start": "1743685",
    "end": "1748750"
  },
  {
    "text": "But it's the same thing. It's a hyperrectangle. It's like axis aligned-- this kind of axis aligned shape\naxis aligned polytope here.",
    "start": "1748750",
    "end": "1757549"
  },
  {
    "text": "OK. So that's intervals\nand interval boxes. And the idea here\nis that instead",
    "start": "1757550",
    "end": "1763600"
  },
  {
    "text": "of doing the simple arithmetic\noperations that you all learned in elementary\nschool on single points,",
    "start": "1763600",
    "end": "1769520"
  },
  {
    "text": "we're going to now extend them\nall to do them on intervals.",
    "start": "1769520",
    "end": "1774730"
  },
  {
    "text": "So let's, for example, add\ntwo intervals together. So here, we have\nthis interval x.",
    "start": "1774730",
    "end": "1781070"
  },
  {
    "text": "It goes between minus 1 and 1. We have this interval y. It goes between 2 and 4. And we need to define\nwhat it means to say",
    "start": "1781070",
    "end": "1787960"
  },
  {
    "text": "that we add two intervals. And to define that,\nwe're just going to say that the interval\nx plus the interval y",
    "start": "1787960",
    "end": "1793360"
  },
  {
    "text": "is going to be all points x plus\ny, where x came from x and y came from y. So this is very similar to what\nwe were doing with the Minkowski",
    "start": "1793360",
    "end": "1800320"
  },
  {
    "text": "sum. We just take all the\npoints in these two sets. And we say like the\nnew set is any sum that we could get from any\ncombination of those points.",
    "start": "1800320",
    "end": "1808482"
  },
  {
    "text": "So it looks very similar to what\nwe were doing with the Minkowski sum. We take two points in these\nintervals, add them together,",
    "start": "1808482",
    "end": "1814937"
  },
  {
    "text": "and we get different points that\nare in this kind of resulting interval. And if we could do that with all\ninfinite combinations of points,",
    "start": "1814937",
    "end": "1821960"
  },
  {
    "text": "then we would get the\ninterval x plus y. So we have a lower bound\nand an upper bound here.",
    "start": "1821960",
    "end": "1829050"
  },
  {
    "text": "And it turns out, we don't\nhave to do all infinite points just like before. And just by looking\nat this, can anyone",
    "start": "1829050",
    "end": "1834680"
  },
  {
    "text": "guess what the lower bound\nand the upper bound for this interval would be? ",
    "start": "1834680",
    "end": "1841610"
  },
  {
    "text": "Yeah. 1 to 5. Yeah. So basically, what\nwe did is we just add the lower bounds\nfor these two. That's kind of the lowest\nvalue that we're possibly",
    "start": "1841610",
    "end": "1848690"
  },
  {
    "text": "going to get. So we get one and we add\nthe upper bounds, 1 and 4. And we get 5 up here.",
    "start": "1848690",
    "end": "1854960"
  },
  {
    "text": "So nothing too\ncrazy going on here. But what's cool is that--",
    "start": "1854960",
    "end": "1860270"
  },
  {
    "text": "so we can write down like a\ngeneral form equation for this. So the interval x\nplus the interval y is just going to be the\nsum-- the lower bound",
    "start": "1860270",
    "end": "1867020"
  },
  {
    "text": "will be the sum of\ntheir lower bounds. And the upper bound will be\nthe sum of their upper bounds.",
    "start": "1867020",
    "end": "1873120"
  },
  {
    "text": "And this operation is known\nas the interval counterpart of addition. So that's what people call this.",
    "start": "1873120",
    "end": "1878513"
  },
  {
    "text": "So we have regular\naddition on single points. And then the\ninterval counterpart is this function here.",
    "start": "1878513",
    "end": "1887400"
  },
  {
    "text": "It turns out we can define\ninterval counterparts for all of the wonderful\narithmetic operations",
    "start": "1887400",
    "end": "1893610"
  },
  {
    "text": "that you know and love\nfrom elementary school. And so we could do it for\naddition, subtraction, multiplication, and division.",
    "start": "1893610",
    "end": "1900160"
  },
  {
    "text": "So this is just defining\nwhat that means, where this little dot\nhere, you can just replace with your favorite--\nof these operators.",
    "start": "1900160",
    "end": "1907539"
  },
  {
    "text": "So for example, if we\nwanted to do multiplication, then that would mean that the\ninterval x times the interval y",
    "start": "1907540",
    "end": "1913710"
  },
  {
    "text": "is all points x times y where x\ncame from x and y came from y. So again, just doing all of\nthese different combinations.",
    "start": "1913710",
    "end": "1921360"
  },
  {
    "text": "And so we can actually write out\nin closed form what all of this would look like. So for subtraction\nit's very similar.",
    "start": "1921360",
    "end": "1926740"
  },
  {
    "text": "But instead of adding\nthe two lower bounds, we subtract the upper bound\nof y from the lower bound of x",
    "start": "1926740",
    "end": "1932919"
  },
  {
    "text": "and do the opposite to\nget the upper bound.",
    "start": "1932920",
    "end": "1938140"
  },
  {
    "text": "For multiplication and division,\nit's like slightly less straightforward. You need to basically\ntest out all combinations",
    "start": "1938140",
    "end": "1943539"
  },
  {
    "text": "of the endpoints when you\nmultiply and divide them to see which one\nmakes them in the max. But that's really all\nthat's going on there.",
    "start": "1943540",
    "end": "1951039"
  },
  {
    "text": "So basically, what I want\nyou to take away here is like this is basically\nasking to be coded up.",
    "start": "1951040",
    "end": "1956398"
  },
  {
    "text": "You're sitting here\nlike oh, I'm just going to write all these\nwonderful functions that take all of our normal\nfunctions and just",
    "start": "1956398",
    "end": "1961900"
  },
  {
    "text": "operate on intervals instead. And so that's the idea.",
    "start": "1961900",
    "end": "1966940"
  },
  {
    "text": "And then it turns out, it's\nalso possible to define these interval counterparts\nfor other elementary functions.",
    "start": "1966940",
    "end": "1971960"
  },
  {
    "text": "So not just plus, minus,\nmultiply, and divide. We can take some other\nlike any arbitrary",
    "start": "1971960",
    "end": "1977530"
  },
  {
    "text": "function or elementary\nfunction input an interval. And then the\ninterval counterpart",
    "start": "1977530",
    "end": "1982899"
  },
  {
    "text": "is just the tightest\ninterval that fits all of the points\nwhen we apply the function f to points in the interval x.",
    "start": "1982900",
    "end": "1990490"
  },
  {
    "text": "Yeah. Can you go back one slide?  So you have the division there.",
    "start": "1990490",
    "end": "1997529"
  },
  {
    "text": "I feel like this cannot possibly\nbe if y is like from negative to positive, then somewhere in\nthe middle you divide almost",
    "start": "1997530",
    "end": "2004010"
  },
  {
    "text": "by 0, you get some\ninfinitely large value. You would divide by 0. So this is not defined. Or divide by-- if y contains\n0, this is not defined.",
    "start": "2004010",
    "end": "2011370"
  },
  {
    "text": "Sure. But also, y goes from\nnegative to positive. That would mean, it contains 0.",
    "start": "2011370",
    "end": "2016556"
  },
  {
    "text": "That's true. Yeah. That's true. Yes.",
    "start": "2016556",
    "end": "2022460"
  },
  {
    "text": "OK. So the interval counterpart\nis just all of the-- if we evaluated f\non all of the points",
    "start": "2022460",
    "end": "2028429"
  },
  {
    "text": "in x, what is kind of the\ntightest interval that would contain all of\nthose resulting points. So to see what that looks like\nlet's take this function x of x.",
    "start": "2028430",
    "end": "2037139"
  },
  {
    "text": "So it looks like this. And let's say that we\nwanted to evaluate it over this interval from 1 to 2.",
    "start": "2037140",
    "end": "2043380"
  },
  {
    "text": "So what we could\ndo is we could just take the function value at 1\nand the function value at 2.",
    "start": "2043380",
    "end": "2049449"
  },
  {
    "text": "And then the interval\nis just going to be all values between\nthose two function values. So this is the result if you\napply x to this interval x.",
    "start": "2049449",
    "end": "2058894"
  },
  {
    "text": " So this is basically\nthe interval. And you can see it contains all\npoints that the function outputs",
    "start": "2058894",
    "end": "2066810"
  },
  {
    "text": "within that range. And it's a tight interval. And in general, you\nmight be thinking,",
    "start": "2066810",
    "end": "2072219"
  },
  {
    "text": "OK, all I then really need\nto do for these monotonically increasing functions like\nx, and there's other ones",
    "start": "2072219",
    "end": "2078193"
  },
  {
    "text": "that we might be\ninterested in like log, square root, all\nwe need to do is take the evaluate the\nfunction at the lower",
    "start": "2078193",
    "end": "2084531"
  },
  {
    "text": "bound of the interval\nand evaluate the function at the upper bound. And that will give us\nthe interval counterpart for that function.",
    "start": "2084531",
    "end": "2090378"
  },
  {
    "text": " Yeah. I was just curious about this.",
    "start": "2090379",
    "end": "2097349"
  },
  {
    "text": "In the 1D, we have\nan exact bound. If we have multiple\ndimensions for x,",
    "start": "2097350",
    "end": "2102682"
  },
  {
    "text": "do we still have\nexact bounds or do we have some of\noverapproximation at this point?",
    "start": "2102682",
    "end": "2108170"
  },
  {
    "text": "We're only talking about\n1D functions right now. ",
    "start": "2108170",
    "end": "2115870"
  },
  {
    "text": "OK. So yeah. We can still define\ninterval counterparts for non-monotonically increasing\nor decreasing functions.",
    "start": "2115870",
    "end": "2123200"
  },
  {
    "text": "We just might have to\nconsider multiple cases. So for example,\nlet's say, we wanted to define the\ninterval counterpart",
    "start": "2123200",
    "end": "2128950"
  },
  {
    "text": "for the function x squared. Then if we, let's say, we\nwere going to evaluate it over this interval here.",
    "start": "2128950",
    "end": "2135260"
  },
  {
    "text": "And we had-- so it's\nlike minus 1.5 to 1, and we look at the\ntwo function values. If we just included everything\nbetween these two function",
    "start": "2135260",
    "end": "2142390"
  },
  {
    "text": "values, we'd be missing all\nof this stuff down here. So we just need to make sure\nthat we check for that case",
    "start": "2142390",
    "end": "2148160"
  },
  {
    "text": "when we evaluate\nthis function here. So basically, we say if\n0 is not in the interval,",
    "start": "2148160",
    "end": "2154010"
  },
  {
    "text": "so then that means we're on\nthis side or we're on this side, then we can just kind check\nthe endpoints of the interval",
    "start": "2154010",
    "end": "2159190"
  },
  {
    "text": "and figure out\nwhich one is bigger. But otherwise, if 0\nis in the interval,",
    "start": "2159190",
    "end": "2164820"
  },
  {
    "text": "then we are going to need to\ninclude this kind of minimum at 0 here. And then we're going to\nlook at these two points.",
    "start": "2164820",
    "end": "2171420"
  },
  {
    "text": "So we're in this case here. We're going to look at\nthese two endpoints, see which one's higher.",
    "start": "2171420",
    "end": "2176700"
  },
  {
    "text": "And then everything\nin the interval will be between 0\nand that endpoint.",
    "start": "2176700",
    "end": "2183130"
  },
  {
    "text": "OK. So I mean, it might\nseem kind of a lot to keep track of in your mind. But I just want you-- you can go back and\nstudy this later.",
    "start": "2183130",
    "end": "2189000"
  },
  {
    "text": "And I think you'll agree with\nme that this is the right thing to define this, even if you\ndon't see it immediately.",
    "start": "2189000",
    "end": "2194430"
  },
  {
    "text": "But I just want you to\nrealize that for most of these elementary functions\nlike square and sine and x and whatnot,\nwe can actually",
    "start": "2194430",
    "end": "2201920"
  },
  {
    "text": "go and implement, think about it\nand just write down this rule. And then we could\njust code it up and we can now pass\nintervals through functions.",
    "start": "2201920",
    "end": "2209280"
  },
  {
    "text": "So that's the idea I\nwant you to take away. So here's just an\nexample of a few of them. We did x, we did x squared.",
    "start": "2209280",
    "end": "2215400"
  },
  {
    "text": "Here's a similar\nidea for sine of x. We can do this for many\nelementary functions.",
    "start": "2215400",
    "end": "2220780"
  },
  {
    "text": "And no worries, you don't\nactually have to go sit down and code it up because someone's\nalready done that for you. And there's a package called\nIntervalArithmetic.jl in Julia",
    "start": "2220780",
    "end": "2229300"
  },
  {
    "text": "that's quite good. You can just take all the native\nJulia functions like sine and x. And you can go ahead and\npass intervals through them.",
    "start": "2229300",
    "end": "2235240"
  },
  {
    "text": "And it will keep track of\nall these things for you, which is pretty cool. ",
    "start": "2235240",
    "end": "2242000"
  },
  {
    "text": "OK. So we just talked\nabout passing intervals through a bunch of nonlinear\nfunctions and weird stuff here. But let's get back to\nwhat our goal is here.",
    "start": "2242000",
    "end": "2248920"
  },
  {
    "text": "So just like in the\nprevious lecture, we want to compute the\nreachable set at some depth d.",
    "start": "2248920",
    "end": "2255210"
  },
  {
    "text": "And we define that\nas all of the states at depth d that we could reach,\ngiven our rollout function,",
    "start": "2255210",
    "end": "2262390"
  },
  {
    "text": "if we start in some\ninitial state set and have these bounded\ndisturbance sets.",
    "start": "2262390",
    "end": "2268140"
  },
  {
    "text": "And so in the previous\nlecture, this reach function was really nice and linear. So we could just apply this\nlinear equation over and over",
    "start": "2268140",
    "end": "2275869"
  },
  {
    "text": "again. And we just keep\ngetting linear functions of our state and disturbances. And so we didn't have any issues\nlike passing sets through them.",
    "start": "2275870",
    "end": "2285819"
  },
  {
    "text": "But now like in many\nreal world systems, this function is\nactually nonlinear. And we can't just get away\nwith doing these linear set",
    "start": "2285820",
    "end": "2293110"
  },
  {
    "text": "operations.  So for example, the\ninverted pendulum",
    "start": "2293110",
    "end": "2298780"
  },
  {
    "text": "that we've been using so much\nthroughout this course, that's a nonlinear system. So these are actually\nwhat the equations",
    "start": "2298780",
    "end": "2303940"
  },
  {
    "text": "look like for the next\nstate for one-time step for the inverted pendulum. So theta is actually\na linear function.",
    "start": "2303940",
    "end": "2309770"
  },
  {
    "text": "But then to get\nthe next velocity, there's this sign in there. So that makes it nonlinear.",
    "start": "2309770",
    "end": "2316240"
  },
  {
    "text": "And then you can imagine,\nto do the reach function, we have to do a\nrollout up to depth d. So we're going to apply this\nequation over and over again.",
    "start": "2316240",
    "end": "2323007"
  },
  {
    "text": "So things are going\nto start getting multiplied by each other. So we don't just\nhave this one sign. We have many iterations\nof this sign, all kind",
    "start": "2323007",
    "end": "2329920"
  },
  {
    "text": "of getting multiplied together. So this function\nis kind of highly nonlinear after\na few time steps.",
    "start": "2329920",
    "end": "2338300"
  },
  {
    "text": "And this function is a\nlittle bit more complex than the elementary\nfunctions that we were using for interval arithmetic.",
    "start": "2338300",
    "end": "2345119"
  },
  {
    "text": "So in our interval arithmetic,\nwe just had one sign. We didn't have any addition\nwith that or anything like that.",
    "start": "2345120",
    "end": "2352255"
  },
  {
    "text": "We just had one sign or we\nhad two things added together. But this is like a\nwhole equation here. And so our interval arithmetic\ndoesn't kind of just directly",
    "start": "2352255",
    "end": "2359600"
  },
  {
    "text": "apply to these more\ncomplex functions. And instead, we need to use\nsomething called an inclusion",
    "start": "2359600",
    "end": "2365359"
  },
  {
    "text": "function.  And so yeah. Kind of the best we\ncan do is this thing",
    "start": "2365360",
    "end": "2370760"
  },
  {
    "text": "called an inclusion function. And what it is just\nan interval that's guaranteed to\ncontain the interval",
    "start": "2370760",
    "end": "2376940"
  },
  {
    "text": "from the interval counterpart. So basically, the idea is the\ninterval counterpart is exact. It's like the tightest\ninterval we can get",
    "start": "2376940",
    "end": "2383450"
  },
  {
    "text": "on the output of the function. But that's not always\npossible for us to compute as these\nfunctions get more complex.",
    "start": "2383450",
    "end": "2389158"
  },
  {
    "text": "So we can typically compute it\nfor those elementary functions like sine and x that\nI was showing earlier. But when we have combinations\nof those functions",
    "start": "2389158",
    "end": "2396450"
  },
  {
    "text": "or a bunch of them\nmultiplied together, we can't always just compute\nthat interval counterpart.",
    "start": "2396450",
    "end": "2401950"
  },
  {
    "text": "But what we can\ndo a lot of times is compute something called\nan inclusion function, which is just\nguaranteed to contain",
    "start": "2401950",
    "end": "2407970"
  },
  {
    "text": "the interval counterpart. So it's kind of\nthe same exact idea as an overapproximation\nwhere this is",
    "start": "2407970",
    "end": "2413280"
  },
  {
    "text": "the interval counterpart here. And we're just saying\nthis interval counterpart is guaranteed to be a subset\nof the inclusion function.",
    "start": "2413280",
    "end": "2419980"
  },
  {
    "text": "And we differentiate between\nan inclusion function and the interval counterpart\nby putting these brackets",
    "start": "2419980",
    "end": "2426810"
  },
  {
    "text": "around the f for the\ninclusion function. Sorry. Can you just say again\nwhy you can't directly",
    "start": "2426810",
    "end": "2432105"
  },
  {
    "text": "do [INAUDIBLE] interval. When you have these\nmore complex functions,",
    "start": "2432105",
    "end": "2438670"
  },
  {
    "text": "it's just not obvious how to\ndefine the interval counterpart for them. So when we are having\na monotone function",
    "start": "2438670",
    "end": "2444630"
  },
  {
    "text": "that we should be\nnot doing this, we should be just\nusing functions.",
    "start": "2444630",
    "end": "2450480"
  },
  {
    "text": "If you know that your\nfunction is monotonic, you should just\nuse the endpoints. I mean, you can define\nan interval counterpart.",
    "start": "2450480",
    "end": "2456430"
  },
  {
    "text": "It's just most of the\ntime, we can't do it.  Yeah.",
    "start": "2456430",
    "end": "2462040"
  },
  {
    "text": "Follow up on that question. So I understand\nthat our dynamics for the inverted\npendulum is more complex.",
    "start": "2462040",
    "end": "2467390"
  },
  {
    "text": "But it seems to be composed\nof these sub functions that we do know how to\ncompute intervals for.",
    "start": "2467390",
    "end": "2473510"
  },
  {
    "text": "So I'm wondering, why\ncan't we, I guess, compute those individual\nintervals, and then now we, for example, adding them,\nwe can do that as well?",
    "start": "2473510",
    "end": "2480590"
  },
  {
    "text": "So I still don't\nsee why we can't compute the exact interval. Yeah. Great question.",
    "start": "2480590",
    "end": "2485900"
  },
  {
    "text": "You can do that. That's actually the\nfirst thing we're going to talk about with\ninclusion functions. It turns out it doesn't give\nyou the interval counterpart",
    "start": "2485900",
    "end": "2491860"
  },
  {
    "text": "if you do that. Yeah. Which I find kind of not\nwhat I would have thought, but it's true.",
    "start": "2491860",
    "end": "2499060"
  },
  {
    "text": "OK. So let's keep going here. So again, this is the\ninterval counterpart. And then this is the\ninclusion function.",
    "start": "2499060",
    "end": "2505063"
  },
  {
    "text": "And a lot of times all\nwe're able to calculate is this inclusion function. And we're not able to actually\nfind the interval counterpart.",
    "start": "2505063",
    "end": "2511500"
  },
  {
    "text": "And just to look at\nthis visually, so let's say that this is an\ninterval counterpart. A lot of times we don't know it.",
    "start": "2511500",
    "end": "2516780"
  },
  {
    "text": "And then the inclusion\nfunction is just going to give us\nsome interval that's bigger than the\ninterval counterpart",
    "start": "2516780",
    "end": "2522000"
  },
  {
    "text": "or contains the\ninterval counterpart. So you can think of\nit just like what we were talking about\nbefore when we were talking",
    "start": "2522000",
    "end": "2528090"
  },
  {
    "text": "about over approximations. It gives us an over approximate\ninterval for the function.",
    "start": "2528090",
    "end": "2533135"
  },
  {
    "text": " So let's think about\nthis for a second in the context of reachability.",
    "start": "2533135",
    "end": "2539880"
  },
  {
    "text": "So for reachability, we want\nto basically pass intervals through this reach function\nto find an integral",
    "start": "2539880",
    "end": "2545550"
  },
  {
    "text": "over the state at depth d. And all I'm going to\ndo, for this chapter,",
    "start": "2545550",
    "end": "2550780"
  },
  {
    "text": "we just renamed\nthe reach function to be r because we didn't want\nto write reach a bunch of times. So all I did was\nrename this function.",
    "start": "2550780",
    "end": "2556563"
  },
  {
    "text": "Nothing else happened here. But then, what\nI'm going to do is I'm going to break\nthis function up into a set of\nfunctions that take in.",
    "start": "2556563",
    "end": "2565180"
  },
  {
    "text": "So right now, this is a\nmultivariate function. So it takes in s and x, which\nhave multiple dimensions.",
    "start": "2565180",
    "end": "2572660"
  },
  {
    "text": "And then it outputs\na state, which also might have\nmultiple dimensions because our states\nare typically-- could be two-dimensional\nor whatever.",
    "start": "2572660",
    "end": "2579820"
  },
  {
    "text": "And what we want for\nthese interval arithmetic or these inclusion functions\nthat we're generating is we want a function\nthat takes in--",
    "start": "2579820",
    "end": "2586490"
  },
  {
    "text": "it can take in states\nthat are multi-variable-- or sorry, not multi-variable,\nmulti-dimensional.",
    "start": "2586490",
    "end": "2593450"
  },
  {
    "text": "But we want it to output\na single variable. So all I'm doing is\njust rewriting this as a set of functions that\noutput a single variable.",
    "start": "2593450",
    "end": "2599390"
  },
  {
    "text": "So r1 will output the value\nof the first state variable",
    "start": "2599390",
    "end": "2604450"
  },
  {
    "text": "at time step d. And rn will output the value\nof the nth state variable",
    "start": "2604450",
    "end": "2609730"
  },
  {
    "text": "at time step d. So all I did was kind of\nbreak it up and stack them all on top of each other. And just to make that\nconcrete, what this would mean",
    "start": "2609730",
    "end": "2617299"
  },
  {
    "text": "is like the inverted pendulum\nhas two state variables. It has theta and omega, the\nangle and the angular velocity.",
    "start": "2617300",
    "end": "2623510"
  },
  {
    "text": "And so r1 is just\ngoing to output the value of theta at depth d. And r2 would just output the\nvalue of omega at depth d.",
    "start": "2623510",
    "end": "2631645"
  },
  {
    "text": "So that's all we did. We just break it up. But if we do it like this,\nthen what we could do",
    "start": "2631645",
    "end": "2637620"
  },
  {
    "text": "is define these kind\nof inclusion functions for each of those reachability\nfunctions, so for r1 through rn.",
    "start": "2637620",
    "end": "2646410"
  },
  {
    "text": "And that's going to get an\napproximate hyperrectangular reachable set\nbecause we're going",
    "start": "2646410",
    "end": "2651660"
  },
  {
    "text": "to get an integral over\nthe possible values for every single state variable. And then when we take the\nCartesian product of those,",
    "start": "2651660",
    "end": "2658320"
  },
  {
    "text": "we're going to get an interval\nbox or a hyperrectangle. And that will give us an\napproximate hyperrectangular",
    "start": "2658320",
    "end": "2664560"
  },
  {
    "text": "reachable set. What questions do\nyou have on that?",
    "start": "2664560",
    "end": "2670013"
  },
  {
    "text": "Oh, I think I have\none more thing. Yeah. So if you do have questions\nand you're too afraid to ask or don't even know what\nto ask, no worries.",
    "start": "2670013",
    "end": "2675580"
  },
  {
    "text": "The TLDR here is\njust like we're just trying to pass intervals\nthrough a system. So we're taking our\nrollout function,",
    "start": "2675580",
    "end": "2681110"
  },
  {
    "text": "instead of passing it a state in\na specific set of disturbances, we're passing an\nintegral over our state",
    "start": "2681110",
    "end": "2686217"
  },
  {
    "text": "and over our\ndisturbances, and trying to get an integral over\nthe states that come out. ",
    "start": "2686217",
    "end": "2693059"
  },
  {
    "text": "How do we get the initial\nintervals to put into r? You would define\nthem in the same way",
    "start": "2693060",
    "end": "2698970"
  },
  {
    "text": "that you define the initial\nset and the disturbances. So you might have to over\napproximate them into intervals.",
    "start": "2698970",
    "end": "2705299"
  },
  {
    "text": "Sorry if you said this, I\nmay have just missed it. How did you get the\nincluded functions for r?",
    "start": "2705300",
    "end": "2711402"
  },
  {
    "text": "Oh, we're going to\ntalk about that. Yeah. So this is just assuming if\nyou could find these inclusion functions, this\nwould give us an over",
    "start": "2711402",
    "end": "2718488"
  },
  {
    "text": "approximate hyperrectangular\nreachable set. And we're going to\nspend pretty much the rest of the lecture talking\nabout how to actually find them.",
    "start": "2718488",
    "end": "2723910"
  },
  {
    "text": "OK. That makes sense. Yeah. ",
    "start": "2723910",
    "end": "2730109"
  },
  {
    "text": "So I guess, since this\nis a nonlinear system,",
    "start": "2730110",
    "end": "2735460"
  },
  {
    "text": "we're using these intervals\nnow to define this. So then are the\nonly shapes that we can get from this as we go\ninto these larger dimensions,",
    "start": "2735460",
    "end": "2744890"
  },
  {
    "text": "can they only be of the shape\nof a rectangle form now? You don't have all\nthese different--",
    "start": "2744890",
    "end": "2751942"
  },
  {
    "text": " Yes. Types? Yeah, that's exactly right.",
    "start": "2751942",
    "end": "2757340"
  },
  {
    "text": "We can only get\nhyperrectangles out. So there's no way to\noptimize that further?",
    "start": "2757340",
    "end": "2764493"
  },
  {
    "text": "I guess, this is always going\nto be of that kind of shape. It's always going to be\nof that kind of shape. So that's kind of one drawback\nof this interval thing.",
    "start": "2764493",
    "end": "2770660"
  },
  {
    "text": "So we have to make\nsome sacrifices when we go to this non-linear world. And so one thing\nwe could do is say we're going to do\neverything intervals.",
    "start": "2770660",
    "end": "2776600"
  },
  {
    "text": "And we're going to accept\nthe fact that everything is going to be a rectangle. And of course, if our reachable\nset isn't hyperrectangular,",
    "start": "2776600",
    "end": "2782420"
  },
  {
    "text": "if it looks something\nlike that, and we have to bound it with our\nrectangle, it's kind of a bummer because we're getting all this\nextra like over approximation",
    "start": "2782420",
    "end": "2789307"
  },
  {
    "text": "error, but we're just going\nto have to accept that. Because similar to the\nprevious slide, one of the examples with PCA,\nprincipal component analysis,",
    "start": "2789307",
    "end": "2797150"
  },
  {
    "text": "can you do that,\nbut in this case? Not using interval--\nyou might be",
    "start": "2797150",
    "end": "2805460"
  },
  {
    "text": "able to do interval arithmetic\non a transformed version of the system and do that.",
    "start": "2805460",
    "end": "2810780"
  },
  {
    "text": "But yeah, not super\nstraightforward how to do it. Yeah. OK.",
    "start": "2810780",
    "end": "2815880"
  },
  {
    "text": "So let's talk about how to\nget these inclusion functions. So there's a few different ways.",
    "start": "2815880",
    "end": "2822150"
  },
  {
    "text": "And we're going to\ngo through them. The first one is the\nnatural inclusion function, which is basically what\nyou already suggested.",
    "start": "2822150",
    "end": "2828000"
  },
  {
    "text": "So let's look at an\nexample of what this is. So let's say we\nhave some function now that's x minus sine of x.",
    "start": "2828000",
    "end": "2835130"
  },
  {
    "text": "So this is not just one\nelementary function. We define an\ninterval counterpart for this and an interval\ncounterpart for subtraction.",
    "start": "2835130",
    "end": "2842940"
  },
  {
    "text": "But we don't have one for\nall of x minus sine of x. But you might say,\nwell, OK, let's",
    "start": "2842940",
    "end": "2848150"
  },
  {
    "text": "just plug-in the interval\ncounterpart, which is kind of what you\nwere suggesting there. And if you do that, you\nget something called",
    "start": "2848150",
    "end": "2853803"
  },
  {
    "text": "the natural inclusion function. So all you do is you plug-in the\ninterval for x in all of these.",
    "start": "2853803",
    "end": "2860150"
  },
  {
    "text": "We know how to do a sign\nof an interval that was in our interval counterpart. We know that we know how to do--",
    "start": "2860150",
    "end": "2868861"
  },
  {
    "text": "or we know how to do subtraction\nthen between two intervals after we evaluate that. And so we know how to\nevaluate this function.",
    "start": "2868862",
    "end": "2874810"
  },
  {
    "text": "And it's called the\nnatural inclusion function. But let me show you-- so the gist there\nis that you just",
    "start": "2874810",
    "end": "2881609"
  },
  {
    "text": "replace every elementary\nfunction in this function with its interval counterpart.",
    "start": "2881610",
    "end": "2887280"
  },
  {
    "text": "But it turns out, maybe somewhat\nsurprisingly, if you do this, you actually get kind of a huge\namount of overapproximation.",
    "start": "2887280",
    "end": "2893349"
  },
  {
    "text": "So what we did here is\nwe have this function and we input the interval\nbetween minus 1 and 1.",
    "start": "2893350",
    "end": "2900090"
  },
  {
    "text": "And then this is the\ninterval that we got out. So we said, we're guaranteed\nthat the function values",
    "start": "2900090",
    "end": "2906300"
  },
  {
    "text": "between negative 1 and 1 will\nend up in this purple space. But really, if we look at-- so again, if we knew\nthis was monotonic,",
    "start": "2906300",
    "end": "2912773"
  },
  {
    "text": "we could just take\nthese endpoints and we'd know the\nactual interval. But we're saying, we\nmaybe don't know that.",
    "start": "2912773",
    "end": "2918000"
  },
  {
    "text": "So the actual interval\nfor the function values that we'd get between minus\n1 and 1 is much smaller.",
    "start": "2918000",
    "end": "2924590"
  },
  {
    "text": "It's like this space\nin the middle here. And so all of this stuff\nthat we got out here",
    "start": "2924590",
    "end": "2929650"
  },
  {
    "text": "is overapproximation. So it might not be super obvious\nthat that's what happens. But it turns out, when you use\nthe natural inclusion function,",
    "start": "2929650",
    "end": "2936650"
  },
  {
    "text": "it tends to be\noverly conservative. And the reason for\nthis is something called the dependency effect.",
    "start": "2936650",
    "end": "2943540"
  },
  {
    "text": "If you want to know\na lot about it, I would recommend checking\nout example 8.2 in the book.",
    "start": "2943540",
    "end": "2949900"
  },
  {
    "text": "But the kind of gist of the\nidea, I think it takes some time to digest, which is why\nI'm not going through it super detailed in lecture.",
    "start": "2949900",
    "end": "2955933"
  },
  {
    "text": "You can check out this example. But the idea is like when we\nplug x into this function, we're always plugging\nthe same value in for x",
    "start": "2955933",
    "end": "2962770"
  },
  {
    "text": "in both of these spots. But when we switch\nout to intervals now,",
    "start": "2962770",
    "end": "2968080"
  },
  {
    "text": "we're kind of saying that\nanything in this interval could get subtracted\nwith the sign of anything",
    "start": "2968080",
    "end": "2974230"
  },
  {
    "text": "else in the interval. So they're not always\nlike the same value. That's the idea behind\nthe dependency effect.",
    "start": "2974230",
    "end": "2981170"
  },
  {
    "text": "If you want to\nknow more about it, though, I would\ndefinitely recommend checking out that example. If you don't want to\nknow more about it,",
    "start": "2981170",
    "end": "2986190"
  },
  {
    "text": "you can just be like, OK,\nnatural inclusion functions are bad and move on with your life. That's also fine.",
    "start": "2986190",
    "end": "2991850"
  },
  {
    "text": "OK. So this is how we implement\nthe natural inclusion function.",
    "start": "2991850",
    "end": "2997130"
  },
  {
    "text": "So this part here is\njust implementing that r. So we're taking a\nrollout of our system",
    "start": "2997130",
    "end": "3002769"
  },
  {
    "text": "and grabbing the last\nstate at depth d. And then we just go\nthrough every single step",
    "start": "3002770",
    "end": "3010750"
  },
  {
    "text": "that we want to\ncompute it for, get the intervals for\nthe initial state and the disturbances\nfor that point.",
    "start": "3010750",
    "end": "3016520"
  },
  {
    "text": "And then just pass those\nintervals through our rollout. And so yeah. What's super cool\nis like in Julia,",
    "start": "3016520",
    "end": "3022880"
  },
  {
    "text": "we can just pass\nall these intervals through our rollout code. No problem. Everything works.",
    "start": "3022880",
    "end": "3028130"
  },
  {
    "text": "Here's another ad for Julia OK. So let's see this in action.",
    "start": "3028130",
    "end": "3033630"
  },
  {
    "text": " So here's our inverted\npendulum system.",
    "start": "3033630",
    "end": "3038730"
  },
  {
    "text": "We're going to start in this\nkind set of initial states where we have some bound on what\nthetas we could start out with",
    "start": "3038730",
    "end": "3045320"
  },
  {
    "text": "and some bound on\nthe initial velocity. So here's the first time step. Let's go to the\nsecond time step.",
    "start": "3045320",
    "end": "3050790"
  },
  {
    "text": "So now it's actually\nalready off the thing. I told you natural inclusion\nfunction is not so great.",
    "start": "3050790",
    "end": "3056059"
  },
  {
    "text": "And so these samples,\nagain, we don't know exactly what\nthe reachable set is, but it's probably shaped\nsomething like these samples",
    "start": "3056060",
    "end": "3061698"
  },
  {
    "text": "that we got here. And so we're way over\nbounding this reachable set.",
    "start": "3061698",
    "end": "3066950"
  },
  {
    "text": "And if we go further, yeah,\nwe're kind of done now. So now we have to conclude--\nwell, inconclusive.",
    "start": "3066950",
    "end": "3074070"
  },
  {
    "text": "We don't know if it's safe\nor not because this is over approximate. Based on our samples,\nit looks like it's safe.",
    "start": "3074070",
    "end": "3079589"
  },
  {
    "text": "But we can't say that for sure. And we've kind of\nlost all ability",
    "start": "3079590",
    "end": "3085310"
  },
  {
    "text": "to draw conclusions\nfrom our analysis now. So yeah, there's the\nnatural inclusion function.",
    "start": "3085310",
    "end": "3092630"
  },
  {
    "text": "So I know that all\nof you are probably wondering now, wow, there\nmust be a way to do better. Of course, there is.",
    "start": "3092630",
    "end": "3098150"
  },
  {
    "text": "We wouldn't just stop there. OK. So yes. Can we do better than this?",
    "start": "3098150",
    "end": "3103520"
  },
  {
    "text": "Yup. Just got to bring back\na theorem from calculus. And that theorem is specifically\nthe mean value theorem.",
    "start": "3103520",
    "end": "3109588"
  },
  {
    "text": "I don't know about\nyou guys, but when I learned this in high\nschool, I was just like, why on Earth does\nthis theorem exist?",
    "start": "3109588",
    "end": "3115630"
  },
  {
    "text": "I'm never, ever going\nto use this in my life. And then I sat down to write\nthis textbook and here it is.",
    "start": "3115630",
    "end": "3121400"
  },
  {
    "text": "So all of you can go back and\nthank your calculus teachers now and just be like, I'm sorry,\nthat wasn't pointless.",
    "start": "3121400",
    "end": "3127910"
  },
  {
    "text": "I didn't know any better. So here's the mean\nvalue theorem, in case you've forgotten\nit over the years.",
    "start": "3127910",
    "end": "3133400"
  },
  {
    "text": "So for a function that is\ncontinuously differentiable, that part is important. You need to make sure\nyour rollouts are always",
    "start": "3133400",
    "end": "3139337"
  },
  {
    "text": "continuously differentiable\nif you want to do this. On this interval over\nx, there exists a point",
    "start": "3139337",
    "end": "3145990"
  },
  {
    "text": "in that interval such\nthat this fact is true. And what this fact is\nsaying is the slope",
    "start": "3145990",
    "end": "3151359"
  },
  {
    "text": "of the secant line between\nthe endpoints of the function on that interval is equal to\nthe slope of the tangent line",
    "start": "3151360",
    "end": "3158990"
  },
  {
    "text": "somewhere in that interval. So I think it's easier to\nvisualize what this theorem is.",
    "start": "3158990",
    "end": "3165260"
  },
  {
    "text": "So we have this kind of lower\nbound on x and upper bound on x. This is our interval\nthat we're interested in.",
    "start": "3165260",
    "end": "3171570"
  },
  {
    "text": "Here's our function. And basically, we\ncan look at what are the function values for\nthe endpoints of the interval.",
    "start": "3171570",
    "end": "3180350"
  },
  {
    "text": "And then this part here\nis the secant line. So we take the difference\nbetween these function values",
    "start": "3180350",
    "end": "3186080"
  },
  {
    "text": "divided by the difference here. So that's this slope here. And then we know that at some\npoint inside of this interval",
    "start": "3186080",
    "end": "3194750"
  },
  {
    "text": "there must exist a point where\nthe slope of the tangent line at that point is equal to\nthis slope of the secant line.",
    "start": "3194750",
    "end": "3204660"
  },
  {
    "text": "So yeah. I mean, I don't know. I learned this in calculus\nand I was like, OK, cool. I don't know.",
    "start": "3204660",
    "end": "3210300"
  },
  {
    "text": "I thought this was quite silly,\nbut we're going to use it now. And I don't know. I found this online the\nother day, so here you go.",
    "start": "3210300",
    "end": "3217242"
  },
  {
    "text": "If you're forgetting, if\nyou have trouble remembering the mean value theorem, you\ncan draw some eyes on it. And if you flip it upside down,\neverything is still valid.",
    "start": "3217242",
    "end": "3224380"
  },
  {
    "text": "But I guess now, you could\ncall it the nice value theorem, if you please. ",
    "start": "3224380",
    "end": "3230904"
  },
  {
    "text": "So that's the mean\nvalue theorem. Now I'm going to make\nsome extension to it.",
    "start": "3230905",
    "end": "3236080"
  },
  {
    "text": "And this is going to seem a\nlittle bit weird at first. It's going to seem like\nit's going nowhere. But I promise it\nis going somewhere.",
    "start": "3236080",
    "end": "3242310"
  },
  {
    "text": "And yeah, just bear with me. So we're going to now take the\ncenter point of this interval.",
    "start": "3242310",
    "end": "3248100"
  },
  {
    "text": "And we're going to pick some\nvalue x in the interval. So we can pick any value x. We're going to pick this one.",
    "start": "3248100",
    "end": "3254078"
  },
  {
    "text": "And now we're going to\napply the mean value theorem to the interval\nbetween x and c. So we're going to say, OK,\nlet's connect these two,",
    "start": "3254078",
    "end": "3260700"
  },
  {
    "text": "get the secant line. And then somewhere\nin here, there must be a point where the\nslope of the tangent line",
    "start": "3260700",
    "end": "3266039"
  },
  {
    "text": "is equal to the slope\nof the secant line. And we'll call that\npoint x prime again.",
    "start": "3266040",
    "end": "3273280"
  },
  {
    "text": "And so x prime,\nwe now know where this thing happens is in the\ninterval between x and c.",
    "start": "3273280",
    "end": "3280652"
  },
  {
    "text": "And now I'm going to\ndo something weird. And I'm going to be like\nx prime then is also in the interval of\nthe original interval",
    "start": "3280653",
    "end": "3288430"
  },
  {
    "text": "over x we had, so the lower\nbound and the upper bound. So this is silly. We just said like we took\nthis smaller interval.",
    "start": "3288430",
    "end": "3295069"
  },
  {
    "text": "And we're like we know it's\nin the smaller interval. And all I'm saying is like yep. And we also know that it's then\nin the larger interval that",
    "start": "3295070",
    "end": "3300670"
  },
  {
    "text": "contained it, which is going\nto be useful in a second. So now we can say that this\nmean value theorem implies",
    "start": "3300670",
    "end": "3307539"
  },
  {
    "text": "that if we take the center\npoint of the interval, then there exists some other\npoint in that interval.",
    "start": "3307540",
    "end": "3313130"
  },
  {
    "text": "So again, x prime is in\nthis bigger interval, we actually even know\nit's in this smaller one,",
    "start": "3313130",
    "end": "3318460"
  },
  {
    "text": "such that this is true. So this is just saying the\nslope of the secant line is equal to the slope of\nthe tangent line in there.",
    "start": "3318460",
    "end": "3324280"
  },
  {
    "text": "And we can do that for\nany x in this interval. So I could move this x. So for example, I could\nmove this x over here.",
    "start": "3324280",
    "end": "3330490"
  },
  {
    "text": "And this fact will\nstill be true. So it seems kind of weird. I haven't gotten to the point\nof why you would do this.",
    "start": "3330490",
    "end": "3337557"
  },
  {
    "text": "But if you agree with me\nthat all of this is true, we can go to the next part.",
    "start": "3337557",
    "end": "3342630"
  },
  {
    "text": "So are there any questions\non how we got there? Yeah. ",
    "start": "3342630",
    "end": "3348720"
  },
  {
    "text": "I think it's true even at\nthe very boundary points. Yeah. ",
    "start": "3348720",
    "end": "3357740"
  },
  {
    "text": "Because yeah, I guess, you could\njust imagine we take this x and put it over\nhere, we're still going to have a value\nthat's in between these two,",
    "start": "3357740",
    "end": "3364380"
  },
  {
    "text": "where that happens. That sounds to me\nlike [INAUDIBLE].",
    "start": "3364380",
    "end": "3371453"
  },
  {
    "text": "Whereas then we're\ngoing to create a new interval between\nthe center point and just some value x that's\nlike within the interval.",
    "start": "3371453",
    "end": "3377970"
  },
  {
    "text": "And then the point where this\nsecant line thing happens is always going to be\nin the bigger interval.",
    "start": "3377970",
    "end": "3384395"
  },
  {
    "text": " So then we can take this.",
    "start": "3384395",
    "end": "3389650"
  },
  {
    "text": "And all I'm going to do is take\nthis thing that we know happens and just rearrange it. So all I did was multiply\nboth sides by x minus c,",
    "start": "3389650",
    "end": "3396540"
  },
  {
    "text": "and then added the f of\nc over to the other side. And then here comes\nthe cool part.",
    "start": "3396540",
    "end": "3402070"
  },
  {
    "text": "So this is now, we\nknow now our function f of x is equal to this at\nsome point in the interval.",
    "start": "3402070",
    "end": "3410609"
  },
  {
    "text": "And so what we can\ndo is we can just create now the natural inclusion\nfunction for this function.",
    "start": "3410610",
    "end": "3416140"
  },
  {
    "text": "And we get a natural\ninclusion function. Or in this case now, we're\ngoing to call it a mean value inclusion function for f.",
    "start": "3416140",
    "end": "3422859"
  },
  {
    "text": "So all I did was take f of\nc is just f of a number. It's the function evaluated\nat the center of the interval.",
    "start": "3422860",
    "end": "3428859"
  },
  {
    "text": "We don't need to\ndo anything there. Here, we replace this x with\nthe interval version of it.",
    "start": "3428860",
    "end": "3434859"
  },
  {
    "text": "And then we also know that x\nprime is in the interval x. So we can also replace x\nprime with this interval.",
    "start": "3434860",
    "end": "3443380"
  },
  {
    "text": "That's kind of the key insight. That's why we did\nall of this stuff. And then if we just grab the\nnatural inclusion function",
    "start": "3443380",
    "end": "3449620"
  },
  {
    "text": "for this f prime, so\nnatural inclusion function for the derivative of f of x,\nthen we know that all of this",
    "start": "3449620",
    "end": "3457120"
  },
  {
    "text": "holds true.  So we're going to call this the\nmean value inclusion function.",
    "start": "3457120",
    "end": "3464360"
  },
  {
    "text": "And we can generalize this\nto more than one dimension. All we do is replace\neverything with vectors. And then we replace our\nderivative with the gradient.",
    "start": "3464360",
    "end": "3472320"
  },
  {
    "start": "3472320",
    "end": "3480490"
  },
  {
    "text": "Can you just go back\none the last slide? Yeah. ",
    "start": "3480490",
    "end": "3490780"
  },
  {
    "text": "OK. So I'm going to actually\ndo a kind of worked out example of applying\nthe natural inclusion function versus the mean\nvalue inclusion function",
    "start": "3490780",
    "end": "3498430"
  },
  {
    "text": "in order to make this a\nlittle bit more concrete. So let's try to do this here.",
    "start": "3498430",
    "end": "3505883"
  },
  {
    "text": "Nope. ",
    "start": "3505883",
    "end": "3513150"
  },
  {
    "text": "So we're going to try to\nevaluate the natural inclusion function of this function\nover this interval.",
    "start": "3513150",
    "end": "3520049"
  },
  {
    "text": "So the natural\ninclusion function means that we just\nreplace everything",
    "start": "3520050",
    "end": "3529520"
  },
  {
    "text": "with their interval\ncounterparts. So we're going to do this. ",
    "start": "3529520",
    "end": "3536473"
  },
  {
    "text": "And so then we're just going\nto plug-in the interval minus 1 to 1 for this. ",
    "start": "3536473",
    "end": "3543500"
  },
  {
    "text": "And I don't expect you to be\nable to do this in your head, obviously. But if you apply sine, the\ninterval counterpart of sine",
    "start": "3543500",
    "end": "3551180"
  },
  {
    "text": "to this interval, you end up\ngetting minus 0.84 to 0.84.",
    "start": "3551180",
    "end": "3558230"
  },
  {
    "text": "And then if you apply the\ninterval a counterpart of minus, now, it's going to\nbe weird because it",
    "start": "3558230",
    "end": "3563790"
  },
  {
    "text": "looks like an equal sign. But if you play the interval\ncounterpart of minus to both of these, you end up\ntaking this and subtracting 0.84",
    "start": "3563790",
    "end": "3571610"
  },
  {
    "text": "from it. So you get minus 1.84 to 1.84.",
    "start": "3571610",
    "end": "3578580"
  },
  {
    "text": "And that is our final\nguess for the interval that bounds this function for\nthe natural inclusion function.",
    "start": "3578580",
    "end": "3587260"
  },
  {
    "text": "OK. Let's try to do it now for the\nmean value inclusion function. So we need the center\nof our interval.",
    "start": "3587260",
    "end": "3593950"
  },
  {
    "text": "So that's going to be 0 because\nwe're going minus 1 to 1. And then we know for the mean\nvalue inclusion function,",
    "start": "3593950",
    "end": "3602430"
  },
  {
    "text": "we're going to say that it's\nequal to f of c plus f of x.",
    "start": "3602430",
    "end": "3616780"
  },
  {
    "text": "Sorry. This should be the gradient. And then on this\ninterval x minus c.",
    "start": "3616780",
    "end": "3627980"
  },
  {
    "text": "So let's start\nplugging stuff in. So we've got f of 0 because\nc is 0 plus, and then the gradient of\nx minus sine of x",
    "start": "3627980",
    "end": "3636470"
  },
  {
    "text": "is going to be 1\nminus cosine of x. So we're going to do cosine\nof this interval here",
    "start": "3636470",
    "end": "3645140"
  },
  {
    "text": "times x minus, and then c was 0. Again, f of 0 turns\nout to also be 0",
    "start": "3645140",
    "end": "3653070"
  },
  {
    "text": "if we plug that into\nthe function up here. So then we have 0 plus 1 minus--",
    "start": "3653070",
    "end": "3659930"
  },
  {
    "text": "and if we do the interval\ncounterpart for cosine we get 0.54 to 1.",
    "start": "3659930",
    "end": "3668060"
  },
  {
    "text": "And then this is like\nwe're just subtracting 0.",
    "start": "3668060",
    "end": "3673320"
  },
  {
    "text": "So we get the same exact\nthing that we had before. OK. And so then if we keep plugging\nalong, we end up getting--",
    "start": "3673320",
    "end": "3680340"
  },
  {
    "start": "3680340",
    "end": "3686310"
  },
  {
    "text": "do the interval counterpart\nfor multiplication, and we get minus 0.44, 0.44.",
    "start": "3686310",
    "end": "3694710"
  },
  {
    "text": "OK. And so I recommend maybe kind of\ngoing back through more slowly",
    "start": "3694710",
    "end": "3699839"
  },
  {
    "text": "at your own pace and\ntrying to do this yourself. And I'll probably\nmake some exercises that drive this home too.",
    "start": "3699840",
    "end": "3704903"
  },
  {
    "text": "But what I want\nto get across here is we're now doing much better. We got a much\ntighter interval when",
    "start": "3704903",
    "end": "3711030"
  },
  {
    "text": "we did the mean value inclusion\nfunction than when we did the natural inclusion function.",
    "start": "3711030",
    "end": "3717119"
  },
  {
    "text": "So that's pretty cool. Yeah. Can you [INAUDIBLE] It's pretty much the\ndependency effect.",
    "start": "3717120",
    "end": "3723460"
  },
  {
    "text": "So if you rewrite it-- we're\ngoing to talk in a second compare this to first\norder approximation.",
    "start": "3723460",
    "end": "3729880"
  },
  {
    "text": "But if you look at this now\nlike this is a first order approximation of the\nfunction, and it actually then kind of undoes the\ndependency effect in a way.",
    "start": "3729880",
    "end": "3739210"
  },
  {
    "text": "Why is it that [INAUDIBLE]",
    "start": "3739210",
    "end": "3749493"
  },
  {
    "text": "I think it's because\nit makes it linear. But I need to think about\nthat because you can--",
    "start": "3749493",
    "end": "3755160"
  },
  {
    "text": "Looks like two linear\nfunctions [INAUDIBLE] But you can always\nsimplify linear functions",
    "start": "3755160",
    "end": "3761110"
  },
  {
    "text": "to get rid of the\ndependency effect, which is kind of interesting. That's what we talk about\nin that example 8.2. So you can check that out.",
    "start": "3761110",
    "end": "3768400"
  },
  {
    "text": "Yeah. Yeah. I don't know. I never had a super\ngreat intuition for this, to be honest, but yeah.",
    "start": "3768400",
    "end": "3775930"
  },
  {
    "text": "Yeah. So you said this also works for\nhigher dimensional functions, right?",
    "start": "3775930",
    "end": "3781510"
  },
  {
    "text": "Yeah. I'm just trying to\nthink before, we were in higher dimension\nconstrained by always getting",
    "start": "3781510",
    "end": "3787030"
  },
  {
    "text": "boxes because we just\ntake the interval at first d, an interval in\nsecond d kind of [INAUDIBLE].",
    "start": "3787030",
    "end": "3792380"
  },
  {
    "text": "Does this help us get rid of\nthis kind of square shape or no? No. So if you remember, we split\nthe ridge function into one.",
    "start": "3792380",
    "end": "3800400"
  },
  {
    "text": "So every function will output\na one-dimensional interval. So then we're\ngoing to still have to take the Cartesian\nproduct of all",
    "start": "3800400",
    "end": "3806090"
  },
  {
    "text": "of those one-dimensional\nintervals [INAUDIBLE]. Yeah. We are going to get to a point\nin this lecture, possibly not today, where we talk\nabout ways to not have to deal",
    "start": "3806090",
    "end": "3813043"
  },
  {
    "text": "with-- not have to\ndeal hyperrectangles. But for now-- OK.",
    "start": "3813043",
    "end": "3818882"
  },
  {
    "text": "So yeah. Again, you can check\nthis out, go through it",
    "start": "3818882",
    "end": "3824390"
  },
  {
    "text": "a little more slowly,\nhopefully, on your own time. But just to verify\nwhat we just did,",
    "start": "3824390",
    "end": "3831682"
  },
  {
    "text": "here's, graphically,\nwhat this looks like. So this is all the\nmath that we just did. If you remember we got\nlike minus 1.84 to 1.84.",
    "start": "3831682",
    "end": "3838527"
  },
  {
    "text": "So that's what this looks like. And we saw this before. Our natural inclusion\nfunction doesn't look so good. Our mean value\ninclusion function",
    "start": "3838528",
    "end": "3844910"
  },
  {
    "text": "looks much better,\nwhich is pretty cool. ",
    "start": "3844910",
    "end": "3850684"
  },
  {
    "text": "But it is possible to\nactually do even better. So this was called the mean\nvalue inclusion function.",
    "start": "3850685",
    "end": "3858790"
  },
  {
    "text": "And I already kind\nof gave it away. Does this function remind\nyou of another topic that you learned\nabout in calculus?",
    "start": "3858790",
    "end": "3867990"
  },
  {
    "text": "Yeah. Taylor series. Yeah. Taylor series. This is actually just\na first order Taylor series, or in other words,\nlike a linear approximation",
    "start": "3867990",
    "end": "3875130"
  },
  {
    "text": "of the function. But we don't have to just stick\nto first order Taylor series. And there's actually,\nit turns out,",
    "start": "3875130",
    "end": "3881128"
  },
  {
    "text": "a way to generalize this\nto something that we call Taylor inclusion functions.",
    "start": "3881128",
    "end": "3886650"
  },
  {
    "text": "And for that, we just use n\nterms of the Taylor series to do this.",
    "start": "3886650",
    "end": "3891813"
  },
  {
    "text": "So I didn't prove\nthat this works. I just proved it\nfor this first case. But hopefully, in your\nmind, you could believe me",
    "start": "3891813",
    "end": "3897780"
  },
  {
    "text": "that it's OK to just extend\nit to more terms of the Taylor series. ",
    "start": "3897780",
    "end": "3904305"
  },
  {
    "text": "And then it turns out that a 0\norder Taylor inclusion function, we're just going to\nhave this first term, and we're going to end up\njust passing the interval",
    "start": "3904305",
    "end": "3911285"
  },
  {
    "text": "through the first term instead. And that becomes the\nnatural inclusion function. And then a first order Taylor\ninclusion function is the same",
    "start": "3911285",
    "end": "3919240"
  },
  {
    "text": "as the mean value\ninclusion function because we're just going to\nhave these first two terms.",
    "start": "3919240",
    "end": "3925369"
  },
  {
    "text": "So this is just a\nmore general case of the first thing, two\nthings that I just showed you.",
    "start": "3925370",
    "end": "3931150"
  },
  {
    "text": "So it turns out it really\ndoes make a difference, which is pretty cool. So we can go beyond the\nnatural inclusion function",
    "start": "3931150",
    "end": "3937060"
  },
  {
    "text": "in this first order, which\nis the mean value inclusion function. Second order doesn't\nactually help that much it seems for this case.",
    "start": "3937060",
    "end": "3942753"
  },
  {
    "text": "But third order, we got\na very tight interval, which is pretty cool. Yeah. Does this [INAUDIBLE] for\nthis general function?",
    "start": "3942753",
    "end": "3949240"
  },
  {
    "text": "So I have reason\nto think that it would work well here just\nbecause the derivative of that is very flat.",
    "start": "3949240",
    "end": "3955780"
  },
  {
    "text": "Yeah. And you can see that [INAUDIBLE]\ntaking that interval. So in general, do we still\nhave this [INAUDIBLE]?",
    "start": "3955780",
    "end": "3963410"
  },
  {
    "text": "Yeah. That's a great question. And actually, this\nfigure shows a little bit what you're asking because--",
    "start": "3963410",
    "end": "3969140"
  },
  {
    "text": "so this first order\napproximation, when we do Taylor series,\na first order approximation is a linear approximation\nof the function.",
    "start": "3969140",
    "end": "3975359"
  },
  {
    "text": "So the more linear\nthe function is, the better this\napproximation is going to be. And so you can see we get a\nmuch better result in this case.",
    "start": "3975360",
    "end": "3982980"
  },
  {
    "text": "So these are the same case\nexcept I evaluate over a slightly bigger interval. So this interval in\nhere, it's pretty linear.",
    "start": "3982980",
    "end": "3989940"
  },
  {
    "text": "It's kind of almost a line. But if we expand\nthis interval out now such that it contains\nmore of this kind of nonlinear",
    "start": "3989940",
    "end": "3997400"
  },
  {
    "text": "part of the function, this\ndoesn't actually work. The first order\ndoesn't work as well. So it really depends\non how well your Taylor",
    "start": "3997400",
    "end": "4004150"
  },
  {
    "text": "model fits inside of that\ninterval fits the function. But we still see a\nnice trend, though,",
    "start": "4004150",
    "end": "4010870"
  },
  {
    "text": "as we increase the interval. Yeah. I mean, here, it didn't\nmake a huge difference",
    "start": "4010870",
    "end": "4016383"
  },
  {
    "text": "to go to second order. So you don't always know how\nmuch is going to help, but yeah.",
    "start": "4016383",
    "end": "4021790"
  },
  {
    "text": "OK. So here's the code for the\nTaylor inclusion function.",
    "start": "4021790",
    "end": "4028640"
  },
  {
    "text": "And I'm not going to\nreally go through this code super in detail. But just to point\nout like here, this",
    "start": "4028640",
    "end": "4035600"
  },
  {
    "text": "is basically the mean\nvalue inclusion function. So we actually only implemented\nit for orders of one and two. It's not super straightforward\nto do for higher orders,",
    "start": "4035600",
    "end": "4043370"
  },
  {
    "text": "but can be done. So for order one, where we just\nhave this mean value inclusion",
    "start": "4043370",
    "end": "4049310"
  },
  {
    "text": "function, we evaluate\nit at the center point. We add on the gradient of this\nreachability function, which",
    "start": "4049310",
    "end": "4055610"
  },
  {
    "text": "calls our rollout, and\nwe pass the interval through that gradient. And then we multiply it by\nthis interval minus the center.",
    "start": "4055610",
    "end": "4064100"
  },
  {
    "text": "OK. So this should like hopefully\nblow your mind because we just-- this is what we're doing.",
    "start": "4064100",
    "end": "4069990"
  },
  {
    "text": "We're taking this r function. This calls our rollout\nfunction that we've just arbitrarily implemented in\nJulia code to define our system.",
    "start": "4069990",
    "end": "4077670"
  },
  {
    "text": "We're taking the\ngradient of that. And then we're passing an\ninterval through that gradient.",
    "start": "4077670",
    "end": "4083310"
  },
  {
    "text": "And Julia just\nallows us to do that. It just allows us to pass an\ninterval through the gradient",
    "start": "4083310",
    "end": "4088860"
  },
  {
    "text": "of the rollout function. Crazy. If you can show me\nanother language",
    "start": "4088860",
    "end": "4094260"
  },
  {
    "text": "that can just do\nthis so seamlessly. It's just it's amazing. When we were coding up this\nchapter, we were like, well,",
    "start": "4094260",
    "end": "4100089"
  },
  {
    "text": "let's just try it. I feel like we can't pass an\ninterval through a gradient, but let's just try it. It just works. So amazing.",
    "start": "4100090",
    "end": "4107100"
  },
  {
    "text": "Multiple dispatch. How does this differentiate\nthe whole function plus the intervals?",
    "start": "4107100",
    "end": "4112620"
  },
  {
    "text": "Well, the gradient\nis implemented in this multiple\ndispatch type thing. So we can just pass an interval\nthrough the thing that's already",
    "start": "4112620",
    "end": "4119009"
  },
  {
    "text": "implemented for the gradient. And it all just works\nnicely together. It's absolutely amazing. Checkmate, Pythonistas.",
    "start": "4119010",
    "end": "4127109"
  },
  {
    "text": "There you go. The other thing I realized\nwhen I was making these slides and blowing up the emojis,\nis I think emojis are really",
    "start": "4127109",
    "end": "4132630"
  },
  {
    "text": "meant to be like small. Because I don't know. This is pretty creepy when you-- Like a mind blowing emoji.",
    "start": "4132630",
    "end": "4138670"
  },
  {
    "text": "I didn't really realize\nthat's what it looked like. But anyway, OK.",
    "start": "4138670",
    "end": "4146049"
  },
  {
    "text": "So let's see if this\nfixed our problem. ",
    "start": "4146050",
    "end": "4151830"
  },
  {
    "text": "All right. So now we're going to go Taylor\ninclusion function of order one.",
    "start": "4151830",
    "end": "4157149"
  },
  {
    "text": "So here's our new bound. So this has gotten better. We had natural inclusion\nbefore, not so great.",
    "start": "4157149",
    "end": "4164318"
  },
  {
    "text": "Order one, we're looking better. This is good. This is promising. And then order two\nactually for this problem.",
    "start": "4164319",
    "end": "4171397"
  },
  {
    "text": "So as you're asking, it\ndoesn't make a huge difference. So yeah, I'll just stick\nwith order two for now. But it doesn't really\nmake much difference.",
    "start": "4171397",
    "end": "4177229"
  },
  {
    "text": "So this is looking a lot better. Yeah. Yeah. Oh, darn. So we almost got\nthere, but not quite.",
    "start": "4177229",
    "end": "4184750"
  },
  {
    "text": "So this is better, though. So these time steps,\nwe were able to say quite a bit more than we could\nwith the natural inclusion.",
    "start": "4184750",
    "end": "4191740"
  },
  {
    "text": "So we are getting better.  Why does it get--",
    "start": "4191740",
    "end": "4197085"
  },
  {
    "text": "[INAUDIBLE] the Taylor.",
    "start": "4197085",
    "end": "4204855"
  },
  {
    "text": "Why does that also\nhave difficulty? Later on. Yeah, that's a great question.",
    "start": "4204855",
    "end": "4210310"
  },
  {
    "text": "So can anyone guess\nwhy, actually? Why is it harder\nfor more time steps.",
    "start": "4210310",
    "end": "4217150"
  },
  {
    "text": "Yeah. You're stacking on\nmore disturbances. So the final\nbenefits [INAUDIBLE]. Yeah.",
    "start": "4217150",
    "end": "4222990"
  },
  {
    "text": "That's true. But that would actually just\nmake the exact reachable set grow at each time step. But why does it seem like\nthe over approximation",
    "start": "4222990",
    "end": "4229470"
  },
  {
    "text": "is getting worse? Well, maybe we're\nreaching the non-linear--",
    "start": "4229470",
    "end": "4235080"
  },
  {
    "text": "maybe we are experiencing\nmore nonlinearity. Yep. That's exactly right. So as we stack on\nmore time steps,",
    "start": "4235080",
    "end": "4241290"
  },
  {
    "text": "we like we had that\nsine function dynamics, now we're going to do that sine\nfunction times a thing that was already had a sine function\nin it, times that, times that.",
    "start": "4241290",
    "end": "4247840"
  },
  {
    "text": "And we're just\nkind of compounding these non-linearities. So that's exactly right. So as we go further\nin the future,",
    "start": "4247840",
    "end": "4253623"
  },
  {
    "text": "and we'll talk about\nlater in the lecture ways to prevent this, as we\ngo further in the future,",
    "start": "4253623",
    "end": "4258760"
  },
  {
    "text": "we compound those nonlinearities\nand it's still not able to provide a good\napproximation then.",
    "start": "4258760",
    "end": "4263770"
  },
  {
    "text": "Yeah. OK. So is the issue here\nthe nonlinearities kind of stack up and\nover more time steps",
    "start": "4263770",
    "end": "4270880"
  },
  {
    "text": "and just like explodes out? Yeah. That's exactly right. Yeah. Oh, OK. Because I mean, basically,\nlike the second order Taylor",
    "start": "4270880",
    "end": "4277599"
  },
  {
    "text": "inclusion is not a linear\napproximation anymore, but it's--",
    "start": "4277600",
    "end": "4282783"
  },
  {
    "text": "it's not a linear\napproximation anymore, but it's like a second\norder approximation. And as you stack up\nthese nonlinearities,",
    "start": "4282783",
    "end": "4288080"
  },
  {
    "text": "even a second order\napproximation-- Could you solve that by\njust adding a higher order Taylor polynomial?",
    "start": "4288080",
    "end": "4295810"
  },
  {
    "text": "You could add a higher\norder Taylor polynomial. It might not be as\neasy to compute. If you travel-- If you're\ncompeting with large time steps.",
    "start": "4295810",
    "end": "4303322"
  },
  {
    "text": "It might be difficult. Yeah. Could you [INAUDIBLE] just\nlike match six time steps",
    "start": "4303322",
    "end": "4314200"
  },
  {
    "text": "to six degree? I don't think it like exactly\ncorresponds because sine",
    "start": "4314200",
    "end": "4320060"
  },
  {
    "text": "is already like nonlinear. Yeah. It's not like just one\nis going to fix it all.",
    "start": "4320060",
    "end": "4327150"
  },
  {
    "text": "Yeah. It's probably true\nTaylor [INAUDIBLE]. So you take the Taylor series.",
    "start": "4327150",
    "end": "4332190"
  },
  {
    "text": "Say your function is analytic. You take the Taylor\nseries of your thing that you're trying\nto approximate. The rate of that convergence,\nprobably linear with respect",
    "start": "4332190",
    "end": "4339320"
  },
  {
    "text": "to timestamps in\nyour estimation. Because you're just multiplying\na bunch of problems together.",
    "start": "4339320",
    "end": "4347119"
  },
  {
    "text": "I don't know because\nyou're multiplying. ",
    "start": "4347120",
    "end": "4352580"
  },
  {
    "text": "I have to think about it. But yeah, these are all really\ngood observations, though, in terms of--",
    "start": "4352580",
    "end": "4357965"
  },
  {
    "text": "I think it's really good to\nhave these intuitions of what should work, what would\nmake things better if things",
    "start": "4357965",
    "end": "4363590"
  },
  {
    "text": "are like too over approximate. OK. Let's see what do we have next.",
    "start": "4363590",
    "end": "4368780"
  },
  {
    "text": "Let's go back here. ",
    "start": "4368780",
    "end": "4374119"
  },
  {
    "text": "So that kind of wraps up\nTaylor inclusion functions. And I think in the last\nthree minutes, two minutes, I'm just going to get you\nexcited about coming back",
    "start": "4374120",
    "end": "4381450"
  },
  {
    "text": "next week. So we just talked about\nthese inclusion functions. And a lot of you, were like,\nman, we're just only ever going",
    "start": "4381450",
    "end": "4387332"
  },
  {
    "text": "to get these hyperrectangles. That's really bothering me. It bothers me too. And it's like no matter how\nhigh the order that we go up,",
    "start": "4387332",
    "end": "4393730"
  },
  {
    "text": "we're still always going to\nget these hyperrectangles. So if you want to not\nget hyper rectangles,",
    "start": "4393730",
    "end": "4399100"
  },
  {
    "text": "you can do these things\ncalled Taylor models, which are able to represent\nmore expressive sets.",
    "start": "4399100",
    "end": "4404590"
  },
  {
    "text": "And we don't have to deal with\nthese hyperrectangles anymore. So we're going to get better. I don't know.",
    "start": "4404590",
    "end": "4410139"
  },
  {
    "text": "Yeah. I think we'll stop there today. But maybe, here's a preview\nof what's coming next.",
    "start": "4410140",
    "end": "4417780"
  },
  {
    "text": "So exciting. Oh, my gosh. Look how much better it is. Look at this band here. Like whoa.",
    "start": "4417780",
    "end": "4423440"
  },
  {
    "text": "OK. So if you want to\nknow how to do that, you should come back next week. Tell your friend. Yeah.",
    "start": "4423440",
    "end": "4428610"
  },
  {
    "text": "And tell your friends. OK. Have a good weekend, everyone. ",
    "start": "4428610",
    "end": "4437000"
  }
]