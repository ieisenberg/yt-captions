[
  {
    "text": "I didn't notice because as the author of the system, it was always clear to me what?",
    "start": "5450",
    "end": "10820"
  },
  {
    "text": "Well, there was a makeover or a procedure called. And without looking at the index, if you have no way to know right now.",
    "start": "10820",
    "end": "19250"
  },
  {
    "text": "So probably it would be good idea to have a little typographic symbol indicating it's a macro call or something.",
    "start": "19250",
    "end": "31860"
  },
  {
    "text": "No, no. See, when you when you call a macro, you might even want to have indicated by by a subscript which tells me what's the margin number where the macro is defined.",
    "start": "31860",
    "end": "46670"
  },
  {
    "text": "That would be another way. It would say inkers. Three. Then you'd know that that was a macro because it has a subscript on it.",
    "start": "46670",
    "end": "55120"
  },
  {
    "text": "Procedure names don't. So I like to experiment with that.",
    "start": "55120",
    "end": "60840"
  },
  {
    "text": "It's a problem that I just wasn't aware of until this week. I guess they they started to tape.",
    "start": "60840",
    "end": "70550"
  },
  {
    "text": "So we. So if people want to make comments, so we are to do it for the for the people on TV land.",
    "start": "70550",
    "end": "78260"
  },
  {
    "text": "So. Well, let's continue this discussion here. This is six down and six to go. And our current our current discussion will be the paragraph maker and a couple of well, you know, we can talk about web later.",
    "start": "78260",
    "end": "98680"
  },
  {
    "text": "Now, OK. Put it in context again. We'll give this whole slide. And I have another slide that you haven't seen before that you'll get to see in a minute.",
    "start": "98680",
    "end": "106760"
  },
  {
    "text": "So the paragraph, it comes for a little bit of code here about what is that, 10, 100 modules.",
    "start": "106760",
    "end": "114940"
  },
  {
    "text": "And. And if you add hyphenation to that, which is which is about about the same amount of code.",
    "start": "114940",
    "end": "122750"
  },
  {
    "text": "This this is the thing that takes place when a horizontal list has been finished and it's time to break it off and put it into boxes of each size.",
    "start": "122750",
    "end": "136670"
  },
  {
    "text": "It's a self-contained little part of the program that that only gets called twice in two places once it gets called when you have finished an ordinary paragraph.",
    "start": "136670",
    "end": "147530"
  },
  {
    "text": "The other places when you've started a displayed equation, in both cases, you take the previous lines and make them up into paragraphs.",
    "start": "147530",
    "end": "155150"
  },
  {
    "text": "There's one of the things in the state. Remember, we had the mode in the head and the tail in the space factor.",
    "start": "155150",
    "end": "161360"
  },
  {
    "text": "There's another thing in this state called already. And this is it. This keeps track of how many lines you've already set for a paragraph.",
    "start": "161360",
    "end": "168350"
  },
  {
    "text": "In case of a displayed formula, you have to have to resume maybe at line eight or nine. The reason is that paragraphs can we can have hanging indentation and the hanging notation might say go on for the first ten lines.",
    "start": "168350",
    "end": "181520"
  },
  {
    "text": "And so you have to remember how many lines you've already done in the Intec.",
    "start": "181520",
    "end": "187730"
  },
  {
    "text": "You know that you can also play games with the with paragraphs and you can get different shapes, something like that.",
    "start": "187730",
    "end": "196930"
  },
  {
    "text": "And and those specify the part of the paragraph, Shafe. So it's another reason why we want to know how many lines we've we've set.",
    "start": "196930",
    "end": "205010"
  },
  {
    "text": "You could have a displayed equation in the middle of such of such paragraphs. What what actually what tech actually does is it considers it a displayed equation is three lines",
    "start": "205010",
    "end": "213409"
  },
  {
    "text": "long and all three lines are r e are equal in size to the mid to the middle of those three lines.",
    "start": "213410",
    "end": "222830"
  },
  {
    "text": "Usually the first and last are blank. And the only time that that you have other lines is if you have to drop an equation number or or raise an equation number two.",
    "start": "222830",
    "end": "234120"
  },
  {
    "text": "Now, those tiny little numbers in the right hand margin here, this is indicate this is the glue ratio of that had to be used in that line.",
    "start": "234120",
    "end": "243560"
  },
  {
    "text": "If you could read it, it would mean the first line. It would say point three or five say that these spaces are a little larger by by three tenths of their flexibility.",
    "start": "243560",
    "end": "250879"
  },
  {
    "text": "The next one point eight, six, seven. Here's a my gloves was a minus.",
    "start": "250880",
    "end": "258709"
  },
  {
    "text": "Yeah. The bottom one is a minus point five one. So. And this is in some sense the optimum way to put those words into shape.",
    "start": "258710",
    "end": "269240"
  },
  {
    "text": "And we change the text to the other text and we can fit them in in.",
    "start": "269240",
    "end": "274550"
  },
  {
    "text": "Also, there was no it wasn't particularly difficult to to to do this example.",
    "start": "274550",
    "end": "282110"
  },
  {
    "text": "We didn't have to. We don't have to fudge with it or anything very much. But the question is, what kind of algorithm is actually used to make paragraphs and is one of the most interesting algorithms in tech?",
    "start": "282110",
    "end": "291920"
  },
  {
    "text": "Probably the most interesting one can. It's do in major part to Michael Plass, who's whose wife you all know because she's been our host this week.",
    "start": "291920",
    "end": "304590"
  },
  {
    "text": "Now, let's first talk about the case where we don't have a paragraph shaping.",
    "start": "304590",
    "end": "311419"
  },
  {
    "text": "All the lines are the same length. This is this diagram indicates one of the tests that we have carried out over and over again to two out to our favorite text.",
    "start": "311420",
    "end": "321780"
  },
  {
    "text": "This is the text taken from Grimm's Fairy Tales. And the only reason we did this is that for some reason, somebody puts Grimm's fairy tales online in a sail computer system.",
    "start": "321780",
    "end": "331580"
  },
  {
    "text": "And this is fairy tale number one. And the first paragraph of fairy tale number one, if you want to read the rest of the fairy tale, I have it online and we can look at it later.",
    "start": "331580",
    "end": "341340"
  },
  {
    "text": "And all the other tales are on there, too. And we also have Wuthering Heights. But I don't. And. And we have. Oh, goodness.",
    "start": "341340",
    "end": "350130"
  },
  {
    "text": "That was Copenhagen's first movie heroine. Mine. Yeah. OK, so those are the books that we have online.",
    "start": "350130",
    "end": "357840"
  },
  {
    "text": "And we've been we can do our experiments on paragraphing with off with those things, also their habits. I guess the art of computer programing is online. Well, in olden times when wishing still helped, when there lived the king and so on.",
    "start": "357840",
    "end": "370830"
  },
  {
    "text": "This is the paragraph. And the question is what's the best way to put it into into a paragraph?",
    "start": "370830",
    "end": "379229"
  },
  {
    "text": "And tech has its way to define best in terms of concepts of badness and demerits.",
    "start": "379230",
    "end": "385770"
  },
  {
    "text": "Badness is something that depends on that. That little glew ratio number that we had on there.",
    "start": "385770",
    "end": "393090"
  },
  {
    "text": "This one is so smeary I can't even read it off of the slide. But point seven, something on the top line.",
    "start": "393090",
    "end": "399419"
  },
  {
    "text": "Now, the the badness is in simple cases, is equal to the cube of that number times a hundred.",
    "start": "399420",
    "end": "411630"
  },
  {
    "text": "So if it's point seven, we cube it to get point for nine. And then what, three is it 343 is seven cubes.",
    "start": "411630",
    "end": "420360"
  },
  {
    "text": "Four point three four. So thirty four point three units of badness because we multiply by one hundred afterwards.",
    "start": "420360",
    "end": "425969"
  },
  {
    "text": "Now there's hundred of course is an arbitrary, slim factor. But then we convert to an integer.",
    "start": "425970",
    "end": "431160"
  },
  {
    "text": "And this this calculation of badness is actually done by like all the other things with integers,",
    "start": "431160",
    "end": "438270"
  },
  {
    "text": "by some precise method that you're not allowed to deal with. So the actual calculation of getting that thing that we didn't compute the glue ratio was forty point arithmetic.",
    "start": "438270",
    "end": "450060"
  },
  {
    "text": "We had the true integer number of of scale points that we wanted to expand that line by.",
    "start": "450060",
    "end": "458880"
  },
  {
    "text": "And we had the true integer number of of stretch ability that we could do it.",
    "start": "458880",
    "end": "464250"
  },
  {
    "text": "And those two numbers were computed by a subroutine called badness will produce probably the number 34, maybe 35.",
    "start": "464250",
    "end": "471150"
  },
  {
    "text": "But whatever number it produces, every implementation of tech is supposed to produce exactly that same number.",
    "start": "471150",
    "end": "476490"
  },
  {
    "text": "And it's pretty much the ratio of the two time cube times one hundred.",
    "start": "476490",
    "end": "482370"
  },
  {
    "text": "And the reason that number was chosen was because it has the right properties for that we were looking for.",
    "start": "482370",
    "end": "488010"
  },
  {
    "text": "Namely, it's pretty. It stays close to zero for a while and then administers to rise rapidly after things start to get real bad.",
    "start": "488010",
    "end": "498630"
  },
  {
    "text": "Then once we have badness, we add onto that another number called the line penalty,",
    "start": "498630",
    "end": "505410"
  },
  {
    "text": "which just says that any line has a certain amount of is has something wrong with it just because we don't want to waste lines.",
    "start": "505410",
    "end": "513510"
  },
  {
    "text": "And so line penalty and take the old version of tech was always fixed. That one. In take 82. You can say the line penalty is one hundred and that'll make it.",
    "start": "513510",
    "end": "524199"
  },
  {
    "text": "That will make tech a lot less happy to to make a paragraph longer.",
    "start": "524200",
    "end": "529800"
  },
  {
    "text": "[INAUDIBLE] try to argue the line penalty. The short of the paragraphs will tend to be.",
    "start": "529800",
    "end": "538380"
  },
  {
    "text": "And then it's funny if you try to set line penalty negative. Strange things are going to have strange things will happen and.",
    "start": "538380",
    "end": "545520"
  },
  {
    "text": "Well, that's not news about that for some anyway. There's there's a there's a whole bunch of other parameters that can be played with",
    "start": "545520",
    "end": "552030"
  },
  {
    "text": "so many that that I doubt if anybody will ever be able to to experiment with. With very many of them in their lifetime. I mean, there's that many possibilities to try.",
    "start": "552030",
    "end": "561750"
  },
  {
    "text": "So you find ones that you like and with those. But the penalty is one of these programs.",
    "start": "561750",
    "end": "567600"
  },
  {
    "text": "So we take the badness computer. Like I told you, we add the line penalty. Then we add penalties associated with this particular kind of a break.",
    "start": "567600",
    "end": "578880"
  },
  {
    "text": "So if some if there's a break at the end of a line is due to a hyphen, then then you add on a hyphenation penalty.",
    "start": "578880",
    "end": "585450"
  },
  {
    "text": "There's two kinds of those. There's the kind that there was a discretionary hyphen and there was the kind that was an explicit hyphen.",
    "start": "585450",
    "end": "592290"
  },
  {
    "text": "Like, if somebody has a dash or a real hyphen in his text where he said nitty gritty or something and there was a hyphen,",
    "start": "592290",
    "end": "600899"
  },
  {
    "text": "there is a thing in that there's a there's an explicit hyphen that gets one penalty.",
    "start": "600900",
    "end": "605940"
  },
  {
    "text": "Kind of had to be inserted with hyphenation algorithm that gets another penalty any way that that penalty would be added or if you broke because of.",
    "start": "605940",
    "end": "613090"
  },
  {
    "text": "Penalty. Like you said, penalty 100. And the penalty is, of course, one hundred. Now we calculate the merits of a line by taking the badness in the line penalty and the other penalty and others altogether in squarest.",
    "start": "613090",
    "end": "631530"
  },
  {
    "text": "And that's demerits. And the more demerits you have, the worse you're off of it.",
    "start": "631530",
    "end": "640590"
  },
  {
    "text": "Now, on the other hand, if the penalty is negative, for example, if somebody said the break here with penalty minus 100,",
    "start": "640590",
    "end": "648000"
  },
  {
    "text": "then we don't want to subtract one hundred and ten squared because that's going to go the wrong way. So in that case, we compute the square, the badness and we subtract the square the penalty.",
    "start": "648000",
    "end": "658950"
  },
  {
    "text": "Now, these are arbitrary forms, but they tend to to agree with what they're supposed to do, namely, as the penalty gets larger, demerits could go up and.",
    "start": "658950",
    "end": "669510"
  },
  {
    "text": "And they tend to to prove the right results. So we have to have a way to find a quantitative statement. How much does it cost you for a certain certain effects on the page?",
    "start": "669510",
    "end": "683230"
  },
  {
    "text": "So so the costs are computed by by my mathematical formula. Finally, we get to a notion of demerits.",
    "start": "683230",
    "end": "689070"
  },
  {
    "text": "And the idea is to find the way to break a paragraph so that the total number of the merits is as small as possible.",
    "start": "689070",
    "end": "696090"
  },
  {
    "text": "Now, this particular example, we can illustrate that problem by this neat little chart here.",
    "start": "696090",
    "end": "706980"
  },
  {
    "text": "Where are we? Where I draw on each line. The number of demerits that would be associated with a line from a break at this at",
    "start": "706980",
    "end": "715230"
  },
  {
    "text": "this date means the the beginning of the paragraph here is break after the word A. So on the first line, which had a point seven, something of badness.",
    "start": "715230",
    "end": "725310"
  },
  {
    "text": "So that would be 34 and so on. And after squaring in everything, it turned out to be adding line Finlay's Green Zone.",
    "start": "725310",
    "end": "735270"
  },
  {
    "text": "It turned out it was twenty three hundred and fifty seven demerits for that line. On the other hand, if we'd brought King over to that up to the end of that line,",
    "start": "735270",
    "end": "743910"
  },
  {
    "text": "it would have fit and it would have been only seventeen hundred and thirty four demands.",
    "start": "743910",
    "end": "748980"
  },
  {
    "text": "So. Now, similarly, as what about if you stopped after a and and just considered from DOT to live?",
    "start": "748980",
    "end": "760180"
  },
  {
    "text": "I didn't even show that on here. It's not because the demerits are so large. The reason I didn't show it is because there is something that tech calls the tolerance and which the old version of tech called the Ja'far,",
    "start": "760180",
    "end": "771120"
  },
  {
    "text": "which says anything that has to stretch too much is not considered at all.",
    "start": "771120",
    "end": "777839"
  },
  {
    "text": "And so we say that a line break is feasible if there is a way to get there from the beginning of the paragraph without violating any of this tolerances.",
    "start": "777840",
    "end": "787410"
  },
  {
    "text": "So that, again, it's feasible if you can get there without violating any tolerances. I've drawn blue lines for all the feasible breaks in this paragraph.",
    "start": "787410",
    "end": "795990"
  },
  {
    "text": "So you notice at the beginning we had a feasible break, after all, and after King, but who's with bank made it too tight, lived would have made it too loose.",
    "start": "795990",
    "end": "806190"
  },
  {
    "text": "And those are sort of a V shaped effect. Further on you get into the paragraph, more breaks become feasible.",
    "start": "806190",
    "end": "814810"
  },
  {
    "text": "And that tolerance was very sloppy. This was done with tight tolerance where we we had much more rigid spacing controls than publishers generally do use.",
    "start": "814810",
    "end": "824889"
  },
  {
    "text": "So if this if they if we gave ourselves a lot of tolerance, then we would have we would probably had all all two lines by after we got to town for four or five lines into the paragraph.",
    "start": "824890",
    "end": "836860"
  },
  {
    "text": "In fact, 82, if you make the tolerance 10000 or more. Everything is everything is feasible and tries everything.",
    "start": "836860",
    "end": "845110"
  },
  {
    "text": "It wouldn't it wouldn't mind going in space old all the way to the end.",
    "start": "845110",
    "end": "852250"
  },
  {
    "text": "So that's there's a notion of an infinitely feasible. But the tolerance it is is typically 200.",
    "start": "852250",
    "end": "861670"
  },
  {
    "text": "That means in units of badness. Tolerance is now given in units of badness.",
    "start": "861670",
    "end": "867070"
  },
  {
    "text": "It used to be given in another way. But tolerance now is given in units of badness. So. So if I said the times of two hundred deaths means that I'm not going to accept any line whose badness is more than 200.",
    "start": "867070",
    "end": "878290"
  },
  {
    "text": "This means it would stretch more than a cube root of two of its of its stretch units because Cuba to two, when we cube it would give us two.",
    "start": "878290",
    "end": "889029"
  },
  {
    "text": "And then multiply one hundred to get two hundred. So feasible breaks are shown here.",
    "start": "889030",
    "end": "896230"
  },
  {
    "text": "And every time I have a blue line, I have a corresponding box down here.",
    "start": "896230",
    "end": "902019"
  },
  {
    "text": "And so the question is how what's the best way to get from the beginning of the paragraph to the end in a sense of total technology,",
    "start": "902020",
    "end": "908860"
  },
  {
    "text": "marriage being small as possible? This translates into another well-known problem in computer science, the shortest path problem.",
    "start": "908860",
    "end": "915459"
  },
  {
    "text": "What's the best way to get from here to there in the sense that the total distance should be as short as possible?",
    "start": "915460",
    "end": "922750"
  },
  {
    "text": "So it's weak. So if we knew all the feasible break points and we knew all the demerits between feasible",
    "start": "922750",
    "end": "929050"
  },
  {
    "text": "break points and we apply shortest path algorithm and it gives us the shortest way to go.",
    "start": "929050",
    "end": "934089"
  },
  {
    "text": "And this one on the top is the shortest way if you. So it's why we come down through R instead of going through King.",
    "start": "934090",
    "end": "942370"
  },
  {
    "text": "Because even though it took more demerits here, we're going to win pretty soon by take picking up only six here where that one has to pick up forty six.",
    "start": "942370",
    "end": "949400"
  },
  {
    "text": "Ninety two. And the next line by putting King in there, you get stuck on the next line, you don't have as good a chance.",
    "start": "949400",
    "end": "958420"
  },
  {
    "text": "So in this way tech is able to look it, use the paragraph as a whole to get the best way to do the breaking.",
    "start": "958420",
    "end": "966160"
  },
  {
    "text": "And we we use this in the first tech in a in a.",
    "start": "966160",
    "end": "976089"
  },
  {
    "text": "Well, it was it was successfully used for about two years before we realized there was a bug in it.",
    "start": "976090",
    "end": "983800"
  },
  {
    "text": "Well, before I discussed about the bug, I should mention that.",
    "start": "983800",
    "end": "989649"
  },
  {
    "text": "How is the algorithm gonna go? Aren't we we we don't we don't simply go through one pass through the paragraph,",
    "start": "989650",
    "end": "996370"
  },
  {
    "text": "note all the feasible breakpoints and demerits, set up this graph and then and then start up a shortest path algorithm.",
    "start": "996370",
    "end": "1004620"
  },
  {
    "text": "The whole thing is all done on the fly simultaneously. So as we're going through the paragraph we're keeping track of,",
    "start": "1004620",
    "end": "1010930"
  },
  {
    "text": "of as much information as we need to be able to recognize a feasible breakpoint when we come to it.",
    "start": "1010930",
    "end": "1016500"
  },
  {
    "text": "And at the same time is that we're also doing the shortest with the shortest path algorithm we do on on an ethically graph like this.",
    "start": "1016500",
    "end": "1024630"
  },
  {
    "text": "Now, the broad that we noticed some time after it was illustrated on this on this chart and the",
    "start": "1024630",
    "end": "1032910"
  },
  {
    "text": "one on the right hand side is the way it would have been done by our first algorithm.",
    "start": "1032910",
    "end": "1042839"
  },
  {
    "text": "And the slide sort of explains the problem itself is that the bug only occurs when the line with changes.",
    "start": "1042840",
    "end": "1051330"
  },
  {
    "text": "And here we advocate an example where the line with changes and we had been keeping in our in our diagram for each feasible breakpoint,",
    "start": "1051330",
    "end": "1063059"
  },
  {
    "text": "we had been keeping track of the best way to get from the beginning to that break point. So we hadn't been keeping track of the best way to get from the beginning to that break point online,",
    "start": "1063060",
    "end": "1072030"
  },
  {
    "text": "10 as different from the best way to get to that breakpoint on line eleven.",
    "start": "1072030",
    "end": "1077230"
  },
  {
    "text": "But it might be possible for two to have the paragraph be feasible, both ending at one place at line 10 and ending at line 11.",
    "start": "1077230",
    "end": "1086640"
  },
  {
    "text": "OK. So, for example, in this case, at the end of the word, like there is two on the left hand side, like fit.",
    "start": "1086640",
    "end": "1095400"
  },
  {
    "text": "OK, we're at the end of the end of the end and the indentation there.",
    "start": "1095400",
    "end": "1102180"
  },
  {
    "text": "Well, it also fits on a line above. In fact, it'll probably you can probably squeeze it up some somewhat higher and find a way to do it feasibly.",
    "start": "1102180",
    "end": "1109910"
  },
  {
    "text": "We set tolerance very high in this particular example. So what happened was in our old algorithm, keeping only the information for a breakpoint.",
    "start": "1109910",
    "end": "1119370"
  },
  {
    "text": "And without it, without considering line number, we would say that it was the best way to get from the beginning to like would be well, that way.",
    "start": "1119370",
    "end": "1131670"
  },
  {
    "text": "And and then when we when we come to the long this this long equation on the next line and it says now what to do.",
    "start": "1131670",
    "end": "1141150"
  },
  {
    "text": "Well, there's no way there was no good way to do it because we had lost track of the fact that there was a feasible way to get to this on another line.",
    "start": "1141150",
    "end": "1147659"
  },
  {
    "text": "We only kept track of the best way, but. Some of you might see the problem then as to how our algorithm didn't.",
    "start": "1147660",
    "end": "1155280"
  },
  {
    "text": "I forgot that there was a feasible way also to get like at line 11 with each breakpoint, we we stored the best way to get there.",
    "start": "1155280",
    "end": "1163710"
  },
  {
    "text": "And the line number on which it would be at the best way we should have done for each combination of breakpoint in line number store the best way to get there.",
    "start": "1163710",
    "end": "1173490"
  },
  {
    "text": "So the algorithm that's in the present version of tech has a bug fixed and does the thing on the left.",
    "start": "1173490",
    "end": "1178690"
  },
  {
    "text": "Now I show this to some printers and they said the spacing is so wide and the thing in the left, they would still prefer the one on the right.",
    "start": "1178690",
    "end": "1185830"
  },
  {
    "text": "Well, OK. Anyway, it was a bug.",
    "start": "1185830",
    "end": "1194320"
  },
  {
    "text": "So we know those are the only slides I've got for you on that question, John.",
    "start": "1194320",
    "end": "1204860"
  },
  {
    "text": "On the last slide, you mentioned that you'd keep a feasible way to get a certain break at a certain line.",
    "start": "1204860",
    "end": "1212470"
  },
  {
    "text": "Is there a way also to figure out a feasible break at arriving at a certain distance down if you don't know what the line with spacing is going to be on the way?",
    "start": "1212470",
    "end": "1221140"
  },
  {
    "text": "Yeah. This is just this generalization has been developed by in Yankee in his PSTN thesis, and he's a he's generalize this algorithm so that it will deal with shapes putting putting text into into shapes.",
    "start": "1221140",
    "end": "1235830"
  },
  {
    "text": "And to me, it's amazing that it could ever be done by these. But the other day you convinced me that it would work. That's one of the many things that he's doing in the season.",
    "start": "1235830",
    "end": "1251020"
  },
  {
    "text": "The thing I told you about the merits isn't quite complete.",
    "start": "1251020",
    "end": "1256390"
  },
  {
    "text": "There's also there's also extra demerits thrown in for the sea.",
    "start": "1256390",
    "end": "1265900"
  },
  {
    "text": "What is it called? Double hyphen demerits. Is one of them. There's a parameter in text to that, you say. How many demerits do you pay for a double hyphen to hyphenated lines in a row?",
    "start": "1265900",
    "end": "1275860"
  },
  {
    "text": "And so you add to the demerits that I've already told you to calculate this extra penalty for double life.",
    "start": "1275860",
    "end": "1283600"
  },
  {
    "text": "There's another one for final hyphen demerits. This this applies if you are if you're the at the end of the paragraph in the previous the second last line of paragraph was was hyphenated.",
    "start": "1283600",
    "end": "1294280"
  },
  {
    "text": "And that's a separate penalty, not a separate calculation. Had it on two demerits. This is called the merits rather than penalty because it doesn't get squared like the like penalties do.",
    "start": "1294280",
    "end": "1307420"
  },
  {
    "text": "Now, there's also the adjacency demerit. And this is when you have a tight line followed by a loose line or vice versa.",
    "start": "1307420",
    "end": "1319240"
  },
  {
    "text": "You pay a penalty for incompatible lines in consecutive. It's sort of better if you're going to have a tight line somewhere and then you you don't want to have a loose line right afterwards.",
    "start": "1319240",
    "end": "1329510"
  },
  {
    "text": "That's particularly noticeable when when when is it a dramatic switch? So there's a lot there's a calculation, but based on a bunch of parameters, the user can supply will,",
    "start": "1329510",
    "end": "1342250"
  },
  {
    "text": "which then leads to a shortest path calculation where we try to find the shortest path or the fact that",
    "start": "1342250",
    "end": "1348610"
  },
  {
    "text": "we talk about tight lines and loose lines means that we have to we have to improve the algorithm.",
    "start": "1348610",
    "end": "1355750"
  },
  {
    "text": "Still further along the lines of this this bug I mentioned, namely, we have to remember for every breakpoint,",
    "start": "1355750",
    "end": "1362500"
  },
  {
    "text": "for every line number and for every class of fitness or whether it was tight or loose. And the last one we have to remember, what's the best way to get there?",
    "start": "1362500",
    "end": "1371380"
  },
  {
    "text": "That triple of things is really what we have are really the the vertices in our shortest path algorithm.",
    "start": "1371380",
    "end": "1379240"
  },
  {
    "text": "Now that the idea then was going to be to keep a data structure that represents that represents enough information for us to do all that and.",
    "start": "1379240",
    "end": "1401080"
  },
  {
    "text": "We do it in terms of of of so-called passive nodes and active nodes, as we're going through now,",
    "start": "1401080",
    "end": "1408760"
  },
  {
    "text": "whereas we go as we begin at the beginning of the paragraph, maybe I ought to put that slight up on the on the screen again.",
    "start": "1408760",
    "end": "1419230"
  },
  {
    "text": "First I wave my hands and then I'll tell you a little more detail. So how do we actually generate this on the fly?",
    "start": "1419230",
    "end": "1424620"
  },
  {
    "text": "We start out and and there's one active node, one active breakpoint, and it's for the beginning of the paragraph.",
    "start": "1424620",
    "end": "1432520"
  },
  {
    "text": "And the list of active breakpoints contains only that thing. Then when we when we whenever we get to a valid break, we start to search for the paragraph.",
    "start": "1432520",
    "end": "1441100"
  },
  {
    "text": "And every time we get to a space between words here, that will be a valid breakpoint.",
    "start": "1441100",
    "end": "1446320"
  },
  {
    "text": "And the subroutine called Try Break is called and try break.",
    "start": "1446320",
    "end": "1452380"
  },
  {
    "text": "Looks to see looks at every active breakpoint and every active breakpoint.",
    "start": "1452380",
    "end": "1458990"
  },
  {
    "text": "First there is only this one it tries to see. Or what about the best way to get from the beginning of the paragraph to the current breakpoint via the active breakpoint.",
    "start": "1458990",
    "end": "1472269"
  },
  {
    "text": "Now, the only way we're ever we're ever going to get two. So suppose our current break point is called P, then we want to get from beginning to act to a P or A as some active breakpoint.",
    "start": "1472270",
    "end": "1484750"
  },
  {
    "text": "We've already recorded the best way to get to a. So we can figure out the demerits from ATP.",
    "start": "1484750",
    "end": "1490720"
  },
  {
    "text": "Now we know the cost from beginning to ATP. The best possible weight from beginning to ATP has to be the best possible way to a follow by ATP is a probe.",
    "start": "1490720",
    "end": "1504550"
  },
  {
    "text": "Also includes whether it was tight or loose. This is this is a slight subtlety and also includes that what line number there is.",
    "start": "1504550",
    "end": "1510670"
  },
  {
    "text": "But I'll for simplicity. Just talk about breakpoints. So we look at that number.",
    "start": "1510670",
    "end": "1516890"
  },
  {
    "text": "And for all a fixing P and for all that are currently active. We take the one that turns out to be best. And if none of those is feasible, then we throw P away and nothing ever happens.",
    "start": "1516890",
    "end": "1528139"
  },
  {
    "text": "But if at least one of is feasible, the best one gets considered an active breakpoint and it become and then it will start testing it against other things.",
    "start": "1528140",
    "end": "1537259"
  },
  {
    "text": "Now, if if we find out that there's some active breakpoint that's so far away from P,",
    "start": "1537260",
    "end": "1545650"
  },
  {
    "text": "that from ATP causes these holes to exceed the shrink ability so that we could never fit the line from ATP in order to get the current line.",
    "start": "1545650",
    "end": "1557350"
  },
  {
    "text": "Then A becomes inactive. We take it off the active list. I have to mention, I hope it works.",
    "start": "1557350",
    "end": "1565780"
  },
  {
    "text": "I think that yeah, that must be. It must be OK. Yeah. So because they has a certain certain line number associated with it, it would still remain active at other line numbers.",
    "start": "1565780",
    "end": "1581019"
  },
  {
    "text": "Now the in this case then what's going to happen?",
    "start": "1581020",
    "end": "1586870"
  },
  {
    "text": "We'll start out with this one active and after we get to a that one in eight will be active after King will test King against this one and this one actually.",
    "start": "1586870",
    "end": "1594970"
  },
  {
    "text": "And we'll find that the best one is from the first king.",
    "start": "1594970",
    "end": "1600070"
  },
  {
    "text": "And when we get to whose, we're going to find out that this one should be retired. So this one becomes inactive, becomes passive. And finally, when was occurs, we'll find it was should become active and so occurs.",
    "start": "1600070",
    "end": "1615910"
  },
  {
    "text": "OK. Then the next word after so beautiful is not going to be no longer active nor king.",
    "start": "1615910",
    "end": "1622660"
  },
  {
    "text": "And so eventually we'll only keep a few active nodes at a time. So the search is the search is is the number of the time to do this algorithm is proportional to the number of break points.",
    "start": "1622660",
    "end": "1635740"
  },
  {
    "text": "Times the number of active nodes and the number of active nodes tends to be at worth the number of words you can have in a line.",
    "start": "1635740",
    "end": "1645910"
  },
  {
    "text": "So so the algorithm runs quite rapidly.",
    "start": "1645910",
    "end": "1651400"
  },
  {
    "text": "And even even when we're setting unusual paragraph shapes,",
    "start": "1651400",
    "end": "1657520"
  },
  {
    "text": "we can we can get the thing as globally optimum for the paragraph as a whole with a with a method that is slot only slightly shorter,",
    "start": "1657520",
    "end": "1668560"
  },
  {
    "text": "slightly slower than what you would do if you were just setting a line at the time on the fly. As in other system. Let's see. I wanted to make another quick point, but what was it?",
    "start": "1668560",
    "end": "1678990"
  },
  {
    "text": "It flashed through my mind. Oh, it's just I want to say it's amazing when you play with this and you see you correct a typo in the",
    "start": "1678990",
    "end": "1687250"
  },
  {
    "text": "last line of a paragraph and then all of a sudden something else shifts up in the first line.",
    "start": "1687250",
    "end": "1693440"
  },
  {
    "text": "After this algorithm goes on. It also does amazing things when it goes wrong.",
    "start": "1693440",
    "end": "1700509"
  },
  {
    "text": "As we discovered, for example, the mysterious problem was happening on the current membership list with the American society",
    "start": "1700510",
    "end": "1708790"
  },
  {
    "text": "until we found out that it was that we were that it was because of the final hyphen penalty,",
    "start": "1708790",
    "end": "1715900"
  },
  {
    "text": "the height of these the line before the last line was hyphenated in this. And it wasn't choosing this alternative as the best one,",
    "start": "1715900",
    "end": "1723040"
  },
  {
    "text": "although it looked obviously better to us because we didn't realize it was the line before the end of the paragraph.",
    "start": "1723040",
    "end": "1729520"
  },
  {
    "text": "In the current membership list, they ended the members entries with with like a four association and I for the Siam.",
    "start": "1729520",
    "end": "1740500"
  },
  {
    "text": "And as for the society. And so the person name given here. And then at the end it says some stars and essay I hear would be the hyphen.",
    "start": "1740500",
    "end": "1750970"
  },
  {
    "text": "But but it would take wouldn't like this this resolution because we hadn't realized that the final Highton penalty was was was, was acting there.",
    "start": "1750970",
    "end": "1760840"
  },
  {
    "text": "So it would prefer setting something without hyphenating that word and bringing something over here and making it look this way and that it surprised us.",
    "start": "1760840",
    "end": "1770520"
  },
  {
    "text": "So there's so many there's a bunch of parameters in there. And. And if you look at the code, probably each grammar disappears once in text program.",
    "start": "1770520",
    "end": "1779620"
  },
  {
    "text": "But the the art of using these parameters is is something that can be learned.",
    "start": "1779620",
    "end": "1787510"
  },
  {
    "text": "But is. But it takes a little little experience. I think it's fun to watch it.",
    "start": "1787510",
    "end": "1793650"
  },
  {
    "text": "Now that we said that we have active notes and passive notes active, actually,",
    "start": "1793650",
    "end": "1801760"
  },
  {
    "text": "we we make up a passive note at the same time as we make an active node.",
    "start": "1801760",
    "end": "1809200"
  },
  {
    "text": "And then when the node becomes inactive, we just we just recycle the active node part, the passive nodes.",
    "start": "1809200",
    "end": "1814870"
  },
  {
    "text": "Ah ah ah. Very short, very feasible breakpoint. We have a passive node.",
    "start": "1814870",
    "end": "1820240"
  },
  {
    "text": "That's two words long and fact. It could only be one and a half words long if we if we were working on a 16 bit instead of a 32 bit machine.",
    "start": "1820240",
    "end": "1834520"
  },
  {
    "text": "Active nodes. I forget how long they are. Three or four words long. Each active node points to the corresponding passive node and also has these values on it, like the the the total demerits.",
    "start": "1834520",
    "end": "1849640"
  },
  {
    "text": "The best totally merit's to get to here. And it will contain other things like the line number, the fitness class, whether it's tight or loose and the.",
    "start": "1849640",
    "end": "1859070"
  },
  {
    "text": "And this one points to the breakpoint p that that we're we're actually trying to break points that we might find are",
    "start": "1859070",
    "end": "1869519"
  },
  {
    "text": "a glue nodes or at discretionary nodes or or in or at penalty nodes and then in special cases math or current node,",
    "start": "1869520",
    "end": "1881380"
  },
  {
    "text": "if, if you write a math formula and it says, say X and somebody is used the math around option in tech,",
    "start": "1881380",
    "end": "1891400"
  },
  {
    "text": "which says that he wants every math final to be surrounded by a certain amount of space. Well, then you could break at this at this at this surround here.",
    "start": "1891400",
    "end": "1903450"
  },
  {
    "text": "Namely, if a if a math formulas immediately followed by a space, it's valid to break their.",
    "start": "1903450",
    "end": "1915610"
  },
  {
    "text": "And so that X would be flush, right? Similarly with Kearnes, you have a Kernis followed immediately by a space.",
    "start": "1915610",
    "end": "1923210"
  },
  {
    "text": "It's allowed to break their soap. So those are the kind of legal break points we have. And that's what he represents, something in them. And that's either a glue node or a penalty node or a discretionary node.",
    "start": "1923210",
    "end": "1936170"
  },
  {
    "text": "Ah. Current in these special cases. The difference between the difference between text's new algorithm to eighty two is",
    "start": "1936170",
    "end": "1949190"
  },
  {
    "text": "algorithm and the one in the present tech is primarily that in the present tech. These are, these are both combined in one big ten word node is taking a lot of memory.",
    "start": "1949190",
    "end": "1959630"
  },
  {
    "text": "And what we, what we did was when it became inactive, we just moved it to a passive list.",
    "start": "1959630",
    "end": "1964790"
  },
  {
    "text": "And I just noticed when I was recording it that we weren't using many of those words anymore.",
    "start": "1964790",
    "end": "1969980"
  },
  {
    "text": "So now I just make it up. Plus with the part that's said I'm going to need at the end putting immediately on a passive list.",
    "start": "1969980",
    "end": "1976440"
  },
  {
    "text": "The passive list points to P. It points to the the best previous node from P.",
    "start": "1976440",
    "end": "1983210"
  },
  {
    "text": "In other words, the best way to get to A was from some other passive node.",
    "start": "1983210",
    "end": "1988370"
  },
  {
    "text": "And it points to the previous passive node so that we can at the end recycle all the passive nodes to the to the available storage.",
    "start": "1988370",
    "end": "1996500"
  },
  {
    "text": "So there's three pointers in every passive node. One and a half words were active nodes which contain the totally merits.",
    "start": "1996500",
    "end": "2003310"
  },
  {
    "text": "And they also contain things like the line number. And I mentioned now they're in the in the existing version of text.",
    "start": "2003310",
    "end": "2012370"
  },
  {
    "text": "We we also kept track of the total length of everything from the beginning of the paragraph to hear the VS.",
    "start": "2012370",
    "end": "2023260"
  },
  {
    "text": "If you imagine the paragraph all stretched out in one straight line to the given point, how far, how much was there and then.",
    "start": "2023260",
    "end": "2032320"
  },
  {
    "text": "And we would use that to calculate the badness of a line. Because if we knew the beginning to a beginning to be then for a line from A to B we subtract those two numbers.",
    "start": "2032320",
    "end": "2042429"
  },
  {
    "text": "Those two numbers were kept in flowing point notation. And they included.",
    "start": "2042430",
    "end": "2047980"
  },
  {
    "text": "And there was also a similar thing for stretch ability and shrink ability that that we would keep track of,",
    "start": "2047980",
    "end": "2053850"
  },
  {
    "text": "including point notation so that we can determine between A and B. How much stretch ability there was between the line as well as how much space there was between those two.",
    "start": "2053850",
    "end": "2064179"
  },
  {
    "text": "Now that we want to get rid of floating point arithmetic in tech eighty two.",
    "start": "2064180",
    "end": "2072339"
  },
  {
    "text": "And it also led to other problems in the present version of text. If you ever get this mess error message that said too much stretch for proper of line breaking.",
    "start": "2072340",
    "end": "2080740"
  },
  {
    "text": "This is because when you when you took the glue up to the subtracted the glue up today,",
    "start": "2080740",
    "end": "2090119"
  },
  {
    "text": "you got you've got infinity minus infinity, which which cancels out to zero. It didn't give you very much information as to because. Because the following point arithmetic, all the what you needed was, was, was, was wiped out.",
    "start": "2090120",
    "end": "2103370"
  },
  {
    "text": "The significant figures had had the number of fills in the paragraph but not the details so that you needed for the four line breaking.",
    "start": "2103370",
    "end": "2112180"
  },
  {
    "text": "So that was that wasn't working properly. And the only way to fix it would be to continue.",
    "start": "2112180",
    "end": "2118960"
  },
  {
    "text": "That same algorithm would have been to add make these active nodes very large. Keeping track of how much glue there was of Tydfil I feel at all.",
    "start": "2118960",
    "end": "2128440"
  },
  {
    "text": "And so on. And each of these and other 32 bits for each. For each active node. But still I wouldn't be good enough because if you had a large enough paragraph you'd overflow.",
    "start": "2128440",
    "end": "2138910"
  },
  {
    "text": "I said the other day, well who's gonna be caring about dimensions that get larger than seventeen or eight or whatever?",
    "start": "2138910",
    "end": "2144770"
  },
  {
    "text": "However, some someone feed is concerned and it's true that B minus they would never be 17 feet,",
    "start": "2144770",
    "end": "2151180"
  },
  {
    "text": "but from the beginning of the paragraph to a given point, might very well get get quite large.",
    "start": "2151180",
    "end": "2157300"
  },
  {
    "text": "In fact, we've had cases where we've seen paragraph's that run all the three pages and and,",
    "start": "2157300",
    "end": "2164420"
  },
  {
    "text": "you know, we're trying to find the optimum way to break those pages. By way, if you do that, if film memory in another way, probably then you can.",
    "start": "2164420",
    "end": "2173730"
  },
  {
    "text": "And you saw the triangular effect of this feasible line. So after you get into about thirty lines, you could just arbitrarily say, OK, break it here.",
    "start": "2173730",
    "end": "2181480"
  },
  {
    "text": "This is gonna be a good, good place to break in and get get rid of this paragraph.",
    "start": "2181480",
    "end": "2186580"
  },
  {
    "text": "But certainly we didn't want to worry about overflow, calculate total length up to here.",
    "start": "2186580",
    "end": "2193090"
  },
  {
    "text": "That would be even on reasonable paragraphs. This would this would give arithmetic problems.",
    "start": "2193090",
    "end": "2199030"
  },
  {
    "text": "So instead of that, I've I've got like I keep track only of relative distances.",
    "start": "2199030",
    "end": "2207370"
  },
  {
    "text": "And the distances from the first active node to here is that I keep.",
    "start": "2207370",
    "end": "2213100"
  },
  {
    "text": "So I keep track with the first active node to hear of it for every node. And then in my active list I have two kinds of nodes. I have active and active now another active node.",
    "start": "2213100",
    "end": "2223420"
  },
  {
    "text": "And then I have a call, a delta node. And then another active node.",
    "start": "2223420",
    "end": "2228549"
  },
  {
    "text": "Let's say a one, a two, a three and so on. So Delta nodes can also be in the active list now. And these are nodes that tell me the different.",
    "start": "2228550",
    "end": "2237970"
  },
  {
    "text": "This is the difference between from being from breaking at a two to breaking at a three.",
    "start": "2237970",
    "end": "2243490"
  },
  {
    "text": "So when I pass by a Delta node, it tells me to. It gives me the right information for for relative distances relative to A3.",
    "start": "2243490",
    "end": "2253990"
  },
  {
    "text": "While before I had relative distances relative to A2. So this is a this is a an extra feature which was added to the data structure in order to avoid",
    "start": "2253990",
    "end": "2265720"
  },
  {
    "text": "the problem of multiple precision arithmetic and also making all these active nodes larger.",
    "start": "2265720",
    "end": "2272119"
  },
  {
    "text": "But the expense of that was of several more modules of code and several more days of debugging time and.",
    "start": "2272120",
    "end": "2280330"
  },
  {
    "text": "And, you know, but it should run fast.",
    "start": "2280330",
    "end": "2287220"
  },
  {
    "text": "So it does. So Delta nodes are in there for this calculation of that.",
    "start": "2287220",
    "end": "2292480"
  },
  {
    "text": "I need to figure out the badness as as you go then.",
    "start": "2292480",
    "end": "2298030"
  },
  {
    "text": "Let's see if we can put ourselves in in Texas shoes. It's trying to determine whether P is a feasible break. It starts at the beginning of the active list.",
    "start": "2298030",
    "end": "2308890"
  },
  {
    "text": "And it has in some table already are the length of the line from A to P from the first node, an active list to P then.",
    "start": "2308890",
    "end": "2318819"
  },
  {
    "text": "OK. So it can then compute the badness and see if it's feasible.",
    "start": "2318820",
    "end": "2323890"
  },
  {
    "text": "And and then move to a two. Passes a delta node.",
    "start": "2323890",
    "end": "2329559"
  },
  {
    "text": "Adjust its tables of the distances and go on. Now the there's still more details to take care of when you when you do this because you,",
    "start": "2329560",
    "end": "2342490"
  },
  {
    "text": "you have to figure out to to remember that when when you break at the end of a line, the glue after that break disappears.",
    "start": "2342490",
    "end": "2353720"
  },
  {
    "text": "And so you really are considering when you want to figure out the distance from one break array to a break and B, what you really have is is is is B.",
    "start": "2353720",
    "end": "2366490"
  },
  {
    "text": "Well, I think I call it B Alpha of B, Nancy B, B minus alpha of A is the distance from now where this means the distance from the beginning",
    "start": "2366490",
    "end": "2381970"
  },
  {
    "text": "of the paragraph to before B B Beta four before an Alpha four after to the to a place after A.",
    "start": "2381970",
    "end": "2390220"
  },
  {
    "text": "So if you have a if you have a paragraph laid out here and here's B some glue say and here's A,",
    "start": "2390220",
    "end": "2397810"
  },
  {
    "text": "then the length of the line is going to be from the point after a up to the point before B it's not just the distance to B minus the distance dates.",
    "start": "2397810",
    "end": "2409210"
  },
  {
    "text": "This is to before B minus the distance after A. And so there's that little difference in there.",
    "start": "2409210",
    "end": "2415540"
  },
  {
    "text": "OK. So the delta node that we put in here is really Alpha A2 minus Alpha a three,",
    "start": "2415540",
    "end": "2425420"
  },
  {
    "text": "because we because if we're assuming that that we know and we're at this point, we have data of P minus alpha of a two.",
    "start": "2425420",
    "end": "2433780"
  },
  {
    "text": "And then when we pass the note, we want to get beta of P minus alpha of a three. So the correction Delta is equal to Alpha A2 minus Alpha a three.",
    "start": "2433780",
    "end": "2442960"
  },
  {
    "text": "That's that's the way you derive this formula. So this is the length of the line that we that we can then compare to the true",
    "start": "2442960",
    "end": "2452740"
  },
  {
    "text": "to the desired length of the of whatever line where we're worried about.",
    "start": "2452740",
    "end": "2459490"
  },
  {
    "text": "If the break is that a discretionary node, for example, simple case where it's a hyphen or an or not a hyphen, then we have to take into account a breakpoint here.",
    "start": "2459490",
    "end": "2470230"
  },
  {
    "text": "We have to say that the break before the hyphen covers a certain amount of text and the break after the hyphen is a certain amount of text.",
    "start": "2470230",
    "end": "2478580"
  },
  {
    "text": "And the meaning of this notation data in Alpha has to be properly defined for discretionary.",
    "start": "2478580",
    "end": "2484100"
  },
  {
    "text": "And I went around about three iterations before I finally had that one. Right. Now, the actual width of the line isn't exactly this, though.",
    "start": "2484100",
    "end": "2493390"
  },
  {
    "text": "There's another constant has to be thrown in because tech eighty two has introduced. Let's skip and rights which are added to every line of a paragraph.",
    "start": "2493390",
    "end": "2503050"
  },
  {
    "text": "This makes things like ragged, right? Fitting and centering very much simpler.",
    "start": "2503050",
    "end": "2508570"
  },
  {
    "text": "But it also meant that in my calculation I have to add. Background information gamma, which is the sum of the left skipping right skip,",
    "start": "2508570",
    "end": "2516970"
  },
  {
    "text": "and that gives me the truth to say so with all these qualifications, you see the ideas. We start out with some fairly simple,",
    "start": "2516970",
    "end": "2524130"
  },
  {
    "text": "simple ideas and add one more complication after another until you finally get something that can only be described in Web.",
    "start": "2524130",
    "end": "2532200"
  },
  {
    "text": "I think with with any hope of possible success, because the Web allows you to describe one idea at a time and string them together.",
    "start": "2532200",
    "end": "2538950"
  },
  {
    "text": "Otherwise it's everything is really a it is really too involved putting it together now.",
    "start": "2538950",
    "end": "2549130"
  },
  {
    "text": "OK, what more should I say about this except that we want. That is part of the inner loop. So we also wanted it to be fast.",
    "start": "2549130",
    "end": "2557910"
  },
  {
    "text": "And I calculated that, that the the the hyphenation algorithm would not have to be applied very often.",
    "start": "2557910",
    "end": "2571559"
  },
  {
    "text": "This is quite, quite important to add to the efficiency.",
    "start": "2571560",
    "end": "2580350"
  },
  {
    "text": "So how do we handle this problem of hyphenation? Well, here's what his Waco's the the algorithm goes in two passes and the first pass, no hyphenation take place.",
    "start": "2580350",
    "end": "2593250"
  },
  {
    "text": "And instead, we just keep on trying the algorithm, seeing what we can do.",
    "start": "2593250",
    "end": "2598410"
  },
  {
    "text": "Try to get the best, the best result. And unless the active list becomes empty.",
    "start": "2598410",
    "end": "2604180"
  },
  {
    "text": "Now, in the diagram that we have there, the. Every time I get to one of the feasible breaks.",
    "start": "2604180",
    "end": "2610950"
  },
  {
    "text": "There was always some way some escape out from below it. That's not always true. You can certainly get to a place where we're being feasible to get up there, but nothing feasible after that point.",
    "start": "2610950",
    "end": "2621570"
  },
  {
    "text": "And then if you are in a conventional type setting system, you'd be stuck. You'd have to you'd have to have a really bad line in here.",
    "start": "2621570",
    "end": "2628569"
  },
  {
    "text": "You can imagine backing up and then going down another route. But we we simultaneously are are are covering all all bases as we explore the we keep track of all the active nodes, all the other leads at once.",
    "start": "2628570",
    "end": "2641030"
  },
  {
    "text": "But sometimes all of your leads disappear. You got nothing active anymore. You stuck. OK, then you go to the second pass.",
    "start": "2641030",
    "end": "2649110"
  },
  {
    "text": "The second pass tries hyphenating, get out of it. And every word is hyphenated. Every word that that that meets certain conditions is hyphenating.",
    "start": "2649110",
    "end": "2662810"
  },
  {
    "text": "The first condition is that it's to be at least five letters. There's no point in trying to hyphenate a four letter word because tech is not going to",
    "start": "2662810",
    "end": "2669930"
  },
  {
    "text": "hyphenate ever after the first letter or or less than or less than three letters after.",
    "start": "2669930",
    "end": "2679869"
  },
  {
    "text": "So. So Tech will never hyphenate a hyphen something or other, and it will never hyphenate something.",
    "start": "2679870",
    "end": "2687510"
  },
  {
    "text": "E d Loy's put three letters after the hyphen and one and two before.",
    "start": "2687510",
    "end": "2693330"
  },
  {
    "text": "So that means that you've got to have at least five letters. What. So why bother trying to hyphenate a four letter word?",
    "start": "2693330",
    "end": "2700830"
  },
  {
    "text": "If it's if the word starts with an uppercase letter, you don't try to hyphenated unless the parameter uppercase hyphenation is is set on.",
    "start": "2700830",
    "end": "2709800"
  },
  {
    "text": "Right now we're putting it on by default or because the algorithm seems to work a lot, much better.",
    "start": "2709800",
    "end": "2714840"
  },
  {
    "text": "We thought it would on uppercase words. If there's something if it's if you're in the middle of a math formula, you don't try to hyphenate.",
    "start": "2714840",
    "end": "2724750"
  },
  {
    "text": "There are some conditions have to be satisfied. But otherwise, every every word passes this condition, this test.",
    "start": "2724750",
    "end": "2730800"
  },
  {
    "text": "And we and we have to have to submit it to the hyphenation algorithm. Well, the nice thing was that in in the entire book, art of computer programing, volume two, 700 pages worth of stuff.",
    "start": "2730800",
    "end": "2742830"
  },
  {
    "text": "We could test this on thousands of paragraphs. And we found out that the average number of hyphenation we had to try was one point two per paragraph.",
    "start": "2742830",
    "end": "2751320"
  },
  {
    "text": "That was because only one time in twelve did we have to go into the second pass. So most of time we can go through on the first pass, find a feasible way to do the paragraph without hyphenation,",
    "start": "2751320",
    "end": "2760830"
  },
  {
    "text": "even though our tolerance was extremely high so that we we had the tolerance so that no really bad spaces would would be allowed at all.",
    "start": "2760830",
    "end": "2772440"
  },
  {
    "text": "And the hyphenation that is seems to be kept down to us to not it not really considered an inner loop.",
    "start": "2772440",
    "end": "2781890"
  },
  {
    "text": "But if we do have to hyphenate a word and in the next lecture will be about hyphenation, if we if we do have to hyphenate a word, then hyphenation again just returns the word with discretion.",
    "start": "2781890",
    "end": "2793950"
  },
  {
    "text": "The same thing. The list is replaced by another list that puts in discretionary.",
    "start": "2793950",
    "end": "2800730"
  },
  {
    "text": "Instead in place of the word. So the soul of Intec precedes to go through the new list with this discretionary.",
    "start": "2800730",
    "end": "2809109"
  },
  {
    "text": "Is it? It's just as if that was. It by the user, applies the same algorithm on the second path.",
    "start": "2809110",
    "end": "2819750"
  },
  {
    "text": "You might say weird overfill boxes come from. And that I can tell you that's in the second pass.",
    "start": "2819750",
    "end": "2827730"
  },
  {
    "text": "We never allow the active list to become empty. The activity becomes totally empty.",
    "start": "2827730",
    "end": "2832890"
  },
  {
    "text": "We'd be sunk. We'd have no. No. Because at the end of the paragraph, we have to go through the passive notes.",
    "start": "2832890",
    "end": "2838900"
  },
  {
    "text": "And I'll tell you what, the end of a paragraph in a minute. But we lose all contact with with the paragraph if the activist becomes empty.",
    "start": "2838900",
    "end": "2848539"
  },
  {
    "text": "So so there is a time when we determine that we're just about to lose the active list.",
    "start": "2848540",
    "end": "2856870"
  },
  {
    "text": "And at this point, we we leave something active, even though it's not feasible.",
    "start": "2856870",
    "end": "2864420"
  },
  {
    "text": "And that's where Overfill Box becomes created. Now, the test for when that happened, I might as well find the module exactly where it is.",
    "start": "2864420",
    "end": "2874740"
  },
  {
    "text": "But that was the source of of the most difficult bugs in the in the present version of tech.",
    "start": "2874740",
    "end": "2881660"
  },
  {
    "text": "And I and I changed that at least four times before getting it right. If I had to see that there was one one really subtle part of that is to name the one that was that was the hardest for me anyway.",
    "start": "2881660",
    "end": "2898650"
  },
  {
    "text": "It would have to be that particular one. And let's see if I can find it.",
    "start": "2898650",
    "end": "2909299"
  },
  {
    "text": "Let's see. Did you not lose all active nodes here?",
    "start": "2909300",
    "end": "2916720"
  },
  {
    "text": "744 during the second pass. We do not lose all active nodes lest we lose touch with the line breaks already found Kocho shown here.",
    "start": "2916720",
    "end": "2926520"
  },
  {
    "text": "Make sure that such catastrophe doesn't happen by permitting over fallbacks as a last resort. And then it says readers who seek to improve texture therefore think thrice before daring to make any changes here.",
    "start": "2926520",
    "end": "2937140"
  },
  {
    "text": "This little test, if second pass and minimum demerits equal awful bad and link viruses last active and PVR equals active.",
    "start": "2937140",
    "end": "2945839"
  },
  {
    "text": "All four of those were added one at a time, I think, and Jinkx and replacing some other ones.",
    "start": "2945840",
    "end": "2951180"
  },
  {
    "text": "Then I changed the badness to zero and that it.",
    "start": "2951180",
    "end": "2961089"
  },
  {
    "text": "It might take me a while to reconstruct exactly all the reasoning behind that one line there, but.",
    "start": "2961090",
    "end": "2966120"
  },
  {
    "text": "But the computer of course doesn't know that it was hard to think of. So the computer will just go as fast as ever when it gets there.",
    "start": "2966120",
    "end": "2973410"
  },
  {
    "text": "But when we're reading it, we we might stop a minute to think why, whether through the OK.",
    "start": "2973410",
    "end": "2981180"
  },
  {
    "text": "That was the part where the overfill boxes come in. And course, if somebody doesn't one or four boxes by setting the times to ten thousand, you don't get any.",
    "start": "2981180",
    "end": "2990960"
  },
  {
    "text": "You just get under ones when when there's nothing. When there's nothing there.",
    "start": "2990960",
    "end": "2996480"
  },
  {
    "text": "I find that for my purposes there was much better to see overfill because then I could see where and how much room there was.",
    "start": "2996480",
    "end": "3004280"
  },
  {
    "text": "I wanted to make a change anyway. I didn't want to leave a glitch in my final output.",
    "start": "3004280",
    "end": "3010130"
  },
  {
    "text": "If I, if I don't care about glitches, I, I said time is very high. But if I do care then I want to see this awful box because I can look right at it and see how much it will fit.",
    "start": "3010130",
    "end": "3019790"
  },
  {
    "text": "Otherwise if I, if it's stretched that one and put the carry over within the next line takes it.",
    "start": "3019790",
    "end": "3025130"
  },
  {
    "text": "You know, I have to try to estimate the sum of all those spaces on the previous line and how much they would shrink down and how much room I have.",
    "start": "3025130",
    "end": "3032630"
  },
  {
    "text": "This is a visual way to really see what what kind of correction to make. Now, I mentioned, though, we've got to figure out what to do at the end.",
    "start": "3032630",
    "end": "3042289"
  },
  {
    "text": "We come to the end of the paragraph and then they they think is too to actually make the boxes.",
    "start": "3042290",
    "end": "3052910"
  },
  {
    "text": "So at this point, we've got a whole mass of of a whole mass of passive notes,",
    "start": "3052910",
    "end": "3061849"
  },
  {
    "text": "like for every blue mark in that line, we've got one of these little passive note boxes. These are all strung together by links. Each one point to the previous one just so that at the end I have a pointer passive to the last one.",
    "start": "3061850",
    "end": "3074990"
  },
  {
    "text": "And at the end, I'll just recycle all these nodes by going through these links and they all get sent to available storage.",
    "start": "3074990",
    "end": "3083750"
  },
  {
    "text": "But they also contain pointer to the breakpoint where they are discretionary or something like that or glue or something.",
    "start": "3083750",
    "end": "3095900"
  },
  {
    "text": "And they also contain a pointer to the best previous place to go. So this one will say the best one for that was here. This one for that was here.",
    "start": "3095900",
    "end": "3103730"
  },
  {
    "text": "So let's go over to this slide, for example, at the end of a paragraph.",
    "start": "3103730",
    "end": "3112770"
  },
  {
    "text": "The best previous thing from thing must have been her.",
    "start": "3112770",
    "end": "3117960"
  },
  {
    "text": "So I would have a back link from this one back to her and from her, it would tell me back to ball.",
    "start": "3117960",
    "end": "3126000"
  },
  {
    "text": "And so the pointer you see. And the way I've calculated those was as I was making this thing from the from the beginning, I would keep track for each of these.",
    "start": "3126000",
    "end": "3134609"
  },
  {
    "text": "I would write down the minimum totally merit's from beginning to hear. And then the way I got to it.",
    "start": "3134610",
    "end": "3139990"
  },
  {
    "text": "What was the last step in that chain? So by going back from these back links, that's what tells us how to do the paragraph.",
    "start": "3139990",
    "end": "3147690"
  },
  {
    "text": "And so I. So at the end of the paragraph, I've I've got only one active note, and it's this one.",
    "start": "3147690",
    "end": "3152760"
  },
  {
    "text": "Then I make it passive. When I look at the corresponding passenger or the passenger points me back to her that pass pointing back to ball and so on.",
    "start": "3152760",
    "end": "3159050"
  },
  {
    "text": "I'll reconstruct all of the setting, all of the lines as they're as they're given there. So I have to reverse those links so I can do them in the forward order.",
    "start": "3159050",
    "end": "3167670"
  },
  {
    "text": "So I go through and I started my best my best passive node. I go through and I follow. It's lengthy on maybe 10 lines. So it goes down to the best ninth line, eighth line all the way back to the beginning.",
    "start": "3167670",
    "end": "3178920"
  },
  {
    "text": "I reverse those links so that I now have the appearance of clairvoyance. The beginning tells me the best way to go was to go to this one. And these links are now going this way and telling me the right thing to do.",
    "start": "3178920",
    "end": "3190470"
  },
  {
    "text": "So the remaining thing to do is take my, my, my horizontal list and break it up at these breakpoints.",
    "start": "3190470",
    "end": "3196770"
  },
  {
    "text": "These these things will indicate the 10 break points as to where I had to break the list.",
    "start": "3196770",
    "end": "3203640"
  },
  {
    "text": "Satterberg that occurred in here a couple years after the first tech was was apparently working well, was that everyone said, well,",
    "start": "3203640",
    "end": "3214140"
  },
  {
    "text": "we've got a weird case where where there would be a break point with some glue and then there would be some penalty after here,",
    "start": "3214140",
    "end": "3222099"
  },
  {
    "text": "say, and then maybe some more glue and this would be wiped out. Another penalty over here. So that usually when we when we break a glue, then we we also cancel off all penalties that immediately follow it.",
    "start": "3222100",
    "end": "3236430"
  },
  {
    "text": "But what actually happened one day was that this penalty turned out to be one of my best break,",
    "start": "3236430",
    "end": "3242880"
  },
  {
    "text": "one of my best breaks, even though this glue was also one of my best breaks. And when I when I was going through boxing, the whole thing, I broke here.",
    "start": "3242880",
    "end": "3250890"
  },
  {
    "text": "I said, OK, wipe out all the stuff. After all I know is after it here. And now I come to my next one. And it was supposed to go here and I was out in my available space listin and starting to point to nothing.",
    "start": "3250890",
    "end": "3260940"
  },
  {
    "text": "And you can imagine all [INAUDIBLE] would break all heck would break loose at this point. So now this is for this one subtlety.",
    "start": "3260940",
    "end": "3270750"
  },
  {
    "text": "That has to be what these breakpoints might actually point to knows that are that are wiped up and usually they don't.",
    "start": "3270750",
    "end": "3276390"
  },
  {
    "text": "And usually that means that if it's glue, you wipe out the glue here and any penalties that follow it and then you get to a box or a character that begins the next line.",
    "start": "3276390",
    "end": "3284210"
  },
  {
    "text": "This becomes your next line. So here we get a box that you send to the pack routine.",
    "start": "3284210",
    "end": "3289290"
  },
  {
    "text": "Each pack routine does like we did before when we made in each box, computes the height and depth and so on.",
    "start": "3289290",
    "end": "3296090"
  },
  {
    "text": "It will give the error message about overfill box. And so this we build now a vertical list of vertical is containing the first line of text",
    "start": "3296090",
    "end": "3308130"
  },
  {
    "text": "and then baseline skip calculation is made between all of these and free final text.",
    "start": "3308130",
    "end": "3313230"
  },
  {
    "text": "We we could build up another vertical list of each pack routine, as we send it, of a sublist of this original paragraph to be box eight pack routine.",
    "start": "3313230",
    "end": "3322530"
  },
  {
    "text": "Not only calculates this to height and depth and width of these box and unglue setting and things of the box, but it also looks for Sen.",
    "start": "3322530",
    "end": "3332470"
  },
  {
    "text": "I know looks for insert nodes and we adjust nodes that are in that box and those those nodes get appended right after the box.",
    "start": "3332470",
    "end": "3343300"
  },
  {
    "text": "So it removes them from inside the box and they come outside the box. That's how we adjust things like that and get worked out.",
    "start": "3343300",
    "end": "3350940"
  },
  {
    "text": "We also look for penalties, for example, between the first line, the second line, a window line penalty is inserted here.",
    "start": "3350940",
    "end": "3358920"
  },
  {
    "text": "So that so that there won't be a break between these two lines unless you pay the penalty for wheedles.",
    "start": "3358920",
    "end": "3366480"
  },
  {
    "text": "There's a penalty for a break after a line that ends with a hyphen. So we also keep track of that as to whether or not there's a hyphenated because we don't like to break a page.",
    "start": "3366480",
    "end": "3376619"
  },
  {
    "text": "These breaks are for four page breaks. So don't like to break a page after a hyphen.",
    "start": "3376620",
    "end": "3382350"
  },
  {
    "text": "If we if we if we don't have to. Yeah.",
    "start": "3382350",
    "end": "3389810"
  },
  {
    "text": "And what about Witling Line at the top of the next page. What we're doing lines at the top of the next page. Yeah.",
    "start": "3389810",
    "end": "3397390"
  },
  {
    "text": "So the second last book, The Widow Penalty, is also inserted here.",
    "start": "3397390",
    "end": "3404069"
  },
  {
    "text": "There's a final will. There's a there's a final widow penalty. There's a display widow penalty or another.",
    "start": "3404070",
    "end": "3409860"
  },
  {
    "text": "This penalty changes to. Whether it is a displayed equation following or not, publishers tend to some publisher tend to think it's much better.",
    "start": "3409860",
    "end": "3418740"
  },
  {
    "text": "Well, I think they all think it's infinitely better to start a line with a page with a widow before display and to start with the display itself.",
    "start": "3418740",
    "end": "3428190"
  },
  {
    "text": "And so that is a separate thing and present version of tech. That's zero. But now it's a special parameter with there's no reason why we couldn't make it.",
    "start": "3428190",
    "end": "3435250"
  },
  {
    "text": "We have a final. We have a pre free display penalty or something like that display window penalty, it's called, which gets added before a display.",
    "start": "3435250",
    "end": "3444000"
  },
  {
    "text": "But otherwise, this one gets there at the beginning and at the end there's also interline penalty which gets added to all of these guys.",
    "start": "3444000",
    "end": "3453550"
  },
  {
    "text": "And that we recommend for footnotes. If you don't want if you want to make people pay a penalty for footnotes.",
    "start": "3453550",
    "end": "3461370"
  },
  {
    "text": "You pay the interline penalty plus the widow penalty for here in a footnote and just the interline penalty in here.",
    "start": "3461370",
    "end": "3469130"
  },
  {
    "text": "And anyway, those are those those penalties are passed in vertical mail. This is now a bunch of boxes in vertical mode.",
    "start": "3469130",
    "end": "3476339"
  },
  {
    "text": "And the page builder has to decide how to break that into pages. The page really does it one page at a time on the fly and uses a calculation much",
    "start": "3476340",
    "end": "3485730"
  },
  {
    "text": "simpler than the than the paragraph builder because it only has to look at the badness,",
    "start": "3485730",
    "end": "3493290"
  },
  {
    "text": "not demerits. It only takes the badness to go for the current page and finds the place where the badness is and plus penalties is as small as possible.",
    "start": "3493290",
    "end": "3504960"
  },
  {
    "text": "So the way this this program is organized, then the first section about breaking paragraphs into lines is section thirty seven, module seven or four.",
    "start": "3504960",
    "end": "3516750"
  },
  {
    "text": "And that is basically the tribe break subroutine and all the all the all the details about how",
    "start": "3516750",
    "end": "3522660"
  },
  {
    "text": "you calculate these delta nodes and keep track of the the main maintaining the active list.",
    "start": "3522660",
    "end": "3528420"
  },
  {
    "text": "Then Section 38 breaking paragraphs in lines continued. That's the part that talks about running through the list, telling whether or not it's illegal.",
    "start": "3528420",
    "end": "3538440"
  },
  {
    "text": "It's legal to break here calling, try break at those places and SEC and then of doing the final packaging afterwards.",
    "start": "3538440",
    "end": "3549170"
  },
  {
    "text": "The final packaging is done by a separate procedure because again, this would have otherwise been a procedure that that some Pascale's wouldn't have been able to handle the high.",
    "start": "3549170",
    "end": "3560020"
  },
  {
    "text": "And now I mentioned that hyphenation is actually as much code as the as Pyhrric as breaking paragraphs.",
    "start": "3560020",
    "end": "3566010"
  },
  {
    "text": "And that's the subject of the next lecture, which will which will start at a half an hour.",
    "start": "3566010",
    "end": "3573480"
  },
  {
    "text": "Question, though, are rivers considered all here or they just don't occur any more? Yeah. Rivers are not looked at, as you can see in this algorithm.",
    "start": "3573480",
    "end": "3581670"
  },
  {
    "text": "I don't have it. But the experience has been that that with good tolerances.",
    "start": "3581670",
    "end": "3588089"
  },
  {
    "text": "Rivers just simply are very rare. But rivers definitely show up when you have wide spacing.",
    "start": "3588090",
    "end": "3596550"
  },
  {
    "text": "And when you use the looseness, like I didn't mentioned looseness. If somebody says looseness equals one, then the algorithm, well,",
    "start": "3596550",
    "end": "3608160"
  },
  {
    "text": "we'll figure out the best way to get to the end of a paragraph and find out how many lines that maybe it was eight lines.",
    "start": "3608160",
    "end": "3615359"
  },
  {
    "text": "And then it will find the best nine, not line nine line way. So we will run through the list at the end.",
    "start": "3615360",
    "end": "3624780"
  },
  {
    "text": "At the end, all the active nodes are the only I could notice the end of paragraph node. And those are all stopped. Those are all marked with how many lines it took to get here.",
    "start": "3624780",
    "end": "3633960"
  },
  {
    "text": "And so we can say the best way to get here in nine lines, the best way to get here in ten lines. And when you when you make the paragraph a little loose, then you'll find the best 10 line way to do it.",
    "start": "3633960",
    "end": "3646470"
  },
  {
    "text": "And usually that looks fine. But then somebody says looseness three, something like that. I don't have a slide here, but we can take this paragraph and set it with looseness.",
    "start": "3646470",
    "end": "3654420"
  },
  {
    "text": "Zero, one, two and three and minus one. Actually, you can actually get into one. One fewer line. And by the time you see looseness, two rivers start to appear.",
    "start": "3654420",
    "end": "3667490"
  },
  {
    "text": "And and this is this is typical of what? Of what happens if.",
    "start": "3667490",
    "end": "3673119"
  },
  {
    "text": "But but reverse also. So generally go away. Except there's another case where where I've noticed them.",
    "start": "3673120",
    "end": "3682320"
  },
  {
    "text": "We had we types that a paragraph where out of an old newspaper which was listing the people who had attended a wedding,",
    "start": "3682320",
    "end": "3689640"
  },
  {
    "text": "it was Mr. and Mrs. Smith, comma, Mr. and Mrs. Jones, comma. And so on. And you you you've got a lot of root misters lining up at the left hand margin.",
    "start": "3689640",
    "end": "3699200"
  },
  {
    "text": "The tech doesn't keep track of that. That has to be manually broken. The there's also a theory, theoretical proof that to eliminate RIVERS' would be enpi complete immunity.",
    "start": "3699200",
    "end": "3709160"
  },
  {
    "text": "It would be a very difficult problem. To do it in the general case, and since we found that it was it was not a serious problem anymore.",
    "start": "3709160",
    "end": "3720980"
  },
  {
    "text": "There's no attempt to do anything about rivers here. Another guy was it was actually if somebody is really believes in this non froggie writing and starts to use only three and four letter words,",
    "start": "3720980",
    "end": "3733609"
  },
  {
    "text": "then again, you see Rivers, because at the end you have all three that are words they're going to line up,",
    "start": "3733610",
    "end": "3739190"
  },
  {
    "text": "but there's going to be a whitespace near the near the margin on both sides of the paragraph. Got to use a few big words once a while just just to kill the rivers. Oh, yes.",
    "start": "3739190",
    "end": "3751090"
  },
  {
    "text": "One more question. In the example on the screen, you've got groups that involve population despite the fact that the first group doesn't.",
    "start": "3751090",
    "end": "3762640"
  },
  {
    "text": "That's true. There was a penalty associated with this hyphen.",
    "start": "3762640",
    "end": "3769990"
  },
  {
    "text": "That flight 34 40 was rather large because the penalty was added in there and that probably made this branch on.",
    "start": "3769990",
    "end": "3781619"
  },
  {
    "text": "You know, if if if this one had gotten in trouble, then then hyphenation would have been taken.",
    "start": "3781620",
    "end": "3789130"
  },
  {
    "text": "But this branch didn't look too good after we added up all the other things. But it did try the hyphen because in this particular paragraph, I.",
    "start": "3789130",
    "end": "3797650"
  },
  {
    "text": "Oh, I see. Because you talk about my second passing. No, in this case, I was I manually putting all the hyphens because we're making a lot of a lot of tests on this on this particular paragraph on very narrow sizes.",
    "start": "3797650",
    "end": "3811480"
  },
  {
    "text": "And we wanted to make sure that that we would that we would get to the truly optimum setting in this one series.",
    "start": "3811480",
    "end": "3818440"
  },
  {
    "text": "We imagined that we were going second pass on this. Otherwise, we wouldn't even look at that one by hyphenation.",
    "start": "3818440",
    "end": "3828099"
  },
  {
    "text": "I didn't say how. I didn't allow all possible license. I after FAA, I didn't consider hyphenating because I had intended to become rather conservative about that, where hyphens should be allowed.",
    "start": "3828100",
    "end": "3844990"
  },
  {
    "text": "In my own opinion, I believe you should be able to pronounce the fragment of the sentence before looking.",
    "start": "3844990",
    "end": "3850810"
  },
  {
    "text": "And if if you stopped after F.A.A., it would have you might have think it meant farther and you would say far.",
    "start": "3850810",
    "end": "3857260"
  },
  {
    "text": "And then you come the US oh fee for it, you know. And. And so I try to I would like to to try to avoid hyphenation saw in places that you",
    "start": "3857260",
    "end": "3867880"
  },
  {
    "text": "couldn't pronounce the fragment that you've seen first without looking on the next page, your next line. OK. Let's meet at three thirty.",
    "start": "3867880",
    "end": "3879683"
  }
]