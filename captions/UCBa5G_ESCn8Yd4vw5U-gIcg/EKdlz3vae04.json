[
  {
    "start": "0",
    "end": "5620"
  },
  {
    "text": "Hi, everyone. Welcome back. Lecture 2. So today, we will talk\nabout prefix-free codes",
    "start": "5620",
    "end": "14010"
  },
  {
    "text": "and Kraft's inequality, which\nwe will learn about shortly. Right, so let's start with\nthe quiz from last time, which",
    "start": "14010",
    "end": "22770"
  },
  {
    "text": "will also function as a\nrecap of the last lecture. ",
    "start": "22770",
    "end": "28199"
  },
  {
    "text": "OK, so we want to design\nfixed-length codes for an alphabet of size 9. And the first question was,\nwhat is the length in bits",
    "start": "28200",
    "end": "35670"
  },
  {
    "text": "per symbol for such a code? And in the last class,\nwe saw this formula that if your alphabet\nis like this x,",
    "start": "35670",
    "end": "43080"
  },
  {
    "text": "then the bits per symbol\nis log base 2 the size",
    "start": "43080",
    "end": "52780"
  },
  {
    "text": "of the alphabet,\nthe ceiling of that. So in simple words,\nbasically you",
    "start": "52780",
    "end": "58960"
  },
  {
    "text": "find the nearest power of two,\nwhich is bigger than your size. So 9 lies between 8 and 16.",
    "start": "58960",
    "end": "67650"
  },
  {
    "text": "So you take 16-- you take log base 2\nof 16, which is 4.",
    "start": "67650",
    "end": "73230"
  },
  {
    "text": "And so 4 is the\nnumber of bits you need if you are\ngoing to represent this in a fixed-length code.",
    "start": "73230",
    "end": "82100"
  },
  {
    "text": "Is Everybody OK with that? I think most of you got this\none right, so that's good. ",
    "start": "82100",
    "end": "89150"
  },
  {
    "text": "OK, so one thing you\nwill immediately observe is if your alphabet\nhas size 8, then",
    "start": "89150",
    "end": "94190"
  },
  {
    "text": "you're spending\nlog 8 equal to 3. If it's 16, you're spending\nlog 16, which is 4.",
    "start": "94190",
    "end": "103350"
  },
  {
    "text": "So powers of 2, this seems\nto be working really nicely. But for 9, you see clearly--",
    "start": "103350",
    "end": "108990"
  },
  {
    "text": "you want this, right? This is what you want. This is somewhere\nbetween 3 and 4. But this is not what you got.",
    "start": "108990",
    "end": "115050"
  },
  {
    "text": "You got 4, which just\nseems suboptimal. So this question was trying\nto introduce you to one idea",
    "start": "115050",
    "end": "122250"
  },
  {
    "text": "to make it better. So the idea is simple. Rather than encoding\none symbol at a time,",
    "start": "122250",
    "end": "128369"
  },
  {
    "text": "you encode symbols\nin blocks of two. So if your alphabet was\nlike A, B, C, D, up to H, I,",
    "start": "128370",
    "end": "141569"
  },
  {
    "text": "so the original code, what you\nwould do is A becomes 0000, B becomes 0001, so on, up to I.",
    "start": "141570",
    "end": "150235"
  },
  {
    "text": "Now what you will do\nis you will create a new code, which is like AA,\nAB, AC, AD, dot, dot, dot,",
    "start": "150235",
    "end": "158080"
  },
  {
    "text": "up to II.  So effectively,\nwhat you're doing is",
    "start": "158080",
    "end": "163519"
  },
  {
    "text": "you're creating an\nalphabet of size 81. You're creating the product\nalphabet of these two. And then we asked what\nis the length in bits",
    "start": "163520",
    "end": "170390"
  },
  {
    "text": "per symbol for this code-- like a fixed-length code\napplied on blocks of two.",
    "start": "170390",
    "end": "178800"
  },
  {
    "text": "Here, there were\nmistakes, both on our side because we made a typo in\nthe next question, which",
    "start": "178800",
    "end": "186070"
  },
  {
    "text": "led to some of the students\ngetting this wrong. But I think you got\nthe concept so again,",
    "start": "186070",
    "end": "191603"
  },
  {
    "text": "we use the same trick. We know that 81 is less\nthan or equal to 128 and greater than 64.",
    "start": "191603",
    "end": "196719"
  },
  {
    "text": "This is 2 power 7. This is 2 power 6. So really, if you calculate\nthis, this will be 7.",
    "start": "196720",
    "end": "205690"
  },
  {
    "text": "So many of you got it\ncorrect that you need 7 bits to represent this pair.",
    "start": "205690",
    "end": "210939"
  },
  {
    "text": "So AA becomes like 7 bits. So this becomes 0000000.",
    "start": "210940",
    "end": "216640"
  },
  {
    "text": "And then so on for\nthe other guys. However, the question we\nasked was bits per symbol,",
    "start": "216640",
    "end": "222370"
  },
  {
    "text": "not bits per block. So here, the bits\nper symbol is-- each block has two symbols.",
    "start": "222370",
    "end": "228430"
  },
  {
    "text": "So just to make it very\nclear, block is like AA,",
    "start": "228430",
    "end": "233709"
  },
  {
    "text": "and symbol is like A-- so each symbol and then\nyou have a block of two.",
    "start": "233710",
    "end": "240920"
  },
  {
    "text": "So the length in\nbits per symbol is this divided by 2,\nwhich is this divided by 2, which is 3.5 here.",
    "start": "240920",
    "end": "249920"
  },
  {
    "text": "And those who wrote seven,\nwe will still give you marks because we made a\nmistake in the next part.",
    "start": "249920",
    "end": "257028"
  },
  {
    "text": "So let me read the question. So now the alphabet size is\n81 because we will be encoding pairs of symbols together.",
    "start": "257029",
    "end": "262760"
  },
  {
    "text": "So the length in bits per--\nso this was the typo we made; It should be bits per block--",
    "start": "262760",
    "end": "267979"
  },
  {
    "text": "is log 81 7. However, we are encoding\nblocks of two symbols, so the length in bits per\nsymbol is this divided by 2 3.5.",
    "start": "267980",
    "end": "276950"
  },
  {
    "text": "And did working in blocks of\ntwo give a better compression ratio? And I think most of\nyou got it right.",
    "start": "276950",
    "end": "283430"
  },
  {
    "text": "The answer is yes. So we went from\n4 bits per base-- 4 bits per symbol when we were\nencoding them one at a time",
    "start": "283430",
    "end": "290389"
  },
  {
    "text": "versus like 3.5. I wanted to do this-- can someone be kind and tell\nme what is log 9 base 2?",
    "start": "290390",
    "end": "300190"
  },
  {
    "text": "I just want to see how\nclose we got to that. ",
    "start": "300190",
    "end": "305470"
  },
  {
    "text": "It's like 3.17. OK. Yeah, 9 is very\nclose to 8, right?",
    "start": "305470",
    "end": "310650"
  },
  {
    "text": "So we assume it's only a little\nbit above log 8, which is 3. So we got to 3.5.",
    "start": "310650",
    "end": "316930"
  },
  {
    "text": "We didn't quite get to log 9. Can somebody suggest how\nI can get even closer to this many bits per symbol?",
    "start": "316930",
    "end": "324705"
  },
  {
    "text": " Larger blocks? Yeah, very good.",
    "start": "324705",
    "end": "330050"
  },
  {
    "text": "The answer was larger\nblocks, simple idea. Instead of doing two at a\ntime, you do three at a time.",
    "start": "330050",
    "end": "335280"
  },
  {
    "text": "So you have nine cubed\npossibilities and so on. And you can keep going. And you can show\nactually if you just",
    "start": "335280",
    "end": "344030"
  },
  {
    "text": "do some math that you\nwill actually eventually converge to 3.17.",
    "start": "344030",
    "end": "349410"
  },
  {
    "text": "And we will see this sort of\nscheme and even better ideas to achieve this because you\ncan see that this is not",
    "start": "349410",
    "end": "355259"
  },
  {
    "text": "particularly optimal. Your alphabet is just\ngrowing exponentially as you make your block\nbigger and bigger.",
    "start": "355260",
    "end": "361410"
  },
  {
    "text": "So we will come back to this. For now, I guess\njust notice that you can do better than\nfixed-length codes",
    "start": "361410",
    "end": "366870"
  },
  {
    "text": "by using some clever ideas. OK, any questions on\nthis first question?",
    "start": "366870",
    "end": "374770"
  },
  {
    "text": "OK.  Second one is very simple.",
    "start": "374770",
    "end": "380225"
  },
  {
    "text": "This is the sort\nof quiz question like you listen in class and\nyou solve it like in a second basically.",
    "start": "380225",
    "end": "385620"
  },
  {
    "text": " Yeah, I think everybody\nhas got this right,",
    "start": "385620",
    "end": "390810"
  },
  {
    "text": "but let me quickly do it. So the length-- so\nthe question is, you are given a\nrandom sequence, which",
    "start": "390810",
    "end": "397890"
  },
  {
    "text": "is sampled from some\nprobability distribution, and you encode it\nwith this code.",
    "start": "397890",
    "end": "404430"
  },
  {
    "text": "You want to compute\nthe expected code length, which is our usual\nmetric for determining",
    "start": "404430",
    "end": "410850"
  },
  {
    "text": "the goodness of a code. So the length of each code word,\nyou can just write 1, 2, 2.",
    "start": "410850",
    "end": "416850"
  },
  {
    "text": "And then you can\ncalculate the expectation. This is just making sure you\nremember your probability",
    "start": "416850",
    "end": "422850"
  },
  {
    "text": "so PA times length\nof A plus PB times length of B plus PC\ntimes length of C,",
    "start": "422850",
    "end": "433530"
  },
  {
    "text": "which is 1 plus 0.3 times 2.",
    "start": "433530",
    "end": "441135"
  },
  {
    "start": "441135",
    "end": "448990"
  },
  {
    "text": "OK, 1.5-- I hope\nI got it right-- bits per symbol.",
    "start": "448990",
    "end": "455200"
  },
  {
    "text": "I find it useful to always\nwrite the unit bits per symbol because that way you\ndon't make mistakes, like the mistake that\nwe made in the question.",
    "start": "455200",
    "end": "465670"
  },
  {
    "text": "OK, any questions on this?  OK, good.",
    "start": "465670",
    "end": "473550"
  },
  {
    "text": "OK, I gave an exercise in the\nlast class to decode this. Was anybody able to decode?",
    "start": "473550",
    "end": "479265"
  },
  {
    "text": " So this was the code we gave. And I wrote down a\nencoded sequence,",
    "start": "479265",
    "end": "487670"
  },
  {
    "text": "and I wanted you to get back\nto the original sequence.",
    "start": "487670",
    "end": "493760"
  },
  {
    "text": "I see a couple of hands. Anybody else? ",
    "start": "493760",
    "end": "499250"
  },
  {
    "text": "OK, let me ask\nyou for the first, and then I will ask\nyou for the second.",
    "start": "499250",
    "end": "504340"
  },
  {
    "text": "So what's the first symbol,\nfirst recorded symbol? D. So the answer given\nis D. And why is it D?",
    "start": "504340",
    "end": "512659"
  },
  {
    "text": "Because the only column\nthat starts with a 1 and then has another one\nand has another one is D.",
    "start": "512659",
    "end": "518400"
  },
  {
    "text": "Right. And the answer is\nthat-- the reason why-- it can only be D,\nright, because you have",
    "start": "518400",
    "end": "523580"
  },
  {
    "text": "a code word which is like 111. If it was A, then it\nmust have a 0 somewhere.",
    "start": "523580",
    "end": "529560"
  },
  {
    "text": "And if it is B,\nthen one 0, so on. So there is only one\npossibility really. And we'll come back to\nthis later in the lecture.",
    "start": "529560",
    "end": "536100"
  },
  {
    "text": "The next one. Yeah, so the next\nletter would be C. And then we basically can\njust keep reading each letter",
    "start": "536100",
    "end": "542430"
  },
  {
    "text": "until we get to a 0. ",
    "start": "542430",
    "end": "548170"
  },
  {
    "text": "That's a good way of thinking. So the answer was\nyou just keep going",
    "start": "548170",
    "end": "553269"
  },
  {
    "text": "until you hit a 0 because\nof the particular way this code is structured. When you hit a 0--",
    "start": "553270",
    "end": "558730"
  },
  {
    "text": "if you have three 1's\nin a row without a 0, then you know it's a\nD. If you have two 1's and then a 0, then you\nknow it's a C, and so on.",
    "start": "558730",
    "end": "566920"
  },
  {
    "text": "Let me decode a couple now. So after this, you have 1. So when you see a 1, you\nknow it's either B, C, or D.",
    "start": "566920",
    "end": "575710"
  },
  {
    "text": "It can't be A, so\nthat's eliminated. And then you see a 0. So you immediately\nknow it has to be",
    "start": "575710",
    "end": "582640"
  },
  {
    "text": "a B. Because if it was a\nC, then it will have a 11, and D also will have a 11. So it has to be a B. Sorry.",
    "start": "582640",
    "end": "590865"
  },
  {
    "text": " And then you see a 0, and you\nknow only one code word starts",
    "start": "590865",
    "end": "597150"
  },
  {
    "text": "with a 0, which is\nan A, and so on. I hope you are\ndecoding this at home.",
    "start": "597150",
    "end": "604200"
  },
  {
    "text": "But I hope you get the\ngist that even if you have a variable length code-- this was a variable\nlength code, and last",
    "start": "604200",
    "end": "610378"
  },
  {
    "text": "lecture we had some concerns\nfrom students that how will you decode it. But you can see there\nare variable length",
    "start": "610378",
    "end": "616950"
  },
  {
    "text": "codes that can be decoded. And this is one example. And we'll look at\nit in more detail",
    "start": "616950",
    "end": "621960"
  },
  {
    "text": "and characterize when exactly\ncan you decode these things.",
    "start": "621960",
    "end": "627640"
  },
  {
    "text": "Any questions on this? Anybody who wasn't\nable to decode and doesn't fully understand\nthe process right now?",
    "start": "627640",
    "end": "636140"
  },
  {
    "text": " OK. And we will go through an\nactual algorithm for those",
    "start": "636140",
    "end": "642300"
  },
  {
    "text": "who like to think in that way. Right. ",
    "start": "642300",
    "end": "648920"
  },
  {
    "text": "OK, so the outline for today-- no sense going through\nthe list like you will-- we'll get to them\nwhen we get to them.",
    "start": "648920",
    "end": "655100"
  },
  {
    "text": "But the first item\nis we will define what do we mean by lossless\ncompression in this context.",
    "start": "655100",
    "end": "660470"
  },
  {
    "text": "And we will discuss two\nspecific categories of codes. ",
    "start": "660470",
    "end": "678810"
  },
  {
    "text": "OK, so I will make a-- I will write down\na few codes, and I will ask you whether\nthey are lossless or not.",
    "start": "678810",
    "end": "685305"
  },
  {
    "start": "685305",
    "end": "692700"
  },
  {
    "text": "OK, is this lossless? No. I hear no.",
    "start": "692700",
    "end": "698620"
  },
  {
    "text": "Why is it not lossless? ",
    "start": "698620",
    "end": "704475"
  },
  {
    "text": "Because of the ambiguity\nof the symbols. Yeah, because of the\nambiguity in the sense that A and B have the same\nencoding, so clearly--",
    "start": "704475",
    "end": "710600"
  },
  {
    "text": "if you see a 0-- you only see 0's,\nso you can never tell whether A or B\nwas transmitted, right?",
    "start": "710600",
    "end": "716750"
  },
  {
    "text": "So this is not lossless. This is very much not lossless.",
    "start": "716750",
    "end": "721790"
  },
  {
    "text": "OK, now this one. ",
    "start": "721790",
    "end": "729160"
  },
  {
    "text": "Is this lossless? ",
    "start": "729160",
    "end": "737254"
  },
  {
    "text": "It's the same as the other one. So is it lossless or not?",
    "start": "737254",
    "end": "742480"
  },
  {
    "text": "It is. I'm sorry, no, it's not. It's not lossless. Anybody else who has\na differing opinion?",
    "start": "742480",
    "end": "749150"
  },
  {
    "text": "What do we mean by\nlossless, I guess, right? If you know you're only going\nto ever send one symbol,",
    "start": "749150",
    "end": "754700"
  },
  {
    "text": "then this is lossless, right? If you see one 0,\nthen it's an A. If you see two 0's, then\nit's a B. So in that sense,",
    "start": "754700",
    "end": "761870"
  },
  {
    "text": "it is lossless. But very rarely do you want\nto send only one symbol. Most often, you want to\nsend a sequence of symbols.",
    "start": "761870",
    "end": "769850"
  },
  {
    "text": "And in that context, if you\nsee that AA will encode to 00,",
    "start": "769850",
    "end": "775940"
  },
  {
    "text": "B will also encode to 00. So if you receive a 00, you\ndon't know whether the original",
    "start": "775940",
    "end": "782210"
  },
  {
    "text": "person sent a AA or a B. So in\nthat sense, it's not lossless. ",
    "start": "782210",
    "end": "789920"
  },
  {
    "text": "But you already start seeing\nthat the definition of lossless is not obvious.",
    "start": "789920",
    "end": "795350"
  },
  {
    "text": "You need to define it carefully. Otherwise, it's\nnot clear what do you mean when you say\nit's a lossless code.",
    "start": "795350",
    "end": "802220"
  },
  {
    "text": "So let's define it. ",
    "start": "802220",
    "end": "823780"
  },
  {
    "text": "OK, so we will define\nsomething called a uniquely decodable code.",
    "start": "823780",
    "end": "833490"
  },
  {
    "text": "And it's a very\nsimple definition. ",
    "start": "833490",
    "end": "838890"
  },
  {
    "text": "So a code is uniquely decodable\nif no two input sequences,",
    "start": "838890",
    "end": "862870"
  },
  {
    "text": "say xn, ym, where m and n are\ngreater than or equal to 1,",
    "start": "862870",
    "end": "875400"
  },
  {
    "text": "are encoded to the same code.",
    "start": "875400",
    "end": "886480"
  },
  {
    "text": "Or I guess let's\ncall it same output. ",
    "start": "886480",
    "end": "897080"
  },
  {
    "text": "Are we happy with\nthat definition? Any questions on\nthis definition? ",
    "start": "897080",
    "end": "918070"
  },
  {
    "text": "Right, so with this\ndefinition, if we go back-- let me draw that again. ",
    "start": "918070",
    "end": "926640"
  },
  {
    "text": "So like this code that we\nsaw, A was 0, B was 00, is not uniquely decodable.",
    "start": "926640",
    "end": "933140"
  },
  {
    "start": "933140",
    "end": "946710"
  },
  {
    "text": "Before we move on-- ",
    "start": "946710",
    "end": "953100"
  },
  {
    "text": "so when we talk, for example,\nwe have a sequence of words. And sometimes, you\nhave two words such",
    "start": "953100",
    "end": "959100"
  },
  {
    "text": "that they are individually\nwords, but when you join them, that's another word. That's possible in\nEnglish, for example.",
    "start": "959100",
    "end": "966430"
  },
  {
    "text": "So when you talk and\nyou talk to someone, how does the other person\nknow when does the word end",
    "start": "966430",
    "end": "973347"
  },
  {
    "text": "and when does the\nother word start?  Forget about codes for a\nsecond, just very generally.",
    "start": "973347",
    "end": "982480"
  },
  {
    "text": "We have spaces. You have spaces. Very good. Very good. Right. So oftentimes-- this is one\nway of thinking about it",
    "start": "982480",
    "end": "990990"
  },
  {
    "text": "because the way we are thinking\nabout it is when you have AA, AA is encoded to\n00 without any gap.",
    "start": "990990",
    "end": "996540"
  },
  {
    "text": "It's just 0 followed by 0. There isn't a gap. B is also 00, no gaps anywhere.",
    "start": "996540",
    "end": "1002450"
  },
  {
    "text": "So that's the sort\nof setting where we are thinking about these\nuniquely decodable codes.",
    "start": "1002450",
    "end": "1008090"
  },
  {
    "text": "And most often when you are\nworking in any real application today, with computers\nand so on, you",
    "start": "1008090",
    "end": "1015320"
  },
  {
    "text": "can't afford gaps, because\nyou have a binary alphabet you're working with. You have 0 and you have 1. You don't have a third symbol to\nsignify that now one code has--",
    "start": "1015320",
    "end": "1024020"
  },
  {
    "text": "one code word has ended,\nnow we will pause for a sec. In the old days,\nsome of you might",
    "start": "1024020",
    "end": "1032900"
  },
  {
    "text": "have heard of the Morse code. So this was used in\nthe telegraph, which was the only mode of\nintercontinental communication",
    "start": "1032900",
    "end": "1040130"
  },
  {
    "text": "for a long period. And even during my dad's\ntime, that was the way",
    "start": "1040130",
    "end": "1045290"
  },
  {
    "text": "people sent fast\nmessages in India.",
    "start": "1045290",
    "end": "1050450"
  },
  {
    "text": "So Morse code is comprised\nof dots and dashes. So it's a way to-- you\ncan represent any letter",
    "start": "1050450",
    "end": "1057110"
  },
  {
    "text": "or any number in this code. And you have a dot,\nor you have a dash.",
    "start": "1057110",
    "end": "1064360"
  },
  {
    "text": "So let's look at the code,\nand then we'll come back. You can see this, right? So for example, E is a dot.",
    "start": "1064360",
    "end": "1069970"
  },
  {
    "text": " S is a dot dot dot.",
    "start": "1069970",
    "end": "1075070"
  },
  {
    "text": "Q is a dash dash dot dash. So you just send a\nsequence of these.",
    "start": "1075070",
    "end": "1080320"
  },
  {
    "text": "And on the other side,\njust listening to dot dash, the other person can decode it.",
    "start": "1080320",
    "end": "1085840"
  },
  {
    "text": "So this was the Morse code. And how did the Morse code\ndenote the separation?",
    "start": "1085840",
    "end": "1091029"
  },
  {
    "text": "So I guess if you look at\nthis, you will immediately see that you have E, you\nhave A, and you have T,",
    "start": "1091030",
    "end": "1099559"
  },
  {
    "text": "if you look at these three. So a E followed by a T is\na dot followed by a dash.",
    "start": "1099560",
    "end": "1105679"
  },
  {
    "text": "But an A is also a dot\nfollowed by a dash. So Morse code, in our sense,\nis not uniquely decodable.",
    "start": "1105680",
    "end": "1113627"
  },
  {
    "text": "So this is not uniquely\ndecodable in the way we think about\nit, but clearly it was used for communication\nfor a long period.",
    "start": "1113627",
    "end": "1119210"
  },
  {
    "text": "And why is that? Because between letters,\nyou would just put a space.",
    "start": "1119210",
    "end": "1125030"
  },
  {
    "text": "You will pause. You will not send\nanything for a bit. And then you will start\nsending the next letter.",
    "start": "1125030",
    "end": "1131092"
  },
  {
    "text": "And then the receiver\nwould know how to-- I guess initially some\nhuman used to do it, and then they made\nmachines that do it.",
    "start": "1131092",
    "end": "1138230"
  },
  {
    "text": "But the idea is that\nin different types of communication\nsystems, you can have different ways of doing things.",
    "start": "1138230",
    "end": "1144560"
  },
  {
    "text": "Like, for us, this\nis very important. This is what we'll\nbe working with. And this is how most modern\ncompression algorithms work.",
    "start": "1144560",
    "end": "1152390"
  },
  {
    "text": "But there are other systems\nalso, so you should be aware-- putting a comma after\nevery letter, in a way.",
    "start": "1152390",
    "end": "1159050"
  },
  {
    "text": " Anything interesting\nsomebody observes?",
    "start": "1159050",
    "end": "1165659"
  },
  {
    "text": "Like, anything that we saw\nin the last class and you see reflected here? Look at the lengths of\nthe different code words.",
    "start": "1165660",
    "end": "1171450"
  },
  {
    "text": "Anybody wants to--\nwhat do you see here? Anything interesting\nwith the letters",
    "start": "1171450",
    "end": "1177810"
  },
  {
    "text": "and which letters are\ngetting shorter codes and which letters are\ngetting longer codes?",
    "start": "1177810",
    "end": "1183003"
  },
  {
    "text": "Go ahead. The vowels are the shortest. Yeah, so the vowels are shorter.",
    "start": "1183004",
    "end": "1191520"
  },
  {
    "text": "That's one suggestion. And that's true. E is a single dot. I is a dot dot.",
    "start": "1191520",
    "end": "1197730"
  },
  {
    "text": "Some of the vowels\nare a bit longer, like U is a dot dot dash. But you see T is very short.",
    "start": "1197730",
    "end": "1204929"
  },
  {
    "text": "And if you study the frequency\nof letters in English, you will see that E and T\nare the two most commonly",
    "start": "1204930",
    "end": "1210990"
  },
  {
    "text": "used letters. So the vowels are shorter\nbecause they are also usually",
    "start": "1210990",
    "end": "1216870"
  },
  {
    "text": "very commonly used. So even in the Morse\ncode, in those old days, they knew that for more\nfrequently used letters,",
    "start": "1216870",
    "end": "1224759"
  },
  {
    "text": "you should use a shorter symbol\nso that your overall message becomes shorter.",
    "start": "1224760",
    "end": "1230610"
  },
  {
    "text": "So that's just, I think,\nan interesting fact. ",
    "start": "1230610",
    "end": "1237940"
  },
  {
    "text": "Any questions with this? ",
    "start": "1237940",
    "end": "1243600"
  },
  {
    "text": "Could you go back to\nthe previous slide? This one? ",
    "start": "1243600",
    "end": "1248640"
  },
  {
    "text": "Yeah, so the x and then ym--",
    "start": "1248640",
    "end": "1253980"
  },
  {
    "text": "So there are just\ntwo input sequences. So if we were to give an\nexample, here, if you take x2,",
    "start": "1253980",
    "end": "1263250"
  },
  {
    "text": "which is like a two tuple sort\nof, x1, x2, which is like A, A.",
    "start": "1263250",
    "end": "1272770"
  },
  {
    "text": "Or you do y-- or you take y1,\nwhich is just a single input, which is B, then you can see\nthat the encoding of x2 is",
    "start": "1272770",
    "end": "1282460"
  },
  {
    "text": "the same as the encoding\nof y1, which is 00.",
    "start": "1282460",
    "end": "1288460"
  },
  {
    "text": "So that's what we mean. Sorry if the notation is new. I think I will define it more\nproperly in the next part.",
    "start": "1288460",
    "end": "1297050"
  },
  {
    "text": "But you will also\nget used to it. But yeah, that's just\na tuple, x2 or xn. So we are saying that it's\nnot like n and m don't",
    "start": "1297050",
    "end": "1305169"
  },
  {
    "text": "need to be the same. Any two sequences with\ndifferent lengths, they should never map\nto the same output.",
    "start": "1305170",
    "end": "1311525"
  },
  {
    "text": "They should be unique. Given the output, you\nare not able to decode.",
    "start": "1311525",
    "end": "1316539"
  },
  {
    "text": "You also know how many\ninput symbols are there. So it's a very strict\nproperty in that. ",
    "start": "1316540",
    "end": "1324600"
  },
  {
    "text": "Is that clear? OK. So we will not talk about\nuniquely decodable codes",
    "start": "1324600",
    "end": "1332440"
  },
  {
    "text": "for the rest of the class. You will see a question\nin the homework. And I will explain later why\nwe don't talk about these.",
    "start": "1332440",
    "end": "1339550"
  },
  {
    "text": "It's a very powerful\nproperty, but you don't really need this very\npowerful property.",
    "start": "1339550",
    "end": "1344679"
  },
  {
    "text": "We will see a much smaller class\nof codes, which is very, very easy to deal with. And we'll just stick to those.",
    "start": "1344680",
    "end": "1349710"
  },
  {
    "text": "So that's our next topic. ",
    "start": "1349710",
    "end": "1355157"
  },
  {
    "text": "Yeah, but there will\nbe a homework question, where you will look at these\nand do some proofs with these. ",
    "start": "1355157",
    "end": "1369480"
  },
  {
    "text": "Let me find the old code we had. ",
    "start": "1369480",
    "end": "1468970"
  },
  {
    "text": "So this is a proposed decoding\nalgorithm for this code.",
    "start": "1468970",
    "end": "1474340"
  },
  {
    "text": "Let me talk through\nthis in words. So you start with an empty--",
    "start": "1474340",
    "end": "1480700"
  },
  {
    "text": "you have a variable\ncalled C, which is like storing your\ncode, like the encoding.",
    "start": "1480700",
    "end": "1487840"
  },
  {
    "text": "You start with empty. You look at the\nnext bit you added to C. You check if\nC is in the table,",
    "start": "1487840",
    "end": "1493900"
  },
  {
    "text": "so if C is in one of\nthese four entries. If C is there, you decode, and\nthen you set C again to empty.",
    "start": "1493900",
    "end": "1501700"
  },
  {
    "text": "And if C is not in\nthe table, you just continue and then\nlook for the next bit, and you keep adding the bit.",
    "start": "1501700",
    "end": "1507429"
  },
  {
    "text": "So very simple algorithm,\nlinear time and so on. ",
    "start": "1507430",
    "end": "1514260"
  },
  {
    "text": "I will do an example. But before that, do people\ngenerally understand",
    "start": "1514260",
    "end": "1520720"
  },
  {
    "text": "the idea behind the thing? OK, let me do an example. I think that should help.",
    "start": "1520720",
    "end": "1526270"
  },
  {
    "start": "1526270",
    "end": "1531590"
  },
  {
    "text": "And as Pulkit said, apologies\nif you have done information theory, all this you know.",
    "start": "1531590",
    "end": "1536615"
  },
  {
    "text": "I think probably this\nlecture and the next lecture will be mostly recap for\nthe info theory experts.",
    "start": "1536615",
    "end": "1543740"
  },
  {
    "text": "But after that, you will\nsee a lot of new material. ",
    "start": "1543740",
    "end": "1549929"
  },
  {
    "text": "OK, so let's do an\nexample for the same code. ",
    "start": "1549930",
    "end": "1562580"
  },
  {
    "text": "So we have let's say 011000--",
    "start": "1562580",
    "end": "1568279"
  },
  {
    "text": "something.  So we do it step by step.",
    "start": "1568280",
    "end": "1574750"
  },
  {
    "text": "First step, C is equal to 0. Sorry, first step, C\nis nothing, so null.",
    "start": "1574750",
    "end": "1580880"
  },
  {
    "text": "Then C is 0. You decode A because\nyou immediately see",
    "start": "1580880",
    "end": "1587670"
  },
  {
    "text": "that 0 is in this table here. So you decode. So this is your code word\nyou're trying to decode.",
    "start": "1587670",
    "end": "1594480"
  },
  {
    "text": "Then C again becomes empty. Then you put C equal to 1. You can't decode here.",
    "start": "1594480",
    "end": "1600390"
  },
  {
    "text": "There is no code\nword which is 1. Then you see C is 11. Again, there is no\ncode word which is 11.",
    "start": "1600390",
    "end": "1607260"
  },
  {
    "text": "Then you see C is 110. And here you can decode C",
    "start": "1607260",
    "end": "1615419"
  },
  {
    "text": "OK, can somebody help me\nwith the next few steps? What happens next in this?",
    "start": "1615420",
    "end": "1621420"
  },
  {
    "text": "So after I decode C, what is\nthe value of my variable C? ",
    "start": "1621420",
    "end": "1627440"
  },
  {
    "text": "Yeah, C becomes empty again. Right after you decode,\nyou reset C. OK, next step. ",
    "start": "1627440",
    "end": "1637060"
  },
  {
    "text": "So we are here, basically. Next symbol is this one. Add 0.",
    "start": "1637060",
    "end": "1642490"
  },
  {
    "text": "Yeah, so next step you\ninsert 0 in C, right? Are we ready to decode? Yeah.",
    "start": "1642490",
    "end": "1648389"
  },
  {
    "text": "Yeah. Why are we ready to decode? Because 0 is one of\nthe code words, right?",
    "start": "1648390",
    "end": "1653660"
  },
  {
    "text": "0 is the encoding of\nA. So you immediately decode A. And so on.",
    "start": "1653660",
    "end": "1660680"
  },
  {
    "text": "Let's not do it too much. ",
    "start": "1660680",
    "end": "1666900"
  },
  {
    "text": "So let's think about this. First of all, any\nconfusion with this? Are we happy with the decoding?",
    "start": "1666900",
    "end": "1672164"
  },
  {
    "text": " Why do we think this works?",
    "start": "1672165",
    "end": "1677570"
  },
  {
    "text": "What is the property of the\ncode that makes this possible?",
    "start": "1677570",
    "end": "1684679"
  },
  {
    "text": "Basically, no code is like\nthe prefix at the beginning of any other code.",
    "start": "1684680",
    "end": "1691039"
  },
  {
    "text": "Yeah, so the answer\ngiven by a student, which is the correct answer,\nis that no code word is a prefix of another code word.",
    "start": "1691040",
    "end": "1698240"
  },
  {
    "text": "So you see 0 is not a\nprefix of any of these. So as soon as you see\na 0, you immediately",
    "start": "1698240",
    "end": "1704990"
  },
  {
    "text": "know that it has to be A\nbecause there is no other code word that starts with a 0.",
    "start": "1704990",
    "end": "1710570"
  },
  {
    "text": "B, 10-- 10 is not a prefix\nof any of the other guys. So as soon as you see a 10, it\nhas to be a B. It can't be C;",
    "start": "1710570",
    "end": "1719120"
  },
  {
    "text": "it can't be D; it can't be A.\nAnd so on for the other ones. ",
    "start": "1719120",
    "end": "1727115"
  },
  {
    "text": "So let me define it. ",
    "start": "1727115",
    "end": "1735760"
  },
  {
    "text": "So there are a few\ndifferent names for some historical\nreasons, I assume. So they are called prefix codes.",
    "start": "1735760",
    "end": "1741820"
  },
  {
    "text": "They are called\nprefix-free codes. ",
    "start": "1741820",
    "end": "1747280"
  },
  {
    "text": "They are also called\ninstantaneous codes. ",
    "start": "1747280",
    "end": "1758390"
  },
  {
    "text": "OK, instantaneous codes. ",
    "start": "1758390",
    "end": "1765610"
  },
  {
    "text": "So no code word is a prefix\nof another code word.",
    "start": "1765610",
    "end": "1781674"
  },
  {
    "start": "1781675",
    "end": "1787030"
  },
  {
    "text": "Stop me if you don't follow. ",
    "start": "1787030",
    "end": "1793270"
  },
  {
    "text": "Why are they called\ninstantaneous? We just saw that property. As we were trying to decode,\nas soon as we saw the symbol,",
    "start": "1793270",
    "end": "1799960"
  },
  {
    "text": "we were able to\ndecode it instantly. We saw 0, we decoded it. We saw 110, we decoded a C.\nYou don't need to look ahead.",
    "start": "1799960",
    "end": "1808840"
  },
  {
    "text": "You can do it in a more\nstreaming way as your symbols-- as your bits are\ncoming in, you're immediately able to decode.",
    "start": "1808840",
    "end": "1814330"
  },
  {
    "text": "That's why it's called\ninstantaneous code. Why is it called\nprefix-free code?",
    "start": "1814330",
    "end": "1820600"
  },
  {
    "text": "Just the definition. And why is it\ncalled prefix codes? I think just people didn't\nwant to write prefix-free",
    "start": "1820600",
    "end": "1827200"
  },
  {
    "text": "all the time. ",
    "start": "1827200",
    "end": "1832620"
  },
  {
    "text": "OK, so just a simple property-- ",
    "start": "1832620",
    "end": "1841620"
  },
  {
    "text": "prefix-free codes are\nuniquely decodable.",
    "start": "1841620",
    "end": "1852330"
  },
  {
    "text": "So the property we saw\nearlier, the uniquely decodable property, that no two\nsequences map to the same code,",
    "start": "1852330",
    "end": "1859950"
  },
  {
    "text": "prefix-free codes\nsatisfy that condition. Can somebody intuitively\ndescribe why?",
    "start": "1859950",
    "end": "1866220"
  },
  {
    "text": "We won't do a formal\nproof of this. But just intuitively,\ncan somebody suggest why are prefix-free\ncodes uniquely decodable?",
    "start": "1866220",
    "end": "1873630"
  },
  {
    "text": "Why are they lossless? ",
    "start": "1873630",
    "end": "1886840"
  },
  {
    "text": "When you go through\nthe algorithm and you find C in the table,\nyou are 100% guaranteed",
    "start": "1886840",
    "end": "1892750"
  },
  {
    "text": "that it's not just a part\nof another code word.",
    "start": "1892750",
    "end": "1898510"
  },
  {
    "text": "It's that it is going to\nbe exactly C or exactly",
    "start": "1898510",
    "end": "1903820"
  },
  {
    "text": "whatever you find. Yep. Yep, very good. Yeah, so the answer was as\nyou are doing the decoding",
    "start": "1903820",
    "end": "1910030"
  },
  {
    "text": "and you decode 110 to\nC, it has to be C. There is no other option really.",
    "start": "1910030",
    "end": "1916300"
  },
  {
    "text": "So in a way, the\ndecoding algorithm proves that it's\ndecodable uniquely.",
    "start": "1916300",
    "end": "1922005"
  },
  {
    "text": "There is that\ndecoding algorithm. And if you are-- if you have done math, you\nwill want to be more formal,",
    "start": "1922005",
    "end": "1928620"
  },
  {
    "text": "and we will leave you\nto read the textbook if you want very formal proofs. But it's intuitively correct.",
    "start": "1928620",
    "end": "1934440"
  },
  {
    "text": "And you just write that in math,\nand you get the actual proof. But they are uniquely\ndecodable because there",
    "start": "1934440",
    "end": "1939720"
  },
  {
    "text": "is a decoding algorithm,\nwhich there is no confusion. You start from the\nbeginning, and you can just decode the sequence.",
    "start": "1939720",
    "end": "1944910"
  },
  {
    "text": "There are no options really.  Do we think the\nopposite is also true?",
    "start": "1944910",
    "end": "1951510"
  },
  {
    "text": "Let me not dwell on that\ntoo much, but it is not. So uniquely decodable does\nnot imply it is prefix-free.",
    "start": "1951510",
    "end": "1965080"
  },
  {
    "text": "So there are uniquely\ndecodable codes which are not prefix-free. And you will see\nexamples in homework.",
    "start": "1965080",
    "end": "1974440"
  },
  {
    "text": "But again, we will see\nthat prefix-free codes are good enough for anything\nwe want to do really. So we will not study\nuniquely decode.",
    "start": "1974440",
    "end": "1982512"
  },
  {
    "text": "We will not study codes that\nare uniquely decodable but not prefix-free. That's a category we will\njust not worry about too much.",
    "start": "1982512",
    "end": "1988690"
  },
  {
    "start": "1988690",
    "end": "1994289"
  },
  {
    "text": "OK, any questions about this? We will talk about the prefix\ncodes throughout the lecture.",
    "start": "1994290",
    "end": "2002440"
  },
  {
    "text": "Hopefully by the end of it,\nyou will feel very comfortable with them. ",
    "start": "2002440",
    "end": "2009500"
  },
  {
    "text": "OK, so second topic\nin the outline. So we saw one algorithm to\ndecode prefix-free codes",
    "start": "2009500",
    "end": "2016580"
  },
  {
    "text": "already, somewhere here. You start with\nsomething, and then you",
    "start": "2016580",
    "end": "2021740"
  },
  {
    "text": "keep adding bits until\nyou find something. This is one algorithm. We will see another algorithm.",
    "start": "2021740",
    "end": "2027740"
  },
  {
    "start": "2027740",
    "end": "2033460"
  },
  {
    "text": "How many of you have done\na algorithms class or data structures, seen trees?",
    "start": "2033460",
    "end": "2039240"
  },
  {
    "text": " OK, a few of you\nhave seen trees.",
    "start": "2039240",
    "end": "2044590"
  },
  {
    "text": "OK, even if you have not,\nyou will see trees now. So you will learn something. OK, so let's again\nmake our favorite code.",
    "start": "2044590",
    "end": "2053185"
  },
  {
    "text": " OK.",
    "start": "2053185",
    "end": "2059739"
  },
  {
    "text": "So what we will do is\nwe will map code words",
    "start": "2059739",
    "end": "2069969"
  },
  {
    "text": "to leaves of a binary tree.",
    "start": "2069969",
    "end": "2075549"
  },
  {
    "text": " So you start with the root.",
    "start": "2075549",
    "end": "2082059"
  },
  {
    "text": "Every binary tree has a root. And a binary tree will--",
    "start": "2082060",
    "end": "2087908"
  },
  {
    "text": "Any node in the tree\nwill be either a leaf, or it will have two children. So the root here\nhas two children.",
    "start": "2087909",
    "end": "2095050"
  },
  {
    "text": "One is the left child,\nwhich we'll call 0, and the right child is 1. And A is the leaf here.",
    "start": "2095050",
    "end": "2104410"
  },
  {
    "text": "Let me draw it, and\nthen we will discuss. ",
    "start": "2104410",
    "end": "2111140"
  },
  {
    "text": "Very simple stuff really\nif you think about it. ",
    "start": "2111140",
    "end": "2121380"
  },
  {
    "text": "So the path from\nthe root to the leaf gives you the code word,\nbasically, if we write it down.",
    "start": "2121380",
    "end": "2130680"
  },
  {
    "text": "So path from root to\nleaf equal to code word.",
    "start": "2130680",
    "end": "2138375"
  },
  {
    "start": "2138375",
    "end": "2144930"
  },
  {
    "text": "Any questions? This is just a representation,\nand we will briefly talk",
    "start": "2144930",
    "end": "2150540"
  },
  {
    "text": "about why this is interesting. And then we will use it\nin a bunch of proofs.",
    "start": "2150540",
    "end": "2155940"
  },
  {
    "start": "2155940",
    "end": "2168140"
  },
  {
    "text": "So let me just describe you\nanother method of decoding that will use this tree. ",
    "start": "2168140",
    "end": "2187940"
  },
  {
    "text": "So the algorithm is simple. And I think you will implement--",
    "start": "2187940",
    "end": "2192950"
  },
  {
    "text": "you will see the code for\nthis next lecture as well. So you first see a 0.",
    "start": "2192950",
    "end": "2198590"
  },
  {
    "text": "So what you do is you\nstart at the root. You follow the 0 branch.",
    "start": "2198590",
    "end": "2203599"
  },
  {
    "text": "If you reach a leaf,\nyou immediately decode-- OK, A. Then you go\nback to the root.",
    "start": "2203600",
    "end": "2210380"
  },
  {
    "text": "So you reset. That's the reset step in a way. Now you're at the root again.",
    "start": "2210380",
    "end": "2215540"
  },
  {
    "text": "You see a 1. You go here. You see another 1, you go again.",
    "start": "2215540",
    "end": "2221510"
  },
  {
    "text": "You see a 0, you come here. You see-- oh, I hit a leaf.",
    "start": "2221510",
    "end": "2228900"
  },
  {
    "text": "So I have a leaf,\nso I decode, C. And then I again go back\nto the root from here.",
    "start": "2228900",
    "end": "2237810"
  },
  {
    "text": "Then I see a 1, I go here. I see a 0, I go here.",
    "start": "2237810",
    "end": "2244050"
  },
  {
    "text": "I hit a leaf, I am\nat B. I decode B.",
    "start": "2244050",
    "end": "2253642"
  },
  {
    "text": "Are we happy? Should I explain again? ",
    "start": "2253642",
    "end": "2258760"
  },
  {
    "text": "OK. OK, we'll keep moving. And I hope you get some\npractice in homeworks.",
    "start": "2258760",
    "end": "2266480"
  },
  {
    "text": "You will see this several times. ",
    "start": "2266480",
    "end": "2274750"
  },
  {
    "text": "OK, so now a question\nfor everybody. ",
    "start": "2274750",
    "end": "2287240"
  },
  {
    "text": "Please help me. I have this other code. Please help me make a\ntree out of this code.",
    "start": "2287240",
    "end": "2292610"
  },
  {
    "text": "And I will make the root for\nyou, and I will put the A here.",
    "start": "2292610",
    "end": "2298610"
  },
  {
    "text": "But can you help me\nwith the B and the C?",
    "start": "2298610",
    "end": "2303780"
  },
  {
    "text": "Anybody?  Would it be a 1?",
    "start": "2303780",
    "end": "2309850"
  },
  {
    "text": "OK, so the suggestion\nis to make the 1 branch. Definitely, because B and C both\nstart at the 1-- makes sense.",
    "start": "2309850",
    "end": "2316160"
  },
  {
    "text": "Make the 0 branch. Yep, we make a 0 branch. Yep.",
    "start": "2316160",
    "end": "2321965"
  },
  {
    "text": "And then you write the B. I write a B, yep.",
    "start": "2321965",
    "end": "2328160"
  },
  {
    "text": "Create a 0 branch and write a C.",
    "start": "2328160",
    "end": "2333990"
  },
  {
    "text": "Does this look different from\nthe other one in some way? Forget about the fact\nthat some of the nodes",
    "start": "2333990",
    "end": "2340170"
  },
  {
    "text": "don't have two children. That's fine, I think. Are there any\nother ways in which this differs from\nthe previous one?",
    "start": "2340170",
    "end": "2346770"
  },
  {
    "text": "Yeah, essentially, C, it's\na child of B. Like it's--",
    "start": "2346770",
    "end": "2356160"
  },
  {
    "text": "like in that one, once\nyou got to a letter, no children come after it. Yeah. Yeah, so the answer is basically\nthat here C is a child of B.",
    "start": "2356160",
    "end": "2365460"
  },
  {
    "text": "So B is not really a leaf. So B is not a leaf.",
    "start": "2365460",
    "end": "2374390"
  },
  {
    "text": "And the reason is that C is a-- B is a prefix of C.\nSo B is prefix of C.",
    "start": "2374390",
    "end": "2382790"
  },
  {
    "text": "You see 10 is a prefix of 100. So since B is a prefix\nof C, it's not a leaf.",
    "start": "2382790",
    "end": "2388910"
  },
  {
    "text": "This is not a prefix-free code. It's not a prefix-- So basically, this\nis a property,",
    "start": "2388910",
    "end": "2397190"
  },
  {
    "text": "which, again, we'll\nnot prove, but very intuitive-- is\nthat prefix code is",
    "start": "2397190",
    "end": "2405619"
  },
  {
    "text": "like equivalent to\nbinary tree, where",
    "start": "2405620",
    "end": "2415620"
  },
  {
    "text": "all code words are leaves.  And this is very obvious once\nyou think about it for a minute",
    "start": "2415620",
    "end": "2422890"
  },
  {
    "text": "because if your code word\nis not a leaf, if it's an internal node\nin the tree, that",
    "start": "2422890",
    "end": "2427960"
  },
  {
    "text": "means you can extend it further\nand get another code word. But that means that one of\nthe code words is a child--",
    "start": "2427960",
    "end": "2435700"
  },
  {
    "text": "like a prefix of the other. If B was a leaf, everything\nwould have been good. But B is not a leaf.",
    "start": "2435700",
    "end": "2441910"
  },
  {
    "text": "C is a child of B. So that\nmeans the code word for B is a prefix for\nthe code word of C",
    "start": "2441910",
    "end": "2448359"
  },
  {
    "text": "because of the way we\ndefine things here. ",
    "start": "2448360",
    "end": "2453410"
  },
  {
    "text": "Is that clear? So you see there is an\nequivalence basically. Any prefix code is\nequivalent to a binary tree",
    "start": "2453410",
    "end": "2459980"
  },
  {
    "text": "where you have a\ncertain property. ",
    "start": "2459980",
    "end": "2467371"
  },
  {
    "text": "OK, we'll move on\nto the next part, unless there are questions.",
    "start": "2467372",
    "end": "2472570"
  },
  {
    "text": "OK, let's talk about\ngood prefix-free codes. So we now understand\nuniquely decodable codes.",
    "start": "2472570",
    "end": "2477807"
  },
  {
    "text": "We understand prefix-free codes. We know that prefix\ncodes can be represented as trees, where each of the\nleaves represents a code word.",
    "start": "2477807",
    "end": "2486760"
  },
  {
    "text": "And I hinted to you\nbut not quite proved that we will not worry about\nuniquely decodable codes,",
    "start": "2486760",
    "end": "2493090"
  },
  {
    "text": "because prefix-free codes are\ngood enough for our purposes. OK, so with that context,\nlet's start about,",
    "start": "2493090",
    "end": "2498820"
  },
  {
    "text": "what do we mean by\ngood prefix-free code? ",
    "start": "2498820",
    "end": "2509400"
  },
  {
    "text": "So if we want to\nget very formal, we'll do the proofs very\nsystematically in class. But just some of the other\nstuff where you think we",
    "start": "2509400",
    "end": "2516930"
  },
  {
    "text": "are not very rigorous,\nthe suggested book is Cover and Thomas\nInformation Theory, chapter 5.",
    "start": "2516930",
    "end": "2525690"
  },
  {
    "text": "So that's where-- if you want\nto read this in more detail and also a bunch of very\ngood questions in the--",
    "start": "2525690",
    "end": "2531540"
  },
  {
    "text": " Cover was a professor here. ",
    "start": "2531540",
    "end": "2541010"
  },
  {
    "text": "OK, so the first property\nis for symbols S1, S2.",
    "start": "2541010",
    "end": "2551970"
  },
  {
    "text": "If probability of S1 is\ngreater than probability of S2,",
    "start": "2551970",
    "end": "2558270"
  },
  {
    "text": "then the length of the code\nword, l, S1, should be what?",
    "start": "2558270",
    "end": "2564240"
  },
  {
    "text": "More than or-- greater or\nsmaller than the length for S2?",
    "start": "2564240",
    "end": "2570280"
  },
  {
    "text": "Smaller. Smaller, right? Yeah, we saw this in last\nclass, so very intuitive from the definition of good.",
    "start": "2570280",
    "end": "2577890"
  },
  {
    "text": "Good just means\nthat we want to-- actually, I should\nhave defined-- let me define \"good,\"\nsorry, in the last slide.",
    "start": "2577890",
    "end": "2583830"
  },
  {
    "text": "One second. Good means minimize expectation\nof length of the code word",
    "start": "2583830",
    "end": "2593609"
  },
  {
    "text": "subject to being a prefix code. That's like the optimization\ndefinition of good.",
    "start": "2593610",
    "end": "2601010"
  },
  {
    "text": " OK, we'll give you\na second if you--",
    "start": "2601010",
    "end": "2607480"
  },
  {
    "text": "we will post these\nnotes as well in case you want to take a look later. But if you want to take your\nown notes because you don't like",
    "start": "2607480",
    "end": "2614112"
  },
  {
    "text": "my handwriting or you think\nit helps you learn better, please go ahead.",
    "start": "2614112",
    "end": "2619670"
  },
  {
    "text": "OK.  If I had a code\nwhere l length of S1",
    "start": "2619670",
    "end": "2626190"
  },
  {
    "text": "was greater than\nlength of S2, can I create another code\nwhich is just-- I know which is strictly\nbetter than my code?",
    "start": "2626190",
    "end": "2632789"
  },
  {
    "text": " So the question is--",
    "start": "2632790",
    "end": "2638339"
  },
  {
    "text": "this is-- if I have l\nS1 greater than l S2,",
    "start": "2638340",
    "end": "2648970"
  },
  {
    "text": "what I can do is I can swap\ncode words for S1 and S2",
    "start": "2648970",
    "end": "2659650"
  },
  {
    "text": "and minimize the expected loss-- expected code length.",
    "start": "2659650",
    "end": "2664720"
  },
  {
    "text": " So if you give me\na bad code which has the length in the opposite\norder of the probability,",
    "start": "2664720",
    "end": "2671890"
  },
  {
    "text": "I could just swap them around\nuntil increasing probability means decreasing code length.",
    "start": "2671890",
    "end": "2678130"
  },
  {
    "text": "And I will just strictly get\na better expected length. So we basically\nprove this property",
    "start": "2678130",
    "end": "2685900"
  },
  {
    "text": "with this one line of argument. ",
    "start": "2685900",
    "end": "2692710"
  },
  {
    "text": "OK, let's talk about\nthe second property. ",
    "start": "2692710",
    "end": "2715458"
  },
  {
    "text": "OK, so on the second\nproperty, I will ask you to trust us for now. We will prove it in\nthe next lecture. But it's very useful\nto know this property,",
    "start": "2715458",
    "end": "2722550"
  },
  {
    "text": "to actually learn some of the-- we'll actually see an actual\ncode today, a good prefix",
    "start": "2722550",
    "end": "2728610"
  },
  {
    "text": "code shortly, after this. ",
    "start": "2728610",
    "end": "2735880"
  },
  {
    "text": "The properties that\nthe length of a symbol x should be roughly log base\n2 1 over the probability of x.",
    "start": "2735880",
    "end": "2745675"
  },
  {
    "text": " All right, so this is in a way\nstronger than the previous one.",
    "start": "2745675",
    "end": "2752200"
  },
  {
    "text": "The previous one was a more\nqualitative sort of thing, where if probability is higher,\nthen length should be smaller. This is just saying that\nif your probability is p,",
    "start": "2752200",
    "end": "2759360"
  },
  {
    "text": "then your length should\nbe log base 2 1 over p. This is like the\nnegative log likelihood",
    "start": "2759360",
    "end": "2765060"
  },
  {
    "text": "term you might have\nseen in other places. ",
    "start": "2765060",
    "end": "2772510"
  },
  {
    "text": "Let's do an example-- ",
    "start": "2772510",
    "end": "2780130"
  },
  {
    "text": "uniform distribution, the\nsimplest distribution. ",
    "start": "2780130",
    "end": "2789539"
  },
  {
    "text": "OK, so let's say you just have A\nand B with half of probability.",
    "start": "2789540",
    "end": "2795870"
  },
  {
    "text": "Then log base 2 1 over 1/2\nis log of 2, which is 1.",
    "start": "2795870",
    "end": "2802020"
  },
  {
    "text": "So what we are\nsaying a good code for this distribution, where\nA and B have probability 1/2",
    "start": "2802020",
    "end": "2807330"
  },
  {
    "text": "each, will have length\nof the code word being 1 for both A and\nB. So like A going to 0,",
    "start": "2807330",
    "end": "2815070"
  },
  {
    "text": "B going to 1, that's a good\ncode word under this criteria. ",
    "start": "2815070",
    "end": "2825319"
  },
  {
    "text": "OK, let me keep going and\ngive you another example.",
    "start": "2825320",
    "end": "2831150"
  },
  {
    "text": "So in general, if x is\nuniformly distributed in 1 to k,",
    "start": "2831150",
    "end": "2844250"
  },
  {
    "text": "then a good code\nwill have length of a symbol x equal to log\nbase 2 k, roughly equal.",
    "start": "2844250",
    "end": "2856049"
  },
  {
    "text": " Can somebody suggest when this\ncan be like an exact equality?",
    "start": "2856050",
    "end": "2863720"
  },
  {
    "text": "When can you have length-- When k is a power of 2. Yeah, so then when\nk is a power of 2,",
    "start": "2863720",
    "end": "2871070"
  },
  {
    "text": "you can exactly get log k. And we already saw this, right? This is nothing new. We saw the fixed length\ncode in the previous class.",
    "start": "2871070",
    "end": "2877005"
  },
  {
    "text": "We saw it again in this class. So that's nothing new. So this is just the fixed length\ncode that we know and love.",
    "start": "2877005",
    "end": "2883145"
  },
  {
    "text": " But in general, the best you\ncan do with fixed length code",
    "start": "2883145",
    "end": "2892109"
  },
  {
    "text": "is lx equal to the\nceiling of log k. You can't quite do like-- because it might not\nbe an integer, the log.",
    "start": "2892110",
    "end": "2900270"
  },
  {
    "text": "So already, you see\nsome justification for this property, right? For our fixed length code,\nyou can actually achieve it.",
    "start": "2900270",
    "end": "2907349"
  },
  {
    "text": "And you also see that for\nthe uniform distribution, it's a good code. In general, it need\nnot be a good code. But for the uniform\ndistribution, which also",
    "start": "2907350",
    "end": "2914700"
  },
  {
    "text": "intuitively makes sense where-- since all of the symbols\nhave the same probability, you want them to have the same\nlength, the code word length.",
    "start": "2914700",
    "end": "2921960"
  },
  {
    "text": "And the code word length\nmust be this thing.  OK, please raise your\nhand with any questions.",
    "start": "2921960",
    "end": "2930450"
  },
  {
    "text": "Let's do another example.  Let's look at our\nfavorite code that we",
    "start": "2930450",
    "end": "2938820"
  },
  {
    "text": "have been looking at for a\nbit, the 0, 10, 110, 111.",
    "start": "2938820",
    "end": "2952150"
  },
  {
    "text": "You will notice that we\ndon't have a length-- sorry, we don't have a\nprobability distribution for this at the moment.",
    "start": "2952150",
    "end": "2958450"
  },
  {
    "text": "Let me define a probability\ndistribution, 1/2, 1/4, 1/8, 1/8.",
    "start": "2958450",
    "end": "2963790"
  },
  {
    "text": " Let me also create\nthe log of 1 over px.",
    "start": "2963790",
    "end": "2972970"
  },
  {
    "text": "So it will be 1, 2, 3, 3. So as you might notice,\nfor this particular code",
    "start": "2972970",
    "end": "2981720"
  },
  {
    "text": "and for this particular\ndistribution, the length of the code word\nexactly matches the log 1",
    "start": "2981720",
    "end": "2987610"
  },
  {
    "text": "by probability, 0. The length here\nis 1 the log is 1. The length for the C and D is 3.",
    "start": "2987610",
    "end": "2993670"
  },
  {
    "text": "The log is 3.  And this we will actually\nsee not today but Wednesday",
    "start": "2993670",
    "end": "3002080"
  },
  {
    "text": "that this code is the optimal\ncode for this probability distribution.",
    "start": "3002080",
    "end": "3007920"
  },
  {
    "text": "We are getting closer\nand closer to making very powerful statements about\ncodes in general, which we'll",
    "start": "3007920",
    "end": "3013299"
  },
  {
    "text": "use throughout the course. ",
    "start": "3013300",
    "end": "3020539"
  },
  {
    "text": "OK, for now, I think\nthat's it I'm going to say. Just remember there\nare two properties,",
    "start": "3020540",
    "end": "3026270"
  },
  {
    "text": "where really the second property\n[AUDIO OUT] first property. So focus on the second property,\nthat the length of your code",
    "start": "3026270",
    "end": "3034099"
  },
  {
    "text": "word should be roughly\nequal to the log of 1 over the probability. ",
    "start": "3034100",
    "end": "3040980"
  },
  {
    "text": "Any questions on this? Because after this, we're going\nto see a code construction that will actually achieve this.",
    "start": "3040980",
    "end": "3046260"
  },
  {
    "text": " OK, [INAUDIBLE].",
    "start": "3046260",
    "end": "3051520"
  },
  {
    "text": "Good. OK, so we will now\nsee Shannon code.",
    "start": "3051520",
    "end": "3056871"
  },
  {
    "text": "I don't know if-- I think Pulkit mentioned\nShannon in the last-- the intro lecture. So Claude Shannon, he did\na lot of great things.",
    "start": "3056872",
    "end": "3064900"
  },
  {
    "text": "Among them, he\nbasically invented the field of information\ntheory, which has two big parts. One is compression, which\nwe will learn in this class.",
    "start": "3064900",
    "end": "3072010"
  },
  {
    "text": "And the other is error\ncorrection coding, which is also very,\nvery important, used in every\ncommunication you do.",
    "start": "3072010",
    "end": "3078880"
  },
  {
    "text": "So this is one of\nthe cases where Shannon himself created\nthis particular code, which",
    "start": "3078880",
    "end": "3086170"
  },
  {
    "text": "is a good prefix-free code,\naccording to the definition, the properties we saw.",
    "start": "3086170",
    "end": "3092500"
  },
  {
    "start": "3092500",
    "end": "3097880"
  },
  {
    "text": "I guess I won't say it\nright now, but maybe as we go through the first\nhalf of the course, if you get your hands\non the 1948 paper",
    "start": "3097880",
    "end": "3105710"
  },
  {
    "text": "by Shannon, which is\ncalled \"A Mathematical Theory of Communication,\"\nread the first part, the part",
    "start": "3105710",
    "end": "3111140"
  },
  {
    "text": "that covers compression. It's very interesting,\nwritten in very simple words, not very fancy math\nstuff-- very, very simple",
    "start": "3111140",
    "end": "3119869"
  },
  {
    "text": "words, very intuitive. You might find it interesting.",
    "start": "3119870",
    "end": "3125640"
  },
  {
    "text": "OK, so Shannon code. ",
    "start": "3125640",
    "end": "3143880"
  },
  {
    "text": "So this will be a prefix code. ",
    "start": "3143880",
    "end": "3150050"
  },
  {
    "text": "And for symbol x,\nwe will actually",
    "start": "3150050",
    "end": "3156770"
  },
  {
    "text": "achieve the length of the code\nword, will be log base 2 1",
    "start": "3156770",
    "end": "3161780"
  },
  {
    "text": "over probability of x. You might have even seen this\nlog base 2 last lecture, also",
    "start": "3161780",
    "end": "3167930"
  },
  {
    "text": "this lecture as well. Does anybody know\nwhy we see this 2? Why not log base\n3 or natural log",
    "start": "3167930",
    "end": "3174589"
  },
  {
    "text": "or log base 10 or\nsomething like that? Because if we're\ndealing with binary, it's just 0's and 1's,\nand it's encoding to bits.",
    "start": "3174590",
    "end": "3181190"
  },
  {
    "text": "Yeah, yeah, yeah. So the answer is, if we\nare dealing with binary because our output is binary,\nwe are encoding everything",
    "start": "3181190",
    "end": "3186463"
  },
  {
    "text": "into bits. In another world if\nwe had semiconductors that are like three\nlevels or something,",
    "start": "3186463",
    "end": "3192500"
  },
  {
    "text": "you could be working\nwith log base 3. Yeah, so you see\nit's a prefix code.",
    "start": "3192500",
    "end": "3197569"
  },
  {
    "text": "And for any symbol x, it will\nachieve log 1 over p of x. So it's very good\ncode in that regard.",
    "start": "3197570",
    "end": "3204170"
  },
  {
    "start": "3204170",
    "end": "3220730"
  },
  {
    "text": "OK, let's do the construction. ",
    "start": "3220730",
    "end": "3231100"
  },
  {
    "text": "Step one, you compute the lx,\nwhich is this function we just saw, the log 1 over px.",
    "start": "3231100",
    "end": "3239550"
  },
  {
    "text": "In this class, if you\nsee a log and somewhere we forget to put\nthe 2, just assume",
    "start": "3239550",
    "end": "3244589"
  },
  {
    "text": "it's log base 2, unless\notherwise stated. ",
    "start": "3244590",
    "end": "3250220"
  },
  {
    "text": "For each x, you\ncompute it, sort in--",
    "start": "3250220",
    "end": "3257905"
  },
  {
    "start": "3257905",
    "end": "3263530"
  },
  {
    "text": "sort symbols in lx1 greater than\nor equal to lx2 dot dot dot,",
    "start": "3263530",
    "end": "3272960"
  },
  {
    "text": "increasing order of the lengths. For each symbol x,\nso in the above order",
    "start": "3272960",
    "end": "3284340"
  },
  {
    "text": "that we just sorted them in-- ",
    "start": "3284340",
    "end": "3293860"
  },
  {
    "text": "it's a very, very simple-- if you have done algorithms,\nthis is a greedy algorithm.",
    "start": "3293860",
    "end": "3299320"
  },
  {
    "text": "Assign leaf of\nthe-- a prefix code",
    "start": "3299320",
    "end": "3304780"
  },
  {
    "text": "is a tree, as you already saw. So you're just going to\nassign a tree at depth lx",
    "start": "3304780",
    "end": "3320490"
  },
  {
    "text": "without violating\nprefix condition.",
    "start": "3320490",
    "end": "3330690"
  },
  {
    "text": " And this, I think,\nyou will actually",
    "start": "3330690",
    "end": "3336940"
  },
  {
    "text": "implement in the first homework. Very simple idea. What you do is--",
    "start": "3336940",
    "end": "3342940"
  },
  {
    "text": "you know that your lengths have\nto be this log 1 by px thing, right? So you already\ncompute the lengths.",
    "start": "3342940",
    "end": "3349600"
  },
  {
    "text": "You saw the symbols in the order\nof their increasing length. Then, for each symbol,\nlet's say I say",
    "start": "3349600",
    "end": "3355420"
  },
  {
    "text": "a symbol which has length 1. So I [AUDIO OUT] the tree-- which leaves of length 1 are\navailable without violating",
    "start": "3355420",
    "end": "3363030"
  },
  {
    "text": "the prefix? And we'll see an example. You assign that greedily. You don't need to\nthink too much.",
    "start": "3363030",
    "end": "3368630"
  },
  {
    "text": "Next symbol you\nsee maybe length 3. You find a place\nin the tree which",
    "start": "3368630",
    "end": "3374810"
  },
  {
    "text": "has depth 3, which if it is not\nalready a child of something else, and you assign it.",
    "start": "3374810",
    "end": "3380750"
  },
  {
    "text": "And you go on, go on. And then you have a code\nwhich will work out. ",
    "start": "3380750",
    "end": "3387980"
  },
  {
    "text": "Let's do an example. And then if anybody\nhas questions, we will go through\nthe questions.",
    "start": "3387980",
    "end": "3393680"
  },
  {
    "text": "I think the example will help. ",
    "start": "3393680",
    "end": "3399260"
  },
  {
    "text": "So A, B, C. We'll take a\nslightly bigger example so that it's easier. ",
    "start": "3399260",
    "end": "3414630"
  },
  {
    "text": "So this is x, the symbol. px is the probability\nof the symbol. And let's compute l\nof x, which I computed",
    "start": "3414630",
    "end": "3422130"
  },
  {
    "text": "at home to save us time. So 2, 2, 3, 3, 5.",
    "start": "3422130",
    "end": "3428335"
  },
  {
    "text": "OK.  And then as we\nwork through it, we",
    "start": "3428335",
    "end": "3434580"
  },
  {
    "text": "will assign these code words. But when we start, we don't\nhave anything to go with. ",
    "start": "3434580",
    "end": "3444420"
  },
  {
    "text": "OK, so I start. I have nothing initially, right?",
    "start": "3444420",
    "end": "3449790"
  },
  {
    "text": "They're already sorted\nin the increasing length so that that's also done. So step one is already done.",
    "start": "3449790",
    "end": "3455220"
  },
  {
    "text": "Step two is done. Now, the first symbol\nyou see is A. Can you suggest any code\nword of length 2",
    "start": "3455220",
    "end": "3461849"
  },
  {
    "text": "that I can assign without\nviolating the prefix property? 00.",
    "start": "3461850",
    "end": "3468130"
  },
  {
    "text": "Yeah, so one answer is 00. I could have done\n11, 10, all four. Right now, there is no code,\nso there is no prefix property.",
    "start": "3468130",
    "end": "3474940"
  },
  {
    "text": "So anything is fine. So let's assign 00 to\nkeep things simple. ",
    "start": "3474940",
    "end": "3482080"
  },
  {
    "text": "So I've assigned 00\nto A at this point. OK, now for B. B,\nI need to assign",
    "start": "3482080",
    "end": "3490080"
  },
  {
    "text": "again a length to a code word\nwithout violating the prefix property. Suggestions?",
    "start": "3490080",
    "end": "3497060"
  },
  {
    "text": "01. 01, OK, I like it. I like people that\nare not straying off",
    "start": "3497060",
    "end": "3502340"
  },
  {
    "text": "the code that I made at home. OK. ",
    "start": "3502340",
    "end": "3507839"
  },
  {
    "text": "OK, for C, I need a length 3. ",
    "start": "3507840",
    "end": "3513500"
  },
  {
    "text": "What about 000? Is that good?  000 is not good.",
    "start": "3513500",
    "end": "3519380"
  },
  {
    "text": "It's a child of A, so it will\nviolate the prefix property. So let me assign something.",
    "start": "3519380",
    "end": "3527530"
  },
  {
    "text": "I need to go to this\nbranch, I think. Let's just take this path, 111.",
    "start": "3527530",
    "end": "3538130"
  },
  {
    "text": "When you actually implement\nit, what you would want to do is not to take any random node.",
    "start": "3538130",
    "end": "3543703"
  },
  {
    "text": "What you would want is sort\nof go lexicographically. It just makes everything\neasier, makes your algorithm more deterministic.",
    "start": "3543703",
    "end": "3549410"
  },
  {
    "text": "But for illustration purpose,\nyou can choose anything. It's fine. So I assigned 111 to C. Now\nto D, any suggestions for D?",
    "start": "3549410",
    "end": "3559325"
  },
  {
    "start": "3559325",
    "end": "3564730"
  },
  {
    "text": "110? 110, but let me not do that. Let me do 101.",
    "start": "3564730",
    "end": "3572260"
  },
  {
    "text": "So 101, I will do D, just to\nshow that it doesn't really matter. There are a bunch of\npossibilities here.",
    "start": "3572260",
    "end": "3580240"
  },
  {
    "text": "OK, last one, E. E you\nneed a length 5 code word. ",
    "start": "3580240",
    "end": "3589230"
  },
  {
    "text": "so let me do it. Let me take a path from here\nand then here and then here.",
    "start": "3589230",
    "end": "3596985"
  },
  {
    "start": "3596985",
    "end": "3607710"
  },
  {
    "text": "OK, so we got a\nprefix-free code. It satisfies this\nlength condition. Everything is good.",
    "start": "3607710",
    "end": "3614609"
  },
  {
    "text": "Question, is this a good code? Do you think it's\nthe best code I can make for this distribution?",
    "start": "3614610",
    "end": "3620460"
  },
  {
    "text": " OK, let's do a vote. How many of you think this is\nthe absolute best code for this",
    "start": "3620460",
    "end": "3628240"
  },
  {
    "text": "distribution, you cannot\nbeat it in any way in terms of the expected code length?",
    "start": "3628240",
    "end": "3635049"
  },
  {
    "text": "How many of you think it is\nnot the absolute best code? OK, so I see a bunch\nof raised hands",
    "start": "3635050",
    "end": "3641090"
  },
  {
    "text": "for not the absolute best. One of you, why do you think\nit's not the absolute best",
    "start": "3641090",
    "end": "3647630"
  },
  {
    "text": "code for this distribution? E could be significantly\nsmaller length. Yeah.",
    "start": "3647630",
    "end": "3653150"
  },
  {
    "text": "Yeah, so the answer\nis E could be smaller. We are-- what's happening here,\nthis is not something we like.",
    "start": "3653150",
    "end": "3660349"
  },
  {
    "text": "You have E here. You could have placed\nE here without-- sorry, I don't know how to undo.",
    "start": "3660350",
    "end": "3668570"
  },
  {
    "text": "Let me-- Yeah, so you could have\nmade E much smaller",
    "start": "3668570",
    "end": "3674030"
  },
  {
    "text": "without affecting the\nprefix-free property. And hence, you\ncould have improved. Even C, C is not very good.",
    "start": "3674030",
    "end": "3681020"
  },
  {
    "text": "C you could have placed here. So we said that Shannon\ncodes are good codes.",
    "start": "3681020",
    "end": "3686280"
  },
  {
    "text": "So they are good in\na sense that we will define in the next lecture. They come very close\nto the optimal,",
    "start": "3686280",
    "end": "3692450"
  },
  {
    "text": "but they are not\nnecessarily optimal. Next Monday, we will learn\nabout the code which is optimal.",
    "start": "3692450",
    "end": "3699080"
  },
  {
    "text": "But for now, I guess we will\nlive with what we have got. And this is the code. ",
    "start": "3699080",
    "end": "3716860"
  },
  {
    "text": "I'll show that\nthis construction--",
    "start": "3716860",
    "end": "3722180"
  },
  {
    "text": "so if you like-- if you read\nthis construction carefully, what you will observe\nis step one is obvious.",
    "start": "3722180",
    "end": "3727400"
  },
  {
    "text": "There is nothing there. Step two is obvious. You can always sort things. Step three depends\non the fact that when",
    "start": "3727400",
    "end": "3733910"
  },
  {
    "text": "you are trying to\nassign a leaf, there should be a leaf available. If there is no leaf available,\nthen you can't assign anything.",
    "start": "3733910",
    "end": "3741380"
  },
  {
    "text": "So actually, if you have\ndone the greedy algorithms, if you have done the minimum\nspanning tree or something,",
    "start": "3741380",
    "end": "3748930"
  },
  {
    "text": "you always need to prove that\nthe next greedy step is indeed possible.",
    "start": "3748930",
    "end": "3756130"
  },
  {
    "text": "So really, the thing to prove\nhere, which we'll prove now-- ",
    "start": "3756130",
    "end": "3762700"
  },
  {
    "text": "it's like an inductive proof. So we need to-- we need to prove that this\nconstruction always works.",
    "start": "3762700",
    "end": "3767990"
  },
  {
    "text": "So we need to prove a leaf at\nlx depth is always available--",
    "start": "3767990",
    "end": "3782130"
  },
  {
    "start": "3782130",
    "end": "3789789"
  },
  {
    "text": "always available without\nviolating the prefix condition.",
    "start": "3789790",
    "end": "3796460"
  },
  {
    "start": "3796460",
    "end": "3803440"
  },
  {
    "text": "OK, so let me go\nthrough the proof.",
    "start": "3803440",
    "end": "3808990"
  },
  {
    "text": "And stop me if you\nhave questions. ",
    "start": "3808990",
    "end": "3816210"
  },
  {
    "text": "If you have not done proofs\nbefore, don't worry too much. Only very small part of\nthe course hinges on this.",
    "start": "3816210",
    "end": "3823770"
  },
  {
    "text": "I hope you find the\nproof intuitive. It's not like one\nof those proofs where suddenly\nyou get the result",
    "start": "3823770",
    "end": "3828900"
  },
  {
    "text": "and you have no\nidea what happened. It's very obvious in some ways. OK, so proof.",
    "start": "3828900",
    "end": "3837480"
  },
  {
    "text": " So if we take all the things--",
    "start": "3837480",
    "end": "3846560"
  },
  {
    "text": "we take the sum-- this sum is 2 power-- we know\nthat the length is log base 2 1",
    "start": "3846560",
    "end": "3854350"
  },
  {
    "text": "over p of x. If you've forgotten\nthe properties of logs, now is a good time to refresh.",
    "start": "3854350",
    "end": "3860530"
  },
  {
    "text": " Now, you know that the\nceiling of something",
    "start": "3860530",
    "end": "3866090"
  },
  {
    "text": "is bigger than the original. Ceiling of x is bigger\nthan or equal to-- bigger than or equal to x.",
    "start": "3866090",
    "end": "3872480"
  },
  {
    "text": "So minus ceiling of x will be\nsmaller than or equal to x. So after a bunch of--",
    "start": "3872480",
    "end": "3878930"
  },
  {
    "text": "after like two steps, basically,\nyou can convert this 2. You can remove the\nceiling function,",
    "start": "3878930",
    "end": "3884460"
  },
  {
    "text": "which just causes problems. And then just properties\nof logs, right?",
    "start": "3884460",
    "end": "3890050"
  },
  {
    "text": "2 power minus log 1 over p of x\nis just-- this whole thing is--",
    "start": "3890050",
    "end": "3895180"
  },
  {
    "text": "this whole thing is just p of x. So this is summation p of x.",
    "start": "3895180",
    "end": "3904420"
  },
  {
    "text": "And this I think\nall of you know. What is the sum\nof probabilities? ",
    "start": "3904420",
    "end": "3910860"
  },
  {
    "text": "1. Yes, I'm seeing 1. OK, 1, right? So let me note this down as\npoint one, 1 power minus x",
    "start": "3910860",
    "end": "3922710"
  },
  {
    "text": "less than or equal to 1. This is one. ",
    "start": "3922710",
    "end": "3930130"
  },
  {
    "text": "OK, let's keep going. ",
    "start": "3930130",
    "end": "3938060"
  },
  {
    "text": "OK, so say we assigned--",
    "start": "3938060",
    "end": "3944270"
  },
  {
    "text": "so this is an inductive proof. So you say that you have\nalready done m steps, and now you will prove that\nthe m plus 1 step is possible.",
    "start": "3944270",
    "end": "3950900"
  },
  {
    "text": "So we assigned x1 to xm. So next is xm plus 1.",
    "start": "3950900",
    "end": "3959680"
  },
  {
    "text": "So then we already\nsaw above that the sum",
    "start": "3959680",
    "end": "3965790"
  },
  {
    "text": "of all the probabilities\nis less than or equal to 1. So therefore, if\nyou add from 1 to m,",
    "start": "3965790",
    "end": "3973290"
  },
  {
    "text": "and then you add\nthe next one, this is clearly smaller\nthan the total sum. So this will be less than 1.",
    "start": "3973290",
    "end": "3981619"
  },
  {
    "text": "So this is based on one\nbecause this is a partial sum.",
    "start": "3981620",
    "end": "3989940"
  },
  {
    "text": "This is only part\nof the total sum. ",
    "start": "3989940",
    "end": "3995819"
  },
  {
    "text": "This one was over all\nsymbols in your alphabet. We are now just restricting\nto first m plus 1 symbols.",
    "start": "3995820",
    "end": "4001880"
  },
  {
    "text": " Or-- So what I will do\nnow is sort of the key.",
    "start": "4001880",
    "end": "4011140"
  },
  {
    "text": "I will multiply both sides\nby 2 power l xm plus 1. And then I will move one of\nthe terms to the right to get--",
    "start": "4011140",
    "end": "4019720"
  },
  {
    "start": "4019720",
    "end": "4037330"
  },
  {
    "text": "minus 1. ",
    "start": "4037330",
    "end": "4045060"
  },
  {
    "text": "OK, until now, I was\njust multiplying things, moving around things, no\nspecial logic until now.",
    "start": "4045060",
    "end": "4052428"
  },
  {
    "text": "So let me move this\nto the next page, and then we will look\nat some actual logic.",
    "start": "4052428",
    "end": "4059320"
  },
  {
    "text": "OK, so I will copy over\nthe last point again. So i equal to 1 to m, 2 power l\nxm plus 1 minus l xi less than",
    "start": "4059320",
    "end": "4073800"
  },
  {
    "text": "or equal to 2 power\nxm plus 1 minus 1. ",
    "start": "4073800",
    "end": "4081300"
  },
  {
    "text": "Let's call it two. ",
    "start": "4081300",
    "end": "4088320"
  },
  {
    "text": "Now, this is the part where\na visual representation is",
    "start": "4088320",
    "end": "4094870"
  },
  {
    "text": "much, much easier to interpret. So let's look at this. If you have a tree,\nand they are at depth--",
    "start": "4094870",
    "end": "4104469"
  },
  {
    "text": " let's say you are at depth li,\nyou have a node at depth li,",
    "start": "4104470",
    "end": "4113680"
  },
  {
    "text": "and you have a subtree\nbelow this with total depth",
    "start": "4113680",
    "end": "4119399"
  },
  {
    "text": "lm plus 1. ",
    "start": "4119399",
    "end": "4124949"
  },
  {
    "text": "OK, so first, simple question. How many nodes do I have at\ndepth l for a binary tree?",
    "start": "4124950",
    "end": "4133709"
  },
  {
    "text": " 2 to the l, right? So in a binary tree at depth\nl, I have 2 to the l nodes.",
    "start": "4133709",
    "end": "4143250"
  },
  {
    "text": "Now, if I have this node at li\nand then I create a subtree,",
    "start": "4143250",
    "end": "4151549"
  },
  {
    "text": "a tree below that node,\nwith overall depth l plus 1, how many nodes do I have here?",
    "start": "4151550",
    "end": "4157359"
  },
  {
    "text": "How many nodes do I have here? How many nodes of\ndepth l plus 1 are",
    "start": "4157359",
    "end": "4163299"
  },
  {
    "text": "children of a node\nor descendants of a node at depth li? ",
    "start": "4163300",
    "end": "4170759"
  },
  {
    "text": "2 to the lm plus 1 minus li. Yes, so let me write that down.",
    "start": "4170760",
    "end": "4178839"
  },
  {
    "text": "So number of leaves\nat lm plus 1 that",
    "start": "4178840",
    "end": "4188699"
  },
  {
    "text": "are descendants of\ndepth li node are",
    "start": "4188700",
    "end": "4198750"
  },
  {
    "text": "2 to the lm plus 1 minus li. OK. ",
    "start": "4198750",
    "end": "4208480"
  },
  {
    "text": "Now, let's come back\nto this inequality. What is it saying really?",
    "start": "4208480",
    "end": "4213670"
  },
  {
    "text": "Each of these terms,\nwhat is it saying? ",
    "start": "4213670",
    "end": "4219780"
  },
  {
    "text": "So this term, this is\nnumber of descendants",
    "start": "4219780",
    "end": "4231389"
  },
  {
    "text": "of the code word of xi,\nbasically, that leaf,",
    "start": "4231390",
    "end": "4237330"
  },
  {
    "text": "at depth l xm plus 1.",
    "start": "4237330",
    "end": "4244320"
  },
  {
    "text": "What is this term? This term is the total number\nof leaves at l xm plus 1.",
    "start": "4244320",
    "end": "4257085"
  },
  {
    "text": " So what we are saying is if\nyou take all the nodes you have",
    "start": "4257085",
    "end": "4263670"
  },
  {
    "text": "already added, like all the\nleafs you have already added, you extend each of them\nto depth l xm plus 1,",
    "start": "4263670",
    "end": "4272170"
  },
  {
    "text": "you see that there is still\nat least one node left.",
    "start": "4272170",
    "end": "4277580"
  },
  {
    "text": "And let me draw it for you. So what we are saying, and\nplease think about this at home",
    "start": "4277580",
    "end": "4283760"
  },
  {
    "text": "as well, is-- ",
    "start": "4283760",
    "end": "4295849"
  },
  {
    "text": "so what we did was-- so you assigned x1 here, you\nassigned x2 here, x three here",
    "start": "4295850",
    "end": "4305990"
  },
  {
    "text": "maybe you assigned x4 here. You are now at x5. x5 is at a certain depth. So this is like your l x5.",
    "start": "4305990",
    "end": "4314340"
  },
  {
    "text": "Now we are saying, let's\ntake each of these guys, extend them to the level right\nhere, like this, this, this.",
    "start": "4314340",
    "end": "4321605"
  },
  {
    "text": " So all of these\nareas are invalid.",
    "start": "4321605",
    "end": "4329900"
  },
  {
    "text": "Why? Because any node\nhere will be a child,",
    "start": "4329900",
    "end": "4336190"
  },
  {
    "text": "a descendant of\nthe x1 node so x1 will be a prefix if you\ntry to assign it here. That's not good.",
    "start": "4336190",
    "end": "4341800"
  },
  {
    "text": "Similarly, any node\nin this area is bad. So for example, if x1 was 00,\nthese nodes will be like 0011,",
    "start": "4341800",
    "end": "4348889"
  },
  {
    "text": "0000, all of these guys. So these are just not allowed\nthese are not allowed.",
    "start": "4348890",
    "end": "4353980"
  },
  {
    "text": "These are not allowed. These are not allowed. So what we are trying\nis we are trying to eliminate all the\nnodes that are disallowed",
    "start": "4353980",
    "end": "4359110"
  },
  {
    "text": "by the prefix-free property. And what we are showing is\nthat even after you remove",
    "start": "4359110",
    "end": "4366639"
  },
  {
    "text": "every node that is illegal,\nlike which is not allowed, you are still left with one\nnode, which is still valid.",
    "start": "4366640",
    "end": "4373285"
  },
  {
    "text": " Right. Any questions on this?",
    "start": "4373285",
    "end": "4378310"
  },
  {
    "text": " I will give you time\nto digest, I guess.",
    "start": "4378310",
    "end": "4384470"
  },
  {
    "text": "This is also written\nup in the notes, which are available on the website. ",
    "start": "4384470",
    "end": "4399410"
  },
  {
    "text": "OK, yeah, yeah. ",
    "start": "4399410",
    "end": "4411320"
  },
  {
    "text": "So just to finish\noff the proof-- ",
    "start": "4411320",
    "end": "4421460"
  },
  {
    "text": "so if you just\nwrite it like this, this is the total\nnumber of leaves at l xm",
    "start": "4421460",
    "end": "4432829"
  },
  {
    "text": "plus 1 depth minus\nsummation 1 to m.",
    "start": "4432830",
    "end": "4441060"
  },
  {
    "start": "4441060",
    "end": "4449390"
  },
  {
    "text": "So this is the number\nof leaves not allowed",
    "start": "4449390",
    "end": "4459620"
  },
  {
    "text": "because they are descended\nfrom existing code word.",
    "start": "4459620",
    "end": "4474050"
  },
  {
    "text": "So what we have basically\nshown is that this is greater than or equal to 1. So there is at\nleast one leaf left",
    "start": "4474050",
    "end": "4479450"
  },
  {
    "text": "at every step which you can\nassign to your next symbol, to xm plus 1. So at depth l xm plus 1,\nthere is at least one leaf",
    "start": "4479450",
    "end": "4487310"
  },
  {
    "text": "which is left. So that is basically the proof. ",
    "start": "4487310",
    "end": "4495930"
  },
  {
    "text": "Sorry if it was too much. But I guess you have to see it. Next class, we'll see another\nproof which is very similar,",
    "start": "4495930",
    "end": "4503180"
  },
  {
    "text": "so I think that will help. ",
    "start": "4503180",
    "end": "4513500"
  },
  {
    "text": "And we will put these up. ",
    "start": "4513500",
    "end": "4552480"
  },
  {
    "text": "Right. I think I will not\nhave time to cover the last topic, Kraft's\ninequality, which",
    "start": "4552480",
    "end": "4558960"
  },
  {
    "text": "we'll do next lecture. I will leave it here and\nanswer any questions.",
    "start": "4558960",
    "end": "4564780"
  },
  {
    "text": "Otherwise, thank you.  So don't be scared\nof the proofs,",
    "start": "4564780",
    "end": "4571110"
  },
  {
    "text": "if you are scared, because\nthey're only for two lectures. Then it's mostly algorithmic.",
    "start": "4571110",
    "end": "4577619"
  },
  {
    "text": "And if you're scared\nabout it, make examples. I think that will really help. Just make some trees and\nsee what these quantities",
    "start": "4577620",
    "end": "4586679"
  },
  {
    "text": "are at various steps. Thank you. ",
    "start": "4586680",
    "end": "4595000"
  }
]