[
  {
    "start": "0",
    "end": "238000"
  },
  {
    "text": "good afternoon welcome to ee380 the stanford electrical engineering computer",
    "start": "11200",
    "end": "17359"
  },
  {
    "text": "systems colloquium which meets every wednesday our speaker today is dick seitz",
    "start": "17359",
    "end": "25840"
  },
  {
    "text": "who has a long a long and uh pretty illustrious history",
    "start": "25840",
    "end": "31279"
  },
  {
    "text": "in the uh in the business and he is uh talking about uh some of",
    "start": "31279",
    "end": "36719"
  },
  {
    "text": "the work that he's reported in his uh understanding software dynamics his",
    "start": "36719",
    "end": "42239"
  },
  {
    "text": "recent book probably the uh the most significant book of the year",
    "start": "42239",
    "end": "48079"
  },
  {
    "text": "i think um it's a great uh it's a great read uh i'm not finished with it but i'm i'm",
    "start": "48079",
    "end": "55360"
  },
  {
    "text": "making considerable progress every night um in any case uh it's going to tell us about what it's",
    "start": "55360",
    "end": "62320"
  },
  {
    "text": "like making the invisible web invisible making the invisible visible",
    "start": "62320",
    "end": "69280"
  },
  {
    "text": "and this is the problem of how do you see what a complex computer system is",
    "start": "69280",
    "end": "75200"
  },
  {
    "text": "really doing and uh thank you for coming up and uh",
    "start": "75200",
    "end": "80720"
  },
  {
    "text": "participating as a speaker and um just a little word of",
    "start": "80720",
    "end": "87119"
  },
  {
    "text": "advertisement we're coming up at the end of the quarter and beginning the next quarter",
    "start": "87119",
    "end": "93520"
  },
  {
    "text": "and there are going to be 10 more lectures in the computer systems lab",
    "start": "93520",
    "end": "101119"
  },
  {
    "text": "series of colloquia and you should",
    "start": "101119",
    "end": "106640"
  },
  {
    "text": "sign up on the website ee380.stanford.edu",
    "start": "106640",
    "end": "112040"
  },
  {
    "text": "and get our announcements and uh come and see some of the more interesting things that are going on",
    "start": "112079",
    "end": "118399"
  },
  {
    "text": "anyhow dick it's um it's all yours thank you very much i'm uh",
    "start": "118399",
    "end": "124399"
  },
  {
    "text": "into very brief introductions now so you'll have to explain yourself take care bye-bye",
    "start": "124399",
    "end": "130160"
  },
  {
    "text": "all right thank you dennis and uh welcome everyone i'm i'm sort of flat talking to screens",
    "start": "130160",
    "end": "136640"
  },
  {
    "text": "and with two screens in front of me a particularly flat one i'm looking at the wrong screen so my wife had this brilliant suggestion",
    "start": "136640",
    "end": "143680"
  },
  {
    "text": "that i have pasted a picture of our son next to the camera and i will speak to him for the next 45 minutes",
    "start": "143680",
    "end": "150800"
  },
  {
    "text": "so the i'm going to talk about making the visible visible observing complex software dynamics i've",
    "start": "150959",
    "end": "157920"
  },
  {
    "text": "been interested uh basically forever in software performance and understanding why things",
    "start": "157920",
    "end": "163280"
  },
  {
    "text": "are slow and it's hard to understand for very complex software why it's slow until you",
    "start": "163280",
    "end": "169040"
  },
  {
    "text": "can actually observe what it's doing which when it's slow is always not a match to the picture in our heads as",
    "start": "169040",
    "end": "175519"
  },
  {
    "text": "programmers we think of things in very simple ways and we tend to ignore page faults and interrupts and things",
    "start": "175519",
    "end": "181840"
  },
  {
    "text": "that we can't quite imagine well and it takes a long time to",
    "start": "181840",
    "end": "189040"
  },
  {
    "text": "realize that the fictional head doesn't match reality and how it doesn't match reality and therefore what's wrong and",
    "start": "189040",
    "end": "194640"
  },
  {
    "text": "what to be sped up so if i had my cursor in the right place i",
    "start": "194640",
    "end": "200959"
  },
  {
    "text": "could change slides here we go so i'm going to tell you what complex of what i mean by complex software dynamics and",
    "start": "200959",
    "end": "207360"
  },
  {
    "text": "then go through the only seven reasons that code can be slow when it normally",
    "start": "207360",
    "end": "212959"
  },
  {
    "text": "runs at a pretty decent speed the intended speed and then now and then doing transactions or",
    "start": "212959",
    "end": "219680"
  },
  {
    "text": "something or database lookups or analyzing",
    "start": "219680",
    "end": "225599"
  },
  {
    "text": "video frames 30 times a second while a car is going down the road at 80 miles an hour there's only seven things that",
    "start": "225599",
    "end": "231920"
  },
  {
    "text": "can make it go slowly now and then so i'll go through each of those and then a summary at the end",
    "start": "231920",
    "end": "238959"
  },
  {
    "start": "238000",
    "end": "344000"
  },
  {
    "text": "so here's a picture of simple software this is just a timeline running on one cpu",
    "start": "239360",
    "end": "245200"
  },
  {
    "text": "for a few seconds the program starts over here on the edge it runs solid cpu bound for a few seconds",
    "start": "245200",
    "end": "252640"
  },
  {
    "text": "and it stops it has a few loops that are marked here",
    "start": "252640",
    "end": "258079"
  },
  {
    "text": "this is what i mean by complex software this is uh",
    "start": "258079",
    "end": "263140"
  },
  {
    "text": "[Music] a couple milliseconds of the chrome browser running on four cpus so on the",
    "start": "263140",
    "end": "269040"
  },
  {
    "text": "y-axis there's four cpu co3c three on the x-axis there's a couple",
    "start": "269040",
    "end": "274880"
  },
  {
    "text": "milliseconds of time and at each each instant and time at each nanosecond the diagram shows what's",
    "start": "274880",
    "end": "280960"
  },
  {
    "text": "executing on that cpu core so the black lines are idle",
    "start": "280960",
    "end": "287360"
  },
  {
    "text": "the sine wave will get back to it a little bit the high colored boxes are operating",
    "start": "287360",
    "end": "292720"
  },
  {
    "text": "system code kernel code and the half height color boxes are user",
    "start": "292720",
    "end": "297759"
  },
  {
    "text": "mode code and in this case i've labeled all of the the first instance of each user mode",
    "start": "297759",
    "end": "304160"
  },
  {
    "text": "thread so there's seven different threads running here and the arcs are showing that this system call in this thread",
    "start": "304160",
    "end": "311680"
  },
  {
    "text": "woke up that thread and it ran here this system call woke up that thread and it",
    "start": "311680",
    "end": "317120"
  },
  {
    "text": "didn't run for a long time but sometimes that's the problem we want to look at so this includes everything all",
    "start": "317120",
    "end": "323360"
  },
  {
    "text": "interrupts all system calls all page faults all transitions between user node",
    "start": "323360",
    "end": "328479"
  },
  {
    "text": "and kernel mode are what i trace and then the post-processing turns those transitions",
    "start": "328479",
    "end": "334240"
  },
  {
    "text": "which is a very small amount of information into the diagrams of everything that's going on with no uh",
    "start": "334240",
    "end": "340800"
  },
  {
    "text": "no nanosecond lost so i'm focused on time sensitive",
    "start": "340800",
    "end": "347759"
  },
  {
    "start": "344000",
    "end": "753000"
  },
  {
    "text": "application code so user code i'm not interested in the operating system per se i'm",
    "start": "347759",
    "end": "352800"
  },
  {
    "text": "interested in when the operating system slows down what my program is doing my program is a",
    "start": "352800",
    "end": "358479"
  },
  {
    "text": "user mode thing i'm interested in code that's already been debugged it has good design has",
    "start": "358479",
    "end": "363919"
  },
  {
    "text": "good algorithms it's normally runs as desired with good performance but has",
    "start": "363919",
    "end": "369120"
  },
  {
    "text": "unexpected sporadic serious delays sometimes only delays that occur in a",
    "start": "369120",
    "end": "375440"
  },
  {
    "text": "production environment that occur in testing environments and those are the uh hard things that a",
    "start": "375440",
    "end": "381680"
  },
  {
    "text": "lot of people sort of live with but i have spent the last 15 years or more",
    "start": "381680",
    "end": "388720"
  },
  {
    "text": "trying to understand what's really going on and they're then finding things that are oh well that's screwed up and it",
    "start": "388720",
    "end": "394560"
  },
  {
    "text": "takes 20 minutes to fix so when you have repetitive code that's doing individual transactions whatever",
    "start": "394560",
    "end": "401199"
  },
  {
    "text": "that only occasionally runs slowly there's just three things you can make it run slowly either you're executing",
    "start": "401199",
    "end": "407039"
  },
  {
    "text": "more code in the slow cases than in the normal cases or you're executing the same code but",
    "start": "407039",
    "end": "412479"
  },
  {
    "text": "you're executing it more slowly for some reason or you're not executing you're waiting for something",
    "start": "412479",
    "end": "419680"
  },
  {
    "text": "and you'll find that i in the next uh 15 minutes or so we'll",
    "start": "419680",
    "end": "425520"
  },
  {
    "text": "complain about observation tools that that uh totally ignore the not executing and therefore",
    "start": "425520",
    "end": "431680"
  },
  {
    "text": "can't tell you why you're waiting and there's only five things to wait for there's five uh five resources",
    "start": "431680",
    "end": "437520"
  },
  {
    "text": "cpu memory disk for ssd network and locks software critical sections so",
    "start": "437520",
    "end": "445759"
  },
  {
    "text": "the first four are hardware resources and last one is software resource",
    "start": "445759",
    "end": "450960"
  },
  {
    "text": "in real production systems there's nothing else you end up waiting on",
    "start": "450960",
    "end": "456880"
  },
  {
    "text": "and as an industry we generally have very poor tools or observing what's really happening and particularly in time-sensitive production code where",
    "start": "459039",
    "end": "466720"
  },
  {
    "text": "a tool that slows everything down by 10 is useless cannot cannot be used in a",
    "start": "466720",
    "end": "471759"
  },
  {
    "text": "production data center or inside of a an airplane or whatever",
    "start": "471759",
    "end": "478800"
  },
  {
    "text": "inside of the database even the 10 slowdown is is generally terrible",
    "start": "478800",
    "end": "485680"
  },
  {
    "text": "so i'm going to talk about uh the system called kutrace kernel user tracing",
    "start": "485680",
    "end": "491199"
  },
  {
    "text": "the book talks about it a lot and the code there's a reference on the slide at the end the code is all open sourced on",
    "start": "491199",
    "end": "497199"
  },
  {
    "text": "github it's a small set of linux kernel batches that record every transition between",
    "start": "497199",
    "end": "502479"
  },
  {
    "text": "user mode and kernel mode and each of those transitions is recorded in just four bytes a 20-bit",
    "start": "502479",
    "end": "508479"
  },
  {
    "text": "timestamp and a 12-bit which transition what happened which event and that's all",
    "start": "508479",
    "end": "513599"
  },
  {
    "text": "and i just write those in memory as as fast as they occur in reserved kernel ram",
    "start": "513599",
    "end": "520800"
  },
  {
    "text": "the overhead for doing that is less than one percent in a busy production data center environment",
    "start": "520800",
    "end": "527279"
  },
  {
    "text": "with 200 000 transitions per second per core the overhead is less than one percent",
    "start": "527279",
    "end": "534880"
  },
  {
    "text": "and it's much much less than that in simple environments then everything else and all of the diagrams i'm going to",
    "start": "534880",
    "end": "540080"
  },
  {
    "text": "show you come from post-processing the raw traces that just have these very simple very compact",
    "start": "540080",
    "end": "546160"
  },
  {
    "text": "transitions so visibility",
    "start": "546160",
    "end": "551600"
  },
  {
    "text": "um until you trace when code is running all the execution time of all the",
    "start": "551600",
    "end": "557279"
  },
  {
    "text": "threads on all the cores is captured you know not just my program but all the other surrounding programs not just user",
    "start": "557279",
    "end": "564800"
  },
  {
    "text": "code but the operating system itself because those are the sources of interference and if you don't look at",
    "start": "564800",
    "end": "571519"
  },
  {
    "text": "them it's like if you can't see them it's like looking for the lost car keys under the lamp post",
    "start": "571519",
    "end": "576640"
  },
  {
    "text": "because the light's good there even though you drop them two blocks over",
    "start": "576640",
    "end": "582160"
  },
  {
    "text": "for things that are not running you have a thread that's running and it stops running it doesn't spontaneously",
    "start": "582160",
    "end": "588800"
  },
  {
    "text": "stop there's a reason and when later it restarts it doesn't spontaneously restart there's a reason",
    "start": "588800",
    "end": "594959"
  },
  {
    "text": "so i'm going to ask questions now that we have a few people just uh unmute and give you to word answer and mute again",
    "start": "594959",
    "end": "602240"
  },
  {
    "text": "what are some of the reasons that running threads stop and start again",
    "start": "602240",
    "end": "607920"
  },
  {
    "text": "pick one system calls",
    "start": "609200",
    "end": "615519"
  },
  {
    "text": "the web system called system called",
    "start": "615519",
    "end": "621920"
  },
  {
    "text": "yes system calls oh system calls switching right",
    "start": "621920",
    "end": "627360"
  },
  {
    "text": "the uh yeah if a thread does the system call and the system call returns to that",
    "start": "627360",
    "end": "633279"
  },
  {
    "text": "thread um it doesn't stop running you do a system call that then blocks and uh",
    "start": "633279",
    "end": "639360"
  },
  {
    "text": "then you go through the schedule and goes to some other thread right it's end of time slots",
    "start": "639360",
    "end": "644959"
  },
  {
    "text": "end of time slot again you end up going to get some timer internet and it goes off to the scheduler and changes yeah so",
    "start": "644959",
    "end": "651120"
  },
  {
    "text": "there's a bunch of those and if you don't if you can't see what it's doing it's hard to figure out which things are",
    "start": "651120",
    "end": "657279"
  },
  {
    "text": "making your threads that you want to be executing not execute",
    "start": "657279",
    "end": "662320"
  },
  {
    "text": "so the way i design ku trace the reason for not executing is always in the trace",
    "start": "662320",
    "end": "671600"
  },
  {
    "text": "there's a thread that's running along in user mode can't spontaneously stop executing",
    "start": "672000",
    "end": "677360"
  },
  {
    "text": "without going to the operating system there's no user mode stop executing",
    "start": "677360",
    "end": "683040"
  },
  {
    "text": "instruction and because we get the transition into a particular operating system uh routine",
    "start": "683040",
    "end": "689360"
  },
  {
    "text": "you get to see why it stopped and then later you get to see what it stops and never water",
    "start": "689360",
    "end": "695920"
  },
  {
    "text": "so if you're running along can you block inside of a cis reed or",
    "start": "697600",
    "end": "702640"
  },
  {
    "text": "something you get that's in the trace later if some thread wakes us up again",
    "start": "702640",
    "end": "709120"
  },
  {
    "text": "it's a inside of a system call that does the wake up i capture the wake up and then draw the arcs and then",
    "start": "709120",
    "end": "715440"
  },
  {
    "text": "eventually a scheduler runs and redispatches the thing to block and that's in the trace",
    "start": "715440",
    "end": "722240"
  },
  {
    "text": "there's nothing else that can make things start or stop that's missing from the trace",
    "start": "722240",
    "end": "729519"
  },
  {
    "text": "so i'm going to go through now in a series of seven things and you mentioned the water",
    "start": "729519",
    "end": "735199"
  },
  {
    "text": "of the the seven reasons that things connect can execute slowly or not execute at all in each each sequence",
    "start": "737279",
    "end": "743519"
  },
  {
    "text": "i'll show a black box of the execution lines of some sample programs and then the detailed observations of",
    "start": "743519",
    "end": "749600"
  },
  {
    "text": "what's really going on and then not talk about the new causes so we talked about executing too much",
    "start": "749600",
    "end": "756839"
  },
  {
    "text": "code so here's a sample program that's doing some transactions and there's two",
    "start": "756839",
    "end": "762800"
  },
  {
    "text": "short ones two more short ones and in the middle there's one that's 16 times longer so",
    "start": "762800",
    "end": "768399"
  },
  {
    "text": "this is assuming that for most transaction systems database systems whatever that somebody's keeping track",
    "start": "768399",
    "end": "776000"
  },
  {
    "text": "of when something starts and when it stops when it starts when it stops but that's all we have",
    "start": "776000",
    "end": "781680"
  },
  {
    "text": "if we look more carefully at in this case keeping on cpu zero we",
    "start": "781680",
    "end": "787040"
  },
  {
    "text": "can see that the first transaction's starting to stop started stop this one somehow takes longer there's it's just",
    "start": "787040",
    "end": "794000"
  },
  {
    "text": "all solid execution time if we do a pc sampling profile of this",
    "start": "794000",
    "end": "799279"
  },
  {
    "text": "sort of thing the profile looks like this about half the time is spent in some routine called checksum in the",
    "start": "799279",
    "end": "804639"
  },
  {
    "text": "sample program about a third of the time is spent in them copy about 12 in something called decrypting",
    "start": "804639",
    "end": "811279"
  },
  {
    "text": "checksum and then the other couple percenters and a few other things including",
    "start": "811279",
    "end": "816639"
  },
  {
    "text": "in this profiler samples from the operating system itself and occasionally in fact with ku trace",
    "start": "816639",
    "end": "823920"
  },
  {
    "text": "running samples of the ku trace code itself if it happens to be the thing",
    "start": "823920",
    "end": "829440"
  },
  {
    "text": "that's executing just when a timer interrupt comes in",
    "start": "829440",
    "end": "834000"
  },
  {
    "text": "so where in that profile is the explanation of why this is 16 times longer",
    "start": "834800",
    "end": "842279"
  },
  {
    "text": "it's not there it's the wrong tool pc samples are useless",
    "start": "844560",
    "end": "849680"
  },
  {
    "text": "for distinguishing the short transactions on the long ones all",
    "start": "849680",
    "end": "854720"
  },
  {
    "text": "the profiling does is it adds up lots of samples and it so it smashes together all of the",
    "start": "854720",
    "end": "861279"
  },
  {
    "text": "good cases with the bad case uh reducing the signal to the noise ratio of the bad cases down to",
    "start": "861279",
    "end": "867440"
  },
  {
    "text": "almost nothing so instead if we take the same pc samples but record them",
    "start": "867440",
    "end": "874639"
  },
  {
    "text": "sequentially in a trace say this happened and then this happened and then this happened correlated with all the other stuff",
    "start": "874639",
    "end": "880320"
  },
  {
    "text": "that's going on time stamp with the same time base we get to see ah in this particular sample program",
    "start": "880320",
    "end": "888800"
  },
  {
    "text": "this timer interrupt sample found that this code was running the routine called decrypting checksum and",
    "start": "889279",
    "end": "895760"
  },
  {
    "text": "so was that one and so was that one and so was that one and the sample out here",
    "start": "895760",
    "end": "900800"
  },
  {
    "text": "was in a routine called checksum or regular checksum and in fact across the whole trace of the sample program what",
    "start": "900800",
    "end": "907199"
  },
  {
    "text": "we found is that the decrypting checksum is only run in the long transactions",
    "start": "907199",
    "end": "914959"
  },
  {
    "text": "and that the regular checksum and them copying things samples are are",
    "start": "914959",
    "end": "920160"
  },
  {
    "text": "scattered across the other transactions so in fact what's going on is the long",
    "start": "920160",
    "end": "925279"
  },
  {
    "text": "transaction is executing different code extra code too much code",
    "start": "925279",
    "end": "930720"
  },
  {
    "text": "in decrypting checksum which the programmer thought the programmer knew was just as fast as the regular checksum",
    "start": "930720",
    "end": "937839"
  },
  {
    "text": "but of course it isn't at 16 dives slower and now we can see it and now you know what to go fix",
    "start": "937839",
    "end": "944480"
  },
  {
    "text": "but your profile will never tell you so to summarize executing too much code",
    "start": "944480",
    "end": "950800"
  },
  {
    "text": "too much code comes from branching you have some if statement that you that doesn't normally happen and then in this",
    "start": "950800",
    "end": "956560"
  },
  {
    "text": "location it does happen and there's a whole much more code executed or",
    "start": "956560",
    "end": "961839"
  },
  {
    "text": "calls that you didn't expect to happen or call backs and what we",
    "start": "961839",
    "end": "967279"
  },
  {
    "text": "think i want you to go away remembering is that profiles merge together lots of fast cases with the slow cases hiding",
    "start": "967279",
    "end": "972800"
  },
  {
    "text": "what's different about the slow ones therefore useless traces are reveal what's different",
    "start": "972800",
    "end": "980079"
  },
  {
    "text": "so i'm going to execute it too slowly um are there any questions on the uh executing too much code",
    "start": "980880",
    "end": "988880"
  },
  {
    "text": "yes i have a comment i mean because you now you're talking about the profiler by periodic",
    "start": "988959",
    "end": "995920"
  },
  {
    "text": "interrupts but there are some other ways like for example on i'm not sure if you're aware about the cortex-m",
    "start": "995920",
    "end": "1001040"
  },
  {
    "text": "architecture that they have they can sample the pc every 32-bit",
    "start": "1001040",
    "end": "1007120"
  },
  {
    "text": "clocks of cpu is very dense no no it is very dense",
    "start": "1007120",
    "end": "1012800"
  },
  {
    "text": "very dense but but if the profile samples are simply added up and counted",
    "start": "1012800",
    "end": "1020000"
  },
  {
    "text": "that they can't tell you they don't correlate with here's where the slow action was and here's where the fast",
    "start": "1020000",
    "end": "1025438"
  },
  {
    "text": "action actually it is because at every sample they send a full pc so you know exactly where you",
    "start": "1025439",
    "end": "1030798"
  },
  {
    "text": "are and that that's it means that this similar way what what you're saying but anyway that's just a",
    "start": "1030799",
    "end": "1036640"
  },
  {
    "text": "note so with the with the sort of proper hardware support you may have a very dense sampling which it is very nice",
    "start": "1036640",
    "end": "1044160"
  },
  {
    "text": "every 64 clock cycles you can have a full pc you you can build",
    "start": "1044160",
    "end": "1050240"
  },
  {
    "text": "what you're saying is they actually are recording a trace of all of the samples they're not just adding they're not just",
    "start": "1050240",
    "end": "1055440"
  },
  {
    "text": "counting them of course yes yes okay then it's a trace",
    "start": "1055440",
    "end": "1060880"
  },
  {
    "text": "it's a full trace right right anyway that's just because i just for information coming from a high-end",
    "start": "1060880",
    "end": "1067200"
  },
  {
    "text": "debug and trace tools sure that's right",
    "start": "1067200",
    "end": "1072240"
  },
  {
    "text": "we did the same thing in the alpha chips in 1992 of uh every 64k cycles we could",
    "start": "1072240",
    "end": "1078160"
  },
  {
    "text": "generate an interrupt and do a pc sample it doesn't matter whether it's high density or low density samples what",
    "start": "1078160",
    "end": "1083840"
  },
  {
    "text": "matters is you keep them all and correlate them with what else is happening instead of just counting them",
    "start": "1083840",
    "end": "1089200"
  },
  {
    "text": "exactly right right let me go on to executing too slowly",
    "start": "1089200",
    "end": "1095520"
  },
  {
    "text": "so here's an example of a simple program um it's a benchmark",
    "start": "1095520",
    "end": "1100640"
  },
  {
    "text": "and we run it twice and the second time it's 40 percent slower in the first time then all we know is you know i started",
    "start": "1100640",
    "end": "1105679"
  },
  {
    "text": "here and ran there and got to print papers about how fast it is",
    "start": "1105679",
    "end": "1111520"
  },
  {
    "text": "but there's no information about why the second one is 40 slower",
    "start": "1111520",
    "end": "1116640"
  },
  {
    "text": "so if we trace it this is actually a very old whetstone benchmark and it starts up and it runs and it has",
    "start": "1116640",
    "end": "1122080"
  },
  {
    "text": "a bunch of modules module two module three uh that are tight loops uh nominally measuring floating point",
    "start": "1122080",
    "end": "1128559"
  },
  {
    "text": "performance from 1960s here's the second run",
    "start": "1128559",
    "end": "1133760"
  },
  {
    "text": "it simply takes a whole lot longer you can see that a few of the loops like m2 don't take any more time and some of the",
    "start": "1133760",
    "end": "1140799"
  },
  {
    "text": "loops like m11 get a lot longer we can't tell yet from just this amount",
    "start": "1140799",
    "end": "1148240"
  },
  {
    "text": "of information why the other ones are longer but if something executes",
    "start": "1148240",
    "end": "1154559"
  },
  {
    "text": "at a at the expected speed and then the identical code executes more slowly",
    "start": "1154559",
    "end": "1160960"
  },
  {
    "text": "on some other run the only thing going on is there's some kind of interference from other programs",
    "start": "1160960",
    "end": "1169679"
  },
  {
    "text": "the interference can come from shared hardware resources you know there's some other program uh beating the cache to death or main memory or their shared",
    "start": "1170000",
    "end": "1177280"
  },
  {
    "text": "software critical sections the interference comes from what else is running so observation tools that only look at",
    "start": "1177280",
    "end": "1183840"
  },
  {
    "text": "one program can never tell you what's going on if you're executing too slowly so instead with the ku trace we're",
    "start": "1183840",
    "end": "1190480"
  },
  {
    "text": "looking at all the cores all of the processes all of the time we get to see",
    "start": "1190480",
    "end": "1195520"
  },
  {
    "text": "what else is going on in this case it's a dummy uh floating point hog program that",
    "start": "1195520",
    "end": "1202159"
  },
  {
    "text": "runs for 20 milliseconds or so and 200 milliseconds and then stops for",
    "start": "1202159",
    "end": "1208559"
  },
  {
    "text": "about 200 then runs again this pops um this is a useful technique for seeing what what the program you're worried",
    "start": "1208559",
    "end": "1215280"
  },
  {
    "text": "about is sensitive to so if we look in more detail at a little",
    "start": "1215280",
    "end": "1222080"
  },
  {
    "text": "bit of this oh first i'm going to show you a little speedometers of instructions for cycle",
    "start": "1222080",
    "end": "1229600"
  },
  {
    "text": "so part of the tracing is at every transition i record not only a time",
    "start": "1229600",
    "end": "1235520"
  },
  {
    "text": "stamp but the number of instructions that have been retired and then in the next transition i record",
    "start": "1235520",
    "end": "1240720"
  },
  {
    "text": "the time stamp and number instructions and then i subtract and divide and get instructions per cycle",
    "start": "1240720",
    "end": "1246240"
  },
  {
    "text": "and a little speedometer pointing off to to the left is showing less than an",
    "start": "1246240",
    "end": "1251679"
  },
  {
    "text": "eighth of an instruction per cycle in other words more than eight cycles per instruction",
    "start": "1251679",
    "end": "1256799"
  },
  {
    "text": "um diagonally up to the left is half the cycle this is one cycle it's two cycles or four cycles it's a",
    "start": "1256799",
    "end": "1263039"
  },
  {
    "text": "sort of a logarithmic scale so if we look at the module 11 loop when",
    "start": "1263039",
    "end": "1268960"
  },
  {
    "text": "it's running all by itself it's running at about one and a quarter instructions per cycle",
    "start": "1268960",
    "end": "1274880"
  },
  {
    "text": "when this floating point hog starts up suddenly it drops by a factor of three",
    "start": "1274880",
    "end": "1280480"
  },
  {
    "text": "and it's now running at about three eighths of an instruction per cycle and then when the hog stops picks up",
    "start": "1280480",
    "end": "1287360"
  },
  {
    "text": "again and these are these are a few microsecond time scale uh",
    "start": "1287360",
    "end": "1292960"
  },
  {
    "text": "line ranges and the module 9 loop over here when it's running at full speed with no interference it's running about three",
    "start": "1292960",
    "end": "1299520"
  },
  {
    "text": "and a half instructions per cycle and when there's interference it drops down to about two",
    "start": "1299520",
    "end": "1304640"
  },
  {
    "text": "and a half so it's about 40 percent slower so from",
    "start": "1304640",
    "end": "1310400"
  },
  {
    "text": "the trace with the instructions for cycle over all of the little bitty pieces you",
    "start": "1310400",
    "end": "1316320"
  },
  {
    "text": "can see exactly that module 2 doesn't slow down the reason is it doesn't do any floating",
    "start": "1316320",
    "end": "1321360"
  },
  {
    "text": "point instructions it's a it's a bogus benchmark and you can see that module 11 does lots",
    "start": "1321360",
    "end": "1327840"
  },
  {
    "text": "of floating point divides and slows down more than the other the other ones",
    "start": "1327840",
    "end": "1333280"
  },
  {
    "text": "so you get to see exactly the interference and of course if you have interference",
    "start": "1333280",
    "end": "1338559"
  },
  {
    "text": "you either need to fix your program so it's less sensitive with interference or you need to fix the other program so it",
    "start": "1338559",
    "end": "1344320"
  },
  {
    "text": "doesn't interfere as much or you need to run them separately but once you know what the interference",
    "start": "1344320",
    "end": "1350640"
  },
  {
    "text": "mechanism is you can decide what to do about it and usually that decision is pretty simple",
    "start": "1350640",
    "end": "1357360"
  },
  {
    "text": "so executing too slowly in summary comes from other threads other programs the operating system itself interfering with",
    "start": "1357360",
    "end": "1364559"
  },
  {
    "text": "our program or it can also come i haven't talked about it here from",
    "start": "1364559",
    "end": "1369840"
  },
  {
    "text": "running on a cpu where the clock frequency has been reduced dramatically to save power this this leads to",
    "start": "1369840",
    "end": "1376799"
  },
  {
    "text": "programs that run more slowly on nearly idle machines than running on",
    "start": "1376799",
    "end": "1382080"
  },
  {
    "text": "really busy machines because they're running five times slowly at",
    "start": "1382080",
    "end": "1387919"
  },
  {
    "text": "like 800 megahertz instead of uh 3.9",
    "start": "1387919",
    "end": "1393120"
  },
  {
    "text": "gigahertz can also run slowly due to slow exits from power statement that",
    "start": "1393120",
    "end": "1399520"
  },
  {
    "text": "chips go into power saving to reduce the clocks and reduce the the voltage levels and reduce the epoxy",
    "start": "1399520",
    "end": "1404640"
  },
  {
    "text": "reduce the voltage levels coming out of that like intel deep c6",
    "start": "1404640",
    "end": "1410240"
  },
  {
    "text": "state can take 30 microseconds and if you have a",
    "start": "1410240",
    "end": "1415520"
  },
  {
    "text": "dynamics perhaps between bouncing back and forth between threads you can keep paying that",
    "start": "1415520",
    "end": "1420960"
  },
  {
    "text": "30 microseconds many times in a row very close together and it's a real slowdown",
    "start": "1420960",
    "end": "1426480"
  },
  {
    "text": "so go away with the idea that microsecond scale instruction cycle reveals the interference between tasks",
    "start": "1426480",
    "end": "1432400"
  },
  {
    "text": "looking at instructions for cycle over two seconds tells you nothing looking at it over a millisecond or so doesn't tell",
    "start": "1432400",
    "end": "1438240"
  },
  {
    "text": "you very much but looking at it over just these microsecond scale uh",
    "start": "1438240",
    "end": "1444320"
  },
  {
    "text": "execution intervals at every interval tells you a lot",
    "start": "1444320",
    "end": "1449679"
  },
  {
    "start": "1447000",
    "end": "1753000"
  },
  {
    "text": "so waiting for something",
    "start": "1449840",
    "end": "1453120"
  },
  {
    "text": "so could you go to the previous slide please uh so here uh you i i agree that you",
    "start": "1456240",
    "end": "1462559"
  },
  {
    "text": "could find the interference between tasks but in in the example you should you",
    "start": "1462559",
    "end": "1467760"
  },
  {
    "text": "mentioned that it was the floating the floating divide unit so",
    "start": "1467760",
    "end": "1472880"
  },
  {
    "text": "uh it does does the tractor do the trackers help in identifying that as well or",
    "start": "1472880",
    "end": "1479840"
  },
  {
    "text": "i mean or do you have to manually look at the two programs and infer that hey maybe it's this unique",
    "start": "1479840",
    "end": "1486880"
  },
  {
    "text": "oh well first these are uh two cpu cores that are hyper threaded",
    "start": "1486880",
    "end": "1493200"
  },
  {
    "text": "that's why there's interference between them if this program are running on the different core in this uh machine",
    "start": "1493200",
    "end": "1501039"
  },
  {
    "text": "i just happen to know that the interference is from floating point divides but usually if you're interested",
    "start": "1503360",
    "end": "1508480"
  },
  {
    "text": "in performance uh slow downs it may not matter what the actual interference mechanism is it's",
    "start": "1508480",
    "end": "1514159"
  },
  {
    "text": "just that ah when that runs this goes slowly and so what are we going to do about it sometimes it does matter but",
    "start": "1514159",
    "end": "1519919"
  },
  {
    "text": "there's only three high-level choices the interference is is with is at memory",
    "start": "1519919",
    "end": "1528080"
  },
  {
    "text": "or it's uh shared functional units that aren't",
    "start": "1528080",
    "end": "1534559"
  },
  {
    "text": "fully pipelined hence floating point divide or",
    "start": "1534559",
    "end": "1540880"
  },
  {
    "text": "i forgot the third one at the moment anyway it says oh oh it's a branch misprediction",
    "start": "1540960",
    "end": "1547520"
  },
  {
    "text": "if something is is causing branch misprediction uh you can",
    "start": "1547520",
    "end": "1552960"
  },
  {
    "text": "slow down a lot yeah thank you does that answer your question",
    "start": "1552960",
    "end": "1558320"
  },
  {
    "text": "yeah it does yeah okay or cash swipe right kind of if the cash is like being constantly you know",
    "start": "1558320",
    "end": "1565279"
  },
  {
    "text": "swiped away that's also could happen you you have to re recache data right",
    "start": "1565279",
    "end": "1571440"
  },
  {
    "text": "again yeah for instance when you go off to the operating system on a page fault and it does a uh a copy",
    "start": "1571440",
    "end": "1579840"
  },
  {
    "text": "on write it it copies 4k from a read-only page to a newly allocated",
    "start": "1579840",
    "end": "1584880"
  },
  {
    "text": "rewrite page that 4k copy can fill up um",
    "start": "1584880",
    "end": "1590640"
  },
  {
    "text": "and display stuff and then when you come back what you see is you run more slowly right after page fault and that's a",
    "start": "1591360",
    "end": "1597600"
  },
  {
    "text": "direct form of interference from the operating system not from other programs and we see those in traces i'm not sure",
    "start": "1597600",
    "end": "1603440"
  },
  {
    "text": "if i have an example oh i do have an example of one actually i can show you that now",
    "start": "1603440",
    "end": "1609919"
  },
  {
    "text": "okay so unfortunately i don't get any feedback of what you all see so i'll start over quickly",
    "start": "1609919",
    "end": "1617360"
  },
  {
    "text": "and this is hello world running on four cpus and",
    "start": "1617360",
    "end": "1624400"
  },
  {
    "text": "i started it over ssh so the ssh demon here is getting an interrupt uh",
    "start": "1624559",
    "end": "1630799"
  },
  {
    "text": "a network interrupt this is the soft interrupt handler bottom half for rx it",
    "start": "1630799",
    "end": "1635919"
  },
  {
    "text": "wakes up this other thread k worker which wakes up bash the",
    "start": "1635919",
    "end": "1641039"
  },
  {
    "text": "operating system shell which does a clone call which makes a copy of itself",
    "start": "1641039",
    "end": "1648559"
  },
  {
    "text": "ash with a different num different process number which does an execute c which brings in hello world",
    "start": "1648559",
    "end": "1654640"
  },
  {
    "text": "and starts to execute it these are markers i put in at the very first line of hello world of the very last line and",
    "start": "1654640",
    "end": "1661440"
  },
  {
    "text": "we can see that hello world itself runs for 154 microseconds",
    "start": "1661440",
    "end": "1668240"
  },
  {
    "text": "and if you zoom way in i include at the edges",
    "start": "1668240",
    "end": "1674240"
  },
  {
    "text": "what the approximate overhead is okay you trace itself so you can tell if you have a whole lot of really really close",
    "start": "1674240",
    "end": "1680159"
  },
  {
    "text": "together things whether the overhead is too much",
    "start": "1680159",
    "end": "1685200"
  },
  {
    "text": "if we turn on the instructions per cycle on all these little pieces what you can see sometimes",
    "start": "1685200",
    "end": "1693120"
  },
  {
    "text": "this is probably a bad example but you can see if the user code is running quickly and",
    "start": "1693120",
    "end": "1699120"
  },
  {
    "text": "then your page fault page fault page fault actually you can see here the page fault code here runs slowly",
    "start": "1699120",
    "end": "1706559"
  },
  {
    "text": "a little faster a little faster a little faster a little faster this is the page fault code",
    "start": "1706559",
    "end": "1712720"
  },
  {
    "text": "bam bam bam bam bam putting its own stuff into the cache",
    "start": "1712720",
    "end": "1718399"
  },
  {
    "text": "and then when that sequence finishes if the user code had been had a lot of stuff in the cache that got displaced by",
    "start": "1718399",
    "end": "1724640"
  },
  {
    "text": "these page faults the user code would run slowly out here in this particular case the user code is running slowly",
    "start": "1724640",
    "end": "1731200"
  },
  {
    "text": "well there's our name faster and then after the page faults it's running slower",
    "start": "1731200",
    "end": "1737039"
  },
  {
    "text": "so that's the kind of interference you can see from across the operating system okay so we're off waiting for something",
    "start": "1737039",
    "end": "1743200"
  },
  {
    "text": "so when you're waiting for something it means it's not executing so profiles that sample pcs aren't going to tell you",
    "start": "1743200",
    "end": "1749360"
  },
  {
    "text": "anything um and instead uh",
    "start": "1749360",
    "end": "1754960"
  },
  {
    "start": "1753000",
    "end": "2003000"
  },
  {
    "text": "you get to see what it is you're waiting for so here's an example of waiting for the",
    "start": "1754960",
    "end": "1760159"
  },
  {
    "text": "cpu we have three threads in the sample this other sample program running over here the fourth thread gets a software",
    "start": "1760159",
    "end": "1766960"
  },
  {
    "text": "lock and these three block the fourth thread frees up the software lock",
    "start": "1766960",
    "end": "1773120"
  },
  {
    "text": "two of the three start and the third one doesn't start for a long time in fact this is uh two milliseconds",
    "start": "1773120",
    "end": "1778840"
  },
  {
    "text": "later the question is why is that guy waiting",
    "start": "1778840",
    "end": "1784000"
  },
  {
    "text": "and of course from the time stamps or profiles or whatever you can't tell",
    "start": "1784000",
    "end": "1789440"
  },
  {
    "text": "if we look at the ku traces now it's sorted by process id instead of by cpu number",
    "start": "1789440",
    "end": "1796080"
  },
  {
    "text": "here's the three processes running here's the fourth one there's a pink line here that shows that",
    "start": "1796080",
    "end": "1802000"
  },
  {
    "text": "it's holding a lock and the color of the line says pixlr and in the html shift clicking on the line",
    "start": "1802000",
    "end": "1809200"
  },
  {
    "text": "tells you by name which lock and then at the end this wakes up this freezer lock and wakes up the other",
    "start": "1809200",
    "end": "1815279"
  },
  {
    "text": "threads except one wake up takes a long time i'm going to look at what's really going on there",
    "start": "1815279",
    "end": "1822799"
  },
  {
    "text": "at this point the fourth thread first does a write it's a debugging write and that right",
    "start": "1822799",
    "end": "1829919"
  },
  {
    "text": "wakes up a process called gmain which is the gnome display process which",
    "start": "1829919",
    "end": "1835520"
  },
  {
    "text": "in turn is going to wake up the ssh process uh not shown here because i was running",
    "start": "1835520",
    "end": "1841200"
  },
  {
    "text": "this log in and so after that right the thread that was holding the lock",
    "start": "1841200",
    "end": "1848080"
  },
  {
    "text": "sees that when it frees the lock that there are other waiters and it does a futex system call here and wakes up the",
    "start": "1848080",
    "end": "1853600"
  },
  {
    "text": "other three waiters [Music] at that moment there are five threads",
    "start": "1853600",
    "end": "1859679"
  },
  {
    "text": "and only four cpus there's the three threads that are getting woken up there's the g main thread which wasn't",
    "start": "1859679",
    "end": "1866000"
  },
  {
    "text": "in the picture in my head and there's the thread doing the right that's about to finish but it's not yet finished",
    "start": "1866000",
    "end": "1873360"
  },
  {
    "text": "and then there's a scheduler screw up that when this cpu gets free a little bit off",
    "start": "1876559",
    "end": "1882080"
  },
  {
    "text": "the to the right here the linux scheduler doesn't run the waiting thread",
    "start": "1882080",
    "end": "1887519"
  },
  {
    "text": "it doesn't run it until there's a timer interrupt way out here and it looks around and says oh there's",
    "start": "1887519",
    "end": "1893360"
  },
  {
    "text": "something i can run meanwhile in here there's a couple milliseconds of uh two cpus doing nothing",
    "start": "1893360",
    "end": "1901360"
  },
  {
    "text": "while the third while this while my third thread waits so there's really a heisenberg here",
    "start": "1901360",
    "end": "1907600"
  },
  {
    "text": "if you take out the debugging right there's no fifth thread problem goes away if the debugging right goes to a",
    "start": "1907600",
    "end": "1912799"
  },
  {
    "text": "local disk instead of uh over the network via the ssh or whatever there's no fifth thread",
    "start": "1912799",
    "end": "1918640"
  },
  {
    "text": "and there's no screw up if the scheduler didn't have the screw up you could have the right and the extra thread and there",
    "start": "1918640",
    "end": "1924480"
  },
  {
    "text": "would be a very tiny performance bug that you wouldn't care about so since combination of a debug ride and ssh",
    "start": "1924480",
    "end": "1930960"
  },
  {
    "text": "access and the scheduler it gives you a bug and so the good news is that",
    "start": "1930960",
    "end": "1938240"
  },
  {
    "text": "ku trace has such low overhead that it doesn't disturb highs and bugs they're still there and you can see what",
    "start": "1938240",
    "end": "1944320"
  },
  {
    "text": "they're doing so to summarize waiting for cpus you can wait for cpus because they're all busy",
    "start": "1944320",
    "end": "1949679"
  },
  {
    "text": "you can wait because the scheduler has too strong affinity for where the task for where task last",
    "start": "1949679",
    "end": "1955840"
  },
  {
    "text": "ran it won't move it to another course and they're not the time constant here because you're",
    "start": "1955840",
    "end": "1962480"
  },
  {
    "text": "trying to go back to warm cache is only about 50 microseconds",
    "start": "1962480",
    "end": "1967519"
  },
  {
    "text": "while the linux scheduler default for giving up and moving a task to a different uh",
    "start": "1967519",
    "end": "1974640"
  },
  {
    "text": "a different core is 12 milliseconds uh there's also delays from coming down",
    "start": "1974640",
    "end": "1980480"
  },
  {
    "text": "to power saving states and the complex interactions let's see so go away the idea that wake",
    "start": "1980480",
    "end": "1985840"
  },
  {
    "text": "up events tell us what a threat was waiting for the um",
    "start": "1985840",
    "end": "1992480"
  },
  {
    "text": "in this case due to the scheduler screw up it was waiting for time to have passed it's the timer",
    "start": "1992640",
    "end": "1998960"
  },
  {
    "text": "interrupt that wakes it up so",
    "start": "1998960",
    "end": "2004399"
  },
  {
    "start": "2003000",
    "end": "2186000"
  },
  {
    "text": "reading for memory it's another little sample program this one is",
    "start": "2004399",
    "end": "2010240"
  },
  {
    "text": "a parent task that uses p threads and clones",
    "start": "2010240",
    "end": "2016480"
  },
  {
    "text": "the child task he said the child test takes a long time to start and we don't know why",
    "start": "2016480",
    "end": "2023919"
  },
  {
    "text": "if you look at what's going on this is the parent task it's actually doing a clone call here it's another one it's",
    "start": "2023919",
    "end": "2029600"
  },
  {
    "text": "cloning four children the first one turns out to be the one we're looking at",
    "start": "2029600",
    "end": "2034799"
  },
  {
    "text": "uh and then it's cloned as four children and stops running this child that we're looking at starts",
    "start": "2034799",
    "end": "2041360"
  },
  {
    "text": "running here immediately takes a page fault because the",
    "start": "2041360",
    "end": "2046480"
  },
  {
    "text": "parent in owning a child makes a copy of its page tables marking all the pages all",
    "start": "2046480",
    "end": "2053040"
  },
  {
    "text": "the shared pages read only and then depends on copy on write",
    "start": "2053040",
    "end": "2058240"
  },
  {
    "text": "to make new copies of the pages that the children actually touch [Music]",
    "start": "2058240",
    "end": "2063679"
  },
  {
    "text": "so in detail here we have at step one this clone makes a read only copy the parent page",
    "start": "2063679",
    "end": "2070240"
  },
  {
    "text": "tables at step two the first child takes his",
    "start": "2070240",
    "end": "2075679"
  },
  {
    "text": "first page fault trying to access one of those but it can't access them because the parent",
    "start": "2075679",
    "end": "2081358"
  },
  {
    "text": "hasn't actually finished initializing the shared page tables so this guy blocks waiting for memory",
    "start": "2081359",
    "end": "2087839"
  },
  {
    "text": "access eventually the parent runs again and finishes the page tables and wakes this guy up and then it's just waiting for",
    "start": "2087839",
    "end": "2094000"
  },
  {
    "text": "the scheduler waiting for cpu the reason that the parent blocked and",
    "start": "2094000",
    "end": "2099359"
  },
  {
    "text": "didn't finish the page tables back here is that after it spawned three children",
    "start": "2099359",
    "end": "2104720"
  },
  {
    "text": "there were only four cpus and there were five threads running it turned out that the scheduler had the parent thread stop",
    "start": "2104720",
    "end": "2113200"
  },
  {
    "text": "and only restarted it when when the children stopped waiting to get access to the page tables so this",
    "start": "2113200",
    "end": "2119760"
  },
  {
    "text": "guy finally finishes the page tables this guy finally runs and then it does a whole bunch of initialization rights and",
    "start": "2119760",
    "end": "2125680"
  },
  {
    "text": "takes 60 page faults in a row doing all those copy on writes and only",
    "start": "2125680",
    "end": "2131040"
  },
  {
    "text": "then out of the end does it start running the real part of the child task",
    "start": "2131040",
    "end": "2136560"
  },
  {
    "text": "maybe the few hundred microseconds here doesn't matter but now at least we understand what's going on and we can decide",
    "start": "2137440",
    "end": "2143680"
  },
  {
    "text": "whether to do something about it or not for instance by allocating a bunch of",
    "start": "2143680",
    "end": "2149520"
  },
  {
    "text": "memory for the children ahead of time that they if you go between parent and child lots of times that the children",
    "start": "2149520",
    "end": "2156560"
  },
  {
    "text": "can use pre-initialized memory so it's a summary about waiting for",
    "start": "2156560",
    "end": "2161760"
  },
  {
    "text": "memory waiting for memory can come from all the memories allocated it can come from trying to do a large",
    "start": "2161760",
    "end": "2168079"
  },
  {
    "text": "contiguous allocation in a badly fragmented memory it can come from just paging to death or it can come from",
    "start": "2168079",
    "end": "2174079"
  },
  {
    "text": "other threads that are manipulating page tables and temporarily locking them out except that the temporary is much longer",
    "start": "2174079",
    "end": "2180160"
  },
  {
    "text": "than you might have thought in your head so that's for memory",
    "start": "2180160",
    "end": "2187040"
  },
  {
    "text": "for disk it's a little a couple of sample programs the first",
    "start": "2187040",
    "end": "2192079"
  },
  {
    "text": "one reads a 40 megabyte file takes 680 milliseconds second program reads the same file takes",
    "start": "2192079",
    "end": "2199240"
  },
  {
    "text": "330 milliseconds almost twice as long the question of course is why why the",
    "start": "2199240",
    "end": "2205200"
  },
  {
    "text": "slow one if we look at a trace of these two this first program opens the file",
    "start": "2205200",
    "end": "2211440"
  },
  {
    "text": "does a single 40 megabyte read and then blocks waiting for that to",
    "start": "2211440",
    "end": "2217440"
  },
  {
    "text": "finish and then during this whole 680 milliseconds is using no cpu time and then at the end",
    "start": "2217440",
    "end": "2224720"
  },
  {
    "text": "it gets an interrupt saying oh the read's done and then it finishes doing what it's doing with that and closes the",
    "start": "2224720",
    "end": "2230560"
  },
  {
    "text": "file the second program opens the file and does 10 240 4k reads",
    "start": "2230560",
    "end": "2238560"
  },
  {
    "text": "the first read takes a while and then this program keeps getting oh this read finishes finished he gets the interrupt",
    "start": "2238560",
    "end": "2245440"
  },
  {
    "text": "it starts the next read that blocks that read finished etc and uses up a",
    "start": "2245440",
    "end": "2250480"
  },
  {
    "text": "huge amount of cpu time and twice as long if we look at detail of those reads",
    "start": "2250480",
    "end": "2256480"
  },
  {
    "text": "what we see on the different cpu cores is the uh interrupt handler for the disk",
    "start": "2256480",
    "end": "2262160"
  },
  {
    "text": "the hard interrupt handler the software interrupt handler software panel wakes up our read my read",
    "start": "2262160",
    "end": "2268240"
  },
  {
    "text": "happens in this little bit of user code it does a read for the next 4k and that blocks",
    "start": "2268240",
    "end": "2274079"
  },
  {
    "text": "that's the scheduler switching to the idle task and then when we get the interrupt from",
    "start": "2274079",
    "end": "2279680"
  },
  {
    "text": "the disk and wake this guy up again this little bit here is finishing the",
    "start": "2279680",
    "end": "2284880"
  },
  {
    "text": "reed that started back here and then the user code goes around the loop it starts another read that doesn't",
    "start": "2284880",
    "end": "2290160"
  },
  {
    "text": "finish until way up here and this repetition rate's about 150 microseconds uh the blocks coming off this particular",
    "start": "2290160",
    "end": "2296640"
  },
  {
    "text": "slow disc they're coming every 66 microseconds so we're missing um",
    "start": "2296640",
    "end": "2301839"
  },
  {
    "text": "every other revolution even in the the presence of",
    "start": "2301839",
    "end": "2307280"
  },
  {
    "text": "disc hardware and microcode that's reading ahead and buffering up things",
    "start": "2307280",
    "end": "2312720"
  },
  {
    "text": "and there's just a lot of turnaround time between the cpu saying go read and getting all the way out to the disc where it just says oh i have a block",
    "start": "2312720",
    "end": "2319520"
  },
  {
    "text": "it's in my on drive dram buffer lamp here but that still",
    "start": "2319520",
    "end": "2325200"
  },
  {
    "text": "takes many microseconds to go through that path so if we are waiting for discs",
    "start": "2325200",
    "end": "2332000"
  },
  {
    "text": "it's a fairly short summary the discs are all busy or you're doing inappropriate small transfers",
    "start": "2332000",
    "end": "2338560"
  },
  {
    "text": "or for instance you're going off to a disc that has a right buffer and it's in the middle the microcode inside the disc is",
    "start": "2338560",
    "end": "2345280"
  },
  {
    "text": "in the middle of emptying that right buffer and what it's buffered up are rights to a bunch of different places on",
    "start": "2345280",
    "end": "2351200"
  },
  {
    "text": "the disk and emptying the right buffer involves 12 seeks at about 10 milliseconds each",
    "start": "2351200",
    "end": "2356960"
  },
  {
    "text": "and suddenly you've lost 120 milliseconds before the microcode will look at your read",
    "start": "2356960",
    "end": "2364000"
  },
  {
    "text": "this happens all the time the effect that our data center people told us when i",
    "start": "2364079",
    "end": "2369920"
  },
  {
    "text": "worked at google is when you're doing rights everything gets slower",
    "start": "2369920",
    "end": "2375759"
  },
  {
    "text": "it's not true that the rights themselves are slow it's true that you get this interference or for ssds for flash",
    "start": "2376640",
    "end": "2382320"
  },
  {
    "text": "memories when you're erasing flash blocks the eraser cycle takes about 10 milliseconds",
    "start": "2382320",
    "end": "2389040"
  },
  {
    "text": "and if the micro code or the hardware and the controller for the ssd is off erasing flash bots nobody else can do",
    "start": "2389040",
    "end": "2395680"
  },
  {
    "text": "anything uh you can't read or you can't write so those are the kinds of things that",
    "start": "2395680",
    "end": "2401680"
  },
  {
    "text": "that uh it's hard to see but you can really see that you're waiting and get some clue of why you're",
    "start": "2401680",
    "end": "2407680"
  },
  {
    "text": "waiting and then there's usual complex interactions seeing the interrupt activity",
    "start": "2407680",
    "end": "2413520"
  },
  {
    "text": "is what tells you what you're waiting on and how long you were waiting on it in detail",
    "start": "2413520",
    "end": "2420880"
  },
  {
    "start": "2420000",
    "end": "2696000"
  },
  {
    "text": "so do network here we have",
    "start": "2421200",
    "end": "2426240"
  },
  {
    "text": "12 network remote procedure calls so this is sitting on the client doing the cost a",
    "start": "2426240",
    "end": "2432400"
  },
  {
    "text": "client does a call and sometime later the response comes back from the server somewhere else",
    "start": "2432400",
    "end": "2438400"
  },
  {
    "text": "client does another call the response comes back does a call response comes back about three times late it takes",
    "start": "2438400",
    "end": "2444960"
  },
  {
    "text": "about three times longer before the response comes back and these are normally all the same sort",
    "start": "2444960",
    "end": "2450960"
  },
  {
    "text": "of transactions and should all be about the same speed so we want to know why those are slow",
    "start": "2450960",
    "end": "2457280"
  },
  {
    "text": "this is a little messy slide but we'll go through it the",
    "start": "2457839",
    "end": "2462559"
  },
  {
    "text": "client program is running on cpu0 and what i want to highlight is here's a",
    "start": "2463359",
    "end": "2469200"
  },
  {
    "text": "right of the beginning of that transaction here's the right that's",
    "start": "2469200",
    "end": "2474720"
  },
  {
    "text": "sending away over the network the request for that transaction here's the right that's going over the network for",
    "start": "2474720",
    "end": "2480160"
  },
  {
    "text": "that one and there's rights for each of them and they line up in time near the beginning of each transaction there's a",
    "start": "2480160",
    "end": "2485760"
  },
  {
    "text": "little code that executes before you get to the right",
    "start": "2485760",
    "end": "2490240"
  },
  {
    "text": "if you look at these three writes in detail one fast one and two slow ones we can",
    "start": "2491520",
    "end": "2497599"
  },
  {
    "text": "see what's really going on here's the fast one here's the right on cpu zero here's the packets crossing the wire",
    "start": "2497599",
    "end": "2505200"
  },
  {
    "text": "20 microseconds later there's actually three packets here it's a 4k right it turns out",
    "start": "2505200",
    "end": "2511680"
  },
  {
    "text": "and in ku trace by time stamp right at the neck here's where the packets are",
    "start": "2511839",
    "end": "2516960"
  },
  {
    "text": "given to the network hardware and for packets coming in again at the neck inside of the tcp or udp code or",
    "start": "2516960",
    "end": "2524880"
  },
  {
    "text": "whatever a time stamp here's where the packet came in the second right the right is here but",
    "start": "2524880",
    "end": "2531599"
  },
  {
    "text": "the packets aren't hitting the wire until 600 microseconds later and the third one",
    "start": "2531599",
    "end": "2538000"
  },
  {
    "text": "they don't hit the wires with 300 microseconds later what's going on is over here on cpu one",
    "start": "2538000",
    "end": "2543280"
  },
  {
    "text": "there's a totally different program running and it just started at this point a megabyte right over the network",
    "start": "2543280",
    "end": "2549839"
  },
  {
    "text": "pack it packet pack a packet and the things that this delay in these guys is",
    "start": "2549839",
    "end": "2555599"
  },
  {
    "text": "my 4k worth of packets are getting queued up behind packets going out from",
    "start": "2555599",
    "end": "2561920"
  },
  {
    "text": "the megabyte right and when the megabyte right finishes things go back to normal",
    "start": "2561920",
    "end": "2568400"
  },
  {
    "text": "so that's the level of detail that lets you see which hardware resource might be overloaded and why you might be waiting",
    "start": "2568560",
    "end": "2578519"
  },
  {
    "text": "and it turns out network delays there's lots of sources network delays and the thing you fix is different for each",
    "start": "2579760",
    "end": "2586000"
  },
  {
    "text": "source uh it could be when you send in this case a packet",
    "start": "2586000",
    "end": "2592640"
  },
  {
    "text": "there's delays in the outbound kernel code the tcp code is off doing something else or",
    "start": "2592640",
    "end": "2598000"
  },
  {
    "text": "has some unusual path that you weren't expecting that takes a long time or",
    "start": "2598000",
    "end": "2604560"
  },
  {
    "text": "the network itself can be busy on the outbound side or there can be in the hardware and network hardware path uh",
    "start": "2604560",
    "end": "2611280"
  },
  {
    "text": "you know with lots of switching uh racks between lots of machines and something like a data center that can be slow",
    "start": "2611280",
    "end": "2617839"
  },
  {
    "text": "when you get to the other end the machine receiving the packet",
    "start": "2617839",
    "end": "2624000"
  },
  {
    "text": "it turns out most network cards hold off interrupts saying i have stuff they may dma the data into a kernel buffer but",
    "start": "2624000",
    "end": "2631359"
  },
  {
    "text": "hold off interrupts in order not to generate so many interrupts per second that it overloads the cpu just",
    "start": "2631359",
    "end": "2638880"
  },
  {
    "text": "doing interrupt handling so it might be 20 microseconds",
    "start": "2638880",
    "end": "2645839"
  },
  {
    "text": "before the interrupt is actually delivered saying these packets arrived and again on the receiving end the kernel code may",
    "start": "2645839",
    "end": "2652800"
  },
  {
    "text": "be delayed it may the tcp code may be off doing other things or whatever",
    "start": "2652800",
    "end": "2658079"
  },
  {
    "text": "it's also possible on receiving and the user code that you're sending this information to is actually",
    "start": "2658079",
    "end": "2665440"
  },
  {
    "text": "hasn't gotten to the point where it's doing its read or receive message or whatever to get the",
    "start": "2665440",
    "end": "2671359"
  },
  {
    "text": "data that is off doing something else and it simply hasn't asked for the data which boom went all the way across",
    "start": "2671359",
    "end": "2678079"
  },
  {
    "text": "and in each of these cases the thing you fix is on this machine or on that machine in the user code and the kernel",
    "start": "2678079",
    "end": "2683520"
  },
  {
    "text": "code and the hardware it's important and seeing where the packets actually go",
    "start": "2683520",
    "end": "2689440"
  },
  {
    "text": "across the wire is enough to help me distinguish which case it is and therefore what to go fix",
    "start": "2689440",
    "end": "2696960"
  },
  {
    "start": "2696000",
    "end": "3110000"
  },
  {
    "text": "so that's that's my summary on waiting for networks and we have waiting for locks this is",
    "start": "2697359",
    "end": "2703680"
  },
  {
    "text": "the fifth of the waiting things one question so do you have any and the",
    "start": "2703680",
    "end": "2708800"
  },
  {
    "text": "possibility to see like two machines like in the same time and stuff yes okay yes",
    "start": "2708800",
    "end": "2714480"
  },
  {
    "text": "right um you run ku trace on two machines the time stamps are all mapped in",
    "start": "2714480",
    "end": "2721640"
  },
  {
    "text": "post-processing to the uh get time of day the user visible",
    "start": "2721640",
    "end": "2727920"
  },
  {
    "text": "wall clock time right something common right so and so you get get time of day on machine a you've got to get time with",
    "start": "2727920",
    "end": "2733920"
  },
  {
    "text": "a machine d you have packets going between them you can you can then correlate where the",
    "start": "2733920",
    "end": "2739200"
  },
  {
    "text": "delays are now the get time of day on the two machines won't be the same [Music]",
    "start": "2739200",
    "end": "2745520"
  },
  {
    "text": "they may differ by 20 milliseconds they may differ by 120 milliseconds they will differ from hour",
    "start": "2745520",
    "end": "2752560"
  },
  {
    "text": "to hour some people build really expensive fancy hardware and they use",
    "start": "2752560",
    "end": "2759200"
  },
  {
    "text": "measured wire lengths from gps receivers and stuff to try to try to reach the point where all the machines in a room",
    "start": "2759200",
    "end": "2765599"
  },
  {
    "text": "have the same get time of day and i find that's just sort of a waste of effort and money",
    "start": "2765599",
    "end": "2771599"
  },
  {
    "text": "because if you send a packet here and it arrives at some other machine a",
    "start": "2771599",
    "end": "2777119"
  },
  {
    "text": "while later if you can identify which packet it is on both ends",
    "start": "2777119",
    "end": "2783280"
  },
  {
    "text": "you can for the things that aren't delayed and there should be a lot of things that aren't delayed",
    "start": "2783359",
    "end": "2789760"
  },
  {
    "text": "and only a few things that have that have interference in some form for the things that aren't delayed you can",
    "start": "2789760",
    "end": "2794880"
  },
  {
    "text": "actually line up in time what the good time of day offset has to",
    "start": "2794880",
    "end": "2800160"
  },
  {
    "text": "be between those machines and come within a microsecond or so and that's good enough to understand all",
    "start": "2800160",
    "end": "2805760"
  },
  {
    "text": "the correlations you can calibrate right kind of on this yeah and so when i teach uh",
    "start": "2805760",
    "end": "2812560"
  },
  {
    "text": "courses from from this uh material which i've done four times now over the last four years but one of the exercises in",
    "start": "2812560",
    "end": "2819920"
  },
  {
    "text": "the third week is the students write the program that correlates the time on the",
    "start": "2819920",
    "end": "2825119"
  },
  {
    "text": "two machines so they know that you can do it in software and that it's trivial",
    "start": "2825119",
    "end": "2831838"
  },
  {
    "text": "and i hope that those students then don't end up in companies that think they have to go buy expensive hardware",
    "start": "2832640",
    "end": "2839040"
  },
  {
    "text": "so does that answer your question yes yes it does yes okay good so i'm",
    "start": "2839040",
    "end": "2844880"
  },
  {
    "text": "going to waiting for locks i'm not coming for a very expensive hardware so [Music]",
    "start": "2844880",
    "end": "2851200"
  },
  {
    "text": "yeah uh so here's uh three threads",
    "start": "2851200",
    "end": "2856880"
  },
  {
    "text": "two of them the top one and the bottom one are waiting a long time for a lot uh this is only you know 20 microseconds or",
    "start": "2856880",
    "end": "2863920"
  },
  {
    "text": "so but they're waiting a long time milliseconds we'll get back to that a second and this middle one has the lock",
    "start": "2863920",
    "end": "2869680"
  },
  {
    "text": "uses it has a lock user has lodges it doesn't have it here the question is what's going on and why are these guys",
    "start": "2869680",
    "end": "2875040"
  },
  {
    "text": "never getting the lock so here's the ku trace of what's going on",
    "start": "2875040",
    "end": "2880079"
  },
  {
    "text": "the dotted lines up here are this thread is waiting to get the lock and it keeps waiting to keep spinning even though",
    "start": "2880079",
    "end": "2885200"
  },
  {
    "text": "it's not running it's running it's not running it's running it's not getting the line the same thing at the bottom",
    "start": "2885200",
    "end": "2891040"
  },
  {
    "text": "and this middle thread has the lock solid pink line and when it frees the lock",
    "start": "2891040",
    "end": "2897839"
  },
  {
    "text": "part of the mechanism for freeing the lock says oh there are there are threads waiting to get the lock",
    "start": "2897839",
    "end": "2903920"
  },
  {
    "text": "go to the operating system futex call and it does the wake ups of the other",
    "start": "2903920",
    "end": "2908960"
  },
  {
    "text": "threads unfortunately what's going on in this particular trace is this guy",
    "start": "2908960",
    "end": "2915760"
  },
  {
    "text": "does the wake ups before these other threads wake up",
    "start": "2915760",
    "end": "2921680"
  },
  {
    "text": "our middle guy bam goes and gets blocked again",
    "start": "2921680",
    "end": "2926800"
  },
  {
    "text": "bam goes and gets the lock again this goes on for 84 milliseconds",
    "start": "2927359",
    "end": "2933838"
  },
  {
    "text": "so this thread has captured the lock and it's starving out all the other threads",
    "start": "2934400",
    "end": "2940640"
  },
  {
    "text": "and the flaw is when you free up a lock you have to not go get it again and wait long enough for the other",
    "start": "2940640",
    "end": "2946960"
  },
  {
    "text": "threads to get a chance so how come the other threads don't uh don't start up sooner and and jump right",
    "start": "2946960",
    "end": "2953280"
  },
  {
    "text": "in because here's the wake up and it's a good couple microseconds",
    "start": "2953280",
    "end": "2959839"
  },
  {
    "text": "micro second half later before on this other cpu this thread actually starts running it's waiting for a cpu in",
    "start": "2959839",
    "end": "2966000"
  },
  {
    "text": "here and that's just the hardware delay of the cross core",
    "start": "2966000",
    "end": "2971839"
  },
  {
    "text": "either processor interrupts saying go run the scheduler here there might be work for you",
    "start": "2971839",
    "end": "2978000"
  },
  {
    "text": "and so if you wake stuff up and you don't wait some small number of microseconds uh",
    "start": "2978240",
    "end": "2984960"
  },
  {
    "text": "these guys can get starved out for a long time and then eventually by fluke",
    "start": "2984960",
    "end": "2990160"
  },
  {
    "text": "you know somewhere in here there's a like a timer interrupt that slows this guy down just long enough that these",
    "start": "2990160",
    "end": "2996000"
  },
  {
    "text": "others get a chance to get in before and then one of the other other threads will get the lock and then hold it and",
    "start": "2996000",
    "end": "3002319"
  },
  {
    "text": "starve out everybody else for a while so",
    "start": "3002319",
    "end": "3008480"
  },
  {
    "text": "for locks if you're waiting on locks a lot it's of course the other threads that are",
    "start": "3008480",
    "end": "3013599"
  },
  {
    "text": "holding the lock that need to get fixed not not your program that's running slowly",
    "start": "3013599",
    "end": "3019839"
  },
  {
    "text": "and in order to deal with that you have to know first that there are other threads",
    "start": "3019839",
    "end": "3025599"
  },
  {
    "text": "holding the lock and that's what the problem is but second you have to go figure out which threads those are",
    "start": "3025599",
    "end": "3031599"
  },
  {
    "text": "and go fix them um when i was working at google five years ago i did a search overall the",
    "start": "3031599",
    "end": "3038640"
  },
  {
    "text": "source pool you know it's a search company a whole start school searchable i searched for uh declarations of",
    "start": "3038640",
    "end": "3044400"
  },
  {
    "text": "software lock so there were 135 000 of them",
    "start": "3044400",
    "end": "3049519"
  },
  {
    "text": "and we had we spent months sometimes we didn't have at the time a good way to figure out",
    "start": "3050160",
    "end": "3055359"
  },
  {
    "text": "which lock it was because the blocks were actually dealt with through libraries and the",
    "start": "3055359",
    "end": "3061440"
  },
  {
    "text": "libraries used we used the same memory addresses for data structures",
    "start": "3061440",
    "end": "3067119"
  },
  {
    "text": "for the locking mechanism so that you could at the time you you went to get a lock and kind of get it",
    "start": "3067119",
    "end": "3073839"
  },
  {
    "text": "you get the address of what the lock data structure was but it was always the same address or the same",
    "start": "3073839",
    "end": "3079760"
  },
  {
    "text": "always one of 20 independent of what the real walk was so tracking back to the like the line number of the declaration",
    "start": "3079760",
    "end": "3086400"
  },
  {
    "text": "of the lock that was the problem uh took us forever [Music]",
    "start": "3086400",
    "end": "3091839"
  },
  {
    "text": "but so this is another example of when you're running slowly the thing to fix is not",
    "start": "3091839",
    "end": "3097440"
  },
  {
    "text": "the thing that's running slowly somewhere else so it's important to design in being able to see lock acquire and hold and",
    "start": "3097440",
    "end": "3104559"
  },
  {
    "text": "release and to be able to figure out which log",
    "start": "3104559",
    "end": "3110680"
  },
  {
    "text": "so that's the seven things that can make stuff run slowly executing too much code executing",
    "start": "3111119",
    "end": "3119040"
  },
  {
    "text": "the same code but more slowly or not executing waiting for one of the five shared resources",
    "start": "3119040",
    "end": "3126400"
  },
  {
    "text": "[Music] being able to see what every cpu core is doing every nanosecond is what makes the",
    "start": "3126570",
    "end": "3132559"
  },
  {
    "text": "invisible visible and as an industry we have very poor tools for doing that",
    "start": "3132559",
    "end": "3139920"
  },
  {
    "text": "so i'm hoping that some of the students who look at this think about in their",
    "start": "3139920",
    "end": "3145040"
  },
  {
    "text": "after they finish their theses in their work lives to go out and implement things like this so you really",
    "start": "3145040",
    "end": "3151680"
  },
  {
    "text": "fancy what's going on it will save it pays for itself really quickly",
    "start": "3151680",
    "end": "3157359"
  },
  {
    "text": "i made the occasional changes after being able to see what was happening at google that saved uh 10 years of my",
    "start": "3157359",
    "end": "3164079"
  },
  {
    "text": "salary [Music]",
    "start": "3164079",
    "end": "3168788"
  },
  {
    "start": "3166000",
    "end": "3492000"
  },
  {
    "text": "can you give some clues about how okay trace is able to do all this magic i mean it seems it seems to need no cpu",
    "start": "3173280",
    "end": "3180720"
  },
  {
    "text": "thread it seems to need no cash uh and and somehow it's able to to to",
    "start": "3180720",
    "end": "3186880"
  },
  {
    "text": "give you all this output but without changing uh you know branch",
    "start": "3186880",
    "end": "3192880"
  },
  {
    "text": "predictions and stuff yeah well the the the patches in the linux kernel um",
    "start": "3192880",
    "end": "3201359"
  },
  {
    "text": "take about 40 cpu cycles to record one entry",
    "start": "3201359",
    "end": "3207119"
  },
  {
    "text": "um because the entry is just 20 bits of timestamp uh reading the uh the rdtsc clock in uh intel chips or the",
    "start": "3207119",
    "end": "3215599"
  },
  {
    "text": "uh system time clock and clocking arm chips i've got this running on a raspberry pi 4",
    "start": "3215599",
    "end": "3222000"
  },
  {
    "text": "also and there's 12 bits of which event and that's all that's written",
    "start": "3222000",
    "end": "3228480"
  },
  {
    "text": "and those four byte aligned values are written into",
    "start": "3228480",
    "end": "3234960"
  },
  {
    "text": "per cpu core memory blocks so there's no thrashing of the cache between recording",
    "start": "3234960",
    "end": "3241920"
  },
  {
    "text": "on different cpus and then periodically a block gets filled up and",
    "start": "3241920",
    "end": "3246960"
  },
  {
    "text": "there's a little time spent allocating the next block that involves an actual lock between the",
    "start": "3246960",
    "end": "3252640"
  },
  {
    "text": "ku trace on different cores and then everything else is done in post-processing turning the raw traces",
    "start": "3252640",
    "end": "3259920"
  },
  {
    "text": "into events with with time of day time stamps",
    "start": "3259920",
    "end": "3265520"
  },
  {
    "text": "turning those into time spans instead of edges turning the time spans into a json",
    "start": "3265520",
    "end": "3271680"
  },
  {
    "text": "text file and turning that into html oh yeah right so so the so",
    "start": "3271680",
    "end": "3276880"
  },
  {
    "text": "but in detail uh you should go read chapters 15 and 16 that explain how this is done",
    "start": "3276880",
    "end": "3283838"
  },
  {
    "text": "basic how much uh code is there i i mean it doesn't seem",
    "start": "3287280",
    "end": "3292640"
  },
  {
    "text": "to have any branches it just it just knows which 32 businesses",
    "start": "3292640",
    "end": "3297920"
  },
  {
    "text": "yeah well there's one branch in the code that says is tracing turned on and and you know almost all the time",
    "start": "3297920",
    "end": "3305200"
  },
  {
    "text": "tracing is not turned on and so that branches is perfectly well predicted",
    "start": "3305200",
    "end": "3310960"
  },
  {
    "text": "and then when tracing is turned on um after the first time on each floor then it's perfectly well predicted that oh",
    "start": "3310960",
    "end": "3316799"
  },
  {
    "text": "schracing's on there's a few other tests uh incrementing the pointer in each cpu",
    "start": "3316799",
    "end": "3324160"
  },
  {
    "text": "block of where the next thing goes i test whether it's reached its limit yet for that lock",
    "start": "3324160",
    "end": "3329680"
  },
  {
    "text": "so there's a test there but there's uh 8 000 entries per block",
    "start": "3329680",
    "end": "3336079"
  },
  {
    "text": "so that test is also well predicted no it's we're not at the end we're not at the end not again and then one time out",
    "start": "3336079",
    "end": "3341760"
  },
  {
    "text": "of eight thousand yards and there's uh one other test in the",
    "start": "3341760",
    "end": "3347680"
  },
  {
    "text": "allocating new blocks to say have we filled up the trace buffer and the user did not ask it to wrap around you know",
    "start": "3347680",
    "end": "3354079"
  },
  {
    "text": "flight recorder mode that has to stop when it fills we test that we're at the end and say okay stop that's it",
    "start": "3354079",
    "end": "3361599"
  },
  {
    "text": "[Music] preallocated kernel memory i'm just",
    "start": "3369770",
    "end": "3375280"
  },
  {
    "text": "writing it into regular memory uh writing into my okay thanks mom uh the only thing that's fast enough to",
    "start": "3375280",
    "end": "3380480"
  },
  {
    "text": "record this stuff i'm literally getting uh on average",
    "start": "3380480",
    "end": "3385599"
  },
  {
    "text": "uh a new event a new transition between using kernel mode every five microseconds yeah this was my question",
    "start": "3385599",
    "end": "3392400"
  },
  {
    "text": "what's the bandwidth of the of the data sort of in say bits per second or megabits that's my question kind of what",
    "start": "3392400",
    "end": "3399119"
  },
  {
    "text": "is the total bandwidth out of the core or say per system what is it",
    "start": "3399119",
    "end": "3404480"
  },
  {
    "text": "sure it's 200 000 events per second was the maximum we saw at google in production",
    "start": "3404480",
    "end": "3410799"
  },
  {
    "text": "live data centers during the busiest hour of the day to so about one minute",
    "start": "3410799",
    "end": "3417359"
  },
  {
    "text": "so if i could finish so at 200 000 events per second at four bytes each",
    "start": "3417359",
    "end": "3423440"
  },
  {
    "text": "that's 800k per cpu core per second if you have 20",
    "start": "3423440",
    "end": "3428799"
  },
  {
    "text": "cores that's uh 16 megabytes per second",
    "start": "3428799",
    "end": "3434640"
  },
  {
    "text": "okay if you uh have 20 cores and you're in a large data center kind of",
    "start": "3434640",
    "end": "3439680"
  },
  {
    "text": "environment you have a few hundred gigabytes of ram and so one percent of that ram you've",
    "start": "3439680",
    "end": "3445920"
  },
  {
    "text": "got enough room to record for a minute or two at full rate across all the cores",
    "start": "3445920",
    "end": "3453920"
  },
  {
    "text": "if you have a raspberry pi controlling a thermostat or something",
    "start": "3453920",
    "end": "3459119"
  },
  {
    "text": "still with one percent of the cpu and one percent of the ram you can record uh meaningful traces",
    "start": "3459119",
    "end": "3467680"
  },
  {
    "text": "okay yeah the key is that each event is only four bytes right competing things like f",
    "start": "3469200",
    "end": "3475440"
  },
  {
    "text": "trace each event is 48 bytes and and the bandwidth is too high and the amount of ram it takes is too high",
    "start": "3475440",
    "end": "3482160"
  },
  {
    "text": "and the amount of time you can afford to record contiguously is too low",
    "start": "3482160",
    "end": "3489798"
  },
  {
    "start": "3492000",
    "end": "3599000"
  },
  {
    "text": "so let me do a few references there's the book there's the mansion code at the",
    "start": "3493839",
    "end": "3499200"
  },
  {
    "text": "addison wesley website which due to uh mediocre branding is called informati",
    "start": "3499200",
    "end": "3506720"
  },
  {
    "text": "but the code is now also on github under dicksite's ku trace if there any students are looking at",
    "start": "3506720",
    "end": "3512160"
  },
  {
    "text": "this who have access to the spec benchmarks i would love to get together and trace the spec benchmarks",
    "start": "3512160",
    "end": "3518880"
  },
  {
    "text": "the uh spec 2017 or whatever is current and see which ones are measuring what",
    "start": "3518880",
    "end": "3524240"
  },
  {
    "text": "they claim to be measuring and which ones aren't",
    "start": "3524240",
    "end": "3528480"
  },
  {
    "text": "and that's it so any other questions",
    "start": "3529680",
    "end": "3535119"
  },
  {
    "text": "12 bits seems like magic",
    "start": "3535119",
    "end": "3538798"
  },
  {
    "text": "no no no you don't understand this is just an engineering talk",
    "start": "3540480",
    "end": "3546799"
  },
  {
    "text": "this is very carefully engineered i counted cycles for every bit of the code that records one entry",
    "start": "3546799",
    "end": "3553200"
  },
  {
    "text": "and i you know i did the back of the envelope bad with bandwidth calculation up front",
    "start": "3553200",
    "end": "3559280"
  },
  {
    "text": "and the overhead in my budget at an event every five microseconds my",
    "start": "3559280",
    "end": "3566000"
  },
  {
    "text": "budget for being no more than one percent overhead is 50 nanoseconds to record an entry",
    "start": "3566000",
    "end": "3572799"
  },
  {
    "text": "that's shorter than a cache missed timeout the main memory so that says by",
    "start": "3572799",
    "end": "3579200"
  },
  {
    "text": "you know just by first principles an entry has to take less than the cash line in fact has to take a lot less than",
    "start": "3579200",
    "end": "3585440"
  },
  {
    "text": "the catch line so the only reasonable choices were 4 bytes per entry or 8 bytes per entry",
    "start": "3585440",
    "end": "3591119"
  },
  {
    "text": "nothing else would be fast enough so i chose 4. i actually ended up",
    "start": "3591119",
    "end": "3596160"
  },
  {
    "text": "packing pairs of call return into an eight byte entry",
    "start": "3596160",
    "end": "3601440"
  },
  {
    "text": "because uh one of my cohorts at google long ago lost bureau who wrote a bunch of the initial",
    "start": "3601440",
    "end": "3608480"
  },
  {
    "text": "linux tcp stack he said you know it would be really helpful when there's a system call to",
    "start": "3608480",
    "end": "3614559"
  },
  {
    "text": "get a little bit of information about what the arguments or return value are so by packing",
    "start": "3614559",
    "end": "3621680"
  },
  {
    "text": "a contiguous call returned pair into one eight byte entry uh",
    "start": "3621680",
    "end": "3628079"
  },
  {
    "text": "that freed up enough room not to have two complete time stamps but one complete time stamp and then just a",
    "start": "3628079",
    "end": "3633359"
  },
  {
    "text": "delta time in a byte and that freed up two bytes where i could record the low bits of the first argument to a",
    "start": "3633359",
    "end": "3640319"
  },
  {
    "text": "system call which were often useful like which i o devices being read or written",
    "start": "3640319",
    "end": "3647040"
  },
  {
    "text": "and another byte was left for the return value from the system call in particular it was just big enough to hold all of",
    "start": "3647040",
    "end": "3652960"
  },
  {
    "text": "the error standard linux error codes including the one that says there was no error",
    "start": "3652960",
    "end": "3659920"
  },
  {
    "text": "and if things don't fit because the delta time is too big or the term value is too big then we take a separate eight",
    "start": "3659920",
    "end": "3666400"
  },
  {
    "text": "byte entry for the call wasting half of it and an 8-bit entry for the return wasting half of it but that only happens",
    "start": "3666400",
    "end": "3672240"
  },
  {
    "text": "about six percent of the time the other 94 they pair up and in fact when i started pairing them up it got",
    "start": "3672240",
    "end": "3678240"
  },
  {
    "text": "faster because i didn't have to allocate another another entry i just overwrote",
    "start": "3678240",
    "end": "3684160"
  },
  {
    "text": "the unused bytes in one entry i was surprised that they got a little bit faster",
    "start": "3684160",
    "end": "3689599"
  },
  {
    "text": "so if the if you're using the system on a",
    "start": "3690640",
    "end": "3696640"
  },
  {
    "text": "quote modern machine which has uh speculative execution at multiple levels",
    "start": "3696640",
    "end": "3702559"
  },
  {
    "text": "and multiple uh speculative threads um",
    "start": "3702559",
    "end": "3708720"
  },
  {
    "text": "does it make things much much more complicated no um you know so thread does a system call",
    "start": "3708720",
    "end": "3716559"
  },
  {
    "text": "you're going to spend a lot of time in the the operating system software and hardware",
    "start": "3716559",
    "end": "3722640"
  },
  {
    "text": "doing that that switch from user mode to kernel mode and saving registers and getting ready",
    "start": "3722640",
    "end": "3728480"
  },
  {
    "text": "to the point where sometimes somewhere inside the operating system you can finally do a call to a c routine instead",
    "start": "3728480",
    "end": "3734079"
  },
  {
    "text": "of to assembly language i just patch in at that point do my 40 cycles worth of stuff and get out okay",
    "start": "3734079",
    "end": "3741839"
  },
  {
    "text": "the operating system costs are very costly so so stuffing for a cyclist is not that much critical but",
    "start": "3741839",
    "end": "3748559"
  },
  {
    "text": "in particular um because i i go off and",
    "start": "3748559",
    "end": "3753599"
  },
  {
    "text": "separately measure what my overhead really is and i put in the little diagonal white lines you can see where",
    "start": "3753599",
    "end": "3759520"
  },
  {
    "text": "my when you zoom way in on any of these you can see where my overhead is starting to",
    "start": "3759520",
    "end": "3764960"
  },
  {
    "text": "be the same order of magnitude as the the real code",
    "start": "3764960",
    "end": "3770240"
  },
  {
    "text": "span flame span and if it's not the same order of magnitude then uh you don't i don't care",
    "start": "3770240",
    "end": "3778400"
  },
  {
    "text": "do you have yo it took careful engineering",
    "start": "3779599",
    "end": "3783839"
  },
  {
    "text": "do you have have simulation tools that you can that you that you can run all this stuff but on a simulator",
    "start": "3785119",
    "end": "3791760"
  },
  {
    "text": "instead of unreal hardware uh no",
    "start": "3791760",
    "end": "3797359"
  },
  {
    "text": "simulators are way too predictable right so you need",
    "start": "3797359",
    "end": "3803039"
  },
  {
    "text": "cows from the hardware i i assume that people have like x86 or",
    "start": "3803039",
    "end": "3808640"
  },
  {
    "text": "arm simulators that include simulating all of the",
    "start": "3808640",
    "end": "3813839"
  },
  {
    "text": "kernel code instructions and that [Music]",
    "start": "3813839",
    "end": "3819760"
  },
  {
    "text": "if you if you had an arm linux kernel and you ran it on a simulator that included my patches it",
    "start": "3819760",
    "end": "3825280"
  },
  {
    "text": "would run yeah yeah but from simulator",
    "start": "3825280",
    "end": "3832000"
  },
  {
    "text": "from simulator you will never have that sort of real life disturbance as which",
    "start": "3832000",
    "end": "3837039"
  },
  {
    "text": "you need and you want to see the simulators are usually not simulating bus contentions or whatever it is right",
    "start": "3837039",
    "end": "3843520"
  },
  {
    "text": "i mean they they run the code and there are some of them but they are very slow so",
    "start": "3843520",
    "end": "3849520"
  },
  {
    "text": "i mean what i'm looking at is is you know interference between multiple",
    "start": "3849520",
    "end": "3854960"
  },
  {
    "text": "cpu cores interacting touching the same data and stuff and i don't know of simulators that do that",
    "start": "3854960",
    "end": "3861520"
  },
  {
    "text": "really well as you say yeah no i i i know a simulator is slower",
    "start": "3861520",
    "end": "3868000"
  },
  {
    "text": "but but i'm doing research i i have time to look at stuff uh",
    "start": "3868000",
    "end": "3873920"
  },
  {
    "text": "if something is really confusing uh and but i i i get you know i i've got my my",
    "start": "3873920",
    "end": "3879520"
  },
  {
    "text": "hypothetical mix computer which uh which doesn't exist in real hardware but i can simulate it not i'm sitting here trying",
    "start": "3879520",
    "end": "3886400"
  },
  {
    "text": "to imagine uh uh watching ku trace on on my simulator",
    "start": "3886400",
    "end": "3891599"
  },
  {
    "text": "uh yeah so does the mix have an operating system have uh kernel code and user code",
    "start": "3891599",
    "end": "3899920"
  },
  {
    "text": "uh there's something called endnix that i never wrote uh but but somebody in japan has done",
    "start": "3899920",
    "end": "3906000"
  },
  {
    "text": "that but but but they're basically kernel mode i mean there's",
    "start": "3906000",
    "end": "3911839"
  },
  {
    "text": "uh the the machine",
    "start": "3911839",
    "end": "3915359"
  },
  {
    "text": "has one bit where you're in the kernel or or not then you're actually you have",
    "start": "3918240",
    "end": "3923359"
  },
  {
    "text": "access you know you know to lots more memory and so on",
    "start": "3923359",
    "end": "3929039"
  },
  {
    "text": "yeah so i think i would enjoy someone porting the patches to do that i think it would be",
    "start": "3929280",
    "end": "3936319"
  },
  {
    "text": "straightforward yeah i've been looking at porting uh patches",
    "start": "3936319",
    "end": "3943760"
  },
  {
    "text": "to a risk 5 machine but unfortunately i've found that there's no there's no decent time base yeah",
    "start": "3943760",
    "end": "3952559"
  },
  {
    "text": "really the board the board they gave me has a microsecond counter",
    "start": "3952960",
    "end": "3959119"
  },
  {
    "text": "time counter which isn't good when you're in a microsecond dude 1200 instructions",
    "start": "3959119",
    "end": "3965359"
  },
  {
    "text": "how hard it takes how hard it takes 400 400 cycles to read it",
    "start": "3965359",
    "end": "3971440"
  },
  {
    "text": "are you able to port it to an alpha um i i could there's no uh",
    "start": "3971440",
    "end": "3979119"
  },
  {
    "text": "no commercial value in doing that i'm really interested in helping people",
    "start": "3979119",
    "end": "3984480"
  },
  {
    "text": "fix real performance problems in real code that they're running today in time constrained environments",
    "start": "3984480",
    "end": "3992200"
  },
  {
    "text": "because of course risk wave has the this cycle counter which is very",
    "start": "3993200",
    "end": "3998559"
  },
  {
    "text": "assuming the cpu runs the same clock so that's it's it's useless useless",
    "start": "3998559",
    "end": "4005039"
  },
  {
    "text": "i have one of these i've been using the cycle counter stops when the",
    "start": "4005039",
    "end": "4010079"
  },
  {
    "text": "when a particular cpu is idle and so even if you started out with all",
    "start": "4010079",
    "end": "4015359"
  },
  {
    "text": "the cycle counters synchronized across all the forts you use which you can't start out with but if you could they",
    "start": "4015359",
    "end": "4020799"
  },
  {
    "text": "would immediately get desynchronized and if you have different time stamps on different cpu cores there's no way to",
    "start": "4020799",
    "end": "4028000"
  },
  {
    "text": "to line up you know this guy woke up that guy because there's no there's no common time base i see i didn't i wasn't aware",
    "start": "4028000",
    "end": "4035119"
  },
  {
    "text": "i knew the counter exists but but i never look at the such a granularity that i mean usually these countries run",
    "start": "4035119",
    "end": "4042079"
  },
  {
    "text": "have option to run either always or stop sometimes but it doesn't that's my experience has been that",
    "start": "4042079",
    "end": "4050319"
  },
  {
    "text": "there's lots of chip designers who put in speculatively put in oh this would be a wonderful feature to have and people",
    "start": "4050319",
    "end": "4056000"
  },
  {
    "text": "could use it to see what's going on but nobody actually uses it and when i go to use it what i find out is they're",
    "start": "4056000",
    "end": "4061599"
  },
  {
    "text": "useless they've spent a bunch of hardware on something that that's that's no good",
    "start": "4061599",
    "end": "4067838"
  },
  {
    "text": "it's a problem sad to say i",
    "start": "4068400",
    "end": "4073839"
  },
  {
    "text": "have a sig arc blog a couple of articles in the january cigar blog",
    "start": "4073839",
    "end": "4080480"
  },
  {
    "text": "about the performance the four performance counters i'd like to see all",
    "start": "4080480",
    "end": "4085680"
  },
  {
    "text": "to be read in one cycle on each cpu that's all you need that's all i need here in fact",
    "start": "4085680",
    "end": "4092160"
  },
  {
    "text": "one of the problems with kutrace for x86 is is to do the uh",
    "start": "4092160",
    "end": "4098159"
  },
  {
    "text": "instructions for cycle i have to read the number of instructions retired in order to read that i have to at the",
    "start": "4098159",
    "end": "4104480"
  },
  {
    "text": "beginning of traceco set up a bunch of global state to tell the hardware",
    "start": "4104480",
    "end": "4109679"
  },
  {
    "text": "which thing to count in counter number whatever where we've got uh a dozen",
    "start": "4109679",
    "end": "4114960"
  },
  {
    "text": "generic counters okay and having to do that setup on each core",
    "start": "4114960",
    "end": "4121679"
  },
  {
    "text": "because you have to change global state in order to find out how many instructions are retired it means that",
    "start": "4121920",
    "end": "4127199"
  },
  {
    "text": "nobody else using the machine can use those counters because i just took one away",
    "start": "4127199",
    "end": "4135040"
  },
  {
    "text": "and it means in particular the operating system can't use any of those counters and so what i'd like to see is an",
    "start": "4135040",
    "end": "4140798"
  },
  {
    "text": "instruction that says read the cycle counter with the guarantee that the cycle counters are",
    "start": "4140799",
    "end": "4146159"
  },
  {
    "text": "all the same across all the cores in other words the thing you're reading is a is a mirror of something that was set",
    "start": "4146159",
    "end": "4151838"
  },
  {
    "text": "at boot time and the read only takes one cycle right this whole idea of reading the",
    "start": "4151839",
    "end": "4158000"
  },
  {
    "text": "time and waiting 400 cycles to get it means that you can't read it more than about once every",
    "start": "4158000",
    "end": "4164480"
  },
  {
    "text": "40 microseconds without a huge overhead and you don't know when 40 microseconds",
    "start": "4164480",
    "end": "4170238"
  },
  {
    "text": "have elapsed if you can't read the time",
    "start": "4170239",
    "end": "4174599"
  },
  {
    "text": "that's a catch-22 i believe yeah yeah so i gave up on that and um",
    "start": "4175839",
    "end": "4181679"
  },
  {
    "text": "sticking with x86 and arm so dick i don't know",
    "start": "4181679",
    "end": "4187679"
  },
  {
    "text": "can you see i'm holding up a book yeah okay so i i gave a keynote talk at ifip",
    "start": "4187679",
    "end": "4195440"
  },
  {
    "text": "congress in 1989 uh that was you know like 30 some years ago and uh",
    "start": "4195440",
    "end": "4202880"
  },
  {
    "text": "and that and i decided that i would since hilbert had had given a famous address once at a at",
    "start": "4202880",
    "end": "4210080"
  },
  {
    "text": "an international congress a mathematician saying what problems should people work on i i gave a",
    "start": "4210080",
    "end": "4215520"
  },
  {
    "text": "challenge problem and my challenge problem was uh to inve to investigate one second of computer time",
    "start": "4215520",
    "end": "4222159"
  },
  {
    "text": "yes and here's what i said uh make a thorough analysis of everything your computer does during one second the",
    "start": "4222159",
    "end": "4228080"
  },
  {
    "text": "computer will execute several hundred thousand instructions i'd like you to study them all",
    "start": "4228080",
    "end": "4233120"
  },
  {
    "text": "uh the time when you conduct this experiment should be chosen randomly you might program the computer itself to use",
    "start": "4233120",
    "end": "4239120"
  },
  {
    "text": "the number generator to decide what second should be captured uh and so on uh",
    "start": "4239120",
    "end": "4244320"
  },
  {
    "text": "uh but then you you know there were issues about uh uh you don't have access to the source code",
    "start": "4244320",
    "end": "4251120"
  },
  {
    "text": "and so on but anyway i i i just wanted to say that i i consider that nate that probably you have solved this challenge",
    "start": "4251120",
    "end": "4257600"
  },
  {
    "text": "problem at last yes i have thank you",
    "start": "4257600",
    "end": "4263119"
  },
  {
    "text": "is there a two dollar check 356 cents yes",
    "start": "4263360",
    "end": "4270239"
  },
  {
    "text": "and now computer surrounds millions times faster than you wrote it",
    "start": "4271760",
    "end": "4276960"
  },
  {
    "text": "maybe we should uh stop on that note i was going to say it's i think we've reached the point where inflation is",
    "start": "4277679",
    "end": "4283840"
  },
  {
    "text": "going to cause problems um any case thanks dick very much it was a great talk uh i think uh",
    "start": "4283840",
    "end": "4292719"
  },
  {
    "text": "i i think i think it's an important piece of work and one which we're uh",
    "start": "4292719",
    "end": "4298800"
  },
  {
    "text": "we're going to be appreciating more and more as the uh decade proceeds",
    "start": "4298800",
    "end": "4304239"
  },
  {
    "text": "so thank you very much for the work you've done and uh for uh participating",
    "start": "4304239",
    "end": "4309440"
  },
  {
    "text": "and thank everybody for listening all right and thank you for the invitation you all take care",
    "start": "4309440",
    "end": "4317719"
  }
]