[
  {
    "start": "0",
    "end": "24000"
  },
  {
    "text": "great thank you Michelle and uh let's get started welcome everyone to this webinar um I I guess I'm going to tell",
    "start": "11040",
    "end": "16560"
  },
  {
    "text": "you about a few things that we've been working on recently and uh I hope you enjoy it so let's see so let's get",
    "start": "16560",
    "end": "22080"
  },
  {
    "text": "started um as I said what I wanted to tell you about today is some some areas",
    "start": "22080",
    "end": "28760"
  },
  {
    "start": "24000",
    "end": "83000"
  },
  {
    "text": "that we've been working in our security lab lately in particular I wanted to tell you a little bit about new developments in password hashing and",
    "start": "28760",
    "end": "35920"
  },
  {
    "text": "then I'll talk a little bit about um sort of a new approach we developed for uh securing program control flow This",
    "start": "35920",
    "end": "41840"
  },
  {
    "text": "falls into the area of what's called control flow integrity and I'll tell you about a new technique for control flow",
    "start": "41840",
    "end": "47399"
  },
  {
    "text": "Integrity hopefully we'll still have some more time and then I'll be able to tell you about uh other recent work that",
    "start": "47399",
    "end": "53000"
  },
  {
    "text": "we've been doing and specifically on iot security in particular how do we know that iot devices are not revealing too",
    "start": "53000",
    "end": "60039"
  },
  {
    "text": "much information about their owner so again kind of an exciting uh area having to being an intersection of privacy and",
    "start": "60039",
    "end": "67080"
  },
  {
    "text": "security so I hope we I hope we'll get through all three topics but if not I guess we will schedule future webinars",
    "start": "67080",
    "end": "73560"
  },
  {
    "text": "and we will cover whatever we didn't cover today in in a future webinar okay so with that let's get started with",
    "start": "73560",
    "end": "79479"
  },
  {
    "text": "password hashing and let me remind you a little bit about how password hashing works and kind of the areas that we're",
    "start": "79479",
    "end": "85159"
  },
  {
    "start": "83000",
    "end": "224000"
  },
  {
    "text": "uh interested in uh we've been working on recently so of course everybody knows you know there are constant attacks on",
    "start": "85159",
    "end": "91439"
  },
  {
    "text": "serers side password databases that result in large scale password breaches",
    "start": "91439",
    "end": "96560"
  },
  {
    "text": "so I just collected a random sample you know this is a very small uh sample of the actual breaches that have happened",
    "start": "96560",
    "end": "103079"
  },
  {
    "text": "in the last couple of years um so just to remind you you probably you remember a few years ago LinkedIn lost um a",
    "start": "103079",
    "end": "110520"
  },
  {
    "text": "collection of of uh hashed passwords that they stored Unfortunately they simply stored hashes sha one hashes of",
    "start": "110520",
    "end": "117960"
  },
  {
    "text": "their password these were unsalted and we'll talk about the consequence of that in just a minute um so that that was one",
    "start": "117960",
    "end": "123840"
  },
  {
    "text": "event that Lo that resulted in a loss of 6 million passwords all these people had to uh go in and uh reset their password",
    "start": "123840",
    "end": "130280"
  },
  {
    "text": "of course when a password breach occurs um whoever does the breach is able in many cases to obtain many of the",
    "start": "130280",
    "end": "137239"
  },
  {
    "text": "original unhashed password and those can then be used to attack those users on other sites as well because",
    "start": "137239",
    "end": "143519"
  },
  {
    "text": "unfortunately still many users use the same password at many different sites and again we'll talk about mitigations",
    "start": "143519",
    "end": "149239"
  },
  {
    "text": "for that in just a minute uh then later on uh a year later there was there were a couple other breaches again this is",
    "start": "149239",
    "end": "155680"
  },
  {
    "text": "just a selected list uh so there was a 250,000 passwords were uh stolen from Twitter Evernote had an issue where hash",
    "start": "155680",
    "end": "162840"
  },
  {
    "text": "passwords were were revealed and Adobe had an entertaining uh breach where um in fact encrypted passwords not hash",
    "start": "162840",
    "end": "169640"
  },
  {
    "text": "passwords were revealed um in addition to the password hints so as a result uh the password hints actually helped",
    "start": "169640",
    "end": "175800"
  },
  {
    "text": "attackers recover the original password and then furthermore um just a more recent example in 20 2015 a famous um a",
    "start": "175800",
    "end": "185040"
  },
  {
    "text": "fairly common password manager was actually had an issue where in fact hashed Master passwords and assaults uh",
    "start": "185040",
    "end": "192360"
  },
  {
    "text": "were compromised and again that um canon in some cases that can enable the what's called an offline dictionary attack",
    "start": "192360",
    "end": "199080"
  },
  {
    "text": "where an attacker can try lots of words in the dictionary until he finds one that hashes to the user's password and",
    "start": "199080",
    "end": "205519"
  },
  {
    "text": "that essentially reveals the user's password so the question is uh what to do about about that and so um this was",
    "start": "205519",
    "end": "212120"
  },
  {
    "text": "just a quick uh survey of what's happening the question is can we how do we store passwords in a way that make",
    "start": "212120",
    "end": "217239"
  },
  {
    "text": "these offline dictionary attacks harder than uh simply just trying all words in a dictionary so let's talk about you",
    "start": "217239",
    "end": "224239"
  },
  {
    "start": "224000",
    "end": "288000"
  },
  {
    "text": "know uh how to store password 101 and so of course I hope everybody knows that",
    "start": "224239",
    "end": "230239"
  },
  {
    "text": "you ever never ever ever ever store passwords in the clear on the server what you actually do on the server is",
    "start": "230239",
    "end": "236920"
  },
  {
    "text": "you store a hash of the password here you can see the of the password along with a salt the salt is denoted by sa",
    "start": "236920",
    "end": "243519"
  },
  {
    "text": "and the salt is also stored uh in the database and then when a when a user um submits a password uh for login what the",
    "start": "243519",
    "end": "250840"
  },
  {
    "text": "server actually does is it simply hashes the password along with assault and checks whether that's equal to the",
    "start": "250840",
    "end": "256560"
  },
  {
    "text": "stored hash in the database and if it is equal then the login is allowed to go through so again this is why we use",
    "start": "256560",
    "end": "263320"
  },
  {
    "text": "assault and so on this is uh fairly common reasoning in computer security we discussed this actually at quite a bit",
    "start": "263320",
    "end": "269039"
  },
  {
    "text": "of length in the computer security class uh that we teach uh which again you are very uh welcome to to to sign up for and",
    "start": "269039",
    "end": "276000"
  },
  {
    "text": "attend uh so I'm not going to talk about the reason for the salt here what I want to talk about today is is this question",
    "start": "276000",
    "end": "281880"
  },
  {
    "text": "of what what hash function should be using um for hashing passwords so how do",
    "start": "281880",
    "end": "287080"
  },
  {
    "text": "we actually hash passwords when we store them in the password database so what",
    "start": "287080",
    "end": "292120"
  },
  {
    "start": "288000",
    "end": "703000"
  },
  {
    "text": "happened with LinkedIn is Unfortunately they used a sha one hash of their password and in fact a sha one hash was",
    "start": "292120",
    "end": "299199"
  },
  {
    "text": "even on soled so literally all they did is the computer to sha one hash of everybody's password and that's the",
    "start": "299199",
    "end": "305240"
  },
  {
    "text": "value that was stored in the in the password database when that password database was compromised within 6 days",
    "start": "305240",
    "end": "311800"
  },
  {
    "text": "almost all the CL PL text passwords were exposed so 90% of the passwords were actually revealed and the reason that",
    "start": "311800",
    "end": "318400"
  },
  {
    "text": "was possible is because sha one is an extremely hash fast hash function to evaluate so uh What uh folks were able",
    "start": "318400",
    "end": "325600"
  },
  {
    "text": "to do is run through a large dictionary um you know very very large set of dictionary of of possible passwords in a",
    "start": "325600",
    "end": "332440"
  },
  {
    "text": "dictionary and simply try to Hash each one of them until they got ones that hit values in the password database and that",
    "start": "332440",
    "end": "339240"
  },
  {
    "text": "enable them to recover the original passwords so in some sense this is kind of counterintuitive into what's happening",
    "start": "339240",
    "end": "345160"
  },
  {
    "text": "in computer science typically we want things to run fast as fast as possible when we hash passwords actually speed is",
    "start": "345160",
    "end": "352440"
  },
  {
    "text": "detrimental to security because the faster the hash function is the faster an attacker can try uh all words in the",
    "start": "352440",
    "end": "359280"
  },
  {
    "text": "dictionary until he he recovers the user's password so what we really want for password hashing is much much much",
    "start": "359280",
    "end": "366599"
  },
  {
    "text": "slower passwords and by the way I should say that LinkedIn has since updated their uh password scheme and now this is",
    "start": "366599",
    "end": "372919"
  },
  {
    "text": "this type of attack is not going to happen again on LinkedIn so that's um at least we hope and so that's actually",
    "start": "372919",
    "end": "378400"
  },
  {
    "text": "good news and so the question I want to ask basically is what is the right way to Hash passwords and so basically there",
    "start": "378400",
    "end": "384960"
  },
  {
    "text": "are kind of two ideas that come to that come to play uh the first one is is when",
    "start": "384960",
    "end": "390160"
  },
  {
    "text": "we Hash a password on the server side one thing we might want to do is instead of just using um a simple hash function",
    "start": "390160",
    "end": "397639"
  },
  {
    "text": "where we directly just give it as input the user's password we actually use what's called a key hash function so a",
    "start": "397639",
    "end": "403479"
  },
  {
    "text": "function that in addition to the password also takes a secret key the secret key itself is going to be stored",
    "start": "403479",
    "end": "409960"
  },
  {
    "text": "in some Hardware security module what's called an HSM so the secret key itself is going to be stored in some secure",
    "start": "409960",
    "end": "416280"
  },
  {
    "text": "environment that attackers will not be able to extract and as a result um if",
    "start": "416280",
    "end": "421879"
  },
  {
    "text": "they're able to steal the password file the the password database if they want to try a lot of words in the in the",
    "start": "421879",
    "end": "427160"
  },
  {
    "text": "dictionary now for every word in the dictionary they have to interrogate the HSM in order to recover to check whether",
    "start": "427160",
    "end": "434199"
  },
  {
    "text": "their guess is correct now the HSM might be rate limited for example the HSM might only respond to a th requests a",
    "start": "434199",
    "end": "440879"
  },
  {
    "text": "second in which case the attacker is just going to take too long uh to mount his attack so definitely using key",
    "start": "440879",
    "end": "447400"
  },
  {
    "text": "hashes on the server where the key stored an HSM is a is a very strong and powerful step forward but in many cases",
    "start": "447400",
    "end": "454919"
  },
  {
    "text": "there is no HSM for example when you're hashing passwords on a laptop or when you're hashing passwords on on a cell",
    "start": "454919",
    "end": "460360"
  },
  {
    "text": "phone there are actually no hsms available uh roughly speaking and as a result we'd like to have something a",
    "start": "460360",
    "end": "466440"
  },
  {
    "text": "mechanism that that is secure even if we don't have an HSM in addition also hsms",
    "start": "466440",
    "end": "471840"
  },
  {
    "text": "do not provide foolproof security maybe there is some still way to recover the secret key from the HSM so in addition",
    "start": "471840",
    "end": "479520"
  },
  {
    "text": "in addition to the HSM we'd like to also hash the password using what what's called a slow space hard function okay",
    "start": "479520",
    "end": "487639"
  },
  {
    "text": "so again these are complimentary mechanisms that work in tandem if you don't have an HSM you would just use a",
    "start": "487639",
    "end": "493599"
  },
  {
    "text": "slow space hard function uh and that would um uh you know be kind of an alternative to using a key hash function",
    "start": "493599",
    "end": "500680"
  },
  {
    "text": "so what I want to talk about is what is a slow space hard function and which one should we use and there's been actually",
    "start": "500680",
    "end": "506759"
  },
  {
    "text": "a lot of progress on this recently and that's what I want to tell you okay so the first idea um uh dates back",
    "start": "506759",
    "end": "514120"
  },
  {
    "text": "actually to the '90s and the first idea essentially again very very clever idea which is to say let's use a slow hash",
    "start": "514120",
    "end": "521279"
  },
  {
    "text": "function so one that actually takes quite a bit of CPU power to evaluate and examples of that are functions like",
    "start": "521279",
    "end": "527519"
  },
  {
    "text": "pbkdf2 and bcrypt so pbkdf2 is actually a standard that folks can use in very",
    "start": "527519",
    "end": "533120"
  },
  {
    "text": "very very very commonly deployed for example Apple uses p pbkdf2 in many of their products the way pbk DF two works",
    "start": "533120",
    "end": "540760"
  },
  {
    "text": "is essentially it slows down the hash function basically by iterating a hash function over and over and over and over",
    "start": "540760",
    "end": "547079"
  },
  {
    "text": "again right so to evaluate the function you sort of have to take your your hash function evaluated on the password",
    "start": "547079",
    "end": "553120"
  },
  {
    "text": "evaluate again on the result evaluate again on the result of that and iterate that like say 100,00 times or so um",
    "start": "553120",
    "end": "559800"
  },
  {
    "text": "until the final result is the actual hash value okay now it turns out pbkdf2 does actually more than just simple",
    "start": "559800",
    "end": "566839"
  },
  {
    "text": "iteration of the hash function that by itself simply iterating a hash function is actually not secure you have to do",
    "start": "566839",
    "end": "572680"
  },
  {
    "text": "something more and that's that's what p pbkdf2 and bcrypt do and so uh all the",
    "start": "572680",
    "end": "579360"
  },
  {
    "text": "basically what that ensures is that when the CPU is evaluating the hash function it takes actually quite a while to",
    "start": "579360",
    "end": "585880"
  },
  {
    "text": "evaluate the hash function so now uh in fact uh when the attacker wants to try you know billions of words in a",
    "start": "585880",
    "end": "592320"
  },
  {
    "text": "dictionary it's actually going to take the attacker quite a bit of time to try all billion words in a dictionary or you",
    "start": "592320",
    "end": "598720"
  },
  {
    "text": "know even however many words there are he's trying to uh to evaluate until he's able to get the user's password so the",
    "start": "598720",
    "end": "605360"
  },
  {
    "text": "question is how many iterations uh should we do that is how slow should the hash function be and typically um you",
    "start": "605360",
    "end": "612560"
  },
  {
    "text": "know this would be set so that you can evaluate the hash function on a modern uh server about a thousand times a",
    "start": "612560",
    "end": "617880"
  },
  {
    "text": "second so that means that the actual server uh that's doing uh password authentication at the website would be",
    "start": "617880",
    "end": "624800"
  },
  {
    "text": "able to evaluate the hash function about a thousand times a second so a single server can handle about a th000 logins",
    "start": "624800",
    "end": "630920"
  },
  {
    "text": "per second of course if you have higher uh load on your server you would just you know you would have to buy more",
    "start": "630920",
    "end": "636040"
  },
  {
    "text": "Hardware deploy more servers to handle that load but that's typical typical parameter that uh one would use uh for",
    "start": "636040",
    "end": "643360"
  },
  {
    "text": "determining how many iterations to actually run unfortunately there's a problem with that this is not uh quite",
    "start": "643360",
    "end": "648720"
  },
  {
    "text": "secure and the reason the the the the problematic issue here is that when an attacker attacks you they're not when",
    "start": "648720",
    "end": "655600"
  },
  {
    "text": "they're running their offline dictionary attack they're not going to be using your Hardware they're not going to be using the hardware that the website is",
    "start": "655600",
    "end": "662480"
  },
  {
    "text": "running instead they're going to be using custom Hardware to do their attack so for example they might use gpus to",
    "start": "662480",
    "end": "668440"
  },
  {
    "text": "compute the hash function gpus as you know are very parallel and you know if a GPU for example has 100 cores on it it",
    "start": "668440",
    "end": "675800"
  },
  {
    "text": "could actually do 100 evaluations at one in one step basically evaluate 100 words",
    "start": "675800",
    "end": "680880"
  },
  {
    "text": "in the dictionary in one step and in fact you can even build commodity Hardware that's uh using you know as6",
    "start": "680880",
    "end": "687320"
  },
  {
    "text": "and so on where the hash of valuation is even faster and in fact the attacking can do his dictionary attack much much",
    "start": "687320",
    "end": "694320"
  },
  {
    "text": "much faster than a th000 evaluations per second so let me ask you here's a puzzle",
    "start": "694320",
    "end": "699639"
  },
  {
    "text": "for you just so that this is a little bit interactive let me ask you so if you had to guess um when we were",
    "start": "699639",
    "end": "705079"
  },
  {
    "start": "703000",
    "end": "818000"
  },
  {
    "text": "specifically building Shu 56 if we um uh eval if we uh use Shu 56 as our hash",
    "start": "705079",
    "end": "710920"
  },
  {
    "text": "function um how much faster could sh 56 be made to run on a custom piece of",
    "start": "710920",
    "end": "717279"
  },
  {
    "text": "Hardware over running it on just the standard Intel processor say Intel Skylake a zon processor so so how much",
    "start": "717279",
    "end": "724839"
  },
  {
    "text": "faster can Asic um be compared to to standard AIC uh to standard Intel uh",
    "start": "724839",
    "end": "731040"
  },
  {
    "text": "processors yeah so I'll let you answer this uh this question while you answering the question uh let me kind of",
    "start": "731040",
    "end": "737000"
  },
  {
    "text": "explain why commodity Hardware is so much faster than just you know off-the-shelf Intel processors so here I",
    "start": "737000",
    "end": "744079"
  },
  {
    "text": "have uh an example uh yeah so here I have a picture of an Intel processor uh that just took a picture of Skylake",
    "start": "744079",
    "end": "751040"
  },
  {
    "text": "which is the latest uh Intel processor on the market today you can see here this is a four core processor so you can",
    "start": "751040",
    "end": "756639"
  },
  {
    "text": "see here the four cores this is one core uh this is another core and so on and",
    "start": "756639",
    "end": "761839"
  },
  {
    "text": "you can see that there's a lot of other stuff on this processor for example there's a lot of cache that's going that's being used here in fact as you",
    "start": "761839",
    "end": "768120"
  },
  {
    "text": "know there are three layers of caching there's a memory controller uh and so on and so forth there are many many many",
    "start": "768120",
    "end": "773880"
  },
  {
    "text": "components on this processor that really are completely irrelevant and unuseful when you're trying to evaluate a hash",
    "start": "773880",
    "end": "780360"
  },
  {
    "text": "function like Shot 2 56 so if you think about it the actual uh piece of the",
    "start": "780360",
    "end": "785440"
  },
  {
    "text": "hardware that evaluates sh 2 56 are these four little squares here you",
    "start": "785440",
    "end": "790639"
  },
  {
    "text": "notice the squares there's one little square um in every core and it's just this tiny amount of hardware on the",
    "start": "790639",
    "end": "797120"
  },
  {
    "text": "processor that's actually being used to evaluate sh to 56 so it should be very clear that if all I want to do is just",
    "start": "797120",
    "end": "803959"
  },
  {
    "text": "do a dictionary attack I would never use an Intel processor off the shelf because",
    "start": "803959",
    "end": "809160"
  },
  {
    "text": "because you know very little hardware and very little silicon in the processor is actually used to evaluate shot 56 so",
    "start": "809160",
    "end": "817360"
  },
  {
    "text": "my question to you was how much faster would uh commodity Hardware be compared to uh to an Intel processor and let's",
    "start": "817360",
    "end": "824399"
  },
  {
    "start": "818000",
    "end": "938000"
  },
  {
    "text": "see what you guys answered ah so everybody says about 500,000 times faster so you guys are very pessimistic",
    "start": "824399",
    "end": "829959"
  },
  {
    "text": "you think commodity Hardware can be made like super duper faster than uh Intel processors well so here's what we did um",
    "start": "829959",
    "end": "836839"
  },
  {
    "text": "uh well here's what I did I just looked up essentially how long does it take to uh uh to do sh",
    "start": "836839",
    "end": "842680"
  },
  {
    "text": "56 and come out it on custom hardware and the folks that are interested in speeding up uh sh 56 is are the folks",
    "start": "842680",
    "end": "849480"
  },
  {
    "text": "that are doing Bitcoin mining and so Bitcoin miners when you look at the processors they build there's no there's",
    "start": "849480",
    "end": "855600"
  },
  {
    "text": "no memory controllers there are no caches on those processors all those process do processors do is they just",
    "start": "855600",
    "end": "861399"
  },
  {
    "text": "kind of uh flood the the the processor with just copies of uh the memory control of the shter 56 engine uh so a",
    "start": "861399",
    "end": "869480"
  },
  {
    "text": "the engine is optimized and and and second of all it's replicated all over the processor so you don't have just have four engines per core you have",
    "start": "869480",
    "end": "876399"
  },
  {
    "text": "thousands of engines per core and you can see that uh if you just go to Amazon and buy just a Bitcoin mining uh rig uh",
    "start": "876399",
    "end": "882839"
  },
  {
    "text": "they cost about $1,700 and their price is constantly falling and you can see this is on a LW scale uh that um it's",
    "start": "882839",
    "end": "890360"
  },
  {
    "text": "about 50,000 times faster than uh come out than than just an install processor so not quite as pessimistic as you guys",
    "start": "890360",
    "end": "897560"
  },
  {
    "text": "were expecting but still still far far far faster so again if the Intel processor can do a th000 hashes per",
    "start": "897560",
    "end": "904839"
  },
  {
    "text": "second the attacker using dedicated Hardware can do 50 million hashes per",
    "start": "904839",
    "end": "910160"
  },
  {
    "text": "second so essentially the uh dictionary attack is re-enabled because the",
    "start": "910160",
    "end": "915600"
  },
  {
    "text": "attacker can run through large portions of the dictionary very fast okay so um",
    "start": "915600",
    "end": "921360"
  },
  {
    "text": "simply using a slow hash function doesn't really prevent the attacker from doing a dictionary attack because",
    "start": "921360",
    "end": "926680"
  },
  {
    "text": "commodity Hardware is so much faster than the Intel processor so what do we do so what do we do so A beautiful idea",
    "start": "926680",
    "end": "933839"
  },
  {
    "text": "actually appeared uh a couple of years ago this is this idea that's used in scripts um and this idea is really",
    "start": "933839",
    "end": "939920"
  },
  {
    "start": "938000",
    "end": "1242000"
  },
  {
    "text": "elegant so the idea basically says well let's use a hash function that isn't just slow that isn't just hard to",
    "start": "939920",
    "end": "945720"
  },
  {
    "text": "evaluate but also takes a lot of memory to evaluate as you're Computing the hash function so now if you think about what",
    "start": "945720",
    "end": "952560"
  },
  {
    "text": "the custom Hardware has to do it can't just use a little piece of silicon to compute the hash function it has to use",
    "start": "952560",
    "end": "959120"
  },
  {
    "text": "the little piece of silicon but right next to it it has to allocate a large buffer of memory that's that's needed to",
    "start": "959120",
    "end": "965279"
  },
  {
    "text": "evaluate the hash function so that's the idea behind script so if I'm building",
    "start": "965279",
    "end": "970839"
  },
  {
    "text": "dedicated Hardware to do dictionary attacks now I have to kind of you know the number of uh engines I can lay on",
    "start": "970839",
    "end": "977120"
  },
  {
    "text": "one chip is sort of limited by the number of memory components that I can put in every chip and since memory is",
    "start": "977120",
    "end": "983519"
  },
  {
    "text": "relatively large now each one of my chips is not going to have that many hashing engines and so we kind have uh",
    "start": "983519",
    "end": "990079"
  },
  {
    "text": "we kind of have um more equality between the actual website's hardware and the",
    "start": "990079",
    "end": "995519"
  },
  {
    "text": "attacker's hardware again because the attacker cannot replicate uh using dedicated Hardware the attacker cannot",
    "start": "995519",
    "end": "1002000"
  },
  {
    "text": "put too many hashing engine engines on each chip because each engine needs a lot of memory and memory takes space",
    "start": "1002000",
    "end": "1009120"
  },
  {
    "text": "space on the chip okay so so that's script and that's actually a fine thing to use there's one problem with escript",
    "start": "1009120",
    "end": "1014959"
  },
  {
    "text": "however which is that in escript if you look at the how memory how this memory",
    "start": "1014959",
    "end": "1021120"
  },
  {
    "text": "is being accessed as you're evaluating the hash function it turns out the memory access pattern actually depends",
    "start": "1021120",
    "end": "1027600"
  },
  {
    "text": "on the password that the user supplied okay so for my password there would be one particular memory access pattern for",
    "start": "1027600",
    "end": "1034038"
  },
  {
    "text": "your password there would be a different memory access pattern now you might have heard of uh what call what are called",
    "start": "1034039",
    "end": "1040558"
  },
  {
    "text": "cache timing attacks where essentially an attacker who is able to um actually",
    "start": "1040559",
    "end": "1046360"
  },
  {
    "text": "gain uh a low privilege control of the web server so the attacker sits on the",
    "start": "1046360",
    "end": "1051880"
  },
  {
    "text": "web server but just has low privilege access to it um just by having a full hold on the web server you can actually",
    "start": "1051880",
    "end": "1058840"
  },
  {
    "text": "get a lot of information as to how a high privilege process is accessing memory okay so basically what you're",
    "start": "1058840",
    "end": "1065640"
  },
  {
    "text": "doing is you're kind of looking at how as a low privilege me uh process process you're looking at how the cash is being",
    "start": "1065640",
    "end": "1071160"
  },
  {
    "text": "used and by looking at how the cash is being used you can figure out how the high privilege process is accessing",
    "start": "1071160",
    "end": "1077159"
  },
  {
    "text": "memory you can't read the the password that the high privilege process is is uh processing but you can see how the high",
    "start": "1077159",
    "end": "1083960"
  },
  {
    "text": "privilege process is accessing memory well if you can do that as I'm entering",
    "start": "1083960",
    "end": "1089080"
  },
  {
    "text": "my password you can just measure uh what the memory access pattern is and now",
    "start": "1089080",
    "end": "1094200"
  },
  {
    "text": "when an attacker uh recovers say the hash password plus the memory access",
    "start": "1094200",
    "end": "1100200"
  },
  {
    "text": "pattern uh as the as the as the hash function was being evaluated that essentially eliminates the memory",
    "start": "1100200",
    "end": "1106520"
  },
  {
    "text": "requirements for uh Computing the hash function because what the attacker would do is he would just try one password",
    "start": "1106520",
    "end": "1112400"
  },
  {
    "text": "after another but he wouldn't actually evaluate the hash function he would just kind of compute the memory access",
    "start": "1112400",
    "end": "1117799"
  },
  {
    "text": "pattern associated with the hash fun with the hash function and as soon as he sees that the word say you know 1 2 3 4",
    "start": "1117799",
    "end": "1123880"
  },
  {
    "text": "5 does not match the memory access pattern that the user uh generated with",
    "start": "1123880",
    "end": "1129559"
  },
  {
    "text": "his password he knows that the user's password is not 1 2 3 4 5 so again he can reinstantiate the offine dictionary",
    "start": "1129559",
    "end": "1137039"
  },
  {
    "text": "attack without memory just using the memory access pattern so",
    "start": "1137039",
    "end": "1142200"
  },
  {
    "text": "I hope that was clear but essentially what it says is that script again it's a wonderful wonderful idea um in that it",
    "start": "1142200",
    "end": "1149080"
  },
  {
    "text": "requires the attacker to to spend a lot of memory in order to evaluate the hash function uh but the minute the attacker",
    "start": "1149080",
    "end": "1155880"
  },
  {
    "text": "has a little bit of side information in particular the memory access patterns as the hash function is being evaluated",
    "start": "1155880",
    "end": "1162000"
  },
  {
    "text": "that essentially allows the attacker to now test words in the dictionary without",
    "start": "1162000",
    "end": "1167200"
  },
  {
    "text": "memory and now we're back to a problematic custom Asic attack okay so that's the issue with script and so the",
    "start": "1167200",
    "end": "1173840"
  },
  {
    "text": "question is what do we do about that is there a better solution and so again there's been progress on this recently",
    "start": "1173840",
    "end": "1179280"
  },
  {
    "text": "the question that we're kind of asking is there a space hard function where in fact uh the time to evaluate the hash",
    "start": "1179280",
    "end": "1186000"
  },
  {
    "text": "function is independent of the password and the answer is yes there actually is such a thing and uh here let me show you",
    "start": "1186000",
    "end": "1192400"
  },
  {
    "text": "the hash function is called um this hash function is called argon 2 and it was",
    "start": "1192400",
    "end": "1197960"
  },
  {
    "text": "actually the the winner of this password hashing competition that concluded recently and the the nice thing about",
    "start": "1197960",
    "end": "1204039"
  },
  {
    "text": "argon 2 is it supposedly space hard and at the same time it's in the memory",
    "start": "1204039",
    "end": "1209200"
  },
  {
    "text": "access pattern is independent of the password so the attack that I just described presumably would be would be",
    "start": "1209200",
    "end": "1214320"
  },
  {
    "text": "difficult to mount so the one issue with argon 2 is it's not there's no kind of",
    "start": "1214320",
    "end": "1219960"
  },
  {
    "text": "um a rigorous security proof to argue that it really is uh space hard as is",
    "start": "1219960",
    "end": "1225720"
  },
  {
    "text": "claimed and so one of the things that we were interested is basically can we come up with the same prop with a hash",
    "start": "1225720",
    "end": "1231480"
  },
  {
    "text": "function that has the same properties as argon 2i but actually has a proof that",
    "start": "1231480",
    "end": "1236520"
  },
  {
    "text": "it cannot be evaluated with less memory than what's claimed and so the the hash",
    "start": "1236520",
    "end": "1241760"
  },
  {
    "text": "function we came up is came up with is called balloon hashing this is Joint work with one of my students Henry Corgan Gibbs and Stuart Shor who uh is",
    "start": "1241760",
    "end": "1249039"
  },
  {
    "start": "1242000",
    "end": "1671000"
  },
  {
    "text": "at Microsoft research and the properties of the hash function essentially as we said it's a it has a password",
    "start": "1249039",
    "end": "1254919"
  },
  {
    "text": "independent access pattern memory independent access pattern so you can't do the attack that I just described uh",
    "start": "1254919",
    "end": "1261039"
  },
  {
    "text": "it uses basically standard crypto primitive namely it's just based on sh 256 so everything here is kind of uh",
    "start": "1261039",
    "end": "1267200"
  },
  {
    "text": "standardized based on Primitives we all know and love it's actually uh quite fast and definitely can achieve you know",
    "start": "1267200",
    "end": "1273840"
  },
  {
    "text": "rates of a th000 hashes per second uh so it is so it can be used on real world servers and the interesting property is",
    "start": "1273840",
    "end": "1280360"
  },
  {
    "text": "that in fact it has um a proof of security in the following sense if you try to evaluate it um with less space",
    "start": "1280360",
    "end": "1288080"
  },
  {
    "text": "than clck in particular suppose you try to evaluate evaluate it with a quarter of the space that we claimed is required",
    "start": "1288080",
    "end": "1296159"
  },
  {
    "text": "then the amount of work to to do the evaluation actually kind of blows up exponentially so if you evaluated with",
    "start": "1296159",
    "end": "1302480"
  },
  {
    "text": "however much space we said is needed then you can do it at a thousand times a second if you try to evaluate with a",
    "start": "1302480",
    "end": "1308480"
  },
  {
    "text": "quarter of the space that we said is needed all of a sudden the total amount of work blows up exponentially so that's",
    "start": "1308480",
    "end": "1315039"
  },
  {
    "text": "kind of a proof that uh you know at least when it comes to the total amount of work you have to do uh that uh can't",
    "start": "1315039",
    "end": "1322000"
  },
  {
    "text": "be that that evaluation can't be done without space so again if the attacker",
    "start": "1322000",
    "end": "1327120"
  },
  {
    "text": "is trying to build custom as6 to do a dictionary attack he has to spend a lot of space um to uh to mount the attack",
    "start": "1327120",
    "end": "1334840"
  },
  {
    "text": "now one thing that's interesting is we were primarily interested in the total amount of work that's needed to evaluate",
    "start": "1334840",
    "end": "1339960"
  },
  {
    "text": "the hash function uh with with less space but it turns out um if you're going to build something that's me",
    "start": "1339960",
    "end": "1345760"
  },
  {
    "text": "that's that has uh that's um me memory access pattern independent of the password uh then it turns out there's um",
    "start": "1345760",
    "end": "1353799"
  },
  {
    "text": "essentially uh kind of a an possibility result that says that any such scheme",
    "start": "1353799",
    "end": "1359039"
  },
  {
    "text": "including argon 2i and balloon is is going to be subject to what's called a parallel speed up so in other words even",
    "start": "1359039",
    "end": "1365760"
  },
  {
    "text": "though the total amount of work that the attacker has to do has to be quite large the attacker can still speed up some of",
    "start": "1365760",
    "end": "1371760"
  },
  {
    "text": "what he's doing by kind of laying out multiple Cordes on his on his um on his",
    "start": "1371760",
    "end": "1376840"
  },
  {
    "text": "processor so we're kind of um we have to have a we need to choose between two",
    "start": "1376840",
    "end": "1382240"
  },
  {
    "text": "options either we have a hash function where the memory access pattern depends on the password and then You're",
    "start": "1382240",
    "end": "1388240"
  },
  {
    "text": "vulnerable to the attack that I described before or you have one where the memory access pattern is independent",
    "start": "1388240",
    "end": "1394000"
  },
  {
    "text": "of the password but then you have to worry about these parallel speed up attacks and so what we're actually",
    "start": "1394000",
    "end": "1399039"
  },
  {
    "text": "recommending now is that since you know we can't kind of have the best of both worlds Let's do let's do both so kind of",
    "start": "1399039",
    "end": "1405120"
  },
  {
    "text": "the natural thing to do is maybe you use balloon or argun to I to Hash the password first that prevents uh these um",
    "start": "1405120",
    "end": "1414039"
  },
  {
    "text": "memory access pattern attacks and then you apply script so that uh the memory",
    "start": "1414039",
    "end": "1419279"
  },
  {
    "text": "access pattern attack would only apply to the hash password not the original password so basically if you compose",
    "start": "1419279",
    "end": "1425760"
  },
  {
    "text": "balloon on AR or argon toi with script in some sense you kind of get uh The Best of Both Worlds okay so that's",
    "start": "1425760",
    "end": "1432520"
  },
  {
    "text": "that's one option to use so kind of that's what's been happening in the space of password hashing it's kind of interesting there's been recent develop",
    "start": "1432520",
    "end": "1438400"
  },
  {
    "text": "vment as you can see uh so there's lots to say on how to do proper password hashing um this this is all very new",
    "start": "1438400",
    "end": "1446400"
  },
  {
    "text": "material uh it has not been standardized yet um and so if you're considering um",
    "start": "1446400",
    "end": "1452799"
  },
  {
    "text": "moving away from pbkdf2 you should because pbkdf2 is relatively old at this point um but uh what to move to yet is",
    "start": "1452799",
    "end": "1460600"
  },
  {
    "text": "actually still as you can see a very active area of research so don't change what you're doing just wait just just",
    "start": "1460600",
    "end": "1466679"
  },
  {
    "text": "yet just wait a little bit more but just realized that there's actually very active and uh interesting research going",
    "start": "1466679",
    "end": "1472200"
  },
  {
    "text": "on in the space I wanted to show also show you what the balloon hashing function actually actually looks like so",
    "start": "1472200",
    "end": "1479200"
  },
  {
    "text": "you know I can't give a presentation without actually giving you a little bit of code so let me show you what these space hard functions look like and how",
    "start": "1479200",
    "end": "1486120"
  },
  {
    "text": "they operate so uh let's see so the way they work is basically as as I said they take as input the password the salt for",
    "start": "1486120",
    "end": "1494000"
  },
  {
    "text": "the password the space requirement and the time requirement okay so what we do",
    "start": "1494000",
    "end": "1499640"
  },
  {
    "text": "is first we allocate a buffer where the password will be where um where where",
    "start": "1499640",
    "end": "1504799"
  },
  {
    "text": "that that is going to contain the large amount of memory that's needed to evaluate the hash function the next thing we do is uh we basically fill up",
    "start": "1504799",
    "end": "1512799"
  },
  {
    "text": "the this buffer using values derived from the password the password and the salt so what we do is basically as you",
    "start": "1512799",
    "end": "1519559"
  },
  {
    "text": "can see here we're kind of uh hashing the password and the salt and all we're doing in this Loop here is just filling",
    "start": "1519559",
    "end": "1524760"
  },
  {
    "text": "up the buffer using uh values derived from the password and we're using as I said a hash function here as you can see",
    "start": "1524760",
    "end": "1531159"
  },
  {
    "text": "this hash function this would just be like shot to 56 or so all right so then",
    "start": "1531159",
    "end": "1536360"
  },
  {
    "text": "um the next thing we do is we're going to do a number of iterations so this is going to depend on the time cost so you can see the time cost variable here um",
    "start": "1536360",
    "end": "1544399"
  },
  {
    "text": "the more iterate the more you iterate uh the more secure the hash function becomes uh in a certain sense which I",
    "start": "1544399",
    "end": "1549720"
  },
  {
    "text": "won't make explicit here and then what we do is basically every every iteration we Loop through the buffer and do the",
    "start": "1549720",
    "end": "1556520"
  },
  {
    "text": "following steps basically um we change uh so we take the previous value in the",
    "start": "1556520",
    "end": "1562399"
  },
  {
    "text": "buffer in other words we take the uh you know when we're looking at element number M actually prev is just the value",
    "start": "1562399",
    "end": "1569159"
  },
  {
    "text": "of the buffer element at position M minus one and then we hash that so we hash the elemented position n minus one",
    "start": "1569159",
    "end": "1575880"
  },
  {
    "text": "with the elemented position M okay so we just hash two consecutive values and then in addition we Hash a few more",
    "start": "1575880",
    "end": "1582399"
  },
  {
    "text": "values we can choose 20 more values uh to hash and uh all those values",
    "start": "1582399",
    "end": "1588840"
  },
  {
    "text": "basically form the new value at position M and as you can see we're kind of doing a linear scan through the buffer and at",
    "start": "1588840",
    "end": "1595360"
  },
  {
    "text": "every step in the buffer we're basically hashing well essentially 21 values uh into this uh position m in the buffer",
    "start": "1595360",
    "end": "1603159"
  },
  {
    "text": "and M just kind of increments sequentially uh one after another so that's it that's the whole hash function",
    "start": "1603159",
    "end": "1608559"
  },
  {
    "text": "we iterate this over and over and over again and finally the final output is the last entry in the buffer so it's",
    "start": "1608559",
    "end": "1614760"
  },
  {
    "text": "kind of cool that this hash function just fits on a single page it's very easy to see how it works and as I said",
    "start": "1614760",
    "end": "1620240"
  },
  {
    "text": "most of the work is in proving that in fact um the total amount of work that has to be done to evaluate this function",
    "start": "1620240",
    "end": "1626559"
  },
  {
    "text": "must take a lot of memory okay so there's an accompanying proof of security that shows that if you try to",
    "start": "1626559",
    "end": "1631799"
  },
  {
    "text": "evaluate this function with little memory their running time would actually blow up all right so that's what I",
    "start": "1631799",
    "end": "1638320"
  },
  {
    "text": "wanted to tell you about uh password hashing now we're going to change gears a little bit I see that I have 10 more",
    "start": "1638320",
    "end": "1643720"
  },
  {
    "text": "minutes so we're going to change gears a little bit I hope in the remaining 10 minutes I can tell you about completely different topic that we've been working",
    "start": "1643720",
    "end": "1650000"
  },
  {
    "text": "on having to do with uh control flow Integrity so this is Joint work uh with",
    "start": "1650000",
    "end": "1655279"
  },
  {
    "text": "our students Ali Masa Andrew b a professor here David maerz and and",
    "start": "1655279",
    "end": "1660559"
  },
  {
    "text": "myself okay so let me tell you what this is about so complete change of gear from",
    "start": "1660559",
    "end": "1665799"
  },
  {
    "text": "password hashing on to control flow Integrity all right so control flow",
    "start": "1665799",
    "end": "1671080"
  },
  {
    "start": "1671000",
    "end": "1944000"
  },
  {
    "text": "Integrity is a wonderful wonderful idea uh due to a body adal back in 2005 and",
    "start": "1671080",
    "end": "1676760"
  },
  {
    "text": "the idea is essentially it's a way to prevent what are called control hijacking attacks where the attacker",
    "start": "1676760",
    "end": "1682840"
  },
  {
    "text": "tries to take control of how the program executes so you know about buffer",
    "start": "1682840",
    "end": "1688240"
  },
  {
    "text": "overflow attacks return or re programming attacks I hope you know about these things if you don't know about these types of attacks please",
    "start": "1688240",
    "end": "1694320"
  },
  {
    "text": "please take our um secure programming course where we go into extreme depth about all these uh all these attacks and",
    "start": "1694320",
    "end": "1701320"
  },
  {
    "text": "how they operate okay so uh the goal of control SL Integrity is basically to protect a program from these control",
    "start": "1701320",
    "end": "1709200"
  },
  {
    "text": "hijacking attacks where the attacker basically um is able to to essentially",
    "start": "1709200",
    "end": "1715159"
  },
  {
    "text": "uh take control of how control flow operates of how control flow flows and in that basically that allows the",
    "start": "1715159",
    "end": "1721399"
  },
  {
    "text": "attacker to do uh to cause lots of damage uh to the program okay so there's actually a lot of academic research on",
    "start": "1721399",
    "end": "1728159"
  },
  {
    "text": "control flow Integrity there's actually you know there's a lot of systems that I just gave some examples here uh and",
    "start": "1728159",
    "end": "1734600"
  },
  {
    "text": "there's also a bunch of attacks on these systems and so on so this is a very active area of research um let me tell",
    "start": "1734600",
    "end": "1740039"
  },
  {
    "text": "you instead of going through all the previous work let me kind of tell you what this is about and I'll tell you",
    "start": "1740039",
    "end": "1745679"
  },
  {
    "text": "kind of um what what we've done all right so how does control flow Integrity work uh well again as I said there are",
    "start": "1745679",
    "end": "1752240"
  },
  {
    "text": "many many many many proposals the cool thing is that actually in Windows 10 this has actually been deployed by",
    "start": "1752240",
    "end": "1757720"
  },
  {
    "text": "Microsoft in um and different systems called MX and control flow guard uh let me just tell you how control flow Guard",
    "start": "1757720",
    "end": "1763960"
  },
  {
    "text": "works so what it does is essentially um well what it does I would say we",
    "start": "1763960",
    "end": "1770559"
  },
  {
    "text": "consider this as very coarse control flow Integrity but what it does is essentially it builds at at uh compile",
    "start": "1770559",
    "end": "1777519"
  },
  {
    "text": "and linking time the compiler essentially builds a table of all",
    "start": "1777519",
    "end": "1782720"
  },
  {
    "text": "possible entry points into different functions in the program okay so you know maybe you have hundreds of of of",
    "start": "1782720",
    "end": "1788799"
  },
  {
    "text": "functions in your program essentially what the compiler does is it lists literally lists all these uh possible",
    "start": "1788799",
    "end": "1796000"
  },
  {
    "text": "entry points uh all these possible function entry points in a table it's represented as a bit Vector yeah so",
    "start": "1796000",
    "end": "1802840"
  },
  {
    "text": "there's a bit big bit Vector at the beginning of your code that's that's zero if that particular address is not",
    "start": "1802840",
    "end": "1809519"
  },
  {
    "text": "an entry point for for a function and the the bid Vector is one if that address is an entry point for a function",
    "start": "1809519",
    "end": "1817120"
  },
  {
    "text": "and then every time you make an indirect call so here you know you can see that you're you're kind of making um an",
    "start": "1817120",
    "end": "1822760"
  },
  {
    "text": "indirect call say you know a method invocation or so on what the program actually does is it takes the address of",
    "start": "1822760",
    "end": "1829320"
  },
  {
    "text": "the indirect call and then calls this extra check here you can see the check",
    "start": "1829320",
    "end": "1834360"
  },
  {
    "text": "that's uh shown here essentially this guard check I call what it does is it",
    "start": "1834360",
    "end": "1840080"
  },
  {
    "text": "looks at the address that the processor is about to jump to and it verifies that",
    "start": "1840080",
    "end": "1845679"
  },
  {
    "text": "in the bit Vector the corresponding bits is set to one in other words where it's about to jump to really is an entry",
    "start": "1845679",
    "end": "1852679"
  },
  {
    "text": "point to a valid function in the code so you can't just cause the code to jump wherever you like you have to jump into",
    "start": "1852679",
    "end": "1859240"
  },
  {
    "text": "a valid entry point in the in the program so this makes the uh control flow uh this makes the control hijacking",
    "start": "1859240",
    "end": "1866120"
  },
  {
    "text": "attacks much much much harder to do and you see that if this uh function uh",
    "start": "1866120",
    "end": "1871320"
  },
  {
    "text": "basically returns in other words you are jumping into a valid function then the actual call takes place you can see that",
    "start": "1871320",
    "end": "1877159"
  },
  {
    "text": "we're now calling ESI which actually calls the function so the call only happens if you jump to an address that's",
    "start": "1877159",
    "end": "1883880"
  },
  {
    "text": "a valid entry point for a function now so this looks great yeah this is already",
    "start": "1883880",
    "end": "1888919"
  },
  {
    "text": "making these control hijacking attacks much harder uh however it's not perfect when the reason it's not perfect is",
    "start": "1888919",
    "end": "1895360"
  },
  {
    "text": "first of all you realize it's checking that the attacker is calling some function but it's not checking that the",
    "start": "1895360",
    "end": "1901399"
  },
  {
    "text": "attacker is calling the correct function right so the attacker can still jump to the wrong function and that will still",
    "start": "1901399",
    "end": "1908519"
  },
  {
    "text": "uh cause you know in some cases that still let the attacker take control of the code and that's not prevented by",
    "start": "1908519",
    "end": "1914559"
  },
  {
    "text": "control flow guard so again control flow guard flow guard is a wonderful wonderful idea but you can pretty much",
    "start": "1914559",
    "end": "1920679"
  },
  {
    "text": "see how to get around it by essentially causing the code to jump into the wrong function that's an actual valid function",
    "start": "1920679",
    "end": "1927240"
  },
  {
    "text": "in the program and the other thing is why can't we make it more precise it turns out it's actually non-trivial to",
    "start": "1927240",
    "end": "1932880"
  },
  {
    "text": "build the actual control flow for the for the for the program at compile time it's much easier to do this dynamically",
    "start": "1932880",
    "end": "1939159"
  },
  {
    "text": "at runtime and that's kind of what we're uh trying to do so let me explain to you what uh what we're doing so we have a",
    "start": "1939159",
    "end": "1945480"
  },
  {
    "start": "1944000",
    "end": "2183000"
  },
  {
    "text": "different approach to control flow Integrity we call it cryptographic control flow Integrity so rather than um",
    "start": "1945480",
    "end": "1951600"
  },
  {
    "text": "building it based on code analysis we're going to build control flow Integrity based on crypto and so let me explain to",
    "start": "1951600",
    "end": "1958080"
  },
  {
    "text": "you first of all what are we assuming so we're assuming the attacker has a lot of power the threat model that we give the",
    "start": "1958080",
    "end": "1963200"
  },
  {
    "text": "attacker is we say you know the attacker can read and write memory anywhere that it wants so we're given the attacker",
    "start": "1963200",
    "end": "1970240"
  },
  {
    "text": "this is a remote attacker say that's trying to attack the web server and we're just assuming the attacker can",
    "start": "1970240",
    "end": "1975600"
  },
  {
    "text": "already read and write any point in memory for in this web server um in the web",
    "start": "1975600",
    "end": "1981279"
  },
  {
    "text": "server that's running that's coming under attack and in fact we showed we had a paper actually in 2014 14 we call",
    "start": "1981279",
    "end": "1987679"
  },
  {
    "text": "this the hacking blind paper where we actually showed that on a real web server very very often attackers can",
    "start": "1987679",
    "end": "1993720"
  },
  {
    "text": "actually induce reads and writs wherever they want so this is it sounds like it it's giving the attacker too much power",
    "start": "1993720",
    "end": "2000080"
  },
  {
    "text": "but we actually came up with attacks where that's exactly the amount of power the attacker has literally you can read and write any point in memory and even",
    "start": "2000080",
    "end": "2007559"
  },
  {
    "text": "though the attacker has so much power the attacker should not be able to cause the program to deviate from its designated",
    "start": "2007559",
    "end": "2013919"
  },
  {
    "text": "control flow so again uh control flow must proceed at uh the allow only at the",
    "start": "2013919",
    "end": "2020279"
  },
  {
    "text": "intended uh flow and not and the attacker should not be able to modify that okay so how do we do it well the",
    "start": "2020279",
    "end": "2026159"
  },
  {
    "text": "way we do it is as I said using this uh using this cryptographic control for integrity idea what we do is essentially",
    "start": "2026159",
    "end": "2032639"
  },
  {
    "text": "every time control flow depends on a jump address uh we're going to provide we're going to very ver ify Integrity of",
    "start": "2032639",
    "end": "2038639"
  },
  {
    "text": "that jump address in particular what the code will actually do is every time it writes an address under the Heap or onto",
    "start": "2038639",
    "end": "2046080"
  },
  {
    "text": "the stack it's going to concatenate to this address a 64-bit Integrity tag okay",
    "start": "2046080",
    "end": "2052200"
  },
  {
    "text": "so here is how we comput it basically we're we're we're going to depend on on the AES block side for for this and",
    "start": "2052200",
    "end": "2057839"
  },
  {
    "text": "again if you want to learn how AES Works uh we discussed this at Great length in our crypto course um but AES is",
    "start": "2057839",
    "end": "2063919"
  },
  {
    "text": "basically is one thing that we can use AES for is to compute integral tags and what we do is basically we compute",
    "start": "2063919",
    "end": "2070599"
  },
  {
    "text": "essentially this Integrity tag on the jump address uh plus the source address",
    "start": "2070599",
    "end": "2075919"
  },
  {
    "text": "and you know we prend a zero if it's on the Heap we prepend the one if it's on the stack just so that there's no",
    "start": "2075919",
    "end": "2080960"
  },
  {
    "text": "confusion between addresses on the Heap and addresses on the stack and now you can see that now every single uh Dynamic",
    "start": "2080960",
    "end": "2087398"
  },
  {
    "text": "address on the Heap or on the stack is going to have this Integrity tag associated with it and every time we",
    "start": "2087399",
    "end": "2093320"
  },
  {
    "text": "jump to that address before we jump we actually verify that the tag is is valid",
    "start": "2093320",
    "end": "2098440"
  },
  {
    "text": "so essentially what the program is doing is making sure that um that jump address",
    "start": "2098440",
    "end": "2104160"
  },
  {
    "text": "was actually generated by the program and not by the attacker so we only jump to addresses",
    "start": "2104160",
    "end": "2110760"
  },
  {
    "text": "that the program generates and not addresses that the attacker controls now",
    "start": "2110760",
    "end": "2116079"
  },
  {
    "text": "you should be asking when you look at this you should already be wondering where is this keyk going to be stored",
    "start": "2116079",
    "end": "2121320"
  },
  {
    "text": "right I told you that the attacker can read and write any point in memory so if",
    "start": "2121320",
    "end": "2126400"
  },
  {
    "text": "we store the key k memory the attacker can just read it and once he has the keyk he can forge these Tags by himself",
    "start": "2126400",
    "end": "2133680"
  },
  {
    "text": "and he can defeat the mechanism so the question is where do we store this key Cas so the attacker can't get at it at",
    "start": "2133680",
    "end": "2139280"
  },
  {
    "text": "it and the answer is we're going to store it actually in an xmm register so this key always lives in registers on",
    "start": "2139280",
    "end": "2145920"
  },
  {
    "text": "the processor and it's never never ever written to main memory so the attacker can't can't actually read it and it",
    "start": "2145920",
    "end": "2152440"
  },
  {
    "text": "turns out many programs actually don't use the xmm registers xmm registers are um sort of extensions extended registers",
    "start": "2152440",
    "end": "2159200"
  },
  {
    "text": "in the processor uh many programs don't actually use it uh and as long as they don't use it you know we can put our key",
    "start": "2159200",
    "end": "2165160"
  },
  {
    "text": "there interestingly open SSL actually ends up using the xmm registers and so to make op SSL work with this uh this is",
    "start": "2165160",
    "end": "2172400"
  },
  {
    "text": "op SSL is a crypto Library we actually had to do uh extra work but again that's all described in our paper and I won't",
    "start": "2172400",
    "end": "2178640"
  },
  {
    "text": "describe that here for the in the interest of time so just to complete this uh this topic you must be thinking",
    "start": "2178640",
    "end": "2185119"
  },
  {
    "start": "2183000",
    "end": "2962000"
  },
  {
    "text": "that we're completely nuts in that again if you think about what we're proposing is every time uh an address is written",
    "start": "2185119",
    "end": "2191520"
  },
  {
    "text": "to Heap or stack we compute an AES Integrity tack on it a tag on it and",
    "start": "2191520",
    "end": "2196680"
  },
  {
    "text": "every time we jump to that address we verify the tag so if you think about how many times we have to compute AES as the",
    "start": "2196680",
    "end": "2202520"
  },
  {
    "text": "program is running it sounds like this is just going to have horrible performance implications but it turns",
    "start": "2202520",
    "end": "2208079"
  },
  {
    "text": "out actually it doesn't it doesn't yeah so we implemented this in llvm we tried",
    "start": "2208079",
    "end": "2213240"
  },
  {
    "text": "this on a lot of kind of common applications and the Slowdown you know it is there is definitely a penalty to",
    "start": "2213240",
    "end": "2219160"
  },
  {
    "text": "doing this but the Slowdown is not like out of the you know out of the out of completely completely unreasonable there",
    "start": "2219160",
    "end": "2225319"
  },
  {
    "text": "is a Slowdown but it it does provide quite a strong level of Defense so how are we able to get this to be uh so fast",
    "start": "2225319",
    "end": "2232839"
  },
  {
    "text": "and the answer is again something you guys should be aware of which is thank you Intel Intel has actually made",
    "start": "2232839",
    "end": "2239640"
  },
  {
    "text": "amazing progress in making AES run fast on the x86 processor so Intel added",
    "start": "2239640",
    "end": "2246040"
  },
  {
    "text": "these instructions called the AES s ni instructions ni stands for new instructions and what they did",
    "start": "2246040",
    "end": "2252040"
  },
  {
    "text": "essentially is they implemented AES in Hardware so um there's an AES ink",
    "start": "2252040",
    "end": "2257400"
  },
  {
    "text": "instruction now that implements one round of the AES Cipher so if you want to if you want to do an AES encryption",
    "start": "2257400",
    "end": "2264079"
  },
  {
    "text": "all you have to do is just call AES in 10 times for the 10 rounds of AES and",
    "start": "2264079",
    "end": "2269359"
  },
  {
    "text": "that's essentially one um evaluation of AES and in fact as you can see over the years Intel has actually made AES even",
    "start": "2269359",
    "end": "2276560"
  },
  {
    "text": "faster um as this has been such a successful project for them that AES",
    "start": "2276560",
    "end": "2282240"
  },
  {
    "text": "speed is is constantly improving and the faster it gets the lower the overheads",
    "start": "2282240",
    "end": "2287280"
  },
  {
    "text": "for our for our system moreover they even they even made these ases evaluations fully pipelined so the",
    "start": "2287280",
    "end": "2293599"
  },
  {
    "text": "throughput for evaluating AES essentially is is uh you know almost one cycle per uh per one AES round uh yeah",
    "start": "2293599",
    "end": "2301760"
  },
  {
    "text": "so this is quite remarkable and because of these a instructions we're able to to get the performance for our uh method to",
    "start": "2301760",
    "end": "2308520"
  },
  {
    "text": "run at a reasonable rate okay so uh yeah so I wanted to just point tell you that these AES the fact that there's AES",
    "start": "2308520",
    "end": "2315000"
  },
  {
    "text": "available in Hardware is great for crypto on the wire but it's also great",
    "start": "2315000",
    "end": "2320560"
  },
  {
    "text": "for uh securing applications for example by using by by providing this strong control flow Integrity all right so",
    "start": "2320560",
    "end": "2327440"
  },
  {
    "text": "these are two projects I wanted to tell you about I guess we're going to I wanted to tell you more about internet of things things we're doing but I guess",
    "start": "2327440",
    "end": "2333119"
  },
  {
    "text": "we will do that at a future webinar so thanks everyone for the questions terrific questions",
    "start": "2333119",
    "end": "2338200"
  },
  {
    "text": "um so let's see so let's get to as many of these as we can uh so how do gpus impact the Practical implications",
    "start": "2338200",
    "end": "2344079"
  },
  {
    "text": "ability for evaluating or Brute Force brute forcing hash functions so that's a great question actually so for hash",
    "start": "2344079",
    "end": "2350599"
  },
  {
    "text": "functions that are not space hard um gpus actually are quite detrimental",
    "start": "2350599",
    "end": "2356319"
  },
  {
    "text": "right so again a GPU has many many cores and as a result you can actually evaluate um many iterations of the hash",
    "start": "2356319",
    "end": "2363880"
  },
  {
    "text": "function at once and that allows you to speed up the uh the uh dictionary attack significantly so memory hard functions",
    "start": "2363880",
    "end": "2370800"
  },
  {
    "text": "so functions that require a lot of memory to evaluate are much harder to run on a GPU especially because every",
    "start": "2370800",
    "end": "2377200"
  },
  {
    "text": "core for every valuation of the hash function the core has to allocate a lot of memory for Val evaluating that hash",
    "start": "2377200",
    "end": "2384359"
  },
  {
    "text": "function and as a as a result uh it's actually quite quite difficult to do on a GPU so if you're worried about GPU",
    "start": "2384359",
    "end": "2390960"
  },
  {
    "text": "based attack definitely you need to use a space hard hash function like balloon or argon or script and uh you should not",
    "start": "2390960",
    "end": "2398160"
  },
  {
    "text": "be using pbkdf2 generally I hope I convinced you in this presentation that pbkdf2 is at this point essentially on",
    "start": "2398160",
    "end": "2405520"
  },
  {
    "text": "its way out yeah in in in a few years uh once the once the discussion of uh the",
    "start": "2405520",
    "end": "2410760"
  },
  {
    "text": "Next Generation hash functions is settled we will not be using TB kds2 anymore we really should be using space",
    "start": "2410760",
    "end": "2416280"
  },
  {
    "text": "hard functions okay the second question is basically about having to remember lots of passwords and uh the the the the",
    "start": "2416280",
    "end": "2424359"
  },
  {
    "text": "uh the question is about why not use password managers of course course password managers themselves also get hacked so why shouldn't we just get rid",
    "start": "2424359",
    "end": "2430839"
  },
  {
    "text": "of passwords altogether I couldn't agree more couldn't agree more so um in fact I'm a very big supporter of uh second",
    "start": "2430839",
    "end": "2438079"
  },
  {
    "text": "Factor authentication um uh Google Authenticator is a fantastic tool if um",
    "start": "2438079",
    "end": "2443800"
  },
  {
    "text": "you're running a website you should all you should integrate Google Authenticator into your website um to",
    "start": "2443800",
    "end": "2449440"
  },
  {
    "text": "let people use it you should advertise it for your users uh and um there are",
    "start": "2449440",
    "end": "2454880"
  },
  {
    "text": "even better mechanisms now for uh second Factor authentication CH challeng response based if you're familiar with",
    "start": "2454880",
    "end": "2461400"
  },
  {
    "text": "companies like Duo they've made that even easier to use um and so definitely",
    "start": "2461400",
    "end": "2466599"
  },
  {
    "text": "uh I couldn't agree more and that's a a question that's right on target uh the next question is uh how much memory are",
    "start": "2466599",
    "end": "2472720"
  },
  {
    "text": "we talking about so generally for these space hard functions whether it's script argon or balloon essentially what we try",
    "start": "2472720",
    "end": "2480160"
  },
  {
    "text": "to do is fill up the L3 cache so we don't quite we don't go to main memory CU that actually would not let us uh",
    "start": "2480160",
    "end": "2486760"
  },
  {
    "text": "achieve the th000 hashes per second we're aiming for but the goal here is to fill up the L3 cache so when I talked",
    "start": "2486760",
    "end": "2492480"
  },
  {
    "text": "about I showed you the pseudo code the buffer and the pseudo code essentially would be as big as your L3 cache uh okay",
    "start": "2492480",
    "end": "2499160"
  },
  {
    "text": "let's see so my next question uh is about ccfi um uh yeah how would this impact",
    "start": "2499160",
    "end": "2507520"
  },
  {
    "text": "mobile devices you know the answer is you could so uh I guess on mobile devices you would be using uh they're",
    "start": "2507520",
    "end": "2513359"
  },
  {
    "text": "not using uh Intel processors so much those are more Arm based architectures so first of all arm has also given a",
    "start": "2513359",
    "end": "2519839"
  },
  {
    "text": "success of asni arm has also introduced asni into the into manyu of their of the",
    "start": "2519839",
    "end": "2526319"
  },
  {
    "text": "of the arm designs and so um it's exactly the same API as on the x86 and",
    "start": "2526319",
    "end": "2531800"
  },
  {
    "text": "so in principle pca5 could be used on mobile devices as well anyone any mobile device that supports asni and my point",
    "start": "2531800",
    "end": "2539319"
  },
  {
    "text": "was that the faster the hardware implementation of AES is the less",
    "start": "2539319",
    "end": "2544559"
  },
  {
    "text": "overhead that ccfi will take and really does provide quite a strong measure of",
    "start": "2544559",
    "end": "2549920"
  },
  {
    "text": "uh security against control control hijacking attacks and so in principle this could be used on mobile devices",
    "start": "2549920",
    "end": "2555760"
  },
  {
    "text": "again there's a performance penalty but there's also a a strong security benefit okay um the next question is about uh",
    "start": "2555760",
    "end": "2563160"
  },
  {
    "text": "ccfi on Sparks and it's basically the same answer I just gave essentially whenever a and I is available whenever",
    "start": "2563160",
    "end": "2570000"
  },
  {
    "text": "you have AES in Hardware you can actually use it without too much um uh too much penalty the performance penalty",
    "start": "2570000",
    "end": "2577480"
  },
  {
    "text": "okay the next question is about Ring two if I if the attacker gets control of ring two on the computer yes absolutely",
    "start": "2577480",
    "end": "2583280"
  },
  {
    "text": "then all bets are off so with ring two you can do you can extract a secret key",
    "start": "2583280",
    "end": "2588319"
  },
  {
    "text": "and then you would defeat this this attack um uh well so the threat model",
    "start": "2588319",
    "end": "2593880"
  },
  {
    "text": "that this is trying to defend against is a model where the attacker uh has control has access read write access to",
    "start": "2593880",
    "end": "2600800"
  },
  {
    "text": "memory if the attacker has even more power then absolutely there's uh that's a much much much harder adversary to",
    "start": "2600800",
    "end": "2607960"
  },
  {
    "text": "defend against then you would have to go to um to virtualization and and other based approaches uh okay so that's",
    "start": "2607960",
    "end": "2614559"
  },
  {
    "text": "basically ccfi is defend designed to defend against memory corruption attacks not so much against uh ring two based",
    "start": "2614559",
    "end": "2620720"
  },
  {
    "text": "attacks uh can a hacker readed write xmm xmm registers yeah so if a hacker is",
    "start": "2620720",
    "end": "2626359"
  },
  {
    "text": "basically using memory corruption to uh to mount his attacks then he can't um he",
    "start": "2626359",
    "end": "2631480"
  },
  {
    "text": "can't have access to xmn registers if it's a more powerful attacker like the previous question then absolutely all",
    "start": "2631480",
    "end": "2637160"
  },
  {
    "text": "bets are off there's no Perfect Defense uh we were trying we were basically control SL Integrity generally is trying",
    "start": "2637160",
    "end": "2643720"
  },
  {
    "text": "to uh prevent memory corruption attacks and we basically we're trying to we our",
    "start": "2643720",
    "end": "2648839"
  },
  {
    "text": "our mechanism is uh uh essentially using this uh cryptographic mechanism to",
    "start": "2648839",
    "end": "2654079"
  },
  {
    "text": "prevent memory corruption okay uh let's see um oh are there programming languages",
    "start": "2654079",
    "end": "2661200"
  },
  {
    "text": "construct compilers that support generation of a instruction sets well uh compilers actually don't quite use them",
    "start": "2661200",
    "end": "2667400"
  },
  {
    "text": "today typically when you want to use asni you would just inject some assembly code into your into your higher level",
    "start": "2667400",
    "end": "2673280"
  },
  {
    "text": "programming language and you would compile that in uh so for example when you uh when you use op SSL for crypto op",
    "start": "2673280",
    "end": "2680520"
  },
  {
    "text": "SSL actually uh is when it's on running on the appropriate Hardware it will actually use asni and so automatically",
    "start": "2680520",
    "end": "2687680"
  },
  {
    "text": "by using op SSL you're getting the benefits of of asni but yeah typically you do have to access it using assembly",
    "start": "2687680",
    "end": "2695200"
  },
  {
    "text": "is the cc5 project going to be open s absolutely so it's implemented as um uh",
    "start": "2695200",
    "end": "2700800"
  },
  {
    "text": "into lovm right now uh yeah we'll make obviously this is academic code so you",
    "start": "2700800",
    "end": "2706119"
  },
  {
    "text": "know use it to your own risk um but absolutely if you're interested in uh in studying this or using it or developing",
    "start": "2706119",
    "end": "2712640"
  },
  {
    "text": "more um on ccfi we we definitely U make will make this open source um let's see",
    "start": "2712640",
    "end": "2720119"
  },
  {
    "text": "on the balloon scheme where did the number 20 come came from that is an excellent excellent question I'm really",
    "start": "2720119",
    "end": "2725800"
  },
  {
    "text": "happy to hear someone asked this so why do we if you look back to how um we we",
    "start": "2725800",
    "end": "2731680"
  },
  {
    "text": "did the hashing we said that essentially as you do your linear sweep through the buffer you basically hash 20 elements in",
    "start": "2731680",
    "end": "2737960"
  },
  {
    "text": "the buffer into the current element that you're looking at so why 20 it turns out",
    "start": "2737960",
    "end": "2743359"
  },
  {
    "text": "uh the number 20 comes from the security proof yeah so this is the nice thing about doing security proofs and that they guide you into how to design the",
    "start": "2743359",
    "end": "2749920"
  },
  {
    "text": "hash function so if we if we do include uh if we do do the hashing on 20",
    "start": "2749920",
    "end": "2755520"
  },
  {
    "text": "elements that allows us to prove that if you evaluate the hash function with less than quarter of the space that we",
    "start": "2755520",
    "end": "2762119"
  },
  {
    "text": "require the running time would actually blow up exponentially okay so and by the way since you asked uh about the",
    "start": "2762119",
    "end": "2768599"
  },
  {
    "text": "technicalities I'll tell you that when I say exponentially I mean exponentially in the number of rounds that the hash",
    "start": "2768599",
    "end": "2775040"
  },
  {
    "text": "function is is uh using so remember I told you that there's a timing parameter how many rounds the hash function runs",
    "start": "2775040",
    "end": "2781040"
  },
  {
    "text": "for so for example if you run it for 10 or 20 rounds let's say you run it for 20 rounds then if you try to at the hash",
    "start": "2781040",
    "end": "2787480"
  },
  {
    "text": "function with a quarter of the space that's required then necessarily the running time would grow the total running time uh not the parallel running",
    "start": "2787480",
    "end": "2794240"
  },
  {
    "text": "time the total running time would grow by a factor of a million okay so that's where the number 20 comes from basically",
    "start": "2794240",
    "end": "2799680"
  },
  {
    "text": "it's needed for the proof um uh right so you asked about sh 66 in",
    "start": "2799680",
    "end": "2807200"
  },
  {
    "text": "fact so in balloon hashing should be used sh 66 or a different hash function so our point was that balloon that one",
    "start": "2807200",
    "end": "2813640"
  },
  {
    "text": "of the nice features of balloon is it's built from sort of stand IED components and shot 56 was a reason was a very",
    "start": "2813640",
    "end": "2820640"
  },
  {
    "text": "common component to use in fact uh the most of most of our running times we for most of our running times we actually",
    "start": "2820640",
    "end": "2826000"
  },
  {
    "text": "use shot 3 which is kind of the uh a recent uh variation you know a recent",
    "start": "2826000",
    "end": "2832359"
  },
  {
    "text": "proposal for n for a hash function the reason sha 3 was better suited for us is because it has a larger block size than",
    "start": "2832359",
    "end": "2838559"
  },
  {
    "text": "sha 356 and that actually improves performance so um yeah but essentially you can use any standardized hash",
    "start": "2838559",
    "end": "2844800"
  },
  {
    "text": "function you want if you want uh the fastest possible performance then uh you",
    "start": "2844800",
    "end": "2849839"
  },
  {
    "text": "would use a hash function with a large block Cipher so just use any of the standardized ones we just happen to use",
    "start": "2849839",
    "end": "2855760"
  },
  {
    "text": "uh shot 3 for for for running times uh let's see any research on crypto Biometrics or related crypto",
    "start": "2855760",
    "end": "2863000"
  },
  {
    "text": "authentication absolutely there's a lot of research on using Biometrics for authentication in the crypto sense um",
    "start": "2863000",
    "end": "2870040"
  },
  {
    "text": "the question is how do you do hashing when the credential is a biometric right",
    "start": "2870040",
    "end": "2875160"
  },
  {
    "text": "so if I have my if the metric is a fingerprint the credential is a fingerprint uh well when I read it",
    "start": "2875160",
    "end": "2881680"
  },
  {
    "text": "initially I get one version of the fingerprint when I read it uh later on I get a different version of the",
    "start": "2881680",
    "end": "2886839"
  },
  {
    "text": "fingerprint that might be a little bit different uh and the question is how do we compare the two traditionally when",
    "start": "2886839",
    "end": "2892240"
  },
  {
    "text": "you do biometric you kind of extract extract what's called a sketch from the fingerprint and then you compare the",
    "start": "2892240",
    "end": "2898160"
  },
  {
    "text": "scetch the sketch that was registered from the sketch that was that was read at a later time the sketches don't have",
    "start": "2898160",
    "end": "2904119"
  },
  {
    "text": "to fit perfectly they just have to be close to one another so the question is um if we do hashing how do we do the",
    "start": "2904119",
    "end": "2911000"
  },
  {
    "text": "comparison if the sketches only need to be close but don't have to be perfectly equal and the answer is there's actually",
    "start": "2911000",
    "end": "2916960"
  },
  {
    "text": "something called fuzzy hashing which actually is relevant for Biometrics um again so if you're interested in that",
    "start": "2916960",
    "end": "2922640"
  },
  {
    "text": "just Google fuzzy hashing and you'll see a whole bunch of papers on how to do hashing for the purpose of uh",
    "start": "2922640",
    "end": "2929079"
  },
  {
    "text": "Biometrics okay so that's going to wrap up our live session uh on behalf of the",
    "start": "2929079",
    "end": "2934240"
  },
  {
    "text": "Stanford center for professional development I'd like to thank thank you for joining us for our webinar on uh",
    "start": "2934240",
    "end": "2939640"
  },
  {
    "text": "hashack code emerging Trends and cyber security there are still a number of questions in the queue which we will go",
    "start": "2939640",
    "end": "2945640"
  },
  {
    "text": "ahead and respond to offline so thank you again for joining us and have a great",
    "start": "2945640",
    "end": "2952280"
  },
  {
    "text": "day",
    "start": "2960200",
    "end": "2963200"
  }
]