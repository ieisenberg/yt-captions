[
  {
    "text": "So today we'll be finishing up some of the things that we didn't have time to cover last time on optimization based meta learning,",
    "start": "5330",
    "end": "11155"
  },
  {
    "text": "and then we'll also be covering non-parametric approaches to few shot learning. Uh, before you get started with the technical content, a few, uh, reminders.",
    "start": "11155",
    "end": "18840"
  },
  {
    "text": "So Homework 1 is due on Wednesday and Homework 2 is coming out this Wednesday. Homework 2 will include both uh,",
    "start": "18840",
    "end": "24660"
  },
  {
    "text": "you'll both implement MAML uh, as we uh, as we covered last week. And you'll also be implementing prototypical networks,",
    "start": "24660",
    "end": "30840"
  },
  {
    "text": "which is a uh, non-parametric approach to few-shot learning. We'll talk about it today.",
    "start": "30840",
    "end": "36315"
  },
  {
    "text": "Um, posted uh, a form for you to fill out on the poster preferences.",
    "start": "36315",
    "end": "41989"
  },
  {
    "text": "Uh, this is preferences for the date of the poster session. Please fill this out. I think that last time we checked only like five people had filled it out.",
    "start": "41990",
    "end": "49040"
  },
  {
    "text": "Uh, we're trying to schedule a venue for the poster session now and the- we have a better venue that's booked for Tuesday the 3rd but we wanna make",
    "start": "49040",
    "end": "55879"
  },
  {
    "text": "sure that people are- are available that day, um, being it's not during the normal course session time.",
    "start": "55880",
    "end": "61625"
  },
  {
    "text": "So please fill out that form. Um, we also posted details on the course project and instructions uh,",
    "start": "61625",
    "end": "68330"
  },
  {
    "text": "including instructions for the proposal, the milestone and the final uh, project and poster session.",
    "start": "68330",
    "end": "74240"
  },
  {
    "text": "Uh, so please take a look at that. We also posted some suggestions that were from the broader AI community on Piazza uh,",
    "start": "74240",
    "end": "81110"
  },
  {
    "text": "and the proposal which is the first part of the project is due on Monday October 28th,",
    "start": "81110",
    "end": "86390"
  },
  {
    "text": "but we encourage you to get started early and find uh, to either figure out what you wanna do before that alone or to find a group to work with.",
    "start": "86390",
    "end": "94595"
  },
  {
    "text": "Okay, um, so the plan for today, uh, first we'll cover Optimization-Based Meta-Learning, basically recap",
    "start": "94595",
    "end": "101359"
  },
  {
    "text": "what we covered last week very briefly and then discuss some more advanced topics. Uh, then we'll cover non-parametric few shot learning.",
    "start": "101360",
    "end": "108380"
  },
  {
    "text": "Uh, this will probably be the bulk of the lecture um, and this will include things like Siamese networks,",
    "start": "108380",
    "end": "114259"
  },
  {
    "text": "matching networks and prototypical networks as well as some other hybrid approaches. Uh, And then lastly we'll be",
    "start": "114260",
    "end": "119570"
  },
  {
    "text": "covering properties of meta-learning algorithms and basically how we can think about comparing the classes of approaches that we've seen so far uh,",
    "start": "119570",
    "end": "127235"
  },
  {
    "text": "and the types of things that we might want when developing new meta-learning algorithms. Okay. So that's kind of a- a summary of what we'll go over today.",
    "start": "127235",
    "end": "135920"
  },
  {
    "text": "Uh, so first let's recap from last time. So we talked about how fine tuning is a very effective way for uh,",
    "start": "135920",
    "end": "142400"
  },
  {
    "text": "leveraging information from previous data sets. Uh, by pre-training the parameters on those data sets and then fine tuning by running",
    "start": "142400",
    "end": "149810"
  },
  {
    "text": "gradient descent or- or your favorite optimizer to reuse those features that were learned. Uh, for learning on your new data set.",
    "start": "149810",
    "end": "156650"
  },
  {
    "text": "Uh, and then we talked about well, uh, can we think about how we might go about the pre-training process in a principled way.",
    "start": "156650",
    "end": "163090"
  },
  {
    "text": "Especially if we want to be able to fine tune with very small amounts of data at test time. Uh, and then we talked about one way to do that.",
    "start": "163090",
    "end": "169900"
  },
  {
    "text": "So one way to do that is basically by trying to embed this fine tuning procedure into uh, the meta-learning process by taking this fine tuning procedure evaluating how",
    "start": "169900",
    "end": "178360"
  },
  {
    "text": "well the resulting fine tune parameters do well on held-out data uh, then simply optimizing this objective with respect to a set of",
    "start": "178360",
    "end": "186250"
  },
  {
    "text": "pre-trained parameters across a wide range of tasks. Okay. Um, so kind of, uh,",
    "start": "186250",
    "end": "192060"
  },
  {
    "text": "this was the- the model agnostic meta-learning algorithm that we discussed. Uh, and this optimizes for an effective initialization for fine tuning.",
    "start": "192060",
    "end": "198820"
  },
  {
    "text": "Uh, we also discussed how well this performs on extrapolated tasks and we found that it works uh,",
    "start": "198820",
    "end": "205700"
  },
  {
    "text": "quite well in comparison to the black-box adaptation approaches. Uh, and we also looked at the expressive power and showed that,",
    "start": "205700",
    "end": "212015"
  },
  {
    "text": "uh, the expressive power of these models, of these algorithms um, is quite substantial, if you have a deep enough neural network.",
    "start": "212015",
    "end": "221299"
  },
  {
    "text": "Um, and- and kinda requires a bit more, um, a bit more expressive power than architecture in comparison to black-box approaches.",
    "start": "221300",
    "end": "229220"
  },
  {
    "text": "Okay, Um, so now uh, I'd like to talk a bit about some other properties of",
    "start": "229220",
    "end": "235085"
  },
  {
    "text": "these kinds of algorithms and different ways that we could extend the algorithm uh, to address various challenges.",
    "start": "235085",
    "end": "241220"
  },
  {
    "text": "So uh, first, uh, one- one thing that we had talked about actually",
    "start": "241220",
    "end": "247100"
  },
  {
    "text": "towards the beginning is how you can view uh, meta-parameters Theta as serving as a prior for task-specific adaptation.",
    "start": "247100",
    "end": "255879"
  },
  {
    "text": "Where kinda this prior is encapsulating the um, is encapsulating the knowledge in your meta training data set.",
    "start": "255880",
    "end": "263185"
  },
  {
    "text": "So can we make this more formal? So it turns out we can actually uh, make a bit of a deeper connection than just saying that it's gonna form,",
    "start": "263185",
    "end": "269870"
  },
  {
    "text": "it's gonna kinda form as loose prior as an initialization for fine tuning. Uh, in particular to see this,",
    "start": "269870",
    "end": "275590"
  },
  {
    "text": "let's look at the following graphical model. Uh, so Theta is representing our- our meta parameters and phi I is denoting the task specific parameters.",
    "start": "275590",
    "end": "285310"
  },
  {
    "text": "Uh, the parameters for each task, and then the shaded circles representing the data points that we have for",
    "start": "285310",
    "end": "291710"
  },
  {
    "text": "each task and it's shaded because we could observe those during the meta training process. Uh, now, uh, if you think about how um,",
    "start": "291710",
    "end": "301200"
  },
  {
    "text": "how you might go about uh, doing inference in this graphical model, Uh, we assume that we have uh,",
    "start": "301200",
    "end": "306710"
  },
  {
    "text": "this data set that we want ma- maximize the likelihood of our data set given our meta parameters.",
    "start": "306710",
    "end": "312565"
  },
  {
    "text": "Uh, this is essentially how you go about doing inference in this graphical model with respect to the meta learning parameters.",
    "start": "312565",
    "end": "320075"
  },
  {
    "text": "Okay. Um, and you can also write this out as kind of a sum of log likelihoods as well.",
    "start": "320075",
    "end": "325540"
  },
  {
    "text": "Uh, and then from there, we can introduce this second introduce our task specific parameters phi I.",
    "start": "325540",
    "end": "331220"
  },
  {
    "text": "Uh, these are gonna be integ- these are integrated out uh, because we- we're trying to optimize over our meta parameters Theta.",
    "start": "331220",
    "end": "337945"
  },
  {
    "text": "Uh, and so kind of we're just expanding this expression uh, for p- probability of the data given in the meta parameters into probability of",
    "start": "337945",
    "end": "346370"
  },
  {
    "text": "the data given the task specific parameters and the probability of the task specific parameters given Theta. Uh, second time is representing the prior that Theta",
    "start": "346370",
    "end": "354350"
  },
  {
    "text": "is enforcing or imposing on our task specific parameters. Um, this corresponds to uh,",
    "start": "354350",
    "end": "360650"
  },
  {
    "text": "Empirical Bayes uh, approaches to- for like, optimize this entire Bayesian model.",
    "start": "360650",
    "end": "366230"
  },
  {
    "text": "Um, so now from here uh, this- this integral over all possible task specific parameters is- is intractable,",
    "start": "366230",
    "end": "373460"
  },
  {
    "text": "particularly when we have large numbers of parameters, right? So you don't really have a good way to think about performing this optimization in any exact way.",
    "start": "373460",
    "end": "381480"
  },
  {
    "text": "Uh, what we can do is we can say well let's fairly crudely approximate this integral with um,",
    "start": "381480",
    "end": "388009"
  },
  {
    "text": "a point estimate for phi I which is going to represent the maximum a posteriori estimate of those parameters.",
    "start": "388010",
    "end": "395660"
  },
  {
    "text": "Um, this is a- of course a crude approximation but it is something that will at least uh- the MAP estimate is a better choice uh,",
    "start": "395660",
    "end": "404750"
  },
  {
    "text": "for these parameters and other choices because it has the maximal probability of course. Uh, now the question comes in well- okay,",
    "start": "404750",
    "end": "411509"
  },
  {
    "text": "if we're gonna make this approximation to try to uh, to represent our objective at the top. How do we compute the MAP estimate?",
    "start": "411510",
    "end": "419190"
  },
  {
    "text": "Uh, well it turns out that uh, under specific conditions, gradient descent with early stopping, uh,",
    "start": "419840",
    "end": "426950"
  },
  {
    "text": "corresponds to MAP inference with under a Gaussian prior with mean at the initial parameters and a variance that is uh,",
    "start": "426950",
    "end": "434729"
  },
  {
    "text": "determined by the number of gradient steps and the step size. Uh, this is exact in linear case and approximate in the nonlinear case.",
    "start": "434730",
    "end": "443960"
  },
  {
    "text": "And so what this means is that if we're doing uh, kind of getting the MAP estimate by running gradient descent with early",
    "start": "443960",
    "end": "450020"
  },
  {
    "text": "stopping that corresponds to the inner loop of the MAML objective. Uh, and you can then loosely view MAMLs",
    "start": "450020",
    "end": "456919"
  },
  {
    "text": "approximating hierarchical Bayesian inference in this graphical model. Of course this involves several approximations.",
    "start": "456920",
    "end": "464405"
  },
  {
    "text": "One approximation that is using the map estimate and another approximation which is thinking about gradient descent with early stopping as",
    "start": "464405",
    "end": "470240"
  },
  {
    "text": "map inference in the nonlinear case with neural networks. Uh, but I think that this kind of interpretation is helpful for",
    "start": "470240",
    "end": "476585"
  },
  {
    "text": "getting some intuition for what these kinds of approaches are doing. Yeah. What is the stopping [inaudible].",
    "start": "476585",
    "end": "483750"
  },
  {
    "text": "For- for early stopping? So in the case of MAML we just pick a- a certain number of gradient steps.",
    "start": "483750",
    "end": "489770"
  },
  {
    "text": "We pick one gradient step or five gradient steps. Um, and the particular- the variance of this Gaussian prior,",
    "start": "489770",
    "end": "496100"
  },
  {
    "text": "is determined by the number of gradient steps that you use and the step size that you use for those gradient steps.",
    "start": "496100",
    "end": "501230"
  },
  {
    "text": "So I guess unlike typical neural network training, we're just kind of picking uh, picking the number of gradients steps rather than choosing",
    "start": "501230",
    "end": "507470"
  },
  {
    "text": "a stopping criterion based of a validation error for example.",
    "start": "507470",
    "end": "511350"
  },
  {
    "text": "So you can essentially view, like, the initialization of these parameters as serving as an actual explicit prior in a Bayesian model.",
    "start": "514080",
    "end": "522500"
  },
  {
    "text": "Okay, so you can view this form of initialization",
    "start": "522990",
    "end": "529209"
  },
  {
    "text": "with a few gradient steps as one form of implicit prior on the task specific parameters.",
    "start": "529210",
    "end": "534625"
  },
  {
    "text": "And there are other ways to think about priors that we could impose on the optimization process.",
    "start": "534625",
    "end": "540189"
  },
  {
    "text": "So for example, one thing we could do is instead of having this implicit prior that's imposed by only doing a few- small number gradient steps,",
    "start": "540190",
    "end": "547345"
  },
  {
    "text": "we could have a explicit Gaussian prior where we are actually regularizing the inner optimization to be close to our meta parameters theta.",
    "start": "547345",
    "end": "558430"
  },
  {
    "text": "And so this would correspond to an explicit Gaussian prior, with mean theta and a variance that is a function of lambda.",
    "start": "558430",
    "end": "568280"
  },
  {
    "text": "So this is basically the form of, uh, like, the log-likelihood of the Gaussian.",
    "start": "568890",
    "end": "574550"
  },
  {
    "text": "Um, another form of prior that we could do is we can be even more- even more explicit and actually trying to represent, um,",
    "start": "574650",
    "end": "584050"
  },
  {
    "text": "do basically for a Bayesian linear regression on top of learn features and represent, um,",
    "start": "584050",
    "end": "589209"
  },
  {
    "text": "the mean and variance of that, uh, represent the mean and variance of, of that Bayesian linear regression as meta parameters themselves.",
    "start": "589210",
    "end": "597670"
  },
  {
    "text": "Um, so these are kind of two forms of, of, uh, of gradient-based meta learning algorithms that have",
    "start": "597670",
    "end": "603355"
  },
  {
    "text": "tried to place explicit priors on it. Another, uh, class of methods have looked at, uh,",
    "start": "603355",
    "end": "609130"
  },
  {
    "text": "just having the prior be imposed based off of the feature space in which you're learning on.",
    "start": "609130",
    "end": "614589"
  },
  {
    "text": "So kind of similar to this last approach, where they're doing Bayesian linear regression on the last layer. There are also a number of approaches that have done",
    "start": "614590",
    "end": "621160"
  },
  {
    "text": "an optimization on top of learned features, such as performing ridge regression or logistic regression on top of learned features in the inner loop.",
    "start": "621160",
    "end": "628930"
  },
  {
    "text": "Uh, as well as a support vector machine, uh, on those learned features.",
    "start": "628930",
    "end": "634945"
  },
  {
    "text": "Um, so essentially these different- these correspond to different inner loops of the meta optimization algorithm.",
    "start": "634945",
    "end": "641245"
  },
  {
    "text": "And then the meta-training process involves differentiating through these inner loops by either treating them as a close form optimization,",
    "start": "641245",
    "end": "647964"
  },
  {
    "text": "as a convex optimization problem that you can differentiate through, um, or other optimizations.",
    "start": "647965",
    "end": "654200"
  },
  {
    "text": "Okay. Um, in this last approach, uh, this may be out of date now,",
    "start": "654410",
    "end": "661149"
  },
  {
    "text": "but as of a few months ago it was the state of the art on few-shot image classification benchmarks.",
    "start": "661150",
    "end": "666730"
  },
  {
    "text": "Although, to do that they introduced a number of bells and whistles in order to get it to kind of reach that.",
    "start": "666730",
    "end": "672100"
  },
  {
    "text": "It wasn't just the, the, the approach itself. In many ways those, those bells and whistles are often important for getting,",
    "start": "672100",
    "end": "678325"
  },
  {
    "text": "um, getting state of the art performance on, on benchmarks. Okay, cool.",
    "start": "678325",
    "end": "686650"
  },
  {
    "text": "So now let's go over a few of the challenges that come up with these types of approaches.",
    "start": "686650",
    "end": "691720"
  },
  {
    "text": "So, uh, one challenge is that we, we just talked about how MAML you may need much deeper networks in order to be",
    "start": "691720",
    "end": "698440"
  },
  {
    "text": "able to effectively get an expressive gradient update, that can represent a number of different update rules to your parameters.",
    "start": "698440",
    "end": "706915"
  },
  {
    "text": "And so how do we think about choosing the architecture for- that is effective for MAML-like algorithms?",
    "start": "706915",
    "end": "712824"
  },
  {
    "text": "And so one idea for this is there is a paper that looked at-can we do neural architecture search on the MAML architecture such that meta learning works well?",
    "start": "712824",
    "end": "722230"
  },
  {
    "text": "They called this auto-meta in the sense that you're doing both Auto ML and meta-learning. And one of the things that was interesting about this paper is that they found that",
    "start": "722230",
    "end": "729625"
  },
  {
    "text": "highly non-standard architectures were actually effective for MAML, um, in contrast to their effectiveness for,",
    "start": "729625",
    "end": "736570"
  },
  {
    "text": "um, for kind of standard supervised learning problems. So for example they found that deep and narrow architectures tend to work well.",
    "start": "736570",
    "end": "742345"
  },
  {
    "text": "Um, and these were kind of different from the architectures that work well in standard supervised learning. Uh, and so for example,",
    "start": "742345",
    "end": "748615"
  },
  {
    "text": "if you take MiniImagenet with the basic architecture, uh, that reaches around 63% performance, uh,",
    "start": "748615",
    "end": "754959"
  },
  {
    "text": "MAML with this kind of optimized architecture saw an 11% absolute improvement in performance which is pretty substantial. Yeah.",
    "start": "754960",
    "end": "763779"
  },
  {
    "text": "[inaudible]. Like specifically what the changes were?",
    "start": "763780",
    "end": "770230"
  },
  {
    "text": "Um, it involved-it was a fairly complex architecture as many of these architectural search things give you.",
    "start": "770230",
    "end": "777190"
  },
  {
    "text": "It was much deeper, maybe like two or three orders of magnitude deeper, and from what I remember it was also narrower.",
    "start": "777190",
    "end": "785620"
  },
  {
    "text": "They also had some operations that were a bit nonstandard in Neural Networks. Something like one-by-one convolutions or something like that,",
    "start": "785620",
    "end": "793000"
  },
  {
    "text": "but it's been a while since I read the paper. Okay, so another challenge that comes up is that you have",
    "start": "793000",
    "end": "802090"
  },
  {
    "text": "this bi-level optimization procedure that we need to perform in order for meta-learning. And this can exhibit some instabilities,",
    "start": "802090",
    "end": "809350"
  },
  {
    "text": "particularly if you don't have as much expressive power that you'd like in your current architecture.",
    "start": "809350",
    "end": "815800"
  },
  {
    "text": "And there have been a few different ideas for trying to mitigate this. So, um, one approach was to try to automatically learn",
    "start": "815800",
    "end": "823375"
  },
  {
    "text": "the inner learning rate of the, um, the algorithm. Basically learn that alpha parameter that was in those equations.",
    "start": "823375",
    "end": "831535"
  },
  {
    "text": "And specifically one of the things that these papers have found to work-to be particularly important here is to learn",
    "start": "831535",
    "end": "836755"
  },
  {
    "text": "in a learning rate that course that is different for each parameter or different for each-for each layer of the network.",
    "start": "836755",
    "end": "843190"
  },
  {
    "text": "And this is because things like biases and weights may want to have different learning rates. Biases may want to have larger learning rates, weights might-they want to have smaller learning rates,",
    "start": "843190",
    "end": "850150"
  },
  {
    "text": "and you want them to-be able to decouple from those different choices for the different layers such that they don't have the sort of conflicting optimization.",
    "start": "850150",
    "end": "859460"
  },
  {
    "text": "Um, and then there's also the approach that tried to tune the outer learning rate as well. There are approaches that try to authorize",
    "start": "859530",
    "end": "866740"
  },
  {
    "text": "only a subset of the parameters in the inner loop, subsets like some of the parameters that are, like, affine transformations on each of the layers.",
    "start": "866740",
    "end": "874390"
  },
  {
    "text": "There are papers that have looked at decoupling the inner learning rate kind of as I mentioned before, as well as the batch storm statistics per gradient step,",
    "start": "874390",
    "end": "882730"
  },
  {
    "text": "since that you have a different learning rate for each gradient step, or a different learning rate or a different set of batch storm statistics for each gradient step as well.",
    "start": "882730",
    "end": "890140"
  },
  {
    "text": "And then lastly, there are also some papers that have introduced context variables for increased expressive power that basically introduce variables that- additional, um,",
    "start": "890140",
    "end": "899019"
  },
  {
    "text": "variables into the neural network that are appended onto the activations at each layer, and allow the gradient steps to store information in those parameters, uh,",
    "start": "899020",
    "end": "908020"
  },
  {
    "text": "in a way that doesn't interfere with the other parts of the network computation.",
    "start": "908020",
    "end": "913450"
  },
  {
    "text": "Um, so for me the kind of the main takeaway-for me these papers that I think would be helpful for",
    "start": "913450",
    "end": "918730"
  },
  {
    "text": "you is that there's a range of simple tricks that can help the meta optimization process significantly.",
    "start": "918730",
    "end": "924400"
  },
  {
    "text": "Are there any questions on these challenges before I move on to the next set?",
    "start": "924400",
    "end": "929540"
  },
  {
    "text": "Okay. So one more challenge that I'd like to go into a bit more depth on is",
    "start": "933630",
    "end": "939670"
  },
  {
    "text": "that backpropagating through many integrating steps is going to be very compute intensive and very memory intensive.",
    "start": "939670",
    "end": "945400"
  },
  {
    "text": "So if you, uh if you have one inner gradient step or a few inner gradient steps it's generally quite practical to think about how you",
    "start": "945400",
    "end": "952750"
  },
  {
    "text": "might backpropagate through only a couple of those. But if you have an extended optimization process in the inner loop,",
    "start": "952750",
    "end": "959005"
  },
  {
    "text": "then it's very challenging to think about, how you'd actually backpropagate through that in a way that doesn't require storing the entire optimization process in memory.",
    "start": "959005",
    "end": "966745"
  },
  {
    "text": "And doesn't require backpropagating. Ideally doesn't require backpropagating across-through that entire- that optimization process.",
    "start": "966745",
    "end": "973570"
  },
  {
    "text": "Um, so there are two approaches that have been kind of proposed for dealing with this.",
    "start": "973570",
    "end": "981025"
  },
  {
    "text": "Uh, the first is a very crude approach for dealing with it, which is just approximate the Jacobian of the task specific parameters phi i,",
    "start": "981025",
    "end": "992949"
  },
  {
    "text": "with respect to the meta parameters theta, as the identity. This is a very crude approximation that basically corresponds to, uh,",
    "start": "992950",
    "end": "1001380"
  },
  {
    "text": "a kind of truncated backpropagation in some regard where you just take the gradient at, there's lots of parameters and copy it over to theta.",
    "start": "1001380",
    "end": "1009180"
  },
  {
    "text": "Um, somewhat surprisingly, this actually works pretty well, on a number of simple few-shot learning problems like",
    "start": "1009180",
    "end": "1015150"
  },
  {
    "text": "MiniImagenet like Omniglot that we've discussed in this class, but anecdotally from what I've found it doesn't",
    "start": "1015150",
    "end": "1020820"
  },
  {
    "text": "work in more complex meta-learning problems, such as in meta-learning imitation problems. Um, but it's something that's- that's probably worth trying if you have,",
    "start": "1020820",
    "end": "1030255"
  },
  {
    "text": "uh, a setting where you, uh, are compute bound or memory bound. It's also, I think aesthetically not as pleasing because it's a bit of a hack in some regard.",
    "start": "1030255",
    "end": "1038909"
  },
  {
    "text": "Like we know that this matrix is not actually close to identity.",
    "start": "1038910",
    "end": "1043670"
  },
  {
    "text": "And then, so I guess one way to think about this is, can we try to compute the meta-gradient without differentiating through this optimization process",
    "start": "1044480",
    "end": "1051465"
  },
  {
    "text": "and in a way that doesn't approximate this optimization process as identity? Uh, and this is where I wanna go to the whiteboard to",
    "start": "1051465",
    "end": "1058650"
  },
  {
    "text": "kind of discuss how we might try to do this. So, um, as you remember I guess from last time,",
    "start": "1058650",
    "end": "1067965"
  },
  {
    "text": "if you write down the, um, the meta-gradient, you get a form that looks like a single backward pass at your,",
    "start": "1067965",
    "end": "1074490"
  },
  {
    "text": "er- at your task-specific parameters and then you have a term that basically is differentiating through the update rule.",
    "start": "1074490",
    "end": "1081510"
  },
  {
    "text": "So if you have, uh- you basically need to be able to compute d of u,",
    "start": "1081510",
    "end": "1087735"
  },
  {
    "text": "uh, of Theta with respect to your parameters Theta.",
    "start": "1087735",
    "end": "1094350"
  },
  {
    "text": "Um, and this requires storing all of the iterates of this update rule.",
    "start": "1094350",
    "end": "1099870"
  },
  {
    "text": "Ah, if you try to do it kind of with standard back propagation approaches, and so what we'd like to be able to do is compute",
    "start": "1099870",
    "end": "1105330"
  },
  {
    "text": "this derivative without differentiating through this- the, the entire optimization path that got you there.",
    "start": "1105330",
    "end": "1111510"
  },
  {
    "text": "Um, so the first thing that's worth noting, is we're gonna have to compute this update- this, this forward process of the update rule no matter what.",
    "start": "1111510",
    "end": "1117720"
  },
  {
    "text": "Um, so we're still gonna at least have one full forward pass through the update rule. Um, but there are things that we can do",
    "start": "1117720",
    "end": "1124080"
  },
  {
    "text": "to try to mitigate the meta-gradient optimization. Um, so to write- first let's,",
    "start": "1124080",
    "end": "1129615"
  },
  {
    "text": "um, kind of write down what this update rule looks like. Uh, and in particular we're gonna use the update rule that",
    "start": "1129615",
    "end": "1136080"
  },
  {
    "text": "corresponds- that has an explicit Gaussian prior on the, um- on the parameters.",
    "start": "1136080",
    "end": "1141540"
  },
  {
    "text": "And we'll see why this matters in a second. So let's say that, uh, Phi is equal to the output of our update procedure.",
    "start": "1141540",
    "end": "1150510"
  },
  {
    "text": "This update procedure, uh, takes as input a set of training data points.",
    "start": "1150510",
    "end": "1155865"
  },
  {
    "text": "Um, and let's say that this is equal to, uh,",
    "start": "1155865",
    "end": "1161100"
  },
  {
    "text": "the solution to some optimization problem",
    "start": "1161100",
    "end": "1166980"
  },
  {
    "text": "on the parameters with respect to our training data set,",
    "start": "1166980",
    "end": "1172875"
  },
  {
    "text": "uh, and then also with respect to explicit Gaussian regularization that",
    "start": "1172875",
    "end": "1181650"
  },
  {
    "text": "tries to keep our task parameters close to the parameters Theta.",
    "start": "1181650",
    "end": "1186885"
  },
  {
    "text": "So this is just a Gaussian regularization with mean Theta, uh, and variance that's a function of, um, Lambda.",
    "start": "1186885",
    "end": "1193290"
  },
  {
    "text": "Um, note here, in this case we're gonna be looking at an inner optimization that is actually to convergence,",
    "start": "1193290",
    "end": "1201315"
  },
  {
    "text": "as trying to actually take the full argument rather than just running one or a few steps of gradient descent. Um, and if we're going to be doing that then actually having",
    "start": "1201315",
    "end": "1208860"
  },
  {
    "text": "this regularization term is really important because, uh, if we ignore this term and just initialize it at Theta,",
    "start": "1208860",
    "end": "1215370"
  },
  {
    "text": "then it actually found the minimum of this function. Ah, that minimum wouldn't actually be a function of Theta,",
    "start": "1215370",
    "end": "1220830"
  },
  {
    "text": "and if is not a function of Theta, then we don't actually- we aren't actually imposing any prior on that inner optimization process.",
    "start": "1220830",
    "end": "1227700"
  },
  {
    "text": "And so this is what- that's what the role of this, um- what this regularization is doing. It's basically imposing this prior on the inner optimization.",
    "start": "1227700",
    "end": "1236970"
  },
  {
    "text": "All right, so let's refer to this function right here.",
    "start": "1236970",
    "end": "1242460"
  },
  {
    "text": "As G of Phi prime and Theta. Phi prime is- Phi prime is just our optimization variable.",
    "start": "1242460",
    "end": "1250335"
  },
  {
    "text": "Um, and if we actually find the arg min of this, um, of this function,",
    "start": "1250335",
    "end": "1257205"
  },
  {
    "text": "then we know that the gradient of G with respect to Phi prime is equal to 0,",
    "start": "1257205",
    "end": "1266640"
  },
  {
    "text": "uh, because we found kind of the local optimum, right? Uh, so what we can write- is we can write down that,",
    "start": "1266640",
    "end": "1273090"
  },
  {
    "text": "if this is equal to 0 then we know that the, um, gradient with respect to,",
    "start": "1273090",
    "end": "1280840"
  },
  {
    "text": "um- I'm sorry actually, this is evaluated at Phi prime equals Phi. So if we know this, then we know that the gradient of",
    "start": "1280970",
    "end": "1289005"
  },
  {
    "text": "the first loss term- I'm gonna start dropping the d train for, for notational convenience. We know that the gradient of the first term plus the gradient of the second term,",
    "start": "1289005",
    "end": "1298649"
  },
  {
    "text": "which is just Lambda times Phi minus Theta, is equal to 0.",
    "start": "1298650",
    "end": "1306885"
  },
  {
    "text": "So this is just plugging in, ah, the gradient of G. And then from there we can rearrange terms a bit.",
    "start": "1306885",
    "end": "1317340"
  },
  {
    "text": "So, uh, so let's bring Phi on the left-hand side of the equation,",
    "start": "1317340",
    "end": "1325845"
  },
  {
    "text": "and then we can write out that this is equal to, um, Theta minus 1 over Lambda times the gradient of Phi- L of Phi.",
    "start": "1325845",
    "end": "1339840"
  },
  {
    "text": "So here we're just rearranging terms from this bottom equation, or from this equation right here.",
    "start": "1339840",
    "end": "1345840"
  },
  {
    "text": "And then if we differentiate this with respect to Theta because we're trying to ultimately get d Phi d Theta up there,",
    "start": "1345840",
    "end": "1352470"
  },
  {
    "text": "we get that d Phi, d Theta is equal to the identity,",
    "start": "1352470",
    "end": "1359970"
  },
  {
    "text": "which is just the derivative of that, minus 1 over Lambda times the derivative of the outside, which is,",
    "start": "1359970",
    "end": "1369465"
  },
  {
    "text": "uh, the Hessian at Phi times the chain rule, d Phi d Theta.",
    "start": "1369465",
    "end": "1378820"
  },
  {
    "text": "Okay, and so interestingly what we could do here is, we can, uh, arrange the terms a little bit and try to solve for d Phi d Theta, uh,",
    "start": "1379460",
    "end": "1387465"
  },
  {
    "text": "and the result of that is going to be something that actually doesn't depend on the optimization path,",
    "start": "1387465",
    "end": "1394530"
  },
  {
    "text": "it only depends on the final point of that optimization. Uh, so in particular what we can do is, we could arrange,",
    "start": "1394530",
    "end": "1401325"
  },
  {
    "text": "um- try to put both- let's put i on one side on its own, and we get,",
    "start": "1401325",
    "end": "1407235"
  },
  {
    "text": "um- we move this over to the left, we get, uh, the identity minus 1 over Lambda L of phi,",
    "start": "1407235",
    "end": "1419235"
  },
  {
    "text": "all of this, times d Phi, d Theta equals the identity.",
    "start": "1419235",
    "end": "1424799"
  },
  {
    "text": "So this is just moving this term over to the right. And then what we get is that we get,",
    "start": "1424800",
    "end": "1430140"
  },
  {
    "text": "d Phi d Theta equals, basically the inverse of this term.",
    "start": "1430140",
    "end": "1438010"
  },
  {
    "text": "Okay. So one of the nice things about this is, well, this is exactly what we wanted to get,",
    "start": "1446180",
    "end": "1452445"
  },
  {
    "text": "and this only depends on the Hessian at the final optimization point.",
    "start": "1452445",
    "end": "1459240"
  },
  {
    "text": "And so that means that, this is actually something that we can compute without actually differentiating through that inner optimization process,",
    "start": "1459240",
    "end": "1466845"
  },
  {
    "text": "um, which is quite nice. Uh, and I guess the,",
    "start": "1466845",
    "end": "1474765"
  },
  {
    "text": "the assumptions that we made to get there is that the- that basically that this inner solve is accurate,",
    "start": "1474765",
    "end": "1480450"
  },
  {
    "text": "that it gets to a point where the gradient is 0. Um, and that we of course can compute this.",
    "start": "1480450",
    "end": "1486149"
  },
  {
    "text": "Uh, and there are ways that we can try to estimate this by, uh, using conjugate- the conjugate gradient algorithm,",
    "start": "1486150",
    "end": "1494070"
  },
  {
    "text": "which tries to estimate basically these Hessian vector products. Of course this is just, this is just, er, something that looks like a Hessian,",
    "start": "1494070",
    "end": "1499725"
  },
  {
    "text": "and then the, um, the actual gradient that we'll be performing is the gradient that we derived from last time that corresponds to the,",
    "start": "1499725",
    "end": "1507120"
  },
  {
    "text": "uh, the back-propagated vector at that optimization point times this term right here. Yeah.",
    "start": "1507120",
    "end": "1513600"
  },
  {
    "text": "[inaudible].",
    "start": "1513600",
    "end": "1519450"
  },
  {
    "text": "Yeah. So the- there are- kind of as I was mentioning, you can use conjugate gradient algorithms to try to estimate this inverted matrix term.",
    "start": "1519450",
    "end": "1527970"
  },
  {
    "text": "Um, and basically the number of iterations that you run of conjugate gradient, the more accurate your estimate of this term will be.",
    "start": "1527970",
    "end": "1535815"
  },
  {
    "text": "And at convergence it will be- uh, if you run kind of it for, for, uh, infinite number of iterations you'll get an exact estimate or you'll get,",
    "start": "1535815",
    "end": "1543390"
  },
  {
    "text": "uh- you'll approach an exact estimate of this. Um, if you do zero iterations of conjugate gradient, you actually just estimate this as the identity,",
    "start": "1543390",
    "end": "1549915"
  },
  {
    "text": "which is actually just exactly the, um- which is exactly the,",
    "start": "1549915",
    "end": "1555090"
  },
  {
    "text": "the kind of first-order MAML algorithm that's written up there.",
    "start": "1555090",
    "end": "1559179"
  },
  {
    "text": "Okay, so what does this give us?",
    "start": "1560300",
    "end": "1565380"
  },
  {
    "text": "Um, so this used what's called the implicit function theorem, um, which is a way to kind of think about how to differentiate functions implicitly, ah,",
    "start": "1565380",
    "end": "1574890"
  },
  {
    "text": "to get these, uh- to get kind of this form of the gradient. Ah, and so you",
    "start": "1574890",
    "end": "1583559"
  },
  {
    "text": "can look at this algorithm and one of the nice things that you get is that, uh, particularly it's very memory, uh,",
    "start": "1583560",
    "end": "1589289"
  },
  {
    "text": "efficient, so you don't have to store that optimization process, and then computationally, as you,",
    "start": "1589290",
    "end": "1594779"
  },
  {
    "text": "um, increased the number of conjugate gradients steps, it'll become more compute-intensive, um, and that allows you to basically trade off how accurate",
    "start": "1594780",
    "end": "1602640"
  },
  {
    "text": "you want the meta gradient to be with how much compute you want to spend. Uh, and so in particular, what these plots are showing,",
    "start": "1602640",
    "end": "1608820"
  },
  {
    "text": "the first is showing the GPU memory on, ah, a very simple, um- very simple meta learning algorithm.",
    "start": "1608820",
    "end": "1616100"
  },
  {
    "text": "And as we see the kind of if- if we changed the number of inner gradient steps, uh, both first-order MAML shown in purple and, uh,",
    "start": "1616100",
    "end": "1624125"
  },
  {
    "text": "implicit MAML as this algorithm is called, uh, showed in green, are constant in memory as you increase the number of gradient steps,",
    "start": "1624125",
    "end": "1631095"
  },
  {
    "text": "uh, because they don't actually do anything to store those, um- to store the optimization proce- procedure whereas the full MAML grad- uh,",
    "start": "1631095",
    "end": "1638865"
  },
  {
    "text": "MAML algorithm increases linearly in memory as you have to increase the number of inner gradient steps. Yeah.",
    "start": "1638865",
    "end": "1645540"
  },
  {
    "text": "Since we derive this using the [inaudible] , uh, does that implies that we want more inner gradient steps to get to the",
    "start": "1645540",
    "end": "1652395"
  },
  {
    "text": "more accurate, like so the gradient corresponds more accurately? Yeah, so In practice you would want more inner gradient steps,",
    "start": "1652395",
    "end": "1659400"
  },
  {
    "text": "or I guess in theory you'd want more inner gradient steps in order to, uh, try to have this- this be more accurate.",
    "start": "1659400",
    "end": "1665925"
  },
  {
    "text": "Uh, in practice, we found that the algorithm doesn't need, uh, well, you could still run the algorithm in practice with,",
    "start": "1665925",
    "end": "1672110"
  },
  {
    "text": "with- without that condition being true and getting, uh, gradients that are reasonably accurate.",
    "start": "1672110",
    "end": "1679500"
  },
  {
    "text": "Um, and then second plot is showing computation time. Uh, and so we can see that,",
    "start": "1679990",
    "end": "1685515"
  },
  {
    "text": "for different numbers of conjugate gradient steps shown in green, gray, and red, we see an increase in the amount of computation, um,",
    "start": "1685515",
    "end": "1693539"
  },
  {
    "text": "and then, uh, with MAML because you're computing- you're basically computing the,",
    "start": "1693540",
    "end": "1699015"
  },
  {
    "text": "the full gradient, uh, you don't have an effective way to trade off how much computation you want, uh, as a function of the accuracy of the meta-gradient.",
    "start": "1699015",
    "end": "1709060"
  },
  {
    "text": "Okay. So- and then I guess the other, uh, benefit of this approach is that it means that you can use",
    "start": "1709880",
    "end": "1715800"
  },
  {
    "text": "second-order optimizers in the inner loop, uh, you can use really, uh- you can also include like basically non-differentiable optimizers in the inner loop because this really just,",
    "start": "1715800",
    "end": "1724290"
  },
  {
    "text": "uh, depends on the, the final term and not actually the optimization process itself being differentiable. Uh, and so for example, we used a Hessian free optimization approach, um,",
    "start": "1724290",
    "end": "1733230"
  },
  {
    "text": "in combination with this algorithm and we're able to outperform methods that use,",
    "start": "1733230",
    "end": "1738270"
  },
  {
    "text": "um, just like gradient descent based, uh, inner optimizers.",
    "start": "1738270",
    "end": "1742660"
  },
  {
    "text": "Okay. Um, and then the last thing worth mentioning about this algorithm is that it's a very recent development,",
    "start": "1743930",
    "end": "1749430"
  },
  {
    "text": "and so all the, all the typical caveats with recent work apply. Not a lot of people have tried to, um,",
    "start": "1749430",
    "end": "1754800"
  },
  {
    "text": "kind of play around with this approach and fully, uh, test its, its, um, its capabilities and its limitations.",
    "start": "1754800",
    "end": "1761740"
  },
  {
    "text": "Okay. Any questions on this before moving on?",
    "start": "1762320",
    "end": "1767710"
  },
  {
    "text": "Okay. So I guess the takeaway for optimization-based methods is that,",
    "start": "1770330",
    "end": "1777299"
  },
  {
    "text": "uh, you do them by, by constructing a bi-level optimization procedure. Where the inner optimization is something like gradient descent,",
    "start": "1777300",
    "end": "1783990"
  },
  {
    "text": "like SVMs, uh, like Hessian free optimization procedures, uh, and then differentiate or- or either differentiate through",
    "start": "1783990",
    "end": "1791490"
  },
  {
    "text": "the optimization procedure or do something like we did here in order to compute the meta-gradients.",
    "start": "1791490",
    "end": "1796530"
  },
  {
    "text": "Um, the benefits of this type of approach is that you get a positive inductive bias at the start of meta-learning,",
    "start": "1796530",
    "end": "1802395"
  },
  {
    "text": "because you're already had this optimization procedure in the loop, and you can already expect it to do something reasonable at initialization time.",
    "start": "1802395",
    "end": "1809235"
  },
  {
    "text": "Uh, in contrast a black box approach is where the initial optimization procedure is just some neural network.",
    "start": "1809235",
    "end": "1817050"
  },
  {
    "text": "Another takeaway or a kind of positive note about, uh, these proc- these procedures is that they're consistent,",
    "start": "1817240",
    "end": "1823769"
  },
  {
    "text": "uh, and that they- the procedure that you run at test-time corresponds to an actual optimization method.",
    "start": "1823769",
    "end": "1830085"
  },
  {
    "text": "And as a result it tends to extrapolate better to, learning problems that are outside of the distribution of what you've seen during meta-training.",
    "start": "1830085",
    "end": "1838035"
  },
  {
    "text": "And we'll get back to this point a little bit more at the very end of the lecture. Uh, and they're also maximally expressive if you have a,",
    "start": "1838035",
    "end": "1846345"
  },
  {
    "text": "uh, a very deep neural network. Oh, and last thing is, uh, it's model-agnostic so it's pretty easy to combine with different model architectures.",
    "start": "1846345",
    "end": "1854340"
  },
  {
    "text": "Now, in terms of limitations, it requires typically a second-order optimization, um,",
    "start": "1854340",
    "end": "1859890"
  },
  {
    "text": "either by differentiating through that, that optimization, or by doing something like this where you still have second-order terms that pop up.",
    "start": "1859890",
    "end": "1866880"
  },
  {
    "text": "And as a result, it's usually pretty compute or memory-intensive.",
    "start": "1866880",
    "end": "1872500"
  },
  {
    "text": "Okay. So [NOISE] now that we've talked about kind of embedding gradient-based optimization procedures into the inner loop,",
    "start": "1872900",
    "end": "1881880"
  },
  {
    "text": "one question you might ask is, \"Can we embed some other learning procedures into the meta-learning process,",
    "start": "1881880",
    "end": "1888895"
  },
  {
    "text": "without requiring a second-order optimization?\". This is kind of where non-parametric methods are going to fit in.",
    "start": "1888895",
    "end": "1895820"
  },
  {
    "text": "Er, so in particular what we've been thinking about is how we can learn parametric models. And there's this whole other class of machine learning methods, uh,",
    "start": "1895820",
    "end": "1904410"
  },
  {
    "text": "non-parametric methods namely, uh, that are simple and work very well in low data regimes.",
    "start": "1904410",
    "end": "1910935"
  },
  {
    "text": "Um, these are things like, uh, nearest neighbors for example. If you have a small amount of data these methods are actually quite effective, um, at learning.",
    "start": "1910935",
    "end": "1919035"
  },
  {
    "text": "And during meta-test time, few-shot learning is exactly precisely in low data regime.",
    "start": "1919035",
    "end": "1925620"
  },
  {
    "text": "And so these non-parametric methods are likely to perform pretty well. Er, but of course during meta-training we still want to be",
    "start": "1925620",
    "end": "1932520"
  },
  {
    "text": "parametric because we want to be able to scale to large datasets. [NOISE] And so the kinda key idea of these types of approaches is can",
    "start": "1932520",
    "end": "1941880"
  },
  {
    "text": "we use parametric meta learners to produce effective non-parametric learners.",
    "start": "1941880",
    "end": "1948460"
  },
  {
    "text": "Um, great, so and I guess one other kind of side note here is that a lot of these non-parametric methods,",
    "start": "1948800",
    "end": "1955830"
  },
  {
    "text": "um, preceded some of the parametric approaches that I've been talking about, but for the sake of this kind of lecture we'll be presenting them afterwards.",
    "start": "1955830",
    "end": "1963255"
  },
  {
    "text": "Okay. Um, so the key idea here is to use some sort of non-parametric learner.",
    "start": "1963255",
    "end": "1968925"
  },
  {
    "text": "Um, and one kind of non-parametric learner is to think about doing nearest neighbors. So if you want to be able to perform this few-shot learning problem,",
    "start": "1968925",
    "end": "1976215"
  },
  {
    "text": "one very natural approach that actually may have- someone may have mentioned this earlier in the course is to think about well, well we how would we just like take this test datapoint,",
    "start": "1976215",
    "end": "1983700"
  },
  {
    "text": "and compare it to all the training dataset data points. And look at each of these training data points and find the one that looks the most",
    "start": "1983700",
    "end": "1989670"
  },
  {
    "text": "similar and then return the one- return the label corresponding to the one that looks the most similar.",
    "start": "1989670",
    "end": "1994875"
  },
  {
    "text": "Um, basically compare the test image with your training images.",
    "start": "1994875",
    "end": "1999885"
  },
  {
    "text": "Uh, now, the kind of the key questions that comes up is how do you compare them? With what metric do you compare your test image to your training image?",
    "start": "1999885",
    "end": "2008290"
  },
  {
    "text": "Uh, and if you weren't using something like meta-learning, uh, what you might do with these types of methods is use something like,",
    "start": "2008290",
    "end": "2016269"
  },
  {
    "text": "uh, L2 distance between your data points. Uh, unfortunately with images, L2 distance is, uh, works very poorly.",
    "start": "2016270",
    "end": "2023480"
  },
  {
    "text": "Uh, so one really nice example of this is if you take, uh, this query image on the right and compare it with the two images on the left,",
    "start": "2023480",
    "end": "2030950"
  },
  {
    "text": "uh, L2 distance is going to return the image on the left. Uh, and it's doesn't- very good,",
    "start": "2030950",
    "end": "2036710"
  },
  {
    "text": "doesn't correspond well with, uh, kind of perceptual distances and more semantic distances between images.",
    "start": "2036710",
    "end": "2044075"
  },
  {
    "text": "And so the key idea of these methods is instead of comparing in the space of your observations,",
    "start": "2044075",
    "end": "2050885"
  },
  {
    "text": "can you learn how to compare using your meta-training data in a way that is effective for new tasks?",
    "start": "2050885",
    "end": "2059099"
  },
  {
    "text": "Okay. So, um, I guess the- the kind of the first type of approach that we might imagine doing here,",
    "start": "2059440",
    "end": "2067100"
  },
  {
    "text": "uh, was, uh, proposed, uh, by Koch in 2015. And what they did is they trained a Siamese Network to",
    "start": "2067100",
    "end": "2073399"
  },
  {
    "text": "predict whether or not two images are of the same class. So you're essentially just learning to compare pairs of images,",
    "start": "2073400",
    "end": "2078409"
  },
  {
    "text": "and saying whether or not they're the same class or not. And so what this could do is you can learn a more semantic, uh, distance between two images.",
    "start": "2078410",
    "end": "2086014"
  },
  {
    "text": "And so you could take these two images, we know that in our meta-training dataset these are of different classes. So the label for this Siamese neural network would be 0.",
    "start": "2086015",
    "end": "2093710"
  },
  {
    "text": "Uh, for this pair of images these are two, uh, two images that are from the same semantic class and so this would correspond to 1.",
    "start": "2093710",
    "end": "2101404"
  },
  {
    "text": "Uh, and you repeat this for different pairs of images in your meta-training dataset, asking the neural network to predict whether or not they're from the same class or not.",
    "start": "2101405",
    "end": "2109640"
  },
  {
    "text": "Okay. So at meta-training time we are doing these pairwise comparisons.",
    "start": "2109640",
    "end": "2115654"
  },
  {
    "text": "And then if we want to be able to do few-shot classification at meta test time, what we do is we compare each image X-test,",
    "start": "2115655",
    "end": "2122660"
  },
  {
    "text": "to each of your images in your training dataset for that task. Basically just like we mentioned a few slides ago.",
    "start": "2122660",
    "end": "2129740"
  },
  {
    "text": "Uh, and then you output the label corresponding to the closest image.",
    "start": "2129740",
    "end": "2134990"
  },
  {
    "text": "So if your classifier for example outputs a probability of 0.9, for the third image and a probability of 0.2 for the second image, uh,",
    "start": "2134990",
    "end": "2143914"
  },
  {
    "text": "and something lower than 0.9 for all the others and you'd output the one that has the highest, uh, highest likelihood prediction corresponding to your,",
    "start": "2143915",
    "end": "2152450"
  },
  {
    "text": "um, corresponding to the label of that, uh, that image. So that the output the label that has-",
    "start": "2152450",
    "end": "2158555"
  },
  {
    "text": "that corresponds to the image with the highest likelihood of matching your test image.",
    "start": "2158555",
    "end": "2163050"
  },
  {
    "text": "Okay. So this is pretty nice, it's also really simple, uh, and what we're doing is, at meta-training time,",
    "start": "2163720",
    "end": "2170930"
  },
  {
    "text": "we're training this binary classifier and then at meta test-time, we're performing an N-way classification by doing each of these pairwise comparisons.",
    "start": "2170930",
    "end": "2179309"
  },
  {
    "text": "Now, one thing you might ask is well, okay. We- we talked a lot about meta-training and meta-testing",
    "start": "2179620",
    "end": "2185750"
  },
  {
    "text": "and trying to match what happens at meta-training and meta-testing. Uh, and here we're not like these are,",
    "start": "2185750",
    "end": "2192710"
  },
  {
    "text": "these are different procedures, right? We're not actually training it to do N-way classification, we're training it to do something else.",
    "start": "2192710",
    "end": "2198065"
  },
  {
    "text": "We're training it to do binary classification. So is there a way that we can try to match what",
    "start": "2198065",
    "end": "2204170"
  },
  {
    "text": "happens during meta-training and what happens during meta-testing? Such that we're training it to be able to be good at N-way classification,",
    "start": "2204170",
    "end": "2211175"
  },
  {
    "text": "rather than training it to be good, uh, binary classification. So this was kind of the,",
    "start": "2211175",
    "end": "2219395"
  },
  {
    "text": "the key idea introduced in, uh, the matching network paper. And in particular if we're gonna be doing nearest neighbors at test-time,",
    "start": "2219395",
    "end": "2227690"
  },
  {
    "text": "in order to match our test query image to each of our training data points, how about we train an embedding space such that",
    "start": "2227690",
    "end": "2235250"
  },
  {
    "text": "nearest neighbors produces accurate predictions? Um, so here's an example of what this looks like.",
    "start": "2235250",
    "end": "2243860"
  },
  {
    "text": "So we take each of the images in our training dataset, we embed them, uh, into a learned embedding space.",
    "start": "2243860",
    "end": "2250310"
  },
  {
    "text": "We then take our test query image and also embed that into an embedding space. And we compare each of, uh,",
    "start": "2250310",
    "end": "2257329"
  },
  {
    "text": "each of these embeddings to make a prediction. So, uh, each of these black dots here will correspond to a comparison between the,",
    "start": "2257330",
    "end": "2266540"
  },
  {
    "text": "uh, the test embedding and the training embeddings.",
    "start": "2266540",
    "end": "2272225"
  },
  {
    "text": "And then we'll take the label corresponding to each of our training images, and our prediction will correspond to the weighted, uh, nearest neighbors.",
    "start": "2272225",
    "end": "2281420"
  },
  {
    "text": "Basically the, the weighted, uh, labels of each of the training images or the training labels weighted by their similarity score.",
    "start": "2281420",
    "end": "2291630"
  },
  {
    "text": "Okay. And then, uh, once you do this,",
    "start": "2293590",
    "end": "2298640"
  },
  {
    "text": "you can then train your neural network end to end in order to make effective predictions on your test data points.",
    "start": "2298640",
    "end": "2305430"
  },
  {
    "text": "So the particular architecture they used in this paper was to use a convolutional encoder, uh, to kind of embed the images and they also used",
    "start": "2305890",
    "end": "2312920"
  },
  {
    "text": "this bi-directional LSTM to produce the embeddings of each of the, the training data points, although in practice you could",
    "start": "2312920",
    "end": "2318920"
  },
  {
    "text": "choose- you could choose simpler things for these, uh, for each of these models. Um, as I mentioned the model is trained end-to-end, uh,",
    "start": "2318920",
    "end": "2325820"
  },
  {
    "text": "and most critically here meta-training is about showing what's happening at meta-testing.",
    "start": "2325820",
    "end": "2330940"
  },
  {
    "text": "So during meta-training, you're training it to make comparisons to all the images in your training dataset,",
    "start": "2330940",
    "end": "2336894"
  },
  {
    "text": "and at meta test-time you're doing the same thing. Making predictions, uh, for each of the, uh,",
    "start": "2336895",
    "end": "2341960"
  },
  {
    "text": "for the N-way classification problem that you're going to be doing. Yeah. [inaudible]",
    "start": "2341960",
    "end": "2349760"
  },
  {
    "text": "So in this case I think that the motivation here was such that the, basically information about two different classes,",
    "start": "2349760",
    "end": "2357050"
  },
  {
    "text": "can be spread to one another basically. Like if you're trying to be, uh, classifying between, uh,",
    "start": "2357050",
    "end": "2363380"
  },
  {
    "text": "four different types of dogs for example, versus between a dog and a cat. Uh, the way that you represent your embedding might be different.",
    "start": "2363380",
    "end": "2370220"
  },
  {
    "text": "For example, if you're trying to classify between dogs and cats, your embedding space- your embedding of a dog should represent, uh,",
    "start": "2370220",
    "end": "2375980"
  },
  {
    "text": "something that is, uh, something that is, is kind of general to all types of dogs. Where if you're trying to do a more fine-grained classification",
    "start": "2375980",
    "end": "2382820"
  },
  {
    "text": "of classifying between two types of dogs, then you want that embedding space to be more discriminative based on the type of dog.",
    "start": "2382820",
    "end": "2388880"
  },
  {
    "text": "Yeah. [inaudible]",
    "start": "2388880",
    "end": "2396795"
  },
  {
    "text": "Right. So with- because of the LSTM, it does actually impose an order for this- for this particular architecture.",
    "start": "2396795",
    "end": "2404670"
  },
  {
    "text": "In practice, the, um, there- and there are other- if there are other non-parametric methods that aren't order dependent.",
    "start": "2404670",
    "end": "2410309"
  },
  {
    "text": "L- and the next method that we'll talk about is not order dependent. I think that for this particular paper, they chose the order arbitrarily.",
    "start": "2410310",
    "end": "2417670"
  },
  {
    "text": "Okay. So how do we actually go about training this?",
    "start": "2420560",
    "end": "2426240"
  },
  {
    "text": "Uh, so the general algorithm looks basically the same as the algorithms that we're taking- that we were looking at before. So if we take the- the algorithm corresponding to the",
    "start": "2426240",
    "end": "2432900"
  },
  {
    "text": "amortized or corresponding to the black-box approach, um, if we want to think about how you do this for matching networks,",
    "start": "2432900",
    "end": "2438620"
  },
  {
    "text": "we first sample a bunch of tasks. We sample a train dataset and a test dataset for each of those tasks.",
    "start": "2438620",
    "end": "2444245"
  },
  {
    "text": "We then compute predictions using this learned similarity metric.",
    "start": "2444245",
    "end": "2451030"
  },
  {
    "text": "Uh, and note here that unlike the parametric methods, we don't have these parameters, Phi. They're essentially integrated out into this comparison.",
    "start": "2451030",
    "end": "2458730"
  },
  {
    "text": "And hence, it is a non-parametric approach. And then once we have these predictions, then we update our- the parameters of this learned embedding",
    "start": "2458730",
    "end": "2467339"
  },
  {
    "text": "function with respect to the loss function of how accurate our predictions are on the test set.",
    "start": "2467340",
    "end": "2473130"
  },
  {
    "text": "Uh, although note here that I'm abusing notation a bit, and that those kind of- this- this loss function would be something like cross entropy,",
    "start": "2473130",
    "end": "2480300"
  },
  {
    "text": "for example, and we'd use the predicted distribution over test labels, rather than only the- only the output that the max labeled.",
    "start": "2480300",
    "end": "2489069"
  },
  {
    "text": "Okay. So any questions on how you would go about training matching networks?",
    "start": "2490790",
    "end": "2497140"
  },
  {
    "text": "Okay. So now, one thing that we might think about is, well,",
    "start": "2499850",
    "end": "2505890"
  },
  {
    "text": "if we're doing one-shot classification where we have one example per class, this is pretty, uh, straightforward,",
    "start": "2505890",
    "end": "2512760"
  },
  {
    "text": "uh, because we're gonna be making, basically, uh, we're gonna be making, uh, making comparisons to each of those classes.",
    "start": "2512760",
    "end": "2520215"
  },
  {
    "text": "But what if we're in the case where we have more than one shot? Um, if we have more than one datapoint per class,",
    "start": "2520215",
    "end": "2528479"
  },
  {
    "text": "then what matching networks is gonna do is gonna be performing these comparisons independently. And so if we have, uh- if we're doing dogs versus cats, for example,",
    "start": "2528479",
    "end": "2535650"
  },
  {
    "text": "we have two dogs and two cats, it's just going to find the closest image, and output the label corresponding to that.",
    "start": "2535650",
    "end": "2541170"
  },
  {
    "text": "Or to basically to do a weighted average of those, and look at the two dogs independently, and look at the two cats independently in our training dataset.",
    "start": "2541170",
    "end": "2548280"
  },
  {
    "text": "And so one thing you might think about is, well, maybe it makes sense to think about a more aggregated, like,",
    "start": "2548280",
    "end": "2554805"
  },
  {
    "text": "to- to aggregate information per class in a way that is smarter than just performing these independent comparisons.",
    "start": "2554805",
    "end": "2561345"
  },
  {
    "text": "Uh, and that's what, uh, prototypical networks do. So they think about how can we aggregate",
    "start": "2561345",
    "end": "2566670"
  },
  {
    "text": "class information to create a prototypical embedding of that class, and then perform comparisons to each of",
    "start": "2566670",
    "end": "2573089"
  },
  {
    "text": "those prototypical cla- prototypical class embeddings in order to predict the label corresponding to our test image.",
    "start": "2573090",
    "end": "2580420"
  },
  {
    "text": "Okay. So what this more concretely looks like is we'll have a number of images for different classes.",
    "start": "2580820",
    "end": "2587250"
  },
  {
    "text": "So here, different colors correspond to different image classes in our training dataset for a particular task.",
    "start": "2587250",
    "end": "2592800"
  },
  {
    "text": "And then we embed those- each of our training images into this embedding space.",
    "start": "2592800",
    "end": "2598560"
  },
  {
    "text": "And then take the average in this embedding space in order to compute the prototypical embedding for class 1,",
    "start": "2598560",
    "end": "2603600"
  },
  {
    "text": "class 2, and class 3. And then we embed our test image into the same space, same exact space and compute, uh,",
    "start": "2603600",
    "end": "2610934"
  },
  {
    "text": "the distance to each of those prototypical class embeddings. Uh, and then we can output the one- output the class",
    "start": "2610935",
    "end": "2618494"
  },
  {
    "text": "for which it is closest to in this embedding space. So what this looks like in equations is we'll,",
    "start": "2618495",
    "end": "2626865"
  },
  {
    "text": "uh, embed our, uh, each of our images in for a particular class, uh,",
    "start": "2626865",
    "end": "2632910"
  },
  {
    "text": "into this embedding space and then take the average for each of,",
    "start": "2632910",
    "end": "2637994"
  },
  {
    "text": "uh, for each of those images. I think it can be this prototypical embedding C_k for class k. And",
    "start": "2637995",
    "end": "2643740"
  },
  {
    "text": "then to compute which class- to compute the class of our test datapoint,",
    "start": "2643740",
    "end": "2649425"
  },
  {
    "text": "we will take the distance between the embedded test datapoint in each of those classes,",
    "start": "2649425",
    "end": "2655950"
  },
  {
    "text": "and perform a softmax over each of those, um, each of those, uh, negative distances, in order to compute the probability for the test datapoint.",
    "start": "2655950",
    "end": "2666109"
  },
  {
    "text": "Um, and then in this case, d can correspond to Euclidean distance or cosine distance.",
    "start": "2666110",
    "end": "2672710"
  },
  {
    "text": "Some kind of your favorite dif- distance metric, uh, in this, but computed in this learned embedding space.",
    "start": "2672710",
    "end": "2679020"
  },
  {
    "text": "Okay. So this is an algorithm that, uh, you'll be implementing in homework too.",
    "start": "2680740",
    "end": "2686715"
  },
  {
    "text": "Are there any questions on how it works?",
    "start": "2686715",
    "end": "2690610"
  },
  {
    "text": "Okay. Cool. So this is prototypical networks.",
    "start": "2696950",
    "end": "2702960"
  },
  {
    "text": "Um, basically, what it corresponds to, uh, I guess, basically what many of these approaches correspond to is basically embed your datapoints,",
    "start": "2702960",
    "end": "2711390"
  },
  {
    "text": "and then do nearest neighbors in that learned embedding space. Now, one challenge that might come up is, well,",
    "start": "2711390",
    "end": "2718109"
  },
  {
    "text": "what if you want to do- reason about more complex relationships between datapoints, rather than just doing nearest neighbors in your embedding space?",
    "start": "2718110",
    "end": "2725519"
  },
  {
    "text": "Um, in principle, if you have an expressive enough encoder, uh, in your embedding space,",
    "start": "2725520",
    "end": "2730740"
  },
  {
    "text": "then nearest neighbors should be able to represent a wide range of complex relationships,",
    "start": "2730740",
    "end": "2735900"
  },
  {
    "text": "uh, particularly for high-dimensional embedding spaces. But in practice, people have found it to be useful to think about",
    "start": "2735900",
    "end": "2741600"
  },
  {
    "text": "more expressive ways to perform these types of comparisons. So for example, um,",
    "start": "2741600",
    "end": "2747359"
  },
  {
    "text": "relation networks basically takes prototypical networks and learns the non-linear relation module on top of those embeddings.",
    "start": "2747360",
    "end": "2754125"
  },
  {
    "text": "This basically just corresponds to learning that function D in prototypical networks, instead of using a Euclidean distance metric or a cosine distance metric.",
    "start": "2754125",
    "end": "2761865"
  },
  {
    "text": "So it's learning both the embedding and the distance metric. Uh, another approach is to- instead of having a single prototype per,",
    "start": "2761865",
    "end": "2772410"
  },
  {
    "text": "um, per class, have a mixture of prototypes per class. And this allows you to for example, represent, um,",
    "start": "2772410",
    "end": "2779265"
  },
  {
    "text": "more multimodal class distributions to maybe one class, um, maybe if you have, kind of,",
    "start": "2779265",
    "end": "2785820"
  },
  {
    "text": "the class dog, maybe, uh, dogs are often either seen on snow or on grass, and you want to be able to represent both of those, uh,",
    "start": "2785820",
    "end": "2792690"
  },
  {
    "text": "both of those kind of modes of your class in your embedding space. It may be easier to try to allow your embedding space to have a multimodal distribution,",
    "start": "2792690",
    "end": "2801254"
  },
  {
    "text": "rather than trying to kind of change your embedding space in a way that puts them all in the same part of the embedding space. Uh, and then lastly,",
    "start": "2801254",
    "end": "2808935"
  },
  {
    "text": "uh, another paper has looked at. Can we embed, uh, perform an embedding on all of our datapoints,",
    "start": "2808935",
    "end": "2815190"
  },
  {
    "text": "and then do some sort of message passing scheme in order to think about how these different, uh, datapoints relate to each other,",
    "start": "2815190",
    "end": "2821910"
  },
  {
    "text": "and in order to make the predicted output? And what this does is it uses graph neural networks in order to",
    "start": "2821910",
    "end": "2826950"
  },
  {
    "text": "perform this message passing and differentiate through it.",
    "start": "2826950",
    "end": "2830650"
  },
  {
    "text": "Okay. Um, so now, that's kind of mostly it for non-parametric methods.",
    "start": "2832910",
    "end": "2840299"
  },
  {
    "text": "Uh, they're- they're quite simple. And we'll talk a bit about some of the takeaways of these methods, uh,",
    "start": "2840300",
    "end": "2846299"
  },
  {
    "text": "in kind of the last part of this lecture, where we talk about how we can think comparing these approaches.",
    "start": "2846300",
    "end": "2852210"
  },
  {
    "text": "Okay. Um, and so, I guess, as a more meta-point, we have all these algorithms,",
    "start": "2852210",
    "end": "2857760"
  },
  {
    "text": "they're really these kind of three classes of approaches that we've talked about; black-box adaptation, optimization-based approaches, and non-parametric approaches.",
    "start": "2857760",
    "end": "2865410"
  },
  {
    "text": "Uh, and so how should we think about how these different methods compare? Uh, I think that there are a few different ways to think about this.",
    "start": "2865410",
    "end": "2871530"
  },
  {
    "text": "And so I'll present two different ways, uh, to think about this. Uh, and the first is to think about the kind of computation and graph perspective.",
    "start": "2871530",
    "end": "2879165"
  },
  {
    "text": "How do these different algorithms look like as different computation graphs? And we- we visited- we kind of talked about this viewpoint earlier, um,",
    "start": "2879165",
    "end": "2887490"
  },
  {
    "text": "where the black-box approaches are representing this computation graph at a completely back- black-box approach.",
    "start": "2887490",
    "end": "2893835"
  },
  {
    "text": "Whereas the optimization-based approaches, you can view them as embedding an optimization into your computation graph.",
    "start": "2893835",
    "end": "2900270"
  },
  {
    "text": "Uh, and for non-parametric approaches, you can also take this view. And in particular, what the computation graph will look like,",
    "start": "2900270",
    "end": "2907470"
  },
  {
    "text": "uh, for prototypical net- networks, for example, is something that, uh, for your test datapoint, uh,",
    "start": "2907470",
    "end": "2913170"
  },
  {
    "text": "embeds it and compares it to each of your per class prototypes,",
    "start": "2913170",
    "end": "2918585"
  },
  {
    "text": "where those per task prototypes are computed, um, using the embedding of each of those,",
    "start": "2918585",
    "end": "2924075"
  },
  {
    "text": "uh, each of those class's datapoints. So you can essentially just view it as another kind of computation graph,",
    "start": "2924075",
    "end": "2930630"
  },
  {
    "text": "where we're embedding the soft nearest neighbors into the computation graph.",
    "start": "2930630",
    "end": "2935440"
  },
  {
    "text": "Okay. So with this view, um, we can also think about how we can mix and match components of the computation graph,",
    "start": "2936140",
    "end": "2943310"
  },
  {
    "text": "uh, to get hybrid types of approaches. Yeah. [BACKGROUND]",
    "start": "2943310",
    "end": "2959400"
  },
  {
    "text": "Yeah. So you could essentially view all of these methods as a computation graph. And whether or not that compu- like,",
    "start": "2959400",
    "end": "2966840"
  },
  {
    "text": "the optimization-based methods and non-parametric methods are essentially imposing a certain type of structure inside your computation graph,",
    "start": "2966840",
    "end": "2975990"
  },
  {
    "text": "that corresponds to things like gradient descent and nearest-neighbors, whereas black-box methods tend to not impose any structure on that process.",
    "start": "2975990",
    "end": "2985395"
  },
  {
    "text": "And there is a bit of a gray line between like, what- what computation graphs look more like",
    "start": "2985395",
    "end": "2991200"
  },
  {
    "text": "non-parametric methods versus what computation graphs look more like black-box methods. Um, I think it's helpful to think about",
    "start": "2991200",
    "end": "2997830"
  },
  {
    "text": "this- this kind of different classification of methods, because it allows us to think about the certain properties of these, these methods.",
    "start": "2997830",
    "end": "3003770"
  },
  {
    "text": "Although in practice, um, there isn't a very clear cut line between them. Yeah. [BACKGROUND]",
    "start": "3003770",
    "end": "3014855"
  },
  {
    "text": "Yeah, that's a good point. So it should be over x y such that y equals k. Yeah,",
    "start": "3014855",
    "end": "3020015"
  },
  {
    "text": "exactly. And I'll try to fix that. I noticed that on the previous slide and I'll try to fix that on the, um, before we post the slides online.",
    "start": "3020015",
    "end": "3027150"
  },
  {
    "text": "Okay, is there a question in the back? All right so, um,",
    "start": "3031780",
    "end": "3038045"
  },
  {
    "text": "we can again because we can think of these as computation graphs that also is pretty easier to think about how we might try to mix and match components of these.",
    "start": "3038045",
    "end": "3044105"
  },
  {
    "text": "So one approach which is a bit of a hybrid of black-box approaches and optimization based approaches or",
    "start": "3044105",
    "end": "3050720"
  },
  {
    "text": "maybe optimization-based non-parametric depending on the way you view things, um, is an approach that tries to condition a model on an embedding of the data set,",
    "start": "3050720",
    "end": "3058970"
  },
  {
    "text": "of your training data set and also run gradient descent on that model. Uh, in practice this sort of- these sources of information by conditioning on",
    "start": "3058970",
    "end": "3067580"
  },
  {
    "text": "the data with a direct way as well as through gradient descent could potentially be redundant. Um, although in practice it seems like this method found some benefit in doing that.",
    "start": "3067580",
    "end": "3076490"
  },
  {
    "text": "Uh, another idea here that you could do is have some sort of",
    "start": "3076490",
    "end": "3081950"
  },
  {
    "text": "embedding of your function and then do gradient descent on that embedding space.",
    "start": "3081950",
    "end": "3088295"
  },
  {
    "text": "And so in particular they have this paper user relation network to embed your training data set and think",
    "start": "3088295",
    "end": "3094490"
  },
  {
    "text": "about how different data points relate to one another. And then they decode this embedding into the parameters of",
    "start": "3094490",
    "end": "3100460"
  },
  {
    "text": "a neural network that makes predictions about new data points. And then instead of running gradient descent on the parameters of that function,",
    "start": "3100460",
    "end": "3108305"
  },
  {
    "text": "they run gradient descent in the learned embedding space Z, uh, which produces, uh, different functions.",
    "start": "3108305",
    "end": "3115610"
  },
  {
    "text": "So this you can essentially view it as running gradient descent on a lower-dimensional space of your weights rather",
    "start": "3115610",
    "end": "3121430"
  },
  {
    "text": "than running gradient descent in the original space of your weights okay?",
    "start": "3121430",
    "end": "3127910"
  },
  {
    "text": "And then the last, uh, approach that I'll cover is that there's also an approach that looked at doing something exactly like MAML.",
    "start": "3127910",
    "end": "3135230"
  },
  {
    "text": "But initializing the last layer of the network to correspond to prototypical networks.",
    "start": "3135230",
    "end": "3141935"
  },
  {
    "text": "Um, so it's basically specific form of a particular choice of the network architecture for MAML that",
    "start": "3141935",
    "end": "3148460"
  },
  {
    "text": "initializes it to do something like a comparison-based, um, a comparison based prediction.",
    "start": "3148460",
    "end": "3154620"
  },
  {
    "text": "Okay so that's the kind of computation graph view is one way to think about how these different algorithms compare.",
    "start": "3155650",
    "end": "3165095"
  },
  {
    "text": "And the other way that I like to think about how these algorithms compare is to think about the different properties of the individual algorithms.",
    "start": "3165095",
    "end": "3172830"
  },
  {
    "text": "Um, and in particular I think there are two properties that are really important as we start to think about developing meta-learning",
    "start": "3172830",
    "end": "3179109"
  },
  {
    "text": "algorithms and developing new meta-learning algorithms. The first is thinking about expressive power of these algorithms.",
    "start": "3179110",
    "end": "3184935"
  },
  {
    "text": "So we talked about this a bit before, it's basically the ability for that function f that I showed on the previous slide to represent a range of learning procedures as a function of,",
    "start": "3184935",
    "end": "3194704"
  },
  {
    "text": "um, as a function of your training dataset. And the reason why this is important is that it means that",
    "start": "3194705",
    "end": "3201035"
  },
  {
    "text": "as you get more larger and larger meta-training datasets you'll be able to produce a more flexible range of learned optimizers.",
    "start": "3201035",
    "end": "3210545"
  },
  {
    "text": "And as you apply these types of algorithms to more challenging optimization problems, you'll be able to do better than the kind of",
    "start": "3210545",
    "end": "3216290"
  },
  {
    "text": "the standard optimization procedures we have today. So essentially it has to do with scalability and where these methods will",
    "start": "3216290",
    "end": "3222650"
  },
  {
    "text": "end up in the future. Ah, if you could only represent a small class of algorithms then you're, you may not be as",
    "start": "3222650",
    "end": "3228859"
  },
  {
    "text": "effective when moving towards broader meta-training datasets. Okay so this is the first property and the second property which I",
    "start": "3228860",
    "end": "3236465"
  },
  {
    "text": "alluded to very briefly before is the property of consistency. And in particular what I mean by consistency is",
    "start": "3236465",
    "end": "3243680"
  },
  {
    "text": "that the meta-learning algorithm will produce a learned learning procedure that will solve",
    "start": "3243680",
    "end": "3250549"
  },
  {
    "text": "the task with enough data regardless of the properties of that task. It will essentially produce a consistent learning procedure such that given enough data.",
    "start": "3250550",
    "end": "3259985"
  },
  {
    "text": "What I mean by consistent learning procedure is one that will kind of asymptotically solve the task given enough data at that task.",
    "start": "3259985",
    "end": "3267800"
  },
  {
    "text": "And so for example things like gradient descent correspond to a consistent learning procedure because we're just running gradient descent at test time.",
    "start": "3267800",
    "end": "3274550"
  },
  {
    "text": "And you can expect at the end of given enough data for that test task you'll be able to",
    "start": "3274550",
    "end": "3281510"
  },
  {
    "text": "solve a task regardless of what your meta-training data was. Now what is, why is this",
    "start": "3281510",
    "end": "3287420"
  },
  {
    "text": "important? Well first getting meta-training data that corresponds, oh, I'll get to your question in a second.",
    "start": "3287420",
    "end": "3294484"
  },
  {
    "text": "First getting meta-training data that corresponds closely to what you'll be seeing at test-time is pretty hard.",
    "start": "3294485",
    "end": "3300025"
  },
  {
    "text": "So we haven't really talked about this much but we've been assuming that we have this meta-training dataset. And we can use this meta-training dataset in a set of",
    "start": "3300025",
    "end": "3306369"
  },
  {
    "text": "tasks in order to do well at new tasks. But in practice, how do we determine what those tasks actually correspond to?",
    "start": "3306370",
    "end": "3313580"
  },
  {
    "text": "This is actually a really hard problem as we think about where we are going to be applying these algorithms. And so if we produce a consistent learning procedure, then we",
    "start": "3313580",
    "end": "3322100"
  },
  {
    "text": "can expect it to do something reasonable on tasks that aren't necessarily, uh, especially close to the meta-training tasks that we trained it on.",
    "start": "3322100",
    "end": "3329585"
  },
  {
    "text": "And we can also get basically get better out of distribution task performance. There's a question.",
    "start": "3329585",
    "end": "3337190"
  },
  {
    "text": "[inaudible]",
    "start": "3337190",
    "end": "3371930"
  },
  {
    "text": "Yeah, so the I guess the question was about, um, like can't we have a catastrophic initialization",
    "start": "3371930",
    "end": "3378589"
  },
  {
    "text": "such that gradient descent doesn't actually give us a good solution. Um, and I guess the short answer is yes.",
    "start": "3378590",
    "end": "3384620"
  },
  {
    "text": "I guess one thing we can assume with gradient descent is that we'll at least get to a local optimum.",
    "start": "3384620",
    "end": "3391115"
  },
  {
    "text": "Whether that local optimum is good or not it is a kind of another question and it could be that we could have an initialization",
    "start": "3391115",
    "end": "3397190"
  },
  {
    "text": "that puts us in a place that the local optimum is actually very bad for that particular basin.",
    "start": "3397190",
    "end": "3403895"
  },
  {
    "text": "Um, so absolutely and that's something I think that people haven't thought about quite as much yet.",
    "start": "3403895",
    "end": "3413315"
  },
  {
    "text": "And so thinking about how we might, um, how we might try to tackle that sort of problem and does it actually happen in practice,",
    "start": "3413315",
    "end": "3421460"
  },
  {
    "text": "is do we actually get to a local optimum that are bad is kind of another question. The-",
    "start": "3421460",
    "end": "3428000"
  },
  {
    "text": "[inaudible]",
    "start": "3428000",
    "end": "3439790"
  },
  {
    "text": "Something like that. Yeah yeah. So there are other ways to try to think about how you might formalize this problem as well.",
    "start": "3439790",
    "end": "3444845"
  },
  {
    "text": "And something like basically monotonic improvement could be one of them as well. Uh, yeah.",
    "start": "3444845",
    "end": "3451560"
  },
  {
    "text": "And I guess theoretically thinking about that sort of problem may also draw very closely to some of the theoretical questions in deep learning in general,",
    "start": "3453130",
    "end": "3460355"
  },
  {
    "text": "like are local optima good with high probability, things like that, and people have",
    "start": "3460355",
    "end": "3465380"
  },
  {
    "text": "started- People have looked at that sort of problem in the past. Okay. Um, and I guess one thing I was going to mention here is that,",
    "start": "3465380",
    "end": "3474079"
  },
  {
    "text": "[NOISE] we recall that is in practice things like gradient descent. If we're running that at test-time, do tend to empirically actually hold up with regard to getting better",
    "start": "3474080",
    "end": "3482375"
  },
  {
    "text": "out of distribution task performance in comparison to black-box adaptation approaches. Okay. Um, and so in my mind these are the kind of the two properties that are",
    "start": "3482375",
    "end": "3491440"
  },
  {
    "text": "most important for many different applications of meta-learning. Not necessarily the benchmarks that we have because the benchmarks are well defining",
    "start": "3491440",
    "end": "3499234"
  },
  {
    "text": "a nice set of meta-training tasks and sort of meta tests tasks, test tasks that  kinda closely align with that. But in practice if we're thinking about applying these algorithms on real problems,",
    "start": "3499235",
    "end": "3507230"
  },
  {
    "text": "these are the two properties that I think that we're gonna care about the most. Okay. Um, and so let's think about how these- how",
    "start": "3507230",
    "end": "3514460"
  },
  {
    "text": "the different algorithms compare on these different axes. So for black-box approaches we know that they have complete expressive power,",
    "start": "3514460",
    "end": "3521750"
  },
  {
    "text": "ah, in the respect that things like recurrent neural networks are universal function approximators.",
    "start": "3521750",
    "end": "3527495"
  },
  {
    "text": "Ah, and we also know that they're not consistent they- and that they won't, ah, if you are imposing any structure on the function,",
    "start": "3527495",
    "end": "3536224"
  },
  {
    "text": "on- on your black-box function, then they won't- there's no guarantee that they'll produce anything that is consistent.",
    "start": "3536225",
    "end": "3542760"
  },
  {
    "text": "Okay. For optimization based methods we know that, ah, it reduces to gradient descent,",
    "start": "3543250",
    "end": "3548645"
  },
  {
    "text": "ah, at least for things like MAML. Ah, and so in that sense, they're consistent, ah, for some definition of consistent with regard to things like monotonic improvement.",
    "start": "3548645",
    "end": "3557275"
  },
  {
    "text": "Um, and we also know that they are expressive if you have, ah, deep enough models.",
    "start": "3557275",
    "end": "3564160"
  },
  {
    "text": "Um, and in practice we've found these methods to perform, ah, well on- on- on settings where you",
    "start": "3564160",
    "end": "3570695"
  },
  {
    "text": "do want to be fairly expressive with regard to few-shot learning algorithms. Ah, I put an asterisk here because this",
    "start": "3570695",
    "end": "3575780"
  },
  {
    "text": "actually doesn't hold up in some reinforcement learning settings, and we'll potentially talk about this a bit later in the course.",
    "start": "3575780",
    "end": "3581150"
  },
  {
    "text": "It mostly holds in supervised learning settings. Ah, it also depends on the particular reinforcement learning algorithm that you use.",
    "start": "3581150",
    "end": "3586730"
  },
  {
    "text": "So it's a bit of a nuanced, ah, a nuanced thing that we'll discuss later. Ah, and then with regard to nonparametric approaches, ah,",
    "start": "3586730",
    "end": "3594049"
  },
  {
    "text": "these methods are expressive for most architecture choices. Ah, for example, if you're using things like LCMs then there are a wide range of,",
    "start": "3594050",
    "end": "3603065"
  },
  {
    "text": "of functions that you can represent, ah, although there's a bit of nuance, ah, depending on the types of learning algorithms that you might want to learn,",
    "start": "3603065",
    "end": "3610640"
  },
  {
    "text": "ah, and that they're also consistent under certain conditions. Ah, so they are consistent in the sense that if your embedding,",
    "start": "3610640",
    "end": "3619535"
  },
  {
    "text": "um, is not losing information that is, ah, losing information about the inputs that is",
    "start": "3619535",
    "end": "3625670"
  },
  {
    "text": "not- that- that's important for making decisions, then, ah, as you accumulate more and more data, ah,",
    "start": "3625670",
    "end": "3632680"
  },
  {
    "text": "you'll eventually get something I do- kind of asymptotically it will eventually get to a datapoint that's arbitrarily close to your test data point,",
    "start": "3632680",
    "end": "3639670"
  },
  {
    "text": "and then be able to make, um, the correct prediction for that test data point.",
    "start": "3639670",
    "end": "3645380"
  },
  {
    "text": "Okay. Um, so beyond this aligor- beyond these properties there's also other properties that are pretty",
    "start": "3645610",
    "end": "3651950"
  },
  {
    "text": "important for thinking about with regard to different applications. Um, so things like, I- being really easy to combine to- with a variety of learning problems.",
    "start": "3651950",
    "end": "3660740"
  },
  {
    "text": "Ah, this is true for black-box approaches because it's, it's really easy to basically just plug in your, ah, plug in different loss functions or",
    "start": "3660740",
    "end": "3667220"
  },
  {
    "text": "different optimization procedures into these types of architectures. Um, the downside as I mentioned, ah,",
    "start": "3667220",
    "end": "3674150"
  },
  {
    "text": "last time is that it does invo- involve a challenging optimization in that there's no good inductive bias at initialization to point it in the direction of,",
    "start": "3674150",
    "end": "3683795"
  },
  {
    "text": "ah, a real optimization procedure. And as a result, they are often fairly data inefficient",
    "start": "3683795",
    "end": "3689360"
  },
  {
    "text": "because you have to learn how to learn completely from scratch. Okay. With regard to optimization-based methods as we talked about earlier,",
    "start": "3689360",
    "end": "3697430"
  },
  {
    "text": "we have this positive inductive bias at the start of meta-learning because we're initializing it with a real, ah, optimization algorithm.",
    "start": "3697430",
    "end": "3704345"
  },
  {
    "text": "Um, it can handle- I guess one thing I didn't mention it before is it can handle varying K and large K, ah, relatively well.",
    "start": "3704345",
    "end": "3711005"
  },
  {
    "text": "If you have more data than what you trained on for example, um, these approaches still tend to work well because they're consistent.",
    "start": "3711005",
    "end": "3716990"
  },
  {
    "text": "Ah, and they're also model agnostic in the sense that you can plug in different architectures and apply them,",
    "start": "3716990",
    "end": "3723380"
  },
  {
    "text": "ah, with, with- conceptually with-without any difficulty. The downsides as I mentioned before, you know,",
    "start": "3723380",
    "end": "3730220"
  },
  {
    "text": "we have a second-order optimization and it's usually compute intensive and memory intensive. Ah, and these two of, these two points are quite",
    "start": "3730220",
    "end": "3737240"
  },
  {
    "text": "important for our range of applications where you care a lot about compute, ah, and memory particularly when you're scaling to large datasets.",
    "start": "3737240",
    "end": "3744395"
  },
  {
    "text": "Okay. And then with regard in non-parametric methods, ah, we didn't cover the pros and cons, of this one yet other than these two.",
    "start": "3744395",
    "end": "3750694"
  },
  {
    "text": "So the first is that, one of the nice things about these methods is that they're entirely feed forward architectures,",
    "start": "3750695",
    "end": "3755870"
  },
  {
    "text": "they don't involve any, any backpropagation within that computation graph. And so as a result,",
    "start": "3755870",
    "end": "3761210"
  },
  {
    "text": "they tend to be very computationally fast and they tend to be very easy to optimize in contrast to architectures that involve recurrence,",
    "start": "3761210",
    "end": "3769700"
  },
  {
    "text": "that involve, ah, gradients pushing backwards etc. Um, and then some of the downsides of these approaches is that,",
    "start": "3769700",
    "end": "3779435"
  },
  {
    "text": "ah, they're hard to generalize to varying K. This is more of a empirical observation that people have found.",
    "start": "3779435",
    "end": "3785630"
  },
  {
    "text": "Is if you test them on more K than what they're trained on, they tend to underperform what, what other algorithms are able to achieve.",
    "start": "3785630",
    "end": "3792829"
  },
  {
    "text": "Ah, it is also harder to scale these to very large datasets, ah, at test-time because they're using non-parametric approaches.",
    "start": "3792830",
    "end": "3800080"
  },
  {
    "text": "And so far these methods have also been limited to classification. Ah, in principle you could also apply them to things like regression.",
    "start": "3800080",
    "end": "3807480"
  },
  {
    "text": "But the- with the caveat that you could only interpolate between the labels if you kinda, ah,",
    "start": "3807480",
    "end": "3813020"
  },
  {
    "text": "if you naively apply these approaches to regression, you could only interpolate between the labels that you saw in your,",
    "start": "3813020",
    "end": "3819170"
  },
  {
    "text": "ah, in your task specific training set. Because we're just doing a weighted average of those labels at test time.",
    "start": "3819170",
    "end": "3826920"
  },
  {
    "text": "Okay. And then at a more high level, it's worth mentioning that generally well tuned versions of each of",
    "start": "3827260",
    "end": "3833630"
  },
  {
    "text": "these algorithms tend to perform comparably on existing few-shot benchmarks and as I alluded to before, things, various bells and",
    "start": "3833630",
    "end": "3842120"
  },
  {
    "text": "whistles like using ensemble as they're using, or tuning the architecture can lead to,",
    "start": "3842120",
    "end": "3847505"
  },
  {
    "text": "ah, are, are often the kind of the differentiating factor between these methods, rather than the actual underlying method itself.",
    "start": "3847505",
    "end": "3853325"
  },
  {
    "text": "Um, this likely says more about the benchmarks than about the approaches themselves. Ah, and I think that, basically in,",
    "start": "3853325",
    "end": "3859640"
  },
  {
    "text": "in many cases which method you want to use will depend heavily on your use case, and whether or not you care about things like consistency,",
    "start": "3859640",
    "end": "3866150"
  },
  {
    "text": "whether or not you care about expressive power, whether or not you care about computational efficiency, ah, etc.",
    "start": "3866150",
    "end": "3872490"
  },
  {
    "text": "Okay. Any more questions on these- kind of how these algorithms compare?",
    "start": "3872530",
    "end": "3879485"
  },
  {
    "text": "And when you might use one versus the other?",
    "start": "3879485",
    "end": "3882150"
  },
  {
    "text": "Okay. So I guess that's mostly it. The, um, for today.",
    "start": "3886930",
    "end": "3894200"
  },
  {
    "text": "So kind of to, to recap. We talked about, ah, two algorithmic properties. We also talked about a computation graph perspective.",
    "start": "3894200",
    "end": "3900920"
  },
  {
    "text": "Ah, one third property that's useful to think about is thinking about uncertainty awareness.",
    "start": "3900920",
    "end": "3906815"
  },
  {
    "text": "I- by this I mean kind of the ability to reason about ambiguity during the learning process at test time.",
    "start": "3906815",
    "end": "3914540"
  },
  {
    "text": "Ah, and the reason why this is important is that if you want to do things like active learning, or have calibrated uncertainty",
    "start": "3914540",
    "end": "3919970"
  },
  {
    "text": "estimates when you're learning from small amounts of data, or if you're in reinforcement learning settings and you want to reason about what data you should collect in order to,",
    "start": "3919970",
    "end": "3927200"
  },
  {
    "text": "to reduce your uncertainty about the task, then you need to have some notion of, of your uncertainty.",
    "start": "3927200",
    "end": "3932645"
  },
  {
    "text": "Ah, and uncertainty comes up especially in few-shot learning problems, where you only have a small amount of data and your prior can't necessarily make up for,",
    "start": "3932645",
    "end": "3940415"
  },
  {
    "text": "ah, what the true task is. Um, and the kind of- the other kind of place where this comes in is",
    "start": "3940415",
    "end": "3949279"
  },
  {
    "text": "that we talked about this really nice Bayesian motivation at the beginning of the course in the- in the second lecture,",
    "start": "3949280",
    "end": "3954680"
  },
  {
    "text": "in the third lec- second or third lecture, and, ah, we've kind of moved to be- moved to fully deterministic approaches.",
    "start": "3954680",
    "end": "3960920"
  },
  {
    "text": "And in the next lecture we'll talk about basically more principled Bayesian approaches that get back to that initial motivation,",
    "start": "3960920",
    "end": "3967130"
  },
  {
    "text": "and also give us things like calibrated uncertainty or more calibrated uncertainty and approaches that allow",
    "start": "3967130",
    "end": "3973640"
  },
  {
    "text": "us to think about how we could collect more data to reduce our uncertainty. Ah, and we'll discuss all of those things on Monday.",
    "start": "3973640",
    "end": "3981440"
  },
  {
    "text": "Um, on Wednesday we have, ah, student presentations again, ah, that will be covering various, um,",
    "start": "3981440",
    "end": "3987815"
  },
  {
    "text": "various algorithms and extensions of the things that we've been talking about, ah, and then a few more reminders again, Homework 1",
    "start": "3987815",
    "end": "3994250"
  },
  {
    "text": "is due on Wednesday. Please fill out the poster, ah, presentation preferences for the dates, ah,",
    "start": "3994250",
    "end": "3999349"
  },
  {
    "text": "we need to know kind of when you're available, and information about the course project is online. I'll see you on Wednesday.",
    "start": "3999350",
    "end": "4007060"
  }
]