[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "start": "0",
    "end": "5880"
  },
  {
    "text": "Hi.",
    "start": "5880",
    "end": "6390"
  },
  {
    "text": "In this module,\nI'm going to talk",
    "start": "6390",
    "end": "7765"
  },
  {
    "text": "about beam search, a\nreally simple algorithm",
    "start": "7765",
    "end": "10080"
  },
  {
    "text": "for finding approximate maximum\nweight assignments efficiently",
    "start": "10080",
    "end": "13800"
  },
  {
    "text": "when you're in a\nhurry and don't want",
    "start": "13800",
    "end": "15390"
  },
  {
    "text": "to incur the full cost\nof backtracking search.",
    "start": "15390",
    "end": "19820"
  },
  {
    "text": "So just to review, remember\na constraint satisfaction,",
    "start": "19820",
    "end": "23360"
  },
  {
    "text": "or a CSP, is defined by\na factor graph, which",
    "start": "23360",
    "end": "27170"
  },
  {
    "text": "consists of a set of\nvariables, X1 through Xn,",
    "start": "27170",
    "end": "30470"
  },
  {
    "text": "where each Xi is some\nelement of a domain,",
    "start": "30470",
    "end": "33590"
  },
  {
    "text": "i, and a set of\nfactors, f1 through fm,",
    "start": "33590",
    "end": "37850"
  },
  {
    "text": "where each factor\nfunction, fj, is",
    "start": "37850",
    "end": "40760"
  },
  {
    "text": "a function that\ntakes a assignment",
    "start": "40760",
    "end": "44089"
  },
  {
    "text": "and returns a\nnon-negative number.",
    "start": "44090",
    "end": "46970"
  },
  {
    "text": "And usually, the factor\nfunction depends only",
    "start": "46970",
    "end": "49130"
  },
  {
    "text": "on a subset of the variables.",
    "start": "49130",
    "end": "52020"
  },
  {
    "text": "So each assignment, little x, to\nall the variables has a weight.",
    "start": "52020",
    "end": "57740"
  },
  {
    "text": "And that weight is given\nby simply the product",
    "start": "57740",
    "end": "60290"
  },
  {
    "text": "of all the factors\napplied to the assignment.",
    "start": "60290",
    "end": "64760"
  },
  {
    "text": "And the objective is to find\nthe maximum weight assignment.",
    "start": "64760",
    "end": "70760"
  },
  {
    "start": "70000",
    "end": "172000"
  },
  {
    "text": "So let us revisit the\nobject tracking example.",
    "start": "70760",
    "end": "74790"
  },
  {
    "text": "So in this example, we're trying\nto track an object over time.",
    "start": "74790",
    "end": "78830"
  },
  {
    "text": "And at each time step\nwe record a noisy sensor",
    "start": "78830",
    "end": "82100"
  },
  {
    "text": "reading of its position.",
    "start": "82100",
    "end": "83700"
  },
  {
    "text": "So at time step 1 we see 0.",
    "start": "83700",
    "end": "86149"
  },
  {
    "text": "Time step 2 we see 2.",
    "start": "86150",
    "end": "88050"
  },
  {
    "text": "Time step 3 we see 2.",
    "start": "88050",
    "end": "91480"
  },
  {
    "text": "And the question is,\nwhat was the trajectory",
    "start": "91480",
    "end": "95770"
  },
  {
    "text": "that object took?",
    "start": "95770",
    "end": "96759"
  },
  {
    "text": "Is it this one, or this\none, or something else?",
    "start": "96760",
    "end": "100610"
  },
  {
    "text": "We model this a problem as\na CSP with x1, x2, and x3.",
    "start": "100610",
    "end": "109080"
  },
  {
    "text": "We defined factors that\ncaptured our intuitions",
    "start": "109080",
    "end": "112740"
  },
  {
    "text": "about the problem.",
    "start": "112740",
    "end": "115110"
  },
  {
    "text": "o1 captures the fact that\nthe actual position should",
    "start": "115110",
    "end": "118440"
  },
  {
    "text": "be close to the sensor reading.",
    "start": "118440",
    "end": "120480"
  },
  {
    "text": "So 2 is the weight\nassigned to 0.",
    "start": "120480",
    "end": "124830"
  },
  {
    "text": "So 0X1 equals 0 as favored.",
    "start": "124830",
    "end": "127470"
  },
  {
    "text": "And x1 equals 2 is disallowed.",
    "start": "127470",
    "end": "131039"
  },
  {
    "text": "Similarly, o2\nfavors x2 equals 2.",
    "start": "131039",
    "end": "136740"
  },
  {
    "text": "o3 favors x3 equals 2.",
    "start": "136740",
    "end": "139890"
  },
  {
    "text": "And finally, the transition\nfactors, t1 and t2",
    "start": "139890",
    "end": "144420"
  },
  {
    "text": "favor adjacent xi's,\nwhich are close.",
    "start": "144420",
    "end": "148260"
  },
  {
    "text": "So a distance of 0\nwill get a weight of 2.",
    "start": "148260",
    "end": "153239"
  },
  {
    "text": "Whereas, a distance of\n1 will get 1, and so on.",
    "start": "153240",
    "end": "158290"
  },
  {
    "text": "And you can click on this demo\nto actually play with this CSP.",
    "start": "158290",
    "end": "165950"
  },
  {
    "text": "We'll come back\nto this in a bit.",
    "start": "165950",
    "end": "169290"
  },
  {
    "text": "OK, so this is the\nobject tracking example.",
    "start": "169290",
    "end": "172930"
  },
  {
    "start": "172000",
    "end": "649000"
  },
  {
    "text": "So now, so far, we've\nseen backtracking search",
    "start": "172930",
    "end": "176430"
  },
  {
    "text": "as a way to compute\nmaximum weight assignments.",
    "start": "176430",
    "end": "181019"
  },
  {
    "text": "And backtracking\nsearch essentially",
    "start": "181020",
    "end": "183210"
  },
  {
    "text": "does a exhaustive\ndepth-first search",
    "start": "183210",
    "end": "185670"
  },
  {
    "text": "of the entire tree in\nthe worst case, which can",
    "start": "185670",
    "end": "188340"
  },
  {
    "text": "take a very, very long time.",
    "start": "188340",
    "end": "191000"
  },
  {
    "text": "So how can we avoid this?",
    "start": "191000",
    "end": "193310"
  },
  {
    "text": "Well, we have to\ngive up on something.",
    "start": "193310",
    "end": "195370"
  },
  {
    "text": "And what we're going to\ngive up on is correctness.",
    "start": "195370",
    "end": "200090"
  },
  {
    "text": "So what we're going to do\nis simply not backtrack.",
    "start": "200090",
    "end": "203860"
  },
  {
    "text": "So let's start with something\ncalled the greedy search",
    "start": "203860",
    "end": "206500"
  },
  {
    "text": "algorithm.",
    "start": "206500",
    "end": "207520"
  },
  {
    "text": "So again, we start with\nan empty assignment.",
    "start": "207520",
    "end": "211060"
  },
  {
    "text": "We consider possible\nsettings of, let's say, x1.",
    "start": "211060",
    "end": "215860"
  },
  {
    "text": "So let's say there's\ntwo possible settings.",
    "start": "215860",
    "end": "218422"
  },
  {
    "text": "And we're just going to\nchoose one of them, whichever",
    "start": "218422",
    "end": "220629"
  },
  {
    "text": "ones has the highest weight.",
    "start": "220630",
    "end": "224710"
  },
  {
    "text": "And the weight, remember,\nof a partial assignment",
    "start": "224710",
    "end": "227260"
  },
  {
    "text": "is the product of\nall the factors",
    "start": "227260",
    "end": "229209"
  },
  {
    "text": "that you can evaluate so far.",
    "start": "229210",
    "end": "231250"
  },
  {
    "text": "Well, let's pick this one.",
    "start": "231250",
    "end": "232810"
  },
  {
    "text": "Again, let's set X2.",
    "start": "232810",
    "end": "236050"
  },
  {
    "text": "There's two possible\nways to set it.",
    "start": "236050",
    "end": "237730"
  },
  {
    "text": "Let's pick the\nbetter one and keep",
    "start": "237730",
    "end": "239830"
  },
  {
    "text": "on going until we reach\na complete assignment.",
    "start": "239830",
    "end": "243340"
  },
  {
    "text": "And then we just return that.",
    "start": "243340",
    "end": "246560"
  },
  {
    "text": "So formally, what\ngreedy search is doing",
    "start": "246560",
    "end": "250190"
  },
  {
    "text": "is starting with a partial\nassignment, which is empty.",
    "start": "250190",
    "end": "253700"
  },
  {
    "text": "And then it's going through\neach of the variables, X1",
    "start": "253700",
    "end": "256458"
  },
  {
    "text": "through Xn.",
    "start": "256459",
    "end": "257898"
  },
  {
    "text": "I'm going to try to extend the\npartial assignment to set Xi.",
    "start": "257899",
    "end": "263720"
  },
  {
    "text": "So for each possible value\nthat I can assign Xi,",
    "start": "263720",
    "end": "269210"
  },
  {
    "text": "I'm going to form a potential\ncandidate partial assignment",
    "start": "269210",
    "end": "275180"
  },
  {
    "text": "and call it Xv.",
    "start": "275180",
    "end": "277270"
  },
  {
    "text": "And then I'm going to\ncompute the weight of each",
    "start": "277270",
    "end": "280270"
  },
  {
    "text": "of these Xv's, and then choose\nthe one with the highest",
    "start": "280270",
    "end": "283660"
  },
  {
    "text": "weight.",
    "start": "283660",
    "end": "285390"
  },
  {
    "text": "So an important caveat is this\nis definitely not guaranteed",
    "start": "285390",
    "end": "287940"
  },
  {
    "text": "to find the maximum\nweight assignment,",
    "start": "287940",
    "end": "291030"
  },
  {
    "text": "even though locally it appears\nto be optimizing and finding",
    "start": "291030",
    "end": "294600"
  },
  {
    "text": "the value with the best weight.",
    "start": "294600",
    "end": "298380"
  },
  {
    "text": "So let's look at\nthis demo to see how",
    "start": "298380",
    "end": "302360"
  },
  {
    "text": "it works on object tracking.",
    "start": "302360",
    "end": "304400"
  },
  {
    "text": "OK, so here we have\nthe CSP that's defined.",
    "start": "304400",
    "end": "308300"
  },
  {
    "text": "And I'm going to step\nthrough this algorithm.",
    "start": "308300",
    "end": "310560"
  },
  {
    "text": "So initially, I extend\nthe empty assignment",
    "start": "310560",
    "end": "315410"
  },
  {
    "text": "to assignments that\nonly fill in X1.",
    "start": "315410",
    "end": "321190"
  },
  {
    "text": "So X1 could be 0, 1, or 2.",
    "start": "321190",
    "end": "323480"
  },
  {
    "text": "And these are the\nweights of these three",
    "start": "323480",
    "end": "326900"
  },
  {
    "text": "partial assignments.",
    "start": "326900",
    "end": "328550"
  },
  {
    "text": "Remember, the sensor\nreading was 0.",
    "start": "328550",
    "end": "331879"
  },
  {
    "text": "So therefore, X1 equals\n0 has a larger weight.",
    "start": "331880",
    "end": "336640"
  },
  {
    "text": "So next step, I prune.",
    "start": "336640",
    "end": "338490"
  },
  {
    "text": "I keep only the best\ncandidate, which in this case,",
    "start": "338490",
    "end": "342419"
  },
  {
    "text": "is X1 equals 0.",
    "start": "342420",
    "end": "345170"
  },
  {
    "text": "So then I go to i equals 2.",
    "start": "345170",
    "end": "348620"
  },
  {
    "text": "And I extend that assignment to\nthree possible settings of X2,",
    "start": "348620",
    "end": "355550"
  },
  {
    "text": "compute their weights.",
    "start": "355550",
    "end": "357139"
  },
  {
    "text": "And then I keep the best one,\nwhich in this case is 0, 1.",
    "start": "357140",
    "end": "362870"
  },
  {
    "text": "And now I extend again to X3.",
    "start": "362870",
    "end": "366979"
  },
  {
    "text": "Three possible values\nto set X3, compute",
    "start": "366980",
    "end": "369650"
  },
  {
    "text": "the weights of these now\ncomplete assignments.",
    "start": "369650",
    "end": "374360"
  },
  {
    "text": "And then I choose the best one.",
    "start": "374360",
    "end": "378000"
  },
  {
    "text": "So in this case, greedy search\nends up with assignment 0, 1,",
    "start": "378000",
    "end": "382820"
  },
  {
    "text": "1, with a weight of 4.",
    "start": "382820",
    "end": "385280"
  },
  {
    "text": "And if you remember\nthis example,",
    "start": "385280",
    "end": "389550"
  },
  {
    "text": "the best weight\nassignment have weight 8.",
    "start": "389550",
    "end": "392960"
  },
  {
    "text": "So 4 is definitely\nnot the right answer.",
    "start": "392960",
    "end": "395569"
  },
  {
    "text": "But it's not 0 either.",
    "start": "395570",
    "end": "397280"
  },
  {
    "text": "It found something.",
    "start": "397280",
    "end": "398700"
  },
  {
    "start": "398700",
    "end": "402840"
  },
  {
    "text": "OK, so what's the problem\nwith greedy search",
    "start": "402840",
    "end": "404880"
  },
  {
    "text": "is that it's too myopic and\nonly keeps the single best",
    "start": "404880",
    "end": "409230"
  },
  {
    "text": "candidate.",
    "start": "409230",
    "end": "410370"
  },
  {
    "text": "So beam search is just\nthe natural generalization",
    "start": "410370",
    "end": "413820"
  },
  {
    "text": "of greedy, where I'm\nkeeping at most K candidates",
    "start": "413820",
    "end": "418560"
  },
  {
    "text": "at each level.",
    "start": "418560",
    "end": "421090"
  },
  {
    "text": "So let's say K equals 4.",
    "start": "421090",
    "end": "423880"
  },
  {
    "text": "So I'm going to start\nwith empty assignment.",
    "start": "423880",
    "end": "427500"
  },
  {
    "text": "I'm going to extend.",
    "start": "427500",
    "end": "431240"
  },
  {
    "text": "And then I don't need to prune.",
    "start": "431240",
    "end": "433039"
  },
  {
    "text": "Because there's only\ntwo possible partial",
    "start": "433040",
    "end": "435980"
  },
  {
    "text": "assignments here.",
    "start": "435980",
    "end": "437420"
  },
  {
    "text": "And I have a capacity of 4.",
    "start": "437420",
    "end": "439670"
  },
  {
    "text": "I'm going to extend again.",
    "start": "439670",
    "end": "441560"
  },
  {
    "text": "Again, I don't need to prune.",
    "start": "441560",
    "end": "443910"
  },
  {
    "text": "But then next, I'm\ngoing to extend",
    "start": "443910",
    "end": "446190"
  },
  {
    "text": "each of the elements on my\nbeam, the partial assignments,",
    "start": "446190",
    "end": "451760"
  },
  {
    "text": "extend each of these.",
    "start": "451760",
    "end": "453350"
  },
  {
    "text": "And now, I have 8.",
    "start": "453350",
    "end": "454700"
  },
  {
    "text": "And now, I need to reduce the\n8 partial assignments to 4.",
    "start": "454700",
    "end": "460300"
  },
  {
    "text": "And to do this, I'm\ngoing to simply compute",
    "start": "460300",
    "end": "462669"
  },
  {
    "text": "the weight of each of these\n8 partial assignments,",
    "start": "462670",
    "end": "466060"
  },
  {
    "text": "and then take the four which\nhave the highest weight.",
    "start": "466060",
    "end": "470090"
  },
  {
    "text": "And now let's suppose\nthose are these four.",
    "start": "470090",
    "end": "473300"
  },
  {
    "text": "And then I continue only\nexpanding the ones I've kept",
    "start": "473300",
    "end": "477379"
  },
  {
    "text": "and then keeping the\nones, again, the top four,",
    "start": "477380",
    "end": "481640"
  },
  {
    "text": "and then keep on going.",
    "start": "481640",
    "end": "483780"
  },
  {
    "text": "So notice that visually I'm\nexploring only a very, very",
    "start": "483780",
    "end": "489310"
  },
  {
    "text": "small fraction of the tree.",
    "start": "489310",
    "end": "491960"
  },
  {
    "text": "But I'm doing this\nkind of holistically,",
    "start": "491960",
    "end": "494440"
  },
  {
    "text": "looking down the tree\nat kind of multiple--",
    "start": "494440",
    "end": "499630"
  },
  {
    "text": "I could be exploring\ndifferent parts",
    "start": "499630",
    "end": "502030"
  },
  {
    "text": "of the tree at the same time.",
    "start": "502030",
    "end": "506700"
  },
  {
    "text": "So formally, beam search\nkeeps most K candidates",
    "start": "506700",
    "end": "512120"
  },
  {
    "text": "of partial assignments.",
    "start": "512120",
    "end": "514400"
  },
  {
    "text": "I'm going to initialize\nthe candidate set",
    "start": "514400",
    "end": "516620"
  },
  {
    "text": "to be just the single partial\nassignment, which is empty.",
    "start": "516620",
    "end": "521023"
  },
  {
    "text": "Now again, like\ngreedy search, I'm",
    "start": "521023",
    "end": "522440"
  },
  {
    "text": "going to go through the\nvariables one at a time.",
    "start": "522440",
    "end": "525080"
  },
  {
    "text": "I'm going to extend.",
    "start": "525080",
    "end": "527440"
  },
  {
    "text": "In this case, I'm\ngoing to consider",
    "start": "527440",
    "end": "529810"
  },
  {
    "text": "each partial assignment in\nC and each possible value",
    "start": "529810",
    "end": "535720"
  },
  {
    "text": "that it can assign Xi.",
    "start": "535720",
    "end": "538389"
  },
  {
    "text": "And I'm going perform the\nextend the assignment.",
    "start": "538390",
    "end": "543730"
  },
  {
    "text": "And I'm just going\nto keep track.",
    "start": "543730",
    "end": "545620"
  },
  {
    "text": "C prime is going to be\nthe new set of candidates.",
    "start": "545620",
    "end": "549560"
  },
  {
    "text": "And then now I'm going\nto prune that set",
    "start": "549560",
    "end": "552140"
  },
  {
    "text": "by computing the weight\nfor each element of C prime",
    "start": "552140",
    "end": "557600"
  },
  {
    "text": "and just keeping\nthe top K elements.",
    "start": "557600",
    "end": "562170"
  },
  {
    "text": "So this is not guaranteed\nto find the maximum weight",
    "start": "562170",
    "end": "564450"
  },
  {
    "text": "assignment either.",
    "start": "564450",
    "end": "567690"
  },
  {
    "text": "But sometimes it works better.",
    "start": "567690",
    "end": "569380"
  },
  {
    "text": "So let's look at this example,\nobject tracking and extend",
    "start": "569380",
    "end": "578040"
  },
  {
    "text": "from the empty assignment to\nget three partial assignments",
    "start": "578040",
    "end": "581459"
  },
  {
    "text": "to X1.",
    "start": "581460",
    "end": "582095"
  },
  {
    "start": "582095",
    "end": "584970"
  },
  {
    "text": "I prune to the top three,\nso nothing gets removed.",
    "start": "584970",
    "end": "589199"
  },
  {
    "text": "I then extend.",
    "start": "589200",
    "end": "590970"
  },
  {
    "text": "So each of these three\npartial assignments",
    "start": "590970",
    "end": "594689"
  },
  {
    "text": "gets extended into\nthree additional ones.",
    "start": "594690",
    "end": "598050"
  },
  {
    "text": "Now I have nine.",
    "start": "598050",
    "end": "600120"
  },
  {
    "text": "And now, I'm going to prune\ndown from nine to three.",
    "start": "600120",
    "end": "604190"
  },
  {
    "text": "So that will keep all\nthe assignments here",
    "start": "604190",
    "end": "608030"
  },
  {
    "text": "with a positive weight.",
    "start": "608030",
    "end": "610680"
  },
  {
    "text": "And now I extend again\nto find settings of X3,",
    "start": "610680",
    "end": "617190"
  },
  {
    "text": "compute each of these weights.",
    "start": "617190",
    "end": "618960"
  },
  {
    "text": "And then I'm going to\ntake the top assignments.",
    "start": "618960",
    "end": "626820"
  },
  {
    "text": "OK, so now, notice\nthat the top assignment",
    "start": "626820",
    "end": "631650"
  },
  {
    "text": "that I have right now is\n1, 2, 2 with a weight of 8.",
    "start": "631650",
    "end": "636630"
  },
  {
    "text": "And in this case, I got lucky.",
    "start": "636630",
    "end": "638220"
  },
  {
    "text": "And I found actual\nmax weight assignment.",
    "start": "638220",
    "end": "642149"
  },
  {
    "text": "But in general, you\nwon't be guaranteed that.",
    "start": "642150",
    "end": "645030"
  },
  {
    "start": "645030",
    "end": "649530"
  },
  {
    "start": "649000",
    "end": "731000"
  },
  {
    "text": "OK, so what is the time\ncomplexity of beam search?",
    "start": "649530",
    "end": "652650"
  },
  {
    "text": "Because one of the advantages is\nthat it's supposed to be fast.",
    "start": "652650",
    "end": "656280"
  },
  {
    "text": "So let's do a simple\ncalculation here.",
    "start": "656280",
    "end": "658140"
  },
  {
    "text": "So suppose we have\nn variables, which",
    "start": "658140",
    "end": "659960"
  },
  {
    "text": "is the depth of this tree.",
    "start": "659960",
    "end": "662060"
  },
  {
    "text": "And suppose that\neach of the variables",
    "start": "662060",
    "end": "664550"
  },
  {
    "text": "has b elements,\nwhich is going to be",
    "start": "664550",
    "end": "667279"
  },
  {
    "text": "the branching factor here.",
    "start": "667280",
    "end": "669320"
  },
  {
    "text": "And then the beam size is K.\nSo what is the time that it",
    "start": "669320",
    "end": "673370"
  },
  {
    "text": "takes to run beam search?",
    "start": "673370",
    "end": "675230"
  },
  {
    "text": "It's going to be for each\nof the variables, each level",
    "start": "675230",
    "end": "680360"
  },
  {
    "text": "of this tree, we're going to\nhave a set of candidates which",
    "start": "680360",
    "end": "685350"
  },
  {
    "text": "is of size K. And\nthe extension phase",
    "start": "685350",
    "end": "690600"
  },
  {
    "text": "is going to take each\nof these K and extend it",
    "start": "690600",
    "end": "693449"
  },
  {
    "text": "into b candidates.",
    "start": "693450",
    "end": "695010"
  },
  {
    "text": "So then I'm going to end up with\nKb extended candidates total.",
    "start": "695010",
    "end": "701090"
  },
  {
    "text": "And then I'm going to\nhave to take the top K.",
    "start": "701090",
    "end": "705010"
  },
  {
    "text": "So the time it takes to\ntake a list of Kb elements",
    "start": "705010",
    "end": "708880"
  },
  {
    "text": "and select the top K elements\nis Kb log K by building a heap.",
    "start": "708880",
    "end": "716730"
  },
  {
    "text": "So the total time is nKb\nlog K. And importantly,",
    "start": "716730",
    "end": "721320"
  },
  {
    "text": "this is linear in the\nnumber of variables.",
    "start": "721320",
    "end": "725010"
  },
  {
    "text": "Whereas, backtracking\nsearch would",
    "start": "725010",
    "end": "726480"
  },
  {
    "text": "be exponential in the\nnumber of variables.",
    "start": "726480",
    "end": "729089"
  },
  {
    "start": "729090",
    "end": "731970"
  },
  {
    "start": "731000",
    "end": "869000"
  },
  {
    "text": "OK, so let us summarize now.",
    "start": "731970",
    "end": "734399"
  },
  {
    "text": "So beam search is a\nfairly simple heuristic",
    "start": "734400",
    "end": "737670"
  },
  {
    "text": "to approximate maximum\nweight assignments.",
    "start": "737670",
    "end": "741450"
  },
  {
    "text": "And it's really done if you're\nreally in a hurry and you",
    "start": "741450",
    "end": "743923"
  },
  {
    "text": "don't really care about getting\nmaximum weight assignment,",
    "start": "743923",
    "end": "746339"
  },
  {
    "text": "because you probably won't.",
    "start": "746340",
    "end": "748360"
  },
  {
    "text": "So the nice thing\nabout beam search",
    "start": "748360",
    "end": "750670"
  },
  {
    "text": "is it has this\nparameter, K, which",
    "start": "750670",
    "end": "752230"
  },
  {
    "text": "allows you to control the\ntrade off between efficiency",
    "start": "752230",
    "end": "755470"
  },
  {
    "text": "and accuracy.",
    "start": "755470",
    "end": "757550"
  },
  {
    "text": "So if you're really in a\nhurry, you set K equals 1.",
    "start": "757550",
    "end": "759970"
  },
  {
    "text": "You just get greedy search,\nwhich sometimes actually gets",
    "start": "759970",
    "end": "763300"
  },
  {
    "text": "you pretty good answers.",
    "start": "763300",
    "end": "766390"
  },
  {
    "text": "And if as you increase\nK more and more,",
    "start": "766390",
    "end": "770590"
  },
  {
    "text": "if you increase K to\ninfinity, then you'll",
    "start": "770590",
    "end": "772660"
  },
  {
    "text": "definitely search the\nentire search tree.",
    "start": "772660",
    "end": "775629"
  },
  {
    "text": "And you will get\nthe optimal answer.",
    "start": "775630",
    "end": "778150"
  },
  {
    "text": "But this is basically\nexponential time.",
    "start": "778150",
    "end": "781620"
  },
  {
    "text": "One thing to know about\nbeam search with K",
    "start": "781620",
    "end": "784610"
  },
  {
    "text": "equals infinity it is performing\na breadth first search",
    "start": "784610",
    "end": "788060"
  },
  {
    "text": "of the tree.",
    "start": "788060",
    "end": "789050"
  },
  {
    "text": "Because it performs\nlevel by level.",
    "start": "789050",
    "end": "791464"
  },
  {
    "text": "And it explores all of the\nnodes in a tree systematically.",
    "start": "791465",
    "end": "797470"
  },
  {
    "text": "So using this analogy, I want\nto end with a final note here,",
    "start": "797470",
    "end": "804529"
  },
  {
    "text": "which is that backtracking\nsearch is really",
    "start": "804530",
    "end": "808210"
  },
  {
    "text": "like doing a depth first\nsearch on the search tree.",
    "start": "808210",
    "end": "811300"
  },
  {
    "text": "It dives deeply into\none complete assignment,",
    "start": "811300",
    "end": "817390"
  },
  {
    "text": "and then backtracks,\nand then finds",
    "start": "817390",
    "end": "819010"
  },
  {
    "text": "another complete\nassignment and backtracks,",
    "start": "819010",
    "end": "820900"
  },
  {
    "text": "looking kind of one\nassignment at a time.",
    "start": "820900",
    "end": "824510"
  },
  {
    "text": "Whereas, beam search is more\nakin to breadth first search,",
    "start": "824510",
    "end": "828380"
  },
  {
    "text": "where we're proceeding\nlevel by level.",
    "start": "828380",
    "end": "830808"
  },
  {
    "text": "But the main difference\nwith breadth first search",
    "start": "830808",
    "end": "832850"
  },
  {
    "text": "is that we're doing this\nheuristic pruning at each level",
    "start": "832850",
    "end": "836660"
  },
  {
    "text": "to make sure that we don't\nhave too many candidates.",
    "start": "836660",
    "end": "840050"
  },
  {
    "text": "And the way it's using\nthat, doing that pruning",
    "start": "840050",
    "end": "844250"
  },
  {
    "text": "is based on the factors\nthat it can evaluate so far.",
    "start": "844250",
    "end": "848570"
  },
  {
    "text": "So for beam search\nto work, you really",
    "start": "848570",
    "end": "851630"
  },
  {
    "text": "need it to be the case\nthat the factors are local",
    "start": "851630",
    "end": "855740"
  },
  {
    "text": "and they can be evaluated as\nmuch as possible along the way,",
    "start": "855740",
    "end": "859430"
  },
  {
    "text": "and not all at the very end.",
    "start": "859430",
    "end": "862070"
  },
  {
    "text": "All right, so that's\nthe end of this module.",
    "start": "862070",
    "end": "864790"
  },
  {
    "start": "864790",
    "end": "869000"
  }
]