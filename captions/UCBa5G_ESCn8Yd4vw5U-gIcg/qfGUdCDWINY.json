[
  {
    "text": "Greetings. Welcome to number three of tech Akana. And today's topic is macro's writing the control sequences.",
    "start": "3060",
    "end": "15420"
  },
  {
    "text": "Gosh, I don't know how to start. Yes. You have a question now. Help me start. This is just about the homework you gave yesterday.",
    "start": "15420",
    "end": "23460"
  },
  {
    "text": "And probably before where you're supposed to be plotting points. Where do you want? Where do you want the origin placed? Well, that's you know, that's ambiguous.",
    "start": "23460",
    "end": "34140"
  },
  {
    "text": "So in the program that I wrote, I just I think I assumed that it was that the points were given in units of value.",
    "start": "34140",
    "end": "44850"
  },
  {
    "text": "And then I, I use some arbitrary things so that this one would work out. It wouldn't go off the left of the page. So I move.",
    "start": "44850",
    "end": "52290"
  },
  {
    "text": "So I'm I moved it in an inch or something from the left margin. And then then I went down about five, about four or five inches from the top of the page.",
    "start": "52290",
    "end": "61550"
  },
  {
    "text": "And I cropped it to make this hand out.",
    "start": "61550",
    "end": "66990"
  },
  {
    "text": "I just took a piece for the scissors and pasted a bunch of things together.",
    "start": "66990",
    "end": "72240"
  },
  {
    "text": "So you should make that specify a bowl by a user if you wanted to. But it's. But it is certainly ambiguous. It could give you the wrong origin.",
    "start": "72240",
    "end": "81010"
  },
  {
    "text": "It just. This will print somewhere out in limbo. Just arbitrary. Placed it at the center of the page. But I didn't I didn't make my macro figure out that it would fall on the page and adjust accordingly.",
    "start": "81010",
    "end": "92729"
  },
  {
    "text": "That would have been a little more complicated. Thank you. All right. We'll talk a little more about these problems that anyone is having with the problems after I get started.",
    "start": "92730",
    "end": "105960"
  },
  {
    "text": "No control sequences give you an enormous amount of power.",
    "start": "105960",
    "end": "113909"
  },
  {
    "text": "It's almost impossible to conceive of of what you can do with these control sequences.",
    "start": "113910",
    "end": "120210"
  },
  {
    "text": "Even though the definitions are comparatively simple, the chapter of the tech manual about control sequences has this one weird example that shows you pretty much about everything.",
    "start": "120210",
    "end": "132130"
  },
  {
    "text": "What the basic rules are for matching the parameter is getting started. And. And then how substitution gets done.",
    "start": "132130",
    "end": "141360"
  },
  {
    "text": "And you go through different phases. First, you think control sequences are very simple and you'll use them only to make an abbreviation for a dozen characters or so.",
    "start": "141360",
    "end": "151670"
  },
  {
    "text": "And then you start to see that you can actually do.",
    "start": "151670",
    "end": "156690"
  },
  {
    "text": "You can use control sequences to save information. And not really the user never uses the control sequence,",
    "start": "156690",
    "end": "163290"
  },
  {
    "text": "but the just the macros uses control sequences to communicate between macros, between output routine and the main program and so on.",
    "start": "163290",
    "end": "173700"
  },
  {
    "text": "And then you come to the situation where you're thinking control sequence can do everything.",
    "start": "173700",
    "end": "179099"
  },
  {
    "text": "Then all of a sudden the thing won't expand at the right time or it will expand at the wrong time.",
    "start": "179100",
    "end": "184290"
  },
  {
    "text": "And you and you're beginning to figure out that it won't be able to do anything. And you have to fight with them a little bit in order to get them. Now, that's that's a little bit unfortunate.",
    "start": "184290",
    "end": "193680"
  },
  {
    "text": "On the other hand, that's part of the game. And it's a challenge that sometimes keeps me busy for for several hours.",
    "start": "193680",
    "end": "202560"
  },
  {
    "text": "And I can say that those several hours are ah ah ah, pure joy. But having solved the problem afterwards, this is fun.",
    "start": "202560",
    "end": "209980"
  },
  {
    "text": "Now, the main thing, though, was I wanted to have something where you could define the rules for control sequences briefly and write the code,",
    "start": "209980",
    "end": "216650"
  },
  {
    "text": "you know, in a small amount of time. They wouldn't want that. The implementation was too much and I got a lot more than I than I expected I would get.",
    "start": "216650",
    "end": "225180"
  },
  {
    "text": "But I. But I don't I don't claim to have the world's best macro package.",
    "start": "225180",
    "end": "234480"
  },
  {
    "text": "In fact, yes, I'm sorry to. Interrupted an incredibly high pitched squeal coming back here.",
    "start": "234480",
    "end": "239860"
  },
  {
    "text": "That was done. Was coming. And it's it's kind of a tribute.",
    "start": "239860",
    "end": "248660"
  },
  {
    "text": "It came on and off again. Yes.",
    "start": "248660",
    "end": "260790"
  },
  {
    "text": "Did anyone hear what I said about control sequences? Like Dr. Strangelove.",
    "start": "260790",
    "end": "272170"
  },
  {
    "text": "OK, so. So then you you realize that some of the effects about control sequences aren't as simple as we thought",
    "start": "272170",
    "end": "281190"
  },
  {
    "text": "they were and that the rules for exactly when things are expanded and aren't are a little bit implicit.",
    "start": "281190",
    "end": "288180"
  },
  {
    "text": "And I have to admit that sometimes I get surprised at what what happens. And this is true of every Mac grow package that I know. That is,",
    "start": "288180",
    "end": "297419"
  },
  {
    "text": "you start out thinking that it's a rather simple thing and then you start to start looking at how powerful it is and you see combinations of things.",
    "start": "297420",
    "end": "305020"
  },
  {
    "text": "You can imagine what it's going to do. And the thing is, is unambiguous.",
    "start": "305020",
    "end": "312000"
  },
  {
    "text": "But in its own funny, ambiguous way. And so macro packages, I think, have historically always included a way for you to trace and find out what it's doing so that you can really figure out these these inscrutability.",
    "start": "312000",
    "end": "324570"
  },
  {
    "text": "Now, that's something of what I want to say today. That is how we can how you can coerce the the macro package should do what we wanted to.",
    "start": "324570",
    "end": "335599"
  },
  {
    "text": "Last week, I mentioned the two phases of tax input,",
    "start": "335600",
    "end": "341270"
  },
  {
    "text": "which I called the mouth and the stomach and the mouth is the part that eats the things out of a out of the text file.",
    "start": "341270",
    "end": "350180"
  },
  {
    "text": "And then things that you type in after a star prompt on your terminal.",
    "start": "350180",
    "end": "355400"
  },
  {
    "text": "And the stomach is the part that actually sets type and does the the the semantic action.",
    "start": "355400",
    "end": "364430"
  },
  {
    "text": "So you could also consider the syntax and semantics. The mouth part of tech uses these classifies everything it reads from a file or the terminal as one of 14 things.",
    "start": "364430",
    "end": "378690"
  },
  {
    "text": "Number zero to 13 in this code associates a number from zero to 13 with each of these characters.",
    "start": "378690",
    "end": "388130"
  },
  {
    "text": "This is done at the time that the that at the time the thing first goes into the mouth.",
    "start": "388130",
    "end": "394610"
  },
  {
    "text": "So whatever the values of the codes are at that time governs what the mouth is doing to them.",
    "start": "394610",
    "end": "401750"
  },
  {
    "text": "And once they're classified that way, that classification stays. So, for example, when you define a control sequence,",
    "start": "401750",
    "end": "410120"
  },
  {
    "text": "the escape character that was in effect after the word death was read is the one",
    "start": "410120",
    "end": "417199"
  },
  {
    "text": "that that identifies the the the thing after the def to be a control sequence.",
    "start": "417200",
    "end": "423110"
  },
  {
    "text": "All the other the the the code left brace that follows that again,",
    "start": "423110",
    "end": "431449"
  },
  {
    "text": "has to be recognizable as a left phrase character doesn't have to be a left very symbol. It just has to have code three or whatever.",
    "start": "431450",
    "end": "438259"
  },
  {
    "text": "So if you define, say, a backslash to be your character, you read it in a certain way with a Mac or you read in a certain escape sequence.",
    "start": "438260",
    "end": "446660"
  },
  {
    "text": "Wow. Backslash was the escape character. You pass that into another macro which redefines escape to be a normal printing character.",
    "start": "446660",
    "end": "454490"
  },
  {
    "text": "There's no way that that's there will be. That's still a control sequence with the same. There's no it'll explode that apart. Is that right? You can change that once it's gone into the mouth.",
    "start": "454490",
    "end": "465080"
  },
  {
    "text": "It's been classified. Control sequences means you can't break it apart. The letters can explode. No, no. You want to explode into letters. You can send it to a file. OK.",
    "start": "465080",
    "end": "474289"
  },
  {
    "text": "And the sentence statement will we'll put it on the file and then you can read it back in my file again.",
    "start": "474290",
    "end": "479570"
  },
  {
    "text": "But that's the that's inside. But that's the only way the stomach can get back to the mouth. Is through the psyche. Now, the classification process has.",
    "start": "479570",
    "end": "489370"
  },
  {
    "text": "Has has. Has done. OK. Now, for example, if someone says def.",
    "start": "489370",
    "end": "501010"
  },
  {
    "text": "OK, let me let me show you what I did in the tech manual itself. In order to in order to print. In order to print sort of arbitrary strings of text.",
    "start": "501010",
    "end": "509870"
  },
  {
    "text": "Can we have this. Can we have this suns on the screen.",
    "start": "509870",
    "end": "515960"
  },
  {
    "text": "I defined a macro that was backslash equivalent sine and the beginning of that macro.",
    "start": "515960",
    "end": "525930"
  },
  {
    "text": "It started out with various things that would would change codes. So I changed code of I don't know what these numbers are, but I think 44 is and is a is a dollar sign, for example.",
    "start": "525930",
    "end": "536660"
  },
  {
    "text": "Might change that back to a twelve. Which means other characters. So now this says that henceforth when the mouth sees something.",
    "start": "536660",
    "end": "543899"
  },
  {
    "text": "If after this definition is taking a placement within the mouth will classify a sign as well.",
    "start": "543900",
    "end": "550220"
  },
  {
    "text": "This isn't very well focused on my screen. I don't know if you can see it any better. And I changed all the other things. I changed back all the other things too, so that they left.",
    "start": "550220",
    "end": "559610"
  },
  {
    "text": "Everything I typed would be like another character. So if I needed one escape one way out.",
    "start": "559610",
    "end": "565399"
  },
  {
    "text": "And so I changed, you know, the left braces and everything were changed so that they wouldn't be like I could type later on in my text.",
    "start": "565400",
    "end": "576770"
  },
  {
    "text": "I'm typing something like this. I put a left brace. And then I started this control sequence.",
    "start": "576770",
    "end": "582860"
  },
  {
    "text": "And then I would take some random text, like in input basic.",
    "start": "582860",
    "end": "588200"
  },
  {
    "text": "Or I could say, you know, let it take or not interpret this as as anything special.",
    "start": "588200",
    "end": "594470"
  },
  {
    "text": "It would be just text inside of this equivalence mode on my keyboard. Equivalence was a nice symbol to use. And so you could say, well, let me I don't know what the example I should use here.",
    "start": "594470",
    "end": "604750"
  },
  {
    "text": "And I could say def of this almost not quite def of.",
    "start": "604750",
    "end": "615230"
  },
  {
    "text": "Of a to be something or other. And so this right brain, left brain wouldn't be the same as the right brain.",
    "start": "615230",
    "end": "622260"
  },
  {
    "text": "I could I could say in my text, if I just wanted to refer to a left brace all by itself, I could refer to a left brace.",
    "start": "622260",
    "end": "629520"
  },
  {
    "text": "And then I got out of that by saying equivalence backslash. And coming back in, it's looked sort of symmetrical. OK.",
    "start": "629520",
    "end": "638700"
  },
  {
    "text": "And so I could print a left brace in that font. By by typing this. This is the way I set up my macros to do it.",
    "start": "638700",
    "end": "646700"
  },
  {
    "text": "So. So there was this little ritual that I typed these three characters and I have verbatim. And then I have three characters to come out, except there had to be one way to get out again.",
    "start": "646700",
    "end": "657540"
  },
  {
    "text": "And so I also quoted the the equivalence symbol to be a an escape character.",
    "start": "657540",
    "end": "665850"
  },
  {
    "text": "And I wouldn't allow myself to type equivalent symbols in here. So this equivalence symbol is the escape character.",
    "start": "665850",
    "end": "671069"
  },
  {
    "text": "All right. So I. So I don't know what the code for equivalence is. But let's assume for lack of, you know, without loss of generality, that's twenty three.",
    "start": "671070",
    "end": "679050"
  },
  {
    "text": "And I think escape characters type zero. So I changed that to zero.",
    "start": "679050",
    "end": "684060"
  },
  {
    "text": "Let's say. And then I also selected the typewriter font and.",
    "start": "684060",
    "end": "689730"
  },
  {
    "text": "And I think that was the end. Well I did find a few other. I also had in here I think of a couple other definitions.",
    "start": "689730",
    "end": "698700"
  },
  {
    "text": "For example, I think I, I defined less than or equal to be as to be so super pose an underlying on to a less than sign,",
    "start": "698700",
    "end": "711900"
  },
  {
    "text": "because in a typewriter front it doesn't have a less than or equal. And so if I had to define a few special things like that in case I want to get less than or equal into my example.",
    "start": "711900",
    "end": "719070"
  },
  {
    "text": "So I do find a few a few other symbols. Now I notice that in this definition I'm using backslash still as the escape character.",
    "start": "719070",
    "end": "728130"
  },
  {
    "text": "I'm not, you know, here I changed the code, a backslash, whatever it is to be typed. Well, backslash to be type to be typed 12. But I'm still using it as an escape character in this def and everything else.",
    "start": "728130",
    "end": "741850"
  },
  {
    "text": "The reason is a district code hasn't taken effect. This this is just a piece of text. This is a control sequence to code an apostrophe and so on.",
    "start": "741850",
    "end": "750779"
  },
  {
    "text": "But this definition is being used in the mouth is just reading this in using its present meanings of all the symbols.",
    "start": "750780",
    "end": "757510"
  },
  {
    "text": "It's not acting on his stuff. It's just reading it in, storing it away. Now, there's no actually what happens to a control sequence after it gets classified by the mouth.",
    "start": "757510",
    "end": "766290"
  },
  {
    "text": "It gets it gets stored in the you know, like I can't really call it the brain, but we could call it the the the the the nervous system anyway.",
    "start": "766290",
    "end": "780570"
  },
  {
    "text": "So tech somewhere. How has has these. Has this this long string of text with everything classified into each token one one thing at a time.",
    "start": "780570",
    "end": "790830"
  },
  {
    "text": "A talk like this is this, this has been classified as one token and it's a particular pointer to a place",
    "start": "790830",
    "end": "797820"
  },
  {
    "text": "in the in text memory that that is associated with that control sequence.",
    "start": "797820",
    "end": "804270"
  },
  {
    "text": "If you redefine that control sequence, the new definition will take place. When I refer to that part in the memory. This is a character.",
    "start": "804270",
    "end": "812579"
  },
  {
    "text": "This is a character. This equals sign. All of these are. This will be a digit. I think it's classified as another character that's just recognized to be between zero and nine.",
    "start": "812580",
    "end": "824069"
  },
  {
    "text": "So it hasn't been classified. As you know, the one is just there as a one. It doesn't doesn't the mouth doesn't convert that into a number twelve.",
    "start": "824070",
    "end": "832830"
  },
  {
    "text": "It just takes as a one followed by two. So all of these things are just stored away as a long list according to the classifications that were in effect at that time.",
    "start": "832830",
    "end": "846279"
  },
  {
    "text": "Then I also define backslash backslash afterwards.",
    "start": "846280",
    "end": "852510"
  },
  {
    "text": "And this is the one that's eventually going to be equivalent backslash.",
    "start": "852510",
    "end": "860190"
  },
  {
    "text": "When they when the equivalence becomes the escape sequence. This is this the control sequence that escape followed by that backslash.",
    "start": "860190",
    "end": "868980"
  },
  {
    "text": "So so that's going to be the one that does everything that I. That I have to do when coming out. Now, is there anything I have to do in coming out just by just by getting out?",
    "start": "868980",
    "end": "881790"
  },
  {
    "text": "I have to be able to. I think what I do is I change the code of the right phrase back again, which is different.",
    "start": "881790",
    "end": "889420"
  },
  {
    "text": "I'm different ASCII codes, but it's still it's it's 176. And I change that back to a right phrase, which I think is two or three.",
    "start": "889420",
    "end": "896880"
  },
  {
    "text": "I forget what the code is. These codes were never made mnemonic. I'm sorry. And and then that's all.",
    "start": "896880",
    "end": "902550"
  },
  {
    "text": "That's all this control sequence does. It's enough for it to recognize the right phrase. I think I need a space here. It's enough for this to recognize because otherwise it'll scan the right grace to see if it's part of the.",
    "start": "902550",
    "end": "914480"
  },
  {
    "text": "No, while it's scanned that right. Grace still thinks it hasn't changed the code yet.",
    "start": "914480",
    "end": "920000"
  },
  {
    "text": "So I need the space here in order to give the stomach time to get the information from cable to suit.",
    "start": "920000",
    "end": "926330"
  },
  {
    "text": "But after that is true, then the right phrase is it is enough to be recognized and then that'll end the group and all these other jokers will go away.",
    "start": "926330",
    "end": "933470"
  },
  {
    "text": "So I don't have to unshackled everything. Just just just get out of that group. OK. But that's about the way these these control sequences work. And I think it gives you some idea as to how the how the value of the cause that",
    "start": "933470",
    "end": "945490"
  },
  {
    "text": "at the time the mouth gets it is the is the is the print is the important thing.",
    "start": "945490",
    "end": "951050"
  },
  {
    "text": "Once the mouth has passed it into into one of its tokens, classified it,",
    "start": "951050",
    "end": "957560"
  },
  {
    "text": "then it stays that forever after mouth also is the one that that knows the rules about when to put power in for a blank line,",
    "start": "957560",
    "end": "966620"
  },
  {
    "text": "when to ignore several spaces in a row and so on. That's all. That's all based on the classifications of these characters.",
    "start": "966620",
    "end": "975050"
  },
  {
    "text": "What's the definition of backslash backslash with the text of backslash equivalents?",
    "start": "975050",
    "end": "980630"
  },
  {
    "text": "So yeah, that wouldn't have hurt. You wouldn't hurt. Yeah. Fairly free up the back. Which box that would free up backside backlash over.",
    "start": "980630",
    "end": "988470"
  },
  {
    "text": "Well, as a macro that I could define, it's a kind of a handy one to define code. It's so easy to type. You can hit the key twice. And so.",
    "start": "988470",
    "end": "995990"
  },
  {
    "text": "So that's right. Actually I could put that in there and. And it would have been Varya. OK, now.",
    "start": "995990",
    "end": "1006670"
  },
  {
    "text": "So then the then the stomach takes takes effect and the stomach.",
    "start": "1006670",
    "end": "1014450"
  },
  {
    "text": "There is a little bit of communication to the. That goes on in between the mouth and the stomach.",
    "start": "1014450",
    "end": "1021460"
  },
  {
    "text": "And that is every once in a while some of these stored stored definitions are regurgitated. Whatever want to call it that they come back through because you have to expand the control sequence.",
    "start": "1021460",
    "end": "1033020"
  },
  {
    "text": "It's time for the stomach wants to read something, but it has to get it. Not from the source text, but. But it's interrupted by a control sequence.",
    "start": "1033020",
    "end": "1039850"
  },
  {
    "text": "And so we get in the middle of a control sequence and that calls and another one that has to be was user defined, has to be expanded.",
    "start": "1039850",
    "end": "1045160"
  },
  {
    "text": "And so you get a stack of of of things inside of other things and inside of other things.",
    "start": "1045160",
    "end": "1054640"
  },
  {
    "text": "Sometimes, in fact, tech will read it, will read it and decide it didn't it didn't really want that one.",
    "start": "1054640",
    "end": "1060590"
  },
  {
    "text": "And it's gonna read it again, like once looking for a dimension or it's looking ahead to see if you wrote p us to see if there was any, any stretching in a glue.",
    "start": "1060590",
    "end": "1071050"
  },
  {
    "text": "And and maybe the text said p l you d or something like that or feel you. Anything else. And then tech will we'll say oops that wasn't plus there was no glue here.",
    "start": "1071050",
    "end": "1081910"
  },
  {
    "text": "Put it all back in and it comes again. So some of the stuff sometimes it has to back up over over symbols that it's read and give them back to again.",
    "start": "1081910",
    "end": "1090410"
  },
  {
    "text": "So, so besides, one of the things that that there can appear is the word input and that will start reading from another file,",
    "start": "1090410",
    "end": "1098890"
  },
  {
    "text": "in which case the mouth will have to have to actually do the contact with the file. So you have this big stack of things coming on input that the lowest level is the terminal.",
    "start": "1098890",
    "end": "1107500"
  },
  {
    "text": "Then then probably a file and then probably some control sequences, a patrol sequence, maybe something that was backed up.",
    "start": "1107500",
    "end": "1114340"
  },
  {
    "text": "And then maybe another input from a file or something is can this can get rather rather high.",
    "start": "1114340",
    "end": "1122970"
  },
  {
    "text": "It's great. Now I can get up to 80 levels and the human mind apparently can only handle about seven at a time, according to these depth hypothesis.",
    "start": "1122970",
    "end": "1132490"
  },
  {
    "text": "Now now this is the way the input gets to the stomach.",
    "start": "1132490",
    "end": "1139540"
  },
  {
    "text": "The stomach is where all the semantics takes place, including including if this is what's a little bit disconcerting at times.",
    "start": "1139540",
    "end": "1151600"
  },
  {
    "text": "And that is that things like if and all the other tests that you have here and then else are done in the stomach and not en route to the stomach.",
    "start": "1151600",
    "end": "1161730"
  },
  {
    "text": "And so that means that you that the word if will not be recognized unless the ear will not be interrupted in the midst of something else.",
    "start": "1161730",
    "end": "1175549"
  },
  {
    "text": "I suppose you're trying to scan for a a number or or a dimension or something like that in the word if comes along.",
    "start": "1175550",
    "end": "1184330"
  },
  {
    "text": "It won't. That won't work. You can't you can't say if something then points else millimeters or something and put that after 15.",
    "start": "1184330",
    "end": "1192399"
  },
  {
    "text": "And again, in fact we get either 15 points or 15. Mm hmm.",
    "start": "1192400",
    "end": "1198790"
  },
  {
    "text": "I believe that's true, isn't it. I think you can't do that. I think the cause. That's right.",
    "start": "1198790",
    "end": "1208039"
  },
  {
    "text": "It'll put points in for you and then you get an error message saying an unknown dimension when you got to the word if you see.",
    "start": "1208040",
    "end": "1214880"
  },
  {
    "text": "So if is that a little awkward place there, it's only ready, it's low tech is only ready for it when it's ready to see what's going to go next into one of its lists,",
    "start": "1214880",
    "end": "1224930"
  },
  {
    "text": "not when it's scanning for for for things like that.",
    "start": "1224930",
    "end": "1230270"
  },
  {
    "text": "So what you have to do is instead you you x def a l mean, you,",
    "start": "1230270",
    "end": "1237460"
  },
  {
    "text": "you define a control sequence in a way that gets expanded at a time when tech is ready for the expansion that will come out either points or.",
    "start": "1237460",
    "end": "1248460"
  },
  {
    "text": "Mm. And so you would define the controls you would put before the, the, before the skip.",
    "start": "1248460",
    "end": "1254929"
  },
  {
    "text": "You would say define you. Maybe you define control sequence to be if something then points else millimeters and then you use that JDF control sequence afterwards.",
    "start": "1254930",
    "end": "1265309"
  },
  {
    "text": "So the idea is that if you went if it's done at the wrong time, we usually have to have to have to put the result of the F in into a control sequence in the middle here.",
    "start": "1265310",
    "end": "1279770"
  },
  {
    "text": "And typically with a with a G f of the result of something or other to be whatever you wanted to do in that case.",
    "start": "1279770",
    "end": "1287530"
  },
  {
    "text": "And then g def on the other case, what you want to do in the second case and then g def arise and then afterwards you can call Rez and that will expand at the right time.",
    "start": "1287530",
    "end": "1299660"
  },
  {
    "text": "So. So if we won't expand when, when as a control sequence.",
    "start": "1299660",
    "end": "1305300"
  },
  {
    "text": "Well if it is done only by another part of the stomach. Now this has some disadvantages when you're designing macros which have to keep track of it,",
    "start": "1305300",
    "end": "1315180"
  },
  {
    "text": "but there seems always to be a way of getting getting around it. And in fact, the advantages of it are that went that in various contemplated extensions to tech.",
    "start": "1315180",
    "end": "1326120"
  },
  {
    "text": "They won't have they they won't all have to handle that the the every if that that exists in the system.",
    "start": "1326120",
    "end": "1335300"
  },
  {
    "text": "So they only have to handle a few or something like that. Anyway, I thought it was an advantage at one time now.",
    "start": "1335300",
    "end": "1342310"
  },
  {
    "text": "So. So the difference between the the mouth and the stomach is it is important to to have in mind and and those are the best analogies I can think of.",
    "start": "1342310",
    "end": "1353240"
  },
  {
    "text": "This will arise in in connection with problem for five or six of your of your exercise.",
    "start": "1353240",
    "end": "1363230"
  },
  {
    "text": "Number six, I think it was in a strange way, that is if you do it, if you do buy by one obvious approach and the end of the list, after you put out a carriage return into into your list,",
    "start": "1363230",
    "end": "1376730"
  },
  {
    "text": "then then your macro might expand into something that hasn't if the test whether the whether you're whether the recursion is done,",
    "start": "1376730",
    "end": "1383360"
  },
  {
    "text": "whether that whether you're at the very end of the list. And it will turn out that what happens in an alignment after the word carriage",
    "start": "1383360",
    "end": "1389420"
  },
  {
    "text": "return tech looks ahead to see if the next character is no aligned or not. And if it's no aligned, then it will stop the alignment. However, if the word is if the assumption is that it's not.",
    "start": "1389420",
    "end": "1400520"
  },
  {
    "text": "No. And that's there's gonna be something there which then has to be followed by a carriage return. So then it will tell you that you're missing a carriage return after your if there.",
    "start": "1400520",
    "end": "1411080"
  },
  {
    "text": "And that's that. And that fact is if we'll also get stuck into the middle of your alignment on the next row.",
    "start": "1411080",
    "end": "1417769"
  },
  {
    "text": "So this sub needs to be anticipated a solution to a problem six and that.",
    "start": "1417770",
    "end": "1423850"
  },
  {
    "text": "So that's one of the reasons I gave that problem.",
    "start": "1423850",
    "end": "1429660"
  },
  {
    "text": "OK. I talked about the difference of that sort. Let me let me go. Let me see what else I wanted to mention.",
    "start": "1429660",
    "end": "1438220"
  },
  {
    "text": "X death was something that was added after I started the very first the very first versions of Tech had death and g death.",
    "start": "1438220",
    "end": "1450460"
  },
  {
    "text": "And I felt I needed JDF because of cases like this. I couldn't just use a deaf ear.",
    "start": "1450460",
    "end": "1455809"
  },
  {
    "text": "If I use a deaf ear, does anyone see what's going wrong? Because this is all done in the stomach.",
    "start": "1455810",
    "end": "1460820"
  },
  {
    "text": "Yeah, you got it. Put the microphone. The definition will disappear, actually.",
    "start": "1460820",
    "end": "1466880"
  },
  {
    "text": "Your definition goes. It goes. It goes away when it hits the right race because the right brace and end of a group is also done by the stomach and and",
    "start": "1466880",
    "end": "1476450"
  },
  {
    "text": "right brain says go back and you find the corresponding left brain and then figure out what what routine you were in.",
    "start": "1476450",
    "end": "1483590"
  },
  {
    "text": "And then it seems it was doing an F. And so the def had disappeared by that time. Any deficit in there. So you saw I needed definitely a G def to get to get out a similar thing, I think possibly in an output routine, although that I flipped on that once.",
    "start": "1483590",
    "end": "1499720"
  },
  {
    "text": "I'm not sure if Alpha routine is really considered to be inside of a right price or not anymore.",
    "start": "1499720",
    "end": "1505620"
  },
  {
    "text": "It's it's it's not I don't remember what g def is is is something that was necessary to mean that some.",
    "start": "1505620",
    "end": "1514220"
  },
  {
    "text": "Control sequences would would be used at be considered only at the outer outer level and not really fine,",
    "start": "1514220",
    "end": "1522789"
  },
  {
    "text": "except was something that I had to add a few months later when people started to use macros more heavily than I had originally intended,",
    "start": "1522790",
    "end": "1530030"
  },
  {
    "text": "when we started to realize that they were of some use. And this is this is so.",
    "start": "1530030",
    "end": "1535270"
  },
  {
    "text": "So here we have a control sequence and then we add whatever Texas put it here, the macros are expanded.",
    "start": "1535270",
    "end": "1540350"
  },
  {
    "text": "This just means that the that it's as if all the processing that is done, that takes things to the stomach.",
    "start": "1540350",
    "end": "1549440"
  },
  {
    "text": "But if will not be expanded at this point. The same for the same reason.",
    "start": "1549440",
    "end": "1554549"
  },
  {
    "text": "If if in here it stays, it stays. And if so, if this is a if this is a recursive if you if you call a recursive macro inside of here that has IPS in it,",
    "start": "1554550",
    "end": "1565500"
  },
  {
    "text": "you you're gonna get in trouble. It's not going to expand that recursive macro to the to the right number of times in X depth.",
    "start": "1565500",
    "end": "1571280"
  },
  {
    "text": "That doesn't happen. So that's a limitation that you'd have to solve another way by finding some",
    "start": "1571280",
    "end": "1578030"
  },
  {
    "text": "part of tech that's that's consuming the text and then and then getting that.",
    "start": "1578030",
    "end": "1586100"
  },
  {
    "text": "But X def won't do it. Now let's see.",
    "start": "1586100",
    "end": "1593630"
  },
  {
    "text": "Another thing that so STF usually is just a simple, simple usage of the thing.",
    "start": "1593630",
    "end": "1598850"
  },
  {
    "text": "And the only thing that, that, that course were for a grand wizard is like the people in this audience. I have to mention some of the things that that if you want to make a long X, Stefan, do something really strange.",
    "start": "1598850",
    "end": "1608960"
  },
  {
    "text": "This is a way to expand a control sequence pretty much, except without the words. If if one of the things sometimes people say, well, why, what if I have a control sequence in here, I don't want to be expanded.",
    "start": "1608960",
    "end": "1623000"
  },
  {
    "text": "So there was a non expand in there and I and it had been defined to be a user or something and.",
    "start": "1623000",
    "end": "1628640"
  },
  {
    "text": "But I wanted to x def I want to expand everything but. But that but that one. Well how can I. How can I do that. Well as far as I know, there's two solutions to that problem.",
    "start": "1628640",
    "end": "1637820"
  },
  {
    "text": "One of them is, is to precede non by word like X quote or something like that.",
    "start": "1637820",
    "end": "1649019"
  },
  {
    "text": "And before you did the X def, you define X quote or not, you say let X quote, equal death.",
    "start": "1649020",
    "end": "1659360"
  },
  {
    "text": "Now, during while you're expanding something in X def, it doesn't define.",
    "start": "1659360",
    "end": "1665210"
  },
  {
    "text": "It doesn't expand. Any control sequence that follows follows the death. And so if I said let X quote, equal death for the time being, then then non is following death.",
    "start": "1665210",
    "end": "1674149"
  },
  {
    "text": "And so it's not done. This is really this lette has has has said that the meaning of this control sequence is exactly the meaning of deficits, that type.",
    "start": "1674150",
    "end": "1683960"
  },
  {
    "text": "And so it won't expand as a sequence following the word death.",
    "start": "1683960",
    "end": "1689600"
  },
  {
    "text": "Then after the SDF has taken place, then you can can define X quote to be.",
    "start": "1689600",
    "end": "1695929"
  },
  {
    "text": "To be no. And then then then in its effect will go away when you actually read this, because it will expand to Nolin and I think it'll work.",
    "start": "1695930",
    "end": "1705080"
  },
  {
    "text": "Okay. Now, the other solution is, if you don't understand even the problem, then then don't worry about I'm not going to talk or dwell on this for long.",
    "start": "1705080",
    "end": "1717140"
  },
  {
    "text": "The other solution is to to define save non or let.",
    "start": "1717140",
    "end": "1726410"
  },
  {
    "text": "I'm sorry. Let's save nine. Equal nine. And this. This means that anything that non was is now saved and safe.",
    "start": "1726410",
    "end": "1732580"
  },
  {
    "text": "Nine non. And then you say let non equals just about any primitive like you could let it equal.",
    "start": "1732580",
    "end": "1738919"
  },
  {
    "text": "Let anything that won't get expanded. Any primitive at all.",
    "start": "1738920",
    "end": "1744620"
  },
  {
    "text": "So then when none appears in here it'll look like, it'll look like an unexplainable thing and it will.",
    "start": "1744620",
    "end": "1752700"
  },
  {
    "text": "It will then appear as non. And then afterwards you can let non equal save.",
    "start": "1752700",
    "end": "1758330"
  },
  {
    "text": "And it gets back again. And so that's another way to prohibit expanding of that guy inside stuff.",
    "start": "1758330",
    "end": "1764539"
  },
  {
    "text": "OK. So. So the main ball of this story is that sometimes you get in trouble.",
    "start": "1764540",
    "end": "1770090"
  },
  {
    "text": "Things are expanding when you don't want to. They aren't expanding when you do want them to end. And the hardest thing would be to find a case where the stomach is actually wants to find it,",
    "start": "1770090",
    "end": "1781000"
  },
  {
    "text": "to find a case where the stomach is going to want to construct to expand a recursive macro for you.",
    "start": "1781000",
    "end": "1787940"
  },
  {
    "text": "And one of the best cases of this is that is after the word, if you can put if you can,",
    "start": "1787940",
    "end": "1793639"
  },
  {
    "text": "the routine that looks at the two characters following the word if is a big consumer in the stomach and it'll expand everything until it gets up,",
    "start": "1793640",
    "end": "1802010"
  },
  {
    "text": "until it gets to characters out. And so and so that will will do some expansion.",
    "start": "1802010",
    "end": "1808580"
  },
  {
    "text": "I think for you, maybe not. Oh, no, I'm sorry. You can't get in there. Oh, well. Pushed back again. See? Once I did it through marks.",
    "start": "1808580",
    "end": "1819080"
  },
  {
    "text": "I think there are ways to get around every problem with. Sometimes I haven't got a general solution to them on.",
    "start": "1819080",
    "end": "1825260"
  },
  {
    "text": "Sorry to say. In fact, the subtleties of this problem are somewhat overwhelming.",
    "start": "1825260",
    "end": "1831890"
  },
  {
    "text": "And I think John Bacchus did solve them once. After spending five years on the problem of how to define such languages and if I live long enough, I'm going to learn how he did it.",
    "start": "1831890",
    "end": "1847280"
  },
  {
    "text": "Now, let's see. I talk about that X quote and codes now.",
    "start": "1847280",
    "end": "1859730"
  },
  {
    "text": "Oh, yeah. One time that people wanted to get the macro to expand was in the preamble of an H a line.",
    "start": "1859730",
    "end": "1865010"
  },
  {
    "text": "This one. Suppose we've defined a control sequence to be a preamble that says this is the way to do a three column format.",
    "start": "1865010",
    "end": "1877640"
  },
  {
    "text": "So you would say so. So they wanted to say each line of three cow carriage return.",
    "start": "1877640",
    "end": "1883580"
  },
  {
    "text": "Now, what went when they h align routine is reading is reading this preamble,",
    "start": "1883580",
    "end": "1890210"
  },
  {
    "text": "unfortunately or fortunately, actually, it doesn't expand all the control sequences at that time.",
    "start": "1890210",
    "end": "1896090"
  },
  {
    "text": "In fact, that would be a kind of dangerous if it would, because a lot of times in the preamble there are things like center left brackets,",
    "start": "1896090",
    "end": "1902120"
  },
  {
    "text": "star and and you can imagine a macro that would actually use its argument and duplicate it several times.",
    "start": "1902120",
    "end": "1910610"
  },
  {
    "text": "And then you'd have several stars in that preamble. Doesn't doesn't work too well. So generally speaking, each line just scans right through this until it gets to it.",
    "start": "1910610",
    "end": "1919190"
  },
  {
    "text": "And it's in it knows only the sequence of the things that are typed carriage return",
    "start": "1919190",
    "end": "1925309"
  },
  {
    "text": "or a tab mark and everything else is just filed away into a list that's gonna be.",
    "start": "1925310",
    "end": "1931700"
  },
  {
    "text": "That's a boy. I'd also knows this symbol. And so, like, if if it was h a line center of something, then it's then it seems that way.",
    "start": "1931700",
    "end": "1941960"
  },
  {
    "text": "This part of the text to be put in front of whatever you typed in that column and saves the way this part of the text to put after or whatever you type in the column and that and it marches on to the to the next entry.",
    "start": "1941960",
    "end": "1954440"
  },
  {
    "text": "So it gets to a carriage return or something else. So how are you. So you get into trouble if you really wanted to expand.",
    "start": "1954440",
    "end": "1961430"
  },
  {
    "text": "The three call was defined to be equal to center three, three centers separated by by Marks or something like that.",
    "start": "1961430",
    "end": "1970470"
  },
  {
    "text": "OK, well, there is a way to expand that, and I'm sorry to have to admit it. Please don't tell too many people. But you say in front of this tab, skip zero point.",
    "start": "1970470",
    "end": "1982720"
  },
  {
    "text": "Now, the other thing that each line has to look for as it scans the preamble is changes in the amount in the tab skip tab,",
    "start": "1982720",
    "end": "1989750"
  },
  {
    "text": "skip is changing, would change the amount of glue that goes between columns and and if I.",
    "start": "1989750",
    "end": "1996320"
  },
  {
    "text": "And so when it seems tab skip then it starts to Venice, starts to go through the regular routine to scan four dimensions, Stanford to scan for glue.",
    "start": "1996320",
    "end": "2004870"
  },
  {
    "text": "And so it will have to look for the word plus following this dimension here. And so it has to expand three columns to see if it starts with the word plus. All right.",
    "start": "2004870",
    "end": "2013789"
  },
  {
    "text": "And so three column will get all expanded and everything worked beautifully. OK. So that's the solution to that problem. So there are ways of getting things to expand.",
    "start": "2013790",
    "end": "2021940"
  },
  {
    "text": "Sometimes they expand a little bit. You don't realize they're expanding at the end of a number.",
    "start": "2021940",
    "end": "2027100"
  },
  {
    "text": "If you if you're saying if any any example where you're giving a number, like even charcoaled of something equals twelve.",
    "start": "2027100",
    "end": "2036340"
  },
  {
    "text": "And then if the next word to that is def, well, tech had to look ahead at the next symbol following two to see if that was going to be another digit.",
    "start": "2036340",
    "end": "2048580"
  },
  {
    "text": "OK, now it, it, it actually would have if that was a control sequence, that control sequence would have got expanded then and there would have read ahead to look at all its arguments.",
    "start": "2048580",
    "end": "2057010"
  },
  {
    "text": "It might have gone through so many lines and read down the down the page a long ways just because it's trying to find it.",
    "start": "2057010",
    "end": "2063730"
  },
  {
    "text": "There's another digit after that too, before the stomach gets before it for that part is fun. Then then in order to just scan the word def, though, there wasn't another control, whatever control sequence it was.",
    "start": "2063730",
    "end": "2074980"
  },
  {
    "text": "Well, you also had to look to see whether they ended that control sequence occurred. You had this you know, you could just stop at the D. You have to keep looking ahead.",
    "start": "2074980",
    "end": "2082600"
  },
  {
    "text": "And so the symbol following def has already been classified by the mouth by the time.",
    "start": "2082600",
    "end": "2089530"
  },
  {
    "text": "So what if that was the symbol that was just being coded here? Like if it's typed 13 instead of twelve, then there hasn't been time to classify that symbol properly.",
    "start": "2089530",
    "end": "2101380"
  },
  {
    "text": "So. So you need a space here in order to suppress that. Looking ahead and f you see why you realize it. That's natural. It has to look there because otherwise it wouldn't notice.",
    "start": "2101380",
    "end": "2111190"
  },
  {
    "text": "Stop. And when we look at something. As paid as a whole, instead of one character at a time covering, uncovering,",
    "start": "2111190",
    "end": "2118650"
  },
  {
    "text": "we get a different viewpoint sometimes as to what what the computer is going to do so that the way it really works is simple at a time.",
    "start": "2118650",
    "end": "2125609"
  },
  {
    "text": "And if there was no space there, it would have to be in different parts of it are all working on these things.",
    "start": "2125610",
    "end": "2131280"
  },
  {
    "text": "So that's where some of these mysterious phenomena occur that I think you might run into as you're solving those problems for them on.",
    "start": "2131280",
    "end": "2144620"
  },
  {
    "text": "One more thing I got to say about this before I go on, and that is after the after you get to a after you get to the end of it, if Padrón else part, let's take Elsah as an example,",
    "start": "2144620",
    "end": "2156770"
  },
  {
    "text": "then tech looks ahead at the next symbol to see if it's a space or not, because spaces are are supposed to be ignored after after the right base of analysis.",
    "start": "2156770",
    "end": "2166590"
  },
  {
    "text": "Typically a nice way to end the line. When you're when you're defining things. So actually looks ahead to see if there's a space there. Now, sometimes this causes the mysterious disappearance of spaces.",
    "start": "2166590",
    "end": "2179480"
  },
  {
    "text": "So, like, if you had a long Mac grown and ended right there, then out, then outside that macro,",
    "start": "2179480",
    "end": "2186109"
  },
  {
    "text": "it might be pulling up a space from that that you didn't think was going to be called by the macro,",
    "start": "2186110",
    "end": "2191600"
  },
  {
    "text": "for example, usually after a control sequence of space is ignored. But if the control sequence has it has a parameter and a space after that parameter won't be ignored.",
    "start": "2191600",
    "end": "2199880"
  },
  {
    "text": "So if I call somewhere, I see s of some something delimited by Brace's.",
    "start": "2199880",
    "end": "2205130"
  },
  {
    "text": "I don't expect the space here to disappear. But that space would disappear if that C has ended with an else that had no one",
    "start": "2205130",
    "end": "2213410"
  },
  {
    "text": "else at the end of that control sequence would would gobble up that space again.",
    "start": "2213410",
    "end": "2220640"
  },
  {
    "text": "That's a that's something that you'd probably only run into once a year. But if you see a mysterious disappearing space, think about putting another space before before you end that control sequence,",
    "start": "2220640",
    "end": "2231110"
  },
  {
    "text": "because Elsa always will look for a space there. And if it doesn't find one, it has to back it up, whatever it found, and up and up and put it back.",
    "start": "2231110",
    "end": "2239510"
  },
  {
    "text": "I think it even my expanded control sequence at that point, if it worked, whatever it finds after.",
    "start": "2239510",
    "end": "2247220"
  },
  {
    "text": "So it's it's a precaution to put a space after after the closing of an elf.",
    "start": "2247220",
    "end": "2257300"
  },
  {
    "text": "All right. Now, recursion is the next thing I want to mention.",
    "start": "2257300",
    "end": "2265400"
  },
  {
    "text": "Recursion is, is where a control sequence calls itself.",
    "start": "2265400",
    "end": "2272160"
  },
  {
    "text": "And and it was after I had defined fact and when I looked at the first implementation,",
    "start": "2272160",
    "end": "2278180"
  },
  {
    "text": "that prototype tech that had been made by Michael class that following summer,",
    "start": "2278180",
    "end": "2284390"
  },
  {
    "text": "that that I first realized that that that control sequence could be recursive and that I would have to and find in fact,",
    "start": "2284390",
    "end": "2293150"
  },
  {
    "text": "Michael was one of the people that opened my eyes the most. On what? On the power of these control sequences. His his first test program generated an almost infinite text.",
    "start": "2293150",
    "end": "2305420"
  },
  {
    "text": "And and and it proved that my original ideas on the data structures were completely inadequate",
    "start": "2305420",
    "end": "2310700"
  },
  {
    "text": "because because I had to keep reference counters on the on the on the on the expansions of macros,",
    "start": "2310700",
    "end": "2318980"
  },
  {
    "text": "since I can be in the middle of one macro and simultaneously redefining it.",
    "start": "2318980",
    "end": "2324380"
  },
  {
    "text": "But the text of the old definition can't go away until I've finished on a lower level getting to the end of that macro.",
    "start": "2324380",
    "end": "2330890"
  },
  {
    "text": "And so so I learned this first about six months after tech was originally designed.",
    "start": "2330890",
    "end": "2337190"
  },
  {
    "text": "But let's write a simple recursive macro. Let me show you that.",
    "start": "2337190",
    "end": "2344480"
  },
  {
    "text": "That the that control sequences actually have a lot of the power of a finite state machine.",
    "start": "2344480",
    "end": "2350270"
  },
  {
    "text": "Let me let me let me count how many periods there are in a row. Let's. Let's take that as an example. I'll keep on. I'll have a text that consists entirely of periods followed by some other character, I suppose.",
    "start": "2350270",
    "end": "2360720"
  },
  {
    "text": "And we just want to call it the current period macro. OK, so define count, period macro.",
    "start": "2360720",
    "end": "2368090"
  },
  {
    "text": "It's going to put the answer in Count Encounter's zero. OK.",
    "start": "2368090",
    "end": "2374090"
  },
  {
    "text": "OK. Now what I'll do is I'll start it out. Count periods and I'll start it out by saying set not count zero kind of zeros.",
    "start": "2374090",
    "end": "2386180"
  },
  {
    "text": "Normally the page number. So let's see this concept. So it's a count of seven to zero. And then. And then call say C.p, which will be mine, which will be the recursive part of this that actually that actually does.",
    "start": "2386180",
    "end": "2401030"
  },
  {
    "text": "That actually does the counting of the periods. OK, so now I define S.P. of one argument.",
    "start": "2401030",
    "end": "2407780"
  },
  {
    "text": "And so that's going to that's going to read in the next symbol, either a period or something else.",
    "start": "2407780",
    "end": "2415340"
  },
  {
    "text": "And so what is going to start out is going to say if period number one, then do something else, do something else, else finish the whole job.",
    "start": "2415340",
    "end": "2431060"
  },
  {
    "text": "Now, what I really want to do this is what I first can write down is not going to be the final solution.",
    "start": "2431060",
    "end": "2436520"
  },
  {
    "text": "But what I really want to do is advance count seven.",
    "start": "2436520",
    "end": "2442940"
  },
  {
    "text": "If I won and then I want to call S.P. again and they'll gobble up the next period and keep on going.",
    "start": "2442940",
    "end": "2450339"
  },
  {
    "text": "And also I just want to I just want to repeat the thing that Terminator did.",
    "start": "2450340",
    "end": "2455670"
  },
  {
    "text": "I don't want to gobble it up. I want to repeat it. Just saying that and put it back into the text.",
    "start": "2455670",
    "end": "2461010"
  },
  {
    "text": "So I've already done my counting and that will stop it. Now, this will be the this would be a recursive definition.",
    "start": "2461010",
    "end": "2468960"
  },
  {
    "text": "That that is that at least intuitively solves the problem.",
    "start": "2468960",
    "end": "2474030"
  },
  {
    "text": "It would. It says if you see a period and increase the count by one and try again, gobble up the next character.",
    "start": "2474030",
    "end": "2481410"
  },
  {
    "text": "If you don't, then just just replace the character you looked at.",
    "start": "2481410",
    "end": "2487890"
  },
  {
    "text": "But the problem is that you see what's actually happening when you watch these macros getting traced and it'll trace the F and it'll see",
    "start": "2487890",
    "end": "2495000"
  },
  {
    "text": "and it'll see that these are equal and then it'll advance the counter and it'll call S.P. and S.P. is going to look for its argument.",
    "start": "2495000",
    "end": "2503940"
  },
  {
    "text": "Well, its argument is this right. Brace here that it's going to give you an error message saying the right phrase detected on match, right.",
    "start": "2503940",
    "end": "2512550"
  },
  {
    "text": "Brace affected in an hour in an argument and then it get all screwed up.",
    "start": "2512550",
    "end": "2518700"
  },
  {
    "text": "In fact, you can even gobble up a right phrase after the word if, if, if, when the word if it's followed by right phrase, you can get your brain structure all all messed up.",
    "start": "2518700",
    "end": "2527700"
  },
  {
    "text": "I hate to think what would happen to this. Probably one of the error messages that tech will produce is called This Can't Happen.",
    "start": "2527700",
    "end": "2534589"
  },
  {
    "text": "And it's just means that I couldn't think of a way in which it could happen. But I think maybe with if followed by left or right bracing can get things all screwed up.",
    "start": "2534590",
    "end": "2542220"
  },
  {
    "text": "And please don't do that ever. I might blow the Fuze.",
    "start": "2542220",
    "end": "2548220"
  },
  {
    "text": "OK then. So S.P. would. So how are you gonna. How are you going to solve. How are you going to resolve that. That's the that's the intuitive way.",
    "start": "2548220",
    "end": "2557430"
  },
  {
    "text": "But the real way now that works is something like this.",
    "start": "2557430",
    "end": "2562440"
  },
  {
    "text": "OK. If you see a period. Number one. OK, let's advance. Count by seven. That's that's advanced. Count seven. And then I say g def not def g def next to be CVP.",
    "start": "2562440",
    "end": "2579099"
  },
  {
    "text": "And that closes the f. I always say. Else. And then comes g def of next to be number one.",
    "start": "2579100",
    "end": "2593660"
  },
  {
    "text": "And finally after we've done that, if any else. Now we've safely recovered from all the. All this testing. Then we say next. And that's the end of S.P. now.",
    "start": "2593660",
    "end": "2604500"
  },
  {
    "text": "Next is either S.P. again, which will now not gobble up this right phrase. This right brain disappeared when I define S.P. here. This is there.",
    "start": "2604500",
    "end": "2611760"
  },
  {
    "text": "That's just the end of the S.P. list. And so that it's ready to look at the next character of the text if it's c.p.",
    "start": "2611760",
    "end": "2617820"
  },
  {
    "text": "But if it's number one, it just repeats of that and puts it puts the thing back again. So that's a that's an introduction to a recursive macro.",
    "start": "2617820",
    "end": "2625920"
  },
  {
    "text": "And one of our very first tests test cases was to calculate the c.D of of two sequences of periods.",
    "start": "2625920",
    "end": "2634770"
  },
  {
    "text": "Jim Texture's one test for each and run into problems.",
    "start": "2634770",
    "end": "2643560"
  },
  {
    "text": "And that's the thing that immediately follows the theory is a group. That's right. And you're going. That's right. That's a. Yeah, absolutely.",
    "start": "2643560",
    "end": "2651609"
  },
  {
    "text": "Is if you if you put something in a group, if you put something here in embraces.",
    "start": "2651610",
    "end": "2660420"
  },
  {
    "text": "OK, then that would would get would would get gobbled up here by next.",
    "start": "2660420",
    "end": "2669960"
  },
  {
    "text": "Sorry. The brace, the braces get removed. When that parameters is matched and and then you get you sticking several things after the period here.",
    "start": "2669960",
    "end": "2679470"
  },
  {
    "text": "Now it turns out that that the way if works.",
    "start": "2679470",
    "end": "2687080"
  },
  {
    "text": "Oh yeah. This was something once to get in the way if works. If the result is true. If the result is false. It will it the way it finds.",
    "start": "2687080",
    "end": "2695549"
  },
  {
    "text": "Where else is it is. It goes ahead until it gets to the to the next right. Brace on the current level.",
    "start": "2695550",
    "end": "2702329"
  },
  {
    "text": "And so this text, this argument, number one, might might be quite long, as long as it doesn't have any other groups inside of this group,",
    "start": "2702330",
    "end": "2712020"
  },
  {
    "text": "it would scan to the end of that until it got to this right brace and then it would find the else. OK. However, if this thing here started with a period,",
    "start": "2712020",
    "end": "2722400"
  },
  {
    "text": "then this relation is true and it will and it will expect to find the left brace immediately thereafter.",
    "start": "2722400",
    "end": "2729359"
  },
  {
    "text": "OK. And then it will start scanning that text. And you could even put in here something followed by an else and get things royally mixed up.",
    "start": "2729360",
    "end": "2741370"
  },
  {
    "text": "OK. Now. Yes, I'm glad you think it's funny.",
    "start": "2741370",
    "end": "2747270"
  },
  {
    "text": "And then another thing that could occur is if you had something, you know, like exit, exit.",
    "start": "2747270",
    "end": "2753600"
  },
  {
    "text": "But you also have another great another brace in there, because that brace is going to be where it expects to find the ice after again in the fall.",
    "start": "2753600",
    "end": "2762030"
  },
  {
    "text": "So so the way it works is if it if the relation is true on all relations, actually work this way.",
    "start": "2762030",
    "end": "2768010"
  },
  {
    "text": "If if after you've scanned the part that decides what the relation is like is",
    "start": "2768010",
    "end": "2774210"
  },
  {
    "text": "and if the men and then you can give one dimension equals another dimension,",
    "start": "2774210",
    "end": "2779609"
  },
  {
    "text": "for example, there could be other garbage here if that relation is false. It's going to just scan until it gets to the next right rate. That's at level zero.",
    "start": "2779610",
    "end": "2789090"
  },
  {
    "text": "But if it's true, it's fixed to find the left brace for the thing immediately. A question. Yeah, well, you've got to right now.",
    "start": "2789090",
    "end": "2797010"
  },
  {
    "text": "No one will match up period of time, is that right? That's right. Could could you not also define it? So there are two arguments. Number one, followed by number two, followed by some marking characters should be required.",
    "start": "2797010",
    "end": "2807960"
  },
  {
    "text": "You got to watch out that these Kerick that these that the braces get stripped off after. So. So I would have to know some some terminating point afterwards.",
    "start": "2807960",
    "end": "2816990"
  },
  {
    "text": "Yes. A specific character. And number one, we might one. Period. Number two would match the whole rest of them. And you just pass number two without to the recursive call.",
    "start": "2816990",
    "end": "2826680"
  },
  {
    "text": "That's right. Or I could pass the whole works again and make an end squared method instead of an end method, sometimes in order to avoid a problem like that.",
    "start": "2826680",
    "end": "2834300"
  },
  {
    "text": "But there's a better there's actually a better solution. This was just our first introduction to two recursion. OK. And so I want to I want to talk about that. Can we pass these out?",
    "start": "2834300",
    "end": "2843930"
  },
  {
    "text": "Everyone get a copy of this recursion paradigm while we're passing it out.",
    "start": "2843930",
    "end": "2851250"
  },
  {
    "text": "I want to show you one other one other useful gimmick before we get in.",
    "start": "2851250",
    "end": "2856980"
  },
  {
    "text": "That is using control sequences as in as counters. Now, there's there's 10 counters, zero through nine. And actually, that's more than most people think.",
    "start": "2856980",
    "end": "2868140"
  },
  {
    "text": "But people are afraid to use more than three or four of them for fear of running out. And you cannot. But there's essentially unbounded number of corners because any control sequence can be used as a counter.",
    "start": "2868140",
    "end": "2877200"
  },
  {
    "text": "And you. And it works like this. You define stall, stall, count number one, number two.",
    "start": "2877200",
    "end": "2886230"
  },
  {
    "text": "And this will take two arguments. The first one is going to be the name of a control sequence and the second one is going to be the number of acounter.",
    "start": "2886230",
    "end": "2896760"
  },
  {
    "text": "So a typical call on this would be stall count, pseudo counter three.",
    "start": "2896760",
    "end": "2906270"
  },
  {
    "text": "And that will set whatever is in count three will now be different. Even pseudo will will now be defined to be the value of three.",
    "start": "2906270",
    "end": "2914430"
  },
  {
    "text": "And the way you can test that is make it work in all cases, including negative numbers.",
    "start": "2914430",
    "end": "2921089"
  },
  {
    "text": "First test to see if the counter is negative. If so, we GDNF are our parameter one to be empty.",
    "start": "2921090",
    "end": "2933120"
  },
  {
    "text": "Otherwise we GDNF parameter one to be a minus sign.",
    "start": "2933120",
    "end": "2941340"
  },
  {
    "text": "Then we. Oh yeah. Before getting out of that else branch I want to set count to set count number two to negative number two.",
    "start": "2941340",
    "end": "2952980"
  },
  {
    "text": "And that will, that will be the end of the X then I do an x def because x def expands counters and I x def.",
    "start": "2952980",
    "end": "2958450"
  },
  {
    "text": "Number one to be the current value of number one which you say that the blank or a minus sign not blank empty.",
    "start": "2958450",
    "end": "2964730"
  },
  {
    "text": "Enter your minus sign followed by count to number two.",
    "start": "2964730",
    "end": "2970830"
  },
  {
    "text": "And then I've done everything except in one case I have to restore count to to its negative and it's a neat trick for that.",
    "start": "2970830",
    "end": "2978840"
  },
  {
    "text": "Invented maybe by Jim here. RTA is set count number two.",
    "start": "2978840",
    "end": "2983940"
  },
  {
    "text": "Number one. This will now is the opposite of stall count.",
    "start": "2983940",
    "end": "2992369"
  },
  {
    "text": "Set count. Three two. Pseudo is the is the way of getting back pseudocode or Intercon three.",
    "start": "2992370",
    "end": "3002420"
  },
  {
    "text": "And that's what this is doing here in fact. To restore the previous value of it because it's already number one is now been STF to be.",
    "start": "3002420",
    "end": "3008960"
  },
  {
    "text": "Let's take them, for example, at the counter contains negative 123. Okay. Then I g def pseudo to be net to be a minus sign here.",
    "start": "3008960",
    "end": "3017599"
  },
  {
    "text": "Don't forget a space after work. I probably need a space in here somewhere in order to get in order to make sure that the number has ended.",
    "start": "3017600",
    "end": "3027730"
  },
  {
    "text": "Exactly. You're saying. Yeah, new space there because we look for space to terminate the number. Yeah. Thanks. I suppose it kind of was minus one.",
    "start": "3027730",
    "end": "3035150"
  },
  {
    "text": "Twenty three is the first. I define it to be a minus sign and now I change count count three to B plus one hundred twenty three.",
    "start": "3035150",
    "end": "3042400"
  },
  {
    "text": "OK, then I did an ex deaf suit, all to be minus count three, which is now minus one, two, three, and that gets expanded because it's X10.",
    "start": "3042400",
    "end": "3051970"
  },
  {
    "text": "Then my last thing says said count three to Fudo, which by now is minus 123.",
    "start": "3051970",
    "end": "3057990"
  },
  {
    "text": "And in all. Jim screwed up here.",
    "start": "3057990",
    "end": "3068010"
  },
  {
    "text": "OK. If you want the counter to have the space after it. I see. That's safer. Yeah. OK. Very good idea. Put a space there. Thanks very much.",
    "start": "3068010",
    "end": "3075940"
  },
  {
    "text": "Now except that that fails my next example.",
    "start": "3075940",
    "end": "3082690"
  },
  {
    "text": "If the space isn't there. No. Oh gosh. Maybe we can't have everything. I was gonna be fine. I was going to now say if zero sudo OK.",
    "start": "3082690",
    "end": "3093850"
  },
  {
    "text": "I think maybe your large spaces at this point before the left breaks. I think you are. OK. So you're all right. If zero souto something else.",
    "start": "3093850",
    "end": "3102220"
  },
  {
    "text": "Something else. Not my idea. The idea is that if Suto is zero it will match with zero.",
    "start": "3102220",
    "end": "3109390"
  },
  {
    "text": "And then it would be zero followed by space. And I think you can skip over space to get to the left brace.",
    "start": "3109390",
    "end": "3115690"
  },
  {
    "text": "But if it's anything a nine zero, not even always a long string of symbols, it'll go into the Elfs branch.",
    "start": "3115690",
    "end": "3121460"
  },
  {
    "text": "And so this is a way to pass Fasulo Konar four zero. That's that's legitimate. But now the recursive paradigm.",
    "start": "3121460",
    "end": "3128470"
  },
  {
    "text": "Time is for you. Put that away on the stuff line.",
    "start": "3128470",
    "end": "3134830"
  },
  {
    "text": "I notice that you say stuff. Number one is number one from the argument to stop count rather than using.",
    "start": "3134830",
    "end": "3145150"
  },
  {
    "text": "Let's see. But you've you've g just up before. So you're essentially referencing it by its name, past and by.",
    "start": "3145150",
    "end": "3154460"
  },
  {
    "text": "Oh I see. It's it's it's it's efficient. It's I could have used another I could have used another control sequence here.",
    "start": "3154460",
    "end": "3161070"
  },
  {
    "text": "Yeah. But if you use the control sequence there on the X stuff then it would probably go off and try to expand CFS given their argument.",
    "start": "3161070",
    "end": "3170690"
  },
  {
    "text": "Yes. S doesn't have an argument. OK. So X def will expand any, any user defined control sequence, including the one that was up here.",
    "start": "3170690",
    "end": "3179740"
  },
  {
    "text": "I think Jim did that just because it was, it was, it was cute, but also to show that you can define a control sequence in terms of itself.",
    "start": "3179740",
    "end": "3187690"
  },
  {
    "text": "So a control sequence can grow. In fact, I use that in exercise six defining control sequence to be something more than it was before.",
    "start": "3187690",
    "end": "3200710"
  },
  {
    "text": "Don't you? I presume you intend to have, obviously, the screen working.",
    "start": "3200710",
    "end": "3206390"
  },
  {
    "text": "You tend to have spaces after in front of your no signs like, for example, slash X stuff, number one.",
    "start": "3206390",
    "end": "3213039"
  },
  {
    "text": "Which one is space? Because no one, no matter number, is is is some is is recognizable as a nine letter.",
    "start": "3213040",
    "end": "3219430"
  },
  {
    "text": "Anything that's non letter. Can you after a control sequence of letters you just have to have a non letter",
    "start": "3219430",
    "end": "3226059"
  },
  {
    "text": "to follow it so you could put a space it wouldn't hurt to gobble up the space, but the but the only value of a space after that is to delimit the control.",
    "start": "3226060",
    "end": "3233920"
  },
  {
    "text": "See, cos the difficulty would be as if if you were passing in sequences of characters from macro definitions and you could absorb a character,",
    "start": "3233920",
    "end": "3241079"
  },
  {
    "text": "the number one is act. But you know, this, this part of the definition of the rules for spaces are what the mouth sees for spaces.",
    "start": "3241080",
    "end": "3249220"
  },
  {
    "text": "It'll be scanned at that time. Right. But no one is actually going to be a a control sequence in the use of its macro.",
    "start": "3249220",
    "end": "3259770"
  },
  {
    "text": "OK. Take a look at that. If you Venus. I hope you've copied it down. I have. Where it was before I. I garbs do though otherwise.",
    "start": "3259770",
    "end": "3269620"
  },
  {
    "text": "Ask me after class and I'll write rewrite it for you. But I gotta get to this recursion paradigm because actually this is a fairly general solution to recursion and it.",
    "start": "3269620",
    "end": "3281140"
  },
  {
    "text": "And last night after. After an hour and a half I reconstructed something that I had done in 1959 and had always wondered how he did it.",
    "start": "3281140",
    "end": "3289269"
  },
  {
    "text": "And it had gotten forgotten in the meantime. And the and the simplifications of it actually failed.",
    "start": "3289270",
    "end": "3297310"
  },
  {
    "text": "So I find it was urgent that I reconstruct. We do anyway.",
    "start": "3297310",
    "end": "3302610"
  },
  {
    "text": "OK. So I just put basic courses is you don't have to do that to get recursion.",
    "start": "3302610",
    "end": "3307960"
  },
  {
    "text": "But then I did find three magic control sequences. Which one is Capital T, which stands for Truth Capital K. which stands for Killing and Capital T t, which uses two Ts in its argument.",
    "start": "3307960",
    "end": "3323200"
  },
  {
    "text": "And it looks for two PS as the limiters of arguments you see as an argument one and then anybody",
    "start": "3323200",
    "end": "3329040"
  },
  {
    "text": "to an argument two also ended by T and and it just returns the second of these arguments. So it's a sort of a half killing thing. Now that's a very tricky thing, which I'll talk about in a minute.",
    "start": "3329040",
    "end": "3338650"
  },
  {
    "text": "But first, it's just news business. Give me I don't want to give a recursive. Paradigm. Now, this is for a general class of operations where you want to give a lot of of arguments",
    "start": "3338650",
    "end": "3351980"
  },
  {
    "text": "to a macro and and the form of it will be the arguments separated by the limiter.",
    "start": "3351980",
    "end": "3358369"
  },
  {
    "text": "If the delimiter is is null, then you have to modify this very slightly. But list of of one or more things separated by semicolons is the example I'm using here.",
    "start": "3358370",
    "end": "3368540"
  },
  {
    "text": "So I'm using semicolon as a delimiter here. The typical call on an RECURSE Alpha semicolon, beta and RECURSE.",
    "start": "3368540",
    "end": "3375950"
  },
  {
    "text": "But I won't allow anything in there. It can be groups that, you know, all of that stuff.",
    "start": "3375950",
    "end": "3385790"
  },
  {
    "text": "Well, no, if if the whole thing alpha were surrounded by a brace, that wouldn't be equivalent to to the to the other effect.",
    "start": "3385790",
    "end": "3392890"
  },
  {
    "text": "And there's a way around it, too, if you need it. But but this particular definition will strip off if the whole thing is brazed.",
    "start": "3392890",
    "end": "3401349"
  },
  {
    "text": "Separate. So so it could say alpha semicon beta semicon gamma. Or it could just say alpha all by self. One or more things separated by semicolons and semicolon can be replaced by some other delimiter if you like.",
    "start": "3401350",
    "end": "3413660"
  },
  {
    "text": "But they shouldn't occur of course in except in close embraces within within any of the arguments themselves.",
    "start": "3413660",
    "end": "3420890"
  },
  {
    "text": "Now here's a way I can gobble that up.",
    "start": "3420890",
    "end": "3426220"
  },
  {
    "text": "And and the nice thing about this solution is that there are no forbidden.",
    "start": "3426220",
    "end": "3433220"
  },
  {
    "text": "There are no forbidden characters in Alpha and beta. There's a forbidden control sequence.",
    "start": "3433220",
    "end": "3438770"
  },
  {
    "text": "Only this control sequence. T should not be used. Probably none of these three should be used in in in the list of arguments.",
    "start": "3438770",
    "end": "3447780"
  },
  {
    "text": "But you could see the forbidden control sequences from people. You mean one of the.",
    "start": "3447780",
    "end": "3454160"
  },
  {
    "text": "Don't say that. For example, one of the things I did was I changed the code of character 174 to be a letter and then I actually defined these control sequence.",
    "start": "3454160",
    "end": "3465200"
  },
  {
    "text": "That's the vertical line. I actually defined this control sequence to be T vertical line and K vertical line.",
    "start": "3465200",
    "end": "3472490"
  },
  {
    "text": "And and and and when I did the definitions and then then vertical line was thought of as a letter and it's a it's,",
    "start": "3472490",
    "end": "3481010"
  },
  {
    "text": "it actually fits right after Z a little bit. And so it'll print out as a vertical line and so on. But then after, after I've defined all of my control sequences that I want it to be private.",
    "start": "3481010",
    "end": "3489180"
  },
  {
    "text": "That no no user is going to match. Then I change the code back of 174, back to twelve the way it usually is.",
    "start": "3489180",
    "end": "3495770"
  },
  {
    "text": "And and not now. No user is going to be able to conflict his control sequences with mine unless he he",
    "start": "3495770",
    "end": "3502970"
  },
  {
    "text": "really tries very hard by changing the code back to eleven and sticking it in again.",
    "start": "3502970",
    "end": "3508310"
  },
  {
    "text": "OK. Now so. So there there'll be a forbidden control sequence in there, but not an all forbidden character.",
    "start": "3508310",
    "end": "3515960"
  },
  {
    "text": "Now the solution that someone said the problem six yesterday was saying. Somebody said, can you.",
    "start": "3515960",
    "end": "3522590"
  },
  {
    "text": "Can you assume that there's a certain character or not in the list that you could use as a delimiter to know when you got to the end?",
    "start": "3522590",
    "end": "3528390"
  },
  {
    "text": "And I said, yes, it was human Dallasites not. But the solution I'm presenting now is it doesn't have that kind of restrictions.",
    "start": "3528390",
    "end": "3536039"
  },
  {
    "text": "OK. So recurse recursive one argument followed by Indri Curse.",
    "start": "3536040",
    "end": "3541760"
  },
  {
    "text": "And so they are going to be limited by n recurse. And this allows you some flexibility also in defining macros in math mode.",
    "start": "3541760",
    "end": "3550380"
  },
  {
    "text": "You can now tell the user that it really doesn't matter if he has spaces inside because you are sometimes putting spaces between between arguments can get tricky.",
    "start": "3550380",
    "end": "3561890"
  },
  {
    "text": "So while the time is nice to define a a macro so that it has has its own delimiter at the end.",
    "start": "3561890",
    "end": "3568010"
  },
  {
    "text": "OK. Then, then you do initial computation, whatever you want it to do, and then you call recur of the whole argument followed by your delimiter.",
    "start": "3568010",
    "end": "3577850"
  },
  {
    "text": "And this, this, this district. Oh OK.",
    "start": "3577850",
    "end": "3583590"
  },
  {
    "text": "Yeah. So this will be in a handoff for the people that don't see this. The rest of this on tape. And I also there are people waiting in the hall, so I don't have to clear out soon anyway.",
    "start": "3583590",
    "end": "3592880"
  },
  {
    "text": "OK, I'll tell you what. I'll read the rest of the handout. I did find this in the end, the big trick occurs in his if test here.",
    "start": "3592880",
    "end": "3600319"
  },
  {
    "text": "If t t t number one, all is yes. And then I said macro trade so you can see what happens.",
    "start": "3600320",
    "end": "3606140"
  },
  {
    "text": "No macro traces of control, single defining basic that will turn on the tracing of macros.",
    "start": "3606140",
    "end": "3611779"
  },
  {
    "text": "And it turns it on almost immediately. But I had to have this blank blank line in here in order to get it turned on.",
    "start": "3611780",
    "end": "3617840"
  },
  {
    "text": "Otherwise it would have read ahead and seen as where recurse before it was. We are tracing it. So that blank line. So that's the time delay from getting from the stomach to the mouth anyway.",
    "start": "3617840",
    "end": "3627450"
  },
  {
    "text": "This will trace macros. And then I have the call. Now you can watch exactly what happened.",
    "start": "3627450",
    "end": "3632630"
  },
  {
    "text": "This is what the macro trace printed out of RECURSE. It prints out the name of the macro on what.",
    "start": "3632630",
    "end": "3638710"
  },
  {
    "text": "And this this right else is what it expands to. What the. Evaluate it, too, and you can watch this is the kind of phrase you get on your Ariston Paris file after you think macros are expanded.",
    "start": "3638710",
    "end": "3650110"
  },
  {
    "text": "And finally everything got printed. And I showed you what what the what actually. The whole recurred and expanded to. And this is initial computation middle compute with alpha middle.",
    "start": "3650110",
    "end": "3660180"
  },
  {
    "text": "It would be the middle final computation and that's a general kind of recursion that will handle many, many recursive problems.",
    "start": "3660180",
    "end": "3666800"
  },
  {
    "text": "OK. Now there's one more hand out. That's the challenge problem that I promise you. The challenge problems we can talk a little more about on on tomorrow.",
    "start": "3666800",
    "end": "3680920"
  },
  {
    "text": "But the main idea is, is, I think, fairly clear. I got your source file right. The source file here.",
    "start": "3680920",
    "end": "3689140"
  },
  {
    "text": "And there's a place where it says secret code to do this formatting. That's your exercise. Fill in. What is it? Figure out what that secret code was. And I give you the rest of the source all written on it.",
    "start": "3689140",
    "end": "3698869"
  },
  {
    "text": "So that's your challenge from.",
    "start": "3698870",
    "end": "3985403"
  }
]