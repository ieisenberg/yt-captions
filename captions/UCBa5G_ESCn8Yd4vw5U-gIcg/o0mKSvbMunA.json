[
  {
    "start": "0",
    "end": "34000"
  },
  {
    "text": "Today, we're going to be covering CSPs, but possibly just as importantly,",
    "start": "5720",
    "end": "11474"
  },
  {
    "text": "you're all halfway through the quarter. So congratulations. I think six more weeks to go,",
    "start": "11475",
    "end": "17220"
  },
  {
    "text": "so keep it up. Uh, also happy Halloween, um, hope you all have fun.",
    "start": "17220",
    "end": "23970"
  },
  {
    "text": "Uh, but today, we're going to be talking about CSPs, so this is continuing, um,",
    "start": "23970",
    "end": "29325"
  },
  {
    "text": "these topics that we've been covering since Monday, which is about, um, this kind of setting, right?",
    "start": "29325",
    "end": "35340"
  },
  {
    "start": "34000",
    "end": "99000"
  },
  {
    "text": "So you have variables, in this case we have three, X_1, X_2, and X_3.",
    "start": "35340",
    "end": "42135"
  },
  {
    "text": "And each variable represents some kind of discrete object that can take on one of several values.",
    "start": "42135",
    "end": "48910"
  },
  {
    "text": "And so the set of values that a single variable can take on is called its domain.",
    "start": "48910",
    "end": "54050"
  },
  {
    "text": "[NOISE] And, um, just to continue reviewing, these variables have factors which are",
    "start": "54050",
    "end": "61160"
  },
  {
    "text": "functions that take as arguments one or more variable. And the factors basically say, okay,",
    "start": "61160",
    "end": "68120"
  },
  {
    "text": "how much do I like this assignment of my variables? So for example, factor 2 looks at X_1 and X_2 and it says,",
    "start": "68120",
    "end": "76430"
  },
  {
    "text": "okay, X_1 has been assigned some value, X_2 has been assigned some value. How much do I like that assignment? Do I really like it?",
    "start": "76430",
    "end": "83765"
  },
  {
    "text": "If so, you give it a high value, do I not like it? If so, you zero it out. Um, and so importantly,",
    "start": "83765",
    "end": "90330"
  },
  {
    "text": "um, we call the arguments, so all the variables that we give to a factor, that's the scope of that factor.",
    "start": "90330",
    "end": "96540"
  },
  {
    "text": "Um, so we had this example that we talked about on Monday, and I'm just going to revisit it.",
    "start": "97990",
    "end": "103000"
  },
  {
    "start": "99000",
    "end": "421000"
  },
  {
    "text": "So in this case we have, um, variables correspond to people and there's three people.",
    "start": "103000",
    "end": "108605"
  },
  {
    "text": "And, um, we know that first of all, the first two people, person 1 and person 2,",
    "start": "108605",
    "end": "115479"
  },
  {
    "text": "they have to agree to each, each other. And then person 2 and person 3, they sometimes agree with each other, but not all the time.",
    "start": "115480",
    "end": "122545"
  },
  {
    "text": "Um, and so first, what we say, is with our first factor, we say that person 1 is definitely blue.",
    "start": "122545",
    "end": "131135"
  },
  {
    "text": "So we say this here, um, by saying these are the values that the variable can take on, red or blue.",
    "start": "131135",
    "end": "137064"
  },
  {
    "text": "And this is how much we like that value. And what this fac- first factor is saying,",
    "start": "137065",
    "end": "142110"
  },
  {
    "text": "is that it doesn't like red at all, it's a 0, and it likes blue, it's a 1. And then we have the second factor,",
    "start": "142110",
    "end": "148635"
  },
  {
    "text": "this encodes the fact that they must agree. And what that's saying is that every time,",
    "start": "148635",
    "end": "153715"
  },
  {
    "text": "both the first variable, which is X_1 and the second variable which is X_2, every time they agree, where either they're both red,",
    "start": "153715",
    "end": "160360"
  },
  {
    "text": "or both blue, we give it a 1, otherwise we give it a 0. And then we have this factor which says that they tend to agree,",
    "start": "160360",
    "end": "167900"
  },
  {
    "text": "and we're encoding that by saying, well, if they're- if both of its arguments are the same, if they're both red or they're both blue,",
    "start": "167900",
    "end": "173945"
  },
  {
    "text": "then we give it a slightly higher number than if they differ, but we're not going to zero it out.",
    "start": "173945",
    "end": "179110"
  },
  {
    "text": "And then last we say, okay, well, the las- last person kind of prefers to go red,",
    "start": "179110",
    "end": "184349"
  },
  {
    "text": "but, uh, you know, it's not a hard constraint, nothing like that. Um, and so then again,",
    "start": "184350",
    "end": "191390"
  },
  {
    "text": "so like we talked about last time, um, assignments, which is like if you have all your variables and you have all the values that you've assigned to them,",
    "start": "191390",
    "end": "199340"
  },
  {
    "text": "they have what's called a weight. And a weight is basically just, um, plugging in all the values for your variables into your factors and",
    "start": "199340",
    "end": "207380"
  },
  {
    "text": "then multiplying them all up to get that product. And that's the weight. And our goal across all of these problems, in this whole unit,",
    "start": "207380",
    "end": "215370"
  },
  {
    "text": "is to find assignments for all of our variables that will give us the maximum weight,",
    "start": "215370",
    "end": "220565"
  },
  {
    "text": "when we multiply up all of our factors, Yeah?",
    "start": "220565",
    "end": "225870"
  },
  {
    "text": "Is there any particular reason to why you define this product as opposed to a sum? So the question was,",
    "start": "225870",
    "end": "231255"
  },
  {
    "text": "why is the weight a product and not a sum? And the answer for that is because,",
    "start": "231255",
    "end": "236489"
  },
  {
    "text": "um, remember these are constraint satisfaction problems. And so if you look back at this example, we wanted to encode the constraint that they must agree.",
    "start": "236489",
    "end": "244340"
  },
  {
    "text": "And we did that by putting in a 0. And since we're multiplying it up, if you have a single factor that gives a 0, it's like a veto.",
    "start": "244340",
    "end": "251555"
  },
  {
    "text": "Um, and so that veto power is actually really critical, and we leveraged it,",
    "start": "251555",
    "end": "256760"
  },
  {
    "text": "um, on Monday, which I'll talk about soon. Um, so on Monday,",
    "start": "256760",
    "end": "262770"
  },
  {
    "text": "we talked about an- one algorithm for solving these kinds of problems. We called it backtracking search.",
    "start": "262770",
    "end": "267890"
  },
  {
    "text": "And it's, it's a kind of an exhaustive, you could think it as like a depth-first search of all the possibilities. So we have this example, um,",
    "start": "267890",
    "end": "274780"
  },
  {
    "text": "from last week where we were coloring provinces in Australia, right? Um, so we have- I actually don't know,",
    "start": "274780",
    "end": "281960"
  },
  {
    "text": "the provinces of Australia, but we have WA and we have V and we have T, I think, T, is Tanzania, um, Tasmania.",
    "start": "281960",
    "end": "289370"
  },
  {
    "text": "Okay. Um, I'll work on my geography. In fact, uh, we color them all red, right?",
    "start": "289370",
    "end": "294615"
  },
  {
    "text": "And so what we decide to do is we decide that, hey, we'll color Q, red. Let's do it. And then we say, hey, if we color, Q, red,",
    "start": "294615",
    "end": "301215"
  },
  {
    "text": "let's go with, um, green here for NT, and then, we pick blue for SA,",
    "start": "301215",
    "end": "306810"
  },
  {
    "text": "and then, um, green for NSW, and we've completed that tree. We've gone as far as we can, we've found a coloring that works.",
    "start": "306810",
    "end": "314139"
  },
  {
    "text": "We say, oh, wait, what if we backtrack up to this point and try to sub in blue in for NT,",
    "start": "314140",
    "end": "320690"
  },
  {
    "text": "instead of green, which is what we had before? And then we can do the same thing. We go down that branch of the tree,",
    "start": "320690",
    "end": "326045"
  },
  {
    "text": "or we can try different colors for Q. So for example, what if we try Q, over here? We take that tree down.",
    "start": "326045",
    "end": "331414"
  },
  {
    "text": "Oh, but that gives us something that is, um, is not as satisfiable. So for example, here in SA,",
    "start": "331415",
    "end": "337725"
  },
  {
    "text": "no matter what color we give it, according to our factors which say like you can't have two neighboring colors,",
    "start": "337725",
    "end": "343294"
  },
  {
    "text": "it will be not allowed, um, and you fill up the tree this way. And so this, this is the algorithm we covered and, um,",
    "start": "343295",
    "end": "351380"
  },
  {
    "text": "it works because it always gives you a good version, but it's not working because it's super slow. It's exponential time.",
    "start": "351380",
    "end": "357680"
  },
  {
    "text": "So there's N nodes and each node has a domain. And so you're, you're- it's like for each value of,",
    "start": "357680",
    "end": "365975"
  },
  {
    "text": "um, here, I can draw it out. So like for example, if we had two fact- if we had two variables,",
    "start": "365975",
    "end": "372720"
  },
  {
    "text": "X_1 and X_2, um, and they both took on three values.",
    "start": "372830",
    "end": "378420"
  },
  {
    "text": "[NOISE]",
    "start": "378420",
    "end": "387600"
  },
  {
    "text": "So these are va- our, um, variables and these are the values they can take on. And these are how much our factors like them.",
    "start": "387600",
    "end": "394730"
  },
  {
    "text": "Um, then you would have to say for each value in X_1, for each value in X_2. So it's this, um, exponential blow up,",
    "start": "394730",
    "end": "402650"
  },
  {
    "text": "which is just very slow. And so we learned some kind of, uh, like heuristic ways to speed things up and prune off that tree.",
    "start": "402650",
    "end": "409805"
  },
  {
    "text": "So we did forward checking, um, which is where like once you decide my value for one variable,",
    "start": "409805",
    "end": "414920"
  },
  {
    "text": "I'm going to go ahead and propagate that decision as far as I can. Um, that shrunk it a little bit.",
    "start": "414920",
    "end": "420960"
  },
  {
    "text": "We looked at dynamic ordering, which is like, okay, which variable? And I'm going to choose to work next.",
    "start": "420960",
    "end": "426715"
  },
  {
    "start": "421000",
    "end": "522000"
  },
  {
    "text": "And then once I've chosen that variable, I'm going to choose my value a little more intelligently. I'm going to pick the thing that has the least wiggle room because maybe that'll help us,",
    "start": "426715",
    "end": "435170"
  },
  {
    "text": "um, all- once I can, and that helped us a little bit. Um, but at the end of the day, these constraints,",
    "start": "435170",
    "end": "442010"
  },
  {
    "text": "they helped us prune the tree, but they can only work for constraints. Only if a factor gives us a value of zero, does it work.",
    "start": "442010",
    "end": "450070"
  },
  {
    "text": "Because that's when it has veto power. And we use the vetoes to say, this branch of the tree will never be useful,",
    "start": "450070",
    "end": "456740"
  },
  {
    "text": "so we can never go down it. So if we have factors that are going to be non-zero, we can't use any of these things, Yeah?",
    "start": "456740",
    "end": "464039"
  },
  {
    "text": "Could you have a little more on the example of how you got the numbers. So like for, for one variable there's only one, and then I guess it's 2_N minus 1.",
    "start": "464040",
    "end": "471245"
  },
  {
    "text": "Yeah. So for this, I guess this example, what- it would look like as a graph. I guess it wasn't the best example.",
    "start": "471245",
    "end": "476420"
  },
  {
    "text": "But, and actually later in lecture today, we're gonna talk about exactly how you could go about this more smartly.",
    "start": "476420",
    "end": "482854"
  },
  {
    "text": "But let's say you just had two variables, and each had unary factors. If you're already running binary like backtracking search,",
    "start": "482855",
    "end": "489710"
  },
  {
    "text": "we would still say were- we would try all different combinations of both variables,",
    "start": "489710",
    "end": "496249"
  },
  {
    "text": "um, which is a very dumb thing to do. [inaudible] Yes, so that's the backtracking search. Interesting.",
    "start": "496249",
    "end": "501590"
  },
  {
    "text": "Yeah. So we'll discover smarter ways to get around that.",
    "start": "501590",
    "end": "505080"
  },
  {
    "text": "Um, yeah, so that's backtracking, slow, but it gives you the optimal solution every time,",
    "start": "507160",
    "end": "513190"
  },
  {
    "text": "so maybe a mixed bag. Um, okay, so I'm going to lead into this as",
    "start": "513190",
    "end": "518560"
  },
  {
    "text": "a running example that we're gonna be talking about the whole lecture, Object tracking. So with object tracking, you have sensors that are telling you like, oh,",
    "start": "518560",
    "end": "525160"
  },
  {
    "start": "522000",
    "end": "539000"
  },
  {
    "text": "my object is here, no, it's down here. Wait, it's over here. And what you wanna do is you want to take that noisy observation and,",
    "start": "525160",
    "end": "531870"
  },
  {
    "text": "and run it through your CSP to infer a more realistic estimate of where the object actually is.",
    "start": "531870",
    "end": "538475"
  },
  {
    "text": "So I will also draw this on the board. Um, [NOISE] so,",
    "start": "538475",
    "end": "546940"
  },
  {
    "start": "539000",
    "end": "718000"
  },
  {
    "text": "so what this looks like is if we have, um, this is time,",
    "start": "548120",
    "end": "555935"
  },
  {
    "text": "so we'll call it T for time. And this is position, uh, so we'll call it p for position.",
    "start": "555935",
    "end": "561680"
  },
  {
    "text": "And what this is going to say is we have sensors that are giving us estimates,",
    "start": "561680",
    "end": "567050"
  },
  {
    "text": "like noisy estimates for where this thing is that every point in time. So for example, maybe at time step 1,",
    "start": "567050",
    "end": "573290"
  },
  {
    "text": "um, we get an observation down here. At time step 2, it's up here,",
    "start": "573290",
    "end": "579079"
  },
  {
    "text": "and at time step 3, it's up here. Um, but in reality, like we want maybe something more like that.",
    "start": "579080",
    "end": "586010"
  },
  {
    "text": "Um, and so that's going to be our goal with this running example. Um. [NOISE]",
    "start": "586010",
    "end": "594780"
  },
  {
    "text": "So this is how we encode it into a factor graph. Um, in, in this case, we have variables,",
    "start": "594780",
    "end": "602415"
  },
  {
    "text": "where the variable is our guess for the real location for that object. We have two kinds of factors,",
    "start": "602415",
    "end": "608774"
  },
  {
    "text": "we have unary observation factors, um, that say how close is our guess to the observation, to what our sensor said.",
    "start": "608775",
    "end": "617040"
  },
  {
    "text": "And then we have transition factors, which basically tell us, um, you can't change your guess by too much from timestep to timestep.",
    "start": "617040",
    "end": "623880"
  },
  {
    "text": "So on this graph, what it would look like is if these are observations, so this is like o_1, o_2, and o_3, um,",
    "start": "623880",
    "end": "632295"
  },
  {
    "text": "then maybe our first guess would be here so we have X_1 down here,",
    "start": "632295",
    "end": "637889"
  },
  {
    "text": "we have X_2 down here, and then maybe like X_3 up here. Um, and so our observation factor is going to look at this distance.",
    "start": "637890",
    "end": "652875"
  },
  {
    "text": "And that would- what this is going to say is, okay, how far is our estimate from the observation?",
    "start": "652875",
    "end": "659670"
  },
  {
    "text": "And they want that to be close. And then our transition factors are gonna look,",
    "start": "659670",
    "end": "665265"
  },
  {
    "text": "are going to look at this distance between one object- one guess and the next guess,",
    "start": "665265",
    "end": "670410"
  },
  {
    "text": "and say, well, our guesses shouldn't be moving too much. Uh, yeah? What's the difference between observation and estimate?",
    "start": "670410",
    "end": "676560"
  },
  {
    "text": "Um, so the observation is what this sensor gives us, and the estimate is,",
    "start": "676560",
    "end": "682230"
  },
  {
    "text": "is us saying thank you for the- thank you sensor. Um, now, I think the person is actually right here,",
    "start": "682230",
    "end": "689400"
  },
  {
    "text": "because the sensor is noisy, we can't trust it, yeah.",
    "start": "689400",
    "end": "693580"
  },
  {
    "text": "Um, okay, so that's how we're going to set up this problem.",
    "start": "695750",
    "end": "701430"
  },
  {
    "text": "Um, and I think so there's and,",
    "start": "701430",
    "end": "706964"
  },
  {
    "text": "and- there's this really cool kind like Java applet that you can all play around with on your own time, um, and I will briefly walk you through it.",
    "start": "706965",
    "end": "715875"
  },
  {
    "text": "Um, so what's going on here is, um, basically- so there's a lot of documentation that you can read.",
    "start": "715875",
    "end": "722355"
  },
  {
    "start": "718000",
    "end": "1326000"
  },
  {
    "text": "Um, but basically what's happening here is we're just creating these variables, we have three variables, and we're allowing them to go in three positions.",
    "start": "722355",
    "end": "729585"
  },
  {
    "text": "So in position 0, 1 or 2. Um, and then this is a little function that's basically",
    "start": "729585",
    "end": "734880"
  },
  {
    "text": "encoding the fact that if things are nearby, then we want it- then we like that.",
    "start": "734880",
    "end": "740790"
  },
  {
    "text": "So we have two variables, A and B, and if they're in the same position, then we return 2, we really like that.",
    "start": "740790",
    "end": "746895"
  },
  {
    "text": "Um, if they are only one away from each other, we return 1, so it's okay, we'll take it. And if they're further away than 1 from each other,",
    "start": "746895",
    "end": "753360"
  },
  {
    "text": "then it's- we zero it out. That's a hard constraint, we don't like that. And then we have this observed function,",
    "start": "753360",
    "end": "759600"
  },
  {
    "text": "which is kind of a higher-level thing, and it kind of, um- I guess you could say it kind of like preloads our nearby function,",
    "start": "759600",
    "end": "768509"
  },
  {
    "text": "um, with, with a variable. Um, we're going to create our factors,",
    "start": "768510",
    "end": "774540"
  },
  {
    "text": "and then this is what it looks like. So we have, um, we have three variables,",
    "start": "774540",
    "end": "779790"
  },
  {
    "text": "we have X_1, X_2, and X_3, and then we have our observation factors are unary. Um, remember that say, okay,",
    "start": "779790",
    "end": "785430"
  },
  {
    "text": "you have to be close to the sensor, and then our transitional factors are binary. And that says you can't move too much between time steps.",
    "start": "785430",
    "end": "792509"
  },
  {
    "text": "Um, and you can run it, and there's actually a lot of output here, and I'm gonna ignore,",
    "start": "792510",
    "end": "798285"
  },
  {
    "text": "um, most of this for now. I think the thing that is important here is that we ran backtracking search,",
    "start": "798285",
    "end": "804915"
  },
  {
    "text": "and we found the optimal assignment. So in this case it's 1 for X_1,",
    "start": "804915",
    "end": "810315"
  },
  {
    "text": "2 for X_2, and 3 for X_3, which gives a final weight of 8. So on our little drawing,",
    "start": "810315",
    "end": "817904"
  },
  {
    "text": "um, basically what that's saying is,",
    "start": "817904",
    "end": "824895"
  },
  {
    "text": "is it saying something like this is optimal where we, we put- we say, thank you sensor there for these estimates,",
    "start": "824895",
    "end": "831134"
  },
  {
    "text": "but we think the person is actually here at time step 1, here at 2, and here at 3.",
    "start": "831135",
    "end": "836440"
  },
  {
    "text": "That's the solution that backtracking gave us. [NOISE] Uh, yeah?",
    "start": "836930",
    "end": "853620"
  },
  {
    "text": "[inaudible] so those are the weights or the timesteps because you were saying, it's like one then two. So X_1 1 this is a timestep 1,",
    "start": "853620",
    "end": "860880"
  },
  {
    "text": "and X_2 is timestep 2, but X_3 is also timestep 2. Yes, so the question was, what do you mean by here at 3?",
    "start": "860880",
    "end": "867075"
  },
  {
    "text": "And what I mean is basically, so X_i, X_i is an- is our, um, estimate for the position of this object.",
    "start": "867075",
    "end": "876404"
  },
  {
    "text": "And so at timestep 3, our estimate for the position is at position 2. And.",
    "start": "876405",
    "end": "884775"
  },
  {
    "text": "So is your timestep [inaudible]? Uh, yeah, so X_2 and X_3.",
    "start": "884775",
    "end": "890250"
  },
  {
    "text": "So that's why there's X' at two for both time- this is like timestep 1,",
    "start": "890250",
    "end": "896145"
  },
  {
    "text": "2, and 3. Yeah. Yeah? So I- I understand like what you're talking about with the scope of the factors,",
    "start": "896145",
    "end": "904500"
  },
  {
    "text": "but how exactly is their constraint being [inaudible] by the problem? Yeah, so the constraint here is,",
    "start": "904500",
    "end": "911565"
  },
  {
    "text": "um- so the fact that if we look at our nearby function,",
    "start": "911565",
    "end": "917595"
  },
  {
    "text": "and if A and B are farther than 1 away from each other, then it returns 0.",
    "start": "917595",
    "end": "922949"
  },
  {
    "text": "And that's a constraint because when we're calculating the weight of a factor graph, we multiplied together all the factors.",
    "start": "922950",
    "end": "930015"
  },
  {
    "text": "And so if there's a 0 in there, then the whole weight goes to 0. Um. The constraint is only for the transition factor but not for the [inaudible].",
    "start": "930015",
    "end": "938130"
  },
  {
    "text": "Yep, yeah, you can say that, yeah. Great, um, okay so that's our setup,",
    "start": "938130",
    "end": "947115"
  },
  {
    "text": "and we're gonna be returning to that a few times. Um, awesome.",
    "start": "947115",
    "end": "953700"
  },
  {
    "text": "Uh, okay, so moving on backtracking search,",
    "start": "953700",
    "end": "961815"
  },
  {
    "text": "very slow, let's try to speed it up. Beam search, faster. Yay, uh, beam search,",
    "start": "961815",
    "end": "967680"
  },
  {
    "text": "so backtracking search, if you- we have that tree analogy, right? And backtracking search exhaustively searches the entire tree,",
    "start": "967680",
    "end": "974820"
  },
  {
    "text": "gets us the best solution, but it's very slow. Um, and so one way to exha- avoid this kind of exhaustive search is greedy search,",
    "start": "974820",
    "end": "984165"
  },
  {
    "text": "which is where you greedily- it's like, um, for each variable, you greedily select the value that gives it the highest weight.",
    "start": "984165",
    "end": "993615"
  },
  {
    "text": "Uh, so it's right here, you look at the values it can take on, and you just choose whatever variable- whatever value is best.",
    "start": "993615",
    "end": "1000800"
  },
  {
    "text": "And you never look back, you just keep on running through it. Um, and you go through the whole tree this way until you end up at a complete solution.",
    "start": "1000800",
    "end": "1007910"
  },
  {
    "text": "Uh, so the benefits is its very fast, right? It's linear. But the con is that it's a very narrow window,",
    "start": "1007910",
    "end": "1016279"
  },
  {
    "text": "like you don't see a lot of the state space, you don't explore a lot, and so you can often miss the global max.",
    "start": "1016280",
    "end": "1022970"
  },
  {
    "text": "Um, so for people who, who prefer this kind of notation, what we are doing is we basically say,",
    "start": "1022970",
    "end": "1029630"
  },
  {
    "text": "we loop through all the variables, and, um, we try out every value,",
    "start": "1029630",
    "end": "1034804"
  },
  {
    "text": "and we just take whatever value has the highest weight. Um, yeah, so beam search,",
    "start": "1034805",
    "end": "1044600"
  },
  {
    "text": "um, is kind of like an in-between backtracking and greedy. Beam search is very cool, so one way to think. Yeah?",
    "start": "1044600",
    "end": "1052880"
  },
  {
    "text": "Excuse me. Come up again, [inaudible]. Yeah, so the question was explain that greedy again,",
    "start": "1052880",
    "end": "1057950"
  },
  {
    "text": "and so with greedy, what we're doing is, is we say, so we have- we have a partial assignment, right?",
    "start": "1057950",
    "end": "1064625"
  },
  {
    "text": "And we pick, we want, we want to extend our partial assignment. So we pick a new variable,",
    "start": "1064625",
    "end": "1072664"
  },
  {
    "text": "and we try out every single value that that variable can take on, and then we take the value that,",
    "start": "1072665",
    "end": "1079115"
  },
  {
    "text": "that, that gives it the highest weight. So all the factors touching that variable are the most happy with that value.",
    "start": "1079115",
    "end": "1085909"
  },
  {
    "text": "And we pick that, and then we never look back, and then we pick a new variable. [inaudible] the new value.",
    "start": "1085910",
    "end": "1099245"
  },
  {
    "text": "Yeah, so that's a good observation, we can end up at inconsistent solutions, and that's totally true.",
    "start": "1099245",
    "end": "1104285"
  },
  {
    "text": "Um, so you can actually, you can- and during our greedy search, you can actually kinda like find your way in kind of a hole where it's like,",
    "start": "1104285",
    "end": "1111485"
  },
  {
    "text": "oh damn, you know what? [LAUGHTER] I can't go any further. Um, and it's a big problem with greedy search.",
    "start": "1111485",
    "end": "1117335"
  },
  {
    "text": "Yeah, so with backtracking, um, beam search is kinda like a heuristic way to maybe get around that.",
    "start": "1117335",
    "end": "1124730"
  },
  {
    "text": "So with beam search, so remember again, in, in , um, so for greedy search,",
    "start": "1124730",
    "end": "1133460"
  },
  {
    "text": "we had one partial assignment, right? And we were choosing one variable, and choosing the extension of that one variable.",
    "start": "1133460",
    "end": "1139280"
  },
  {
    "text": "With beam search what you do is instead of one partial assignment, you maintain a list of k partial assignments.",
    "start": "1139280",
    "end": "1145505"
  },
  {
    "text": "In this case, k is 4. And then what you do is on every step is for each of your partial assignments,",
    "start": "1145505",
    "end": "1151969"
  },
  {
    "text": "you pick a new variable, you try all the ones. And then what you do is you- so you have your k partial assignments,",
    "start": "1151969",
    "end": "1159730"
  },
  {
    "text": "and you try to extend every partial assignment, you test out all the values for every partial assignment,",
    "start": "1159730",
    "end": "1166280"
  },
  {
    "text": "and then you sort those partial assignments based on their weight, and then you just take the top k. So it's like you have your partial assignments,",
    "start": "1166280",
    "end": "1173600"
  },
  {
    "text": "you extend them into all the possible successors, you sort them based on weight, and then you take the top k. So in this case,",
    "start": "1173600",
    "end": "1180800"
  },
  {
    "text": "if we have, um, four partial assignments, then we try extending them all in the two directions they can go,",
    "start": "1180800",
    "end": "1188060"
  },
  {
    "text": "and then we sorted them and then we took the four, you can see there's four things that are filled in that have the highest weight.",
    "start": "1188060",
    "end": "1196380"
  },
  {
    "text": "And we continue this procedure. So we say, um,",
    "start": "1197590",
    "end": "1203115"
  },
  {
    "text": "so what we would do in this case is we would say, okay, for each of these four solid things,",
    "start": "1203115",
    "end": "1209265"
  },
  {
    "text": "we're going to try out, we're going to extend each of those partial assignments, and then we sort all the extensions and select the top k. Um.",
    "start": "1209265",
    "end": "1222130"
  },
  {
    "text": "So yeah. It won't start if it is not K partial sums yet. You just sort of [inaudible].",
    "start": "1222130",
    "end": "1231720"
  },
  {
    "text": "Yeah, exactly. So the question was up to the part K, right? And the que- and the answer is yes. Yeah. So for example here, for example,",
    "start": "1231720",
    "end": "1237075"
  },
  {
    "text": "1 is less than K so we extend to 2. 2 is still less than K, so we can extend completely.",
    "start": "1237075",
    "end": "1242220"
  },
  {
    "text": "Um, so in- in notation, um, uh, yeah,",
    "start": "1242220",
    "end": "1249090"
  },
  {
    "text": "so we say for each- for each variable we- we try to extend each of our partial assignments and then we prune out everything but the K largest,",
    "start": "1249090",
    "end": "1257955"
  },
  {
    "text": "um, like best K weights. Um, so beam search is also not guaranteed to find the best weight.",
    "start": "1257955",
    "end": "1264899"
  },
  {
    "text": "Um, um, but what's cool about it is that",
    "start": "1264900",
    "end": "1270240"
  },
  {
    "text": "it- it gives you kinda like a knob that you can control between being greedy and exploring a lot.",
    "start": "1270240",
    "end": "1275370"
  },
  {
    "text": "So if K is very wide, then you explore more and more of the tree, um, and if K is actually infinity- I think this is on a slide soon.",
    "start": "1275370",
    "end": "1281910"
  },
  {
    "text": "Um, yeah, so if K is infinity, then that's actually like I can't do a breadth-first search of the entire tree. Yeah.",
    "start": "1281910",
    "end": "1287535"
  },
  {
    "text": "So on that graph or on the picture where you have like the solid and the shaded out ones- Yeah.",
    "start": "1287535",
    "end": "1292980"
  },
  {
    "text": "For that shaded out grey ones we would actually never explore those. Yeah. So- so this picture,",
    "start": "1292980",
    "end": "1298155"
  },
  {
    "text": "I don't think it's the best picture because, um, so for example, okay, so I'm looking like- I'm looking right here,",
    "start": "1298155",
    "end": "1305430"
  },
  {
    "text": "and in reality you would never extend this. Because it was never selected, um-",
    "start": "1305430",
    "end": "1312359"
  },
  {
    "text": "But you're still like initially explore it and then find that it's not- Yeah, so up here, so at this point, we do consider it, because we extend down,",
    "start": "1312359",
    "end": "1318630"
  },
  {
    "text": "but then we decided not to select it. Yeah. Awesome. Um, runtime.",
    "start": "1318630",
    "end": "1327750"
  },
  {
    "start": "1326000",
    "end": "2172000"
  },
  {
    "text": "So for- okay, so for beam search you're selecting a single node,",
    "start": "1327750",
    "end": "1332895"
  },
  {
    "text": "and then for, um, for each partial assignment, you're trying out every value in the domain.",
    "start": "1332895",
    "end": "1339090"
  },
  {
    "text": "So if b is the size of your domains, uh, then you're trying out b things for every partial assignment, and you have K partial assignments, right?",
    "start": "1339090",
    "end": "1345870"
  },
  {
    "text": "So tho- those are the number of extensions you have as Kb, and then to- you sort them,",
    "start": "1345870",
    "end": "1351435"
  },
  {
    "text": "and to sort it take- if you have a list of length n, sorting is n log n, and so you sort your list of Kb,",
    "start": "1351435",
    "end": "1358125"
  },
  {
    "text": "so that becomes Kb log Kb, and then there's n nodes that you need to- the height of this tree is n. So you do this n times.",
    "start": "1358125",
    "end": "1366000"
  },
  {
    "text": "Uh, so like I said, beam search of the K gives you this really cool knob,",
    "start": "1366000",
    "end": "1371055"
  },
  {
    "text": "between do you wanna explore everything, or do you want to focus in on um, on, you know, being fast and greedy?",
    "start": "1371055",
    "end": "1379060"
  },
  {
    "text": "Um, okay. So, uh, everything until now what we've covered is- is extending partial assignments.",
    "start": "1379640",
    "end": "1389580"
  },
  {
    "text": "So we have- we're giving like a blank slate, picture of Australia with no colors, and we say, \"Color me Australia.\"",
    "start": "1389580",
    "end": "1395520"
  },
  {
    "text": "Like build up this house from the foundations, and now what we're gonna talk about is, okay, given like a map of Australia that's already filled with covers- colors,",
    "start": "1395520",
    "end": "1403005"
  },
  {
    "text": "how do we make changes to it in order to improve it? And that's local search.",
    "start": "1403005",
    "end": "1409030"
  },
  {
    "text": "Uh, so the first algorithm is called Iterated Conditional Modes, ICM, um, and what ICM is doing is it says, okay,",
    "start": "1409160",
    "end": "1417330"
  },
  {
    "text": "we pick one variable, and then we ask, how- what is a new setting that we could choose",
    "start": "1417330",
    "end": "1422520"
  },
  {
    "text": "for this variable that would improve the overall weight? Um, so in this case, we have one variable, it's x_2,",
    "start": "1422520",
    "end": "1428895"
  },
  {
    "text": "and we try out all the different values it can take on, which is 0, 1 or 2.",
    "start": "1428895",
    "end": "1434100"
  },
  {
    "text": "Um, and then for each of those values we go through and recompute the weight,",
    "start": "1434100",
    "end": "1439200"
  },
  {
    "text": "and then we pick whatever value is best. So we start with 0, 0, 1, and here it looks like 1 is a better choice.",
    "start": "1439200",
    "end": "1445110"
  },
  {
    "text": "So we go with it, and- and from this, from now on we would say x_2 is equal to 1.",
    "start": "1445110",
    "end": "1451090"
  },
  {
    "text": "Um, so something cool about ICM is",
    "start": "1452480",
    "end": "1458040"
  },
  {
    "text": "that when you're evaluating a new value for a variable,",
    "start": "1458040",
    "end": "1463530"
  },
  {
    "text": "you only need to consider factors that touch that variable. That's all you really need to recompute because everything else is constant with respect to it,",
    "start": "1463530",
    "end": "1470745"
  },
  {
    "text": "and so that gives you big, big, big time savings in practice. Uh, one last thing is so the name Iterated Conditional Mode.",
    "start": "1470745",
    "end": "1477690"
  },
  {
    "text": "So iterated comes to the fact that you could solve the whole CSP this way. If you just iterate over which variable you're selecting.",
    "start": "1477690",
    "end": "1483660"
  },
  {
    "text": "Um, conditional means that once you select a variable, you're clamping down the values of everything else, and then modes are saying,",
    "start": "1483660",
    "end": "1491370"
  },
  {
    "text": "once you select your variable, you- you try out every single value for that variable.",
    "start": "1491370",
    "end": "1496455"
  },
  {
    "text": "Excuse me. Yeah. It just like kept bringing us every variable would you eventually like arrive at",
    "start": "1496455",
    "end": "1501659"
  },
  {
    "text": "the optimal solution or could you like kinda like end up in like- Yeah. So the question is if you kept- so if you- if you have",
    "start": "1501660",
    "end": "1507620"
  },
  {
    "text": "your three variables and you keep on going through them and- and choosing one, clamping the others, and then choosing the best value for it,",
    "start": "1507620",
    "end": "1513695"
  },
  {
    "text": "would you arrive at an optimal solution? And, uh, the answer is no. So, and we'll see- and we'll see that in practice, yeah.",
    "start": "1513695",
    "end": "1521290"
  },
  {
    "text": "Um, yeah. So again, this does- this is just",
    "start": "1522020",
    "end": "1527115"
  },
  {
    "text": "to give you an illusion that we iterate through these variables [NOISE], and for each variable,",
    "start": "1527115",
    "end": "1532335"
  },
  {
    "text": "um, we pick a weight that improves it. Um, [NOISE] so we have this in the demo.",
    "start": "1532335",
    "end": "1540429"
  },
  {
    "text": "So in this case what's going on here, is we're saying, okay, right now we've selected,",
    "start": "1540770",
    "end": "1546059"
  },
  {
    "text": "we're looking at x_1. Um, we start with a random initialization. We start- we're looking at x_1 and-",
    "start": "1546060",
    "end": "1552690"
  },
  {
    "text": "and these are the different values that x_1 could take on, and then we go through, um, and calculate the weight,",
    "start": "1552690",
    "end": "1559620"
  },
  {
    "text": "and we say, okay, 1 is the best weight for x_1 right here. So we choose 1 to be x_1,",
    "start": "1559620",
    "end": "1566309"
  },
  {
    "text": "and we step again, um, we're looking at x_2 now, and oh, it looks like actually a value of 1 is better for x_2,",
    "start": "1566310",
    "end": "1573945"
  },
  {
    "text": "and so from now on, we choose the value of 1 for x_2. And we iterate again,",
    "start": "1573945",
    "end": "1579780"
  },
  {
    "text": "now we're looking at x_3, and it looks like we choose the value of 1, and you just keep on iterating through this until you hit some kind of local optimum.",
    "start": "1579780",
    "end": "1587955"
  },
  {
    "text": "And why I'm saying this is important that it's a local optimum because right now, um, it's converged, so I can keep on pressing step and it's",
    "start": "1587955",
    "end": "1595050"
  },
  {
    "text": "not gonna change, but the weight is 4. And if you remember during the other thing when we",
    "start": "1595050",
    "end": "1600450"
  },
  {
    "text": "were in back-tracking we actually found an assignment with a weight of 8. So it does- it can fall into these local optima.",
    "start": "1600450",
    "end": "1607660"
  },
  {
    "text": "Um, one way around this is a second algorithm called Gibbs sampling.",
    "start": "1611450",
    "end": "1616635"
  },
  {
    "text": "Um, with Gibbs sampling what we do is we injected some randomness into the process to try to like bump us out,",
    "start": "1616635",
    "end": "1623130"
  },
  {
    "text": "um, bump us out of those local optima, into something that can maybe get us into a better area.",
    "start": "1623130",
    "end": "1630075"
  },
  {
    "text": "Um, so basically Gibbs sampling is super similar to ICM. The only difference is that instead of,",
    "start": "1630075",
    "end": "1636675"
  },
  {
    "text": "so you- you try all the values, and instead of selecting the value that gives you the biggest weight,",
    "start": "1636675",
    "end": "1642420"
  },
  {
    "text": "you sample the value, um, according with probability that's proportional to its weight.",
    "start": "1642420",
    "end": "1649290"
  },
  {
    "text": "So for like this example, we say, se- uh, setting of 0 would give us 1, value of 1 would give us weight of 2.",
    "start": "1649290",
    "end": "1655830"
  },
  {
    "text": "Value of 2 would give us a weight of 2, and then to get the probabilities we take the weight and we sum by- we divide by the total,",
    "start": "1655830",
    "end": "1664065"
  },
  {
    "text": "which would in this case will be 5. We sum all up and divide by that. That gives us the probability of 0.2. So here, we say it's 2 divided by 5,",
    "start": "1664065",
    "end": "1670919"
  },
  {
    "text": "which is 1 plus 2 plus 2, and then we use that probability distribution to sample",
    "start": "1670920",
    "end": "1677430"
  },
  {
    "text": "a new value for x_2 instead of just choosing and say, oh, you're the best.",
    "start": "1677430",
    "end": "1681760"
  },
  {
    "text": "Um, so this is the demo. So in this case we're looking at x_1,",
    "start": "1683900",
    "end": "1691515"
  },
  {
    "text": "and we're trying out different probabilities for it, and we have weights, and then that gives us a probability distribution,",
    "start": "1691515",
    "end": "1697485"
  },
  {
    "text": "and we sample from this probability distribution. So in this case, it looks like we sampled and we chose 0 for x_1,",
    "start": "1697485",
    "end": "1703905"
  },
  {
    "text": "and then we keep a record of how many times we've, um, ended up with cer- a certain assignment.",
    "start": "1703905",
    "end": "1709784"
  },
  {
    "text": "So if we step again, now we're looking at x_2. Um, it looks like x_1,",
    "start": "1709785",
    "end": "1716115"
  },
  {
    "text": "um, a value of 1 is the only thing that works. So we choose that value, and we add it to the counts.",
    "start": "1716115",
    "end": "1721245"
  },
  {
    "text": "Um, and you can just keep on running this process, um,",
    "start": "1721245",
    "end": "1727425"
  },
  {
    "text": "and over time [NOISE] you build up this kinda like probability distribution.",
    "start": "1727425",
    "end": "1734700"
  },
  {
    "text": "Um, so this is actually an unlikely sample. Um, so I had a point- I had 20% chance of choosing 1,",
    "start": "1734700",
    "end": "1742845"
  },
  {
    "text": "and 80% chance of choosing 2, but it still chose 1, and that's a way that it can kinda like break out of these local optimums.",
    "start": "1742845",
    "end": "1749970"
  },
  {
    "text": "Um, but in any case, if you look at this table, then what you find is that over time,",
    "start": "1749970",
    "end": "1755610"
  },
  {
    "text": "if you run this thousands, millions of times, then, um, in practice, uh,",
    "start": "1755610",
    "end": "1760725"
  },
  {
    "text": "settings with very high weights will occur very often.",
    "start": "1760725",
    "end": "1766995"
  },
  {
    "text": "Um, and actually when we get into probabilistic graphical models, which Chris will talk about soon, um,",
    "start": "1766995",
    "end": "1773295"
  },
  {
    "text": "you could actually say that, um, the global optimum will be the most frequent,",
    "start": "1773295",
    "end": "1779760"
  },
  {
    "text": "in Gibbs sampling in the limit, which is, I think pretty cool. Um, yeah.",
    "start": "1779760",
    "end": "1785370"
  },
  {
    "text": "Okay, so just to- just to show an example of- of what can go wrong with this algorithm, um, it's still flawed.",
    "start": "1785370",
    "end": "1793260"
  },
  {
    "text": "So if we have x_1, and we have x_2, and um, let's say,",
    "start": "1793260",
    "end": "1800330"
  },
  {
    "text": "um, let's say it's two people and they're trying to decide where to go to dinner. So we could have, um,",
    "start": "1800330",
    "end": "1805595"
  },
  {
    "text": "let's say they're deciding between vegetarian and going to a steakhouse. So we have V for vegetarian and S for steakhouse,",
    "start": "1805595",
    "end": "1813539"
  },
  {
    "text": "and they really both want to go to vegetarian, um, and they want to eat together, um,",
    "start": "1813770",
    "end": "1820065"
  },
  {
    "text": "and they'll eat steak but they're not super crazy about it. So if you're in this state,",
    "start": "1820065",
    "end": "1828890"
  },
  {
    "text": "then even if you're doing Gibbs sampling, it's really hard to bounce over here because you have",
    "start": "1828890",
    "end": "1833990"
  },
  {
    "text": "these two kinda like transitionary settings in between, and in order to make it to both vegetarian, um,",
    "start": "1833990",
    "end": "1841175"
  },
  {
    "text": "they're gonna have- one is gonna have to make the decision to go to a different restaurant, and so since this is so low priority,",
    "start": "1841175",
    "end": "1848510"
  },
  {
    "text": "it's- it's gonna be very difficult for these two people to go over to vegetarian. They're both kinda like, oh,",
    "start": "1848510",
    "end": "1854340"
  },
  {
    "text": "I wanna do what you wanna do. You wanna do steakhouse, right? I wanna eat together, you wanna eat together, let's do steakhouse then,",
    "start": "1854340",
    "end": "1859590"
  },
  {
    "text": "and they- they both don't really know that they will be much happier overall if they both get vegetarian.",
    "start": "1859590",
    "end": "1866170"
  },
  {
    "text": "Um, and then this- this would really be even worse if- if you had, so for example,",
    "start": "1866390",
    "end": "1872100"
  },
  {
    "text": "if you had like zeros here, then there's actually no way for them to get there. Because there's no probability there. Yeah.",
    "start": "1872100",
    "end": "1879750"
  },
  {
    "text": "So this is like it's basically very initialization, like centric, but whatever you pick is your initialization is gonna be very important.",
    "start": "1879750",
    "end": "1885615"
  },
  {
    "text": "Because if you initialize to the state where they're both vegetarian, then you'd never want to leave and you'd be happy to never leave it.",
    "start": "1885615",
    "end": "1890730"
  },
  {
    "text": "But if you initialize to both steak then you're in trouble. If you initialize [OVERLAPPING]- So in general, in optimization, um,",
    "start": "1890730",
    "end": "1897285"
  },
  {
    "text": "what- in any kind of optimization area where- where you can have this problem of falling into some kind of",
    "start": "1897285",
    "end": "1903570"
  },
  {
    "text": "local optimum that's worse than the global optimum, it's very dependent on your initialization. Yeah, because if you initialize over here then you'd fall somewhere lower,",
    "start": "1903570",
    "end": "1910920"
  },
  {
    "text": "just by chance. Yeah. But what if you like initialize that like SV or VS, where you initialize to a state where it was zero,",
    "start": "1910920",
    "end": "1916740"
  },
  {
    "text": "would you have an equal chance of [NOISE] one? Um, so the question was, what if you initialized into a state that had zero probability? Uh.",
    "start": "1916740",
    "end": "1925990"
  },
  {
    "text": "So what you would do is you would say, is you would select a variable,",
    "start": "1929360",
    "end": "1934635"
  },
  {
    "text": "you would select S1, and then you would try out different values for this. You would say, \"Okay, I'm going to either choose S or V holding X2 constant.\"",
    "start": "1934635",
    "end": "1944054"
  },
  {
    "text": "In that case, transitioning to V would have a probability of 1. So you would do that almost deterministically.",
    "start": "1944055",
    "end": "1950760"
  },
  {
    "text": "[inaudible] or rewards? Um, so for Gibbs sampling, these are probabilities,",
    "start": "1950760",
    "end": "1957420"
  },
  {
    "text": "you turn them into probabilities. Yeah. Yeah. So just to clarify, um,",
    "start": "1957420",
    "end": "1962774"
  },
  {
    "text": "Gibbs sampling is not guaranteed to find the best assignment? It is not guaranteed, yeah.",
    "start": "1962775",
    "end": "1967830"
  },
  {
    "text": "But you mentioned something like, in the limit it is? Um, yes.",
    "start": "1967830",
    "end": "1974070"
  },
  {
    "text": "But that's- so that's not like- that's kind of a theoretical point, it's not really practical. Yeah. it's- so in the limit doesn't mean like,",
    "start": "1974070",
    "end": "1983070"
  },
  {
    "text": "I guarantee, I guess, um, yeah, I guess you could interpret it that way.",
    "start": "1983070",
    "end": "1989020"
  },
  {
    "text": "Um, yeah.",
    "start": "1993830",
    "end": "1998940"
  },
  {
    "text": "So I guess, this is directly about your question. So if you were to compare these questions, uh,",
    "start": "1998940",
    "end": "2004850"
  },
  {
    "text": "which ones are guaranteed to give you the maximum weight assignment? And the only one is backtracking search,",
    "start": "2004850",
    "end": "2010414"
  },
  {
    "text": "because greedy is too narrow, beam search is maybe too narrow, um,",
    "start": "2010415",
    "end": "2015530"
  },
  {
    "text": "ICM is too myopic, and Gibbs sampling is you- it's not a guarantee,",
    "start": "2015530",
    "end": "2023210"
  },
  {
    "text": "it's likely, but it's not guaranteed. Yeah. [inaudible].",
    "start": "2023210",
    "end": "2029270"
  },
  {
    "text": "Sorry. Can you say it again. For this example, even if the limit, it wont converge to the optimum [inaudible]? Yeah. So the question was, In this example,",
    "start": "2029270",
    "end": "2035675"
  },
  {
    "text": "even in the limit, you wouldn't converge, and that's true. So if you- if you initialized right here,",
    "start": "2035675",
    "end": "2040805"
  },
  {
    "text": "there's no way for you to get over there. Yeah. So yeah. I think it's just in certain conditions.",
    "start": "2040805",
    "end": "2048710"
  },
  {
    "text": "Yeah. So that I did- I wasn't- my intent wasn't to confuse you guys. So it- let say that it was a theoretical point for like,",
    "start": "2048710",
    "end": "2056210"
  },
  {
    "text": "some subsets, some CSPs yeah, yeah. Like you said, if we suppose initialized X steak state it-",
    "start": "2056210",
    "end": "2064790"
  },
  {
    "text": "there's no point that we can go to like, vegetable, vegetable, right? Because in the- the middle transition part equal 0.",
    "start": "2064790",
    "end": "2071825"
  },
  {
    "text": "So, uh, is it like safe to say that, uh, when you are modeling a problem, uh, with Gibbs sampling, you should never read,",
    "start": "2071825",
    "end": "2078454"
  },
  {
    "text": "even if you encounter probability zero just give them some epsilon probability so that there might exist some chance to,",
    "start": "2078455",
    "end": "2085760"
  },
  {
    "text": "uh, go to the optimum? Yeah, so the question was, uh, is it worthwhile to add some like plus 0.0001 to these just to give it some probability?",
    "start": "2085760",
    "end": "2096365"
  },
  {
    "text": "And I- my intuition says that's it sounds like a pretty good idea, uh,",
    "start": "2096365",
    "end": "2101930"
  },
  {
    "text": "it sounds kinda like adding tiny little epsilons to avoid division by 0, but, um, I think it would depend on the problem that you're solving.",
    "start": "2101930",
    "end": "2110190"
  },
  {
    "text": "Though, you can imagine some cases where you would really want those zeros. Um, okay.",
    "start": "2110740",
    "end": "2120330"
  },
  {
    "text": "So just to summarize so far, um, we've learned two ways of extending partial assignments in these graphs.",
    "start": "2120700",
    "end": "2126680"
  },
  {
    "text": "So one is backtracking search we learned last time, which is like a full search of that tree, gives you the exact solution every time super slow.",
    "start": "2126680",
    "end": "2134075"
  },
  {
    "text": "Beam search is approximate, and it gives you this cool little knob to trade off, um,",
    "start": "2134075",
    "end": "2139370"
  },
  {
    "text": "speed and I guess, you could say like success, um, or exactness.",
    "start": "2139370",
    "end": "2146450"
  },
  {
    "text": "And then second, we learned ways to given a assignment to improve it, to modify it.",
    "start": "2146450",
    "end": "2151640"
  },
  {
    "text": "One was ICM, which was approximate, and then, um, the other is Gibbs sampling, which is also approximate,",
    "start": "2151640",
    "end": "2157490"
  },
  {
    "text": "but it uses some probability, um, and some randomization. And now what we're going to look at, we're gonna look at two ways to solve these kinds of",
    "start": "2157490",
    "end": "2166099"
  },
  {
    "text": "problems by actually changing the structure of the graph itself.",
    "start": "2166100",
    "end": "2170760"
  },
  {
    "text": "Um, so our motivation comes from Australia, um, Tasmania, [LAUGHTER] That is- that is the motivation.",
    "start": "2171190",
    "end": "2182434"
  },
  {
    "start": "2172000",
    "end": "2327000"
  },
  {
    "text": "So Tasmania, if you remember, was completely disconnected, right? So I think we called it red in the previous example,",
    "start": "2182435",
    "end": "2188210"
  },
  {
    "text": "but it doesn't really matter what color we gave her, right? We give it anything we wanted. And so what we want is we want to kind of leverage this property.",
    "start": "2188210",
    "end": "2196160"
  },
  {
    "text": "And more than leverage it, we want to- we want to kinda like inject this property into graphs that don't exhibit it.",
    "start": "2196160",
    "end": "2202984"
  },
  {
    "text": "We want to- we want to like build this probability, and this property out of graphs.",
    "start": "2202985",
    "end": "2208310"
  },
  {
    "text": "Um, so first we were like, what is this? It's called independence, and it can speed things up.",
    "start": "2208310",
    "end": "2215755"
  },
  {
    "text": "So just like I said before, um, so is it still there? My old- Oh, it's partially erased.",
    "start": "2215755",
    "end": "2225670"
  },
  {
    "text": "[LAUGHTER] Um, so if we write this down again.",
    "start": "2225670",
    "end": "2234390"
  },
  {
    "text": "Um, so this is the same examples before.",
    "start": "2235120",
    "end": "2242330"
  },
  {
    "text": "We have two variables each with a unitary factor on it.",
    "start": "2242330",
    "end": "2249440"
  },
  {
    "text": "Um, with backtracking search, I told you what happened, right? You do something really dumb,",
    "start": "2249440",
    "end": "2255065"
  },
  {
    "text": "which is you do, it's- it's like two for loops, right? You try out every combination of them, which is exponential.",
    "start": "2255065",
    "end": "2261560"
  },
  {
    "text": "Whereas what you could really do is just say, \"Okay, for each thing, I'm gonna choose the value that maximizes,",
    "start": "2261560",
    "end": "2266839"
  },
  {
    "text": "that makes my factor most happy.\" And that's linear time.",
    "start": "2266840",
    "end": "2270450"
  },
  {
    "text": "And so that would give us a more efficient algorithm. Um, oh, no.",
    "start": "2271870",
    "end": "2281130"
  },
  {
    "text": "Okay. And we call that property independence.",
    "start": "2283390",
    "end": "2288724"
  },
  {
    "text": "So A, um, so in this case, X1 and X2 are independent, and the reason that they're independent is that there is no factor connecting them,",
    "start": "2288725",
    "end": "2296930"
  },
  {
    "text": "there's no paths between them, and there's no edges between them. And so we call that independence.",
    "start": "2296930",
    "end": "2302990"
  },
  {
    "text": "And that's the same thing with Tasmania and the rest of Australia. Um, so I don't know how independent it is, like culturally or politically,",
    "start": "2302990",
    "end": "2309950"
  },
  {
    "text": "but it certainly is in terms of like map coloring, graph theoryness. Uh, in symbols, so we use this,",
    "start": "2309950",
    "end": "2316160"
  },
  {
    "text": "we use this kind of cool-looking pipe thing, um, and that denotes independence.",
    "start": "2316160",
    "end": "2321785"
  },
  {
    "text": "So yeah, so like we said, Tasmania is independent. Um, what about cases like this?",
    "start": "2321785",
    "end": "2332160"
  },
  {
    "start": "2327000",
    "end": "2662000"
  },
  {
    "text": "So it's not quite independent, but it's almost independent, you know,",
    "start": "2333730",
    "end": "2339365"
  },
  {
    "text": "only if X1 didn't exist, then the rest of them would be independent. Um, and so that- this is where we introduced this idea of conditioning.",
    "start": "2339365",
    "end": "2349610"
  },
  {
    "text": "And, um, conditioning is a way to rip nodes out of a graph.",
    "start": "2349610",
    "end": "2357660"
  },
  {
    "text": "So- and we do that by- by saying,",
    "start": "2357700",
    "end": "2363079"
  },
  {
    "text": "okay, in- in this example, let me draw it up. Um, so it's X1 and X2,",
    "start": "2363080",
    "end": "2369080"
  },
  {
    "text": "and then it's 1, 7, 3, 2. 1, 7, 3, 2, and red.",
    "start": "2369080",
    "end": "2378180"
  },
  {
    "text": "So 1, 7, 3, 2, red, red, red,",
    "start": "2378250",
    "end": "2384185"
  },
  {
    "text": "blue, blue, red, blue, blue, 2, 3, 7, 1.",
    "start": "2384185",
    "end": "2392730"
  },
  {
    "text": "Okay. So we're saying X_1 and X_2 are connected to each other with the factor right?",
    "start": "2395930",
    "end": "2403530"
  },
  {
    "text": "[NOISE] But what if I say X_2 is definitely blue? Yeah.",
    "start": "2403530",
    "end": "2409830"
  },
  {
    "text": "So we're talking about constraint satisfaction problems, but also like graph problems will do well, like all constraint satisfaction problems can be all be written as like graph problems?",
    "start": "2409830",
    "end": "2418800"
  },
  {
    "text": "Yes. So the question was, can, uh, constraint satisfaction problems be written as graphs and as all of them?",
    "start": "2418800",
    "end": "2425805"
  },
  {
    "text": "Um, uh, yes, yeah,",
    "start": "2425805",
    "end": "2430920"
  },
  {
    "text": "because fac- because variables are nodes and factors are edges, yeah. So it's actually really elegant way to think",
    "start": "2430920",
    "end": "2438720"
  },
  {
    "text": "about it because then you can bring in all this graph theory stuff. Um, can you also see the board?",
    "start": "2438720",
    "end": "2443790"
  },
  {
    "text": "No. Okay, I'll try to write big. [LAUGHTER] Um, but, um, okay.",
    "start": "2443790",
    "end": "2451230"
  },
  {
    "text": "So if- if I say X_2 is definitely blue, like, trust me it's blue. Then what does that let me do?",
    "start": "2451230",
    "end": "2456795"
  },
  {
    "text": "Um, it let's me cross out all the rows where X_2 is not blue. So here, X_2 is red,",
    "start": "2456795",
    "end": "2463080"
  },
  {
    "text": "so I can be like, \"You are never gonna happen. I know you're not the case, you are not true.\" And for you, same thing,",
    "start": "2463080",
    "end": "2469500"
  },
  {
    "text": "you are not gonna happen. And now once I fix X_2, I don't- all of X_2s values are the same.",
    "start": "2469500",
    "end": "2477015"
  },
  {
    "text": "So this doesn't really add information to this table, and I can just drop that data from the table.",
    "start": "2477015",
    "end": "2483375"
  },
  {
    "text": "And what that gives me, is it gives me a reduced table, which is just a unary factor of X_1,",
    "start": "2483375",
    "end": "2489690"
  },
  {
    "text": "and that it can take on red or blue, and then I have a value of 7 if I choose red,",
    "start": "2489690",
    "end": "2494910"
  },
  {
    "text": "and 2 if I choose blue. And graphically, what that looks like is, I'm deleting X_2,",
    "start": "2494910",
    "end": "2503115"
  },
  {
    "text": "and I just have one factor now, X_1, and it has a unitary factor.",
    "start": "2503115",
    "end": "2510075"
  },
  {
    "text": "Um, now the price to pay for that was I had to assume that X_2 was blue. I had to condition on X_2 being blue.",
    "start": "2510075",
    "end": "2517184"
  },
  {
    "text": "Um, so notationally or maybe like programmatically,",
    "start": "2517185",
    "end": "2523740"
  },
  {
    "text": "uh, I think a good way to think about it, is it's kinda like you're taking this- the factor that touches X_2,",
    "start": "2523740",
    "end": "2529470"
  },
  {
    "text": "and you're kinda like preloading it with a value for one of the arguments, and then the rest of it is untouched.",
    "start": "2529470",
    "end": "2537300"
  },
  {
    "text": "So you choose a value for a variable, you remove the value,",
    "start": "2537300",
    "end": "2544529"
  },
  {
    "text": "the variable from the graph, and then you- you stick in that value, you preload the associated factors with that value.",
    "start": "2544529",
    "end": "2551910"
  },
  {
    "text": "Um, so for exep- example, if we were to condition on these, and I'm saying SA is green and Q is blue- as red, trust me.",
    "start": "2551910",
    "end": "2559785"
  },
  {
    "text": "And then what that does is it rips those out of the graph, and everything touching, um,",
    "start": "2559785",
    "end": "2564974"
  },
  {
    "text": "everything touching those conditioned variables turns into some kind of a stump, and you preload the value for those variables in.",
    "start": "2564975",
    "end": "2572775"
  },
  {
    "text": "Um, the only edge that gets removed here is the one that connects SA and Q.",
    "start": "2572775",
    "end": "2577934"
  },
  {
    "text": "And that's because you have a function that takes two arguments, but you've preloaded both of those arguments already,",
    "start": "2577935",
    "end": "2583920"
  },
  {
    "text": "so the- it's done, there's nothing to do there. Might as well not exist. Um, just an example of the new factors that go in.",
    "start": "2583920",
    "end": "2591630"
  },
  {
    "text": "So NT, for example, um, that would- this factor, which you used to say NT and Q can't have the same color.",
    "start": "2591630",
    "end": "2599340"
  },
  {
    "text": "It- it turns into this little thing, which just says NT can't be red.",
    "start": "2599340",
    "end": "2604905"
  },
  {
    "text": "And you know that because you are assuming that Q- you're conditioning on the fact that Q is red. Yeah. [inaudible] independence, is it like two variables have",
    "start": "2604905",
    "end": "2613529"
  },
  {
    "text": "no edge between them or no path that can connect them in the ground? Um, yes, so the question was,",
    "start": "2613530",
    "end": "2620565"
  },
  {
    "text": "is independence no edge? Er, does independence mean is there no edge between them or is there no path between them?",
    "start": "2620565",
    "end": "2627255"
  },
  {
    "text": "And, uh, we will talk about that. Um, so for independence, um, uh,",
    "start": "2627255",
    "end": "2633670"
  },
  {
    "text": "you'd need both true, um, but then we're gonna cover another form of independence called conditional independence,",
    "start": "2633980",
    "end": "2640560"
  },
  {
    "text": "uh, which is just the latter, yeah. How is this different from the idea of extending partial assignments,",
    "start": "2640560",
    "end": "2646260"
  },
  {
    "text": "because actually like starting with partial assignment in the graph, and you're kind of exploring or optimizing the rest of the nodes based on a partial assignment?",
    "start": "2646260",
    "end": "2653295"
  },
  {
    "text": "Yes. So the question was, how is this different from extending partial assignments? And, um, it's not so- that's actually a good point.",
    "start": "2653295",
    "end": "2660060"
  },
  {
    "text": "I think- so conditioning might actually be a case of building up partial assignments.",
    "start": "2660060",
    "end": "2665835"
  },
  {
    "start": "2662000",
    "end": "2893000"
  },
  {
    "text": "Um, this- so what- I think the main thing to think about is now we've kind of like moved on.",
    "start": "2665835",
    "end": "2671835"
  },
  {
    "text": "So partial assign- extending partial assignments and modifying existing partial assignments, that was kind of like our old world, which is where, like,",
    "start": "2671835",
    "end": "2679380"
  },
  {
    "text": "this graph structure is very perfect and we can't touch it or change it. Now we're in a new world where we're allowed to change the structure of the graph.",
    "start": "2679380",
    "end": "2687165"
  },
  {
    "text": "Um, and so we kind of like left that way of thinking. Yeah, yeah.",
    "start": "2687165",
    "end": "2692280"
  },
  {
    "text": "What drives the decision-making process, so it'd like setting it to green or setting it to red? Um, what drives the decision process of choosing these values?",
    "start": "2692280",
    "end": "2700410"
  },
  {
    "text": "Um, we will get into that. Yeah, yeah. And how do you know exactly to condition those two,",
    "start": "2700410",
    "end": "2706935"
  },
  {
    "text": "um, and that you end in a re- independent result afterwards? Yeah, so the question was, why did we choose to condition these?",
    "start": "2706935",
    "end": "2713369"
  },
  {
    "text": "So in this example it's arbitrary, but soon we're gonna cover ways of choosing them. Yeah. How is it different from forward checking?",
    "start": "2713370",
    "end": "2720765"
  },
  {
    "text": "What? How is it different from forward checking? How is this different from for checking? So in forward checking,",
    "start": "2720765",
    "end": "2726390"
  },
  {
    "text": "what we were doing is- is we were propagating the decision forward and to reduce the domain of existing factors.",
    "start": "2726390",
    "end": "2735494"
  },
  {
    "text": "Whereas, in this one, we are- we are changing the structure of the graph itself, and we're- we're literally removing variables and inserting new factors.",
    "start": "2735495",
    "end": "2746320"
  },
  {
    "text": "Um, okay, so I'll move on. Um, graphically, in general,",
    "start": "2748520",
    "end": "2754620"
  },
  {
    "text": "what this looks like is, if you have a variable that you want to condition, um,",
    "start": "2754620",
    "end": "2759885"
  },
  {
    "text": "you rip it out of the graph, and then everything that touches it turns into some kind of a stub, um, with the value preloaded in there.",
    "start": "2759885",
    "end": "2767430"
  },
  {
    "text": "Uh, this is just a picture of the same idea.",
    "start": "2767430",
    "end": "2773805"
  },
  {
    "text": "Um, yeah, so I guess you could say this is the main- this is the big difference is that whereas in forward propagation,",
    "start": "2773805",
    "end": "2783030"
  },
  {
    "text": "um, we were keeping the existing graph and we're just propagating our decisions to reduce domains.",
    "start": "2783030",
    "end": "2788220"
  },
  {
    "text": "Whereas now, we're- we're literally removing this variable and the factors with it,",
    "start": "2788220",
    "end": "2793695"
  },
  {
    "text": "and then we're adding new factors, um, that are preloaded.",
    "start": "2793695",
    "end": "2798910"
  },
  {
    "text": "Uh, okay, so we are going to- now go to what you're asking about,",
    "start": "2800900",
    "end": "2806430"
  },
  {
    "text": "which is conditional independence. Um, so if you have three- if you have three variables; A, B,",
    "start": "2806430",
    "end": "2812670"
  },
  {
    "text": "and C. So let's say we have A, um,",
    "start": "2812670",
    "end": "2817755"
  },
  {
    "text": "C, and B, um, then you would say that A and B are conditionally independent,",
    "start": "2817755",
    "end": "2825030"
  },
  {
    "text": "because once you condition on C, once you pick a value for C, remember,",
    "start": "2825030",
    "end": "2830819"
  },
  {
    "text": "these turn into stubs or stumps or whatever you wanna call them, Gs.",
    "start": "2830820",
    "end": "2837195"
  },
  {
    "text": "Um, and so these are now independent. They used to not be independent because there is- there is a- they could access each other through C,",
    "start": "2837195",
    "end": "2844950"
  },
  {
    "text": "but now they're independent. There is no edge connecting them, and there's no way to reach each other.",
    "start": "2844950",
    "end": "2849940"
  },
  {
    "text": "Um, and so this- this is just a way of formalizing that, um, this is how we write it.",
    "start": "2850460",
    "end": "2855900"
  },
  {
    "text": "So we condition on C, and then A and B become independent. Um.",
    "start": "2855900",
    "end": "2861730"
  },
  {
    "text": "Yeah. So commonly you say every path from A to B goes through C. And then that means if you remove C,",
    "start": "2864920",
    "end": "2870270"
  },
  {
    "text": "then there's no path connecting them. Um, so in this example, um, you have SA and Q, if you condition on them,",
    "start": "2870270",
    "end": "2876615"
  },
  {
    "text": "then you rip them out of the graph, and then it looks like Western and Eastern Australia are now independent of each other because they- they've turned into islands.",
    "start": "2876615",
    "end": "2885940"
  },
  {
    "text": "Um, and that's writing it mathematically.",
    "start": "2887030",
    "end": "2893294"
  },
  {
    "start": "2893000",
    "end": "3020000"
  },
  {
    "text": "So there's another notion of the Markov blanket, which is basically saying, \"Okay,",
    "start": "2893294",
    "end": "2899625"
  },
  {
    "text": "I want to make- I've chosen some subset of the graph, in this case it's V, and I want to make it independent.",
    "start": "2899625",
    "end": "2906555"
  },
  {
    "text": "What is- what- what are the variables I have to destroy in order to make my variable an island?\"",
    "start": "2906555",
    "end": "2913680"
  },
  {
    "text": "Um, so in this case it would be SA and NSW. If you condition on these,",
    "start": "2913680",
    "end": "2920175"
  },
  {
    "text": "then V becomes an island and it's independent. If you wanted to make this subset independent,",
    "start": "2920175",
    "end": "2926474"
  },
  {
    "text": "then you would condition on Q and SA. And the set of nodes, um,",
    "start": "2926475",
    "end": "2932819"
  },
  {
    "text": "that you have to condition on is called the Markov blanket of the set of nodes that you want to be independent.",
    "start": "2932820",
    "end": "2940270"
  },
  {
    "text": "Um, so it's like if you have some part of the graph A and you wanna make it independent of a part B,",
    "start": "2943730",
    "end": "2951660"
  },
  {
    "text": "then C is kind of like the Markov blanket of A if, um, when you delete it,",
    "start": "2951660",
    "end": "2957855"
  },
  {
    "text": "A becomes independent of C. Um, this thing- this is kinda like a set notation thing,",
    "start": "2957855",
    "end": "2963480"
  },
  {
    "text": "it's a set difference. Um, and this is just a [NOISE] way of writing it more mathematically.",
    "start": "2963480",
    "end": "2969570"
  },
  {
    "text": "[NOISE] Um, so we can use these ideas to,",
    "start": "2969570",
    "end": "2979424"
  },
  {
    "text": "um, to like create independent structures now of our data.",
    "start": "2979424",
    "end": "2984480"
  },
  {
    "text": "So we had this example before where it was almost independent, but not quite. Now what we can do, is we can condition on it.",
    "start": "2984480",
    "end": "2992385"
  },
  {
    "text": "So we condition this to be red, and then we can find the maximum weight assignment of the rest of it, which we showed was easy before, right?",
    "start": "2992385",
    "end": "2998460"
  },
  {
    "text": "With- with this example, is just linear, like what's the best for you? What's the best for you? So once we condition on this thing that's making it non-independent,",
    "start": "2998460",
    "end": "3006280"
  },
  {
    "text": "then it be- the problem becomes very easy. So what we do to solve this, um, is we just condition repeatedly.",
    "start": "3006280",
    "end": "3012380"
  },
  {
    "text": "We say, \"Okay, I've picked my node, now for red, green, and blue, solve it.\"",
    "start": "3012380",
    "end": "3019475"
  },
  {
    "text": "Condition and solve, condition and solve, condition and solve. Um, and this becomes very quick,",
    "start": "3019475",
    "end": "3024740"
  },
  {
    "start": "3020000",
    "end": "3424000"
  },
  {
    "text": "and then you can read off the maximum weight very easy. [NOISE] You just say, \"Oh, it's green because that was",
    "start": "3024740",
    "end": "3031460"
  },
  {
    "text": "the maximum weight I found once after conditioning.\" Yeah.",
    "start": "3031460",
    "end": "3037025"
  },
  {
    "text": "So that the weight there, so the weight that's- some of the weights are holding together, just like one. Um, so the product of the weight. So one of weight.",
    "start": "3037025",
    "end": "3044645"
  },
  {
    "text": "The question was when we talk about weights, what is that mean? And, um, this is- its kinda loosey-goosey,",
    "start": "3044645",
    "end": "3049760"
  },
  {
    "text": "it's not very formally defined. But in this example, I would say it's the weight of the whole graph.",
    "start": "3049760",
    "end": "3055055"
  },
  {
    "text": "So you condition on this and then you find the best values for all of these variables,",
    "start": "3055055",
    "end": "3060635"
  },
  {
    "text": "and then you take the products of all of those unary factors, and that gives you, um, the weight.",
    "start": "3060635",
    "end": "3068040"
  },
  {
    "text": "Is this just a example or is this the actually what the numbers would be, like [inaudible] This is just an example. Okay. Yeah, their numbers are arbitrary.",
    "start": "3068200",
    "end": "3074359"
  },
  {
    "text": "Okay. Yeah, yeah. So if you are going through R, G and B, isn't that the same as doing like all possible combinations, anyway or computationally?",
    "start": "3074360",
    "end": "3083150"
  },
  {
    "text": "Uh, yeah, it is. So- so it is, um, so you [NOISE] cover every solution that backtracking would give you,",
    "start": "3083150",
    "end": "3092270"
  },
  {
    "text": "this would give you two. Yeah. Um, this is much faster, because what you're doing is you're taking",
    "start": "3092270",
    "end": "3097940"
  },
  {
    "text": "a very complicated problem and you're breaking it into easily solvable pieces. You- you're taking an exponential problem and you're breaking it",
    "start": "3097940",
    "end": "3106940"
  },
  {
    "text": "into a linear number of linearly solvable pieces. And in practice it's much faster.",
    "start": "3106940",
    "end": "3113225"
  },
  {
    "text": "It's more just like imitational distinction rather than like space search distinction? Uh, yes.",
    "start": "3113225",
    "end": "3118505"
  },
  {
    "text": "Yeah, sort of, yeah. Yeah. So adding on to that is essentially that",
    "start": "3118505",
    "end": "3123650"
  },
  {
    "text": "instead of doing all possible assignments for all of the variables, you're just choosing a subset of them to like, exhaustively search?",
    "start": "3123650",
    "end": "3132380"
  },
  {
    "text": "So the question was, instead of doing- instead of exhaustively searching all variables, you're exhaustively searching just a couple of variables.",
    "start": "3132380",
    "end": "3138859"
  },
  {
    "text": "And, um, um, yeah,",
    "start": "3138860",
    "end": "3145565"
  },
  {
    "text": "that's an interesting way of- of thinking about it. I think in both- in both ways, if you think about it, you've- it's like,",
    "start": "3145565",
    "end": "3151985"
  },
  {
    "text": "even if you're conditioning for every single variable, you're eventually going to consider all of the values it can take on.",
    "start": "3151985",
    "end": "3158970"
  },
  {
    "text": "But you'd- you're- you're reordering things in a way that's much smarter, and that lets you take care of, like,",
    "start": "3158970",
    "end": "3166720"
  },
  {
    "text": "take advantage of this independent structure, um, in order to do it better. Yeah. [NOISE] Any more questions on this?",
    "start": "3166720",
    "end": "3179310"
  },
  {
    "text": "Do you think it's faster than- Yeah, so- so it is faster than backtracking, and you can see it here.",
    "start": "3179970",
    "end": "3185900"
  },
  {
    "text": "So for example, if we did backtracking here, um, it would be, what?",
    "start": "3185900",
    "end": "3191019"
  },
  {
    "text": "There's three colors and there's seven nodes. So it- it would be this huge exponential blowup. Whereas, if we condition here,",
    "start": "3191020",
    "end": "3197380"
  },
  {
    "text": "then it- it becomes much smaller. Um, okay. So just to summarize independence is when we",
    "start": "3197380",
    "end": "3205910"
  },
  {
    "text": "have A and B and they can't- there's no way to get from A to B. Conditioning is when we- we take,",
    "start": "3205910",
    "end": "3213290"
  },
  {
    "text": "um, a var- a val- we take a variable, plug-in its value, rip it out of the graph,",
    "start": "3213290",
    "end": "3219050"
  },
  {
    "text": "um, and then like pre-load all the factors that touched it. Yeah. I have a question on the last slide.",
    "start": "3219050",
    "end": "3224990"
  },
  {
    "text": "Okay. Let- I'll finish this first. Okay. Um, conditional independence is when you have, um,",
    "start": "3224990",
    "end": "3230960"
  },
  {
    "text": "two blocks in your graph, and if you condition on one part of your graph,",
    "start": "3230960",
    "end": "3236690"
  },
  {
    "text": "then if you rip that out, then these two become separated. And then a Markov blanket is saying,",
    "start": "3236690",
    "end": "3243260"
  },
  {
    "text": "\"Okay, I wanna make my variable an island. What nodes do I have to destroy to make it an island?\"",
    "start": "3243260",
    "end": "3248525"
  },
  {
    "text": "Yeah. What was your question? Um, I guess, I'm like unsure why it's computationally cheaper",
    "start": "3248525",
    "end": "3257210"
  },
  {
    "text": "because if you try- if you condition on X_1 range of the colors,",
    "start": "3257210",
    "end": "3262220"
  },
  {
    "text": "you see I have to- like- like, you're basically, you still have to come up with three sets of",
    "start": "3262220",
    "end": "3271190"
  },
  {
    "text": "unary factors for each of the flow variables [OVERLAPPING] and you iterate over each other domains [OVERLAPPING] it also seems exponential?",
    "start": "3271190",
    "end": "3278090"
  },
  {
    "text": "So- so in this case- so doing backtracking. So if we did backtracking- [LAUGHTER] so if we did backtracking that will be what?",
    "start": "3278090",
    "end": "3290285"
  },
  {
    "text": "7_3, right? Is that true? Yes.",
    "start": "3290285",
    "end": "3295860"
  },
  {
    "text": "3_7? Yeah. [LAUGHTER] And then if we did, um, conditioning,",
    "start": "3295860",
    "end": "3301520"
  },
  {
    "text": "[NOISE] so that'll be 3 for the first condition, right?",
    "start": "3301520",
    "end": "3309530"
  },
  {
    "text": "And then, every time we condition, we do, um, uh,",
    "start": "3309530",
    "end": "3315050"
  },
  {
    "text": "7 times 3, right? 6 times 3.",
    "start": "3315050",
    "end": "3320540"
  },
  {
    "text": "All right. 6 times 3. Yeah, you're right. 6 times 3. So this is, uh, 6 squared, right?",
    "start": "3320540",
    "end": "3331400"
  },
  {
    "text": "So what is this like? What? Is it still 6 times 3 or 3 times 3? 6 times, [OVERLAPPING] um, it depends.",
    "start": "3331400",
    "end": "3338990"
  },
  {
    "text": "I don't- I don't- I don't know exactly what these factors are saying. Um, this is kind of an arbitrary example.",
    "start": "3338990",
    "end": "3344975"
  },
  {
    "text": "But I think- I think the point- the point here is that,",
    "start": "3344975",
    "end": "3350210"
  },
  {
    "text": "um, this is smaller, right? So this is- this is 3_4 or whatever.",
    "start": "3350210",
    "end": "3355775"
  },
  {
    "text": "Um, so it's faster. Yeah. Yeah. Can you explain how you're getting",
    "start": "3355775",
    "end": "3362270"
  },
  {
    "text": "that value of that computation referring to that condition. Down here? Yeah. Yeah. So this was saying- this is saying that there's three colors for X_1.",
    "start": "3362270",
    "end": "3372910"
  },
  {
    "text": "And then every time I choose a color for X_1, I'm saying that there's, um, three options for each of the six other things.",
    "start": "3372910",
    "end": "3380785"
  },
  {
    "text": "So once I- once I've, once I've set X_1, it turns into this situation.",
    "start": "3380785",
    "end": "3386345"
  },
  {
    "text": "Where now I'm saying, what's the best value for X-1? Okay. So I look at three things and choose the best.",
    "start": "3386345",
    "end": "3392940"
  },
  {
    "text": "Now, what's the best value for X_2, and I look at three things and choose the best. And so there's- now there's six of these,",
    "start": "3392940",
    "end": "3400135"
  },
  {
    "text": "and each one, for each item, I have to consider three different possibilities. Yeah. I don't, ah, you know,",
    "start": "3400135",
    "end": "3406855"
  },
  {
    "text": "it would probably be different depending on what these- what the actual factors are and what they're calculating, but, um, it's just an arbitrary example.",
    "start": "3406855",
    "end": "3414160"
  },
  {
    "text": "[NOISE] Um, okay. So now,",
    "start": "3414160",
    "end": "3420520"
  },
  {
    "text": "we're gonna do elimination. Um, elimination is very cool, I think.",
    "start": "3420520",
    "end": "3426085"
  },
  {
    "start": "3424000",
    "end": "4671000"
  },
  {
    "text": "So conditioning is saying, I'm gonna rip- I'm gonna rip my variable out of the graph.",
    "start": "3426085",
    "end": "3432430"
  },
  {
    "text": "And then I'm going to plug in whatever value I conditioned on into all the neighboring vectors.",
    "start": "3432430",
    "end": "3437815"
  },
  {
    "text": "Well, elimination says is, is- okay, I'm gonna rip my variable on the graph. But instead of- instead of plugging in a single value across every single factor,",
    "start": "3437815",
    "end": "3448390"
  },
  {
    "text": "I'm going to plug in a different value per factor in order to individually optimize each decision.",
    "start": "3448390",
    "end": "3458150"
  },
  {
    "text": "Um, so I think, I think it's best shown through example. So again, um, this is the thing,",
    "start": "3459030",
    "end": "3466045"
  },
  {
    "text": "we have two variables and they're connected by a factor and they have these weights. Um, if we condition, then, um,",
    "start": "3466045",
    "end": "3472900"
  },
  {
    "text": "we- I think this is- this example, right? So if we condition, we get what we got before.",
    "start": "3472900",
    "end": "3478869"
  },
  {
    "text": "And then if we eliminate, um, here, I'll do the elimination now.",
    "start": "3478870",
    "end": "3484119"
  },
  {
    "text": "So [NOISE] I'm going to redraw this table.",
    "start": "3484120",
    "end": "3489310"
  },
  {
    "text": "So we have X_1 and X_2. We have red, red, red,",
    "start": "3489310",
    "end": "3495940"
  },
  {
    "text": "blue, blue, red, and blue, blue.",
    "start": "3495940",
    "end": "3502540"
  },
  {
    "text": "Um, and they have weights of 1, 7, 3, and 2.",
    "start": "3502540",
    "end": "3508349"
  },
  {
    "text": "Okay. So what elimination is gonna do is- is we- we condition,",
    "start": "3508350",
    "end": "3520480"
  },
  {
    "text": "um, it like internally optimizes the value that we want to condition on based on the other arguments in that factor.",
    "start": "3520480",
    "end": "3528910"
  },
  {
    "text": "So we would say, okay, we're trying- we're trying to eliminate X_2 right now.",
    "start": "3528910",
    "end": "3535165"
  },
  {
    "text": "And we do that by looking at each value X_1 could take on. And then for each value,",
    "start": "3535165",
    "end": "3540955"
  },
  {
    "text": "we dynamically choose the best value for X_2. So first, we look at red.",
    "start": "3540955",
    "end": "3546190"
  },
  {
    "text": "So X_1 is red. What's the best value for X_2 in this case? It would be blue.",
    "start": "3546190",
    "end": "3552175"
  },
  {
    "text": "So we cross out this row. We say, if X_1 is blue,",
    "start": "3552175",
    "end": "3560770"
  },
  {
    "text": "then X_2 is gonna be red because that gives us the biggest. And then, um, just like before, now, for,",
    "start": "3560770",
    "end": "3568780"
  },
  {
    "text": "for any value of X_1, the value of X_2 is already set, it's fixed, it's decided.",
    "start": "3568780",
    "end": "3574930"
  },
  {
    "text": "And so that means that we can drop this variable out of the graph, because we've already like, internally optimized",
    "start": "3574930",
    "end": "3581320"
  },
  {
    "text": "into this function what its value would be. And so this gives us, again,",
    "start": "3581320",
    "end": "3586930"
  },
  {
    "text": "a new table where we have X_1, we have the values it could take on, red and blue. And then we have the weights associated with that,",
    "start": "3586930",
    "end": "3593890"
  },
  {
    "text": "which is now 7 and 3.",
    "start": "3593890",
    "end": "3596210"
  },
  {
    "text": "Um, so in math, what that looks like is,",
    "start": "3599220",
    "end": "3604810"
  },
  {
    "text": "is where we used to have this binary factor, we've now ripped X_2 out of the graph, and we,",
    "start": "3604810",
    "end": "3611184"
  },
  {
    "text": "we have this new factor that's a unary factor now, which internally optimizes over X_2.",
    "start": "3611185",
    "end": "3617245"
  },
  {
    "text": "It says, give me my X_1, give me an X_1, and then as soon as you get my X_1,",
    "start": "3617245",
    "end": "3623244"
  },
  {
    "text": "I'm going to spin through all my values of X_2 and give you the best one that would be the best match for it.",
    "start": "3623245",
    "end": "3630530"
  },
  {
    "text": "So um, what this would look like in pictorially,",
    "start": "3633440",
    "end": "3641425"
  },
  {
    "text": "I guess, is every time you remove of, of- a factor, um, you take all the factors that touch it and you rope them all together,",
    "start": "3641425",
    "end": "3648085"
  },
  {
    "text": "and you merge them, and- into one big vector.",
    "start": "3648085",
    "end": "3654145"
  },
  {
    "text": "And then internally, what that factor is doing is it's optimizing over, um, whatever variable you just removed.",
    "start": "3654145",
    "end": "3661460"
  },
  {
    "text": "So for example, um, if we have- um, so for example,",
    "start": "3664320",
    "end": "3671680"
  },
  {
    "text": "we have this kind of coloring problem, um, let's say, we want X_1 to be red and X_4 to be red.",
    "start": "3671680",
    "end": "3681415"
  },
  {
    "text": "What's the best value of X_3 that we could give? So over here, we say X_1 is red,",
    "start": "3681415",
    "end": "3688914"
  },
  {
    "text": "X_3 is red, that gives us a value of 4. And then 3-4, red, red gives us value 1.",
    "start": "3688915",
    "end": "3694270"
  },
  {
    "text": "So we have a 1 in here. The other value that X_3 can take on would be blue.",
    "start": "3694270",
    "end": "3699835"
  },
  {
    "text": "So now, we go from red to blue, which gives us a value of one,",
    "start": "3699835",
    "end": "3705040"
  },
  {
    "text": "and then blue to red, which gives us a, um, weight of two. And so we multiply those together and we 1 times 2 which is 2.",
    "start": "3705040",
    "end": "3712915"
  },
  {
    "text": "And then internally, what this factor is gonna do is it's gonna maximize over those and choose the value for the deleted variable that maximizes,",
    "start": "3712915",
    "end": "3720760"
  },
  {
    "text": "that internally optimizes it for this local problem, which in this case is red.",
    "start": "3720760",
    "end": "3726440"
  },
  {
    "text": "So just another example. Um, if we did red blue. So X_1 is red, X_4 is blue.",
    "start": "3728070",
    "end": "3735204"
  },
  {
    "text": "And there's two options for X_3, first, it would be red. So if we go from red to red, that's 4.",
    "start": "3735205",
    "end": "3742855"
  },
  {
    "text": "And then from red to blue is 2, so we got 4 times 2 here. And then, um, the next thing would be,",
    "start": "3742855",
    "end": "3751120"
  },
  {
    "text": "if X_3 is blue. So we go from, um, red to blue, which is 1, and then blue to blue,",
    "start": "3751120",
    "end": "3758440"
  },
  {
    "text": "which is 1, and that's 1 times 1. And then we would say, oh, well, in this case, the best value of X_3 would be red.",
    "start": "3758440",
    "end": "3768385"
  },
  {
    "text": "So it's kinda like internally optimizing. Um, in general, what this looks like is you rip the node out of the graph,",
    "start": "3768385",
    "end": "3778030"
  },
  {
    "text": "you take all the factors that used to touch it and you tie them all together into one big factor. [NOISE] Um, and again,",
    "start": "3778030",
    "end": "3788980"
  },
  {
    "text": "that's kind of the mathematical notation. Um, there is another way of interpreting this, um,",
    "start": "3788980",
    "end": "3794695"
  },
  {
    "text": "that might be helpful to some people, um, uh, basically, it's like you- it's like I pick",
    "start": "3794695",
    "end": "3802660"
  },
  {
    "text": "my value and then I'm going to look at all of the- all of the variables in its Markov blanket,",
    "start": "3802660",
    "end": "3808270"
  },
  {
    "text": "and I'm going to repeatedly condition for every- on every assignment that blanket can take on.",
    "start": "3808270",
    "end": "3814555"
  },
  {
    "text": "And then, for each of those conditionings, what's the best value of my selected variable?",
    "start": "3814555",
    "end": "3820060"
  },
  {
    "text": "Um, that's kind of what's going on behind the scenes. Yeah?",
    "start": "3820060",
    "end": "3827140"
  },
  {
    "text": "So if ripping out the variables and constructing new factors leads to like, faster execution times, why don't we just rip out all variables except for one,",
    "start": "3827140",
    "end": "3833335"
  },
  {
    "text": "and then it becomes a unary factor and a unary random variable. Yeah. So the question was, if,",
    "start": "3833335",
    "end": "3839395"
  },
  {
    "text": "if it's faster to rip out variables, why don't we just do it for the whole graph, and, um, we totally will.",
    "start": "3839395",
    "end": "3844780"
  },
  {
    "text": "Yeah, you'll see- it's in another couple slides, that's the algorithm. So like we have this strategy for ripping out variables,",
    "start": "3844780",
    "end": "3849985"
  },
  {
    "text": "and then the next step is to use it to solve the CSP, which is what we're about to do. Yeah. Um, okay.",
    "start": "3849985",
    "end": "3859345"
  },
  {
    "text": "So there's this question, which I think is cool. Um, so if we have some kind of a star-shaped graph,",
    "start": "3859345",
    "end": "3864670"
  },
  {
    "text": "so if we have a setup, [NOISE] let's say we have a setup, um, [NOISE] like this, with- which is a bunch of factors going into our hub.",
    "start": "3864670",
    "end": "3878800"
  },
  {
    "text": "Um, and we have- we have this variable,",
    "start": "3878800",
    "end": "3884440"
  },
  {
    "text": "we'll call it S. Um, do we wanna run elimination or a conditioning on S?",
    "start": "3884440",
    "end": "3891290"
  },
  {
    "text": "I hear some whispers on that, oh, yeah. Conditioning. Yeah, conditioning. Um, and the reason for that is that if we- if we condition,",
    "start": "3892410",
    "end": "3901585"
  },
  {
    "text": "then all these turn into unary factors. And if we eliminate, then it turns into one giant factor,",
    "start": "3901585",
    "end": "3908800"
  },
  {
    "text": "um, which, which is harder to solve. [NOISE] Um, okay. So like you were saying,",
    "start": "3908800",
    "end": "3919240"
  },
  {
    "text": "this is- this is the algorithm that you got out of it. So basically, what you do is you, you loop through all your variables and you eliminate them all in turn.",
    "start": "3919240",
    "end": "3925964"
  },
  {
    "text": "And then at the end of the day, you're going to have, um, one variable to rule them all,",
    "start": "3925965",
    "end": "3933565"
  },
  {
    "text": "and that variable will just hold the best answer. Yeah. [inaudible] to the, the degree [inaudible]",
    "start": "3933565",
    "end": "3939400"
  },
  {
    "text": "can we end up in to a case where if we don't have, uh, like a smart way to choosing [inaudible] conditioning on.",
    "start": "3939400",
    "end": "3946690"
  },
  {
    "text": "Can we end up in a case where we've conditioned over this one, and that one and it turn out that there is no more of possibility for-",
    "start": "3946690",
    "end": "3954530"
  },
  {
    "text": "Yeah. [inaudible] the graph or whatever? Yeah. So the question was, um, wait a second, doesn't ordering still matter,",
    "start": "3954530",
    "end": "3960400"
  },
  {
    "text": "like can't we still end up somewhere that's not good? Um, and that's totally true. So towards the end of this lecture is a discussion on exactly that topic,",
    "start": "3960400",
    "end": "3970225"
  },
  {
    "text": "um, variable ordering does matter, and it's actually hard, it's an NP-Complete problem is to decide the best area ordering.",
    "start": "3970225",
    "end": "3975385"
  },
  {
    "text": "Um, but so I think, um, I'm gonna do one more example of- I'm going to run elimination on a whole graph,",
    "start": "3975385",
    "end": "3983295"
  },
  {
    "text": "um, which I think would be helpful. [NOISE] So our graph,",
    "start": "3983295",
    "end": "3992980"
  },
  {
    "text": "so we have three variables. We have X, we have Y,",
    "start": "3996350",
    "end": "4002970"
  },
  {
    "text": "and we have Z, and they're all connected through a single factor.",
    "start": "4002970",
    "end": "4009520"
  },
  {
    "text": "Um, I'm gonna write out the whole table for this. So we have X, we have Y, and we have Z.",
    "start": "4009520",
    "end": "4016750"
  },
  {
    "text": "And let's say, um, they have two values, they could be A or B. So we have A, A, A, um,",
    "start": "4016750",
    "end": "4025145"
  },
  {
    "text": "A, A, B, I'm gonna run out of space. Um, A B, B.",
    "start": "4025145",
    "end": "4035190"
  },
  {
    "text": "Uh, A, B, A. Uh, B, A,",
    "start": "4035190",
    "end": "4041970"
  },
  {
    "text": "A. Um, B, A, B.",
    "start": "4041970",
    "end": "4051960"
  },
  {
    "text": "Uh, B, B, A, and B, B, B.",
    "start": "4051960",
    "end": "4057870"
  },
  {
    "text": "Is that everything? 1, 2, 3, 4, 5, 6, 7, 8, yeah. Okay. So, um, hopefully,",
    "start": "4057870",
    "end": "4064740"
  },
  {
    "text": "this is readable, um, but and they have weights, right? So we can just arbitrarily say they're,",
    "start": "4064740",
    "end": "4069869"
  },
  {
    "text": "1, 2, 3, 4, 5, 6, 7, 8.",
    "start": "4069870",
    "end": "4076020"
  },
  {
    "text": "[NOISE] Can people make this out?",
    "start": "4076020",
    "end": "4082000"
  },
  {
    "text": "Seems like. Maybe? So I will go with it.",
    "start": "4083630",
    "end": "4090210"
  },
  {
    "text": "Okay, so what do we do? Um, let's say we wanna choose Z first, we wanna eliminate Z.",
    "start": "4090210",
    "end": "4095880"
  },
  {
    "text": "So what we do in elimination is we say, for all the variables in Z's Markov blanket,",
    "start": "4095880",
    "end": "4101609"
  },
  {
    "text": "we're going to repeatedly condition on the values that they can take on and then we're going to dynamically choose the value of Z that would best match that.",
    "start": "4101610",
    "end": "4108375"
  },
  {
    "text": "So, um, X and Y could either be A and A. So this is A, A.",
    "start": "4108375",
    "end": "4115680"
  },
  {
    "text": "And in this case, the best value of Z would be B, right? So we cross this out.",
    "start": "4115680",
    "end": "4120720"
  },
  {
    "text": "Uh, next, X and Y could be A, B, in which case the best value of Z is A. So we cross this out.",
    "start": "4120720",
    "end": "4130319"
  },
  {
    "text": "Um, it could be B, A, um, which would be B, or it could be B, B.",
    "start": "4130320",
    "end": "4142529"
  },
  {
    "text": "Um, and the best value of Z in this case would again be B. So again, like we've seen a couple of times before,",
    "start": "4142530",
    "end": "4149355"
  },
  {
    "text": "now for any value of X and Y, the value of Z is already decided, it's set, it's precomputed.",
    "start": "4149355",
    "end": "4154830"
  },
  {
    "text": "So we can just drop this variable from our table, which is equivalent to dropping it from our graph.",
    "start": "4154830",
    "end": "4161609"
  },
  {
    "text": "Okay. So now, we're gonna work on Y. Again, we do the same thing.",
    "start": "4162110",
    "end": "4167309"
  },
  {
    "text": "We say for each- for each value in Y's Markov blanket, which is X, we repeatedly condition on all the possible values it can take on,",
    "start": "4167310",
    "end": "4175484"
  },
  {
    "text": "um, and then dynamically choose the best va- value based on that. So if X is A- um, so now,",
    "start": "4175485",
    "end": "4183359"
  },
  {
    "text": "we're comparing- so now,",
    "start": "4183360",
    "end": "4188609"
  },
  {
    "text": "we're comparing these two. So if X is A, what's the best value of Y? It's B. So we can cross this out.",
    "start": "4188610",
    "end": "4196905"
  },
  {
    "text": "Now, if X is B, what's the best value of Y?",
    "start": "4196905",
    "end": "4202739"
  },
  {
    "text": "Um, it's again B. So we can cross this out. And now again, for every value of X,",
    "start": "4202740",
    "end": "4209295"
  },
  {
    "text": "we've decided B and so we can drop this from the graph. And now what we have is,",
    "start": "4209295",
    "end": "4216675"
  },
  {
    "text": "now we have one variable in our graph with a unary factor. Um, so we have X,",
    "start": "4216675",
    "end": "4224040"
  },
  {
    "text": "and X can be A or it can be B. And if X is A, then it has a value of 4.",
    "start": "4224040",
    "end": "4229574"
  },
  {
    "text": "And if X is B, then it has a value of 8. And now what we can do is we can just say,",
    "start": "4229575",
    "end": "4234630"
  },
  {
    "text": "okay, we're gonna choose X to be 8. And then, um, in kind of implementation,",
    "start": "4234630",
    "end": "4242080"
  },
  {
    "text": "all you'd need to do is- is kinda like look back, you can store some kind of backpointers or store your own tables,",
    "start": "4242240",
    "end": "4250304"
  },
  {
    "text": "and you can recover your solution from the whole graph, um, from this end point.",
    "start": "4250304",
    "end": "4255659"
  },
  {
    "text": "[NOISE] So that is-",
    "start": "4255660",
    "end": "4266160"
  },
  {
    "text": "that is variable elimination. Um, yeah. For the second point,",
    "start": "4266160",
    "end": "4271650"
  },
  {
    "text": "why did we go in the opposite order from n to one instead of one to n?",
    "start": "4271650",
    "end": "4277750"
  },
  {
    "text": "Oh, that's- so that- that's basically- that was what I- that's was, um- that kind of is a mathematical way of saying what I just said about the backpointers.",
    "start": "4279200",
    "end": "4287775"
  },
  {
    "text": "So it's like, now we've gone forward and we've eliminated, and now we can go backward and say, okay, X is B.",
    "start": "4287775",
    "end": "4293205"
  },
  {
    "text": "Now that we've decided X to be B, like we look at our old table and be like, what was the best value of Y that gave us that decision?",
    "start": "4293205",
    "end": "4301815"
  },
  {
    "text": "So it's kinda like, once you go forward to eliminate, you get your solution and then you go back and like read off the values as you go.",
    "start": "4301815",
    "end": "4308880"
  },
  {
    "text": "Yeah.",
    "start": "4308880",
    "end": "4313239"
  },
  {
    "text": "Um. Okay. [NOISE] So in terms of runtime,",
    "start": "4314360",
    "end": "4321510"
  },
  {
    "text": "um, basically what, what you can say is,",
    "start": "4321510",
    "end": "4326849"
  },
  {
    "text": "um, so for each variable, um, it's going to have domain to the- so every variable is gonna",
    "start": "4326850",
    "end": "4334500"
  },
  {
    "text": "have domain to the arity the- the factor touching- so the factors touching,",
    "start": "4334500",
    "end": "4346874"
  },
  {
    "text": "um- like the factor you create from eliminating your variable, is gonna have this many rows in it,",
    "start": "4346874",
    "end": "4353040"
  },
  {
    "text": "um, and then there's n variables that you have to eliminate. Um, and with the- why- the reason why it's max",
    "start": "4353040",
    "end": "4362340"
  },
  {
    "text": "arity is because if you have- let's say you had some kind of graph, um,",
    "start": "4362340",
    "end": "4367485"
  },
  {
    "text": "that looks like this, um, thif- this factor would be D squared,",
    "start": "4367485",
    "end": "4374955"
  },
  {
    "text": "the domain squared, and then this factor would be D_3. And so like as you're going- as you're eliminating going through this graph,",
    "start": "4374955",
    "end": "4381690"
  },
  {
    "text": "like this is just gonna dominate D_2. Um, so it's, as you're going through and eliminating in the graph,",
    "start": "4381690",
    "end": "4387270"
  },
  {
    "text": "the arity of the biggest factor you've created is gonna bound your performance.",
    "start": "4387270",
    "end": "4393400"
  },
  {
    "text": "Um, and that's where variable ordering gets in. So what- was it- yeah.",
    "start": "4394190",
    "end": "4399630"
  },
  {
    "text": "So what is plus one? Yeah. So the plus 1, um, I'm not actually sure, I- I thought about, I looked,",
    "start": "4399630",
    "end": "4405465"
  },
  {
    "text": "I looked around and I- I wasn't able to explain it, so, um, yeah.",
    "start": "4405465",
    "end": "4410489"
  },
  {
    "text": "Um. Okay. So but as you're going,",
    "start": "4410490",
    "end": "4419115"
  },
  {
    "text": "order matters, um, because if you looked at this, there's two ways to do it, right? So if you went from the leaves and eliminated each leaf variable first,",
    "start": "4419115",
    "end": "4427455"
  },
  {
    "text": "um, then all the factors you create would have arity 1. It'd be super easy. But if you eliminated X_1 first,",
    "start": "4427455",
    "end": "4434460"
  },
  {
    "text": "then you get this huge giant factor that it gives you this big table of this arity 6, which would be very slow.",
    "start": "4434460",
    "end": "4440460"
  },
  {
    "text": "So the order really matters. Um, in general, it makes sense to eliminate variables with the fewest neighbors first.",
    "start": "4440460",
    "end": "4449054"
  },
  {
    "text": "It's a pretty like sensible heuristic that in practice works well. Um, and we define this term called treewidth,",
    "start": "4449055",
    "end": "4458474"
  },
  {
    "text": "um, which is saying, if you had a factor graph and you're going through doing elimination, um,",
    "start": "4458475",
    "end": "4465375"
  },
  {
    "text": "the maximum arity of a factor that you create along the way, using the best ordering is the treewidth of that graph.",
    "start": "4465375",
    "end": "4473890"
  },
  {
    "text": "Um, so in general, a treewidth is, is very, very hard to compute, um,",
    "start": "4473960",
    "end": "4479250"
  },
  {
    "text": "but for a few cases, you can kind of reason about it. So for example, if you had a chain- um,",
    "start": "4479250",
    "end": "4485820"
  },
  {
    "text": "let's say we had a chain. And if I were going through eliminating this, the biggest factor I would create is just a unary,",
    "start": "4485820",
    "end": "4492225"
  },
  {
    "text": "just that little guy, right? So it's a treewidth of 1. Um, if I had a tree,",
    "start": "4492225",
    "end": "4499090"
  },
  {
    "text": "so it's just like our example before. So if you go from the leaves again,",
    "start": "4499250",
    "end": "4505080"
  },
  {
    "text": "you can create these little factors- um, these little unary factors and so you can get away with 1.",
    "start": "4505080",
    "end": "4511199"
  },
  {
    "text": "Um, if you had a cycle,",
    "start": "4511200",
    "end": "4514120"
  },
  {
    "text": "I'll make my cycle a little bigger. But if you had a cycle, the maximum arity is gonna be 2, um,",
    "start": "4518180",
    "end": "4526965"
  },
  {
    "text": "because even if- even if you kinda work away from the sides,",
    "start": "4526965",
    "end": "4533985"
  },
  {
    "text": "you're eventually gonna end up as something that just connects the last things before you delete them.",
    "start": "4533985",
    "end": "4541275"
  },
  {
    "text": "Um, so it's like you have your cycle and you chew away at both ends and you're gonna end up with",
    "start": "4541275",
    "end": "4547710"
  },
  {
    "text": "something- with just those two nodes relating- remaining. Um, and then if you had a, uh, n by n grid,",
    "start": "4547710",
    "end": "4553950"
  },
  {
    "text": "um- if you had an n by n grid,",
    "start": "4553950",
    "end": "4559980"
  },
  {
    "text": "um, so let's say this just goes on, it's the smaller of the two.",
    "start": "4559980",
    "end": "4565200"
  },
  {
    "text": "And the reason for that is because if you, let's say, you go through and you're eliminating these things, do like that and like that,",
    "start": "4565200",
    "end": "4570870"
  },
  {
    "text": "where you- you gonna end up with something, um, some situation like this. And once you delete this,",
    "start": "4570870",
    "end": "4576989"
  },
  {
    "text": "you're gonna get a factor that ropes them all together.",
    "start": "4576990",
    "end": "4580810"
  },
  {
    "text": "Um, yeah, so that's treewidth, super important, hard to compute. Yeah.",
    "start": "4582710",
    "end": "4588000"
  },
  {
    "text": "You end up with two factors, uh, for [NOISE] in the last two in open cycle.",
    "start": "4588000",
    "end": "4593505"
  },
  {
    "text": "Yes. So when you have a feedback is that a cycle? Yeah. And you're going through elimination?",
    "start": "4593505",
    "end": "4598695"
  },
  {
    "text": "Yeah. You end up [OVERLAPPING] Oh, yeah. You're right. So it's not the first two, it's the- it's not the last two, it's the first two.",
    "start": "4598695",
    "end": "4605310"
  },
  {
    "text": "So when you are- let's say this is my cycle,",
    "start": "4605310",
    "end": "4610319"
  },
  {
    "text": "the first factor I create after I delete that is gonna be a binary factor. Yeah. So thank you for that.",
    "start": "4610319",
    "end": "4617680"
  },
  {
    "text": "Um, yeah. So just to summarize,",
    "start": "4619160",
    "end": "4624795"
  },
  {
    "text": "we learn different ways of solving CSP today. Beam search, which is kind of like a souped up version of backtracking,",
    "start": "4624795",
    "end": "4632160"
  },
  {
    "text": "um, which doesn't always give you the answer, but it's faster. Local search, you get entire things and then you improve them a little bit at a time.",
    "start": "4632160",
    "end": "4639705"
  },
  {
    "text": "Conditioning, um, break up the graph into smaller pieces that are easier to solve.",
    "start": "4639705",
    "end": "4645875"
  },
  {
    "text": "And then elimination, which is where it's kind of like in, you know, conditioning, except instead of choosing one value for all your factors, um,",
    "start": "4645875",
    "end": "4653119"
  },
  {
    "text": "you kinda like dynamically choose the value based on the Markov blanket.",
    "start": "4653120",
    "end": "4659125"
  },
  {
    "text": "And that's CSPs. So we will see you on Wednesday.",
    "start": "4659125",
    "end": "4664720"
  }
]