[
  {
    "text": "Hi everyone. Hope you had a good weekend. Uh, we're gonna start off today's class talking about the",
    "start": "5240",
    "end": "11100"
  },
  {
    "text": "bake-off that happened last week. So if you don't remember what you did,",
    "start": "11100",
    "end": "17800"
  },
  {
    "text": "you evaluate distributed- distributed representations using word similarity datasets,",
    "start": "17800",
    "end": "23340"
  },
  {
    "text": "and so all the similarity datasets had these word pairs with associated, um, human annotated similarity scores,",
    "start": "23340",
    "end": "29770"
  },
  {
    "text": "and your evaluation measured the distance between the word pairs and your chosen VSM.",
    "start": "29770",
    "end": "35110"
  },
  {
    "text": "So here's the histogram of the scores. Um, as you can see, there's kind of two bumps: one on the lower end,",
    "start": "35110",
    "end": "41070"
  },
  {
    "text": "one on the higher end, most people are on the higher end. Um, so what Chris did was, um,",
    "start": "41070",
    "end": "48140"
  },
  {
    "text": "calculate the observed over expected scores after separating all the bake-off entries into",
    "start": "48140",
    "end": "53710"
  },
  {
    "text": "the top scoring teams and to the bottom scoring teams. So on the left here, we have,",
    "start": "53710",
    "end": "59080"
  },
  {
    "text": "um, that- the words that are more likely to appear for top-scoring teams. And then over here, we have the ones that are more likely to",
    "start": "59080",
    "end": "65500"
  },
  {
    "text": "appear for the ones in bottom scoring teams. That helps you get an idea of like what distinguishes the really good models from the meh models.",
    "start": "65500",
    "end": "74185"
  },
  {
    "text": "So, uh, so it seems like retrofitting on WordNet and using",
    "start": "74185",
    "end": "79299"
  },
  {
    "text": "LSA are common ways to build better models from this rough analysis.",
    "start": "79300",
    "end": "84695"
  },
  {
    "text": "Okay. So our first place team is Group 80. Is Group 80 here? No, okay.",
    "start": "84695",
    "end": "93390"
  },
  {
    "text": "But yeah, Group 80 basically, uh, stacked p- pp- PMI,",
    "start": "93390",
    "end": "98955"
  },
  {
    "text": "t-tests, retrofitting on WordNet, and in autoEncoder, and they got the highest score.",
    "start": "98955",
    "end": "104195"
  },
  {
    "text": "So good job for Group 80. [LAUGHTER] [APPLAUSE] Yay.",
    "start": "104195",
    "end": "112530"
  },
  {
    "text": "Um, now, second place is- is this person here?",
    "start": "112530",
    "end": "118545"
  },
  {
    "text": "No? Okay. So what this person did was it looks like a lot, but it's basically PMI plus retrofitting with a sub-word model, and they did pretty well.",
    "start": "118545",
    "end": "129545"
  },
  {
    "text": "Third place, are you here? No. Um, so they also piled on a bunch of things, PMI,",
    "start": "129545",
    "end": "137540"
  },
  {
    "text": "t-test, LSA, retrofitting on WordNet, and they did pretty well as well.",
    "start": "137540",
    "end": "142955"
  },
  {
    "text": "Okay. Now, [LAUGHTER] a model that- that did not work as well. We're not gonna say who this model belongs to.",
    "start": "142955",
    "end": "149880"
  },
  {
    "text": "But it is kind of interesting how they did like t-tests, LSA, Jaccard.",
    "start": "149880",
    "end": "154950"
  },
  {
    "text": "So like, so they did t-tests and LSA together, but I think the thing that made them kind of suffer a bit more is they used Jaccard as their distfunc,",
    "start": "154950",
    "end": "161890"
  },
  {
    "text": "while the winning teams all had the default distfunc, which I think is a cosine, so that's like an interesting detail there.",
    "start": "161890",
    "end": "167855"
  },
  {
    "text": "So it could be cool just to see like if we swapped out Jaccard with cosine, maybe they wouldn't have scored so low.",
    "start": "167855",
    "end": "175200"
  },
  {
    "text": "Um, but it's still an interesting result, so like if you're not doing too well on your models for these bake-off,",
    "start": "175200",
    "end": "180620"
  },
  {
    "text": "it's still interesting to see like how something that could be very well-motivated still fail.",
    "start": "180620",
    "end": "186055"
  },
  {
    "text": "Um, and yeah, I think that's all I have.",
    "start": "186055",
    "end": "189879"
  },
  {
    "text": "Any questions? Yeah.",
    "start": "191510",
    "end": "196665"
  },
  {
    "text": "There was like a- another category for like took the most effort for real-time, right?",
    "start": "196665",
    "end": "201885"
  },
  {
    "text": "Who is- who is the winner for that? Oh, I wasn't able to find who was that because it's so hard to like,",
    "start": "201885",
    "end": "208175"
  },
  {
    "text": "do you like, do you quantify it by lines of code, you know? Because I saw a lot of teams who they ran a lot of tests, like they had like 10 cells and like each cell has like a different experiment,",
    "start": "208175",
    "end": "217189"
  },
  {
    "text": "and they did like a lot of hyper parameter tuning, and stuff like that. So but it- it could be there.",
    "start": "217190",
    "end": "223155"
  },
  {
    "text": "Yeah. There are some low scoring teams that put in effort. [inaudible] their teams. Yeah.",
    "start": "223155",
    "end": "229455"
  },
  {
    "text": "For some special consideration, if you could quantify it yourself in terms of compute time or [OVERLAPPING].",
    "start": "229455",
    "end": "235400"
  },
  {
    "text": "Great. I'm gonna hand this off to the real professors.",
    "start": "235400",
    "end": "249570"
  },
  {
    "text": "Thank you miss.",
    "start": "249570",
    "end": "262740"
  },
  {
    "text": "[APPLAUSE] Okay. Uh, I have a couple of announcements before we get to our main event. So here they are.",
    "start": "262740",
    "end": "269115"
  },
  {
    "text": "Bake-off 2 has begun, so there was a- there was a post on Piazza within the last hour or so giving you details on how to do that.",
    "start": "269115",
    "end": "277090"
  },
  {
    "text": "So make sure you take a look at that post. Uh, Bake-off 2 closes on Wednesday,",
    "start": "277090",
    "end": "282300"
  },
  {
    "text": "so you definitely wanna, uh, look at that today or tomorrow. Um, on Friday, we are gonna have",
    "start": "282300",
    "end": "289750"
  },
  {
    "text": "a special session to give you an intro to NumPy and PyTorch. Uh, so the details are there and this session is gonna be recorded.",
    "start": "289750",
    "end": "299300"
  },
  {
    "text": "On Wednesday, we're gonna have some guests. So Guillaume Genthial, don't know how to pronounce that,",
    "start": "299300",
    "end": "306449"
  },
  {
    "text": "and Marta, uh, uh, who's from Roam Analytics and Marta Recasens who is from Google Research,",
    "start": "306450",
    "end": "311745"
  },
  {
    "text": "are gonna be visiting for a panel discussion on NLU in industry. So we wanna encourage you to attend in person if you can to, um, show them a good,",
    "start": "311745",
    "end": "321825"
  },
  {
    "text": "good, uh, show of support from, from Stanford and to have lots of good interaction.",
    "start": "321825",
    "end": "327770"
  },
  {
    "text": "I think the value of that session will be greatly enhanced if there's, um, you know, lots of in-person interaction.",
    "start": "327770",
    "end": "334190"
  },
  {
    "text": "And if you can come to the session with specific questions that you'd like to get some insight into,",
    "start": "334190",
    "end": "340130"
  },
  {
    "text": "what is it really like to use NLU techniques, um, in the industry and, and apply the,",
    "start": "340130",
    "end": "346460"
  },
  {
    "text": "the stuff that we've been talking about in real-world applications. Um, if you have specific questions or topics in mind,",
    "start": "346460",
    "end": "352775"
  },
  {
    "text": "there's a Piazza post, um, en- encouraging you to think about this and you can add your,",
    "start": "352775",
    "end": "358759"
  },
  {
    "text": "uh, proposed question as a comment on that Piazza post. And it's pinned so it's visible at the top of the list.",
    "start": "358760",
    "end": "366695"
  },
  {
    "text": "Um, that NLU panel discussion probably won't take the,",
    "start": "366695",
    "end": "372435"
  },
  {
    "text": "the full hour and 15 minutes next time, so we'll use the extra time for coding in class, uh,",
    "start": "372435",
    "end": "378689"
  },
  {
    "text": "focusing on Homework 3 and Bake-off 3, which is about relation extraction,",
    "start": "378689",
    "end": "384150"
  },
  {
    "text": "that's what we're gonna look at today. But having some time in class for that on Wednesday will be particularly valuable,",
    "start": "384150",
    "end": "390169"
  },
  {
    "text": "because you'll have a little bit less time, uh, to- to, uh, to prepare before that homework is due next Monday.",
    "start": "390170",
    "end": "397620"
  },
  {
    "text": "So any questions before I go on? Yes.",
    "start": "397900",
    "end": "403625"
  },
  {
    "text": "Bake-off 2, uh, do you have to be trained one more time? Um, if you have a model that you think ha- has like good links or something,",
    "start": "403625",
    "end": "413145"
  },
  {
    "text": "could you just like, uh, not do that, and get points.",
    "start": "413145",
    "end": "420240"
  },
  {
    "text": "Not sure I got that. Yeah. I think you won't be able to use that as the experiment.",
    "start": "420240",
    "end": "425490"
  },
  {
    "text": "But I gave some guidelines about this in the close. Just make sure that you're using exactly the right training data that you did that before.",
    "start": "425490",
    "end": "432725"
  },
  {
    "text": "You test on the test data and then you report Macro at form. And if you do those three things, it's totally fine.",
    "start": "432725",
    "end": "438800"
  },
  {
    "text": "[NOISE] Okay.",
    "start": "438800",
    "end": "444759"
  },
  {
    "text": "Today, I wanna turn to a new topic, which is relation extraction. Um, and there's kind of two big ideas that I wanna introduce you to.",
    "start": "444760",
    "end": "454340"
  },
  {
    "text": "One is the task of relation extraction itself, and the other is this idea of distant supervision.",
    "start": "454340",
    "end": "461600"
  },
  {
    "text": "Um, relation extraction is an interesting topic for a bunch of reasons that I'll say more about in a moment.",
    "start": "461600",
    "end": "469055"
  },
  {
    "text": "But one of the reasons that it's an interesting turn for us in kind of the- the narrative that we're developing is that it's the first time",
    "start": "469055",
    "end": "476540"
  },
  {
    "text": "that we're looking at an NLU task where the output of the task is a discreet object rather than a numeric value.",
    "start": "476540",
    "end": "487220"
  },
  {
    "text": "So we've just been looking at, uh, sentiment analysis. And sentiment analysis, the output is a scalar value,",
    "start": "487220",
    "end": "493069"
  },
  {
    "text": "it might be like one through five or in the ternary task that we're doing for the homework and the bake-off,",
    "start": "493070",
    "end": "498425"
  },
  {
    "text": "it's just, uh, minus one, zero, or plus one. Some versions of sentiment analysis,",
    "start": "498425",
    "end": "503659"
  },
  {
    "text": "it's just zero or one, it's basically binary classification. But in any case, it's a scalar value.",
    "start": "503660",
    "end": "509389"
  },
  {
    "text": "Uh, before that we looked at vector space, models, and meaning where the output is a vector of real values.",
    "start": "509390",
    "end": "515585"
  },
  {
    "text": "With relation extraction, for the first time, we're gonna be looking at a task where the output is an object.",
    "start": "515585",
    "end": "520775"
  },
  {
    "text": "In this case, it's a relational triple. So it's like, uh, a row in a database essentially.",
    "start": "520775",
    "end": "526925"
  },
  {
    "text": "Um, so that's, uh, uh, something new. And a couple of weeks from now, we're gonna look at the task of semantic parsing",
    "start": "526925",
    "end": "533705"
  },
  {
    "text": "where we go even further in that direction, and we're looking at outputs which are complete logical forms,",
    "start": "533705",
    "end": "538950"
  },
  {
    "text": "so that have real complex structure to them. So relation extraction is one big idea.",
    "start": "538950",
    "end": "545990"
  },
  {
    "text": "The other big idea is distant supervision, and this is interesting because it's a strategy",
    "start": "545990",
    "end": "551239"
  },
  {
    "text": "for breaking the data bottleneck that has been, uh, one of the biggest, um,",
    "start": "551239",
    "end": "558265"
  },
  {
    "text": "sort of obstacles to progress in applying machine learning methods to- to NLP and NLU.",
    "start": "558265",
    "end": "565490"
  },
  {
    "text": "Um, the idea of distant supervision enabled people working on",
    "start": "565490",
    "end": "572810"
  },
  {
    "text": "relation extraction suddenly to- to be able to use 100 times as much data as had ever been used before for relation extraction.",
    "start": "572810",
    "end": "581465"
  },
  {
    "text": "Um, and that enabled, um, vastly greater statistical power in the- in the models that were trained.",
    "start": "581465",
    "end": "589005"
  },
  {
    "text": "Um, and I'll explain how- how that works in a moment. But that was a big innovation that's applicable not only to relation extraction,",
    "start": "589005",
    "end": "596390"
  },
  {
    "text": "but to other kinds of problems as well. Um, what's interesting is that the innovation here is not so much a new kind of model.",
    "start": "596390",
    "end": "604760"
  },
  {
    "text": "It's not a new neural architecture or a new loss function or a new optimization algorithm.",
    "start": "604760",
    "end": "611779"
  },
  {
    "text": "Instead, the innovation is in the kind of supervision that's used to provide,",
    "start": "611780",
    "end": "618459"
  },
  {
    "text": "uh, uh, uh, a signal on which to hill climb. Um, it's also interesting because",
    "start": "618459",
    "end": "625940"
  },
  {
    "text": "the ideas of distant supervision were developed right here at Stanford. So the idea first came about in this paper by Rion Snow and colleagues.",
    "start": "625940",
    "end": "634360"
  },
  {
    "text": "Uh, in 2005, Rion Snow was a PhD student who was advised by Dan Jurafsky, whom some of you may know.",
    "start": "634360",
    "end": "640175"
  },
  {
    "text": "Um, so that idea, um, incubated here in 2005. It was then extended by,",
    "start": "640175",
    "end": "646805"
  },
  {
    "text": "um, Mintz et al. I think I have a reference to Mintz et al right here.",
    "start": "646805",
    "end": "652550"
  },
  {
    "text": "In this paper, distant supervision for relation extraction without labeled data. So that was also in Dan Jurafsky's research group and part of the,",
    "start": "652550",
    "end": "660714"
  },
  {
    "text": "part of the Stanford NLP group. Um, and then this same strand of work led",
    "start": "660715",
    "end": "667865"
  },
  {
    "text": "eventually to a generalization of the idea of distant supervision,",
    "start": "667865",
    "end": "673084"
  },
  {
    "text": "which was the idea of data programming developed in Chris Re's group. Some of you might know Chris Re who's a-",
    "start": "673085",
    "end": "678920"
  },
  {
    "text": "also a professor in the Computer Science Department here. And, um, a package called Snorkel,",
    "start": "678920",
    "end": "685540"
  },
  {
    "text": "which implements some of the ideas of data programming, um, which you can see as kind of a generalization of,",
    "start": "685540",
    "end": "691279"
  },
  {
    "text": "of this basic idea. These are all strategies to break through the limit imposed by needing supervised, manually annotated,",
    "start": "691280",
    "end": "700760"
  },
  {
    "text": "uh, sup- uh, fully supervised data for training.",
    "start": "700760",
    "end": "705660"
  },
  {
    "text": "So let me say a little bit about the task of relation extraction is it- is this big enough for people to read? This okay?",
    "start": "706590",
    "end": "715765"
  },
  {
    "text": "Legible? Okay. So the task of relation extraction is to extract relational triples from natural language text.",
    "start": "715765",
    "end": "724075"
  },
  {
    "text": "And by relational triple, I mean things like these examples here, so Founders, SpaceX, Elon_Musk, has_spouse, Elon_Musk, Talulah_Riley, worked_at, Elon_Musk, Tesla_Motors.",
    "start": "724075",
    "end": "733885"
  },
  {
    "text": "So each of these expresses a fact about the real world. Each of them has three components.",
    "start": "733885",
    "end": "739134"
  },
  {
    "text": "There is a relation and then two entities. Um, the entities have these underscores in here.",
    "start": "739135",
    "end": "746110"
  },
  {
    "text": "So that suggests that they're some kind of unique identifier of these entities and I'll say more about that in a moment.",
    "start": "746110",
    "end": "752950"
  },
  {
    "text": "And the relation is one of a small number of pre-defined relations that we're interested in.",
    "start": "752950",
    "end": "760750"
  },
  {
    "text": "So why is this interesting? Why do we care about this? Well, if we can accumulate a large collection of these relational triples,",
    "start": "760750",
    "end": "769105"
  },
  {
    "text": "that amounts to a database. Uh, a database of facts about the real world.",
    "start": "769105",
    "end": "774295"
  },
  {
    "text": "Um, building a knowledge base manually is slow and expensive and",
    "start": "774295",
    "end": "780870"
  },
  {
    "text": "time-consuming but the web or other large do- collections of documents are filled with these kinds of facts already.",
    "start": "780870",
    "end": "788070"
  },
  {
    "text": "So if we can figure out a way to extract these facts automatically from natural language text,",
    "start": "788070",
    "end": "793110"
  },
  {
    "text": "we can greatly accelerate the creation of knowledge bases. So why would you care about that?",
    "start": "793110",
    "end": "800920"
  },
  {
    "text": "Why do we want to have these large knowledge- knowledge bases? It turns out that, um, they're incredibly useful.",
    "start": "800920",
    "end": "809620"
  },
  {
    "text": "First, because a huge proportion of human knowledge can be expressed in this form.",
    "start": "809620",
    "end": "816130"
  },
  {
    "text": "Um, and second, because there are abundant commercial applications for knowledge bases like this.",
    "start": "816130",
    "end": "822160"
  },
  {
    "text": "Um, for example, my current boss, John Giannandrea, uh,",
    "start": "822160",
    "end": "827889"
  },
  {
    "text": "earlier in his career, founded a company called Metaweb and was the co-creator of Freebase.",
    "start": "827890",
    "end": "834279"
  },
  {
    "text": "Freebase is a very large- it doesn't actually exist anymore which is a terrible shame.",
    "start": "834280",
    "end": "839290"
  },
  {
    "text": "But Freebase was a large community-authored knowledge base which was essentially a vast collection of relational triples like this.",
    "start": "839290",
    "end": "849585"
  },
  {
    "text": "Um, it was acquired by Google in 2010. And it became the foundation of",
    "start": "849585",
    "end": "855450"
  },
  {
    "text": "Google's knowledge graph which was used to power a variety of different knowledge applications",
    "start": "855450",
    "end": "860460"
  },
  {
    "text": "including question answering and also the knowledge panels that you sometimes see on the right- on the right-hand side of Google search results.",
    "start": "860460",
    "end": "869280"
  },
  {
    "text": "Um, it was a really powerful idea. Uh, a couple of years later in I think 2014,",
    "start": "869280",
    "end": "876009"
  },
  {
    "text": "Microsoft introduced its own version of a knowledge graph, theirs was called Satori but was fundamentally the same thing.",
    "start": "876010",
    "end": "883090"
  },
  {
    "text": "Um, it also matters for Apple. Uh, in 2017, Apple acquired a startup called",
    "start": "883090",
    "end": "890560"
  },
  {
    "text": "Lattice which was co-founded by Chris Re from the Stanford Computer Science Department and Lattice's,",
    "start": "890560",
    "end": "897339"
  },
  {
    "text": "uh, business was also to do relation extraction from, uh, documents from the web, um,",
    "start": "897340",
    "end": "904270"
  },
  {
    "text": "in order to build and extend, uh, knowledge bases that in this case are helped to- are used to help theory better answer,",
    "start": "904270",
    "end": "912940"
  },
  {
    "text": "uh, questions about the world. Um, so there's, uh,",
    "start": "912940",
    "end": "918279"
  },
  {
    "text": "abundant commercial interest in building knowledge bases like these. There are also other applications that might be a little bit less obvious.",
    "start": "918280",
    "end": "928870"
  },
  {
    "text": "Um, one is extending WordNet. Um, WordNet is basically a knowledge base of lexical semantic relations.",
    "start": "928870",
    "end": "940525"
  },
  {
    "text": "So in WordNet, the role of entities is played by words or actually synsets.",
    "start": "940525",
    "end": "947110"
  },
  {
    "text": "And the relations between them are things like the hypernym relation or the synonym relation or the antonym relation.",
    "start": "947110",
    "end": "954820"
  },
  {
    "text": "So, um, you can formulate the task of adding new stuff to WordNet as a task that has this form.",
    "start": "954820",
    "end": "965260"
  },
  {
    "text": "There's, um, there's lots of stuff that should be in WordNet but isn't.",
    "start": "965260",
    "end": "970405"
  },
  {
    "text": "So, you know, WordNet doesn't know, um, about, um, things like,",
    "start": "970405",
    "end": "977139"
  },
  {
    "text": "um, like there's, um, categories and subcategories and sub-subcategories of video games, right?",
    "start": "977140",
    "end": "984790"
  },
  {
    "text": "And, uh, WordNet doesn't know about all those different categories of video games. And the fact that this one is a subcategory of that one.",
    "start": "984790",
    "end": "993580"
  },
  {
    "text": "Um, but it would be great to be able to automatically extend WordNet to have that kind of knowledge.",
    "start": "993580",
    "end": "998995"
  },
  {
    "text": "And so I mentioned that this technique of distant supervision was introduced by Rion Snow in 2005.",
    "start": "998995",
    "end": "1004755"
  },
  {
    "text": "That was actually the application that he applied it to, was automatically inferring relationships between",
    "start": "1004755",
    "end": "1011070"
  },
  {
    "text": "word senses by extracting them from natural language text.",
    "start": "1011070",
    "end": "1016290"
  },
  {
    "text": "Um, there are other applications for example in biology. Every year there are thousands and thousands of biology research papers published,",
    "start": "1016290",
    "end": "1024975"
  },
  {
    "text": "some of them have to do with, uh, gene expression and gene regulation networks.",
    "start": "1024975",
    "end": "1030329"
  },
  {
    "text": "If we can make these, if we can apply these techniques to biology research papers maybe we can run, uh,",
    "start": "1030330",
    "end": "1038610"
  },
  {
    "text": "relation extraction, uh, focused on genes and gene activations over these thousands of research papers.",
    "start": "1038610",
    "end": "1045929"
  },
  {
    "text": "And extract from it lots of relationships between different genes and whether they have activating or suppressing effects on other genes.",
    "start": "1045930",
    "end": "1053820"
  },
  {
    "text": "And by doing that, build a big graph of relationships between all these different genes and then somehow that's- I'm not a biologist,",
    "start": "1053820",
    "end": "1062220"
  },
  {
    "text": "so I don't know what you do with that from that point. But- but that can be really useful, uh, to biologists who are trying to understand",
    "start": "1062220",
    "end": "1067740"
  },
  {
    "text": "these complex networks of relationships between different genes. So that gives you a sense of some of",
    "start": "1067740",
    "end": "1075570"
  },
  {
    "text": "the applications and why you might be interested in this task. Okay. So how do we actually do- let's return,",
    "start": "1075570",
    "end": "1085110"
  },
  {
    "text": "let's come back to these examples here. We want to learn some facts about Elon Musk and we want to extract it from natural language.",
    "start": "1085110",
    "end": "1093555"
  },
  {
    "text": "How can we actually do that? One of the techniques that might- might come to mind first is",
    "start": "1093555",
    "end": "1100590"
  },
  {
    "text": "to just write down some patterns that express the relations that we're interested in.",
    "start": "1100590",
    "end": "1106950"
  },
  {
    "text": "So for example, um, a pattern like X is the founder of Y that seems to express the founder relation.",
    "start": "1106950",
    "end": "1114690"
  },
  {
    "text": "So maybe we can just search a large corpus for occurrences of that pattern and extract the XY pairs and add those to our knowledge base.",
    "start": "1114690",
    "end": "1124649"
  },
  {
    "text": "So we might find, um, in a large corpus, a sentence that says Elon Musk is the founder of SpaceX and we're like, \"Okay, great.\"",
    "start": "1124650",
    "end": "1132090"
  },
  {
    "text": "I can add a new triple to my knowledge base, that seems very straightforward. Um, and in fact,",
    "start": "1132090",
    "end": "1138990"
  },
  {
    "text": "this approach was the dominant approach that's sort of the dominant paradigm for relation extraction for many years like during the 60s and 70- 60s and 70s.",
    "start": "1138990",
    "end": "1148590"
  },
  {
    "text": "So in the- in the very early days of natural language understanding. People tried to be slightly more sophisticated by instead of defining, uh,",
    "start": "1148590",
    "end": "1157650"
  },
  {
    "text": "an exact string and looking for exact matches on that string, defining patterns that could be like regular expressions to",
    "start": "1157650",
    "end": "1164520"
  },
  {
    "text": "accommodate some minor variation of things like verb tense and so on. Um, but nevertheless it was the basic approach.",
    "start": "1164520",
    "end": "1172650"
  },
  {
    "text": "But this doesn't get us very far. And the fundamental reason it doesn't get us very far is that language is incredibly varied.",
    "start": "1172650",
    "end": "1179625"
  },
  {
    "text": "There's just a million different ways to say the same thing. So look at examples like these, um,",
    "start": "1179625",
    "end": "1185070"
  },
  {
    "text": "you may also be thinking of Elon Musk, parentheses, founder of SpaceX who started PayPal.",
    "start": "1185070",
    "end": "1190200"
  },
  {
    "text": "Interesting fact, Elon Musk, co-founder of PayPal went on to establish SpaceX. Or if SpaceX exploration parentheses SpaceX",
    "start": "1190200",
    "end": "1197865"
  },
  {
    "text": "founded by PayPal pioneer Elon Musk succeeds blah blah blah. So each of these sentences expresses the fact that Elon Musk is the founder of SpaceX.",
    "start": "1197865",
    "end": "1208890"
  },
  {
    "text": "But none of these match the pattern that we proposed X is the founder of Y nor any other pattern that would be obvious at the outset, right?",
    "start": "1208890",
    "end": "1218940"
  },
  {
    "text": "You wouldn't have anticipated any of these exact patterns. And even if you ima- imagine that you like, um,",
    "start": "1218940",
    "end": "1225975"
  },
  {
    "text": "create a little bit of flexibility by making it a regular expression instead of an exact match, there's no way you would've anticipated any of these patterns.",
    "start": "1225975",
    "end": "1234990"
  },
  {
    "text": "Now, once you see these examples, you could say, okay, well I'm going to create new patterns.",
    "start": "1234990",
    "end": "1240690"
  },
  {
    "text": "I'm going to add to my pattern list by having a pattern that captures, you know, X parentheses founder of",
    "start": "1240690",
    "end": "1247200"
  },
  {
    "text": "Y and maybe that will match some more examples somewhere else in my corpus. And then I can add another pattern which is X,",
    "start": "1247200",
    "end": "1254640"
  },
  {
    "text": "co-founder of PayPal went on to establish Y or maybe I should actually replace the PayPal with a star so that I get some more generalization.",
    "start": "1254640",
    "end": "1263325"
  },
  {
    "text": "But like these things aren't really going to help at all, these patterns are still really specific.",
    "start": "1263325",
    "end": "1268950"
  },
  {
    "text": "They're not going to match that many if any, other examples in your corpus.",
    "start": "1268950",
    "end": "1274380"
  },
  {
    "text": "They're not going to generalize well to new examples. And so the result of adopting this approach is even if you manually engineer,",
    "start": "1274380",
    "end": "1283320"
  },
  {
    "text": "even if you write down lots of patterns and you try to make them general by using regular expressions,",
    "start": "1283320",
    "end": "1292034"
  },
  {
    "text": "you're going to wind up with a system which might have high precision but it's inescapably gonna have very low recall.",
    "start": "1292035",
    "end": "1299565"
  },
  {
    "text": "There's gonna be lots and lots of sentences which express a relation which",
    "start": "1299565",
    "end": "1305990"
  },
  {
    "text": "don't match any of your patterns and you're just gonna miss those. You're not gonna have the opportunity to do those extractions.",
    "start": "1305990",
    "end": "1312930"
  },
  {
    "text": "So that strongly suggests embracing machine learning, and so this is what happened in the- in the 90s and the 2000s.",
    "start": "1313550",
    "end": "1321915"
  },
  {
    "text": "There was the so-called statistical revolution that came to NLP, and people said, \"Hey,",
    "start": "1321915",
    "end": "1326970"
  },
  {
    "text": "let's use data in machine learning, ah, to learn the things that we wanna learn. \"",
    "start": "1326970",
    "end": "1332880"
  },
  {
    "text": "Um, and in addition, um, let's use a feature representation that will allow",
    "start": "1332880",
    "end": "1339405"
  },
  {
    "text": "much better generalization from the examples that we have. Um, so to do this,",
    "start": "1339405",
    "end": "1347445"
  },
  {
    "text": "we're going to have, um, we're going to need lots and lots of supervised data to train our model.",
    "start": "1347445",
    "end": "1354450"
  },
  {
    "text": "So what we would do is, go through a corpus and every time there's a sentence that has two entities in it,",
    "start": "1354450",
    "end": "1359655"
  },
  {
    "text": "we would manually annotate it with the relation, if any, that holds between the two entities",
    "start": "1359655",
    "end": "1366855"
  },
  {
    "text": "or if there is no particular relation then we just say, \"No relation\". So, we go through and we'd find this sentence and we'd say,",
    "start": "1366855",
    "end": "1372585"
  },
  {
    "text": "\"Elon Musk\" and \"SpaceX\" and we'd annotate that with something that says, \"Founder,\" and we'd annotate",
    "start": "1372585",
    "end": "1377640"
  },
  {
    "text": "the second sentence and the third sentence with something that says. \"Founder\". Um, there might also be sentences in our corpus like this one,",
    "start": "1377640",
    "end": "1385169"
  },
  {
    "text": "billionaire entrepreneur- entrepreneur Elon Musk announced to blah blah blah. I'll let you read it. It's got both Elon Musk and SpaceX,",
    "start": "1385170",
    "end": "1394315"
  },
  {
    "text": "but it doesn't actually express the founder relation. It's not saying that Elon is the founder,",
    "start": "1394315",
    "end": "1400005"
  },
  {
    "text": "and so we'd manually annotate this example with a label that says \"No relation\".",
    "start": "1400005",
    "end": "1405645"
  },
  {
    "text": "So now, we've got a big corpus where all pairs of entity mentions are annotated with a relation that holds between them, or no relation.",
    "start": "1405645",
    "end": "1417090"
  },
  {
    "text": "And we can train a class, if we can define a feature representation, ah, for each of those pairs of entity mentions.",
    "start": "1417090",
    "end": "1424590"
  },
  {
    "text": "Maybe it's just the bag of words in the sentence, and then we can train a classifier using tec- techniques very",
    "start": "1424590",
    "end": "1432510"
  },
  {
    "text": "much like what we've been exploring for sentiment analysis, and this works.",
    "start": "1432510",
    "end": "1437520"
  },
  {
    "text": "It totally works and it was a huge step forward for relation extraction. It allowed us to build relation extraction systems that got",
    "start": "1437520",
    "end": "1444450"
  },
  {
    "text": "much better performance than the handbill patterns that came before, and particularly, much better recall than what came before.",
    "start": "1444450",
    "end": "1452684"
  },
  {
    "text": "But it has a big shortcoming as well which is that it re- relies on",
    "start": "1452685",
    "end": "1457905"
  },
  {
    "text": "having this manually annotated data from which to learn. You have to go through a corpus and- and manually label everything,",
    "start": "1457905",
    "end": "1466305"
  },
  {
    "text": "and that manual annotation, again, is slow and expensive and it doesn't scale.",
    "start": "1466305",
    "end": "1472289"
  },
  {
    "text": "And in fact, when this was the dominant paradigm in relation extraction during the 90s and 2000s,",
    "start": "1472290",
    "end": "1479475"
  },
  {
    "text": "the largest data sets that were constructed for relation extraction had on the order of thousands of examples.",
    "start": "1479475",
    "end": "1486945"
  },
  {
    "text": "And today, a data set with only thousands of examples seems kinda small. And it's certainly not enough to do-,",
    "start": "1486945",
    "end": "1493770"
  },
  {
    "text": "um, to apply sophisticated, ah, modern methods to. So the big innovation that I- I wanna, um,",
    "start": "1493770",
    "end": "1502304"
  },
  {
    "text": "focus your attention on and gets you excited about is this idea of distant supervision.",
    "start": "1502305",
    "end": "1508095"
  },
  {
    "text": "So here's the big idea. This is the big conceptual breakthrough. We're gonna sidestep the need to manually annotate entity mentions in",
    "start": "1508095",
    "end": "1517110"
  },
  {
    "text": "a sentence by using an external resource as a source of truth.",
    "start": "1517110",
    "end": "1523455"
  },
  {
    "text": "So in particular, we're gonna use relational triples from an existing knowledge base,",
    "start": "1523455",
    "end": "1529440"
  },
  {
    "text": "ah, to automatically identify extraction examples in a big corpus.",
    "start": "1529440",
    "end": "1534929"
  },
  {
    "text": "Let's say for example, we already have a knowledge base that contains this relational triple, founders, SpaceX, Elon Musk.",
    "start": "1534930",
    "end": "1542085"
  },
  {
    "text": "What we do, is we take that pair of entities \"SpaceX\" and \"Elon Musk\", we search through a large corpus for any sentence that contains those two entities,",
    "start": "1542085",
    "end": "1553065"
  },
  {
    "text": "and then we make the unreliable assumption that that sentence expresses the founder relation,",
    "start": "1553065",
    "end": "1560820"
  },
  {
    "text": "and we effectively label each, ah, entity pair, each example in a sentence with that relation label.",
    "start": "1560820",
    "end": "1571845"
  },
  {
    "text": "So it's a way of using this external data source, the knowledge base,",
    "start": "1571845",
    "end": "1577095"
  },
  {
    "text": "to generate labels in the corpus rather than having to manually label all of the examples in the corpus. Yeah.",
    "start": "1577095",
    "end": "1584340"
  },
  {
    "text": "Is it possible that we have situations where we have both Founder, [NOISE] SpaceX, Elon Musk,",
    "start": "1584340",
    "end": "1589520"
  },
  {
    "text": "and like- likes SpaceX, Elon Musk. So when we're looking through a corpus we are going to assign more than one label to a sentence?",
    "start": "1589520",
    "end": "1596380"
  },
  {
    "text": "Absolutely, and we'll come back to that question in a moment because it- it goes to,",
    "start": "1596380",
    "end": "1601530"
  },
  {
    "text": "how do you formulate the classification problem? Is it a multi-class classification problem where you have to choose just one relation out of a bunch of relations,",
    "start": "1601530",
    "end": "1610320"
  },
  {
    "text": "or it is- is a multi-label classification problem where you can assign as many labels as you want. Yes.",
    "start": "1610320",
    "end": "1618284"
  },
  {
    "text": "So can you only do this on something that you've already built up a knowledge base [inaudible].",
    "start": "1618285",
    "end": "1629970"
  },
  {
    "text": "Yeah. One of the limitations of this approach is that because it starts with examples of the relation that you care about,",
    "start": "1629970",
    "end": "1637605"
  },
  {
    "text": "um, you can't use it to build a knowledge base for a completely new relation, or add a new relation to a knowledge base.",
    "start": "1637605",
    "end": "1645659"
  },
  {
    "text": "If I wanna learn to do extractions for the founders relation, I need to start with some examples of the founders relation.",
    "start": "1645660",
    "end": "1652650"
  },
  {
    "text": "Um, if I don't have any examples yet, I'll need to use a different strategy. Yep.",
    "start": "1652650",
    "end": "1659490"
  },
  {
    "text": "Bootstrapping? It is, ah, um,",
    "start": "1659490",
    "end": "1665595"
  },
  {
    "text": "say a little bit more, bootstrapping is an overloaded term. What are the concerns when you do that",
    "start": "1665595",
    "end": "1671715"
  },
  {
    "text": "you have like seed pairs, and then you check over dataset seed to see different relationships that uses those pairs, and then use that to try to find the relation.",
    "start": "1671715",
    "end": "1681179"
  },
  {
    "text": "It is basically the same idea. If you read, you might have- you might be referring to the reading from",
    "start": "1681180",
    "end": "1686309"
  },
  {
    "text": "Jurafsky and Martin where they talk about bootstrapping? Yes. Yeah so it's basically a way of- of",
    "start": "1686310",
    "end": "1693030"
  },
  {
    "text": "formalizing that idea and making it a little bit more rigorous. The way the bootstrapping idea is presented in Jurafsky and Martin,",
    "start": "1693030",
    "end": "1700815"
  },
  {
    "text": "the seed examples, the seed tuples are just chosen by hand. You just kind of think about it.",
    "start": "1700815",
    "end": "1706020"
  },
  {
    "text": "What are some examples of the founder relation? And you come up with a very small number like maybe a dozen, and start the process from there.",
    "start": "1706020",
    "end": "1713100"
  },
  {
    "text": "The other difference is that, um, the way bootstrapping is presented by Jurafsky and Martin,",
    "start": "1713100",
    "end": "1718980"
  },
  {
    "text": "it can be, um, a repeated cycle where you use the seed tuples to get some extractions from your,",
    "start": "1718980",
    "end": "1726495"
  },
  {
    "text": "ah, or to identify some examples in your corpus which may help you identify new patterns.",
    "start": "1726495",
    "end": "1732480"
  },
  {
    "text": "Those patterns in turn can help you identify new tuples, and the process can repeat.",
    "start": "1732480",
    "end": "1739470"
  },
  {
    "text": "Um, with distant supervision we're not repeating that process. We start with a much let- much larger set of seed tuples.",
    "start": "1739470",
    "end": "1746280"
  },
  {
    "text": "Hopefully, if our, you know, if our knowledge base is already kind of large and our goal is to extend the knowledge base,",
    "start": "1746280",
    "end": "1752760"
  },
  {
    "text": "and we're starting with lots of seed tuples and where, ah, we're not sort of going around that cycle repeatedly.",
    "start": "1752760",
    "end": "1760545"
  },
  {
    "text": "We're just doing it once. Other questions before I go on?",
    "start": "1760545",
    "end": "1767505"
  },
  {
    "text": "Somehow related to a earlier question, but say for example like that sentence with PayPal, could it",
    "start": "1767505",
    "end": "1773370"
  },
  {
    "text": "extract that Elon Musk is both the founder of PayPal and the founder, or co-founder of, sorry,",
    "start": "1773370",
    "end": "1779385"
  },
  {
    "text": "founder of SpaceX, co-founder of PayPal. Absolutely. So the way the problem is usually set up,",
    "start": "1779385",
    "end": "1784470"
  },
  {
    "text": "every pair of entities is a candidate for relation extraction,",
    "start": "1784470",
    "end": "1791820"
  },
  {
    "text": "and so if you have three entities in a sentence, there are three pairs and you can consider each one of those three pairs.",
    "start": "1791820",
    "end": "1798225"
  },
  {
    "text": "Um, and, you know, if there are more entities there you have even more potential pairs and each one can be considered. Yeah.",
    "start": "1798225",
    "end": "1805960"
  },
  {
    "text": "So using this external knowledge base as a source of supervision,",
    "start": "1809660",
    "end": "1815220"
  },
  {
    "text": "that is the central idea of distant supervision and it's a really powerful idea.",
    "start": "1815220",
    "end": "1820350"
  },
  {
    "text": "Um, and one of the reasons it was such a game changer for relation extraction about 10 years ago,",
    "start": "1820350",
    "end": "1826140"
  },
  {
    "text": "is that it allowed us to suddenly use 100 times as much data as it had ever been used before.",
    "start": "1826140",
    "end": "1831450"
  },
  {
    "text": "I mentioned that the largest datasets that were fully supervised had thousands of examples. But at one stroke,",
    "start": "1831450",
    "end": "1837735"
  },
  {
    "text": "this idea allowed us to, uh, allowed Mintz et al., the authors of the 2009 paper to use 100 times as much data.",
    "start": "1837735",
    "end": "1845770"
  },
  {
    "text": "By using 100 times as much data, they were able to define a feature representation that had",
    "start": "1845770",
    "end": "1852170"
  },
  {
    "text": "much more precise sort of specific pinpoint features and they actually had enough data to,",
    "start": "1852170",
    "end": "1860184"
  },
  {
    "text": "um, overcome the problem of sparsity for those very specific precise features,",
    "start": "1860185",
    "end": "1865995"
  },
  {
    "text": "and that enabled them to get much better power from the, from the model that they were building.",
    "start": "1865995",
    "end": "1873075"
  },
  {
    "text": "And in fact, like, at that time, they were able to achieve a 100X gain.",
    "start": "1873075",
    "end": "1878295"
  },
  {
    "text": "I mean, there's no, there's nothing in principle that limits even larger scaling up.",
    "start": "1878295",
    "end": "1883635"
  },
  {
    "text": "Um, they were constrained by the computational resources available at that time. Today, we could probably easily go to 1,000 times or 10,000",
    "start": "1883635",
    "end": "1891240"
  },
  {
    "text": "times as much data as people were using for relation extraction, uh, in the 2000s.",
    "start": "1891240",
    "end": "1896910"
  },
  {
    "text": "So it's been a very successful idea. It has two limitations or two, um, [NOISE] yeah two limitations.",
    "start": "1896910",
    "end": "1904410"
  },
  {
    "text": "One is that it relies on making this assumption that every sentence where so,",
    "start": "1904410",
    "end": "1913140"
  },
  {
    "text": "um, I'm starting from this triple in my knowledge base, founders, SpaceX, Elon Musk. I go to the corpus and I find every sentence where those two entities co-occur.",
    "start": "1913140",
    "end": "1921405"
  },
  {
    "text": "I'm making the assumption that every sentence where those two entities co-occur, actually expresses the founder relation.",
    "start": "1921405",
    "end": "1928800"
  },
  {
    "text": "But we know that's not true. We know that's an unreliable assumption, assumption and in fact, I just showed an example of a sentence that doesn't express the founder relation.",
    "start": "1928800",
    "end": "1938085"
  },
  {
    "text": "The distant supervision approach is gonna label that as an example that does express the founder relation, that's wrong.",
    "start": "1938085",
    "end": "1945240"
  },
  {
    "text": "So by doing this, I'm essentially injecting noise into my dataset and that makes,",
    "start": "1945240",
    "end": "1952380"
  },
  {
    "text": "um, that creates a, a challenge for the learning algorithm. It's harder to learn when you have noisy labels.",
    "start": "1952380",
    "end": "1959385"
  },
  {
    "text": "That disadvantage is more than outweighed by the benefit of having vastly more data.",
    "start": "1959385",
    "end": "1966285"
  },
  {
    "text": "And so even though your learner has this additional challenge, it's still able to learn much better models.",
    "start": "1966285",
    "end": "1971700"
  },
  {
    "text": "Um, the other limitation of this idea is the one that was already mentioned, it can only be used to extend an existing knowledge base or an existing relation.",
    "start": "1971700",
    "end": "1980790"
  },
  {
    "text": "Uh, but because it relies on existing triples from the database, from the knowledge base, it can't be used to create a new one from whole cloth.",
    "start": "1980790",
    "end": "1989110"
  },
  {
    "text": "Okay. So that's the biggest idea. Um, if you only got that from today's session,",
    "start": "1991340",
    "end": "1998595"
  },
  {
    "text": "um, I think you would have already gotten something valuable. What I wanna do with, uh, the rest of the time is to walk you through the rest of this code book, um,",
    "start": "1998595",
    "end": "2008120"
  },
  {
    "text": "to help prepare you for looking at Homework 3 and Bake-Off 3, which are gonna be due next week.",
    "start": "2008120",
    "end": "2015275"
  },
  {
    "text": "So we have a little bit of setup stuff. We're gonna import some useful classes and libraries,",
    "start": "2015275",
    "end": "2023390"
  },
  {
    "text": "um, and some data. So the data directory for the class includes a sub-directory called rel_ext_data.",
    "start": "2023390",
    "end": "2031085"
  },
  {
    "text": "And there's two things in there; there's a corpus and there's a KB and I'm gonna say a little bit more,",
    "start": "2031085",
    "end": "2037265"
  },
  {
    "text": "uh, about each of those. Um, if you have sort of the default setup, um, then this code should work for you out of the box.",
    "start": "2037265",
    "end": "2043535"
  },
  {
    "text": "If you put the data directory somewhere else, you may need to fiddle with the line that tells it where to look for the data.",
    "start": "2043535",
    "end": "2050310"
  },
  {
    "text": "Okay. So two data assets to talk about; the corpus and the knowledge base. Um, as usual when- whenever we're doing NLU we start with a corpus,",
    "start": "2051370",
    "end": "2061490"
  },
  {
    "text": "a large collection of examples of language and in this case, we, there are some specific things that we need from our corpus.",
    "start": "2061490",
    "end": "2070205"
  },
  {
    "text": "We need lots of examples that contain two entities. That's the whole idea.",
    "start": "2070205",
    "end": "2075950"
  },
  {
    "text": "Um, and it's gonna be really useful if those entities have or already have what are called entity resolutions.",
    "start": "2075950",
    "end": "2084575"
  },
  {
    "text": "So an entity resolution basically takes an entity mention like a string in a sentence that refers to an entity and it maps it into,",
    "start": "2084575",
    "end": "2094294"
  },
  {
    "text": "um, a unique unambiguous identifier. Um, and that's gonna be really useful because we're gonna wanna",
    "start": "2094295",
    "end": "2100850"
  },
  {
    "text": "connect the corpus to the knowledge base, which is gonna use the same unique and unambiguous identifiers.",
    "start": "2100850",
    "end": "2109115"
  },
  {
    "text": "Um, so, um, making the identifiers unique and unambiguous kinda solves two problems.",
    "start": "2109115",
    "end": "2118145"
  },
  {
    "text": "One, is the problem of polysemy, which means polysemy is when one word or one phrase can mean two different things.",
    "start": "2118145",
    "end": "2126125"
  },
  {
    "text": "So the example here is New York. New York can mean New York State or New York City. If I've done entity resolution correctly,",
    "start": "2126125",
    "end": "2133310"
  },
  {
    "text": "those will map into two different unique identifiers. New York City will have one identifier, New York State will have a different identifier,",
    "start": "2133310",
    "end": "2139730"
  },
  {
    "text": "and hopefully something in the context around, uh, will tell me which one of those it should map to.",
    "start": "2139730",
    "end": "2145430"
  },
  {
    "text": "So that's polysemy. The other problem that helps to solve is synonymy, when you can have two different expressions that refer to the same entity.",
    "start": "2145430",
    "end": "2153650"
  },
  {
    "text": "So New York City and the Big Apple both refer to New York City. Hopefully, those two different expressions will both get mapped to",
    "start": "2153650",
    "end": "2160760"
  },
  {
    "text": "the same unique identifier when we do entity resolution. Um, entity resolution is a whole topic unto itself.",
    "start": "2160760",
    "end": "2169580"
  },
  {
    "text": "There's people, you know, work on developing models for doing entity resolution properly.",
    "start": "2169580",
    "end": "2176555"
  },
  {
    "text": "That's a topic that we could unpack in this class but we're not gonna do that. We're gonna kinda treat it as",
    "start": "2176555",
    "end": "2182150"
  },
  {
    "text": "a black box and assume that it's already been done correctly. And for this project,",
    "start": "2182150",
    "end": "2189185"
  },
  {
    "text": "what we're gonna, what, use for a corpus is, uh, a bunch of examples that are derived from this Wikilinks corpus.",
    "start": "2189185",
    "end": "2197360"
  },
  {
    "text": "Wikilinks was, uh, the result of a collaboration in 2013 between Google and some rese- researchers at UMass and um,",
    "start": "2197360",
    "end": "2206704"
  },
  {
    "text": "it's drawn from a really large snapshot of the Internet,",
    "start": "2206705",
    "end": "2212510"
  },
  {
    "text": "um, 10 million web pages altogether. Uh, what Google did is they, Google has a terrific entity resolution module in-house and they just ran",
    "start": "2212510",
    "end": "2222680"
  },
  {
    "text": "this entity resolution system over millions of web pages and basically recorded the results.",
    "start": "2222680",
    "end": "2228770"
  },
  {
    "text": "So the entity resolutions that appear in the Wikilinks, um, corpus are not the result of human annotation.",
    "start": "2228770",
    "end": "2235760"
  },
  {
    "text": "They're the result of, uh, a model that's just running over webpages. And if you wanted to,",
    "start": "2235760",
    "end": "2241954"
  },
  {
    "text": "you could build an entity resolution component from scratch and then you don't need any annotations on your data at all.",
    "start": "2241955",
    "end": "2249305"
  },
  {
    "text": "You just start from, uh, arbitrary text from the web. Uh, but to make our lives a little bit easier for ourselves,",
    "start": "2249305",
    "end": "2255080"
  },
  {
    "text": "we're gonna leverage the output of this entity resolution system from Google through, through, uh, Wikilinks.",
    "start": "2255080",
    "end": "2262250"
  },
  {
    "text": "[NOISE] Um, there's something else we want,",
    "start": "2262250",
    "end": "2267905"
  },
  {
    "text": "which is that we wanna have the context around the two entity mentions. So we'd like to have the text before the first mention,",
    "start": "2267905",
    "end": "2275900"
  },
  {
    "text": "the text between the first mention and the second mention and the text after the second mention",
    "start": "2275900",
    "end": "2281210"
  },
  {
    "text": "because all of that context is potentially predictive of what the right relation is.",
    "start": "2281210",
    "end": "2288395"
  },
  {
    "text": "If you look back at, um, some of the examples that I gave, um,",
    "start": "2288395",
    "end": "2294950"
  },
  {
    "text": "like, in the first example, Elon Musk, founder of SpaceX. Well, there's something in the middle here, the word founder,",
    "start": "2294950",
    "end": "2301535"
  },
  {
    "text": "that's strongly predictive of the right relation. Um, [NOISE] the, in the second example,",
    "start": "2301535",
    "end": "2310339"
  },
  {
    "text": "you've got this word established that's in the middle, which is strongly predictive.",
    "start": "2310340",
    "end": "2314880"
  },
  {
    "text": "Um, [NOISE] oh, I thought I had an example where at least intuitively",
    "start": "2316030",
    "end": "2321260"
  },
  {
    "text": "the most predictive thing is not in the middle but it's outside maybe that example comes later.",
    "start": "2321260",
    "end": "2327390"
  },
  {
    "text": "Anyway, we wanna have that context around the, around the two entity mentions and, um,",
    "start": "2327870",
    "end": "2334570"
  },
  {
    "text": "the UMass version of the Wikilinks dataset actually has that context. So to help set things up to be convenient for the purposes of this class, we, um,",
    "start": "2334570",
    "end": "2343960"
  },
  {
    "text": "uh, massage the data, we filter the data to make it small enough to easily load into memory and,",
    "start": "2343960",
    "end": "2350275"
  },
  {
    "text": "and to work with. Uh, but what we wind up with is a compact corpus that's gonna work really well for, for our purposes.",
    "start": "2350275",
    "end": "2357505"
  },
  {
    "text": "Um, there's, uh, a corpus class that provides some easy access methods to some of this,",
    "start": "2357505",
    "end": "2365779"
  },
  {
    "text": "to, to, to the contents of the corpus. So I wanna give you a, a peek of some of that, and at the same time do some, some data exploration.",
    "start": "2365780",
    "end": "2373175"
  },
  {
    "text": "So to load the corpus into memory, um, we just use, um, this call here and,",
    "start": "2373175",
    "end": "2379730"
  },
  {
    "text": "um, we can start to, to poke around and see what we're working with. Um, so the corpus has examples.",
    "start": "2379730",
    "end": "2387994"
  },
  {
    "text": "Every example is two entity mentions in the context of a sentence. There are 332,000 examples.",
    "start": "2387995",
    "end": "2396365"
  },
  {
    "text": "So that's great. That's plenty of examples, but still small enough to easily work with in memory.",
    "start": "2396365",
    "end": "2401375"
  },
  {
    "text": "Um, and let's take a look at what an example looks like. So we'll just look at the first example here.",
    "start": "2401375",
    "end": "2407590"
  },
  {
    "text": "Um, this is horizontally scrolling so it's a little hard to read. But, um, each example is basically a tuple and it has if I remember correctly 12 fields.",
    "start": "2407590",
    "end": "2421430"
  },
  {
    "text": "So the first two fields are called entity_1 and entity_2. So in this example,",
    "start": "2421430",
    "end": "2427190"
  },
  {
    "text": "entity_1 is New_Mexico and entity_2 is Arizona. Um, these, these are the unique identifiers for entities that I mentioned.",
    "start": "2427190",
    "end": "2437540"
  },
  {
    "text": "Um, the fact that New_Mexico has an underscore in it kinda suggests that this is not just an English expression,",
    "start": "2437540",
    "end": "2444770"
  },
  {
    "text": "this is actually a unique identifier in some kind of entity space. And in particular, these are so-called Wiki IDs.",
    "start": "2444770",
    "end": "2450950"
  },
  {
    "text": "So this is basically the last part of the, the URL for the Wikipedia page corresponding to this thing.",
    "start": "2450950",
    "end": "2459890"
  },
  {
    "text": "Um, and serves as a unique identifier for New Mexico and for Arizona in this case.",
    "start": "2459890",
    "end": "2466069"
  },
  {
    "text": "Um, then the next five fields are fragments of the text from this example.",
    "start": "2466070",
    "end": "2472565"
  },
  {
    "text": "We have a field called left, which is all the text to the left of the first entity mention.",
    "start": "2472565",
    "end": "2478040"
  },
  {
    "text": "Then we have mention_1, which is the English text. So here it's New Mexico without the underscore",
    "start": "2478040",
    "end": "2484970"
  },
  {
    "text": "because this is the actual fragment of text. Then we have the middle, which is everything between the two mentions.",
    "start": "2484970",
    "end": "2491915"
  },
  {
    "text": "In this case, it's just and. Then we have mention_2, Arizona, and then we have right,",
    "start": "2491915",
    "end": "2497405"
  },
  {
    "text": "which is everything to the right of the second mention. And so if you paste those together, you can kinda get the whole sentence.",
    "start": "2497405",
    "end": "2504995"
  },
  {
    "text": "Um, the procedure is still used in parts of New Mexico",
    "start": "2504995",
    "end": "2510035"
  },
  {
    "text": "and Arizona is to build a fire inside the Horno and so forth.",
    "start": "2510035",
    "end": "2517049"
  },
  {
    "text": "And then, the last five fields are similar to the previous five fields,",
    "start": "2517960",
    "end": "2524825"
  },
  {
    "text": "except that, um, they have part of speech annotations. So every word has a slash after it,",
    "start": "2524825",
    "end": "2531320"
  },
  {
    "text": "and following the slash is something in all caps TO, DT,",
    "start": "2531320",
    "end": "2536390"
  },
  {
    "text": "JJ, NNS, DT, NN, and so forth, that indicates the part of speech of that particular word.",
    "start": "2536390",
    "end": "2544609"
  },
  {
    "text": "And again, the parts of speech have been generated by an automated system, by a model. Um, you don't need to worry too much about the meaning of the different parts of speech.",
    "start": "2544610",
    "end": "2552905"
  },
  {
    "text": "They come from the Penn Tree-bank annotation scheme. There's about 40 or 50 different categories.",
    "start": "2552905",
    "end": "2561635"
  },
  {
    "text": "You can sort of figure out what they mean, NN means noun, NNS means plural noun, things like that.",
    "start": "2561635",
    "end": "2569030"
  },
  {
    "text": "But you probably don't need to worry too much about what the specific things mean. The reason they're here is that, uh,",
    "start": "2569030",
    "end": "2575300"
  },
  {
    "text": "they could be useful in building feature representations for your model. And you may find- in fact, I think one of the homework questions asks you to try to",
    "start": "2575300",
    "end": "2582410"
  },
  {
    "text": "leverage the- the parts of speech information to get, uh, better- better generalization capability.",
    "start": "2582410",
    "end": "2588780"
  },
  {
    "text": "Oh, and here's a code fragment which actually pastes. Um, the left mention one, middle, mention two,",
    "start": "2589390",
    "end": "2596600"
  },
  {
    "text": "and right all together to sort of reconstruct the original sentence. Let's do a little bit more data exploration,",
    "start": "2596600",
    "end": "2602509"
  },
  {
    "text": "just to get a better sense of what's in this corpus. And by the way, this is good metholo- methodological practice.",
    "start": "2602510",
    "end": "2608750"
  },
  {
    "text": "Whenever you start working with a new data resource, do some poking around, and figure out what's in there.",
    "start": "2608750",
    "end": "2614570"
  },
  {
    "text": "Try to- try to look at some summary statistics of what the data looks like. Uh, we wrote a little bit of code to extract,",
    "start": "2614570",
    "end": "2622280"
  },
  {
    "text": "um, all of the entity mentions, and then count them up. And so, here's a list of all the entities by frequency.",
    "start": "2622280",
    "end": "2628760"
  },
  {
    "text": "Um, there's a lot of geography things. In fact, looking at this list,",
    "start": "2628760",
    "end": "2634280"
  },
  {
    "text": "you might think that it was only geography. That's not actually the case, but it certainly looks that way right here.",
    "start": "2634280",
    "end": "2640835"
  },
  {
    "text": "Um, one of the benefits of having a corpus class, is that it makes it- we can do some indexing and make it",
    "start": "2640835",
    "end": "2648065"
  },
  {
    "text": "easy to retrieve examples having specific characteristics. So in particular, there's a method called show_examples_for_pair that makes it",
    "start": "2648065",
    "end": "2655940"
  },
  {
    "text": "really easy to look up all the examples that contain a particular pair of entities. So here, we looked up, uh,",
    "start": "2655940",
    "end": "2661775"
  },
  {
    "text": "the examples that contain Elon Musk and Tesla Motors. And the output tells us there's five examples like that,",
    "start": "2661775",
    "end": "2668525"
  },
  {
    "text": "and it prints out, uh, the first of those five examples.",
    "start": "2668525",
    "end": "2673800"
  },
  {
    "text": "But actually, direction matters here. So this isn't necessarily all of the examples that contain Elon Musk and Tesla,",
    "start": "2673810",
    "end": "2683690"
  },
  {
    "text": "it's just the examples that have Elon Musk as entity one and Tesla as entity two.",
    "start": "2683690",
    "end": "2688865"
  },
  {
    "text": "It could be the other way around. So let's also look at, show examples for pair Tesla Motors and Elon Musk.",
    "start": "2688865",
    "end": "2694339"
  },
  {
    "text": "And it turns out that there's two more examples that have it the other way around. So we need to be conscious of direction.",
    "start": "2694340",
    "end": "2701330"
  },
  {
    "text": "If we're looking for examples that have Elon Musk and Tesla Motors, we need to check in both directions,",
    "start": "2701330",
    "end": "2706610"
  },
  {
    "text": "um, when we're making those calls. This corpus does have some flaws.",
    "start": "2706610",
    "end": "2712535"
  },
  {
    "text": "One flaw that you'll discover as you get further into things and start poking around more, is that there are lots of examples that are near duplicates of each other.",
    "start": "2712535",
    "end": "2720545"
  },
  {
    "text": "So not exactly the same, but with minor variations, like only a few words different, or something like that.",
    "start": "2720545",
    "end": "2725885"
  },
  {
    "text": "I think this is a consequence- so this com- this is- um, this comes from the Wikilinks data-set.",
    "start": "2725885",
    "end": "2732575"
  },
  {
    "text": "And I think this is a consequence of the sampling strategy that was",
    "start": "2732575",
    "end": "2738079"
  },
  {
    "text": "used to choose the 10 million web pages from which the data-set was constructed.",
    "start": "2738080",
    "end": "2744215"
  },
  {
    "text": "I don't know all the de- I don't know exactly how they did that, but there's lots of near duplicate documents on the web,",
    "start": "2744215",
    "end": "2750830"
  },
  {
    "text": "pages that differ from each other only by a little bit. And I think they didn't try to weed those out.",
    "start": "2750830",
    "end": "2756080"
  },
  {
    "text": "And so, you will see lots of those near duplicates, and they will cause some funny-looking results that we'll run into later.",
    "start": "2756080",
    "end": "2763940"
  },
  {
    "text": "Um, it's a flaw, but it's not a showstopper for this data-set. Um, the other observation to make here,",
    "start": "2763940",
    "end": "2770120"
  },
  {
    "text": "is that this corpus doesn't contain any information about relations.",
    "start": "2770120",
    "end": "2776300"
  },
  {
    "text": "Unlike the supervised paradigm, there's no explicit indication in this corpus about what relations hold between the entities.",
    "start": "2776300",
    "end": "2784520"
  },
  {
    "text": "Uh, there's nothing in this corpus that tells us- nothing except the English words in this corpus that tells us that Elon Musk is the founder of Tesla.",
    "start": "2784520",
    "end": "2794000"
  },
  {
    "text": "So to get that, we're going to have to connect the corpus to the knowledge base.",
    "start": "2794000",
    "end": "2799410"
  },
  {
    "text": "So we'll turn our attention to the KB now. Before I go on, any- any more questions about the corpus? Yeah.",
    "start": "2800370",
    "end": "2811539"
  },
  {
    "text": "[inaudible] like a record for every single [inaudible] factory and space and things like that.",
    "start": "2811540",
    "end": "2820570"
  },
  {
    "text": "Say if we did like space in two. Would we get a list of words that have both space and two or are there only certain entities that it's marked out?",
    "start": "2820570",
    "end": "2827810"
  },
  {
    "text": "Only entities. And in this case, it was entities that were identified as entities in the Wikilinks corpus,",
    "start": "2827810",
    "end": "2836150"
  },
  {
    "text": "and therefore entities that were recognized by the entity resolution system that Google used to generate this data.",
    "start": "2836150",
    "end": "2842840"
  },
  {
    "text": "Um, but that's a possible variation. And in fact, er- earlier I mentioned the work by Snow that was used to extend WordNet,",
    "start": "2842840",
    "end": "2851435"
  },
  {
    "text": "and they had a different notion of like what were the units of extraction. Um, and instead of entities, they were- they were looking much more",
    "start": "2851435",
    "end": "2858740"
  },
  {
    "text": "generally at nouns and trying- or noun phrases, and trying to learn relationships between noun phrases.",
    "start": "2858740",
    "end": "2865350"
  },
  {
    "text": "Okay. Let's turn to the knowledge base. Now, the knowledge base that we're gonna use is a fragment of Freebase.",
    "start": "2866230",
    "end": "2872780"
  },
  {
    "text": "I mentioned Freebase earlier. It's this, uh, large, uh, just sort of community constructed knowledge base of,",
    "start": "2872780",
    "end": "2880310"
  },
  {
    "text": "uh, relationships between entities. It was very sadly shut down in 2016,",
    "start": "2880310",
    "end": "2886415"
  },
  {
    "text": "but you can see- if you poke around on the Internet, you can still find data dumps from Freebase. And the- the knowledge base that we're gonna include",
    "start": "2886415",
    "end": "2894110"
  },
  {
    "text": "here was derived from a Freebase data dump. So in Freebase, you have these relational triples that we've already looked at.",
    "start": "2894110",
    "end": "2900934"
  },
  {
    "text": "Each one consists of a relation, a subject, and an object. Uh, subject and object that's just kind of, um,",
    "start": "2900935",
    "end": "2908690"
  },
  {
    "text": "the- there's no connection to- to subject and object in a syntactic sense,",
    "start": "2908690",
    "end": "2913700"
  },
  {
    "text": "in the sense of English syntax. It's just kind of an arbitrary designation for the first argument to the relation,",
    "start": "2913700",
    "end": "2919099"
  },
  {
    "text": "and the second argument to the relation. The relation, the thing in",
    "start": "2919100",
    "end": "2925430"
  },
  {
    "text": "the first position is one of a small number of pre-defined relations, like place of birth or has spouse.",
    "start": "2925430",
    "end": "2931310"
  },
  {
    "text": "And the entities that appear in the second and third position, again, are Wiki IDs.",
    "start": "2931310",
    "end": "2937565"
  },
  {
    "text": "So it's like the last segment of a Wikipedia URL, and it constitutes, uh,",
    "start": "2937565",
    "end": "2943010"
  },
  {
    "text": "a unique identifier that we can connect to the identifiers used in the corpus. Um, just like we did for the corpus, um,",
    "start": "2943010",
    "end": "2951815"
  },
  {
    "text": "we should do some data exploration and see what this data actually looks like.",
    "start": "2951815",
    "end": "2957920"
  },
  {
    "text": "So here's a line of code to load the KB into memory, and then we can start poking around.",
    "start": "2957920",
    "end": "2964580"
  },
  {
    "text": "So there's 46,000 KB triples here.",
    "start": "2964580",
    "end": "2969620"
  },
  {
    "text": "That's great. That seems like a fair amount to work with. Um, there's 16 relations in this knowledge base.",
    "start": "2969620",
    "end": "2977359"
  },
  {
    "text": "Wikipe- uh, Freebase the original free, like the full Freebase has way more than this.",
    "start": "2977360",
    "end": "2982520"
  },
  {
    "text": "So Freebase has thousands of relations, millions of entities and literally billions of relational triples.",
    "start": "2982520",
    "end": "2990244"
  },
  {
    "text": "What we're working with here is a- is a fairly small slice of that whole knowledge base. Um, then you might want to know how big is each relation.",
    "start": "2990245",
    "end": "2998510"
  },
  {
    "text": "How many triples does each relation have? So we've counted them up, and you see the results here. It looks like the contains relation is the biggest one.",
    "start": "2998510",
    "end": "3006370"
  },
  {
    "text": "It's got 19,000 triples. Um, and some of them are quite small. So the capital relation has only 500 triples.",
    "start": "3006370",
    "end": "3014200"
  },
  {
    "text": "So they vary quite a bit in size. Um, here's some code that prints one example from each relation,",
    "start": "3014200",
    "end": "3021130"
  },
  {
    "text": "just so you get a sense of what's in here. So adjoins, France, Spain, pretty intuitive.",
    "start": "3021130",
    "end": "3026470"
  },
  {
    "text": "Author, Uncle_Silas, Sheridan_Le_Fanu, Capital, Panama, Panama_City.",
    "start": "3026470",
    "end": "3032530"
  },
  {
    "text": "I think these are pretty intuitive for the most part. Um, one thing to point out is that,",
    "start": "3032530",
    "end": "3038230"
  },
  {
    "text": "some of these relations are intuitively symmetric relation. So I presume the adjoins relation is symmetric.",
    "start": "3038230",
    "end": "3045415"
  },
  {
    "text": "And if adjoins, France, Spain is in the knowledge base, then probably,",
    "start": "3045415",
    "end": "3051055"
  },
  {
    "text": "hopefully, adjoins, Spain, France is also in the knowledge base.",
    "start": "3051055",
    "end": "3056694"
  },
  {
    "text": "However, there are no guarantees. Um, in theory, it's symmetric, but nothing actually guarantees that",
    "start": "3056695",
    "end": "3062350"
  },
  {
    "text": "the inverse relation is actually in the knowledge base. Um, other relations are intuitively asymmetric.",
    "start": "3062350",
    "end": "3068619"
  },
  {
    "text": "So Author, Uncle_Silas, Sheridan_Le_Fanu, that's fun to say. Um, it's a bit arbitrary that the relation was defined in that direction.",
    "start": "3068620",
    "end": "3077994"
  },
  {
    "text": "There is no reason why it couldn't have been the other way around. So it could have been instead, author of Sheridan_Le_Fanu, Uncle_Silas.",
    "start": "3077995",
    "end": "3086454"
  },
  {
    "text": "That would have been fine. The representational choice that was made here was to put the- the author first and the work second.",
    "start": "3086455",
    "end": "3094240"
  },
  {
    "text": "Um, and by the way, that also points out that relations frequently or typically have types.",
    "start": "3094240",
    "end": "3100345"
  },
  {
    "text": "So, uh, a relation will have a type for its first argument and a type for its second argument.",
    "start": "3100345",
    "end": "3105355"
  },
  {
    "text": "Um, just like in the corpus, there's a convenience method that makes it easy to look up the KB triples that,",
    "start": "3105355",
    "end": "3114925"
  },
  {
    "text": "uh, contain a particular pair of entities. So we can look up all the, um, triples that contain France and Germany.",
    "start": "3114925",
    "end": "3122260"
  },
  {
    "text": "Uh, it looks like there's just one. There is a relation adjoins, France, Germany.",
    "start": "3122260",
    "end": "3127930"
  },
  {
    "text": "Um, and we can also look up, uh, Germany and France.",
    "start": "3127930",
    "end": "3134454"
  },
  {
    "text": "So it turns out, yep, the inverse relation is in there. That's great. Um.",
    "start": "3134455",
    "end": "3144340"
  },
  {
    "text": "Uh, we can look up the relation- relations between Tesla Motors and Elon Musk who- uh,",
    "start": "3144340",
    "end": "3149890"
  },
  {
    "text": "we get the result that the founders relation holds between Tesla and Elon Musk. That's great. I kind of said some of this stuff already.",
    "start": "3149890",
    "end": "3157285"
  },
  {
    "text": "Oh, and then we can look up things the other way around. We can look at the relation between Elon Musk and Tesla Motors and",
    "start": "3157285",
    "end": "3163750"
  },
  {
    "text": "there is a triple, worked at, Elon_Musk, Tesla_Motors. So that kinda makes sense.",
    "start": "3163750",
    "end": "3170210"
  },
  {
    "text": "Um, and then this point addresses a question that came up earlier. There can be more than one relation that holds between a given pair of entities.",
    "start": "3171210",
    "end": "3178644"
  },
  {
    "text": "So, uh, Cleopatra and Ptolemy blah, blah, blah, have both the- has sibling relation and has",
    "start": "3178645",
    "end": "3186310"
  },
  {
    "text": "spouse relation which seems you know unusual but, um, I guess things were different back then.",
    "start": "3186310",
    "end": "3194060"
  },
  {
    "text": "Um, and then we can look at the distribution of entities in the KB. So here we go through all the triples,",
    "start": "3194190",
    "end": "3200710"
  },
  {
    "text": "count up all the entities and list them in order of frequency. Um, and again you see that it's dominated by entities that are related to geography.",
    "start": "3200710",
    "end": "3210970"
  },
  {
    "text": "Um, and in fact this list look like- list look like- looks like it's only geography,",
    "start": "3210970",
    "end": "3216849"
  },
  {
    "text": "but that's not actually the case. One last observation, um,",
    "start": "3216849",
    "end": "3222240"
  },
  {
    "text": "there's no guarantee that the KB is complete. So this knowledge base has founders, SpaceX, Elon_Musk.",
    "start": "3222240",
    "end": "3230130"
  },
  {
    "text": "It has founders, Tesla, Elon_Musk. It has worked_at, Elon_Musk, Tesla_Motors.",
    "start": "3230130",
    "end": "3236140"
  },
  {
    "text": "But it does not have worked_at, Elon_Musk, SpaceX even though he did.",
    "start": "3236140",
    "end": "3241974"
  },
  {
    "text": "And given the other three you would think that it should but it just so happens it doesn't.",
    "start": "3241975",
    "end": "3248545"
  },
  {
    "text": "And in fact, that's the whole reason that we're doing this. The whole reason that we're doing this is that we want to extend",
    "start": "3248545",
    "end": "3256734"
  },
  {
    "text": "an existing knowledge base with facts that should be in there but aren't. If the knowledge base were already complete we wouldn't have any work to do.",
    "start": "3256735",
    "end": "3265720"
  },
  {
    "text": "So the fact that it's incomplete is no surprise and in fact, it's the whole motivation for doing this thing.",
    "start": "3265720",
    "end": "3272210"
  },
  {
    "text": "Okay, so the next question to look at is, um, how are we going to formulate the prediction problem that we're going to undertake?",
    "start": "3273360",
    "end": "3280569"
  },
  {
    "text": "And there's really two questions here. One is, what's the input to the prediction problem? And the other is, what's the output?",
    "start": "3280570",
    "end": "3286510"
  },
  {
    "text": "What's the input means what is the- um, what is the unit that we're going to try to make a prediction about?",
    "start": "3286510",
    "end": "3294805"
  },
  {
    "text": "The classic formulation of the relation extraction problem was to say, the input is a pair of entity mentions in a specific context in",
    "start": "3294805",
    "end": "3304060"
  },
  {
    "text": "a specific sentence and for a pair of entity mentions in context,",
    "start": "3304060",
    "end": "3309690"
  },
  {
    "text": "we're going to try to predict the relation that holds between them. There's an alternative which is to say, the unit of prediction,",
    "start": "3309690",
    "end": "3316080"
  },
  {
    "text": "the input to the prediction problem is instead just a pair of entities. Not a pair of entity mentions but just a pair of entities",
    "start": "3316080",
    "end": "3323655"
  },
  {
    "text": "abstracted away from any specific context. So that's one choice we need to make.",
    "start": "3323655",
    "end": "3329140"
  },
  {
    "text": "The other choice is what's the output of the prediction and this ties back to the question that came up earlier.",
    "start": "3329140",
    "end": "3334210"
  },
  {
    "text": "Are we trying to predict a single relation that holds between the two entities? Or can we predict multiple relations to hold between the two entities?",
    "start": "3334210",
    "end": "3343090"
  },
  {
    "text": "Like the example of a half sibling and half spouse both holding between one- one pair of people.",
    "start": "3343090",
    "end": "3348984"
  },
  {
    "text": "Um, it's worth noting that the classical approach to relation extraction chose the first answer to both of these questions.",
    "start": "3348985",
    "end": "3358045"
  },
  {
    "text": "But today, the path that we're going to pursue chooses the second answer to both of",
    "start": "3358045",
    "end": "3364000"
  },
  {
    "text": "these questions and I'll spell that out a little bit more as we go. So we're first going to talk about the first one.",
    "start": "3364000",
    "end": "3370015"
  },
  {
    "text": "How do we- how do we formulate the input to this prediction problem? And that really comes to the question of how we're going to",
    "start": "3370015",
    "end": "3376240"
  },
  {
    "text": "connect the corpus and the KB? Um, there's kind of two possibilities.",
    "start": "3376240",
    "end": "3383635"
  },
  {
    "text": "The way I described it earlier it kind of sounded like we were going to use",
    "start": "3383635",
    "end": "3389155"
  },
  {
    "text": "the knowledge base as a way to generate labels on entity mentions in context,",
    "start": "3389155",
    "end": "3396550"
  },
  {
    "text": "and that's similar to the classical approach to relation extraction. Um, and we could do that.",
    "start": "3396550",
    "end": "3404260"
  },
  {
    "text": "But actually, we're going to do something else. Instead we're gonna, um, de- define our problem as the problem of",
    "start": "3404260",
    "end": "3412990"
  },
  {
    "text": "classifying not a pair of entity mentions but a pair of entities. And we're going to use all of the examples from the corpus where",
    "start": "3412990",
    "end": "3422560"
  },
  {
    "text": "those two entities co-occur to generate the feature representation for that classification problem.",
    "start": "3422560",
    "end": "3429670"
  },
  {
    "text": "So instead of trying to classify a mention of Elon and Tesla in a specific sentence,",
    "start": "3429670",
    "end": "3435869"
  },
  {
    "text": "we're gonna take all of the sentences where Elon and Tesla co-occur and use those to generate",
    "start": "3435870",
    "end": "3442425"
  },
  {
    "text": "a feature representation which will help us make a prediction about whether Elon and Tesla in abstract,",
    "start": "3442425",
    "end": "3451255"
  },
  {
    "text": "apart from any specific context, are related to each other. That's a really important step.",
    "start": "3451255",
    "end": "3457600"
  },
  {
    "text": "So let me pause there and let that sink in and make sure that it makes sense.",
    "start": "3457600",
    "end": "3464890"
  },
  {
    "text": "We're gonna- the input to the prediction problem will be a pair of entities considered apart from any specific context.",
    "start": "3464890",
    "end": "3472990"
  },
  {
    "text": "But when we generate a feature representation, we're going to use all of the sentences in the corpus where",
    "start": "3472990",
    "end": "3478870"
  },
  {
    "text": "those two entities co-occur as the source for those features.",
    "start": "3478870",
    "end": "3484220"
  },
  {
    "text": "Okay. Um, so that means that we need to, um,",
    "start": "3485190",
    "end": "3493075"
  },
  {
    "text": "use the, um, the entity IDs, the- the Wiki IDs as the way to join the corpus and the KB.",
    "start": "3493075",
    "end": "3503455"
  },
  {
    "text": "And continuing the idea of data exploration, we can look at how many examples we have for each triple.",
    "start": "3503455",
    "end": "3510700"
  },
  {
    "text": "So we can go through the triples in our knowledge base. For each one we look up all the examples in the corpus that contain those two entities.",
    "start": "3510700",
    "end": "3518559"
  },
  {
    "text": "And we can look at in aggregate or on average over the- over the knowledge base how many examples we have to support each triple.",
    "start": "3518560",
    "end": "3526810"
  },
  {
    "text": "So this table summarizes that. Like for adjoins there are 60,000 examples altogether,",
    "start": "3526810",
    "end": "3533170"
  },
  {
    "text": "um, but 1700 triples, and it means there's a lot of examples for every triple.",
    "start": "3533170",
    "end": "3538660"
  },
  {
    "text": "We have about on average about 34 examples for every triple. That's terrific. We have lots of evidence,",
    "start": "3538660",
    "end": "3544630"
  },
  {
    "text": "lots of examples to draw features from to help us learn an extraction model for this relation.",
    "start": "3544630",
    "end": "3550795"
  },
  {
    "text": "There are other relations where the number of examples is much smaller. So some of these have an average number of examples per triple of like one-and-a-half,",
    "start": "3550795",
    "end": "3560500"
  },
  {
    "text": "and that means we're going to have a lot less evidence in the corpus to draw on.",
    "start": "3560500",
    "end": "3565760"
  },
  {
    "text": "Um, there's one more thing we need, um, to train these models and that is negative examples.",
    "start": "3566910",
    "end": "3575365"
  },
  {
    "text": "The, um, the- the connecting the- the KB triples to examples in the corpus is gonna give us positive examples for training our models,",
    "start": "3575365",
    "end": "3584470"
  },
  {
    "text": "but to- but you can't train a model from positive examples alone. You need negative examples as well.",
    "start": "3584470",
    "end": "3590410"
  },
  {
    "text": "So to get negative examples for each relation, we're basically gonna, um, use pairs that appear together in the corpus.",
    "start": "3590410",
    "end": "3602770"
  },
  {
    "text": "So we have some, um, evidence for them. We have features for them. But, uh, pairs of entities that are unrelated according to the knowledge base.",
    "start": "3602770",
    "end": "3613404"
  },
  {
    "text": "That is they don't appear together in any KB triple in the knowledge base.",
    "start": "3613405",
    "end": "3619405"
  },
  {
    "text": "So these are, uh, pairs of entities that appear to be unrelated,",
    "start": "3619405",
    "end": "3624730"
  },
  {
    "text": "but where we have sentences that they co-occur. Um, and we've written some code that,",
    "start": "3624730",
    "end": "3631705"
  },
  {
    "text": "um, walks through and finds all of those unrelated pairs. And here's some examples: William_Randolph_Hearst, The_Cat's_Meow,",
    "start": "3631705",
    "end": "3639130"
  },
  {
    "text": "Les_McCann, Bobby_Timmons, Shatoy, Ibn_al-Khattab. I don't even know what most of these things are.",
    "start": "3639130",
    "end": "3644965"
  },
  {
    "text": "But they appeared together in a sentence somewhere and yet according to the knowledge base they're not related.",
    "start": "3644965",
    "end": "3650829"
  },
  {
    "text": "So we're going to use these as the negative examples for our classifier.",
    "start": "3650830",
    "end": "3655160"
  },
  {
    "text": "Okay so that was all related to the input side of the prediction problem. On the output side, we have this choice to make about whether we're doing",
    "start": "3655980",
    "end": "3664180"
  },
  {
    "text": "multi-class classification or multi-label classification. Um, and the direction we're gonna go is",
    "start": "3664180",
    "end": "3671140"
  },
  {
    "text": "multi-label classification and part of the motivation for that is that it's actually quite common in the knowledge base",
    "start": "3671140",
    "end": "3678105"
  },
  {
    "text": "for a particular pair of entities to belong to more than one relation. We already saw one example,",
    "start": "3678105",
    "end": "3683145"
  },
  {
    "text": "the one with Cleopatra and has, has_spouse and has_sibling. But there's a lot of them. Uh, and we can write some code to count them up.",
    "start": "3683145",
    "end": "3691470"
  },
  {
    "text": "It turns out that there are some overlaps that are really common and they're kind of intuitive. So, um, it's really common for a pair of",
    "start": "3691470",
    "end": "3699610"
  },
  {
    "text": "entities to belong both to is_a and profession, that makes sense. So it's like Einstein is a physicist,",
    "start": "3699610",
    "end": "3706285"
  },
  {
    "text": "um, and his profession is Physicist. Um, capital and contains, that makes sense as well.",
    "start": "3706285",
    "end": "3711819"
  },
  {
    "text": "Place_of_birth and place_of_death, there's no necessary relationship there. But in practice, it's quite common for people to die in the same place they were born,",
    "start": "3711820",
    "end": "3719530"
  },
  {
    "text": "so that's not too surprising. When we go down further, there are some that are surprising, uh,",
    "start": "3719530",
    "end": "3725520"
  },
  {
    "text": "has_spouse and parents, um, co-workers at least once.",
    "start": "3725520",
    "end": "3730710"
  },
  {
    "text": "Oh, this is interesting, has sibling and has spouse, it turns out Cleopatra's not alone. There is at least seven other cases where those two overlap.",
    "start": "3730710",
    "end": "3739140"
  },
  {
    "text": "Uh, there's one case where we have three relations that overlap;",
    "start": "3739140",
    "end": "3745045"
  },
  {
    "text": "nationality, place_of_birth, and place_of_death. I think that one makes sense. Um, but like this one looks like noise,",
    "start": "3745045",
    "end": "3752530"
  },
  {
    "text": "parents and worked_at, there's two examples of those overlapping,",
    "start": "3752530",
    "end": "3757913"
  },
  {
    "text": "and I think that's just some kind of data error. I don't know what happened there, but I think that's noise.",
    "start": "3757914",
    "end": "3764270"
  },
  {
    "text": "So we're gonna formulate our problem as multi-label classification. This means that we can assign multiple relations to a given entity pair.",
    "start": "3765300",
    "end": "3774520"
  },
  {
    "text": "There's many different ways to do multi-label classification, but the simplest way to do it is,",
    "start": "3774520",
    "end": "3781119"
  },
  {
    "text": "uh, what's called the binary relevance method. And the binary relevance method basically means factor",
    "start": "3781120",
    "end": "3786160"
  },
  {
    "text": "your prediction problem into unrelated binary classification problems.",
    "start": "3786160",
    "end": "3791515"
  },
  {
    "text": "So if you have, in this case, we have 16 relations, right? So what we're gonna do is just factor it into 16 separate binary classification problems.",
    "start": "3791515",
    "end": "3801835"
  },
  {
    "text": "For each relation, we're gonna try to predict, does this entity pair belong to the relation or not?",
    "start": "3801835",
    "end": "3809470"
  },
  {
    "text": "It's just a binary classification for each of the 16 relations. Um, there are smarter ways to do multi-label classification because this way of doing it",
    "start": "3809470",
    "end": "3819220"
  },
  {
    "text": "doesn't take account of the fact that the labels or in this case,",
    "start": "3819220",
    "end": "3824710"
  },
  {
    "text": "the relations can be correlated with each other. Um, it just assumes everything is independent,",
    "start": "3824710",
    "end": "3830995"
  },
  {
    "text": "but it's a very simple way to set things up and it will work well enough for our purposes.",
    "start": "3830995",
    "end": "3836920"
  },
  {
    "text": "So one way to think about our prediction problem is for a candidate KB triple,",
    "start": "3836920",
    "end": "3844224"
  },
  {
    "text": "for a specific relation and entity one and entity two, does it, is it or is it not a valid KB triple?",
    "start": "3844225",
    "end": "3854545"
  },
  {
    "text": "Should we add it to our KB if it's not already there? That's the binary classification problem that we're reducing this problem to.",
    "start": "3854545",
    "end": "3864260"
  },
  {
    "text": "Okay, then there is some code to create datasets. I'm not gonna dwell on this, um,",
    "start": "3865830",
    "end": "3872305"
  },
  {
    "text": "but a dataset basically is gonna combine um, sorry, no.",
    "start": "3872305",
    "end": "3878079"
  },
  {
    "text": "Uh, a dataset is gonna be a bunch of KB triples along with labels that say,",
    "start": "3878080",
    "end": "3884500"
  },
  {
    "text": "uh, what the correct, what the correct binary classification for that KB triple is.",
    "start": "3884500",
    "end": "3890410"
  },
  {
    "text": "Um, the thing to be aware of is that because we're factoring our prediction problem by relation,",
    "start": "3890410",
    "end": "3897085"
  },
  {
    "text": "all of these data structures are gonna be organized into maps, fro- or dictionaries from a relation to some other stuff.",
    "start": "3897085",
    "end": "3906250"
  },
  {
    "text": "So we're gonna have um, these things where it says kbts_by_rel. That basically means a collection of KB triples that have been grouped by relation.",
    "start": "3906250",
    "end": "3916855"
  },
  {
    "text": "So the data structure is a dictionary where the key is a relation name and the value is a list of KBTs.",
    "start": "3916855",
    "end": "3923410"
  },
  {
    "text": "There will be a list of KBTs for this relation and a list of KBTs for that relation and so on.",
    "start": "3923410",
    "end": "3928915"
  },
  {
    "text": "Um, that's this first thing here. The second thing here is an exactly parallel data structure that has the labels.",
    "start": "3928915",
    "end": "3936880"
  },
  {
    "text": "For each KBT, it's gonna say whether that thing should have,",
    "start": "3936880",
    "end": "3942625"
  },
  {
    "text": "uh, a true or a false prediction made for it. And um, this method here build dataset is,",
    "start": "3942625",
    "end": "3952480"
  },
  {
    "text": "um, gonna combine positive and negative data. It's gonna ri- derive the positive data from the KB,",
    "start": "3952480",
    "end": "3960425"
  },
  {
    "text": "and it's gonna derive the negative data in the way I described by looking for pairs of entities that co-occur in the corpus,",
    "start": "3960425",
    "end": "3968685"
  },
  {
    "text": "but don't co-occur in the knowledge base. It will include both positive and negative data.",
    "start": "3968685",
    "end": "3973780"
  },
  {
    "text": "There's a parameter that lets you control the sampling rate. The default sampling rate is 0.1 because we have",
    "start": "3973780",
    "end": "3980095"
  },
  {
    "text": "about 10 times as much negative data as we do positive data. So using the sampling ra- sampling rate will give you a roughly balanced dataset.",
    "start": "3980095",
    "end": "3988704"
  },
  {
    "text": "Um, and it also lets you specify a random seed so that you can have reproducible results if you want. Yeah?",
    "start": "3988705",
    "end": "3995605"
  },
  {
    "text": "Um, what do we do with overloaded words like I'm playing the guitar, someone's playing soccer.",
    "start": "3995605",
    "end": "4008948"
  },
  {
    "text": "Or like anything of the sort that could be I guess confused. [NOISE].",
    "start": "4008948",
    "end": "4015630"
  },
  {
    "text": "Um, I'm not sure if I understand the question. Are, are you talking about words that you might use in the feature representation as predictors?",
    "start": "4015630",
    "end": "4023490"
  },
  {
    "text": "Um, I guess so. Like I'm just thinking like, I guess you can tell me whether or not this is an issue.",
    "start": "4023490",
    "end": "4029130"
  },
  {
    "text": "When I think of sorting these triplets by relation, um, I can see the word play as being used for either playing",
    "start": "4029130",
    "end": "4036690"
  },
  {
    "text": "an instrument or playing a sport which are very different things. Yeah. And so A, is a problem,",
    "start": "4036690",
    "end": "4044040"
  },
  {
    "text": "I guess and then B, if that is a problem how do you, I guess, counter that?",
    "start": "4044040",
    "end": "4050140"
  },
  {
    "text": "Um, so I think you're asking about, um, the, the words that you would use to tr- the,",
    "start": "4053690",
    "end": "4061335"
  },
  {
    "text": "the way you'd construct a feature representation um, to try to make a prediction and do you need to account for ambiguity?",
    "start": "4061335",
    "end": "4070275"
  },
  {
    "text": "Do you need to resolve ambiguities like that one in constructing the feature representation?",
    "start": "4070275",
    "end": "4075329"
  },
  {
    "text": "Um, that's something interesting you could play with. I think the typical answer is no. We don't typically try to do word sense",
    "start": "4075330",
    "end": "4083160"
  },
  {
    "text": "disambiguation before constructing a feature representation. Um, but it's possible that that could yield some,",
    "start": "4083160",
    "end": "4091275"
  },
  {
    "text": "that it could yield some benefits. Um, I don't know, do have a- [inaudible] in the knowledge base if a,",
    "start": "4091275",
    "end": "4097560"
  },
  {
    "text": "we would hope that the knowledge base distinguish those two senses of play. It might or it might not.",
    "start": "4097560",
    "end": "4103335"
  },
  {
    "text": "But we hope that it'll work with some different symbols and then it will go to two different relations.",
    "start": "4103335",
    "end": "4108435"
  },
  {
    "text": "Now, the data that you've learned on, the thing that you perform the feature representations from, it's like complete chaos.",
    "start": "4108435",
    "end": "4114060"
  },
  {
    "text": "But we would hope that the relationship [inaudible] that. Are, are you imagining that play is a relation that appears in your, in your KB?",
    "start": "4114060",
    "end": "4121650"
  },
  {
    "text": "Yeah. Okay, I missed that. I missed that. Yeah, the, the knowledge base should if it's,",
    "start": "4121650",
    "end": "4132060"
  },
  {
    "text": "if it's a well-constructed knowledge base, it should resolve those ambiguities.",
    "start": "4132060",
    "end": "4137115"
  },
  {
    "text": "Um, part of what we're aiming for with the knowledge base is that it's completely unambiguous.",
    "start": "4137115",
    "end": "4143009"
  },
  {
    "text": "That, um, I kind of spoke about this a little bit earlier in connection with the entities that when we have an,",
    "start": "4143010",
    "end": "4149880"
  },
  {
    "text": "uh, um, an entity ID that shows up in the knowledge base, we definitely want that to be unambiguous.",
    "start": "4149880",
    "end": "4155279"
  },
  {
    "text": "We wanna have for New York City, we wanna have an unambiguous entity ID in our knowledge base.",
    "start": "4155280",
    "end": "4162495"
  },
  {
    "text": "So there's no question about which New York we're talking about. The sa- the same is true for the relations that we don't",
    "start": "4162495",
    "end": "4168450"
  },
  {
    "text": "want the relations to be ambiguous in any way.",
    "start": "4168450",
    "end": "4172750"
  },
  {
    "text": "Okay. Let me keep going. Um, we wanna talk a little bit about the approach to evaluation.",
    "start": "4179140",
    "end": "4187520"
  },
  {
    "text": "And it's a really good idea to define the way you're gonna evaluate your systems before you start building systems.",
    "start": "4187520",
    "end": "4192890"
  },
  {
    "text": "It's kind of the same idea as test-driven development in software engineering. So first, you set up a test harness that allows you to measure performance,",
    "start": "4192890",
    "end": "4201185"
  },
  {
    "text": "and then you can start building your system and iterating on performance. Having that test harness setup in advance means that you",
    "start": "4201185",
    "end": "4207139"
  },
  {
    "text": "can sort of measure progress as you go. And actually, a great first step is to build",
    "start": "4207140",
    "end": "4212585"
  },
  {
    "text": "a random classifier that only takes five minutes to write but gives you sort of a, a, a baseline, uh,",
    "start": "4212585",
    "end": "4219710"
  },
  {
    "text": "on which you can begin to measure progress. A good approach to evaluation typically starts with splitting the data into different pieces.",
    "start": "4219710",
    "end": "4227570"
  },
  {
    "text": "And in this case, I'm advocating a three-way split into a tiny split,",
    "start": "4227570",
    "end": "4233344"
  },
  {
    "text": "a train split, and a dev split. So the tiny split is only 1% of your data.",
    "start": "4233345",
    "end": "4238670"
  },
  {
    "text": "It's gonna be really small, but it's also going to be really fast to train and test on the tiny split.",
    "start": "4238670",
    "end": "4244670"
  },
  {
    "text": "And the merit of having a tiny split is that you can do your early development on this tiny split,",
    "start": "4244670",
    "end": "4250040"
  },
  {
    "text": "and it can help you like just sort of flush out bugs in your code, like just make sure your code is running properly before you scale",
    "start": "4250040",
    "end": "4257090"
  },
  {
    "text": "up to training on the big test training split and testing on the dev split, which can take a lot longer to run.",
    "start": "4257090",
    "end": "4263525"
  },
  {
    "text": "So I think that's a great methodological practice,uh, that I encourage you to use in other places.",
    "start": "4263525",
    "end": "4268715"
  },
  {
    "text": "And the train split is gonna be about three-quarters of our data. The dev split is gonna be about a quarter of our data. That's a pretty typical setup.",
    "start": "4268715",
    "end": "4274850"
  },
  {
    "text": "And during development, you'll typically train on the train split and test on the dev split. There's also, we've also held out a test split that we're gonna use for the bake-off.",
    "start": "4274850",
    "end": "4284030"
  },
  {
    "text": "So you don't have access to that yet but it exists. And we're, you know, keeping it in a, in a vault deep underground for now.",
    "start": "4284030",
    "end": "4291155"
  },
  {
    "text": "Um, I'm gonna skip this part. There's some discussion of how to split,",
    "start": "4291155",
    "end": "4298160"
  },
  {
    "text": "but we want to split both the knowledge base and the corpus. And there's some discussion of how to try to do that split",
    "start": "4298160",
    "end": "4304040"
  },
  {
    "text": "so it does align well with each other as, as much as possible, but I'm gonna skip that for now.",
    "start": "4304040",
    "end": "4310579"
  },
  {
    "text": "Um, then we wanna talk about evaluation metrics a little bit. So this is a, we're factoring our problem into 16 binary classification tasks,",
    "start": "4310580",
    "end": "4321784"
  },
  {
    "text": "one for each relation. Because it's binary classification, evaluation metrics are pretty straightforward.",
    "start": "4321785",
    "end": "4328070"
  },
  {
    "text": "This is, uh, an arena where it's sort of well understood what the best evaluation metrics are. Typically, precision and recall are what you look at,",
    "start": "4328070",
    "end": "4335840"
  },
  {
    "text": "particularly when there's an unbalanced label distribution as there is for this problem.",
    "start": "4335840",
    "end": "4340905"
  },
  {
    "text": "So we're gonna look at precision and recall. But it can be really helpful when developing a system",
    "start": "4340905",
    "end": "4347199"
  },
  {
    "text": "to have a single summary statistic on which to hill climb. So to combine precision and recall into one statistic,",
    "start": "4347200",
    "end": "4355585"
  },
  {
    "text": "the most common solution is to use F measure, which is just the harmonic mean of precision and recall.",
    "start": "4355585",
    "end": "4362680"
  },
  {
    "text": "Usually, people use F1, which gives equal weight to precision and recall.",
    "start": "4362680",
    "end": "4368795"
  },
  {
    "text": "For this application, though, I think you can make an argument that precision matters more than recall.",
    "start": "4368795",
    "end": "4374825"
  },
  {
    "text": "The goal here is to identify new KB triples that we can add to our knowledge base.",
    "start": "4374825",
    "end": "4380210"
  },
  {
    "text": "And we don't wanna be putting garbage into our knowledge base. It's better to miss something than to put garbage into our knowledge base.",
    "start": "4380210",
    "end": "4387815"
  },
  {
    "text": "So we wanna give more weight to precision than we do to recall. And the way to do that is,",
    "start": "4387815",
    "end": "4393380"
  },
  {
    "text": "um, using the F_ 0.5, score which gives, it's a little bit counter-intuitive,",
    "start": "4393380",
    "end": "4398540"
  },
  {
    "text": "but gives twice as much weight to precision than it does to recall. Um, and SKLearn makes it easy to, to calculate that.",
    "start": "4398540",
    "end": "4406114"
  },
  {
    "text": "We also want to have a summary statistic that averages across labels. So we'll compute precision, recall,",
    "start": "4406115",
    "end": "4413690"
  },
  {
    "text": "and F_0.5 for each relation separately, but we wanna have a way to combine it all into one summary statistic,",
    "start": "4413690",
    "end": "4420289"
  },
  {
    "text": "an average, and the only question is whether to do a micro-average or a macro-average. We're gonna do a macro-average which gives equal weight to each relation,",
    "start": "4420289",
    "end": "4428855"
  },
  {
    "text": "because it's not really significant. It doesn't really matter how many instances happen in this dataset to fall into each relation.",
    "start": "4428855",
    "end": "4436475"
  },
  {
    "text": "So we're gonna treat each relation as equally important. Um, so there's some code that helps you actually run these evaluations.",
    "start": "4436475",
    "end": "4444770"
  },
  {
    "text": "Um, we run it here on a random classifier. And what you see when running on a random classifier is that",
    "start": "4444770",
    "end": "4451220"
  },
  {
    "text": "precision is bad almost everywhere, which kind of makes sense. Uh, but recall is always right around 50%.",
    "start": "4451220",
    "end": "4458585"
  },
  {
    "text": "This random classifier is just flipping a coin. It's predicting true half the time. So it kind of makes sense that if",
    "start": "4458585",
    "end": "4467164"
  },
  {
    "text": "there actually is a true lab- when the label is actually true, we have about a 50-50 chance of getting that,",
    "start": "4467165",
    "end": "4473960"
  },
  {
    "text": "and that's what recall is measuring. But we're seeing true all the time and most of the time,",
    "start": "4473960",
    "end": "4479780"
  },
  {
    "text": "that's not the right label which is why precision is quite low. So the macro average precision is 8%,",
    "start": "4479780",
    "end": "4486515"
  },
  {
    "text": "the macro-average recall is 51%, the macro average F-score is 10%. It's really low.",
    "start": "4486515",
    "end": "4492980"
  },
  {
    "text": "It's much closer to the precision than it is to the recall, which is a characteristic of F-measure.",
    "start": "4492980",
    "end": "4499100"
  },
  {
    "text": "It tends to be pessimistic, uh, much closer to the lower of precision or recall.",
    "start": "4499100",
    "end": "4506100"
  },
  {
    "text": "Um, and then the next thing I do is create a simple baseline model, which, uh, I'll let you, uh,",
    "start": "4506530",
    "end": "4513620"
  },
  {
    "text": "look at it on your own, but the basic idea with a simple baseline model. It's not even a learned model.",
    "start": "4513620",
    "end": "4519080"
  },
  {
    "text": "It's not, uh, it's not a machine-learned model. Instead, all we do is look through the examples of, uh,",
    "start": "4519080",
    "end": "4526730"
  },
  {
    "text": "tied to each relation and we find the most common phrase that occurs between the two entity mentions.",
    "start": "4526730",
    "end": "4534755"
  },
  {
    "text": "We count up what are the three most common phrases for each relation, and then we just use exact matches to one of those three phrases as the predictor.",
    "start": "4534755",
    "end": "4546395"
  },
  {
    "text": "Um, so we find, for example, that for the, um, there was a- there was a particularly good one,",
    "start": "4546395",
    "end": "4555470"
  },
  {
    "text": "was it parents, yeah. So look at the parents relation. For the parents relation,",
    "start": "4555470",
    "end": "4560705"
  },
  {
    "text": "the most common phrases are comma son of, and, and comma in the forward direction.",
    "start": "4560705",
    "end": "4566915"
  },
  {
    "text": "And in the reverse direction, and comma, and and his son. Um, so you can,",
    "start": "4566915",
    "end": "4572735"
  },
  {
    "text": "like those sort of make sense. You're certainly seeing the word son in there, makes sense.",
    "start": "4572735",
    "end": "4578360"
  },
  {
    "text": "You also see that, um, punctuation and stopwords are really common.",
    "start": "4578360",
    "end": "4585815"
  },
  {
    "text": "So it's probably a bad idea to drop those in some other NLP tasks.",
    "start": "4585815",
    "end": "4591350"
  },
  {
    "text": "People advocate dropping stopwords and punctuation. You probably don't wanna do that here. Um, you also see the comma by itself,",
    "start": "4591350",
    "end": "4599570"
  },
  {
    "text": "a bare comma shows up almost everywhere. Almost every one of these relations has comma as one of its most frequent middles.",
    "start": "4599570",
    "end": "4607594"
  },
  {
    "text": "So comma is significant, but it's extremely ambiguous. It could indicate almost any relation.",
    "start": "4607595",
    "end": "4614255"
  },
  {
    "text": "Um, we can evaluate how this does and it does significantly better.",
    "start": "4614255",
    "end": "4621784"
  },
  {
    "text": "The summary statistic is 11.5, so that's the macro averaged F-score,",
    "start": "4621785",
    "end": "4626930"
  },
  {
    "text": "significantly better than the random guesser. But on the other hand, still really terrible, right? The random guesser was like 9%,",
    "start": "4626930",
    "end": "4633545"
  },
  {
    "text": "now we're up to 11.5%. It definitely helped, but it's still really terrible.",
    "start": "4633545",
    "end": "4639275"
  },
  {
    "text": "Um, and actually, you should have modest expectations for how we're gonna be able to do on this task on this dataset.",
    "start": "4639275",
    "end": "4647840"
  },
  {
    "text": "We're gonna have trouble getting great precision because the KB is incomplete.",
    "start": "4647840",
    "end": "4655610"
  },
  {
    "text": "Um, there could be some relational triples that actually are true in real life and there are sentences in the corpus that tell us that they're true,",
    "start": "4655610",
    "end": "4665210"
  },
  {
    "text": "but we can't measure that they're true because they're not in the KB. Um, that's the KB being incomplete.",
    "start": "4665210",
    "end": "4672289"
  },
  {
    "text": "And we're also going to have trouble getting great recall because there could be some relations that are true and are in the KB,",
    "start": "4672290",
    "end": "4680990"
  },
  {
    "text": "but there's no evidence of it in the corpus. Both the KB and the corpus are kind of small,",
    "start": "4680990",
    "end": "4687170"
  },
  {
    "text": "and that's gonna put limits on how good the precision and recall we can achieve will be.",
    "start": "4687170",
    "end": "4693815"
  },
  {
    "text": "Nevertheless, the next step in this journey is to apply a real machine learning model to this problem.",
    "start": "4693815",
    "end": "4700790"
  },
  {
    "text": "And in the second notebook, uh, which is linked from the, from the course webpage you'll see an example of doing that.",
    "start": "4700790",
    "end": "4706580"
  },
  {
    "text": "So using a bag of words feature representation, logistic regression classifier, the most vanilla setup possible,",
    "start": "4706580",
    "end": "4713675"
  },
  {
    "text": "and even that very vanilla setup gets to a summary statistic of, if I remember 55%,",
    "start": "4713675",
    "end": "4719870"
  },
  {
    "text": "which is vastly better than the simple baseline model. So that will start you down the road.",
    "start": "4719870",
    "end": "4725315"
  },
  {
    "text": "That vanilla setup, um, leaves lots of room for improvement. And one of the things you'll be looking at in homework 3 and in",
    "start": "4725315",
    "end": "4732470"
  },
  {
    "text": "a bake-off is how to do much better on that. All right. Thank you.",
    "start": "4732470",
    "end": "4738540"
  }
]