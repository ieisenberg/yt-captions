[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "today's talk is about certain aspects of the execution model used by the mill architecture the mill is a family of CPU",
    "start": "10800",
    "end": "20520"
  },
  {
    "text": "designs family in the sense of the 360 a",
    "start": "20520",
    "end": "26869"
  },
  {
    "start": "27000",
    "end": "185000"
  },
  {
    "text": "due to the advances in the architecture the it's a commercial product or we hope",
    "start": "30169",
    "end": "37170"
  },
  {
    "text": "it will be it's still in development and it offers a 10x power performance",
    "start": "37170",
    "end": "43199"
  },
  {
    "text": "advantage over existing architectures this is an architectural advance it is not a circuit advanced it is not a fab",
    "start": "43199",
    "end": "50399"
  },
  {
    "text": "advanced we use exactly the same run of the fab circuits and standard rules as",
    "start": "50399",
    "end": "58050"
  },
  {
    "text": "anybody else it is an architectural advantage it does so without requiring a",
    "start": "58050",
    "end": "63239"
  },
  {
    "text": "rewrite of your program it does so without requiring multiple core or multiprogramming that you can of course",
    "start": "63239",
    "end": "71040"
  },
  {
    "text": "multi-core multi program Mills just like anything else and it's just as much a pain in the butt on the middle as it is",
    "start": "71040",
    "end": "76140"
  },
  {
    "text": "on anybody else this particular talk I have to back up a little bit and speak a",
    "start": "76140",
    "end": "84270"
  },
  {
    "text": "little bit do describe the way data is move back and forth internally in the",
    "start": "84270",
    "end": "89370"
  },
  {
    "text": "machine the mill has no general registers it uses a different device and I have to explain that a bit this was",
    "start": "89370",
    "end": "95790"
  },
  {
    "text": "actually covered in considerably greater depth roughly a year ago may or",
    "start": "95790",
    "end": "101460"
  },
  {
    "text": "thereabouts-- here and the complete talk of that is both available on this read",
    "start": "101460",
    "end": "107280"
  },
  {
    "text": "the 380 website and on ours and a much greater detail at other locations given",
    "start": "107280",
    "end": "115500"
  },
  {
    "text": "that as a background I'll talk a bit about how phasing permits us to triple the effective ILP instruction level",
    "start": "115500",
    "end": "122520"
  },
  {
    "text": "parallelism of existing codes how we are able to combine the computational",
    "start": "122520",
    "end": "129690"
  },
  {
    "text": "capacity of the Machine so as to support novel operations that a conventional",
    "start": "129690",
    "end": "134730"
  },
  {
    "text": "machine cannot do and how that gets used",
    "start": "134730",
    "end": "140400"
  },
  {
    "text": "in order to avoid the problems using condition codes to indicate a boolean values I lastly or",
    "start": "140400",
    "end": "149370"
  },
  {
    "text": "speak briefly on the subject of how n way branching is performed and how but",
    "start": "149370",
    "end": "155639"
  },
  {
    "text": "when you have multiple calls in a single instruction how these cascade this is a",
    "start": "155639",
    "end": "163230"
  },
  {
    "text": "series of talks that this is the six of them all the prior talks videos are",
    "start": "163230",
    "end": "168329"
  },
  {
    "text": "available on our website at that address those of you are taking the class for",
    "start": "168329",
    "end": "174540"
  },
  {
    "text": "credit your homework assignment is to review the material at that location",
    "start": "174540",
    "end": "180359"
  },
  {
    "text": "there will be a test and a caution this",
    "start": "180359",
    "end": "188609"
  },
  {
    "start": "185000",
    "end": "270000"
  },
  {
    "text": "talk is a gross oversimplification the guts inside a CPU are fiendishly",
    "start": "188609",
    "end": "194159"
  },
  {
    "text": "complicated and depend on hardware and other details that cannot be covered in",
    "start": "194159",
    "end": "199439"
  },
  {
    "text": "to talk of this nature instead I try to convey an intuitive understanding",
    "start": "199439",
    "end": "205040"
  },
  {
    "text": "suitable for a non-specialist your assumed to have some idea what goes on in CPU but we're not going to get in any",
    "start": "205040",
    "end": "212639"
  },
  {
    "text": "great detail I'm open to questions after the talk and I can go into all the detail you'll ever want but the talk",
    "start": "212639",
    "end": "219449"
  },
  {
    "text": "itself doesn't do that reality is much more complicated than this chocolate",
    "start": "219449",
    "end": "224579"
  },
  {
    "text": "again we try not to oversimplify but sometimes so a few words on the belt as",
    "start": "224579",
    "end": "232579"
  },
  {
    "text": "I said that the machine has got no general registers but you do have to get the result from one add into the",
    "start": "232579",
    "end": "239449"
  },
  {
    "text": "multiplied that you have to use the next data with and that requires a communication device the mill is the",
    "start": "239449",
    "end": "246780"
  },
  {
    "text": "first of a new category of processors called a belt machine there are numerous",
    "start": "246780",
    "end": "252090"
  },
  {
    "text": "other categories their stack machines and accumulator machines and general",
    "start": "252090",
    "end": "257159"
  },
  {
    "text": "register machines and so forth these are categories is lots of different architectures within a category there's",
    "start": "257159",
    "end": "263550"
  },
  {
    "text": "lots of possible belt machines the mill is one it is a point in that design space the communication device looks",
    "start": "263550",
    "end": "273479"
  },
  {
    "start": "270000",
    "end": "422000"
  },
  {
    "text": "like a conveyor belt it is a fixed length 50 assume that that",
    "start": "273479",
    "end": "280150"
  },
  {
    "text": "is a set of values sitting on the belt a functional unit can read any position in",
    "start": "280150",
    "end": "286900"
  },
  {
    "text": "that 50 pulling values off it down into the functional unit new results always",
    "start": "286900",
    "end": "295090"
  },
  {
    "text": "drop on the front of the belt unconditionally you do not specify a",
    "start": "295090",
    "end": "301120"
  },
  {
    "text": "destination for your computation however it's a fixed length so when you drop a",
    "start": "301120",
    "end": "307480"
  },
  {
    "text": "new one on the front well that pushes the oldest off the back and it is gone permanently the functional units there",
    "start": "307480",
    "end": "317650"
  },
  {
    "text": "there are many the mill is a wide issue machine in the sense that a single",
    "start": "317650",
    "end": "322870"
  },
  {
    "text": "instruction can contain many operations like a VLIW does if fair warning a",
    "start": "322870",
    "end": "329500"
  },
  {
    "text": "terminological trap here most people are used to thinking that an ad is an instruction once you're in the white",
    "start": "329500",
    "end": "335260"
  },
  {
    "text": "issue world and add is not an instruction and that is an operation and there may be a ton of other operations",
    "start": "335260",
    "end": "341830"
  },
  {
    "text": "in the same instruction so in this case you can have three different functional units which will be independently",
    "start": "341830",
    "end": "348520"
  },
  {
    "text": "grabbing values off of the belt and in due course when those functional units",
    "start": "348520",
    "end": "354790"
  },
  {
    "text": "are ready to retire and a result all of their results drop onto the front of the",
    "start": "354790",
    "end": "360880"
  },
  {
    "text": "belt and push corresponding numbers of operations off the back addressing into",
    "start": "360880",
    "end": "367720"
  },
  {
    "text": "the belt is addressed by relative position so this for example might be an",
    "start": "367720",
    "end": "373720"
  },
  {
    "text": "assembler language operation this has ADD b3 Bell position three do bell position five note no destination that",
    "start": "373720",
    "end": "381070"
  },
  {
    "text": "it results are implicitly dropped on the front the B 3 and B 5 are there if you",
    "start": "381070",
    "end": "390370"
  },
  {
    "text": "think about it you realize that b3 is the fourth most recent value to have",
    "start": "390370",
    "end": "396730"
  },
  {
    "text": "dropped to the belt and b5 is the six months recent value to have dropped to",
    "start": "396730",
    "end": "402280"
  },
  {
    "text": "the belt so this is temporal addressing it is not",
    "start": "402280",
    "end": "407680"
  },
  {
    "text": "spatial addressing you're not saying put something in our six and it stays in our sex this says pick up the value",
    "start": "407680",
    "end": "415860"
  },
  {
    "text": "indicated by the temporal order in which you have got originally placed upon the",
    "start": "415860",
    "end": "421090"
  },
  {
    "text": "belt so a consequence of this is that every time you do a new drop on the",
    "start": "421090",
    "end": "427360"
  },
  {
    "start": "422000",
    "end": "471000"
  },
  {
    "text": "front everybody's temporal address changes so that for example if we want",
    "start": "427360",
    "end": "432760"
  },
  {
    "text": "to reference that value eight in red there that is b3 now but as soon as a",
    "start": "432760",
    "end": "439270"
  },
  {
    "text": "few more values drop onto the belt b3 now refers to somebody else and that",
    "start": "439270",
    "end": "445090"
  },
  {
    "text": "valuators now be six this is a truly awful process to attempt to kite track",
    "start": "445090",
    "end": "452590"
  },
  {
    "text": "of by hand the mill is not designed to be an assembly language target however",
    "start": "452590",
    "end": "458320"
  },
  {
    "text": "this is trivial for a compiler to keep track of and it is no more difficult and",
    "start": "458320",
    "end": "464500"
  },
  {
    "text": "the problems involved in for example that register coloring and similar things for a compiler now so much feel",
    "start": "464500",
    "end": "472810"
  },
  {
    "start": "471000",
    "end": "1004000"
  },
  {
    "text": "about talking about going to talk about phasing operations connect through data",
    "start": "472810",
    "end": "483670"
  },
  {
    "text": "flow paths such that the result of one operation is the input to a next and the",
    "start": "483670",
    "end": "489250"
  },
  {
    "text": "chain of such items is a data flow frequently a data tree but for most of",
    "start": "489250",
    "end": "496240"
  },
  {
    "text": "what I can show on a slide you can only fit so much on a slide we're going to be",
    "start": "496240",
    "end": "501250"
  },
  {
    "text": "looking at linear data flows rather than treats a consequence of the way the mill",
    "start": "501250",
    "end": "507820"
  },
  {
    "text": "is organized is that we are in fact able to execute faster than then the clock",
    "start": "507820",
    "end": "513250"
  },
  {
    "text": "rate would appear to make possible I want to emphasize that this is a programming model the underlying reality",
    "start": "513250",
    "end": "521490"
  },
  {
    "text": "does not have a time tunnel inside it there is no black hole and spinning",
    "start": "521490",
    "end": "528220"
  },
  {
    "text": "black hole that permits you to do multiple things at once um so I will be",
    "start": "528220",
    "end": "534730"
  },
  {
    "text": "explaining a little bit about how the hardware provides a solution but",
    "start": "534730",
    "end": "539850"
  },
  {
    "text": "from the viewpoint of the running program effectively we get a significant speed up and you'll see how now a data",
    "start": "539850",
    "end": "550620"
  },
  {
    "text": "flow is a chain of operations which are dependent things if there is no gap such",
    "start": "550620",
    "end": "555930"
  },
  {
    "text": "the ad goes directly to the model player goes directly the subtract you know goes directly to the store unit with no time",
    "start": "555930",
    "end": "561480"
  },
  {
    "text": "gaps at all the fastest speed determine is determined by the latency of the",
    "start": "561480",
    "end": "567540"
  },
  {
    "text": "individual operations an ad takes one cycle and multiply Texas recycles the",
    "start": "567540",
    "end": "572550"
  },
  {
    "text": "subtract X 1 cycles well you know that the fastest you're going to get is this going to take five cycles to go through",
    "start": "572550",
    "end": "577890"
  },
  {
    "text": "all about because its immediate one after another this limit based on the",
    "start": "577890",
    "end": "584790"
  },
  {
    "text": "propagation delay of the data who has to be passed through is analogous to what",
    "start": "584790",
    "end": "591000"
  },
  {
    "text": "happens in on the the propagation of sound in a medium like air because the",
    "start": "591000",
    "end": "599310"
  },
  {
    "text": "speed of sound is determined by how fast one molecule can juggle up the next molecule could juggle up to the next",
    "start": "599310",
    "end": "605700"
  },
  {
    "text": "molecule and that's determined by the characteristics of the medium but there",
    "start": "605700",
    "end": "611010"
  },
  {
    "text": "is an upper limit to it which is identified in aeronautics as a Mach",
    "start": "611010",
    "end": "616830"
  },
  {
    "text": "number after Ernst Mach on and Mach number one is the speed of sound and by",
    "start": "616830",
    "end": "623040"
  },
  {
    "text": "analogy Mach number one is the speed that a computer can execute a data flow",
    "start": "623040",
    "end": "629430"
  },
  {
    "text": "with no gaps in the middle just one thing going directly to the next to the rec to the next you might think that",
    "start": "629430",
    "end": "635820"
  },
  {
    "text": "Mach 1 cannot be exceeded and in fact i'm here to show you that it can be just",
    "start": "635820",
    "end": "641460"
  },
  {
    "text": "in fact as you can do it in airplanes now for example let's take this as a",
    "start": "641460",
    "end": "646860"
  },
  {
    "text": "little piece of source code we've got a big constant there that's much too big",
    "start": "646860",
    "end": "652050"
  },
  {
    "text": "to be done as intermediate in that and add operation I'm assuming a load store",
    "start": "652050",
    "end": "657270"
  },
  {
    "text": "architecture here not something in which like an x86 where you have but funny",
    "start": "657270",
    "end": "664110"
  },
  {
    "text": "extensions and huge instructions that can carry big constants but think of your typical risk type in",
    "start": "664110",
    "end": "670120"
  },
  {
    "text": "struction set and the machine code of this is well you want to have to have",
    "start": "670120",
    "end": "675550"
  },
  {
    "text": "some kind of an operation that builds a constant for you sometimes in some machines this is more than one operation",
    "start": "675550",
    "end": "681670"
  },
  {
    "text": "in order to put it up in pieces other times is some other way to do it I'll assume the presence of a constant eye",
    "start": "681670",
    "end": "687790"
  },
  {
    "text": "operation there's a functioning unit that produces a constant then that has to be fed into an ad like that and that",
    "start": "687790",
    "end": "697570"
  },
  {
    "text": "in turn will have to be crossing a cycle boundary because we had to the first to get the constant then one cycle later",
    "start": "697570",
    "end": "704320"
  },
  {
    "text": "the bad data value is available to the adder and now once the adders done its",
    "start": "704320",
    "end": "710350"
  },
  {
    "text": "thing that's going to be feed into a store unit and there'll be another cycle",
    "start": "710350",
    "end": "715660"
  },
  {
    "text": "boundary there the dotted pink line in all of these slides means a Psychlo",
    "start": "715660",
    "end": "720790"
  },
  {
    "text": "boundary anytime you see something flowing across there it took an extra cycle now that's the basic model in the",
    "start": "720790",
    "end": "729850"
  },
  {
    "text": "vliw which is a wide issue machine you can issue several operations in parallel",
    "start": "729850",
    "end": "735970"
  },
  {
    "text": "in fact you might be able to have a constant and add in a store all in one instruction which fairly typical",
    "start": "735970",
    "end": "741190"
  },
  {
    "text": "arrangement for viola deputies so if that's our same source code the machine",
    "start": "741190",
    "end": "746770"
  },
  {
    "text": "code might look like this where an underscore their means all one instruction so this is one instruction",
    "start": "746770",
    "end": "754779"
  },
  {
    "text": "with three operations in it we might think that well you could have a Const",
    "start": "754779",
    "end": "763290"
  },
  {
    "text": "feeding to an ad feeding into a store",
    "start": "763290",
    "end": "769560"
  },
  {
    "text": "but unfortunately you can't do that the",
    "start": "769560",
    "end": "775779"
  },
  {
    "text": "whole cycle is taken up by the constant the whole cycles taking up at the ad and arrows don't go upwards in data flow",
    "start": "775779",
    "end": "784029"
  },
  {
    "text": "they only go downward so anytime you see an arrow going upward that means this is something that is physically impossible",
    "start": "784029",
    "end": "791010"
  },
  {
    "text": "those paths are impossible so what do you do the vliw is going to",
    "start": "791010",
    "end": "801690"
  },
  {
    "text": "have to take three cycles just like risk would have to take three cycles the",
    "start": "801690",
    "end": "807000"
  },
  {
    "text": "misfits each instruction cycle in two phases these are not subplots we don't",
    "start": "807000",
    "end": "814920"
  },
  {
    "text": "actually have a whole bunch of little clocks inside the big clock there's only one big clock so phasing is a conceptual",
    "start": "814920",
    "end": "823680"
  },
  {
    "text": "model that source coder again will",
    "start": "823680",
    "end": "829620"
  },
  {
    "text": "produce in fact the same machine code as the vliw uses constant and store all in",
    "start": "829620",
    "end": "835709"
  },
  {
    "text": "one instruction the underlined recall means that this is in one instruction there's our cycle boundaries the",
    "start": "835709",
    "end": "844350"
  },
  {
    "text": "constituent it happens there that feeds the ad because operations in different",
    "start": "844350",
    "end": "852690"
  },
  {
    "text": "phases can be part of the same data flow",
    "start": "852690",
    "end": "857870"
  },
  {
    "text": "there is a phase boundary between the two but not a cycle boundary and there's",
    "start": "857870",
    "end": "864570"
  },
  {
    "text": "a phase boundary between the ad and the store now this is the logical view",
    "start": "864570",
    "end": "876380"
  },
  {
    "text": "physical reality is different that's I used to say that when I was in the 60s",
    "start": "876380",
    "end": "883560"
  },
  {
    "text": "but anyway phases execute in sequence as",
    "start": "883560",
    "end": "890339"
  },
  {
    "text": "a data flow and each operation in the",
    "start": "890339",
    "end": "896130"
  },
  {
    "text": "instruction set of the machine is associated by definition to one",
    "start": "896130",
    "end": "901650"
  },
  {
    "text": "particular phase the results of an OP",
    "start": "901650",
    "end": "908270"
  },
  {
    "text": "that each operation can have as as input results from a prior phase here are your",
    "start": "908270",
    "end": "917070"
  },
  {
    "text": "phases the reader handles those things which have no",
    "start": "917070",
    "end": "925199"
  },
  {
    "text": "inputs constants values read from Specter from spec regs with from the",
    "start": "925199",
    "end": "931199"
  },
  {
    "text": "scratchpad scratch pad we won't address but it's temporary storage area up phase",
    "start": "931199",
    "end": "937649"
  },
  {
    "text": "is all your ordinary ops your adds and subtracts and your loads and your this is and that's so up for anything in op",
    "start": "937649",
    "end": "945149"
  },
  {
    "text": "phase can see see anything that was produced in reader fates in particular in our example here add you can see the",
    "start": "945149",
    "end": "951750"
  },
  {
    "text": "result of const call phase function calls pic is a equivalent to the ? colon",
    "start": "951750",
    "end": "964889"
  },
  {
    "text": "operator in NC it selects one or two based on the selector value has it phase",
    "start": "964889",
    "end": "970889"
  },
  {
    "text": "all of its own and writer phase are those things which are pure sinks and",
    "start": "970889",
    "end": "976160"
  },
  {
    "text": "who accept inputs but have no output in particular stores branches and things",
    "start": "976160",
    "end": "982139"
  },
  {
    "text": "like that so those are your basic phases air Constad and store which we had in",
    "start": "982139",
    "end": "990029"
  },
  {
    "text": "our example code the constants in reader phase so it can pass data to the ad",
    "start": "990029",
    "end": "995100"
  },
  {
    "text": "which is inop phase and the ad can pass data from up phase 2 writer phase if the",
    "start": "995100",
    "end": "1002660"
  },
  {
    "text": "phases happen to be the same you can't pass through but you can pass to a subsequent phase in the phase order",
    "start": "1002660",
    "end": "1009949"
  },
  {
    "start": "1004000",
    "end": "1136000"
  },
  {
    "text": "listed I just described in the actual implementation one ups from one",
    "start": "1009949",
    "end": "1017690"
  },
  {
    "text": "instruction are not issued all together the way they would be in the vliw that",
    "start": "1017690",
    "end": "1024350"
  },
  {
    "text": "vliw if it said Const add store all of those are happening all at once in the same cycle that's what a VLIW does what",
    "start": "1024350",
    "end": "1032058"
  },
  {
    "text": "it is not true in a moment instead the ops from a single operator instruction",
    "start": "1032059",
    "end": "1038720"
  },
  {
    "text": "are in fact issued over three different cycles",
    "start": "1038720",
    "end": "1044740"
  },
  {
    "text": "if these are my three instructions in this cycle this is instruction what",
    "start": "1044970",
    "end": "1053370"
  },
  {
    "text": "instructions to instructions free and order in the program in this cycle the reader phase wolf of instruction one",
    "start": "1053370",
    "end": "1061049"
  },
  {
    "text": "will be the first thing that happens then because the cycle boundary and",
    "start": "1061049",
    "end": "1066320"
  },
  {
    "text": "instruction ones up phase execute at the same time as the reader phase of",
    "start": "1066320",
    "end": "1073409"
  },
  {
    "text": "instruction to another cycle boundary instruction one is reached and is",
    "start": "1073409",
    "end": "1080400"
  },
  {
    "text": "executing writer phase in structure to was now in its op phase doing ads and the like and destruction three is just",
    "start": "1080400",
    "end": "1086909"
  },
  {
    "text": "started up with whatever it's got for reader phase and so on in the obvious",
    "start": "1086909",
    "end": "1094500"
  },
  {
    "text": "wet so each instruction executes over three cycles which are one cycle phased",
    "start": "1094500",
    "end": "1101520"
  },
  {
    "text": "away from the prior and subsequent instruction now one way of looking at",
    "start": "1101520",
    "end": "1113340"
  },
  {
    "text": "this is that the phases form an intra instruction software pipeline values get",
    "start": "1113340",
    "end": "1121169"
  },
  {
    "text": "passed from one of the next over multiple cycles but still within one instruction in the way that a software",
    "start": "1121169",
    "end": "1128549"
  },
  {
    "text": "pipeline loop does it's an analogy it can't be pushed too far but it's a way",
    "start": "1128549",
    "end": "1133830"
  },
  {
    "text": "of thinking about it now phase assignments I alluded to this those",
    "start": "1133830",
    "end": "1140549"
  },
  {
    "start": "1136000",
    "end": "1183000"
  },
  {
    "text": "things which are going to be operation which will be assigned to reader phase will be all those that don't need any",
    "start": "1140549",
    "end": "1147360"
  },
  {
    "text": "inputs they could just be done as soon as they get decoded up phase are those",
    "start": "1147360",
    "end": "1152610"
  },
  {
    "text": "things which need to have some inputs and also produce results and somebody's going to want to produce want to consume",
    "start": "1152610",
    "end": "1159360"
  },
  {
    "text": "and writer phase are pure sinks things which will grab values but do not have",
    "start": "1159360",
    "end": "1166350"
  },
  {
    "text": "to pass them to anybody else there are cycle boundaries between these and as a",
    "start": "1166350",
    "end": "1173010"
  },
  {
    "text": "result each phase can in fact pass to the subsequent phase even though they",
    "start": "1173010",
    "end": "1178289"
  },
  {
    "text": "are in the same instruction because they issue at different times how that works",
    "start": "1178289",
    "end": "1185490"
  },
  {
    "start": "1183000",
    "end": "1507000"
  },
  {
    "text": "with the decode on most machines and particularly most vliw and other wide issues all of the operations of a single",
    "start": "1185490",
    "end": "1192870"
  },
  {
    "text": "instruction are decoded simultaneously and they're all made available to the execution unit simultaneously not on the",
    "start": "1192870",
    "end": "1199860"
  },
  {
    "text": "mill the mill is way too wide for that the mill is exceptionally wide at the",
    "start": "1199860",
    "end": "1206159"
  },
  {
    "text": "high end mill family of the mills you can have 30 or more operations in a",
    "start": "1206159",
    "end": "1211380"
  },
  {
    "text": "single instruction all of which have to do beat be decoded out of a variable length encoding and there's a complete",
    "start": "1211380",
    "end": "1219210"
  },
  {
    "text": "video and talk on that subject at considerable length on the site would remember that's your homework those",
    "start": "1219210",
    "end": "1227070"
  },
  {
    "text": "instructions wind up being pulled up through a fetch hierarchy and placed in a micro cache which is the actual input",
    "start": "1227070",
    "end": "1233760"
  },
  {
    "text": "into the decoder so the instruction gets sent to a decoder and that takes",
    "start": "1233760",
    "end": "1240020"
  },
  {
    "text": "crossing a cycle boundary as it goes from the problem of the micro cash into the decoder internally in order to",
    "start": "1240020",
    "end": "1247770"
  },
  {
    "text": "decode 30 plus operations it takes the decoder three full cycles to be able to do that and how it gets away with being",
    "start": "1247770",
    "end": "1254940"
  },
  {
    "text": "able to do it in only three cycles is an interesting subject that you can read",
    "start": "1254940",
    "end": "1260039"
  },
  {
    "text": "about elsewhere meanwhile different",
    "start": "1260039",
    "end": "1265559"
  },
  {
    "text": "parts of the instruction are available from the decoder in different cycles",
    "start": "1265559",
    "end": "1270690"
  },
  {
    "text": "some parts are available in the very first cycle some parts take two cycles",
    "start": "1270690",
    "end": "1275970"
  },
  {
    "text": "some parts take three cycles to get everything figured out so as each piece",
    "start": "1275970",
    "end": "1282480"
  },
  {
    "text": "comes out of out of the three different cycles and decode they get fed to the",
    "start": "1282480",
    "end": "1288360"
  },
  {
    "text": "execute engine and the execute engine then winds up the dear maiden two of the",
    "start": "1288360",
    "end": "1299700"
  },
  {
    "text": "blocks are available cycle before the others out of the six blocks which incur in an instruction",
    "start": "1299700",
    "end": "1305549"
  },
  {
    "text": "and they are arranged so that those things which are going to want to",
    "start": "1305549",
    "end": "1310619"
  },
  {
    "text": "execute in reader phase in fact are in the part of the instruction which is",
    "start": "1310619",
    "end": "1316259"
  },
  {
    "text": "decoded first and is available immediately so if that's our instruction",
    "start": "1316259",
    "end": "1321690"
  },
  {
    "text": "coming in one cycle later the reader ops can go you sent directly over to the",
    "start": "1321690",
    "end": "1328619"
  },
  {
    "text": "executor that's constitutes the reader phase as far as the execution is concerned meanwhile the partly decode",
    "start": "1328619",
    "end": "1336119"
  },
  {
    "text": "instruction is sent to the second stage in the decoder and gets decoded there",
    "start": "1336119",
    "end": "1341639"
  },
  {
    "text": "and the ops resulting from that decode gets sent over to the execute engine and",
    "start": "1341639",
    "end": "1348029"
  },
  {
    "text": "the instruction moves to yet the third stage of the decoder where the writer",
    "start": "1348029",
    "end": "1354539"
  },
  {
    "text": "ones are decoded and sent over so the execute the three cycles of execute",
    "start": "1354539",
    "end": "1361049"
  },
  {
    "text": "directly correspond to the three cycles of the decode as fast as things come out of the decode even though it is all one",
    "start": "1361049",
    "end": "1368730"
  },
  {
    "text": "instruction it's that Adi code is spreads stretched over three cycles and",
    "start": "1368730",
    "end": "1374210"
  },
  {
    "text": "correspondingly the execution is also stretched over three cycles the decoders",
    "start": "1374210",
    "end": "1381659"
  },
  {
    "text": "are fully pipelined and so as a result you can initiate the decode of a new",
    "start": "1381659",
    "end": "1386940"
  },
  {
    "text": "instruction every cycle there's our first instruction going in it goes it",
    "start": "1386940",
    "end": "1394259"
  },
  {
    "text": "produces a reader result and moves down but meanwhile the next instruction gets pulled in and it's partial decodes move",
    "start": "1394259",
    "end": "1404460"
  },
  {
    "text": "over execution and yet another instruction gets pulled in and this",
    "start": "1404460",
    "end": "1409590"
  },
  {
    "text": "becomes your steady state at least if",
    "start": "1409590",
    "end": "1415200"
  },
  {
    "text": "not interrupt by a branch misprediction which is the bane of everybody the",
    "start": "1415200",
    "end": "1422580"
  },
  {
    "text": "phases of instruction decode overlap with the phases of the adjacent",
    "start": "1422580",
    "end": "1429179"
  },
  {
    "text": "instructions reader phase happens in the same cycle as the op phase of the prior",
    "start": "1429179",
    "end": "1436710"
  },
  {
    "text": "instruction and the writer phase of the instruction before that now so much for the",
    "start": "1436710",
    "end": "1444369"
  },
  {
    "text": "arrangement how about those other phases I only mentioned three but the phase",
    "start": "1444369",
    "end": "1450190"
  },
  {
    "text": "listed several other phases well pick phase which is used by the pic operation",
    "start": "1450190",
    "end": "1457029"
  },
  {
    "text": "which is the ? colon primitive of C",
    "start": "1457029",
    "end": "1461999"
  },
  {
    "text": "doesn't actually use the functional unit it's not like an ad which has an adder instead pic actually is implemented in",
    "start": "1462210",
    "end": "1468879"
  },
  {
    "text": "the data distribution network called the crossbar which communicates data across",
    "start": "1468879",
    "end": "1475479"
  },
  {
    "text": "the cycle boundary from one from one cycle to the next and actually it",
    "start": "1475479",
    "end": "1480759"
  },
  {
    "text": "occupies Zuo time at all although the slide is showing that as if there was a",
    "start": "1480759",
    "end": "1486399"
  },
  {
    "text": "pic functional unit there really isn't it's sort of actually happening as the",
    "start": "1486399",
    "end": "1491710"
  },
  {
    "text": "cycle boundary happens and data is getting routed so it doesn't occupy a functional unit and we don't have to",
    "start": "1491710",
    "end": "1498909"
  },
  {
    "text": "occupy a whole cycle for a pic we can simply slip a pic in between an equal",
    "start": "1498909",
    "end": "1504489"
  },
  {
    "text": "and a store call phase used only by the",
    "start": "1504489",
    "end": "1510249"
  },
  {
    "start": "1507000",
    "end": "1612000"
  },
  {
    "text": "call operation function calls occur function calls within an instruction",
    "start": "1510249",
    "end": "1517149"
  },
  {
    "text": "occur after any prior phase of the same instruction and the remaining phases of",
    "start": "1517149",
    "end": "1525549"
  },
  {
    "text": "that instruction are executed after the call returns that is what happens when",
    "start": "1525549",
    "end": "1531669"
  },
  {
    "text": "you have a call is that the front half of the instruction is executed then you do the call and then the return comes",
    "start": "1531669",
    "end": "1537609"
  },
  {
    "text": "back and you to the back half of the same instruction if this is your source",
    "start": "1537609",
    "end": "1544719"
  },
  {
    "text": "code the machine code will look like that remember the underscore means this",
    "start": "1544719",
    "end": "1549789"
  },
  {
    "text": "is all one instruction it's an add a call or a store the ad fees that you'd",
    "start": "1549789",
    "end": "1559149"
  },
  {
    "text": "think would be feeding some functional unit what actually that function is is",
    "start": "1559149",
    "end": "1565089"
  },
  {
    "text": "in the called function so that the result of the ad is being passed directly into the",
    "start": "1565089",
    "end": "1572230"
  },
  {
    "text": "all the e with only just the cycle boundary in between the collie will",
    "start": "1572230",
    "end": "1578919"
  },
  {
    "text": "execute some amount the double pink line there means some unknown number of cycles whatever that function does and",
    "start": "1578919",
    "end": "1586230"
  },
  {
    "text": "eventually you'll execute a return it will then exit crossing a cycle boundary",
    "start": "1586230",
    "end": "1593380"
  },
  {
    "text": "and we're back in the original one directly able to store the result of the",
    "start": "1593380",
    "end": "1598510"
  },
  {
    "text": "function call its reacts acute 'add but",
    "start": "1598510",
    "end": "1606910"
  },
  {
    "text": "without the operations that have already been done well what happens if you have",
    "start": "1606910",
    "end": "1615340"
  },
  {
    "start": "1612000",
    "end": "1692000"
  },
  {
    "text": "more than one call that works on them help multiple calls are executed",
    "start": "1615340",
    "end": "1622840"
  },
  {
    "text": "consecutively and an order defined by the encoding order and the returns from",
    "start": "1622840",
    "end": "1629650"
  },
  {
    "text": "one-call returned directly into the next called function not back to the original",
    "start": "1629650",
    "end": "1637410"
  },
  {
    "text": "instruction so if there's a piece of code where we have nested calls the",
    "start": "1637410",
    "end": "1643900"
  },
  {
    "text": "machine code will be add call call store and the ad will feed gene which will run",
    "start": "1643900",
    "end": "1654940"
  },
  {
    "text": "some number of operations in function G that will return not back to the",
    "start": "1654940",
    "end": "1661630"
  },
  {
    "text": "instruction containing the ad but directly into F which will do some",
    "start": "1661630",
    "end": "1667570"
  },
  {
    "text": "amount of work which will eventually the last guy in the Cascade will eventually",
    "start": "1667570",
    "end": "1672700"
  },
  {
    "text": "return that value to the final store those of you are familiar with the turn",
    "start": "1672700",
    "end": "1677710"
  },
  {
    "text": "will recognize that this is tail calls and the mill does tail calls in hardware",
    "start": "1677710",
    "end": "1684640"
  },
  {
    "text": "for free that is a direct transfer",
    "start": "1684640",
    "end": "1690929"
  },
  {
    "text": "assuming again you didn't have a Miss predict but they would not have in this case",
    "start": "1690929",
    "end": "1696990"
  },
  {
    "start": "1692000",
    "end": "2360000"
  },
  {
    "text": "now that explains what the mechanism is but what's the benefit there have been a",
    "start": "1697270",
    "end": "1705610"
  },
  {
    "text": "ton of papers and studies in vast quantities of academic arguing over",
    "start": "1705610",
    "end": "1711190"
  },
  {
    "text": "exactly how much instruction level parallelism is inherent in existing programs many of these papers wind up if",
    "start": "1711190",
    "end": "1721180"
  },
  {
    "text": "you look at them very closely that all they're doing is measuring their compiler or measuring their measurement",
    "start": "1721180",
    "end": "1727600"
  },
  {
    "text": "methodology but over time for general-purpose code and we're not",
    "start": "1727600",
    "end": "1732820"
  },
  {
    "text": "talking embedded we're not talking oh the kinds of things that are GPU does",
    "start": "1732820",
    "end": "1739450"
  },
  {
    "text": "but for general-purpose code the consensus is is that the operation level parallelism that is the number of",
    "start": "1739450",
    "end": "1745810"
  },
  {
    "text": "operations which do not have dependencies and in principle could be executed together is in the order of two",
    "start": "1745810",
    "end": "1752530"
  },
  {
    "text": "or three on the average well it turns",
    "start": "1752530",
    "end": "1758800"
  },
  {
    "text": "out that's false in particular out of order machines avoid it but so does the",
    "start": "1758800",
    "end": "1766660"
  },
  {
    "text": "mill say we have two data flows these",
    "start": "1766660",
    "end": "1772660"
  },
  {
    "text": "are again very simple for illustration on a conventional machine you could do",
    "start": "1772660",
    "end": "1780670"
  },
  {
    "text": "the two cons in parallel a cycle later you could do the add and subtract in",
    "start": "1780670",
    "end": "1786100"
  },
  {
    "text": "parallel because there's no nothing else which is not having data dependency a cycle layer you're going to do the two",
    "start": "1786100",
    "end": "1792640"
  },
  {
    "text": "stores in parallel sure enough operation level parallelism of two and it takes",
    "start": "1792640",
    "end": "1801670"
  },
  {
    "text": "three cycles to do it on a mill they all",
    "start": "1801670",
    "end": "1809620"
  },
  {
    "text": "go in one cycle and the operation level",
    "start": "1809620",
    "end": "1814750"
  },
  {
    "text": "parallelism is six why because the con the ad in the store can all be done in",
    "start": "1814750",
    "end": "1821500"
  },
  {
    "text": "one instruction in the mill and because the mill is very wide it has no problem at all doing say six wide instruction so",
    "start": "1821500",
    "end": "1833910"
  },
  {
    "text": "we have effectively trebled our operation level parallelism we call it",
    "start": "1834120",
    "end": "1842770"
  },
  {
    "text": "mach 3 where the game comes about if",
    "start": "1842770",
    "end": "1852190"
  },
  {
    "text": "what you have is a very long basic block and you're concerned about operations than middle of the basic block the mills",
    "start": "1852190",
    "end": "1860020"
  },
  {
    "text": "phasing offers no advantage over a conventional vliw why assume that we're",
    "start": "1860020",
    "end": "1867340"
  },
  {
    "text": "in the middle of a basic block and it's got some number of operations with mill phasing we would encode it this way note",
    "start": "1867340",
    "end": "1875620"
  },
  {
    "text": "that the con will in fact wind up being executed there and the store will wind",
    "start": "1875620",
    "end": "1881500"
  },
  {
    "text": "up being executed there but it's still one instruction as far as the code is concerned on a VLIW didn't simply put",
    "start": "1881500",
    "end": "1889720"
  },
  {
    "text": "the con and the store in the appropriate place the mill has not gotten any faster",
    "start": "1889720",
    "end": "1896620"
  },
  {
    "text": "than what the vliw would have done this however is true only in the middle of a",
    "start": "1896620",
    "end": "1902800"
  },
  {
    "text": "long basic block if you are not in that",
    "start": "1902800",
    "end": "1909370"
  },
  {
    "text": "circumstance when you're adjacent to control flow phasing does earn cycles",
    "start": "1909370",
    "end": "1916810"
  },
  {
    "text": "over a conventional eiw if for example the basic code is there's a branch and",
    "start": "1916810",
    "end": "1925020"
  },
  {
    "text": "say it's an if-then-else and the then part is doing our con at store and then",
    "start": "1925020",
    "end": "1930610"
  },
  {
    "text": "doing another branch to someplace else well then mill phasing will move the con",
    "start": "1930610",
    "end": "1938470"
  },
  {
    "text": "up there and that is true only if that branch is taken at",
    "start": "1938470",
    "end": "1946590"
  },
  {
    "text": "the circuit circuit that encircled branch is in fact taken because only",
    "start": "1946590",
    "end": "1952350"
  },
  {
    "text": "then does that instruction in the then part actually happen and only then does",
    "start": "1952350",
    "end": "1958170"
  },
  {
    "text": "the Khan wind up actually having already executed in parallel with the branch",
    "start": "1958170",
    "end": "1963740"
  },
  {
    "text": "similarly the store in mill phasing will have be a one cycle later but even",
    "start": "1963740",
    "end": "1971160"
  },
  {
    "text": "though there is a branch there the exit branch that store will be executed",
    "start": "1971160",
    "end": "1978240"
  },
  {
    "text": "whether that branch is taken or not in",
    "start": "1978240",
    "end": "1983580"
  },
  {
    "text": "effect mill phases get moved over control floats on a VLIW without phasing",
    "start": "1983580",
    "end": "1992220"
  },
  {
    "text": "you can't do that the only way you can get the Conn to be executed only if",
    "start": "1992220",
    "end": "1998580"
  },
  {
    "text": "taken on a VLIW if it's in an instruction after the branch the only",
    "start": "1998580",
    "end": "2007400"
  },
  {
    "text": "way you can get that store done don't to",
    "start": "2007400",
    "end": "2013760"
  },
  {
    "text": "take it or not basis as if the branch which does the exit is after the store",
    "start": "2013760",
    "end": "2020110"
  },
  {
    "text": "the vliw scheduler cannot hoist the Conn over the branch or lower the store over",
    "start": "2020170",
    "end": "2026750"
  },
  {
    "text": "the branch because if it was stood the akan over the branch then the Conn would",
    "start": "2026750",
    "end": "2032540"
  },
  {
    "text": "be executed whether or not the branch was taken and that's not going to be somatically with the program asks for",
    "start": "2032540",
    "end": "2037880"
  },
  {
    "text": "and if it lowers the store over the branch it will wind up only executing",
    "start": "2037880",
    "end": "2044990"
  },
  {
    "text": "the store if the branch went one way rather than going the other way so",
    "start": "2044990",
    "end": "2050860"
  },
  {
    "text": "fundamentally of eli w is stuck and cannot do this kind of mechanism phasing",
    "start": "2050860",
    "end": "2060710"
  },
  {
    "text": "in some ways it's like out of water it approximates data flow a true data",
    "start": "2060710",
    "end": "2067740"
  },
  {
    "text": "flow machine those of you are registered in history can look up the Manchester mu5 and find out what a a real datum of",
    "start": "2067740",
    "end": "2076290"
  },
  {
    "text": "flow machine might be but no machine can be fundamentally faster than your data",
    "start": "2076290",
    "end": "2082889"
  },
  {
    "text": "flow architecture it disappeared I architectural II implant well mathematically impossible unfortunately",
    "start": "2082890",
    "end": "2089129"
  },
  {
    "text": "a true data flow architecture requires unbounded hardware and that's why they're difficult to fit on a chip",
    "start": "2089130",
    "end": "2095389"
  },
  {
    "text": "consequently at all machines attempt to approximate what a data flow architecture does and out of order does",
    "start": "2095390",
    "end": "2102990"
  },
  {
    "text": "do that it rectally detects the presence of the data flow in the instruction",
    "start": "2102990",
    "end": "2108630"
  },
  {
    "text": "stream and then schedules things in data flow order with maximum overlap that's",
    "start": "2108630",
    "end": "2114030"
  },
  {
    "text": "what your haswell's and so forth they do out of order do internally phasing in",
    "start": "2114030",
    "end": "2120450"
  },
  {
    "text": "many ways can be thought of as being a statically scheduled out of order the",
    "start": "2120450",
    "end": "2129000"
  },
  {
    "text": "compiler knows with the data flow battle doesn't have to go and figure it out and hardware the way and out of order machine does and the compiler can simply",
    "start": "2129000",
    "end": "2136560"
  },
  {
    "text": "schedule the operations such that the data flow that the operations represent",
    "start": "2136560",
    "end": "2142200"
  },
  {
    "text": "properly overlaps with the data flows being scheduled by other instructions",
    "start": "2142200",
    "end": "2149990"
  },
  {
    "text": "the phasing device because it doesn't have any benefit over vliw in long codes",
    "start": "2151010",
    "end": "2158760"
  },
  {
    "text": "in the middle of loan codes it benefits you only when you're adjacent to control",
    "start": "2158760",
    "end": "2163950"
  },
  {
    "text": "flow however control flow is exceptionally frequent on the average",
    "start": "2163950",
    "end": "2170040"
  },
  {
    "text": "every six to ten operations are there abouts guess what one mill instruction",
    "start": "2170040",
    "end": "2176070"
  },
  {
    "text": "is quite happy with six to ten or operations so one of the characteristics you see in mill code is the basic blocks",
    "start": "2176070",
    "end": "2182910"
  },
  {
    "text": "tend to be one instruction long the whole thing no matter how much work at story ooo out of order beats phasing",
    "start": "2182910",
    "end": "2193920"
  },
  {
    "text": "when the actual dependencies of the data flow are not in the phase order the phase orders",
    "start": "2193920",
    "end": "2200100"
  },
  {
    "text": "fixed on the milk you can't change it so for example a function call whose",
    "start": "2200100",
    "end": "2206640"
  },
  {
    "text": "argument is an ad is one one cycle on a mill but in ad one of his arguments is a",
    "start": "2206640",
    "end": "2214200"
  },
  {
    "text": "function call has to be too because the call phase is after the OP face and ooo",
    "start": "2214200",
    "end": "2222450"
  },
  {
    "text": "which is dynamically detecting this and dynamically scheduling can do a better job in that case turns out well we've",
    "start": "2222450",
    "end": "2229980"
  },
  {
    "text": "done our best to order the phases in such a way that this kind of thing doesn't happen very much and we've been",
    "start": "2229980",
    "end": "2235800"
  },
  {
    "text": "reasonably successful where the performance is a rough approximation to what no o machine will do phasing beads",
    "start": "2235800",
    "end": "2245940"
  },
  {
    "text": "up out of order when the out of order machine is issue limited the mill is",
    "start": "2245940",
    "end": "2253260"
  },
  {
    "text": "very very wide and out of order machines are hitting hardware limits which preclude having an issue with some more",
    "start": "2253260",
    "end": "2260820"
  },
  {
    "text": "than about eight as well i think is eight for example so if you want to be",
    "start": "2260820",
    "end": "2266400"
  },
  {
    "text": "able to put together data flows which together would be a dozen operations",
    "start": "2266400",
    "end": "2271950"
  },
  {
    "text": "you're actually limited you can't do that on and out of order machine and furthermore you're not going to be able",
    "start": "2271950",
    "end": "2277950"
  },
  {
    "text": "to do it on any out of order machine because out of order hardware is extraordinarily complex extraordinarily",
    "start": "2277950",
    "end": "2284160"
  },
  {
    "text": "large and extraordinarily power-hungry and you've just hit diminishing returns and even eight is pushing it mill does",
    "start": "2284160",
    "end": "2292050"
  },
  {
    "text": "not have these constraints it is extremely power stingy and it puts his",
    "start": "2292050",
    "end": "2297450"
  },
  {
    "text": "area into functional units which are tiny so the mill does not have",
    "start": "2297450",
    "end": "2303890"
  },
  {
    "text": "constraints that make an issue limited or Lee's family members don't",
    "start": "2303890",
    "end": "2310960"
  },
  {
    "text": "so phasing is an example of something that would of which we've had other",
    "start": "2310960",
    "end": "2316750"
  },
  {
    "text": "examples invest in various talks one of those in the discussions of the memory",
    "start": "2316750",
    "end": "2322720"
  },
  {
    "text": "system memory introduced the notion called a deferred load that I won't go into but remember your homework and its",
    "start": "2322720",
    "end": "2330400"
  },
  {
    "text": "consequence of the deferred load is that we can approximate the performance of an outer an order machine without the power",
    "start": "2330400",
    "end": "2336580"
  },
  {
    "text": "an area overhead of actually doing a real out of work this is another example",
    "start": "2336580",
    "end": "2342210"
  },
  {
    "text": "you will we will rarely well depends on the complexity of the code but we will",
    "start": "2342210",
    "end": "2348610"
  },
  {
    "text": "not often actually beat an out of order machine but we'll be in we will be roughly at a par in terms of a total",
    "start": "2348610",
    "end": "2355570"
  },
  {
    "text": "throughput and the saving is in the power and the area now so much for",
    "start": "2355570",
    "end": "2363430"
  },
  {
    "start": "2360000",
    "end": "2448000"
  },
  {
    "text": "ganging and which is the attachment of operations temporarily in addition we",
    "start": "2363430",
    "end": "2370080"
  },
  {
    "text": "need to address the possibility of combining operations horizontally not",
    "start": "2370080",
    "end": "2380050"
  },
  {
    "text": "temporarily but spatially that also exists on the mill it's called ganging",
    "start": "2380050",
    "end": "2385230"
  },
  {
    "text": "it removes a source count limitation which is President or essentially all",
    "start": "2385230",
    "end": "2390580"
  },
  {
    "text": "machines which architectures are designed in order to have a optimize the",
    "start": "2390580",
    "end": "2398380"
  },
  {
    "text": "common case in the common case is that that you have operations that are too important one output like an ad and",
    "start": "2398380",
    "end": "2405180"
  },
  {
    "text": "consequently their data paths to feed functional units let's carry the two data in and one data out so nearly",
    "start": "2405180",
    "end": "2413020"
  },
  {
    "text": "everything has that kind of a structure bear in mind we're using the belt so the value data is coming in from the belt",
    "start": "2413020",
    "end": "2419650"
  },
  {
    "text": "and but it's two in and the adder takes it takes it to input some producers one",
    "start": "2419650",
    "end": "2426280"
  },
  {
    "text": "result which goes back out the operations are encoded the actor the bit",
    "start": "2426280",
    "end": "2431950"
  },
  {
    "text": "layout of the encoding is designed to support this the data paths are designed to support this and essentially all",
    "start": "2431950",
    "end": "2437980"
  },
  {
    "text": "machines do this us too unfortunately there are operational in",
    "start": "2437980",
    "end": "2445460"
  },
  {
    "text": "and one out rule one of them is fuse multiply atom it has three inputs and",
    "start": "2445460",
    "end": "2453589"
  },
  {
    "start": "2448000",
    "end": "2777000"
  },
  {
    "text": "computes a times B plus C well you might",
    "start": "2453589",
    "end": "2458900"
  },
  {
    "text": "think you could do that in fact adding a",
    "start": "2458900",
    "end": "2463910"
  },
  {
    "text": "third input into the encoding and into the data paths to the functional pipelines would be really expensive and",
    "start": "2463910",
    "end": "2472730"
  },
  {
    "text": "fundamentally you don't want to do it every machine has to that supports FMA",
    "start": "2472730",
    "end": "2480380"
  },
  {
    "text": "has to deal with this and the contortions that it uses are extreme if",
    "start": "2480380",
    "end": "2489410"
  },
  {
    "text": "you want to get into the details feel free the middle doesn't do it quite that",
    "start": "2489410",
    "end": "2494779"
  },
  {
    "text": "way instead we define what we call a gang these are two or more adjacent to",
    "start": "2494779",
    "end": "2504020"
  },
  {
    "text": "input data paths that cooperatively implement a single operation those are",
    "start": "2504020",
    "end": "2514760"
  },
  {
    "text": "two two inputs each of the execution pipelines has a perfectly normal to",
    "start": "2514760",
    "end": "2521000"
  },
  {
    "text": "input one LOL no output to input zero output on the mill encoding slot and",
    "start": "2521000",
    "end": "2527299"
  },
  {
    "text": "each contains perfectly ordinary to input data paths suitable for functional",
    "start": "2527299",
    "end": "2532970"
  },
  {
    "text": "units like al use of FPS and so forth when what you want to do is a three",
    "start": "2532970",
    "end": "2541130"
  },
  {
    "text": "input those slots cooperatively implement a single operation by defining",
    "start": "2541130",
    "end": "2550010"
  },
  {
    "text": "another operation whose name internally is called args that has inputs but no",
    "start": "2550010",
    "end": "2557000"
  },
  {
    "text": "results well we now have two inputs going down one path and one input going",
    "start": "2557000",
    "end": "2562819"
  },
  {
    "text": "down another path but what we really want was three inputs so args passes its",
    "start": "2562819",
    "end": "2569059"
  },
  {
    "text": "data horizontally between the functional units",
    "start": "2569059",
    "end": "2574240"
  },
  {
    "text": "that in turn produces a result in a",
    "start": "2574850",
    "end": "2580500"
  },
  {
    "text": "perfectly ordinary way Ganga is used for all operations and about more than two",
    "start": "2580500",
    "end": "2586860"
  },
  {
    "text": "inputs however just having an arse up",
    "start": "2586860",
    "end": "2592440"
  },
  {
    "text": "which does nothing except taking an input for the data pass and pass it along horizontally seems somewhat",
    "start": "2592440",
    "end": "2598290"
  },
  {
    "text": "wasteful be nice if you could do something else besides having the FMA",
    "start": "2598290",
    "end": "2604470"
  },
  {
    "text": "there so what's really going on well",
    "start": "2604470",
    "end": "2610620"
  },
  {
    "text": "internally to the FMA functional unit there's a multiplier and the two inputs",
    "start": "2610620",
    "end": "2617130"
  },
  {
    "text": "get multiplied then the args value comes in and the result of the multiply and",
    "start": "2617130",
    "end": "2623160"
  },
  {
    "text": "the result of a value government from the args gets passed to an adder which",
    "start": "2623160",
    "end": "2628230"
  },
  {
    "text": "is also in that same functional unit like so but we could put something do",
    "start": "2628230",
    "end": "2638040"
  },
  {
    "text": "something useful in the second slot so let's gang together to FMA units to make",
    "start": "2638040",
    "end": "2645660"
  },
  {
    "text": "what we call f mas or fuse multiply add subtract with four inputs the two units",
    "start": "2645660",
    "end": "2658040"
  },
  {
    "text": "the two pairs of units each go to the multiplier the result of the two",
    "start": "2658040",
    "end": "2664080"
  },
  {
    "text": "multiplies are horizontally interchanged and then one side doesn't add and the",
    "start": "2664080",
    "end": "2671430"
  },
  {
    "text": "other side doesn't subtract the result is to results mill is very good at",
    "start": "2671430",
    "end": "2680910"
  },
  {
    "text": "multiple results because of the belt structure which computes the sum and",
    "start": "2680910",
    "end": "2685920"
  },
  {
    "text": "difference of two products sometimes you",
    "start": "2685920",
    "end": "2691230"
  },
  {
    "text": "only want one you ignore the they second or you sometimes want both for many",
    "start": "2691230",
    "end": "2697020"
  },
  {
    "text": "kinds of floating-point computations that happens to like having both of those yes",
    "start": "2697020",
    "end": "2704210"
  },
  {
    "text": "I'm I'm somewhat deaf and I'm going to need someone to repeat the question",
    "start": "2704860",
    "end": "2711280"
  },
  {
    "text": "fancy that in any case some a difference",
    "start": "2712240",
    "end": "2719120"
  },
  {
    "text": "of two products making use of the functional units that are already there",
    "start": "2719120",
    "end": "2724870"
  },
  {
    "text": "now I got backed up somehow",
    "start": "2724870",
    "end": "2733300"
  },
  {
    "text": "alternatively you could use that same hardware there's two multipliers and two",
    "start": "2733300",
    "end": "2738830"
  },
  {
    "text": "adders to do to F mas here we need 6 inputs ok we're now going to get to",
    "start": "2738830",
    "end": "2755360"
  },
  {
    "text": "individual FMA operations and f mas like",
    "start": "2755360",
    "end": "2765830"
  },
  {
    "text": "f MA is only one rounding error and is consequently as advantageous over the",
    "start": "2765830",
    "end": "2772190"
  },
  {
    "text": "equivalent simple multiply ad segments ganging as i said is used for any time",
    "start": "2772190",
    "end": "2780170"
  },
  {
    "start": "2777000",
    "end": "3180000"
  },
  {
    "text": "you need more than two inputs but it actually has other uses as well and i'm going to touch on one of those which we",
    "start": "2780170",
    "end": "2785540"
  },
  {
    "text": "call predicate gangs let me introduce you to the bane of CPU design it's",
    "start": "2785540",
    "end": "2791180"
  },
  {
    "text": "called a condition code condition codes are side-effect byproducts of ALU",
    "start": "2791180",
    "end": "2798860"
  },
  {
    "text": "operations where bits are set typically in the program status word that indicate",
    "start": "2798860",
    "end": "2804920"
  },
  {
    "text": "whether the ad you just did had a result that was 0 greater than 0 less than or 0",
    "start": "2804920",
    "end": "2810200"
  },
  {
    "text": "had a carry coming out of it over float or what have you the problem is is that",
    "start": "2810200",
    "end": "2815450"
  },
  {
    "text": "this is a global state it's real nice you can do and subtract and get the",
    "start": "2815450",
    "end": "2820730"
  },
  {
    "text": "subtract result and in addition immediately branch on whether they that you have gotten 20 for example the",
    "start": "2820730",
    "end": "2827420"
  },
  {
    "text": "condition codes were designed to support decrement a looping but the next",
    "start": "2827420",
    "end": "2833720"
  },
  {
    "text": "operation that comes along that gives is the condition cuz just Robert your condition cuts and when you",
    "start": "2833720",
    "end": "2839420"
  },
  {
    "text": "are doing a whole bunch of operations in parallel all of whom set the condition goats well who wins who does set them",
    "start": "2839420",
    "end": "2846589"
  },
  {
    "text": "and so condition codes are never used in white issue machines in an out-of-order",
    "start": "2846589",
    "end": "2852230"
  },
  {
    "text": "machine condition codes have to be renamed because the problem that they will get cluttered the add-ins of",
    "start": "2852230",
    "end": "2858140"
  },
  {
    "text": "tractor not necessarily done in the order that they look like and you have to have multiple copies of the condition",
    "start": "2858140",
    "end": "2864380"
  },
  {
    "text": "codes it moved around like multiple copies of the registers it is part of the extremely complicated and",
    "start": "2864380",
    "end": "2872960"
  },
  {
    "text": "power-hungry part of making an out-of-order machine work all of the",
    "start": "2872960",
    "end": "2878780"
  },
  {
    "text": "people who actually have to do things like Exodus modern x86 chips do dearly",
    "start": "2878780",
    "end": "2884750"
  },
  {
    "text": "wish the condition codes had gotten left out of the original architecture but the original architecture did not have that",
    "start": "2884750",
    "end": "2891950"
  },
  {
    "text": "much of a view of the future on the other hand condition codes will speed up",
    "start": "2891950",
    "end": "2897140"
  },
  {
    "text": "some kinds of code but they can't be speculated because it's a global state",
    "start": "2897140",
    "end": "2903740"
  },
  {
    "text": "the mills very big on speculation making use of all of its width you just need to",
    "start": "2903740",
    "end": "2911900"
  },
  {
    "text": "be able to collect the predicate metadata of was this greater than or less than zero or what have you and um",
    "start": "2911900",
    "end": "2919450"
  },
  {
    "text": "save it somewhere where somebody can use it without actually saving it globally",
    "start": "2919450",
    "end": "2926290"
  },
  {
    "text": "so say that's our source code and this is the typical bottom of a bottom of a counting loop and are we at the end of",
    "start": "2926290",
    "end": "2932930"
  },
  {
    "text": "the loop a piece of code or we decrement",
    "start": "2932930",
    "end": "2939440"
  },
  {
    "text": "I and if it's greater than zero we will go to the top of the loop or do something in machine code if there are",
    "start": "2939440",
    "end": "2948770"
  },
  {
    "text": "no condition codes you have to do is subtract on the I to decrement it and",
    "start": "2948770",
    "end": "2954910"
  },
  {
    "text": "then then you separately do a greater than zero on the result and then you",
    "start": "2954910",
    "end": "2962030"
  },
  {
    "text": "branch of that greater return true true in this case being a data value rather",
    "start": "2962030",
    "end": "2967040"
  },
  {
    "text": "than a condition code with condition coats the subtracts sets",
    "start": "2967040",
    "end": "2974190"
  },
  {
    "text": "the greater than condition code and the branch can simply branch on that",
    "start": "2974190",
    "end": "2979200"
  },
  {
    "text": "condition by the way we've saved the cycle that's why condition codes exist",
    "start": "2979200",
    "end": "2985160"
  },
  {
    "text": "the problem of course is that that many many operations set the codes but the",
    "start": "2985160",
    "end": "2991979"
  },
  {
    "text": "rather rarely looked at typically only buying a branch immediately following",
    "start": "2991979",
    "end": "2997200"
  },
  {
    "text": "them the condition codes are almost always immediately consumed or never",
    "start": "2997200",
    "end": "3002599"
  },
  {
    "text": "cared about anymore but somebody has to keep track of them in the hardware and",
    "start": "3002599",
    "end": "3007789"
  },
  {
    "text": "they can't be speculated because its global state so down with condition",
    "start": "3007789",
    "end": "3013009"
  },
  {
    "text": "codes in the words of idea Dykstra condition codes considered harmful so",
    "start": "3013009",
    "end": "3019940"
  },
  {
    "text": "what you really want is to be able to speculate it well the mill code we need",
    "start": "3019940",
    "end": "3034059"
  },
  {
    "text": "subtract and greater than branch on true that is in fact one instruction we want",
    "start": "3034059",
    "end": "3041539"
  },
  {
    "text": "a data flow that goes from subtract to greater do branch on true but subtract",
    "start": "3041539",
    "end": "3049249"
  },
  {
    "text": "and greater than or both up phase operations consequently that's a no-no",
    "start": "3049249",
    "end": "3057999"
  },
  {
    "text": "and you can't do that instead it",
    "start": "3057999",
    "end": "3064190"
  },
  {
    "text": "requires this code we at least get the greater and the branch done in parallel",
    "start": "3064190",
    "end": "3069499"
  },
  {
    "text": "do dephasing but we're still not much",
    "start": "3069499",
    "end": "3075170"
  },
  {
    "text": "better off than what a your typical risk machine would be one possibility would",
    "start": "3075170",
    "end": "3081380"
  },
  {
    "text": "be to have the subtract produce two results or at least some flavor of subtractive orders to results both the",
    "start": "3081380",
    "end": "3087950"
  },
  {
    "text": "numeric nosotras result of the tract and also a flag saying it was greater",
    "start": "3087950",
    "end": "3093790"
  },
  {
    "text": "well we could define such an operation that call X subtract later that returns both the difference and a boolean that's",
    "start": "3093790",
    "end": "3100720"
  },
  {
    "text": "two different results that works it",
    "start": "3100720",
    "end": "3106240"
  },
  {
    "text": "would look like that now we're just in one instruction it's up phase and rudder face everybody's happy except you wind",
    "start": "3106240",
    "end": "3116830"
  },
  {
    "text": "up with a huge up code explosion because for everything that might produce a a",
    "start": "3116830",
    "end": "3125160"
  },
  {
    "text": "condition code like result you will now have to have flavors that produce each of the interval individual possible",
    "start": "3125160",
    "end": "3131980"
  },
  {
    "text": "conditions and your opcode space a bit space in your encoding winds up getting",
    "start": "3131980",
    "end": "3137620"
  },
  {
    "text": "rather nastily cluttered with stuff like that um the an implementation of this",
    "start": "3137620",
    "end": "3146530"
  },
  {
    "text": "would require the addition of another fast path in the actual encoding the actual mechanism passes data back and",
    "start": "3146530",
    "end": "3153400"
  },
  {
    "text": "forth that has clock impact don't worry about the details that gentleman up there next to the camera can explain all",
    "start": "3153400",
    "end": "3160600"
  },
  {
    "text": "about it but he's the hardware guy of and that can do so but fundamentally",
    "start": "3160600",
    "end": "3168220"
  },
  {
    "text": "that there's good Hardware reasons why you don't want to do this so that isn't",
    "start": "3168220",
    "end": "3177880"
  },
  {
    "text": "going to work solution we gang a",
    "start": "3177880",
    "end": "3183490"
  },
  {
    "start": "3180000",
    "end": "3305000"
  },
  {
    "text": "predicate the il use unconditionally and",
    "start": "3183490",
    "end": "3189850"
  },
  {
    "text": "always provide what would be a condition code set horizontally to the adjacent",
    "start": "3189850",
    "end": "3195910"
  },
  {
    "text": "slot then we define one operation bigger",
    "start": "3195910",
    "end": "3202870"
  },
  {
    "text": "code which reads the greater better and returns it visible this is our source",
    "start": "3202870",
    "end": "3209260"
  },
  {
    "text": "code that is our mill code the",
    "start": "3209260",
    "end": "3214780"
  },
  {
    "text": "underscore means it's all one instruction that is a",
    "start": "3214780",
    "end": "3220549"
  },
  {
    "text": "is not passing data through the normal data flow it had passing data across",
    "start": "3220549",
    "end": "3228109"
  },
  {
    "text": "between functional units within a cycle and that data in turn can be passed to",
    "start": "3228109",
    "end": "3235219"
  },
  {
    "text": "the branch due to facing the gang is off phase the gang maybe just thought of as",
    "start": "3235219",
    "end": "3241729"
  },
  {
    "text": "being a 2 slot super super operation there's just just one operation even",
    "start": "3241729",
    "end": "3246769"
  },
  {
    "text": "though we had to break it apart into into two pieces there's the two inputs",
    "start": "3246769",
    "end": "3253209"
  },
  {
    "text": "to the sub the greater has no inputs at all the code gets passed from the sub to",
    "start": "3253209",
    "end": "3260809"
  },
  {
    "text": "the greater horizontally we go through the cycle boundary the subtract result",
    "start": "3260809",
    "end": "3266989"
  },
  {
    "text": "winds up everywhere does as does the greater result when addition the branch",
    "start": "3266989",
    "end": "3272089"
  },
  {
    "text": "run true can pick up that it's all one instruction and we're done phasing",
    "start": "3272089",
    "end": "3279979"
  },
  {
    "text": "permits us to pick that up as being still in the same cycle consequently",
    "start": "3279979",
    "end": "3286099"
  },
  {
    "text": "because these are numeric predicates they get dropped in the belt like any other just as if we had a two result",
    "start": "3286099",
    "end": "3291170"
  },
  {
    "text": "operation except that what we actually have is two different slots producing one result each so we don't have fast",
    "start": "3291170",
    "end": "3298640"
  },
  {
    "text": "pass problems and we don't have encoding explosion problems and speculation is",
    "start": "3298640",
    "end": "3305359"
  },
  {
    "start": "3305000",
    "end": "3566000"
  },
  {
    "text": "done now there's some operations that",
    "start": "3305359",
    "end": "3310819"
  },
  {
    "text": "while you'd like to be able to issue them in parallel they cannot execute in parallel and control flow are the most",
    "start": "3310819",
    "end": "3316429"
  },
  {
    "text": "important of these we want to be able to have a bunch of branches in one",
    "start": "3316429",
    "end": "3321890"
  },
  {
    "text": "instruction multi-way branches the typical example being a switch or a case",
    "start": "3321890",
    "end": "3328009"
  },
  {
    "text": "statement depending on your favorite language which tend to be truly annoying in Hardware if that is our source code",
    "start": "3328009",
    "end": "3340089"
  },
  {
    "text": "the machine code will typically test for the first case and branch to a test for",
    "start": "3340089",
    "end": "3346729"
  },
  {
    "text": "the next case and branch pretext for the next case our branch through it and so forth if the cases are dense sometimes you can",
    "start": "3346729",
    "end": "3354089"
  },
  {
    "text": "load a dispatch table a table of label variables or a table of branch offsets",
    "start": "3354089",
    "end": "3360690"
  },
  {
    "text": "but that involves having to pull stuff out of memory and that's slow and well",
    "start": "3360690",
    "end": "3366390"
  },
  {
    "text": "there are a whole lot of solutions in under them very satisfactory that you'll find in architectures of various",
    "start": "3366390",
    "end": "3372150"
  },
  {
    "text": "machines typically however most compilers today will turn this into a",
    "start": "3372150",
    "end": "3378150"
  },
  {
    "text": "chain of individual if tests though they",
    "start": "3378150",
    "end": "3383369"
  },
  {
    "text": "will optimize certain cases the problems are is that the tests and branches",
    "start": "3383369",
    "end": "3388980"
  },
  {
    "text": "execute sequentially you're going to wind up with a prediction for each of",
    "start": "3388980",
    "end": "3394980"
  },
  {
    "text": "those branches and they tend to clutter the prediction tables it's possible for",
    "start": "3394980",
    "end": "3401039"
  },
  {
    "text": "the sequence to miss predicts several times because the the predictions will",
    "start": "3401039",
    "end": "3409849"
  },
  {
    "text": "zoom down and say oh this must be case three and we'll send the execution unit",
    "start": "3409849",
    "end": "3415259"
  },
  {
    "text": "off to the corresponding case it's discovered that this was wrong we unwind everything go and test the next case and",
    "start": "3415259",
    "end": "3421819"
  },
  {
    "text": "in the absence of three it now predicts that five is going to be taken and it turns out that five wasn't taken either",
    "start": "3421819",
    "end": "3428039"
  },
  {
    "text": "and the correct thing we should have done was go to the default case but meanwhile we've taken to to miss",
    "start": "3428039",
    "end": "3433440"
  },
  {
    "text": "predicts and miss predicts on a conventional machine or exceptionally painful the mill only has a five cycle",
    "start": "3433440",
    "end": "3440039"
  },
  {
    "text": "miss predict penalty as opposed to the 15 or 20 typical of other machines but five cycles is painful for us too so",
    "start": "3440039",
    "end": "3451069"
  },
  {
    "text": "what we do is we put all of the thing in one instruction the equals feed only",
    "start": "3451490",
    "end": "3463710"
  },
  {
    "text": "their respective branches they can be done in parallel because there's no data",
    "start": "3463710",
    "end": "3468839"
  },
  {
    "text": "connection between them they're both up phase but they both can be executed simultaneously the data will",
    "start": "3468839",
    "end": "3477990"
  },
  {
    "text": "flow to the two branches which are both",
    "start": "3477990",
    "end": "3483090"
  },
  {
    "text": "in writer phase they don't have any data inter connection so they can be executed",
    "start": "3483090",
    "end": "3488940"
  },
  {
    "text": "in parallel however of course only one of those should win in this case",
    "start": "3488940",
    "end": "3494700"
  },
  {
    "text": "numerically only one is possible but indeed other conditions it could be that more than one had its it's there taken",
    "start": "3494700",
    "end": "3503100"
  },
  {
    "text": "untaken predicate true we define a rule",
    "start": "3503100",
    "end": "3509270"
  },
  {
    "text": "such that in encoding order the first",
    "start": "3509270",
    "end": "3515010"
  },
  {
    "text": "taken branch is taken and if there are more we don't care so the first encoding",
    "start": "3515010",
    "end": "3524070"
  },
  {
    "text": "even though they're all executed only one actually reroutes the core execution",
    "start": "3524070",
    "end": "3529230"
  },
  {
    "text": "the first one there is only one prediction for the holes for the whole",
    "start": "3529230",
    "end": "3536700"
  },
  {
    "text": "switch the mill predicts exits rather than branches and that has been",
    "start": "3536700",
    "end": "3542760"
  },
  {
    "text": "thoroughly covered in a talk called prediction that you will find in your homework assignment no more than one",
    "start": "3542760",
    "end": "3552090"
  },
  {
    "text": "miss predict is possible we by the time we come back having discovered that we",
    "start": "3552090",
    "end": "3557730"
  },
  {
    "text": "were wrong we now have got the correct value and only but what we will in fact",
    "start": "3557730",
    "end": "3563490"
  },
  {
    "text": "take the correct branch so in brief",
    "start": "3563490",
    "end": "3569820"
  },
  {
    "start": "3566000",
    "end": "4420000"
  },
  {
    "text": "summary you can do intra in structured data flow if every phase is occupied you",
    "start": "3569820",
    "end": "3584580"
  },
  {
    "text": "can wind up having a substantial expansion but in practice codes do not",
    "start": "3584580",
    "end": "3590430"
  },
  {
    "text": "contain on every phase in a data flow we",
    "start": "3590430",
    "end": "3595440"
  },
  {
    "text": "find that a Mach 3 is recently representative it is heavily dependent",
    "start": "3595440",
    "end": "3601230"
  },
  {
    "text": "on the application in the nature of the code and it's also dependent on the width of the particular family member",
    "start": "3601230",
    "end": "3607770"
  },
  {
    "text": "low end machines no end mills do not have all that much width and there might be",
    "start": "3607770",
    "end": "3614010"
  },
  {
    "text": "implicitly a parallelism available that we can't use because it's not in a functional units at the high end it",
    "start": "3614010",
    "end": "3620620"
  },
  {
    "text": "tends to be not a problem single instructions are issued over three",
    "start": "3620620",
    "end": "3625840"
  },
  {
    "text": "cycles effectively what we have is pseudo out of order that operates at",
    "start": "3625840",
    "end": "3633430"
  },
  {
    "text": "execute operations over control flow the way a hardware out of order does we can",
    "start": "3633430",
    "end": "3639610"
  },
  {
    "text": "have instructions containing multiple calls which means the data flows can",
    "start": "3639610",
    "end": "3645670"
  },
  {
    "text": "have contain multiple calls two cascaded",
    "start": "3645670",
    "end": "3651190"
  },
  {
    "text": "calls are automatically tale called only the last one returns to the original",
    "start": "3651190",
    "end": "3656980"
  },
  {
    "text": "instruction this n way branching in one",
    "start": "3656980",
    "end": "3662470"
  },
  {
    "text": "instruction and the compiler and the hardware both know what's going to happen and schedule the code accordingly",
    "start": "3662470",
    "end": "3669780"
  },
  {
    "text": "we're not constrained by pipeline data paths because we can gang assuming that the underlying of the functional",
    "start": "3669780",
    "end": "3676030"
  },
  {
    "text": "capacity is there consequently we can support novel operations which I've mmm",
    "start": "3676030",
    "end": "3683950"
  },
  {
    "text": "puts and outputs that other machines simply do not have including perhaps specialized operations for certain",
    "start": "3683950",
    "end": "3693580"
  },
  {
    "text": "particular market areas and has spectacle condition codes so you get the",
    "start": "3693580",
    "end": "3703120"
  },
  {
    "text": "performance gain on it without global state there i will leave the slide up",
    "start": "3703120",
    "end": "3710260"
  },
  {
    "text": "there you can find additional documentation the mailing list we'll get",
    "start": "3710260",
    "end": "3717010"
  },
  {
    "text": "you on our mailing list for announcements of talks like this which take place sorry and they takes place",
    "start": "3717010",
    "end": "3722890"
  },
  {
    "text": "elsewhere although you could sign us up for another one next semester if you",
    "start": "3722890",
    "end": "3728050"
  },
  {
    "text": "wanted and there's announcements of things like the white paper available it",
    "start": "3728050",
    "end": "3733990"
  },
  {
    "text": "isn't in such like I'm open to questions is there an LLVM",
    "start": "3733990",
    "end": "3744810"
  },
  {
    "text": "compiler for your machine and is it possible to slurp up real boat and",
    "start": "3744810",
    "end": "3750020"
  },
  {
    "text": "you're in the mist patent filing so we cannot expose a bunch of stuff to talk",
    "start": "3750020",
    "end": "3758100"
  },
  {
    "text": "about in these talks and things the patents have brought in but to completely expose the machine we cannot",
    "start": "3758100",
    "end": "3765720"
  },
  {
    "text": "yet do that said that doesn't matter because the compiler doesn't work we had",
    "start": "3765720",
    "end": "3772260"
  },
  {
    "text": "a compiler which was based on the EDG front to end the one which goes into the",
    "start": "3772260",
    "end": "3778320"
  },
  {
    "text": "Intel IC c compiler and our own middle and back ends and it was up to the point",
    "start": "3778320",
    "end": "3784410"
  },
  {
    "text": "where it would generate code and we realized that this was completely wrong",
    "start": "3784410",
    "end": "3790290"
  },
  {
    "text": "headed we do not want to roll our own especially not all the middle and optimizations for vectorization which is",
    "start": "3790290",
    "end": "3796230"
  },
  {
    "text": "well-established technology and there's no point in us repeating it and so we",
    "start": "3796230",
    "end": "3801300"
  },
  {
    "text": "made the decision to convert to discard our old one and convert to llvm that was",
    "start": "3801300",
    "end": "3807750"
  },
  {
    "text": "at the point when the Patent Office changed its rules and we realized we had to immediately who had to come out of",
    "start": "3807750",
    "end": "3813600"
  },
  {
    "text": "stealth and merely spy us start filing patents and frankly I am so sick of",
    "start": "3813600",
    "end": "3818790"
  },
  {
    "text": "patents because we've been doing nothing except file patents for the last year and unfortunately the llvm effort has",
    "start": "3818790",
    "end": "3826440"
  },
  {
    "text": "been set aside we just recently added a new person to the team who's taking that on and there will be some major work",
    "start": "3826440",
    "end": "3835530"
  },
  {
    "text": "having to be done even with llvm because llvm makes some very rash assumptions",
    "start": "3835530",
    "end": "3841170"
  },
  {
    "text": "for example it assumes it's running on a register machine and we are not but we",
    "start": "3841170",
    "end": "3847050"
  },
  {
    "text": "have we have done enough work to know where at least some of the bodies are buried in llvm or mill on the llvm but",
    "start": "3847050",
    "end": "3857390"
  },
  {
    "text": "it's it is definitely a major piece of work still to go by the time however",
    "start": "3857390",
    "end": "3863280"
  },
  {
    "text": "that work is done all the patents will be in will have benchmarks available all the rest of thing else so it doesn't really matter",
    "start": "3863280",
    "end": "3871580"
  },
  {
    "text": "because we have to block things and they'll come out the back end roughly the same time we think we hope I'm the",
    "start": "3871580",
    "end": "3881930"
  },
  {
    "text": "I'm a compiler guy I've done 11 compilers so it's there's a lot of work",
    "start": "3881930",
    "end": "3889970"
  },
  {
    "text": "in there but we believe in part because we already did one to the compiler we",
    "start": "3889970",
    "end": "3896090"
  },
  {
    "text": "believe we understand what the issues will be and our major difficulties will in fact be not with our stuff but",
    "start": "3896090",
    "end": "3902030"
  },
  {
    "text": "without obeah we think for for for your",
    "start": "3902030",
    "end": "3910400"
  },
  {
    "text": "ticket on the shin how many MPG belt and call me fourth season right else they've",
    "start": "3910400",
    "end": "3921170"
  },
  {
    "text": "till you confront your gate region right mmm how many bell positions and how many loads and stores me leave them dry",
    "start": "3921170",
    "end": "3927860"
  },
  {
    "text": "sports what I mean I mean blood murmuring start a memory hello the bell bell what about all dream yeah it's a",
    "start": "3927860",
    "end": "3936320"
  },
  {
    "text": "family like the 360 was a family these parameters vary my family member the",
    "start": "3936320",
    "end": "3944420"
  },
  {
    "text": "smallest one we have currently specified for configuration as a belt length of eight operates the largest one we have",
    "start": "3944420",
    "end": "3952820"
  },
  {
    "text": "is 32 operands it's pretty clear that there's no point in anything smaller",
    "start": "3952820",
    "end": "3958610"
  },
  {
    "text": "than eight it's not clear that's whether 64 would be useful but we believe not",
    "start": "3958610",
    "end": "3966130"
  },
  {
    "text": "you want to have the belt size to track",
    "start": "3966130",
    "end": "3971630"
  },
  {
    "text": "the number of functional units because the number of functional units determines how many new values can drop",
    "start": "3971630",
    "end": "3977870"
  },
  {
    "text": "each cycle you have six adders you can drop 6ad results and you want to have",
    "start": "3977870",
    "end": "3983930"
  },
  {
    "text": "enough belt so that those results get used before they fall off the end so as",
    "start": "3983930",
    "end": "3991820"
  },
  {
    "text": "you get more functional units you also want to extend the belt to match it is",
    "start": "3991820",
    "end": "3998270"
  },
  {
    "text": "this purity of pragmatic sizing based on sim so is that correct let's say 430 units",
    "start": "3998270",
    "end": "4005430"
  },
  {
    "text": "pure 30 units you would have 32 registers and your belt and make up",
    "start": "4005430",
    "end": "4011340"
  },
  {
    "text": "basically nine supports again the 32 belt you'd have 32 registers in your",
    "start": "4011340",
    "end": "4017880"
  },
  {
    "text": "belt and 90 some ports okay these are not registration well they're registered",
    "start": "4017880",
    "end": "4025200"
  },
  {
    "text": "in a sensitive foot pump it has think there's a knife like sloppy but does not flip flops either the the belt has been",
    "start": "4025200",
    "end": "4031470"
  },
  {
    "text": "discussed in a prior talk and with without slides or whiteboard would be a bit to explain it the conceptual model",
    "start": "4031470",
    "end": "4039540"
  },
  {
    "text": "of it being a colossal shift register is false it doesn't actually work that way there is no colossal shift register the",
    "start": "4039540",
    "end": "4046020"
  },
  {
    "text": "thing there are it is not implemented as an SRAM array it is not implemented as a",
    "start": "4046020",
    "end": "4053280"
  },
  {
    "text": "register file consequently the notion of ports is not meaningful you go to the",
    "start": "4053280",
    "end": "4063150"
  },
  {
    "text": "homework page in your head you'll see how it works the only alternative is a multiplexer tree a pipeline multiplexer",
    "start": "4063150",
    "end": "4068760"
  },
  {
    "text": "dream right I mean that's the one we made no no well is essentially the",
    "start": "4068760",
    "end": "4073800"
  },
  {
    "text": "bypass network that a conventional machine has it's a it's a it's it's must",
    "start": "4073800",
    "end": "4081000"
  },
  {
    "text": "reach ok the way the addressing happens is to a",
    "start": "4081000",
    "end": "4089430"
  },
  {
    "text": "naming process when something which was formerly called be three becomes b5 all",
    "start": "4089430",
    "end": "4096540"
  },
  {
    "text": "this changes the name no data bits of moves timeouts in time past which caused",
    "start": "4096540",
    "end": "4105028"
  },
  {
    "text": "the name check yes yeah so um eight belt",
    "start": "4105029",
    "end": "4110400"
  },
  {
    "text": "positions or 16 or 32 or whatever the",
    "start": "4110400",
    "end": "4115500"
  },
  {
    "text": "equivalent of object code that's running on the machine would have different size fields depending on yes also it seems",
    "start": "4115500",
    "end": "4123810"
  },
  {
    "text": "that at some point things will fall off the end of the belt and there will be cases where that you so long as it yet",
    "start": "4123810",
    "end": "4131310"
  },
  {
    "text": "so definitely they will fall into I'll address both questions that I could hear",
    "start": "4131310",
    "end": "4136949"
  },
  {
    "text": "you I'm sorry folks I'm slightly deaf and I need some help with respect to",
    "start": "4136949",
    "end": "4146520"
  },
  {
    "text": "things falling off the end separately there is a facility called the",
    "start": "4146520",
    "end": "4152219"
  },
  {
    "text": "scratchpad this is not memory it is an",
    "start": "4152219",
    "end": "4157469"
  },
  {
    "text": "upper and store it retains values and internal format which was not the same",
    "start": "4157469",
    "end": "4162600"
  },
  {
    "text": "as I as a memory format and there are operations that say this value on the",
    "start": "4162600",
    "end": "4167670"
  },
  {
    "text": "belt park it in the scratch pad and later on another operation that says get it from the scratch pad and drop it on",
    "start": "4167670",
    "end": "4173580"
  },
  {
    "text": "the belt so values which need to be kept for long term because their users not",
    "start": "4173580",
    "end": "4180298"
  },
  {
    "text": "get coming up yet or their last use is not your coming up yet wind up being explicitly moved to the scratchpad the",
    "start": "4180299",
    "end": "4188370"
  },
  {
    "text": "great majority of operations that are produced are immediately used once and",
    "start": "4188370",
    "end": "4193588"
  },
  {
    "text": "immediately there immediately debt register death in a register machine is",
    "start": "4193589",
    "end": "4200510"
  },
  {
    "text": "extremely high there'll be a some kind of case people will use a register as",
    "start": "4200510",
    "end": "4206100"
  },
  {
    "text": "fast memory but the four things which are actually intermediate results they",
    "start": "4206100",
    "end": "4213420"
  },
  {
    "text": "tend to if your compilers doing a halfway decent job of our scheduling produces adjacent to",
    "start": "4213420",
    "end": "4219780"
  },
  {
    "text": "consumers and that their lifetime is very brief and the great majority of them if we sized the belt appropriately",
    "start": "4219780",
    "end": "4226320"
  },
  {
    "text": "the great majority of them will and fall off the belt because they're past the their last shoots but for those that are",
    "start": "4226320",
    "end": "4233010"
  },
  {
    "text": "they get dropped to the scratch pad and the other goal of encoding not only does",
    "start": "4233010",
    "end": "4240690"
  },
  {
    "text": "each family member have a unique binary encoding but each encoding slot has a",
    "start": "4240690",
    "end": "4247320"
  },
  {
    "text": "unique binary encoding if this slot has got an ALU and an FPU then it has to",
    "start": "4247320",
    "end": "4255510"
  },
  {
    "text": "support both integer and floating-point operations and our software produces a",
    "start": "4255510",
    "end": "4262860"
  },
  {
    "text": "binary encoding that encodes both integer and floating-point operations the adjacent slab which has only got an",
    "start": "4262860",
    "end": "4270210"
  },
  {
    "text": "ALU and not an FBO has its own unique encoding that only contains the integer",
    "start": "4270210",
    "end": "4276449"
  },
  {
    "text": "operations and not the floating-point operations these in coatings are mechanically generated from a",
    "start": "4276449",
    "end": "4282360"
  },
  {
    "text": "specification nobody does this by hand nobody lays out bits the specification",
    "start": "4282360",
    "end": "4288870"
  },
  {
    "text": "simply says in this slot is this function unit and separately that functionally your supports blah blah",
    "start": "4288870",
    "end": "4294480"
  },
  {
    "text": "blah blah blah blah and blah and the software which has been running for years is long stable software it",
    "start": "4294480",
    "end": "4301980"
  },
  {
    "text": "proceeds to produce a entropy optimal encoding with some special things so as",
    "start": "4301980",
    "end": "4309750"
  },
  {
    "text": "to improve the life of the decoder beyond simple optimal entropy and that's",
    "start": "4309750",
    "end": "4316920"
  },
  {
    "text": "mechanically generated and the trivial change you got a completely different binary encoding the way you're able to",
    "start": "4316920",
    "end": "4323250"
  },
  {
    "text": "handle on the binary portability which of course is important is the same way",
    "start": "4323250",
    "end": "4329610"
  },
  {
    "text": "that it's done in the IM the IBM as400 and its descendants and that is that",
    "start": "4329610",
    "end": "4338159"
  },
  {
    "text": "what actually appears in your load module is a member independent",
    "start": "4338159",
    "end": "4344360"
  },
  {
    "text": "representation of the program and at install or potentially load time",
    "start": "4344360",
    "end": "4350660"
  },
  {
    "text": "if it's that late or if you're building it wrong a program which effectively is",
    "start": "4350660",
    "end": "4357170"
  },
  {
    "text": "the last phase of the compiler we call it the specialized err translates the",
    "start": "4357170",
    "end": "4362390"
  },
  {
    "text": "member independent representation the program to the actual Bitsy's for that",
    "start": "4362390",
    "end": "4368450"
  },
  {
    "text": "member that targeted member dependent",
    "start": "4368450",
    "end": "4374090"
  },
  {
    "text": "representation is then cashed in the load module the next time you run it we simply pull up that binary but if you",
    "start": "4374090",
    "end": "4381680"
  },
  {
    "text": "take the file off to another machine the loader will look and say oh you don't",
    "start": "4381680",
    "end": "4387740"
  },
  {
    "text": "have a cached version of my machine runs the specialized err look kind of like",
    "start": "4387740",
    "end": "4393890"
  },
  {
    "text": "dynamic linking it runs a bit once for you for free cash the nuke the new one",
    "start": "4393890",
    "end": "4399290"
  },
  {
    "text": "and you end and this is the equivalent of a strip tool which remove or your excess cash ones that you don't want",
    "start": "4399290",
    "end": "4405050"
  },
  {
    "text": "this to save disk space and so forth yeah",
    "start": "4405050",
    "end": "4410770"
  },
  {
    "text": "you",
    "start": "4416670",
    "end": "4418730"
  }
]