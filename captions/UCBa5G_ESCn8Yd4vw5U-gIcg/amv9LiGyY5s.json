[
  {
    "start": "0",
    "end": "5460"
  },
  {
    "text": "Hi, everyone.  So today's the last lecture\nof lossless compression.",
    "start": "5460",
    "end": "14180"
  },
  {
    "text": "And so we'll look at one\nof the most important",
    "start": "14180",
    "end": "19250"
  },
  {
    "text": "lossless compression\ntechnique, LZ77. And in the second half\ntoday, we will look at some--",
    "start": "19250",
    "end": "25100"
  },
  {
    "text": "sort of to conclude the\nlossless compression part, we will look at\nsome practical tips on lossless compression, based\non mine and other people's",
    "start": "25100",
    "end": "32630"
  },
  {
    "text": "experience working\nwith compression. ",
    "start": "32630",
    "end": "38469"
  },
  {
    "text": "So in the last\ncouple of lectures, we have been looking at\ncompression for non-iid data, and we started looking at\nconditional entropy, right,",
    "start": "38470",
    "end": "48310"
  },
  {
    "text": "conditional probabilities. And then we went into\nprobability rate, which was, for the\npurpose of this lecture,",
    "start": "48310",
    "end": "53774"
  },
  {
    "text": "all you need to know is,\nit's the fundamental limit of lossless compression\nfor stationary sources.",
    "start": "53775",
    "end": "58900"
  },
  {
    "text": "Just like entropy is the\nfundamental limit for iid sources and conditional entropy\nis the fundamental limit",
    "start": "58900",
    "end": "64089"
  },
  {
    "text": "for Markov sources, right? And if you recall, we defined\nthe entropy rate in two ways,",
    "start": "64090",
    "end": "69640"
  },
  {
    "text": "one is, like, the incremental\nconditional probability, what is the limit as\nn goes to infinity,",
    "start": "69640",
    "end": "74920"
  },
  {
    "text": "and the other is\nthat if you think in terms of blocks\nof size n, what is the average entropy per block\nas n becomes larger and larger.",
    "start": "74920",
    "end": "82840"
  },
  {
    "text": "And then in the last\nlecture, we looked at context-based\narithmetic coding where we will end this\nvery important concept,",
    "start": "82840",
    "end": "89590"
  },
  {
    "text": "that prediction\nimplies compression. Right? If you have a good predictor,\nthat's a good compressor. And then, we looked at some\nspecific models for prediction,",
    "start": "89590",
    "end": "97369"
  },
  {
    "text": "k-th order adaptive\narithmetic coding, which we had a quiz\nquestion on, and we",
    "start": "97370",
    "end": "102620"
  },
  {
    "text": "looked at some more advanced\nmodels in less detail.",
    "start": "102620",
    "end": "109230"
  },
  {
    "text": "But then, we looked at the\nmost advanced model of all in more detail, which was\nthe large language models,",
    "start": "109230",
    "end": "114480"
  },
  {
    "text": "and we looked at how you can\npush compression to its limits. ",
    "start": "114480",
    "end": "121049"
  },
  {
    "text": "All of this was based on very\ncarefully modeling the data or learning the probability\ndistribution of the data.",
    "start": "121050",
    "end": "126375"
  },
  {
    "text": "Today, we will see a\nvery different technique where you don't do that,\nbasically, and still achieve excellent results.",
    "start": "126375",
    "end": "131775"
  },
  {
    "text": " OK, so lots to cover today. So what I'm going to do is, I\nwill not spend a lot of time",
    "start": "131775",
    "end": "139640"
  },
  {
    "text": "on the quiz. So for the first question,\nyou had a sequence that you wanted to encode\nwith the first order adaptive",
    "start": "139640",
    "end": "147050"
  },
  {
    "text": "arithmetic coding, right. We did an example of this\nin class, very similar. And you will have some practice\nin your homework as well.",
    "start": "147050",
    "end": "155750"
  },
  {
    "text": "But what I did was, I\ncreated this table for you, just to make sure\nyou understand, like, how to do this right.",
    "start": "155750",
    "end": "161720"
  },
  {
    "text": "So, at every step, you\nhave the previous symbol, you have the current symbol,\nyou have the counts before,",
    "start": "161720",
    "end": "167420"
  },
  {
    "text": "and then you update the counts\nso you get the counts after. And please, take\na look at these.",
    "start": "167420",
    "end": "175270"
  },
  {
    "text": "Unless anybody has any\nspecific question on the quiz, I will skip this\nquestion for now. ",
    "start": "175270",
    "end": "183830"
  },
  {
    "text": "OK, yeah. Please talk to us\nafter class if you didn't get any of\nthese or these answers",
    "start": "183830",
    "end": "189950"
  },
  {
    "text": "are not what you\nthought they were. The second question, or the\nfirst question in the quiz,",
    "start": "189950",
    "end": "195710"
  },
  {
    "text": "maybe let's talk\nabout that a bit more. So the first question was, you\nknow that your data is roughly",
    "start": "195710",
    "end": "202370"
  },
  {
    "text": "second order Markov but do\nnot know the actual transition probabilities. And we asked you\nwhether you should",
    "start": "202370",
    "end": "207710"
  },
  {
    "text": "use context-based arithmetic\ncoding or adaptive arithmetic coding. How many think\nit's the first one?",
    "start": "207710",
    "end": "213695"
  },
  {
    "text": " Second one? OK.",
    "start": "213695",
    "end": "219190"
  },
  {
    "text": "So, correct, right. Adaptive just means that you\ndon't assume some initial model that you know, and\nyou learn the model",
    "start": "219190",
    "end": "224530"
  },
  {
    "text": "from the data which just seems\nmore appropriate for-- when you don't know the\nsequence-- the probabilities.",
    "start": "224530",
    "end": "229720"
  },
  {
    "text": " Here, it's a third\norder Markov and you",
    "start": "229720",
    "end": "234900"
  },
  {
    "text": "know the exact distribution. So since you know\nthe distribution, there is no point in trying\nto learn it from the data. That's just less efficient.",
    "start": "234900",
    "end": "241600"
  },
  {
    "text": "And therefore,\nhere, the answer is, you just do the context-based\narithmetic coding.",
    "start": "241600",
    "end": "247107"
  },
  {
    "text": "There was a third\nquestion in the quiz which we had to remove\nbecause I didn't cover the material in time.",
    "start": "247107",
    "end": "252959"
  },
  {
    "text": "You know nothing\nabout the input data. So you have literally\nno idea what's in there.",
    "start": "252960",
    "end": "258160"
  },
  {
    "text": "What would you do in that case? Right? And actually, this is\nwhat you will do, LZ77.",
    "start": "258160",
    "end": "263710"
  },
  {
    "text": "That is the topic\nof today's lecture, where you don't make any\nassumptions about your data. ",
    "start": "263710",
    "end": "270450"
  },
  {
    "text": "OK, so before I\nstart, any questions on the previous material? ",
    "start": "270450",
    "end": "278630"
  },
  {
    "text": "OK. ",
    "start": "278630",
    "end": "287050"
  },
  {
    "text": "--did his-- 1948 paper\npeople worked on iid sources. They did this\ncontext-based stuff.",
    "start": "287050",
    "end": "294030"
  },
  {
    "text": "But nobody had an\nidea, whether for a general stationary\ndistribution, can you have a compressor that works for\nany distribution, irrespective",
    "start": "294030",
    "end": "301590"
  },
  {
    "text": "of, like, don't need to know\nthe distribution in advance. And then, there were\nA sequence of papers",
    "start": "301590",
    "end": "307290"
  },
  {
    "text": "by Abraham Lempel and\nJacob Ziv at Bell Labs",
    "start": "307290",
    "end": "312690"
  },
  {
    "text": "at the time, who basically just\nchange the world of compression in 1977 and '78.",
    "start": "312690",
    "end": "320760"
  },
  {
    "text": "So what we'll study today\nis something-- the concept of universal compressors. A universal\ncompressor is a scheme",
    "start": "320760",
    "end": "327240"
  },
  {
    "text": "that does well on\nany stationary input without prior knowledge of\nthe source distribution.",
    "start": "327240",
    "end": "332730"
  },
  {
    "text": "So it assumes nothing and still\ngets you the optimal results.",
    "start": "332730",
    "end": "337800"
  },
  {
    "text": "And as part of that, we'll\nlook at really the most common scheme used in compression\ntoday, the zip compressor,",
    "start": "337800",
    "end": "345270"
  },
  {
    "text": "as you might have heard of.  So let me define\nuniversal compression,",
    "start": "345270",
    "end": "353180"
  },
  {
    "text": "just to be slightly formal. So you have a compressor. The compressor has\nsome length function,",
    "start": "353180",
    "end": "359130"
  },
  {
    "text": "which is the number of bits\nit takes to describe xn. And it is universal if the\nexpected length per symbol",
    "start": "359130",
    "end": "369310"
  },
  {
    "text": "matches the entropy rate for\nany stationary ergodic source. Ergodic it is just a\ntechnical condition,",
    "start": "369310",
    "end": "375940"
  },
  {
    "text": "no need to worry about it. But really, for any\nstationary source. So for any stationary source,\nit achieves the entropy rate.",
    "start": "375940",
    "end": "383169"
  },
  {
    "text": "No qualifiers, no\nmention that it will achieve the\nentropy for a k-th order",
    "start": "383170",
    "end": "388910"
  },
  {
    "text": "but not for a k plus\n1 i-th order, no. For any stationary\nsource, however complicated it might be.",
    "start": "388910",
    "end": "394560"
  },
  {
    "text": "So really a single compressor\nis asymptotically optimal. Asymptotically because\nthis happens in the limit",
    "start": "394560",
    "end": "401240"
  },
  {
    "text": "for every distribution.  For a long time before Lempel\nand Ziv did their work people,",
    "start": "401240",
    "end": "408610"
  },
  {
    "text": "believed this was impossible. So even at the time\nand even today, this is a very surprising result\nthat such a thing is possible.",
    "start": "408610",
    "end": "416560"
  },
  {
    "text": "And we'll see. It's actually very simple. ",
    "start": "416560",
    "end": "424860"
  },
  {
    "text": "Another sort of on\nthe flip side a way to think about this in terms\nof universal prediction,",
    "start": "424860",
    "end": "430530"
  },
  {
    "text": "recall from last lecture\nthat every compressor induces a distribution. So for any compressor\nwhich gives you",
    "start": "430530",
    "end": "437370"
  },
  {
    "text": "a length function, l,\nyou get a p-hat, which is 2 power minus l.",
    "start": "437370",
    "end": "443380"
  },
  {
    "text": "And what this is saying is that\na universal compressor's p-hat,",
    "start": "443380",
    "end": "448510"
  },
  {
    "text": "the distribution is learning\nover the data approximates any stationary distribution\narbitrarily closely as n grows.",
    "start": "448510",
    "end": "456940"
  },
  {
    "text": "So just as like a\nrough figure, so this",
    "start": "456940",
    "end": "462080"
  },
  {
    "text": "is like the p for different\nstationary distributions,",
    "start": "462080",
    "end": "470110"
  },
  {
    "text": "the distribution for\nall of them, basically. ",
    "start": "470110",
    "end": "475720"
  },
  {
    "text": "And somehow, there is this\none point here, p-hat LZ,",
    "start": "475720",
    "end": "481250"
  },
  {
    "text": "which is close to every other\npoint in the distribution. So there exists one\nsingle distribution that's a good approximator\nof every other distribution.",
    "start": "481250",
    "end": "489170"
  },
  {
    "text": " So I spoke of it in\na very handwavy way,",
    "start": "489170",
    "end": "497319"
  },
  {
    "text": "you need to rigorously formulate\nit, which we won't do here. But talk to Tsachy, he's like\nan expert in these matters.",
    "start": "497320",
    "end": "504430"
  },
  {
    "text": "He has extended the theory\nof universal compression to universal denoising,\nuniversal lossy compression.",
    "start": "504430",
    "end": "510610"
  },
  {
    "text": "And look at his lecture notes,\nor whenever he teaches it next time, this EE 376C,\nwhich is completely focused",
    "start": "510610",
    "end": "518049"
  },
  {
    "text": "on the theory of\nuniversal compression and universal\ndenoising and so on. You can also look at this\npaper if you are interested.",
    "start": "518049",
    "end": "526610"
  },
  {
    "text": "But for now, let's\ncome back to LZ. ",
    "start": "526610",
    "end": "532590"
  },
  {
    "text": "Any questions on\nthe general concept of universal compression,\nor universal prediction? We are just saying that\nyou have a compressor",
    "start": "532590",
    "end": "539573"
  },
  {
    "text": "or you have a\npredictor that works well for any\nstationary distribution without making any assumptions.",
    "start": "539573",
    "end": "544710"
  },
  {
    "text": "And we'll see how that happens. ",
    "start": "544710",
    "end": "551100"
  },
  {
    "text": "OK. So the LZ77, or Lempel-Ziv\nfamily of universal algorithms,",
    "start": "551100",
    "end": "557910"
  },
  {
    "text": "there are many, many\nimplementations. So they had two papers--\none in 1977, one in 1978,",
    "start": "557910",
    "end": "564399"
  },
  {
    "text": "both of them describing\ndifferent schemes. The one in 1977 is called\nLZ77, the other one LZ78,",
    "start": "564400",
    "end": "571180"
  },
  {
    "text": "and then people made\nmodifications of those by adding different things.",
    "start": "571180",
    "end": "576190"
  },
  {
    "text": "All of these are used in a bunch\nof these different compressors. You see gzip and\nzstandard, you see",
    "start": "576190",
    "end": "582980"
  },
  {
    "text": "PNG, which is an\nimage compressor, ZIP, which is, again, a\nvery common compressor. You see GIF here,\nwhich is image, right?",
    "start": "582980",
    "end": "592340"
  },
  {
    "text": "And here are some references\nif you want to look at these. We we'll look at some\nof these in more detail",
    "start": "592340",
    "end": "598340"
  },
  {
    "text": "as we move along the lecture. But this is just to say that\nmost of the common compressors",
    "start": "598340",
    "end": "603750"
  },
  {
    "text": "today are built upon some\nversion of Lempel-Ziv. ",
    "start": "603750",
    "end": "610060"
  },
  {
    "text": "So I don't know if\nyou'll listen to music, or to this particular song.",
    "start": "610060",
    "end": "616080"
  },
  {
    "text": "The idea of LZ77\nalgorithms is very simple. ",
    "start": "616080",
    "end": "621500"
  },
  {
    "text": "History repeats itself. You have some data,\nyou see some sequence, you have probably\nseen that before",
    "start": "621500",
    "end": "628660"
  },
  {
    "text": "in some form or the other. And if you have seen\nit before, why not",
    "start": "628660",
    "end": "634220"
  },
  {
    "text": "just put a pointer that I\nsaw this word 100 words ago.",
    "start": "634220",
    "end": "640129"
  },
  {
    "text": "Or I saw this sentence,\n1,000 sentences ago. Something like that. Right? This song in particular,\nas you might imagine,",
    "start": "640130",
    "end": "647540"
  },
  {
    "text": "is very well compressible\nwith this technique. It just repeats. Each line is a repeat\nof the previous line.",
    "start": "647540",
    "end": "653945"
  },
  {
    "text": " And [INAUDIBLE] last time made\nthe class listen to the song,",
    "start": "653945",
    "end": "663080"
  },
  {
    "text": "so that was good. Right. So this is the idea, right. Idea is simple.",
    "start": "663080",
    "end": "668870"
  },
  {
    "text": "Replace repeated segments in\ndata with pointers and lengths. So if we wanted to\ndraw it here, you",
    "start": "668870",
    "end": "675080"
  },
  {
    "text": "would say that this\naround the world--",
    "start": "675080",
    "end": "680290"
  },
  {
    "text": "so this a is like\nthis whole thing is a match of this previous thing.",
    "start": "680290",
    "end": "686010"
  },
  {
    "text": "So you need to\nstore some length. And they need to\nstore this offset.",
    "start": "686010",
    "end": "691040"
  },
  {
    "text": "Offset is, like, how far in the\npast has this thing occurred, and how long is the match.",
    "start": "691040",
    "end": "698100"
  },
  {
    "text": "So with that in mind,\nlet's just do an example, I think will give you a\nvery good sense of what",
    "start": "698100",
    "end": "704399"
  },
  {
    "text": "we are talking about. So what LZ77, that's the\nversion we will look at in more",
    "start": "704400",
    "end": "710009"
  },
  {
    "text": "detail because that's\nthe one used in most of the popular algorithms. ",
    "start": "710010",
    "end": "716350"
  },
  {
    "text": "Starts-- you start with\na sequence like this. And then what you do is you\ndivide it into three streams,",
    "start": "716350",
    "end": "723830"
  },
  {
    "text": "one is the unmatched\nliterals, the match length, and the match offset, and let's\nunderstand these one by one.",
    "start": "723830",
    "end": "731689"
  },
  {
    "text": "So OK.",
    "start": "731690",
    "end": "744490"
  },
  {
    "text": "So, I see the first A here. This is the first character. I've never seen\nit before clearly",
    "start": "744490",
    "end": "749980"
  },
  {
    "text": "because that's the\nfirst character. So that has to go into\nan unmatched literal, there is no match.",
    "start": "749980",
    "end": "755830"
  },
  {
    "text": "I see a B. I've never\nseen a B before, it's the first B. So again, that\ngoes into unmatched literal.",
    "start": "755830",
    "end": "763620"
  },
  {
    "text": "Now how about this guy? Have I seen a B before? Yeah, I just saw a B, right? So nice.",
    "start": "763620",
    "end": "770220"
  },
  {
    "text": "I got a match. How long is the Match",
    "start": "770220",
    "end": "775878"
  },
  {
    "text": "Right, the matches\njust of length one because I can't\nextend it, right, because I've seen B before\nbut I've never seen BA before.",
    "start": "775878",
    "end": "782040"
  },
  {
    "text": "So it's a match of length\none at offset one, right, because it occurred just\none character before.",
    "start": "782040",
    "end": "788580"
  },
  {
    "text": "OK. Now have I seen an A? Have seen A B?",
    "start": "788580",
    "end": "796329"
  },
  {
    "text": "Have I seen ABB?  Have I seen ABBA?",
    "start": "796330",
    "end": "802950"
  },
  {
    "text": "Right, so here, I\nsee some disagreement among the students. I have indeed seen\nan ABB, right, we",
    "start": "802950",
    "end": "812399"
  },
  {
    "text": "are seeing this\nABBA here, and we'll come to this sort of overlapping\nmatches in a little bit.",
    "start": "812400",
    "end": "817920"
  },
  {
    "text": "But for now, trust me. Have I seen ABBABB?",
    "start": "817920",
    "end": "823430"
  },
  {
    "text": "Yes, I have. You see, this sequence is an\nexact match of this sequence,",
    "start": "823430",
    "end": "835270"
  },
  {
    "text": "right? At least, this I think we can\nagree with that this ABBABB is match of the previous thing.",
    "start": "835270",
    "end": "840700"
  },
  {
    "text": " So there was no unmatched\nliteral, nothing here.",
    "start": "840700",
    "end": "849613"
  },
  {
    "text": "What is the match length? ",
    "start": "849613",
    "end": "859000"
  },
  {
    "text": "Six. I hope I heard a six. OK. What's the offset? ",
    "start": "859000",
    "end": "866400"
  },
  {
    "text": "How far is the start position\nof-- how far is this from this, basically?",
    "start": "866400",
    "end": "872190"
  },
  {
    "text": "It's a three, right? Because the previous are three\ncharacters before, so this, OK.",
    "start": "872190",
    "end": "879850"
  },
  {
    "text": "Now I get a C, C I've\nnever seen a match, right? So c is unmatched. And then I see AB, this one is\nsimple, I just saw an AB here.",
    "start": "879850",
    "end": "889152"
  },
  {
    "text": "OK, this time please help me. What is the offset? The length is two. What is the offset, just to\nmake sure people are following?",
    "start": "889152",
    "end": "895640"
  },
  {
    "text": " Can you repeat, please, sorry.",
    "start": "895640",
    "end": "900730"
  },
  {
    "text": "Four. Four. Yep, so if you call this 0,\nthen this is minus 1, minus 2,",
    "start": "900730",
    "end": "905899"
  },
  {
    "text": "minus 3, minus 4, yes, 4. Right. ",
    "start": "905900",
    "end": "912630"
  },
  {
    "text": "OK, that's it, basically. That's LZ77. That's how you pass a sequence\ninto these three streams.",
    "start": "912630",
    "end": "918480"
  },
  {
    "text": "Unmatched literals, match\nlength, and match offset. ",
    "start": "918480",
    "end": "923670"
  },
  {
    "text": "For now, trust me for just\na second on this thing that this overlapping\nmatch thing will be fine,",
    "start": "923670",
    "end": "929820"
  },
  {
    "text": "and we'll do a\ndecoding very soon. Other than that, any questions?",
    "start": "929820",
    "end": "934860"
  },
  {
    "text": " OK, good.",
    "start": "934860",
    "end": "941630"
  },
  {
    "text": "You will get\nexperience on practice on this, as usual in the quiz.",
    "start": "941630",
    "end": "947130"
  },
  {
    "text": "So, we did it at home,\nwe got the same things",
    "start": "947130",
    "end": "952290"
  },
  {
    "text": "that we just got, right? Now we will decode it. OK, let's try to\ndecode the same thing.",
    "start": "952290",
    "end": "959279"
  },
  {
    "text": "You know the answer, but let's\ntry to not cheat, and actually try to decode it.",
    "start": "959280",
    "end": "964290"
  },
  {
    "text": "So, what do I start with? What is the first character?",
    "start": "964290",
    "end": "970230"
  },
  {
    "text": " A, right? A and then followed by--",
    "start": "970230",
    "end": "979029"
  },
  {
    "text": "A followed by a B, because you\nfirst copy the unmatched part.",
    "start": "979030",
    "end": "985040"
  },
  {
    "text": "Now you have a match length of\none and offset of one, right? So the character\nthat's coming here has to be, like, from\nhere, just one past,",
    "start": "985040",
    "end": "992780"
  },
  {
    "text": "and it has a length, just\none length match, so ABB. OK. Now, you have a match length\nof 6 and a match offset of 3.",
    "start": "992780",
    "end": "1000880"
  },
  {
    "text": "OK, so let's do it\ncharacter by character. Here, I have a offset of 3. ",
    "start": "1000880",
    "end": "1007500"
  },
  {
    "text": "So that goes here. I get A. Then I do the next\none, here, here, right?",
    "start": "1007500",
    "end": "1018330"
  },
  {
    "text": "So far, I think-- I hope we are all happy, right. Now we come to that\noverlapping part.",
    "start": "1018330",
    "end": "1023910"
  },
  {
    "text": "Now try to decode this thing. But the offset is 3 and this\nguy is already decoded, right,",
    "start": "1023910",
    "end": "1029849"
  },
  {
    "text": "this red part. So I can actually decode\nthis one, based on this one. This is again A,\nthis is a B. And this",
    "start": "1029849",
    "end": "1038339"
  },
  {
    "text": "is a B. Was that clear? Basically, if you\nsequentially decode it, it's fine if the matches\noverlap with each other.",
    "start": "1038339",
    "end": "1046599"
  },
  {
    "text": "Like the match overlaps\nwith itself, really. And then you get a C, which\nis an unmatched literal.",
    "start": "1046599",
    "end": "1053030"
  },
  {
    "text": "And then you have a\nmatch length of two, so you have two things that\nmatch at a offset of four.",
    "start": "1053030",
    "end": "1059940"
  },
  {
    "text": "So, from here, you go here, so\nA. And from here, you go here.",
    "start": "1059940",
    "end": "1069200"
  },
  {
    "text": "That's B. OK. So just wanted to do\none example in class.",
    "start": "1069200",
    "end": "1075410"
  },
  {
    "text": "So that you can do the\nquiz question on your own. Right. ",
    "start": "1075410",
    "end": "1082710"
  },
  {
    "text": "OK. So, we have the decoding.",
    "start": "1082710",
    "end": "1089930"
  },
  {
    "text": "So you can write this in the\nform of a pseudocode, right? A very, very simple pseudocode. So for an input sequence , which\nis like x 0, x 1 dot, dot, dot,",
    "start": "1089930",
    "end": "1098100"
  },
  {
    "text": "right? And suppose we have\ndone until x i minus 1, then what you will try to do\nis find the largest k, where",
    "start": "1098100",
    "end": "1108870"
  },
  {
    "text": "k is the match length here. ",
    "start": "1108870",
    "end": "1116299"
  },
  {
    "text": "And i minus j is your offset. So this is basically telling\nyou that x i to x i plus k",
    "start": "1116300",
    "end": "1124390"
  },
  {
    "text": "should match x j to x plus k. Just the definition of a\nmatch, that it matches.",
    "start": "1124390",
    "end": "1131030"
  },
  {
    "text": "And if no match found,\nstore as literal.",
    "start": "1131030",
    "end": "1136270"
  },
  {
    "text": "That's it, basically. Very simple, basic idea. ",
    "start": "1136270",
    "end": "1142270"
  },
  {
    "text": "The decoding pseudocode,\nyou read any literals, and you copy to the output.",
    "start": "1142270",
    "end": "1147730"
  },
  {
    "text": "And if you have a match\nof length l and offset o, you basically copy\nit over, right?",
    "start": "1147730",
    "end": "1153443"
  },
  {
    "text": "And there are two\ncases-- one case is if the length of the match\nis less than the offset. So that's a scenario,\nlike, you are here,",
    "start": "1153443",
    "end": "1161820"
  },
  {
    "text": "and this is your\nlength of the match, and this is your\noffset, which is, like,",
    "start": "1161820",
    "end": "1167320"
  },
  {
    "text": "much bigger than length. So then what you need\nto do is you just",
    "start": "1167320",
    "end": "1172850"
  },
  {
    "text": "copy this whole thing here it's\na very simple copy operation. Right? And the other case, so this\nis like case I, l less than o,",
    "start": "1172850",
    "end": "1185240"
  },
  {
    "text": "so length is less\nthan offset, and then the case II is where again\nyou have a match of length l",
    "start": "1185240",
    "end": "1194020"
  },
  {
    "text": "but offset is very small. So in this case, what\nhappens is the thing",
    "start": "1194020",
    "end": "1200679"
  },
  {
    "text": "overlaps as we just\nsaw, and then you have to be more careful\nwhen you're decoding it.",
    "start": "1200680",
    "end": "1207510"
  },
  {
    "text": "But what we did it just now. If you do it by\nhand, you can do it. If you do it in code,\nyou can, again, do it.",
    "start": "1207510",
    "end": "1212940"
  },
  {
    "text": "So OK.  So this question\nwill be in your quiz.",
    "start": "1212940",
    "end": "1219730"
  },
  {
    "text": " You will just do the unparsing,\nbasically of this guy,",
    "start": "1219730",
    "end": "1228210"
  },
  {
    "text": "we'll ask you to decode it,\nand I think if you decode it, then you've understood\nthe algorithm well enough.",
    "start": "1228210",
    "end": "1233549"
  },
  {
    "text": "And actually we\nencoded it in a way that doesn't match the way we--",
    "start": "1233550",
    "end": "1239538"
  },
  {
    "text": "one thing you will\nlearn very quickly is that there are many ways\nto encode it with LZ77. For example, maybe\nyou are very lazy,",
    "start": "1239538",
    "end": "1246182"
  },
  {
    "text": "you don't try to match\nanything, you just put everything as a literal. That's a valid LZ77 encoding.",
    "start": "1246182",
    "end": "1252960"
  },
  {
    "text": "Or you try it very hard\nand find the best matches. That's also valid LZ77 encoding.",
    "start": "1252960",
    "end": "1258030"
  },
  {
    "text": "Maybe you don't allow your match\nlengths to be more than 100, for some reason. That's a valid thing.",
    "start": "1258030",
    "end": "1263040"
  },
  {
    "text": "So there are many\nencoding choices you can make that all work with\nthe same decoding algorithm. ",
    "start": "1263040",
    "end": "1272220"
  },
  {
    "text": "OK any questions so far? Hopefully this is good.",
    "start": "1272220",
    "end": "1277809"
  },
  {
    "text": "OK.  So, encoding step.",
    "start": "1277810",
    "end": "1285970"
  },
  {
    "text": "Start with the input data,\ndo this LZ77 parsing, you get your literals\nand you get your matches.",
    "start": "1285970",
    "end": "1292370"
  },
  {
    "text": "And then you do some\nsort of entropy coding. You use one of your things\nlike Huffman coding or ANS",
    "start": "1292370",
    "end": "1297815"
  },
  {
    "text": "or arithmetic coding, which\nwe have been listening about. And then you get\nthe compressed file.",
    "start": "1297815",
    "end": "1303910"
  },
  {
    "text": "Different implementations\ndiffer in this, and we'll come back to this\nin much more detail shortly.",
    "start": "1303910",
    "end": "1311380"
  },
  {
    "text": "But before we do that,\nlet me spend not too much time but a little time\ntalking about why this",
    "start": "1311380",
    "end": "1318460"
  },
  {
    "text": "works, why is this optimal. We made a very strong\nclaim that LZ77",
    "start": "1318460",
    "end": "1323470"
  },
  {
    "text": "works for any\nstationary sequence, irrespective of\nthe distribution. So we should at least try to\nget some intuition into that,",
    "start": "1323470",
    "end": "1331270"
  },
  {
    "text": "if not the full proof.  OK, so consider\nthis iid sequence.",
    "start": "1331270",
    "end": "1337650"
  },
  {
    "text": "You just have an iid sequence.  And if you have a\nsymbol, like value a,",
    "start": "1337650",
    "end": "1344309"
  },
  {
    "text": "for example, which has\nprobability p of a, what is the expected gap between\nconsecutive occurrences of a?",
    "start": "1344310",
    "end": "1351510"
  },
  {
    "text": "How often would consecutive\noccurrences of a b on average? ",
    "start": "1351510",
    "end": "1358820"
  },
  {
    "text": "OK, tell me one thing. If a has a high\nprobability, would you occur the gap between\nconsecutive a's",
    "start": "1358820",
    "end": "1364309"
  },
  {
    "text": "to be more or less? ",
    "start": "1364310",
    "end": "1370130"
  },
  {
    "text": "Less, right? Because if it a is more common,\nit will occur very frequently. So the gap between consecutive\na's will be small, OK.",
    "start": "1370130",
    "end": "1375640"
  },
  {
    "text": "And if a is less likely then\nthere will be a big gap between consecutive a's.",
    "start": "1375640",
    "end": "1381125"
  },
  {
    "text": "OK.  Let's try to do it in two steps.",
    "start": "1381125",
    "end": "1387120"
  },
  {
    "text": "So in a block of size\nn, how many times do you expect to see a? ",
    "start": "1387120",
    "end": "1397140"
  },
  {
    "text": "S iid, the probability\nof a is P a. ",
    "start": "1397140",
    "end": "1409548"
  },
  {
    "text": "And multiply by P a. Yes. And multiplied by P a, right. Why? ",
    "start": "1409548",
    "end": "1417650"
  },
  {
    "text": "Each [INAUDIBLE]\nprobability of P a. [INAUDIBLE] expectation of the\nsum of all those [INAUDIBLE]..",
    "start": "1417650",
    "end": "1428370"
  },
  {
    "text": "Yeah, so the answer was, each of\nthem has a probability of p a, of being a, therefore the\nexpected number of occurrences",
    "start": "1428370",
    "end": "1435840"
  },
  {
    "text": "will be n times P a. But as we as we saw\nin the AP lecture, or you might have seen\nbefore, you can say much more.",
    "start": "1435840",
    "end": "1443360"
  },
  {
    "text": "You can actually say\nthat it will actually be very close to n,\nn times P a because of the law of large numbers.",
    "start": "1443360",
    "end": "1448390"
  },
  {
    "text": "Right? So that is correct\nand as n gets larger, you actually see it\nwith a high probability,",
    "start": "1448390",
    "end": "1455070"
  },
  {
    "text": "being close to n times P a. OK, so let's say n is,\nlike, let's say, 1,000,",
    "start": "1455070",
    "end": "1465010"
  },
  {
    "text": "and let's say n\ntimes P a is 200. So what is your expected\ngap between consecutive a's?",
    "start": "1465010",
    "end": "1474100"
  },
  {
    "text": "How far apart are\na is on average? If you have, say you have 1,000\ntotal, and you have 200 a's.",
    "start": "1474100",
    "end": "1481780"
  },
  {
    "text": " Anyone, anybody?",
    "start": "1481780",
    "end": "1487100"
  },
  {
    "text": " How many think it's 4? ",
    "start": "1487100",
    "end": "1494440"
  },
  {
    "text": "5? OK, I hear 5. Good. So 5 is 1,000 by 200. This is just, like,\ncounting type arguments.",
    "start": "1494440",
    "end": "1502320"
  },
  {
    "text": " Right, because we have 1,000\nthings and you have 200 a's, so on average, they're\nlike five apart, roughly.",
    "start": "1502320",
    "end": "1509540"
  },
  {
    "text": "OK. So, really, the average spacing\nin 1 over P a, n over n--",
    "start": "1509540",
    "end": "1518860"
  },
  {
    "text": "n times P a, so 1 over P a\nis the average gap between consecutive a's.",
    "start": "1518860",
    "end": "1525010"
  },
  {
    "text": "So now, we have this. We will take a very giant\nleap, and let's not read this,",
    "start": "1525010",
    "end": "1531280"
  },
  {
    "text": "I just pasted it, but really\nread this second part. So if you have\nsome sequence, x 0",
    "start": "1531280",
    "end": "1540470"
  },
  {
    "text": "to n minus 1, the same\nsequence, x 0 to n minus 1 also occurred roughly these\nmany positions ago.",
    "start": "1540470",
    "end": "1547490"
  },
  {
    "text": "So, we were just talking about\niid and the single symbol.",
    "start": "1547490",
    "end": "1552890"
  },
  {
    "text": "But you can extend\nthis to sequences in a stationary distribution. You can actually show\nwith this Kac's lemma",
    "start": "1552890",
    "end": "1559730"
  },
  {
    "text": "that if you see some\nsequence of length n now, the average sort of time\nbefore-- like, last time you",
    "start": "1559730",
    "end": "1566750"
  },
  {
    "text": "saw the sequence is\nactually 1 over probability of that sequence. It's like a straightforward\nextension of, like, a,",
    "start": "1566750",
    "end": "1573050"
  },
  {
    "text": "you saw one by P a ago, x\nn, you saw one by p x n ago. That sort of like the idea here.",
    "start": "1573050",
    "end": "1582590"
  },
  {
    "text": "And now, if you\nconnect it to LZ77, this roughly means that\nthe match offset in LZ77",
    "start": "1582590",
    "end": "1589040"
  },
  {
    "text": "is 1 over p of x n, right? Because this is the offset. You found a match basically.",
    "start": "1589040",
    "end": "1594620"
  },
  {
    "text": "You are likely to\nfind the match, like, these many symbols ago.",
    "start": "1594620",
    "end": "1599980"
  },
  {
    "text": "So any questions so far? This is very high\nlevel proof, right, like the actual proof will have\nmany nuances and so on, which",
    "start": "1599980",
    "end": "1607180"
  },
  {
    "text": "we'll not try to cover here. It's in the [INAUDIBLE] book,\nit's in the EE 376C notes",
    "start": "1607180",
    "end": "1613960"
  },
  {
    "text": "and so on. For now, this will suffice. ",
    "start": "1613960",
    "end": "1621450"
  },
  {
    "text": "Actually-- OK, actually this. So now, if you have an integer,\nwhich is like 1 over p x n,",
    "start": "1621450",
    "end": "1628050"
  },
  {
    "text": "do you remember like if\nyou have an integer n, then you can use like\na fixed length code, roughly encode it in\nlog n bits, right,",
    "start": "1628050",
    "end": "1634860"
  },
  {
    "text": "like the usual thing where\nyou can encode an integer n with log n bits.",
    "start": "1634860",
    "end": "1640640"
  },
  {
    "text": "So similarly, you can encode\nthis match offset, 1 over p,",
    "start": "1640640",
    "end": "1645980"
  },
  {
    "text": "with roughly log 1 over p bits. What does this log 1\nover p remind you of?",
    "start": "1645980",
    "end": "1652655"
  },
  {
    "text": " Any rule that we\nhave been talking",
    "start": "1652655",
    "end": "1659250"
  },
  {
    "text": "about from the second\nlecture, basically, the thumb rule of compression that if you\ncan achieve log 1 over p bits,",
    "start": "1659250",
    "end": "1667149"
  },
  {
    "text": "you are basically optimal. Right? So, minor note that you\ncan show relatively easily",
    "start": "1667150",
    "end": "1676700"
  },
  {
    "text": "that the lengths and\nliterals don't really contribute anything. It's really the\noffsets that take up, theoretically, all\nof the space in LZ77.",
    "start": "1676700",
    "end": "1684890"
  },
  {
    "text": "So we'll just focus\non the offsets. And then, expanding these many\nbits, log 1 over p x n bits,",
    "start": "1684890",
    "end": "1691809"
  },
  {
    "text": "means we are following\nthe thumb rule, and we use, on average, if\nyou take the expectation here,",
    "start": "1691810",
    "end": "1697270"
  },
  {
    "text": "you get basically H\nof X n, so therefore, for encoding n symbols,\nyou are using H of X n bits",
    "start": "1697270",
    "end": "1702549"
  },
  {
    "text": "on average, which as we know,\nis the optimal thing to do. You can't do better than that. And then you just\ntake n to the limit,",
    "start": "1702550",
    "end": "1709120"
  },
  {
    "text": "and you get your entropy rate. So, good.",
    "start": "1709120",
    "end": "1714914"
  },
  {
    "text": " So the idea is as\nsimple as a sequence",
    "start": "1714915",
    "end": "1720480"
  },
  {
    "text": "is likely to be seen 1 over\np of that sequence before and therefore you can encode\nit with log 1 over p bits,",
    "start": "1720480",
    "end": "1728070"
  },
  {
    "text": "and therefore, you can\nachieve the entropy rate. Right?",
    "start": "1728070",
    "end": "1734080"
  },
  {
    "text": "Any questions? Is the high level sort\nof flow of logic clear? ",
    "start": "1734080",
    "end": "1740159"
  },
  {
    "text": "If you are unhappy with\nsome of the details, you have a full right to do so.",
    "start": "1740160",
    "end": "1746980"
  },
  {
    "text": "Maybe we can point\nyou to references if you want to look\nat the actual proof. ",
    "start": "1746980",
    "end": "1753940"
  },
  {
    "text": "Yeah. So there are proofs. Sadly, the LZ77 proof,\neven though the idea sounds very simple, it's\nsomewhat tricky to prove.",
    "start": "1753940",
    "end": "1761250"
  },
  {
    "text": "LZ78 is much better\nin terms of theory. But there is a reason we look\nat this more because it's",
    "start": "1761250",
    "end": "1769170"
  },
  {
    "text": "used much more in practice. So the proofs are not as\nsatisfying from a theory perspective. But this argument is like\nthe core of the proof",
    "start": "1769170",
    "end": "1776850"
  },
  {
    "text": "and then you need to\ndo a lot of things to actually get there, which\nI have not actually seen.",
    "start": "1776850",
    "end": "1782360"
  },
  {
    "text": "So yeah.  There's another reason,\nlike, the proof maybe",
    "start": "1782360",
    "end": "1788559"
  },
  {
    "text": "is less important to\nus in this lecture is that this asymptotic theory\ndoesn't fully explain",
    "start": "1788560",
    "end": "1796970"
  },
  {
    "text": "how well it does in practice. The theory-- the\ntheoretical proofs are, like, somehow not\nable to convince us",
    "start": "1796970",
    "end": "1803710"
  },
  {
    "text": "that LZ77 should be so good. For a k-th order\nMarkov process, you can show that LZ77 will\nachieve its entropy rate,",
    "start": "1803710",
    "end": "1811059"
  },
  {
    "text": "the conditional\nentropy in the limit. But for normal-sized data, you\ndon't expect it to do so well.",
    "start": "1811060",
    "end": "1817419"
  },
  {
    "text": "There is a big-- like, if you think of\nterms of, like, the proof, right, if something is\nconverging to something,",
    "start": "1817420",
    "end": "1822940"
  },
  {
    "text": "there is a convergence rate. How fast does it approach\nthe entropy rate, and the convergence\nrates are not amazing.",
    "start": "1822940",
    "end": "1829450"
  },
  {
    "text": "However, in practice, it\ndoes very well on real data, not on these k-th\norder Markov processes.",
    "start": "1829450",
    "end": "1835900"
  },
  {
    "text": "And reason is that the world is\nnot really a k-th order Markov process. Your English text,\nyou see far longer",
    "start": "1835900",
    "end": "1842320"
  },
  {
    "text": "repeats than you\nwould ever imagine seeing with a k-th\norder Markov process. English is much\nmore complicated.",
    "start": "1842320",
    "end": "1848050"
  },
  {
    "text": "Like a person's name in a text\nwill repeat so many times. If you are trying to model\nit with a k-th order Markov",
    "start": "1848050",
    "end": "1853960"
  },
  {
    "text": "process, you won't be really\nable to model it very well. So that's why, like,\nwe saw last time,",
    "start": "1853960",
    "end": "1860380"
  },
  {
    "text": "this simplistic k-th order\nmodels and so on, and the LLMs just, like, beat them\nby a wide, wide margin",
    "start": "1860380",
    "end": "1867830"
  },
  {
    "text": "because they are able to\nmodel it in a much better way than any of these small\norder models can do.",
    "start": "1867830",
    "end": "1874385"
  },
  {
    "start": "1874385",
    "end": "1880500"
  },
  {
    "text": "Of course, in terms of compute,\nthat's a different story. OK. ",
    "start": "1880500",
    "end": "1886720"
  },
  {
    "text": "So that's it for the proof. We will now look at some\npractical aspects of LZ77.",
    "start": "1886720",
    "end": "1894010"
  },
  {
    "text": "And I do want to spend some time\non practical tips which is new this year.",
    "start": "1894010",
    "end": "1899110"
  },
  {
    "text": "OK.  So what we did, as\nwe have been doing,",
    "start": "1899110",
    "end": "1906059"
  },
  {
    "text": "is we implemented\nLZ77 in SCL, so we had an implementation\nfrom last year and then, yesterday, night\ntime, I implemented another one",
    "start": "1906060",
    "end": "1914340"
  },
  {
    "text": "in the last couple of days. So we will look at\nsome things about how",
    "start": "1914340",
    "end": "1920075"
  },
  {
    "text": "the matches look\nin practice, how the match lengths and offsets. Of course, this year, with\nChatGPT, the code-writing part",
    "start": "1920075",
    "end": "1925620"
  },
  {
    "text": "became much easier. Anyway. So, I don't know if\nanybody identifies this.",
    "start": "1925620",
    "end": "1933280"
  },
  {
    "text": "This Is Alice in Wonderland\nwhich is in one of the text, like, the standard\ncompression corpuses.",
    "start": "1933280",
    "end": "1939700"
  },
  {
    "text": "So I just took it. And see, this is a match. So this sort of match, like, a\nk-th order model won't explain.",
    "start": "1939700",
    "end": "1947057"
  },
  {
    "text": "Like, this is a very\nlong, long match. Beautiful soup, beautiful\nsoup, soup of the evening.",
    "start": "1947057",
    "end": "1952570"
  },
  {
    "text": "So yeah. You see the selected text\nexactly matches between the two",
    "start": "1952570",
    "end": "1958390"
  },
  {
    "text": "paragraphs, right? LZ77 would just kill it. Like, think of it. Right? Each of these will take you\nsome number of bits to describe.",
    "start": "1958390",
    "end": "1964750"
  },
  {
    "text": "But LZ77, all of this it would\ndescribe in just two numbers-- the offset and the length. Right?",
    "start": "1964750",
    "end": "1970240"
  },
  {
    "text": "So that's the whole idea. Like, the text--\nafter you parse it, it becomes so much smaller and--",
    "start": "1970240",
    "end": "1975610"
  },
  {
    "text": "yeah. ",
    "start": "1975610",
    "end": "1982090"
  },
  {
    "text": "So this is, I think, from\na CSS file, I believe.",
    "start": "1982090",
    "end": "1989789"
  },
  {
    "text": "Like, this web styling things. And here, also, you see\nthese very long matches,",
    "start": "1989790",
    "end": "1996360"
  },
  {
    "text": "this transparent 25%,\ntransparent 25%, something. So again, very suitable\nfor LZ77 compression.",
    "start": "1996360",
    "end": "2004160"
  },
  {
    "text": " But not always do you\nfind these long matches.",
    "start": "2004160",
    "end": "2009890"
  },
  {
    "text": "Even short matches\nare good, and we will do some quick math to make\nsure that that makes sense.",
    "start": "2009890",
    "end": "2016429"
  },
  {
    "text": "So, pleasure-- this word,\nin this particular book, occurs-- like, the\nfirst time it occurs",
    "start": "2016430",
    "end": "2021700"
  },
  {
    "text": "and the second time it occurs\nis like 150 kilobytes, 150,000 bytes apart.",
    "start": "2021700",
    "end": "2027340"
  },
  {
    "text": "And it's on the first\npage of the book, and the last page of the book. So let's see if I can find it--",
    "start": "2027340",
    "end": "2036490"
  },
  {
    "text": "\"pleasure\" here,\nand \"pleasure\" here. Right?",
    "start": "2036490",
    "end": "2041530"
  },
  {
    "text": "So now, let's do a\nquick calculation, just a back of the envelope thing,\njust to just to compute, like,",
    "start": "2041530",
    "end": "2046930"
  },
  {
    "text": "is it worth it to\nencode this as a match. So these are the\nbest compressors,",
    "start": "2046930",
    "end": "2055859"
  },
  {
    "text": "spend roughly one bit per byte,\nbut like a usual Huffman code, I would spend much more. It would spend like let's\nsay three bits per byte,",
    "start": "2055860",
    "end": "2062850"
  },
  {
    "text": "just the back of the envelope. And \"pleasure\" has how many? It has eight characters so you\nwould spend like 24 bits on it.",
    "start": "2062850",
    "end": "2073419"
  },
  {
    "text": "Just doing a rough calculation. OK, now, you have one 50\nkilobytes, which is what?",
    "start": "2073420",
    "end": "2080169"
  },
  {
    "text": "150,000. So to describe it, you need\nroughly these many bits",
    "start": "2080170",
    "end": "2086480"
  },
  {
    "text": "log of this thing. ",
    "start": "2086480",
    "end": "2091888"
  },
  {
    "text": "Can anybody help me? Sorry. Calculate this, roughly.",
    "start": "2091889",
    "end": "2098680"
  },
  {
    "text": "If you have a calculator? ",
    "start": "2098680",
    "end": "2107230"
  },
  {
    "text": "[INAUDIBLE] [INAUDIBLE] And make sure it's log base 2.",
    "start": "2107230",
    "end": "2113850"
  },
  {
    "text": "It's like around 16. OK, somewhere in\nthe 14 to 17 range.",
    "start": "2113850",
    "end": "2119170"
  },
  {
    "text": "[INAUDIBLE] 17. [INAUDIBLE] 17, good, OK. 0.2.",
    "start": "2119170",
    "end": "2124349"
  },
  {
    "text": "OK 0.2. Right. So you already see that\neven this very short match at a very long distance,\nthat is still saving you bits",
    "start": "2124350",
    "end": "2133910"
  },
  {
    "text": "by encoding it. And, like, these three\nbits is not out of random, right, like this is the zeroth\norder entropy of English,",
    "start": "2133910",
    "end": "2139430"
  },
  {
    "text": "as we saw. I think it was actually\nroughly around four bits. So, right.",
    "start": "2139430",
    "end": "2144950"
  },
  {
    "text": "So you see the idea here is\nthat far away short matches even those are beneficial\nbecause it's so much",
    "start": "2144950",
    "end": "2151849"
  },
  {
    "text": "cheaper to encode this 150-- just the length 150,000\nas compared to encoding the P-L-E-A-S-U-R-E,\nthese eight characters.",
    "start": "2151850",
    "end": "2160559"
  },
  {
    "text": "Right? And you can play with this\nmore, and actually see. There will be-- like,\nas you might imagine,",
    "start": "2160560",
    "end": "2166640"
  },
  {
    "text": "there will be a crossing\npoint where it just-- if you have a match of length\ntwo at a billion offset,",
    "start": "2166640",
    "end": "2172940"
  },
  {
    "text": "that point, you\nmight say, OK, maybe it's not a worthwhile match. But still it is, in this case,\nit is a worthwhile match.",
    "start": "2172940",
    "end": "2179934"
  },
  {
    "text": "OK. ",
    "start": "2179935",
    "end": "2186080"
  },
  {
    "text": "And we will just gather\nthe data, try to look at, like, what is the\ndistribution of match offsets",
    "start": "2186080",
    "end": "2193730"
  },
  {
    "text": "and match lengths after\nyou do this LZ77 parsing for a particular\nimplementation of LZ77. We will see it's not\nlike a unique thing.",
    "start": "2193730",
    "end": "2201560"
  },
  {
    "text": "So you see, mostly you\nhave smaller offsets, and sometimes, you\nhave bigger offsets. So it's an exponential scale.",
    "start": "2201560",
    "end": "2209130"
  },
  {
    "text": "Right? So in this case, the longest\noffsets are around 150,000, because the text itself\nis around 150,000 long.",
    "start": "2209130",
    "end": "2216050"
  },
  {
    "text": "And in terms of\nmatch lengths, you see, oftentimes, you see\nrelatively small match lengths. Once in a while, you see match\nlengths more than 100 bytes.",
    "start": "2216050",
    "end": "2224450"
  },
  {
    "text": "Right? This is very important\nto understand that this is for this particular file.",
    "start": "2224450",
    "end": "2229460"
  },
  {
    "text": "From file to file, from\ndata set to data set, this distribution\nlooks different. And that should influence\nwhat particular LZ77 technique",
    "start": "2229460",
    "end": "2237950"
  },
  {
    "text": "you use, as we'll see shortly.  This is the CSS\nfile we saw earlier,",
    "start": "2237950",
    "end": "2245650"
  },
  {
    "text": "the one with the percent,\n50%, that sort of thing. Bootstrap min.css-- match\noffset maybe looks similar.",
    "start": "2245650",
    "end": "2254550"
  },
  {
    "text": "Match lengths, you\nwill notice here something different, right? There are some\nextremely long matches, more than like 500 bytes long.",
    "start": "2254550",
    "end": "2262470"
  },
  {
    "text": "So you can do this for any\nfile and just play with it, try to understand.",
    "start": "2262470",
    "end": "2268510"
  },
  {
    "text": "Like if you imagine\nstructured pieces of data, like code, for example,\nwould have a lot of matches",
    "start": "2268510",
    "end": "2275250"
  },
  {
    "text": "of the exactly same type. Because the same keywords\noccur many, many times.",
    "start": "2275250",
    "end": "2280540"
  },
  {
    "text": "Right? The same variable names,\nthe same function names. So that distribution will look\ndifferent, compared to text.",
    "start": "2280540",
    "end": "2286080"
  },
  {
    "text": "Where you have repeated\nwords, but maybe not, like, repeated\nsentences exactly.",
    "start": "2286080",
    "end": "2291900"
  },
  {
    "text": "If you have a table, like a CSV\nfile, maybe some of the rows are exact matches of each other. So again, that's\ndifferent from text.",
    "start": "2291900",
    "end": "2300600"
  },
  {
    "text": "If you have random data, maybe\nyou don't find any matches, or you find very few matches. So this will be different\nfor different data sets.",
    "start": "2300600",
    "end": "2308940"
  },
  {
    "text": " OK, any questions so far?",
    "start": "2308940",
    "end": "2315510"
  },
  {
    "text": "Right. So just want to say one thing\nthat LZ77 is, like, I think,",
    "start": "2315510",
    "end": "2321290"
  },
  {
    "text": "today, the most popular\ncompression technique. It's the one that's most\nwidely used in practice. To do full justice\nto it, to explain",
    "start": "2321290",
    "end": "2328940"
  },
  {
    "text": "even like how gzip works would\ntake me several lectures, and to explain how something\nlike Zstandard, which is a modern version\nworks would probably",
    "start": "2328940",
    "end": "2335840"
  },
  {
    "text": "take me the entire course. Plus I don't think I'm\nqualified to actually talk",
    "start": "2335840",
    "end": "2340850"
  },
  {
    "text": "so much about LZ77. But we will try to look at\nsome practical aspects of LZ77,",
    "start": "2340850",
    "end": "2346700"
  },
  {
    "text": "things that I'm more\nconfident to speak about without bringing in, like, the\ncreator of these algorithms.",
    "start": "2346700",
    "end": "2352670"
  },
  {
    "text": "OK. So first thing,\nthere's this whole idea is very simple, right? But do I need to keep\nthis infinite past memory?",
    "start": "2352670",
    "end": "2360410"
  },
  {
    "text": "Do I need to keep all of\nthe past, at every time, to find matches? Like if I have a\n1 gigabyte file,",
    "start": "2360410",
    "end": "2366950"
  },
  {
    "text": "do I need to keep the\nlast gigabyte in my memory and then look for matches\nin that last one gigabyte?",
    "start": "2366950",
    "end": "2372320"
  },
  {
    "text": "That doesn't sound efficient\nand people don't do that. What people do is use something\ncalled a sliding window LZ77",
    "start": "2372320",
    "end": "2379640"
  },
  {
    "text": "where you only try\nto find matches in the last 10\nkilobytes or a few megabytes, that sort of thing.",
    "start": "2379640",
    "end": "2385820"
  },
  {
    "text": "So you limit the scope. You don't look for matches\nthat are arbitrarily far away. So that's one thing.",
    "start": "2385820",
    "end": "2392150"
  },
  {
    "text": "And some technical\ndetails, like, you can use circular buffers,\nsome particular techniques",
    "start": "2392150",
    "end": "2397460"
  },
  {
    "text": "to efficiently handle windows\nwithout reallocating memory every time, or moving a\nbunch of data every time. ",
    "start": "2397460",
    "end": "2404970"
  },
  {
    "text": "And we'll see this\none in the next slide. That bigger windows give\nyou better compression",
    "start": "2404970",
    "end": "2410280"
  },
  {
    "text": "because now you have more-- basically, it's just making\nthe compression encoder more powerful. Like it can find\nfaraway matches.",
    "start": "2410280",
    "end": "2418349"
  },
  {
    "text": "But it needs more\nmemory because then you need to store that\nentire window with you, both in the compression\nand the decompression.",
    "start": "2418350",
    "end": "2425849"
  },
  {
    "text": "We have implemented this in SCL. I encourage you to look at it. It's, I think, well-documented.",
    "start": "2425850",
    "end": "2432150"
  },
  {
    "text": "And I had a hard\ntime like actually finding an implementation\nthat was easy to explain.",
    "start": "2432150",
    "end": "2439290"
  },
  {
    "text": "So I hope this will be\nuseful, especially if you are doing a project on this.",
    "start": "2439290",
    "end": "2444420"
  },
  {
    "text": "I will mention some specific\nproject ideas shortly. So I took the Alice\nin Wonderland book.",
    "start": "2444420",
    "end": "2451240"
  },
  {
    "text": "I increased the window size\nin an exponential scale, and I looked at the\ncompressed size in bytes.",
    "start": "2451240",
    "end": "2459570"
  },
  {
    "text": "So what you see is that\nas you expect, right? As you improve the window,\nyou get better and better",
    "start": "2459570",
    "end": "2466279"
  },
  {
    "text": "compression. At some point, it\nstarts leveling off. In this case, because the file\nitself has a certain length,",
    "start": "2466280",
    "end": "2471410"
  },
  {
    "text": "so making the window\nbigger than the file size obviously is not going to help. But even in general,\nafter a point, it doesn't help to\nhave a bigger window.",
    "start": "2471410",
    "end": "2477965"
  },
  {
    "text": " Again, this is something\nwhich is data-specific. For your data, may be\nbigger windows are better.",
    "start": "2477965",
    "end": "2484400"
  },
  {
    "text": "Or for your application, maybe\nyou can afford a lot of memory. So it's all about\nwhat you want to do.",
    "start": "2484400",
    "end": "2490130"
  },
  {
    "text": "There are no hard rules that\nalways use 100,000 windows. That's not the\nlesson of this plot.",
    "start": "2490130",
    "end": "2495380"
  },
  {
    "text": " Another question.",
    "start": "2495380",
    "end": "2501210"
  },
  {
    "text": "The basic question, right? We did it by hand,\nby eye earlier. But clearly, like, a\ncomputer won't do that.",
    "start": "2501210",
    "end": "2510589"
  },
  {
    "text": "How to find matches? Match-finding, this\nis like the core of an encoder, not the decoder.",
    "start": "2510590",
    "end": "2516350"
  },
  {
    "text": "This is important to understand. No matter how you\nfind the matches, the decoder can still\ndecode your data. It's an encoder-only property,\nthis match-finding business.",
    "start": "2516350",
    "end": "2524690"
  },
  {
    "text": "How do I find a\nmatch in the past? And the basic idea, which again,\nyou can find the code, is to--",
    "start": "2524690",
    "end": "2532069"
  },
  {
    "text": " what you do\nbasically is that you",
    "start": "2532070",
    "end": "2539500"
  },
  {
    "text": "take all of these\ndifferent common patterns, like the patterns that\nyou have seen in the past,",
    "start": "2539500",
    "end": "2545020"
  },
  {
    "text": "and you say that A B C D\nhas occurred at position 1, position 10, position 15,\nposition 20, let's say.",
    "start": "2545020",
    "end": "2553150"
  },
  {
    "text": "And this guy has\noccurred at position 2 and position 14 or something. So you make this\nbig table where each",
    "start": "2553150",
    "end": "2560260"
  },
  {
    "text": "of these four-length\nsequences, when have they occurred in the past? And now, you are at some point\nin the file you see an A B C D.",
    "start": "2560260",
    "end": "2569420"
  },
  {
    "text": "So you see, oh, I have seen\nA B C D, past occurrences, basically. ",
    "start": "2569420",
    "end": "2577000"
  },
  {
    "text": "Are at 1, 10, 15, 20. Right? Because you store this in\na hash table, basically.",
    "start": "2577000",
    "end": "2585740"
  },
  {
    "text": "So you store this\ntable, which is like for every\nfour-length sequence, when have I seen it in the past\nfor all possible sequences?",
    "start": "2585740",
    "end": "2593940"
  },
  {
    "text": "And then, when you find\nthe sequence in the future, you look at its\npast occurrences. And you try to see\nwhich one of them",
    "start": "2593940",
    "end": "2600065"
  },
  {
    "text": "would give you\nthe longest match. So maybe you saw A B C D at,\nlike, position 10 in the past,",
    "start": "2600065",
    "end": "2606180"
  },
  {
    "text": "and at position 1 in the past. However, in this case this was\nfollowed by E F. In this case,",
    "start": "2606180",
    "end": "2613890"
  },
  {
    "text": "this was followed by, like, ZX. And here, it's followed\nby E F. So you would",
    "start": "2613890",
    "end": "2619180"
  },
  {
    "text": "prefer the first one, right? This seems a better match. This is a longer match\ninstead of this one.",
    "start": "2619180",
    "end": "2627500"
  },
  {
    "text": "So you have a lot of\ncandidate positions where this A B C D occurred\nand then in the past, you look at where did you find\nthe longer match to this A B C",
    "start": "2627500",
    "end": "2635809"
  },
  {
    "text": "D E F. So this is like a basic\nidea commonly used",
    "start": "2635810",
    "end": "2640890"
  },
  {
    "text": "in many algorithms, like\na seed-type idea, where to find a match,\nwhat you do is you take a four-length, or a\nthree-length, five-length seed.",
    "start": "2640890",
    "end": "2648390"
  },
  {
    "text": "Seed is the thing you\nindex in your hash table. So in this case, it's all\nfour-length sequences that",
    "start": "2648390",
    "end": "2653430"
  },
  {
    "text": "are hashed in the sequence. You use that to find\ncandidate matches. And then you find the best match\nout of those candidate matches.",
    "start": "2653430",
    "end": "2661200"
  },
  {
    "text": "So really, like,\nreduces the search space when you're looking for things. So index past occurrences of\nsequences in a data structure,",
    "start": "2661200",
    "end": "2669300"
  },
  {
    "text": "like hash table, binary tree,\nyou can choose your favorite. And for the given\nposition, do a lookup",
    "start": "2669300",
    "end": "2675300"
  },
  {
    "text": "to find previous occurrences and\nthen extend the candidate match to find the longest match. So you extend it\nin the future, you",
    "start": "2675300",
    "end": "2681750"
  },
  {
    "text": "see how long does\nit keep matching. ",
    "start": "2681750",
    "end": "2687660"
  },
  {
    "text": "Again-- [INAUDIBLE] Yep. Do we just consider\nnot worth it matching",
    "start": "2687660",
    "end": "2694080"
  },
  {
    "text": "two or three substrates then? So you are asking why I took\nfour instead of two or three?",
    "start": "2694080",
    "end": "2701390"
  },
  {
    "text": "Yeah. Yes, that's a good question. ",
    "start": "2701390",
    "end": "2706770"
  },
  {
    "text": "There is a trade-off there,\nwhich we'll see shortly. But just to answer\nthe specific thing,",
    "start": "2706770",
    "end": "2714530"
  },
  {
    "text": "a two-length thing would give\nyou a lot of false positives. Because you have seen A B much\nmore than you have seen the A B",
    "start": "2714530",
    "end": "2720845"
  },
  {
    "text": "C D whole thing, right? So now, if you are just indexing\ntwo length or three length, you will find many\nmore possible things.",
    "start": "2720845",
    "end": "2727790"
  },
  {
    "text": "So it will increase your\ncomplexity quite a bit just to find all\nof the possible--",
    "start": "2727790",
    "end": "2733730"
  },
  {
    "text": "to find the longest one. On the other hand, if\nyou really work hard, you will actually find maybe\na better match than you would",
    "start": "2733730",
    "end": "2739700"
  },
  {
    "text": "find with a four-length thing. So that's the\ntrade-off, basically. It will often make you slower,\nbut may be better compression.",
    "start": "2739700",
    "end": "2746750"
  },
  {
    "text": "But in practice, we will\nsee when that is not true for a particular reason. ",
    "start": "2746750",
    "end": "2753210"
  },
  {
    "text": "But yes, if you make it\ntoo big, that's very bad. Because then you will miss\nout on a lot of matches. ",
    "start": "2753210",
    "end": "2761730"
  },
  {
    "text": "OK, another sort of thing\nthat's not immediately obvious",
    "start": "2761730",
    "end": "2766750"
  },
  {
    "text": "is that the LZ77\nthat we presented, like, the theoretical\nversion that is greedy.",
    "start": "2766750",
    "end": "2772620"
  },
  {
    "text": "Greedy means that the\nfirst time it sees a match, it picks up that match.",
    "start": "2772620",
    "end": "2777630"
  },
  {
    "text": "It doesn't think\nof the future, it doesn't try to do some complex\noptimization problem where, oh, maybe I should\nnot take this match,",
    "start": "2777630",
    "end": "2784200"
  },
  {
    "text": "maybe I should take a\nlonger match in the future. Let me give you an example. I'll make it very clear.",
    "start": "2784200",
    "end": "2790190"
  },
  {
    "text": "So, OK.",
    "start": "2790190",
    "end": "2808500"
  },
  {
    "text": "So let's say this is your\nsequence at some point in the past you saw a B C D E F.\nI'd say B B C E D F A B E F A B",
    "start": "2808500",
    "end": "2815310"
  },
  {
    "text": "C D. OK, so now you're here. So the algorithm we\nwere just discussing, you would see an A B. You will\nsay, oh I found a match to A B,",
    "start": "2815310",
    "end": "2823099"
  },
  {
    "text": "and you will say, good. I'm done. Right? ",
    "start": "2823100",
    "end": "2828430"
  },
  {
    "text": "However, maybe you\ncan be smarter. You might say, OK, maybe\nI saw this match of A B, but it's too short.",
    "start": "2828430",
    "end": "2834279"
  },
  {
    "text": "It's just of length two. What if I skipped A? Let me skip A. Let me try to\nfind a match starting at B.",
    "start": "2834280",
    "end": "2841510"
  },
  {
    "text": "And suddenly, I find\na very long match. A match of length five\ninstead of length two.",
    "start": "2841510",
    "end": "2847450"
  },
  {
    "text": "Right? So the first one is greedy. This one is, like--\nthe first one is greedy because it just takes the first\nthing and says, OK, that's it.",
    "start": "2847450",
    "end": "2857340"
  },
  {
    "text": "The second one is lazy. Lazy in the sense that it says,\nOK, maybe I found a match,",
    "start": "2857340",
    "end": "2862770"
  },
  {
    "text": "but let's not get too excited. Let's look a bit in the future. Maybe I will find\na better match. Let's not pick it up right away.",
    "start": "2862770",
    "end": "2868155"
  },
  {
    "text": " Does that make sense? ",
    "start": "2868155",
    "end": "2874455"
  },
  {
    "text": "Right? ",
    "start": "2874455",
    "end": "2879600"
  },
  {
    "text": "And as you can imagine,\nthe real, like-- people who have looked into\nthis, didn't stop at this lazy.",
    "start": "2879600",
    "end": "2887730"
  },
  {
    "text": "This seems like, OK, but how do\nyou exactly do the lazy thing? They said, OK, let's make it\ninto an optimization problem.",
    "start": "2887730",
    "end": "2893580"
  },
  {
    "text": "Let's solve a perfect\noptimization problem. Let's make a dynamic\nprogram out of it. And you can do a lot of things.",
    "start": "2893580",
    "end": "2900650"
  },
  {
    "text": "There is something\ncalled optimal parsing. There is a big theory\naround it where what is the LZ77\nparsing that gives you",
    "start": "2900650",
    "end": "2906720"
  },
  {
    "text": "the fewest number\nof literals, or that gives you the best compression? But they just get progressively\nslower and slower.",
    "start": "2906720",
    "end": "2913080"
  },
  {
    "text": "The more complex\ntheir strategy is. So you can imagine greedy is\nvery fast because you just take the first match.",
    "start": "2913080",
    "end": "2919109"
  },
  {
    "text": "Lazy is slower because you\ndon't take sometimes matches, then you try-- in the future,\ntry to find a longer match.",
    "start": "2919110",
    "end": "2924120"
  },
  {
    "text": "And leave some\nthings as literals. Is this concept clear,\nroughly, that sometimes being",
    "start": "2924120",
    "end": "2929860"
  },
  {
    "text": "greedy is not the best option? Sometimes you want\nto be a bit lazy, see if there is a better\nmatch in the future.",
    "start": "2929860",
    "end": "2935380"
  },
  {
    "text": " OK, so just to show you\nwhat a typical encoder would",
    "start": "2935380",
    "end": "2945309"
  },
  {
    "text": "be structured like, so\nthis is from the SCL class, sliding window encoder.",
    "start": "2945310",
    "end": "2951870"
  },
  {
    "text": "So the encoder would take a\nmatch finder which basically gives you the matches, and it\nwould take a window size, which",
    "start": "2951870",
    "end": "2959700"
  },
  {
    "text": "is the size of the window, and\nthen the match finder would have some way to extend matches,\nbut, really, the main function",
    "start": "2959700",
    "end": "2966070"
  },
  {
    "text": "is this, find_best_match,\nwhere given some sequence, it will try to find\nthe best match. And there can be\nvarious implementation.",
    "start": "2966070",
    "end": "2972220"
  },
  {
    "text": "You could have a lazy\nthing, greedy thing, just a bunch of different\nideas there-- optimal thing.",
    "start": "2972220",
    "end": "2978190"
  },
  {
    "text": "And then this particular\nmatch finder we implemented, you see it has so many\nparameters-- hash_length,",
    "start": "2978190",
    "end": "2983380"
  },
  {
    "text": "which is four in the\nexample we just-- we were talking about. There's a hash_table_size\nbecause you don't want",
    "start": "2983380",
    "end": "2990400"
  },
  {
    "text": "an arbitrary large hash table. Something on max_chain_length,\nwhich we will not talk about.",
    "start": "2990400",
    "end": "2996550"
  },
  {
    "text": "Whether you are lazy or\nwhether you are greedy. Is there a minimum match length?",
    "start": "2996550",
    "end": "3002099"
  },
  {
    "text": "So this is just like an\nimplementation I did. If you look at\nZstandard or gzip,",
    "start": "3002100",
    "end": "3007800"
  },
  {
    "text": "they have more\ncomplexities around it. But you can imagine that--",
    "start": "3007800",
    "end": "3014080"
  },
  {
    "text": "the really nice thing\nis that all of these are compliant with\nthe same decoder. The decoder is not\nchanging, right? We are just playing\nwith the encoder,",
    "start": "3014080",
    "end": "3020090"
  },
  {
    "text": "trying to find a better and\nbetter parsing of the data while using the best decoder. And that's a very nice idea,\nbecause that allows you to--",
    "start": "3020090",
    "end": "3026900"
  },
  {
    "text": "without breaking your\nconsumers, people who are reading\nyour files, they can keep using the same decoder.",
    "start": "3026900",
    "end": "3032480"
  },
  {
    "text": "But you just get better\nand better compression by using these fancy\ncomplex strategies.",
    "start": "3032480",
    "end": "3038579"
  },
  {
    "text": "OK. Are we happy? Or at least satisfied? OK.",
    "start": "3038580",
    "end": "3043835"
  },
  {
    "start": "3043835",
    "end": "3051560"
  },
  {
    "text": "So, this is like\nan experiment I did where I had something called a\nminimum match length, which is, like, what is the shortest\nmatch I'm going to allow.",
    "start": "3051560",
    "end": "3058430"
  },
  {
    "text": "And I kept increasing the\nminimum match length for, again, this Alice\nIn Wonderland book.",
    "start": "3058430",
    "end": "3063820"
  },
  {
    "text": "And what I'm showing here\nis that as I increase the minimum match length, I\nget more and more literals",
    "start": "3063820",
    "end": "3068890"
  },
  {
    "text": "but fewer and fewer matches. Can somebody roughly explain\nwhy that might be happening?",
    "start": "3068890",
    "end": "3074320"
  },
  {
    "text": "So I'm basically\nrejecting any match that's shorter than a\nparticular match length. ",
    "start": "3074320",
    "end": "3081780"
  },
  {
    "text": "Why would I say more literals\nas I increase my match length? ",
    "start": "3081780",
    "end": "3090792"
  },
  {
    "text": "The match then the\nstore is moving. Yeah. The answer is, if you\ndon't have a match, you have to store it\nas a literal, right?",
    "start": "3090792",
    "end": "3096869"
  },
  {
    "text": "And now you're disallowing\na lot of matches. Any short sequence you\ndon't even allow as a match. So therefore, you just get\nmuch more unmatched literals.",
    "start": "3096870",
    "end": "3104580"
  },
  {
    "text": "And therefore, you pay less to\nstore the matches because there are just fewer matches, right? You only take very long matches\nyou say no short matches are",
    "start": "3104580",
    "end": "3111120"
  },
  {
    "text": "not something I care about. However, you see there is a\ntrade-off now because you get more and more literals,\nfewer and fewer--",
    "start": "3111120",
    "end": "3118710"
  },
  {
    "text": "so there is, like, some\nsort of middle ground where you don't want your\nminimum match to be too small.",
    "start": "3118710",
    "end": "3124050"
  },
  {
    "text": "If it's too small, literals-- everything matches, but then\nyou have just too many matches.",
    "start": "3124050",
    "end": "3129800"
  },
  {
    "text": "You have too many matches of,\nlike, length one, length two. And those matches cost a lot. Maybe it's better to not have\nthese super small matches.",
    "start": "3129800",
    "end": "3136970"
  },
  {
    "text": "Instead use a bigger match. And leave a few literals. So there is a trade-off\nas in a lot of things.",
    "start": "3136970",
    "end": "3145265"
  },
  {
    "start": "3145265",
    "end": "3151829"
  },
  {
    "text": "And then this is\nanother thing I did where I looked at the lazy\nand the greedy strategy, again, for this particular file.",
    "start": "3151830",
    "end": "3157920"
  },
  {
    "text": "Where the greedy strategy\njust picks the first match it finds of that\nminimum match length.",
    "start": "3157920",
    "end": "3163050"
  },
  {
    "text": "The lazy strategy tries\nto go a bit further, see if it can find\na bigger match. And if it finds a\nbigger match, it",
    "start": "3163050",
    "end": "3168480"
  },
  {
    "text": "takes the bigger match instead\nof taking the greedy match. And you see that the\nlazy strategy like always",
    "start": "3168480",
    "end": "3174600"
  },
  {
    "text": "outperforms the greedy\nstrategy in this case for any minimum match. ",
    "start": "3174600",
    "end": "3184770"
  },
  {
    "text": "So yeah, I encourage\nyou to look at the code. I think only once you\nlook at it and you think about it a\nlittle bit, you will",
    "start": "3184770",
    "end": "3191250"
  },
  {
    "text": "appreciate this more and more. But the basic point\nI'm trying to make is, lots of choices you can make\nat the encoder, which lead to--",
    "start": "3191250",
    "end": "3199440"
  },
  {
    "text": "maybe it makes it slower\nbut better compression. Or it takes more memory,\nbut better compression.",
    "start": "3199440",
    "end": "3204900"
  },
  {
    "text": "So there are all\nthese trade-offs. Any questions so far\non this match finding?",
    "start": "3204900",
    "end": "3212550"
  },
  {
    "text": "So one thing we try to do\nin the implementation in SCL is we try to-- not like this here, try to\nseparate the match finder",
    "start": "3212550",
    "end": "3220200"
  },
  {
    "text": "so that you can plug and play. You can try different match\nfinders with the same encoder. The decoder doesn't\nchange, just the encoder,",
    "start": "3220200",
    "end": "3227100"
  },
  {
    "text": "you can implement your\nown favorite match finder. You can implement some DP,\ndynamic programming-based thing.",
    "start": "3227100",
    "end": "3232550"
  },
  {
    "text": " OK?",
    "start": "3232550",
    "end": "3238020"
  },
  {
    "text": "And then, obviously, you need to\nentropy code everything, right? It's not enough to-- just producing, this\nis not enough, right?",
    "start": "3238020",
    "end": "3244260"
  },
  {
    "text": "At the end of the day, you need\nto actually store it in bits. And that's, again, something\npeople have played with a lot.",
    "start": "3244260",
    "end": "3250619"
  },
  {
    "text": "The current sort\nof standard thing that everybody does, this\nis not what gzip does, gzip does it a bit differently,\nbut all the modern compressors",
    "start": "3250620",
    "end": "3257760"
  },
  {
    "text": "do this, is you take all the\nunmatched literals in a block,",
    "start": "3257760",
    "end": "3264270"
  },
  {
    "text": "you concatenate them together\ninto a single, long thing,",
    "start": "3264270",
    "end": "3269900"
  },
  {
    "text": "and then you store\nthe number here-- 5, 0, 4, the length here. So, really, what you get-- this\nis sort of a technical point,",
    "start": "3269900",
    "end": "3276710"
  },
  {
    "text": "but really what you\nhave is you have the literals which is a\nsequence of just, like, bytes.",
    "start": "3276710",
    "end": "3281720"
  },
  {
    "text": "And you have three integer\nsequences, literal counts, match length, match offset.",
    "start": "3281720",
    "end": "3288253"
  },
  {
    "text": "Very technical point, don't\nworry about it too much. But this is how everybody\ndoes it nowadays.",
    "start": "3288253",
    "end": "3293540"
  },
  {
    "text": "And then you have to\nencode each of these. And we have all of the\nentropy coders we saw, right?",
    "start": "3293540",
    "end": "3298849"
  },
  {
    "text": "So that's the power of\nthese entropy coders because all LZ77 is\ndoing is converting",
    "start": "3298850",
    "end": "3304190"
  },
  {
    "text": "your very complex stationary\ndistribution into a much simpler iid distribution.",
    "start": "3304190",
    "end": "3309770"
  },
  {
    "text": "So now you can use your favorite\ncoders for iid distribution and they will basically\ngive you the results.",
    "start": "3309770",
    "end": "3316010"
  },
  {
    "text": " Right? So you can use Huffman coding,\ngzip just uses Huffman coding.",
    "start": "3316010",
    "end": "3322840"
  },
  {
    "text": "Zstandard uses\nHuffman for literals. You can use tANS, which is\nrecently becoming more popular.",
    "start": "3322840",
    "end": "3329210"
  },
  {
    "text": "C-standard uses it for-- oh, what are this? Not for literals.",
    "start": "3329210",
    "end": "3336560"
  },
  {
    "text": "It uses for match\nlengths and offsets. Yeah.",
    "start": "3336560",
    "end": "3342400"
  },
  {
    "text": "Or you can use context-based\narithmetic coding, which is very slow to\nencode and decode, which",
    "start": "3342400",
    "end": "3347920"
  },
  {
    "text": "is what LZMA or XZ or\n7-Zip, all these guys use.",
    "start": "3347920",
    "end": "3352986"
  },
  {
    "text": "Or you could just\nskip entropy coding. Say that, OK, I don't care. I will just use a simple code. I won't do like any fancy\nentropy coding because I",
    "start": "3352987",
    "end": "3359640"
  },
  {
    "text": "want to be very, very fast. And that's what\nLZ4 and Snappy do. All these names probably don't\nsound very familiar to you.",
    "start": "3359640",
    "end": "3369060"
  },
  {
    "text": "And that's fine. I think really there are\nonly a couple of compressors you should know about, really,\nand then everything else",
    "start": "3369060",
    "end": "3374382"
  },
  {
    "text": "you can-- if you need it, you\nlook at it, sort of.",
    "start": "3374382",
    "end": "3379780"
  },
  {
    "text": "Let me skip this slide. It's like a technical point\nabout how do you actually entropy code integers.",
    "start": "3379780",
    "end": "3385839"
  },
  {
    "text": "Please read it at home. OK, so, really, the lesson\nis that the parsing or match",
    "start": "3385840",
    "end": "3392400"
  },
  {
    "text": "finding strategy, the window\nsize, the entropy coder, implementation\ndetails, like, are you using SIMD, are you using\nthese advanced instructions,",
    "start": "3392400",
    "end": "3398970"
  },
  {
    "text": "are you parallelizing things\nmatter a lot in determining speed and memory usage. So let's look at this plot.",
    "start": "3398970",
    "end": "3406799"
  },
  {
    "text": "So this is showing\nZstandard, which is a modern LZ77-based\ncompressor and Zlib, which",
    "start": "3406800",
    "end": "3413490"
  },
  {
    "text": "is the library\nbehind gzip, which is an older, around like 30\nyears old now, compressor.",
    "start": "3413490",
    "end": "3420270"
  },
  {
    "text": "The x-axis is compression speed. The y-axis is compression ratio.",
    "start": "3420270",
    "end": "3426359"
  },
  {
    "text": "And where you want to be\nis on this side, basically. You want higher speed, lower\ncompression ratio-- sorry,",
    "start": "3426360",
    "end": "3432420"
  },
  {
    "text": "higher speed and higher\ncompression ratio. And you see-- and the\ndifferent dots here",
    "start": "3432420",
    "end": "3437619"
  },
  {
    "text": "are the different levels, like,\ndifferent parameters where you take a bigger window, or\nyou use a more powerful entropy",
    "start": "3437620",
    "end": "3443320"
  },
  {
    "text": "coder. Sorry, not-- use a more\npowerful match finder. And you see that zstandard just\nlike beats Zlib on all fronts.",
    "start": "3443320",
    "end": "3453050"
  },
  {
    "text": "Partly because it has\nbetter algorithms, partly because it\nuses more memory, partly because it is implemented\nbetter to use modern hardware",
    "start": "3453050",
    "end": "3460100"
  },
  {
    "text": "instructions. So all of these things\nmatter, these small decisions end up impacting where you\nlie in this curve, basically.",
    "start": "3460100",
    "end": "3468859"
  },
  {
    "text": " And this is decompression\nspeed where, again, zstandard",
    "start": "3468860",
    "end": "3475319"
  },
  {
    "text": "achieves like amazing results. It's like 1.4 GBPS in this-- for some data set.",
    "start": "3475320",
    "end": "3482130"
  },
  {
    "text": "Again, this is mostly because of\nhow the decoder is implemented. That's a big role.",
    "start": "3482130",
    "end": "3487440"
  },
  {
    "text": "And also because how they\nstructured the format, which is a bit technical. LZMA uses arithmetic coding.",
    "start": "3487440",
    "end": "3493500"
  },
  {
    "text": "So it's just very\nslow to decode, sadly. Arithmetic decoding, as\nwe saw, is slow to decode.",
    "start": "3493500",
    "end": "3500300"
  },
  {
    "text": "Another thing you notice is that\nwe don't show any levels here. And the reason is\nthat regardless",
    "start": "3500300",
    "end": "3505770"
  },
  {
    "text": "of what match finding you use,\nthe decoding stays the same. Decoding is just copying\nstuff from the past",
    "start": "3505770",
    "end": "3511650"
  },
  {
    "text": "so it affects us slightly,\nbut not too much. The different encoders can\nstill produce the same sort",
    "start": "3511650",
    "end": "3519240"
  },
  {
    "text": "of decompression speed. ",
    "start": "3519240",
    "end": "3526560"
  },
  {
    "text": "And then, here, you\ncan just like look at so many different\nLZ77, each of them have their own levels\nfrom one to whatever.",
    "start": "3526560",
    "end": "3533490"
  },
  {
    "text": "You have the zstandard,\nzlib is gzip, basically, you have\nBrotli from Google. You have LZ4, again,\nfrom Yann Collet",
    "start": "3533490",
    "end": "3540450"
  },
  {
    "text": "who also wrote zstandard. You have Snappy from Google. So, just all these guys keep\nmaking their own versions.",
    "start": "3540450",
    "end": "3547710"
  },
  {
    "text": "And we'll look at for,\nlike a practitioner, how do you think about this? There are so many compressors. Like, you Google\ndata compression.",
    "start": "3547710",
    "end": "3554250"
  },
  {
    "text": "You get like a million results. What do you do? Before we go there, just a\nquick note that universal",
    "start": "3554250",
    "end": "3560454"
  },
  {
    "text": "doesn't mean perfect. Right? LZ77 is universal in\nan asymptotic sense.",
    "start": "3560455",
    "end": "3565790"
  },
  {
    "text": "Again, as n goes to\ninfinity, it will achieve the entropy wrote for\nany stationary distribution. But your data is probably\nnot infinitely large.",
    "start": "3565790",
    "end": "3573350"
  },
  {
    "text": "It's a finite thing. So it need not be the best\nchoice for your particular data set.",
    "start": "3573350",
    "end": "3578810"
  },
  {
    "text": "Even if it is the perfect choice\nin terms of compression ratio, maybe it is too slow for you. Maybe it has too high\nof a memory usage.",
    "start": "3578810",
    "end": "3586633"
  },
  {
    "text": "So all these things should\ngo into your calculation. Just don't think that\nLZ77 is universal, so that's what I will use.",
    "start": "3586633",
    "end": "3592580"
  },
  {
    "text": "I will never consider\nany other compressor. That's not how we should think.",
    "start": "3592580",
    "end": "3597680"
  },
  {
    "text": "And obviously, as we\nsaw, right, gzip is LZ77, zstandard is LZ77, but\nthey are not the same.",
    "start": "3597680",
    "end": "3604190"
  },
  {
    "text": "So there are a lot of, like,\nbeyond this base algorithm, the basic idea that works\nin theory, there are so many",
    "start": "3604190",
    "end": "3610490"
  },
  {
    "text": "minor things you can do which-- or major things you can do,\nwhich really change the world. ",
    "start": "3610490",
    "end": "3617180"
  },
  {
    "text": "OK. So that's it on LZ. We didn't talk about LZ78. It is very interesting.",
    "start": "3617180",
    "end": "3622480"
  },
  {
    "text": "I think-- I encourage\nyou to read up on it, or do a project on\nit, if you want to.",
    "start": "3622480",
    "end": "3629170"
  },
  {
    "text": "Tsachy covers it in\nmuch detail in EE 376C. The course is called \"Universal\nSchemes In Information Theory.\"",
    "start": "3629170",
    "end": "3637670"
  },
  {
    "text": "It's a bit like\ntheoretical course. I think quite a while\nsince it was last taught,",
    "start": "3637670",
    "end": "3644027"
  },
  {
    "text": "but I think we can share\nthe notes with you, if you are interested in\nthe theory aspect here.",
    "start": "3644027",
    "end": "3649370"
  },
  {
    "text": "And there are a lot\nof things in LZ77-- things like repcodes,\noptimal parsing, which we don't have\ntime to cover here.",
    "start": "3649370",
    "end": "3656090"
  },
  {
    "text": "All of these are good\nproject ideas, talk to us and we can point you to\nthe relevant resources.",
    "start": "3656090",
    "end": "3663710"
  },
  {
    "text": "OK. So let's-- so short, the\nsummary is that LZ77 is a great",
    "start": "3663710",
    "end": "3671420"
  },
  {
    "text": "compressor. So now-- but you\nhave been-- like, every compressor we teach you,\nwe tell you it's a great idea. Last time, we said context-based\narithmetic coding is great.",
    "start": "3671420",
    "end": "3678890"
  },
  {
    "text": "Before that, Huffman was great. Everybody seems\noptimal in some sense.",
    "start": "3678890",
    "end": "3684500"
  },
  {
    "text": "So how do you think\nabout data compression? OK.",
    "start": "3684500",
    "end": "3689620"
  },
  {
    "text": "So, you have a lot of data. You want to compress that data. First thing. First thing, always\nto think about,",
    "start": "3689620",
    "end": "3694869"
  },
  {
    "text": "is it possible you don't\nneed all this data? Do you really need this data? Maybe just delete it.",
    "start": "3694870",
    "end": "3700900"
  },
  {
    "text": "Really, this is very important. And like, that's how\nmost of the cost savings",
    "start": "3700900",
    "end": "3706450"
  },
  {
    "text": "come from, because you just\nidentify that, oh, I don't need this exabyte of data. Let's just delete the data.",
    "start": "3706450",
    "end": "3712450"
  },
  {
    "text": "And that's basically saving\nyou millions of dollars. So again, maybe you can't\ndelete the whole thing,",
    "start": "3712450",
    "end": "3720510"
  },
  {
    "text": "but maybe you can\nidentify with whatever you have learned that\nsome parts of the data are costing you more than\nother parts of the data.",
    "start": "3720510",
    "end": "3727080"
  },
  {
    "text": "Let's say, you\nare writing a log. There are multiple fields\nin the log, let's say.",
    "start": "3727080",
    "end": "3732490"
  },
  {
    "text": "Maybe some fields are\nmuch more compressible. Things that look very\nlong, like if you",
    "start": "3732490",
    "end": "3737530"
  },
  {
    "text": "have a log of some\nsort of web server log, for example, it will\nhave the host name.",
    "start": "3737530",
    "end": "3743589"
  },
  {
    "text": "But maybe the host name is\nthe same for every log line because the host name is\nthe name of that host. It is the IP address\nof that host.",
    "start": "3743590",
    "end": "3749710"
  },
  {
    "text": "So anything that\njust keeps repeating is going to be\nvery compressible, even if it looks long. But maybe there is some\nrequest ID or some access ID",
    "start": "3749710",
    "end": "3757450"
  },
  {
    "text": "or something, which is\nlike a random small string. It looks very small\nwhen you look at it in the uncompressed domain.",
    "start": "3757450",
    "end": "3763750"
  },
  {
    "text": "If you have like-- if you have hostname,\nwhich is like 10.1--",
    "start": "3763750",
    "end": "3769520"
  },
  {
    "text": "sorry, 10.1.1.12 or\nsomething like this,",
    "start": "3769520",
    "end": "3774860"
  },
  {
    "text": "and then that just\nrepeats every line, so this is-- like, even\nthough it looks long, it's easy to compress.",
    "start": "3774860",
    "end": "3780799"
  },
  {
    "text": "It doesn't take any bits\nin the compressed domain. But maybe you have this\nlike random thing-- XYA, ZXX, BDC,\nsomething like this.",
    "start": "3780800",
    "end": "3791880"
  },
  {
    "text": "Right? This is very hard to compress. So that sort of thing, like,\nafter you do a compression",
    "start": "3791880",
    "end": "3797490"
  },
  {
    "text": "class, you should\nhave some intuition like, does my identifier, my\nuuid, some unique identifier",
    "start": "3797490",
    "end": "3802560"
  },
  {
    "text": "does it need to be so random? Does it need to be 64 bytes? Can I do it with like 10 bytes?",
    "start": "3802560",
    "end": "3807690"
  },
  {
    "text": "Can I make it sequential,\ninstead of random? So just, like, this is how\nyou can think about it.",
    "start": "3807690",
    "end": "3813220"
  },
  {
    "text": "Right? For any type of data,\njust to plug an example. ",
    "start": "3813220",
    "end": "3819212"
  },
  {
    "text": "If you're storing\nthis data, right? And again, I'm thinking more\nfrom like a company perspective rather than personal storage,\nbut even personal storage,",
    "start": "3819212",
    "end": "3825260"
  },
  {
    "text": "you take these photos,\ndo you need all of them, to look at them, really? So for companies,\nobviously, sometimes there",
    "start": "3825260",
    "end": "3833362"
  },
  {
    "text": "are legal requirements. You need to keep some\ndata for some time, or maybe there are reasons\nyou want to keep it. So sure, OK, maybe, you\nneed to keep the data.",
    "start": "3833362",
    "end": "3840077"
  },
  {
    "text": "But think hard about this. And finally, think about what\nis your data access pattern?",
    "start": "3840077",
    "end": "3846270"
  },
  {
    "text": "Take photos, for example. Photos maybe you don't-- you want to keep them, maybe\nin future, at some point,",
    "start": "3846270",
    "end": "3852960"
  },
  {
    "text": "you want to look at them. But it's not like you're going\nthrough your like one-year-old photos every day. So maybe, you store it in\na cheaper, cold storage",
    "start": "3852960",
    "end": "3860309"
  },
  {
    "text": "sort of thing, rather\nthan storing it in the most expensive storage. Right?",
    "start": "3860310",
    "end": "3865350"
  },
  {
    "text": "So just like a computer,\nif you read about cache in your computer, right?",
    "start": "3865350",
    "end": "3870840"
  },
  {
    "text": "It keeps the things that\nare more frequently accessed in a very sort of\nexpensive storage.",
    "start": "3870840",
    "end": "3875910"
  },
  {
    "text": "And it keeps everything\nthat's used less in like RAM or on disk, or something. Similarly, store your\ndata in that way.",
    "start": "3875910",
    "end": "3882480"
  },
  {
    "text": "And finally, for a\nlot of types of data, you can't do\nlossless compression and be, like, practical.",
    "start": "3882480",
    "end": "3889110"
  },
  {
    "text": "Videos are the prime\nexample of that. And that's basically the\nnext half of the course where sometimes just\nlossy compression,",
    "start": "3889110",
    "end": "3895822"
  },
  {
    "text": "it's just unreasonable\nto do lossy compression. So, OK. And one more thing, before\nyou get too discouraged,",
    "start": "3895822",
    "end": "3903285"
  },
  {
    "text": "why do we learn all\nthis if you're just going to delete all our data. Compression is not\nonly about storage. It reduces memory,\nit reduces bandwidth.",
    "start": "3903285",
    "end": "3910280"
  },
  {
    "text": "You can sometimes query your\ndata faster with compression. So many times, you\nneed to do compression",
    "start": "3910280",
    "end": "3915890"
  },
  {
    "text": "and you need to know\nhow to do compression. OK, any questions?",
    "start": "3915890",
    "end": "3922560"
  },
  {
    "text": "Yeah. Some of this might\nsound like a joke, but, like, when\nwe talk to people, and this is what\nthe unique thing",
    "start": "3922560",
    "end": "3927990"
  },
  {
    "text": "you can offer once you\nknow about compression. Many of these things are not\nat all obvious to people. Like, this thing\nwhere people think",
    "start": "3927990",
    "end": "3934800"
  },
  {
    "text": "that, oh, this is\nso long, this should be very hard to compress. Right? But now, you know\nthat the entropy here",
    "start": "3934800",
    "end": "3940050"
  },
  {
    "text": "is zero, basically, because\neverything is the same. Right? You can easily predict the next\none, based on the previous one.",
    "start": "3940050",
    "end": "3945945"
  },
  {
    "text": "Where here, you have\na lot of entropy, predicting the next one is\nnot-- because they are random, actually. Right? So this is sort\nof intuition that",
    "start": "3945945",
    "end": "3952140"
  },
  {
    "text": "will be useful, like, when you\nlook at a real application. OK, so now you\ndecide, OK, I need",
    "start": "3952140",
    "end": "3957830"
  },
  {
    "text": "to store this data losslessly. Now what? Now, what's the next step?",
    "start": "3957830",
    "end": "3963000"
  },
  {
    "text": "The things not to do. OK, so maybe you think,\nOK, I learned EE274. Now, I'm very smart.",
    "start": "3963000",
    "end": "3969220"
  },
  {
    "text": "I will just implement\nmy own compressor. Right? I will use LZ77 and\nI will use Huffman,",
    "start": "3969220",
    "end": "3977470"
  },
  {
    "text": "or maybe I will just design\nmy own LLM or something. OK, don't do this.",
    "start": "3977470",
    "end": "3984370"
  },
  {
    "text": "I will talk about why. Or maybe you think, OK,\nI will not implement and I will not discover\na new algorithm",
    "start": "3984370",
    "end": "3992109"
  },
  {
    "text": "or invent a new algorithm, but\nI know all these LZ77 entropy coders. So let me implement them, right?",
    "start": "3992110",
    "end": "3999700"
  },
  {
    "text": "Let me implement them\nfrom scratch in Python or in C. Or maybe you say,\nno, I'm just not up to it.",
    "start": "3999700",
    "end": "4006330"
  },
  {
    "text": "I didn't like listening the\nlectures carefully enough. I will just Google\nsearch online and see",
    "start": "4006330",
    "end": "4011910"
  },
  {
    "text": "some very expensive compressor,\nand just buy the license to it.",
    "start": "4011910",
    "end": "4017500"
  },
  {
    "text": "Or, maybe you just, like,\nlisten to some small part of this lecture, you\ndecide, LZ77 is universal,",
    "start": "4017500",
    "end": "4024010"
  },
  {
    "text": "gzip is an\nimplementation of LZ77. It has to be the\nperfect compressor. Right? You didn't listen to the\nlecture very carefully.",
    "start": "4024010",
    "end": "4030940"
  },
  {
    "text": "And-- OK, that's the\npopular thing, right? Everybody says gzip is\nthe compressor to use.",
    "start": "4030940",
    "end": "4036020"
  },
  {
    "text": "OK. Sure. We'll use that. So don't do this. Use your skills from this class.",
    "start": "4036020",
    "end": "4042670"
  },
  {
    "text": "All of this can make sense\nbut not as the first step. The first thing you should do is\nto understand your application.",
    "start": "4042670",
    "end": "4049710"
  },
  {
    "text": "Why are you using compression? What is the need? And where are you\nusing compression? So what is the speed you need?",
    "start": "4049710",
    "end": "4056069"
  },
  {
    "text": "What is the memory\nusage you need? Where is the\ncompression happening? Is it happening on\nyour own machine?",
    "start": "4056070",
    "end": "4061230"
  },
  {
    "text": "Is it happening on\nsomebody else's machine? Is it an open source library? Is it a closed source thing\nwithin your organization?",
    "start": "4061230",
    "end": "4068670"
  },
  {
    "text": "Is it like a hobby project? Is it like something\nthat needs to be used in production on, like,\ngigabytes or petabytes of data?",
    "start": "4068670",
    "end": "4077520"
  },
  {
    "text": "How will compression and\ndecompression happen? We don't talk about\nit as often, right, but gzip, zstandard,\nall of these have a CLI,",
    "start": "4077520",
    "end": "4083910"
  },
  {
    "text": "they have a command\nline interface. You can run it like zstandard,\ndash c, whatever, whatever.",
    "start": "4083910",
    "end": "4090370"
  },
  {
    "text": "Or they have a library, there\nis a C library, Python library, Java library, all\nlanguages imaginable,",
    "start": "4090370",
    "end": "4096520"
  },
  {
    "text": "there is a zstandard\nor a gzip library. So where will it happen? Is the data homogeneous?",
    "start": "4096520",
    "end": "4103589"
  },
  {
    "text": "So for example, do you have\na lot of genomics data? So all of the data looks\nsimilar to each other.",
    "start": "4103590",
    "end": "4110370"
  },
  {
    "text": "Or are you like a\ncloud storage service, where everybody wants to store\ntheir data on your system?",
    "start": "4110370",
    "end": "4115649"
  },
  {
    "text": "So therefore the data\nis not up to you. Everybody else decides what\ndata they put in your thing. So whether the data\nis homogeneous or not",
    "start": "4115649",
    "end": "4122640"
  },
  {
    "text": "will influence how you\ndesign your compressor. Right? If it's homogeneous,\nif you have a lot of the data of the same kind,\nyou have lots of genomics data,",
    "start": "4122640",
    "end": "4129239"
  },
  {
    "text": "maybe you want to design\nyour own special compressor for genomics. But if it's not homogeneous,\nso other people are",
    "start": "4129240",
    "end": "4134910"
  },
  {
    "text": "putting in their\ndata, you don't know what the data is going to be. So then maybe you should use a\nuniversal compressor like LZ.",
    "start": "4134910",
    "end": "4140439"
  },
  {
    "text": "Right? So all of this\nshould influence how you think about\nbuilding your own thing, or not building your own thing.",
    "start": "4140439",
    "end": "4146384"
  },
  {
    "text": " So one thing I find\noften useful is",
    "start": "4146385",
    "end": "4151850"
  },
  {
    "text": "to use these benchmarks\nthat people have done, or you can do. The idea is that you take some\ncorpus, you take some data set,",
    "start": "4151850",
    "end": "4160549"
  },
  {
    "text": "like maybe you\ntake genomics data, maybe you take a mixture of\ndifferent types of files. You run a bunch of\ndifferent compressors",
    "start": "4160550",
    "end": "4166670"
  },
  {
    "text": "in their different parameters,\nand then you make a plot. So you make a plot,\nlike this one.",
    "start": "4166670",
    "end": "4175390"
  },
  {
    "text": "So the x-axis is\ncompression speed. So this is better, basically.",
    "start": "4175390",
    "end": "4183509"
  },
  {
    "text": "Let me just write\nfaster compression. And this is more compression.",
    "start": "4183510",
    "end": "4189899"
  },
  {
    "text": " And you see, for example,\nthat if speed is your thing,",
    "start": "4189899",
    "end": "4197110"
  },
  {
    "text": "LZ4 is the way to go. There is nobody\neven close to it. It's just like several times\nfaster than everybody else.",
    "start": "4197110",
    "end": "4204489"
  },
  {
    "text": "Maybe if you want the\nextreme compression, then these things\ncalled ZPAQ or ZMIX, or these very, very\nslow but very powerful",
    "start": "4204490",
    "end": "4211130"
  },
  {
    "text": "compressors, maybe\nthose are the way to go. Maybe we want\nsomething in between. So maybe you want\nto use zstandard.",
    "start": "4211130",
    "end": "4217489"
  },
  {
    "text": "Maybe you want something\nslightly slower than zstandard that gives\nyou better compression. So maybe you use BZIP2 or BSC.",
    "start": "4217490",
    "end": "4223281"
  },
  {
    "text": "These might just sound\nlike names to you, if you have not heard of them. But basically these are\nthe popular compressors that many times people\nwould want to consider.",
    "start": "4223282",
    "end": "4231489"
  },
  {
    "text": "In this plot, this\ngreen one is gzip, this brown one is zstandard.",
    "start": "4231490",
    "end": "4237870"
  },
  {
    "text": "Would you ever use\ngzip over zstandard by looking at this plot? ",
    "start": "4237870",
    "end": "4246390"
  },
  {
    "text": "At the top right is the\nbetter direction, right? And you see just the zstandard,\nevery level of zstandard is just better than--",
    "start": "4246390",
    "end": "4252860"
  },
  {
    "text": "zstandard just gives you a\nbetter Pareto optimal sort of frontier, as\ncompared to gzip, because it's very similar\nidea but just modern.",
    "start": "4252860",
    "end": "4261020"
  },
  {
    "text": "It does use more\nmemory, so if you are like running\non a Raspberry Pi, or you're running on like a\n1970s computer for some reason,",
    "start": "4261020",
    "end": "4268940"
  },
  {
    "text": "then you want to use\ngzip because gzip can work with even kilobytes\nof memory, versus zstandard, would at least take megabytes.",
    "start": "4268940",
    "end": "4275353"
  },
  {
    "text": "When I was small,\nI had a computer just like 128 MB total RAM. So there, I could\nimagine like zstandard",
    "start": "4275353",
    "end": "4281060"
  },
  {
    "text": "would might be too expensive. But really, today,\nit's not that common.",
    "start": "4281060",
    "end": "4287090"
  },
  {
    "text": "Same for decompression speed. So this is, like,\nfaster decompression.",
    "start": "4287090",
    "end": "4295680"
  },
  {
    "text": "And this is more\ncompression, basically. So again, the\ny-axis is the same.",
    "start": "4295680",
    "end": "4302010"
  },
  {
    "text": "And here you again see\nLZ4 is the clear winner. Fast compression or fast\ndecompression, just use LZ4.",
    "start": "4302010",
    "end": "4307596"
  },
  {
    "text": "Don't worry about anything else. All of them have\nmultiple parameters. So that's why you see\nmultiple points corresponding",
    "start": "4307597",
    "end": "4312620"
  },
  {
    "text": "to the same thing. Zstandard is very fast,\nBrotli is very fast, gzip is slower, but\nstill pretty fast.",
    "start": "4312620",
    "end": "4319060"
  },
  {
    "text": "And the reason is all of\nthese are based on LZ77. And LZ77--",
    "start": "4319060",
    "end": "4325860"
  },
  {
    "text": "So what about the memory\nusage for gzip and zstandard? Yeah. So zstandard uses more memory\nbecause it-- by default,",
    "start": "4325860",
    "end": "4333960"
  },
  {
    "text": "uses a bigger window than gzip. Gzip, the maximum\nwindow is, like, I think 32 kilobytes or 64\nkilobytes, something like that.",
    "start": "4333960",
    "end": "4341310"
  },
  {
    "text": "Zstandard you can increase it to\neven gigabytes if you want to. But by default, it's\nlike a few megabytes.",
    "start": "4341310",
    "end": "4347010"
  },
  {
    "text": "So the memory usage of zstandard\nis like in tens of megabytes, typically, whereas gzip is like\na couple megabytes or less.",
    "start": "4347010",
    "end": "4354270"
  },
  {
    "text": "So that's the rough thing. Most applications\ntoday, I think, are fine with the\nzstandard memory usage.",
    "start": "4354270",
    "end": "4359910"
  },
  {
    "text": "But if you're in a\nvery constrained host, or constrained system, then\nyou might not be able to do it.",
    "start": "4359910",
    "end": "4365429"
  },
  {
    "text": "Yeah. So that's like a\ntrade-off they made. Like, it's not\nlike the zstandard is just better on every front. There is still, like, the memory\nfront where it's not so good.",
    "start": "4365430",
    "end": "4372543"
  },
  {
    "text": "But I think it's just\nmade for a modern age. Where gzip made some decisions. For example, they fixed\ntheir maximum window size",
    "start": "4372543",
    "end": "4379290"
  },
  {
    "text": "to be this 32 KB, or 64. I don't remember. There is no way in the format\nto allow it to increase.",
    "start": "4379290",
    "end": "4386070"
  },
  {
    "text": "Zstandard learned\nfrom that lesson. They don't put a upper\nlimit on the window size. They say, maybe, in\nfuture there will",
    "start": "4386070",
    "end": "4392052"
  },
  {
    "text": "be a machine which will be able\nto handle a 1 gigabyte or a 1 terabyte window.",
    "start": "4392052",
    "end": "4397380"
  },
  {
    "text": "Why not let it use that? We'll just-- so there are these\ndecisions that people make. So I think zstandard was\nmuch more careful in, like,",
    "start": "4397380",
    "end": "4405530"
  },
  {
    "text": "making these decisions on what\nthe format is in that sense. You can use zstandard\nwith a very low memory,",
    "start": "4405530",
    "end": "4411949"
  },
  {
    "text": "if you use a very small window. Yeah. And then, if you want\nmore compression,",
    "start": "4411950",
    "end": "4419310"
  },
  {
    "text": "but you're fine with\nslower decompression, use BSC or BZIP, which I\nwill talk about in a second.",
    "start": "4419310",
    "end": "4424991"
  },
  {
    "text": "But yeah, so the\npoint I was making was that LZ77 is\nfast at decompression because the decompression,\nas you saw before,",
    "start": "4424992",
    "end": "4432410"
  },
  {
    "text": "is just copying from the past. And mem copies are very fast. There isn't like a\nlot of logic there.",
    "start": "4432410",
    "end": "4437600"
  },
  {
    "text": "You do Huffman decoding, you\ndo ANS decoding, all of them are very fast. And then you just copy\nstuff from the past.",
    "start": "4437600",
    "end": "4443510"
  },
  {
    "text": "So general rule of thumb is\nzstandard has a very fast",
    "start": "4443510",
    "end": "4448789"
  },
  {
    "text": "decompression at any level. It has a lot of levels. It should be the first thing to\ntry, I think, in today's age.",
    "start": "4448790",
    "end": "4456340"
  },
  {
    "text": "If you are given a\ncompression problem, try zstandard first,\nand don't use gzip unless you have a\nvery good reason.",
    "start": "4456340",
    "end": "4462460"
  },
  {
    "text": "Maybe you have some\ncompatibility reason. A lot of people have. If you are writing data that\nother people need to read,",
    "start": "4462460",
    "end": "4467950"
  },
  {
    "text": "and they don't have zstandard\non their system, then maybe you need to write gzip. But other than that\nreally, don't use gzip.",
    "start": "4467950",
    "end": "4476340"
  },
  {
    "text": "To go even faster, try LZ4. So what LZ4 does\ndifferent from zstandard is that LZ4 has a very\nfast match finder.",
    "start": "4476340",
    "end": "4482400"
  },
  {
    "text": "And it doesn't do\nany entropy coding. So it skips the ANS\nor the Huffman step. It just encodes it with\nsome fixed number of bits.",
    "start": "4482400",
    "end": "4489960"
  },
  {
    "text": "So it's much, much\nfaster in that way. ",
    "start": "4489960",
    "end": "4495400"
  },
  {
    "text": "Now, if you want to go\na bit slower, right, you think that, OK, I need to\nstore this data for 10 years,",
    "start": "4495400",
    "end": "4500560"
  },
  {
    "text": "I don't work with it so often\nit's more for an archival type use case. Maybe you want like\na better compressor.",
    "start": "4500560",
    "end": "4506710"
  },
  {
    "text": "So now there are two\nchoices, mainly, one is this LZMA-based compressors\nwhich are again LZ77 followed",
    "start": "4506710",
    "end": "4512500"
  },
  {
    "text": "by arithmetic\ncoding, which we know can be more powerful\nthan like Huffman or ANS",
    "start": "4512500",
    "end": "4517780"
  },
  {
    "text": "because you can do\ncontext-based coding. And XZ, if you have\nheard of it, or 7-zip are like prime examples of this.",
    "start": "4517780",
    "end": "4524780"
  },
  {
    "text": "Or you use something called\nBWT-based compressors, which we didn't talk about\nin the class at all.",
    "start": "4524780",
    "end": "4530750"
  },
  {
    "text": "I will let you look\nat it in the homework. There is a question in the\nhomework that will teach you about BWT,\nBurrows-Wheeler Transform,",
    "start": "4530750",
    "end": "4537650"
  },
  {
    "text": "it's a way to transform the data\nto make it very compressible. And BWT is faster than LZMA,\ntypically, at compression",
    "start": "4537650",
    "end": "4545360"
  },
  {
    "text": "but slower at decompression\nbecause the decompression is no longer just copying it. It does more advanced things.",
    "start": "4545360",
    "end": "4552190"
  },
  {
    "text": "And then if you are even\nmore resource intensive, you should do, like,\nmake your own model, do context-based coding which\nwe learned in the last lecture.",
    "start": "4552190",
    "end": "4558670"
  },
  {
    "text": "And then, if you\nhave nothing to do, like, you're just\nsitting idle, you're",
    "start": "4558670",
    "end": "4564430"
  },
  {
    "text": "OK to have your data be\ncompressed in 100 years, use these super [CLEARS THROAT]\nsmall compressors.",
    "start": "4564430",
    "end": "4571449"
  },
  {
    "text": "This is, today, right? Maybe five years later,\nthings will change. Maybe we'll have GPUs on\nevery machine, or something.",
    "start": "4571450",
    "end": "4577929"
  },
  {
    "text": "Anyway. Right. And now, if you decide\nyou want to use zstandard, you want to use it correctly.",
    "start": "4577930",
    "end": "4583120"
  },
  {
    "text": "Use the latest version of\nthis thing, or any software. Or latest stable\nversion, obviously.",
    "start": "4583120",
    "end": "4589840"
  },
  {
    "text": "Choose the right level. There are levels 1 to 19. There are negative levels. There are some ultra\nlevels above 19.",
    "start": "4589840",
    "end": "4595600"
  },
  {
    "text": "There is a big range\nof compression speed, compression ratio trade-off\nyou can choose with zstandard.",
    "start": "4595600",
    "end": "4601780"
  },
  {
    "text": "And sometimes you want\nto go beyond this. Maybe these levels\nare not enough. As we saw in the past,\nyou have the hash length,",
    "start": "4601780",
    "end": "4607990"
  },
  {
    "text": "min-max length, dot, dot, dot. All these parameters. Levels are just like\nspecific combinations of these parameters.",
    "start": "4607990",
    "end": "4613810"
  },
  {
    "text": "You can go even deeper. You can define your own\nzstandard custom encoder by choosing this\nspecial parameters.",
    "start": "4613810",
    "end": "4622250"
  },
  {
    "text": "You can use the CLI,\nyou can use the library in the language of your choice. This is a common\nmistake that people do.",
    "start": "4622250",
    "end": "4628130"
  },
  {
    "text": "Like, if you're using zstandard\nin like C or Java or Python, Rest, whatever, if you are\ncompressing multiple files one",
    "start": "4628130",
    "end": "4635119"
  },
  {
    "text": "after the other, you don't\nneed to drop or delete your zstandard\ncontext every time.",
    "start": "4635120",
    "end": "4640130"
  },
  {
    "text": "You can reuse it. So that speeds up your\napplication quite a bit. If you're compressing\na bunch of small",
    "start": "4640130",
    "end": "4645770"
  },
  {
    "text": "files one after the other. And then if you have\nvery, very small files, where you don't expect to find\ngood matches within the file,",
    "start": "4645770",
    "end": "4653410"
  },
  {
    "text": "you use something called\ndictionary compression, which is, again, a problem\nin homework three. This is a very, very\ninteresting topic",
    "start": "4653410",
    "end": "4659680"
  },
  {
    "text": "which I hope you will enjoy. Also, has some of my\nfavorite cartoon characters,",
    "start": "4659680",
    "end": "4665480"
  },
  {
    "text": "so that's good. OK, and I think\nthis is the last. Yep.",
    "start": "4665480",
    "end": "4672219"
  },
  {
    "text": "So follow up question\non [INAUDIBLE].. So the standard is\ngreater than gzip.",
    "start": "4672220",
    "end": "4677470"
  },
  {
    "text": "Is that only true because\nwe have much bigger-- like, in terms of\nperformance, we have much bigger context window,\nin which we can find matches?",
    "start": "4677470",
    "end": "4685660"
  },
  {
    "text": "Is it still better if we\nlimit it to 64 KB [INAUDIBLE]?? It's a good question. He asks, is the\nstandard only better",
    "start": "4685660",
    "end": "4691929"
  },
  {
    "text": "because we give it\na bigger window? No. There are many things they do. One thing is they replace\nthe Huffman coding used",
    "start": "4691930",
    "end": "4697582"
  },
  {
    "text": "for the match\npositions and lengths with tANS, which is a better\ncompressor, as we saw.",
    "start": "4697582",
    "end": "4702730"
  },
  {
    "text": "It was much closer\nto arithmetic coding. So that's one thing. Then zstandard has many\nmore advanced match finding",
    "start": "4702730",
    "end": "4709300"
  },
  {
    "text": "strategies. Many of which actually\nonly make sense at longer context windows. So gzip uses a very simple\nhash-based match finder.",
    "start": "4709300",
    "end": "4717340"
  },
  {
    "text": "Zstandard has many\nother things there. And the last thing\nis the zstandard is just written better.",
    "start": "4717340",
    "end": "4723880"
  },
  {
    "text": "Both the compressor, the\ndecompressor, the format, all of which is written\nin a way to minimize the number of loops.",
    "start": "4723880",
    "end": "4730100"
  },
  {
    "text": "Loops are very expensive\nin modern hardware. So they did it in a way which is\nvery suitable for the today's,",
    "start": "4730100",
    "end": "4735559"
  },
  {
    "text": "like, architectures, the\ncomputer architecture stuff.",
    "start": "4735560",
    "end": "4742160"
  },
  {
    "text": "So all of that\nbasically contributes. C-- it's not like you\nshouldn't think zstandard is better compression than gzip.",
    "start": "4742160",
    "end": "4749210"
  },
  {
    "text": "It's like at the same\ncompression ratio, zstandard is faster,\nor at the same speed,",
    "start": "4749210",
    "end": "4756079"
  },
  {
    "text": "zstandard gives\nyou a smaller file. So basically, when zstandard is\ndoing the same thing that gzip is doing, it does it faster.",
    "start": "4756080",
    "end": "4763040"
  },
  {
    "text": "So that gives it a\nboost, basically. Right? So it's not only better\ncompression it's also better speed because they\nimplemented it much better.",
    "start": "4763040",
    "end": "4770720"
  },
  {
    "text": "Because the architecture's\nchanged over time. It's important-- we are\nnot saying gzip is bad. Like, when it was made, it's\na very, very efficient piece",
    "start": "4770720",
    "end": "4778520"
  },
  {
    "text": "of code for the 1990s. Today, like, that's not like\nthe thing you want to use.",
    "start": "4778520",
    "end": "4785630"
  },
  {
    "text": "So last point is\nthat, OK, now, you looked at all of those\nyou still think, no.",
    "start": "4785630",
    "end": "4791420"
  },
  {
    "text": "I have exabytes\nof my data, I want to make something\nspecial for my data, or I have genomics or\nsome special application.",
    "start": "4791420",
    "end": "4798710"
  },
  {
    "text": "I want to make my\nown compressor. So just a few\nthings that you want to think about before you start\nmaking your own compressor.",
    "start": "4798710",
    "end": "4805640"
  },
  {
    "text": "One thing is that\nyou checked out zstandard and gzip and\nBZIP2 and all of these, and you found that\nthe gap between them,",
    "start": "4805640",
    "end": "4813200"
  },
  {
    "text": "and your estimate\nof the entropy. You can build your own models. You make your\nprobability model you",
    "start": "4813200",
    "end": "4818610"
  },
  {
    "text": "try to estimate what is\nthe entropy of my data. And you see, oh,\nzstandard gives me 100 KB,",
    "start": "4818610",
    "end": "4824460"
  },
  {
    "text": "but my entropy is around 50 KB. So there is like a 50 KB\ngap between the entropy",
    "start": "4824460",
    "end": "4829800"
  },
  {
    "text": "and my data. So therefore, maybe\nI can do better. So that's sort of one thing. Another thing is that,\nOK, zstandard gives me",
    "start": "4829800",
    "end": "4836430"
  },
  {
    "text": "very good compression. But it just wastes a lot\nof time because it doesn't know that my data is a table.",
    "start": "4836430",
    "end": "4842250"
  },
  {
    "text": "Or my data is a genomic data,\nor my data is a CSV file, or it's like some\nspecific type of data.",
    "start": "4842250",
    "end": "4847920"
  },
  {
    "text": "So maybe, if I know that I'm-- zstandard is a general\npurpose compressor, right? So it has to work for\nevery type of data.",
    "start": "4847920",
    "end": "4854310"
  },
  {
    "text": "But your special compressor\nonly needs to work for one kind of data, so it has more\nflexibility in the design,",
    "start": "4854310",
    "end": "4859830"
  },
  {
    "text": "it can do things that zstandard\ncannot do because it knows that your data is going\nto be a CSV file, or it's going to be a genomics\ndata set or some other thing.",
    "start": "4859830",
    "end": "4870603"
  },
  {
    "text": "Another thing is,\nlike, if you are going to make your own\ndomain-specific compressor, it's easier if it's like a\nclosed ecosystem you're working",
    "start": "4870603",
    "end": "4876489"
  },
  {
    "text": "within a company or something. Because it's not just\nabout the compressor. If there are 100\ndifferent people reading",
    "start": "4876490",
    "end": "4884050"
  },
  {
    "text": "the compressed files with their\nown libraries, their own tools, you suddenly break everyone.",
    "start": "4884050",
    "end": "4889810"
  },
  {
    "text": "As soon as you say, oh, I'm\nnot using gzip or zstandard, I will use my own, like,\n[INAUDIBLE] or something",
    "start": "4889810",
    "end": "4896290"
  },
  {
    "text": "like that. I will make my own\ncompressor, I will just use my own compressor. But the other people don't know\nhow to decode your compressor.",
    "start": "4896290",
    "end": "4902470"
  },
  {
    "text": "So how will that work? So your thing should only-- will\nonly work if it's a closed-- it's much easier to work\nif it's a closed ecosystem.",
    "start": "4902470",
    "end": "4910210"
  },
  {
    "text": "And final thing is,\nlike, it's only worth it if you have a lot\nof data of that kind,",
    "start": "4910210",
    "end": "4915580"
  },
  {
    "text": "or you can't live\nwithout it, basically. You should have a\nvery strong case because a compressor\nneeds design.",
    "start": "4915580",
    "end": "4921790"
  },
  {
    "text": "It needs implementation. It needs a lot of testing. You need to create a\ncompression format, right?",
    "start": "4921790",
    "end": "4927070"
  },
  {
    "text": "You did that float question when\nyou did the assignment, right? It was so tricky to\nstore those floats.",
    "start": "4927070",
    "end": "4934210"
  },
  {
    "text": "So many different ways of doing\nthat with all their trade-offs. Think about a\nfull-fledged compressor.",
    "start": "4934210",
    "end": "4939343"
  },
  {
    "text": "So many different choices\nyou need to make when you, like, define the format. And once you define the\nformat, and you say,",
    "start": "4939343",
    "end": "4944990"
  },
  {
    "text": "I'm at version one, then\nyou're stuck basically. Then you should not\nchange your compressor.",
    "start": "4944990",
    "end": "4950420"
  },
  {
    "text": "If you change your format, then\nyour-- other people's decoders will break. And everybody will\nbe very unhappy.",
    "start": "4950420",
    "end": "4955789"
  },
  {
    "text": "I got a zstandard file,\nbut your zstandard decoder is not working. So just you need\nto be very careful",
    "start": "4955790",
    "end": "4961340"
  },
  {
    "text": "about backwards compatibility,\nthat sort of thing. You need to monitor\nhow it's working. You will find bugs, right?",
    "start": "4961340",
    "end": "4967340"
  },
  {
    "text": "Gzip, even if it's,\nlike, 30 years old they found a bug in\nit like last year. So it's still, like--",
    "start": "4967340",
    "end": "4972500"
  },
  {
    "text": "you need to maintain it\nfor a very, very long time. And then you need to not\nonly implement it once",
    "start": "4972500",
    "end": "4978080"
  },
  {
    "text": "in C or Python,\nor something, you need to have it be\nsupported in, like-- you should have a\nJava library, you",
    "start": "4978080",
    "end": "4983090"
  },
  {
    "text": "should have a C library,\nPython library, dot, dot, dot. You need to have it work\non today's machines.",
    "start": "4983090",
    "end": "4988520"
  },
  {
    "text": "You need to have it work on,\nlike, yesterday's machines. And, like, 30-year-old\nprocessors, different architectures,\ndifferent operating systems.",
    "start": "4988520",
    "end": "4995790"
  },
  {
    "text": "So yeah. Only do it if it's\nworth it, basically. That is the point.",
    "start": "4995790",
    "end": "5001870"
  },
  {
    "text": "Like, yeah. In a big company, you\ncan often find cases where it is worth it, or if\nthat is your whole product,",
    "start": "5001870",
    "end": "5007389"
  },
  {
    "text": "maybe you find a case\nwhere it is worth it. Right? Genomics, for example,\nis a domain where there's a lot of data of the same kind.",
    "start": "5007390",
    "end": "5013120"
  },
  {
    "text": "And it is definitely worth\nit doing a custom compressor, and they did it basically. But then everybody writes a\npaper improving it slightly",
    "start": "5013120",
    "end": "5020320"
  },
  {
    "text": "in a breaking manner. But nobody uses those\nparticular things, right?",
    "start": "5020320",
    "end": "5025343"
  },
  {
    "text": "Basically, if you have a million\ndifferent domain-specific compressors, how is anybody\ngoing to inter-operate?",
    "start": "5025343",
    "end": "5031659"
  },
  {
    "text": "Like we have our language like\nEnglish or any other language. If everybody decided, I\nwill use my own language,",
    "start": "5031660",
    "end": "5036887"
  },
  {
    "text": "that's not going to work. So just-- yeah. There is a limit to when\ndomain-specific compressors",
    "start": "5036888",
    "end": "5042040"
  },
  {
    "text": "work. But they do work. And if you have a domain\nthat you are interested in,",
    "start": "5042040",
    "end": "5048409"
  },
  {
    "text": "and if you think a\ndomain-specific compressor is the right thing, please\ncome to us and we'll do a project, basically.",
    "start": "5048410",
    "end": "5054300"
  },
  {
    "text": "Yeah. Do a project on that, basically. Last year, like, people\ndid on MRI data, I think,",
    "start": "5054300",
    "end": "5059410"
  },
  {
    "text": "and a few other types\nof specific data that they were working with.",
    "start": "5059410",
    "end": "5064520"
  },
  {
    "text": "So that's all on\nlossless compression. [INAUDIBLE] will see\nyou on Wednesday.",
    "start": "5064520",
    "end": "5069530"
  },
  {
    "text": "Thank you. Thank you for your patience. ",
    "start": "5069530",
    "end": "5077000"
  }
]