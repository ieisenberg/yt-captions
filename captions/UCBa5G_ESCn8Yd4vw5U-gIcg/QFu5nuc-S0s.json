[
  {
    "start": "0",
    "end": "202000"
  },
  {
    "text": "All right. Hey, everyone. Welcome back. Um, so let's continue our discussion today of reinforcement learning and MDPs.",
    "start": "3530",
    "end": "16004"
  },
  {
    "text": "And specifically, what I hope you learned from today is how to apply reinforcement learning,",
    "start": "16005",
    "end": "21720"
  },
  {
    "text": "um, even to continuous state or infinite state MDPs. Um, so we'll talk about discretization, model-based RL,",
    "start": "21720",
    "end": "29880"
  },
  {
    "text": "we'll talk about models/simulation and fitted value iteration is the main algorithm, um, I want to lead up to for today.",
    "start": "29880",
    "end": "37620"
  },
  {
    "text": "Um, just to recap. Because we're gonna build on what we had learned, uh, in the last two lectures,",
    "start": "37620",
    "end": "43110"
  },
  {
    "text": "I wanna make sure that you have the notation fresh in your mind. Um, MDP was states,",
    "start": "43110",
    "end": "49250"
  },
  {
    "text": "actions, transition probabilities, discount factor reward. That was an example. Um, V Pi was the value function for a policy Pi which is the expected payoff.",
    "start": "49250",
    "end": "59195"
  },
  {
    "text": "If you execute that policy starting from a state S and V star was the optimal value function.",
    "start": "59195",
    "end": "65239"
  },
  {
    "text": "And last time, we figured out that if you know what is V star, then uh, Pi star,",
    "start": "65240",
    "end": "71130"
  },
  {
    "text": "the optimal policy or the optimal action for a given state, can be computed as the argmax of that, right?",
    "start": "71130",
    "end": "78634"
  },
  {
    "text": "Um, and, uh, one, one, one thing though we'll come back to later is, uh, an equivalent way of writing that formula,",
    "start": "78635",
    "end": "86975"
  },
  {
    "text": "is that this is the expectation with respect to S prime drawn from",
    "start": "86975",
    "end": "93065"
  },
  {
    "text": "P_sa of V star of S prime, right?",
    "start": "93065",
    "end": "99570"
  },
  {
    "text": "So when we go to, uh, er, er, we've been, we have been working with discrete state MDPs with an 11 state MDP.",
    "start": "99570",
    "end": "107105"
  },
  {
    "text": "So this is the sum over all the states S prime. But when we have- when we go to continuous state MDPs,",
    "start": "107105",
    "end": "113360"
  },
  {
    "text": "the generalization of this or what this becomes- this is the expected value with respect to S prime drawn from the state transition probabilities here with- of,",
    "start": "113360",
    "end": "122780"
  },
  {
    "text": "uh, index Pi_sa, covers state, covers that action of the value that you attain in the future.",
    "start": "122780",
    "end": "129869"
  },
  {
    "text": "So V star of S prime. Okay? Um, and then we saw the value iteration algorithm.",
    "start": "129870",
    "end": "136640"
  },
  {
    "text": "We're also- so we talked about valuation policy iteration. But today, uh, we're built on value iteration,",
    "start": "136640",
    "end": "142310"
  },
  {
    "text": "but the value iteration algorithm uses Bellman's equations, uh, which says, take the left-hand side,",
    "start": "142310",
    "end": "149340"
  },
  {
    "text": "set it to the right-hand side, right? And, uh, for, for V star, if V was equal to V star of the left-hand side is equal to the right-hand side,",
    "start": "149340",
    "end": "156105"
  },
  {
    "text": "that was, um, oh, I'm sorry. It's missing a max there. Right? Um, for- if V was equal to V star,",
    "start": "156105",
    "end": "165284"
  },
  {
    "text": "then the left-hand side and the right-hand side will be equal to each other. But, uh, what value iteration does is an algorithm that initializes V of S as",
    "start": "165285",
    "end": "173360"
  },
  {
    "text": "0 and repeatedly carries its update until V converges to V star.",
    "start": "173360",
    "end": "178370"
  },
  {
    "text": "And after that, you can then, um, compute Pi star or find for every state find,",
    "start": "178370",
    "end": "184130"
  },
  {
    "text": "the optimal action A. Okay? So um, because we're gonna build on this notation and this set of ideas today,",
    "start": "184130",
    "end": "192470"
  },
  {
    "text": "I just want to make sure all this makes sense, right? Any questions about that before we move on?",
    "start": "192470",
    "end": "200990"
  },
  {
    "text": "No? Okay. Cool. All right. So, um, no? No. Okay. So everything we've done so far was built",
    "start": "200990",
    "end": "209310"
  },
  {
    "start": "202000",
    "end": "650000"
  },
  {
    "text": "on the MDP having a finite set of states. Right? So with the 11 state MDP,",
    "start": "209310",
    "end": "214700"
  },
  {
    "text": "S was a discrete set of states. Um, last time on Monday, I think somebody asked, \"Well,",
    "start": "214700",
    "end": "220155"
  },
  {
    "text": "how do you deal with continuous states?\" So we'll, we'll, we'll work on that today. But, uh, let's say you want to build a, um,",
    "start": "220155",
    "end": "226170"
  },
  {
    "text": "[NOISE] uh, let me draw a car. Right? Let's say you want to build a  ar,",
    "start": "226170",
    "end": "231805"
  },
  {
    "text": "you know, maybe a self-driving car. Right? Um, ah, the state space of a car is, um, let's see.",
    "start": "231805",
    "end": "239925"
  },
  {
    "text": "I'm gonna- well, instead of taking the- my artistic side view of the car,",
    "start": "239925",
    "end": "245630"
  },
  {
    "text": "if you take a top-down view of a car. Right? So this is from the satellite imagery, you know,",
    "start": "245630",
    "end": "251670"
  },
  {
    "text": "top-down view of a car where we have two views of the car heading this way. Um, how do you model the state of a car, right?",
    "start": "251670",
    "end": "257700"
  },
  {
    "text": "Well, a common way to model the state of a car that's driving around on planet Earth, is that you need to know the position.",
    "start": "257700",
    "end": "265025"
  },
  {
    "text": "Right? Um, and so that can be represented as x, y, uh, two numbers represent,",
    "start": "265025",
    "end": "271200"
  },
  {
    "text": "you know, longitude or latitude or or something. Right? Um, you probably want to know the, uh,",
    "start": "271200",
    "end": "277410"
  },
  {
    "text": "orientation of a car by maybe measured relative to North,",
    "start": "277410",
    "end": "283170"
  },
  {
    "text": "you know, what's the orientation of [NOISE] the car? Um, and then it turns out if you're driving at very low speeds, this is fine.",
    "start": "283170",
    "end": "291080"
  },
  {
    "text": "But if you're driving at anything other than very low speeds, then, um, [NOISE] we'll often include in the state-space,",
    "start": "291080",
    "end": "299560"
  },
  {
    "text": "also the velocities and angular velocity. So x dot is the velocity in the x direction.",
    "start": "299560",
    "end": "305675"
  },
  {
    "text": "So x dot is dx, dt. Right? Or it's the velocity and acceleration, y dot. So velocity in y direction and Theta dot is the angular velocity,",
    "start": "305675",
    "end": "312950"
  },
  {
    "text": "the rate at which your car is turning. Okay? And it's sort of, um, up to you, how you want to model the car,",
    "start": "312950",
    "end": "319625"
  },
  {
    "text": "is it important to model the current angle of the steering wheel, is it important to model how worn down is your front",
    "start": "319625",
    "end": "326120"
  },
  {
    "text": "left tire as opposed to how worn down is your, your right tire. So depending on the application you are building,",
    "start": "326120",
    "end": "332660"
  },
  {
    "text": "is up to you to decide what is the, um, state-based- state-space you want to use to model this car,",
    "start": "332660",
    "end": "339185"
  },
  {
    "text": "um, and I guess- and, and if you are building a car to, to, to race in a racetrack, maybe it is important to model what is the temperature of the [NOISE] engine and how,",
    "start": "339185",
    "end": "347225"
  },
  {
    "text": "you know, worn down is each of your four tires separately. But for a lot of normal driving, uh, this would be,",
    "start": "347225",
    "end": "352865"
  },
  {
    "text": "uh, uh, you know, sufficient level of detail to model the state-space. Okay? Um, but so this is a, uh, six-dimensional,",
    "start": "352865",
    "end": "360810"
  },
  {
    "text": "uh, um, so this is a, uh, six-dimensional state-space representation.",
    "start": "360810",
    "end": "367514"
  },
  {
    "text": "Oh, and for those that work in robotics, uh, that would be called the kinematic model of the car, and that would be the dynamics model of the car.",
    "start": "367515",
    "end": "374030"
  },
  {
    "text": "Right? If, if you want to model their velocities as well. Um, or let's see actually, all right.",
    "start": "374030",
    "end": "381150"
  },
  {
    "text": "How about a helicopter? Right? I don't know. I hope this is a helicopter. All right.",
    "start": "381150",
    "end": "387000"
  },
  {
    "text": "Ah, the states- how, how, how do you model a state-space of a helicopter? Helicopter flies around in 3D rather than drives around in 2D.",
    "start": "387000",
    "end": "393585"
  },
  {
    "text": "And so common way to model the state-space helicopter would be to model it as- [NOISE]",
    "start": "393585",
    "end": "398599"
  },
  {
    "text": "having a position x, y, z. Um, and then also, a 3D orientation of a helicopter is usually modeled with,",
    "start": "398600",
    "end": "408680"
  },
  {
    "text": "uh, three numbers which we sometimes call the roll, pitch, and yaw. Right? So you're- if, if,",
    "start": "408680",
    "end": "414135"
  },
  {
    "text": "if you're in an airplane roll  is that you are rolling to left or right, pitch is are you pitching up and down, and yaw is, you know, are you facing North,",
    "start": "414135",
    "end": "419760"
  },
  {
    "text": "South, East or West, right? So there's one way to turn the three dimensional orientation of an object like an airplane or a helicopter into three numbers.",
    "start": "419760",
    "end": "427980"
  },
  {
    "text": "So, so, uh, er, the, the details aren't important. And if you actually work on a helicopter, you would figure this out. But for today's purposes it's just- right, uh,",
    "start": "427980",
    "end": "434720"
  },
  {
    "text": "I- I guess the [NOISE] roll, pitch, yaw.",
    "start": "434720",
    "end": "440075"
  },
  {
    "text": "Right? But that, uh, um, to represent the, uh, orientation of a three-dimensional object flying around,",
    "start": "440075",
    "end": "446060"
  },
  {
    "text": "this is conventionally represented with three numbers, uh, such as roll, pitch and yaw. Um, and then [NOISE] x dot, y dot,",
    "start": "446060",
    "end": "454355"
  },
  {
    "text": "z dot, Phi dot, Theta dot, Psi dot. They're linear velocity and the, um, angular velocity.",
    "start": "454355",
    "end": "463830"
  },
  {
    "text": "Okay? Um, [NOISE] maybe just one last example.",
    "start": "463830",
    "end": "469819"
  },
  {
    "text": "So it turns out in, in, in reinforcement learning, uh, maybe early, early history of reinforcement learning,",
    "start": "469820",
    "end": "475710"
  },
  {
    "text": "one of the problems that a lot of people just happened to work on, um, uh, and, and, and therefore,",
    "start": "475710",
    "end": "481830"
  },
  {
    "text": "you'd see in a lot reinforcement learning textbooks, there's something called the inverted pendulum problem. But what that is, is a little toy, um,",
    "start": "481830",
    "end": "489335"
  },
  {
    "text": "which is a little cart, that's on wheels, that's on a track, um, and you have a little pole that is attached to this cart and there's a",
    "start": "489335",
    "end": "500180"
  },
  {
    "text": "free [NOISE] swivel there, right?",
    "start": "500180",
    "end": "507150"
  },
  {
    "text": "Uh, and so this pole just flops over or this poll just swings freely and there's no motor,",
    "start": "507150",
    "end": "512400"
  },
  {
    "text": "uh, there's no motor at this- at this little hinge there. [NOISE] And so the inverted pendulum problem is- see that I've prepared this.",
    "start": "512400",
    "end": "520134"
  },
  {
    "text": "Right? Is- [LAUGHTER] no. I've always prepared this.. If, if, if you have, uh, if you have a free pole and if this is your cart moving left and right,",
    "start": "520135",
    "end": "527720"
  },
  {
    "text": "the inverted pendulum problem is, you know, can you, if you see it swivel, can you kind of balance that, right?",
    "start": "527720",
    "end": "533640"
  },
  {
    "text": "[LAUGHTER] Um, and so,",
    "start": "533640",
    "end": "538939"
  },
  {
    "text": "uh, one of the- so common textbook examples of, uh, um, reinforcement learning is, uh,",
    "start": "538939",
    "end": "546890"
  },
  {
    "text": "can you choose actions over time to move this left and right so as to keep the pole oriented upward?",
    "start": "546890",
    "end": "554740"
  },
  {
    "text": "Right? And so for a problem like this, um, if you have a linear rail just a one-dimensional, you know,",
    "start": "554740",
    "end": "559810"
  },
  {
    "text": "like a railway track that this cart is on, the state-space would be x which is the,",
    "start": "559810",
    "end": "564910"
  },
  {
    "text": "uh, position of the cart. Um, [NOISE] Theta which is the, ah,",
    "start": "564910",
    "end": "572735"
  },
  {
    "text": "orientation of the pole as was x dot and Theta dot.",
    "start": "572735",
    "end": "578089"
  },
  {
    "text": "Right? So this would be a four-dimensional state-space for the- for the inverted pendulum if,",
    "start": "578090",
    "end": "583100"
  },
  {
    "text": "if it's like running left and right on a railway track- on a one-dimensional railway track, right?",
    "start": "583100",
    "end": "589055"
  },
  {
    "text": "Um, all right. Cool. So, uh, for all of these problems,",
    "start": "589055",
    "end": "595140"
  },
  {
    "text": "if you want to build, you know, a self-driving car and have it do something or, um, build an autonomous helicopter [NOISE] and have it either hover stably or",
    "start": "595140",
    "end": "602450"
  },
  {
    "text": "fly a trajectory or keep the pole upright in inverted pendulum. These are examples of robotics problems where you would",
    "start": "602450",
    "end": "608960"
  },
  {
    "text": "model the state space as a continuous state-space. So what I wanna do today is focus on problems where the state-space [NOISE] is, um, R_n.",
    "start": "608960",
    "end": "620400"
  },
  {
    "text": "So n-dimensional set of row numbers. And in these examples, I guess n would be 4 or 6 or 12.",
    "start": "620400",
    "end": "626925"
  },
  {
    "text": "Right? Oh, and, uh, again, for the- for the mathematicians in this class, technically,",
    "start": "626925",
    "end": "631969"
  },
  {
    "text": "uh, angles are not real numbers because they wrap around, and they only go to 360, and then they wrap around to 0.",
    "start": "631969",
    "end": "637639"
  },
  {
    "text": "But I think for the purposes of today, uh, that's not important. So we just treat this as R_n. Oh, yeah. Okay. [NOISE].",
    "start": "637640",
    "end": "648995"
  },
  {
    "text": "[NOISE] So [NOISE] all right.",
    "start": "648995",
    "end": "655495"
  },
  {
    "start": "650000",
    "end": "1025000"
  },
  {
    "text": "Um, so the most straight- straightforward way- [NOISE] the most straightforward way",
    "start": "655495",
    "end": "667660"
  },
  {
    "text": "to work with a continuous state space is discretization where, um, you know, you might have in this example a two-dimensional state-space,",
    "start": "667660",
    "end": "678100"
  },
  {
    "text": "maybe, ah, x and Theta for the inverted pendulum. And then you just lay down the cell or grid values, right?",
    "start": "678100",
    "end": "687985"
  },
  {
    "text": "And discretize it back to a- a discrete state problem. Ah, and so, you know,",
    "start": "687985",
    "end": "693355"
  },
  {
    "text": "so you can give the states a set of names, one, two, three, four, whatever and anywhere within that little square you just",
    "start": "693355",
    "end": "700075"
  },
  {
    "text": "pretend that your MDP in the robot is in state number 1. So this takes a continuous state problem and turns it back to a discrete state problem.",
    "start": "700075",
    "end": "708175"
  },
  {
    "text": "Um, this is such a simple straightforward way to do it. Ah, this is actually reasonable to do for small problems.",
    "start": "708175",
    "end": "715075"
  },
  {
    "text": "Um, and if you have a relatively small low dimensional states MDP like an inverted pendulum problem,",
    "start": "715075",
    "end": "721435"
  },
  {
    "text": "you know, four-dimensional, it's actually perfectly fine to discretize the state 3 and solve it this way. Ah, let me describe some disadvantages of discretization first.",
    "start": "721435",
    "end": "730345"
  },
  {
    "text": "And then- and then we chat a little bit about when you should just use discretization because even though it's not the best algorithm,",
    "start": "730345",
    "end": "736345"
  },
  {
    "text": "it works fine for smaller problems. But for bigger problems, we'll have to go to more sophisticated algorithms like fitted value iteration, okay?",
    "start": "736345",
    "end": "745585"
  },
  {
    "text": "But, um, so what are the problems with discretization, right?",
    "start": "745585",
    "end": "750740"
  },
  {
    "text": "Well first, actually this marker is- [NOISE] this is a very-",
    "start": "751470",
    "end": "764245"
  },
  {
    "text": "you know there's kind of a naive representation, ah, for, ah, V_star,",
    "start": "764245",
    "end": "772330"
  },
  {
    "text": "ah, and Pi_star, right? Which is- you know,",
    "start": "772330",
    "end": "779185"
  },
  {
    "text": "remember the very first problem we talked about, ah, predicting housing crisis?",
    "start": "779185",
    "end": "784779"
  },
  {
    "text": "Um, imagine if x was the size of a house,",
    "start": "784780",
    "end": "790040"
  },
  {
    "text": "and the vertical axis was the price of a house, ah, and you have a dataset that looked like this, [NOISE] all right?",
    "start": "790040",
    "end": "799580"
  },
  {
    "text": "Discretization is the- the- the discretization equivalent of trying to fit a function as data would be to look for the input feature and,",
    "start": "799580",
    "end": "808270"
  },
  {
    "text": "um, you know let's discretize it into Phi values. And for each of these little buckets in- in each of these five intervals,",
    "start": "808270",
    "end": "816670"
  },
  {
    "text": "let's fit a constant function, right, or something like that, right?",
    "start": "816670",
    "end": "822805"
  },
  {
    "text": "So this staircase would be how, you know, discretization will represent the price of a house as a function of the size.",
    "start": "822805",
    "end": "831970"
  },
  {
    "text": "Um, and the analogy is that what we're doing in reinforcement learning is we want to approximate the value function.",
    "start": "831970",
    "end": "840745"
  },
  {
    "text": "And if you were to discretize it then, um, on the x-axis is maybe the state.",
    "start": "840745",
    "end": "846250"
  },
  {
    "text": "And now, I'm down to one-dimensional state, right? Cause that's where I can plot. And you are saying that, well,",
    "start": "846250",
    "end": "851455"
  },
  {
    "text": "let's approximate the value function, you know, as a- as a staircase function,",
    "start": "851455",
    "end": "856839"
  },
  {
    "text": "as a function of the set of states, right? And you know- and this is not terrible. If you have a lot of data and very few input features,",
    "start": "856840",
    "end": "863500"
  },
  {
    "text": "you can get away with this. This will work, okay? But, it- it- it- it doesn't, it doesn't seem to s- allow you to fit a smoother function, right?",
    "start": "863500",
    "end": "871465"
  },
  {
    "text": "Um, so that's one downside. It's just not a very good representation. Um, and the second downside is the, ah, dimensionality.",
    "start": "871465",
    "end": "886480"
  },
  {
    "text": "All right. Some- somewhat fancifully named cursive dimensionality, which is, ah, and Richard Bellman had given this name, and this is a cool sounding name.",
    "start": "886480",
    "end": "896380"
  },
  {
    "text": "But, what it means is that if, um, the state space is in R_n, um, and discretize,",
    "start": "896380",
    "end": "904910"
  },
  {
    "text": "you know, each dimension into k values,",
    "start": "905370",
    "end": "914450"
  },
  {
    "text": "then you get k_n discrete states, right?",
    "start": "914460",
    "end": "922810"
  },
  {
    "text": "So if we discretize, ah, position and orientation into 10 values which is quite small,",
    "start": "922810",
    "end": "929125"
  },
  {
    "text": "then you end up with you know 10-n states which grows exponentially and in the dimensional state space n. So, um,",
    "start": "929125",
    "end": "935875"
  },
  {
    "text": "discretization works fine if you have relatively low dimensional problems, like two-dimensions, no problem,",
    "start": "935875",
    "end": "942070"
  },
  {
    "text": "four dimensions maybe it's okay. But they were very high-dimensional state spaces. Ah, this is- this is not a good- this is not a good representation, right?",
    "start": "942070",
    "end": "951240"
  },
  {
    "text": "And, um, it turns out the cursive dimensionality- to take a slight aside",
    "start": "951240",
    "end": "957075"
  },
  {
    "text": "from continuous state spaces because dimensionality also applies for very large discrete state MDPs.",
    "start": "957075",
    "end": "964015"
  },
  {
    "text": "So for example, one of the places people have applied reinforcement learning is in factory optimization, right?",
    "start": "964015",
    "end": "970450"
  },
  {
    "text": "So we have a factory with 100 machines in a factory and if every machine in the factory is doing something slightly different, um,",
    "start": "970450",
    "end": "979165"
  },
  {
    "text": "then if you have 100 machines in a giant factory, ah,",
    "start": "979165",
    "end": "985509"
  },
  {
    "text": "each- and each machine can be in k different states,",
    "start": "985510",
    "end": "990760"
  },
  {
    "text": "then the total number of states of your factory is, um, k to the power of 100, right?",
    "start": "990760",
    "end": "998574"
  },
  {
    "text": "And so even if- so- so cursive dimensionality also applies to very large discrete state spaces such as if you have a factory,",
    "start": "998575",
    "end": "1005925"
  },
  {
    "text": "with 100 machines, and then your total state space becomes k to the 100. Um, and it turns out that for this to have a discrete state space,",
    "start": "1005925",
    "end": "1012720"
  },
  {
    "text": "ah, fitted value iteration can be a much better algorithm as well. We'll get to fitted evaluation in a little bit, okay?",
    "start": "1012720",
    "end": "1020415"
  },
  {
    "text": "So, um, let's see.",
    "start": "1020415",
    "end": "1026655"
  },
  {
    "start": "1025000",
    "end": "1360000"
  },
  {
    "text": "So some practical- so, ah, now despite all this criticism of digitalization",
    "start": "1026655",
    "end": "1034664"
  },
  {
    "text": "if you have a small state space there's a simple method, ah, to try to apply, you know.",
    "start": "1034665",
    "end": "1039704"
  },
  {
    "text": "And- and if- if you have a very small state space, go ahead and discretize it if you want quick things to try and just get something working.",
    "start": "1039705",
    "end": "1045990"
  },
  {
    "text": "Ah, so let me share with you some maybe guidelines. Ah, this is- this is how I do it I guess, right?",
    "start": "1045990",
    "end": "1052095"
  },
  {
    "text": "If you have a, you know, two-dimensional state space or three dimensional state space, it's no problem, just discretize.",
    "start": "1052095",
    "end": "1058980"
  },
  {
    "text": "Of usually for a lot of problems, uh, it's just fine. Um, if you have maybe a 4-6 dimensional state space,",
    "start": "1058980",
    "end": "1068535"
  },
  {
    "text": "um, you know, I would think about it, ah, and it will still often work. So for the inverted pendulum which is four-dimensional state space,",
    "start": "1068535",
    "end": "1075390"
  },
  {
    "text": "it works just fine. Um, I've had some friends work on, ah, trying to, ah, drive a old bicycle, right?",
    "start": "1075390",
    "end": "1082650"
  },
  {
    "text": "Which you can model as a six-dimensional state space, ah, and you know discretization it- it kind of",
    "start": "1082650",
    "end": "1088140"
  },
  {
    "text": "works as it- it- it works if you put some work into it. Ah, one of the tricks you want to use as you approach",
    "start": "1088140",
    "end": "1094470"
  },
  {
    "text": "the 4-6 dimensional state space range is, ah, choose your discretization more carefully.",
    "start": "1094470",
    "end": "1101220"
  },
  {
    "text": "So for example, if the state S2 is really important.",
    "start": "1101220",
    "end": "1106275"
  },
  {
    "text": "So if you think the- the actions you need to take or the value of the performance is really sensitive to the state S2 and less in the state S1,",
    "start": "1106275",
    "end": "1115020"
  },
  {
    "text": "then, um, in this range people end up designing, um, unequal discretizations where you might discretize S2 much more finely than S1, right?",
    "start": "1115020",
    "end": "1124320"
  },
  {
    "text": "And- and the reason you do that is, ah, the number of states, the number of discrete states is now blowing up exponentially.",
    "start": "1124320",
    "end": "1129960"
  },
  {
    "text": "Something to the power of 4, something to the power of 6. And these tricks allow you to just reduce a little bit the number of discrete states you end up having to model.",
    "start": "1129960",
    "end": "1138030"
  },
  {
    "text": "Um, I think, you know, if you have a 7-8 dimensional problem, ah, I- that- that's pushing it.",
    "start": "1138030",
    "end": "1144825"
  },
  {
    "text": "That's when I would kind of be nervous, and- and, you know, be increasingly inclined to not use discretization.",
    "start": "1144825",
    "end": "1151065"
  },
  {
    "text": "I personally rarely used discretization for problems that are eight-dimensional. Ah, and then when your problems that are even higher-dimensional than this.",
    "start": "1151065",
    "end": "1159299"
  },
  {
    "text": "You know like 9, 10, and higher than I would very seriously consider, um, ah, an algorithm that does not discretize.",
    "start": "1159300",
    "end": "1166575"
  },
  {
    "text": "Very rare, um, to use discretization for- for problems this high. Even seven to eight is quite rare.",
    "start": "1166575",
    "end": "1172380"
  },
  {
    "text": "I've seen it done in rare occasions but- but- and- and - and these things get worse exponentially, right?",
    "start": "1172380",
    "end": "1177900"
  },
  {
    "text": "With the number of dimensions. So maybe there's a set of guidelines for when to use discretization and when to seriously consider doing something else.",
    "start": "1177900",
    "end": "1187630"
  },
  {
    "text": "All right. So, um, in the alternative approach that you see today, ah,",
    "start": "1189830",
    "end": "1197325"
  },
  {
    "text": "what you will be able to do is to approximate V star",
    "start": "1197325",
    "end": "1203460"
  },
  {
    "text": "directly without resorting to discretization, okay?",
    "start": "1203460",
    "end": "1219070"
  },
  {
    "text": "And, um, uh, there'll be an analogy that will make later,",
    "start": "1219070",
    "end": "1224120"
  },
  {
    "text": "uh, just, you know alluding to this plot again. Right, so this analogy between linear regression where you're trying to approximate",
    "start": "1224120",
    "end": "1230450"
  },
  {
    "text": "y as a function of X and value iteration, where you're trying to learn or approximate V as a function of s. Right, that's v star.",
    "start": "1230450",
    "end": "1240125"
  },
  {
    "text": "Which is that in linear regression, um, you say let's approximate X as a linear function of y, right, um,",
    "start": "1240125",
    "end": "1252655"
  },
  {
    "text": "or if you don't want to use the roll features y, ah, what you can do is, um, use, you know,",
    "start": "1252655",
    "end": "1261475"
  },
  {
    "text": "theta transpose, theta transpose phi, oh, I'm sorry, got that totally mixed up.",
    "start": "1261475",
    "end": "1267440"
  },
  {
    "text": "Right, where phi of X is the features of x, ah, so if, um, ah, right?",
    "start": "1268450",
    "end": "1278465"
  },
  {
    "text": "So this is what linear regression does where if X is your housing price then maybe phi of X is equal to,",
    "start": "1278465",
    "end": "1285485"
  },
  {
    "text": "you know, X_1, X_2, X_1 squared, X_1, X_2 and so on, right?",
    "start": "1285485",
    "end": "1292415"
  },
  {
    "text": "So that's how, that's how you can use linear regression to approximate the price of a house, either as a function of the raw features or as a function of some,",
    "start": "1292415",
    "end": "1301025"
  },
  {
    "text": "you know, slightly more sophisticated, slightly more complex set of features of the house. And what, we will- what,",
    "start": "1301025",
    "end": "1307475"
  },
  {
    "text": "what you see in, um, fitted value iteration is a model where we will approximate v star of s as,",
    "start": "1307475",
    "end": "1318304"
  },
  {
    "text": "um, a linear function of features of the state.",
    "start": "1318305",
    "end": "1325400"
  },
  {
    "text": "Okay? So that's the algorithm we'll build up to. And, uh, um, uh,",
    "start": "1325400",
    "end": "1331325"
  },
  {
    "text": "yeah we're going to try to use linear regression with a lot of modifications to approximate the value function.",
    "start": "1331325",
    "end": "1339034"
  },
  {
    "text": "Okay? And, and, and again in reinforcement learning in value iteration, um, the,",
    "start": "1339035",
    "end": "1344810"
  },
  {
    "text": "the- your goal is to find a good approximation to the value function because once you have that you can then use,",
    "start": "1344810",
    "end": "1350690"
  },
  {
    "text": "you know, the equation we had earlier to compute the optimal action for every state, right? So, so we just focused on computing the value function.",
    "start": "1350690",
    "end": "1358080"
  },
  {
    "text": "Now in order to derive the fitted value iteration algorithm, um,",
    "start": "1358660",
    "end": "1367520"
  },
  {
    "start": "1360000",
    "end": "1738000"
  },
  {
    "text": "it turns out that, uh, um, fits it value iteration, um,",
    "start": "1367520",
    "end": "1373970"
  },
  {
    "text": "works best with a model with simulator of the MDP. So let me describe what that means and",
    "start": "1373970",
    "end": "1380419"
  },
  {
    "text": "how you get the model and then we'll talk about how you can actually you implement the fitted value iteration algorithm",
    "start": "1380420",
    "end": "1386090"
  },
  {
    "text": "and have it work on these types of problems. Okay?",
    "start": "1386090",
    "end": "1390120"
  },
  {
    "text": "All right. So, um, what a model of a or",
    "start": "1398710",
    "end": "1415970"
  },
  {
    "text": "a simulator of your robot is- is just a function that takes as input",
    "start": "1415970",
    "end": "1424309"
  },
  {
    "text": "a state, takes as inputs an action and it outputs",
    "start": "1424310",
    "end": "1430220"
  },
  {
    "text": "the next state S prime drawn from the state transition probabilities.",
    "start": "1430220",
    "end": "1436580"
  },
  {
    "text": "Okay? Um, and the way that a model is built, um, is that, um, uh,",
    "start": "1436580",
    "end": "1444125"
  },
  {
    "text": "the states and the actions, uh, above, uh, uh, and, and let's see, and the way the model is built is the state is just a row value vector.",
    "start": "1444125",
    "end": "1452975"
  },
  {
    "text": "Okay? Oh, and, um, I think for simplicity, uh, for now let's assume that the action space is discrete.",
    "start": "1452975",
    "end": "1461945"
  },
  {
    "text": "Um, it turns out that for a lot of MDPs, the state space can be very high dimensional,",
    "start": "1461945",
    "end": "1468395"
  },
  {
    "text": "and the action space is much lower-dimensional than the state space. Uh, so for example for a car, you know,",
    "start": "1468395",
    "end": "1475925"
  },
  {
    "text": "S is, uh, uh, six-dimensional. But the space of actions is just two dimensional, right?",
    "start": "1475925",
    "end": "1482510"
  },
  {
    "text": "The steering and braking. Uh, It turns out for a helicopter you know the state space is 12-dimensional.",
    "start": "1482510",
    "end": "1490205"
  },
  {
    "text": "And I guess you probably mostly, I wouldn't expect you to know how a helicopter flies but it turns out there you have, uh,",
    "start": "1490205",
    "end": "1496089"
  },
  {
    "text": "four-dimensional actions in a helicopter. The way you fly a helicopter is you have two control sticks, so your left hand and your right hand you can move,",
    "start": "1496089",
    "end": "1503470"
  },
  {
    "text": "uh, uh, has two-dimensions of control. And for the inverted pendulum, I guess,",
    "start": "1503470",
    "end": "1509870"
  },
  {
    "text": "the state space is 4D and the action spaces is just 1D, right? You move left or right. So you actually see in a lot, um,",
    "start": "1509870",
    "end": "1516860"
  },
  {
    "text": "reinforcing learning problems that it's quite common for the state-space to be much higher dimensional than the action space.",
    "start": "1516860",
    "end": "1523400"
  },
  {
    "text": "And so, um, let's say for now that we do not want to discretize the state space because it's too high dimensional.",
    "start": "1523400",
    "end": "1531200"
  },
  {
    "text": "But just for the sake of simplicity let's say we discretize the action space for now, right? Which is, which is usually much easier to do.",
    "start": "1531200",
    "end": "1537730"
  },
  {
    "text": "But I think as we develop fitted value integration as well, uh, we'll- we'll you might- you'll get hints of",
    "start": "1537730",
    "end": "1544000"
  },
  {
    "text": "when maybe you don't need to discretize your action space either, but let's just say we have a discrete, discrete action space for now.",
    "start": "1544000",
    "end": "1550735"
  },
  {
    "text": "Okay?",
    "start": "1550735",
    "end": "1552320"
  },
  {
    "text": "So, all right",
    "start": "1564400",
    "end": "1569850"
  },
  {
    "text": "so how do you get a model, right? Um, one way to",
    "start": "1569850",
    "end": "1582890"
  },
  {
    "text": "build a model is to use a physics simulator.",
    "start": "1582890",
    "end": "1587280"
  },
  {
    "text": "So, um, you know in the case of an inverted pendulum, right?",
    "start": "1588520",
    "end": "1595355"
  },
  {
    "text": "It turns out that, uh, uh, well the action is what's the acceleration you apply to",
    "start": "1595355",
    "end": "1600710"
  },
  {
    "text": "either positive or negative or to the, to accelerate to the left or the right. Then it turns out that,",
    "start": "1600710",
    "end": "1605780"
  },
  {
    "text": "um, uh, let's see, so the state space is four-dimensional, right, and it turns out that, um,",
    "start": "1605780",
    "end": "1615620"
  },
  {
    "text": "if you sort of flip open a- a physics textbook Newtonian mechanics, uh,",
    "start": "1615620",
    "end": "1621275"
  },
  {
    "text": "if you know the weight of the car, the weight of the pole, um, uh, uh, yeah I think that's it actually.",
    "start": "1621275",
    "end": "1627500"
  },
  {
    "text": "If you know the mass of the car and the mass of the pole, uh, and the length of the pole, it turns out you can derive equations about what is the velocity, right?",
    "start": "1627500",
    "end": "1635870"
  },
  {
    "text": "So it turns out S dot is equal, you know, don't- don't worry about this. Think of the math as decoration rather than something you need to learn where,",
    "start": "1635870",
    "end": "1645365"
  },
  {
    "text": "you know, L is the length of the pole, M is the mass of one of these things actually don't worry about it. M is the pole mass, uh,",
    "start": "1645365",
    "end": "1651245"
  },
  {
    "text": "A is the force extended and so on. Um, uh and, and a conventional physics textbook will,",
    "start": "1651245",
    "end": "1658550"
  },
  {
    "text": "will, kind of let you derive these equations, uh, or, or rather than trying to derive this yourself using, uh, uh, you know,",
    "start": "1658550",
    "end": "1665900"
  },
  {
    "text": "either yourself using Newtonian mechanics or finding the help of a physicist friend, uh, there are also a lot of, um, uh,",
    "start": "1665900",
    "end": "1673130"
  },
  {
    "text": "open source, uh, physics simulators and software packages. Where you can download an open source simulator plug in the dimensions",
    "start": "1673130",
    "end": "1679280"
  },
  {
    "text": "and mass and so on of your system, and then they'll spit out of the simulator like this. It tells you how the state evolves from one time step to another time step.",
    "start": "1679280",
    "end": "1686210"
  },
  {
    "text": "All right, and so- but so in this example the simulator would say that, um, S prime is equal to S plus,",
    "start": "1686210",
    "end": "1694205"
  },
  {
    "text": "you know, Delta t times I guess,",
    "start": "1694205",
    "end": "1700429"
  },
  {
    "text": "uh, times S dot, where Delta t could be lets say 0.1 seconds, right?",
    "start": "1700430",
    "end": "1708755"
  },
  {
    "text": "So you want to simulate this at 10 hertz, uh, so that 10, 10 updates per second so that",
    "start": "1708755",
    "end": "1714785"
  },
  {
    "text": "the time difference between the current state and the next state is one-tenth of a second. Then you write a simulator like this.",
    "start": "1714785",
    "end": "1721580"
  },
  {
    "text": "Okay? Um, and, but- and, and really, the most common way to do this is not to actually derive the, um, uh,",
    "start": "1721580",
    "end": "1728915"
  },
  {
    "text": "physics update equations and the most common way to do this is to just download one or the open source physics engines, right?",
    "start": "1728915",
    "end": "1736110"
  },
  {
    "text": "So, um, this will work okay for, uh, problems like the inverted pendulum.",
    "start": "1736840",
    "end": "1743735"
  },
  {
    "start": "1738000",
    "end": "2030000"
  },
  {
    "text": "Um, I once used a sort of physics engines to build a simulator for a four-legged robot and manage to used",
    "start": "1743735",
    "end": "1750799"
  },
  {
    "text": "reinforcement learning to get a four-legged robot to walk around, right? So it, it, it works. Although um, um,",
    "start": "1750800",
    "end": "1762559"
  },
  {
    "text": "the second way to get a model is to learn it from data.",
    "start": "1762560",
    "end": "1767130"
  },
  {
    "text": "All right, and I, I personally end up using this much more often.",
    "start": "1770830",
    "end": "1776190"
  },
  {
    "text": "So, um, here's what I mean. There actually- let's say you want to build a,",
    "start": "1781220",
    "end": "1787575"
  },
  {
    "text": "uh, controller for an autonomous helicopter, right? So, so really, this is a case study. And what I'm describing is real,",
    "start": "1787575",
    "end": "1793310"
  },
  {
    "text": "like this will actually work, right? Uh, let's say you wanna build, uh, uh, let's say you haven't- let's say you have",
    "start": "1793310",
    "end": "1798410"
  },
  {
    "text": "a helicopter and you want to build an autonomous controller for it. What you can do is, um,",
    "start": "1798410",
    "end": "1803780"
  },
  {
    "text": "start your helicopter off in some state S0, right? So with, uh, GPS accelerometers, magnetic compass,",
    "start": "1803780",
    "end": "1811740"
  },
  {
    "text": "you can just measure the position and orientation of the helicopter and then have a human pilot,",
    "start": "1811740",
    "end": "1817110"
  },
  {
    "text": "fly the helicopter around. So the human pilot, [NOISE] you know, using control sticks, will move the helicopter.",
    "start": "1817110",
    "end": "1824010"
  },
  {
    "text": "They'll, they'll, they'll command the helicopter with some action A0, and then a 10th of a second later,",
    "start": "1824010",
    "end": "1829950"
  },
  {
    "text": "[NOISE] the helicopter will get to some slightly different position and orientation as one.",
    "start": "1829950",
    "end": "1835245"
  },
  {
    "text": "And then the human pilot, you know, will just keep on moving the control sticks, uh,",
    "start": "1835245",
    "end": "1841005"
  },
  {
    "text": "and rec- so you record down what actions they  are taken, A1. And based on that, the helicopter [NOISE] will get to some new state S2,",
    "start": "1841005",
    "end": "1848280"
  },
  {
    "text": "and then they will [NOISE] take some action A2, [NOISE] that get to some state S3,",
    "start": "1848280",
    "end": "1853670"
  },
  {
    "text": "[NOISE] and so on. And, and [NOISE] let me just write this as S_T, right? So in other words, what you do is, uh,",
    "start": "1853670",
    "end": "1860164"
  },
  {
    "text": "take the helicopter out to the field and hire a human pilot to fly this thing for a while and record the position of the helicopter 10 times a second,",
    "start": "1860165",
    "end": "1869805"
  },
  {
    "text": "and also record all the actions that human pilot was taking on the control stick.",
    "start": "1869805",
    "end": "1875775"
  },
  {
    "text": "Okay. Um, and then do this not just one time,",
    "start": "1875775",
    "end": "1881355"
  },
  {
    "text": "but do this m times. So let me use, uh, superscript 1. [NOISE] Or you get the idea.",
    "start": "1881355",
    "end": "1888299"
  },
  {
    "text": "All that, great. Uh, to denote the first, uh, trajectory.",
    "start": "1888300",
    "end": "1893850"
  },
  {
    "text": "So you do this a second time, [NOISE] right?",
    "start": "1893850",
    "end": "1900255"
  },
  {
    "text": "And so on and, and, uh, maybe do this m times, right? So ba- thi- this is just a lot of math that's saying fly the helicopter around,",
    "start": "1900255",
    "end": "1907965"
  },
  {
    "text": "you know, m times, right? And then record everything that happened.",
    "start": "1907965",
    "end": "1911770"
  },
  {
    "text": "And now, um, your goal is to apply, [NOISE] uh,",
    "start": "1918860",
    "end": "1927345"
  },
  {
    "text": "supervised learning, [NOISE] right?",
    "start": "1927345",
    "end": "1935210"
  },
  {
    "text": "To estimate S_t plus",
    "start": "1935210",
    "end": "1941755"
  },
  {
    "text": "1 as a function of S_t [NOISE] and A_t, right?",
    "start": "1941755",
    "end": "1948690"
  },
  {
    "text": "So the job of the model- the job of the simulator is to take as input the current state and the current action,",
    "start": "1948690",
    "end": "1954810"
  },
  {
    "text": "[NOISE] and tell you where the helicopter is gonna go, you know, the- like 0.1 seconds later.",
    "start": "1954810",
    "end": "1959835"
  },
  {
    "text": "And so, um, given all this data, what you can do is apply a supervised learning algorithm to predict",
    "start": "1959835",
    "end": "1968130"
  },
  {
    "text": "wha- what is the next state S prime as a function of the current state and action, right? And, and the other notation as [NOISE] in,",
    "start": "1968130",
    "end": "1975045"
  },
  {
    "text": "in when I drew that box for the simulator above, I was using S prime to denote S_t plus 1 and,",
    "start": "1975045",
    "end": "1980700"
  },
  {
    "text": "uh, S and a, right? So that's the mapping between the notations.",
    "start": "1980700",
    "end": "1985920"
  },
  {
    "text": "Um, and so [NOISE] if you use the linear regression version",
    "start": "1985920",
    "end": "1992580"
  },
  {
    "text": "[NOISE] of this idea,",
    "start": "1992580",
    "end": "1999630"
  },
  {
    "text": "um, you will say, [NOISE] let's approximate S_t plus 1 as a linear function of the previous state,",
    "start": "1999630",
    "end": "2008855"
  },
  {
    "text": "plus another linear function of the previous state. Um, and it turns out this actually works okay for helicopters flying at slow speeds.",
    "start": "2008855",
    "end": "2017480"
  },
  {
    "text": "This is actually not a terrible model, if, uh, if your helicopter is moving slowly, uh, and, and, and not flying upside down.",
    "start": "2017480",
    "end": "2023375"
  },
  {
    "text": "If, if your helicopter is flying in a relatively level way at kind of a slow speed, this model is not too bad.",
    "start": "2023375",
    "end": "2028669"
  },
  {
    "text": "[NOISE] Um, if you're flying a helicopter in a highly dynamic situations, flying very fast,",
    "start": "2028670",
    "end": "2033920"
  },
  {
    "text": "making a very fast aggressive turn, then this is not a great model but this is actually okay for slow speeds, right?",
    "start": "2033920",
    "end": "2039679"
  },
  {
    "text": "Um, and so I",
    "start": "2039680",
    "end": "2048800"
  },
  {
    "text": "guess A here will be, uh, n by n matrix because,",
    "start": "2048800",
    "end": "2054470"
  },
  {
    "text": "uh, the state space is n-dimensional, you know, uh, uh, so A is a square matrix and B,",
    "start": "2054470",
    "end": "2060669"
  },
  {
    "text": "um, will usually be a tall skinny matrix I guess, whereas the dimension of B is the dimension of the state space by the dimension of the action space.",
    "start": "2060670",
    "end": "2069355"
  },
  {
    "text": "Okay? [NOISE] And so, um, in order to fit the parameters a and b,",
    "start": "2069355",
    "end": "2075049"
  },
  {
    "text": "[NOISE] you would minimize with respect to the parameters A and B of this, [NOISE] uh,",
    "start": "2075050",
    "end": "2099360"
  },
  {
    "text": "okay. [NOISE] So you",
    "start": "2101230",
    "end": "2108290"
  },
  {
    "text": "wanna approximate S_t plus 1 as a function of that, and so, you know,",
    "start": "2108290",
    "end": "2115835"
  },
  {
    "text": "pretty natural to fit the parameters of this linear model in a way",
    "start": "2115835",
    "end": "2120920"
  },
  {
    "text": "that minimizes the squared difference between the left-hand side the right-hand side. Wait, did I screw up?",
    "start": "2120920",
    "end": "2126200"
  },
  {
    "text": "Yes. Go ahead. [inaudible]. Uh, say that again.",
    "start": "2126200",
    "end": "2131360"
  },
  {
    "text": "[inaudible].",
    "start": "2131360",
    "end": "2137120"
  },
  {
    "text": "Oh, sure. Uh, what's the difference between flying a helicopter m times versus flying a helicopter, once, very, very long.",
    "start": "2137120",
    "end": "2142790"
  },
  {
    "text": "Uh, uh in this example, it, it makes no difference. Yeah. This, this is fine either way. Uh, uh, u- u- unless, um, uh- yeah for practical purposes, it doesn't matter.",
    "start": "2142790",
    "end": "2152330"
  },
  {
    "text": "Uh, sorry. Uh, for, for, um, for the purposes of this class, it doesn't matter. For practical purposes, if you fly the helicopter m times,",
    "start": "2152330",
    "end": "2159695"
  },
  {
    "text": "it turns out the fuel burns down slowly. And so the way the helicopter changes slowly and you wanna",
    "start": "2159695",
    "end": "2164720"
  },
  {
    "text": "average over how much fuel do you have or wind conditions, this is what actually is done. But for the purposes of understanding this algorithm,",
    "start": "2164720",
    "end": "2172250"
  },
  {
    "text": "flying a single time for a long time, you know, works just fine as well.",
    "start": "2172250",
    "end": "2176130"
  },
  {
    "text": "Okay? Um, so this is the linear regression version of this, and, uh, uh,",
    "start": "2179500",
    "end": "2186469"
  },
  {
    "text": "and we, we actually talk about, uh, uh, some other models later, uh, called LQR and LQG.",
    "start": "2186469",
    "end": "2192560"
  },
  {
    "text": "Uh, you, you see this linear regression version of a model as well. Just read, just a linear mo- model, the dynamics, right?",
    "start": "2192560",
    "end": "2199369"
  },
  {
    "text": "Uh, um, uh, we- we'll, we'll come back to linear models dynamics later, uh, next week.",
    "start": "2199370",
    "end": "2204845"
  },
  {
    "text": "But it turns out that, um, if you want to use a nonlinear model, uh, you know, plugging in non-linear.",
    "start": "2204845",
    "end": "2211505"
  },
  {
    "text": "If, if you, you can also plug in, right, Phi of S, you know, and maybe phi prime of a as well,",
    "start": "2211505",
    "end": "2217970"
  },
  {
    "text": "if you want to have a lan- non-linear model. Um, and, and this will work even better depending on your choice of features.",
    "start": "2217970",
    "end": "2225440"
  },
  {
    "text": "Okay? Now, um, [NOISE] finally,",
    "start": "2225440",
    "end": "2232835"
  },
  {
    "text": "having run this little linear regression thing, where you- and it- it's not quite linear regression because A and B are matrices,",
    "start": "2232835",
    "end": "2239510"
  },
  {
    "text": "but, uh, but you can minimize this objective. And it turns out to- this turns out to be equivalent",
    "start": "2239510",
    "end": "2244700"
  },
  {
    "text": "to running linear regression n times. Um, so S has 12 dimensions.",
    "start": "2244700",
    "end": "2250595"
  },
  {
    "text": "This turns out to be equivalent to running linear regression n times to predict the first state,",
    "start": "2250595",
    "end": "2255800"
  },
  {
    "text": "second state, third state variable, and so on, right? That- that's- this is what- what this is equivalent to.",
    "start": "2255800",
    "end": "2261440"
  },
  {
    "text": "But having done this, you now have a choice of two possible models. One model would be to just [NOISE] say my model will set S_t plus 1",
    "start": "2261440",
    "end": "2270740"
  },
  {
    "text": "as A_St [NOISE] plus B_At, uh, another version. [NOISE]",
    "start": "2270740",
    "end": "2285970"
  },
  {
    "text": "Would be to set St plus 1 equals A_st plus B_at plus Epsilon t,",
    "start": "2285970",
    "end": "2290994"
  },
  {
    "text": "where Epsilon t is distributed. [NOISE] Uh, maybe from, uh, from a",
    "start": "2290995",
    "end": "2300160"
  },
  {
    "text": "Gaussian- from a Gaussian density.",
    "start": "2300160",
    "end": "2305500"
  },
  {
    "text": "Okay? Um, and so this first model would be a deterministic model,",
    "start": "2305500",
    "end": "2311215"
  },
  {
    "text": "and this model would be a stochastic model, right?",
    "start": "2311215",
    "end": "2316975"
  },
  {
    "text": "And, um, if you use a stochastic model, then that's saying",
    "start": "2316975",
    "end": "2323875"
  },
  {
    "text": "that- [NOISE] right.",
    "start": "2323875",
    "end": "2332545"
  },
  {
    "text": "When you're running your simulator, when you're running the model, um, every time you generate St plus one,",
    "start": "2332545",
    "end": "2338770"
  },
  {
    "text": "you would be sampling this Epsilon from a Gaussian vector, and adding it to the prediction of your linear model, and,",
    "start": "2338770",
    "end": "2345775"
  },
  {
    "text": "and if you use a stochastic model, what that means is that, you know, if you simulate your helicopter flying around,",
    "start": "2345775",
    "end": "2351325"
  },
  {
    "text": "your simulator will generate random noise that adds and subtracts a little bit to the state space of",
    "start": "2351325",
    "end": "2356640"
  },
  {
    "text": "helicopter as if there were little wind gusts blowing it, blowing the helicopter around, okay?",
    "start": "2356640",
    "end": "2361829"
  },
  {
    "text": "Um, and this is, uh, uh, uh, yeah, right.",
    "start": "2361830",
    "end": "2368164"
  },
  {
    "text": "So, um, right. So it turn- and,",
    "start": "2368165",
    "end": "2374680"
  },
  {
    "text": "uh, in, um, in most cases, when you're building reinforcement learning models- oh,",
    "start": "2374680",
    "end": "2380980"
  },
  {
    "text": "and so the, the approach we're taking here, this is called model-based reinforcement learning where you're going to build a model of your robot,",
    "start": "2380980",
    "end": "2388599"
  },
  {
    "text": "and then let's train the reinforcement learning algorithm in the simulator, and then take the policy you learn,",
    "start": "2388600",
    "end": "2394960"
  },
  {
    "text": "take the policy of how you learned in simulation and apply it back on your real robot, right? So this, this, this approach we're taking is called model-based RL.",
    "start": "2394960",
    "end": "2403690"
  },
  {
    "text": "[NOISE] Um, there is an alternative called model-free RL,",
    "start": "2403690",
    "end": "2412480"
  },
  {
    "text": "which is you just run your reinforcement learning algorithm on the robot directly, and let the robot bash the robot around and so on, and let it learn.",
    "start": "2412480",
    "end": "2419575"
  },
  {
    "text": "I think that in terms of robotics applications, uh, um, I think model-based RL has been taking off faster.",
    "start": "2419575",
    "end": "2428320"
  },
  {
    "text": "A lot of the most promising approaches are model-based RL because if you have a physical robot, you know,",
    "start": "2428320",
    "end": "2433960"
  },
  {
    "text": "you just can't afford to have a reinforcement learning algorithm bash your robot around for too long, or how many helicopters do you want to crash before your learning algorithm figures it out?",
    "start": "2433960",
    "end": "2441430"
  },
  {
    "text": "Um, model-free RL works fine if you want to play video games because if you're trying to get a computer or,",
    "start": "2441430",
    "end": "2449050"
  },
  {
    "text": "or, or, or play chess, or Othello or Go, right? Because, um, you have a perfect simulator for the video game which is a video game itself,",
    "start": "2449050",
    "end": "2455380"
  },
  {
    "text": "and so your, your, your RL algorithm can, I don't know, blow up hundreds of millions of times in a video game,",
    "start": "2455380",
    "end": "2461680"
  },
  {
    "text": "and, and that's fine, uh, for so- for, for playing video games or for playing, um, like, uh, you know, traditional games,",
    "start": "2461680",
    "end": "2468235"
  },
  {
    "text": "model-free approaches can work fine, but I- most of the, um, a lot of the, uh, uh, uh,",
    "start": "2468235",
    "end": "2475180"
  },
  {
    "text": "success applications of reinforcement learning robots have been model-based. Although again, the field is evolving quickly so there's",
    "start": "2475180",
    "end": "2482950"
  },
  {
    "text": "this very interesting work at the intersection of model-based and model-free, that that, that, gets more complicated, right?",
    "start": "2482950",
    "end": "2488140"
  },
  {
    "text": "But I- I- I want to say, if you want to use something tried and true, you know, for robotics problems seriously because they're using model-based RL,",
    "start": "2488140",
    "end": "2495190"
  },
  {
    "text": "because you can then fly a helicopter in simulation, let it crash a million times, right? And no one's hurt, there's no physical damage anywhere in the world.",
    "start": "2495190",
    "end": "2501985"
  },
  {
    "text": "It was just, uh, uh, Okay. And, uh, um, and- oh,",
    "start": "2501985",
    "end": "2507610"
  },
  {
    "start": "2504000",
    "end": "2690000"
  },
  {
    "text": "and just one last tip. One thing we learned, um, uh, building these, uh, reinforcement learning algorithms for a lot of robots is that,",
    "start": "2507610",
    "end": "2515305"
  },
  {
    "text": "um, you know, having run this model, you might ask, well, how do I choose the distribution for this noise, right?",
    "start": "2515305",
    "end": "2523510"
  },
  {
    "text": "Uh, there- how, how, how do you model the distribution for the noise? Um, one thing you could do is estimate it from data.",
    "start": "2523510",
    "end": "2529885"
  },
  {
    "text": "But as a practical matter, what happens is so long as you remember to inject- so let's see.",
    "start": "2529885",
    "end": "2536980"
  },
  {
    "text": "It turns out if you use a deterministic simulator, uh, a lot of reinforcement learning algorithms will learn a very brittle model, uh,",
    "start": "2536980",
    "end": "2543910"
  },
  {
    "text": "that works in your simulator but doesn't actually work when you put it into your real robot, right?",
    "start": "2543910",
    "end": "2548980"
  },
  {
    "text": "And so if you- if you actually look on YouTube or Twitter, um, in the last year or two,",
    "start": "2548980",
    "end": "2554140"
  },
  {
    "text": "there have been a lot of cool-looking videos. There are people using reinforcement learning to control various weirdly-configured robots, like a",
    "start": "2554140",
    "end": "2561415"
  },
  {
    "text": "snake robot or some five-legged thing or some- whatever. it's just a cool random, I- I- this is- I- I- I'm not good at drawing this but, you know,",
    "start": "2561415",
    "end": "2568974"
  },
  {
    "text": "if you build a five-legged robot, I don't even know what has five legs, right? How do you control that? It turns out that if you have a deterministic simulator,",
    "start": "2568975",
    "end": "2577540"
  },
  {
    "text": "um, using these methods, it's not that hard to generate a cool-looking video of your reinforcement learning algorithm,",
    "start": "2577540",
    "end": "2583839"
  },
  {
    "text": "supposedly controlling a five-legged thing or some crazy, you know, a worm with, uh,",
    "start": "2583840",
    "end": "2589560"
  },
  {
    "text": "two legs or something, these crazy robots that you can build in a simulator. But it turns out that, um,",
    "start": "2589560",
    "end": "2595220"
  },
  {
    "text": "uh, even those easy, it's, uh, well, not easy. Even though you can generate those types of videos in the deterministic simulator,",
    "start": "2595220",
    "end": "2602290"
  },
  {
    "text": "um, if you use a deterministic model of a robot, uh, and you ever actually tried to build a physical robot,",
    "start": "2602290",
    "end": "2608770"
  },
  {
    "text": "and you take that policy from your physics simulator to the real robot, uh, the, the odds of it working on the real robot are quite low,",
    "start": "2608770",
    "end": "2616300"
  },
  {
    "text": "if you use a deterministic simulator, right? Because the problem with simulators is",
    "start": "2616300",
    "end": "2621579"
  },
  {
    "text": "that your simulator is never 100% accurate, right? You know, it's always just a little bit off.",
    "start": "2621580",
    "end": "2626694"
  },
  {
    "text": "And one of the lessons we learned, uh, that we've- I hope you learned, uh, [NOISE] uh, applying RL to a lot of robots is that if you want",
    "start": "2626695",
    "end": "2634825"
  },
  {
    "text": "your model-based RL work to work not just in simulation and generate a cool video,",
    "start": "2634825",
    "end": "2640210"
  },
  {
    "text": "but you want it to actually work on a physical robot, like a physical helicopter that you own, that is really important to add some noise to your simulator.",
    "start": "2640210",
    "end": "2648505"
  },
  {
    "text": "Because if the policy you learn is, um, robust to a slightly stochastic simulator,",
    "start": "2648505",
    "end": "2656485"
  },
  {
    "text": "then the odds of it generalizing, um, uh, you know, to the, to the real world, to the physical real world is much higher",
    "start": "2656485",
    "end": "2663400"
  },
  {
    "text": "than if you had a completely deterministic simulator. So I think whenever I'm building a robot, right?",
    "start": "2663400",
    "end": "2668454"
  },
  {
    "text": "I- I- I pretty much- actually, you know, I don't think I- oh, with one exception- okay, I [inaudible] will talk about that next week,",
    "start": "2668455",
    "end": "2674530"
  },
  {
    "text": "but with one, with one very narrow exception, I pretty much never use deterministic simulators, uh, when,",
    "start": "2674530",
    "end": "2680770"
  },
  {
    "text": "when working on robotic control problems, unless- uh, uh, assuming, assuming I want it to work in the real world as well, right?",
    "start": "2680770",
    "end": "2687400"
  },
  {
    "text": "Um, and, uh, and again, you know, tips and tricks. Uh, so, uh, the most important thing is to add some noise,",
    "start": "2687400",
    "end": "2695650"
  },
  {
    "start": "2690000",
    "end": "2986000"
  },
  {
    "text": "and then, uh, sometimes the exact distribution of noise. Yeah, go ahead and try to pick something realistic,",
    "start": "2695650",
    "end": "2701575"
  },
  {
    "text": "but the exact distribution of noise actually matters less, I want to say than just the fact of remembering to add some noise.",
    "start": "2701575",
    "end": "2708204"
  },
  {
    "text": "Okay. [NOISE]",
    "start": "2708205",
    "end": "2721240"
  },
  {
    "text": "By the way, I- you guys really don't know this, but my PhD thesis, uh, was, um, using reinforcement learning to fly helicopters.",
    "start": "2721240",
    "end": "2728740"
  },
  {
    "text": "So, so I'm trying to, I don't know, so, so you're telling me someone has crashed a bunch of helicopters [LAUGHTER] model helicopters,",
    "start": "2728740",
    "end": "2736360"
  },
  {
    "text": "and has lived through the pain and the joys of seeing this stuff work or not work. [LAUGHTER]",
    "start": "2736360",
    "end": "2744700"
  },
  {
    "text": "[NOISE]",
    "start": "2744700",
    "end": "2755075"
  },
  {
    "text": "All right. So now that you have built a model,",
    "start": "2755075",
    "end": "2760204"
  },
  {
    "text": "built a simulator, uh, for your helicopter, for your four-legged robot or for your car, um,",
    "start": "2760205",
    "end": "2766204"
  },
  {
    "text": "how do you, um, how do you approximate the value function, right?",
    "start": "2766205",
    "end": "2773780"
  },
  {
    "text": "So, um, in order to apply, um,",
    "start": "2773780",
    "end": "2783410"
  },
  {
    "text": "fitted value iteration, the first step is to choose features",
    "start": "2783410",
    "end": "2788599"
  },
  {
    "text": "of the state s. Right.",
    "start": "2788600",
    "end": "2797930"
  },
  {
    "text": "And then, um, we approximate v of s. You know,",
    "start": "2797930",
    "end": "2803285"
  },
  {
    "text": "we approximate v-star using a function v of s, which is going to be Theta transpose Phi of s. Um,",
    "start": "2803285",
    "end": "2810950"
  },
  {
    "text": "and so, I don't know. And so, uh, you know,",
    "start": "2810950",
    "end": "2818330"
  },
  {
    "text": "in the case of, uh, uh, in, in, the case of the, um, uh, inverted pendulum, right?",
    "start": "2818330",
    "end": "2825965"
  },
  {
    "text": "Then Phi of s, maybe you have x, x-dot, maybe you've x squared or x times x-dot or x,",
    "start": "2825965",
    "end": "2833365"
  },
  {
    "text": "uh, times the polar orientation, and so on. So take, take your state to s,",
    "start": "2833365",
    "end": "2838950"
  },
  {
    "text": "and think up some nonlinear features that, that you think might be useful for representing the value.",
    "start": "2838950",
    "end": "2845404"
  },
  {
    "text": "Um, and remember that what the value is, the value of a state is your expected payoff from that state,",
    "start": "2845405",
    "end": "2851525"
  },
  {
    "text": "expected sum of discounted rewards. So the value function captures, if your robot starts off in that state,",
    "start": "2851525",
    "end": "2858005"
  },
  {
    "text": "you know, how well is it gonna do if it starts here? So when you're designing features pick a bunch of features that you think hope convey,",
    "start": "2858005",
    "end": "2865969"
  },
  {
    "text": "um, how well is your robot doing. That makes sense? And so, uh, maybe for the inverted pendulum, for example,",
    "start": "2865969",
    "end": "2872494"
  },
  {
    "text": "if the pole is way over to the right, then maybe the pole will fall over given a reward of minus 1 when the pole falls over.",
    "start": "2872495",
    "end": "2880565"
  },
  {
    "text": "Right? Uh, but so, sorry. I'm overloading the notation a bit. Theta is both the angle of the pole as well as the parameters.",
    "start": "2880565",
    "end": "2887570"
  },
  {
    "text": "But, but, but if the pole is falling way over that looks extreme pretty badly, unless, um, x-dot is very large and positive, right?",
    "start": "2887570",
    "end": "2896885"
  },
  {
    "text": "And so maybe there's interaction between Phi and x-dot. So you might say, \"Well, let me have a new feature,",
    "start": "2896885",
    "end": "2902165"
  },
  {
    "text": "which is the angle of the pole multiplied by the velocity.\" Right? Because then-, uh,",
    "start": "2902165",
    "end": "2908040"
  },
  {
    "text": "because it seems like these two variables kind of depend on each other. Um, so, so, so just as when you are trying to predict the price of a house,",
    "start": "2908040",
    "end": "2916240"
  },
  {
    "text": "you would say, \"Well, what are the most useful features predicting the price of a house?\" Uh, um, you would do something similar,",
    "start": "2916240",
    "end": "2922505"
  },
  {
    "text": "um, for fitted evaluation. And one nice thing about-, um, uh,",
    "start": "2922505",
    "end": "2930035"
  },
  {
    "text": "one nice thing about model-based RL is that once- model-based reinforcement learning,",
    "start": "2930035",
    "end": "2936260"
  },
  {
    "text": "is that once you have built a model, you see a little bit that you can collect an essentially infinite amount of data from your model.",
    "start": "2936260",
    "end": "2944494"
  },
  {
    "text": "Right? And so with a lot of data, you can usually afford to choose a larger number of features,",
    "start": "2944495",
    "end": "2950480"
  },
  {
    "text": "because you can generate a ton of data with which to fit this linear function. And so, you know, you- you're,",
    "start": "2950480",
    "end": "2957080"
  },
  {
    "text": "you're usually not super constrained in terms of, uh, needing to be really careful not to choose too many features because of fear of overfitting.",
    "start": "2957080",
    "end": "2964609"
  },
  {
    "text": "You could get so much data from your simulator that, you know, you can usually make up quite a lot of features,",
    "start": "2964610",
    "end": "2971044"
  },
  {
    "text": "uh, and then some of the features end up not being useful, it's okay. Because you can get enough data for running",
    "start": "2971044",
    "end": "2976280"
  },
  {
    "text": "your simulator for the algorithm to still fit a pretty good set of parameters Theta, even if you have a lot of features.",
    "start": "2976280",
    "end": "2982640"
  },
  {
    "text": "Because you can have a lot- you can generate a lot of data to fit this function. Okay. So, um, let's talk through the fitted value iteration algorithm.",
    "start": "2982640",
    "end": "2994860"
  },
  {
    "start": "2986000",
    "end": "3599000"
  },
  {
    "text": "Let's see. All right. You know what? This is a long algorithm. Let me just use a fresh board for this.",
    "start": "2996310",
    "end": "3001839"
  },
  {
    "text": "[NOISE].",
    "start": "3001840",
    "end": "3014050"
  },
  {
    "text": "All right. So, uh, let me just write down the original value iteration algorithm for these v states.",
    "start": "3014050",
    "end": "3021090"
  },
  {
    "text": "Uh, so what we had previously was we would update V of s according to R of s,",
    "start": "3021090",
    "end": "3027465"
  },
  {
    "text": "plus Gamma, max over a, right?",
    "start": "3027465",
    "end": "3037165"
  },
  {
    "text": "So this is what we had, um, last Monday. And, uh, I said at the start of today's lecture that you can also write this as this.",
    "start": "3037165",
    "end": "3047920"
  },
  {
    "text": "[NOISE].",
    "start": "3047920",
    "end": "3058000"
  },
  {
    "text": "Okay. So let's take that and generalize it to a fitted value iteration.",
    "start": "3058000",
    "end": "3063780"
  },
  {
    "text": "[NOISE].",
    "start": "3063780",
    "end": "3091740"
  },
  {
    "text": "All right. Um, so first,",
    "start": "3091740",
    "end": "3098860"
  },
  {
    "text": "let's choose a set of states",
    "start": "3098860",
    "end": "3101750"
  },
  {
    "text": "randomly, and let's initialize the parameters to equal 0, okay?",
    "start": "3109860",
    "end": "3120595"
  },
  {
    "text": "Um, and what we're going to do is where-,uh, so, so let's see.",
    "start": "3120595",
    "end": "3126325"
  },
  {
    "text": "In linear regression, you learn a mapping from x-y,",
    "start": "3126325",
    "end": "3132280"
  },
  {
    "text": "and you have a discrete set of examples for x, and you fit a function mapping from x and y.",
    "start": "3132280",
    "end": "3137710"
  },
  {
    "text": "So and what we're going to do here, we're going to learn the mapping from s to v of",
    "start": "3137710",
    "end": "3143440"
  },
  {
    "text": "s. And we are going to take a discrete set of examples for s,",
    "start": "3143440",
    "end": "3149140"
  },
  {
    "text": "and try to figure out what is v of s for them, and then for the straight line, you know, to try to model this relationship, right.",
    "start": "3149140",
    "end": "3155725"
  },
  {
    "text": "So, so just as you have a finite set of examples, a finite set of houses that you see a certain set of",
    "start": "3155725",
    "end": "3161530"
  },
  {
    "text": "values of x in your training set for predicting housing prices. We're gonna see, you know, a certain set of states,",
    "start": "3161530",
    "end": "3167305"
  },
  {
    "text": "and then use that finite set of examples to use linear regression to fit v of s. Right?",
    "start": "3167305",
    "end": "3172675"
  },
  {
    "text": "So that's what this initial sample is meant to do. And so, um, this is the outermost loop of value iteration- of fitted value iteration.",
    "start": "3172675",
    "end": "3187030"
  },
  {
    "text": "And then for i equals 1 [NOISE] through m.",
    "start": "3187030",
    "end": "3195150"
  },
  {
    "text": "[NOISE]",
    "start": "3195150",
    "end": "3224650"
  },
  {
    "text": "Let's see, [NOISE] uh.",
    "start": "3224650",
    "end": "3227480"
  },
  {
    "text": "All right. So, um, what we're going to do is, um,",
    "start": "3251790",
    "end": "3261650"
  },
  {
    "text": "go over each of these m states, uh, go over each of these m states, right,",
    "start": "3261960",
    "end": "3267890"
  },
  {
    "text": "and for each one of them, um, we're going to- and for each one of those states of each one of those actions,",
    "start": "3268230",
    "end": "3275799"
  },
  {
    "text": "we're going to take a sample of k things in order to estimate that expected value.",
    "start": "3275800",
    "end": "3282025"
  },
  {
    "text": "Right. And so this expectation is over S prime drawn from this state transition distribution.",
    "start": "3282025",
    "end": "3288940"
  },
  {
    "text": "They say, you know, from this state, if you take this action where you get to the next. And so, uh, these two loops this for i",
    "start": "3288940",
    "end": "3297640"
  },
  {
    "text": "equals 1 through m. And for each action a this is just looping over every state and every action,",
    "start": "3297640",
    "end": "3303055"
  },
  {
    "text": "and taking k samples. Sampling k samples of where you get to if you take an action a in a certain status.",
    "start": "3303055",
    "end": "3311185"
  },
  {
    "text": "Right. And so [NOISE] um, uh, and by taking that k examples and computing this average q a,",
    "start": "3311185",
    "end": "3323630"
  },
  {
    "text": "right, is your estimate of that expectation. Okay. So, so all we've done so far is,",
    "start": "3324930",
    "end": "3330670"
  },
  {
    "text": "uh, take k samples, you know, from this distribution of with S prime is drawn and average V of s. Oh,",
    "start": "3330670",
    "end": "3340570"
  },
  {
    "text": "actually, uh, oh, I'm sorry. And, uh, if I move R of s inside,",
    "start": "3340570",
    "end": "3347200"
  },
  {
    "text": "sorry, then that's q of a. Yeah. Okay, that makes sense? [NOISE] Sorry.",
    "start": "3347200",
    "end": "3355060"
  },
  {
    "text": "Let me just rewrite this to move R of s inside [NOISE].",
    "start": "3355060",
    "end": "3363880"
  },
  {
    "text": "Fix this up a little bit. So this is written as Gamma.",
    "start": "3363880",
    "end": "3369019"
  },
  {
    "text": "If you write this as max over a, of R of s plus Gamma, uh, [NOISE]",
    "start": "3370800",
    "end": "3392800"
  },
  {
    "text": "Yeah. Okay. Yes, sorry. So we move the max and expectation out, then this is, this is q of a.",
    "start": "3392800",
    "end": "3400420"
  },
  {
    "text": "Okay?",
    "start": "3400420",
    "end": "3402290"
  },
  {
    "text": "Um, next,",
    "start": "3406560",
    "end": "3415840"
  },
  {
    "text": "let's set y i equals max over",
    "start": "3415840",
    "end": "3422500"
  },
  {
    "text": "a of q of a [NOISE].",
    "start": "3422500",
    "end": "3429610"
  },
  {
    "text": "And so by taking the max over a of q of a,",
    "start": "3429610",
    "end": "3437110"
  },
  {
    "text": "um, that's what y i is. Is your estimate at the right-hand side of value iteration.",
    "start": "3437110",
    "end": "3447295"
  },
  {
    "text": "Okay. [NOISE] And so",
    "start": "3447295",
    "end": "3456640"
  },
  {
    "text": "y i is your estimate for, um, for this quantity,",
    "start": "3456640",
    "end": "3461799"
  },
  {
    "text": "for the right hand side of value iteration. Now, in the original value iteration algorithm,",
    "start": "3461799",
    "end": "3479755"
  },
  {
    "text": "um, I'm, I'm just using VI to approximate that to abbreviate value iteration.",
    "start": "3479755",
    "end": "3484960"
  },
  {
    "text": "In the original algorithm, what we did was we set V of S i to be equal to y i, right?",
    "start": "3484960",
    "end": "3494950"
  },
  {
    "text": "In the original value iteration algorithm, we would compute the right hand side, this purple thing,",
    "start": "3494950",
    "end": "3500635"
  },
  {
    "text": "and then set V of s equals to that, right, just set right-hand side equal to- I set the left hand side equal to the right-hand side.",
    "start": "3500635",
    "end": "3506320"
  },
  {
    "text": "But in, um, fitted value iteration, you know, V of s is now approximated by a linear function.",
    "start": "3506320",
    "end": "3516670"
  },
  {
    "text": "So you can't just go into a linear function, and set the value of the points individually.",
    "start": "3516670",
    "end": "3521710"
  },
  {
    "text": "So what we're going to do instead is in fitted Vi,",
    "start": "3521710",
    "end": "3527930"
  },
  {
    "text": "we're going to use linear regression to make V of Si as close as possible to yi.",
    "start": "3530000",
    "end": "3540750"
  },
  {
    "text": "But V of Si is now represented as a linear function of the state.",
    "start": "3540750",
    "end": "3550540"
  },
  {
    "text": "So a linear function of the features of state. So V of Si is Theta transpose Phi of Si,",
    "start": "3550540",
    "end": "3555670"
  },
  {
    "text": "and you want that to be close to yi. And so the final step is run",
    "start": "3555670",
    "end": "3562210"
  },
  {
    "text": "linear regression to choose the parameters Theta that minimizes the squared error, okay? [NOISE]",
    "start": "3562210",
    "end": "3591220"
  },
  {
    "text": "Does that make sense? Okay, um, oh, yes. Let me just make my curly braces match.",
    "start": "3591220",
    "end": "3626000"
  },
  {
    "text": "Yeah. Okay, okay.",
    "start": "3626520",
    "end": "3633500"
  },
  {
    "text": "So that's fitted. Uh, go ahead, question? [inaudible].",
    "start": "3634620",
    "end": "3648400"
  },
  {
    "text": "Oh, this one? Oh, this one? Oh, no, the, the m is used differently.",
    "start": "3648400",
    "end": "3654775"
  },
  {
    "text": "Uh, so when we were learning a model m was just how many times you fly the helicopter in order to build a model.",
    "start": "3654775",
    "end": "3661630"
  },
  {
    "text": "And the number of times you fly the helicopter in order to build a physics model, to build a model, the helicopter dynamics has,",
    "start": "3661630",
    "end": "3669069"
  },
  {
    "text": "has nothing to do with this m, which is the number of states you use in order to,",
    "start": "3669070",
    "end": "3674650"
  },
  {
    "text": "sort of, anchor, or in order to, uh, uh, so I think I'm actually- so the,",
    "start": "3674650",
    "end": "3680305"
  },
  {
    "text": "the, the way to think about this is, is you want to learn a mapping from states to B of S.",
    "start": "3680305",
    "end": "3687700"
  },
  {
    "text": "And so, uh, this sample, this m states is- we're gonna choose m states on the x axis, right?",
    "start": "3687700",
    "end": "3698244"
  },
  {
    "text": "So, uh, and that m is the number of points you choose on the x axis. And then in each, uh, iteration,",
    "start": "3698245",
    "end": "3705700"
  },
  {
    "text": "the value iteration we're gonna go through this procedure. So you have sub S1 up to Sm.",
    "start": "3705700",
    "end": "3711760"
  },
  {
    "text": "Right. And then for each of these, you're going to compute some value yi using this procedure.",
    "start": "3711760",
    "end": "3721990"
  },
  {
    "text": "And then you fit a straight line to the sample of yi's. [inaudible].",
    "start": "3721990",
    "end": "3737000"
  },
  {
    "text": "Uh, think of this- think of the way you build a model and the way you",
    "start": "3737000",
    "end": "3742940"
  },
  {
    "text": "apply fitted value evaluation as two completely separate operations. So, um, you can have one team of ten engineers flying a helicopter",
    "start": "3742940",
    "end": "3751610"
  },
  {
    "text": "around 1,000 times, build a model, run the linear regression and then they have a model and",
    "start": "3751610",
    "end": "3758599"
  },
  {
    "text": "then they could publish the model on the Internet and a totally different team could download their model and",
    "start": "3758600",
    "end": "3764599"
  },
  {
    "text": "do this and the second team does not need to talk to the first team at all, other than downloading the model off the Internet.",
    "start": "3764600",
    "end": "3770120"
  },
  {
    "text": "There is a question. [inaudible]",
    "start": "3770120",
    "end": "3777640"
  },
  {
    "text": "Oh, yes. Good question. You mean they're sampling, they're sampling  k times, right? Yeah. That's a great question, yes.",
    "start": "3777640",
    "end": "3785065"
  },
  {
    "text": "That was a- yes. That was one my next points which is the reason you sample from this distribution",
    "start": "3785065",
    "end": "3791825"
  },
  {
    "text": "is because you're using- so you should do this if you are using a stochastic simulator, right?",
    "start": "3791825",
    "end": "3798365"
  },
  {
    "text": "And then actually it does. Actually, I just wanted to ask you guys what should you do? How can you simplify this algorithm if you use",
    "start": "3798365",
    "end": "3804680"
  },
  {
    "text": "a deterministic simulator instead of a stochastic simulator?",
    "start": "3804680",
    "end": "3808380"
  },
  {
    "text": "Oh, well, let's see. So if you use a determinic- deterministic simulator then, you know,",
    "start": "3813520",
    "end": "3820760"
  },
  {
    "text": "given a certain state at a certain action it will always map to the exact same S-prime right?",
    "start": "3820760",
    "end": "3828545"
  },
  {
    "text": "So how can you simplify the algorithm? [inaudible] action instead of drawing k times,",
    "start": "3828545",
    "end": "3835550"
  },
  {
    "text": "you only need to draw once. Yeah, yeah, cool. Great. Yes. So if you're a deterministic simulator,",
    "start": "3835550",
    "end": "3841865"
  },
  {
    "text": "you can set k equals 1 and set the sample only once because this distribution,",
    "start": "3841865",
    "end": "3847925"
  },
  {
    "text": "it always returns the same value. So all of these k samples would be exactly the same so you might as well just do this once rather than K times.",
    "start": "3847925",
    "end": "3856430"
  },
  {
    "text": "Make sense? Okay cool. Yeah. [inaudible]",
    "start": "3856430",
    "end": "3869689"
  },
  {
    "text": "Oh, this one? [inaudible] Oh, no. This is, um, this is actually a square bracket.",
    "start": "3869689",
    "end": "3876995"
  },
  {
    "text": "Um, the thing is, um, we're trying to approximate this expectation and the way you",
    "start": "3876995",
    "end": "3883460"
  },
  {
    "text": "approximate the mean is you'd sample k times if you take the average, right? Right. So- so what we've done here is in order to approximate this expectation,",
    "start": "3883460",
    "end": "3892970"
  },
  {
    "text": "we're gonna draw k samples and then sum over them and divide by k. So you average over the k samples.",
    "start": "3892970",
    "end": "3900170"
  },
  {
    "text": "All right, cool. Got some more question? What's the little [inaudible] how many states",
    "start": "3900170",
    "end": "3917750"
  },
  {
    "text": "you'll get from K sample and [inaudible] Let's see. So how do you choose M and how do you test for overfitting and so,",
    "start": "3917750",
    "end": "3926915"
  },
  {
    "text": "you know, one- once you have a model, one of the nice things about model-based RL is let's say that Phi of S,",
    "start": "3926915",
    "end": "3933560"
  },
  {
    "text": "right, let's say that Phi of S has 50 features.",
    "start": "3933560",
    "end": "3937800"
  },
  {
    "text": "So let's say you chose 50 features to approximate the value function of your inverted pendulum system.",
    "start": "3938920",
    "end": "3945845"
  },
  {
    "text": "Then we know that- you know that you're going to be fitting linear regression, right, to this 50-dimensional state-space.",
    "start": "3945845",
    "end": "3952940"
  },
  {
    "text": "I mean this step here, this is really linear regression, right?",
    "start": "3952940",
    "end": "3958460"
  },
  {
    "text": "And so you can ask, if you want to run linear regression with 50 parameters,",
    "start": "3958460",
    "end": "3963935"
  },
  {
    "text": "how many examples do you need to fit linear regression? And I will say you know if M was maybe 500,",
    "start": "3963935",
    "end": "3971405"
  },
  {
    "text": "right, maybe you'd be okay. You have 500 examples to 50-50 parameters. But if for computational reasons,",
    "start": "3971405",
    "end": "3978215"
  },
  {
    "text": "if- if it doesn't run too slowly , to even set M equals 1,000 or even 5,000,",
    "start": "3978215",
    "end": "3983945"
  },
  {
    "text": "then there's no harm to letting M be bigger. So usually M, you might as well set to be as big as you feel",
    "start": "3983945",
    "end": "3991339"
  },
  {
    "text": "like, subject to the program not taking too long to run because it- it, you know if- if you're,",
    "start": "3991340",
    "end": "3997175"
  },
  {
    "text": "um, if you're fitting- unlike supervised learning, if you're fitting data to housing prices,",
    "start": "3997175",
    "end": "4002740"
  },
  {
    "text": "um, you need to go out and, you know, collect data right off Craigslist or- or what's",
    "start": "4002740",
    "end": "4009880"
  },
  {
    "text": "on Zillow or Trulia or Redfin or whatever about prices of houses.",
    "start": "4009880",
    "end": "4014934"
  },
  {
    "text": "And so data is expensive to collect in the real world. But once you have a model, you can set M equals 5,000 or 10,000 or",
    "start": "4014935",
    "end": "4022570"
  },
  {
    "text": "100,000 and just- and then your algorithm will run more slowly. But as long as your algorithm doesn't run too slowly,",
    "start": "4022570",
    "end": "4029800"
  },
  {
    "text": "there is no harm to setting M to be bigger. Makes sense? Um, all right cool.",
    "start": "4029800",
    "end": "4040075"
  },
  {
    "text": "So, um, so I know that there's a lot going on to this algorithm but this is fitted value iteration.",
    "start": "4040075",
    "end": "4047725"
  },
  {
    "text": "And if you do this, uh, this, you can get reasonable behavior on a lot of",
    "start": "4047725",
    "end": "4053470"
  },
  {
    "text": "robots by choosing a set of features and learning the value function to approximate the value of the- really",
    "start": "4053470",
    "end": "4060684"
  },
  {
    "text": "approximate the expected payoff of a robot starting off in different states. Okay. Um, now just a few details",
    "start": "4060685",
    "end": "4073750"
  },
  {
    "text": "to wrap up, again, some practical aspects of how you do this.",
    "start": "4073750",
    "end": "4081170"
  },
  {
    "text": "After you've learned all these parameters, this- you've now learned- go ahead, yeah.",
    "start": "4092010",
    "end": "4098200"
  },
  {
    "text": "[inaudible]",
    "start": "4098200",
    "end": "4112600"
  },
  {
    "text": "Oh, I see. Yes, thank you. Um, yes. So in this, um, expression, where do you get V of S prime j from?",
    "start": "4112600",
    "end": "4121930"
  },
  {
    "text": "Yes. So you would get this from Theta transpose Phi of S prime j,",
    "start": "4121930",
    "end": "4128109"
  },
  {
    "text": "using the parameters of Theta from the last iteration of fitted value iteration.",
    "start": "4128110",
    "end": "4133404"
  },
  {
    "text": "Ju- just as in value iteration, this is the values from the last iteration that you use to update a new iteration.",
    "start": "4133405",
    "end": "4141130"
  },
  {
    "text": "So then you use the last value of Theta to update the new one. Yeah, thank you.",
    "start": "4141130",
    "end": "4145759"
  },
  {
    "text": "Cool. Oh, and, um,",
    "start": "4147030",
    "end": "4153714"
  },
  {
    "text": "one- one other thing you could do which is, um, I talked about the linear regression version of this algorithm which is, you know,",
    "start": "4153715",
    "end": "4163810"
  },
  {
    "text": "this whole- this whole exercise is about generating a sample of S",
    "start": "4163810",
    "end": "4169600"
  },
  {
    "text": "and Y so you can apply linear regression to predict the value of Y from the values of S, right?",
    "start": "4169600",
    "end": "4175435"
  },
  {
    "text": "But there's nothing in this algorithm that says you have to use linear regression. In order to- now that you've generated this dataset,",
    "start": "4175435",
    "end": "4182799"
  },
  {
    "text": "that's this box that I have here, this- this is linear regression, right, but you don't have to use linear regression.",
    "start": "4182800",
    "end": "4188575"
  },
  {
    "text": "In modern yo- deep reinforcement learning, um, one of the ways- well one of the ways to go from reinforcement learning",
    "start": "4188575",
    "end": "4194860"
  },
  {
    "text": "to deep reinforcement learning is to just use a neural network with this step instead. Then you can- then- then you call that deep reinforcement learning where- no.",
    "start": "4194860",
    "end": "4201954"
  },
  {
    "text": "But, hey, it's legit, you know. [LAUGHTER] Um, uh, but, but,",
    "start": "4201955",
    "end": "4207520"
  },
  {
    "text": "you can also use locally weighted linear regression or whatever regression algorithm you want in order to estimate y as a function of the state s. Yeah,",
    "start": "4207520",
    "end": "4218245"
  },
  {
    "text": "and actually if you use a neural network, it relieves the need to choose features Phi as well, you can feed in the raw features.",
    "start": "4218245",
    "end": "4224545"
  },
  {
    "text": "You know, your angle, your orientation and, and using neural networks, to learn that mapping in a supervised learning way.",
    "start": "4224545",
    "end": "4230425"
  },
  {
    "text": "Okay, um, all right.",
    "start": "4230425",
    "end": "4237849"
  },
  {
    "text": "So one last, ah, ah, important, ah, I guess practical implementational detail, which is, um,",
    "start": "4237850",
    "end": "4246369"
  },
  {
    "text": "fitted VI right, uh, gives, uh,",
    "start": "4246370",
    "end": "4251470"
  },
  {
    "text": "approximation to V star.",
    "start": "4251470",
    "end": "4259435"
  },
  {
    "text": "And this, um, implicitly defines Pi star.",
    "start": "4259435",
    "end": "4269380"
  },
  {
    "text": "Right, because the definition for Pi star is that, um,",
    "start": "4269380",
    "end": "4276080"
  },
  {
    "text": "right. So, um, when you're running a robot,",
    "start": "4291900",
    "end": "4300025"
  },
  {
    "text": "you know, you need to execute the policy Pi right, given the state you're gonna pick an action, given the state you're gonna pick an action.",
    "start": "4300025",
    "end": "4306190"
  },
  {
    "text": "And, and having computed V star, it only implicitly defines the optimal policy Pi star.",
    "start": "4306190",
    "end": "4313300"
  },
  {
    "text": "All right, um, and so ah if you're running a robo- if you're running a robot in real time,",
    "start": "4313300",
    "end": "4321505"
  },
  {
    "text": "then you know actually if you fly a helicopter, you might have to choose control actions at 10 hertz",
    "start": "4321505",
    "end": "4326949"
  },
  {
    "text": "meaning 10 times a second you're given the state, you have to choose an action. Uh, uh, if you're building a self-driving car,",
    "start": "4326950",
    "end": "4332200"
  },
  {
    "text": "again a 10 hertz controller wo- would be pretty reasonable. I guess choose a new action and maybe 10 times a second would be pretty reasonable.",
    "start": "4332200",
    "end": "4338530"
  },
  {
    "text": "Um, but how do you compute this expectation and this maximization 10 times per second?",
    "start": "4338530",
    "end": "4344349"
  },
  {
    "text": "So, um, in what we use for fitted value iteration,",
    "start": "4344350",
    "end": "4349660"
  },
  {
    "text": "we used right, a sample,",
    "start": "4349660",
    "end": "4354910"
  },
  {
    "text": "uh, of- we use k examples to approximate the expectation.",
    "start": "4361580",
    "end": "4366850"
  },
  {
    "text": "Right, but if you're running this, um, in real time on a helicopter, you know,",
    "start": "4366850",
    "end": "4372985"
  },
  {
    "text": "probably you don't want to, uh, uh, uh, at least I know for my robotics implementations I have been reluctant to use",
    "start": "4372985",
    "end": "4381550"
  },
  {
    "text": "a random number generator right in the inner loop of how we control a helicopter. Right it, it, it might work but I,",
    "start": "4381550",
    "end": "4388150"
  },
  {
    "text": "but I think, you know, it's approximately- if you want to compute this arg max, you need to approximate this expectation and",
    "start": "4388150",
    "end": "4394735"
  },
  {
    "text": "do you really want to be running a random number generator on a helicopter? And if you're really unlucky the random number gen-",
    "start": "4394735",
    "end": "4399850"
  },
  {
    "text": "generator generates an unlucky value, will your helicopter do something you know, bad and crash?",
    "start": "4399850",
    "end": "4405790"
  },
  {
    "text": "Oh, I, I, I would, again just emotionally I don't feel very good if, uh, your self-driving car has a random number generator and,",
    "start": "4405790",
    "end": "4413575"
  },
  {
    "text": "and a loop of how it's choosing to drive. Right, um, so just as a practical matter, ah,",
    "start": "4413575",
    "end": "4419095"
  },
  {
    "text": "ah, ah, there are a couple of tricks that people often use.",
    "start": "4419095",
    "end": "4426740"
  },
  {
    "text": "Which is, um, the simulator",
    "start": "4427440",
    "end": "4433730"
  },
  {
    "text": "is often of this form, right.",
    "start": "4438480",
    "end": "4454810"
  },
  {
    "text": "Okay, so most simulators have this form, next state is equal to some function of the pre- uh,",
    "start": "4454810",
    "end": "4462085"
  },
  {
    "text": "previous state and action plus some noise. And so one thing that is often done is, um,",
    "start": "4462085",
    "end": "4470830"
  },
  {
    "text": "for your deployment or for the,",
    "start": "4470830",
    "end": "4476905"
  },
  {
    "text": "you know for the, for, for, for the actual policy you implement on the robot. Um, set epsilon t equals 0 and set k equals 1.",
    "start": "4476905",
    "end": "4491625"
  },
  {
    "text": "Right and so, um, so, so, so this, this is a reasonable way to make this policy run on a helicopter,",
    "start": "4491625",
    "end": "4499690"
  },
  {
    "text": "which is during training you do want to add noise to the simulator because it causes a policy you learn to be much more robust.",
    "start": "4499690",
    "end": "4508840"
  },
  {
    "text": "So little errors in the simulator, your simulator is always a little bit off. You know maybe it didn't quite simulate wind gusts",
    "start": "4508840",
    "end": "4514810"
  },
  {
    "text": "or when you turn the helicopter does it bank exactly the right amount. Simulator is always, you know, it's in practice is always a little bit off.",
    "start": "4514810",
    "end": "4521125"
  },
  {
    "text": "Um, so it's important to have noise in the simulator in model based RL. But when you're deploying this in a physical simulator, um,",
    "start": "4521125",
    "end": "4529645"
  },
  {
    "text": "one thing you could do that'll be very reasonable is just get rid of the noise and set k equals 1 and so what you would do is,",
    "start": "4529645",
    "end": "4537610"
  },
  {
    "text": "um, uh, let's see.",
    "start": "4537610",
    "end": "4548350"
  },
  {
    "text": "Um, whenever you're in the state s,",
    "start": "4548350",
    "end": "4556400"
  },
  {
    "text": "pick the action a according to",
    "start": "4558420",
    "end": "4564969"
  },
  {
    "text": "arg max over a of v of s, a.",
    "start": "4564970",
    "end": "4571435"
  },
  {
    "text": "Right so, uh, this f is this f from here. So this is the simulator",
    "start": "4571435",
    "end": "4578510"
  },
  {
    "text": "with the noise removed. Okay and so what you would do is actually,",
    "start": "4584490",
    "end": "4591025"
  },
  {
    "text": "and, and, you know, computers are now fast enough you can- you could do this 10 times a second. Right if you want to control a helicopter or a self car at 10 hertz,",
    "start": "4591025",
    "end": "4597460"
  },
  {
    "text": "you could actually easily do this, you know, at, at, at 10 times a second, which is your car or your helicopter is in some physical state in the world.",
    "start": "4597460",
    "end": "4605080"
  },
  {
    "text": "So you know what is S and so you can quickly for every possible action a that you could take,",
    "start": "4605080",
    "end": "4612400"
  },
  {
    "text": "use a simulator to simulate where your helicopter will go, um, if you were to take that action.",
    "start": "4612400",
    "end": "4618804"
  },
  {
    "text": "So go ahead and run your simulator, you know, once for each possible action you could take. Right, computers are actually fast enough to do this in real time.",
    "start": "4618805",
    "end": "4625915"
  },
  {
    "text": "Um, and then for each of the possible next actions you could get to, compute v apply to that.",
    "start": "4625915",
    "end": "4632860"
  },
  {
    "text": "Uh, so, so this is really right S prime, um, uh, drawn from P_sa, uh,",
    "start": "4632860",
    "end": "4639625"
  },
  {
    "text": "but with a deterministic simulator, right.",
    "start": "4639625",
    "end": "4643190"
  },
  {
    "text": "Right, so every 10th of a second you could in your simulator try out every single possible action,",
    "start": "4652320",
    "end": "4658450"
  },
  {
    "text": "use your simulator to figure out where you would go under each and every single possible action,",
    "start": "4658450",
    "end": "4664810"
  },
  {
    "text": "and apply your value function to see of all of these possible actions, which one gets my helicopter,",
    "start": "4664810",
    "end": "4671635"
  },
  {
    "text": "you know, in the next one-tenth of a second to the state that looks best according to the value functions you've learned from fitted value iteration.",
    "start": "4671635",
    "end": "4680305"
  },
  {
    "text": "Okay, um, and it turns out if you do this then you can,",
    "start": "4680305",
    "end": "4685660"
  },
  {
    "text": "this is how you actually implement something that runs in real time. And, oh, and I just mentioned, you know, the, the,",
    "start": "4685660",
    "end": "4691960"
  },
  {
    "text": "the idea of a training with stochastic simulator and just setting the noise to zero, it's one of those things that's not very vigorously justified but in practice this,",
    "start": "4691960",
    "end": "4701710"
  },
  {
    "text": "this works well. Yes, question? [inaudible]. Oh yes. Ah, so, so, um,",
    "start": "4701710",
    "end": "4708490"
  },
  {
    "text": "for the purposes of this, you can assume you have a discretized action space, ah, and it turns out that for a self-driving car it's",
    "start": "4708490",
    "end": "4714639"
  },
  {
    "text": "actually okay to discretize the action space. Uh, for a helicopter,",
    "start": "4714640",
    "end": "4719715"
  },
  {
    "text": "we tend not to discretize the action space but, um, it turns out if f is a continuous function,",
    "start": "4719715",
    "end": "4725730"
  },
  {
    "text": "then you can use other methods as well. Right this is about optimizing over the, I, I didn't mean to talk about this and sorry this is getting a little bit deeper.",
    "start": "4725730",
    "end": "4733030"
  },
  {
    "text": "But, uh, even if a was a continuous thing, uh, you can actually use real time optimization algorithms, uh,",
    "start": "4733030",
    "end": "4740110"
  },
  {
    "text": "to very quickly try to optimize this function even as the function that it contains actually. Uh, there's a literature on something called model predictive control which,",
    "start": "4740110",
    "end": "4747909"
  },
  {
    "text": "which can actually, you can actually do these optimizations in real time and use to fly a helicopter. Just one last question.",
    "start": "4747910",
    "end": "4753175"
  },
  {
    "text": "So what's your different action you'll transition from the next stage? So how do you know when you're still looking?",
    "start": "4753175",
    "end": "4758290"
  },
  {
    "text": "Do you make an observation or do you use your [inaudible]? Wait oh, uh, uh say, what's the question again?",
    "start": "4758290",
    "end": "4764889"
  },
  {
    "text": "So once you are, like when you have had the helicopter, once you pick an action you'll transition to the next stage so do you make",
    "start": "4764890",
    "end": "4771219"
  },
  {
    "text": "an observation to set up where you are or do you use the [inaudible]. Oh, I use an observation, yeah, yes, yes.",
    "start": "4771220",
    "end": "4778150"
  },
  {
    "text": "So you take an action and then your helicopter will do something, there will be some wind, your model may be off and so you would then a 10th of a second later,",
    "start": "4778150",
    "end": "4785785"
  },
  {
    "text": "take another you know GPS reading, accelerometer reading, magnetic compass reading and use the helicopter sensors that tell you where you actually are.",
    "start": "4785785",
    "end": "4793000"
  },
  {
    "text": "Now, cool. Okay, cool. All right, I hope, uh, yeah, hope- hopefully this was helpful.",
    "start": "4793000",
    "end": "4799855"
  },
  {
    "text": "I feel like, you know, the- I think it's fascinating that the excitement about self-driving cars and flying helicopters and all that, it gives well-balanced equations like these.",
    "start": "4799855",
    "end": "4806710"
  },
  {
    "text": "I, I think that's kinda cool. [LAUGHTER] Okay, that's great. Thanks, I'll see you guys next week.",
    "start": "4806710",
    "end": "4811040"
  }
]