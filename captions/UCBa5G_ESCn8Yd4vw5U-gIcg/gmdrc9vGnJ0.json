[
  {
    "text": " Today we're going to be\ntalking about linear constraint",
    "start": "0",
    "end": "7930"
  },
  {
    "text": "optimization. And so oftentimes in either\nresearch settings or real world",
    "start": "7930",
    "end": "14350"
  },
  {
    "text": "applications, there's\ntypically a large incentive to try and get your problem\ninto a linear constrained",
    "start": "14350",
    "end": "20890"
  },
  {
    "text": "optimization form. The reason for\nthat is because we can solve these linear\nconstrained optimization",
    "start": "20890",
    "end": "26439"
  },
  {
    "text": "problems to global\noptimality very efficiently. And so we're going to\nsee how we actually go about solving these linear\nconstrained optimization",
    "start": "26440",
    "end": "33700"
  },
  {
    "text": "problems in this lecture today. And so the overall\nlayout of what",
    "start": "33700",
    "end": "38872"
  },
  {
    "text": "we're going to be\ndiscussing today, we're going to start\nat a high level what is a linear constrained\noptimization problem.",
    "start": "38872",
    "end": "45640"
  },
  {
    "text": "And then we're going to go\ninto the actual mathematical formulation for the problem,\nand then sort of relook",
    "start": "45640",
    "end": "52960"
  },
  {
    "text": "at what we saw last time with\nthe first order necessary conditions, applying\nthose specifically to these linear constrained\noptimization problems.",
    "start": "52960",
    "end": "60140"
  },
  {
    "text": "And that's really the\nfoundation for what we'll go into next, which\nis the simplex algorithm. And that's one method that we\ncan use to actually solve these.",
    "start": "60140",
    "end": "70300"
  },
  {
    "text": "So linear constrained\noptimization at a high level\nzooming all the way out what is a linear constrained\noptimization problem.",
    "start": "70300",
    "end": "77850"
  },
  {
    "text": "Well, any time that you\nhave a linear objective with linear constraints,\nthat gives you",
    "start": "77850",
    "end": "83650"
  },
  {
    "text": "what we call a linear program. So linear program, just another\nname for a linear constraint",
    "start": "83650",
    "end": "88750"
  },
  {
    "text": "optimization problem. Typically, it's referred to\nas a linear program, though. So oftentimes in\nthe real world, we",
    "start": "88750",
    "end": "97360"
  },
  {
    "text": "don't have these\nlinear objectives or linear constraints. And so that's where\nwe get this sort of incentive to\napproximate our objectives",
    "start": "97360",
    "end": "104560"
  },
  {
    "text": "through these linearized\nversion of the objective, or the same for\nyour constraints.",
    "start": "104560",
    "end": "110200"
  },
  {
    "text": "And so the reason for that is\nbecause with modern techniques, we can solve these linear\nconstrained optimization",
    "start": "110200",
    "end": "116649"
  },
  {
    "text": "problems to global\noptimality when we have millions of variables\nand millions of constraints.",
    "start": "116650",
    "end": "122119"
  },
  {
    "text": "So it's a pretty powerful\ntool that we can use here. So that's the high level.",
    "start": "122120",
    "end": "128820"
  },
  {
    "text": "Linear constrained\noptimization, we're just working with these linear\nobjectives, linear constraints.",
    "start": "128820",
    "end": "133880"
  },
  {
    "text": "So to actually see how we go\nabout formulating this problem now, we're going to\ntalk about there's",
    "start": "133880",
    "end": "139460"
  },
  {
    "text": "three different main\nforms that you'll see here for how to write a linear\nconstrained optimization",
    "start": "139460",
    "end": "144799"
  },
  {
    "text": "problem. The one that we're\ngoing to-- the two that we'll talk about here\nis first standard form.",
    "start": "144800",
    "end": "149820"
  },
  {
    "text": "So standard form represents\nthe objective as c transpose x. So that's a linear objective\nbecause the c vector here",
    "start": "149820",
    "end": "156800"
  },
  {
    "text": "is just a constant vector, and\nit's multiplying our design variables here, the x.",
    "start": "156800",
    "end": "162440"
  },
  {
    "text": "And then our\nconstraints, we just have this A matrix, so Ax\nless than or equal to b,",
    "start": "162440",
    "end": "167780"
  },
  {
    "text": "and we have the constraint that\nx is greater than or equal to 0. So this is the\nstandard form where we represent the constraints\nhere with this less than",
    "start": "167780",
    "end": "175130"
  },
  {
    "text": "or equal to equality. So if we want to visualize,\nget a visual representation",
    "start": "175130",
    "end": "180200"
  },
  {
    "text": "of this problem here. If we look at the gradient of\nour objective, the gradient of C",
    "start": "180200",
    "end": "185390"
  },
  {
    "text": "transpose x with\nrespect to x is just c. So that's what we've drawn\nhere is the c vector.",
    "start": "185390",
    "end": "192120"
  },
  {
    "text": "We know from calculus that\nthe gradient of the objective is going to be perpendicular\nto the contour line.",
    "start": "192120",
    "end": "199480"
  },
  {
    "text": "So what we're showing here is a\ncontour line of our objective. So this is a line of c transpose\nx equal to some constant.",
    "start": "199480",
    "end": "205752"
  },
  {
    "text": "And we know that\nthat's going to be perpendicular to the\ngradient of our objective.",
    "start": "205752",
    "end": "211380"
  },
  {
    "text": "So we can look at several\ndifferent contour lines, and those are just\ndifferent lines",
    "start": "211380",
    "end": "216420"
  },
  {
    "text": "of c transpose x\nequal to a constant, and you'll notice that they\nare all perpendicular to this c",
    "start": "216420",
    "end": "223110"
  },
  {
    "text": "vector that we've drawn there. So that's the visual\nrepresentation of our objective.",
    "start": "223110",
    "end": "228719"
  },
  {
    "text": "We can do the same thing for\nthese inequality constraints. So very similarly, if we\nhave this vector here that",
    "start": "228720",
    "end": "235230"
  },
  {
    "text": "we'll call w, and then we\nlook at a line of constant w transpose x.",
    "start": "235230",
    "end": "240250"
  },
  {
    "text": "So this is another contour line. Now, where w transpose\nx is equal to b, we know that is also going\nto be perpendicular to the w",
    "start": "240250",
    "end": "249090"
  },
  {
    "text": "vector, which is the gradient\nof that constraint there. And so now we can talk\nabout these half spaces,",
    "start": "249090",
    "end": "255090"
  },
  {
    "text": "and half spaces are just\nrepresented by these inequality constraints. So if we have this w\ntranspose x less than b,",
    "start": "255090",
    "end": "262440"
  },
  {
    "text": "meaning we're on the left\nside of this contour line, that's one half space.",
    "start": "262440",
    "end": "267520"
  },
  {
    "text": "And you can think of that\nas just like the inequality constraint is just dividing\nthe space into halves.",
    "start": "267520",
    "end": "273660"
  },
  {
    "text": "On the other side, we\nhave the w transpose x greater than b\nconstraint there.",
    "start": "273660",
    "end": "279009"
  },
  {
    "text": "So that's another half\nspace on the other side of this constraint. So that's how we visualize the\nlinear constraints in that case.",
    "start": "279010",
    "end": "287350"
  },
  {
    "text": "But that was looking at just\none inequality constraint. Oftentimes, we're working with\nmany inequality constraints.",
    "start": "287350",
    "end": "294740"
  },
  {
    "text": "And when we have several\nof these constraints and they intersect,\nwe get this region",
    "start": "294740",
    "end": "300040"
  },
  {
    "text": "of space, which is\nour feasible set. In this case, which we're\ndenoting by this script x.",
    "start": "300040",
    "end": "305470"
  },
  {
    "text": "So our single\ninequality constraint formed a half space when\nwe have an intersection",
    "start": "305470",
    "end": "311110"
  },
  {
    "text": "of these inequality\nconstraints or an intersection of half spaces, that's\nmaking up our feasible set.",
    "start": "311110",
    "end": "316630"
  },
  {
    "text": "And the cool part\nabout this is that we know that the half\nspaces are convex sets,",
    "start": "316630",
    "end": "321800"
  },
  {
    "text": "so when we're looking at just\na single inequality constraint. And we know that the\nintersection of convex sets",
    "start": "321800",
    "end": "328509"
  },
  {
    "text": "also forms a convex set. So that means that\nthis feasible set that we end up with made from\nthese intersection of half",
    "start": "328510",
    "end": "334990"
  },
  {
    "text": "spaces is going to be convex. So what does this mean? If you're not familiar with what\nit means to be a convex set,",
    "start": "334990",
    "end": "341950"
  },
  {
    "text": "or maybe just as a refresher\nhere, if we have two sets, we'll call this one set\none, this one set two.",
    "start": "341950",
    "end": "348210"
  },
  {
    "text": "The visual explanation of what\nit means to be a convex set is just pick any two\npoints in this set,",
    "start": "348210",
    "end": "353940"
  },
  {
    "text": "draw a line between them, and\nif any point along that line is still within the\nset, it's a convex set.",
    "start": "353940",
    "end": "359840"
  },
  {
    "text": "So set one here would\nbe a convex set. Set 2 is not going\nto be a convex set.",
    "start": "359840",
    "end": "365430"
  },
  {
    "text": "The reason for that is\npick these two points, draw a line between\nthem, and you can see that the line\nleaves the set there.",
    "start": "365430",
    "end": "372150"
  },
  {
    "text": "So that's not a convex set. Now, you might be\nthinking to yourself here when you see this that this\nthe set that we've drawn here",
    "start": "372150",
    "end": "380180"
  },
  {
    "text": "sort of looks like Baymax from\nBig Hero 6, and I would say, if that's what you're\nthinking, you're",
    "start": "380180",
    "end": "385970"
  },
  {
    "text": "exactly right because that does\nlook like Baymax from Big Hero 6. Unfortunately, though,\nBaymax is not convex.",
    "start": "385970",
    "end": "393810"
  },
  {
    "text": "So if your problem\ninvolves baymax, you're kind of tough\nout of luck here, unless it's just focus on\nBaymax's head, in which case",
    "start": "393810",
    "end": "400580"
  },
  {
    "text": "Baymax's head is a convex set. So back to standard\nform, the main takeaway",
    "start": "400580",
    "end": "408139"
  },
  {
    "text": "there was that these convex\nsets give us the property that our feasible set is convex.",
    "start": "408140",
    "end": "414690"
  },
  {
    "text": "So we know our\nfeasible set is convex, We know that our objective\nthat we're working with is also convex because\nit's just linear in x.",
    "start": "414690",
    "end": "421920"
  },
  {
    "text": "So that means that our problem\nhere is entirely convex. And so the main takeaway\nfrom this result",
    "start": "421920",
    "end": "427490"
  },
  {
    "text": "is that if we find a local\nminimum to this problem, then that is also going\nto be the global minimum",
    "start": "427490",
    "end": "433940"
  },
  {
    "text": "to the problem. So that's the key result here. And that's why these\nlinear programs are really",
    "start": "433940",
    "end": "439280"
  },
  {
    "text": "nice to work with. And we'll see this theme\nmore as we go forward. ",
    "start": "439280",
    "end": "447110"
  },
  {
    "text": "So extending these\nfeasible sets. Now, there's three\ndifferent cases we want to consider when looking\nat points in these feasible",
    "start": "447110",
    "end": "455300"
  },
  {
    "text": "sets. So the first one is\nwhen we have a point on the interior of the set. A point on the\ninterior of the set",
    "start": "455300",
    "end": "461480"
  },
  {
    "text": "is never going to be optimal. The reason for\nthat is if we just look at the gradient\nof our objective again, so let's say that this\nis the gradient of our objective",
    "start": "461480",
    "end": "469013"
  },
  {
    "text": "c here, we want to\nminimize the objective. So we're going to move in\nthe negative c direction.",
    "start": "469013",
    "end": "474750"
  },
  {
    "text": "So if we're on the\ninterior of the set, we can always improve the\nobjective by just sliding along that negative c vector.",
    "start": "474750",
    "end": "480840"
  },
  {
    "text": "So we're always going to be able\nto improve the objective when we're on the\ninterior of the set. So that's the first case.",
    "start": "480840",
    "end": "488100"
  },
  {
    "text": "The second case is when\nwe have a point on a face. So in this case, we've drawn\nthis point here on the face",
    "start": "488100",
    "end": "494699"
  },
  {
    "text": "of this boundary, and\npoints on the face are only going to be\noptimal in the case that the gradient\nof the objective c",
    "start": "494700",
    "end": "502320"
  },
  {
    "text": "is perpendicular to\nthat face because notice what this ends up\nbeing, this is just a contour line of our objective\njust like what we saw before.",
    "start": "502320",
    "end": "510280"
  },
  {
    "text": "So anywhere along that face\nis a line of c transpose x equal to some constant. So if we were to slide this\npoint along this face here,",
    "start": "510280",
    "end": "520020"
  },
  {
    "text": "anywhere we slide it\non, that face is going to have the same objective. So there's no point along that\nface is better than any other.",
    "start": "520020",
    "end": "526780"
  },
  {
    "text": "So in this case, we would\nhave infinite solutions here because there's infinite\npoints that lie along that face.",
    "start": "526780",
    "end": "534630"
  },
  {
    "text": "All right. And then the third case\nthat we would work with is when we have a\npoint at a vertex. So these vertex points\nare going to turn out",
    "start": "534630",
    "end": "542200"
  },
  {
    "text": "to be very important, and\nthat's because that when we have a point at a vertex, depending\non the orientation of our c",
    "start": "542200",
    "end": "549279"
  },
  {
    "text": "vector here in this case,\nthat will be the optimal point because if you move in\nthe negative c direction,",
    "start": "549280",
    "end": "554830"
  },
  {
    "text": "you can't improve any\nfurther than that point that we have at the vertex. So the really cool part\nabout linear programs",
    "start": "554830",
    "end": "562120"
  },
  {
    "text": "is that we know if they have\na unique optimal solution, it's guaranteed to\nexist at a vertex point",
    "start": "562120",
    "end": "568850"
  },
  {
    "text": "because that vertex\npoint is a unique point. So if there's a\nunique solution, it's going to exist at\nthe vertex point.",
    "start": "568850",
    "end": "575130"
  },
  {
    "text": " So we saw standard form.",
    "start": "575130",
    "end": "581029"
  },
  {
    "text": "Now for equality form, it's\nsame exact problem now. We're just changing the\ninequality constraints",
    "start": "581030",
    "end": "588070"
  },
  {
    "text": "into equality constraints. So what we saw before was the\nstandard form on the left,",
    "start": "588070",
    "end": "594070"
  },
  {
    "text": "and then the equality\nform is now on the right. So to do this conversion\nto get from standard form",
    "start": "594070",
    "end": "600820"
  },
  {
    "text": "to equality form, all\nwe want to do basically is we just want to change\nour equality constraints,",
    "start": "600820",
    "end": "608750"
  },
  {
    "text": "so we want Ax less\nthan or equal to b, we want to get that into\na form of Ax equal to b.",
    "start": "608750",
    "end": "616690"
  },
  {
    "text": "So how are we going to do this? Well, for these\ninequality constraints, we can just introduce what's\ncalled a Slack variable.",
    "start": "616690",
    "end": "624080"
  },
  {
    "text": "So what this is\ngoing to look like is we're going to have Ax plus s\nequal to b, where this s is what",
    "start": "624080",
    "end": "634083"
  },
  {
    "text": "we call a slack\nvariable, and it's greater than or equal to zero. So I think it helps to\nsee an example here.",
    "start": "634083",
    "end": "639690"
  },
  {
    "text": "So if we have the\nproblem starting with minimize x with x greater\nthan or equal to 1.",
    "start": "639690",
    "end": "648649"
  },
  {
    "text": "So if we want to transform\nthis inequality constraint into an equality\nconstraint, it's",
    "start": "648650",
    "end": "654290"
  },
  {
    "text": "just going to become\nx minus s equal to 1.",
    "start": "654290",
    "end": "659550"
  },
  {
    "text": "So you might be\nsaying now, well, why is it a negative\nsign here when before we",
    "start": "659550",
    "end": "665600"
  },
  {
    "text": "had that plus sign? So I think the best way to\nthink about this is just to draw out a number line\nhere and visualize it.",
    "start": "665600",
    "end": "672720"
  },
  {
    "text": "And this helps to keep\nthe sign straight. So if this is our\none point, we're",
    "start": "672720",
    "end": "679850"
  },
  {
    "text": "saying we want x greater\nthan or equal to 1. So we want to be on\nthis side of one1. So if we have x here, then\nwe satisfy this inequality",
    "start": "679850",
    "end": "689120"
  },
  {
    "text": "constraint, and now we're just\nrepresenting this inequality constraint in a different form.",
    "start": "689120",
    "end": "694290"
  },
  {
    "text": "So we're saying the\nexact same thing, but this is just\nour s variable now. So however far or\nhowever close x is to 1,",
    "start": "694290",
    "end": "703150"
  },
  {
    "text": "we're still representing\nthat same inequality just now in a hard equality\nform by subtracting s.",
    "start": "703150",
    "end": "709850"
  },
  {
    "text": "That's why we have\na negative sign. You can think about it\nin the opposite case too. So if instead we had x\nless than or equal to 1,",
    "start": "709850",
    "end": "718420"
  },
  {
    "text": "so now we want our\nx to lie over here. This is where we're\njust going to add s on.",
    "start": "718420",
    "end": "724160"
  },
  {
    "text": "So we'll have a positive\nsign for the slack variable. So that's all we're doing\nwith slack variables.",
    "start": "724160",
    "end": "729650"
  },
  {
    "text": "It's just rewriting the\ninequality constraints into a hard equality constraint.",
    "start": "729650",
    "end": "735100"
  },
  {
    "text": "So that's how we convert between\nstandard form and equality form.",
    "start": "735100",
    "end": "740139"
  },
  {
    "text": "The reason that\nwe want to do this is because often we're going\nto be working primarily",
    "start": "740140",
    "end": "745570"
  },
  {
    "text": "in equality form, specifically\nwith the simplex algorithm. It sort assumes\nthat we're passing in a problem formulated in the\nequality form of the problem.",
    "start": "745570",
    "end": "754150"
  },
  {
    "text": "So it's kind of a convention\nthat we're working with, but it's important\nto know how we shift between the different forms.",
    "start": "754150",
    "end": "760440"
  },
  {
    "text": "Yes. Going back a little bit, why\nit important x to be positive? Why is that a convention? And also, why can't\nwe just not have it.",
    "start": "760440",
    "end": "766880"
  },
  {
    "text": "Yeah, good question. So the question was,\nwhy are we enforcing that x has to be positive? So that's another assumption\nfrom the simplex algorithm",
    "start": "766880",
    "end": "774650"
  },
  {
    "text": "that we're sort of working in\nthe positive quadrant here. So we're requiring that x be\ngreater than or equal to zero.",
    "start": "774650",
    "end": "780810"
  },
  {
    "text": "Similarly to how we're\nrequiring that we pass it in this equality form. So it's just sort\nof an assumption",
    "start": "780810",
    "end": "786140"
  },
  {
    "text": "that we're making and\nenforcing, and basically if you had an x that you're\nstarting with that's",
    "start": "786140",
    "end": "792320"
  },
  {
    "text": "not greater than or equal\nto 0, you can similarly do a same type of\ntransformation to then get",
    "start": "792320",
    "end": "798050"
  },
  {
    "text": "that x to be greater\nthan or equal to 0. ",
    "start": "798050",
    "end": "805134"
  },
  {
    "text": "So that's the overall\nproblem formulation. We're primarily going to\nbe focused on equality form",
    "start": "805134",
    "end": "810700"
  },
  {
    "text": "as we're moving forward now. And so what we saw\nlast time was this idea of the first order\nnecessary conditions,",
    "start": "810700",
    "end": "817180"
  },
  {
    "text": "and we're going to be\nusing these first order necessary conditions to\ndetermine when a vertex is",
    "start": "817180",
    "end": "822790"
  },
  {
    "text": "optimal, and how we're\ngoing to transition between these vertices points. So just sort of as a\nrefresher from last time",
    "start": "822790",
    "end": "830950"
  },
  {
    "text": "of what the first order\nnecessary conditions are, we saw that the general\ncase of the Lagrangian",
    "start": "830950",
    "end": "836470"
  },
  {
    "text": "for a constrained\noptimization problem can be written like this. So we have our\nobjective f of x, g",
    "start": "836470",
    "end": "842320"
  },
  {
    "text": "of x here are for the\ninequality constraints, and h of x are for the\nequality constraints.",
    "start": "842320",
    "end": "847930"
  },
  {
    "text": "Now recall here that\nthe g of x that we're working with, I'll just write\nthis up so we don't forget, g",
    "start": "847930",
    "end": "854140"
  },
  {
    "text": "of x here is assumed to be\nless than or equal to zero. So that's the inequality sign\nthat we're working with here,",
    "start": "854140",
    "end": "861160"
  },
  {
    "text": "where the g of x are less\nthan or equal to constraints. So if we want to write this\nnow for our specific linear",
    "start": "861160",
    "end": "868580"
  },
  {
    "text": "constrained optimization\nproblem inequality form, we have our problem\nhere on the left.",
    "start": "868580",
    "end": "873750"
  },
  {
    "text": "So the Lagrangian\nfor this is just going to be c transpose\nx, which is our objective.",
    "start": "873750",
    "end": "879410"
  },
  {
    "text": "Then notice we have this\nminus mu transpose x. So why do we have the\nminus sign when up top we",
    "start": "879410",
    "end": "885020"
  },
  {
    "text": "had the positive sign? Well, it's because we assumed\nthat g of x was less than or equal to zero, but now\nwe have this x greater",
    "start": "885020",
    "end": "891680"
  },
  {
    "text": "than or equal to constraint. So we're just introducing\nthat negative sign to flip the sign\nof the inequality.",
    "start": "891680",
    "end": "897420"
  },
  {
    "text": "So that's where that negative\nmu transpose x term comes from. For the equality constraint,\nthe sine of lambda",
    "start": "897420",
    "end": "903650"
  },
  {
    "text": "doesn't actually matter. And we'll see the\nvisual interpretation for why that's the\ncase here in a second,",
    "start": "903650",
    "end": "909480"
  },
  {
    "text": "but the sign for lambda can be\neither positive or negative, and then when we actually\ndo the optimization,",
    "start": "909480",
    "end": "915290"
  },
  {
    "text": "it'll make up for\nit in whichever way it needs to be for the\noptimization to happen. So only mu has the constraint\nwith this specific form",
    "start": "915290",
    "end": "924470"
  },
  {
    "text": "of the sign. But just keep in mind what the\nLagrangian is representing. It's a way to penalize these\ndeviations from the constraint.",
    "start": "924470",
    "end": "931665"
  },
  {
    "text": "So if we're not\nmeeting the constraint, we want to penalize that in\nthis Lagrangian objective here. ",
    "start": "931665",
    "end": "939290"
  },
  {
    "text": "So the first order\nnecessary conditions, just recapping them here, the first\none that we had was feasibility.",
    "start": "939290",
    "end": "944767"
  },
  {
    "text": "I think this one is\npretty straightforward. We just have to satisfy\nthe constraints.",
    "start": "944768",
    "end": "949910"
  },
  {
    "text": "In order for a point\nto be optimal here, it has to satisfy\nAx equal to b and x greater than or equal to 0.",
    "start": "949910",
    "end": "957290"
  },
  {
    "text": "The next one, dual feasibility. I find that this one's\nmaybe neglected sometimes",
    "start": "957290",
    "end": "962600"
  },
  {
    "text": "in people's intuition of why\nwe have this dual feasibility constraint. So I think the best\nway to keep it straight",
    "start": "962600",
    "end": "968540"
  },
  {
    "text": "is through this visual\nintuition that you want to have behind the\ndual feasibility constraint. So recall for x greater\nthan or equal to 0.",
    "start": "968540",
    "end": "976680"
  },
  {
    "text": "So say this is our\nconstraint here, which it is, so we have this greater than\nor equal to 0 constraint.",
    "start": "976680",
    "end": "982070"
  },
  {
    "text": "With the Lagrangian, we want\nto introduce this penalty. So that's the whole\nidea here is we want to penalize being infeasible.",
    "start": "982070",
    "end": "989730"
  },
  {
    "text": "So for the x greater than\nor equal to 0 constraint, we don't want to\npenalize if we're",
    "start": "989730",
    "end": "995600"
  },
  {
    "text": "greater than or equal to 0. That means we're feasible. So we don't want to\nenforce any penalty there. As soon as we're slightly less\nthan 0, we're saying let's",
    "start": "995600",
    "end": "1003190"
  },
  {
    "text": "give infinite penalty now. This is a terrible point. We don't even want to consider\nthis infeasible point.",
    "start": "1003190",
    "end": "1008380"
  },
  {
    "text": "So that's this\ninfinite step function that we're getting here. But when we're actually\ngoing about optimizing this,",
    "start": "1008380",
    "end": "1014709"
  },
  {
    "text": "this is not very conducive\nto set up in an optimization because you have this\ndiscontinuous function here",
    "start": "1014710",
    "end": "1021740"
  },
  {
    "text": "with this infinite step. So instead of that, we introduce\nthis mu transpose x penalty",
    "start": "1021740",
    "end": "1030619"
  },
  {
    "text": "here. And notice again we\nhave this negative mu x, so it's just a linear--",
    "start": "1030619",
    "end": "1036449"
  },
  {
    "text": "we're saying we're enforcing\nthis linear penalty now, and we require dual\nfeasibility, which",
    "start": "1036450",
    "end": "1042079"
  },
  {
    "text": "is mu greater than or equal to 0\nto enforce the correct direction of this penalty. So it's basically just saying\nthat the slope of this line",
    "start": "1042079",
    "end": "1049280"
  },
  {
    "text": "has to be in the\ncorrect direction. If mu was allowed to go sort\nof into the positive quadrant",
    "start": "1049280",
    "end": "1054408"
  },
  {
    "text": "there, it wouldn't make\nany sense for the penalty that we're trying to enforce. So that's where this\ndual feasibility",
    "start": "1054408",
    "end": "1059420"
  },
  {
    "text": "requirement is coming from, is\nthe slope of this mu transpose x line.",
    "start": "1059420",
    "end": "1066190"
  },
  {
    "text": "And this same picture applies\nalso to complementary slackness, which we're going to see here,\nand that's the third first order",
    "start": "1066190",
    "end": "1072010"
  },
  {
    "text": "necessary condition. So complementary slackness\nis saying this element wise product, so the\nelement wise product there",
    "start": "1072010",
    "end": "1078610"
  },
  {
    "text": "is just saying either\nthe component of mu or the component of\nx has to equal 0.",
    "start": "1078610",
    "end": "1083960"
  },
  {
    "text": "And why this is the case, we'll\nsee again with this picture. So looking at mu\ntranspose x here,",
    "start": "1083960",
    "end": "1090370"
  },
  {
    "text": "we can consider the three\ndifferent possibilities here. And recall what we saw last time\nwas we get this infinite step",
    "start": "1090370",
    "end": "1097450"
  },
  {
    "text": "function back by\nintroducing this maximize over the Lagrangian\nwith respect to our mu parameter",
    "start": "1097450",
    "end": "1103490"
  },
  {
    "text": "here. This is how we recover that\ninfinite step function, and we'll see how this works.",
    "start": "1103490",
    "end": "1109400"
  },
  {
    "text": "So if x is less than 0,\nmeaning we're infeasible. So our point is going to\nbe over here to the left.",
    "start": "1109400",
    "end": "1114730"
  },
  {
    "text": "Then this maximize with mu\ngreater than or equal to 0 is saying now we want\nto make this penalty as",
    "start": "1114730",
    "end": "1122080"
  },
  {
    "text": "large as possible. So if we have this line\nhere with the slope that we can control,\nso mu is the variable",
    "start": "1122080",
    "end": "1128390"
  },
  {
    "text": "that we're controlling. We basically want to crank mu\nup now as large as possible, and when we do that, we're going\nto get the infinite step back,",
    "start": "1128390",
    "end": "1135560"
  },
  {
    "text": "because that point\nwas infeasible. So mu here is the parameter\nthat we're varying,",
    "start": "1135560",
    "end": "1140600"
  },
  {
    "text": "and that's how we get\nthe large penalty there for an infeasible point. Now in the other case here\nwhere x is greater than 0,",
    "start": "1140600",
    "end": "1148730"
  },
  {
    "text": "meaning that we're already\nfeasible to start with, we have a similar thing\nthat's going to happen here. Notice that our mu here--",
    "start": "1148730",
    "end": "1157250"
  },
  {
    "text": "so in this case,\nwe're at this point, so the penalty that we're\ncurrently receiving is negative,",
    "start": "1157250",
    "end": "1162510"
  },
  {
    "text": "but we want to have the\nmaximum penalty possible. So we're again going\nto crank up the mu. In this case, we're\nactually going",
    "start": "1162510",
    "end": "1168710"
  },
  {
    "text": "to decrease mu to\nincrease our penalty here, and the highest penalty that\nwe can receive for this point",
    "start": "1168710",
    "end": "1175220"
  },
  {
    "text": "is going to be 0 because\nwe have to require that mu is greater than or equal to 0.",
    "start": "1175220",
    "end": "1181549"
  },
  {
    "text": "And this makes sense. We're already a feasible point. We don't want to be\npenalizing at all.",
    "start": "1181550",
    "end": "1187669"
  },
  {
    "text": "And then the last\ncase is just when x is equal to 0, in which\ncase the penalty that we're going to receive is 0.",
    "start": "1187670",
    "end": "1193950"
  },
  {
    "text": "But in this case, we're\nat the active constraint. The constraint is active. We're right up against that\nconstraint, and so in this case,",
    "start": "1193950",
    "end": "1201470"
  },
  {
    "text": "x is 0. So what the complementary\nslackness here is saying is either mu\nor x is going to be 0.",
    "start": "1201470",
    "end": "1207810"
  },
  {
    "text": "We saw that when x\nis already feasible, then mu is going to be\n0, and when x is active,",
    "start": "1207810",
    "end": "1213860"
  },
  {
    "text": "then mu can be whatever we want\nit to be, but x is already 0.",
    "start": "1213860",
    "end": "1219140"
  },
  {
    "text": "So complementary\nslackness is just saying either the constraint\nis active or inactive. That's the main takeaway there.",
    "start": "1219140",
    "end": "1224440"
  },
  {
    "text": " So from that infinite\nstep penalty,",
    "start": "1224440",
    "end": "1230440"
  },
  {
    "text": "that maximize with respect\nto the Lagrange multipliers, we then put that back\ninto our original problem",
    "start": "1230440",
    "end": "1237340"
  },
  {
    "text": "that we started with, which is\nminimizing with respect to x. And so that's where the primal\nform of the problem comes from.",
    "start": "1237340",
    "end": "1244360"
  },
  {
    "text": "And so the last condition\nthat we have here is stationarity, which is this\nA transpose lambda plus mu",
    "start": "1244360",
    "end": "1250210"
  },
  {
    "text": "equal to c. So where does that come from? That comes from taking\nthe gradient of x--",
    "start": "1250210",
    "end": "1255220"
  },
  {
    "text": "the gradient of our\nLagrangian with respect to x. So when we take\nthat gradient, we just end up with\nthat term and we",
    "start": "1255220",
    "end": "1261430"
  },
  {
    "text": "rearrange it here to\nget a transpose lambda plus mu equal to c.",
    "start": "1261430",
    "end": "1267340"
  },
  {
    "text": "Another way to\nthink about this is saying what we saw last time,\nthat the objective function contours are going to be tangent\nto each active constraint.",
    "start": "1267340",
    "end": "1275560"
  },
  {
    "text": "So that's another\nway to think about this stationarity condition. So for linear programs,\nthe important part",
    "start": "1275560",
    "end": "1283600"
  },
  {
    "text": "about these first order\nnecessary conditions are that they are\nalso sufficient. So what this means is\nthat in a regular, just",
    "start": "1283600",
    "end": "1291020"
  },
  {
    "text": "a general constrained\noptimization problem, if you have some point\nx and it satisfies",
    "start": "1291020",
    "end": "1296450"
  },
  {
    "text": "these first order\nnecessary conditions, it means it could be\noptimal, but that's not enough to show\nthat it's optimal.",
    "start": "1296450",
    "end": "1302190"
  },
  {
    "text": "So just because you have some\npoint in a general problem that satisfies these\nconstraints doesn't mean that point is optimal.",
    "start": "1302190",
    "end": "1308610"
  },
  {
    "text": "So they're not sufficient\nfor a general problem. For a linear program,\nthough, if you find a point x",
    "start": "1308610",
    "end": "1314030"
  },
  {
    "text": "and it satisfies these first\norder necessary conditions, then you know it's the\nglobal optimal solution.",
    "start": "1314030",
    "end": "1320130"
  },
  {
    "text": "So you can say,\nboom, we're done. We found the optimal\nif it satisfies these. So it's necessary and\nsufficient to show optimality.",
    "start": "1320130",
    "end": "1328220"
  },
  {
    "text": "So that's an important\nresult that we're going to be working with. ",
    "start": "1328220",
    "end": "1334049"
  },
  {
    "text": "So to build up to the\nsimplex algorithm here, these are the key\nconcepts that we",
    "start": "1334050",
    "end": "1339179"
  },
  {
    "text": "need in our toolkit to be\nable to construct this simplex algorithm. So what we've seen\nso far, we've seen",
    "start": "1339180",
    "end": "1345330"
  },
  {
    "text": "this idea of feasible sets,\nequality form, the first order necessary conditions, all that's\nreally left here in our toolkit",
    "start": "1345330",
    "end": "1351630"
  },
  {
    "text": "is this idea of\nvertex partitions. So that's what we're\ngoing to go into next.",
    "start": "1351630",
    "end": "1357150"
  },
  {
    "text": "So we've seen this idea\nof vertices already. Vertex partitions\nare just a way for us to be able to keep track of the\nindices that are in our x vector",
    "start": "1357150",
    "end": "1366750"
  },
  {
    "text": "as we move throughout\nthese different vertices. So that's all we're doing here. The important fact that we're\ngoing to be working with here",
    "start": "1366750",
    "end": "1373260"
  },
  {
    "text": "is that for our linear\nprograms inequality form, every vertex is going to be\nuniquely defined by n minus m",
    "start": "1373260",
    "end": "1380430"
  },
  {
    "text": "components of x equal to 0. I think when you see that just\nwritten up there like that,",
    "start": "1380430",
    "end": "1386010"
  },
  {
    "text": "you're like, OK, but\nwhy is that the case? So that's what we're\ngoing to go into now,",
    "start": "1386010",
    "end": "1391030"
  },
  {
    "text": "and I think the best way to\ndo that is through an example. So if we have this\nsimple example here, just",
    "start": "1391030",
    "end": "1396419"
  },
  {
    "text": "with two variables,\nso x1 and x2, we want to minimize\nx1 subject to this x1",
    "start": "1396420",
    "end": "1403350"
  },
  {
    "text": "plus x2 equal to 1 constraint. So what that looks like\nvisually in this x1, x2 space",
    "start": "1403350",
    "end": "1410040"
  },
  {
    "text": "is we just have this\nsingle constraint here, the single equality\nconstraint, so we know",
    "start": "1410040",
    "end": "1415620"
  },
  {
    "text": "that the optimal solution has to\nlie somewhere along this line, this x1 plus x2 equal to 1.",
    "start": "1415620",
    "end": "1421440"
  },
  {
    "text": "So if we look at the vertices\nhere and where they occur, we have one vertex here\nat this point, 0,1.",
    "start": "1421440",
    "end": "1429060"
  },
  {
    "text": "Notice that the first\ncomponent of x here is 0. The other vertex lies at this\npoint here at the 1,0 point.",
    "start": "1429060",
    "end": "1436780"
  },
  {
    "text": "Notice that the second component\nof x is 0 at this point. So in this simple example,\nwe just have two variables.",
    "start": "1436780",
    "end": "1444279"
  },
  {
    "text": "So n here is 2, m here, we just\nhave one equality constraint, so m is 1.",
    "start": "1444280",
    "end": "1450010"
  },
  {
    "text": "So we know n minus\nm is going to be 1, so each vertex is going\nto be defined by n minus m",
    "start": "1450010",
    "end": "1456010"
  },
  {
    "text": "components of x equal to 0. That's one way to look at this.",
    "start": "1456010",
    "end": "1461540"
  },
  {
    "text": "I think this is a simple\nvisual example that we can look at in two dimensions. The problems that we're going\nto be working with though,",
    "start": "1461540",
    "end": "1468073"
  },
  {
    "text": "have many higher dimensions. We could be working\nwith a problem with millions of variables,\nin which case, we're not going to be able to\nvisualize it like this.",
    "start": "1468073",
    "end": "1474920"
  },
  {
    "text": "So I think this\nis a nice example to get us started,\nbut I think the better",
    "start": "1474920",
    "end": "1481120"
  },
  {
    "text": "interpretation to have of this\nis through a linear algebra perspective. Yes. Can you just go over\nwhat [INAUDIBLE].",
    "start": "1481120",
    "end": "1487240"
  },
  {
    "text": "Yes, so m is the\ndimension of our x, so how many variables\nwe have in this problem.",
    "start": "1487240",
    "end": "1493309"
  },
  {
    "text": "So we have x1 and x2. So we have two\nvariables, which is n, and then m is the number\nof equality constraints",
    "start": "1493310",
    "end": "1500470"
  },
  {
    "text": "that we have. So here we have one\nequality constraint, which is x1 plus x2 equal to 1.",
    "start": "1500470",
    "end": "1507000"
  },
  {
    "text": "And we'll see that here in this\nlinear algebra interpretation. So this is another way to\nlook at the exact same fact",
    "start": "1507000",
    "end": "1513900"
  },
  {
    "text": "here that we're working with. So in this case, we've just\nwritten out ax equal to b.",
    "start": "1513900",
    "end": "1519450"
  },
  {
    "text": "In this case, we\nhave n equals 5. So we have five\nvariables, and we have three equality\nconstraints represented",
    "start": "1519450",
    "end": "1525389"
  },
  {
    "text": "by the rows of this a matrix. So now let's say, for example,\nthat the second and fifth",
    "start": "1525390",
    "end": "1533060"
  },
  {
    "text": "component of x Here are 0. So what happens when we do\nthis matrix multiplication is",
    "start": "1533060",
    "end": "1539480"
  },
  {
    "text": "we're going to have this\nfirst row of A multiplied by the vector of x here.",
    "start": "1539480",
    "end": "1545190"
  },
  {
    "text": "But notice that the second and\nfifth component are just going to be multiplied by those 0s so\nthat whole entire second column",
    "start": "1545190",
    "end": "1551960"
  },
  {
    "text": "and the whole entire fifth\ncolumn as we carry out this matrix multiplication are just\ngoing to be removed, basically. They're not contributing\nanything because they're just",
    "start": "1551960",
    "end": "1559190"
  },
  {
    "text": "multiplied by those 0s. So we can equivalently write\nthis same matrix multiplication",
    "start": "1559190",
    "end": "1564470"
  },
  {
    "text": "just in terms of the first,\nthird, and fourth columns of A.",
    "start": "1564470",
    "end": "1569549"
  },
  {
    "text": "And so what we've\nactually done here is we've removed n minus m\ncolumns out of our A matrix.",
    "start": "1569550",
    "end": "1576059"
  },
  {
    "text": "So in order to get a\nunique solution, which means, in this case, that this\nA matrix that we have left",
    "start": "1576060",
    "end": "1582560"
  },
  {
    "text": "would be invertible, so if\nA here, if this A leftover matrix is invertible,\nwe're going",
    "start": "1582560",
    "end": "1588000"
  },
  {
    "text": "to have a unique solution here. So I think it helps to see\nthis worked out a bit more.",
    "start": "1588000",
    "end": "1593095"
  },
  {
    "text": "But this is the idea\nthat we're getting to is sort of removing\nthese columns of A, and that will give\nus then hopefully",
    "start": "1593095",
    "end": "1599310"
  },
  {
    "text": "an invertible A matrix. So that's the direction\nthat we're heading, we'll see a bit more detail\nhere on this partition.",
    "start": "1599310",
    "end": "1607990"
  },
  {
    "text": "So to remove these\ncolumns of A, that's sort of what we're\nfocused on here, we're starting with\nour x variable here.",
    "start": "1607990",
    "end": "1615520"
  },
  {
    "text": "We're going to be looking at\nthe indices of our x variable. So we have n indices. So x1 is just the first\nvariable up to xn.",
    "start": "1615520",
    "end": "1623750"
  },
  {
    "text": "So the n-th indices\nthere, and we're just going to be keeping\ntrack of these indices. So we're going to\ndo this through--",
    "start": "1623750",
    "end": "1630310"
  },
  {
    "text": "what we're going to introduce\nhere is the basis set, and then we're going to\nintroduce the free variable set.",
    "start": "1630310",
    "end": "1636340"
  },
  {
    "text": "So just two different\nsets, and all we're going to be doing\nis basically tracking the components of our x.",
    "start": "1636340",
    "end": "1641690"
  },
  {
    "text": "So what is the basis set? The basis set,\nwhat this says here is just for an index\nin the basis, that",
    "start": "1641690",
    "end": "1648009"
  },
  {
    "text": "means that x of that\nindex is going to be greater than or equal to 0. So the xi-th component is going\nto be greater than or equal to 0",
    "start": "1648010",
    "end": "1655690"
  },
  {
    "text": "for it to be in the basis set. Similarly, for it to\nbe in the free set, we just have any\nindex in the free set",
    "start": "1655690",
    "end": "1662820"
  },
  {
    "text": "is defined by xi equal to 0. So we're saying the i-th\ncomponent of x is equal to 0.",
    "start": "1662820",
    "end": "1668500"
  },
  {
    "text": "So to make this a little\nmore concrete, just looking at that previous example that\nwe saw with that x vector here,",
    "start": "1668500",
    "end": "1676590"
  },
  {
    "text": "the basis set in this\ncase is just going to be 1, 3 and 4 because we know\nthat the free variable set,",
    "start": "1676590",
    "end": "1684240"
  },
  {
    "text": "the components of x that are\nequal to 0 is just 2 and 5. So it's just a way\nto-- we're just",
    "start": "1684240",
    "end": "1689730"
  },
  {
    "text": "partitioning up our x indices,\nand keeping track of them. So a way to keep track of this\ndenotion between this basis",
    "start": "1689730",
    "end": "1697950"
  },
  {
    "text": "and free set, one way I\nlike to think about it is just be for busy, so if\nyou're in the basis set,",
    "start": "1697950",
    "end": "1703559"
  },
  {
    "text": "you're busy. If you're in the free variable\nset, you're vacant or you're 0. So we typically call\nthem the basis and free,",
    "start": "1703560",
    "end": "1710799"
  },
  {
    "text": "but just another way to think\nabout it is busy and vacant. Yes. Are the vacant elements also\ngreater than or equal to 0?",
    "start": "1710800",
    "end": "1719080"
  },
  {
    "text": "[INAUDIBLE] 0. Yes yes, that is true. So you can have-- The question was, are the vacant\nelements also greater than",
    "start": "1719080",
    "end": "1727600"
  },
  {
    "text": "or equal to 0 since they are 0? So yes, that is true. You can actually have components\nin your basis set that are 0,",
    "start": "1727600",
    "end": "1736640"
  },
  {
    "text": "but the free variable\nset is uniquely defined, meaning all of those\ncomponents in the free set",
    "start": "1736640",
    "end": "1742420"
  },
  {
    "text": "are going to be 0. But you could have components\nin your basis that are also 0.",
    "start": "1742420",
    "end": "1747750"
  },
  {
    "text": "[INAUDIBLE] subset. The right side is a strict\nsubset of the left side.",
    "start": "1747750",
    "end": "1755210"
  },
  {
    "text": "I don't know if I would\nthink about it as a subset, but just that you know\nthat in your free set,",
    "start": "1755210",
    "end": "1760870"
  },
  {
    "text": "all of the components will be 0. I think it will become\nmaybe clearer as we",
    "start": "1760870",
    "end": "1766360"
  },
  {
    "text": "work through this example here. ",
    "start": "1766360",
    "end": "1772020"
  },
  {
    "text": "So going back to that example\nwe saw before here with the A",
    "start": "1772020",
    "end": "1778080"
  },
  {
    "text": "matrix we were\nlooking at, so we can write this Ax equal to b\nconstraint in terms of just",
    "start": "1778080",
    "end": "1783120"
  },
  {
    "text": "the basis variables here. So what we saw before we had\nthis Ax on the left side,",
    "start": "1783120",
    "end": "1789660"
  },
  {
    "text": "and then the A basis term\nhere is just plucking out the columns of A corresponding\nto the basis indices,",
    "start": "1789660",
    "end": "1796330"
  },
  {
    "text": "so that's exactly\nwhat we did before. And x basis is just\nplucking out the components of x that are in our basis.",
    "start": "1796330",
    "end": "1802810"
  },
  {
    "text": "And so that equality is\nstill a strict equality that Ax is equal\nto A basis x basis.",
    "start": "1802810",
    "end": "1810860"
  },
  {
    "text": "So now sort of seeing\nthat point from before, that if this a\nbasis is invertible,",
    "start": "1810860",
    "end": "1817580"
  },
  {
    "text": "we're going to get a\nunique solution here, and that unique\nsolution, if it exists, is going to be a vertex point.",
    "start": "1817580",
    "end": "1824034"
  },
  {
    "text": "So that's linear\nalgebra interpretation of removing n minus m columns\nor n minus m components of x",
    "start": "1824035",
    "end": "1832039"
  },
  {
    "text": "from this and setting\nthem equal to 0, then is going to uniquely\ndefine this vertex point.",
    "start": "1832040",
    "end": "1837830"
  },
  {
    "text": "So that's the linear\nalgebra perspective on that same problem.",
    "start": "1837830",
    "end": "1844250"
  },
  {
    "text": "So it's important to\nkeep in mind here, though, sort of a subtlety\nthat every vertex is going",
    "start": "1844250",
    "end": "1850889"
  },
  {
    "text": "to be defined or has an\nassociated partition with it, but not every partition\nthat you get necessarily",
    "start": "1850890",
    "end": "1857670"
  },
  {
    "text": "corresponds to a vertex. So I think it helps to see an\nexample of when this would not",
    "start": "1857670",
    "end": "1863220"
  },
  {
    "text": "hold here. So if we had the following\nequality that A or A matrix",
    "start": "1863220",
    "end": "1871500"
  },
  {
    "text": "was 1 2 0 and 1 2 1, and then\nour x has three components here,",
    "start": "1871500",
    "end": "1881520"
  },
  {
    "text": "and we're saying\nthis is equal to 1 1. So now say that someone\ncomes to us and says,",
    "start": "1881520",
    "end": "1887820"
  },
  {
    "text": "OK, the basis here\nis going to be-- your basis is 1 2. ",
    "start": "1887820",
    "end": "1894900"
  },
  {
    "text": "So if we rewrite this now\nin terms of A basis and x basis, what we end\nup with is 1 2, 1 2,",
    "start": "1894900",
    "end": "1904290"
  },
  {
    "text": "and then multiplied\nby x1 and x2. So just taking the elements\nfrom our basis here,",
    "start": "1904290",
    "end": "1911880"
  },
  {
    "text": "and we're saying\nthis is equal to 1 1. But notice what we have here.",
    "start": "1911880",
    "end": "1917289"
  },
  {
    "text": "This A basis that we\nhave is not invertible. It's not full rank. So we cannot invert this and\nthis is not going to have",
    "start": "1917290",
    "end": "1923880"
  },
  {
    "text": "a unique solution. So just because\nsomebody gives us a partition here with\nthis basis does not",
    "start": "1923880",
    "end": "1930180"
  },
  {
    "text": "mean that it corresponds to\na unique solution at a vertex point. The other way is true, though.",
    "start": "1930180",
    "end": "1935830"
  },
  {
    "text": "If we do have a\nvertex point, then it will be defined by\nsome basis partition",
    "start": "1935830",
    "end": "1941850"
  },
  {
    "text": "and that will have a\nunique solution here. But just because somebody\ngives us this partition doesn't mean it holds.",
    "start": "1941850",
    "end": "1947650"
  },
  {
    "text": "So it's a one-way street\nhere, not a two-way street. Yes. So when you write B equals\nthe set of numbers 1, 2,",
    "start": "1947650",
    "end": "1954930"
  },
  {
    "text": "do you mean that your bases\nare your standard bases 1 0 0 [INAUDIBLE]?",
    "start": "1954930",
    "end": "1961380"
  },
  {
    "text": "So the question was, is the\nbasis like the standard basis corresponding to these\nelement vectors--",
    "start": "1961380",
    "end": "1968190"
  },
  {
    "text": "[INAUDIBLE] basis. Yeah, so these are\njust the indices.",
    "start": "1968190",
    "end": "1973410"
  },
  {
    "text": "You can think about them as\nthe index components of x. So if I say the\nbasis is 1 and 2,",
    "start": "1973410",
    "end": "1978500"
  },
  {
    "text": "that means the\nbasis is x1 x2 here. So you're just indexing\ninto your x vector.",
    "start": "1978500",
    "end": "1983665"
  },
  {
    "start": "1983665",
    "end": "1993943"
  },
  {
    "text": "So now we just want to start\nconstructing some of the code that we're going to be using\nas we build up the simplex",
    "start": "1993943",
    "end": "1999000"
  },
  {
    "text": "algorithm here. So this is the examples\nfrom the book here, and we're working in Julia, but\nyou could just as well do this",
    "start": "1999000",
    "end": "2006890"
  },
  {
    "text": "in any other\nlanguage you wanted. I think all of the\ncode throughout, this is pretty high level, so\nyou could easily translate this",
    "start": "2006890",
    "end": "2014360"
  },
  {
    "text": "to anything else you wanted. But here we're just setting\nup the linear program here",
    "start": "2014360",
    "end": "2020450"
  },
  {
    "text": "that's just defined by our A\nmatrix, our b and c vectors here. And then we're\ngoing to introduce",
    "start": "2020450",
    "end": "2026300"
  },
  {
    "text": "this get vertex function,\nwhich is going to take in-- it's going to take\nin a basis here,",
    "start": "2026300",
    "end": "2032130"
  },
  {
    "text": "which you could think about\nas just a list of integers that we're passing in. And then the linear program here\nis just what's defined up here.",
    "start": "2032130",
    "end": "2039770"
  },
  {
    "text": "So the first thing\nwe're going to do is we're just going to read\nin the A, b and c, that's defined in our linear program.",
    "start": "2039770",
    "end": "2045860"
  },
  {
    "text": "We're going to the sort\nindices in our basis because maybe somebody\npassed them in and they're not already sorted.",
    "start": "2045860",
    "end": "2051570"
  },
  {
    "text": "So we're first going\nto those indices. And then we're going\nto just extract.",
    "start": "2051570",
    "end": "2056849"
  },
  {
    "text": "This is just taking the\ncolumns of A corresponding to our b indices. So we're just pulling\nout the columns of A",
    "start": "2056850",
    "end": "2062638"
  },
  {
    "text": "that are in our basis, and\nputting those in A basis. And now we're just going\nto solve for x basis here.",
    "start": "2062639",
    "end": "2068667"
  },
  {
    "text": "So we're just going to do this-- this is just Ab inverse times b. So that's exactly\nwhat we saw before.",
    "start": "2068667",
    "end": "2074109"
  },
  {
    "text": "We're just solving\nfor x basis there. And now we're just going to\ninitialize x to be all 0s.",
    "start": "2074110",
    "end": "2081370"
  },
  {
    "text": "So there's n components\nhere because there's n components in c. So it's just n 0s that we\nhave, and now we just know",
    "start": "2081370",
    "end": "2089340"
  },
  {
    "text": "the non-zero ones, and I\nthink this sort of gets to your question earlier is that\nthe non-zero basis components",
    "start": "2089340",
    "end": "2095580"
  },
  {
    "text": "here are going to just be\nfilled in with whatever their corresponding values were\nfrom solving that matrix inverse",
    "start": "2095580",
    "end": "2101460"
  },
  {
    "text": "above. And then we're going to return\nthat x vector that we get. So this is just simply\ntaking our linear program",
    "start": "2101460",
    "end": "2108900"
  },
  {
    "text": "that we've defined, getting\nthe vertex associated with it from our partition.",
    "start": "2108900",
    "end": "2114090"
  },
  {
    "text": "And we'll come back to this\nfunction later as we build up. So now we've sort of seen\nall of the different tools",
    "start": "2114090",
    "end": "2120270"
  },
  {
    "text": "that we need in our\ntool kit to work up to the simplex algorithm. So now we're going to transition\ninto starting to build",
    "start": "2120270",
    "end": "2128490"
  },
  {
    "text": "the simplex algorithm here. And the simplex\nalgorithm is guaranteed, so it's one way to\nsolve a linear program,",
    "start": "2128490",
    "end": "2135540"
  },
  {
    "text": "and it's guaranteed to solve\nany feasible and bounded linear program. And so how the simplex algorithm\nworks at the highest level,",
    "start": "2135540",
    "end": "2144240"
  },
  {
    "text": "it's basically just moving\nbetween these vertices in the feasible set,\nand at each vertice,",
    "start": "2144240",
    "end": "2149940"
  },
  {
    "text": "it's checking the first\norder necessary conditions, and it's saying, do\nI satisfy all four of the first order\nnecessary conditions?",
    "start": "2149940",
    "end": "2156310"
  },
  {
    "text": "No, then I'm going to\nmove to a new vertex. If it's yes, then I know I\nfound the global optimal point,",
    "start": "2156310",
    "end": "2161700"
  },
  {
    "text": "and it's at that point\nthat I'm currently at. So we're just moving between\nthese vertices in the feasible set.",
    "start": "2161700",
    "end": "2167200"
  },
  {
    "text": "And as we move between\nthose vertices, we're going to\nuse our partition, so our basis and free variables\nthat sort of tracking,",
    "start": "2167200",
    "end": "2174240"
  },
  {
    "text": "what vertex am I at right now? And that's basically\nall we're doing. So as we go into\nthe details here,",
    "start": "2174240",
    "end": "2180520"
  },
  {
    "text": "don't lose sight of\nthat high level picture that we're just\nall we're doing is sort of storing\nthese partitions,",
    "start": "2180520",
    "end": "2186190"
  },
  {
    "text": "and we're going to\nbe moving indices in and out of our partition. That's all that's going on here. ",
    "start": "2186190",
    "end": "2194050"
  },
  {
    "text": "So simplex algorithm,\nthere's two phases to it. There's phase 1, which is\nthe initialization phase, and phase 2 is the\noptimization phase.",
    "start": "2194050",
    "end": "2201070"
  },
  {
    "text": "So in the initialization\nphase, we're focused on finding a starting\ninitial partition to work with.",
    "start": "2201070",
    "end": "2207550"
  },
  {
    "text": "From there, we go into\nthe optimization phase, which is how do we now actually\nfind the optimal vertex",
    "start": "2207550",
    "end": "2212980"
  },
  {
    "text": "and do that movement\nbetween vertices? And so we're going\nto start with phase 2",
    "start": "2212980",
    "end": "2218470"
  },
  {
    "text": "here because that's actually\nwhere the bulk of this algorithm is, is inside phase\n2, and then we're going to come back to\nphase 1 and talk about, how",
    "start": "2218470",
    "end": "2225369"
  },
  {
    "text": "do we initialize the algorithm. So starting with phase 2,\nthe optimization phase,",
    "start": "2225370",
    "end": "2232119"
  },
  {
    "text": "what we're focused\non here is we just want to move between vertices.",
    "start": "2232120",
    "end": "2237800"
  },
  {
    "text": "So we want to move\nbetween x and x prime. And we know that as\nwe do this movement, we have to satisfy\nAx prime equal to b.",
    "start": "2237800",
    "end": "2245830"
  },
  {
    "text": "So that has to occur. We're assuming that we're\nstarting with some partition",
    "start": "2245830",
    "end": "2251050"
  },
  {
    "text": "given to us. How do we get that. Partition is going to be part of\nphase one, which we'll come back to, but for now, we're assuming\nwe have some partition.",
    "start": "2251050",
    "end": "2258430"
  },
  {
    "text": "So all the optimization\nphase is we're just choosing an entering\nindex and a leaving index,",
    "start": "2258430",
    "end": "2264760"
  },
  {
    "text": "and we're just going\nto do this swap. We're just swapping the\nentering with the leaving index.",
    "start": "2264760",
    "end": "2269930"
  },
  {
    "text": "So we're just going to\ntrade between our basis and free variables. So one index is going to come\nover from our free variables,",
    "start": "2269930",
    "end": "2276410"
  },
  {
    "text": "one index is going to\nleave from our basis. It's just a trade of indices. That's all this\noptimization phase is.",
    "start": "2276410",
    "end": "2283233"
  },
  {
    "text": "But now we're going\nto talk about, how do we actually choose this\nindex q, this entering index q,",
    "start": "2283233",
    "end": "2289490"
  },
  {
    "text": "and how do we choose\nthe leaving index p? And so that goes back to our\nfirst order necessary conditions",
    "start": "2289490",
    "end": "2295445"
  },
  {
    "text": "here. ",
    "start": "2295445",
    "end": "2304380"
  },
  {
    "text": "So we're going to start with\nthe stationarity condition and we're just going to rewrite\nit in terms of our basis",
    "start": "2304380",
    "end": "2309750"
  },
  {
    "text": "variables. So we had our stationarity\ncondition as A transpose lambda plus mu equal to c.",
    "start": "2309750",
    "end": "2317339"
  },
  {
    "text": "So we can just rewrite this\nnow in terms of our partitions here where we have A\ntranspose basis lambda",
    "start": "2317340",
    "end": "2326970"
  },
  {
    "text": "plus mu basis equal to c basis. So all we've done is\njust sort of access",
    "start": "2326970",
    "end": "2333450"
  },
  {
    "text": "the specific components\nfor the basis partition. We can do the same thing\nfor the free variables.",
    "start": "2333450",
    "end": "2339656"
  },
  {
    "start": "2339656",
    "end": "2345920"
  },
  {
    "text": "So nothing crazy here. We've just rewritten\nthis in terms of the different\ncomponents there.",
    "start": "2345920",
    "end": "2353180"
  },
  {
    "text": "So what we know now from\ncomplementary slackness is we know that mu\nb, so for our basis",
    "start": "2353180",
    "end": "2359690"
  },
  {
    "text": "here, we know that\nthis will be, we can choose it to\nbe 0 for our basis.",
    "start": "2359690",
    "end": "2365370"
  },
  {
    "text": "So we have mu b 0 from\ncomplementary slackness, and so what we can then do\nis solve for lambda here.",
    "start": "2365370",
    "end": "2371760"
  },
  {
    "text": "So if we just basically cancel\nthis out here and then solve for lambda from\nthis equation, we're going to get lambda equal to A\nbasis inverse transpose c basis.",
    "start": "2371760",
    "end": "2383630"
  },
  {
    "text": "And similarly, we could solve\nfor mu of the free variables by just moving this over.",
    "start": "2383630",
    "end": "2389550"
  },
  {
    "text": "So the good news here is\nthat given some partition, we can solve for lambda and mu.",
    "start": "2389550",
    "end": "2396080"
  },
  {
    "text": "So this is good news\nbecause we saw earlier that if we could solve for\nour Lagrange multipliers,",
    "start": "2396080",
    "end": "2401330"
  },
  {
    "text": "that allows us to\ncheck the first order necessary conditions. So from here, what\nwe want to do is",
    "start": "2401330",
    "end": "2409430"
  },
  {
    "text": "we want to get back to this\nidea of how do we transition between x to x prime?",
    "start": "2409430",
    "end": "2415730"
  },
  {
    "text": "That's the question\nthat we have here. And so to think about this,\nwhat we're going to introduce",
    "start": "2415730",
    "end": "2422359"
  },
  {
    "text": "is this idea of x\nbasis prime, and we're going to break this\ndown what this means.",
    "start": "2422360",
    "end": "2428520"
  },
  {
    "text": "So if we currently at some\nvertex point x1 x2 x3,",
    "start": "2428520",
    "end": "2433610"
  },
  {
    "text": "let's call it, the actual\ndimension here doesn't matter. I'm just giving us a\nconcrete example here,",
    "start": "2433610",
    "end": "2439220"
  },
  {
    "text": "and we're going to\nmove to x prime here, which is x1 prime, x2\nprime, x3 prime and say",
    "start": "2439220",
    "end": "2447880"
  },
  {
    "text": "that for this point that\nwe were at, our basis-- we had a specific basis here\naccessing the components of x.",
    "start": "2447880",
    "end": "2457000"
  },
  {
    "text": "So what it means to have x basis\nprime, where x prime basis is",
    "start": "2457000",
    "end": "2462580"
  },
  {
    "text": "that we're looking at\nthis new x prime point, but using the old basis. So using this basis\nhere for our old point.",
    "start": "2462580",
    "end": "2469305"
  },
  {
    "text": "And what we know\nis that we're going to have this swap occur between\nour basis and our free set",
    "start": "2469305",
    "end": "2476980"
  },
  {
    "text": "where we know that q-- we're saying that\nthe q indice this is going to come into\nour basis, and the p",
    "start": "2476980",
    "end": "2484450"
  },
  {
    "text": "indice C is going\nto leave our basis. So we have this swap\nthat's occurring. So what this means when we're\nlooking at this new point",
    "start": "2484450",
    "end": "2492010"
  },
  {
    "text": "x prime using the\nold basis, this means that the p-th\ncomponent of this",
    "start": "2492010",
    "end": "2497619"
  },
  {
    "text": "is going to equal 0 because\nthat p-th component is leaving our basis, so it's going into\nthe free variables, which",
    "start": "2497620",
    "end": "2505360"
  },
  {
    "text": "means here that this x basis\nprime, the p-th component is 0 because it's now\nin the free variables.",
    "start": "2505360",
    "end": "2512849"
  },
  {
    "text": "So that's the idea we\nwant to keep in mind. All we're doing\nhere is basically some indices accounting,\njust tracking",
    "start": "2512850",
    "end": "2518892"
  },
  {
    "text": "where our indices are going. ",
    "start": "2518893",
    "end": "2524360"
  },
  {
    "text": "So with that idea, we can\nthen rewrite our constraints.",
    "start": "2524360",
    "end": "2531440"
  },
  {
    "text": "So we saw that we\nhad this constraint that Ax was equal to b.",
    "start": "2531440",
    "end": "2538380"
  },
  {
    "text": "And we also know that\nAx prime has to satisfy this constraint as well. So we also have to have\nAx prime equal to b.",
    "start": "2538380",
    "end": "2546440"
  },
  {
    "text": "And then lastly, we\nsaw that Ax equal to b was also equal\nto A basis, x basis.",
    "start": "2546440",
    "end": "2553890"
  },
  {
    "text": "So that's just\nsort of summarizing everything we've seen so far. Now what we want\nto do is we want",
    "start": "2553890",
    "end": "2560720"
  },
  {
    "text": "to be able to write this\nequality in terms of our p and q indices. So we can track\nwhere they're moving.",
    "start": "2560720",
    "end": "2567240"
  },
  {
    "text": "So we're just going to\nrewrite this now as Ax prime equal to A basis, x basis.",
    "start": "2567240",
    "end": "2575040"
  },
  {
    "text": "So that's just this line here. And now this is going to be\nA basis times x basis prime.",
    "start": "2575040",
    "end": "2582420"
  },
  {
    "text": "So this is accounting\nfor the fact that p is leaving,\nso it's sort of just",
    "start": "2582420",
    "end": "2587810"
  },
  {
    "text": "like a conservation of mass\ntype of term here where we have what's leaving the system is\nthis p index, What's entering",
    "start": "2587810",
    "end": "2595310"
  },
  {
    "text": "the system is the new q index. So this is the q-th column\nof A times x prime q.",
    "start": "2595310",
    "end": "2603589"
  },
  {
    "text": "So this is what's\nleaving our basis. This is what's entering now.",
    "start": "2603590",
    "end": "2608630"
  },
  {
    "text": "So we, we're just keeping\ntrack of leaving, entering. We know that the p-th component\nhere is 0, so that's leaving.",
    "start": "2608630",
    "end": "2615870"
  },
  {
    "text": "We have to keep track of now\nwhat's entering through q. So this is just rewriting this\nAx prime equality in this form.",
    "start": "2615870",
    "end": "2623340"
  },
  {
    "text": "So now what we can do here is\nwe can solve for x basis Prime because that's what\nwe're interested in.",
    "start": "2623340",
    "end": "2629369"
  },
  {
    "text": "So if we rewrite\nthis now in terms of x basis prime,\nwhat we get is we're",
    "start": "2629370",
    "end": "2635789"
  },
  {
    "text": "going to have x basis minus\nA basis inverse m q xq prime.",
    "start": "2635790",
    "end": "2646710"
  },
  {
    "text": "We basically just took the\ninverse of this A basis and then move this\nover to the other side,",
    "start": "2646710",
    "end": "2652650"
  },
  {
    "text": "and we get this\nfor x basis prime. ",
    "start": "2652650",
    "end": "2657940"
  },
  {
    "text": "We're getting somewhere\nhere, but we still don't know xq prime. So how do we solve for xq prime?",
    "start": "2657940",
    "end": "2665640"
  },
  {
    "text": "So in order to do\nthat, we're going to basically do the\nsame exact thing",
    "start": "2665640",
    "end": "2671280"
  },
  {
    "text": "of rewriting the constraint. We're just going to now\ndo it with the objective. So doing this with the objective\nnow, I'll come over here,",
    "start": "2671280",
    "end": "2680460"
  },
  {
    "text": "so we can now look at\nc transpose x prime. So that's the objective\nof our new point",
    "start": "2680460",
    "end": "2687510"
  },
  {
    "text": "that we're going to be at. So we can equivalently\nwrite this just like what we saw as c basis\ntranspose x basis prime.",
    "start": "2687510",
    "end": "2697030"
  },
  {
    "text": "So we have what's leaving\nhere, now what's entering is going to be c\ntranspose times,",
    "start": "2697030",
    "end": "2704170"
  },
  {
    "text": "and this is q times xq prime. So this is entering now,\nentering our objective.",
    "start": "2704170",
    "end": "2710170"
  },
  {
    "text": "This is accounting for\nwhat's leaving the objective. So just the same exact\nthing we did over there, now",
    "start": "2710170",
    "end": "2715380"
  },
  {
    "text": "applied to our objective. And so what we\ncan do here is now we can simplify this\nbecause we solve for x basis",
    "start": "2715380",
    "end": "2722790"
  },
  {
    "text": "prime on that\nboard, so if we just substitute this in, we're going\nto get c basis transpose times",
    "start": "2722790",
    "end": "2730720"
  },
  {
    "text": "x basis minus A basis\ninverse Aq, xq prime plus cq.",
    "start": "2730720",
    "end": "2742119"
  },
  {
    "text": "This is just cq\nsince it's a scalar, so there's no transpose\nhere, cq, xq prime.",
    "start": "2742120",
    "end": "2749500"
  },
  {
    "text": "So we just plugged\nin x basis Prime. That's all we did in this step. So now we can just go through\nand start simplifying this.",
    "start": "2749500",
    "end": "2755450"
  },
  {
    "text": "All right. So it's going to give us\nc basis transpose x basis.",
    "start": "2755450",
    "end": "2760630"
  },
  {
    "text": "Notice the c basis transpose. X basis is actually just-- this is just c\ntranspose x because we",
    "start": "2760630",
    "end": "2768310"
  },
  {
    "text": "saw before you can rewrite\nit in terms of the basis or in terms of the\nregular variables, because anything not\nin the basis is just 0.",
    "start": "2768310",
    "end": "2776450"
  },
  {
    "text": "So that's just this term\nthat we've simplified. Then we're going to have\nminus c basis transpose,",
    "start": "2776450",
    "end": "2783980"
  },
  {
    "text": "A basis inverse, Aq xq\nprime plus cq, xq prime.",
    "start": "2783980",
    "end": "2792950"
  },
  {
    "text": "So now recall from\nwhat we saw earlier that we could solve for lambda,\nand when we solve for lambda,",
    "start": "2792950",
    "end": "2801290"
  },
  {
    "text": "we found that lambda was equal\nto A basis inverse transpose c",
    "start": "2801290",
    "end": "2807110"
  },
  {
    "text": "basis. So this A basis inverse\ntranspose c basis",
    "start": "2807110",
    "end": "2812450"
  },
  {
    "text": "is just this term right here\nwith the transpose applied. So this is just-- this term here is\njust lambda transpose.",
    "start": "2812450",
    "end": "2820910"
  },
  {
    "text": "So we can just make\nthat substitution now. And so now simplifying\nthis again, we're going to get c transpose\nx minus lambda transpose Aq, xq",
    "start": "2820910",
    "end": "2834529"
  },
  {
    "text": "prime plus cq, xq prime.",
    "start": "2834530",
    "end": "2839910"
  },
  {
    "text": "we're getting somewhere here. We're getting somewhere. So the last simplification\nthat we can make",
    "start": "2839910",
    "end": "2846270"
  },
  {
    "text": "is recall that we saw\nfrom before, I erased-- no, it's up here.",
    "start": "2846270",
    "end": "2852099"
  },
  {
    "text": "So we saw from this\nhere that we have this in terms of the free variables.",
    "start": "2852100",
    "end": "2857500"
  },
  {
    "text": "Well, q is one of\nour free variables. So instead of just writing this\nas all of the indices here,",
    "start": "2857500",
    "end": "2865650"
  },
  {
    "text": "we can rewrite it as just-- I'll write it over here. So we're just writing\nthat equation now,",
    "start": "2865650",
    "end": "2872190"
  },
  {
    "text": "but it's in terms\nof just the q index. ",
    "start": "2872190",
    "end": "2882370"
  },
  {
    "text": "So we've just rewritten that\nsame equation, but now just with the q single variable\nhere or single index.",
    "start": "2882370",
    "end": "2890560"
  },
  {
    "text": "So if we solve for\nthis term right here, we're going to get Aq transpose\nlambda equals cq minus mu q.",
    "start": "2890560",
    "end": "2903700"
  },
  {
    "text": "So this Aq transpose lambda,\nthis is just a scalar term here.",
    "start": "2903700",
    "end": "2909109"
  },
  {
    "text": "So whichever way we do this\ntranspose doesn't actually matter because-- so these two basically are\nequivalent since this is just",
    "start": "2909110",
    "end": "2915940"
  },
  {
    "text": "going to be a scalar here. So A transpose lambda\nor lambda transpose Aq",
    "start": "2915940",
    "end": "2921190"
  },
  {
    "text": "they're the same thing. So we can just\nsubstitute this in now. And so simplifying\nagain, we're going",
    "start": "2921190",
    "end": "2928210"
  },
  {
    "text": "to get this c transpose x\nprime minus c transpose x,",
    "start": "2928210",
    "end": "2933260"
  },
  {
    "text": "so we're just moving this\nterm over in this step. This is equal to\nwhat we have here.",
    "start": "2933260",
    "end": "2941090"
  },
  {
    "text": "This is just going to\nbe cq times xq prime,",
    "start": "2941090",
    "end": "2949970"
  },
  {
    "text": "and then this should be\na negative cq because we have this negative sign here.",
    "start": "2949970",
    "end": "2955290"
  },
  {
    "text": "So negative cq, xq prime\nplus now mu q, xq prime,",
    "start": "2955290",
    "end": "2963450"
  },
  {
    "text": "and then finally, we have this\nterm here, plus cq xq prime.",
    "start": "2963450",
    "end": "2969589"
  },
  {
    "text": "We're almost there. Now notice that these two\nterms are going to cancel out. So this will cancel\nout with this,",
    "start": "2969590",
    "end": "2976500"
  },
  {
    "text": "and now we have the final result\nof c transpose x prime minus c",
    "start": "2976500",
    "end": "2981890"
  },
  {
    "text": "transpose x equal\nto mu q xq prime.",
    "start": "2981890",
    "end": "2987334"
  },
  {
    "text": "So if you recall, when\nwe started this journey, we were trying to\nfind what x prime was.",
    "start": "2987334",
    "end": "2994880"
  },
  {
    "text": "How do we choose this x prime? And so this equation\nhere is very important because it's going\nto guide us in how we",
    "start": "2994880",
    "end": "3001990"
  },
  {
    "text": "determine what this x prime is. So to see the importance\nof this equation,",
    "start": "3001990",
    "end": "3008230"
  },
  {
    "text": "we'll switch back\nto the slides here.  And so this is the result\nthat we ended up with here.",
    "start": "3008230",
    "end": "3015890"
  },
  {
    "text": "Notice what this is telling us. This is telling us that the\nobjective function here, when we move between\nx and x prime,",
    "start": "3015890",
    "end": "3021950"
  },
  {
    "text": "the objective function is going\nto decrease only if this mu q term is negative.",
    "start": "3021950",
    "end": "3027660"
  },
  {
    "text": "And we want to. That's what we want to do. We want to decrease\nour objective. We're trying to\nminimize our objective.",
    "start": "3027660",
    "end": "3033680"
  },
  {
    "text": "So we're looking for negative\nmu q components here. So in order to move towards\noptimality, in order",
    "start": "3033680",
    "end": "3041450"
  },
  {
    "text": "to keep sort of improving\nour objective here, we need to choose an index\nfrom our free indices",
    "start": "3041450",
    "end": "3048140"
  },
  {
    "text": "such that mu q is negative. So we're basically just looking\nfor these negative mu q terms.",
    "start": "3048140",
    "end": "3054349"
  },
  {
    "text": "If all of the components\nof mu in our free indices-- so if all of those components\nof mu are non negative,",
    "start": "3054350",
    "end": "3061520"
  },
  {
    "text": "that means that we\nfound a global optimum because we are satisfying\ndual feasibility and complementary slackness.",
    "start": "3061520",
    "end": "3067740"
  },
  {
    "text": "So we're satisfying\nall of our first order necessary conditions. So all we have to do is look\nat, are all of mu v positive",
    "start": "3067740",
    "end": "3074310"
  },
  {
    "text": "or are they all non-negative? And if that's the case, then\nwe know we're at an optimum.",
    "start": "3074310",
    "end": "3079810"
  },
  {
    "text": "So this is why it's an\nimportant result here. This doesn't tell us,\nthough, exactly how",
    "start": "3079810",
    "end": "3085740"
  },
  {
    "text": "we choose our q index. It just sort of gives\nus some guidance. And so there's a few\ndifferent entering heuristics",
    "start": "3085740",
    "end": "3093270"
  },
  {
    "text": "that you can use\nto choose this q. So the one that we're\ngoing to be using today is the greedy\nheuristic, which is just",
    "start": "3093270",
    "end": "3100410"
  },
  {
    "text": "choosing the q that maximally\nreduces our objective. There's other heuristics\nout there as well,",
    "start": "3100410",
    "end": "3106230"
  },
  {
    "text": "and you can also use a\ncombination of these heuristics. So this is just\nsomething to be aware of.",
    "start": "3106230",
    "end": "3111299"
  },
  {
    "text": "What we're going\nto be using today is just the greedy\nheuristic here.",
    "start": "3111300",
    "end": "3117359"
  },
  {
    "text": "So first recall what we're\ndoing here in this phase 2 of the optimization. We're first choosing\nthe entering index q,",
    "start": "3117360",
    "end": "3124420"
  },
  {
    "text": "we're then solving\nfor the leaving index p that corresponds with that q. So we have one last step here.",
    "start": "3124420",
    "end": "3132039"
  },
  {
    "text": "We now know how we're going\nto choose our x prime, but now we need to know\nhow are we choosing our p.",
    "start": "3132040",
    "end": "3138930"
  },
  {
    "text": "So I'm going to\nerase this part here. ",
    "start": "3138930",
    "end": "3149860"
  },
  {
    "text": "So just rewriting what's\ncovered up on this board is we had that x basis Prime was\nequal to x basis minus A basis",
    "start": "3149860",
    "end": "3161680"
  },
  {
    "text": "inverse Aq xq prime.",
    "start": "3161680",
    "end": "3167589"
  },
  {
    "text": "Now, we need to know this\nin terms of the p index that we're working with.",
    "start": "3167590",
    "end": "3172930"
  },
  {
    "text": "But remember, what we saw\nbefore was that x basis prime, the p component of\nthat was 0 because this",
    "start": "3172930",
    "end": "3180880"
  },
  {
    "text": "is looking at our new x prime\npoint with our old basis, meaning the leaving\nindex p has to be 0.",
    "start": "3180880",
    "end": "3187930"
  },
  {
    "text": "So we can just rewrite this now. This is going to be x basis in\nterms of p minus A basis inverse",
    "start": "3187930",
    "end": "3197740"
  },
  {
    "text": "Aq, the p component of\nthat times xq prime.",
    "start": "3197740",
    "end": "3203860"
  },
  {
    "text": "So this allows us to\nnow solve for xq prime. So if we rewrite this now\nfor xq prime, what we get",
    "start": "3203860",
    "end": "3212090"
  },
  {
    "text": "is that xq prime is equal\nto x basis p divided",
    "start": "3212090",
    "end": "3218000"
  },
  {
    "text": "by A basis inverse Aq, and\nthe p-th component of that.",
    "start": "3218000",
    "end": "3226520"
  },
  {
    "text": "So notice what's going on here.  In the case where xq\nprime is equal to 0,",
    "start": "3226520",
    "end": "3233900"
  },
  {
    "text": "that means that this is 0,\nso this whole term is gone. We just have that the new point\nwould be equal to the old point.",
    "start": "3233900",
    "end": "3241170"
  },
  {
    "text": "That's all we're saying\nin this equation. As we start increasing\nxq prime, we're",
    "start": "3241170",
    "end": "3246230"
  },
  {
    "text": "going to increase xq prime until\none of these new components becomes 0.",
    "start": "3246230",
    "end": "3251850"
  },
  {
    "text": "So until p leaves the basis. That's why it's\nthe leaving index.",
    "start": "3251850",
    "end": "3258290"
  },
  {
    "text": "So this right here is\ncalled the minimum ratio. So we're using the\nminimum ratio test here with this p-- with\nthe p components here.",
    "start": "3258290",
    "end": "3266070"
  },
  {
    "text": "So we're basically going\nto increase xq prime up until the first component\np leaves the basis.",
    "start": "3266070",
    "end": "3273359"
  },
  {
    "text": "So we're just going to\nkeep increasing xq prime until we get\nsomething that leaves.",
    "start": "3273360",
    "end": "3278810"
  },
  {
    "text": "So roughly how the algorithm\nis going to work here is we're going to have\nthese two for loops.",
    "start": "3278810",
    "end": "3284720"
  },
  {
    "text": "On the outer for loop,\nwe're going to have-- we're going over all of the\nqs in the free variables.",
    "start": "3284720",
    "end": "3290628"
  },
  {
    "text": "So we're going to\niterate through all of the q in the free variables. For each of those q, we're going\nto look at the p in the basis.",
    "start": "3290628",
    "end": "3299400"
  },
  {
    "text": "So for the first component\nof q in our free, we're going to look at now\nthe first component of p.",
    "start": "3299400",
    "end": "3305940"
  },
  {
    "text": "We're going to\ncompute this ratio as we go through all of\nthese different p components, and we're going to\nselect the minimum ratio.",
    "start": "3305940",
    "end": "3313290"
  },
  {
    "text": "Why the minimum? That's because that's the\nfirst one that's going to give us a leaving index. So we're going through all of\nthe qs in the outer for loop,",
    "start": "3313290",
    "end": "3321220"
  },
  {
    "text": "then on the inner for loop,\nwe're looking for that pq pair here.",
    "start": "3321220",
    "end": "3326460"
  },
  {
    "text": "Once we find it, we\nthen store that pq pair, and then we look at\nnow our objective",
    "start": "3326460",
    "end": "3332520"
  },
  {
    "text": "over here, which q is giving\nus the maximum decrement. So we store all these pq pairs,\nand then for each of those pq",
    "start": "3332520",
    "end": "3341400"
  },
  {
    "text": "pairs, we're computing\nthe objective, taking the one that gives\nus the maximum decrement.",
    "start": "3341400",
    "end": "3346500"
  },
  {
    "text": "And we're going to see\nthis all in the code, but this is just the\nlayout here that we have of what's happening.",
    "start": "3346500",
    "end": "3352369"
  },
  {
    "text": "We're just doing these-- it\nall boils down to these two for loops, and all\nthis is telling us is how do we do that\nswap between q and p.",
    "start": "3352370",
    "end": "3359380"
  },
  {
    "start": "3359380",
    "end": "3368259"
  },
  {
    "text": "So I think the best\nway to see this all now put together is\nthrough an actual example here.",
    "start": "3368260",
    "end": "3374860"
  },
  {
    "text": "So again, we're working\nin this equality form. Let's say that our\nA, b and c values",
    "start": "3374860",
    "end": "3380380"
  },
  {
    "text": "are given by these\nmatrices and vectors, and let's say that we have some\ninitial basis that we're saying",
    "start": "3380380",
    "end": "3388450"
  },
  {
    "text": "is 3, 4. In the next phase,\nwe're actually going to have to solve for\nthis, but right now, we're just giving it to us.",
    "start": "3388450",
    "end": "3394642"
  },
  {
    "text": "So how this is going\nto work in the code is we're first going to enter\ninto this minimize lp function.",
    "start": "3394642",
    "end": "3400160"
  },
  {
    "text": "The exclamation mark\nhere is Julia convention, sort of denoting\nthat we are going to be modifying the\narguments that are passed in.",
    "start": "3400160",
    "end": "3406789"
  },
  {
    "text": "So the basis here will be\nchanging in this function. So we're just going to do in\nthis minimize lp function,",
    "start": "3406790",
    "end": "3413080"
  },
  {
    "text": "we're just going to enter\ninto this while loop, and we're going to continue\nto call step LP here until we",
    "start": "3413080",
    "end": "3419289"
  },
  {
    "text": "get this done equal to true. So done equals to\ntrue means that we found the global optimum.",
    "start": "3419290",
    "end": "3424660"
  },
  {
    "text": "So we're just going to\ncontinue calling step lp here. So we're going to\nenter step lp now,",
    "start": "3424660",
    "end": "3432320"
  },
  {
    "text": "and so the first\npart of this, we are just reading in the\nA, b and c like before,",
    "start": "3432320",
    "end": "3437730"
  },
  {
    "text": "n is just the second component\nhere of A because A is n by n,",
    "start": "3437730",
    "end": "3442970"
  },
  {
    "text": "and then we're sorting\nthe b indices like before. So now we're going to go-- we're going to continue on.",
    "start": "3442970",
    "end": "3449100"
  },
  {
    "text": "We've just now read in\nthe free indices as well. So that's set difference is just\ntaking the set difference here",
    "start": "3449100",
    "end": "3455030"
  },
  {
    "text": "between the n\ncomponents and whatever is in b, so this set\ndifference is then just taking",
    "start": "3455030",
    "end": "3460730"
  },
  {
    "text": "whatever is not in b, put\nthat into our free indices.",
    "start": "3460730",
    "end": "3465864"
  },
  {
    "text": "And then we're just\naccessing Ab and Av there. So we solve for x\nbasis like before.",
    "start": "3465864",
    "end": "3472660"
  },
  {
    "text": "So that x basis here, A\nbasis is going to be 1, the identity matrix\nhere, because that just",
    "start": "3472660",
    "end": "3478960"
  },
  {
    "text": "comes from 3, 4, so the third\nand fourth columns of A form our A basis. Then our b term\nhere is just 9, 2,",
    "start": "3478960",
    "end": "3486140"
  },
  {
    "text": "so that gives us\n9, 2 for x basis. C basis is just going to be\nthe third and fourth components",
    "start": "3486140",
    "end": "3493670"
  },
  {
    "text": "of c, so that's 0, 0\nup there, and now we can solve for lambda and\nmu from the equations",
    "start": "3493670",
    "end": "3502120"
  },
  {
    "text": "that we saw on the board here. So lambda is just a\nbasis inverse transpose,",
    "start": "3502120",
    "end": "3507200"
  },
  {
    "text": "so A basis we already saw, c\nbasis we saw, it's just 0 0. ",
    "start": "3507200",
    "end": "3515300"
  },
  {
    "text": "And yeah, we saw that we can\ncompute the Lagrange multipliers here using these equations. So that's just what\nwe're going to do.",
    "start": "3515300",
    "end": "3522240"
  },
  {
    "text": "So for mu v as well, we can\ncompute mu v. And notice here we have C of the free variables, so\nthe first and second components",
    "start": "3522240",
    "end": "3530150"
  },
  {
    "text": "now of c minus the\nfirst and second-- first and second columns of A\nis what's making up this matrix,",
    "start": "3530150",
    "end": "3537380"
  },
  {
    "text": "and then times the lambda\nthat we just solved for. ",
    "start": "3537380",
    "end": "3542730"
  },
  {
    "text": "So now here's where that\nouter for loop starts. This is that outer\nfor loop that I was talking about\nhere, where we're",
    "start": "3542730",
    "end": "3548298"
  },
  {
    "text": "going to go through all\nof the queue indices in our free variables.",
    "start": "3548298",
    "end": "3553518"
  },
  {
    "text": "So we're going to\niterate through all of the components of mu free,\nwhich are the free components.",
    "start": "3553518",
    "end": "3559590"
  },
  {
    "text": "And what we're looking for\nhere is the maximum decrement in our objective. We're using that greedy\nheuristic here to guide us.",
    "start": "3559590",
    "end": "3566589"
  },
  {
    "text": "So as we go through each\nof these components here, we're checking first,\nis mu vi less than 0?",
    "start": "3566590",
    "end": "3572980"
  },
  {
    "text": "Why do we care if\nit's less than 0? Remember, that's the\nonly way that we get a decrement in the objective.",
    "start": "3572980",
    "end": "3578020"
  },
  {
    "text": "So we're only going to look\nat these components of mu that are less than 0. So in this case, we're looking\nat this first component",
    "start": "3578020",
    "end": "3585540"
  },
  {
    "text": "here, which is 3. It's not less than\n0, so we're just going to continue past\nthat if statement,",
    "start": "3585540",
    "end": "3591000"
  },
  {
    "text": "and go back up to\nthe top of for loop. Now we're going to look at\nthe next component of mu.",
    "start": "3591000",
    "end": "3596800"
  },
  {
    "text": "We see that that's negative\n1, so it is less than 0. So we're going to enter\ninto this if statement.",
    "start": "3596800",
    "end": "3602280"
  },
  {
    "text": "We're then going to run\nthis edge transition. So this is looking\nfor that pq pair now.",
    "start": "3602280",
    "end": "3607569"
  },
  {
    "text": "So we've gotten our q, we know\nthat our q is going to give us a decrement in\nour objective, now we're trying to find the p\nthat goes along with our q.",
    "start": "3607570",
    "end": "3615059"
  },
  {
    "text": "So we're going to run this\nedge transition function here, which will find us the p, the pq\npair, and also the x prime value",
    "start": "3615060",
    "end": "3622410"
  },
  {
    "text": "through the minimum ratio test. So that's what we're\ngoing to enter into now. We'll save our spot in\nthat step lp function",
    "start": "3622410",
    "end": "3629280"
  },
  {
    "text": "as we run this edge transition. So we're now up here\nin edge transition.",
    "start": "3629280",
    "end": "3635588"
  },
  {
    "text": "These are the components\nthat we're working with. Our basis is still 3, 4. The q index that\nwe've passed in here",
    "start": "3635588",
    "end": "3641310"
  },
  {
    "text": "is 2 because that's where we\nwere in that previous for loop, and then n here\nis just 2 as well.",
    "start": "3641310",
    "end": "3648630"
  },
  {
    "text": "So we're going to compute\nthe n indices like before. Those are just our free indices,\nand then everything else",
    "start": "3648630",
    "end": "3656230"
  },
  {
    "text": "is similar to what we've\ndone except for this D term. So D here is the denominator\nin that minimum ratio.",
    "start": "3656230",
    "end": "3664089"
  },
  {
    "text": "So this is just the\ndenominator term. The inside of these parentheses. We haven't taken the\np-th component of it yet,",
    "start": "3664090",
    "end": "3669940"
  },
  {
    "text": "but we're just computing\nthe denominator here. And so what we've\ndone is we've taken",
    "start": "3669940",
    "end": "3675250"
  },
  {
    "text": "A basis, the inverse of that\nsince we're using this forward lash operator, and\nthen we've taken",
    "start": "3675250",
    "end": "3681010"
  },
  {
    "text": "the columns of A corresponding\nto the free indices, and the q-th component. So here q is 2, so the second\ncomponent of an indices",
    "start": "3681010",
    "end": "3689440"
  },
  {
    "text": "is also 2, so we're taking\nthe second column of A, and that's where this 1, 2 comes\nfrom, the second column of A.",
    "start": "3689440",
    "end": "3697520"
  },
  {
    "text": "So we solve for, for\nthat denominator term, and now we're going to enter\ninto this second for loop.",
    "start": "3697520",
    "end": "3703023"
  },
  {
    "text": "So this is that\ninner for loop now where we're trying to find the p\npair that's corresponding to it.",
    "start": "3703023",
    "end": "3708520"
  },
  {
    "text": "So inside this inner\nfor loop now, we check, is d greater than 0? Why do we care if\nit's greater than 0?",
    "start": "3708520",
    "end": "3714890"
  },
  {
    "text": "Well, we're going to\nbe dividing by it, so we don't want\nit to be 0 here. We then compute this value.",
    "start": "3714890",
    "end": "3721020"
  },
  {
    "text": "So that's what the v is\nfor, is for value here, where it's just this ratio now. So just xp of the i-th\ncomponent divided by di,",
    "start": "3721020",
    "end": "3728330"
  },
  {
    "text": "so the denominator component. We're going to check is that\nvalue less than the smallest xq",
    "start": "3728330",
    "end": "3736550"
  },
  {
    "text": "prime that I've seen so\nfar, which we initialize it to infinity, so, yes, it is. So we're going to store that\nvalue here where value was--",
    "start": "3736550",
    "end": "3744799"
  },
  {
    "text": "it's just 9 here because\nit was this first component of x basis divided by the\nfirst component of di.",
    "start": "3744800",
    "end": "3753590"
  },
  {
    "text": "And so we saw that it\nwas less than that, so we stored p and xq\nprime, and now we're going to come back\nup to for loop",
    "start": "3753590",
    "end": "3760100"
  },
  {
    "text": "because we need to go through\nthe rest of the d components. So now we're back up\nat the top of for loop.",
    "start": "3760100",
    "end": "3765700"
  },
  {
    "text": "We're checking now, is the\nsecond component, so 2 over here of d, is that greater than 0?",
    "start": "3765700",
    "end": "3771380"
  },
  {
    "text": "Yes, it is. Let's compute the value,\nwhich is the second component of x basis, which is 2 divided\nby the second component of d,",
    "start": "3771380",
    "end": "3780670"
  },
  {
    "text": "which is also 2. So we get one for\nour value here. Is the value less than the\nbest x prime we've seen so far?",
    "start": "3780670",
    "end": "3788640"
  },
  {
    "text": "Yes, it is. Remember, we're looking\nfor the minimum ratio here. That's what we're doing\ninside this for loop.",
    "start": "3788640",
    "end": "3793960"
  },
  {
    "text": "So we then finish this\nfor loop now because that was the last component\nof d, and so that means",
    "start": "3793960",
    "end": "3799450"
  },
  {
    "text": "we've found the minimum x prime\nhere, the corresponding p, so now we can return\nthat pxq prime back",
    "start": "3799450",
    "end": "3806320"
  },
  {
    "text": "to our step lp function. So we're almost done here.",
    "start": "3806320",
    "end": "3811540"
  },
  {
    "text": "So we return this\nback to our step lp. Here now we have this\npxq prime and the q.",
    "start": "3811540",
    "end": "3818180"
  },
  {
    "text": "So we have the pq\npair here for this. Now we're looking\nis this decrement?",
    "start": "3818180",
    "end": "3823340"
  },
  {
    "text": "So is this mu v of i times xi\nprime, is that less than delta,",
    "start": "3823340",
    "end": "3829420"
  },
  {
    "text": "which is the largest\ndecrement in our objective that we've seen so far? remember, we want to minimize.",
    "start": "3829420",
    "end": "3835250"
  },
  {
    "text": "So we want a large\nnegative value. So we check is that\nless than delta?",
    "start": "3835250",
    "end": "3841539"
  },
  {
    "text": "If it is, which in this\ncase it's negative 1, which is less than infinity. So, yes, we're\ngoing to store that.",
    "start": "3841540",
    "end": "3846890"
  },
  {
    "text": "We update the pq, xq prime\npair that we've seen, and since we only had\ntwo components here,",
    "start": "3846890",
    "end": "3853450"
  },
  {
    "text": "we're done with\nthis for loop now. So we found our valid swap here. We found the pq, the entering\nand exiting node or indices here",
    "start": "3853450",
    "end": "3862330"
  },
  {
    "text": "that's going to occur. Now we just need to check\nsome optimality conditions.",
    "start": "3862330",
    "end": "3867390"
  },
  {
    "text": "So we first check\nis q equal to 0? What this means is that\nwe would have made it",
    "start": "3867390",
    "end": "3872510"
  },
  {
    "text": "through this entire for loop\nsince we initialize q to be 0. We made it through\nthis entire for loop",
    "start": "3872510",
    "end": "3878300"
  },
  {
    "text": "without having any mu\nvi terms less than 0, meaning all of our moves\nare greater than 0,",
    "start": "3878300",
    "end": "3884040"
  },
  {
    "text": "and we know that\nwhen we saw that, that meant that we were\nat a global optimum by the dual\nfeasibility constraint.",
    "start": "3884040",
    "end": "3890569"
  },
  {
    "text": "In this case, we\ndon't satisfy this, so we have not found\nthe global optimum. We're going to continue.",
    "start": "3890570",
    "end": "3896630"
  },
  {
    "text": "We're then going to check\nis xq prime infinity? Now what this means is that\nwe went through this for loop,",
    "start": "3896630",
    "end": "3903680"
  },
  {
    "text": "q was not 0, meaning\nthat q had changed. We had run some edge\ntransition here,",
    "start": "3903680",
    "end": "3911120"
  },
  {
    "text": "but x prime has\ncontinued to increase or has blown up to\ninfinity, in which case, we",
    "start": "3911120",
    "end": "3916760"
  },
  {
    "text": "have an unbounded problem. So we can error out here that\nthe problem is unbounded. That's also not the case for\nus, so we can continue on.",
    "start": "3916760",
    "end": "3925200"
  },
  {
    "text": "Now we're just doing\nthis basically swap here. So we're looking for\nthe first component.",
    "start": "3925200",
    "end": "3931500"
  },
  {
    "text": "So b indices of p, so\nthe second component of b indices, which is 4.",
    "start": "3931500",
    "end": "3936860"
  },
  {
    "text": "We're trying to find\nthe first component of b, the original basis. That's just going to be the\nsecond component as well.",
    "start": "3936860",
    "end": "3943160"
  },
  {
    "text": "So we're just doing this\nswap because remember we sorted b, so we have\nto make up for the fact that we now have a\ndifferent ordering than what",
    "start": "3943160",
    "end": "3949010"
  },
  {
    "text": "was passed in. So that's all that\nline is doing. And now we actually\ndo the swap here",
    "start": "3949010",
    "end": "3954109"
  },
  {
    "text": "where we're saying the\nsecond component of b, it was 4, so the\nfourth index, it's now becoming 2 because that's\nthe swap that we found.",
    "start": "3954110",
    "end": "3963030"
  },
  {
    "text": "So we're just\ndoing that swap now to update our basis\npartition here.",
    "start": "3963030",
    "end": "3968690"
  },
  {
    "text": "And then finally, we return the\nbasis that we found with a false since it wasn't\nthe optimal basis.",
    "start": "3968690",
    "end": "3974930"
  },
  {
    "text": "And so that was\none whole iteration of the step lp function here.",
    "start": "3974930",
    "end": "3980150"
  },
  {
    "text": "So we would now return\nback to our minimize lp, and we have our new basis\nhere with done equal to false.",
    "start": "3980150",
    "end": "3987450"
  },
  {
    "text": "So we would now run\nthis again in step lp. We're not going to go\nthrough that for time, but you're welcome to work\nthrough it out on your own",
    "start": "3987450",
    "end": "3993848"
  },
  {
    "text": "by hand if you want\npractice doing this. And the solution\nthat you'll find is that in this next iteration,\nso if you do one more iteration",
    "start": "3993848",
    "end": "4000069"
  },
  {
    "text": "of this, you'll find that mu v. You can see all of\nthe components of mu v there are positive.",
    "start": "4000070",
    "end": "4005930"
  },
  {
    "text": "So we know that we have now\nfound the global optimum. So we can return. We would return on one\nmore iteration of this,",
    "start": "4005930",
    "end": "4012250"
  },
  {
    "text": "and the basis that we would find\nis 2, 3 with the optimal x point",
    "start": "4012250",
    "end": "4017350"
  },
  {
    "text": "there as well. So you're welcome to\ntry that out on your own and see if you get\nthe optimal solution.",
    "start": "4017350",
    "end": "4024100"
  },
  {
    "text": "So that was an\nexample of phase 2. So the functions that we've seen\nso far are these first four.",
    "start": "4024100",
    "end": "4030290"
  },
  {
    "text": "The last function that we have\nto finish the simplex algorithm is this minimize lp function,\nand that's concerned",
    "start": "4030290",
    "end": "4036880"
  },
  {
    "text": "with the initialization phase. But what I think is pretty\ncool is that the entire phase 2",
    "start": "4036880",
    "end": "4043579"
  },
  {
    "text": "optimization phase can be done\nin roughly 100 lines of code here. So just these functions\nare capable of handling",
    "start": "4043580",
    "end": "4051470"
  },
  {
    "text": "these extremely large\nproblems, and solving them to global optimality. So I think that's\njust something that's",
    "start": "4051470",
    "end": "4056779"
  },
  {
    "text": "pretty cool that you have this\nmuch power in this small amount of code.",
    "start": "4056780",
    "end": "4062099"
  },
  {
    "text": "So we're going to switch over\nnow to talk about phase 1. How do we actually get this\ninitial starting vertex here?",
    "start": "4062100",
    "end": "4068345"
  },
  {
    "start": "4068345",
    "end": "4073490"
  },
  {
    "text": "And yeah, so what\nwe just saw was phase 2 where we're\nfinding the optimal vertex. Now we're going\nto be focused on,",
    "start": "4073490",
    "end": "4079315"
  },
  {
    "text": "how do we find a feasible\nstarting vertex to work with? And so as it turns\nout, identifying",
    "start": "4079315",
    "end": "4085490"
  },
  {
    "text": "these initial partitions\nthat correspond to vertices, that's actually going to involve\nsolving another linear program.",
    "start": "4085490",
    "end": "4092220"
  },
  {
    "text": "So what you might be thinking\nnow is, well, wait a sec, you're telling me that in order\nto solve a linear program,",
    "start": "4092220",
    "end": "4097399"
  },
  {
    "text": "I have to first solve\na linear program? Don't we enter this sort\nof circular loop here",
    "start": "4097399",
    "end": "4102410"
  },
  {
    "text": "and we can never solve it? So the answer is no, and\nwe're going to see why. But yeah, our goal\nhere is just we want",
    "start": "4102410",
    "end": "4109520"
  },
  {
    "text": "to find that initial partition. So in order to do\nthis, we're introducing",
    "start": "4109520",
    "end": "4114890"
  },
  {
    "text": "this auxiliary linear\nprogram that we're going to be working with. And so we're introducing\nthese variables z here.",
    "start": "4114890",
    "end": "4121818"
  },
  {
    "text": "The goal of this\nauxiliary linear program, so this is not equivalent to\nthe original linear program that we're interested in.",
    "start": "4121819",
    "end": "4127799"
  },
  {
    "text": "This is just focus on getting\nus that initial starting vertex. So we're introducing\nthese z variables,",
    "start": "4127800",
    "end": "4134349"
  },
  {
    "text": "and our goal here is that if\nwe truly solve this first one and it's a feasible\nproblem, the zs should be 0.",
    "start": "4134350",
    "end": "4141442"
  },
  {
    "text": "So we want to minimize the zs\nsubject to this ax plus zz term",
    "start": "4141442",
    "end": "4147270"
  },
  {
    "text": "here equal to b, we'll talk\nabout what this z matrix is here in a second. Then we also have\nthis constraint",
    "start": "4147270",
    "end": "4153089"
  },
  {
    "text": "that x and z is greater\nthan or equal to zero. So what is this z matrix?",
    "start": "4153090",
    "end": "4158130"
  },
  {
    "text": "The z matrix is just\na diagonal matrix here where it's a positive\n1 on the diagonal",
    "start": "4158130",
    "end": "4163299"
  },
  {
    "text": "if the bi term is greater\nthan or equal to 0, and it's negative 1 otherwise.",
    "start": "4163300",
    "end": "4169015"
  },
  {
    "text": "So I think when\nyou see this, you might be like, OK, I\ndon't really understand how this is helping us at all.",
    "start": "4169016",
    "end": "4176310"
  },
  {
    "text": "And you might have these\ntwo questions here. One is, don't we still\nhave the problem of finding that initial partition?",
    "start": "4176310",
    "end": "4182859"
  },
  {
    "text": "How do we know a partition\nfor this problem? So I think that's\na valid question. The next one is why are\nwe defining z in this way?",
    "start": "4182859",
    "end": "4189939"
  },
  {
    "text": "Why not just make it\na diagonal matrix? So we're going to answer\nboth of these questions here. Starting with the second one,\nwhy is z defined like this?",
    "start": "4189939",
    "end": "4198030"
  },
  {
    "text": "So consider the constraint\nhere if we pull it out and write it as ax\nplus zz equal to b.",
    "start": "4198030",
    "end": "4204840"
  },
  {
    "text": "Consider the case here\nwhere x is equal to 0. So what we're going to\nhave is just zz equal to b.",
    "start": "4204840",
    "end": "4211660"
  },
  {
    "text": "So in order to satisfy\nthis constraint, we would need some more\nfreedom on our z variable",
    "start": "4211660",
    "end": "4217468"
  },
  {
    "text": "because right now\nwe've constrained z to be greater than\nor equal to 0. The b terms though,\nthey can be negative.",
    "start": "4217468",
    "end": "4223380"
  },
  {
    "text": "So if we don't\nhave this z matrix here with the\nnegative sign, then we could end up with\nthe case where we",
    "start": "4223380",
    "end": "4228700"
  },
  {
    "text": "can't satisfy this constraint. So that's why we're\nbringing in this z matrix to give us that additional\ndegree of freedom in controlling",
    "start": "4228700",
    "end": "4235360"
  },
  {
    "text": "the sign of the z variables. So that's what this\nz matrix is doing, is just allowing us to\nsatisfy this zz equal to b.",
    "start": "4235360",
    "end": "4244160"
  },
  {
    "text": "So it comes from\nthe fact that we require z to be greater\nthan or equal to 0, so we're introducing this\nsign degree of freedom here.",
    "start": "4244160",
    "end": "4251050"
  },
  {
    "text": "So that's answering\nthe second question, why is z defined like that? Now, how about the\nfirst question?",
    "start": "4251050",
    "end": "4256510"
  },
  {
    "text": "Don't we still\nhave this problem? How do we know an initial\npartition for this? Well, we can look\nat again, if we",
    "start": "4256510",
    "end": "4263650"
  },
  {
    "text": "look at this stacked vector of\nxz here, if we write it out, we have n components of x,\nthose are our n variables,",
    "start": "4263650",
    "end": "4270830"
  },
  {
    "text": "and then we have\nmz variables here. So in the case where x is equal\nto 0, notice what we have here.",
    "start": "4270830",
    "end": "4278150"
  },
  {
    "text": "We have all 0s for x components,\nand then we have our z variables. Now this is actually a valid\npartition to the problem.",
    "start": "4278150",
    "end": "4285910"
  },
  {
    "text": "So our basis here\nwould be n plus 1. It's n plus 1 because\nwe have n components.",
    "start": "4285910",
    "end": "4292159"
  },
  {
    "text": "So just the next component, the\nfirst z component is n plus 1. That's the index,\nup to n plus m,",
    "start": "4292160",
    "end": "4298329"
  },
  {
    "text": "that's the last component\nof z, the last index. So that's our basis here. And then we can just\ninitialize that zj",
    "start": "4298330",
    "end": "4305140"
  },
  {
    "text": "is equal to the\nabsolute value of bj. And this would give us\nan initial partition",
    "start": "4305140",
    "end": "4310270"
  },
  {
    "text": "because it satisfies our ax,\nzz, equal to b constraint.",
    "start": "4310270",
    "end": "4316260"
  },
  {
    "text": "We have z greater than\nor equal to 0 here, so all of our constraints\nare satisfied, and so we can just pass this\ninitial partition to the solver",
    "start": "4316260",
    "end": "4324340"
  },
  {
    "text": "here with this linear program,\nand if it's a feasible problem, it should zero out all the\nzs, and what is returned to us",
    "start": "4324340",
    "end": "4331480"
  },
  {
    "text": "now is an initial partition\nfor the original problem that we were interested in. So this is just sort\nof a middle step",
    "start": "4331480",
    "end": "4338110"
  },
  {
    "text": "that we're taking to solve\nthe original problem that we want to. So I think it helps to see the\nwhole pipeline laid out here.",
    "start": "4338110",
    "end": "4346449"
  },
  {
    "text": "And this statement\nis just saying that the partition\nthat we get by solving this auxiliary linear program\nwill produce a feasible design",
    "start": "4346450",
    "end": "4354370"
  },
  {
    "text": "point, meaning it\nwill satisfy Ax equal to b because it also has\nto respect those constraints.",
    "start": "4354370",
    "end": "4359469"
  },
  {
    "text": "If the z variables-- this is\nthe same thing we just said. So if the z variables that are\nreturned are not zeroed out,",
    "start": "4359470",
    "end": "4365020"
  },
  {
    "text": "that means that the original\nproblem is not feasible, so we can just sort\nof stop right there. So now looking at this\nentire pipeline laid out,",
    "start": "4365020",
    "end": "4373060"
  },
  {
    "text": "this is going to be the\nnew form of the problem that we're working with. So we see this sort of\ntransition from-- this",
    "start": "4373060",
    "end": "4379330"
  },
  {
    "text": "was the original\nform of the problem. We wanted to get to this-- this is the new form\nthat we're getting to,",
    "start": "4379330",
    "end": "4385570"
  },
  {
    "text": "and we're doing it through\nthis auxiliary linear program. So I think what you\nmight be thinking now",
    "start": "4385570",
    "end": "4391929"
  },
  {
    "text": "is why does z still show up\nin our final form over here?",
    "start": "4391930",
    "end": "4398210"
  },
  {
    "text": "Why are we keeping those\nz variables around? If we know they've\nbeen zeroed out, aren't they no longer\nimportant to us?",
    "start": "4398210",
    "end": "4404570"
  },
  {
    "text": "Does anyone have\nan idea of why we might want to keep those\nz variables around? ",
    "start": "4404570",
    "end": "4413390"
  },
  {
    "text": "Yeah. That's initial values for\nthe second part of the set. Yeah, I think-- so you said\nas a sort of initial values?",
    "start": "4413390",
    "end": "4421710"
  },
  {
    "text": "Yeah, I think\nthat's pretty close. Basically, they might be zeroed\nout or they will be zeroed out,",
    "start": "4421710",
    "end": "4428780"
  },
  {
    "text": "but the partition\nthat's returned from the initial\nsolution to that problem",
    "start": "4428780",
    "end": "4434269"
  },
  {
    "text": "might still have\nthose components. So it might have indices\ncorresponding to z in that partition\nthat's returned,",
    "start": "4434270",
    "end": "4440270"
  },
  {
    "text": "even though they're 0, because\nwe just require that our x basis terms are greater\nthan or equal to 0, going back to your\noriginal question.",
    "start": "4440270",
    "end": "4447530"
  },
  {
    "text": "So the z components,\nthe z indices might still be in that\nbasis that solved for,",
    "start": "4447530",
    "end": "4453123"
  },
  {
    "text": "and so that's why we\nneed to keep them around. So it's kind of a nuanced\npoint that they're going to be zeroed\nout, but we still",
    "start": "4453123",
    "end": "4458960"
  },
  {
    "text": "need them because the\nindices are important to us for that partition. Yeah. How [INAUDIBLE].",
    "start": "4458960",
    "end": "4464780"
  },
  {
    "text": " Remember when we called\nthat minimize lp function?",
    "start": "4464780",
    "end": "4470300"
  },
  {
    "text": "What was returned from that\nwas the basis, the partition. So we're updating\nthat basis as we go.",
    "start": "4470300",
    "end": "4476010"
  },
  {
    "text": "So the same thing when we solve\nthat auxiliary linear program will be updating that basis. And so whatever basis\nis returned from there",
    "start": "4476010",
    "end": "4482900"
  },
  {
    "text": "will satisfy our ax\nequal to b constraints. ",
    "start": "4482900",
    "end": "4489460"
  },
  {
    "text": "So now final step here in this\nlast minimize lp function, which is sort of putting everything\ntogether here with phase 1",
    "start": "4489460",
    "end": "4495840"
  },
  {
    "text": "and phase 2, so everything\nthat we're doing at the top is what we've seen\nbefore, except now we're",
    "start": "4495840",
    "end": "4502510"
  },
  {
    "text": "just introducing the\nauxiliary variable z here. We're setting up this\nmatrix, so this line is just",
    "start": "4502510",
    "end": "4508720"
  },
  {
    "text": "a one line for loop that says\nfor each component in b here,",
    "start": "4508720",
    "end": "4515050"
  },
  {
    "text": "basically just check, is that j? So for each j in this b, is\nj greater than or equal to 0?",
    "start": "4515050",
    "end": "4521830"
  },
  {
    "text": "If it is, then it's a 1,\notherwise it's negative 1. So that's just setting up\nthe z how we saw down there.",
    "start": "4521830",
    "end": "4529980"
  },
  {
    "text": "And now we're building\nthis initial linear program here that we're going to solve. So A prime here is\njust combining the A",
    "start": "4529980",
    "end": "4537050"
  },
  {
    "text": "and z, the A and z matrices,\njust like down here. B prime is just like before,\nand then c prime is just this",
    "start": "4537050",
    "end": "4545150"
  },
  {
    "text": "objective here where\nwe have 0s and 1s, and the z was just\ninitialized to be 1 here.",
    "start": "4545150",
    "end": "4551060"
  },
  {
    "text": "So then we're constructing\nthat linear program, we're going to set up\nour partition here,",
    "start": "4551060",
    "end": "4557120"
  },
  {
    "text": "which is what we saw,\nit's just n plus 1 to n plus m, so this collect is just\ncollecting the range from 1",
    "start": "4557120",
    "end": "4563360"
  },
  {
    "text": "to m, and then adding it on to\nn to get n plus 1 to n plus m.",
    "start": "4563360",
    "end": "4568790"
  },
  {
    "text": "So that's our valid partition. We know that will always\nbe a valid partition. And then we're going to\ncall minimize lp on that.",
    "start": "4568790",
    "end": "4577530"
  },
  {
    "text": "So that will then\nmodify our basis, and the basis that\nwill be returned will be a starting\nbasis, an initial basis",
    "start": "4577530",
    "end": "4585170"
  },
  {
    "text": "for the original problem. But first, we need\nto check here, are any of the components of\nb-- so this is looking at any",
    "start": "4585170",
    "end": "4592560"
  },
  {
    "text": "of the indices greater than n. Those indices greater than n\ncorrespond to the z values.",
    "start": "4592560",
    "end": "4598840"
  },
  {
    "text": "So are any of those z not 0? That's what this line is asking. Are any of the zs\nnot zeroed out?",
    "start": "4598840",
    "end": "4604840"
  },
  {
    "text": "If that's the case, then we\nknow it's an infeasible problem and we can stop right there\nwithout solving any further.",
    "start": "4604840",
    "end": "4611050"
  },
  {
    "text": "If it's not that the case that\nit's infeasible, then we know, OK, we have a valid partition\nto start our other problem",
    "start": "4611050",
    "end": "4618630"
  },
  {
    "text": "that we want to get to. So now this is the\nsame problem here, just including the\nz variables, and we",
    "start": "4618630",
    "end": "4625500"
  },
  {
    "text": "need to do that because\ntheir indices could be in that partition. So now we set up the\nfinal problem here",
    "start": "4625500",
    "end": "4631620"
  },
  {
    "text": "where this A prime prime\nmatrix is just this matrix here, b prime prime is\njust this vector here,",
    "start": "4631620",
    "end": "4640000"
  },
  {
    "text": "and then c prime prime\nis just this vector here. So now we can pass that in\nwhere the b partition now,",
    "start": "4640000",
    "end": "4647560"
  },
  {
    "text": "basis partition is just what\nwas returned from this function. So that basis that was returned\nfrom our initial auxiliary",
    "start": "4647560",
    "end": "4653770"
  },
  {
    "text": "linear program becomes\nnow our new basis here. And so we can\nsolve this and then call our get return\nor get vertex here,",
    "start": "4653770",
    "end": "4661449"
  },
  {
    "text": "which we will\nreturn the actual x, and notice we only take the\nfirst n components of that",
    "start": "4661450",
    "end": "4666700"
  },
  {
    "text": "because those are the actual\nx values that we have. And so that is the\nentire simplex algorithm.",
    "start": "4666700",
    "end": "4673550"
  },
  {
    "text": "Both phase 1 and phase\n2 all put together now. And so I know that\nwas a lot of steps",
    "start": "4673550",
    "end": "4678920"
  },
  {
    "text": "and we're almost\nout of time here. So I think the main\ntakeaway from this is that, yes, there\nwere a lot of steps that",
    "start": "4678920",
    "end": "4685010"
  },
  {
    "text": "went into this\nsimplex algorithm, but they all sort of\nrelied on that foundation of the first order\nnecessary conditions.",
    "start": "4685010",
    "end": "4691800"
  },
  {
    "text": "So that's the foundation\nof all of this. And as we went\nthrough, we were just doing this indice\naccounting where",
    "start": "4691800",
    "end": "4697160"
  },
  {
    "text": "we're swapping these indices,\nand checking if any of the first or checking if all of the first\norder necessary conditions",
    "start": "4697160",
    "end": "4703730"
  },
  {
    "text": "were satisfied. So that's phase 1 and phase\n2 of the simplex algorithm.",
    "start": "4703730",
    "end": "4709400"
  },
  {
    "text": "I'll wrap it up here just\nwith a quick summary. So what we saw was these linear\nprograms at the highest level.",
    "start": "4709400",
    "end": "4716190"
  },
  {
    "text": "They're just linear\nobjective-- so we have a linear objective,\nlinear constraints, that gives us this linear program.",
    "start": "4716190",
    "end": "4722540"
  },
  {
    "text": "We saw that the simplex\nalgorithm could globally optimize these\nproblems when we have",
    "start": "4722540",
    "end": "4727580"
  },
  {
    "text": "extremely high-dimensional\nvariables that we're working with. We can still do it in\nan efficient manner,",
    "start": "4727580",
    "end": "4732990"
  },
  {
    "text": "all relying on those first\norder necessary conditions. The part that we did get to but\nthat we'll get to next time,",
    "start": "4732990",
    "end": "4738930"
  },
  {
    "text": "is on dual\ncertificates, which will allow us to check our\nsolution that's returned here.",
    "start": "4738930",
    "end": "4744460"
  },
  {
    "text": "So I hope that was useful. I hope each of\nthose jumps that we made in each of those\nsteps made sense to you.",
    "start": "4744460",
    "end": "4750580"
  },
  {
    "text": "And I hope that you've seen\nthat the linear programming is a pretty powerful tool when\nwe are able to solve it",
    "start": "4750580",
    "end": "4756330"
  },
  {
    "text": "with this simplex algorithm. So thank you all for listening. I'm happy to take any\nquestions that you have now. Offline.",
    "start": "4756330",
    "end": "4761710"
  },
  {
    "text": "Offline. Thank you. [APPLAUSE] ",
    "start": "4761710",
    "end": "4771000"
  }
]