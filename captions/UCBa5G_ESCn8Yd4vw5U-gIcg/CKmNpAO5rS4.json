[
  {
    "text": " So let's get going from\na review from last time,",
    "start": "0",
    "end": "7490"
  },
  {
    "text": "because sometimes it's good to\npage back in what we learned.",
    "start": "7490",
    "end": "13490"
  },
  {
    "text": "So I asked you a couple\nof trivial questions. One of those questions was,\nwhat is a computer program?",
    "start": "13490",
    "end": "19800"
  },
  {
    "text": "And really, I meant what\nis a computer program as we're going to think\nabout it in this class from the perspective\nof a computer?",
    "start": "19800",
    "end": "27770"
  },
  {
    "text": "So what was a computer program? Let's get in the habit\nof just shouting out things that are\nmaybe even obvious,",
    "start": "27770",
    "end": "33710"
  },
  {
    "text": "and it'll just keep the-- So the list of instructions,\nor if you want I could ask you what's\nan instruction?",
    "start": "33710",
    "end": "39050"
  },
  {
    "text": "If we want to be more abstract,\nit's a list of commands. A program is a list of\ncommands telling the machine,",
    "start": "39050",
    "end": "45020"
  },
  {
    "text": "you will do this,\nyou will do that. So I have here the slides of a\nlist of processor instructions.",
    "start": "45020",
    "end": "50340"
  },
  {
    "text": "At the end of the\nday, this program text turns into a list of commands.",
    "start": "50340",
    "end": "55390"
  },
  {
    "text": " And what did a processor do?",
    "start": "55390",
    "end": "61970"
  },
  {
    "text": "Given a list of commands,\nwhat does a processor do? It executes those commands,\nI'll give you that one.",
    "start": "61970",
    "end": "69460"
  },
  {
    "text": "But when we talk about\nexecuting the commands, what are the effects of those\ncommands, what do they do?",
    "start": "69460",
    "end": "76264"
  },
  {
    "text": "Modifies the state. Modifies state. And we talked about two\ntypes of state, right. We talked about registers and\nwe talked about main memory.",
    "start": "76264",
    "end": "87390"
  },
  {
    "text": "So this processor, it\nexecutes instructions. I gave you this really\nsimplistic notion,",
    "start": "87390",
    "end": "92880"
  },
  {
    "text": "just enough detail to\nhelp us think about it. It's useful to\nthink about there's components of the processor\nthat are about control.",
    "start": "92880",
    "end": "100890"
  },
  {
    "text": "Given the program,\nwhat do I do next? What's the next operation. If there's a branch,\nwhere do I go next?",
    "start": "100890",
    "end": "107940"
  },
  {
    "text": "Typically, I just have\nthat as my orange boxes here, fetch and\ndecode, and you have a part of a processor, some of\nthe hardware that's actually",
    "start": "107940",
    "end": "113998"
  },
  {
    "text": "responsible for doing stuff. So I'm calling that\nthe execution unit. And we have two\nforms of context,",
    "start": "113998",
    "end": "119290"
  },
  {
    "text": "we have the register\nstate of the processor, and then not shown on the\ndiagram, we have memory.",
    "start": "119290",
    "end": "125850"
  },
  {
    "text": "And my simple\nprocessor last time was going to execute one\ninstruction every clock tick,",
    "start": "125850",
    "end": "132360"
  },
  {
    "text": "making progress.  But then we said something else.",
    "start": "132360",
    "end": "138129"
  },
  {
    "text": "We said, well, if we look at\nthe instructions in a program, if we look at\nthose instructions,",
    "start": "138130",
    "end": "143440"
  },
  {
    "text": "and this was a larger program,\nwe can take a look at them and say, not all\nthe instructions",
    "start": "143440",
    "end": "150090"
  },
  {
    "text": "depend on the previous\none in the sequence. So this was a sequence\nwhere I really",
    "start": "150090",
    "end": "155610"
  },
  {
    "text": "recommend that you go\noffline and confirm to yourself that if these are\nthe numbers of the instructions,",
    "start": "155610",
    "end": "162180"
  },
  {
    "text": "and I'm representing those\ninstructions as a node in the graph, there are\ncertain dependencies,",
    "start": "162180",
    "end": "167490"
  },
  {
    "text": "I have to do instruction\ntwo, for example, after I do instruction 0 and 1.",
    "start": "167490",
    "end": "175050"
  },
  {
    "text": "Because I can't add two numbers\nif I haven't brought them in from memory or\nsomething like that.",
    "start": "175050",
    "end": "181349"
  },
  {
    "text": "And so we said that, in\nthe same way that you can look at this\nprogram and go, I",
    "start": "181350",
    "end": "186540"
  },
  {
    "text": "know I'm supposed to get an\nanswer, that's the same as if I ran these all serially.",
    "start": "186540",
    "end": "194340"
  },
  {
    "text": "But if I had extra\nresources sitting around, I can do some of these\nthings in parallel",
    "start": "194340",
    "end": "200220"
  },
  {
    "text": "without really telling anybody\nthat I changed the order, and they'll never\nknow, all they'll see is that this program\ngoes a little bit faster.",
    "start": "200220",
    "end": "207510"
  },
  {
    "text": "And we talked\nabout this one idea last time of\nsuperscalar execution.",
    "start": "207510",
    "end": "214740"
  },
  {
    "text": "And if you break down the\nword, it's a weird word term, but if you think about it, it's\nlike scalar execution, which is",
    "start": "214740",
    "end": "220260"
  },
  {
    "text": "like doing one thing at a time. And then the superscalar is\na fancy, like technical term",
    "start": "220260",
    "end": "226409"
  },
  {
    "text": "for saying, we're actually doing\na little bit more than that, but your program\nis still saying, I'm doing one thing at a time.",
    "start": "226410",
    "end": "233010"
  },
  {
    "text": "So it's something that's\ngoing on under the hood. So this is the first thing\nthat we talked about, where there was a\nlittle bit difference",
    "start": "233010",
    "end": "238710"
  },
  {
    "text": "between the abstraction,\nthe meaning of a program. A program is a list\nof instructions",
    "start": "238710",
    "end": "244540"
  },
  {
    "text": "and says if you perform these\noperations on this state, at the end of the day, you\nshould get this answer.",
    "start": "244540",
    "end": "250750"
  },
  {
    "text": "Then there's the implementation\nin a modern processor that says, we can do them in a little\nbit different order.",
    "start": "250750",
    "end": "256760"
  },
  {
    "text": "It'll be better for you,\nand you'll never know. So that was a little bit what\nwe talked about with processing.",
    "start": "256760",
    "end": "263950"
  },
  {
    "text": "We also talked a little\nbit about memory, and I asked you what was memory. So in the same way, if I\nask you what is a program,",
    "start": "263950",
    "end": "271449"
  },
  {
    "text": "it's just a list of commands,\nwhere those commands modify state in a machine. What is memory.",
    "start": "271450",
    "end": "278560"
  },
  {
    "text": "Yeah, memory, logically,\nabstractly, it's just an array of bytes.",
    "start": "278560",
    "end": "283760"
  },
  {
    "text": "It's part of that\nstate for that program. And if a program says, please\nread the value at address 42.",
    "start": "283760",
    "end": "290590"
  },
  {
    "text": "Memory says, well,\naddress 42 has some value and sure, I'll give\nyou that value.",
    "start": "290590",
    "end": "296110"
  },
  {
    "text": "If a processor says, write\nthe value to address, write the value\nfoobar to address 42.",
    "start": "296110",
    "end": "301370"
  },
  {
    "text": "Well, that says OK,\nI'll take in that value, and I'll put the\nvalue foobar there. OK, so we talked about memory\njust being a big array of bytes,",
    "start": "301370",
    "end": "317320"
  },
  {
    "text": "but we didn't talk very\nmuch about implementation. So notice how I'm setting\nthis up over and over.",
    "start": "317320",
    "end": "322620"
  },
  {
    "text": "There's what something\nmeans, it's semantics, add these two numbers,\nthen add those two numbers,",
    "start": "322620",
    "end": "328570"
  },
  {
    "text": "or there is an\narray of addresses, and every address has a value.",
    "start": "328570",
    "end": "334180"
  },
  {
    "text": "And then the underlying\nimplementation of that. So if I tell you memory, many\nof you might say the word DRAM,",
    "start": "334180",
    "end": "342310"
  },
  {
    "text": "or remember a big\nstick of memory that you might have\nshoved into a laptop at some time, or\nsomething like that.",
    "start": "342310",
    "end": "347870"
  },
  {
    "text": "And so what a DRAM\nchip does, is it provides, it's\nthe implementation",
    "start": "347870",
    "end": "353199"
  },
  {
    "text": "of this abstraction. You send that DRAM chip\na command that says, give me the value that's\nstored at address, Hex B,",
    "start": "353200",
    "end": "360580"
  },
  {
    "text": "and this memory chip\nwill send 255 back. But we talked\nabout last time how",
    "start": "360580",
    "end": "366669"
  },
  {
    "text": "it could take a while to go get\nthat message out there to memory and come back.",
    "start": "366670",
    "end": "371770"
  },
  {
    "text": "And so all modern systems\nhave some form of a cache.",
    "start": "371770",
    "end": "378550"
  },
  {
    "text": "And this cache is\nanother form of storage that's part of the\nimplementation of memory.",
    "start": "378550",
    "end": "385000"
  },
  {
    "text": "But if the processor says,\nI need address for, well,",
    "start": "385000",
    "end": "390790"
  },
  {
    "text": "that value might\nbe stored in cache, and it can get the\nanswer much, much faster. So that was right where\nwe left off last time.",
    "start": "390790",
    "end": "396915"
  },
  {
    "text": " Any questions?",
    "start": "396915",
    "end": "404310"
  },
  {
    "text": "I often overlap just a little\nbit, because it's good. Yes, sir. [LAUGHS]",
    "start": "404310",
    "end": "410710"
  },
  {
    "text": "Heightened dynamic RAM? Yeah. Yeah, just dynamic RAM. And it's dynamic in, that if\nyou cut the power, as opposed",
    "start": "410710",
    "end": "418530"
  },
  {
    "text": "to something that's persistent,\nlike SSD, or [INAUDIBLE]. Even if you read a value?",
    "start": "418530",
    "end": "425009"
  },
  {
    "text": "That's true, even reading\na value destroys the value. So when you read a value, you\nactually got to put it back, otherwise you lose it.",
    "start": "425010",
    "end": "431050"
  },
  {
    "text": "But for fun, we actually\nhave 30 minutes on DRAM, very, very much at\nthe end of class.",
    "start": "431050",
    "end": "438190"
  },
  {
    "text": "But for now, you should think\nabout it as it's far away. And since it's far\naway, it's like it's",
    "start": "438190",
    "end": "444419"
  },
  {
    "text": "standing in the back of the room\nor it's storage in your garage, or something like that. If you want to go\nget something there, it's going to take a little bit.",
    "start": "444420",
    "end": "450060"
  },
  {
    "text": "And you should think\nabout the cache, it's like what's\nright on my desk. So these have addresses\nthat you have listed out,",
    "start": "450060",
    "end": "457080"
  },
  {
    "text": "the listing on the [INAUDIBLE]. Don't think about\nimplementation, they're just addresses.",
    "start": "457080",
    "end": "462790"
  },
  {
    "text": "I have this concept,\nI have memory. Memory an address,\nit gives you a value.",
    "start": "462790",
    "end": "468060"
  },
  {
    "text": "DRAM is one way\nto implement that. A cache is going to be\nanother way to implement that. And that's something we\nhaven't stressed very much",
    "start": "468060",
    "end": "474503"
  },
  {
    "text": "in the class in previous\nyears, and so we're trying to set the stage a\nlittle bit more this year. So there's two details\nof how a data cache works",
    "start": "474503",
    "end": "482790"
  },
  {
    "text": "that are useful to think about. One is, even though memory\nsays, if you give me an address,",
    "start": "482790",
    "end": "488970"
  },
  {
    "text": "I'll give you a value, the\nunderlying implementation in any modern system that\nI know about will move data",
    "start": "488970",
    "end": "495630"
  },
  {
    "text": "from memory into the cache at\nsome larger granularity of cache lines.",
    "start": "495630",
    "end": "500710"
  },
  {
    "text": "So in this figure, this cache\nholds data for two cache lines,",
    "start": "500710",
    "end": "506110"
  },
  {
    "text": "each of those cache\nlines is 4 bytes. So the bytes store, beginning\nat address 4, so 4, 5, 6, 7.",
    "start": "506110",
    "end": "515740"
  },
  {
    "text": "These are the\nvalues out in memory that are replicated\nin the cache. You should be able to\nconfirm that if I did not",
    "start": "515740",
    "end": "521177"
  },
  {
    "text": "mess up my figure, 0, 0, 6, 0. So this is a cache that has the\nability to replicate 8 bytes.",
    "start": "521178",
    "end": "528680"
  },
  {
    "text": "It's organized into two\ncache lines of 4 bytes each. ",
    "start": "528680",
    "end": "535880"
  },
  {
    "text": "And what I'm highlighting\nin red is the place in the address space that\ncorresponds to these two cache",
    "start": "535880",
    "end": "542090"
  },
  {
    "text": "lines. I've seen a bunch\nof questions, Yeah? I just want to affect. You want to affect 0X5?",
    "start": "542090",
    "end": "547399"
  },
  {
    "text": "Will we just fetch\nthe next [INAUDIBLE] Good question. Think about, you're going\nto access and move data",
    "start": "547400",
    "end": "553550"
  },
  {
    "text": "from DRAM memory onto the chip\nin the granularity of 4 bytes",
    "start": "553550",
    "end": "559910"
  },
  {
    "text": "rooted at address mod four. So if you want address five,\nthe actual command out to memory",
    "start": "559910",
    "end": "567230"
  },
  {
    "text": "is giving me the\ncache line of 4,",
    "start": "567230",
    "end": "572600"
  },
  {
    "text": "Do different execution\nunits have different caches, or is there a-- I'm not going to answer\nthe question just yet.",
    "start": "572600",
    "end": "578180"
  },
  {
    "text": "I just want everybody to\nlearn it for one processor. Absolutely, yes. And you probably\nalready thinking",
    "start": "578180",
    "end": "584655"
  },
  {
    "text": "about how the heck,\nif I replicate data all over the place, how do\nI keep things consistent. You are correct, but not today.",
    "start": "584655",
    "end": "590720"
  },
  {
    "text": "yeah Keep DRAM so far, where? Why not put a garage on my desk.",
    "start": "590720",
    "end": "597050"
  },
  {
    "text": " [LAUGHS]",
    "start": "597050",
    "end": "602830"
  },
  {
    "text": "Cool. Yeah. Sorry.",
    "start": "602830",
    "end": "607900"
  },
  {
    "text": "Maybe you could explain one\nmore time, because I think what [INAUDIBLE] Yeah, sure.",
    "start": "607900",
    "end": "614330"
  },
  {
    "text": "So what is memory? Memory is an address space\nand a value at every address.",
    "start": "614330",
    "end": "619690"
  },
  {
    "text": "Somehow we have\nto implement that. So somewhere in\nthe system, I need to have storage\nfor every address.",
    "start": "619690",
    "end": "627340"
  },
  {
    "text": "And typically, that is your\noff-chip memory these days. Now a cache is just keeping\na copy of this information",
    "start": "627340",
    "end": "637180"
  },
  {
    "text": "right on my desktop. Now, the organization of almost\nany modern cache, anything",
    "start": "637180",
    "end": "643930"
  },
  {
    "text": "you get on any chip that\nyou're probably going to run, is that data is going to move\nbetween memory and the cache",
    "start": "643930",
    "end": "651399"
  },
  {
    "text": "at the granularity of lines. So on an Intel chip, that's\na 64-byte cache line.",
    "start": "651400",
    "end": "657640"
  },
  {
    "text": "On my diagram, it's\na 4-byte cache line, because I don't want\nto draw 64 numbers. And so if you want\naddress 5 in my cache,",
    "start": "657640",
    "end": "666020"
  },
  {
    "text": "you're going to go\nask memory, give me all the information for the\nline starting at address 4.",
    "start": "666020",
    "end": "673640"
  },
  {
    "text": "That makes sense? And next slide I'm\ngoing to get into why we work at granularity too.",
    "start": "673640",
    "end": "680700"
  },
  {
    "text": "The starting [INAUDIBLE]\nfrom take things is basically always multiples of\n4 or multiples of [INAUDIBLE].",
    "start": "680700",
    "end": "688580"
  },
  {
    "text": "Multiples of cache. We're going to work\nat that, because we don't want to have a dynamic\nallocation situation here.",
    "start": "688580",
    "end": "693750"
  },
  {
    "text": "This is going to be hardware. The whole point is\nto be able to access.",
    "start": "693750",
    "end": "699650"
  },
  {
    "text": "When this processor\nsays, I want address 5, and we say load address 5. Let's think about this.",
    "start": "699650",
    "end": "705180"
  },
  {
    "text": "What happens if\nthe processor says, I want to load address five.",
    "start": "705180",
    "end": "715700"
  },
  {
    "text": "Conceptually, it's\nasking memory. Please give me the\nvalue at address five. But what it's first going to do\nis it's going to ask the cache,",
    "start": "715700",
    "end": "722630"
  },
  {
    "text": "hey, do you have address 5. And the cache is going to\ngo, yeah, I do actually, it has value 0.",
    "start": "722630",
    "end": "730020"
  },
  {
    "text": "If the cache doesn't\nhave the value, now we're going to go get it. And then the cache is\ngoing to ask memory, hey,",
    "start": "730020",
    "end": "736520"
  },
  {
    "text": "can I get the line\nthat contains 5 And that's when those four\nvalues come in this case.",
    "start": "736520",
    "end": "742560"
  },
  {
    "text": "So let's think about it in\na slightly richer situation. This is what we were\ngoing through right at the end of class.",
    "start": "742560",
    "end": "747620"
  },
  {
    "text": "In the class, nobody\nknows, everybody's tired. Nobody remembers anything\nanyway, so we're doing it again. So here is the value of memory.",
    "start": "747620",
    "end": "757190"
  },
  {
    "text": "Notice that I'm\nreally saying memory, and I'm not saying DRAM,\nor any implementation, even though almost all of us,\nif we say memory in computer",
    "start": "757190",
    "end": "764510"
  },
  {
    "text": "architecture, we're probably\nthinking about off-chip stuff. So this is the state of\nmy program, these values.",
    "start": "764510",
    "end": "771420"
  },
  {
    "text": "And here is a list of\naddresses that my program is going to access.",
    "start": "771420",
    "end": "777540"
  },
  {
    "text": "So it's going to be like, I'm\ngoing to access address 0, then address one, then\naddress 2, in time.",
    "start": "777540",
    "end": "783650"
  },
  {
    "text": "And what I'm going\nto show here is, what is the cache doing in\nresponse to those processor",
    "start": "783650",
    "end": "789590"
  },
  {
    "text": "actions? So let's say that the\nprogram says, please load the value at address 0.",
    "start": "789590",
    "end": "797282"
  },
  {
    "text": "And let's just\nstart from the place where there's\nnothing in the cache, or everything's\ninvalid in the cache. Well, the cache is going\nto go, hey, wait a minute,",
    "start": "797282",
    "end": "804075"
  },
  {
    "text": "I don't have that value. So it's going to go ask\nmemory for, for a cache line.",
    "start": "804075",
    "end": "809420"
  },
  {
    "text": "And these are cache lines. Sorry, I didn't I didn't\ndraw that for you. So when we say, hey,\nI need address 0,",
    "start": "809420",
    "end": "816330"
  },
  {
    "text": "the cache goes, you've never\nasked me for that before, why would I have it?",
    "start": "816330",
    "end": "821480"
  },
  {
    "text": "So it's a cache, miss, the\nvalue is not in the cache. And if you read a computer\narchitecture textbook,",
    "start": "821480",
    "end": "827540"
  },
  {
    "text": "they taxonomize the\nreason for these misses. And so in this case, I wrote\non the slide cold miss,",
    "start": "827540",
    "end": "833870"
  },
  {
    "text": "because we have\nnever even touched that data before, there's\nreally no reason it should be in the cast.",
    "start": "833870",
    "end": "839420"
  },
  {
    "text": "So the idea is that\nthe data is cold, compared to data that's hot\nthat you're often accessing.",
    "start": "839420",
    "end": "845790"
  },
  {
    "text": "So notice what happened in\nthe cache state, the cache now has one valid line in\nit, and it's the line",
    "start": "845790",
    "end": "851030"
  },
  {
    "text": "beginning at address 0. So that may have\ntaken a while, there",
    "start": "851030",
    "end": "856360"
  },
  {
    "text": "might be some real\nlatency in that operation. Now, what happens when\nthe processor says,",
    "start": "856360",
    "end": "862650"
  },
  {
    "text": "in some later instruction,\nsome time later in the program, the cache hasn't changed,\nnothing's changed.",
    "start": "862650",
    "end": "867727"
  },
  {
    "text": "It's done no other memory. And it says, you know what,\nI want to read address 1. ",
    "start": "867727",
    "end": "873750"
  },
  {
    "text": "Was does the cache say? [INAUDIBLE] I got an address\n1, that's a hit.",
    "start": "873750",
    "end": "878790"
  },
  {
    "text": "Nothing happens So\nthat could potentially be really, really fast. And the same is going\nto happen for 2, 3.",
    "start": "878790",
    "end": "886520"
  },
  {
    "text": "And then what happens\nif I go back to 2? We're good, it's another hit. 1? Another hit.",
    "start": "886520",
    "end": "891760"
  },
  {
    "text": "4?  Don't have that, that's\ngot to get brought in.",
    "start": "891760",
    "end": "897450"
  },
  {
    "text": "And now my cache in this example\nhas capacity for two lines, so we'll just put\nthat other thing in.",
    "start": "897450",
    "end": "903000"
  },
  {
    "text": "When I go back to\n1, what happens? You're good. I'm good. Exactly.",
    "start": "903000",
    "end": "908630"
  },
  {
    "text": "So one thing I want you to\ntake away from this slide is actually the cache is solving\ntwo problems at the same time.",
    "start": "908630",
    "end": "917660"
  },
  {
    "text": "I'm actually going to go\nto the second one first. The one that I've\nset this up for",
    "start": "917660",
    "end": "922760"
  },
  {
    "text": "is, if you've\nalready touched data, if you've already\naccessed data, the cache has it, which means all\nsubsequent accesses will",
    "start": "922760",
    "end": "930230"
  },
  {
    "text": "be faster. So in general, one of the\nbig reasons for a cache,",
    "start": "930230",
    "end": "935370"
  },
  {
    "text": "is that if I'm\ntouching stuff a lot, the paper that I'm\nworking on right now, the homework that I'm grading,\nthat's why I keep it on my desk,",
    "start": "935370",
    "end": "942280"
  },
  {
    "text": "I don't take it to the\ngarage every single time I want to look at it. So that's this notion\nof temporal locality,",
    "start": "942280",
    "end": "949380"
  },
  {
    "text": "back-to-back accesses in time. That data is sitting\nthere, so that's what's helping me\nwith preventing me",
    "start": "949380",
    "end": "956220"
  },
  {
    "text": "from going out\nand looking at it. The other thing that\nyou might have noticed is that this\ngranularity of operating",
    "start": "956220",
    "end": "963240"
  },
  {
    "text": "at the granularity of lines,\nfirst of all, bulk transfers are almost always efficient.",
    "start": "963240",
    "end": "970410"
  },
  {
    "text": "So I can transfer data\nefficiently to the cache, but it's based on the assumption\nthat if I access address 0,",
    "start": "970410",
    "end": "978480"
  },
  {
    "text": "oftentimes programs then\ngo access 1, 2 and 3 too, because they're\nrunning right down an array, for example.",
    "start": "978480",
    "end": "985050"
  },
  {
    "text": "So there's actually two forms\nof reducing latency here.",
    "start": "985050",
    "end": "991140"
  },
  {
    "text": "One form is almost\nlike the line is functioning as a prefetch for\nthe next items in the array.",
    "start": "991140",
    "end": "998550"
  },
  {
    "text": "The second one is, by\nbringing the data in now, I'm assuming you're probably\ngoing to touch it again.",
    "start": "998550",
    "end": "1004257"
  },
  {
    "text": "A common thing would be to\nread something, do some logic and then update it, so there's\nalready two too memory accesses.",
    "start": "1004257",
    "end": "1010440"
  },
  {
    "text": "Now I want to throw out one\nmore pattern for you, which is interesting, same cache.",
    "start": "1010440",
    "end": "1016730"
  },
  {
    "text": "And now what I'm going\nto do, is I'm going to read right down an array. Notice that the addresses\nare just increasing by a byte",
    "start": "1016730",
    "end": "1023270"
  },
  {
    "text": "every time, except I am--",
    "start": "1023270",
    "end": "1028609"
  },
  {
    "text": "OK, so let's just do this. So hit, hit, hit, hit.",
    "start": "1028609",
    "end": "1035180"
  },
  {
    "text": "Now what happens? [INAUDIBLE] Miss, good. Hit, hit, hit.",
    "start": "1035180",
    "end": "1041515"
  },
  {
    "text": "[INAUDIBLE] But what do I do? My cache is full. You need to throw out--",
    "start": "1041515",
    "end": "1047439"
  },
  {
    "text": "So now we've got to\nthrow something out. And last time I told\nyou that, in this class,",
    "start": "1047440",
    "end": "1052840"
  },
  {
    "text": "we're going to assume a very,\nsimple policy of least recently used, and there's some questions\non the website about this.",
    "start": "1052840",
    "end": "1059660"
  },
  {
    "text": "So the line that I have\ntouched least recently, the longest time ago, is the\none that I'm least likely,",
    "start": "1059660",
    "end": "1067570"
  },
  {
    "text": "that's the assumption,\nto touch again. And in this case, what\ncolor would it be? Red. It's red, so we're going to\ndrop red and bring in green.",
    "start": "1067570",
    "end": "1076660"
  },
  {
    "text": "So this is a cold miss on\ngreen, because I've never touched green before.",
    "start": "1076660",
    "end": "1081830"
  },
  {
    "text": "It's the first time\nI've touched this data. So this will continue. Hit, then we get to\naddress 12, or xC.",
    "start": "1081830",
    "end": "1091900"
  },
  {
    "text": "It's another cold miss, and\nwe got to throw out blue.",
    "start": "1091900",
    "end": "1097000"
  },
  {
    "text": "Exactly. Next question, someone? Yes. In computer\narchitecture, is in this",
    "start": "1097000",
    "end": "1102950"
  },
  {
    "text": "called a capacity miss, since\nwe're throwing something out? No, this is a cold miss.",
    "start": "1102950",
    "end": "1108057"
  },
  {
    "text": "It's the first time\nyou've touched the data. The name of the miss is relative\nto the data that I'm accessing.",
    "start": "1108057",
    "end": "1113900"
  },
  {
    "text": "If we would have had an\ninfinitely-sized cache, I still would have\nmissed here, it's",
    "start": "1113900",
    "end": "1119450"
  },
  {
    "text": "the first time I've touched it. But your question\nis relevant now. ",
    "start": "1119450",
    "end": "1127590"
  },
  {
    "text": "So what happens when I go back. [INAUDIBLE]",
    "start": "1127590",
    "end": "1132820"
  },
  {
    "text": "Yeah, well. [LAUGHS] So here, look what's happened.",
    "start": "1132820",
    "end": "1137929"
  },
  {
    "text": "I have already accessed address\n0, right at the very beginning. If I had an infinitely large\ncache, or arguably a cache that",
    "start": "1137930",
    "end": "1146620"
  },
  {
    "text": "could store 16 bytes, that\nwould have been a hit. So that's a myth that occurred,\nbecause of the-- actually",
    "start": "1146620",
    "end": "1153143"
  },
  {
    "text": "I even got that wrong,\nthat's a capacity myth. Sorry. [LAUGHS] Hold on one second. ",
    "start": "1153143",
    "end": "1164065"
  },
  {
    "text": "My bad. ",
    "start": "1164065",
    "end": "1170350"
  },
  {
    "text": "So this is a myth that occurred\nonly because a cache has a finite size.",
    "start": "1170350",
    "end": "1176500"
  },
  {
    "text": "If I could have put\nmy garage on my desk, I would have been\nhitting on everything.",
    "start": "1176500",
    "end": "1183520"
  },
  {
    "text": "You asked me about\na capacity miss. A capacity miss is actually a\nmiss that we will not talk about",
    "start": "1183520",
    "end": "1188620"
  },
  {
    "text": "in this class, but\ncomes from the fact that the cache might\nhave been big enough, but the organization\nof where data goes",
    "start": "1188620",
    "end": "1196480"
  },
  {
    "text": "doesn't allow the data\nto still be there. What? You mixed it up again,\nyou have a conflict.",
    "start": "1196480",
    "end": "1202300"
  },
  {
    "text": "Oh, sorry. Yeah, that's fine. Yeah sorry. A conflict miss is one where\nthe organization of the cache",
    "start": "1202300",
    "end": "1208773"
  },
  {
    "text": "means that, like, hey, I\ncould have put it somewhere if I could have put any\ndata anywhere in the cache. But increasingly\nlarge caches tend",
    "start": "1208773",
    "end": "1216190"
  },
  {
    "text": "to have policies that say\nthis data can only go here, and this data can only go here. Yeah?",
    "start": "1216190",
    "end": "1221679"
  },
  {
    "text": "Besides to changing\nnames, is there anything different with regards to this\nmiss than the other misses?",
    "start": "1221680",
    "end": "1229090"
  },
  {
    "text": "No. The name is giving you a reason.",
    "start": "1229090",
    "end": "1234280"
  },
  {
    "text": "And, really, if you\nthink about it as, so when you evict something,\nwhen you evict a line,",
    "start": "1234280",
    "end": "1241000"
  },
  {
    "text": "your behavior will be different,\nbased on whether or not that line has been written to. Because if it hasn't been\nwritten to and only read,",
    "start": "1241000",
    "end": "1247810"
  },
  {
    "text": "you just toss it. If it hasn't been\nwritten to you, you've got to push that\ndata back out to memory, so that's the\nbiggest difference.",
    "start": "1247810",
    "end": "1253480"
  },
  {
    "text": "Yes? [INAUDIBLE] address\n[INAUDIBLE] after 0 times 4,",
    "start": "1253480",
    "end": "1260720"
  },
  {
    "text": "the address would be 0-- Sorry. After 0--",
    "start": "1260720",
    "end": "1265940"
  },
  {
    "text": "So you got 0, 1, 2, 3, 4-- Yeah, and then we put it to\n0, 5, which gives the 0, 4.",
    "start": "1265940",
    "end": "1273770"
  },
  {
    "text": "I wonder what would happen, will\nthe line through go from 5 to--",
    "start": "1273770",
    "end": "1278930"
  },
  {
    "text": "No. And this would be a good thing\nfor you to just work out. But what I do want to say is\nsimilar to the earlier question,",
    "start": "1278930",
    "end": "1287840"
  },
  {
    "text": "the mapping of cache lines\nto addresses, that is fixed.",
    "start": "1287840",
    "end": "1294830"
  },
  {
    "text": "A cache doesn't even think\nabout addresses, really, it thinks about cache lines. And so I've just divided\nmy address space up",
    "start": "1294830",
    "end": "1301460"
  },
  {
    "text": "into these mod cache line size. So if you decided to go, I\nwant to read 0, 1, 2, 3, 5,",
    "start": "1301460",
    "end": "1312060"
  },
  {
    "text": "5 would trigger the\nblue cache line. So what you've done\nis you've actually",
    "start": "1312060",
    "end": "1318200"
  },
  {
    "text": "reduced the spatial\nlocality of your accesses. So if you did 0, 1,\n2, 3 5, 6, 7, 8, 10,",
    "start": "1318200",
    "end": "1329010"
  },
  {
    "text": "you just would be loading four\nvalues in this case, the cache line and never\ntouching one of them.",
    "start": "1329010",
    "end": "1334800"
  },
  {
    "text": "So you're incurring memory\ntraffic or communication that you didn't need, but that's\njust the way the underlying",
    "start": "1334800",
    "end": "1341430"
  },
  {
    "text": "implementation works. I'll take two more questions,\nthen I'll keep it moving. Yeah?",
    "start": "1341430",
    "end": "1346760"
  },
  {
    "text": "I'm wondering if you could\nsay a little bit more about the difference\nbetween a capacity miss and a conflict miss?",
    "start": "1346760",
    "end": "1352279"
  },
  {
    "text": "I'd rather not right\nnow, actually-- We'll come back. --because I don't\nbelieve that anybody has had any set associativity,\nor that stuff, so I'm not.",
    "start": "1352280",
    "end": "1362630"
  },
  {
    "text": "You're asking questions about\nhow to design real caches now. So maybe-- I'm\nbelaboring the point,",
    "start": "1362630",
    "end": "1369230"
  },
  {
    "text": "but when we talk about asking\nthis and cold miss, you put it, the processor doesn't know\nthere was a capacity--",
    "start": "1369230",
    "end": "1376070"
  },
  {
    "text": "It doesn't matter. Maybe in hindsight, I\nshould have said miss. [LAUGHS]",
    "start": "1376070",
    "end": "1381830"
  },
  {
    "text": "But for the sake of the\nclass, it's it's a miss. Either way, it's I don't have\nthe data, I've got to go get it.",
    "start": "1381830",
    "end": "1388170"
  },
  {
    "text": "And I need to invoke\nmy eviction policy to figure out who's leaving, the\nreason for that doesn't matter.",
    "start": "1388170",
    "end": "1396030"
  },
  {
    "text": "The only thing that\nthe reason matters for would be, if you\nknew the reason,",
    "start": "1396030",
    "end": "1403470"
  },
  {
    "text": "you might be able to change\nyour program a little bit",
    "start": "1403470",
    "end": "1409200"
  },
  {
    "text": "to avoid the mess. All good All right, last one. Yeah, what's the overhead for\nloading in the cache line?",
    "start": "1409200",
    "end": "1418730"
  },
  {
    "text": "And if there's a\nsignificant overhead, is there a ratio of\nload to cache line",
    "start": "1418730",
    "end": "1424343"
  },
  {
    "text": "that you need in order for\nit to be time economical? We're going to slowly\ngraduate towards all that, because the reason\nwhy I'm spending",
    "start": "1424343",
    "end": "1430889"
  },
  {
    "text": "all this time on a cache\nis for those reasons. But the main thing that\nI want you to take away",
    "start": "1430890",
    "end": "1436529"
  },
  {
    "text": "is that cache is exist. There are an\nimplementation detail.",
    "start": "1436530",
    "end": "1442840"
  },
  {
    "text": "If I took the cache\nout of the computer, you would get the\nsame results, it just may run slower, that's\nthe most important thing.",
    "start": "1442840",
    "end": "1451750"
  },
  {
    "text": "And the cache is exist to reduce\nthe latency of memory access",
    "start": "1451750",
    "end": "1457260"
  },
  {
    "text": "so that this processor\nis not waiting. Now under the hood, if I had\nto elaborate a little bit more",
    "start": "1457260",
    "end": "1463080"
  },
  {
    "text": "in the same way that I\nhave a desktop, a filing cabinet, a hallway\ncloset, and a garage,",
    "start": "1463080",
    "end": "1469570"
  },
  {
    "text": "and I put different stuff\nin those different storages based on how often\nI might need them, most modern computers have a\nhierarchy of various caches.",
    "start": "1469570",
    "end": "1478720"
  },
  {
    "text": "And I think a\nreasonable rule of thumb is that if a unit of storage\nis bigger, it is farther away,",
    "start": "1478720",
    "end": "1486790"
  },
  {
    "text": "and it has higher\nlatency to access. And we'll also talk about how\nit actually has higher energy to access and stuff like that.",
    "start": "1486790",
    "end": "1492679"
  },
  {
    "text": "But for example, if you rip\nopen most modern machines, you usually see a\nL1 cache, that's",
    "start": "1492680",
    "end": "1498580"
  },
  {
    "text": "pretty small, a\nfew kilobytes right next to the processor that can\nbe accessed in a few cycles.",
    "start": "1498580",
    "end": "1503710"
  },
  {
    "text": "If you miss the L1,\nyou'll ask the L2. If you miss the L2,\noften you'll see an L3.",
    "start": "1503710",
    "end": "1508973"
  },
  {
    "text": "And if you miss the L3,\nyou'll go out to DRAM. And this is something I\nshowed you to finish class up. You started to hint about what\nare the consequences of missing.",
    "start": "1508973",
    "end": "1517990"
  },
  {
    "text": "So these are all this\ngraph is to scale of the number of cycles. A few years ago, now, on\nIntel CPUs that it took,",
    "start": "1517990",
    "end": "1525980"
  },
  {
    "text": "if you issued an instruction,\nhow long would it take to get the data\nin an L1 cache hit? It was about four\ncycles pipeline,",
    "start": "1525980",
    "end": "1533720"
  },
  {
    "text": "so you can actually\nreally cover that. If I did it in animation,\nabout that fast.",
    "start": "1533720",
    "end": "1539860"
  },
  {
    "text": "If you get it out the\nnext level of cache, it's going to take a little bit\nlonger, the next level of cache",
    "start": "1539860",
    "end": "1544870"
  },
  {
    "text": "is going to take a\nlittle bit longer. And if you miss this\ncache hierarchy,",
    "start": "1544870",
    "end": "1549880"
  },
  {
    "text": "you're definitely waiting. So consider a\nsystem that's load,",
    "start": "1549880",
    "end": "1555370"
  },
  {
    "text": "do some math,\nload, do some math. We're worried about using four\ncores, getting a 4X speed up,",
    "start": "1555370",
    "end": "1562540"
  },
  {
    "text": "and if you get\nyour memory wrong, you could potentially be\noff by a factor of 250.",
    "start": "1562540",
    "end": "1568720"
  },
  {
    "text": "So the scale of these effects\nthat deal with data movement are enormous, that's like\nus finishing up last time.",
    "start": "1568720",
    "end": "1578600"
  },
  {
    "text": "Yeah? One question is, you're\ntaking it from RAM, and you're putting into L1. Is that [INAUDIBLE]\nlike putting it into L1?",
    "start": "1578600",
    "end": "1585940"
  },
  {
    "text": "Well, that's the latency\nthat I'm talking about. Think about it this way\nis, if the data is in DRAM,",
    "start": "1585940",
    "end": "1592090"
  },
  {
    "text": "and the processor\nsays, I want address X, let's think about the moving\nit from DRAM into the L3,",
    "start": "1592090",
    "end": "1599370"
  },
  {
    "text": "bringing it from the L3\nto the L2, L2 to the L1, all the way to the\nprocessor, that's 250. Is there no way to just\nbring it directly in L1,",
    "start": "1599370",
    "end": "1605980"
  },
  {
    "text": "and just directly-- There are ways. Yeah, there are ways. There are instructions you\ncan say is, read this data,",
    "start": "1605980",
    "end": "1611530"
  },
  {
    "text": "and I want you to\nbypass all the caches. I don't think there is\nmuch about reducing latency",
    "start": "1611530",
    "end": "1616930"
  },
  {
    "text": "as they are about not\npolluting your caches. I have a feeling it\nactually probably goes",
    "start": "1616930",
    "end": "1623200"
  },
  {
    "text": "through the whole path, and\nthen just doesn't get stored, would be how I would\nimplement it, I guess. ",
    "start": "1623200",
    "end": "1630009"
  },
  {
    "text": "Oops shoot. [LAUGHS] All right. I'm going to reemphasize\nthis, but apparently Keynote",
    "start": "1630010",
    "end": "1635548"
  },
  {
    "text": "won't let me go through\nuntil the animation's done. [LAUGHS] While we're waiting,\nyes go ahead.",
    "start": "1635548",
    "end": "1642886"
  },
  {
    "text": "[INAUDIBLE] DRAM, instead\nof just update the--",
    "start": "1642886",
    "end": "1651470"
  },
  {
    "text": "Yeah, that was the\nquestion here is like, are there really any\nbenefits on a modern system of bypassing the whole thing?",
    "start": "1651470",
    "end": "1659732"
  },
  {
    "text": "They're not going to\nbe latency benefits. ",
    "start": "1659732",
    "end": "1667419"
  },
  {
    "text": "Let's put memory\naside, it's coming back at the end of the day. But now let's go back to\nprocessing a little bit.",
    "start": "1667420",
    "end": "1673850"
  },
  {
    "text": "So the rest of the\nlecture is going to be talking about three\nmajor ideas on parallelism,",
    "start": "1673850",
    "end": "1681100"
  },
  {
    "text": "and how we start adding more\nand more capability to do more stuff into a machine.",
    "start": "1681100",
    "end": "1686470"
  },
  {
    "text": "And we're going to come full\ncircle and end up saying, some of these ideas are about\ncombating this latency problem.",
    "start": "1686470",
    "end": "1693350"
  },
  {
    "text": "So I already gave\nyou caches as one way to combat the latency problem. ",
    "start": "1693350",
    "end": "1699490"
  },
  {
    "text": "So here's an example\nprogram that I'm going to use as the running\nexample for the next 50 minutes, or the next 47 minutes.",
    "start": "1699490",
    "end": "1705670"
  },
  {
    "text": "This is some\nstraight line C code. Take a look at it, make\nsure you know what it does. What it does is, it takes\nas input an array x, it",
    "start": "1705670",
    "end": "1714970"
  },
  {
    "text": "reads N values from\nthe array x, it writes N values to the array y.",
    "start": "1714970",
    "end": "1721370"
  },
  {
    "text": "And what it does is for\nevery input value x, it approximates the sine of x,\ngiven a numerical approximation,",
    "start": "1721370",
    "end": "1732890"
  },
  {
    "text": "using the Taylor expansion. So how it computes the\nsine of x doesn't matter, the only thing that\nmatters, really,",
    "start": "1732890",
    "end": "1738520"
  },
  {
    "text": "is you look at the\nC code, you go, OK, I've got a piece of C code\nfor outermost loop for i",
    "start": "1738520",
    "end": "1744740"
  },
  {
    "text": "equals 0 to N. For\nevery input element, perform a computation\nthat ultimately computes",
    "start": "1744740",
    "end": "1750620"
  },
  {
    "text": "value, and is stored\nto the output element. The inner for-loop is just\nan iterative algorithm",
    "start": "1750620",
    "end": "1757759"
  },
  {
    "text": "to approximate sine. So what this is\ndoing, doesn't really matter, you could just think\nabout this as some function that",
    "start": "1757760",
    "end": "1765162"
  },
  {
    "text": "takes as input x sub i, and\noutputs sine of x sub i. Any questions about\nthe code, does anybody",
    "start": "1765162",
    "end": "1770360"
  },
  {
    "text": "need any more time to-- So that's all I want\nyou to think about. And my illustration\non the right just",
    "start": "1770360",
    "end": "1775775"
  },
  {
    "text": "shows you all the input values\nof x, and the output values of y, so it just does that.",
    "start": "1775775",
    "end": "1781920"
  },
  {
    "text": "So if we compile\nthis program, we run Clang or GCC, pick\nyour favorite compiler, we're going to get out a\nsequence of instructions",
    "start": "1781920",
    "end": "1788900"
  },
  {
    "text": "for this program. And I want you to focus on\nthe sequence of instructions",
    "start": "1788900",
    "end": "1795610"
  },
  {
    "text": "that's the basic block\ninside the for-loop. So at the moment, we're\ngoing to think about,",
    "start": "1795610",
    "end": "1800955"
  },
  {
    "text": "there's a sequence of\ninstructions that says, once I load x sub i,\nhere's all the stuff I have to do to produce the\nvalue that is then stored into y",
    "start": "1800955",
    "end": "1809100"
  },
  {
    "text": "sub i.  And now, given that\nsequence of instructions,",
    "start": "1809100",
    "end": "1816070"
  },
  {
    "text": "we're going to execute it. So that sequence of\ninstructions, the processor is going to say, OK,\nwhat's the next one, oh, it's a load of\nthis value, then",
    "start": "1816070",
    "end": "1822418"
  },
  {
    "text": "there's a multiply\nand so on and so on. It'll run those instructions,\nit'll produce a value. And then at some\npoint, at the end",
    "start": "1822418",
    "end": "1828160"
  },
  {
    "text": "of that, there will be a\nstore instruction, which says, store this value to the\naddress given by x sub i.",
    "start": "1828160",
    "end": "1834890"
  },
  {
    "text": "And just to repeat myself,\nif that processor is smart, it might look into that program,\ninto that instruction sequence",
    "start": "1834890",
    "end": "1842100"
  },
  {
    "text": "and go, yeah, there's\nsome of those instructions that can be done in\nparallel, let me back up and let's look at it.",
    "start": "1842100",
    "end": "1849380"
  },
  {
    "text": "We certainly can find some\nstuff, like this computing the numerator is independent\nof computing the denominator,",
    "start": "1849380",
    "end": "1858090"
  },
  {
    "text": "so there's a little bit of\ninstruction level parallelism there. And so one way for me to run\nthis program a little bit faster",
    "start": "1858090",
    "end": "1864710"
  },
  {
    "text": "would be to take the\nsuperscalar idea. I'm going to build a\nprocessor, it still has one set of registers,\nit has access to memory,",
    "start": "1864710",
    "end": "1872450"
  },
  {
    "text": "but it has the\nability to figure out if there's two instructions\nthat can be done in parallel, and it has two execution units\nto do them if it wants to.",
    "start": "1872450",
    "end": "1881030"
  },
  {
    "text": "Again, you compile\nyour program and see, you see a sequence\nof instructions, processor Intel does this or\nAMD does this under the hood,",
    "start": "1881030",
    "end": "1888600"
  },
  {
    "text": "you never know. But in this program, or at least\nin this region of the program,",
    "start": "1888600",
    "end": "1894790"
  },
  {
    "text": "there's not any ILP just in\nthose instructions that I chose,",
    "start": "1894790",
    "end": "1901950"
  },
  {
    "text": "they are all dependent. So this processor,\nif it was running that sequence of\ninstructions, is only",
    "start": "1901950",
    "end": "1908250"
  },
  {
    "text": "going to be making use of\none of these execution units, and one of these fetch and\ndecodes, there is no ILP here.",
    "start": "1908250",
    "end": "1915060"
  },
  {
    "text": "So this gets back to\nthe broader thing.",
    "start": "1915060",
    "end": "1923020"
  },
  {
    "text": "But there's tons of\nparallelism in this program, because we can process every\nelement of this array completely",
    "start": "1923020",
    "end": "1930420"
  },
  {
    "text": "in parallel. But if all the\nprocessor is doing is looking at micro\ninstruction sequences,",
    "start": "1930420",
    "end": "1938700"
  },
  {
    "text": "all it sees is\ndependent instructions. It doesn't have\nthe ability, or it would be intractable\nto have the ability",
    "start": "1938700",
    "end": "1946710"
  },
  {
    "text": "to look over a huge\nwindow of the program, like that outer for-loop\nand go, oh, even though this",
    "start": "1946710",
    "end": "1953250"
  },
  {
    "text": "is a for-loop in C Plus Plus,\nand technically every loop iteration is dependent,\nbecause there's i Plus Plus,",
    "start": "1953250",
    "end": "1961020"
  },
  {
    "text": "they all seem to be accessing\ndifferent input variables, that's the type of\nanalysis that goes",
    "start": "1961020",
    "end": "1967710"
  },
  {
    "text": "well beyond what could happen\nin a clock tick in hardware. So what hardware architects\ndid is they said,",
    "start": "1967710",
    "end": "1976740"
  },
  {
    "text": "you know what, let's just assume\nthat the programmer tells us",
    "start": "1976740",
    "end": "1982500"
  },
  {
    "text": "where that parallelism\nis so, we don't have to work so hard for it. So I made that diagram that\nI had on the last slide,",
    "start": "1982500",
    "end": "1990330"
  },
  {
    "text": "just a little bit fancier. I said, look, you had this\nout-of-order execution logic, outside of this class,\nthere's all this other fun stuff",
    "start": "1990330",
    "end": "1998910"
  },
  {
    "text": "that's in a processor to make\nan instruction stream go faster, a lot it's about not\naccessing memory.",
    "start": "1998910",
    "end": "2004820"
  },
  {
    "text": "You might put a\nbig old data cache that has a ton of transistors to\nhold a bunch of data on cache. You might actually\nhave logic that",
    "start": "2004820",
    "end": "2010820"
  },
  {
    "text": "predicts what memory\nyou're going to access in the future as a prefecture. They had all this fancy stuff\nin there to try and make",
    "start": "2010820",
    "end": "2017240"
  },
  {
    "text": "the inner loop go\nas fast as possible, but there's this outer loop\nthat's trivial to parallelize.",
    "start": "2017240",
    "end": "2025220"
  },
  {
    "text": "So idea number one is, let's\ntake some of this fancy stuff out, maybe a little\nbit smaller data cache.",
    "start": "2025220",
    "end": "2033150"
  },
  {
    "text": "We're not going to maybe do\nas much out-of-order execution or anything like that. And if we clear\nall that stuff out,",
    "start": "2033150",
    "end": "2040040"
  },
  {
    "text": "we just have our basic\nprocessor with just a few, which needs far\nfewer transistors.",
    "start": "2040040",
    "end": "2045770"
  },
  {
    "text": "And I'm going to use\nall those transistors I have on a modern chip to\njust make more of these, to just replicate this, to\nmake more of these processors.",
    "start": "2045770",
    "end": "2055199"
  },
  {
    "text": "So now I have a processor,\nbut it's a parallel processor. And I'm going to\nuse the term core,",
    "start": "2055199",
    "end": "2061589"
  },
  {
    "text": "but there's nothing precise\nabout this in the industry. So now I have a\nmulti-core processor",
    "start": "2061590",
    "end": "2067199"
  },
  {
    "text": "that just duplicated\neverything that was needed to run one instruction stream.",
    "start": "2067199",
    "end": "2072870"
  },
  {
    "text": "So if I give this processor two\ninstruction streams and say, hey, core 0 run this\ninstruction stream, and core 2,",
    "start": "2072870",
    "end": "2080669"
  },
  {
    "text": "do that instruction stream,\nI might be better off. For example, maybe these\ncores, because they",
    "start": "2080670",
    "end": "2086940"
  },
  {
    "text": "don't have all the\nfancy stuff in them, can run one instruction\nstream 25% slower,",
    "start": "2086940",
    "end": "2092958"
  },
  {
    "text": "Maybe they take more cache\nmisses, because the cache is smaller, or maybe they\nmispredicted a branch or something like that.",
    "start": "2092958",
    "end": "2099119"
  },
  {
    "text": "But now with those\nsame resources, I can have two of these things. And if I put both\nof them running",
    "start": "2099120",
    "end": "2104849"
  },
  {
    "text": "on different elements of\nthe array at the same time, I have a two-core processor\nthat might run 1.5 times faster.",
    "start": "2104850",
    "end": "2112405"
  },
  {
    "text": "I see some questions. Yes? When you talk about the\nexecution [INAUDIBLE] how do you duplicate the registers here--",
    "start": "2112405",
    "end": "2117910"
  },
  {
    "text": "Yeah, we just\nduplicated everything. We duplicated the hardware\nfor executing instructions, we duplicated the registers.",
    "start": "2117910",
    "end": "2124430"
  },
  {
    "text": "There's an R0, R1, R2 here. There's a R0, R1 R2 here. And there's the ability for\neach of these processing cores",
    "start": "2124430",
    "end": "2131289"
  },
  {
    "text": "to take a look at the\ninstruction stream that they're supposed to run,\nand say, my little exec unit here needs to run\nthis instruction next.",
    "start": "2131290",
    "end": "2138110"
  },
  {
    "text": "And if that instruction is\nmultiply R0, and R0, and R1 that's modifying\nthese registers.",
    "start": "2138110",
    "end": "2144010"
  },
  {
    "text": "I just think compared to what I\nused to write [INAUDIBLE] having",
    "start": "2144010",
    "end": "2151300"
  },
  {
    "text": "the execution context,\nI'm not sure if that-- Yeah, we're\nduplicating everything. We're duplicating everything.",
    "start": "2151300",
    "end": "2158510"
  },
  {
    "text": "Yeah? So talking about the\nresources, you just mentioned, so you using two transistors.",
    "start": "2158510",
    "end": "2166210"
  },
  {
    "text": "You have an option,\nyou can either create a superscalar\nprocessor, or create two cores.",
    "start": "2166210",
    "end": "2171530"
  },
  {
    "text": "Two simpler pr-- Yeah, exactly. Now notice that both\nmy multicore processor and a superscalar processor\nboth have to fetch and decode",
    "start": "2171530",
    "end": "2179500"
  },
  {
    "text": "units and two execution units. But I've decided to organize\nthem a little bit differently,",
    "start": "2179500",
    "end": "2185020"
  },
  {
    "text": "and now duplicate the\nexecution context. So I got rid of all that\nlogic to try and find ILP.",
    "start": "2185020",
    "end": "2194079"
  },
  {
    "text": "I got rid of logic, maybe to\nhave a really big data cache to avoid stalls. But now I have the\nability to, if you gave me",
    "start": "2194080",
    "end": "2201040"
  },
  {
    "text": "two instruction\nstreams, I'll guarantee that you'll run both of them\nand get double the performance. Yeah?",
    "start": "2201040",
    "end": "2207070"
  },
  {
    "text": "[INAUDIBLE] outer\nloop is parallel. So can you give me\ninstructions that--",
    "start": "2207070",
    "end": "2214190"
  },
  {
    "text": "It could, but then it's\nonly working on stuff that it knows statically.",
    "start": "2214190",
    "end": "2220180"
  },
  {
    "text": "In this case, modern advanced\ncompilers probably could. But the minute I throw a\nsmall wrinkle in that program,",
    "start": "2220180",
    "end": "2227350"
  },
  {
    "text": "the compiler is going\nto go, I don't know, I can't reason\nabout this anymore, and we have to rely\non the hardware. Yes?",
    "start": "2227350",
    "end": "2233170"
  },
  {
    "text": "Could you like,\nmaybe just add it, by just saying that, instead,\nI'll just do it in chunks.",
    "start": "2233170",
    "end": "2238380"
  },
  {
    "text": "[INAUDIBLE] Hold on. I love these comments,\nbecause it's fun.",
    "start": "2238380",
    "end": "2243680"
  },
  {
    "text": "You say, can't you\ntrivially just do it? That's the point. In a program like this, which\nlooks a lot like a tensor",
    "start": "2243680",
    "end": "2250990"
  },
  {
    "text": "operation, it's trivial for you,\nthe programmer, or maybe even",
    "start": "2250990",
    "end": "2256060"
  },
  {
    "text": "a software compiler,\nto generate code that says this is different from\nthis, it's parallel, trust me.",
    "start": "2256060",
    "end": "2263890"
  },
  {
    "text": "We don't need to rely\non hardware to do it. So the observation is that doing\nthat automatically in hardware",
    "start": "2263890",
    "end": "2270820"
  },
  {
    "text": "is not an efficient\nuse of resources. What's better is to\npush that up the stack.",
    "start": "2270820",
    "end": "2278050"
  },
  {
    "text": "Now, right now, this is\nvalid compilable C code. If you compile it,\nClang will kick out,",
    "start": "2278050",
    "end": "2284740"
  },
  {
    "text": "unless you're turning on\nsome very fancy stuff, a single instruction stream,\nbecause the semantics",
    "start": "2284740",
    "end": "2290950"
  },
  {
    "text": "of this program are serial. So if I take this program,\nand I run it on my dual core",
    "start": "2290950",
    "end": "2297010"
  },
  {
    "text": "processor, I'm going to create\none instruction stream to run on one of those cores, and\nthose cores are wimpy cores,",
    "start": "2297010",
    "end": "2302990"
  },
  {
    "text": "it's going to run slower. Does that make sense? So I've got to\nchange my program.",
    "start": "2302990",
    "end": "2309990"
  },
  {
    "text": "So let's do it in the\nonly way that we know how. Assuming that you've taken 111,\nis let's spawn some threads.",
    "start": "2309990",
    "end": "2317150"
  },
  {
    "text": "So take a look at this program. Take a break, I've\nbeen talking a lot. Talk to your partner, or\nyour friend, or your enemy,",
    "start": "2317150",
    "end": "2324440"
  },
  {
    "text": "or whatever for\n45 seconds, and I want you to tell me\nwhat this program does. And specifically, what I mean\nis it computes the same answer",
    "start": "2324440",
    "end": "2331790"
  },
  {
    "text": "as everything I've shown you. But there's two threads,\nthere's the original thread, and there's the\nthread that I spawn.",
    "start": "2331790",
    "end": "2338369"
  },
  {
    "text": "One thread deals with some\nelements, another thread deals with some other elements. What thread does what?",
    "start": "2338370",
    "end": "2343880"
  },
  {
    "text": "Take thirty seconds to\njust talk that over. [CHATTER]",
    "start": "2343880",
    "end": "2349317"
  },
  {
    "text": " All right. Somebody tell me, how does this\nprogram, divide the parallel,",
    "start": "2349318",
    "end": "2354940"
  },
  {
    "text": "work? Yeah? So the main thread does the\nsecond half of the work, which is sine x, the main program\ndoes the second half,",
    "start": "2354940",
    "end": "2363140"
  },
  {
    "text": "and the thread does\nthe first half portion. Yeah. So I have two threads,\nthey both called sine x.",
    "start": "2363140",
    "end": "2369620"
  },
  {
    "text": "The main thread actually\nworks on the pointers",
    "start": "2369620",
    "end": "2374810"
  },
  {
    "text": "at x plus N, which is actually\nN over 2, args.N. So the thread",
    "start": "2374810",
    "end": "2382220"
  },
  {
    "text": "I spawned does the first half,\nthe thread that I already had does the second half.",
    "start": "2382220",
    "end": "2388280"
  },
  {
    "text": "That doesn't matter. What does matter is,\nas the programmer, I've created two threads.",
    "start": "2388280",
    "end": "2395660"
  },
  {
    "text": "And from the programmer's\nperspective, a thread, from the machine's perspective,\ntwo instruction streams.",
    "start": "2395660",
    "end": "2401645"
  },
  {
    "text": "The operating system here, which\nwe're not going to talk about, just says look, here's a\nprogram with two threads, two instruction\nstreams, hey processor,",
    "start": "2401645",
    "end": "2408290"
  },
  {
    "text": "here's two instruction streams. And the processor goes,\nOK, I'll run one on core 0, and the other one on core 1.",
    "start": "2408290",
    "end": "2414770"
  },
  {
    "text": "But without me\nexplicitly creating parallelism, or some\nmagical compiler",
    "start": "2414770",
    "end": "2419990"
  },
  {
    "text": "explicitly creating\nparallelism, this processor is not given two instruction\nstreams to want to run.",
    "start": "2419990",
    "end": "2426950"
  },
  {
    "text": "Now, another way\nto think about this is you're like, gosh,\nlike this is gnarly. I even had to ask you\nto parse the code.",
    "start": "2426950",
    "end": "2432262"
  },
  {
    "text": "Really the way you\nwant to think about it is, if I go back to the original\nprogram, you'd probably be like,",
    "start": "2432262",
    "end": "2438560"
  },
  {
    "text": "it's a lot more intuitive\njust to have some way to say that outer for-loop is\nparallel, or is independent.",
    "start": "2438560",
    "end": "2445369"
  },
  {
    "text": "By saying, look, everything\nin this outer for-loop, you can do independently\non different threads. If you want to, you go figure\nout what threads should do what.",
    "start": "2445370",
    "end": "2453930"
  },
  {
    "text": "And so you should assume\nthat in modern programming languages, whether\nit be PyTorch,",
    "start": "2453930",
    "end": "2462730"
  },
  {
    "text": "or any programming language\nthat has parallel constructs, there's almost always\nsome way to have some form of a\nfor-loop, an iterator,",
    "start": "2462730",
    "end": "2470190"
  },
  {
    "text": "where you, the programmer,\ndeclare, trust me, I know you can do all the\nloop iterations in parallel",
    "start": "2470190",
    "end": "2476760"
  },
  {
    "text": "if you want to. So what I did here\nis I made up syntax,",
    "start": "2476760",
    "end": "2481809"
  },
  {
    "text": "this is not valid C anymore. And I just said,\nimagine a for-all loop, where instead of saying\ni Plus Plus, instead",
    "start": "2481810",
    "end": "2489750"
  },
  {
    "text": "of empirically saying, here's\nhow we iterate all the loops, I just look, there's\na for-all loop.",
    "start": "2489750",
    "end": "2495390"
  },
  {
    "text": "There's going to\nbe N iterations. You can identify your current\niteration by the variable i.",
    "start": "2495390",
    "end": "2501540"
  },
  {
    "text": "And I guarantee you that,\nI wrote the program, I know that all those iterations\nare potentially parallel,",
    "start": "2501540",
    "end": "2509370"
  },
  {
    "text": "you can do them in parallel, and\nyou will get the same answer, we're good. And if I write code in this\nhigher level of abstraction,",
    "start": "2509370",
    "end": "2517770"
  },
  {
    "text": "shoot, it's not hard at all. All of you could\nsit down and go, I know how I'd do\nthat, I would actually,",
    "start": "2517770",
    "end": "2523380"
  },
  {
    "text": "if I was running on a\nmachine with two cores, I would create two\nthreads, and then I would create a for-loop\non each, and one of them",
    "start": "2523380",
    "end": "2529170"
  },
  {
    "text": "would do half. You could think through how you\nwould transform this program",
    "start": "2529170",
    "end": "2534420"
  },
  {
    "text": "into this program, if\nyou knew you were running on a two-core processor. Now Imagine we weren't running\non a two-core processor,",
    "start": "2534420",
    "end": "2541440"
  },
  {
    "text": "you were running on a\nfour-core processor. If you wrote code with\nP threads like this, you would be like, shoot,\nI'm only actually going",
    "start": "2541440",
    "end": "2547282"
  },
  {
    "text": "to use two of those four cores. Whereas that's why it's\nuseful to think about how",
    "start": "2547282",
    "end": "2553070"
  },
  {
    "text": "the programming model can give\nme a much more abstract way to just say, this\nstuff is independent,",
    "start": "2553070",
    "end": "2558560"
  },
  {
    "text": "and however you want to schedule\nit in parallel, you can. Because if I start\nwriting code like this,",
    "start": "2558560",
    "end": "2564200"
  },
  {
    "text": "if I happen to run on\na four-core machine under the hood, that runtime\ncan spawn four threads.",
    "start": "2564200",
    "end": "2569940"
  },
  {
    "text": "Or if I'm running on\na 16-core machine, it can spawn 16 threads.",
    "start": "2569940",
    "end": "2575180"
  },
  {
    "text": "I don't need to know\nas a programmer, all I'm doing is I'm saying,\ntrust me, these iterations are independent, create as\nmany instruction streams",
    "start": "2575180",
    "end": "2581630"
  },
  {
    "text": "as you feel appropriate on the\ncomputer that you're running on. So I can scale up\nto a lot of cores",
    "start": "2581630",
    "end": "2586940"
  },
  {
    "text": "pretty quickly if I take out\na lot of the fancy stuff, if I start getting rid of a\nlot of superscalar execution,",
    "start": "2586940",
    "end": "2594410"
  },
  {
    "text": "if I maybe move\nto smaller caches, I do all the things\nthat architects have",
    "start": "2594410",
    "end": "2599610"
  },
  {
    "text": "done to make single\ninstruction streams run fast. I can rip some of them\nout, and in a modern era,",
    "start": "2599610",
    "end": "2604770"
  },
  {
    "text": "I can get a lot of\ncores on a chip. So here's an Intel CPU. If you look at a\nchip diagram, you can just see where\nthe transistors",
    "start": "2604770",
    "end": "2611880"
  },
  {
    "text": "for the various cores are.  That's a 10-core Intel.",
    "start": "2611880",
    "end": "2617350"
  },
  {
    "text": "This is actually the RTX 4090. And if you look closely,\nthe replicated unit is about this size, there's\nabout 144 of them on there.",
    "start": "2617350",
    "end": "2625115"
  },
  {
    "text": " NVIDIA likes to call them SMs\nfor shared multiprocessors,",
    "start": "2625115",
    "end": "2630630"
  },
  {
    "text": "but that's the granularity\nof the duplication. Pull out your iPhone, and if\nyou look at Apple's bionic chip,",
    "start": "2630630",
    "end": "2639119"
  },
  {
    "text": "there's six CPU cores in there. They're actually\nheterogeneous, they're not even the same design.",
    "start": "2639120",
    "end": "2645130"
  },
  {
    "text": "So you have two cores that\nare bigger cores, that have more of the big caches,\nthe out-of-order execution",
    "start": "2645130",
    "end": "2651210"
  },
  {
    "text": "in order to run\nsingle threads fast. And then for stuff where\nyou have more parallelism, they have additional\nfour small cores,",
    "start": "2651210",
    "end": "2658050"
  },
  {
    "text": "where more of that superscalar\nstuff has been ripped out and things like that. ",
    "start": "2658050",
    "end": "2666720"
  },
  {
    "text": "And we've already discussed\nthis a little bit. So I said that if I write\ncode in this manner,",
    "start": "2666720",
    "end": "2676140"
  },
  {
    "text": "here's what we need to compute,\nbut here are the computations that can be done independently.",
    "start": "2676140",
    "end": "2682500"
  },
  {
    "text": "There's another property of\nthis code that's pretty nice. I'm saying that everything that\nis being done independently,",
    "start": "2682500",
    "end": "2691200"
  },
  {
    "text": "it's actually doing\nthe same thing. ",
    "start": "2691200",
    "end": "2696370"
  },
  {
    "text": "The same body of the loop is\nbeing done by all threads, if I executed this thing. The only thing different is\nthat they're loading and storing",
    "start": "2696370",
    "end": "2703390"
  },
  {
    "text": "different values. So that gets me to the\nnext major idea here.",
    "start": "2703390",
    "end": "2708960"
  },
  {
    "text": "So what folks said is, in a lot\nof these modern applications,",
    "start": "2708960",
    "end": "2714000"
  },
  {
    "text": "machine learning for\nsure, graphics for sure, any kind of numerical\ncomputing or data science,",
    "start": "2714000",
    "end": "2719280"
  },
  {
    "text": "or anything like\nthat, you're often working on code that\nlooks a lot like this.",
    "start": "2719280",
    "end": "2725000"
  },
  {
    "text": "I've got a big array of\nvalues, I've got a tensor, I need to do the same\nthing on everything. So what they decided\nto do, is now",
    "start": "2725000",
    "end": "2733210"
  },
  {
    "text": "there's a change to\nmy diagram, no change at all to the orange box. There's still a processor that\ngrabs one operation per clock,",
    "start": "2733210",
    "end": "2742069"
  },
  {
    "text": "can do the control. Like, OK, what is it, oh, it's\nan ad, oh, it's a multiply, Oh, It's a load.",
    "start": "2742070",
    "end": "2747130"
  },
  {
    "text": "But now I've actually\nreplicated my ALUs. So I have eight ALUs on this\ndiagram, or eight execution",
    "start": "2747130",
    "end": "2754599"
  },
  {
    "text": "units. And what's going to happen\nis, if the next instruction is an ad, we're not just going\nto do one ad on one value,",
    "start": "2754600",
    "end": "2761290"
  },
  {
    "text": "we're going to do eight ads\non eight different values. So all of these are locked\ntogether with the same control.",
    "start": "2761290",
    "end": "2768010"
  },
  {
    "text": "And for now, one way\nto think about it is, I also took all the registers,\nour 0, or our 1, or whatever,",
    "start": "2768010",
    "end": "2774520"
  },
  {
    "text": "and I turned them into\n8-wide vector registers. ",
    "start": "2774520",
    "end": "2782079"
  },
  {
    "text": "So let's see here. So I used to have a program,\nthat when we compiled it, we would compile it to\ninstructions that worked",
    "start": "2782080",
    "end": "2788530"
  },
  {
    "text": "on scalar registers, 32-bit\nvalues or 64-bit values.",
    "start": "2788530",
    "end": "2794980"
  },
  {
    "text": "That's what the C code does. But now I have a processor\nthat has the ability",
    "start": "2794980",
    "end": "2801310"
  },
  {
    "text": "to run an instruction that runs\non a vector of eight values, and should read and write\nvectors of registers.",
    "start": "2801310",
    "end": "2810670"
  },
  {
    "text": "So one way I can get the\ncompiler to generate these new",
    "start": "2810670",
    "end": "2816579"
  },
  {
    "text": "instructions that I need, is I\ncan open up my favorite parallel",
    "start": "2816580",
    "end": "2821980"
  },
  {
    "text": "programming library, and I\ncan change every variable in my program to the\nequivalent variables,",
    "start": "2821980",
    "end": "2828519"
  },
  {
    "text": "using these intrinsic macros,\nthat every variable here is a 256-bit or an 8 by\n32-bit float vector.",
    "start": "2828520",
    "end": "2838673"
  },
  {
    "text": " So all I did is I rewrote the\nprogram, where I took here",
    "start": "2838673",
    "end": "2844530"
  },
  {
    "text": "an int or a float,\nand I turned it into a float vector\nof eight things,",
    "start": "2844530",
    "end": "2849960"
  },
  {
    "text": "or an int vector\nof eight things. And then notice that my\noutermost for-loop is not",
    "start": "2849960",
    "end": "2856290"
  },
  {
    "text": "for i equals 0 to N, but\ni equals 0 to N by 8.",
    "start": "2856290",
    "end": "2861900"
  },
  {
    "text": "So every time through\nthis for-loop, I'm actually doing\nthe same logic, but I'm doing it\nfor eight things,",
    "start": "2861900",
    "end": "2868349"
  },
  {
    "text": "and I've also made the code\nalmost impossible to read. ",
    "start": "2868350",
    "end": "2877470"
  },
  {
    "text": "So now when this\nprogram gets compiled by a compiler that supports\nthese little macro functions,",
    "start": "2877470",
    "end": "2884190"
  },
  {
    "text": "the output are instructions\nthat modify vectors,",
    "start": "2884190",
    "end": "2890520"
  },
  {
    "text": "not instructions\nthat modify scalars. So you see the difference, I\nchanged my R0s to these XMS",
    "start": "2890520",
    "end": "2896880"
  },
  {
    "text": "just to indicate that they\nwere something different. So my compiled program processes\neight elements simultaneously,",
    "start": "2896880",
    "end": "2906220"
  },
  {
    "text": "using vector instructions\nwith one instruction stream. So I have one\ninstruction stream,",
    "start": "2906220",
    "end": "2912700"
  },
  {
    "text": "but the instructions\nnow are these wide ones. Now I can combine that with\nmultiple instruction streams.",
    "start": "2912700",
    "end": "2920049"
  },
  {
    "text": "So if I take this\nnew type of core,",
    "start": "2920050",
    "end": "2925240"
  },
  {
    "text": "and I apply it to my\n16-core processor, I have a 16-core processor that\nruns 16 instruction streams,",
    "start": "2925240",
    "end": "2933290"
  },
  {
    "text": "but the instructions in those\nstreams are processing eight pieces of data at once.",
    "start": "2933290",
    "end": "2938920"
  },
  {
    "text": "So altogether my chip has 16\ncores, 16 instruction streams,",
    "start": "2938920",
    "end": "2945790"
  },
  {
    "text": "16 times 8, or 128\nexecution units, which means I can do work on\n128 pieces of data at once.",
    "start": "2945790",
    "end": "2954920"
  },
  {
    "text": "So arguably, I could maybe\nbe going 128 times faster on the 16-core chip.",
    "start": "2954920",
    "end": "2962640"
  },
  {
    "text": "Notice that you could\nimagine, if I asked you to,",
    "start": "2962640",
    "end": "2967859"
  },
  {
    "text": "if you knew this\nwas a for all loop, you could turn this\nfor-all loop, if you were a little compiler, and\nin fact, assignment one,",
    "start": "2967860",
    "end": "2974340"
  },
  {
    "text": "you will do this,\ninto 16 threads, and those vector instructions\ninside those threads,",
    "start": "2974340",
    "end": "2982020"
  },
  {
    "text": "and change that for-all loop\nfor i equals 0 to N to i equals 0 to N by 8.",
    "start": "2982020",
    "end": "2987480"
  },
  {
    "text": "So you can imagine\nhow, if I asked you to do this in\none assignment, the value comes from you\nbeing told what is potentially",
    "start": "2987480",
    "end": "2995400"
  },
  {
    "text": "independent, the\nvalue is not from the mechanical transformation\ninto vector instructions",
    "start": "2995400",
    "end": "3000740"
  },
  {
    "text": "or threads. Question, yeah? I feel like we're just\ntaking for granted that we can shove all\n[INAUDIBLE] the registers.",
    "start": "3000740",
    "end": "3008600"
  },
  {
    "text": "Isn't it just trivial\nthen, to fetch all of that? Well, we're going to have some,\nand we've got to move that data.",
    "start": "3008600",
    "end": "3013730"
  },
  {
    "text": "We are suspending\ndisbelief temporarily on how costly it\nis to move data,",
    "start": "3013730",
    "end": "3020130"
  },
  {
    "text": "and we're first getting set up\non how to crank on that data. And then we're\ngoing to come back with the question at the end\nof, can we get the data there.",
    "start": "3020130",
    "end": "3027810"
  },
  {
    "text": "So this is a pretty,\nbig intellectual change.",
    "start": "3027810",
    "end": "3033840"
  },
  {
    "text": "This is a good time to raise\nyour hand if you can't mentally think through what's\ngoing on here.",
    "start": "3033840",
    "end": "3042240"
  },
  {
    "text": "I have 16 threads running on a\n16-core chip, and those threads,",
    "start": "3042240",
    "end": "3048690"
  },
  {
    "text": "the instruction stream, contains\ninstructions that are processing",
    "start": "3048690",
    "end": "3053730"
  },
  {
    "text": "8-wide vectors. And if I think of what's going\non at any moment in time, there's 128 pieces\nof work getting",
    "start": "3053730",
    "end": "3061170"
  },
  {
    "text": "done at any point in time. So if I perfectly parallelize,\nand I compare my performance",
    "start": "3061170",
    "end": "3067170"
  },
  {
    "text": "to my original\nstarting processor that had one core, and\none ALU per core,",
    "start": "3067170",
    "end": "3072990"
  },
  {
    "text": "I might be up to\n128 times faster. Yeah? Do you repeat Y [INAUDIBLE]\nto a vector-based atrocity?",
    "start": "3072990",
    "end": "3084250"
  },
  {
    "text": "Well, the first answer\nto your question is, now I have eight\nexecution units that can do eight things per core,\ninstead of one execution",
    "start": "3084250",
    "end": "3092650"
  },
  {
    "text": "unit that can do one thing. Your real question is,\nwell, why don't we just make",
    "start": "3092650",
    "end": "3098019"
  },
  {
    "text": "eight times more cores? And so what's going on\nis, we're amortizing a lot of the costs of\ncontrolling or processing",
    "start": "3098020",
    "end": "3106390"
  },
  {
    "text": "an instruction stream over\nthese eight execution units. And, like in my cartoon diagram,\nnotice that there's still",
    "start": "3106390",
    "end": "3112480"
  },
  {
    "text": "one fetch and decode unit. Can you still do, what's\nthe next instruction? OK, that instruction.",
    "start": "3112480",
    "end": "3117952"
  },
  {
    "text": "Great, now you're\njust going to say I'm going to run that\ninstruction on vector registers with my\nvector of ALUs.",
    "start": "3117952",
    "end": "3126190"
  },
  {
    "text": "So this is a good\nidea, because I can amortize the\ncosts of a processor",
    "start": "3126190",
    "end": "3132430"
  },
  {
    "text": "across many execution\nunits, and I can do that if my code\ndoes the same thing,",
    "start": "3132430",
    "end": "3139030"
  },
  {
    "text": "and it needs the same logic\nfor all of the elements. In terms of\nresources involved, I",
    "start": "3139030",
    "end": "3144760"
  },
  {
    "text": "think, a 16 single core\nprocessor, messing up that--",
    "start": "3144760",
    "end": "3159400"
  },
  {
    "text": "But, basically, 16\ncores that [INAUDIBLE] You would be\nsurprised, and I know what you're getting at, how\nfew resources are needed",
    "start": "3159400",
    "end": "3168099"
  },
  {
    "text": "to produce an arithmetic\nunit, compared to everything else,\nespecially one that's not",
    "start": "3168100",
    "end": "3173230"
  },
  {
    "text": "high-precision floating point. So the idea here is,\nthose things are cheap.",
    "start": "3173230",
    "end": "3178580"
  },
  {
    "text": "We can pack a chip full of\nthose if the code is set up to use them, that's\nthe main idea.",
    "start": "3178580",
    "end": "3186170"
  },
  {
    "text": "And now we're going to get\nto something that might-- Sorry, I meant to go this way. ",
    "start": "3186170",
    "end": "3194180"
  },
  {
    "text": "Now, there's this question of,\nis the code set up to use them? So I'm going to change the\nexample for just one slide.",
    "start": "3194180",
    "end": "3199710"
  },
  {
    "text": "Imagine that this\nwas my piece of code for all N elements\ndo this logic.",
    "start": "3199710",
    "end": "3205349"
  },
  {
    "text": "So for all N elements,\nevery element can be processed independently. Do this logic, read the\nvalue, and then maybe you",
    "start": "3205350",
    "end": "3214830"
  },
  {
    "text": "need to do the if statement, and\nmaybe you need to do the else. ",
    "start": "3214830",
    "end": "3221520"
  },
  {
    "text": "But I just built a processor\nthat has every core, has eight execution units that\nhave to do the same thing.",
    "start": "3221520",
    "end": "3228599"
  },
  {
    "text": "And now I have iterations of\nthe loop that some of them need these instructions,\nand some of them need these instructions.",
    "start": "3228600",
    "end": "3234880"
  },
  {
    "text": "So I'm going to diagram this out\nfor you as going down the slide is like time as we\nexecute the program.",
    "start": "3234880",
    "end": "3242109"
  },
  {
    "text": "Going across the slide is what\neach of the ALUs are doing, this is just about what's\ngoing on in one core.",
    "start": "3242110",
    "end": "3248789"
  },
  {
    "text": "So at the beginning of\nthe program, the ALUs, they're doing what\nI just told you, they loaded x sub i all in\none big vector operation.",
    "start": "3248790",
    "end": "3257470"
  },
  {
    "text": "They actually even\ncan do the F, T is greater, if for\nevery iteration, if the value loaded\nis greater than 0.",
    "start": "3257470",
    "end": "3264330"
  },
  {
    "text": "And they'll get a bool\nvector of trues and falses as a result of those tests.",
    "start": "3264330",
    "end": "3270060"
  },
  {
    "text": "Notice that some of these\niterations evaluate to true and some of them\nevaluate to false.",
    "start": "3270060",
    "end": "3277263"
  },
  {
    "text": "What do you think happens next? ",
    "start": "3277263",
    "end": "3283140"
  },
  {
    "text": "Any ideas? Yeah? [INAUDIBLE] trues, and\nthen only the falses.",
    "start": "3283140",
    "end": "3288830"
  },
  {
    "text": "Because the rules of my\nunderlying implementation are, I only execute eight\nthings at once, and they got to be\nthe same instruction.",
    "start": "3288830",
    "end": "3295550"
  },
  {
    "text": "And in this case, what I\nmight do is I might say, you know what, I know that\nthis code that I have to run",
    "start": "3295550",
    "end": "3302150"
  },
  {
    "text": "has to run the instructions\nin the if branch. So let's do it, let's run those\ninstructions in the if branch.",
    "start": "3302150",
    "end": "3308270"
  },
  {
    "text": "And then let's just mask off, or\nnot even run, maybe cancel out",
    "start": "3308270",
    "end": "3314900"
  },
  {
    "text": "the operation of any ALU\nthat's responsible for data that actually doesn't\nneed that instruction.",
    "start": "3314900",
    "end": "3321920"
  },
  {
    "text": "And then we're going\nto run the else branch, and we'll flip that mask. And so at the end of\nthe day, not all ALUs",
    "start": "3321920",
    "end": "3330799"
  },
  {
    "text": "are doing useful work. I built this chip that\nhas eight things in it, because I know that if I\ncan do eight things at once,",
    "start": "3330800",
    "end": "3338360"
  },
  {
    "text": "I got a lot of compute for free. But if code isn't set up\nto do eight things at once,",
    "start": "3338360",
    "end": "3345500"
  },
  {
    "text": "I'm essentially just\nspinning my wheels on some of those execution units\nthat don't have anything to do.",
    "start": "3345500",
    "end": "3350885"
  },
  {
    "text": " Can you see why the\nworst case is 1/8?",
    "start": "3350885",
    "end": "3356859"
  },
  {
    "text": "[INAUDIBLE] Right. Question? Then why wouldn't it be 0? Shouldn't it always do the true\ncase, and then do the false?",
    "start": "3356860",
    "end": "3365829"
  },
  {
    "text": "Oh, I see. Well, first of all, two\nclarifications, though. Because if none of the\niterations need the if case,",
    "start": "3365830",
    "end": "3376690"
  },
  {
    "text": "we can be smarter about it,\nand skip the thing, yes. So here's a question for\nyou, this one you talk over.",
    "start": "3376690",
    "end": "3383010"
  },
  {
    "text": "Can you give me the\nsimplest piece of code that you can think of? And by simplest piece\nof code, I actually say,",
    "start": "3383010",
    "end": "3388540"
  },
  {
    "text": "can you do it with one if\nstatement that, overall, on average, this processor\nwill be running at 1/8?",
    "start": "3388540",
    "end": "3396640"
  },
  {
    "text": "Notice that it's not\nin this scenario, because it's running at\n3/8 efficiency up here,",
    "start": "3396640",
    "end": "3402190"
  },
  {
    "text": "and 5/8 efficiency down here. Can you give me a piece of code\nthat will create a situation",
    "start": "3402190",
    "end": "3410170"
  },
  {
    "text": "where we're at 1/8 efficiency. Give yourself some\ntime to talk about it.",
    "start": "3410170",
    "end": "3415550"
  },
  {
    "text": "And you only get to\nuse one if statement. [CHATTER]",
    "start": "3415550",
    "end": "3420570"
  },
  {
    "text": " All right. Any thoughts? Let's go to that-- Yes, sir.",
    "start": "3420570",
    "end": "3426822"
  },
  {
    "text": "Do we take whatever was\nin the yellow block, put it into one\nequation, and multiply it",
    "start": "3426822",
    "end": "3432790"
  },
  {
    "text": "by t greater than 0.01? OK, say that again. So we have this code here, and\nwhat goes with the yellow box?",
    "start": "3432790",
    "end": "3442840"
  },
  {
    "text": "So we can just multiply that by\nthat Boolean statement above.",
    "start": "3442840",
    "end": "3447950"
  },
  {
    "text": "Was that Boolean statement\ntimes whatever was in the else? So if it's true,\nit'll be 1 times",
    "start": "3447950",
    "end": "3454390"
  },
  {
    "text": "whatever's in the yellow\nbox plus 0 times that thing. So we'll have the proper answer.",
    "start": "3454390",
    "end": "3460490"
  },
  {
    "text": "And then in the\nother case, it'll be 0 times whatever's\nin the yellow box plus 1 times whatever's\nin the blue box,",
    "start": "3460490",
    "end": "3467290"
  },
  {
    "text": "and then we'll get\nwhatever is in the else. So we don't need the statements. ",
    "start": "3467290",
    "end": "3475960"
  },
  {
    "text": "OK, I see what\nyou're doing here. So I set up this\nthing, where there's",
    "start": "3475960",
    "end": "3481550"
  },
  {
    "text": "an if statement in the code. And what you're\nproposing is let's remove the if statement and\nthe else statement altogether.",
    "start": "3481550",
    "end": "3488900"
  },
  {
    "text": "The code is just the orange\nbox followed by the blue box, and we get the same effect\nif we multiply these results",
    "start": "3488900",
    "end": "3497420"
  },
  {
    "text": "by 0 at the appropriate\ntime, and these results by 0 at the appropriate time.",
    "start": "3497420",
    "end": "3502859"
  },
  {
    "text": "So that is a good implementation\nof this if statement. But what you've\ncreated, is you've",
    "start": "3502860",
    "end": "3508970"
  },
  {
    "text": "created something that still\ndoes all the same instructions, and has the same costs.",
    "start": "3508970",
    "end": "3514700"
  },
  {
    "text": "So what you've said is like,\nif you wanted to compile this to a machine that has no if\nstatements in the instructions,",
    "start": "3514700",
    "end": "3521330"
  },
  {
    "text": "you actually giving me a good\nlowering of the if statement to what's called, predication.",
    "start": "3521330",
    "end": "3527930"
  },
  {
    "text": "So good compiler\noptimization, but we're still running exactly the same\nperformance as before.",
    "start": "3527930",
    "end": "3534690"
  },
  {
    "text": "So what I'm looking\nfor is a solution that, given that if statement, or\ngiven your implementation",
    "start": "3534690",
    "end": "3539870"
  },
  {
    "text": "of that if statement, gets me\nrunning at 1/8 utilization. 100% utilization is every ALU is\ndoing useful work on every step,",
    "start": "3539870",
    "end": "3549950"
  },
  {
    "text": "1/8 utilization. 1/8 at any given time,\nor 1/8 at all times.",
    "start": "3549950",
    "end": "3554990"
  },
  {
    "text": "On almost all times. Yeah? ",
    "start": "3554990",
    "end": "3560890"
  },
  {
    "text": "Shouldn't you modify\nit to if x and i is larger than x and i minus 1? Then the next branch has to\ndepend on the previous branch?",
    "start": "3560890",
    "end": "3569280"
  },
  {
    "text": "So x of i, there's\nno dependency. But we don't know the\nvalues of the data.",
    "start": "3569280",
    "end": "3577569"
  },
  {
    "text": "So what data would you\ngive me to make that? I was thinking you could\ndo the same thing, where",
    "start": "3577570",
    "end": "3586510"
  },
  {
    "text": "you load the block into\nthe vector register. But if the output\nof each subsequent--",
    "start": "3586510",
    "end": "3595570"
  },
  {
    "text": "But if you decide to put\na sequential dependency between every iteration,\nby that definition,",
    "start": "3595570",
    "end": "3601599"
  },
  {
    "text": "yes, you are running at\nworst case performance, but you've made the entire\nprogram non-parallel. I'm actually thinking\nabout something that stays",
    "start": "3601600",
    "end": "3608290"
  },
  {
    "text": "with the parallel program. Would you just do\nit if i is odd? If i is odd, then we're\nhalf and half, right?",
    "start": "3608290",
    "end": "3615490"
  },
  {
    "text": "Yeah, but then you have-- So I'm running 50%\nutilization in both parts. I see, [INAUDIBLE]",
    "start": "3615490",
    "end": "3621920"
  },
  {
    "text": "OK, yeah. If x sub i equals x sub 0?",
    "start": "3621920",
    "end": "3628810"
  },
  {
    "text": "Well, if x sub i\nequals x sub zero, you're either going to be\nall true or all false, right?",
    "start": "3628810",
    "end": "3635371"
  },
  {
    "text": "So I'm going to run it 100%\nutilization, because everybody is either going to go true or\nfalse, and on the other block it gets skipped.",
    "start": "3635371",
    "end": "3640777"
  },
  {
    "text": " You can make it, if\ni is 0 mod eight.",
    "start": "3640777",
    "end": "3646650"
  },
  {
    "text": "Mod i is mod 0 mod eight. Or let's say I change\nmy input data such that every eighth item\nis going to trigger",
    "start": "3646650",
    "end": "3654210"
  },
  {
    "text": "a true, and all other ones, OK. So that'll get me one orange\nbar And seven blue bars.",
    "start": "3654210",
    "end": "3661650"
  },
  {
    "text": "I'm still not guaranteed, if\nthose are equal cost things, I'm running at 50% utilization,\nbecause half of the time",
    "start": "3661650",
    "end": "3666810"
  },
  {
    "text": "I'm 7/8, the other\nhalf the time I'm at 1. I thought it was with just\nan if statement, and no else.",
    "start": "3666810",
    "end": "3672510"
  },
  {
    "text": "So we're only running the if. That's what we were discussing. Oh, I see. If you're only running the if.",
    "start": "3672510",
    "end": "3677820"
  },
  {
    "text": "OK, yeah, if you're\nonly running the if. But I was thinking about\nif it's an if else. But you're almost there,\nwe've almost got it.",
    "start": "3677820",
    "end": "3683205"
  },
  {
    "text": "So if you spend 1/8 of the\niterations down the if, 7/8 down the else, I'm still\nat 50% utilization,",
    "start": "3683205",
    "end": "3691810"
  },
  {
    "text": "unless we make some\nassumptions about the cost. Yeah? [INAUDIBLE] statement take\ntoo long, and we [INAUDIBLE]",
    "start": "3691810",
    "end": "3697840"
  },
  {
    "text": "If I send one iteration down if,\nand if a billion instructions,",
    "start": "3697840",
    "end": "3703960"
  },
  {
    "text": "and 7/8 down else, and\nthat's the cheap path, which is almost the same\nbasically as what you were",
    "start": "3703960",
    "end": "3708990"
  },
  {
    "text": "doing. Yeah, exactly. So you see that? So I can make this chip with an\nif else run at 1/8 performance.",
    "start": "3708990",
    "end": "3717280"
  },
  {
    "text": "And by essentially making\nthe if clause very cheap, the else clause very\nexpensive, I'm making sure,",
    "start": "3717280",
    "end": "3724120"
  },
  {
    "text": "when I'm running the if\nclause, only one of 8 are actually running. But yeah, so that\nis conceptually",
    "start": "3724120",
    "end": "3729130"
  },
  {
    "text": "equivalent to your suggestion. This can be a problem. And on modern Intel\nhardware and AMD hardware,",
    "start": "3729130",
    "end": "3736750"
  },
  {
    "text": "the vector width is 8. So on modern GPU hardware,\nthat vector width",
    "start": "3736750",
    "end": "3741760"
  },
  {
    "text": "could be as high\nas sometimes 32. So you might be like,\nwell, if I mess things up, if I'm running at 132 of my\ntotal peak performance, that's",
    "start": "3741760",
    "end": "3749860"
  },
  {
    "text": "a little frustrating sometimes. Just some terminology. You'll hear, especially if you\nread a lot of GPU programming",
    "start": "3749860",
    "end": "3757660"
  },
  {
    "text": "stuff, you'll hear\npeople go, you have to have coherent\nexecution, you have to have coherent execution. Coherent execution is\njust a jargon and slang",
    "start": "3757660",
    "end": "3765760"
  },
  {
    "text": "for saying, I have\na program, where all of the iterations\nof my loop, everything that's going on,\nneeds the same instruction",
    "start": "3765760",
    "end": "3771430"
  },
  {
    "text": "stream. And the lack of coherence\nis often called divergence, meaning you think about it as\ndifferent control paths are",
    "start": "3771430",
    "end": "3777700"
  },
  {
    "text": "needed. So divergent code\nwill not run well on a SIMD architecture\nlike this,",
    "start": "3777700",
    "end": "3782960"
  },
  {
    "text": "coherent code will run\nat high utilization. And here this slide is\njust some extra facts,",
    "start": "3782960",
    "end": "3788920"
  },
  {
    "text": "that you can see\non your own where, widths vary from about\n4-wide 70 on mobile chips,",
    "start": "3788920",
    "end": "3796060"
  },
  {
    "text": "especially a lot of the\nARM 70 instructions, all the way out\nto about 32-wide, 70 on a modern high-end GPU.",
    "start": "3796060",
    "end": "3804270"
  },
  {
    "text": "I will create a supplemental\nvideo talking a little bit about some slight\ndifferences between how",
    "start": "3804270",
    "end": "3810660"
  },
  {
    "text": "GPUs implement this concept, and\nhow CPUs implement this concept. So I'll do an offline,\njust watch the video",
    "start": "3810660",
    "end": "3820020"
  },
  {
    "text": "to get into that. So this is interesting. We have three different ideas\nthat we're mixing and matching",
    "start": "3820020",
    "end": "3826050"
  },
  {
    "text": "together. They are orthogonal ideas. We have the idea of\nsuperscalar execution, which",
    "start": "3826050",
    "end": "3831810"
  },
  {
    "text": "is a hardware\nimplementation detail that requires no change to\nthe program at all, which",
    "start": "3831810",
    "end": "3837780"
  },
  {
    "text": "is, if there are independent\ninstructions in one instruction stream, the hardware figures it\nout and can execute two of them",
    "start": "3837780",
    "end": "3844050"
  },
  {
    "text": "in parallel, inside\nthe same core, inside the same\ninstruction stream. We talked about SIMD, which\nis the program itself most",
    "start": "3844050",
    "end": "3852630"
  },
  {
    "text": "of the time says, here are eight\noperations or 32 operations that can be done in parallel. I have one instruction\nstream [INAUDIBLE] usually,",
    "start": "3852630",
    "end": "3860790"
  },
  {
    "text": "and it's just issuing these\nvector or larger operations. Again, with an\nasterisk on, I will",
    "start": "3860790",
    "end": "3866140"
  },
  {
    "text": "clarify that statement's\nnot precise for GPUs, but conceptually, it's the same. And then you have the\nidea of multi-core,",
    "start": "3866140",
    "end": "3872500"
  },
  {
    "text": "which is taking one\nof these cores that can run one instruction stream,\nmaybe with vector instructions,",
    "start": "3872500",
    "end": "3877600"
  },
  {
    "text": "maybe with superscalar, and\ncopying that as many times as you have the resources\nto fit on a chip.",
    "start": "3877600",
    "end": "3883330"
  },
  {
    "text": "So here are some examples. This processor one\ncore, superscalar.",
    "start": "3883330",
    "end": "3890590"
  },
  {
    "text": "This processor down here,\ntwo cores, no vector, no superscalar.",
    "start": "3890590",
    "end": "3896890"
  },
  {
    "text": "This processor here, four cores,\n8-wide vector, no superscalar.",
    "start": "3896890",
    "end": "3903940"
  },
  {
    "text": "And I can keep mixing\nthings together. If I had to draw a diagram\nof the myth. machine's,",
    "start": "3903940",
    "end": "3910040"
  },
  {
    "text": "four cores, three-way\nsuperscalar, eight vector.",
    "start": "3910040",
    "end": "3916580"
  },
  {
    "text": "Four cores, every core can run\nthree instructions per clock, those instructions might\nall be vector instructions.",
    "start": "3916580",
    "end": "3925050"
  },
  {
    "text": "NVIDIA GPU, about\n80 of these cores. Each one of those cores has\nabout 128 ALUs that are actually",
    "start": "3925050",
    "end": "3933780"
  },
  {
    "text": "organized in 32-wide\n70 instructions, all the same ideas,\njust different scales.",
    "start": "3933780",
    "end": "3939760"
  },
  {
    "text": "Some of these scales\ncause keynote to crash, because you can't\ndraw the diagram. Yes? If you go to the previous slide,\nI see on [INAUDIBLE] context,",
    "start": "3939760",
    "end": "3947640"
  },
  {
    "text": "but shouldn't each-- Per core. --fetch and decode have\nan executed [INAUDIBLE] Superscalar execution\nis, the core",
    "start": "3947640",
    "end": "3954570"
  },
  {
    "text": "is given one thread, that thread\nhas a sequence of instructions.",
    "start": "3954570",
    "end": "3959745"
  },
  {
    "text": "Because those instructions\nare in one thread, they're all reading and\nwriting the same registers, there's only one thread,\none execution context.",
    "start": "3959745",
    "end": "3966310"
  },
  {
    "text": "If there happens\nto be the ability to find a couple of\nthose instructions that can be run in parallel, this\nchip may find up to three.",
    "start": "3966310",
    "end": "3971585"
  },
  {
    "text": " How many vectors does one\ncode run in this direction?",
    "start": "3971585",
    "end": "3980849"
  },
  {
    "text": "Four cores. So often I want you to think\nabout what's going on in a core, because multi-core is\njust replicating things.",
    "start": "3980850",
    "end": "3986670"
  },
  {
    "text": "Inside a core I have\none instruction stream, registers right here. This core is\nrunning instructions",
    "start": "3986670",
    "end": "3992970"
  },
  {
    "text": "on the instruction stream,\nevery ticket runs the next one. If it happens to\nfind instructions that are independent,\nmaybe it can run three.",
    "start": "3992970",
    "end": "4001130"
  },
  {
    "text": "If those instructions are\n8-wide vector instructions, you'll get eight vectors.",
    "start": "4001130",
    "end": "4008220"
  },
  {
    "text": "So if you count here,\nthere's 24 execution units, peak performance of this core\nis 24 operations per clock,",
    "start": "4008220",
    "end": "4015549"
  },
  {
    "text": "peak performance of\nthis chip is 4 times 24, 96 operations per clock.",
    "start": "4015550",
    "end": "4021540"
  },
  {
    "text": "Peak performance of this\nchip is 128 times 80, and I can't do the math,\noperations per clock.",
    "start": "4021540",
    "end": "4028025"
  },
  {
    "text": " Yes? [INAUDIBLE] 8-wide vector\noperations [INAUDIBLE]?",
    "start": "4028025",
    "end": "4034650"
  },
  {
    "text": " I want you to think about\nan 8-wide vector just like",
    "start": "4034650",
    "end": "4042220"
  },
  {
    "text": "there's an add instruction. And an add instruction, usually\nis add this scalar register to the scalar register, which\nadd 42 and 10 and you get 52.",
    "start": "4042220",
    "end": "4052260"
  },
  {
    "text": "A 70-vector instruction is\nan instruction that says, please add this 8-wide\nvector to this 8-wide vector,",
    "start": "4052260",
    "end": "4058035"
  },
  {
    "text": "it's element wise. So a single instruction does\neight scalar operations.",
    "start": "4058035",
    "end": "4063830"
  },
  {
    "text": " Imagine you're writing\ncode in NumPy or PyTorch,",
    "start": "4063830",
    "end": "4069924"
  },
  {
    "text": "and you have an 8-wide tensor,\nand another 8-wide tensor, and you use the plus operation,\nthat's a machine instruction.",
    "start": "4069925",
    "end": "4076780"
  },
  {
    "text": " Yeah? When does this change\nhappen, will we",
    "start": "4076780",
    "end": "4083220"
  },
  {
    "text": "move from this vector\nstyle [INAUDIBLE] On x86 it was something\ncalled SSE instructions,",
    "start": "4083220",
    "end": "4090000"
  },
  {
    "text": "and I don't know,\nthere were 4-wide. I feel like they were\nprobably early 2000s.",
    "start": "4090000",
    "end": "4095110"
  },
  {
    "text": "And there were 4-wide for RGBA\nfor simple graphics operations.",
    "start": "4095110",
    "end": "4100568"
  },
  {
    "text": "So I've beaten in\nearly in the lecture about the effects of latency. And we motivated caches as being\nthis thing in a processor that",
    "start": "4100569",
    "end": "4110580"
  },
  {
    "text": "is critical to not running\nat 250th of peak performance",
    "start": "4110580",
    "end": "4116120"
  },
  {
    "text": "waiting on these things. ",
    "start": "4116120",
    "end": "4123213"
  },
  {
    "text": "[LAUGHS] And I also told you a\nlittle bit about, well, one of the major hogs of\nresources in a modern ship",
    "start": "4123214",
    "end": "4130778"
  },
  {
    "text": "is putting these big\ncaches everywhere you can in order to avoid\nstalls due to memory.",
    "start": "4130779",
    "end": "4136810"
  },
  {
    "text": "And we talked a little bit\nabout this access pattern, where even though it was really\npredictable and going right",
    "start": "4136810",
    "end": "4143350"
  },
  {
    "text": "through the array, when we came\nback around, we still missed. ",
    "start": "4143350",
    "end": "4150710"
  },
  {
    "text": "So another thing that\nprocessors have in them, in addition to caches, is they\nactually have prefectures.",
    "start": "4150710",
    "end": "4160759"
  },
  {
    "text": "They actually analyze your\nprogram in the same way that they're looking for\nindependent instructions and superscalar.",
    "start": "4160760",
    "end": "4165830"
  },
  {
    "text": "They might look at your\naccess pattern and go, I'm pretty sure you're going to\nbe accessing this variable next,",
    "start": "4165830",
    "end": "4170870"
  },
  {
    "text": "so I'm going to go ahead and\npreload that address for you. And so in a predictable access\npattern, like I just showed you",
    "start": "4170870",
    "end": "4177580"
  },
  {
    "text": "here, where we're running\nright through the loop,",
    "start": "4177580",
    "end": "4184729"
  },
  {
    "text": "it's very possible that last\nload might have been predicted and actually might be there.",
    "start": "4184729",
    "end": "4191839"
  },
  {
    "text": "But not all code runs\nlike this, sometimes it's",
    "start": "4191840",
    "end": "4197030"
  },
  {
    "text": "hard to predict something. Imagine you're walking\nthrough a linked list, or imagine you have some value,\nand you just computed a value,",
    "start": "4197030",
    "end": "4207300"
  },
  {
    "text": "and you're going to do an array\nlookup, based on that value. A very common thing is\ngive an array of indices,",
    "start": "4207300",
    "end": "4213110"
  },
  {
    "text": "go look up the data at that\nindex or something like that. So in these throughput\ncomputing ideas,",
    "start": "4213110",
    "end": "4219710"
  },
  {
    "text": "you can't really assume that\nyou can predict what's coming. And in order to make room\nfor all of these cores,",
    "start": "4219710",
    "end": "4226699"
  },
  {
    "text": "we might have taken out\nof the prefetching logic, we might have shrunk\nthe size of the cache. So we've made it\neven more likely",
    "start": "4226700",
    "end": "4232579"
  },
  {
    "text": "that we're going to\ntake cache misses. Yet we packed the\nmachine full of ALUs, which means we're going to\nmake even more memory accesses,",
    "start": "4232580",
    "end": "4240204"
  },
  {
    "text": "and need to make\nthem even faster to keep all these things busy. So we've really\ncreated ourselves a little bit of a problem here.",
    "start": "4240205",
    "end": "4246390"
  },
  {
    "text": "We have these amazing processors\nthat have all this stuff, yet they're waiting on memory.",
    "start": "4246390",
    "end": "4252210"
  },
  {
    "text": "And so in my house tonight,\nI had a PhD student graduate a couple of weeks ago, and we\ninviting him and his girlfriend",
    "start": "4252210",
    "end": "4258540"
  },
  {
    "text": "over for hotpot. And so there's going to\nbe a lot of prep going on. And so I want you to think\nabout some real life examples,",
    "start": "4258540",
    "end": "4265367"
  },
  {
    "text": "let's say you're\ncooking in a kitchen, let's say you're doing\nyour laundry tonight, because it's already day 4,\nso it might be on to that.",
    "start": "4265367",
    "end": "4272050"
  },
  {
    "text": "How many of you, when\nyou're doing your laundry, put the load in the washer,\nand sit there and wait.",
    "start": "4272050",
    "end": "4277800"
  },
  {
    "text": "How many people\nstart boiling water, and sit there and\nwait until it is ready before you put the food in.",
    "start": "4277800",
    "end": "4284190"
  },
  {
    "text": "What do you do instead? Maybe some of you do\nwait, I don't know. If not, you're\ngoing to come away",
    "start": "4284190",
    "end": "4290430"
  },
  {
    "text": "from this class with\na good life hack. [LAUGHS] So what do you do, you put your\nlaundry in, you boil your water.",
    "start": "4290430",
    "end": "4297220"
  },
  {
    "text": "What's going on? You sit around and wait. You watch all of\nmy lectures on 2x,",
    "start": "4297220",
    "end": "4304110"
  },
  {
    "text": "so I know you don't sit\naround and wait while you're-- So what do you do?",
    "start": "4304110",
    "end": "4310005"
  },
  {
    "text": "[INAUDIBLE] Sorry? Something else. You do something else. And you do your\nhomework and 149.",
    "start": "4310005",
    "end": "4318310"
  },
  {
    "text": "So the main idea is,\nif you know something that you need to be done, is not\ngoing to be done for a while,",
    "start": "4318310",
    "end": "4324090"
  },
  {
    "text": "you just go do something else. Now that means you have to\nhave something else to do, like maybe all of your lives are\nsuch that, given anything else",
    "start": "4324090",
    "end": "4331230"
  },
  {
    "text": "I have to do, I'd rather\nsit here and wait. But most of us have\nmultiple things that we can do that\nwe'd rather do.",
    "start": "4331230",
    "end": "4337830"
  },
  {
    "text": "So this gets to the\nlast idea of today. We're going to build\nprocessors that remember,",
    "start": "4337830",
    "end": "4344010"
  },
  {
    "text": "I just gave you a chip\nthat, what did I say, it had 16 cores times 8-wide 70,\nso it had 128 execution units",
    "start": "4344010",
    "end": "4353220"
  },
  {
    "text": "in it, which means it can\ndo 128 things at once.",
    "start": "4353220",
    "end": "4358385"
  },
  {
    "text": "But imagine you're doing some\nmachine learning operation, imagine you're processing a four\nmegapixel photo off your iPhone,",
    "start": "4358385",
    "end": "4363809"
  },
  {
    "text": "or I guess it's 8\nor 12 these days. You have millions of\npixels, you have way more things that you need to do\nthan the things you can actually",
    "start": "4363810",
    "end": "4372090"
  },
  {
    "text": "do at once. And so if you're going\nto sit there and wait on some of those\nthings, let's just",
    "start": "4372090",
    "end": "4378420"
  },
  {
    "text": "go start working\non something else. So here's the main\nidea, we're going to take that core that we had--",
    "start": "4378420",
    "end": "4384820"
  },
  {
    "text": "Notice that in this diagram,\nit's a single instruction stream, it's got no superscalar,\none instruction per clock,",
    "start": "4384820",
    "end": "4393020"
  },
  {
    "text": "but I'm going to allow that to\nbe a vector instruction, just for the sake of things. And now what I'm\ngoing to do is, I'm",
    "start": "4393020",
    "end": "4398400"
  },
  {
    "text": "going to take the execution\ncontext, the registers, and leave them address\nspace associated with them.",
    "start": "4398400",
    "end": "4405540"
  },
  {
    "text": "And now I'm going\nto duplicate this. So remember, I said\nthat an instruction",
    "start": "4405540",
    "end": "4411869"
  },
  {
    "text": "stream, the execution\ncontext represents the state of the instruction\nstream, or in other words,",
    "start": "4411870",
    "end": "4418560"
  },
  {
    "text": "we could say the\nstate of a thread.  The processor, the\norange and the yellow",
    "start": "4418560",
    "end": "4425099"
  },
  {
    "text": "is staying exactly the same. But I'm going to give\nthat processor the ability to hold state for\nfour instruction",
    "start": "4425100",
    "end": "4433170"
  },
  {
    "text": "streams for four threads. So we're going to start\nexecuting normally.",
    "start": "4433170",
    "end": "4439140"
  },
  {
    "text": "So now we're going to say,\nlook, for this processor, your program is going to\nsay, create four threads now.",
    "start": "4439140",
    "end": "4446040"
  },
  {
    "text": "For one core, four\nexecution context here have four threads to do.",
    "start": "4446040",
    "end": "4451230"
  },
  {
    "text": "And so the processor\nis going to move along, and it's going to\nrun a thread-- that's what I'm trying\nto show you here,",
    "start": "4451230",
    "end": "4457450"
  },
  {
    "text": "it's going to run this thread. Maybe it's executing\n70 instructions. And at some point it gets\nto a load, cache miss.",
    "start": "4457450",
    "end": "4464520"
  },
  {
    "text": "This thread cannot make\nprogress for a long time. Let's say this is the point at\nwhich it becomes runnable again,",
    "start": "4464520",
    "end": "4470460"
  },
  {
    "text": "because the data came back\nfrom memory, that was the 250 cycles that we were waiting.",
    "start": "4470460",
    "end": "4475590"
  },
  {
    "text": "So do you think this core\nis going to stay idle? Nope, the minute it's like,\nI can't make any progress,",
    "start": "4475590",
    "end": "4481889"
  },
  {
    "text": "because I got to wait. I'm like, I got\nthree other threads that I can go make progress on. So we're going to swap.",
    "start": "4481890",
    "end": "4488639"
  },
  {
    "text": "And when I say swap, I'm\ntalking about the hardware just starts executing instructions\nfrom the next thread, no delay",
    "start": "4488640",
    "end": "4494980"
  },
  {
    "text": "or anything, it's\njust, oh, I can't make any progress with\nthis instruction stream, I've got another one\nsitting here, next cycle,",
    "start": "4494980",
    "end": "4501739"
  },
  {
    "text": "I'm going to run\nthat one, and I'm going to run whenever\nit's available. And then maybe that one\nstalls, but we got another one.",
    "start": "4501740",
    "end": "4507760"
  },
  {
    "text": "Maybe that one stalls,\nwe got another one. By the time that\nfourth one has stalled,",
    "start": "4507760",
    "end": "4515080"
  },
  {
    "text": "we are past the point in\ntime where this one is ready. So we can get going\nagain, we can just start",
    "start": "4515080",
    "end": "4520570"
  },
  {
    "text": "working on that other thread. And let's say it finishes,\nand we move on, and so on. What is the utilization\nof this processor?",
    "start": "4520570",
    "end": "4527960"
  },
  {
    "text": "100%. 100%. What is the latency of actually\nfinishing any one thread.",
    "start": "4527960",
    "end": "4535092"
  },
  {
    "text": "It's actually longer,\nbecause it actually had this time, where it could\nhave started running here, but it actually runs here.",
    "start": "4535092",
    "end": "4541510"
  },
  {
    "text": "That's the last big idea\nhere, is we're actually slowing the wall clock time\nto get anything done, in order",
    "start": "4541510",
    "end": "4549910"
  },
  {
    "text": "to get everything done quicker,\nbecause we're running at 100%. I'll stop there.",
    "start": "4549910",
    "end": "4555530"
  },
  {
    "text": "So we'll review this\nagain next time. We'll start, and then\nwe'll get into Combining",
    "start": "4555530",
    "end": "4561610"
  },
  {
    "text": "the Memory and the Superscalar. But you have everything you\nneed to get started and do 90% of your homework assignment.",
    "start": "4561610",
    "end": "4569700"
  },
  {
    "start": "4569700",
    "end": "4573000"
  }
]