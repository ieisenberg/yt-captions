[
  {
    "text": "I'd like to thank e380 for inviting me and uh I'd like to thank you for showing",
    "start": "12280",
    "end": "19199"
  },
  {
    "text": "up uh do interrupt with questions if you have any when you have any so are you ready",
    "start": "19199",
    "end": "29439"
  },
  {
    "text": "to learn about the hilarious subject of computability",
    "start": "29439",
    "end": "35079"
  },
  {
    "text": "theory see people are giggling it is hilarious so let's talk about",
    "start": "35079",
    "end": "42840"
  },
  {
    "text": "this an algorithm is a sequence of instructions executed by a",
    "start": "42840",
    "end": "49280"
  },
  {
    "text": "computer now today we think of a computer as a machine but originally it was a person the woman or the man who",
    "start": "49280",
    "end": "57520"
  },
  {
    "text": "executed the algorithm now algorithms go back to uet's elements",
    "start": "57520",
    "end": "62719"
  },
  {
    "text": "in Classical Greece and anonomous to alisi in 9th century",
    "start": "62719",
    "end": "70479"
  },
  {
    "text": "Persia but it wasn't until the 20th century that we get formal definitions",
    "start": "70880",
    "end": "78200"
  },
  {
    "text": "of algorithm when three papers appear uh Alonzo Church describing Lambda calculus",
    "start": "78200",
    "end": "84680"
  },
  {
    "text": "Kurt girdle describing recursive functions and Alan Turing describing what we now called touring machines all",
    "start": "84680",
    "end": "91840"
  },
  {
    "text": "within a year of each other something already alluded to it's like",
    "start": "91840",
    "end": "99159"
  },
  {
    "text": "buses you wait 2,000 years for a formal theory of computability and then three",
    "start": "99159",
    "end": "105560"
  },
  {
    "text": "come along at once so why did this",
    "start": "105560",
    "end": "110640"
  },
  {
    "text": "happen at the turn of the 20th century David Hilbert in Gan was one of",
    "start": "110640",
    "end": "119240"
  },
  {
    "text": "the four foremost experts on formal logic which was just being formed bull",
    "start": "119240",
    "end": "124640"
  },
  {
    "text": "having sort of begun the subject just a little bit earlier and he had a goal his goal was",
    "start": "124640",
    "end": "131680"
  },
  {
    "text": "to put every single mathematician out of work because he wanted an",
    "start": "131680",
    "end": "138040"
  },
  {
    "text": "algorithm what this algorithm would do is it would decide given any statement in",
    "start": "138040",
    "end": "147360"
  },
  {
    "text": "mathematics expressed formally whether was true or false so you wouldn't need",
    "start": "147360",
    "end": "153640"
  },
  {
    "text": "mathematicians anymore you would just need computers that could execute your algorithm and this was called the an",
    "start": "153640",
    "end": "161040"
  },
  {
    "text": "problem because it sounds better in",
    "start": "161040",
    "end": "165079"
  },
  {
    "text": "German now Keat famously",
    "start": "166519",
    "end": "173720"
  },
  {
    "text": "said what is beautiful is true and true beautiful",
    "start": "175640",
    "end": "181840"
  },
  {
    "text": "and Hilbert figured the and's problem was solvable because he believed",
    "start": "182280",
    "end": "187319"
  },
  {
    "text": "something similar that logic was sound and complete that is what is provable is",
    "start": "187319",
    "end": "193239"
  },
  {
    "text": "true and what is true is",
    "start": "193239",
    "end": "197799"
  },
  {
    "text": "provable but in fact at one of the talks at which Hilbert put forward this idea",
    "start": "199360",
    "end": "206239"
  },
  {
    "text": "we will know we must know the day before this guy had proved that logic was",
    "start": "206239",
    "end": "215599"
  },
  {
    "text": "incomplete which means that Hilbert was to use a technical term",
    "start": "215599",
    "end": "221560"
  },
  {
    "text": "screwed right so what girdle did is he had this incompleteness theorem in which",
    "start": "221879",
    "end": "227680"
  },
  {
    "text": "he showed that he wrote out how he would go about expressing formally the definition of this is provable and then",
    "start": "227680",
    "end": "234959"
  },
  {
    "text": "he wrote a formal statement that means this statement is not provable",
    "start": "234959",
    "end": "241720"
  },
  {
    "text": "o right as soon as you can write that down you're in trouble right this",
    "start": "242000",
    "end": "247400"
  },
  {
    "text": "statement is not provable so what happens um so if",
    "start": "247400",
    "end": "253480"
  },
  {
    "text": "it's provable",
    "start": "253480",
    "end": "258720"
  },
  {
    "text": "then sorry if it's true then it must not be provable so there's something true",
    "start": "258720",
    "end": "264919"
  },
  {
    "text": "that's not provable right the other way around right if it's false then it is",
    "start": "264919",
    "end": "270360"
  },
  {
    "text": "provable and you can prove something that's false now that would be really really bad news that would be unsound",
    "start": "270360",
    "end": "277120"
  },
  {
    "text": "right that kind of belies the whole point of having proof right the way you prove it and it's true so hopefully that",
    "start": "277120",
    "end": "284919"
  },
  {
    "text": "option doesn't hold but then you're left with the other option which which means it's true and that means there must be",
    "start": "284919",
    "end": "290960"
  },
  {
    "text": "something true that's not provable which is you know not as bad as being unsound",
    "start": "290960",
    "end": "296240"
  },
  {
    "text": "but it's still really annoying especially if you're Hilbert now as long as people thought the anchun",
    "start": "296240",
    "end": "304360"
  },
  {
    "text": "problem was solvable you didn't really need any kind of formal definition of",
    "start": "304360",
    "end": "310039"
  },
  {
    "text": "algorithm it would be just like justice Stewart's definition of pornography I know it when I see it you",
    "start": "310039",
    "end": "318919"
  },
  {
    "text": "just write out your algorithm yeah that's an algorithm but if you want to prove there's no",
    "start": "318919",
    "end": "324319"
  },
  {
    "text": "algorithm then you really need some formal way of understanding what an algorithm is so the race was",
    "start": "324319",
    "end": "332440"
  },
  {
    "text": "on so the first person the first horse passed the Finish Line was Alonzo",
    "start": "332440",
    "end": "340280"
  },
  {
    "text": "church and he came up with a definition of what it meant for something to be an",
    "start": "340280",
    "end": "346000"
  },
  {
    "text": "algorithm uh so he said anything you can write down in Lambda calculus is an algorithm and he had certain ways of",
    "start": "346000",
    "end": "351919"
  },
  {
    "text": "representing numbers in this thing called Lambda calculus and uh doing stuff with them and then he showed that",
    "start": "351919",
    "end": "358440"
  },
  {
    "text": "indeed um that the enidu problem was not solvable if Lambda calculus was your definition",
    "start": "358440",
    "end": "365520"
  },
  {
    "text": "of algorithm now Lambda calculus as we'll talk about a bit later went on to become the",
    "start": "365520",
    "end": "371720"
  },
  {
    "text": "foundation for functional programming and I'm a functional",
    "start": "371720",
    "end": "377960"
  },
  {
    "text": "programmer and as was mentioned this is sort of a theoretical talk and the main reason for that is that people in",
    "start": "377960",
    "end": "384199"
  },
  {
    "text": "Industry have been ignoring what me and my colleagues have done for years and years and years right but recently of",
    "start": "384199",
    "end": "390720"
  },
  {
    "text": "course lambdas have become uh so sorry here's your definition of Lambda calculus right it's the world's coolest",
    "start": "390720",
    "end": "396960"
  },
  {
    "text": "programming language because it was defined before there were machines that were computers and of course it's the",
    "start": "396960",
    "end": "402280"
  },
  {
    "text": "world's shortest it only has three constructs variables Lambda abstraction and function",
    "start": "402280",
    "end": "408919"
  },
  {
    "text": "application okay and as I said you know people in the industry have ignored it for years but all of a sudden right this",
    "start": "408919",
    "end": "414880"
  },
  {
    "text": "has become trendy and languages like Java and C++ and python all say we've got lambdas",
    "start": "414880",
    "end": "422120"
  },
  {
    "text": "right and there's Duke the icon for Java looking rather smug well congratulations Duke you've",
    "start": "422120",
    "end": "428759"
  },
  {
    "text": "managed to catch up with where church was in the",
    "start": "428759",
    "end": "433360"
  },
  {
    "text": "1930s so Kurt girdle remember him was visiting",
    "start": "435160",
    "end": "441199"
  },
  {
    "text": "at Princeton at the time that church came up with all this and he had a word",
    "start": "441199",
    "end": "447960"
  },
  {
    "text": "for Church's solution it was was thorough well actually had two words",
    "start": "447960",
    "end": "453039"
  },
  {
    "text": "thoroughly unsatisfactory the church said look you",
    "start": "453039",
    "end": "458720"
  },
  {
    "text": "come up with your own definition and I will show you that mine is as good as",
    "start": "458720",
    "end": "464240"
  },
  {
    "text": "yours so goodle did that he came up with uh",
    "start": "464240",
    "end": "469360"
  },
  {
    "text": "recursive functions it was written down by Church's student cleany with attribution and",
    "start": "469360",
    "end": "476240"
  },
  {
    "text": "indeed uh church and cleany went off and they proved that what recursive",
    "start": "476240",
    "end": "483960"
  },
  {
    "text": "functions could do lamb Expressions could do and vice versa so they were exactly equivalent and they went back",
    "start": "483960",
    "end": "489639"
  },
  {
    "text": "you know Church went back very triumphant to girdle said look they're exactly equivalent and girdle's",
    "start": "489639",
    "end": "494800"
  },
  {
    "text": "responses say oh my definition is the same as your official Definition",
    "start": "494800",
    "end": "501800"
  },
  {
    "text": "h mine must be wrong",
    "start": "501800",
    "end": "505759"
  },
  {
    "text": "then things stood at an impact and the impass was resolved by this",
    "start": "507199",
    "end": "512640"
  },
  {
    "text": "young man Alan Turing who came up with the third definition what we now call Turing machines and what Turing did that",
    "start": "512640",
    "end": "519800"
  },
  {
    "text": "was most important that was difference was not mathematics but philosophy he explained why what a",
    "start": "519800",
    "end": "527920"
  },
  {
    "text": "touring machine could do would be the same as what a computer could do where",
    "start": "527920",
    "end": "532959"
  },
  {
    "text": "computer meant a person following an algorithm so he gave a detailed argument",
    "start": "532959",
    "end": "538600"
  },
  {
    "text": "with with things in it explaining like well um you must only be able to see a finite number of symbols at one time",
    "start": "538600",
    "end": "545880"
  },
  {
    "text": "because people cannot distinguish between 999999999999 and",
    "start": "545880",
    "end": "552519"
  },
  {
    "text": "99999999999999 what a lovely argument um so he made this argument and that finally",
    "start": "554760",
    "end": "561640"
  },
  {
    "text": "convinced girdle and all three were proved equivalent and girdle finally said okay maybe I had the right",
    "start": "561640",
    "end": "567880"
  },
  {
    "text": "definition after all now philosophers argue about whether",
    "start": "567880",
    "end": "574560"
  },
  {
    "text": "ideas and Mathematics are invented or discovered but one of the themes of this",
    "start": "574560",
    "end": "580680"
  },
  {
    "text": "talk is going to be when you have several things independently coming together that's powerful evidence that",
    "start": "580680",
    "end": "587079"
  },
  {
    "text": "you have discovered",
    "start": "587079",
    "end": "591160"
  },
  {
    "text": "something girdle was 28 when he undid the work of Hilbert who was at the time",
    "start": "592760",
    "end": "600560"
  },
  {
    "text": "68 Turing was 23 when he resolved the impath between",
    "start": "600560",
    "end": "605640"
  },
  {
    "text": "Church who was 33 and girdle who was by then in ancient 30 so all you young people in the",
    "start": "605640",
    "end": "615360"
  },
  {
    "text": "audience you know what to do it's your job to keep explaining to",
    "start": "615360",
    "end": "621240"
  },
  {
    "text": "your elders when we've got it",
    "start": "621240",
    "end": "624880"
  },
  {
    "text": "wrong okay so that's the the background and now I'm going to go on to explain propositions this type I'll just pause",
    "start": "627800",
    "end": "633920"
  },
  {
    "text": "for a moment are there any questions yet okay you're not doing your job right",
    "start": "633920",
    "end": "640600"
  },
  {
    "text": "you young people your other job is to ask some questions so you don't understand something IGN the",
    "start": "640600",
    "end": "648079"
  },
  {
    "text": "calculus functional programming can I tell you why industry has ignored",
    "start": "648079",
    "end": "653360"
  },
  {
    "text": "functional programming that's a very good question let me go through the second part which touches on that little",
    "start": "653360",
    "end": "659399"
  },
  {
    "text": "little bit or at least on what functional programming is a little bit and we might come back to that at the end but the short answer is",
    "start": "659399",
    "end": "666680"
  },
  {
    "text": "no I got one I don't know I learned recently that Turing was doing some neural Nets back then I don't know if it",
    "start": "666680",
    "end": "674240"
  },
  {
    "text": "was in the 30s or that was maybe later than the' 40s but um maybe they were",
    "start": "674240",
    "end": "679279"
  },
  {
    "text": "considering like various other models of computation I don't know were there any others that were sort of in the running",
    "start": "679279",
    "end": "685000"
  },
  {
    "text": "wait three is not enough for you that turned out to be equivalent no no not",
    "start": "685000",
    "end": "690040"
  },
  {
    "text": "enough that that would indicate that was the only one what else did they think of uh pretty much all the interesting",
    "start": "690040",
    "end": "696519"
  },
  {
    "text": "models of computation are equivalent to Turing and are equivalent to churches I think there are other reasons why people",
    "start": "696519",
    "end": "702680"
  },
  {
    "text": "were not keen on Lambda calculus cleany certainly talked about um the reception",
    "start": "702680",
    "end": "708000"
  },
  {
    "text": "for Lambda calculus even among mathematicians being rather poor so he switched to recursive functions they",
    "start": "708000",
    "end": "713320"
  },
  {
    "text": "said people like that a lot better um certainly Church did not do as",
    "start": "713320",
    "end": "719480"
  },
  {
    "text": "good a job of explaining why Lambda Expressions did what they should do as Turing did of explaining why Turing",
    "start": "719480",
    "end": "725000"
  },
  {
    "text": "machines did what was intended but I I'll return to that later it's a good",
    "start": "725000",
    "end": "732440"
  },
  {
    "text": "question okay so let's talk about propositions as types so we're still stuck in the",
    "start": "732519",
    "end": "739160"
  },
  {
    "text": "1930s and this guy ghard gensen uh who",
    "start": "739160",
    "end": "744199"
  },
  {
    "text": "is a Nazi but fortunately that's not part of our story we're going to talk about his mathematics",
    "start": "744199",
    "end": "750079"
  },
  {
    "text": "uh he in what was essentially his doctoral thesis um so here's another",
    "start": "750079",
    "end": "755720"
  },
  {
    "text": "lesson for you young people right this was his doctoral thesis and in it he introduced natural deduction the main",
    "start": "755720",
    "end": "761480"
  },
  {
    "text": "system of logic that we use to this day he also introduced sequent calculus the",
    "start": "761480",
    "end": "767480"
  },
  {
    "text": "second most used system of logic used to this day and also um although",
    "start": "767480",
    "end": "772519"
  },
  {
    "text": "quantification was already known and upside down e for existentials was known he introduced the use of the upside down",
    "start": "772519",
    "end": "778920"
  },
  {
    "text": "a to mean for all so there's a goal for your PhD thesis um and his key Insight was that",
    "start": "778920",
    "end": "787079"
  },
  {
    "text": "the rules of logic should come in pairs so his logic was equivalent to earlier Logics such as Hilbert's but he",
    "start": "787079",
    "end": "793920"
  },
  {
    "text": "reformulated in terms of introduction and elimination Pairs and um so that's",
    "start": "793920",
    "end": "801560"
  },
  {
    "text": "actually from his paper and if you look at these rules for and and these rules",
    "start": "801560",
    "end": "807079"
  },
  {
    "text": "for implication I've just re written them here in modern notation and you can see that the modern notation is exactly",
    "start": "807079",
    "end": "814360"
  },
  {
    "text": "identical to what we have here for and and implies except I've written my letters uh well Genson wrote his letters",
    "start": "814360",
    "end": "821959"
  },
  {
    "text": "in German and I've written mine in English um so how many people here are",
    "start": "821959",
    "end": "828920"
  },
  {
    "text": "familiar with these rules okay fair sampling uh but not",
    "start": "828920",
    "end": "835320"
  },
  {
    "text": "everybody so this is beautiful stuff and very widely used right every um database",
    "start": "835320",
    "end": "842639"
  },
  {
    "text": "that you use relies on this Theory just to name one system that relies on this Theory another system that relied on",
    "start": "842639",
    "end": "849240"
  },
  {
    "text": "this theory is um the Enigma machine that during built during the war Drew",
    "start": "849240",
    "end": "855079"
  },
  {
    "text": "heavily on ideas about implication and formal logic so if it weren't for these ideas we'd all be speaking German right",
    "start": "855079",
    "end": "862360"
  },
  {
    "text": "now um ironic I guess given gon's",
    "start": "862360",
    "end": "867480"
  },
  {
    "text": "Tendencies uh so what did he do right he said okay what does it mean to say a implies B it",
    "start": "867480",
    "end": "874120"
  },
  {
    "text": "means if you assume a if from the Assumption a you can prove B and these little brackets around a say well I",
    "start": "874120",
    "end": "881639"
  },
  {
    "text": "don't have a proof of a I'm just assuming a is true and that's sub superscripted with an X and the X here",
    "start": "881639",
    "end": "887680"
  },
  {
    "text": "means that this proof rule discharges the Assumption so we have a bunch of proof",
    "start": "887680",
    "end": "892880"
  },
  {
    "text": "rules so another proof rule says if you have a proof that a implies B and you have a proof of a then you can conclude",
    "start": "892880",
    "end": "899759"
  },
  {
    "text": "B and this is called an introduction rule because as you move down the proof you introduce an imply symbol this is",
    "start": "899759",
    "end": "906560"
  },
  {
    "text": "called an elimination rule because as you move down the proof you get rid of",
    "start": "906560",
    "end": "911600"
  },
  {
    "text": "an imply symbol uh and the way to think about it is um this is all the stuff you can do",
    "start": "911600",
    "end": "918959"
  },
  {
    "text": "once you know about implication and this is what you need to know to know you can",
    "start": "918959",
    "end": "924920"
  },
  {
    "text": "believe that an implication holds so similarly for uh",
    "start": "924920",
    "end": "930440"
  },
  {
    "text": "conjunction uh if you have a proof of a and a proof of B guess what you've proved A and",
    "start": "930440",
    "end": "936600"
  },
  {
    "text": "B and if you have a proof of A and B what can you do with it well there are two things you can do one is You can",
    "start": "936600",
    "end": "942079"
  },
  {
    "text": "conclude a and the other you can do is conclude B then we can take these proofs and",
    "start": "942079",
    "end": "948959"
  },
  {
    "text": "organize them into trees so here's a very simple example here's the proof that b and a implies A and",
    "start": "948959",
    "end": "957440"
  },
  {
    "text": "B are there any questions yet because I'd expect somebody at this",
    "start": "957440",
    "end": "962560"
  },
  {
    "text": "point to say b and a implies A and B come on that's completely obvious well",
    "start": "962560",
    "end": "968040"
  },
  {
    "text": "yes it is completely obvious but it's not one of the proof rules I gave you so",
    "start": "968040",
    "end": "974040"
  },
  {
    "text": "if the proof rules work we should be able to prove it right so how do you",
    "start": "974040",
    "end": "979120"
  },
  {
    "text": "prove it well to prove an implication ass assume b and a so there's the",
    "start": "979120",
    "end": "985319"
  },
  {
    "text": "Assumption of b and a then having assumed b and a I can conclude a right",
    "start": "985319",
    "end": "990959"
  },
  {
    "text": "having assumed b and a I can conclude B oh now I've got proofs of A and B so I've proved A and B and now I can",
    "start": "990959",
    "end": "997560"
  },
  {
    "text": "discharge my assumption and now I know that b and a implies A and B so the proofs just fit",
    "start": "997560",
    "end": "1004399"
  },
  {
    "text": "in a little trees like this I hope that gives you some sense of how discharge of assumption works and if that all seems",
    "start": "1004399",
    "end": "1011319"
  },
  {
    "text": "really simple good it is that's the whole point okay any questions about that",
    "start": "1011319",
    "end": "1020000"
  },
  {
    "text": "now the other thing you can do with proofs is simplify them so this proof happens to be in simplest form but we'll",
    "start": "1020759",
    "end": "1026280"
  },
  {
    "text": "see an example of a proof not in simplest form in a minute in fact let me just move to that so here's a proof not",
    "start": "1026280",
    "end": "1032678"
  },
  {
    "text": "in simplest form so here again this is the proof we had before that b and a implies A and",
    "start": "1032679",
    "end": "1039120"
  },
  {
    "text": "B and here's some proof of b and a so I'm I'm not going to show you the proofs of b and a but say there were some",
    "start": "1039120",
    "end": "1045798"
  },
  {
    "text": "proofs of b and a so here's my proof of B and A and then from these two things of course",
    "start": "1045799",
    "end": "1051120"
  },
  {
    "text": "I can conclude A and B right but this is a kind of roundabout proof because um",
    "start": "1051120",
    "end": "1059840"
  },
  {
    "text": "here I've just mentioned b and a here I've mentioned A and B I've mentioned b and a but here in the middle of the",
    "start": "1059840",
    "end": "1065320"
  },
  {
    "text": "proof we've gotten implies symbol so um Genson wanted to know that",
    "start": "1065320",
    "end": "1073720"
  },
  {
    "text": "whenever you did a proof you only needed to rely on Concepts that were in the hypothesis and in the",
    "start": "1073720",
    "end": "1080559"
  },
  {
    "text": "conclusion so we should be able to get rid of this other idea of implies which isn't in our conclusion and let's assume",
    "start": "1080559",
    "end": "1087880"
  },
  {
    "text": "it's not in our hypotheses either so can we get rid of this well yeah we can because notice what this says is well",
    "start": "1087880",
    "end": "1093960"
  },
  {
    "text": "assume b and a but I don't need to assume b and a I've got a proof of b and a right here",
    "start": "1093960",
    "end": "1100919"
  },
  {
    "text": "so let's just use that proof so I'll replace the two assumptions by this proof and now right",
    "start": "1100919",
    "end": "1109880"
  },
  {
    "text": "and now I just get this proof of A and B okay so I've just copied this twice to",
    "start": "1109880",
    "end": "1115559"
  },
  {
    "text": "that place and that place and I don't need these last two rules I've eliminated",
    "start": "1115559",
    "end": "1120600"
  },
  {
    "text": "them um and now notice I've got from b and a conclude a and from b and a",
    "start": "1120600",
    "end": "1127320"
  },
  {
    "text": "conclude B but right there's a much easier way of doing that because just here I proved a and just here I proved B",
    "start": "1127320",
    "end": "1134240"
  },
  {
    "text": "so I get a much simpler proof so there's a direct proof from a proof of a and a proof B of course I can conclude A and B",
    "start": "1134240",
    "end": "1141720"
  },
  {
    "text": "so we've simplified the proof so how did we simplify it well we did two things",
    "start": "1141720",
    "end": "1147240"
  },
  {
    "text": "one is if we had an introduction an implies introduction followed by an implies elimination and what we did is",
    "start": "1147240",
    "end": "1153679"
  },
  {
    "text": "the implies introduction assumes a the elimination gives us a proof of a just",
    "start": "1153679",
    "end": "1159360"
  },
  {
    "text": "replace that assumption by the proof notice that right the Assumption occurred twice so we copied the proof",
    "start": "1159360",
    "end": "1166240"
  },
  {
    "text": "twice so we're making things simpler but that doesn't mean we're making things smaller we might may be making things",
    "start": "1166240",
    "end": "1174720"
  },
  {
    "text": "larger oops and then the other thing which is much simpler right says well if",
    "start": "1174840",
    "end": "1179919"
  },
  {
    "text": "from A and B you've got a proof of A and B and from that you can conclude a hey just use the proof of a directly so",
    "start": "1179919",
    "end": "1186760"
  },
  {
    "text": "those were the two things that we used in simplifying this proof question great",
    "start": "1186760",
    "end": "1195039"
  },
  {
    "text": "yes I have I guess two questions if that's okay um one is so uh the the",
    "start": "1195039",
    "end": "1202400"
  },
  {
    "text": "little superscript letters and the brackets we're just using those to tag different hypotheses right yes okay uh",
    "start": "1202400",
    "end": "1210559"
  },
  {
    "text": "and I guess my next question would be can we see the uh implication introduction rule again I'm just",
    "start": "1210559",
    "end": "1217240"
  },
  {
    "text": "wondering how we go from I I think I've seen something similar to this before but normally presented with like a Turn",
    "start": "1217240",
    "end": "1223679"
  },
  {
    "text": "Style where you can sort of say oh if you have these hypo or I guess I'm wondering of writing this rule is do we",
    "start": "1223679",
    "end": "1231480"
  },
  {
    "text": "have a whiteboard yeah so what you're saying is you've seen the rule in a different form and the form you've seen it says if assuming gamma and assuming a",
    "start": "1231480",
    "end": "1240440"
  },
  {
    "text": "I can prove B then assuming gamma alone I can prove a implies B right and and",
    "start": "1240440",
    "end": "1249240"
  },
  {
    "text": "yeah more people tend to use this form much more often this is actually called sequent",
    "start": "1249240",
    "end": "1255240"
  },
  {
    "text": "notation um but still natural dedu uction proof people use this more much",
    "start": "1255240",
    "end": "1260480"
  },
  {
    "text": "more often I like that one because I don't need to write I it uses less ink basically I don't need to write gamma",
    "start": "1260480",
    "end": "1266559"
  },
  {
    "text": "every time um and this has gone out of favor but I think it's actually much more",
    "start": "1266559",
    "end": "1273600"
  },
  {
    "text": "compactation introduction rule it's the same as that it's just presented different that's right it's just two different notations for describing",
    "start": "1275600",
    "end": "1281840"
  },
  {
    "text": "exactly the same thing good question thank you",
    "start": "1281840",
    "end": "1287840"
  },
  {
    "text": "okay so that was what um gensen did and",
    "start": "1292320",
    "end": "1298039"
  },
  {
    "text": "at around the same time as I mentioned Church introduced Lambda calculus now he didn't actually first come up with",
    "start": "1298039",
    "end": "1304279"
  },
  {
    "text": "Lambda calculus as a um a way of describing algorithms he came up with it",
    "start": "1304279",
    "end": "1310480"
  },
  {
    "text": "as a macro language for logic and that turned out that it was so powerful as a macro language for a logic you could use",
    "start": "1310480",
    "end": "1317240"
  },
  {
    "text": "it to write down essentially infinite formulas uh and then using something called Curry's Paradox you could prove",
    "start": "1317240",
    "end": "1324799"
  },
  {
    "text": "anything so it was too powerful as a macro language uh it let made your proof",
    "start": "1324799",
    "end": "1330720"
  },
  {
    "text": "system so powerful you could write down the equivalent of infinite formulas and those would let you prove anything so",
    "start": "1330720",
    "end": "1336000"
  },
  {
    "text": "that wasn't very helpful for a logic it he already thought he was on to",
    "start": "1336000",
    "end": "1341600"
  },
  {
    "text": "something right the first do I have this here no uh the first paper that he wrote",
    "start": "1341600",
    "end": "1347080"
  },
  {
    "text": "on Lambda calculus he actually said in it it may be that it has uses other than",
    "start": "1347080",
    "end": "1353120"
  },
  {
    "text": "just um in describing a logic and that turned out to be quite",
    "start": "1353120",
    "end": "1358240"
  },
  {
    "text": "right um",
    "start": "1358240",
    "end": "1363279"
  },
  {
    "text": "so Lambda calculus that turned out was too powerful and made things inconsistent but he could make things",
    "start": "1363279",
    "end": "1369440"
  },
  {
    "text": "consistent Again by having type Lambda calculus so the basic problem with",
    "start": "1369440",
    "end": "1375400"
  },
  {
    "text": "Lambda calculus I'm not going to show this to you in detail but the basic problem is you can write untyped Lambda",
    "start": "1375400",
    "end": "1380919"
  },
  {
    "text": "terms that don't terminate and so you had formulas that had no normal form it's or there wasn't",
    "start": "1380919",
    "end": "1387159"
  },
  {
    "text": "a formula there and that was how you could prove things that shouldn't be provable so if the proofs just would",
    "start": "1387159",
    "end": "1393760"
  },
  {
    "text": "always termine if the simplification of the proofs would always terminate you'd be okay so he introduced what was called",
    "start": "1393760",
    "end": "1399679"
  },
  {
    "text": "simply typed Lambda calculus and that turned out to make the system consistent",
    "start": "1399679",
    "end": "1404720"
  },
  {
    "text": "because it turns out the terms in simply typed Lambda calculus always termin",
    "start": "1404720",
    "end": "1410440"
  },
  {
    "text": "so there you go right Turing shows the halting problem unsolvable introducing simple types makes it solvable so",
    "start": "1411640",
    "end": "1418679"
  },
  {
    "text": "obviously you're restricting your expressiveness a bit but it turns out not very",
    "start": "1418679",
    "end": "1424640"
  },
  {
    "text": "much so let me show you the rules of Simply type Lambda calculus let X be a",
    "start": "1426120",
    "end": "1431679"
  },
  {
    "text": "variable of type A and N be a term of type B then Lambda xn is a term that",
    "start": "1431679",
    "end": "1439200"
  },
  {
    "text": "stands for a function with an argument of type a and a result of type B so a simple example of this",
    "start": "1439200",
    "end": "1446080"
  },
  {
    "text": "is um a might be the type number n might be the term x x",
    "start": "1446080",
    "end": "1452840"
  },
  {
    "text": "x which also has Type number and then Lambda x x x x is a function from a",
    "start": "1452840",
    "end": "1458840"
  },
  {
    "text": "number to a number it's the squaring function clear",
    "start": "1458840",
    "end": "1464080"
  },
  {
    "text": "enough most of you have probably bumped into this by now yeah just nod your head if you're suitably bored or ask a",
    "start": "1464080",
    "end": "1471360"
  },
  {
    "text": "question if you're confused okay and then we can apply functions right so L is a function from",
    "start": "1471360",
    "end": "1478159"
  },
  {
    "text": "A to B and uh m is a term of type A so we",
    "start": "1478159",
    "end": "1483240"
  },
  {
    "text": "apply L to M and we're applying a function that returns a b so L appli to",
    "start": "1483240",
    "end": "1488399"
  },
  {
    "text": "M of course has Type B and this just says that the um actual argument matches",
    "start": "1488399",
    "end": "1493960"
  },
  {
    "text": "up with the formal argument required by L uh and we can have a data structure",
    "start": "1493960",
    "end": "1499279"
  },
  {
    "text": "let's have pairs so if um m is a term of type A and N is a term of type B then MN",
    "start": "1499279",
    "end": "1507000"
  },
  {
    "text": "is an AB pair and if L is an AB pair then first of L extracts the first component whose",
    "start": "1507000",
    "end": "1514360"
  },
  {
    "text": "type of course is a and a second of L extracts the second component whose type",
    "start": "1514360",
    "end": "1519440"
  },
  {
    "text": "of course is B so let's try to write a simple program",
    "start": "1519440",
    "end": "1524799"
  },
  {
    "text": "and see how type checking works so here's Lambda Z second of Z first of Zed",
    "start": "1524799",
    "end": "1530399"
  },
  {
    "text": "and this says well if Zed is a b a pair then the result is an a pair so just the",
    "start": "1530399",
    "end": "1535960"
  },
  {
    "text": "function that given a pair swaps its two elements uh and how how do we know this",
    "start": "1535960",
    "end": "1542440"
  },
  {
    "text": "is type we'll assume that Zed is variable of um that's a ba pair then second of Zed would be an",
    "start": "1542440",
    "end": "1550080"
  },
  {
    "text": "A and similarly first of Zed would be a b so second of Zed paired with first of",
    "start": "1550080",
    "end": "1555559"
  },
  {
    "text": "Zed would be an AB pair and then Lambda Zed second of Zed first of Zed would be",
    "start": "1555559",
    "end": "1563360"
  },
  {
    "text": "a um a function from a ba pair to an AB pair clear",
    "start": "1563360",
    "end": "1571559"
  },
  {
    "text": "enough right Carl's completely bored because he knows this backwards and",
    "start": "1571679",
    "end": "1576960"
  },
  {
    "text": "forwards uh and let's just look at an example of a program so here's",
    "start": "1577200",
    "end": "1584559"
  },
  {
    "text": "this function that um that we just gave the typee of and let's",
    "start": "1584559",
    "end": "1591520"
  },
  {
    "text": "apply it to some pair let's call it YX where y has Type B and X has Type A so",
    "start": "1591520",
    "end": "1597120"
  },
  {
    "text": "that'll be a ba pair so now here's our function applied to YX and we want to evaluate that so you evaluate this using",
    "start": "1597120",
    "end": "1604799"
  },
  {
    "text": "What's called the beta rule which says you just take your actual argument and you substitute it for your formal",
    "start": "1604799",
    "end": "1610600"
  },
  {
    "text": "argument so we've done that here and there here I wrote Zed I've got my YX",
    "start": "1610600",
    "end": "1616360"
  },
  {
    "text": "pair and I've copied the whole proof proof that that pair is well typed so now we have a proof that after we've",
    "start": "1616360",
    "end": "1623159"
  },
  {
    "text": "done what's called a beta reduction the result is still well typed so now um",
    "start": "1623159",
    "end": "1628399"
  },
  {
    "text": "instead of second of Z first of Z I've got second of YX and first of YX and of",
    "start": "1628399",
    "end": "1633520"
  },
  {
    "text": "course second of YX is going to simplify to X and first of YX will simplify to Y",
    "start": "1633520",
    "end": "1640200"
  },
  {
    "text": "and that's still well typ we can just copy down the part of the proof that says well how do I know this is well",
    "start": "1640200",
    "end": "1645960"
  },
  {
    "text": "type well because um at has Type A so second of YX has Type A if we just",
    "start": "1645960",
    "end": "1652200"
  },
  {
    "text": "replace that by X it still has Type A and um here and similarly here we've",
    "start": "1652200",
    "end": "1657919"
  },
  {
    "text": "just simplified the proof so now we've evaluated our program so the swapping program applied to YX gives us",
    "start": "1657919",
    "end": "1666679"
  },
  {
    "text": "XY and as I mentioned this process will always terminate and the first proof of",
    "start": "1666679",
    "end": "1672640"
  },
  {
    "text": "that was actually written down by Turing Turing also wrote down the proof explaining that Lambda calculus was",
    "start": "1672640",
    "end": "1678720"
  },
  {
    "text": "equivalent to Turing machines I mentioned that Turing machines were much more popular and most people thought they were easier to understand but if",
    "start": "1678720",
    "end": "1685799"
  },
  {
    "text": "you read turing's own paper on the equivalence between Lambda calculus and Turing machines pretty much the first",
    "start": "1685799",
    "end": "1692480"
  },
  {
    "text": "thing he says in the first paragraph is this proof is very useful because it means we can do everything instead of",
    "start": "1692480",
    "end": "1698760"
  },
  {
    "text": "using touring machines using quote the more elegant unquote Lambda",
    "start": "1698760",
    "end": "1705120"
  },
  {
    "text": "calculus so Turing had good taste",
    "start": "1705120",
    "end": "1710120"
  },
  {
    "text": "and then these are just the rules for evaluating programs so this just says right well what is Lambda xn applied to a term M it's just n with all equ",
    "start": "1712080",
    "end": "1721000"
  },
  {
    "text": "occurrences of X replaced by m that's just the notation that means that and then you can simplify the proof that the",
    "start": "1721000",
    "end": "1726440"
  },
  {
    "text": "original is well typed to give you a proof that the result is well typed and",
    "start": "1726440",
    "end": "1731600"
  },
  {
    "text": "similarly for um getting the first component of a",
    "start": "1731600",
    "end": "1737039"
  },
  {
    "text": "pair now you're probably getting a sense of deja vu so at this point I I hope the",
    "start": "1737039",
    "end": "1743799"
  },
  {
    "text": "organizers have prepared things as I asked but could you reach under your seat you should find there a a pair of",
    "start": "1743799",
    "end": "1750320"
  },
  {
    "text": "colored glasses they should be rosec",
    "start": "1750320",
    "end": "1756880"
  },
  {
    "text": "colored you didn't do this okay well you have to imagine putting on your",
    "start": "1758960",
    "end": "1764519"
  },
  {
    "text": "rose-colored glasses and when you do so of course everything that's in red will go away and what",
    "start": "1764519",
    "end": "1771399"
  },
  {
    "text": "you'll see of course is that this if you take away all the bits in red looks",
    "start": "1771399",
    "end": "1778120"
  },
  {
    "text": "exactly like this and that everything we've seen right if you take away the red",
    "start": "1778120",
    "end": "1785519"
  },
  {
    "text": "stuff you get what we saw previously so it's this exact correspondence right between what gensen",
    "start": "1785519",
    "end": "1792720"
  },
  {
    "text": "did and what church did now that wasn't actually recognized",
    "start": "1792720",
    "end": "1799240"
  },
  {
    "text": "until quite a bit later uh that's what's called the curry",
    "start": "1799279",
    "end": "1806600"
  },
  {
    "text": "Howard isomorphism which says that well functions are the same as implication",
    "start": "1806600",
    "end": "1812960"
  },
  {
    "text": "product spaces are the same as conjunction also it turns out that",
    "start": "1812960",
    "end": "1819279"
  },
  {
    "text": "disjoint Union or um variants are the same as disjunction and the empty type",
    "start": "1819279",
    "end": "1827200"
  },
  {
    "text": "is the same as false so that's a diagram due to Luca",
    "start": "1827200",
    "end": "1833679"
  },
  {
    "text": "cardelli back from when he did type Theory this was written up so hascal Curry discovered something",
    "start": "1833679",
    "end": "1840760"
  },
  {
    "text": "similar um but not exactly the same thing and then this correspondence between lapet calculus and natural",
    "start": "1840760",
    "end": "1846880"
  },
  {
    "text": "deduction was written down by William Howard in um Zero's notes that circulated in",
    "start": "1846880",
    "end": "1853720"
  },
  {
    "text": "1969 and um didn't appear until this paper was published in 1980 in a fft to",
    "start": "1853720",
    "end": "1863519"
  },
  {
    "text": "Curry so I bet everybody sitting here is going",
    "start": "1864200",
    "end": "1869840"
  },
  {
    "text": "wait a minute that's completely obvious didn't they see that at the time well no we know they didn't see it at",
    "start": "1869840",
    "end": "1876639"
  },
  {
    "text": "the time the way that we know is remember I said that gensen introduced two forms of logic natural deduction and",
    "start": "1876639",
    "end": "1883120"
  },
  {
    "text": "sequent calculus he introduced sequent calculus in order to prove prove this",
    "start": "1883120",
    "end": "1888840"
  },
  {
    "text": "idea that proofs are not roundabout this idea that if you have um hypotheses that",
    "start": "1888840",
    "end": "1893880"
  },
  {
    "text": "mentions some formulas and a conclusion that mentions some formula you can always normalize your proof so that it",
    "start": "1893880",
    "end": "1900279"
  },
  {
    "text": "only mentions your hypothesis and your conclusion and parts of those the sub formulas so this is called the sub",
    "start": "1900279",
    "end": "1907039"
  },
  {
    "text": "formula principle and he described this in his original paper saying it's very important you can always do a proof that",
    "start": "1907039",
    "end": "1912880"
  },
  {
    "text": "is not roundabout uh that's the English transl",
    "start": "1912880",
    "end": "1918080"
  },
  {
    "text": "of the word I use I actually haven't looked up the German word does anybody know it no I have to look that up um but",
    "start": "1918080",
    "end": "1925600"
  },
  {
    "text": "anyhow he wanted to show that there were no roundabout proofs but he didn't do it the way I just showed you he did it by",
    "start": "1925600",
    "end": "1932799"
  },
  {
    "text": "um showing an equivalent to sequent calculus and showing that sequent calculus satisfies something called cut",
    "start": "1932799",
    "end": "1938200"
  },
  {
    "text": "elimination which is the equivalent of the normalization rules I showed you um and in that way demonstrated the sub",
    "start": "1938200",
    "end": "1945080"
  },
  {
    "text": "formula property that's so it's irony time right he needed a roundabout proof to show",
    "start": "1945080",
    "end": "1952840"
  },
  {
    "text": "that there were no roundabout proofs it wasn't until 1965 that provits",
    "start": "1952840",
    "end": "1960080"
  },
  {
    "text": "came up with the direct proof and then shortly after that in the 70s this correspondence between natural deduction",
    "start": "1960080",
    "end": "1968240"
  },
  {
    "text": "and um natural deduction and simply type Lambda calculus was discovered",
    "start": "1968240",
    "end": "1977398"
  },
  {
    "text": "so this is often called the curry Howard correspondence um other people were",
    "start": "1980120",
    "end": "1985679"
  },
  {
    "text": "involved as well if you look at the work of the intuitionists even before the 1930s and the 1920s they were saying",
    "start": "1985679",
    "end": "1992720"
  },
  {
    "text": "similar things they say implication is what does it mean to prove that a",
    "start": "1992720",
    "end": "1997880"
  },
  {
    "text": "implies B it means you have a function that given a proof of a returns a proof of B what does it mean to prove A and B",
    "start": "1997880",
    "end": "2006200"
  },
  {
    "text": "it means you have a pair of proofs one of a one of B what does it mean to prove A or B it means either you have a proof",
    "start": "2006200",
    "end": "2014360"
  },
  {
    "text": "of a or you have a proof of B and that's why they were in the intuitionists They didn't accept that not a or a was",
    "start": "2014360",
    "end": "2023760"
  },
  {
    "text": "provable because they didn't know you wouldn't have a proof of not a or a proof of a you just had a proof of not a",
    "start": "2023760",
    "end": "2030679"
  },
  {
    "text": "or a um so that's why they were called the intuitionist so anyhow lots of people",
    "start": "2030679",
    "end": "2037080"
  },
  {
    "text": "say well Curry and Howard were great but maybe some credit should go to Brower heting and korov the",
    "start": "2037080",
    "end": "2044320"
  },
  {
    "text": "intuitionists uh some people say maybe credit should go to De Bruin who was the first person who actually wrote out a",
    "start": "2044320",
    "end": "2050158"
  },
  {
    "text": "proof system and um independently of Curry and Howard uh expressed these",
    "start": "2050159",
    "end": "2056040"
  },
  {
    "text": "ideas um so propositions as types is a very handy name that um distributes the",
    "start": "2056040",
    "end": "2063398"
  },
  {
    "text": "credit equally and that's why I started using that name instead but you're free to use whichever name you want call it",
    "start": "2063399",
    "end": "2069560"
  },
  {
    "text": "the bhk correspondence call it the curry Howard correspondence uh call it the curry Howard debuy correspondence as",
    "start": "2069560",
    "end": "2076000"
  },
  {
    "text": "some people do so yes logic IE does p and not P imply",
    "start": "2076000",
    "end": "2084800"
  },
  {
    "text": "Q uh In classical logic yes and also in intuition as well it's the proof by",
    "start": "2085480",
    "end": "2090638"
  },
  {
    "text": "contradiction um let's not go there just now but I'll",
    "start": "2090639",
    "end": "2095960"
  },
  {
    "text": "say a little bit about classical logic and",
    "start": "2095960",
    "end": "2099640"
  },
  {
    "text": "moment um right so the name for this is",
    "start": "2103280",
    "end": "2108320"
  },
  {
    "text": "propositions as types but we can see very importantly it's not just about",
    "start": "2108320",
    "end": "2113359"
  },
  {
    "text": "propositions as types um it's also right about proofs as",
    "start": "2113359",
    "end": "2122280"
  },
  {
    "text": "programs and even more than that right it's about normalization of proofs as",
    "start": "2122280",
    "end": "2128400"
  },
  {
    "text": "evaluation of programs um one way of expressing all these ideas is in",
    "start": "2128400",
    "end": "2133440"
  },
  {
    "text": "category Theory and turns out that um these are the type level of categories",
    "start": "2133440",
    "end": "2140040"
  },
  {
    "text": "uh this is the arrow level and this is two-dimensional categories we have arrows between",
    "start": "2140040",
    "end": "2145480"
  },
  {
    "text": "arrows so it's a fairly deep concept right and",
    "start": "2145480",
    "end": "2151079"
  },
  {
    "text": "um many people have said right it's not just the curry Howard bje",
    "start": "2151079",
    "end": "2158160"
  },
  {
    "text": "it's the curry Howard isomorphism right it's not just that there's a one toone correspondence",
    "start": "2158160",
    "end": "2163440"
  },
  {
    "text": "between these things but there's a one toone correspondence between the structures that relate them and a one to",
    "start": "2163440",
    "end": "2169160"
  },
  {
    "text": "one correspondence between the structures that relate those so that's why it's such a cool",
    "start": "2169160",
    "end": "2175920"
  },
  {
    "text": "idea now when I first saw this cool idea",
    "start": "2175920",
    "end": "2181000"
  },
  {
    "text": "I thought that's cute that's some kind of a",
    "start": "2181000",
    "end": "2189960"
  },
  {
    "text": "coincidence well I didn't think is you know the standard scientist question I wonder if this happens anywhere",
    "start": "2190440",
    "end": "2196760"
  },
  {
    "text": "else and what I certainly didn't think was um hey I think this is going to be",
    "start": "2196760",
    "end": "2202280"
  },
  {
    "text": "the basis for my research career but that was kind of what",
    "start": "2202280",
    "end": "2208480"
  },
  {
    "text": "happened and the reason why is because it doesn't just happen for natural",
    "start": "2208480",
    "end": "2215880"
  },
  {
    "text": "deduction and simply type Lambda Cal calcus but for pretty much as was mentioned at the beginning every single",
    "start": "2215880",
    "end": "2223359"
  },
  {
    "text": "logical system you can name there is a corresponding computational",
    "start": "2223359",
    "end": "2229760"
  },
  {
    "text": "system and I've mentioned just a few of those correspondences there one of the",
    "start": "2229760",
    "end": "2235359"
  },
  {
    "text": "interesting ones is that the classical intuitionistic embedding of girdle corresponds to something called",
    "start": "2235359",
    "end": "2240720"
  },
  {
    "text": "continuation passing style which is a standard implementation technique and this actually gives you um an interpret",
    "start": "2240720",
    "end": "2247760"
  },
  {
    "text": "a of classical logic so if you have um call with",
    "start": "2247760",
    "end": "2254240"
  },
  {
    "text": "current continuation which is an operation in some programming languages you can use that to implement the proof",
    "start": "2254240",
    "end": "2260440"
  },
  {
    "text": "of the law of the excluded middle so it turns out classical logic falls under this there are lots of",
    "start": "2260440",
    "end": "2267599"
  },
  {
    "text": "different kinds of modal Logics one of those gives you monads which is a very standard way of dealing with um things",
    "start": "2267599",
    "end": "2274599"
  },
  {
    "text": "like State and exceptions in functional languages um it's also used for uh dealing with",
    "start": "2274599",
    "end": "2279960"
  },
  {
    "text": "concurrency in things like um FP um the one of my favorites is",
    "start": "2279960",
    "end": "2288040"
  },
  {
    "text": "that right the fact that there's a correspondence between logic and",
    "start": "2288040",
    "end": "2295119"
  },
  {
    "text": "Computing means that we should expect that every good idea in Computing has",
    "start": "2295119",
    "end": "2303000"
  },
  {
    "text": "already been discovered by a logician uh and indeed this is what happens right",
    "start": "2303000",
    "end": "2310359"
  },
  {
    "text": "so that when Milner came up with his type inference algorithm for um the functional language ml it turns out that",
    "start": "2310359",
    "end": "2317720"
  },
  {
    "text": "had already been done by hindley trying to understand certain aspects of logic",
    "start": "2317720",
    "end": "2322920"
  },
  {
    "text": "so the system is now called The hindley Milner system and when Reynolds came up",
    "start": "2322920",
    "end": "2328640"
  },
  {
    "text": "with polymorphic Lambda calculus which um corresponds to generics in languages like Java and indeed my knowledge of",
    "start": "2328640",
    "end": "2336839"
  },
  {
    "text": "what Reynold had done um got fed in through the team to the design of generics for Java um it had already been",
    "start": "2336839",
    "end": "2344680"
  },
  {
    "text": "discovered by the logician Gerard who had done an isomorphic system called system F and now often this is called",
    "start": "2344680",
    "end": "2351079"
  },
  {
    "text": "the Gerard Reynolds uh calculus so what is curry Howard it's a double",
    "start": "2351079",
    "end": "2358400"
  },
  {
    "text": "barrel name that predicts the existence of other double barreled names such as hendley Milner and Gerard",
    "start": "2358400",
    "end": "2365200"
  },
  {
    "text": "Reynolds so pretty much every functional language",
    "start": "2365200",
    "end": "2371640"
  },
  {
    "text": "you can name has Lambda calculus at its",
    "start": "2371640",
    "end": "2377160"
  },
  {
    "text": "core so um this is kind of my invitation to you",
    "start": "2377920",
    "end": "2383119"
  },
  {
    "text": "to go off and learn one of these languages now all of these Lang so",
    "start": "2383119",
    "end": "2389079"
  },
  {
    "text": "you've seen my argument here right this is a repetition of the earlier argument I said three times people found the same",
    "start": "2389079",
    "end": "2394480"
  },
  {
    "text": "thing that means it's discovered not invented twice",
    "start": "2394480",
    "end": "2399880"
  },
  {
    "text": "independently people find um natural deduction and Lambda calculus and they",
    "start": "2399880",
    "end": "2405200"
  },
  {
    "text": "turn out to be isomorphic that's a discovery and again right it doesn't just happen once happens lots of times",
    "start": "2405200",
    "end": "2411480"
  },
  {
    "text": "happens for hindley Milner happens for Gerard Reynolds again and again the same thing is discovered by different people",
    "start": "2411480",
    "end": "2418359"
  },
  {
    "text": "so I will not say there are not bits of these languages that are invented they all have bits that are invented but they",
    "start": "2418359",
    "end": "2424599"
  },
  {
    "text": "have a core that is something that is discovered now probably most of you use programming",
    "start": "2424599",
    "end": "2432160"
  },
  {
    "text": "languages other than these and those languages many of them I",
    "start": "2432160",
    "end": "2437880"
  },
  {
    "text": "would say are not discovered they are invented and you can tell can't",
    "start": "2437880",
    "end": "2448200"
  },
  {
    "text": "you right so this is my invitation to you to go off and learn a programming",
    "start": "2448960",
    "end": "2454440"
  },
  {
    "text": "language that is discovered yes so one language that I'm aware of that I don't",
    "start": "2454440",
    "end": "2460720"
  },
  {
    "text": "see there is bak's FP or his second attemp",
    "start": "2460720",
    "end": "2466880"
  },
  {
    "text": "FL uh no oh vas's FP yes so that was a",
    "start": "2466880",
    "end": "2472280"
  },
  {
    "text": "wonderful theoretical language it was highly influential it wasn't really implemented and widely used I've given",
    "start": "2472280",
    "end": "2478480"
  },
  {
    "text": "here a list of things that are implemented and widely used was implemented and",
    "start": "2478480",
    "end": "2485920"
  },
  {
    "text": "distributed so this is this is a list of some functional languages not a list of all and you've",
    "start": "2485920",
    "end": "2491480"
  },
  {
    "text": "just mentioned an important historical one that I've omitted so how did real languages like",
    "start": "2491480",
    "end": "2497400"
  },
  {
    "text": "Java and C++ okay escape from ideology and",
    "start": "2497400",
    "end": "2503359"
  },
  {
    "text": "Triumph so this is a repetition of the earlier question right how come we don't",
    "start": "2503359",
    "end": "2509280"
  },
  {
    "text": "all use this stuff um I think the weight of This falls on the functional programming",
    "start": "2509280",
    "end": "2516240"
  },
  {
    "text": "community we didn't do a great enough job of explaining to other people how",
    "start": "2516240",
    "end": "2522119"
  },
  {
    "text": "you can use this to do everything you're maybe we're missing",
    "start": "2522119",
    "end": "2528200"
  },
  {
    "text": "something so so what so I was the reason I'm here",
    "start": "2528200",
    "end": "2533800"
  },
  {
    "text": "in uh the Bay Area is so I could attend Kai right I'm not really a human",
    "start": "2533800",
    "end": "2540119"
  },
  {
    "text": "computer interaction guy but they had a workshop on programming language usability and the idea is let's do",
    "start": "2540119",
    "end": "2547720"
  },
  {
    "text": "scientific experiments to empirically measure what people are more productive with right what is a better language",
    "start": "2547720",
    "end": "2554559"
  },
  {
    "text": "design and possibly from that we can begin to work out scientifically whether or not functional",
    "start": "2554559",
    "end": "2561880"
  },
  {
    "text": "languages are actually a good idea so I think the fact that they are discovered rather than invented",
    "start": "2561880",
    "end": "2568240"
  },
  {
    "text": "is powerful um Intuition or suggestion that they might be but that doesn't save",
    "start": "2568240",
    "end": "2575359"
  },
  {
    "text": "you from doing the experiments you have to do the experiments now you could say well wait a minute wouldn't it just be",
    "start": "2575359",
    "end": "2580559"
  },
  {
    "text": "the case that whatever is more effective people would use that was actually why I thought back in graduate school in fact",
    "start": "2580559",
    "end": "2586280"
  },
  {
    "text": "back in graduate school first I thought let's do empirical measurements and I found some papers people had written",
    "start": "2586280",
    "end": "2592960"
  },
  {
    "text": "about doing empirical measurements about functional versus imperative languages and they were all very consistent here",
    "start": "2592960",
    "end": "2599240"
  },
  {
    "text": "was the consistency between them if the introduction said we think imperative languages are better that's what the",
    "start": "2599240",
    "end": "2605960"
  },
  {
    "text": "paper showed if it's said we think functional languages are better that's what the paper showed so I thought hm",
    "start": "2605960",
    "end": "2612640"
  },
  {
    "text": "this is going to be hard all right let's just wait and see what languages people end up using people end up using the",
    "start": "2612640",
    "end": "2619040"
  },
  {
    "text": "better languages I didn't really understand about Network",
    "start": "2619040",
    "end": "2624359"
  },
  {
    "text": "effects right Network effects means that if something is popular the next thing",
    "start": "2624359",
    "end": "2629880"
  },
  {
    "text": "to become popular would be the thing that's like the first thing and you can look at that and see right and that's why C begat Java and Java begat",
    "start": "2629880",
    "end": "2638800"
  },
  {
    "text": "JavaScript um so one reason why it might be the case that things that aren't the",
    "start": "2638800",
    "end": "2644640"
  },
  {
    "text": "best dominate could be things like Network effects now does that prove functional languages or better nope we",
    "start": "2644640",
    "end": "2651400"
  },
  {
    "text": "don't have that proof um I'm hoping that one outcome uh",
    "start": "2651400",
    "end": "2656760"
  },
  {
    "text": "of this uh Workshop um special interest group at Kai will be to begin the effort to find that out and you know it's very",
    "start": "2656760",
    "end": "2664800"
  },
  {
    "text": "hard right I just mentioned that the first study um are really inconclusive um we're just beginning to",
    "start": "2664800",
    "end": "2672119"
  },
  {
    "text": "begin to amass some evidence for things that are much simpler than functional versus imperative so this is a program",
    "start": "2672119",
    "end": "2678960"
  },
  {
    "text": "that's going to take a long time right but in it's just like functional language right functional languages used",
    "start": "2678960",
    "end": "2684520"
  },
  {
    "text": "to be really slow that's another reason people didn't use them they used to not have good libraries that's another",
    "start": "2684520",
    "end": "2690760"
  },
  {
    "text": "reason people didn't use them they used to not have debuggers all you need to do is keep doing the same thing for 30 years and",
    "start": "2690760",
    "end": "2697040"
  },
  {
    "text": "you'll get a lot better at it so I'm hoping we'll begin to do and so these",
    "start": "2697040",
    "end": "2702800"
  },
  {
    "text": "things which it used to be you couldn't practically use them now people you can practically use them right so one reason",
    "start": "2702800",
    "end": "2709800"
  },
  {
    "text": "perhaps why they're not widely practically used is well didn't used to be the case you could now it is right",
    "start": "2709800",
    "end": "2716640"
  },
  {
    "text": "you know this of course because you scholar a lot um so wait and see wait and see if",
    "start": "2716640",
    "end": "2724559"
  },
  {
    "text": "we can dominate over the network effects wait and see if we can actually build up a body of research and that'll be a long",
    "start": "2724559",
    "end": "2730079"
  },
  {
    "text": "program you the way to do anything is just start go on and keep at it for 30 years so come back in 30 years we might",
    "start": "2730079",
    "end": "2736880"
  },
  {
    "text": "have an empirical answer as well yeah in traditional",
    "start": "2736880",
    "end": "2742119"
  },
  {
    "text": "languages people frequently confus with better whether the language is better or",
    "start": "2742119",
    "end": "2749040"
  },
  {
    "text": "actually whether the implementation is better MH what's the equivalent in functional languages I so the question",
    "start": "2749040",
    "end": "2756760"
  },
  {
    "text": "was um people often confuse whether the language is better or the implementation is better what's the equivalent for",
    "start": "2756760",
    "end": "2762839"
  },
  {
    "text": "functional languages and as I just mentioned it used to be the case the implementations of functional languages",
    "start": "2762839",
    "end": "2769000"
  },
  {
    "text": "were rather slow and used a law of resource compared to imperative languages that's not nearly as much the",
    "start": "2769000",
    "end": "2775280"
  },
  {
    "text": "case now so I think that's the equivalent of what you're asking about so it used to be these things weren't",
    "start": "2775280",
    "end": "2780559"
  },
  {
    "text": "very practical but they're becoming more practical and also of course functional languages often work better in the",
    "start": "2780559",
    "end": "2786240"
  },
  {
    "text": "presence of concurrency because you're not trying to write um have many",
    "start": "2786240",
    "end": "2791280"
  },
  {
    "text": "processes WR on the same memory which is a very difficult thing to analyze so there's beginning to be much more",
    "start": "2791280",
    "end": "2797200"
  },
  {
    "text": "interest in functional languages in industry for that reason so let's just wait 30 years and see what happens yeah",
    "start": "2797200",
    "end": "2805280"
  },
  {
    "text": "in the uh uh the presentation of Lambda calculus that you gave or like um when",
    "start": "2805280",
    "end": "2811839"
  },
  {
    "text": "we were uh defining function application we were textually substituting",
    "start": "2811839",
    "end": "2817480"
  },
  {
    "text": "the value of the parameter inside the body of the function um so that's what",
    "start": "2817480",
    "end": "2824839"
  },
  {
    "text": "is it the pass by name semantics call by name semantics call by name semantics uh what what sort of changes if you uh if",
    "start": "2824839",
    "end": "2833079"
  },
  {
    "text": "you evaluate the argument first before you stu it into so if you evaluate the argument first it's called call by value",
    "start": "2833079",
    "end": "2839280"
  },
  {
    "text": "right and um back when I first started to do this there was a nice equational theory of call by name there was not a",
    "start": "2839280",
    "end": "2846040"
  },
  {
    "text": "nice equational the of call by value now there are nice equational theories of both uh in fact I made some contribution",
    "start": "2846040",
    "end": "2853599"
  },
  {
    "text": "to that um so you can just look those up and find theories for both you can do it",
    "start": "2853599",
    "end": "2859680"
  },
  {
    "text": "either way now uh and in fact right call by name of course is horribly inefficient what we",
    "start": "2859680",
    "end": "2865319"
  },
  {
    "text": "do in languages like hasal which is call by need is you make clever use of pointers so that you evaluate each",
    "start": "2865319",
    "end": "2872079"
  },
  {
    "text": "shared subterm at most once",
    "start": "2872079",
    "end": "2876520"
  },
  {
    "text": "yeah I have an empirical hypothesis that I think is going to be played out in the next 5 years and that is that what the",
    "start": "2877319",
    "end": "2883440"
  },
  {
    "text": "functional languag is in fact missing is is concurrency and then that's going to",
    "start": "2883440",
    "end": "2888559"
  },
  {
    "text": "be deadly as the number of cores goes up we're just in the beginning right now you know we get maybe 60 once we get 100",
    "start": "2888559",
    "end": "2894800"
  },
  {
    "text": "200 cores on a chip then this thing's going to die so some of these languages",
    "start": "2894800",
    "end": "2900599"
  },
  {
    "text": "like Airline fun languages will die Airline is not a purely functional language neither is Scala so there will",
    "start": "2900599",
    "end": "2907520"
  },
  {
    "text": "be greater interest in languages that support concurrency as your theory that's right that that will be the only way to get performance so hold on so",
    "start": "2907520",
    "end": "2915160"
  },
  {
    "text": "you're saying that the functional language he said purely functional languages will die in five years because they won't be able to get",
    "start": "2915160",
    "end": "2921640"
  },
  {
    "text": "performance which is opposite of what you're saying uh not really no I think that the",
    "start": "2921640",
    "end": "2928960"
  },
  {
    "text": "functional languages that will attract a lot of interest will be ones that support concurrency in one way or",
    "start": "2928960",
    "end": "2934680"
  },
  {
    "text": "another but he's saying they won't be function why don't I finish the talk and",
    "start": "2934680",
    "end": "2941720"
  },
  {
    "text": "then we can have debates like that over",
    "start": "2941720",
    "end": "2945359"
  },
  {
    "text": "dinner because you don't oh right okay you're saying wait wait wait does concurrency fit into this well that's my",
    "start": "2946799",
    "end": "2952079"
  },
  {
    "text": "day job um it turns out right so I I work on something I have a large uh",
    "start": "2952079",
    "end": "2959880"
  },
  {
    "text": "Grant in the UK called a um program Grant shared with Glasgow and Imperial to look at something called session",
    "start": "2959880",
    "end": "2966119"
  },
  {
    "text": "types which are an approach to concurrency and I got interested in that you know I always knew concurrency was",
    "start": "2966119",
    "end": "2971520"
  },
  {
    "text": "interested but lots of people do concurrency what can I contribute ah well it turns out um that",
    "start": "2971520",
    "end": "2980200"
  },
  {
    "text": "um fending and Caris disco oh sorry fening and Caris discovered a",
    "start": "2980200",
    "end": "2986000"
  },
  {
    "text": "correspondence between linear logic and session types so I thought right I",
    "start": "2986000",
    "end": "2992079"
  },
  {
    "text": "should be all over this because concurrency is really important",
    "start": "2992079",
    "end": "2997318"
  },
  {
    "text": "well there are all sorts of problems with session types yes but it's a way into concurrency that has this logical",
    "start": "2999760",
    "end": "3007680"
  },
  {
    "text": "Foundation right let me just wrap up so there are lots of functional languages by the way the same techniques since",
    "start": "3007680",
    "end": "3014040"
  },
  {
    "text": "they can be used for proofs can be used to represent proofs so pretty much every proof assistant that you can name make",
    "start": "3014040",
    "end": "3020920"
  },
  {
    "text": "some use of these ideas as a way of representing proofs and this comes up a",
    "start": "3020920",
    "end": "3026040"
  },
  {
    "text": "lot in things like COA which has now been used for things like proving C compilers correct and proving operating",
    "start": "3026040",
    "end": "3032839"
  },
  {
    "text": "systems correct or meet certain specifications uh if you want to know",
    "start": "3032839",
    "end": "3039240"
  },
  {
    "text": "more about this there are many many places to go one place you can go is this paper published in Communications",
    "start": "3039240",
    "end": "3045559"
  },
  {
    "text": "of the ACM in December of last year and there lots of other citations there if",
    "start": "3045559",
    "end": "3051480"
  },
  {
    "text": "you want to look at other things I'm certainly not going to claim this is the only or even necessarily the best place",
    "start": "3051480",
    "end": "3057680"
  },
  {
    "text": "but it might be a useful uh starting off point if you want to know know more so let me",
    "start": "3057680",
    "end": "3065440"
  },
  {
    "text": "conclude and since turing's big contribution was philosophy I'm going to conclude with a little bit of",
    "start": "3065440",
    "end": "3073200"
  },
  {
    "text": "philosophy what would happen if we tried to talk to aliens so we've actually done this this",
    "start": "3077000",
    "end": "3082799"
  },
  {
    "text": "is a plaque on the um Voyager spacecraft sorry Pioneer thank you",
    "start": "3082799",
    "end": "3090680"
  },
  {
    "text": "I thank you for the correction um right so this is trying to convey",
    "start": "3090680",
    "end": "3097880"
  },
  {
    "text": "some information um here's a map of where the sun is relative to various pulsars the",
    "start": "3097880",
    "end": "3106200"
  },
  {
    "text": "length of the line is the distance to the Pulsar it has little marks on it that you can barely see here which are",
    "start": "3106200",
    "end": "3112799"
  },
  {
    "text": "in binary the frequency of the pulsar this is explaining where the sun is and",
    "start": "3112799",
    "end": "3118760"
  },
  {
    "text": "then this bit here so that's Pioneer in the background and that's two people in the front right and they're now would",
    "start": "3118760",
    "end": "3125520"
  },
  {
    "text": "aliens understand this right so aliens could probably work out the notion of length they could probably understand",
    "start": "3125520",
    "end": "3132839"
  },
  {
    "text": "binary um what about this bit well right if",
    "start": "3132839",
    "end": "3140240"
  },
  {
    "text": "Star Trek is correct then the aliens will look at it and go oh they look just like us",
    "start": "3140240",
    "end": "3147680"
  },
  {
    "text": "except they don't have pubic hair but other than that they look just like us",
    "start": "3147680",
    "end": "3153200"
  },
  {
    "text": "um or right it might be the aliens are really very different and they can't perceive this at all and they don't",
    "start": "3153200",
    "end": "3159240"
  },
  {
    "text": "really know what to make of this right so some bits we can be pretty seems",
    "start": "3159240",
    "end": "3164760"
  },
  {
    "text": "likely they'll be able to decipher other bits it's less clear um so what about Lambda calc you",
    "start": "3164760",
    "end": "3173960"
  },
  {
    "text": "what about extending programs to aliens so um Independence Day is a movie and in",
    "start": "3173960",
    "end": "3179960"
  },
  {
    "text": "it the aliens are destroyed by a computer virus here's a screen capture of the computer virus and you can see",
    "start": "3179960",
    "end": "3186000"
  },
  {
    "text": "that it's written in C it's written in a dialect of C that",
    "start": "3186000",
    "end": "3191599"
  },
  {
    "text": "only has open curly [Laughter]",
    "start": "3191599",
    "end": "3196880"
  },
  {
    "text": "braces so what are the chances right that you",
    "start": "3196880",
    "end": "3202240"
  },
  {
    "text": "could give a computer virus to an alien computer in",
    "start": "3202240",
    "end": "3208680"
  },
  {
    "text": "C probably not large probably aliens do not already program their computers in C",
    "start": "3208839",
    "end": "3214319"
  },
  {
    "text": "what is the probability what if you sent aliens a program in Lambda calculus now they",
    "start": "3214319",
    "end": "3221079"
  },
  {
    "text": "might well not understand the symbol Lambda right but if you can do it in a way where they can just work out distinct symbols they could probably",
    "start": "3221079",
    "end": "3227400"
  },
  {
    "text": "work out how to parse it they could probably work out and you know it's I would claim it's quite likely that they",
    "start": "3227400",
    "end": "3234200"
  },
  {
    "text": "would be able to decipher what Lambda calculus is if you set them a program and C maybe they could maybe not",
    "start": "3234200",
    "end": "3243079"
  },
  {
    "text": "sorry with their virus checker cture check that's a different issue um but",
    "start": "3243079",
    "end": "3248440"
  },
  {
    "text": "but anyhow making an analogy right I'd say Lambda calculus is like this they're likely to understand it um C much less",
    "start": "3248440",
    "end": "3256160"
  },
  {
    "text": "clear whether they would understand it or not so does this mean we should call",
    "start": "3256160",
    "end": "3261440"
  },
  {
    "text": "Lambda calculus the universal programming language well let's think about that for a",
    "start": "3261440",
    "end": "3268200"
  },
  {
    "text": "minute um these days actually it's become common to talk about multiverses this is from a uh play",
    "start": "3268200",
    "end": "3276520"
  },
  {
    "text": "called constellations um the normally a play has complicated stage directions the",
    "start": "3276520",
    "end": "3282160"
  },
  {
    "text": "stage directions for this play are very simple it says when you're reading the play a horizontal rule stands for a",
    "start": "3282160",
    "end": "3288880"
  },
  {
    "text": "change of universe so it's a play whose action takes place across many",
    "start": "3288880",
    "end": "3295000"
  },
  {
    "text": "universes um scientists make use of multiple universes right things like the",
    "start": "3295000",
    "end": "3301599"
  },
  {
    "text": "strong electron constant it's turns out its value if it was much larger or much",
    "start": "3301599",
    "end": "3307880"
  },
  {
    "text": "smaller matter wouldn't cohere so why is it that this constant",
    "start": "3307880",
    "end": "3313559"
  },
  {
    "text": "happens to be just right for matter to cohere well maybe there are lots of",
    "start": "3313559",
    "end": "3318880"
  },
  {
    "text": "universes maybe in most of them matter doesn't cohere we happen to be in one of the ones where matter does cohere cuz",
    "start": "3318880",
    "end": "3325440"
  },
  {
    "text": "we're here here to see it so the fact that the Universe can be observed might",
    "start": "3325440",
    "end": "3331559"
  },
  {
    "text": "explain why um those constants have the values they do or in the range they are",
    "start": "3331559",
    "end": "3338160"
  },
  {
    "text": "so scientists actually make serious use of the idea of multiple",
    "start": "3338160",
    "end": "3343760"
  },
  {
    "text": "universes so what about Lambda calculus so I can",
    "start": "3345280",
    "end": "3352920"
  },
  {
    "text": "imagine right different universes which where gravity is different or the strong",
    "start": "3352920",
    "end": "3358240"
  },
  {
    "text": "electron constant is different that's I at least find that easy to imagine my imagination is not so good when it comes",
    "start": "3358240",
    "end": "3365960"
  },
  {
    "text": "to imagining a universe where modus ponin doesn't hold That's",
    "start": "3365960",
    "end": "3371839"
  },
  {
    "text": "the Law of Arrow elimination right where the basic rules of intuitionistic logic",
    "start": "3371839",
    "end": "3378200"
  },
  {
    "text": "don't hold aren't known can't be talked about I find it very difficult to",
    "start": "3378200",
    "end": "3385240"
  },
  {
    "text": "imagine such a thing other people might have a better imagination but I just can't imagine",
    "start": "3385240",
    "end": "3391079"
  },
  {
    "text": "that right so we can't I'm sorry you I'd like to say Lambda calculus is the",
    "start": "3391079",
    "end": "3397599"
  },
  {
    "text": "universal language but I can't and the reason why is that calling Lambda calculus Universal is simply too",
    "start": "3397599",
    "end": "3407440"
  },
  {
    "text": "limiting so um that's it and I'll just to summarize",
    "start": "3410359",
    "end": "3416640"
  },
  {
    "text": "the summary what you should think is that if you've have a hard problem to solve",
    "start": "3416640",
    "end": "3423280"
  },
  {
    "text": "maybe one involving multiple computers uh then you should think that this is a",
    "start": "3423280",
    "end": "3428760"
  },
  {
    "text": "job we're L the calculus thank you very",
    "start": "3428760",
    "end": "3434599"
  },
  {
    "text": "[Music] much so that's it unless people have",
    "start": "3440500",
    "end": "3447400"
  },
  {
    "text": "more questions we have more question I wouldn't expect any other questions in this audience you guys are so",
    "start": "3447400",
    "end": "3455200"
  },
  {
    "text": "shocked I think um let me see telling people no side effects is kind of",
    "start": "3455880",
    "end": "3461559"
  },
  {
    "text": "extreme I keep telling people I like this separation logic stuff where instead of saying none you just have to",
    "start": "3461559",
    "end": "3467440"
  },
  {
    "text": "describe what side effects you have what do you think of that approach um so okay",
    "start": "3467440",
    "end": "3473440"
  },
  {
    "text": "so several people have mentioned pure versus impure functional programming um",
    "start": "3473440",
    "end": "3479400"
  },
  {
    "text": "I've not mentioned it and one reason why is remember I mention that modal logic",
    "start": "3479400",
    "end": "3486640"
  },
  {
    "text": "um corresponds to these things called monads and mons are a perfectly fine way of dealing with things like State and",
    "start": "3486640",
    "end": "3493039"
  },
  {
    "text": "exceptions or even concurrency so um they're not necessarily the best way of dealing with",
    "start": "3493039",
    "end": "3499000"
  },
  {
    "text": "concurrency I would agree with that um but the um and linear logic then",
    "start": "3499000",
    "end": "3505680"
  },
  {
    "text": "gives you a different way of doing it and if you want to make the point neither of those give your favorite way of dealing with massive concurrency I",
    "start": "3505680",
    "end": "3511920"
  },
  {
    "text": "would agree with that uh and there might be other ways yet right what we've seen so far is that",
    "start": "3511920",
    "end": "3517720"
  },
  {
    "text": "this is enormously",
    "start": "3517720",
    "end": "3522000"
  },
  {
    "text": "productive once don't you get 100 answer that question before I answer your question",
    "start": "3522920",
    "end": "3528839"
  },
  {
    "text": "um so in fact side effects can crop up",
    "start": "3528839",
    "end": "3534119"
  },
  {
    "text": "using these approaches now how does that compare with separation logic so I kind",
    "start": "3534119",
    "end": "3539720"
  },
  {
    "text": "of like separation logic it comes from linear logic so it has its roots in this body of",
    "start": "3539720",
    "end": "3545400"
  },
  {
    "text": "work um so even if it turns out separation logic wins I'm going to claim a win for",
    "start": "3545400",
    "end": "3550680"
  },
  {
    "text": "Theory um separation logic is very much about banging on a singles shared",
    "start": "3550680",
    "end": "3558240"
  },
  {
    "text": "memory and as Carl has pointed out and as I mentioned banging on a single-",
    "start": "3558240",
    "end": "3563760"
  },
  {
    "text": "shared memory is maybe not a good way to actually talk about very concurrent systems so that's the one thing against",
    "start": "3563760",
    "end": "3571720"
  },
  {
    "text": "that I have against um separation logic it's fine for when you're talking about a single- shared memory but I don't",
    "start": "3571720",
    "end": "3577920"
  },
  {
    "text": "think that works so well if you want to talk about very um diverse concurrent",
    "start": "3577920",
    "end": "3583960"
  },
  {
    "text": "systems so um we'll have to wait and see but certainly there's a lot of interesting work happening in that area",
    "start": "3583960",
    "end": "3590319"
  },
  {
    "text": "and there will continue to be and what the best way is to bring concurrency to the masses remains to be seen but you",
    "start": "3590319",
    "end": "3597520"
  },
  {
    "text": "for very simple cases functional languages work really well as we all know because map ruce was inspired by",
    "start": "3597520",
    "end": "3604920"
  },
  {
    "text": "ideas from functional languages uh is there something",
    "start": "3604920",
    "end": "3610680"
  },
  {
    "text": "analogous to session types for apine logic oh good question is there",
    "start": "3610680",
    "end": "3615720"
  },
  {
    "text": "something analogous to session types for um apine logic and the answer is yes it's called apine session types and in",
    "start": "3615720",
    "end": "3622799"
  },
  {
    "text": "fact I um many of the people that do session types make them half fine and I sort of jump up and down and say no I",
    "start": "3622799",
    "end": "3628520"
  },
  {
    "text": "think it's better for them to be linear but both approaches",
    "start": "3628520",
    "end": "3633599"
  },
  {
    "text": "work I should mention the limitations for S session types are about",
    "start": "3633599",
    "end": "3640240"
  },
  {
    "text": "um trying to give types that describe communication protocols so session type",
    "start": "3640240",
    "end": "3645319"
  },
  {
    "text": "very simply um it might be um this channel I'm going to send uh a value of type A and then",
    "start": "3645319",
    "end": "3652760"
  },
  {
    "text": "receive a value of type B and then I'll send another value of type c uh and then maybe I'll offer a choice",
    "start": "3652760",
    "end": "3658599"
  },
  {
    "text": "between two protocols and then of course on the other channel right if this Channel's setting an a this channel",
    "start": "3658599",
    "end": "3663960"
  },
  {
    "text": "better receive an a if this channel is receiving a b this channel better send a b if this channel is offering a choice",
    "start": "3663960",
    "end": "3672359"
  },
  {
    "text": "between uh a c or a d this channel be be making a choice between a c and a d",
    "start": "3672359",
    "end": "3678640"
  },
  {
    "text": "turns out that those that notion of Duality corresponds exactly to Duality between the connectives of linear logic",
    "start": "3678640",
    "end": "3685960"
  },
  {
    "text": "and so you can use this to express certain protocols and the fact that it corresponds to a proof that normalizes",
    "start": "3685960",
    "end": "3692880"
  },
  {
    "text": "guarantees great properties you have no races you're guaranteed to terminate",
    "start": "3692880",
    "end": "3698119"
  },
  {
    "text": "this is fantastic of course it's also awful because you're guaranteed to terminate",
    "start": "3698119",
    "end": "3704119"
  },
  {
    "text": "and that there are no races and you know sometimes you need a race sometimes you",
    "start": "3704119",
    "end": "3709280"
  },
  {
    "text": "need something that runs forever so how to extend session types to deal with those very important situations is an no",
    "start": "3709280",
    "end": "3716200"
  },
  {
    "text": "question so I would not want to say session types are the answer I just think they're very interesting approach",
    "start": "3716200",
    "end": "3722160"
  },
  {
    "text": "because of this correspondence to linear logic that you know there are loads and loads and loads approaches to",
    "start": "3722160",
    "end": "3729400"
  },
  {
    "text": "concurrency what's the right one so if we can say well this one corresponds to logic in a certain way that gives us",
    "start": "3729880",
    "end": "3738039"
  },
  {
    "text": "perhaps um a reason to believe it might be a good way to go and you know just like is Lambda",
    "start": "3738039",
    "end": "3744799"
  },
  {
    "text": "calculus better than imper of programming that has to be tested empirically but it gives you um a",
    "start": "3744799",
    "end": "3751480"
  },
  {
    "text": "powerful imaginative boost in a certain direction in addition to the many chores",
    "start": "3751480",
    "end": "3758640"
  },
  {
    "text": "we have another problem namely The Internet of Things where we have a bazillion little local machines here in",
    "start": "3758640",
    "end": "3764119"
  },
  {
    "text": "the neighborhood each with its own local States and functional programming doesn't work for that",
    "start": "3764119",
    "end": "3771799"
  },
  {
    "text": "either purely functional program um they send messages back and",
    "start": "3771799",
    "end": "3777279"
  },
  {
    "text": "forth to each other that's our new model of computation in purely functional programming works fine if you use a Mona",
    "start": "3777279",
    "end": "3783359"
  },
  {
    "text": "to represent the local state there might be other ways of doing things as sorry wait wait wait wait wait sorry the monad",
    "start": "3783359",
    "end": "3791200"
  },
  {
    "text": "linearizes every day you have to pass the state along hippity hop hippity hop",
    "start": "3791200",
    "end": "3796920"
  },
  {
    "text": "it's crazy okay sorry B are no good because they're crazy I'll take they not crazy",
    "start": "3796920",
    "end": "3804119"
  },
  {
    "text": "they're just linear um many applications of monads are linear the basic monad operations are",
    "start": "3804119",
    "end": "3811480"
  },
  {
    "text": "linear but there are other related structures called there are other Carl",
    "start": "3811480",
    "end": "3818119"
  },
  {
    "text": "just let me finish the sentence there are other related structures",
    "start": "3818119",
    "end": "3823599"
  },
  {
    "text": "called applicative structures which are related to Monas it's it's a similar",
    "start": "3823599",
    "end": "3829200"
  },
  {
    "text": "notion Simon Marlo who works at Facebook did a little DSL Library based on the",
    "start": "3829200",
    "end": "3836119"
  },
  {
    "text": "idea of monads and applicatives um for doing filtering every time you look at a",
    "start": "3836119",
    "end": "3843279"
  },
  {
    "text": "message on Facebook that's been filtered by this software um using the DSL that",
    "start": "3843279",
    "end": "3849000"
  },
  {
    "text": "Simon Marlo and his colleagues have written and that's all written in hll using monads and applicatives so at",
    "start": "3849000",
    "end": "3855319"
  },
  {
    "text": "least sometimes this can be put to practical use that's",
    "start": "3855319",
    "end": "3860319"
  },
  {
    "text": "true yeah so I I I I don't know anything about functional languages",
    "start": "3860760",
    "end": "3866720"
  },
  {
    "text": "thank you yeah if if I wanted to write a important real program and wanted to",
    "start": "3866720",
    "end": "3874400"
  },
  {
    "text": "make sure that it was going to work correctly and I'm willing to pay factors",
    "start": "3874400",
    "end": "3880480"
  },
  {
    "text": "of 10 or something in performance M you know consider the software that runs your airplane or drives your car okay um",
    "start": "3880480",
    "end": "3888400"
  },
  {
    "text": "people are often not willing to 10 for those but let's assume I am okay um if I work",
    "start": "3888400",
    "end": "3896599"
  },
  {
    "text": "in a functional environment if I got a better chance of being able to prove it it's going to work correctly okay so the",
    "start": "3896599",
    "end": "3902319"
  },
  {
    "text": "question um I'll rep the question right if you work in a functional language do you have a better chance of proving",
    "start": "3902319",
    "end": "3907920"
  },
  {
    "text": "properties of the software you're writing um the best way to evaluate that is to",
    "start": "3907920",
    "end": "3914200"
  },
  {
    "text": "look at the different proofs people have done and the answer is if you look at something like the the existing largest",
    "start": "3914200",
    "end": "3921720"
  },
  {
    "text": "proof that an operating system meets its specification the way they did did that was they wrote the operating system in",
    "start": "3921720",
    "end": "3928079"
  },
  {
    "text": "hasell and then translated it from hasell to C but they did the proofs at",
    "start": "3928079",
    "end": "3933200"
  },
  {
    "text": "the hasal level so there is at least some evidence that working in functional languages does indeed make it easier to",
    "start": "3933200",
    "end": "3940480"
  },
  {
    "text": "prove various properties if you look at the proof sorry prove the translation was correct uh in that this is the4 work",
    "start": "3940480",
    "end": "3950760"
  },
  {
    "text": "you're familiar with that aren't you yeah but I don't think they prove the translation they",
    "start": "3950760",
    "end": "3957640"
  },
  {
    "text": "no they no they did they Pro they proved properties of the actual code they generated right but they structured it",
    "start": "3958119",
    "end": "3964039"
  },
  {
    "text": "by writing a hll program um if you look at the um proof",
    "start": "3964039",
    "end": "3970559"
  },
  {
    "text": "of a c compiler that it's correct done by zavier Leroy and his colleagues that was all done in caul and their model of",
    "start": "3970559",
    "end": "3978400"
  },
  {
    "text": "what the compiler does is a functional language so functional languages do have",
    "start": "3978400",
    "end": "3984039"
  },
  {
    "text": "a good track record of helping people to structure these uh realistic these proofs of real",
    "start": "3984039",
    "end": "3990520"
  },
  {
    "text": "systems I I won't say you can't do it another way but I guess I would say that the one case I know of proving an",
    "start": "3990520",
    "end": "3997000"
  },
  {
    "text": "operating system and the one case I know of proving a realistic compiler we're done with functional",
    "start": "3997000",
    "end": "4003240"
  },
  {
    "text": "languages good question thank you but most programmers are",
    "start": "4003240",
    "end": "4011039"
  },
  {
    "text": "dysfunctional because worse is better well I mean this is certainly one of the issues with take up of functional",
    "start": "4011599",
    "end": "4017480"
  },
  {
    "text": "languages which is training people want to do what they know and you know maybe not even unreasonably they want to do",
    "start": "4017480",
    "end": "4022720"
  },
  {
    "text": "what they know and many people don't know functional languages but that's something that an educational",
    "start": "4022720",
    "end": "4028039"
  },
  {
    "text": "environment can help fix so so if you're going to teach",
    "start": "4028039",
    "end": "4036079"
  },
  {
    "text": "programming to kids what would you use as I was going to teach programming to",
    "start": "4036079",
    "end": "4041480"
  },
  {
    "text": "kids what would I use as language five so um to take slightly older kids",
    "start": "4041480",
    "end": "4049520"
  },
  {
    "text": "freshmen uh we and",
    "start": "4049520",
    "end": "4055839"
  },
  {
    "text": "unsoed away before they've learned",
    "start": "4055839",
    "end": "4060400"
  },
  {
    "text": "JavaScript pasal maybe",
    "start": "4061119",
    "end": "4067799"
  },
  {
    "text": "um anyhow for freshman at Edinburgh we do teach high school first there many in",
    "start": "4067799",
    "end": "4073760"
  },
  {
    "text": "in the UK uh not most places don't teach functional languages first but Edinburgh",
    "start": "4073760",
    "end": "4080000"
  },
  {
    "text": "Cambridge Oxford Imperial all teach functional first so that seems to work quite well now for younger",
    "start": "4080000",
    "end": "4087319"
  },
  {
    "text": "kids um the best place to look to see examples of that being done is um Matias",
    "start": "4087319",
    "end": "4094960"
  },
  {
    "text": "fisen and the um racket crew are very keen on teaching programmers um",
    "start": "4094960",
    "end": "4101798"
  },
  {
    "text": "programming to high school G so they've got an environment called Dr racket um it has it's great for building games",
    "start": "4101799",
    "end": "4108238"
  },
  {
    "text": "and so on they have a purely functional style for building games in racket racket's not a purely functional",
    "start": "4108239",
    "end": "4113278"
  },
  {
    "text": "language but they begin by teaching the purely functional subset of it to people",
    "start": "4113279",
    "end": "4118640"
  },
  {
    "text": "um in high school I'm not sure they've gotten down to five or 10 year olds yet um but I do think it's very important",
    "start": "4118640",
    "end": "4125040"
  },
  {
    "text": "for teaching to people that young that you have good support for things like graphics and animation and so on",
    "start": "4125040",
    "end": "4131560"
  },
  {
    "text": "functional languages can do a great job of dealing with that but we don't have many systems that actually do it in a",
    "start": "4131560",
    "end": "4137758"
  },
  {
    "text": "robust way that's good for handing to kids um Dr racket's one of the few we need more of those so that we can um we",
    "start": "4137759",
    "end": "4146719"
  },
  {
    "text": "are a better choice for getting to people early otherwise the fact that things like scratch have such fantastic",
    "start": "4146719",
    "end": "4153679"
  },
  {
    "text": "um interaction and Graphics um might well dominate over the fact that they're not",
    "start": "4153679",
    "end": "4159560"
  },
  {
    "text": "functional so I I agree the environment is very important as well and we need better functional environments teaching",
    "start": "4159560",
    "end": "4165719"
  },
  {
    "text": "to young people Yeah scratch of course has has other problems but uh it it's",
    "start": "4165719",
    "end": "4173278"
  },
  {
    "text": "it's difficult to teach your young kids scratch because their logic is not",
    "start": "4173279",
    "end": "4179920"
  },
  {
    "text": "matched by the logic of the interation is SC um they claim concurrency but it's",
    "start": "4179920",
    "end": "4186880"
  },
  {
    "text": "sequential and that that confuses kids they believe the concern and it says",
    "start": "4186880",
    "end": "4193278"
  },
  {
    "text": "it's concurrent it's concurr um okay that's an interesting",
    "start": "4193279",
    "end": "4200480"
  },
  {
    "text": "thing I think that uh the concepts of programming actually are uh",
    "start": "4200480",
    "end": "4208120"
  },
  {
    "text": "probably inclusive of functional programming but somewhat larger I'm not going to claim that",
    "start": "4208120",
    "end": "4215080"
  },
  {
    "text": "functional programming is all there is um I am going to claim that it's really interesting and very worthy of",
    "start": "4215080",
    "end": "4222320"
  },
  {
    "text": "attention anybody other",
    "start": "4222320",
    "end": "4227960"
  },
  {
    "text": "call do you think that you could Implement Linux in a purely fun functional language as I",
    "start": "4227960",
    "end": "4235360"
  },
  {
    "text": "said4 um the one formally validated um operating",
    "start": "4235360",
    "end": "4241080"
  },
  {
    "text": "system they began by writing has school programs right but that's a different",
    "start": "4241080",
    "end": "4246880"
  },
  {
    "text": "question as to whether you think that in a purely functional in purely functional hasle you could Implement Linux I.E the",
    "start": "4246880",
    "end": "4254679"
  },
  {
    "text": "way it really works",
    "start": "4254679",
    "end": "4258000"
  },
  {
    "text": "today compatibility well since Linux really is the default operating system",
    "start": "4260719",
    "end": "4266920"
  },
  {
    "text": "now and into the future it's kind of important yeah but but if it's not different what's the point if it's",
    "start": "4266920",
    "end": "4272920"
  },
  {
    "text": "completely compatible then why bother doing it again it's merely what the internet of things is going to run on",
    "start": "4272920",
    "end": "4278440"
  },
  {
    "text": "you can't dismiss that yeah but just why not run it on",
    "start": "4278440",
    "end": "4283640"
  },
  {
    "text": "lims oh they would indicate it would indicate if",
    "start": "4283640",
    "end": "4288800"
  },
  {
    "text": "if if if functional programming can't do it it would indicate a fundamental lack of power in in functional programming if",
    "start": "4288800",
    "end": "4296080"
  },
  {
    "text": "it just really can't do it then that's a limit well I think that's something you",
    "start": "4296080",
    "end": "4301880"
  },
  {
    "text": "want to take offline long and involve not not",
    "start": "4301880",
    "end": "4307600"
  },
  {
    "text": "resolvable in in class what time do you officially end uh we ended at 5:30 okay",
    "start": "4307600",
    "end": "4314400"
  },
  {
    "text": "than our speakers although we do have the m",
    "start": "4314400",
    "end": "4319360"
  }
]