[
  {
    "text": "Frank. I'm confusing to a novice user, and macro is the word the manual uses when it's when it lapses into computer science jargon.",
    "start": "1970",
    "end": "12310"
  },
  {
    "text": "But they're the same really in concept. And probably the new manual will just say that we call them control sequences because",
    "start": "12310",
    "end": "22810"
  },
  {
    "text": "they control tech and they're called macros because everybody programed computer. And over the macro is. And I don't know.",
    "start": "22810",
    "end": "30050"
  },
  {
    "text": "Anyway, that's now, on the other hand, for Web. We also have macros and we don't call those control sequences.",
    "start": "30050",
    "end": "36129"
  },
  {
    "text": "We just call those macros. Those are things that have been defined with with with defined in instruction in your book, how to represent a control sequence.",
    "start": "36130",
    "end": "52750"
  },
  {
    "text": "In fact, there's that means backslash something is a control sequence.",
    "start": "52750",
    "end": "60340"
  },
  {
    "text": "And the something is either. Well, there's three kinds. One is where the something is one character long and in other cases where the something consists of two or more letters.",
    "start": "60340",
    "end": "78400"
  },
  {
    "text": "And this letter means that it's that that you code. The code, the type of the of the character in the code table is eleven.",
    "start": "78400",
    "end": "87370"
  },
  {
    "text": "That's that's what a letter means. So those are things that you have two or more of those that makes a control sequence intact, like backslash E and D.",
    "start": "87370",
    "end": "98950"
  },
  {
    "text": "Then there's the third kind, which is an active character, and that's when it's a code is 13.",
    "start": "98950",
    "end": "104590"
  },
  {
    "text": "And those are those are something like a single character controlling.",
    "start": "104590",
    "end": "111200"
  },
  {
    "text": "But they're separate from the one from the backslash. So is backslash ampersand would be different from ampersand if ampersand is to code 13, integrity two.",
    "start": "111200",
    "end": "121090"
  },
  {
    "text": "Not in the whole version. But the new one makes a difference to the scanner also between those last two types of control sequence,",
    "start": "121090",
    "end": "130780"
  },
  {
    "text": "starting with a backslash, always ignoring spaces that follow it.",
    "start": "130780",
    "end": "136690"
  },
  {
    "text": "So optional space always follows follows control sequence, starting with a backslash, but an active character.",
    "start": "136690",
    "end": "143260"
  },
  {
    "text": "One of these code 13 kind of things does not gobble up any space after it.",
    "start": "143260",
    "end": "150400"
  },
  {
    "text": "So space after that will we'll survive it case. Now, in the inside the machine,",
    "start": "150400",
    "end": "158470"
  },
  {
    "text": "we also have to take care of making sure that these control sequences can disappear at the end of a group if they've been defined inside of a group.",
    "start": "158470",
    "end": "168550"
  },
  {
    "text": "And we have to see handle four kinds of control sequences that can be defined.",
    "start": "168550",
    "end": "176530"
  },
  {
    "text": "They can be defined to be long or outer or both. Now, remember long. It means that it's their parameters can take the end of a paragraph symbol.",
    "start": "176530",
    "end": "189310"
  },
  {
    "text": "And an outer one is something that's supposed to be illegal to use,",
    "start": "189310",
    "end": "194890"
  },
  {
    "text": "except when you're at a quiet time somewhere, somehow in an outer part of the file, not within something else.",
    "start": "194890",
    "end": "201010"
  },
  {
    "text": "Both of these ideas, law and order, are intended to catch a common error of someone misplacing a right,",
    "start": "201010",
    "end": "209409"
  },
  {
    "text": "missing a right brace somehow or not matching up a parameter.",
    "start": "209410",
    "end": "214480"
  },
  {
    "text": "Because of some type typographic error, instead of scanning all the way to the end of the file, we want to catch real quick.",
    "start": "214480",
    "end": "221560"
  },
  {
    "text": "So if you if you run into something that's outer, then, you know, you've made a mistake.",
    "start": "221560",
    "end": "228340"
  },
  {
    "text": "For example, people will define something to be outer. If it's the beginning of a of a theorem, you know, in a math paper, you shouldn't have a beginning of a theorem in the middle of some formula.",
    "start": "228340",
    "end": "242000"
  },
  {
    "text": "Right. And and you'll find something to be long if it's as if if you expect that the parameter to that macro will possibly",
    "start": "242000",
    "end": "254650"
  },
  {
    "text": "have more than one paragraph in it or otherwise soon as somebody gets to the end of a paragraph and hasn't finished,",
    "start": "254650",
    "end": "261880"
  },
  {
    "text": "the argument to a macro macro isn't long. Then Tekle, stop right there and and recover with with some luck.",
    "start": "261880",
    "end": "271419"
  },
  {
    "text": "It'll recover and go on to the next paragraph with a fresh slate. So and so we just mark those, these four kinds of control sequences long outer or both or neither question here.",
    "start": "271420",
    "end": "284980"
  },
  {
    "text": "Please, please reach behind you for a microphone and push the red button. No, it has to go on a videotape. So push the red button button.",
    "start": "284980",
    "end": "295120"
  },
  {
    "text": "OK. And wait a minute.",
    "start": "295120",
    "end": "301750"
  },
  {
    "text": "Yeah. Things like I have backslash eyeteeth, right? Well, they have to be declared to be long since there are going to backslash Colon.",
    "start": "301750",
    "end": "312419"
  },
  {
    "text": "Something called automatically B, C, they don't take a parameter. So it doesn't matter. It's only affect whether the parameter Grine backslash PJR or not an empty line and backslash PRR explicitly exactly equivalent.",
    "start": "312420",
    "end": "326850"
  },
  {
    "text": "They should even match each other as as as parameters go. Okay. Now we've, we've got a long control sequence defined in there or macro whether we want to call it.",
    "start": "326850",
    "end": "337800"
  },
  {
    "text": "We have to have a way to represent it inside it, inside of text.",
    "start": "337800",
    "end": "342900"
  },
  {
    "text": "And this is the other important data structure that appears in MEM.",
    "start": "342900",
    "end": "348419"
  },
  {
    "text": "These are all one word items. Nikhat token lists and talking lists are defined somewhere.",
    "start": "348420",
    "end": "355260"
  },
  {
    "text": "Let's see the table of contents. So part 20 starts in module 270.",
    "start": "355260",
    "end": "361140"
  },
  {
    "text": "So talk and lists are explained. There were a bunch of definitions.",
    "start": "361140",
    "end": "371400"
  },
  {
    "text": "But the real explanation starts on next page. Well, you got to turn the page back and forth in here.",
    "start": "371400",
    "end": "379830"
  },
  {
    "text": "So what I wanted to do when I'm representing a token list is have something that in a half a word,",
    "start": "379830",
    "end": "385650"
  },
  {
    "text": "I'll be able to represent everything that text might want to be scanning. So I have 16 bits to work with at least. Now, what do I what do I actually get when I scan the letter A, I get a command code and a character code.",
    "start": "385650",
    "end": "405030"
  },
  {
    "text": "So if I scan a letter A, I get an eleven and a character code, which is sixty five for the internal code of a capital, a 11 letter.",
    "start": "405030",
    "end": "414840"
  },
  {
    "text": "And this is a K. It's a number. You know, you don't have to know these numbers. You have to memorize them or anything. If you are tracing with commands, it would say the letter A.",
    "start": "414840",
    "end": "428370"
  },
  {
    "text": "Because it would look I think that the command code eleven and it would look at the character code and figure out how to output its internal character code.",
    "start": "428370",
    "end": "437220"
  },
  {
    "text": "Sixty five and eleven, which would mean the letter. Now, command codes are very important and we'll talk about those shortly.",
    "start": "437220",
    "end": "446910"
  },
  {
    "text": "But within a token, they are very restricted. They can only actually be between one and 14.",
    "start": "446910",
    "end": "456060"
  },
  {
    "text": "None of the commands coming through and a token list are going to be zero. Nor will they be greater than 14. In some of those aren't the same as that you codes and some of them aren't.",
    "start": "456060",
    "end": "468900"
  },
  {
    "text": "I guess we might as well look at those first 14 codes. The command codes is that is a page that defines all these internal numbers.",
    "start": "468900",
    "end": "476710"
  },
  {
    "text": "It's module two or one. As I'm writing the tech program, I'm actually referring to this page.",
    "start": "476710",
    "end": "484350"
  },
  {
    "text": "More often than any other page. But I don't think the reader has to is just as writing it.",
    "start": "484350",
    "end": "489510"
  },
  {
    "text": "I had to make sure that I had all the commands in there. But anyway, I think the the law, the small command,",
    "start": "489510",
    "end": "499770"
  },
  {
    "text": "cause that's the module plural one there are they include that you codes and then we double use the ones that could never come through.",
    "start": "499770",
    "end": "510050"
  },
  {
    "text": "So the scope, for example, is zero, because if you give it a code of zero to a character like a backslash, it make it an escape.",
    "start": "510050",
    "end": "519149"
  },
  {
    "text": "That's the code. However, never will a backslide with something with an escape code actually come through into a token list",
    "start": "519150",
    "end": "525450"
  },
  {
    "text": "because that starts a control sequence and you're gonna go ahead and get the whole control sequence.",
    "start": "525450",
    "end": "530580"
  },
  {
    "text": "So that command code is also used to mean relax and our left race is code one is only left raised two, two is right base and so on.",
    "start": "530580",
    "end": "541610"
  },
  {
    "text": "And then we get number five. If somebody had a carriage return a character to code and five, that acts like an end of a line.",
    "start": "541610",
    "end": "551910"
  },
  {
    "text": "And again, it will never come through the scanner because we get to the end of line. You look to the next line to get something and put a blank through the scanner.",
    "start": "551910",
    "end": "559980"
  },
  {
    "text": "So five is also used to mean output, a macro parameter, and it's also used to mean backflow S.R.",
    "start": "559980",
    "end": "567930"
  },
  {
    "text": "So it's got three three purposes here. And for a character, it'll never come through.",
    "start": "567930",
    "end": "574320"
  },
  {
    "text": "If you type of hashmark, that could come through over six and so on.",
    "start": "574320",
    "end": "579420"
  },
  {
    "text": "With all these other ones, we get to an active character, a 13. It's gonna be again a control sequence.",
    "start": "579420",
    "end": "584459"
  },
  {
    "text": "So it's going to be replaced by something else. It won't come through the scanner as a token, but the end of a paragraph is going to come through as a as a 13.",
    "start": "584460",
    "end": "593370"
  },
  {
    "text": "And so will something C match a macro parameter? No, that'll be interrupted by actually matching the parameter. So end of paragraph.",
    "start": "593370",
    "end": "602930"
  },
  {
    "text": "Can come in as a 13? No. What happened? No action. Let me see.",
    "start": "602930",
    "end": "613540"
  },
  {
    "text": "Yeah. No. No. This 13 would come through. But it's only because it's stirred inside its openness itself.",
    "start": "613540",
    "end": "619579"
  },
  {
    "text": "So this is 13 and 14 hour special hour special commands that that are inserted in into token lists just so",
    "start": "619580",
    "end": "629390"
  },
  {
    "text": "that we can do our funny things with parameters when we're when we're getting them out of the scanner.",
    "start": "629390",
    "end": "636860"
  },
  {
    "text": "And they never come through for user characters. Anyway, there's this command code will always be some number between one and 14, and none of the other values are possible there.",
    "start": "636860",
    "end": "646430"
  },
  {
    "text": "This char code could be anything from one to one, 127 zero to 127 for a character.",
    "start": "646430",
    "end": "657320"
  },
  {
    "text": "And that's one case of a talk. In the other case of a token is a control sequence like backslash.",
    "start": "657320",
    "end": "666140"
  },
  {
    "text": "Relax is a simple control sequence, but there are other you can use.",
    "start": "666140",
    "end": "671530"
  },
  {
    "text": "Can you see this far down? No, you can't see it. Yeah.",
    "start": "671530",
    "end": "681410"
  },
  {
    "text": "Good idea. OK. So if you know to get backslash, relax, coming through the token,",
    "start": "681410",
    "end": "689720"
  },
  {
    "text": "we wouldn't give the command code for relax but instead we give the the hash table pointer for relax.",
    "start": "689720",
    "end": "698810"
  },
  {
    "text": "Since the since between the time you define something with relax in it and the time you use it,",
    "start": "698810",
    "end": "705860"
  },
  {
    "text": "you might have changed the meaning of relax or this might be some control sequence that wasn't even defined yet.",
    "start": "705860",
    "end": "710930"
  },
  {
    "text": "So for this, we want to point to the table of equivalence for each identifier.",
    "start": "710930",
    "end": "718040"
  },
  {
    "text": "The hash table that a table that we associate with every every sequence of letters that you've",
    "start": "718040",
    "end": "724370"
  },
  {
    "text": "used somewhere relax will appear in there and that will tell what the meaning of relaxes.",
    "start": "724370",
    "end": "730810"
  },
  {
    "text": "And there will be a there'll be a command code and a church code associated with relax at any given time.",
    "start": "730810",
    "end": "741660"
  },
  {
    "text": "But in talking less, we'll just have a pointer to this war, we won't have the contents of this word since this might might change.",
    "start": "741660",
    "end": "748810"
  },
  {
    "text": "So now when we represent them, a definition has a list of tokens.",
    "start": "748810",
    "end": "755310"
  },
  {
    "text": "Each token is either a pair of command and Charr like this or it's a control sequence.",
    "start": "755310",
    "end": "762620"
  },
  {
    "text": "No question. Tony, Toby, the Kircher's and the parts are extended to 56.",
    "start": "762620",
    "end": "771870"
  },
  {
    "text": "But these tokens are still limited to one point. So all the in a font you can have 56 characters.",
    "start": "771870",
    "end": "777930"
  },
  {
    "text": "But on your keyboard input, seven codes are are only accepted.",
    "start": "777930",
    "end": "783600"
  },
  {
    "text": "So so somebody does not. So we are not accepting 256 codes in the extra array.",
    "start": "783600",
    "end": "793819"
  },
  {
    "text": "The extra array and the X array.",
    "start": "793820",
    "end": "804150"
  },
  {
    "text": "Extra gives a gives a let's suppose for example, that we on a Krey where they have I think nine with nine characters or say Apsey degree of eight characters.",
    "start": "804150",
    "end": "816970"
  },
  {
    "text": "Okay. So in that case, extra of sixty 65 would be some a fit character.",
    "start": "816970",
    "end": "827399"
  },
  {
    "text": "Excited would be an array that takes any ated character into a seven bit internal code. My internal codes are only seven but four for the things in the buffer, for example, in the string string pool, all seven.",
    "start": "827400",
    "end": "841589"
  },
  {
    "text": "So you have 128 internal codes that tech would work with.",
    "start": "841590",
    "end": "847020"
  },
  {
    "text": "That's not a terribly inherent restriction, except that the if you wanted to work with larger, you'd have to increase the size of the chip code.",
    "start": "847020",
    "end": "854460"
  },
  {
    "text": "The U.S. Code, L.C Codelco STF code table, because all of those are indexed by zero to one hundred twenty seven.",
    "start": "854460",
    "end": "864490"
  },
  {
    "text": "But you would have room for. Well no I don't add mid-quarter quarter word to this to this guy either.",
    "start": "864490",
    "end": "872220"
  },
  {
    "text": "I don't think so. You would have to. Well anyway there would be room though because I, I actually compute the value of this token by taking 11 multiplied by 256 and has sixty five.",
    "start": "872220",
    "end": "887690"
  },
  {
    "text": "I compute the value of this token by taking a large number sufficiently large, like two to 10 for something.",
    "start": "887690",
    "end": "897090"
  },
  {
    "text": "Now to the 16th to the 12th, I guess, because this will never be more than 14.",
    "start": "897090",
    "end": "904100"
  },
  {
    "text": "So it certainly won't be 16 now would be two to be four times to to the 8th would be to the twelve.",
    "start": "904100",
    "end": "909500"
  },
  {
    "text": "So if I say two to the 12th plus the location of of relax in the table will represent a control sequence.",
    "start": "909500",
    "end": "919360"
  },
  {
    "text": "So if so we call this two to the 12th is called the C.S. Token Flag.",
    "start": "919360",
    "end": "924829"
  },
  {
    "text": "And if you add C. S talking flag to the location of the seat of the control sequence, then you represented the control sequence as a token.",
    "start": "924830",
    "end": "933590"
  },
  {
    "text": "If you have anything less than two to the 12th. Anything less than this token flag, then you divide by 256 and you figure out what the command and the character parts are of it.",
    "start": "933590",
    "end": "948940"
  },
  {
    "text": "As far as the. But as far as extending the the the type ASCII code to eight bits, this would lead to incompatibilities with other versions of tech.",
    "start": "948940",
    "end": "960950"
  },
  {
    "text": "I don't think it would mess up any other data structures particularly.",
    "start": "960950",
    "end": "968430"
  },
  {
    "text": "One character, Webb, says the one character constants are used for string zero to 127.",
    "start": "968430",
    "end": "976890"
  },
  {
    "text": "And that would also that would also have to be changed to allow one character consents to be larger.",
    "start": "976890",
    "end": "982740"
  },
  {
    "text": "Because Webb's internal code is identical to text. When you say double quote, a double quote in a word program, it's supposed to give the text the same internal code.",
    "start": "982740",
    "end": "993980"
  },
  {
    "text": "Then tech uses the internal code is, of course, just internal.",
    "start": "993980",
    "end": "999420"
  },
  {
    "text": "So, you know, it's an arbitrary mapping. If we can handle episodic. We can handle anything, but. But as long as it only maps in long lines only gives us 128 different possibilities on it.",
    "start": "999420",
    "end": "1012960"
  },
  {
    "text": "And then we can move those hundred twenty eight into a spot into 2036 or 512 afterwards.",
    "start": "1012960",
    "end": "1019460"
  },
  {
    "text": "But we just want one fill the whole range.",
    "start": "1019460",
    "end": "1025400"
  },
  {
    "text": "Now, the solid data representation of tokens, as I've said, has two cases because there's two kinds of tokens.",
    "start": "1025400",
    "end": "1033949"
  },
  {
    "text": "There's the control sequence tokens. This includes all three kinds of control sequences. Because all three of them are located in the same array or the kind that are packed with a command and a character together.",
    "start": "1033950",
    "end": "1048439"
  },
  {
    "text": "Now, in order to demonstrate sort of a C, in order to demonstrate that, again,",
    "start": "1048440",
    "end": "1056870"
  },
  {
    "text": "there's a procedure called Shotokan list, and that starts in module 273.",
    "start": "1056870",
    "end": "1062030"
  },
  {
    "text": "And this is two pages long, but it goes through and interprets a token, a whole token list.",
    "start": "1062030",
    "end": "1068600"
  },
  {
    "text": "And that's what prints out a lot of the things that you would see intact when you have one story,",
    "start": "1068600",
    "end": "1075980"
  },
  {
    "text": "when it's showing you what it what it thinks the macro was. All right. Using this Shotokan, this procedure, now, there's some more complication so that I got a mention because of parameters.",
    "start": "1075980",
    "end": "1088970"
  },
  {
    "text": "You see a token. This has to also represent the fact that a macro might have parameters that we want to match.",
    "start": "1088970",
    "end": "1095090"
  },
  {
    "text": "And so that's all explained in module 272. And there's an example there, which I might as well put on a blackboard.",
    "start": "1095090",
    "end": "1104510"
  },
  {
    "text": "But it's also in there. It's also it's also in the notes. An example is the definition of a macro.",
    "start": "1104510",
    "end": "1114170"
  },
  {
    "text": "And we're just going to show how that how that's represented inside step by step. So you get the idea. So somebody has typed in the text. Define backslash Mac.",
    "start": "1114170",
    "end": "1125660"
  },
  {
    "text": "A hash, one hash to space and then backslash B and then a space space, of course, will be ignored since it follows the control sequence then left for.",
    "start": "1125660",
    "end": "1145940"
  },
  {
    "text": "Hash one backslash minus a space hash.",
    "start": "1145940",
    "end": "1152090"
  },
  {
    "text": "Hash one. This is not intended to be the simple example.",
    "start": "1152090",
    "end": "1157789"
  },
  {
    "text": "This is intended to be the one that shows you everything. So that so that you'll be completely puzzled at first.",
    "start": "1157790",
    "end": "1165650"
  },
  {
    "text": "But if you have a little patience, you'll feel that that nothing once you've figured this one out.",
    "start": "1165650",
    "end": "1171620"
  },
  {
    "text": "Then you'll feel that you have total power to do all the rest. Now, this is the. So this example is shows all the kinds of things that can happen except for a matching a left brace, which is a slightly special case now.",
    "start": "1171620",
    "end": "1189889"
  },
  {
    "text": "Okay, Mac, is there going to be a token list inside the machine, inside of text? And we. And it's going to be in that one word area of memory linked together.",
    "start": "1189890",
    "end": "1204590"
  },
  {
    "text": "And this left the info. Parts of each word is going to be a representation of the token.",
    "start": "1204590",
    "end": "1211309"
  },
  {
    "text": "So let's see what they what it would look like. Well, first of all, you'd have a letter and a type of eleven, but let's write it symbolically.",
    "start": "1211310",
    "end": "1221300"
  },
  {
    "text": "So letter A. That's your first. That's the first one. And you have a parameter, number one. Now, you don't store that as hashmark one.",
    "start": "1221300",
    "end": "1233170"
  },
  {
    "text": "Well, for one thing, that one is redundant because the first parameter has to be number one. So instead, it just says match a parameter and doesn't give any number in it at all.",
    "start": "1233170",
    "end": "1245210"
  },
  {
    "text": "But it does give the internal code number of the hashmark.",
    "start": "1245210",
    "end": "1250580"
  },
  {
    "text": "Because somebody might have several different symbols that that he's using for for macro parameters,",
    "start": "1250580",
    "end": "1259279"
  },
  {
    "text": "whatever type that is six or something, and whichever one he used. We could reflect their. Type it out in that as that character, if we are asked to take out this token.",
    "start": "1259280",
    "end": "1271120"
  },
  {
    "text": "So we save that character there. We call it match. But then the one is the price.",
    "start": "1271120",
    "end": "1276670"
  },
  {
    "text": "If the person wrote to here, give me an error message saying, you know, illegal,",
    "start": "1276670",
    "end": "1282460"
  },
  {
    "text": "you're supposed to number your primaries consecutively or something like that. And then that would catch a catch scenario of where something else probably was wrong up above.",
    "start": "1282460",
    "end": "1293190"
  },
  {
    "text": "Now, matching all these to go into just match and duplicating the character code, internal code of this guy.",
    "start": "1293190",
    "end": "1303429"
  },
  {
    "text": "Similarly for that one and then a blank space, a blank spaces type spacer in the command code.",
    "start": "1303430",
    "end": "1315370"
  },
  {
    "text": "And the code for space convention that all that all space codes, no matter what the character is,",
    "start": "1315370",
    "end": "1324520"
  },
  {
    "text": "if it's a type spacer, I convert it to a blank on input so that the little match each other.",
    "start": "1324520",
    "end": "1331120"
  },
  {
    "text": "When you're studying, when you're matching macro preference, a carriage return a tab.",
    "start": "1331120",
    "end": "1336730"
  },
  {
    "text": "Anything that you've said is of type space will match, you know, macro. And the reason is that this has caused many errors where people were trying to make a definition and",
    "start": "1336730",
    "end": "1348310"
  },
  {
    "text": "they would in one place have a carriage return and the police have a space or a tab or something, and it would look okay on their screen and say, what's going wrong?",
    "start": "1348310",
    "end": "1355480"
  },
  {
    "text": "So everything, everything that's been we find to be a type spacer is actually converted.",
    "start": "1355480",
    "end": "1360610"
  },
  {
    "text": "You take doesn't remember anymore. What was it, what this space was. If it was an asterisk and somebody said asterisk was to code ten, it would just be equivalent to a space.",
    "start": "1360610",
    "end": "1375610"
  },
  {
    "text": "Then comes letter No. That's ridiculous.",
    "start": "1375610",
    "end": "1383210"
  },
  {
    "text": "That's a that's a bug. OK.",
    "start": "1383210",
    "end": "1392309"
  },
  {
    "text": "That's a that's a bug in the comment there. So this would be a control sequence B, so this would be, you know, this would be control sequence.",
    "start": "1392310",
    "end": "1408750"
  },
  {
    "text": "So this would be C. S flag. Plus the location of B is the next thing.",
    "start": "1408750",
    "end": "1421410"
  },
  {
    "text": "And so I guess I, I. In other words, I can represent that notation notational is just backslash piece of cross off the word letter there.",
    "start": "1421410",
    "end": "1430950"
  },
  {
    "text": "That's a miss. That's a misprint in that line. Did you just say backslash B? It's a control sequence for B is the next thing after this blank space and then no blank space for that.",
    "start": "1430950",
    "end": "1443520"
  },
  {
    "text": "Then comes the special token called N Match. And then match is the is the command code at it.",
    "start": "1443520",
    "end": "1454260"
  },
  {
    "text": "And the chair is zero, I believe. So the end match is command code of 14 and matches a command code.",
    "start": "1454260",
    "end": "1461870"
  },
  {
    "text": "13, I guess. And yeah. And and this tells text that when you when you're trying to look for Mac, then you get here.",
    "start": "1461870",
    "end": "1474780"
  },
  {
    "text": "You finished. You've got all your parameters for proceeding.",
    "start": "1474780",
    "end": "1480990"
  },
  {
    "text": "Then we would go into the first thing and this would say out Paran one. This would say this time as we're continuing to read this Tolkan list to now start reading",
    "start": "1480990",
    "end": "1491130"
  },
  {
    "text": "parameter one that we've already found as we've been reading this part of the tokenized.",
    "start": "1491130",
    "end": "1496500"
  },
  {
    "text": "And then it would say do this control sequence and I would say letter A and I would say blank space.",
    "start": "1496500",
    "end": "1506260"
  },
  {
    "text": "And it would say what? Well, now, in a write inside of a definition, two hash marks in a row is used to stand for a hashmark.",
    "start": "1506260",
    "end": "1516000"
  },
  {
    "text": "So this would now say Mac roll parameter hashmark.",
    "start": "1516000",
    "end": "1524160"
  },
  {
    "text": "And then this is the other char one. It's not a letter as in digits are especially noted.",
    "start": "1524160",
    "end": "1530840"
  },
  {
    "text": "So this is a one of type twelve. This is parameter two.",
    "start": "1530840",
    "end": "1537270"
  },
  {
    "text": "So it's outport out for two blank space.",
    "start": "1537270",
    "end": "1544560"
  },
  {
    "text": "Significant after a digit. Usually not significant because of digits.",
    "start": "1544560",
    "end": "1549720"
  },
  {
    "text": "Usually a constant. But in case of parameters, primaries are only one digit long. This bases, they're blank space. And again, out from two.",
    "start": "1549720",
    "end": "1560490"
  },
  {
    "text": "And then the link of this last token will be zero will be no. I mean, indicating that the token list is over with. OK.",
    "start": "1560490",
    "end": "1567990"
  },
  {
    "text": "So inside of the inside of text, there would be this list of half word numbers.",
    "start": "1567990",
    "end": "1574140"
  },
  {
    "text": "And it end up on the show talking this procedure to print these. And it would print what? Well, what it prints is shown on ZAPORA next page and two.",
    "start": "1574140",
    "end": "1586880"
  },
  {
    "text": "Seventy three, it prints the letter A, then it prints hashmark one.",
    "start": "1586880",
    "end": "1595040"
  },
  {
    "text": "Now it knows what your character is. It knows what your hashmark character is by looking here.",
    "start": "1595040",
    "end": "1601230"
  },
  {
    "text": "It learns it as it goes because you might have used some other symbol in text isn't initialized to think that this character is any different than any than any others.",
    "start": "1601230",
    "end": "1612400"
  },
  {
    "text": "And so different talking. This might have different hash characters. Zinman and then hash two comes out, blank space comes out and control sequence B no whenever a control sequence ends with a letter.",
    "start": "1612400",
    "end": "1628230"
  },
  {
    "text": "This Chautauquan was automatically puts a space after it. It just in case the thing after it is going to be a letter doesn't look ahead to see if a letter is next.",
    "start": "1628230",
    "end": "1637139"
  },
  {
    "text": "If a letter were next, it would be a bad mistake to leave a space out. So there's always a space after this if it's a letter.",
    "start": "1637140",
    "end": "1645420"
  },
  {
    "text": "I think maybe even if it's not a letter, I forget now the old text, it is made a decision, but I think now it always puts the space of.",
    "start": "1645420",
    "end": "1653460"
  },
  {
    "text": "I don't remember for sure. And then he gets the end match and it translates that into a hyphen and a greater than sign to to look something like a right arrow.",
    "start": "1653460",
    "end": "1667710"
  },
  {
    "text": "Then comes out Perama one gets translated into hash one.",
    "start": "1667710",
    "end": "1673830"
  },
  {
    "text": "OK. Presumably you're not using Outram unless you've already had parameters.",
    "start": "1673830",
    "end": "1679919"
  },
  {
    "text": "So it's already learned what what code to use for that parameter.",
    "start": "1679920",
    "end": "1684990"
  },
  {
    "text": "However. Yeah. OK. I think if you can learn always in time. So it puts this out. It says there is no space after it.",
    "start": "1684990",
    "end": "1691990"
  },
  {
    "text": "So I have to double check the code and see if it if it does that or not. It says backslash, backslash, hyphen without a space.",
    "start": "1691990",
    "end": "1702170"
  },
  {
    "text": "And I'm not sure about that. I'll double check it then. Letter. A space macro parameter that comes out is two of those symbols.",
    "start": "1702170",
    "end": "1711080"
  },
  {
    "text": "One comes out as a one and so on to the end. Now let me see.",
    "start": "1711080",
    "end": "1719320"
  },
  {
    "text": "It is. So let's see if we can figure out from this code what comes out when I displaying a control sequence.",
    "start": "1719320",
    "end": "1726289"
  },
  {
    "text": "So the the token this procedure looks like this. I'm reading from a module to 73. It's got several parameters.",
    "start": "1726290",
    "end": "1738190"
  },
  {
    "text": "The P is the main one. That's where the talking list starts. Q is another one. It's only used if we're printing out error messages.",
    "start": "1738190",
    "end": "1746180"
  },
  {
    "text": "If we get two position. Q We're expected to do something to switch from line one to line two of the error message.",
    "start": "1746180",
    "end": "1752910"
  },
  {
    "text": "And Al is an upper bound. If we get to printing out too much output, we'll quit. No button, no sense going any further than that. Upper bound. OK.",
    "start": "1752910",
    "end": "1760940"
  },
  {
    "text": "Now come into the program as it sets matcher to hashmark.",
    "start": "1760940",
    "end": "1767179"
  },
  {
    "text": "Just in case we haven't learned it in time. I think that's only to make this procedure robust. In case of a token. This wouldn't really have have arisen in the course of a tech job.",
    "start": "1767180",
    "end": "1779070"
  },
  {
    "text": "And in zero, that's the number of framer's we've seen so far. And Talli is the number of characters we generated. Okay, now. So the main thing we have to do is display token P and return if there are problems.",
    "start": "1779070",
    "end": "1791600"
  },
  {
    "text": "So that's module 274. Let's look at 274. If it's peers out of range and we print escape clobbered with the period after it.",
    "start": "1791600",
    "end": "1803809"
  },
  {
    "text": "So we're debugging and printing out a token list and you get to a pointer that is not in the one one word area of memory.",
    "start": "1803810",
    "end": "1813470"
  },
  {
    "text": "Then something is definitely wrong. And we were going to give up. We're going to print clabbered with a period after it. Or we can tell that distinct from the control sequence.",
    "start": "1813470",
    "end": "1825230"
  },
  {
    "text": "Clobbered because. Why? Because if if if the user had a real control sequence clabbered, it would also have.",
    "start": "1825230",
    "end": "1834650"
  },
  {
    "text": "It would get a space after it instead of a period. So this way at least we'd be able to look at the message and see that it was a there was this kind of error indication.",
    "start": "1834650",
    "end": "1845600"
  },
  {
    "text": "But this procedure is not supposed to ever call error because it's used by the error routine to describe the location of an error.",
    "start": "1845600",
    "end": "1856750"
  },
  {
    "text": "Now, if infer P is great and are equal, see as token flag, then we're in this case where we have a control sequence.",
    "start": "1856750",
    "end": "1862470"
  },
  {
    "text": "We call on our subroutine called print C. S, which prints they control sequence. Otherwise, we're going to divide by up to 400 or the same as saying 256 and break it into the M and C part.",
    "start": "1862470",
    "end": "1874120"
  },
  {
    "text": "The M is the command code and the C is the character code. We print bad with a period after it.",
    "start": "1874120",
    "end": "1883070"
  },
  {
    "text": "If we happen to have a negative token for some reason or or a character code greater than 127.",
    "start": "1883070",
    "end": "1891200"
  },
  {
    "text": "Otherwise we are going to display it in the fashion is go and explain. Okay, so we've got to solve our problem as to whether a space comes after this or not.",
    "start": "1891200",
    "end": "1899630"
  },
  {
    "text": "We have to look at print C. S. Where in the heck is print C as well? For that I can look in the index and sometimes I thought it would be neat to have a subscript on all my identifiers saying where they were defined.",
    "start": "1899630",
    "end": "1914090"
  },
  {
    "text": "So I could save one one step in my search. Gives me two forty five.",
    "start": "1914090",
    "end": "1922090"
  },
  {
    "text": "Okay. Thank you. Trevor with that is that some identifiers are declared many times and so I wouldn't,",
    "start": "1922090",
    "end": "1929549"
  },
  {
    "text": "I would have to know about the scope of each one and it would be quite tricky. Now the print see us, it says prints and they will control the sequence in the space after the name IFIC consists entirely of letters.",
    "start": "1929550",
    "end": "1943610"
  },
  {
    "text": "And so that's the idea here. Then it will not get up space after this backslash hyphen and this hyphen had a bench call it to be a type letter.",
    "start": "1943610",
    "end": "1957760"
  },
  {
    "text": "And it goes through the three the three cases of a of a of a control sequence.",
    "start": "1957760",
    "end": "1965210"
  },
  {
    "text": "Now here we get. I want to talk about another one of tech's big tables. This is the table called the the table of Equivalence.",
    "start": "1965210",
    "end": "1976910"
  },
  {
    "text": "And the table of equivalence is where we keep all of the meanings of the of all the control sequences.",
    "start": "1976910",
    "end": "1987370"
  },
  {
    "text": "The table of equivalence. Is described starting on pay module 213.",
    "start": "1987370",
    "end": "1996110"
  },
  {
    "text": "And it's called EQR TB. It's one of the few places where I've used a cryptic abbreviation instead of a word",
    "start": "1996110",
    "end": "2006880"
  },
  {
    "text": "in that in the or something unpronounceable as an identifier in this program.",
    "start": "2006880",
    "end": "2013210"
  },
  {
    "text": "I used to do that a lot. Now, having the freedom to use multilateral identifiers, it turn out usually better to have a long pronounceable identifier.",
    "start": "2013210",
    "end": "2022659"
  },
  {
    "text": "But this time one was used so often I couldn't see myself writing out equivalence table and I couldn't think of a good in between.",
    "start": "2022660",
    "end": "2031290"
  },
  {
    "text": "So let's call it TV and I don't know what I say to myself. Except it Turbo's something like that when I read it. I'm sorry about it.",
    "start": "2031290",
    "end": "2039070"
  },
  {
    "text": "But anyway, there's six parts to EQR TV and they are an equal size, but I'll, I'll just pretend they are for the time being.",
    "start": "2039070",
    "end": "2054790"
  },
  {
    "text": "So there are six regions and let's take a look at what they are now. The first region is one character control sequences.",
    "start": "2054790",
    "end": "2068230"
  },
  {
    "text": "So these are the the things that there is one hundred and twenty eight of them that could be active characters, type 13 characters.",
    "start": "2068230",
    "end": "2077260"
  },
  {
    "text": "And then there's 128 of them, that is backslash character, backslash a backslash hyphen and so on.",
    "start": "2077260",
    "end": "2084580"
  },
  {
    "text": "So so 256 all together, one character control sequences.",
    "start": "2084580",
    "end": "2092050"
  },
  {
    "text": "The next region is the greater and or equal to letter control sequences.",
    "start": "2092050",
    "end": "2101740"
  },
  {
    "text": "The third region is for Skip Glue's parameters.",
    "start": "2101740",
    "end": "2108790"
  },
  {
    "text": "Fourth reason is what I called while Hafford entries.",
    "start": "2108790",
    "end": "2116450"
  },
  {
    "text": "But it's free. It's like local quantities, but it's half word and things like the name of the current font are the name of the current power shape.",
    "start": "2116450",
    "end": "2126170"
  },
  {
    "text": "And and all of the boxes like box one above zero of the box 255 pointers to those boxes.",
    "start": "2126170",
    "end": "2135140"
  },
  {
    "text": "A pointer is a half word. So this will this will our boxes are now local.",
    "start": "2135140",
    "end": "2141549"
  },
  {
    "text": "They'll go away at the end of a group unless you define them to be global when you said set box and so on.",
    "start": "2141550",
    "end": "2150580"
  },
  {
    "text": "Anyway, it's put into KUTV then these are integers here.",
    "start": "2150580",
    "end": "2157210"
  },
  {
    "text": "And the last are the dimensions. So it has six parts to it and it's used for keeping local quantities.",
    "start": "2157210",
    "end": "2168190"
  },
  {
    "text": "Everything that I want to be subject to the local mechanism, the thing of going away at the end of a group is stored in a TB.",
    "start": "2168190",
    "end": "2180260"
  },
  {
    "text": "Now, especially the control sequences,",
    "start": "2180260",
    "end": "2187340"
  },
  {
    "text": "something now for the for these entries in regions one to four is funny and has six regions and they're slightly different in their feature.",
    "start": "2187340",
    "end": "2196630"
  },
  {
    "text": "But one thing they have in common is that they are going away at the end of a group.",
    "start": "2196630",
    "end": "2203950"
  },
  {
    "text": "Now, in the first four regions, for each line here, we star a command and an a modifier called the tour to the thing.",
    "start": "2203950",
    "end": "2212980"
  },
  {
    "text": "The command is a quarter word and Chir is a half word.",
    "start": "2212980",
    "end": "2219670"
  },
  {
    "text": "So every every control sequence, for example, has a command that indicates whether it's a ordinary call or a long one or an outer one or along an outer or it might be a tech primitive.",
    "start": "2219670",
    "end": "2236110"
  },
  {
    "text": "So it might have a command code that says this is a deaf instruction or something like that.",
    "start": "2236110",
    "end": "2243130"
  },
  {
    "text": "So the command code says what this control sequence means.",
    "start": "2243130",
    "end": "2248259"
  },
  {
    "text": "The church code is a half word. So it might, for example, in the case of a control of a defined control sequence by the user,",
    "start": "2248260",
    "end": "2256530"
  },
  {
    "text": "H would be a pointer to the mem location for the beginning of the top tokin list.",
    "start": "2256530",
    "end": "2262570"
  },
  {
    "text": "Well, it's not really the beginning of the token list because there's a reference count. First, we work for each token list.",
    "start": "2262570",
    "end": "2269800"
  },
  {
    "text": "We keep a count of how many times people are using the talking list. Whenever that count drops to zero. We flush it. And this is has turned out to be quite a quite inefficient way to do things.",
    "start": "2269800",
    "end": "2285099"
  },
  {
    "text": "So the. Pointing to the reference, kind of a talking list in the case of a call instruction,",
    "start": "2285100",
    "end": "2291630"
  },
  {
    "text": "but it's a half word the church feel is a halfwit and you have these for all four parts. That's what the equivalent is. This is called the command field is actually called the E.",
    "start": "2291630",
    "end": "2302280"
  },
  {
    "text": "Q type. And this part is called the equiv.",
    "start": "2302280",
    "end": "2308490"
  },
  {
    "text": "And then later on, if TEC is using it through the scanner, EQR type gets called the command and equiv gets called the church.",
    "start": "2308490",
    "end": "2317610"
  },
  {
    "text": "Some of the AQ types are special. That should never come through the scanner. For example,",
    "start": "2317610",
    "end": "2322800"
  },
  {
    "text": "the third paragraph shape is stored somewhere in this region here and it's the type says PA shape and some PA shape when it comes through the scanner.",
    "start": "2322800",
    "end": "2336540"
  },
  {
    "text": "It's not supposed to be in the current paragraph shape. It's supposed to mean the command to set the paragraph shapes different thing entirely.",
    "start": "2336540",
    "end": "2345060"
  },
  {
    "text": "So PA Shapir means to take this equivalent has to be recycled in a funny way when you're when you're",
    "start": "2345060",
    "end": "2355500"
  },
  {
    "text": "coming to the end of a group and you're going to give up to this PA shape and go back to the outer one. You have to return a PA shaped node to the free memory. And that's why you look at the tape to see that.",
    "start": "2355500",
    "end": "2367800"
  },
  {
    "text": "So some of the eak, some of the AQ types are command codes that would come through the scanner. Some of them aren't. But in any case, all of these guys have a type indicating what the what what kind of equivalent it has.",
    "start": "2367800",
    "end": "2380460"
  },
  {
    "text": "Now, here in the last two regions, though, they don't have a quarter and a half word associated with them.",
    "start": "2380460",
    "end": "2386430"
  },
  {
    "text": "They have a forward integer or a scaled value, of course, because an integer wouldn't fit in a court, a word and a half word.",
    "start": "2386430",
    "end": "2396869"
  },
  {
    "text": "So he knows regions. When we fetch a word out of Region five of KUTV, we expect to take a whole integer out of it.",
    "start": "2396870",
    "end": "2408300"
  },
  {
    "text": "Now, region two, especially because it has a hash table associated with it. All of these guys, furthermore, have a hash array that runs from the beginning of Region two to the end of region to the hash array.",
    "start": "2408300",
    "end": "2421830"
  },
  {
    "text": "We'll give information as to what's the name. What are these? What are the letters in this thing?",
    "start": "2421830",
    "end": "2427140"
  },
  {
    "text": "So they have pointers here. And one of them is a pointer to the string table.",
    "start": "2427140",
    "end": "2434460"
  },
  {
    "text": "It's the number of a string. So we can say what the name where the name starts in the string pool.",
    "start": "2434460",
    "end": "2439470"
  },
  {
    "text": "The other one is a pointer within a hash table. Two other things that belong to the same list that week.",
    "start": "2439470",
    "end": "2447240"
  },
  {
    "text": "We we we take the letter sequence and convert it to a small number.",
    "start": "2447240",
    "end": "2453390"
  },
  {
    "text": "And then we everything that that has the same value of that number would get linked together.",
    "start": "2453390",
    "end": "2462519"
  },
  {
    "text": "So the method actually used for hashing is what is the call, the method of coalescing lists and with a with the refinement that my student,",
    "start": "2462520",
    "end": "2473790"
  },
  {
    "text": "Jeff Veter wrote a thesis about so that we actually choose this hash value that we can.",
    "start": "2473790",
    "end": "2480750"
  },
  {
    "text": "We take every sequence and we we convert it to a so-called hash code, which is a which is a number of somewhere about the first eighty five percent of this table.",
    "start": "2480750",
    "end": "2490980"
  },
  {
    "text": "And and the first things that don't that that when we have two things going into the same place,",
    "start": "2490980",
    "end": "2498690"
  },
  {
    "text": "the first ones go into the last fifteen percent and start filling up the table until finally the overflows come into the main table itself.",
    "start": "2498690",
    "end": "2506310"
  },
  {
    "text": "And Jeff's thesis show that 85 percent is the right number to get the best efficiency out of this method. You can expect that these lists on the average are going to be of length, something like one point seven or some some small number.",
    "start": "2506310",
    "end": "2517710"
  },
  {
    "text": "So that very rarely do you actually have a long number of things to check the details about hashing that are in another book I wrote.",
    "start": "2517710",
    "end": "2527080"
  },
  {
    "text": "So. So anyway, that's a hash method. But the hash table and an array called hash starts at location at the beginning of region two here and ends at the end of Region two.",
    "start": "2527080",
    "end": "2539400"
  },
  {
    "text": "It's only used for that part of the table. Now, these equivalence then where we keep control sequences.",
    "start": "2539400",
    "end": "2548400"
  },
  {
    "text": "So let's recapitulate what I said. Suppose somebody says def a, you know, entity.",
    "start": "2548400",
    "end": "2556799"
  },
  {
    "text": "He could be here. OK. Fairly simple case. So what's going to happen?",
    "start": "2556800",
    "end": "2562900"
  },
  {
    "text": "Tech is going to look to to see this backslash. Charities are escape character.",
    "start": "2562900",
    "end": "2568690"
  },
  {
    "text": "It's gonna be a control sequence and it looks at the D e f and then it sees a nine letter.",
    "start": "2568690",
    "end": "2573720"
  },
  {
    "text": "And so it says, OK, D.F. is the thing I'm supposed to look for. The control sequence made up of more than one letter.",
    "start": "2573720",
    "end": "2583470"
  },
  {
    "text": "So it computes a hash code for D.F., say, the hash code of three.",
    "start": "2583470",
    "end": "2589080"
  },
  {
    "text": "It looks at position 300 and points to a string and says, does that string number three string indicated by this, is that the F word?",
    "start": "2589080",
    "end": "2601170"
  },
  {
    "text": "No, it isn't. Well, V.F. OK. Look at that at the link here.",
    "start": "2601170",
    "end": "2606540"
  },
  {
    "text": "And we'll look at another place in the hash table that points us to another string. Yes, that is the EAF.",
    "start": "2606540",
    "end": "2611940"
  },
  {
    "text": "OK. So we found the EAF at this part of the of KUTV. What does it mean? So we look up each type of the F. It says that's defined.",
    "start": "2611940",
    "end": "2622060"
  },
  {
    "text": "That means you're defining a control sequence. And so you found D.F. that it means define the define routine, looks at the next token without expanding it as a macro.",
    "start": "2622060",
    "end": "2636900"
  },
  {
    "text": "And. And what happens in season escape sequence? It sees a letter. So it says, oh, maybe there's going to be another letter.",
    "start": "2636900",
    "end": "2645780"
  },
  {
    "text": "We'll have another control sequence of more than one letter. No, it's not a letter. It's a code one. It's a left brain, kind of a token.",
    "start": "2645780",
    "end": "2654780"
  },
  {
    "text": "So this is a one letter control sequence, a special case of one character control sequence.",
    "start": "2654780",
    "end": "2659940"
  },
  {
    "text": "So we look up here. We don't go through hashing on this one. We pick it up out of KUTV and we look up here once it's EHU type, but we.",
    "start": "2659940",
    "end": "2668380"
  },
  {
    "text": "OK. But we're going to define it. So what? No matter what is he he type was if it could have been deaf also he could have suddenly find whatever if type was.",
    "start": "2668380",
    "end": "2677099"
  },
  {
    "text": "We're going to change it and make a new definition of it. We're going to put in this place any UCB call, which is the command code.",
    "start": "2677100",
    "end": "2686640"
  },
  {
    "text": "If you type for a an ordinary defined control sequence and then we're going to run a",
    "start": "2686640",
    "end": "2694859"
  },
  {
    "text": "little program that's called scan tokes that reads The Left Brain Goes to the end.",
    "start": "2694860",
    "end": "2702270"
  },
  {
    "text": "Build a talking list for this thing. Puts it in a big memory array. And then equiv is going to point to that, to that token list.",
    "start": "2702270",
    "end": "2711850"
  },
  {
    "text": "And we'll have a call in here now. But what about what used to be in there before I put the call in there was defined as something else.",
    "start": "2711850",
    "end": "2721560"
  },
  {
    "text": "I got to do something with that because it's got to come back again later on when I get to the end of the group.",
    "start": "2721560",
    "end": "2727070"
  },
  {
    "text": "OK. So that's the that's the last link in our chain here.",
    "start": "2727070",
    "end": "2736530"
  },
  {
    "text": "And there is another table of importance called the save stack.",
    "start": "2736530",
    "end": "2744780"
  },
  {
    "text": "This is where we save things that have to be restored later.",
    "start": "2744780",
    "end": "2750870"
  },
  {
    "text": "So the safe stack is is full of memory words that are going to be put back on the on TV later.",
    "start": "2750870",
    "end": "2760830"
  },
  {
    "text": "Let's put let's see now. Backslash A is in location.",
    "start": "2760830",
    "end": "2766060"
  },
  {
    "text": "Well, if you work it out, it's one hundred and twenty nine plus six plus ninety seven that well whatever.",
    "start": "2766060",
    "end": "2773430"
  },
  {
    "text": "Let's say most will get it right. Two hundred and twenty six I think. Location 226. There's going to be backslash.",
    "start": "2773430",
    "end": "2782660"
  },
  {
    "text": "And so it's gonna be represented. Representatives location twenty twenty six TV. Now when I'm reading finding that there was a previous meaning to backflow, I say I don't care what it was.",
    "start": "2782660",
    "end": "2794490"
  },
  {
    "text": "Let's call it star because if it's just whatever its previous meaning was, when I define it again, this previous meaning is gonna be wiped out.",
    "start": "2794490",
    "end": "2805920"
  },
  {
    "text": "Except that if I'm inside of a group, the end of the group, previous meetings supposed to come back.",
    "start": "2805920",
    "end": "2812880"
  },
  {
    "text": "So what I do is in the same stack, maybe the same stack already has some stuff in it.",
    "start": "2812880",
    "end": "2820559"
  },
  {
    "text": "Here I'm gonna put the old thing that used to be for a and then on the next word under it,",
    "start": "2820560",
    "end": "2828090"
  },
  {
    "text": "I'll put 226 indication at 226 has to be fixed up and I get to the end of the group.",
    "start": "2828090",
    "end": "2837390"
  },
  {
    "text": "OK, so Save Stack contains a lot of two word items like this, and the 226 also has type code associated with it saying fix up to 26, a case like that.",
    "start": "2837390",
    "end": "2853960"
  },
  {
    "text": "Now, usually when I'm doing this, this control sequence didn't have any meaning on.",
    "start": "2853960",
    "end": "2862589"
  },
  {
    "text": "It was just an undefined control sequence outside in the other block. And so I'm wasting space on the safe stacks within a special case. It says easy fix up or whatever it's called.",
    "start": "2862590",
    "end": "2873859"
  },
  {
    "text": "In the case that this star star was the was the most common one of undefined control sequence,",
    "start": "2873860",
    "end": "2879930"
  },
  {
    "text": "an easy fix up, a lone saw one word and assume that that the previous one was fixed.",
    "start": "2879930",
    "end": "2885059"
  },
  {
    "text": "But that's a technicality. It's conceptually it's the same idea. It's just a small refinement to a safe space.",
    "start": "2885060",
    "end": "2890940"
  },
  {
    "text": "So what we put in there when we change some money table, we put an entry and a safe stack and this would be the address and he could be.",
    "start": "2890940",
    "end": "2899520"
  },
  {
    "text": "And if the address is one of these high numbers, we know that we're. That the thing we're we're have to restore is going to be adger or scale or a or halfwits or something like by the range of this address.",
    "start": "2899520",
    "end": "2911280"
  },
  {
    "text": "We can tell what what kind of a fixed up we're going to be doing.",
    "start": "2911280",
    "end": "2917340"
  },
  {
    "text": "If it's a small number, we have to look at the EQR type to see what kind of a fixed up we're doing. But it was a large number. We know it's an integer. Yeah. Please use them.",
    "start": "2917340",
    "end": "2926619"
  },
  {
    "text": "Mike, how do you know how much to restore?",
    "start": "2926620",
    "end": "2932970"
  },
  {
    "text": "If you have nested braces, found several levels of strawberry.",
    "start": "2932970",
    "end": "2939599"
  },
  {
    "text": "Yeah. Good question. We have to we have to store more information. You've pointed out that that my data structure is incomplete.",
    "start": "2939600",
    "end": "2946650"
  },
  {
    "text": "But fortunately, there's room for another quarter word here because I had a half word and a quarter word.",
    "start": "2946650",
    "end": "2951690"
  },
  {
    "text": "Right. You know, yes, I have another thing called each level, which is the level at which thing was defined.",
    "start": "2951690",
    "end": "2959490"
  },
  {
    "text": "And this is important because if I didn't have that, I wouldn't be able to do it right. So so now, besides this, I have a level and this is the level at which that the definition was made and there isn't.",
    "start": "2959490",
    "end": "2970690"
  },
  {
    "text": "Then this number is a little tricky. You have to work it out. In fact, in the first version of tech,",
    "start": "2970690",
    "end": "2978300"
  },
  {
    "text": "I think about six bugs were in that section because I kept learning more and more about this scheme as as in each time I thought I,",
    "start": "2978300",
    "end": "2985670"
  },
  {
    "text": "I finally understood it completely. Now I think I do, but I'm not sure I can explain it to you in five minutes.",
    "start": "2985670",
    "end": "2993869"
  },
  {
    "text": "But there is a level at which I wish the definition is made. And so level goes in with it.",
    "start": "2993870",
    "end": "3000410"
  },
  {
    "text": "And if this level turned out to be the same as the current level, then I don't even bother putting anything on the safe stack because the previous definition, because something already was safe from our level.",
    "start": "3000410",
    "end": "3012200"
  },
  {
    "text": "So suppose, for example, I'm on level three inside of three pairs of braces. And I have to depths of a. When I did the first half of a then I saved something for fixing up later.",
    "start": "3012200",
    "end": "3024440"
  },
  {
    "text": "I did the second half of a I just throw away the first death. I don't have to store away at the first half. If I started the way it would take up space and I would undo it and then I would undo, undo that again.",
    "start": "3024440",
    "end": "3035480"
  },
  {
    "text": "So it's you know, so there's no point in wasting the space and doing extra work. So I just throw it away at the time if it's the same level.",
    "start": "3035480",
    "end": "3043550"
  },
  {
    "text": "But if it's but if it's at a different level, actually I must be at a higher level because it will,",
    "start": "3043550",
    "end": "3048740"
  },
  {
    "text": "because it is gonna be a property of this whole method that every level on the save stack is less than or equal to my current level,",
    "start": "3048740",
    "end": "3056180"
  },
  {
    "text": "I think strictly less than my current level. So I'll never save anything. And when I restore the save stack, I'm going to when I get to the end of a group,",
    "start": "3056180",
    "end": "3063980"
  },
  {
    "text": "I'm going to pop back until I get to the right place in the safe stack. So besides fix up upwards in the safe stack, I might have another fixed up word here and then I'll have a boundary type of a word here, OK,",
    "start": "3063980",
    "end": "3079370"
  },
  {
    "text": "a boundary type of a word that says this is the this is where I began a new group and there will be a boundary word up here to the beginning of a new group.",
    "start": "3079370",
    "end": "3090110"
  },
  {
    "text": "So when I get to the to a right place at the end of a group, I run back and I do all the fix ups until I get back to the preceding boundary.",
    "start": "3090110",
    "end": "3100280"
  },
  {
    "text": "And now everything is restored to the way it was when I entered that group.",
    "start": "3100280",
    "end": "3106730"
  },
  {
    "text": "You get the general idea of this of this method. So the last input.",
    "start": "3106730",
    "end": "3111910"
  },
  {
    "text": "So when I get to the beginning of a I get to the start of a group. Suppose somebody writes H box and then left trace.",
    "start": "3111910",
    "end": "3119400"
  },
  {
    "text": "Okay, I'm beginning a group. So everything in here, when I get to the right breaks, it's going to tell me, you know,",
    "start": "3119400",
    "end": "3128760"
  },
  {
    "text": "then I'm going to go back and restore all definitions, things that were made in this group, and that'll be indicating this boundary here.",
    "start": "3128760",
    "end": "3138350"
  },
  {
    "text": "Now, I need a few more pieces in my data structure, and you're probably going to discover this. Yes. No. OK. Now, the way the old version of this is a big change between the old version tech and the new one.",
    "start": "3138350",
    "end": "3154250"
  },
  {
    "text": "And why the new one can be a lot better. I use it the old way was that I kept in this boundary word here.",
    "start": "3154250",
    "end": "3163240"
  },
  {
    "text": "What kind of a group was starting there? For example, in this age box case, this would say beginning of an age box, but I didn't remember that.",
    "start": "3163240",
    "end": "3171130"
  },
  {
    "text": "What kind of a group I was I was in. Instead, I would go through, do all my fix ups until I get back to where in this.",
    "start": "3171130",
    "end": "3179680"
  },
  {
    "text": "And they would say, oh, that was an eight box group that you were doing. So I was a right priest came along.",
    "start": "3179680",
    "end": "3185309"
  },
  {
    "text": "But at this point, I had forgotten really what kind of a thing I was working on.",
    "start": "3185310",
    "end": "3190520"
  },
  {
    "text": "And but I but I knew it was somewhere in the same stack. And so I just went back to it. And then it told me, yes, it was it was an age box group.",
    "start": "3190520",
    "end": "3198339"
  },
  {
    "text": "And so then I go and finish the box for four tickets to this.",
    "start": "3198340",
    "end": "3204370"
  },
  {
    "text": "Would this would be very bad because we wanted to get rid of each box parent thing. So if this was a V box and if I would destroy all this stuff here, I'd be about to make a paragraph.",
    "start": "3204370",
    "end": "3213819"
  },
  {
    "text": "But I just erased the baseline skip that I was supposed to use for that paragraph. So I said, I want to know when I have this right brace that I'm, you know,",
    "start": "3213820",
    "end": "3222100"
  },
  {
    "text": "v box and still have to finish that before I do before I go doing these fix ups.",
    "start": "3222100",
    "end": "3228820"
  },
  {
    "text": "So the so the new data structure is in store. I have a I keep track of what kind of group. I mean it's called core group kind of group I'm in.",
    "start": "3228820",
    "end": "3240220"
  },
  {
    "text": "And then in the boundary word, I don't store the kind of group that was starting there, but the kind of group I interrupted.",
    "start": "3240220",
    "end": "3246430"
  },
  {
    "text": "So this boundary word is going to be a pointer to the previous boundary word and it tells what kind of boundary where that was.",
    "start": "3246430",
    "end": "3254109"
  },
  {
    "text": "Therefore, when I get to the end of a boundary, when I get to a right brace, I look at Cur group and says,",
    "start": "3254110",
    "end": "3260710"
  },
  {
    "text": "Oh yes, I was finishing this, such as I'm finishing such and such a kind of group. And if I want to, I can do these fix ups as soon as I and they at the right time, I can do the fix ups and I find do the fix ups.",
    "start": "3260710",
    "end": "3271210"
  },
  {
    "text": "Then I then I said cur group to the old core group that was there, was stored there and, and resume as I as, as I had it.",
    "start": "3271210",
    "end": "3278250"
  },
  {
    "text": "So the same saving and restoring equivalence gets a bit subtle and it's all described in, let's see, part 19 of the program starting at Marjoe 251.",
    "start": "3278250",
    "end": "3293740"
  },
  {
    "text": "So it won't solve the problem of saving and restoring equivalence in that. Part of the data structure is discussed there. And it's one of the most subtle parts of the program is actually short.",
    "start": "3293740",
    "end": "3304240"
  },
  {
    "text": "It covers modules to fifty one, up to two to sixty nine sorts.",
    "start": "3304240",
    "end": "3312910"
  },
  {
    "text": "It's rather small amount of code, but the code itself had to be just right in order to do all these features.",
    "start": "3312910",
    "end": "3322780"
  },
  {
    "text": "I haven't described what one about global definitions yet. And that's the that's the other interesting thing about this, which you add on top of everything else I said,",
    "start": "3322780",
    "end": "3331900"
  },
  {
    "text": "what happens when you say global or g def of a and in that case,",
    "start": "3331900",
    "end": "3337359"
  },
  {
    "text": "you you don't bother saving the old value because they never gonna want to put it back again and you set the IQ level to one.",
    "start": "3337360",
    "end": "3349180"
  },
  {
    "text": "And if you look carefully at what this does and you have to consider all the cases where you have saved ten definitions",
    "start": "3349180",
    "end": "3355930"
  },
  {
    "text": "and some of them were local and some were global and see exactly what gets stored and what didn't you see that it does,",
    "start": "3355930",
    "end": "3361329"
  },
  {
    "text": "in fact work. So so that's the the other catch is that when something is global and I try to fix it up, I'm coming through and right.",
    "start": "3361330",
    "end": "3369970"
  },
  {
    "text": "Brace and I try to fix up something and I look and see that the thing that's in there is that level one.",
    "start": "3369970",
    "end": "3375280"
  },
  {
    "text": "That means it was defined global in the black. So I don't really fix it up at all. Yeah. Yeah. Dan, is there any other use 3Q Q Rebel besides that?",
    "start": "3375280",
    "end": "3388470"
  },
  {
    "text": "No. Well, it's important for garbage collection because if I didn't know that then I wouldn't throw away things at the wrong time.",
    "start": "3388470",
    "end": "3397570"
  },
  {
    "text": "At the right time. I would lose my last reference to a token list. So. So that's why I have added an extra quarter word array called XY.",
    "start": "3397570",
    "end": "3409090"
  },
  {
    "text": "Q level here, two regions, five and six, so that I can have the level information for these two guys,",
    "start": "3409090",
    "end": "3416470"
  },
  {
    "text": "which didn't have an extra quarter were for regions five and six is extra arrays of one by each for these guys seeing what their level is.",
    "start": "3416470",
    "end": "3424150"
  },
  {
    "text": "Without that, six things would go wrong. At one point I thought I could get by with it, but then I find it funny later that I couldn't.",
    "start": "3424150",
    "end": "3432520"
  },
  {
    "text": "So it. So I need all of the Boniva, all the structure of. And boundary. And and so on.",
    "start": "3432520",
    "end": "3440610"
  },
  {
    "text": "It's all it's all wrapped up and if any one of those things goes, the whole thing falls.",
    "start": "3440610",
    "end": "3445800"
  },
  {
    "text": "In some cases, even though it might work for a few months.",
    "start": "3445800",
    "end": "3451500"
  },
  {
    "text": "This is the way I know this this kind of thing can can actually work on all the simple examples.",
    "start": "3451500",
    "end": "3458280"
  },
  {
    "text": "And then and then it'll fail on the other. So now I believe it's been thought through with perfect rigor.",
    "start": "3458280",
    "end": "3463740"
  },
  {
    "text": "But it's it's it was one of the subtle parts of the program worth worth studying, I think, for for so for people.",
    "start": "3463740",
    "end": "3473580"
  },
  {
    "text": "OK, that's the then representation of control sequences and equivalence.",
    "start": "3473580",
    "end": "3479490"
  },
  {
    "text": "And the subtle parts about it were related really to the garbage collection issues that I just hinted at.",
    "start": "3479490",
    "end": "3487200"
  },
  {
    "text": "Namely, there was a reference count on each token list. So suppose I've saved something on the stack. It's a suppose I've saved this and this was a pointer to some place in memory.",
    "start": "3487200",
    "end": "3501480"
  },
  {
    "text": "The old definition of a. All right. So that token list has a reference count associated with it.",
    "start": "3501480",
    "end": "3509700"
  },
  {
    "text": "Now, I did a def of a well, then later on in this block I did a G def event.",
    "start": "3509700",
    "end": "3517800"
  },
  {
    "text": "So at that point I wipe out this definition. I set the level to one. But later on. But this fix up is still there and saves stack.",
    "start": "3517800",
    "end": "3524880"
  },
  {
    "text": "I'm not going to go back looking through the same stack to see if I had any fix ups for the thing. So then when I finally get to the right brazened, I come through. I see fixed up to twenty six.",
    "start": "3524880",
    "end": "3533190"
  },
  {
    "text": "I look and see all the level has been one. So there has been a g def to this guy. I'm not going to fix it up. I have to remember to decrease this, this reference count on this entry that I'm not going to use.",
    "start": "3533190",
    "end": "3543570"
  },
  {
    "text": "I don't just ignore this one, I, I, I decrease its reference count. That was one of the latter bugs too that I caught, that I had been losing, losing my memory at one point because of it.",
    "start": "3543570",
    "end": "3556349"
  },
  {
    "text": "Yes. I'm forgetting all these things are losing space in my mouth.",
    "start": "3556350",
    "end": "3562140"
  },
  {
    "text": "Okay. Oh, I wanted to make a point about this a little bit, that at level one, at the outermost level,",
    "start": "3562140",
    "end": "3568950"
  },
  {
    "text": "you don't have to save anything because there's never gonna be a right phrase getting you out of that level.",
    "start": "3568950",
    "end": "3574530"
  },
  {
    "text": "And so you so so you you save yourself. That's why people have had the phenomenon at Tech. We work fine on a program.",
    "start": "3574530",
    "end": "3583630"
  },
  {
    "text": "Then they put left brace in right grace at around everything. And all of a sudden it runs out because Save Stack overflowed.",
    "start": "3583630",
    "end": "3591779"
  },
  {
    "text": "The reason is that when you when you're in level two, when you're when you're inside of braces and I'm starting to having to save everything.",
    "start": "3591780",
    "end": "3599350"
  },
  {
    "text": "And then the old tech it saved every time you change the font, every time we change current, finally put something on the save stack.",
    "start": "3599350",
    "end": "3606210"
  },
  {
    "text": "And pretty soon if you had a long enough program to save Stack, we'd have lots of fix up fine fix up fonts in there.",
    "start": "3606210",
    "end": "3612869"
  },
  {
    "text": "Well, now it not only I think I don't think it will that will change the fun anymore because I have level on the font.",
    "start": "3612870",
    "end": "3618480"
  },
  {
    "text": "I didn't used to but I have but. But it still will. We'll use memory more efficiently if you don't have unnecessary, unnecessary braces here.",
    "start": "3618480",
    "end": "3631790"
  },
  {
    "text": "OK, now some other questions. Yes. If you have a definition in the outer level and I can't hear you.",
    "start": "3631790",
    "end": "3641130"
  },
  {
    "text": "Sorry. Sorry. If you had a definition in the upper level, say, a backslash. Then it would have level one.",
    "start": "3641130",
    "end": "3650160"
  },
  {
    "text": "Yeah. Levels. Level one is what. Inside the program when it's level one is the technical term used for the outer level.",
    "start": "3650160",
    "end": "3661589"
  },
  {
    "text": "Because level zero is the is the is is completely undefined.",
    "start": "3661590",
    "end": "3669670"
  },
  {
    "text": "And and so we consider it an undefined control sequence was defined at level zero.",
    "start": "3669670",
    "end": "3675839"
  },
  {
    "text": "That's a technical point. When I send an error message to a user, I say he's at level zero.",
    "start": "3675840",
    "end": "3681240"
  },
  {
    "text": "When he's. When I think he's at what I call level one, because he's. He's not really inside of any of any braces. So, for example, suppose you write this this tech program left brace n I see the left brace.",
    "start": "3681240",
    "end": "3696599"
  },
  {
    "text": "I said cur level. That's one of my parameters. One of my global variables is kurr level.",
    "start": "3696600",
    "end": "3702690"
  },
  {
    "text": "When I see a left brace, cur level goes up from level one to level two.",
    "start": "3702690",
    "end": "3708680"
  },
  {
    "text": "And I see end and I check is kurr level greater than level one. And I say yes, it's a low, it's level two. This is look strange. So I tell the user end occurred at level one.",
    "start": "3708680",
    "end": "3722450"
  },
  {
    "text": "It doesn't use the word level though. It's I can't fix the error message. So it's a little more makes little more sense.",
    "start": "3722450",
    "end": "3729450"
  },
  {
    "text": "But it it it says one instead of two. Even though my my dog, my. The number in inside of tech is to report it to the user as one, if you if you want to understand what I'm talking about.",
    "start": "3729450",
    "end": "3745430"
  },
  {
    "text": "It's are much clearer if you look it up in the code and end occurred. That's module Toivo three. When you're just finishing tech,",
    "start": "3745430",
    "end": "3755470"
  },
  {
    "text": "one of the last things it does is it gives this message and it said and it and",
    "start": "3755470",
    "end": "3762160"
  },
  {
    "text": "occurred inside a group at level and then it prints out crew level minus level one.",
    "start": "3762160",
    "end": "3770619"
  },
  {
    "text": "If you can think of a more informative error message than that, that seemed to be one that my wife understood my test.",
    "start": "3770620",
    "end": "3780530"
  },
  {
    "text": "Excuse me. Then you have your work. Yeah. What? What happens if on the other level you get slashed?",
    "start": "3780530",
    "end": "3790290"
  },
  {
    "text": "If you have a death slash a second level, you redefine it.",
    "start": "3790290",
    "end": "3796070"
  },
  {
    "text": "And the third level yujie death. Okay. Let's look at this case just to see what happened here.",
    "start": "3796070",
    "end": "3803430"
  },
  {
    "text": "Down here, I said, gee, that bag. Yeah. So on the other level, I find a whole thing goes in the same stack because its previous definition was.",
    "start": "3803430",
    "end": "3816230"
  },
  {
    "text": "I mean, I'm still at level one. So nothing is in the same stack here. There's no way to take this one away. You'll never end a group.",
    "start": "3816230",
    "end": "3824840"
  },
  {
    "text": "And never put anything on the safe stack for that here. I put something on the safe stack. And so this will be then, too.",
    "start": "3824840",
    "end": "3833180"
  },
  {
    "text": "What was it? Two hundred and whatever. Two.",
    "start": "3833180",
    "end": "3840849"
  },
  {
    "text": "Twenty six. OK. I'll say fix up to twenty six. Let's call this OK.",
    "start": "3840850",
    "end": "3847910"
  },
  {
    "text": "Alpha, Beta and Gamma. OK. So. So after I do this definition I speak alpha in here. I get to this definition.",
    "start": "3847910",
    "end": "3857720"
  },
  {
    "text": "It'll say fix up to 26 alpha and beta gets stuck stuck in here.",
    "start": "3857720",
    "end": "3864680"
  },
  {
    "text": "When I get to this definition and also this will say level two. OK. And this will say one Alpha. I get to this definition.",
    "start": "3864680",
    "end": "3876800"
  },
  {
    "text": "This definition. I mean, level three. And so it is not equal to this level.",
    "start": "3876800",
    "end": "3884120"
  },
  {
    "text": "So I put it on the safe stack to beta fix up to twenty six and put in here three gammell one gallon G that one can get to the end of this group.",
    "start": "3884120",
    "end": "3903360"
  },
  {
    "text": "What like processed access was the cheat death.",
    "start": "3903360",
    "end": "3909740"
  },
  {
    "text": "You're right. I didn't put this on. It was a g def didn't.",
    "start": "3909740",
    "end": "3915590"
  },
  {
    "text": "Yeah. Yeah. And I didn't put it on. I just wiped it out. Decreased the reference count to beta then.",
    "start": "3915590",
    "end": "3922820"
  },
  {
    "text": "OK. Then when I get to the right brace here I, I look back and I see it's going to.",
    "start": "3922820",
    "end": "3931640"
  },
  {
    "text": "Nothing happens. I get to the next right brace. I finish as this group and it that'll tell me to fix up this definition here.",
    "start": "3931640",
    "end": "3939769"
  },
  {
    "text": "But I look in position to twenty six and it's got a global in it. And so that's.",
    "start": "3939770",
    "end": "3946760"
  },
  {
    "text": "So it doesn't get fixed up. Now on the other hand, if somebody had made a def of a at this point then it would have something, something, a level two.",
    "start": "3946760",
    "end": "3956030"
  },
  {
    "text": "And I would, and I would go back and and that would have wiped out the G def.",
    "start": "3956030",
    "end": "3961460"
  },
  {
    "text": "At this point, you see. So it's the last surviving the last G def survives. But but you can be Cannady Jeff can always be canceled by a local def.",
    "start": "3961460",
    "end": "3972450"
  },
  {
    "text": "And this one would. This one would store away this guy Gama'a.",
    "start": "3972450",
    "end": "3977630"
  },
  {
    "text": "And then that Gamow would be restored. And when I finally got in and so finally when I got to this one, it was still not.",
    "start": "3977630",
    "end": "3984829"
  },
  {
    "text": "It was still not replaced. Gamma by Alpha is. That's what I meant by saying try it and you'll see that it works.",
    "start": "3984830",
    "end": "3992180"
  },
  {
    "text": "And besides, there's an informal rendering of the proper invariant relation that that gives the basis for the mathematical proof that it works.",
    "start": "3992180",
    "end": "4003430"
  },
  {
    "text": "Stated in that section there was a 250 something or other. I believe somewhere I, I like at least hinted at what was the right notion of it.",
    "start": "4003430",
    "end": "4024849"
  },
  {
    "text": "Let's see you say, well, then, I can't find it just now.",
    "start": "4024850",
    "end": "4041700"
  },
  {
    "text": "Well, yeah, to 65, if at least one global definition of KUTV has been carried out within the group that just ended,",
    "start": "4041700",
    "end": "4050099"
  },
  {
    "text": "the last such definition will therefore survive. And that if you translate that into quantifiers and logic and everything would be",
    "start": "4050100",
    "end": "4057420"
  },
  {
    "text": "the right thing to put in as a formal proof of correctness of this algorithm.",
    "start": "4057420",
    "end": "4063920"
  },
  {
    "text": "There's a there's another complication that I didn't mention, of course, with respect to if and so when you say if,",
    "start": "4063920",
    "end": "4071490"
  },
  {
    "text": "then the level number doesn't actually go up when when you pass this left price.",
    "start": "4071490",
    "end": "4077280"
  },
  {
    "text": "And so when you get to the right price afterwards, you just take out the boundary word and shift everything down.",
    "start": "4077280",
    "end": "4084930"
  },
  {
    "text": "You have to read the code, but you'll see that it works. OK. Any more questions? Well, tomorrow morning then we we begin the class at nine thirty.",
    "start": "4084930",
    "end": "4096900"
  },
  {
    "text": "And we begin breakfast at about nine o'clock. So come early enough and have some.",
    "start": "4096900",
    "end": "4102029"
  },
  {
    "text": "Have some tea. Oh.",
    "start": "4102030",
    "end": "4111059"
  },
  {
    "text": "Start at the beginning I would say. And I can start at the beginning. Read some of these comments and familiarize yourself with use of the index and then set yourself some problem or other.",
    "start": "4111060",
    "end": "4121770"
  },
  {
    "text": "In other words, something say I wonder how he does that. Now the way you can do that, that's a good question.",
    "start": "4121770",
    "end": "4129810"
  },
  {
    "text": "If you take any anyone of text primitives like death or something like that, you can look it up in the index under that name and it'll say deaf, primitive. It'll refer you to the place where it was put in the hash table.",
    "start": "4129810",
    "end": "4142990"
  },
  {
    "text": "And then that'll refer you to what command code it has and you might be able to trace to looking at the index,",
    "start": "4142990",
    "end": "4149580"
  },
  {
    "text": "the whole seek the whole history of of of death, how it comes through text.",
    "start": "4149580",
    "end": "4154589"
  },
  {
    "text": "Anyway, give you a set. If you don't like that problem, give yourself some other little task. So, you know, saying, I wonder what this half what this doesn't.",
    "start": "4154590",
    "end": "4161850"
  },
  {
    "text": "And that'll just give you a reason for perusing the index and finding your way through the report,",
    "start": "4161850",
    "end": "4169200"
  },
  {
    "text": "because the main thing to do is just to get a little familiar with the notation and and mess up the page to get the page a little a little black on the edges.",
    "start": "4169200",
    "end": "4180569"
  },
  {
    "text": "Yeah.",
    "start": "4180570",
    "end": "4188415"
  }
]