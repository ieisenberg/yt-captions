[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "All right. Good morning, we're gonna go ahead and get started. Um, homework [NOISE] one is due today,",
    "start": "4790",
    "end": "10770"
  },
  {
    "text": "unless you're using late days, um, and homework two will be released today. Homework two is gonna be over, um,",
    "start": "10770",
    "end": "17490"
  },
  {
    "text": "[NOISE] function approximation and reinforcement learning. Um, we're gonna start to cover that material today, and then we'll continue next week with deep learning.",
    "start": "17490",
    "end": "24539"
  },
  {
    "text": "[NOISE] Um, deep learning is not a prerequisite for this class and so we're gonna be releasing a tutorial on TensorFlow,",
    "start": "24540",
    "end": "31199"
  },
  {
    "text": "um, later this week. [NOISE] Uh, and then next week, we'll also in sessions [NOISE] have the opportunity to go into some more of the background to deep learning.",
    "start": "31200",
    "end": "38450"
  },
  {
    "text": "[NOISE] You're not expected to be an expert at it but you need to know enough of it in order to do the homeworks and, and do the function approximation.",
    "start": "38450",
    "end": "44480"
  },
  {
    "text": "[NOISE] We will be assuming that you're very familiar with things like, um, gradient descent, and taking derivatives, and things like that.",
    "start": "44480",
    "end": "50820"
  },
  {
    "text": "Um, TensorFlow and other packages can do that automatically for you, but you should be familiar with the general [NOISE] process that happens.",
    "start": "50820",
    "end": "57590"
  },
  {
    "text": "Um, before we continue the sim, may I have any logistic questions. [NOISE] All right. Let's go ahead and get started.",
    "start": "57590",
    "end": "66330"
  },
  {
    "text": "[NOISE] Um, as you can see I have lost my voice a little bit, it's coming back but we'll see how we go and if it gets too tricky,",
    "start": "66330",
    "end": "72830"
  },
  {
    "text": "then will take over. [NOISE] All right, so what we've been talking about so far is thinking about, um,",
    "start": "72830",
    "end": "80030"
  },
  {
    "start": "79000",
    "end": "198000"
  },
  {
    "text": "[NOISE] learning, uh, to be able to evaluate policies in sequential decision-making cases, and being able to make decisions.",
    "start": "80030",
    "end": "86240"
  },
  {
    "text": "[NOISE] All of this is when the world is unknown. And what I mean by that is that, we're not given in advance,",
    "start": "86240",
    "end": "91355"
  },
  {
    "text": "a dynamics model, or a reward model. [NOISE] Um, and what we're gonna start to talk about today is value function approximation.",
    "start": "91355",
    "end": "98090"
  },
  {
    "text": "[NOISE] Um, just so I know actually, who of you, who of you have seen this before?",
    "start": "98090",
    "end": "103170"
  },
  {
    "text": "Who've seen some form of like value function approximation? [NOISE] Okay, so, a couple of people, that most people know.",
    "start": "103170",
    "end": "109159"
  },
  {
    "text": "Um, uh, so when I say value function approximation, what I mean is that so far we've been thinking about domains,",
    "start": "109160",
    "end": "116120"
  },
  {
    "text": "where we tend to have a finite set of states and actions, and where it is, um, computationally and memory feasible [NOISE] to just write down a table,",
    "start": "116120",
    "end": "124730"
  },
  {
    "text": "to keep track of what the value is, of states or the value of state action pairs, [NOISE] um, or that we could imagine writing data table to write down",
    "start": "124730",
    "end": "132200"
  },
  {
    "text": "the models explicitly of the Reward Model and the dynamics model. [NOISE] But many real world problems have enormous state and action spaces.",
    "start": "132200",
    "end": "139880"
  },
  {
    "text": "So, if you think about things like the Atari games, which we can debate about whether or not that's",
    "start": "139880",
    "end": "145129"
  },
  {
    "text": "a real-world problem but it's certainly a challenging problem. [NOISE] Um, state-space we discussed at the beginning is really sort of a set of pixels.",
    "start": "145130",
    "end": "152465"
  },
  {
    "text": "And so that's gonna be an enormous space and we're not going to be able to write down that as a table. [NOISE] And so, in these cases,",
    "start": "152465",
    "end": "159150"
  },
  {
    "text": "we're gonna have to go beyond sort of this tabular representation, [NOISE] and really think about this issue of generalization.",
    "start": "159150",
    "end": "164930"
  },
  {
    "text": "[NOISE] So, we're going to need to be able to say we want to be able to make decisions and learn to make good decisions.",
    "start": "164930",
    "end": "170720"
  },
  {
    "text": "We're gonna need to be able to generalize from our prior experience, so that even if we end up in a state action pair that we've never seen exactly before,",
    "start": "170720",
    "end": "178409"
  },
  {
    "text": "it's like a slightly different set of pixels than we've ever seen before, that we're still gonna be able to make good decisions and that's gonna require generalization.",
    "start": "178410",
    "end": "185720"
  },
  {
    "text": "[NOISE] So, um, what we're gonna talk about today is we're starting with value function approximation,",
    "start": "185720",
    "end": "193220"
  },
  {
    "text": "[NOISE], um, for prediction, and then talk about control . [NOISE] Um, and the kind of",
    "start": "193220",
    "end": "198650"
  },
  {
    "start": "198000",
    "end": "266000"
  },
  {
    "text": "the key idea that we're gonna start to talk about in this case is that, we're gonna be representing the state action value,",
    "start": "198650",
    "end": "205070"
  },
  {
    "text": "uh, value function with a parameterized function. [NOISE] So, we can think of now as having a function where we input a state,",
    "start": "205070",
    "end": "213230"
  },
  {
    "text": "and instead of looking up in a table to see what its value is, instead we're gonna have some parameters here.",
    "start": "213230",
    "end": "218510"
  },
  {
    "text": "So, this is, this could be a deep neural network. [NOISE] This could be,",
    "start": "218510",
    "end": "224849"
  },
  {
    "text": "you know, um, [NOISE] a polynomial. [NOISE] It can be all sorts of different function approximations but the key here",
    "start": "224850",
    "end": "232459"
  },
  {
    "text": "is that we have some parameters that allow us to say for any input state, what is the value.",
    "start": "232460",
    "end": "238504"
  },
  {
    "text": "And just like we saw before, we're gonna both sort of go back and forth between thinking of there being a state value function,",
    "start": "238505",
    "end": "245120"
  },
  {
    "text": "and a, a state action value function. [NOISE] Um, and the key thing now is that we have these parameters.",
    "start": "245120",
    "end": "250370"
  },
  {
    "text": "[NOISE] We're mostly gonna be talking about those parameters in terms of w. [NOISE] So, you can generally think of w as just a vector.",
    "start": "250370",
    "end": "257345"
  },
  {
    "text": "Um, [NOISE] uh, with that vector could [NOISE] be the parameters of a deep neural network or it could be something much simpler.",
    "start": "257345",
    "end": "263570"
  },
  {
    "text": "[NOISE] So, again, you know,",
    "start": "263570",
    "end": "268770"
  },
  {
    "start": "266000",
    "end": "301000"
  },
  {
    "text": "why do we wanna do this and sort of what are the forms of approximations we might start to think about? So, we just don't wanna have explicitly store",
    "start": "268770",
    "end": "275720"
  },
  {
    "text": "learn for every individual state action pair. [NOISE] So, we don't have to do that in terms of learning the dynamics model,",
    "start": "275720",
    "end": "281195"
  },
  {
    "text": "you don't have to do that in terms of a value function, or state action value function or even in terms of a policy.",
    "start": "281195",
    "end": "286670"
  },
  {
    "text": "[NOISE] We're gonna need to be able to generalize, so that we can figure out that, our agents, our algorithms can figure out good policies for,",
    "start": "286670",
    "end": "293705"
  },
  {
    "text": "um, sort of these enormous state spaces and action spaces. [NOISE] And so we need these compact representations.",
    "start": "293705",
    "end": "299240"
  },
  {
    "text": "[NOISE] So, once we do this we're gonna get a multiple different benefits.",
    "start": "299240",
    "end": "304789"
  },
  {
    "start": "301000",
    "end": "603000"
  },
  {
    "text": "There would also gonna incur potential problems as well. So, we're gonna reduce the memory that we need to store all of these things.",
    "start": "304790",
    "end": "310550"
  },
  {
    "text": "We're gonna reduce the computation needed and we might be able to reduce the experience. [NOISE] And so what I mean by that there is, um,",
    "start": "310550",
    "end": "317750"
  },
  {
    "text": "how much data does our agent need to collect in order to learn to make good decisions. So, this is really a notion of sort of how much data is needed.",
    "start": "317750",
    "end": "325880"
  },
  {
    "text": "[NOISE] Now, I just wanna highlight here that,",
    "start": "325880",
    "end": "335085"
  },
  {
    "text": "um, you know, there can be really bad, it would be really bad approximations. UM, [NOISE] and those can be great in terms of not needing a lot of data,",
    "start": "335085",
    "end": "342620"
  },
  {
    "text": "and not needing a lot of computation, and not need a lot of memory, [NOISE] but they may just not allow you to represent very good policies.",
    "start": "342620",
    "end": "348380"
  },
  {
    "text": "[NOISE] Um, so these are, these choices of representation or defining sort of hypothesis classes.",
    "start": "348380",
    "end": "355265"
  },
  {
    "text": "They're defining spaces over which you couldn't represent policies and value functions, and so you couldn't,",
    "start": "355265",
    "end": "361115"
  },
  {
    "text": "there's gonna be sort of a bias-variance trade-off here, um, and add a function approximation trade-off, in the sense that, if you have a very small representation,",
    "start": "361115",
    "end": "368735"
  },
  {
    "text": "you're not gonna need very much data to learn to fit it, but then it's also not gonna have very good capacity in terms of representing complicated value functions or policies.",
    "start": "368735",
    "end": "377390"
  },
  {
    "text": "[NOISE] Um, so, as a simple example, we could assume that our agent is always in the same state all the time.",
    "start": "377390",
    "end": "383449"
  },
  {
    "text": "You know, all video game frames are always identical, [NOISE] and that's a really compressed representation,",
    "start": "383450",
    "end": "389215"
  },
  {
    "text": "um, you know, uh, we only have one state, [NOISE] but it's not gonna allow us to learn to make different decisions in different parts of the game.",
    "start": "389215",
    "end": "395360"
  },
  {
    "text": "So, it's not gonna allow us to achieve high reward. So, there's going to generally be a trade-off between",
    "start": "395360",
    "end": "400445"
  },
  {
    "text": "the capacity of the representation we choose, so sort of the representational capacity",
    "start": "400445",
    "end": "405889"
  },
  {
    "text": "[NOISE] versus all these other things",
    "start": "405890",
    "end": "413650"
  },
  {
    "text": "we would like versus memory, computation, and data. [NOISE] Others and always,",
    "start": "413650",
    "end": "422419"
  },
  {
    "text": "sometimes one gets lucky and, and you can choose something that's very, very compact, [NOISE] and it's still sufficient to represent",
    "start": "422420",
    "end": "429190"
  },
  {
    "text": "the properties you need to represent it in order to make good decisions, [NOISE] but it's just worth thinking that often there's this explicit trade-off,",
    "start": "429190",
    "end": "435700"
  },
  {
    "text": "and we often don't know in advance what is a sufficient representational capacity in order to achieve high reward. Yeah?",
    "start": "435700",
    "end": "442740"
  },
  {
    "text": "[NOISE] Is this, um- What's your name. Oh, sorry, .  Is this more or less an orthogonal  consideration from",
    "start": "442740",
    "end": "449530"
  },
  {
    "text": "the bias-variance trade-off in inter-functional [NOISE] coordination? Yeah, and you can think of it as right,",
    "start": "449530",
    "end": "455100"
  },
  {
    "text": "the best question is whether this is an orthogonal trade-off to sort of bias-variance trade off? [NOISE] Um, can think of it as related,",
    "start": "455100",
    "end": "460640"
  },
  {
    "text": "i- if you choose a really restricted representational capacity, you're gonna have, um, a bias forever because you're just not gonna be able to represent the true function.",
    "start": "460640",
    "end": "469100"
  },
  {
    "text": "[NOISE] Um, so it's, be- and they all have consuming, uh, a smaller variance for a long time because it's a smaller representation.",
    "start": "469100",
    "end": "474889"
  },
  {
    "text": "[NOISE] So, it's really didn't shift to, uh, related [NOISE] to that. If you take a machine learning and then, uh, talked about things like structural risk minimization,",
    "start": "474890",
    "end": "481430"
  },
  {
    "text": "[NOISE] and thinking about, um, how you choose your model class capacity versus how much data you have, in terms of minimizing your tests that are similar to that too.",
    "start": "481430",
    "end": "489230"
  },
  {
    "text": "[NOISE] So, you know, how do you trade-off in terms of capacity to generalize, um, [NOISE] versus the expressive power.",
    "start": "489230",
    "end": "497555"
  },
  {
    "text": "All right. So, a natural immediate question that we've started, I've started alluding to already is what function approximation are we going to use?",
    "start": "497555",
    "end": "505465"
  },
  {
    "text": "Um, there's a huge number of choices. Um, today we're only gonna start to talk about one particular set.",
    "start": "505465",
    "end": "511675"
  },
  {
    "text": "Um, but there's an enormous number probably most of the ones you can think of have been tried with reinforcement learning.",
    "start": "511675",
    "end": "517360"
  },
  {
    "text": "So, pretty much anything that you could do in supervised learning. You could also try as a function approximator for your value function, um,",
    "start": "517360",
    "end": "524199"
  },
  {
    "text": "could be neural networks or deep decision trees or nearest neighbors, um, wavelet bases, lots of different things.",
    "start": "524200",
    "end": "530440"
  },
  {
    "text": "Um, what we're gonna do in this class is mostly focused on things that are differentiable.",
    "start": "530440",
    "end": "536080"
  },
  {
    "text": "Um, these are nice for a number of reasons. Um, but they tend to be a really nice smooth optimization properties.",
    "start": "536080",
    "end": "543790"
  },
  {
    "text": "So, they're easier to optimize for. That's one of the reasons we're gonna focus on them in this class. Those are not always the right choice.",
    "start": "543790",
    "end": "550450"
  },
  {
    "text": "Um, uh, can anybody give me example of where, for those of you that are familiar with decision trees,",
    "start": "550450",
    "end": "555805"
  },
  {
    "text": "where you might want a decision tree to represent either your value function or your policy?",
    "start": "555805",
    "end": "561140"
  },
  {
    "text": "Yeah. Yes. Uh, they tend to be highly interpretable.",
    "start": "563130",
    "end": "569665"
  },
  {
    "text": "You keep them simple [inaudible] us all with trees. All right. [inaudible] actually understand that could be helpful.",
    "start": "569665",
    "end": "576625"
  },
  {
    "text": "Exactly. So, what he just said is that, um, you know, depending on where you're-  how you're using this sort of reinforcement learning policy,",
    "start": "576625",
    "end": "583720"
  },
  {
    "text": "this may be interacting directly with people. So, let's say this is gonna be used as a decision support for doctors. In those cases, having a deep neural network may not be very effective in terms of",
    "start": "583720",
    "end": "592570"
  },
  {
    "text": "justifying why you want a particular treatment for a patient but if you use a decision tree, um, those tend to be highly interpretable.",
    "start": "592570",
    "end": "599950"
  },
  {
    "text": "Um, uh, well, depending on what features you use but often it's pretty highly interpretable and so that can be really helpful.",
    "start": "599950",
    "end": "606085"
  },
  {
    "start": "603000",
    "end": "676000"
  },
  {
    "text": "So, thinking about what function approximation you use often depends on how you're gonna use it later on.",
    "start": "606085",
    "end": "611695"
  },
  {
    "text": "Um, there's also been some really exciting work recently on sort of explainable deep neural networks where you can fit a deep neural network and then you can",
    "start": "611695",
    "end": "619089"
  },
  {
    "text": "fit a sort of a simpler function approximator on top. So, you could fit like, first fit your deep neural network and then try to fit a decision tree to it.",
    "start": "619090",
    "end": "626200"
  },
  {
    "text": "So, you try to get the kind of the best of both worlds. Super expressive, um, uh, function approximator and then still get the interpretability later.",
    "start": "626200",
    "end": "633690"
  },
  {
    "text": "Um, but it's worth thinking about sort of the application that you're looking at because different ones will be more appropriate in different cases.",
    "start": "633690",
    "end": "639900"
  },
  {
    "text": "Um, so, you know, probably the two most popular classes, um, these days and in RL in general are, um,",
    "start": "639900",
    "end": "646480"
  },
  {
    "text": "linear value function approximation and deep neuro networks. Um, and we're gonna start with linear value function approximation for two reasons.",
    "start": "646480",
    "end": "654535"
  },
  {
    "text": "One is that it's been sort of probably the most well studied function approximators in reinforcement learning but,",
    "start": "654535",
    "end": "660009"
  },
  {
    "text": "um, up to the last few years and second, is because you can think of deep neural networks as computing some really complicated set of",
    "start": "660010",
    "end": "666250"
  },
  {
    "text": "features that you're then doing linear function approximation over at least in a number of cases.",
    "start": "666250",
    "end": "671410"
  },
  {
    "text": "So, it's really provides a nice foundation for the next part anyway. All right.",
    "start": "671410",
    "end": "676584"
  },
  {
    "start": "676000",
    "end": "827000"
  },
  {
    "text": "So, we're gonna do a really quick review of gradient descent because we're gonna be using a ton over the next few days.",
    "start": "676585",
    "end": "681685"
  },
  {
    "text": "So, let's just think about any sort of general function J, um, which is a differentiable function of a parameter vector W. So,",
    "start": "681685",
    "end": "688645"
  },
  {
    "text": "you have some vector W, it's gonna be a set of linear week soon and our goal is to find the parameter,",
    "start": "688645",
    "end": "695230"
  },
  {
    "text": "um, W that minimizes our objective function. Haven't told you what the objective function is but we'll define it shortly.",
    "start": "695230",
    "end": "701125"
  },
  {
    "text": "Um, so, the gradient of J of W is we're gonna denote that. It's told to J of W and that's just us taking",
    "start": "701125",
    "end": "710230"
  },
  {
    "text": "the derivative of it with respect to each of the parameters inside of the vector",
    "start": "710230",
    "end": "717110"
  },
  {
    "text": "and so that would be the gradient, and so a gradient descent way of trying to optimize for a function, uh,",
    "start": "726420",
    "end": "733225"
  },
  {
    "text": "J of W would be to compute the derivative or the gradient of it and then to move your parameter vector in the direction of the gradient.",
    "start": "733225",
    "end": "741565"
  },
  {
    "text": "So, if your weights and generally we're going to always assume the weights are vector, um, uh,",
    "start": "741565",
    "end": "748990"
  },
  {
    "text": "we're gonna be equal to your previous value of the weights minus some learning",
    "start": "748990",
    "end": "754060"
  },
  {
    "text": "rate of the derivative of your objective function.",
    "start": "754060",
    "end": "761960"
  },
  {
    "text": "So, we're sort of just we're figuring out the derivative of our function and then we're gonna take a step size and that and move our,",
    "start": "763950",
    "end": "772195"
  },
  {
    "text": "our parameter weights over a little bit. Um, and then we're gonna keep going. So, if we do this enough times,",
    "start": "772195",
    "end": "779755"
  },
  {
    "text": "um, are we guaranteed to find a local optima?",
    "start": "779755",
    "end": "783500"
  },
  {
    "text": "Right. So, [OVERLAPPING] assume it yeah. So, they could be yeah, there may be some conditions o- on the learning rate.",
    "start": "785340",
    "end": "792610"
  },
  {
    "text": "Um,ah, but yes, if we do this enough we're guaranteed to get to a local optima. Um, no- notice this is local.",
    "start": "792610",
    "end": "801084"
  },
  {
    "text": "So, we started thinking about this in terms of the polis- uh, in terms of doing RL,",
    "start": "801085",
    "end": "806410"
  },
  {
    "text": "it's important to think about where are we gonna converge to and if we're gonna converge and I'll talk more about that throughout class.",
    "start": "806410",
    "end": "812680"
  },
  {
    "text": "So, this is gonna be sort of a local way for us to try to smoothly start changing our parameter representation at the value function in order to try to get to a better,",
    "start": "812680",
    "end": "821110"
  },
  {
    "text": "um, better approximation of it. Right. So, let's think",
    "start": "821110",
    "end": "828130"
  },
  {
    "start": "827000",
    "end": "911000"
  },
  {
    "text": "about how this would apply if we're trying to do policy evaluation. So again, policy evaluation is someone's giving you a policy.",
    "start": "828130",
    "end": "833890"
  },
  {
    "text": "They've given you a mapping of, um, first date what your action is and this could be,",
    "start": "833890",
    "end": "840685"
  },
  {
    "text": "it could be stochastic. So, it could be a mapping from states to a probability distribution over actions.",
    "start": "840685",
    "end": "849985"
  },
  {
    "text": "So, but someone's giving you a policy and what you wanna do is figure out what's the value of that policy.",
    "start": "849985",
    "end": "855265"
  },
  {
    "text": "What's the expected discounted sum of rewards you get by following that policy. So, let's assume for a second that,um,",
    "start": "855265",
    "end": "861639"
  },
  {
    "text": "we could quer- query a particular state and then an Oracle would just give us the value, the true value of the policy.",
    "start": "861640",
    "end": "867835"
  },
  {
    "text": "So, I, you know, I asked you like, you know what's the, what's the expected discounted sum of returns for starting in",
    "start": "867835",
    "end": "874330"
  },
  {
    "text": "this part of the room and trying to navigate towards the door under some policy and it says, okay the expected discounted number of steps it",
    "start": "874330",
    "end": "880209"
  },
  {
    "text": "would take you as on average like 30 for example. So, um, that would be a way that the Oracle",
    "start": "880210",
    "end": "886209"
  },
  {
    "text": "could return these pairs and so you get sort of this pair of S, V pie of S and then let's say given that,",
    "start": "886210",
    "end": "894250"
  },
  {
    "text": "we have all this data what we wanna do is we wanna fit a function. We wanna fit our parameterized function to represent all that data accurately.",
    "start": "894250",
    "end": "901840"
  },
  {
    "text": "So, we wanna find the best representation in our space, um, of the state value pairs.",
    "start": "901840",
    "end": "909529"
  },
  {
    "text": "So, if you frame this in the context of stochastic gradient descent, what we're gonna wanna do is just directly try to minimize our loss",
    "start": "910530",
    "end": "918279"
  },
  {
    "start": "911000",
    "end": "1082000"
  },
  {
    "text": "between the value that we're predicting and the true value. So, right now imagine someone's giving us",
    "start": "918280",
    "end": "924430"
  },
  {
    "text": "these true S value pairs and then we just want to fit a function approximators to fit that data.",
    "start": "924430",
    "end": "929575"
  },
  {
    "text": "So, it's really very similar to just doing sort of supervised learning. Um, and in general we're going to use",
    "start": "929575",
    "end": "935350"
  },
  {
    "text": "the mean squared loss and we'll return to that later. So, the mean squared loss in this case is that we're just going to compare",
    "start": "935350",
    "end": "941080"
  },
  {
    "text": "the true value to our approximate value and our approximate value here is parameterized by a vector of parameters.",
    "start": "941080",
    "end": "950755"
  },
  {
    "text": "Um, and we're just gonna do gradient descent. So, we're gonna compute the derivative of",
    "start": "950755",
    "end": "956829"
  },
  {
    "text": "our objective function and when we do compute the derivative of that then we're gonna take a step size and we're gonna do",
    "start": "956830",
    "end": "963250"
  },
  {
    "text": "stochastic gradient descent here which means we're just gonna sample the gradient. So, what I mean by that is that if we take the derivative of our objective function,",
    "start": "963250",
    "end": "973970"
  },
  {
    "text": "what we would get is we'd get something that looks like this. [NOISE]",
    "start": "974130",
    "end": "988975"
  },
  {
    "text": "And what we're gonna do is we're going to take, I'm going to use this as shorthand for updating the weights,",
    "start": "988975",
    "end": "994899"
  },
  {
    "text": "I'm gonna take a small step size in the direction of this as evaluated for one single point.",
    "start": "994900",
    "end": "1004030"
  },
  {
    "text": "So now, there's no expectation and this is just for a single point. [NOISE] So this is stochastic gradient descent where",
    "start": "1008930",
    "end": "1018780"
  },
  {
    "text": "we're not trying to compute the average of this gradient we're going to- we're trying to just sample this gradient,",
    "start": "1018780",
    "end": "1024270"
  },
  {
    "text": "evaluated at particular states. And what I've told you right now is that someone's given us these pairs of states and the true value function.",
    "start": "1024270",
    "end": "1031454"
  },
  {
    "text": "So you just take one of those pairs, compute the gradient at that point and then update your wave function and do that many many times.",
    "start": "1031455",
    "end": "1038384"
  },
  {
    "text": "And the nice thing is that the expected stochastic gradient descent is the same as the full gradient update.",
    "start": "1038385",
    "end": "1043725"
  },
  {
    "text": "Um, so this has nice properties in terms of converging. Yes a name first please. Um, so just to confirm, uh,",
    "start": "1043725",
    "end": "1050279"
  },
  {
    "text": "why is the expectation over policy and not over a set of states if you're saying, if SGD is a single state?",
    "start": "1050280",
    "end": "1056070"
  },
  {
    "text": "So this is over the distribution of states that you'd encounter onto this policy. Yeah, the  question was you know wh- why do it",
    "start": "1056070",
    "end": "1063259"
  },
  {
    "text": "over- what does the expectation mean in this case? In this case it's the expected distribution of- of states and values you'd get under this policy.",
    "start": "1063260",
    "end": "1069830"
  },
  {
    "text": "[NOISE] And that's, uh, it's an important point, will come up later. It'll come up again later in terms of sort of what is",
    "start": "1069830",
    "end": "1076320"
  },
  {
    "text": "the distribution of data that you're going to encounter under a policy. Of course, you know, in reality we don't actually have access to",
    "start": "1076320",
    "end": "1084360"
  },
  {
    "start": "1082000",
    "end": "1102000"
  },
  {
    "text": "an oracle to tell us the true value function for any state. Um, if we did we'd already know the true value function and we wouldn't need to do anything else.",
    "start": "1084360",
    "end": "1091245"
  },
  {
    "text": "Um, so what we're gonna do now is talk about how do we do model-free function approximation in",
    "start": "1091245",
    "end": "1096960"
  },
  {
    "text": "order to do prediction evaluation um ah without a model. Okay. So, if we go back to what we talked",
    "start": "1096960",
    "end": "1106140"
  },
  {
    "start": "1102000",
    "end": "1146000"
  },
  {
    "text": "about before we thought about EBV sort of Monte-Carlo style methods or these TD learning style methods um where we could adaptively learn",
    "start": "1106140",
    "end": "1114269"
  },
  {
    "text": "online a value function to represent the value of following a particular policy.",
    "start": "1114270",
    "end": "1119445"
  },
  {
    "text": "Um, and we did this using data. And we're going to do exactly the same thing now",
    "start": "1119445",
    "end": "1124470"
  },
  {
    "text": "except for we're gonna have to whenever we're doing this sort of update step of um do- updating our estimator with new data,",
    "start": "1124470",
    "end": "1131235"
  },
  {
    "text": "we're also going to have to do function approximation. So instead of just like um incrementally updating our table entry about the value of a state,",
    "start": "1131235",
    "end": "1138960"
  },
  {
    "text": "now we also have to re approximate our function whenever we get new data.",
    "start": "1138960",
    "end": "1143230"
  },
  {
    "text": "All right. So, when we start doing this we're going to have to choose a feature vector to represent the state.",
    "start": "1144230",
    "end": "1149820"
  },
  {
    "start": "1146000",
    "end": "1806000"
  },
  {
    "text": "Um, let me just ground out what this might mean. So let's imagine that we're thinking about a robot,",
    "start": "1149820",
    "end": "1155010"
  },
  {
    "text": "uh, and a robot that, well robots can have tons of really amazing sensors but let's imagine that it's old school and it just has a laser range finder.",
    "start": "1155010",
    "end": "1162870"
  },
  {
    "text": "Um, a lot of laser range finders used to basically be a 180 degrees um, and so you would get distance to",
    "start": "1162870",
    "end": "1169724"
  },
  {
    "text": "the first obstacle that you hit along all of this 180 degrees. So maybe here it's like two feet and this is 1.5 feet,",
    "start": "1169724",
    "end": "1179130"
  },
  {
    "text": "this is 7 feet. And this sort of gives you an approximation of what the wall looks",
    "start": "1179130",
    "end": "1184169"
  },
  {
    "text": "like for example. So here's our robot. It's giving- it's got a sensor on it which is",
    "start": "1184170",
    "end": "1190260"
  },
  {
    "text": "the laser range finder and it's telling us the distance towards the walls. And so what would this feature representation be in this case?",
    "start": "1190260",
    "end": "1196019"
  },
  {
    "text": "It would just be simply for each of these 180 degrees, what's the distance?",
    "start": "1196020",
    "end": "1201765"
  },
  {
    "text": "One degree, two degree. [NOISE] That'll be example of a feature representation.",
    "start": "1201765",
    "end": "1209115"
  },
  {
    "text": "Now, why? That sounds like a pretty good of it, maybe slightly primitive but generally a pretty good feature representation,",
    "start": "1209115",
    "end": "1215520"
  },
  {
    "text": "um, but what's the problem with that? Well, probably isn't mark off. So a lot of buildings have hallways that would say, you know,",
    "start": "1215520",
    "end": "1225045"
  },
  {
    "text": "on my left and my right there's a wall about two feet away um, and then there's nothing in front of me at least for",
    "start": "1225045",
    "end": "1231210"
  },
  {
    "text": "it perhaps out to my laser range finder, you would say you know out of rage. And that would be true for many different parts of",
    "start": "1231210",
    "end": "1237720"
  },
  {
    "text": "the same hallway and it will be true for many different hallways. And so there'd be a lot of partial aliasing. So this is a feature representation that probably is not",
    "start": "1237720",
    "end": "1244950"
  },
  {
    "text": "mark off um, but it might be reasonable. It might be a reasonable one on which to condition decisions,",
    "start": "1244950",
    "end": "1250230"
  },
  {
    "text": "maybe if you're in the middle of the hallway and that's what it looks like you was just wanna go forward. And that's an example of a type of feature representation.",
    "start": "1250230",
    "end": "1257610"
  },
  {
    "text": "And again just emphasizes the point that the choice of the feature representation will end up being really important.",
    "start": "1257610",
    "end": "1263760"
  },
  {
    "text": "Um, and for those of you who have taken through deep learning classes you've probably already heard this but it's kinda before deep learning.",
    "start": "1263760",
    "end": "1270090"
  },
  {
    "text": "There was often amo- a huge amount of work and there's still a huge amount of work on doing feature engineering to figure out what's the right way to write down",
    "start": "1270090",
    "end": "1276420"
  },
  {
    "text": "your state space so that you could make predictions or make decisions. Now, one of the nice things about deep neural networks is that it kind of pushes back",
    "start": "1276420",
    "end": "1284130"
  },
  {
    "text": "that feature selection problem so that you can use really high dimensional sensor input and then do less amount of hand tuning.",
    "start": "1284130",
    "end": "1290549"
  },
  {
    "text": "So what do I mean by hand tuning? Well, in this case, you know you could use the raw features about like how far you are to on each of these",
    "start": "1290550",
    "end": "1298200"
  },
  {
    "text": "a 180 degrees or you can imagine having higher level abstract features like trying to understand if there are corners.",
    "start": "1298200",
    "end": "1304905"
  },
  {
    "text": "So you could already have done some pre-processing on this raw data to figure out what features you think might be relevant if you're going to make decisions.",
    "start": "1304905",
    "end": "1312390"
  },
  {
    "text": "And the problem with doing that is that again if you- if you pick the wrong set you might not be able to make the decisions you want.",
    "start": "1312390",
    "end": "1318000"
  },
  {
    "text": "Yes, the name first please. Uh, could you please elaborate why this is not mark off, um, this [NOISE] ah kind of getting  the 180 degrees.",
    "start": "1318000",
    "end": "1325230"
  },
  {
    "text": "Is it ?  Yeah. So, the question is can I elaborate why this is not markup?",
    "start": "1325230",
    "end": "1331620"
  },
  {
    "text": "Um, I, if just have a 180 degrees for a robot, if you think about something say like a long hallway.",
    "start": "1331620",
    "end": "1340169"
  },
  {
    "text": "Let's say this is floor one. This is floor two, like n gates for example.",
    "start": "1340170",
    "end": "1346785"
  },
  {
    "text": "So if you have your little robot that's walking along and it's guiding its laser range finder,",
    "start": "1346785",
    "end": "1351825"
  },
  {
    "text": "to try and tell it to the distance to all of the things, um, you're not going to be able to distinguish",
    "start": "1351825",
    "end": "1357750"
  },
  {
    "text": "with that representation whether you're on floor one or floor two because your immediate sensor readings are gonna look identical.",
    "start": "1357750",
    "end": "1365490"
  },
  {
    "text": "And in fact you're not even able to tell where you are in that hallway from this hallway. Yeah? [inaudible] So, um, can we generalize that ah if we have partial aliasing then,",
    "start": "1365490",
    "end": "1376170"
  },
  {
    "text": "uh, we say its not Markov? Great question. [NOISE] ask, can we generalize to say",
    "start": "1376170",
    "end": "1381539"
  },
  {
    "text": "if we have partial aliasing it's not Markov? Yes. I mean, you could change the state representation to be mark off by including",
    "start": "1381540",
    "end": "1387899"
  },
  {
    "text": "the history um and so then each individual observation would be aliased but the whole state representation would not be but in general yes,",
    "start": "1387900",
    "end": "1395010"
  },
  {
    "text": "if you have a state representation for which there is, um, aliasing it's not mark-off.",
    "start": "1395010",
    "end": "1400245"
  },
  {
    "text": "Might still be that you could could still do pretty well with that representation or you might not but it's just good to be aware of in terms of the techniques one has applied. Good questions.",
    "start": "1400245",
    "end": "1409950"
  },
  {
    "text": "All right. So let's think about doing this with linear value function approximation. Um, so what do I mean by linear value function approximation?",
    "start": "1409950",
    "end": "1417240"
  },
  {
    "text": "It means that we're simply going to have a set of weights and we're going to.product this with um a- a set of features.",
    "start": "1417240",
    "end": "1424110"
  },
  {
    "text": "[NOISE] So you know maybe it's my 180 degrees sensor readings and then I'm just gonna have a weight for each of those 180 features.",
    "start": "1424110",
    "end": "1432345"
  },
  {
    "text": "Um, and we can either rep- use that to represent ah a value function or you can do that for a state action value function.",
    "start": "1432345",
    "end": "1439815"
  },
  {
    "text": "Um, those of you who are already thinking about state action value functions might notice that there's at least two ways to do that once you start getting into q just mentioned that briefly.",
    "start": "1439815",
    "end": "1448500"
  },
  {
    "text": "You could either have a separate weight vector for each action or you could put the action as sort of an additional um feature essentially, multiple different choices.",
    "start": "1448500",
    "end": "1458580"
  },
  {
    "text": "You get different forms of sharing. Okay? But right now we're just thinking about um er estimating the value of a particular policy.",
    "start": "1458580",
    "end": "1466455"
  },
  {
    "text": "So we're just going to think about values and we're gonna say that remember W is a vector and X is a vector.",
    "start": "1466455",
    "end": "1473879"
  },
  {
    "text": "Now X and S is just going to give us the features of that state. So it could be like the real state of the world is where the robot",
    "start": "1473880",
    "end": "1480030"
  },
  {
    "text": "is and the features you get out are those a 180 readings. So we're again going to focus on mean squared errors,",
    "start": "1480030",
    "end": "1486300"
  },
  {
    "text": "our objective function is this mean squared error. The difference between the values we're predicting and the true values.",
    "start": "1486300",
    "end": "1491985"
  },
  {
    "text": "And this is our weight update which is, uh we want to update our weight by a learning rate times the derivative of this function.",
    "start": "1491985",
    "end": "1499905"
  },
  {
    "text": "So what does this look like in the case of linear value function approximation? [NOISE] So what we're gonna do is we're just gonna take the derivative of J using",
    "start": "1499905",
    "end": "1507690"
  },
  {
    "text": "the fact that we know that this is actually X times W. Okay? So, what we're gonna get in this case is W- delta W is equal to 1.5 alpha to P pi of S",
    "start": "1507690",
    "end": "1523365"
  },
  {
    "text": "minus S W times X because the derivative of X times W with respect to W is X. Yes.",
    "start": "1523365",
    "end": "1536505"
  },
  {
    "text": "Is this expected value over all states or for a particular state? Great question, remind me your name one more time.",
    "start": "1536505",
    "end": "1542955"
  },
  {
    "text": " Yes. So the question is, is this is an expected value of all  states or particular state?",
    "start": "1542955",
    "end": "1548025"
  },
  {
    "text": "When we're doing the update of the W we're going to be evaluating this at one state. So we're gonna do this per each state, um,",
    "start": "1548025",
    "end": "1556395"
  },
  {
    "text": "tha- well, we're going to see different algorithms for it but um, generally we're gonna be doing stochastic gradient descent. So we're gonna be doing this at each state.",
    "start": "1556395",
    "end": "1562530"
  },
  {
    "text": "The expected value here you can think about is really over the state distribution sampled from this policy.",
    "start": "1562530",
    "end": "1570735"
  },
  {
    "text": "So if you were to execute this policy in your real MDP you would encounter some states.",
    "start": "1570735",
    "end": "1575850"
  },
  {
    "text": "And if you, um and we'll talk shortly more about like what that distribution looks like but that's the- we want to minimize",
    "start": "1575850",
    "end": "1583679"
  },
  {
    "text": "our error over all- over the state distribution we would encounter under that policy. They're good questions. Okay. So, if we look at this form, what does this look like?",
    "start": "1583680",
    "end": "1592485"
  },
  {
    "text": "It looks like we have a step size which we've seen before with TD learning. And then we have a prediction error which is the difference between the value function,",
    "start": "1592485",
    "end": "1601559"
  },
  {
    "text": "uh, the true value function and the value function we're predicting under estimator and then we have a feature value.",
    "start": "1601559",
    "end": "1606870"
  },
  {
    "text": "So that's one of the nice aspects of linear, uh, uh, linear value function approximation is that these updates form into this sort of",
    "start": "1606870",
    "end": "1614730"
  },
  {
    "text": "very natural notion of how far off were you from the true value weighed by the features.",
    "start": "1614730",
    "end": "1620370"
  },
  {
    "text": "Yeah? The question about the math  here so that you have the negative [inaudible]",
    "start": "1620370",
    "end": "1627900"
  },
  {
    "text": "the negative inside V Pi s hat.",
    "start": "1627900",
    "end": "1636120"
  },
  {
    "text": "So, does the- it should be a negative excess there with the negative [inaudible] outside as well?",
    "start": "1636120",
    "end": "1642390"
  },
  {
    "text": "We're going to push this into either, so the question is about just being careful about um the negatives they come out.",
    "start": "1642390",
    "end": "1648825"
  },
  {
    "text": "Um, yes you could push that negative out into here in general alpha is a constant so you can flip it and be positive or negative.",
    "start": "1648825",
    "end": "1656100"
  },
  {
    "text": "Generally, you're going to want your, um, if you're minimizing this is kinda be, ah, you're going to be subtracting this from the weights but",
    "start": "1656100",
    "end": "1661950"
  },
  {
    "text": "you just want to be careful of depending on how you're defining your alpha to make sure that you're taking gradient descent- gradient steps in the right direction. Okay.",
    "start": "1661950",
    "end": "1671190"
  },
  {
    "text": "It's a good question. Okay, so how would we do this, remembering again that we don't actually have access to the true value function?",
    "start": "1671190",
    "end": "1679560"
  },
  {
    "text": "Um, so we don't actually know, so in this equation, right? This assumes this is true, like this is if Oracle has given you the value of a state under that policy,",
    "start": "1679560",
    "end": "1689190"
  },
  {
    "text": "but of course we don't have access to that. Um, so what we're gonna do is sort of use the same types of ideas wi- as what we saw,",
    "start": "1689190",
    "end": "1695370"
  },
  {
    "text": "um, in Tabular learning, um, now with a value function approximation. So, the return which is the expected or",
    "start": "1695370",
    "end": "1703890"
  },
  {
    "text": "the return which is the sum of rewards from timestep t till the end of the episode, is an unbiased noisy sample of",
    "start": "1703890",
    "end": "1710669"
  },
  {
    "text": "the true expected return for the current state wherein on time step t. And so, we can think about doing Monte Carlo value function approximation",
    "start": "1710670",
    "end": "1718995"
  },
  {
    "text": "as really as if we're doing supervised learning on the set of state returned pairs. So now, what we're doing here,",
    "start": "1718995",
    "end": "1724980"
  },
  {
    "text": "is we're substituting in G_t. It's an estimate of the true value. [NOISE] So, we don't know what the true value is,",
    "start": "1724980",
    "end": "1737309"
  },
  {
    "text": "but, uh, we know that the, the Monte Carlo returned is an unbiased estimator, so we're gonna substitute that in.",
    "start": "1737310",
    "end": "1742440"
  },
  {
    "text": "[NOISE] Okay, so what does that mean if we're doing linear value function approximation? It means inside of our wait update,",
    "start": "1742440",
    "end": "1748440"
  },
  {
    "text": "we have a G here. [NOISE] So, we would take the state. We would take the sum of rewards on that episode.",
    "start": "1748440",
    "end": "1755280"
  },
  {
    "text": "So again, this can only be applied in episodic settings just like generally with Monte Carlo,",
    "start": "1755280",
    "end": "1760710"
  },
  {
    "text": "then we take the derivative and in this case that's just x, our features because we're using a linear value function",
    "start": "1760710",
    "end": "1766530"
  },
  {
    "text": "approximation and then on the last line, I'm just plugging in exactly what our, um, V hat estimator is.",
    "start": "1766530",
    "end": "1773820"
  },
  {
    "text": "So, we're comparing our return to our current estimator, um, and then we're multiplying it by our features.",
    "start": "1773820",
    "end": "1780315"
  },
  {
    "text": "And as usual, we have the problem that G might be a very noisy estimate of the return. Yes, the name first, please.",
    "start": "1780315",
    "end": "1785429"
  },
  {
    "text": " [NOISE] Can we differentiate first time and every time like before? Sort of. Do we differentiate first-time and every time visit, uh, like before?",
    "start": "1785430",
    "end": "1792840"
  },
  {
    "text": "[NOISE] Great question to ask. Do we, um, distinguish between first-time visit and every time visit? Yes. The same exact distinctions",
    "start": "1792840",
    "end": "1799320"
  },
  {
    "text": "apply to Monte Carlo up to, remember that applied before. [NOISE] So, [NOISE] I'm here,",
    "start": "1799320",
    "end": "1806055"
  },
  {
    "start": "1806000",
    "end": "2148000"
  },
  {
    "text": "I'm showing a first-visit variant of it, but you could also, could also do every visit. [NOISE] And it would have the same [NOISE] strengths and limitations as before.",
    "start": "1806055",
    "end": "1819274"
  },
  {
    "text": "Every visit is biased, asymptotically it's [NOISE] consistent. Okay, so what does the weights look like?",
    "start": "1819275",
    "end": "1824420"
  },
  {
    "text": "In this case, we would say weight is equal to the old weights plus",
    "start": "1824420",
    "end": "1829550"
  },
  {
    "text": "[NOISE] Alpha times G_t of s minus v,",
    "start": "1829550",
    "end": "1838200"
  },
  {
    "text": "uh, of sw, remembering that this is just x times w for that state,",
    "start": "1838480",
    "end": "1844679"
  },
  {
    "text": "[NOISE] times x of s. [NOISE] So,",
    "start": "1844680",
    "end": "1851910"
  },
  {
    "text": "it's very similar to what we saw before for Monte Carlo, um, uh, approximate Monte Carlo policy evaluation.",
    "start": "1851910",
    "end": "1858240"
  },
  {
    "text": "[NOISE] Um, what we do is we start off, in this case now instead o- of having a value function, we just have a set of weights, um,",
    "start": "1858240",
    "end": "1864825"
  },
  {
    "text": "which is gonna now be the zero vector to start. And we sample an episode, you have to sample all the way to the end of the episode using the policy, [NOISE] um,",
    "start": "1864825",
    "end": "1872640"
  },
  {
    "text": "and then we step through that episode and if it's the first visit to that state, then we compute the return from that state till the end of the episode,",
    "start": "1872640",
    "end": "1880875"
  },
  {
    "text": "and then we update our weights. Yeah? Um, just to check on  that, [NOISE] are you adding, uh,",
    "start": "1880875",
    "end": "1886590"
  },
  {
    "text": "the learning rate, uh, because of the mechanism, uh, reward? [NOISE] Considering that, uh,",
    "start": "1886590",
    "end": "1892665"
  },
  {
    "text": "question is about, um, the Alpha where, oh, in terms of negative versus positive?",
    "start": "1892665",
    "end": "1898664"
  },
  {
    "text": "Right. Each one [inaudible] gradient. Yeah. So, in general, this is gonna look like [NOISE] this.",
    "start": "1898665",
    "end": "1904799"
  },
  {
    "text": "I'm gonna be a little bit loose on those. Um, Alpha is gonna be a learning rate, that's, um, a choice.",
    "start": "1904800",
    "end": "1910890"
  },
  {
    "text": "Generally, we're gonna be, um, trying to minimize our objective function that we're gonna be reducing our weights, um, uh, and will need to be able, again,",
    "start": "1910890",
    "end": "1917880"
  },
  {
    "text": "be a little bit careful about how we pick Alpha over time, um, and, and this has been evaluated at each of the states that we encounter along the way.",
    "start": "1917880",
    "end": "1926490"
  },
  {
    "text": "[inaudible] and just to be, uh,",
    "start": "1926490",
    "end": "1933590"
  },
  {
    "text": "[NOISE] careful on step six, read again factor or just adding up of notice now?",
    "start": "1933590",
    "end": "1941545"
  },
  {
    "text": "Good question. Um, uh, on step six, um, uh, was it ?",
    "start": "1941545",
    "end": "1946730"
  },
  {
    "text": " sorry. said, um, \"Do we need to have a Gamma function?\" Um, it's a good question.",
    "start": "1946730",
    "end": "1952875"
  },
  {
    "text": "Um, in episodic RL, you can always get away with Gamma being one. Um, so if it's an episodic place,",
    "start": "1952875",
    "end": "1959250"
  },
  {
    "text": "Gamma can always equal one. It is also fine to include Gamma here. [NOISE] So here, generally in episodic cases, um,",
    "start": "1959250",
    "end": "1970725"
  },
  {
    "text": "you will set a Gamma being equal to one because one of the reasons why you set our, our Gamma to be less than one is to make sure",
    "start": "1970725",
    "end": "1977220"
  },
  {
    "text": "things are bounded in terms of their value function, but then the episodic case, it is always guaranteed to be bounded, um,",
    "start": "1977220",
    "end": "1983760"
  },
  {
    "text": "but it is also completely fine to include a Gamma here, yeah. [NOISE] So, I got a couple of questions about same point,",
    "start": "1983760",
    "end": "1990120"
  },
  {
    "text": "um, about this, this G, so when we do that, it seems like we'll and, uh,",
    "start": "1990120",
    "end": "1995205"
  },
  {
    "text": "sam- sampling G's that have reward- rewards over episodes of different lengths,",
    "start": "1995205",
    "end": "2000799"
  },
  {
    "text": "[NOISE] but, so doesn't that close their distribution without stationary and more variance?",
    "start": "2000800",
    "end": "2006754"
  },
  {
    "text": "This question [inaudible] there's a problem with the fact that, um, the returns you're taking are gonna be sums over different lengths.",
    "start": "2006755",
    "end": "2013490"
  },
  {
    "text": "[NOISE] It isn't. Um, so, uh, you're always trying to estimate the value of being in this state,",
    "start": "2013490",
    "end": "2020285"
  },
  {
    "text": "um, which itself under this policy. Um, and in episodic case,",
    "start": "2020285",
    "end": "2025445"
  },
  {
    "text": "you might encounter that state early on in the trajectory or late in the trajectory, and your, your value is exactly gonna be",
    "start": "2025445",
    "end": "2032045"
  },
  {
    "text": "averaged over whether you encountered early or late and one of the returns. So there's no problem with, um,",
    "start": "2032045",
    "end": "2038330"
  },
  {
    "text": "we're assuming all of your episodes are bounded, they have to be finite. So there has to be with probability,",
    "start": "2038330",
    "end": "2043850"
  },
  {
    "text": "one, you're episode has to end. If that is true, then, um, your, your rewards are always bounded,",
    "start": "2043850",
    "end": "2049504"
  },
  {
    "text": "and then you can always just average over this and that's fine. Sometimes you might encounter, um, a state really early in the trajectory in a lot of rewards,",
    "start": "2049505",
    "end": "2056179"
  },
  {
    "text": "other times you might encounter at the end and have very few rewards, [NOISE] um, and the value of interest the expectation over all of them.",
    "start": "2056180",
    "end": "2062210"
  },
  {
    "text": "[NOISE] Yeah? [NOISE] um, on this part of clarification,",
    "start": "2062210",
    "end": "2067700"
  },
  {
    "text": "so essentially is uplink, you're updating this little video approximation at the episode.",
    "start": "2067700",
    "end": "2073669"
  },
  {
    "text": "So, [inaudible]",
    "start": "2073670",
    "end": "2079129"
  },
  {
    "text": "And not just once as the velocitor is in. You're not just updating the weight once an episode many times, right? So, you look at all of the states you encountered in that episode and for each of those,",
    "start": "2079130",
    "end": "2087710"
  },
  {
    "text": "you update your weight vector. [NOISE] Which is equivalent of like generating",
    "start": "2087710",
    "end": "2092899"
  },
  {
    "text": "all the episodes and trying to feed them in a single, in a single-",
    "start": "2092900",
    "end": "2097970"
  },
  {
    "text": "[inaudible] Well, what if we did this in a batch setting, so what if you generate it all every data and then afterwards tried to fit it.",
    "start": "2097970",
    "end": "2105665"
  },
  {
    "text": "So this is an incremental approach to doing that, um, and now ends up converging to the same thing. Question, yeah?",
    "start": "2105665",
    "end": "2112160"
  },
  {
    "text": "Um, [NOISE] I'm just wondering, do we include Gamma, should be Gamma our j minus t slowly start discounting,",
    "start": "2112160",
    "end": "2119974"
  },
  {
    "text": "um, like going forwards. J minus t, oh, yeah.",
    "start": "2119975",
    "end": "2125240"
  },
  {
    "text": "Uh-huh. [NOISE] Catch. [NOISE]",
    "start": "2125240",
    "end": "2133119"
  },
  {
    "text": "Again, you shouldn't need a Gamma in this case. [NOISE] So, in general in this case there should be",
    "start": "2133120",
    "end": "2139930"
  },
  {
    "text": "probably knows that there'd be no Gamma from the episodic case. But it's good to be precise about these things.",
    "start": "2139930",
    "end": "2145870"
  },
  {
    "text": "Okay. All right. So, let's think about this for a particular example. Um, it turns out that when we",
    "start": "2145870",
    "end": "2153069"
  },
  {
    "start": "2148000",
    "end": "2635000"
  },
  {
    "text": "start to combine function approximation with making decisions, um, ah, [NOISE] and doing this sort of incremental update online,",
    "start": "2153070",
    "end": "2159280"
  },
  {
    "text": "things can start to go bad. Um, and there's, uh, um, and, and what I mean by that is that we may not converge and we may not converge to",
    "start": "2159280",
    "end": "2165850"
  },
  {
    "text": "places that we want to in terms of representing the optimal value function. So, there's a nice example, um,",
    "start": "2165850",
    "end": "2171820"
  },
  {
    "text": "when people are really starting to think a lot about function approximation in the early 1990s, um, uh,",
    "start": "2171820",
    "end": "2177190"
  },
  {
    "text": "Baird came up with this example where it can illustrate some of the challenges of doing function approximation when combining it with doing control and decision-making.",
    "start": "2177190",
    "end": "2185965"
  },
  {
    "text": "So, we're gonna introduce this example now. We're doing MC policy evaluation and then we'll see it a few times throughout class.",
    "start": "2185965",
    "end": "2192234"
  },
  {
    "text": "So, what does this example showing? So, in this example they're going to be two actions. So, a_1 is gonna be straight lines and those are all",
    "start": "2192235",
    "end": "2199029"
  },
  {
    "text": "going to deterministically go to what I'm going to call state S seven. And this is state S1, S2,",
    "start": "2199030",
    "end": "2205104"
  },
  {
    "text": "S3, S4, S5, S6. And what you can see inside of the bubbles there",
    "start": "2205104",
    "end": "2211750"
  },
  {
    "text": "is what its feature value representation is. So, remember I said that we would have a state and then we could write it down as,",
    "start": "2211750",
    "end": "2217300"
  },
  {
    "text": "um, a set of features. So, what does S1 look like? It looks like two, two,",
    "start": "2217300",
    "end": "2223329"
  },
  {
    "text": "three, four, five, six, seven. So, weight one is two,",
    "start": "2223330",
    "end": "2229269"
  },
  {
    "text": "um, and weight eight is one. So, what does S2 look like? S2 looks like zero to one,",
    "start": "2229270",
    "end": "2234850"
  },
  {
    "text": "two, three, four, five. S3 looks Like this.",
    "start": "2234850",
    "end": "2241700"
  },
  {
    "text": "And so on until we get to S7 which looks like this.",
    "start": "2243090",
    "end": "2249110"
  },
  {
    "text": "Okay.",
    "start": "2249690",
    "end": "2262240"
  },
  {
    "text": "So, S7 looks a little bit different than the rest of them. That is the feature representation of those states.",
    "start": "2262240",
    "end": "2268525"
  },
  {
    "text": "Now notice that it looks pretty similar to a tabular representation. In fact, there are more features than there are states.",
    "start": "2268525",
    "end": "2275380"
  },
  {
    "text": "So, there are only seven states here and there are eight features. That's completely possible, right?",
    "start": "2275380",
    "end": "2280960"
  },
  {
    "text": "Like your feature representation could be larger than the number of true states in the world. So, then we have, um,",
    "start": "2280960",
    "end": "2287109"
  },
  {
    "text": "action a_1 and action a_1 always takes us from any state to deterministically to state S7. And then we have action a_2 which is denoted by dot dot dot.",
    "start": "2287110",
    "end": "2295600"
  },
  {
    "text": "And what action a_2 does is, um, with probability one over six,",
    "start": "2295600",
    "end": "2302455"
  },
  {
    "text": "it takes you to state Si where i is n one to six.",
    "start": "2302455",
    "end": "2308260"
  },
  {
    "text": "So, basically uniformly spreads you across one of the first six states. There are only two actions.",
    "start": "2308260",
    "end": "2314710"
  },
  {
    "text": "Either you deterministlly go to state S7 or if you take the second action then you go to one of the first six states with equal probability.",
    "start": "2314710",
    "end": "2322675"
  },
  {
    "text": "And it's a pretty simple control problem because the reward is zero. Everywhere, for all actions.",
    "start": "2322675",
    "end": "2328900"
  },
  {
    "text": "So, the value function for this is zero because there's no rewards anywhere.",
    "start": "2328900",
    "end": "2334404"
  },
  {
    "text": "Um, and yet we can start to run into trouble in some cases. So, before we get to that part let's first just think about what,",
    "start": "2334405",
    "end": "2340615"
  },
  {
    "text": "um, like a Monte Carlo update would do. Um, and, and let's just imagine also that there's",
    "start": "2340615",
    "end": "2346300"
  },
  {
    "text": "some additional small probability here that from S7 that we actually go to a terminal state.",
    "start": "2346300",
    "end": "2351430"
  },
  {
    "text": "So, um, like let's say, you know, with probability 0.999 we stay in S7 and or like",
    "start": "2351430",
    "end": "2357835"
  },
  {
    "text": "0.99 we stay in S7 and 0.01 we terminate. And, uh, this is a slight modification but I'm",
    "start": "2357835",
    "end": "2365260"
  },
  {
    "text": "doing that just so we can do it for the Monte Carlo case. So, we can think of episodes ending. So, if you're in state one through six you can",
    "start": "2365260",
    "end": "2372250"
  },
  {
    "text": "either go to S7 or you can stay in states one through six. If you're an S7, um, you can either go to states one through six.",
    "start": "2372250",
    "end": "2378190"
  },
  {
    "text": "You can stay in S7 or you can terminate. All Right. So, what then- what might an episode look like in this case?",
    "start": "2378190",
    "end": "2383200"
  },
  {
    "text": "So, let's imagine that we are in state S1. We took action a_1, that deterministically gets us to state S7.",
    "start": "2383200",
    "end": "2389799"
  },
  {
    "text": "Actually before I do that, I'll specify we got zero reward. Rewards was zero. We went to S7.",
    "start": "2389800",
    "end": "2396025"
  },
  {
    "text": "We took action a_1. We got zero reward. We stayed in S7.",
    "start": "2396025",
    "end": "2401785"
  },
  {
    "text": "We took action a_1. We got zero reward and then we terminates. That's our episode. Okay. So, now",
    "start": "2401785",
    "end": "2410109"
  },
  {
    "text": "we can think about what our Monte Carlo update would be. So, our Monte Carlo update in this case would",
    "start": "2410110",
    "end": "2415914"
  },
  {
    "text": "be let's start with state S1 and try to do the Monte Carlo update. So, for state S1 the return is what?",
    "start": "2415915",
    "end": "2424210"
  },
  {
    "text": "Zero. Zero. So, the return is zero. Um, what is x? Um, I should tell you.",
    "start": "2424210",
    "end": "2431815"
  },
  {
    "text": "So, let's start with initializing all of our weights to be one. So, what is our initial estimate of the value function of state S1?",
    "start": "2431815",
    "end": "2441490"
  },
  {
    "text": "[inaudible]",
    "start": "2441490",
    "end": "2446890"
  },
  {
    "text": "How many? So, it's all of the weights are one. The state S1 representation is 200013.",
    "start": "2446890",
    "end": "2456040"
  },
  {
    "text": "That's right. Okay. So, and that's just equal to our, ah, X times W. Okay.",
    "start": "2456040",
    "end": "2466704"
  },
  {
    "text": "So, then what does our update look like and of course I would have to tell you what alpha is. So, let's say alpha is equal to 0.5.",
    "start": "2466705",
    "end": "2472195"
  },
  {
    "text": "So, what our weights are gonna- our change in the weights is gonna be equal to 0.5 times 0 minus 3 times our feature vector for x.",
    "start": "2472195",
    "end": "2483085"
  },
  {
    "text": "Our feature vector for x is to 20001. So, that means that we're gonna get simply minus 1.5",
    "start": "2483085",
    "end": "2492055"
  },
  {
    "text": "times 20001 minus 3 times minus 1.5.",
    "start": "2492055",
    "end": "2499809"
  },
  {
    "text": "One, two, three, four, five, six. So, notice this is gonna give us an update for every single weight but",
    "start": "2499810",
    "end": "2508180"
  },
  {
    "text": "it's only gonna give us an update for the weights that are non-zero in this particular state, which is the first weight and weight eight.",
    "start": "2508180",
    "end": "2515365"
  },
  {
    "text": "And so then if we were to actually get the new weights, so now we're going to have w is equal to w plus delta",
    "start": "2515365",
    "end": "2521770"
  },
  {
    "text": "w. Then our new representation would be minus two,",
    "start": "2521770",
    "end": "2526825"
  },
  {
    "text": "one, two, three, four, five, six minus 0.5.",
    "start": "2526825",
    "end": "2531770"
  },
  {
    "text": "So, that would be one update of Monte Carlo for the first state.",
    "start": "2533310",
    "end": "2538645"
  },
  {
    "text": "Now you would do this for every single state in that episode. Say, you would then do it for the first time you",
    "start": "2538645",
    "end": "2543910"
  },
  {
    "text": "see it and the algorithm I've defined before. So, we'd next to this for state S7 as well, where the return would also be zero but the value would be something different,",
    "start": "2543910",
    "end": "2551875"
  },
  {
    "text": "so we would get a different, um, well actually in this particular case the value is also three.",
    "start": "2551875",
    "end": "2557620"
  },
  {
    "text": "Um, it depends on if you've already updated your w then your, your value will already be different. Yeah.",
    "start": "2557620",
    "end": "2563440"
  },
  {
    "text": "So, we're doing SGD per state not per episode. questions is are we doing SGD  per episode or state?",
    "start": "2563440",
    "end": "2570430"
  },
  {
    "text": "We do it per state. Yeah. In the previous slide where we had before every state- ev- every encounter,",
    "start": "2570430",
    "end": "2579369"
  },
  {
    "text": "does that mean that- For every- for every first visit in that episode. So, yeah. And it's within that specific-",
    "start": "2579370",
    "end": "2586150"
  },
  {
    "text": "if so then you go to a new episode that would be S7. question is about through this first visit,",
    "start": "2586150",
    "end": "2592299"
  },
  {
    "text": "we basically  step along that episode similar to what we did with Monte Carlo before and the first time we are encountering state in that episode",
    "start": "2592300",
    "end": "2598329"
  },
  {
    "text": "we update the weights using its return. And when we do that for every single unique state and that episode the first time we see it.",
    "start": "2598330",
    "end": "2605005"
  },
  {
    "text": "And then after all of that we'd get a new episode. Okay. All right.",
    "start": "2605005",
    "end": "2610615"
  },
  {
    "text": "So, this is what would happen. Um, and you can see that the changes can be fairly large",
    "start": "2610615",
    "end": "2615640"
  },
  {
    "text": "because we're comparing like the full return to our value function. Um, it depends of course on what our alpha,",
    "start": "2615640",
    "end": "2621085"
  },
  {
    "text": "alpha is an alpha can change over time. And generally we'll want alpha to change over time in order to get convergence.",
    "start": "2621085",
    "end": "2626470"
  },
  {
    "text": "Um, this gives an example of sort of what Monte Carlo update would look like in this case with linear value function approximator.",
    "start": "2626470",
    "end": "2633079"
  },
  {
    "text": "Okay. So, a natural question might be, um, does this do anything reasonable?",
    "start": "2633270",
    "end": "2638964"
  },
  {
    "start": "2635000",
    "end": "3043000"
  },
  {
    "text": "Are we guaranteed that this is gonna converge to the right thing? Um, and what does the right thing mean here?",
    "start": "2638965",
    "end": "2644230"
  },
  {
    "text": "Um, we're constrained by our linear value function approximator. So, we're gonna say are we gonna converge to sort of like",
    "start": "2644230",
    "end": "2649900"
  },
  {
    "text": "the best thing in our linear value function approximator. Okay. Before we do this let's just talk for a second about,",
    "start": "2649900",
    "end": "2656155"
  },
  {
    "text": "um, the distribution of states and how that influences the result. So, if you think back for",
    "start": "2656155",
    "end": "2661170"
  },
  {
    "text": "maybe the first or second lecture we talked about the relationship between, um, Markov processes, Markov reward processes,",
    "start": "2661170",
    "end": "2667920"
  },
  {
    "text": "and Markov decision processes. And we said that once you define a particular policy, then your Markov decision process is actually a Markov reward process.",
    "start": "2667920",
    "end": "2676335"
  },
  {
    "text": "Where you can think of it as, um, a chain where the next state is determined by your dynamics model,",
    "start": "2676335",
    "end": "2682575"
  },
  {
    "text": "where you only use the action according to your policy. So, if you run that,",
    "start": "2682575",
    "end": "2688075"
  },
  {
    "text": "if you run your sort of Markov chain defined by an MDP with a particular policy, you will eventually converge to a probability distribution over states.",
    "start": "2688075",
    "end": "2696100"
  },
  {
    "text": "And that distribution overstates is called the stationary distribution. It's a probability distribution its sayings are like",
    "start": "2696100",
    "end": "2702250"
  },
  {
    "text": "what percentage of the time you're going to be in state one, on average versus state two et cetera. Has to sum to one because it's a probability distribution.",
    "start": "2702250",
    "end": "2709660"
  },
  {
    "text": "You always have to be in some state and it satisfies a balanced equation. So, it says that the probability distribution over states before,",
    "start": "2709660",
    "end": "2718870"
  },
  {
    "text": "um, I summed- yeah, I guess.",
    "start": "2718870",
    "end": "2724810"
  },
  {
    "text": "Let me just flip this. I think it's a little bit easier to, to think about it the other way around.",
    "start": "2724810",
    "end": "2729800"
  },
  {
    "text": "You've got, um, d of S prime is equal to sum over S sum over a.",
    "start": "2732090",
    "end": "2738775"
  },
  {
    "text": "We're just doing the sum over a right now so that we can be sure that, um, we allow ourselves to have stochastic policies.",
    "start": "2738775",
    "end": "2746980"
  },
  {
    "text": "So, we look at all the actions that we could take under the current state. And then we look at where we could transition to you on the next state.",
    "start": "2746980",
    "end": "2754160"
  },
  {
    "text": "So, we're in some distribution over states. We think of all the actions we could take from each of those states,",
    "start": "2756420",
    "end": "2762895"
  },
  {
    "text": "where we might transition to. And then that gives us a new distribution over states S prime.",
    "start": "2762895",
    "end": "2768610"
  },
  {
    "text": "And those two have to be identical. So, um, this is often also thought about in terms of",
    "start": "2768610",
    "end": "2774730"
  },
  {
    "text": "a mixing property when your Markov chain has run for long enough. Um, this balance equation will eventually hold and this is just that",
    "start": "2774730",
    "end": "2781270"
  },
  {
    "text": "your distribution over states on the previous time step has to be exactly the same as your distribution over states on the next time step after this process is fully mixed.",
    "start": "2781270",
    "end": "2789895"
  },
  {
    "text": "And it's just telling you on average, you know, how much time are you spending in, in, um, what's the probability on",
    "start": "2789895",
    "end": "2795460"
  },
  {
    "text": "any particular time step you're gonna be in a particular state. This is not telling us how long it takes for this process to occur.",
    "start": "2795460",
    "end": "2801730"
  },
  {
    "text": "So, this depends a lot on the underlying dynamics of the system. So, it might be that this takes millions of steps",
    "start": "2801730",
    "end": "2808869"
  },
  {
    "text": "until you reach the stationary distribution or it might mix pretty quickly, it depends on the properties of your transition matrix,",
    "start": "2808870",
    "end": "2815230"
  },
  {
    "text": "um, under the policy. I'm not gonna get into any of that in this class. Um, it's just important to know that you can't- it's not like you can just wait",
    "start": "2815230",
    "end": "2822625"
  },
  {
    "text": "a 100 steps and definitely you are going to be in the stationary distribution that depends on the problem. Yeah. Have there been any proof of-",
    "start": "2822625",
    "end": "2828400"
  },
  {
    "text": "[inaudible] meaning. Yeah. Have there been any proof of [inaudible]",
    "start": "2828400",
    "end": "2835265"
  },
  {
    "text": "Any proven bounds on the mixing time of this type of Monte Carlo methods. Not that I know of. There might be some.",
    "start": "2835265",
    "end": "2840650"
  },
  {
    "text": "Um, [NOISE] it's a really tricky issue, often, because you don't know how long it will take to get to this,",
    "start": "2840650",
    "end": "2845660"
  },
  {
    "text": "sort of, stationary distribution. There is a really cool paper that just came out in like, a month ago at [inaudible] , um,",
    "start": "2845660",
    "end": "2850790"
  },
  {
    "text": "that talks about how, when we're thinking about of- policy evaluation, which we'll talk more about later today.",
    "start": "2850790",
    "end": "2856280"
  },
  {
    "text": "[NOISE] Um, instead of thinking about, um, superstep, um, ratios, or whether",
    "start": "2856280",
    "end": "2862070"
  },
  {
    "text": "you'll be taking a certain action and a certain policy or not. You can think about these stationary distributions, and the difference between them, in different policies.",
    "start": "2862070",
    "end": "2869300"
  },
  {
    "text": "Problem is, you often don't know how long, and whether your data has got to that stationary distribution. So, would also be really nice if there were easy test to tell if this was true.",
    "start": "2869300",
    "end": "2876875"
  },
  {
    "text": "That's also really hard to know. Yeah. Uh sorry, [inaudible]. And it's.",
    "start": "2876875",
    "end": "2882570"
  },
  {
    "text": "Yes. [LAUGHTER] Um, [inaudible] Why isn't it [inaudible]. Ah, yes.",
    "start": "2882580",
    "end": "2889370"
  },
  {
    "text": "So, question is about, uh. So, um,  I, sort of, gave a long what As when you gave a long prelude about saying, like,",
    "start": "2889370",
    "end": "2895640"
  },
  {
    "text": "that things  might not converge, but everything looked fine there. We're gonna go into that bar. Yes, and we're gonna talk about the fact that, actually, in the on policy setting where we're just doing policy evaluation.",
    "start": "2895640",
    "end": "2903394"
  },
  {
    "text": "Everything's gonna be fine. It's only when we get into the control case, um, where we're gonna be using data from one policy to estimate the value of another,",
    "start": "2903395",
    "end": "2911615"
  },
  {
    "text": "where in this example and many others, things start to go right. So, we'll use this as a running example, but right now,",
    "start": "2911615",
    "end": "2916910"
  },
  {
    "text": "there's no reason for you to believe this is pathological. Okay. So this is the stationary distribution.",
    "start": "2916910",
    "end": "2923315"
  },
  {
    "text": "And then, the convergence guarantees are related to that. Okay. So what we're gonna do is to find the mean squared error of our linear value function approximator,",
    "start": "2923315",
    "end": "2930845"
  },
  {
    "text": "with respect to the stationary distribution. Why is this reasonable? Well, because you probably care more about",
    "start": "2930845",
    "end": "2936740"
  },
  {
    "text": "your function approximated error in states that you visit a lot. There's a state that's really, really rare, probably it's okay to have bigger error there.",
    "start": "2936740",
    "end": "2943085"
  },
  {
    "text": "You want your overall mean squared error to be defined on that stationary distribution. [NOISE] So, this is the mean squared,",
    "start": "2943085",
    "end": "2950225"
  },
  {
    "text": "um, sort of, value prediction error. Um, and it compares what we predict versus the true value,",
    "start": "2950225",
    "end": "2956060"
  },
  {
    "text": "um, weighed by this distribution of states. And what we're assuming for right now, is that the approximation we're using is a linear value function approximator.",
    "start": "2956060",
    "end": "2963380"
  },
  {
    "text": "[NOISE] Um, let me just note, for historical reasons that, um, John Tsitsiklis and Ben Van Roy.",
    "start": "2963380",
    "end": "2969140"
  },
  {
    "text": "John is a, um, MIT, ha- um, I had the pleasure of him teaching me probability, which was great. And then, um, Ben Van Roy is here.",
    "start": "2969140",
    "end": "2975440"
  },
  {
    "text": "Um, and was one of, I think John's, uh, PhD students for postdocs. Anyway, they, um, in about 1997,",
    "start": "2975440",
    "end": "2981950"
  },
  {
    "text": "people were getting really interested, in whether or not, when you combine function approximation with, um, reinforcement learning, what happened,",
    "start": "2981950",
    "end": "2988640"
  },
  {
    "text": "and whether things were good or bad. And- and they're responsible for, um, this nice analysis. [NOISE] So, let's assume we have a linear value function approximator.",
    "start": "2988640",
    "end": "2996670"
  },
  {
    "text": "What you can prove is that, if you do Monte Carlo policy evaluation, linear value function approximators,",
    "start": "2996670",
    "end": "3002610"
  },
  {
    "text": "gonna converge to the wage which have the minimum mean squared error possible. Just, kind of, best you could hope for.",
    "start": "3002610",
    "end": "3008515"
  },
  {
    "text": "So, um, this is saying the limit as you have lots and lots of data. Um, ah then, an- and you run this many, many,",
    "start": "3008515",
    "end": "3015610"
  },
  {
    "text": "many times, um, then you're, kind of, just converge to the, the best weights possible. Now, this air might not be zero,",
    "start": "3015610",
    "end": "3022150"
  },
  {
    "text": "because it might be that your value function is not approximatable with your linears that have weights. But it's gonna do the best job they can.",
    "start": "3022150",
    "end": "3029530"
  },
  {
    "text": "It's just gonna find the best. It's, basically just doing the best linear regression that you can do, okay, on your, on your data.",
    "start": "3029530",
    "end": "3034900"
  },
  {
    "text": "[NOISE] So, it's good. That's, you know, sort of, a nice sanity check. It's gonna converge to the best thing that you could hope to do.",
    "start": "3034900",
    "end": "3041930"
  },
  {
    "text": "Um, some people have been asking about, uh, okay, well. I've knew me this, sort of, incremental method.",
    "start": "3042360",
    "end": "3048280"
  },
  {
    "start": "3043000",
    "end": "3228000"
  },
  {
    "text": "And maybe, in some cases, that's reasonable. And maybe, you're running like a customer recommendation system, and you're getting data over time,",
    "start": "3048280",
    "end": "3053500"
  },
  {
    "text": "and you're updating this estimator. But in some cases, you might have access to just a whole bunch of data from this policy.",
    "start": "3053500",
    "end": "3058840"
  },
  {
    "text": "And couldn't you just do that to, kind of, more directly. And the answer is, yes. So, this is often called Batch,",
    "start": "3058840",
    "end": "3064570"
  },
  {
    "text": "uh, Monte Carlo value function approximator. And the idea is that you have a whole bunch of episodes from a policy.",
    "start": "3064570",
    "end": "3070810"
  },
  {
    "text": "And the nice thing is, now you can just, kind of, analytically solve for the best approximator. So, again, our, our GI's are gonna be our unbiased sample of the true expected return.",
    "start": "3070810",
    "end": "3080454"
  },
  {
    "text": "And what you can do is, now, N is just our set of data.",
    "start": "3080455",
    "end": "3084530"
  },
  {
    "text": "This is really a linear regression problem. We're gonna use our, um, unbiased samples as estimates of the true value function.",
    "start": "3086130",
    "end": "3093940"
  },
  {
    "text": "We're just gonna find the weights that minimize this mean squared error. You take the derivative, you set it to zero. It's linear regression. You can solve for this analytically.",
    "start": "3093940",
    "end": "3101290"
  },
  {
    "text": "Um, so, a lil- just like how we talked about you could do policy evaluation analytically in some cases.",
    "start": "3101290",
    "end": "3107890"
  },
  {
    "text": "You can also do it analytically in this case for the linear value function approximator. Um, and note again, this is Monte Carlo.",
    "start": "3107890",
    "end": "3114250"
  },
  {
    "text": "We're not making any Markov assumptions. We're just using the full return. So, this is also fine in non-Markov environments.",
    "start": "3114250",
    "end": "3121575"
  },
  {
    "text": "Yeah. Can you speak to the  [inaudible] of this approach versus our, our [inaudible] that we use [inaudible] policy evaluation.",
    "start": "3121575",
    "end": "3131350"
  },
  {
    "text": "Yeah. [inaudible] Okay. So whe- wha- when we'd wanna do  this versus the other derivative one. This generally has higher computational cost.",
    "start": "3131350",
    "end": "3137950"
  },
  {
    "text": "X's can be a very large matrix. It may not be possible to even write down X, X. Um,",
    "start": "3137950",
    "end": "3143184"
  },
  {
    "text": "is all of your data in the, in the future representation form, and it requires taking a matrix inverse.",
    "start": "3143185",
    "end": "3148360"
  },
  {
    "text": "[NOISE] Um, so that may not be feasible, if you've got, you know, huge feature vectors, um, and,",
    "start": "3148360",
    "end": "3153535"
  },
  {
    "text": "you know, millions or billions of customers. [NOISE] Um, Facebook can't do this, um, and do this, er, er, directly.",
    "start": "3153535",
    "end": "3160240"
  },
  {
    "text": "Um, and also, you know, if you're doing this, you could do this, sort of, incrementally, but you're always refitting with all of your data.",
    "start": "3160240",
    "end": "3166120"
  },
  {
    "text": "Um, that also could be pretty expensive. So most of it it's about memory and computation. Um, if you have a really small case, it's probably a good thing to do.",
    "start": "3166120",
    "end": "3173305"
  },
  {
    "text": "And it also depends, whether you already have all your data or not. Yeah. [NOISE] You could also do some batch as well, right?",
    "start": "3173305",
    "end": "3179020"
  },
  {
    "text": "And that could help with convergence and not having your, um, radiant estimations fluctuating crazily.",
    "start": "3179020",
    "end": "3184390"
  },
  {
    "text": "[inaudible] So, this, of course there's an in-between. So, you could do, you don't have to. If you have access to quite a bit of data,",
    "start": "3184390",
    "end": "3189880"
  },
  {
    "text": "you could either do it completely incrementally or all batch, or you could do some batches. Um, [NOISE] and there's some nice, uh,",
    "start": "3189880",
    "end": "3196360"
  },
  {
    "text": "work by my colleagues. And also us showing that in, in terms of, um, [NOISE] reading into deep learning,",
    "start": "3196360",
    "end": "3202300"
  },
  {
    "text": "there can be a lot of benefits to doing, sort of, some amount of this analytical aspect over like, you know, a sub batch of data [NOISE] because,",
    "start": "3202300",
    "end": "3208675"
  },
  {
    "text": "um, you're, sort of, particularly when you get into TD learning. Or, kind of, proper getting information a lot more quickly than you are,",
    "start": "3208675",
    "end": "3214674"
  },
  {
    "text": "um, if you're just doing this, sort of, incremental slow update. Because, remember, in TD learning we're also, kind of, only doing like,",
    "start": "3214675",
    "end": "3219745"
  },
  {
    "text": "one step of backup compared to kinda propagating all of our information back, like we do with Monte Carlo. All right.",
    "start": "3219745",
    "end": "3227650"
  },
  {
    "text": "So now we're gonna get into temporal difference learning. Um, so remember in temporal difference learning, we're gonna use both bootstrapping and sampling.",
    "start": "3227650",
    "end": "3234325"
  },
  {
    "start": "3228000",
    "end": "3282000"
  },
  {
    "text": "Monte Carlo only uses sampling to approximate the expectation. [NOISE] TD learning also use bootstrapping,",
    "start": "3234325",
    "end": "3239830"
  },
  {
    "text": "because we don't have to wait till the end of an episode. Um, we just bootstrap and, like, combine in our estimated ah,",
    "start": "3239830",
    "end": "3245860"
  },
  {
    "text": "expected discounted sum of returns by using our current value function. So in this case,",
    "start": "3245860",
    "end": "3251589"
  },
  {
    "text": "what we used to do is, we would bootstrap. This is the bootstrapping part.",
    "start": "3251590",
    "end": "3256190"
  },
  {
    "text": "And our- what we often call our target is the reward plus gamma times the value of the next state.",
    "start": "3258630",
    "end": "3264160"
  },
  {
    "text": "And I remember the reason this is sampling is, um, we're sampling this to approximate our expectation.",
    "start": "3264160",
    "end": "3270550"
  },
  {
    "text": "We're not taking the full probability of S prime, given as a, and summing over all of S prime.",
    "start": "3270550",
    "end": "3276040"
  },
  {
    "text": "So before we did this and we represented everything as a table. [NOISE] Now, we wanna not do that anymore.",
    "start": "3276040",
    "end": "3282820"
  },
  {
    "start": "3282000",
    "end": "3460000"
  },
  {
    "text": "Um, so let me just- before we get into this, let me just remind us the three forms of like- of the,",
    "start": "3282820",
    "end": "3288580"
  },
  {
    "text": "the forms of approximation we're gonna have now. Now, we're gonna have a function approximation, bootstrapping and sampling.",
    "start": "3288580",
    "end": "3296900"
  },
  {
    "text": "But we're still on policy. What do I mean by that right now we're still just doing policy evaluation which means we're getting",
    "start": "3303420",
    "end": "3309670"
  },
  {
    "text": "data from the policy that we're trying to estimate its value. It turns out things are just way easier in that case when you're",
    "start": "3309670",
    "end": "3315250"
  },
  {
    "text": "on policy and perhaps they should be somewhat intuitive. It's quite similar to the supervised learning case.",
    "start": "3315250",
    "end": "3321010"
  },
  {
    "text": "Supervised learning, you're generally assuming your data is all IID or data is a little bit more complicated than that.",
    "start": "3321010",
    "end": "3326920"
  },
  {
    "text": "But our data's closer to that in this case because we have a single policy.",
    "start": "3326920",
    "end": "3332109"
  },
  {
    "text": "It's not sort of this non-stationary aspect that comes up when we start changing the policy. So, right now we have these three forms of approximation.",
    "start": "3332110",
    "end": "3338740"
  },
  {
    "text": "Function approximation, bootstrapping sampling but we're still on policy, mostly things are still going to be okay in terms of convergence.",
    "start": "3338740",
    "end": "3345355"
  },
  {
    "text": "So, what does that look like? We're again going to sort of think about doing the equivalent of supervised learning.",
    "start": "3345355",
    "end": "3351970"
  },
  {
    "text": "We'd like to just have our states and the Oracle tells us what the value is and fit our function instead of having the oracle,",
    "start": "3351970",
    "end": "3358240"
  },
  {
    "text": "we're going to use RTD estimates. So, we're going to use our word plus Gamma times our approximate value of the next state.",
    "start": "3358240",
    "end": "3365994"
  },
  {
    "text": "And that's going to form our estimate of what the true value is. Okay. And then we're going to find",
    "start": "3365995",
    "end": "3372670"
  },
  {
    "text": "the weights to minimize the mean squared error in that setting. So, if we do that,",
    "start": "3372670",
    "end": "3379765"
  },
  {
    "text": "what we can see is that if we're doing this with the linear case, we write this out it's just this is the TD target.",
    "start": "3379765",
    "end": "3388250"
  },
  {
    "text": "Just as a quick side note, I'm gonna use the words TD zero a lot. We haven't talked about it in this class but there's actually a whole bunch of",
    "start": "3389430",
    "end": "3396595"
  },
  {
    "text": "different slight variance of TD which often called TD Gamma. And so if you're reading the book that might be a little bit confusing and so I",
    "start": "3396595",
    "end": "3404260"
  },
  {
    "text": "just want to be clear that we're doing the TD zero variant, which is probably the most popular and there's a lot of other extensions.",
    "start": "3404260",
    "end": "3410050"
  },
  {
    "text": "For simplicity, we're just going to focus on TD zero for now. So, this is the TD target.",
    "start": "3410050",
    "end": "3415880"
  },
  {
    "text": "This is our current estimate and then we take the derivative. In this case that means that we're going to end up plugging in",
    "start": "3415980",
    "end": "3423235"
  },
  {
    "text": "our linear value function approximator for both our current state, the next state and looking at that difference weighed by the feature vector.",
    "start": "3423235",
    "end": "3432339"
  },
  {
    "text": "So, it should look almost identical to the Monte-Carlo update except for the fact that now we're bootstrapping.",
    "start": "3432340",
    "end": "3439285"
  },
  {
    "text": "So, instead of this being G versus being the G return of that we saw before for a particular episode,",
    "start": "3439285",
    "end": "3448390"
  },
  {
    "text": "now we're bootstrapping and we're getting the immediate reward plus the estimate of the discounted sum of rewards which we're using",
    "start": "3448390",
    "end": "3454299"
  },
  {
    "text": "our value function approximator to estimate. So, this is what the TD learning",
    "start": "3454300",
    "end": "3462310"
  },
  {
    "start": "3460000",
    "end": "3490000"
  },
  {
    "text": "linear value function approximation for policy evaluation algorithm looks like. And again we're gonna initialize our weight vector.",
    "start": "3462310",
    "end": "3468100"
  },
  {
    "text": "We're gonna sample a tuple and then we're gonna update our weights. So, we get to now update our weights after",
    "start": "3468100",
    "end": "3473200"
  },
  {
    "text": "every single tuple just like what we saw for TD learning. And what we can see here is that we're just plugging",
    "start": "3473200",
    "end": "3480070"
  },
  {
    "text": "in our particular estimator minus old estimator times X.",
    "start": "3480070",
    "end": "3485450"
  },
  {
    "text": "So, let's see what this looks like on the Baird example. So, again we have the same state feature representation as before.",
    "start": "3488100",
    "end": "3495250"
  },
  {
    "start": "3490000",
    "end": "4947000"
  },
  {
    "text": "State one is 200001. We still have zero words for everywhere.",
    "start": "3495250",
    "end": "3501775"
  },
  {
    "text": "Let's set our alpha equal to 0.5. Now we're in the case through or we can say that there is",
    "start": "3501775",
    "end": "3507160"
  },
  {
    "text": "no terminal state because TV learning can handle just continuous online learning.",
    "start": "3507160",
    "end": "3512440"
  },
  {
    "text": "So, we're just gonna assume that S7 always stays S7 under action A one.",
    "start": "3512440",
    "end": "3518454"
  },
  {
    "text": "So, A one is the solid line and A two is the dashed.",
    "start": "3518455",
    "end": "3524395"
  },
  {
    "text": "And we're gonna initialize our weights to 1111. And then let's look at this tuple.",
    "start": "3524395",
    "end": "3530619"
  },
  {
    "text": "So, just like the first tuple we saw before let's imagine we're in state one. We took action A one, we got a reward of zero when we went to state S seven.",
    "start": "3530620",
    "end": "3538375"
  },
  {
    "text": "So, why don't we take a minute and you calculate what the new weights would be after we do",
    "start": "3538375",
    "end": "3543789"
  },
  {
    "text": "that update and maybe compare back to the Monte Carlo case in terms of how much they have changed.",
    "start": "3543790",
    "end": "3550220"
  },
  {
    "text": "And feel free to talk to a neighbor. Let's make this a little bigger so it's easy to remember what S seven is.",
    "start": "3550860",
    "end": "3575870"
  },
  {
    "text": "All right. Have they moved a lot, a little? How much of the weight changed compared to what we saw with TD with Monte Carlo?",
    "start": "3632250",
    "end": "3639860"
  },
  {
    "text": "Seen some people indicates smaller. Yes, that's right. Okay. So, the- the- value- the initial value of the states this is gonna",
    "start": "3642780",
    "end": "3651505"
  },
  {
    "text": "be so for X of S one times W it's still gonna be three.",
    "start": "3651505",
    "end": "3656755"
  },
  {
    "text": "For X S prime S prime is seven. We look up what that is. This is also going to be three.",
    "start": "3656755",
    "end": "3664040"
  },
  {
    "text": "But now what we're gonna have, is we're gonna have Delta W is equal to Alpha times",
    "start": "3664230",
    "end": "3669700"
  },
  {
    "text": "zero plus 0.9 times three minus three. So, that's gonna be equal to Alpha times minus 0.3.",
    "start": "3669700",
    "end": "3680960"
  },
  {
    "text": "So, remember before it was actually minus three so it's a much bigger update.",
    "start": "3681120",
    "end": "3686590"
  },
  {
    "text": "And so then when we add that into our- our new weights, we're gonna move our weights but we're gonna move them much smaller than we saw before.",
    "start": "3686590",
    "end": "3694795"
  },
  {
    "text": "And this shouldn't be too surprising that sort of consistent with what we saw for Monte Carlo updating and TD learning.",
    "start": "3694795",
    "end": "3701695"
  },
  {
    "text": "TD learning is only updating these sort of smaller local changes like one state action or word next highest state.",
    "start": "3701695",
    "end": "3708310"
  },
  {
    "text": "The- the Monte Carlo is saying this is an episode full episodic return.",
    "start": "3708310",
    "end": "3715030"
  },
  {
    "text": "It's not bootstrapping. So, it's a no really the return from starting in state. S one is zero. So, we're gonna move it a lot more here.",
    "start": "3715030",
    "end": "3722800"
  },
  {
    "text": "It's saying, okay, I'm going to pretend that the return from status one is 2.7,",
    "start": "3722800",
    "end": "3727900"
  },
  {
    "text": "which is close to three, it's not zero. So, when we move our out weights over here,",
    "start": "3727900",
    "end": "3733450"
  },
  {
    "text": "the- the difference is gonna be much smaller than what we saw for Monte Carlo, which is similar to what we saw without function approximator.",
    "start": "3733450",
    "end": "3740065"
  },
  {
    "text": "All right. Whatever theoretical properties in this case, pretty good.",
    "start": "3740065",
    "end": "3745540"
  },
  {
    "text": "So, these are also, uh, if you look at TD zero, you're gonna converge the weights which aren't necessarily quite as good",
    "start": "3745540",
    "end": "3753070"
  },
  {
    "text": "as Monte Carlo but they're within a constant factor. So, they're going to be one over one minus Gamma of the minimum possible.",
    "start": "3753070",
    "end": "3762140"
  },
  {
    "text": "So, they're not quite as good as Monte Carlo but they're pretty good.",
    "start": "3762390",
    "end": "3767720"
  },
  {
    "text": "And depending on your, uh, discount factor and the function approximator possible,",
    "start": "3767850",
    "end": "3773844"
  },
  {
    "text": "this varies in terms of benefits. So, just to check our understanding for a second, I've put up both of these results.",
    "start": "3773844",
    "end": "3779890"
  },
  {
    "text": "So, one says the Monte Carlo policy evaluator converges to the minimum mean squared error one possible under",
    "start": "3779890",
    "end": "3785710"
  },
  {
    "text": "your linear value function approximators and TD zero converges to within one over one minus Gamma of this minimum error.",
    "start": "3785710",
    "end": "3793045"
  },
  {
    "text": "So, again what is this minimum error that says if you could pick any linear value function approximator,",
    "start": "3793045",
    "end": "3798954"
  },
  {
    "text": "uh, how good could that be at representing your true value of your policy?",
    "start": "3798955",
    "end": "3804235"
  },
  {
    "text": "So, let's take just another minute and this is a good one to talk to a neighbor about. If the value function approximator is the tabular representation,",
    "start": "3804235",
    "end": "3812454"
  },
  {
    "text": "what is the MSVE for both Monte Carlo and TD?",
    "start": "3812455",
    "end": "3817730"
  },
  {
    "text": "We guaranteed to converge to the optimal solution, optimal value for the true value for V of pi or not",
    "start": "3825240",
    "end": "3834410"
  },
  {
    "text": "and if it's not clear what the question is, feel free to ask. [NOISE]",
    "start": "3846450",
    "end": "3855160"
  },
  {
    "text": "So when you, when you say it's a tabular representation, do you mean that you are reducing the repre- representational capacity of the system?",
    "start": "3855160",
    "end": "3862690"
  },
  {
    "text": "Last week's session is, if I say it's tabular representation; what do I mean by that? I mean that there is one feature for each state,",
    "start": "3862690",
    "end": "3868450"
  },
  {
    "text": "it's like a one-hot encoding. So it's like the same representations we saw for the first few lectures, where like, for each state you have a table lookup for that value of that state.",
    "start": "3868450",
    "end": "3876910"
  },
  {
    "text": "[NOISE] Yeah? Can you please explain- And your name? ",
    "start": "3876910",
    "end": "3882040"
  },
  {
    "text": "Can you please explain what the barrel mains into? Like, if they're [inaudible] into.",
    "start": "3882040",
    "end": "3888840"
  },
  {
    "text": "Ah, good question. So TD0, I- everything we're seeing in uh, um question is about TD versus the TD0.",
    "start": "3888840",
    "end": "3894954"
  },
  {
    "text": "Everything we're talking about in class right now is TD0. I'm using that because um, there are multiple versions of TD.",
    "start": "3894955",
    "end": "3900850"
  },
  {
    "text": "And if you look at the book they'll have TD Lambda sometimes too. So I'm just making sure it's clear.",
    "start": "3900850",
    "end": "3905920"
  },
  {
    "text": "So if you read other resources you'll know which version of TD to know too.",
    "start": "3905920",
    "end": "3910220"
  },
  {
    "text": "Alright. Well first question. For the um, if we're using a tabular representation,",
    "start": "3911610",
    "end": "3917635"
  },
  {
    "text": "can we exactly represent the value of a policy? [inaudible]",
    "start": "3917635",
    "end": "3928840"
  },
  {
    "text": "Well if we're using the, if we- for every single state in the world, you can grab a different- different table at representation,",
    "start": "3928840",
    "end": "3935830"
  },
  {
    "text": "can we exactly represent the value of the policy? Yes. Yeah, we can.",
    "start": "3935830",
    "end": "3942385"
  },
  {
    "text": "So if you um, I, if you have one feature for every single state in the world, it's not going to be practical, we can't actually do this,",
    "start": "3942385",
    "end": "3949030"
  },
  {
    "text": "but you can exactly represent the value of that policy. How could you do this? You could simply run the policy for every single state.",
    "start": "3949030",
    "end": "3955450"
  },
  {
    "text": "Um, I do Monte Carlo returns an average and that would give you the true value of the state. So you could do it.",
    "start": "3955450",
    "end": "3961195"
  },
  {
    "text": "You could represent the expected discounted sum of returns by representing that in every single table. So that means that um,",
    "start": "3961195",
    "end": "3967645"
  },
  {
    "text": "this error is equal to 0 because um,",
    "start": "3967645",
    "end": "3975280"
  },
  {
    "text": "your functional capacity is sufficient to represent the value.",
    "start": "3975280",
    "end": "3980800"
  },
  {
    "text": "Let's go. So what we're seeing is in expectation, right,",
    "start": "3980800",
    "end": "3987280"
  },
  {
    "text": "the difference between what you're function [inaudible] actually gets to 0 but it's like any chart is going to be a bit different.",
    "start": "3987280",
    "end": "3993625"
  },
  {
    "text": "So there's um, I- i-in expectation at 0 but at any upsets, it-it's different.",
    "start": "3993625",
    "end": "4000225"
  },
  {
    "text": "In this case, if you have a tabular representation and this is in the limit, so with infinite amounts of- of data, et cetera,",
    "start": "4000225",
    "end": "4007050"
  },
  {
    "text": "then this will be um, this will be 0 for every single state. So this, equals 0 for every state.",
    "start": "4007050",
    "end": "4015135"
  },
  {
    "text": "You will converge to the right value for every single state if you're using a tabular representation.",
    "start": "4015135",
    "end": "4021285"
  },
  {
    "text": "And that's because if you think of just having like literally infinite amount of data and you run your policy, just you know,",
    "start": "4021285",
    "end": "4026805"
  },
  {
    "text": "infinite-infinite amount of times then for every state you have an infinite number of trajectories starting from that state,",
    "start": "4026805",
    "end": "4031965"
  },
  {
    "text": "and you can write down that value separately in the table. So it'll be 0. So what that means is that the mean squared value error for",
    "start": "4031965",
    "end": "4040110"
  },
  {
    "text": "the Monte Carlo estimator is 0 if you're using a tabular representation. And because it's 0, that is exactly the same",
    "start": "4040110",
    "end": "4047415"
  },
  {
    "text": "as the mean squared value estimator for TD except for -- so this is just equal to MSVE of the Monte Carlo times one over one minus Gamma.",
    "start": "4047415",
    "end": "4058635"
  },
  {
    "text": "So, that means that this is also 0. So if it's a tabular representation,",
    "start": "4058635",
    "end": "4064650"
  },
  {
    "text": "just to sort connect back to that, um, not- none of these methods have any year.",
    "start": "4064650",
    "end": "4069855"
  },
  {
    "text": "Yeah, question at the back? Your name first. Me? Yeah. Uh, I'm wondering where  the one over one minus Gamma constant came from?",
    "start": "4069855",
    "end": "4079305"
  },
  {
    "text": "Yes, the question is; where does that one over one minus Gamma constant come from? Um, in the interest of time, I'm not gonna go through it too much.",
    "start": "4079305",
    "end": "4085515"
  },
  {
    "text": "Um, I encourage you to read the Tsitsiklis paper. Um, intuitively, there is error that's a propagate-propagating here",
    "start": "4085515",
    "end": "4092520"
  },
  {
    "text": "because of the fact that we're Bootstrapping and so if you have a function, what this- what this result is sort of trying to highlight is that,",
    "start": "4092520",
    "end": "4099659"
  },
  {
    "text": "if your function approximator actually has no error, then there's gonna be no difference between Monte Carlo and",
    "start": "4099660",
    "end": "4105060"
  },
  {
    "text": "TD because for both of them the mean squared value error, um, inside of that sum,",
    "start": "4105060",
    "end": "4110565"
  },
  {
    "text": "the minimum over w is going to be 0. So it doesn't matter whether you're using TD or Monte Carlo. But if that's not true,",
    "start": "4110565",
    "end": "4115949"
  },
  {
    "text": "like if you can't actually exactly represent the value function, then you're going to get error and that error is going to um,",
    "start": "4115950",
    "end": "4122069"
  },
  {
    "text": "so like basically you can think of one over one minus gamma is approximately a horizon each. And basically that's getting multiplied because you're adding up these errors.",
    "start": "4122070",
    "end": "4131025"
  },
  {
    "text": "And the reason those get added up is because you're bootstrapping. You're propagating that error back whereas Monte Carlo doesn't suffer that. Yeah.",
    "start": "4131025",
    "end": "4139845"
  },
  {
    "text": "Um, my name is . In general, the mean squared error has taken over distribution uh,",
    "start": "4139845",
    "end": "4145185"
  },
  {
    "text": "of the states but- Under the policy yeah. -yeah, yeah. Under specific policy, uh,",
    "start": "4145185",
    "end": "4150690"
  },
  {
    "text": "but the only specific one we've seen as a stationary distribution. Do you ever use another one? Like-",
    "start": "4150690",
    "end": "4157270"
  },
  {
    "text": "Great question, - Okay, right now we're seeing this under the stationary distribution  of the states that you're gonna reach under the policy that you're exit that you care about evaluating.",
    "start": "4157270",
    "end": "4165409"
  },
  {
    "text": "For that, I think that's the right choice because that really is the state you're gonna get to under this policy. We  start to think about control.",
    "start": "4165410",
    "end": "4171109"
  },
  {
    "text": "You might want others, like, if you're gonna change your policy. Okay. All right so let's um,",
    "start": "4171110",
    "end": "4178275"
  },
  {
    "text": "I guess just briefly more on this. I- are they faster? Is one of them better? To my knowledge that's not really understood.",
    "start": "4178275",
    "end": "4183449"
  },
  {
    "text": "If you come across any literature on that, I'd love to hear it. Um, practically TD often is better,",
    "start": "4183450",
    "end": "4188475"
  },
  {
    "text": "is to empirically often the bootstrapping often helps to pull up. Alright. Let's move on briefly to control.",
    "start": "4188475",
    "end": "4195480"
  },
  {
    "text": "Um, it's going to be pretty similar. So instead of representing the value function and we're going to represent the state action value function",
    "start": "4195480",
    "end": "4202725"
  },
  {
    "text": "which is what we saw before when we wanted to often move from policy evaluation to control.",
    "start": "4202725",
    "end": "4207735"
  },
  {
    "text": "And now what we're gonna do is we're going to interleave sort of policy evaluation with a value function approximator with performing like an e-greedy policy improvement.",
    "start": "4207735",
    "end": "4215835"
  },
  {
    "text": "Um, this is where things can start to get unstable. Um, what are we doing in this case?",
    "start": "4215835",
    "end": "4221595"
  },
  {
    "text": "We generally involving function approximation, bootstrapping, we're often a- are also doing sampling.",
    "start": "4221595",
    "end": "4227715"
  },
  {
    "text": "But really the- the really big issue seems to be the off-policy learning. But when we think about before we had",
    "start": "4227715",
    "end": "4234210"
  },
  {
    "text": "this nice stationary distribution or converging to a stationary distribution over states, we're not going to be doing that anymore because we are going to be using",
    "start": "4234210",
    "end": "4241200"
  },
  {
    "text": "our- changing our control policy over time, and so that's changing the distributions of states that we encounter.",
    "start": "4241200",
    "end": "4247260"
  },
  {
    "text": "And um, setting the bar to often call it The Deadly Triad. If you want to, start combining function approximation and bootstrapping and off-policy learning,",
    "start": "4247260",
    "end": "4254730"
  },
  {
    "text": "things start to get a little bit um, they can fail to converge or converge to something good.",
    "start": "4254730",
    "end": "4260175"
  },
  {
    "text": "Alright. But before we get into that let's think about it procedurally. So now we're going to have um,",
    "start": "4260175",
    "end": "4265635"
  },
  {
    "text": "Q functions that are parameterized by a W, and we can again do stochastic gradient descent,",
    "start": "4265635",
    "end": "4271290"
  },
  {
    "text": "so its going to look almost identical to what we had before. And again, the stochastic gradient descent can sample",
    "start": "4271290",
    "end": "4277020"
  },
  {
    "text": "the gradient which means for particular state action pair, then we're gonna do these updates.",
    "start": "4277020",
    "end": "4283210"
  },
  {
    "text": "So, here what we're gonna do, is we're gonna represent, um,",
    "start": "4285670",
    "end": "4290804"
  },
  {
    "text": "our Q function by a set of linear state action, um, weights.",
    "start": "4290805",
    "end": "4296275"
  },
  {
    "text": "So, that means we're gonna have features that sort of both encode the state and the action. So, like what I saw when I was turning left as my robot for example.",
    "start": "4296275",
    "end": "4305390"
  },
  {
    "text": "Um, so, it's gonna be a combination of these two. And then, once we have that then we're gonna just have",
    "start": "4305390",
    "end": "4311020"
  },
  {
    "text": "a weight vector on top of that for the Q. So, we're not having separate weight vectors for each action.",
    "start": "4311020",
    "end": "4317040"
  },
  {
    "text": "Instead, we're having features that try to encompass both the state and action themselves. And then, we can do our Stochastic gradient descent on top of that.",
    "start": "4317040",
    "end": "4325380"
  },
  {
    "text": "So, how does this work for, um, uh, like, Monte Carlo?",
    "start": "4327610",
    "end": "4332965"
  },
  {
    "text": "Um, it's gonna look almost identical to before. We're just gonna again use our return.",
    "start": "4332965",
    "end": "4338460"
  },
  {
    "text": "Now, we're gonna be defining returns from a particular state action. For doing first visit the first time we reach the state action in that episode,",
    "start": "4338460",
    "end": "4346190"
  },
  {
    "text": "we look at the return, the sum of rewards till the end of the episode and we use that as our target. Use that as our estimate of the oracle,",
    "start": "4346190",
    "end": "4352360"
  },
  {
    "text": "the true Q function and we update towards that. In SARSA we're, gonna use a TD target,",
    "start": "4352360",
    "end": "4359369"
  },
  {
    "text": "so we're gonna look at the immediate reward of our tuple plus gamma times Q of the next state that we encountered and the action we took.",
    "start": "4359370",
    "end": "4368730"
  },
  {
    "text": "And so, then we're, again I'm just gonna just plug that in.",
    "start": "4368730",
    "end": "4376300"
  },
  {
    "text": "And then for Q learning, it's gonna look almost identical to Q learning except for again we're gonna plug in function approximators everywhere.",
    "start": "4376300",
    "end": "4383290"
  },
  {
    "text": "So, we're gonna plug in, um, this. Remember, is gonna be a function of RX which is gonna be a function of S",
    "start": "4383290",
    "end": "4391574"
  },
  {
    "text": "prime and A prime times R W. Whereas here this is going to be a function of the state in action.",
    "start": "4391575",
    "end": "4397340"
  },
  {
    "text": "Everything's linear and we're just doing different forms of bootstrapping and comparing whether or not we take a max or not.",
    "start": "4397340",
    "end": "4404550"
  },
  {
    "text": "All right. So, I went through that a little bit fast but it's basically exactly",
    "start": "4404550",
    "end": "4410610"
  },
  {
    "text": "analogous to the first part which we sort of stepped through more carefully. Uh, so, far everything's with Q functions now.",
    "start": "4410610",
    "end": "4416400"
  },
  {
    "text": "Why might this gets or weird or tricky? So, TD with value function approximation does not really follow in a gradient.",
    "start": "4416400",
    "end": "4424245"
  },
  {
    "text": "I don't have time to go into total details on that today, but there's a ni- some nice explanations on this in Chapter 11.",
    "start": "4424245",
    "end": "4430350"
  },
  {
    "text": "So, certain Umberto Chapter 11, um, it's a great resource and we also have lecture notes available online.",
    "start": "4430350",
    "end": "4439474"
  },
  {
    "text": "Um, and so, informally we're sort of doing this interleaving or doing this like approximate sample Bellman backup",
    "start": "4439475",
    "end": "4446910"
  },
  {
    "text": "combined with what's often known as a projection step because we're trying to sort of project our value function back into the space of representable functions.",
    "start": "4446910",
    "end": "4455405"
  },
  {
    "text": "And intuitively for why this might start to be a problem, is that the Bellman operator we showed is a contraction.",
    "start": "4455405",
    "end": "4462345"
  },
  {
    "text": "Like when we're doing dynamic programming we showed that if you do Bellman opera- Bellman backups you're guaranteed to converge to a fixed point.",
    "start": "4462345",
    "end": "4469639"
  },
  {
    "text": "When you do the value function approximator, it can be an expansion. What does an expansion mean.",
    "start": "4469640",
    "end": "4476040"
  },
  {
    "text": "Well, what a contraction, just as a reminder what a contraction said is let's say for an operator that's a contraction.",
    "start": "4476040",
    "end": "4481250"
  },
  {
    "text": "If you apply this operator and this is an operator like the Bellman equation.",
    "start": "4481250",
    "end": "4487335"
  },
  {
    "text": "I wanna back up, if you apply it to two different value functions, the distance between this feel like a max norm or something",
    "start": "4487335",
    "end": "4493889"
  },
  {
    "text": "like that is less than or equal to the previous distance. Which means as you apply this operator,",
    "start": "4493890",
    "end": "4499510"
  },
  {
    "text": "the distance between your old value function and your new value function keeps getting smaller and smaller and smaller and eventually get to a fixed point.",
    "start": "4499510",
    "end": "4505560"
  },
  {
    "text": "The problem is this now we're not doing that anymore. It's more like we're doing like O V and then we do some sort of projection operator.",
    "start": "4505560",
    "end": "4515139"
  },
  {
    "text": "I'm just gonna call it kinda weird P. So, this is the projection operator which means when you compute your new value function,",
    "start": "4515140",
    "end": "4523119"
  },
  {
    "text": "it may no longer lie in your value function approximators space and you're gonna have to refit it back into that space.",
    "start": "4523120",
    "end": "4529895"
  },
  {
    "text": "And when you do that, um, that operator itself can be an expansion. For those of you that are interested in some of the early sort of discussions of this,",
    "start": "4529895",
    "end": "4538449"
  },
  {
    "text": "Jeff Gordon, um, has a really nice paper on averages from 1995.",
    "start": "4538450",
    "end": "4544435"
  },
  {
    "text": "Um, but they talk about how linear value function approximators can be an expansion.",
    "start": "4544435",
    "end": "4549475"
  },
  {
    "text": "So, the Bellman backup is fine. It's a contraction but when you do this approximation you might expand the distance and that's one of the problems.",
    "start": "4549475",
    "end": "4557085"
  },
  {
    "text": "Okay. So, if we go back to our Baird example and, um, think about this a little bit more in terms of the, the control case.",
    "start": "4557085",
    "end": "4566054"
  },
  {
    "text": "So, let's imagine that we have a setting where, um, you have two different policies.",
    "start": "4566055",
    "end": "4571159"
  },
  {
    "text": "And the first policy, and this is the policy that you want to evaluate you always take the solid line.",
    "start": "4571160",
    "end": "4578469"
  },
  {
    "text": "So, you always take A1 and in your behavior data, this is the data that you're,",
    "start": "4578470",
    "end": "4584020"
  },
  {
    "text": "this is the policy you're using to gather data, you take A2 with six-sevenths of the time and you take A1 one seventh of the time.",
    "start": "4584020",
    "end": "4593445"
  },
  {
    "text": "Gamma is point nine nine. Um, and what you do is you generate a whole bunch of data.",
    "start": "4593445",
    "end": "4598630"
  },
  {
    "text": "So, you generate data, data under your behavior policy.",
    "start": "4598630",
    "end": "4606180"
  },
  {
    "text": "So, there's some really cool work on how you deal with, um, sort of correcting for the,",
    "start": "4609900",
    "end": "4615800"
  },
  {
    "text": "the data that you're getting versus the data you wanna evaluate. Let's imagine we, we don't go into any of that which I think is super cool and we're,",
    "start": "4615800",
    "end": "4621420"
  },
  {
    "text": "instead we're just gonna do something super simple which is we're gonna throw out all the data that doesn't match. So, imagine you just throw away data if,",
    "start": "4621420",
    "end": "4633020"
  },
  {
    "text": "um, A is not equal to Pi of S. So,",
    "start": "4633020",
    "end": "4638870"
  },
  {
    "text": "you generated all these data points. So, what does it, what do I mean by data points here? We had SAR as prime.",
    "start": "4638870",
    "end": "4645344"
  },
  {
    "text": "So, you take all these tuples. If it turns out that the action that was taken there is not the same as the,",
    "start": "4645345",
    "end": "4650630"
  },
  {
    "text": "the policy you wanna evaluate but where you're only ever taking A1, just throw out that tuple, you don't update. So, now all of your remaining data is consistent with your policy.",
    "start": "4650630",
    "end": "4660389"
  },
  {
    "text": "So, let's imagine then you tried to do TD learning with that data. The problem is, you can diverge.",
    "start": "4660390",
    "end": "4666570"
  },
  {
    "text": "And what do I mean by that? It mean that, that, that your weights could blow up. Super interesting why this happens.",
    "start": "4666570",
    "end": "4673260"
  },
  {
    "text": "Um, the main intuition for it is that your distribution data is not the same as the data you'd get under your desired target policy.",
    "start": "4673260",
    "end": "4681285"
  },
  {
    "text": "In particular, if you were actually to run the, the policy carve out Pi what would happen?",
    "start": "4681285",
    "end": "4687810"
  },
  {
    "text": "Let's say you start off in state S1. You take A1. That determinant will get you to state seven but you're gonna stay",
    "start": "4687810",
    "end": "4693770"
  },
  {
    "text": "in a seven for a really long time because it's deterministic. So, you'd get like S1. S7, S7.",
    "start": "4693770",
    "end": "4700965"
  },
  {
    "text": "Let's say even you did this maybe you, maybe it wasn't episodic case and you have multiple episodes, you'd still have cases where you'd like have very little bit amount of data",
    "start": "4700965",
    "end": "4708230"
  },
  {
    "text": "about S these S's and lots of data about S7. But in the data that you get from",
    "start": "4708230",
    "end": "4714540"
  },
  {
    "text": "your behaviour policy because a bunch of the time it takes A2, it'll keep teleportating you back to one of S1 through S6.",
    "start": "4714540",
    "end": "4721915"
  },
  {
    "text": "Which means the distribution of your data, the data you have looks very different. The distribution of states you visit looks very different than",
    "start": "4721915",
    "end": "4728660"
  },
  {
    "text": "the data that you get and the states you'd visit under Pi. And that is the problem. If you,",
    "start": "4728660",
    "end": "4734900"
  },
  {
    "text": "if you don't account for this mismatch, then the values can diverge. Even though they're all sort of compatible,",
    "start": "4734900",
    "end": "4741110"
  },
  {
    "text": "all in the sense that you're only ever using state action pair if you took the action under your desired policy.",
    "start": "4741110",
    "end": "4748210"
  },
  {
    "text": "And this sort of issue can also come up, um, when you're using Q learning. Um, uh, and you're doing generally like updating this policy over time.",
    "start": "4748210",
    "end": "4756639"
  },
  {
    "text": "So, in terms of this, um, just to briefly summarize before we finish.",
    "start": "4757230",
    "end": "4762665"
  },
  {
    "text": "In the tabular case everything converges, it's beautiful. Um, in the linear case, [NOISE] I mean by this I mean that,",
    "start": "4762665",
    "end": "4774740"
  },
  {
    "text": "um, you can chatter. You basically converge but you might,",
    "start": "4774740",
    "end": "4780130"
  },
  {
    "text": "um, uh, there might be some oscillation. Uh, but Q learning like we are doing this off policy aspect can diverge.",
    "start": "4780130",
    "end": "4788515"
  },
  {
    "text": "And once we get into nonlinear value function approximation, every- like mostly all bets are off.",
    "start": "4788515",
    "end": "4793750"
  },
  {
    "text": "Now, this is a little bit of an oversimplification. Um, there has been a huge amount of work and huge amount of interest in this because",
    "start": "4793750",
    "end": "4801010"
  },
  {
    "text": "everyone wants to do function approximation with or else we can tackle real problems. And so, over the last, like,",
    "start": "4801010",
    "end": "4806489"
  },
  {
    "text": "one or two decades, there's been a huge amount of work on this. Um, and there are some algorithms now that do have convergence guarantees.",
    "start": "4806490",
    "end": "4812485"
  },
  {
    "text": "Um, and there's some coo- super cool really recent work, um, where they're looking at batch URL which can converge with nonlinear approximators.",
    "start": "4812485",
    "end": "4820555"
  },
  {
    "text": "So, there's definitely a lot of work on this that we're not gonna get to. Um, I just wanna highlight that it's",
    "start": "4820555",
    "end": "4825760"
  },
  {
    "text": "a really important issue not just whether it converges, but what it converges to. Like you might converge to a point which is a really bad approximation.",
    "start": "4825760",
    "end": "4832895"
  },
  {
    "text": "So, it's stable. It doesn't, your dab- your weights aren't blowing up but it's just a really bad approximator and,",
    "start": "4832895",
    "end": "4838425"
  },
  {
    "text": "and some of the critical choices here are your objective functioning and your feature representation. So, just before we close I think this is a really nice figure from Sutton and Barto.",
    "start": "4838425",
    "end": "4847040"
  },
  {
    "text": "Um, what they're showing here is you can think of it as like you have this plane which is where you can represent",
    "start": "4847040",
    "end": "4852375"
  },
  {
    "text": "all of your linear value function approximators. And what happens when you do a Bellman update,",
    "start": "4852375",
    "end": "4857415"
  },
  {
    "text": "um, or like you do a TD backup, is that you're gonna now sort of have a value function that might not be representable in your plane and the you're gonna,",
    "start": "4857415",
    "end": "4864765"
  },
  {
    "text": "you can project it back. And these different, you can quantify different forms of error,",
    "start": "4864765",
    "end": "4870614"
  },
  {
    "text": "different basically this allows you to find different objective functions that you're trying to minimize in order to find the best approximator.",
    "start": "4870615",
    "end": "4878150"
  },
  {
    "text": "And we've seen one today which is sort of this me- minimum mean squared error approximation essentially over the like these Bellman errors but that's not",
    "start": "4878150",
    "end": "4885965"
  },
  {
    "text": "the only choice and it's not necessary even the best choice. Um, because it might be that the one that has the smallest error there",
    "start": "4885965",
    "end": "4892160"
  },
  {
    "text": "is not the same one that has the best performance in your real problem. So, that's a little bit fast but it,",
    "start": "4892160",
    "end": "4897635"
  },
  {
    "text": "it's super and Shane that's covered in, um, Sutton and Barto in 11. If you wanna go into more detail. Just really quick, what are the things you should understand?",
    "start": "4897635",
    "end": "4904030"
  },
  {
    "text": "You should, um, you have to implement these ones on linear value function approximator both for policy evaluation and control.",
    "start": "4904030",
    "end": "4909245"
  },
  {
    "text": "You should understand whether or not things can, uh, converge in the policy evaluation case",
    "start": "4909245",
    "end": "4915045"
  },
  {
    "text": "and when the solution has zero error and non-zero error. Um, and you should just just understand qualitatively",
    "start": "4915045",
    "end": "4920280"
  },
  {
    "text": "what are the issues that can come out so that some of these solutions may not always converge and it's",
    "start": "4920280",
    "end": "4925890"
  },
  {
    "text": "this combination of function approximation bootstrapping and all policy learning. All right. So, that's enough just to get started with the homework",
    "start": "4925890",
    "end": "4932480"
  },
  {
    "text": "two that we're gonna be releasing this week, today. And then, um, next week we're gonna start to talk about deepening.",
    "start": "4932480",
    "end": "4937610"
  },
  {
    "text": "Thanks.",
    "start": "4937610",
    "end": "4939530"
  }
]