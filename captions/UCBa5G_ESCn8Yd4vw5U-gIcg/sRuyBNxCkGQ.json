[
  {
    "start": "0",
    "end": "7335"
  },
  {
    "text": "OK, so here's the layout\nfor the rest of the class, there's two lectures\nright after Thanksgiving",
    "start": "7335",
    "end": "12840"
  },
  {
    "text": "on transactional memory,\nand those are real kind of heavyweight lectures.",
    "start": "12840",
    "end": "18460"
  },
  {
    "text": "There will be exam\nproblems on them or almost certainly be\nexam problems on them. The other three lectures\nthat we have before now",
    "start": "18460",
    "end": "25620"
  },
  {
    "text": "and the end of the quarter\nis today's lecture on domain specific programming systems. And then the last\nweek is talking more",
    "start": "25620",
    "end": "32008"
  },
  {
    "text": "about specialized hardware\nnot as programmable processors and the energy\nefficiency of them.",
    "start": "32009",
    "end": "38770"
  },
  {
    "text": "These other three lectures\nare a little bit more like we want you to know about\nthem and be aware of them",
    "start": "38770",
    "end": "44400"
  },
  {
    "text": "as you proceed further,\nbut exam questions would be more conceptual\nand not like work this out",
    "start": "44400",
    "end": "51150"
  },
  {
    "text": "or something like that. So here's a-- so I'll\njust get started.",
    "start": "51150",
    "end": "60769"
  },
  {
    "text": "And the systems we'll describe\ntoday are actually pretty cool. So the goal of what I'm trying\nto do today is two things.",
    "start": "60770",
    "end": "68310"
  },
  {
    "text": "One is so far in this class, you\nhave implemented code in what I",
    "start": "68310",
    "end": "74829"
  },
  {
    "text": "consider to be fairly\nlow-level programming systems, so essentially C, C++,\nCUDA is basically that,",
    "start": "74830",
    "end": "81460"
  },
  {
    "text": "ISPC is basically that. And more or less\nyou've done everything.",
    "start": "81460",
    "end": "86661"
  },
  {
    "text": "The one thing that you got\nthat was really convenient was both ISPC and CUDA\nbasically took over",
    "start": "86662",
    "end": "92500"
  },
  {
    "text": "the responsibility for\ngenerating assembly instructions for you. At the very least, you didn't\nhave to worry about that.",
    "start": "92500",
    "end": "98592"
  },
  {
    "text": "But most of the rest\nof the major decisions were made by you, and\nthat was intentional.",
    "start": "98592",
    "end": "103930"
  },
  {
    "text": "You now know how to thread\npool might be implemented, so when you call ISPC tasks, you\nknow exactly what they're doing,",
    "start": "103930",
    "end": "109790"
  },
  {
    "text": "and so on and so on. So now we're going to say, OK,\nyou know how you would implement",
    "start": "109790",
    "end": "117280"
  },
  {
    "text": "things from scratch,\nwhat are the higher level abstractions that would be good\nto present people that might be",
    "start": "117280",
    "end": "125180"
  },
  {
    "text": "experts in a domain but not\nthe folks that have taken 149 or really are interested\nin implementing things?",
    "start": "125180",
    "end": "132810"
  },
  {
    "text": "So I'm going to talk\nabout that today. And largely, I'm\ngoing to talk about it through the context of two\ncase studies, two examples.",
    "start": "132810",
    "end": "139170"
  },
  {
    "text": "Both of these actually have\nsome Stanford relation. We're going to talk about the\nprogramming language that's",
    "start": "139170",
    "end": "145099"
  },
  {
    "text": "used to author all of the\nimage processing, the photo app in Google Android phones.",
    "start": "145100",
    "end": "151220"
  },
  {
    "text": "And every image that's or, at\nleast to my knowledge at least a couple of years ago,\nevery image that went",
    "start": "151220",
    "end": "156349"
  },
  {
    "text": "through Instagram was\ngoing through filters and processing from a\nlanguage called Halide.",
    "start": "156350",
    "end": "161459"
  },
  {
    "text": "And then there this research\nlanguage developed at Stanford called Lizst, which it\nwas a research language.",
    "start": "161460",
    "end": "167360"
  },
  {
    "text": "To be honest, you'd probably\nnever, ever encounter it. But it's actually got\nsome great examples of the value of high\nlevel abstractions in it.",
    "start": "167360",
    "end": "176101"
  },
  {
    "text": "So that's what we're\ngoing to talk about. So the premise here is\nthat we haven't used all",
    "start": "176102",
    "end": "181790"
  },
  {
    "text": "of these programming systems. Some of them might\nbe familiar to you. But if I'm trying to develop a\nhigh-performance application,",
    "start": "181790",
    "end": "191420"
  },
  {
    "text": "I need some pretty smart people\nto be able to optimize it. I need CS149 students.",
    "start": "191420",
    "end": "196730"
  },
  {
    "text": "And in the grand\nscheme of programmers, CS149 students are pretty\nfew and far between.",
    "start": "196730",
    "end": "202610"
  },
  {
    "text": "And if you look at the\nrange of performance that even CS149 students\nproduce on their assignments,",
    "start": "202610",
    "end": "209930"
  },
  {
    "text": "really, really,\nreally code optimizers are even fewer and far between.",
    "start": "209930",
    "end": "216110"
  },
  {
    "text": "So proof by assignments 1,\n2, and 3, and probably even proof by assignment 4 for sure.",
    "start": "216110",
    "end": "221690"
  },
  {
    "text": "And throughout computer science,\nwhether you're a systems person, whether you're a\nprogramming languages",
    "start": "221690",
    "end": "227030"
  },
  {
    "text": "person, or compilers\nperson, there's always been this Holy Grail or\nthis unicorn of characteristics",
    "start": "227030",
    "end": "236030"
  },
  {
    "text": "of a programming language. First of all, you'd\nlike to be able to just",
    "start": "236030",
    "end": "242980"
  },
  {
    "text": "productively express the\nprogram you want to write. And, in fact, these\ndays with LLMs,",
    "start": "242980",
    "end": "249060"
  },
  {
    "text": "there's a lot of\ninterest in that, saying, I want a program that\nadds a bunch of numbers and it spits out\nthe Python code.",
    "start": "249060",
    "end": "255050"
  },
  {
    "text": "So you'd like to be\nable to go from an idea to a working correct\nprogram very quickly. You want to be productive.",
    "start": "255050",
    "end": "260660"
  },
  {
    "text": "And many of you use Python as\nprobably your most frequent language because it's a pretty\nproductive programming language.",
    "start": "260660",
    "end": "267610"
  },
  {
    "text": "And then, in many\ncases you probably like a high-performance\nprogramming language",
    "start": "267610",
    "end": "273219"
  },
  {
    "text": "because these days, machine\nlearning, data science, big graph algorithms on\nterabyte sized graphs,",
    "start": "273220",
    "end": "280730"
  },
  {
    "text": "et cetera, et cetera,\nor image processing on 10 megapixel images, you're\ngoing to want performance",
    "start": "280730",
    "end": "285910"
  },
  {
    "text": "because it's got to\nrun on an iPhone, it's got to run\non a data center. And then last generally--",
    "start": "285910",
    "end": "293680"
  },
  {
    "text": "historically people\nhave said, well, programming language\nshould be general. You should be able to write\nwhatever program you want.",
    "start": "293680",
    "end": "300280"
  },
  {
    "text": "And there were these\nkind of three axes of writing a\nprogramming language,",
    "start": "300280",
    "end": "305360"
  },
  {
    "text": "and what is the\nprogramming language that nails all of these that scores\nreally high on these fronts?",
    "start": "305360",
    "end": "311580"
  },
  {
    "text": "And if you look at many widely\nused programming languages, and really this has been\nchanging over the last five",
    "start": "311580",
    "end": "320270"
  },
  {
    "text": "to 10 years, but if you look\nat a lot of the long term ones, they go on some axis.",
    "start": "320270",
    "end": "328138"
  },
  {
    "text": "Like if you're a web developer,\nyou might write a lot of code in Javascript, you can write\nwhatever you want in Javascript,",
    "start": "328138",
    "end": "333470"
  },
  {
    "text": "but you can hack some\nstuff up pretty quick and you can attack\nbasically whatever you want,",
    "start": "333470",
    "end": "339560"
  },
  {
    "text": "but it's not going\nto be that fast. Or if you're writing here in\nC++ or Rust and I even put Java",
    "start": "339560",
    "end": "345501"
  },
  {
    "text": "and CUDA in this category, you\nknow these are all different levels of performance\nto be honest, but you can write whatever you\nwant again and you'd choose",
    "start": "345502",
    "end": "353210"
  },
  {
    "text": "to use C or C++, you know\nthat would be your thing. Like this needs to be fast,\nI'm going to write it in C. Or it needs to be\nGPU accelerated,",
    "start": "353210",
    "end": "359050"
  },
  {
    "text": "I'm going to write it in CUDA. And so a lot of the more\nsuccessful languages",
    "start": "359050",
    "end": "364180"
  },
  {
    "text": "were on these axes.",
    "start": "364180",
    "end": "369190"
  },
  {
    "text": "And so what I want\nto talk about today is this empty line here between\nproductivity and performance.",
    "start": "369190",
    "end": "374900"
  },
  {
    "text": "So we're interested in-- I put Ruby down there as well-- in domain specific languages\nwhere we say, you know what?",
    "start": "374900",
    "end": "382180"
  },
  {
    "text": "We care a lot about\nbeing productive. Like, for example, PyTorch.",
    "start": "382180",
    "end": "387520"
  },
  {
    "text": "I want to be able to hack up a\nnew neural network very quickly. I want it to be\nextremely efficient,",
    "start": "387520",
    "end": "393610"
  },
  {
    "text": "not just like\nparallel efficient, but if we're talking\nabout PyTorch, we're like, we want to use GPUs, or we\nwant to use accelerated TPUs",
    "start": "393610",
    "end": "400780"
  },
  {
    "text": "or something like that. But I'm willing to give\nup the fact that I can",
    "start": "400780",
    "end": "406090"
  },
  {
    "text": "express anything I ever want. And so some of\nthe examples here,",
    "start": "406090",
    "end": "411699"
  },
  {
    "text": "you probably have encountered\na bunch of them, right? PyTorch is not the\nlanguage that you would use to build anything you want.",
    "start": "411700",
    "end": "418950"
  },
  {
    "text": "It's a language that you use to\nexpress your tensor operations. SQL, very constrained language,\nbut it's a great language",
    "start": "418950",
    "end": "427669"
  },
  {
    "text": "for querying a database. And you don't think at all about\nhow those queries are executed in parallel on a big database.",
    "start": "427670",
    "end": "434340"
  },
  {
    "text": "You just hope Oracle or\nPostgres does the right thing, but you just say, I'm looking\nfor all records in my database",
    "start": "434340",
    "end": "442070"
  },
  {
    "text": "where the first name is\nfoobar or something like that. Even something like Matlab,\nI would put in this example.",
    "start": "442070",
    "end": "453080"
  },
  {
    "text": "Anything else come to mind\nas things that you commonly use that you might categorize\nas being similar in spirit",
    "start": "453080",
    "end": "461270"
  },
  {
    "text": "to some of these things\non this left edge? Yeah. [? Gdog. ?]",
    "start": "461270",
    "end": "466650"
  },
  {
    "text": "G-what? [? Gdog ?] it's used for-- I actually don't know what is. Geospatial-- Oh, for geospatial databases.",
    "start": "466650",
    "end": "473260"
  },
  {
    "text": "Yeah, OK, so. So that's another database query\nlanguage except it's centered",
    "start": "473260",
    "end": "478470"
  },
  {
    "text": "around the notion of 2D space. OK, yeah, so any\nkind of database query language kind\nof fits in the thing.",
    "start": "478470",
    "end": "484300"
  },
  {
    "text": "If you're in graphics,\nsomething like OpenGL, we're used to writing in fairly\ndomain specific languages",
    "start": "484300",
    "end": "490830"
  },
  {
    "text": "and graphics. These days, machine learning\nall of it is done in fairly-- and there's different levels.",
    "start": "490830",
    "end": "496200"
  },
  {
    "text": "There's PyTorch,\nand then there's a whole bunch of things\nbuilt on top of the PyTorch to make your life\neven easier if you want less and less flexibility.",
    "start": "496200",
    "end": "503160"
  },
  {
    "text": "So that's the idea of\ntoday is the thesis is-- and these days, I think,\nyou're seeing the results",
    "start": "503160",
    "end": "510810"
  },
  {
    "text": "of about 5 to 10\nyears of emphasis on domain specific languages. And if we go back\nabout 10 years,",
    "start": "510810",
    "end": "517770"
  },
  {
    "text": "it was probably a little\ncontroversial to say, hey, we're going to give up on the\nflexibility of C, C++, Java,",
    "start": "517770",
    "end": "525400"
  },
  {
    "text": "and we're going to force\nyou all down a narrow path. So this is the big promise.",
    "start": "525400",
    "end": "531140"
  },
  {
    "text": "And usually in this\nclass, we actually give you this lecture\nafter we've talked about specialized hardware. We haven't talked about\nspecialized hardware yet.",
    "start": "531140",
    "end": "538250"
  },
  {
    "text": "But just keep in mind that\nhigh performance is not just parallel, but it\ncould be like using a TPU,",
    "start": "538250",
    "end": "544300"
  },
  {
    "text": "it could be using\nan accelerator, it could be using any of the\nfive different processors that are in my Apple watch,\nthings like that.",
    "start": "544300",
    "end": "553360"
  },
  {
    "text": "All right. So here are some examples. You pointed out a\nfew to me already.",
    "start": "553360",
    "end": "559460"
  },
  {
    "text": "I added a few more here. So the idea is to write a\nprogram quickly and write it",
    "start": "559460",
    "end": "566590"
  },
  {
    "text": "once. And I'm going to write\nit using primitives",
    "start": "566590",
    "end": "571720"
  },
  {
    "text": "that the compiler, the\nsystem knows about. And it knows enough about what\nI mean by various primitives.",
    "start": "571720",
    "end": "579620"
  },
  {
    "text": "Like, for example, PyTorch knows\nwhat an [? ND ?] tensor is. For example, SQL\nknows when you say",
    "start": "579620",
    "end": "586900"
  },
  {
    "text": "select this row, like it knows a\nlot about what selection means.",
    "start": "586900",
    "end": "591910"
  },
  {
    "text": "And it's going to leverage\nthat knowledge to give you the best possible implementation\non whatever system",
    "start": "591910",
    "end": "599470"
  },
  {
    "text": "you're running on. So if I say select everything\nfrom this database,",
    "start": "599470",
    "end": "605740"
  },
  {
    "text": "how is the data laid out? What is the algorithm,\nthe index structure used?",
    "start": "605740",
    "end": "611079"
  },
  {
    "text": "Is it a binary tree? Is it a B tree? Think of all these\ndecisions that go into implementing\nthat database.",
    "start": "611080",
    "end": "617209"
  },
  {
    "text": "As the programmer, I\njust say, please give me a relation, give me\na table that has all",
    "start": "617210",
    "end": "623380"
  },
  {
    "text": "of the results of this filter. And on different systems\nthat implementation could be very, very different.",
    "start": "623380",
    "end": "629952"
  },
  {
    "text": "In PyTorch, you're\ngoing to say something like, please take this\ntensor and pass it through this com, layer.",
    "start": "629952",
    "end": "636460"
  },
  {
    "text": "And if you're running\non a GPU, that's going to be some\nCUDA implementation. If you're running on Intel, it\nmight be a completely different",
    "start": "636460",
    "end": "642700"
  },
  {
    "text": "implementation. If you're running\non a Google TPU, it could be a completely\ndifferent implementation.",
    "start": "642700",
    "end": "649120"
  },
  {
    "text": "So let's just go through some\nexamples to think about some",
    "start": "649120",
    "end": "655270"
  },
  {
    "text": "of the decisions that folks\nmake when designing these domain specific sets of abstractions.",
    "start": "655270",
    "end": "661747"
  },
  {
    "text": "And the first example\nthat I'm going to give is a little bit from my neck of\nthe woods in graphics and image",
    "start": "661747",
    "end": "667630"
  },
  {
    "text": "processing. And it's a language\ncalled Halide, which is the language that's\nused in practice to implement",
    "start": "667630",
    "end": "674290"
  },
  {
    "text": "the camera application on\nGoogle's Android phone. So if you have an Android\nphone and you take pictures, you are running Halide code.",
    "start": "674290",
    "end": "681220"
  },
  {
    "text": "I'm not up to date, but as\nof four or five years ago, if you uploaded a\npicture to Instagram",
    "start": "681220",
    "end": "687160"
  },
  {
    "text": "and it went through an image\nprocessing filter, many of those were running in\nHalide code at Meta.",
    "start": "687160",
    "end": "692960"
  },
  {
    "text": "So this is actually-- it's not a widely used\nlanguage, but it's",
    "start": "692960",
    "end": "698320"
  },
  {
    "text": "a language that's used\nby a bunch of people that care a lot about performance. And it had origins at Stanford,\neven though it was mainly",
    "start": "698320",
    "end": "705490"
  },
  {
    "text": "developed at MIT and\nthen later at Google. So before we start talking about\nwhat are the primitives Halide",
    "start": "705490",
    "end": "712540"
  },
  {
    "text": "gives you, we\nactually have to talk about what is the workload\nthat people in this domain",
    "start": "712540",
    "end": "718569"
  },
  {
    "text": "are trying to write. So here's an example. And I'm curious.",
    "start": "718570",
    "end": "724069"
  },
  {
    "text": "in 30 seconds or less, can you\ntell me what this code does? ",
    "start": "724070",
    "end": "737600"
  },
  {
    "text": "Any sense? Blurs. It blurs an image\nwhich you can tell from the function name, yes.",
    "start": "737600",
    "end": "744020"
  },
  {
    "text": "But how does it blur the image? Like, what's the filter size?",
    "start": "744020",
    "end": "751250"
  },
  {
    "text": "How is it parallelized? How is it vectorized? It's pretty gnarly.",
    "start": "751250",
    "end": "757170"
  },
  {
    "text": "Pretty gnarly. And this is like if we were in\nthe assignment 1 time frame, and we replace _mm_load_si128,\nwhich is your mmx intrinsics,",
    "start": "757170",
    "end": "766430"
  },
  {
    "text": "we changed that\nwith CS149 intrin, you would have\ndone this yourself.",
    "start": "766430",
    "end": "772310"
  },
  {
    "text": "You would have\ndone this yourself. Now let me ask you a\ndifferent question, what does this code do?",
    "start": "772310",
    "end": "778350"
  },
  {
    "text": "This is C. This is regular C.\nI didn't give you the function",
    "start": "778350",
    "end": "784600"
  },
  {
    "text": "name this time, so\nyou can't cheat. It's a [? convolution. ?] This is a convolution.",
    "start": "784600",
    "end": "790720"
  },
  {
    "text": "This is a 2D convolution. I give you an image, a 2D\narray, a matrix of pixels.",
    "start": "790720",
    "end": "796779"
  },
  {
    "text": "In this case, it's\na monochrome image because there's not\nred, green, and blue. It's just a single\nintensity per pixel.",
    "start": "796780",
    "end": "803449"
  },
  {
    "text": "And every output pixel\nat the same location is the average of all the\nsurrounding neighboring pixels.",
    "start": "803450",
    "end": "810160"
  },
  {
    "text": "So this is for every\noutput pixel loops, and then for every output\npixel, please loop over the 3",
    "start": "810160",
    "end": "818200"
  },
  {
    "text": "by 3 block of neighboring pixels\nand average them together, add them all up, and\nthen multiply by weights.",
    "start": "818200",
    "end": "827170"
  },
  {
    "text": "And weights is 1/9 everywhere. And that's the DNN\nlecture I told. If you ran this C++ code,\nyou would blur an image,",
    "start": "827170",
    "end": "834080"
  },
  {
    "text": "and it would look a\nlittle bit like this. All right. So, OK, so here's that code.",
    "start": "834080",
    "end": "840240"
  },
  {
    "text": "And so here's my\nquestion to you. Let's analyze it a little bit. What is the amount of\nwork done per pixel?",
    "start": "840240",
    "end": "850580"
  },
  {
    "text": "How many arithmetic ops?  It's doing this again.",
    "start": "850580",
    "end": "855985"
  },
  {
    "text": " How many arithmetic\nops per pixel?",
    "start": "855985",
    "end": "861740"
  },
  {
    "text": " In other words, look here.",
    "start": "861740",
    "end": "867980"
  },
  {
    "text": " Shout out. ",
    "start": "867980",
    "end": "875700"
  },
  {
    "text": "Floating point arithmetic ops. ",
    "start": "875700",
    "end": "881339"
  },
  {
    "text": "There's basically one\nmultiply here and an add.",
    "start": "881340",
    "end": "887970"
  },
  {
    "text": "So I'm doing 9 multiply\nadds and then a store. So the cost to do this is\n9 times width by height,",
    "start": "887970",
    "end": "896579"
  },
  {
    "text": "or if we decided to\nthink about the filter, it would be an n by n filter\nand not a 3 by 3 filter,",
    "start": "896580",
    "end": "902310"
  },
  {
    "text": "it would be n squared\nwidth by height. That's the amount of work we do. So that's the total\nnumber of ops.",
    "start": "902310",
    "end": "909839"
  },
  {
    "text": "Now I need to give you just\na small piece of information if you knew this about graphics. If you look at this filter,\nyou can actually separate this",
    "start": "909840",
    "end": "917250"
  },
  {
    "text": "filter, which is\na 2D convolution. You can separate it into two\n1D convolutions in this case.",
    "start": "917250",
    "end": "922420"
  },
  {
    "text": "So I'm going to write it a\nlittle bit differently just to be optimal before we\nstart parallelizing it.",
    "start": "922420",
    "end": "927660"
  },
  {
    "text": "So I can get the same result\nby actually just blurring 1D",
    "start": "927660",
    "end": "933690"
  },
  {
    "text": "convolution across all the rows. So every pixel is the average\nof the left and right neighbor",
    "start": "933690",
    "end": "941680"
  },
  {
    "text": "and itself. And then I take that result,\nand I blur vertically. And if you think about it\nafter the horizontal blur,",
    "start": "941680",
    "end": "949300"
  },
  {
    "text": "I've added up three numbers. And then after\nthe vertical blur, I've taken those partial\nsums and added three of them",
    "start": "949300",
    "end": "956579"
  },
  {
    "text": "together. So I'm doing the\nexact same math. So that code might look\na little bit like this.",
    "start": "956580",
    "end": "962329"
  },
  {
    "text": "So I wrote it in C here. And then on the right side, I'm\nshowing you the allocations.",
    "start": "962330",
    "end": "969500"
  },
  {
    "text": "So the input is size\nwidth by height. The plus 2 is not\nthat significant. I just didn't want\nto deal with boundary",
    "start": "969500",
    "end": "975700"
  },
  {
    "text": "conditions in my output. Then, I basically shrink\nit by 2 elements when",
    "start": "975700",
    "end": "983620"
  },
  {
    "text": "I'm blurring\nhorizontally, and then I shrink it by 2 elements\nwhen I'm blurring vertically.",
    "start": "983620",
    "end": "988750"
  },
  {
    "text": "So what is the amount\nof work I do now? So it used to be n squared\nwidth times height.",
    "start": "988750",
    "end": "994210"
  },
  {
    "text": "Now what is it? Now it's 2n width times height,\nwhich dropping from 9 operations",
    "start": "994210",
    "end": "1001880"
  },
  {
    "text": "per pixel to 6 might not\nseem all that significant, but what if it was\na 7 by 7 filter.",
    "start": "1001880",
    "end": "1007519"
  },
  {
    "text": "Now that's 49 operations\nper pixel versus 14. We're starting to get a\nfactor of three or more",
    "start": "1007520",
    "end": "1014000"
  },
  {
    "text": "in terms of math. And if you blur an\nimage in Photoshop, you often might do\nsomething that's 100 by 100 blur radius\nfilter, and so things",
    "start": "1014000",
    "end": "1021320"
  },
  {
    "text": "can get gnarly pretty fast. OK, so that's good.",
    "start": "1021320",
    "end": "1028380"
  },
  {
    "text": "We've reduced the number\nof math operations we need to get this thing done.",
    "start": "1028380",
    "end": "1033530"
  },
  {
    "text": "Do you see anything\nthat maybe not so good if we think about some\nof the other things",
    "start": "1033530",
    "end": "1038839"
  },
  {
    "text": "we think about in this class? Yeah. [INAUDIBLE]",
    "start": "1038839",
    "end": "1045089"
  },
  {
    "text": "OK, so one thing\nthat is unfortunate is that I basically increased\nmy memory footprint by 33%",
    "start": "1045089",
    "end": "1052780"
  },
  {
    "text": "So I used to need\nan input and output, now I need an input\nand output and a temp buffer of the same size.",
    "start": "1052780",
    "end": "1057899"
  },
  {
    "text": "And then, actually, could\nbe a significant thing if I'm dealing with a 12\nmegapixel image on my phone.",
    "start": "1057900",
    "end": "1066049"
  },
  {
    "text": "I'm allocating another\n12 megapixel buffer, 12 megapixels times red,\ngreen, blue, often red,",
    "start": "1066050",
    "end": "1071550"
  },
  {
    "text": "green, blue, alpha is\narguably 48 [? megafloats ?]",
    "start": "1071550",
    "end": "1078420"
  },
  {
    "text": "or 48 megabytes. I just allocate 50\nmegabytes of memory. On a phone that can matter.",
    "start": "1078420",
    "end": "1084580"
  },
  {
    "text": "It can definitely matter. Anything else that you notice? So what are the things\nwe often think about? We think about-- there's\nno parallelism here.",
    "start": "1084580",
    "end": "1092260"
  },
  {
    "text": "We haven't talked\nabout that yet. But we talk about work done. We talk about memory footprint.",
    "start": "1092260",
    "end": "1098040"
  },
  {
    "text": "We talk about memory bandwidth\nand arithmetic intensity. We talk about SIMD\ncoherence, but again, there's",
    "start": "1098040",
    "end": "1104140"
  },
  {
    "text": "no parallelism here yet. Yeah [INAUDIBLE]",
    "start": "1104140",
    "end": "1109330"
  },
  {
    "text": "Yeah, so before-- keep in\nmind that-- let's like look at this program.",
    "start": "1109330",
    "end": "1115370"
  },
  {
    "text": "How many times does\nevery input get read? ",
    "start": "1115370",
    "end": "1120400"
  },
  {
    "text": "Technically, every input\ngets read nine times, but effectively, how many times\nwill it get read from memory?",
    "start": "1120400",
    "end": "1128260"
  },
  {
    "text": "Probably once. And you've got to be a little\nbit careful about that, to be honest, because we talked\nabout this blocking thing.",
    "start": "1128260",
    "end": "1135260"
  },
  {
    "text": "So it means that if you can\nhold two rows in cache, then",
    "start": "1135260",
    "end": "1141550"
  },
  {
    "text": "you'll be able to\nhold the data around long enough so that\nyou're only going to read it from memory once.",
    "start": "1141550",
    "end": "1146630"
  },
  {
    "text": "So as long as a couple\nrows can fit in cache, this thing is going to read\nevery input element once,",
    "start": "1146630",
    "end": "1152440"
  },
  {
    "text": "and certainly, write every\noutput element exactly once. And now think about this one.",
    "start": "1152440",
    "end": "1159760"
  },
  {
    "text": "This one reads every\ninput element once, writes every temp buffer once,\nthen reads every temp buffer",
    "start": "1159760",
    "end": "1167110"
  },
  {
    "text": "element again, and then\nwrites the output once. So not only has my memory\nfootprint increased,",
    "start": "1167110",
    "end": "1174670"
  },
  {
    "text": "my arithmetic\nintensity has decreased by a factor of about 2. So if we were bandwidth bound\nbefore, we are now even slower.",
    "start": "1174670",
    "end": "1183710"
  },
  {
    "text": "If we were compute bound before. OK, maybe we made\nan improvement. ",
    "start": "1183710",
    "end": "1198990"
  },
  {
    "text": "Yeah. So we actually already talked\nabout this a little bit. I pointed out all the places\nwhere data gets reused.",
    "start": "1198990",
    "end": "1205992"
  },
  {
    "text": " So question for the audience,\nis there a way to do better?",
    "start": "1205993",
    "end": "1215230"
  },
  {
    "text": "And let me see the\nthinking just a little bit with an algorithm that looks\na little bit like this.",
    "start": "1215230",
    "end": "1221590"
  },
  {
    "text": "And I'd like you to\ntry and make sure-- just take a look at this. And this might be nice to\ntalk over with someone.",
    "start": "1221590",
    "end": "1228180"
  },
  {
    "text": "And I've given you some hints\nto help you understand this. What is this\nimplementation doing?",
    "start": "1228180",
    "end": "1235920"
  },
  {
    "text": "It does not allocate more\nthan 3 rows of temp buffer.",
    "start": "1235920",
    "end": "1241250"
  },
  {
    "start": "1241250",
    "end": "1247060"
  },
  {
    "text": "Just yeah, it takes a little\nbit of time to digest. So if you want to\ntalk with somebody,",
    "start": "1247060",
    "end": "1252430"
  },
  {
    "text": "or if you just want to\npuzzle through it yourself, I'll give everybody about 30 to\n45 seconds to push through here.",
    "start": "1252430",
    "end": "1260082"
  },
  {
    "text": "The key things are the\nthings I've highlighted. Notice that the outermost loop\nis over rows, and then this loop",
    "start": "1260082",
    "end": "1267190"
  },
  {
    "text": "is over 0 to 3. ",
    "start": "1267190",
    "end": "1287690"
  },
  {
    "text": "OK, so what's going on here. How could we,\nlike, explain this?",
    "start": "1287690",
    "end": "1293598"
  },
  {
    "text": "Tell me, like, if you were\ntrying to explain this to me in office hours and\nhigh level language, what's going on here?",
    "start": "1293598",
    "end": "1299030"
  },
  {
    "text": "Yeah. Sorry, no. Yeah, I thought you\nwere volunteering. Never mind.",
    "start": "1299030",
    "end": "1304670"
  },
  {
    "text": "Yeah, I guess one\nway I would maybe think about it is like you're\ndoing the same algorithm as the last slide.",
    "start": "1304670",
    "end": "1310470"
  },
  {
    "text": "Yes. But you're doing it a bunch\nof times on different chunks of the output. Yeah. So what I'm doing is that--",
    "start": "1310470",
    "end": "1317520"
  },
  {
    "text": "look at this, so\nwhat I'm doing is I'm saying we don't need\nthe whole temp buffer,",
    "start": "1317520",
    "end": "1323090"
  },
  {
    "text": "like the whole intermediate. What I'm doing is I'm\ndoing the first pass, but I'm only producing\nthree rows of output.",
    "start": "1323090",
    "end": "1330200"
  },
  {
    "text": "So I'm taking three rows and\nblurring them horizontally. And that's all the\ninformation I need",
    "start": "1330200",
    "end": "1337910"
  },
  {
    "text": "to then blur those vertically\nand get one row of final output.",
    "start": "1337910",
    "end": "1342920"
  },
  {
    "text": "So in other words,\nyou can think about it as you can read the code\nin the following way.",
    "start": "1342920",
    "end": "1350760"
  },
  {
    "text": "The outermost loop is\nfor every row of output. Then first generate\nthree temporary rows",
    "start": "1350760",
    "end": "1360260"
  },
  {
    "text": "that are needed to produce\nthat row of output. And then take those rows\nand blur them vertically",
    "start": "1360260",
    "end": "1368500"
  },
  {
    "text": "in order to produce\nthat one row of output. So the way I like to think\nabout this piece of code",
    "start": "1368500",
    "end": "1374440"
  },
  {
    "text": "is I just think\nabout for loops and I say, oh, look, for every\nrow of actual output,",
    "start": "1374440",
    "end": "1379929"
  },
  {
    "text": "first produce the\ninputs that are needed, and then consume those inputs\nto produce the row of output,",
    "start": "1379930",
    "end": "1386769"
  },
  {
    "text": "and then start over again. So the nice thing\nabout what I did was my temp buffer\nallocation moved",
    "start": "1386770",
    "end": "1394360"
  },
  {
    "text": "from the entire\nsize of the image down to approximately\nabout three rows, which",
    "start": "1394360",
    "end": "1399970"
  },
  {
    "text": "are good because those\nthree rows probably can fit in cache now. And I got my arithmetic\nintensity back.",
    "start": "1399970",
    "end": "1407560"
  },
  {
    "text": "So I'm doing this\ntwo-phase algorithm, which I thought was good,\nwithout the extra allocation.",
    "start": "1407560",
    "end": "1414159"
  },
  {
    "text": "And I made the temp\nbuffer small enough that writes to that temp\nbuffer and later reads",
    "start": "1414160",
    "end": "1419350"
  },
  {
    "text": "will hit the cache. ",
    "start": "1419350",
    "end": "1426270"
  },
  {
    "text": "What was the cost that I paid? Yeah [INAUDIBLE], like you're\ndoing rows multiple times",
    "start": "1426270",
    "end": "1431783"
  },
  {
    "text": "sometimes if they overlap\nbecause you're doing three every time. Yeah, so notice what's happening\nis like every row of temp buffer",
    "start": "1431783",
    "end": "1439559"
  },
  {
    "text": "really can be\nreused three times. But I'm producing a\nwhole row of temp--",
    "start": "1439560",
    "end": "1445830"
  },
  {
    "text": "three rows of temp, using\nit, then throwing out all that information, and then\ncomputing another three rows",
    "start": "1445830",
    "end": "1453290"
  },
  {
    "text": "of temp over and over again. So I'm recomputing\na bunch of things, which is diminishing\nthe benefits",
    "start": "1453290",
    "end": "1461440"
  },
  {
    "text": "of this two-phase approach. In fact, if I said how many\noperations per pixel do I",
    "start": "1461440",
    "end": "1467659"
  },
  {
    "text": "compute? Can you compute what it is? Or maybe, how many\noperations per row",
    "start": "1467660",
    "end": "1473780"
  },
  {
    "text": "that might be an easy\nway to think about it. So for every row of\noutput, what do I first do?",
    "start": "1473780",
    "end": "1481054"
  },
  {
    "text": " I do three operations\nper pixel for three rows,",
    "start": "1481055",
    "end": "1489470"
  },
  {
    "text": "and then I do another\nthree operations here. So I do 3 times 3 plus 3.",
    "start": "1489470",
    "end": "1496309"
  },
  {
    "text": "So I end up doing\n12 math operations per pixel, which is actually\nworse than I started, so I've",
    "start": "1496310",
    "end": "1505120"
  },
  {
    "text": "gone backwards. But it feels like\nI'm getting closer.",
    "start": "1505120",
    "end": "1511960"
  },
  {
    "text": "So what are some ideas? So I want to minimize\nthe math that I do.",
    "start": "1511960",
    "end": "1517029"
  },
  {
    "text": "I'd like to get it\ndown close to this 2n, but I want high arithmetic\nintensity and low footprint.",
    "start": "1517030",
    "end": "1526510"
  },
  {
    "text": "What can I do? Yeah. Instead of completely rebuilding\nthe tmp float for [INAUDIBLE]",
    "start": "1526510",
    "end": "1532623"
  },
  {
    "text": "just preserve the last two\nand then write the new-- OK, so if we're\nthinking sequentially, one thing we could\ndo is we could just",
    "start": "1532624",
    "end": "1539679"
  },
  {
    "text": "think about that red\nbuffer as a rolling buffer, slide two rows down\nand populate a new one,",
    "start": "1539680",
    "end": "1545830"
  },
  {
    "text": "and then we're off to the races. Now, we are going\nto pay the cost of sliding the two rows down. Just a mem copy.",
    "start": "1545830",
    "end": "1553990"
  },
  {
    "text": "So that could get a\nlittle bit annoying. Or we could actually just\nhave this code use indirection",
    "start": "1553990",
    "end": "1560440"
  },
  {
    "text": "to refer to the data. But now this code is going\nto get a little ugly.",
    "start": "1560440",
    "end": "1565570"
  },
  {
    "text": "And, in fact, by the\nway, if you do this, you will find that\nthe extra math indexing you put into\nthis code will slow you",
    "start": "1565570",
    "end": "1571640"
  },
  {
    "text": "down more than other stuff on\nalmost any modern computer.",
    "start": "1571640",
    "end": "1577460"
  },
  {
    "text": "Any other thoughts? By the way, if you\ndo this sequential-- if you do this sliding window\nrolling buffer thing, you,",
    "start": "1577460",
    "end": "1584820"
  },
  {
    "text": "all of a sudden,\nare now you just created dependencies\nbetween every row. And we didn't have\ndependencies between every row.",
    "start": "1584820",
    "end": "1591450"
  },
  {
    "text": "So that could come\nback to bite us when we want to paralyze\nthis thing, could. ",
    "start": "1591450",
    "end": "1598059"
  },
  {
    "text": "Any other ideas? Yeah, [INAUDIBLE] the\nbuffer and then just",
    "start": "1598060",
    "end": "1603382"
  },
  {
    "text": "keep them as three\nseparate pieces. OK, so by splitting up\nthe buffer into three, are you suggesting that\nlet me cut the input into--",
    "start": "1603382",
    "end": "1611612"
  },
  {
    "text": "[INAUDIBLE] you just\nsplit it up into three-- horizontal-- like three columns?",
    "start": "1611612",
    "end": "1618050"
  },
  {
    "text": "Oh, yeah, like just\n[INAUDIBLE] [? www, ?] and then just like\nlist it like that",
    "start": "1618050",
    "end": "1623508"
  },
  {
    "text": "I'm not-- so let me\nmake sure I understand. So the temp buffer is\ncurrently three rows, and you're proposing to cut it\nhorizontally into three columns",
    "start": "1623508",
    "end": "1631530"
  },
  {
    "text": "as well, three chunks? I'm proposing that [INAUDIBLE]\ndiagonal width times 3,",
    "start": "1631530",
    "end": "1637280"
  },
  {
    "text": "so you just make a\nbuffer of 3 of width. Like it's a 2D array\nwith 3 and then width.",
    "start": "1637280",
    "end": "1643790"
  },
  {
    "text": "But that's the same\nthing exactly in memory. Not the like the same Yeah, that's exactly the same. You just are using the\nconvenience of 2D indexing",
    "start": "1643790",
    "end": "1651169"
  },
  {
    "text": "and C, and I'm just\nflattening it myself. But under the hood, the\ncompiler would flatten it. So I think we're saying\nthe exact same thing.",
    "start": "1651170",
    "end": "1657260"
  },
  {
    "text": "Like, if you keep it as\nbuffer 1, 2, and then 3, like actually separate variables\nwould be this the same.",
    "start": "1657260",
    "end": "1663020"
  },
  {
    "text": "No, they would be\ncontiguous allocations, but maybe not contiguous\nin the heap, each of those. But I don't think that\nsolves my problem.",
    "start": "1663020",
    "end": "1670159"
  },
  {
    "text": "My problem is that either\nI have to copy contents from those buffers\nto each other,",
    "start": "1670160",
    "end": "1677690"
  },
  {
    "text": "or I have to index into the\nappropriate buffers here. So we're still in\nthe same place,",
    "start": "1677690",
    "end": "1683700"
  },
  {
    "text": "you actually just spread out\nthe data even more a little bit. Yeah.",
    "start": "1683700",
    "end": "1689360"
  },
  {
    "text": "Any other ideas? It's a similar but kind of just\nlike walking into maybe squares",
    "start": "1689360",
    "end": "1697190"
  },
  {
    "text": "or something. And you will have some overlap\non the edges where you compute, but you could then\nhave smaller buffers.",
    "start": "1697190",
    "end": "1706085"
  },
  {
    "text": "And that's actually there's\na couple of ways we can go, and I like that idea. So, first of all,\nthink about how",
    "start": "1706085",
    "end": "1711230"
  },
  {
    "text": "I've set up the problem\nhere in a row-wise thinking. Like the way I would say\nis for every row of output",
    "start": "1711230",
    "end": "1718429"
  },
  {
    "text": "independently compute the three\nrows of temp that you need",
    "start": "1718430",
    "end": "1724010"
  },
  {
    "text": "and then process\nthat row of output, and then do that for\nall rows of output.",
    "start": "1724010",
    "end": "1729790"
  },
  {
    "text": "What you're saying is-- the\nproblem with my solution is that for every row\nof output, we compute an extra row above and below.",
    "start": "1729790",
    "end": "1737160"
  },
  {
    "text": "And so for everything I do,\nI have two rows of overhead. Well, what if instead\nof just thinking",
    "start": "1737160",
    "end": "1742750"
  },
  {
    "text": "about every row\nof output, we said for every 10 rows of output\ncompute 12 rows of intermediate,",
    "start": "1742750",
    "end": "1750200"
  },
  {
    "text": "and then bang through it? We're still computing\nsome extra stuff,",
    "start": "1750200",
    "end": "1755820"
  },
  {
    "text": "but now it's only two\nextra things for every 10 instead of two extra\nthings for every one.",
    "start": "1755820",
    "end": "1761010"
  },
  {
    "text": "And that's where I'm going\nto go in the next slide. All I did here is now. Now look at the temp buffer.",
    "start": "1761010",
    "end": "1767610"
  },
  {
    "text": "The temp buffer is chunk\nsize plus 2 times width. So mentally in my head, I'm\nsaying for every chunk size",
    "start": "1767610",
    "end": "1775530"
  },
  {
    "text": "rows of output, first produced\nchunk size plus 2 rows of temp,",
    "start": "1775530",
    "end": "1782430"
  },
  {
    "text": "and then produce your output. And what's the overhead now? ",
    "start": "1782430",
    "end": "1791170"
  },
  {
    "text": "As chunk size gets\nbigger and bigger, this is going to trend towards\nmy original 2 in the algorithm.",
    "start": "1791170",
    "end": "1798770"
  },
  {
    "text": "So I'm encouraged to make\nchunk size as big as possible.",
    "start": "1798770",
    "end": "1804390"
  },
  {
    "text": "But what happens if I\nmake chunk size too big? Chunk [INAUDIBLE] the\ncache, and I get no benefits",
    "start": "1804390",
    "end": "1811620"
  },
  {
    "text": "of the chunking at all. This is the exact same\nsimilar to this blocking idea. So this is a way for me\nto change the program.",
    "start": "1811620",
    "end": "1819250"
  },
  {
    "text": "And if, let's say if\nthe chunk size is 16-- yeah, if the chunk\nsize is 16, we're",
    "start": "1819250",
    "end": "1825120"
  },
  {
    "text": "roughly if you actually work\nthrough the non-even math, it's about 6.4\noperations per pixel.",
    "start": "1825120",
    "end": "1830620"
  },
  {
    "text": "So a little bit more than 2n but\ncertainly not 9 and certainly not n squared for\nlarger chunk sizes.",
    "start": "1830620",
    "end": "1839150"
  },
  {
    "text": "Cool. So this is like that same\nproducer-consumer fusion trick",
    "start": "1839150",
    "end": "1845620"
  },
  {
    "text": "that you saw first in Spark. Then we saw it in the matrix\nmultiplication lecture.",
    "start": "1845620",
    "end": "1851470"
  },
  {
    "text": "And now you're seeing it again,\nreordering the computation",
    "start": "1851470",
    "end": "1856690"
  },
  {
    "text": "to maximize\narithmetic intensity. But here we're\nactually saying we're",
    "start": "1856690",
    "end": "1862540"
  },
  {
    "text": "willing to recompute a little\nbit in order to maximize arithmetic intensity.",
    "start": "1862540",
    "end": "1868240"
  },
  {
    "text": "So that's not something that's\nappeared in the other things. OK, now we're still not\ndone because we haven't",
    "start": "1868240",
    "end": "1875540"
  },
  {
    "text": "talked at all about SIMD. We haven't talked at all\nabout parallelization",
    "start": "1875540",
    "end": "1881630"
  },
  {
    "text": "and a bunch of other\nsmall scale things. How would you parallelize\nthis computation, by the way?",
    "start": "1881630",
    "end": "1888110"
  },
  {
    "text": "First of all, what\ncan be parallelized in how I've set it up? Can every output\nchunk be parallel?",
    "start": "1888110",
    "end": "1894190"
  },
  {
    "text": "Yes. And if you needed\nmore parallelization, you could actually break the\noutput chunks horizontally",
    "start": "1894190",
    "end": "1903160"
  },
  {
    "text": "as well into chunks. And then I just need-- I don't need three rows, I\nneed chunk-sized rows but not",
    "start": "1903160",
    "end": "1911912"
  },
  {
    "text": "the whole width of the\nrow, just like the width of the chunk plus 2. Now, there's another way\nto go about this that",
    "start": "1911912",
    "end": "1917940"
  },
  {
    "text": "suggests this sequential thing. I could have not\ndone this at all. I could have gone to\nback to this algorithm",
    "start": "1917940",
    "end": "1929520"
  },
  {
    "text": "where there's only a single\ntemp buffer of a few rows. And I could have taken\nyour idea of we're",
    "start": "1929520",
    "end": "1936060"
  },
  {
    "text": "just going to sliding\nwindow the thing. And then I'll get my parallelism\nby chunking the output",
    "start": "1936060",
    "end": "1941720"
  },
  {
    "text": "into columns. So I'm just going to\nslide down every column and hope that I have enough\nparallelism across my chunks.",
    "start": "1941720",
    "end": "1950880"
  },
  {
    "text": "And that's another way to do it. So there's a couple of\ndifferent ways you can do it. ",
    "start": "1950880",
    "end": "1957360"
  },
  {
    "text": "OK. Yeah. So essentially, if\nyou look carefully",
    "start": "1957360",
    "end": "1963929"
  },
  {
    "text": "at this code, what it's doing\nis exactly what we came up with. It's saying for every\nchunk of the output--",
    "start": "1963930",
    "end": "1972150"
  },
  {
    "text": "and every chunk of the output\nis actually 256 by 32--",
    "start": "1972150",
    "end": "1977350"
  },
  {
    "text": "for every chunk of the output. First, compute a\nchunk of temp that",
    "start": "1977350",
    "end": "1984010"
  },
  {
    "text": "is two elements wider\nand two elements higher. That's what these\nfor loops are doing.",
    "start": "1984010",
    "end": "1990330"
  },
  {
    "text": "So it's kind of saying\nproduce the output in tiles. And if you look at the outermost\nloops, it's for every tile in y",
    "start": "1990330",
    "end": "1996549"
  },
  {
    "text": "and x, first compute something\nthat's 256 plus 2 by 32",
    "start": "1996550",
    "end": "2004050"
  },
  {
    "text": "plus 2, 32 plus 1 and\n32 minus 1, produce that using 70 instructions.",
    "start": "2004050",
    "end": "2011110"
  },
  {
    "text": "This chunk size fits in cache,\nand then take that chunk and produce the output.",
    "start": "2011110",
    "end": "2018169"
  },
  {
    "text": "Would have been hard\nto see but pretty easy to actually explain in English.",
    "start": "2018170",
    "end": "2025810"
  },
  {
    "text": "So that's where we get into\nthe domain specific language. And, by the way,\nevery single time",
    "start": "2025810",
    "end": "2031544"
  },
  {
    "text": "you wanted to try something\na little bit different, maybe you said, oh, I want\nto go with this option, and then you say, oh, I want to\ntry that sliding window thing.",
    "start": "2031545",
    "end": "2039610"
  },
  {
    "text": "Imagine how long it would take\nyou to get to a sliding window implementation from this.",
    "start": "2039610",
    "end": "2044710"
  },
  {
    "text": "If you're a really\nproficient, it might take you a\nfull day or something just to try this thing out. OK, so Halide is a\nlanguage that's not really",
    "start": "2044710",
    "end": "2053859"
  },
  {
    "text": "designed like-- it's\nnot like PyTorch that's meant to allow people\nthat don't know much about",
    "start": "2053860",
    "end": "2059230"
  },
  {
    "text": "parallel programming to\nget good performance. It's a language\ndesigned to allow 149 students to finish their\nassignments much more quickly.",
    "start": "2059230",
    "end": "2068300"
  },
  {
    "text": "So it's a language that for\npeople that basically are like, oh I know I want to try\nand block it in this way",
    "start": "2068300",
    "end": "2074510"
  },
  {
    "text": "and go vector across\nthis loop, but I don't want to write the code.",
    "start": "2074510",
    "end": "2079550"
  },
  {
    "text": "So if ISBC says, I don't want\nto write this code, that's what it helps you with.",
    "start": "2079550",
    "end": "2085260"
  },
  {
    "text": "Halide for image\nprocessing says, I don't even want to\ndeal with all these loops",
    "start": "2085260",
    "end": "2090440"
  },
  {
    "text": "and things like that. So let me give you some\nexamples of some Halide code.",
    "start": "2090440",
    "end": "2096489"
  },
  {
    "text": "And Halide is\ncompletely functional. So notice that there's no\nloops in this code at all.",
    "start": "2096489",
    "end": "2103440"
  },
  {
    "text": "And Halide has a concept of\nwhat they call a function because this is functional.",
    "start": "2103440",
    "end": "2109710"
  },
  {
    "text": "But you could think about\nthese things as tensors if you wanted to. So let me look at\nthe code for you.",
    "start": "2109710",
    "end": "2116450"
  },
  {
    "text": "So blurx is a function that's\nparameterized on x and y.",
    "start": "2116450",
    "end": "2121990"
  },
  {
    "text": "So in other words, saying\nblurx is a function that if you give me\na x and a y value,",
    "start": "2121990",
    "end": "2127140"
  },
  {
    "text": "the function will give you the\nvalue of the pixel at that x and y. So what function does.",
    "start": "2127140",
    "end": "2133860"
  },
  {
    "text": "And the function is defined\nin terms of inputs and outputs of other functions.",
    "start": "2133860",
    "end": "2140160"
  },
  {
    "text": "So this says that the output\nof the blurx function at x, y is one 1/3 times the value of\nin function at x minus 1y plus--",
    "start": "2140160",
    "end": "2151860"
  },
  {
    "text": "or 1/3 times quantity\nthese three values,",
    "start": "2151860",
    "end": "2157170"
  },
  {
    "text": "or, in other words, the\naverage of those three values. And there's another\nfunction blury. And its value at x, y is the\naverage of these blurx values.",
    "start": "2157170",
    "end": "2168539"
  },
  {
    "text": "So I'm building up\nthe expression tree to say if you want to\nknow the value at blurxy,",
    "start": "2168540",
    "end": "2175590"
  },
  {
    "text": "this is the expression defined\nin terms of predecessor functions on how you get it.",
    "start": "2175590",
    "end": "2182320"
  },
  {
    "text": "And notice that in\nhere, in is technically a buffer, which basically\nis a special function that",
    "start": "2182320",
    "end": "2189210"
  },
  {
    "text": "was loaded from the\nactual input data itself. Yes. Here is how you handle\nedge cases here,",
    "start": "2189210",
    "end": "2195330"
  },
  {
    "text": "because if you\nput x and y as 0s, you're going to get\nn minus 1 over 0.",
    "start": "2195330",
    "end": "2200340"
  },
  {
    "text": "That's correct. So that's a great question. I'd like to not\nreally deal with it.",
    "start": "2200340",
    "end": "2205570"
  },
  {
    "text": "You should just say you\nshould look up at n negative 1 exactly as you\nwrote the program.",
    "start": "2205570",
    "end": "2211390"
  },
  {
    "text": "So the real question you're\nasking is what is in negative 1. Is that an error? Like if it was an\narray, it's an error.",
    "start": "2211390",
    "end": "2216890"
  },
  {
    "text": " [INAUDIBLE]",
    "start": "2216890",
    "end": "2222100"
  },
  {
    "text": "You can. But since this is a domain\nspecific language and domain specific language are\nmeant to be productive,",
    "start": "2222100",
    "end": "2227920"
  },
  {
    "text": "something I'm not\nshowing on the slide is I could easily set\nblury.boundary condition equals",
    "start": "2227920",
    "end": "2233619"
  },
  {
    "text": "0 or something like that. And Halide compiler\nwill emit the math that detects the\nboundary conditions",
    "start": "2233620",
    "end": "2240040"
  },
  {
    "text": "and outputs the right value. So that's why I don't\nwant to deal with it for the rest of the lecture. But that is a\nproductivity benefit",
    "start": "2240040",
    "end": "2246550"
  },
  {
    "text": "of the language of handling\nboundary conditions efficiently for you. And really what Halide\nwill do is it potentially",
    "start": "2246550",
    "end": "2251980"
  },
  {
    "text": "will generate code\nnot where there's an if statement\nin the inner loop, but it will actually generate\na loop for I equals 1 to n",
    "start": "2251980",
    "end": "2259329"
  },
  {
    "text": "minus 1 that has\nno if statements, and then generate other loops\nfor the boundary conditions",
    "start": "2259330",
    "end": "2264730"
  },
  {
    "text": "and stuff like that, which would\nbe absolutely messy if I showed it to you in this.",
    "start": "2264730",
    "end": "2270020"
  },
  {
    "text": "So that's the\nproductivity part of this. And I just want to give\nyou some more examples.",
    "start": "2270020",
    "end": "2276200"
  },
  {
    "text": "So this says that\nif I have a function blury, which is defined on x and\ny and has some value at x and y.",
    "start": "2276200",
    "end": "2283070"
  },
  {
    "text": "Then here's a\nfunction called bright of x, y, which is defined\nas the value of blury times",
    "start": "2283070",
    "end": "2289730"
  },
  {
    "text": "1.25 value clamped to 255.",
    "start": "2289730",
    "end": "2296080"
  },
  {
    "text": "So bright x,y is just blury all\npixels times 1.25 but make sure",
    "start": "2296080",
    "end": "2302560"
  },
  {
    "text": "you clamp them to 255. And then there's even a gather--",
    "start": "2302560",
    "end": "2307700"
  },
  {
    "text": "we talked about data parallel\ngather output at x,y could be use the value of bright x,y as\nan index to look up the pixel",
    "start": "2307700",
    "end": "2317200"
  },
  {
    "text": "location in this function. So this is a gather. All of these other ones are\nmaps over all x and y's.",
    "start": "2317200",
    "end": "2324580"
  },
  {
    "text": "So it's just a functional\nprogramming language. And so we're defining the\nexpression for how to compute",
    "start": "2324580",
    "end": "2330160"
  },
  {
    "text": "x,y. And then this last\nline of code just says, give me an actual\nC-style buffer where",
    "start": "2330160",
    "end": "2338089"
  },
  {
    "text": "I have evaluated the function\nout at all values between 0 and 124 and x and\n0 and 124 and y.",
    "start": "2338090",
    "end": "2347599"
  },
  {
    "text": "This is delayed\nevaluation, basically. And so the nice thing about this\nis like we have these functions.",
    "start": "2347600",
    "end": "2355329"
  },
  {
    "text": "And if you think about\nimage processing, if I explain to\nyou what is a blur, I don't give you a convolution.",
    "start": "2355330",
    "end": "2361480"
  },
  {
    "text": "I typically say\nthe way you compute a blur is you take\nevery pixel and you average everything around it.",
    "start": "2361480",
    "end": "2367170"
  },
  {
    "text": "And that's exactly what\nthis code looks like. So the expression is productive\nin that it handles boundary",
    "start": "2367170",
    "end": "2373680"
  },
  {
    "text": "conditions, but the code looks\nlike the math and the way we talk about the algorithms.",
    "start": "2373680",
    "end": "2380140"
  },
  {
    "text": "So, in some sense, the\ncode looks a lot like NumPy or something like that. But just keep in mind\nthat these are functions,",
    "start": "2380140",
    "end": "2386680"
  },
  {
    "text": "these are not arrays or tensors. You can think\nabout them as such.",
    "start": "2386680",
    "end": "2391750"
  },
  {
    "text": "But don't. So if I wanted to think\nabout this program as a DAG,",
    "start": "2391750",
    "end": "2399090"
  },
  {
    "text": "as a list of tasks, I\nwould think about it as every one of these\nfunctions is a node",
    "start": "2399090",
    "end": "2405710"
  },
  {
    "text": "and they depend on\nprior functions. So I would say that\nin this case, look, so we have an input function.",
    "start": "2405710",
    "end": "2412020"
  },
  {
    "text": "Blurx is derived from n. Blury is derived from blurx.",
    "start": "2412020",
    "end": "2417290"
  },
  {
    "text": "bright is derived\nfrom blury, and out is derived from\nlookup and bright.",
    "start": "2417290",
    "end": "2425450"
  },
  {
    "text": "So let's check that. Yep. So I have a chain\nof just dependencies and output came from values in\nbright and values in lookup.",
    "start": "2425450",
    "end": "2433615"
  },
  {
    "text": " Question? Right, oh, it might\nhave been an iPhone.",
    "start": "2433615",
    "end": "2440500"
  },
  {
    "text": "So, first of all, does\neverybody at least cursory understand what this\nprogram should compute and be",
    "start": "2440500",
    "end": "2449809"
  },
  {
    "text": "specific about what\nit should compute, not how it should compute it,\nbut what it should compute. If I populate it in\nwith a bunch of pixels,",
    "start": "2449810",
    "end": "2457490"
  },
  {
    "text": "and I populated lookup with\na bunch of pixels like loaded in an image into it,\nyou would say, yeah,",
    "start": "2457490",
    "end": "2464570"
  },
  {
    "text": "I have an idea of what\nout x,y should be. And this graph gives it to you.",
    "start": "2464570",
    "end": "2470770"
  },
  {
    "text": "OK. So here is the\nHalide representation",
    "start": "2470770",
    "end": "2476300"
  },
  {
    "text": "of the two past blur that\nwe've been talking about. We have an input, which\ncame from an image.",
    "start": "2476300",
    "end": "2482870"
  },
  {
    "text": "We have our first function\nblurx, which says blurx at x,y, well, every pixel should just\ncome from the average of these",
    "start": "2482870",
    "end": "2491450"
  },
  {
    "text": "three pixels and in. And then I have out x,y, which\ncomes from the average of these",
    "start": "2491450",
    "end": "2497690"
  },
  {
    "text": "three vertically\noriented pixels in blurx. So my entire C code, which if\nwe go back, this algorithm in C",
    "start": "2497690",
    "end": "2506870"
  },
  {
    "text": "looked like this, in\nHalide, it looks like that.",
    "start": "2506870",
    "end": "2515710"
  },
  {
    "text": "Kind of just follows the\nmathematical formulation of it. So that's pretty cool. First of all, it's a\nlittle bit more elegant.",
    "start": "2515710",
    "end": "2521800"
  },
  {
    "text": "You can read the code. If you're an\nalgorithm developer, you probably know\nwhat this meant. Now, this code in it\nhas one two functions.",
    "start": "2521800",
    "end": "2531620"
  },
  {
    "text": "It has two stages. That's like the dependency\ngraph on the right. If you take a look at more\nrealistic image processing",
    "start": "2531620",
    "end": "2538840"
  },
  {
    "text": "programs, they have\na lot of stages. And at least about six\nor seven years ago,",
    "start": "2538840",
    "end": "2544990"
  },
  {
    "text": "your Google [? HDR ?] plus\nyour camera application, that application was\nabout 2,000 Halide stages.",
    "start": "2544990",
    "end": "2555440"
  },
  {
    "text": "So when you think about what\nthis Halide program means if you were the Halide compiler,\nyou might in your head right now",
    "start": "2555440",
    "end": "2564349"
  },
  {
    "text": "be thinking, OK, if\nI'm the Halide compiler and this was my\nprogram at the top,",
    "start": "2564350",
    "end": "2569690"
  },
  {
    "text": "that I showed you\non the last slide, I'm mentally translating that\nprogram to this implementation",
    "start": "2569690",
    "end": "2576680"
  },
  {
    "text": "in a C-like language. For every function,\nallocate an array.",
    "start": "2576680",
    "end": "2583150"
  },
  {
    "text": "Just turn a function into a\ntensor, a 2D array or a matrix. And then for every equality\nstatement, for every expression,",
    "start": "2583150",
    "end": "2592450"
  },
  {
    "text": "that is an operation that runs\nfor every pixel in the output array, and compute the values.",
    "start": "2592450",
    "end": "2599530"
  },
  {
    "text": "So, in some sense, can you\nconfirm that this makes sense? Like this is a\nvalid implementation",
    "start": "2599530",
    "end": "2606820"
  },
  {
    "text": "of that code up above. So the Halide compiler basically\njust writes these loops for you. ",
    "start": "2606820",
    "end": "2623809"
  },
  {
    "text": "It's coming. So, first of all, just\nlike this is now precise. This compilation has generated\na sequential C program--",
    "start": "2623810",
    "end": "2633060"
  },
  {
    "text": "assume these are for loops\nthat allocates these three buffers exactly, what we said.",
    "start": "2633060",
    "end": "2639200"
  },
  {
    "text": "I wrote this in C\nearlier in the lecture. So I first I'm\nestablishing that this",
    "start": "2639200",
    "end": "2644380"
  },
  {
    "text": "is a valid compilation\nof that program, and there might be additional\nvalid compilations.",
    "start": "2644380",
    "end": "2651200"
  },
  {
    "text": "OK, all right. So a key aspect of any\nof these DSL systems",
    "start": "2651200",
    "end": "2657160"
  },
  {
    "text": "is thinking about\nwho your users are and thinking about what\nis hard for them, what",
    "start": "2657160",
    "end": "2663339"
  },
  {
    "text": "do you want to make easier. So I would say that even\nthough what I just showed you",
    "start": "2663340",
    "end": "2668770"
  },
  {
    "text": "on this slide, it's kind of\nnice that I can write things in two lines of code.",
    "start": "2668770",
    "end": "2674510"
  },
  {
    "text": "You could have written\nthe C code in 10 minutes. So if I write two\nlines of code versus I",
    "start": "2674510",
    "end": "2680240"
  },
  {
    "text": "write the C code\nin 5 to 8 minutes, that's not that\nbig of a benefit. There's some nice syntactic\nsugar and stuff like that,",
    "start": "2680240",
    "end": "2687350"
  },
  {
    "text": "but it's not that\nbig of a benefit. Maybe if we get boundary\nconditions in there, it might help you a\nlittle bit and stuff,",
    "start": "2687350",
    "end": "2693078"
  },
  {
    "text": "but that's not the real thing. The hard thing is if I go\nback, how long it would",
    "start": "2693078",
    "end": "2698090"
  },
  {
    "text": "take you to come up with this. Even if you knew what\nyou were doing in 149,",
    "start": "2698090",
    "end": "2703559"
  },
  {
    "text": "you don't know what\nthe right answer is for a particular machine. Think about all the iteration\nyou do on your programming",
    "start": "2703560",
    "end": "2708780"
  },
  {
    "text": "assignments. So what Halide is--\nthe Halide programmers had written a bunch of\nthese things in assembly.",
    "start": "2708780",
    "end": "2716690"
  },
  {
    "text": "And they say what\nwe want is it'd be nice to have a\nnice compact syntax. But what we really want is to\nexplore the optimization choices",
    "start": "2716690",
    "end": "2725380"
  },
  {
    "text": "that we know are likely\noptimization choices, and we want to do\nit very quickly.",
    "start": "2725380",
    "end": "2730670"
  },
  {
    "text": "So the job is not expressing the\nimage processing calculation,",
    "start": "2730670",
    "end": "2736220"
  },
  {
    "text": "the task at hand,\nthe challenge at hand is to do your 149 assignment,\nwhich is to make it fast.",
    "start": "2736220",
    "end": "2742500"
  },
  {
    "text": "And Halide introduces\na set of ideas that allow you to\ndescribe how you",
    "start": "2742500",
    "end": "2749670"
  },
  {
    "text": "want to make it\nfast at the level that we talk about\nit in lecture. So what Halide has is\nif the stuff that's",
    "start": "2749670",
    "end": "2757350"
  },
  {
    "text": "in the white background is the\nHalide program that expresses what to compute,\nexpresses the algorithm",
    "start": "2757350",
    "end": "2763770"
  },
  {
    "text": "that is complemented by another\nset of programming primitives, which I'm not going to\nexplain just yet, which",
    "start": "2763770",
    "end": "2769320"
  },
  {
    "text": "is called the schedule. And the schedule is\nthe explicit direction",
    "start": "2769320",
    "end": "2774630"
  },
  {
    "text": "on how to generate\ncode for this. And I'm going to read this\noff to you quickly in English,",
    "start": "2774630",
    "end": "2782549"
  },
  {
    "text": "and then I'll break it down\nover the next couple of slides. Here, the programmer has\nspecified exactly the solution",
    "start": "2782550",
    "end": "2789720"
  },
  {
    "text": "that we came up with, which is\nI want you to compute output in tiles of 256 by 32.",
    "start": "2789720",
    "end": "2796320"
  },
  {
    "text": "Please go ahead and call\nthe loops of those tiles x and y and then x\ninner and y inner.",
    "start": "2796320",
    "end": "2803080"
  },
  {
    "text": "So x and y are\nwhich tile we are, and xi and yi are the inner\nloops within those tiles.",
    "start": "2803080",
    "end": "2810700"
  },
  {
    "text": "And then I want you to vectorize\nthe loop that's called xi with 8-wide SIMD. And I want you to go thread\nparallel across the y loop.",
    "start": "2810700",
    "end": "2819380"
  },
  {
    "text": "The result of that\nwill be the code that I gave you on\nthe previous slide. And if you're like, erh, I\ndon't know if this is working,",
    "start": "2819380",
    "end": "2825960"
  },
  {
    "text": "maybe I should\nchange my tile size. You just change the\nparameters here, and you get a new tile size and\nit re-vectorizes it for you.",
    "start": "2825960",
    "end": "2833200"
  },
  {
    "text": "Or if you say, oh, I don't\nwant to vectorize the xi loop, let's actually go ahead and do\nour SIMD over the outermost loop",
    "start": "2833200",
    "end": "2838900"
  },
  {
    "text": "or something like that, you\njust change those parameters. So that's where we're\ngoing with this.",
    "start": "2838900",
    "end": "2843940"
  },
  {
    "text": "So these scheduling\ndirectives give you a couple of different\ntypes of primitives.",
    "start": "2843940",
    "end": "2849890"
  },
  {
    "text": "So some of the\nprimitives are related to how do you iterate over\nthe elements of a function.",
    "start": "2849890",
    "end": "2856780"
  },
  {
    "text": "Row major, column major,\nblocked, and so on and so on. So these are just some\ndifferent examples of iteration.",
    "start": "2856780",
    "end": "2864876"
  },
  {
    "text": "Like, I want you to go\nserial over the y dimension-- I want it to be x major and\nserial, so just what you think.",
    "start": "2864876",
    "end": "2873550"
  },
  {
    "text": "Or I want it to be\ncolumn major, or I want it to be serial\nalong all the y's, but",
    "start": "2873550",
    "end": "2879790"
  },
  {
    "text": "along the x direction, you're\ngoing to be vectorized. Or I want it to be thread\nparallel along all the rows, all",
    "start": "2879790",
    "end": "2887440"
  },
  {
    "text": "the different y's are different\nthreads but vectorized in this direction. So you have the\nability to express",
    "start": "2887440",
    "end": "2892810"
  },
  {
    "text": "all the different permutations\nthat you think you might want. OK. All right. So let's get into\nactually some details.",
    "start": "2892810",
    "end": "2899940"
  },
  {
    "text": "So let's look at this\none line of the schedule. And again, I don't care if\nyou walk away knowing this,",
    "start": "2899940",
    "end": "2906540"
  },
  {
    "text": "but these concrete examples give\nyou a sense of what's possible. As we said, that oh, this\nout.tile basically says,",
    "start": "2906540",
    "end": "2914730"
  },
  {
    "text": "I want you to compute\nthe output not in row major order by default\nbut in tiles and tiles of size",
    "start": "2914730",
    "end": "2921930"
  },
  {
    "text": "256 by 32. That's what that says. And we decided we\nwere going to do that",
    "start": "2921930",
    "end": "2927420"
  },
  {
    "text": "and we might need to name\nthe loops of the variables. So we're going to call it--",
    "start": "2927420",
    "end": "2933809"
  },
  {
    "text": "the code says if you need\na handle in the future, we're going to create--",
    "start": "2933810",
    "end": "2939240"
  },
  {
    "text": "in tiling the code,\nremember, there's for loops. And we're going to refer to\nthose loops as x,y and then x",
    "start": "2939240",
    "end": "2945120"
  },
  {
    "text": "inner and y inner. And then, so you can\nthink about every one",
    "start": "2945120",
    "end": "2952020"
  },
  {
    "text": "of these Halide\nschedule statements as actually manipulating a loop\nnest that exists in the program.",
    "start": "2952020",
    "end": "2958710"
  },
  {
    "text": "So by default, we had a loop\nnest which looked like this.",
    "start": "2958710",
    "end": "2967210"
  },
  {
    "text": "By default if that\nwas the program, Halide had this loop nest, which\nwas for all x,y create blurx,",
    "start": "2967210",
    "end": "2976029"
  },
  {
    "text": "and then for all x,y create out. And so what that statement\ndid said, oh, hey,",
    "start": "2976030",
    "end": "2982750"
  },
  {
    "text": "you know the loop nest\nthat creates out-- that's what our\ncode did-- it said, I want you to modify it so\nthat it was a tiled loop nest,",
    "start": "2982750",
    "end": "2991390"
  },
  {
    "text": "and I want you to call\nthe four loops that would result from that\ntiling xy, and xi, and yi.",
    "start": "2991390",
    "end": "2999760"
  },
  {
    "text": "So Halide is actually\nthere's a language for specifying your algorithm.",
    "start": "2999760",
    "end": "3004780"
  },
  {
    "text": "And then there's\na language that's imperative that describes a\nsequence of transformations on the loop nest that\nyou want to create.",
    "start": "3004780",
    "end": "3012330"
  },
  {
    "text": "So imagine that we did\na transformation that created for loops here with\nan output that iterated",
    "start": "3012330",
    "end": "3018390"
  },
  {
    "text": "over tiles of 256 by 32. Now, once you have\nthat loop nest",
    "start": "3018390",
    "end": "3027060"
  },
  {
    "text": "so that tile returns\nthe new loop nest. And then I say, oh,\nplease, when you",
    "start": "3027060",
    "end": "3034230"
  },
  {
    "text": "generate code for the xy loop,\nI want that to be vectorized. And when you generate\ncode iterating over y's, I",
    "start": "3034230",
    "end": "3042000"
  },
  {
    "text": "don't want it sequential,\nI want that parallelized over thread pool. That's what that\nwhole line says.",
    "start": "3042000",
    "end": "3048060"
  },
  {
    "text": "And so the result of that would\nbe some code for the blurx loop that used to be for all\nx and then all y, now",
    "start": "3048060",
    "end": "3056010"
  },
  {
    "text": "notice it has for\nloop variables, and the Xi loop is vectorized,\nand this loop just imagine",
    "start": "3056010",
    "end": "3064230"
  },
  {
    "text": "it was paralyzed with threads. So you're telling the\ncompiler at a high level",
    "start": "3064230",
    "end": "3069770"
  },
  {
    "text": "how you want to do this. OK, so loop ordering is\none class of things you do.",
    "start": "3069770",
    "end": "3075480"
  },
  {
    "text": "And then the other class,\nwhat was the other big thing we did is we did fusion. And fusion is like putting\nsome loops inside of others.",
    "start": "3075480",
    "end": "3084160"
  },
  {
    "text": "So here I said\nout that tile that created this output loop nest.",
    "start": "3084160",
    "end": "3091290"
  },
  {
    "text": "And then remember, for\nevery tile in my solution, I first had to compute\nthe temp buffer that was",
    "start": "3091290",
    "end": "3096600"
  },
  {
    "text": "needed to produce the output. That's this loop nest.",
    "start": "3096600",
    "end": "3102069"
  },
  {
    "text": "So by default, if I say\nthe blurx loop nest, there's this command\ncalled compute_root(),",
    "start": "3102070",
    "end": "3108160"
  },
  {
    "text": "which basically means compute\nit at the root of the hierarchy, which means don't compute it\nwithin anybody else's loop nest.",
    "start": "3108160",
    "end": "3114460"
  },
  {
    "text": "So what this code would do is it\ncomputes the entire temp buffer,",
    "start": "3114460",
    "end": "3119950"
  },
  {
    "text": "because notice that we've\nallocated the temp buffer, and then just accesses that temp\nbuffer while iterating in tiles.",
    "start": "3119950",
    "end": "3128910"
  },
  {
    "text": "It's a valid program. Doesn't make that much\nsense why you would do this, but it's valid. And now what I'm going to\ndo is I'm going to say,",
    "start": "3128910",
    "end": "3135470"
  },
  {
    "text": "hey, this blurx loop,\nlet's go ahead and shove it right here so that for\nevery tile of output,",
    "start": "3135470",
    "end": "3143210"
  },
  {
    "text": "we first just generate\na tile of temp, and then we use\nthe tile of temp.",
    "start": "3143210",
    "end": "3148950"
  },
  {
    "text": "So I'm going to say, hey, blurx. Actually, I want you to compute\nit at the xi loop of out,",
    "start": "3148950",
    "end": "3155880"
  },
  {
    "text": "which actually I shoved\nit in even further. I shoved it into\nthe innermost loop.",
    "start": "3155880",
    "end": "3161900"
  },
  {
    "text": "And so now Halide goes, oh,\nfor every innermost loop, every output pixel needs\nthree pixels of temp.",
    "start": "3161900",
    "end": "3169240"
  },
  {
    "text": "So I'm going to create\nthree pixels of temp, and then we're going to use it. I'm going to get three pixels of\ntemp, and we're going to use it.",
    "start": "3169240",
    "end": "3176270"
  },
  {
    "text": "And to get to the code that\nwe actually talked about, I actually want to do\nblurx.compute_at what?",
    "start": "3176270",
    "end": "3184050"
  },
  {
    "text": "I would actually want it\nto be blurx.compute_at(x). ",
    "start": "3184050",
    "end": "3189320"
  },
  {
    "text": "And blurx.compute_at(x) would\nshove that into the x loop.",
    "start": "3189320",
    "end": "3195290"
  },
  {
    "text": "And so it says for every tile,\nfirst compute 256 by 34 elements",
    "start": "3195290",
    "end": "3202640"
  },
  {
    "text": "and then use them. And then throw it out and\ncompute another set of elements",
    "start": "3202640",
    "end": "3208130"
  },
  {
    "text": "and then use them. So the summary of actually\ngetting to the loop nest",
    "start": "3208130",
    "end": "3214610"
  },
  {
    "text": "that I showed you in\nthat assembly code would be those two lines\nof Halide schedule.",
    "start": "3214610",
    "end": "3221280"
  },
  {
    "text": "You know, you set up the\nloop nest for output, and then you figure out\nwhere to put the producer inside that loop nest.",
    "start": "3221280",
    "end": "3227220"
  },
  {
    "text": "So this is actually kind\nof interesting, right? This is not the most\ntypical of systems. The philosophy here\nis the programmer",
    "start": "3227220",
    "end": "3234540"
  },
  {
    "text": "is responsible for describing\nan image processing pipeline. That's the algorithm.",
    "start": "3234540",
    "end": "3239730"
  },
  {
    "text": "But the programmer is\nalso responsible for doing all the conceptual thinking\nabout how to optimize it,",
    "start": "3239730",
    "end": "3246090"
  },
  {
    "text": "and that's the schedule. And there's two cooperating\ndomain specific languages",
    "start": "3246090",
    "end": "3252640"
  },
  {
    "text": "to do those two things. And then the compiler is\nresponsible for basically carrying out its orders.",
    "start": "3252640",
    "end": "3258970"
  },
  {
    "text": "If you're on ARM,\ngenerate these intrinsics, and this threaded code. If you're on X86,\ndo this, handle",
    "start": "3258970",
    "end": "3265830"
  },
  {
    "text": "the boundary conditions and\nthe allocations appropriately and stuff like that. So by knowing all\nof the dependencies,",
    "start": "3265830",
    "end": "3273450"
  },
  {
    "text": "by being functional, basically,\nthere's no pointer chasing or anything like\nthat, the compiler",
    "start": "3273450",
    "end": "3279150"
  },
  {
    "text": "has knowledge that it can\nmove these loop nests around and change all your\nindexing for you",
    "start": "3279150",
    "end": "3284580"
  },
  {
    "text": "and never change the\ncorrectness of the program. So the idea in Halide is that\nif you modify the scheduler,",
    "start": "3284580",
    "end": "3291000"
  },
  {
    "text": "you will never\nchange the output. It's just an optimization.",
    "start": "3291000",
    "end": "3296740"
  },
  {
    "text": "And then some really\nearly results, which are now\nbasically a decade old. The initial papers show that\nwe could write less code",
    "start": "3296740",
    "end": "3304810"
  },
  {
    "text": "and actually get\nhigher performance most of the time than\nhand-tuned assembly.",
    "start": "3304810",
    "end": "3309860"
  },
  {
    "text": "Even if the compiler\ndoesn't generate as good of assembly code as\nwhat a good programmer would do by hand, the programmer\nis able to iterate",
    "start": "3309860",
    "end": "3317619"
  },
  {
    "text": "over the high level\ndesign space more rapidly and try more things. So the global\nstructure was better,",
    "start": "3317620",
    "end": "3324520"
  },
  {
    "text": "even if the code might have\nbeen 10%, 20%, 30% slower than a good programmer. And so that was the thing.",
    "start": "3324520",
    "end": "3333202"
  },
  {
    "text": "And then Google--\nsome of the folks that did this went to Google. And they did it\nfull-time at Google, even though it stayed open\nsource for a long time.",
    "start": "3333202",
    "end": "3340220"
  },
  {
    "text": "And this became robust enough to\nbe the compiler for the Google image processing pipeline.",
    "start": "3340220",
    "end": "3345770"
  },
  {
    "text": "So that's the history here. So again, I want to emphasize,\nif we take a step back,",
    "start": "3345770",
    "end": "3352059"
  },
  {
    "text": "like Halide does not\nhelp you write fast code. Well, it helps-- it\ndoesn't help a naive,",
    "start": "3352060",
    "end": "3358130"
  },
  {
    "text": "non-performance oriented\nprogrammer do anything. Like, if you haven't\ntaken 149, how the heck do you even write a schedule?",
    "start": "3358130",
    "end": "3363960"
  },
  {
    "text": "You don't know anything. You don't know any\nof the concepts. But it helps\nsomeone like you all who know what the space\nof things you want to try",
    "start": "3363960",
    "end": "3371970"
  },
  {
    "text": "get through that space of\nthings in a couple hours in an afternoon for\nmore complex functions.",
    "start": "3371970",
    "end": "3379230"
  },
  {
    "text": "And it did turn out\nthat they're weren't very many 149 programmers.",
    "start": "3379230",
    "end": "3384500"
  },
  {
    "text": "Even at Google, there\nwere about 80 programmers that wrote Halide algorithms\nand a very small number",
    "start": "3384500",
    "end": "3392000"
  },
  {
    "text": "of programmers that actually\nwrote the schedules. And I think by very small\nnumber of like three.",
    "start": "3392000",
    "end": "3398605"
  },
  {
    "text": "Literally, like when one of\nthem went on paternity leave, nobody wrote schedules\nfor a while at Halide. ",
    "start": "3398605",
    "end": "3407400"
  },
  {
    "text": "In the last three to four\nyears, one of the things that these abstractions\nof the schedule--",
    "start": "3407400",
    "end": "3413400"
  },
  {
    "text": "notice what they do is they\ngive you this very structured, organized design space.",
    "start": "3413400",
    "end": "3420240"
  },
  {
    "text": "The process of\noptimizing a program is choosing the loop nest and\nchoosing where to put things in that loop nest.",
    "start": "3420240",
    "end": "3426550"
  },
  {
    "text": "And that extremely\nstructured design space has turned out to also be\nincredibly useful to guide",
    "start": "3426550",
    "end": "3433380"
  },
  {
    "text": "automated search. And so there's been this idea\nof how the heck do we actually",
    "start": "3433380",
    "end": "3438840"
  },
  {
    "text": "get rid of those\nthree programmers at Google for almost most of\nthese computations, right.",
    "start": "3438840",
    "end": "3445299"
  },
  {
    "text": "And we did a little bit\nof early work on this. And then in 2016--\nand then 2019,",
    "start": "3445300",
    "end": "3451440"
  },
  {
    "text": "there was a paper\nthat was led by one of the co-creators of Google. I did help with\nit, but it really",
    "start": "3451440",
    "end": "3456539"
  },
  {
    "text": "was this person,\nAndrew Adams, who was the big worker on it\nthat was able to come up",
    "start": "3456540",
    "end": "3464190"
  },
  {
    "text": "with some algorithms that\njust used game playing techniques like tree search\nand stuff from an AI class",
    "start": "3464190",
    "end": "3471410"
  },
  {
    "text": "to search the space of schedules\nand come up with schedules that were pretty darn good. As in, all of you\nwould work really",
    "start": "3471410",
    "end": "3478270"
  },
  {
    "text": "hard to get as\ngood as schedules. And I'll show you just some fun\nresults from not this paper.",
    "start": "3478270",
    "end": "3484484"
  },
  {
    "text": "The results I'm\nabout to show you are not as good as this paper,\nbut we'll step back two years because this paper didn't\nhave a graph like this.",
    "start": "3484485",
    "end": "3491210"
  },
  {
    "text": "Here was the human\nstudy assistance paper. The x-axis is time.",
    "start": "3491210",
    "end": "3497770"
  },
  {
    "text": "The y-axis is throughput\nin pixels per second, so higher is better. And these are three different\nimage processing applications.",
    "start": "3497770",
    "end": "3505380"
  },
  {
    "text": "It doesn't matter what they are. So we went to two of\nthese three people",
    "start": "3505380",
    "end": "3510718"
  },
  {
    "text": "at Google that were the best\nin the world at optimizing schedules. And we said, you've never\nseen this program before.",
    "start": "3510718",
    "end": "3517750"
  },
  {
    "text": "Here's the Halide algorithm. Please write the\nschedule for it. And basically the\nway these folks work",
    "start": "3517750",
    "end": "3523150"
  },
  {
    "text": "is they write the schedule, they\nobjdump, look at the assembly, and go, yeah, that's\nnot the right assembly.",
    "start": "3523150",
    "end": "3528610"
  },
  {
    "text": "Let me-- [CHUCKLES] So they're actually\nlooking at assembly but never writing assembly.",
    "start": "3528610",
    "end": "3533950"
  },
  {
    "text": "And it's kind of funny is this\nis what the auto schedule kicked out like in a millisecond. That's the green line.",
    "start": "3533950",
    "end": "3539619"
  },
  {
    "text": "That's why it doesn't\nget any better. It's just what\nthe algorithm did. And then this is Andrew\nand Dillion's performance over minutes of what\nthey were able to get to.",
    "start": "3539620",
    "end": "3548810"
  },
  {
    "text": "So they were just\nlike writing schedule, run performance profile. OK, that's not working. Let me try this other thing.",
    "start": "3548810",
    "end": "3554990"
  },
  {
    "text": "So it's like an interactive 149\nassignment kind of situation that they're in.",
    "start": "3554990",
    "end": "3560109"
  },
  {
    "text": "And it's pretty impressive. So the auto scheduler\nwon 2 out of 3. I mean, obviously, we\nonly gave them an hour.",
    "start": "3560110",
    "end": "3565330"
  },
  {
    "text": "If they would have\nkept going, they would have beaten\nthese things for sure. But the newer auto scheduler\nis even better than this.",
    "start": "3565330",
    "end": "3574197"
  },
  {
    "text": "It'll schedule a [? convoyer ?]\nbetter than most people. Yeah, [INAUDIBLE] the\ngraphs themselves. Why [INAUDIBLE] mean\nthe performance?",
    "start": "3574197",
    "end": "3582430"
  },
  {
    "text": "Of the program. Of like the program\nthat I'm writing got this score on\nmy 149 scoreboard.",
    "start": "3582430",
    "end": "3588150"
  },
  {
    "text": "Yeah, but I would assume\nthat you would [INAUDIBLE]. Well, this is just what they\nwere trying at the time.",
    "start": "3588150",
    "end": "3594940"
  },
  {
    "text": "So they're exploring\nthe design space. That's why it's going down. Yeah, Andrew is not dumb.",
    "start": "3594940",
    "end": "3600560"
  },
  {
    "text": "[LAUGHS] He created Halide. He's not dumb, but he's\ntrying different things.",
    "start": "3600560",
    "end": "3606410"
  },
  {
    "text": "And so that's him kind of\ngoing, I got a good program. Let me see if I can\ndo a little bit better go in another direction.",
    "start": "3606410",
    "end": "3612140"
  },
  {
    "text": "And like 45 minutes in,\nhe's like, I'm good. I quit. This is not going well. I quit.",
    "start": "3612140",
    "end": "3617360"
  },
  {
    "text": "[INAUDIBLE] Yeah. [INAUDIBLE] should they\nactually write code, but they look at the\nobject [INAUDIBLE].",
    "start": "3617360",
    "end": "3623360"
  },
  {
    "text": "Well, what they do is\ntheir methodology-- I'm channeling\nthem, and this was",
    "start": "3623360",
    "end": "3629590"
  },
  {
    "text": "a while ago now-- is they were\nlike OK, I got this performance. I wonder why.",
    "start": "3629590",
    "end": "3636010"
  },
  {
    "text": "I wonder if it's doing a good\njob with that inner loop. Let me go look at it. ",
    "start": "3636010",
    "end": "3643849"
  },
  {
    "text": "Drama at the assembly level. Not stuffing. They're just\njumping and looking. In their head, they're\nstepping it in there.",
    "start": "3643850",
    "end": "3651050"
  },
  {
    "text": "Yeah, they're just like, they\nhave a Halide schedule open here in a text editor, and they have\na compiler and [? objdump ?]",
    "start": "3651050",
    "end": "3656660"
  },
  {
    "text": "open here. And then they're running code\nand looking at their output. Yeah. These guys are like-- once you, they're just like, oh,\nI know sometimes when I do this,",
    "start": "3656660",
    "end": "3664970"
  },
  {
    "text": "LLVM won't loop allocate\nor unroll this loop. So let me see if LLMs can\nunroll this loop for me",
    "start": "3664970",
    "end": "3671599"
  },
  {
    "text": "and stuff like that. Oh, not LLM, LLVM excuse me. Yeah. Cool. So just to keep it going\nis so many people are",
    "start": "3671600",
    "end": "3679724"
  },
  {
    "text": "so interested in\nhigh-performance image processing, there's the question\nof why are we even compiling to CPUs at all.",
    "start": "3679725",
    "end": "3685527"
  },
  {
    "text": "And so there's a bunch of work\nby a bunch of different groups. Here's one from Stanford where\nthey took a language that",
    "start": "3685527",
    "end": "3691430"
  },
  {
    "text": "looked a lot like Halide. If you look at it, it's a\nsimplified version of Halide in some sense.",
    "start": "3691430",
    "end": "3696523"
  },
  {
    "text": "And said, no, we're not going\nto emit instructions at all. We're going to emit\nFGPA circuits directly.",
    "start": "3696523",
    "end": "3702720"
  },
  {
    "text": "So we're just going to skip\nthe programmable processor and just generate hardware\ndirectly from the high level",
    "start": "3702720",
    "end": "3710340"
  },
  {
    "text": "representation. And the last week of class,\nwe'll come back to this topic a little bit more generally is\nif you care about performance,",
    "start": "3710340",
    "end": "3717510"
  },
  {
    "text": "why are you taking the\nbaggage of all of these-- like, in some\nsense, you can think",
    "start": "3717510",
    "end": "3722730"
  },
  {
    "text": "about the ISA, the instructions\nof a programmable processor, that's the interface\nbetween the hardware",
    "start": "3722730",
    "end": "3728790"
  },
  {
    "text": "implementation and the\nsoftware implementation. But if you're writing\nin a high-level DSL,",
    "start": "3728790",
    "end": "3734100"
  },
  {
    "text": "why do you need that\ninterface at all? Why don't you directly just\nhave the compiler be aware of the hardware implementation\nand just generate it directly?",
    "start": "3734100",
    "end": "3743420"
  },
  {
    "text": "And this is the same philosophy\nbehind a lot of these systems that you're using. Like, for example, most of\nyou, TensorFlow or PyTorch",
    "start": "3743420",
    "end": "3749360"
  },
  {
    "text": "or something like that is\nprobably the most common domain specific language that\nyou're used to working with. Maybe others have used SQL as\nprobably the most common domain",
    "start": "3749360",
    "end": "3755690"
  },
  {
    "text": "specific language\nyou're working with. And the point being is\nyou can't do a whole lot",
    "start": "3755690",
    "end": "3761960"
  },
  {
    "text": "in those languages compared\nto the space of programs that you can write in C or Java,\nbut the compiler and the system",
    "start": "3761960",
    "end": "3769520"
  },
  {
    "text": "knows about the semantics\nof the key operations. And because they know\nabout those semantics,",
    "start": "3769520",
    "end": "3774890"
  },
  {
    "text": "they can do some pretty\nintelligent things for you. Things that many it might be\nhard for many of us to even",
    "start": "3774890",
    "end": "3781430"
  },
  {
    "text": "do because we're maybe not\nas experienced or as elite in the domain. And so this is very much where\nthe world is going, especially",
    "start": "3781430",
    "end": "3789770"
  },
  {
    "text": "in an era where there are\nso many different types of processors. Like, imagine you came up\nwith one Halide schedule,",
    "start": "3789770",
    "end": "3795890"
  },
  {
    "text": "and then you go to\nan ARM processor and you probably\nneed another one. You want something that\nknows enough about the type",
    "start": "3795890",
    "end": "3801680"
  },
  {
    "text": "of programs you're\nwriting to try and take some of that off of you. ",
    "start": "3801680",
    "end": "3807900"
  },
  {
    "text": "Yeah, so those are\nsome of the summary. So we have 12 minutes. Let me just give you another\nexample just really quickly",
    "start": "3807900",
    "end": "3814080"
  },
  {
    "text": "just because I want to talk a\nlittle bit about the magnitude of optimizations that can\noccur in high-level languages.",
    "start": "3814080",
    "end": "3820890"
  },
  {
    "text": "So this was a project done\nas part of a Stanford lab probably almost 15--",
    "start": "3820890",
    "end": "3826390"
  },
  {
    "text": "no, so 12 years ago,\nactually about the same time Halide was being\ndeveloped, to be honest. And the reason why I like\nto just use it as an example",
    "start": "3826390",
    "end": "3832620"
  },
  {
    "text": "because there's some pretty,\npretty big things that compiler does. So this was a high level--",
    "start": "3832620",
    "end": "3837779"
  },
  {
    "text": "the early goal was to\nsimulate a jet engine, which means you need fluid dynamics,\nand you need finite element",
    "start": "3837780",
    "end": "3844260"
  },
  {
    "text": "analysis and stuff like that. And how many people in here\nhave a scientific computing background?",
    "start": "3844260",
    "end": "3849539"
  },
  {
    "text": "Every class, there's\nalways a couple that are here because they're\nlike, I'm in ICME or something",
    "start": "3849540",
    "end": "3856380"
  },
  {
    "text": "like that. Anybody? OK, not present today. So there's almost\nalways a couple",
    "start": "3856380",
    "end": "3862300"
  },
  {
    "text": "of folks in the class that\nactually do this type of work. And if you've done any kind\nof physical simulation,",
    "start": "3862300",
    "end": "3869080"
  },
  {
    "text": "you would know that\nthat jet engine is going to be represented by a mesh.",
    "start": "3869080",
    "end": "3874259"
  },
  {
    "text": "And we're going to perform\noperations on the mesh. So the domain that\nwe're working on now",
    "start": "3874260",
    "end": "3881130"
  },
  {
    "text": "is the set of programs\nwhere there's not pixels that we're dealing with\nbut operations on meshes.",
    "start": "3881130",
    "end": "3890619"
  },
  {
    "text": "And one of the hallmarks\nof all of the DSLs tends to be the\nsystem or the compiler",
    "start": "3890620",
    "end": "3896590"
  },
  {
    "text": "knows what your\ndata structure is. So in Halide it was like\neverything was a function,",
    "start": "3896590",
    "end": "3903520"
  },
  {
    "text": "and the compiler\nhanded the allocation. In PyTorch, everything is a\ndense tensor and that's it.",
    "start": "3903520",
    "end": "3910820"
  },
  {
    "text": "In Liszt or any of these\ngraph processing DSLs, the only thing you can\noperate on is a graph.",
    "start": "3910820",
    "end": "3918010"
  },
  {
    "text": "So all of them give you some\nabstract notion of a graph.",
    "start": "3918010",
    "end": "3923290"
  },
  {
    "text": "And there's 1,000 different\nways I can represent a graph in a computer in the same way\nthat there's 1,000 different",
    "start": "3923290",
    "end": "3928600"
  },
  {
    "text": "ways that I can represent\nan [? ND ?] tensor. In Halide, we never\nallocated the whole tensor,",
    "start": "3928600",
    "end": "3933710"
  },
  {
    "text": "we just allocated the chunks\nthat you actually needed. That could be true\nof graphs as well. So Lizst will never give\nyou a graph structure.",
    "start": "3933710",
    "end": "3943820"
  },
  {
    "text": "It'll only give you\na set of functions that allow you to access\nelements of that structure.",
    "start": "3943820",
    "end": "3949500"
  },
  {
    "text": "So the first thing I want you\nto look at this is a program in Lizst which says while not\ndone, while I equals 0 to 1000,",
    "start": "3949500",
    "end": "3956089"
  },
  {
    "text": "this is time\nstepping 1,000 times, for every edge in\nthe mesh, do this.",
    "start": "3956090",
    "end": "3964310"
  },
  {
    "text": "So we don't know what the\nrepresentation of that mesh is at all. We don't know if it's\na graph with pointers.",
    "start": "3964310",
    "end": "3969869"
  },
  {
    "text": "We don't know if it's a\ncompressed, sparse row. We don't know how the\nparticular computer",
    "start": "3969870",
    "end": "3975170"
  },
  {
    "text": "wants to represent the mesh. All we know is that we have\nthe ability to query for edges.",
    "start": "3975170",
    "end": "3981590"
  },
  {
    "text": "And for every edge,\nwe have the ability to query for the\nsurrounding vertices.",
    "start": "3981590",
    "end": "3987490"
  },
  {
    "text": "And for every vertex,\nwe have the ability to query for the\nsurrounding edges. And then the other\nthing we can do",
    "start": "3987490",
    "end": "3993400"
  },
  {
    "text": "is not only get the\nparts of the mesh, we can programmatically\nsay, I'm going to store data",
    "start": "3993400",
    "end": "3998740"
  },
  {
    "text": "on those various parts. So on every vertex,\nI might store",
    "start": "3998740",
    "end": "4005400"
  },
  {
    "text": "position, or a temperature like\na heat, or for every edge--",
    "start": "4005400",
    "end": "4015039"
  },
  {
    "text": "I guess there's nothing\nstored on edges in this. Everything is stored\non vertices here. And so the data I could\nhave said v1.temperature,",
    "start": "4015040",
    "end": "4023049"
  },
  {
    "text": "but they've decided to\nwrite it this way, which was more familiar for physicists. It's more like a field.",
    "start": "4023050",
    "end": "4028160"
  },
  {
    "text": "So I have a field\ncalled temperature, a function temperature\nthat's defined at all points.",
    "start": "4028160",
    "end": "4033530"
  },
  {
    "text": "And I give it the\npoint as a parameter to get the actual temperature. So you just look at this thing.",
    "start": "4033530",
    "end": "4039260"
  },
  {
    "text": "And so this is just\nan algorithm that takes position and temperature\nfrom the vertices on both sides",
    "start": "4039260",
    "end": "4044769"
  },
  {
    "text": "of an edge, and then compute\nsome computation on those values",
    "start": "4044770",
    "end": "4050290"
  },
  {
    "text": "to compute the\nflux over that edge and distributes that flux\nto the various vertices.",
    "start": "4050290",
    "end": "4057460"
  },
  {
    "text": "Details of the computation\ndoesn't matter. But given an edge, the loop\nbody accesses and modifies",
    "start": "4057460",
    "end": "4063250"
  },
  {
    "text": "fields or data on all of the\nparts of the relevant mesh. So a Lizst program only\ncan describe operations",
    "start": "4063250",
    "end": "4071980"
  },
  {
    "text": "on reading and writing\nfields of a mesh. That's the only thing\nthat they can do.",
    "start": "4071980",
    "end": "4077369"
  },
  {
    "text": "But scientists writing\nthese scientific codes, that's how they think\nabout writing their codes.",
    "start": "4077370",
    "end": "4083230"
  },
  {
    "text": "And the mesh representation\nis chosen by Lizst for you based on whatever computer\nyou're running on.",
    "start": "4083230",
    "end": "4090340"
  },
  {
    "text": "So let me give you\nsome examples of that. So what the compiler\nhas to do or really",
    "start": "4090340",
    "end": "4096939"
  },
  {
    "text": "what you need is the compiler\nhas to identify parallelism, the compiler has to\nidentify data locality,",
    "start": "4096939",
    "end": "4104140"
  },
  {
    "text": "and the compiler has to\nnow reason about what synchronization is required. This is exactly what you've\ndone in all of your programs",
    "start": "4104140",
    "end": "4112969"
  },
  {
    "text": "so far, except the reason\nwhy you've had to do it, is because for\narbitrary C, I can write",
    "start": "4112970",
    "end": "4119347"
  },
  {
    "text": "code that looks like this. Like I want you to\naccess a sub index where index is some function\ndependent on data that's",
    "start": "4119347",
    "end": "4125950"
  },
  {
    "text": "not known at compile time. So these are the types of things\nthat prevent regular C++ or even",
    "start": "4125950",
    "end": "4133450"
  },
  {
    "text": "Java from doing sophisticated\nanalysis for you. In Lizst, you can't\nwrite this code.",
    "start": "4133450",
    "end": "4140778"
  },
  {
    "text": "The only way you can\nread and write values is by querying them from\npositions of the mesh.",
    "start": "4140779",
    "end": "4147620"
  },
  {
    "text": "So the Lizst compiler\ncan look at this program and say, OK, this is a parallel\nloop over all the edges,",
    "start": "4147620",
    "end": "4153710"
  },
  {
    "text": "and every body of\nthe loop is only going to access\ninformation on the vertex",
    "start": "4153710",
    "end": "4159410"
  },
  {
    "text": "on either side of the edge. So now all the\ndependencies are known. And it even knows that we're\ngoing to read some values,",
    "start": "4159410",
    "end": "4166640"
  },
  {
    "text": "and then we're going\nto write some values. And so here's\nactually a challenge. Every edge is going to update\nvalues on the vertices, which",
    "start": "4166640",
    "end": "4175490"
  },
  {
    "text": "means what? There's more than one edge\nconnecting every vertex. So now we have multiple\nwriters into this field.",
    "start": "4175490",
    "end": "4183200"
  },
  {
    "text": "So the compiler\nwill need to know that there needs to be some\nprotection or some atomic here.",
    "start": "4183200",
    "end": "4189469"
  },
  {
    "text": "So let me just give you\nreally quickly two ways of parallelizing\nthis code on two",
    "start": "4189470",
    "end": "4194659"
  },
  {
    "text": "completely different machines. And the first\nmachine is I want you to think about a\ncluster of computers",
    "start": "4194660",
    "end": "4199980"
  },
  {
    "text": "don't have a shared\naddress space at all. The only way to\ncommunicate is with meshes.",
    "start": "4199980",
    "end": "4206500"
  },
  {
    "text": "So the program is, hey, Lizst,\nhere's my mesh topology.",
    "start": "4206500",
    "end": "4212860"
  },
  {
    "text": "Here's my graph. It might be 100 billion nodes. You go figure out how to\nfit it on the cluster.",
    "start": "4212860",
    "end": "4218989"
  },
  {
    "text": "And here's my\nprogram that says I'm going to do work for every\nedge, and for every edge,",
    "start": "4218990",
    "end": "4224140"
  },
  {
    "text": "we touch these vertices. Or I'm going to do\nwork for every phase, and for every phrase we're\ngoing to touch these vertices.",
    "start": "4224140",
    "end": "4229870"
  },
  {
    "text": "And Lizst will go, oh, OK, I'm\ngoing to take your big old mesh, and I will distribute it across\nthe cluster with equal number",
    "start": "4229870",
    "end": "4238510"
  },
  {
    "text": "of mesh elements per cluster. And I'm coloring the\ndifferent regions of the mesh according to what\nnode they went on.",
    "start": "4238510",
    "end": "4246139"
  },
  {
    "text": "And since Lizst knows\nthat every edge here is going to need maybe\na vertex over here,",
    "start": "4246140",
    "end": "4253680"
  },
  {
    "text": "well, that means\nLizst can also-- if we zoom in-- if we zoom into\na region, we know",
    "start": "4253680",
    "end": "4259369"
  },
  {
    "text": "that these cells might\nneed this information, and these cells might\nneed this information. So those are those ghost cells.",
    "start": "4259370",
    "end": "4264660"
  },
  {
    "text": "So that's the data that's copied\nto other nodes in order for you to read the correct data.",
    "start": "4264660",
    "end": "4270600"
  },
  {
    "text": "And that's the data that\nhas to be written back to exchange with other nodes\nevery single iteration or step.",
    "start": "4270600",
    "end": "4277430"
  },
  {
    "text": "So this is like you get the\nmessage passing from the Lizst compiler if you're\nrunning on a cluster.",
    "start": "4277430",
    "end": "4284710"
  },
  {
    "text": "And believe me, that's a mess. That's not fun code to write. But imagine we're compiling this\nLizst code to a GPU instead.",
    "start": "4284710",
    "end": "4292780"
  },
  {
    "text": "Single address space,\nmany tiny threads. And I'm not going to divide\nthis big mesh into all",
    "start": "4292780",
    "end": "4300460"
  },
  {
    "text": "these tiny little blocks. What I might do, what\nmight be much more natural would be to take\nthat loop and say it",
    "start": "4300460",
    "end": "4307060"
  },
  {
    "text": "used to be for all\nedges and mesh, well, I should probably do\nsomething like there's a CUDA thread per edge.",
    "start": "4307060",
    "end": "4312810"
  },
  {
    "text": "But there was this\nproblem where we said that for every\nedge in the mesh,",
    "start": "4312810",
    "end": "4319380"
  },
  {
    "text": "we're going to write some\nvalue to the vertex on one side of the edge and to the other.",
    "start": "4319380",
    "end": "4325930"
  },
  {
    "text": "So we have multiple threads that\nhave to write to the same value. So one solution would be\nthis [? right ?] needed to be",
    "start": "4325930",
    "end": "4332510"
  },
  {
    "text": "an atomic [? right, ?] so the\ncompiler could just emit that. But what Lizst did is\natomics can be kind of slow.",
    "start": "4332510",
    "end": "4339890"
  },
  {
    "text": "And this is a graph of\nthe numbers are edges, and the letters are vertices.",
    "start": "4339890",
    "end": "4346620"
  },
  {
    "text": "So multiple edges write\nto the same vertex.",
    "start": "4346620",
    "end": "4351730"
  },
  {
    "text": "So instead of using atomics,\nwhich they determined to be too slow, they said,\nhere's what we're going to do on a GPU.",
    "start": "4351730",
    "end": "4356870"
  },
  {
    "text": "We're going to preprocess\nthe dependencies.",
    "start": "4356870",
    "end": "4361900"
  },
  {
    "text": "So again, the numbers are\nedges, the letters are vertices.",
    "start": "4361900",
    "end": "4367568"
  },
  {
    "text": "And they said, we're\ngoing to analyze that, and we're going to\nactually look at which edges share the same vertex.",
    "start": "4367568",
    "end": "4375510"
  },
  {
    "text": "And we're going to\nencode that in a graph where edge 1 and edge 5 have\na line, an edge between them",
    "start": "4375510",
    "end": "4384630"
  },
  {
    "text": "if edge 1 and edge 5 in\nthe mesh, share a vertex.",
    "start": "4384630",
    "end": "4391409"
  },
  {
    "text": "So 1 and 5 have an edge in\nthis graph because 1 and 5 both write to C there.",
    "start": "4391410",
    "end": "4397659"
  },
  {
    "text": "And notice that there's\nno edge between 8 and 2,",
    "start": "4397660",
    "end": "4403090"
  },
  {
    "text": "so 8 and 2 do not write\nto the same value.",
    "start": "4403090",
    "end": "4408250"
  },
  {
    "text": "And then what they do is they\ntake this graph down here, and they run a graph coloring. And graph coloring is\nan algorithm to say,",
    "start": "4408250",
    "end": "4415300"
  },
  {
    "text": "I'm going to color-- there's no two adjacent nodes\nthat get the same color.",
    "start": "4415300",
    "end": "4420610"
  },
  {
    "text": "And then that for\nloop over edges is actually going\nto be broken into-- if we have one, two, three, four\ncolors, four parallel for loops,",
    "start": "4420610",
    "end": "4430659"
  },
  {
    "text": "which means for all edges\ncolored blue completely in parallel with no locks or\nno atomics, then for all edges,",
    "start": "4430660",
    "end": "4439150"
  },
  {
    "text": "colored orange\nfor no locks or no atomics for, and\nso on and so on. And they do this, and they\nshow that the same Lizst",
    "start": "4439150",
    "end": "4446080"
  },
  {
    "text": "program, the folks in\nmechanical engineering don't have to take\n149 at all, and they can run a code on a cluster\nwith this many cores,",
    "start": "4446080",
    "end": "4457679"
  },
  {
    "text": "or I'm not showing\nyou here, but they could run a code on the GPU. And without any modifications,\nthey got pretty good performance",
    "start": "4457680",
    "end": "4464730"
  },
  {
    "text": "in both of those cases. So that's the benefits of\nthese high level abstractions.",
    "start": "4464730",
    "end": "4470840"
  },
  {
    "text": "And that's just a\nquick summary of some of the ideas behind\nLizst And again, it's",
    "start": "4470840",
    "end": "4476590"
  },
  {
    "text": "typically most of these\nDSLs are we're going to handle the data structure.",
    "start": "4476590",
    "end": "4483070"
  },
  {
    "text": "We're going to give you\naccess into the data structure that don't actually let\nyou make any assumptions",
    "start": "4483070",
    "end": "4489219"
  },
  {
    "text": "about its format. You write your program in\nterms of the accessors,",
    "start": "4489220",
    "end": "4495120"
  },
  {
    "text": "and we'll go to town\nbecause we know some details about dependencies or\nthe data structures",
    "start": "4495120",
    "end": "4500610"
  },
  {
    "text": "used from that point forward. And that pattern just repeats. Like, if you look at PyTorch,\nwhat's the data structure?",
    "start": "4500610",
    "end": "4507510"
  },
  {
    "text": "A tensor. And you're not allowed to\nmanage any of that allocation or anything like that.",
    "start": "4507510",
    "end": "4512710"
  },
  {
    "text": "You just ask for tensors, and\nthey say, we'll handle it, and you just tell us\nwhat you're accessing.",
    "start": "4512710",
    "end": "4518650"
  },
  {
    "text": "So there's just a few things-- just some riffing is\nthese languages work",
    "start": "4518650",
    "end": "4525840"
  },
  {
    "text": "out well when the\nstructure of the primitives match the natural\nthinking of the user.",
    "start": "4525840",
    "end": "4533500"
  },
  {
    "text": "So physicists think in terms\nof operations on meshes.",
    "start": "4533500",
    "end": "4538540"
  },
  {
    "text": "Image processing people think\nabout operations on pixels. Machine learning people think\nabout operations on tensors.",
    "start": "4538540",
    "end": "4545830"
  },
  {
    "text": "And you really want to\nget the operations aligned with the thought process. That's really important.",
    "start": "4545830",
    "end": "4554560"
  },
  {
    "text": "But you also want to think about\nthe process of performance.",
    "start": "4554560",
    "end": "4559820"
  },
  {
    "text": "So a parallel programming\nsystem that is really convenient allows you to elegantly\nexpress things,",
    "start": "4559820",
    "end": "4565870"
  },
  {
    "text": "but precludes the best-known\nimplementations almost always",
    "start": "4565870",
    "end": "4571300"
  },
  {
    "text": "fails. So the way we like to\ndevelop these things is like we write the code\ndown in terms of how would",
    "start": "4571300",
    "end": "4576309"
  },
  {
    "text": "the user want to\nwrite things, and then we write the code\ndown again in terms of how do we want it to\nexecute on a real machine.",
    "start": "4576310",
    "end": "4583540"
  },
  {
    "text": "And we start thinking about\nis it possible for a compiler to go from point A to point B? What does the\ncompiler need to know.",
    "start": "4583540",
    "end": "4590420"
  },
  {
    "text": "And then we start adding a\nlittle bit more to the front end so that the user can just\ndeclare that information.",
    "start": "4590420",
    "end": "4596389"
  },
  {
    "text": "That's the process on\nhow to think about it. And then the other thing is\nthat a lot of these systems are incredibly simple.",
    "start": "4596390",
    "end": "4602810"
  },
  {
    "text": "Good systems tend to\nhave only a couple of primitives that\nare well optimized",
    "start": "4602810",
    "end": "4610130"
  },
  {
    "text": "and the power comes\nfrom composing them. So if you're ever designing\none of these things, people are going to come\nup to you and say, hey,",
    "start": "4610130",
    "end": "4615260"
  },
  {
    "text": "can you just add this? Can you add that? And good architects actually\nare really curmudgeonly.",
    "start": "4615260",
    "end": "4622550"
  },
  {
    "text": "They say, no. well, show\nme why you can't do it and what you have? Because they know that once\nyou get more than a couple",
    "start": "4622550",
    "end": "4629539"
  },
  {
    "text": "of primitives, you just start\nlosing control of this thing. Like all the beauty\nof being able to make",
    "start": "4629540",
    "end": "4635330"
  },
  {
    "text": "a few things fast\nstarts going away. So most of these systems have a\nvery small number of primitives.",
    "start": "4635330",
    "end": "4642780"
  },
  {
    "text": "And if you have a small\nenough number of primitives, they compose. And so the other thing that\nreally good architects ask",
    "start": "4642780",
    "end": "4649665"
  },
  {
    "text": "is you come up to them say,\nif I just had this primitive, my thing would run\n10 times faster. And good architects can\nthink about it and go,",
    "start": "4649665",
    "end": "4656340"
  },
  {
    "text": "but if I added that, it\ndoesn't compose with the four other things that I have. Let me go figure\nout how to do it",
    "start": "4656340",
    "end": "4662802"
  },
  {
    "text": "a little bit\ndifferently than what you're suggesting, because we\nwant to be able to compose. And almost every good design\nthat lasts for a decade or more,",
    "start": "4662803",
    "end": "4671719"
  },
  {
    "text": "the creators come up and\ngo, I had no idea people were going to use it for that.",
    "start": "4671720",
    "end": "4677670"
  },
  {
    "text": "I was trying to write this\nthing for processing meshes. Or in the case of\ngraphics, I was trying to write this program\nfor rendering pictures.",
    "start": "4677670",
    "end": "4685370"
  },
  {
    "text": "And these weirdos\nat Stanford and UNC started using it for\ndoing protein folding. That means you've actually had\na good system, because you have",
    "start": "4685370",
    "end": "4693380"
  },
  {
    "text": "a few small primitives,\nthey composed, and people started\nusing them in ways that you never thought possible.",
    "start": "4693380",
    "end": "4700280"
  },
  {
    "text": "And, in some sense, like that's\none of the beauties that's been so impressive about\nthese LLMs is they were kind",
    "start": "4700280",
    "end": "4706520"
  },
  {
    "text": "of designed to do\none thing, and people are starting to figure\nout very different ways",
    "start": "4706520",
    "end": "4711620"
  },
  {
    "text": "to do it than I'm sure the\nfolks at OpenAI and other places ever imagined. And so you know\nsomething's powerful",
    "start": "4711620",
    "end": "4716745"
  },
  {
    "text": "and you're on to something\nwhen someone teaches you a way to use your own\nsystem, you're like, I didn't know you could do\nthat with this thing at all.",
    "start": "4716745",
    "end": "4722852"
  },
  {
    "text": "So I'll stop there. But this is more philosophical\ntoday than anything else.",
    "start": "4722852",
    "end": "4729080"
  },
  {
    "start": "4729080",
    "end": "4733000"
  }
]