[
  {
    "text": "So let me now tell you about position-aware",
    "start": "4580",
    "end": "8460"
  },
  {
    "text": "graph neural networks that are going to solve,",
    "start": "8460",
    "end": "11705"
  },
  {
    "text": "uh, part of the- part of the problem.",
    "start": "11705",
    "end": "13809"
  },
  {
    "text": "So imagine there are two types of tasks on the graphs, right?",
    "start": "13810",
    "end": "18450"
  },
  {
    "text": "There is what we are going to call",
    "start": "18450",
    "end": "19860"
  },
  {
    "text": "structure-aware tasks and there is position-aware tasks, and, again,",
    "start": "19860",
    "end": "23785"
  },
  {
    "text": "this is just to illustrate this concept, um,",
    "start": "23785",
    "end": "26619"
  },
  {
    "text": "about how graph structure may affect the underlying labels.",
    "start": "26620",
    "end": "31090"
  },
  {
    "text": "And in reality, in the real world, you know,",
    "start": "31090",
    "end": "33545"
  },
  {
    "text": "every task is a bit of a structure-aware and a bit of a",
    "start": "33545",
    "end": "36530"
  },
  {
    "text": "position-aware but some tasks will be more position-aware,",
    "start": "36530",
    "end": "39725"
  },
  {
    "text": "some will be more structure-aware,",
    "start": "39725",
    "end": "41430"
  },
  {
    "text": "and we'd like to have models that can operate in both regimes, right?",
    "start": "41430",
    "end": "45275"
  },
  {
    "text": "When structure-aware- in structure-aware tasks, uh, for example,",
    "start": "45275",
    "end": "49640"
  },
  {
    "text": "labeling of the nodes, uh,",
    "start": "49640",
    "end": "51559"
  },
  {
    "text": "for this simple, uh,",
    "start": "51560",
    "end": "52955"
  },
  {
    "text": "graph with two connected triangles,",
    "start": "52955",
    "end": "54890"
  },
  {
    "text": "if nodes are labeled according to these labels A and B here, then, um,",
    "start": "54890",
    "end": "59225"
  },
  {
    "text": "this is one way because the- the r- the structure",
    "start": "59225",
    "end": "62629"
  },
  {
    "text": "of the node and the neighborhood basically defines its label.",
    "start": "62630",
    "end": "66460"
  },
  {
    "text": "A different type of a task is what we call position-aware task,",
    "start": "66460",
    "end": "71118"
  },
  {
    "text": "where, for example, if you think about community detection,",
    "start": "71119",
    "end": "74300"
  },
  {
    "text": "community detection is a position-aware task right here, uh, you know,",
    "start": "74300",
    "end": "78755"
  },
  {
    "text": "nodes on one side have one label and nodes on",
    "start": "78755",
    "end": "81320"
  },
  {
    "text": "the other side have the other label even though their,",
    "start": "81320",
    "end": "83980"
  },
  {
    "text": "uh, uh, uh, local structures are,",
    "start": "83980",
    "end": "86980"
  },
  {
    "text": "uh, are comparable or iso- isomorphic, right?",
    "start": "86980",
    "end": "89890"
  },
  {
    "text": "Like, uh, Node 1 and Node, uh, 2,",
    "start": "89890",
    "end": "92330"
  },
  {
    "text": "um, they basically have the same neighborhood structure surrounding them.",
    "start": "92330",
    "end": "95585"
  },
  {
    "text": "So instructure-aware tasks, they should be labeled.",
    "start": "95585",
    "end": "98615"
  },
  {
    "text": "With the same label in position-aware,",
    "start": "98615",
    "end": "100625"
  },
  {
    "text": "they might be labeled with different labels because they",
    "start": "100625",
    "end": "102890"
  },
  {
    "text": "are in different parts, uh, of the network.",
    "start": "102890",
    "end": "106255"
  },
  {
    "text": "And, uh, the point is that the GNNs,",
    "start": "106255",
    "end": "109579"
  },
  {
    "text": "the graph neural networks,",
    "start": "109580",
    "end": "110780"
  },
  {
    "text": "the GCN, GraphSAGE, uh,",
    "start": "110780",
    "end": "112700"
  },
  {
    "text": "graph attention network, they work well for, uh, structure-aware tasks.",
    "start": "112700",
    "end": "117409"
  },
  {
    "text": "Right here, basically, we can differentiate v_1 and- and v_2, um,",
    "start": "117410",
    "end": "122150"
  },
  {
    "text": "because we are using- because they will have different,",
    "start": "122150",
    "end": "124910"
  },
  {
    "text": "uh, computational graphs as illustrated here, right?",
    "start": "124910",
    "end": "127560"
  },
  {
    "text": "v_1 has the following computation graph,",
    "start": "127560",
    "end": "130399"
  },
  {
    "text": "v_2 has a different computation graph just because v_2 has",
    "start": "130400",
    "end": "133909"
  },
  {
    "text": "three neighbors and v_1 has two neighbors even at the first hop so we are",
    "start": "133910",
    "end": "137810"
  },
  {
    "text": "able to distinguish them and meaning we are able to assign them different labels",
    "start": "137810",
    "end": "141560"
  },
  {
    "text": "because they'll have different embeddings because they have different computation graphs.",
    "start": "141560",
    "end": "146095"
  },
  {
    "text": "How about position-aware tasks where now we change the labeling of the nodes,",
    "start": "146095",
    "end": "151320"
  },
  {
    "text": "you know, let's say, according to the communities?",
    "start": "151320",
    "end": "153465"
  },
  {
    "text": "In this case, a plain GNN is going to fail because nodes v_1 and v_2, these, uh,",
    "start": "153465",
    "end": "159230"
  },
  {
    "text": "labeled here in the graph,",
    "start": "159230",
    "end": "160805"
  },
  {
    "text": "have the same computation graphs",
    "start": "160805",
    "end": "162769"
  },
  {
    "text": "because they're kind of symmetric with each other, right?",
    "start": "162770",
    "end": "165740"
  },
  {
    "text": "So the point is that now, um,",
    "start": "165740",
    "end": "167915"
  },
  {
    "text": "because they have the same computation graphs and, again,",
    "start": "167915",
    "end": "171110"
  },
  {
    "text": "because we are assuming there is no discriminative node feature information given to us,",
    "start": "171110",
    "end": "175885"
  },
  {
    "text": "the two nodes have the same, uh,",
    "start": "175885",
    "end": "177810"
  },
  {
    "text": "local neighborhood structure, they have the same computation graph,",
    "start": "177810",
    "end": "181295"
  },
  {
    "text": "which means they will be- they will have the same embedding,",
    "start": "181295",
    "end": "184504"
  },
  {
    "text": "which means they will- the classifier will have to assign them the same label.",
    "start": "184504",
    "end": "188275"
  },
  {
    "text": "Um, and in this case, we want them to,",
    "start": "188275",
    "end": "190500"
  },
  {
    "text": "uh, label them differently.",
    "start": "190500",
    "end": "192390"
  },
  {
    "text": "So the question is,",
    "start": "192390",
    "end": "194270"
  },
  {
    "text": "how can we extend graph neural networks,",
    "start": "194270",
    "end": "197030"
  },
  {
    "text": "deep learning methods that are- that would be able to, uh,",
    "start": "197030",
    "end": "200360"
  },
  {
    "text": "solve or work well in this, uh, you know,",
    "start": "200360",
    "end": "203405"
  },
  {
    "text": "toy example that kind of tries to",
    "start": "203405",
    "end": "205490"
  },
  {
    "text": "illustrate this notion of position-aware prediction tasks.",
    "start": "205490",
    "end": "209170"
  },
  {
    "text": "Um, and the key idea, uh,",
    "start": "209170",
    "end": "211800"
  },
  {
    "text": "for this part is the notion of an anchor",
    "start": "211800",
    "end": "214995"
  },
  {
    "text": "because the way you know your location is to- to know,",
    "start": "214995",
    "end": "219015"
  },
  {
    "text": "um, what is your position or,",
    "start": "219015",
    "end": "221430"
  },
  {
    "text": "uh, uh, against some reference point, right?",
    "start": "221430",
    "end": "224180"
  },
  {
    "text": "And we are going to call these anchors to be a reference points.",
    "start": "224180",
    "end": "227659"
  },
  {
    "text": "And if I know how far away from, uh,",
    "start": "227660",
    "end": "230570"
  },
  {
    "text": "reference points I am and you know kind of",
    "start": "230570",
    "end": "233000"
  },
  {
    "text": "how far away you are from different reference points,",
    "start": "233000",
    "end": "235970"
  },
  {
    "text": "then we can, uh, distinguish our locations.",
    "start": "235970",
    "end": "238490"
  },
  {
    "text": "It's almost like you wanna triangulate the position of the node inside",
    "start": "238490",
    "end": "242480"
  },
  {
    "text": "the graph by- by characterizing some kind of a distance to the anchor node.",
    "start": "242480",
    "end": "246694"
  },
  {
    "text": "So that's- that's the idea.",
    "start": "246695",
    "end": "248060"
  },
  {
    "text": "The idea is we wanna have a reference point, um,",
    "start": "248060",
    "end": "251410"
  },
  {
    "text": "and to quantify the location so we are going to use this notion of anchor,",
    "start": "251410",
    "end": "255740"
  },
  {
    "text": "uh, anchor nodes to give us these, uh, locations, right?",
    "start": "255740",
    "end": "260000"
  },
  {
    "text": "So we are going to basically pick these r- anchors at random and we are going to say,",
    "start": "260000",
    "end": "264635"
  },
  {
    "text": "let's pick a node,",
    "start": "264635",
    "end": "266030"
  },
  {
    "text": "let's say S_1 in this case, uh,",
    "start": "266030",
    "end": "268010"
  },
  {
    "text": "and let's call it an anchor node and then we are going to represent",
    "start": "268010",
    "end": "271925"
  },
  {
    "text": "the position of v_1 and v_2 by their relative distance to the, uh,",
    "start": "271925",
    "end": "277224"
  },
  {
    "text": "anchor node and because these two- this- the distance, uh,",
    "start": "277225",
    "end": "280765"
  },
  {
    "text": "of v_1 and v_2 in this case to the anchor node s_1 will be different, uh,",
    "start": "280765",
    "end": "285510"
  },
  {
    "text": "this basically means that we'll allow- this will allow us to",
    "start": "285510",
    "end": "288320"
  },
  {
    "text": "differentiate or distinguish v_1 from v_2, right?",
    "start": "288320",
    "end": "292380"
  },
  {
    "text": "So intuitively, the anchor node serves almost like as a reference point,",
    "start": "292380",
    "end": "296270"
  },
  {
    "text": "as a coordinate axis that tells us, um,",
    "start": "296270",
    "end": "299300"
  },
  {
    "text": "how far away from, uh,",
    "start": "299300",
    "end": "300949"
  },
  {
    "text": "each different nodes are and this basically allows us to, kind of,",
    "start": "300950",
    "end": "304770"
  },
  {
    "text": "triangulate or locate the position of the node, uh, in the graph.",
    "start": "304770",
    "end": "309560"
  },
  {
    "text": "Um, of course, we are not only- only going to use one anchor node,",
    "start": "309560",
    "end": "314075"
  },
  {
    "text": "we are actually going to use multiple anchor nodes",
    "start": "314075",
    "end": "316670"
  },
  {
    "text": "because if we can- if we use multiple anchor nodes,",
    "start": "316670",
    "end": "319610"
  },
  {
    "text": "we can better characterize the position of",
    "start": "319610",
    "end": "322340"
  },
  {
    "text": "a node in different region- regions on- of the graph.",
    "start": "322340",
    "end": "325330"
  },
  {
    "text": "So kind of if you have multiple anchor nodes,",
    "start": "325330",
    "end": "327754"
  },
  {
    "text": "we are able to better,",
    "start": "327755",
    "end": "328970"
  },
  {
    "text": "um, distinguish or, uh,",
    "start": "328970",
    "end": "331085"
  },
  {
    "text": "set, uh, our position.",
    "start": "331085",
    "end": "333020"
  },
  {
    "text": "Of course, we don't wanna have too many becomes- beco-",
    "start": "333020",
    "end": "335824"
  },
  {
    "text": "because then it becomes computationally hard, but, you know,",
    "start": "335825",
    "end": "339065"
  },
  {
    "text": "having some number of them and there is actually,",
    "start": "339065",
    "end": "341060"
  },
  {
    "text": "uh, a theory how many we wanna have, um,",
    "start": "341060",
    "end": "343625"
  },
  {
    "text": "then, uh, we can, uh,",
    "start": "343625",
    "end": "344795"
  },
  {
    "text": "characterize node's position in the network, uh, quite well.",
    "start": "344795",
    "end": "348335"
  },
  {
    "text": "Here, in this case, I- you know,",
    "start": "348335",
    "end": "349985"
  },
  {
    "text": "s_1 and s_2 are anchor nodes.",
    "start": "349985",
    "end": "352189"
  },
  {
    "text": "Um, v_1 and v_2 are nodes of interest and I'm simply saying, you know,",
    "start": "352190",
    "end": "355575"
  },
  {
    "text": "v_1 is one hop away from s_1 and two hops away from s_2,",
    "start": "355575",
    "end": "359505"
  },
  {
    "text": "while v_2 is two hops away from s_1 and one hop away from, uh, s_2.",
    "start": "359505",
    "end": "363945"
  },
  {
    "text": "And now, this kind of allows us to distinguish v_1 from, uh,",
    "start": "363945",
    "end": "367725"
  },
  {
    "text": "v_2 because they are at different distances from these, uh, anchor nodes.",
    "start": "367725",
    "end": "372415"
  },
  {
    "text": "Um, there is another, um,",
    "start": "372415",
    "end": "374680"
  },
  {
    "text": "generalization that turns out to be important is",
    "start": "374680",
    "end": "378020"
  },
  {
    "text": "that we don't wanna really only talk about anchor nodes,",
    "start": "378020",
    "end": "381259"
  },
  {
    "text": "we wanna talk about anchor sets, right?",
    "start": "381260",
    "end": "384240"
  },
  {
    "text": "So, uh, we are going to generalize this notion of",
    "start": "384240",
    "end": "386870"
  },
  {
    "text": "an anchor node from a single node to a set of nodes and then we",
    "start": "386870",
    "end": "390710"
  },
  {
    "text": "are going to define the distance between the node of interest and",
    "start": "390710",
    "end": "393530"
  },
  {
    "text": "the anchor set as the minimum distance to any of the nodes,",
    "start": "393530",
    "end": "397415"
  },
  {
    "text": "uh, in the anchor set, right?",
    "start": "397415",
    "end": "399645"
  },
  {
    "text": "Um, and the idea here is that, uh,",
    "start": "399645",
    "end": "401724"
  },
  {
    "text": "this will allow us to even triangulate the position of the node at",
    "start": "401725",
    "end": "405920"
  },
  {
    "text": "a much more fine-grained level because anchor sets will allow us,",
    "start": "405920",
    "end": "409940"
  },
  {
    "text": "uh, to provide more precise,",
    "start": "409940",
    "end": "412130"
  },
  {
    "text": "uh, position information, right?",
    "start": "412130",
    "end": "414170"
  },
  {
    "text": "Um, and it will allow us to keep the total number of anchors to be still small.",
    "start": "414170",
    "end": "419430"
  },
  {
    "text": "So what I mean by this is that, for example,",
    "start": "419430",
    "end": "421590"
  },
  {
    "text": "I could say, let's- let's have,",
    "start": "421590",
    "end": "423930"
  },
  {
    "text": "uh, now anchor sets.",
    "start": "423930",
    "end": "425370"
  },
  {
    "text": "I have, uh, anchor node s_1,",
    "start": "425370",
    "end": "427590"
  },
  {
    "text": "I have anchor node s_2,",
    "start": "427590",
    "end": "429165"
  },
  {
    "text": "but then also have an anchor set,",
    "start": "429165",
    "end": "431310"
  },
  {
    "text": "I'll denote it as s_3 that includes node v_3 and, uh, s_1.",
    "start": "431310",
    "end": "436575"
  },
  {
    "text": "And now, I'm going to characterize the distance of- uh,",
    "start": "436575",
    "end": "439835"
  },
  {
    "text": "of a given node,",
    "start": "439835",
    "end": "442205"
  },
  {
    "text": "uh, towards, uh, against that anchor set.",
    "start": "442205",
    "end": "445470"
  },
  {
    "text": "Um, and in this case,",
    "start": "445470",
    "end": "447170"
  },
  {
    "text": "for example, if I'm interested in position of v_3, uh,",
    "start": "447170",
    "end": "450125"
  },
  {
    "text": "v_3 will have a distance of 0 to the anchor set",
    "start": "450125",
    "end": "453455"
  },
  {
    "text": "s_3 because it is part of the anchor set while",
    "start": "453455",
    "end": "456689"
  },
  {
    "text": "v_2 is going to have a distance of 1 because",
    "start": "456690",
    "end": "459350"
  },
  {
    "text": "the closest node in the anchor set to v_1 is- is,",
    "start": "459350",
    "end": "463595"
  },
  {
    "text": "uh, one hop away.",
    "start": "463595",
    "end": "465205"
  },
  {
    "text": "Um, so, uh, what does this mean that,",
    "start": "465205",
    "end": "468689"
  },
  {
    "text": "um, for example, if we would, as we had before,",
    "start": "468690",
    "end": "472265"
  },
  {
    "text": "if I only use s_1 and s_2 as my anchor, uh,",
    "start": "472265",
    "end": "475385"
  },
  {
    "text": "nodes or anchor sets,",
    "start": "475385",
    "end": "476930"
  },
  {
    "text": "then v_3 and v- uh,",
    "start": "476930",
    "end": "478400"
  },
  {
    "text": "uh, v_1 cannot be differentiated with each other.",
    "start": "478400",
    "end": "481264"
  },
  {
    "text": "They have the same distances.",
    "start": "481265",
    "end": "482675"
  },
  {
    "text": "But now if I use this anchor set of Size 2,",
    "start": "482675",
    "end": "485360"
  },
  {
    "text": "I can actually just differentiate,",
    "start": "485360",
    "end": "487270"
  },
  {
    "text": "uh, v_1 and v_3.",
    "start": "487270",
    "end": "489150"
  },
  {
    "text": "And, again, there is a nice theory that says that it- it",
    "start": "489150",
    "end": "493759"
  },
  {
    "text": "is beneficial to use anchor sets of, uh,",
    "start": "493760",
    "end": "498120"
  },
  {
    "text": "different sizes because then the number of,",
    "start": "498120",
    "end": "501150"
  },
  {
    "text": "uh, anchor sets, the number of coordinates,",
    "start": "501150",
    "end": "503270"
  },
  {
    "text": "the number of reference points,",
    "start": "503270",
    "end": "504905"
  },
  {
    "text": "uh, you need, uh,",
    "start": "504905",
    "end": "506190"
  },
  {
    "text": "to locate a node in the graph is, uh, relatively small.",
    "start": "506190",
    "end": "509475"
  },
  {
    "text": "It's smaller than if you would just use, uh,",
    "start": "509475",
    "end": "511365"
  },
  {
    "text": "anchor nodes like s_1 and s_2 and add,",
    "start": "511365",
    "end": "514080"
  },
  {
    "text": "uh, multiple, uh, anchor nodes.",
    "start": "514080",
    "end": "516250"
  },
  {
    "text": "So what is the summary so far?",
    "start": "516250",
    "end": "519485"
  },
  {
    "text": "Uh, we are going to de- we have just developed",
    "start": "519485",
    "end": "521570"
  },
  {
    "text": "this positional encoding of a node in the graph,",
    "start": "521570",
    "end": "524585"
  },
  {
    "text": "where we are going to represent a node's position by",
    "start": "524585",
    "end": "527930"
  },
  {
    "text": "its distance to randomly selected anchor sets and each dimension in this,",
    "start": "527930",
    "end": "533310"
  },
  {
    "text": "um, in this, uh,",
    "start": "533310",
    "end": "534705"
  },
  {
    "text": "encoding will, uh, tell me the, uh,",
    "start": "534705",
    "end": "537870"
  },
  {
    "text": "the- will be tied to a given anchor set and will be",
    "start": "537870",
    "end": "541855"
  },
  {
    "text": "the minimum distance from a node of interest to any of the nodes in the anchor set.",
    "start": "541855",
    "end": "547100"
  },
  {
    "text": "Uh, that is the- that is the idea of how we are going to,",
    "start": "547100",
    "end": "551389"
  },
  {
    "text": "uh, uh, create this,",
    "start": "551390",
    "end": "553295"
  },
  {
    "text": "uh, positional, uh, encoding.",
    "start": "553295",
    "end": "555459"
  },
  {
    "text": "Now, uh, before I move on and use- how this position information is used,",
    "start": "555460",
    "end": "560105"
  },
  {
    "text": "the way- of course,",
    "start": "560105",
    "end": "561320"
  },
  {
    "text": "you can ask how many of these sets do you need and how big they need to be?",
    "start": "561320",
    "end": "564950"
  },
  {
    "text": "And what we are going to do is we are going to do the following.",
    "start": "564950",
    "end": "568100"
  },
  {
    "text": "We are going to have an e- expone- er,",
    "start": "568100",
    "end": "571204"
  },
  {
    "text": "anchor sets of exponentially increasing size,",
    "start": "571205",
    "end": "574805"
  },
  {
    "text": "but we are going to use exponentially fewer of them, right?",
    "start": "574805",
    "end": "578820"
  },
  {
    "text": "So we will have a lot of, uh,",
    "start": "578820",
    "end": "580560"
  },
  {
    "text": "anchor sets of Size 1,",
    "start": "580560",
    "end": "582290"
  },
  {
    "text": "we'll have half that number of anchor sets of Size 2,",
    "start": "582290",
    "end": "585459"
  },
  {
    "text": "we'll have, you know, uh,",
    "start": "585460",
    "end": "587415"
  },
  {
    "text": "half of that number of anchor sets of Size 4,",
    "start": "587415",
    "end": "590240"
  },
  {
    "text": "Size 8, Size 16, and so on.",
    "start": "590240",
    "end": "593000"
  },
  {
    "text": "Um, so this- this means we'll have, you know,",
    "start": "593000",
    "end": "596060"
  },
  {
    "text": "some relatively small number of anchor sets where",
    "start": "596060",
    "end": "598715"
  },
  {
    "text": "each next anchor set size is going to be doubled,",
    "start": "598715",
    "end": "602185"
  },
  {
    "text": "but the number of them will be half of what we had before.",
    "start": "602185",
    "end": "605760"
  },
  {
    "text": "And that's usually a good way how to generate these, uh,",
    "start": "605760",
    "end": "608870"
  },
  {
    "text": "anchor sets and the- the nodes that belong to anchor sets,",
    "start": "608870",
    "end": "611930"
  },
  {
    "text": "we simply select them, uh,",
    "start": "611930",
    "end": "613535"
  },
  {
    "text": "uniformly, uh, at random.",
    "start": "613535",
    "end": "615910"
  },
  {
    "text": "And then we charac- as I said, we characterize, uh,",
    "start": "615910",
    "end": "619815"
  },
  {
    "text": "this positional encoding of a node by simply the minimum distance from the node to the,",
    "start": "619815",
    "end": "625720"
  },
  {
    "text": "uh, any of the nodes,",
    "start": "625720",
    "end": "627220"
  },
  {
    "text": "uh, in the given, uh, anchor set.",
    "start": "627220",
    "end": "630004"
  },
  {
    "text": "So now, how do we use this positional information?",
    "start": "630005",
    "end": "633840"
  },
  {
    "text": "A simple way of using",
    "start": "633840",
    "end": "635450"
  },
  {
    "text": "the positional information is to use it as an augmented node feature.",
    "start": "635450",
    "end": "639950"
  },
  {
    "text": "And this works really well- well in practice.",
    "start": "639950",
    "end": "642125"
  },
  {
    "text": "So basically, we just enrich the feature descript- descriptor of a node with this,",
    "start": "642125",
    "end": "647885"
  },
  {
    "text": "uh, positional information, uh,",
    "start": "647885",
    "end": "649970"
  },
  {
    "text": "characterized by the shortest path distance,",
    "start": "649970",
    "end": "652420"
  },
  {
    "text": "uh, to the anchor sets.",
    "start": "652420",
    "end": "653730"
  },
  {
    "text": "Uh, the issue here is that since",
    "start": "653730",
    "end": "656510"
  },
  {
    "text": "each posi- dimension of position encoding is tied to a random anchor,",
    "start": "656510",
    "end": "661445"
  },
  {
    "text": "dimensions of positional encoding,",
    "start": "661445",
    "end": "663440"
  },
  {
    "text": "um, can be randomly permuted and the encoding, uh, could be,",
    "start": "663440",
    "end": "668000"
  },
  {
    "text": "uh, basically is semantically the same meaning,",
    "start": "668000",
    "end": "670785"
  },
  {
    "text": "um, er, er, without changing it- its meaning.",
    "start": "670785",
    "end": "673334"
  },
  {
    "text": "So, uh, and- and what this means, uh,",
    "start": "673335",
    "end": "675600"
  },
  {
    "text": "imagine you permute the input dimensions of a normal, uh, er, uh,",
    "start": "675600",
    "end": "679230"
  },
  {
    "text": "er, neural network, the output will, uh, change.",
    "start": "679230",
    "end": "682995"
  },
  {
    "text": "So what is, um,",
    "start": "682995",
    "end": "685190"
  },
  {
    "text": "what is a more rigorous solution than just using these positional encodings as they are",
    "start": "685190",
    "end": "689540"
  },
  {
    "text": "is to design a special set of neural network operators that can maintain this,",
    "start": "689540",
    "end": "694220"
  },
  {
    "text": "uh, permutational invariant property of positional encoding.",
    "start": "694220",
    "end": "698149"
  },
  {
    "text": "So basically, uh, that- the position encoding is order invariant,",
    "start": "698150",
    "end": "702605"
  },
  {
    "text": "which you can achieve through,",
    "start": "702605",
    "end": "704089"
  },
  {
    "text": "let's say, some kind of, uh,",
    "start": "704090",
    "end": "705455"
  },
  {
    "text": "some aggregator or, um,",
    "start": "705455",
    "end": "707240"
  },
  {
    "text": "uh, aggregators that are uh, order invariant.",
    "start": "707240",
    "end": "710605"
  },
  {
    "text": "Uh, because, uh, permuting the input feature dimension",
    "start": "710605",
    "end": "714485"
  },
  {
    "text": "will only result in the permutation of the ou- output dimension,",
    "start": "714485",
    "end": "718490"
  },
  {
    "text": "uh, but the value of each dimension shouldn't change.",
    "start": "718490",
    "end": "721520"
  },
  {
    "text": "And, uh, you know, there is a paper, er,",
    "start": "721520",
    "end": "724085"
  },
  {
    "text": "that introduces position-aware graph neural networks, uh,",
    "start": "724085",
    "end": "727160"
  },
  {
    "text": "to say how you can do this in a more rigorous way but the key here is this notion of",
    "start": "727160",
    "end": "732440"
  },
  {
    "text": "an anchor and the notion that you can",
    "start": "732440",
    "end": "735230"
  },
  {
    "text": "quantify the position of a node in the graph by the distance,",
    "start": "735230",
    "end": "738904"
  },
  {
    "text": "uh, to the anchor and that allows us to now improve the expressiveness of",
    "start": "738905",
    "end": "743630"
  },
  {
    "text": "graph neural networks because nodes won't",
    "start": "743630",
    "end": "746510"
  },
  {
    "text": "only know what is their local neighborhood structure around them,",
    "start": "746510",
    "end": "750185"
  },
  {
    "text": "but they will also know what is their location,",
    "start": "750185",
    "end": "752515"
  },
  {
    "text": "uh, or position, uh,",
    "start": "752515",
    "end": "754095"
  },
  {
    "text": "in the neural network.",
    "start": "754095",
    "end": "756129"
  }
]