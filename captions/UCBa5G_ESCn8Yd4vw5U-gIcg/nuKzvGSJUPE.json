[
  {
    "start": "0",
    "end": "106000"
  },
  {
    "text": "thanks Andy it's a real pleasure to be here um I should say right off the bat that",
    "start": "11519",
    "end": "18160"
  },
  {
    "text": "uh this work was done primarily by my graduate student shanga Yu who's a fifth year PhD student at MIT and he made the",
    "start": "18160",
    "end": "25480"
  },
  {
    "text": "slides but all errors are mine and uh anything that you don't understand this is my fault um so uh I'd like to tell",
    "start": "25480",
    "end": "33680"
  },
  {
    "text": "you about um some work uh that we're doing that uh is really computer architecture based at least we started",
    "start": "33680",
    "end": "40640"
  },
  {
    "text": "out uh being a computer architecture group in the context of this project and uh worked on uh a a problem of cache",
    "start": "40640",
    "end": "47719"
  },
  {
    "text": "coherence which is an important problem to build shared memory computers but it's kind of Taken on a life of its own",
    "start": "47719",
    "end": "54079"
  },
  {
    "text": "and so that's why we you see software in the title and we've taken these ideas and applied them to databases uh",
    "start": "54079",
    "end": "59960"
  },
  {
    "text": "concurrency control and we have some uh some some I guess Grand plans uh going",
    "start": "59960",
    "end": "65360"
  },
  {
    "text": "forward so uh hopefully you'll be I don't know a 10th as excited as I am about this work once I'm done um so",
    "start": "65360",
    "end": "74200"
  },
  {
    "text": "uh just a minute of context I think you folks all know this uh Mo's law uh is is",
    "start": "74200",
    "end": "80439"
  },
  {
    "text": "been with us for uh half a century we think of it as the the printing press for the currency of performance uh it it",
    "start": "80439",
    "end": "87799"
  },
  {
    "text": "allows uh uh software uh designers or developers um to write uh less and less",
    "start": "87799",
    "end": "94799"
  },
  {
    "text": "efficient software but have it run faster and faster um as um generations",
    "start": "94799",
    "end": "100960"
  },
  {
    "text": "of Mor law uh keep going but the fact of the matter is that we have some issues",
    "start": "100960",
    "end": "106000"
  },
  {
    "start": "106000",
    "end": "212000"
  },
  {
    "text": "here with respect to Moors law and a lot of people outside of probably this",
    "start": "106000",
    "end": "111040"
  },
  {
    "text": "audience conflate Mo's law with Denard scaling uh which um is something that I",
    "start": "111040",
    "end": "116719"
  },
  {
    "text": "just want to point out uh dinard scaling was uh",
    "start": "116719",
    "end": "121840"
  },
  {
    "text": "was um exemplified by the frequency of processors single processors uh",
    "start": "122280",
    "end": "129479"
  },
  {
    "text": "increasing at a significant rate and dinar scaling as you can see here stopped around 2005 um but mors law did",
    "start": "129479",
    "end": "138000"
  },
  {
    "text": "not and mors law is of course the doubling of transistors every generation",
    "start": "138000",
    "end": "143120"
  },
  {
    "text": "and in order to U actually get performance um uh Architects had to",
    "start": "143120",
    "end": "148760"
  },
  {
    "text": "exploit parallelism so as you can see here clock frequency stopped increasing",
    "start": "148760",
    "end": "154280"
  },
  {
    "text": "uh the flattening over there and so the number of cores on a chip uh started increasing and so um you can get uh",
    "start": "154280",
    "end": "161959"
  },
  {
    "text": "commercial products that have um 50 60 uh close to 100 cores on them and uh as",
    "start": "161959",
    "end": "168080"
  },
  {
    "text": "Andy mentioned uh during the introduction uh there's an issue now associated with uh trying to get speed",
    "start": "168080",
    "end": "174360"
  },
  {
    "text": "UPS of from these uh uh parallel cores because um while the sequential",
    "start": "174360",
    "end": "180959"
  },
  {
    "text": "algorithm didn't really care about um coordination or sharing of variables uh",
    "start": "180959",
    "end": "187040"
  },
  {
    "text": "the parallel decomposition of a sequential algorithm has to uh obey a",
    "start": "187040",
    "end": "192519"
  },
  {
    "text": "sequential semantics or whatever semantics that you would like it to obey and synchronization and coordination",
    "start": "192519",
    "end": "199560"
  },
  {
    "text": "becomes very difficult and so it's been a challenge to um get the linear speedups that you'd like to get uh as",
    "start": "199560",
    "end": "206959"
  },
  {
    "text": "you've gone from One Core to four cores to uh eight Cor and uh so on um I want",
    "start": "206959",
    "end": "212680"
  },
  {
    "start": "212000",
    "end": "344000"
  },
  {
    "text": "to say a little bit about the different kinds of parallelism that there are uh in the world today um as a computer",
    "start": "212680",
    "end": "219519"
  },
  {
    "text": "architect uh this is the kind of parallelism that uh is closest to to my",
    "start": "219519",
    "end": "226360"
  },
  {
    "text": "to my field uh to my psyche if you will where you have a few instructions and um",
    "start": "226360",
    "end": "231959"
  },
  {
    "text": "there's a sequential semantics associated with these instructions that the value of D that you see here in the",
    "start": "231959",
    "end": "237040"
  },
  {
    "text": "third instruction uh should be computed by by the second one and so there's a dependence associated with these two",
    "start": "237040",
    "end": "243640"
  },
  {
    "text": "values that you have to obey and in a sequential program it's sort of automatically obeyed but if you try to",
    "start": "243640",
    "end": "249560"
  },
  {
    "text": "exploit instruction level parallelism and try to run these instructions across different cores or perhaps even in",
    "start": "249560",
    "end": "256079"
  },
  {
    "text": "different functional units on a given core um there's uh waiting possibly that",
    "start": "256079",
    "end": "261959"
  },
  {
    "text": "uh needs to happen in order for the correct value of D the new value uh uh",
    "start": "261959",
    "end": "267560"
  },
  {
    "text": "to be used in the computation of G right so that that's an issue oh I should mention by the way that I'm perfectly",
    "start": "267560",
    "end": "273360"
  },
  {
    "text": "happy um to uh answer questions during the talk so if you just raise your hand I'll I'll stop go ahead why only linear",
    "start": "273360",
    "end": "280960"
  },
  {
    "text": "speed up I mean there there's this thing called a grand challenge list we need better than linear speed up uh do you",
    "start": "280960",
    "end": "287639"
  },
  {
    "text": "mean um well I I don't know how to give you that I should say that um uh in in",
    "start": "287639",
    "end": "294800"
  },
  {
    "text": "the the context of this talk I I want to um uh essentially give you uh a solution",
    "start": "294800",
    "end": "302080"
  },
  {
    "text": "where you could pretend that the sequential processor uh ran uh uh you know five times faster",
    "start": "302080",
    "end": "309600"
  },
  {
    "text": "okay so which would be exactly linear speed up right um I think if you're allowed to change the algorithm and",
    "start": "309600",
    "end": "316039"
  },
  {
    "text": "you're you're allowed to um to change perhaps uh the correctness criteria of the algorithm or the results that you",
    "start": "316039",
    "end": "321680"
  },
  {
    "text": "want you could certainly go there but uh the semantics that uh I'm focused on in",
    "start": "321680",
    "end": "326800"
  },
  {
    "text": "this talk it really corresponds to as you'll see as I go along here mimicking these computations right so it's a bit",
    "start": "326800",
    "end": "333759"
  },
  {
    "text": "of it's more narrowly focused than the Grand Challenge right um so there's",
    "start": "333759",
    "end": "339319"
  },
  {
    "text": "another uh class of parallelism that is also going to be important for this talk which comes from the field of databases",
    "start": "339319",
    "end": "346319"
  },
  {
    "start": "344000",
    "end": "500000"
  },
  {
    "text": "and in the field of databases you have transactions uh transactions are usually",
    "start": "346319",
    "end": "351560"
  },
  {
    "text": "fairly small uh sets of reads and writs and perhaps computations which aren't really",
    "start": "351560",
    "end": "357560"
  },
  {
    "text": "shown here and there's parallelism associated with these transactions uh",
    "start": "357560",
    "end": "362720"
  },
  {
    "text": "but uh you do have a constraint um just like you had a constraint about the value of D in the first example you do",
    "start": "362720",
    "end": "369000"
  },
  {
    "text": "have a constraint with these transactions in the sense that um you have to uh ensure that these",
    "start": "369000",
    "end": "375000"
  },
  {
    "text": "transactions are Atomic and I'll say a little bit more about that but you can you can assume for now from a",
    "start": "375000",
    "end": "380919"
  },
  {
    "text": "parallelism standpoint that each of these squares that you see here these red squares could be run in arbitrary",
    "start": "380919",
    "end": "387120"
  },
  {
    "text": "order right U but you can't split I mean these red squares have to be Atomic you",
    "start": "387120",
    "end": "392280"
  },
  {
    "text": "you you you can't uh you can't insert one into the other and as I said I'll say a little bit more about that uh so",
    "start": "392280",
    "end": "398759"
  },
  {
    "text": "that's uh those are two classes of parallelism um let's go on and look at higher levels um you could imagine in a",
    "start": "398759",
    "end": "405120"
  },
  {
    "text": "multicore processor that you have thread level parallelism where you have different threads running on different",
    "start": "405120",
    "end": "410360"
  },
  {
    "text": "cores and if you were multiplying two matrices and you wanted to um get",
    "start": "410360",
    "end": "416080"
  },
  {
    "text": "parallelism then you might um do u a row um column multiplication to write one",
    "start": "416080",
    "end": "423080"
  },
  {
    "text": "particular element of uh this uh product Matrix C and uh you could run um",
    "start": "423080",
    "end": "429560"
  },
  {
    "text": "essentially n Square um if you had an N byn Matrix uh threads in parallel if you",
    "start": "429560",
    "end": "434759"
  },
  {
    "text": "had enough course and uh this would this would work out pretty well in this particular example but that's thread",
    "start": "434759",
    "end": "440039"
  },
  {
    "text": "level parallelism there's many operations that are being performed in this particular case in this particular algorithm there's little dependency in",
    "start": "440039",
    "end": "447360"
  },
  {
    "text": "the computation of the result even though you have shared data it's only being read the two matrices A and B are",
    "start": "447360",
    "end": "453479"
  },
  {
    "text": "only being read um task level parallelism would be uh you want to search for an image on Google or your",
    "start": "453479",
    "end": "459199"
  },
  {
    "text": "favorite search engine and U there's a lot of data being scanned uh that could",
    "start": "459199",
    "end": "464680"
  },
  {
    "text": "be done in parallel um there's going to be some sorting that happens at the end of the data collection which has to be a",
    "start": "464680",
    "end": "470919"
  },
  {
    "text": "little bit serial there's some dependency there uh but uh there's a lot of parallelism here and then there's",
    "start": "470919",
    "end": "476960"
  },
  {
    "text": "user level parallelism where if all of us were searching for different images on Google the data center associated",
    "start": "476960",
    "end": "482080"
  },
  {
    "text": "with uh the particular searches that we're conducting uh has to uh essentially service all of our requests",
    "start": "482080",
    "end": "488360"
  },
  {
    "text": "and there's a lot of parallelism there user level parallelism in in in my group is called you embarrassing parallelism",
    "start": "488360",
    "end": "495080"
  },
  {
    "text": "because this is so much that you don't have to work very hard to exploit it um so um I want to talk now about",
    "start": "495080",
    "end": "502240"
  },
  {
    "start": "500000",
    "end": "559000"
  },
  {
    "text": "dependency because this is fairly fundamental to the stock and uh as you can imagine dependency destroys",
    "start": "502240",
    "end": "508440"
  },
  {
    "text": "parallelism you if I tell you that you have to compute this particular um array",
    "start": "508440",
    "end": "514200"
  },
  {
    "text": "uh and if you notice um I've made it particularly difficult so uh my compiler",
    "start": "514200",
    "end": "519719"
  },
  {
    "text": "friends would be annoyed with me by having this indirect um addressing corresponding to the array where I have",
    "start": "519719",
    "end": "525640"
  },
  {
    "text": "a of bi and and B ofi is essentially this random mapping that you don't really have control over and uh notice",
    "start": "525640",
    "end": "532760"
  },
  {
    "text": "that uh uh afbi depends on a of bi minus one so there's this chain of dependencies and it's really pretty hard",
    "start": "532760",
    "end": "539440"
  },
  {
    "text": "hard to paralyze this um you could flatten it out but then if you don't even know what n is because it's a dynamically assigned variable that would",
    "start": "539440",
    "end": "546279"
  },
  {
    "text": "be difficult to do and so this is this is painful right so dependency destroys parallelism um and uh uh you essentially",
    "start": "546279",
    "end": "554519"
  },
  {
    "text": "have a situation where you'd like to Deo avoid dependency and so um let me talk a",
    "start": "554519",
    "end": "559839"
  },
  {
    "start": "559000",
    "end": "757000"
  },
  {
    "text": "little bit about different kinds of dependency just like I talked about different kinds of parallelism and they're basically four different kinds",
    "start": "559839",
    "end": "566200"
  },
  {
    "text": "if you think about it from a standpoint of reading and writing variables and you can imagine what they are you have reads and writes and you combine them in",
    "start": "566200",
    "end": "572800"
  },
  {
    "text": "different ways uh if you have two reads there's really no dependencies so I guess there's maybe only three kinds of",
    "start": "572800",
    "end": "578200"
  },
  {
    "text": "dependency um and uh if you have two rights then um uh it's actually",
    "start": "578200",
    "end": "583399"
  },
  {
    "text": "something that uh Bears some thought because um you're going to get a value",
    "start": "583399",
    "end": "588519"
  },
  {
    "text": "at the end of this um these two rights and if you don't care about what this",
    "start": "588519",
    "end": "593680"
  },
  {
    "text": "value is you know I might be writing 14 followed by 15 and it's okay from a program correctness standpoint as to the",
    "start": "593680",
    "end": "600000"
  },
  {
    "text": "final result being 14 or 15 then there's no dependency here right now it turns out this is kind of a little bit strange",
    "start": "600000",
    "end": "607000"
  },
  {
    "text": "here because usually you just don't write usually you do an update which includes a read followed by a write so",
    "start": "607000",
    "end": "612800"
  },
  {
    "text": "in that sense you have reads and writes being mixed up and they're not the these particular simple examples",
    "start": "612800",
    "end": "618800"
  },
  {
    "text": "but if you just look at right after right dependencies um semantics decide order if your semantics are flexible you",
    "start": "618800",
    "end": "625040"
  },
  {
    "text": "can ignore them right and for the purposes of this talk we're just going to ignore that yeah go ahead but it might be that writing a is not an atomic",
    "start": "625040",
    "end": "632440"
  },
  {
    "text": "operation oh absolutely correct yeah no a great point I should uh I should have said that uh as as a as a a computer",
    "start": "632440",
    "end": "639760"
  },
  {
    "text": "architect I can assume that when I was reading or writing a particular memory location and you're absolutely right uh",
    "start": "639760",
    "end": "645880"
  },
  {
    "text": "it was a single instruction and and single instructions were Atomic so my so you have to take that uh uh into account",
    "start": "645880",
    "end": "652720"
  },
  {
    "text": "to I guess really understand my my statement and so thanks for the question right so you're absolutely correct that",
    "start": "652720",
    "end": "658959"
  },
  {
    "text": "if if if the right was split up then uh you have problems and you're kind of in the transaction World okay uh because",
    "start": "658959",
    "end": "664680"
  },
  {
    "text": "you want atomicity um so the most interesting kind of uh dependencies are",
    "start": "664680",
    "end": "670760"
  },
  {
    "text": "um raw and War dependencies and as their names indicate uh you have uh read after",
    "start": "670760",
    "end": "676399"
  },
  {
    "text": "write where uh the read needs the new value and that's really the kind of dependency that I've talked about in the",
    "start": "676399",
    "end": "682600"
  },
  {
    "text": "instruction level parallelism example and in the loop example right so these are these are hard if you need the new",
    "start": "682600",
    "end": "687959"
  },
  {
    "text": "value you need the new value you got to wait for somebody to write it right um and another kind of dependency that U is",
    "start": "687959",
    "end": "694880"
  },
  {
    "text": "being obeyed you know in exactly the same way that the raw dependency is being obeyed in Prior work for the most",
    "start": "694880",
    "end": "701399"
  },
  {
    "text": "part with little or no flexibility is the war dependency where um um you want",
    "start": "701399",
    "end": "707440"
  },
  {
    "text": "a read to happen uh before the value is updated right so so there's uh and I",
    "start": "707440",
    "end": "712639"
  },
  {
    "text": "should say by the way that the reason these are skewed out here is that these are two different U reads uh potentially",
    "start": "712639",
    "end": "719600"
  },
  {
    "text": "in two different threads or two different streams of computation and they could be running uh in parallel on two two different cores right so those",
    "start": "719600",
    "end": "726360"
  },
  {
    "text": "two reads could happen in parallel and we're really saying that those two rights it doesn't really matter whether they happen in parallel or not but these",
    "start": "726360",
    "end": "732760"
  },
  {
    "text": "two have to have a dependence so while they may be running on different cores you got this ordering to worry about and",
    "start": "732760",
    "end": "738639"
  },
  {
    "text": "then the same thing for the for the war dependency uh but it turns out we have a lot of flexibility here and really for",
    "start": "738639",
    "end": "744519"
  },
  {
    "text": "the rest of the talk I'm going to be telling you how we're going to kind of basically throw War dependencies right",
    "start": "744519",
    "end": "750560"
  },
  {
    "text": "and that's going to help us avoid dependency and run our programs faster right um so that's really the focus um",
    "start": "750560",
    "end": "758079"
  },
  {
    "start": "757000",
    "end": "881000"
  },
  {
    "text": "so um one last thing uh that I have to talk about is relate all of this uh to",
    "start": "758079",
    "end": "764120"
  },
  {
    "text": "the notion of time um we've really talked about dependence and implicitly",
    "start": "764120",
    "end": "769440"
  },
  {
    "text": "in all of our conversations and certainly what I've talked about here we've talked about physical time uh when",
    "start": "769440",
    "end": "775000"
  },
  {
    "text": "I say after you know it it means in physical time right um but uh there's no",
    "start": "775000",
    "end": "780959"
  },
  {
    "text": "reason why you know time has to be physical and we are talking about software programs and and and virtual",
    "start": "780959",
    "end": "788079"
  },
  {
    "text": "the virtual world and so time could be logical and uh some of you folks may have heard of Lamport clocks there's",
    "start": "788079",
    "end": "794199"
  },
  {
    "text": "some relationship between that and um logical timestamps that we use not exactly the same uh but the bottom line",
    "start": "794199",
    "end": "801560"
  },
  {
    "text": "is that I could just decide that um uh my kind host there is is number one in",
    "start": "801560",
    "end": "807320"
  },
  {
    "text": "my book at least for today I and he's he's he's got logical timestamp number one and this gentleman here",
    "start": "807320",
    "end": "814360"
  },
  {
    "text": "has Gage has time stamp number two and I'm at three here and we've just decided",
    "start": "814360",
    "end": "819639"
  },
  {
    "text": "on order uh that's associated with um with operations um and uh uh the",
    "start": "819639",
    "end": "826360"
  },
  {
    "text": "interesting thing is that uh it's not clear and and I will show you that",
    "start": "826360",
    "end": "831519"
  },
  {
    "text": "there's many cases where there's no reason why subasish has to go first even",
    "start": "831519",
    "end": "836959"
  },
  {
    "text": "though he had logical time one in physical time sub could be last right and and I could be first okay um so",
    "start": "836959",
    "end": "843759"
  },
  {
    "text": "there's a there's a difference and and I'm going to hopefully convince you that this difference is important and that we",
    "start": "843759",
    "end": "849560"
  },
  {
    "text": "can exploit this difference to make programs run faster um so time is really a definition",
    "start": "849560",
    "end": "855839"
  },
  {
    "text": "of ordering right and so there's some Global Order and some correctness Criterion that has to be satisfied but",
    "start": "855839",
    "end": "861720"
  },
  {
    "text": "the actual operations could be run in different uh physical times right and in",
    "start": "861720",
    "end": "867600"
  },
  {
    "text": "fact you know if you were time zones and obviously we have different Notions of time on the east coast and the west coast and uh we think of them as as",
    "start": "867600",
    "end": "875399"
  },
  {
    "text": "order simply because we know it's minus three Etc but we didn't really have to we don't really have to um so let me",
    "start": "875399",
    "end": "882320"
  },
  {
    "start": "881000",
    "end": "946000"
  },
  {
    "text": "give you a concrete example a really simple example of how we can do this um flipping that I just mentioned to you",
    "start": "882320",
    "end": "889000"
  },
  {
    "text": "and we'll look at the war dependence because that's kind of the one that we're after and in the case of the war",
    "start": "889000",
    "end": "894279"
  },
  {
    "text": "dependence I have two threads here that correspond to a read and a write and the war dep Penance says that the that the",
    "start": "894279",
    "end": "901199"
  },
  {
    "text": "right after read so we want the right to happen after the read but uh you know there's nothing that's Stopping Us in",
    "start": "901199",
    "end": "908000"
  },
  {
    "text": "current computers to do the right before the read in physical time as long as and",
    "start": "908000",
    "end": "913880"
  },
  {
    "text": "make the copy uh make that value of 13 as long as it's a local copy of a in the",
    "start": "913880",
    "end": "918959"
  },
  {
    "text": "local processor uh and and that's at 10 and that reach 10 right so really dirt",
    "start": "918959",
    "end": "924440"
  },
  {
    "text": "simple example of of of how you don't have to obey physical time constraints while obeying logical time constraints",
    "start": "924440",
    "end": "930880"
  },
  {
    "text": "and having program semantics being correct right so keep this in mind it's going to get a little bit more",
    "start": "930880",
    "end": "936480"
  },
  {
    "text": "complicated but this is the essence of U of the avoidance of dependency um so physical time different",
    "start": "936480",
    "end": "943920"
  },
  {
    "text": "from logical time um so what is correctness I mean I keep talking about correctness and uh I I haven't really",
    "start": "943920",
    "end": "951040"
  },
  {
    "start": "946000",
    "end": "992000"
  },
  {
    "text": "defined it well you need to have a precise definition of correctness uh if you want to um compare a parallel",
    "start": "951040",
    "end": "958360"
  },
  {
    "text": "execution with the sequential execution uh and uh in the precise sense you want",
    "start": "958360",
    "end": "965000"
  },
  {
    "text": "some sort of ordering definition or a definition with respect to what the results are going to be in order to say",
    "start": "965000",
    "end": "971000"
  },
  {
    "text": "this parallel execution was correct and this one was not correct okay and so there's been many definitions and uh um",
    "start": "971000",
    "end": "978639"
  },
  {
    "text": "typically there's there's a relationship between uh the outputs or the ordering",
    "start": "978639",
    "end": "983800"
  },
  {
    "text": "like I said from the parallel to the sequential and so one of the hardest Notions to um obey uh which is kind of",
    "start": "983800",
    "end": "991839"
  },
  {
    "text": "the most stringent notion that uh uh that computer Architects deal with uh and build parallel processors for is the",
    "start": "991839",
    "end": "998240"
  },
  {
    "start": "992000",
    "end": "1134000"
  },
  {
    "text": "notion of sequential consistency and um while our work applies to weaker consistency models since this is kind of",
    "start": "998240",
    "end": "1004880"
  },
  {
    "text": "the highest bar it makes sense for me to focus on it and so sequential consistency says that I have two threads",
    "start": "1004880",
    "end": "1011920"
  },
  {
    "text": "and they have a and b and they specified that a comes before B same thing for the second thread here for c and d and I",
    "start": "1011920",
    "end": "1019040"
  },
  {
    "text": "want to have a global memory order and you can think of a and b as being reads and writes and you can kind of ignore the additions and the subtractions in",
    "start": "1019040",
    "end": "1025480"
  },
  {
    "text": "the computation because it's really all about the memory um because that's where the values reside and that's what you're going to look at at the end of it and so",
    "start": "1025480",
    "end": "1032558"
  },
  {
    "text": "these orders that I show you here AB followed by CD namely running the first thread followed by the second thread or",
    "start": "1032559",
    "end": "1040038"
  },
  {
    "text": "the other way around that's fine uh um and you can also inter leave so you kind of have this and you have this and you",
    "start": "1040039",
    "end": "1046600"
  },
  {
    "text": "can do this you can do that you can do this but you can't do this right you you you you can't invert um uh a and b or c",
    "start": "1046600",
    "end": "1054480"
  },
  {
    "text": "and d and you've inverted A and B here so that's incorrect okay one other thing you have to keep in mind is that if you",
    "start": "1054480",
    "end": "1061799"
  },
  {
    "text": "chose this particular order uh then if B was a uh was a read",
    "start": "1061799",
    "end": "1068679"
  },
  {
    "text": "and C was a write B absolutely has to get the value that was written by C okay",
    "start": "1068679",
    "end": "1074440"
  },
  {
    "text": "in the parallel program right and if you don't do that then you're not going to get the correct output puts right um so",
    "start": "1074440",
    "end": "1081280"
  },
  {
    "text": "uh that's that's essentially uh the two parts of this right you can't reorder inside of a sequential thread and and",
    "start": "1081280",
    "end": "1088240"
  },
  {
    "text": "once you've decided the order you better be obeying the dependencies but interestingly the dependencies are",
    "start": "1088240",
    "end": "1093520"
  },
  {
    "text": "different the the dependencies are different corresponding to these different executions and that's it in",
    "start": "1093520",
    "end": "1099440"
  },
  {
    "text": "terms of uh if you want uh a 10-second Spiel for my talk um it's it's this",
    "start": "1099440",
    "end": "1104880"
  },
  {
    "text": "which is we're going to exploit the degree of freedom associ with the execution corresponding to the correct",
    "start": "1104880",
    "end": "1111520"
  },
  {
    "text": "sequentially consistent executions in order to find the one that requires the least waiting has the least dependence",
    "start": "1111520",
    "end": "1118559"
  },
  {
    "text": "and runs the fastest okay we don't guarantee optimality or anything like that but we absolutely guarantee correctness okay um and we're going to",
    "start": "1118559",
    "end": "1126080"
  },
  {
    "text": "use these ideas uh in uh in in in a couple of different contexts but the first thing we're going to do um is uh",
    "start": "1126080",
    "end": "1133760"
  },
  {
    "text": "exploit this uh in in the context of uh cash cohs which is uh a difficult",
    "start": "1133760",
    "end": "1139760"
  },
  {
    "start": "1134000",
    "end": "1198000"
  },
  {
    "text": "problem um that uh corresponds to uh ensuring that you have shared memory on",
    "start": "1139760",
    "end": "1145400"
  },
  {
    "text": "a multi-or machine right and it gets more difficult as the number of cores increases so in the the rest of the talk",
    "start": "1145400",
    "end": "1152200"
  },
  {
    "text": "I I'm going to essentially do three things I'm going to tell you about how we can solve cache cerence better uh",
    "start": "1152200",
    "end": "1159520"
  },
  {
    "text": "under some Metric using this idea I'm going to show you how you can solve concurrency control in database systems",
    "start": "1159520",
    "end": "1167480"
  },
  {
    "text": "uh better again in some metric uh using this idea and that's worked on in collaboration with Andy paavo who's a",
    "start": "1167480",
    "end": "1174200"
  },
  {
    "text": "professor at CMU and Daniel Sanchez one of my colleagues Stanford Alam uh and and then I'll give you a sense of uh how",
    "start": "1174200",
    "end": "1180880"
  },
  {
    "text": "things change at the atomic synchronization level uh in terms of",
    "start": "1180880",
    "end": "1185960"
  },
  {
    "text": "load reserves store conditional and those basic instructions at the processor level that give you synchronization and and what our plans",
    "start": "1185960",
    "end": "1192559"
  },
  {
    "text": "are uh in terms of taking this in and building it into systems software systems um so multicore processors and",
    "start": "1192559",
    "end": "1200240"
  },
  {
    "start": "1198000",
    "end": "1203000"
  },
  {
    "text": "concy control really the the meat of this St um so let me talk a little bit and give you some context on why we'",
    "start": "1200240",
    "end": "1206679"
  },
  {
    "start": "1203000",
    "end": "1359000"
  },
  {
    "text": "like to improve uh shared memory uh and uh the efficiency of shared memory so um",
    "start": "1206679",
    "end": "1213360"
  },
  {
    "text": "the canonical way at least right now of implementing shared memory is to use what's called directory based coherence",
    "start": "1213360",
    "end": "1219919"
  },
  {
    "text": "and directory based coherence corresponds to if you let's say you had nine processors here and uh they each",
    "start": "1219919",
    "end": "1225960"
  },
  {
    "text": "have caches so the pce are processors and each have caches and you have different uh colors here associated with",
    "start": "1225960",
    "end": "1232400"
  },
  {
    "text": "data so each color represents the same data same cache block and you can see that this pink data is in a a few",
    "start": "1232400",
    "end": "1239559"
  },
  {
    "text": "different places and um you want that to be local to you because locality is great from a performance standpoint and",
    "start": "1239559",
    "end": "1246320"
  },
  {
    "text": "if you want to go further away then it takes longer so it makes perfect sense to replicate data uh if you can keep it",
    "start": "1246320",
    "end": "1252080"
  },
  {
    "text": "close to you because you can't build large giant caches that you can access very easily they they take up too much",
    "start": "1252080",
    "end": "1257280"
  },
  {
    "text": "power they uh they they use up too much area in terms of the number of ports um",
    "start": "1257280",
    "end": "1262600"
  },
  {
    "text": "but um what you can do is of course replicate and cache locally but then there's a little bit of a problem uh the",
    "start": "1262600",
    "end": "1269600"
  },
  {
    "text": "the problem is that um there's coordination that may be required and you're trying to run a sequential",
    "start": "1269600",
    "end": "1276039"
  },
  {
    "text": "program uh uh and and you're trying to paralyze it and run it obeying the sequential semantics and so if you ever",
    "start": "1276039",
    "end": "1282720"
  },
  {
    "text": "right to it then um that that that right um is going to have to",
    "start": "1282720",
    "end": "1289440"
  },
  {
    "text": "invalidate all of the all of the copies because there's many copies you don't want to have incoherence in the system",
    "start": "1289440",
    "end": "1295559"
  },
  {
    "text": "where you have the same variable if you will uh being you know 12 13 14 and 15",
    "start": "1295559",
    "end": "1301600"
  },
  {
    "text": "at the same time at the same physical time that's that's important in the system okay and and if you if if you",
    "start": "1301600",
    "end": "1308600"
  },
  {
    "text": "didn't do this which was when uh this middle processor wants to write the pink",
    "start": "1308600",
    "end": "1314799"
  },
  {
    "text": "data if you did not invalidate all of the other copy of the data uh and then",
    "start": "1314799",
    "end": "1320520"
  },
  {
    "text": "wait for acknowledgements then uh uh take it from uh take it from me that you would",
    "start": "1320520",
    "end": "1326559"
  },
  {
    "text": "violate sequential consistency okay um and uh you know that fact is in textbooks so I I want to say more um",
    "start": "1326559",
    "end": "1334720"
  },
  {
    "text": "including Patterson and Hennessy since I'm here I should mention that um but um the uh the pain involved here is",
    "start": "1334720",
    "end": "1342960"
  },
  {
    "text": "associated with uh the broadcast of all of these invalidation signals and the",
    "start": "1342960",
    "end": "1349120"
  },
  {
    "text": "collection of these acknowledgements and this pain increases as uh the number of cours increases um not only that uh you",
    "start": "1349120",
    "end": "1357840"
  },
  {
    "text": "also have to um remember unless you're willing to broadcast to all 100 cores in the system",
    "start": "1357840",
    "end": "1365159"
  },
  {
    "start": "1359000",
    "end": "1414000"
  },
  {
    "text": "and uh wait for I don't have it or yes I had it and I invalidated from all 100 cores you do have to um take into",
    "start": "1365159",
    "end": "1372840"
  },
  {
    "text": "account the bookkeeping cost associated with remembering uh which processor had",
    "start": "1372840",
    "end": "1378760"
  },
  {
    "text": "which copy of data and that's essentially a directory structure that's kind of annoying to uh uh to keep track",
    "start": "1378760",
    "end": "1384520"
  },
  {
    "text": "of and and to store because this is an Hardware so um if in fact you went from 64 course where it's not big big problem",
    "start": "1384520",
    "end": "1391840"
  },
  {
    "text": "and so I won't uh belabor the point in terms of the overhead involved in this bookkeeping information and if you went",
    "start": "1391840",
    "end": "1398600"
  },
  {
    "text": "to uh a thousand cores you're talking about a 300% overhead in terms of the",
    "start": "1398600",
    "end": "1404640"
  },
  {
    "text": "bookkeeping versus useful data which is completely ridiculous right so you you don't want you don't really want to do",
    "start": "1404640",
    "end": "1410360"
  },
  {
    "text": "that um so we'd like to avoid this and um uh one way you could avoid it is to",
    "start": "1410360",
    "end": "1417080"
  },
  {
    "start": "1414000",
    "end": "1696000"
  },
  {
    "text": "use this notion of leases which is basically a library scheme okay and so this is nothing to do with the with our",
    "start": "1417080",
    "end": "1424120"
  },
  {
    "text": "logical timestamps yet but I'm going to relate this to logical timestamps in just a minute but let me just talk about",
    "start": "1424120",
    "end": "1430200"
  },
  {
    "text": "lease based coherence and U and and libraries so you can imagine that u in",
    "start": "1430200",
    "end": "1435799"
  },
  {
    "text": "order to avoid the bookkeeping cost I uh give data uh that U uh is valid for a",
    "start": "1435799",
    "end": "1443919"
  },
  {
    "text": "certain amount of time we'll call it a lease for a couple couple of time units whatever that is uh to a particular",
    "start": "1443919",
    "end": "1450080"
  },
  {
    "text": "processor core zero and that processor during that time can keep loading the data uh and then after it",
    "start": "1450080",
    "end": "1457640"
  },
  {
    "text": "expires then um you actually have to renew the data so so the data expires it's invalid in the cache you have to go",
    "start": "1457640",
    "end": "1464640"
  },
  {
    "text": "get a new copy and you have to bring it back right so you have to choose this lease proper ly um in a lease based",
    "start": "1464640",
    "end": "1471320"
  },
  {
    "text": "coherence model if someone has a a copy uh and someone else wants to write it",
    "start": "1471320",
    "end": "1478240"
  },
  {
    "text": "what you end up having to do is you have to wait as these this doted line shows for that data to expire uh and uh that",
    "start": "1478240",
    "end": "1486159"
  },
  {
    "text": "waiting is going to be a function of the length of the lease so it becomes incredibly important to get the leases",
    "start": "1486159",
    "end": "1491440"
  },
  {
    "text": "exact you know kind of exactly right because the leases are too short you keep renewing and the leases are too",
    "start": "1491440",
    "end": "1497279"
  },
  {
    "text": "long then you wait on rights okay so this doesn't actually work work and I've",
    "start": "1497279",
    "end": "1502399"
  },
  {
    "text": "tried very hard a few years ago to get this to work and then I couldn't get it to work um what we do in the Tardis",
    "start": "1502399",
    "end": "1510559"
  },
  {
    "text": "protocol uh is um is use logical leases but before I tell you about Tardis let",
    "start": "1510559",
    "end": "1516440"
  },
  {
    "text": "me tell you the one nice thing about this lease based protocol the one nice thing about this lease based protocol",
    "start": "1516440",
    "end": "1522039"
  },
  {
    "text": "that you might have guessed is that my bookkeeping information is much less because I don't need to know who who",
    "start": "1522039",
    "end": "1528480"
  },
  {
    "text": "checked out this book from the library right all of you could have checked out this book um uh if you're processors or",
    "start": "1528480",
    "end": "1535279"
  },
  {
    "text": "a subset of you what I need to know is the maximum time associated with all of",
    "start": "1535279",
    "end": "1541000"
  },
  {
    "text": "your leases is just one number and that maximum time sadly is the time that I",
    "start": "1541000",
    "end": "1547520"
  },
  {
    "text": "have to wait for in order for someone to write the data right so I've gone from order n bookkeeping information to order",
    "start": "1547520",
    "end": "1554480"
  },
  {
    "text": "one bookkeeping information but what I've done is um it is is created another",
    "start": "1554480",
    "end": "1560240"
  },
  {
    "text": "problem that's associated with the right latency okay um but there was no invalidations and there were no",
    "start": "1560240",
    "end": "1565399"
  },
  {
    "text": "acknowledgements and there was no order end information right so that's why I was pumped up about this idea a few",
    "start": "1565399",
    "end": "1570840"
  },
  {
    "text": "years ago but I couldn't get it to work because it's very hard to choose the leases correctly and as I mentioned um I",
    "start": "1570840",
    "end": "1577039"
  },
  {
    "text": "won't repeat myself so the cool thing here is that using the notion of logical time we're going to fix this problem and",
    "start": "1577039",
    "end": "1585120"
  },
  {
    "text": "uh we're going to that's where the title you know time travel what have you uh comes in we're going to actually fix",
    "start": "1585120",
    "end": "1591240"
  },
  {
    "text": "this problem and so we're going to be back to to not physical time leases but logical",
    "start": "1591240",
    "end": "1596399"
  },
  {
    "text": "leases um and so we're going to have a program Tim stamp uh associated with each thread uh the loads uh and stores",
    "start": "1596399",
    "end": "1604399"
  },
  {
    "text": "corresponding to each thread and so there's like multiple clocks associated with um uh with each different processor",
    "start": "1604399",
    "end": "1610880"
  },
  {
    "text": "which are keeping different times so this is uh and they may vary they may get closer together uh and uh they may",
    "start": "1610880",
    "end": "1617799"
  },
  {
    "text": "Jump Ahead Etc you never roll back but you could jump ahead so the rates um of",
    "start": "1617799",
    "end": "1623679"
  },
  {
    "text": "incrementing these clocks are different um and so we're going to basically have",
    "start": "1623679",
    "end": "1629080"
  },
  {
    "text": "two timestamps um the the two timestamps are um and this is important because this is",
    "start": "1629080",
    "end": "1635039"
  },
  {
    "text": "incredibly important because every algorithm that I'm going to talk about from here on out is dependent on the",
    "start": "1635039",
    "end": "1640399"
  },
  {
    "text": "definition of these two time stamps and uh the first time stamp is the right Tim stamp uh or WTS as it's shown here and",
    "start": "1640399",
    "end": "1648600"
  },
  {
    "text": "the second one is the read time stamp the right Tim stamp you can think of it as the version of the data every time I",
    "start": "1648600",
    "end": "1654840"
  },
  {
    "text": "read the excuse me write the data I'm going to increment the the the the the",
    "start": "1654840",
    "end": "1660919"
  },
  {
    "text": "right time stamp uh at least by one because I need a new version of the data",
    "start": "1660919",
    "end": "1666519"
  },
  {
    "text": "right so if if I see two uh pieces of data with two different uh right time stamps whether the values are the same",
    "start": "1666519",
    "end": "1672519"
  },
  {
    "text": "or not uh I I I know that they're two different versions of the data and RTS is the read time stand and the semantics",
    "start": "1672519",
    "end": "1679799"
  },
  {
    "text": "there are simply that the data is valid When It Was Written which obviously was",
    "start": "1679799",
    "end": "1685679"
  },
  {
    "text": "when the right time stamp uh time started till the read time stamp value",
    "start": "1685679",
    "end": "1691120"
  },
  {
    "text": "right so that's the lease right so it's between WTS and RTS um and so yeah go ahead where are",
    "start": "1691120",
    "end": "1698679"
  },
  {
    "start": "1696000",
    "end": "1847000"
  },
  {
    "text": "these kept uh so I I'm definitely going to answer that question but in due course okay yeah um so um what we're",
    "start": "1698679",
    "end": "1707039"
  },
  {
    "text": "going to do uh is replace this invalidation just and you kind of get the sense of that because we already",
    "start": "1707039",
    "end": "1712320"
  },
  {
    "text": "replaced it uh uh with the with the lease uh idea but of course that was",
    "start": "1712320",
    "end": "1717559"
  },
  {
    "text": "done in physical time we are going to use this lease idea like I just showed you with the WTS and the RTS but we're",
    "start": "1717559",
    "end": "1723360"
  },
  {
    "text": "going to do these leases in in logical time uh which as I mentioned is a concept borrowed from multiversion uh",
    "start": "1723360",
    "end": "1729559"
  },
  {
    "text": "databases or multiversion in databases and so that's essentially the the picture so um I'm going to answer your",
    "start": "1729559",
    "end": "1736760"
  },
  {
    "text": "question um and uh U I'm going to show you um an execution of the TARDIS",
    "start": "1736760",
    "end": "1741919"
  },
  {
    "text": "protocol on an example and um it's simple example but it highlights uh I",
    "start": "1741919",
    "end": "1748080"
  },
  {
    "text": "think the interesting feature of this protocol and uh I'm happy to answer questions along the way but probably",
    "start": "1748080",
    "end": "1754720"
  },
  {
    "text": "best after uh well you can ask me questions anytime through the animation as well I I want to say that uh the",
    "start": "1754720",
    "end": "1761159"
  },
  {
    "text": "animation I'm going to show you is in physical time okay but uh what actually",
    "start": "1761159",
    "end": "1766720"
  },
  {
    "text": "is happening in terms of depend IES it not necessarily in physical time right and I'll get back to that uh so what I",
    "start": "1766720",
    "end": "1773600"
  },
  {
    "text": "have here is U simply uh the setup um and I have a core which has a pts which",
    "start": "1773600",
    "end": "1779440"
  },
  {
    "text": "is the program Tim stamp think of it as the as a timestamp of the thread that is running not necessarily the the the",
    "start": "1779440",
    "end": "1785320"
  },
  {
    "text": "processor timestamp P is for uh program not processor and my cach line is going",
    "start": "1785320",
    "end": "1791720"
  },
  {
    "text": "to in the highest level of cache is going to have um well I'm not showing",
    "start": "1791720",
    "end": "1796799"
  },
  {
    "text": "the value here but this is essentially saying that it's a shared value or it's a modified value so there a couple of",
    "start": "1796799",
    "end": "1802519"
  },
  {
    "text": "bits there and then it's going to have a WTS and an RTS which is zero and 10 in this case right and so and then I'm just",
    "start": "1802519",
    "end": "1809279"
  },
  {
    "text": "assuming in this simple example that each core has a L1 one local cache and",
    "start": "1809279",
    "end": "1815279"
  },
  {
    "text": "then there's a shared last level cache you can call it L2 that corresponds to the the memory right and so there's only",
    "start": "1815279",
    "end": "1821720"
  },
  {
    "text": "one there's only one copy of a could be replicated across multiple cores in local caches but there's only one copy",
    "start": "1821720",
    "end": "1828039"
  },
  {
    "text": "of a if that um in the shared LLC this at most one uh valid copy in the LLC so",
    "start": "1828039",
    "end": "1836039"
  },
  {
    "text": "that's pretty much it um and so this is the description um one last thing here",
    "start": "1836039",
    "end": "1841720"
  },
  {
    "text": "is that uh I want to emphasize that the lease is between WTS and RTS and uh",
    "start": "1841720",
    "end": "1848279"
  },
  {
    "start": "1847000",
    "end": "1901000"
  },
  {
    "text": "let's dive into this uh this two core example so uh that's our setup um I'm going to start with 0 this is the cache",
    "start": "1848279",
    "end": "1855279"
  },
  {
    "text": "it's empty um that's what I got here uh all time stamps values are zero I don't really care about the the values of the",
    "start": "1855279",
    "end": "1862159"
  },
  {
    "text": "data itself I mean they're kind of irrelevant because we're just doing reads and writes and the semantics has to be correct regardless of the values",
    "start": "1862159",
    "end": "1869320"
  },
  {
    "text": "um we're going to run this particular program uh and the animation as I mentioned is going to run in um physical",
    "start": "1869320",
    "end": "1875480"
  },
  {
    "text": "time and it's going to be ordered like you see here 1 2 3 4 5 right so um let's",
    "start": "1875480",
    "end": "1880799"
  },
  {
    "text": "take it let's Dive Right In so core zero is going to do um uh it wants to do the the",
    "start": "1880799",
    "end": "1888679"
  },
  {
    "text": "uh instruction one which is a store so what it does is it goes over and says I need to store I don't have it in my",
    "start": "1888679",
    "end": "1895440"
  },
  {
    "text": "cache and I want to store a so I'm going to go ahead um and uh um uh do that",
    "start": "1895440",
    "end": "1901519"
  },
  {
    "start": "1901000",
    "end": "1944000"
  },
  {
    "text": "store so I do a request to the core and uh it it now says I I'm going to give it",
    "start": "1901519",
    "end": "1907600"
  },
  {
    "text": "to you you're going to modify this because you asked for a store and uh the S became m in the cache and now I've",
    "start": "1907600",
    "end": "1914960"
  },
  {
    "text": "created a new version of the data and this data was was uh was given to me um",
    "start": "1914960",
    "end": "1921720"
  },
  {
    "text": "if I'm core zero being an an owner of the data and so the WTS and RTS are one",
    "start": "1921720",
    "end": "1928440"
  },
  {
    "text": "uh because it's modified uh I'm going to be able to do anything I want to this data it's kind of my private data at",
    "start": "1928440",
    "end": "1934159"
  },
  {
    "text": "this moment in time because there's only one Cod that's interested in it right but I did have to increment that WTS",
    "start": "1934159",
    "end": "1939760"
  },
  {
    "text": "because I created a new version of the data from the initial version right um so now I want to do a load B and uh load",
    "start": "1939760",
    "end": "1946399"
  },
  {
    "start": "1944000",
    "end": "2013000"
  },
  {
    "text": "B goes over here and then it's just a read so um I'm going to now ask uh kind of um uh uh",
    "start": "1946399",
    "end": "1954360"
  },
  {
    "text": "arbitrarily for a lease of 10 and so um that was completely arbitrary because my",
    "start": "1954360",
    "end": "1959960"
  },
  {
    "text": "pts is at one it it got incremented I need when I wrote this I have to increment that pts um I I'm going to get",
    "start": "1959960",
    "end": "1967840"
  },
  {
    "text": "um essentially this data back um so um I wanted to do this load and when I did",
    "start": "1967840",
    "end": "1974440"
  },
  {
    "text": "this load I asked for a load uh this is the same process C Core zero um its pts",
    "start": "1974440",
    "end": "1980279"
  },
  {
    "text": "got incremented to one I orbitally chose the least to be 10 and so now I'm going",
    "start": "1980279",
    "end": "1985679"
  },
  {
    "text": "to get essentially B which is shared uh uh and the I didn't write it so the WTS",
    "start": "1985679",
    "end": "1992159"
  },
  {
    "text": "is still zero and and it's going to be valid till 11 because that's 10 after my",
    "start": "1992159",
    "end": "1997399"
  },
  {
    "text": "pts okay so that's essentially what we have here all right now things get",
    "start": "1997399",
    "end": "2003000"
  },
  {
    "text": "interesting so far nothing much happened um I want to do a store of B which",
    "start": "2003000",
    "end": "2008760"
  },
  {
    "text": "clearly um is stored in core zero now but I want to do the store in core one",
    "start": "2008760",
    "end": "2015159"
  },
  {
    "start": "2013000",
    "end": "2091000"
  },
  {
    "text": "okay um and now I do a store request uh what this timestamp manager tells me um",
    "start": "2015159",
    "end": "2022720"
  },
  {
    "text": "is that uh the uh B is is actually uh in",
    "start": "2022720",
    "end": "2029720"
  },
  {
    "text": "shared form in a different core and um in particular the time stamp manager",
    "start": "2029720",
    "end": "2035480"
  },
  {
    "text": "knows that the and there may be mult M cores here the time stamp manager does know this number 11 as you can see and",
    "start": "2035480",
    "end": "2042279"
  },
  {
    "text": "uh if there were multiple cores it would be the max of those values right but that's not particularly important but",
    "start": "2042279",
    "end": "2047440"
  },
  {
    "text": "good to know um so um in a lease based scheme that was based on physical time I",
    "start": "2047440",
    "end": "2052960"
  },
  {
    "text": "have to go Tik Tok Tik Tok Tik Tok you know let's say 10 times in order to get to the point where I can write this but",
    "start": "2052960",
    "end": "2058440"
  },
  {
    "text": "since this is The Logical scheme um I just decide uh that I'm going to get exclusive ownership of a new version of",
    "start": "2058440",
    "end": "2065398"
  },
  {
    "text": "the data there's no invalidation I'm just just going to send back this uh this cach line uh in exclusive form and",
    "start": "2065399",
    "end": "2072919"
  },
  {
    "text": "this core is going to jump ahead in time and change the value to whatever it wanted and but set its time to be 12 and",
    "start": "2072919",
    "end": "2080240"
  },
  {
    "text": "create the WTS to be 12 and in this case it owns the data so same as the first",
    "start": "2080240",
    "end": "2085560"
  },
  {
    "text": "example the RTS would be 12 as well right so so what you see here is",
    "start": "2085560",
    "end": "2091320"
  },
  {
    "start": "2091000",
    "end": "2109000"
  },
  {
    "text": "incoherence from a physical time standpoint uh but it's completely okay",
    "start": "2091320",
    "end": "2096839"
  },
  {
    "text": "because it's to disjoint worlds uh that aren't really intersecting uh in terms of time okay um and um these versions",
    "start": "2096839",
    "end": "2105880"
  },
  {
    "text": "are going to be ordered in logical time so the rest of this is not uh particularly uh interesting uh but worth",
    "start": "2105880",
    "end": "2112560"
  },
  {
    "start": "2109000",
    "end": "2403000"
  },
  {
    "text": "going through just to see what happens in a couple more instructions it's not that long so let's say core one wants to",
    "start": "2112560",
    "end": "2118440"
  },
  {
    "text": "do a load and now load is a then and this value was was uh uh changed in core",
    "start": "2118440",
    "end": "2125800"
  },
  {
    "text": "zero so what does what this entails is a request for a load you do what's called",
    "start": "2125800",
    "end": "2131520"
  },
  {
    "text": "a write back because this the time stamp manager knows that the owner of this data is uh this particular data is core",
    "start": "2131520",
    "end": "2137280"
  },
  {
    "text": "zero so so um core zero now returns this data and and notice that the the the",
    "start": "2137280",
    "end": "2144040"
  },
  {
    "text": "lease is now um something that is going to take the RTS and turn it into 22 and",
    "start": "2144040",
    "end": "2149319"
  },
  {
    "text": "you might say why 22 and the answer is um the pts here our lease is always 10",
    "start": "2149319",
    "end": "2156160"
  },
  {
    "text": "that's our default value the the pts here was 12 and so you want this data to",
    "start": "2156160",
    "end": "2161680"
  },
  {
    "text": "be stored in your local cache for 10 time units corresponding to you so um and you may as well update it over here",
    "start": "2161680",
    "end": "2169040"
  },
  {
    "text": "um as well because the maximum value uh that you that you get um it's fine for",
    "start": "2169040",
    "end": "2175040"
  },
  {
    "text": "this to be 22 this to be 22 that to be 22 I mean you could leave this as whatever it was before but the fact of",
    "start": "2175040",
    "end": "2180480"
  },
  {
    "text": "the matter is that any operation that writes a is going to have to jump to 23 now so doesn't really matter so this is",
    "start": "2180480",
    "end": "2186760"
  },
  {
    "text": "a small optimization which U uh if you didn't quite get it doesn't really matter uh and then",
    "start": "2186760",
    "end": "2192640"
  },
  {
    "text": "finally a load here corresponds to just reading that value nothing really changes notice though that on",
    "start": "2192640",
    "end": "2200200"
  },
  {
    "text": "reads the the timestamp counter doesn't have to increment okay so this actually",
    "start": "2200200",
    "end": "2206359"
  },
  {
    "text": "is going to pose a little bit of a problem that I'll get to a little bit later uh but we do not increment on reads and that's actually the difference",
    "start": "2206359",
    "end": "2212760"
  },
  {
    "text": "between uh logical timestamps in our protocol and Lamport clocks which increment on every op a right and we",
    "start": "2212760",
    "end": "2218720"
  },
  {
    "text": "also Jump Ahead in time so that's a little bit different right so what exactly happened here um I clearly",
    "start": "2218720",
    "end": "2224160"
  },
  {
    "text": "didn't do any waiting I I it was just back and forth back and forth right there was no latency associated with",
    "start": "2224160",
    "end": "2230359"
  },
  {
    "text": "waiting for something to happen there were obviously a bunch of operations and then there was no broadcast even though",
    "start": "2230359",
    "end": "2235839"
  },
  {
    "text": "there were obviously only two cores here but even though you had lots of shared copies it was always kind of a point",
    "start": "2235839",
    "end": "2241200"
  },
  {
    "text": "to-point communication all right uh those two are important uh to to know so",
    "start": "2241200",
    "end": "2247000"
  },
  {
    "text": "the the what oh so so this the the thing that's interesting here if you look at what's",
    "start": "2247000",
    "end": "2253920"
  },
  {
    "text": "happening all of the operations here are happening at pts equals 1 and all of the",
    "start": "2253920",
    "end": "2259960"
  },
  {
    "text": "operations here are essentially happening at pts equals 12 so if you really think about this while the",
    "start": "2259960",
    "end": "2266440"
  },
  {
    "text": "animation showed you the the physical time uh in effect because we're going to do a logical time order uh the",
    "start": "2266440",
    "end": "2273400"
  },
  {
    "text": "operations in core zero all happened before the operations in Core 1 right in in in logical time order right um and so",
    "start": "2273400",
    "end": "2281040"
  },
  {
    "text": "the picture here is the following um what you see here is the physical time order but actually what happened in",
    "start": "2281040",
    "end": "2287480"
  },
  {
    "text": "terms of the program semantics was what you see on the right right um because it",
    "start": "2287480",
    "end": "2293119"
  },
  {
    "text": "this all happened at logical time zero and that is in fact correct load B um is uh in terms of the",
    "start": "2293119",
    "end": "2303040"
  },
  {
    "text": "the the the value that this load is getting uh I'm sorry this this load and that load is are getting are the same",
    "start": "2303040",
    "end": "2309839"
  },
  {
    "text": "right um it's not that these values are are different go ahead subish I thought you know the previous example if you to",
    "start": "2309839",
    "end": "2316359"
  },
  {
    "text": "the prev slide I thought you were going to make the point that from a performance standpoint the benefit that",
    "start": "2316359",
    "end": "2322440"
  },
  {
    "text": "you would get is that if that second code after after storing the B if it was",
    "start": "2322440",
    "end": "2327520"
  },
  {
    "text": "trying to you know load the value of b or something like that somehow when you know it is owning that particular St",
    "start": "2327520",
    "end": "2334359"
  },
  {
    "text": "then you don't have to wait and that abely that would be your because otherwise some other core had to load",
    "start": "2334359",
    "end": "2340079"
  },
  {
    "text": "the value of B you still have to do invalidation and all that basically or if some other core had to store the value you have to do invalidation and",
    "start": "2340079",
    "end": "2346079"
  },
  {
    "text": "all that anyway right you know right so um what you said actually also happens",
    "start": "2346079",
    "end": "2351960"
  },
  {
    "text": "um in um in this particular store so so in this store B here because this load",
    "start": "2351960",
    "end": "2357920"
  },
  {
    "text": "happened um I did not have to invalidate uh this copy as well right um and so",
    "start": "2357920",
    "end": "2363200"
  },
  {
    "text": "let's assume that you know you all of this score zero was replicated in 20 cores you know minus one through",
    "start": "2363200",
    "end": "2368839"
  },
  {
    "text": "whatever um and uh each of those had loaded the B values in a directory protocol you would end up having to send",
    "start": "2368839",
    "end": "2375079"
  },
  {
    "text": "all of those things right so thanks for bringing that up so that's important I I did not wait and I I I jumped ahead in",
    "start": "2375079",
    "end": "2380800"
  },
  {
    "text": "order to get a new version of of the data um for the purposes of making this uh fit on a slide we stuck with uh we",
    "start": "2380800",
    "end": "2387400"
  },
  {
    "text": "stuck with true cores so so these this is kind of the contrast right so that's kind of uh the important thing here um",
    "start": "2387400",
    "end": "2393960"
  },
  {
    "text": "it is important to understand that it's not that this is purely logical time time there is a physical time order",
    "start": "2393960",
    "end": "2399359"
  },
  {
    "text": "associated with these uh operations they happened in program order so if you take a look at the dependencies then um",
    "start": "2399359",
    "end": "2407200"
  },
  {
    "start": "2403000",
    "end": "2578000"
  },
  {
    "text": "basically what's happened is the original execution uh if if you uh executed it and you assumed that you",
    "start": "2407200",
    "end": "2413200"
  },
  {
    "text": "were using a directory protocol uh you would have all these dependencies that are shown here um on the on the right",
    "start": "2413200",
    "end": "2419520"
  },
  {
    "text": "hand side in in um there's only one dependency um that uh that we have to",
    "start": "2419520",
    "end": "2425280"
  },
  {
    "text": "worry about which is the red dependency corresponding to to the the the raw dependency and that simply says that uh",
    "start": "2425280",
    "end": "2431960"
  },
  {
    "text": "the load a uh it should get um the the value corresponding to uh the story a",
    "start": "2431960",
    "end": "2439280"
  },
  {
    "text": "over here and that's actually what happens because of the right back uh the war dependency I've just shown it in",
    "start": "2439280",
    "end": "2445040"
  },
  {
    "text": "green because it doesn't require any waiting um it it was a a dependency of convenience that's the way we think",
    "start": "2445040",
    "end": "2451400"
  },
  {
    "text": "about it uh we decided that we wanted to write this value and uh um in fact this",
    "start": "2451400",
    "end": "2456920"
  },
  {
    "text": "uh this value is going to get written instantaneously and it's not really a a a war dependency because you've created",
    "start": "2456920",
    "end": "2463280"
  },
  {
    "text": "two two versions of the data um and so uh the the actual in terms of being a",
    "start": "2463280",
    "end": "2469240"
  },
  {
    "text": "little bit precise the actual notion of time here is a combination of physical time and logical time and in particular",
    "start": "2469240",
    "end": "2477240"
  },
  {
    "text": "um you can see that uh all the ones happen uh before the twelves but notice that the ones have to be we have to do a",
    "start": "2477240",
    "end": "2483280"
  },
  {
    "text": "tie break on the ones and we have to do a tie break on the tws because it's not unique time stamps are not unique that's",
    "start": "2483280",
    "end": "2489800"
  },
  {
    "text": "the only subtlety that I want to point out so if you want a precise definition of a physiological time which we call",
    "start": "2489800",
    "end": "2495800"
  },
  {
    "text": "physiological time for ease of pronunciation it's just phys hyphen logical is that if the logical timestamp",
    "start": "2495800",
    "end": "2503319"
  },
  {
    "text": "of X is less than y then sure um mean in in physiological time it's less but if they're equal then you have to break the",
    "start": "2503319",
    "end": "2510079"
  },
  {
    "text": "tie using physical time which is essentially program order all right um so what does this all mean did I answer",
    "start": "2510079",
    "end": "2516920"
  },
  {
    "text": "your question about where the time stamps are stor right yeah good what's the unit um the unit is is is is well 16",
    "start": "2516920",
    "end": "2524640"
  },
  {
    "text": "bits and you just increment no no for cash line for word oh oh I'm sorry cash",
    "start": "2524640",
    "end": "2529760"
  },
  {
    "text": "line Cash Line yeah Cash Line so false sharing would be a problem absolutely right I mean that part doesn't go away",
    "start": "2529760",
    "end": "2535760"
  },
  {
    "text": "right um from so um there's a lot of details there's a lot of bookkeeping uh",
    "start": "2535760",
    "end": "2540960"
  },
  {
    "text": "but and there's a longish proof which is not very complicated uh that says that this protocol will produce a global",
    "start": "2540960",
    "end": "2547640"
  },
  {
    "text": "order um under this definition that obey sequential consistency right yeah and what about the memory mod because we",
    "start": "2547640",
    "end": "2554680"
  },
  {
    "text": "don't have sequentially consistent memories um right so um so it turns out",
    "start": "2554680",
    "end": "2560520"
  },
  {
    "text": "uh you have to do a little bit more if you want to build this on an x86 machine and you'd have to do a a total store",
    "start": "2560520",
    "end": "2566960"
  },
  {
    "text": "order and uh it turns out the protocol uh is if we do have a protocol for it but U but it requires a little bit more",
    "start": "2566960",
    "end": "2573160"
  },
  {
    "text": "work right and I'm happy to talk talk to you about that offline right um so let's talk a little bit about pros",
    "start": "2573160",
    "end": "2579680"
  },
  {
    "start": "2578000",
    "end": "2838000"
  },
  {
    "text": "and cons I I'm not a a a big person in terms of quantifying uh work uh in terms",
    "start": "2579680",
    "end": "2586839"
  },
  {
    "text": "of numbers uh personally but obviously the publish papers we have we need a lot of numbers in this community uh but I'll",
    "start": "2586839",
    "end": "2592880"
  },
  {
    "text": "point you to um to papers but I just want to talk at the qualitative level as to why this would be interesting to a",
    "start": "2592880",
    "end": "2599079"
  },
  {
    "text": "computer architect and let me say right off the bat that I don't think it's interesting for small score small scale",
    "start": "2599079",
    "end": "2604839"
  },
  {
    "text": "systems you know if you really need to get up to 100 200 course this would be interesting um because this is scalable",
    "start": "2604839",
    "end": "2611440"
  },
  {
    "text": "uh it's scalable um in terms of the bookkeeping cost and it's scalable because it doesn't require any",
    "start": "2611440",
    "end": "2617800"
  },
  {
    "text": "invalidation or uh multicast or broadcast um there's a problem with",
    "start": "2617800",
    "end": "2623079"
  },
  {
    "text": "lease renew U and it turns out um I mentioned the logical lease problem where you could um essentially you had",
    "start": "2623079",
    "end": "2630559"
  },
  {
    "text": "to decide what the leases were it's much less um of a problem here we arbitrarily",
    "start": "2630559",
    "end": "2636520"
  },
  {
    "text": "choose um a lease of 10 because we don't have to wait for leases to expire and",
    "start": "2636520",
    "end": "2641800"
  },
  {
    "text": "number one when you renew leases we speculate that the leases will be renewed and hide the bandwidth of the",
    "start": "2641800",
    "end": "2648160"
  },
  {
    "text": "data coming back uh by essentially saying just tell me if I could renew the data and renew the lease which is much",
    "start": "2648160",
    "end": "2654559"
  },
  {
    "text": "uh smaller amount which is much smaller amount of data and on top of that we can we speculate uh to hide the latency so",
    "start": "2654559",
    "end": "2661680"
  },
  {
    "text": "you can have an outof order speculative speculative processor or an in order speculative processor that would hide",
    "start": "2661680",
    "end": "2667160"
  },
  {
    "text": "the renewal latency um and that's what we do in our experiments through speculative reads uh time stamp size is",
    "start": "2667160",
    "end": "2674359"
  },
  {
    "text": "is an issue it turns out we can do some time time compression and get it to be a small fraction of the cach line size uh",
    "start": "2674359",
    "end": "2681359"
  },
  {
    "text": "and there's a little bit of a problem of uh reads not incrementing the time stamp",
    "start": "2681359",
    "end": "2686640"
  },
  {
    "text": "so U if you ever saw a Doctor Who episode on time standing still um this is not quite a phys not quite a research",
    "start": "2686640",
    "end": "2693960"
  },
  {
    "text": "realization of that but um but there is an issue if you have spinning uh and you use spinning um uh to um check on a",
    "start": "2693960",
    "end": "2702160"
  },
  {
    "text": "value of a variable um you would never get out of the loop and so you do have to increment the time periodically at",
    "start": "2702160",
    "end": "2708480"
  },
  {
    "text": "some rate in order to avoid the live lock that's associated with this right so that's kind of the the summary of of",
    "start": "2708480",
    "end": "2714079"
  },
  {
    "text": "tardis right uh so um well I think uh we are at",
    "start": "2714079",
    "end": "2721319"
  },
  {
    "text": "the point where um you know I'm done with this I I can certainly take off",
    "start": "2721319",
    "end": "2726839"
  },
  {
    "text": "yeah questions yeah what what happens if you have multiple cat levels you talked about um so yeah so there's I mean the",
    "start": "2726839",
    "end": "2735680"
  },
  {
    "text": "question is are those cash levels um uh private or shared uh you know are they are they sharded or or or private um",
    "start": "2735680",
    "end": "2743160"
  },
  {
    "text": "it's not a not a big deal uh there's there's time stamps that are required uh for the for the different levels um what",
    "start": "2743160",
    "end": "2750440"
  },
  {
    "text": "we think of we think about uh the the time stamps as being uh determined uh",
    "start": "2750440",
    "end": "2755839"
  },
  {
    "text": "simply by the L1 cache are requested by the L1 cache and those values would percolate um through um uh through let's",
    "start": "2755839",
    "end": "2764160"
  },
  {
    "text": "say an intermediate L2 uh and of course the time stamp manager for our argument sake would be in the shared LLC and that",
    "start": "2764160",
    "end": "2770079"
  },
  {
    "text": "would determine that okay but I'm happy to talk to you about that offline if that didn't answer your question go",
    "start": "2770079",
    "end": "2775200"
  },
  {
    "text": "ahead are there issues with time stamp wrapping um that's a great question um",
    "start": "2775200",
    "end": "2781079"
  },
  {
    "text": "it turns out no um so if you had 64-bit time stamps uh then obviously there would uh you would need need to wrap",
    "start": "2781079",
    "end": "2787559"
  },
  {
    "text": "around but it turns out you don't want 64-bit time stamps because of the overheads involved so if you would like to reduce that to 16 bits and uh um you",
    "start": "2787559",
    "end": "2796040"
  },
  {
    "text": "you have to be careful and so there's a little bit more that I didn't go over uh but it's in the paper right yeah great",
    "start": "2796040",
    "end": "2803920"
  },
  {
    "text": "questions uh so time time compression has to take into account this problem that you just pointed out um so really",
    "start": "2803920",
    "end": "2810359"
  },
  {
    "text": "quickly I want to give you a sense of why this type of definition of time is",
    "start": "2810359",
    "end": "2815480"
  },
  {
    "text": "more broadly applicable not just in computer architecture but in distributed systems right um and so let's talk about",
    "start": "2815480",
    "end": "2821640"
  },
  {
    "text": "concurrency control uh and um the notion of sequential consistency translates to",
    "start": "2821640",
    "end": "2827079"
  },
  {
    "text": "what's called serializability in the database world and not exactly equivalent but for the purposes of this",
    "start": "2827079",
    "end": "2832280"
  },
  {
    "text": "talk you can think of them as being equivalent so what serializability says is simply that these transactions have",
    "start": "2832280",
    "end": "2838160"
  },
  {
    "start": "2838000",
    "end": "2856000"
  },
  {
    "text": "to be Atomic you can order these transactions in any way but you can't do that right you can't put one of them in",
    "start": "2838160",
    "end": "2844800"
  },
  {
    "text": "another you can't kind of break the atomicity of these transactions right so it's a very clean model um and in fact",
    "start": "2844800",
    "end": "2850559"
  },
  {
    "text": "transactional programming models are being used in in outside of databases as well um so um in the concurrency control",
    "start": "2850559",
    "end": "2858559"
  },
  {
    "start": "2856000",
    "end": "2914000"
  },
  {
    "text": "world uh people have used logical timestamps and as I mentioned multiversion databases came from the uh",
    "start": "2858559",
    "end": "2864240"
  },
  {
    "text": "the database World obviously there's a centralized allocator that's usually the bottleneck and uh you can order all of",
    "start": "2864240",
    "end": "2871119"
  },
  {
    "text": "our transactions um in a particular order and they don't have to be in the order that they were they were received",
    "start": "2871119",
    "end": "2876960"
  },
  {
    "text": "received you can choose some arbitrary order and then you better obey that order in terms of the commit and so on",
    "start": "2876960",
    "end": "2882119"
  },
  {
    "text": "and so forth but anything that's centralized is uh usually a scalability bottleneck and essentially you have loss",
    "start": "2882119",
    "end": "2888960"
  },
  {
    "text": "of performance as you go to uh more and more cores when you have centralized St stamp allocation um T typically these",
    "start": "2888960",
    "end": "2896760"
  },
  {
    "text": "algorithms assume you have a synchronized clock and if you had clocks you you would have to abort transactions",
    "start": "2896760",
    "end": "2902240"
  },
  {
    "text": "because what happens is um the order that you decided on gets violated",
    "start": "2902240",
    "end": "2907640"
  },
  {
    "text": "kind of at the end of the commit stage and when that happens um you have to abort and I'll give you an example of",
    "start": "2907640",
    "end": "2914160"
  },
  {
    "start": "2914000",
    "end": "3008000"
  },
  {
    "text": "that in a minute um the other problem that we'd like to solve is um that um it",
    "start": "2914160",
    "end": "2921640"
  },
  {
    "text": "may be the case that a particular order May in terms of logical timestamps a",
    "start": "2921640",
    "end": "2927359"
  },
  {
    "text": "particular allocation may result in a smooth execution but a different order might result in aborts all right and um",
    "start": "2927359",
    "end": "2935920"
  },
  {
    "text": "so what we'd like to do is kind of do this in a lazy fashion we'd like to do some reordering and you we'd like to do some time traveling if you will even in",
    "start": "2935920",
    "end": "2942640"
  },
  {
    "text": "this context so here's an example of that so you have a transaction and uh um",
    "start": "2942640",
    "end": "2948599"
  },
  {
    "text": "uh it's T1 and the time stamp that was given was one which means that this has to commit and once it commits then you",
    "start": "2948599",
    "end": "2954559"
  },
  {
    "text": "can start this transaction because that had time stamp too right um so in this case um uh you do a read here and you've",
    "start": "2954559",
    "end": "2961839"
  },
  {
    "text": "done you've done a right the read got the old value this this is happening in let's say in physical time and um that's",
    "start": "2961839",
    "end": "2968200"
  },
  {
    "text": "cool uh you you got you got no problems here because this read happened before the right as you can see right but if",
    "start": "2968200",
    "end": "2974559"
  },
  {
    "text": "you'd given uh this Tim stamp uh being two and this time stamp being one you",
    "start": "2974559",
    "end": "2980880"
  },
  {
    "text": "can see that the read is happening here before this right but it actually has to happen after it has to get the value",
    "start": "2980880",
    "end": "2988000"
  },
  {
    "text": "that was written by this right because this time stamp was two it's a logical time it just got arbitrarily ordered so",
    "start": "2988000",
    "end": "2993960"
  },
  {
    "text": "if you chose this it works in terms of both of them ex execute if you chose",
    "start": "2993960",
    "end": "2999040"
  },
  {
    "text": "this then one of them aborts and you can kind of create examples where you have a lot of aborts because you just chose",
    "start": "2999040",
    "end": "3005119"
  },
  {
    "text": "these things wrong right that's that's a problem um so the key idea that uh is",
    "start": "3005119",
    "end": "3010960"
  },
  {
    "start": "3008000",
    "end": "3064000"
  },
  {
    "text": "additional to uh The Logical timestamp idea in Tik Tok which is our uh our",
    "start": "3010960",
    "end": "3016559"
  },
  {
    "text": "algorithm for concurrency control um is rather than acquiring time stamps and uh",
    "start": "3016559",
    "end": "3021920"
  },
  {
    "text": "determining viability later is um we're just going to use WTS and TS just like",
    "start": "3021920",
    "end": "3027839"
  },
  {
    "text": "we did before for these tupal corresponding to A and B and so on so each of those is going to have a WTS and",
    "start": "3027839",
    "end": "3033440"
  },
  {
    "text": "RTS and we're going to U not assign a a a a Tim stamp uh uh to any of these",
    "start": "3033440",
    "end": "3040799"
  },
  {
    "text": "transactions we're actually going to have these um these WTS and rtss for the tuples the the A's and the B's that",
    "start": "3040799",
    "end": "3047040"
  },
  {
    "text": "you've seen and then much later in the process we're going to compute a commit timestamp so we have to have we have",
    "start": "3047040",
    "end": "3053040"
  },
  {
    "text": "minimum aborts I mean we might have aborts but we'll try and minimize right that's the basic idea and uh uh it it",
    "start": "3053040",
    "end": "3061599"
  },
  {
    "text": "requires no timestamp allocation because we're going to do Dynamic time stamp assignment so real simple example and uh",
    "start": "3061599",
    "end": "3068040"
  },
  {
    "start": "3064000",
    "end": "3159000"
  },
  {
    "text": "to give you a sense of how uh Tik Tok Works um you have uh as with most",
    "start": "3068040",
    "end": "3073960"
  },
  {
    "text": "concurrency control algorithms you have a read phase which is really both a read and a WR phase for the tupal then you",
    "start": "3073960",
    "end": "3079799"
  },
  {
    "text": "have a validation phase where you determine whether you can uh complete this transaction and compute a commit",
    "start": "3079799",
    "end": "3086640"
  },
  {
    "text": "timestamp which is the actual Tim stamp for the transaction and then once you've done that assuming you don't have to",
    "start": "3086640",
    "end": "3092960"
  },
  {
    "text": "abort you go ahead and do the right that is you update the database all right that's the classic uh execution model we",
    "start": "3092960",
    "end": "3099440"
  },
  {
    "text": "don't change that um so um you're going to have these tups with WTS and RTS",
    "start": "3099440",
    "end": "3106000"
  },
  {
    "text": "meaning is exactly the same as in the cash cerence protocol WTS means that you've written that data at that time",
    "start": "3106000",
    "end": "3112520"
  },
  {
    "text": "and it's valid from WTS to RTS no changes there um so I'm going to go",
    "start": "3112520",
    "end": "3117720"
  },
  {
    "text": "ahead and read and write the tupal and execute the transaction in the read phase um I'm going to compute the commit",
    "start": "3117720",
    "end": "3123559"
  },
  {
    "text": "timestamp and decide if I need to abort or not and then I'm going to update the database so here's a little animation",
    "start": "3123559",
    "end": "3129720"
  },
  {
    "text": "that hopefully makes things clear kind of the equivalent of my coherence example um so what you see up there is U",
    "start": "3129720",
    "end": "3136240"
  },
  {
    "text": "you have uh two different cores running these two different um uh transactions",
    "start": "3136240",
    "end": "3141799"
  },
  {
    "text": "potentially as you see on the right uh there's load and store associated with this and a commit really really simple",
    "start": "3141799",
    "end": "3147240"
  },
  {
    "text": "uh transactions and there's a database that corresponds to U uh what you see up",
    "start": "3147240",
    "end": "3153000"
  },
  {
    "text": "here that's the database State and these are the transaction local states that correspond to these two transactions um and um so I'm going to",
    "start": "3153000",
    "end": "3160319"
  },
  {
    "start": "3159000",
    "end": "3213000"
  },
  {
    "text": "go ahead and load a snapshot of Tuple a and I'm going to get some WTS and RTS pretty straightforward I'm going to try",
    "start": "3160319",
    "end": "3166720"
  },
  {
    "text": "um and and I'm going to do the same thing uh in for transaction two in perhaps a different core um now I want",
    "start": "3166720",
    "end": "3172799"
  },
  {
    "text": "to do a store when I do a store just like in the TARDIS prot call I have to now create a new version of the data I'm",
    "start": "3172799",
    "end": "3179280"
  },
  {
    "text": "going to have to take that RTS you know WTS to RTS and I have to jump ahead to RTS + one to create the data right so",
    "start": "3179280",
    "end": "3186640"
  },
  {
    "text": "that's essentially what's happened here with respect to store B right the original thing was 0 to one now it's",
    "start": "3186640",
    "end": "3192760"
  },
  {
    "text": "become I have to create it at a new version at two right uh and then um I'm",
    "start": "3192760",
    "end": "3198400"
  },
  {
    "text": "going to now load a snapshot of Tuple B uh uh and that's simply a load so nothing really changes I go ahead and",
    "start": "3198400",
    "end": "3204480"
  },
  {
    "text": "get uh the wgs and RT s for uh for B in T2 as well right so now what happens",
    "start": "3204480",
    "end": "3211559"
  },
  {
    "text": "here um the I need to compute now the commit Tim stamp associated with T1",
    "start": "3211559",
    "end": "3217280"
  },
  {
    "start": "3213000",
    "end": "3323000"
  },
  {
    "text": "because I've I've done the read phase for T1 uh the simple thing that I have",
    "start": "3217280",
    "end": "3222480"
  },
  {
    "text": "to do here is exactly what you should uh infer from the cach cerence protocol",
    "start": "3222480",
    "end": "3231240"
  },
  {
    "text": "um whenever I have a right of a tuple um I need my commit time stamp to be",
    "start": "3231240",
    "end": "3237559"
  },
  {
    "text": "greater than for that right set or for any of those right tups I have to be",
    "start": "3237559",
    "end": "3242720"
  },
  {
    "text": "greater than when that Tuple expired I had to be at RTS plus one that's what this line shows and then for the reset I",
    "start": "3242720",
    "end": "3250160"
  },
  {
    "text": "need that data to be valid so I need those the boundary of WTS and RTS to be",
    "start": "3250160",
    "end": "3255440"
  },
  {
    "text": "um within the commit time stamp right and and that's it that's that's the algorithm um so I can compute the commit",
    "start": "3255440",
    "end": "3261760"
  },
  {
    "text": "timestamp uh over here and notice that um I got a bit of a problem here because um I want the commit Tim stamp to be two",
    "start": "3261760",
    "end": "3269359"
  },
  {
    "text": "and uh but the Tuple a that I've read expired at one but U if I could ask for",
    "start": "3269359",
    "end": "3276359"
  },
  {
    "text": "an extension on Tuple a and in this case I I will and if I get that extension then I've satisfied my my property of uh",
    "start": "3276359",
    "end": "3284160"
  },
  {
    "text": "the RTS and the WTS right so I've decided that the commit time stamp for T1 um is in fact uh time stamp equals",
    "start": "3284160",
    "end": "3292559"
  },
  {
    "text": "two right now the commit time stamp for T2 um once I've done the uh the uh the",
    "start": "3292559",
    "end": "3299079"
  },
  {
    "text": "copy of Tuple uh so sorry I've committed it so now I'm going to go ahead and um uh copy the Tuple from the right set to",
    "start": "3299079",
    "end": "3305359"
  },
  {
    "text": "the database and uh I've computed the commit Tim stamp everything is done for transaction T1 let me go ahead and do",
    "start": "3305359",
    "end": "3312640"
  },
  {
    "text": "the same thing for transaction T2 this is easy I only had to read uh a couple of tups I can choose the commit time",
    "start": "3312640",
    "end": "3318760"
  },
  {
    "text": "stamp to be zero or I could choose it to be one I go ahead and choose it to be uh to be zero so notice that I've now done",
    "start": "3318760",
    "end": "3325880"
  },
  {
    "start": "3323000",
    "end": "3432000"
  },
  {
    "text": "this later in physical time and I've gotten a transaction that has a timestamp that is less than the",
    "start": "3325880",
    "end": "3331400"
  },
  {
    "text": "transaction I just committed right um the TS equals 2 committed first so same",
    "start": "3331400",
    "end": "3336559"
  },
  {
    "text": "same deal uh physical time is not the same as logical time right uh all right",
    "start": "3336559",
    "end": "3342680"
  },
  {
    "text": "so I I uh bombarded you with a lot of uh lot of information um to complete this",
    "start": "3342680",
    "end": "3350000"
  },
  {
    "text": "uh it's a similar argument uh not exactly the same but a similar argument that this algorithm give you",
    "start": "3350000",
    "end": "3356680"
  },
  {
    "text": "serializability right and if you're willing to uh violate serializability and do things like snapshot isolation",
    "start": "3356680",
    "end": "3362520"
  },
  {
    "text": "the algorithm would have to change right and that gives you a little more freedom in terms of in terms of parallelism um",
    "start": "3362520",
    "end": "3368920"
  },
  {
    "text": "so um I will say before I I conclude here",
    "start": "3368920",
    "end": "3374079"
  },
  {
    "text": "uh that we did implement this algorithm this is U just a piece of software it's a concurrency control algorithm running",
    "start": "3374079",
    "end": "3380280"
  },
  {
    "text": "underneath the database and what we find is that compared to prior art um our uh",
    "start": "3380280",
    "end": "3385880"
  },
  {
    "text": "in contention cases our abort rate is is substantially lower and our throughput is about you know Factor two better",
    "start": "3385880",
    "end": "3392119"
  },
  {
    "text": "right um yeah go ahead how do you handle failures um we don't have a story for failures uh yet uh and and that's kind",
    "start": "3392119",
    "end": "3399119"
  },
  {
    "text": "of U you know what's going on out here uh so uh uh at this moment in time we're assuming a shared memory system which is",
    "start": "3399119",
    "end": "3405599"
  },
  {
    "text": "100% reliable and and we don't have a story for failures um uh let me start with that uh um so going down to the",
    "start": "3405599",
    "end": "3411839"
  },
  {
    "text": "bottom here and and finishing up here and this is uh I'm not going to go over uh show you anymore this is my last",
    "start": "3411839",
    "end": "3418119"
  },
  {
    "text": "slide um but uh what we'd like to do is um is actually solve the problem um of",
    "start": "3418119",
    "end": "3424359"
  },
  {
    "text": "parallel logging so it turns out um in order to in order to exploit parallelism",
    "start": "3424359",
    "end": "3430359"
  },
  {
    "text": "uh and uh be able to recover when you're exploiting parallelism uh you have to be",
    "start": "3430359",
    "end": "3435559"
  },
  {
    "start": "3432000",
    "end": "4148000"
  },
  {
    "text": "careful that um uh that uh uh the recovery uh uh information that you need",
    "start": "3435559",
    "end": "3441280"
  },
  {
    "text": "which uh uh is uh is basically what you need to put out in log uh is is is",
    "start": "3441280",
    "end": "3446720"
  },
  {
    "text": "something that doesn't destroy your parallelism because if you're waiting to write something in a log and there's",
    "start": "3446720",
    "end": "3452480"
  },
  {
    "text": "complications associated with writing the log first before you commit to the database etc etc and so it's kind of a",
    "start": "3452480",
    "end": "3458319"
  },
  {
    "text": "fascinating um set of dependencies associated with um including uh fa tolerance uh into U",
    "start": "3458319",
    "end": "3466319"
  },
  {
    "text": "into our scheme now if you're willing to assume that uh uh that um recovery is",
    "start": "3466319",
    "end": "3471720"
  },
  {
    "text": "simply restarting the entire set of transactions and starting over obviously it's not an issue but if you want any sort of checkpoint",
    "start": "3471720",
    "end": "3478799"
  },
  {
    "text": "which happens at a fine grain fashion then you got to be much smarter about it all right um so uh that's that's that's",
    "start": "3478799",
    "end": "3486160"
  },
  {
    "text": "pretty much it uh I hope I gave you a sense of why this is interesting um going back up here and starting from the",
    "start": "3486160",
    "end": "3492240"
  },
  {
    "text": "top again um it turns out that um this notion of WTS and RTS you know I feel is",
    "start": "3492240",
    "end": "3498000"
  },
  {
    "text": "something that has to be should be baked into Hardware not just because of cash coherence but because of other reasons",
    "start": "3498000",
    "end": "3503520"
  },
  {
    "text": "as well um it's because um you have annoying things uh like um live lock in",
    "start": "3503520",
    "end": "3510119"
  },
  {
    "text": "uh Atomic synchronization instructions like load reserve and store conditional when you want to maintain sequence in",
    "start": "3510119",
    "end": "3515920"
  },
  {
    "text": "consistency that rear uh that rear is ugly head and and there's an elegant way",
    "start": "3515920",
    "end": "3521559"
  },
  {
    "text": "uh perhaps the performance doesn't improve but you know I sleep I would sleep better at night uh because there'd",
    "start": "3521559",
    "end": "3528000"
  },
  {
    "text": "be a guarantee of correctness um associated with ensuring that you have no uh live lock or or deadlock in the",
    "start": "3528000",
    "end": "3535520"
  },
  {
    "text": "use of these Atomic synchronization instructions and so what I'm asking for from computer Architects or chip",
    "start": "3535520",
    "end": "3541119"
  },
  {
    "text": "designers is is essentially these WTS and rtss for every data item in the system right um uh if that hasn't happen",
    "start": "3541119",
    "end": "3549960"
  },
  {
    "text": "it's not going to happen for a while because chips take a long time to build etc etc uh we're in the mode of uh using",
    "start": "3549960",
    "end": "3556079"
  },
  {
    "text": "uh databases and uh doing things in the database world and uh one thing that I",
    "start": "3556079",
    "end": "3561359"
  },
  {
    "text": "didn't talk about that I'd like to briefly mention is because we talked about cache coherence and having many",
    "start": "3561359",
    "end": "3566799"
  },
  {
    "text": "local copies of the data uh and uh and we're allowed to do that and we can",
    "start": "3566799",
    "end": "3571839"
  },
  {
    "text": "handle that in the distributed concurrency control world where um I",
    "start": "3571839",
    "end": "3577200"
  },
  {
    "text": "just showed you um uh or I didn't show you results I just talked about results",
    "start": "3577200",
    "end": "3582240"
  },
  {
    "text": "in a shared memory system uh um corresponding to um uh corresponding to the concurrency control algorithm but",
    "start": "3582240",
    "end": "3588880"
  },
  {
    "text": "real database systems are multiple nodes uh perhaps far apart with large Network",
    "start": "3588880",
    "end": "3594280"
  },
  {
    "text": "latency and they have chared databases so terabytes of data in one and terabytes of data in another etc etc and",
    "start": "3594280",
    "end": "3601079"
  },
  {
    "text": "it's been really hard for database Engineers to use caching and and I mean caching at the at the level of disk to",
    "start": "3601079",
    "end": "3608440"
  },
  {
    "text": "memory right because you have discs of terabytes and you want to store in damp so it's been really hard for database",
    "start": "3608440",
    "end": "3614400"
  },
  {
    "text": "Engineers to do that because cache coherence is a difficult problem uh basically having data that's uh that's",
    "start": "3614400",
    "end": "3620480"
  },
  {
    "text": "consistent is a difficult problem while obeying serializability it these two algorithms as you can see they have the",
    "start": "3620480",
    "end": "3626079"
  },
  {
    "text": "underlying basis of physiological time and they kind of seamlessly integrate which I don't have time to tell you",
    "start": "3626079",
    "end": "3631359"
  },
  {
    "text": "about and we only figured this out in in gory detail a few weeks ago anyway but we now have an implementation of",
    "start": "3631359",
    "end": "3637880"
  },
  {
    "text": "distributor Tik Tok which is uh essentially something that runs on uh you know a dozen computers uh with the",
    "start": "3637880",
    "end": "3644720"
  },
  {
    "text": "with with the terabytes of dis and does concurrency control across these uh",
    "start": "3644720",
    "end": "3649839"
  },
  {
    "text": "across these M these different computers right all right well hopefully I didn't inate you but thank you for your",
    "start": "3649839",
    "end": "3655119"
  },
  {
    "text": "attention happy to take questions yeah you didn't say anything",
    "start": "3655119",
    "end": "3661440"
  },
  {
    "text": "about Jefferson's time War surprising oh um so well you know I had these other",
    "start": "3661440",
    "end": "3666839"
  },
  {
    "text": "slides that had uh anyway it wasn't Jefferson time War um okay yeah I had a",
    "start": "3666839",
    "end": "3672359"
  },
  {
    "text": "slide on the T1000 right yeah is is the amount of",
    "start": "3672359",
    "end": "3680319"
  },
  {
    "text": "degree of scalability dependent on like the ratio of the WID of time time stamp and the",
    "start": "3680319",
    "end": "3687039"
  },
  {
    "text": "time step that you say the police time um you",
    "start": "3687039",
    "end": "3692160"
  },
  {
    "text": "know there's actually in in in an insight there and so I just kind of",
    "start": "3692160",
    "end": "3697520"
  },
  {
    "text": "reverse it it turns out that the rate at which time stamps increase is exactly the amount of parallelism okay so so it",
    "start": "3697520",
    "end": "3705160"
  },
  {
    "text": "turns out what happens here is that when time stamps don't increase it means that people are reading data in parallel and",
    "start": "3705160",
    "end": "3713160"
  },
  {
    "text": "and it's good thing because they're not waiting that nothing is happening it's when you have a dependency and and",
    "start": "3713160",
    "end": "3719000"
  },
  {
    "text": "and and potentially because of contention in in the case of the the cence algorithm it's actually true even in the concurrency control algorithm you",
    "start": "3719000",
    "end": "3725799"
  },
  {
    "text": "go ahead and you jump ahead in time because you're trying to avoid dependency and and that's when the time stamps actually increase in size okay so",
    "start": "3725799",
    "end": "3733160"
  },
  {
    "text": "if you kind of look at uh look at either of the two algorithms if you if you look at the rate at which time stamps",
    "start": "3733160",
    "end": "3739400"
  },
  {
    "text": "increase that the the lower the rate uh the the more the parallelism there is",
    "start": "3739400",
    "end": "3745039"
  },
  {
    "text": "that's at least being EXP exploited not necessarily by any algorithm but certainly by this one right um and and",
    "start": "3745039",
    "end": "3751119"
  },
  {
    "text": "that's true for as I mentioned in in all of the all of the different um uh projects that we have going on here uh",
    "start": "3751119",
    "end": "3757559"
  },
  {
    "text": "so I I would say there's a relationship there but not quite in the way you said the way I described it right did that",
    "start": "3757559",
    "end": "3763079"
  },
  {
    "text": "answer your question or uh did I confuse you I think confusion is probably closer okay so could you repeat your question",
    "start": "3763079",
    "end": "3769599"
  },
  {
    "text": "um I'm thinking you know if I have if I have a th processors or if I have th000",
    "start": "3769599",
    "end": "3775119"
  },
  {
    "text": "cores or if I have 10,000 quarters do I want that time stamp to be wider do I want the step to",
    "start": "3775119",
    "end": "3781599"
  },
  {
    "text": "be bigger or smaller to get um that kind of scale um so with the with the with the",
    "start": "3781599",
    "end": "3788760"
  },
  {
    "text": "rollover trick that we have uh We've run simulations of the cash gance protocol",
    "start": "3788760",
    "end": "3795839"
  },
  {
    "text": "on on a thousand cores with 16 bit time stamps because I mean they just roll over faster now it turns out there is if",
    "start": "3795839",
    "end": "3802640"
  },
  {
    "text": "you went from 16 to 32 uh which which unfortunately by the way has that effect on the L1 cache and",
    "start": "3802640",
    "end": "3809039"
  },
  {
    "text": "increases the the the the size of the L1 cache but there is a performance impact associated with the rollover because",
    "start": "3809039",
    "end": "3815559"
  },
  {
    "text": "that that rollover has you know there's there's a few there's some data that needs to be kept synchronized and so",
    "start": "3815559",
    "end": "3821799"
  },
  {
    "text": "every time you roll over uh there's a bit of a penalty associated with that right so um so it's a bit of a trade-off",
    "start": "3821799",
    "end": "3827839"
  },
  {
    "text": "in the sense that U that you'd like to you you don't want to increase your L1 size by more than 10% 5% whatever but if",
    "start": "3827839",
    "end": "3834400"
  },
  {
    "text": "you're willing to pay the cost and do 20% Then it'd be fine in the software world of concurrency control it's a",
    "start": "3834400",
    "end": "3839720"
  },
  {
    "text": "non-issue uh because I me you have these large cash blocks and it's it's software",
    "start": "3839720",
    "end": "3844839"
  },
  {
    "text": "data anyway so really it's much more uh uh uh critical to keep the timestamp",
    "start": "3844839",
    "end": "3850240"
  },
  {
    "text": "small when you're paying Hardware cost and SRAM cost for it right right that make",
    "start": "3850240",
    "end": "3855920"
  },
  {
    "text": "sense first okay there's a second part to your question uh you said the step",
    "start": "3855920",
    "end": "3863240"
  },
  {
    "text": "I'm wondering the step amount uh the step amount um you know that's a function of the leases uh you're you're",
    "start": "3863240",
    "end": "3869039"
  },
  {
    "text": "right in that um if I used a lease of 100 uh as opposed to 10 uh then",
    "start": "3869039",
    "end": "3875440"
  },
  {
    "text": "absolutely that you know you jump ahead when you do the rights Etc uh and that that's that's that's that's an issue so",
    "start": "3875440",
    "end": "3881119"
  },
  {
    "text": "if we don't want the leases to be uh again if you had large leases then you wouldn't have to renew as much there's",
    "start": "3881119",
    "end": "3886520"
  },
  {
    "text": "uh there's a performance uh implication there if you use uh uh um short leases",
    "start": "3886520",
    "end": "3892400"
  },
  {
    "text": "uh it's better even though you might have to renew because when you actually do the right uh you don't invalidate a whole bunch of other data that exists",
    "start": "3892400",
    "end": "3899119"
  },
  {
    "text": "because you jumped ahead so far in time right so it so at some level this is a",
    "start": "3899119",
    "end": "3904160"
  },
  {
    "text": "quantitative question right to be fixed they can totally be",
    "start": "3904160",
    "end": "3911039"
  },
  {
    "text": "adaptive I mean you know I'm fond of saying especially since I'm hanging out in California that you know you can use deep learning to solve that problem as",
    "start": "3911039",
    "end": "3917119"
  },
  {
    "text": "you can you know any problem any any problem right you know",
    "start": "3917119",
    "end": "3922559"
  },
  {
    "text": "so so when is the store visible because modern processors have store buffers and",
    "start": "3924319",
    "end": "3930880"
  },
  {
    "text": "and all kinds of crazy things so um the so I I I gave you the the simplest",
    "start": "3930880",
    "end": "3936839"
  },
  {
    "text": "version of this um so so the question is many does the store commit you know and",
    "start": "3936839",
    "end": "3942480"
  },
  {
    "text": "and so that's kind of actually related to it is part somewhat related to the database world you know where you have",
    "start": "3942480",
    "end": "3948400"
  },
  {
    "text": "to go cop you know commit that store into the database then you might have to back aort well it's possible absolutely",
    "start": "3948400",
    "end": "3954359"
  },
  {
    "text": "yeah it it's possible but in the in the cash corn world uh it it it turns out",
    "start": "3954359",
    "end": "3959480"
  },
  {
    "text": "that um you you have to be uh let's say you're doing Tso and you have a store buffer right um well I mean the store",
    "start": "3959480",
    "end": "3965839"
  },
  {
    "text": "buffer also has the the WTS and the RTS information in it it absolutely has to have that right and um basically um what",
    "start": "3965839",
    "end": "3972920"
  },
  {
    "text": "what happens there is it's possible that um if you read from a store and you",
    "start": "3972920",
    "end": "3978400"
  },
  {
    "text": "realize that the what is in the store buffer is an expired piece of data it's possible that you your your clock has",
    "start": "3978400",
    "end": "3984680"
  },
  {
    "text": "gone ahead in time this store buffer hasn't um hasn't flushed out yet right it it hasn't been flushed so this thing",
    "start": "3984680",
    "end": "3991240"
  },
  {
    "text": "is still in there and and it has a WTS and RTS and your processor clock is is beyond that right then you better not",
    "start": "3991240",
    "end": "3998160"
  },
  {
    "text": "read from that store buffer You' be violating so at that point you um what you have to do is you have to flush the",
    "start": "3998160",
    "end": "4003720"
  },
  {
    "text": "store right so and then you got to send it out of the system and then you have to go back to what you were doing so this is inter locks that don't exist in",
    "start": "4003720",
    "end": "4009760"
  },
  {
    "text": "existing processor that's right so so I will say that it's an invasive",
    "start": "4009760",
    "end": "4014839"
  },
  {
    "text": "modification which is why I think it's going to take a while to do the kinds of things that uh that hardest protocol",
    "start": "4014839",
    "end": "4019880"
  },
  {
    "text": "requires right that doesn't mean we can't build it on fbga and we are right but uh but it's an invasive modification",
    "start": "4019880",
    "end": "4027319"
  },
  {
    "text": "so yeah yeah please maybe stupid will",
    "start": "4027319",
    "end": "4033119"
  },
  {
    "text": "WTS and RTS make it into the memory or does it stay in oh no it's a great",
    "start": "4033119",
    "end": "4039599"
  },
  {
    "text": "question it's it's a great question um so it turns out uh you we don't want to store them in memory uh because there's",
    "start": "4039599",
    "end": "4045760"
  },
  {
    "text": "no way I mean where do you put them uh you can construct your caches in such a way that you have them uh and you can",
    "start": "4045760",
    "end": "4051119"
  },
  {
    "text": "certainly construct the time stamp manager but I mean Dam you know what are you going to do with that right so so it",
    "start": "4051119",
    "end": "4056799"
  },
  {
    "text": "it turns out you only have one we do a sort of a Max thingy where um uh as we",
    "start": "4056799",
    "end": "4063440"
  },
  {
    "text": "are sending things out to memory we keep uh into we take into account the max RTS of all of these things that are getting",
    "start": "4063440",
    "end": "4069200"
  },
  {
    "text": "dumped into memory and then when stuff comes back we have to do something with that right so that's a little bit of a",
    "start": "4069200",
    "end": "4074359"
  },
  {
    "text": "detail and I think got it mostly right uh uh but I can certainly point you to the paper that that tells you exactly",
    "start": "4074359",
    "end": "4080319"
  },
  {
    "text": "what you need to do when you evict things to memory and when you pull things back all right but it's roughly",
    "start": "4080319",
    "end": "4085720"
  },
  {
    "text": "what I told you right a good question certainly not stupid question so",
    "start": "4085720",
    "end": "4093279"
  },
  {
    "text": "well you could shove it into it could be error correcting code",
    "start": "4093279",
    "end": "4098920"
  },
  {
    "text": "just time correcting code oh yeah well I mean there's many things that you could do in fact you could use multiple of the",
    "start": "4098920",
    "end": "4105838"
  },
  {
    "text": "it turns out there's a bit of an issue associated with single RTS for all of the data that gets dumped out so if you",
    "start": "4105839",
    "end": "4111960"
  },
  {
    "text": "use if you had more it would be better and uh I guess well in the context of",
    "start": "4111960",
    "end": "4117480"
  },
  {
    "text": "fall tolerance or Rec correction uh if you could share those bits uh I guess you could save something",
    "start": "4117480",
    "end": "4124838"
  },
  {
    "text": "yep",
    "start": "4124839",
    "end": "4127838"
  },
  {
    "text": "cool thank you [Applause]",
    "start": "4132560",
    "end": "4139479"
  }
]