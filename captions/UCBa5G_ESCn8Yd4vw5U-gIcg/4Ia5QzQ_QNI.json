[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "So now that we have defined the notion of",
    "start": "4160",
    "end": "7380"
  },
  {
    "text": "a network motif and a notion of a subnet network subgraph,",
    "start": "7380",
    "end": "10900"
  },
  {
    "text": "and I'm really kind of using these two terms interchangeably, now we need to- um,",
    "start": "10900",
    "end": "15780"
  },
  {
    "text": "and then we also defined what is a frequency of",
    "start": "15780",
    "end": "18210"
  },
  {
    "text": "a given motif or a frequency of a given subgraph in a given graph.",
    "start": "18210",
    "end": "22054"
  },
  {
    "text": "Now, we wanna basically develop",
    "start": "22055",
    "end": "26010"
  },
  {
    "text": "a neural network approach that will allow us to quickly determine whether a given,",
    "start": "26010",
    "end": "31040"
  },
  {
    "text": "uh, graph is a subgraph in a bigger graph.",
    "start": "31040",
    "end": "34230"
  },
  {
    "text": "Um, so to give you- um, the next,",
    "start": "34230",
    "end": "36945"
  },
  {
    "text": "we are going to talk about neural subgraph, uh, representations.",
    "start": "36945",
    "end": "41489"
  },
  {
    "text": "So, what's the problem?",
    "start": "41490",
    "end": "43415"
  },
  {
    "text": "The problem is called subgraph matching.",
    "start": "43415",
    "end": "45845"
  },
  {
    "text": "I'm given a large target graph,",
    "start": "45845",
    "end": "47930"
  },
  {
    "text": "and I'm given a small, uh, query graph.",
    "start": "47930",
    "end": "50800"
  },
  {
    "text": "And what I have to decide whether a query is a subgraph into- in the target graph.",
    "start": "50800",
    "end": "56180"
  },
  {
    "text": "Right? So for example,",
    "start": "56180",
    "end": "57395"
  },
  {
    "text": "here's my query, here's my target graph.",
    "start": "57395",
    "end": "60020"
  },
  {
    "text": "In this case, the answer should be yes because this particular set of",
    "start": "60020",
    "end": "63860"
  },
  {
    "text": "four nodes can map to this particular set of four nodes,",
    "start": "63860",
    "end": "67850"
  },
  {
    "text": "and edges are preserved.",
    "start": "67850",
    "end": "69395"
  },
  {
    "text": "Here, I use different colors to deter- to denote,",
    "start": "69395",
    "end": "72229"
  },
  {
    "text": "you know, that this node can map to that node.",
    "start": "72230",
    "end": "74820"
  },
  {
    "text": "You know, this node maps to this node and so on and so forth.",
    "start": "74820",
    "end": "78470"
  },
  {
    "text": "So query Q, is included in the target, uh, graph.",
    "start": "78470",
    "end": "82450"
  },
  {
    "text": "Um, so that's the, uh,",
    "start": "82450",
    "end": "83924"
  },
  {
    "text": "that's the first- uh,",
    "start": "83925",
    "end": "85410"
  },
  {
    "text": "that's the problem you want to do.",
    "start": "85410",
    "end": "86835"
  },
  {
    "text": "We just wanna say yes, no.",
    "start": "86835",
    "end": "88815"
  },
  {
    "text": "Right? It's not about the co- the number yet.",
    "start": "88815",
    "end": "91395"
  },
  {
    "text": "You just wanna say is query in- included?",
    "start": "91395",
    "end": "95024"
  },
  {
    "text": "Is it a subgraph of the target graph?",
    "start": "95025",
    "end": "97665"
  },
  {
    "text": "Um, how are we going to do this?",
    "start": "97665",
    "end": "100395"
  },
  {
    "start": "98000",
    "end": "132000"
  },
  {
    "text": "Rather than doing this as a kind of",
    "start": "100395",
    "end": "102859"
  },
  {
    "text": "combinatorial matching and trying to check edge by edge if,",
    "start": "102860",
    "end": "106685"
  },
  {
    "text": "uh, query is in- included in the target,",
    "start": "106685",
    "end": "109435"
  },
  {
    "text": "we're going to develop a machine learning approach to it.",
    "start": "109435",
    "end": "112110"
  },
  {
    "text": "So basically we're going to formulate this as a prediction task.",
    "start": "112110",
    "end": "115450"
  },
  {
    "text": "And our intuition will be that we're going to exploit",
    "start": "115450",
    "end": "118680"
  },
  {
    "text": "the sh- geometric shape of the embedding space to capture the subgraph relationship.",
    "start": "118680",
    "end": "125290"
  },
  {
    "text": "Let me, uh, now kind of, uh,",
    "start": "125290",
    "end": "128520"
  },
  {
    "text": "er, unpack what do I mean, er, by that.",
    "start": "128520",
    "end": "132285"
  },
  {
    "start": "132000",
    "end": "179000"
  },
  {
    "text": "So the task is that I wanna do a binary prediction to return",
    "start": "132285",
    "end": "137405"
  },
  {
    "text": "true if query is isomorphic to a subgraph of the target graph,",
    "start": "137405",
    "end": "142235"
  },
  {
    "text": "and otherwise I return false.",
    "start": "142235",
    "end": "144505"
  },
  {
    "text": "So again, in this case,",
    "start": "144505",
    "end": "146090"
  },
  {
    "text": "I give you the query, the target,",
    "start": "146090",
    "end": "147995"
  },
  {
    "text": "and the dashed, uh,",
    "start": "147995",
    "end": "149420"
  },
  {
    "text": "edges repres- lines, represent the node correspondences.",
    "start": "149420",
    "end": "153640"
  },
  {
    "text": "So in this case, just note,",
    "start": "153640",
    "end": "155720"
  },
  {
    "text": "we won't be interested in actually finding",
    "start": "155720",
    "end": "158300"
  },
  {
    "text": "correspondences because that's another challenging problem.",
    "start": "158300",
    "end": "162050"
  },
  {
    "text": "What- uh, and we're not going to talk about it.",
    "start": "162050",
    "end": "164690"
  },
  {
    "text": "All we want is just true, false.",
    "start": "164690",
    "end": "166970"
  },
  {
    "text": "Right? Given query, given target,",
    "start": "166970",
    "end": "168830"
  },
  {
    "text": "return true if query appears as a subgraph of the target, otherwise, return false.",
    "start": "168830",
    "end": "174240"
  },
  {
    "text": "We're just interested in the decision problem in the binary task.",
    "start": "174240",
    "end": "178705"
  },
  {
    "text": "So how are we going to approach this is, er, the following.",
    "start": "178705",
    "end": "182990"
  },
  {
    "start": "179000",
    "end": "269000"
  },
  {
    "text": "This is kind of the high level overview of the approach.",
    "start": "182990",
    "end": "185180"
  },
  {
    "text": "We'll take a big input graph, the target graph,",
    "start": "185180",
    "end": "187834"
  },
  {
    "text": "and we're going to decompose it in a set of- uh,",
    "start": "187835",
    "end": "191040"
  },
  {
    "text": "in- in a set of neighborhoods.",
    "start": "191040",
    "end": "192739"
  },
  {
    "text": "And these neighborhoods will be,",
    "start": "192739",
    "end": "193790"
  },
  {
    "text": "let's say, relatively small.",
    "start": "193790",
    "end": "195564"
  },
  {
    "text": "Um, so we are going to decompose it into a set of neighborhoods.",
    "start": "195565",
    "end": "199025"
  },
  {
    "text": "And then we are going to use a graph neural network to embed, uh, each neighborhood.",
    "start": "199025",
    "end": "204034"
  },
  {
    "text": "We are going to basically apply",
    "start": "204035",
    "end": "205220"
  },
  {
    "text": "graph embedding to create an embedding for each neighborhood.",
    "start": "205220",
    "end": "208430"
  },
  {
    "text": "Then at the query time,",
    "start": "208430",
    "end": "210314"
  },
  {
    "text": "we'll also take the query and we are going to embed the query.",
    "start": "210315",
    "end": "214805"
  },
  {
    "text": "And then what we are going to do is we're going to build a predictor that will say,",
    "start": "214805",
    "end": "218840"
  },
  {
    "text": "given the embedding of the query and embedding of a neighborhood,",
    "start": "218840",
    "end": "222155"
  },
  {
    "text": "you know, predi- predict yes or no.",
    "start": "222155",
    "end": "225090"
  },
  {
    "text": "Yes would mean a given,",
    "start": "225090",
    "end": "226890"
  },
  {
    "text": "um- a given, uh,",
    "start": "226890",
    "end": "228150"
  },
  {
    "text": "um, er, a given query is included,",
    "start": "228150",
    "end": "231545"
  },
  {
    "text": "is a subgraph, um,",
    "start": "231545",
    "end": "233180"
  },
  {
    "text": "of a given, uh, uh, er,",
    "start": "233180",
    "end": "235129"
  },
  {
    "text": "neighborhood versus, uh, uh,",
    "start": "235130",
    "end": "237680"
  },
  {
    "text": "that given query not being a subgraph of a given neighborhood.",
    "start": "237680",
    "end": "240760"
  },
  {
    "text": "So for example, for this query and this neighborhood,",
    "start": "240760",
    "end": "243590"
  },
  {
    "text": "we should predict, uh, no.",
    "start": "243590",
    "end": "245220"
  },
  {
    "text": "For this neighborhood in the query we predict yes.",
    "start": "245220",
    "end": "248550"
  },
  {
    "text": "Here, we also predict yes because it's an, uh,",
    "start": "248550",
    "end": "251235"
  },
  {
    "text": "triangle and an edge,",
    "start": "251235",
    "end": "252445"
  },
  {
    "text": "a triangle and an edge and, you know,",
    "start": "252445",
    "end": "254100"
  },
  {
    "text": "our query is a triangle and an edge, right?",
    "start": "254100",
    "end": "255660"
  },
  {
    "text": "So basically, based on the embeddings,",
    "start": "255660",
    "end": "257549"
  },
  {
    "text": "we wanna make these predictions.",
    "start": "257550",
    "end": "259049"
  },
  {
    "text": "And this can be super fast because as I'm giving a query,",
    "start": "259050",
    "end": "261859"
  },
  {
    "text": "I just kind of run through these neighborhoods and make predictions.",
    "start": "261860",
    "end": "265370"
  },
  {
    "text": "Yes, no, yes, no, yes, no.",
    "start": "265370",
    "end": "266770"
  },
  {
    "text": "That's essentially the idea.",
    "start": "266770",
    "end": "269039"
  },
  {
    "start": "269000",
    "end": "416000"
  },
  {
    "text": "How are we going to do this?",
    "start": "269040",
    "end": "271290"
  },
  {
    "text": "Let's give a bit more detail.",
    "start": "271290",
    "end": "272540"
  },
  {
    "text": "We're going to work with node-anchored definitions, right?",
    "start": "272540",
    "end": "276245"
  },
  {
    "text": "Meaning we are going to have a notion of an anchor and we are trying to",
    "start": "276245",
    "end": "280250"
  },
  {
    "text": "predict whether a given node anch- node anchored query,",
    "start": "280250",
    "end": "284710"
  },
  {
    "text": "um, is a subgraph of a, again,",
    "start": "284710",
    "end": "287150"
  },
  {
    "text": "a given anchor into the target, uh, graph.",
    "start": "287150",
    "end": "289790"
  },
  {
    "text": "So we are working with, uh, anchored, uh,",
    "start": "289790",
    "end": "292205"
  },
  {
    "text": "definitions where we- what means- what",
    "start": "292205",
    "end": "294810"
  },
  {
    "text": "has to do is one anchor has to map to another anchor,",
    "start": "294810",
    "end": "297610"
  },
  {
    "text": "and then all the edges and all the other nodes,",
    "start": "297610",
    "end": "300389"
  },
  {
    "text": "uh, have to map as well.",
    "start": "300390",
    "end": "302055"
  },
  {
    "text": "So that's the first important point,",
    "start": "302055",
    "end": "303455"
  },
  {
    "text": "is we have a notion of the anchor.",
    "start": "303455",
    "end": "305650"
  },
  {
    "text": "Um, the second, um, impor- important, uh,",
    "start": "305650",
    "end": "309220"
  },
  {
    "text": "notion is that we are going to decompose the target graph into a set of neighborhoods.",
    "start": "309220",
    "end": "315555"
  },
  {
    "text": "So in these neighborhoods will be node-anchored.",
    "start": "315555",
    "end": "318065"
  },
  {
    "text": "And what does this mean is essentially we'll pick",
    "start": "318065",
    "end": "320290"
  },
  {
    "text": "a node and then we'll take a k-hop neighborhood around it.",
    "start": "320290",
    "end": "323490"
  },
  {
    "text": "But let's say one hop, two hop.",
    "start": "323490",
    "end": "325544"
  },
  {
    "text": "Um, and then this will create a neighborhood and we are going to embed this neighborhood.",
    "start": "325545",
    "end": "330165"
  },
  {
    "text": "So we'll take the target graph and we are going to create many neighborhoods,",
    "start": "330165",
    "end": "334960"
  },
  {
    "text": "uh, and embed them.",
    "start": "334960",
    "end": "336620"
  },
  {
    "text": "And then for a given query,",
    "start": "336620",
    "end": "338405"
  },
  {
    "text": "the task will be given the query, uh,",
    "start": "338405",
    "end": "340130"
  },
  {
    "text": "in that neighborhood, predict whether query is a subgraph of the neighborhood.",
    "start": "340130",
    "end": "345520"
  },
  {
    "text": "So the entire approach is the following.",
    "start": "345520",
    "end": "348974"
  },
  {
    "text": "As I said, we create a query,",
    "start": "348975",
    "end": "351440"
  },
  {
    "text": "pick an anchored node, um,",
    "start": "351440",
    "end": "353270"
  },
  {
    "text": "uh, and, uh, embed it.",
    "start": "353270",
    "end": "355205"
  },
  {
    "text": "We take the target graph,",
    "start": "355205",
    "end": "356780"
  },
  {
    "text": "decompose it into many, uh,",
    "start": "356780",
    "end": "358610"
  },
  {
    "text": "neighborhoods and embed those neighborhoods.",
    "start": "358610",
    "end": "362099"
  },
  {
    "text": "And now given the embedding of the query and embedding of the neighborhood,",
    "start": "362100",
    "end": "365810"
  },
  {
    "text": "we wanna predict return true or false.",
    "start": "365810",
    "end": "368785"
  },
  {
    "text": "True if, uh, this query, uh,",
    "start": "368785",
    "end": "372045"
  },
  {
    "text": "is a, uh, node-anchored subgraph of the neighborhood,",
    "start": "372045",
    "end": "375695"
  },
  {
    "text": "and return false if, um,",
    "start": "375695",
    "end": "378535"
  },
  {
    "text": "these node-anchored query is not a subgraph of the node-anchored, uh, neighborhood.",
    "start": "378535",
    "end": "385005"
  },
  {
    "text": "So that's, uh, how,",
    "start": "385005",
    "end": "387225"
  },
  {
    "text": "uh, we are going to do this.",
    "start": "387225",
    "end": "389115"
  },
  {
    "text": "Um, so now, of course, the question is,",
    "start": "389115",
    "end": "391550"
  },
  {
    "text": "how do we use embeddings to make predictions?",
    "start": "391550",
    "end": "393919"
  },
  {
    "text": "Right? In terms of the, uh, uh,",
    "start": "393920",
    "end": "396810"
  },
  {
    "text": "creating the embedding of the neighborhood,",
    "start": "396810",
    "end": "399125"
  },
  {
    "text": "we believe- we can use our standard graph neural networks.",
    "start": "399125",
    "end": "402020"
  },
  {
    "text": "So kind of not too much,",
    "start": "402020",
    "end": "403729"
  },
  {
    "text": "um, uh, uh, importance there.",
    "start": "403730",
    "end": "406350"
  },
  {
    "text": "I'm kind of going to skip that detail.",
    "start": "406350",
    "end": "408180"
  },
  {
    "text": "There are some interesting kind of architectural details,",
    "start": "408180",
    "end": "411065"
  },
  {
    "text": "but just a standard graph neural network for embedding graphs,",
    "start": "411065",
    "end": "414800"
  },
  {
    "text": "uh, would already be good.",
    "start": "414800",
    "end": "416650"
  },
  {
    "start": "416000",
    "end": "494000"
  },
  {
    "text": "So now we need to decide and kind of r- I",
    "start": "416650",
    "end": "420354"
  },
  {
    "text": "wanna talk a bit about why do we pick anchored neighborhoods?",
    "start": "420355",
    "end": "423830"
  },
  {
    "text": "Why not non-anchored?",
    "start": "423830",
    "end": "426189"
  },
  {
    "text": "Um, you know, recall that the node level frequency definition says,",
    "start": "426190",
    "end": "429890"
  },
  {
    "text": "you know, the number of, uh,",
    "start": "429890",
    "end": "431390"
  },
  {
    "text": "nodes u in G_T for which some subgraph of G_T is",
    "start": "431390",
    "end": "435485"
  },
  {
    "text": "isomorphic to the query and the- and the isomorphism maps node u,",
    "start": "435485",
    "end": "441689"
  },
  {
    "text": "uh, in G_T to node v in the queue.",
    "start": "441690",
    "end": "444720"
  },
  {
    "text": "Right? So basically the anchors have to map plus all the edges,",
    "start": "444720",
    "end": "449105"
  },
  {
    "text": "uh, and the remaining nodes can also map.",
    "start": "449105",
    "end": "451945"
  },
  {
    "text": "Um, the point is that we are going to, uh,",
    "start": "451945",
    "end": "454460"
  },
  {
    "text": "create this anchor, the embeddings,",
    "start": "454460",
    "end": "456500"
  },
  {
    "text": "because we can then create basically a graph neural network,",
    "start": "456500",
    "end": "459665"
  },
  {
    "text": "um, for- um, around each node, uh,",
    "start": "459665",
    "end": "463055"
  },
  {
    "text": "u and each node v. And this way basically create embeddings of the neighborhoods.",
    "start": "463055",
    "end": "467780"
  },
  {
    "text": "So that's the reason why.",
    "start": "467780",
    "end": "469030"
  },
  {
    "text": "So we will use these embeddings to decide if neighborhood of u is",
    "start": "469030",
    "end": "473240"
  },
  {
    "text": "isomorphic to subgraph of neighborhood of v. And, um,",
    "start": "473240",
    "end": "478110"
  },
  {
    "text": "we not only predict if there exists a mapping,",
    "start": "478110",
    "end": "480740"
  },
  {
    "text": "but we can also, um,",
    "start": "480740",
    "end": "482405"
  },
  {
    "text": "in some cases be able to corres- to identify",
    "start": "482405",
    "end": "484970"
  },
  {
    "text": "corresponding nodes because we know that u corresponds,",
    "start": "484970",
    "end": "488060"
  },
  {
    "text": "uh, to v. So we'll also find the correspondence of, uh, anchors.",
    "start": "488060",
    "end": "493895"
  },
  {
    "text": "So how are we going to decompose G_T into neighborhoods?",
    "start": "493895",
    "end": "498775"
  },
  {
    "start": "494000",
    "end": "702000"
  },
  {
    "text": "Basically, for every node in the target graph,",
    "start": "498775",
    "end": "502360"
  },
  {
    "text": "we are going to obtain a k-hop neighborhood around the anchor.",
    "start": "502360",
    "end": "505810"
  },
  {
    "text": "We can simply pre- do this with- using breadth-first search.",
    "start": "505810",
    "end": "510175"
  },
  {
    "text": "Usually, you know, our parameter,",
    "start": "510175",
    "end": "512380"
  },
  {
    "text": "k, will be around,",
    "start": "512380",
    "end": "513865"
  },
  {
    "text": "you know, maybe three, maybe four.",
    "start": "513865",
    "end": "515440"
  },
  {
    "text": "So basically, we go three hops out,",
    "start": "515440",
    "end": "517090"
  },
  {
    "text": "we go four hops out.",
    "start": "517090",
    "end": "518620"
  },
  {
    "text": "And we can- and this way, we can, um,",
    "start": "518620",
    "end": "521050"
  },
  {
    "text": "decompose G_T, the target graphing to a lot of different neighborhoods.",
    "start": "521050",
    "end": "526089"
  },
  {
    "text": "And now, as we have created the neighborhood,",
    "start": "526090",
    "end": "529345"
  },
  {
    "text": "we simply apply our graph neural network embedding of the- of the anchor node,",
    "start": "529345",
    "end": "535045"
  },
  {
    "text": "um, v, to map that anchor node into the embedding space.",
    "start": "535045",
    "end": "539454"
  },
  {
    "text": "And then we can also do the same procedure,",
    "start": "539455",
    "end": "543475"
  },
  {
    "text": "uh, to the query to obtain neighborhoods in the query graph.",
    "start": "543475",
    "end": "547045"
  },
  {
    "text": "Um, and then we are going to embed these neighborhoods, as I said,",
    "start": "547045",
    "end": "550704"
  },
  {
    "text": "using a GNN by computing simply the node embedding for every anchor,",
    "start": "550705",
    "end": "555520"
  },
  {
    "text": "um, in its corresponding neighborhood.",
    "start": "555520",
    "end": "559570"
  },
  {
    "text": "Now, what is the- the cool part and actually,",
    "start": "559570",
    "end": "563890"
  },
  {
    "text": "the most important part of this lecture is this notion of",
    "start": "563890",
    "end": "567460"
  },
  {
    "text": "an order embedding space.",
    "start": "567460",
    "end": "569665"
  },
  {
    "text": "So, you know, what we talked so far was kind of",
    "start": "569665",
    "end": "572695"
  },
  {
    "text": "clear and you have perhaps- perhaps heard about it,",
    "start": "572695",
    "end": "575890"
  },
  {
    "text": "but you haven't heard about this topic.",
    "start": "575890",
    "end": "578185"
  },
  {
    "text": "This is now super cool.",
    "start": "578185",
    "end": "579565"
  },
  {
    "text": "So order embedding space.",
    "start": "579565",
    "end": "582190"
  },
  {
    "text": "Let me explain what we mean by this, right?",
    "start": "582190",
    "end": "584380"
  },
  {
    "text": "So, um, we map graph,",
    "start": "584380",
    "end": "586660"
  },
  {
    "text": "let's say A to point Z_A in a high-dimensional space,",
    "start": "586660",
    "end": "590319"
  },
  {
    "text": "let's say 64-dimensional embedding.",
    "start": "590320",
    "end": "592570"
  },
  {
    "text": "Um, and we are going to assume that the embedding space is non-negative,",
    "start": "592570",
    "end": "596860"
  },
  {
    "text": "so all coordinates are either 0or, uh, positive.",
    "start": "596860",
    "end": "600880"
  },
  {
    "text": "And then what we would like to do is we'd like to capture",
    "start": "600880",
    "end": "604720"
  },
  {
    "text": "partial ordering transitivity in the embedding space, right?",
    "start": "604720",
    "end": "609339"
  },
  {
    "text": "Then we are going to use this notation to say that,",
    "start": "609340",
    "end": "613510"
  },
  {
    "text": "you know, the- the left node is- is- is less than,",
    "start": "613510",
    "end": "618430"
  },
  {
    "text": "equal than the right node, um,",
    "start": "618430",
    "end": "620230"
  },
  {
    "text": "if all coordinates of the blue node- of",
    "start": "620230",
    "end": "623260"
  },
  {
    "text": "the left node are less or equal to the- all the coordinates of the right node.",
    "start": "623260",
    "end": "628070"
  },
  {
    "text": "So for example, in our- in this- in this case,",
    "start": "628070",
    "end": "631665"
  },
  {
    "text": "what this means is we have this transitive, uh, relation.",
    "start": "631665",
    "end": "634889"
  },
  {
    "text": "Because intuitively, when I say all the coordinates to be less,",
    "start": "634890",
    "end": "638145"
  },
  {
    "text": "it really means, um,",
    "start": "638145",
    "end": "639630"
  },
  {
    "text": "a given point has to be to the low- lower left of some other point, right?",
    "start": "639630",
    "end": "644500"
  },
  {
    "text": "So if- if this point is lower left",
    "start": "644500",
    "end": "647995"
  },
  {
    "text": "of that point and that same point is lower left of another point,",
    "start": "647995",
    "end": "651975"
  },
  {
    "text": "then also the first point is to the lower left,",
    "start": "651975",
    "end": "654600"
  },
  {
    "text": "uh, of the, uh, third point, right?",
    "start": "654600",
    "end": "656880"
  },
  {
    "text": "So here, you know, um,",
    "start": "656880",
    "end": "659170"
  },
  {
    "text": "this particular point is to the le- lower left,",
    "start": "659170",
    "end": "661540"
  },
  {
    "text": "uh, of, uh, that particular point, right?",
    "start": "661540",
    "end": "664360"
  },
  {
    "text": "So basically, what we want is we wanna, uh,",
    "start": "664360",
    "end": "666685"
  },
  {
    "text": "have these relationships of being to the lower- to the lower left,",
    "start": "666685",
    "end": "671860"
  },
  {
    "text": "which means in any- any part of the- of the space, right?",
    "start": "671860",
    "end": "676149"
  },
  {
    "text": "Basically, all the coordinates have to be less or equal,",
    "start": "676150",
    "end": "679000"
  },
  {
    "text": "which means you have to be embedded to the lower left of something else.",
    "start": "679000",
    "end": "683230"
  },
  {
    "text": "So- and this is called order embedding because",
    "start": "683230",
    "end": "686410"
  },
  {
    "text": "this partial ordering, this transitivity, uh,",
    "start": "686410",
    "end": "689365"
  },
  {
    "text": "is captured by this relation,",
    "start": "689365",
    "end": "691645"
  },
  {
    "text": "are you embedded lower left of something else.",
    "start": "691645",
    "end": "695500"
  },
  {
    "text": "So, you know, why- why- why should you care, right?",
    "start": "695500",
    "end": "698755"
  },
  {
    "text": "Why is lower left so cool and so important?",
    "start": "698755",
    "end": "702925"
  },
  {
    "start": "702000",
    "end": "781000"
  },
  {
    "text": "The point is that, uh,",
    "start": "702925",
    "end": "705040"
  },
  {
    "text": "lower left is so important is because it captures subgraph, uh, relations, right?",
    "start": "705040",
    "end": "710995"
  },
  {
    "text": "Imagine, uh, for example,",
    "start": "710995",
    "end": "712885"
  },
  {
    "text": "uh, the case here is that I have, uh,",
    "start": "712885",
    "end": "714985"
  },
  {
    "text": "the target graph, I have the neighborhood,",
    "start": "714985",
    "end": "717235"
  },
  {
    "text": "and I have different- different queries, right?",
    "start": "717235",
    "end": "720579"
  },
  {
    "text": "Then in my case, imagine that this is, uh,",
    "start": "720580",
    "end": "723025"
  },
  {
    "text": "the node anchored, uh,",
    "start": "723025",
    "end": "724765"
  },
  {
    "text": "neighborhood that I embedded here.",
    "start": "724765",
    "end": "727090"
  },
  {
    "text": "And I have two- two anchored queries,",
    "start": "727090",
    "end": "729280"
  },
  {
    "text": "Query 1 and Query 2.",
    "start": "729280",
    "end": "730735"
  },
  {
    "text": "And now, because basically the point is the following,",
    "start": "730735",
    "end": "733660"
  },
  {
    "text": "because Query 1 is a subgraph of the neighborhood,",
    "start": "733660",
    "end": "737199"
  },
  {
    "text": "Query 1 should be embedded to the lower left of the neighborhood,",
    "start": "737200",
    "end": "742750"
  },
  {
    "text": "while Query 2 is not a subgraph,",
    "start": "742750",
    "end": "745735"
  },
  {
    "text": "so it should not be embedded to the lower left, right?",
    "start": "745735",
    "end": "748930"
  },
  {
    "text": "So here, this notion of a subgraph relationship is preserved",
    "start": "748930",
    "end": "752785"
  },
  {
    "text": "because the Query 1 is embedded to the lower left of, uh, Query 2.",
    "start": "752785",
    "end": "758050"
  },
  {
    "text": "And simply by comparing the positions of the embeddings of this,",
    "start": "758050",
    "end": "762190"
  },
  {
    "text": "uh, anchor nodes, we can determine that, you know, uh,",
    "start": "762190",
    "end": "766180"
  },
  {
    "text": "Query 1 is a subgraph of, uh,",
    "start": "766180",
    "end": "768145"
  },
  {
    "text": "anchor node t, while, uh,",
    "start": "768145",
    "end": "770170"
  },
  {
    "text": "Query 2 is not a subgraph of anchor node,",
    "start": "770170",
    "end": "773125"
  },
  {
    "text": "uh, uh, t. So that's the cool part.",
    "start": "773125",
    "end": "776505"
  },
  {
    "text": "We can very quickly read from the embedding whether one is a subgraph of the other.",
    "start": "776505",
    "end": "781230"
  },
  {
    "start": "781000",
    "end": "931000"
  },
  {
    "text": "Um, you know, why does this work?",
    "start": "781230",
    "end": "783740"
  },
  {
    "text": "Why do we care about this, uh,",
    "start": "783740",
    "end": "785695"
  },
  {
    "text": "transitive, uh, partial ordering,",
    "start": "785695",
    "end": "788050"
  },
  {
    "text": "uh, in the embedding space is because subgraph isomorphism relationship,",
    "start": "788050",
    "end": "792700"
  },
  {
    "text": "um, can nicely be encoded in",
    "start": "792700",
    "end": "795190"
  },
  {
    "text": "this order embedding space where the order is defined by this relation,",
    "start": "795190",
    "end": "799705"
  },
  {
    "text": "are you lower left of somebody else.",
    "start": "799705",
    "end": "801925"
  },
  {
    "text": "And the reason is because the- the order- order relations,",
    "start": "801925",
    "end": "805779"
  },
  {
    "text": "so the lower left, uh,",
    "start": "805780",
    "end": "807880"
  },
  {
    "text": "relation is transitive and subgraph isomorphism is also transitive.",
    "start": "807880",
    "end": "812860"
  },
  {
    "text": "It has this property of anti-symmetry,",
    "start": "812860",
    "end": "815440"
  },
  {
    "text": "which is also, um,",
    "start": "815440",
    "end": "817360"
  },
  {
    "text": "encoded in the order embedding,",
    "start": "817360",
    "end": "819235"
  },
  {
    "text": "is that if G_1 is a subgraph of G_2 and G_2 is a subgraph of G_1,",
    "start": "819235",
    "end": "823510"
  },
  {
    "text": "then G_1 and G_2 are- are isomorphic.",
    "start": "823510",
    "end": "826195"
  },
  {
    "text": "They are the same. So if one point is to the lower left",
    "start": "826195",
    "end": "828940"
  },
  {
    "text": "of one and the other one is of the lower left of the first one,",
    "start": "828940",
    "end": "831925"
  },
  {
    "text": "then the points are on the same location,",
    "start": "831925",
    "end": "834010"
  },
  {
    "text": "so the two graphs are isomorphic.",
    "start": "834010",
    "end": "835825"
  },
  {
    "text": "Transitive would mean if G_1 is a subgraph of G_2,",
    "start": "835825",
    "end": "838540"
  },
  {
    "text": "G_2 is of G_3,",
    "start": "838540",
    "end": "839860"
  },
  {
    "text": "then G_1 is a subgraph of G_3 as well, which again is,",
    "start": "839860",
    "end": "843490"
  },
  {
    "text": "uh, encoded by the, uh,",
    "start": "843490",
    "end": "845455"
  },
  {
    "text": "you know, the subgraph, uh, relation.",
    "start": "845455",
    "end": "847630"
  },
  {
    "text": "And the last one is this notion of closure under intersection that,",
    "start": "847630",
    "end": "851680"
  },
  {
    "text": "uh, the trivial graph of one node is a subgraph of any node.",
    "start": "851680",
    "end": "855295"
  },
  {
    "text": "In our case, it would be the embedding at the coordinate origin,",
    "start": "855295",
    "end": "858894"
  },
  {
    "text": "at 0, 0, 0, is a subgraph of every other embedding.",
    "start": "858895",
    "end": "862795"
  },
  {
    "text": "It is to the lower left of any other- of any other embedding.",
    "start": "862795",
    "end": "866740"
  },
  {
    "text": "So basically, this order embedding space defined by this relation is one point to",
    "start": "866740",
    "end": "871870"
  },
  {
    "text": "the lower left of the other has",
    "start": "871870",
    "end": "873520"
  },
  {
    "text": "all these properties that the subgraph relation, uh, also has.",
    "start": "873520",
    "end": "877750"
  },
  {
    "text": "So, um, the reason now that- why we are interested in it,",
    "start": "877750",
    "end": "882400"
  },
  {
    "text": "as I- as I said and here I show,",
    "start": "882400",
    "end": "884320"
  },
  {
    "text": "uh, more- more formally, is that,",
    "start": "884320",
    "end": "886270"
  },
  {
    "text": "you know, the order embedding space captures transitivity, right?",
    "start": "886270",
    "end": "890230"
  },
  {
    "text": "In a sense that if, uh,",
    "start": "890230",
    "end": "891579"
  },
  {
    "text": "first point is the subgraph of the second and the second is of the third,",
    "start": "891580",
    "end": "895060"
  },
  {
    "text": "then first is also a subgraph of the third.",
    "start": "895060",
    "end": "897654"
  },
  {
    "text": "We have this notion of anti-symmetry, uh,",
    "start": "897655",
    "end": "900280"
  },
  {
    "text": "that if one is to the le- lower left of the other,",
    "start": "900280",
    "end": "903040"
  },
  {
    "text": "and the other is to the lower left of the first,",
    "start": "903040",
    "end": "904870"
  },
  {
    "text": "then they are- they are equivalent, they basically overlap.",
    "start": "904870",
    "end": "907480"
  },
  {
    "text": "Um, and then the last one is this, uh, closure, uh,",
    "start": "907480",
    "end": "910269"
  },
  {
    "text": "under intersection, uh, illustrated here,",
    "start": "910270",
    "end": "913360"
  },
  {
    "text": "uh, on the- on the right.",
    "start": "913360",
    "end": "914470"
  },
  {
    "text": "So basically, order embedding space defined by this lower left relation,",
    "start": "914470",
    "end": "919764"
  },
  {
    "text": "captures the same type of patterns,",
    "start": "919765",
    "end": "922870"
  },
  {
    "text": "properties that the subgraph, uh, relation has.",
    "start": "922870",
    "end": "926260"
  },
  {
    "text": "And that's the important part and the cool part of the order embedding space.",
    "start": "926260",
    "end": "931495"
  },
  {
    "start": "931000",
    "end": "1042000"
  },
  {
    "text": "So now we are going to actually learn the embeddings of these,",
    "start": "931495",
    "end": "937450"
  },
  {
    "text": "uh, anchored neighborhoods such that the subgraph relation is preserved, right?",
    "start": "937450",
    "end": "943240"
  },
  {
    "text": "So we are going to use a GNN to learn the embeddings of neighborhoods,",
    "start": "943240",
    "end": "947470"
  },
  {
    "text": "basically to learn the embedding of the anchor node,",
    "start": "947470",
    "end": "949810"
  },
  {
    "text": "to preserve this order embedding structure,",
    "start": "949810",
    "end": "952420"
  },
  {
    "text": "to preserve the subgraph structure.",
    "start": "952420",
    "end": "954700"
  },
  {
    "text": "So the question is,",
    "start": "954700",
    "end": "956110"
  },
  {
    "text": "what kind of loss function should we use so that the learned,",
    "start": "956110",
    "end": "959769"
  },
  {
    "text": "uh, embedding operator reflects the subgraph relationship?",
    "start": "959770",
    "end": "963760"
  },
  {
    "text": "Um, and we are going to design a loss function based on what we call order constraint.",
    "start": "963760",
    "end": "969415"
  },
  {
    "text": "An order constraint specifies the ideal order of the embedding,",
    "start": "969415",
    "end": "973870"
  },
  {
    "text": "um, lower left property that reflects",
    "start": "973870",
    "end": "977319"
  },
  {
    "text": "a subgraph, uh, relation.",
    "start": "977319",
    "end": "979779"
  },
  {
    "text": "So this specify this, what we call,",
    "start": "979780",
    "end": "983140"
  },
  {
    "text": "order constraint to ensure that",
    "start": "983140",
    "end": "985150"
  },
  {
    "text": "subgraph properties are preserved in the embedding space, right?",
    "start": "985150",
    "end": "988990"
  },
  {
    "text": "So basically, what this means, uh,",
    "start": "988990",
    "end": "990955"
  },
  {
    "text": "here is- it's written in mathematics,",
    "start": "990955",
    "end": "993085"
  },
  {
    "text": "but basically it says that if a query is a subgraph of the target,",
    "start": "993085",
    "end": "997195"
  },
  {
    "text": "then every coordin- every embedding coordinate of the query should be less than the,",
    "start": "997195",
    "end": "1002250"
  },
  {
    "text": "uh, embedding, uh- every coor- embedding coordinate of the target.",
    "start": "1002250",
    "end": "1006240"
  },
  {
    "text": "Right. So if Q is a subgraph of T,",
    "start": "1006240",
    "end": "1009360"
  },
  {
    "text": "then the embedding of the anchor node, uh,",
    "start": "1009360",
    "end": "1012315"
  },
  {
    "text": "in T should be to the, um, to the,",
    "start": "1012315",
    "end": "1015705"
  },
  {
    "text": "uh, greater and equal than the embedding of the, uh, query q.",
    "start": "1015705",
    "end": "1019800"
  },
  {
    "text": "So the relationship is- is this, right?",
    "start": "1019800",
    "end": "1022170"
  },
  {
    "text": "This is the query, that's the target,",
    "start": "1022170",
    "end": "1023940"
  },
  {
    "text": "so the anchor node, uh,",
    "start": "1023940",
    "end": "1026005"
  },
  {
    "text": "from the query should be embedded to",
    "start": "1026005",
    "end": "1028050"
  },
  {
    "text": "the lower left of the anchor node of the target because,",
    "start": "1028050",
    "end": "1031380"
  },
  {
    "text": "uh, que- this is, uh,",
    "start": "1031380",
    "end": "1033435"
  },
  {
    "text": "anchored subgraph, uh, of the target.",
    "start": "1033435",
    "end": "1036045"
  },
  {
    "text": "So that's basically what we mean by order constraint,",
    "start": "1036045",
    "end": "1039000"
  },
  {
    "text": "is that you have to be to the lower left.",
    "start": "1039000",
    "end": "1041790"
  },
  {
    "text": "Now, um, GNN embeddings are learned using,",
    "start": "1041790",
    "end": "1047444"
  },
  {
    "start": "1042000",
    "end": "1197000"
  },
  {
    "text": "uh- by minimizing what is called a max-margin loss.",
    "start": "1047445",
    "end": "1050820"
  },
  {
    "text": "So basically what we are going to do is to define",
    "start": "1050820",
    "end": "1053279"
  },
  {
    "text": "this notion of a loss where we are saying,",
    "start": "1053280",
    "end": "1056250"
  },
  {
    "text": "okay: so how much, um, is this,",
    "start": "1056250",
    "end": "1059130"
  },
  {
    "text": "uh, constraint, um, violated?",
    "start": "1059130",
    "end": "1062160"
  },
  {
    "text": "So basically here we say this is the maximum of zero and the,",
    "start": "1062160",
    "end": "1065970"
  },
  {
    "text": "uh, and the difference in the coordinates, right?",
    "start": "1065970",
    "end": "1068820"
  },
  {
    "text": "So if coordinate Z_t is always larger than the coordinate of q,",
    "start": "1068820",
    "end": "1073889"
  },
  {
    "text": "then this difference will be negative,",
    "start": "1073890",
    "end": "1075660"
  },
  {
    "text": "so maximum of negative in 0 is 0,",
    "start": "1075660",
    "end": "1078240"
  },
  {
    "text": "so the violation will be 0.",
    "start": "1078240",
    "end": "1081000"
  },
  {
    "text": "But if the subgraph relation is not preserved,",
    "start": "1081000",
    "end": "1085200"
  },
  {
    "text": "which means that along the given coordinate q is to the right or to the top of Z,",
    "start": "1085200",
    "end": "1090585"
  },
  {
    "text": "this means Z_q is greater than Z_t,",
    "start": "1090585",
    "end": "1093404"
  },
  {
    "text": "then this difference will be positive and then maximum",
    "start": "1093405",
    "end": "1096330"
  },
  {
    "text": "of 0 and a positive number will be a positive number,",
    "start": "1096330",
    "end": "1099404"
  },
  {
    "text": "so this E is the margin.",
    "start": "1099405",
    "end": "1101430"
  },
  {
    "text": "It will be basically, um,",
    "start": "1101430",
    "end": "1102900"
  },
  {
    "text": "the amount of violation of",
    "start": "1102900",
    "end": "1105120"
  },
  {
    "text": "the order constraint between a given query and a given, uh, target, right?",
    "start": "1105120",
    "end": "1109860"
  },
  {
    "text": "So here there is no violation,",
    "start": "1109860",
    "end": "1111990"
  },
  {
    "text": "while in this case there is violation because q is a subgraph of t,",
    "start": "1111990",
    "end": "1115934"
  },
  {
    "text": "but q is not embedded to the lower left, uh,",
    "start": "1115935",
    "end": "1118650"
  },
  {
    "text": "of t. So, um, eh,",
    "start": "1118650",
    "end": "1120900"
  },
  {
    "text": "according- al- along the first dimension,",
    "start": "1120900",
    "end": "1124065"
  },
  {
    "text": "this difference will be positive,",
    "start": "1124065",
    "end": "1125730"
  },
  {
    "text": "so the entire maximum,",
    "start": "1125730",
    "end": "1127290"
  },
  {
    "text": "uh, will be positive, uh, as well.",
    "start": "1127290",
    "end": "1129600"
  },
  {
    "text": "So this is now how we've arrived,",
    "start": "1129600",
    "end": "1131250"
  },
  {
    "text": "and what is important here is that now, um,",
    "start": "1131250",
    "end": "1133665"
  },
  {
    "text": "this, uh, loss, this, uh, penalty, uh,",
    "start": "1133665",
    "end": "1136740"
  },
  {
    "text": "E is differentiable, so we'll be able to, uh,",
    "start": "1136740",
    "end": "1139700"
  },
  {
    "text": "back-propagate this penalty into the graph neural network, uh, architecture.",
    "start": "1139700",
    "end": "1145029"
  },
  {
    "text": "So the embeddings are learned by,",
    "start": "1145030",
    "end": "1147540"
  },
  {
    "text": "uh, minimizing this max-margin loss,",
    "start": "1147540",
    "end": "1150240"
  },
  {
    "text": "so we have this E that determines the- the amount of, uh,",
    "start": "1150240",
    "end": "1154679"
  },
  {
    "text": "order constraint violation between a given graph, uh,",
    "start": "1154680",
    "end": "1157890"
  },
  {
    "text": "and a target, and we call this,",
    "start": "1157890",
    "end": "1160470"
  },
  {
    "text": "uh, penalty, this violation the margin.",
    "start": "1160470",
    "end": "1163034"
  },
  {
    "text": "So we wanna learn the correct order embeddings so- so that, uh,",
    "start": "1163035",
    "end": "1168150"
  },
  {
    "text": "the- the penalty is 0 when G_q is a subgraph of, uh,",
    "start": "1168150",
    "end": "1172695"
  },
  {
    "text": "G_t, and the penalty is greater than 0 when G_q is not a subgraph of G_t, right?",
    "start": "1172695",
    "end": "1179174"
  },
  {
    "text": "So we want penalty of 0 when, uh,",
    "start": "1179175",
    "end": "1182310"
  },
  {
    "text": "one is a subgraph,",
    "start": "1182310",
    "end": "1183450"
  },
  {
    "text": "so it has to be embedded to the lower left,",
    "start": "1183450",
    "end": "1185445"
  },
  {
    "text": "and then the penalty will be zero,",
    "start": "1185445",
    "end": "1187695"
  },
  {
    "text": "and if it's another subgraph,",
    "start": "1187695",
    "end": "1189615"
  },
  {
    "text": "then we want this penalty to be high because G_q",
    "start": "1189615",
    "end": "1192720"
  },
  {
    "text": "should not be embedded to the lower left of, uh, G_t, right?",
    "start": "1192720",
    "end": "1197260"
  },
  {
    "start": "1197000",
    "end": "1260000"
  },
  {
    "text": "So to learn this,",
    "start": "1197510",
    "end": "1199950"
  },
  {
    "text": "um, uh- this, uh,",
    "start": "1199950",
    "end": "1201434"
  },
  {
    "text": "embedding function, we need to construct training examples, right?",
    "start": "1201435",
    "end": "1205065"
  },
  {
    "text": "Of G_q and G_t, where, uh,",
    "start": "1205065",
    "end": "1207480"
  },
  {
    "text": "you know half of the time G_q will be a subgraph,",
    "start": "1207480",
    "end": "1210255"
  },
  {
    "text": "and the other time- half of the time it won't be.",
    "start": "1210255",
    "end": "1213060"
  },
  {
    "text": "Um, and then right when we are going to do the training of the embedding neural network,",
    "start": "1213060",
    "end": "1218115"
  },
  {
    "text": "we are going to, uh,",
    "start": "1218115",
    "end": "1219809"
  },
  {
    "text": "make it such that for positive examples we wanna minimize the penalty,",
    "start": "1219810",
    "end": "1223410"
  },
  {
    "text": "and for negative examples we wanna,",
    "start": "1223410",
    "end": "1225390"
  },
  {
    "text": "uh, maximize the penalty.",
    "start": "1225390",
    "end": "1226950"
  },
  {
    "text": "So here is how- how you can write this all out, uh,",
    "start": "1226950",
    "end": "1230370"
  },
  {
    "text": "by another kind of, um, uh,",
    "start": "1230370",
    "end": "1232230"
  },
  {
    "text": "huge- huge loss, uh,",
    "start": "1232230",
    "end": "1234465"
  },
  {
    "text": "type expression where we again say,",
    "start": "1234465",
    "end": "1236625"
  },
  {
    "text": "um, if, uh- if,",
    "start": "1236625",
    "end": "1239100"
  },
  {
    "text": "uh- if it will be, uh, um,",
    "start": "1239100",
    "end": "1241155"
  },
  {
    "text": "for positive examples, I want this to be zero.",
    "start": "1241155",
    "end": "1243855"
  },
  {
    "text": "So, um, you know,",
    "start": "1243855",
    "end": "1245730"
  },
  {
    "text": "I'll- I'll get some Alpha and for negative, uh,",
    "start": "1245730",
    "end": "1248910"
  },
  {
    "text": "examples, uh, uh, I- this will be greater than 0,",
    "start": "1248910",
    "end": "1251970"
  },
  {
    "text": "so this- I'll- this,",
    "start": "1251970",
    "end": "1253155"
  },
  {
    "text": "uh- this expression will be smaller.",
    "start": "1253155",
    "end": "1255000"
  },
  {
    "text": "So I'll wanna be able to uh,",
    "start": "1255000",
    "end": "1257370"
  },
  {
    "text": "uh, minimize this, uh, maximum.",
    "start": "1257370",
    "end": "1259875"
  },
  {
    "text": "So, um, now how do I generate training examples?",
    "start": "1259875",
    "end": "1263625"
  },
  {
    "start": "1260000",
    "end": "1292000"
  },
  {
    "text": "Is by simply picking an anchor node,",
    "start": "1263625",
    "end": "1265740"
  },
  {
    "text": "and then doing a breadth first, kind of,",
    "start": "1265740",
    "end": "1267840"
  },
  {
    "text": "a probabilistic breadth-first search around it,",
    "start": "1267840",
    "end": "1270225"
  },
  {
    "text": "and this means that I'll have the- I'll generate",
    "start": "1270225",
    "end": "1273240"
  },
  {
    "text": "the query that will be a subgraph of a given- of a given neighborhood.",
    "start": "1273240",
    "end": "1277245"
  },
  {
    "text": "And then to generate a negative example,",
    "start": "1277245",
    "end": "1280215"
  },
  {
    "text": "I can, you know, corrupt the query by,",
    "start": "1280215",
    "end": "1282465"
  },
  {
    "text": "you know, perhaps removing a node,",
    "start": "1282465",
    "end": "1284610"
  },
  {
    "text": "ending an edge, removing an edge,",
    "start": "1284610",
    "end": "1286559"
  },
  {
    "text": "uh, things like that, right?",
    "start": "1286560",
    "end": "1287880"
  },
  {
    "text": "So, uh- so that it is no longer, uh, a subgraph.",
    "start": "1287880",
    "end": "1292050"
  },
  {
    "start": "1292000",
    "end": "1339000"
  },
  {
    "text": "So, you know, how many of these training examples do I",
    "start": "1292050",
    "end": "1295830"
  },
  {
    "text": "choose so that I can then train my embedding neural network?",
    "start": "1295830",
    "end": "1299684"
  },
  {
    "text": "The idea is, as I train this, I wanna,",
    "start": "1299685",
    "end": "1301740"
  },
  {
    "text": "uh, at every iteration sample new training pairs.",
    "start": "1301740",
    "end": "1304920"
  },
  {
    "text": "Uh, the benefit is that at every iteration the model,",
    "start": "1304920",
    "end": "1307890"
  },
  {
    "text": "uh, will see, uh, different,",
    "start": "1307890",
    "end": "1309825"
  },
  {
    "text": "uh, subgraph examples, and it will improve performance,",
    "start": "1309825",
    "end": "1313080"
  },
  {
    "text": "and it will avoid, uh, overfitting.",
    "start": "1313080",
    "end": "1315120"
  },
  {
    "text": "How deep do I wanna make",
    "start": "1315120",
    "end": "1317130"
  },
  {
    "text": "my Breath-First Search training example sampling a neighborhood sampling?",
    "start": "1317130",
    "end": "1321435"
  },
  {
    "text": "Um, it's, kind of, a trade-off between the runtime and performance.",
    "start": "1321435",
    "end": "1324720"
  },
  {
    "text": "The deeper- the deeper I go,",
    "start": "1324720",
    "end": "1326595"
  },
  {
    "text": "the longer the runtime, but usually,",
    "start": "1326595",
    "end": "1328679"
  },
  {
    "text": "uh, the more, the better embeddings I get.",
    "start": "1328680",
    "end": "1331125"
  },
  {
    "text": "So usually we would use the- the depth between, uh,",
    "start": "1331125",
    "end": "1334275"
  },
  {
    "text": "3 and 5, also depending a bit,",
    "start": "1334275",
    "end": "1336840"
  },
  {
    "text": "uh, on the data set.",
    "start": "1336840",
    "end": "1338955"
  },
  {
    "text": "So, um, you know,",
    "start": "1338955",
    "end": "1341294"
  },
  {
    "start": "1339000",
    "end": "1391000"
  },
  {
    "text": "how do I now apply this when a new query arrives?",
    "start": "1341295",
    "end": "1345015"
  },
  {
    "text": "When a new query arrives,",
    "start": "1345015",
    "end": "1346530"
  },
  {
    "text": "I- I- the query has an anchor.",
    "start": "1346530",
    "end": "1348975"
  },
  {
    "text": "I simply embed the- the anchor,",
    "start": "1348975",
    "end": "1351419"
  },
  {
    "text": "um, and then, uh,",
    "start": "1351420",
    "end": "1353175"
  },
  {
    "text": "the procedure is that basically for every other,",
    "start": "1353175",
    "end": "1355620"
  },
  {
    "text": "uh, target, um, anchor at the",
    "start": "1355620",
    "end": "1357495"
  },
  {
    "text": "neighborhood of the target graph, I,",
    "start": "1357495",
    "end": "1359850"
  },
  {
    "text": "um- I compare the embedding of the,",
    "start": "1359850",
    "end": "1363030"
  },
  {
    "text": "um, anchor neighborhood with my,",
    "start": "1363030",
    "end": "1365490"
  },
  {
    "text": "uh, anchored query embedding.",
    "start": "1365490",
    "end": "1367620"
  },
  {
    "text": "And if the- if the query is embedded to the lower left of that, um, neighborhood,",
    "start": "1367620",
    "end": "1373395"
  },
  {
    "text": "then I say that, uh,",
    "start": "1373395",
    "end": "1375165"
  },
  {
    "text": "query is a subgraph of the neighborhood,",
    "start": "1375165",
    "end": "1377400"
  },
  {
    "text": "and otherwise I would say, uh,",
    "start": "1377400",
    "end": "1379305"
  },
  {
    "text": "that it's, uh, not a subgraph, right?",
    "start": "1379305",
    "end": "1381450"
  },
  {
    "text": "So basically, um, I can quickly check this by simply asking,",
    "start": "1381450",
    "end": "1385350"
  },
  {
    "text": "is one embedding to the lower left,",
    "start": "1385350",
    "end": "1387510"
  },
  {
    "text": "uh, of the other embedding?",
    "start": "1387510",
    "end": "1390300"
  },
  {
    "text": "So let me summarize, uh, this part.",
    "start": "1390300",
    "end": "1393975"
  },
  {
    "start": "1391000",
    "end": "1494000"
  },
  {
    "text": "So um, we talked about neural subgraph matching, which is, uh,",
    "start": "1393975",
    "end": "1398760"
  },
  {
    "text": "a way to formulate subgraph matching as a machine learning problem, uh,",
    "start": "1398760",
    "end": "1402915"
  },
  {
    "text": "and this way sidestep the NP-hard problem of sub- subgraph isomorphism.",
    "start": "1402915",
    "end": "1407655"
  },
  {
    "text": "Uh, basically given a query and given a ta- target graph,",
    "start": "1407655",
    "end": "1410940"
  },
  {
    "text": "we embed the query,",
    "start": "1410940",
    "end": "1412440"
  },
  {
    "text": "we embed the node anchored neighborhoods of the target graph,",
    "start": "1412440",
    "end": "1415620"
  },
  {
    "text": "and we train our neural network embedding function such that, um,",
    "start": "1415620",
    "end": "1421335"
  },
  {
    "text": "it embeds subgraphs in,",
    "start": "1421335",
    "end": "1424304"
  },
  {
    "text": "uh- to be in such a way that they are located to the lower left of each other, right?",
    "start": "1424305",
    "end": "1428670"
  },
  {
    "text": "If q is a subgraph of t,",
    "start": "1428670",
    "end": "1430935"
  },
  {
    "text": "then q is embedded to the lower left, uh,",
    "start": "1430935",
    "end": "1433980"
  },
  {
    "text": "of t. So this is- and at the training time of this embedding neural network,",
    "start": "1433980",
    "end": "1438990"
  },
  {
    "text": "we force it to obey this subgraph relation,",
    "start": "1438990",
    "end": "1442574"
  },
  {
    "text": "and this means we can then very easily and quickly find",
    "start": "1442574",
    "end": "1446130"
  },
  {
    "text": "out whether a query is a subgraph of a given, uh,",
    "start": "1446130",
    "end": "1449595"
  },
  {
    "text": "target neighborhood t. So basically embedding graphs with this order embedding",
    "start": "1449595",
    "end": "1455280"
  },
  {
    "text": "property or order embedding space allows us to test subgraph isomorphism very,",
    "start": "1455280",
    "end": "1461220"
  },
  {
    "text": "very quickly by simply just comparing the coordinates.",
    "start": "1461220",
    "end": "1464309"
  },
  {
    "text": "Basically saying, is the query embedded to the lower left,",
    "start": "1464310",
    "end": "1467520"
  },
  {
    "text": "uh, of the target?",
    "start": "1467520",
    "end": "1469095"
  },
  {
    "text": "And given the properties of the subgraph isomorphism,",
    "start": "1469095",
    "end": "1473760"
  },
  {
    "text": "uh, operator or re- relation,",
    "start": "1473760",
    "end": "1476145"
  },
  {
    "text": "we see that we can perfectly encode it into the order embedding space,",
    "start": "1476145",
    "end": "1480525"
  },
  {
    "text": "which means that actually all this is possible, um,",
    "start": "1480525",
    "end": "1483480"
  },
  {
    "text": "and we can, uh- we can do it,",
    "start": "1483480",
    "end": "1485340"
  },
  {
    "text": "and it, uh, works well in practice.",
    "start": "1485340",
    "end": "1488860"
  }
]