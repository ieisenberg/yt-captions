[
  {
    "text": "In this part of, uh, Stanford, CS 224 W, um,",
    "start": "4160",
    "end": "9750"
  },
  {
    "text": "machine-learning with graphs course,",
    "start": "9750",
    "end": "11880"
  },
  {
    "text": "I wanna talk about the choice of graph representation.",
    "start": "11880",
    "end": "15540"
  },
  {
    "text": "[NOISE] So what are components of a graph or a network?",
    "start": "15540",
    "end": "20760"
  },
  {
    "text": "So network is composed of two types of objects.",
    "start": "20760",
    "end": "23670"
  },
  {
    "text": "We- first, we have objects or entities themselves called,",
    "start": "23670",
    "end": "26970"
  },
  {
    "text": "uh, referred to as nodes, uh,",
    "start": "26970",
    "end": "29384"
  },
  {
    "text": "and vertices, and then we have interactions or edges between them,",
    "start": "29385",
    "end": "33680"
  },
  {
    "text": "uh, called links or, uh, edges.",
    "start": "33680",
    "end": "36230"
  },
  {
    "text": "And then the entire system, the entire, um,",
    "start": "36230",
    "end": "39380"
  },
  {
    "text": "domain we then call a- a network,",
    "start": "39380",
    "end": "41950"
  },
  {
    "text": "uh, or a graph.",
    "start": "41950",
    "end": "43105"
  },
  {
    "text": "Usually, for nodes, we will use, uh, uh,",
    "start": "43105",
    "end": "45940"
  },
  {
    "text": "the word- the letter capital N or capital V,",
    "start": "45940",
    "end": "49329"
  },
  {
    "text": "um, and then for edges,",
    "start": "49330",
    "end": "50865"
  },
  {
    "text": "we- we are usually using the-",
    "start": "50865",
    "end": "53070"
  },
  {
    "text": "the letter capital E so that the graph G is then composed of a set of nodes,",
    "start": "53070",
    "end": "57800"
  },
  {
    "text": "uh, N and a set of edges, uh,",
    "start": "57800",
    "end": "60065"
  },
  {
    "text": "E. What is important about graphs is that graphs are a common language,",
    "start": "60065",
    "end": "65570"
  },
  {
    "text": "meaning that I can take, for example, uh,",
    "start": "65570",
    "end": "67909"
  },
  {
    "text": "actors and connect them based on which movies they appeared in,",
    "start": "67910",
    "end": "71510"
  },
  {
    "text": "or I can take people based on the relationships they have with each other,",
    "start": "71510",
    "end": "76430"
  },
  {
    "text": "or I can take molecules, like proteins,",
    "start": "76430",
    "end": "79265"
  },
  {
    "text": "and build a network based on which proteins interact with each other.",
    "start": "79265",
    "end": "83390"
  },
  {
    "text": "If I look at what is the structure of this network,",
    "start": "83390",
    "end": "85520"
  },
  {
    "text": "what is the underlying mathematical representation,",
    "start": "85520",
    "end": "88250"
  },
  {
    "text": "in all these cases,",
    "start": "88250",
    "end": "89660"
  },
  {
    "text": "we have the same underlying mathematical representation,",
    "start": "89660",
    "end": "92750"
  },
  {
    "text": "which means that the same machine learning algorithm will be",
    "start": "92750",
    "end": "96020"
  },
  {
    "text": "able to make predictions be it that these nodes,",
    "start": "96020",
    "end": "100219"
  },
  {
    "text": "um, uh, correspond to actors, correspond to, uh,",
    "start": "100220",
    "end": "104165"
  },
  {
    "text": "people, or they correspond to molecules like proteins.",
    "start": "104165",
    "end": "107900"
  },
  {
    "text": "[NOISE] Of course, choosing a proper graph representation is very important.",
    "start": "107900",
    "end": "114680"
  },
  {
    "text": "So for example, if you have a set of people,",
    "start": "114680",
    "end": "117230"
  },
  {
    "text": "we can connect individuals that work with each",
    "start": "117230",
    "end": "119510"
  },
  {
    "text": "other and we will have a professional network.",
    "start": "119510",
    "end": "122890"
  },
  {
    "text": "However, we can also take the same set of individuals",
    "start": "122890",
    "end": "125975"
  },
  {
    "text": "and connect them based on sexual relationships, but then,",
    "start": "125975",
    "end": "129140"
  },
  {
    "text": "we'll ab- creating a sexual network, or for example,",
    "start": "129140",
    "end": "132950"
  },
  {
    "text": "if we have a set of scientific papers,",
    "start": "132950",
    "end": "134989"
  },
  {
    "text": "we can connect them based on citations,",
    "start": "134990",
    "end": "137390"
  },
  {
    "text": "which paper cites which other paper.",
    "start": "137390",
    "end": "139400"
  },
  {
    "text": "But for example, if we were to connect them based",
    "start": "139400",
    "end": "141829"
  },
  {
    "text": "on whether they use the same word in the title,",
    "start": "141830",
    "end": "144530"
  },
  {
    "text": "the- the quality of underlying network and the underlying,",
    "start": "144530",
    "end": "148475"
  },
  {
    "text": "uh, representations might be, uh, much worse.",
    "start": "148475",
    "end": "151400"
  },
  {
    "text": "So the choice of what the- the nodes are and what the links are is very important.",
    "start": "151400",
    "end": "157060"
  },
  {
    "text": "So whenever we are given a data set,",
    "start": "157060",
    "end": "159599"
  },
  {
    "text": "then we need to decide how are we going to design the underlying graph,",
    "start": "159600",
    "end": "164040"
  },
  {
    "text": "what will be the objects of interest nodes,",
    "start": "164040",
    "end": "166629"
  },
  {
    "text": "and what will be the relationships between them,",
    "start": "166630",
    "end": "169495"
  },
  {
    "text": "what will be the edges.",
    "start": "169495",
    "end": "170965"
  },
  {
    "text": "The choice of this proper network representation of a given domain or a given problem",
    "start": "170965",
    "end": "175750"
  },
  {
    "text": "deter- will determine our ability to use networks, uh, successfully.",
    "start": "175750",
    "end": "180865"
  },
  {
    "text": "In some cases, there will be a unique,",
    "start": "180865",
    "end": "183775"
  },
  {
    "text": "unambiguous way to represent this, um, problem,",
    "start": "183775",
    "end": "187569"
  },
  {
    "text": "this domain as a graph,",
    "start": "187570",
    "end": "189140"
  },
  {
    "text": "while in other cases,",
    "start": "189140",
    "end": "190960"
  },
  {
    "text": "this representation may, by no means, be unique.",
    "start": "190960",
    "end": "194380"
  },
  {
    "text": "Um, and the way we will assign links between the objects will determine, uh,",
    "start": "194380",
    "end": "199950"
  },
  {
    "text": "the nature of the questions we will be able to study and the nature of the,",
    "start": "199950",
    "end": "204410"
  },
  {
    "text": "um, predictions we will be able to make.",
    "start": "204410",
    "end": "208075"
  },
  {
    "text": "So to show you some examples of design choices we are faced with when co-creating graphs,",
    "start": "208075",
    "end": "215345"
  },
  {
    "text": "I will now go through some concepts and different types of graphs,",
    "start": "215345",
    "end": "218600"
  },
  {
    "text": "uh, that we can- that we can create from data.",
    "start": "218600",
    "end": "221590"
  },
  {
    "text": "First, I wi- I will distinguish between directed and undirected graphs, right?",
    "start": "221590",
    "end": "226175"
  },
  {
    "text": "Undirected graphs have links,",
    "start": "226175",
    "end": "228740"
  },
  {
    "text": "um, that- that are undirected, meaning,",
    "start": "228740",
    "end": "230930"
  },
  {
    "text": "that they are useful for modeling symmetric or reciprocal relationships,",
    "start": "230930",
    "end": "235859"
  },
  {
    "text": "like collaboration, friendship, um,",
    "start": "235860",
    "end": "238820"
  },
  {
    "text": "and interaction between proteins,",
    "start": "238820",
    "end": "241070"
  },
  {
    "text": "and so on, while directed, um,",
    "start": "241070",
    "end": "243950"
  },
  {
    "text": "relationships are captured by directed links,",
    "start": "243950",
    "end": "247370"
  },
  {
    "text": "where every link has a direction, has a source,",
    "start": "247370",
    "end": "250159"
  },
  {
    "text": "and has a destination denoted by a- by an arrow.",
    "start": "250160",
    "end": "254000"
  },
  {
    "text": "And examples of these types of, um,",
    "start": "254000",
    "end": "256549"
  },
  {
    "text": "links occurring in real-world would be phone calls,",
    "start": "256550",
    "end": "259565"
  },
  {
    "text": "financial transactions, uh, following on Twitter,",
    "start": "259565",
    "end": "262970"
  },
  {
    "text": "where there is a source and there is a destination.",
    "start": "262970",
    "end": "267000"
  },
  {
    "text": "The second type of, um- um, uh,",
    "start": "267150",
    "end": "270995"
  },
  {
    "text": "graphs that we are going to then talk about is that as we have, um,",
    "start": "270995",
    "end": "275955"
  },
  {
    "text": "created undirected graphs, then,",
    "start": "275955",
    "end": "279125"
  },
  {
    "text": "um, we can talk about the notion of a node degree.",
    "start": "279125",
    "end": "281870"
  },
  {
    "text": "And node degree is simply the number of edges,",
    "start": "281870",
    "end": "285500"
  },
  {
    "text": "um, adjacent to a given, uh, node.",
    "start": "285500",
    "end": "288125"
  },
  {
    "text": "So for example, the node a in this example has degree 4.",
    "start": "288125",
    "end": "291920"
  },
  {
    "text": "The average node degree is simply the- is",
    "start": "291920",
    "end": "295050"
  },
  {
    "text": "simply the average over the degrees of all the nodes in the network.",
    "start": "295050",
    "end": "298310"
  },
  {
    "text": "And if- if you work this out,",
    "start": "298310",
    "end": "300275"
  },
  {
    "text": "it turns out to be twice number of edges divided by the number of nodes,",
    "start": "300275",
    "end": "304699"
  },
  {
    "text": "uh, in the network.",
    "start": "304700",
    "end": "305840"
  },
  {
    "text": "The reason there is this number 2 is",
    "start": "305840",
    "end": "308000"
  },
  {
    "text": "because when we are computing the degrees of the nodes,",
    "start": "308000",
    "end": "310790"
  },
  {
    "text": "each edge gets counted twice, right?",
    "start": "310790",
    "end": "313260"
  },
  {
    "text": "Each endpoint of the n- of the edge gets",
    "start": "313260",
    "end": "316290"
  },
  {
    "text": "counted once because the edge has two end points,",
    "start": "316290",
    "end": "319550"
  },
  {
    "text": "every edge gets counted twice.",
    "start": "319550",
    "end": "321229"
  },
  {
    "text": "This also means that having a self edge or self-loop, um,",
    "start": "321230",
    "end": "325455"
  },
  {
    "text": "adds a degree of two to the node,",
    "start": "325455",
    "end": "328610"
  },
  {
    "text": "not a degree of one to the node because both end points attach to the same, uh, node.",
    "start": "328610",
    "end": "334764"
  },
  {
    "text": "This is for undirected networks.",
    "start": "334765",
    "end": "337080"
  },
  {
    "text": "In directed networks, we distinguish between, uh,",
    "start": "337080",
    "end": "339930"
  },
  {
    "text": "in-degree and out-degree, meaning",
    "start": "339930",
    "end": "342264"
  },
  {
    "text": "in-degree is the number of edges pointing towards the node.",
    "start": "342265",
    "end": "345030"
  },
  {
    "text": "For example, node C has in-degree 2 and the out-degree, um, 1,",
    "start": "345030",
    "end": "349970"
  },
  {
    "text": "which is the number of edges pointing outside- outward",
    "start": "349970",
    "end": "353629"
  },
  {
    "text": "from the- from the node, uh, c. Um,",
    "start": "353629",
    "end": "358065"
  },
  {
    "text": "another, uh, very popular type of graph structure",
    "start": "358065",
    "end": "361520"
  },
  {
    "text": "that is- that is used a lot and it's very natural in different domains,",
    "start": "361520",
    "end": "365044"
  },
  {
    "text": "it's called a bipartite graph.",
    "start": "365045",
    "end": "367085"
  },
  {
    "text": "And bipartite graph is a graph generally of nodes of two different types,",
    "start": "367085",
    "end": "372694"
  },
  {
    "text": "where nodes only interact with the other type of node,",
    "start": "372695",
    "end": "376580"
  },
  {
    "text": "but not with each other.",
    "start": "376580",
    "end": "377889"
  },
  {
    "text": "So for example, a bipartite graph is a graph where nodes can be split",
    "start": "377890",
    "end": "382550"
  },
  {
    "text": "into two partitions and the- the edges only go from left,",
    "start": "382550",
    "end": "387560"
  },
  {
    "text": "uh, to the right partition and not inside the same partition.",
    "start": "387560",
    "end": "391465"
  },
  {
    "text": "Examples of, uh, bipartite graphs that naturally occur are,",
    "start": "391465",
    "end": "395510"
  },
  {
    "text": "for example, uh, scientific authors linked to the papers they authored,",
    "start": "395510",
    "end": "400135"
  },
  {
    "text": "actors linked to the movies they appeared in,",
    "start": "400135",
    "end": "403310"
  },
  {
    "text": "users linked to the movies they rated or watched,",
    "start": "403310",
    "end": "407845"
  },
  {
    "text": "um, and so on.",
    "start": "407845",
    "end": "409500"
  },
  {
    "text": "So- or for example,",
    "start": "409500",
    "end": "411155"
  },
  {
    "text": "customers buying products, uh,",
    "start": "411155",
    "end": "413750"
  },
  {
    "text": "is also a bipartite graph where we have a set of customers,",
    "start": "413750",
    "end": "417080"
  },
  {
    "text": "a set of products,",
    "start": "417080",
    "end": "418235"
  },
  {
    "text": "and we link, uh, customer to the product, uh, she purchased.",
    "start": "418235",
    "end": "423625"
  },
  {
    "text": "Now that we have defined a bipartite network,",
    "start": "423625",
    "end": "426950"
  },
  {
    "text": "we can also define the notion of a folded or projected network, where we can create,",
    "start": "426950",
    "end": "431750"
  },
  {
    "text": "for example, author collaboration networks,",
    "start": "431750",
    "end": "434360"
  },
  {
    "text": "or the movie co-rating network.",
    "start": "434360",
    "end": "437000"
  },
  {
    "text": "And the idea is as follows: if I have a bipartite graph,",
    "start": "437000",
    "end": "440630"
  },
  {
    "text": "then I can project this bipartite graph to either to the left side or to the right side.",
    "start": "440630",
    "end": "445920"
  },
  {
    "text": "And when- and when I project it, basically,",
    "start": "445920",
    "end": "448400"
  },
  {
    "text": "I only use the nodes from one side in my projection graph,",
    "start": "448400",
    "end": "452565"
  },
  {
    "text": "and the way I connect the nodes is to say,",
    "start": "452565",
    "end": "455510"
  },
  {
    "text": "I will create a connection between a pair of nodes",
    "start": "455510",
    "end": "457775"
  },
  {
    "text": "if they have at least one neighbor in common.",
    "start": "457775",
    "end": "460205"
  },
  {
    "text": "So if these are authors and these are scientific papers,",
    "start": "460205",
    "end": "464014"
  },
  {
    "text": "then basically, it says,",
    "start": "464015",
    "end": "465305"
  },
  {
    "text": "I will create a co- collaboration or a co-authorship graph where I will",
    "start": "465305",
    "end": "469789"
  },
  {
    "text": "connect a pair of authors if they co-authored at least one paper in common.",
    "start": "469790",
    "end": "474380"
  },
  {
    "text": "So for example, 1, 2,",
    "start": "474380",
    "end": "475905"
  },
  {
    "text": "and 3 co-authored this paper,",
    "start": "475905",
    "end": "478130"
  },
  {
    "text": "so they are all connected with each other.",
    "start": "478130",
    "end": "480185"
  },
  {
    "text": "For example, 3 and 4 did not co-author a paper,",
    "start": "480185",
    "end": "484370"
  },
  {
    "text": "so there is no link between them.",
    "start": "484370",
    "end": "486275"
  },
  {
    "text": "But for example, 5 and 2 co-authored a paper,",
    "start": "486275",
    "end": "489755"
  },
  {
    "text": "so there is a link between them because they co-authored this,",
    "start": "489755",
    "end": "492800"
  },
  {
    "text": "uh, this paper here.",
    "start": "492800",
    "end": "494384"
  },
  {
    "text": "And in analogous way,",
    "start": "494385",
    "end": "496130"
  },
  {
    "text": "you can also create a projection of",
    "start": "496130",
    "end": "498380"
  },
  {
    "text": "this bipartite network to the- to the right-hand side,",
    "start": "498380",
    "end": "501650"
  },
  {
    "text": "and then you will- you would obtain a graph like this.",
    "start": "501650",
    "end": "504590"
  },
  {
    "text": "And as I said, bipartite graphs or multipartite graphs,",
    "start": "504590",
    "end": "508610"
  },
  {
    "text": "if you have multiple types of edges,",
    "start": "508610",
    "end": "510560"
  },
  {
    "text": "are very popular, especially,",
    "start": "510560",
    "end": "512270"
  },
  {
    "text": "if you have two different types of nodes,",
    "start": "512270",
    "end": "514240"
  },
  {
    "text": "like users and products, um,",
    "start": "514240",
    "end": "516740"
  },
  {
    "text": "uh, users and movies, uh,",
    "start": "516740",
    "end": "518765"
  },
  {
    "text": "authors and papers, um,",
    "start": "518765",
    "end": "520909"
  },
  {
    "text": "and so on and so forth.",
    "start": "520910",
    "end": "522019"
  },
  {
    "text": "[NOISE] Another interesting point about graphs is how do we represent them,",
    "start": "522020",
    "end": "529010"
  },
  {
    "text": "um, and representing graphs,",
    "start": "529010",
    "end": "531410"
  },
  {
    "text": "uh, is an interesting question.",
    "start": "531410",
    "end": "533254"
  },
  {
    "text": "One way to represent a graph is to represent it with an adjacency matrix.",
    "start": "533255",
    "end": "538385"
  },
  {
    "text": "So essentially, if for a given,",
    "start": "538385",
    "end": "540440"
  },
  {
    "text": "uh, undirected, for example, graph,",
    "start": "540440",
    "end": "542420"
  },
  {
    "text": "in this case on end nodes, in our case,",
    "start": "542420",
    "end": "546290"
  },
  {
    "text": "4, we will create a square matrix,",
    "start": "546290",
    "end": "548863"
  },
  {
    "text": "where this matrix will be binary.",
    "start": "548864",
    "end": "550730"
  },
  {
    "text": "It will o- only take entries of 0 and 1.",
    "start": "550730",
    "end": "553430"
  },
  {
    "text": "And essentially, an entry of matrix ij will be set to 1 if nodes i and j are connected,",
    "start": "553430",
    "end": "560225"
  },
  {
    "text": "and it will be set to 0 if they are not connected.",
    "start": "560225",
    "end": "563209"
  },
  {
    "text": "So for example, 1 and 2 are connected,",
    "start": "563210",
    "end": "565550"
  },
  {
    "text": "so at entry 1, row 1,",
    "start": "565550",
    "end": "567860"
  },
  {
    "text": "column 2, there is a 1.",
    "start": "567860",
    "end": "569390"
  },
  {
    "text": "And also, because 2 is connected to 1 at row 2,",
    "start": "569390",
    "end": "573030"
  },
  {
    "text": "column 1, we also have a 1.",
    "start": "573030",
    "end": "575070"
  },
  {
    "text": "So this means that adjacency matrices of,",
    "start": "575070",
    "end": "578185"
  },
  {
    "text": "uh, undirected graphs are naturally symmetric.",
    "start": "578185",
    "end": "581750"
  },
  {
    "text": "If the graph is directed,",
    "start": "581750",
    "end": "584014"
  },
  {
    "text": "then the matrix won't be symmetric because 2 links to 1.",
    "start": "584014",
    "end": "588425"
  },
  {
    "text": "We have a 1 here,",
    "start": "588425",
    "end": "589654"
  },
  {
    "text": "but 1 does not link back to 2,",
    "start": "589655",
    "end": "592115"
  },
  {
    "text": "so there is a 0.",
    "start": "592115",
    "end": "594430"
  },
  {
    "text": "Um, and in similar way,",
    "start": "594430",
    "end": "597110"
  },
  {
    "text": "we can then think of node degrees, um, uh,",
    "start": "597110",
    "end": "600529"
  },
  {
    "text": "simply as a summation across a given row or",
    "start": "600530",
    "end": "603725"
  },
  {
    "text": "across a given one column of the graph, uh, adjacency matrix.",
    "start": "603725",
    "end": "607670"
  },
  {
    "text": "So rather than kind of thinking here how many edges are adjacent,",
    "start": "607670",
    "end": "611120"
  },
  {
    "text": "we can just go and sum the- basically,",
    "start": "611120",
    "end": "614310"
  },
  {
    "text": "count the number of ones,",
    "start": "614310",
    "end": "615900"
  },
  {
    "text": "number of other nodes that this given node is connected to.",
    "start": "615900",
    "end": "619455"
  },
  {
    "text": "Um, this is for, um, undirected graphs.",
    "start": "619455",
    "end": "622500"
  },
  {
    "text": "For directed graphs, uh,",
    "start": "622500",
    "end": "624090"
  },
  {
    "text": "in and out degrees will be sums over columns and sums over rows, uh,",
    "start": "624090",
    "end": "628740"
  },
  {
    "text": "of the graph adjacency matrix,",
    "start": "628740",
    "end": "632080"
  },
  {
    "text": "as- as I illustrate here, uh,",
    "start": "632080",
    "end": "634680"
  },
  {
    "text": "with this, um, illustration.",
    "start": "634680",
    "end": "638075"
  },
  {
    "text": "One important consequence of a real-world network is that they are extremely sparse.",
    "start": "638075",
    "end": "644715"
  },
  {
    "text": "So this means if you would look at the adjacency matrix,",
    "start": "644715",
    "end": "648450"
  },
  {
    "text": "series on adjacency matrix of a real-world network where basically for every, um, row I,",
    "start": "648450",
    "end": "654255"
  },
  {
    "text": "column J, if there is an edge,",
    "start": "654255",
    "end": "655920"
  },
  {
    "text": "we put a dot and otherwise the cell is empty, uh,",
    "start": "655920",
    "end": "659459"
  },
  {
    "text": "you get these types of super sparse matrices where,",
    "start": "659460",
    "end": "663405"
  },
  {
    "text": "where there are large parts of the matrix that are empty, that are white.",
    "start": "663405",
    "end": "667830"
  },
  {
    "text": "Um, and this has important consequences for properties",
    "start": "667830",
    "end": "671430"
  },
  {
    "text": "of these matrices because they are extremely, uh, sparse.",
    "start": "671430",
    "end": "674970"
  },
  {
    "text": "To show you an example, right?",
    "start": "674970",
    "end": "677250"
  },
  {
    "text": "Uh, if you have a network on n nodes,",
    "start": "677250",
    "end": "680670"
  },
  {
    "text": "nodes, then the maximum degree of a node,",
    "start": "680670",
    "end": "683264"
  },
  {
    "text": "the number of connections a node has is n minus one",
    "start": "683265",
    "end": "686235"
  },
  {
    "text": "because you can connect to every oth- in principle,",
    "start": "686235",
    "end": "689339"
  },
  {
    "text": "connect to every other node in the network.",
    "start": "689340",
    "end": "692145"
  },
  {
    "text": "So for example, if you are a human and you think about human social network, uh,",
    "start": "692145",
    "end": "697935"
  },
  {
    "text": "the maximum degree that you could have,",
    "start": "697935",
    "end": "700200"
  },
  {
    "text": "the maximum number of friends you could have is every other human in the world.",
    "start": "700200",
    "end": "704715"
  },
  {
    "text": "However, nobody has seven billion friends, right?",
    "start": "704715",
    "end": "708435"
  },
  {
    "text": "Our number of friendships is much, much smaller.",
    "start": "708435",
    "end": "711345"
  },
  {
    "text": "So this means that, let's say the human social network is extremely sparse,",
    "start": "711345",
    "end": "715995"
  },
  {
    "text": "and it turns out that a lot of other,",
    "start": "715995",
    "end": "718035"
  },
  {
    "text": "uh, different types of networks,",
    "start": "718035",
    "end": "720300"
  },
  {
    "text": "you know, power-grids, uh, Internet connection,",
    "start": "720300",
    "end": "723480"
  },
  {
    "text": "science collaborations, email graphs,",
    "start": "723480",
    "end": "726269"
  },
  {
    "text": "uh, and so on and so forth are extremely sparse.",
    "start": "726269",
    "end": "729870"
  },
  {
    "text": "They have average degree that these, you know,",
    "start": "729870",
    "end": "731820"
  },
  {
    "text": "around 10 maybe up to, up to 100.",
    "start": "731820",
    "end": "735510"
  },
  {
    "text": "So, uh, what is the consequence?",
    "start": "735510",
    "end": "737985"
  },
  {
    "text": "The consequence is that the underlying adjacency matrices,",
    "start": "737985",
    "end": "741810"
  },
  {
    "text": "um, are extremely sparse.",
    "start": "741810",
    "end": "743745"
  },
  {
    "text": "So we would never represent the matrix as a dense matrix,",
    "start": "743745",
    "end": "747150"
  },
  {
    "text": "but we've always represent it as a sparse matrix.",
    "start": "747150",
    "end": "751125"
  },
  {
    "text": "There are two other ways to represent graphs.",
    "start": "751125",
    "end": "754425"
  },
  {
    "text": "One is simply to represent it as a edge list,",
    "start": "754425",
    "end": "757709"
  },
  {
    "text": "simply as a list of edges.",
    "start": "757710",
    "end": "759660"
  },
  {
    "text": "Uh, this is a representation that is quite popular, um,",
    "start": "759660",
    "end": "762795"
  },
  {
    "text": "in deep learning frameworks because we can simply",
    "start": "762795",
    "end": "765570"
  },
  {
    "text": "represent it as a two-dimensional matrix.",
    "start": "765570",
    "end": "768660"
  },
  {
    "text": "The problem of this representation is that it is very",
    "start": "768660",
    "end": "771389"
  },
  {
    "text": "hard to do any kind of graph manipulation or",
    "start": "771390",
    "end": "774450"
  },
  {
    "text": "any kind of analysis of the graph because even",
    "start": "774450",
    "end": "776940"
  },
  {
    "text": "computing a degree of a given node is non-trivial,",
    "start": "776940",
    "end": "780300"
  },
  {
    "text": "uh, in this case.",
    "start": "780300",
    "end": "782339"
  },
  {
    "text": "A much, uh, better, uh,",
    "start": "782340",
    "end": "784830"
  },
  {
    "text": "representation for a graph analysis and manipulation is the notion of adjacency list.",
    "start": "784830",
    "end": "790110"
  },
  {
    "text": "Um, and adjacency lists are good because they are easier to",
    "start": "790110",
    "end": "793950"
  },
  {
    "text": "work with if for large and sparse networks.",
    "start": "793950",
    "end": "797610"
  },
  {
    "text": "And adjacency list simply allows us to",
    "start": "797610",
    "end": "799800"
  },
  {
    "text": "quickly retrieve al- all the neighbors of a given node.",
    "start": "799800",
    "end": "802589"
  },
  {
    "text": "So you can think of it, that for every node,",
    "start": "802590",
    "end": "804810"
  },
  {
    "text": "you simply store a list of its neighbors.",
    "start": "804810",
    "end": "807645"
  },
  {
    "text": "So a list of nodes that the,",
    "start": "807645",
    "end": "810075"
  },
  {
    "text": "that the- a given node is connected to.",
    "start": "810075",
    "end": "812325"
  },
  {
    "text": "If the graph is undirected,",
    "start": "812325",
    "end": "814065"
  },
  {
    "text": "you could store, uh, neighbors.",
    "start": "814065",
    "end": "816705"
  },
  {
    "text": "If the graph is connected,",
    "start": "816705",
    "end": "817950"
  },
  {
    "text": "you could store both the outgoing neighbors,",
    "start": "817950",
    "end": "820350"
  },
  {
    "text": "as well as, uh, incoming neighbors based on the direction of the edge.",
    "start": "820350",
    "end": "825779"
  },
  {
    "text": "And the last important thing I want to mention here is that of course,",
    "start": "825780",
    "end": "830175"
  },
  {
    "text": "these graph can- can have attached attributes to them.",
    "start": "830175",
    "end": "834540"
  },
  {
    "text": "So nodes address, as well as",
    "start": "834540",
    "end": "837089"
  },
  {
    "text": "entire graphs can have attributes or properties attached to them.",
    "start": "837090",
    "end": "841635"
  },
  {
    "text": "So for example, an edge can have a weight.",
    "start": "841635",
    "end": "844245"
  },
  {
    "text": "How strong is the relationship?",
    "start": "844245",
    "end": "846105"
  },
  {
    "text": "Perhaps it can have my ranking.",
    "start": "846105",
    "end": "847875"
  },
  {
    "text": "It can have a type.",
    "start": "847875",
    "end": "849150"
  },
  {
    "text": "It can have a sign whether this is a friend-based relationship or whether it's animosity,",
    "start": "849150",
    "end": "854550"
  },
  {
    "text": "a full distrust, let say based relationships.",
    "start": "854550",
    "end": "857805"
  },
  {
    "text": "Um, and edges can have di- many different types of properties,",
    "start": "857805",
    "end": "861810"
  },
  {
    "text": "like if it's a phone call, it's,",
    "start": "861810",
    "end": "863310"
  },
  {
    "text": "it's duration, for example.",
    "start": "863310",
    "end": "865230"
  },
  {
    "text": "Nodes can have properties in- if these are people,",
    "start": "865230",
    "end": "867899"
  },
  {
    "text": "it could be age, gender,",
    "start": "867900",
    "end": "869820"
  },
  {
    "text": "interests, location, and so on.",
    "start": "869820",
    "end": "872520"
  },
  {
    "text": "If a node is a, is a chemical,",
    "start": "872520",
    "end": "874770"
  },
  {
    "text": "perhaps it is chemical mass,",
    "start": "874770",
    "end": "877005"
  },
  {
    "text": "chemical formula and other properties of the- of",
    "start": "877005",
    "end": "880560"
  },
  {
    "text": "the chemical could be represented as attributes of the node.",
    "start": "880560",
    "end": "884400"
  },
  {
    "text": "And of course, also entire graphs can have features or, uh,",
    "start": "884400",
    "end": "888705"
  },
  {
    "text": "attributes based on, uh,",
    "start": "888705",
    "end": "891060"
  },
  {
    "text": "the properties of the underlying object that the graphical structure is modeling.",
    "start": "891060",
    "end": "895440"
  },
  {
    "text": "So what this means is that the graphs you will be considering",
    "start": "895440",
    "end": "898575"
  },
  {
    "text": "are not just the topology nodes and edges,",
    "start": "898575",
    "end": "901965"
  },
  {
    "text": "but it is also the attributes,",
    "start": "901965",
    "end": "905070"
  },
  {
    "text": "uh, attached to them.",
    "start": "905070",
    "end": "907450"
  },
  {
    "text": "Um, as I mentioned,",
    "start": "907460",
    "end": "909735"
  },
  {
    "text": "some of these properties can actually be",
    "start": "909735",
    "end": "912480"
  },
  {
    "text": "represented directly in the adjacency matrix as well.",
    "start": "912480",
    "end": "915480"
  },
  {
    "text": "So for example, properties of edges like",
    "start": "915480",
    "end": "918089"
  },
  {
    "text": "weights can simply be represented in the adjacency matrix, right?",
    "start": "918090",
    "end": "921750"
  },
  {
    "text": "Rather than having adjacency matrix to be binary,",
    "start": "921750",
    "end": "924355"
  },
  {
    "text": "we can now have adjacency matrix to have real values where",
    "start": "924355",
    "end": "928050"
  },
  {
    "text": "the strength of the connection corresponds simply to the value,",
    "start": "928050",
    "end": "932100"
  },
  {
    "text": "uh, in that entry.",
    "start": "932100",
    "end": "933449"
  },
  {
    "text": "So two and four are more strongly linked,",
    "start": "933450",
    "end": "936150"
  },
  {
    "text": "so the value is four,",
    "start": "936150",
    "end": "937545"
  },
  {
    "text": "while for example, one and three are linked with",
    "start": "937545",
    "end": "940110"
  },
  {
    "text": "a weak connection that has weight only 0.5.",
    "start": "940110",
    "end": "943845"
  },
  {
    "text": "Um, as a- um,",
    "start": "943845",
    "end": "946439"
  },
  {
    "text": "another important thing is that when we create the graphs is that we also",
    "start": "946440",
    "end": "949560"
  },
  {
    "text": "can think about nodes having self-loops.",
    "start": "949560",
    "end": "953070"
  },
  {
    "text": "Um, for example, here,",
    "start": "953070",
    "end": "954630"
  },
  {
    "text": "node four has a self-loop, uh,",
    "start": "954630",
    "end": "957150"
  },
  {
    "text": "and now the degree of node four equals to three.",
    "start": "957150",
    "end": "960660"
  },
  {
    "text": "Um, self-loops are simply correspond to",
    "start": "960660",
    "end": "963629"
  },
  {
    "text": "the entries on the diagonal of the adjacency matrix.",
    "start": "963630",
    "end": "966900"
  },
  {
    "text": "And in some cases,",
    "start": "966900",
    "end": "968580"
  },
  {
    "text": "we may actually create a multi-graph where we",
    "start": "968580",
    "end": "971550"
  },
  {
    "text": "allow multiple edges between a pair of nodes.",
    "start": "971550",
    "end": "975045"
  },
  {
    "text": "Sometimes we can, we can think of a multi-graph as",
    "start": "975045",
    "end": "978209"
  },
  {
    "text": "a weighted graph where the entry on the matrix counts the number of edges,",
    "start": "978210",
    "end": "982350"
  },
  {
    "text": "but sometimes you want to represent every edge individually,",
    "start": "982350",
    "end": "985769"
  },
  {
    "text": "separately because these edges might have different properties,",
    "start": "985770",
    "end": "989955"
  },
  {
    "text": "um, and different, um, attributes.",
    "start": "989955",
    "end": "992505"
  },
  {
    "text": "Both, um, the self-loops,",
    "start": "992505",
    "end": "995025"
  },
  {
    "text": "as well as multi-graphs occur quite frequently in nature.",
    "start": "995025",
    "end": "999570"
  },
  {
    "text": "Uh, for example, if you think about phonecalls transactions,",
    "start": "999570",
    "end": "1003095"
  },
  {
    "text": "there can be multiple transactions between a pair of nodes",
    "start": "1003095",
    "end": "1005930"
  },
  {
    "text": "and we can accurately represent this as a multi-graph.",
    "start": "1005930",
    "end": "1009305"
  },
  {
    "text": "Um, as we have these graphs, I,",
    "start": "1009305",
    "end": "1012529"
  },
  {
    "text": "I also want to talk about the notion of connectivity,",
    "start": "1012530",
    "end": "1016175"
  },
  {
    "text": "in a sense, whether the graph is connected or disconnected.",
    "start": "1016175",
    "end": "1019865"
  },
  {
    "text": "And graph is connected if any pair of nodes in, uh, in this, uh,",
    "start": "1019865",
    "end": "1024485"
  },
  {
    "text": "graph can be, can be connected via a path along the edges of the graph.",
    "start": "1024485",
    "end": "1030079"
  },
  {
    "text": "So for example, this particular graph is",
    "start": "1030080",
    "end": "1032449"
  },
  {
    "text": "connected while this other graph is not connected,",
    "start": "1032450",
    "end": "1035375"
  },
  {
    "text": "it has three connected components.",
    "start": "1035375",
    "end": "1037805"
  },
  {
    "text": "This is one connected component, second connected component,",
    "start": "1037805",
    "end": "1041000"
  },
  {
    "text": "then a third connected component,",
    "start": "1041000",
    "end": "1043084"
  },
  {
    "text": "the node h, which is an isolated node.",
    "start": "1043085",
    "end": "1046564"
  },
  {
    "text": "This is the notion of connectivity for undirected graphs, uh,",
    "start": "1046565",
    "end": "1051004"
  },
  {
    "text": "and what is interesting in this notion is,",
    "start": "1051005",
    "end": "1054020"
  },
  {
    "text": "that when we, um,",
    "start": "1054020",
    "end": "1055490"
  },
  {
    "text": "have graphs that are,",
    "start": "1055490",
    "end": "1057095"
  },
  {
    "text": "for example, disconnect it and look at what is",
    "start": "1057095",
    "end": "1059600"
  },
  {
    "text": "the structure of the underlying adjacency matrix,",
    "start": "1059600",
    "end": "1062510"
  },
  {
    "text": "we will have these block diagonal structure, where, basically,",
    "start": "1062510",
    "end": "1065990"
  },
  {
    "text": "if this is a graph that is composed of two components, then we will have,",
    "start": "1065990",
    "end": "1070520"
  },
  {
    "text": "um, um, block diagonal structure where the edges only go between the,",
    "start": "1070520",
    "end": "1075770"
  },
  {
    "text": "um, nodes inside the same, um, connected component,",
    "start": "1075770",
    "end": "1079520"
  },
  {
    "text": "and there is no edges in the off-diagonal part,",
    "start": "1079520",
    "end": "1082250"
  },
  {
    "text": "which would mean that there is no edge between,",
    "start": "1082250",
    "end": "1084950"
  },
  {
    "text": "uh, red and blue,",
    "start": "1084950",
    "end": "1086644"
  },
  {
    "text": "uh, part of the graph.",
    "start": "1086645",
    "end": "1088475"
  },
  {
    "text": "The notion of connectivity also generalizes to directed graphs.",
    "start": "1088475",
    "end": "1093860"
  },
  {
    "text": "Here, we are talking about two types of connectivity,",
    "start": "1093860",
    "end": "1096815"
  },
  {
    "text": "strong and weak connectivity.",
    "start": "1096815",
    "end": "1099184"
  },
  {
    "text": "A weakly connected directed graph is simply a graph that is connected,",
    "start": "1099185",
    "end": "1103519"
  },
  {
    "text": "uh, in- if we ignore the directions of the edges.",
    "start": "1103519",
    "end": "1107390"
  },
  {
    "text": "A strongly connected graph, um,",
    "start": "1107390",
    "end": "1110645"
  },
  {
    "text": "or a graph is strongly connected if for every pair of",
    "start": "1110645",
    "end": "1113930"
  },
  {
    "text": "nodes there exists a directed path between them.",
    "start": "1113930",
    "end": "1117740"
  },
  {
    "text": "So, um, this means that there has to exist a directed path from, for example,",
    "start": "1117740",
    "end": "1123290"
  },
  {
    "text": "from node A to node B,",
    "start": "1123290",
    "end": "1125180"
  },
  {
    "text": "as well as from node B back to, uh,",
    "start": "1125180",
    "end": "1128180"
  },
  {
    "text": "node A if the graph is strongly connected.",
    "start": "1128180",
    "end": "1131990"
  },
  {
    "text": "What this also means is that we can talk about notion of",
    "start": "1131990",
    "end": "1136400"
  },
  {
    "text": "strongly connected components where strongly connected components are,",
    "start": "1136400",
    "end": "1141005"
  },
  {
    "text": "uh, sets of nodes in the graph, uh,",
    "start": "1141005",
    "end": "1143825"
  },
  {
    "text": "such that every node, uh,",
    "start": "1143825",
    "end": "1145669"
  },
  {
    "text": "in that set can visit each other via the- via a directed path.",
    "start": "1145670",
    "end": "1149870"
  },
  {
    "text": "So for example, in this case here,",
    "start": "1149870",
    "end": "1152360"
  },
  {
    "text": "nodes, uh, A, B,",
    "start": "1152360",
    "end": "1154730"
  },
  {
    "text": "and C form a strongly connected component because they are on a cycle.",
    "start": "1154730",
    "end": "1160040"
  },
  {
    "text": "So we ca- any- from any node we can visit, uh, any other node.",
    "start": "1160040",
    "end": "1164045"
  },
  {
    "text": "Uh, the example here shows, uh,",
    "start": "1164045",
    "end": "1166445"
  },
  {
    "text": "directed graph with two strongly connected component,",
    "start": "1166445",
    "end": "1169580"
  },
  {
    "text": "again, two cycles on, um three nodes.",
    "start": "1169580",
    "end": "1173855"
  },
  {
    "text": "So this concludes the discussion of the- er- the graph representations,",
    "start": "1173855",
    "end": "1180710"
  },
  {
    "text": "um, that- and ways how we can create graphs from real data.",
    "start": "1180710",
    "end": "1184820"
  },
  {
    "text": "Um, in this lecture,",
    "start": "1184820",
    "end": "1186529"
  },
  {
    "text": "we first talked about machine-learning with graphs and various applications in use cases.",
    "start": "1186530",
    "end": "1192155"
  },
  {
    "text": "We talked about node level, edge level,",
    "start": "1192155",
    "end": "1194390"
  },
  {
    "text": "and graph level machine-learning prediction tasks.",
    "start": "1194390",
    "end": "1197360"
  },
  {
    "text": "And then we discussed the choice of a graph representation in terms of directed,",
    "start": "1197360",
    "end": "1201995"
  },
  {
    "text": "undirected graphs, bipartite graphs,",
    "start": "1201995",
    "end": "1204755"
  },
  {
    "text": "weighted, uh, unweighted graphs,",
    "start": "1204755",
    "end": "1206945"
  },
  {
    "text": "adjacency matrices, as well as some definitions from graph theory,",
    "start": "1206945",
    "end": "1211294"
  },
  {
    "text": "like the connectivity, um, of graphs,",
    "start": "1211295",
    "end": "1214535"
  },
  {
    "text": "weak connectivity, strong connectivity,",
    "start": "1214535",
    "end": "1216649"
  },
  {
    "text": "as well as the notion of node degree.",
    "start": "1216649",
    "end": "1219480"
  },
  {
    "text": "Um, thank you very much.",
    "start": "1219480",
    "end": "1222020"
  }
]