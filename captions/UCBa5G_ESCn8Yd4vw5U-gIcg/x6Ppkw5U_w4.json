[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "so my name is Pat Helen I work at Salesforce and this is not about",
    "start": "10559",
    "end": "15930"
  },
  {
    "text": "Salesforce stuff I've been doing distributed systems transactions databases implementing them scalable",
    "start": "15930",
    "end": "22890"
  },
  {
    "text": "multiprocessor with Dennis Allison back twenty seven years ago I was working with him but I've been doing this for 40",
    "start": "22890",
    "end": "29220"
  },
  {
    "text": "years and so as I said I'm currently and I was I've done work at tandem computers",
    "start": "29220",
    "end": "34890"
  },
  {
    "text": "was at Microsoft for many years at Amazon for a while and now at Salesforce and this particular talk is just one of",
    "start": "34890",
    "end": "42239"
  },
  {
    "text": "the things that I think about right and I called it mind your state for your state of mind",
    "start": "42239",
    "end": "47309"
  },
  {
    "text": "basically the evolution evolutions of computation and storage lead to interesting challenges and again these",
    "start": "47309",
    "end": "54390"
  },
  {
    "text": "are just my personal observations I have a whole collection of papers that I write about just a random philosophical",
    "start": "54390",
    "end": "61319"
  },
  {
    "text": "junk I think of with respect to distributed systems I actually think in the paper for this I described it as a",
    "start": "61319",
    "end": "66990"
  },
  {
    "text": "ruminations which is this wonderful concept of you know thinking this thing over and over again so this is a paper",
    "start": "66990",
    "end": "75090"
  },
  {
    "text": "it was published in just a month ago in communications of the ACM and so you're",
    "start": "75090",
    "end": "81840"
  },
  {
    "text": "free to go look it up and it's online and it's in hardcopy so I'm gonna cover a bunch of things I'm",
    "start": "81840",
    "end": "89250"
  },
  {
    "start": "86000",
    "end": "518000"
  },
  {
    "text": "gonna do an introduction I'm going to talk about what's this state stuff we always talk about state we talk about",
    "start": "89250",
    "end": "95039"
  },
  {
    "text": "stateless and no one that I know actually has a cogent explanation of what that is and let's see if you think",
    "start": "95039",
    "end": "101579"
  },
  {
    "text": "this is a way of thinking about it that makes sense we're gonna talk about the evolution of durable state semantics",
    "start": "101579",
    "end": "107899"
  },
  {
    "text": "we'll talk about session state semantics and transactions something near and dear",
    "start": "107899",
    "end": "113219"
  },
  {
    "text": "to my heart because I worked on it for a number of years identity immutability and scale some example application",
    "start": "113219",
    "end": "121649"
  },
  {
    "text": "patterns and then we're gonna have a conclusion so I'm gonna start back and",
    "start": "121649",
    "end": "126719"
  },
  {
    "text": "talk about the way computing was when I had hair I honestly had hair at some",
    "start": "126719",
    "end": "132780"
  },
  {
    "text": "point in time before I ended up dying it transparent and so I want to look back",
    "start": "132780",
    "end": "138270"
  },
  {
    "text": "storage has evolved when I was starting out in this the only storage you had was",
    "start": "138270",
    "end": "143580"
  },
  {
    "text": "directly attached to the one and only one computer you were using okay there eventually came",
    "start": "143580",
    "end": "148950"
  },
  {
    "text": "along these sheared appliances called a SAN or a storage area network which offered some high-performance stuff and",
    "start": "148950",
    "end": "155490"
  },
  {
    "text": "the ability for multiple computers to whack on some shared storage storage",
    "start": "155490",
    "end": "161100"
  },
  {
    "text": "clusters contained in a network which was sort of like a sand but a little more loose in the way it was built and",
    "start": "161100",
    "end": "166290"
  },
  {
    "text": "even rest API is fascinate me the whole representational state transformation",
    "start": "166290",
    "end": "172170"
  },
  {
    "text": "nature of using HTTP in order to make something look like storage even if it's",
    "start": "172170",
    "end": "177630"
  },
  {
    "text": "computation and so there's this really interesting thing about REST API z-- over microservices computing has evolved",
    "start": "177630",
    "end": "185600"
  },
  {
    "text": "back in the day there was a single process well maybe two or three in the same computer if you got lucky right and",
    "start": "185600",
    "end": "191910"
  },
  {
    "text": "that was called a mainframe region at first if you were you know familiar with IBM stuff and then you got multiple",
    "start": "191910",
    "end": "198360"
  },
  {
    "text": "processes in the same server I remember how cool it was to start doing our pcs across all a little tiny",
    "start": "198360",
    "end": "204360"
  },
  {
    "text": "cluster in the same room that was like a miracle to be able to do that kind of work then services and service-oriented",
    "start": "204360",
    "end": "212100"
  },
  {
    "text": "architecture and I did some presentations and talks I never quite turned it into a paper of what I call a",
    "start": "212100",
    "end": "218459"
  },
  {
    "text": "fiefdom which was an independent today we would call it a service and how you would talk across that and that whole",
    "start": "218459",
    "end": "223830"
  },
  {
    "text": "service-oriented architecture and how did you scale with that is a very interesting thing but that broke apart the transaction says that we were",
    "start": "223830",
    "end": "230940"
  },
  {
    "text": "familiar with having we'll talk about that now we talked about micro services and those micro services have little or",
    "start": "230940",
    "end": "237390"
  },
  {
    "text": "no state they come they go they're flighty but they offer some real advantages now Computing's use of",
    "start": "237390",
    "end": "244830"
  },
  {
    "text": "storage has evolved we used to have direct file i/o and we used this thing I",
    "start": "244830",
    "end": "250410"
  },
  {
    "text": "call careful replacement for recoverability we will dig into careful replacement and gory details so don't",
    "start": "250410",
    "end": "256049"
  },
  {
    "text": "get too stressed if it doesn't make sense yet but the careful replacement",
    "start": "256049",
    "end": "261180"
  },
  {
    "text": "variations are number one because what you're writing might trash the previous",
    "start": "261180",
    "end": "266700"
  },
  {
    "text": "value you should put it somewhere else before you write it where you're going to eventually have it land that's the",
    "start": "266700",
    "end": "272490"
  },
  {
    "text": "first form of careful replacement and then the second form is that the client can interrupt a sequence",
    "start": "272490",
    "end": "277950"
  },
  {
    "text": "of Rights so plan carefully to have a partial sequence by the time you try to",
    "start": "277950",
    "end": "283350"
  },
  {
    "text": "do recovery those are the two things we're gonna talk about thematically now",
    "start": "283350",
    "end": "288630"
  },
  {
    "text": "transactions came along and I've been working on transactions you know since I",
    "start": "288630",
    "end": "293670"
  },
  {
    "text": "was working on databases but I owned and shipped the stuff for tandems non-stop transaction engine in I was working on",
    "start": "293670",
    "end": "301260"
  },
  {
    "text": "that from 82 through 91 and how do you build logging in recovery and high",
    "start": "301260",
    "end": "306690"
  },
  {
    "text": "performance and making it work but transactions were implemented careful replacement for the app they dealt with",
    "start": "306690",
    "end": "312450"
  },
  {
    "text": "a bunch of junk underneath and the hardware in the system itself so the app didn't have to and made it easy for it",
    "start": "312450",
    "end": "321710"
  },
  {
    "text": "well the comment is I should explain who tandem was so they were started in 74",
    "start": "322760",
    "end": "328560"
  },
  {
    "text": "and kind of eventually petered out over the late 90s but I left in 1990 and you",
    "start": "328560",
    "end": "335850"
  },
  {
    "text": "would get to 216 computers in one big system and the actual measured installed",
    "start": "335850",
    "end": "344160"
  },
  {
    "text": "base over over 4,000 customers which you can read about in Jim Gray's paper why computers fail the measured mean time",
    "start": "344160",
    "end": "351930"
  },
  {
    "text": "between failure of the system was 11 years and there were a number of sites where nobody worked at the company",
    "start": "351930",
    "end": "358170"
  },
  {
    "text": "anymore since the system had gone down because it was designed to handle one of",
    "start": "358170",
    "end": "363390"
  },
  {
    "text": "the computers failing and the rest of them continuing on so I ended up building the logging and recovery part",
    "start": "363390",
    "end": "370530"
  },
  {
    "text": "of the database that made the entire system go so here you are with and it was running federal funds transfers and",
    "start": "370530",
    "end": "377220"
  },
  {
    "text": "stock exchanges and hospitals and all the things that cared a lot about high",
    "start": "377220",
    "end": "382770"
  },
  {
    "text": "reliability would use the tandem system and it was transactional enterprise-grade and highly available",
    "start": "382770",
    "end": "389280"
  },
  {
    "text": "with what we were building and a lot of fun I learned a lot there over a decade",
    "start": "389280",
    "end": "394290"
  },
  {
    "text": "almost a decade the u.s. was not",
    "start": "394290",
    "end": "399330"
  },
  {
    "text": "anything familiar it was completely separate the application programming interface was not and I believe over",
    "start": "399330",
    "end": "405660"
  },
  {
    "text": "time it stopped being an important player in the industry because in the",
    "start": "405660",
    "end": "410790"
  },
  {
    "text": "late 70s if you by that piece of hardware you could afford 50 people with white lab coats to program it because the software was far",
    "start": "410790",
    "end": "418200"
  },
  {
    "text": "cheaper than the big expensive systems of the day right and so you could do your customized app and there were some",
    "start": "418200",
    "end": "424260"
  },
  {
    "text": "ISPs that did the apps but they weren't enough to keep the business going so as the turnkey software packages came",
    "start": "424260",
    "end": "431370"
  },
  {
    "text": "they didn't run on it and that's how come you don't hear so much about it anymore did that make sense okay but it was",
    "start": "431370",
    "end": "437700"
  },
  {
    "text": "actually not that hard to program to so it was just kind of a unfortunate catch-22 that happened was when I was",
    "start": "437700",
    "end": "446040"
  },
  {
    "text": "talking to Computer History Museum about trying to preserve some of them they had no concept content was why it was",
    "start": "446040",
    "end": "453030"
  },
  {
    "text": "significant it he it kind of happens that way yeah it was it was the here you",
    "start": "453030",
    "end": "459419"
  },
  {
    "text": "want your bank account to run off oh it was designed for that and it succeeded in that and I'm very proud of the work",
    "start": "459419",
    "end": "464880"
  },
  {
    "text": "and college at the same time the",
    "start": "464880",
    "end": "470790"
  },
  {
    "text": "California Department of Motor Vehicles got a 65 million dollar tandem I never",
    "start": "470790",
    "end": "476280"
  },
  {
    "text": "never got it to work they went they never got remember the fight I knew so let me keep going yeah if you don't go",
    "start": "476280",
    "end": "482490"
  },
  {
    "text": "ok ok so implement a careful replace transactions implement that careful",
    "start": "482490",
    "end": "489150"
  },
  {
    "text": "replacement and the sands implemented careful replacement but stateful two-tier and interior transactions and",
    "start": "489150",
    "end": "495570"
  },
  {
    "text": "doing that came along now and you ended up with key value storage typically atomic key value so we see this today",
    "start": "495570",
    "end": "502080"
  },
  {
    "text": "you can do one keys value update in a transaction but not many of them because of the way they're distributed and",
    "start": "502080",
    "end": "507720"
  },
  {
    "text": "finally rest put invokes the app code of that resource who knows what that does",
    "start": "507720",
    "end": "512880"
  },
  {
    "text": "to the affected state when you call with an e put with an HTTP with the rest stuff so there's challenges in modern",
    "start": "512880",
    "end": "520830"
  },
  {
    "start": "518000",
    "end": "699000"
  },
  {
    "text": "micro service base apps today the micro services power many scalable apps pools",
    "start": "520830",
    "end": "526140"
  },
  {
    "text": "of equivalent services incoming requests are load balanced this is a direct image",
    "start": "526140",
    "end": "531630"
  },
  {
    "text": "off the PDF for a 2007 paper from Amazon called dynamo which I helped work on",
    "start": "531630",
    "end": "537900"
  },
  {
    "text": "dynamo back in the day and so was part of the initial design but what you see",
    "start": "537900",
    "end": "543450"
  },
  {
    "text": "is you see the the requests coming in and they're they're load-balanced out and you do page",
    "start": "543450",
    "end": "548760"
  },
  {
    "text": "rendering and then it comes back and then they're load-balanced out they do aggregator services and they come back and then there's a request routing and",
    "start": "548760",
    "end": "554970"
  },
  {
    "text": "their load balanced out and behind it you see in this picture four different stores working for to support four",
    "start": "554970",
    "end": "561240"
  },
  {
    "text": "different service pools okay and so this is the way Amazon was building in this way it's still building it okay in the",
    "start": "561240",
    "end": "567870"
  },
  {
    "text": "front-end part of what you see in eread ecommerce retail is typically done this way with many different kinds of stores",
    "start": "567870",
    "end": "573690"
  },
  {
    "text": "to support many different kinds of pools of micro services micro services support",
    "start": "573690",
    "end": "579240"
  },
  {
    "text": "many operational needs they support health media to deploy with Canaries rolling upgrade sensitive to fault zones",
    "start": "579240",
    "end": "585570"
  },
  {
    "text": "and fault tolerance so let's talk about that for a second the term canary comes back to someone going into a coal mine",
    "start": "585570",
    "end": "592769"
  },
  {
    "text": "and taking a little yellow bird with them because if there was methane gas and the bird fell over you got the heck out of the key out of",
    "start": "592769",
    "end": "598769"
  },
  {
    "text": "the mine and you lived because you brought that early warning system when you roll out across a hundred different",
    "start": "598769",
    "end": "604889"
  },
  {
    "text": "servers so you have a hundred different servers that are working on the same stuff and you roll it out that's cool",
    "start": "604889",
    "end": "611190"
  },
  {
    "text": "what you want to do is roll it out to maybe five of them and then see what the hell happens right and then if that works then you start rolling keep",
    "start": "611190",
    "end": "617040"
  },
  {
    "text": "rolling about that's called Canaries and doing automated Canaries in health media to deploy is a way of a formal way of",
    "start": "617040",
    "end": "623459"
  },
  {
    "text": "saying I'm gonna do it as long as everything's healthy I'm gonna roll out the new version of this thing as long as it's healthy all of this is facilitated",
    "start": "623459",
    "end": "630180"
  },
  {
    "text": "by microservices rolling upgrade I'm gonna roll do my rolling upgrade but what I don't want to do is I don't want",
    "start": "630180",
    "end": "635910"
  },
  {
    "text": "to bring down too many things to kill a fault zone or I'm going to count on doing the ones within a fault zone not a cross fault zone so I can't handle the",
    "start": "635910",
    "end": "643079"
  },
  {
    "text": "failure and then fault tolerance if things are dying you always things can die while you're rolling out durable",
    "start": "643079",
    "end": "650160"
  },
  {
    "text": "state is usually not kept in micro services you go elsewhere to get to that durable state in this picture here you",
    "start": "650160",
    "end": "656699"
  },
  {
    "text": "see these things right here which are the services going down to get the dynamo instances or going down to get",
    "start": "656699",
    "end": "661980"
  },
  {
    "text": "Amazon s3 or going down to get storage in an ACK in a back-end database and that's the way you do it you don't put",
    "start": "661980",
    "end": "668190"
  },
  {
    "text": "the state in the micro service because they're flighty and they die right you can't effectively update that state",
    "start": "668190",
    "end": "674730"
  },
  {
    "text": "across it if I have a hundred micro services I can't get all of them to know the new state at comically it's a real interesting",
    "start": "674730",
    "end": "681150"
  },
  {
    "text": "challenge you have to so you push it elsewhere and then versions are cached now you have to talk about staleness of",
    "start": "681150",
    "end": "687150"
  },
  {
    "text": "cached versions sometimes read through requests to durable state access information that's not in the micro",
    "start": "687150",
    "end": "692730"
  },
  {
    "text": "services okay so we're just getting started this is that was the introduction let's",
    "start": "692730",
    "end": "698130"
  },
  {
    "text": "talk about what this state stuff is durable state and session state right so",
    "start": "698130",
    "end": "704040"
  },
  {
    "start": "699000",
    "end": "1160000"
  },
  {
    "text": "in durable state what do you have is stuff that gets remembered across requests and persists across failures so",
    "start": "704040",
    "end": "711510"
  },
  {
    "text": "that's durable state it persists if something fails what is it database data file system files he",
    "start": "711510",
    "end": "717990"
  },
  {
    "text": "values caches there's a lot of things you can put it in their cache is kind of iffy about whether it meets that persistence criteria how is it updated",
    "start": "717990",
    "end": "726000"
  },
  {
    "text": "single updates or transactions or distributed transactions or careful replacement which we'll talk more about",
    "start": "726000",
    "end": "731490"
  },
  {
    "text": "do you use messaging semantics to get asynchronous update of stuff can you read your rights consistently so this is",
    "start": "731490",
    "end": "738690"
  },
  {
    "text": "gonna be a big deal I write something and I go to read do I get it back or do I get the old version back okay we'll",
    "start": "738690",
    "end": "745530"
  },
  {
    "text": "talk about that weekly consistent stores and and/or caching each make read your",
    "start": "745530",
    "end": "751080"
  },
  {
    "text": "rights a challenge session state it session state by definition isn't gonna",
    "start": "751080",
    "end": "756839"
  },
  {
    "text": "survive a failure right but it's the stuff that gets remembered across requests in a session but not across",
    "start": "756839",
    "end": "763770"
  },
  {
    "text": "failures so session state exists within the endpoints associated with a session multiple operation transactions are a",
    "start": "763770",
    "end": "771120"
  },
  {
    "text": "form of session state what do I mean I pay on the left says begin transaction he talks to app B may be the database",
    "start": "771120",
    "end": "776790"
  },
  {
    "text": "across a session chatters five times that says commit the transaction okay that's an example of multi operation",
    "start": "776790",
    "end": "783240"
  },
  {
    "text": "transactions session state is hard to do when the session smears across the",
    "start": "783240",
    "end": "789210"
  },
  {
    "text": "services in that micro-service thing I can do a request and I go to server 3 I",
    "start": "789210",
    "end": "794610"
  },
  {
    "text": "could do another request and the load balancer sends me to server 7 it's hard to have session state when that occurs",
    "start": "794610",
    "end": "801500"
  },
  {
    "text": "typical state of the art with load balancers is you have affinities ation which means I'll usually send you back",
    "start": "801500",
    "end": "807720"
  },
  {
    "text": "to the same micro service instance I did before but if I don't feel like it good",
    "start": "807720",
    "end": "812910"
  },
  {
    "text": "luck I'm going somewhere else so it's hard to do session state when you do that data",
    "start": "812910",
    "end": "820260"
  },
  {
    "text": "on the inside versus data on the outside redux okay so I wrote this paper in 2005",
    "start": "820260",
    "end": "825900"
  },
  {
    "text": "which says when you unlock stuff it's different so data on the inside is",
    "start": "825900",
    "end": "831660"
  },
  {
    "text": "inside the database data on the outside is not inside the database well what's different about it inside you get",
    "start": "831660",
    "end": "837839"
  },
  {
    "text": "classic relational data it's about values it's about values within cells right it's about holding that still this",
    "start": "837839",
    "end": "845040"
  },
  {
    "text": "is so much a belief of mine that that when I was asked to name I have a column in communications of the ACM about that",
    "start": "845040",
    "end": "851550"
  },
  {
    "text": "I can write there actually wish I would write another couple this year because I haven't done as many and so the the",
    "start": "851550",
    "end": "858570"
  },
  {
    "text": "column I picked was called escaping the singularity it's not your grandmother's database anymore why because to do this",
    "start": "858570",
    "end": "866520"
  },
  {
    "text": "relational junk you have to bring everything to what looks like a single place and you have to use transactions",
    "start": "866520",
    "end": "873420"
  },
  {
    "text": "to make it look like a single time and when everything is still and everything",
    "start": "873420",
    "end": "878550"
  },
  {
    "text": "is here then relational algebra works okay so that isn't true so much anymore",
    "start": "878550",
    "end": "884510"
  },
  {
    "text": "so you get two data on the outside where you have messages and files and events and key value pairs and unlock data not",
    "start": "884510",
    "end": "891420"
  },
  {
    "text": "stored in a classic database and it my observation is whenever I push it out of",
    "start": "891420",
    "end": "896700"
  },
  {
    "text": "the database I have to put identity on it now maybe I've got an optional versioning that's cool but it's got an",
    "start": "896700",
    "end": "903060"
  },
  {
    "text": "identity and that identity is what how I make things work and I actually have a paper in edit to be coming out soon",
    "start": "903060",
    "end": "908880"
  },
  {
    "text": "called identity by any other name which talks about all the ways in which identity permeates our environment",
    "start": "908880",
    "end": "915650"
  },
  {
    "text": "outside outside data is immutable each",
    "start": "915650",
    "end": "921660"
  },
  {
    "text": "file message key has a unique identifier it may be a URL or a key or something else it may be implicit on a session it",
    "start": "921660",
    "end": "929640"
  },
  {
    "text": "may be implicit within the environment but it has some identity and then within that you have immutable data potentially",
    "start": "929640",
    "end": "936839"
  },
  {
    "text": "versions but each of those is a sequence of different immutable data items and I have another",
    "start": "936839",
    "end": "942510"
  },
  {
    "text": "paper called immutability changes everything from a few years back so let's talk about the evolution of",
    "start": "942510",
    "end": "948080"
  },
  {
    "text": "durable state semantics so care for replacement of disk blocks back when I",
    "start": "948080",
    "end": "955070"
  },
  {
    "text": "was a kid you had to worry about the following thing if you went to write a disk block that disk block had the old",
    "start": "955070",
    "end": "962810"
  },
  {
    "text": "value and then in the middle of the right it had trash and then in the at",
    "start": "962810",
    "end": "968750"
  },
  {
    "text": "end of the right it had the new value and if you had a power failure during that window and you tried to read the block you could get back in neither",
    "start": "968750",
    "end": "975200"
  },
  {
    "text": "there were times when you would get back neither the new nor the old value and that's kind of annoying you have to plan",
    "start": "975200",
    "end": "981740"
  },
  {
    "text": "for that you had to think about that you had to work it right and so that was just annoying so you would do things",
    "start": "981740",
    "end": "988550"
  },
  {
    "text": "like here's file 1 and I've got version 1 at the end there in orange and then file one would be trashed and then I get",
    "start": "988550",
    "end": "996019"
  },
  {
    "text": "version 2 and that was kind of what life was like to update a block so you could",
    "start": "996019",
    "end": "1001180"
  },
  {
    "text": "do care for replacement for single block writes with mirrors what you would do is you'd write the new value in to some",
    "start": "1001180",
    "end": "1006519"
  },
  {
    "text": "other place or another parallel file and only after the new value is safe you override it so writing the tail of the",
    "start": "1006519",
    "end": "1013510"
  },
  {
    "text": "log into a carefully in tamir disk imagine that the tail of the log the last set of transactions you committed",
    "start": "1013510",
    "end": "1020440"
  },
  {
    "text": "is in the left half of that block that went through version one to version two so if that trashed it you would end up",
    "start": "1020440",
    "end": "1026890"
  },
  {
    "text": "losing stuff you said was to be kept and that's something you want to avoid so",
    "start": "1026890",
    "end": "1031990"
  },
  {
    "text": "here you've got two versions and you write version two and then you write",
    "start": "1031990",
    "end": "1037540"
  },
  {
    "text": "version two but there is no window in there where at least one of the versions could not be read off of one of the two",
    "start": "1037540",
    "end": "1044550"
  },
  {
    "text": "okay and so that works for mirrored blocks works for the mirrored tale of the log that's how I built the tail of",
    "start": "1044550",
    "end": "1051160"
  },
  {
    "text": "the log at the tandem system so as to survive the failures with well you're trashing the blocks and so you could do",
    "start": "1051160",
    "end": "1057880"
  },
  {
    "text": "careful blocks when you have single block rights with non mirrors what you would end up doing is you would write",
    "start": "1057880",
    "end": "1063280"
  },
  {
    "text": "version 1 you would write it in a separate block then you once it was in the separate block that you go write it back to where it was and then you could",
    "start": "1063280",
    "end": "1070090"
  },
  {
    "text": "continue to reuse that second volume to version 2 of that so that technique of",
    "start": "1070090",
    "end": "1075160"
  },
  {
    "text": "being very thoughtful about how and where is an old Niq we don't have to do that anymore",
    "start": "1075160",
    "end": "1080850"
  },
  {
    "text": "with disk blocks because the controllers have got batteries there's a whole bunch of reasons why we'd have to worry about",
    "start": "1080850",
    "end": "1086130"
  },
  {
    "text": "it but that concept of carefully putting one foot on the ground and then another",
    "start": "1086130",
    "end": "1091350"
  },
  {
    "text": "foot on the ground and then another foot on the ground to cross the river is an important concept in making the systems",
    "start": "1091350",
    "end": "1097440"
  },
  {
    "text": "work careful replacement for record writes so if I'm gonna do a careful replacement",
    "start": "1097440",
    "end": "1103110"
  },
  {
    "text": "record writes say I do updates to records in a pre sequel database if I was gonna do that that needed careful",
    "start": "1103110",
    "end": "1108510"
  },
  {
    "text": "ordering setting aside the disk block issue so I might have to update one record say record X before updating",
    "start": "1108510",
    "end": "1115530"
  },
  {
    "text": "record Y how come because if I could see record X but not wise change I could put",
    "start": "1115530",
    "end": "1121680"
  },
  {
    "text": "it back together but if I saw wise change and not X's change it trashed everything and so I would have to be",
    "start": "1121680",
    "end": "1127920"
  },
  {
    "text": "thoughtful about the ordering of updating records so here record 1 and then I can recover after a crash but in",
    "start": "1127920",
    "end": "1134130"
  },
  {
    "text": "that case where I update you know record Y first before record X I can't put it together and there's an example with",
    "start": "1134130",
    "end": "1140790"
  },
  {
    "text": "this an example is an application queue so many of our systems have queuing you",
    "start": "1140790",
    "end": "1146400"
  },
  {
    "text": "see this in Kafka and you see this an other you know things that are being built today the queue describes I intend",
    "start": "1146400",
    "end": "1152280"
  },
  {
    "text": "to do this and then you do it and then that's cool because you can restart",
    "start": "1152280",
    "end": "1157440"
  },
  {
    "text": "Andry drive it and it's idempotent and restartable transactions and careful",
    "start": "1157440",
    "end": "1162720"
  },
  {
    "start": "1160000",
    "end": "1268000"
  },
  {
    "text": "replacement I loved transactions I still love transactions they bundle and solve care",
    "start": "1162720",
    "end": "1168420"
  },
  {
    "text": "for replacement so all that stuff with the disks all that stuff with handling multiple changes out in storage they",
    "start": "1168420",
    "end": "1174870"
  },
  {
    "text": "deal with it you just say begin do a bunch of junk end and you're happy right multiple app records can be updated in a",
    "start": "1174870",
    "end": "1182370"
  },
  {
    "text": "single transaction and it's going to be atomic they the databases make that storage stuff that storage careful",
    "start": "1182370",
    "end": "1188850"
  },
  {
    "text": "replacement just not a problem it's magic it's taken care of by the plumbing underneath you working across time like",
    "start": "1188850",
    "end": "1197820"
  },
  {
    "text": "workflow if I'm going to be doing something to get this job done and then waiting for some other thing to tell me",
    "start": "1197820",
    "end": "1203790"
  },
  {
    "text": "to do the next step and waiting for another thing to tell me to do the next step that requires me to be thoughtful about how my data in my application is",
    "start": "1203790",
    "end": "1211170"
  },
  {
    "text": "managed to move state 1 2 maybe an hour later I find out some changes happen I'm gonna do state 2",
    "start": "1211170",
    "end": "1216800"
  },
  {
    "text": "and that work overtime is is really a challenging and that's very important",
    "start": "1216800",
    "end": "1222470"
  },
  {
    "text": "with careful transactional replacement work over space if I'm gonna work on",
    "start": "1222470",
    "end": "1228230"
  },
  {
    "text": "this computer system and it's gonna talk to that computer system I'm typically",
    "start": "1228230",
    "end": "1233570"
  },
  {
    "text": "gonna have to do the first step here commit then send a message then it gets there and I get that second step do",
    "start": "1233570",
    "end": "1239720"
  },
  {
    "text": "commit and send a message back then I come back and I do the third step and commit and do a message that comes back there is an observation which is that",
    "start": "1239720",
    "end": "1247670"
  },
  {
    "text": "when you break time or you break space you if you break space you break time let me put it that way if you break",
    "start": "1247670",
    "end": "1253820"
  },
  {
    "text": "space you break time and so that's cool we just have to get used to it and figure out how to move it forward leads",
    "start": "1253820",
    "end": "1261170"
  },
  {
    "text": "us to message semantics I want to point out this careful replacement it's deja vu all over again as Yogi Berra said so",
    "start": "1261170",
    "end": "1269180"
  },
  {
    "start": "1268000",
    "end": "1760000"
  },
  {
    "text": "messaging semantics transactional messaging is cool right the first transaction includes a desire to send",
    "start": "1269180",
    "end": "1275900"
  },
  {
    "text": "and then transactional updates happen automatically so here I am I'm doing transaction t1 and I'm writing some of",
    "start": "1275900",
    "end": "1282230"
  },
  {
    "text": "my local data W X Y Z and I'm gonna send a message to that other guy and then",
    "start": "1282230",
    "end": "1288170"
  },
  {
    "text": "that transaction atomically consumes the incoming message and that consumption is atomic so here I am and I'm going to",
    "start": "1288170",
    "end": "1295280"
  },
  {
    "text": "consume that message and it's gonna change ABCD in transaction t2 on the other system you can support exactly",
    "start": "1295280",
    "end": "1302900"
  },
  {
    "text": "once messaging with this okay a committed desire to send causes one or",
    "start": "1302900",
    "end": "1307910"
  },
  {
    "text": "more sends where I retry and Toole acknowledged so I'm sending a bunch of things and then at least once Adam gets",
    "start": "1307910",
    "end": "1313040"
  },
  {
    "text": "through now over on the right hand side transaction t2 it makes sure that the",
    "start": "1313040",
    "end": "1318860"
  },
  {
    "text": "process is at most once it this is normal this is cool if we have relatively static systems it's really",
    "start": "1318860",
    "end": "1326210"
  },
  {
    "text": "cool if you have a scalable system with a whole bunch of shards and junk moves around and the identity is challenging",
    "start": "1326210",
    "end": "1332870"
  },
  {
    "text": "it can be hard because you have to remember the messages you've processed at some level right you know TCP does it",
    "start": "1332870",
    "end": "1339050"
  },
  {
    "text": "with byte stream ordering and sliding-window protocol somehow you have to do this it has some relationship that",
    "start": "1339050",
    "end": "1344810"
  },
  {
    "text": "relationship is a scalene how do you remember the messages that I'm filtering infrared at most once",
    "start": "1344810",
    "end": "1350989"
  },
  {
    "text": "delivery I got a detect the duplicates how long do I remember what if my destination splits how do I deal with all those",
    "start": "1350989",
    "end": "1357320"
  },
  {
    "text": "issues mostly that stuff is nascent and people don't figure it out and it goes wrong when things change a lot of times",
    "start": "1357320",
    "end": "1364700"
  },
  {
    "text": "okay next concept is kind of fun read your rights do I read my rights or don't",
    "start": "1364700",
    "end": "1370700"
  },
  {
    "text": "I read my rights so it used to be back in the day if you wrote something you could read it go figure",
    "start": "1370700",
    "end": "1376849"
  },
  {
    "text": "strange concepts write linearizable stores offer read your rights so what",
    "start": "1376849",
    "end": "1382519"
  },
  {
    "text": "does that mean it means every change to that object or that block or that whatever happens in a linear order I",
    "start": "1382519",
    "end": "1389029"
  },
  {
    "text": "make a change then I make another change then I make another change and each time I make a change I can see the stuff that",
    "start": "1389029",
    "end": "1395450"
  },
  {
    "text": "was written before so linearizable means occasionally delay for a long time when the server is sick okay what do I mean",
    "start": "1395450",
    "end": "1402769"
  },
  {
    "text": "by that okay when you see if I have that what do I mean by linearizable causes",
    "start": "1402769",
    "end": "1410330"
  },
  {
    "text": "delays it turns out that it's very hard to have a perfect notion of an order under failures unless I'm working it",
    "start": "1410330",
    "end": "1418429"
  },
  {
    "text": "across multiple systems and if one of those systems is slow because it's doing garbage collection or just because right",
    "start": "1418429",
    "end": "1425960"
  },
  {
    "text": "the whole world doesn't slow down if you look at the responsiveness of servers",
    "start": "1425960",
    "end": "1431119"
  },
  {
    "text": "it's usually really really really good until it's not and when it's not it's",
    "start": "1431119",
    "end": "1436399"
  },
  {
    "text": "not okay it's slow you can see a typical server go away for a minute just because",
    "start": "1436399",
    "end": "1442339"
  },
  {
    "text": "it's garbage collecting or just because something stuttered and you know things like you lost a packet in TCP can cause",
    "start": "1442339",
    "end": "1448279"
  },
  {
    "text": "a while to recover so the question becomes how fast does it happen but",
    "start": "1448279",
    "end": "1453679"
  },
  {
    "text": "linearizable meaning if I write something and I see a value I'm gonna see the next value I'm not gonna see",
    "start": "1453679",
    "end": "1460339"
  },
  {
    "text": "something old I'm not gonna see something blue I'm not gonna see something borrowed I'm gonna see that old value making sure that happens",
    "start": "1460339",
    "end": "1467659"
  },
  {
    "text": "requires that sometimes things will go slow and you see that constantly so if I",
    "start": "1467659",
    "end": "1473690"
  },
  {
    "text": "have a linearizable store is it going to give me fast predictable reads no because I can't necessary",
    "start": "1473690",
    "end": "1480350"
  },
  {
    "text": "get to the thing to find the latest value I may be stalled behind it and you see this in a lot of stores will it give",
    "start": "1480350",
    "end": "1487639"
  },
  {
    "text": "me fast predictable rights no but by golly if I write something and I go to read it will I see it you bet I will see",
    "start": "1487639",
    "end": "1495019"
  },
  {
    "text": "it okay and that's the linearizable nature of it nonlinear risible stores do",
    "start": "1495019",
    "end": "1500419"
  },
  {
    "text": "not offer read your rights nonlinear izybelle is no guarantee that a right will update all the replicas it might",
    "start": "1500419",
    "end": "1506720"
  },
  {
    "text": "read an old value so reading and writing have a very consistent SLA why because",
    "start": "1506720",
    "end": "1513080"
  },
  {
    "text": "you can skip over sick or dead servers so that paper I talked about about Dynamo from Amazon in 2007 it was OS di",
    "start": "1513080",
    "end": "1520340"
  },
  {
    "text": "2007 paper it's really really an interesting read if you are going to",
    "start": "1520340",
    "end": "1526159"
  },
  {
    "text": "write three replicas in the Dynamo store in one of the three year targeting is",
    "start": "1526159",
    "end": "1531529"
  },
  {
    "text": "down or slow or whatever you just keep going right and on another one if you're",
    "start": "1531529",
    "end": "1537529"
  },
  {
    "text": "gonna go read from one of those servers you go and read and you keep going till you find one sometimes you said you can",
    "start": "1537529",
    "end": "1542990"
  },
  {
    "text": "configure I'm going to read to to minimize the chance that I get a stale thing because you can tell this that the ordering of them this is a newer versus",
    "start": "1542990",
    "end": "1548990"
  },
  {
    "text": "older one and so you will sometimes get the wrong value define wrong you will sometimes get not the recent value not",
    "start": "1548990",
    "end": "1556460"
  },
  {
    "text": "the latest value read but by golly you'll get something fast when you're right and by golly you'll get something",
    "start": "1556460",
    "end": "1562399"
  },
  {
    "text": "fast when you read and that right doesn't get lost because it's on three servers and it will eventually settle",
    "start": "1562399",
    "end": "1567649"
  },
  {
    "text": "out but somebody can see the stuff in between sometimes so these are trade-offs to talk about nonlinear",
    "start": "1567649",
    "end": "1574220"
  },
  {
    "text": "reservoirs do not offer read your rights there's no guarantee your right will update all the replicas you might get a",
    "start": "1574220",
    "end": "1579950"
  },
  {
    "text": "null value reading and writing or fast skip over sick and dead servers so a",
    "start": "1579950",
    "end": "1585139"
  },
  {
    "text": "nonlinear as herbal store fast predictable read yes fast predictable right yes read your rights not promising",
    "start": "1585139",
    "end": "1592879"
  },
  {
    "text": "pretty much but no I once and one though cached data offers scalable read",
    "start": "1592879",
    "end": "1598580"
  },
  {
    "text": "throughput with great SLA s key value pairs are in many computers they're updated with versions a read hits one of",
    "start": "1598580",
    "end": "1605090"
  },
  {
    "text": "the computers and returns one of the versions so if I have a scalable cache can I get fast predictable reads I can",
    "start": "1605090",
    "end": "1611360"
  },
  {
    "text": "get fast predictable reads and I can get it for more and more and more reads per second if I add more and more servers so I can scale the",
    "start": "1611360",
    "end": "1618409"
  },
  {
    "text": "heck out of it right can I have fast predictable writes no it can take a long time for the new version of the thing in",
    "start": "1618409",
    "end": "1625519"
  },
  {
    "text": "the cache to get everywhere can I read my rights No so there are",
    "start": "1625519",
    "end": "1630740"
  },
  {
    "text": "different stores for different uses is it ok to stall on read is it ok to stall on right",
    "start": "1630740",
    "end": "1636230"
  },
  {
    "text": "is it ok to return a stale version you can't have everything and so Peter",
    "start": "1636230",
    "end": "1642590"
  },
  {
    "text": "Bayless has this really great blog post called linear eyes ability versus serializability that's really fun",
    "start": "1642590",
    "end": "1648490"
  },
  {
    "text": "immutability a rock a solid rock to stand on sometimes we can store",
    "start": "1648490",
    "end": "1654259"
  },
  {
    "text": "immutable things so if you look for it many app patterns can create many immutable things 128-bit UUID is a great",
    "start": "1654259",
    "end": "1661129"
  },
  {
    "text": "example of identity that doesn't collide if I store immutable things it can",
    "start": "1661129",
    "end": "1666320"
  },
  {
    "text": "change the behavior of the store you can't get an old version of something where there's not an old version there's",
    "start": "1666320",
    "end": "1672200"
  },
  {
    "text": "one version and if you hit something like dynamo and it can't find the one and only one version says well let me",
    "start": "1672200",
    "end": "1677720"
  },
  {
    "text": "try the next server and so you get an answer pretty fast because it keeps going fast and when it finds it it's",
    "start": "1677720",
    "end": "1683210"
  },
  {
    "text": "fast but it's never wrong because there's only one answer for that key so",
    "start": "1683210",
    "end": "1688490"
  },
  {
    "text": "that's a huge observation that makes the system behave differently so if I've got a linearizable store all of this stuff",
    "start": "1688490",
    "end": "1695120"
  },
  {
    "text": "you've seen scalable scalable scalable but if I have read your rights for immutable and I'm storing immutable I",
    "start": "1695120",
    "end": "1702100"
  },
  {
    "text": "get ya sure it works nonlinear as well though it works scalable cache it works",
    "start": "1702100",
    "end": "1707240"
  },
  {
    "text": "so the nonlinear risible store to hold immutable data for that purpose has",
    "start": "1707240",
    "end": "1712639"
  },
  {
    "text": "phenomenal characteristics it's fast to write it's fast to read it's fast and",
    "start": "1712639",
    "end": "1718460"
  },
  {
    "text": "you get the one and only one answer so the read your rights question kind of stops being an interesting question so",
    "start": "1718460",
    "end": "1724700"
  },
  {
    "text": "there's interesting opera you know options for applications nonlinear resonance tours give fast and",
    "start": "1724700",
    "end": "1730730"
  },
  {
    "text": "predictable writes and reads and scalable cache gives you lots of fast and predictable reads holding immutable",
    "start": "1730730",
    "end": "1737840"
  },
  {
    "text": "data is a huge benefit in designing your app we don't talk about this enough we don't teach people about this enough it",
    "start": "1737840",
    "end": "1744379"
  },
  {
    "text": "makes it just a very different behavior out your system and I have a paper out there",
    "start": "1744379",
    "end": "1750290"
  },
  {
    "text": "which is in communications the ACM called immutability changes everything which talks about a lot of these characteristics session state semantics",
    "start": "1750290",
    "end": "1759470"
  },
  {
    "text": "and transactions same process different process back in a day the database",
    "start": "1759470",
    "end": "1765770"
  },
  {
    "start": "1760000",
    "end": "1820000"
  },
  {
    "text": "system was a bunch of libraries in your app ok that was the way it started out and then used to run in the same process",
    "start": "1765770",
    "end": "1773510"
  },
  {
    "text": "and sometimes you'd load multiple apps in it then you started peeling it out and putting it into a different process",
    "start": "1773510",
    "end": "1780920"
  },
  {
    "text": "and you used a connection in a TCP connection to connect them and you know the session had session state describing",
    "start": "1780920",
    "end": "1787250"
  },
  {
    "text": "users transactions apps being run current state you know each process in the session has information about it",
    "start": "1787250",
    "end": "1793310"
  },
  {
    "text": "with a session state and the session state is on each side of the connection from the database to the app that's",
    "start": "1793310",
    "end": "1799070"
  },
  {
    "text": "interacting with the database later still after we pulled them into",
    "start": "1799070",
    "end": "1804230"
  },
  {
    "text": "different processes we start putting them into different processes on different servers that was actually a",
    "start": "1804230",
    "end": "1809900"
  },
  {
    "text": "pretty straightforward transformation once we had them on different processes on the same server and sessions and",
    "start": "1809900",
    "end": "1815630"
  },
  {
    "text": "session state made that work to split them across a small cluster and that was",
    "start": "1815630",
    "end": "1820700"
  },
  {
    "start": "1820000",
    "end": "1938000"
  },
  {
    "text": "really hard though in so many ways I remember doing it was a big fight to get it done so steep phille sessions and",
    "start": "1820700",
    "end": "1826130"
  },
  {
    "text": "transactions stateful sessions were the natural outcome of shared processes you knew who you were talking to you because",
    "start": "1826130",
    "end": "1832280"
  },
  {
    "text": "you used to be in the same process you knew who you were talking to so you can remember stuff about the other guy so you can do transactions and you could",
    "start": "1832280",
    "end": "1838610"
  },
  {
    "text": "chatter within the transaction I could say begin transaction here's some stuff get some answer here's some stuff get some answer here's some stuff get some",
    "start": "1838610",
    "end": "1844700"
  },
  {
    "text": "answer commit and that worked pretty well set stateful sessions worked well",
    "start": "1844700",
    "end": "1849710"
  },
  {
    "text": "for classic service-oriented architecture we don't talk enough still about classic service-oriented",
    "start": "1849710",
    "end": "1855440"
  },
  {
    "text": "architecture I want to write a paper about it I haven't yet but it was typically there was no transaction across that boundary you've had a",
    "start": "1855440",
    "end": "1861470"
  },
  {
    "text": "two-tier environment typically around a classic database but it was that distrusting boundary and services are",
    "start": "1861470",
    "end": "1867710"
  },
  {
    "text": "about trust and that Trust who you would just kind of say forget it this is my enterprise data you're not coming in",
    "start": "1867710",
    "end": "1873050"
  },
  {
    "text": "unless I inspect your message and decide I like you and all that kind of stuff right so Stifel sessions meant the",
    "start": "1873050",
    "end": "1878450"
  },
  {
    "text": "application can do multiple interactions within a transaction in many circumstances the rich and complex transactions could occur over",
    "start": "1878450",
    "end": "1885330"
  },
  {
    "text": "into your environments and even across multiple back-end databases so I was chief architect at Microsoft where I",
    "start": "1885330",
    "end": "1891570"
  },
  {
    "text": "think on Microsoft transaction server didn't like the name okay but it was really how do I build stateful into your",
    "start": "1891570",
    "end": "1898260"
  },
  {
    "text": "component based applications and run them across multiple back-end databases and we shipped that in 96 in 1996 and so",
    "start": "1898260",
    "end": "1906960"
  },
  {
    "text": "you see a client coming in talking to a pay which is talking to a B which is talking to database one and he's got",
    "start": "1906960",
    "end": "1913230"
  },
  {
    "text": "enough session state to manage the transaction there but even more interesting the client two can come in",
    "start": "1913230",
    "end": "1919110"
  },
  {
    "text": "and talk to AB C which talks to D and E which talked to two different databases and that meant you had to do distributed",
    "start": "1919110",
    "end": "1924570"
  },
  {
    "text": "transactions across the backend and and there were advantages to this right but distributed transactions are sometimes",
    "start": "1924570",
    "end": "1931260"
  },
  {
    "text": "brittle and so I wrote up paper in 2007 called life beyond distributed transactions which talks about the",
    "start": "1931260",
    "end": "1937020"
  },
  {
    "text": "brittleness of that and concerns transactions sessions and microservices",
    "start": "1937020",
    "end": "1942380"
  },
  {
    "start": "1938000",
    "end": "2207000"
  },
  {
    "text": "Micra services stink when it comes to sessions date why because you might get",
    "start": "1942380",
    "end": "1948360"
  },
  {
    "text": "load balance to the next guy and so you're not talking to the guy you were talking to before or he can die it's not they're not big and heavyweight the way",
    "start": "1948360",
    "end": "1955169"
  },
  {
    "text": "they were right usually they go back to the same micro service instance but there's no session stay because it doesn't always work session state is",
    "start": "1955169",
    "end": "1962070"
  },
  {
    "text": "needed to create transactions that span multiple requests if you can't span",
    "start": "1962070",
    "end": "1968250"
  },
  {
    "text": "multiple requests you can't do a transaction across multiple requests it doesn't work that way that transaction",
    "start": "1968250",
    "end": "1974309"
  },
  {
    "text": "identity needs to be there to do the two-phase commit so micro services are typically a one store request you can",
    "start": "1974309",
    "end": "1982260"
  },
  {
    "text": "read a bunch of junk that's not transactional e consistent that's okay right but if you want to change something each change is one single",
    "start": "1982260",
    "end": "1988620"
  },
  {
    "text": "change atomic at a time right and so that ends up being not two-phase commit",
    "start": "1988620",
    "end": "1993809"
  },
  {
    "text": "and so you end up being able to do stuff but now you're back in the world where that key value store I'm doing careful",
    "start": "1993809",
    "end": "2000020"
  },
  {
    "text": "replacement that old care for replacement AK you know thing comes back I'm gonna do record I'm gonna do key X",
    "start": "2000020",
    "end": "2005990"
  },
  {
    "text": "before I do key Y in order to make it all work micro services are worth the",
    "start": "2005990",
    "end": "2011899"
  },
  {
    "text": "restrictions though fail-fast load-balanced health media to deploy with Canaries rolling up grades",
    "start": "2011899",
    "end": "2018080"
  },
  {
    "text": "fault tolerance and more the software engineering advantages and the operational",
    "start": "2018080",
    "end": "2024980"
  },
  {
    "text": "management deployment aspects mean that they're not going away the app developer",
    "start": "2024980",
    "end": "2030560"
  },
  {
    "text": "is gonna deal with not having transactions because this is better to have little pieces of development and",
    "start": "2030560",
    "end": "2036590"
  },
  {
    "text": "little and things to manage and deployment so it's just a change that we're in the midst of it's not your",
    "start": "2036590",
    "end": "2045680"
  },
  {
    "text": "grandmother's transaction any more transactions today with micro services",
    "start": "2045680",
    "end": "2050750"
  },
  {
    "text": "only work on a single call to the store as the application micro services scale more instances are made as micro",
    "start": "2050750",
    "end": "2056780"
  },
  {
    "text": "services composed they call each other scalable stores fine transactions across",
    "start": "2056780",
    "end": "2062960"
  },
  {
    "text": "multiple identities distributed transactions across store instances that's challenging and you end up with",
    "start": "2062960",
    "end": "2069620"
  },
  {
    "text": "this interesting of scalable linearize ability per identity read your rights scaleable nonlinear eyes ability per",
    "start": "2069620",
    "end": "2075590"
  },
  {
    "text": "identity read one or more old versions when you have a nonlinear izybelle store",
    "start": "2075590",
    "end": "2081080"
  },
  {
    "text": "and you read what you're saying is I'm gonna get any version you got with a",
    "start": "2081080",
    "end": "2086330"
  },
  {
    "text": "probability stick that is heavy towards the last one and that's fine if you're",
    "start": "2086330",
    "end": "2092570"
  },
  {
    "text": "using it correctly we'll talk about usages of that identity immutability and",
    "start": "2092570",
    "end": "2098000"
  },
  {
    "text": "scale what's identity each identity is",
    "start": "2098000",
    "end": "2103250"
  },
  {
    "text": "represented by some numbers some strings some URI some whatever right I don't have a problem with how you do it which",
    "start": "2103250",
    "end": "2109430"
  },
  {
    "text": "is why that next paper is identity by any other name it can reference something that's immutable like New York",
    "start": "2109430",
    "end": "2115640"
  },
  {
    "text": "Times October 9th 2002 17 San Francisco Bay Area edition that's immutable it is what it was it was what it is it's gonna",
    "start": "2115640",
    "end": "2121520"
  },
  {
    "text": "be that forever that identity can reference something that changes over time today's New York Times changes",
    "start": "2121520",
    "end": "2128360"
  },
  {
    "text": "every day okay actually changes based upon the region of the country you're in each version of the identity is",
    "start": "2128360",
    "end": "2135770"
  },
  {
    "text": "immutable a change makes a new version that's cool so you're flipping the",
    "start": "2135770",
    "end": "2141680"
  },
  {
    "text": "pointer from the the changeable identity into the unn",
    "start": "2141680",
    "end": "2147300"
  },
  {
    "text": "changeable identity and every day you flip that pointer to a new immutable identity but that's separate from the",
    "start": "2147300",
    "end": "2154260"
  },
  {
    "text": "fact that that new immutable identity can always go get the same bits the same images the same everything creating an",
    "start": "2154260",
    "end": "2162480"
  },
  {
    "text": "identity for the immutable version is really useful because I can cash I can copying I can reference they're not",
    "start": "2162480",
    "end": "2168330"
  },
  {
    "text": "subject to ambiguity where there's ambiguity is the mapping from today to the underlying version but that's",
    "start": "2168330",
    "end": "2173850"
  },
  {
    "text": "typically much easier to manage when you're just dealing with an identity so",
    "start": "2173850",
    "end": "2178920"
  },
  {
    "text": "this picture here denotes a linear version history I go from the top circle",
    "start": "2178920",
    "end": "2184080"
  },
  {
    "text": "to the second circle to the third circle I have a sequence of things and each circle is dependent upon the previous circle the version history might be a",
    "start": "2184080",
    "end": "2191940"
  },
  {
    "text": "dag so here I see that I've got multiple parents in some of these pictures sometimes and so that's a nonlinear",
    "start": "2191940",
    "end": "2199050"
  },
  {
    "text": "izybelle history of things where independent updates happen separately and concurrent",
    "start": "2199050",
    "end": "2204060"
  },
  {
    "text": "versions can come back together representing a fork in history so cross identity relationships using careful",
    "start": "2204060",
    "end": "2210660"
  },
  {
    "start": "2207000",
    "end": "2370000"
  },
  {
    "text": "replacement across identities is a tried-and-true technique if I find",
    "start": "2210660",
    "end": "2216000"
  },
  {
    "text": "something with identity a and I go from version W to version X that's great if I find something from identity B I can go",
    "start": "2216000",
    "end": "2222330"
  },
  {
    "text": "from version Y diversions II so here I am in a linearizable world and I changed",
    "start": "2222330",
    "end": "2228300"
  },
  {
    "text": "W to Z X and I change Y to Z and I do them in that order and then there's no",
    "start": "2228300",
    "end": "2234390"
  },
  {
    "text": "ambiguity but it's also the case that any and every time I say version Z of identity B I'm going to see version X of",
    "start": "2234390",
    "end": "2242640"
  },
  {
    "text": "identity a I never have the case that version Z of identity B exists without",
    "start": "2242640",
    "end": "2247830"
  },
  {
    "text": "that so the windows of time were you know each window of time where B is V Z",
    "start": "2247830",
    "end": "2252900"
  },
  {
    "text": "also shows a as V X careful replacement is predictable over linearizable stores",
    "start": "2252900",
    "end": "2260010"
  },
  {
    "text": "I will never see version Z of B unless I can read version X of a that's",
    "start": "2260010",
    "end": "2265050"
  },
  {
    "text": "predictable careful replacement over a nonlinear risible store will behave",
    "start": "2265050",
    "end": "2270180"
  },
  {
    "text": "really wonky you may write a version of some ID and read the ID and get the",
    "start": "2270180",
    "end": "2275580"
  },
  {
    "text": "older version cash stores will behave unpredictably so here what I have is I have identity a on",
    "start": "2275580",
    "end": "2280770"
  },
  {
    "text": "left with two replicas and identity beyond the right with two replicas so I update identity a to have an on replica",
    "start": "2280770",
    "end": "2288060"
  },
  {
    "text": "two to have you know the version W and then over here I update identity be on",
    "start": "2288060",
    "end": "2293610"
  },
  {
    "text": "replica one to have version Z and that squirts its way over to the other side",
    "start": "2293610",
    "end": "2299220"
  },
  {
    "text": "so now replica two knows version Z and that squirts from a two replicas to two",
    "start": "2299220",
    "end": "2305280"
  },
  {
    "text": "replicas one so version W is overrun for identity a and then he crashes so now he",
    "start": "2305280",
    "end": "2315000"
  },
  {
    "text": "crashes so now when I go to read I see this wonky thing where versions see Z",
    "start": "2315000",
    "end": "2322160"
  },
  {
    "text": "exists on over on the right and I've got and I don't in that window of time but I",
    "start": "2322160",
    "end": "2328350"
  },
  {
    "text": "don't yet have W so violated to my consistency constraints no matter how you deal with this if you have nonlinear",
    "start": "2328350",
    "end": "2335460"
  },
  {
    "text": "izybelle stores and you can't read your rights you can't do any form of care for replacement because it's gonna be wonky",
    "start": "2335460",
    "end": "2340980"
  },
  {
    "text": "there are windows that will be wonky the only thing you probably also can't do is test it because you won't find those",
    "start": "2340980",
    "end": "2348240"
  },
  {
    "text": "windows very effectively I think I",
    "start": "2348240",
    "end": "2353460"
  },
  {
    "text": "screwed it up yes you're correct I can't my reading glasses aren't on so",
    "start": "2353460",
    "end": "2358860"
  },
  {
    "text": "I can't come yes I think I screwed it up I have to fix it thank you okay so care for replacement",
    "start": "2358860",
    "end": "2364740"
  },
  {
    "text": "will be buggy over a nonlinear as opposed stores I'm sorry for the confusion okay how append blurs identity",
    "start": "2364740",
    "end": "2373500"
  },
  {
    "start": "2370000",
    "end": "2905000"
  },
  {
    "text": "this one is a mind mess this is fun okay HDFS and other big data system",
    "start": "2373500",
    "end": "2379440"
  },
  {
    "text": "except rights to append to a big file so I'm running an HDFS you're right you're just slapping new messages new new",
    "start": "2379440",
    "end": "2385350"
  },
  {
    "text": "writes on to the end of this big file that's what HDFS does and HDFS is designed to have three replicas so you",
    "start": "2385350",
    "end": "2391770"
  },
  {
    "text": "set up a block and if you write to the first block then it will take the write and log it locally in its durable store",
    "start": "2391770",
    "end": "2397830"
  },
  {
    "text": "and then it'll send it to the second replica who will put it in a block and right into its store and then ascend it to the third replica who'll write it and",
    "start": "2397830",
    "end": "2403920"
  },
  {
    "text": "put it in a store and they come back and then they say that was a delicious right he was great I'm happy in the new right the next",
    "start": "2403920",
    "end": "2409080"
  },
  {
    "text": "thing okay and so HDFS deliberately restricts a",
    "start": "2409080",
    "end": "2414390"
  },
  {
    "text": "go writer per file it's a conscious choice they make predictable and",
    "start": "2414390",
    "end": "2420900"
  },
  {
    "text": "repeatable replica data takes careful design GFS Google file system preceded",
    "start": "2420900",
    "end": "2426210"
  },
  {
    "text": "HDFS and it allowed multiple writers to a file and it had fixed size blocks as",
    "start": "2426210",
    "end": "2431700"
  },
  {
    "text": "HDFS does failures in race conditions sometimes allow different data per",
    "start": "2431700",
    "end": "2437039"
  },
  {
    "text": "replicas what huh so I have multiple writers from two different processes",
    "start": "2437039",
    "end": "2443400"
  },
  {
    "text": "hitting the primary and he's going to take one you're gonna write it and then",
    "start": "2443400",
    "end": "2449339"
  },
  {
    "text": "you're gonna send it to the message to the secondary but before that message gets there the primary dies okay and so",
    "start": "2449339",
    "end": "2456569"
  },
  {
    "text": "now the second client says dude you're dead and he goes and he talks to the secondary and he writes there first and",
    "start": "2456569",
    "end": "2463440"
  },
  {
    "text": "that right from the first client got to the first replica and didn't get to the",
    "start": "2463440",
    "end": "2468539"
  },
  {
    "text": "second and there's no protection for that in GFS and that's documented in a in a column with Kirk McKusick",
    "start": "2468539",
    "end": "2474990"
  },
  {
    "text": "and trying to remember the name a so it was a communications primary what no",
    "start": "2474990",
    "end": "2480930"
  },
  {
    "text": "wasn't Sam it was Shawn it was Shawn Quinlan and it's it's in communications of the ACM he talks about it in a",
    "start": "2480930",
    "end": "2487380"
  },
  {
    "text": "conversation which great it's fascinating stuff now I worked at Microsoft on cosmos",
    "start": "2487380",
    "end": "2493829"
  },
  {
    "text": "which is of the plumbing under being not cosmos DB that's being advertised now but cosmos it's that there's two different products and it takes multiple",
    "start": "2493829",
    "end": "2502470"
  },
  {
    "text": "writers but what it does is it actually has variable length blocks",
    "start": "2502470",
    "end": "2508319"
  },
  {
    "text": "they're called extents in that but they're variable length blocks you say how the heck is a variable length block correlated with precise imaging of these",
    "start": "2508319",
    "end": "2516089"
  },
  {
    "text": "replicas under failures if you do a write from this and you got multiple",
    "start": "2516089",
    "end": "2521130"
  },
  {
    "text": "writers fighting to that to get to that primary good okay and the first first one gets and he writes it and then he's",
    "start": "2521130",
    "end": "2527490"
  },
  {
    "text": "now he crashes and so this master which is called the CSM detects that he's gone",
    "start": "2527490",
    "end": "2533490"
  },
  {
    "text": "and he says to the secondary how much data do you have in that last block in",
    "start": "2533490",
    "end": "2540119"
  },
  {
    "text": "that plastic stent oh you've got you know 748 bytes great we're gonna take",
    "start": "2540119",
    "end": "2545819"
  },
  {
    "text": "seven and 48 bytes we're gonna make that block be seven or forty eight blocks will truncate it and now you can talk to the secondary and the",
    "start": "2545819",
    "end": "2551759"
  },
  {
    "text": "tertiary and then we'll keep going so when that primary comes back up anything",
    "start": "2551759",
    "end": "2557579"
  },
  {
    "text": "he has for that particular block of the file in excess of the amount that was",
    "start": "2557579",
    "end": "2562920"
  },
  {
    "text": "decided and recorded in the master is discarded and so now the file is",
    "start": "2562920",
    "end": "2568349"
  },
  {
    "text": "pristine and perfect even when competing with multiple writers even with fighting",
    "start": "2568349",
    "end": "2573630"
  },
  {
    "text": "that so HDFS made a wonderful legitimate choice six lengths blocks easier to deal with single writer great it's a fine",
    "start": "2573630",
    "end": "2580890"
  },
  {
    "text": "legitimate choice cosmos made the the choice of multiple writers but we're gonna deal with the garbage of variable",
    "start": "2580890",
    "end": "2587099"
  },
  {
    "text": "length blocks which means every time you want to do a bio a index you have to scratch your head and look up this stuff and figure it out so it's just",
    "start": "2587099",
    "end": "2593910"
  },
  {
    "text": "but the reason I'm raising this is because the notion of consistence append",
    "start": "2593910",
    "end": "2599309"
  },
  {
    "text": "and how do you do that consistently is a very complex area in all of these things",
    "start": "2599309",
    "end": "2604799"
  },
  {
    "text": "and and this is stuff we have to think about as systems builders so a pen to",
    "start": "2604799",
    "end": "2610170"
  },
  {
    "text": "file X Y Z does not have adequate identity that's this other interesting thing append doesn't have identity the",
    "start": "2610170",
    "end": "2617430"
  },
  {
    "text": "identity is assigned by the primary and when you get into failure modes of the primary replica of the data block data",
    "start": "2617430",
    "end": "2624109"
  },
  {
    "text": "the the data file right how do you manage that",
    "start": "2624109",
    "end": "2629219"
  },
  {
    "text": "and so assigning the append location means right appends may stall this whole",
    "start": "2629219",
    "end": "2634289"
  },
  {
    "text": "thing is a big stall and you're just dealing with the stalls you want to talk about not having predictable response",
    "start": "2634289",
    "end": "2640109"
  },
  {
    "text": "time these guys are scratching their heads to go through all sorts of coordination to clean it up and that's fine these are batch systems there's",
    "start": "2640109",
    "end": "2647099"
  },
  {
    "text": "nothing wrong with that but it's not the thing you want to have your user waiting to do your online shopping for okay",
    "start": "2647099",
    "end": "2654630"
  },
  {
    "text": "that's kind of where I'm going with this so stalls on big data pens are just fine because they're for batch so again I'm",
    "start": "2654630",
    "end": "2661499"
  },
  {
    "text": "not I love what's being done it has huge utility and it's great but it's different so let's look at some",
    "start": "2661499",
    "end": "2669150"
  },
  {
    "text": "application example patterns and tie all of this together careful replacement over key value if I",
    "start": "2669150",
    "end": "2676829"
  },
  {
    "text": "have a big ginormous key value store and I'm gonna be doing a workflow and I am going to be",
    "start": "2676829",
    "end": "2681930"
  },
  {
    "text": "making promises to these other computer systems I probably don't want wonky nonlinear Aiza behavior I probably want",
    "start": "2681930",
    "end": "2689579"
  },
  {
    "text": "it to stall if it needs to stall to make sure that I get the right behavior even",
    "start": "2689579",
    "end": "2694650"
  },
  {
    "text": "if some servers crash and they were scratching their head for a minute or two to figure it out I mean you need to",
    "start": "2694650",
    "end": "2700470"
  },
  {
    "text": "realize it typically takes like upwards of a minute for a cluster to decide that",
    "start": "2700470",
    "end": "2705510"
  },
  {
    "text": "servers dead by golly he's dead I'm not gonna talk to him anywhere what am i doing he's gone you look up and you",
    "start": "2705510",
    "end": "2711540"
  },
  {
    "text": "figure oh here's what I do and he's gone and so if you can't tell he's gone then you can't figure out how to respond to him being gone so you can build scalable",
    "start": "2711540",
    "end": "2721319"
  },
  {
    "text": "applications over key value stores but you probably want linearizable behavior with read your rights so again there's",
    "start": "2721319",
    "end": "2728280"
  },
  {
    "text": "this workflow here and you probably want that to finish in the right time windows ok transactional blobs by ref let's give",
    "start": "2728280",
    "end": "2737309"
  },
  {
    "text": "you an example of something a little different see I got a transactional system but people are doing things like putting out big documents in it you",
    "start": "2737309",
    "end": "2744569"
  },
  {
    "text": "don't want to put that in your relational system it's a pain in the tush right it's not really good for it right so you want to have that big",
    "start": "2744569",
    "end": "2750839"
  },
  {
    "text": "system and the blobs are correlated with relational data so you want to put immutable blobs out in that nonlinear",
    "start": "2750839",
    "end": "2756299"
  },
  {
    "text": "risible store cuz it's fast so the app says I want to run a transaction then I'm gonna write these three things out",
    "start": "2756299",
    "end": "2761790"
  },
  {
    "text": "and then I wanted to do another transaction to say they're there ok now the database itself will sometimes",
    "start": "2761790",
    "end": "2769440"
  },
  {
    "text": "stall although they get a lot of engineering to avoid the stalls they you don't very often but the nonlinear as",
    "start": "2769440",
    "end": "2775260"
  },
  {
    "text": "able store will add to it will won't add to it because of the nonlinear risible behavior but I'm putting immutable stuff",
    "start": "2775260",
    "end": "2781890"
  },
  {
    "text": "so it's going to be crisp and transactionally good so the blobstore can be implemented with many commodity servers you don't want to",
    "start": "2781890",
    "end": "2788400"
  },
  {
    "text": "delay humans are waiting for it and the nonlinear as well store has excellent slis ok so that's why read your rights is",
    "start": "2788400",
    "end": "2795240"
  },
  {
    "text": "immutable in this picture this one's fun ecommerce shopping cart each shopping",
    "start": "2795240",
    "end": "2802109"
  },
  {
    "text": "cart is for a separates customer nobody's excited about transactions across carts nobody wants that right to",
    "start": "2802109",
    "end": "2807690"
  },
  {
    "text": "heck with that and there's customers are very unhappy if the shopping cart stalls",
    "start": "2807690",
    "end": "2814610"
  },
  {
    "text": "there's measured data tons of measured data from many different ecommerce sites if you stall when people are looking at",
    "start": "2814610",
    "end": "2822860"
  },
  {
    "text": "their shopping cart they leave they just go go clean the kitchen right they don't stay right if you give them the wrong",
    "start": "2822860",
    "end": "2829460"
  },
  {
    "text": "value in the cart because it's an old value of the cart then they fix it they stay and so it's big big big",
    "start": "2829460",
    "end": "2837920"
  },
  {
    "text": "business difference you want to have that shopping cart even if it's wrong to",
    "start": "2837920",
    "end": "2843320"
  },
  {
    "text": "be presented there and you can do additions and subtractions to the shopping cart in a way which settles out",
    "start": "2843320",
    "end": "2848510"
  },
  {
    "text": "there eventually consistent if you do the multiple things you can fix it up shopping carts must be right now even if",
    "start": "2848510",
    "end": "2856430"
  },
  {
    "text": "they're not right so that whole tension do you want it right or do you want it",
    "start": "2856430",
    "end": "2862340"
  },
  {
    "text": "right now we don't talk enough about it right that's a huge issue it's measurably better for the business to",
    "start": "2862340",
    "end": "2868400"
  },
  {
    "text": "show the wrong result promptly measurably better measurably happier customers measurably better right and so",
    "start": "2868400",
    "end": "2875630"
  },
  {
    "text": "users are asked to verify the cart before completing in a nonlinear risible stores sometimes old versions of the",
    "start": "2875630",
    "end": "2881780"
  },
  {
    "text": "cart exist in the version history directed acyclic graph items are added deleted relatively simple cart semantics",
    "start": "2881780",
    "end": "2888500"
  },
  {
    "text": "can clean the mess up if there's divergent versions so you have low",
    "start": "2888500",
    "end": "2893930"
  },
  {
    "text": "latency predictable reads low latency predictable writes yes read your rights no I'll give you the wrong answer but",
    "start": "2893930",
    "end": "2900200"
  },
  {
    "text": "I'll be I'll be at ya real fast and it's all good ecommerce product catalog feeds and",
    "start": "2900200",
    "end": "2908450"
  },
  {
    "start": "2905000",
    "end": "3206000"
  },
  {
    "text": "crawls processed by the back end so you see literally millions of people selling",
    "start": "2908450",
    "end": "2914720"
  },
  {
    "text": "stuff in tens and hundreds of millions of products on some of these big ecommerce sites they feed things in",
    "start": "2914720",
    "end": "2920600"
  },
  {
    "text": "describing the products there's people crawling the web to go to manufacturers sites to go and pull stuff out to get",
    "start": "2920600",
    "end": "2927320"
  },
  {
    "text": "the descriptions of the vacuum cleaner that's going to be sold and formatting it in a consistent way to fit into the",
    "start": "2927320",
    "end": "2932600"
  },
  {
    "text": "e-commerce website so data from webs and from partners produces distilled product descriptions each product has a unique",
    "start": "2932600",
    "end": "2940010"
  },
  {
    "text": "identifier the identifier takes you to a partition the partition takes you to a",
    "start": "2940010",
    "end": "2946730"
  },
  {
    "text": "replica via load-balancing the replica in that code for the product",
    "start": "2946730",
    "end": "2952130"
  },
  {
    "text": "unique identifier takes you to the product description if you need more",
    "start": "2952130",
    "end": "2957349"
  },
  {
    "text": "products you make more shards horizontally if you need more read",
    "start": "2957349",
    "end": "2963710"
  },
  {
    "text": "traffic you stack more vertically okay so back-end processing and pub/sub are",
    "start": "2963710",
    "end": "2971079"
  },
  {
    "text": "throughput sensitive for the most part it doesn't matter if it takes one second or an hour",
    "start": "2971079",
    "end": "2977569"
  },
  {
    "text": "to get the product description updated it matters that the aggregate amount of junk you're processing can get stuffed",
    "start": "2977569",
    "end": "2984170"
  },
  {
    "text": "out into those caches right latency is not important different replicas may be updated a sync user catalog lookup is",
    "start": "2984170",
    "end": "2992150"
  },
  {
    "text": "latency sensitive scale is important it's okay to get a stale version of the",
    "start": "2992150",
    "end": "2998119"
  },
  {
    "text": "product so what do I have here I have low latency predictable reads yes low",
    "start": "2998119",
    "end": "3003790"
  },
  {
    "text": "latency right uh-huh read your rights uh-uh this is just an example of where I don't care about that I don't care if I",
    "start": "3003790",
    "end": "3010270"
  },
  {
    "text": "get the old description of the vacuum cleaner on one read and then the new description on the next street it's like",
    "start": "3010270",
    "end": "3016089"
  },
  {
    "text": "okay the world didn't end and so that's got a lot to do with the",
    "start": "3016089",
    "end": "3021280"
  },
  {
    "text": "semantics of the identity of the vacuum cleaner in the description I'm not doing joins across it the way I am in the",
    "start": "3021280",
    "end": "3027040"
  },
  {
    "text": "generalized relational database is a different critter so lots of scale",
    "start": "3027040",
    "end": "3033390"
  },
  {
    "text": "search web crawlers feed search indexers very similar to the product catalog I'm",
    "start": "3033390",
    "end": "3039460"
  },
  {
    "text": "crawling the web I do the search indexing I'm charting it I'm putting these into and you know engrams that I'm",
    "start": "3039460",
    "end": "3045160"
  },
  {
    "text": "searching and I push them out of the indices of the search request can come updates to the index are not super",
    "start": "3045160",
    "end": "3050589"
  },
  {
    "text": "latency sensitive it's not 100% true the high-end search things like Google and Bing and so forth have parallel",
    "start": "3050589",
    "end": "3057160"
  },
  {
    "text": "high-speed response things for latest news breaking things if there's been a big event that's happened in the world",
    "start": "3057160",
    "end": "3062530"
  },
  {
    "text": "but for the most part everything is happening kind of in the slow boat right getting it there very important that",
    "start": "3062530",
    "end": "3068920"
  },
  {
    "text": "search requests get low latency retries to other servers in a shard are okay as long as the latency is bounded so in",
    "start": "3068920",
    "end": "3075640"
  },
  {
    "text": "search instead of hitting one of those shards I have to hit all of them and then aggregate it and so if one of those",
    "start": "3075640",
    "end": "3081579"
  },
  {
    "text": "call slow I'm in trouble right it slows me down a lot there's to me one of the",
    "start": "3081579",
    "end": "3087970"
  },
  {
    "text": "handful of best papers to have a systems person read a system student read is",
    "start": "3087970",
    "end": "3093010"
  },
  {
    "text": "Taylor scale by Jeff Dean and Luis Barroso and communications of the ACM it's amazing right the broad idea is if",
    "start": "3093010",
    "end": "3101110"
  },
  {
    "text": "you call one of those server one of those shards and one of those servers if you call that and it takes too darn long",
    "start": "3101110",
    "end": "3107260"
  },
  {
    "text": "okay then what you do is you say if it's more than 95th percentile like 19 out of",
    "start": "3107260",
    "end": "3112750"
  },
  {
    "text": "20 requests is faster than this one's taking I'm gonna say to heck with it and I retry to another replica in the same",
    "start": "3112750",
    "end": "3119800"
  },
  {
    "text": "shard so I can get an answer from all the shards now the 99.9% I'll answer is",
    "start": "3119800",
    "end": "3126220"
  },
  {
    "text": "dramatically lower and there's just amazingly cool descriptions that happen then and that paper is just essential",
    "start": "3126220",
    "end": "3133750"
  },
  {
    "text": "for any systems you know computer science person so low latency",
    "start": "3133750",
    "end": "3140290"
  },
  {
    "text": "predictable reads yeah low latency predictable writes oh not in general read your rights nope this is all",
    "start": "3140290",
    "end": "3146830"
  },
  {
    "text": "jittery and flaky and crazy lots of scale big data appending to big",
    "start": "3146830",
    "end": "3152620"
  },
  {
    "text": "files okay so HDFS dedupe have big data each byte offset is assigned a form of",
    "start": "3152620",
    "end": "3158260"
  },
  {
    "text": "linearize ability of the append the question is who's giving the semantics the appends will usually be very fast but be delayed appends can be delayed",
    "start": "3158260",
    "end": "3165640"
  },
  {
    "text": "while the system copes with sickness or death the Arita big data can bound the SLA and so the issue is rights don't",
    "start": "3165640",
    "end": "3173350"
  },
  {
    "text": "matter a lot in a batch system and the reads can retry to another replica and",
    "start": "3173350",
    "end": "3178630"
  },
  {
    "text": "so in this system because it's batch you care much more about aggregate",
    "start": "3178630",
    "end": "3183970"
  },
  {
    "text": "throughput if one out of a hundred requests is slow that's fine if the other 99 are fast enough to make up for",
    "start": "3183970",
    "end": "3189760"
  },
  {
    "text": "it which is different than when there's a human being waiting for the answer and so it's different than where I need all",
    "start": "3189760",
    "end": "3196150"
  },
  {
    "text": "all of the shards of the search index because I have to have all of them come back together and I need to get that",
    "start": "3196150",
    "end": "3201460"
  },
  {
    "text": "that human interaction SLA conclusion conclusion is it's about the application",
    "start": "3201460",
    "end": "3209380"
  },
  {
    "start": "3206000",
    "end": "3302000"
  },
  {
    "text": "pattern low latency reads writes read your rights care for replacement",
    "start": "3209380",
    "end": "3215960"
  },
  {
    "text": "has to work across multiple key values I need to read my rights I will take the stalls or because I'll get a mess if I'm",
    "start": "3215960",
    "end": "3223190"
  },
  {
    "text": "doing something like a work flow I'll get a mess if I don't if I get a stale answer blobs by ref because they're",
    "start": "3223190",
    "end": "3229520"
  },
  {
    "text": "immutable I can have not only resonable and immutable and it's like phenomenal right there are other examples of that",
    "start": "3229520",
    "end": "3235310"
  },
  {
    "text": "immutable that are phenomenal ecommerce shopping cart it's actually okay to give the wrong answer and so I just need it",
    "start": "3235310",
    "end": "3241609"
  },
  {
    "text": "fast product catalog the same thing I want to i want my reads fast from the",
    "start": "3241609",
    "end": "3247160"
  },
  {
    "text": "product catalog search I want my reads fast that's the thing that matters append to big files I can get my reads",
    "start": "3247160",
    "end": "3253520"
  },
  {
    "text": "fast I'm not that worried about the rights the data is immutable and so I think there's interesting work that we",
    "start": "3253520",
    "end": "3259580"
  },
  {
    "text": "can do with this area it's it's actually the order of the write that is the",
    "start": "3259580",
    "end": "3265040"
  },
  {
    "text": "fulcrum of the indecision so I wrote a paper called standing on the distributed",
    "start": "3265040",
    "end": "3270740"
  },
  {
    "text": "shoulders of giants which is poking fun at physicists and one of them is Heisenberg was on the right track one of",
    "start": "3270740",
    "end": "3276440"
  },
  {
    "text": "the sections WR ite and the point is you can know where you write or you can know",
    "start": "3276440",
    "end": "3282859"
  },
  {
    "text": "when you write but you can't know both in order to solve that the identity of",
    "start": "3282859",
    "end": "3287930"
  },
  {
    "text": "the order needs to be assigned at the client that's writing and so which is it",
    "start": "3287930",
    "end": "3294080"
  },
  {
    "text": "all tangled up in this stuff so linearize ability and read your rights are not always required in modern",
    "start": "3294080",
    "end": "3299359"
  },
  {
    "text": "scalable apps how you use your state depends on your app requirements so I always tell everybody including students",
    "start": "3299359",
    "end": "3306589"
  },
  {
    "start": "3302000",
    "end": "4233000"
  },
  {
    "text": "especially students when you're doing a presentation you start with the takeaways and it takes me one to two",
    "start": "3306589",
    "end": "3311720"
  },
  {
    "text": "hours to write a typical takeaway slide just one stinkin slide and I'm always revisiting and I'm always going over you",
    "start": "3311720",
    "end": "3317180"
  },
  {
    "text": "know blah blah blah so this is what I hope you remember this is what I started out to write okay",
    "start": "3317180",
    "end": "3322730"
  },
  {
    "text": "state means different things session state stateful sessions remember stuff",
    "start": "3322730",
    "end": "3329440"
  },
  {
    "text": "stateless doesn't remember on the session durable stuff stuff is",
    "start": "3329440",
    "end": "3334640"
  },
  {
    "text": "remembered when you come back later even after failures most scalable computing",
    "start": "3334640",
    "end": "3341000"
  },
  {
    "text": "comprises micro services with stateless interfaces they're great they have",
    "start": "3341000",
    "end": "3346010"
  },
  {
    "text": "partitioning failures rolling upgrade stateful sessions are problematic microservices make all other",
    "start": "3346010",
    "end": "3351290"
  },
  {
    "text": "microservices to read data and get stuff done but it's the composition of this is kind of hard right and figuring out how",
    "start": "3351290",
    "end": "3357260"
  },
  {
    "text": "to make it predictable transactions across stateless calls usually aren't supported in micro service solutions",
    "start": "3357260",
    "end": "3363950"
  },
  {
    "text": "Micra services means no server-side session state which means no",
    "start": "3363950",
    "end": "3369650"
  },
  {
    "text": "transactions across calls which means no transactions across objects there you go",
    "start": "3369650",
    "end": "3375109"
  },
  {
    "text": "so this is what you're getting is part of the package deal with micro services coordinated changes use the careful",
    "start": "3375109",
    "end": "3382700"
  },
  {
    "text": "replacement technique it's the same technique from computing early days we see it all over the stack it's you know",
    "start": "3382700",
    "end": "3389060"
  },
  {
    "text": "deja vu all over again each update provides new versions of the stuff with a single identity complex",
    "start": "3389060",
    "end": "3394970"
  },
  {
    "text": "content within the new version may include many things including outgoing and incoming messages that complex",
    "start": "3394970",
    "end": "3400520"
  },
  {
    "text": "content of you know app defined messages in tending to be sent is very powerful very powerful different applications",
    "start": "3400520",
    "end": "3409790"
  },
  {
    "text": "demand different behavior from durable state do you want it right for example",
    "start": "3409790",
    "end": "3415460"
  },
  {
    "text": "read your rights or do you want it right now with bounded and fast SLA that's to",
    "start": "3415460",
    "end": "3421130"
  },
  {
    "text": "me it's just a big deal right humans usually prefer right now - right sometimes they care to stall to get the",
    "start": "3421130",
    "end": "3428480"
  },
  {
    "text": "right answer the correct answer but usually they just want right now even if it's not perfect many app solutions are",
    "start": "3428480",
    "end": "3434810"
  },
  {
    "text": "based upon object identity may be tolerant of stale versions and immutable objects can provide the best of both",
    "start": "3434810",
    "end": "3440150"
  },
  {
    "text": "world by being right and right now that's it I got some time thank you",
    "start": "3440150",
    "end": "3452349"
  },
  {
    "text": "the question is why wire is right now better for humans as an app designer as",
    "start": "3458680",
    "end": "3471140"
  },
  {
    "text": "a builder of a system you have to think that through and try to empathize with what your humans are going to do mostly",
    "start": "3471140",
    "end": "3477740"
  },
  {
    "text": "though most cases I can work around to finding a right now answer that people are pretty happy with",
    "start": "3477740",
    "end": "3482950"
  },
  {
    "text": "it's it's kind of crazy it's it's but it works that way yes yes right now when",
    "start": "3482950",
    "end": "3493720"
  },
  {
    "text": "people repeat they ask again yeah they do they repeating they ask again but it's I",
    "start": "3493720",
    "end": "3499049"
  },
  {
    "text": "mean what do you do if you get the wrong if you if you look at your shopping cart native snoc right what do you do you fix",
    "start": "3499049",
    "end": "3506799"
  },
  {
    "text": "it a lot of times when you go to buy you do when you go to push the thing that",
    "start": "3506799",
    "end": "3512769"
  },
  {
    "text": "you review it and then you say and they say wait what happened that I added that thing we're okay I'll add it again sure",
    "start": "3512769",
    "end": "3520049"
  },
  {
    "text": "it's what people do but if if this thing just locks up and says no I'm spinning",
    "start": "3520049",
    "end": "3526329"
  },
  {
    "text": "you know the little wheel would go do the dishes where you at tend them when they switch",
    "start": "3526329",
    "end": "3532210"
  },
  {
    "text": "to the center food banks and secure stuff but going to the no no so much",
    "start": "3532210",
    "end": "3540039"
  },
  {
    "text": "that no I'd left in 1990 okay Dan it was an interesting box though yeah",
    "start": "3540039",
    "end": "3545230"
  },
  {
    "text": "interesting variation yes yes did this",
    "start": "3545230",
    "end": "3550390"
  },
  {
    "text": "kind of hang together to make sense terms promote fairness yeah chart with",
    "start": "3550390",
    "end": "3558519"
  },
  {
    "text": "yeses and noes in various columns are there are there plus work terms for for",
    "start": "3558519",
    "end": "3563559"
  },
  {
    "text": "various combinations not that I know of this is me making this stuff up well I'm",
    "start": "3563559",
    "end": "3569289"
  },
  {
    "text": "surprises that was my commercial my question I'm surprised you haven't used the database convention of the acronym",
    "start": "3569289",
    "end": "3576160"
  },
  {
    "text": "asset well first I love acid I mean and I'm just so it is the the description in",
    "start": "3576160",
    "end": "3594480"
  },
  {
    "text": "inconsistence a little weak but most of those terms are very strong and it describes how does the transaction talk",
    "start": "3594480",
    "end": "3599589"
  },
  {
    "text": "about the sequence of of transactional behavior which basically the goal is to",
    "start": "3599589",
    "end": "3605109"
  },
  {
    "text": "make it look like nothing else is happening when you're doing your work in a single transaction everything else happens before or after and that is that",
    "start": "3605109",
    "end": "3612220"
  },
  {
    "text": "the technical concept for that is called serializability as and I could create a serial order doesn't mean it is serial it means it",
    "start": "3612220",
    "end": "3618670"
  },
  {
    "text": "could be serial and so I just in writing down observations is this is you know to",
    "start": "3618670",
    "end": "3626740"
  },
  {
    "text": "me I just think about random junk and try to write it down and I realize that this is not completely well formed but I",
    "start": "3626740",
    "end": "3632920"
  },
  {
    "text": "have a day job building systems and this is recreation it is honestly just stuff",
    "start": "3632920",
    "end": "3638769"
  },
  {
    "text": "I do on the side to them to that day well thank you it's just the weekend",
    "start": "3638769",
    "end": "3646210"
  },
  {
    "text": "there are reports some of the big medical wonderful computer systems can't",
    "start": "3646210",
    "end": "3652450"
  },
  {
    "text": "handle daylight savings time changes what the tandem do for time in Toronto",
    "start": "3652450",
    "end": "3660490"
  },
  {
    "text": "I don't recall at the same time he says",
    "start": "3660490",
    "end": "3665940"
  },
  {
    "text": "there wasn't typically patient data you're correct it was building stuff yes",
    "start": "3669930",
    "end": "3679079"
  },
  {
    "text": "they were using time instead of its",
    "start": "3679589",
    "end": "3685239"
  },
  {
    "text": "entire you know they've been around for",
    "start": "3685239",
    "end": "3693160"
  },
  {
    "text": "more than 30 years ago so there is no",
    "start": "3693160",
    "end": "3733569"
  },
  {
    "text": "generic",
    "start": "3733569",
    "end": "3736019"
  },
  {
    "text": "I think we're still so the question is does it advocate for having a single",
    "start": "3740609",
    "end": "3745680"
  },
  {
    "text": "storage that can do all of this stuff and my instinct right now is no that",
    "start": "3745680",
    "end": "3750930"
  },
  {
    "text": "doesn't mean overtime as an industry we don't learn um I think better",
    "start": "3750930",
    "end": "3756210"
  },
  {
    "text": "discussions about the trade-offs or what I would want to start with if you understand where I'm what I'm saying",
    "start": "3756210",
    "end": "3762000"
  },
  {
    "text": "with that and I haven't seen single solutions that are at panacea I think you could build some of these semantics",
    "start": "3762000",
    "end": "3768060"
  },
  {
    "text": "for these single solution you know on top of it a single infrastructure if you wanted that maybe give you backup and ER",
    "start": "3768060",
    "end": "3774750"
  },
  {
    "text": "and some disaster recovery but I don't know I'm thought about it enough I on a hole where I think the issue is that's",
    "start": "3774750",
    "end": "3782490"
  },
  {
    "text": "very complicated is people are rushing to micro services for good reason for good reason and mostly they don't know",
    "start": "3782490",
    "end": "3789960"
  },
  {
    "text": "what they're getting into that's just my to me that's the more",
    "start": "3789960",
    "end": "3795150"
  },
  {
    "text": "important thing is so they'll pick us they'll pick us door that doesn't work for that and they'll have expectations",
    "start": "3795150",
    "end": "3801300"
  },
  {
    "text": "for other apps going to compose without thinking about that transactions and databases have been so successful that",
    "start": "3801300",
    "end": "3808920"
  },
  {
    "text": "we've kind of lost the skill set to deal with the funky behavior of random",
    "start": "3808920",
    "end": "3816300"
  },
  {
    "text": "systems because it Cottard it called the app developer and and so the the",
    "start": "3816300",
    "end": "3821580"
  },
  {
    "text": "challenge is women wearing how do we have higher level abstractions that still coddle the app developer I'm a",
    "start": "3821580",
    "end": "3828300"
  },
  {
    "text": "believer in that by the way I'm a big believer in platforms when I was young it was the the TP monitor and that was",
    "start": "3828300",
    "end": "3836220"
  },
  {
    "text": "how do I manage four hundred terminals when they have to run through one process and the guy who wants to work",
    "start": "3836220",
    "end": "3841800"
  },
  {
    "text": "guy or gal who wants to program for an insurance company doesn't want to think about asynchronous management of the",
    "start": "3841800",
    "end": "3847470"
  },
  {
    "text": "messages from the terminals so that was phenomenal right now we're trying to do this at cloud scale this is why i",
    "start": "3847470",
    "end": "3853200"
  },
  {
    "text": "targeted salesforce it's a fascinating company with a great bunch of good stuff but it's about making it easy for people",
    "start": "3853200",
    "end": "3860160"
  },
  {
    "text": "to build their solutions in the cloud nobody else does that in the cloud now the ways in which that works income",
    "start": "3860160",
    "end": "3868080"
  },
  {
    "text": "combining databases and combining the micro services and growing solutions that way I don't think we have a really",
    "start": "3868080",
    "end": "3876249"
  },
  {
    "text": "good guidance for everyone yet did that make sense and it's gonna be fun hey",
    "start": "3876249",
    "end": "3882819"
  },
  {
    "text": "it's been I've been doing this for 40 years it's been a great ride I'm looking forward to do it for a lot more years it's just a hoot so yes I'm sorry this",
    "start": "3882819",
    "end": "3891700"
  },
  {
    "text": "just one sec you know shows is there",
    "start": "3891700",
    "end": "3901690"
  },
  {
    "text": "still trade up seem to pay attention to there are still four different",
    "start": "3901690",
    "end": "3908259"
  },
  {
    "text": "application use cases but what's changed think about you were here decoration",
    "start": "3908259",
    "end": "3913599"
  },
  {
    "text": "that candle at the beginning as you said it used to be that you had a whole team",
    "start": "3913599",
    "end": "3920170"
  },
  {
    "text": "of specialists to to develop a system and application works or whatever it is",
    "start": "3920170",
    "end": "3927480"
  },
  {
    "text": "much more democratized in the sense of now anybody probably not know about some",
    "start": "3927480",
    "end": "3937180"
  },
  {
    "text": "of these trade offs and they may not even have a computer science reference so yes by the pressure point that I was",
    "start": "3937180",
    "end": "3944319"
  },
  {
    "text": "speaking about the fandom happened in the 90s okay where it was just Eunice and you can just go down the street buy",
    "start": "3944319",
    "end": "3950499"
  },
  {
    "text": "something that did your your needs met your needs and ran on UNIX you installed it without hiring programmers but then",
    "start": "3950499",
    "end": "3957279"
  },
  {
    "text": "that changed over time under scale and distribution and mobile devices and the",
    "start": "3957279",
    "end": "3962529"
  },
  {
    "text": "list goes on and so that's grown the complexity of the standard ly accepted",
    "start": "3962529",
    "end": "3968980"
  },
  {
    "text": "app is grown by making sense right now that's true right but I guess my point was it's it's much more possible now for",
    "start": "3968980",
    "end": "3977230"
  },
  {
    "text": "someone with far less training understanding these these trade-offs and so forth to build an app that mean we're",
    "start": "3977230",
    "end": "3986559"
  },
  {
    "text": "now you know so the I think it comes back to what you're just saying that then you can't expect that the designer",
    "start": "3986559",
    "end": "3993369"
  },
  {
    "text": "of this system is necessarily going to have the background to be able to take all of these crappy shoes in so does",
    "start": "3993369",
    "end": "3999700"
  },
  {
    "text": "iteration so the thing I mentioned about for my loving platforms right the platform's happened like transaction TP",
    "start": "3999700",
    "end": "4005869"
  },
  {
    "text": "monitor platforms and and cloud-based platforms and is and so forth have have happened because someone looks around",
    "start": "4005869",
    "end": "4012140"
  },
  {
    "text": "and people are solving junk in ways that are one-off and then they're saying oh this is a pattern for how people are",
    "start": "4012140",
    "end": "4018349"
  },
  {
    "text": "building their application but they're doing it this way versus this over there and they say wait I'm gonna make it this so that there's this bear this interface",
    "start": "4018349",
    "end": "4025400"
  },
  {
    "text": "this abstraction this platform and if you will platform as-a-service right that does these things and they don't",
    "start": "4025400",
    "end": "4030859"
  },
  {
    "text": "have to think about a lot of stuff right in you know sales first is just a phenomenal job of masking multi-tenancy",
    "start": "4030859",
    "end": "4037069"
  },
  {
    "text": "so we're sharing very expensive resources across many many many concurrent tenants and making it so that",
    "start": "4037069",
    "end": "4042710"
  },
  {
    "text": "the customers don't have to worry about that and that's a phenomenal platform as a service and but as the applications",
    "start": "4042710",
    "end": "4050450"
  },
  {
    "text": "grow as big data grows as data science grows there's all these new cool things go I look forward to seeing how those",
    "start": "4050450",
    "end": "4057589"
  },
  {
    "text": "are made more approachable to folks who don't have PhDs in computer science that",
    "start": "4057589",
    "end": "4063020"
  },
  {
    "text": "to me is the fun that's the real fun did I answer your question okay",
    "start": "4063020",
    "end": "4068900"
  },
  {
    "text": "did you tomorrow tomorrow sorry or",
    "start": "4068900",
    "end": "4091579"
  },
  {
    "text": "something if I took a simple server and just a simple server",
    "start": "4091579",
    "end": "4099310"
  },
  {
    "text": "what's the sort of resource cost I don't",
    "start": "4099310",
    "end": "4104750"
  },
  {
    "text": "care is much higher the opportunity and",
    "start": "4104750",
    "end": "4113088"
  },
  {
    "text": "there's no one answer to that I mean when I was in tandem in the early days",
    "start": "4113089",
    "end": "4118190"
  },
  {
    "text": "we were neurotically checkpointing every write across computers and and they were doing you get a computer and it would do",
    "start": "4118190",
    "end": "4124310"
  },
  {
    "text": "that was the guy who was doing the data would would send a check point to the other say yes now you can do that right",
    "start": "4124310",
    "end": "4129440"
  },
  {
    "text": "it was fine and then we started using log based techniques to do it once and that it would be secretly",
    "start": "4129440",
    "end": "4135299"
  },
  {
    "text": "go over it it was much faster and then we had to change the transaction semantics so that if they blew then it would clean it up and all of that was a",
    "start": "4135300",
    "end": "4142410"
  },
  {
    "text": "great improvement cuz it didn't modify what the programmer saw the programmer saw a transparent behavior out of the",
    "start": "4142410",
    "end": "4148380"
  },
  {
    "text": "app but we made less work happen these things are gonna happen at so many",
    "start": "4148380",
    "end": "4153420"
  },
  {
    "text": "different areas so I don't have a way to answer your question without us getting into a far more detailed discussion of",
    "start": "4153420",
    "end": "4159930"
  },
  {
    "text": "what the work is interesting but it but you get in general you make it slow and then you make it fast I mean one of my",
    "start": "4159930",
    "end": "4166890"
  },
  {
    "text": "cynical comments is that when you're releasing software there's two kinds of releases there's performance releases and there's anti performance releases",
    "start": "4166890",
    "end": "4173190"
  },
  {
    "text": "and you make this new feature and it goes slower and then you make it go faster it that happens a lot so it's",
    "start": "4173190",
    "end": "4179759"
  },
  {
    "text": "just a lot of these new things are how do I lower the barrier to entry for the developer that's kind of the key point",
    "start": "4179760",
    "end": "4186660"
  },
  {
    "text": "at this point yeah or but slower and",
    "start": "4186660",
    "end": "4192390"
  },
  {
    "text": "more functional and right there's a bunch of reasons you do it and there's a bunch of reasons that happen and then",
    "start": "4192390",
    "end": "4198060"
  },
  {
    "text": "once the performance is improved the aggregate performance is usually wait the heck better because you worked at it and a few things are a little slower",
    "start": "4198060",
    "end": "4203430"
  },
  {
    "text": "here and there and that's just natural that's the way things work I understand",
    "start": "4203430",
    "end": "4213800"
  },
  {
    "text": "sounds funny how many people thank you guys thank you",
    "start": "4214880",
    "end": "4223250"
  },
  {
    "text": "you",
    "start": "4229820",
    "end": "4231880"
  }
]