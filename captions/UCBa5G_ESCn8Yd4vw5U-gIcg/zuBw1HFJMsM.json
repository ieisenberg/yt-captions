[
  {
    "start": "0",
    "end": "156000"
  },
  {
    "text": "so my name is John masters I'm a computer architect at Red Hat in my",
    "start": "11349",
    "end": "17740"
  },
  {
    "text": "normal day-to-day job I'm not mitigating security vulnerabilities but so so my day-to-day",
    "start": "17740",
    "end": "25640"
  },
  {
    "text": "job is trying to make armed servers a thing taking over the world I work with a lot of the high performance um be 8",
    "start": "25640",
    "end": "34340"
  },
  {
    "text": "server companies on their high performance server designs and as a consequence of working on that for the",
    "start": "34340",
    "end": "40160"
  },
  {
    "text": "past what six seven years and helping to define the standards for the server soces and the firmware and everything",
    "start": "40160",
    "end": "48200"
  },
  {
    "text": "from interconnects on up I've learned a lot and others inside the company have",
    "start": "48200",
    "end": "53210"
  },
  {
    "text": "learned a lot about architecture and micro architecture and so what I wanted to do here was first share some thoughts",
    "start": "53210",
    "end": "61300"
  },
  {
    "text": "not everyone here is a micro architect so there will be some introductory material and then what I wanted to do",
    "start": "61300",
    "end": "68000"
  },
  {
    "text": "was to talk a little bit about the infamous security vulnerabilities that we can't stop reading about in the in",
    "start": "68000",
    "end": "75709"
  },
  {
    "text": "the media today I'd like a fairly interactive format here so you said I",
    "start": "75709",
    "end": "82909"
  },
  {
    "text": "could run it however I want so I think what I'm gonna do is if you guys have thoughts please express yourselves if we",
    "start": "82909",
    "end": "92420"
  },
  {
    "text": "end up in a lengthy tangent then we'll we'll come back to it later towards the end okay so I'm gonna go through some",
    "start": "92420",
    "end": "98060"
  },
  {
    "text": "material on kind of architecture I'm gonna talk about these particular exploits but as we just alluded in the",
    "start": "98060",
    "end": "104029"
  },
  {
    "text": "introduction there there are many different kinds of vulnerability out there in particular when you take a look",
    "start": "104029",
    "end": "110779"
  },
  {
    "text": "at any kind of digital system and you think about it outside the box outside of how it was intended to be used so the",
    "start": "110779",
    "end": "118130"
  },
  {
    "text": "microphone example just now all these devices capturing your voice yes they",
    "start": "118130",
    "end": "123979"
  },
  {
    "text": "can hear your your secrets your passwords as you communicate they've even done analysis reconstructing what",
    "start": "123979",
    "end": "129560"
  },
  {
    "text": "you're typing just by feeling the vibrations from your phone being on a table so we'll talk about side-channel",
    "start": "129560",
    "end": "136040"
  },
  {
    "text": "attacks but you know they're not unique to microarchitecture you'll see",
    "start": "136040",
    "end": "141860"
  },
  {
    "text": "side-channel attacks in many other places in everyday life and if you want to get hold of me you",
    "start": "141860",
    "end": "149299"
  },
  {
    "text": "can tweet me maybe during the talk you can email me reach me on all the social",
    "start": "149299",
    "end": "155150"
  },
  {
    "text": "media so we'll talk about meltdown inspector there's the graphic that we",
    "start": "155150",
    "end": "161000"
  },
  {
    "start": "156000",
    "end": "322000"
  },
  {
    "text": "have to use so you guys have seen that shall we continue so we'll cover the",
    "start": "161000",
    "end": "167870"
  },
  {
    "text": "difference between architecture and microarchitecture I will talk about in order and out of order execution we will",
    "start": "167870",
    "end": "175129"
  },
  {
    "text": "layer on top of that and talk about speculation and how that works some people here I'm glad I don't see",
    "start": "175129",
    "end": "183280"
  },
  {
    "text": "NSE here or anyone who would really correct me but some of you know this far",
    "start": "183280",
    "end": "189950"
  },
  {
    "text": "better than I do and you can feel free to correct anything that you you think I get wrong we'll talk about we'll talk",
    "start": "189950",
    "end": "199099"
  },
  {
    "text": "about caches we'll talk about virtual memory we'll talk about all the pieces that you need to have some understanding of in order for this to make sense and",
    "start": "199099",
    "end": "206000"
  },
  {
    "text": "then we'll get into branch prediction speculative execution these particular exciting vulnerabilities that we've been",
    "start": "206000",
    "end": "212959"
  },
  {
    "text": "contending with and then maybe some that's not so much juicy gossip but",
    "start": "212959",
    "end": "218569"
  },
  {
    "text": "maybe some insights into how we mitigate these when we're confronted with the end",
    "start": "218569",
    "end": "224780"
  },
  {
    "text": "of the world being nigh and what do we do about that and then we'll talk about",
    "start": "224780",
    "end": "229970"
  },
  {
    "text": "some related research right because these are just two of many kinds of not",
    "start": "229970",
    "end": "236510"
  },
  {
    "text": "so novel but but kinds of hardware attack and as a software person myself",
    "start": "236510",
    "end": "243069"
  },
  {
    "text": "you know it's one of the things that Madden's me someone said why is the Red Hat guy here right so one of things that",
    "start": "243069",
    "end": "249379"
  },
  {
    "text": "Madden's me about this industry is that we've gotten into an us-versus-them over",
    "start": "249379",
    "end": "255379"
  },
  {
    "text": "the past few decades so you're either a software guy or you're or girl or you're a hardware guy or girl and never the two",
    "start": "255379",
    "end": "262310"
  },
  {
    "text": "shall meet right and I would really like it if we could change that but please",
    "start": "262310",
    "end": "269949"
  },
  {
    "text": "sure sure yeah yeah it wasn't a personal I have buyer's remorse I did computer",
    "start": "270190",
    "end": "278530"
  },
  {
    "text": "science and I think if I did my time over again I may have pursued a",
    "start": "278530",
    "end": "283570"
  },
  {
    "text": "different paths in my career I'm not sure if I'd be doing the same talk but it would have been very interesting",
    "start": "283570",
    "end": "289540"
  },
  {
    "text": "so I find I find architecture for interesting I think one of the other things that open-source people have found over the past few years of seeing",
    "start": "289540",
    "end": "296530"
  },
  {
    "text": "you know open-source architectures like RISC 5 and so on there's there's a renewed interest and how does it work",
    "start": "296530",
    "end": "302140"
  },
  {
    "text": "inside and as an everyday you know engineer you may not have access to a",
    "start": "302140",
    "end": "308080"
  },
  {
    "text": "fab you certainly don't have access to the kind of design tools that you need but you know some of us you know play",
    "start": "308080",
    "end": "315790"
  },
  {
    "text": "around pretty seriously with Vera log on the weekend and build some interesting designs and it's amazing where this is going now anyway let's talk about",
    "start": "315790",
    "end": "322630"
  },
  {
    "start": "322000",
    "end": "466000"
  },
  {
    "text": "architecture so this is a refresher for anyone who's not familiar with the",
    "start": "322630",
    "end": "329800"
  },
  {
    "text": "background material so we're gonna talk about the difference being architecture and micro architecture so computer",
    "start": "329800",
    "end": "336430"
  },
  {
    "text": "architectures or instruction set architectures describe the contract that",
    "start": "336430",
    "end": "341650"
  },
  {
    "text": "the programmer has with the hardware right they describe the primitive operations that the machine accountant",
    "start": "341650",
    "end": "349270"
  },
  {
    "text": "must support they include things like you know loading and storing data from memory the memory model of the machine",
    "start": "349270",
    "end": "356220"
  },
  {
    "text": "how that works how many registers you have in your machine you know how the stack behaves",
    "start": "356220",
    "end": "363940"
  },
  {
    "text": "how branches and control flow instructions operate adds subtracts you",
    "start": "363940",
    "end": "368980"
  },
  {
    "text": "know the usual kinds of operations they also define separate execution",
    "start": "368980",
    "end": "375310"
  },
  {
    "text": "environments so you have a user or unprivileged to a problem state depending on which architecture you're",
    "start": "375310",
    "end": "381910"
  },
  {
    "text": "on and what nomenclature is being used and then you have a more privileged state that the operating system exists",
    "start": "381910",
    "end": "388030"
  },
  {
    "text": "in right and people who are not sort of operating system folks tend to think of an OS as always being there right",
    "start": "388030",
    "end": "395860"
  },
  {
    "text": "running the pharisee in the background but that's not really true what we do most the time is try to get out of the",
    "start": "395860",
    "end": "401020"
  },
  {
    "text": "way and that the application run right and so some the exploits you're gonna hear about they rely on the fact that we have these",
    "start": "401020",
    "end": "407890"
  },
  {
    "text": "optimizations in place that make it really easy to have the OS come in and",
    "start": "407890",
    "end": "413860"
  },
  {
    "text": "get out of the way really quickly so you have the you have the concept of",
    "start": "413860",
    "end": "419110"
  },
  {
    "text": "exception levels or different contexts that the operating system and the application are existing in and then the",
    "start": "419110",
    "end": "426220"
  },
  {
    "text": "operating system has a more privileged state has access to some additional",
    "start": "426220",
    "end": "431290"
  },
  {
    "text": "registers it can do a few more things than the application can do for example",
    "start": "431290",
    "end": "436510"
  },
  {
    "text": "it can switch out one process for another has to change some housekeeping",
    "start": "436510",
    "end": "443070"
  },
  {
    "text": "processor registers to do that and you know the architecture is the",
    "start": "443070",
    "end": "448270"
  },
  {
    "text": "lowest level targeted by an application programmer or these days more commonly a",
    "start": "448270",
    "end": "453490"
  },
  {
    "text": "compiler you know or some kind of runtime environment right there are fewer and fewer people actually writing assembly code these days but if they are",
    "start": "453490",
    "end": "460600"
  },
  {
    "text": "then the architecture specification is what they are targeting so common",
    "start": "460600",
    "end": "466780"
  },
  {
    "start": "466000",
    "end": "614000"
  },
  {
    "text": "concepts in modern architectures application programs when they're",
    "start": "466780",
    "end": "473530"
  },
  {
    "text": "running are known as processes in Linux we call them tasks and then they exist",
    "start": "473530",
    "end": "480250"
  },
  {
    "text": "inside this unprivileged exception environment this unprivileged execution context they exist inside a virtual",
    "start": "480250",
    "end": "488200"
  },
  {
    "text": "memory environment as well so the memory that an application is using is virtual in nature it's translated from the",
    "start": "488200",
    "end": "495940"
  },
  {
    "text": "address the application is using our into the underlying address of the physical memory and that's done through",
    "start": "495940",
    "end": "503530"
  },
  {
    "text": "a piece of hardware called the memory management unit and we'll talk a little bit more about how that's done in a few",
    "start": "503530",
    "end": "509620"
  },
  {
    "text": "slides the point of this is that the operating system provides this illusion of having",
    "start": "509620",
    "end": "516039"
  },
  {
    "text": "this flat contiguous nice virtual memory you know you're not aware of other",
    "start": "516040",
    "end": "522400"
  },
  {
    "text": "programs that are running you think you got the whole machine to yourself you can kind of write your program and just",
    "start": "522400",
    "end": "527440"
  },
  {
    "text": "you know have have all these assumptions that we're not true in the early days of computing for sure and then when the",
    "start": "527440",
    "end": "534790"
  },
  {
    "text": "application is running what it does is period it interacts with system software it",
    "start": "534790",
    "end": "541010"
  },
  {
    "text": "interacts with the operating system using something we call system calls so we have depending on the architecture a",
    "start": "541010",
    "end": "546980"
  },
  {
    "text": "special instruction that we can we can use and we provide some information and",
    "start": "546980",
    "end": "552800"
  },
  {
    "text": "some registers that say I'd like you to do this for me and then come back and",
    "start": "552800",
    "end": "558550"
  },
  {
    "text": "importantly towards the bottom of the slide here I in Linux certainly until",
    "start": "558550",
    "end": "565250"
  },
  {
    "text": "recently although we'll come on to why that's changed until fairly recently the",
    "start": "565250",
    "end": "571490"
  },
  {
    "text": "way it worked is you had this huge virtual memory space and so what you did",
    "start": "571490",
    "end": "577970"
  },
  {
    "text": "was you had this optimization you linked to your application your application used the bottom part of the virtual address space and your operating system",
    "start": "577970",
    "end": "585110"
  },
  {
    "text": "kernel use the top half and you relied on the standard memory management unit",
    "start": "585110",
    "end": "590150"
  },
  {
    "text": "protections to say if I try to touch some of that memory that's reserved for the OS I'm gonna get an exception I'm",
    "start": "590150",
    "end": "597650"
  },
  {
    "text": "gonna get some fault condition the OS is going to intervene it's gonna say you can't do that it's gonna kill my program when we get further down the road",
    "start": "597650",
    "end": "605900"
  },
  {
    "text": "towards meltdown we'll talk about how that's not necessarily true and why we",
    "start": "605900",
    "end": "611210"
  },
  {
    "text": "had to change that okay so some more concepts so we have we have privileged",
    "start": "611210",
    "end": "619130"
  },
  {
    "start": "614000",
    "end": "737000"
  },
  {
    "text": "instructions we can use to manage the environment I'll talk more about how page tables work and how we do virtual",
    "start": "619130",
    "end": "625160"
  },
  {
    "text": "memory translation in a few moments one of the things that we do whenever we switch from one task to another is we",
    "start": "625160",
    "end": "632450"
  },
  {
    "text": "write into a CPU register on x86 it's called cr3 on arm systems we call it a",
    "start": "632450",
    "end": "639500"
  },
  {
    "text": "translation table based register tt Br it has different names on different architectures and you could you could",
    "start": "639500",
    "end": "645650"
  },
  {
    "text": "say that that defines the memory context about that one process is running it and",
    "start": "645650",
    "end": "652340"
  },
  {
    "text": "when I write a new set of page tables I've switched from one program to another the operate systems responsible",
    "start": "652340",
    "end": "659870"
  },
  {
    "text": "for doing that it does it completely invisibly from the applications point of view and again when an application tries",
    "start": "659870",
    "end": "667070"
  },
  {
    "text": "to access memory that it doesn't have permission to use what should happen is a fault should be",
    "start": "667070",
    "end": "673640"
  },
  {
    "text": "generated we call them page faults this is why so we use page faults quite",
    "start": "673640",
    "end": "680570"
  },
  {
    "text": "extensively in operating systems we use them for example when you load when you start running a program your favorite",
    "start": "680570",
    "end": "687620"
  },
  {
    "text": "web browser whatever you're using right it won't actually load the entire contents of that application into memory",
    "start": "687620",
    "end": "693470"
  },
  {
    "text": "what we'll do is we'll start running it as it starts trying to touch starts trying to execute its code will trigger",
    "start": "693470",
    "end": "701060"
  },
  {
    "text": "page faults will pull more of that application in the application won't have any awareness that that's going on right so page faults are good they're",
    "start": "701060",
    "end": "707930"
  },
  {
    "text": "not a bad thing we use them all the time the other way we use them is when we want to page or swap data out to disk we",
    "start": "707930",
    "end": "716450"
  },
  {
    "text": "give this illusion that machine has more memory that in fact does because we can pick we can temporarily take memory",
    "start": "716450",
    "end": "723830"
  },
  {
    "text": "that's in that's David that's in memory we can put it out onto the disk when the application tries to touch it again we",
    "start": "723830",
    "end": "729830"
  },
  {
    "text": "set it up so that triggers a fault we go and fix it up right these are the common",
    "start": "729830",
    "end": "734960"
  },
  {
    "text": "techniques that we use examples of architectures these are just - you know",
    "start": "734960",
    "end": "742790"
  },
  {
    "start": "737000",
    "end": "932000"
  },
  {
    "text": "you have to give the Intel example right who here has never used an Intel machine",
    "start": "742790",
    "end": "748120"
  },
  {
    "text": "right okay so so clearly you have to give x86 I'm a big fan of armed v8 I",
    "start": "748120",
    "end": "754160"
  },
  {
    "text": "could have gone with RISC 5 decided not to it's a bit too easy to use that",
    "start": "754160",
    "end": "759710"
  },
  {
    "text": "example at this point but these are examples of two different kinds of architecture",
    "start": "759710",
    "end": "764810"
  },
  {
    "text": "they both do similar things back in the day you would certainly define them we",
    "start": "764810",
    "end": "771710"
  },
  {
    "text": "talked earlier about how that's not necessarily true inside but you would define them in terms of whether one was sisk ones a complex instruction set",
    "start": "771710",
    "end": "777800"
  },
  {
    "text": "architecture the other one is a reduced instruction set architecture a RISC architecture which means the",
    "start": "777800",
    "end": "783290"
  },
  {
    "text": "instructions are simpler and in particular some of the differences here on an x86 machine the instructions are",
    "start": "783290",
    "end": "790760"
  },
  {
    "text": "variable size decoding them is exciting as we're talking about outside you know",
    "start": "790760",
    "end": "796670"
  },
  {
    "text": "I think you can have up to 15 bytes long and then some of the decoders out there will pull 16 bytes at a time and try to",
    "start": "796670",
    "end": "803030"
  },
  {
    "text": "slice and figure out which one goes where and the decode is crazy on these things right but fundamentally you know x86 is",
    "start": "803030",
    "end": "810960"
  },
  {
    "text": "variable-width arm is a fixed-width instruction set they both have registers",
    "start": "810960",
    "end": "815980"
  },
  {
    "text": "that they use for their calculations in the case of a more complex instruction",
    "start": "815980",
    "end": "822760"
  },
  {
    "text": "set like x86 it might be at a directly operate on memory I in the case of arm and and RISC architectures they're more",
    "start": "822760",
    "end": "830050"
  },
  {
    "text": "load store or interred so you will specifically pull data in to a register and do something with it and then write",
    "start": "830050",
    "end": "836230"
  },
  {
    "text": "the result back and they're both 64-bit pretty clean these days x86 used to have",
    "start": "836230",
    "end": "842590"
  },
  {
    "text": "a storied history of how it handled memory hands up here if you enjoy",
    "start": "842590",
    "end": "849130"
  },
  {
    "text": "segmentation right ok so so but you know though it wasn't always as clean as it",
    "start": "849130",
    "end": "855820"
  },
  {
    "text": "is now in the 64-bit architecture AMD 64 when when AMD made the original 64-bit",
    "start": "855820",
    "end": "862510"
  },
  {
    "text": "extensions it kind of killed off a lot of that there's still some vestigial segmentation unfortunately not enough to",
    "start": "862510",
    "end": "868450"
  },
  {
    "text": "get us out of the little problem we'll talk about later just enough to be there but not enough to be useful I you can",
    "start": "868450",
    "end": "878350"
  },
  {
    "text": "i'll yeah I don't need to far ahead but",
    "start": "878350",
    "end": "887260"
  },
  {
    "text": "you actually you actually could for some 32-bit processors that still have",
    "start": "887260",
    "end": "892870"
  },
  {
    "text": "segmentation we think of mitigation could be to place like mentation register hacks we can come back to it",
    "start": "892870",
    "end": "899880"
  },
  {
    "text": "correct correct correct yes so we right",
    "start": "899880",
    "end": "905980"
  },
  {
    "text": "and putting that on the stack we're going to come back to that okay so these are two different architectures let's",
    "start": "905980",
    "end": "912700"
  },
  {
    "text": "talk about microarchitecture this is when the software guy gets wrong right",
    "start": "912700",
    "end": "917730"
  },
  {
    "text": "okay so before I get in too far into microarchitecture I want to show you just a very very boring diagram that I",
    "start": "917730",
    "end": "924400"
  },
  {
    "text": "put together you know modern processors modern chips right they're not just a",
    "start": "924400",
    "end": "931120"
  },
  {
    "text": "CPU they're not just processor course there's a bunch of extra stuff on there most the ones that we deal with the far",
    "start": "931120",
    "end": "937510"
  },
  {
    "text": "more complex than this the key point is they don't just have processors they also have memory",
    "start": "937510",
    "end": "943069"
  },
  {
    "text": "controllers memory interfaces they have multiple cores connected together probably using a high-performance",
    "start": "943069",
    "end": "949550"
  },
  {
    "text": "interconnect moment hope and they have multiple levels of cache all right so",
    "start": "949550",
    "end": "955250"
  },
  {
    "text": "when I'm operating on data inside a modern processor environment",
    "start": "955250",
    "end": "961069"
  },
  {
    "text": "I've got memory that's pretty far away from my core and then I've got",
    "start": "961069",
    "end": "966439"
  },
  {
    "text": "progressively larger levels of cache as I get further away from the compute core",
    "start": "966439",
    "end": "972139"
  },
  {
    "text": "that's doing the work and as I work on data what I'm doing is I'm pulling it in through the cache hierarchy I pull it in",
    "start": "972139",
    "end": "977600"
  },
  {
    "text": "through the DDR through the memory interfaces it goes into my fairly large last level cache might be in l3 might be",
    "start": "977600",
    "end": "983480"
  },
  {
    "text": "no.4 and it works its way up to the l1 and we'll talk more about that in a",
    "start": "983480",
    "end": "988850"
  },
  {
    "text": "moment just take away from this that processors are more than just coarse so",
    "start": "988850",
    "end": "995600"
  },
  {
    "start": "994000",
    "end": "1037000"
  },
  {
    "text": "the elements of a typical chip today you",
    "start": "995600",
    "end": "1000699"
  },
  {
    "text": "know programmers think of processors in terms of course right some of them are",
    "start": "1000699",
    "end": "1007269"
  },
  {
    "text": "multi-threaded some of them may actually do very tight resource sharing some don't in the case of very tight resource",
    "start": "1007269",
    "end": "1015430"
  },
  {
    "text": "sharing then really what you're doing is you're saying my core is more than one core I'm gonna give you the minimum amount of state to present that as",
    "start": "1015430",
    "end": "1023170"
  },
  {
    "text": "having more than one core that'll be important for some things we discussed later the cores are tightly integrated",
    "start": "1023170",
    "end": "1031058"
  },
  {
    "text": "with these interconnection networks and we pull data in through the cache hierarchy I think I've said all that ok",
    "start": "1031059",
    "end": "1038788"
  },
  {
    "start": "1037000",
    "end": "1172000"
  },
  {
    "text": "ok so the term microarchitecture it specifically refers to an implementation",
    "start": "1038789",
    "end": "1045400"
  },
  {
    "text": "of an architecture right so we'll come up with some examples later on but you know you can think of your x86 as being",
    "start": "1045400",
    "end": "1052840"
  },
  {
    "text": "your architecture and then specific Intel or AMD processors are",
    "start": "1052840",
    "end": "1059370"
  },
  {
    "text": "implementations of that architecture that's microarchitecture and there are",
    "start": "1059370",
    "end": "1064390"
  },
  {
    "text": "many different kinds of ways to design high performance processors probably more ways to design low performance",
    "start": "1064390",
    "end": "1070630"
  },
  {
    "text": "processors I guess when you think about it but at a high level we can talk about",
    "start": "1070630",
    "end": "1076250"
  },
  {
    "text": "some standard concepts so you can have inorder implementations in order",
    "start": "1076250",
    "end": "1082110"
  },
  {
    "text": "microarchitectures which we'll talk about first and in a way they're simpler",
    "start": "1082110",
    "end": "1088070"
  },
  {
    "text": "certainly the design is less complex but there can be benefits too in order",
    "start": "1088070",
    "end": "1094620"
  },
  {
    "text": "designs a lot of the folks out there that have inorder designs are now saying we're not vulnerable to some of these",
    "start": "1094620",
    "end": "1100710"
  },
  {
    "text": "exploits that's great they're maybe not as performant as some of the others that",
    "start": "1100710",
    "end": "1106139"
  },
  {
    "text": "are vulnerable but in order designs also can save you a lot of power so they have",
    "start": "1106139",
    "end": "1111809"
  },
  {
    "text": "a lot of benefits they're heavily used in embedded systems they're not wrong they're just different and then we also",
    "start": "1111809",
    "end": "1119309"
  },
  {
    "text": "have out of order course which are designed really to take your in order",
    "start": "1119309",
    "end": "1126419"
  },
  {
    "text": "program we'll talk more about how this works in a minute take your in order program and turn it into a dataflow",
    "start": "1126419",
    "end": "1132659"
  },
  {
    "text": "machine which will we'll talk about as well so modern processors as we were discussing outside before particularly",
    "start": "1132659",
    "end": "1140460"
  },
  {
    "text": "the Intel ones right they take these complex instructions they decode them they turn them into a RISC machine",
    "start": "1140460",
    "end": "1145500"
  },
  {
    "text": "inside they throw them out of order and run them in whatever order makes sense when data becomes available and then",
    "start": "1145500",
    "end": "1151799"
  },
  {
    "text": "they lie to the programmer and the average software engineer I talked to and you know talked about out of order machines and dataflow machines they say",
    "start": "1151799",
    "end": "1157799"
  },
  {
    "text": "what I run the program and it it does stuff and you know precise exception",
    "start": "1157799",
    "end": "1164250"
  },
  {
    "text": "knows knowing that you know just magic right it's magic well let's talk a little bit more about how that magic works really bad diagrams I'm not a",
    "start": "1164250",
    "end": "1173490"
  },
  {
    "text": "graphic artist the internet has better diagrams there are whole classes on in",
    "start": "1173490",
    "end": "1180210"
  },
  {
    "text": "order and out of order machines so we'll go through this pretty quickly but an in-order core you know you can think of",
    "start": "1180210",
    "end": "1186990"
  },
  {
    "text": "your classic risk five stage pipeline you fetch instructions you decode them you execute them maybe perform some kind",
    "start": "1186990",
    "end": "1194549"
  },
  {
    "text": "of memory access and then you commit the results back to a register file and you rinse and repeat and you'll see in this",
    "start": "1194549",
    "end": "1201149"
  },
  {
    "text": "diagram that I've got two different parts of my cache represented here at the level one I",
    "start": "1201149",
    "end": "1207960"
  },
  {
    "text": "cache instruction cache from which I'm fetching instructions that I want to execute and I've got a level one D cache",
    "start": "1207960",
    "end": "1214320"
  },
  {
    "text": "from which I'm fetching data and then further out away from the core you're not seeing that here I have a unified",
    "start": "1214320",
    "end": "1220830"
  },
  {
    "text": "set of caches beyond that so when I want to pull something into my level one on my level two cache it'll actually come",
    "start": "1220830",
    "end": "1226830"
  },
  {
    "text": "from a unified level two and then from a level three level 4 and so on why do I split it out for performance reasons",
    "start": "1226830",
    "end": "1233210"
  },
  {
    "text": "partly for area when you're designing and laying out a chip you know you you you you effectively turn modern machines",
    "start": "1233210",
    "end": "1243030"
  },
  {
    "text": "into these Harvard architecture has separated ind cache just because you really can treat the instructions and",
    "start": "1243030",
    "end": "1248520"
  },
  {
    "text": "data separately that's a classic kind of risk pipeline of the kind that you would",
    "start": "1248520",
    "end": "1255090"
  },
  {
    "start": "1251000",
    "end": "1269000"
  },
  {
    "text": "see in the computer architecture books although their diagrams might be better than mine there's some examples here of",
    "start": "1255090",
    "end": "1263400"
  },
  {
    "text": "how you would decode and execute an instruction you know and how it behaves I'll let you read that later on is a",
    "start": "1263400",
    "end": "1270420"
  },
  {
    "start": "1269000",
    "end": "1349000"
  },
  {
    "text": "visualization of how you would have an inner or pipeline you can see some",
    "start": "1270420",
    "end": "1276420"
  },
  {
    "text": "parallelism here because in that middle point there I've got this pipeline",
    "start": "1276420",
    "end": "1282330"
  },
  {
    "text": "that's completely filled with instructions at different stages all right so why do you do this you do this because you can pipeline processors you",
    "start": "1282330",
    "end": "1290130"
  },
  {
    "text": "can have them you can have multiple instructions in flight at different stages in your pipeline now we'll talk a",
    "start": "1290130",
    "end": "1296280"
  },
  {
    "text": "little bit more about what happens if you are executed putting instructions",
    "start": "1296280",
    "end": "1302730"
  },
  {
    "text": "through your pipeline and one is looking for some data that's not yet ready we'll talk a bit more about how how we handle",
    "start": "1302730",
    "end": "1309690"
  },
  {
    "text": "that I think that's in the next slide so yes so in order microarchitecture the key sort of downsides to them is that",
    "start": "1309690",
    "end": "1318000"
  },
  {
    "text": "you're subject to pipeline stalls so if I am running a whole bunch of",
    "start": "1318000",
    "end": "1323820"
  },
  {
    "text": "instructions through my different stages of my pipeline if one of them takes a bit longer if one of them is waiting for",
    "start": "1323820",
    "end": "1329640"
  },
  {
    "text": "some data to load from memory my diagram disappeared on that screen but it's still there okay",
    "start": "1329640",
    "end": "1335010"
  },
  {
    "text": "then then I may have to insert pipeline bubbles I may have to just store the processor and do no you we'll work we are limited in our",
    "start": "1335010",
    "end": "1345450"
  },
  {
    "text": "capability to hide the latency of instructions as a result let's talk a",
    "start": "1345450",
    "end": "1350610"
  },
  {
    "start": "1349000",
    "end": "1432000"
  },
  {
    "text": "bit more about out of order course again it's a bad diagram of mine what we do",
    "start": "1350610",
    "end": "1355860"
  },
  {
    "text": "with out of order course is we pull instructions in from our level 1",
    "start": "1355860",
    "end": "1361530"
  },
  {
    "text": "instruction cache we decode them and then we have this reorder buffer I think",
    "start": "1361530",
    "end": "1367890"
  },
  {
    "text": "it's on my next slide here yeah so okay well I'll talk through the diagram so we",
    "start": "1367890",
    "end": "1373710"
  },
  {
    "text": "pull instructions we want to execute we have this giant data structure called a reorder buffer and what we do is we say",
    "start": "1373710",
    "end": "1380700"
  },
  {
    "text": "I these later instructions can execute the moment that their data dependencies",
    "start": "1380700",
    "end": "1387450"
  },
  {
    "text": "become available that's what beta flow machines do all right so we turn our program for being in order do this and then this and then",
    "start": "1387450",
    "end": "1394290"
  },
  {
    "text": "this we say actually we can get a far more efficient machine if we can look",
    "start": "1394290",
    "end": "1400830"
  },
  {
    "text": "ahead and we can see future instructions could execute the moment that their dependencies become available and",
    "start": "1400830",
    "end": "1408530"
  },
  {
    "text": "depending on how big you make these structures you could actually have quite a large number of instructions that are",
    "start": "1408530",
    "end": "1414210"
  },
  {
    "text": "outstanding we call this the window size or a different terms are use for this",
    "start": "1414210",
    "end": "1419630"
  },
  {
    "text": "but on contemporary parts this could be on the order of 224 instructions",
    "start": "1419630",
    "end": "1425850"
  },
  {
    "text": "something like this so it's a reasonable number of entries in our in our Ryota",
    "start": "1425850",
    "end": "1431070"
  },
  {
    "text": "buffer it's common in high-performance microprocessors we also call it dynamic",
    "start": "1431070",
    "end": "1437700"
  },
  {
    "start": "1432000",
    "end": "1529000"
  },
  {
    "text": "execution and for those looking for the extra credit question was invented by",
    "start": "1437700",
    "end": "1443130"
  },
  {
    "text": "Robert Tomasulo who unfortunately passed away a couple of years ago oh is it",
    "start": "1443130",
    "end": "1449970"
  },
  {
    "text": "really is that is that okay",
    "start": "1449970",
    "end": "1454640"
  },
  {
    "text": "when she left yeah okay correct this",
    "start": "1456230",
    "end": "1463170"
  },
  {
    "text": "light so I Tomasulo actually received a number of awards and I think passed away what two years ago something like this",
    "start": "1463170",
    "end": "1469200"
  },
  {
    "text": "couple years ago but you know very smart man I do wonder what he would have said",
    "start": "1469200",
    "end": "1475550"
  },
  {
    "text": "about this you know and sadly we'll never know but anyway I won't I won't go",
    "start": "1475550",
    "end": "1484530"
  },
  {
    "text": "I won't go through this line by line I really want you guys to take the slides later and I want you to you know take anything out of them that's useful but",
    "start": "1484530",
    "end": "1491120"
  },
  {
    "text": "what we what we're doing with out of order machines is we're separating our",
    "start": "1491120",
    "end": "1497730"
  },
  {
    "text": "our machine or our core into a front end and a back end right we're taking in",
    "start": "1497730",
    "end": "1503730"
  },
  {
    "text": "order we're throwing it out there we're doing it in a different sequence from what the programmer how the program has",
    "start": "1503730",
    "end": "1508740"
  },
  {
    "text": "seized the machine and then we do what we call inorder retirement so when instructions become the oldest",
    "start": "1508740",
    "end": "1514350"
  },
  {
    "text": "instruction in the machine that's currently got all of its dependencies satisfied then we say this instruction",
    "start": "1514350",
    "end": "1520770"
  },
  {
    "text": "is now complete this instruction retires we mark it as such in our reorder buffer",
    "start": "1520770",
    "end": "1526410"
  },
  {
    "text": "and I think I have a slide here yeah we",
    "start": "1526410",
    "end": "1531420"
  },
  {
    "start": "1529000",
    "end": "1604000"
  },
  {
    "text": "have this concept of having an architectural state so in out of order",
    "start": "1531420",
    "end": "1536790"
  },
  {
    "text": "machines I'll have an architectural register file this contains my my kind of committed final state of the machine",
    "start": "1536790",
    "end": "1542580"
  },
  {
    "text": "I have my out of order intermediate state that I'm capturing in my reorder",
    "start": "1542580",
    "end": "1548970"
  },
  {
    "text": "buffer and when instructions complete they retire then I update my",
    "start": "1548970",
    "end": "1554100"
  },
  {
    "text": "architectural register file and finally one last thing we can do with out of order machines we can solve some",
    "start": "1554100",
    "end": "1561240"
  },
  {
    "text": "register pressure when my programmer writes code they may be constrained to",
    "start": "1561240",
    "end": "1567809"
  },
  {
    "text": "15 registers 31 registers something like this some of the calculations they",
    "start": "1567809",
    "end": "1573390"
  },
  {
    "text": "perform they're reusing a register solely because they have a finite number",
    "start": "1573390",
    "end": "1579380"
  },
  {
    "text": "in there in the real physical machine there may be more physical registers and so I can resolve you guys probably know",
    "start": "1579380",
    "end": "1587370"
  },
  {
    "text": "all this stuff but you can resolve you know hazard by looking at do I really need this",
    "start": "1587370",
    "end": "1593010"
  },
  {
    "text": "exact register here or will any other register do to satisfy the dependencies for this future instruction so you can",
    "start": "1593010",
    "end": "1599700"
  },
  {
    "text": "do hazard elimination as well let's see",
    "start": "1599700",
    "end": "1607799"
  },
  {
    "start": "1604000",
    "end": "1660000"
  },
  {
    "text": "so questions you can ask about an architecture I think got a couple examples of architecture here yeah so",
    "start": "1607799",
    "end": "1613860"
  },
  {
    "text": "here's here's two sort of microarchitectures side-by-side this is a fairly well it was contemporary fairly",
    "start": "1613860",
    "end": "1621659"
  },
  {
    "text": "recently Intel skylake microarchitecture which is what's in this laptop that's why I'm using that example and then a",
    "start": "1621659",
    "end": "1628710"
  },
  {
    "text": "fairly recent IBM microarchitecture you can see they've got some similarities there's some differences the IBM",
    "start": "1628710",
    "end": "1634919"
  },
  {
    "text": "machines tend to issue far more instructions per cycle they're much bigger their design point is much higher",
    "start": "1634919",
    "end": "1643530"
  },
  {
    "text": "performance than a than a laptop part they've got similar sized reorder",
    "start": "1643530",
    "end": "1648900"
  },
  {
    "text": "buffers IBM calls at a global completion table but it's basically achieving the same thing and yeah I think that's the",
    "start": "1648900",
    "end": "1658740"
  },
  {
    "text": "main stuff I want to point out there so when it comes to micro architecture we can ask questions about about",
    "start": "1658740",
    "end": "1664770"
  },
  {
    "text": "implementations we can see you know you did an in-order design you did an",
    "start": "1664770",
    "end": "1669780"
  },
  {
    "text": "out-of-order design why did you do this well it's trade-off a in order design is",
    "start": "1669780",
    "end": "1676830"
  },
  {
    "text": "smaller in terms of area uses less power so you see those much more commonly in",
    "start": "1676830",
    "end": "1683240"
  },
  {
    "text": "simpler machines they can be much less expensive to implement in terms of your",
    "start": "1683240",
    "end": "1689850"
  },
  {
    "text": "engineering team and your validation effort you can also ask questions that about you know how big is the pipeline",
    "start": "1689850",
    "end": "1695610"
  },
  {
    "text": "how many instructions can I dispatch and then how big is my reorder buffer how many how far ahead in time can I have",
    "start": "1695610",
    "end": "1703590"
  },
  {
    "text": "instructions in flight these are all kinds of design decisions that you can you can make trade-offs let's talk about",
    "start": "1703590",
    "end": "1711030"
  },
  {
    "start": "1709000",
    "end": "1838000"
  },
  {
    "text": "some virtual memory and cache concepts so I said earlier on virtual memory is",
    "start": "1711030",
    "end": "1717150"
  },
  {
    "text": "what applications see so in this diagram here you can see our two different",
    "start": "1717150",
    "end": "1722700"
  },
  {
    "text": "process is running process a and process B these are potentially two different programs maybe two instances of the same program",
    "start": "1722700",
    "end": "1729740"
  },
  {
    "text": "maybe a Bitcoin miner that apparently is what old machine should be used for today well it's probably a GPU thing but",
    "start": "1729740",
    "end": "1738590"
  },
  {
    "text": "anyway so you've got two programs running and the distinguishing piece is the context that they have right so they",
    "start": "1738590",
    "end": "1744810"
  },
  {
    "text": "both see different register state they both see different views of memory and you've got your physical memory you've",
    "start": "1744810",
    "end": "1750840"
  },
  {
    "text": "got some kind of translation that happens and that translation is done by the memory management unit inside the",
    "start": "1750840",
    "end": "1757070"
  },
  {
    "text": "processor using page tables that are managed by the operating system and the",
    "start": "1757070",
    "end": "1765420"
  },
  {
    "text": "page table management by the way it doesn't have to be done fully in Hardware you can do it in software people have done it in software on",
    "start": "1765420",
    "end": "1771870"
  },
  {
    "text": "simpler course but for performance reasons it tends to be a hardware hardware structures in the chip that",
    "start": "1771870",
    "end": "1779190"
  },
  {
    "text": "read these and what they'll do is they'll look at the page table and say you wanted to access this virtual",
    "start": "1779190",
    "end": "1784200"
  },
  {
    "text": "address in your address space I'm gonna do a translation I'm first gonna check what the page table says in terms of do",
    "start": "1784200",
    "end": "1791190"
  },
  {
    "text": "you have permission to access this address can you execute it can you read it you know there's lots of different",
    "start": "1791190",
    "end": "1796770"
  },
  {
    "text": "pieces of data that's contained in the page tables and then what will happen yeah I think my next slide will point",
    "start": "1796770",
    "end": "1802770"
  },
  {
    "text": "this out what I'll do is I'll cache these translations so walking page",
    "start": "1802770",
    "end": "1808020"
  },
  {
    "text": "tables is quite expensive it can take a lot of different memory accesses because the page tables themselves are contained",
    "start": "1808020",
    "end": "1814680"
  },
  {
    "text": "in memory and so I have something called a translation lookaside buffer a TLB or",
    "start": "1814680",
    "end": "1820290"
  },
  {
    "text": "multiple TLB s-- that will cache the last few translations and you know you",
    "start": "1820290",
    "end": "1826950"
  },
  {
    "text": "never have enough TLB entries but you know you usually have room to keep enough of your immediate working set",
    "start": "1826950",
    "end": "1832320"
  },
  {
    "text": "translations inside them so you don't have to go through this expensive lookup every time you do a translation so",
    "start": "1832320",
    "end": "1840120"
  },
  {
    "start": "1838000",
    "end": "2007000"
  },
  {
    "text": "memory addresses are translated possibly multiple times before they reach memory so the operating system might do it if",
    "start": "1840120",
    "end": "1847470"
  },
  {
    "text": "there's a hypervisor the OS thinks it's the last translation stage it's actually not there's a hypervisor underneath it",
    "start": "1847470",
    "end": "1853650"
  },
  {
    "text": "doing that could be other stages of translation as well the operating system manages the page",
    "start": "1853650",
    "end": "1860640"
  },
  {
    "text": "tables the hardware manages the tlbs and sometimes this coordination needed",
    "start": "1860640",
    "end": "1866160"
  },
  {
    "text": "there for example when I switch from one process to another I may need to invalidate some of that state my",
    "start": "1866160",
    "end": "1872010"
  },
  {
    "text": "operating system will say I want to shoot down the entries there from the last process that was running so that",
    "start": "1872010",
    "end": "1878400"
  },
  {
    "text": "when I go to hex 1000 memory address next time it's now for a different address space and we were speaking",
    "start": "1878400",
    "end": "1884760"
  },
  {
    "text": "earlier about some optimizations I'm gonna keep pointing to you because we had a good conversation before we were",
    "start": "1884760",
    "end": "1890520"
  },
  {
    "text": "talking earlier about how there are some optimizations in modern processors so I",
    "start": "1890520",
    "end": "1895620"
  },
  {
    "text": "don't have to completely flush every TLB entry when I switch from one process to another in particular arm has something",
    "start": "1895620",
    "end": "1902520"
  },
  {
    "text": "called a sets address space IDs x86 has something called PCI IDs process context",
    "start": "1902520",
    "end": "1907710"
  },
  {
    "text": "IDs so when I'm running a particular process I can actually tell the hardware here's a unique identifier and it will",
    "start": "1907710",
    "end": "1916049"
  },
  {
    "text": "tag the TLB entries and so when I switch when I do a lookup it can say well",
    "start": "1916049",
    "end": "1921480"
  },
  {
    "text": "here's the current value of my address space that I think I'm in and I'm gonna look that I look up in the TLB which",
    "start": "1921480",
    "end": "1927570"
  },
  {
    "text": "address space am i in which address space is that entry in you have a question on that one of the problems was",
    "start": "1927570",
    "end": "1934890"
  },
  {
    "text": "that sometimes the TLB at 4k pages couldn't even address all of l3 cache",
    "start": "1934890",
    "end": "1939990"
  },
  {
    "text": "right now you're splitting it is that well we have larger size than yeah we",
    "start": "1939990",
    "end": "1952710"
  },
  {
    "text": "have a lot of constructs we use in in software we have huge pages gigantic pages transparent huge pages lots of",
    "start": "1952710",
    "end": "1959940"
  },
  {
    "text": "different ways that we can underneath say we're going to actually use a large or TLB entry we get us that after but",
    "start": "1959940",
    "end": "1966390"
  },
  {
    "text": "there they're at their optimizations you can do",
    "start": "1966390",
    "end": "1970460"
  },
  {
    "text": "so okay right yeah well so this is why",
    "start": "1972660",
    "end": "1979110"
  },
  {
    "text": "in my day job trying to make arm servers a thing and they will be I've really",
    "start": "1979110",
    "end": "1985830"
  },
  {
    "text": "pushed for 64k as the minimum granule size as they call it because I think if you're building a new architecture it",
    "start": "1985830",
    "end": "1991620"
  },
  {
    "text": "doesn't really make any sense we'll talk a bit later about how that can even impact how your cash is organized so",
    "start": "1991620",
    "end": "1997250"
  },
  {
    "text": "we'll get there I'm going to keep cranking because I guess time is getting away from us but um anyway there's",
    "start": "1997250",
    "end": "2004430"
  },
  {
    "text": "there's some optimizations you can do in your TLB s-- uh applications think they",
    "start": "2004430",
    "end": "2010070"
  },
  {
    "start": "2007000",
    "end": "2102000"
  },
  {
    "text": "own the world they don't they the application binary the elf image in",
    "start": "2010070",
    "end": "2016760"
  },
  {
    "text": "Linux or the Peikoff in Windows or Mac oh is that the format they use on OS 10",
    "start": "2016760",
    "end": "2023000"
  },
  {
    "text": "I'm not a Mac person I think that's the format they use these application binaries provide hints as to where to",
    "start": "2023000",
    "end": "2031790"
  },
  {
    "text": "load in virtual memory the application when it starts up we map other things",
    "start": "2031790",
    "end": "2037040"
  },
  {
    "text": "into the virtual address space I mentioned before that the OS until fairly recently was mapped in the top",
    "start": "2037040",
    "end": "2043370"
  },
  {
    "text": "half of every address of every virtual address space in fact in Linux it was",
    "start": "2043370",
    "end": "2048740"
  },
  {
    "text": "more than that the entirety of Ram was mapped in every process at the top of",
    "start": "2048740",
    "end": "2054950"
  },
  {
    "text": "the virtual address space the official things that we're providing the official",
    "start": "2054950",
    "end": "2060800"
  },
  {
    "text": "interfaces we're providing include something in Linux called a virtual dynamic shared object so the kernel will",
    "start": "2060800",
    "end": "2066710"
  },
  {
    "text": "actually provide certain data to every process quite intentionally with the idea that for example if all you want to",
    "start": "2066710",
    "end": "2073158"
  },
  {
    "text": "do is sit in a loop and read the current wall clock time get time of day it would",
    "start": "2073159",
    "end": "2078470"
  },
  {
    "text": "be more efficient if I told you that without you doing a call into the OS every single time so we have this page",
    "start": "2078470",
    "end": "2084888"
  },
  {
    "text": "where we store a reasonable approximation to the most recent wall clock time and instead of doing the",
    "start": "2084889",
    "end": "2091580"
  },
  {
    "text": "system call we just read the data from that so it's it's much more efficient so there's other things we can do in in in",
    "start": "2091580",
    "end": "2097850"
  },
  {
    "text": "virtual memory you know kind of beyond what you might you might already know let's talk a bit more about caches",
    "start": "2097850",
    "end": "2106990"
  },
  {
    "start": "2102000",
    "end": "2254000"
  },
  {
    "text": "that screen keeps disappearing on me so I kind of just want to make one one",
    "start": "2107630",
    "end": "2114630"
  },
  {
    "text": "point here this is this is about the cache organization optimization piece we almost got onto just now when I touch a",
    "start": "2114630",
    "end": "2126570"
  },
  {
    "text": "memory address a virtual memory address what I'm needing to do is check if",
    "start": "2126570",
    "end": "2132090"
  },
  {
    "text": "that's in my cache during the access I am what I might do is split how I how I",
    "start": "2132090",
    "end": "2142230"
  },
  {
    "text": "perform that cache access so I may perform part of the translation of my",
    "start": "2142230",
    "end": "2147660"
  },
  {
    "text": "virtual memory to physical memory in parallel with the cache access this is",
    "start": "2147660",
    "end": "2153030"
  },
  {
    "text": "actually where the page size piece comes in because if you've got a 4k page size in a machine for reasons you can read",
    "start": "2153030",
    "end": "2160590"
  },
  {
    "text": "about later on this actually will limit the size of your cache for your level 1",
    "start": "2160590",
    "end": "2166290"
  },
  {
    "text": "cache so in a typical machine in a",
    "start": "2166290",
    "end": "2172920"
  },
  {
    "text": "typical machine I will have these cache lines that contain that can contain",
    "start": "2172920",
    "end": "2179100"
  },
  {
    "text": "blocks of memory can contain blocks of physical memory copies of it I have protocols that will manage that",
    "start": "2179100",
    "end": "2185520"
  },
  {
    "text": "coherently and try to keep that the same as keep a consistent view between what",
    "start": "2185520",
    "end": "2191430"
  },
  {
    "text": "the core sees and what is in the actual RAM and then I have different ways I can",
    "start": "2191430",
    "end": "2196440"
  },
  {
    "text": "organize these caches there's the next slide here like I said somewhere here yeah so a common optimization is to use",
    "start": "2196440",
    "end": "2205820"
  },
  {
    "text": "VI PT caches so virtually indexed physically tagged which is what this",
    "start": "2205820",
    "end": "2211440"
  },
  {
    "text": "diagram here talks about so I use the low order bits of a virtual address to",
    "start": "2211440",
    "end": "2218190"
  },
  {
    "text": "start doing my cache look up when I access an address at the same time I translate the other half I do the actual",
    "start": "2218190",
    "end": "2225450"
  },
  {
    "text": "TLB translation to find the remaining piece that I need so the first pile of the lookup will tell me which index to",
    "start": "2225450",
    "end": "2232890"
  },
  {
    "text": "look in my cache and then I will check every entry in that index against the translation that I get in",
    "start": "2232890",
    "end": "2238350"
  },
  {
    "text": "parallel and that's just one example of optimizations that we do in caches it's",
    "start": "2238350",
    "end": "2243960"
  },
  {
    "text": "one reason that virtually index physically tagged caches are very popular especially at the level one",
    "start": "2243960",
    "end": "2249380"
  },
  {
    "text": "layer that's all I want to point out there okay so why is this interesting",
    "start": "2249380",
    "end": "2257970"
  },
  {
    "start": "2254000",
    "end": "2731000"
  },
  {
    "text": "well caches can be used as what we call side channels the whole point of a cache",
    "start": "2257970",
    "end": "2265260"
  },
  {
    "text": "is to provide a performance benefit to",
    "start": "2265260",
    "end": "2270960"
  },
  {
    "text": "provide a speed-up right caches are by their nature shared resources between",
    "start": "2270960",
    "end": "2278180"
  },
  {
    "text": "multiple processors and they contain data that's shared between multiple",
    "start": "2278180",
    "end": "2283710"
  },
  {
    "text": "different concurrently running programs",
    "start": "2283710",
    "end": "2288109"
  },
  {
    "text": "well no you can yeah you it's so so",
    "start": "2289340",
    "end": "2299580"
  },
  {
    "text": "you're both right the kernel is common depending on how we map memory you also can have some cache partitioning so",
    "start": "2299580",
    "end": "2307260"
  },
  {
    "text": "people have different names for this in the industry intel calls it cat cache allocation technology part of their",
    "start": "2307260",
    "end": "2313590"
  },
  {
    "text": "resource directory or technology other companies have different things that they do but what you can do is you can",
    "start": "2313590",
    "end": "2320280"
  },
  {
    "text": "say I'm gonna partition my cache and I'm going to separate it and just give this process this and this process there's",
    "start": "2320280",
    "end": "2325740"
  },
  {
    "text": "that can help you to an extent to mitigate some of the side channel",
    "start": "2325740",
    "end": "2331110"
  },
  {
    "text": "attacks not meltdown but potentially other side channel attacks in the future but what a side channel really means is",
    "start": "2331110",
    "end": "2340130"
  },
  {
    "text": "because when we designed architectures when we designed memory systems we",
    "start": "2340130",
    "end": "2347910"
  },
  {
    "text": "didn't really pay enough attention to the time component right to the fact that we can observe how long we conserve",
    "start": "2347910",
    "end": "2356970"
  },
  {
    "text": "the passage of time right how long does a load take how long does an operation take that hits in my cache or does not",
    "start": "2356970",
    "end": "2363750"
  },
  {
    "text": "hit in my cache and it's it's kind of interesting you if you want you can actually go online on github and you can",
    "start": "2363750",
    "end": "2371460"
  },
  {
    "text": "look I think it's i AI K is the project you want to look for the folks at tu grass who did some",
    "start": "2371460",
    "end": "2378030"
  },
  {
    "text": "of the work on these exploits I'll come to you in a second some of the folks that did the work on this they actually published some really",
    "start": "2378030",
    "end": "2383940"
  },
  {
    "text": "interesting demo program so you can run to measure different aspects of your",
    "start": "2383940",
    "end": "2390000"
  },
  {
    "text": "cache but what you can do is you can literally measure how long does it take",
    "start": "2390000",
    "end": "2396450"
  },
  {
    "text": "to access a particular memory location and from that you can infer is it in my level one level two level three where in",
    "start": "2396450",
    "end": "2402660"
  },
  {
    "text": "my cache is it or is it not it actually gets a bit more exciting let me come to",
    "start": "2402660",
    "end": "2409110"
  },
  {
    "text": "the well I'll come back to that but well I'll foreshadow you can actually on some",
    "start": "2409110",
    "end": "2415220"
  },
  {
    "text": "on some processors you can actually you have an instruction that will actually",
    "start": "2415220",
    "end": "2422100"
  },
  {
    "text": "flush an entry from the cash that's unprivileged any application can do this I can say on my Intel machine I can say",
    "start": "2422100",
    "end": "2428580"
  },
  {
    "text": "flush this memory location make sure it's not in my cache and you can",
    "start": "2428580",
    "end": "2434250"
  },
  {
    "text": "actually time the amount of time it takes to call the flush instruction and from that you can infer was it in the",
    "start": "2434250",
    "end": "2439590"
  },
  {
    "text": "cache or not so the nice thing about that is you never even have to try to load something right so with the other",
    "start": "2439590",
    "end": "2446100"
  },
  {
    "text": "attack you have to at least try to you know do a load time it do a load again see if it was in the cache with the",
    "start": "2446100",
    "end": "2451170"
  },
  {
    "text": "flush you don't even have to do that it's much harder to detect I'll come back to that a moment here's",
    "start": "2451170",
    "end": "2456690"
  },
  {
    "text": "here's that here's kind of how you how you would do it on most contemporary",
    "start": "2456690",
    "end": "2463440"
  },
  {
    "text": "processors there's either an instruction to do this or there's other ways you can you can achieve the same thing but you",
    "start": "2463440",
    "end": "2469050"
  },
  {
    "text": "you have a hype you have a very high precision time stamp counter the TSC on x86 machines I can read it I can do a",
    "start": "2469050",
    "end": "2476610"
  },
  {
    "text": "memory access I can read it again look at the Delta write I can see was that was was that location cached and we'll",
    "start": "2476610",
    "end": "2484980"
  },
  {
    "text": "come back to why that's important in a moment you had a question before I keep going do you want me to leave as long as",
    "start": "2484980",
    "end": "2502890"
  },
  {
    "text": "we had the problem that work we were yeah there was the ability to disable",
    "start": "2502890",
    "end": "2508680"
  },
  {
    "text": "and you said we didn't pay enough attention I wasn't b5 right 56 right we didn't pay",
    "start": "2508680",
    "end": "2513750"
  },
  {
    "text": "enough attention to time I always wanted you the OS guys also never happened so",
    "start": "2513750",
    "end": "2520230"
  },
  {
    "text": "what do you think that's right so I'll take attention because attendants are good I the the mitigation in Android one",
    "start": "2520230",
    "end": "2528599"
  },
  {
    "text": "of the mitigations we'll come back to",
    "start": "2528599",
    "end": "2542220"
  },
  {
    "text": "that so the the mitigation in Android by the way one of the things they said lat in December was we'll just turn off",
    "start": "2542220",
    "end": "2548460"
  },
  {
    "text": "access to high-precision timers will lie well out these deltas will deal with the statistical analysis part of it will",
    "start": "2548460",
    "end": "2554339"
  },
  {
    "text": "make it very very imprecise you can still time how long things take you can count cycles there's a lot you know I've",
    "start": "2554339",
    "end": "2560460"
  },
  {
    "text": "been pulling this out of them this is great guys but there's so many ways you can still you can still do this so",
    "start": "2560460",
    "end": "2566250"
  },
  {
    "text": "fundamentally anytime there it unintended I guess anytime there is a difference in the amount of time it",
    "start": "2566250",
    "end": "2572250"
  },
  {
    "text": "takes to do something and you can observe it you can infer very interesting things as a result so side",
    "start": "2572250",
    "end": "2579059"
  },
  {
    "text": "channels are very exciting they've been getting a lot of research in the last few years certainly as I said many",
    "start": "2579059",
    "end": "2585690"
  },
  {
    "text": "searching sets provide high resolution cycle accurate timers yes yes well no",
    "start": "2585690",
    "end": "2622650"
  },
  {
    "text": "it's not it has to already be in the TLB and I have a slide on that so will will will will answer it correct correct",
    "start": "2622650",
    "end": "2633510"
  },
  {
    "text": "that's a very good question I'm putting that in the stack as well because that is a I have a",
    "start": "2633510",
    "end": "2638580"
  },
  {
    "text": "specific point on that that's that's good you you depending on the",
    "start": "2638580",
    "end": "2644730"
  },
  {
    "text": "implementation you have to have it in the TLB as well as the l1 cache the guys at tu grass tell me no and every time",
    "start": "2644730",
    "end": "2652740"
  },
  {
    "text": "they tell me something I'm inclined to listen to them so but for some of the designs I've seen it certainly has to be",
    "start": "2652740",
    "end": "2657960"
  },
  {
    "text": "both in the TLB and the level one that's the only way I can make fruit meltdown",
    "start": "2657960",
    "end": "2663480"
  },
  {
    "text": "yes and we'll come back to the let's let's let's keep going we'll come back to that clarify why knowing whether",
    "start": "2663480",
    "end": "2670560"
  },
  {
    "text": "something is in the cache right right well so so I think for a lot of people",
    "start": "2670560",
    "end": "2679500"
  },
  {
    "text": "in in a building machines it was I you guys paid attention I'm not picking",
    "start": "2679500",
    "end": "2684570"
  },
  {
    "text": "on a particular person here but you know you might think well it doesn't really matter right what we're gonna see the next few slides is you know why that is",
    "start": "2684570",
    "end": "2692370"
  },
  {
    "text": "a key insight that that really makes some of these attacks possible so so we can we can measure cache behavior we",
    "start": "2692370",
    "end": "2699780"
  },
  {
    "text": "might have convenient instructions they're very nice give me a CL flush people say well why is CL flush there",
    "start": "2699780",
    "end": "2705210"
  },
  {
    "text": "why can't I flush stuff out of my cache well the reality is I can also flush something from the cache by doing what's",
    "start": "2705210",
    "end": "2710400"
  },
  {
    "text": "called a displacement flush I can make another data structure that sits here I happen to know where it's gonna sit in",
    "start": "2710400",
    "end": "2716400"
  },
  {
    "text": "my cache when I access it and so I don't even need an instruction I can still force things to evict from my cache",
    "start": "2716400",
    "end": "2721860"
  },
  {
    "text": "there's there's no way to hide from from this yeah exactly and I've got a row hammer piece as well",
    "start": "2721860",
    "end": "2728820"
  },
  {
    "text": "so this is cool all right let's keep going some processors also provide we touched on",
    "start": "2728820",
    "end": "2735390"
  },
  {
    "start": "2731000",
    "end": "2790000"
  },
  {
    "text": "prefetching it means to prefetch data that will be needed soon usually through",
    "start": "2735390",
    "end": "2741660"
  },
  {
    "text": "hint instructions they might be we have to go too much into not space stuff but these instructions may or may not do",
    "start": "2741660",
    "end": "2748290"
  },
  {
    "text": "something right they they're their hints I may use this beta sometime soon and in",
    "start": "2748290",
    "end": "2754710"
  },
  {
    "text": "fact you can time prefetches as well and this actual became a problem in linux a",
    "start": "2754710",
    "end": "2762090"
  },
  {
    "text": "number of years ago because it would insert a prefetch for pointers it was",
    "start": "2762090",
    "end": "2768090"
  },
  {
    "text": "about it was likely to use soon and it was discovered that every time there was a null enter that prefetch would take too long",
    "start": "2768090",
    "end": "2775769"
  },
  {
    "text": "and so Linux removed the use of this prefetch precisely because you could",
    "start": "2775769",
    "end": "2781049"
  },
  {
    "text": "actually infer the amount of time for a pointer access so it's very interesting that what we've seen over the last few",
    "start": "2781049",
    "end": "2787049"
  },
  {
    "text": "years so here's some examples of how you would use prefetches let's keep going I",
    "start": "2787049",
    "end": "2792180"
  },
  {
    "start": "2790000",
    "end": "3132000"
  },
  {
    "text": "don't go to branch prediction so here's",
    "start": "2792180",
    "end": "2797220"
  },
  {
    "text": "a slide I think you guys probably don't need it uh you know frequently we have",
    "start": "2797220",
    "end": "2805950"
  },
  {
    "text": "program control flow instructions where we need to change the flow of execution based on some condition right when if we",
    "start": "2805950",
    "end": "2816000"
  },
  {
    "text": "do this we're going to have a either",
    "start": "2816000",
    "end": "2821240"
  },
  {
    "text": "inconsequential or significant hit to our pipeline depending on the outcome right if we'll talk a bit more in a",
    "start": "2821240",
    "end": "2830279"
  },
  {
    "text": "moment about speculation but if I go down a branch if I go down a path of code execution and it's the wrong path",
    "start": "2830279",
    "end": "2836690"
  },
  {
    "text": "going back the right way you know the Chinese proverb is no matter how far",
    "start": "2836690",
    "end": "2842819"
  },
  {
    "text": "down the wrong path you've gone turn back right but that may be expensive so there is some benefit in predicting",
    "start": "2842819",
    "end": "2850549"
  },
  {
    "text": "which way code is going to go and I'll talk about two kinds of branch here conditional branches which is really",
    "start": "2850549",
    "end": "2857099"
  },
  {
    "text": "your classic if statement if this value then do this otherwise do that that",
    "start": "2857099",
    "end": "2863609"
  },
  {
    "text": "would be a conditional some instruction sets lets you encode actually the likely",
    "start": "2863609",
    "end": "2869640"
  },
  {
    "text": "outcome from branches most x86 processors ignore those now because actually it's better for the hardware to",
    "start": "2869640",
    "end": "2876059"
  },
  {
    "text": "figure it out but you you you will see in OS software things like if likely",
    "start": "2876059",
    "end": "2881970"
  },
  {
    "text": "this well that will do nothing on most processors now but it used to do things",
    "start": "2881970",
    "end": "2888710"
  },
  {
    "text": "okay okay so I'll touch on speculation I'll come back to branch prediction of",
    "start": "2893630",
    "end": "2899460"
  },
  {
    "text": "it more so speculation is an extension of I'm trying to cram a lot here into an",
    "start": "2899460",
    "end": "2905339"
  },
  {
    "text": "hour speculation is an extension of out-of-order machines right so so speculation is basically layering on the",
    "start": "2905339",
    "end": "2911849"
  },
  {
    "text": "out of order mechanics that I have in my machine and it's saying that if I",
    "start": "2911849",
    "end": "2918770"
  },
  {
    "text": "reasonably believe that I'm going to execute a particular path of code follow a branch then let's abuse the fact that",
    "start": "2918770",
    "end": "2927750"
  },
  {
    "text": "we have all this infrastructure to run programs further ahead let's start",
    "start": "2927750",
    "end": "2933210"
  },
  {
    "text": "tagging entries in my Ryota buffer this is before the instruction has retired so before it's become architects revisit",
    "start": "2933210",
    "end": "2939720"
  },
  {
    "text": "ball let's tag them as speculative let's say I'm not sure if that actually is the way the program is going to go but let's",
    "start": "2939720",
    "end": "2945030"
  },
  {
    "text": "keep running it ahead let's tag these instructions as being speculative in nature the key things here are don't",
    "start": "2945030",
    "end": "2952560"
  },
  {
    "text": "update don't update the architectural state don't make it visible apparently that's the plan didn't quite work that",
    "start": "2952560",
    "end": "2958260"
  },
  {
    "text": "way but that was the idea and stores to memory will be filed away in my internal",
    "start": "2958260",
    "end": "2966990"
  },
  {
    "text": "structures they won't actually make it out to memory until that instruction retires exceptions caused by my code",
    "start": "2966990",
    "end": "2976050"
  },
  {
    "text": "that's running speculatively will not be raised until retirement until the",
    "start": "2976050",
    "end": "2981089"
  },
  {
    "text": "instruction actually becomes committed then I can't report something that may",
    "start": "2981089",
    "end": "2989220"
  },
  {
    "text": "not happen right you try to load something but you didn't actually because they did it speculatively I",
    "start": "2989220",
    "end": "2995369"
  },
  {
    "text": "can't blame you for that because I don't know if that's the thing you actually want to do right so I have to tag that also in my reel to buffer and say that I",
    "start": "2995369",
    "end": "3003410"
  },
  {
    "text": "have an exception if this becomes the path that I'm really going to take then I may have to deal with that well that's",
    "start": "3003410",
    "end": "3012260"
  },
  {
    "text": "the that's that's the that's the piece we're going to come to you and then some people made a mistake with that yeah I",
    "start": "3012260",
    "end": "3031670"
  },
  {
    "text": "came first yeah I think it did because how he did",
    "start": "3031670",
    "end": "3037539"
  },
  {
    "text": "every company is evolving and many microcontrollers are gonna work out and have speculation right right absolutely",
    "start": "3037539",
    "end": "3043899"
  },
  {
    "text": "why men run ahead as well in order sheets are new yeah well I don't think",
    "start": "3043899",
    "end": "3050529"
  },
  {
    "text": "they by the way I don't think they are a lot of them Thunderball as well yes yes",
    "start": "3050529",
    "end": "3056469"
  },
  {
    "text": "right that's kind of one of the things I'm trying to say here okay so branch prediction let's come",
    "start": "3056469",
    "end": "3065439"
  },
  {
    "text": "back to that so if I'm if I'm implementing prediction of branches what",
    "start": "3065439",
    "end": "3074199"
  },
  {
    "text": "I'm going to do is I'm going to look at a particular branch and I'm gonna say let me let me speculate that it's going",
    "start": "3074199",
    "end": "3081130"
  },
  {
    "text": "to go this way right so if that's true then I start tagging the instructions as",
    "start": "3081130",
    "end": "3086709"
  },
  {
    "text": "speculative I followed down the path and hopefully all things are good if it's",
    "start": "3086709",
    "end": "3093099"
  },
  {
    "text": "not the way the code actually ends up going right so so I'm got this condition I'm waiting for the branch to resolve",
    "start": "3093099",
    "end": "3100419"
  },
  {
    "text": "and waiting for the condition to to find out if this branch is going to be the way I go if it was incorrect then I have",
    "start": "3100419",
    "end": "3108039"
  },
  {
    "text": "to throw away everything I did I'll have to return my state there's some",
    "start": "3108039",
    "end": "3114249"
  },
  {
    "text": "optimizations for how to do that but have to return my state to where it was and I'll have to go down the correct branch and what you hope is that there's",
    "start": "3114249",
    "end": "3121029"
  },
  {
    "text": "a performance hit from doing this although it's small and you this is a",
    "start": "3121029",
    "end": "3126759"
  },
  {
    "text": "black box so in theory it's not visible to anybody else we'll come on to how that's not necessarily true I've got a",
    "start": "3126759",
    "end": "3135159"
  },
  {
    "start": "3132000",
    "end": "3159000"
  },
  {
    "text": "couple of slides here I might skip an interest of time about conditional and indirect branches but you know these are",
    "start": "3135159",
    "end": "3140380"
  },
  {
    "text": "examples of conditional branches for example you could have a loop load a",
    "start": "3140380",
    "end": "3147039"
  },
  {
    "text": "value into a register you know run through a loop you compare the condition",
    "start": "3147039",
    "end": "3152709"
  },
  {
    "text": "every time and you may jump backwards r2 to repeat the loop well someone's going",
    "start": "3152709",
    "end": "3158979"
  },
  {
    "text": "to point this out but actually you know common common processors have",
    "start": "3158979",
    "end": "3164709"
  },
  {
    "start": "3159000",
    "end": "3441000"
  },
  {
    "text": "optimizations so you don't actually have to deal with loops and in reality um there's a lot of correlation",
    "start": "3164709",
    "end": "3171190"
  },
  {
    "text": "between branches and programs right so one of the insights that people",
    "start": "3171190",
    "end": "3176290"
  },
  {
    "text": "designing processors found is that if you look at history you can guess which",
    "start": "3176290",
    "end": "3183370"
  },
  {
    "text": "way you're gonna go in the future right you can say the last few times I executed this well this looks a lot like",
    "start": "3183370",
    "end": "3189340"
  },
  {
    "text": "a loop and as you'll see later you know some processors will just have a loop predictor and they will say well this is",
    "start": "3189340",
    "end": "3194770"
  },
  {
    "text": "obviously a loop I'm not even going to bother with with the standard hardware for that but you'll look at a branch and",
    "start": "3194770",
    "end": "3200170"
  },
  {
    "text": "you'll say the last hundred times I executed this I went that way right there's a high chance I'm going to do",
    "start": "3200170",
    "end": "3205180"
  },
  {
    "text": "the same thing next time so we have these predictors which will tag the",
    "start": "3205180",
    "end": "3210370"
  },
  {
    "text": "history of a particular path of execution particular way a branch went",
    "start": "3210370",
    "end": "3215740"
  },
  {
    "text": "and they will try to infer where it is going to go the next time they can be",
    "start": "3215740",
    "end": "3222640"
  },
  {
    "text": "very complicated in their design so you know a good predictor could be up to 99",
    "start": "3222640",
    "end": "3229180"
  },
  {
    "text": "percent accurate and it may use both local branch information as well as",
    "start": "3229180",
    "end": "3235330"
  },
  {
    "text": "global branch information so in other words there's a number of pieces of research that suggests that branches",
    "start": "3235330",
    "end": "3242740"
  },
  {
    "text": "don't behave in isolation this intuitively makes sense if I have a bunch of conditions one after the other",
    "start": "3242740",
    "end": "3247990"
  },
  {
    "text": "they are dependent on that chain so I'm",
    "start": "3247990",
    "end": "3253930"
  },
  {
    "text": "a tag I'm a keep track of the overall set of branches in in this hardware",
    "start": "3253930",
    "end": "3262900"
  },
  {
    "text": "structure the branch predictor hardware what I also want to do is I want to",
    "start": "3262900",
    "end": "3268480"
  },
  {
    "text": "optimize it I want to keep track of which way branches went but I want to save resources I want to save using huge",
    "start": "3268480",
    "end": "3277090"
  },
  {
    "text": "amounts of RAM on the processor so I may not use the full address of an",
    "start": "3277090",
    "end": "3282970"
  },
  {
    "text": "apprentice a branch in my branch prediction hardware so I'm going to keep the history of branches but I'm going to",
    "start": "3282970",
    "end": "3289180"
  },
  {
    "text": "either hash that branch address or I'm going to use just part of the branch",
    "start": "3289180",
    "end": "3294640"
  },
  {
    "text": "address and keeping track of history this is a key insight to why why Spectre happens that we'll get to in a minute",
    "start": "3294640",
    "end": "3301590"
  },
  {
    "text": "yes",
    "start": "3301590",
    "end": "3304590"
  },
  {
    "text": "that's what the code is it's it's virtual memory when the program is running so you UK oh you're right you",
    "start": "3306770",
    "end": "3312750"
  },
  {
    "text": "can that's true enough you can you can tag on a physical address I'm just talking about one kind of implementation",
    "start": "3312750",
    "end": "3319290"
  },
  {
    "text": "it's true enough you can actually do",
    "start": "3319290",
    "end": "3323030"
  },
  {
    "text": "well well we should we should take this after cuz cuz III certainly have some",
    "start": "3332180",
    "end": "3337800"
  },
  {
    "text": "some things I can't talk about here that relate to that but but you're right people do sometimes use physical",
    "start": "3337800",
    "end": "3343740"
  },
  {
    "text": "addresses you can still have problems for that reason and also because frankly I can write code that you know I can",
    "start": "3343740",
    "end": "3350730"
  },
  {
    "text": "it's pretty difficult to do but I can arrange for the same physical address to get used in two different places that",
    "start": "3350730",
    "end": "3356310"
  },
  {
    "text": "it's possible but we maybe we'll come back to that in the Q&A session I want",
    "start": "3356310",
    "end": "3362490"
  },
  {
    "text": "to point out anyone who's not sort of studied branch predictors go and read I read the slides after you'll see gshare",
    "start": "3362490",
    "end": "3368490"
  },
  {
    "text": "and some of these common designs that are used in in branch prediction hardware we want to optimize it so we",
    "start": "3368490",
    "end": "3375450"
  },
  {
    "text": "might not use the full address we also do indirect branch prediction so indirect prediction is when I follow a",
    "start": "3375450",
    "end": "3382160"
  },
  {
    "text": "function pointer into into a virtual method something like this I don't know",
    "start": "3382160",
    "end": "3388230"
  },
  {
    "text": "where I'm going to go ahead of time it's not just a conditional branch it could be a branch to anywhere there's also",
    "start": "3388230",
    "end": "3394080"
  },
  {
    "text": "some fairly fancy hardware that can guess ahead of time where indirect",
    "start": "3394080",
    "end": "3399960"
  },
  {
    "text": "branches are going to go they turn out to be you know in the spectral literature they talk a lot about",
    "start": "3399960",
    "end": "3405690"
  },
  {
    "text": "indirect branches but actually direct branches can also be a problem but we'll",
    "start": "3405690",
    "end": "3410730"
  },
  {
    "text": "find out more in a minute about why indirect branches are a particular source of a problem when you can abuse",
    "start": "3410730",
    "end": "3417510"
  },
  {
    "text": "them and that's because indirect branches could really jump to anywhere right I'm foreshadowing a bit but I want",
    "start": "3417510",
    "end": "3424800"
  },
  {
    "text": "you to think there's different kinds of branches different kinds of predictors the average microprocessor will have",
    "start": "3424800",
    "end": "3429870"
  },
  {
    "text": "many many different predictors and they may all have to come to a consensus there may be another",
    "start": "3429870",
    "end": "3436770"
  },
  {
    "text": "meta predictor that decides which which one's the correct one to use okay let's",
    "start": "3436770",
    "end": "3442680"
  },
  {
    "start": "3441000",
    "end": "3599000"
  },
  {
    "text": "keep going I think I'm gonna let you guys read that later on so let's I think",
    "start": "3442680",
    "end": "3448500"
  },
  {
    "text": "we've got enough the background so let's go into meltdown inspector now so we get time to get to questions so so these",
    "start": "3448500",
    "end": "3456120"
  },
  {
    "text": "vulnerabilities and their CVE numbers are there these are branded vulnerabilities that",
    "start": "3456120",
    "end": "3462420"
  },
  {
    "text": "were discovered in common industry-wide optimizations of the techniques I just",
    "start": "3462420",
    "end": "3470670"
  },
  {
    "text": "described right there's nothing inherently wrong with you know branch",
    "start": "3470670",
    "end": "3476430"
  },
  {
    "text": "prediction or speculation or out of order machines they're all good ideas the problem is that some implementations",
    "start": "3476430",
    "end": "3484050"
  },
  {
    "text": "have been found to be vulnerable to side channel analysis and the media is very",
    "start": "3484050",
    "end": "3490770"
  },
  {
    "text": "keen to say that it's the end of the world you know the media is very keen to say lots of things and that usually",
    "start": "3490770",
    "end": "3495960"
  },
  {
    "text": "happens when you have a branded vulnerability that comes with a cute logo right we we we we knew but by the",
    "start": "3495960",
    "end": "3503640"
  },
  {
    "text": "way so I knew it was the guys at tu grads working on this because for",
    "start": "3503640",
    "end": "3511140"
  },
  {
    "text": "reasons and so I actually sent them an email a few weeks ago and I said you",
    "start": "3511140",
    "end": "3516870"
  },
  {
    "text": "know guys when you register Internet domains don't use your own name and your",
    "start": "3516870",
    "end": "3524280"
  },
  {
    "text": "institution because if I'm watching you since some time before your public",
    "start": "3524280",
    "end": "3530400"
  },
  {
    "text": "disclosure and I'm looking at everything you register I might see when you register these cute domains so they've",
    "start": "3530400",
    "end": "3536760"
  },
  {
    "text": "actually changed the registrations and remove their names from it now but I did enjoy doing a side channel analysis yeah",
    "start": "3536760",
    "end": "3546900"
  },
  {
    "text": "we knew what was coming yeah we're able to infer the the name before they before they launched it",
    "start": "3546900",
    "end": "3552960"
  },
  {
    "text": "that's that's a cute side story for you so they came with cute names and logos which always is worrying",
    "start": "3552960",
    "end": "3560280"
  },
  {
    "text": "they exploit these features but we don't have to panic and throw out all of our toys right we don't have to get rid of",
    "start": "3560280",
    "end": "3565680"
  },
  {
    "text": "them we just have to deal with these if you are on a linux or when",
    "start": "3565680",
    "end": "3570780"
  },
  {
    "text": "machine if you're running a very recent Linux kernel you could run that command and you would see we now have a fun",
    "start": "3570780",
    "end": "3578790"
  },
  {
    "text": "directory filled with CPU vulnerabilities because we think there might be more in the future and so now",
    "start": "3578790",
    "end": "3585840"
  },
  {
    "text": "there's a handy-dandy way to find what is your chip vulnerable to today right and what are we doing to fix it",
    "start": "3585840",
    "end": "3592890"
  },
  {
    "text": "so maybe maybe look that up later on and it will also tell you which mitigations are being used on your hardware",
    "start": "3592890",
    "end": "3599790"
  },
  {
    "text": "if you're on Windows there's things you can do if you're on a Mac I have no idea I think you can do something so let's",
    "start": "3599790",
    "end": "3606570"
  },
  {
    "text": "talk through the the specter and meltdown variant so Spectre variant one we just knew these by the way as",
    "start": "3606570",
    "end": "3613530"
  },
  {
    "text": "variants one two and three for a long time right they got the cute names later we were guessing what they would be but we",
    "start": "3613530",
    "end": "3619800"
  },
  {
    "text": "only ever knew of the three main variants so yeah the both Spectre v12",
    "start": "3619800",
    "end": "3630600"
  },
  {
    "text": "and to an extent meltdown they rely on particular code sequences right as I",
    "start": "3630600",
    "end": "3637110"
  },
  {
    "text": "said if if to your question about you know why is it important if you can tell",
    "start": "3637110",
    "end": "3642840"
  },
  {
    "text": "what's in the cache well maybe I'll maybe I'll jump to the the the meltdown piece and we'll come",
    "start": "3642840",
    "end": "3650760"
  },
  {
    "text": "back to Spector maybe that will help actually let's do meltdown first we'll come back to Spector so meltdown",
    "start": "3650760",
    "end": "3658940"
  },
  {
    "text": "effectively if you are a literal implementation of Tomasulo if you are literally implementing it sort of by the",
    "start": "3659120",
    "end": "3665760"
  },
  {
    "text": "book and you haven't read Appendix B of computer architecture page 37 or around",
    "start": "3665760",
    "end": "3671880"
  },
  {
    "text": "there where it talks about this and how not to do it then you may you may handle",
    "start": "3671880",
    "end": "3681750"
  },
  {
    "text": "any exceptions that arise at instruction retirement so that's the first piece",
    "start": "3681750",
    "end": "3687680"
  },
  {
    "text": "second pieces you may do your permission checks in parallel with actually",
    "start": "3687680",
    "end": "3692910"
  },
  {
    "text": "performing any kind of load that's the second piece of that's the other piece that you need and then if you do that a",
    "start": "3692910",
    "end": "3701630"
  },
  {
    "text": "race condition could exist between what you you you did you did",
    "start": "3701630",
    "end": "3708309"
  },
  {
    "text": "this load you're not allowed to do it but I did it for you anyway I tagged it",
    "start": "3708309",
    "end": "3713589"
  },
  {
    "text": "so if that instruction ever actually retires then we're good I'm gonna take an exception and the OS is gonna slap",
    "start": "3713589",
    "end": "3720490"
  },
  {
    "text": "you and say don't do that and it's gonna kill your program but in that window there there is a period of time where",
    "start": "3720490",
    "end": "3726670"
  },
  {
    "text": "that load has happened and future instructions might be able to do something with it so what could they do",
    "start": "3726670",
    "end": "3733569"
  },
  {
    "text": "well here's an example this is from my own reproducer so I spent um tail end of",
    "start": "3733569",
    "end": "3740109"
  },
  {
    "text": "last year I didn't sleep much for the last few months and buy my Fitbit knows",
    "start": "3740109",
    "end": "3745930"
  },
  {
    "text": "that it said your heart rates 20 percent higher than yeah I know so we've been",
    "start": "3745930",
    "end": "3751839"
  },
  {
    "text": "sort of neck-deep in mitigations for a long time here what what semi reproducer",
    "start": "3751839",
    "end": "3760089"
  },
  {
    "text": "here is very very ugly but what it does is basically say look I'm going to try to access a pointer I shouldn't be to access I'm then going to take the value",
    "start": "3760089",
    "end": "3768309"
  },
  {
    "text": "that I read that I can't read but I can because I'm not going to handle that right now and I'm going to do some mask",
    "start": "3768309",
    "end": "3776920"
  },
  {
    "text": "I'm gonna do something with that value and I'm then gonna access another piece of data based on the value of the data",
    "start": "3776920",
    "end": "3787690"
  },
  {
    "text": "that I wanted to read right the actual content of the privileged data that I wanted to read right and if I do it this",
    "start": "3787690",
    "end": "3795490"
  },
  {
    "text": "way there are better ways to do it that's the way I did it I can say I'd like to read this single bit from some",
    "start": "3795490",
    "end": "3802240"
  },
  {
    "text": "privileged data that I don't have access to right I'll load the value I'll figure",
    "start": "3802240",
    "end": "3810400"
  },
  {
    "text": "out which bid I want I'll mask it off is it a one is it a zero if it's one I access one memory location if it's",
    "start": "3810400",
    "end": "3817839"
  },
  {
    "text": "another if it's a zero access the other memory location then I have some code that sits there in its own sweet time",
    "start": "3817839",
    "end": "3823200"
  },
  {
    "text": "measuring how long it took to read from one location or the other and since I've",
    "start": "3823200",
    "end": "3830200"
  },
  {
    "text": "pre flushed those ahead of time I know that neither of them is in my cache I can then measure to see which of those",
    "start": "3830200",
    "end": "3835900"
  },
  {
    "text": "two is in my cache and I can see what the speculative load was if I rinse and repeat this many many",
    "start": "3835900",
    "end": "3843670"
  },
  {
    "text": "times then I can dump memory effectively and I can dump pretty much you know",
    "start": "3843670",
    "end": "3850180"
  },
  {
    "text": "whatever I want now there are some conditions as we talked about that that may or may not have to be present so I",
    "start": "3850180",
    "end": "3855640"
  },
  {
    "text": "found on some unnamed architectures because it's not just there's lots of",
    "start": "3855640",
    "end": "3861759"
  },
  {
    "text": "architectures impacted here on some implementations are of speculation it may be not as aggressive you may have to",
    "start": "3861759",
    "end": "3868990"
  },
  {
    "text": "have the data in the l1t cache you may have to have a TLB for that address",
    "start": "3868990",
    "end": "3874390"
  },
  {
    "text": "already that's not a given actually but but those conditions may be required I",
    "start": "3874390",
    "end": "3882390"
  },
  {
    "text": "think yeah so you know so so I'm I'm I'm separating the the privilege check from",
    "start": "3882390",
    "end": "3889930"
  },
  {
    "text": "the actual data access as a consequence I can infer what values are there and by the way I do the accesses in in I didn't",
    "start": "3889930",
    "end": "3897700"
  },
  {
    "text": "put it in there I do the accesses in reverse order because the hardware does lots of other things underneath it it has a thing called prefetching where",
    "start": "3897700",
    "end": "3904859"
  },
  {
    "text": "it'll it'll say well you access this location you probably access the next cache line very soon so I'm actually do",
    "start": "3904859",
    "end": "3910869"
  },
  {
    "text": "them in Reverse to try to fool it probably they they're smart anyway and figure that out as well but I'm able to",
    "start": "3910869",
    "end": "3919420"
  },
  {
    "text": "read memory very slowly with my implementation the one that you'll see publicly from the researchers I think is much more performant but they both",
    "start": "3919420",
    "end": "3925599"
  },
  {
    "text": "achieve the same thing let's go to the how you mitigate meltdown that's a good",
    "start": "3925599",
    "end": "3944470"
  },
  {
    "text": "point well I can try to I could try to unwind that a little bit so you know",
    "start": "3944470",
    "end": "3951910"
  },
  {
    "text": "I've got this value I want to read right I've got this privileged value I want to read and you know it's it consists of",
    "start": "3951910",
    "end": "3960910"
  },
  {
    "text": "bits it consists of say 32 bits of data right what I can do is I can read one",
    "start": "3960910",
    "end": "3966809"
  },
  {
    "text": "sub bit one bit of that data at a time in this in my particular attack what I'm gonna",
    "start": "3966809",
    "end": "3974380"
  },
  {
    "text": "do is I'm gonna take the the the value that I'm not entitled to access I'm going to take each little bit of that",
    "start": "3974380",
    "end": "3982510"
  },
  {
    "text": "value and I'm going to individually work out what the value of that bit was and",
    "start": "3982510",
    "end": "3987789"
  },
  {
    "text": "I'm going to do it by not masking it off",
    "start": "3987789",
    "end": "3993430"
  },
  {
    "text": "by by taking only the bit I want and based on that single bit I'm going to",
    "start": "3993430",
    "end": "3998740"
  },
  {
    "text": "perform a second memory access which I'm going to time okay and then in my it's in my implementation i reconstruct all",
    "start": "3998740",
    "end": "4007289"
  },
  {
    "text": "32 bits of every single piece of memory i want to read by repeating this many",
    "start": "4007289",
    "end": "4014549"
  },
  {
    "text": "many times there are more efficient implementations that exist that actually",
    "start": "4014549",
    "end": "4020690"
  },
  {
    "text": "read memory much faster than this example and they do a in the the",
    "start": "4020690",
    "end": "4028650"
  },
  {
    "text": "implementations is much faster right this is this was me in in december frantically trying to figure out how the",
    "start": "4028650",
    "end": "4034619"
  },
  {
    "text": "heck does this work and not having any of the public you know information so I",
    "start": "4034619",
    "end": "4075690"
  },
  {
    "text": "think we're I think we're we're running on time that's why I'm trying to keep keep going here so okay I'm going to",
    "start": "4075690",
    "end": "4081150"
  },
  {
    "text": "talk about the specter variant one invariant to I'm sorry okay sorry",
    "start": "4081150",
    "end": "4087359"
  },
  {
    "text": "indication okay okay so mitigating",
    "start": "4087359",
    "end": "4092450"
  },
  {
    "text": "mitigating meltdown okay so mitigating meltdown you know as",
    "start": "4092450",
    "end": "4098088"
  },
  {
    "text": "I said the there there are certain preconditions required to exploit meltdown you have to have you have to",
    "start": "4098089",
    "end": "4108469"
  },
  {
    "text": "have the condition in which the data is accessible to the code that may run",
    "start": "4108469",
    "end": "4113988"
  },
  {
    "text": "speculatively if you can remove the",
    "start": "4113989",
    "end": "4119199"
  },
  {
    "text": "environment from which speculating code can actually perform that load then you",
    "start": "4119199",
    "end": "4125540"
  },
  {
    "text": "can prevent you know you're not fixing it you're not fixing the silicon but you're mitigating it you're making that",
    "start": "4125540",
    "end": "4130670"
  },
  {
    "text": "those circumstances are impossible and so one of the primary mitigations that",
    "start": "4130670",
    "end": "4136400"
  },
  {
    "text": "we use that's expensive is we change how we set up the operating system page",
    "start": "4136400",
    "end": "4142068"
  },
  {
    "text": "tables and we split them so instead of having a page table for every",
    "start": "4142069",
    "end": "4149088"
  },
  {
    "text": "application that shared with the kernel that that's shared with the operating system what I do now is I have for every",
    "start": "4149089",
    "end": "4156349"
  },
  {
    "text": "program I have one set of page tables for the program and one set of page tables for the operating system for the",
    "start": "4156349",
    "end": "4162109"
  },
  {
    "text": "kernel every time I go into the operating system to do something I switch the page tables so there never",
    "start": "4162109",
    "end": "4169068"
  },
  {
    "text": "it's never the case that I have the same virtual memory environment active is",
    "start": "4169069",
    "end": "4175278"
  },
  {
    "text": "never the case that I would have kernel addresses visible from the from the",
    "start": "4175279",
    "end": "4180798"
  },
  {
    "text": "applications address space I double up my page tables and I take this expensive",
    "start": "4180799",
    "end": "4185900"
  },
  {
    "text": "hit every time I go into your out of my kernel I have to do a switch yes well I",
    "start": "4185900",
    "end": "4192008"
  },
  {
    "text": "mentioned earlier there's an optimization PC IDs and assets so I might not have to flush all of them",
    "start": "4192009",
    "end": "4198320"
  },
  {
    "text": "that's why on x86 for example processors",
    "start": "4198320",
    "end": "4203630"
  },
  {
    "text": "with the PC ID feature are going to become much more interesting now because it's multiple performant to implement it",
    "start": "4203630",
    "end": "4210500"
  },
  {
    "text": "when you have access to to these features",
    "start": "4210500",
    "end": "4215139"
  },
  {
    "text": "accessible correct because in we had",
    "start": "4222820",
    "end": "4232330"
  },
  {
    "text": "this whole debate I mean I think I'll think I'll save that question for for for later because I know we're running a long time yeah we we should we should",
    "start": "4232330",
    "end": "4243430"
  },
  {
    "text": "keep going because I want to I want to cover the specter variant 1 & 2 if I can in the time we have so so let's not",
    "start": "4243430",
    "end": "4252370"
  },
  {
    "text": "expect a variant 1 specter variant 1 is a bound to check by pass in in effect",
    "start": "4252370",
    "end": "4257860"
  },
  {
    "text": "what I do is I say I'm a I'm a have some",
    "start": "4257860",
    "end": "4264869"
  },
  {
    "text": "piece of data some some information passed from one context to another so",
    "start": "4264960",
    "end": "4270400"
  },
  {
    "text": "for example from application into the OS kernel to the operating system and normally what I do is I would perform a",
    "start": "4270400",
    "end": "4277480"
  },
  {
    "text": "bounced check from that to sanitize it and say I you know the user the",
    "start": "4277480",
    "end": "4282580"
  },
  {
    "text": "untrusted user gave me some value I should check if it lies within the",
    "start": "4282580",
    "end": "4287710"
  },
  {
    "text": "defined range however the program may continue to execute speculatively beyond",
    "start": "4287710",
    "end": "4294370"
  },
  {
    "text": "that bounced check meaning that if I were to find and the code here don't",
    "start": "4294370",
    "end": "4300970"
  },
  {
    "text": "worry too much about this exact code because it's pretty much the same kinds of code that you'll see for the meltdown",
    "start": "4300970",
    "end": "4306460"
  },
  {
    "text": "attack the point is if I can find a piece of code in that's already present",
    "start": "4306460",
    "end": "4312550"
  },
  {
    "text": "in in the operating system that already accesses some theory does this kind of",
    "start": "4312550",
    "end": "4317740"
  },
  {
    "text": "load sequence we talked about just now so I have to find a gadget I have to find some piece of code we called them",
    "start": "4317740",
    "end": "4323560"
  },
  {
    "text": "we call them gadgets I have to find some piece of code in the kernel that's gonna do what I want has to be there if I",
    "start": "4323560",
    "end": "4328750"
  },
  {
    "text": "don't if it's not there I can't do this but in the case of variant 1 of Spectre if I can find some little gadget where I",
    "start": "4328750",
    "end": "4336370"
  },
  {
    "text": "give you some unsanitized value and you're gonna keep speculating and you do some other load that impacts the cash I",
    "start": "4336370",
    "end": "4344320"
  },
  {
    "text": "might under very obscure circumstances possibly be able to read something and",
    "start": "4344320",
    "end": "4350100"
  },
  {
    "text": "reproducing this is a huge problem it's very very complex very very difficult it's it's been",
    "start": "4350100",
    "end": "4357060"
  },
  {
    "text": "kind of in the abstract like one time right that's enough to put it in a paper and and be a huge problem but but",
    "start": "4357060",
    "end": "4363850"
  },
  {
    "text": "actually creating expected variant 1 attacks is very difficult right we can",
    "start": "4363850",
    "end": "4370330"
  },
  {
    "text": "we can mitigate specter by inserting what we call context serializing",
    "start": "4370330",
    "end": "4378400"
  },
  {
    "text": "instructions so we can say after some bounce check condition I can put a",
    "start": "4378400",
    "end": "4384190"
  },
  {
    "text": "special instruction that normally exists in most architectures that's going to prevent the speculation beyond there",
    "start": "4384190",
    "end": "4390190"
  },
  {
    "text": "it's expensive but there are ways I can do it and the way I would do it is that",
    "start": "4390190",
    "end": "4395909"
  },
  {
    "text": "and in the case of x86 that's called elf fence it varies my architecture but the",
    "start": "4395909",
    "end": "4402969"
  },
  {
    "text": "only way to really mitigate this by the way is to go through my my software and actually change it right there are some",
    "start": "4402969",
    "end": "4408610"
  },
  {
    "text": "tools out there that can go through and some compilers are being modified to go and insert these sequences but right now",
    "start": "4408610",
    "end": "4414400"
  },
  {
    "text": "the mitigation is go and identify where these offending code paths are and we have source and binary scanners to do",
    "start": "4414400",
    "end": "4420550"
  },
  {
    "text": "this it's not easy go find where these are and go insert the right serializing instructions in in",
    "start": "4420550",
    "end": "4426969"
  },
  {
    "text": "just the right places it's it's it's it's painful the side channel this this",
    "start": "4426969",
    "end": "4436510"
  },
  {
    "text": "doesn't have a specific side channel what you're doing here is you're you're looking you have to find a piece of code",
    "start": "4436510",
    "end": "4442090"
  },
  {
    "text": "that already does something that you want it to do speculatively so if you look at the previous example we use with",
    "start": "4442090",
    "end": "4448179"
  },
  {
    "text": "meltdown performing a performing an access that you shouldn't be able to do and then using that value to do",
    "start": "4448179",
    "end": "4454000"
  },
  {
    "text": "something else you have to have a piece of code already present that that is",
    "start": "4454000",
    "end": "4459580"
  },
  {
    "text": "vulnerable by by doing by having a sequence of vulnerable instructions so",
    "start": "4459580",
    "end": "4464590"
  },
  {
    "text": "it doesn't just exist in in in the wild you have to have a specific set of code",
    "start": "4464590",
    "end": "4469980"
  },
  {
    "text": "that's in a more privileged application that you can exploit using this attack",
    "start": "4469980",
    "end": "4477030"
  },
  {
    "text": "yeah it's the same it's the same common theme yeah it's the same common theme it's all cash timing it's all the same",
    "start": "4480820",
    "end": "4491560"
  },
  {
    "text": "it's all the same attack its its variations as mean as that's why they called it variance right so yes if you",
    "start": "4491560",
    "end": "4506230"
  },
  {
    "text": "can find one and and let's keep going because I want to I want to finish the video piece then we'll get into the open",
    "start": "4506230",
    "end": "4511690"
  },
  {
    "text": "discussion so for for variant 2 what i can do as i mentioned earlier branch",
    "start": "4511690",
    "end": "4517840"
  },
  {
    "text": "predictor branch predictors may not fully disambiguate between different",
    "start": "4517840",
    "end": "4524650"
  },
  {
    "text": "branches I may have a branch predictor in which two different applications",
    "start": "4524650",
    "end": "4531780"
  },
  {
    "text": "running in two different virtual memory address spaces could have branches at",
    "start": "4531780",
    "end": "4538870"
  },
  {
    "text": "the same virtual addresses that the branch predictor can't really tell apart right so what I can do",
    "start": "4538870",
    "end": "4545800"
  },
  {
    "text": "inspector variant two is I can write a very crafty application which when it",
    "start": "4545800",
    "end": "4552580"
  },
  {
    "text": "runs is going to train the branch predictor to think that branches in in",
    "start": "4552580",
    "end": "4560500"
  },
  {
    "text": "the future are going to go a particular direction and in the case of indirect branches where it could be an offset it",
    "start": "4560500",
    "end": "4566560"
  },
  {
    "text": "could be guessing a an offset what I can do is I can train the branch predictor to speculatively jump to some offset",
    "start": "4566560",
    "end": "4574810"
  },
  {
    "text": "that I have control over if that offset is a gadget the same as variant one then",
    "start": "4574810",
    "end": "4581830"
  },
  {
    "text": "what I can do is I can have even more control now I don't have to look for a specific entry point into my privilege",
    "start": "4581830",
    "end": "4588220"
  },
  {
    "text": "code I can now look for any code sequence anywhere it doesn't have to be beginning of a function end of a",
    "start": "4588220",
    "end": "4593350"
  },
  {
    "text": "function anywhere I can look for any place where I see the instructions I want to exploit and I can have an",
    "start": "4593350",
    "end": "4599710"
  },
  {
    "text": "application which will train my branch predictor so that when I net when I next",
    "start": "4599710",
    "end": "4605200"
  },
  {
    "text": "run my kernel code on my OS code it thinks a particular branch is going to",
    "start": "4605200",
    "end": "4612670"
  },
  {
    "text": "go it's going to is going to is going to result in a piece of gadget code running",
    "start": "4612670",
    "end": "4617740"
  },
  {
    "text": "now creating the environment respective variant to is even harder than Spectre variant one and if you read the paper",
    "start": "4617740",
    "end": "4624730"
  },
  {
    "text": "that the Google guys published they were able to do this like one time and it took you know what is it two hours of",
    "start": "4624730",
    "end": "4630940"
  },
  {
    "text": "set-up time and a very special environment very contrived system that",
    "start": "4630940",
    "end": "4636190"
  },
  {
    "text": "they had full control over and and so you know the reality is this is very very difficult to exploit at this moment in time if it sounds difficult it is",
    "start": "4636190",
    "end": "4642670"
  },
  {
    "text": "very very difficult to exploit this so",
    "start": "4642670",
    "end": "4661840"
  },
  {
    "text": "you can do both you can have us you can have a an exploit across hyper threads if you've got a threaded core there's",
    "start": "4661840",
    "end": "4668380"
  },
  {
    "text": "also a very strong attack path there and I'll actually touch on that in a moment but that is also a significant problem",
    "start": "4668380",
    "end": "4675040"
  },
  {
    "text": "as well if you're using hyper threading I want to keep going because I know we're running on time and we can take this to a open discussion what we did",
    "start": "4675040",
    "end": "4681970"
  },
  {
    "text": "initially to mitigate variant two we used a big hammer initially so the big",
    "start": "4681970",
    "end": "4687610"
  },
  {
    "text": "hammer approach was simply to turn off the branch predictor when we were going",
    "start": "4687610",
    "end": "4693490"
  },
  {
    "text": "from one state into another that was less that was more privileged yes that's",
    "start": "4693490",
    "end": "4703030"
  },
  {
    "text": "what we do so so in fact ok I'm gonna let you read",
    "start": "4703030",
    "end": "4708190"
  },
  {
    "text": "about the millah code stuff later but on x86 what we did was we implemented something called IBRS indirect branch",
    "start": "4708190",
    "end": "4714100"
  },
  {
    "text": "restrict speculation and so on entry into the kernel we we touched this magic",
    "start": "4714100",
    "end": "4720330"
  },
  {
    "text": "control bit this model specific register and we turn off indirect branch",
    "start": "4720330",
    "end": "4727680"
  },
  {
    "text": "speculation while the kernel is running when we come back out of the kernel we come back to the application we turn it",
    "start": "4727680",
    "end": "4733960"
  },
  {
    "text": "back on again that's expensive because we don't get the benefit of branch of the branch predictor and even more than",
    "start": "4733960",
    "end": "4741790"
  },
  {
    "text": "that we we we have the cost of actually doing that operation",
    "start": "4741790",
    "end": "4748090"
  },
  {
    "text": "that operation is not inexpensive right yes maker so okay so we have another",
    "start": "4748090",
    "end": "4763380"
  },
  {
    "text": "another interface we added called IAB PB which flushes the branch predictor state",
    "start": "4763380",
    "end": "4768670"
  },
  {
    "text": "so what we do is we have exactly that we have a separate instruction and they could implicit be implemented the same",
    "start": "4768670",
    "end": "4775540"
  },
  {
    "text": "right there's different ways you can ferment it but but the second piece we do actually will flush the branch",
    "start": "4775540",
    "end": "4781300"
  },
  {
    "text": "predictor state and we do that when we switch from one process to another so we turn off spec we turn off the branch",
    "start": "4781300",
    "end": "4786820"
  },
  {
    "text": "predictor briefly when we're going to go into a more privileged state and we",
    "start": "4786820",
    "end": "4791890"
  },
  {
    "text": "whack the contents when we are switching from one process to another I'm gonna",
    "start": "4791890",
    "end": "4799150"
  },
  {
    "text": "get - I think I'll touch on rep Pauline's and then I think we can kind of take the rest to an open discussion",
    "start": "4799150",
    "end": "4804820"
  },
  {
    "text": "so there is something that Google invented are called rep Pauline's you",
    "start": "4804820",
    "end": "4810400"
  },
  {
    "text": "can read more about it later on but what they do is they turn indirect branches",
    "start": "4810400",
    "end": "4815440"
  },
  {
    "text": "into fake function returns so they say you know the old doctor joke right if it",
    "start": "4815440",
    "end": "4820900"
  },
  {
    "text": "hurts to do this and don't do it okay so if it if you can abuse indirect function",
    "start": "4820900",
    "end": "4826840"
  },
  {
    "text": "calls to I with with a malicious",
    "start": "4826840",
    "end": "4831880"
  },
  {
    "text": "poisoning of your branch predictor replace every indirect function call with a different piece of code that",
    "start": "4831880",
    "end": "4837460"
  },
  {
    "text": "doesn't use that doesn't rely on the same hardware and what what what Google",
    "start": "4837460",
    "end": "4843670"
  },
  {
    "text": "came up with was this construct and I'll let you guys read the link to the paper",
    "start": "4843670",
    "end": "4849510"
  },
  {
    "text": "I won't there's not time to go through the the code here but what what Google came up with is this idea that",
    "start": "4849550",
    "end": "4854860"
  },
  {
    "text": "effectively I I i hack through the the",
    "start": "4854860",
    "end": "4861690"
  },
  {
    "text": "program state so that we think we're returning from a function when we return",
    "start": "4861690",
    "end": "4868060"
  },
  {
    "text": "from that function what we're actually going to do is we're going to call the thing we wanted to call and they they",
    "start": "4868060",
    "end": "4873850"
  },
  {
    "text": "set this up so that you'll you'll see there are those you guys see we're sort of assembly folks you'll see that it",
    "start": "4873850",
    "end": "4879100"
  },
  {
    "text": "says capture specs what they do is they they literally set up the speculation so that it will",
    "start": "4879100",
    "end": "4884170"
  },
  {
    "text": "it will think it's in an infinite loop calling a pause instruction branching to",
    "start": "4884170",
    "end": "4889449"
  },
  {
    "text": "itself in an infinite loop if it speculates it's a cute hack the Google guys are really great coming up with",
    "start": "4889449",
    "end": "4894699"
  },
  {
    "text": "that and as a result what we can do for our respective variant two is we can",
    "start": "4894699",
    "end": "4900640"
  },
  {
    "text": "modify our compilers to emit this code sequence instead of turning off our",
    "start": "4900640",
    "end": "4906429"
  },
  {
    "text": "branch predictor and that brings back a lot of the performance that we we lose by by using the the control interfaces",
    "start": "4906429",
    "end": "4914969"
  },
  {
    "text": "I'm going to keep going past I think we're almost done with the kind of main content there is a variant of melt there",
    "start": "4914969",
    "end": "4922840"
  },
  {
    "text": "is another variant covariant 3a which lets you read registers you're not supposed to access I'll let you guys",
    "start": "4922840",
    "end": "4928000"
  },
  {
    "text": "kind of go through that final prepared slide I related research so you know",
    "start": "4928000",
    "end": "4936040"
  },
  {
    "text": "these these exploits don't exist in isolation there's another set of attacks",
    "start": "4936040",
    "end": "4941560"
  },
  {
    "text": "we're done previously called row hammer right which someone mentioned earlier that's another example of a hardware",
    "start": "4941560",
    "end": "4948400"
  },
  {
    "text": "specific attack there's another yet another interesting one I've seen are called magic which they were able to",
    "start": "4948400",
    "end": "4956949"
  },
  {
    "text": "come up with particular sequences of instructions which when you executed",
    "start": "4956949",
    "end": "4962890"
  },
  {
    "text": "them on a particular opensparc processor could artificially age it which is",
    "start": "4962890",
    "end": "4968830"
  },
  {
    "text": "pretty crazy actually but they were able to do it and they were able to reduce performance by 10% in a matter of weeks",
    "start": "4968830",
    "end": "4975929"
  },
  {
    "text": "by running carefully-crafted instruction sequences so the bottom line is you know",
    "start": "4975929",
    "end": "4982360"
  },
  {
    "text": "meltdown inspector are kind of interesting right they're the flavor of the month right now we're dealing with those but there are tons of other pieces",
    "start": "4982360",
    "end": "4992410"
  },
  {
    "text": "of related research going on and and novel attacks are being found all the time well well you know I mean the thing",
    "start": "4992410",
    "end": "5002910"
  },
  {
    "text": "is that ones just an ACM paper and you know no one gave it a cute logo right so so I mean I'm very serious right that's",
    "start": "5002910",
    "end": "5010020"
  },
  {
    "text": "a last point I sort of I'll make is you know yeah if you come up with",
    "start": "5010020",
    "end": "5015780"
  },
  {
    "text": "attack if you give it a cute name in a logo you're gonna be on the New York Times front page whether or not that is",
    "start": "5015780",
    "end": "5022190"
  },
  {
    "text": "you know you know Spectre variant too frankly you know very very hard to exploit meltdown much easier to exploit",
    "start": "5022190",
    "end": "5028860"
  },
  {
    "text": "you'll see all the reproducers show meltdown first because that's the easy one to get the meteor attention so with",
    "start": "5028860",
    "end": "5035130"
  },
  {
    "text": "that I am out of time for my slides and I want to open it up and just take questions and thank you thank you for",
    "start": "5035130",
    "end": "5041489"
  },
  {
    "text": "the video",
    "start": "5041489",
    "end": "5043670"
  },
  {
    "text": "you",
    "start": "5049800",
    "end": "5051860"
  }
]