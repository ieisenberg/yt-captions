[
  {
    "start": "0",
    "end": "75000"
  },
  {
    "text": "my name is Ellie Miranda my colleague Clement Bella been a longtime small talk implementer I was here in",
    "start": "10820",
    "end": "19509"
  },
  {
    "text": "2003 giving a presentation in the same course on the system that we're",
    "start": "19509",
    "end": "27650"
  },
  {
    "text": "describing now which at the time was an architecture in my head something that I",
    "start": "27650",
    "end": "33230"
  },
  {
    "text": "that I hoped to implement and in fact it's been these 13 years that it's taken",
    "start": "33230",
    "end": "38780"
  },
  {
    "text": "for me to find collaborators in space to actually complete the project and get to",
    "start": "38780",
    "end": "44059"
  },
  {
    "text": "a stage where I can deliver on the vision that I had then so you might",
    "start": "44059",
    "end": "53539"
  },
  {
    "text": "think that those 13 years were long enough in which a project might become completely irrelevant and and be",
    "start": "53539",
    "end": "59629"
  },
  {
    "text": "discarded but it has not been the case so you know follow your dream and never",
    "start": "59629",
    "end": "65420"
  },
  {
    "text": "give up and you may get to to realize it",
    "start": "65420",
    "end": "74170"
  },
  {
    "text": "we are in the business of making it efficient to run dynamic languages",
    "start": "75819",
    "end": "82420"
  },
  {
    "text": "dynamic languages all the rage right now you almost certainly use JavaScript in",
    "start": "82420",
    "end": "88250"
  },
  {
    "text": "your daily work as a student and adding",
    "start": "88250",
    "end": "93349"
  },
  {
    "text": "behavior to to webpages etc this is an example in small talk and it simply sums",
    "start": "93349",
    "end": "100399"
  },
  {
    "text": "the elements of a collection and so it's an abstract method that sits at the top of a collection hierarchy and it's",
    "start": "100399",
    "end": "106399"
  },
  {
    "text": "inherited by a lot of different concrete collection classes and the first thing",
    "start": "106399",
    "end": "113390"
  },
  {
    "text": "you see is that there's no types and we initialize a variable with the with the integer zero and we don't bother to",
    "start": "113390",
    "end": "119720"
  },
  {
    "text": "declare some or anything like that we can just assign it and the second thing you see these these square brackets",
    "start": "119720",
    "end": "126020"
  },
  {
    "text": "around the colon element sum becomes equal to sum plus element close bracket is a closure so we create a code closure",
    "start": "126020",
    "end": "133970"
  },
  {
    "text": "and we provide that as an argument to an iterator message do and we ask the receiver to apply that closure to all of",
    "start": "133970",
    "end": "141530"
  },
  {
    "text": "its elements and each of the many subclasses of the",
    "start": "141530",
    "end": "146640"
  },
  {
    "text": "collection abstract class may indeed implement do in its own particular way depending on its its interior",
    "start": "146640",
    "end": "153140"
  },
  {
    "text": "representation it might be a hash table with with keyed keys that are key value",
    "start": "153140",
    "end": "159000"
  },
  {
    "text": "pairs and we need to iterate over that hash table it might be a flat array where we can use integer indexes it",
    "start": "159000",
    "end": "165510"
  },
  {
    "text": "might be a computed interval from from one start value to another and we don't",
    "start": "165510",
    "end": "171420"
  },
  {
    "text": "know when the do is written what do will",
    "start": "171420",
    "end": "176600"
  },
  {
    "text": "will be executed so what you can see here is a very very concise code but",
    "start": "176600",
    "end": "185489"
  },
  {
    "text": "very generic code and code that's been factored into lots of small methods so",
    "start": "185489",
    "end": "192299"
  },
  {
    "text": "one of the problems that dynamic languages opposed to the implementer is",
    "start": "192299",
    "end": "197610"
  },
  {
    "text": "that we have very little scope for optimization another more important is",
    "start": "197610",
    "end": "203160"
  },
  {
    "text": "that we've got lots and lots of calls even in doing something simple like",
    "start": "203160",
    "end": "208890"
  },
  {
    "text": "iterating over an array where in in a standard procedural language the",
    "start": "208890",
    "end": "213930"
  },
  {
    "text": "compiler would be able to reduce everything to talk to machine instructions here there's no scope to to",
    "start": "213930",
    "end": "219930"
  },
  {
    "text": "find the very limited scope to find machine instructions in fact there's a there's a lot of abstraction here but",
    "start": "219930",
    "end": "229950"
  },
  {
    "text": "one of our lovely convenience is that we have in dynamic languages is that you know sitting there looking at this I",
    "start": "229950",
    "end": "236609"
  },
  {
    "text": "could add another optimization I could add another implementation of some in a",
    "start": "236609",
    "end": "242370"
  },
  {
    "text": "subclass and so here's some in a subclass which assumes that it's",
    "start": "242370",
    "end": "247530"
  },
  {
    "text": "instances are indexable with the integer indices from from one to self.size we",
    "start": "247530",
    "end": "254489"
  },
  {
    "text": "don't know how self.size is implemented but we're assuming that we've got a to",
    "start": "254489",
    "end": "260579"
  },
  {
    "text": "do method which takes the integers and which will sum by using an indexing",
    "start": "260579",
    "end": "267810"
  },
  {
    "text": "operator at again a dynamically bound send which is going to find the element",
    "start": "267810",
    "end": "274080"
  },
  {
    "text": "associated with with with and it's really nice that I could just sit there and and and add that but",
    "start": "274080",
    "end": "281080"
  },
  {
    "text": "that's a real problem for the for the execution system the execution system is",
    "start": "281080",
    "end": "287229"
  },
  {
    "text": "is dealing with dynamically bound sends or all the way through it's it's its execution so how is it so ok how is it",
    "start": "287229",
    "end": "298060"
  },
  {
    "start": "293000",
    "end": "422000"
  },
  {
    "text": "that these things are typically executed we typically have a heap which is which",
    "start": "298060",
    "end": "304750"
  },
  {
    "text": "is full of objects some of which is code and we have some components like a",
    "start": "304750",
    "end": "309940"
  },
  {
    "text": "memory manager and an execution engine which might be an interpreter and some",
    "start": "309940",
    "end": "315699"
  },
  {
    "text": "primitive operations and the the interpreters job is to interpret that dynamic code and of course the",
    "start": "315699",
    "end": "323379"
  },
  {
    "text": "experience is that that the system is is is too slow and that what we need to do",
    "start": "323379",
    "end": "329680"
  },
  {
    "text": "is to add some form of compilation if we add ahead of time copulation we're going",
    "start": "329680",
    "end": "336310"
  },
  {
    "text": "to lose all of our dynamic advantages so we need a just-in-time compiler that will compile the code on demand because",
    "start": "336310",
    "end": "344500"
  },
  {
    "text": "that's a really nice way of dealing with the ability to add code to the system and modify code to the system so then we",
    "start": "344500",
    "end": "352120"
  },
  {
    "text": "can think of the VM architecture as a heap of objects some zone in which the the JIT produces code it might be",
    "start": "352120",
    "end": "359919"
  },
  {
    "text": "interspersed in the heap but in the systems that I've been working with it's always in its own own area and the",
    "start": "359919",
    "end": "365529"
  },
  {
    "text": "execution engine is now hybrid one that it can interpret and it can it can",
    "start": "365529",
    "end": "371379"
  },
  {
    "text": "compile one of the the issues you have in in jetting is if you think about a",
    "start": "371379",
    "end": "377979"
  },
  {
    "text": "method which is interpreted only once let's say some some method that was",
    "start": "377979",
    "end": "383580"
  },
  {
    "text": "interpreted at startup it's much more expensive to to JIT which is essentially",
    "start": "383580",
    "end": "389199"
  },
  {
    "text": "an interpretation over the code with the side-effects that you produce the machine code concatenate the machine",
    "start": "389199",
    "end": "394569"
  },
  {
    "text": "code for the for the operations concerned and so you might actually",
    "start": "394569",
    "end": "399719"
  },
  {
    "text": "benefit from being able to avoid cheating until you might execute a",
    "start": "399719",
    "end": "406449"
  },
  {
    "text": "method for a for a sec time so there are actually advantages to having this this mixed context so that's",
    "start": "406449",
    "end": "414799"
  },
  {
    "text": "the the architecture of the small talk-- virtual machines that I'm going to be discussing today and similar to a number",
    "start": "414799",
    "end": "423229"
  },
  {
    "start": "422000",
    "end": "659000"
  },
  {
    "text": "of other executions so going back to that example of the indexing via at in",
    "start": "423229",
    "end": "432649"
  },
  {
    "text": "our second some call how could it be that we can improve performance avoiding",
    "start": "432649",
    "end": "442219"
  },
  {
    "text": "the cost of every time we send a message figuring out what code is to be executed",
    "start": "442219",
    "end": "449919"
  },
  {
    "text": "well in the in the 80s Peter Deutsch with the small virtual machine done at",
    "start": "449919",
    "end": "455839"
  },
  {
    "text": "Xerox PARC invented the inline caching technique so imagine that my method is",
    "start": "455839",
    "end": "464509"
  },
  {
    "text": "is compiled to a byte coded language and there are there are byte codes which represent things like pushing the",
    "start": "464509",
    "end": "470929"
  },
  {
    "text": "receiver pushing an instance variable etc and might go from making a particular send so I'm considering here",
    "start": "470929",
    "end": "478039"
  },
  {
    "text": "is the the compilation of the of the send instruction for the at message that",
    "start": "478039",
    "end": "483919"
  },
  {
    "text": "we send to whatever self is and the JIT compiler generates a two instruction",
    "start": "483919",
    "end": "492349"
  },
  {
    "text": "sequence for this and it loads a register here I've got our CX which I'm",
    "start": "492349",
    "end": "498649"
  },
  {
    "text": "using as a mnemonic for class it loads a register with the the address",
    "start": "498649",
    "end": "505879"
  },
  {
    "text": "effectively of the of the symbol that names the the the a procedure call and then it calls some runtime routine in",
    "start": "505879",
    "end": "513559"
  },
  {
    "text": "the VM and if that code was ever to be executed then what that runtime routine",
    "start": "513559",
    "end": "520638"
  },
  {
    "text": "would do would be using the that some other register which has the self in it",
    "start": "520639",
    "end": "527329"
  },
  {
    "text": "that we haven't shown how the compilers reference self but it'll look up the the",
    "start": "527329",
    "end": "533300"
  },
  {
    "text": "message at in whatever the class of self is and in this case I'm imagining that",
    "start": "533300",
    "end": "539029"
  },
  {
    "text": "it's an array and we'll find some buy coded method and",
    "start": "539029",
    "end": "544939"
  },
  {
    "text": "associated with a bike coded method it may find some machine code method and if there's no machine code method it'll",
    "start": "544939",
    "end": "551029"
  },
  {
    "text": "actually have to create one so what it can do is is is is having its hand the",
    "start": "551029",
    "end": "556639"
  },
  {
    "text": "machine code form for the array at",
    "start": "556639",
    "end": "561800"
  },
  {
    "text": "method which would actually index the the array and to optimize sending it's",
    "start": "561800",
    "end": "569959"
  },
  {
    "text": "going to modify the original two instruction sequence so now instead of loading the register with the name of",
    "start": "569959",
    "end": "578629"
  },
  {
    "text": "the procedure we load the register with with the class of the object which received the message in this case it's",
    "start": "578629",
    "end": "584119"
  },
  {
    "text": "in an array so we have is is a load of the class array into this this register",
    "start": "584119",
    "end": "589939"
  },
  {
    "text": "and we're going to call an entry point in the machine code and and and when we",
    "start": "589939",
    "end": "596149"
  },
  {
    "text": "do this on first execution the compiler will jump to the body of the of the method and execution will continue but",
    "start": "596149",
    "end": "602959"
  },
  {
    "text": "the second time around what will happen is that will execute these instructions so now our CX will will have any array",
    "start": "602959",
    "end": "609649"
  },
  {
    "text": "and we'll go to the entry point of the array method and what that will do is given that that self is is in a",
    "start": "609649",
    "end": "617449"
  },
  {
    "text": "dedicated register it will find out the class of self which is the class of self at this send not the send at the time",
    "start": "617449",
    "end": "624079"
  },
  {
    "text": "when we compiled and it simply compares the two and if the two are the same then execution continues so now we've reduced",
    "start": "624079",
    "end": "633620"
  },
  {
    "text": "some kind of hash look up where we're associating sums and class and some selector with that with a method with a",
    "start": "633620",
    "end": "639439"
  },
  {
    "text": "very simple fetch the class of an object and and compare it against the constant and and continue so this is a lot",
    "start": "639439",
    "end": "646279"
  },
  {
    "text": "quicker and this was the technique that the Peter Deutsch developed in the 80s that gave us the first efficient",
    "start": "646279",
    "end": "652189"
  },
  {
    "text": "Smalltalk machines on commodity hardware was on sixty eight thousand processors",
    "start": "652189",
    "end": "658369"
  },
  {
    "text": "so then the question comes well okay what happens if I add some polymorphism into the system so here what I've got is",
    "start": "658369",
    "end": "666439"
  },
  {
    "start": "659000",
    "end": "851000"
  },
  {
    "text": "I've got the array one two three that's a hash parentheses one two three close parentheses literal notation Smalltalk",
    "start": "666439",
    "end": "673519"
  },
  {
    "text": "literal notation for an array which has three elements in it but the second one one two three is",
    "start": "673519",
    "end": "679070"
  },
  {
    "text": "effectively equivalent but it's quite different it's an interval so it has a start and a stop and a step right and so",
    "start": "679070",
    "end": "687260"
  },
  {
    "text": "it implements at in a completely different way it implements app by doing some arithmetic right it multiplies the",
    "start": "687260",
    "end": "693529"
  },
  {
    "text": "step by the the index and adds it to the start so if I was to evaluate that in in",
    "start": "693529",
    "end": "700070"
  },
  {
    "text": "my collection it turns out that in my in my library on the on the first slide turns out that these are both sequence",
    "start": "700070",
    "end": "706399"
  },
  {
    "text": "elections so they would both inherit this second method right and when we came to execute that at here this send",
    "start": "706399",
    "end": "715130"
  },
  {
    "text": "comparison that we've generated here would fail so what happens when it fails",
    "start": "715130",
    "end": "725019"
  },
  {
    "text": "what we do then is have the failure path in the method call into the runtime and",
    "start": "725949",
    "end": "732680"
  },
  {
    "text": "now locate the new class and create a little table a little dispatch table in",
    "start": "732680",
    "end": "738050"
  },
  {
    "text": "machine code on the fly to invoke the original method and invoke the new method and we call that a polymorphic",
    "start": "738050",
    "end": "743750"
  },
  {
    "text": "inline cache the first thing is called an inline cache it caches one message lookup and what we're going to do is",
    "start": "743750",
    "end": "750500"
  },
  {
    "text": "produce some simple lookup table that will deal with some degree of polymorphism and typically it's",
    "start": "750500",
    "end": "756560"
  },
  {
    "text": "convenient right and in the in in the JIT to decide how big this table is and you initially fill it in with two at two",
    "start": "756560",
    "end": "763250"
  },
  {
    "text": "elements and you allow it to grow to some number for example like six and then if you get to two megamorph extends",
    "start": "763250",
    "end": "768980"
  },
  {
    "text": "you have to use another strategy but we're not going to discuss those strategies today I just wanted to give you this example so when we execute this",
    "start": "768980",
    "end": "777199"
  },
  {
    "text": "in the context of the the interval the one two three some we're gonna get a failure and we're going to call this",
    "start": "777199",
    "end": "784010"
  },
  {
    "text": "this sorry once we've rebound we're going to call this pick and this pick just does a",
    "start": "784010",
    "end": "789260"
  },
  {
    "text": "series of comparisons so the first entry compares the the current class against",
    "start": "789260",
    "end": "796220"
  },
  {
    "text": "array and jumps to the no check entry point which will execute the code and the second case checks for interval and",
    "start": "796220",
    "end": "802490"
  },
  {
    "text": "and and so on and this this is stretchy so it might be able to expand to some number of cases",
    "start": "802490",
    "end": "808400"
  },
  {
    "text": "so that's great and and it turns out that if you look at small talk vm's",
    "start": "808400",
    "end": "813920"
  },
  {
    "text": "which don't have polymorphic inline caches they spend a large percentage of their execute time for example like 50%",
    "start": "813920",
    "end": "821240"
  },
  {
    "text": "of entire execution rebinding these entries as as the number of classes",
    "start": "821240",
    "end": "827360"
  },
  {
    "text": "changes it turns out that sort of 90% of the sends in a program have only one class but this remaining 10% are",
    "start": "827360",
    "end": "834770"
  },
  {
    "text": "extremely expensive to deal with because they're failing all or all of the time and when you when you replace with this",
    "start": "834770",
    "end": "840020"
  },
  {
    "text": "this nice table technique you oops you get rid of that",
    "start": "840020",
    "end": "847279"
  },
  {
    "text": "overhead and get a substantial speed-up well okay so now we're in the 90s and",
    "start": "847279",
    "end": "852700"
  },
  {
    "text": "the team itself and indeed at Stanford under Dave Unger were dealing with a",
    "start": "852700",
    "end": "860180"
  },
  {
    "text": "language which was even more difficult to optimize the small talk self which is prototype based and because it's",
    "start": "860180",
    "end": "865550"
  },
  {
    "text": "prototype based there's even more polymorphism because individual objects have their own methods instead of object",
    "start": "865550",
    "end": "871160"
  },
  {
    "text": "being members of classes and they were struggling to produce an efficient execution engine using conventional",
    "start": "871160",
    "end": "877990"
  },
  {
    "text": "compiler technology and type inference and were failing and so they they went",
    "start": "877990",
    "end": "884510"
  },
  {
    "text": "this route and added pix as a way of dealing with the higher degree of",
    "start": "884510",
    "end": "889520"
  },
  {
    "text": "polymorphism but then they realized this collects type information so associated",
    "start": "889520",
    "end": "894980"
  },
  {
    "text": "with every send that is been executed in the program we have either a monomorphic",
    "start": "894980",
    "end": "900260"
  },
  {
    "text": "cache which says for this send location we only ever had one type of receiver or",
    "start": "900260",
    "end": "906500"
  },
  {
    "text": "for the other mega morphic a polymorphic sends we know the set of classes that",
    "start": "906500",
    "end": "913339"
  },
  {
    "text": "we've seen so far and that's information which is perfect for an optimizing",
    "start": "913339",
    "end": "919130"
  },
  {
    "text": "compiler to use the the only problem about it is that it is speculative it",
    "start": "919130",
    "end": "924140"
  },
  {
    "text": "tells you what happened in the past it doesn't help tell you what what happened in the future it will will discuss that",
    "start": "924140",
    "end": "929570"
  },
  {
    "text": "soon so the the thing that we need to do",
    "start": "929570",
    "end": "935720"
  },
  {
    "text": "is to use that information for an optimizing compiler",
    "start": "935720",
    "end": "941209"
  },
  {
    "text": "but if we really nearly optimized our code our dynamic performance is going to",
    "start": "941209",
    "end": "947819"
  },
  {
    "text": "suffer because we're going to spend all of this time optimizing code aggressively so what we need to do is",
    "start": "947819",
    "end": "952980"
  },
  {
    "text": "find some way of only optimizing when appropriate and most most programs",
    "start": "952980",
    "end": "958379"
  },
  {
    "text": "observe this pattern of 90% of the time is in 10% of the code or 95% of the time",
    "start": "958379",
    "end": "964649"
  },
  {
    "text": "is in 5% of the code so if we decorate our machine code produced by our first",
    "start": "964649",
    "end": "971189"
  },
  {
    "text": "level chip with counters and we can make those counters affordable what we can do",
    "start": "971189",
    "end": "976649"
  },
  {
    "text": "is allow those counters to identify the hotspots as they were called in the the first Java VM the hotspots in the",
    "start": "976649",
    "end": "983639"
  },
  {
    "text": "program that would profit from optimization so we modify our baseline",
    "start": "983639",
    "end": "988829"
  },
  {
    "text": "JIT to put in counters now in our system we and in a number of Java systems we",
    "start": "988829",
    "end": "996300"
  },
  {
    "text": "count conditional branches you could count every message send every method activation well that's that's rather",
    "start": "996300",
    "end": "1002629"
  },
  {
    "text": "expensive it turns out that in in typical small talk programs conditional branch these are about six times less",
    "start": "1002629",
    "end": "1008749"
  },
  {
    "text": "frequent so counting conditional branches is a much better cheaper",
    "start": "1008749",
    "end": "1015499"
  },
  {
    "text": "technique of finding hotspots but it also gives a nice ability to but we",
    "start": "1015499",
    "end": "1022459"
  },
  {
    "text": "haven't exploited that ability yet but we'd like to of having the the counter being able to tell you how many times",
    "start": "1022459",
    "end": "1028610"
  },
  {
    "text": "you've encountered the conditional branch and how many times you took the conditional branch so you can get basic block counts and and and know what is",
    "start": "1028610",
    "end": "1035959"
  },
  {
    "text": "the the common path so then what what happens in in these these VMs and I",
    "start": "1035959",
    "end": "1042740"
  },
  {
    "text": "should say that hotspot was the first commercially available VM that used this technique was available in 1999 and has",
    "start": "1042740",
    "end": "1050809"
  },
  {
    "text": "evolved successively since then and that's the the Sun hot spot now the Oracle hot spot VM for for Java but you",
    "start": "1050809",
    "end": "1059690"
  },
  {
    "text": "see similar techniques in the Chrome JavaScript VM which is called v8 in the",
    "start": "1059690",
    "end": "1068080"
  },
  {
    "text": "WebKit which is the apple VM for Chrome",
    "start": "1068080",
    "end": "1073350"
  },
  {
    "text": "and in a number of other dynamic languages so what happens is that when a",
    "start": "1073350",
    "end": "1079470"
  },
  {
    "text": "counter trips there's there's some kind of pause and we invoke an optimizer and",
    "start": "1079470",
    "end": "1085889"
  },
  {
    "text": "in this diagram I'm writing the optimize as a black box",
    "start": "1085889",
    "end": "1091950"
  },
  {
    "text": "because optimizes is it is typically in the VM it's actually in the VM with with with the rest of the runtime so it's",
    "start": "1091950",
    "end": "1098309"
  },
  {
    "text": "part of that that lower level and it's implemented in C++ alright and I can't see it from the from the top and then",
    "start": "1098309",
    "end": "1106679"
  },
  {
    "text": "what the optimizer does is generate some machine code in fact what it does is",
    "start": "1106679",
    "end": "1113039"
  },
  {
    "text": "analyze the stack and and try and an inline a whole series of the the byte",
    "start": "1113039",
    "end": "1118950"
  },
  {
    "text": "coded methods and I've drawn my bike coding methods on the on the Left inline",
    "start": "1118950",
    "end": "1123990"
  },
  {
    "text": "those those by coding methods to produce some much bigger machine code method",
    "start": "1123990",
    "end": "1129750"
  },
  {
    "text": "which which covers essentially a large portion of the of the core graph and by",
    "start": "1129750",
    "end": "1135960"
  },
  {
    "text": "inlining a large portion of the core graph we now have much more opportunity to to optimize using conventional",
    "start": "1135960",
    "end": "1143330"
  },
  {
    "text": "techniques and of course inlining has has avoided all of those those call",
    "start": "1143330",
    "end": "1149610"
  },
  {
    "text": "overheads but the problem is that the code is still dynamic and we could still",
    "start": "1149610",
    "end": "1155100"
  },
  {
    "text": "introduce new types into the program so what we do is is is put guards in the",
    "start": "1155100",
    "end": "1161879"
  },
  {
    "text": "machine code at the start of each basic block which makes assumptions as to the types that it's in inline and those",
    "start": "1161879",
    "end": "1168299"
  },
  {
    "text": "those guards must must be passed must verify that the classes are as expected and if those guards fail then we have to",
    "start": "1168299",
    "end": "1179730"
  },
  {
    "text": "do something else and we have to do this hairy thing of D optimizing the optimized code so that the stack is now",
    "start": "1179730",
    "end": "1186360"
  },
  {
    "text": "reverted to its its unoptimized case and let the system run again and then when",
    "start": "1186360",
    "end": "1191730"
  },
  {
    "text": "the counters trip again we will re optimize in the presence of the new type information so there's this kind of big",
    "start": "1191730",
    "end": "1198679"
  },
  {
    "text": "cycle okay so um that's great",
    "start": "1198679",
    "end": "1206220"
  },
  {
    "text": "but I don't like C++ I've never enjoyed",
    "start": "1206220",
    "end": "1211530"
  },
  {
    "start": "1209000",
    "end": "1554000"
  },
  {
    "text": "using it and I'm a small talker and small talk is kind of different",
    "start": "1211530",
    "end": "1217950"
  },
  {
    "text": "you saw the language doesn't even have curly brackets it's got square brackets",
    "start": "1217950",
    "end": "1223400"
  },
  {
    "text": "like JavaScript but how is it different well the real difference is that small",
    "start": "1223400",
    "end": "1230460"
  },
  {
    "text": "talk is self representing so methods and classes are first-class objects like any",
    "start": "1230460",
    "end": "1236220"
  },
  {
    "text": "other like like those arrays etc and there's there's code in the system which define the behavior of classes and code",
    "start": "1236220",
    "end": "1242250"
  },
  {
    "text": "in the system which defines the behavior of methods and how to create them etc and so the implication of this is really",
    "start": "1242250",
    "end": "1250140"
  },
  {
    "text": "nice the compiler the source code compiler that takes a small talk source code produces byte coded methods and it",
    "start": "1250140",
    "end": "1257100"
  },
  {
    "text": "is a small talk program and you can if you want modify the compiler while you're working on your project you might",
    "start": "1257100",
    "end": "1263220"
  },
  {
    "text": "want to insert some some some strange code to monitor the use of your instance",
    "start": "1263220",
    "end": "1268920"
  },
  {
    "text": "variables or whatever you might want to do that you can you can do that so yeah",
    "start": "1268920",
    "end": "1275550"
  },
  {
    "text": "that's right but small talk thank takes",
    "start": "1275550",
    "end": "1280680"
  },
  {
    "text": "things to not to extremes but to a point",
    "start": "1280680",
    "end": "1286410"
  },
  {
    "text": "of consistency so that we have a minimal number of concepts to consider and one",
    "start": "1286410",
    "end": "1291540"
  },
  {
    "text": "of the things that it does is represent activation records as objects to now an",
    "start": "1291540",
    "end": "1297030"
  },
  {
    "text": "activation record was an activation record an activation record is that which records the state of a method",
    "start": "1297030",
    "end": "1303210"
  },
  {
    "text": "activation or procedure activation so it's either where I am I in the current method what's my PC what are the values",
    "start": "1303210",
    "end": "1309330"
  },
  {
    "text": "of my my arguments and my local variables and and where do I have to return if I have to return a result",
    "start": "1309330",
    "end": "1315710"
  },
  {
    "text": "so having activation records as objects has a number of implications and one of",
    "start": "1315710",
    "end": "1322890"
  },
  {
    "text": "them is that the the debugger is simply an interpreter over activation records",
    "start": "1322890",
    "end": "1328770"
  },
  {
    "text": "because when the program is is is in any any any state where an error has",
    "start": "1328770",
    "end": "1333990"
  },
  {
    "text": "happened and I've caught the error I can have a look at the at the stack and one of the one of the errors that I can have",
    "start": "1333990",
    "end": "1340450"
  },
  {
    "text": "is simply an error that that Holtz the system that boots me into a debugger which in it is written in small talk and",
    "start": "1340450",
    "end": "1346780"
  },
  {
    "text": "then in that debugger I can step through the the code and so a traditional",
    "start": "1346780",
    "end": "1355630"
  },
  {
    "text": "debugger like like a c-level debugger which displays stack frames which are on",
    "start": "1355630",
    "end": "1360880"
  },
  {
    "text": "a machine stack is replaced by an inspector for a linked list of",
    "start": "1360880",
    "end": "1367770"
  },
  {
    "text": "activation records and and that's my model so it's very nice because I can do",
    "start": "1367770",
    "end": "1374020"
  },
  {
    "text": "things like implement exception search which needs to search activation records to find handler just like just like I do",
    "start": "1374020",
    "end": "1385060"
  },
  {
    "text": "any other small to a code so exception search is not down in the VM it's it's something that I can program and",
    "start": "1385060",
    "end": "1391270"
  },
  {
    "text": "something that I can alter it also means that if I want to do something like",
    "start": "1391270",
    "end": "1398100"
  },
  {
    "text": "implement partial continuations which have been used in many applications but",
    "start": "1398100",
    "end": "1403300"
  },
  {
    "text": "as nice ways of dealing with with with web servers where you know the back button means that suddenly I've got you",
    "start": "1403300",
    "end": "1410080"
  },
  {
    "text": "know where was I in this web page and where am I in this web page it would be really nice to to be able to go forward",
    "start": "1410080",
    "end": "1415420"
  },
  {
    "text": "etc it'd be really nice to deal with that by being able to take copies of the stack and remember what state I was when",
    "start": "1415420",
    "end": "1422890"
  },
  {
    "text": "the user hit the back button and activation records as objects makes it trivial to implement that kind of",
    "start": "1422890",
    "end": "1428320"
  },
  {
    "text": "control structure so it might seem exotic but it actually has very practical applications no ok so there's",
    "start": "1428320",
    "end": "1435460"
  },
  {
    "text": "there's a severe performance overhead and the early Smalltalk VM suffered from",
    "start": "1435460",
    "end": "1441070"
  },
  {
    "text": "this this problem of having to allocate an activation record every time we send",
    "start": "1441070",
    "end": "1449110"
  },
  {
    "text": "a method and one of the things is that if we've got activation records which are distinct objects then the arguments",
    "start": "1449110",
    "end": "1455350"
  },
  {
    "text": "that were marshalling as we as we make a send in one activation have to be copied to the activation record which executes",
    "start": "1455350",
    "end": "1462010"
  },
  {
    "text": "the method whereas in stack frames the outgoing arguments become the incoming arguments on the stack and everything's",
    "start": "1462010",
    "end": "1468880"
  },
  {
    "text": "overlap but in implementing that inline cash Peter Deutz had to solve the problem of",
    "start": "1468880",
    "end": "1475889"
  },
  {
    "text": "mapping this execution model to real machine instructions and so he also solved the problem of mapping ax",
    "start": "1475889",
    "end": "1482169"
  },
  {
    "text": "activation record objects to stack frames so in fact what happens in a real vm is that we can create conventional",
    "start": "1482169",
    "end": "1488860"
  },
  {
    "text": "stack frames and when the programmer asks for an activation record for the current activation we give it an object",
    "start": "1488860",
    "end": "1495370"
  },
  {
    "text": "which is kind of a proxy to the stack frame and that's created on demand so we don't have the overhead that you might",
    "start": "1495370",
    "end": "1501490"
  },
  {
    "text": "the you might think but we still have the freedom in the language even though in the VM we're not actually creating",
    "start": "1501490",
    "end": "1507940"
  },
  {
    "text": "context a lot that when we want we have a way of accessing our current execution",
    "start": "1507940",
    "end": "1513190"
  },
  {
    "text": "state from within the system as a first-class object so the question becomes okay given what we've got",
    "start": "1513190",
    "end": "1520149"
  },
  {
    "text": "methods and our you know a compiler and everything else and activation records could we actually implement speculative",
    "start": "1520149",
    "end": "1527110"
  },
  {
    "text": "inlining above the vm entirely in small talk and have this really complicated",
    "start": "1527110",
    "end": "1532510"
  },
  {
    "text": "piece of optimization technology be something that you could interactively",
    "start": "1532510",
    "end": "1538779"
  },
  {
    "text": "develop while you were interacting with your your program and your test cases and be written in a garbage collected",
    "start": "1538779",
    "end": "1547149"
  },
  {
    "text": "high-level language and the answer is yes so now the model of our our system",
    "start": "1547149",
    "end": "1557909"
  },
  {
    "start": "1554000",
    "end": "2004000"
  },
  {
    "text": "is that yeah on the Left we have by coded methods which are compiled by the",
    "start": "1557909",
    "end": "1564070"
  },
  {
    "text": "baseline JIT into machine code with with counters and now when those counters",
    "start": "1564070",
    "end": "1569320"
  },
  {
    "text": "trip I arranged that a message is sent back into the small talk system just",
    "start": "1569320",
    "end": "1575950"
  },
  {
    "text": "like an exception arising from from that from the runtime and now my optimizer is",
    "start": "1575950",
    "end": "1581649"
  },
  {
    "text": "a small talk program so it's a white box and what that optimizer does is output a",
    "start": "1581649",
    "end": "1589480"
  },
  {
    "text": "byte coded method which represents the inlining of many many simple by coded",
    "start": "1589480",
    "end": "1597370"
  },
  {
    "text": "methods but since we want to get the same performance as an aggressive optimizing",
    "start": "1597370",
    "end": "1603950"
  },
  {
    "text": "compiler that is that is targeting machine instructions we don't want to",
    "start": "1603950",
    "end": "1609080"
  },
  {
    "text": "use the abstract bytecode that only encodes for abstract operations like",
    "start": "1609080",
    "end": "1614540"
  },
  {
    "text": "like the Act which is which is not bound if you look at the how app is actually",
    "start": "1614540",
    "end": "1621410"
  },
  {
    "text": "implemented once you get to an array then there's a primitive operation in",
    "start": "1621410",
    "end": "1626720"
  },
  {
    "text": "the VM which is going to examine the the object and examine the argument and make",
    "start": "1626720",
    "end": "1632300"
  },
  {
    "text": "sure that everything's valid and actually yield the the object so that's that that primitive is is Harry the receiver might be a",
    "start": "1632300",
    "end": "1640429"
  },
  {
    "text": "immediate object might be a tagged pointer or it might be an object and so",
    "start": "1640429",
    "end": "1645980"
  },
  {
    "text": "it has to ask that question and then it might be an array of bytes owner array",
    "start": "1645980",
    "end": "1651020"
  },
  {
    "text": "of characters it might be an array of object several different kinds of arrays and so we have to dispatch on the kind",
    "start": "1651020",
    "end": "1656480"
  },
  {
    "text": "of array to find out what kind of operation is and when we find out what how the object is represented only then",
    "start": "1656480",
    "end": "1661970"
  },
  {
    "text": "can we do the bounds check because then we know how big the elements are and and and then we have to index so you might",
    "start": "1661970",
    "end": "1669800"
  },
  {
    "text": "see as many as 80 or 100 machine instructions in the implementation of",
    "start": "1669800",
    "end": "1675020"
  },
  {
    "text": "the app primitive and and that's really no good what we want to do in optimized",
    "start": "1675020",
    "end": "1680390"
  },
  {
    "text": "code is generate the one instruction or the two instructions that just fetch a given field of an object so the way that",
    "start": "1680390",
    "end": "1686780"
  },
  {
    "text": "we do that by maintaining our architecture is that we extend our byte code set with one byte code that can",
    "start": "1686780",
    "end": "1693920"
  },
  {
    "text": "encode for unsafe operations so this is a byte code which is not legal for the",
    "start": "1693920",
    "end": "1699230"
  },
  {
    "text": "normal compiler to generate it's only legal for the optimising compiler to generate once it's proved then in this",
    "start": "1699230",
    "end": "1705590"
  },
  {
    "text": "particular context is safe to use this particular instruction and so these byte codes which I've done in red code for",
    "start": "1705590",
    "end": "1712520"
  },
  {
    "text": "unsafe operations like okay you're indexing something that looks like an array and you can be sure that the index",
    "start": "1712520",
    "end": "1718670"
  },
  {
    "text": "is a small integer that's in range and so the JIT is free to generate just the",
    "start": "1718670",
    "end": "1724370"
  },
  {
    "text": "the two instructions and go ahead and then this method is installed in some",
    "start": "1724370",
    "end": "1730010"
  },
  {
    "text": "method dictionary and the next time it's it's sent the jet is going to baseline JIT which has now been",
    "start": "1730010",
    "end": "1735620"
  },
  {
    "text": "extended in a very simple way with support for generating these instructions is going to generate the",
    "start": "1735620",
    "end": "1741559"
  },
  {
    "text": "equivalent method and in exactly the same way if the execution of the",
    "start": "1741559",
    "end": "1748670"
  },
  {
    "text": "speculatively inline code fails one of its guards and we find out that there's more polymorphism we're going to fail",
    "start": "1748670",
    "end": "1754640"
  },
  {
    "text": "but this time our D optimizer is again a white box and it can manipulate these",
    "start": "1754640",
    "end": "1760010"
  },
  {
    "text": "first-class activation records to convert the one inlined optimized",
    "start": "1760010",
    "end": "1765110"
  },
  {
    "text": "activation record into the the set of unoptimized things and allow the system",
    "start": "1765110",
    "end": "1772130"
  },
  {
    "text": "to continue but the advantage now is that all of that machinery that was executed in a low-level non",
    "start": "1772130",
    "end": "1779299"
  },
  {
    "text": "garbage-collected language in a traditional vm is now available to us in in a very very powerful concise dynamic",
    "start": "1779299",
    "end": "1787309"
  },
  {
    "text": "language so at this point I hand over to Clem oh okay so I'm going to take the",
    "start": "1787309",
    "end": "1795350"
  },
  {
    "text": "example of how a specific method is optimized I choose to pick this method I",
    "start": "1795350",
    "end": "1802220"
  },
  {
    "text": "am I hope you will be able to understand it so this method is called display it takes an argument which is list of doing",
    "start": "1802220",
    "end": "1809350"
  },
  {
    "text": "a notice already expand what message to does it's an iterative method that it is",
    "start": "1809350",
    "end": "1815090"
  },
  {
    "text": "about the collection and at each iteration of all the collection the",
    "start": "1815090",
    "end": "1820309"
  },
  {
    "text": "message send disciplined unseen is sent to the receiver self with the argument",
    "start": "1820309",
    "end": "1825770"
  },
  {
    "text": "drink so the traditional way this method",
    "start": "1825770",
    "end": "1830960"
  },
  {
    "text": "will be executed and conventional of the tones in your machine is as flow so the",
    "start": "1830960",
    "end": "1835970"
  },
  {
    "text": "first time the loop body is greeted the mr. send discipline screen the paper",
    "start": "1835970",
    "end": "1842750"
  },
  {
    "text": "machine needs to fetch which method is actually called for the specific stricter and then can then can cache it",
    "start": "1842750",
    "end": "1848660"
  },
  {
    "text": "in the global method cash and can interpret the byte code of the metal",
    "start": "1848660",
    "end": "1854020"
  },
  {
    "text": "during the next shoe addiction it will keep interpreting but will not need to fetch to do the root to perform the",
    "start": "1854020",
    "end": "1860300"
  },
  {
    "text": "lookup because to the I look up cause it is already in the cache then horribly on the seventh",
    "start": "1860300",
    "end": "1867280"
  },
  {
    "text": "execution in our photo machine it's usually the saloon of gothic fiction the",
    "start": "1867280",
    "end": "1872380"
  },
  {
    "text": "best manjit compiler which night machine code for the display for the body",
    "start": "1872380",
    "end": "1880050"
  },
  {
    "text": "so genetic machine cut takes a bit of time but the ejection time of the",
    "start": "1880050",
    "end": "1886680"
  },
  {
    "text": "generation method will be smaller the machine cut is ducati with inline caches",
    "start": "1886680",
    "end": "1893170"
  },
  {
    "text": "as explained a lot and in our case with counters the next thousand execution the",
    "start": "1893170",
    "end": "1899640"
  },
  {
    "text": "machine cut 19 bazoombas language in Copiah we will be executed then sir then",
    "start": "1899640",
    "end": "1905170"
  },
  {
    "text": "after a thousand execution we need to adaptively recompile limited best and",
    "start": "1905170",
    "end": "1910420"
  },
  {
    "text": "types who have met and best undo controls to generate much more efficient",
    "start": "1910420",
    "end": "1916300"
  },
  {
    "text": "can't good so this at this step the completion time will be greater than the",
    "start": "1916300",
    "end": "1922360"
  },
  {
    "text": "westerns it but the cardinality will be much faster and so basically there is a trade-off between completion time and",
    "start": "1922360",
    "end": "1928900"
  },
  {
    "text": "execution time and depending on the virtual machine this is done in two or",
    "start": "1928900",
    "end": "1934090"
  },
  {
    "text": "three or four step forward get so in our",
    "start": "1934090",
    "end": "1941080"
  },
  {
    "text": "example we will execute the method display with over 30,000 rings so as",
    "start": "1941080",
    "end": "1949900"
  },
  {
    "text": "india to explain the what will happen is that at some point the machine cut version of the method which is generated",
    "start": "1949900",
    "end": "1956860"
  },
  {
    "text": "with candles and conditional punches will detect that this method is not",
    "start": "1956860",
    "end": "1962050"
  },
  {
    "text": "reused so we added the printers and punches because we believe that Belgian",
    "start": "1962050",
    "end": "1971050"
  },
  {
    "text": "waffle our heat indices in Easter less overhead compared to automated counter",
    "start": "1971050",
    "end": "1979560"
  },
  {
    "text": "so the thing is due to our design the the method display cannot detect hot",
    "start": "1979560",
    "end": "1985540"
  },
  {
    "text": "spot because it does not have any one but two method do as the to do method",
    "start": "1985540",
    "end": "1992140"
  },
  {
    "text": "which is similar to far in falou pink emotional language and it has a bunch to escape the loop so these",
    "start": "1992140",
    "end": "1999770"
  },
  {
    "text": "methods can actually detect a hot spot under a skipping munch so if we execute",
    "start": "1999770",
    "end": "2006400"
  },
  {
    "start": "2004000",
    "end": "2082000"
  },
  {
    "text": "that over 30,000 time the why don't we why don't we say that so um what happens",
    "start": "2006400",
    "end": "2012460"
  },
  {
    "text": "with the small talk compiler to improve performance of a small series of",
    "start": "2012460",
    "end": "2018690"
  },
  {
    "text": "selectors is that the bytecode compiler translates if-then-else while true to do",
    "start": "2018690",
    "end": "2025390"
  },
  {
    "text": "and an or into into into branch branch code so some message and and and we made",
    "start": "2025390",
    "end": "2034030"
  },
  {
    "text": "the mistake of not realizing that it's implicit but a small set of the of the control messages are actually compiled",
    "start": "2034030",
    "end": "2040090"
  },
  {
    "text": "down to branch byte codes and and so the",
    "start": "2040090",
    "end": "2045160"
  },
  {
    "text": "way to read want to self size to do is kind of you know index becomes equal to",
    "start": "2045160",
    "end": "2050470"
  },
  {
    "text": "1 index less than or and limit becomes equal to self size index less than or equal to limit while truth and the",
    "start": "2050470",
    "end": "2057669"
  },
  {
    "text": "compiler is is generating a conditional branch so the problem is that once the",
    "start": "2057669",
    "end": "2066220"
  },
  {
    "text": "hotspot is detected what can we optimize in that method because we have the same problem as me as we thought there is very little that",
    "start": "2066220",
    "end": "2072760"
  },
  {
    "text": "we can optimize because we still have all the attackers all the message sense like self size like at like the",
    "start": "2072760",
    "end": "2080530"
  },
  {
    "text": "evaluation of the cruiser so one thing that cause clearly a lot in our one time",
    "start": "2080530",
    "end": "2085658"
  },
  {
    "start": "2082000",
    "end": "2185000"
  },
  {
    "text": "is the fashion of crew zero on the evolution of cruiser so here the message value will actually",
    "start": "2085659",
    "end": "2091540"
  },
  {
    "text": "ever a to develop treasure and in the automated display we were catching a",
    "start": "2091540",
    "end": "2097180"
  },
  {
    "text": "pleasure so when the hotspot is detected we have to account state of the stack so",
    "start": "2097180",
    "end": "2103690"
  },
  {
    "text": "the bottom stack frame is Steph removed emitted do and the from juice above is a",
    "start": "2103690",
    "end": "2109510"
  },
  {
    "text": "stifling for display so the thing that the optimizer can do is look ahead in the stack to find the best method to",
    "start": "2109510",
    "end": "2115990"
  },
  {
    "text": "optimize and it happens that because of the block evaluation and the out of",
    "start": "2115990",
    "end": "2123790"
  },
  {
    "text": "frame is creating the block and this frame is evaluating the block so if we are able to",
    "start": "2123790",
    "end": "2128990"
  },
  {
    "text": "in line the bottom fan into the outer FEM we will be able to remove the blood fashion on the block of high evolution",
    "start": "2128990",
    "end": "2135590"
  },
  {
    "text": "so for this purpose the optimizer will found out that the best method to optimize is one method ahead another",
    "start": "2135590",
    "end": "2142220"
  },
  {
    "text": "column is like display is probably used in a user application so it could be very specific with probably specific",
    "start": "2142220",
    "end": "2149420"
  },
  {
    "text": "types and things like that typically list of drinks will always be an away the do method can be shared",
    "start": "2149420",
    "end": "2155450"
  },
  {
    "text": "between multiple collection and it's courage to difficult to optimize the do meter if it's at the top of the",
    "start": "2155450",
    "end": "2161810"
  },
  {
    "text": "hierarchy because it will be used by so many so many part of the system that there is a high chance that there will",
    "start": "2161810",
    "end": "2168230"
  },
  {
    "text": "be polymorphic sense like inside the method so what we do is that we want to",
    "start": "2168230",
    "end": "2175930"
  },
  {
    "text": "speculatively in nine donation due to replace the do send by actual metal so",
    "start": "2175930",
    "end": "2186860"
  },
  {
    "start": "2185000",
    "end": "2301000"
  },
  {
    "text": "the way we do that is that we use type feedback so as adult mention with the",
    "start": "2186860",
    "end": "2192170"
  },
  {
    "text": "inline caches we can know for each sin site the types we have already met for",
    "start": "2192170",
    "end": "2197600"
  },
  {
    "text": "the receiver so in our case the the optimizing opera can know that for the",
    "start": "2197600",
    "end": "2203720"
  },
  {
    "text": "fifty thousand previous execution due west and only on an array in that specific sin site the second concept to",
    "start": "2203720",
    "end": "2211640"
  },
  {
    "text": "introduce is guards so as the optimization is speculative we",
    "start": "2211640",
    "end": "2217520"
  },
  {
    "text": "need to be able to guarantee that this figuration is always correct so if in",
    "start": "2217520",
    "end": "2223310"
  },
  {
    "text": "the future the this method will be called not with an array but with an order of correction of a dictionary",
    "start": "2223310",
    "end": "2230240"
  },
  {
    "text": "we need to dynamically optimize the code to restore the unoptimized state and",
    "start": "2230240",
    "end": "2235730"
  },
  {
    "text": "execute the correct version of the code",
    "start": "2235730",
    "end": "2239680"
  },
  {
    "text": "yeah so as the optimist method that we will generate as inline multiple method if",
    "start": "2240760",
    "end": "2248930"
  },
  {
    "text": "the guard fail will be we will need to document a cram into multiple step runs",
    "start": "2248930",
    "end": "2256300"
  },
  {
    "text": "so the way it works is that first we are the guard that ensures that the argument list of drinks",
    "start": "2256300",
    "end": "2262460"
  },
  {
    "text": "correctly to class all right and so I hide this the Smalltalk Revell a pseudo",
    "start": "2262460",
    "end": "2269869"
  },
  {
    "text": "code so people can understand but this cannot actually be expressed as well to cleverly it can be expressed only at",
    "start": "2269869",
    "end": "2275060"
  },
  {
    "text": "beta code and machine code lover and then we have in line the first method do",
    "start": "2275060",
    "end": "2281680"
  },
  {
    "text": "then we realize that we are immediately creating a closure and even reaching the crucial objects afterwards we cannot",
    "start": "2281680",
    "end": "2287990"
  },
  {
    "text": "remove the crucial question an evaluation scenario would want optimizes",
    "start": "2287990",
    "end": "2296330"
  },
  {
    "text": "the access to the I so either got",
    "start": "2296330",
    "end": "2302119"
  },
  {
    "start": "2301000",
    "end": "2349000"
  },
  {
    "text": "explain I'm not going to be through everything again but the accessing to an hour in smoke is",
    "start": "2302119",
    "end": "2307790"
  },
  {
    "text": "a very expensive person we need to check if the index is an integral if it's in bones which is the actual type of the",
    "start": "2307790",
    "end": "2314540"
  },
  {
    "text": "object so as we know right now that list",
    "start": "2314540",
    "end": "2320780"
  },
  {
    "text": "of tank as the class RI we know that another olds actually object-oriented",
    "start": "2320780",
    "end": "2327170"
  },
  {
    "text": "Ponte inside it's not a biter I for example we know the and because of the loop which iterates between one on the",
    "start": "2327170",
    "end": "2334490"
  },
  {
    "text": "size of the eye the optimizing compiler can know that the index is always in",
    "start": "2334490",
    "end": "2340970"
  },
  {
    "text": "boons so we are able to use an unsafe operation that Jackie access to the",
    "start": "2340970",
    "end": "2346400"
  },
  {
    "text": "speech field field of Java okay so the",
    "start": "2346400",
    "end": "2352849"
  },
  {
    "start": "2349000",
    "end": "2421000"
  },
  {
    "text": "overall optimize our architecture works as follow so it's implemented fully in small talk",
    "start": "2352849",
    "end": "2360910"
  },
  {
    "text": "it takes as input a stack which is a refight stack in the Smalltalk language",
    "start": "2360910",
    "end": "2368109"
  },
  {
    "text": "well hotspot has been detected and it takes as input the branch and type",
    "start": "2368109",
    "end": "2373460"
  },
  {
    "text": "information that has been gathered from the inline caches and the counters from",
    "start": "2373460",
    "end": "2378980"
  },
  {
    "text": "the coffee machine what the optimizer does is to generate an optimized code admitted but also dependents information",
    "start": "2378980",
    "end": "2386089"
  },
  {
    "text": "so this is because for example when you nine Demeter do it's possible that the",
    "start": "2386089",
    "end": "2392060"
  },
  {
    "text": "small tube for now we would like to redefine that method and I will change this be and when this method will be redefined",
    "start": "2392060",
    "end": "2399479"
  },
  {
    "text": "we need to discard all the optimized method that we have in ninth that method",
    "start": "2399479",
    "end": "2405419"
  },
  {
    "text": "to recover stable state and less swing generated by using compiler is a dope",
    "start": "2405419",
    "end": "2412169"
  },
  {
    "text": "transition metadata which is used to be able to recover the optimistic pond of",
    "start": "2412169",
    "end": "2417659"
  },
  {
    "text": "domestic hand and optimized egg hunts so the optimizer works as d combining",
    "start": "2417659",
    "end": "2425519"
  },
  {
    "start": "2421000",
    "end": "2444000"
  },
  {
    "text": "the byte code admitted into a single static assignment control flow graph",
    "start": "2425519",
    "end": "2430529"
  },
  {
    "text": "which is a classical Internet representation for compilers then it",
    "start": "2430529",
    "end": "2436739"
  },
  {
    "text": "does some optimization passes and it generates bike byte code which is",
    "start": "2436739",
    "end": "2441809"
  },
  {
    "text": "different from Westborough so the compiler works as a scanner which needs",
    "start": "2441809",
    "end": "2448919"
  },
  {
    "text": "to analyze things like jumps like anticipator well the Beck Jones will",
    "start": "2448919",
    "end": "2454319"
  },
  {
    "text": "target and things like that then it builds a control flow graph it does mean",
    "start": "2454319",
    "end": "2461639"
  },
  {
    "text": "are things like and canonical using a loop to expect them in a specific state",
    "start": "2461639",
    "end": "2467459"
  },
  {
    "text": "and more importantly it asked vector machine to provide the type annotation",
    "start": "2467459",
    "end": "2473339"
  },
  {
    "text": "that were available in the Yankees and the decompile will annotate every year",
    "start": "2473339",
    "end": "2478799"
  },
  {
    "text": "of your childhood we've to type in annotation so it cannot reuse all the type information for",
    "start": "2478799",
    "end": "2485069"
  },
  {
    "text": "ending and then we do always certain formations adding fine add something",
    "start": "2485069",
    "end": "2490229"
  },
  {
    "text": "like that so the current architecture in",
    "start": "2490229",
    "end": "2496469"
  },
  {
    "start": "2492000",
    "end": "2565000"
  },
  {
    "text": "the contract structure we use a menu like three optimization so the first one is speculative in 90s which is high",
    "start": "2496469",
    "end": "2501779"
  },
  {
    "text": "before so we will add a guard to ensure that the speculation is always correct",
    "start": "2501779",
    "end": "2507539"
  },
  {
    "text": "and we will inline the method on the crucial evolution then we try to do some",
    "start": "2507539",
    "end": "2513419"
  },
  {
    "text": "100 musician so as shown we we do things like removing bounced check for the add",
    "start": "2513419",
    "end": "2520999"
  },
  {
    "text": "method we also do we also remove overflow checks so in a similar way to",
    "start": "2520999",
    "end": "2526859"
  },
  {
    "text": "at the press operation small talk will automatically can cast a",
    "start": "2526859",
    "end": "2532820"
  },
  {
    "text": "small small representation of integrals to representation of large integrals and",
    "start": "2532820",
    "end": "2538160"
  },
  {
    "text": "if the optimizer can figure out that the another flow never happens it does not",
    "start": "2538160",
    "end": "2544220"
  },
  {
    "text": "need to do the overflow check and lastly and this is very important for our language like small talk we fold the",
    "start": "2544220",
    "end": "2550970"
  },
  {
    "text": "constants so what's happening is that we have many very shopped methods that just answer the distance our constants like",
    "start": "2550970",
    "end": "2558140"
  },
  {
    "text": "an object's check here if it has a specific type or something so lastly and",
    "start": "2558140",
    "end": "2567260"
  },
  {
    "start": "2565000",
    "end": "2613000"
  },
  {
    "text": "this is the I think the untraditional part we need to convert back to a presentation to bytecode so this is a",
    "start": "2567260",
    "end": "2574400"
  },
  {
    "text": "bit strange we the first thing we do is to convert the SSF presentation to a",
    "start": "2574400",
    "end": "2580340"
  },
  {
    "text": "stack-based representation so we need to make back which value will be actually",
    "start": "2580340",
    "end": "2585650"
  },
  {
    "text": "at my variable and which value will be spilt on stack then in a similar way we",
    "start": "2585650",
    "end": "2590930"
  },
  {
    "text": "will allocate hajjaj styles we map all the temporaries to specific slot so for",
    "start": "2590930",
    "end": "2597290"
  },
  {
    "text": "example if we have inline of multiple methods it's possible that the same",
    "start": "2597290",
    "end": "2603050"
  },
  {
    "text": "temporary a multiple Tom Perez will shout the Senate on power I struts in which my time unless Lee we uncut the",
    "start": "2603050",
    "end": "2610490"
  },
  {
    "text": "optimized metal into white pad set so",
    "start": "2610490",
    "end": "2616820"
  },
  {
    "start": "2613000",
    "end": "2690000"
  },
  {
    "text": "another interesting part is about the optimization so a typical problem that",
    "start": "2616820",
    "end": "2622460"
  },
  {
    "text": "we exist in a super special machine is that you need at the same time to map",
    "start": "2622460",
    "end": "2628280"
  },
  {
    "text": "from the Machine state so things like which values in a body style which value",
    "start": "2628280",
    "end": "2633320"
  },
  {
    "text": "is boxed onion box and also we get at the same time which per second for one",
    "start": "2633320",
    "end": "2639440"
  },
  {
    "text": "second in our case we have already the baseline JIT compiler that provide a brief introduction of the stack frame at",
    "start": "2639440",
    "end": "2648710"
  },
  {
    "text": "the language in the language and the best Imperial regime AppStore gist of state to stack states it's already boxed",
    "start": "2648710",
    "end": "2655430"
  },
  {
    "text": "super exit one box and so the the way to do Chima is our work it has an optimized",
    "start": "2655430",
    "end": "2661940"
  },
  {
    "text": "stack frame that looks like it's a it's a method that has been executed by the bytecode",
    "start": "2661940",
    "end": "2667099"
  },
  {
    "text": "interpreter everything is in stack and everything is is object from with the",
    "start": "2667099",
    "end": "2674359"
  },
  {
    "text": "dopes mission metadata it's able to he had multiple stacks come from one stack",
    "start": "2674359",
    "end": "2679849"
  },
  {
    "text": "farm and it's also able to happens to occur objects data like for example",
    "start": "2679849",
    "end": "2686480"
  },
  {
    "text": "catching a blood pressure right if you",
    "start": "2686480",
    "end": "2692480"
  },
  {
    "start": "2690000",
    "end": "2733000"
  },
  {
    "text": "if you look at the example the original example if we were to get some pores",
    "start": "2692480",
    "end": "2697880"
  },
  {
    "text": "halfway through there's a a closure that",
    "start": "2697880",
    "end": "2703849"
  },
  {
    "text": "the optimizing compiler completely eliminated and yet when we deoptimization we have to imagine what",
    "start": "2703849",
    "end": "2711559"
  },
  {
    "text": "would it be like and and create the object so that so that the state is is exactly the same so the optimizing",
    "start": "2711559",
    "end": "2716779"
  },
  {
    "text": "compiler is actually able to lead object creations and the D optimization process",
    "start": "2716779",
    "end": "2722000"
  },
  {
    "text": "quite complicated has to construct an exact copy of the state as it had been",
    "start": "2722000",
    "end": "2728240"
  },
  {
    "text": "had the optimization never never occurred yeah so different days before",
    "start": "2728240",
    "end": "2740089"
  },
  {
    "text": "so the problem is that it will took we can load new code while the program is",
    "start": "2740089",
    "end": "2746210"
  },
  {
    "text": "running we can edit the matter - well documenting and if the method egt is",
    "start": "2746210",
    "end": "2751819"
  },
  {
    "text": "already in line in an optimized method that optimize method needs to be discarded so we need to have a very",
    "start": "2751819",
    "end": "2757760"
  },
  {
    "text": "strict management of the dependency for each optimized method to see if it needs to be discarded when new collision",
    "start": "2757760",
    "end": "2764329"
  },
  {
    "text": "started so another thing that humans for",
    "start": "2764329",
    "end": "2769819"
  },
  {
    "start": "2765000",
    "end": "2915000"
  },
  {
    "text": "our design is the hot stuff tab so it's possible to keep the optimized very code",
    "start": "2769819",
    "end": "2778010"
  },
  {
    "text": "admitted because the our platform independent across multiple startups yeah we should say a bit first about the small talk",
    "start": "2778010",
    "end": "2785260"
  },
  {
    "text": "program format so you know most systems that were talking about here certainly",
    "start": "2785260",
    "end": "2792829"
  },
  {
    "text": "JavaScript startup from some clean state so the that the problem that they they have is",
    "start": "2792829",
    "end": "2798859"
  },
  {
    "text": "that they start up JavaScript programs start off with with the text that's downloaded from the web server it needs",
    "start": "2798859",
    "end": "2805579"
  },
  {
    "text": "to be compiled and anything you're starting off from from a simple state small talk has quite a different",
    "start": "2805579",
    "end": "2810949"
  },
  {
    "text": "architecture semental has what's called a snapshot which is a freezing of its heap so what",
    "start": "2810949",
    "end": "2818119"
  },
  {
    "text": "what's stored on on the disk is is all of the objects that make up your small",
    "start": "2818119",
    "end": "2823160"
  },
  {
    "text": "talk system bitmaps that certainly class objects and and methods and when you",
    "start": "2823160",
    "end": "2829069"
  },
  {
    "text": "bring up the system you basically just floating in this this file image of the",
    "start": "2829069",
    "end": "2834920"
  },
  {
    "text": "heap into the VM populating that the heap and and letting it go so and",
    "start": "2834920",
    "end": "2842209"
  },
  {
    "text": "there's the ability to snapshot the system at any point so that the programmer chooses when to when to save",
    "start": "2842209",
    "end": "2848390"
  },
  {
    "text": "and this natural process just just freezes the whole heap so what what we've we've got in our system is because",
    "start": "2848390",
    "end": "2854989"
  },
  {
    "text": "we construct these optimized methods as normal bytecode methods and they live in",
    "start": "2854989",
    "end": "2860390"
  },
  {
    "text": "the method dictionaries in classes we could save the system in a lot to my state so we're doing something that the",
    "start": "2860390",
    "end": "2867380"
  },
  {
    "text": "traditional JIT vm's just can't do yeah we needed to say level 3 so another",
    "start": "2867380",
    "end": "2876859"
  },
  {
    "text": "thing we try to build is like different tools to be able to easily debug to optimize out because it's in small talk",
    "start": "2876859",
    "end": "2883309"
  },
  {
    "text": "so to use the small type debugger all the small tokens vectors but we tried to",
    "start": "2883309",
    "end": "2890059"
  },
  {
    "text": "do more than that so we try to build a tool to very date between each 15",
    "start": "2890059",
    "end": "2895339"
  },
  {
    "text": "accession paths that the internet representation is in a clean state and that allows us to find out with many",
    "start": "2895339",
    "end": "2902630"
  },
  {
    "text": "bugs and to guarantee that if someone wants to contribute to an optimization pass out or something it could not crush",
    "start": "2902630",
    "end": "2909529"
  },
  {
    "text": "the root system so what we want to do in the future is to also target Dobrev",
    "start": "2909529",
    "end": "2916699"
  },
  {
    "start": "2915000",
    "end": "2950000"
  },
  {
    "text": "metrics so right now in small talk we use a box a presentation of",
    "start": "2916699",
    "end": "2923120"
  },
  {
    "text": "double-precision floating-point oh it's that is true so most developers avoid to",
    "start": "2923120",
    "end": "2929520"
  },
  {
    "text": "use 13 1000 smooth-talked simply and we want to give our two controller when the",
    "start": "2929520",
    "end": "2937470"
  },
  {
    "text": "your turn when the graph generation needs two books on unbox the floating-point object to avoid the extra",
    "start": "2937470",
    "end": "2945560"
  },
  {
    "text": "conditions and to speed up the computation yeah go back go back",
    "start": "2945560",
    "end": "2951990"
  },
  {
    "start": "2950000",
    "end": "3093000"
  },
  {
    "text": "so the way that we we do that if you look at a Java Virtual Machine in Java bytecode",
    "start": "2951990",
    "end": "2957420"
  },
  {
    "text": "Java has in it the notion of some of the byte codes accessing the the object",
    "start": "2957420",
    "end": "2964880"
  },
  {
    "text": "representation in a method and some of the byte codes specifying unboxed",
    "start": "2964880",
    "end": "2971670"
  },
  {
    "text": "floating point operations so the abstract model of a Java stack is some",
    "start": "2971670",
    "end": "2976700"
  },
  {
    "text": "part of it is object pointers and some part of it is flat data and some of the byte codes access that flat byte data",
    "start": "2976700",
    "end": "2983720"
  },
  {
    "text": "performing floating point operations or other unbox operations and some of the",
    "start": "2983720",
    "end": "2989130"
  },
  {
    "text": "byte codes access the object part of the stack doing things like virtual calls etc etc so if we enrich our model of the",
    "start": "2989130",
    "end": "2997290"
  },
  {
    "text": "activation record so that we have a byte array in it that can hold the flat data",
    "start": "2997290",
    "end": "3002420"
  },
  {
    "text": "we can add unsafe byte code operations that do floating-point operations on",
    "start": "3002420",
    "end": "3008090"
  },
  {
    "text": "that that byte array so we have an abstract model of how its executed and indeed in the interpreter part you know",
    "start": "3008090",
    "end": "3013820"
  },
  {
    "text": "if we were in in in small talk in the debugger stepping through those byte codes though that that is actually what",
    "start": "3013820",
    "end": "3019430"
  },
  {
    "text": "would happen but our optimization our optimizing compiler that the baseline JIT has that has the job of mapping that",
    "start": "3019430",
    "end": "3026300"
  },
  {
    "text": "byte array down onto the floating-point registers and converting those byte",
    "start": "3026300",
    "end": "3031820"
  },
  {
    "text": "codes that that address the byte array into instructions on the floating point register state and so that's an",
    "start": "3031820",
    "end": "3038630"
  },
  {
    "text": "interesting example of how in our layered architecture as as was mentioned in the introduction we have this",
    "start": "3038630",
    "end": "3044750"
  },
  {
    "text": "separation of concerns where the base level jet has the the job of mapping",
    "start": "3044750",
    "end": "3050650"
  },
  {
    "text": "machine registers to to stack slots and then the higher level of the system has",
    "start": "3050650",
    "end": "3057510"
  },
  {
    "text": "the job of mapping the stack slots back to the the abstract execution state and",
    "start": "3057510",
    "end": "3062550"
  },
  {
    "text": "and this dynamic deoptimization process which is quite complicated poses a",
    "start": "3062550",
    "end": "3069870"
  },
  {
    "text": "problems in in systems that are not so layered and is mentioned in the in the in the literature as as a problem area",
    "start": "3069870",
    "end": "3076710"
  },
  {
    "text": "and in our double layer system the the",
    "start": "3076710",
    "end": "3081750"
  },
  {
    "text": "computation is is simpler because it's been split in two into two levels so",
    "start": "3081750",
    "end": "3090090"
  },
  {
    "text": "that's that that's it and to say a little bit more about that the project level is a PhD student at INRIA French",
    "start": "3090090",
    "end": "3098550"
  },
  {
    "start": "3093000",
    "end": "3214000"
  },
  {
    "text": "lab in in Lille in northern France I've been a small talk implementer for a long",
    "start": "3098550",
    "end": "3103740"
  },
  {
    "text": "time and employed at cadence and and semi independent and the virtual machine",
    "start": "3103740",
    "end": "3109710"
  },
  {
    "text": "that we have which is called corgis is open-source there's a website where you can find out about it if you're",
    "start": "3109710",
    "end": "3115830"
  },
  {
    "text": "interested in finding out more about the system or even using it for projects or collaborating please get in touch with",
    "start": "3115830",
    "end": "3121680"
  },
  {
    "text": "us in email or the virtual machine development list that's at the bottom in",
    "start": "3121680",
    "end": "3129270"
  },
  {
    "text": "the in the squeak community is used to discuss the virtual machine which is",
    "start": "3129270",
    "end": "3134460"
  },
  {
    "text": "used in a number of systems small talk",
    "start": "3134460",
    "end": "3139640"
  },
  {
    "text": "dialects like Faro squeak and and crease but also the the Newspeak modular small",
    "start": "3139640",
    "end": "3145620"
  },
  {
    "text": "talk system designed by Gilad bracha of the java specification fame so we hope",
    "start": "3145620",
    "end": "3154800"
  },
  {
    "text": "we can interest some of you into coming in and getting further involved because",
    "start": "3154800",
    "end": "3161400"
  },
  {
    "text": "we offer a context in which the development of an optimizing compiler is",
    "start": "3161400",
    "end": "3167190"
  },
  {
    "text": "something done in a very high-level language something we didn't have time to touch on here is that indeed the base",
    "start": "3167190",
    "end": "3172560"
  },
  {
    "text": "level jet the lower parts of the system is also a small talk program and that's",
    "start": "3172560",
    "end": "3178290"
  },
  {
    "text": "developed interactively as a simulator and it's something that is converted to",
    "start": "3178290",
    "end": "3183480"
  },
  {
    "text": "see and then compiled to form our production vm but during development as well as we're developing that that",
    "start": "3183480",
    "end": "3190200"
  },
  {
    "text": "jet including you know the implementation of those unsafe byte codes and and the things like that the",
    "start": "3190200",
    "end": "3195270"
  },
  {
    "text": "the floating-point arithmetic stuff that we that we hope to do soon that's again implemented in a high-level language and",
    "start": "3195270",
    "end": "3201720"
  },
  {
    "text": "and has an interactive development experience even though it punches out a fixed VM well we've got one minute left",
    "start": "3201720",
    "end": "3210060"
  },
  {
    "text": "we touched on this repeatedly from sort",
    "start": "3210060",
    "end": "3218340"
  },
  {
    "start": "3214000",
    "end": "3599000"
  },
  {
    "text": "of the Java via the Java approach and the small talk approach arm and this is",
    "start": "3218340",
    "end": "3226230"
  },
  {
    "text": "bad war sort of not a war but a distinction in the idea of thirty eight",
    "start": "3226230",
    "end": "3232400"
  },
  {
    "text": "schism there was a list machine view of",
    "start": "3232400",
    "end": "3237480"
  },
  {
    "text": "the world where there was a sea bird view in the world and JavaScript is sort of on the seaside Java a drop well the",
    "start": "3237480",
    "end": "3245550"
  },
  {
    "text": "JavaScript - because it's sort of you you don't ever save anything and a few",
    "start": "3245550",
    "end": "3252300"
  },
  {
    "text": "little snapshot that went well programs don't get faster there's as fast as they'll ever be yes which was actually the argument for",
    "start": "3252300",
    "end": "3259830"
  },
  {
    "text": "around four stations is that they're always as fast as they're going to be",
    "start": "3259830",
    "end": "3265230"
  },
  {
    "text": "they don't get faster if I think they were never fast enough until it work this social stuff is that playing in any",
    "start": "3265230",
    "end": "3273960"
  },
  {
    "text": "interesting way or that the Java people reduced in JavaScript people rediscovering the world are they oh it's",
    "start": "3273960",
    "end": "3281550"
  },
  {
    "text": "silly it's certainly true if you if you if you if you trace them that the personnel um it's quite interesting",
    "start": "3281550",
    "end": "3289670"
  },
  {
    "text": "Peter George Peter Deutsche's work inspired the the self team of Dave Unger",
    "start": "3289670",
    "end": "3297600"
  },
  {
    "text": "and Hursley and others was contacted by",
    "start": "3297600",
    "end": "3303210"
  },
  {
    "text": "some people who thought that there was the prospect of implementing fastest",
    "start": "3303210",
    "end": "3308940"
  },
  {
    "text": "mobile virtual machines remunerative Lee for the Wall Street turns out the small talk is is used in",
    "start": "3308940",
    "end": "3315060"
  },
  {
    "text": "the financial industry a lot because domains if all very quickly because of",
    "start": "3315060",
    "end": "3320990"
  },
  {
    "text": "the legislative environment and violently types untyped languages of one of the few languages where the",
    "start": "3320990",
    "end": "3327340"
  },
  {
    "text": "government can keep up with with the rate of development of the real world so they thought that there was the the the",
    "start": "3327340",
    "end": "3333230"
  },
  {
    "text": "the potential of making a big profit if they could implement apply this technology to small talk and and and",
    "start": "3333230",
    "end": "3339910"
  },
  {
    "text": "that was joined up with a very very able",
    "start": "3339910",
    "end": "3345050"
  },
  {
    "text": "program Accord laws back to do what was called strong talk the stroke would be",
    "start": "3345050",
    "end": "3352640"
  },
  {
    "text": "and there was a bidding war because producing strong they could see that",
    "start": "3352640",
    "end": "3358369"
  },
  {
    "text": "Java had just arrived this is now mid-90s and they decided to do a Java VM at the same time that they did a small",
    "start": "3358369",
    "end": "3365150"
  },
  {
    "text": "tot VM and indeed it was a son that bought java they had deeper pockets than",
    "start": "3365150",
    "end": "3370850"
  },
  {
    "text": "that the smaller community and so that technology which started off small talk and self realized itself in in Java",
    "start": "3370850",
    "end": "3379010"
  },
  {
    "text": "first from from Sun and then later on Lars went to Google to speed up",
    "start": "3379010",
    "end": "3386380"
  },
  {
    "text": "JavaScript because JavaScript was so important and his VM the first VM is called v8 and internally that VM",
    "start": "3386380",
    "end": "3396970"
  },
  {
    "text": "recreates a lot of Smalltalk runtime properties to allow it to apply these techniques so in the JavaScript model we",
    "start": "3396970",
    "end": "3403550"
  },
  {
    "text": "only have double precision numbers and and and and notionally we would either box or we would do that fantastic trick",
    "start": "3403550",
    "end": "3410420"
  },
  {
    "text": "from old Lisp machines where objects are not our numbers and so everything's a number and you just use the small part",
    "start": "3410420",
    "end": "3416960"
  },
  {
    "text": "of the address space with the 53 bits of mantissa and you're and you're not a",
    "start": "3416960",
    "end": "3422660"
  },
  {
    "text": "number indicator to actually address objects and so that's when way of doing or the other way of doing it which is in",
    "start": "3422660",
    "end": "3428359"
  },
  {
    "text": "v8 is where you do indeed have box doubles but if the system as it's",
    "start": "3428359",
    "end": "3435170"
  },
  {
    "text": "compiling text or producing results finds out that the result is actually representable as an integer it will use",
    "start": "3435170",
    "end": "3440869"
  },
  {
    "text": "a tag pointer just like in small talk so internally doubles are used infrequently",
    "start": "3440869",
    "end": "3446060"
  },
  {
    "text": "and integers tagged integers are used as much as possible and maps are created that correspond to",
    "start": "3446060",
    "end": "3455910"
  },
  {
    "text": "classes maps define the layout of a particular object as a sequence of slots that only has a subset of all of the",
    "start": "3455910",
    "end": "3462450"
  },
  {
    "text": "properties that it might have etcetera and so all that machinery came from small talk and have been reproduced",
    "start": "3462450",
    "end": "3468510"
  },
  {
    "text": "internally inside the VM so these these VMs are quite quite recognizable so in",
    "start": "3468510",
    "end": "3473910"
  },
  {
    "text": "in there's that hidden way in which the technology has been been recovered but that's that really comes to the the",
    "start": "3473910",
    "end": "3481470"
  },
  {
    "text": "Schism because what the the community",
    "start": "3481470",
    "end": "3487020"
  },
  {
    "text": "that's unaware of the vm technology is proposing is the right way to deal with",
    "start": "3487020",
    "end": "3492210"
  },
  {
    "text": "this dynamism is to add things like final where we can declare a class as something that can't have subclasses and",
    "start": "3492210",
    "end": "3498150"
  },
  {
    "text": "therefore we know that nothing will be overridden and therefore we can you know and the virtual machine community knows",
    "start": "3498150",
    "end": "3504180"
  },
  {
    "text": "that that that way just doesn't buy you anything you can do that automatically you know and and and and so why why",
    "start": "3504180",
    "end": "3510089"
  },
  {
    "text": "bother so I don't want to say more than then I think it's very very difficult to",
    "start": "3510089",
    "end": "3516869"
  },
  {
    "text": "communicate this information to the broader community it's not it's not obvious stuff and we haven't necessarily",
    "start": "3516869",
    "end": "3522810"
  },
  {
    "text": "done a good job even of talking to language designers because people are still proposing adding stata fires to",
    "start": "3522810",
    "end": "3533550"
  },
  {
    "text": "dynamic languages whereas I think that the the state of the compiling of",
    "start": "3533550",
    "end": "3539660"
  },
  {
    "text": "compiling for dynamic languages while it's what it's it's not reached exactly",
    "start": "3539660",
    "end": "3546270"
  },
  {
    "text": "the same performance is still increasing well and again catching up to static compilers and and and still has a lot of",
    "start": "3546270",
    "end": "3552270"
  },
  {
    "text": "future",
    "start": "3552270",
    "end": "3554660"
  },
  {
    "text": "this a secret medicine that that a lot of languages are all alive with there's",
    "start": "3563740",
    "end": "3569509"
  },
  {
    "text": "lots of money that people just don't think about I keep finding out about new",
    "start": "3569509",
    "end": "3575900"
  },
  {
    "text": "ones I I thought I knew all I thought I knew all the old languages yes else in",
    "start": "3575900",
    "end": "3589970"
  },
  {
    "text": "fact well yeah just a few days ago we were visiting lamb research in the East",
    "start": "3589970",
    "end": "3596420"
  },
  {
    "text": "Bay we have a relationship with them they are the one of the world's leading",
    "start": "3596420",
    "end": "3602150"
  },
  {
    "text": "producers of chip manufacturing machines they build these huge machines which are",
    "start": "3602150",
    "end": "3607160"
  },
  {
    "text": "full of things like for example one of the things that these machines might be full of is a two-step gas so what's a",
    "start": "3607160",
    "end": "3613339"
  },
  {
    "text": "two-step gas a two-step gas is a gas which if you inhale it you will walk two",
    "start": "3613339",
    "end": "3619309"
  },
  {
    "text": "steps before you drop dead that's what that's what our two-step gases and so this these machines are very very",
    "start": "3619309",
    "end": "3625279"
  },
  {
    "text": "interesting there's an incredibly sophisticated use of surface physics etc",
    "start": "3625279",
    "end": "3630650"
  },
  {
    "text": "but there's there's some impressive industrial robotics going on moving these these wafers from from machine to",
    "start": "3630650",
    "end": "3637099"
  },
  {
    "text": "machine you might have as many as 200 steps in 200 separate machines in in the",
    "start": "3637099",
    "end": "3643309"
  },
  {
    "text": "production of a chip as many as 70 days to produce a chip all of that control",
    "start": "3643309",
    "end": "3650180"
  },
  {
    "text": "technology is done in small talk it was a DoD financed NOAA DARPA finance",
    "start": "3650180",
    "end": "3655190"
  },
  {
    "text": "project in the 90s that produced the system called control works and it probably every smartphone on the on the",
    "start": "3655190",
    "end": "3663319"
  },
  {
    "text": "planet was at some time going through a machine that was controlled by small talk so you know these these these",
    "start": "3663319",
    "end": "3669170"
  },
  {
    "text": "apparently hidden old languages are used in very very important ways and we just don't don't hear about the",
    "start": "3669170",
    "end": "3678259"
  },
  {
    "text": "string devices - yes we call it in this country we call them one whiff we get one whiff and then you",
    "start": "3678259",
    "end": "3684940"
  },
  {
    "text": "keel over you know they're they're real serious yeah yeah thank you thank you",
    "start": "3684940",
    "end": "3694799"
  },
  {
    "text": "you",
    "start": "3701140",
    "end": "3703200"
  }
]