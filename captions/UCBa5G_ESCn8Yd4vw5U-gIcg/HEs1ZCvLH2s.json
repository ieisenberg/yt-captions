[
  {
    "text": "Okay. So, Hi, everyone. So, uh, our plan for today is to continue talking about search.",
    "start": "4790",
    "end": "11730"
  },
  {
    "text": "So, so that's, uh, what we're going to start doing, finish off some of the stuff we started talking about last time,",
    "start": "11730",
    "end": "18465"
  },
  {
    "text": "and then after that, uh, switch to some of the more interesting topics like learning.",
    "start": "18465",
    "end": "23490"
  },
  {
    "text": "So a few announcements. Um, so the solutions to the old exams are online now. So if you guys wanna start studying for the exam, you can do that.",
    "start": "23490",
    "end": "32180"
  },
  {
    "text": "So, so start looking at some of those problems, I think, that would be useful. Um, actually, let me start with the Search 2 lecture because I think that might be,",
    "start": "32180",
    "end": "43620"
  },
  {
    "text": "like, that has a, a review of some of the topics we've talked about. So it might be easier to do that.",
    "start": "43620",
    "end": "49370"
  },
  {
    "text": "Also, I'm not connected to the network, so we're not gonna do the questions, uh, or show the videos because I have,",
    "start": "49370",
    "end": "55010"
  },
  {
    "text": "I have a hard time connecting to the network in this room. Okay. All right. So, so let's start- continue talking about search.",
    "start": "55010",
    "end": "62910"
  },
  {
    "text": "Uh, so if you guys remember, uh, we had this, this city block problem. So let's go back to that problem and let's just try to do a review of some of the,",
    "start": "62910",
    "end": "71715"
  },
  {
    "text": "some of the search, search algorithms we talked about last time. So, uh, so suppose you want to travel from City 1 to City n only going forward,",
    "start": "71715",
    "end": "81060"
  },
  {
    "text": "and then from City n you wanna go backwards, so and back to City 1 going only backwards, okay?",
    "start": "81060",
    "end": "86970"
  },
  {
    "text": "So, so you- so the problem statement is kind of like this. You're starting in City 1,",
    "start": "86970",
    "end": "95145"
  },
  {
    "text": "you're going- you're going forward and you're getting to some City n. So maybe we're doing that on this.",
    "start": "95145",
    "end": "101450"
  },
  {
    "text": "And then after that, you wanna go backwards and get to, get to City 1 again.",
    "start": "101450",
    "end": "106520"
  },
  {
    "text": "So you go into some of these cities, okay? So, so that's the goal, and then the cost of going to- from any city i",
    "start": "106520",
    "end": "114075"
  },
  {
    "text": "to city j is equal to cij, okay? So, so that's it. So, the question is: What- which one of",
    "start": "114075",
    "end": "120500"
  },
  {
    "text": "these following algorithms could you use to solve this problem? And it could be multiple of them.",
    "start": "120500",
    "end": "125505"
  },
  {
    "text": "So- so we have depth-first search, breadth-first search, dynamic programming, and uniform cost search.",
    "start": "125505",
    "end": "131330"
  },
  {
    "text": "And these were the algorithms we talked about last time. So, uh, maybe just talk to your neighbors for a minute",
    "start": "131330",
    "end": "137195"
  },
  {
    "text": "and then we can do votes on each one of these. Yes, question? Just needed to ask [inaudible]",
    "start": "137195",
    "end": "145930"
  },
  {
    "text": "The [OVERLAPPING]? Okay. Let me check that again. Thank you. Thank you for. [BACKGROUND]",
    "start": "145930",
    "end": "182370"
  },
  {
    "text": "All right, so let's maybe start talking about this.",
    "start": "182370",
    "end": "187805"
  },
  {
    "text": "So how about depth-first search like how many people think we can use depth-first search?",
    "start": "187805",
    "end": "193000"
  },
  {
    "text": "How many people think we can't use depth-first search? There's -a very like good split.",
    "start": "193000",
    "end": "199050"
  },
  {
    "text": "[LAUGHTER] So, some of the people think we can't use depth-first search,",
    "start": "199050",
    "end": "204840"
  },
  {
    "text": "what, what are some reasons maybe just like call it out. The depth first-search, the assumption was that based upon the cost is zero.",
    "start": "204840",
    "end": "211620"
  },
  {
    "text": "Yes, that's right. Yeah, so here we are basically going from City 1 to city n. Each one of these edges had a cost of cij.",
    "start": "211620",
    "end": "219590"
  },
  {
    "text": "I'm just saying cij is greater than or equal to 0. That's the only thing I'm saying about cij.",
    "start": "219590",
    "end": "224900"
  },
  {
    "text": "But if you remember depth-first search, you really wanted the cost to just be equal to 0 because if you remember that whole tree,",
    "start": "224900",
    "end": "230910"
  },
  {
    "text": "like the whole point of depth-first search was I could just stop whenever I could find a solution. And we were assuming that the costs of all the edges is just equal to zero.",
    "start": "230910",
    "end": "239329"
  },
  {
    "text": "So we can't really use depth first search here, because, because our cost is not 0. So assuming, like now that you know that reasoning,",
    "start": "239330",
    "end": "247005"
  },
  {
    "text": "how about breadth first-search? Can we use breadth-first search? Yes?",
    "start": "247005",
    "end": "253990"
  },
  {
    "text": "All of that moving from one city to city n that is not the city n.",
    "start": "255440",
    "end": "262755"
  },
  {
    "text": "So that's a good point. So, so what suggesting is can we think about the problem as going from City 1 to City n? And then after that,",
    "start": "262755",
    "end": "270905"
  },
  {
    "text": "like introduce like a whole new problem that continues that and starts from City n and goes to City 1.",
    "start": "270905",
    "end": "276290"
  },
  {
    "text": "Let me get back to that point like in a second, because like you could potentially think about that -actually like that might be an interesting way of thinking about it.",
    "start": "276290",
    "end": "283069"
  },
  {
    "text": "But, but irrespective of that I can't use depth first-search. So I'm -so far I'm just talking about depth first-search.",
    "start": "283070",
    "end": "288425"
  },
  {
    "text": "Irrespective of how I'm looking at the problem, the costs are gonna be uh, non-zero.",
    "start": "288425",
    "end": "293960"
  },
  {
    "text": "So because the costs are going to be non-zero, I can't use depth-first search. So, so let's talk about that first. So how about breadth first-search?",
    "start": "293960",
    "end": "300480"
  },
  {
    "text": "Can I use breadth-first search? [inaudible]",
    "start": "300480",
    "end": "307849"
  },
  {
    "text": "That's exactly right. So we cannot use breadth-first search here because for breadth first-search. If you remember, you really wanted all the costs to be the same.",
    "start": "307850",
    "end": "315395"
  },
  {
    "text": "They didn't need to be 0, but they needed to be the same thing because then you could just go over the levels. And here I'm not- like I'm not saying I'm not putting",
    "start": "315395",
    "end": "322880"
  },
  {
    "text": "any restrictions on cij being the same thing. Okay? So now let's talk about dynamic programming.",
    "start": "322880",
    "end": "328160"
  },
  {
    "text": "How about dynamic programming? Can we use dynamic programming? All right, so that looks right,",
    "start": "328160",
    "end": "334250"
  },
  {
    "text": "right you like we could use dynamic programming here. Everything looks okay, cij's are positive, looks fine.",
    "start": "334250",
    "end": "341205"
  },
  {
    "text": "Um, how about, um, actually one question?",
    "start": "341205",
    "end": "346395"
  },
  {
    "text": "So, so don't they have cycles here? We kind of, briefly talked about this already. So, don't I have like this cycle here?",
    "start": "346395",
    "end": "353350"
  },
  {
    "text": "Uh, we can think about possibly going from one to n and then n to one.",
    "start": "353720",
    "end": "360015"
  },
  {
    "text": "Yes, so this is a suggestion that, that we have already like heard twice. So we could actually use dynamic programming here",
    "start": "360015",
    "end": "365990"
  },
  {
    "text": "even if it kinda looks like we have a cycle and the reasons we can kinda use this trick were we can basically draw this out again.",
    "start": "365990",
    "end": "376225"
  },
  {
    "text": "And for going forward basically go all the way here, and then after that we're going backwards, kind of include the directionality too.",
    "start": "376225",
    "end": "384889"
  },
  {
    "text": "So all I'm doing is I'm extending the state, the state space to not just be the city but",
    "start": "384890",
    "end": "390740"
  },
  {
    "text": "be the city in addition to that, it would be direction that we're going. So if I'm in City 4 here,",
    "start": "390740",
    "end": "396215"
  },
  {
    "text": "it's City 4 going forward. And if at some point in the future I'm in City, I don't know, 4 again, it's City 4 going backwards.",
    "start": "396215",
    "end": "402800"
  },
  {
    "text": "So I'll keep track of both the city and the directionality. And when I do that then I'm kind of breaking the cycle.",
    "start": "402800",
    "end": "409565"
  },
  {
    "text": "Like I'm not putting any cycles here and I can actually use dynamic programming, okay? Does that make sense? And then uniform cost search.",
    "start": "409565",
    "end": "418900"
  },
  {
    "text": "That, that also sounds good too, right? Like Uniform cost search, you could actually use that. Doesn't matter if you have cycles or not.",
    "start": "419380",
    "end": "425855"
  },
  {
    "text": "And then we have positive, positive, non-negative costs. So we could use uniform cost search. Okay? All right, so this was",
    "start": "425855",
    "end": "432680"
  },
  {
    "text": "just a quick review of some of the things we talked about last time. And, um, another thing we talked about last time was this notion of state.",
    "start": "432680",
    "end": "439810"
  },
  {
    "text": "Okay, so, so we started talking about tree search algorithms and at some point, uh, we switched to dynamic programming and uniform cost search where we are,",
    "start": "439810",
    "end": "449090"
  },
  {
    "text": "uh, like we don't need to- like we don't need to have this exponential blow up. And the reason behind that was we have memoization.",
    "start": "449090",
    "end": "455900"
  },
  {
    "text": "And in addition to that we have this notion of state. Okay? And so, what is a state? A state is a summary of all past actions that are",
    "start": "455900",
    "end": "463460"
  },
  {
    "text": "sufficient for us to choose the future optimally. So, so we need to be really careful about choosing our state.",
    "start": "463460",
    "end": "470465"
  },
  {
    "text": "So in this previous question, uh, we looked at past actions. So if you look at like all cities that you go over it can be in City 1,",
    "start": "470465",
    "end": "478040"
  },
  {
    "text": "then 3, then 4, 5, 6 and city 3 again. So in terms of state,",
    "start": "478040",
    "end": "483780"
  },
  {
    "text": "the things that you wanna keep track of is what city you are in. But in addition to that, you wanna have the directionality because you,",
    "start": "483780",
    "end": "490250"
  },
  {
    "text": "you need to know like where you are and how you're getting back. Okay? So, and we did a couple of examples around that trying to figure out what is,",
    "start": "490250",
    "end": "498350"
  },
  {
    "text": "what is like a specific notion of state for various problems. All right.",
    "start": "498350",
    "end": "504140"
  },
  {
    "text": "So, so we started last time talking about search problems and, and we started formalizing it.",
    "start": "504140",
    "end": "509530"
  },
  {
    "text": "So if you remember our paradigm of modeling and inference and learning we started kind of modeling search problems using this formalism where we defined a starting state, that's s start.",
    "start": "509530",
    "end": "519279"
  },
  {
    "text": "And then we talked about the actions of s, which is a function over our states which returns all possible actions.",
    "start": "519280",
    "end": "525745"
  },
  {
    "text": "And then we talked about the cost function. So the cost function can take a state and action and tell us what is the cost of that,",
    "start": "525745",
    "end": "531910"
  },
  {
    "text": "that, that, that edge. And then we talked about the successor function which takes",
    "start": "531910",
    "end": "537070"
  },
  {
    "text": "a state and action and tells us where we end up at. And again, we had this end function that was just checking if you're in an end state or not.",
    "start": "537070",
    "end": "544540"
  },
  {
    "text": "So these were all the things that we needed to, to define a search problem and we kind of",
    "start": "544540",
    "end": "549680"
  },
  {
    "text": "tried that and a couple of examples to try an example. The City example, all of that. Okay?",
    "start": "549680",
    "end": "554770"
  },
  {
    "text": "And then after talking about these, these different ways of, um,",
    "start": "554770",
    "end": "559774"
  },
  {
    "text": "thinking about search problems, um, we started talking about various types of inference algorithms.",
    "start": "559775",
    "end": "565000"
  },
  {
    "text": "So we talked about tree search. So depth first search, breadth first search, depth first search with iterative deepening, um, backtracking search.",
    "start": "565000",
    "end": "572835"
  },
  {
    "text": "And then after that we talked about some of these graph search type algorithms like, uniform cost search an- and, uh, dynamic programming.",
    "start": "572835",
    "end": "580800"
  },
  {
    "text": "So last time we did an example of, um, uniform cost search but we didn't get to prove the correctness of it.",
    "start": "580800",
    "end": "590075"
  },
  {
    "text": "So I want to switch to some of the last, er, last, last time's, um, slides to just go over this,",
    "start": "590075",
    "end": "596910"
  },
  {
    "text": "this quick theorem and then after that just switch back to, to this lecture. Okay. So uniform cost search.",
    "start": "596910",
    "end": "602615"
  },
  {
    "text": "Like, if you remember what we were doing in uniform cost search, we had three different sets. We had an export set which was basically the set of states that we have visited,",
    "start": "602615",
    "end": "611084"
  },
  {
    "text": "and we are sure how to get to them, and we know the optimal path, and we know everything about them. We had this frontier set which was a set with,",
    "start": "611085",
    "end": "619180"
  },
  {
    "text": "with a set of states that we have got to them, but we're not sure if, if the cost that we have the best cost, cost.",
    "start": "619180",
    "end": "626775"
  },
  {
    "text": "There might be a better way of getting to them and you don't know it. Like you're not sure yet. And then we have the unexplored, er,",
    "start": "626775",
    "end": "632399"
  },
  {
    "text": "set of states which are basically states that we haven't seen yet. So we did this example where we started with all the states in",
    "start": "632400",
    "end": "639490"
  },
  {
    "text": "the unexplored set and then we moved into the frontier and then from the frontier, we move them to the explored set.",
    "start": "639490",
    "end": "644755"
  },
  {
    "text": "So, so this was the example that we did on the board. Okay? And, and we realized that,",
    "start": "644755",
    "end": "650605"
  },
  {
    "text": "like, even if we have cycles, we can actually do this algorithm and then we, we ended up finding the best path being from A to B to C to D and that costs 3.",
    "start": "650605",
    "end": "659580"
  },
  {
    "text": "So, uh, let's actually implement uniform cost search, uh, so I think we didn't do this last time.",
    "start": "659580",
    "end": "666720"
  },
  {
    "text": "So going back to, um, our set of, ah, so, so we started writing up these algorithms for search problems.",
    "start": "666720",
    "end": "674290"
  },
  {
    "text": "So we have, we have written dynamic programming already and backtracking search. So now we can, we can try to kind of implement uniform cost search.",
    "start": "674290",
    "end": "682120"
  },
  {
    "text": "And for doing so, we need to have this priority queue data structure. So this is in a util file.",
    "start": "682120",
    "end": "687330"
  },
  {
    "text": "I'm just showing you what it like what functions it has, it has an update function, and it has a remove min function.",
    "start": "687330",
    "end": "692780"
  },
  {
    "text": "So, so it's just a data structure that I'm gonna use for my frontier. Because like, my frontier I'm popping off things off my frontier.",
    "start": "692780",
    "end": "699365"
  },
  {
    "text": "So I'm going to use this data structure. All right. So let's go back to uniform cost search.",
    "start": "699365",
    "end": "706245"
  },
  {
    "text": "So we're going to define this frontier, where we are adding states to- from unexplored sets,",
    "start": "706245",
    "end": "712080"
  },
  {
    "text": "you're adding states to the frontier. Okay? And it's going to be a priority queue so, so we have that data structure because we've just imported util.",
    "start": "712080",
    "end": "720315"
  },
  {
    "text": "And you're going to basically add the start state with a cost of 0 to the frontier.",
    "start": "720315",
    "end": "725985"
  },
  {
    "text": "So that's the first thing we do. And then after that, like, while the frontier is not empty.",
    "start": "725985",
    "end": "731010"
  },
  {
    "text": "So while true, what we're going to do is, uh, we're going to remove the minimum, uh,",
    "start": "731010",
    "end": "736100"
  },
  {
    "text": "past cost element from the frontier. So, so basically just pop off the frontier that the best thing that exists there,",
    "start": "736100",
    "end": "743670"
  },
  {
    "text": "and just move that to the explored set. Okay. So when I pop off the thing from the frontier, basically I get this past cost and I get the state.",
    "start": "743670",
    "end": "750515"
  },
  {
    "text": "Okay? All right. So, so if, if, er, you're in an end-state,",
    "start": "750515",
    "end": "755774"
  },
  {
    "text": "then you're just going to return that past cost with the history. I'm not putting the history here for now, I'm just returning the cost.",
    "start": "755775",
    "end": "762089"
  },
  {
    "text": "Okay. So after popping off this state from the frontier, the thing we were doing was you were adding the children of that.",
    "start": "762090",
    "end": "768209"
  },
  {
    "text": "So, um, the way we do that is we're gonna use this successor and cost function that we defined last time.",
    "start": "768210",
    "end": "773920"
  },
  {
    "text": "So we can basically iterate over action new state and costs and this successor and cost function.",
    "start": "773920",
    "end": "779805"
  },
  {
    "text": "And, and basically update our frontier, by adding these new states to it.",
    "start": "779805",
    "end": "785014"
  },
  {
    "text": "Okay. And then the cost that you are going to add is cost plus past cost if, if that is better.",
    "start": "785015",
    "end": "790115"
  },
  {
    "text": "So, um, so that's what the update function of the frontier does. And that's pretty much it.",
    "start": "790115",
    "end": "795620"
  },
  {
    "text": "Like that is uniform cost search. You add stuff to the frontier, you pop off stuff from the frontier. And, and that way you explore and remove things from unexplored set to the explored set.",
    "start": "795620",
    "end": "804920"
  },
  {
    "text": "So let's just try that out. Looks like it is doing the right thing. So it got the same value as dynamic programming.",
    "start": "804920",
    "end": "811770"
  },
  {
    "text": "So, er, looks like it kinda works okay. [NOISE] So, um, this code is also online.",
    "start": "811770",
    "end": "818530"
  },
  {
    "text": "So if you want to take a look at it, um, later, actually it's not what I wanted. Um, yeah.",
    "start": "818530",
    "end": "827540"
  },
  {
    "text": "Okay. All right. So, so that was- and here's also the pseudo-code of uniform cost search.",
    "start": "827540",
    "end": "833959"
  },
  {
    "text": "Okay? Okay. So we have- is there a question right there?",
    "start": "833960",
    "end": "840560"
  },
  {
    "text": "What's the runtime of uniform cost search [inaudible]. That's a good point. So so what's- the question is",
    "start": "840560",
    "end": "845855"
  },
  {
    "text": "what's the runtime of uniform cost search? So the runtime of uniform cost search is order of n log n,",
    "start": "845855",
    "end": "851370"
  },
  {
    "text": "where the log n is because of, like, the bookkeeping of, of the priority queue, uh, and you're going over all the edges.",
    "start": "851370",
    "end": "858649"
  },
  {
    "text": "So, so if you can think of n here as the edges and worst-case scenario if you have a fully connected graph,",
    "start": "858650",
    "end": "865180"
  },
  {
    "text": "it's technically n squared log n. But in practice, er, we have [inaudible] graph so people usually refer to that just",
    "start": "865180",
    "end": "872319"
  },
  {
    "text": "n log n where n is the number of states that you have explored. And it's actually not all of the states. It's the states that you have explored.",
    "start": "872320",
    "end": "878535"
  },
  {
    "text": "Okay? And dynamic programming, it's order of n. So technically, like, dynamic programming is slightly better but really depends.",
    "start": "878535",
    "end": "886250"
  },
  {
    "text": "Yeah, certainty. Actually go first and then I'll get you back. Is the only difference between this and Dijkstra's is that you",
    "start": "886250",
    "end": "892259"
  },
  {
    "text": "just don't have all [inaudible] beginning? That wasn't- the question is what's the difference between this and Dijkstra's algorithm,",
    "start": "892260",
    "end": "898680"
  },
  {
    "text": "they're very similar, the only difference is, this is trying to solve a search problem. So you're not like exploring all the states.",
    "start": "898680",
    "end": "904680"
  },
  {
    "text": "When you get to the solution, you get to the solution and then you just return that Dijkstra, you're going from- you're basically exploring all of,",
    "start": "904680",
    "end": "911000"
  },
  {
    "text": "all of the states in the- in your graph. What's your question? [inaudible].",
    "start": "911000",
    "end": "917139"
  },
  {
    "text": "All right. Sounds good. Okay. So, uh, I just want to quickly, er, talk about this correctness theorem.",
    "start": "917140",
    "end": "924029"
  },
  {
    "text": "So, so for uniform cost search we actually have a correctness theorem which basically says uniform cost search does the right thing.",
    "start": "924030",
    "end": "931005"
  },
  {
    "text": "So, uh, what basically this theorem says is, if you have a state that you are popping off the frontier and removing",
    "start": "931005",
    "end": "937300"
  },
  {
    "text": "it from the frontier to the explored, then it's priority, that value which is equal to past cost of s is actually the minimum cost of getting to,",
    "start": "937300",
    "end": "946145"
  },
  {
    "text": "to, to the state s. So what this is saying is, let's say that this is my explored set. So this is my explored set,",
    "start": "946145",
    "end": "953745"
  },
  {
    "text": "and then right here is my frontier, and I have a start state, okay?",
    "start": "953745",
    "end": "960440"
  },
  {
    "text": "And then I have some state s, that right now I have decided that I am popping off s from",
    "start": "960440",
    "end": "967745"
  },
  {
    "text": "the frontier to explored because that is the best thing that has the best past cost. So what the theorem says is, this,",
    "start": "967745",
    "end": "974250"
  },
  {
    "text": "this path that I have from s_start to s, is the shortest path possible to get to get to the state s. Okay.",
    "start": "974250",
    "end": "982675"
  },
  {
    "text": "So the way to prove that is to show that the cost of this path is lower than any other path,",
    "start": "982675",
    "end": "988155"
  },
  {
    "text": "paths that go from s_start to s. So let's say there is some other path,",
    "start": "988155",
    "end": "994245"
  },
  {
    "text": "this green one, that goes from s_start to s some other way. And, and the way that it goes to s is it should probably leave the,",
    "start": "994245",
    "end": "1002525"
  },
  {
    "text": "the explored set of states from some state called t maybe to some goes- go to some other state u and",
    "start": "1002525",
    "end": "1009805"
  },
  {
    "text": "then from u go to s. u and s can be the same thing. But what the point of it is, if I have this other path that goes through- to s,",
    "start": "1009805",
    "end": "1017200"
  },
  {
    "text": "it needs to leave the explored set from some state t. Okay. So what I want to show is I want to show that the,",
    "start": "1017200",
    "end": "1024079"
  },
  {
    "text": "the cost of the green line, I want to show that that is greater than the cost of the black line.",
    "start": "1024080",
    "end": "1032605"
  },
  {
    "text": "Okay. All right. So the cost of the green line, what is the cost of the green line? It's gonna be the cost to here,",
    "start": "1032605",
    "end": "1038640"
  },
  {
    "text": "and then cost of t to u, and the cost of u to s. So I can say well, this cost is actually greater than or equal to,",
    "start": "1038640",
    "end": "1046670"
  },
  {
    "text": "um, priority of t, because that is the cost of getting to t, plus cost of t to u.",
    "start": "1046670",
    "end": "1056309"
  },
  {
    "text": "And I'm just dropping this, this last part. The u to s, I'm just dropping it. Okay. So cost of green is at least equal to priority of t plus cost of t. t, t to u.",
    "start": "1056310",
    "end": "1066715"
  },
  {
    "text": "Okay. Well, what does that equal to? Priority is just a number, right? It's just a number that you are getting off the,",
    "start": "1066715",
    "end": "1072934"
  },
  {
    "text": "the, the, priority queue. So that is actually equal to past cost of T,",
    "start": "1072935",
    "end": "1080140"
  },
  {
    "text": "plus cost of t to u. Okay. And, and this value is going to actually be greater than or equal to priority of u.",
    "start": "1080140",
    "end": "1093880"
  },
  {
    "text": "Well, why is that? Because if u is in my frontier, I've, I've visited u. So I already have some priority value for u.",
    "start": "1093880",
    "end": "1101424"
  },
  {
    "text": "And, and the value that I've assigned for the priority of u, is either equal to this past cost of t plus cost of t,",
    "start": "1101425",
    "end": "1107554"
  },
  {
    "text": "t to u, because I've like, seen that using my explored, using my frontier. So I've definitely seen this or it is",
    "start": "1107555",
    "end": "1113400"
  },
  {
    "text": "something better that, that I don't know what it is. Right? So, so priority of u is going to be less than or",
    "start": "1113400",
    "end": "1118530"
  },
  {
    "text": "equal to this past cost of t plus cost of t to u. Okay. And well, what do I know in terms of priority of u and priority of s?",
    "start": "1118530",
    "end": "1127125"
  },
  {
    "text": "Well, I know priority of u is going to be greater than or equal to priority of s. Well, why is that?",
    "start": "1127125",
    "end": "1135030"
  },
  {
    "text": "Because I already know I'm popping off s next, I'm not popping off U, like, like I've- I know I'm popping off the,",
    "start": "1135030",
    "end": "1140345"
  },
  {
    "text": "the thing that has the least amount of priority, and the least value here, and that's s, and well, that is equal to,",
    "start": "1140345",
    "end": "1147420"
  },
  {
    "text": "er, cost of the black line, black line. Okay.",
    "start": "1147420",
    "end": "1153400"
  },
  {
    "text": "All right. So that was just a quick, like proof of why the uniform cost search always returns",
    "start": "1153400",
    "end": "1160259"
  },
  {
    "text": "kind of the best minimum cost path type [NOISE].",
    "start": "1160260",
    "end": "1165450"
  },
  {
    "text": "All right. So let's go to the slides again. So, um, just a comparison,",
    "start": "1165450",
    "end": "1172500"
  },
  {
    "text": "quick comparison between dynamic programming of uniform cost search. So, uh, we talked about dynamic programming.",
    "start": "1172500",
    "end": "1177645"
  },
  {
    "text": "We know it doesn't allow cycles, but in terms of, uh, action cost, it can be anything like,",
    "start": "1177645",
    "end": "1182880"
  },
  {
    "text": "like you can have negative costs, you can have positive costs. And, er, in terms of, um, complexity is order of n,",
    "start": "1182880",
    "end": "1189330"
  },
  {
    "text": "and then uniform cost search, you can have cycles. So that is cool. But the problem is, the costs need to be non-negative,",
    "start": "1189330",
    "end": "1195615"
  },
  {
    "text": "and into order of n log n. And if you have- if you end up in a situation where you have cycles and your costs are actually negative,",
    "start": "1195615",
    "end": "1202485"
  },
  {
    "text": "there is this other algorithm called Bellman-Ford, that we are not talking about in this class, but you could actually like have",
    "start": "1202485",
    "end": "1207960"
  },
  {
    "text": "a different algorithm that addresses those sort of the things. Okay. All right, how am I doing on time?",
    "start": "1207960",
    "end": "1217259"
  },
  {
    "text": "Okay. So that was, that was this idea of inference. Right now we have like a good series of ways of going about doing inference,",
    "start": "1217260",
    "end": "1225294"
  },
  {
    "text": "uh, for search problems, you have to formalize them. And now the plan for this lecture is, is to think about learning.",
    "start": "1225295",
    "end": "1231500"
  },
  {
    "text": "So how are we going to go about learning when we have search problems? [NOISE] And when our search problem is not fully specified,",
    "start": "1231500",
    "end": "1237590"
  },
  {
    "text": "and there are things in the search problems that are not specified and you want to learn what they are, like the costs, okay.",
    "start": "1237590",
    "end": "1243165"
  },
  {
    "text": "So, uh, so that's going to be the first part of the lecture, and then towards the end of the lecture,",
    "start": "1243165",
    "end": "1248190"
  },
  {
    "text": "we're going to talk about a few other algorithms that make things faster. So, so smarter ways of making things faster.",
    "start": "1248190",
    "end": "1254715"
  },
  {
    "text": "We're going to talk about A star and some sort of relaxation type strategies, okay. All right.",
    "start": "1254715",
    "end": "1261149"
  },
  {
    "text": "So, um, so let's go back to our transportation problem. So, so this was our transportation problem where,",
    "start": "1261150",
    "end": "1269220"
  },
  {
    "text": "er, we had a start state and we can either walk, and by walking we can go from state s to state s plus 1,",
    "start": "1269220",
    "end": "1276165"
  },
  {
    "text": "and that costs one, or we can take a tram, a magic tram that takes us from state s to state 2s,",
    "start": "1276165",
    "end": "1282344"
  },
  {
    "text": "and that costs 2, okay, and we want to get to state n. So, uh, we can formalize that as a search problem.",
    "start": "1282344",
    "end": "1288840"
  },
  {
    "text": "We can like we saw it- we saw this last time, we can actually try to find what is the best path to get from",
    "start": "1288840",
    "end": "1294525"
  },
  {
    "text": "state 1 to any state n like we saw- like path- like walk walk, tram tram tram, walk tram tram.",
    "start": "1294525",
    "end": "1300735"
  },
  {
    "text": "This is one potential like optimal path that one can get, okay? But the thing is, uh,",
    "start": "1300735",
    "end": "1306155"
  },
  {
    "text": "the world is not perfect like, like modeling is actually really hard, like it's not that we always have this nice model with everything.",
    "start": "1306155",
    "end": "1312700"
  },
  {
    "text": "And we could end up in scenarios where we have a search problem, and, and we don't actually know what the costs of our actions are.",
    "start": "1312700",
    "end": "1319230"
  },
  {
    "text": "So we don't actually know what the cost of walking is, or what the cost of tram is. But maybe we actually have access to,",
    "start": "1319230",
    "end": "1325560"
  },
  {
    "text": "to this optimal path. Like, maybe I know the optimal path is walk walk tram tram tram, walk tram tram, but I don't know what the costs are.",
    "start": "1325560",
    "end": "1333000"
  },
  {
    "text": "So the point of learning is, is to go about learning what these cost values are based on this,",
    "start": "1333000",
    "end": "1339341"
  },
  {
    "text": "this optimal path that we have. So, so I want to actually learn the costs of walking is 1,",
    "start": "1339341",
    "end": "1344385"
  },
  {
    "text": "and the cost of tram is 2. And this is actually a common problem that we have like in machine learning in general.",
    "start": "1344385",
    "end": "1350340"
  },
  {
    "text": "So like for example, um, you might have data from, uh, how a person does something or like how a person,",
    "start": "1350340",
    "end": "1356130"
  },
  {
    "text": "let's say, like grasps an object. And I, I have no idea what was the cost that the person who was optimizing to grasp an object,",
    "start": "1356130",
    "end": "1362235"
  },
  {
    "text": "right, but I have like the trajectory I know like what, what the path they took when they picked up an object. So what I can do is,",
    "start": "1362235",
    "end": "1368250"
  },
  {
    "text": "if I have access to that path of how they picked up an object, then from that I can actually learn what was the cost function that they were optimizing,",
    "start": "1368250",
    "end": "1375585"
  },
  {
    "text": "because then I can put that cost function maybe on a, on a robot that does the same thing. Question?",
    "start": "1375585",
    "end": "1382950"
  },
  {
    "text": "[inaudible] like five or something. That's a good question. So the question is,",
    "start": "1382950",
    "end": "1388890"
  },
  {
    "text": "is it possible to have multiple solutions here? Yes, so we are gonna actually see that like later, like what sort of the solutions that we gonna get, are there,",
    "start": "1388890",
    "end": "1395850"
  },
  {
    "text": "ther- there could be cases where we have multiple solutions. The ratio of it is the thing that matters. So if you have like, walk is 1, tram is 4,",
    "start": "1395850",
    "end": "1403065"
  },
  {
    "text": "if you get to an 8, you kind of get the same sort of behavior. Uh, and then it also depends on what sort of data you have.",
    "start": "1403065",
    "end": "1409200"
  },
  {
    "text": "Like if your data allowed you to actually recover the, the, the true solution. So, so we're gonna actually talk about all these cases, okay? All right.",
    "start": "1409200",
    "end": "1418725"
  },
  {
    "text": "Okay. So if you think about it, when the way- the search problem we were trying to solve,",
    "start": "1418725",
    "end": "1423889"
  },
  {
    "text": "this, this was the inference problem, was when you are, you are given kind of a search formulation and you are given a cost,",
    "start": "1423890",
    "end": "1430035"
  },
  {
    "text": "and, and our goal was to find the sequence of actions, this optimal sequence of actions, that was the shortest path or the best path and,",
    "start": "1430035",
    "end": "1436515"
  },
  {
    "text": "and some path or some way, and this is a forward problem. So search is this forward problem, where you're given a cost and you want to find a sequence of actions, okay.",
    "start": "1436515",
    "end": "1444900"
  },
  {
    "text": "So it's interesting because learning in some sense is, is an inverse problem. It's the inverse of, of search.",
    "start": "1444900",
    "end": "1451075"
  },
  {
    "text": "So the inverse of search is, if you give me that sequence of actions, the, the best sequence of actions that you've got,",
    "start": "1451075",
    "end": "1457415"
  },
  {
    "text": "then can you figure out what the cost is? So, so in some sense you can think of learning as this inverse problem of,",
    "start": "1457415",
    "end": "1463040"
  },
  {
    "text": "of search and, and we are going to kind of address that. So I'm going to go over one example to,",
    "start": "1463040",
    "end": "1469169"
  },
  {
    "text": "to talk about, er, learning. Um, and I'm actually going to use the notation of, uh,",
    "start": "1469170",
    "end": "1474765"
  },
  {
    "text": "the machine lea- learning lectures that we had, um, at the beginning of like last week basically.",
    "start": "1474765",
    "end": "1480269"
  },
  {
    "text": "So, um, let's say that we have, ah, maybe I can draw this. [NOISE] Um, yeah, I will just draw the scheme.",
    "start": "1480270",
    "end": "1491070"
  },
  {
    "text": "So let's say we have a search problem without costs, and, and that's our input.",
    "start": "1491070",
    "end": "1496080"
  },
  {
    "text": "So if- so, so we are kind of framing this problem of learning as a prediction problem. And if you remember prediction problems,",
    "start": "1496080",
    "end": "1502080"
  },
  {
    "text": "in prediction problems we had, ah, an input. So our input was x, okay.",
    "start": "1502080",
    "end": "1508845"
  },
  {
    "text": "And in, in this case you are saying our input is a search problem, search problem without costs, okay?",
    "start": "1508845",
    "end": "1519135"
  },
  {
    "text": "So that is my input. And then we have outputs. And in this case my,",
    "start": "1519135",
    "end": "1525000"
  },
  {
    "text": "my output y is this optimal sequence of actions that one could get- gets,",
    "start": "1525000",
    "end": "1530250"
  },
  {
    "text": "so it's the solution path, so it's a solution path, okay.",
    "start": "1530250",
    "end": "1535470"
  },
  {
    "text": "And what I wanna do is, I wanna- like, like if you remember machine learning, the idea was, I would wanna find this predictor, this f function,",
    "start": "1535470",
    "end": "1542190"
  },
  {
    "text": "f that we take an input, f of x, and then it would basically return the solution path in other settings and it would generalize.",
    "start": "1542190",
    "end": "1549795"
  },
  {
    "text": "So, so that was kind of the idea that we explored in machine learning, and you kinda wanna do the same thing in here. So, uh, let's start with- um,",
    "start": "1549795",
    "end": "1557520"
  },
  {
    "text": "I'm going to draw that here. So let's start with an example where we are in city 1, and then maybe we walk to city 2,",
    "start": "1557520",
    "end": "1564450"
  },
  {
    "text": "so we can walk to city 2. And then from there, maybe I have two options.",
    "start": "1564450",
    "end": "1569820"
  },
  {
    "text": "I can keep walking to get to city 4. So I can do walk walk walk.",
    "start": "1569820",
    "end": "1576109"
  },
  {
    "text": "Or maybe I can take the tram and end up in city 4, okay?",
    "start": "1576109",
    "end": "1581860"
  },
  {
    "text": "And, and the thing is I don't actually know what the costs of these, these actions are, I don't know what the cost of do- uh,",
    "start": "1582400",
    "end": "1589264"
  },
  {
    "text": "walk is, what the cost of tram is. Okay? But one thing I know is that my, my solution path,",
    "start": "1589265",
    "end": "1595910"
  },
  {
    "text": "my y is equal to walk, walk, and walk.",
    "start": "1595910",
    "end": "1602310"
  },
  {
    "text": "So, um, so one way to go about this is to actually start with some initialization of, of these costs.",
    "start": "1603580",
    "end": "1612620"
  },
  {
    "text": "So the way we're defining these costs are going to be, uh, I'm going to use the word, um, I'm gonna write here maybe.",
    "start": "1612620",
    "end": "1619684"
  },
  {
    "text": "I'll just write up here. I'm going to use w like,",
    "start": "1619685",
    "end": "1627335"
  },
  {
    "text": "because I want to use the same notation as as the learning lectures. So w is going to be the weights that o- of,",
    "start": "1627335",
    "end": "1633860"
  },
  {
    "text": "of each one of my actions. I have two actions. In this case I can either walk or I can take the tram so I'm going to call them action 1.",
    "start": "1633860",
    "end": "1640925"
  },
  {
    "text": "So w of action 1 is w of walking. And then w of action 2 is w of taking the tram.",
    "start": "1640925",
    "end": "1651920"
  },
  {
    "text": "So action 2 is taking the tram. So I'm defining these w values, and the way I'm defining these weights is just as a function of actions.",
    "start": "1651920",
    "end": "1660140"
  },
  {
    "text": "This could technically be a function of state and actions but right now I'm just simplifying this and I'm saying the w's is",
    "start": "1660140",
    "end": "1666350"
  },
  {
    "text": "this values, the costs of walking just depend- the cost of going from 1-2 just depends on my action.",
    "start": "1666350",
    "end": "1674630"
  },
  {
    "text": "It doesn't depend on what state I'm in. You could imagine settings where it actually depends on like what city you are in too, okay?",
    "start": "1674630",
    "end": "1680495"
  },
  {
    "text": "So, so then under that scenario what is the cost of, cost of y?",
    "start": "1680495",
    "end": "1686045"
  },
  {
    "text": "It is going to be w walk, plus w walk, plus w walk. Okay? So what I'm suggesting is let's just start with something.",
    "start": "1686045",
    "end": "1695345"
  },
  {
    "text": "Let's just start with- yeah, like let's just start with these weights. So I'm gonna say walking costs 3.",
    "start": "1695345",
    "end": "1702065"
  },
  {
    "text": "And it's always going to cost 3. Again, the reason it's always going to cost 3 is I'm basically saying my weights only depend on the action,",
    "start": "1702065",
    "end": "1709309"
  },
  {
    "text": "they don't depend on state. So it's always going to cost three. And I'm going to say well why not let's just say, the tram takes the cost of 2.",
    "start": "1709310",
    "end": "1716900"
  },
  {
    "text": "Okay? So this doesn't like look right but like let's just say I assume this is the right solution, okay?",
    "start": "1716900",
    "end": "1723500"
  },
  {
    "text": "So now what I wanna do is I want to be able to update these weights, update these values in a way that I can get this optimal path that I have,",
    "start": "1723500",
    "end": "1732740"
  },
  {
    "text": "this, this walk, walk, walk. Okay? So how can I do that? So I started with these random initializations of what the weights are.",
    "start": "1732740",
    "end": "1739174"
  },
  {
    "text": "Okay? So now that I've done that I can, I can try to figure out what is the optimal, optimal path here based on these weights.",
    "start": "1739175",
    "end": "1745805"
  },
  {
    "text": "So what is my prediction, so that is y prime. That is my prediction based on these weights that I've",
    "start": "1745805",
    "end": "1751400"
  },
  {
    "text": "just set up in terms of like what the optimal path is. Well, what is that? That is walk tram because this costs 5 and this costs 9.",
    "start": "1751400",
    "end": "1758495"
  },
  {
    "text": "So with these weights, these random weights that have just come up with I'm going to pick walk and tram.",
    "start": "1758495",
    "end": "1763685"
  },
  {
    "text": "And that is my prediction. Okay? So now what we wanna do is you want to update our",
    "start": "1763685",
    "end": "1772730"
  },
  {
    "text": "w's based on the fact that our true label is walk, walk, walk and our prediction is walk, tram.",
    "start": "1772730",
    "end": "1780005"
  },
  {
    "text": "Okay? And, and the algorithm that kind of does this, this does like the most like silliest thing possible.",
    "start": "1780005",
    "end": "1786559"
  },
  {
    "text": "So, so what it does is it's going to first look at the truth value of W. Okay?",
    "start": "1786560",
    "end": "1791660"
  },
  {
    "text": "So it's going to look at- so, so, so the weights are starting from- so I decided that",
    "start": "1791660",
    "end": "1796760"
  },
  {
    "text": "this guy is 3 and I decided that this guy is 2, and I'm gonna update them. So I'm going to look at every action in this path.",
    "start": "1796760",
    "end": "1803914"
  },
  {
    "text": "And for every action in this path I'm going to down-weight the, the weight of that.",
    "start": "1803915",
    "end": "1809045"
  },
  {
    "text": "Well why am I going to do that? Because I- I don't want to penalize that, right? This is the true thing. I want the weight of the true thing to be small.",
    "start": "1809045",
    "end": "1815524"
  },
  {
    "text": "So I see walk. I'm like okay so I see walk. The weight of that was 3. I'm going to down-weight that by 1.",
    "start": "1815525",
    "end": "1821779"
  },
  {
    "text": "I'm gonna make that two. I see walk again. So I'm gonna bring that with 1.",
    "start": "1821780",
    "end": "1827840"
  },
  {
    "text": "I see walk again, I'm going to subtract one again. I end up at 0. Okay? Now I'm gonna go over",
    "start": "1827840",
    "end": "1835460"
  },
  {
    "text": "my prediction and then for every action I see here I'm going to bring it up, bring the cost, uh, the,",
    "start": "1835460",
    "end": "1840769"
  },
  {
    "text": "the weight up by 1. So I see you walk again here, I'm going to bring it up by 1.",
    "start": "1840770",
    "end": "1846785"
  },
  {
    "text": "So, so, these were subtract, subtract, subtract, bring it up by one because it's over my y prime.",
    "start": "1846785",
    "end": "1853150"
  },
  {
    "text": "And then I see tram. And then because I see tram, I'm going to bring this up by 1.",
    "start": "1853150",
    "end": "1859930"
  },
  {
    "text": "And that ends up in 3. So my new weights here are going to be three- the, the, the,",
    "start": "1859930",
    "end": "1866900"
  },
  {
    "text": "the weight of walk just became 1 and then the weight of tram just became 3.",
    "start": "1866900",
    "end": "1874790"
  },
  {
    "text": "Okay? And, and now I can kind of repeat doing this and see if that gets me this,",
    "start": "1874790",
    "end": "1881170"
  },
  {
    "text": "this optimal solution or not. So I'm going to try running my search algorithm. If I run my search algorithm this path,",
    "start": "1881170",
    "end": "1886555"
  },
  {
    "text": "this path costs 3, this path costs 4. So I'm actually going to get this path and this path.",
    "start": "1886555",
    "end": "1891590"
  },
  {
    "text": "So my new prediction is just going to be walk, walk, walk. They're going to be the same thing. My weights are not gonna change.",
    "start": "1891590",
    "end": "1896945"
  },
  {
    "text": "I'm going to converge. Yes. Is it always one? So I'm talking about a very simplified version of this but yeah it is always one.",
    "start": "1896945",
    "end": "1905000"
  },
  {
    "text": "So the very simplified version of this is this version where I'm saying the w's just depend on, on actions.",
    "start": "1905000",
    "end": "1910550"
  },
  {
    "text": "If you, if you make the weights depend on state and actions, there is a more generalized form of this. This is called the stru- er, the structure pe- er, perceptron algorithm,",
    "start": "1910550",
    "end": "1918290"
  },
  {
    "text": "we'll talk about- briefly talk about the, the version where there is a state action too, but for this case we are just depending on action.",
    "start": "1918290",
    "end": "1924695"
  },
  {
    "text": "You're literally just bring it up by one or by whatever like by whatever you bring it up here, you gotta bring it down by the same thing.",
    "start": "1924695",
    "end": "1931295"
  },
  {
    "text": "So, so it's plus and minus a whatever a is. There's a question. [inaudible] why we do the plus 1 after we do all the minus 1s?",
    "start": "1931295",
    "end": "1940100"
  },
  {
    "text": "So why am I doing the minus 1s? So I'll get to that. So, so when I look at y here, right?",
    "start": "1940100",
    "end": "1945590"
  },
  {
    "text": "Like this is the thing that I really wanted. So if I- so when I see walk I realize that walking was a good thing,",
    "start": "1945590",
    "end": "1952190"
  },
  {
    "text": "so I need to bring down the weight of that. But if, if the weights that I already had like knew that walking is pretty",
    "start": "1952190",
    "end": "1958220"
  },
  {
    "text": "good then like the weights that I already had knew that walking is pretty good, I should like cancel that out.",
    "start": "1958220",
    "end": "1963620"
  },
  {
    "text": "So, so that's why we are doing the plus 1 because like at this stage like I knew walking is pretty good up here like like my prediction also said walk.",
    "start": "1963620",
    "end": "1970670"
  },
  {
    "text": "So if, if I'm subtracting it, I should add it to, to kind of like get them cancel that.",
    "start": "1970670",
    "end": "1975800"
  },
  {
    "text": "But like right here, like I didn't know walking is good so I'm going to bring down the weight of that and then bring up the weight of, uh, tram.",
    "start": "1975800",
    "end": "1983030"
  },
  {
    "text": "[inaudible].",
    "start": "1983030",
    "end": "1989210"
  },
  {
    "text": "Yeah. So, so I mistakenly thought tram, uh, is the way to go. So to avoid that next time around,",
    "start": "1989210",
    "end": "1994565"
  },
  {
    "text": "I'm going to make the cost of tram higher so I don't take that route anymore. And there's a question there.",
    "start": "1994565",
    "end": "2000850"
  },
  {
    "text": "So here- only like the only reason why [inaudible] in the second- in the, the y prime is because we know the y prime is different from y.",
    "start": "2000850",
    "end": "2008455"
  },
  {
    "text": "Yes. But then, like what if like we have like a long sequence and y prime is only different in",
    "start": "2008455",
    "end": "2013630"
  },
  {
    "text": "like one small location and like would that change the weights sufficiently?",
    "start": "2013630",
    "end": "2018865"
  },
  {
    "text": "Yeah. So if, if, er, so you're asking. Okay, if my y and y prime, prime are kinda like the same thing walk,",
    "start": "2018865",
    "end": "2024130"
  },
  {
    "text": "walk, walk or something and then at the very end this last one they're going to be different. Yeah. So like we were just and for that last one we are just adding one, right?",
    "start": "2024130",
    "end": "2030970"
  },
  {
    "text": "So, so it does like weighted, er, it does actually address that and it just run- you can run it until you",
    "start": "2030970",
    "end": "2036220"
  },
  {
    "text": "get the sequences to be exactly the same thing so you don't have any mistakes. Yeah. There's a question back there.",
    "start": "2036220",
    "end": "2041365"
  },
  {
    "text": "Does it matter if our new cost become negative? Uh, does it matter if our new costs become- it depends on what,",
    "start": "2041365",
    "end": "2047020"
  },
  {
    "text": "sort of, search algorithm you are using. Uh, at the end of the day it's fine if you're using dynamic programming so I can have like a negative cost here and I'm just calling,",
    "start": "2047020",
    "end": "2055524"
  },
  {
    "text": "uh, like dynamic programming at the end of the day with that and that is fine. Yeah, it's fine if the cost becomes negative. There's a question.",
    "start": "2055525",
    "end": "2061419"
  },
  {
    "text": "In this problem we want to find the true cost for walk and tram, but we ended up converging to 1.",
    "start": "2061420",
    "end": "2067495"
  },
  {
    "text": "So this becomes a problem. Sorry, did not supposed- Just like the end result for this algorithm we got is 1 for walk and 3 for tram.",
    "start": "2067495",
    "end": "2076389"
  },
  {
    "text": "And the real result, like in the previous example was 1 and 2. 1 and 2. Right, yes. Yeah. So the, so the question is, er,",
    "start": "2076390",
    "end": "2081850"
  },
  {
    "text": "we got here 1 and 3. Is this actually right? Like, like if you remember like when we define this tram problem,",
    "start": "2081850",
    "end": "2087565"
  },
  {
    "text": "we said walking costs 1 and tram costs 2 but we never got that. Well, the reason we never got that is the solution we are going to",
    "start": "2087565",
    "end": "2094060"
  },
  {
    "text": "get here is just based on our, our training data. So if my training data is just walk, walk, walk,",
    "start": "2094060",
    "end": "2099339"
  },
  {
    "text": "this is like the best thing I can get and I can kind of like converge to this solution where, where the two end up being equal.",
    "start": "2099340",
    "end": "2105250"
  },
  {
    "text": "I don't have any mistakes on this. If I have more like data points then I'm going to do this longer and actually try it out on other training data and,",
    "start": "2105250",
    "end": "2111790"
  },
  {
    "text": "and then I might converge to a different thing. Is there any rule for as far as initializing the weight?",
    "start": "2111790",
    "end": "2117370"
  },
  {
    "text": "Is- I, I, I, I, I'm assuming when- the fu- uh, further when we are from the actual truth,",
    "start": "2117370",
    "end": "2124240"
  },
  {
    "text": "the longer it's going to take to, uh, actually converge. It's- o- okay so the question is how do we initialize?",
    "start": "2124240",
    "end": "2129850"
  },
  {
    "text": "So in na- in a natural algorithm you're just initializing with 0. So we're initializing everything by 0. It's actually not that bad because you just,",
    "start": "2129850",
    "end": "2136465"
  },
  {
    "text": "you just basically have this sequence and in the- for the more general case you're computing a feature value that you just compute",
    "start": "2136465",
    "end": "2143110"
  },
  {
    "text": "the full thing and you just do one single subtraction. So it is not that costly actually to do this.",
    "start": "2143110",
    "end": "2149210"
  },
  {
    "text": "Yeah. [inaudible] know the path for a given cost. If you have that input can we incorporate that into the algorithm?",
    "start": "2159990",
    "end": "2167380"
  },
  {
    "text": "So, you're saying if we have some prior knowledge about the cost can we incorporate it? Yeah. Um, that is interesting.",
    "start": "2167380",
    "end": "2173500"
  },
  {
    "text": "So, uh, in this current format. So if you have some prior algorithm",
    "start": "2173500",
    "end": "2179470"
  },
  {
    "text": "maybe you'll like then your prediction is going to be better, right? So if you have some knowledge about it maybe you'll get",
    "start": "2179470",
    "end": "2184810"
  },
  {
    "text": "a better prediction and then based on that you don't update it as much. So maybe you can incorporate into the search problem.",
    "start": "2184810",
    "end": "2190810"
  },
  {
    "text": "But again this is the most like general form of this algorithm. The simple- kind of,",
    "start": "2190810",
    "end": "2196420"
  },
  {
    "text": "like the simplified version of it also like even like for the action. So not doing anything fancy. It's not doing something that hard either, honestly.",
    "start": "2196420",
    "end": "2204460"
  },
  {
    "text": "Are we worried about overfitting at all? [BACKGROUND] Yeah. So it is going to- it can too- you're- yeah,",
    "start": "2204460",
    "end": "2210220"
  },
  {
    "text": "so I'll show some examples on this. Like we are going to code this up and then we'll see overfitting, kind of, situations.",
    "start": "2210220",
    "end": "2216280"
  },
  {
    "text": "So- so I'll get back to that actually. All right. All right. So, um, all right, so let's move on. Ah, okay.",
    "start": "2216280",
    "end": "2223150"
  },
  {
    "text": "So- so this is just like the things that are on the slides are what I've already talked about. So, uh, yeah, so here's an example.",
    "start": "2223150",
    "end": "2229420"
  },
  {
    "text": "So we start with, 3 for walk and 2 for tram. And then the idea is like how are we going to change",
    "start": "2229420",
    "end": "2235870"
  },
  {
    "text": "the costs so we get the- the solution that we're hoping for. Um, and- and as I was saying, well,",
    "start": "2235870",
    "end": "2242470"
  },
  {
    "text": "we can assume that the costs only depend on the action. So I'm assuming cost of s, a is just w of a,",
    "start": "2242470",
    "end": "2248589"
  },
  {
    "text": "and in the most general form it- it can depend on- on the state too. Um, okay.",
    "start": "2248590",
    "end": "2254410"
  },
  {
    "text": "So then if you take any candidate output path, then what would be the cost of the path? It would just be the sum of these W values over- over all the edges.",
    "start": "2254410",
    "end": "2262945"
  },
  {
    "text": "So it would just be W of a_1 plus W of a_2 plus W of a_3. And as you've seen in this example,",
    "start": "2262945",
    "end": "2268840"
  },
  {
    "text": "the cost of a path is just W of walk, plus W of walk, plus W of walk, or W of walk plus W of tram.",
    "start": "2268840",
    "end": "2274990"
  },
  {
    "text": "So- so that's all this slide is saying. So- so that's how we compute the cost. All right, so- so now, uh,",
    "start": "2274990",
    "end": "2281380"
  },
  {
    "text": "let's actually look at this algorithm like running in practice. Um, okay, let me actually go over the pseudocode.",
    "start": "2281380",
    "end": "2289060"
  },
  {
    "text": "So- so, you start initializing W has to be equal to 0. And then after that we're going to iterate for some amount of",
    "start": "2289060",
    "end": "2295329"
  },
  {
    "text": "T and then we have a training set of examples. It might not be just one here. I just showed this one example like- like,",
    "start": "2295330",
    "end": "2302155"
  },
  {
    "text": "the only training example I had was- was that walk, walk, walk is a good thing, but you can imagine having",
    "start": "2302155",
    "end": "2307690"
  },
  {
    "text": "multiple training examples for a search problem. And then what you can do is you can compute",
    "start": "2307690",
    "end": "2313090"
  },
  {
    "text": "your prediction so that is y prime given that you have some W and the-then you can start with this W equal",
    "start": "2313090",
    "end": "2318640"
  },
  {
    "text": "to zero and then-then just compute your prediction y prime, and then basically, you can do this plus and minus type of action.",
    "start": "2318640",
    "end": "2325299"
  },
  {
    "text": "So for each action that is in your true y that is in your true label, you're going to subtract 1.",
    "start": "2325300",
    "end": "2331720"
  },
  {
    "text": "So to decrease the cost of true y. And then for each action that is in your prediction you're going to add- add one to- to,",
    "start": "2331720",
    "end": "2338680"
  },
  {
    "text": "kind of, increase the cost of the predicted y. Okay. All right. So let's look at implementing this one.",
    "start": "2338680",
    "end": "2346330"
  },
  {
    "text": "And let's try to look at some examples here. All right. So let's go back to the tram problem.",
    "start": "2346330",
    "end": "2351460"
  },
  {
    "text": "So this is again the same tram problem. We just want to use the same, sort of, format. Uh, I actually went back and wrote up the history here.",
    "start": "2351460",
    "end": "2359890"
  },
  {
    "text": "If you remember the last time I was saying I'm not returning the history. Now we have a way of returning history of each one of",
    "start": "2359890",
    "end": "2365140"
  },
  {
    "text": "these algorithms cause we are going to call dynamic programming and we need the history. All right. So let's go back to our transportation problem.",
    "start": "2365140",
    "end": "2372400"
  },
  {
    "text": "So we had a cost of 1 and 2 for walking and tram, but what we wanna do is we wanna put parameters there.",
    "start": "2372400",
    "end": "2379000"
  },
  {
    "text": "So you wanna actually put this weight and we can give that to our transportation problem. So in addition to the number of blocks,",
    "start": "2379000",
    "end": "2385510"
  },
  {
    "text": "now I'm going to actually give like the weight of different actions. Okay. All right.",
    "start": "2385510",
    "end": "2394299"
  },
  {
    "text": "So then walking has a weight and, um, [NOISE] tram has a weight.",
    "start": "2394300",
    "end": "2401500"
  },
  {
    "text": "So now I have updated my transportation problem to generally take different weight values.",
    "start": "2401500",
    "end": "2408430"
  },
  {
    "text": "So- so, now we wanna be able to generate some- some training examples. So that's what I wanna do.",
    "start": "2408430",
    "end": "2413619"
  },
  {
    "text": "I wanna generate different types of training examples that- that we can call so we can get these true labels.",
    "start": "2413620",
    "end": "2418720"
  },
  {
    "text": "So let's assume that the true weights for our training example is just 1 and 2. So- so that is what we really want.",
    "start": "2418720",
    "end": "2425530"
  },
  {
    "text": "Okay. And- and we're going to just wri- write this prediction function that we can call up later to- to- to get different values of y.",
    "start": "2425530",
    "end": "2434305"
  },
  {
    "text": "So the prediction function is going to get the number of blocks. So- so it's going to get, um, N, the number of blocks here.",
    "start": "2434305",
    "end": "2442330"
  },
  {
    "text": "And it is going to act with this path that we want. So it's going to output these- these y values, this different path.",
    "start": "2442330",
    "end": "2449290"
  },
  {
    "text": "Okay. So, all right,",
    "start": "2449290",
    "end": "2454525"
  },
  {
    "text": "so the whole point of prediction is- is basically, like running this f of x function.",
    "start": "2454525",
    "end": "2461154"
  },
  {
    "text": "Um, and we can define our transportation problem with- with n, n weights.",
    "start": "2461155",
    "end": "2469640"
  },
  {
    "text": "And the way we are going to get this is by calling dynamic programming. So someone asked you earlier could the costs be negative?",
    "start": "2469650",
    "end": "2476260"
  },
  {
    "text": "Well, yes because now I'm calling dynamic programming and if like this problem has negative cost, that is fine too.",
    "start": "2476260",
    "end": "2481990"
  },
  {
    "text": "Um, So and the history is going to get and the action new state and- and costs, right?",
    "start": "2481990",
    "end": "2488970"
  },
  {
    "text": "So but the thing that I actually wanna return from my predict function is a sequence of actions. So I'll just get the action out of this history that I get from dynamic programming.",
    "start": "2488970",
    "end": "2498265"
  },
  {
    "text": "So I'm calling dynamic programming on my problem that is going to return a history or get the sequence of actions from that,",
    "start": "2498265",
    "end": "2504714"
  },
  {
    "text": "and that is my predict function and I can just call that later. So let's go back to generating examples.",
    "start": "2504715",
    "end": "2510069"
  },
  {
    "text": "So, um- [NOISE] so, I'm just going to go for, uh, try out n to go from 1-10.",
    "start": "2510070",
    "end": "2518170"
  },
  {
    "text": "So 1 block to 10 blocks and we are calling the predict function on these true weights to get the true y values.",
    "start": "2518170",
    "end": "2525580"
  },
  {
    "text": "So these are my true labels, okay? And those are my examples. So my examples are just calling generate examples here.",
    "start": "2525580",
    "end": "2532615"
  },
  {
    "text": "Okay. So let's just print out our examples. See how it looks like. We haven't done anything like in terms of like the algorithm or anything.",
    "start": "2532615",
    "end": "2539440"
  },
  {
    "text": "We're- we're just creating these training examples, um, by calling this predict function on- on the true weights.",
    "start": "2539440",
    "end": "2546655"
  },
  {
    "text": "I have a typo here, [LAUGHTER] generate examples and I need parentheses,",
    "start": "2546655",
    "end": "2552260"
  },
  {
    "text": "oh, fix the typo. Okay, so that kinda looks right, right?",
    "start": "2552450",
    "end": "2559780"
  },
  {
    "text": "So that's my training example 1 through 9. And then what is- what is the path that you would wanna do if- if you have these two weights, the 1 and 2.",
    "start": "2559780",
    "end": "2567595"
  },
  {
    "text": "Okay. So now I have my examples. So I'm- I'm ready to write this structured Perceptron algorithm.",
    "start": "2567595",
    "end": "2575035"
  },
  {
    "text": "It gets my examples. It gets the training examples which are these paths. Um, and then we're going to iterate for some range.",
    "start": "2575035",
    "end": "2584770"
  },
  {
    "text": "And then, um, we can, um, basically go over all the examples that we have in our true- true y values.",
    "start": "2584770",
    "end": "2594625"
  },
  {
    "text": "And then we can- we can basically go and update our weights based on- based on that and based on our predictions.",
    "start": "2594625",
    "end": "2600925"
  },
  {
    "text": "So let's initialize the weights to just be 0. So that's for walking and tram, they're just 0.",
    "start": "2600925",
    "end": "2606280"
  },
  {
    "text": "And, uh, prediction actions, this is when we're calling predict based on the- the current weights.",
    "start": "2606280",
    "end": "2612865"
  },
  {
    "text": "So if my current weights are 0 then pred actions is just that y prime. So pred actions is y prime,",
    "start": "2612865",
    "end": "2619705"
  },
  {
    "text": "true actions is y, like the things that we had on the slides.",
    "start": "2619705",
    "end": "2624230"
  },
  {
    "text": "If- okay, and- and I wanna count the number of mistakes I'm making too. So if the two are not equal to each other then I'm",
    "start": "2625290",
    "end": "2631720"
  },
  {
    "text": "going to just keep a counter for number of mistakes. If- if the two become equal then- then my number of mistakes is zero.",
    "start": "2631720",
    "end": "2637089"
  },
  {
    "text": "I'm going to break then maybe I'm happy then. Okay. So I make a prediction.",
    "start": "2637090",
    "end": "2643119"
  },
  {
    "text": "And then after that I'm going to update the weight values.",
    "start": "2643120",
    "end": "2647420"
  },
  {
    "text": "Okay. So how do I update? Well, basically subtract.",
    "start": "2649380",
    "end": "2654789"
  },
  {
    "text": "If you're in true actions which is y, the labels that I've created from my training examples and then,",
    "start": "2654790",
    "end": "2662065"
  },
  {
    "text": "uh, do plus 1 if you're in prediction actions based on the current weight values.",
    "start": "2662065",
    "end": "2667270"
  },
  {
    "text": "And- and that's pretty much it. Like- like that is structured perceptron. Okay. So let's just print things nicely so we can print",
    "start": "2667270",
    "end": "2676000"
  },
  {
    "text": "the iteration and number of mistakes we have and what is actually the weight values that we have.",
    "start": "2676000",
    "end": "2682075"
  },
  {
    "text": "And I'm just breaking this, um, whenever I have like no mistakes.",
    "start": "2682075",
    "end": "2687190"
  },
  {
    "text": "So if number of mistakes is 0, I'll- I'll just break this. Okay. Okay.",
    "start": "2687190",
    "end": "2699475"
  },
  {
    "text": "That sounds good. So if number of mistakes is 0, then I'll break.",
    "start": "2699475",
    "end": "2705040"
  },
  {
    "text": "[NOISE] Okay. So all good. Uh, I'm gonna run this,",
    "start": "2705040",
    "end": "2712510"
  },
  {
    "text": "it's not gonna do anything because I didn't call it. So I'll go back and actually call it.",
    "start": "2712510",
    "end": "2717535"
  },
  {
    "text": "I have another typo here, I don't know if you guys can guess, like where is my typo.",
    "start": "2717535",
    "end": "2723140"
  },
  {
    "text": "This is gonna give an error [LAUGHTER].",
    "start": "2723870",
    "end": "2733540"
  },
  {
    "text": "Well, I called it weights, not weight. [LAUGHTER] So, I'll go and fix that. Okay, this should run.",
    "start": "2733540",
    "end": "2741790"
  },
  {
    "text": "Okay. So and then- then, this is what we get. So let's actually look at this. So what we got is the first iteration number of mistakes was 6,",
    "start": "2741790",
    "end": "2750340"
  },
  {
    "text": "and then, uh, we ended up actually, at the fir- first iteration, we ended up converging to 1, 2.",
    "start": "2750340",
    "end": "2755605"
  },
  {
    "text": "So then the second iteration, the number of mistakes just became 0, and then we just got 1, 2,",
    "start": "2755605",
    "end": "2760660"
  },
  {
    "text": "which is- which is the- the weights that we were hoping for. Okay? So that kind of, looks okay to me, that's my training data.",
    "start": "2760660",
    "end": "2767785"
  },
  {
    "text": "Everything looks fine. There's a question actually. [inaudible] more like integers. Is that right?",
    "start": "2767785",
    "end": "2774655"
  },
  {
    "text": "Yeah. So in this case, yeah, we are summing all the weights as integers, and you're adding them. Given our update model as well, Well, we're- we're assuming that the number",
    "start": "2774655",
    "end": "2781059"
  },
  {
    "text": "of walks and the number of trams were different. What if tram was in a different location but the number of walks to the tram can be correct?",
    "start": "2781060",
    "end": "2787600"
  },
  {
    "text": "You would still- So- so I see what you're asking. No. It should- it- like,",
    "start": "2787600",
    "end": "2793660"
  },
  {
    "text": "it should figure- figure it that out. So, um, we- we- we can go over an example after- after",
    "start": "2793660",
    "end": "2799330"
  },
  {
    "text": "the class and I'll show you like how- how it actually does it. All right. So- okay.",
    "start": "2799330",
    "end": "2807640"
  },
  {
    "text": "So let's try 1 and 3. So with 1 and 3 takes a little bit longer, and, uh, but it does recover.",
    "start": "2807640",
    "end": "2815290"
  },
  {
    "text": "So 1 and 4 is actually the interesting one, because it does recover something.",
    "start": "2815290",
    "end": "2820570"
  },
  {
    "text": "It does recover 2, 8. It doesn't recover 1 and 4. But like given my data, actually, 2,",
    "start": "2820570",
    "end": "2825760"
  },
  {
    "text": "8 is- is like- like, there is no reason for me to get 1- 1 and 4. Like the ratio of them is the thing that that I actually care about.",
    "start": "2825760",
    "end": "2832539"
  },
  {
    "text": "So even if I get 2 and 8, like- like that is a reasonable set of weights that one could get.",
    "start": "2832540",
    "end": "2839090"
  },
  {
    "text": "Um, I'm gonna try a couple of more things. So let's try 1 and 5.",
    "start": "2839400",
    "end": "2845549"
  },
  {
    "text": "So I'm gonna try 1 and 5, and this is what I get. So I get the weight of walk to be minus 1,",
    "start": "2845550",
    "end": "2852660"
  },
  {
    "text": "and the weight of tram to be 1. Now, my mistake is 0. So why is this happening?",
    "start": "2852660",
    "end": "2859310"
  },
  {
    "text": "Yeah. Your training data is all walking. So it's learning to just walk. Yeah, that's right. So- so what's happening here is,",
    "start": "2862560",
    "end": "2869830"
  },
  {
    "text": "if you look at my training data up here, my training data is just has like walk, like all walks. It hasn't seen tram ever,",
    "start": "2869830",
    "end": "2876010"
  },
  {
    "text": "so it has no idea like what the cost of tram is with respect to the cost of walk. So it's not going to learn that.",
    "start": "2876010",
    "end": "2881740"
  },
  {
    "text": "So we're gonna fix that. Like one way to fix that is to go and change the training data and actually like get more data.",
    "start": "2881740",
    "end": "2887440"
  },
  {
    "text": "So, uh, we can kind of do that. Um, so like just one thing to remember is,",
    "start": "2887440",
    "end": "2893680"
  },
  {
    "text": "this is just going to fit your training data, whatever it is. Um, so yeah. So when we fix that,",
    "start": "2893680",
    "end": "2899500"
  },
  {
    "text": "then walk becomes two and tram becomes 9, which is not 1 and 5. But it- it is getting there,",
    "start": "2899500",
    "end": "2905665"
  },
  {
    "text": "like it's a better ratio. Uh, a number of mistakes is still 0. So it really depends on what you're looking for.",
    "start": "2905665",
    "end": "2910779"
  },
  {
    "text": "Like if you're trying to like match your data and your number of mistakes is 0, and you're happy with this, you can just go with this.",
    "start": "2910780",
    "end": "2916750"
  },
  {
    "text": "Um, and even though like it hasn't like actually recovered the exact value, the ratios, that's fine.",
    "start": "2916750",
    "end": "2923335"
  },
  {
    "text": "Or maybe you're looking for the exact ratios and you should like run it longer. More iteration questions? Structured perceptron like suspect to getting stuck in local optima,",
    "start": "2923335",
    "end": "2931915"
  },
  {
    "text": "like maybe, all we need is different initializations? Sorry. Like I was looking at the- can you repeat that?",
    "start": "2931915",
    "end": "2937720"
  },
  {
    "text": "Oh, sorry. Um, does the, uh, structured perceptron, like, have a risk of getting stuck in local optimum,",
    "start": "2937720",
    "end": "2944335"
  },
  {
    "text": "like k-means, so we need different initializations? Um, that is a good question.",
    "start": "2944335",
    "end": "2949779"
  },
  {
    "text": "So in, um, actually, lemme think about that. Um, do you see this in NLP?",
    "start": "2949780",
    "end": "2955900"
  },
  {
    "text": "Do you actually know if this gets into local optima? I haven't experienced it personally,",
    "start": "2955900",
    "end": "2963430"
  },
  {
    "text": "but I feel like there's [inaudible] There is reasons for it to do this. It's still in this kind of- I mean, let me think about this.",
    "start": "2963430",
    "end": "2973440"
  },
  {
    "text": "I'll think about this, because even in the more general form of it, uh, it's commonly used in like- like the matching,",
    "start": "2973440",
    "end": "2981610"
  },
  {
    "text": "like sentence- like words and sentences. So I haven't experienced that either but, um, I can look into that and back to you. Question?",
    "start": "2981610",
    "end": "2989069"
  },
  {
    "text": "I was gonna ask,  are you just being at all of the optimal paths, currently?",
    "start": "2989070",
    "end": "2994110"
  },
  {
    "text": "Yes. Yeah, yeah, yeah. But if we do figure all the optimal paths then technically, it should be complex, right? Because like you just match paths.",
    "start": "2994110",
    "end": "3001680"
  },
  {
    "text": "Um, if you're feeding it all the optimal paths, uh, it should- you- you're just matching path, you're saying is-",
    "start": "3002450",
    "end": "3009359"
  },
  {
    "text": "[inaudible]",
    "start": "3009360",
    "end": "3015660"
  },
  {
    "text": "Yeah. So- so in terms of- okay- so, yeah. So in terms of like bringing down the number of mistakes then- then it should always match it.",
    "start": "3015660",
    "end": "3021540"
  },
  {
    "text": "But if you have some true like weights that you are looking for, and it's not represented in your dataset,",
    "start": "3021540",
    "end": "3027120"
  },
  {
    "text": "then it's not necessarily like- like learning that. So- so in those settings, you could find the local optima.",
    "start": "3027120",
    "end": "3032460"
  },
  {
    "text": "So kind of like a- another version of this is, uh, when you are doing like reward learning and- and you- you actually have this true reward you wanna find.",
    "start": "3032460",
    "end": "3039900"
  },
  {
    "text": "Like in those settings, you can totally fall into like local optima because you want to find what your reward function is. But you're right, like if you're just matching, uh, the data.",
    "start": "3039900",
    "end": "3048660"
  },
  {
    "text": "Just in the reward function, you are on the scaling two, you still get like the optimal policies. So the scaling would be a different problem, right?",
    "start": "3048660",
    "end": "3055080"
  },
  {
    "text": "So the scaling is kinda- yeah, so you can have reward shaping, so you can have different versions of the rewards function,",
    "start": "3055080",
    "end": "3060360"
  },
  {
    "text": "and if you get any of them, that is fine. Uh, but, uh, but you might still get",
    "start": "3060360",
    "end": "3065369"
  },
  {
    "text": "into local optima that's not explained by reward shaping. So okay. So that we- we can talk about these things offline.",
    "start": "3065370",
    "end": "3071444"
  },
  {
    "text": "Maybe, I should just move on to the next topics because we have some more stuff going on.",
    "start": "3071445",
    "end": "3078045"
  },
  {
    "text": "Okay, so I was actually going to skip these slides because we have stuff coming up, but this is a more general form of it.",
    "start": "3078045",
    "end": "3083400"
  },
  {
    "text": "So remember I was saying, this w is a function of a. Ah, but, um, [NOISE] um,",
    "start": "3083400",
    "end": "3089400"
  },
  {
    "text": "you could- you could have a more general form, ah, where your cost function is not just w as a function of a,",
    "start": "3089400",
    "end": "3095205"
  },
  {
    "text": "it is actually w times the set of features. Ah, and then the cost of a path is w times the features of a path.",
    "start": "3095205",
    "end": "3102630"
  },
  {
    "text": "Uh, and that's just the sum of features over the edges. So- so you can have this more general form.",
    "start": "3102630",
    "end": "3108300"
  },
  {
    "text": "Go over this slides later on, maybe, because we've gotta move to the next part. But just real quick to update here is-",
    "start": "3108300",
    "end": "3114570"
  },
  {
    "text": "is this more general form of updates which is update your w based on subtracting the features over",
    "start": "3114570",
    "end": "3120270"
  },
  {
    "text": "your- your true- true path plus the features over your predicted path. So- so a more general form of this is called Collins' algorithm.",
    "start": "3120270",
    "end": "3127619"
  },
  {
    "text": "So Mike Collins was working on this in- in natural language processing. He was actually interested in it in the setting of part of speech tag- er, tagging.",
    "start": "3127620",
    "end": "3135780"
  },
  {
    "text": "So- so you might have like a sentence, uh, and- and you wanna tag each one of the- each one of the labels",
    "start": "3135780",
    "end": "3141570"
  },
  {
    "text": "here as- as a noun, or a verb, or a determiner, Or a noun again. So- so he was think- he was basically looking at this problem as a search problem.",
    "start": "3141570",
    "end": "3149460"
  },
  {
    "text": "Uh, and he was using like similar type of algorithms to- to try to figure out like- like match what- what the value,",
    "start": "3149460",
    "end": "3156570"
  },
  {
    "text": "like match noun, or like each one of these, um, part of speech tags to the sentence.",
    "start": "3156570",
    "end": "3162495"
  },
  {
    "text": "So he has some scores and then based on the scores and his dataset, he goes like up and down. He moves the scores up and down which uses the same idea.",
    "start": "3162495",
    "end": "3170474"
  },
  {
    "text": "You can use the same idea again in machine translation. So you can have, like if you have heard of like Beam Search. Um, and you can have multiple types like- like a bunch of translations of- of",
    "start": "3170475",
    "end": "3179430"
  },
  {
    "text": "some phrase and then you can up-weight and down-weight them based on your training data. Okay? All right.",
    "start": "3179430",
    "end": "3186960"
  },
  {
    "text": "Okay. So now let's move to ai's- ai's- a star, not ai star. A star search.",
    "start": "3186960",
    "end": "3193410"
  },
  {
    "text": "All right. So, um, okay. So we've talked about this idea of learning costs, right?",
    "start": "3193410",
    "end": "3198839"
  },
  {
    "text": "So we have talked about, uh, search problems in general doing inference and then doing, uh, learning on top of them.",
    "start": "3198840",
    "end": "3205110"
  },
  {
    "text": "And then now, I wanna talk a little bit about, um, kind of making things faster using smarter ideas and smarter heuristics. There's a question.",
    "start": "3205110",
    "end": "3212519"
  },
  {
    "text": "[inaudible] see what is the loss from [inaudible] in this structure?",
    "start": "3212520",
    "end": "3219420"
  },
  {
    "text": "In this structure? So, so in, in- this is, this is a prediction problem, right? So, so in that prediction problem,",
    "start": "3219420",
    "end": "3224685"
  },
  {
    "text": "we are trying to basically figure out what w- w's are as closely as possible as we are matching these w,",
    "start": "3224685",
    "end": "3230895"
  },
  {
    "text": "w- this y prime to y, right? So, so basically, like,",
    "start": "3230895",
    "end": "3236040"
  },
  {
    "text": "like the way we are solving this is, is not necessarily as an optimization, the way that we have solved other types of learning problems.",
    "start": "3236040",
    "end": "3242380"
  },
  {
    "text": "The way we are solving it what- is by just like tweaking these weights to try to match my y as closely as possible to,",
    "start": "3242380",
    "end": "3248730"
  },
  {
    "text": "to y, okay? All right. Okay. So let's get- talk, talk about a A-star.",
    "start": "3248730",
    "end": "3254700"
  },
  {
    "text": "So I don't have internet so I can't show these. Um, but I think the link for this should work if- when you go to the, to the file.",
    "start": "3254700",
    "end": "3262980"
  },
  {
    "text": "So the idea is, if you go back to uniform cost search, like in uniform cost search,",
    "start": "3262980",
    "end": "3269490"
  },
  {
    "text": "what we wanted to do was, we want to get from a point to some solution, but we would uniformly,",
    "start": "3269490",
    "end": "3275405"
  },
  {
    "text": "like increase, uh, explore the states around us until we get to some final state.",
    "start": "3275405",
    "end": "3281380"
  },
  {
    "text": "The idea of A-star is to basically do uniform cost search, but do it a little bit smarter and move towards the direction of the goal state.",
    "start": "3281380",
    "end": "3288960"
  },
  {
    "text": "So if I have a goal state, particularly like in that corner, maybe I can, I can move in that direction in a smarter way, okay?",
    "start": "3288960",
    "end": "3296519"
  },
  {
    "text": "So here is like an example of that pictorially. So I can start from S-start,",
    "start": "3296520",
    "end": "3302145"
  },
  {
    "text": "and, and if I'm using uniform cost search, again I'm uniformly kind of exploring all the states possible until I hit my S-end.",
    "start": "3302145",
    "end": "3310125"
  },
  {
    "text": "And then I'm happy, I'm done, I've solved my search problem, everything is good. But the thing is, I've done all these, like wasted effort on this site which is,",
    "start": "3310125",
    "end": "3317430"
  },
  {
    "text": "which is not that great, okay? So uniform cost search in, in that sense has this problem of just exploring a bunch of states for no good reason,",
    "start": "3317430",
    "end": "3326005"
  },
  {
    "text": "and what we wanna do is we want to take into accounts that we're just going from S-start to S-end,",
    "start": "3326005",
    "end": "3331790"
  },
  {
    "text": "so we don't really like need to do all of that. We can actually just try to get the- to get to the end state, okay?",
    "start": "3331790",
    "end": "3337435"
  },
  {
    "text": "So, um, so going back to maybe, um, I'm going to go on this side.",
    "start": "3337435",
    "end": "3343275"
  },
  {
    "text": "So, um, [NOISE] going back to how these search problems work, the idea is to start from S-start and then get to some state S,",
    "start": "3343275",
    "end": "3356040"
  },
  {
    "text": "and then we have this S-end, okay? And what uniform cost search does is, it basically orders the states based on past cost of s, okay?",
    "start": "3356040",
    "end": "3367049"
  },
  {
    "text": "And then explore everything around it based on past cost of F- S until it reaches S-end, okay?",
    "start": "3367050",
    "end": "3372960"
  },
  {
    "text": "But when you are in state S, like there is also this thing called future cost of s, right?",
    "start": "3372960",
    "end": "3378450"
  },
  {
    "text": "And ideally, when I'm in state S, I don't wanna explore other things like this side. I actually want to- wanna move in the direction of kind of reducing my,",
    "start": "3378450",
    "end": "3386595"
  },
  {
    "text": "my future cost and getting to my, to my end state, okay? So, so the cost of me getting from S-start to S-end is really just like past cost of",
    "start": "3386595",
    "end": "3396195"
  },
  {
    "text": "s plus future cost of s. And if I knew what future cost of s was,",
    "start": "3396195",
    "end": "3403320"
  },
  {
    "text": "I would just move in that direction. But if I knew what future cost of s is, well the problem was solved, right?",
    "start": "3403320",
    "end": "3408930"
  },
  {
    "text": "Like I had the answer to my search problem. Like I'm, I'm solving a problem still. So in reality, I don't have access to future cost, right?",
    "start": "3408930",
    "end": "3415560"
  },
  {
    "text": "I have no idea what future cost is. But I do have access to some- like I can potentially have access to something else and",
    "start": "3415560",
    "end": "3421619"
  },
  {
    "text": "I'm gonna call that h of s. And that is an estimate of future cost.",
    "start": "3421620",
    "end": "3427965"
  },
  {
    "text": "So I'm going to add a function called h_s, and this is called a heuristic,",
    "start": "3427965",
    "end": "3433290"
  },
  {
    "text": "and the- and this heuristic could estimate what future cost is. And if I have access to this heuristic,",
    "start": "3433290",
    "end": "3439170"
  },
  {
    "text": "maybe I can update my cost to be something as what the past cost is.",
    "start": "3439170",
    "end": "3444359"
  },
  {
    "text": "In addition to that, like I can add this heuristic and that helps me to be a little bit smarter when I'm running my algorithm, okay?",
    "start": "3444360",
    "end": "3451560"
  },
  {
    "text": "So, so the idea is, ideally like what I would wanna do is, I wanna explore in the order of past cost plus future cost.",
    "start": "3451560",
    "end": "3458205"
  },
  {
    "text": "I don't have future cost or if I had future cost, I had the answer to my search problem. Instead, what A-star does is it's- it explores",
    "start": "3458205",
    "end": "3465794"
  },
  {
    "text": "in the order of past cost plus some h_s, okay? So remember uniform cost search, it,",
    "start": "3465794",
    "end": "3471750"
  },
  {
    "text": "it explores just in the order of past cost. So in uniform cost search, um, like we don't have that h_s, okay?",
    "start": "3471750",
    "end": "3478440"
  },
  {
    "text": "And h_s is, is a heuristic, it's an estimate of the future cost.",
    "start": "3478440",
    "end": "3483790"
  },
  {
    "text": "All right. So what does A-star do? Actually that's something really simple. So, so a A-star basically just does uniform cost search.",
    "start": "3484310",
    "end": "3493215"
  },
  {
    "text": "So all it does is uniform cost search with a new cost. So before I had this blue costs costs of s and a,",
    "start": "3493215",
    "end": "3501015"
  },
  {
    "text": "this was my cost before. Now I'm going to update my cost to be this cost prime of s and a,",
    "start": "3501015",
    "end": "3507734"
  },
  {
    "text": "which is just cost plus the heuristic, over the successor of s and a minus the heuristic.",
    "start": "3507735",
    "end": "3513369"
  },
  {
    "text": "So, so that is the new cost and I can just run uniform cost search on this new cost.",
    "start": "3513370",
    "end": "3518850"
  },
  {
    "text": "So, so I'm gonna call it cost prime of s and a.",
    "start": "3518850",
    "end": "3524490"
  },
  {
    "text": "Well, what does that equal to? That is equal to cost of s and a, which is what we had before when we were doing uniform cost search,",
    "start": "3524490",
    "end": "3531285"
  },
  {
    "text": "plus heuristic over successor of s and a,",
    "start": "3531285",
    "end": "3536859"
  },
  {
    "text": "minus heuristic over s. So why do I want this?",
    "start": "3536860",
    "end": "3544095"
  },
  {
    "text": "Well, what this is saying is, if I'm at some state S, okay, and there is some other state,",
    "start": "3544095",
    "end": "3551339"
  },
  {
    "text": "successor of s and a, so I can take an action a and end up in successor of s and a,",
    "start": "3551339",
    "end": "3556875"
  },
  {
    "text": "and there is some S-end here that I'm really trying to get to. Remember h was my estimate of future cost.",
    "start": "3556875",
    "end": "3564810"
  },
  {
    "text": "What this is saying is, my estimate of future cost for getting from successor to S-end,",
    "start": "3564810",
    "end": "3571800"
  },
  {
    "text": "minus my estimate of, er, getting from, er, future costs of S to",
    "start": "3571800",
    "end": "3578910"
  },
  {
    "text": "S-end should be the thing I'm adding to my cost function. I should penalize that. And, and what this is really enforcing is,",
    "start": "3578910",
    "end": "3585375"
  },
  {
    "text": "it basically makes me move in the direction of S-end. Because, because if I end up in some other state that is",
    "start": "3585375",
    "end": "3592170"
  },
  {
    "text": "not in the direction of S-end, then, then that thing that I'm adding here is basically going to penalize that, right?",
    "start": "3592170",
    "end": "3599580"
  },
  {
    "text": "It's going to be saying, \"Well, it's really bad that you've- you are going in that action. I'm going to put more costs on that so you never going that direction.",
    "start": "3599580",
    "end": "3606285"
  },
  {
    "text": "You should go in the direction that goes goes towards your S-end.\" And that all depends on like what your H function is and how good,",
    "start": "3606285",
    "end": "3613150"
  },
  {
    "text": "like of an H function you have and how you're designing your, your heuristics. But that's kind of the idea behind it.",
    "start": "3613150",
    "end": "3619109"
  },
  {
    "text": "So here is an example actually. So let's say that we have this example where we have A, B, C, D, and E and we have cost of 1 on all of these edges.",
    "start": "3619110",
    "end": "3627690"
  },
  {
    "text": "And what we wanna do is we wanna go from C to E. That's our plan, okay? So if I'm running uniform cost search, well what would I do?",
    "start": "3627690",
    "end": "3635365"
  },
  {
    "text": "I'm at C, I'm going to explore B and D because they have a cost of 1, and then after that,",
    "start": "3635365",
    "end": "3641279"
  },
  {
    "text": "I'm going to explore A and E. And then finally, I get to, get to E. But why did I spend all of that time looking at A and D?",
    "start": "3641280",
    "end": "3647790"
  },
  {
    "text": "I shouldn't have done that, right? Like A and B are not in the direction of getting to S-end. So instead, what I can do is if someone comes in and tells me,",
    "start": "3647790",
    "end": "3656040"
  },
  {
    "text": "well, I have this heuristic function, you can evaluate it on your state and this heuristic function is going to give you 4, 3, 2, 1,",
    "start": "3656040",
    "end": "3662850"
  },
  {
    "text": "and 0 for each one of these states, then you can update your cost and maybe you'll have a better way of getting to S-end.",
    "start": "3662850",
    "end": "3668655"
  },
  {
    "text": "So this heuristic, in this case, is actually perfect because it's actually equal to future cost. Like the point of the heuristic is to get as close as possible to the future cost.",
    "start": "3668655",
    "end": "3677430"
  },
  {
    "text": "This is exactly equal to future cost. So with this heuristic, what's going to happen is my new cost is going to change. How is it going to change?",
    "start": "3677430",
    "end": "3685089"
  },
  {
    "text": "Well, it's going to become the cost of whatever the cost of the edge was before, which was 1, plus h of- in the case of,",
    "start": "3685090",
    "end": "3691530"
  },
  {
    "text": "for example, the cost of going from C to B. If you look at C to B, it's the old cost, which was 1,",
    "start": "3691530",
    "end": "3697260"
  },
  {
    "text": "plus heuristic at B, which is 3, minus heuristic at C, which is 2.",
    "start": "3697260",
    "end": "3702520"
  },
  {
    "text": "So that ends up giving me 1 plus 3 minus 2, that is equal to 2. And then similarly, you can compute like all these,",
    "start": "3702520",
    "end": "3709125"
  },
  {
    "text": "like new cost values, the purple values and, and that has a cost of two for going in this direction and cost of zero for going towards E. And,",
    "start": "3709125",
    "end": "3717270"
  },
  {
    "text": "and if I just run uniform cost search again here, then I can get to E like much easier, okay? Yes.",
    "start": "3717270",
    "end": "3725730"
  },
  {
    "text": "Does an A-star like kinda result in greedy approaches, where you put these opportunities,",
    "start": "3725730",
    "end": "3731609"
  },
  {
    "text": "like go back with [inaudible]. Does A-star result in-",
    "start": "3731610",
    "end": "3737910"
  },
  {
    "text": "Like greedy approaches. Like where you sort of- greedy. Greedy? Yes. Um, yeah. So okay.",
    "start": "3737910",
    "end": "3743910"
  },
  {
    "text": "So, so in all, ah, so, so the question is, is A-star like causing greedy approaches?",
    "start": "3743910",
    "end": "3749270"
  },
  {
    "text": "So, no. Actually, we are going to talk about that a little bit. A-star, depend- depends on the heuristic you are choosing. So depending on the heuristic you are choosing,",
    "start": "3749270",
    "end": "3755954"
  },
  {
    "text": "A-star is actually going to be like returned to optimal value. But yeah, it does depend on the heuristic.",
    "start": "3755955",
    "end": "3762000"
  },
  {
    "text": "So it actually does the exact same thing as uniform cost search if you choose a good heuristic. Why is cost of CB 1 here?",
    "start": "3762000",
    "end": "3767880"
  },
  {
    "text": "Uh, what- Why is cost of CB 1? Why is cost of C- CE 1?",
    "start": "3767880",
    "end": "3774875"
  },
  {
    "text": "CB.",
    "start": "3774875",
    "end": "3776490"
  },
  {
    "text": "CB. Hold on. [LAUGHTER]. I'm like, really bad, my ears are really bad, so speak up. So cost of CB. Oh because- oh, I see what you're saying.",
    "start": "3780260",
    "end": "3785865"
  },
  {
    "text": "That's what we started with. So this is like the graph that I started with. So I started with the cost,",
    "start": "3785865",
    "end": "3791865"
  },
  {
    "text": "like the blue costs being all 1, but now I'm saying those costs are not good, I'm going to update them based on this heuristic so I can get closer to the goal,",
    "start": "3791865",
    "end": "3800109"
  },
  {
    "text": "like as fast as possible. [inaudible].",
    "start": "3800110",
    "end": "3807855"
  },
  {
    "text": "You return like the actual cost of not, like you wouldn't count the heuristic in there, because it can be like wrong.",
    "start": "3807855",
    "end": "3813300"
  },
  {
    "text": "That's, that's right. So, so the question is what costs are you going to return at the end? And you do want to return the actual cost.",
    "start": "3813300",
    "end": "3819630"
  },
  {
    "text": "So you're returning the actual cost, but you can run your algorithm with this heuristic thing added in because that allows you to explore less things and just be more efficient.",
    "start": "3819630",
    "end": "3827415"
  },
  {
    "text": "Okay. Oh, I gotta move on. All right. So, um. Okay. So a good question to ask is well, what is this heuristic?",
    "start": "3827415",
    "end": "3834599"
  },
  {
    "text": "How does this heuristic look like? Like can any- does any heuristic like work well? So turns out that not every heuristic works.",
    "start": "3834600",
    "end": "3841680"
  },
  {
    "text": "So here's an example. So again, the blue things are the costs that are already given. These are the things that I already have,",
    "start": "3841680",
    "end": "3847430"
  },
  {
    "text": "and I can just run my search algorithm with it. The red things are the values of the heuristic, someone gave them to me for now.",
    "start": "3847430",
    "end": "3854175"
  },
  {
    "text": "In general we would want to design them. So someone comes in and gives me these, these heuristic values,",
    "start": "3854175",
    "end": "3859275"
  },
  {
    "text": "and, uh, then what I wanna do is I wanna compute the new cost values.",
    "start": "3859275",
    "end": "3864329"
  },
  {
    "text": "So the question is, is this heuristic good? So I get my new cost values. They look like this. Like does this work?",
    "start": "3864330",
    "end": "3872320"
  },
  {
    "text": "We don't have time so I am going to answer that. It's not gonna work. [LAUGHTER] So the reason this is not gonna work is,",
    "start": "3872740",
    "end": "3879320"
  },
  {
    "text": "uh, well we just got a negative edge there, right? So I'm running uniform cost search at the end of the day,",
    "start": "3879320",
    "end": "3884405"
  },
  {
    "text": "like A_star is just uniform cost search. Um, and I can't have negative edges. So, uh, I'm not- like that was just not a good heuristic to have here.",
    "start": "3884405",
    "end": "3893295"
  },
  {
    "text": "So, so the heuristics need to have specific properties and, and you, you should think about what those properties are.",
    "start": "3893295",
    "end": "3898890"
  },
  {
    "text": "So one property that you would want to have the heuristics to have is this idea of consistency, this is actually the most important property really.",
    "start": "3898890",
    "end": "3906540"
  },
  {
    "text": "So, um, so when we talked about heuristics, I'm gonna talk about properties of them here.",
    "start": "3906540",
    "end": "3912345"
  },
  {
    "text": "Heuristics h. They should be consistent. So a consistent heuristic has two conditions:",
    "start": "3912345",
    "end": "3920670"
  },
  {
    "text": "The first condition is it's going to satisfy the triangle inequality. And, and what that means is like the cost that- your,",
    "start": "3920670",
    "end": "3927300"
  },
  {
    "text": "your updated cost that you have should be, should be non-negative. So, so this cost prime of s,",
    "start": "3927300",
    "end": "3933165"
  },
  {
    "text": "s and a, this should be positive. So, so that means that the old constant s and a plus h of,",
    "start": "3933165",
    "end": "3943365"
  },
  {
    "text": "um, successor I'm gonna use s prime for that minus h of s is greater than or equal to 0.",
    "start": "3943365",
    "end": "3949770"
  },
  {
    "text": "Okay. So that is the first condition. And then the second condition that you are going to put is that, uh,",
    "start": "3949770",
    "end": "3956100"
  },
  {
    "text": "future costs of s_end is going to be equal to 0, right? Because the future cost of the end state should be 0.",
    "start": "3956100",
    "end": "3963150"
  },
  {
    "text": "So then the heuristic at the end state is also equal to 0.",
    "start": "3963150",
    "end": "3968809"
  },
  {
    "text": "So, so these are kind of the properties that we would want to have if you want to talk about consistent heuristics.",
    "start": "3968810",
    "end": "3973984"
  },
  {
    "text": "Okay. And they're kinda like natural things that we would want to have, right? Like, like the first one is basically saying, well,",
    "start": "3973985",
    "end": "3980670"
  },
  {
    "text": "the cost you are going to end up at should be, should be greater than or equal to 0 and you can run uniform cost search on it. But it's really like talking about this triangle inequality that you want to have, right?",
    "start": "3980670",
    "end": "3989340"
  },
  {
    "text": "Like, er, h of s is kind of an estimate of this future cost. So if I'm going to- from s take an action",
    "start": "3989340",
    "end": "3997125"
  },
  {
    "text": "that cost of s and a that added up h of successor of s, s and a should be greater than just h of s,",
    "start": "3997125",
    "end": "4003680"
  },
  {
    "text": "the estimate of future costs. So that's, so, so that's, that's all it is saying. And then the last one also makes sense, right?",
    "start": "4003680",
    "end": "4009635"
  },
  {
    "text": "I do want my future cost of s_end to be zero, right? So then the heuristic at s_end should also be equal to 0,",
    "start": "4009635",
    "end": "4016190"
  },
  {
    "text": "because again heuristic is just an estimate of the future cost. Okay. All right.",
    "start": "4016190",
    "end": "4021470"
  },
  {
    "text": "So, so what do I know about A_star beyond that? So one thing that we know is that,",
    "start": "4021470",
    "end": "4027650"
  },
  {
    "text": "um, if, if h is consistent. So if I have this consistency property, then I know that A_star is correct.",
    "start": "4027650",
    "end": "4037250"
  },
  {
    "text": "So that there is a theorem that says, A_star is going to be correct if h is consistent.",
    "start": "4037250",
    "end": "4045510"
  },
  {
    "text": "And well, we can kind of look at that through an example. So, so let's say that I am at s_0 and I take a_1 and",
    "start": "4045700",
    "end": "4055100"
  },
  {
    "text": "I end up at s_1 and I take a_2 and end up at s_3 and,",
    "start": "4055100",
    "end": "4060680"
  },
  {
    "text": "uh, a 0 at s_2, take a_3 and I end up at s_3.",
    "start": "4060680",
    "end": "4066349"
  },
  {
    "text": "So let's say that I have, I have kind of like a path that, that looks like this. Okay. So then, uh,",
    "start": "4066350",
    "end": "4073250"
  },
  {
    "text": "if I'm looking at the cost of each, each one of these, right? I'm looking at cost of- cost prime of s_0 and a_1.",
    "start": "4073250",
    "end": "4083990"
  },
  {
    "text": "Well, what is that equal to? That's- that's my updated cost. Updated cost is old cost,",
    "start": "4083990",
    "end": "4089540"
  },
  {
    "text": "which is cost of s_0 and a, plus heuristic value at s_1 minus heuristic value at s_0.",
    "start": "4089540",
    "end": "4097685"
  },
  {
    "text": "Heuristic value s_1 minus heuristic value at s_0. Okay. So, so that is the cost of going from s_0 and taking a_1.",
    "start": "4097685",
    "end": "4105319"
  },
  {
    "text": "I'm gonna to just write all the costs for, for the rest of this to figure out what's the cost of the path. The cost of the path is just the sum of these costs.",
    "start": "4105320",
    "end": "4113920"
  },
  {
    "text": "So s_1, a_2 is cost of s_1,",
    "start": "4113920",
    "end": "4119364"
  },
  {
    "text": "a_2 plus heuristic at, um, what is it?",
    "start": "4119365",
    "end": "4125105"
  },
  {
    "text": "S_2 minus heuristic at s_1, so that is the new cost of this edge.",
    "start": "4125105",
    "end": "4130699"
  },
  {
    "text": "And the new cost of the last edge which is cost prime of s_2, a_ 3,",
    "start": "4130700",
    "end": "4138245"
  },
  {
    "text": "and that is equal to the old cost of s_2, a_3 plus heuristic at s_3 minus heuristic at s_2.",
    "start": "4138245",
    "end": "4149095"
  },
  {
    "text": "Okay. So I just wrote up all these costs. If I'm talking about the cost of a path, then it's just that these costs added up, right?",
    "start": "4149095",
    "end": "4156725"
  },
  {
    "text": "So if I add up these costs, what happens? Bunch of things get canceled out. All right.",
    "start": "4156725",
    "end": "4163279"
  },
  {
    "text": "This guy gets canceled out by this guy, this guy gets canceled out by this guy, right?",
    "start": "4163280",
    "end": "4169369"
  },
  {
    "text": "And what I end up with is, is sum of these new costs, these cost primes of,",
    "start": "4169370",
    "end": "4177140"
  },
  {
    "text": "um, s_i minus 1, a_i is just equal to sum of my old cost of s_i minus 1,",
    "start": "4177140",
    "end": "4187339"
  },
  {
    "text": "a_i plus my heuristic, I guess last state whose end state minus heuristic at s_0.",
    "start": "4187340",
    "end": "4198455"
  },
  {
    "text": "Okay. I'm saying my heuristic is a consistent heuristic.",
    "start": "4198455",
    "end": "4203600"
  },
  {
    "text": "So what is a property of a consistent heuristic? The heuristic value at s end should be equal to 0.",
    "start": "4203600",
    "end": "4211280"
  },
  {
    "text": "So this guy is also equal to 0. So what I end up with is is if I look at a path with the new cost,",
    "start": "4211280",
    "end": "4219320"
  },
  {
    "text": "the sum of the new cost is just equal to the sum of the old cost minus some,",
    "start": "4219320",
    "end": "4224420"
  },
  {
    "text": "some constant, and this constant is just the heuristic value at s_0. Okay. So, so why is this important because when we talk about the correctness,",
    "start": "4224420",
    "end": "4232550"
  },
  {
    "text": "like remember we just proved at the beginning of this lecture that uniform cost search is correct, so the cost that it is returning is optimal.",
    "start": "4232550",
    "end": "4239600"
  },
  {
    "text": "That is, that is this cost. A_star is just uniform cost search with a new cost.",
    "start": "4239600",
    "end": "4245225"
  },
  {
    "text": "So A_star is just running on this new cost. But this new cost is the same thing that they have as old cost minus a constant.",
    "start": "4245225",
    "end": "4252350"
  },
  {
    "text": "So if I'm optimizing the new cost, it's the same thing as optimizing the old cost. So it is going to return the optimal solution.",
    "start": "4252350",
    "end": "4258455"
  },
  {
    "text": "Okay. All right. So that is basically the same things on the slide like,",
    "start": "4258455",
    "end": "4266285"
  },
  {
    "text": "like I basically did that. So, so that's one property, right? So, so we talked about heuristics being consistent.",
    "start": "4266285",
    "end": "4272840"
  },
  {
    "text": "We have now just talked about A_star being correct, because it's uniform cost search. It's, it's correct only if the heuristic is consistent, right?",
    "start": "4272840",
    "end": "4281270"
  },
  {
    "text": "Like only if we add that property. Because, because that consistency gets us, gets us the fact that this guy is equal to 0 and gets us the fact",
    "start": "4281270",
    "end": "4288140"
  },
  {
    "text": "that these guys are going to be positive and I can run uniform cost search on them. Um, the next property that we have, uh,",
    "start": "4288140",
    "end": "4295475"
  },
  {
    "text": "here for A_star is A_star is actually more efficient than uniform cost search, and we kind of have already seen this, right?",
    "start": "4295475",
    "end": "4302510"
  },
  {
    "text": "Like, like the whole point of a A_star is to not explore everything and explore in a directed manner. So, um, if you remember uniform cost search like,",
    "start": "4302510",
    "end": "4310909"
  },
  {
    "text": "how does it explore? Well, it explores all the states that have a past cost that are less than the past cost of s_end.",
    "start": "4310910",
    "end": "4318679"
  },
  {
    "text": "So again, remember, uniform cost search, you're exploring with the, with the order of past cost of states,",
    "start": "4318680",
    "end": "4325685"
  },
  {
    "text": "and then we explore all those states that have past costs less than the end state. Okay. A_star like- the thing that A_star does is it explores less states.",
    "start": "4325685",
    "end": "4336155"
  },
  {
    "text": "So it explores states that have a past cost less than past cost of the end state minus the heuristic.",
    "start": "4336155",
    "end": "4343264"
  },
  {
    "text": "So, so if you kinda look at the right side, the right side just became- becomes smaller, right?",
    "start": "4343265",
    "end": "4348679"
  },
  {
    "text": "Like, like the right side for uniform cost search was just past cost of s_end. Now it is past cost of s_end minus the heuristic,",
    "start": "4348680",
    "end": "4355159"
  },
  {
    "text": "so it just became smaller. And then why did it become smaller? Because now I'm doing this more directed search.",
    "start": "4355160",
    "end": "4360515"
  },
  {
    "text": "I'm not searching everything uniformly around me. And then that's the whole point of the heuristic. Okay. And that makes it actually more efficient.",
    "start": "4360515",
    "end": "4367775"
  },
  {
    "text": "So- and then kind of the interpretation of this is if h is larger then,",
    "start": "4367775",
    "end": "4372920"
  },
  {
    "text": "then that's better, right? Like if my heuristic is as large as possible, well that is better because then I am kind of exploring a smaller like area to,",
    "start": "4372920",
    "end": "4381350"
  },
  {
    "text": "to get to the solution. Uh, the proof of- this is like two lines so I'm gonna skip that. So let me actually show,",
    "start": "4381350",
    "end": "4387020"
  },
  {
    "text": "uh, how this looks like. So if I'm trying to get from s_star to s_end, again,",
    "start": "4387020",
    "end": "4392810"
  },
  {
    "text": "if I'm doing uniform cost search, I'm uniformly exploring. So like all states around me,",
    "start": "4392810",
    "end": "4398330"
  },
  {
    "text": "and that is equivalent to assuming that the heuristic is equal to 0, like it's basically uniform cost search is A-star when the heuristic is equal to 0.",
    "start": "4398330",
    "end": "4407195"
  },
  {
    "text": "So what is the point of the heuristic? The point of the heuristic is to estimate what the future cost is.",
    "start": "4407195",
    "end": "4413060"
  },
  {
    "text": "If I know what the future cost is, then, then h of s is just equal to future cost.",
    "start": "4413060",
    "end": "4418220"
  },
  {
    "text": "Uh, and then, that would be awesome and I only need to like explore that green kind of space.",
    "start": "4418220",
    "end": "4424070"
  },
  {
    "text": "And then the thing I'm exploring is, is just the nodes that are on the minimum past cost and co- uh,",
    "start": "4424070",
    "end": "4429560"
  },
  {
    "text": "cost path, and I'm not exploring anything extra, right? Like that's the most, like efficient thing one can do.",
    "start": "4429560",
    "end": "4436130"
  },
  {
    "text": "In practice, like I don't have access to future costs, right? In, in practice if I had access to future costs,",
    "start": "4436130",
    "end": "4441349"
  },
  {
    "text": "like the problem was solved. I have access to some heuristic that is some estimate of the future cost.",
    "start": "4441350",
    "end": "4446930"
  },
  {
    "text": "It's not as bad as uniform cost search, it's getting close to future costs, like, like the value of future costs,",
    "start": "4446930",
    "end": "4452929"
  },
  {
    "text": "and you're kind of somewhere in between. So it is going to be more efficient than uniform cost search in some sense.",
    "start": "4452930",
    "end": "4458450"
  },
  {
    "text": "Okay. All right. So, so basically the whole idea of A_star is it kind of distorts edge,",
    "start": "4458450",
    "end": "4466160"
  },
  {
    "text": "edge costs and favors these end states. So I'm going to add here that A_star is efficient too.",
    "start": "4466160",
    "end": "4471245"
  },
  {
    "text": "So that is the other thing that, that we have about A_star. Okay. All right.",
    "start": "4471245",
    "end": "4478489"
  },
  {
    "text": "So, so these are all cool properties, um, one more property about heuristics and then after that, we can talk about relaxation.",
    "start": "4478490",
    "end": "4484660"
  },
  {
    "text": "So um, so there's also this other property called admissibility, which is something that we have kind of been talking about already, right?",
    "start": "4484660",
    "end": "4491540"
  },
  {
    "text": "Like we've been talking about how this heuristic should get close to FutureCost and should be an estimate of the FutureCost.",
    "start": "4491540",
    "end": "4497810"
  },
  {
    "text": "So an admissible heuristic is a heuristic where H of S is less than or equal to FutureCost.",
    "start": "4497810",
    "end": "4503835"
  },
  {
    "text": "And then the cool thing is, if you already have consistency, then you have admissibility too. So if you already have this property,",
    "start": "4503835",
    "end": "4510780"
  },
  {
    "text": "then you have admissibility too. So another property is admissible.",
    "start": "4510780",
    "end": "4517455"
  },
  {
    "text": "Which means H of S is less than or equal to FutureCost of s, okay? All right.",
    "start": "4517455",
    "end": "4528360"
  },
  {
    "text": "So the proofs of these are again like just one liners, so this one is more than one line but- [LAUGHTER] but it's actually quite easy, it's in the notes.",
    "start": "4528360",
    "end": "4536895"
  },
  {
    "text": "So you can use induction here to prove, uh, to prove that if you have consistency, then you're going to have admissibility too.",
    "start": "4536895",
    "end": "4544125"
  },
  {
    "text": "Okay, so, so we've just talked about how A-star is a sufficient thing. We've talked about how we can come up",
    "start": "4544125",
    "end": "4550010"
  },
  {
    "text": "with- we haven't talked about how to come up with heuristics, but we have talked about consistent heuristics that are going to be useful and they are going to give us",
    "start": "4550010",
    "end": "4556760"
  },
  {
    "text": "admissibility and they're going to give us correctness and how like A-star is going to be this very efficient thing.",
    "start": "4556760",
    "end": "4561960"
  },
  {
    "text": "But we actually have not talked about how to come up with heuristics. So let's spend the next, yeah,",
    "start": "4561960",
    "end": "4568994"
  },
  {
    "text": "couple minutes talking about, uh, talking about how to come up with heuristics. And in the main idea here,",
    "start": "4568995",
    "end": "4575305"
  },
  {
    "text": "is just to relax the problem. Just relaxation. So, so what are- so, so the way we come up with heuristics is,",
    "start": "4575305",
    "end": "4582000"
  },
  {
    "text": "we pick the problem and just make it easier and solve that easier problem. So, so that is kind of the whole idea of it.",
    "start": "4582000",
    "end": "4587940"
  },
  {
    "text": "So remember the H of S is- is supposed to be close to FutureCost,",
    "start": "4587940",
    "end": "4593155"
  },
  {
    "text": "um, and, and some of these problems can be really difficult, right? So the- so if you have a lot of constraints and it becomes harder to solve the problem,",
    "start": "4593155",
    "end": "4600050"
  },
  {
    "text": "so if you relax it and we just remove the constraints, we are solving a much easier problem and that could be used as a heuristic,",
    "start": "4600050",
    "end": "4606500"
  },
  {
    "text": "as a value of heuristic that estimates what the FutureCost is.  so, um, so we want to remove constraints",
    "start": "4606500",
    "end": "4614135"
  },
  {
    "text": "and when we remove constraints, the cool thing that happens is, sometimes we have closed form solutions,",
    "start": "4614135",
    "end": "4619230"
  },
  {
    "text": "sometimes we just have easier search problems that we can solve and sometimes we have like independence of problems and we can find the solutions to them,",
    "start": "4619230",
    "end": "4626265"
  },
  {
    "text": "and that gives us a good heuristic. So, so that is my goal, right? Like I would want to find these heuristics.",
    "start": "4626265",
    "end": "4631514"
  },
  {
    "text": "So let me just go through a couple of examples for that. So, so let's say I have a search problem and I want to get the triangle to get to the circle,",
    "start": "4631515",
    "end": "4639350"
  },
  {
    "text": "and that is what I wanna do and I have all these like walls there and that just seems really difficult. So what is a good heuristic here?",
    "start": "4639350",
    "end": "4646155"
  },
  {
    "text": "I'm going to just relax the problem. I'm gonna remove like all those walls, just knock down the walls and have that problem.",
    "start": "4646155",
    "end": "4652995"
  },
  {
    "text": "That- that just seems much easier, okay? So- so well, like now,",
    "start": "4652995",
    "end": "4658010"
  },
  {
    "text": "I actually have a closed form solution for getting the triangle, get to the- get to the circle. I can just compute the Manhattan distance and I can use that as a heuristic.",
    "start": "4658010",
    "end": "4666685"
  },
  {
    "text": "Again, it's not going to be the- like actually like what FutureCost is, but it is an approximation for it.",
    "start": "4666685",
    "end": "4672290"
  },
  {
    "text": "So- so usually, you can think of the heuristics as, as these optimistic views of what the FutureCost is,",
    "start": "4672290",
    "end": "4677715"
  },
  {
    "text": "like, like it's an optimistic view of the problem. Like what if there was like no walls. Like if- if there are no walls here,",
    "start": "4677715",
    "end": "4683235"
  },
  {
    "text": "then how would I get from one location to another location? The solution to that is going to give you this FutureCost-",
    "start": "4683235",
    "end": "4689255"
  },
  {
    "text": "this estimate of FutureCost value which is- which is H of S. Okay? Or the tram problem, let's say we have the tram problem but we have",
    "start": "4689255",
    "end": "4697520"
  },
  {
    "text": "a more difficult version of it where we have a constraint. And this constraint says,",
    "start": "4697520",
    "end": "4702830"
  },
  {
    "text": "\"You can't have more tram actions than walk actions.\" So now this is my search problem, I need to solve this.",
    "start": "4702830",
    "end": "4708465"
  },
  {
    "text": "This seems kind of difficult. Like we talked about how to come up with states word last time and even that seemed difficult,",
    "start": "4708465",
    "end": "4714620"
  },
  {
    "text": "like I need to have the location, I need to have the difference between the walk and tram. That seems kind of difficult,",
    "start": "4714620",
    "end": "4719895"
  },
  {
    "text": "like- like I have an order of N squared states now. So instead of doing that, well, let me just remove the constraint.",
    "start": "4719895",
    "end": "4726395"
  },
  {
    "text": "I'm- I'm just gonna remove the constraint, relax it. And after relaxing it, then I have a much easier search problem I need to deal with.",
    "start": "4726395",
    "end": "4734070"
  },
  {
    "text": "I only have this location, and then I can just go with that location and, and everything will be great.",
    "start": "4734070",
    "end": "4739920"
  },
  {
    "text": "Okay? All right. So, so the idea here was like where,",
    "start": "4739920",
    "end": "4746380"
  },
  {
    "text": "where, where this middle part is, if I- if I remove these constraints, I'm going to have these easier search problems, these relaxations.",
    "start": "4746380",
    "end": "4752804"
  },
  {
    "text": "And I can compute the FutureCost of these relaxations using my favorite techniques like dynamic programming or uniform cost search.",
    "start": "4752805",
    "end": "4759450"
  },
  {
    "text": "But- but one thing to notice is, I need to compute that for 1 through N. Because is heuristic is a function of state, right?",
    "start": "4759450",
    "end": "4765795"
  },
  {
    "text": "So I actually need to compute FutureCost for this relaxed problem for all states from 1 through N. Uh,",
    "start": "4765795",
    "end": "4772550"
  },
  {
    "text": "and that allows me to have like a better estimate of this. There are some, uh, like engineering things that you might need to do here.",
    "start": "4772550",
    "end": "4779650"
  },
  {
    "text": "So, so for example, um, you might- so, so here we are looking for FutureCost, so if you plan to use uniform cost search for whatever reason,",
    "start": "4779650",
    "end": "4787494"
  },
  {
    "text": "like maybe Dynamic Programming doesn't work in this setting, you need to use uniform cost search, you need to make a few engineering things to make it work.",
    "start": "4787495",
    "end": "4794385"
  },
  {
    "text": "Because if you remember, uniform cost search would only work on past costs, doesn't work on FutureCost.",
    "start": "4794385",
    "end": "4799830"
  },
  {
    "text": "So you need to like, create a reverse problem where- where you can actually compute FutureCost.",
    "start": "4799830",
    "end": "4805555"
  },
  {
    "text": "So, so a few engineering things but beyond that, it is basically just running our search algorithms that we know,",
    "start": "4805555",
    "end": "4812120"
  },
  {
    "text": "uh, on, on, uh, these relaxed problems. And that will give us a heuristic value,",
    "start": "4812120",
    "end": "4817489"
  },
  {
    "text": "and we'll put that in our problem and we will go and solve it. Okay? Um, and another cool thing that heuristics give us,",
    "start": "4817490",
    "end": "4824165"
  },
  {
    "text": "is, is this idea of having independent subproblems. So, uh, so here's another example. I want to solve this- this eight puzzle and I move",
    "start": "4824165",
    "end": "4830950"
  },
  {
    "text": "blocks here and there and come up with this new configuration, um, that seems hard again.",
    "start": "4830950",
    "end": "4836239"
  },
  {
    "text": "A relaxation of that is just assume that the tiles can overlap. So the original problem says,",
    "start": "4836240",
    "end": "4841520"
  },
  {
    "text": "the tiles cannot overlap. I'm just gonna relax it and say, \"Well, you can just go wherever and you can overlap.\"",
    "start": "4841520",
    "end": "4847160"
  },
  {
    "text": "Okay? So that is again much simpler and now I have eight independent problems for getting each one of",
    "start": "4847160",
    "end": "4853065"
  },
  {
    "text": "these points from one location to another location and I have a closed form solution for that because that's again just Manhattan distance.",
    "start": "4853065",
    "end": "4859514"
  },
  {
    "text": "So that gives me a heuristic, that- that's an estimate. That's not perfect, it's an estimate. And then I can use that estimate in",
    "start": "4859515",
    "end": "4865910"
  },
  {
    "text": "my original search problem to solve the search problem. So here were- it was just some examples of this idea of",
    "start": "4865910",
    "end": "4871489"
  },
  {
    "text": "removing cons- removing constraints and coming up with better heuristics. So like knocking down walls,",
    "start": "4871490",
    "end": "4876820"
  },
  {
    "text": "like walk and tram freely, overlapping pieces, er, pieces and that allows you to kind of solve this new problem, uh, and,",
    "start": "4876820",
    "end": "4885230"
  },
  {
    "text": "and the idea is you're reducing these edge costs from infinity to some finite- finite cost.",
    "start": "4885230",
    "end": "4890565"
  },
  {
    "text": "Okay? All right. So, um, yeah, so, so I'm gonna wrap up here, uh,",
    "start": "4890565",
    "end": "4897650"
  },
  {
    "text": "and I guess we can always talk about these last few slides next time, uh, since we're running late, uh,",
    "start": "4897650",
    "end": "4903599"
  },
  {
    "text": "but I think you- you guys have got like the main idea. So let's talk next time.",
    "start": "4903600",
    "end": "4907830"
  }
]