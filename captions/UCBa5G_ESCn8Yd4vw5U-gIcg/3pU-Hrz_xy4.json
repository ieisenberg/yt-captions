[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "All right. Let's start guys. Okay. So a few announcements before we start.",
    "start": "4460",
    "end": "12809"
  },
  {
    "text": "So, um, if, you have- if you need OAE accommodations, please let us know if you haven't done that already.",
    "start": "12810",
    "end": "19140"
  },
  {
    "text": "So you need to let us know by October 31st because we need to figure out the alternate exam date.",
    "start": "19140",
    "end": "24270"
  },
  {
    "text": "So, uh, we'll get back to you about the exact like details around the alternate exam date, but let us know by October 31st.",
    "start": "24270",
    "end": "31230"
  },
  {
    "text": "Um, project proposals are also due this Thursday. So do talk to the TAs. Do talk to us, come to office hours, all that.",
    "start": "31230",
    "end": "38445"
  },
  {
    "text": "Okay. All right. So today, I wanna talk about games. So, um, so we've started talking about this idea of state-based models, like,",
    "start": "38445",
    "end": "46820"
  },
  {
    "start": "43000",
    "end": "129000"
  },
  {
    "text": "the fact that if you wanna have state as a way of representing, uh, everything about- everything that we need to plan for the future.",
    "start": "46820",
    "end": "53585"
  },
  {
    "text": "We talked about search problems already. We have talked about MDPs where we have a setting where we are playing against the nature and,",
    "start": "53585",
    "end": "60245"
  },
  {
    "text": "and the nature can play, uh, like probabilistically. And then based on that, we need to respond.",
    "start": "60245",
    "end": "66179"
  },
  {
    "text": "Uh, and today, we wanna talk about games. So, so at the setup is, is we have two players playing against each other.",
    "start": "66180",
    "end": "72170"
  },
  {
    "text": "So we're not necessarily playing against nature which can act probabilistically. We're actually playing against another intelligent agent that- that's deciding for,",
    "start": "72170",
    "end": "80310"
  },
  {
    "text": "for his own or her own good. So, so that's kind of the main idea of, of games. All right.",
    "start": "80310",
    "end": "85905"
  },
  {
    "text": "So, so let's start with an example. So this is actually an example that we are gonna use throughout the lecture. All right.",
    "start": "85905",
    "end": "91560"
  },
  {
    "text": "So the example is, we have three buckets. We have A, B and C. And then you are choosing one of these three buckets.",
    "start": "91560",
    "end": "98615"
  },
  {
    "text": "And then I choose a number from the bucket. And the question is, well, your goal here is to maximize the chosen number and the question is,",
    "start": "98615",
    "end": "105830"
  },
  {
    "text": "which bucket would you use? Okay. So, so how many of you would choose bucket A?",
    "start": "105830",
    "end": "111600"
  },
  {
    "text": "No one trusts me, okay [LAUGHTER] No one trusts me, good.",
    "start": "112280",
    "end": "117465"
  },
  {
    "text": "How many of you would choose B? Okay. So now, now people don't trust me [LAUGHTER].",
    "start": "117465",
    "end": "122730"
  },
  {
    "text": "How many of you choose C? Okay. So, so there's a number of people there too. So, so how are you making that decision?",
    "start": "122730",
    "end": "128979"
  },
  {
    "text": "So the way you are making this decision is, if you choose A, you're basically assuming that I'm not playing like,",
    "start": "128980",
    "end": "134150"
  },
  {
    "start": "129000",
    "end": "209000"
  },
  {
    "text": "like try- I'm not trying to get you. I might actually give you 50. And if I give you 50, that'll be awesome.",
    "start": "134150",
    "end": "139314"
  },
  {
    "text": "And you have this very large value that you are trying to maximize. If you think I'm going to act adversarial,",
    "start": "139315",
    "end": "144790"
  },
  {
    "text": "and go against you and then try to minimize your, your number, then you're going to choose bucket B, right, because,",
    "start": "144790",
    "end": "150585"
  },
  {
    "text": "because worst-case scenario, I'll choose the, the lowest number of the bucket and, and in bucket B, the lowest number is one which is better than minus 50 and minus 5.",
    "start": "150585",
    "end": "159190"
  },
  {
    "text": "So, so if you're assuming I'm trying to, like, minimize your good, then you're gonna choose bucket B. And if you have no idea how I'm playing and,",
    "start": "159190",
    "end": "166160"
  },
  {
    "text": "and you're just assuming maybe I'm acting ast- stochastically and maybe I'm, like, flipping a coin and then based on that deciding like what number to give you,",
    "start": "166160",
    "end": "175084"
  },
  {
    "text": "you might choose C because in expectation, C is not bad, right? Like, C, like, if you just average out these numbers and",
    "start": "175085",
    "end": "181640"
  },
  {
    "text": "then pick the average values from A, B, C- A, A and B and C, the average value for A is 0,",
    "start": "181640",
    "end": "187849"
  },
  {
    "text": "for B, it's 2 and then for C, is, um, 5. Right, so, so, so if I'm playing it stochastically,",
    "start": "187850",
    "end": "194310"
  },
  {
    "text": "you might say, well, I'm probably going to give you something around 5. So you would pick C. Okay.",
    "start": "194310",
    "end": "199405"
  },
  {
    "text": "So, so today we wanna talk about these different policies that you might choose in these settings and how we should model our opponent and how we formalize these problems as game problems.",
    "start": "199405",
    "end": "207829"
  },
  {
    "text": "So this is an example that, that we just started. Okay. So, so to- the plan is to formalize",
    "start": "207830",
    "end": "213050"
  },
  {
    "start": "209000",
    "end": "241000"
  },
  {
    "text": "games, talk about how we compute values in the setting of games. So we're gonna talk about expectimax and minimax.",
    "start": "213050",
    "end": "219440"
  },
  {
    "text": "And then towards the end of the lecture, we're gonna talk about how to make things faster. So we're gonna talk about evaluation functions as a way of making things faster, uh,",
    "start": "219440",
    "end": "227870"
  },
  {
    "text": "which is using domain knowledge to, to, to define evaluation functions over notes.",
    "start": "227870",
    "end": "233060"
  },
  {
    "text": "We're also gonna talk about alpha-beta pruning, which is a more general way of pruning your tree and making things faster.",
    "start": "233060",
    "end": "238930"
  },
  {
    "text": "Okay. All right. So that's the plan for today. Okay. So we just defined this game and a way to,",
    "start": "238930",
    "end": "246160"
  },
  {
    "start": "241000",
    "end": "305000"
  },
  {
    "text": "to go about the scheme is to create something that's called a game tree. A game tree is very similar to a search tree.",
    "start": "246160",
    "end": "252430"
  },
  {
    "text": "So this might remind you of search tree where we talked about it like two weeks ago, right. So, so the idea is,",
    "start": "252430",
    "end": "258190"
  },
  {
    "text": "we have this game tree where we have nodes in the- in this tree and each node is a decision point of a player.",
    "start": "258190",
    "end": "264820"
  },
  {
    "text": "And we have different players here, right, like I was playing or you were playing or we have two different people, like, playing here.",
    "start": "264820",
    "end": "269919"
  },
  {
    "text": "So these decision nodes could be for what one of the players, not both of them. And then each root to leaf path is going to be a possible outcome of the game.",
    "start": "269920",
    "end": "279155"
  },
  {
    "text": "Okay. So, like, it could be that I'm choosing minus 50 and then your decision was to pick",
    "start": "279155",
    "end": "284695"
  },
  {
    "text": "bucket A so that path is going to give us one possible outcome of how things can go.",
    "start": "284695",
    "end": "290390"
  },
  {
    "text": "Okay. So, so that is what the tree is basically representing here. Okay. So the, the nodes in,",
    "start": "290390",
    "end": "296840"
  },
  {
    "text": "in the first level are the de- decisions that I was making and then the, the first node, the root node are the decisions that you were making in this setting.",
    "start": "296840",
    "end": "304475"
  },
  {
    "text": "So if we were to formalize this a little bit more, we're gonna formalize this problem as, as a two player zero sum game.",
    "start": "304475",
    "end": "311145"
  },
  {
    "start": "305000",
    "end": "535000"
  },
  {
    "text": "Okay. So, so in this class, a- at least, like, today, we are going to talk about two-player games where",
    "start": "311145",
    "end": "316370"
  },
  {
    "text": "we have an agent and we have an opponent. And then we are going to talk about policies and values and for all of those things,",
    "start": "316370",
    "end": "323030"
  },
  {
    "text": "think of you- yourself as being the agent. So you're playing for the agent. You're optimizing for the agent.",
    "start": "323030",
    "end": "328910"
  },
  {
    "text": "Opponent is this opponent that's playing against you. Okay. So we are also going to, to, like,",
    "start": "328910",
    "end": "334500"
  },
  {
    "text": "today, we are going to talk about games, uh, that are turn-taking games. So we're going to talk about things like chess.",
    "start": "334500",
    "end": "339665"
  },
  {
    "text": "We're not talking about things like rock-paper-scissors. We will talk about that actually next time when we have,",
    "start": "339665",
    "end": "344955"
  },
  {
    "text": "like, like, simultaneous games where you're playing simultaneously. Today we are talking about turn-taking settings.",
    "start": "344955",
    "end": "350690"
  },
  {
    "text": "Two-player turn-taking settings. Full observability, we see everything. We are not talking about, like,",
    "start": "350690",
    "end": "355820"
  },
  {
    "text": "games like poker where you don't necessarily see, like, you have partial observation and you don't necessarily see the hand of your opponent.",
    "start": "355820",
    "end": "361900"
  },
  {
    "text": "Full observation, two-player and also zero-sum games. And, and what zero-sum means is,",
    "start": "361900",
    "end": "367020"
  },
  {
    "text": "if I'm winning and if I'm getting, like, $10 from winning, then my opponent is losing $10. So, so the total utility is going to be equal to zero.",
    "start": "367020",
    "end": "374870"
  },
  {
    "text": "If I win some amount, my opponent is losing the same amount. Okay. All right.",
    "start": "374870",
    "end": "379919"
  },
  {
    "text": "So, so what are the things that we need when we define games? So, so we need to know the players.",
    "start": "379920",
    "end": "385370"
  },
  {
    "text": "We have the agent, we have the opponent. In addition to that, you need to define a bunch of things. This should remind you of the search lecture or the MDP lecture.",
    "start": "385370",
    "end": "392990"
  },
  {
    "text": "So you might have a start state, as S start. We have actions which is a function of state,",
    "start": "392990",
    "end": "399110"
  },
  {
    "text": "which gives us the possible actions from state S similar to before. You have a successor function similar to search problems.",
    "start": "399110",
    "end": "406325"
  },
  {
    "text": "So a successor function takes a state and action and it tells us what's the resulting state you're going to end up at.",
    "start": "406325",
    "end": "413129"
  },
  {
    "text": "And this- and, and you have an end- this end function which checks if you're in an end state or not. And the thing that's different here,",
    "start": "413130",
    "end": "419180"
  },
  {
    "text": "there are two things that are different here. One is this utility function. And the utility function basically gives us the agent's utility at the end state.",
    "start": "419180",
    "end": "427925"
  },
  {
    "text": "Okay. So one thing to notice here is, is that the utility only comes at an end state.",
    "start": "427925",
    "end": "433880"
  },
  {
    "text": "So after you finish the game, like, I've played my chess and I won chess now and this is this chess game.",
    "start": "433880",
    "end": "439590"
  },
  {
    "text": "And then, then I get my utility. Like, as I'm making moves, like, through my, my chess game, I'm not getting, getting any utility.",
    "start": "439590",
    "end": "445500"
  },
  {
    "text": "Like, you only get the utility at an end state. And, and the way we're defining the utility, is we're defining it for the agents because again we are,",
    "start": "445500",
    "end": "452010"
  },
  {
    "text": "we are replaying from perspective of the agent. So, so what would be the utility of the opponent?",
    "start": "452010",
    "end": "457980"
  },
  {
    "text": "Minus that, right. So, so negation of that would be the utility of opponent. Okay.",
    "start": "458020",
    "end": "464640"
  },
  {
    "text": "I've heard about partially observable Markov decision process. Is this, like, kind of, what it is?",
    "start": "466130",
    "end": "472430"
  },
  {
    "text": "Like, is this partially observable? Okay. So the question is, is this partially observable Markov decision process? This is not a partially observable Markov decision processes.",
    "start": "472430",
    "end": "479930"
  },
  {
    "text": "Um, there are classes that talk about, like there's- this decision under uncertainty by Mykel Kochenderfer's class that actually teaches that.",
    "start": "479930",
    "end": "485750"
  },
  {
    "text": "So you should, you should, you should take classes on that. This is not a partially observable Markov decision process. This is fully observable.",
    "start": "485750",
    "end": "492005"
  },
  {
    "text": "You have two players playing against each other. It's a very different setup. [inaudible].",
    "start": "492005",
    "end": "498740"
  },
  {
    "text": "So, so the, the question is, are there any randomness here? And, and so far, I haven't discussed any randomness yet.",
    "start": "498740",
    "end": "504110"
  },
  {
    "text": "Later in the lecture, I'll talk actually about the case where there might be a nature in the middle that acts randomly and then how we go about it.",
    "start": "504110",
    "end": "510215"
  },
  {
    "text": "But so far, two players playing against each other. Okay. All right. And then the other thing that we need to define when you are defining a game,",
    "start": "510215",
    "end": "518405"
  },
  {
    "text": "um, is, is the player. So, so, so player is a function of state. And basically tells us who is in control, like, who is playing now.",
    "start": "518405",
    "end": "525470"
  },
  {
    "text": "So in the game of chess, like, whose turn is it now. And then that is the function that, that you are going to define when we are formally defining, um, that game.",
    "start": "525470",
    "end": "533060"
  },
  {
    "text": "Okay. All right. So, so let's look at an example. So we have a game of chess. Players are white and black.",
    "start": "533060",
    "end": "539675"
  },
  {
    "start": "535000",
    "end": "703000"
  },
  {
    "text": "Let's say you're playing for white. So the agent is white, the opponent is black. And then the state S can represent the position of all pieces and whose turn it is.",
    "start": "539675",
    "end": "548730"
  },
  {
    "text": "So, so that is going to what the state is representing. So whose player's turn it is and",
    "start": "548730",
    "end": "553963"
  },
  {
    "text": "then the position of all pieces. So actions would be all the legal chess moves that player S can take.",
    "start": "553963",
    "end": "560660"
  },
  {
    "text": "And then IsEnd basically checks if the state is checkmate or draw. That is what it is checking.",
    "start": "560660",
    "end": "567029"
  },
  {
    "text": "Okay. So, so then what would the utility be? The utility will be, will be if you're, like,",
    "start": "567030",
    "end": "572730"
  },
  {
    "text": "you're only going to get it when you win or when you lose or, or if there's a draw. So the way we are defining it is,",
    "start": "572730",
    "end": "578645"
  },
  {
    "text": "it's going to be let's say, plus infinity if white wins because, because the agent is white and,",
    "start": "578645",
    "end": "583995"
  },
  {
    "text": "and it's going to be zero if, if there is a draw and then it's going to be minus infinity if black wins.",
    "start": "583995",
    "end": "589190"
  },
  {
    "text": "Okay. Yeah. So, so that was all the things that we would need to define. Yes.",
    "start": "589190",
    "end": "595040"
  },
  {
    "text": "[inaudible]",
    "start": "595040",
    "end": "601339"
  },
  {
    "text": "What- why do we have, why do we have whose turn it is in the state. Uh, so that's one way of actually, like,",
    "start": "601340",
    "end": "607120"
  },
  {
    "text": "extracting the player function. So, so the way you can define a player function is a player is a function of state.",
    "start": "607120",
    "end": "613465"
  },
  {
    "text": "So the state already needs to encode whose turn it is. So you can kind of extract that from the player. You said the, the utility would kind of be negative utility for the p agent.",
    "start": "613465",
    "end": "622120"
  },
  {
    "text": "Is that assuming that they're both taking the same actions the whole time? No. So, so, so this is turn-taking, right?",
    "start": "622120",
    "end": "628120"
  },
  {
    "text": "So I take an action and then the opponent takes an action and then the agent takes an action. The opponent takes an action and then at the very end of the game then then",
    "start": "628120",
    "end": "635215"
  },
  {
    "text": "you get the utility and then the opponent gets- gets the negative of that utility. But the actions could be very different.",
    "start": "635215",
    "end": "640510"
  },
  {
    "text": "Policies could be very different. And we'll talk about how to come up with that. So why is that condition variable, so what happens if white wins, you get",
    "start": "640510",
    "end": "646240"
  },
  {
    "text": "plus infinity, but if black wins, if black wins, you get negative infinity, but like, when you lose-",
    "start": "646240",
    "end": "652430"
  },
  {
    "text": "you hav- you don't have zero-sum game. We'll talk about that next lecture actually a little bit. So, so I'm, I'm talking about zero-sum games here",
    "start": "654690",
    "end": "661750"
  },
  {
    "text": "because the algorithms you are talking about are for zero-sum games. Like we are talk- going to talk about min- mini-max type policies.",
    "start": "661750",
    "end": "667840"
  },
  {
    "text": "Where I'm minimizing and the agent is maximizing. So I'll get back to that if, if I haven't answered that.",
    "start": "667840",
    "end": "672985"
  },
  {
    "text": "Like we can talk about it after the class but also next lecture, we'll talk about more variations of games.",
    "start": "672985",
    "end": "678370"
  },
  {
    "text": "So- but for now, I'm assuming a bunch of simplifying assumptions about this game. The assumption is that like if white wins, it's negative infinity, but if white wins, black gets 0 utility, [inaudible]. [NOISE]",
    "start": "678370",
    "end": "692199"
  },
  {
    "text": "Uh, yeah. So these utilities need to add up to 0. If white wins, maybe white gets 10,",
    "start": "692200",
    "end": "697675"
  },
  {
    "text": "but black gets minus 10. So, so like they, they need to add up. Okay. All right. So and then kind of the characteristics of games that",
    "start": "697675",
    "end": "704770"
  },
  {
    "start": "703000",
    "end": "1353000"
  },
  {
    "text": "we have already discussed are two main things. One is that all utilities are at end state.",
    "start": "704770",
    "end": "710335"
  },
  {
    "text": "So throughout this path you are not getting new utilities as opposed to like things like MDPs where we were, we were getting rewards like throughout the path.",
    "start": "710335",
    "end": "717415"
  },
  {
    "text": "But here, like the utility only comes in at the very end. At the end state. And then the other thing about",
    "start": "717415",
    "end": "723220"
  },
  {
    "text": "it is that different players are in control at different states, right. Like if you are in state, you might not be able to control thing- control things.",
    "start": "723220",
    "end": "730000"
  },
  {
    "text": "It might be your opponent's turn and you might not be able to do anything. Okay? So those are kind of the two main characteristics of games. All right.",
    "start": "730000",
    "end": "738340"
  },
  {
    "text": "So let's look at a game that you're going to play. All right. So the game is a halving game.",
    "start": "738340",
    "end": "743845"
  },
  {
    "text": "So we start with a number N. And then the player- the players take a turn and they can do two things.",
    "start": "743845",
    "end": "750550"
  },
  {
    "text": "They can either subtract 1. So they can decrement N, or they can replace N with N over 2.",
    "start": "750550",
    "end": "755605"
  },
  {
    "text": "So they can divide or subtract. Okay? And the player that's left with 0 is, is going to win.",
    "start": "755605",
    "end": "761610"
  },
  {
    "text": "Okay. So, so that is, that is the setup. Is that- is everyone following that? So, so let's try to formalize the game and then after that you",
    "start": "761610",
    "end": "768870"
  },
  {
    "text": "want to figure out what is a good policy to, to do it. So, so right now let's just try to- let's just try to formalize this.",
    "start": "768870",
    "end": "776290"
  },
  {
    "text": "So you know like what are all the different things for the model are. So let's just have a new file.",
    "start": "776290",
    "end": "781930"
  },
  {
    "text": "We are going to define this game. So it's a halving game.",
    "start": "781930",
    "end": "787270"
  },
  {
    "text": "Okay, so let's, let's get this. All right.",
    "start": "787270",
    "end": "792820"
  },
  {
    "text": "So we're initializing with N. So we're starting with some number N. So what is our state?",
    "start": "792820",
    "end": "801655"
  },
  {
    "text": "Our state is going to encode whose player turn it is and that number N. Okay. So we have a player.",
    "start": "801655",
    "end": "806860"
  },
  {
    "text": "Let's say our players are either plus 1 or minus 1. That's how I'm defining like who's player it is. So the start state. Let's say player plus 1 place with N. So so",
    "start": "806860",
    "end": "815890"
  },
  {
    "text": "that is plus 1 and N. And then we need to define its end. Okay. So what you do is end check.",
    "start": "815890",
    "end": "823750"
  },
  {
    "text": "Well we take the state. We decouple it into player and number. And if the number is equal to zero then then that is when the game ends.",
    "start": "823750",
    "end": "831024"
  },
  {
    "text": "That's our ending condition. Okay. How about utility?",
    "start": "831025",
    "end": "836545"
  },
  {
    "text": "Well we get the utility at an end state. So again I take a state. I decouple it into player and number.",
    "start": "836545",
    "end": "843220"
  },
  {
    "text": "I make sure that we are in, in, in an end state so we assert that number is equal to 0 because that kind of",
    "start": "843220",
    "end": "848590"
  },
  {
    "text": "defines if you're in an end state or not. And then the utility I'm gonna get, if I'm winning I'm gonna get infinity.",
    "start": "848590",
    "end": "854649"
  },
  {
    "text": "If I'm not winning I'm gonna get minus infinity. And the way I'm defining that here is by just doing player of times infinity.",
    "start": "854650",
    "end": "861235"
  },
  {
    "text": "Because player- I'm the agent, I'm the player plus 1. The opponent is player minus 1.",
    "start": "861235",
    "end": "866694"
  },
  {
    "text": "That how- like if, if minus 1 is winning I'm gonna get minus infinity. Okay? The actions that we can do is we can subtract 1, or we can divide.",
    "start": "866695",
    "end": "875845"
  },
  {
    "text": "Divide by 2. I mean subtract and divide are the main actions. And player, this player function again takes the state.",
    "start": "875845",
    "end": "883435"
  },
  {
    "text": "I'm gonna decouple the state into player and number and just return the player. That's how I know who's player's turn is.",
    "start": "883435",
    "end": "890600"
  },
  {
    "text": "And then we need to define the successor function. The successor function takes a state and",
    "start": "891420",
    "end": "896680"
  },
  {
    "text": "an action and tells us what state you're going to end up at. So again a state. I'm going to decouple that into a player and a number.",
    "start": "896680",
    "end": "904660"
  },
  {
    "text": "And then the actions I can take are two things. I can either subtract 1 or I can I can divide by 2.",
    "start": "904660",
    "end": "910615"
  },
  {
    "text": "So if I'm subtracting then I'm going to return a new state which is minus player cause now it's minus 1's turn or plus 1's- like it's minus whoever turn it is now.",
    "start": "910615",
    "end": "919839"
  },
  {
    "text": "And then I'm gonna do number minus 1. If the action is divide, we're gonna return the new player which is minus player,",
    "start": "919840",
    "end": "927085"
  },
  {
    "text": "and then number divided by 2. Okay? That is it. So, so we just defined this game, okay.",
    "start": "927085",
    "end": "934899"
  },
  {
    "text": "Yeah. All right.",
    "start": "934900",
    "end": "942670"
  },
  {
    "text": "So, so that was my game. We're gonna play this game in a little bit.",
    "start": "942670",
    "end": "948910"
  },
  {
    "text": "But let's- quickly before playing it. Let's talk about what is a solution to a game. Like what are we trying to do in a game.",
    "start": "948910",
    "end": "954805"
  },
  {
    "text": "So if you remember MDPs the solution to a game was was the policy. So a policy was a function of state.",
    "start": "954805",
    "end": "960445"
  },
  {
    "text": "It would return the action that you need to take in that state. So similar to MDPs here we have policies.",
    "start": "960445",
    "end": "966070"
  },
  {
    "text": "But, but, the thing is I have two players. So policy should should depend on the player too. So I have Pi of P which is the policy of player P. And I can define it similar to before.",
    "start": "966070",
    "end": "976750"
  },
  {
    "text": "It can be a policy as a function of a state and it can return just an action. And this would be a deterministic policy.",
    "start": "976750",
    "end": "982779"
  },
  {
    "text": "Like deterministically if I'm in state, the policy is going to tell me what action to take, okay.",
    "start": "982780",
    "end": "987955"
  },
  {
    "text": "We can also define Stochastic policies. So what Stochastic policies would do is they would",
    "start": "987955",
    "end": "993580"
  },
  {
    "text": "take a state and action and then they would return a number between 0 to 1 which is the probability of taking that action.",
    "start": "993580",
    "end": "1002160"
  },
  {
    "text": "So policy Pi of a state and action basically will return a probability of player P taking action A in state S. So,",
    "start": "1002160",
    "end": "1011145"
  },
  {
    "text": "so if you remember the bucket example, like maybe half the time I would pick the number on the right and half the time I would pick the number on the, on the left.",
    "start": "1011145",
    "end": "1018570"
  },
  {
    "text": "That would be a stochastic policy, right. I'm not deterministically telling you what the action is. I'm coming up with the stochastic way",
    "start": "1018570",
    "end": "1024750"
  },
  {
    "text": "of telling you like what policy I'm following, okay? So we have deterministic policies. Stochastic policies. Like in our game we could follow either one of them.",
    "start": "1024750",
    "end": "1032459"
  },
  {
    "text": "Under what case would you want a stochastic policy versus the deterministic policy?",
    "start": "1032460",
    "end": "1037755"
  },
  {
    "text": "Uh, can you speak up? Yeah. Under what case would you want a stochastic policy versus a deterministic policy?",
    "start": "1037755",
    "end": "1043995"
  },
  {
    "text": "So under what case do you want a stochastic policy versus a deterministic policy? Again, we'll cover that a little bit more next time depending on what games you are in.",
    "start": "1043995",
    "end": "1051750"
  },
  {
    "text": "Like you have some properties of when stochastic policies are giving us some some properties and deterministic policies are giving us some other properties.",
    "start": "1051750",
    "end": "1058934"
  },
  {
    "text": "Right now you're just defining them as things that could exist. And, uh, we could think our opponent is acting deterministically if,",
    "start": "1058935",
    "end": "1066630"
  },
  {
    "text": "if you know exactly what they were doing. Sometimes I've no idea. Maybe you like I've learned it somehow and I have some randomness there.",
    "start": "1066630",
    "end": "1072674"
  },
  {
    "text": "And then I'm going to use some stochastic policy for how my opponent is going to play against me. But we are going to apply the- like what we get out of the",
    "start": "1072675",
    "end": "1079740"
  },
  {
    "text": "stochastic versus deterministic policy is a little bit more next time. Okay. All right. So okay.",
    "start": "1079740",
    "end": "1085725"
  },
  {
    "text": "So now let's- okay so now that we know that it's the policy that we want to get. Let's try to, let's try to write up a policy for this game.",
    "start": "1085725",
    "end": "1094049"
  },
  {
    "text": "And then I'm gonna define a human policy. And what I mean by that is this is going to come from the human.",
    "start": "1094050",
    "end": "1100020"
  },
  {
    "text": "That means one of you guys or two of you guys. So, um, so I need two volunteers for this but let's quickly actually write this up.",
    "start": "1100020",
    "end": "1107610"
  },
  {
    "text": "So what is a human policy? It's just going to get the input from the keyboard. So, so what I'm going to type up here is,",
    "start": "1107610",
    "end": "1113759"
  },
  {
    "text": "is get the action from the keyboard. So get the input from the keyboard. And that is going to be the action that we are picking.",
    "start": "1113760",
    "end": "1121005"
  },
  {
    "text": "Remember the actions are either divide or subtract. Subtract 1. And if action is valid then return that action.",
    "start": "1121005",
    "end": "1128355"
  },
  {
    "text": "That sounds like a good, good pol- policy. Okay. So that is a human policy.",
    "start": "1128355",
    "end": "1133920"
  },
  {
    "text": "So now what I wanna do is I wanna have like this game that they're actually playing against each other. So I want to have policies for my agent.",
    "start": "1133920",
    "end": "1142095"
  },
  {
    "text": "My agent is plus 1. That's going to be a human policy. And for my opponent, I'm gonna say my opponent is also a human policy.",
    "start": "1142095",
    "end": "1149040"
  },
  {
    "text": "So I just want two humans to play against each other. Okay. And the game is, let's say we are starting with 15.",
    "start": "1149040",
    "end": "1157590"
  },
  {
    "text": "So our number that we're starting with is 15. Okay? All right, so that looks right to me.",
    "start": "1157590",
    "end": "1167730"
  },
  {
    "text": "So how do we, how do we ensure that we are progressing in the game. So if you're in an end sta- if you're not in an end state you want to progress.",
    "start": "1167730",
    "end": "1175500"
  },
  {
    "text": "So let's print a bunch of things here. Let's print out state.",
    "start": "1175500",
    "end": "1181090"
  },
  {
    "text": "Okay. Let's get the player out of the state cause again the state encodes a player.",
    "start": "1181670",
    "end": "1190335"
  },
  {
    "text": "Let's get the policy. Because we have defined these policies for both of the players so",
    "start": "1190335",
    "end": "1195660"
  },
  {
    "text": "we can get the policy for whoever is playing right now. And then the action comes from the policy in that state.",
    "start": "1195660",
    "end": "1204370"
  },
  {
    "text": "And then the new state you're going to end up at is just the successor of the current state and action. So th- I'm just progressing.",
    "start": "1204370",
    "end": "1210595"
  },
  {
    "text": "So, so this while loop here just figures out what state we are in, what policy are we following, and where are we going to end up at and that's the successor function.",
    "start": "1210595",
    "end": "1218515"
  },
  {
    "text": "Okay. And then at the very end I'm just going to print out the utility.",
    "start": "1218515",
    "end": "1224005"
  },
  {
    "text": "So that's either plus infinity or minus infinity. And that sounds good.",
    "start": "1224005",
    "end": "1230470"
  },
  {
    "text": "So, all right. So let's actually- All right. So who wants to play this?",
    "start": "1230470",
    "end": "1235370"
  },
  {
    "text": "Okay that's one person. You're the agent. You're player plus 1. Opponent is three people [LAUGHTER].",
    "start": "1235880",
    "end": "1243929"
  },
  {
    "text": "I think you were first. By [inaudible] yeah. Okay so you're minus 1. All right so let's,",
    "start": "1243930",
    "end": "1250170"
  },
  {
    "text": "uh, play this game. Is this large enough?",
    "start": "1250170",
    "end": "1256530"
  },
  {
    "text": "Yeah. Okay. All right so player 1. Player plus 1. We are at number 15. Do you wanna, uh, decrement.",
    "start": "1256530",
    "end": "1263220"
  },
  {
    "text": "Okay. So minus 1. So we are at player minus 1. We're at 14. What do you wanna do?",
    "start": "1263220",
    "end": "1269519"
  },
  {
    "text": "Divide. Divide. Okay. You have a policy [OVERLAPPING] [LAUGHTER]",
    "start": "1269520",
    "end": "1278160"
  },
  {
    "text": "[BACKGROUND] Minus 1. Divide. Divide. [LAUGHTER]",
    "start": "1278160",
    "end": "1291000"
  },
  {
    "text": "[LAUGHTER] Yeah I don't really, yeah. So yeah so you kind of get the point, right, so wait, did I make you lose now?",
    "start": "1291000",
    "end": "1298980"
  },
  {
    "text": "[LAUGHTER] Sorry. My bad. But you get the utility at the end and then basically you",
    "start": "1298980",
    "end": "1305399"
  },
  {
    "text": "kinda can see this interface- actually does any- Oh I don't know. We don't have that much time. I was going to try like another pair",
    "start": "1305400",
    "end": "1311385"
  },
  {
    "text": "but the code is online if you wanna play with it, just play with it. We will have one other version playing it with an automated policy later.",
    "start": "1311385",
    "end": "1318540"
  },
  {
    "text": "Um, all right. So, okay. So we're back here.",
    "start": "1318540",
    "end": "1325035"
  },
  {
    "text": "Let me close this. Um, all right. So we just saw how we can give",
    "start": "1325035",
    "end": "1331095"
  },
  {
    "text": "some human policies and human policies playing against each other. And again, the policy, you give it a state and action.",
    "start": "1331095",
    "end": "1337005"
  },
  {
    "text": "It gives you a probability or you give it a state and it gives you an action. So a deterministic policy is just an instance of a stochastic policy.",
    "start": "1337005",
    "end": "1343830"
  },
  {
    "text": "Right? So if you have a deterministic policy, you can kind of treat as a stochastic policy where with probability 1 you're picking- you're picking an action.",
    "start": "1343830",
    "end": "1351270"
  },
  {
    "text": "So, all right. So, so now we wanna talk about how we evaluate a game. So, so let's say that someone comes in and gives me",
    "start": "1351270",
    "end": "1358350"
  },
  {
    "start": "1353000",
    "end": "1741000"
  },
  {
    "text": "the policy of an agent and an opponent, and I just want to know how good that was. And again if you remember in the MDP lecture,",
    "start": "1358350",
    "end": "1364740"
  },
  {
    "text": "we started with policy evaluation. So in the MDP lecture, we started with this idea of someone gives me the policy,",
    "start": "1364740",
    "end": "1371565"
  },
  {
    "text": "you just want to evaluate how good that is, and you're kind of doing it analogous to exactly that. Someone comes in and tells me that my agent is going to pick bucket A,",
    "start": "1371565",
    "end": "1379860"
  },
  {
    "text": "that is what my agent is going to just do all the time. And someone comes in and says, \"Well, my opponent is going to act stochastically and,",
    "start": "1379860",
    "end": "1386250"
  },
  {
    "text": "and with probability one-half, give me one of those numbers.\" Okay? So, so these are the two policies that we are going to have.",
    "start": "1386250",
    "end": "1391950"
  },
  {
    "text": "So the question is; how good is this? So going back to the, to the tree, the game tree, what is really happening is my agent is going to pick,",
    "start": "1391950",
    "end": "1399720"
  },
  {
    "text": "uh, this one, right? Because he's going to pick bucket A. So with probability one, we are going to end up here,",
    "start": "1399720",
    "end": "1405345"
  },
  {
    "text": "with probability zero we end up in any of these other buckets. And then my opponent is going to stochastically pick either minus 50 or 50.",
    "start": "1405345",
    "end": "1412320"
  },
  {
    "text": "Okay? So if my opponent is picking minus 50 or 50, then the value of this node is just the,",
    "start": "1412320",
    "end": "1418665"
  },
  {
    "text": "the expectation of that or it's just going to be 0. So 50% of the time it's minus 50, 50% of the times it's 50, then the value of this node is 0.",
    "start": "1418665",
    "end": "1427304"
  },
  {
    "text": "And then if my agent is picking, picking A then, then the value of this node is going to be 0.",
    "start": "1427305",
    "end": "1432720"
  },
  {
    "text": "Okay? So, so you kind of can see how the value is going to propagate up from the utility.",
    "start": "1432720",
    "end": "1439200"
  },
  {
    "text": "So we had the utilities at the leaf nodes, but we could actually compute a value for each one of these nodes if I know what the policies are.",
    "start": "1439200",
    "end": "1446280"
  },
  {
    "text": "Like if I know who's following what policies, I can actually compute these values and go up the tree. Okay? And so in this case,",
    "start": "1446280",
    "end": "1452925"
  },
  {
    "text": "I can say a value of a- of the start state, if I'm evaluating this particular policy,",
    "start": "1452925",
    "end": "1459015"
  },
  {
    "text": "is going to be equal to 0. Okay? All right. So someone gave me the policy,",
    "start": "1459015",
    "end": "1464445"
  },
  {
    "text": "I evaluated the value at the start state. So in general, as I was just saying earlier and this is,",
    "start": "1464445",
    "end": "1470130"
  },
  {
    "text": "this is similar to policy evaluation. This is similar to the case that someone gives me the policies and I'll",
    "start": "1470130",
    "end": "1475740"
  },
  {
    "text": "evaluate wha - how good the situation is. And you can write a recurrence to actually compute that.",
    "start": "1475740",
    "end": "1481455"
  },
  {
    "text": "So I'm going to write the recurrence here maybe. So you want to compute this value.",
    "start": "1481455",
    "end": "1486900"
  },
  {
    "text": "And this value is evaluating a given policy and it's a function of state.",
    "start": "1486900",
    "end": "1492705"
  },
  {
    "text": "Well, what is that going to be equal to? It's going to be equal to utility of S,",
    "start": "1492705",
    "end": "1497880"
  },
  {
    "text": "if you're in an end state. So it's utility of S if we are already in an end state.",
    "start": "1497880",
    "end": "1505780"
  },
  {
    "text": "Otherwise, I have access to the policy of my opponent and policy of my agent so I can just do",
    "start": "1506750",
    "end": "1513450"
  },
  {
    "text": "an expected sum over all possible actions of S. Let's say that I am - if,",
    "start": "1513450",
    "end": "1520845"
  },
  {
    "text": "if player S is agent, I'm looking at policy of agent,",
    "start": "1520845",
    "end": "1526050"
  },
  {
    "text": "let's say its a stochastic policy times V of eval of the successor state.",
    "start": "1526050",
    "end": "1532800"
  },
  {
    "text": "Successor of S and A. And this is if, if my player is agent.",
    "start": "1532800",
    "end": "1538350"
  },
  {
    "text": "So, so if is player - I'm just gonna write is player of S is equal to agent.",
    "start": "1538350",
    "end": "1546195"
  },
  {
    "text": "What happens if my player is opponent? Um, I'm gonna do the same thing.",
    "start": "1546195",
    "end": "1551279"
  },
  {
    "text": "I'm just evaluating I have access to the po- policy of the opponent. I'm again just doing- going to do a sum over",
    "start": "1551280",
    "end": "1557900"
  },
  {
    "text": "all possible actions on the policy of the opponent, this is given to me- someone gave this to me,",
    "start": "1557900",
    "end": "1563600"
  },
  {
    "text": "of state and action times the value of the successor state.",
    "start": "1563600",
    "end": "1569840"
  },
  {
    "text": "And S and A and this is the case that my player is the opponent.",
    "start": "1569840",
    "end": "1575775"
  },
  {
    "text": "So this is a recurrence that we are going to just write and it's kind of intuitive. Again, we have seen this in research too.",
    "start": "1575775",
    "end": "1581310"
  },
  {
    "text": "Like you start with the utilities at the leaf nodes and you just push that back up based on what your policies are and what",
    "start": "1581310",
    "end": "1587550"
  },
  {
    "text": "your policies are telling you like which sides - like which, which edges of the tree you are taking with what probability.",
    "start": "1587550",
    "end": "1594710"
  },
  {
    "text": "Okay? This makes sense? All right. Okay. So that was evaluating the game.",
    "start": "1594710",
    "end": "1601880"
  },
  {
    "text": "But what if now I want to solve what the agent should do? Like I'm the agent, I care about doing - like figuring out what my Pi agent is.",
    "start": "1601880",
    "end": "1610020"
  },
  {
    "text": "I don't know what my Pi Agent is. I need to figure out what sort of policy I should be following. And that kind of takes us to this idea of expectimax which is",
    "start": "1610020",
    "end": "1618750"
  },
  {
    "text": "basically the idea of - if I'm in a scenario where I know what my opponent does, so I'm still assuming what - I know what my opponent does,",
    "start": "1618750",
    "end": "1626700"
  },
  {
    "text": "what would be the best thing that I should be doing as an agent? Okay? What, what would be the best thing I should do?",
    "start": "1626700",
    "end": "1632830"
  },
  {
    "text": "Like if you knew, like, in the bucket example, I was trying - I was acting probabilistically, what would you do?",
    "start": "1633560",
    "end": "1641530"
  },
  {
    "text": "Pick the action that gives you the maximum value. So you'd pick the action that gives you the maximum value because you're",
    "start": "1642680",
    "end": "1649770"
  },
  {
    "text": "trying to maximize your own, your own value. So, so then if that is the case, then this recurrence needs to change, right?",
    "start": "1649770",
    "end": "1656190"
  },
  {
    "text": "This recurrence- the way changes is, I'm going to call this- that new value, so I'm going to just do everything on top of this, I'm not gonna be writing it.",
    "start": "1656190",
    "end": "1664710"
  },
  {
    "text": "I'm gonna call this value, value of expectimax policy.",
    "start": "1664710",
    "end": "1669750"
  },
  {
    "text": "Okay? So, so this value eval, I'm not evaluating anything anymore. I want to actually figure out what my agent should do.",
    "start": "1669750",
    "end": "1678390"
  },
  {
    "text": "So I'm gonna call it expectimax. And if I know a policy of my opponent,",
    "start": "1678390",
    "end": "1685455"
  },
  {
    "text": "I'm not changing anything here because I know the policy of my opponent, I'm just going to compute this. But now I want to figure out what the agent should do and what should the agent do?",
    "start": "1685455",
    "end": "1693555"
  },
  {
    "text": "Well, the agent should do the thing that maximizes this value. So I'm going to erase this sum with the policy because I don't have that policy.",
    "start": "1693555",
    "end": "1702210"
  },
  {
    "text": "And the agent should do the thing that maximizes this value over all possible actions.",
    "start": "1702210",
    "end": "1710230"
  },
  {
    "text": "So this should remind you of value iteration. So if you remember value iteration in the MDP lecture,",
    "start": "1711530",
    "end": "1719025"
  },
  {
    "text": "like we weren't evaluating things, right? We were trying to maximize our value. And that's kind of analogous to what we are doing here.",
    "start": "1719025",
    "end": "1725520"
  },
  {
    "text": "We're trying to figure out what should be the policy that the agent should take that maximizes the value under the scenario that I know what the opponent does.",
    "start": "1725520",
    "end": "1733080"
  },
  {
    "text": "So I still kind of know what the opponent does. So going back to this example, so let's say I know my opponent is acting stochastically. What should I do?",
    "start": "1733080",
    "end": "1741945"
  },
  {
    "start": "1741000",
    "end": "2031000"
  },
  {
    "text": "So if my opponent is acting stochastically with probability one-half, then the values of each one of these buckets are going to be 0, 2 and 5.",
    "start": "1741945",
    "end": "1749715"
  },
  {
    "text": "And I'm trying to maximize my own util- my own values. So I'm gonna pick the one that gives me five.",
    "start": "1749715",
    "end": "1755505"
  },
  {
    "text": "And, and that's shown with this upward triangle I'm trying to maximize. So I'm gonna pick bucket C because I'm trying to",
    "start": "1755505",
    "end": "1761130"
  },
  {
    "text": "maximize under this knowledge that the other agent is stochastically acting. Okay? And, and, and then you're calling this the value of",
    "start": "1761130",
    "end": "1769980"
  },
  {
    "text": "expectimax policy and the value of expectimax policy from the start state is equal to 5.",
    "start": "1769980",
    "end": "1775740"
  },
  {
    "text": "Right? Because that's, that's evaluating the thing I'm going to get. Question back there? [inaudible]",
    "start": "1775740",
    "end": "1782610"
  },
  {
    "text": "Yes. This is assuming I know my opponent's policy and I'm, I'm following - I guess I'm maximizing my own, er,",
    "start": "1782610",
    "end": "1789540"
  },
  {
    "text": "my own value knowing that my opponent is following this policy and what the opponent would do in expectation.",
    "start": "1789540",
    "end": "1795090"
  },
  {
    "text": "Okay? All right. So and then this is the, this is the recurrence that we would get, we would just update the recurrence.",
    "start": "1795090",
    "end": "1801945"
  },
  {
    "text": "So if the agent is, uh, playing then we maximize the value of expectimax. Okay? All right.",
    "start": "1801945",
    "end": "1810060"
  },
  {
    "text": "So, okay, in general I don't know the policy of my opponent. Right? So in general, like,",
    "start": "1810350",
    "end": "1816285"
  },
  {
    "text": "I know what gives me this pi opt. So if that is the case, then what should we do?",
    "start": "1816285",
    "end": "1822360"
  },
  {
    "text": "So one thing that we could do is we could assume worst case. So, so one thing that you could do is you could be like oh",
    "start": "1822360",
    "end": "1828570"
  },
  {
    "text": "the opponent is trying to get me in and they're going to play the worst-case scenario and they are trying to minimize my value.",
    "start": "1828570",
    "end": "1834990"
  },
  {
    "text": "And, and that's the fair thing to do. And we are going to talk about if, if that is always the best thing we can do or not,",
    "start": "1834990",
    "end": "1840720"
  },
  {
    "text": "a little bit later in the lecture. But for now, what we could assume that if I know nothing about my opponent, I can just assume my opponent is acting adversarially against me.",
    "start": "1840720",
    "end": "1848835"
  },
  {
    "text": "So and that kind of introduces this idea of minimax as opposed to expectimax that we just talked about.",
    "start": "1848835",
    "end": "1855690"
  },
  {
    "text": "So, so what would minimax do? So in the case of a minimax policy, what I'm,",
    "start": "1855690",
    "end": "1861165"
  },
  {
    "text": "I'm assuming is I am this agent trying to maximize my, my own- my own value and then I'm assuming my opponent is acting adversarially.",
    "start": "1861165",
    "end": "1870664"
  },
  {
    "text": "So my opponent is really trying to minimize my value. And what that means is from this bucket, I'm gonna get minus 50,",
    "start": "1870665",
    "end": "1876695"
  },
  {
    "text": "from this one I'm gonna get 1, from this one I'm gonna get minus 5. And under that assumption, well,",
    "start": "1876695",
    "end": "1882165"
  },
  {
    "text": "I'm going to pick the second bucket because that gives me the highest- the highest value. So, so that is a minimax policy.",
    "start": "1882165",
    "end": "1889800"
  },
  {
    "text": "So how would I change my recurrence if I were to play minimax or I'm going to-",
    "start": "1889800",
    "end": "1895935"
  },
  {
    "text": "I'm going to call it V of- so let's look at the V of minimax of a state.",
    "start": "1895935",
    "end": "1902535"
  },
  {
    "text": "Well, the recurrence is going to be over minimax, V of minimax, so I'm gonna change that.",
    "start": "1902535",
    "end": "1908320"
  },
  {
    "text": "If the agent is playing, the agent is still trying to maximize the value. So, so that is all good.",
    "start": "1912800",
    "end": "1919515"
  },
  {
    "text": "What if the opponent is playing? The opponent is going to minimize, right?",
    "start": "1919515",
    "end": "1926460"
  },
  {
    "text": "So I don't have access to pi opt. So what I'm gonna do is I'm going to remove this and say well the opponent is going to take",
    "start": "1926460",
    "end": "1933150"
  },
  {
    "text": "an action that minimizes the value of the successor of S and A.",
    "start": "1933150",
    "end": "1938895"
  },
  {
    "text": "Okay? And this is how you would compute the value of a minimax policy.",
    "start": "1938895",
    "end": "1945440"
  },
  {
    "text": "Is this assuming that the adversarial agent consistently tries to minimize the utility of the agent?",
    "start": "1945440",
    "end": "1952424"
  },
  {
    "text": "Yes. What happens when, um, the adversarial agent doesn't always go with that selection but also becomes",
    "start": "1952425",
    "end": "1960375"
  },
  {
    "text": "stochastically. Yes. So that's a good question. So what happens like if the adversarial agent is not always adversarial, right?",
    "start": "1960375",
    "end": "1966419"
  },
  {
    "text": "So in that case, you have another stochastic policy that kind of defines what- what the opponent is doing. And if you have access to that,",
    "start": "1966420",
    "end": "1972120"
  },
  {
    "text": "you can do something similar to expectimax. If you don't have access to that maybe you would want to act worst-case and assume that they're always trying to minimize.",
    "start": "1972120",
    "end": "1979620"
  },
  {
    "text": "But- but that's some prior knowledge that you have that allows you to- to act better or maybe evaluate, ah, the value better for wherever you stay.",
    "start": "1979620",
    "end": "1986600"
  },
  {
    "text": "So we'll talk about evaluation functions a little bit in the lecture. And maybe you'll look back and form your evaluation function, okay? All right.",
    "start": "1986600",
    "end": "1995160"
  },
  {
    "text": "So- so- so here the value of minimax from the start state is going to be 1,",
    "start": "1995160",
    "end": "2000860"
  },
  {
    "text": "right? Does everyone see that? So I'm assuming my opponent is acting adversarially. So we have minus 51 and minus 5.",
    "start": "2000860",
    "end": "2008149"
  },
  {
    "text": "If I am maximizing then the best thing I can get is 1. And then that's how we compute V of minimax, okay?",
    "start": "2008150",
    "end": "2015065"
  },
  {
    "text": "And then there is really no analogy to this in MDP setting because in MDP setting you don't really have this game.",
    "start": "2015065",
    "end": "2021230"
  },
  {
    "text": "We don't really have this opponent that's playing against us. And what happens is, is that this is a recurrence that you're going to",
    "start": "2021230",
    "end": "2027260"
  },
  {
    "text": "get it which is what we already have on the board, right? Okay. So- so what would the policy be?",
    "start": "2027260",
    "end": "2033425"
  },
  {
    "start": "2031000",
    "end": "2061000"
  },
  {
    "text": "So the policy is just going to be the argmax of this V of minimax. So if you want to know what the policy of your agent should be, that's Pi max.",
    "start": "2033425",
    "end": "2041600"
  },
  {
    "text": "It's the arg max over v of minimax, over successor of that state. And if you want to know what's the policy of- of your opponent,",
    "start": "2041600",
    "end": "2048320"
  },
  {
    "text": "that state S should be- well, that's argmin of- of b of minimax which is intuitive, right?",
    "start": "2048320",
    "end": "2053540"
  },
  {
    "text": "So- so then that way you can actually figure out what the action should be, what the policy with the actual action should be, okay?",
    "start": "2053540",
    "end": "2059270"
  },
  {
    "text": "All right. So let's go back to this example, this halving game. So what we wanna do is we wanna actually code up what",
    "start": "2059270",
    "end": "2065540"
  },
  {
    "start": "2061000",
    "end": "2324000"
  },
  {
    "text": "a minimax policy would do in this setting. And maybe we can play with a minimax policy after that, okay?",
    "start": "2065540",
    "end": "2073010"
  },
  {
    "text": "So what would a minimax policy do? So it's a policy,",
    "start": "2073010",
    "end": "2078590"
  },
  {
    "text": "so it's going to be a function of states, so let's give it state. And you're going to just write this recursion that we have on the board.",
    "start": "2078590",
    "end": "2085610"
  },
  {
    "text": "So- so we're recursing over to state. If you're in an end state then what are we returning?",
    "start": "2085610",
    "end": "2092284"
  },
  {
    "text": "Just the utility, okay? So we're returning the utility of that state,",
    "start": "2092285",
    "end": "2099125"
  },
  {
    "text": "and there was no actions. And then if you're not in an end state,",
    "start": "2099125",
    "end": "2104420"
  },
  {
    "text": "then you are either maximizing or minimizing over a set of choices. So let's actually like create those choices so they can just call max and min on them.",
    "start": "2104420",
    "end": "2112845"
  },
  {
    "text": "So the choices we're going to iterate over all actions that- that we have.",
    "start": "2112845",
    "end": "2119060"
  },
  {
    "text": "And what is that going to be exactly? Well, that's going to be doing a recursion over the successor states.",
    "start": "2121020",
    "end": "2128180"
  },
  {
    "text": "So we are going to recurse over the successor state. So recurse over succ- game.successor of state and action.",
    "start": "2128180",
    "end": "2136895"
  },
  {
    "text": "And I'm going to return the action here too because I just want to get the policy later. And the successor- does this recursive function returns a state and action.",
    "start": "2136895",
    "end": "2145730"
  },
  {
    "text": "So I just want to get the state from the first one and the action from the second one. Okay. So if player is plus 1 that's the agent,",
    "start": "2145730",
    "end": "2154205"
  },
  {
    "text": "the agent should maximize the choices. And if player is minus 1, then- then that's the opponent,",
    "start": "2154205",
    "end": "2160730"
  },
  {
    "text": "the opponent should try to minimize over these choices. And that's pretty much like this recursion that we have on the board,",
    "start": "2160730",
    "end": "2168080"
  },
  {
    "text": "and- and that's our recursive function, okay?",
    "start": "2168080",
    "end": "2174050"
  },
  {
    "text": "So we're going to recurse over- over our state and that gives us a value and it also gives us- gives us an action.",
    "start": "2174050",
    "end": "2180515"
  },
  {
    "text": "So let's just print things out. So you can refer to them. So minimax gives us an action,",
    "start": "2180515",
    "end": "2189635"
  },
  {
    "text": "and it tells us this is the value that you can get [NOISE].",
    "start": "2189635",
    "end": "2196100"
  },
  {
    "text": "All right. And then it's a policy, so let's just return the action.",
    "start": "2196100",
    "end": "2202910"
  },
  {
    "text": "Okay. So now what I'm gonna do is, I'm going to say plus 1 agent is still a human policy, and then it's playing against a minimax policy.",
    "start": "2202910",
    "end": "2210770"
  },
  {
    "text": "So all right. So let's- who wants to play with this? And it's a little scarier to play with the minimax policy [LAUGHTER].",
    "start": "2210770",
    "end": "2221300"
  },
  {
    "text": "Okay. All right. So let's do this. Python.",
    "start": "2221300",
    "end": "2226589"
  },
  {
    "text": "All right. So you are the agent. So you're player 1. You're starting from 15. What do you want to do?",
    "start": "2226780",
    "end": "2232430"
  },
  {
    "text": "[BACKGROUND]. So you just lost the game [LAUGHTER].",
    "start": "2232430",
    "end": "2241190"
  },
  {
    "text": "So- so why do I know you lost the game? Now it's player minus 1 playing, you are at 7. And minimax policy took action minus, er,",
    "start": "2241190",
    "end": "2248885"
  },
  {
    "text": "and says action minus, um, and- and it also, yeah takes action minus. So we're at 6.",
    "start": "2248885",
    "end": "2255140"
  },
  {
    "text": "And then the value of the game is minus infinity. So you're playing with a minimax policy, you're already getting minus infinity.",
    "start": "2255140",
    "end": "2261380"
  },
  {
    "text": "So- so you just lost the game. Anyone want to try this again [LAUGHTER].",
    "start": "2261380",
    "end": "2267980"
  },
  {
    "text": "You want to try it again maybe. [BACKGROUND] Subtract.",
    "start": "2267980",
    "end": "2274850"
  },
  {
    "text": "[LAUGHTER] Okay. So you- so you can win, right?",
    "start": "2274850",
    "end": "2280119"
  },
  {
    "text": "So the value is infinity right now. And then yeah, so and then the minimax policy also did a minus.",
    "start": "2280120",
    "end": "2287300"
  },
  {
    "text": "So we're at 13 right now. It's your turn, you're at 13 [BACKGROUND].",
    "start": "2287300",
    "end": "2294260"
  },
  {
    "text": "You just lost the game again [LAUGHTER]. So yeah, so minus infinity is- yeah actually you need to like alternate between them.",
    "start": "2294260",
    "end": "2301940"
  },
  {
    "text": "I think that is the best policy. But play with this kind of get a sense of how this runs. The code is online.",
    "start": "2301940",
    "end": "2309680"
  },
  {
    "text": "So just feel free to play with it and figure out, what is the best policy to use. All right.",
    "start": "2309680",
    "end": "2317660"
  },
  {
    "text": "So- okay. So- so that was a minimax policy.",
    "start": "2317660",
    "end": "2322730"
  },
  {
    "text": "And then this is kinda the recurrence that we get for a minimax policy. Now, what I wanna do is I wanna spend a little bit of time talking about,",
    "start": "2322730",
    "end": "2330350"
  },
  {
    "start": "2324000",
    "end": "2741000"
  },
  {
    "text": "um, some properties of this minimax policy. And then we talked about two types of policy so far, right?",
    "start": "2330350",
    "end": "2336319"
  },
  {
    "text": "We have talked about expectimax, which is basically saying, \"I as an agent, I'm trying to maximize,",
    "start": "2336320",
    "end": "2341975"
  },
  {
    "text": "but I know what my opponent is going to do. So I'm going to assume my opponent does whatever.",
    "start": "2341975",
    "end": "2347510"
  },
  {
    "text": "And then I'm going to maximize based on that.\" So- so for example, I am following and I'm going to refer that to as Pi of expectimax,",
    "start": "2347510",
    "end": "2354500"
  },
  {
    "text": "which means that the agent and everything in red is for the agent, everything in blue is for the opponent.",
    "start": "2354500",
    "end": "2360185"
  },
  {
    "text": "So I'm gonna say the agent is following this policy which says, \"I'm going to maximize assuming my opponent is doing whatever.",
    "start": "2360185",
    "end": "2367970"
  },
  {
    "text": "And here I'm calling Pi 7 as like some opponent policy.\" It couldn't be like anything but Pi 7.",
    "start": "2367970",
    "end": "2373280"
  },
  {
    "text": "So let's say that, opponent is playing Pi 7, I'm going to maximize based on that. And- and the value we just talked about is the value of expectimax.",
    "start": "2373280",
    "end": "2380270"
  },
  {
    "text": "The other value we just talked about is the value of minimax which says, \"I am the agent. I'm going to maximize assuming the opponent is going to minimize.\"",
    "start": "2380270",
    "end": "2388610"
  },
  {
    "text": "And then the opponent actually is going to minimize and is going to follow pi min. Okay. So- so these are the two values we have talked about so far.",
    "start": "2388610",
    "end": "2395825"
  },
  {
    "text": "I want to talk a little bit about the properties of this. But before that, let me- So weight to like kinda like mix the two together.",
    "start": "2395825",
    "end": "2403970"
  },
  {
    "text": "And you say like just highlight the probability of piping the minimum for like an expected max.",
    "start": "2403970",
    "end": "2410135"
  },
  {
    "text": "I give a probability distribution over like the actions, right? Like why don't we just take the action that like",
    "start": "2410135",
    "end": "2415160"
  },
  {
    "text": "minimizes whatever our reward is and give it a higher weight, in Expectimax.",
    "start": "2415160",
    "end": "2420410"
  },
  {
    "text": "Um- [NOISE] I didn't fully follow what policy you were referring to, actually.",
    "start": "2420410",
    "end": "2427040"
  },
  {
    "text": "Is it- are you coming up with a new policy that you do- you're saying would be a better policy to [NOISE] between like expectimax and minimax in some sense?",
    "start": "2427040",
    "end": "2436400"
  },
  {
    "text": "So this might- this, this table might, kind of, address that because it's, it's considering four different cases.",
    "start": "2436400",
    "end": "2442309"
  },
  {
    "text": "It's actually not considering the two cases. So this might actually refer to what you're, what you're proposing. So, so let's actually go through this first and then maybe,",
    "start": "2442310",
    "end": "2449300"
  },
  {
    "text": "like, if it doesn't answer that. So, All right, so, so I want to talk about the setting. So this table is actually not that confusing,",
    "start": "2449300",
    "end": "2455390"
  },
  {
    "text": "but it can get confusing. So do pay attention to this part. Um, all right, so where do I wanna- maybe, maybe I'll write over there.",
    "start": "2455390",
    "end": "2463595"
  },
  {
    "text": "So I'm gonna use red for agent. Where is my blue, my blue? On the floor?",
    "start": "2463595",
    "end": "2470900"
  },
  {
    "text": "Hanging on the left. Left? Your right. My right, [LAUGHTER] okay, all right, [LAUGHTER] okay. And then I'm going to use blue for,",
    "start": "2470900",
    "end": "2477829"
  },
  {
    "text": "um, and I dropped this. I'm going to use blue for, um, the opponent policy.",
    "start": "2477830",
    "end": "2483725"
  },
  {
    "text": "Okay. So, so then for agents, we're are going to have Pi max.",
    "start": "2483725",
    "end": "2489365"
  },
  {
    "text": "All right. An agent could play Pi max. What does that mean again? I'm going to maximize assuming you're gong to minimize.",
    "start": "2489365",
    "end": "2495770"
  },
  {
    "text": "An agent could play Pi expectimax. Maybe the policy 7, I'm gonna put 7 here,",
    "start": "2495770",
    "end": "2502520"
  },
  {
    "text": "which means I am going to maximize assuming you're going to follow this Pi 7. So this is a thing that the agents can do.",
    "start": "2502520",
    "end": "2509119"
  },
  {
    "text": "[NOISE] Okay? And then there are things that my opponent can do.",
    "start": "2509120",
    "end": "2515750"
  },
  {
    "text": "I'm going to write that here. My opponent can actually follow Pi min which is I'm just going to minimize,",
    "start": "2515750",
    "end": "2522425"
  },
  {
    "text": "or my opponent could follow some other policy Pi 7. Let's say Pi 7 in the bucket example right now is,",
    "start": "2522425",
    "end": "2528500"
  },
  {
    "text": "is just acting as stochastically. So half the time pick one number, half the time pick another number. Okay? So, so that is what we have.",
    "start": "2528500",
    "end": "2537110"
  },
  {
    "text": "So I'm going to draw my- actually my tree so we can go over examples of that too.",
    "start": "2537110",
    "end": "2542330"
  },
  {
    "text": "So this was the bucket example. They started at minus 50 and 50 in bucket A,",
    "start": "2542330",
    "end": "2548720"
  },
  {
    "text": "1 and 3 in bucket B, minus 5 and 15 in bucket C. Okay?",
    "start": "2548720",
    "end": "2554435"
  },
  {
    "text": "So this was my bucket example. I'm actually going to talk about that. So- All right. So I'm gonna talk about a bunch of properties of V of Pi max and Pi min,",
    "start": "2554435",
    "end": "2566735"
  },
  {
    "text": "which is what we have been referring to as the minimax value. Okay? So, so I want to talk about this a little bit.",
    "start": "2566735",
    "end": "2573470"
  },
  {
    "text": "Okay? So the first property that, that we can have is, is that V of Pi max and Pi min,",
    "start": "2573470",
    "end": "2586234"
  },
  {
    "text": "it is- actually let me go back to the next slide. It is going to be an upper bound",
    "start": "2586235",
    "end": "2593310"
  },
  {
    "text": "of any order value of any order policy.",
    "start": "2594400",
    "end": "2601160"
  },
  {
    "text": "Pi of- I'm going to just write Pi of expectimax for any other policy for the agent.",
    "start": "2601160",
    "end": "2606244"
  },
  {
    "text": "Assuming that my opponent is playing as a minimizer.",
    "start": "2606245",
    "end": "2611690"
  },
  {
    "text": "Okay. So, so what I'm writing, so what I'm writing here is, is that value is going to be an upper bound of any order value if",
    "start": "2611690",
    "end": "2620390"
  },
  {
    "text": "my agent decides to do anything else under the assumption that my opponent is a minimizer.",
    "start": "2620390",
    "end": "2625745"
  },
  {
    "text": "So my opponent is really trying to get me. If my opponent is really trying to get me, then the best thing I can do is to maximize.",
    "start": "2625745",
    "end": "2632180"
  },
  {
    "text": "Okay? So, so that's kind of intuitive, right? That's an upper bound. Let's look at that example. So what is Pi- V of Pi mix- er,",
    "start": "2632180",
    "end": "2639095"
  },
  {
    "text": "Pi max and Pi min? So, so we just talked about that, right? So if this guy is a minimizer, we're gonna get minus 50 here,",
    "start": "2639095",
    "end": "2645740"
  },
  {
    "text": "1 here, minus 5 here. If this guy is a maximizer, what is the value I'm gonna get?",
    "start": "2645740",
    "end": "2651425"
  },
  {
    "text": "You'll get 1, right? I'm gonna go down here and then I'm gonna get 1. So V of Pi max and Pi min is just equal to 1.",
    "start": "2651425",
    "end": "2658820"
  },
  {
    "text": "That is this value that is just equal to 1. Okay? What is this saying is that this is going to be greater",
    "start": "2658820",
    "end": "2667460"
  },
  {
    "text": "than maybe the setting where my opponent- so my,",
    "start": "2667460",
    "end": "2673220"
  },
  {
    "text": "my agent is following expectimax and my opponent is still doing Pi min. So, so what would this correspond to?",
    "start": "2673220",
    "end": "2678859"
  },
  {
    "text": "What will this value correspond to? So this is a value which says, well,",
    "start": "2678860",
    "end": "2684484"
  },
  {
    "text": "I'm going to take an action assuming my opponent is acting stochastically.",
    "start": "2684485",
    "end": "2690560"
  },
  {
    "text": "If my opponent is acting stochastically, I'm gonna get 0 here, I'm gonna get 2 here, and get 5 here.",
    "start": "2690560",
    "end": "2696050"
  },
  {
    "text": "If I'm assuming that and I'm trying to maximize my own, my own value, which route do I go? I'm gonna go this route.",
    "start": "2696050",
    "end": "2703775"
  },
  {
    "text": "But it turns out that my opponent was not doing that. My opponent was actually a minimizer. So if my opponent was actually a minimizer and I went this route,",
    "start": "2703775",
    "end": "2713240"
  },
  {
    "text": "my opponent is going to give me minus 5. So the value I'm going to end up getting is minus 5.",
    "start": "2713240",
    "end": "2719164"
  },
  {
    "text": "So this is equal to minus 5. This is equal to minus 5.",
    "start": "2719165",
    "end": "2725285"
  },
  {
    "text": "Okay? So, so far I've shown that this guy is greater than this guy. okay? All right.",
    "start": "2725285",
    "end": "2732650"
  },
  {
    "text": "So that's the first property. First property is if my opponent is terrible and is trying to get me, best thing I can do is to maximize. I shouldn't do anything else.",
    "start": "2732650",
    "end": "2739745"
  },
  {
    "text": "Okay? The second property is, is that this is V of Pi max, again the same V,",
    "start": "2739745",
    "end": "2748175"
  },
  {
    "start": "2741000",
    "end": "2898000"
  },
  {
    "text": "V of Pi max and Pi min is now a lower bound of",
    "start": "2748175",
    "end": "2754880"
  },
  {
    "text": "a setting where your agent is maximizing assuming your opponent is minimizing.",
    "start": "2754880",
    "end": "2761615"
  },
  {
    "text": "But your opponent was actually not minimizing, your opponent was following Pi 7. So, so what this says is if you're trying to maximize assuming your agent,",
    "start": "2761615",
    "end": "2769670"
  },
  {
    "text": "your, your, your opponent is always minimizing, then, then you're doing- like you'll come up with like",
    "start": "2769670",
    "end": "2774860"
  },
  {
    "text": "a lower bound and if your opponent ends up doing something else, you can always just do better than this lower bound.",
    "start": "2774860",
    "end": "2780319"
  },
  {
    "text": "Okay? So what is, what is this V equal to or we just showed that is, that is one, right?",
    "start": "2780320",
    "end": "2787549"
  },
  {
    "text": "That is this value. Okay? What does this correspond to? So this is value of Pi max which is I am going to assume you are trying to get me.",
    "start": "2787550",
    "end": "2798230"
  },
  {
    "text": "If I'm going to assume you are trying to get me I'm gonna go down this route because that is the thing that gives me the highest, the highest value.",
    "start": "2798230",
    "end": "2805115"
  },
  {
    "text": "But you are not trying to get me, you are following Pi 7. So if you're following, following Pi 7, you're just going to give me a half the time",
    "start": "2805115",
    "end": "2812329"
  },
  {
    "text": "1 and half the time 3 and that actually corresponds to the 2, and I'm going to get value 2 instead of value 1.",
    "start": "2812330",
    "end": "2820040"
  },
  {
    "text": "So this is actually equal to 2 in this case. And this corresponds to this value in the table which is again",
    "start": "2820040",
    "end": "2827869"
  },
  {
    "text": "the agent is following a maximizer assuming the opponent is a minimizer. Opponent was not a minimizer,",
    "start": "2827870",
    "end": "2833000"
  },
  {
    "text": "opponent was just following Pi 7. And this is just equal to 2 .",
    "start": "2833000",
    "end": "2838475"
  },
  {
    "text": "Okay. So so far, the things I've shown are actually very intuitive. They seem a little complicated but they're very intuitive.",
    "start": "2838475",
    "end": "2845285"
  },
  {
    "text": "What I've shown is that this value of minimax, it's an upper bound. If you're assuming our,",
    "start": "2845285",
    "end": "2850924"
  },
  {
    "text": "our opponent is a terrible opponent, now it's going to be an upper bound because the best thing I can do is maximize.",
    "start": "2850925",
    "end": "2856280"
  },
  {
    "text": "I've also shown it's a lower bound if my opponent is not as bad. So, so that's what I've shown so far.",
    "start": "2856280",
    "end": "2861740"
  },
  {
    "text": "A question. So here the opponent's policy is completely hidden to the agent.",
    "start": "2861740",
    "end": "2868460"
  },
  {
    "text": "Yeah. So here, like, because- Yeah, the agent actually doesn't see the opponent- where the opponent goes, right?",
    "start": "2868460",
    "end": "2875615"
  },
  {
    "text": "Even in the expectimax case, it thinks the opponent is going to follow Pi 7, but maybe the opponent follows Pi 7, maybe not.",
    "start": "2875615",
    "end": "2881540"
  },
  {
    "text": "Right so, so like when we talk about expectimax and minimax, it's always the case that the opponent doesn't actually see what the opponent does.",
    "start": "2881540",
    "end": "2888710"
  },
  {
    "text": "But the opponent can think- the agent can think what the opponent does, okay? And I'm going to talk about one more property.",
    "start": "2888710",
    "end": "2895415"
  },
  {
    "text": "And this last property basically says if you know something, actually goes back to your question,",
    "start": "2895415",
    "end": "2900890"
  },
  {
    "start": "2898000",
    "end": "3182000"
  },
  {
    "text": "if you know something about your opponent, right? If you know something about your opponent, then you shouldn't do the minimax policy.",
    "start": "2900890",
    "end": "2907565"
  },
  {
    "text": "You should actually do the thing that has some knowledge of what your opponent does. So, so that basically says this-",
    "start": "2907565",
    "end": "2915155"
  },
  {
    "text": "we Pi max and some Pi of opponent,",
    "start": "2915155",
    "end": "2922730"
  },
  {
    "text": "you know something about Pi opponent. You know that opponent is playing Pi 7. That is going to be less than or equal to the case where you are following",
    "start": "2922730",
    "end": "2931819"
  },
  {
    "text": "the Pi of expectimax of 7,",
    "start": "2931820",
    "end": "2937610"
  },
  {
    "text": "uh, and the opponent actually follows Pi 7. Okay. So what does this last equality- inequality saying?",
    "start": "2937610",
    "end": "2944090"
  },
  {
    "text": "Well, it is saying that the case where you're trying to maximize and you think your opponent is minimizing, but your opponent is actually not minimizing the,",
    "start": "2944090",
    "end": "2951170"
  },
  {
    "text": "value of that is going to be less than the case where you're maximizing under some knowledge of your opponent's policy",
    "start": "2951170",
    "end": "2957710"
  },
  {
    "text": "and your opponent's policy actually ended up doing that. Okay? So, so the first term is always the agent.",
    "start": "2957710",
    "end": "2964400"
  },
  {
    "text": "The second term is always the opponent, right? So this value we have already computed, that- that's equal to 2.",
    "start": "2964400",
    "end": "2969545"
  },
  {
    "text": "This value, what is this value saying? It is saying you are going to maximize assuming your opponent is stochastic.",
    "start": "2969545",
    "end": "2977780"
  },
  {
    "text": "So if I'm assuming my opponent is stochastic, then I'm assuming that this is 0,",
    "start": "2977780",
    "end": "2982789"
  },
  {
    "text": "this is 2, this is 5, right? I'm trying to maximize.",
    "start": "2982790",
    "end": "2988295"
  },
  {
    "text": "So which one of my routes shou- should I go? I should go this route because that gives me 5.",
    "start": "2988295",
    "end": "2993730"
  },
  {
    "text": "So this is the agent thinking the opponent is going to be stochastic, thinking he's going to get 5.",
    "start": "2993730",
    "end": "2999175"
  },
  {
    "text": "And it gets here and the opponent actually ends up following Pi 7 which is a stochastic thing.",
    "start": "2999175",
    "end": "3004185"
  },
  {
    "text": "So, so we are actually going to get 5. So, so this guy is equal to 5.",
    "start": "3004185",
    "end": "3010275"
  },
  {
    "text": "And this is the last inequality that we have, which is V of Pi expectimax of 7,",
    "start": "3010275",
    "end": "3019125"
  },
  {
    "text": "and Pi of 7 is greater than or equal to V of Pi max and Pi 7.",
    "start": "3019125",
    "end": "3027925"
  },
  {
    "text": "We just showed this is equal to 5 for this example. Okay. All right. Question.",
    "start": "3027925",
    "end": "3035500"
  },
  {
    "text": "[inaudible] The actions of the opponents",
    "start": "3035500",
    "end": "3040780"
  },
  {
    "text": "always whether or not the [inaudible] [NOISE].",
    "start": "3040780",
    "end": "3047110"
  },
  {
    "text": "Uh, so- So if, if you, so if you know something about the stochasticity, that's in order. Like here, I knew that the opponent was",
    "start": "3047110",
    "end": "3054020"
  },
  {
    "text": "following the stochastic policy of one out, one out. I might have known that the opponent is following a deterministic policy in- and always is picking the left one.",
    "start": "3054020",
    "end": "3060964"
  },
  {
    "text": "So I could have like followed, like same expectimax policy under that knowledge. It could be anything else, but the whole idea of expectimax is,",
    "start": "3060965",
    "end": "3067819"
  },
  {
    "text": "I have some knowledge of what the policy of, of the opponent is, it could be a stochastic policy, it could be a deterministic policy under that,",
    "start": "3067820",
    "end": "3074210"
  },
  {
    "text": "how would I maximize? Does that mean that like transitively,",
    "start": "3074210",
    "end": "3079700"
  },
  {
    "text": "that the bottom right is greater than the bottom left always? Yeah. So the question is do we have- Yeah.",
    "start": "3079700",
    "end": "3085790"
  },
  {
    "text": "So we have what like this inequality, so transitively, this guy is always greater than this guy. And that kinda makes sense, right?",
    "start": "3085790",
    "end": "3091970"
  },
  {
    "text": "Like we're saying, like if you're following expectimax, so this last one kinda makes sense, right? It's, it's basically saying if you're following expectimax and you know",
    "start": "3091970",
    "end": "3099470"
  },
  {
    "text": "something about your opponent and your opponent actually ended up doing that, though, though your value should be greater than pretty much anything, right?",
    "start": "3099470",
    "end": "3105680"
  },
  {
    "text": "Because you knew something about the opponent, you played knowing that, having that knowledge. Yes.",
    "start": "3105680",
    "end": "3111350"
  },
  {
    "text": "When you say knowing something about the opponent, is that just knowing that it's asked stochastically or know what it's gonna take? [NOISE]",
    "start": "3111350",
    "end": "3118250"
  },
  {
    "text": "It's knowing what they're going to take. Right? Like here, I knew what they'll point out. I knew that half the time they're going to take this one,",
    "start": "3118250",
    "end": "3123455"
  },
  {
    "text": "half the time you are going to take the other one, and then I use that knowledge, right? Yeah. So you know exactly this? [OVERLAPPING]. Yes. Yeah, yeah, the expectimax.",
    "start": "3123455",
    "end": "3130010"
  },
  {
    "text": "Is the expectimax policy given that your opponent is following Pi min policy- Given that, sorry.",
    "start": "3130010",
    "end": "3136070"
  },
  {
    "text": "Given that your opponent is following Pi min. Is it- do you maximize it?",
    "start": "3136070",
    "end": "3141710"
  },
  {
    "text": "So the expectimax policy is, is this policy when here we have a sum.",
    "start": "3141710",
    "end": "3146990"
  },
  {
    "text": "The expectimax policy, uh, assumes your opponent is following Pi opponent",
    "start": "3146990",
    "end": "3152855"
  },
  {
    "text": "and assumes that it has access to Pi opponent and so it ends up doing this sum over here. Yeah. If Pi opponent is Pi min? Like-",
    "start": "3152855",
    "end": "3159350"
  },
  {
    "text": "Uh, if Pi oppo- I see what you are saying. So you're saying if Pi opponent is actually Pi min, then do they end up being equal to each other in some sense?",
    "start": "3159350",
    "end": "3166309"
  },
  {
    "text": "So yeah, I guess so. Yeah. So if, if you know that the oppo- it becomes minimax, right? If you know your opponent is, is following min,",
    "start": "3166310",
    "end": "3172790"
  },
  {
    "text": "as acting as minimizer or just like call that minimax. All right. So I'm gonna move ahead a little bit.",
    "start": "3172790",
    "end": "3179015"
  },
  {
    "text": "All right so- and then, this is like what we have already talked about. Okay. So a few other things about modifying this game.",
    "start": "3179015",
    "end": "3185450"
  },
  {
    "start": "3182000",
    "end": "3229000"
  },
  {
    "text": "So, so we have- okay so we have talked about this game, we have talked about properties of this game. There is a simple modification one can do which is, bringing nature in.",
    "start": "3185450",
    "end": "3192920"
  },
  {
    "text": "So there was a question earlier which was like, is there any chance here? And then, yeah, you can like actually bring chance inside here.",
    "start": "3192920",
    "end": "3198500"
  },
  {
    "text": "So, so let's say that you have the same game as before, you're choosing one of the three bins. And then, after choosing one of the three bins,",
    "start": "3198500",
    "end": "3205670"
  },
  {
    "text": "you can flip a coin and if heads comes, then you can move one bin to the left, with wraparound.",
    "start": "3205670",
    "end": "3212165"
  },
  {
    "text": "So what this means is 50% of the time, tails comes, you're not changing anything, you have this set up.",
    "start": "3212165",
    "end": "3218150"
  },
  {
    "text": "50% of the time you get heads. And then, in those settings you're just gonna pick like a neighboring bin as opposed to your original bin, okay?",
    "start": "3218150",
    "end": "3225815"
  },
  {
    "text": "So, so the- you're adding this notion of chance here and, and it's kind of acting as a new player, so,",
    "start": "3225815",
    "end": "3231890"
  },
  {
    "start": "3229000",
    "end": "3326000"
  },
  {
    "text": "so it's not actually the making things that much more complicated. So, so what happens is in some sense we have a policy of,",
    "start": "3231890",
    "end": "3237620"
  },
  {
    "text": "of coin which is nature here, right and policy of coin is, half the time I get 0,",
    "start": "3237620",
    "end": "3243305"
  },
  {
    "text": "I don't change anything, half the time I just get the neighboring bin as opposed to my main bin.",
    "start": "3243305",
    "end": "3248765"
  },
  {
    "text": "And then I get this new tree where, where I have like a whole new level for what- where the chance plays.",
    "start": "3248765",
    "end": "3254060"
  },
  {
    "text": "So we have- now we have max nodes, we have min nodes, we also have these chance nodes here.",
    "start": "3254060",
    "end": "3259130"
  },
  {
    "text": "And the chance nodes again, like sometimes they take me to the original bucket and then 50% of the times they take me to a neighboring bucket, okay?",
    "start": "3259130",
    "end": "3266495"
  },
  {
    "text": "But, but the whole story like stays the same, like nothing changes. You can, you can still compute value functions, you can still push the value functions further up.",
    "start": "3266495",
    "end": "3273290"
  },
  {
    "text": "It's the same sort of recurrence. Nothing fundamental changes. Just- it just feels like there are three things playing now, okay?",
    "start": "3273290",
    "end": "3280650"
  },
  {
    "text": "So, so then this is actually called expectiminimax, so a value of expectiminimax here,",
    "start": "3281590",
    "end": "3289609"
  },
  {
    "text": "in this case for example, is minus 2, because there is a mini node for the opponent,",
    "start": "3289610",
    "end": "3295565"
  },
  {
    "text": "there is an expectation node for what nature does, and then there is a max node for what the agent should do.",
    "start": "3295565",
    "end": "3301340"
  },
  {
    "text": "That's why it's called expectiminimax. And then, you can actually compute the same value. So when the game is working out,",
    "start": "3301340",
    "end": "3307400"
  },
  {
    "text": "so there's like two players. I pick a bin then you flip a coin, and then shift it left or not shift it left,",
    "start": "3307400",
    "end": "3315125"
  },
  {
    "text": "and then I get to pick the number? Yes. Well, not you, well the opponent. The opponent. So yeah. So, so there are still two players and then the third coin thing. Yes.",
    "start": "3315125",
    "end": "3323510"
  },
  {
    "text": "[inaudible] All right. So, so yeah. So the way to formalize this is you have players, so you have an agent,",
    "start": "3323510",
    "end": "3330980"
  },
  {
    "start": "3326000",
    "end": "3439000"
  },
  {
    "text": "you have an opponent, you have coin, and then the recurrence changes a little bit I guess.",
    "start": "3330980",
    "end": "3336575"
  },
  {
    "text": "So, so what happens is, the recurrence that we have had for minimax was just the max and",
    "start": "3336575",
    "end": "3341710"
  },
  {
    "text": "min and it would just return us the utility if you're in an End function and in an End-state. Now, if the- if it is the coins term,",
    "start": "3341710",
    "end": "3349230"
  },
  {
    "text": "we just do a sum over, uh, an expected sum of the policy of the coin which is what we were doing in expectiminimax.",
    "start": "3349230",
    "end": "3355910"
  },
  {
    "text": "But, but we just have like a new term for when coin placed. So, so everything here kind of follows naturally in terms of what we were expecting, okay?",
    "start": "3355910",
    "end": "3364650"
  },
  {
    "text": "All right so the summary so far is, uh, what we've been talking about max nodes, we have been talking about chance nodes,",
    "start": "3364650",
    "end": "3370480"
  },
  {
    "text": "like what if you have a coin there and then also these min nodes. Um, and, and basically we've been talking about composing",
    "start": "3370480",
    "end": "3377030"
  },
  {
    "text": "these sort of nodes together and creating like a minimax game or, or an expectimax game.",
    "start": "3377030",
    "end": "3382610"
  },
  {
    "text": "And then value function, uh, we- is- you just do the usual recurrence that we had been doing in this class from the expected utility to,",
    "start": "3382610",
    "end": "3389945"
  },
  {
    "text": "to- from the utility to come up with this expected utility value for all the nodes that we have. So there might be other,",
    "start": "3389945",
    "end": "3396095"
  },
  {
    "text": "other scenarios that you might wanna think about for example, for your projects or like in, in general there are other variations of games that you might wanna think about.",
    "start": "3396095",
    "end": "3403970"
  },
  {
    "text": "So what if, like the case that you are playing with multiple opponents? Like so far we have talked about like a two-players setting where we have",
    "start": "3403970",
    "end": "3409700"
  },
  {
    "text": "one opponent and one agent but what if you have multiple opponents, like you can think about how the tree changes in those settings.",
    "start": "3409700",
    "end": "3415775"
  },
  {
    "text": "Uh, or for example, like the taking turns aspects of it, like is it sim- if, if the game is simultaneous versus your turn-taking, uh,",
    "start": "3415775",
    "end": "3422270"
  },
  {
    "text": "or like you can imagine settings where you have some actions that allow you to have an extra turn.",
    "start": "3422270",
    "end": "3427325"
  },
  {
    "text": "So, so you have two turns. Uh, and then the next person takes t- takes a turn. So, so you should think about some of these,",
    "start": "3427325",
    "end": "3433055"
  },
  {
    "text": "some of them come up in the homework. So, uh, think about variations of games in general.",
    "start": "3433055",
    "end": "3438500"
  },
  {
    "text": "They are kind of fun. So to talk a little bit about the computation aspects of this.",
    "start": "3438500",
    "end": "3443990"
  },
  {
    "start": "3439000",
    "end": "4893000"
  },
  {
    "text": "Um, so this is pretty bad. [LAUGHTER] Right, we talked about a game tree which is similar to tree search.",
    "start": "3443990",
    "end": "3451474"
  },
  {
    "text": "So we are taking a tree search approach. Uh, if you remember tree search,",
    "start": "3451475",
    "end": "3456619"
  },
  {
    "text": "like the algorithms we're using, like if you have branching factor of b and some depth of d then,",
    "start": "3456620",
    "end": "3462950"
  },
  {
    "text": "then in terms of time it's exponential in order of b to the 2d, in this case.",
    "start": "3462950",
    "end": "3468800"
  },
  {
    "text": "So I'm using d for the number of- how do I say this? So, so it's 2d because the play- the,",
    "start": "3468800",
    "end": "3475295"
  },
  {
    "text": "the agent plays and then the opponent plays, so that's how I'm counting it. So every, every 2d like you have 2d plies but d depth.",
    "start": "3475295",
    "end": "3482345"
  },
  {
    "text": "Does that makes sense? All right. And then in terms of space, it's order of d in terms of time,",
    "start": "3482345",
    "end": "3487460"
  },
  {
    "text": "it's exponential that's pretty bad. So for a game of chess for example, the branching factor is around 35,",
    "start": "3487460",
    "end": "3493910"
  },
  {
    "text": "depth is around 50. So if you compute b to the 2d, then it goes in the order of like number of atoms in the universe,",
    "start": "3493910",
    "end": "3502670"
  },
  {
    "text": "that's not doable we should- we are not able to use any of these methods. So, so how do we make thi- things faster?",
    "start": "3502670",
    "end": "3508924"
  },
  {
    "text": "So we should be talking about how to make things faster. So there are two approaches that we are",
    "start": "3508925",
    "end": "3514505"
  },
  {
    "text": "talking about in this class to make things faster. And the first approach is using an evaluation function. So, uh, using an evaluation function and what we can do is you can use domain specific",
    "start": "3514505",
    "end": "3524420"
  },
  {
    "text": "knowledge about the game to define almost like features about the game in order to approximate,",
    "start": "3524420",
    "end": "3530299"
  },
  {
    "text": "like the, the value th- this value function at a particular state. So I'm going to talk about that a little bit.",
    "start": "3530300",
    "end": "3535700"
  },
  {
    "text": "And then, another approach is this approach which is kind of simple and kind of nice which is called alpha-beta pruning.",
    "start": "3535700",
    "end": "3541790"
  },
  {
    "text": "And, and the alpha-beta pruning approach, basically gets rid of part of the tree if it realizes you don't need to go down that tree,",
    "start": "3541790",
    "end": "3548615"
  },
  {
    "text": "that part, that part of the sub-tree. So, so it's a pruning approach that doesn't explore all of the tree only explores parts of the tree.",
    "start": "3548615",
    "end": "3554780"
  },
  {
    "text": "So, so we're going to talk about both of them. All right. So evaluation functions.",
    "start": "3554780",
    "end": "3560270"
  },
  {
    "text": "So let's talk about that. Okay. So the depth can be really like",
    "start": "3560270",
    "end": "3565690"
  },
  {
    "text": "the breadth and depth of the game can be really large. That's not that great. So one approach to go about solving the problem is,",
    "start": "3565690",
    "end": "3573395"
  },
  {
    "text": "is to kind of limit the depth. So instead of like exploring everything in the tree, just limit the depth and,",
    "start": "3573395",
    "end": "3579560"
  },
  {
    "text": "and get to that particular depth. And then after that, when you get to that depth just call an evaluation function.",
    "start": "3579560",
    "end": "3585619"
  },
  {
    "text": "So, so if you were to search the full tree, this was the recursion that, that we had like we have talked about.",
    "start": "3585620",
    "end": "3591365"
  },
  {
    "text": "This was like if you're doing a minimax approach this is the recursion that you gotta do. You gotta go over all the states and actions and,",
    "start": "3591365",
    "end": "3596990"
  },
  {
    "text": "and go over all of the tree. But if you're using a limited depth tree search approach, what you can do is,",
    "start": "3596990",
    "end": "3603775"
  },
  {
    "text": "you can basically have this depth d and then decrement d every time you go",
    "start": "3603775",
    "end": "3609730"
  },
  {
    "text": "over an agent and opponent,  like every time you go down the tree and at some point d just becomes 0,",
    "start": "3609730",
    "end": "3616070"
  },
  {
    "text": "so you get to the po- some particular depth of the tree and when d becomes 0, you're gonna call an evaluation function on the states that you get, okay?",
    "start": "3616070",
    "end": "3624829"
  },
  {
    "text": "And this evaluation function is almost of the same form of, like future costs when we were talking about search problems, right?",
    "start": "3624830",
    "end": "3631910"
  },
  {
    "text": "So, so if you knew exactly what it was, then, then you were done, but you don't know exactly what it is because if,",
    "start": "3631910",
    "end": "3637250"
  },
  {
    "text": "if you knew that we were to solve like the whole, uh, tree search problem. But in general, it can have some sort of weak estimate of, of, um,",
    "start": "3637250",
    "end": "3645694"
  },
  {
    "text": "what, what the future costs would be. So, um, yeah. So, so an evaluation function Eval of s is a weak estimate",
    "start": "3645695",
    "end": "3654410"
  },
  {
    "text": "of V minimax of s. So it's a weak estimate of, of your value function, okay?",
    "start": "3654410",
    "end": "3661440"
  },
  {
    "text": "All right. So, so analogy of that is future costs in search problems.",
    "start": "3661750",
    "end": "3667220"
  },
  {
    "text": "So how do we come up with an evaluation function? So we do it in a similar manner that we had visited in the learning lecture,",
    "start": "3667220",
    "end": "3674840"
  },
  {
    "text": "where we're coming up with, with features and, and weights for those features, right. So, so if I'm playing like chess,",
    "start": "3674840",
    "end": "3680960"
  },
  {
    "text": "and like the way we play it, right, like we think about a set of actions that we can take and where we end up at and,",
    "start": "3680960",
    "end": "3686650"
  },
  {
    "text": "and based on where we end up at um, then you kind of evaluate how good that board is, right.",
    "start": "3686650",
    "end": "3691839"
  },
  {
    "text": "You have some notions of features, and how good looking- like how good that board would be from that point on.",
    "start": "3691840",
    "end": "3697315"
  },
  {
    "text": "And that allows us to evaluate what action to pick, right, like when we play chess that's kind of what we do. We pick a couple of actions and we see how the board would look like after taking them.",
    "start": "3697315",
    "end": "3705954"
  },
  {
    "text": "An evaluation function kind of does the same thing, it tries to figure out what are the things said we should care about in a specific game,",
    "start": "3705955",
    "end": "3712025"
  },
  {
    "text": "in this case in chess and tries to give values to them. So, so it might be things like the number of pieces we have,",
    "start": "3712025",
    "end": "3719060"
  },
  {
    "text": "or mobility of those pieces, or if our king is safe, or if we have central control or not.",
    "start": "3719060",
    "end": "3724100"
  },
  {
    "text": "So, so for example, for the pieces what we can do is, we can look at the difference between the number of",
    "start": "3724100",
    "end": "3729380"
  },
  {
    "text": "pieces we have between what we have and what our opponent has. So number of kings that I have versus number of opponents that I have.",
    "start": "3729380",
    "end": "3735500"
  },
  {
    "text": "Well, that seems really important thing because if I don't have a king and our opponent has a king then [LAUGHTER] I've lost the game.",
    "start": "3735500",
    "end": "3741740"
  },
  {
    "text": "So, so you might put like a really large weight for that and you might care about like differences between the number of pawns,",
    "start": "3741740",
    "end": "3748010"
  },
  {
    "text": "or number queens and other types of pieces that you have on the board. So, so that allows you to care about- to think about how good the board is,",
    "start": "3748010",
    "end": "3756410"
  },
  {
    "text": "or number of legal moves that you have and the number of legal moves that your opponent has, and then that gives you some notion of like mobility of that state.",
    "start": "3756410",
    "end": "3764839"
  },
  {
    "text": "Okay. All right. So um, so summary so far is- yeah,",
    "start": "3764840",
    "end": "3771290"
  },
  {
    "text": "so this is pretty bad, order of B to the 2D is pretty bad, and an evaluation function basically tries to estimate",
    "start": "3771290",
    "end": "3777755"
  },
  {
    "text": "this V minimax using some domain knowledge. And unlike A star, we actually don't have any guarantees in terms of",
    "start": "3777755",
    "end": "3784940"
  },
  {
    "text": "like error from these sort of approximations. So um, but it's an approximation, people use it, it's pretty good.",
    "start": "3784940",
    "end": "3791825"
  },
  {
    "text": "We will talk about it a little bit later next time when, when we think about like how- what sort of weights we should,",
    "start": "3791825",
    "end": "3798860"
  },
  {
    "text": "we should pick for each one of these, for each one of these features. So you should think learning when you think",
    "start": "3798860",
    "end": "3804380"
  },
  {
    "text": "about what are the weights we are using. All right. So- okay, so now I want to spend a bit of time",
    "start": "3804380",
    "end": "3810619"
  },
  {
    "text": "on alpha-beta pruning because this is- yeah, important. Okay. So alpha-beta pruning.",
    "start": "3810620",
    "end": "3818135"
  },
  {
    "text": "Yeah. The concept of alpha-beta pruning is also pretty simple, but I think it's one of those things that was- it was kind",
    "start": "3818135",
    "end": "3823930"
  },
  {
    "text": "of that table you should pay attention to, to kind of get what it is happening. All right. So, so let's say that you want to choose between some bucket A and bucket B.",
    "start": "3823930",
    "end": "3835070"
  },
  {
    "text": "Okay, and you want to choose the maximum value, and then you know that the values of A fall into like 3 to 5,",
    "start": "3835070",
    "end": "3841415"
  },
  {
    "text": "and the values of B fall into 5 to 10. So, so they don't really have like any, any intersections between each other.",
    "start": "3841415",
    "end": "3847790"
  },
  {
    "text": "So, so in that case, you don't really care about your, your- if you're picking a maximum right, you shouldn't care about your bucket A,",
    "start": "3847790",
    "end": "3854660"
  },
  {
    "text": "or rest of your bucket A right, because you already know that you are above 5, you are happy with B, you shouldn't even look at A.",
    "start": "3854660",
    "end": "3860900"
  },
  {
    "text": "So, so kind of the, the underlying concept of, of um, alpha-beta pruning is,",
    "start": "3860900",
    "end": "3867080"
  },
  {
    "text": "is maintaining a lower bound and upper bound on values, and then if the intervals don't overlap then basically",
    "start": "3867080",
    "end": "3873470"
  },
  {
    "text": "dropping part of the sub-tree that you don't need to work on because there is, there is no overlap between them.",
    "start": "3873470",
    "end": "3879214"
  },
  {
    "text": "Okay. So here's an example, so let's say we have these max nodes and",
    "start": "3879215",
    "end": "3884450"
  },
  {
    "text": "min nodes and you're going to go down and see 3, and then this is a min node so,",
    "start": "3884450",
    "end": "3889549"
  },
  {
    "text": "so you're going to get 3 here. So when I get to the max node here, right, I- what, what,",
    "start": "3889550",
    "end": "3895640"
  },
  {
    "text": "I know is that the max node is going to get 3 or higher, right. That- that's one thing that I would know without",
    "start": "3895640",
    "end": "3902480"
  },
  {
    "text": "even looking at anything on the, on the other side, without even looking at the sub-tree on the left,",
    "start": "3902480",
    "end": "3907550"
  },
  {
    "text": "I already know that this max node should get 3 or higher, right. Does everybody already agree with that? Okay. So, so then",
    "start": "3907550",
    "end": "3915170"
  },
  {
    "text": "when I go down to this min node and I see 2 here, right, I know this is a min node,",
    "start": "3915170",
    "end": "3920839"
  },
  {
    "text": "it's going to get a value that's less than or equal to 2. Less than or equal to 2 does not have any interval with greater than or equal to 3,",
    "start": "3920840",
    "end": "3930260"
  },
  {
    "text": "so I should not worry about that sub-tree. Does everyone see see that? So maybe you'll like let me draw it out here.",
    "start": "3930260",
    "end": "3938620"
  },
  {
    "text": "[NOISE] So that's kind of like the whole concept of what happens in alpha-beta pruning.",
    "start": "3938620",
    "end": "3946990"
  },
  {
    "text": "So I have this max node,",
    "start": "3946990",
    "end": "3952345"
  },
  {
    "text": "this was three, this was what- five. I found that the guy is 3,",
    "start": "3952345",
    "end": "3958030"
  },
  {
    "text": "this is a max node. Whatever it gets, it- it's going to be greater than or equal to 3 because,",
    "start": "3958030",
    "end": "3964040"
  },
  {
    "text": "because it's already seen 3, it's not gonna get any value less than 3, right. So, so we know whatever value we are going to get at",
    "start": "3964040",
    "end": "3970010"
  },
  {
    "text": "this max node is going to be 3 or higher. Okay. Then I'm going to go down here,",
    "start": "3970010",
    "end": "3976235"
  },
  {
    "text": "and then I see two here, right, It's a min node whatever it gets is going to be less than or equal to 2.",
    "start": "3976235",
    "end": "3983630"
  },
  {
    "text": "So less than or equal to 2 is the value that's going to get popped up here.",
    "start": "3983630",
    "end": "3990500"
  },
  {
    "text": "I already know less than or equal to 2 has no interval with 3 or greater.",
    "start": "3990500",
    "end": "3995930"
  },
  {
    "text": "So I don't even need to worry about this like I, like I can completely ignore this side of the 3,",
    "start": "3995930",
    "end": "4000970"
  },
  {
    "text": "I don't need to know whatever is happening down here, I don't even need to look at that. Okay. Because, because I- like this value should be greater than and equal to 2. Yes.",
    "start": "4000970",
    "end": "4009445"
  },
  {
    "text": "All right, we should get a value greater than or equal to 8. Sorry.",
    "start": "4009445",
    "end": "4014470"
  },
  {
    "text": "[inaudible] It's minimum- so it's a minimum,",
    "start": "4014470",
    "end": "4020335"
  },
  {
    "text": "it's a minimum node, right. So it's going to be less than or equal [NOISE] to- right.",
    "start": "4020335",
    "end": "4026305"
  },
  {
    "text": "Yeah. It's a min node, so I still have to,  if I see 10 here or 20 here,",
    "start": "4026305",
    "end": "4032680"
  },
  {
    "text": "like I'm not going to pick that, like it's 2 or lower.",
    "start": "4032680",
    "end": "4037750"
  },
  {
    "text": "All right. So yeah- so if it is 10,",
    "start": "4037750",
    "end": "4042970"
  },
  {
    "text": "or 100, or whatever sub-tree it is there like we're not going to look at that. So, so that, that is kind of the whole concept.",
    "start": "4042970",
    "end": "4049450"
  },
  {
    "text": "Um, All right. So- okay. Let me actually go to this slide, I think this would be.",
    "start": "4049450",
    "end": "4056215"
  },
  {
    "text": "So the key idea of alpha-beta pruning is as we are- with the optimal path is going to get to some leaf node that has some utility,",
    "start": "4056215",
    "end": "4063820"
  },
  {
    "text": "and that utility is the thing that is going to be pushed up, right, like- and then the interesting thing is if you pick the optimal path,",
    "start": "4063820",
    "end": "4072220"
  },
  {
    "text": "the value of the nodes on that optimal path are all going to be equal to each other, right, like they're the- basically the utility that you are going",
    "start": "4072220",
    "end": "4079450"
  },
  {
    "text": "to get pushed up all the way to the top. So, so because of that like we need to have like these, these like we,",
    "start": "4079450",
    "end": "4086740"
  },
  {
    "text": "we can't have settings where we don't have any intersections between the intervals because we know if this is,",
    "start": "4086740",
    "end": "4092590"
  },
  {
    "text": "if this were to be the optimal path, the value on this node should have been the same as the value at this node- the same as the value at this node and, and so on.",
    "start": "4092590",
    "end": "4100690"
  },
  {
    "text": "So if they don't have any intervals then no way that they would have the same value, and no way for that path to be the optimal path.",
    "start": "4100690",
    "end": "4107739"
  },
  {
    "text": "Okay. So, so that's kind of the reason that it works because the optimal path you're going to have the same value throughout.",
    "start": "4107740",
    "end": "4113799"
  },
  {
    "text": "Okay. So-all right so how do we actually do this? So the way we do this, is we're going to keep a lower bound on max nodes, so I'm going to call it that a_s.",
    "start": "4113800",
    "end": "4123205"
  },
  {
    "text": "Let me [NOISE] get this up here. So we are going to have a_s which is a lower bound on max nodes.",
    "start": "4123205",
    "end": "4136910"
  },
  {
    "text": "So we're going to keep track of that. We're also going to keep track of b_s,",
    "start": "4137580",
    "end": "4143275"
  },
  {
    "text": "which is an upper bound on min nodes.",
    "start": "4143275",
    "end": "4149509"
  },
  {
    "text": "Okay. And then if they don't have any intervals, we just drop that sub-tree.",
    "start": "4150570",
    "end": "4156700"
  },
  {
    "text": "If they have intervals we just keep updating a_s and b_s. Okay. So, so here's an example,",
    "start": "4156700",
    "end": "4161920"
  },
  {
    "text": "so let's say that we start with this top node. Somehow we have found out that this top node",
    "start": "4161920",
    "end": "4166960"
  },
  {
    "text": "should be greater than or equal to 6, right. Somehow I know it should be greater than or equal to 6.",
    "start": "4166960",
    "end": "4174069"
  },
  {
    "text": "Okay. So that is my a_s value. So my a_s is equal to 6, it,",
    "start": "4174070",
    "end": "4181270"
  },
  {
    "text": "it is, it is going to be a lower bound on my max nodes. I know the, the valued- optimal value",
    "start": "4181270",
    "end": "4188109"
  },
  {
    "text": "is going to be something greater than or equal to 6. Okay. Then somehow we get to this min node,",
    "start": "4188110",
    "end": "4193540"
  },
  {
    "text": "and then we realized that this min node should be less than or equal to 8. So you're here, let's say 8 is here,",
    "start": "4193540",
    "end": "4202179"
  },
  {
    "text": "we still have some interval, we're all good, right, so b_s is going to be equal to 8, right,",
    "start": "4202180",
    "end": "4208724"
  },
  {
    "text": "we have an upper bound on the min node, and that tells us that upper bound is 8. So the, the valued- optimal",
    "start": "4208725",
    "end": "4214920"
  },
  {
    "text": "value- the value and optimal path is going to be less than or equal to 8. Okay. So far so good.",
    "start": "4214920",
    "end": "4221844"
  },
  {
    "text": "Then somehow I found out that that one is greater than or equal to 3. Greater than or equal to 3 should be fine, right,",
    "start": "4221845",
    "end": "4229389"
  },
  {
    "text": "greater than or equal to 3 is still greater than or equal to 6, my a_s in this case,",
    "start": "4229390",
    "end": "4235285"
  },
  {
    "text": "I'm going to call this S1, S2, and S3 is equal to 3,",
    "start": "4235285",
    "end": "4241135"
  },
  {
    "text": "right, because I know I need to be greater than or equal to 3. But like 6 already does the job, right, like I don't need to worry about that 3.",
    "start": "4241135",
    "end": "4247840"
  },
  {
    "text": "So, so that's all, good so far. And then for this last node, I am at this min node,",
    "start": "4247840",
    "end": "4253090"
  },
  {
    "text": "and I realize that b_s4, I'm going to call it b_s4,",
    "start": "4253090",
    "end": "4258369"
  },
  {
    "text": "is equal to 5. And what this tells me is that your value should be less than 5 and less than 5.",
    "start": "4258369",
    "end": "4266199"
  },
  {
    "text": "So I'm going to update less than 8 to less than 5.",
    "start": "4266200",
    "end": "4270860"
  },
  {
    "text": "And now, we don't have any in- intervals. So what that tells me is that path is not going to be the optimal path,",
    "start": "4272400",
    "end": "4279070"
  },
  {
    "text": "because there is no intervals. So- so we're not going to find this- this one number that is going to be the utility.",
    "start": "4279070",
    "end": "4284755"
  },
  {
    "text": "And what that tells me is, I can actually ignore that whole sub-tree because- because that's not going to be in- my- my optimal path,",
    "start": "4284755",
    "end": "4290815"
  },
  {
    "text": "I can- I can get rid of it, I can ignore it, okay. Yes.",
    "start": "4290815",
    "end": "4296110"
  },
  {
    "text": "We also ignore 3 if, uh, the beta is equal to alpha, if we already have something else, is that not the same thing?",
    "start": "4296110",
    "end": "4301840"
  },
  {
    "text": "Yeah. So- so we're ignoring 3 in a different way. I- I- so- so yeah- so we're ignoring the value",
    "start": "4301840",
    "end": "4307240"
  },
  {
    "text": "of 3 because this is already encoded here. But we're ignoring the subtree of 5, like I'm not exploring it.",
    "start": "4307240",
    "end": "4313185"
  },
  {
    "text": "Like I need to explore things after the 3 already, because I- like- like- like with the 3 we already had an overlap with the Beta.",
    "start": "4313185",
    "end": "4320320"
  },
  {
    "text": "So you're looking at- with the b value- we are looking at the overlap between your upper bound of min node and lower bound of max node.",
    "start": "4320320",
    "end": "4327550"
  },
  {
    "text": "So that interval is the interval you're making sure it still has values in it. One example of, uh, if the two or three extend;",
    "start": "4327550",
    "end": "4334930"
  },
  {
    "text": "do you just ignore them anyway because you already had something else that's- that's [OVERLAPPING] is that optimal?",
    "start": "4334930",
    "end": "4341650"
  },
  {
    "text": "Yeah, yeah. So, uh, yeah, I think so. Yeah, so- so if you already have like, if 3 were 2, is that what you're saying?",
    "start": "4341650",
    "end": "4347845"
  },
  {
    "text": "Yeah so- so- th- you want to have non-trivial intervals basically, yes. Yeah. So like if- if- if- it is the same value- you still- yeah,",
    "start": "4347845",
    "end": "4356215"
  },
  {
    "text": "you don't have non-trivial intervals. And- and yeah question. I was wondering how we got 6 and 8 and 3.",
    "start": "4356215",
    "end": "4362440"
  },
  {
    "text": "Oh, this is an example of that, imagine somehow [NOISE]. But we- we will talk about some examples whe- where we get them.",
    "start": "4362440",
    "end": "4368500"
  },
  {
    "text": "So I'll talk about one more example where we actually like get these, but for now just assume somehow we have found this. Yes.",
    "start": "4368500",
    "end": "4374935"
  },
  {
    "text": "Um, on the top example, I don't understand why, uh, 3 is an upper bound or 2 is a lower bound.",
    "start": "4374935",
    "end": "4382960"
  },
  {
    "text": "So, um, so the- the actual values, um, I'm not showing a full example here.",
    "start": "4382960",
    "end": "4389620"
  },
  {
    "text": "So the actual values are coming from somewhere that I'm not talking about yet but- [OVERLAPPING]",
    "start": "4389620",
    "end": "4394930"
  },
  {
    "text": "[inaudible] Oh, the one at the top. Okay, oh sorry. Yeah. So the one at the top right?",
    "start": "4394930",
    "end": "4400135"
  },
  {
    "text": "So- so this is a min node, a min node, this is a max node, right? So at my min node,",
    "start": "4400135",
    "end": "4406150"
  },
  {
    "text": "I found out that minimum between 3 and 5 is 3, right? So max node is maximizing between 3 and a bunch of other things.",
    "start": "4406150",
    "end": "4414715"
  },
  {
    "text": "That- that's what it is supposed to do, right? So it's maximizing between 3 and a bunch of other things,",
    "start": "4414715",
    "end": "4420130"
  },
  {
    "text": "then it's at least going to be 3. It's not going to be 2, there is no way for it to be 2 or it's not going to be 0, right?",
    "start": "4420130",
    "end": "4426070"
  },
  {
    "text": "Because it's- it's going to take maximum of 3 and something else. So that's why I'm saying, well this value whatever I'm going to get at this max node is going",
    "start": "4426070",
    "end": "4434260"
  },
  {
    "text": "to be greater than or equal to 3. Does that make sense? So now I come down here, and I see like,",
    "start": "4434260",
    "end": "4440440"
  },
  {
    "text": "I see this 2; this is a min node. So the value here is going to be the minimum between",
    "start": "4440440",
    "end": "4446710"
  },
  {
    "text": "2 and whatever is down this tree, right? So it is going to be at least,",
    "start": "4446710",
    "end": "4454105"
  },
  {
    "text": "uh, I'm very bad with that, the least, and the most. It's going to be- [LAUGHTER] it's going to be 2 or lower. Let me just use that.",
    "start": "4454105",
    "end": "4460389"
  },
  {
    "text": "So- so what we are getting here is going to be 2 or lower, right? So I'm either going to get 2 or 1 or 0 or- or all that.",
    "start": "4460390",
    "end": "4468295"
  },
  {
    "text": "And that's the value that's going to be pushed up here, right? So that's the value that's going to go down here,",
    "start": "4468295",
    "end": "4474520"
  },
  {
    "text": "it's going to be a value that is 2 or lower. So if I'm maximizing between 3 and something that is 2 or lower,",
    "start": "4474520",
    "end": "4483505"
  },
  {
    "text": "then 3 is enough. And I can like, kind of figure that out based on these intervals and don't look at this side of the tree.",
    "start": "4483505",
    "end": "4489310"
  },
  {
    "text": "Like- like once I've- I've seen these two, I already feel there is no- no trivial interval",
    "start": "4489310",
    "end": "4495175"
  },
  {
    "text": "between a value that's greater than 3 and a value that's less than 2. So I can just not worry about stuff down there.",
    "start": "4495175",
    "end": "4502045"
  },
  {
    "text": "Okay. All right. So one quick other implementation,",
    "start": "4502045",
    "end": "4507910"
  },
  {
    "text": "I think is we talked about these A's, A values and B values.",
    "start": "4507910",
    "end": "4513520"
  },
  {
    "text": "You can- on- keep track of only one value. And that would be this Alpha value and Beta value,",
    "start": "4513520",
    "end": "4518575"
  },
  {
    "text": "where Alpha value is just -I'm going to illustrate it here. Alpha value- let me get it right.",
    "start": "4518575",
    "end": "4524199"
  },
  {
    "text": "So Alpha of s is the max of a_s for all these s primes that are less than s. Yeah.",
    "start": "4524200",
    "end": "4533380"
  },
  {
    "text": "So- so- is what this basically says is, remember like when we saw 3 we said, \"Well, that's already included, like we already knew that.\"",
    "start": "4533380",
    "end": "4540125"
  },
  {
    "text": "That's kind of the same idea. So Alpha of s is just going to be one value. In this case, it's just going to be 6,",
    "start": "4540125",
    "end": "4546330"
  },
  {
    "text": "because like when I see 3, like I don't really care about that 3, right? Like I already know I'm greater than 6,",
    "start": "4546330",
    "end": "4551344"
  },
  {
    "text": "knowing that I'm greater than 3 is not adding anything. So we keep track of one value; Alpha of a- al- Alpha of s. In this case,",
    "start": "4551345",
    "end": "4558489"
  },
  {
    "text": "Alpha of s is just equal to 6. And then similar thing for Beta.",
    "start": "4558490",
    "end": "4563545"
  },
  {
    "text": "We're going to keep track of Beta of s, and Beta of s is just minimum of b_s's.",
    "start": "4563545",
    "end": "4570620"
  },
  {
    "text": "And then, what I'm writing here is just the ordering of the nodes that you have seen. So- so Beta of s is 5.",
    "start": "4570750",
    "end": "4579175"
  },
  {
    "text": "And then, you're looking at the intervals like Alpha of s, uh, and s- Alpha of s and above,",
    "start": "4579175",
    "end": "4585340"
  },
  {
    "text": "and Beta of s and below. And if those intervals don't have any trivial intersections, then you can- you can prune part of the tree.",
    "start": "4585340",
    "end": "4592105"
  },
  {
    "text": "Okay. So- so this is more of an- an implementation thing instead of keeping track of all these a_s's and b_s's just keep one number,",
    "start": "4592105",
    "end": "4598120"
  },
  {
    "text": "one Alpha and one Beta. Okay. All right. Okay. So let's look at one- one other example.",
    "start": "4598120",
    "end": "4606175"
  },
  {
    "text": "Uh, so all right. So I'm going to just do this example real quick.",
    "start": "4606175",
    "end": "4611425"
  },
  {
    "text": "Okay. So you're going to start from some top node, we're gonna go to this node,",
    "start": "4611425",
    "end": "4617950"
  },
  {
    "text": "this is a min node between 9 and 7. Between 9 and 7 right?",
    "start": "4617950",
    "end": "4624159"
  },
  {
    "text": "So it's a min node, I'm going to get this guy; 7. I'm going to realize that this max node is going to be something that's at least 7, right?",
    "start": "4624160",
    "end": "4632770"
  },
  {
    "text": "It's going to be something that's greater than or equal to 7. So my Alpha of s is going to be 7 right now.",
    "start": "4632770",
    "end": "4639670"
  },
  {
    "text": "I know whatever value I'm going to get is going to be 7 or higher. Whatever value this start node is going to get,",
    "start": "4639670",
    "end": "4645220"
  },
  {
    "text": "It's got to be 7 or higher, okay? So now I come down here, I am at a min node.",
    "start": "4645220",
    "end": "4651220"
  },
  {
    "text": "I see a 6 here, right? I go here, it's a min node, so whatever we get here,",
    "start": "4651220",
    "end": "4657415"
  },
  {
    "text": "is going to be less than or equal to 6, right? So it's going to be 6 or something that is lower.",
    "start": "4657415",
    "end": "4663850"
  },
  {
    "text": "That tells me my Beta of s is equal to 6. That tells me whatever I am getting in that min node is going to be 6 and lower.",
    "start": "4663850",
    "end": "4672460"
  },
  {
    "text": "That doesn't have any intersections with my Alpha of s. So I can just not do anything about this- this branch.",
    "start": "4672460",
    "end": "4679690"
  },
  {
    "text": "Like I don't- like I don't need to go over like- like I know like all these other things like, I can kind of ignore like this whole branch.",
    "start": "4679690",
    "end": "4687370"
  },
  {
    "text": "Okay. All right. So now I go back up. I go down here, I'm at the min node.",
    "start": "4687370",
    "end": "4695574"
  },
  {
    "text": "So remember the way we were computing these Beta values, were based on the nodes that we have seen previously.",
    "start": "4695575",
    "end": "4701140"
  },
  {
    "text": "So I have a new Beta now because I'm done with this branch, right. So I- I need to get here. Here I have a min between- what is it?",
    "start": "4701140",
    "end": "4707695"
  },
  {
    "text": "8. This Is 8? 8 and 3. So okay.",
    "start": "4707695",
    "end": "4712870"
  },
  {
    "text": "So- so I see my- maybe let me just write 8. I see my 8 here, it's a min node, so it's going to be less than or equal to 8.",
    "start": "4712870",
    "end": "4719725"
  },
  {
    "text": "So my new Beta value is going to be 8. My Alpha is still 7 because that's for my top node.",
    "start": "4719725",
    "end": "4728110"
  },
  {
    "text": "So its 8 or lower. We do have an interval, overlapping interval, 7 to 8.",
    "start": "4728110",
    "end": "4734380"
  },
  {
    "text": "Everything is good. So I actually need to go and see what this value is. This value is 3,",
    "start": "4734380",
    "end": "4740815"
  },
  {
    "text": "so I get 3 here, or like, it's exactly equal to 3. So that updates my Beta from 8 to 3.",
    "start": "4740815",
    "end": "4749800"
  },
  {
    "text": "We have already explored that part of the tree anyways, but 3- you don't have an interval.",
    "start": "4749800",
    "end": "4755320"
  },
  {
    "text": "If there were a bunch of things below this three like I- I like when I somehow decide, like I wouldn't need to explore it,",
    "start": "4755320",
    "end": "4761005"
  },
  {
    "text": "but we don't really have that. And then we just find that our optimal value is 7, so we just return 7, okay.",
    "start": "4761005",
    "end": "4767560"
  },
  {
    "text": "And we didn't explore this giant middle part of the tree. Okay. One more slide and then I'll- two more- two more quick, one quick idea.",
    "start": "4767560",
    "end": "4777264"
  },
  {
    "text": "Okay. So [LAUGHTER] All right. So the order of things actually matters, so- so that the only thing I want to mention about",
    "start": "4777265",
    "end": "4783460"
  },
  {
    "text": "this idea of pruning is- is the order of things matters. So- so when we look at this example, remember we didn't explore anything about the 10,",
    "start": "4783460",
    "end": "4789940"
  },
  {
    "text": "because we already knew that this value needs to be greater than or equal to 3. These are my buckets, right?",
    "start": "4789940",
    "end": "4795070"
  },
  {
    "text": "If I swap the buckets, like if I just swap the order of buckets, I move the 2-10 bucket to this side, 3-5 bucket to the other side,",
    "start": "4795070",
    "end": "4801864"
  },
  {
    "text": "I wouldn't be able to do that. I actually need to explore the whole tree, because my Alphas and Beta wouldn't have the same properties.",
    "start": "4801865",
    "end": "4808890"
  },
  {
    "text": "So the order that you are putting things on the tree actually matters and- and you should care about that.",
    "start": "4808890",
    "end": "4814215"
  },
  {
    "text": "Um, so worse case scenario, our ordering is terrible, so we need to actually go over the full tree that's order of b to the 2d.",
    "start": "4814215",
    "end": "4821310"
  },
  {
    "text": "That's the worst-case scenario. There is this best ordering where you don't explore like half of it.",
    "start": "4821310",
    "end": "4827080"
  },
  {
    "text": "So- so you can- like if you- if you had- if you have a tree where you can explore up to depth 10,",
    "start": "4827080",
    "end": "4833920"
  },
  {
    "text": "then with the best ordering, you can actually explore up to depth like 20. So- so that's a huge improvement actually.",
    "start": "4833920",
    "end": "4840070"
  },
  {
    "text": "Uh, so the best ordering is going to be order of b to the d. And then random ordering turns out to be pretty okay too,",
    "start": "4840070",
    "end": "4847540"
  },
  {
    "text": "so random ordering would be order of b to the 2 times 3 fourth times d. So even if you had the random ordering,",
    "start": "4847540",
    "end": "4854020"
  },
  {
    "text": "it would be better than the worst case scenario. And then, well, how do you figure out what is a good bordering- ordering?",
    "start": "4854020",
    "end": "4859990"
  },
  {
    "text": "Well, we can have this evaluation function. Remember you- you are computing the evaluation function and- and what you can do is,",
    "start": "4859990",
    "end": "4866020"
  },
  {
    "text": "you can order, uh, your- so for max nodes, you can order the successors by decreasing evaluation function,",
    "start": "4866020",
    "end": "4872620"
  },
  {
    "text": "and therefore, min nodes you can order the successors by increasing the evaluation functions. That allows you to prune as much things as possible. All right.",
    "start": "4872620",
    "end": "4881530"
  },
  {
    "text": "So with that I'll see you guys next lecture talking about TD learning.",
    "start": "4881530",
    "end": "4887179"
  }
]