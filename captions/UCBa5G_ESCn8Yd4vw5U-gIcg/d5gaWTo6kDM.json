[
  {
    "text": "Welcome back, everyone. I hope you had a good Thanksgiving. Um, I actually didn't ask, I'm not sure why this chair is here.",
    "start": "3470",
    "end": "9705"
  },
  {
    "text": "All right. Let's get rid of this. Um, by the way, not sure- um, thanks, Anand.",
    "start": "9705",
    "end": "14880"
  },
  {
    "text": "I'm not sure if you guys are following the news, but in, in reinforcement learning, we chat a lot about robotics, right?",
    "start": "14880",
    "end": "20820"
  },
  {
    "text": "And one of the, you know, uh, constant problems a lot of people use reinforcement learning to solve is robotics and,",
    "start": "20820",
    "end": "27345"
  },
  {
    "text": "um, I think, ah, uh, back in May, um, the InSight Mars lander had launched from, um,",
    "start": "27345",
    "end": "33915"
  },
  {
    "text": "here in California and it's about to make an attempt at landing on the planet Mars in the next 2.5 hours or so,",
    "start": "33915",
    "end": "39899"
  },
  {
    "text": "so excited about that, uh, I think that is actually one of the grandest, um, applications of robotics because, you know,",
    "start": "39900",
    "end": "46800"
  },
  {
    "text": "with a- with 20 minute light-speed from Earth to Mars, you know, once it starts its landing, there is nothing anyone on Earth can do and so I think that's",
    "start": "46800",
    "end": "54480"
  },
  {
    "text": "one of the most exciting applications of autonomous robotics. When you launch this thing, it's now about 20, 20 light minutes away from planet Earth,",
    "start": "54480",
    "end": "61460"
  },
  {
    "text": "so you actually can't control it in real time, uh, and you just have to hope like crazy that your software",
    "start": "61460",
    "end": "66635"
  },
  {
    "text": "works well enough for it to land on this planet, you know. Uh, and then so we, we will find out a little bit",
    "start": "66635",
    "end": "72900"
  },
  {
    "text": "afternoon if the landing happened successfully or not. I, I think, um, so I,",
    "start": "72900",
    "end": "78105"
  },
  {
    "text": "I just get excited about stuff like this, I, I hope you guys do too. And for those of you that are from California, I mean,",
    "start": "78105",
    "end": "83330"
  },
  {
    "text": "take some pride that it launched from the home state of California and, and is now nearing its, er, landing on Mars.",
    "start": "83330",
    "end": "89240"
  },
  {
    "text": "Okay, um, all right. So, um, what I wanna do today is,",
    "start": "89240",
    "end": "95759"
  },
  {
    "text": "uh, continue our discussion on reinforcement learning. Do a quick recap of the MDP or the Markov decision process framework.",
    "start": "95760",
    "end": "105299"
  },
  {
    "text": "Um, and then we'll start to talk about algorithms for solving MDPs. In particular, we need to define, uh,",
    "start": "105300",
    "end": "111765"
  },
  {
    "text": "something called the value function which tells you how good it is to be in different states of the MDP and then, um,",
    "start": "111765",
    "end": "120280"
  },
  {
    "text": "we'll define the value function and then talk about an algorithm called value iteration for computing the value function",
    "start": "120280",
    "end": "126350"
  },
  {
    "text": "and this will help us figure out how to actually find a good controller or find a good policy for an MDP,",
    "start": "126350",
    "end": "132879"
  },
  {
    "text": "and then we'll wrap up with our learning state transition probabilities and how to put all these together into an actual reinforcement learning algorithm that you can implement.",
    "start": "132880",
    "end": "142115"
  },
  {
    "text": "Um, to recap, um, our motivating example- running example from the last time,",
    "start": "142115",
    "end": "148260"
  },
  {
    "text": "from before Thanksgiving was, uh, this 11-state MDP. And we said that an MDP comprises a five tuple,",
    "start": "148260",
    "end": "156055"
  },
  {
    "text": "a lists of five things with, er, states. So that example had 11 states.",
    "start": "156055",
    "end": "161394"
  },
  {
    "text": "Um, actions, and in this example the actions were the compass directions; North, South, East, and West,",
    "start": "161395",
    "end": "167500"
  },
  {
    "text": "I can try to go in each of the four compass directions. The state transition probabilities and in the example,",
    "start": "167500",
    "end": "173194"
  },
  {
    "text": "if the robot attempts to go North, it has an 80% chance of heading North and a 0.1%",
    "start": "173194",
    "end": "179380"
  },
  {
    "text": "chance of veering off to the left and a 0.1 chance of veering off to the right. Um, Gamma is a number slightly less than 1,",
    "start": "179380",
    "end": "188579"
  },
  {
    "text": "um, usually slightly less than 1, there is a discount factor, think of this as 0.99, um and R is the reward function that helps us specify where we want the robot to end up.",
    "start": "188580",
    "end": "202175"
  },
  {
    "text": "Um, and so what we said last time was that, um, the way an MDP works is you start off in some state S_0,",
    "start": "202175",
    "end": "210095"
  },
  {
    "text": "um, this one's much better, you choose an action, uh, a_0, and as a result of that,",
    "start": "210095",
    "end": "215880"
  },
  {
    "text": "it transitions to a new state, S_1, which is drawn according to P_s_0 a_0. Um, and then you choose a new action a_1 and as a result",
    "start": "215880",
    "end": "225890"
  },
  {
    "text": "the MDP transitions to some new state P_s_1 a_1,",
    "start": "225890",
    "end": "232715"
  },
  {
    "text": "um, and the total payoff is the sum of rewards, right?",
    "start": "232715",
    "end": "243150"
  },
  {
    "text": "Um, and the goal is to come up with a way, um,",
    "start": "243150",
    "end": "248750"
  },
  {
    "text": "and formally the goal is to come up with a policy, Pi,",
    "start": "248750",
    "end": "254475"
  },
  {
    "text": "which is a mapping from the states to the actions, uh, that will tell you how to choose actions from whatever stage you are in so that",
    "start": "254475",
    "end": "262730"
  },
  {
    "text": "the policy maximizes the expected value of the total payoff, okay?",
    "start": "262730",
    "end": "268230"
  },
  {
    "text": "Um, and so I think last time I, I kinda claimed that this is the optimal policy for this MDP, right?",
    "start": "268230",
    "end": "280825"
  },
  {
    "text": "Um, and what this means for example is, if you look at this state, um,",
    "start": "280825",
    "end": "286550"
  },
  {
    "text": "this policy is telling you that Pi of 3, 1 equals,",
    "start": "286550",
    "end": "292490"
  },
  {
    "text": "uh, West, I guess, or you can write West or left, well, what do you call that left arrow, right,",
    "start": "292490",
    "end": "297750"
  },
  {
    "text": "where from this state, um, from the state 3,1, you know,",
    "start": "297750",
    "end": "303175"
  },
  {
    "text": "the best action to take is to go left, it's to go West. And so if you're executing this policy what that means is that, um,",
    "start": "303175",
    "end": "311315"
  },
  {
    "text": "on every step the action you choose would be, you know, Pi, right, of the,",
    "start": "311315",
    "end": "316850"
  },
  {
    "text": "the state that you're in, okay? So, um, what I'd like to do is now,",
    "start": "316850",
    "end": "323070"
  },
  {
    "text": "uh, to find the value function. So, how, how, how, how did I come up with this, right? Well, what I'd like to do is, have you,",
    "start": "323070",
    "end": "329729"
  },
  {
    "text": "um, learn given an MDP, given this five tuple, how do you compute the optimal policy?",
    "start": "329730",
    "end": "337574"
  },
  {
    "text": "And one of the challenges with, um, finding the optimal policy is that, you know,",
    "start": "337575",
    "end": "343500"
  },
  {
    "text": "there's a- there's an exponentially large number of possible policies, right? If you have 11 states and four actions per state,",
    "start": "343500",
    "end": "350210"
  },
  {
    "text": "the number of possible policies is, er, 4 to the power of 11 which is not that big because 11 is a small MDP, right?",
    "start": "350210",
    "end": "356540"
  },
  {
    "text": "Because the number of, of policies- possible policies for, for an MDP is combinatorially large, is,",
    "start": "356540",
    "end": "361680"
  },
  {
    "text": "uh, number of actions,  the power of the number of states. So how do you find the best policy? Okay. So what you learn today is,",
    "start": "361680",
    "end": "369485"
  },
  {
    "text": "um, how to compute the optimal policy. Now, in order to develop an algorithm for computing an optimal policy,",
    "start": "369485",
    "end": "379879"
  },
  {
    "text": "um, we'll need to define three things. So just as a roadmap. Um, what I'm about to do is define V_Pi,",
    "start": "379880",
    "end": "389569"
  },
  {
    "text": "V_star, and Pi_star, okay? Um, and based on these definitions we'll see that- we'll,",
    "start": "389570",
    "end": "396350"
  },
  {
    "text": "we'll come to the, uh, definition. We will- uh, derive that Pi_star is the optimal policy, okay?",
    "start": "396350",
    "end": "403280"
  },
  {
    "text": "But so let's, let's go through these few definitions. Um, first V_Pi.",
    "start": "403280",
    "end": "408850"
  },
  {
    "text": "So for a policy Pi, V_Pi is a function mapping from states to the rules, uh,",
    "start": "408980",
    "end": "423139"
  },
  {
    "text": "[NOISE] is such that V_Pi of S is the expected total payoff,",
    "start": "423140",
    "end": "433150"
  },
  {
    "text": "um, for starting in state S and executing Pi.",
    "start": "433150",
    "end": "453699"
  },
  {
    "text": "And so sometimes we write this as V_Pi of S is the expected total payoff",
    "start": "453700",
    "end": "461490"
  },
  {
    "text": "given that you execute the policy Pi and the initial state,",
    "start": "464210",
    "end": "471889"
  },
  {
    "text": "S_0 is equal to S, okay? So the definition of V_Pi,",
    "start": "471890",
    "end": "477345"
  },
  {
    "text": "this is called the, um, value function for a policy. Well, this is called the value function.",
    "start": "477345",
    "end": "483270"
  },
  {
    "text": "[NOISE]",
    "start": "483270",
    "end": "490699"
  },
  {
    "text": "For the policy Pi, okay? Um, and so what the value function for a policy Pi denoted v_Pi is?",
    "start": "490700",
    "end": "500289"
  },
  {
    "text": "Is it tells you for any state you might start in, there's a function mapping of states to rewards, right?",
    "start": "500290",
    "end": "505360"
  },
  {
    "text": "For any state you might start in what's your expected total payoff if you start off your robot in that state,",
    "start": "505360",
    "end": "511390"
  },
  {
    "text": "and if you execute the policy Pi? And execute the policy Pi means take actions according to the policy Pi.",
    "start": "511390",
    "end": "518125"
  },
  {
    "text": "Right? So here's a, here's a specific example. Um, this policy.",
    "start": "518125",
    "end": "525175"
  },
  {
    "text": "So let's consider the follo- following policy Pi, right. Um, [NOISE]",
    "start": "525175",
    "end": "540129"
  },
  {
    "text": "so this is not a great policy. You know, from some of these states, it looks like it's heading for the minus 1 reward or sorry.",
    "start": "540130",
    "end": "547149"
  },
  {
    "text": "So if one of the reward was plus 1 that we get here. And secondly, this is called an absorbing state.",
    "start": "547150",
    "end": "552280"
  },
  {
    "text": "Meaning that if you ever get to the plus 1 and minus 1, then the world ends and then there are no more rewards or penalties after that.",
    "start": "552280",
    "end": "558460"
  },
  {
    "text": "Right? So but so this is actually not a very good policy, so the policy is any function mapping from the states to the actions.",
    "start": "558460",
    "end": "564910"
  },
  {
    "text": "So this is one policy that says, uh, in this state, you know,",
    "start": "564910",
    "end": "571839"
  },
  {
    "text": "this policy tells you in this state for one go north, which is actually a pretty bad thing to do, right, is take you to the minus 1 reward.",
    "start": "571840",
    "end": "578019"
  },
  {
    "text": "So this is not a great policy, um, but, but this is just a policy.",
    "start": "578020",
    "end": "583375"
  },
  {
    "text": "And v_Pi for this policy,",
    "start": "583375",
    "end": "590170"
  },
  {
    "text": "um, looks like this.",
    "start": "590170",
    "end": "595820"
  },
  {
    "text": "Okay. Um, don't worry too much about the specific numbers. But you've- if you look at this policy,",
    "start": "609120",
    "end": "616030"
  },
  {
    "text": "you see that from this set of states it's pretty efficient at getting you to the really bad reward,",
    "start": "616030",
    "end": "621714"
  },
  {
    "text": "and from this set of states it's pretty efficient at getting you to the good reward right,",
    "start": "621715",
    "end": "626820"
  },
  {
    "text": "with some mixing because of the noise in the robot veering off to the side. And so, you know,",
    "start": "626820",
    "end": "632700"
  },
  {
    "text": "these numbers are all negative. And those numbers are at least somewhat positive.",
    "start": "632700",
    "end": "638170"
  },
  {
    "text": "Right. So but so v_Pi is just, um, if you start from say this state,",
    "start": "638170",
    "end": "644440"
  },
  {
    "text": "from the state 1, 1 on expectation, you're expecting some these counts of rewards will be negative 0.88.",
    "start": "644440",
    "end": "651820"
  },
  {
    "text": "Okay? Um, so that's what v_Pi is.",
    "start": "651820",
    "end": "657625"
  },
  {
    "text": "Right. Now, um,",
    "start": "657625",
    "end": "673690"
  },
  {
    "text": "the following equation. Let me think, uh,",
    "start": "673690",
    "end": "678985"
  },
  {
    "text": "governs, um, the value function.",
    "start": "678985",
    "end": "688579"
  },
  {
    "text": "It's called, it's called Bellman's equation. Um, and this says",
    "start": "696660",
    "end": "703420"
  },
  {
    "text": "that your expected payoff",
    "start": "703420",
    "end": "709240"
  },
  {
    "text": "at a given state is the reward that you receive plus the discount factor,",
    "start": "709240",
    "end": "714250"
  },
  {
    "text": "times the future reward. So let me, let me actually explain, um, the intuition behind this, right?",
    "start": "714250",
    "end": "720670"
  },
  {
    "text": "Which is that, um, let's say you start off at some state s_0, right? So and again, let's,",
    "start": "720670",
    "end": "726940"
  },
  {
    "text": "let's say s is equal to s_0. So v_Pi of s is equal to,",
    "start": "726940",
    "end": "732324"
  },
  {
    "text": "well, just for your robot waking up in that- I'm going to add to that in a second, okay?",
    "start": "732325",
    "end": "739360"
  },
  {
    "text": "But just for the sake, just for this- for the fact that your robot woke up, um,",
    "start": "739360",
    "end": "744880"
  },
  {
    "text": "in this state s, you get the immediate- you get a reward R of s_0 right away.",
    "start": "744880",
    "end": "750955"
  },
  {
    "text": "This is something that's called- this is also called the immediate reward. [NOISE] Right.",
    "start": "750955",
    "end": "757900"
  },
  {
    "text": "Uh, because, you know, just for the, for the, uh, good fortune or bad fortune of starting off in this state,",
    "start": "757900",
    "end": "764785"
  },
  {
    "text": "the robot gets a reward right away. This is called the immediate reward. And then it will take some action and get to some new state s_1.",
    "start": "764785",
    "end": "777690"
  },
  {
    "text": "Where it will receive, you know, Gamma times the reward of s_1. And then [NOISE]. Right.",
    "start": "777690",
    "end": "790240"
  },
  {
    "text": "And then it will get some future reward at the next step and so on. Um, and just to flesh out the definition,",
    "start": "790240",
    "end": "796465"
  },
  {
    "text": "the value function v_Pi is really this. Given that you execute the policy Pi and",
    "start": "796465",
    "end": "803020"
  },
  {
    "text": "our s_0 equals s, right, and you start off in this state as 0.",
    "start": "803020",
    "end": "808180"
  },
  {
    "text": "Now, what I'm going to do is rewrite this part of the equation little bit. I'm going to factor out. I'm just going to take the rest of this and factor out one factor of Gamma.",
    "start": "808180",
    "end": "818155"
  },
  {
    "text": "So let me put parentheses around this, right, and just take out Gamma there.",
    "start": "818155",
    "end": "824665"
  },
  {
    "text": "Okay. So I'm just, you know, taking this previously this was Gamma squared, right?",
    "start": "824665",
    "end": "830620"
  },
  {
    "text": "But adding the parenthesis here, I'm just taking out one factor of Gamma, uh, that multiplies in the rest of that equation,",
    "start": "830620",
    "end": "837820"
  },
  {
    "text": "okay? Does that make sense? No. So as Gamma R of s_1 plus gamma squared R of s_2,",
    "start": "837820",
    "end": "846655"
  },
  {
    "text": "plus dot, dot, dot equals Gamma times R of s_1 plus.",
    "start": "846655",
    "end": "852290"
  },
  {
    "text": "Okay. So that's, that's what I did down there, right, just factor out one, one factor of Gamma.",
    "start": "853590",
    "end": "859510"
  },
  {
    "text": "And so, um, this is the, the value of state s is the immediate reward,",
    "start": "859510",
    "end": "866560"
  },
  {
    "text": "plus Gamma times the expected future rewards. Right? So this, the expected value of this",
    "start": "866560",
    "end": "875425"
  },
  {
    "text": "is really v_Pi of s_1.",
    "start": "875425",
    "end": "881290"
  },
  {
    "text": "Right. So this- and,",
    "start": "881290",
    "end": "886584"
  },
  {
    "text": "and so the second term here, this, this is the expected future rewards, right?",
    "start": "886585",
    "end": "893360"
  },
  {
    "text": "So Bellman's equation says that, um, the value of a state,",
    "start": "898260",
    "end": "903970"
  },
  {
    "text": "the value- the expected total payoff you get if your robot wakes up in a state s is the immediate reward plus Gamma,",
    "start": "903970",
    "end": "913104"
  },
  {
    "text": "times the expected future rewards. Okay. Right. And, and this thing under,",
    "start": "913104",
    "end": "919615"
  },
  {
    "text": "you know, above the curly braces is really, um, uh, asking if your robot wakes up at the state s_1,",
    "start": "919615",
    "end": "927970"
  },
  {
    "text": "and executes Pi, what is the expected total payoff, right? And this when your robot wakes up in state s_1 then it'll take an action, gets s_2,",
    "start": "927970",
    "end": "936490"
  },
  {
    "text": "take an action, get s_3, and this somewhat discounts the rewards for a bit,  starts off with the state s_1.",
    "start": "936490",
    "end": "942910"
  },
  {
    "text": "Okay. Makes sense? So, um, uh,",
    "start": "942910",
    "end": "949940"
  },
  {
    "text": "this- based on this, you can write out what- justify Bellman's equation,",
    "start": "950520",
    "end": "957834"
  },
  {
    "text": "which is, um, and, excuse me. And the mapping from this equation to this equation.",
    "start": "957835",
    "end": "964540"
  },
  {
    "text": "[NOISE].",
    "start": "964540",
    "end": "983380"
  },
  {
    "text": "All right. The mapping from the equation on top to the equation at the bottom is that, S maps to S_0 and S prime maps to S_1, right?",
    "start": "983380",
    "end": "994930"
  },
  {
    "text": "Um, and, what was I going to say, um, and so if we have that V_Pi of S equals,",
    "start": "994930",
    "end": "1006279"
  },
  {
    "text": "um, makes sense? [BACKGROUND]. So the value of,",
    "start": "1022610",
    "end": "1027780"
  },
  {
    "text": "um, state S is, uh, R of S plus V_Pi of S prime, where this is really S_0 and this is S_1.",
    "start": "1027780",
    "end": "1037829"
  },
  {
    "text": "Uh, and and in, in the notation of MDP, if you want to write a long sequence of states, we tend to use S_0,",
    "start": "1037830",
    "end": "1043785"
  },
  {
    "text": "S_1, S_2, S_3, and S_4, and so on, but if you have, want to look at just the current state and the state you'd get to after one time step,",
    "start": "1043785",
    "end": "1050730"
  },
  {
    "text": "we tend to use S and S prime for that. So that's why there's this mapping between these two pieces of notation.",
    "start": "1050730",
    "end": "1056440"
  },
  {
    "text": "Uh, so S prime let's say you get to after one step, well, let's see, what is S prime drawn from, right?",
    "start": "1056530",
    "end": "1064440"
  },
  {
    "text": "This so- the, the, the state S prime or S_1 is the state you get to after one time step.",
    "start": "1064440",
    "end": "1070260"
  },
  {
    "text": "So what is, what is the distribution the S prime is drawn from? S prime is drawn from P of what?",
    "start": "1070260",
    "end": "1076480"
  },
  {
    "text": "S. Okay, P of S, and then? Pi of S.",
    "start": "1081680",
    "end": "1087780"
  },
  {
    "text": "Pi of S, pretty cool. Does that make sense? Because, um, in state S,",
    "start": "1087780",
    "end": "1094840"
  },
  {
    "text": "you will take action a equals Pi of s, right.",
    "start": "1095600",
    "end": "1103395"
  },
  {
    "text": "So we're executing the policy Pi. So that means that when you're in a state S,",
    "start": "1103395",
    "end": "1108660"
  },
  {
    "text": "you're gonna take the action a given by Pi of S, because Pi of S tells you, please take this action a when you're in sate S. And so, um,",
    "start": "1108660",
    "end": "1118230"
  },
  {
    "text": "S prime is drawn from P of Sa, where a is equal to Pi of S, right?",
    "start": "1118230",
    "end": "1126269"
  },
  {
    "text": "Because they- because that's the action you took, which is why S prime, the state you get to after one time step,",
    "start": "1126270",
    "end": "1131970"
  },
  {
    "text": "is drawn from a distribution S Pi of S, okay?",
    "start": "1131970",
    "end": "1136929"
  },
  {
    "text": "Wow, that pen really left a mark.",
    "start": "1139820",
    "end": "1143559"
  },
  {
    "text": "So putting all that together, that's why- well, I just write out again, where Bellman's equation which is, um,",
    "start": "1148130",
    "end": "1155205"
  },
  {
    "text": "V_Pi of S equals R of S plus the discount factor times the expected value of V_Pi of S prime.",
    "start": "1155205",
    "end": "1164595"
  },
  {
    "text": "And so this term here is just sum of S prime V S Pi of S, V_Pi of S prime.",
    "start": "1164595",
    "end": "1176625"
  },
  {
    "text": "So that underlying term I guess is this just underline term here, okay?",
    "start": "1176625",
    "end": "1182205"
  },
  {
    "text": "Um, now, notice that this gives you a linear system of equations for actually solving for the value function.",
    "start": "1182205",
    "end": "1189450"
  },
  {
    "text": "Um, so let's say I give you a policy, right? It could be a good policy, could be a bad policy,",
    "start": "1189450",
    "end": "1195135"
  },
  {
    "text": "and you want to solve for V_Pi of S. What this, um, does is,",
    "start": "1195135",
    "end": "1201150"
  },
  {
    "text": "if you think of V_Pi of S as the unknown you're trying to solve for, um, given Pi,",
    "start": "1201150",
    "end": "1211660"
  },
  {
    "text": "right, these equations [NOISE] ,",
    "start": "1213590",
    "end": "1219690"
  },
  {
    "text": "um, these",
    "start": "1219690",
    "end": "1228720"
  },
  {
    "text": "equa- the Bellman's equations defines a linear system of equations, uh, in terms of V_Pi of S as the ve- values to be solved for.",
    "start": "1228720",
    "end": "1239490"
  },
  {
    "text": "So make sure- here's a, here's a specific example. Um, let's take the state V1,",
    "start": "1239490",
    "end": "1245590"
  },
  {
    "text": "right, so this is the state V1, okay. What this- what Bellman's equation this tells us is,",
    "start": "1246680",
    "end": "1254940"
  },
  {
    "text": "V_Pi of the state 3, 1 is",
    "start": "1254940",
    "end": "1260039"
  },
  {
    "text": "equal to the immediate reward you get at the state 3,1,",
    "start": "1260040",
    "end": "1266540"
  },
  {
    "text": "plus the discount factor times,",
    "start": "1266540",
    "end": "1271620"
  },
  {
    "text": "well, sum of S prime PS Pi of S V_Pi of S prime, right? So, um, when- let's see- le,",
    "start": "1271620",
    "end": "1279900"
  },
  {
    "text": "le- let's say that Pi of 3,1 is north, right? So let's say you try to go north.",
    "start": "1279900",
    "end": "1286050"
  },
  {
    "text": "If you try to go north from this state, then you have a 0.8 chance of getting to 3, 2,",
    "start": "1286050",
    "end": "1293800"
  },
  {
    "text": "plus a 0.1 chance of, uh, veering, uh,",
    "start": "1293800",
    "end": "1300710"
  },
  {
    "text": "left, plus a 0.1 chance of veering right.",
    "start": "1300710",
    "end": "1308320"
  },
  {
    "text": "Um, let me just close out that parenthesis, okay. So that's what Bellman's equation says about these values.",
    "start": "1310640",
    "end": "1321765"
  },
  {
    "text": "All right, and if your goal is to solve for the value function,",
    "start": "1321765",
    "end": "1329530"
  },
  {
    "text": "then these things I'm just circling in purple are the unknown variables [NOISE] okay?",
    "start": "1330260",
    "end": "1338805"
  },
  {
    "text": "And, um, if you have 11 states, uh, like in our MDP, then this gives you a system of 11 linear equations with 11 unknowns.",
    "start": "1338805",
    "end": "1348825"
  },
  {
    "text": "Um, uh, and so using sort of a linear algebra solver, you could solve explicitly for the value of these 11 unknowns. Does that make sense?",
    "start": "1348825",
    "end": "1358215"
  },
  {
    "text": "Okay. So the way you would- so let's say I give you a policy Pi, you know, any policy Pi. Um, the way you can solve for the value function is,",
    "start": "1358215",
    "end": "1366960"
  },
  {
    "text": "create an, an 11 dimensional vector, um, with V_Pi of, you know, 1, 1,",
    "start": "1366960",
    "end": "1376125"
  },
  {
    "text": "V_Pi of 1, 2 and so on, down to the V_Pi of whether is the last thing.",
    "start": "1376125",
    "end": "1382875"
  },
  {
    "text": "You have 11 states, so V_Pi of 3, 3 or whatever, of 4, 3, right?",
    "start": "1382875",
    "end": "1391155"
  },
  {
    "text": "So if you want to, er, solve for those, um, 11 numbers I wrote up just, uh, in terms of defining V_Pi, what you can do is,",
    "start": "1391155",
    "end": "1399045"
  },
  {
    "text": "I'll give you a policy Pi, you can then construct an 11 dimensional vector,",
    "start": "1399045",
    "end": "1404590"
  },
  {
    "text": "you know, 11 dimensional vector of unknown values that you want to solve for.",
    "start": "1404630",
    "end": "1410145"
  },
  {
    "text": "And Bellman's equations for each of the 11 states, um, for each of the 11 states you could plug in on the left-hand side.",
    "start": "1410145",
    "end": "1417480"
  },
  {
    "text": "This gives you one equation for how one of the values is determined as a linear function of a few other of the values in this vector, okay?",
    "start": "1417480",
    "end": "1427455"
  },
  {
    "text": "And so, um, what this does is it sets up a linear system of equations with 11 variables and 11 unknowns, right?",
    "start": "1427455",
    "end": "1436740"
  },
  {
    "text": "And using a linear algebra solver, you, you will be able to solve this linear system of equations. Does that make sense?",
    "start": "1436740",
    "end": "1444525"
  },
  {
    "text": "Okay. Um, all right.",
    "start": "1444525",
    "end": "1450300"
  },
  {
    "text": "And so this works so long as you have a discrete- If you have 11 states, you know, it takes like a, it, it takes almost a- takes almost no time,",
    "start": "1450300",
    "end": "1457860"
  },
  {
    "text": "right, in a computer to solve a linear system of 11 equations. So that's how you would actually get those values, if you're ever called on to solve for V_Pi, okay?",
    "start": "1457860",
    "end": "1466230"
  },
  {
    "text": "[NOISE] Actually, the, the- did what I just say make sense?",
    "start": "1466230",
    "end": "1473790"
  },
  {
    "text": "Raise your hand if what I just explained made sense. Okay, good, awesome, great.",
    "start": "1473790",
    "end": "1478210"
  },
  {
    "text": "All right, good. So moving on our roadmap, um, we've defined V_Pi,",
    "start": "1485210",
    "end": "1491879"
  },
  {
    "text": "let's now define V_star. Um, so [NOISE].",
    "start": "1491879",
    "end": "1512234"
  },
  {
    "text": "So V star is the optimal value function.",
    "start": "1512234",
    "end": "1522940"
  },
  {
    "text": "And we'll define it as V star of S",
    "start": "1523460",
    "end": "1528100"
  },
  {
    "text": "equals max over all policies Pi of V Pi of S. Okay.",
    "start": "1529400",
    "end": "1538380"
  },
  {
    "text": "Um, one of the I don't know, slightly confusing things about reinforcement learning terminology is that there are two types of value function.",
    "start": "1538380",
    "end": "1545295"
  },
  {
    "text": "There's value function for a given policy Pi and there is the optimal value function V star.",
    "start": "1545295",
    "end": "1550665"
  },
  {
    "text": "So both of these are called value functions, but one is a value function for a specific policy, could be a great policy, could be a terrible policy, can be the optimal policy.",
    "start": "1550665",
    "end": "1558495"
  },
  {
    "text": "The other is V star which is the optimal- optimal value function. So V star is defined as,",
    "start": "1558495",
    "end": "1564975"
  },
  {
    "text": "um, look at the value for, you know, any- lo- lo- look across all of the possible policies you could have all, um, 4-11.",
    "start": "1564975",
    "end": "1572414"
  },
  {
    "text": "Over all the combinatorially large number of possible policies for this MDP. And V star of this is,",
    "start": "1572415",
    "end": "1578985"
  },
  {
    "text": "well let's just take the max, where was of all the possible- of all the policies you know anyone could implement of all the possible policies,",
    "start": "1578985",
    "end": "1585945"
  },
  {
    "text": "let's take the value of the best possible policy for that state, so that's V star.",
    "start": "1585945",
    "end": "1591179"
  },
  {
    "text": "Okay. And that's the optimal- optimal, um, optimal value function. And it turns out that, um,",
    "start": "1591180",
    "end": "1600900"
  },
  {
    "text": "there is a different version of Bellman's equations for this.",
    "start": "1600900",
    "end": "1607180"
  },
  {
    "text": "And again, there's a Bellman's equation for V_Pi, for value of a policy.",
    "start": "1611000",
    "end": "1618240"
  },
  {
    "text": "And then there's a different version of Bellman's equations for the optimal value function, right? So just as the two versions of value functions,",
    "start": "1618240",
    "end": "1626190"
  },
  {
    "text": "there are two versions of Bellman's equations. But let me just write this out and hopefully this will make sense.",
    "start": "1626190",
    "end": "1632830"
  },
  {
    "text": "Um, actually let's think this through.",
    "start": "1632870",
    "end": "1639330"
  },
  {
    "text": "So let's say you start off your robot in a state S, what is the best possible expected sum of discounted rewards?",
    "start": "1639330",
    "end": "1647600"
  },
  {
    "text": "What's the best possible payoff you could get, right? Well, ah, just for the privilege of waking up in state S,",
    "start": "1647600",
    "end": "1655309"
  },
  {
    "text": "the robot will receive an immediate reward R of S, all right? And then it has to take some action and after taking some action,",
    "start": "1655310",
    "end": "1663945"
  },
  {
    "text": "it will get to some other state S prime. Um, you know, and after some other state S prime",
    "start": "1663945",
    "end": "1673485"
  },
  {
    "text": "it will receive, right, future expected rewards V star of S prime,",
    "start": "1673485",
    "end": "1678600"
  },
  {
    "text": "and we have to discount that by Gamma, right? So, sorry. So well,",
    "start": "1678600",
    "end": "1687120"
  },
  {
    "text": "the state S prime was arrived at but [NOISE] you're taking some action a from the initial state.",
    "start": "1687120",
    "end": "1694110"
  },
  {
    "text": "Um, and so whatever the action is you know,",
    "start": "1694110",
    "end": "1700455"
  },
  {
    "text": "for- if, if you take action a, right?",
    "start": "1700455",
    "end": "1703120"
  },
  {
    "text": "Okay, um, so if you take an action a in the state S,",
    "start": "1706430",
    "end": "1714720"
  },
  {
    "text": "then your total payoff will be- expected total payoff will be the immediate reward plus Gamma times the expected value of the future payoff.",
    "start": "1714720",
    "end": "1724110"
  },
  {
    "text": "But what is the action a that we should plug it in here? Right. Well, the optimal action to take in the MDP is",
    "start": "1724110",
    "end": "1731430"
  },
  {
    "text": "whatever action maximizes your expected total payoff, maximizes the expected sum of rewards which is why",
    "start": "1731430",
    "end": "1738644"
  },
  {
    "text": "the action you want to plug in is just whatever action a maximizes that.",
    "start": "1738645",
    "end": "1744300"
  },
  {
    "text": "Okay. So this is Bellman's equations for the optimal value function,",
    "start": "1744300",
    "end": "1750855"
  },
  {
    "text": "which says that, ah, the best possible expected total payoff you could receive starting from state S is the immediate reward R of S,",
    "start": "1750855",
    "end": "1759915"
  },
  {
    "text": "plus max over all possible actions of whatever action allows you to maximize,",
    "start": "1759915",
    "end": "1765450"
  },
  {
    "text": "you know, your expected total payoff- expected future payoff, okay? So this is the expected future payoff,",
    "start": "1765450",
    "end": "1774130"
  },
  {
    "text": "or expected future reward, okay.",
    "start": "1776090",
    "end": "1784919"
  },
  {
    "text": "Um, now based on the argument we just went through,",
    "start": "1784920",
    "end": "1794100"
  },
  {
    "text": "um, this allows us to figure out how to compute Pi star of S as well, right?",
    "start": "1794100",
    "end": "1804450"
  },
  {
    "text": "Which is, um, let's say- let's say we have a way of computing V star of S, but we don't yet.",
    "start": "1804450",
    "end": "1810945"
  },
  {
    "text": "But let's say I tell you what is the V star over S, and then I ask you, you know, what is the action you should take in a given state?",
    "start": "1810945",
    "end": "1818220"
  },
  {
    "text": "So remember, Pi, Pi star, oh Pi star is going to be optimal policy, right?",
    "start": "1818220",
    "end": "1828270"
  },
  {
    "text": "And so, um, what should Pi star of S be, right? Which is le- let's say- let's say we're computing V star.",
    "start": "1828270",
    "end": "1834470"
  },
  {
    "text": "Um, and now I'll see you, \"Hey, my robot's in state S, what is the best action I should take from the state S, right?",
    "start": "1834470",
    "end": "1844215"
  },
  {
    "text": "Then how do I- how do I decide what actions to take in the state S? What, what optimal?",
    "start": "1844215",
    "end": "1850650"
  },
  {
    "text": "What do you think is the best action to take from the state? And the answer is almost given in the equation above, yeah.",
    "start": "1850650",
    "end": "1858360"
  },
  {
    "text": "[inaudible]. Yeah, cool. Awesome, right.",
    "start": "1858360",
    "end": "1863475"
  },
  {
    "text": "So the best action to take in state S, and best means of maximizing respect to total payoff.",
    "start": "1863475",
    "end": "1870585"
  },
  {
    "text": "But the action that maximizes your expected total payoff is, you know, what- whatever action we were choosing a up here.",
    "start": "1870585",
    "end": "1876855"
  },
  {
    "text": "And so it's just argmax over a of that.",
    "start": "1876855",
    "end": "1885160"
  },
  {
    "text": "And because Gamma is just a constant that, that doesn't affect the argmax, usually we just eliminate that since it's just a positive number, right?",
    "start": "1887510",
    "end": "1897460"
  },
  {
    "text": "So this gives us the strategy we will use for finding, um,",
    "start": "1900290",
    "end": "1907770"
  },
  {
    "text": "the optimal policy for an MDP, which is, um, we're going to find a way to compute V star of S,",
    "start": "1907770",
    "end": "1915075"
  },
  {
    "text": "which we don't have a way of doing yet, right? V star was defined as a max over a combinatorially or exponentially large number policy.",
    "start": "1915075",
    "end": "1922320"
  },
  {
    "text": "So we don't have a way of computing V star yet. But if we can find the way to compute V star, then you know, using this equation,",
    "start": "1922320",
    "end": "1929250"
  },
  {
    "text": "sorry, let me just scratch this out. Using this equation gives you a way for every state of every state S,",
    "start": "1929250",
    "end": "1935730"
  },
  {
    "text": "to pretty efficiently compute this argmax, um, and therefore figure out what is the optimal action for every state, okay?",
    "start": "1935730",
    "end": "1945330"
  },
  {
    "text": "[NOISE].",
    "start": "1945330",
    "end": "1967710"
  },
  {
    "text": "All right, um. So all right. So just to practice with confusing notation.",
    "start": "1967710",
    "end": "1977530"
  },
  {
    "text": "All right, let's see if you understand this equation. I'm, I'm just claiming this. I'm not proving this.",
    "start": "1981050",
    "end": "1986235"
  },
  {
    "text": "But for every state as V star of S equals V of Pi star of S,",
    "start": "1986235",
    "end": "1993255"
  },
  {
    "text": "is greater than V Pi of S, all right? For every policy Pi in every state S, okay?",
    "start": "1993255",
    "end": "2002929"
  },
  {
    "text": "So ho- hope this equation makes sense. Ah, this is what I'm claiming. I didn't prove this.",
    "start": "2002930",
    "end": "2008240"
  },
  {
    "text": "What I'm claiming is that, um, the optimal value for state S is- this is the optimal value function on the left.",
    "start": "2008240",
    "end": "2016505"
  },
  {
    "text": "This is the value function for Pi star.",
    "start": "2016505",
    "end": "2026120"
  },
  {
    "text": "So this is- this is the optimal value function. This is the value function for a specific policy Pi,",
    "start": "2026120",
    "end": "2031730"
  },
  {
    "text": "where the policy Pi happens to be Pi star. And so what I'm claiming here is that- wh- what I'm writing here is that, um,",
    "start": "2031730",
    "end": "2039440"
  },
  {
    "text": "the optimal value for state S is equal to the value function 4 Pi star applied to the state S,",
    "start": "2039440",
    "end": "2045455"
  },
  {
    "text": "and just as greater than equal to V Pi of S for any other policy Pi, okay? Right. All right. So, um,",
    "start": "2045455",
    "end": "2059629"
  },
  {
    "text": "the strategy you can use for finding for optimal policy is: one, ah, find V star.",
    "start": "2059630",
    "end": "2069934"
  },
  {
    "text": "Two, you know, use the argmax equation to",
    "start": "2069935",
    "end": "2079639"
  },
  {
    "text": "find Pi star, okay? And so what we're going to do is- well, step two, right?",
    "start": "2079640",
    "end": "2088550"
  },
  {
    "text": "We, we know how to do from the argmax equation. So what we're gonna do is talk about an algorithm for actually computing V star because if you can compute V star,",
    "start": "2088550",
    "end": "2096230"
  },
  {
    "text": "then this equation helps- allows you to pretty quickly find the optimal, um,",
    "start": "2096230",
    "end": "2103445"
  },
  {
    "text": "action for every state [NOISE]. So, um.",
    "start": "2103445",
    "end": "2113580"
  },
  {
    "text": "So value iteration is,",
    "start": "2122530",
    "end": "2130190"
  },
  {
    "text": "ah, is an algorithm you can use to, um, to find V star.",
    "start": "2130190",
    "end": "2136535"
  },
  {
    "text": "So let me just write out the algorithm, um.",
    "start": "2136535",
    "end": "2140390"
  },
  {
    "text": "So this is um-",
    "start": "2149260",
    "end": "2158820"
  },
  {
    "text": "Okay? So in the value iteration algorithm, you initialize the estimated value of every state to 0,",
    "start": "2174700",
    "end": "2184340"
  },
  {
    "text": "and then you update these estimated values using Bellman's equation.",
    "start": "2184340",
    "end": "2189530"
  },
  {
    "text": "And this is the, uh, optimal value function, the V star version of Bellman's equations, right?",
    "start": "2189530",
    "end": "2195275"
  },
  {
    "text": "And, um,",
    "start": "2195275",
    "end": "2207049"
  },
  {
    "text": "[NOISE] so to be concrete about how you implement this, you know, if you're implementing this, right? If you are implementing this in Python, um,",
    "start": "2207050",
    "end": "2213920"
  },
  {
    "text": "what you would do is create a 11 dimensional vector to store all the values of V of S. So you create a,",
    "start": "2213920",
    "end": "2219950"
  },
  {
    "text": "you know, 11 dimensional vector, right? That, that represent V of 1, 1,",
    "start": "2219950",
    "end": "2225380"
  },
  {
    "text": "V of 1, 2, you know, down to V of 4, 3, right?",
    "start": "2225380",
    "end": "2231829"
  },
  {
    "text": "So this is, um, 11 dimensional vector corresponding to the 11 states.",
    "start": "2231830",
    "end": "2237575"
  },
  {
    "text": "Um, [NOISE] oh, I'm sorry I shou - wait did I say 11? We got 10 states in the MDP, don't we? Wait.",
    "start": "2237575",
    "end": "2243650"
  },
  {
    "text": "Yes, we have 10 states. We've been saying 11 all long? Sorry. Okay, 10. Um, uh, yeah, uh, wait.",
    "start": "2243650",
    "end": "2256210"
  },
  {
    "text": "[inaudible]. 11? [inaudible]. Oh, Yes. You're right. Sorry. Yes, 11.",
    "start": "2256210",
    "end": "2261605"
  },
  {
    "text": "Okay. Sorry. Yes, 11 states. Okay, It's all right. Right. So 11 states MDP so you create an initial, ah,",
    "start": "2261605",
    "end": "2268850"
  },
  {
    "text": "create an 11 dimensional vector um, and initialize all of these values to 0.",
    "start": "2268850",
    "end": "2274970"
  },
  {
    "text": "And then you will repeatedly update, um, the estimated value of every state according to Bellman's equations, right?",
    "start": "2274970",
    "end": "2287059"
  },
  {
    "text": "Um, and so uh, there, there, there are actually two ways to interpret this um,",
    "start": "2287060",
    "end": "2293015"
  },
  {
    "text": "and sim- similar to, er, similar to gradient descent, right? We've written out, you know, a gradient descent rule for updating the Theta,",
    "start": "2293015",
    "end": "2300740"
  },
  {
    "text": "uh, the, the, vector parameters Theta. And what you do is, you know, then you have,",
    "start": "2300740",
    "end": "2306755"
  },
  {
    "text": "um- and what you do is you update all of the components of Theta simultaneously, right?",
    "start": "2306755",
    "end": "2312305"
  },
  {
    "text": "And so that's called a synchronous update, er, in gradient descent. So one way to- so the way you would, um, er,",
    "start": "2312305",
    "end": "2319850"
  },
  {
    "text": "update this equation in what's called a synchronous update,",
    "start": "2319850",
    "end": "2324870"
  },
  {
    "text": "would be if you compute the right hand side for all 11 states and then you simultaneously overwrite all 11 values at the same time.",
    "start": "2327550",
    "end": "2337630"
  },
  {
    "text": "And then you compute all 11 values for the right-hand side and then you simultaneously update all 11 values, okay?",
    "start": "2337630",
    "end": "2343930"
  },
  {
    "text": "Um, the alternative would be an asynchronous update.",
    "start": "2343930",
    "end": "2349109"
  },
  {
    "text": "And an asynchronous update, what you do is you compute v of 1, 1, right?",
    "start": "2351550",
    "end": "2357140"
  },
  {
    "text": "And the value of v of 1, 1 depends on some of the, the other values on the right hand side, right? But the asynchronous update,",
    "start": "2357140",
    "end": "2363350"
  },
  {
    "text": "you compute v of 1, 1 and then you overwrite this value first. And then you use that equation to compute v of 1, 2.",
    "start": "2363350",
    "end": "2370985"
  },
  {
    "text": "And then you update this and then you observe update these one at a time. And the difference between synchronous and asynchronous is um, you know,",
    "start": "2370985",
    "end": "2379415"
  },
  {
    "text": "if you're using asynchronous update by the time you're using V of 4, 3 which depends on some of the earlier values,",
    "start": "2379415",
    "end": "2385490"
  },
  {
    "text": "you'd be using a new and refreshed value of some of the earlier values on your list, okay?",
    "start": "2385490",
    "end": "2391070"
  },
  {
    "text": "Um, it turns out that value iteration works fine with either synchronous update or asynchronous updates.",
    "start": "2391070",
    "end": "2398375"
  },
  {
    "text": "But, um, for the, er, er, but, um, er, because it vectorizes better,",
    "start": "2398375",
    "end": "2404690"
  },
  {
    "text": "because you can use more efficient matrix operations. Most people use asynchronous update but it turns out that the algorithm will",
    "start": "2404690",
    "end": "2410240"
  },
  {
    "text": "work whether using a synchronous or an asynchronous update. So I, I, I, I guess unless, unless otherwise uh, uh,",
    "start": "2410240",
    "end": "2417109"
  },
  {
    "text": "you know, stated you should usually assume that. Whe- when I talk about, uh, value iteration,",
    "start": "2417110",
    "end": "2422240"
  },
  {
    "text": "I'm referring to asynchronous update where you compute all the values, all 11 values using the- a- an- and then update all 11 values at the same time, okay?",
    "start": "2422240",
    "end": "2431240"
  },
  {
    "text": "Was there a question just now, someone had, yeah. [inaudible] Yeah,",
    "start": "2431240",
    "end": "2434020"
  },
  {
    "text": "yes. So I think there, there, uh, uh, yes. So how do you represent the absorbing state?",
    "start": "2453420",
    "end": "2459130"
  },
  {
    "text": "The sync state? We get to plus 1 minus 1 then the world ends. Um, in this framework one way to code that up would be to say that um,",
    "start": "2459130",
    "end": "2466585"
  },
  {
    "text": "the state transition parameters from that to any other state is 0. That is one way to, to, to- that, that will work.",
    "start": "2466585",
    "end": "2471670"
  },
  {
    "text": "Uh, another way would be, um, less- done less often maybe mathematically a bit cleaner but not how people tend to do this,",
    "start": "2471670",
    "end": "2478445"
  },
  {
    "text": "would be to take your, um, 11 state MDP and then create a 12 state,",
    "start": "2478445",
    "end": "2484505"
  },
  {
    "text": "and a 12 state always goes back to itself with no further rewards. So both, both of these will give you the same result.",
    "start": "2484505",
    "end": "2490340"
  },
  {
    "text": "Mathematically, it's pretty more convenient to just set, you know, P of Sa S prime equals 0 for all other states.",
    "start": "2490340",
    "end": "2497525"
  },
  {
    "text": "It's not [inaudible] probably but that, that will give you the right answer as well. Yeah. All right.",
    "start": "2497525",
    "end": "2506060"
  },
  {
    "text": "Cool. Um, so just as a point of notation,",
    "start": "2506060",
    "end": "2511340"
  },
  {
    "text": "if you're using synchronous updates, you can think of this as, um, taking the old value function,",
    "start": "2511340",
    "end": "2518930"
  },
  {
    "text": "er, O estimate, right?",
    "start": "2518930",
    "end": "2524825"
  },
  {
    "text": "And using it to compute the new estimate, right?",
    "start": "2524825",
    "end": "2530540"
  },
  {
    "text": "So this, this, you know, assuming the synchronous update, you have some, uh, previous 11 dimensional vector with",
    "start": "2530540",
    "end": "2537920"
  },
  {
    "text": "your estimates of the value from the previous iteration. And after doing one iteration of this,",
    "start": "2537920",
    "end": "2543410"
  },
  {
    "text": "you have a new set of estimates. So one step of this algorithm is sometimes called the Bellman backup operator.",
    "start": "2543410",
    "end": "2550590"
  },
  {
    "text": "And so where you update V equals B of V, right?",
    "start": "2552430",
    "end": "2559490"
  },
  {
    "text": "Where, uh, where now V is, a 11 dimensional vector. So you have an order 11 dimensional vector,",
    "start": "2559490",
    "end": "2564770"
  },
  {
    "text": "compute the Bellman backup operator with just that equation there and update V according to V of P. Um,",
    "start": "2564770",
    "end": "2571235"
  },
  {
    "text": "and so one thing that you see in the, um, problem set, uh,",
    "start": "2571235",
    "end": "2577565"
  },
  {
    "text": "is prove- is, er, er, showing that, um, this will make a V of S converge to V star, okay?",
    "start": "2577565",
    "end": "2587000"
  },
  {
    "text": "So it turns out that, um,",
    "start": "2587000",
    "end": "2591180"
  },
  {
    "text": "okay, so it turns out that, um, er, you can prove and you'll see more details of this in the problem set,",
    "start": "2606520",
    "end": "2614525"
  },
  {
    "text": "that by repeatedly and forcing Bellman's, er, equations, that this equa- this,",
    "start": "2614525",
    "end": "2620795"
  },
  {
    "text": "this algorithm will cause your vector of 11 values or cause V to converge to your optimal value function of V star, okay?",
    "start": "2620795",
    "end": "2628850"
  },
  {
    "text": "Um, and more details. You- you'll see in the homework and a little bit in the lecture notes. And it turns out this algorithm actually converges quite quickly, right?",
    "start": "2628850",
    "end": "2635690"
  },
  {
    "text": "Um, to, to, to give you a flavor, I think that, uh, with the discount factor, the discount factor is 0.99,",
    "start": "2635690",
    "end": "2642485"
  },
  {
    "text": "it turns out that you can show that the error, er, reduces, you know, by a factor of 0.99 on every iteration, um,",
    "start": "2642485",
    "end": "2649535"
  },
  {
    "text": "and so V actually converges quite, quickly geometrically quickly or exponentially quickly,",
    "start": "2649535",
    "end": "2654935"
  },
  {
    "text": "um, to the optimal value function, V star. And so if it's, you know, if the discount factor is 0.99, then we've like a few,",
    "start": "2654935",
    "end": "2661340"
  },
  {
    "text": "we've 100 iterations or a few hundred iterations, V would be very close to V star, okay?",
    "start": "2661340",
    "end": "2667415"
  },
  {
    "text": "And, and the discount factor is 0.9, then we've just, you know, 10 or a few dozens of iterations that'll be very close to V star.",
    "start": "2667415",
    "end": "2673700"
  },
  {
    "text": "So these algorithm actually converges quite quickly to V star, okay?",
    "start": "2673700",
    "end": "2679160"
  },
  {
    "text": "Um, so let's see.",
    "start": "2679160",
    "end": "2684470"
  },
  {
    "text": "[NOISE].",
    "start": "2684470",
    "end": "2715280"
  },
  {
    "text": "All right. So just to put everything together, um, if you- if",
    "start": "2715280",
    "end": "2726220"
  },
  {
    "text": "you run value iteration on that MDP,",
    "start": "2726220",
    "end": "2730519"
  },
  {
    "text": "you end up with this. Um, er,",
    "start": "2737700",
    "end": "2741859"
  },
  {
    "text": "so this is V star, okay? So it's a list of 11 numbers telling you what is the optimal, um,",
    "start": "2760570",
    "end": "2768454"
  },
  {
    "text": "expected pay off for starting off in each of the 11 possible states.",
    "start": "2768455",
    "end": "2774260"
  },
  {
    "text": "And so, um, I had previously said, I think I said last week,",
    "start": "2774260",
    "end": "2779765"
  },
  {
    "text": "uh, o- of the week before Thanksgiving, that this is the optimal policy, right?",
    "start": "2779765",
    "end": "2792065"
  },
  {
    "text": "So, you know, let's just use as a case study how you compute the optimal action for that state,",
    "start": "2792065",
    "end": "2799325"
  },
  {
    "text": "um, given this V star, all right? Well, what you do is you,",
    "start": "2799325",
    "end": "2804845"
  },
  {
    "text": "you actually just use this equation. And so, um, if you were to go west,",
    "start": "2804845",
    "end": "2811280"
  },
  {
    "text": "then if you were to compute, I guess this term, um,",
    "start": "2811280",
    "end": "2817280"
  },
  {
    "text": "sum of S prime west or left I guess, right? P of S A, S prime V star of S prime is equal to,",
    "start": "2817280",
    "end": "2827570"
  },
  {
    "text": "um, if you were to go west, you have a, um-",
    "start": "2827570",
    "end": "2840090"
  },
  {
    "text": "Right.",
    "start": "2840660",
    "end": "2845890"
  },
  {
    "text": "Um, right. So if you're in this state,",
    "start": "2845890",
    "end": "2852520"
  },
  {
    "text": "and if you attempt to go left, then there's a 0.8 chance you end up there with,",
    "start": "2852520",
    "end": "2859030"
  },
  {
    "text": "ah, ah, V star of 0.75. There's a 0.1 chance.",
    "start": "2859030",
    "end": "2864955"
  },
  {
    "text": "You know if you try to go left, there's 0.1 chance you veer off to the north and have a 0.069.",
    "start": "2864955",
    "end": "2871690"
  },
  {
    "text": "And then there's 0.1 chance that you actually go south and bounce off the wall and end up with a 0.71.",
    "start": "2871690",
    "end": "2879205"
  },
  {
    "text": "And so the expected future reward, the expected future payoff given this equation is that if you tend to go west,",
    "start": "2879205",
    "end": "2886000"
  },
  {
    "text": "you end up with a 0.740 as expected future rewards. Whereas if you were to go north,",
    "start": "2886000",
    "end": "2893109"
  },
  {
    "text": "and we do a similar computation. [NOISE] You know, so 0.8 times 0.69,",
    "start": "2893110",
    "end": "2901778"
  },
  {
    "text": "plus 0.1 times 0.75, plus 0.1 times 0.49, is the appropriate weighted average. You find that this is equal to 0.676.",
    "start": "2901779",
    "end": "2910100"
  },
  {
    "text": "Um, which is why the expected future rewards for if you go west, if you go no- ah,",
    "start": "2910190",
    "end": "2915760"
  },
  {
    "text": "left is 0.740 which is quite a bit higher than if you go north,",
    "start": "2915760",
    "end": "2921115"
  },
  {
    "text": "which is why we can conclude based on this little calculation, um, that the optimal policy is to go left by that state, okay?",
    "start": "2921115",
    "end": "2928960"
  },
  {
    "text": "And- and really, and technically you check north, south, east, and west and make sure that going west gives a high reward.",
    "start": "2928960",
    "end": "2934240"
  },
  {
    "text": "And that's how you can conclude that going west is actually the better action, at this state, okay?",
    "start": "2934240",
    "end": "2941290"
  },
  {
    "text": "So that's the value iteration. And based on this, if you,",
    "start": "2941290",
    "end": "2946660"
  },
  {
    "text": "um, ah, are given an MDP you can implement this, ah, south of V star and, ah,",
    "start": "2946660",
    "end": "2954020"
  },
  {
    "text": "ah, be able to, ah, compute Pi star, okay? All right. Few more things to go over.",
    "start": "2954020",
    "end": "2962560"
  },
  {
    "text": "But before I move on, ah, let me check if there any questions, yeah.",
    "start": "2962560",
    "end": "2967660"
  },
  {
    "text": "[inaudible] Oh, sure yep. Is the number of states always finite?",
    "start": "2967660",
    "end": "2974680"
  },
  {
    "text": "So in what we're discussing so far, yes. But what we'll see on Wednesday is how to generalize this framework.",
    "start": "2974680",
    "end": "2981895"
  },
  {
    "text": "I'll, I'll do this a little bit later but it turns out if you have a continuous state MDP, ah,",
    "start": "2981895",
    "end": "2987370"
  },
  {
    "text": "one of the things that's often done I guess is to discretize into finite number of states.",
    "start": "2987370",
    "end": "2994060"
  },
  {
    "text": "Ah, but then there are also some other versions of, um, ah, you know, value iteration that applies directly to continuous states as well.",
    "start": "2994060",
    "end": "3003210"
  },
  {
    "text": "Okay, cool. All right.",
    "start": "3003210",
    "end": "3009885"
  },
  {
    "text": "So [NOISE].",
    "start": "3009885",
    "end": "3018000"
  },
  {
    "text": "Um, what I describe is an algorithm called value iteration. The other, um, I know, common, ah,",
    "start": "3018000",
    "end": "3025155"
  },
  {
    "text": "sort of textbook algorithm for solving for MDP is, is called policy iteration.",
    "start": "3025155",
    "end": "3031329"
  },
  {
    "text": "And let me just- I'll just write out what the algorithm is.",
    "start": "3034820",
    "end": "3040060"
  },
  {
    "text": "So here's the algorithm which is, um, you know initialize Pi randomly, right?",
    "start": "3041210",
    "end": "3048780"
  },
  {
    "text": "[NOISE].",
    "start": "3048780",
    "end": "3103470"
  },
  {
    "text": "Okay, so let's see what this algorithm does. So we'll talk of pros and cons of valuation versus policy iteration in a little bit.",
    "start": "3103470",
    "end": "3109650"
  },
  {
    "text": "Um, in policy iteration, ah, instead of solving for the optimal policy V star,",
    "start": "3109650",
    "end": "3116895"
  },
  {
    "text": "so in- in value iteration our focus of attention was V star, right? Where, um, you know, you do a lot of work to try to find the value function.",
    "start": "3116895",
    "end": "3124215"
  },
  {
    "text": "And then once you solve for V star, you then figure out the best policy. In policy iteration, the focus of attention is",
    "start": "3124215",
    "end": "3131010"
  },
  {
    "text": "on the policy Pi rather than the value function. And so initialize Pi randomly.",
    "start": "3131010",
    "end": "3136740"
  },
  {
    "text": "So that means for- for each of the 11 states pick a random action, right? So a random initial Pi.",
    "start": "3136740",
    "end": "3141825"
  },
  {
    "text": "And then we're going to repeatedly carry out these two steps. Um, the first step is, um,",
    "start": "3141825",
    "end": "3147960"
  },
  {
    "text": "solve for the value function for the policy Pi, right? And remember, um, for V Pi,",
    "start": "3147960",
    "end": "3155490"
  },
  {
    "text": "this was a linear system of equations, right?",
    "start": "3155490",
    "end": "3164115"
  },
  {
    "text": "With 11 variables, with 11 unknowns in a linear- there is a linear system of 11 equations with 11 unknowns.",
    "start": "3164115",
    "end": "3170520"
  },
  {
    "text": "And so using a sort of linear algebra solver or linear equation solver, given a fixed policy Pi,",
    "start": "3170520",
    "end": "3177075"
  },
  {
    "text": "you could just, you know, at the cost of inverting a matrix roughly, right? You can solve for- you can solve for all of these 11 values.",
    "start": "3177075",
    "end": "3184815"
  },
  {
    "text": "And so in policy iteration, um, you would, you know, use a linear solver to solve for",
    "start": "3184815",
    "end": "3192180"
  },
  {
    "text": "the optimal value function for this policy Pi that we just randomly initialized. And then set V to be the value function for that policy.",
    "start": "3192180",
    "end": "3201869"
  },
  {
    "text": "Okay, um, and so this is done quite efficiently with the linear solver.",
    "start": "3201870",
    "end": "3208350"
  },
  {
    "text": "And then the second step of policy iteration is pretend that V is the optimal value function,",
    "start": "3208350",
    "end": "3216150"
  },
  {
    "text": "and update Pi of S, you know, using the Bellman's equations for the optimal value function,",
    "start": "3216150",
    "end": "3225975"
  },
  {
    "text": "right, or updated, um, as you saw right how you update Pi of S. And then you iterate,",
    "start": "3225975",
    "end": "3232575"
  },
  {
    "text": "and then give it a new policy, you then solve that linear system equations for your new policy Pi.",
    "start": "3232575",
    "end": "3238289"
  },
  {
    "text": "So you get a new V_Pi and you keep on iterating these two steps, um, until convergence, okay? Yeah.",
    "start": "3238290",
    "end": "3245160"
  },
  {
    "text": "[inaudible]",
    "start": "3245160",
    "end": "3261150"
  },
  {
    "text": "Yeah, yep. Yes, that's right. So in, in, in value, ah, yeah, yeah, yeah, yeah.",
    "start": "3261150",
    "end": "3267825"
  },
  {
    "text": "So in, in value iteration, um, ah, actu- in value iteration think about",
    "start": "3267825",
    "end": "3273869"
  },
  {
    "text": "value iterations as waiting to the end to compute Pi of S, right? Solve for v star first, and then compute Pi of S. Whereas in policy iteration,",
    "start": "3273870",
    "end": "3280515"
  },
  {
    "text": "we're coming up with a new policy on every single iteration, right? Okay? So, um, pros and cons of poly- and,",
    "start": "3280515",
    "end": "3289815"
  },
  {
    "text": "and it turns out that this algorithm will also converge to the optimal policy. Um, pros and cons of policy iteration versus value iteration.",
    "start": "3289815",
    "end": "3298065"
  },
  {
    "text": "Policy iteration requires solving this linear system of equations in order to, um, get V_Pi.",
    "start": "3298065",
    "end": "3305234"
  },
  {
    "text": "And so it turns out that if you have a relatively small state space, um, like if you have 11 states,",
    "start": "3305235",
    "end": "3311940"
  },
  {
    "text": "it's really easy to solve a linear system of equations, ah, you know, of 11 equations in order to get V_Pi.",
    "start": "3311940",
    "end": "3319020"
  },
  {
    "text": "And so in a relatively small set of states like 11 states or really anything, you know, like a few hundred states, um,",
    "start": "3319020",
    "end": "3325605"
  },
  {
    "text": "policy iteration would work quite quickly. Ah, but if you have a [NOISE] relatively large set of states,",
    "start": "3325605",
    "end": "3332175"
  },
  {
    "text": "you know, like 10,000 states or, or, or a million states. Um, then this step would be much slower.",
    "start": "3332175",
    "end": "3338970"
  },
  {
    "text": "At least if you do it right by solving linear system of equations and then I would favor a value iteration over policy iterations.",
    "start": "3338970",
    "end": "3345585"
  },
  {
    "text": "So for larger problems, usually value iteration will, um, ah, ah,",
    "start": "3345585",
    "end": "3351000"
  },
  {
    "text": "usually I would use value iteration because solving this linear system of equations,",
    "start": "3351000",
    "end": "3356055"
  },
  {
    "text": "you know, is, is pretty expensive if it's- it's like a million Pi. Is a million equations and a million unknowns, that's quite expensive.",
    "start": "3356055",
    "end": "3363150"
  },
  {
    "text": "But even 11 states 11 unknowns is a very small system of equations. Um, and then one,",
    "start": "3363150",
    "end": "3368385"
  },
  {
    "text": "one other pros and cons, one of the, ah, ah, differences that- that's maybe, maybe more academic and practical.",
    "start": "3368385",
    "end": "3375050"
  },
  {
    "text": "But it turns out that if you use value iteration, um, V will converge towards V star,",
    "start": "3375050",
    "end": "3382365"
  },
  {
    "text": "but it won't ever get to exactly V star, right? So just as, if you apply gradient descent for linear regression,",
    "start": "3382365",
    "end": "3390090"
  },
  {
    "text": "gradient descent gets closer and closer and closer to the global optimum, but it never, you know,",
    "start": "3390090",
    "end": "3395714"
  },
  {
    "text": "gets exactly the global optimum. It just gets really, really close, really, really fast. Actually gradient descent, actually turns out asymptotically",
    "start": "3395715",
    "end": "3402015"
  },
  {
    "text": "converges geometrically quickly or exponentially quickly, right? But they've been never quite gets, you know, definitively to the optimal,",
    "start": "3402015",
    "end": "3408510"
  },
  {
    "text": "to the one optimal value. Whereas, you, you saw using normal equations it just jumped straight to the optimal value and there's no,",
    "start": "3408510",
    "end": "3414869"
  },
  {
    "text": "you know, converging slowly. And so value iteration converges to a V star,",
    "start": "3414870",
    "end": "3419940"
  },
  {
    "text": "but it doesn't ever end up at exactly the value of V star. Ah, this difference may be a bit academic because in practice it,",
    "start": "3419940",
    "end": "3426735"
  },
  {
    "text": "it doesn't have, ah, right? Ah, ah, but in policy iteration, um,",
    "start": "3426735",
    "end": "3432075"
  },
  {
    "text": "if you iterate this algorithm then after a finite number of iterations, ah,",
    "start": "3432075",
    "end": "3437310"
  },
  {
    "text": "this algorithm will stop changing meaning that after a certain number of iterations Pi of S will just not change anymore, right?",
    "start": "3437310",
    "end": "3445845"
  },
  {
    "text": "So you find Pi of S update the value function, and then after another integration. When you take these argmax's,",
    "start": "3445845",
    "end": "3451799"
  },
  {
    "text": "you end up with exactly the same policy. And so, ah, just- just to solve for the optimal value and the optimal policy, and then just,",
    "start": "3451799",
    "end": "3458280"
  },
  {
    "text": "you know, ah, ah, it doesn't converge- it doesn't just converge to what the optimal value.",
    "start": "3458280",
    "end": "3463610"
  },
  {
    "text": "It just gets the optimal value when it- when it converges, okay?",
    "start": "3463610",
    "end": "3468625"
  },
  {
    "text": "Um, so I think in practice I actually see value iteration used much more,",
    "start": "3468625",
    "end": "3474120"
  },
  {
    "text": "ah, ah, ah, because, um, solving these linear system equations gets expensive, you know,",
    "start": "3474120",
    "end": "3480045"
  },
  {
    "text": "if you have a larger state space but, um, value iteration, excuse me, val- I see value iteration used much more.",
    "start": "3480045",
    "end": "3486675"
  },
  {
    "text": "But if you have a small problem, you know, I think you could also use policy iteration which may converge a little bit faster.",
    "start": "3486675",
    "end": "3492750"
  },
  {
    "text": "If, if you have a small problem, okay? [NOISE] All right, good.",
    "start": "3492750",
    "end": "3503505"
  },
  {
    "text": "So the last thing is, um, kinda putting it together, right?",
    "start": "3503505",
    "end": "3509655"
  },
  {
    "text": "And what if you don't know [NOISE].",
    "start": "3509655",
    "end": "3521530"
  },
  {
    "text": "So it turns out that when you apply this to a practical problem,",
    "start": "3521570",
    "end": "3528030"
  },
  {
    "text": "you know, in- in- in robotics right. Um, one common scenario you run into is if you do not know what is P of S, A.",
    "start": "3528030",
    "end": "3538950"
  },
  {
    "text": "If you don't know the state transition priorities right. So when we built the MDP we said, well,",
    "start": "3538950",
    "end": "3544155"
  },
  {
    "text": "let's say the robot if you're going off you know, has a 0.8 chance of going off and a 0.1 chance of veering off to the left or right.",
    "start": "3544155",
    "end": "3552480"
  },
  {
    "text": "If you actually- again it's a very simplified robot. But, if you build a actual robot or build a helicopter or whatever,",
    "start": "3552480",
    "end": "3560310"
  },
  {
    "text": "play- play- play chess against an opponent. Uh, the state transition probabilities are often not known in advance.",
    "start": "3560310",
    "end": "3566445"
  },
  {
    "text": "And so in many MDP implementations you need to estimate this from data.",
    "start": "3566445",
    "end": "3575955"
  },
  {
    "text": "And so the workflow of many reinforcement learning projects will be that,",
    "start": "3575955",
    "end": "3581490"
  },
  {
    "text": "um, you will have some policy and have the robot run around, you know, just have a robot run around a maze and count",
    "start": "3581490",
    "end": "3588599"
  },
  {
    "text": "up of all the times you had to take the action north, how often did it actually go north and how",
    "start": "3588600",
    "end": "3593849"
  },
  {
    "text": "often do they veer off to the left or right, right? And so you use those statistics to estimate the state transition probabilities.",
    "start": "3593850",
    "end": "3599285"
  },
  {
    "text": "So let me just write this out. So you estimate. So after you're taking maybe a random policy it takes some policy,",
    "start": "3599285",
    "end": "3607085"
  },
  {
    "text": "executes some policy in the MDP for a while. And then you would estimate this from data.",
    "start": "3607085",
    "end": "3613380"
  },
  {
    "text": "And so, the obvious formula would be, estimate P of Sa S prime to be number of times took action a,",
    "start": "3613380",
    "end": "3621670"
  },
  {
    "text": "in the state S and got to S prime",
    "start": "3624320",
    "end": "3634990"
  },
  {
    "text": "and divide that by the number of times you took",
    "start": "3635150",
    "end": "3641339"
  },
  {
    "text": "action a in state S,  right.",
    "start": "3641340",
    "end": "3648540"
  },
  {
    "text": "So P of Sa S prime estimates- does actually a maximum likelihood estimate. When you look at the number of times,",
    "start": "3648540",
    "end": "3654810"
  },
  {
    "text": "you took action a in state S, and of that was a fraction of times you got to the state S prime right.",
    "start": "3654810",
    "end": "3662680"
  },
  {
    "text": "Or one over S and the above is 0, 0 right.",
    "start": "3665330",
    "end": "3673110"
  },
  {
    "text": "[NOISE] And a common heuristic is, if you've never taken this action in this state before,",
    "start": "3673110",
    "end": "3680805"
  },
  {
    "text": "if the number of times you try action A in state S is 0. So you've never tried this action in this state. So you have no idea what it's going to do.",
    "start": "3680805",
    "end": "3687510"
  },
  {
    "text": "They just assume that the state transition probability is 1 over 11, right? That it randomly takes you to another state.",
    "start": "3687510",
    "end": "3694995"
  },
  {
    "text": "So this would be common heuristics that people use when implementing reinforcement learning algorithms, okay?",
    "start": "3694995",
    "end": "3700660"
  },
  {
    "text": "And it turns out that you can use Laplace smoothing for this if you wish,",
    "start": "3701450",
    "end": "3709095"
  },
  {
    "text": "but you don't have to. Because, so you're in Laplace smoothing right. So it would be, you know, adds 1 to the numerator and add 11 to the denominator would be,",
    "start": "3709095",
    "end": "3718995"
  },
  {
    "text": "if you were to use Laplace smoothing, which avoids the problems of 0 over 0s as well. But it turns out that unlike the Naive Bayes algorithm,",
    "start": "3718995",
    "end": "3727810"
  },
  {
    "text": "these solvers of MDPs are not that sensitive to 0 values.",
    "start": "3728150",
    "end": "3733454"
  },
  {
    "text": "So if- if one of your estimates were probably a 0, you know, unlike Naive Bayes' where having a 0 probability was very",
    "start": "3733455",
    "end": "3741119"
  },
  {
    "text": "problematic for the classifications made by Naive Bayes, it turns out that MDP solvers,",
    "start": "3741120",
    "end": "3747450"
  },
  {
    "text": "including evaluation of policy iteration, they do not give sort of nonsensical/horrible results just because of a few probabilities that are exactly 0.",
    "start": "3747450",
    "end": "3756855"
  },
  {
    "text": "And so in practice, you can use Laplace smoothing if you wish. But because the reinforcement learning algorithms don't- don't perform",
    "start": "3756855",
    "end": "3766320"
  },
  {
    "text": "that badly if these estimates often will be a zero in practice, Laplace moving is not commonly unison.",
    "start": "3766320",
    "end": "3771780"
  },
  {
    "text": "What I just wrote is- is more common. Okay.",
    "start": "3771780",
    "end": "3775960"
  },
  {
    "text": "So to put it together.",
    "start": "3781550",
    "end": "3785950"
  },
  {
    "text": "All right, if I give you",
    "start": "3802250",
    "end": "3808710"
  },
  {
    "text": "a robot and asked you to implement a MDP Solver to find the good policy for this robot,",
    "start": "3808710",
    "end": "3815025"
  },
  {
    "text": "what you will do is the following.",
    "start": "3815025",
    "end": "3817960"
  },
  {
    "text": "Take actions with respect to some policy pi.",
    "start": "3822530",
    "end": "3826900"
  },
  {
    "text": "To get the experience in the MDP.",
    "start": "3834490",
    "end": "3838170"
  },
  {
    "text": "Right. So go ahead and let your robot lose and have it execute some policy for awhile.",
    "start": "3840310",
    "end": "3848280"
  },
  {
    "text": "And then update estimates of P of Sa.",
    "start": "3852350",
    "end": "3856870"
  },
  {
    "text": "Based on the observations of whether robot goes and takes different states, update- update the estimates of P of Sa.",
    "start": "3858590",
    "end": "3866559"
  },
  {
    "text": "Solve, um, Bellman's equation using value iteration",
    "start": "3868070",
    "end": "3879999"
  },
  {
    "text": "to get V and then update.",
    "start": "3887270",
    "end": "3894070"
  },
  {
    "text": "So this is the value iteration we are putting together. If you want to plug in policy innovation instead in this step that's also okay.",
    "start": "3906560",
    "end": "3916155"
  },
  {
    "text": "But so if you actually get the robot, um, you know, yeah right- right.",
    "start": "3916155",
    "end": "3927420"
  },
  {
    "text": "If you actually get a robot, uh, where you do not know in advance the state transition probabilities,",
    "start": "3927420",
    "end": "3932535"
  },
  {
    "text": "then this is what you would do in order to, um, iterate a few times I guess.",
    "start": "3932535",
    "end": "3937950"
  },
  {
    "text": "Repeatedly find a- find a- find a policy given your current estimate of the state transition probabilities.",
    "start": "3937950",
    "end": "3944579"
  },
  {
    "text": "Get some experience, update your estimates, find a new policy and kind of repeat this process until hopefully it converges to a good policy.",
    "start": "3944580",
    "end": "3952410"
  },
  {
    "text": "Okay.",
    "start": "3952410",
    "end": "3954220"
  },
  {
    "text": "Now just to add more color and more richness to this,",
    "start": "3963200",
    "end": "3969645"
  },
  {
    "text": "we usually think of-",
    "start": "3969645",
    "end": "3972910"
  },
  {
    "text": "we usually think of the reward function as being given,",
    "start": "3976970",
    "end": "3982290"
  },
  {
    "text": "right, as part of the problem specification. But sometimes you see that the reward function may be unknown.",
    "start": "3982290",
    "end": "3989700"
  },
  {
    "text": "And so for example, if you're building a stock trading application and the reward is the returns on a certain day,",
    "start": "3989700",
    "end": "3996900"
  },
  {
    "text": "it may not be a function of the state and it may be a little bit random. Um, or if your robot is running around but depending on where it goes,",
    "start": "3996900",
    "end": "4005090"
  },
  {
    "text": "it may hit different bumps in the road and you want to give it a penalty every time it hits the bump. We're going to build a self-driving car right,",
    "start": "4005090",
    "end": "4010789"
  },
  {
    "text": "every time it hits a bump, hits a pothole, you give it a negative reward, then sometimes the rewards are a random function of the environments.",
    "start": "4010790",
    "end": "4017360"
  },
  {
    "text": "And so sometimes you can also estimate the expected value of a reward. But- but in- in some applications,",
    "start": "4017360",
    "end": "4023599"
  },
  {
    "text": "if the reward is a random function of the state, then this process allows you to also estimate the expected value of the reward from",
    "start": "4023599",
    "end": "4030500"
  },
  {
    "text": "every state and then running this will help you to converge. Okay yeah. [inaudible]",
    "start": "4030500",
    "end": "4051119"
  },
  {
    "text": "Yeah, cool. [NOISE]. [inaudible] Yeah, cool. Great question. So let me, let me talk about exploration, right.",
    "start": "4051120",
    "end": "4056519"
  },
  {
    "text": "So it turns out that, um, this one [NOISE] so it turns out",
    "start": "4056520",
    "end": "4062400"
  },
  {
    "text": "this algorithm will work okay for some problems but the- the- there's one other, ah, again to add richness to this,",
    "start": "4062400",
    "end": "4069194"
  },
  {
    "text": "there's one other, um, issue that this is not solving which is the exploration problem.",
    "start": "4069195",
    "end": "4075090"
  },
  {
    "text": "And [NOISE] in, in reinforcement learning sometimes you hear the term exploration versus exploitation, [NOISE] right?",
    "start": "4075090",
    "end": "4082005"
  },
  {
    "text": "Which is, um, let me use a different MDP example, right.",
    "start": "4082005",
    "end": "4089880"
  },
  {
    "text": "Which is, um, if your robot, you know, starts off here and if there is a, um,",
    "start": "4089880",
    "end": "4098475"
  },
  {
    "text": "plus 1 reward here, right and maybe a plus 10 reward here.",
    "start": "4098475",
    "end": "4105435"
  },
  {
    "text": "If just by chance during the first time you run the robot it",
    "start": "4105435",
    "end": "4110819"
  },
  {
    "text": "happens to find its way to the plus 1 then if you run this algorithm,",
    "start": "4110820",
    "end": "4116505"
  },
  {
    "text": "it may figure out that going to the plus 1 is a good way, right? We were giving it a discount factor and there is",
    "start": "4116505",
    "end": "4122850"
  },
  {
    "text": "a fuel surcharge of minus 0.02 on every step. So if just by chance your robot happens to find its way to",
    "start": "4122850",
    "end": "4130049"
  },
  {
    "text": "the plus 1 the first few times you run this algorithm then this algorithm is, um, is uh, locally greedy, right.",
    "start": "4130050",
    "end": "4136575"
  },
  {
    "text": "Ah, it may figure out that this is a great way to get to plus 1 reward and then the world ends, it stops giving these minus 0.02 surcharges for fuel.",
    "start": "4136575",
    "end": "4146325"
  },
  {
    "text": "And so this particular algorithm may converge to a bad,",
    "start": "4146325",
    "end": "4151470"
  },
  {
    "text": "you know, kind of local optima where it's always heading to the plus 1.",
    "start": "4151470",
    "end": "4156779"
  },
  {
    "text": "And as it hits the plus 1, it sometimes will veer off randomly right and get a little bit more experience",
    "start": "4156780",
    "end": "4162795"
  },
  {
    "text": "in the right half of the state space and end up with pretty good estimates of, ah, what happens in the right half of this state space.",
    "start": "4162795",
    "end": "4169815"
  },
  {
    "text": "And, um, and it may never find this hard-to-define plus 10 pot of gold over on the lower left, okay?",
    "start": "4169815",
    "end": "4177359"
  },
  {
    "text": "So this problem is sometimes called actually, well, it is called the exploration versus exploitation problem which is, um,",
    "start": "4177360",
    "end": "4187109"
  },
  {
    "text": "when you're acting in an MDP, you know, how aggressively or how greedy should you be",
    "start": "4187110",
    "end": "4192690"
  },
  {
    "text": "at just taking actions to maximize your rewards? And so the algorithm we describe is relatively greedy, right?",
    "start": "4192690",
    "end": "4202355"
  },
  {
    "text": "Meaning that, um, is taking your best estimate of the state transition probabilities and rewards and is just taking whatever actions and this is really saying, you know,",
    "start": "4202355",
    "end": "4212060"
  },
  {
    "text": "pick the policy that maximizes your current estimate of the expected rewards and it's just acting greedily,",
    "start": "4212060",
    "end": "4218625"
  },
  {
    "text": "meaning on every step it's just executing the policy that it thinks allows it to maximize the expected payoff, right?",
    "start": "4218625",
    "end": "4226635"
  },
  {
    "text": "And what this algorithm does not do at all is explore which is",
    "start": "4226635",
    "end": "4231869"
  },
  {
    "text": "the process of taking actions that may appear less optimal at the outset,",
    "start": "4231870",
    "end": "4236940"
  },
  {
    "text": "um, such as if the robot hasn't seen this plus 10 reward, it doesn't know how to get there,",
    "start": "4236940",
    "end": "4242324"
  },
  {
    "text": "maybe it should, you know, just try going left a couple of times just for the heck of it, right, to see what happens.",
    "start": "4242325",
    "end": "4248400"
  },
  {
    "text": "Because even if it seems less, even if going left from the perspective of the current state of the knowledge of the robot,",
    "start": "4248400",
    "end": "4255450"
  },
  {
    "text": "um, maybe if it tries some new things it's never tried before maybe it will find a new pot of gold, okay.",
    "start": "4255450",
    "end": "4261435"
  },
  {
    "text": "So this is called the exploration versus exploitation trade-off, um, and this is actually not just an academic problem.",
    "start": "4261435",
    "end": "4269190"
  },
  {
    "text": "It turns out that some of the large online web advertising platforms, ah, have the same problem as well.",
    "start": "4269190",
    "end": "4275639"
  },
  {
    "text": "And again, I, I, I, I have, have mixed feelings about the advertising business. It's very lucrative but it causes other problems, um, as well but,",
    "start": "4275640",
    "end": "4282375"
  },
  {
    "text": "but it turns out that for some of the large online ad platforms, um, ah, you know, when a,",
    "start": "4282375",
    "end": "4288135"
  },
  {
    "text": "when an advertiser, um, starts selling a new ad or your posts and you add on one of the large online ad platforms,",
    "start": "4288135",
    "end": "4294885"
  },
  {
    "text": "the ad platform does not know who is most likely to click on this ad, right? And so pure explo- pure exploitation,",
    "start": "4294885",
    "end": "4303525"
  },
  {
    "text": "boy exploitation has such horrible connotations especially [LAUGHTER] for online ad platforms. Ah, it's the technical term, not a,",
    "start": "4303525",
    "end": "4309795"
  },
  {
    "text": "not a social term when used in this context. But the pure, you know, reinforcement learning sends exploitation policy not,",
    "start": "4309795",
    "end": "4316255"
  },
  {
    "text": "not the other even more horrible sense of exploitation. Um, would be to always just show you,",
    "start": "4316255",
    "end": "4321565"
  },
  {
    "text": "show, show users the ads that, you know, they are most likely to click on to drive short-term revenues",
    "start": "4321565",
    "end": "4326775"
  },
  {
    "text": "because we want to just show people the ad they're most likely to click on to drive short-term revenue. Whereas an exploration policy for large,",
    "start": "4326775",
    "end": "4333030"
  },
  {
    "text": "you know, some of these large online ad platforms, is to show people some ads that may not be what we think you are most likely to click on in this moment",
    "start": "4333030",
    "end": "4339780"
  },
  {
    "text": "in time but by showing you that ad or by showing the pool of users an ad that you might be less likely to click on,",
    "start": "4339780",
    "end": "4345360"
  },
  {
    "text": "maybe we'll learn more about your interests. And that, um, increases the effectiveness of these large or",
    "start": "4345360",
    "end": "4350865"
  },
  {
    "text": "these ad platforms at finding more relevant ads, right? And for example, I don't know, um, probably not- I, I, I guess,",
    "start": "4350865",
    "end": "4358035"
  },
  {
    "text": "ah there are probably no advertisements for ah, Mars landers as I know. But if the large online ad platforms",
    "start": "4358035",
    "end": "4364019"
  },
  {
    "text": "don't know that I'm actually pretty interested in Mars landers if it shows me an ad for a Mars lander which I don't think such a thing exists, right?",
    "start": "4364020",
    "end": "4370440"
  },
  {
    "text": "If I did I click on it and they may learn that showing me ads for Mars landers is a great thing, right, ah, or, or some other thing that you may not know you're interested in.",
    "start": "4370440",
    "end": "4378449"
  },
  {
    "text": "So this is actually a real problem. There are, um, some of the large online ad platforms, ah, um,",
    "start": "4378450",
    "end": "4384870"
  },
  {
    "text": "actually do explicitly consider exploration versus exploitation and make sure that sometimes it shows ads",
    "start": "4384870",
    "end": "4391440"
  },
  {
    "text": "that may not be the most likely you'll click on but, you know, allows us to gather information to then be better",
    "start": "4391440",
    "end": "4397469"
  },
  {
    "text": "situated to figure out where the future rewards to be better positioned to, ah, learn how to match ads not just to you but to other users like you, right?",
    "start": "4397470",
    "end": "4406905"
  },
  {
    "text": "Um, sorry. Okay but so in order to make sure their reinforcement learning algorithm,",
    "start": "4406905",
    "end": "4413054"
  },
  {
    "text": "um, ah, explores as was exploits a, um, ah, a common a, a modification to",
    "start": "4413055",
    "end": "4421050"
  },
  {
    "text": "this would be tak- instead of taking actions with respect to Pi, you may have a, um, a 0.9 chance.",
    "start": "4421050",
    "end": "4433800"
  },
  {
    "text": "[NOISE] Respect to Pi and 0.1 chance, [NOISE] take an action randomly, okay.",
    "start": "4433800",
    "end": "4442800"
  },
  {
    "text": "And so, um, this particular, [NOISE] exploration policy is called",
    "start": "4442800",
    "end": "4451335"
  },
  {
    "text": "Epsilon-greedy where on every time step and on every time step you toss a biased coin.",
    "start": "4451335",
    "end": "4457350"
  },
  {
    "text": "But on every time step, let's say 90% of the chance you execute whatever you think is",
    "start": "4457350",
    "end": "4463800"
  },
  {
    "text": "the current best policy and with 10% chance you just take a random action. And this type of exploration policy, um,",
    "start": "4463800",
    "end": "4471270"
  },
  {
    "text": "increases the odds that you know, every now and then maybe just by chance, right, it'll find it's way to the plus 10 pot of",
    "start": "4471270",
    "end": "4478260"
  },
  {
    "text": "gold, and learn state transition probabilities and, and, and then eventually, um,",
    "start": "4478260",
    "end": "4483450"
  },
  {
    "text": "end up exploring the state-space more thoroughly, okay. Um, this is called Epsilon-greedy exploration and,",
    "start": "4483450",
    "end": "4490890"
  },
  {
    "text": "um, it's a little bit of a misnomer I think. So in, in, in the way we think of Epsilon-greedy Epsilon is, um,",
    "start": "4490890",
    "end": "4497550"
  },
  {
    "text": "say 0.1 is the chance of taking a random action instead of the greedy action.",
    "start": "4497550",
    "end": "4502800"
  },
  {
    "text": "Um, this algorithm is, has always been a little bit strangely named because, ah, if 0, 0.1 is actually the chance of you acting randomly, right.",
    "start": "4502800",
    "end": "4511949"
  },
  {
    "text": "So Epsilon greedy sounds like you're being greedy 0.1 of the time but, but you're actually taking actions randomly 0.1 at a time",
    "start": "4511950",
    "end": "4518880"
  },
  {
    "text": "so Epsilon-greedy is actually maybe 1 minus Epsilon-greedy. So th- these name has always been a little bit,",
    "start": "4518880",
    "end": "4524625"
  },
  {
    "text": "um, off but that's what, that's, that's how people use this term. Epsilon-greedy exploration means Epsilon of the time which is the hyperparameter,",
    "start": "4524625",
    "end": "4532034"
  },
  {
    "text": "which is the parameter of the algorithm you act randomly into- instead of going to what you think is the best policy, okay.",
    "start": "4532035",
    "end": "4539250"
  },
  {
    "text": "And it turns out that, um, if you implement this algorithm with, um,",
    "start": "4539250",
    "end": "4545085"
  },
  {
    "text": "Epsilon-greedy exploration then this, ah, ah, this algorithm,",
    "start": "4545085",
    "end": "4550649"
  },
  {
    "text": "ah, will converge to the optimal policy for any discrete state MDP, right.",
    "start": "4550649",
    "end": "4556320"
  },
  {
    "text": "Ah, sometimes they take a long time because, you know, if there's a, if it takes a long time to randomly find plus 10, it, it,",
    "start": "4556320",
    "end": "4562889"
  },
  {
    "text": "it could take a long time before it randomly stumbles upon the plus 10 pot of gold. But, um, this algorithm with an,",
    "start": "4562890",
    "end": "4569160"
  },
  {
    "text": "with an exploration policy will converge to the optimal, um, will, will converge to the optimal policy for any MDP. What is your question?",
    "start": "4569160",
    "end": "4577860"
  },
  {
    "text": "[inaudible]",
    "start": "4577860",
    "end": "4587729"
  },
  {
    "text": "Yeah, yeah, so, right, should you always keep epsilon constant or should you use a dynamic epsilon. So yes, ah, there are, there, there are.",
    "start": "4587729",
    "end": "4593790"
  },
  {
    "text": "There are many heuristics for how to explore, ah. One reasonable thing to do would be we start with",
    "start": "4593790",
    "end": "4598800"
  },
  {
    "text": "a large value of epsilon and we slowly shrink it. Um, another common heuristic would be, um, there is a different,",
    "start": "4598800",
    "end": "4604680"
  },
  {
    "text": "ah, type of exploration called Boltzmann exploration, which you can look up if you want which is, ah, if you think that the value of going north is,",
    "start": "4604680",
    "end": "4611640"
  },
  {
    "text": "um, you know, 10 and the value of going south is 1, then there is such a huge difference that you",
    "start": "4611640",
    "end": "4617610"
  },
  {
    "text": "should bias your action to upgrading to the bigger result, the, the bigger reward and,",
    "start": "4617610",
    "end": "4622679"
  },
  {
    "text": "ah, you could have the probability be f E to the value basically time, ah, divide, times of a times the scaling factor, right?",
    "start": "4622680",
    "end": "4630570"
  },
  {
    "text": "So that's called Boltzmann exploration where instead of having a 10% chance of taking an action completely at random,",
    "start": "4630570",
    "end": "4636179"
  },
  {
    "text": "ah, you could just, you know, have a very strong bias to, heading toward the higher values but also have some probability to go into",
    "start": "4636180",
    "end": "4643860"
  },
  {
    "text": "lower values but where the exact probability depends on the difference in ideal values is. So another probably the, I think Epsilon-greedy,",
    "start": "4643860",
    "end": "4651735"
  },
  {
    "text": "I feel like I see this used the most often for these types of MDPs and then Boltzmann exploration which is why I just drive this also. Two more questions before we wrap up, go ahead.",
    "start": "4651735",
    "end": "4661530"
  },
  {
    "text": "[inaudible]",
    "start": "4661530",
    "end": "4668250"
  },
  {
    "text": "Yes, can you get a reward for reaching states you've never seen before? Yes, there is a fascinating line of research called intrinsic reinforcement learning.",
    "start": "4668250",
    "end": "4675764"
  },
  {
    "text": "Ah, and it really started by search indexing. If you Google for intrinsic, intrinsic motivation, you find some research papers on.",
    "start": "4675765",
    "end": "4683870"
  },
  {
    "text": "Um, and then there was some recent followup work I think by DeepMind or some other groups but intrinsic motivation",
    "start": "4683870",
    "end": "4689239"
  },
  {
    "text": "is the term to Google where you reward a reinforcement learning algorithm for finding new things about the world. Just one last question.",
    "start": "4689240",
    "end": "4695560"
  },
  {
    "text": "How many actions you should take with respect to Pi? Sorry, say that again?",
    "start": "4695560",
    "end": "4701000"
  },
  {
    "text": "How many actions you should take with respect to Pi before updating the Pi?",
    "start": "4701000",
    "end": "4706510"
  },
  {
    "text": "I see, right. How often, how many actions you should you take before updating Pi? Um, there's no harm  to do it as frequently as possible.",
    "start": "4706510",
    "end": "4715545"
  },
  {
    "text": "Ah, in the, if you're doing this with a real robot what, you know, I've seen is, um,",
    "start": "4715545",
    "end": "4721020"
  },
  {
    "text": "this is sometimes going to physical robot and so, you know, I don't know, when we're flying helicopters you go out to the field for the day,",
    "start": "4721020",
    "end": "4727949"
  },
  {
    "text": "collect a lot of data, and they go back to the lab in the evening and rerun the algorithms. Ah, but if there's no barrier to running this all the time,",
    "start": "4727950",
    "end": "4734910"
  },
  {
    "text": "then it doesn't hurt the performance, it's just running as frequently as it can. All right, that's it for basis of MDP.",
    "start": "4734910",
    "end": "4741540"
  },
  {
    "text": "Um, on Wednesday, we'll continue with generalizing all these to continuous state MDPs.",
    "start": "4741540",
    "end": "4747915"
  },
  {
    "text": "Okay, let's break, I'll see you on Wednesday.",
    "start": "4747915",
    "end": "4750520"
  }
]