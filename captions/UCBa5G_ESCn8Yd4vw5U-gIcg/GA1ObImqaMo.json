[
  {
    "text": " So this is a good\nlecture to make",
    "start": "0",
    "end": "7540"
  },
  {
    "text": "sure you're sitting by someone\nyou like to talk to because you know whenever\nlocks get involved,",
    "start": "7540",
    "end": "12880"
  },
  {
    "text": "there could be some heads get\nstarted exploding a little bit and thinking about all\nthree of the cases,",
    "start": "12880",
    "end": "17960"
  },
  {
    "text": "so we're going to\nwork through some of those examples a little bit. But to get started,\nlet's just make",
    "start": "17960",
    "end": "24490"
  },
  {
    "text": "sure we're all on the same\npage with a few terms, and those terms are deadlock,\nlivelock, and starvation.",
    "start": "24490",
    "end": "32840"
  },
  {
    "text": "OK. I just want to go through\nthose because these are all issues that can occur\nwhen you have synchronization",
    "start": "32840",
    "end": "39250"
  },
  {
    "text": "problems in your\nprogram, so I want to make sure I give\nsome examples of these, so we're clear on\nthe terminology,",
    "start": "39250",
    "end": "44600"
  },
  {
    "text": "and then we'll use\nthat terminology later in the lecture. Deadlock, and it's a term\nthat I've heard people,",
    "start": "44600",
    "end": "51070"
  },
  {
    "text": "those of you in the audience\nhave said earlier in class, so it might be intuitive\nwhat it might mean.",
    "start": "51070",
    "end": "56870"
  },
  {
    "text": "Here's an example\nthat I drew up. This is an\nintersection, and I've",
    "start": "56870",
    "end": "63500"
  },
  {
    "text": "got four cars on\nthe intersection and my claim is that none of\nthe cars can make progress.",
    "start": "63500",
    "end": "69830"
  },
  {
    "text": "So do you agree with the claim? And so if cars are not\nallowed to back up,",
    "start": "69830",
    "end": "77510"
  },
  {
    "text": "what does every car need\nin order to make progress? ",
    "start": "77510",
    "end": "83409"
  },
  {
    "text": "[INAUDIBLE] It kind of needs the road\nin front of it to be clear.",
    "start": "83410",
    "end": "88649"
  },
  {
    "text": "So this yellow car needs the\nroad in front of it to be clear, but that part of the road is\nnot clear because it is held",
    "start": "88650",
    "end": "96950"
  },
  {
    "text": "or it's occupied\nby the green car. So why doesn't the yellow car\njust wait for the green car",
    "start": "96950",
    "end": "103700"
  },
  {
    "text": "to get out of the way? Well, the green car\ncan't make progress because it depends\non a resource,",
    "start": "103700",
    "end": "109850"
  },
  {
    "text": "a part of the road that's\nheld by the next yellow car, and so on, and so on. So notice what the\nconditions are here",
    "start": "109850",
    "end": "116660"
  },
  {
    "text": "for this form of deadlock. Everybody needs to have a\nresource that they can't get,",
    "start": "116660",
    "end": "123380"
  },
  {
    "text": "and you can't-- and then\nthe idea is that you don't relinquish that resource\nuntil you get everything that",
    "start": "123380",
    "end": "129860"
  },
  {
    "text": "you need to make progress. So in this case,\nthe yellow car is kind of holding onto or\noccupying this territory,",
    "start": "129860",
    "end": "136710"
  },
  {
    "text": "but it needs this\nterritory, and it's not going to let go of this\nuntil it finishes its job. And then finally, the\nproblem is that we have",
    "start": "136710",
    "end": "143819"
  },
  {
    "text": "a circular set of dependencies. I can't go because\nI'm waiting on you. You can't go because you're\nwaiting on someone else.",
    "start": "143820",
    "end": "150370"
  },
  {
    "text": "They can't go because\nthey're waiting on me. And so these are-- you need\nall of these conditions",
    "start": "150370",
    "end": "156570"
  },
  {
    "text": "to hold in order for\nthere to be deadlock. So, for example, here's a\nphoto that I took of a deadlock",
    "start": "156570",
    "end": "165810"
  },
  {
    "text": "situation in real life, which\nis very similar to the cartoon that I put here is\na bus, and the bus",
    "start": "165810",
    "end": "172110"
  },
  {
    "text": "made a little bit wider\nturn than it should have. Or you could argue\nthat this car probably",
    "start": "172110",
    "end": "177960"
  },
  {
    "text": "ignored a little\nsomething on the road that says, please don't pass\nthis line because buses need",
    "start": "177960",
    "end": "183960"
  },
  {
    "text": "to turn here, and\nall of a sudden the bus can't make progress\nbecause that car is there.",
    "start": "183960",
    "end": "190080"
  },
  {
    "text": "The car can't make progress\nbecause the bus is there. And why is it the case\nactually that we get deadlock?",
    "start": "190080",
    "end": "195630"
  },
  {
    "text": "We need the ability-- we\nneed to be in a situation where we can't\nrelinquish resources.",
    "start": "195630",
    "end": "201840"
  },
  {
    "text": "So relinquishing the\nresource here would be what? Would be backing up, and you\ncan't see it from my photo,",
    "start": "201840",
    "end": "209045"
  },
  {
    "text": "but neither of these folks can\nback up because everybody's kind of filled in behind them. And so ultimately, I mean, it\ncertainly isn't actual deadlock",
    "start": "209045",
    "end": "216144"
  },
  {
    "text": "because otherwise, if\nit was a real deadlock, the road would still\nLook like this. So eventually people\nstart backing up,",
    "start": "216145",
    "end": "222010"
  },
  {
    "text": "but you have effective deadlock. Here are a few more examples\nof deadlock for our more",
    "start": "222010",
    "end": "229890"
  },
  {
    "text": "nature loving folks. And so make sure you\ncan convince yourself",
    "start": "229890",
    "end": "234930"
  },
  {
    "text": "why these are deadlock. Nobody is willing to relinquish\na resource because they don't",
    "start": "234930",
    "end": "240960"
  },
  {
    "text": "trust the other party,\nand since that's the case, no progress is being made.",
    "start": "240960",
    "end": "246380"
  },
  {
    "text": " Now, of course, the reason\nwhy I'm telling you all this",
    "start": "246380",
    "end": "252150"
  },
  {
    "text": "can obviously happen\nin computing systems. Like a simple example\nmight be, imagine",
    "start": "252150",
    "end": "257699"
  },
  {
    "text": "we had thread A and thread B,\nand thread A pulls data out",
    "start": "257700",
    "end": "262740"
  },
  {
    "text": "of some work queue,\nand puts results in some output work queue.",
    "start": "262740",
    "end": "268199"
  },
  {
    "text": "And thread B is supposed to\npull data out of this work queue and put the data back\nin the one on the top.",
    "start": "268200",
    "end": "274410"
  },
  {
    "text": "So you might be in the case\nwhere thread A says, well, I'm not going to pull any new\nwork because I have nowhere to put my output.",
    "start": "274410",
    "end": "280530"
  },
  {
    "text": "So thread A doesn't drain its\ninput and it's waiting on B, but B can't make any progress\nbecause there's nowhere for B",
    "start": "280530",
    "end": "288150"
  },
  {
    "text": "to put its output,\nso that's an example. And the example of deadlock\nthat we hit earlier in class",
    "start": "288150",
    "end": "295153"
  },
  {
    "text": "is when we were talking\nabout message passing. Remember I said, oh,\nthere's this subtle bug in our original\nmessage passing code",
    "start": "295153",
    "end": "301410"
  },
  {
    "text": "where we said everybody\nwas going to send and wait for their message\nto be received,",
    "start": "301410",
    "end": "306660"
  },
  {
    "text": "and then they would\nturn around and receive, and so that was an example\nof deadlock as well.",
    "start": "306660",
    "end": "312100"
  },
  {
    "text": "Everybody was blocked on\nessentially the same call. And as I alluded to earlier,\nyou need these four conditions",
    "start": "312100",
    "end": "318480"
  },
  {
    "text": "for deadlock to actually occur. We need to have\nresources that can only be held by one party at a time.",
    "start": "318480",
    "end": "325630"
  },
  {
    "text": "That's the mutual exclusion. Only one car can exist\nin this part of the road, or only one thread has\ndata in its input--",
    "start": "325630",
    "end": "335099"
  },
  {
    "text": "this input queue is\nexclusively for this thread. You have to have a situation\nwhere you can't back up.",
    "start": "335100",
    "end": "341880"
  },
  {
    "text": "So once you start\nthis process and you acquire the part of the\nroad that you're in,",
    "start": "341880",
    "end": "347770"
  },
  {
    "text": "we're assuming that you\ncan't back up or relinquish those resources to free\nthings for other people.",
    "start": "347770",
    "end": "353350"
  },
  {
    "text": "The only way you can free up\nresources is to keep going and complete things,\ncomplete jobs.",
    "start": "353350",
    "end": "359940"
  },
  {
    "text": "Last is no-- 2 and 3 are kind of similar\nin that there's no preemption.",
    "start": "359940",
    "end": "366138"
  },
  {
    "text": "If you actually could take\nthe thread off the processor and relinquish the\nresources, that's kind of basically\nrelinquishing resources.",
    "start": "366138",
    "end": "373570"
  },
  {
    "text": "And then the most important\none is this fourth one, which is the circular\nset of dependencies. I'm waiting on you while\nyou're waiting on me,",
    "start": "373570",
    "end": "382050"
  },
  {
    "text": "and since-- because\nif there wasn't a circular set of dependencies,\nwhat would happen here?",
    "start": "382050",
    "end": "388140"
  },
  {
    "text": "How would this resolve itself? Imagine that there were only\nthree cars in the intersection,",
    "start": "388140",
    "end": "393150"
  },
  {
    "text": "not four. If there are only\nthree cars, someone would make progress, right?",
    "start": "393150",
    "end": "398370"
  },
  {
    "text": "And as soon as they\nfinish their task, getting through\nthe intersection, they would relinquish\nresources for someone else,",
    "start": "398370",
    "end": "404690"
  },
  {
    "text": "and then someone else can\ngo, and so on, and so on. ",
    "start": "404690",
    "end": "410479"
  },
  {
    "text": "So that's a deadlock. In deadlock, nobody\nis making progress.",
    "start": "410480",
    "end": "416100"
  },
  {
    "text": "Nobody's doing anything. No progress is getting made. That's a little bit different\nthan the situation of livelock.",
    "start": "416100",
    "end": "423190"
  },
  {
    "text": "So in livelock,\nthat's a situation where you're constantly\ndoing things, but no real progress\nis being made.",
    "start": "423190",
    "end": "430590"
  },
  {
    "text": "So, for example,\nimagine that we had these cars in this intersection\nand they did have the ability",
    "start": "430590",
    "end": "435980"
  },
  {
    "text": "to back up. And so every car saw that they\nhad reached this impasse where",
    "start": "435980",
    "end": "441440"
  },
  {
    "text": "nobody could make progress,\nand imagine everybody backs up, and then everybody's like,\noh, the intersection is free,",
    "start": "441440",
    "end": "447960"
  },
  {
    "text": "I'm going to go. And they back up,\nand so on, and so on. So this is a\nsituation of livelock.",
    "start": "447960",
    "end": "454590"
  },
  {
    "text": "So it's called livelock because\neverybody's making progress. There's not-- you see operations\nhappening left and right.",
    "start": "454590",
    "end": "460560"
  },
  {
    "text": "If you had system logs, you'd be\nlike, yeah, stuff's happening. But then you'd be like, but\nnothing real is happening.",
    "start": "460560",
    "end": "467030"
  },
  {
    "text": "So this is another problem\nthat we can get into. What's the most common\nday-to-day example",
    "start": "467030",
    "end": "472160"
  },
  {
    "text": "of livelock that you run into? What's that?",
    "start": "472160",
    "end": "478310"
  },
  {
    "text": "I thought I heard a murmur. What happens all the time\nwhen you walk up to a door",
    "start": "478310",
    "end": "486250"
  },
  {
    "text": "and somebody else\nis like you go, you go, you go, that's the most\ncommon social livelock that definitely happens, where\nyou're walking and both of you",
    "start": "486250",
    "end": "493600"
  },
  {
    "text": "walk to the same\ndirection, and then you both walk the other\ndirection to let somebody go by. Those are all examples\nof real life livelock.",
    "start": "493600",
    "end": "500710"
  },
  {
    "text": "OK, so we have\nlivelock, and yeah, so livelock is a state where\nwe are actually doing stuff,",
    "start": "500710",
    "end": "505760"
  },
  {
    "text": "but nothing is all\nthat interesting. OK. And then last, there's the\ncondition of starvation,",
    "start": "505760",
    "end": "511700"
  },
  {
    "text": "and so here's\nanother road example. Imagine that there\nwas a yield sign here.",
    "start": "511700",
    "end": "517370"
  },
  {
    "text": "So the yellow cars on\nthe horizontal road had a yield sign, and\nhad to yield to traffic",
    "start": "517370",
    "end": "522699"
  },
  {
    "text": "on the main vertical road. So if this is a busy\ntime of the day,",
    "start": "522700",
    "end": "528370"
  },
  {
    "text": "and the green cars are just a\nsteady stream of green cars, they're going to make progress. We're going to get\na lot of stuff done.",
    "start": "528370",
    "end": "535310"
  },
  {
    "text": "But certain operations,\nsuch as yellow cars going, are going to get\ncompletely starved out",
    "start": "535310",
    "end": "540680"
  },
  {
    "text": "because if they have to\nyield to the green cars and the green cars never\nhave a hole in the traffic, you're just going to be\nsitting there all the time.",
    "start": "540680",
    "end": "548300"
  },
  {
    "text": "For those of you that are-- go over to the beach very often,\nit's like trying to get on 101, or sorry, get on Highway\n1 on a weekend when you're",
    "start": "548300",
    "end": "556333"
  },
  {
    "text": "stuck in Half Moon\nBay, and you're trying to turn on to\nHighway 1, and you just never get on the road.",
    "start": "556333",
    "end": "562040"
  },
  {
    "text": "So it may look like you are-- if you're debugging this thing. To you it might look\nlike, oh, shoot, maybe",
    "start": "562040",
    "end": "568280"
  },
  {
    "text": "I have deadlock because I'm\nnot seeing any yellow cars do anything, but you're\nactually we are completing",
    "start": "568280",
    "end": "574160"
  },
  {
    "text": "useful transactions when you\nare letting the green cars go. So those are just three\nthings to keep in mind throughout the lecture,\ndeadlock, livelock, starvation,",
    "start": "574160",
    "end": "581580"
  },
  {
    "text": "all things that we can mess up. All right. So before I start\ntalking about locks,",
    "start": "581580",
    "end": "587070"
  },
  {
    "text": "I think this is be a\ngood time to review this diagram that Conley put out\nin front of you last Thursday,",
    "start": "587070",
    "end": "595389"
  },
  {
    "text": "I think. Yeah, last Thursday. Yeah, so that was the first time\nwe talked about cache coherence. And so before we\nget into thinking",
    "start": "595390",
    "end": "603170"
  },
  {
    "text": "about how locks\nare implemented, I want to make sure because\nyou've only seen this once, technically, and\nthis is the first",
    "start": "603170",
    "end": "609530"
  },
  {
    "text": "you're doing\nhomeworks on this now, that people have a little\nbit of an idea about what's",
    "start": "609530",
    "end": "615200"
  },
  {
    "text": "going on here. So first of all, if\nyou had to describe the purpose of\ncache coherence, why",
    "start": "615200",
    "end": "622250"
  },
  {
    "text": "did we talk about\nthat last week at all? What's the problem that\ncache coherence solves?",
    "start": "622250",
    "end": "628340"
  },
  {
    "text": "Yes sir. We don't need to go all the way\nback to memory to deal with--",
    "start": "628340",
    "end": "634490"
  },
  {
    "text": "OK. Well, yeah. So it solves the problem\nof we want caches. Yes. Yes.",
    "start": "634490",
    "end": "639540"
  },
  {
    "text": "And if you have multiple\ncaches, they are copies of data.",
    "start": "639540",
    "end": "644839"
  },
  {
    "text": "And whenever you have copies\nof data and you have rights, you've got a real\nproblem if you've",
    "start": "644840",
    "end": "650329"
  },
  {
    "text": "got to keep those\ncopies up to date. That's the problem that cache\ncoherence largely solves.",
    "start": "650330",
    "end": "655700"
  },
  {
    "text": "Good. And I guess if you\nhad to be building",
    "start": "655700",
    "end": "660830"
  },
  {
    "text": "on that, if we\nhad to say what is the general strategy that\nthese cache coherence protocols",
    "start": "660830",
    "end": "667130"
  },
  {
    "text": "that Conley talked about? If you had to give\na high level, what",
    "start": "667130",
    "end": "672450"
  },
  {
    "text": "do they all-- what's\nthe main idea of them? Or what are some of\nthe key principles? What does this\ndiagram even mean? Yeah.",
    "start": "672450",
    "end": "677900"
  },
  {
    "text": "That is the multiple\nwith a single writer. So one version of\nthis is saying,",
    "start": "677900",
    "end": "683870"
  },
  {
    "text": "if you make copies of\nsomething, and you write to it, you have a problem keeping\nthose copies in sync.",
    "start": "683870",
    "end": "692840"
  },
  {
    "text": "Don't allow there to be copies\nif you're writing to something, right? So the first name of the\ngame is the minute you write",
    "start": "692840",
    "end": "699350"
  },
  {
    "text": "to something, all other copies\nare going to have to disappear, so that there's not a problem\nwhere you cannot access data",
    "start": "699350",
    "end": "706580"
  },
  {
    "text": "that might be stale. And how did that get ensured?",
    "start": "706580",
    "end": "712173"
  },
  {
    "text": " In other words, what is\nthis diagram actually doing?",
    "start": "712173",
    "end": "718100"
  },
  {
    "text": "So I guess, it's like\nwhen you go to [INAUDIBLE] read all the other ones go\ninvalid like [INAUDIBLE].",
    "start": "718100",
    "end": "725950"
  },
  {
    "text": "And so good. And so I'll repeat that in\na second for people remote. But the first idea that\nI want you to think about",
    "start": "725950",
    "end": "734080"
  },
  {
    "text": "is this cache coherency\ndiagram is, it's a policy, it's a rules of the\ngame that all the caches",
    "start": "734080",
    "end": "741580"
  },
  {
    "text": "have to be agreeing to. So this is the state machine. This is the logic that every\ncache executes individually",
    "start": "741580",
    "end": "751480"
  },
  {
    "text": "on their own to ensure\nthat coherence is met.",
    "start": "751480",
    "end": "756860"
  },
  {
    "text": "And one of the biggest\nparts of coherence is to make sure that when one\nperson is writing to the data,",
    "start": "756860",
    "end": "762470"
  },
  {
    "text": "nobody else is,\nnobody else has data. So the way I want you to think\nabout this is-- and Conley gave",
    "start": "762470",
    "end": "768580"
  },
  {
    "text": "you one of these\nexamples before, is I want you to think\nabout a sequence of memory",
    "start": "768580",
    "end": "773980"
  },
  {
    "text": "operations performed\nby different processors or different caches.",
    "start": "773980",
    "end": "779170"
  },
  {
    "text": "And then I want\nyou to think about what would I do if I'm cache\nzero in this situation?",
    "start": "779170",
    "end": "787089"
  },
  {
    "text": "And what would I do if I'm\ncash one in this situation? So just to start, let's just\nsay that the first cache",
    "start": "787090",
    "end": "794620"
  },
  {
    "text": "loads a variable, or\nloads an address, OK. And what that cache does is,\nwe'll talk to me about it.",
    "start": "794620",
    "end": "804020"
  },
  {
    "text": "What does that cache do? What does this text on\nthe slide actually mean? There's like issue BusRd,\nload line X in S state,",
    "start": "804020",
    "end": "810710"
  },
  {
    "text": "observe BusRd. What does that mean?  We have two caches, and let's\njust say I'm cache zero,",
    "start": "810710",
    "end": "819420"
  },
  {
    "text": "and I want to read\nfrom this address. So what do I have to do?",
    "start": "819420",
    "end": "825660"
  },
  {
    "text": "I'm just going to\nsay, what cache here is doing is it's\nbroadcasting the fact that it",
    "start": "825660",
    "end": "831540"
  },
  {
    "text": "is reading this particular\nmemory address to all the other caches, so that\nif the other caches also",
    "start": "831540",
    "end": "837660"
  },
  {
    "text": "have that line inside them, then\nthey can follow the protocol and transition accordingly.",
    "start": "837660",
    "end": "843360"
  },
  {
    "text": "Again, it brings the\ncache into position. Good. So just keep in mind\nthe name of the game",
    "start": "843360",
    "end": "848370"
  },
  {
    "text": "is that all of these caches\nare working together. And whenever the state\nof my cache changes,",
    "start": "848370",
    "end": "855959"
  },
  {
    "text": "I have to tell all the\nother caches about it because they're\nmaking decisions based",
    "start": "855960",
    "end": "861180"
  },
  {
    "text": "on knowledge of what I'm doing. So in this case, if\nI load address X,",
    "start": "861180",
    "end": "866779"
  },
  {
    "text": "I have to shout out to\nall the other caches and say, hey, by the\nway, I'm about to have",
    "start": "866780",
    "end": "871980"
  },
  {
    "text": "a copy of this, which\nbasically is saying, if you ever get around\nto writing to it, you got to let me know.",
    "start": "871980",
    "end": "879220"
  },
  {
    "text": "So that's me as cache\nzero shouting out, I'm loading line X,\nand now what allows",
    "start": "879220",
    "end": "884980"
  },
  {
    "text": "me to load it into the S state? ",
    "start": "884980",
    "end": "891600"
  },
  {
    "text": "It's consistent with memory. It's still consistent\nwith memory. Yes. Yeah.",
    "start": "891600",
    "end": "896660"
  },
  {
    "text": "So basically, first of all,\nI'm loading it essentially with a permissions\nto say, I promise",
    "start": "896660",
    "end": "901800"
  },
  {
    "text": "I'm only going to read\nfrom it, and that means that other caches know what?",
    "start": "901800",
    "end": "908480"
  },
  {
    "text": " If I'm only going\nto read from it.",
    "start": "908480",
    "end": "914440"
  },
  {
    "text": "They can also read from it. They can also read from it. Exactly, so that's what--",
    "start": "914440",
    "end": "921069"
  },
  {
    "text": "OK, so that's what I did. And notice that cash one\ndid nothing at that point.",
    "start": "921070",
    "end": "926620"
  },
  {
    "text": "Why is that? Because [INAUDIBLE].",
    "start": "926620",
    "end": "931630"
  },
  {
    "text": "Yeah. I yelled out, hey, I've\ngot the line containing X, and the other cache is sitting\nover here saying, it's not",
    "start": "931630",
    "end": "937370"
  },
  {
    "text": "in my cache, I could care less. Exactly. And so then I loaded--",
    "start": "937370",
    "end": "944220"
  },
  {
    "text": "yeah, I loaded to it again. I read the value again,\nand what happens? ",
    "start": "944220",
    "end": "951779"
  },
  {
    "text": "Absolutely nothing. Why does absolutely\nnothing happen?",
    "start": "951780",
    "end": "956962"
  },
  {
    "text": "[INAUDIBLE] Yeah. Why do I not have to\ntell anybody about this?",
    "start": "956962",
    "end": "962665"
  },
  {
    "text": "Because it's a hit. It's a hit. My cache state did not change. They already know\nwhat my cash state is.",
    "start": "962665",
    "end": "967699"
  },
  {
    "text": "Exactly. So now let's say I want\nto write to the thing. OK, what do I have to do?",
    "start": "967700",
    "end": "975750"
  },
  {
    "text": "Issue a re-exclusive. I have to yell out that\nI'm about to right to it.",
    "start": "975750",
    "end": "981400"
  },
  {
    "text": "And what does everybody\nelse have to do? Yeah. And now in this\ncase, the other folks",
    "start": "981400",
    "end": "987527"
  },
  {
    "text": "don't care because\nthey don't have it. So in this case\ndoesn't do anything.",
    "start": "987527",
    "end": "994410"
  },
  {
    "text": "And now if I want to write to\nit again, again, same thing. If I write to-- oh, and this--",
    "start": "994410",
    "end": "1001459"
  },
  {
    "text": "OK, so now the other processor\nwants to write to it. What is the other\nprocessor going to do?",
    "start": "1001460",
    "end": "1008630"
  },
  {
    "text": "So it's going to shout\nout, hey, I need to write, and what do I do? [INAUDIBLE] So first of all, I\ncan't keep my copy.",
    "start": "1008630",
    "end": "1015870"
  },
  {
    "text": "And in this case, since I\nhave written to the value, I better put the most recent\nvalue back out of memory.",
    "start": "1015870",
    "end": "1020910"
  },
  {
    "text": "So I'm going to flush my-- I'm going to put the\ndata back out in memory, so the other processor\ngets the latest value,",
    "start": "1020910",
    "end": "1027530"
  },
  {
    "text": "and then I got to\ndrop because if I-- why don't I just keep\nit in a shared state? It's stale copy.",
    "start": "1027530",
    "end": "1033470"
  },
  {
    "text": "Because it's going to be stale\nbecause the other person's going to write to it. Exactly. So now if another load\nby the other party",
    "start": "1033470",
    "end": "1040707"
  },
  {
    "text": "doesn't matter to me because I'm\nlike, I don't have the value. If I want to bring\nit back and read it,",
    "start": "1040707",
    "end": "1046470"
  },
  {
    "text": "I'm going to say, hey, I\nwant to read this value now. The other processor is going\nto flush it out to memory, and then what are they going\nto do about their cache?",
    "start": "1046470",
    "end": "1055549"
  },
  {
    "text": "They could keep it in shared\nbecause they're like, well, I can't write to it anymore\nbecause there are copies around,",
    "start": "1055550",
    "end": "1060639"
  },
  {
    "text": "but I'll keep it around because\nif I want to read from it, I don't want to actually\ntake that cache miss. OK.",
    "start": "1060640",
    "end": "1066130"
  },
  {
    "text": "And so I'll let this-- we won't go into\nto the rest of us, but these are the things\nthat you definitely",
    "start": "1066130",
    "end": "1072060"
  },
  {
    "text": "need to be able to walk through\nand step through in your head. You did one last\nweek, I think there's one on the homework assignment,\nand stuff like that.",
    "start": "1072060",
    "end": "1078910"
  },
  {
    "text": "So with that in mind, now let's\nthink about implementing a walk.",
    "start": "1078910",
    "end": "1085820"
  },
  {
    "text": "And I'm going to give\nyou-- because you're used to using a bunch of\nlocks, but we haven't actually",
    "start": "1085820",
    "end": "1092880"
  },
  {
    "text": "talked about the underlying\ndetails very much. So what I'm going\nto do is I'm going to give you an instruction\nthat's not a load or a store,",
    "start": "1092880",
    "end": "1099279"
  },
  {
    "text": "but actually a\nlittle bit of both. It's a load compare store. So imagine that you have\na machine instruction,",
    "start": "1099280",
    "end": "1106237"
  },
  {
    "text": "and just to keep it simple, I'm\ngoing to call it test and set, but in practice these types\nof machine instructions",
    "start": "1106237",
    "end": "1113188"
  },
  {
    "text": "are very different. They might be compare exchange\nor load link store conditional. But imagine you have\nthis instruction",
    "start": "1113188",
    "end": "1118470"
  },
  {
    "text": "called test set, test-and-set,\nwhich takes the value or reads a value from memory\nat a designated address,",
    "start": "1118470",
    "end": "1125500"
  },
  {
    "text": "and if the memory address\nis 0, it sets it to 1.",
    "start": "1125500",
    "end": "1131678"
  },
  {
    "text": "That's all it does. It loads it and sets it to 1. ",
    "start": "1131678",
    "end": "1140508"
  },
  {
    "text": "Now, let's think\nabout how I might use this to implement a lock. So here is my simple assembly\ncode for implementing a lock.",
    "start": "1140508",
    "end": "1151679"
  },
  {
    "text": "Here's unlock, and let's\nstart with unlock, actually. So imagine you had a variable\nthat was 1 if someone",
    "start": "1151680",
    "end": "1158060"
  },
  {
    "text": "had the lock, and 0 otherwise. If you're the thread\nthat has the lock,",
    "start": "1158060",
    "end": "1164250"
  },
  {
    "text": "how might you unlock the lock? Just write 0.",
    "start": "1164250",
    "end": "1171530"
  },
  {
    "text": "Makes sense? And here, what is\nthe lock procedure?",
    "start": "1171530",
    "end": "1179250"
  },
  {
    "text": "The lock procedure is trying\nto execute one of these tests in sets which says, if--",
    "start": "1179250",
    "end": "1185990"
  },
  {
    "text": "and it's storing the\nvalue loaded from memory here into this register.",
    "start": "1185990",
    "end": "1192356"
  },
  {
    "text": "So I'm going to read the value\nfrom memory, and if it's 0,",
    "start": "1192356",
    "end": "1197870"
  },
  {
    "text": "I'm going to set it\nto 1, all in one step. This is one instruction,\none atomic instruction.",
    "start": "1197870",
    "end": "1205310"
  },
  {
    "text": "And if the value I read from 0-- I read from memory is\n0, what can I conclude?",
    "start": "1205310",
    "end": "1213804"
  },
  {
    "text": "[INAUDIBLE] I have the lock. If the value that I\nread from memory is 1,",
    "start": "1213804",
    "end": "1218807"
  },
  {
    "text": "what can I conclude? You don't have the lock. I don't have the\nlock, and I actually am going to branch if non-zero,\nback up and try again.",
    "start": "1218807",
    "end": "1225770"
  },
  {
    "text": "So it's basically I'm saying,\nwhile the value in memory is not-- is one, keep trying\nthis test-and-set thing.",
    "start": "1225770",
    "end": "1233500"
  },
  {
    "text": "If you ever see it\nto be 0 by the time you're checking to see, oh, was\nI the person that set it to 1?",
    "start": "1233500",
    "end": "1240519"
  },
  {
    "text": "If you're the person that set\nit to 1, you have the lock. And then the minute\nyou unlock, presumably",
    "start": "1240520",
    "end": "1246210"
  },
  {
    "text": "somebody-- some other\nthread can come in and now succeed with one of\ntheir tests and sets.",
    "start": "1246210",
    "end": "1252620"
  },
  {
    "text": "Now, for example, if you were\nrunning on an Intel chip, you wouldn't have\ntest-and-set, you might have something compare\nexchange, which is a little bit",
    "start": "1252620",
    "end": "1259860"
  },
  {
    "text": "more elaborate form of things. And offline, I think it'd be\nkind of fun to study this,",
    "start": "1259860",
    "end": "1265030"
  },
  {
    "text": "to say basically, hey, can you\nconfirm that essentially this is a lock with test-- with compare exchange,\nwhich basically",
    "start": "1265030",
    "end": "1273899"
  },
  {
    "text": "is using some x86 flags\nregisters and things like that. It's doing basically\nthe same thing.",
    "start": "1273900",
    "end": "1280570"
  },
  {
    "text": "Now, here's why I spent some\ntime talking about or reminding you about coherence. Imagine that we have 3\nprocessors or 3 threads,",
    "start": "1280570",
    "end": "1288990"
  },
  {
    "text": "and they're all trying\nto get this lock. So remember, what they're\ndoing is they're saying,",
    "start": "1288990",
    "end": "1294690"
  },
  {
    "text": "while test-and-set\nfails, keep trying. And as soon as\ntest-and-set succeeds, I know I have the lock, so\nI can do my critical section",
    "start": "1294690",
    "end": "1302520"
  },
  {
    "text": "kind of thing. So let's think\nabout what happens.",
    "start": "1302520",
    "end": "1308039"
  },
  {
    "text": "Processor 0, let's just\nsay that processor 0 is the processor that first\ntries to get the lock.",
    "start": "1308040",
    "end": "1315060"
  },
  {
    "text": "That test-and-set, I'd like\nyou to think about as a write, at least from the coherence\nprotocol perspective,",
    "start": "1315060",
    "end": "1320410"
  },
  {
    "text": "it's a write because it's\nmodifying the variable. So since it's a write processor\n0, or processor 1 in this case",
    "start": "1320410",
    "end": "1327690"
  },
  {
    "text": "is going to try and\nexecute its test-and-set. That test-and-set is going\nto cause an invalidation",
    "start": "1327690",
    "end": "1334080"
  },
  {
    "text": "because that's a\nwrite operation. Even if it fails, it's a write\nbecause it's an atomic operation",
    "start": "1334080",
    "end": "1339840"
  },
  {
    "text": "that may write. So at this point, if that\ntest-and-set succeeds,",
    "start": "1339840",
    "end": "1344975"
  },
  {
    "text": "I think you would agree\nwith me that processor 1 is holding the lock. So let's think about what\nhappens at the same time.",
    "start": "1344975",
    "end": "1352230"
  },
  {
    "text": "So processor 2, at some\npoint in the future, tries to obtain the lock.",
    "start": "1352230",
    "end": "1357650"
  },
  {
    "text": "And what does processor 2 going\nto do to try and get the lock? It's going to execute that\ntest-and-set instruction.",
    "start": "1357650",
    "end": "1365310"
  },
  {
    "text": "What's going to happen\nto the cache line?  Processor 1 and 3 will\nhave to invalidate,",
    "start": "1365310",
    "end": "1373880"
  },
  {
    "text": "and the cache line\ncontaining the lock variable is going to move\nover to processor 2.",
    "start": "1373880",
    "end": "1383510"
  },
  {
    "text": "OK, so keep in mind\nwhat just happened. A lock is just a variable\nthat has a value.",
    "start": "1383510",
    "end": "1389870"
  },
  {
    "text": "That variable is just\nin the address space. It's cached.",
    "start": "1389870",
    "end": "1395000"
  },
  {
    "text": "And so even though\nprocessor 1 has the lock, processor 2 has a valid cache\nline containing the variable",
    "start": "1395000",
    "end": "1405230"
  },
  {
    "text": "that the lock is. So having the lock, and\nhaving the cache line",
    "start": "1405230",
    "end": "1411380"
  },
  {
    "text": "are two different things. So there's nothing\nstopping from processor 3 from coming in and trying to get\nthe lock at this point, right?",
    "start": "1411380",
    "end": "1418097"
  },
  {
    "text": "So that cache line is actually\njust going to bounce over there to processor 3, and then\nall these tests and sets",
    "start": "1418097",
    "end": "1424640"
  },
  {
    "text": "by processor 2 and 3\nare failing because they can't get the lock, which\nmeans the cache line is just",
    "start": "1424640",
    "end": "1430649"
  },
  {
    "text": "doing this. So makes sense? Yeah.",
    "start": "1430650",
    "end": "1435809"
  },
  {
    "text": "Now, what happens when processor\n1 wants to unlock the lock?",
    "start": "1435810",
    "end": "1444040"
  },
  {
    "text": "Take the cut. It's got an issue\nof BusRd X, it's got a invalidate everybody else.",
    "start": "1444040",
    "end": "1449480"
  },
  {
    "text": "It gets the line\nin exclusive mode. ",
    "start": "1449480",
    "end": "1460044"
  },
  {
    "text": "It does the right\nto set it to 0, and then one of\nthose tests-and-sets",
    "start": "1460045",
    "end": "1465280"
  },
  {
    "text": "on one of the other processors,\nlet's just say processor 2, succeeds, and now\nprocessor two has the lock.",
    "start": "1465280",
    "end": "1473140"
  },
  {
    "text": "So think about what's going\non here is I'm a core, I have a lock, I'm in my\ncritical section trying",
    "start": "1473140",
    "end": "1479470"
  },
  {
    "text": "to do this thing so I\ncan release the lock. And first of all, there's\nall this bus traffic",
    "start": "1479470",
    "end": "1485230"
  },
  {
    "text": "fluttering around between\nall the other processors as they spin. And second of all--",
    "start": "1485230",
    "end": "1491138"
  },
  {
    "text": "actually, I have to\ntake a cache miss to get out of the lock,\nwhich kind of stinks too,",
    "start": "1491138",
    "end": "1496687"
  },
  {
    "text": "because that's time\nthat other folks are not doing what they need to do. Yes. What is the test-and-set\n[INAUDIBLE]?",
    "start": "1496687",
    "end": "1504820"
  },
  {
    "text": "Well, the test-and-set\nis an atomic instruction. So there's a couple of ways\nI could answer that question.",
    "start": "1504820",
    "end": "1510170"
  },
  {
    "text": "One is, the instruction may\nor may not update the line, but you need to\nhave write access",
    "start": "1510170",
    "end": "1517010"
  },
  {
    "text": "if it's going to go through. So there's no way you could\nimplement it as an atomic,",
    "start": "1517010",
    "end": "1525110"
  },
  {
    "text": "or I guess if you\nimplemented it as a-- let me give a bus transaction\nto read the value, and then",
    "start": "1525110",
    "end": "1533390"
  },
  {
    "text": "another bus transaction\nto upgrade, or get write permission, you're issuing\ntwo bus transactions,",
    "start": "1533390",
    "end": "1540330"
  },
  {
    "text": "so by definition\nit's not atomic. And on X86, there's\nactually a lock prefix",
    "start": "1540330",
    "end": "1546769"
  },
  {
    "text": "on a number of instructions,\nand that lock prefix basically kind of does that.",
    "start": "1546770",
    "end": "1552540"
  },
  {
    "text": "It says, sure, under the\nhood this will be implemented as multiple transactions, but\nthey've got like a lock flag on them, meaning\nthat we're not going",
    "start": "1552540",
    "end": "1558890"
  },
  {
    "text": "to allow any transactions\nin between to the same thing or something like that. So you can just\neffectively think about it",
    "start": "1558890",
    "end": "1565430"
  },
  {
    "text": "as atomic independent of\nwhat the implementation is",
    "start": "1565430",
    "end": "1571670"
  },
  {
    "text": "going to be. So I already alluded\nto this, but I want you to be absolutely clear\nhere that on the previous slide,",
    "start": "1571670",
    "end": "1579420"
  },
  {
    "text": "what is the duration of time\nthat the thread running on P1 had the lock?",
    "start": "1579420",
    "end": "1585050"
  },
  {
    "text": "It was the entire slide. What was the duration of time\nwhere P1's cache contained",
    "start": "1585050",
    "end": "1590870"
  },
  {
    "text": "a valid copy of the line\ncontaining the lock variable? Was only for a second\nat the time of lock,",
    "start": "1590870",
    "end": "1597740"
  },
  {
    "text": "and for a split second\nat the time of unlock. It's kind of interesting, right? And so a simple lock like\nthis has some properties",
    "start": "1597740",
    "end": "1605780"
  },
  {
    "text": "that if we added more and\nmore threads, more and more processors that are trying\nto actually grab this line,",
    "start": "1605780",
    "end": "1613429"
  },
  {
    "text": "it might take an\nincreasing amount of time for the core with the lock to\nactually be able to grab it",
    "start": "1613430",
    "end": "1621395"
  },
  {
    "text": "in the right state again. And you actually see that in\nthis graph, where this graph is just like the cost per lock\nunlock, which is actually",
    "start": "1621395",
    "end": "1632750"
  },
  {
    "text": "going up as a function of\nthe number of processors in the system because basically,\nin order for me to get the cache",
    "start": "1632750",
    "end": "1640429"
  },
  {
    "text": "line in the writeable\nstate, I'm fighting, I'm contending with increasingly\nlarge number of processors.",
    "start": "1640430",
    "end": "1646110"
  },
  {
    "text": "It might take me longer to\nget that exclusive access, and it might take me longer\nto literally unlock the lock,",
    "start": "1646110",
    "end": "1652710"
  },
  {
    "text": "and so every unlock, unlock\nperiod actually starts getting bigger, gets higher. OK, so now you\nmight say, wow, it",
    "start": "1652710",
    "end": "1659805"
  },
  {
    "text": "sounds like we could\ndo a whole lecture on how to efficiently\nimplement locks, which we're not going to do.",
    "start": "1659805",
    "end": "1665490"
  },
  {
    "text": "But you could think about\nsome of the properties you'd like to have in your locks\nlike you'd like it to be fast,",
    "start": "1665490",
    "end": "1671960"
  },
  {
    "text": "like low latency. Like when you call\nlock, you don't have to wait for very\nlong, or you call unlock, you don't wait very long.",
    "start": "1671960",
    "end": "1677870"
  },
  {
    "text": "You'd like your\nlock implementations to not basically DOS\nyour system by generating",
    "start": "1677870",
    "end": "1683060"
  },
  {
    "text": "a bunch of interconnect traffic\nwhile everybody's waiting, everybody's spinning. You might like it to scale\nto large numbers of cores.",
    "start": "1683060",
    "end": "1691260"
  },
  {
    "text": "You actually might\nlike it to be fair. There was nothing about that\nprevious implementation here",
    "start": "1691260",
    "end": "1698360"
  },
  {
    "text": "that guaranteed that all\nthe processors would ever get the lock. Maybe processor 1 and processor\n2 just keep getting it,",
    "start": "1698360",
    "end": "1705390"
  },
  {
    "text": "and there's nothing to ensure\nthat processor 3 actually would in this implementation.",
    "start": "1705390",
    "end": "1711120"
  },
  {
    "text": "So implementing\nlocks efficiently can actually become a\npretty interesting thing. So let me just give you\na few small refinements.",
    "start": "1711120",
    "end": "1718740"
  },
  {
    "text": "So here's a different\nlock that has the same test-and-set\ninstruction. So now I'm just--",
    "start": "1718740",
    "end": "1724130"
  },
  {
    "text": "I'm writing in C code to\nmake it a little bit clearer. Test-and-set does\nthe same thing. If the lock is--",
    "start": "1724130",
    "end": "1730039"
  },
  {
    "text": "it returns the value in memory,\nand if the value in memory is 0, it atomically sets it to 1.",
    "start": "1730040",
    "end": "1735750"
  },
  {
    "text": "So this, if test-and-set\nis 0, well, that",
    "start": "1735750",
    "end": "1744100"
  },
  {
    "text": "means I executed a test and\nset and the return value is 0, so I now know the value\nin memory is what?",
    "start": "1744100",
    "end": "1751870"
  },
  {
    "text": "1, and I also know that I\nhave the lock because it was 0 when I started\nthe test-and-set,",
    "start": "1751870",
    "end": "1757490"
  },
  {
    "text": "I know it's one when\nI ended it, and I know that I executed\nthe test-and-set when nobody else had the lock,\nwhich means I have the lock.",
    "start": "1757490",
    "end": "1766159"
  },
  {
    "text": "OK, so that's what this is. If test and set returns\n0 return, which means I have the lock.",
    "start": "1766160",
    "end": "1772450"
  },
  {
    "text": "But what's this thing doing? Why do I have while, while here? ",
    "start": "1772450",
    "end": "1778929"
  },
  {
    "text": "This is correct. There's not a bug in this code. This is correct code. But can you back engineer\nwhat I'm trying to accomplish?",
    "start": "1778930",
    "end": "1789000"
  },
  {
    "text": "Yeah. Test-and-set will try to get\nthe right access to the line.",
    "start": "1789000",
    "end": "1795540"
  },
  {
    "text": "So this call to test-and-set is\na read exclusive, or a request",
    "start": "1795540",
    "end": "1802350"
  },
  {
    "text": "to write to the value. What is this while the\nvalue of lock is 0 doing?",
    "start": "1802350",
    "end": "1808140"
  },
  {
    "text": "It's just saying,\njust keep checking to see if it's 0 because\nif it's 0-- if it's not 0, why should I even bother\ndoing a test-and-set?",
    "start": "1808140",
    "end": "1817400"
  },
  {
    "text": "So what's the\nimplication of this? So what happens here is while\nthe lock is taken by someone",
    "start": "1817400",
    "end": "1822770"
  },
  {
    "text": "else, I am going\nto spin on reading to see if it's still locked.",
    "start": "1822770",
    "end": "1828150"
  },
  {
    "text": "If it ever becomes unlocked, I'm\ngoing to try and jump in there and do my test-and-set.",
    "start": "1828150",
    "end": "1833330"
  },
  {
    "text": "If I fail, I'm going\nto go back to waiting until it's unlocked again. Why might this be a better idea?",
    "start": "1833330",
    "end": "1841950"
  },
  {
    "text": "Yeah, finish this up. [INAUDIBLE] to this cache space. So I'm turning a bunch\nof writes into a read",
    "start": "1841950",
    "end": "1848600"
  },
  {
    "text": "or into a bunch of reads. So let's go back to my diagram. Let's think about what happens. Same thing as before,\nP1 grabs the lock,",
    "start": "1848600",
    "end": "1857130"
  },
  {
    "text": "P1 does a write, a\ntest-and-set to get the lock, all other processors\nare spinning on",
    "start": "1857130",
    "end": "1865049"
  },
  {
    "text": "is the value still 0? If I'm reading over, and\nover, and over again,",
    "start": "1865050",
    "end": "1870780"
  },
  {
    "text": "all the other\nprocessors are just holding that line in what state? Share state.",
    "start": "1870780",
    "end": "1876420"
  },
  {
    "text": "S state, yeah, the\nshared state, which means they're just taking\na bunch of cache hits. So for the duration of\nthe critical section,",
    "start": "1876420",
    "end": "1883380"
  },
  {
    "text": "they're spinning,\nthey're doing work, but that work is not creating\nglobal traffic out to everybody",
    "start": "1883380",
    "end": "1889565"
  },
  {
    "text": "else.  Processor 1 still has to take a\ncache miss to get the line back",
    "start": "1889565",
    "end": "1896920"
  },
  {
    "text": "in the what state? To release the lock. Processor 1 definitely\nhas to take a cache miss.",
    "start": "1896920",
    "end": "1904510"
  },
  {
    "text": "It's a cache miss to get\nexclusive access again. That's where the right to\nset the value to 0 occurs,",
    "start": "1904510",
    "end": "1910630"
  },
  {
    "text": "and then everybody\nelse all of a sudden invalidates their line\nbecause they had to.",
    "start": "1910630",
    "end": "1915980"
  },
  {
    "text": "Their next read back\ninto the shared state finds that the\nvalue is 0, and then",
    "start": "1915980",
    "end": "1922360"
  },
  {
    "text": "they all jump in and try\nand actually do a write. So you're going to get a flurry\nof if you have P processors,",
    "start": "1922360",
    "end": "1929765"
  },
  {
    "text": "you're going to get P minus 1,\nright. so if you count this one, it's O of P rights on\nevery lock release,",
    "start": "1929765",
    "end": "1936310"
  },
  {
    "text": "but during the critical\nsection you get no rights. So this is nice,\nit also helps in",
    "start": "1936310",
    "end": "1943540"
  },
  {
    "text": "that while I'm in\nthe critical section, I would love to have an\nuncontended bus because maybe",
    "start": "1943540",
    "end": "1948639"
  },
  {
    "text": "I'm doing reads and\nwrites to other variables. I don't want to wait\non an interconnect. So everything calms down\nduring the critical section.",
    "start": "1948640",
    "end": "1955100"
  },
  {
    "text": "At the end, there's this feeding\nfrenzy, where everybody says, I think I can get it,\nand that's actually",
    "start": "1955100",
    "end": "1961000"
  },
  {
    "text": "where you take P invalidate-- P different write invalidations.",
    "start": "1961000",
    "end": "1966520"
  },
  {
    "text": "So we're pretty good. We really-- we like\nwhat we did here.",
    "start": "1966520",
    "end": "1972279"
  },
  {
    "text": "We got rid of this\ncontinuous flurry of traffic whenever we're in\nthe critical section.",
    "start": "1972280",
    "end": "1977409"
  },
  {
    "text": "I'm still doing it\nwith one integer. My lock variable is\njust one integer.",
    "start": "1977410",
    "end": "1983020"
  },
  {
    "text": "I haven't tried at all\nto make things fair. There's no guarantee that\nanybody's going to win.",
    "start": "1983020",
    "end": "1988600"
  },
  {
    "text": "And I slowed things down just\na little bit because now when the lock gets released,\nyou have to do two things.",
    "start": "1988600",
    "end": "1994670"
  },
  {
    "text": "You have to do a read\nand then a write, or read and then a test-and-set\nand not just a test-and-set. But I'm not too worried\nabout that extra instruction",
    "start": "1994670",
    "end": "2002070"
  },
  {
    "text": "of latency, to be honest. Just to give you\none more design, here's a different\nthing that echoes",
    "start": "2002070",
    "end": "2007470"
  },
  {
    "text": "how it might work if you\ngo-- if you're going to go get a sandwich or you go\ninto the deli counter. How does that work in real life?",
    "start": "2007470",
    "end": "2013070"
  },
  {
    "text": "You show up at the counter,\nand how do when your turn is? You take a ticket.",
    "start": "2013070",
    "end": "2019404"
  },
  {
    "text": "And so the butcher,\nor whoever's-- the deli person or the\nsandwich maker is like, OK,",
    "start": "2019405",
    "end": "2026450"
  },
  {
    "text": "when they finish a job, they\nincrement the current pointer, and so that's what's\ngoing to happen here.",
    "start": "2026450",
    "end": "2032539"
  },
  {
    "text": "So now I have a lock that's not\na single variable, but actually two integers. Let's ignore wraparound for\nnow, just to keep it simple.",
    "start": "2032540",
    "end": "2039890"
  },
  {
    "text": "And I have an integer\nfor now serving, which is where the\nthread that has the lock",
    "start": "2039890",
    "end": "2051158"
  },
  {
    "text": "is the thread that has the\nticket matching now serving. And then we have\nNick's ticket, which",
    "start": "2051159",
    "end": "2056649"
  },
  {
    "text": "is when a thread wants the\nlock, it walks up to the counter and says, can you give me a\nticket, a unique ticket ID?",
    "start": "2056650",
    "end": "2063009"
  },
  {
    "text": "OK, so let's look at lock. It's my ticket,\nmy local ticket is",
    "start": "2063010",
    "end": "2068888"
  },
  {
    "text": "going to be an atomic\nincrement of next ticket. Just like give me the\nnext available ticket.",
    "start": "2068889",
    "end": "2074500"
  },
  {
    "text": "And then I spin while my\nticket is not now serving,",
    "start": "2074500",
    "end": "2079840"
  },
  {
    "text": "and that is a largely\na bunch of reads.",
    "start": "2079840",
    "end": "2086330"
  },
  {
    "text": "And now releasing the lock. When the lock is released,\nthe thread with the lock",
    "start": "2086330",
    "end": "2092840"
  },
  {
    "text": "just increments\nnow_serving, so it has to get exclusive access to\nnow_serving and does a write,",
    "start": "2092840",
    "end": "2098780"
  },
  {
    "text": "does an update, but\nnow look what happens. For if we have a lot\nof waiting threads.",
    "start": "2098780",
    "end": "2104040"
  },
  {
    "text": "It's not like everybody\ntries to get the lock now. Only one thread is\ngoing to try and write.",
    "start": "2104040",
    "end": "2110177"
  },
  {
    "text": "And actually it doesn't\neven need to write at all, it just needs to\ndo a comparison. So now a lock release\nis actually only one",
    "start": "2110177",
    "end": "2118080"
  },
  {
    "text": "write, this write. And the thread that\nacquires the lock actually",
    "start": "2118080",
    "end": "2124923"
  },
  {
    "text": "doesn't have to\ndo a write at all.  It only has to do it write when\nit enters the waiting queue.",
    "start": "2124923",
    "end": "2133450"
  },
  {
    "text": "So it's just another example\nof ways you can actually reduce contention.",
    "start": "2133450",
    "end": "2139369"
  },
  {
    "text": "And in this one, actually, this\nis fair because you get in line, and the first person\nin line is going",
    "start": "2139370",
    "end": "2145690"
  },
  {
    "text": "to be-- you're going to\nbe served in FIFO order. So it's pretty cool. I don't need an atomic\noperation to acquire the lock.",
    "start": "2145690",
    "end": "2155770"
  },
  {
    "text": "I need an atomic operation\nto start waiting, but I don't need an acquire-- an atomic operation at the\npoint where I get the lock.",
    "start": "2155770",
    "end": "2162823"
  },
  {
    "text": "So that's pretty cool. There's only one write\nper lock release.  Now, what it did do is\nit required your hardware",
    "start": "2162823",
    "end": "2171670"
  },
  {
    "text": "to provide something\na little bit more sophisticated than test-and-set. It has to-- the hardware had\nto provide an atomic integer",
    "start": "2171670",
    "end": "2179590"
  },
  {
    "text": "operation, atomic\nadd in this case, so now you're asking a little\nbit more of your hardware here. ",
    "start": "2179590",
    "end": "2188710"
  },
  {
    "text": "So here is a list of a\nbunch of atomic operations that you might find on\nany platform these days.",
    "start": "2188710",
    "end": "2194120"
  },
  {
    "text": "Here are atomic\noperations that I took from the CUDA built in\nlibrary, CUDA standard library.",
    "start": "2194120",
    "end": "2200599"
  },
  {
    "text": "So if you're running\nanything on NVIDIA GPUs, you have all of these atomic\noperations at your disposal.",
    "start": "2200600",
    "end": "2206170"
  },
  {
    "text": "So like atomic increment,\nwhich is what we had. It takes the value pointed\nto here at this address",
    "start": "2206170",
    "end": "2213100"
  },
  {
    "text": "and increments it by this value,\nso that's a read, modify, write. It's like read the value from\nmemory, update its contents,",
    "start": "2213100",
    "end": "2220160"
  },
  {
    "text": "write it all in\nhardware guarantees that that's atomic with\nrespect to all CUDA threads.",
    "start": "2220160",
    "end": "2226690"
  },
  {
    "text": "And I'd like to call special\nattention to this atomic compare and swap, so CAS is atomic--",
    "start": "2226690",
    "end": "2233680"
  },
  {
    "text": "is compare and swap. So this is the logic of\natomic compare and swap.",
    "start": "2233680",
    "end": "2239960"
  },
  {
    "text": "Now, keep in mind that even\nthough I'm writing it here as C code, this\nis an instruction.",
    "start": "2239960",
    "end": "2246260"
  },
  {
    "text": "This is what the\ninstruction does. So it's not like there are locks\ninside of this or something",
    "start": "2246260",
    "end": "2252440"
  },
  {
    "text": "like that, so the hardware is\nproviding some mechanism where this could be. And what it does is it takes\na pointer to an address,",
    "start": "2252440",
    "end": "2260010"
  },
  {
    "text": "it takes a comparison value\nand a new value, and it says, if the value in the address\nis the same as the comparison",
    "start": "2260010",
    "end": "2268850"
  },
  {
    "text": "value, so the value\nout of memory, if it's equal to compare,\nplease write this new value in,",
    "start": "2268850",
    "end": "2277380"
  },
  {
    "text": "otherwise leave it unchanged. And I wrote it\nhere in this syntax",
    "start": "2277380",
    "end": "2284570"
  },
  {
    "text": "to give you a sense that\nbasically a write is essentially happening regardless of\nwhether or not it's unchanged.",
    "start": "2284570",
    "end": "2291380"
  },
  {
    "text": "So I'm setting the\nvalue in address to either its previous value\nor this new updated value.",
    "start": "2291380",
    "end": "2298646"
  },
  {
    "text": "So given this, what if I asked\nyou to implement something",
    "start": "2298646",
    "end": "2304030"
  },
  {
    "text": "like atomic min?  This is something that's a\ncommon question that I might",
    "start": "2304030",
    "end": "2310740"
  },
  {
    "text": "ask on a homework assignment. I don't think I did\nthis year, actually, but this is a good one to study. So atomic compare and swap just\nsays, grab a value from memory.",
    "start": "2310740",
    "end": "2319930"
  },
  {
    "text": "If it equals this\nvalue called compare, please update the value in\nmemory to val, else do nothing.",
    "start": "2319930",
    "end": "2327390"
  },
  {
    "text": "What if I said, I\ndon't want this? I want something\nmuch more useful. I want you to read\na value from memory. I want you to compute the min of\nthis value and some other value,",
    "start": "2327390",
    "end": "2336520"
  },
  {
    "text": "and I want you to write the\nnew min back out to memory. Yeah. You just do like old is greater.",
    "start": "2336520",
    "end": "2342960"
  },
  {
    "text": "Old is greater. Close. Close.",
    "start": "2342960",
    "end": "2348000"
  },
  {
    "text": "What do I want to know\nin any atomic operation? What I want to know is\nthat no other thread has",
    "start": "2348000",
    "end": "2355020"
  },
  {
    "text": "set the min lower\nthan what-- so let's just say that the current\nvalue of min in memory is 100,",
    "start": "2355020",
    "end": "2362970"
  },
  {
    "text": "and I'm coming in with 90. So if there was nothing\nelse on the system,",
    "start": "2362970",
    "end": "2368240"
  },
  {
    "text": "my answer should update\nthe minimum to 90. But what if after I\nread 100 from memory,",
    "start": "2368240",
    "end": "2376150"
  },
  {
    "text": "but before I wrote 90 back\nout, some other thread had the value 80 and\nupdated memory to have 80,",
    "start": "2376150",
    "end": "2385390"
  },
  {
    "text": "and I come in and write\n90, I've messed things up. So I know that my\noperation can succeed",
    "start": "2385390",
    "end": "2394000"
  },
  {
    "text": "if I can guarantee\nthat no one else has come in while I was trying\nto do this min operation.",
    "start": "2394000",
    "end": "2402310"
  },
  {
    "text": "And how do I know if\nnobody else has come in? You use a lock.",
    "start": "2402310",
    "end": "2408280"
  },
  {
    "text": "I can, but we're not going\nto use any locks here. I don't really care if\nnobody else is come in,",
    "start": "2408280",
    "end": "2414440"
  },
  {
    "text": "I only care if the\nmen has changed. That's actually the only\nthing that matters to me.",
    "start": "2414440",
    "end": "2420109"
  },
  {
    "text": "So if I read the value from\nmemory, compare it with my min,",
    "start": "2420110",
    "end": "2426280"
  },
  {
    "text": "and then go, if my min's\nlower, I'm going to write it. I'm going to write\nmy value, but I only",
    "start": "2426280",
    "end": "2433060"
  },
  {
    "text": "want that to happen\nif the value in memory is the same as what it was when\nI got this whole thing started",
    "start": "2433060",
    "end": "2440320"
  },
  {
    "text": "and it hasn't changed. That's exactly what compare\nand swap is going to do for me, so let's take a look at this.",
    "start": "2440320",
    "end": "2446360"
  },
  {
    "text": "Atomic min is I read the\ncurrent value out in memory. I'm going to call that old.",
    "start": "2446360",
    "end": "2451750"
  },
  {
    "text": "Then I look to see, OK, is\nmy value in this case, X, is it smaller than old?",
    "start": "2451750",
    "end": "2457900"
  },
  {
    "text": "I'm going to put that here. And then I'm going\nto say, OK, I want to update the value in\nmemory if nobody else has",
    "start": "2457900",
    "end": "2466360"
  },
  {
    "text": "changed anything. So I'm going to do\nan atomic compare and swap on the\nmemory address, and I",
    "start": "2466360",
    "end": "2472510"
  },
  {
    "text": "want to make sure that the\naddress and memory is still old. And if it is, please\nupdate it with new.",
    "start": "2472510",
    "end": "2480500"
  },
  {
    "text": "And compare and swap\nalways returns old, and so that's how\nif you succeeded.",
    "start": "2480500",
    "end": "2486220"
  },
  {
    "text": "So compare and swap always\nreturns the value in memory. So if the value in memory equals\nold, I know now that the value--",
    "start": "2486220",
    "end": "2495430"
  },
  {
    "text": "I've updated it to new. If the value in memory\nis not old, try again.",
    "start": "2495430",
    "end": "2501190"
  },
  {
    "text": " Yeah. In some sense it feels\nlike this question up",
    "start": "2501190",
    "end": "2508760"
  },
  {
    "text": "has a different processor\nalready written to this address is also being kept track of\nvia the cache states, right?",
    "start": "2508760",
    "end": "2517750"
  },
  {
    "text": "Like if the cache\nstate was invalid, then that's perhaps\na different one",
    "start": "2517750",
    "end": "2524069"
  },
  {
    "text": "might have it in\na modified state. Do we just not have-- It's a great question, so\nlet me answer it in two ways.",
    "start": "2524070",
    "end": "2531510"
  },
  {
    "text": "First of all, the game that\nwe are playing right now is the only primitive you have\naccess to is compare and swap.",
    "start": "2531510",
    "end": "2537020"
  },
  {
    "text": "So in that game, you\ndon't know anything about the state of the cache. But what you're saying is\nthat if I had the cache line,",
    "start": "2537020",
    "end": "2545630"
  },
  {
    "text": "and for some reason I lost\nit, then some other operation",
    "start": "2545630",
    "end": "2551150"
  },
  {
    "text": "has intervened. Now, to be honest, in\nthe cache coherence protocol that\noperation could have been a read, which would not\nhave modified this at all.",
    "start": "2551150",
    "end": "2559230"
  },
  {
    "text": "But let's just say I\nknew it was a write. Let's say I invalidated\nmy line instead of dropping it to the shared\nstate or something like that.",
    "start": "2559230",
    "end": "2566880"
  },
  {
    "text": "If you had some way\nto get access to that, then you could provide me\nsome alternative solutions.",
    "start": "2566880",
    "end": "2572580"
  },
  {
    "text": "And there is in your\npractice problems, the non-required\npractice problems,",
    "start": "2572580",
    "end": "2578050"
  },
  {
    "text": "there's an instruction,\na pair of instructions called load link\nstore conditional, and that's what those\ninstructions do.",
    "start": "2578050",
    "end": "2584560"
  },
  {
    "text": "Load link says, load a value\nfrom memory and add an address. Store conditional\nsays store a value",
    "start": "2584560",
    "end": "2591420"
  },
  {
    "text": "to that address\nprovided that it hasn't been touched by any other\nprocessor since the last load",
    "start": "2591420",
    "end": "2597210"
  },
  {
    "text": "link. Those two implementations\nride the code-- can ride the coherence\nprotocol really easily.",
    "start": "2597210",
    "end": "2603130"
  },
  {
    "text": "And in fact, there's\na practice problem that I think I gave\nyou, which says imagine you have MSI coherence,\nhow would you implement",
    "start": "2603130",
    "end": "2609029"
  },
  {
    "text": "load link store conditional? So load link store conditional,\nI believe even to this day",
    "start": "2609030",
    "end": "2614700"
  },
  {
    "text": "are kind of the preferred\nprimitives on arm. Yeah. On most risk operatives. Yeah.",
    "start": "2614700",
    "end": "2619860"
  },
  {
    "text": "I mean I'm not sure\nif they because they didn't have cache\ncoherence before, so they-- I mean, now they probably\nleveraged the cache coherence",
    "start": "2619860",
    "end": "2625740"
  },
  {
    "text": "protocol to implement them,\nbut before they probably just had some processor state or\nsomething, where they probably--",
    "start": "2625740",
    "end": "2632760"
  },
  {
    "text": "Not caches and risk. Yeah. Cool, cool, cool. Yeah, because I remember reading\nthe instruction manual just",
    "start": "2632760",
    "end": "2638520"
  },
  {
    "text": "like a couple of years ago. It was like, you can have up to\nthis many outstanding load link store conditionals or\nsomething like that. So on some tiny\nprocessors, there's",
    "start": "2638520",
    "end": "2645180"
  },
  {
    "text": "probably still some table or\nsomething that's like, yeah, OK. Yeah, exactly. So what you're proposing is a\nvery common operation on arm,",
    "start": "2645180",
    "end": "2652930"
  },
  {
    "text": "and so it's exposed to you via\nload link store conditional. ",
    "start": "2652930",
    "end": "2659319"
  },
  {
    "text": "Here's another great\nexercise, and I'm actually going to leave this one\nto you, which is given",
    "start": "2659320",
    "end": "2664420"
  },
  {
    "text": "atomic casts, build a lock. And remember, how\ndo we build a lock? We build a lock to say if the\nvalue in memory is 0, make it 1,",
    "start": "2664420",
    "end": "2673420"
  },
  {
    "text": "and so it should be a\npretty obvious thing to do. Yeah. On the last slide, if\nwe had an order like,",
    "start": "2673420",
    "end": "2681340"
  },
  {
    "text": "you said we have 100 and\nthen 90 and 80 updated, then we can check. What if it was like 100,\nthen 80, and then 90.",
    "start": "2681340",
    "end": "2689420"
  },
  {
    "text": "I mean, that seems like-- Yeah, so imagine I'm trying to--",
    "start": "2689420",
    "end": "2695140"
  },
  {
    "text": "I have the value 90, and\nyou have the value 80, and the current min is 100.",
    "start": "2695140",
    "end": "2700525"
  },
  {
    "text": "So let's say I read 100\nfrom memory, and I'm going, oh, 90 is less than 100, I\nshould probably write 90.",
    "start": "2700525",
    "end": "2707980"
  },
  {
    "text": "Before I get around to\nwriting 90, you come in, you say 80 is less than\n100, and you beat me to it.",
    "start": "2707980",
    "end": "2714710"
  },
  {
    "text": "You write 80. Now, imagine if you look at-- that's weird.",
    "start": "2714710",
    "end": "2720890"
  },
  {
    "text": "Now, imagine that I go\nahead and write my 90. We're incorrect.",
    "start": "2720890",
    "end": "2725960"
  },
  {
    "text": "The code is broken now,\nso I need to know-- I've read a value, I've done\nsome comparisons or whatever,",
    "start": "2725960",
    "end": "2732900"
  },
  {
    "text": "and then when I do\nmy write, I have to say I'm only want this write\nto occur if the value is still",
    "start": "2732900",
    "end": "2738859"
  },
  {
    "text": "100 because my value,\nmy 8-- the value 90 that I'm writing in there is\nthe correct answer provided",
    "start": "2738860",
    "end": "2745340"
  },
  {
    "text": "that it started at 100. But if you've come\nin and changed that value, in this\ncase, my atomic cast is",
    "start": "2745340",
    "end": "2753859"
  },
  {
    "text": "going to fail because the\nvalue in memory is not old, it's not 100. So when atomic casts returns\nto me, it returns to me 80.",
    "start": "2753860",
    "end": "2764600"
  },
  {
    "text": "I go, whoa, 80 is\nnot equal to 100, therefore my atomic\ncast must have failed.",
    "start": "2764600",
    "end": "2770580"
  },
  {
    "text": "I need to try again. So I go load the value\nfrom memory again. I now observe 80.",
    "start": "2770580",
    "end": "2776160"
  },
  {
    "text": "I compute a new min,\nand I go, oh, my 90 is bigger than your 80,\nso it should just stay 80,",
    "start": "2776160",
    "end": "2782430"
  },
  {
    "text": "and then I try again. Would that be the case if I had\n95, then it would go through",
    "start": "2782430",
    "end": "2788480"
  },
  {
    "text": "and then it would\nsee the update. Yep? OK. Yep. So isn't this inefficient? So let's say you have the value\n90 and the current value is 80,",
    "start": "2788480",
    "end": "2797240"
  },
  {
    "text": "why in the world should you even\ngo and try to write it to table? Well, I can make\nmy program better,",
    "start": "2797240",
    "end": "2802859"
  },
  {
    "text": "which says if the new min is not\nthe same as the other one, just bail. Yes. Yeah.",
    "start": "2802860",
    "end": "2808230"
  },
  {
    "text": "I could definitely make\nmy program more efficient and that would be similar\nin spirit to this test and test and set lock, right?",
    "start": "2808230",
    "end": "2813770"
  },
  {
    "text": "Yeah, exactly. Yeah, you could do that. So the point here is if\nyou have an atomic cast,",
    "start": "2813770",
    "end": "2820790"
  },
  {
    "text": "you should be able\nto easily implement everything on this slide. ",
    "start": "2820790",
    "end": "2827809"
  },
  {
    "text": "And Moreover, you should be able\nto implement lock and unlock",
    "start": "2827810",
    "end": "2833900"
  },
  {
    "text": "too, because lock and unlock\nare just like atomic-- if it's 0, set it to 1, and\nso the implementation of lock",
    "start": "2833900",
    "end": "2840710"
  },
  {
    "text": "looks just like this. And if you want to be a\nlittle bit more clever, the implementation of the test\nand test and setlock from afar",
    "start": "2840710",
    "end": "2849170"
  },
  {
    "text": "looks a little bit like that. So on the home-- on an exam\nor on future homeworks,",
    "start": "2849170",
    "end": "2855660"
  },
  {
    "text": "I will assume that you're\nfamiliar with compare and swap. Now, we'll always give\nyou the definition,",
    "start": "2855660",
    "end": "2861500"
  },
  {
    "text": "but it's very common exercise\nto say, given compare and swap, can you create an atomic\nprimitive of some customized",
    "start": "2861500",
    "end": "2868310"
  },
  {
    "text": "nature given that? And we already talked\nactually about load link store conditional as another pair\nof atomic instructions.",
    "start": "2868310",
    "end": "2876030"
  },
  {
    "text": "So some systems give\nyou atomic casts. A lot of-- most\nsystems actually give you load link store\nconditional, and everything",
    "start": "2876030",
    "end": "2883160"
  },
  {
    "text": "gets built up from that. So just a few other things.",
    "start": "2883160",
    "end": "2888172"
  },
  {
    "text": "For example, in some of your\nassignments you've used atomic and C++, you might be wondering\na little bit about what that",
    "start": "2888172",
    "end": "2894319"
  },
  {
    "text": "means is just keep in\nmind that if you wrap--",
    "start": "2894320",
    "end": "2899360"
  },
  {
    "text": "at least in modern C++, if\nyou wrap a variable in atomic, the operations on that variable\nare assured to be atomic.",
    "start": "2899360",
    "end": "2908299"
  },
  {
    "text": "So one way to do that would\nbe, let's say if we had I++ automatically increment I,\nthe implementation of atomic",
    "start": "2908300",
    "end": "2915410"
  },
  {
    "text": "increment could be lock\nI++ unlock I be valid.",
    "start": "2915410",
    "end": "2921079"
  },
  {
    "text": "But you can believe that\nmost implementations say for certain operations\non certain variable types.",
    "start": "2921080",
    "end": "2927270"
  },
  {
    "text": "If there was an efficient\nhardware solution it would in fact, use it. So if there was an atomic\nincrement in the system,",
    "start": "2927270",
    "end": "2933950"
  },
  {
    "text": "I++ on an atomic type event\nwould actually translate into an atomic\nincrement instruction.",
    "start": "2933950",
    "end": "2941000"
  },
  {
    "text": "For more expensive\nstuff, it might actually be implemented under\nthe hood as a lock,",
    "start": "2941000",
    "end": "2946680"
  },
  {
    "text": "and actually any variable of\ntype atomic you can actually query is it lock free?",
    "start": "2946680",
    "end": "2951954"
  },
  {
    "text": "And it will tell\nyou a little bit about how it's implementing\nthat atomic operation, so it's kind of fun.",
    "start": "2951955",
    "end": "2957720"
  },
  {
    "text": "The other thing that it does\nthat we're not talking in too much about is when you\nuse these atomic variables",
    "start": "2957720",
    "end": "2967859"
  },
  {
    "text": "or like locks, you have\nto be really careful about relaxed\nconsistency, if you",
    "start": "2967860",
    "end": "2974549"
  },
  {
    "text": "were implementing these things. Imagine you had this lock\nimplementation from right here.",
    "start": "2974550",
    "end": "2984300"
  },
  {
    "text": "And your code called unlock,\nwhich is just write 0 to this address.",
    "start": "2984300",
    "end": "2990730"
  },
  {
    "text": "And let's say that there\nwas an operation up above this, which would have\nbeen in the critical section.",
    "start": "2990730",
    "end": "2997830"
  },
  {
    "text": "Imagine if due to\nrelaxed ordering, those operations got\nreordered, so another processor",
    "start": "2997830",
    "end": "3003890"
  },
  {
    "text": "saw the unlock and\nthen saw the write to a value in the\ncritical section.",
    "start": "3003890",
    "end": "3009240"
  },
  {
    "text": "That would be very bad. Your lock would\nessentially be useless. So I'm writing these\nimplementations,",
    "start": "3009240",
    "end": "3015240"
  },
  {
    "text": "assuming we have a\nsequentially consistent memory system, a real implementation of\nlock on a relaxed memory system",
    "start": "3015240",
    "end": "3025160"
  },
  {
    "text": "would actually have a memory\nfence here to make sure that everything that\ncame after that lock",
    "start": "3025160",
    "end": "3030650"
  },
  {
    "text": "or before that\nlock, for example, was not reordered with respect\nto other processors, so I do",
    "start": "3030650",
    "end": "3036349"
  },
  {
    "text": "want to point out that out. You will encounter\nrelaxed memory consistency",
    "start": "3036350",
    "end": "3041579"
  },
  {
    "text": "if you are in a\njob like a driver, or a slider, where your job is\nto implement synchronization",
    "start": "3041580",
    "end": "3047240"
  },
  {
    "text": "primitives. If you are just using\nsynchronization primitives,",
    "start": "3047240",
    "end": "3052290"
  },
  {
    "text": "you always assume that those\nprimitives have properly inserted the memory fences to\ngive you the strict ordering",
    "start": "3052290",
    "end": "3059900"
  },
  {
    "text": "that you actually\nexpect, and I think that's about all I'm going\nto say really on this.",
    "start": "3059900",
    "end": "3067440"
  },
  {
    "text": "So one of the reasons\nwhy you use atomic int is not just to have\natomic operations, but to make sure the\ncompiler implements",
    "start": "3067440",
    "end": "3074300"
  },
  {
    "text": "those fences around\nthere, so you do not get unexpected, relaxed\nmemory consistency issues.",
    "start": "3074300",
    "end": "3082500"
  },
  {
    "text": "OK. All right. So that was just like a\nhalf a lecture just on.",
    "start": "3082500",
    "end": "3087570"
  },
  {
    "text": "It's kind of interesting. Kind of interesting\nto see what happens when you call a lock or unlock,\nand there's a lot of complexity",
    "start": "3087570",
    "end": "3094200"
  },
  {
    "text": "there. And if you get it wrong,\nlike the speed of these locks can be very, very different.",
    "start": "3094200",
    "end": "3100200"
  },
  {
    "text": "Any questions? And the cache coherence\nand memory consistency are front and center actually\nin the different implementations",
    "start": "3100200",
    "end": "3107220"
  },
  {
    "text": "for sure. Yeah. I guess, we saw three given\nways to implement the lock, which one is most common?",
    "start": "3107220",
    "end": "3113490"
  },
  {
    "text": "Well, there's also a\nbunch of other ways to implement the lock\nthat I didn't talk about, but they almost\ncertainly tell you",
    "start": "3113490",
    "end": "3118950"
  },
  {
    "text": "in an operating system class. So all of my locks are what you\nwould consider to be spin locks.",
    "start": "3118950",
    "end": "3124089"
  },
  {
    "text": "The processor is\nstill just spinning. There's also the idea of\nactually sleep the thread,",
    "start": "3124090",
    "end": "3130260"
  },
  {
    "text": "literally sleep the thread, pull\nit off the execution context. My understanding, if you look\nat most lock implementations",
    "start": "3130260",
    "end": "3136140"
  },
  {
    "text": "the way-- well,\nthere's a difference between mutexes and spinlocks\nsometimes in these libraries,",
    "start": "3136140",
    "end": "3142900"
  },
  {
    "text": "so a spinlock will do\nsomething like this. Most heavyweight locks\nwill actually probably spin",
    "start": "3142900",
    "end": "3148980"
  },
  {
    "text": "a few times to try\nand get the lock, and if you can't get\nit after a few spins, then it does the heavier\nweight systems calls",
    "start": "3148980",
    "end": "3156000"
  },
  {
    "text": "to pull you off the processor. I know P threads is\nimplemented that way.",
    "start": "3156000",
    "end": "3161250"
  },
  {
    "text": "It doesn't-- if you try and get\nthe lock the first time if you fail to get the lock it's not\nlike they sleep you immediately, they're like, OK, maybe it'll\nbe available in a split second.",
    "start": "3161250",
    "end": "3168532"
  },
  {
    "text": "Try a few times, and if\nyou fail a couple of times, then we'll take you off.",
    "start": "3168532",
    "end": "3173730"
  },
  {
    "text": "OK, so let's talk actually\nabout using these things, which is equally complex, but a\ncompletely different topic.",
    "start": "3173730",
    "end": "3180010"
  },
  {
    "text": "So now I want you to\nassume that you have locks, and here's a linked list.",
    "start": "3180010",
    "end": "3186690"
  },
  {
    "text": "So take a look at this and\njust confirm to yourself, maybe even like-- and there's going to be\na lot of code coming up,",
    "start": "3186690",
    "end": "3194490"
  },
  {
    "text": "that this is, in fact, your run\nof the mill job interview linked list, which has\ninsert and delete.",
    "start": "3194490",
    "end": "3202400"
  },
  {
    "text": "I'm not even handling\nthe edge cases of inserting into the\nfront of the list, just to keep the slide simple.",
    "start": "3202400",
    "end": "3208760"
  },
  {
    "text": "We have a node, which has\na value and a next pointer, and this is insertion\nand deletion",
    "start": "3208760",
    "end": "3213890"
  },
  {
    "text": "into a sorted linked list. So your operation on Insert\nwill be create the new node,",
    "start": "3213890",
    "end": "3220460"
  },
  {
    "text": "and then walk\nforward into the list until you find the first\nnode that is bigger than me,",
    "start": "3220460",
    "end": "3226490"
  },
  {
    "text": "and I need to insert\nmyself right before.",
    "start": "3226490",
    "end": "3231600"
  },
  {
    "text": "Yeah. So the current list\nitem is current. And if the current value\nis greater than the value",
    "start": "3231600",
    "end": "3243770"
  },
  {
    "text": "that I'm trying to insert,\nthen we quit, and we move.",
    "start": "3243770",
    "end": "3252890"
  },
  {
    "text": "Yeah. We keep walking forward\nand then we break, and then if so the new node\nnext is the current.",
    "start": "3252890",
    "end": "3259839"
  },
  {
    "text": "The previous nodes next is me. So in other words,\nI'm walking forward",
    "start": "3259840",
    "end": "3265710"
  },
  {
    "text": "until I find a value in the\nlist that's bigger than me. Previous points at me. My next points at the\nnode I just found.",
    "start": "3265710",
    "end": "3274020"
  },
  {
    "text": "OK, so what I want you to\nthink about a little bit now, and this is maybe everybody's\nsitting around staring at me.",
    "start": "3274020",
    "end": "3280600"
  },
  {
    "text": "This is what I'd like you to\ntalk to yourself a little bit. I'd like you to tell me what\ncould go wrong if I run this",
    "start": "3280600",
    "end": "3288120"
  },
  {
    "text": "in a multithreaded setting. There are no locks on\nthe code right now. So think about what could\nhappen if you're deleting",
    "start": "3288120",
    "end": "3294599"
  },
  {
    "text": "two nodes at the same time. Think about what could\nhappen if you insert two nodes at the same time.",
    "start": "3294600",
    "end": "3300130"
  },
  {
    "text": "Just think about all\nthe possibilities of what could\nhappen here, so I'll give everybody about 90\nseconds or so to do that.",
    "start": "3300130",
    "end": "3307660"
  },
  {
    "text": "Is there a way you\ncould lose nodes? Is there a way you could\nlose the rest of the list?",
    "start": "3307660",
    "end": "3312690"
  },
  {
    "text": "Things like that. Go for it. ",
    "start": "3312690",
    "end": "3318970"
  },
  {
    "text": "And feel free to talk about it\nwith your neighbors, of course. ",
    "start": "3318970",
    "end": "3325260"
  },
  {
    "text": "All right. Shall we talk about\nit a little bit? I see some people still\npuzzling over things, which actually is pretty--",
    "start": "3325260",
    "end": "3331020"
  },
  {
    "text": "if you're not still\npuzzling over things. I'm impressed because even with\nsomething as simple as a linked",
    "start": "3331020",
    "end": "3336090"
  },
  {
    "text": "list, this can get kind\nof hard, so let's maybe look through some\nvisual examples that might help everybody here.",
    "start": "3336090",
    "end": "3341200"
  },
  {
    "text": "So let's consider double\ninsertion for now.",
    "start": "3341200",
    "end": "3346440"
  },
  {
    "text": "So let's say that I have\nthis list 3, 5, 10, 11, 18, and let's say that I want to\nattempt to insert 6 and 7,",
    "start": "3346440",
    "end": "3354490"
  },
  {
    "text": "so I want to insert right next\nto each other in the list. So what's going to happen? What's the right\nanswer for thread 1?",
    "start": "3354490",
    "end": "3361890"
  },
  {
    "text": "Well, thread 1 is\ngoing to walk forward, find this point in the\nlist, where the 6 should go.",
    "start": "3361890",
    "end": "3367780"
  },
  {
    "text": "And if there were no\nother threads involved, previous should point to 6,\nand 6 should point to current.",
    "start": "3367780",
    "end": "3372990"
  },
  {
    "text": "No problem at all. We get something that looks\na little bit like this. Patch it right in.",
    "start": "3372990",
    "end": "3380370"
  },
  {
    "text": "Now, let's think about\nwhat thread 2 would do. Thread 2 would basically\nwant to do the same thing.",
    "start": "3380370",
    "end": "3386350"
  },
  {
    "text": "5 should point to 7,\n7 should point to 10.",
    "start": "3386350",
    "end": "3391816"
  },
  {
    "text": "Now, what's going to\nhappen when both of those are going on at the same time?",
    "start": "3391816",
    "end": "3398220"
  },
  {
    "text": " I think you might get\na double loop, where",
    "start": "3398220",
    "end": "3404935"
  },
  {
    "text": "they're like setting-- Well, let's say\nthread 1 just says, OK, 5 is going to point to 6,\nand 6 is going to point to 10.",
    "start": "3404935",
    "end": "3413530"
  },
  {
    "text": "And then if thread 2 comes in\nlater, 5 is going to point to 7,",
    "start": "3413530",
    "end": "3420880"
  },
  {
    "text": "and 7 is going to point to what? 10. 10. And what just happened?",
    "start": "3420880",
    "end": "3426580"
  },
  {
    "text": "We just lost an insert. And if it goes in the other\norder, that could happen too. So it kind of depends on\nwhich one we want to say wins,",
    "start": "3426580",
    "end": "3434120"
  },
  {
    "text": "but assuming thread 1 updates\nprevious next before thread",
    "start": "3434120",
    "end": "3439420"
  },
  {
    "text": "2, then thread 2 is\ngoing to end up winning, so I just lost an insert.",
    "start": "3439420",
    "end": "3445109"
  },
  {
    "text": " Let's think about another case. How about one insert\nand one delete?",
    "start": "3445110",
    "end": "3451319"
  },
  {
    "text": "So let's say thread 2\nis trying to delete 10, so thread 2 is like OK,\nI want to get rid of 10,",
    "start": "3451320",
    "end": "3457170"
  },
  {
    "text": "so 5 needs to point\nto 11, but that's",
    "start": "3457170",
    "end": "3465410"
  },
  {
    "text": "kind of interesting because\nfive according to thread, one is pointing to\n6, which is pointing",
    "start": "3465410",
    "end": "3472880"
  },
  {
    "text": "to 10, which is deleted,\nand might no longer have a valid next pointer at all,\nand now all of a sudden I've",
    "start": "3472880",
    "end": "3479750"
  },
  {
    "text": "lost the rest of my list. And then we could do\nsome similar things",
    "start": "3479750",
    "end": "3485299"
  },
  {
    "text": "with simultaneous deletes. Simultaneous deletes, you\nmight get a double delete. You might actually delete memory\nthat's already been deleted.",
    "start": "3485300",
    "end": "3491930"
  },
  {
    "text": "So if I go back to\nthis code, and I said, in the spirit\ndo the simplest",
    "start": "3491930",
    "end": "3497119"
  },
  {
    "text": "possible thing to make this\ncorrect, what would you do?",
    "start": "3497120",
    "end": "3503038"
  },
  {
    "text": "Yeah, at the back. [INAUDIBLE] Can you tell me where\nyou put the locks?",
    "start": "3503038",
    "end": "3508718"
  },
  {
    "text": "I mean, I can start with what\ndid you see at the beginning and at the end. OK, so what you're\ngoing to do is you're going to put one at the\nbeginning of insert and one",
    "start": "3508718",
    "end": "3515227"
  },
  {
    "text": "at the end of insert,\nand then is that it? [INAUDIBLE] One more at the beginning\ndelete, the end and delete.",
    "start": "3515227",
    "end": "3522380"
  },
  {
    "text": "Why is everybody laughing? It's good. It's good?",
    "start": "3522380",
    "end": "3527450"
  },
  {
    "text": "It works. It works. Are you sure? Are you sure it works?",
    "start": "3527450",
    "end": "3534320"
  },
  {
    "text": "Look closer. Even the simplest coarse\ngrained locking is busted.",
    "start": "3534320",
    "end": "3540188"
  },
  {
    "text": "It's still one lock\nfor both of them. Well, yeah, we're assuming\nit's the same lock. Yeah, that works.",
    "start": "3540188",
    "end": "3545630"
  },
  {
    "text": "Look closer. ",
    "start": "3545630",
    "end": "3551660"
  },
  {
    "text": "I claim deadlock. ",
    "start": "3551660",
    "end": "3562310"
  },
  {
    "text": "Now, of course, if you used one\nof these unique locks and C++ that automatically unlocked when\nit went out of scope you'd be",
    "start": "3562310",
    "end": "3569960"
  },
  {
    "text": "fine, but this is just a little\nexample of even something as simple as throw your locks\nglobally around everything with",
    "start": "3569960",
    "end": "3577310"
  },
  {
    "text": "multiple exit points from\na function can get you. OK, so if I had to jump\nforward, if I had to be careful,",
    "start": "3577310",
    "end": "3586590"
  },
  {
    "text": "it would a little bit like this. Exactly. The same spirit\nof your solution.",
    "start": "3586590",
    "end": "3592384"
  },
  {
    "text": "So what's good and\nwhat's bad about this? What's good is clearly\nthat it's correct now. What's bad? [INAUDIBLE]",
    "start": "3592385",
    "end": "3598940"
  },
  {
    "text": "And the entire access\nto the data structure is serialized at this point. And that's going to be trouble.",
    "start": "3598940",
    "end": "3605370"
  },
  {
    "text": "Why even spawn these\nthreads in the first place? Good. So that's not-- may limit\nparallel application",
    "start": "3605370",
    "end": "3612440"
  },
  {
    "text": "performance. And well, if most\nof your performance was in the data structure,\nit's going to definitely limit your action. You may not care\nif most of your--",
    "start": "3612440",
    "end": "3619453"
  },
  {
    "text": " I don't know what's\ngoing on today.",
    "start": "3619454",
    "end": "3625620"
  },
  {
    "text": "So what I'd like\nyou to think about, you don't need to see\nthe slides for this. I'll bring it back up in\na second as soon as I--",
    "start": "3625620",
    "end": "3631200"
  },
  {
    "text": "is, how would you do better? So talk that over for a second. So clearly, different parts\nof this data structure",
    "start": "3631200",
    "end": "3638250"
  },
  {
    "text": "can be edited at\ndifferent times. Yeah. ",
    "start": "3638250",
    "end": "3648140"
  },
  {
    "text": "OK, so just for\nthe sake of making sure we get through\neverything, I mean,",
    "start": "3648140",
    "end": "3654809"
  },
  {
    "text": "I'm not surprised people are\nstill puzzling over this. I should probably give\nyou at least five minutes to try and figure\nsomething like this out.",
    "start": "3654810",
    "end": "3660540"
  },
  {
    "text": "By the way, on an exam one\nyear, I decided to do this for a rotating binary search\ntree, and it was hard,",
    "start": "3660540",
    "end": "3667410"
  },
  {
    "text": "but I promise I won't. What's the gist of some\nof the stuff that you're coming up with? So first of all, I\nthink, it should be clear",
    "start": "3667410",
    "end": "3675230"
  },
  {
    "text": "that I should be able to do\nsome insertion or deletion here while another thread is working\non another part of the list,",
    "start": "3675230",
    "end": "3682440"
  },
  {
    "text": "like the data structure\nshould definitely afford that. What are you thinking about in\nhow you might accomplish this?",
    "start": "3682440",
    "end": "3689760"
  },
  {
    "text": "Yeah. I think probably like a\nlock on a per node basis, so maybe you can just add\na lock to a node structure.",
    "start": "3689760",
    "end": "3696800"
  },
  {
    "text": "So let's throw a\nlock on every node now, so there's no\ntotal list lock anymore.",
    "start": "3696800",
    "end": "3702000"
  },
  {
    "text": "There's a lock per node. OK. So that's a reasonable start. And now the question\nis, what's the order",
    "start": "3702000",
    "end": "3709050"
  },
  {
    "text": "that you would take\nthose locks to make sure that things were OK? Let me give you a\nstarting example.",
    "start": "3709050",
    "end": "3715540"
  },
  {
    "text": "One example would be I'm\ngoing to take a lock on 3, and then I'm going to\nrelease the lock on 3,",
    "start": "3715540",
    "end": "3721140"
  },
  {
    "text": "and put a lock on 5. And then I'm going to\nrelease the lock on 5, and put a lock on 10.",
    "start": "3721140",
    "end": "3726390"
  },
  {
    "text": "That's one example. Another one would be,\nI'm going to lock 3, and then I'm going\nto lock 5, and then",
    "start": "3726390",
    "end": "3732119"
  },
  {
    "text": "I'm going to lock 10\nholding all of these locks, and then I'm going\nto do my thing, and then I'm going to\nrelease the locks, so how",
    "start": "3732120",
    "end": "3737738"
  },
  {
    "text": "did you-- did anybody start\ndiscussing like a policy for how you might maintain\nas much concurrency",
    "start": "3737738",
    "end": "3743490"
  },
  {
    "text": "as you possibly could, but\nalso still got to be correct? So what's like-- what\nabout my simple example?",
    "start": "3743490",
    "end": "3749740"
  },
  {
    "text": "Let's take a lock on\n3, let's release it, and then let's lock 5,\nand then let's release it, and let's lock 10.",
    "start": "3749740",
    "end": "3754775"
  },
  {
    "text": " Yeah. [INAUDIBLE]",
    "start": "3754775",
    "end": "3759890"
  },
  {
    "text": " OK. If I lock 3, if I\nrelease the lock on 3,",
    "start": "3759890",
    "end": "3765560"
  },
  {
    "text": "and I don't have\nany locks, that's the moment where I know nothing\nabout the data structure anymore.",
    "start": "3765560",
    "end": "3771339"
  },
  {
    "text": "That means that by the time\nI go to 5, it might be gone. So that it can't be\na situation where",
    "start": "3771340",
    "end": "3777800"
  },
  {
    "text": "we have no locks,\notherwise that's definitely going to be trouble. If you hold the\nlock at 3 it means",
    "start": "3777800",
    "end": "3783710"
  },
  {
    "text": "that only you can update\nit, so it's like you are responsible for that link? So if I'm holding the\nlock on 3, what do I know?",
    "start": "3783710",
    "end": "3791545"
  },
  {
    "text": " Nobody else has a lock\non 3, so that's true.",
    "start": "3791545",
    "end": "3797920"
  },
  {
    "text": "How can we use that\ninformation to have guarantees? Release [INAUDIBLE] to know that\nnobody has locked 5 [INAUDIBLE].",
    "start": "3797920",
    "end": "3808030"
  },
  {
    "text": "So if we lock 3 and\nthen we lock 5 and 3,",
    "start": "3808030",
    "end": "3813050"
  },
  {
    "text": "well, we certainly know that\nnobody has got locks on 3 or 5. And then we also know that\nnobody has locks on 5 and 10.",
    "start": "3813050",
    "end": "3821505"
  },
  {
    "text": " That's helpful.",
    "start": "3821505",
    "end": "3827100"
  },
  {
    "text": "Yeah. Maybe you only need to lock\nthe nodes before and after, the one that you have access to\nto make sure that that's part.",
    "start": "3827100",
    "end": "3833309"
  },
  {
    "text": "So there should\nbe some notion of, I only need to keep the locks on\nthe blast radius in some sense.",
    "start": "3833310",
    "end": "3840690"
  },
  {
    "text": "I only need to keep\nthe locks on things that if someone else modified\nit would cause me a problem.",
    "start": "3840690",
    "end": "3848255"
  },
  {
    "text": "And so the real question is\nhow many locks is that here? So one way in, and this\ndiagram, this gentleman",
    "start": "3848255",
    "end": "3856940"
  },
  {
    "text": "on American Ninja Warrior,\nhe's on the overhead bars. And so this idea that if we ever\nlock, and then unlock, and then",
    "start": "3856940",
    "end": "3866030"
  },
  {
    "text": "lock again, that is deadly,\nthat's like basically what happens if he's never\nholding on to at least one bar?",
    "start": "3866030",
    "end": "3873320"
  },
  {
    "text": "Gravity takes over. It's not going to work. But he's doing this\nthing where he's making sure he's holding on\nto at least one bar at a time.",
    "start": "3873320",
    "end": "3881340"
  },
  {
    "text": "And the question\nthat we have now is like, how many locks\ndo we really need?",
    "start": "3881340",
    "end": "3886980"
  },
  {
    "text": "So here's a scheme that embodies\nthis hand-over-hand locking idea, where I'm inspired\nby what you're saying,",
    "start": "3886980",
    "end": "3894130"
  },
  {
    "text": "I'm going to take the\nlock on 3, and then I'm going to take the lock\non five before I release",
    "start": "3894130",
    "end": "3899520"
  },
  {
    "text": "that lock on 3. And then what am I doing?",
    "start": "3899520",
    "end": "3904620"
  },
  {
    "text": "Yeah, I'm deleting 11 here. So I need to keep going, so I\nneed to take that lock on 10,",
    "start": "3904620",
    "end": "3910359"
  },
  {
    "text": "release it, take\nthat lock on 11. And at this point, these are my\nthread zero's previous pointer",
    "start": "3910360",
    "end": "3918930"
  },
  {
    "text": "and current pointer in\nthe linked list traversal. So should I delete--",
    "start": "3918930",
    "end": "3925770"
  },
  {
    "text": "should I release the lock\non 10 and then delete 11? No. No.",
    "start": "3925770",
    "end": "3931370"
  },
  {
    "text": "What's the motivation\nbehind that?  Set 10 to--",
    "start": "3931370",
    "end": "3938960"
  },
  {
    "text": "So if I-- so why can't I-- I'm only deleting 11, so\nwhy do I care about 10?",
    "start": "3938960",
    "end": "3944970"
  },
  {
    "text": "Here a good backup to this. So I need to modify 10. ",
    "start": "3944970",
    "end": "3951665"
  },
  {
    "text": "And so since I'm\ngoing to be modifying 10, what am I worried about? Next pointer of 10.",
    "start": "3951665",
    "end": "3957349"
  },
  {
    "text": "The next pointer of 10. Well, really what am I worried\nabout some other thread doing? It could delete 10. Another thread could delete 10.",
    "start": "3957350",
    "end": "3963900"
  },
  {
    "text": "What if another thread\ninserts after 10? Yeah. So to delete, I want to\nmake sure I always have",
    "start": "3963900",
    "end": "3971660"
  },
  {
    "text": "a lock on current and previous.",
    "start": "3971660",
    "end": "3977650"
  },
  {
    "text": "And so let's say if thread 1\ncomes in and wants to delete 10, why are we protected?",
    "start": "3977650",
    "end": "3983933"
  },
  {
    "text": "It's got a lock. Because if the\nrule to delete is I have to have a lock on the thing\nto delete and the previous one,",
    "start": "3983934",
    "end": "3990565"
  },
  {
    "text": "I know that nobody is\ndeleting the previous one. Why? ",
    "start": "3990565",
    "end": "3999240"
  },
  {
    "text": "Why can't thread 1 get in there? Because the-- Because I have the lock.",
    "start": "3999240",
    "end": "4004900"
  },
  {
    "text": "So why am I not worried\nabout someone deleting 18?",
    "start": "4004900",
    "end": "4010940"
  },
  {
    "text": "Why do I need-- why don't I\nneed the one in front of me? We have to lock on\n11, so that we-- So if I have the lock on 11,\nnobody can be deleting 18.",
    "start": "4010940",
    "end": "4018505"
  },
  {
    "text": " So why am I not-- now\nlet's think about insert.",
    "start": "4018505",
    "end": "4025610"
  },
  {
    "text": "If I have the lock\non 11, how do I know that nobody is\ninserting after 11?",
    "start": "4025610",
    "end": "4032825"
  },
  {
    "text": "Because you have a lock on 11. Because I'm going to\nhave a lock on 11. How do I know that nobody's\ninserting after 18?",
    "start": "4032825",
    "end": "4040580"
  },
  {
    "text": "I don't, but I don't care\nbecause it won't impact me. So this hand-over-hand, 1,\n2, 1, 2, 1, 2, 1, 2, always",
    "start": "4040580",
    "end": "4050150"
  },
  {
    "text": "keeping a lock on\nprevious and current is actually going\nto work out here. Yes.",
    "start": "4050150",
    "end": "4055490"
  },
  {
    "text": "The way insert was set up,\nif you had, I don't know, thread 2 come in and start\nafter thread 0, and thread",
    "start": "4055490",
    "end": "4062090"
  },
  {
    "text": "1 in this case, would it to\nbe blocked in this operation was to insert after\n18, but it started",
    "start": "4062090",
    "end": "4067647"
  },
  {
    "text": "after these two operations,\nwould it still have to wait? That's correct. So that's a nice--\nso this is not",
    "start": "4067647",
    "end": "4073160"
  },
  {
    "text": "necessarily a\nmaximum concurrency",
    "start": "4073160",
    "end": "4078329"
  },
  {
    "text": "because I have a\nthread 2 coming in, and let's this is like\nway down the list. Or actually, let's say\nit's a really long list,",
    "start": "4078330",
    "end": "4084100"
  },
  {
    "text": "and this is happening\nat the beginning. Thread 2, T2, which\nis not on the slide. It's not going to be\nable to get past these,",
    "start": "4084100",
    "end": "4090420"
  },
  {
    "text": "and get ahead, even if it's\ngoing to operate way over here on the list. And why do we have to make sure\nthat it cannot pass things up?",
    "start": "4090420",
    "end": "4099179"
  },
  {
    "text": "Because while it's\ntraversing these T1 or T0,",
    "start": "4099180",
    "end": "4104439"
  },
  {
    "text": "better not be deleting those\nnodes that it's traversing, or inserting actually in places\nbecause we can lose the list",
    "start": "4104439",
    "end": "4110383"
  },
  {
    "text": "with inserts and stuff. So yes, a linked list is a\nvery sequential data structure",
    "start": "4110384",
    "end": "4115500"
  },
  {
    "text": "in some ways. And unlike some other\ndata structures, you don't have as much\nconcurrency in it.",
    "start": "4115500",
    "end": "4122009"
  },
  {
    "text": "Now, if we had a\nguarantee that T1 and T2, T0 were not writing to\nthis portion of the array,",
    "start": "4122010",
    "end": "4129870"
  },
  {
    "text": "then we could think about it. We could think about\na different lock type that was allowed multiple\nreaders or something like that,",
    "start": "4129870",
    "end": "4136299"
  },
  {
    "text": "but we have not discussed\nthat here in this class today. OK. All right. So here's the hand-over-hand\nlocking solution",
    "start": "4136300",
    "end": "4145694"
  },
  {
    "text": "for this program. There's actually a few kind of\ntricky invariants in that what--",
    "start": "4145695",
    "end": "4151460"
  },
  {
    "text": "I actually had to take-- there's actually\na lock on the list as well as a lock on the node.",
    "start": "4151460",
    "end": "4157610"
  },
  {
    "text": "The point being is\nremember our invariant is I need the lock on current\nand I need the lock on previous. If you're deleting\nthe first node,",
    "start": "4157611",
    "end": "4165594"
  },
  {
    "text": "you either need a dummy previous\nor you need an extra lock somewhere else, so\nthis code is correct.",
    "start": "4165595",
    "end": "4172470"
  },
  {
    "text": "There's actually ways to make it\nslightly more performant where you more aggressively\nunlock things,",
    "start": "4172470",
    "end": "4178470"
  },
  {
    "text": "and I'll leave that to the class\nto out on the discussion board. So this is good,\njust different things",
    "start": "4178470",
    "end": "4186259"
  },
  {
    "text": "that you might come up\nwith like incorrect. You actually could\nend up dead locking. It's hard to deadlock a\nlittle bit in a linked list",
    "start": "4186260",
    "end": "4193100"
  },
  {
    "text": "because it's one\ndirectional, but-- and then there's the cost. Now, imagine remember\nyour cost of a linked list",
    "start": "4193100",
    "end": "4199460"
  },
  {
    "text": "was like just chasing a pointer. Now, you're taking a lock\non every step, that's going",
    "start": "4199460",
    "end": "4204510"
  },
  {
    "text": "to slow things down big time. So it may be the case that\nbig, coarse lock might actually",
    "start": "4204510",
    "end": "4210000"
  },
  {
    "text": "be better, limit concurrency,\nbut get done quick. So who knows? You'd have to\nperformance profile.",
    "start": "4210000",
    "end": "4216270"
  },
  {
    "text": "If it turned out that taking a\nlock on every step to the list was too much, what are\nsome ways that you might--",
    "start": "4216270",
    "end": "4221415"
  },
  {
    "text": "what's a middle ground\nbetween a lock on everything and a lock on every node?",
    "start": "4221415",
    "end": "4227244"
  },
  {
    "text": "Lock on section. Yeah, you could say, I'm going\nto take a lock for every 5, or 10, nodes or\nsomething like that.",
    "start": "4227244",
    "end": "4233730"
  },
  {
    "text": "Yeah, exactly. So you can play around. So on your own time,\na very good exercise",
    "start": "4233730",
    "end": "4238800"
  },
  {
    "text": "would be to let's just go\nwith a standard binary tree. And a binary search\ntree, and try and figure",
    "start": "4238800",
    "end": "4247300"
  },
  {
    "text": "out-- try and write the code\nyourself of insert and delete on a binary tree.",
    "start": "4247300",
    "end": "4252730"
  },
  {
    "text": "No rotations or\nanything like that. OK, so I want to hint at\none more thing that is not",
    "start": "4252730",
    "end": "4260920"
  },
  {
    "text": "going to be on your midterm,\nbut we'll bring it back for the final a\nlittle bit is how",
    "start": "4260920",
    "end": "4266200"
  },
  {
    "text": "to make concurrent data\nstructures that are thread safe, but don't use locks.",
    "start": "4266200",
    "end": "4272280"
  },
  {
    "text": "And you've already\nseen one example of it in class, atomic min. I think you said just use locks.",
    "start": "4272280",
    "end": "4278739"
  },
  {
    "text": "And I was like, well,\nno, you can't use locks. That compare and\nswap implementation is an example of a primitive\nthat is safe, but does not",
    "start": "4278740",
    "end": "4288190"
  },
  {
    "text": "use locks. And the main idea\nwas to say, I'm going to basically\nspeculatively go forward",
    "start": "4288190",
    "end": "4297400"
  },
  {
    "text": "with whatever operation\nI'm supposed to do, and at the last\nsecond, I'm going to check to see if\nsomething's changed.",
    "start": "4297400",
    "end": "4302970"
  },
  {
    "text": "And if something's changed, I'm\ngoing to start all over again, and that's different from locks. Locks say, when I enter,\nnobody else can go.",
    "start": "4302970",
    "end": "4311750"
  },
  {
    "text": "In this lock-free\nway of thinking, your idea is to\nsay everybody goes, but everybody can check\nat the last second",
    "start": "4311750",
    "end": "4318950"
  },
  {
    "text": "to see if things are safe. And if things are safe,\nthey do their right. If they don't, they\nabort and try again.",
    "start": "4318950",
    "end": "4325820"
  },
  {
    "text": "That's the big\nidea of lock-free.  And one of the reasons\nwhy people are so--",
    "start": "4325820",
    "end": "4334400"
  },
  {
    "text": "were lock-free is people\ntalk about it, I think, a little bit more\nthan necessary,",
    "start": "4334400",
    "end": "4341280"
  },
  {
    "text": "but all of your concurrent\ncollections in Java are lock-free\nimplementations, for example. And I want you to think about\na case that in our class,",
    "start": "4341280",
    "end": "4349770"
  },
  {
    "text": "most of the code you write\nis your application runs is the only thing\nrunning on the machine. You're using parallelism\nto run really fast.",
    "start": "4349770",
    "end": "4357230"
  },
  {
    "text": "Imagine you're writing some\nbig database or some web server and there's hundreds\nof thousands of threads or\nsomething like that.",
    "start": "4357230",
    "end": "4362760"
  },
  {
    "text": "Concurrent threading\nis being used to hide latency of network\ntraffic or something like that, not\nnecessarily parallelism.",
    "start": "4362760",
    "end": "4369820"
  },
  {
    "text": "Imagine you take a\nlock as a thread, and then you get\nswapped out by the OS,",
    "start": "4369820",
    "end": "4376790"
  },
  {
    "text": "you get context switched out. All of the runnable threads are\nsitting there spinning or trying",
    "start": "4376790",
    "end": "4382780"
  },
  {
    "text": "to get a lock, and the thread\nthat has the lock just got swapped out in its\ncritical section.",
    "start": "4382780",
    "end": "4389050"
  },
  {
    "text": "Those are the types of\nexamples that really motivated lock-free data structures. Because just because you\nhave the lock, if you are not",
    "start": "4389050",
    "end": "4396010"
  },
  {
    "text": "doing anything,\nsomebody else should be able to come in\nand do their thing, and so that's the\ndifference between blocking",
    "start": "4396010",
    "end": "4402430"
  },
  {
    "text": "and non-blocking. Everything that I've\nshown you in this lecture so far has been-- except\nfor the atomic cast",
    "start": "4402430",
    "end": "4409900"
  },
  {
    "text": "stuff has been blocking, meaning\nthat if you can't get the lock, you just stop. And now everything I'm\ngoing to talk about",
    "start": "4409900",
    "end": "4416260"
  },
  {
    "text": "is just run forward\nand hope for the best, and that's what lock-free\nalgorithms are called.",
    "start": "4416260",
    "end": "4421990"
  },
  {
    "text": "So let me give you just one\nsimple example before we-- here's a queue. This is very much\nlike a queue that you",
    "start": "4421990",
    "end": "4428510"
  },
  {
    "text": "would write at a Microsoft\ninterview, again. This is like a big-- and so I'm implementing\na queue as an array,",
    "start": "4428510",
    "end": "4436080"
  },
  {
    "text": "and as you push\nyou increment head, as you pop, you increment-- or\nas you push, you increment tail,",
    "start": "4436080",
    "end": "4441270"
  },
  {
    "text": "as you pop, you increment head. And imagine you're doing\nit with just two threads.",
    "start": "4441270",
    "end": "4448010"
  },
  {
    "text": "The pusher thread is just\nincrementing the tail. The pauper thread is just\nincrementing the head,",
    "start": "4448010",
    "end": "4457520"
  },
  {
    "text": "so you don't have\ntwo threads ever accessing the same\nvariables, and this code",
    "start": "4457520",
    "end": "4462950"
  },
  {
    "text": "is thread safe with two threads. And I'll stop there. I don't want to\nhold you any later,",
    "start": "4462950",
    "end": "4469230"
  },
  {
    "text": "but in the slides what\nyou'll find is you'll find-- I gave an example\nof how to do that",
    "start": "4469230",
    "end": "4474290"
  },
  {
    "text": "with allocation,\nwith a queue that's implemented as a linked\nlist, and I give you",
    "start": "4474290",
    "end": "4480740"
  },
  {
    "text": "an example of a stack. So the idea of a lock-free\nstack is you try and pop,",
    "start": "4480740",
    "end": "4486210"
  },
  {
    "text": "you do all the stuff to pop,\nand again, at the last second you check to see has\nanybody else popped?",
    "start": "4486210",
    "end": "4491310"
  },
  {
    "text": "And if nobody else\nhas popped, which you can detect with compare\nand swap, you just go ahead.",
    "start": "4491310",
    "end": "4496761"
  },
  {
    "text": "And the nice thing is that if\nyou're in the middle of a pop and you get swapped out, then\nall the other threads come in",
    "start": "4496762",
    "end": "4502760"
  },
  {
    "text": "and they just do their pops. And when you get swapped back in\nand you complete your operation,",
    "start": "4502760",
    "end": "4508800"
  },
  {
    "text": "you will detect that\nthe world has changed, and you just try again. So these lock-free\ndata structures",
    "start": "4508800",
    "end": "4514520"
  },
  {
    "text": "are designed for highly\nconcurrent situations when there's a bunch of\ndifferent threads and tasks",
    "start": "4514520",
    "end": "4520310"
  },
  {
    "text": "on the same machine\nto try and get around some of the problems that can\noccur in a blocking situation",
    "start": "4520310",
    "end": "4527360"
  },
  {
    "text": "where you have mutual exclusion. So I just want you to know\na little bit about them. We're not going to talk about\nthem too much more in the class",
    "start": "4527360",
    "end": "4534142"
  },
  {
    "text": "until we get to the modern\nday version of all of this, which is transactional memory.",
    "start": "4534142",
    "end": "4539825"
  },
  {
    "text": "I'll let you all go. Sorry for going a\nlittle bit over. ",
    "start": "4539825",
    "end": "4547000"
  }
]