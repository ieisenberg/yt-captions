[
  {
    "start": "0",
    "end": "175000"
  },
  {
    "text": "All right. So, last time we were starting to talk about the sort of the general overview of what reinforcement learning involves,",
    "start": "4220",
    "end": "11085"
  },
  {
    "text": "um, and, we introduced the notion [NOISE] of a model, a value, and a policy.",
    "start": "11085",
    "end": "16830"
  },
  {
    "text": "[NOISE] Um, so it's good to just refresh your brain right now, about what, what those three things are.",
    "start": "16830",
    "end": "22650"
  },
  {
    "text": "Can anybody remember off the top of their head what a value, a model, or a policy was in the context of reinforcement learning?",
    "start": "22650",
    "end": "28710"
  },
  {
    "text": "[NOISE] Um, so policy is a set of actions, that, uh, the agent should take [NOISE] in a work. [NOISE]",
    "start": "28710",
    "end": "36359"
  },
  {
    "text": "Exactly right. So, the definition of a policy is a mapping from the state you're in to what is the action, um, to take.",
    "start": "36360",
    "end": "42930"
  },
  {
    "text": "And it might be a good policy or a bad policy. And the way we evaluate that, is in terms of its [NOISE] expected discounted sum of rewards.",
    "start": "42930",
    "end": "49610"
  },
  {
    "text": "Does anybody remember what a model was? Yeah? A model is like, uh, representation of the world and how that changes in response to agent's accident. [NOISE]",
    "start": "49610",
    "end": "58020"
  },
  {
    "text": "Yeah. So right, so normally we think of a model of incorporating either reward model, or a decision, uh, or, or dynamics model,",
    "start": "58020",
    "end": "64610"
  },
  {
    "text": "[NOISE] which specifies in response to the current state and, uh, an action how the world might change,",
    "start": "64610",
    "end": "70715"
  },
  {
    "text": "could be a stochastic model or a deterministic model. [NOISE] Um, and the reward model specifies, what is the expected reward, um,",
    "start": "70715",
    "end": "77390"
  },
  {
    "text": "that the agent receives from taking a state in a particular action. [NOISE] So what we're gonna talk about today is, um,",
    "start": "77390",
    "end": "83690"
  },
  {
    "text": "thinking about, if you know a model of the world, so, you know, um, what happens if you take an action in a particular state,",
    "start": "83690",
    "end": "90710"
  },
  {
    "text": "or what the distribution of next states might be if you [NOISE] take an action, [NOISE] um, how we should make decisions.",
    "start": "90710",
    "end": "96565"
  },
  {
    "text": "So, how do we do the planning problem? So, we're not gonna talk about learning today. We're just gonna talk about the problem of figuring out what is the right thing to do,",
    "start": "96565",
    "end": "104030"
  },
  {
    "text": "[NOISE] when your actions may have delayed consequences, which means that you may have to sacrifice",
    "start": "104030",
    "end": "109550"
  },
  {
    "text": "immediate reward in order to maximize long-term reward. [NOISE] So as we just stated, um,",
    "start": "109550",
    "end": "117060"
  },
  {
    "text": "the model generally we're gonna think about is statistical or mathematical models, of the dynamics and the reward function.",
    "start": "117060",
    "end": "123530"
  },
  {
    "text": "Um, a policy is a function that maps the students each, uh, uh these agents states to actions,",
    "start": "123530",
    "end": "129319"
  },
  {
    "text": "and the value function as the expected discounted sum of rewards, um, from being in a state, um,",
    "start": "129320",
    "end": "135110"
  },
  {
    "text": "and/or an action, [NOISE] and then following a particular policy. [NOISE] So what we're gonna do today is,",
    "start": "135110",
    "end": "141830"
  },
  {
    "text": "sort of, um, build up for Markov Processes, um, up to Markov Decision Processes.",
    "start": "141830",
    "end": "146900"
  },
  {
    "text": "And this build, I think, is sort of a nice one because it sort of allows one to think about what happens in the cases where you",
    "start": "146900",
    "end": "152870"
  },
  {
    "text": "might not have control over the world but the world might still be evolving in some way. [NOISE] Um, and think about what the reward might be in those, sort of,",
    "start": "152870",
    "end": "160070"
  },
  {
    "text": "processes, for an agent that is sort of passively experiencing the world. Um, and then we can start to think about the control problem of how the agent should be",
    "start": "160070",
    "end": "168290"
  },
  {
    "text": "choosing to act in the world in order to maximize its expected discounted sum of rewards. [NOISE] So, what we're gonna focus about on today and, er,",
    "start": "168290",
    "end": "178310"
  },
  {
    "start": "175000",
    "end": "235000"
  },
  {
    "text": "and most of the rest of the classes is this Markov Decision Process, um, where we think about an agent interacting with the world.",
    "start": "178310",
    "end": "184870"
  },
  {
    "text": "So the agent gets to take actions, typically denoted by a, [NOISE] those affect the state of the world in some way, um,",
    "start": "184870",
    "end": "191150"
  },
  {
    "text": "and then the agent receives back a state and a reward. So last time we talked about the fact that this could in",
    "start": "191150",
    "end": "196760"
  },
  {
    "text": "fact be an observation, instead of a state. But then, when we think about the world being Markov,",
    "start": "196760",
    "end": "203265"
  },
  {
    "text": "we're going to [NOISE] think of an agent, just focusing on the current state, um, so the most recent observation, like, you know,",
    "start": "203265",
    "end": "209640"
  },
  {
    "text": "whether or not the robots laser range finders saying, that there are walls, to the left or right of it, as opposed to thinking of the full sequence of prior history",
    "start": "209640",
    "end": "217280"
  },
  {
    "text": "of the sequences of actions taken and the observations received. [NOISE] Um, as we talked about last time",
    "start": "217280",
    "end": "223670"
  },
  {
    "text": "but you can always incorporate [NOISE] the full history to make something Markov, um, [NOISE] but most of the time today, we'll be thinking about, sort of, immediate sensors.",
    "start": "223670",
    "end": "230435"
  },
  {
    "text": "If it's not clear, feel free to reach out. [NOISE] So, what did the Markov Process mean?",
    "start": "230435",
    "end": "236865"
  },
  {
    "start": "235000",
    "end": "290000"
  },
  {
    "text": "The Markov process is to say that the state that the agent is using to make their decisions, is the sufficient [NOISE] statistic of the history.",
    "start": "236865",
    "end": "243709"
  },
  {
    "text": "[NOISE] Which means that in order to predict the future distribution of states, on the next time step.",
    "start": "243710",
    "end": "249635"
  },
  {
    "text": "Here we're using t to denote time step. [NOISE] That given our current state s_t,",
    "start": "249635",
    "end": "257880"
  },
  {
    "text": "and the action that is taken a_t, [NOISE] this is again the action, [NOISE] um, that this is equivalent to,",
    "start": "257880",
    "end": "264965"
  },
  {
    "text": "if we'd actually remember the entire history, where the history recall was gonna be the sequence of all the previous actions and rewards.",
    "start": "264965",
    "end": "273350"
  },
  {
    "text": "And next states that we have seen up until the current time point. [NOISE] And so essentially, it allows us to say that,",
    "start": "273350",
    "end": "281180"
  },
  {
    "text": "the future is independent of the past given some current aggregate statistic about the present.",
    "start": "281180",
    "end": "286500"
  },
  {
    "text": "[NOISE] So when we think about a Markov Process or a Markov Chain,",
    "start": "286500",
    "end": "292790"
  },
  {
    "start": "290000",
    "end": "353000"
  },
  {
    "text": "we don't think of there being any control yet. There's no actions. Um, but the idea is that, you might have a stochastic process that's evolving over time.",
    "start": "292790",
    "end": "300020"
  },
  {
    "text": "[NOISE] Um, so whether or not I invest in the stock market, the stock market is changing over time.",
    "start": "300020",
    "end": "305330"
  },
  {
    "text": "And you could think of that as a Markov Process, [NOISE] um, so I could just, sort of be, passively observing how the stock market for a particular,",
    "start": "305330",
    "end": "312790"
  },
  {
    "text": "th- the stock value for a particular stock, is changing over time. [NOISE] Um, and a Markov Chain is,",
    "start": "312790",
    "end": "319729"
  },
  {
    "text": "is sort of just the sequence of random states, where the transition dynamics satisfies this Markov property.",
    "start": "319730",
    "end": "326020"
  },
  {
    "text": "So formally, the definition of a Markov Process is that, you have, um, a finite or potentially infinite set of states.",
    "start": "326020",
    "end": "332495"
  },
  {
    "text": "And you have a dynamics model which specifies the probability for the next state given the previous state. [NOISE] There's no rewards,",
    "start": "332495",
    "end": "338930"
  },
  {
    "text": "there's no actions yet. Um, and if you have a finite set of states, you can just write this down as a matrix.",
    "start": "338930",
    "end": "344150"
  },
  {
    "text": "Just a transition matrix that says, you're starting at some state. What's the probability distribution over next states that you could reach?",
    "start": "344150",
    "end": "350540"
  },
  {
    "text": "[NOISE] So if we go back to the Mars Rover example that we talked about last time.",
    "start": "350540",
    "end": "357020"
  },
  {
    "start": "353000",
    "end": "726000"
  },
  {
    "text": "[NOISE] Um, In this little Mars Rover example, we thought of a Mars Rover landing on Mars and there might be different sorts of landing sites,",
    "start": "357020",
    "end": "363095"
  },
  {
    "text": "um, so maybe our Mars Rovers starts off here. And then, it can go to the left or right, um, er,",
    "start": "363095",
    "end": "371130"
  },
  {
    "text": "under different actions or we could just think of those actions as being a_1 or a_2, where it's trying to act in the world.",
    "start": "371130",
    "end": "376520"
  },
  {
    "text": "[NOISE] Um, and in this case, uh, the transition dynamics, it doesn't, we don't actually have actions yet,",
    "start": "376520",
    "end": "382880"
  },
  {
    "text": "and we just think of it as, sort of, maybe it already has some way, it's moving in the world, the motors are just working. [NOISE] And so in this case,",
    "start": "382880",
    "end": "389900"
  },
  {
    "text": "the transition dynamics looks like this, which says that, for example, the way you could read this, is you could say, well,",
    "start": "389900",
    "end": "395570"
  },
  {
    "text": "the probability that I start in a particular state s_1, um, and then, I can transition to the next state on the next time step is 0.4.",
    "start": "395570",
    "end": "403520"
  },
  {
    "text": "[NOISE] There is a 0.6 chance that I stay in the same state on the next time step. Yeah? [NOISE] Um, which dimension represents the start state?",
    "start": "403520",
    "end": "412150"
  },
  {
    "text": "Um, so, this is a great question. Which dimension, which, which state is the start state? [NOISE] I'm not specifying that here.",
    "start": "412150",
    "end": "418625"
  },
  {
    "text": "Um, uh, In general when we think about Markov chains, we think about looking at their steady-state distribution.",
    "start": "418625",
    "end": "424354"
  },
  {
    "text": "So they're stationary distribution will [NOISE] converge to some distribution over states, [NOISE] that is independent of the start state,",
    "start": "424355",
    "end": "429860"
  },
  {
    "text": "if you run it for long enough. Oh, sorry, I meant to ask, like, on that matrix, which dimension represents the initial state of-",
    "start": "429860",
    "end": "436950"
  },
  {
    "text": "Oh, you mean, like, where you are now right now? Yeah. So in this particular case, you could have it as, um,",
    "start": "436950",
    "end": "442590"
  },
  {
    "text": "the transition of saying, if you start in state, [NOISE] uh, let me make sure that I get it right.",
    "start": "442590",
    "end": "448650"
  },
  {
    "text": "In this case, [NOISE] answer there, there, so if you start in state here,",
    "start": "448650",
    "end": "454920"
  },
  {
    "text": "um, so this is yours initial start at a state s_1 and then you take the dot product of that with,",
    "start": "454920",
    "end": "463525"
  },
  {
    "text": "I may have mo- let me see if I get it right in terms of mixing it up. It's either on one side or the other side, and then, I may have transitioned it.",
    "start": "463525",
    "end": "469680"
  },
  {
    "text": "Um, I think you'll have to do it for the [NOISE] other side here. Yep, it'll be flipped.",
    "start": "469680",
    "end": "475160"
  },
  {
    "text": "So, you would have your initial state. So 1, 0, 0, 0, 0, 0, 1, 2, 3, 4,",
    "start": "475160",
    "end": "480750"
  },
  {
    "text": "5, 6, and then times P, and that would give you your next state distribution s'. Yeah? [NOISE]",
    "start": "480750",
    "end": "487470"
  },
  {
    "text": "Um, um, so what are the probabilities computed of, like the rewards, I guess, the probability,",
    "start": "487470",
    "end": "493310"
  },
  {
    "text": "based on the reward of going from state 1 to 2 [NOISE] or? Great question, so was, you know, one of this transition probabilities looking",
    "start": "493310",
    "end": "499199"
  },
  {
    "text": "at [NOISE] this relate to their word, in this case, we're just thinking of Markov Chains, so there's no reward yet, and there's no actions.",
    "start": "499200",
    "end": "504330"
  },
  {
    "text": "[NOISE] Um, and this is just specifying that there's some state of the, uh, of the process. So it's as if you're,",
    "start": "504330",
    "end": "510840"
  },
  {
    "text": "let's say your agent, um, had some configuration of its motors. [NOISE] You don't know what that is, that was set down on Mars, and then it just starts moving about.",
    "start": "510840",
    "end": "518344"
  },
  {
    "text": "And what this would say is, this is the transition probabilities of if that agent starts in state, I can write it this way.",
    "start": "518345",
    "end": "524495"
  },
  {
    "text": "So, if it starts in state, [NOISE] s_1, then the probability that it stays in state s_1 is 0.6.",
    "start": "524495",
    "end": "533060"
  },
  {
    "text": "So, the probability that you're starting in this particular state here, [NOISE] on the next time step that you're still there, is 0.6 because of whatever configuration of the motors were for that robot.",
    "start": "533060",
    "end": "541940"
  },
  {
    "text": "[inaudible] world works. This is specifying that, this is how, yeah,",
    "start": "541940",
    "end": "546965"
  },
  {
    "text": "this is how the world works. So that's a great question. So we're assuming right now, this is, um, the, this Markov process is a state of the world that you were,",
    "start": "546965",
    "end": "554385"
  },
  {
    "text": "there is some the, the environment you're in is just described as a Markov Process, and this describes the dynamics of that process.",
    "start": "554385",
    "end": "560870"
  },
  {
    "text": "We're not talking about how you would estimate those. This is really as if, this is how that world works. This is, like, this is the,",
    "start": "560870",
    "end": "566240"
  },
  {
    "text": "this is the world of the fake little Mars Rover. [NOISE] We have any questions about that? Yeah?",
    "start": "566240",
    "end": "571645"
  },
  {
    "text": "Uh, [NOISE] the serum one cloud action needs to be transposed [NOISE] when you multiplied by P and all [NOISE] we can see is [inaudible]",
    "start": "571645",
    "end": "578220"
  },
  {
    "text": "Yes. Yeah. [inaudible] [NOISE] Let me just write down and correct vector notation.",
    "start": "578220",
    "end": "582899"
  },
  {
    "text": "Would be like this. One, one two, three, four, five, six.",
    "start": "585720",
    "end": "591595"
  },
  {
    "text": "That would be, that would be a sample starting state you could be in for example.",
    "start": "591595",
    "end": "596605"
  },
  {
    "text": "So, this could be your initial state. Initial state and that would mean that your agent is initially in state S one.",
    "start": "596605",
    "end": "605420"
  },
  {
    "text": "Okay. And then if you want to know where it might be on the next state,",
    "start": "606240",
    "end": "611845"
  },
  {
    "text": "you would multiply that by the transition model P depending on the notation and whether you take the transpose of this transition model,",
    "start": "611845",
    "end": "620110"
  },
  {
    "text": "it will be on the left or the right. It should always be obvious from context but if it's not clear,",
    "start": "620110",
    "end": "625150"
  },
  {
    "text": "feel free to ask us. And so what would that say? That would say if you took the, uh, the matrix multiplication of this vector which just",
    "start": "625150",
    "end": "631720"
  },
  {
    "text": "says you're starting in state s_1, what would that look like? Afterwards it would say that you are in state s_1 still with probability 0.6,",
    "start": "631720",
    "end": "643059"
  },
  {
    "text": "you're in state s_2 with probably to 0.4.",
    "start": "643059",
    "end": "646370"
  },
  {
    "text": "And this would be your new (state distribution). And I think that should be transposed. But it's just a one it which specify",
    "start": "648570",
    "end": "655690"
  },
  {
    "text": "the distribution over next states that you would be in. You may have any questions about that?",
    "start": "655690",
    "end": "662750"
  },
  {
    "text": "Okay. All right. So, this is just specifying that the transition model over how the world works over time and it's just I,",
    "start": "663810",
    "end": "671590"
  },
  {
    "text": "I've written it in matrix notation there to be compact. But if it's easier to think about it, it's fine to just think about it in terms of",
    "start": "671590",
    "end": "677440"
  },
  {
    "text": "these probability of next states given the previous state. And so you can just enumerate those, you can write it in a matrix form if the,",
    "start": "677440",
    "end": "685089"
  },
  {
    "text": "if the number of states happens to be finite. So, what would this look like if you wanted to think of what might happen to",
    "start": "685090",
    "end": "691000"
  },
  {
    "text": "the agent over time in this case or what the process might look like, you could just sample episodes. So, let's say that your initial starting state is S four,",
    "start": "691000",
    "end": "698470"
  },
  {
    "text": "and then you could say, well, I can write that as a one-hot vector. I multiply it by my probability. And that gives me some probability distribution over the next states that",
    "start": "698470",
    "end": "706270"
  },
  {
    "text": "I might be in and the world will sample one of those. So, your agent can't be in multiple states at the same time.",
    "start": "706270",
    "end": "712075"
  },
  {
    "text": "So, for example, if we were looking at state s_1, it has a 0.6 chance to abstain in s_1 or 0.4 chance of transitioning.",
    "start": "712075",
    "end": "720055"
  },
  {
    "text": "So, the world will sample one of those two outcomes for you and it might be state s_1. So in this case, we have similar dynamics from s_4.",
    "start": "720055",
    "end": "727675"
  },
  {
    "start": "726000",
    "end": "785000"
  },
  {
    "text": "From s_4, it has a probability of 0.4 going to state s_3. Probability of 0.4 going to state s_4",
    "start": "727675",
    "end": "734575"
  },
  {
    "text": "or a probability of 0.2 of staying in the same place. So, if we were going to sample an episode of what might happen to the agent over time,",
    "start": "734575",
    "end": "742105"
  },
  {
    "text": "you can start with s_4 then maybe it will transition to s_5. Maybe they'll go to s_6, s_7, s_7, s_7.",
    "start": "742105",
    "end": "748420"
  },
  {
    "text": "So, you're just sampling from this transition matrix to generate a particular trajectory. So, it's like the world you know what the dynamics,",
    "start": "748420",
    "end": "756415"
  },
  {
    "text": "the dynamics is of the world and then nature is gonna pick one of those outcomes. It's like sampling from sort of a probability distribution.",
    "start": "756415",
    "end": "763870"
  },
  {
    "text": "Anyone having questions about that? Okay. So, that just gives you a particular episode.",
    "start": "763870",
    "end": "770755"
  },
  {
    "text": "And we're going to be interested in episodes because later we're gonna be thinking about rewards over those episodes and how do we compare the rewards we might achieve over those episodes but for right now,",
    "start": "770755",
    "end": "780205"
  },
  {
    "text": "this is just a process. This is just giving you a sequence of states. So, next we're gonna add in rewards.",
    "start": "780205",
    "end": "787780"
  },
  {
    "start": "785000",
    "end": "877000"
  },
  {
    "text": "So, that was just a Markov chain. And so now what is a Markov reward process? Again, we don't have actions yet just like before.",
    "start": "787780",
    "end": "795520"
  },
  {
    "text": "But now we also have a reward function. So, we still have a dynamics model like before.",
    "start": "795520",
    "end": "801084"
  },
  {
    "text": "And now we have a reward function that says, if you're in a particular state, what is the expected reward you get from being in that state?",
    "start": "801085",
    "end": "808029"
  },
  {
    "text": "We can also now have a discount factor which allows us to trade off between or allows us to think about how",
    "start": "808030",
    "end": "814540"
  },
  {
    "text": "much we weight immediate rewards versus feature rewards. So, again just like before, if we have a finite number of states in",
    "start": "814540",
    "end": "821440"
  },
  {
    "text": "this case R can be represented in matrix notation which is just a vector because it's just the expected reward we get for being in each state.",
    "start": "821440",
    "end": "830090"
  },
  {
    "text": "So, if we look at the Mars Rover MRP, then we could say that the reward for being an s_1 is equal to 1.",
    "start": "830280",
    "end": "840084"
  },
  {
    "text": "The reward for being an s_7 is equal to 10 and everything else that reward is zero. Yeah.",
    "start": "840085",
    "end": "847020"
  },
  {
    "text": "Are the words always just tied to the state you're in? I think last time you talked about it also having an option.",
    "start": "847020",
    "end": "853545"
  },
  {
    "text": "So, why are we not consider that here? Great question. I'm saying that I mentioned last time that rewards for the Markov Decision Process can either be a function of the state,",
    "start": "853545",
    "end": "860950"
  },
  {
    "text": "the state in action, or state action next state. Right now we're still in Markov Reward Processes so there's no action.",
    "start": "860950",
    "end": "866254"
  },
  {
    "text": "So, in this case, the ways you could define rewards would either be over the immediate state or state and next state.",
    "start": "866255",
    "end": "873790"
  },
  {
    "text": "So, once we start to think about there being rewards, we can start to think about there being returns and expected returns.",
    "start": "876360",
    "end": "883480"
  },
  {
    "start": "877000",
    "end": "992000"
  },
  {
    "text": "So, first of all let's define what a horizon is. A horizon is just the number of time steps in an episode.",
    "start": "883480",
    "end": "889209"
  },
  {
    "text": "So, it's sort of like how long the agent is acting for or how long it, how long this process is going on for it and it could be infinite.",
    "start": "889210",
    "end": "898015"
  },
  {
    "text": "So, if it's not infinite, then we call it a finite Markov Decision Process. We talked about those briefly last time.",
    "start": "898015",
    "end": "903820"
  },
  {
    "text": "Um, but it often we think about the case where, um, an agent might be acting forever or this process might be going on forever.",
    "start": "903820",
    "end": "910839"
  },
  {
    "text": "There's no termination of it. The stock market is up today. It'll be up tomorrow. We expect it to be up for a long time.",
    "start": "910840",
    "end": "916795"
  },
  {
    "text": "We're not necessarily tried to think about evaluating it over a short time period.",
    "start": "916795",
    "end": "922524"
  },
  {
    "text": "One might wanna think about evaluating it over a very long time period. So, we've done this.",
    "start": "922525",
    "end": "927805"
  },
  {
    "text": "The definition of a return is just the discounted sum of rewards you get from the current time step to a horizon and that horizon could be infinite.",
    "start": "927805",
    "end": "936040"
  },
  {
    "text": "So, a return just says, if I start off in time step T, what is the immediate reward I get and then I transition maybe to",
    "start": "936040",
    "end": "944380"
  },
  {
    "text": "a new state and then I weigh that return reward by Gamma.",
    "start": "944380",
    "end": "949570"
  },
  {
    "text": "And then I transitioned again and I weigh that one by Gamma squared, et cetera.",
    "start": "949570",
    "end": "955250"
  },
  {
    "text": "And then the definition of a value function is just the expected return.",
    "start": "955260",
    "end": "960475"
  },
  {
    "text": "If the process is deterministic, these two things will be identical. But in general if the process is stochastic, they will be different.",
    "start": "960475",
    "end": "970210"
  },
  {
    "text": "So, what I mean by deterministic is that if you always go to the same next state, no matter which if you start at a state",
    "start": "970210",
    "end": "976870"
  },
  {
    "text": "if there's only a single next state you can go to, uh, then the expectation is equivalent to a single return.",
    "start": "976870",
    "end": "983005"
  },
  {
    "text": "But in the general case, we are gonna be interested in these stochastic decision processes which means averages will be different than particularly runs.",
    "start": "983005",
    "end": "990505"
  },
  {
    "text": "So, for an example of that well, let me first just talk about discount factor and then I'll give an example.",
    "start": "990505",
    "end": "995650"
  },
  {
    "start": "992000",
    "end": "1103000"
  },
  {
    "text": "Discount factors are a little bit tricky. They're both sort of somewhat motivated and somewhat used for mathematical convenience.",
    "start": "995650",
    "end": "1002235"
  },
  {
    "text": "So, we'll see later one of the benefits of mathematic, uh, benefits of discount factors mathematically is that we can",
    "start": "1002235",
    "end": "1008580"
  },
  {
    "text": "be sure that the value function sort of expected discounted sum of returns is bounded as long as here reward function is bounded.",
    "start": "1008580",
    "end": "1016995"
  },
  {
    "text": "Uh, people empirically often act as if there is a discount factor. We weigh future rewards lower than,",
    "start": "1016995",
    "end": "1025005"
  },
  {
    "text": "than immediate rewards typically. Businesses often do the same. If Gamma is equal to 0,",
    "start": "1025005",
    "end": "1030120"
  },
  {
    "text": "you only care about immediate reward. So, you're the agent is acting myopically. It's not thinking about the future of what could happen later on.",
    "start": "1030120",
    "end": "1038115"
  },
  {
    "text": "And if Gamma is equal to one, then that means that your future rewards are exactly as beneficial to you as the immediate rewards.",
    "start": "1038115",
    "end": "1045194"
  },
  {
    "text": "Now, one thing just to note, if you're only using discount factors for mathematical convenience, um,",
    "start": "1045195",
    "end": "1051015"
  },
  {
    "text": "if your horizon is always guaranteed to be finite, it's fine to use gamma equal to one in terms",
    "start": "1051015",
    "end": "1057390"
  },
  {
    "text": "of from a perspective mathematical convenience. Someone having any questions about discount factors? Yeah.",
    "start": "1057390",
    "end": "1065024"
  },
  {
    "text": "My question is, does the discount factor of Gamma always have to progress in a geometric fashion or like is there a reason why we do that?",
    "start": "1065025",
    "end": "1074145"
  },
  {
    "text": "It's a great question. You know, the- what we're defining here is that using a Gamma",
    "start": "1074145",
    "end": "1079620"
  },
  {
    "text": "that progresses through this exponential geometric fashion is that necessary. It's one nice choice that ends up having very nice mathematical properties.",
    "start": "1079620",
    "end": "1088929"
  },
  {
    "text": "There, one could try using other participant is certainly the most common one and we'll see",
    "start": "1088940",
    "end": "1094470"
  },
  {
    "text": "later why it has some really nice mathematical properties. Any other questions? Okay.",
    "start": "1094470",
    "end": "1101935"
  },
  {
    "text": "So, what would be some examples of this? Um, if we go back to our Mars Rover here and we now have this definition of reward,",
    "start": "1101935",
    "end": "1109205"
  },
  {
    "start": "1103000",
    "end": "1399000"
  },
  {
    "text": "um, what would be a sample return? So, let's imagine that we start off in state s_4 and then we transitioned to s_5,",
    "start": "1109205",
    "end": "1115700"
  },
  {
    "text": "s_6, s_7 and we only have four-step returns. So, what that means here is that our, um,",
    "start": "1115700",
    "end": "1121789"
  },
  {
    "text": "our process only continues for four time steps and then it maybe it resets.",
    "start": "1121790",
    "end": "1128015"
  },
  {
    "text": "So, why might something like that be reasonable? Well, particularly when we start to get into decision-making, um you know,",
    "start": "1128015",
    "end": "1133715"
  },
  {
    "text": "maybe customers interact with the website for on average two or three times steps. Um, there's often a bounded number of time you know bounded",
    "start": "1133715",
    "end": "1143029"
  },
  {
    "text": "length of course in many many cases that the horizon is naturally bounded. So, in this case you know what might happen in this scenario we start off in s_4.",
    "start": "1143030",
    "end": "1151520"
  },
  {
    "text": "s_4, s_5, s_6 all have zero rewards by definition. Um, and then on time-step s_7 we get a reward of 10.",
    "start": "1151520",
    "end": "1159095"
  },
  {
    "text": "But that has to be weighed down by the discount factor which here is 1/2.",
    "start": "1159095",
    "end": "1164600"
  },
  {
    "text": "So, it's 1/2 to the power of 3. And so the sample return for this particular episode is just 1.25.",
    "start": "1164600",
    "end": "1172340"
  },
  {
    "text": "[NOISE] And of course we could define this for any particular, um, episode and these episodes generally might go through different states even",
    "start": "1172340",
    "end": "1180710"
  },
  {
    "text": "if they're starting in the same initial state because we have a stochastic transition model. So, in this case maybe the agent just stays in s_4,",
    "start": "1180710",
    "end": "1188090"
  },
  {
    "text": "s_4, s_5, s_4 and it doesn't get any reward. And in other cases, um, it might go all the way to the left.",
    "start": "1188090",
    "end": "1195659"
  },
  {
    "text": "So, if we then think about what the expected value function would be, it would involve averaging over a lot of these.",
    "start": "1195880",
    "end": "1204620"
  },
  {
    "text": "And as we average over all of these, um, then we can start to get different rewards for different time steps.",
    "start": "1204620",
    "end": "1212640"
  },
  {
    "text": "So, how would we compute this? Um, now one thing you could do which is sort of motivated by what I would just showing before,",
    "start": "1217810",
    "end": "1224915"
  },
  {
    "text": "is that you could estimate it by simulation. So, you could, um,",
    "start": "1224915",
    "end": "1231320"
  },
  {
    "text": "just take for say an initial starting state distribution, um, which could be just a single starting state or",
    "start": "1231320",
    "end": "1237649"
  },
  {
    "text": "many starting states and you could just roll out your process. So, right now we're assuming that we have a transition model transition matrix and a reward model.",
    "start": "1237650",
    "end": "1246575"
  },
  {
    "text": "Um, and you could just roll this out just like what we're showing on the previous couple of time-steps. And you could just do this many many many times. And then average.",
    "start": "1246575",
    "end": "1255575"
  },
  {
    "text": "And that would asymptotically converge to what the value function is cause the value function is just,",
    "start": "1255575",
    "end": "1261559"
  },
  {
    "text": "um, the expected return. So, one thing you could do with simulation, um,",
    "start": "1261560",
    "end": "1267575"
  },
  {
    "text": "and there are mathematical bounds you can use to say how many simulations would you need to do in order for your empirical average to be close to the true expected value.",
    "start": "1267575",
    "end": "1277679"
  },
  {
    "text": "The accuracy roughly goes down on the order of one over square root of N where N is the number of roll-outs you've done.",
    "start": "1277780",
    "end": "1285665"
  },
  {
    "text": "So, it just tells you that, you know, if you want to figure out what the value is of your Markov Reward Process,",
    "start": "1285665",
    "end": "1292070"
  },
  {
    "text": "um, you could just do simulations and that would give you an estimate of the value. The nice thing about doing this,",
    "start": "1292070",
    "end": "1297080"
  },
  {
    "text": "is this requires no assumption of the Markov structure. Not actually using the fact that it's a Markov Reward Process at all.",
    "start": "1297080",
    "end": "1303755"
  },
  {
    "text": "It's just a way to estimate sums of returns- sums up rewards.",
    "start": "1303755",
    "end": "1308855"
  },
  {
    "text": "So, that's both nice in the sense that, um, if you're using this in a process that you had estimated from",
    "start": "1308855",
    "end": "1315500"
  },
  {
    "text": "some data or you're making the assumption that things are, er, um, you know this is the dynamics model but that's also",
    "start": "1315500",
    "end": "1320990"
  },
  {
    "text": "estimated from data and it might be wrong, um, then this can give you sort of, um, if you can really roll out in the world then you can get these sort",
    "start": "1320990",
    "end": "1328280"
  },
  {
    "text": "of nice estimates of really how the process is working. But it doesn't leverage anything about the fact that if the world really is Markov,",
    "start": "1328280",
    "end": "1335299"
  },
  {
    "text": "um, there's additional structure we could do in order to get better estimates. So, what do I mean by better estimates here?",
    "start": "1335299",
    "end": "1340580"
  },
  {
    "text": "I mean if we want to, um, get sort of better meaning sort of computationally cheaper,",
    "start": "1340580",
    "end": "1346100"
  },
  {
    "text": "um, ways of estimating what the value is a process. So, what the Markov structure allows us to do,",
    "start": "1346100",
    "end": "1352894"
  },
  {
    "text": "with the fact that the present that the future is independent of the past given the present, is it allows us to decompose the value function.",
    "start": "1352895",
    "end": "1359870"
  },
  {
    "text": "So, the value function of a mark forward process is simply the immediate reward the agent gets from",
    "start": "1359870",
    "end": "1365690"
  },
  {
    "text": "the current state it's in plus the discounted sum of future rewards weighed by",
    "start": "1365690",
    "end": "1370910"
  },
  {
    "text": "the discount factor times",
    "start": "1370910",
    "end": "1376405"
  },
  {
    "text": "the- and where we express that discounted sum of future words is we can just express it with V, V(s').",
    "start": "1376405",
    "end": "1382890"
  },
  {
    "text": "So, we sort of say well whatever state you're in right now, you're going to get your immediate word and then you're going to transition to some state s'.",
    "start": "1382890",
    "end": "1389990"
  },
  {
    "text": "Um, and then you're going to get the value of whatever state s' you ended up in discounted by our discount factor.",
    "start": "1389990",
    "end": "1397320"
  },
  {
    "text": "So, if we're in a finite state MRP we can express this using matrix notation.",
    "start": "1398890",
    "end": "1405380"
  },
  {
    "start": "1399000",
    "end": "1612000"
  },
  {
    "text": "So, we can say that the value function which is a vector is equal to the reward plus gamma times the transition model times",
    "start": "1405380",
    "end": "1412159"
  },
  {
    "text": "V. Again note that in this case because of the way we're defining the transition model,",
    "start": "1412160",
    "end": "1420590"
  },
  {
    "text": "um, then the value functions here the transition model is defined as the next [NOISE] state given the previous state and multiplying that by the value function there.",
    "start": "1420590",
    "end": "1430370"
  },
  {
    "text": "So, in this case we can express it just using a matrix notation. Um, and the nice thing is that once we've done that",
    "start": "1430370",
    "end": "1436250"
  },
  {
    "text": "we can just analytically solve for the value function. So, remember all of this is known. So, this is known. And this is known.",
    "start": "1436250",
    "end": "1444905"
  },
  {
    "text": "And what we're trying to do is to compute what V(S) is. So, what we can do in this case is we just move this over to the other side.",
    "start": "1444905",
    "end": "1453455"
  },
  {
    "text": "So, you can do V minus gamma PV is equal to R or we can say the identity matrix minus the discount factor times P. These are all matrices.",
    "start": "1453455",
    "end": "1463804"
  },
  {
    "text": "So, this is the identity matrix times",
    "start": "1463805",
    "end": "1471440"
  },
  {
    "text": "V is equal to R which means V is just equal to the inverse of this matrix times R.",
    "start": "1471440",
    "end": "1479375"
  },
  {
    "text": "Um. So, if one of the transitions can be back to itself, um wouldn't it be become a circular to try to express V(s) in terms of V(s)?",
    "start": "1479375",
    "end": "1490385"
  },
  {
    "text": "Um, the question was was if it's possible to have self-loops? Um, could it be that this is sort of circulator defined [NOISE] in this case.",
    "start": "1490385",
    "end": "1499040"
  },
  {
    "text": "Um, I in this case because we're thinking about processes that are infinite horizon,",
    "start": "1499040",
    "end": "1504380"
  },
  {
    "text": "the value function is stationary, um, and it's fine if you have include self loops.",
    "start": "1504380",
    "end": "1509615"
  },
  {
    "text": "So, it's fine if some of the states that you might transition back to the same state there's no problem.",
    "start": "1509615",
    "end": "1514745"
  },
  {
    "text": "You do need that this matrix is well-defined. That you can take that you can take the inverse of it. Um, but for most processes that is.",
    "start": "1514745",
    "end": "1522660"
  },
  {
    "text": "Um, so, if we wanna solve this directly, um, this is nice it's analytic, um,",
    "start": "1525940",
    "end": "1531845"
  },
  {
    "text": "but it requires taking a matrix inverse. And if you have N states so let's say you have N states there's generally",
    "start": "1531845",
    "end": "1540050"
  },
  {
    "text": "on the order of somewhere between N squared and N cubed depending on which matrix inversion you're using. Yeah.",
    "start": "1540050",
    "end": "1545945"
  },
  {
    "text": "Is it ever actually possible for, uh, that matrix not to have an inverse or does like the property",
    "start": "1545945",
    "end": "1551930"
  },
  {
    "text": "that like column sum to one or something make it not possible? Question was is it ever possible for this not to have an inverse?",
    "start": "1551930",
    "end": "1560075"
  },
  {
    "text": "Um, it's a it's a good question. Um, I think it's basically never possible for this not to have an inverse.",
    "start": "1560075",
    "end": "1566225"
  },
  {
    "text": "I'm trying to think whether or not that can be violated in some cases. Um, if yeah sorry go ahead.",
    "start": "1566225",
    "end": "1575539"
  },
  {
    "text": "Okay. [NOISE] Yeah. So, I think there's a couple, um, if there's a- if this ends up being the zero matrix,",
    "start": "1575540",
    "end": "1585425"
  },
  {
    "text": "um depending on how things are defined. Um, but I'll double-check then send a note on a Piazza. Yeah.",
    "start": "1585425",
    "end": "1592535"
  },
  {
    "text": "Well, actually I think the biggest side about the transition matrix [inaudible]",
    "start": "1592535",
    "end": "1603560"
  },
  {
    "text": "Let me just double check so I don't say anything that's incorrect and then I'll just send a note on- on Piazza. It's a good question.",
    "start": "1603560",
    "end": "1610380"
  },
  {
    "start": "1612000",
    "end": "2009000"
  },
  {
    "text": "So, that's the analytic way for computing this. The other way is to use dynamic programming.",
    "start": "1612310",
    "end": "1618605"
  },
  {
    "text": "So, in this case, it's an iterative algorithm instead of a one shot.",
    "start": "1618605",
    "end": "1623630"
  },
  {
    "text": "So, the idea in this scenario is that you initialize the value function to be zero everywhere and in fact you can initialize it to anything and it doesn't matter.",
    "start": "1623630",
    "end": "1632779"
  },
  {
    "text": "If you're doing this until convergence. And so then what we're gonna do is we're going to",
    "start": "1632780",
    "end": "1638420"
  },
  {
    "text": "do what's going to be close to something we're going to see later which is a bellman backup. So, the idea in this case is because of the Markov property,",
    "start": "1638420",
    "end": "1647149"
  },
  {
    "text": "we've said that the value of a state is exactly equal to the immediate reward we get plus the discounted sum of future rewards.",
    "start": "1647150",
    "end": "1653240"
  },
  {
    "text": "And in this case, we can simply use that to derive an iterative equation where we use the previous value of",
    "start": "1653240",
    "end": "1661040"
  },
  {
    "text": "the state in order to bootstrap and compute the next value of the state and we do that for all states.",
    "start": "1661040",
    "end": "1667085"
  },
  {
    "text": "And the computational complexity of this is a little bit lower because it's only |S| squared because you're doing this for each",
    "start": "1667085",
    "end": "1673700"
  },
  {
    "text": "of the states and then you're summing over all the possible next states. When I say we do this total convergence",
    "start": "1673700",
    "end": "1680059"
  },
  {
    "text": "generally what we do in this case is we define a norm. So, generally we would do something like this, V_k minus V_k-1.",
    "start": "1680060",
    "end": "1688740"
  },
  {
    "text": "I need to do this until it's lower than some epsilon.",
    "start": "1689020",
    "end": "1693720"
  },
  {
    "text": "So, the advantage of this is that each of the iteration updates are cheaper and they'd also will be some benefits later when we start to think about actions.",
    "start": "1696640",
    "end": "1707225"
  },
  {
    "text": "The other thing does not apply as easily when we start to have actions but we'll see also where it can be relevant.",
    "start": "1707225",
    "end": "1712534"
  },
  {
    "text": "So, here are two different ways to try to compute the value of Markov Reward Process or three really one is simulation,",
    "start": "1712535",
    "end": "1719254"
  },
  {
    "text": "the second is analytically. The analytic one requires us a step a finite set of states and the third one is dynamic programming.",
    "start": "1719254",
    "end": "1726530"
  },
  {
    "text": "We're also right now defining only all of these for when the state space is finite, but we'll talk about when the state space is infinite later on.",
    "start": "1726530",
    "end": "1734519"
  },
  {
    "text": "So, now we can finally get onto Markov Decision Processes. Markov Decision Processes are the same as",
    "start": "1735520",
    "end": "1741530"
  },
  {
    "text": "the Markov Reward Process except for now we have actions. So, we still have the dynamics model but now",
    "start": "1741530",
    "end": "1746960"
  },
  {
    "text": "we have a dynamics model that is specified for each action separately and we also have a reward function.",
    "start": "1746960",
    "end": "1753080"
  },
  {
    "text": "And as was asked before by Camilla I think, the reward can either be a function of the immediate state,",
    "start": "1753080",
    "end": "1759290"
  },
  {
    "text": "the state and action to the state action and next state for most of the rest of today we'll be using that it's the function of both the state and action.",
    "start": "1759290",
    "end": "1767375"
  },
  {
    "text": "So, the agent is in a state they take an action, they get immediate reward, and then they transition to the next state.",
    "start": "1767375",
    "end": "1774080"
  },
  {
    "text": "So, if you think about serve an observation you'd see something like this s, a, r, and then transition to state s'.",
    "start": "1774080",
    "end": "1782100"
  },
  {
    "text": "And so a Markov Decision Process is typically described as a tuple which is just the set of states,",
    "start": "1783220",
    "end": "1788765"
  },
  {
    "text": "actions, rewards, dynamics, model, and discount factor. Because of the way you've defined that dynamic model,",
    "start": "1788765",
    "end": "1795500"
  },
  {
    "text": "is the case that if you take a specific action that is intended for you to move to your state s',",
    "start": "1795500",
    "end": "1801530"
  },
  {
    "text": "you won't fully successful move to that state? Like I guess I'm curious about why there's a- why there is a probability at all?",
    "start": "1801530",
    "end": "1808010"
  },
  {
    "text": "Like if you're deep in a state in K action, why is it deterministic what the next state is?",
    "start": "1808010",
    "end": "1813035"
  },
  {
    "text": "Question is same like well why is this- why are there stochastic processes I think. Um, there are a lot of cases where we don't have perfect models of the environment.",
    "start": "1813035",
    "end": "1821419"
  },
  {
    "text": "May be if we had better models then things would be deterministic. And so, we're going to approximate our uncertainty over those models with stochasticity.",
    "start": "1821420",
    "end": "1828320"
  },
  {
    "text": "So, maybe you have a robot that's a little bit faulty and so sometimes it gets stuck on carpet and then sometimes it goes forward. And we can write that down as a stochastic transition matrix",
    "start": "1828320",
    "end": "1836360"
  },
  {
    "text": "where sometimes it stays in the same place and sometimes it advances to the next state. Or maybe you're on sand or things like that.",
    "start": "1836360",
    "end": "1843170"
  },
  {
    "text": "Maybe when you're trying to drive to SFO sometimes you hit traffic, sometimes you don't. You can imagine putting a lot more variables into your state-space to",
    "start": "1843170",
    "end": "1850100"
  },
  {
    "text": "try to make that a deterministic outcome or you could just say, \"Hey sometimes when I try to go to work, you know, like I hit these number of red lights and so I'm late and other times,",
    "start": "1850100",
    "end": "1857810"
  },
  {
    "text": "you know, I don't hit those red lights and so I'm fine.\"",
    "start": "1857810",
    "end": "1860820"
  },
  {
    "text": "So, if we think about our Mars Rover MDP. Now, let's just define there being two actions A1 and A2.",
    "start": "1863820",
    "end": "1869919"
  },
  {
    "text": "You can think about these things as the agent trying to move left or right but it's also perhaps",
    "start": "1869920",
    "end": "1875440"
  },
  {
    "text": "easier just to think about in general them as sort of these deterministic actions for this particular example.",
    "start": "1875440",
    "end": "1881164"
  },
  {
    "text": "So, we can write down what the transition matrix would be in each of these two cases that shows us",
    "start": "1881165",
    "end": "1886400"
  },
  {
    "text": "exactly where the next state would be given the previous action. So, what's happening in this case is if the agent tries to do",
    "start": "1886400",
    "end": "1893060"
  },
  {
    "text": "a_1 in state s_1 then it stays in that state. Otherwise, it will generally move to the next state over.",
    "start": "1893060",
    "end": "1899764"
  },
  {
    "text": "If it's trying to do action a_1 and for action a_2 it'll move to the right unless it hits s_7 and then it'll stay there.",
    "start": "1899765",
    "end": "1907440"
  },
  {
    "text": "So, like we said at the beginning of class, a Markov Decision Process policy specifies what action to take in each state.",
    "start": "1909760",
    "end": "1917585"
  },
  {
    "text": "And the policies themselves can be deterministic or stochastic, meaning that you could either have a distribution over in the next action you might",
    "start": "1917585",
    "end": "1925400"
  },
  {
    "text": "take given the state you're in or you could have a deterministic mapping. It says whenever I'm in this state I always,",
    "start": "1925400",
    "end": "1931295"
  },
  {
    "text": "you know, do action a_1. Now- and a lot of this class we'll be thinking about",
    "start": "1931295",
    "end": "1938000"
  },
  {
    "text": "deterministic policies but later on when we get into policy search we'll talk a lot more about stochastic policies.",
    "start": "1938000",
    "end": "1944580"
  },
  {
    "text": "So, if you have an MDP plus a policy then that immediately specifies a Markov Reward Process.",
    "start": "1945040",
    "end": "1952114"
  },
  {
    "text": "Because once you have specified the policy then you can think of that as inducing a Markov Reward Process because you're only",
    "start": "1952114",
    "end": "1960020"
  },
  {
    "text": "ever taking you've specified your distribution over actions for your state and so then you can think of sort of what is the reward,",
    "start": "1960020",
    "end": "1968090"
  },
  {
    "text": "the expected reward you get under that policy for any state and similarly you can define",
    "start": "1968090",
    "end": "1973970"
  },
  {
    "text": "your transition model for Markov Reward Process by averaging across your transition models",
    "start": "1973970",
    "end": "1980240"
  },
  {
    "text": "according to the weight at which you would take those different actions. So, the reason why it's useful to think about these connections between",
    "start": "1980240",
    "end": "1987950"
  },
  {
    "text": "Markov Decision Processes and Markov Reward Processes is it implies that if you have a fixed policy you could just use all the techniques that",
    "start": "1987950",
    "end": "1995300"
  },
  {
    "text": "we just described for Markov Reward Processes mainly simulation, analytic, analytic solution or dynamic",
    "start": "1995300",
    "end": "2001780"
  },
  {
    "text": "programming in order to compute what is the value of a policy.",
    "start": "2001780",
    "end": "2006020"
  },
  {
    "text": "So, if we go back to the iterative algorithm then it's exactly the same as before,",
    "start": "2008280",
    "end": "2015700"
  },
  {
    "start": "2009000",
    "end": "2084000"
  },
  {
    "text": "exactly the same as the Markov Reward Process except for now we're indexing our reward by the policy.",
    "start": "2015700",
    "end": "2021310"
  },
  {
    "text": "So, in order to learn what is the value of a particular policy we instantiate the reward function by always picking the action that the policy would take.",
    "start": "2021310",
    "end": "2029410"
  },
  {
    "text": "So, in this case, I'm doing it for simplicity for deterministic policy and then",
    "start": "2029410",
    "end": "2038170"
  },
  {
    "text": "similarly just indexing which transition model to look up based on the action that we would take in that state.",
    "start": "2038170",
    "end": "2045380"
  },
  {
    "text": "And this is also known as a bellman backup for a particular policy. So, it allows us to state what is the value of the state under",
    "start": "2046650",
    "end": "2054520"
  },
  {
    "text": "this policy well it's just the immediate reward I would get by following the policy in the current state plus",
    "start": "2054520",
    "end": "2059950"
  },
  {
    "text": "the expected discounted sum of rewards I get by following this policy. And then for whatever state I end up by next continuing to follow this policy.",
    "start": "2059950",
    "end": "2069294"
  },
  {
    "text": "So that's what the V^pi_k-1 specifies. What would happen if the expected discounted sum of rewards we get by",
    "start": "2069295",
    "end": "2076149"
  },
  {
    "text": "continuing to follow policy from whatever state we just transitioned to.",
    "start": "2076150",
    "end": "2080419"
  },
  {
    "start": "2084000",
    "end": "2199000"
  },
  {
    "text": "So, if we go to the Markov- the Markov chain",
    "start": "2084000",
    "end": "2090700"
  },
  {
    "text": "or the Ma- now the Markov Decision Process for the Mars Rover, then let's look at the case now where we have these two actions.",
    "start": "2090700",
    "end": "2097825"
  },
  {
    "text": "The reward function is still that you either have for any action if you're in state one you get plus one and in any state any action for state s_7 you get plus 10.",
    "start": "2097825",
    "end": "2107230"
  },
  {
    "text": "Everything else is zero. So, imagine your policy is always to do action a_1 and your discount factor is zero.",
    "start": "2107230",
    "end": "2115464"
  },
  {
    "text": "So, in this case, what is the value of the policy",
    "start": "2115465",
    "end": "2121820"
  },
  {
    "text": "and this is just to remind you of what like the iterative way of computing it would be.",
    "start": "2124820",
    "end": "2131080"
  },
  {
    "text": "Yeah in the back. Um, and I think that will be zero for everything",
    "start": "2142720",
    "end": "2148340"
  },
  {
    "text": "except s_1 and s_7 where it's +1 and +10. That's exactly right. So this is a little bit of a trick question",
    "start": "2148340",
    "end": "2153680"
  },
  {
    "text": "because I didn't show you again what the transition model is. Said is exactly correct. The- it doesn't matter what the transition model is here,",
    "start": "2153680",
    "end": "2160790"
  },
  {
    "text": "um, because gamma is equal to zero. So that means that all of this goes away,",
    "start": "2160790",
    "end": "2165965"
  },
  {
    "text": "um, and so you just have the immediate reward. So if your discount factor is zero then you just care about immediate reward.",
    "start": "2165965",
    "end": "2172670"
  },
  {
    "text": "And so the immediate reward for this policy because the reward for all actions and state one is always +1.",
    "start": "2172670",
    "end": "2179660"
  },
  {
    "text": "And the reward for all actions and all other states is zero except for in state s_7 where it's always 10 no matter which action you take.",
    "start": "2179660",
    "end": "2186545"
  },
  {
    "text": "So this is just equal to one.",
    "start": "2186545",
    "end": "2190500"
  },
  {
    "text": "That's the value function address. Okay. So let's, um, look at another one.",
    "start": "2193450",
    "end": "2199010"
  },
  {
    "start": "2199000",
    "end": "3048000"
  },
  {
    "text": "So now we've got exactly the same process. Um, I've written down a particular choice of the dynamics model for ah, state s_6.",
    "start": "2199010",
    "end": "2207710"
  },
  {
    "text": "So let's imagine that when you're in state s_6 which is almost all the way to the right, um, you have a 50% probability of staying there under action A1",
    "start": "2207710",
    "end": "2214880"
  },
  {
    "text": "or a 50% probability of going to state s_7. That's what this top line says. And then there's a whole bunch of other dynamics models that we're",
    "start": "2214880",
    "end": "2221960"
  },
  {
    "text": "not going to need to worry about to do this computation. And then the reward is still +1 for state s_1,",
    "start": "2221960",
    "end": "2228109"
  },
  {
    "text": "+10 in state s_7, zero for all the states in the middle. And then let's imagine that, um,",
    "start": "2228110",
    "end": "2233555"
  },
  {
    "text": "we're still trying to evaluate the policy where you're always taking action a_1. Um, and we've just said that V_k is equal to 1,0,0,0,10,",
    "start": "2233555",
    "end": "2244025"
  },
  {
    "text": "um, and now what we wanna do is do one more backup essentially.",
    "start": "2244025",
    "end": "2249349"
  },
  {
    "text": "So we want to move from V_k=1 and now compute V_k=2.",
    "start": "2249350",
    "end": "2256025"
  },
  {
    "text": "So how [NOISE] about everybody take a second and figure [NOISE] out what would be the value under this particular policy, okay, for s_6.",
    "start": "2256025",
    "end": "2266760"
  },
  {
    "text": "So you can use this equation, um, to figure out given that I know what",
    "start": "2267640",
    "end": "2273125"
  },
  {
    "text": "my previous value function is because I've specified it there it's 1,0,0,0,10.",
    "start": "2273125",
    "end": "2278290"
  },
  {
    "text": "Um, and now I'm going to be doing one backup, and I'm only asking you to do it for one state,",
    "start": "2278290",
    "end": "2284464"
  },
  {
    "text": "you could do it for others if you want. Um, what would be the new value of s_6 if you use this equation to compute it?",
    "start": "2284465",
    "end": "2292289"
  },
  {
    "text": "And it just requires plugging in what is the value of the reward. The value is and- and the particular numbers for the dynamics and the old value function.",
    "start": "2294310",
    "end": "2305525"
  },
  {
    "text": "And the reason that I bring this up as an example is to show sort of essentially how could have information flows as you do this computation.",
    "start": "2305525",
    "end": "2312095"
  },
  {
    "text": "So you start off in the very initial. Let me just go over here first. So when you start off, you're going to initialize",
    "start": "2312095",
    "end": "2317359"
  },
  {
    "text": "the value function to be zero everywhere. The first backup you do basically initializes the value function to be the immediate reward everywhere.",
    "start": "2317360",
    "end": "2324920"
  },
  {
    "text": "And then after that you're going to continue to do these backups and essentially you're trying to compute its expected discounted sum of",
    "start": "2324920",
    "end": "2331160"
  },
  {
    "text": "future rewards for each of the states under this policy. So if you think about looking at this,",
    "start": "2331160",
    "end": "2337040"
  },
  {
    "text": "that's with information of the fact that state s_7 is good, is going to kinda flow backwards to the other states because they're saying \"Okay well,",
    "start": "2337040",
    "end": "2343910"
  },
  {
    "text": "I've been in state s_4 I don't have any reward right now but at a couple of timesteps under this process I might because I might reach that really great +10 state.\"",
    "start": "2343910",
    "end": "2352430"
  },
  {
    "text": "So as we do these iterations of policy evaluation, we start to propagate the information about future rewards back to earlier states.",
    "start": "2352430",
    "end": "2361400"
  },
  {
    "text": "And so what I'm asking you to do here is to just do that for one, one more step. Just say for state s_6,",
    "start": "2361400",
    "end": "2367520"
  },
  {
    "text": "what would its new value be? Its previous value was zero. Now we're going to do one backup and what's this new value.",
    "start": "2367520",
    "end": "2372860"
  },
  {
    "text": "So what if you just uh, let's ask a question then we can all take a second to uh. I'm just wondering, er, if repeating the same process to find the value function.",
    "start": "2372860",
    "end": "2383180"
  },
  {
    "text": "I guess if you don't necessarily know the value function of s, you could just like reversibly follow it down.",
    "start": "2383180",
    "end": "2389105"
  },
  {
    "text": "Question was can you- if you don't know what the value function is. I guess I'm not totally sure. This is a way to compute the value,",
    "start": "2389105",
    "end": "2394970"
  },
  {
    "text": "wait your question is asking because this is a way to compute the value function. So what we've done here is we've said, we've initialized the value function to be zero everywhere.",
    "start": "2394970",
    "end": "2402500"
  },
  {
    "text": "That is not the real value function, that just sort of an initialization. And what this process is allowing us to do is we keep",
    "start": "2402500",
    "end": "2408875"
  },
  {
    "text": "updating the values of every single state until they stop changing. And then that gives us the expected discounted sum of rewards.",
    "start": "2408875",
    "end": "2416710"
  },
  {
    "text": "Now you might ask, okay well they- are they ever guaranteed to stop changing? And we'll get to that part later.",
    "start": "2416710",
    "end": "2421915"
  },
  {
    "text": "We'll get to the fact that this whole process is guaranteed to be a contraction so it's not going to go on forever.",
    "start": "2421915",
    "end": "2426985"
  },
  {
    "text": "So the distance between the value functions is going to be shrinking. And that's one of the benefits of the discount factor.",
    "start": "2426985",
    "end": "2433070"
  },
  {
    "text": "So if people don't have any more immediate questions, I suggest we all take a minute and then just compare with your neighbor of what number you get when you do this computation.",
    "start": "2433070",
    "end": "2441080"
  },
  {
    "text": "Just to quickly check that the Bellman equation make sense. [NOISE] All right. So, um,",
    "start": "2441080",
    "end": "2446420"
  },
  {
    "text": "wherever you got to, um, hope we got a chance to sort of compare check any understanding with anybody else that was next to you.",
    "start": "2446420",
    "end": "2452240"
  },
  {
    "text": "Um, before we go on I just want to, um, answer a question that was asked before about whether or not the analytics solution is always possible,",
    "start": "2452240",
    "end": "2459710"
  },
  {
    "text": "um, to invert. Let's go back to that. So in this case, um,",
    "start": "2459710",
    "end": "2465815"
  },
  {
    "text": "because p is a stochastic matrix, its eigenvalues are always going to be less than or equal to one.",
    "start": "2465815",
    "end": "2471349"
  },
  {
    "text": "If your discount factor is less than one, then I which is the identity matrix minus gamma times P is always going to be invertible.",
    "start": "2471350",
    "end": "2479600"
  },
  {
    "text": "That's the answer to that question. So this matrix is always invertible as long as gamma is less than one. All right.",
    "start": "2479600",
    "end": "2486619"
  },
  {
    "text": "So let's go back to this one, um, which we're going to require any way for some of the other important properties we want.",
    "start": "2486620",
    "end": "2492725"
  },
  {
    "text": "So in this case what is that? So the immediate reward of this is zero plus gamma times [NOISE] 0.5 probability that we stay in",
    "start": "2492725",
    "end": "2501890"
  },
  {
    "text": "that state times the previous V of s_6 plus 0.5 probability that we go to V of s_7.",
    "start": "2501890",
    "end": "2509734"
  },
  {
    "text": "And this is going to be equal to zero plus 0.5 times zero plus 0.5 times 10.",
    "start": "2509735",
    "end": "2518790"
  },
  {
    "text": "So that's just an example of, um, how you would compute one Bellman backup.",
    "start": "2522760",
    "end": "2527960"
  },
  {
    "text": "And that's back to my original question which is you seem to be using V_k without the superscript pi to evaluate it.",
    "start": "2527960",
    "end": "2535970"
  },
  {
    "text": "Oh, sorry this should, yes. This should have been pi. That's just a typo. And that's that was correct in there.",
    "start": "2535970",
    "end": "2542630"
  },
  {
    "text": "Question was just whether or not that was supposed to be pi up there. Yes it was, thanks for catching.",
    "start": "2542630",
    "end": "2548660"
  },
  {
    "text": "All right, so now we can start to talk about Markov Decision Process control. Now just to note there. So I led us through or we just went through policy evaluation",
    "start": "2548660",
    "end": "2558260"
  },
  {
    "text": "in an iterative way you could have also done it analytically or you could have done it with simulation.",
    "start": "2558260",
    "end": "2564000"
  },
  {
    "text": "But as a particularly nice analogy now that we're going to start to think about control. So again what do I mean by control?",
    "start": "2564040",
    "end": "2570275"
  },
  {
    "text": "Control here is going to be the fact that ultimately we don't care about just evaluating policies, typically we want our agent actually be learning policies.",
    "start": "2570275",
    "end": "2577670"
  },
  {
    "text": "And so in this case we're not going to talk about learning policies, we're just going to be talking about computing optimal policies.",
    "start": "2577670",
    "end": "2585365"
  },
  {
    "text": "So the important thing is that there exists a unique optimal value function.",
    "start": "2585365",
    "end": "2591030"
  },
  {
    "text": "So- um, and the optimal policy for an MDP and an infinite horizon finite state MDP is deterministic.",
    "start": "2591580",
    "end": "2600200"
  },
  {
    "text": "So that's one really good reason why it's sufficient for us to just focus on deterministic policies,",
    "start": "2600200",
    "end": "2605765"
  },
  {
    "text": "with a finite state MDPs, um, in infinite horizons. Okay. So how do we compute it?",
    "start": "2605765",
    "end": "2613070"
  },
  {
    "text": "Well first before we do this let's think about how many policies there might be. So there are seven discrete states.",
    "start": "2613070",
    "end": "2618080"
  },
  {
    "text": "In this case it's the locations that the robot. There are two actions. I won't call them left and right, I'm just going to call them a_1 and a_2.",
    "start": "2618080",
    "end": "2625040"
  },
  {
    "text": "Because left and right kind of implies that you will definitely achieve that. We can also just think of these as generally being stochastic scenarios.",
    "start": "2625040",
    "end": "2631010"
  },
  {
    "text": "So let's just call them a_1 and a_2. Then the question is how many deterministic policies are",
    "start": "2631010",
    "end": "2637910"
  },
  {
    "text": "there and is the optimal policy for MDP always unique? So kind of right we just take like",
    "start": "2637910",
    "end": "2642980"
  },
  {
    "text": "one minute or say one or two minutes feel free to talk to a neighbor about how [NOISE] many deterministic policies there are for",
    "start": "2642980",
    "end": "2648230"
  },
  {
    "text": "this particular case and then if that's- um, once you've answered that it's fine to think about in general if you",
    "start": "2648230",
    "end": "2654770"
  },
  {
    "text": "have |S| states and |A| actions, and this is the cardinality of those sets.",
    "start": "2654770",
    "end": "2659974"
  },
  {
    "text": "How many possible deterministic policies are there? Um, and then the second question which is whether or not these are always unique.",
    "start": "2659975",
    "end": "2666470"
  },
  {
    "text": "[NOISE] Can anyone I'd",
    "start": "2666470",
    "end": "2673609"
  },
  {
    "text": "take a guess at how many deterministic policies that are in this case? [NOISE].",
    "start": "2673610",
    "end": "2683930"
  },
  {
    "text": "It's a mapping from states to actions so it's gonna be 2 to the 7th. That's exactly right. That is it's a mapping.",
    "start": "2683930",
    "end": "2690425"
  },
  {
    "text": "Er, if we remember back to our definition of what a policy is, a mapping is going to be a map from states to actions.",
    "start": "2690425",
    "end": "2696800"
  },
  {
    "text": "So what that means in this case is that there are two choices for every state and there are seven states.",
    "start": "2696800",
    "end": "2704300"
  },
  {
    "text": "And more generally that the [NOISE] number of policies is |A| to the |S|. So we can be large,",
    "start": "2704300",
    "end": "2711710"
  },
  {
    "text": "its exponential and the state-space but it's finite. So it's bounded. Um, any",
    "start": "2711710",
    "end": "2718250"
  },
  {
    "text": "one want to take a guess of whether or not the optimal policy is always unique? I told you the value function is unique. Is the policy unique?",
    "start": "2718250",
    "end": "2725045"
  },
  {
    "text": "Yeah. I think there might be cases where it's not.",
    "start": "2725045",
    "end": "2732184"
  },
  {
    "text": "Exactly right, um. It's not always unique. The value function is unique but if there may be cases where you get ties.",
    "start": "2732185",
    "end": "2738530"
  },
  {
    "text": "And so there might be that there are two actions that, um, are or two policies that have the same value. So no. Depends on the process.",
    "start": "2738530",
    "end": "2745830"
  },
  {
    "text": "You mean like unique optimal value function? Ah, yes. So the question is can I explain what I mean by there's a unique optimal value function.",
    "start": "2745830",
    "end": "2753849"
  },
  {
    "text": "I mean that the optimal value of the state. So the expected discounted sum of returns, um,",
    "start": "2753850",
    "end": "2761494"
  },
  {
    "text": "there is- there may be more than one optimal policy but there exists at least one optimal policy which leads to the maximum value for that state.",
    "start": "2761495",
    "end": "2771645"
  },
  {
    "text": "Um, and there's a single value of that.",
    "start": "2771645",
    "end": "2776705"
  },
  {
    "text": "We'll talk about- probably a little bit clearer to when we talk about contraction properties later. Um, that there's- so for each state it's just a scalar value.",
    "start": "2776705",
    "end": "2785060"
  },
  {
    "text": "It says exactly what is the expected discounted sum of returns and this is the maximum expected discounted sum of returns under the optimal policy.",
    "start": "2785060",
    "end": "2792350"
  },
  {
    "text": "Yeah. And on the [inaudible] policies in our-",
    "start": "2792350",
    "end": "2799755"
  },
  {
    "text": "When we first define policies I thought I was describing the- um, the entire hash table with sort of",
    "start": "2799755",
    "end": "2806415"
  },
  {
    "text": "one action per state rather than saying all possible combinations. It's a little surprised that is 2 to the 7th rather than being",
    "start": "2806415",
    "end": "2813710"
  },
  {
    "text": "just the number of states with each one of the maps because of action. For me to sort of better clarify, you know,",
    "start": "2813710",
    "end": "2820520"
  },
  {
    "text": "what this- what this how many policies there are and whether maybe- there maybe it looked like it was going to be linear and it's actually exponential.",
    "start": "2820520",
    "end": "2827055"
  },
  {
    "text": "Um, the way that we're defining a decision policy here, um, a deterministic decision policy is a mapping from a state to an action.",
    "start": "2827055",
    "end": "2833890"
  },
  {
    "text": "And so that means for each state we get to choose an action and so just as an illustration of why this ends up being exponential.",
    "start": "2833890",
    "end": "2840444"
  },
  {
    "text": "Um, so, in this case let's imagine instead of having seven states we just have six or two states.",
    "start": "2840445",
    "end": "2845865"
  },
  {
    "text": "Now we have s_1 and s_2. [NOISE] So, you could either have action a_1-a_1, you could have action a_1-a_2,",
    "start": "2845865",
    "end": "2851680"
  },
  {
    "text": "you could have action a_2-a_1 or action a_2-a_2. And you have to and all of those are distinct policies.",
    "start": "2851680",
    "end": "2860100"
  },
  {
    "text": "So, that's why the space ends up being exponential. Sure.",
    "start": "2860100",
    "end": "2865490"
  },
  {
    "text": "When you have like A to the power S. I'm assuming that A refers to",
    "start": "2865490",
    "end": "2870975"
  },
  {
    "text": "legal actions per state assuming like you could have different actions depending on the state.",
    "start": "2870975",
    "end": "2876345"
  },
  {
    "text": "The question is whether or not you might be able to have different constraints on the action space for state, absolutely. So, in this case, today for simplicity,",
    "start": "2876345",
    "end": "2883220"
  },
  {
    "text": "we're going to assume that all actions are applicable in all states. Um, in reality that's often not true. Um, in many real-world cases,",
    "start": "2883220",
    "end": "2890319"
  },
  {
    "text": "um, some of the actions might be specific to the state. Ah, for totally, there's a huge space of medical interventions.",
    "start": "2890320",
    "end": "2897160"
  },
  {
    "text": "Um, er for many of them, they might not be at all even reasonable to ever consider,",
    "start": "2897160",
    "end": "2902369"
  },
  {
    "text": "um, for certain states are applicable. Um, so, in general, you can have different actions sub-spaces per",
    "start": "2902370",
    "end": "2908860"
  },
  {
    "text": "state and then you would take the product over the actions, the cardinality of the action set that is relevant for each of the states.",
    "start": "2908860",
    "end": "2915125"
  },
  {
    "text": "But for right now, I think it's simple as just to think of it as there's one uniform action space and then they can be applied in any state.",
    "start": "2915125",
    "end": "2921690"
  },
  {
    "text": "Okay. So, um, the optimal policy for an MDP and a finite horizon problem where the agent acts forever.",
    "start": "2923480",
    "end": "2930305"
  },
  {
    "text": "Um, it's deterministic. It's stationary which means it doesn't depend on the time-step.",
    "start": "2930305",
    "end": "2935415"
  },
  {
    "text": "We started talking about that a little bit last time. Um, so, it means that if I'm in this state- if I'm in state s_7,",
    "start": "2935415",
    "end": "2943160"
  },
  {
    "text": "there is an optimal policy for being in state s_7 whether I encountered that at time-step one,",
    "start": "2943160",
    "end": "2948790"
  },
  {
    "text": "time-step 37, time-step 242 stationary. Um, er one of the intuitions for this is that if you get to act",
    "start": "2948790",
    "end": "2956210"
  },
  {
    "text": "forever there's always like an infinite number of future time steps no matter when you're at. So, if you would always do action a_1 from state s_7 now,",
    "start": "2956210",
    "end": "2965190"
  },
  {
    "text": "um then if you encounter it again in 50 time-steps you still have an infinite amount of time to go from there and so you'd still",
    "start": "2965190",
    "end": "2971310"
  },
  {
    "text": "take the same action if that was the optimal thing to do. As we were just discussing, it's not the optimal policy is not necessarily unique,",
    "start": "2971310",
    "end": "2978820"
  },
  {
    "text": "um because you might have ah more than one policy with the same value function.",
    "start": "2978820",
    "end": "2984790"
  },
  {
    "text": "So, how would we compute this? One option is policy search uh and we'll talk a lot more about this in",
    "start": "2985810",
    "end": "2991710"
  },
  {
    "text": "a few weeks when we're talking about function approximation and having really really large state spaces. Um, but even in tabular cases,",
    "start": "2991710",
    "end": "2998480"
  },
  {
    "text": "er we can just think of searching. So, the number of deterministic policies we just discussed is A to the S,",
    "start": "2998480",
    "end": "3004410"
  },
  {
    "text": "um and policy iteration is a technique that is generally better than enumeration. So, what do I mean by enumeration in this context?",
    "start": "3004410",
    "end": "3011655"
  },
  {
    "text": "I mean there's a finite number of policies. You could just evaluate each of them separately and then pick the max.",
    "start": "3011655",
    "end": "3018680"
  },
  {
    "text": "So, if you have a lot of compute, you might just want to and this might be better if you really care",
    "start": "3018680",
    "end": "3023720"
  },
  {
    "text": "about wall clock and you have many many many processors. You could just do this exhaustively. You could just try all of your policies,",
    "start": "3023720",
    "end": "3029920"
  },
  {
    "text": "evaluate all of them either analytically or iteratively or whatever scheme you want to use and then take the max over all of them.",
    "start": "3029920",
    "end": "3037090"
  },
  {
    "text": "But if you don't have kind of infinite compute, it's generally more computationally efficient if you have to do",
    "start": "3037090",
    "end": "3043570"
  },
  {
    "text": "this serially to do policy iteration and so we'll talk about what that is. So, in policy iteration what we do is we basically",
    "start": "3043570",
    "end": "3051095"
  },
  {
    "start": "3048000",
    "end": "3344000"
  },
  {
    "text": "keep track of a guess of what the optimal policy might be. We evaluate its value and then we try to improve it.",
    "start": "3051095",
    "end": "3058120"
  },
  {
    "text": "If we can't improve it any more, um then we can- then we can halt. So, the idea is that we start by initializing randomly.",
    "start": "3058120",
    "end": "3066964"
  },
  {
    "text": "Here now you can think of the subscript is indexing which policy we're at.",
    "start": "3066965",
    "end": "3072410"
  },
  {
    "text": "So, initially we start off with some random policy and then π_i is always going to index",
    "start": "3072410",
    "end": "3077569"
  },
  {
    "text": "sort of our current guess of what the optimal policy might be. So, what we do is we initialize our policy randomly and while it's not changing",
    "start": "3077570",
    "end": "3085220"
  },
  {
    "text": "and we'll talk about whether or not it can change or go back to the same one in a second, we do value function policy.",
    "start": "3085220",
    "end": "3092535"
  },
  {
    "text": "We evaluate the policy using the same sorts of techniques we just discussed because it's a fixed policy",
    "start": "3092535",
    "end": "3097550"
  },
  {
    "text": "which means we are now basically in a Markov Reward Process. And then we do policy improvement.",
    "start": "3097550",
    "end": "3103204"
  },
  {
    "text": "So, the really the new thing compared to what we were doing before now is policy improvement.",
    "start": "3103205",
    "end": "3108170"
  },
  {
    "text": "So, in order to define how we could improve a policy, we're going to define something new which is the state action value.",
    "start": "3109290",
    "end": "3116270"
  },
  {
    "text": "So, before we were just talking about state values, state values are denoted by V. We're talking about",
    "start": "3116270",
    "end": "3125279"
  },
  {
    "text": "like V^pi(s) which says if you start in state s and you follow policy pi what is the expected discounted sum of rewards.",
    "start": "3125280",
    "end": "3132220"
  },
  {
    "text": "A state action value says well, I'm going to follow this policy pi but not right away.",
    "start": "3132220",
    "end": "3139095"
  },
  {
    "text": "I'm going to first take an action a, which might be different than what my policy is telling me to",
    "start": "3139095",
    "end": "3144930"
  },
  {
    "text": "do and then later on the next time-step I'm going to follow policy pi. So, it just says I'm going to get my immediate reward from taking this action a",
    "start": "3144930",
    "end": "3153810"
  },
  {
    "text": "that I'm choosing and then I'm going to transition to a new state. Again, that depends on my current state and the action I just",
    "start": "3153810",
    "end": "3160530"
  },
  {
    "text": "took and from then on I'm going to take policy pi.",
    "start": "3160530",
    "end": "3164350"
  },
  {
    "text": "So, that defines the Q function and what policy improvement does is it says okay you've got a policy,",
    "start": "3165840",
    "end": "3174115"
  },
  {
    "text": "you just did policy evaluation and you got a value of it. So, policy evaluation just allowed you to compute what was the value of",
    "start": "3174115",
    "end": "3183150"
  },
  {
    "text": "that policy [NOISE] and now I want to see if I can improve it.",
    "start": "3183150",
    "end": "3188220"
  },
  {
    "text": "Now, remember right now we're in the case where we know the dynamics model and we know the reward model.",
    "start": "3188220",
    "end": "3193755"
  },
  {
    "text": "So, what we can do then is we can do this with Q computation where we say okay well I've got",
    "start": "3193755",
    "end": "3199640"
  },
  {
    "text": "that previous value function by policy and now I compute Q^pi which says if I take a different action,",
    "start": "3199640",
    "end": "3206820"
  },
  {
    "text": "it could be the same and we do this for all A and for all S. So,",
    "start": "3206820",
    "end": "3214470"
  },
  {
    "text": "for all A and all S we compute this and then we're going to compute a new policy and this is the improvement step which maximizes this Q.",
    "start": "3214470",
    "end": "3223260"
  },
  {
    "text": "So, we just do this computation and then we take the max.",
    "start": "3223300",
    "end": "3228490"
  },
  {
    "text": "Now, by definition this has to be greater than or equal to Q^πi(s, pi_i(a)),",
    "start": "3228490",
    "end": "3238980"
  },
  {
    "text": "right, because either a is equal to pi_i(a),",
    "start": "3239860",
    "end": "3245810"
  },
  {
    "text": "sorry pi_i(s). So,",
    "start": "3245810",
    "end": "3254190"
  },
  {
    "text": "either you the arg max is going to be the same as that",
    "start": "3254190",
    "end": "3260680"
  },
  {
    "text": "your previous policy π_i or it's going to be different and the only time you're going to pick it differently as if the Q function of that alternative action is better.",
    "start": "3260680",
    "end": "3269600"
  },
  {
    "text": "So, by definition this Q^π that max over A of Q^π_i(s,a),",
    "start": "3269710",
    "end": "3281357"
  },
  {
    "text": "has to be greater than or equal to Q^π_i(s, π_i(s)). Question at the back.",
    "start": "3281357",
    "end": "3287940"
  },
  {
    "text": "Is this going to be susceptible? Is this going to be like finding a local maximum goal then",
    "start": "3287940",
    "end": "3293730"
  },
  {
    "text": "its kind of gets stuck there and [inaudible] for actions. Okay. So, this is going to allow us to maybe do some local monotonic improvement maybe,",
    "start": "3293730",
    "end": "3303305"
  },
  {
    "text": "um but are we going to be susceptible to gain stuck. Um, in fact, ah for any of you that have played around with reinforcement learning and and policy gradient and",
    "start": "3303305",
    "end": "3310220"
  },
  {
    "text": "stuff that is exactly one of the problems that can happen when we start doing gradient based approaches nicely in this case this does not occur.",
    "start": "3310220",
    "end": "3316680"
  },
  {
    "text": "So, we're guaranteed to converge to the global optima and we'll see why for a second.",
    "start": "3316680",
    "end": "3323079"
  },
  {
    "text": "Okay. All right. So this is how it works. You do this policy evaluation and then you compute the Q function and then",
    "start": "3323080",
    "end": "3329640"
  },
  {
    "text": "you compute the new policy that takes an arg max of the Q function. So, that's how policy improvement works.",
    "start": "3329640",
    "end": "3337010"
  },
  {
    "text": "The next critical question is Iris was bringing up is okay why do we do this and is this a good idea.",
    "start": "3337010",
    "end": "3342270"
  },
  {
    "text": "So, when we look at this, um let's look through this stuff a little bit more.",
    "start": "3343590",
    "end": "3350200"
  },
  {
    "start": "3344000",
    "end": "4416000"
  },
  {
    "text": "What we're going to get is we're going to get, um this sort of interesting type of",
    "start": "3351560",
    "end": "3356710"
  },
  {
    "text": "policy improvements step and it's kind of involving a few different things. So, I just want to highlight the subtlety of it.",
    "start": "3356710",
    "end": "3361984"
  },
  {
    "text": "So, what is happening here is that we compute this Q function and then we've got this.",
    "start": "3361985",
    "end": "3368660"
  },
  {
    "text": "We've got max over A of Q^π_i(s,a) has to be greater than equal to R(s, π(a)).",
    "start": "3368660",
    "end": "3379005"
  },
  {
    "text": "The previous policy that we were using before.",
    "start": "3379005",
    "end": "3384640"
  },
  {
    "text": "[NOISE].",
    "start": "3384640",
    "end": "3389579"
  },
  {
    "text": "So, what I've done there is I've said, okay, the max action over the Q has to be",
    "start": "3396810",
    "end": "3402400"
  },
  {
    "text": "at least as good as following your old policy by definition, because otherwise you could always pick the same policy as",
    "start": "3402400",
    "end": "3408670"
  },
  {
    "text": "before or else you're gonna pick a better action. And this reward function here is",
    "start": "3408670",
    "end": "3414130"
  },
  {
    "text": "just exactly the definition of the value of your old policy. So, that means that you're- the max over your Q function",
    "start": "3414130",
    "end": "3422110"
  },
  {
    "text": "has to be at least as good as the old value you had. So, that's encouraging. But here's the weird part.",
    "start": "3422110",
    "end": "3428350"
  },
  {
    "text": "So, when we do this, if we instead take arg max we're gonna get our new policy.",
    "start": "3428350",
    "end": "3434300"
  },
  {
    "text": "So, what is this doing? It's saying, I'm computing this new Q function. What does this Q function represent?",
    "start": "3442350",
    "end": "3448195"
  },
  {
    "text": "It represents, if I take an action and then I follow my old policy from then onwards.",
    "start": "3448195",
    "end": "3453325"
  },
  {
    "text": "And then I'm picking whatever action is maximizing that quantity for each state.",
    "start": "3453325",
    "end": "3459535"
  },
  {
    "text": "Okay. So, I'm gonna do this process for each state.",
    "start": "3459535",
    "end": "3463010"
  },
  {
    "text": "But then- so that's going to just define a new policy, right? Like I thought that might be the same or it could be a,",
    "start": "3464550",
    "end": "3470575"
  },
  {
    "text": "a different policy than the one you've had before. Here's the weird thing. So, this is saying that if you were to follow",
    "start": "3470575",
    "end": "3477445"
  },
  {
    "text": "that arg max A and then follow your old policy from then onwards, you will be guaranteed to be doing better than you were before.",
    "start": "3477445",
    "end": "3485185"
  },
  {
    "text": "But the strange thing is that we're not gonna follow the old policy from then onwards. We are going to follow this new policy for all time.",
    "start": "3485185",
    "end": "3493075"
  },
  {
    "text": "So, remember what we're doing is we're completely changing our policy and then we're going to evaluate that new policy for all time steps,",
    "start": "3493075",
    "end": "3500425"
  },
  {
    "text": "not just for the first time step and then follow the old policy from then on. So, it should be at least a little unclear that this is a good thing to do [LAUGHTER].",
    "start": "3500425",
    "end": "3508750"
  },
  {
    "text": "Should be like, okay, so you're, you're saying that if I were to take this one different action and then follow my old policy, then I know that my value would be better than before.",
    "start": "3508750",
    "end": "3516250"
  },
  {
    "text": "But what you really want is that this new policy is just better overall. And so the cool thing is that you can show that by doing",
    "start": "3516250",
    "end": "3524230"
  },
  {
    "text": "this policy improvement it is monotonically better than the old policy.",
    "start": "3524230",
    "end": "3529670"
  },
  {
    "text": "So, this is just saying this on a words, we're saying, you know, if we took the new policy for one action,",
    "start": "3530430",
    "end": "3536320"
  },
  {
    "text": "then follow pi_i forever then we're guaranteed to be at least as good as we were before in terms of our value function,",
    "start": "3536320",
    "end": "3541525"
  },
  {
    "text": "but our new proposed policy is just to always follow this new policy. Okay. So, why did we get a monotonic improvement in",
    "start": "3541525",
    "end": "3549130"
  },
  {
    "text": "the policy value by doing this say in the policy value? So, what- first of all what do I mean by a monotonic improvement?",
    "start": "3549130",
    "end": "3556795"
  },
  {
    "text": "Um, what I mean is that the value, uh, something that is monotonic if, um,",
    "start": "3556795",
    "end": "3562780"
  },
  {
    "text": "the new policy is greater than equal to the old policy for all states. So, it has to either have the same value or be better.",
    "start": "3562780",
    "end": "3569935"
  },
  {
    "text": "And my proposition is that the new policy is greater than or equal to the old policy in all states with strict inequality if the old policy was suboptimal.",
    "start": "3569935",
    "end": "3581150"
  },
  {
    "text": "So, why does this work? So, it works for the following reasons.",
    "start": "3584220",
    "end": "3590365"
  },
  {
    "text": "Let's go ahead and just like walk through the proof briefly. Okay. So, this is- what we've said here is that,",
    "start": "3590365",
    "end": "3598420"
  },
  {
    "text": "um, V^pi_i(s), that's our old value of our policy. So, this is like our old policy value.",
    "start": "3598420",
    "end": "3605845"
  },
  {
    "text": "Has to be less than or equal to max a of Q^pi_i(s, a).",
    "start": "3605845",
    "end": "3611510"
  },
  {
    "text": "And this is just by definition. Uh, let me write it like this.",
    "start": "3612210",
    "end": "3621050"
  },
  {
    "text": "Is equal to R(s, pi_i+1(s)). Because remember the way that we",
    "start": "3627240",
    "end": "3634869"
  },
  {
    "text": "define pi_i+1(s) is just equal to the policy that match- maximizes the Q^pi_i.",
    "start": "3634870",
    "end": "3643040"
  },
  {
    "text": "Okay. So, this is gonna be by definition. So, I've gotten rid of the max there.",
    "start": "3643800",
    "end": "3651170"
  },
  {
    "text": "Okay. So, this is going to be less than or equal to R the same thing at",
    "start": "3664200",
    "end": "3672190"
  },
  {
    "text": "the beginning times max over a of our Q^pi_i.",
    "start": "3672190",
    "end": "3688940"
  },
  {
    "text": "Again by definition, because we've said that the first thing there that we know that the pie i of",
    "start": "3692100",
    "end": "3697839"
  },
  {
    "text": "s prime would also be less than or equal to max over a of Q^pi_i(s', a').",
    "start": "3697840",
    "end": "3703855"
  },
  {
    "text": "Okay. So, we just made that substitution. And then we can re-expand this part using r reward.",
    "start": "3703855",
    "end": "3714775"
  },
  {
    "text": "So, this is gonna be the max over a' R(s',a') plus dot-dot-dot,",
    "start": "3714775",
    "end": "3721059"
  },
  {
    "text": "basically making that substitution from that line into there. So, I'm nesting it. I'm re-expanding what the definition is of Q^pi.",
    "start": "3721060",
    "end": "3729415"
  },
  {
    "text": "And if you keep doing this forever, essentially we just keep pushing in as if we get to continue to",
    "start": "3729415",
    "end": "3735039"
  },
  {
    "text": "take pi_i+1 on all future time steps. And what- the key thing to notice here is that this is a greater than or equal to.",
    "start": "3735040",
    "end": "3742975"
  },
  {
    "text": "So, if you nest this in completely what you get is that this is the value pi_i+1.",
    "start": "3742975",
    "end": "3748850"
  },
  {
    "text": "So, there's kind of two key tricks in here. The, the first thing is to say, notice that the V^pi_i is always lower- is the lower bound to max a over Q^pi.",
    "start": "3750900",
    "end": "3760404"
  },
  {
    "text": "And then to re-express this using the definition of pi_i+1. And then to re-upper bound that V by Q^pi and just keep re-expanding it.",
    "start": "3760405",
    "end": "3770470"
  },
  {
    "text": "And so you can do this out and then that allows you to redefine to- when you substituted it in for all actions using pi_i+1,",
    "start": "3770470",
    "end": "3780235"
  },
  {
    "text": "then you've now defined what the value is of pi_i+1. So, this is what it allows us to know that the new pi_i+1 value is by definition at least as good as the previous value function.",
    "start": "3780235",
    "end": "3792980"
  },
  {
    "text": "So, I'll just put that in there [inaudible]. All right.",
    "start": "3794640",
    "end": "3800515"
  },
  {
    "text": "So, the next questions that might come up is so we know we're gonna get this monotonic improvement, um, so the questions would be if the policy doesn't change, can it ever change again?",
    "start": "3800515",
    "end": "3808540"
  },
  {
    "text": "And is there a maximum number of iterations of policy iteration? So, what do I mean by iterations? Here iterations is i.",
    "start": "3808540",
    "end": "3815200"
  },
  {
    "text": "It's a kind of how many policies could we step through? So, why don't we take like a minute and just think about this maybe talk to somebody",
    "start": "3815200",
    "end": "3823000"
  },
  {
    "text": "around you that you haven't met before and just see what they think of these two questions.",
    "start": "3823000",
    "end": "3827300"
  },
  {
    "text": "So policy is monotonically improving and is there a maximum number of iterations as we've read before?",
    "start": "3832690",
    "end": "3839800"
  },
  {
    "text": "[NOISE] Just in the interest",
    "start": "3839800",
    "end": "3846540"
  },
  {
    "text": "of time for today- just in the interest of time for today because I want us to try to get through value iteration as well,",
    "start": "3846540",
    "end": "3852869"
  },
  {
    "text": "um, why doesn't- does somebody wanna give me, um, a guess of whether or not the policy can ever- if the policy stops changing,",
    "start": "3852870",
    "end": "3861335"
  },
  {
    "text": "whether it can ever change again? So, what I mean by that is that if the policy at pi,",
    "start": "3861335",
    "end": "3866420"
  },
  {
    "text": "so the question here was to say, if pi of i+1 is equal to pi i for all states,",
    "start": "3866420",
    "end": "3872355"
  },
  {
    "text": "could it ever change again? Somebody wanna share a guess of whether or not that is true. Once it has stopped changing it can never change again.",
    "start": "3872355",
    "end": "3879020"
  },
  {
    "text": "So, no. And the second question is, um, is there a maximum number of policy iterations? Yeah.",
    "start": "3879020",
    "end": "3886670"
  },
  {
    "text": "There's no- you can't have more iterations than there are policies. That's right. There- We know that there is at most a to the s policies.",
    "start": "3886670",
    "end": "3893380"
  },
  {
    "text": "You cannot repeat a policy ever, um, because of this monotonic improvement.",
    "start": "3893380",
    "end": "3898875"
  },
  {
    "text": "And so, there- there's a maximum number of iterations. Okay? Great. And this just- um,",
    "start": "3898875",
    "end": "3909260"
  },
  {
    "text": "I'll skip through this now just so we can go through a bit of value iteration, but this just steps through to show a little bit more of how once your policy stopped changing,",
    "start": "3909260",
    "end": "3916395"
  },
  {
    "text": "essentially your Q^pi will be identical. And so you can't- uh, there's no policy improvements to be, yeah, to change.",
    "start": "3916395",
    "end": "3923050"
  },
  {
    "text": "After it's sort of converged, you're gonna stay there forever. Okay, so policy iteration computes,",
    "start": "3923050",
    "end": "3929040"
  },
  {
    "text": "um, the optimal value in a policy in one way. The idea in policy iteration is you always have a policy,",
    "start": "3929040",
    "end": "3934859"
  },
  {
    "text": "um, that is- that you know the value of it for the infinite horizon. And then you incrementally try to improve it.",
    "start": "3934860",
    "end": "3942355"
  },
  {
    "text": "Value iteration is an alternative approach. Value iteration in itself says we're gonna think of computing",
    "start": "3942355",
    "end": "3948130"
  },
  {
    "text": "the optimal value if you get to act for a finite number of steps. The beginning just one step and then two steps and then three steps et cetera.",
    "start": "3948130",
    "end": "3955070"
  },
  {
    "text": "Um, and you just keep iterating to longer and longer. So that's different, right? Because policy says you",
    "start": "3955070",
    "end": "3961210"
  },
  {
    "text": "always have a policy and you know what its value is. It just might not be very good. Value iteration says you always know what the optimal value in policy is,",
    "start": "3961210",
    "end": "3968755"
  },
  {
    "text": "but only if you're gonna get to act for say k time steps. So they're just- they're computing different things,",
    "start": "3968755",
    "end": "3974240"
  },
  {
    "text": "um, and they both will converge to the same thing eventually. So when we start to talk about value iteration,",
    "start": "3974240",
    "end": "3980810"
  },
  {
    "text": "it's useful to think about Bellman. Um, so the Bellman equation and Bellman backup operators are things that are often talked about in,",
    "start": "3980810",
    "end": "3988070"
  },
  {
    "text": "um, Markov Decision Processes and reinforcement learning. So this constraint here that we've seen before,",
    "start": "3988070",
    "end": "3994700"
  },
  {
    "text": "which says that the value of a policy is its immediate reward plus its discounted sum of future rewards,",
    "start": "3994700",
    "end": "4000215"
  },
  {
    "text": "um, is known as the Bellman equation. The constraint for a Markov process, er, Markov Decision Process say that it as to satisfy that.",
    "start": "4000215",
    "end": "4008220"
  },
  {
    "text": "And we can alternatively, like what we were just seeing before, think of this is as, um,",
    "start": "4008220",
    "end": "4013395"
  },
  {
    "text": "as a backup operator, which means that we can apply it to an old value function and transform it to a new value function.",
    "start": "4013395",
    "end": "4022714"
  },
  {
    "text": "So just like what we were doing in some of the, um, ah, evaluation of a policy,",
    "start": "4022715",
    "end": "4028180"
  },
  {
    "text": "we can also just sort of do these operators. In this case, the difference compared to what we've seen with evaluation before is we're taking a max there.",
    "start": "4028180",
    "end": "4035240"
  },
  {
    "text": "We're taking this max a over th- the best immediate already credit plus the discounted sum of future rewards.",
    "start": "4035240",
    "end": "4042095"
  },
  {
    "text": "So sometimes we'll use the notation of BV to mean a Bellman operator, which means you take your old V and then you'd",
    "start": "4042095",
    "end": "4047860"
  },
  {
    "text": "plug it into here and you do this operation. So how does value iteration work?",
    "start": "4047860",
    "end": "4054265"
  },
  {
    "text": "The algorithm can be summarized as follows. You start off, you can initialize your value function to zero for all states.",
    "start": "4054265",
    "end": "4060535"
  },
  {
    "text": "And then you loop until you converge, um, or if you're doing a finite horizon,",
    "start": "4060535",
    "end": "4066030"
  },
  {
    "text": "which we might not have time to get to today, but, um, I- then you'd go to that horizon. And basically, for each state,",
    "start": "4066030",
    "end": "4071685"
  },
  {
    "text": "you do this Bellman backup operator. So you'd say, my value at k plus one time steps for that state is if I get to pick",
    "start": "4071685",
    "end": "4079250"
  },
  {
    "text": "the best immediate action plus the discounted sum of future rewards using that old value function I had from the previous time step.",
    "start": "4079250",
    "end": "4087579"
  },
  {
    "text": "And that Vk said what is the optimal thing my optimal value for that state s prime given that I got to act for k more time steps.",
    "start": "4087800",
    "end": "4097859"
  },
  {
    "text": "So that's why initializing it to zero is a good thing to do because in this case,",
    "start": "4097860",
    "end": "4102955"
  },
  {
    "text": "or a certainly reasonable thing to do if you want the result to be the optimal as if you had that many time steps to go.",
    "start": "4102955",
    "end": "4108250"
  },
  {
    "text": "If you have no more time steps to act, your value is zero. The first backup you do will basically say what is",
    "start": "4108250",
    "end": "4115120"
  },
  {
    "text": "the optimal immediate action you should take if you only get to take one action. And then after that you start backing up,",
    "start": "4115120",
    "end": "4121580"
  },
  {
    "text": "um, and continuing to say well, what if I got to act for two time steps? What if I got to act for three time steps? What's the best sequence of decisions you could do in each of those cases?",
    "start": "4121580",
    "end": "4129950"
  },
  {
    "text": "Um, again just in terms of Bellman operations if we think back to sort of what policy iteration is doing,",
    "start": "4130620",
    "end": "4137085"
  },
  {
    "text": "you can instantiate this Bellman operator by fixing what the policy is. And so, if you see sort of a B with, um, ah,",
    "start": "4137085",
    "end": "4145639"
  },
  {
    "text": "pi on top and saying, well, instead of taking that max over actions, you're specifying what is the action you get to take.",
    "start": "4145640",
    "end": "4152255"
  },
  {
    "text": "So policy evaluation you can think of as basically just computing a fixed point of repeatedly applying",
    "start": "4152255",
    "end": "4158339"
  },
  {
    "text": "this Bellman backup until V stops converging and stops changing.",
    "start": "4158340",
    "end": "4164799"
  },
  {
    "text": "So, um, in terms of policy iteration, this is very similar to what we saw before you can think of it",
    "start": "4165880",
    "end": "4172150"
  },
  {
    "text": "in these Bellman operators and doing this argmax. Wanna see if we can get to a little bit on sort of the contraction operator.",
    "start": "4172150",
    "end": "4178505"
  },
  {
    "text": "So this is what, um, value iteration does. It's a very similar policy iteration and evaluation.",
    "start": "4178505",
    "end": "4184364"
  },
  {
    "text": "Um, let me talk a little bit about the contraction aspect. So, for any operator, um,",
    "start": "4184365",
    "end": "4190880"
  },
  {
    "text": "let's let O be an operator and x denote a norm of x. So x could be a vector like a value function and then we could look at",
    "start": "4190880",
    "end": "4197810"
  },
  {
    "text": "like an L2 norm or an L1 norm or L infinity norm. So, if you wanna- if an operator is",
    "start": "4197810",
    "end": "4204660"
  },
  {
    "text": "a contraction it means that if you apply it to two different things, you can think of these as value functions, um,",
    "start": "4204660",
    "end": "4209785"
  },
  {
    "text": "then the distance between them shrinks after, um, or at least is no bigger after you",
    "start": "4209785",
    "end": "4215640"
  },
  {
    "text": "apply the operator compared to their distance before. So just to, um- actually,",
    "start": "4215640",
    "end": "4222000"
  },
  {
    "text": "I'll, I'll save examples for later. Feel free to come up to me after class if you wanna see an example of this, um, or I can do it on Piazza.",
    "start": "4222000",
    "end": "4227375"
  },
  {
    "text": "But this is the formal definition of what it means to be a contraction. Is that the distance between,",
    "start": "4227375",
    "end": "4232409"
  },
  {
    "text": "in this case we're gonna think about it as two vectors, um, doesn't get bigger and can shrink after you apply this operator.",
    "start": "4232410",
    "end": "4239119"
  },
  {
    "text": "So, the key question of whether or not value iteration will converge is because the Bellman backup is a contraction operator.",
    "start": "4239840",
    "end": "4247820"
  },
  {
    "text": "And it's a contraction operator as long as gamma is less than one. Which means that if you do- if let's say have two different Bell- er,",
    "start": "4247820",
    "end": "4255930"
  },
  {
    "text": "two different value functions and then you did the Bellman backup on both of them. Then the distance between them would shrink.",
    "start": "4255930",
    "end": "4262100"
  },
  {
    "text": "So how do we prove this? Um, we prove it- for interest of time I'll show you the proof.",
    "start": "4262430",
    "end": "4269639"
  },
  {
    "text": "Again, I'm happy to go through it, um, I- or we can go through it in office hours et cetera. Let me just show it kind of briefly.",
    "start": "4269640",
    "end": "4275975"
  },
  {
    "text": "So the idea to, to prove that the Bellman backup is a contraction operator, is we consider there being two different value functions, k and j.",
    "start": "4275975",
    "end": "4284220"
  },
  {
    "text": "They don't have to be- This has- doesn't have to be anything to do with value iteration. These are just two different value functions.",
    "start": "4284220",
    "end": "4289430"
  },
  {
    "text": "One could be, you know, 1,3,7,2 and the other one could be 5,6,9,8. Okay. So we just have two different vectors of value functions and then we",
    "start": "4289430",
    "end": "4297570"
  },
  {
    "text": "re-express what they are after we apply the Bellman backup operator. So there's that max a,",
    "start": "4297570",
    "end": "4303360"
  },
  {
    "text": "the immediate reward plus the discounted sum of future rewards where we've plugged in our two different value functions.",
    "start": "4303360",
    "end": "4308740"
  },
  {
    "text": "And then what we say there is, well, if you get to pick that max a separately for those two,",
    "start": "4308740",
    "end": "4314590"
  },
  {
    "text": "the distance between those is lower bounded than if you kind of try to",
    "start": "4314590",
    "end": "4319820"
  },
  {
    "text": "maximize that difference there by putting that max a in. And then you can cancel the rewards.",
    "start": "4319820",
    "end": "4326130"
  },
  {
    "text": "So that's what happens in the third line. And then the next thing we can do is we can bound and say",
    "start": "4326130",
    "end": "4332390"
  },
  {
    "text": "the difference between these two value functions is diff- is, um, bounded by the maximum of the distance between those two.",
    "start": "4332390",
    "end": "4338230"
  },
  {
    "text": "So you can pick the places at which those value functions most differ. And then you can move it out of the sum.",
    "start": "4338230",
    "end": "4344180"
  },
  {
    "text": "And now you're summing over a probability distribution that has to sum to one. And that gives you this. And so that means that",
    "start": "4344180",
    "end": "4351639"
  },
  {
    "text": "the Bellman backup as long as this is less than one has to be a contraction operator.",
    "start": "4351640",
    "end": "4357710"
  },
  {
    "text": "The distance between the two value functions can't be larger after you apply the Bellman operator than it was before.",
    "start": "4357710",
    "end": "4363960"
  },
  {
    "text": "So, I think a good exercise to do, um, is to then say given that it's a contraction operator,",
    "start": "4365700",
    "end": "4372735"
  },
  {
    "text": "um, that means it has to converge to a fixed point. There has to be a unique solution. So if you apply the Bellman operator repeatedly you- there is",
    "start": "4372735",
    "end": "4380800"
  },
  {
    "text": "a single fixed point that you will go to which is a single, um, vector value fun- uh, values.",
    "start": "4380800",
    "end": "4386940"
  },
  {
    "text": "It's also good to think about whether the initialization and values impacts anything if you only care about the result after it's converged.",
    "start": "4386940",
    "end": "4394980"
  },
  {
    "text": "All right. So, um, I think we can halt there. Class is basically over. There's a little bit more in the slides to talk about, um,",
    "start": "4395810",
    "end": "4402835"
  },
  {
    "text": "the finite horizon case, um, and feel free to reach out to us on Piazza with any questions. Thanks. [NOISE]",
    "start": "4402835",
    "end": "4408949"
  }
]