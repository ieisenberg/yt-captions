[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": "So welcome to the Machine [NOISE] Translation lecture, which is kind of like a culmination [NOISE] of",
    "start": "5000",
    "end": "11580"
  },
  {
    "text": "this sequence of three lectures on RNNs and related topics. So let's have a few announcements first.",
    "start": "11580",
    "end": "18420"
  },
  {
    "text": "Uh, the first thing is, as you probably noticed when you came in, we're taking attendance today. Uh, so you need to sign in with the TAs who are outside the auditorium.",
    "start": "18420",
    "end": "27090"
  },
  {
    "text": "Uh, if you missed it, don't get up now, it's fine. There will be time to sign in after the lecture.",
    "start": "27090",
    "end": "32985"
  },
  {
    "text": "Uh, and then, if you have any kind of questions about special cases with the attendance policy, uh, you should check out a Piazza post that we put up last night with some clarifications.",
    "start": "32985",
    "end": "41090"
  },
  {
    "text": "[NOISE] Uh, you have the reminder that Assignment 4 content is going to be covered today. So you're gonna have everything you need to do Assignment 4 at the end of today.",
    "start": "41090",
    "end": "47690"
  },
  {
    "text": "[NOISE] And do get started early because the model takes 4 hours to train. The other announcement is that we're going [NOISE] to be sending out",
    "start": "47690",
    "end": "54585"
  },
  {
    "text": "our mid-quarter feedback survey sometime in the next few days probably, uh, so please do fill it out.",
    "start": "54585",
    "end": "60110"
  },
  {
    "text": "You'll get 0.5% credit, and you're also gonna help us to make the class better for the rest of the quarter. [NOISE] Okay.",
    "start": "60110",
    "end": "68189"
  },
  {
    "start": "67000",
    "end": "166000"
  },
  {
    "text": "So here's the overview of what we're going to do today. [NOISE] Uh, today, first, we're going to introduce a new task in NLP,",
    "start": "68190",
    "end": "73820"
  },
  {
    "text": "which is machine translation, [NOISE] and then, we're going to introduce a new neural architecture called sequence-to-sequence.",
    "start": "73820",
    "end": "80200"
  },
  {
    "text": "And the connection here is that machine translation is a major use case of sequence-to-sequence. [NOISE] After that, we're going to introduce a new neural technique called attention,",
    "start": "80200",
    "end": "89524"
  },
  {
    "text": "and this is something that improves sequence-to-sequence a lot. Okay. So Section 1 of this is gonna be about, uh,",
    "start": "89525",
    "end": "97230"
  },
  {
    "text": "a bit of machine translation history, pre-neural machine translation. [NOISE] So machine translation or MT,",
    "start": "97230",
    "end": "105180"
  },
  {
    "text": "uh, is the task of translating a sentence x, uh, which we call the source language, whatever language you're translating from,",
    "start": "105180",
    "end": "112250"
  },
  {
    "text": "into a sentence y, which is in another language, which we call the target language. Uh, so here's an example. Let's suppose x is this French sentence.",
    "start": "112250",
    "end": "119875"
  },
  {
    "text": "Um, [NOISE] could anyone in the audience, a French speaker, translate this to English for us? [NOISE] [BACKGROUND] Yeah. Um, the man is born free, and, uh, everywhere, he is in irons.",
    "start": "119875",
    "end": "125430"
  },
  {
    "text": "Great.",
    "start": "125430",
    "end": "132500"
  },
  {
    "text": "So that was something like,",
    "start": "132500",
    "end": "140760"
  },
  {
    "text": "the man is born free, but everywhere, he's in irons. That was a fairly literal translation. It's usually translated, this quote by Rousseau is usually translated as,",
    "start": "140760",
    "end": "147770"
  },
  {
    "text": "man is born free, but everywhere, he is in chains. But there's an ambiguity: [NOISE] should fers be, um, literally irons or chains?",
    "start": "147770",
    "end": "154200"
  },
  {
    "text": "Also, you could choose to, uh, translate l'homme as man or maybe humankind. Uh, so this is an example of machine translation,",
    "start": "154200",
    "end": "161569"
  },
  {
    "text": "and there's already, you know, quite a few choices you can make. [NOISE] So the beginning of machine translation as an AI task began in the early 1950s.",
    "start": "161570",
    "end": "170504"
  },
  {
    "start": "166000",
    "end": "302000"
  },
  {
    "text": "So, um, in particular, there was a lot of work translating Russian to English, uh, because the West was very interested in listening",
    "start": "170505",
    "end": "177200"
  },
  {
    "text": "to what the Russians were saying during the Cold War. And we've got a fun video here, [NOISE] which shows the state of machine translation in 1954.",
    "start": "177200",
    "end": "185300"
  },
  {
    "text": "[MUSIC] They haven't reckoned with ambiguity when they set out to use computers to translate languages.",
    "start": "185300",
    "end": "193185"
  },
  {
    "text": "A $500,000 simple calculator, most versatile electronic brain known,",
    "start": "193185",
    "end": "198600"
  },
  {
    "text": "translates Russian into English. Instead of mathematical wizardry, a sentence in Russian is to be fed [OVERLAPPING].",
    "start": "198600",
    "end": "204560"
  },
  {
    "text": "One of the first non-numerical applications of computers, [BACKGROUND] it was hyped as the solution to the Cold War obsession of keeping tabs on what the Russians were doing.",
    "start": "204560",
    "end": "213379"
  },
  {
    "text": "Claims were made that the computer would replace most human translators. [inaudible] you're just in the experimental stage.",
    "start": "213380",
    "end": "220380"
  },
  {
    "text": "When you go in for full-scale production, what will the capacity be? We should be able to do about,",
    "start": "220380",
    "end": "226456"
  },
  {
    "text": "with the help of a commercial computer, uh, about one to two million words, uh, an hour, and this will be quite an adequate speed to cope with",
    "start": "226456",
    "end": "233235"
  },
  {
    "text": "the whole alphabet of the Soviet Union in just a few hours' computer time a week. When do you have to be able to achieve this feat?",
    "start": "233235",
    "end": "239970"
  },
  {
    "text": "If our experiments go well, then perhaps within, uh, five years or so.",
    "start": "239970",
    "end": "244810"
  },
  {
    "text": "So in this video, I think there's a number of interesting things. Uh, firstly, we can see an example of about how,",
    "start": "245210",
    "end": "251665"
  },
  {
    "text": "uh, AI hype is nothing new. Even in 1954, [NOISE] they were talking this machine translation system as if it was an electronic brain,",
    "start": "251665",
    "end": "259525"
  },
  {
    "text": "which I think, uh, overstates maybe how general it is. Uh, they were also, at least some of them, fairly optimistic that this [NOISE] machine translation system",
    "start": "259525",
    "end": "266995"
  },
  {
    "text": "was going to be replacing humans, uh, anytime soon. Um, so yeah, that's, that's pretty interesting.",
    "start": "266995",
    "end": "273669"
  },
  {
    "text": "And, um, [NOISE] the thing is that these systems actually were mostly rule-based, uh, by which I mean that they were mostly using",
    "start": "273670",
    "end": "280735"
  },
  {
    "text": "a bilingual dictionary between Russian and English, and they were essentially mostly just looking up the Russian words, uh,",
    "start": "280735",
    "end": "286440"
  },
  {
    "text": "looking up their English counterparts, and they were storing these big bilingual dictionaries on these large magnetic tapes.",
    "start": "286440",
    "end": "291540"
  },
  {
    "text": "Um, so certainly, it was a [NOISE] huge technical feat at the time, uh, but they, uh, some people were probably too",
    "start": "291540",
    "end": "297110"
  },
  {
    "text": "optimistic [NOISE] about how quickly it would replace humans. So jumping forward several decades in time,",
    "start": "297110",
    "end": "303230"
  },
  {
    "start": "302000",
    "end": "531000"
  },
  {
    "text": "uh, now I want to tell you about statistical machine translation. So the core idea of statistical machine translation is that you're going to",
    "start": "303230",
    "end": "310070"
  },
  {
    "text": "learn a probabilistic model from the data in order to do the translation. So as an example, uh, as before,",
    "start": "310070",
    "end": "316800"
  },
  {
    "text": "suppose that we're translating from French to English. The idea is that you want to find the best English sentence y,",
    "start": "316800",
    "end": "323225"
  },
  {
    "text": "given the French sentence x, [NOISE] and, uh, mathematically, you can formulate this as finding argmax y of this conditional probability of y, given x,",
    "start": "323225",
    "end": "331639"
  },
  {
    "text": "[NOISE] and the model that you're learning is this probability distribution P. [NOISE] So what we usually do is,",
    "start": "331640",
    "end": "338010"
  },
  {
    "text": "we break down this probability into, uh, its two components using Bayes' Rule.",
    "start": "338010",
    "end": "343190"
  },
  {
    "text": "[NOISE] So this means that finding the y that maximizes, uh, probability of y, given x,",
    "start": "343190",
    "end": "348585"
  },
  {
    "text": "is equivalent to finding the y that maximizes the probability of x, given y, times the probability of y.",
    "start": "348585",
    "end": "355255"
  },
  {
    "text": "So the two components here, on the left, we have a translation model, and this is keeping track of how words and phrases should be translated.",
    "start": "355255",
    "end": "363605"
  },
  {
    "text": "Uh, so the idea is that it knows, uh, how, uh, French words and an English word might be translated to each other or maybe small,",
    "start": "363605",
    "end": "370880"
  },
  {
    "text": "small phrases and chunks of words should be translated. And this is learned from a lot of parallel data,",
    "start": "370880",
    "end": "375985"
  },
  {
    "text": "and I'll be telling you later how we do that. The second compo- component P(y), [NOISE] this is just a language model.",
    "start": "375985",
    "end": "382490"
  },
  {
    "text": "[NOISE] We learned about this last week. A language model is a system that can predict the next word, but it can also be thought of as a system [NOISE] that tells",
    "start": "382490",
    "end": "389360"
  },
  {
    "text": "you the probability of a sequence of words. So here, if we're translating from French to English,",
    "start": "389360",
    "end": "394595"
  },
  {
    "text": "P(y) is an English language model. [NOISE] So the idea is the, the reason why we want to break down",
    "start": "394595",
    "end": "400355"
  },
  {
    "text": "this single conditiona- conditional probability distribution into the, the pr- product of two different ones is that this is a kind of division of labor.",
    "start": "400355",
    "end": "409490"
  },
  {
    "text": "The idea is that instead of, uh, a single conditional probability distribution needing to understand how to translate,",
    "start": "409490",
    "end": "415745"
  },
  {
    "text": "and how to write good English text, and understand sentence structure, and everything at once, the idea is that you separate it so that [NOISE]",
    "start": "415745",
    "end": "422060"
  },
  {
    "text": "the translation model on the left in blue mostly just knows about a local translation of small chunks of words and phrases,",
    "start": "422060",
    "end": "429169"
  },
  {
    "text": "whereas the language model on the right more takes care of writing good English, good sentence structure, word order, and so on.",
    "start": "429170",
    "end": "435110"
  },
  {
    "text": "[NOISE] So you already know how to learn a language model [NOISE] because we learned about that last time.",
    "start": "435110",
    "end": "440240"
  },
  {
    "text": "You just need lots of monolingual data, in this case, English data. [NOISE] So I'm going to tell you more about how we would learn",
    "start": "440240",
    "end": "445520"
  },
  {
    "text": "this translation model that needs to be learned from parallel data. [NOISE]",
    "start": "445520",
    "end": "450860"
  },
  {
    "text": "So we need a large amount of parallel data in order to learn this translation model.",
    "start": "450860",
    "end": "456564"
  },
  {
    "text": "And an early example of a parallel corpus, is the Rosetta Stone. So this is a stone that has the same text written in three different languages.",
    "start": "456565",
    "end": "466045"
  },
  {
    "text": "And this is a hugely important artifact for the people who were trying to understand ancient Egyptian.",
    "start": "466045",
    "end": "473590"
  },
  {
    "text": "So in the 19th century, uh, scholars discovered this stone, and it helped them to figure out ancient Egyptian because there was",
    "start": "473590",
    "end": "479590"
  },
  {
    "text": "this parallel text that had the the same text in other languages that they did know. So this is, this is a really important parallel corpus,",
    "start": "479590",
    "end": "487605"
  },
  {
    "text": "and if you're ever in London, you can go to the British Museum, and see this in person. So the idea is that you get your parallel data.",
    "start": "487605",
    "end": "495235"
  },
  {
    "text": "Obviously, you need a larger amount that is on the stone, and hopefully it shouldn't be written on a stone either. But you can use this to learn your statistical machine translation model.",
    "start": "495235",
    "end": "505104"
  },
  {
    "text": "So the idea is that, you are trying to learn this conditional probability distribution of x given y.",
    "start": "505105",
    "end": "510550"
  },
  {
    "text": "So what we do is we actually break this down even further. We actually want to consider the probability of x and a given y.",
    "start": "510550",
    "end": "517794"
  },
  {
    "text": "Where a is the alignment. So the idea of alignment, is this is how the words in",
    "start": "517795",
    "end": "523300"
  },
  {
    "text": "the English sentence and the French sentence correspond to each other. So I'm gonna, uh, demonstrate this by an example.",
    "start": "523300",
    "end": "530690"
  },
  {
    "text": "So in this example, while we're translating the sentence 'Japan shaken by two new quakes' to French.",
    "start": "530690",
    "end": "537315"
  },
  {
    "start": "531000",
    "end": "563000"
  },
  {
    "text": "Then you can see there is a pretty simple one-to-one alignment here, uh, of English words to French words,",
    "start": "537315",
    "end": "542595"
  },
  {
    "text": "and also they appear in the exact same order. The only thing that doesn't conform to that is the word 'Le' in French,",
    "start": "542595",
    "end": "550510"
  },
  {
    "text": "which we call a spurious word because it doesn't have a direct counterpart in the English sentence, and that's because in English we just say,",
    "start": "550510",
    "end": "556630"
  },
  {
    "text": "'Japan', but in French we say, 'Le Japon'. So alignment can be a bit more complicated than that.",
    "start": "556630",
    "end": "562915"
  },
  {
    "text": "For example, alignment can be many-to-one. In this example, you have, uh,",
    "start": "562915",
    "end": "568149"
  },
  {
    "start": "563000",
    "end": "687000"
  },
  {
    "text": "several French words that have multiple English words that correspond to them. So this is what we call many-to-one alignment.",
    "start": "568150",
    "end": "575050"
  },
  {
    "text": "Uh, it can go in the other direction too. Alignment can be one-to-many.",
    "start": "575050",
    "end": "580075"
  },
  {
    "text": "So here we have a single English word implemented, which has a one-to-many alignment because there is a three-word French phra-phrase that corresponds to it.",
    "start": "580075",
    "end": "588355"
  },
  {
    "text": "So on the left and the right, we have two ways of depicting the same alignments. It's either a kind of chart or it can be a, a graph.",
    "start": "588355",
    "end": "597410"
  },
  {
    "text": "So here's another example, um, of a one-to-many, well, sorry, right.",
    "start": "598020",
    "end": "604959"
  },
  {
    "text": "So we call, uh, this word implemented, that is one-to-many. We call it a fertile word because the idea is that it has many children in the,",
    "start": "604960",
    "end": "612565"
  },
  {
    "text": "in the target sentence. So in fact, there are some words which are very fertile. Here's an example where the source sentence,",
    "start": "612565",
    "end": "619690"
  },
  {
    "text": "'il m'a entarte', means, 'he hit me with a pie', and here in French,",
    "start": "619690",
    "end": "625090"
  },
  {
    "text": "this verb, 'entarte' means, uh, to hit someone with a pie, [LAUGHTER] and this word has no single word equivalent in English.",
    "start": "625090",
    "end": "635845"
  },
  {
    "text": "We don't have a single verb that means to hit someone with a pie. [LAUGHTER] Which I think that is really fun, that French has a word.",
    "start": "635845",
    "end": "641694"
  },
  {
    "text": "You wonder, maybe they do it so often that they need a single word for that. I don't know. [LAUGHTER]",
    "start": "641695",
    "end": "646750"
  },
  {
    "text": "So this is an example of a fertile word, right? Because it needs to have several corresponding English words to translate it.",
    "start": "646750",
    "end": "653360"
  },
  {
    "text": "So we can have one-to-many, and many-to-one. You can also have many-to-many alignments.",
    "start": "654000",
    "end": "659650"
  },
  {
    "text": "You could call that kind of phrase level translation, or phrase-to-phrase. So here, uh, the English sentence says,",
    "start": "659650",
    "end": "666100"
  },
  {
    "text": "'The poor doesn't- don't have any money', and here don't have any money corresponds to the French phrase,",
    "start": "666100",
    "end": "671350"
  },
  {
    "text": "'sont demunis', and this is a many-to-many alignment because there is no obvious way to break down this phrase-to-phrase alignment into,",
    "start": "671350",
    "end": "678685"
  },
  {
    "text": "um, smaller word-to-word alignments. Okay. So that's what alignment is.",
    "start": "678685",
    "end": "685495"
  },
  {
    "text": "And if you remember, we were thinking about how would you learn this probability distribution of what the alignment is,",
    "start": "685495",
    "end": "690730"
  },
  {
    "start": "687000",
    "end": "756000"
  },
  {
    "text": "uh, in order to do statistical machine translation. So the idea is that you learn probability of x and a,",
    "start": "690730",
    "end": "697180"
  },
  {
    "text": "given y as a combination of many factors or many features. So you consider for example,",
    "start": "697180",
    "end": "703359"
  },
  {
    "text": "what's the probability of a particular word aligning to another particular word? Like you know, this English word and this French word,",
    "start": "703359",
    "end": "708940"
  },
  {
    "text": "how often do they align? But then, this also depends on for example, what's their position in the sentence? Like if they both appear near the end of the sentences,",
    "start": "708940",
    "end": "716739"
  },
  {
    "text": "then it's more likely that they align, whereas, if one's at the beginning and one's at the end, that's less likely.",
    "start": "716739",
    "end": "721855"
  },
  {
    "text": "You would also consider things like, uh, what's the probability of this particular French word having this particular fertility?",
    "start": "721855",
    "end": "728080"
  },
  {
    "text": "Like, what's the probability of this word having three corresponding English words and so on?",
    "start": "728080",
    "end": "733475"
  },
  {
    "text": "So all of these statistics are learned from your parallel data, and there's many other things that you would take into consideration.",
    "start": "733475",
    "end": "740240"
  },
  {
    "text": "So we're looking at a kind of overview of statistical machine translation today. You're not going to understand it in full detail,",
    "start": "740240",
    "end": "746020"
  },
  {
    "text": "but we're understanding an overview of how it works, because we're going to be, uh, comparing it to neural machine translation.",
    "start": "746020",
    "end": "752779"
  },
  {
    "text": "Okay. So we're learning this SMT system, and so far, we've broken it down into these two main components.",
    "start": "753510",
    "end": "760824"
  },
  {
    "start": "756000",
    "end": "1048000"
  },
  {
    "text": "We've got the translation model, and we've got the language model, and we understand a little bit about how you might",
    "start": "760825",
    "end": "766690"
  },
  {
    "text": "learn this translation model by breaking it down into alignments. So the question remains, how do you do the argmax over y?",
    "start": "766690",
    "end": "774040"
  },
  {
    "text": "How do you find your French sentence y that maximizes this probability?",
    "start": "774040",
    "end": "779560"
  },
  {
    "text": "So one kind of brute force solution is you could say, \"'let's enumerate every possible y.\"",
    "start": "779560",
    "end": "785830"
  },
  {
    "text": "That's kind of every possible sequence of French words, maybe up to some length, and, uh, we'll calculate this probability for all of them,",
    "start": "785830",
    "end": "792460"
  },
  {
    "text": "and it should be pretty clear that that is just a no go. That's way too expensive, and we're not going to be able to get anywhere with that.",
    "start": "792460",
    "end": "799525"
  },
  {
    "text": "So the answer for how you actually do this in practice is, you are going to use some kind of heuristic search algorithm,",
    "start": "799525",
    "end": "805690"
  },
  {
    "text": "to search for the best translation, y. Uh, but along the way, you're going to discard hypotheses that are too low probability.",
    "start": "805690",
    "end": "813115"
  },
  {
    "text": "So you're gonna search, you're going to discard, and prune the trees as you go to make sure that you're not keeping too many hypotheses, uh, on each step.",
    "start": "813115",
    "end": "821540"
  },
  {
    "text": "So this process of finding your best sequence is also called decoding.",
    "start": "822090",
    "end": "827695"
  },
  {
    "text": "So here is an overview of how that works for SMT. This an example where you have this German sentence that translates to,",
    "start": "827695",
    "end": "835750"
  },
  {
    "text": "'He does not go home', and you can see that there is some kind of phrase-to-phrase alignment here.",
    "start": "835750",
    "end": "842095"
  },
  {
    "text": "So, uh, an overview of how this decoding would work in SMT, is that you kind of consider lots of different hypotheses,",
    "start": "842095",
    "end": "850269"
  },
  {
    "text": "for how you might translate these individual words, uh, and then you build it up to consider how you might translate,",
    "start": "850270",
    "end": "858430"
  },
  {
    "text": "uh, individual phrases, and the phrases get bigger. So for example, you can see that on the top right,",
    "start": "858430",
    "end": "863740"
  },
  {
    "text": "if it's not too small, you can see that the, uh, the German word for house, uh, could be translated into the English word,",
    "start": "863740",
    "end": "869365"
  },
  {
    "text": "'house' or 'home', or 'chamber', and so on. Uh, so we consider all of these different hypotheses,",
    "start": "869365",
    "end": "874690"
  },
  {
    "text": "and look into how we might put those together to translate phrases but you don't keep all of them all the time.",
    "start": "874690",
    "end": "880390"
  },
  {
    "text": "You get rid of the ones that are too low probability. So this can also be depicted as a kind of a tree,",
    "start": "880390",
    "end": "886225"
  },
  {
    "text": "where you are exploring different options. You are searching through the space of options,",
    "start": "886225",
    "end": "891265"
  },
  {
    "text": "but then you prune the tree as you go. So I know this is a very, very high level, uh, description of how decoding might walk.",
    "start": "891265",
    "end": "897580"
  },
  {
    "text": "And in fact, later in this lecture, you're going to see a detailed explanation of how this kind of decoding works for neural machine translation.",
    "start": "897580",
    "end": "905970"
  },
  {
    "text": "Okay. So what's our, um, overview of statistical machine translation,",
    "start": "907320",
    "end": "912459"
  },
  {
    "text": "uh, was it effective? Uh, so SMT was a huge research field, uh, from the 1990s to about, maybe, uh, 2013.",
    "start": "912460",
    "end": "920425"
  },
  {
    "text": "And the best systems during this time were extremely complex. They were extremely sophisticated and impressive systems and, uh,",
    "start": "920425",
    "end": "926725"
  },
  {
    "text": "SMT made the best machine translation systems in the world. But they were very complex.",
    "start": "926725",
    "end": "931840"
  },
  {
    "text": "So for example, you know, there were hundreds of important details that we haven't mentioned here at all. There were many, many techniques to make it, uh,",
    "start": "931840",
    "end": "938740"
  },
  {
    "text": "more complex and more, um, sophisticated than what I've described today. In particular, the systems had to have many separately designed, uh, sub-components.",
    "start": "938740",
    "end": "948565"
  },
  {
    "text": "So we already saw how you, uh, break down the translation model into two separate parts. Uh, but there was, you know, many more sub-components than that,",
    "start": "948565",
    "end": "955645"
  },
  {
    "text": "and often they had to be learned separately. This meant the engineers had to do a lot of feature engineering.",
    "start": "955645",
    "end": "961795"
  },
  {
    "text": "Uh, you have to design features to capture the particular language phenomena that you were interested in.",
    "start": "961795",
    "end": "967225"
  },
  {
    "text": "So this meant that they had to require a lot of compiling and maintaining of extra resources,",
    "start": "967225",
    "end": "972865"
  },
  {
    "text": "and in fact, you had to have, uh, different resources for different languages. So the work kind of multiplied the more languages you had.",
    "start": "972865",
    "end": "979900"
  },
  {
    "text": "An example of this, is you had to have, uh, tables of equivalent phrases. So for example if you're doing French and English translation, then, uh,",
    "start": "979900",
    "end": "987175"
  },
  {
    "text": "they would be collecting these phrases of, uh, sorry these tables of phrases that they considered similar,",
    "start": "987175",
    "end": "992589"
  },
  {
    "text": "and those were learned from the data. But this was a lot of information that had to be stored and maintained. So overall, this was just a lot of human effort to maintain.",
    "start": "992590",
    "end": "1000930"
  },
  {
    "text": "Uh, and again, yes, you had to put more human effort in if you wanted to learn an SMT system for a new language pair.",
    "start": "1000930",
    "end": "1008490"
  },
  {
    "text": "Okay, are there any questions here about, uh, SMT? [NOISE] Okay.",
    "start": "1008490",
    "end": "1019290"
  },
  {
    "text": "Uh, so moving on, that's SMT. [NOISE] Now, we're gonna move on to, uh, section two of this lecture.",
    "start": "1019290",
    "end": "1024660"
  },
  {
    "text": "So I want to take you back to the year 2014,",
    "start": "1024660",
    "end": "1030030"
  },
  {
    "text": "for a dramatic re-enactment of what happened in the world of machine translation research.",
    "start": "1030030",
    "end": "1035414"
  },
  {
    "text": "So in 2014, something very dramatic happened and that thing that happened is called neural machine translation,",
    "start": "1035415",
    "end": "1040799"
  },
  {
    "text": "and [LAUGHTER] I think it looks a little bit like this [NOISE] if I'm not being too dramatic.",
    "start": "1040800",
    "end": "1045855"
  },
  {
    "text": "So what is neural machine translation? The idea is that NMT is a way to do",
    "start": "1045855",
    "end": "1051450"
  },
  {
    "start": "1048000",
    "end": "1254000"
  },
  {
    "text": "machine translation but using just a single neural network. [NOISE] And the neural network architecture that they use",
    "start": "1051450",
    "end": "1058115"
  },
  {
    "text": "is called Sequence-to-Sequence or sometimes just called seq2seq, uh, and involves two RNNs.",
    "start": "1058115",
    "end": "1064210"
  },
  {
    "text": "So, uh, it's called sequence-to-sequence, because you're mapping one sequence to the other. The source sentence [NOISE] to the target sentence and you need two RNNs,",
    "start": "1064210",
    "end": "1072000"
  },
  {
    "text": "basically to handle those two different sentences. All right, lets look at the diagram to see what sequences-to-sequence is in detail.",
    "start": "1072000",
    "end": "1079110"
  },
  {
    "text": "So we start off with our source sentence, and we're gonna use our example from before il a m'entarte, which means, he hit me with a pie.",
    "start": "1079110",
    "end": "1087300"
  },
  {
    "text": "So we, uh, feed this into our encoder RNN, and this is as you've seen before,",
    "start": "1087300",
    "end": "1092835"
  },
  {
    "text": "I've drawn a uni-directional RNN, but this could be bi-directional. It also could be multi-layer.",
    "start": "1092835",
    "end": "1099045"
  },
  {
    "text": "It could be vanilla, or it could be LSTM, and so on. Uh, another thing to note is that [NOISE] we are",
    "start": "1099045",
    "end": "1105570"
  },
  {
    "text": "passing word embeddings into this encoder RNN, but I'm just not explicitly depicting that step.",
    "start": "1105570",
    "end": "1111000"
  },
  {
    "text": "[NOISE] Okay. So the idea of the encoder RNN is that it's going to",
    "start": "1111000",
    "end": "1116430"
  },
  {
    "text": "produce some kind of encoding of this source sentence. So for now, let's assume that the encoding of the source sentence is going to be,",
    "start": "1116430",
    "end": "1123690"
  },
  {
    "text": "uh, the final hidden state of this encoder RNN. So what happens next is we pass this encoding of the source sentence.",
    "start": "1123690",
    "end": "1131700"
  },
  {
    "text": "We pass it over to the decoder RNN, which is going to translate into English. So the decoder RNN is a language model.",
    "start": "1131700",
    "end": "1139635"
  },
  {
    "text": "In particular, it's a conditional language model, like we talked about last time. So it's conditional because it's going to produce the target sentence,",
    "start": "1139635",
    "end": "1146429"
  },
  {
    "text": "but conditioned on this encoding, and the encoding is that vector that has the orange box around it.",
    "start": "1146430",
    "end": "1152445"
  },
  {
    "text": "So how does this work? Uh, we start off by feeding, uh, the start token into the decoder, and then, uh,",
    "start": "1152445",
    "end": "1160500"
  },
  {
    "text": "we can get the first state of the decoder, because we're using, uh, the encoding of the source sentence as the initial hidden state for the decoder.",
    "start": "1160500",
    "end": "1168745"
  },
  {
    "text": "So then we get our first output from the decoder, which is a probability distribution of what word might come next,",
    "start": "1168745",
    "end": "1174725"
  },
  {
    "text": "and let's suppose that we take the argmax over that, and then that gets us the word, uh, he. Which is in this case is correct,",
    "start": "1174725",
    "end": "1181070"
  },
  {
    "text": "because that's probably the word you should start with. Okay, so then we just take the word, he and then we feed it back into the decoder on the next step,",
    "start": "1181070",
    "end": "1188730"
  },
  {
    "text": "and then we do the same thing again. We take argmax and we get a new word and we get he hit.",
    "start": "1188730",
    "end": "1193965"
  },
  {
    "text": "So the idea here is you can co- uh, continue doing this operation and in that way, you're going to generate, uh,",
    "start": "1193965",
    "end": "1200220"
  },
  {
    "text": "your target sentence, uh, which will be something like he hit me with a pie, and you stop once your decoder produces the end token.",
    "start": "1200220",
    "end": "1209620"
  },
  {
    "text": "So an important thing to note here, is that this picture is showing you what happens at test time.",
    "start": "1209780",
    "end": "1216510"
  },
  {
    "text": "This shows you how to generate text. Uh, this isn't what happens during training. I'll show you what happens [NOISE] during training later.",
    "start": "1216510",
    "end": "1221955"
  },
  {
    "text": "Uh, but this thing with the, the pink dotted arrows where you feed the word back in. This is what you do to generate text at test time.",
    "start": "1221955",
    "end": "1229275"
  },
  {
    "text": "Any questions on this? Uh, oh,",
    "start": "1229275",
    "end": "1235365"
  },
  {
    "text": "another thing I should note is that you need two separate sets of word embeddings, right? You need word embeddings for French words, and you need English word embeddings,",
    "start": "1235365",
    "end": "1243360"
  },
  {
    "text": "so that's kind of two separate sets, two separate vocabularies. Um, yeah.",
    "start": "1243360",
    "end": "1248925"
  },
  {
    "text": "Okay. So as a side note, uh, this architecture called sequence-to-sequence is actually pretty versatile.",
    "start": "1248925",
    "end": "1254595"
  },
  {
    "start": "1254000",
    "end": "1676000"
  },
  {
    "text": "It's not just a machine translation architecture. Uh, you can, uh, uh, phrase quite a few NLP tasks as sequence-to-sequence tasks.",
    "start": "1254595",
    "end": "1263535"
  },
  {
    "text": "Uh, so for example a summarization is a sequence-to-sequence task because in goes your long text and out comes your short text.",
    "start": "1263535",
    "end": "1270120"
  },
  {
    "text": "Uh, dialogue can [NOISE] be seq2seq because in goes the previous utterance and out comes your next utterance, uh,",
    "start": "1270120",
    "end": "1275730"
  },
  {
    "text": "parsing can even be thought of as a sequence-to-sequence task, because you could say in goes the input text and",
    "start": "1275730",
    "end": "1281909"
  },
  {
    "text": "the output parse is going to be expressed as a sequence. This might not be the best way to do parsing but it is a way you can try.",
    "start": "1281910",
    "end": "1288030"
  },
  {
    "text": "Lastly, you could even do something like code generation. So suppose you want to build a system that takes some kind of,",
    "start": "1288030",
    "end": "1294150"
  },
  {
    "text": "uh, natural language input, such as sum up the numbers from 1-10 and then it outputs,",
    "start": "1294150",
    "end": "1299519"
  },
  {
    "text": "let's say some Python code that says, sum open brackets range 10 or something like that.",
    "start": "1299520",
    "end": "1304920"
  },
  {
    "text": "Uh, so if you wanted to train, um, an assistant to do this. You could in a way view that as a translation task,",
    "start": "1304920",
    "end": "1311655"
  },
  {
    "text": "where you're translating from English to Python. It's a pretty challenging translation task. It probably requires a lot more logic than just uh, you know,",
    "start": "1311655",
    "end": "1318510"
  },
  {
    "text": "French to English [NOISE] but you can try and people have tried. There are research papers where people have used seq2seq to do this kind of task.",
    "start": "1318510",
    "end": "1325930"
  },
  {
    "text": "Okay. So to recap, uh, seq2seq is an example of a conditional language model.",
    "start": "1329510",
    "end": "1334950"
  },
  {
    "text": "Uh, it's a language model because the decoder is a language model that's predicting the next target words.",
    "start": "1334950",
    "end": "1340904"
  },
  {
    "text": "But it's a conditional language model because it's also conditioning on your source sentence which is represented by the encoding of the source sentence.",
    "start": "1340905",
    "end": "1349390"
  },
  {
    "text": "So you could look, you could view it like this. NMT is directly calculating the probability",
    "start": "1350150",
    "end": "1356700"
  },
  {
    "text": "of the target sentence y given the source sentence x. So if you look at this, you see that this is just, uh,",
    "start": "1356700",
    "end": "1362445"
  },
  {
    "text": "breaking down the probability of the sequence y, which we suppose is of length, uh, capital T. You can break it down into the being the probability of",
    "start": "1362445",
    "end": "1370110"
  },
  {
    "text": "the first word of y given x and then the probability of the second word of y given, uh, the words that came before, and x, and so on.",
    "start": "1370110",
    "end": "1376920"
  },
  {
    "text": "So in fact, you can see that each of the terms in this product on the right, those are probabilities of the next target word",
    "start": "1376920",
    "end": "1382710"
  },
  {
    "text": "given all the ones so far, and also the source sentence, and that's exactly the conditional probability that your language model produces.",
    "start": "1382710",
    "end": "1389670"
  },
  {
    "text": "So the reason I'm highlighting this is because if you remember in SMT, uh, we didn't directly learn the translation model p of y given x,",
    "start": "1389670",
    "end": "1398190"
  },
  {
    "text": "we broke it down into, uh, uh, smaller components. Whereas here in NMT,",
    "start": "1398190",
    "end": "1403995"
  },
  {
    "text": "we are directly learning this model. And this is in some ways an advantage because it's simpler to do.",
    "start": "1403995",
    "end": "1409335"
  },
  {
    "text": "You don't have to learn all of these different systems and optimize them separately. It's, uh, kind of, simpler and easier.",
    "start": "1409335",
    "end": "1415720"
  },
  {
    "text": "So, uh, this is, this is the model that we're learning. Uh, the question is, how do we train this NMT system?",
    "start": "1416660",
    "end": "1423165"
  },
  {
    "text": "So hopefully, you should already have a good idea of how this would work, given that we've already seen how you would train a language model.",
    "start": "1423165",
    "end": "1429075"
  },
  {
    "text": "But here are the details just in case. So you get your big, uh, parallel corpus. Uh, and then, uh,",
    "start": "1429075",
    "end": "1435075"
  },
  {
    "text": "let's say you have your sentence pair from your parallel corpus. Uh, so this is what happens during training.",
    "start": "1435075",
    "end": "1441915"
  },
  {
    "text": "Uh, you feed your source sentence into the encoder RNN, uh, and then you feed your target sentence into the decoder RNN,",
    "start": "1441915",
    "end": "1449475"
  },
  {
    "text": "and you're going to pass over that final hidden state to be the initial hidden state of the decoder. And then, uh, for every step of the decoder RNN,",
    "start": "1449475",
    "end": "1458445"
  },
  {
    "text": "you're going to produce the, uh, probability distribution of what comes next, which is the, the y hats.",
    "start": "1458445",
    "end": "1463905"
  },
  {
    "text": "And then from those, you can compute your loss. And the loss is just the same as we saw for,",
    "start": "1463905",
    "end": "1469410"
  },
  {
    "text": "u h, unconditional language models. It's, uh, the cross entropy or you could also say negative log-likelihood of the true next word.",
    "start": "1469410",
    "end": "1477330"
  },
  {
    "text": "So for example, on those selected ones, uh, the loss is the negative log probability of the correct next word.",
    "start": "1477330",
    "end": "1484335"
  },
  {
    "text": "And then as before, we're going to average all of these losses to get the total loss for the example.",
    "start": "1484335",
    "end": "1490995"
  },
  {
    "text": "Uh, so a thing you might notice people saying in, for example, research papers is this phrase end-to-end.",
    "start": "1490995",
    "end": "1498769"
  },
  {
    "text": "And this is an example of learning a system end-to-end. And what we mean by this is that the backpropagation is happening end-to-end, one end is,",
    "start": "1498770",
    "end": "1507275"
  },
  {
    "text": "is losses, the loss functions, and the other end I guess is kind of like the, the beginning of the encoder RNN.",
    "start": "1507275",
    "end": "1512930"
  },
  {
    "text": "The point is that you, uh, backpropagation, uh, flows throughout the entire system,",
    "start": "1512930",
    "end": "1518045"
  },
  {
    "text": "and you learn the entire system with respect to this single, uh, loss. Yep?",
    "start": "1518045",
    "end": "1523280"
  },
  {
    "text": "[inaudible] The question is,",
    "start": "1523280",
    "end": "1536280"
  },
  {
    "text": "if the decoder RNN outputs the end token too early, then how can you measure the loss on,",
    "start": "1536280",
    "end": "1543840"
  },
  {
    "text": "uh, the words that came after that? So this is the difference between training time and test time,",
    "start": "1543840",
    "end": "1548850"
  },
  {
    "text": "which is pretty confusing. So, uh, during training, we have this picture where you feed the token back in.",
    "start": "1548850",
    "end": "1555990"
  },
  {
    "text": "So in this scenario, once you produce end, then you have to stop because you can't feed end in as the initial next step.",
    "start": "1555990",
    "end": "1562080"
  },
  {
    "text": "But in training, you don't feed the thing that you produced into the next step. During training, you feed the target sentence from the corpus.",
    "start": "1562080",
    "end": "1571080"
  },
  {
    "text": "So like the gold target sentence into the model. So no matter what the, uh,",
    "start": "1571080",
    "end": "1576750"
  },
  {
    "text": "the decoder predicts on a step, you kind of, you don't use that for anything other than computing loss.",
    "start": "1576750",
    "end": "1583780"
  },
  {
    "text": "Any other questions? Yeah. Is there a reason why you would, uh, backpropagation end-to-end instead of maybe",
    "start": "1584150",
    "end": "1591405"
  },
  {
    "text": "training an encoder like [inaudible] model and then [inaudible] together?",
    "start": "1591405",
    "end": "1597720"
  },
  {
    "text": "The question is, is there a reason why you would want to train end-to-end when, for example, you might want to train the encoder and the decoder separately?",
    "start": "1597720",
    "end": "1605205"
  },
  {
    "text": "Uh, so I think, uh, people view training end-to-end as favorable because the idea is that you can optimize the system as a whole.",
    "start": "1605205",
    "end": "1612000"
  },
  {
    "text": "You might think that if you optimize the part separately, then when you put them together, they will not be optimal together necessarily.",
    "start": "1612000",
    "end": "1618090"
  },
  {
    "text": "So if possible, directly optimizing the thing that you care abou- about with respect to all of the parameters is more likely to succeed.",
    "start": "1618090",
    "end": "1625110"
  },
  {
    "text": "However, there is a notion of pre-training. And as you said, maybe you'd want to learn your, um, decoder RNN as a kind of a language model,",
    "start": "1625110",
    "end": "1633570"
  },
  {
    "text": "an unconditional language model by itself. And that's something that people do. You might, uh, learn a very strong language model,",
    "start": "1633570",
    "end": "1639644"
  },
  {
    "text": "and then use that to initialize your decoder RNN, and then fine-tune it on your task. That's a, a valid thing you might try to do.",
    "start": "1639645",
    "end": "1647430"
  },
  {
    "text": "Yep. Are you always [inaudible]",
    "start": "1647430",
    "end": "1657990"
  },
  {
    "text": "The question is, is the length of the source sentence and the length of the target sentence fixed? So for example, is the source sentence always length 4?",
    "start": "1657990",
    "end": "1664530"
  },
  {
    "text": "Uh, no. That's definitely not true because in your parallel corpus, you're going to have sentences of all lengths.",
    "start": "1664530",
    "end": "1670125"
  },
  {
    "text": "Uh, so this is more kind of an implementation or a practicality question. Uh, the idea is that this is what you mathematically want",
    "start": "1670125",
    "end": "1676620"
  },
  {
    "start": "1676000",
    "end": "1925000"
  },
  {
    "text": "to be computing during training for each example, and you're going to have batches of examples. But the question is, how do you actually implement them in, uh, in practice?",
    "start": "1676620",
    "end": "1684900"
  },
  {
    "text": "So what you usually do just because it's easier to assume that your batch is this kind of even-sized tensor where everything is the same length,",
    "start": "1684900",
    "end": "1692535"
  },
  {
    "text": "is you pad any short sentences up to some predefined maximum length, or maybe the length of the maximum example in your batch, uh,",
    "start": "1692535",
    "end": "1701220"
  },
  {
    "text": "and then you make sure that you don't use any hidden states that came from the padding. Yep.",
    "start": "1701220",
    "end": "1707420"
  },
  {
    "text": "I believe two languages together [inaudible]",
    "start": "1707420",
    "end": "1717210"
  },
  {
    "text": "possible to have a system [inaudible] that will be kind of universal with similar languages or something like that?",
    "start": "1717210",
    "end": "1728730"
  },
  {
    "text": "Okay. So the question I think is, uh, it seems like sometimes you wouldn't want to train things end-to-end,",
    "start": "1728730",
    "end": "1734820"
  },
  {
    "text": "and there are circumstances in which you might want to train things separately, and you mentioned, for example, having, uh, different languages mapped to each other.",
    "start": "1734820",
    "end": "1741825"
  },
  {
    "text": "So this is a totally valid point, and in fact, uh, so far we've, kind of, assumed that you want to learn language A to language B as a pair, right?",
    "start": "1741825",
    "end": "1749430"
  },
  {
    "text": "And that's different to language A to language C or even language B to language A. And, um, that does mean you have kind of n-squared many systems in the number of,",
    "start": "1749430",
    "end": "1757350"
  },
  {
    "text": "uh, languages you're considering. So, yeah, that's actually a valid idea, and this is something that people have researched.",
    "start": "1757350",
    "end": "1762539"
  },
  {
    "text": "The idea that maybe you could have a, kind of, mix and match with your encoders and decoders. And you could try to, uh, train a kind of general purpose,",
    "start": "1762540",
    "end": "1769919"
  },
  {
    "text": "let's say English decoder and then match it up with your different encoders. Uh, but this is, I think fairly complex to train to,",
    "start": "1769920",
    "end": "1777315"
  },
  {
    "text": "to make sure that they all work together. But that, that is certainly something that people have done. Let me just check on the time.",
    "start": "1777315",
    "end": "1783850"
  },
  {
    "text": "Okay. Let's take one more question. Yep. So does the word embedding also come from the same corpus that we are training on?",
    "start": "1783890",
    "end": "1793299"
  },
  {
    "text": "The question is, does the word embedding also come from the corpus that you're training on? So I think there's a few options just as we saw with language models; you could download,",
    "start": "1793340",
    "end": "1802109"
  },
  {
    "text": "uh, pretrained word vectors like Word2Vec or GloVe, and you could use those. And then you can either, kind of, freeze them or you could",
    "start": "1802109",
    "end": "1808410"
  },
  {
    "text": "fine-tune them as part of the end-to-end training, or you could just initialize your word vectors as,",
    "start": "1808410",
    "end": "1813539"
  },
  {
    "text": "uh, you know, close to zero random and then learn them from scratch. All right. Okay, moving on.",
    "start": "1813540",
    "end": "1819585"
  },
  {
    "text": "Uh, so now we understand how you would train a neural machine translation system.",
    "start": "1819585",
    "end": "1824669"
  },
  {
    "text": "And we talked briefly about how you might, uh, do decoding or generation. So what I showed you before is something called, uh, greedy decoding,",
    "start": "1824670",
    "end": "1832020"
  },
  {
    "text": "which is this idea that on each step, you just choose the argmax, the top one best word, and then you feed that in on the next step.",
    "start": "1832020",
    "end": "1838755"
  },
  {
    "text": "So this is called greedy decoding because you're just taking the best, uh, the best option that you can see right now,",
    "start": "1838755",
    "end": "1844815"
  },
  {
    "text": "and then you really don't have a way to go back. So can anyone see a problem with this method? Maybe I've kind of given it away but, uh, yeah.",
    "start": "1844815",
    "end": "1852330"
  },
  {
    "text": "[inaudible].",
    "start": "1852330",
    "end": "1859664"
  },
  {
    "text": "You said too expensive. Um, I guess I mean it is expensive in that you have to do a sequence and the sequence is usually worse than something you can do in parallel.",
    "start": "1859665",
    "end": "1867450"
  },
  {
    "text": "But I suppose, um, maybe what's wrong with the greediness? Can anyone suggest what's wrong with the greediness, yeah? [inaudible] [NOISE] That's not",
    "start": "1867450",
    "end": "1879210"
  },
  {
    "text": "necessarily gonna give you the argmax over the entire sentence. That's exactly right. That's, uh, kind of what, uh, what greediness means.",
    "start": "1879210",
    "end": "1886080"
  },
  {
    "text": "So in practice, this might give you something like this. Uh, we're trying to translate our running example sentence and let's suppose on the first step we say,",
    "start": "1886080",
    "end": "1894000"
  },
  {
    "text": "\"He,\" and then we say, \"He hit,\" and then we say, \"He hit a,\" oh no, that wasn't right.",
    "start": "1894000",
    "end": "1899190"
  },
  {
    "text": "That wasn't the best thing to choose but we kinda have no way to go back now, right. We just have to continue and try to make the best of it after saying,",
    "start": "1899190",
    "end": "1905430"
  },
  {
    "text": "\"He hit a,\" which isn't gonna work out well. So that's the main problem with greedy decoding.",
    "start": "1905430",
    "end": "1910920"
  },
  {
    "text": "There's kind of no way to backtrack, no way to go back. So how can we fix this?",
    "start": "1910920",
    "end": "1916289"
  },
  {
    "text": "And this relates back to, uh, what I told you earlier about how we might use, uh, a kind of searching algorithm to do decoding and SMT.",
    "start": "1916290",
    "end": "1924220"
  },
  {
    "text": "Uh, but first, you might, uh, think exhaustive search is a good idea.",
    "start": "1924310",
    "end": "1929990"
  },
  {
    "start": "1925000",
    "end": "2114000"
  },
  {
    "text": "Well, probably not because it's still a bad idea for the same reasons as before. So if you did want to do exhaustive search, and search through the space of all possible French translations, uh,",
    "start": "1929990",
    "end": "1938615"
  },
  {
    "text": "then you would be again, trying to consider which Y maximizes, uh, this product of all of these individual probability distributions.",
    "start": "1938615",
    "end": "1946885"
  },
  {
    "text": "So as before, if you try to do this, uh, then on each step T of the decoder,",
    "start": "1946885",
    "end": "1952229"
  },
  {
    "text": "you're gonna be having to track V to the power of T possible partial translations,",
    "start": "1952229",
    "end": "1957750"
  },
  {
    "text": "uh, where V is your vocabulary size. So here when I say partial translation, I just mean, uh, a kinda,",
    "start": "1957750",
    "end": "1963435"
  },
  {
    "text": "you know, like, half of a sentence so far, or something like that. So, of course, this, uh,",
    "start": "1963435",
    "end": "1968850"
  },
  {
    "text": "exponential in V complexity is just far too expensive. So yes, we're gonna use some kind of search algorithm,",
    "start": "1968850",
    "end": "1974790"
  },
  {
    "text": "and in particular, we're gonna use a beam search decoding. So the core idea of beam search decoding is that on each step of the decoder,",
    "start": "1974790",
    "end": "1983549"
  },
  {
    "text": "you're gonna be keeping track of the K most probable partial translations, and we call partial translations hypotheses,",
    "start": "1983550",
    "end": "1990975"
  },
  {
    "text": "because we're kind of tracking multiple of them and we're not sure which one is best. So we're thinking about several.",
    "start": "1990975",
    "end": "1996550"
  },
  {
    "text": "Here K is an integer and we call this the beam size, and in practice for NMT this is usually maybe 5-10.",
    "start": "1996550",
    "end": "2005095"
  },
  {
    "text": "So you can think of, uh, K kind of as how big is your search space at any one time.",
    "start": "2005095",
    "end": "2010330"
  },
  {
    "text": "So if you increase K, then you're going to be considering more different options on each step and you might hope that this will mean that you get",
    "start": "2010330",
    "end": "2016809"
  },
  {
    "text": "the best quality solution in the end though of course it'll be more expensive. So I said that we want to keep track of",
    "start": "2016810",
    "end": "2024010"
  },
  {
    "text": "the K most probable partial translations, that is, hypotheses. So this means that we need some kind of notion of, you know,",
    "start": "2024010",
    "end": "2030205"
  },
  {
    "text": "how probable is this hypothesis or what's its score. So the score of a hypothesis and, uh,",
    "start": "2030205",
    "end": "2036065"
  },
  {
    "text": "we're representing that as Y_1 up to Y_T, um, is just its log probability.",
    "start": "2036065",
    "end": "2042995"
  },
  {
    "text": "So, uh, the log probability of this partial translation, uh, according to the language model can be broken down as we saw before into the sum of",
    "start": "2042995",
    "end": "2051200"
  },
  {
    "text": "the individual log probabilities of the words given everything that came before.",
    "start": "2051200",
    "end": "2056220"
  },
  {
    "text": "So it's, if it's not obvious, uh, these scores are all negative because we're taking log of,",
    "start": "2056920",
    "end": "2062089"
  },
  {
    "text": "uh, of a number between 0 and 1. Uh, and a higher score is better.",
    "start": "2062090",
    "end": "2069230"
  },
  {
    "text": "Yes, because you want a higher probability of, uh, of the hypothesis according to the language model.",
    "start": "2069230",
    "end": "2077465"
  },
  {
    "text": "So the idea is that we're gonna use this score, uh, and the search algorithm to search for high-scoring hypotheses and we're gonna track the top K on each step.",
    "start": "2077465",
    "end": "2086254"
  },
  {
    "text": "So I'm gonna show you a detailed example in a moment, but the important thing is to know that beam search is not guaranteed to find an optimal solution.",
    "start": "2086255",
    "end": "2094909"
  },
  {
    "text": "Uh, exhaustive search, the one where you enumerate, enumerate all V to the T possible translations, that is guaranteed to find",
    "start": "2094910",
    "end": "2100819"
  },
  {
    "text": "the optimal solution but it is just completely infeasible because it's so expensive. So beam search is not guaranteed to find the optimal solution,",
    "start": "2100820",
    "end": "2108080"
  },
  {
    "text": "but it is much more efficient than exhaustive search of course. Okay. So, um, here's an example of beam search decoding in action.",
    "start": "2108080",
    "end": "2116945"
  },
  {
    "start": "2114000",
    "end": "2270000"
  },
  {
    "text": "Uh, so let's suppose the beam size equals K, uh, is 2 and then as a reminder, we have, uh,",
    "start": "2116945",
    "end": "2122795"
  },
  {
    "text": "this is the score that you apply to a partial, uh, hypothesis, uh, a partial translation,",
    "start": "2122795",
    "end": "2128539"
  },
  {
    "text": "which is a hypothesis. So we start off with our starting token, and the idea is that we're going to compute",
    "start": "2128540",
    "end": "2134570"
  },
  {
    "text": "the probability distribution of what word might come next. So having computed that probability distribution using our seq2seq model,",
    "start": "2134570",
    "end": "2141880"
  },
  {
    "text": "then we just take the top K, that is top two possible options. So let's suppose that the top two are the words \"He\" and \"I\".",
    "start": "2141880",
    "end": "2148695"
  },
  {
    "text": "So the idea is that we can compute the score of these two hypotheses, uh, by using the formula above.",
    "start": "2148695",
    "end": "2155540"
  },
  {
    "text": "It's just the log probability of this word given the context so far. So here, let's say that \"He\" has a score of -0.7 and \"I\" has a score of -0.9.",
    "start": "2155540",
    "end": "2165125"
  },
  {
    "text": "So this means that he is currently the best one. Okay. So what we do is, uh, we have our two, uh, K hypotheses,",
    "start": "2165125",
    "end": "2172654"
  },
  {
    "text": "and then for each of those, we find the top K words that could come next.",
    "start": "2172655",
    "end": "2178160"
  },
  {
    "text": "And we calculate their scores. So this means that for both \"He\" and \"I\" we find the top two words that could come next.",
    "start": "2178160",
    "end": "2184055"
  },
  {
    "text": "And for each of these four possibilities, uh, the score of the hypothesis is equal to, uh,",
    "start": "2184055",
    "end": "2189395"
  },
  {
    "text": "the log probability of this new word given the context so far plus the score so far because you can accumulate the sum of low probabilities.",
    "start": "2189395",
    "end": "2196820"
  },
  {
    "text": "You don't have to compute it from scratch each time. So here you can see that we have these four possibilities and that",
    "start": "2196820",
    "end": "2204349"
  },
  {
    "text": "the top two scores are -1.6 and -1.7. So this means that hit and was are the two best ones.",
    "start": "2204350",
    "end": "2212180"
  },
  {
    "text": "So the idea is that of these K squared equals 4 hypotheses, we're just gonna keep the K equals 2 top ones.",
    "start": "2212180",
    "end": "2218795"
  },
  {
    "text": "And then we just keep doing the same thing. For these two, we expand to get the two next ones.",
    "start": "2218795",
    "end": "2223955"
  },
  {
    "text": "And then of those we compute the scores, and then we keep the two best ones and discard the others and then of those, we expand.",
    "start": "2223955",
    "end": "2231905"
  },
  {
    "text": "So we keep doing this again and again, expanding and then just keeping the top K and expanding like this until,",
    "start": "2231905",
    "end": "2238700"
  },
  {
    "text": "uh, you get some kinda, uh, finished translation. I'm going to tell you more in a moment about what exactly the stopping criterion is.",
    "start": "2238700",
    "end": "2245569"
  },
  {
    "text": "But let's suppose that we stop here. Uh, looking at the four hypotheses that we have on the far right,",
    "start": "2245570",
    "end": "2251150"
  },
  {
    "text": "the one with the top score is, uh, the top pie one with -4.3.",
    "start": "2251150",
    "end": "2256265"
  },
  {
    "text": "So let's suppose that we are gonna stop now when we decide that this is the top hypothesis, then all we need to do is just backtrack",
    "start": "2256265",
    "end": "2262340"
  },
  {
    "text": "through this tree in order to find the full translation, which is \"He hit me with the pie.\"",
    "start": "2262340",
    "end": "2268790"
  },
  {
    "text": "All right. So, um, let me tell you more detail about how exactly we decide when to stop. So if you remember in greedy decoding,",
    "start": "2268790",
    "end": "2275524"
  },
  {
    "start": "2270000",
    "end": "2365000"
  },
  {
    "text": "usually we just keep decoding until the model produces the END token. So for example, this means that your model is actually producing the sequence, uh,",
    "start": "2275524",
    "end": "2283460"
  },
  {
    "text": "I guess it doesn't produce START, you give it START but then it produces the sequence \"He hit me with a pie\" END.",
    "start": "2283460",
    "end": "2289265"
  },
  {
    "text": "So the problem in beam search decoding is that you're considering all these different hypotheses,",
    "start": "2289265",
    "end": "2294920"
  },
  {
    "text": "K different hypotheses at once and the thing is those hypotheses might produce END tokens at different times.",
    "start": "2294920",
    "end": "2301250"
  },
  {
    "text": "So there's no one obvious place to stop. So what we do in practice, is when a hypothesis produces the END token,",
    "start": "2301250",
    "end": "2308509"
  },
  {
    "text": "then we regard this hypothesis as complete and we kind of place it aside. We have a collection of completed hypothesis.",
    "start": "2308510",
    "end": "2315425"
  },
  {
    "text": "So we kind of take it out of beam search, we no longer keep exploring it because it's finished, uh, and we, yeah, place it aside.",
    "start": "2315425",
    "end": "2321800"
  },
  {
    "text": "And you continue exploring other hypotheses with beam search. So the remaining question is when do you stop doing beam search?",
    "start": "2321800",
    "end": "2329120"
  },
  {
    "text": "When do you stop iterating through this algorithm? So there's, uh, uh, multiple possible stopping criterion",
    "start": "2329120",
    "end": "2335105"
  },
  {
    "text": "but two common ones are you might say, uh, we're gonna stop doing beam search once we reach time step T,",
    "start": "2335105",
    "end": "2341150"
  },
  {
    "text": "where T is some, uh, predefined threshold that you choose. So you might say, uh, we're gonna stop beam search after 30 steps because we don't want",
    "start": "2341150",
    "end": "2348380"
  },
  {
    "text": "any output sentences that are longer than 30 words for example, or you might say, \"Uh, we're gonna stop doing beam search once we've collected at least N completed hypotheses.\"",
    "start": "2348380",
    "end": "2357410"
  },
  {
    "text": "So you might say, \"Uh, I want at least 10 complete translations before I stop doing beam search.\"",
    "start": "2357410",
    "end": "2363510"
  },
  {
    "text": "Okay. So what's the final thing you have to do? Uh, we finished doing beam search, um, we have this collection of completed hypotheses.",
    "start": "2364510",
    "end": "2372350"
  },
  {
    "start": "2365000",
    "end": "2681000"
  },
  {
    "text": "Uh, we want to choose the top one. Uh, the one that we're going to use is our translation. So, uh, how do we select the top one that has the highest score?",
    "start": "2372350",
    "end": "2381380"
  },
  {
    "text": "Uh, you might think this is simple given that all of these hypotheses already have scores attached. But if we just look at this, uh,",
    "start": "2381380",
    "end": "2387440"
  },
  {
    "text": "formula again, uh, for what the score is of each hypothesis. Uh, can anyone see a problem with this?",
    "start": "2387440",
    "end": "2395120"
  },
  {
    "text": "If we have our sets of hypotheses, and then we're choosing the top one based on the one that has the best score, can anyone see a problem?",
    "start": "2395120",
    "end": "2402750"
  },
  {
    "text": "Yeah. [NOISE] So the answer was you're gonna end up choosing the shortest one. The problem here is that longer hypotheses have lower scores in",
    "start": "2405130",
    "end": "2413630"
  },
  {
    "text": "general because you're multiplying more probabilities so you're getting a smaller, a smaller overall value or I guess if we're adding",
    "start": "2413630",
    "end": "2420440"
  },
  {
    "text": "low probabilities we're gonna get more negative values. So it's not quite that you will definitely choose the shortest hypothesis because if you could overall have,",
    "start": "2420440",
    "end": "2428690"
  },
  {
    "text": "uh, a lower score but there's definitely going to be a bias towards shorter translations, uh, because they'll in general have lower scores.",
    "start": "2428690",
    "end": "2435995"
  },
  {
    "text": "So the way you can fix this is pretty simple, you just normalize by length. So instead of using the tools we have above, you're going to use, uh,",
    "start": "2435995",
    "end": "2443720"
  },
  {
    "text": "the score divided by [inaudible]. And then you use this to select the top one.",
    "start": "2443720",
    "end": "2451010"
  },
  {
    "text": "Any questions on this? [NOISE].",
    "start": "2451010",
    "end": "2460235"
  },
  {
    "text": "Yeah. Can we train with the END token so that it is possible to [inaudible]",
    "start": "2460235",
    "end": "2466970"
  },
  {
    "text": "I didn't quite hear that, can you train with the END token? Yeah, like we had an END token.",
    "start": "2466970",
    "end": "2472230"
  },
  {
    "text": "Yes. So you train with the END token, if that's your question. Um, because the whole point is you're relying on your language model,",
    "start": "2472690",
    "end": "2479930"
  },
  {
    "text": "your decoder to produce the END token in order to know when to stop. So you need to train it to produce the END token by giving it examples of",
    "start": "2479930",
    "end": "2487370"
  },
  {
    "text": "training sentences with END tokens. Yeah.",
    "start": "2487370",
    "end": "2493490"
  },
  {
    "text": "Why don't we use this score being changed [inaudible] Great question. The question is,",
    "start": "2493490",
    "end": "2498650"
  },
  {
    "text": "why don't we use this normalized score, the one at the bottom of the screen during beam search in the first place? So the reason why that's not necessary,",
    "start": "2498650",
    "end": "2505204"
  },
  {
    "text": "you could, but it's not necessary, is because during beam search, we only ever compare the scores of hypotheses that have the same length, right?",
    "start": "2505205",
    "end": "2514100"
  },
  {
    "text": "So in each of these steps, the way we look at, let's say the top k squared and we want to choose which ones are the top k,",
    "start": "2514100",
    "end": "2520040"
  },
  {
    "text": "we're comparing the scores of four different hypotheses that are of length, one, two, three, four, five.",
    "start": "2520040",
    "end": "2525755"
  },
  {
    "text": "So, um, it's true that these scores are getting lower and lower, but in the same way because they're all length five right now.",
    "start": "2525755",
    "end": "2532760"
  },
  {
    "text": "[NOISE] Okay.",
    "start": "2532760",
    "end": "2539095"
  },
  {
    "text": "So we now understand how you would train an NMT system and how would you- you would use your trained NMT system to generate your translations using,",
    "start": "2539095",
    "end": "2547900"
  },
  {
    "text": "let's say, beam search. So let's all take a step back and think about, what are the overall advantages of NMT in comparison to SMT?",
    "start": "2547900",
    "end": "2556730"
  },
  {
    "text": "Uh, so the first advantage is just better performance. Uh, NMT systems tend to give better output than SMT systems in several ways.",
    "start": "2556730",
    "end": "2565715"
  },
  {
    "text": "One is that the output often tends to be more fluent. Uh, this is probably because NMT, uh,",
    "start": "2565715",
    "end": "2571325"
  },
  {
    "text": "this is probably because RNNs are particularly good at learning language models as you learned last week. Uh, another way that they're better is they often use,",
    "start": "2571325",
    "end": "2578509"
  },
  {
    "text": "uh, the context better, that is, uh, they're better at conditioning on the source sentence and using that to change the output.",
    "start": "2578510",
    "end": "2585935"
  },
  {
    "text": "Another way they're better is they often, uh, are more able to generalize what they learn about phrases and how to translate them.",
    "start": "2585935",
    "end": "2593795"
  },
  {
    "text": "So for example, if it sees an example of how to translate a certain source phrase and then later it sees a slightly different version of that source phrase,",
    "start": "2593795",
    "end": "2601849"
  },
  {
    "text": "it's, uh, more able to generalize what it learned about the first phrase than SMT systems will.",
    "start": "2601850",
    "end": "2608040"
  },
  {
    "text": "Another big advantage of NMT systems compared to SMT that we talked about before is that it's a single neural network that can be optimized end-to-end.",
    "start": "2608950",
    "end": "2617505"
  },
  {
    "text": "And the- the advantage here I suppose is primarily simplicity and convenience.",
    "start": "2617505",
    "end": "2622490"
  },
  {
    "text": "So there's no subcomponents that need to be individually optimized. Another big advantage is that it requires much less human engineering efforts.",
    "start": "2622620",
    "end": "2632030"
  },
  {
    "text": "When I told you earlier about all the different things that people had to do to build, uh, big, uh, powerful SMT systems, uh,",
    "start": "2632030",
    "end": "2638765"
  },
  {
    "text": "there's relatively less engineering effort for NMT. And NMT is certainly not easy, but it's- is less complicated than SMT.",
    "start": "2638765",
    "end": "2645485"
  },
  {
    "text": "In particular, there's no feature engineering. You don't have to define what features of, uh, linguistic phenomena that you want to capture.",
    "start": "2645485",
    "end": "2652520"
  },
  {
    "text": "You can mostly just view it as a sequence of words although, uh, there are different views on that.",
    "start": "2652520",
    "end": "2658530"
  },
  {
    "text": "Uh, lastly, a great thing about NMT is that you can use pretty much the same method for all language pairs.",
    "start": "2659500",
    "end": "2666005"
  },
  {
    "text": "So if you've, uh, you know, built your French-to-English translation system and now you want to build a Spanish-to-English one, [NOISE] uh,",
    "start": "2666005",
    "end": "2671075"
  },
  {
    "text": "you can probably use basically the same architecture and the same method as long as you can go find a big enough parallel corpus of Spanish-to-English.",
    "start": "2671075",
    "end": "2678720"
  },
  {
    "text": "All right. So what are the disadvantages of NMT, uh, remaining? So compared to SMT,",
    "start": "2678880",
    "end": "2684560"
  },
  {
    "start": "2681000",
    "end": "2812000"
  },
  {
    "text": "there are some disadvantages. One is that NMT is less interpretable. Uh, what I mean by this is you",
    "start": "2684560",
    "end": "2691670"
  },
  {
    "text": "feed in your source sentence into the neural network and then it feeds out some target sentence and you didn't",
    "start": "2691670",
    "end": "2697310"
  },
  {
    "text": "really have any way to figure out why that happened, right? So in particular, if the target sentence con- contains some kind of error,",
    "start": "2697310",
    "end": "2703430"
  },
  {
    "text": "um, you can't really look at the neurons and understand what happened. It's pretty hard to attribute errors.",
    "start": "2703430",
    "end": "2708800"
  },
  {
    "text": "So this means that, uh, NMT systems are pretty hard to debug. So by comparison, SMT systems were more",
    "start": "2708800",
    "end": "2715850"
  },
  {
    "text": "interpretable in that you had all of these different sub-components that were doing different jobs. And, uh, you were more able to look at those.",
    "start": "2715850",
    "end": "2722600"
  },
  {
    "text": "They weren't, you know, neurons often would be, uh, you know, probabilities of certain words given other words and so on.",
    "start": "2722600",
    "end": "2727880"
  },
  {
    "text": "And, you know, that's by no means easy to interpret but it was at least more interpretable than NMT.",
    "start": "2727880",
    "end": "2733295"
  },
  {
    "text": "Uh, another disadvantage is NMT is pretty difficult to control.",
    "start": "2733295",
    "end": "2738349"
  },
  {
    "text": "So, uh, for example, if your NMT system is, uh, doing a particular error,",
    "start": "2738350",
    "end": "2743990"
  },
  {
    "text": "it's not very easy for you, the, uh, programmer to specify some kind of rule or guideline that you want the NMT system to follow.",
    "start": "2743990",
    "end": "2751280"
  },
  {
    "text": "So for example, if you want to say, I want to always translate this word in this way.",
    "start": "2751280",
    "end": "2756380"
  },
  {
    "text": "Um, when- when this other thing is present, like that's not particularly easy to, uh,",
    "start": "2756380",
    "end": "2762725"
  },
  {
    "text": "to impose as a rule on the NMT system, uh, because you can't, uh, easily control what it's doing on a step-by-step basis.",
    "start": "2762725",
    "end": "2770540"
  },
  {
    "text": "So sometimes you have some kind of, uh, post-processing rules you might try to do, but overall you can't.",
    "start": "2770540",
    "end": "2776255"
  },
  {
    "text": "It- it's- it's harder than you'd expect to try to, um, impose a fairly simple form.",
    "start": "2776255",
    "end": "2782870"
  },
  {
    "text": "[NOISE] So this means it has some kind of safety concerns in fact. Because, uh, let's say, you know, you don't want your NMT system to say bad things, right?",
    "start": "2782870",
    "end": "2789650"
  },
  {
    "text": "It's- it's pretty hard to actually put, um, these, uh, controls in place to stop it from saying these things that you don't want it to say.",
    "start": "2789650",
    "end": "2796744"
  },
  {
    "text": "I mean, on the level of maybe just never saying particular bad words, then sure you can remove them from the vocabulary.",
    "start": "2796745",
    "end": "2801815"
  },
  {
    "text": "But overall they're pretty hard to control, and we're actually gonna see some examples of NMT systems being,",
    "start": "2801815",
    "end": "2807634"
  },
  {
    "text": "you know, doing things that their uh, designers certainly didn't intend. Okay. So, uh, how do we evaluate MT?",
    "start": "2807635",
    "end": "2817250"
  },
  {
    "start": "2812000",
    "end": "3032000"
  },
  {
    "text": "Uh, every good NLP task needs to have an automatic metric so that we can, uh, measure our progress.",
    "start": "2817250",
    "end": "2822395"
  },
  {
    "text": "So the, uh, most commonly used evaluation metric for MT is called BLEU and that stands for Bilingual Evaluation Understudy.",
    "start": "2822395",
    "end": "2830240"
  },
  {
    "text": "So the main idea is that BLEU is gonna compare the translation that's produced by your machine translation system.",
    "start": "2830240",
    "end": "2837575"
  },
  {
    "text": "It's gonna compare that to one or maybe several human written translations of the same sentence.",
    "start": "2837575",
    "end": "2842885"
  },
  {
    "text": "And then it's gonna compute a similarity score that's based on n-gram precision. So when I say n-gram precision,",
    "start": "2842885",
    "end": "2849545"
  },
  {
    "text": "I mean you're gonna look at all the one, two, three, and four grams that appear in your, uh, machine written translation and your human written translation.",
    "start": "2849545",
    "end": "2857345"
  },
  {
    "text": "And then n-gram precision is basically saying, for all of the n-grams that appeared in the machine-written translation,",
    "start": "2857345",
    "end": "2862895"
  },
  {
    "text": "how many of those appeared in, you know, at least one of the human-written translations?",
    "start": "2862895",
    "end": "2868460"
  },
  {
    "text": "Another thing that you need to add to BLEU is a brevity penalty. Uh, so you're saying that you get a lower BLEU score if",
    "start": "2868460",
    "end": "2876049"
  },
  {
    "text": "your system translation is significantly shorter than all of the human-written translations. And the reason why you need to add this is because",
    "start": "2876050",
    "end": "2883610"
  },
  {
    "text": "n-gram precision alone doesn't [NOISE] really punish using, uh, fewer words. So you might try to maximize n-gram precision by being very conservative and writing,",
    "start": "2883610",
    "end": "2892640"
  },
  {
    "text": "uh, short sentences that only contain words that you're really sure about, and then you get a good precision score. But this doesn't make a good translation because you're probably missing a bunch of",
    "start": "2892640",
    "end": "2900260"
  },
  {
    "text": "information that you needed to translate from the source sentence. So that's why you need to add the brevity, uh, penalty.",
    "start": "2900260",
    "end": "2906260"
  },
  {
    "text": "So overall, um, BLEU is very useful because, uh, we need an automatic metric in order to, uh, measure progress,",
    "start": "2906260",
    "end": "2914180"
  },
  {
    "text": "you can't measure progress on human evaluation alone because it takes too long [NOISE] to compute. Um, but of course it's pretty and perfect.",
    "start": "2914180",
    "end": "2921470"
  },
  {
    "text": "So for example, you can think about how there are many ways- many valid ways to translate a sentence.",
    "start": "2921470",
    "end": "2927170"
  },
  {
    "text": "At the very beginning of this lecture, I asked how do we translate that sentence, uh, by Rousseau and there were at least a few different options that came up.",
    "start": "2927170",
    "end": "2934025"
  },
  {
    "text": "Uh, so if there's many valid ways to translate a sentence, how does BLEU recognize that?",
    "start": "2934025",
    "end": "2939575"
  },
  {
    "text": "BLEU is [NOISE] rewarding sentences that have a high n-gram overlap with, uh, one or some of the human-written translations.",
    "start": "2939575",
    "end": "2947315"
  },
  {
    "text": "But, if, uh, you write one, if your model writes one valid translation and the humans wrote a different valid translation and they don't have high n-gram overlap,",
    "start": "2947315",
    "end": "2955039"
  },
  {
    "text": "then BLEU is going to, uh, give you a low score. So, um, you're going to learn about BLEU in detail in Assignment 4,",
    "start": "2955040",
    "end": "2963425"
  },
  {
    "text": "and in fact Assignment 4 has a full description- mathematical description of what the BLEU score is. So I'm not gonna tell you about that now, uh, yes,",
    "start": "2963425",
    "end": "2971390"
  },
  {
    "text": "so you're gonna think about BLEU and the- the ways in which it's imperfect but useful. Yeah.",
    "start": "2971390",
    "end": "2978810"
  },
  {
    "text": "So would one- one n-gram, be a one to one equivalency? What?",
    "start": "2978940",
    "end": "2984680"
  },
  {
    "text": "Would a one n-gram be a one to one equivalency? The question is, would a one n-gram be a one-to-one equivalency?",
    "start": "2984680",
    "end": "2991250"
  },
  {
    "text": "I'm not sure I understand the question. You're asking about alignment or something else? Uh, just trying to get an idea about how they're doing n-gram checks,",
    "start": "2991250",
    "end": "2998300"
  },
  {
    "text": "is it doing all n-gram permutations or is it doing like window size of one?",
    "start": "2998300",
    "end": "3003520"
  },
  {
    "text": "Well, I guess one- one n-gram it doesn't make a difference because you can't permute a one-gram. Okay. So you're asking for examples,",
    "start": "3003520",
    "end": "3008830"
  },
  {
    "text": "for four grams are they checking, uh, whether this exact sequence of four paired or any permutation of it, its exact sequences?",
    "start": "3008830",
    "end": "3015280"
  },
  {
    "text": "So by definition, n-grams are sequences where the order matters. Okay. All right.",
    "start": "3015280",
    "end": "3023875"
  },
  {
    "text": "So, uh, that's how you evaluate machine translation. So now you can understand this metric of how we evaluate our progress on machine translation,",
    "start": "3023875",
    "end": "3030550"
  },
  {
    "text": "um, I can show you this graph and you might understand what it means. So this is a, uh,",
    "start": "3030550",
    "end": "3035800"
  },
  {
    "start": "3032000",
    "end": "3094000"
  },
  {
    "text": "bar plot which shows in a nutshell how NMT changed the machine translation,",
    "start": "3035800",
    "end": "3041860"
  },
  {
    "text": "uh, landscape in just a few years. So in this plot, we've got BLEU score is the Y-axis.",
    "start": "3041860",
    "end": "3048070"
  },
  {
    "text": "Uh, and you have two different types of SMT which is the red and the dark blue, uh, bar plots.",
    "start": "3048070",
    "end": "3053560"
  },
  {
    "text": "And what's happening is, uh, in 2015, uh, Neural MT enters the scene for the first time and it isn't doi- doing as well as SMT,",
    "start": "3053560",
    "end": "3061630"
  },
  {
    "text": "and then the next year it's suddenly outperforming SMT. And here these are BLEU scores on some particular fixed dataset like,",
    "start": "3061630",
    "end": "3068380"
  },
  {
    "text": "uh, a shared task that many people were, um, submitting systems for. [NOISE] So the main thing to notice here is",
    "start": "3068380",
    "end": "3075130"
  },
  {
    "text": "that the progress that was being made by SMT systems was, you know, a fairly gentle increase in BLEU year-by-year.",
    "start": "3075130",
    "end": "3081490"
  },
  {
    "text": "And then in just one year, NMT arrives and is suddenly doing, uh, much more rapid progress.",
    "start": "3081490",
    "end": "3087040"
  },
  {
    "text": "So I think this justifies why the picture of the meteor maybe isn't too Jurassic here.",
    "start": "3087040",
    "end": "3091790"
  },
  {
    "text": "So you could in fact call NMT the biggest success story of NLP in deep learning.",
    "start": "3093000",
    "end": "3098545"
  },
  {
    "start": "3094000",
    "end": "3211000"
  },
  {
    "text": "Uh, because if you think about the history of this, NMT went from being a fringe research activity in 2014 to being actually",
    "start": "3098545",
    "end": "3105849"
  },
  {
    "text": "the leading standard methodfor machine translation in the world in 2016.",
    "start": "3105850",
    "end": "3111250"
  },
  {
    "text": "In particular, in 2014, the first seq2seq paper was published. And in 2016, Google Translate switches from SMT to NMT.",
    "start": "3111250",
    "end": "3119184"
  },
  {
    "text": "This is a pretty remarkable turnaround for just two years. So this is amazing,",
    "start": "3119185",
    "end": "3125245"
  },
  {
    "text": "not just because it was a quick turnaround, but also if you think about the level of human effort involved. Uh, these SMT systems, for example",
    "start": "3125245",
    "end": "3132309"
  },
  {
    "text": "the Google Translate SMT system was built by doubtless hundreds of engineers over many years.",
    "start": "3132310",
    "end": "3137965"
  },
  {
    "text": "And this, uh, this SMT system was outperformed by an NMT system that was trained by,",
    "start": "3137965",
    "end": "3143875"
  },
  {
    "text": "uh, you know, relatively few like a handful of engineers in a few months. So I'm not- I'm not diminishing how difficult it is to,",
    "start": "3143875",
    "end": "3149680"
  },
  {
    "text": "um, build NMT systems, and certainly I'm sure Google's NMT system today is built by more than a handful of engineers in a few months.",
    "start": "3149680",
    "end": "3156744"
  },
  {
    "text": "I'm sure it's a very big operation now. Uh, but when NMT, uh, began to outperform SMT,",
    "start": "3156745",
    "end": "3162355"
  },
  {
    "text": "it was pretty remarkable how it was able to do that, uh, based on the amount of effort involved. Yeah.",
    "start": "3162355",
    "end": "3168550"
  },
  {
    "text": "Given the [inaudible] cons of NMT has there been research on  combining the two and if there is, what does that look like?",
    "start": "3168550",
    "end": "3175785"
  },
  {
    "text": "Yeah, great. The question is given that we know that there are some disadvantages of NMT even in comparison to SMT,",
    "start": "3175785",
    "end": "3183865"
  },
  {
    "text": "is there any work on combining the two? So, yes. I think there is. Uh, there's a lot of NMT research ongoing and in particular,",
    "start": "3183865",
    "end": "3190390"
  },
  {
    "text": "people sometimes focus on these particular shortcomings. And, uh, there's a lot of work in kind of taking techniques",
    "start": "3190390",
    "end": "3196660"
  },
  {
    "text": "and ideas and wisdom from the many decades of SMT research, and then integrating them into the new NMT paradigm.",
    "start": "3196660",
    "end": "3203005"
  },
  {
    "text": "So yes. [NOISE]. Okay.",
    "start": "3203005",
    "end": "3210589"
  },
  {
    "start": "3211000",
    "end": "4617000"
  },
  {
    "text": "So is machine translation solved? Can we all go home? I think the answer is clearly no.",
    "start": "3211050",
    "end": "3218470"
  },
  {
    "text": "Uh, NMT definitely is not doing machine translation perfectly. So, um, just to highlight some of the difficulties that remained with NMT.",
    "start": "3218470",
    "end": "3226480"
  },
  {
    "text": "Uh, one is out-of-vocabulary words. Uh, this is a kind of basic problem but it is pretty tricky.",
    "start": "3226480",
    "end": "3232090"
  },
  {
    "text": "You know, what do you do if you're trying to translate a sentence that contains a word that is not in your source vocabulary,",
    "start": "3232090",
    "end": "3237610"
  },
  {
    "text": "or what if you're trying to produce a word that's not in your target vocabulary? Um, there's certainly been lots of work on doing this,",
    "start": "3237610",
    "end": "3243625"
  },
  {
    "text": "and you're going to hear later in the class how you might try to attack this with for example, uh, sub-word modeling can make it easier.",
    "start": "3243625",
    "end": "3250434"
  },
  {
    "text": "Uh, but this is a significant problem. Another one is domain mismatch.",
    "start": "3250435",
    "end": "3255775"
  },
  {
    "text": "So let's suppose that you train your machine translation system on a bunch of fairly, uh, formal text, like let's say,",
    "start": "3255775",
    "end": "3261760"
  },
  {
    "text": "uh, Wikipedia or something like that. Uh, but then you try to deploy it to translate informal text, like people chatting on Twitter or something.",
    "start": "3261760",
    "end": "3269590"
  },
  {
    "text": "Then often, you'll find that it doesn't perform very well on this different domain because you've got a domain mismatch. Uh, so that's quite a big problem.",
    "start": "3269590",
    "end": "3277060"
  },
  {
    "text": "Another one is maintaining context over longer text. So everything we've talked about so far has assumed that you were",
    "start": "3277060",
    "end": "3283120"
  },
  {
    "text": "just translating a single sentence to a single sentence, and there's no other wider context.",
    "start": "3283120",
    "end": "3288655"
  },
  {
    "text": "Uh, but, you know if you want to use a machine translation system to translate a whole news article and maybe even a book,",
    "start": "3288655",
    "end": "3294640"
  },
  {
    "text": "then you're probably going to want to use the context that came in previous sentences in order to translate things correctly in the current sentence.",
    "start": "3294640",
    "end": "3303475"
  },
  {
    "text": "So, uh, this is an active area of research, how can you get an NMT system to condition on larger pieces of context without it becoming too expensive and so on?",
    "start": "3303475",
    "end": "3312619"
  },
  {
    "text": "Another difficulty is low-resource language pairs. Um, everything we've talked about so far has assumed that you have",
    "start": "3313200",
    "end": "3319690"
  },
  {
    "text": "access to a very large parallel corpus, but what if you don't? What if you are trying to translate to or from a language that",
    "start": "3319690",
    "end": "3325180"
  },
  {
    "text": "has relatively little text available, um, online for example? So that can be pretty difficult.",
    "start": "3325180",
    "end": "3331630"
  },
  {
    "text": "Here a few examples of machine translation screwing up, uh, with specific errors.",
    "start": "3331630",
    "end": "3337525"
  },
  {
    "text": "So, here's an example of how common sense is really difficult for NMT systems.",
    "start": "3337525",
    "end": "3343194"
  },
  {
    "text": "On the left, we have the English phrase paper jam, which means when your printer gets jammed up with paper and it's all, uh, tangled inside.",
    "start": "3343195",
    "end": "3350829"
  },
  {
    "text": "And then on the right, we have a very literal translation of that into Spanish, and it's essentially saying jam,",
    "start": "3350830",
    "end": "3356395"
  },
  {
    "text": "edible jam made of paper, which clearly isn't the right interpretation. So here, we have an NMT system that's just doing",
    "start": "3356395",
    "end": "3364060"
  },
  {
    "text": "very literal translation and clearly doesn't have any notion of common sense. You can't make jam from paper. Uh, here's another example.",
    "start": "3364060",
    "end": "3371365"
  },
  {
    "text": "NMT can pick up biases in the training data. We already talked about this at the,",
    "start": "3371365",
    "end": "3376585"
  },
  {
    "text": "uh, the word embedding level, the representation of words. Uh, but it can also be a problem at the you know,",
    "start": "3376585",
    "end": "3382255"
  },
  {
    "text": "the sentence level when you're translating things. So here in this example, uh, on the left,",
    "start": "3382255",
    "end": "3387339"
  },
  {
    "text": "we have two sentences in Malay that roughly mean, uh, they work as a nurse, and they work as a programmer.",
    "start": "3387340",
    "end": "3394089"
  },
  {
    "text": "The point is on the left, there is no information about gender in the pronouns. But when it gets translated to English,",
    "start": "3394090",
    "end": "3400645"
  },
  {
    "text": "then we've suddenly got gender coming out of nowhere, she works as a nurse, and he works as a programmer.",
    "start": "3400645",
    "end": "3406105"
  },
  {
    "text": "This is likely happening because in our training data, we had more examples of female nurses and male programmers.",
    "start": "3406105",
    "end": "3412089"
  },
  {
    "text": "So you can understand why from a machine learning, uh, maximizing the objective point of view the,",
    "start": "3412090",
    "end": "3417880"
  },
  {
    "text": "uh, English language model has learned to do that. But the problem here is this isn't good machine translation. Uh, here the system is making up information that was not present in the source sentence.",
    "start": "3417880",
    "end": "3428590"
  },
  {
    "text": "So this is certainly an error that the machine translation shouldn't be doing because it's just simply inaccurate.",
    "start": "3428590",
    "end": "3433780"
  },
  {
    "text": "And even worse, it's propagating, uh, gender roles. Here's another pretty weird example.",
    "start": "3433780",
    "end": "3440859"
  },
  {
    "text": "[LAUGHTER] What is happening here?",
    "start": "3440860",
    "end": "3449680"
  },
  {
    "text": "Uh, on the left, we have a nonsense sentence, this is just kind of a syllable repeated.",
    "start": "3449680",
    "end": "3455970"
  },
  {
    "text": "And we're supposedly translating from Somali. Uh, and then we're asking to translate this into English and then we're getting this out of nowhere.",
    "start": "3455970",
    "end": "3463350"
  },
  {
    "text": "Um, as the name of the Lord was written in the Hebrew language, it was written in the language of the Hebrew nation,",
    "start": "3463350",
    "end": "3468675"
  },
  {
    "text": "and you might be thinking \"Where on earth did that come from?\" And in fact, this got reported in the media as you know,",
    "start": "3468675",
    "end": "3474675"
  },
  {
    "text": "Google Translate wants to convert you to its religion or whatever. [LAUGHTER] Um, so for sure,",
    "start": "3474675",
    "end": "3480960"
  },
  {
    "text": "it is very startling. But the thing is there's actually quite a reasonable explanation. So what's going on here is that,",
    "start": "3480960",
    "end": "3488830"
  },
  {
    "text": "um, often for low resource languages, such as for example Somali, um,",
    "start": "3488830",
    "end": "3494095"
  },
  {
    "text": "one of the best resources of parallel text is the Bible.",
    "start": "3494095",
    "end": "3499420"
  },
  {
    "text": "So you train for example Somali to English using the Bible as a training text, maybe among other texts.",
    "start": "3499420",
    "end": "3505615"
  },
  {
    "text": "Okay, that's the first puzzle piece. But the other puzzle piece is the nonsensical input. So when the input isn't really Somali or any kind of text, right?",
    "start": "3505615",
    "end": "3515020"
  },
  {
    "text": "It's just the same syllable over and over. Then the NMT system doesn't really have anything sensible to condition on.",
    "start": "3515020",
    "end": "3520615"
  },
  {
    "text": "Its basically nonsense, it's just noise. So what does the NMT system do? Right? It can't really use, it can't really  condition on the source sentence.",
    "start": "3520615",
    "end": "3528099"
  },
  {
    "text": "So what it does, is it just uses the English language model, right? You can think of it as like the English language model of the decoder RNN",
    "start": "3528100",
    "end": "3534460"
  },
  {
    "text": "just kind of goes into autopilot and starts generating random text, kind of like we saw last week when we saw, uh,",
    "start": "3534460",
    "end": "3540760"
  },
  {
    "text": "a language model trained on Obama's speeches or Harry Potter would just generate texts in that style. That's kind of what's happening here with the Bible,",
    "start": "3540760",
    "end": "3546760"
  },
  {
    "text": "because we don't have any useful information, um, from the sentence on the left. Um, so, this is an example why, uh,",
    "start": "3546760",
    "end": "3555700"
  },
  {
    "text": "neural machine translation in particular makes these kinds of errors, uh, because the system is uninterpretable.",
    "start": "3555700",
    "end": "3560890"
  },
  {
    "text": "So you don't know that this is going to happen until it happens, and perhaps Google didn't know this was going to happen until it happened and it got reported.",
    "start": "3560890",
    "end": "3567640"
  },
  {
    "text": "Um, so this is one downside of uninterpretability is that really weird effects can happen and you don't see them coming and it's not",
    "start": "3567640",
    "end": "3574690"
  },
  {
    "text": "always even easy to explain why they happened. Yeah? [inaudible]. Ah, the question is what happens if you did translate from Irish?",
    "start": "3574690",
    "end": "3587530"
  },
  {
    "text": "I suppose that's the part where Google tries to autodetect the language, maybe it thinks that ag ag ag is more like Irish than Somali,",
    "start": "3587530",
    "end": "3593050"
  },
  {
    "text": "[LAUGHTER] I imagine if you did put Irish to English, there's probably more, uh,",
    "start": "3593050",
    "end": "3598615"
  },
  {
    "text": "training data for Irish to English. So maybe it wouldn't be so Bible-focused. Um, yeah, and there's a lot of examples of these online where",
    "start": "3598615",
    "end": "3605680"
  },
  {
    "text": "you do different kinds of nonsense syllables in different languages. So there's a lot of, uh, challenges remaining in NMT.",
    "start": "3605680",
    "end": "3614035"
  },
  {
    "text": "And, uh, the research continues. So NMT, I think remains one of the flagship tasks for NLP Deep Learning.",
    "start": "3614035",
    "end": "3621370"
  },
  {
    "text": "In fact, NMT research has pioneered many of the successful innovations of NLP Deep Learning in general.",
    "start": "3621370",
    "end": "3627204"
  },
  {
    "text": "Uh, so today in 2019, uh, NMT research continues to thrive, there's still many,",
    "start": "3627205",
    "end": "3632710"
  },
  {
    "text": "many papers, uh, published all the time on NMT. And in fact, uh, researchers have found lots of",
    "start": "3632710",
    "end": "3638260"
  },
  {
    "text": "improvements to the fairly vanilla seq2seq models that I've shown you today. Uh, but in fact,",
    "start": "3638260",
    "end": "3643285"
  },
  {
    "text": "there is one improvement that is so integral to seq2seq that you could regard it as the new vanilla.",
    "start": "3643285",
    "end": "3648655"
  },
  {
    "text": "And that's the improvement we're going to learn about today, and it's called attention. Okay. So section three is on attention. What is attention?",
    "start": "3648655",
    "end": "3658225"
  },
  {
    "text": "First, I'm going to motivate why we need this thing called attention. So let's look at this diagram that we saw before of sequence-to-sequence.",
    "start": "3658225",
    "end": "3665440"
  },
  {
    "text": "And remember when we assumed that this, uh, encoding of the source sentence, the, t he one in the orange box is going to represent the whole sentence.",
    "start": "3665440",
    "end": "3673315"
  },
  {
    "text": "Uh, can anyone volunteer a problem you can see with this architecture?",
    "start": "3673315",
    "end": "3678319"
  },
  {
    "text": "In particular perhaps, a problem with this idea that that single vector is the encoding of the source sentence. Yeah?",
    "start": "3679230",
    "end": "3687100"
  },
  {
    "text": "[inaudible]",
    "start": "3687100",
    "end": "3699385"
  },
  {
    "text": "Okay, so the answer is something like, um, you're only looking at one word, you mean like the last word in the source sentence? And you're not seeing more information.",
    "start": "3699385",
    "end": "3705955"
  },
  {
    "text": "Yeah some- it's, it's something like that. Any other ideas? Yep. We might have lost information in the beginning of the sentence by the time you get to the end.",
    "start": "3705955",
    "end": "3713575"
  },
  {
    "text": "Yeah. You might have lost information from [NOISE] the beginning of the sentence by, by the time you get to the end, especially if it was longer than four words.",
    "start": "3713575",
    "end": "3719740"
  },
  {
    "text": "Right. I think these are different ways of saying a similar idea [NOISE] which is that we have a kind of informational bottleneck.",
    "start": "3719740",
    "end": "3726730"
  },
  {
    "text": "Uh, we're forcing all of the information about the source sentence to be captured in this single vector because that's the only thing that gets given to the decoder.",
    "start": "3726730",
    "end": "3734675"
  },
  {
    "text": "If some information about source sentence isn't in our vector, then there's no way the decoder is gonna be able to translate it correctly.",
    "start": "3734675",
    "end": "3740609"
  },
  {
    "text": "So this is the, yeah, this is an informational bottleneck. [NOISE] It's putting kind of too much pressure on",
    "start": "3740610",
    "end": "3745650"
  },
  {
    "text": "this single vector to be a good representation [NOISE] of the encoder. So this is the motivation for attention.",
    "start": "3745650",
    "end": "3752290"
  },
  {
    "text": "Attention is a neural technique and it provides a solution to the bottleneck problem. The core idea is that on each step [NOISE] of the decoder,",
    "start": "3752290",
    "end": "3759520"
  },
  {
    "text": "you're gonna use a direct connection to the encoder to focus on a particular part of the source sequence.",
    "start": "3759520",
    "end": "3766520"
  },
  {
    "text": "So first I'm gonna show you what attention is via a diagram so that's kind of an intuitive explanation.",
    "start": "3767100",
    "end": "3773140"
  },
  {
    "text": "And then I'm gonna show you the equations later. So here's how seq- sequence-to-sequence with attention works.",
    "start": "3773140",
    "end": "3779455"
  },
  {
    "text": "So on the first step of our decoder, uh, we have our first decoder hidden state.",
    "start": "3779455",
    "end": "3785095"
  },
  {
    "text": "So what we do, is we take the dot-product between that decoder hidden state and the first [NOISE] encoder hidden state.",
    "start": "3785095",
    "end": "3791590"
  },
  {
    "text": "And then we get something called an attention score which I'm representing by a dot. So that's a scalar. [NOISE] And in fact,",
    "start": "3791590",
    "end": "3798070"
  },
  {
    "text": "we take the dot-product between the decoder hidden state and all of the encoder hidden states. So this means that we get one attention score or one scalar for each of these,",
    "start": "3798070",
    "end": "3807550"
  },
  {
    "text": "uh, source words effectively. So next what we do, is we take those four number scores and we apply the softmax,",
    "start": "3807550",
    "end": "3815980"
  },
  {
    "text": "uh, distribution, uh, the softmax function to them and then we get a probability distribution.",
    "start": "3815980",
    "end": "3821155"
  },
  {
    "text": "So here, I'm going to represent that probability distribution as a bar chart. Um, and we call this the attention distribution and this one sums up to 1.",
    "start": "3821155",
    "end": "3830200"
  },
  {
    "text": "So here, you can see that most of the probability mass is on the first word. And that kinda makes sense because our first word essentially means \"he\" and,",
    "start": "3830200",
    "end": "3838300"
  },
  {
    "text": "uh, were gonna be producing the word \"he\" first in our target sentence. So once we've got this attention distribution,",
    "start": "3838300",
    "end": "3844965"
  },
  {
    "text": "uh, we're going to use it to produce something called the attention output.",
    "start": "3844965",
    "end": "3851295"
  },
  {
    "text": "So the idea is that the attention output is a weighted sum of the encoder hidden states and the weighting is the attention distribution.",
    "start": "3851295",
    "end": "3860515"
  },
  {
    "text": "So I've got these dotted arrows that go from the attention distribution to the attention output, probably there should be dotted arrows also from",
    "start": "3860515",
    "end": "3866380"
  },
  {
    "text": "the encoder RNN but that's hard to depict. [NOISE] But the idea is that you're summing up these encoder RNN, uh,",
    "start": "3866380",
    "end": "3872215"
  },
  {
    "text": "hidden states, [NOISE] but you're gonna weight each one according to how much attention distribution it has on them.",
    "start": "3872215",
    "end": "3877555"
  },
  {
    "text": "So this means that your attention output which is a single vector is going to be mostly containing information from the hidden states that had high attention.",
    "start": "3877555",
    "end": "3885370"
  },
  {
    "text": "In this case, it's gonna be mostly information from the first hidden state.",
    "start": "3885370",
    "end": "3889730"
  },
  {
    "text": "So after you do this, you're going to use the attention output to influence your prediction of the next word.",
    "start": "3892230",
    "end": "3898390"
  },
  {
    "text": "So what you usually do is you concatenate the attention output with your decoder hidden state and then,",
    "start": "3898390",
    "end": "3903610"
  },
  {
    "text": "uh, use that kind of concatenated pair in the way you would have used the decoder [NOISE] hidden state alone before.",
    "start": "3903610",
    "end": "3908905"
  },
  {
    "text": "So that way you can get your probability distribution, uh, y hat 1 of what's coming next.",
    "start": "3908905",
    "end": "3914215"
  },
  {
    "text": "So as before, we can use that to sample your next word. [NOISE] So on the next step,",
    "start": "3914215",
    "end": "3919359"
  },
  {
    "text": "you just do the same thing again. You've got your second decoder hidden state. Again, you take dot-product with all of the encoder hidden states.",
    "start": "3919360",
    "end": "3925480"
  },
  {
    "text": "You take softmax over that to the get attention distribution. And here, you can see the attention distribution is different.",
    "start": "3925480",
    "end": "3930685"
  },
  {
    "text": "We're putting more attention on, uh, the, the word entarté because we're about to produce the word hit.",
    "start": "3930685",
    "end": "3936520"
  },
  {
    "text": "Uh, but we're also attending a little bit to the second word a because that's telling us that hit is a past tense.",
    "start": "3936520",
    "end": "3942295"
  },
  {
    "text": "So a cool thing that's happening here is we're getting [NOISE] a soft alignment. If you remember when we looked at alignment in SMT systems,",
    "start": "3942295",
    "end": "3949555"
  },
  {
    "text": "it was mostly this, uh, hard binary thing with on or off, either these words are aligned or they're not.",
    "start": "3949555",
    "end": "3954595"
  },
  {
    "text": "Here, you have a much more flexible soft notion of alignments where, uh, each word kind of has a distribution over",
    "start": "3954595",
    "end": "3961299"
  },
  {
    "text": "the corresponding words in the source sentence. So another thing to note kind of a side note,",
    "start": "3961300",
    "end": "3966805"
  },
  {
    "text": "is that sometimes, uh, we take the attention output from the previous hidden state, uh,",
    "start": "3966805",
    "end": "3971920"
  },
  {
    "text": "and we kind of feed it into the decoder again along with the usual word. So that would mean you take the attention output from the first step and kind of",
    "start": "3971920",
    "end": "3979510"
  },
  {
    "text": "concatenate it to the word vector for he and then use it in the decoder. Uh, the reason for this is sometimes it's useful to have this, uh,",
    "start": "3979510",
    "end": "3986515"
  },
  {
    "text": "information from the, the attention on the previous step on the next step. So I'm telling you this because this is something we do in Assignment 4",
    "start": "3986515",
    "end": "3993475"
  },
  {
    "text": "and it's a fairly common technique but also sometimes people don't do it. Okay. So, um, the theory is,",
    "start": "3993475",
    "end": "4000390"
  },
  {
    "text": "that you just do this attention, uh, computation on every step. And on each step, you're going to be attending to different things.",
    "start": "4000390",
    "end": "4006690"
  },
  {
    "text": "So in our example on this third step, we look at m' which means me when we",
    "start": "4006690",
    "end": "4011730"
  },
  {
    "text": "produce me and then on the last three [NOISE] we're probably mostly just gonna be looking at this, uh, fertile word entarté to produce hit me with a pie.",
    "start": "4011730",
    "end": "4018600"
  },
  {
    "text": "[NOISE] I'm gonna keep going because we don't have a lot of time. Uh, so here are the equations to describe attention.",
    "start": "4018600",
    "end": "4024690"
  },
  {
    "text": "Uh, I think it's probably easier to look at these in your own time later rather than look at them in the lecture now. But these are the equations that essentially",
    "start": "4024690",
    "end": "4030869"
  },
  {
    "text": "say the same thing as what the diagram just said. So you have your encoder hidden states h_1 up to h_N.",
    "start": "4030870",
    "end": "4037110"
  },
  {
    "text": "And then on timestep t of the decoder, we also have a decoder hidden state, uh, S_t.",
    "start": "4037110",
    "end": "4042855"
  },
  {
    "text": "So we're gonna get the attention score which we're gonna call et by taking the dot-product of your decoder hidden state with each of the encoder hidden states.",
    "start": "4042855",
    "end": "4050730"
  },
  {
    "text": "[NOISE] And that gives you, uh, a vector of same length as the, uh, encoder [NOISE] sentence because you've got one score per source word.",
    "start": "4050730",
    "end": "4059355"
  },
  {
    "text": "Next you take softmax over these scores to get attention distribution that sums up to 1,",
    "start": "4059355",
    "end": "4065280"
  },
  {
    "text": "and we call that alpha. And then you use alpha to take a weighted sum of",
    "start": "4065280",
    "end": "4070860"
  },
  {
    "text": "the encoder hidden states and that gives you your attention output. So [NOISE] the attention output which we call a is a vector that's",
    "start": "4070860",
    "end": "4077490"
  },
  {
    "text": "the same size as your encoder hidden states. Lastly, you take your attention output a and then you, [NOISE] uh,",
    "start": "4077490",
    "end": "4086610"
  },
  {
    "text": "concatenate it with your decoder hidden states and then proceed with that as you were taught before in the no attention model.",
    "start": "4086610",
    "end": "4093940"
  },
  {
    "text": "So attention, if it's not clear, it's pretty cool. It has a number of advantages. So one advantage is that attention just significantly improves NMT performance.",
    "start": "4094520",
    "end": "4103904"
  },
  {
    "text": "And the main reason why it improves it, is because it turns out it's super useful to allow the decoder [NOISE] to focus on certain parts of the source sentence when it's translating.",
    "start": "4103905",
    "end": "4112214"
  },
  {
    "text": "And you can see why this makes sense, right? Because there's a very natural notion of alignment, and if you can focus on the specific word or words you're translating,",
    "start": "4112215",
    "end": "4118619"
  },
  {
    "text": "you can probably do a better job. Another reason why attention is cool is that [NOISE] it solves the bottleneck problem.",
    "start": "4118619",
    "end": "4124410"
  },
  {
    "text": "Uh, we were noting that the problem with having a single vector that has to represent the entire source sentence [NOISE] and that's",
    "start": "4124410",
    "end": "4129870"
  },
  {
    "text": "the only way information can pass from encoder to decoder means that if that encoding isn't very good then, uh, you're not gonna do well.",
    "start": "4129870",
    "end": "4136589"
  },
  {
    "text": "So by contrast in, uh, with attention, the decoder can look directly at the encoder and",
    "start": "4136590",
    "end": "4141690"
  },
  {
    "text": "the source sentence and translate without the bottleneck. [NOISE]",
    "start": "4141690",
    "end": "4147060"
  },
  {
    "text": "Another great thing about attention is that it helps with the vanishing gradient problem, especially if your sentences are quite long.",
    "start": "4147060",
    "end": "4153240"
  },
  {
    "text": "Uh, the reason why attention helps is because you have these direct connections between the decoder and the encoder,",
    "start": "4153240",
    "end": "4159390"
  },
  {
    "text": "kind of over many time steps. So it's like a shortcut connection. And just as we learned last time about, uh,",
    "start": "4159390",
    "end": "4164730"
  },
  {
    "text": "skip connections being [NOISE] useful for reducing vanishing gradient. Here it's the same notion. We have these, uh, long distance",
    "start": "4164730",
    "end": "4171270"
  },
  {
    "text": "[NOISE] direct connections that help the gradients flow better. Another great thing about attention is it provides some interpretability.",
    "start": "4171270",
    "end": "4178230"
  },
  {
    "text": "Uh, if you look at the attention distribution, often you've produced your translation. Uh, you can see what the decoder was focusing on on each step.",
    "start": "4178230",
    "end": "4186359"
  },
  {
    "text": "So for example if we run our system and we translate our, our running example here, then we can produce a plot,",
    "start": "4186360",
    "end": "4191670"
  },
  {
    "text": "kind of like this that shows the attention distribution. So here, dark means high attention and white means low attention.",
    "start": "4191670",
    "end": "4198255"
  },
  {
    "text": "So you might see something like this where, um, it was, it was focusing on the different words and different steps.",
    "start": "4198255",
    "end": "4203550"
  },
  {
    "text": "And this is basically the same kind of plot that we had earlier with a hard notion of alignment,",
    "start": "4203550",
    "end": "4208710"
  },
  {
    "text": "uh, in SNT except that we, uh, we have more flexibility to have a more soft version of alignment",
    "start": "4208710",
    "end": "4214380"
  },
  {
    "text": "like for example when we produce the English word hit, perhaps we were mostly looking at entarte, but we're also looking at a little bit of A.",
    "start": "4214380",
    "end": "4222400"
  },
  {
    "text": "So this, uh, means that we're getting, uh, alignment for free. And the reason I say for free is because when you remember the SNT systems,",
    "start": "4222880",
    "end": "4231424"
  },
  {
    "text": "the whole point there is that you had to learn an alignment system deliberately and separately.",
    "start": "4231424",
    "end": "4236580"
  },
  {
    "text": "You had to define the notion of alignment, you had to define the model of calculating, what the probability of different alignments were and train it.",
    "start": "4236580",
    "end": "4242865"
  },
  {
    "text": "Whereas here, we never told the NMT system about alignments. We never explicitly trained an alignment system.",
    "start": "4242865",
    "end": "4249105"
  },
  {
    "text": "We never had a loss function that tells you how good your alignment was. We just gave the NMT system the apparatus to",
    "start": "4249105",
    "end": "4255600"
  },
  {
    "text": "do something like alignments and told it to maximize the, uh, the cross-entropy loss for doing machine translation.",
    "start": "4255600",
    "end": "4262380"
  },
  {
    "text": "And then the network just learned alignment by itself. I think this is the coolest thing about attention,",
    "start": "4262380",
    "end": "4267900"
  },
  {
    "text": "is that it's learned some structure in a somewhat unsupervised way.",
    "start": "4267900",
    "end": "4272409"
  },
  {
    "text": "Okay, so in the last few minutes, I'm just going to, uh, generalize the notion of attention.",
    "start": "4273290",
    "end": "4278340"
  },
  {
    "text": "Because it turns out that attention is actually a very general, uh, deep learning technique that you can apply in lots of different circumstances.",
    "start": "4278340",
    "end": "4285315"
  },
  {
    "text": "So you've seen that attention is a great way to improve the sequence-to-sequence model for MT, but you can actually use attention for other architectures that aren't",
    "start": "4285315",
    "end": "4292710"
  },
  {
    "text": "seq2seq and also tasks that aren't MT. So to understand this,",
    "start": "4292710",
    "end": "4297975"
  },
  {
    "text": "I'm going to somewhat redefine attention to a more general definition. So here's our more general definition.",
    "start": "4297975",
    "end": "4304185"
  },
  {
    "text": "Suppose you have a set of values, each of which is a vector, and you also have a single vector in which you're calling the query.",
    "start": "4304185",
    "end": "4311370"
  },
  {
    "text": "Then attention is a way, uh, to compute a weighted sum of the values. But the way you weight it is dependent on the query.",
    "start": "4311370",
    "end": "4319380"
  },
  {
    "text": "[NOISE] So we often phrase this, uh, as saying that the query is attending to the values.",
    "start": "4319380",
    "end": "4326655"
  },
  {
    "text": "The idea being that you have all this information that's in the values and the query is somehow determining how it's going to pay attention to the values.",
    "start": "4326655",
    "end": "4333810"
  },
  {
    "text": "So for example in seq2seq, uh, the decoder hidden state is the query.",
    "start": "4333810",
    "end": "4339435"
  },
  {
    "text": "Uh the decoder hidden state on a particular time step is the query and is attending to all the encoder hidden states which are the values.",
    "start": "4339435",
    "end": "4347050"
  },
  {
    "text": "All right, here's our definition again. So here's a way to kind of understand this intuitively, two alternative ways.",
    "start": "4347090",
    "end": "4353445"
  },
  {
    "text": "One is to think of it like this. You could think of it as the weighted sum is like a selective summary of the information in the values.",
    "start": "4353445",
    "end": "4362235"
  },
  {
    "text": "And I say selective because your choice of how much you choose to draw from each value depends on the attention distribution.",
    "start": "4362235",
    "end": "4369344"
  },
  {
    "text": "Uh, so the distribution, uh, depends on the query. So the query is determining how much you're going to select from different, uh, values.",
    "start": "4369345",
    "end": "4377595"
  },
  {
    "text": "And this is kind of similar to LSTM that learned about earlier this week. LSTMs rule based on the idea of a gate that, uh,",
    "start": "4377595",
    "end": "4384300"
  },
  {
    "text": "[NOISE] that defines how much information shou- should [NOISE] come from different elements. And the gate depends on the context.",
    "start": "4384300",
    "end": "4391395"
  },
  {
    "text": "So the strength of LSTMs came from the idea that based on the context, you decide where you're going to draw information from.",
    "start": "4391395",
    "end": "4397185"
  },
  {
    "text": "And this is kind of like the same idea. The second way to think about attention is you could say that it's a way to obtain",
    "start": "4397185",
    "end": "4404070"
  },
  {
    "text": "a fixed-size representation from an arbitrary set of representations. So when I say arbitrary sets,",
    "start": "4404070",
    "end": "4409965"
  },
  {
    "text": "I'm saying we have this set of vectors called the values, right? And you could have 10 values. You could have 100 values.",
    "start": "4409965",
    "end": "4415380"
  },
  {
    "text": "You can have, uh, any [NOISE] arbitrary number of these vectors. But attention gives you a way to get a single vector,",
    "start": "4415380",
    "end": "4422460"
  },
  {
    "text": "um, summary of that which is the attention output, uh, using your query.",
    "start": "4422460",
    "end": "4428350"
  },
  {
    "text": "Okay, uh, so the last thing, uh, is that there's actually several variants of",
    "start": "4428420",
    "end": "4433710"
  },
  {
    "text": "attention and this is something were are going to look at a little in Assignment 4. So in our more general setting,",
    "start": "4433710",
    "end": "4439920"
  },
  {
    "text": "we've seen that we have some values in the query. Doing attention always involves computing the attention [NOISE] scores,",
    "start": "4439920",
    "end": "4446265"
  },
  {
    "text": "and then you apply softmax to get the attention distribution. And then you use that attention distribution to take a weighted sum.",
    "start": "4446265",
    "end": "4453870"
  },
  {
    "text": "So this is, uh, always the outline of how attention works. The part that can be different is this, uh, number one.",
    "start": "4453870",
    "end": "4459920"
  },
  {
    "text": "There are multiple ways you can compute the scores. So, uh, last slide,",
    "start": "4459920",
    "end": "4467135"
  },
  {
    "text": "here all the different ways you can repeat the scores. So the first one which you've already seen today is basic dot-product attention.",
    "start": "4467135",
    "end": "4474615"
  },
  {
    "text": "And the idea here is that [NOISE] the score for a particular, a particular value, HI, is just the dot-product of the query and that particular value.",
    "start": "4474615",
    "end": "4482850"
  },
  {
    "text": "[NOISE] And, uh, in particular this assumes that the size of your query vector and the size of",
    "start": "4482850",
    "end": "4488190"
  },
  {
    "text": "your value vector has to be the same because you're taking dot-product. [NOISE] Another, uh, version of,",
    "start": "4488190",
    "end": "4494865"
  },
  {
    "text": "uh, attention is called multiplicative attention. And here, the idea is that the score of your, uh,",
    "start": "4494865",
    "end": "4500385"
  },
  {
    "text": "value HI, is going to be this, uh, bi-linear function of your query and that value.",
    "start": "4500385",
    "end": "4506625"
  },
  {
    "text": "So in particular, we're pushing this weight matrix in the middle and that's a learnable parameter. You're learning the best way matric- ma- weight matrix in order to get the scores,",
    "start": "4506625",
    "end": "4514650"
  },
  {
    "text": "the attention scores that are useful. The last one is called additive attention.",
    "start": "4514650",
    "end": "4519855"
  },
  {
    "text": "So what's happening here is that the score of the value HI is, uh,",
    "start": "4519855",
    "end": "4526215"
  },
  {
    "text": "you get it by applying a linear transformation to both the value and the query and then you add them together.",
    "start": "4526215",
    "end": "4533400"
  },
  {
    "text": "And then you put them through a non-linearity like tanh. And then lastly, uh, you take that vector and you take the dot-product with",
    "start": "4533400",
    "end": "4540270"
  },
  {
    "text": "a weight vector to give you a single number that is the score. [NOISE] So here, you've got",
    "start": "4540270",
    "end": "4546450"
  },
  {
    "text": "two different weight matrices and [NOISE] also a weight vector which are the learnable parameters. One thing that's different here is that there's kind of an additional hyperparameter,",
    "start": "4546450",
    "end": "4555765"
  },
  {
    "text": "which is the attention dimensionality. So [NOISE] that's kind of, uh, the, I think it's the heights of the W1 and W2 and this is the length of V, right?",
    "start": "4555765",
    "end": "4564810"
  },
  {
    "text": "You can choose what size that dimension is. It's kind of like a hidden layer in the computation.",
    "start": "4564810",
    "end": "4570225"
  },
  {
    "text": "So, um, you can decide how big you want that intermediate representation to be. Okay, so I'm not going to tell you any more about that because that's",
    "start": "4570225",
    "end": "4577470"
  },
  {
    "text": "actually one of the questions in the assignment, uh, Assignment 4 is to think about the relative advantages and disadvantages of these models.",
    "start": "4577470",
    "end": "4584010"
  },
  {
    "text": "[NOISE] Okay. So here's a summary of today. [NOISE] It really is the last slide, [BACKGROUND] second last, last time,",
    "start": "4584010",
    "end": "4589800"
  },
  {
    "text": "but this was the last slide. [BACKGROUND] So we learned about the history of MT. [NOISE] We learned about how in 2014 [NOISE] Neural MT revolutionized MT.",
    "start": "4589800",
    "end": "4597960"
  },
  {
    "text": "[NOISE] We learned about how sequence-to-sequence is the right architecture for NMT and it uses two RNNs.",
    "start": "4597960",
    "end": "4604395"
  },
  {
    "text": "And lastly, we learned about how attention [NOISE] is a way to focus on particular parts of the input. All right, thanks.",
    "start": "4604395",
    "end": "4610660"
  }
]