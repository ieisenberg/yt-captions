[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "All right. Good morning. Um, let's get started. So, ah, today you'll see the Support Vector Machine Algorithm.",
    "start": "3500",
    "end": "13275"
  },
  {
    "start": "10000",
    "end": "167000"
  },
  {
    "text": "Um, and this is one of my favorite algorithms because it's very turnkey, right? If you have a classification problem, um,",
    "start": "13275",
    "end": "19875"
  },
  {
    "text": "you just, kind of, run it and it more or less works. So in particular, I'll talk a bit more about",
    "start": "19875",
    "end": "26720"
  },
  {
    "text": "the optimization problem that you have to solve for the support vector machine, then talk about something called the representer theorem,",
    "start": "26720",
    "end": "35240"
  },
  {
    "text": "and this will be a key idea to how we'll work in potentially very high-dimensional,",
    "start": "35240",
    "end": "41025"
  },
  {
    "text": "like 100,000 dimensional, or a million dimensional, or 100 billion dimensional, or even infinite-dimensional feature spaces.",
    "start": "41025",
    "end": "47434"
  },
  {
    "text": "And just to teach you how to represent feature vectors and how to represent parameters that may be,",
    "start": "47435",
    "end": "53295"
  },
  {
    "text": "you know, 100 billion dimensional, or 100 trillion dimensional, or infinite dimensional. Um, and based on this we derived kernels which is",
    "start": "53295",
    "end": "61100"
  },
  {
    "text": "the mechanism for work on these incredibly high dimensional fea- feature spaces, and then hopefully, time permitting wrap up with",
    "start": "61100",
    "end": "68869"
  },
  {
    "text": "a few examples of concrete implementations of these ideas. So to recap, on last Wednesday,",
    "start": "68870",
    "end": "76970"
  },
  {
    "text": "we had started to talk about the optimal margin classifier, which said that,",
    "start": "76970",
    "end": "82340"
  },
  {
    "text": "if you have a dataset that looks like this, then you want to find",
    "start": "82340",
    "end": "87740"
  },
  {
    "text": "the decision boundary with the greatest possible geometric margin, right? So the geometric margin, um,",
    "start": "87740",
    "end": "94635"
  },
  {
    "text": "can be calculated by this formula, and this is just the- the- the derivations in the lecture notes. It's just, you know, measuring the distance,",
    "start": "94635",
    "end": "101190"
  },
  {
    "text": "uh, to the nearest point, right? Um, and for now let's assume the data can be separated by a straight line.",
    "start": "101190",
    "end": "108875"
  },
  {
    "text": "Um, and so Gamma i is- this is sort of geometry, I guess, derivation in the lecture notes.",
    "start": "108875",
    "end": "115260"
  },
  {
    "text": "This is the formula for co- computing the distance from the example x_i, y_i,",
    "start": "115260",
    "end": "120300"
  },
  {
    "text": "to the decision boundary governed by the parameters w and b. Um, and Gamma is the worst case geometric margin, right?",
    "start": "120300",
    "end": "129660"
  },
  {
    "text": "You will make- so- right. Of all of your M training examples,",
    "start": "129660",
    "end": "135870"
  },
  {
    "text": "which one has the least or has the worst possible geometric margin? And, the support vector, the optimal margin classifier,",
    "start": "135870",
    "end": "142234"
  },
  {
    "text": "we tried to make this as big as possible. And by the way, what we'll- what you see later on",
    "start": "142234",
    "end": "147710"
  },
  {
    "text": "is that the optimal margin classifier is basically this algorithm. And optimal margin classifier plus kernels meaning basically take",
    "start": "147710",
    "end": "154970"
  },
  {
    "text": "this idea of pi in a 100 billion dimensional feature space that's a support vector machine, okay?",
    "start": "154970",
    "end": "161004"
  },
  {
    "text": "So I saw- one thing I didn't have time to talk about, uh,",
    "start": "161005",
    "end": "166520"
  },
  {
    "text": "on Wednesday was the derivation of this classification problem, so  where does this optimization objective come from?",
    "start": "166520",
    "end": "174030"
  },
  {
    "start": "167000",
    "end": "467000"
  },
  {
    "text": "So let me- let me just go over that very briefly. Um, so, the way I motivated these definitions we said that given a training set,",
    "start": "174030",
    "end": "182510"
  },
  {
    "text": "you want to find the decision boundary parameterized by w and b, um, that maximizes the geometric margin, right?",
    "start": "182510",
    "end": "190335"
  },
  {
    "text": "And so again, as recap, your classifier will output g equals w transpose x plus b.",
    "start": "190335",
    "end": "197400"
  },
  {
    "text": "Um, and so you want to find premises w and b. They'll define the decision boundary where",
    "start": "197400",
    "end": "203840"
  },
  {
    "text": "your classifications switch from positive to negative, that maximizes the geometric module.",
    "start": "203840",
    "end": "209690"
  },
  {
    "text": "And so one way to pose this as an optimization problem is- um, let's see,",
    "start": "209690",
    "end": "215915"
  },
  {
    "text": "is to try to find the biggest possible value of Gamma",
    "start": "215915",
    "end": "221629"
  },
  {
    "text": "subject to that- subject to that the,",
    "start": "221630",
    "end": "234330"
  },
  {
    "text": "um, geometric margin must be greater than or equal to Gamma, right? So, um, so, in this optimization problem,",
    "start": "234330",
    "end": "241120"
  },
  {
    "text": "the parameters you get to fiddle with are, Gamma, w and b. And if you solve this optimization problem,",
    "start": "241120",
    "end": "248240"
  },
  {
    "text": "then you are finding the values of w and b that defines a straight line, that defines a decision boundary, um,",
    "start": "248240",
    "end": "255420"
  },
  {
    "text": "so that- so, so this constraint says that every example, right?",
    "start": "255420",
    "end": "261255"
  },
  {
    "text": "So this constraint says every example has geometric margin greater than or equal to Gamma.",
    "start": "261255",
    "end": "269435"
  },
  {
    "text": "This is- this is what they are saying. And you wanna set Gamma as big as possible,",
    "start": "269435",
    "end": "274655"
  },
  {
    "text": "which means that you're maximizing the worst-case geometric margin. This makes sense, right?",
    "start": "274655",
    "end": "280520"
  },
  {
    "text": "So- so if- if I- so the only way to make Gamma say 17,",
    "start": "280520",
    "end": "286220"
  },
  {
    "text": "or 20, or whatever, is if every training example has geometric margin bigger than 17, right?",
    "start": "286220",
    "end": "293330"
  },
  {
    "text": "And so this optimization problem was trying to find w and b to drive up Gamma as big as possible and have every example",
    "start": "293330",
    "end": "300710"
  },
  {
    "text": "have geometric margin even bigger than Gamma. So this optimization problem maximizes the Geom- causes, um,",
    "start": "300710",
    "end": "309220"
  },
  {
    "text": "causes you to find w and b with as big a geometric margin as poss- so as big as the worst-case geometric margin as possible, okay?",
    "start": "309220",
    "end": "318825"
  },
  {
    "text": "Um, and so, does this make sense actually, right?",
    "start": "318825",
    "end": "323895"
  },
  {
    "text": "Okay. Actually rai- raise your hand if this makes sense. Uh, oh, good. Okay. Well, many of you. All right.",
    "start": "323895",
    "end": "329325"
  },
  {
    "text": "Let me see if I can explain this in a slightly different way. So let's say you have a few training examples, you know,",
    "start": "329325",
    "end": "334560"
  },
  {
    "text": "the training examples geometric margins are, 17, 2, and 5, right?",
    "start": "334560",
    "end": "342210"
  },
  {
    "text": "Then the geometric margin in this case is a worst-case value 2, right? And so if you are solving an optimization problem",
    "start": "342210",
    "end": "349700"
  },
  {
    "text": "where I want every example- where I want the- the- the, uh, uh, where I want the min of i- of Gamma i to be as big as possible,",
    "start": "349700",
    "end": "362309"
  },
  {
    "text": "one way to enforce this is to say that Gamma i must be bigger than or equal to Gamma, for every possible value of i.",
    "start": "362309",
    "end": "369350"
  },
  {
    "text": "And then I'm going to lift Gamma up as much as possible, right? Because the only way to lift Gamma up",
    "start": "369350",
    "end": "375275"
  },
  {
    "text": "subject to this is if every va- value of Gamma i is bigger than that. And so, lifting Gamma up,",
    "start": "375275",
    "end": "381604"
  },
  {
    "text": "maximizing Gamma has effective maximizing the worst-case examples geometric margin,",
    "start": "381605",
    "end": "387380"
  },
  {
    "text": "which is, which is, which is how we define this optimization problem, okay?",
    "start": "387380",
    "end": "393125"
  },
  {
    "text": "Um, and then the last one step to turn this problem into this one on the left,",
    "start": "393125",
    "end": "400480"
  },
  {
    "text": "is this interesting observation that, um, you might remember when we talked about the functional margin,",
    "start": "400480",
    "end": "408324"
  },
  {
    "text": "which is the numerator here, that, you know, the functional margin you can scale w and b",
    "start": "408325",
    "end": "414760"
  },
  {
    "text": "by any number and the decision boundary stays the same, right? And so, you know,",
    "start": "414760",
    "end": "419845"
  },
  {
    "text": "if- if your classifier is y, so this is g of w transpose x plus b, right?",
    "start": "419845",
    "end": "425745"
  },
  {
    "text": "So if- let's see the example I want to use, uh, 2, 1.",
    "start": "425745",
    "end": "431505"
  },
  {
    "text": "If w was the vector 2, 1- [NOISE]",
    "start": "431505",
    "end": "440615"
  },
  {
    "text": "Let's say that's the classifier, right? Then you can take W and B,",
    "start": "440615",
    "end": "445945"
  },
  {
    "text": "and multiply it by any number you want. I can multiply this by 10, [NOISE] and this defines the same straight line, right?",
    "start": "445945",
    "end": "458590"
  },
  {
    "text": "Um, so in particular, I think, uh, let's see with this 2 1x.",
    "start": "458590",
    "end": "465700"
  },
  {
    "text": "[NOISE] This actually defines the decision boundary that looks like that.",
    "start": "465700",
    "end": "471100"
  },
  {
    "start": "467000",
    "end": "718000"
  },
  {
    "text": "Uh, if this is X1 and this is X2, then this is the equation of the straight line where W transpose X plus",
    "start": "471100",
    "end": "478720"
  },
  {
    "text": "B equals 0, right?",
    "start": "478720",
    "end": "484540"
  },
  {
    "text": "Uh, that's uh, one, and two. Uh, you can- you can verify it for yourself. You plug in this point,",
    "start": "484540",
    "end": "490840"
  },
  {
    "text": "then W transpose X plus B equals 0. We plug in this point, W transpose X equals 0, um and so that's the decision boundary where the,",
    "start": "490840",
    "end": "498220"
  },
  {
    "text": "uh- as yet we'll predict positive [NOISE] everywhere here and we'll predict [NOISE] negative everywhere to the lower left,",
    "start": "498220",
    "end": "505120"
  },
  {
    "text": "and this straight line, you know, stays the same even when you multiply these parameters by any constant, okay?",
    "start": "505120",
    "end": "512380"
  },
  {
    "text": "Um, and so, um, to simplify this, uh,",
    "start": "512380",
    "end": "520195"
  },
  {
    "text": "notice that you could choose anything you want for the normal W, right? Just by scaling this by a factor of 10,",
    "start": "520195",
    "end": "526255"
  },
  {
    "text": "you can increase it, or scaling it by a factor of 1 over 10, you can decrease it. But you have the flexibility to scale the parameters W and B, you know,",
    "start": "526255",
    "end": "534745"
  },
  {
    "text": "up or down by any fixed constant without changing the decision boundary,",
    "start": "534745",
    "end": "540445"
  },
  {
    "text": "and so the trick to simplify this equation into that one is if you choose",
    "start": "540445",
    "end": "545920"
  },
  {
    "text": "[NOISE] to scale the normal W to be equal to 1 over gamma.",
    "start": "545920",
    "end": "552670"
  },
  {
    "text": "Um, uh because if you do that, then this optimization objective",
    "start": "552670",
    "end": "559990"
  },
  {
    "text": "[NOISE] becomes- [NOISE] Um,",
    "start": "559990",
    "end": "569450"
  },
  {
    "text": "maximize 1 over norm of W subject to-",
    "start": "569780",
    "end": "574940"
  },
  {
    "text": "[NOISE]",
    "start": "574940",
    "end": "585560"
  },
  {
    "text": "right? Uh, so it substitutes norm of W equals 1 of gamma, and so that cancels out,",
    "start": "585560",
    "end": "593055"
  },
  {
    "text": "and so you end up with this optimization problem instead of maximizing 1 over norm W,",
    "start": "593055",
    "end": "598450"
  },
  {
    "text": "you can minimize one half the norm of W squared subject to this. [NOISE] Right?",
    "start": "598450",
    "end": "608930"
  },
  {
    "text": "Okay, and so that's a rough- I know I did this relatively quickly.",
    "start": "611430",
    "end": "616810"
  },
  {
    "text": "Again- as usual the full derivation is written on your lecture notes but hopefully this gives you a flavor for why.",
    "start": "616810",
    "end": "622510"
  },
  {
    "text": "If you solve this optimization problem and you're minimizing over W and B",
    "start": "622510",
    "end": "627745"
  },
  {
    "text": "that you are solving for the parameters W and B that give you the optimal margin classifier. Okay.",
    "start": "627745",
    "end": "634400"
  },
  {
    "text": "Now, delta margin classifier,",
    "start": "634590",
    "end": "640420"
  },
  {
    "text": "we've been deriving this algorithm as if you know the features X I um,",
    "start": "640420",
    "end": "646690"
  },
  {
    "text": "let's see, we've been deriving this algorithm as if the features X I are some reasonable dimensional feature X equals R2,",
    "start": "646690",
    "end": "655000"
  },
  {
    "text": "X equals 100 or something. Um, what we will talk about",
    "start": "655000",
    "end": "660279"
  },
  {
    "text": "later is a case where the features X I become you know, 100 trillion dimensional right?",
    "start": "660280",
    "end": "665860"
  },
  {
    "text": "Or infinite dimensional. And um, what's- uh,",
    "start": "665860",
    "end": "671960"
  },
  {
    "text": "what we will assume is that W,",
    "start": "672780",
    "end": "678879"
  },
  {
    "text": "can be represented [NOISE] as a sum- as a linear combination of the training examples.",
    "start": "678879",
    "end": "687805"
  },
  {
    "text": "Okay? So um, in order to derive the support vector machine, we're gonna make an additional restriction that the parameters W",
    "start": "687805",
    "end": "695995"
  },
  {
    "text": "can be expressed as a linear combination of the training examples. Right? So um, and it turns out that when X I is you know, 100 trillion dimensional,",
    "start": "695995",
    "end": "707110"
  },
  {
    "text": "doing this will let us derive algorithms that work even in these  100 trillion or these infinite-dimensional feature spaces.",
    "start": "707110",
    "end": "713755"
  },
  {
    "text": "Now, I'm just deriving this uh, just as an assumption. It turns out that there's a theorem called the representer theorem that",
    "start": "713755",
    "end": "721150"
  },
  {
    "start": "718000",
    "end": "800000"
  },
  {
    "text": "shows that you can make this assumption without losing any performance. Uh, the proof that represents the theorem is quite complicated.",
    "start": "721150",
    "end": "727555"
  },
  {
    "text": "I don't wanna do this in this class, uh, it is actually written out, the proof for why you can make this assumption is also written in the lecture notes,",
    "start": "727555",
    "end": "733329"
  },
  {
    "text": "it's a pretty long and involved proof involving primal dual optimization. Um, I don't wanna present the whole proof here but let me give you",
    "start": "733330",
    "end": "739510"
  },
  {
    "text": "a flavor for why this is a reasonable assumption to make. Okay? And when- just to- just to make things complicated later on uh,",
    "start": "739510",
    "end": "747570"
  },
  {
    "text": "we actually do this. Right? So Y I is always plus minus 1. So- so we're actually by- by convention,",
    "start": "747570",
    "end": "753420"
  },
  {
    "text": "we're actually going to assume that W I can be written right? So in- in this example this is plus minus 1 right?",
    "start": "753420",
    "end": "760075"
  },
  {
    "text": "So um, this makes some of the math a little bit downstream, come out easier but it is- but it's still",
    "start": "760075",
    "end": "765490"
  },
  {
    "text": "saying that W is- can be represented as a linear combination of the training examples.",
    "start": "765490",
    "end": "771985"
  },
  {
    "text": "Okay? So um [NOISE] let me just describe less formally why this is a reasonable assumption,",
    "start": "771985",
    "end": "778464"
  },
  {
    "text": "but it's actually not an assumption. The representer theorem proves that you know, this is just true at the optimal value of W. But let me convey a couple ways why um,",
    "start": "778465",
    "end": "788020"
  },
  {
    "text": "this is a reasonable thing to do, or assume I guess. So um, maybe here's intuition number one.",
    "start": "788020",
    "end": "798820"
  },
  {
    "text": "And I'm going to refer to logistic regression. [NOISE] Right? Where uh,",
    "start": "798820",
    "end": "809065"
  },
  {
    "start": "800000",
    "end": "1591000"
  },
  {
    "text": "suppose that you run logistic regression with uh, gradient descent, say stochastic gradient descent, then you initialize the parameters to be equal to 0 at first.",
    "start": "809065",
    "end": "819010"
  },
  {
    "text": "And then for each iteration of stochastic gradient descent,",
    "start": "819010",
    "end": "823970"
  },
  {
    "text": "right [NOISE] you update theta it gets updated as theta minus the learning rate times [NOISE] you know,",
    "start": "825390",
    "end": "834339"
  },
  {
    "text": "[NOISE] times X and Y okay?",
    "start": "834340",
    "end": "840100"
  },
  {
    "text": "And so- sorry here alpha is the learning rate, uh, nothing, this is overloaded notation,",
    "start": "840100",
    "end": "845500"
  },
  {
    "text": "this alpha has nothing to do with that alpha. But so this is saying that on every iteration, you're updating the parameters theta as- uh,",
    "start": "845500",
    "end": "852925"
  },
  {
    "text": "by- by adding or subtracting some constant times some training example.",
    "start": "852925",
    "end": "858010"
  },
  {
    "text": "And so kind of proof by induction, right if theta starts out at 0, and if- if on every iteration of",
    "start": "858010",
    "end": "864820"
  },
  {
    "text": "gradient descent you're adding a multiple of some training example, then no matter how many iterations you run gradient descent,",
    "start": "864820",
    "end": "872334"
  },
  {
    "text": "theta is still a linear combination of your training examples. Okay. And- and again I did this with theta- the- the- it was really",
    "start": "872335",
    "end": "880150"
  },
  {
    "text": "theta 0 theta 1 up to theta n. Right? Whereas here we have uh,",
    "start": "880150",
    "end": "885865"
  },
  {
    "text": "B and then W1 down to WN. Wow, this pen is really bad.",
    "start": "885865",
    "end": "890889"
  },
  {
    "text": "[NOISE] I feel like- alright um, I feel like we should throw these away so they don't keep haunting us in the future.",
    "start": "890890",
    "end": "899035"
  },
  {
    "text": "Okay. Right, so but- but um, if you- but uh, uh,",
    "start": "899035",
    "end": "904570"
  },
  {
    "text": "so I did this a theta rather than W, but it turns out if you work through the algebra this is the proof by induction that, you know,",
    "start": "904570",
    "end": "911940"
  },
  {
    "text": "as you run a logistic regression after every iteration the parameters theta or the parameters W are always a linear combination of the training examples.",
    "start": "911940",
    "end": "922040"
  },
  {
    "text": "Um, and this is also true if you use batch gradient descent. [NOISE] If you use batch gradient descent [NOISE] then the update rule is this.",
    "start": "922040",
    "end": "929450"
  },
  {
    "text": "Um, Yeah, right, [NOISE] okay, alright.",
    "start": "929450",
    "end": "939330"
  },
  {
    "text": "And so it turns out you can derive gradient descent for the support vector machine learning algorithm as well.",
    "start": "939330",
    "end": "944615"
  },
  {
    "text": "You can derive gradient descent optimized W subject to this and you can have a proof by induction. You know that no matter how many iterations you run during descent,",
    "start": "944615",
    "end": "952160"
  },
  {
    "text": "it will always be a linear combination of the training examples. So that's one intuition for how",
    "start": "952160",
    "end": "960880"
  },
  {
    "text": "[NOISE] you might see that assuming W is a linear combination of the training examples,",
    "start": "960880",
    "end": "967555"
  },
  {
    "text": "you know is a- is a reasonable assumption. [NOISE] I wanna present a second set of",
    "start": "967555",
    "end": "975350"
  },
  {
    "text": "intuitions and this one will be easier if you're good at visualizing high dimensional spaces I guess.",
    "start": "975350",
    "end": "981410"
  },
  {
    "text": "But uh, let me just give intuition number two which is um let's see.",
    "start": "981410",
    "end": "988625"
  },
  {
    "text": "So um, so first of all let's take our example just now right?",
    "start": "988625",
    "end": "997260"
  },
  {
    "text": "Let's say that the classifier uses this, 2, 1 [NOISE] X minus 2, right?",
    "start": "997260",
    "end": "1005435"
  },
  {
    "text": "So this is W and this is B. Then it turns out that the decision boundary is this where this is 1 and this is uh,",
    "start": "1005435",
    "end": "1017950"
  },
  {
    "text": "2 and it turns out that the vector W is always at 90 degrees to the decision boundary right?",
    "start": "1017950",
    "end": "1026220"
  },
  {
    "text": "This is a factor of I guess geometry or something or linear algebra, right?",
    "start": "1026220",
    "end": "1031600"
  },
  {
    "text": "Where as the vector W 2, 1. So the vector W, you know, is sort of 2 to the right side and 1 up is always at- well, alright.",
    "start": "1031600",
    "end": "1041464"
  },
  {
    "text": "The vector w is always at 90 degrees um, to the decision boundary and the decision boundary separates where",
    "start": "1041465",
    "end": "1048280"
  },
  {
    "text": "you predict positive from where you predict negative. Okay? And so it it turns out that uh,",
    "start": "1048280",
    "end": "1058740"
  },
  {
    "text": "if you have uh, to take a simple example, let's say you have um,",
    "start": "1058740",
    "end": "1064185"
  },
  {
    "text": "two training examples, a positive example and a negative example.",
    "start": "1064185",
    "end": "1070515"
  },
  {
    "text": "Right? Then by illus- X2 right? The linear algebra way of saying this is that",
    "start": "1070515",
    "end": "1077440"
  },
  {
    "text": "the vector W lies in the span of the training examples. Okay? Oh and- and- and um,",
    "start": "1077440",
    "end": "1083310"
  },
  {
    "text": "the way to picture this is that W sets the direction of the decision boundary and as you vary B then the position so you- the relative position,",
    "start": "1083310",
    "end": "1092200"
  },
  {
    "text": "you know setting different values of B will move that decision boundary back and forth like this. And W uh, pins the direction of the decision boundary.",
    "start": "1092200",
    "end": "1101544"
  },
  {
    "text": "Okay? Um, and just one last example for- for why this might be true um,",
    "start": "1101545",
    "end": "1109270"
  },
  {
    "text": "is uh- so we're going to be working in very very high dimensional feature spaces.",
    "start": "1112760",
    "end": "1119770"
  },
  {
    "text": "For this example, let's say you have uh, [NOISE] three features X1, X2, X3 right? And_ and later we'll get to where this is like 100 trillion right?",
    "start": "1119770",
    "end": "1127539"
  },
  {
    "text": "Um, and let's say for the sake of illustration that all of your examples lie in the plane of X1 and X2.",
    "start": "1127540",
    "end": "1133990"
  },
  {
    "text": "So let's say X3 is equal to 0.",
    "start": "1133990",
    "end": "1136760"
  },
  {
    "text": "Okay, so let's say if all your training examples x equals 0, um,",
    "start": "1140140",
    "end": "1145700"
  },
  {
    "text": "then the decision boundary, you know, will be- will be some sort of vertical plane that looks like this, right?",
    "start": "1145700",
    "end": "1153679"
  },
  {
    "text": "So this is going to be the plane specifying, um, w transpose x plus b equals 0 when now w and x are three-dimensional.",
    "start": "1153680",
    "end": "1163805"
  },
  {
    "text": "Um, and so the vector w, uh, will have a- should have W_3 equals 0 right.",
    "start": "1163805",
    "end": "1175475"
  },
  {
    "text": "If- if one of the features is always 0, is always fixed then you know, W_3 should be equal to 0 and that's another way of saying that the vector w,",
    "start": "1175475",
    "end": "1184774"
  },
  {
    "text": "you know, should be, um, represented as a- as a- in- in the span of just the features x1,",
    "start": "1184775",
    "end": "1190055"
  },
  {
    "text": "x2, as a span of the training examples [NOISE] okay.",
    "start": "1190055",
    "end": "1194790"
  },
  {
    "text": "All right, I'm not sure if- if either intuition 1 or intuition 2 convinces you,",
    "start": "1196150",
    "end": "1201410"
  },
  {
    "text": "I think hopefully that's good enough. But this- the second intuition would be easier if you're used to thinking about vectors in high-dimensional feature spaces.",
    "start": "1201410",
    "end": "1211010"
  },
  {
    "text": "Um, and again the formal proof of this result which is called the representation theorem is given in the lecture notes, but it's a very bizarre",
    "start": "1211010",
    "end": "1221255"
  },
  {
    "text": "I don't know, it's actually- it's actually one of the most complicated- it's one- it's definitely the high end in terms of complexity of the- of the full derivation,",
    "start": "1221255",
    "end": "1228695"
  },
  {
    "text": "of the formal derivation of this result. Um, so.",
    "start": "1228695",
    "end": "1234290"
  },
  {
    "text": "[NOISE] All right,",
    "start": "1234290",
    "end": "1241955"
  },
  {
    "text": "so let's assume that W can be written as follows. Um, so optimization problem was this,",
    "start": "1241955",
    "end": "1251570"
  },
  {
    "text": "you wanna solve for w and b so that the norm of w squared is as small as",
    "start": "1251570",
    "end": "1257690"
  },
  {
    "text": "possible and so that the a-this is bigger than the other one, right?",
    "start": "1257690",
    "end": "1266000"
  },
  {
    "text": "Um, for every value of i. [NOISE] So let's see,",
    "start": "1266000",
    "end": "1274054"
  },
  {
    "text": "norm of w squared. This is just equal to w transpose w,",
    "start": "1274055",
    "end": "1280040"
  },
  {
    "text": "um, and so if you plug in this definition of W,",
    "start": "1280040",
    "end": "1286055"
  },
  {
    "text": "you know, into these equations you have as the optimization objective min of one half, um,",
    "start": "1286055",
    "end": "1294470"
  },
  {
    "text": "sum from i equals 1 through m. [NOISE]",
    "start": "1294470",
    "end": "1299890"
  },
  {
    "text": "So this is w transpose W,",
    "start": "1299890",
    "end": "1311290"
  },
  {
    "text": "um, which is equal to I guess sum of i's sum over j,",
    "start": "1311290",
    "end": "1321230"
  },
  {
    "text": "alpha i, alpha j, y_i y_j. And then, um, X_i transpose X_j right?",
    "start": "1321230",
    "end": "1333515"
  },
  {
    "text": "And, um, I'm going to take this. So this is an inner product between X_I and X_J.",
    "start": "1333515",
    "end": "1339695"
  },
  {
    "text": "And I'm gonna use- I'm just gonna write it as this. Right, x_i this notation so x comma z, uh,",
    "start": "1339695",
    "end": "1350510"
  },
  {
    "text": "equals x transpose z, uh, is the inner product between two vectors.",
    "start": "1350510",
    "end": "1358190"
  },
  {
    "text": "This is maybe another alternative notation for writing inner products and when we derive kernels you see that, uh,",
    "start": "1358190",
    "end": "1364835"
  },
  {
    "text": "expressing your algorithm in terms of inner products between features X is-is the key mathematical step needed to derive kernels and we'll",
    "start": "1364835",
    "end": "1371450"
  },
  {
    "text": "use this slightly different sort of open-angle brackets close-angle brackets notation to denote",
    "start": "1371450",
    "end": "1377285"
  },
  {
    "text": "the-the inner product between two different feature vectors. So that is the optimization objective,",
    "start": "1377285",
    "end": "1385700"
  },
  {
    "text": "um, oh, and then this constraint it becomes something else i guess, this becomes, uh, uh,",
    "start": "1385700",
    "end": "1391385"
  },
  {
    "text": "what is it, um, y_i times W which is,",
    "start": "1391385",
    "end": "1400460"
  },
  {
    "text": "um, transpose x plus b is greater than 1.",
    "start": "1400460",
    "end": "1411065"
  },
  {
    "text": "And again this simplifies or if you just multiply this out. [NOISE].",
    "start": "1411065",
    "end": "1429590"
  },
  {
    "text": "So just to make sure that mapping is clear, um- uh, all these pens are dying.",
    "start": "1429590",
    "end": "1435890"
  },
  {
    "text": "All right I'll not [NOISE]. All right.",
    "start": "1435890",
    "end": "1444620"
  },
  {
    "text": "So that becomes this and this becomes that, okay.",
    "start": "1444620",
    "end": "1453995"
  },
  {
    "text": "Um, and the key property we're going to use is that,",
    "start": "1453995",
    "end": "1459140"
  },
  {
    "text": "if you look at these two equations in terms of how we pose the optimization problem, the only place that the feature vectors appears is in this inner product.",
    "start": "1459140",
    "end": "1469410"
  },
  {
    "text": "Right, um, and it turns out when we talked about the Kernel Trick and we talked with the application of kernels,",
    "start": "1470200",
    "end": "1477980"
  },
  {
    "text": "it turns out that, um, if you can compute this very efficiently, that's when you can get away with manipulating even infinite dimensional feature vectors.",
    "start": "1477980",
    "end": "1487205"
  },
  {
    "text": "We- we'll get to this in a second. But the reason we want to write the whole algorithm in terms of inner products is, uh,",
    "start": "1487205",
    "end": "1492845"
  },
  {
    "text": "there'll be important cases where the feature vectors are 100 trillion dimensional but you",
    "start": "1492845",
    "end": "1498980"
  },
  {
    "text": "can compute the- or even infinite dimensional but you can compute the inner product very efficiently without needing to loop over,",
    "start": "1498980",
    "end": "1505235"
  },
  {
    "text": "you know, the other 100 trillion elements in an array, right? And- and we'll see exactly how to do that, um, later in- in- very shortly.",
    "start": "1505235",
    "end": "1513635"
  },
  {
    "text": "Okay? [NOISE]",
    "start": "1513635",
    "end": "1525110"
  },
  {
    "text": "So. All right, um, now it turns out that,",
    "start": "1525110",
    "end": "1532385"
  },
  {
    "text": "uh, we've now expressed the whole, um, optimization algorithm in terms of these parameters Alpha, right?",
    "start": "1532385",
    "end": "1540259"
  },
  {
    "text": "Defined here, uh, and b. So now the parameters Theta, now- now the parameter z is optimized for our Alpha, um,",
    "start": "1540260",
    "end": "1547595"
  },
  {
    "text": "it turns out that by convention in the way that you see support vector machines referred to,",
    "start": "1547595",
    "end": "1553070"
  },
  {
    "text": "you know, in research papers or in textbooks. It turns out there's a further simplification of that optimization problem which is that you can simplify to this,",
    "start": "1553070",
    "end": "1561890"
  },
  {
    "text": "[NOISE] um, and the derivation to go from that to this is again relatively complicated.",
    "start": "1561890",
    "end": "1570470"
  },
  {
    "text": "[NOISE] But it turns out you can further simplify the optimization problem I wrote there to this.",
    "start": "1570470",
    "end": "1580850"
  },
  {
    "text": "Okay? And again, uh, you- you can copy this down if you want but this is also written in the lecture notes.",
    "start": "1580850",
    "end": "1587765"
  },
  {
    "text": "And by convention this slightly simplified version optimization problem is called the dual optimization problem.",
    "start": "1587765",
    "end": "1595050"
  },
  {
    "start": "1591000",
    "end": "1728000"
  },
  {
    "text": "Um, the way to simplify that optimization problem to this one that's actually done by,",
    "start": "1596980",
    "end": "1604790"
  },
  {
    "text": "um, using convex optimization theory, uh, and- and- and again the derivation",
    "start": "1604790",
    "end": "1610024"
  },
  {
    "text": "is written in the lecture notes but I don't want to do that here. If- if you want think of it as doing a bunch more algebra to simplify that problem to this one",
    "start": "1610025",
    "end": "1617150"
  },
  {
    "text": "and consequently, you cancel out B along the way, it's a little more complicated than that but-but right, the full derivation is given in the lecture notes.",
    "start": "1617150",
    "end": "1625820"
  },
  {
    "text": "Um, and so, um, finally, you know, the way you train for-the way you make a prediction, right,",
    "start": "1625820",
    "end": "1634580"
  },
  {
    "text": "as you saw for the alpha i's and maybe for b, right, since you solve",
    "start": "1634580",
    "end": "1640640"
  },
  {
    "text": "this optimization problem or that optimization problem for the Alpha i's and then to make a prediction,",
    "start": "1640640",
    "end": "1648420"
  },
  {
    "text": "um, you need to compute",
    "start": "1651130",
    "end": "1658790"
  },
  {
    "text": "h of W b of x for a new test example which is g of w transpose x plus b.",
    "start": "1658790",
    "end": "1666485"
  },
  {
    "text": "Right. But because of the definition of w- w this is equal to g of,",
    "start": "1666485",
    "end": "1675480"
  },
  {
    "text": "um, that's W transpose X plus b because this is",
    "start": "1679900",
    "end": "1687530"
  },
  {
    "text": "w and so that's equal to g of sum over",
    "start": "1687530",
    "end": "1693650"
  },
  {
    "text": "i Alpha_i y_i inner product between X_i and X plus b.",
    "start": "1693650",
    "end": "1700070"
  },
  {
    "text": "And so once again, you know, once you have stored the Alphas in your computer memory,",
    "start": "1700070",
    "end": "1705320"
  },
  {
    "text": "um, you can make predictions using just inner products again, right? And so the entire algorithm both",
    "start": "1705320",
    "end": "1710540"
  },
  {
    "text": "the optimization objective you need to deal with during training. As well as how you make predictions is, um-uh,",
    "start": "1710540",
    "end": "1716330"
  },
  {
    "text": "is expressed only in terms of inner products, okay?",
    "start": "1716330",
    "end": "1720179"
  },
  {
    "text": "So we're now ready to",
    "start": "1722380",
    "end": "1729290"
  },
  {
    "start": "1728000",
    "end": "1736000"
  },
  {
    "text": "apply kernels and sometimes in",
    "start": "1729290",
    "end": "1735740"
  },
  {
    "text": "machine learning people sometimes we call this a kernel trick and let me just the other recipe for what this means,",
    "start": "1735740",
    "end": "1742085"
  },
  {
    "start": "1736000",
    "end": "1905000"
  },
  {
    "text": "uh, step 1 is write your whole algorithm, [NOISE] um.",
    "start": "1742085",
    "end": "1748760"
  },
  {
    "text": "[NOISE] In terms of X_i, X_j, in terms of inner products.",
    "start": "1748760",
    "end": "1756495"
  },
  {
    "text": "Uh, and instead of carrying the superscript, you know X_i, X_j, I'm sometimes gonna write inner product between X and Z, right?",
    "start": "1756495",
    "end": "1764460"
  },
  {
    "text": "Where X and Z are supposed to be proxies for two different training examples X_i and X_j but it",
    "start": "1764460",
    "end": "1769860"
  },
  {
    "text": "simplifies the notation, uh, right a little bit. Two, um, let there be some mapping,",
    "start": "1769860",
    "end": "1782770"
  },
  {
    "text": "um, from your original input features",
    "start": "1785960",
    "end": "1791309"
  },
  {
    "text": "X to some high dimensional set of features Phi.",
    "start": "1791310",
    "end": "1797070"
  },
  {
    "text": "Um, and so one example would be, let's say you try to predict the housing prices",
    "start": "1797070",
    "end": "1802620"
  },
  {
    "text": "or predicting a house will be sold in the next month. So maybe X in this case is the size of the house,",
    "start": "1802620",
    "end": "1808440"
  },
  {
    "text": "uh, or maybe is, uh, size and yeah, let write. Maybe X is the size of a house,",
    "start": "1808440",
    "end": "1814830"
  },
  {
    "text": "and so you could, um, take this 1D feature and expand it to a high dimensional feature vector with X,",
    "start": "1814830",
    "end": "1824055"
  },
  {
    "text": "X squared, X cubed, X to the 4th, right? So this would be one way of defining a high dimensional feature mapping.",
    "start": "1824055",
    "end": "1831050"
  },
  {
    "text": "Or another one could be, if you have two features X_1 and X_2, uh, corresponding to the size of the house and number of bedrooms,",
    "start": "1831050",
    "end": "1838190"
  },
  {
    "text": "now you can map this to different Phi X, which may be X_1, X_2,",
    "start": "1838190",
    "end": "1843525"
  },
  {
    "text": "X_1 times X_2, X_1 squared X_2, uh, X_1 X_2 squared, and so on.",
    "start": "1843525",
    "end": "1849540"
  },
  {
    "text": "They are kind of polynomials, set of features, or maybe another set of features as well, okay? And what we'll be able to do is,",
    "start": "1849540",
    "end": "1857385"
  },
  {
    "text": "work with, um, feature mappings, Phi of X, where the original input X may be 1D or 2D or, or whatever,",
    "start": "1857385",
    "end": "1865620"
  },
  {
    "text": "and Phi of X could be, you know, 100,000 dimensional or infinite dimensional.",
    "start": "1865620",
    "end": "1872200"
  },
  {
    "text": "That we'll be able to do this very efficiently right. Or even infinite dimensional, okay?",
    "start": "1872480",
    "end": "1880620"
  },
  {
    "text": "So I guess we will get some concrete examples of this later, but I want to give you the overall recipe.",
    "start": "1880620",
    "end": "1886270"
  },
  {
    "text": "And then, what we're going to do is to find a way to compute K of X comma Z,",
    "start": "1886520",
    "end": "1897915"
  },
  {
    "text": "equals Phi of X transpose Phi of Z.",
    "start": "1897915",
    "end": "1904875"
  },
  {
    "text": "So this is called the kernel function. And what we're gonna do is, we'll see that there are clever tricks so",
    "start": "1904875",
    "end": "1911520"
  },
  {
    "start": "1905000",
    "end": "2036000"
  },
  {
    "text": "that you can compute the inner product between X and Z even when Phi of X and Phi of Z are incredibly high dimensional, right?",
    "start": "1911520",
    "end": "1919289"
  },
  {
    "text": "We'll see an example of this in a- in- in very very soon. And step four is, um,",
    "start": "1919290",
    "end": "1926235"
  },
  {
    "text": "replace X, Z in algorithm",
    "start": "1926235",
    "end": "1931299"
  },
  {
    "text": "with K of X, Z, okay?",
    "start": "1932390",
    "end": "1939765"
  },
  {
    "text": "Um, because if you could do this then what you're doing is, you're running the whole learning algorithm on this high dimensional set of features,",
    "start": "1939765",
    "end": "1950220"
  },
  {
    "text": "um, and the problem with swapping out X for Phi of X,",
    "start": "1950220",
    "end": "1956100"
  },
  {
    "text": "right, is that, it can be very computationally expensive if you're working with 100,000 dimensional feature vectors, right.",
    "start": "1956100",
    "end": "1961785"
  },
  {
    "text": "I,I- even by to this standards, you know, 100,000, it's. it's not the biggest I've seen, I've seen, actually,",
    "start": "1961785",
    "end": "1966899"
  },
  {
    "text": "biggest I've seen that you have a billion features, uh, but even by today's standards, 100,000 features is actually quite a lot.",
    "start": "1966900",
    "end": "1972600"
  },
  {
    "text": "Um, uh, and- and if you're launching I said, just 100,000 is, is- this is a lot- lot of large number of features, I guess.",
    "start": "1972600",
    "end": "1980760"
  },
  {
    "text": "Um, and the problem of using this is it's quite computationally expensive, to carry around these 100,000 or million",
    "start": "1980760",
    "end": "1987690"
  },
  {
    "text": "dimensional or 100 million dimensional feature vectors or whatever. Um, but that's what you would do if you were to swap in Phi of X,",
    "start": "1987690",
    "end": "1996660"
  },
  {
    "text": "you know in the naive straightforward way for X, but what we'll see is that, if you can compute K of X, Z then you could,",
    "start": "1996660",
    "end": "2003395"
  },
  {
    "text": "because you've written your whole algorithm just in terms of inner products, then you don't ever need to explicitly compute Phi of X,",
    "start": "2003395",
    "end": "2010309"
  },
  {
    "text": "you can always just compute these kernels. Yeah. [inaudible]",
    "start": "2010310",
    "end": "2021590"
  },
  {
    "text": "Let me get to that later,",
    "start": "2021590",
    "end": "2030529"
  },
  {
    "text": "you know, I will go for some kernels and I will talk about uh, bias-variance probably on Wednesday. Yeah. I think the no free lunch theorem is",
    "start": "2030530",
    "end": "2038150"
  },
  {
    "start": "2036000",
    "end": "2080000"
  },
  {
    "text": "a fascinating theoretical concept but I think that it has been, I don't know, it's been less useful actually because I think we",
    "start": "2038150",
    "end": "2044840"
  },
  {
    "text": "have inductive biases that turn out to be useful. There's a famous theorem in learning theory called no free lunch.",
    "start": "2044840",
    "end": "2051859"
  },
  {
    "text": "It was like 20 years ago. That basically says that, in the worst case, learning algorithms do not work [NOISE].",
    "start": "2051860",
    "end": "2058669"
  },
  {
    "text": "For any learning algorithm, I can come up with some data distribution so that your learning algorithm sucks. That, that's roughly the no free lunch theorem,",
    "start": "2058670",
    "end": "2064129"
  },
  {
    "text": "proved about like 20 years ago. But it turns out most of the world- most of the time, the universe is not that hostile toward us.",
    "start": "2064130",
    "end": "2069620"
  },
  {
    "text": "So- so, yeah, so as the learning algorithms turned out okay [LAUGHTER].",
    "start": "2069620",
    "end": "2076820"
  },
  {
    "text": "Um, all right, let's go through one example of kernels.",
    "start": "2076820",
    "end": "2082940"
  },
  {
    "start": "2080000",
    "end": "3253000"
  },
  {
    "text": "Um, so for this example, let's say that your offer is not input features was three-dimensional X_1, X_2, X_3.",
    "start": "2082940",
    "end": "2090649"
  },
  {
    "text": "And let's say I'm gonna choose the feature mapping, Phi of X to be, um, o- so pair-wise, um, monomial terms.",
    "start": "2090650",
    "end": "2099424"
  },
  {
    "text": "So I'm gonna choose X_1 times X_1, X_1 X_2, X_1 X_3, X_2 X_1, all.",
    "start": "2099425",
    "end": "2111005"
  },
  {
    "text": "Okay. And there are a couple of duplicates so X_1 X_3 is equal to X_3 X_1 but I'll just write it out this way.",
    "start": "2114040",
    "end": "2121140"
  },
  {
    "text": "And so notice that, er, if you have- if X is in R_n, right?",
    "start": "2121510",
    "end": "2127790"
  },
  {
    "text": "Then Phi of X is in R_n squared, right. So got the three-dimensional features to nine dimensional.",
    "start": "2127790",
    "end": "2135830"
  },
  {
    "text": "And I'm using small numbers for illustration. In practice, think of X as 1,000 dimensional and so this is now a million.",
    "start": "2135830",
    "end": "2142670"
  },
  {
    "text": "Or think of this as maybe 10,000 and this is now like 100 million, okay. So n squared features is much bigger [NOISE].",
    "start": "2142670",
    "end": "2149630"
  },
  {
    "text": "Um, and then similarly, Phi of Z is going to be Z_1 Z_1, Z_1 Z_2,",
    "start": "2149630",
    "end": "2156869"
  },
  {
    "text": "okay? So we've gone from n features like 10,000 features,",
    "start": "2167410",
    "end": "2174349"
  },
  {
    "text": "to n squared features which, in this case, 100 million features. Um, so because there are n squared elements, right?",
    "start": "2174350",
    "end": "2188060"
  },
  {
    "text": "You will need order n squared time to compute Phi of",
    "start": "2188060",
    "end": "2197300"
  },
  {
    "text": "X or to compute phi X transpose Phi of Z explicitly, right?",
    "start": "2197300",
    "end": "2208055"
  },
  {
    "text": "So if you wanna compute the inner product between Phi of X and Phi of Z and they do it explicitly, in the obvious way, it'll take n squared time to just compute all of",
    "start": "2208055",
    "end": "2214970"
  },
  {
    "text": "these inner products and then do the- and, and then they'll compute this, er, com- compute this, right.",
    "start": "2214970",
    "end": "2220310"
  },
  {
    "text": "And it- it's actually n squared over 2, because a lot of these things are duplicated but that's the order n-squared.",
    "start": "2220310",
    "end": "2226470"
  },
  {
    "text": "But let's see if we can find a better way to do that. So what we want is to write out the kernel of x, z.",
    "start": "2235270",
    "end": "2243839"
  },
  {
    "text": "So this phi of x transpose phi of z, right?",
    "start": "2243850",
    "end": "2249575"
  },
  {
    "text": "And, uh, what I'm gonna prove is that this can be computed as x transpose z squared, right?",
    "start": "2249575",
    "end": "2258380"
  },
  {
    "text": "And the cool thing is that remember x is n-dimensional, z is n-dimensional.",
    "start": "2258380",
    "end": "2266404"
  },
  {
    "text": "So x transpose z squared, this is an order n time computation, right?",
    "start": "2266405",
    "end": "2272525"
  },
  {
    "text": "Because taking x transpose z, you know, that's just in a product of two n-dimensional vectors and then you take that number,",
    "start": "2272525",
    "end": "2279695"
  },
  {
    "text": "x transpose z is a real number, and you just square that number. So that's the order n time computation.",
    "start": "2279695",
    "end": "2286805"
  },
  {
    "text": "Um, and so let me just prove that x transpose z is equal to, well, le- le- le- let me, let me,",
    "start": "2286805",
    "end": "2292385"
  },
  {
    "text": "let me prove this step, right? Um, and so x transpose z squared that's equal to,",
    "start": "2292385",
    "end": "2299540"
  },
  {
    "text": "um, right.",
    "start": "2299540",
    "end": "2307520"
  },
  {
    "text": "So this is x transpose z, right?",
    "start": "2307520",
    "end": "2313085"
  },
  {
    "text": "And then times this is also x transpose z.",
    "start": "2313085",
    "end": "2320555"
  },
  {
    "text": "So this formula is z transpose z squared, it's x transpose z times itself. Um, and then if I rearranged sums,",
    "start": "2320555",
    "end": "2328310"
  },
  {
    "text": "this is equal to sum from i equals 1 through n, sum from j equals 1 through n, um,",
    "start": "2328310",
    "end": "2335330"
  },
  {
    "text": "x_i z_i, x_j z_j. Um, and this in turn is,",
    "start": "2335330",
    "end": "2343625"
  },
  {
    "text": "you know, sum over i, sum over j, of x_i x_j times z_i z_j, right?.",
    "start": "2343625",
    "end": "2358550"
  },
  {
    "text": "And so what this is doing, is it's marching through all possible pairs of i and j and multiplying x_i x_j,",
    "start": "2358550",
    "end": "2369665"
  },
  {
    "text": "with the corresponding z_i z_j and adding that up.",
    "start": "2369665",
    "end": "2375230"
  },
  {
    "text": "But of course; if you were to compute phi of x transpose phi of z,",
    "start": "2375230",
    "end": "2380315"
  },
  {
    "text": "what you do is you take this and multiply with that and then add it to the sum,",
    "start": "2380315",
    "end": "2385810"
  },
  {
    "text": "then take this and multiply with that and add it to the sum, and so on until you end up taking this and multiplying",
    "start": "2385810",
    "end": "2391465"
  },
  {
    "text": "that and adding it to your sum, right? So that's why, um- so that's why this formula is just,",
    "start": "2391465",
    "end": "2402125"
  },
  {
    "text": "you know, marching down these two lists this, and multiplying, multiplying, multiplying and add it up,",
    "start": "2402125",
    "end": "2407135"
  },
  {
    "text": "which is exactly, um, phi transpose.",
    "start": "2407135",
    "end": "2412050"
  },
  {
    "text": "Which is exactly phi of x transpose phi of z.",
    "start": "2412660",
    "end": "2419150"
  },
  {
    "text": "Okay? So this proves that, um, you've turned what was previously an order n square time calculation,",
    "start": "2419150",
    "end": "2426845"
  },
  {
    "text": "into an order n time calculation. Which means that, um,",
    "start": "2426845",
    "end": "2432484"
  },
  {
    "text": "if n was 10,000, instead of needing to manipulate 100,000",
    "start": "2432485",
    "end": "2438619"
  },
  {
    "text": "dimensional [NOISE] vectors to come up with these. Sorry. That's my phone buzzing. This is really loud.",
    "start": "2438620",
    "end": "2444800"
  },
  {
    "text": "Okay. Instead of needing to manipulate sort of 100,000 dimensional vectors,",
    "start": "2444800",
    "end": "2450380"
  },
  {
    "text": "you could do so manipulating only 10,000 dimensional vectors, okay?.",
    "start": "2450380",
    "end": "2455660"
  },
  {
    "text": "Now, um, a few other examples of kernels.",
    "start": "2455660",
    "end": "2461039"
  },
  {
    "text": "It turns out that, um, if you choose this kernel- so let's see.",
    "start": "2471790",
    "end": "2477410"
  },
  {
    "text": "We had k of x comma z equals x transpose z squared, um,",
    "start": "2477410",
    "end": "2484579"
  },
  {
    "text": "if we now add a plus c there where c is a constant, um, so c is just some fixed real number,",
    "start": "2484580",
    "end": "2491615"
  },
  {
    "text": "that corresponds to modifying your features as follows. Um, where instead of just this- you know,",
    "start": "2491615",
    "end": "2498835"
  },
  {
    "text": "binomial terms of pairs of these things, if we add plus c there, it corresponds to adding x_1,",
    "start": "2498835",
    "end": "2506305"
  },
  {
    "text": "x_2, x_3, uh, to this- to your set of features. Ah, technically, there's actually weighting on this.",
    "start": "2506305",
    "end": "2512780"
  },
  {
    "text": "There's your root 2c, root 2c, root 2c and then as a constant c there as well.",
    "start": "2512780",
    "end": "2518690"
  },
  {
    "text": "And you can prove this yourself, and it turns out that if this is your new definition for phi of x, and make the same change to phi of z.",
    "start": "2518690",
    "end": "2525260"
  },
  {
    "text": "You know, so root 2c z_1 and so on. Then if you can take the inner product of these, then it can be computed as this.",
    "start": "2525260",
    "end": "2532520"
  },
  {
    "text": "Right? And so that's- and, and, and so the role of the, um, constant c it trades off the relative weighting between the binomial terms the- you know,",
    "start": "2532520",
    "end": "2541835"
  },
  {
    "text": "x_i x_j, compared to the, to the single- to the first-degree terms the x_1 or, x_2 x_3.",
    "start": "2541835",
    "end": "2548820"
  },
  {
    "text": "Um, other examples, uh, if you choose this to the power of d, right?",
    "start": "2549970",
    "end": "2563320"
  },
  {
    "text": "Um, notice that this still is an order n time computation, right?",
    "start": "2563320",
    "end": "2570440"
  },
  {
    "text": "X transpose z takes order n time, you add a number to it and you take this the power of d. So you can compute this in order n time.",
    "start": "2570440",
    "end": "2576560"
  },
  {
    "text": "But this corresponds to now phi of x has all- um,",
    "start": "2576560",
    "end": "2584720"
  },
  {
    "text": "the number of terms turns out to be n plus d choose d but it doesn't matter. Uh, it turns out this contains all features of, uh,",
    "start": "2584720",
    "end": "2592580"
  },
  {
    "text": "monomials up to, uh,",
    "start": "2592580",
    "end": "2599120"
  },
  {
    "text": "order d. So by which I mean, um, i- i- if, let's say d is equal to 5, right?",
    "start": "2599120",
    "end": "2605990"
  },
  {
    "text": "Then this contains- then phi of x contains all the features of the form x_1 x_2 x_5 x_17 x_29, right?",
    "start": "2605990",
    "end": "2614690"
  },
  {
    "text": "This is a fifth degree thing, uh, or x, or x_1 x_2 squared x_3 x, you know, 18.",
    "start": "2614690",
    "end": "2622130"
  },
  {
    "text": "This is also a fifth order polynomial- a fifth order monomial it's called and so if you, um,",
    "start": "2622130",
    "end": "2628940"
  },
  {
    "text": "choose this as your kernel, this corresponds to constructing phi of x to contain all of these features and there are not exponentially many of them, right?",
    "start": "2628940",
    "end": "2636440"
  },
  {
    "text": "There a lot of these features. Any or all the, um, all, all the- these are called monomials. Basically all the polynomial terms, all the monomial terms,",
    "start": "2636440",
    "end": "2643475"
  },
  {
    "text": "up to a fifth degree polynomial, up to a fifth order monomial term. So- and there are- it turns out there are n plus z choose ds which is,",
    "start": "2643475",
    "end": "2651170"
  },
  {
    "text": "uh, roughly n plus d to the power of d very roughly. So this is a very, very large number of features, um,",
    "start": "2651170",
    "end": "2657770"
  },
  {
    "text": "but your computation doesn't blow up exponentially even as d increases.",
    "start": "2657770",
    "end": "2663440"
  },
  {
    "text": "Okay? So, um, what a support vector machine is, is, um,",
    "start": "2663440",
    "end": "2671540"
  },
  {
    "text": "taking the optimal margin classifier that we derived earlier, and applying the kernel trick to it,",
    "start": "2671540",
    "end": "2679130"
  },
  {
    "text": "uh, in which we already had the- so well. So optimal margin classifier plus the kernel trick,",
    "start": "2679130",
    "end": "2693150"
  },
  {
    "text": "right, that is the support vector machine. Okay? And so if you choose some of these kernels for example,",
    "start": "2693370",
    "end": "2702050"
  },
  {
    "text": "then you could run an SVM in these very, very high-dimensional feature spaces, uh, in these, you know, 100 trillion dimensional feature spaces.",
    "start": "2702050",
    "end": "2710555"
  },
  {
    "text": "But your computational time, scales only linearly, um, as order n,",
    "start": "2710555",
    "end": "2715955"
  },
  {
    "text": "as the numb- as a dimension of your input features x rather than as a function of this 100 trillion dimensional feature space,",
    "start": "2715955",
    "end": "2721910"
  },
  {
    "text": "you're actually building a linear classifier. Okay? So, um, why is this a good idea?",
    "start": "2721910",
    "end": "2729245"
  },
  {
    "text": "Let me just, sheesh. Let's show a quick video to give you intuition for what this is doing.",
    "start": "2729245",
    "end": "2739055"
  },
  {
    "text": "Um, let's see. Okay. I think the projector takes a while to warm up, does it?",
    "start": "2739055",
    "end": "2745730"
  },
  {
    "text": "[NOISE] All right. Any questions while we're- Yeah?",
    "start": "2745730",
    "end": "2751550"
  },
  {
    "text": "[inaudible]",
    "start": "2751550",
    "end": "2760145"
  },
  {
    "text": "Uh, yes. So, uh, this kernel function appears- applies only to this visual mapping. So each kernel function of, um, uh,",
    "start": "2760145",
    "end": "2767810"
  },
  {
    "text": "uh, yes, after trivial differences, right? If you have a feature mapping where the features that",
    "start": "2767810",
    "end": "2773530"
  },
  {
    "text": "could- are permuted or something, then the Kernel function stays the same. Uh, uh, so there are trivial chunk function- transformations like that but, uh,",
    "start": "2773530",
    "end": "2781150"
  },
  {
    "text": "if we have a totally different feature mapping, you would expect to need a totally different kernel function. Cool.",
    "start": "2781150",
    "end": "2793930"
  },
  {
    "text": "So I wanted to- let's see.",
    "start": "2793930",
    "end": "2799704"
  },
  {
    "text": "Ah, cool, awesome. Uh, I want to give you a visual picture [NOISE]",
    "start": "2799705",
    "end": "2813040"
  },
  {
    "text": "of what this um, [NOISE].",
    "start": "2813040",
    "end": "2829810"
  },
  {
    "text": "All right, um, this is a YouTube video that, uh, Kian Katanforoosh who teaches CS230 found and suggested I use.",
    "start": "2829810",
    "end": "2836540"
  },
  {
    "text": "So I don't- I don't know who Udi Aharoni is but this is a nice visualization of what a support vector machine is doing.",
    "start": "2836540",
    "end": "2842960"
  },
  {
    "text": "So um, let's see how the uh, uh, learning algorithm where you're trying to separate the blue dots from the red dots.",
    "start": "2842960",
    "end": "2851630"
  },
  {
    "text": "Right? So um, the blue and the red dots can't be separated by a straight line, but you put them on the plane and you use a feature mapping",
    "start": "2851630",
    "end": "2859370"
  },
  {
    "text": "phi to throw these points into much higher-dimensional space. So there's now three of these points in the three-dimensional space.",
    "start": "2859370",
    "end": "2865550"
  },
  {
    "text": "In the three-dimensional space, you can then find w. So w is now three-dimensional because it applied",
    "start": "2865550",
    "end": "2871280"
  },
  {
    "text": "the optimal margin classifier in this three-dimensional space that separates the blue dots and the red dots.",
    "start": "2871280",
    "end": "2877160"
  },
  {
    "text": "Uh, and if you now you know examine what this is doing back in the original space,",
    "start": "2877160",
    "end": "2883174"
  },
  {
    "text": "then your linear classifier actually defines that elliptical decision boundary.",
    "start": "2883175",
    "end": "2888710"
  },
  {
    "text": "That makes sense right? So you're taking the data- all right um,",
    "start": "2888710",
    "end": "2894530"
  },
  {
    "text": "so you're taking the data, uh, mapping it to a much higher dimensional feature space,",
    "start": "2894530",
    "end": "2900380"
  },
  {
    "text": "three-dimensional visualization that in practice can be 100 trillion dimensions and then finding",
    "start": "2900380",
    "end": "2905720"
  },
  {
    "text": "a linear decision boundary in that 100 trillion-dimensional space uh, which is going to be a hyperplane like a- like a straight, you know,",
    "start": "2905720",
    "end": "2912369"
  },
  {
    "text": "like a plane or a straight line or a plane and then when you look at what you just did in the original feature space you found a very non-linear decision boundary, okay?",
    "start": "2912370",
    "end": "2921950"
  },
  {
    "text": "Um, so this is why uh- and again here you can only",
    "start": "2922500",
    "end": "2928670"
  },
  {
    "text": "visualize relatively low dimensional feature spaces even, even on a display like that.",
    "start": "2928670",
    "end": "2934204"
  },
  {
    "text": "But you find that if you use an SVM kernel you know, um, right,",
    "start": "2934205",
    "end": "2947330"
  },
  {
    "text": "you could learn very non-linear decision boundaries like that. But that is a linear decision boundary in a very high-dimensional space.",
    "start": "2947330",
    "end": "2954530"
  },
  {
    "text": "But when you project it back down to you know, 2D you end up with a very non-linear decision boundary like that okay? All right.",
    "start": "2954530",
    "end": "2965430"
  },
  {
    "text": "So. Yeah. [inaudible] digital words [inaudible]",
    "start": "2965590",
    "end": "2974990"
  },
  {
    "text": "Oh sure, yes. So uh, in this high dimensional space represented by the feature mapping phi of X does the data always have to be linearly separable?",
    "start": "2974990",
    "end": "2982100"
  },
  {
    "text": "So far we're pretending that it does, I'll come here back and fix that assumption later today. Yeah.",
    "start": "2982100",
    "end": "2987630"
  },
  {
    "text": "Okay, so um now, how do you make kernels?",
    "start": "2993280",
    "end": "3000769"
  },
  {
    "text": "Right? Um, so here's here's some- so here's some intuition you might have about kernels.",
    "start": "3002850",
    "end": "3012010"
  },
  {
    "text": "Um if X and Z are",
    "start": "3012010",
    "end": "3018100"
  },
  {
    "text": "similar you know if two if two- and for",
    "start": "3018100",
    "end": "3023320"
  },
  {
    "text": "the examples X and Z are close to each other or similar to each other then K of x z,",
    "start": "3023320",
    "end": "3029470"
  },
  {
    "text": "which is the inner product between X and Z, right?",
    "start": "3029470",
    "end": "3034965"
  },
  {
    "text": "Presumably this should be large. Um and conversely if X and Z are dissimilar then K of x z,",
    "start": "3034965",
    "end": "3047619"
  },
  {
    "text": "you know this maybe should be small, right? Because uh the inner product of",
    "start": "3047620",
    "end": "3053320"
  },
  {
    "text": "two very similar vectors that are pointing the same direction should be large and the inner product of two dissimilar vectors should be small.",
    "start": "3053320",
    "end": "3061090"
  },
  {
    "text": "Right? So this is one uh guiding principle behind, you know, what you see in a lot of kernels.",
    "start": "3061090",
    "end": "3066370"
  },
  {
    "text": "Just if- if this is phi of x and this is phi of z, the inner product is large but then they kinda point off in random directions,",
    "start": "3066370",
    "end": "3074755"
  },
  {
    "text": "the inner product will be small right? That's how vector inner product works. Um and so- well what if we just pull",
    "start": "3074755",
    "end": "3082810"
  },
  {
    "text": "a function out of these three here, out of the air um, which is K of xz equals e to the negative x minus z squared over 2 sigma squared.",
    "start": "3082810",
    "end": "3095270"
  },
  {
    "text": "Right? So this is one example of a similarity sim sim sim sim- if you think of kernels as a similarity measure of a function,",
    "start": "3095790",
    "end": "3104305"
  },
  {
    "text": "this you know let's just make up another similarity measure of a function and this does have the property that if",
    "start": "3104305",
    "end": "3110529"
  },
  {
    "text": "X and Z are very close to each other then this would be e to the 0 which is about 1.",
    "start": "3110530",
    "end": "3116905"
  },
  {
    "text": "But if X and Z are very far apart then this would be small, right? So this function it- it actually satisfies this criteria.",
    "start": "3116905",
    "end": "3124435"
  },
  {
    "text": "It satisfies those criteria and the question is uh, is it okay to use this as a kernel function?",
    "start": "3124435",
    "end": "3133150"
  },
  {
    "text": "Right? So it turns out that um a function like that K of x z,",
    "start": "3133150",
    "end": "3140035"
  },
  {
    "text": "you can use it as a kernel function. Only if there exists",
    "start": "3140035",
    "end": "3147440"
  },
  {
    "text": "some phi such that K of x z equals phi of X transpose phi Z right?",
    "start": "3150120",
    "end": "3161035"
  },
  {
    "text": "So we derived the whole algorithm assuming this to be true and it turns out if you plug in the kernel function for which this isn't true,",
    "start": "3161035",
    "end": "3167980"
  },
  {
    "text": "then all of the derivation we wrote down breaks down and the optimization problem you know um, uh, can have very strange solutions, right?",
    "start": "3167980",
    "end": "3177205"
  },
  {
    "text": "That don't correspond to good classification though a good classifier at all. Um and so this puts some constraints on",
    "start": "3177205",
    "end": "3183250"
  },
  {
    "text": "what kernel functions we could  or for example, one thing it must satisfy is K of X X which is phi X transpose phi of Z.",
    "start": "3183250",
    "end": "3193089"
  },
  {
    "text": "This would better be greater than equal to 0, right? Sorry right?",
    "start": "3193090",
    "end": "3198204"
  },
  {
    "text": "Because inner product of a vector with itself had better be non-negative. So K of X X is ever 0 or less than 0,",
    "start": "3198205",
    "end": "3204369"
  },
  {
    "text": "then this is not a valid kernel function, okay? Um, more generally, there's",
    "start": "3204370",
    "end": "3211375"
  },
  {
    "text": "a theorem that uh proves when is something a valid kernel.",
    "start": "3211375",
    "end": "3216805"
  },
  {
    "text": "Um, somebody just outlined that that proof very briefly which is uh,",
    "start": "3216805",
    "end": "3222190"
  },
  {
    "text": "less than X_1 up to X_d you know be any d points, right?",
    "start": "3222190",
    "end": "3231430"
  },
  {
    "text": "And let's let K- sorry about overloading of",
    "start": "3231430",
    "end": "3238900"
  },
  {
    "text": "notation um this is a- so K represents a kernel function and I'm gonna use K to represent the kernel matrix as well.",
    "start": "3238900",
    "end": "3248299"
  },
  {
    "text": "Sometimes it's also called the gram matrix uh but it's called the kernel matrix.",
    "start": "3249540",
    "end": "3254980"
  },
  {
    "start": "3253000",
    "end": "3556000"
  },
  {
    "text": "So that K_ ij is equal to the kernel function applied to two of those points um X_i and X_j, right?",
    "start": "3254980",
    "end": "3264490"
  },
  {
    "text": "So you have d points. So just apply the Kernel function to every pair of those points and put them in a matrix, in a big d by d matrix like that.",
    "start": "3264490",
    "end": "3272630"
  },
  {
    "text": "So it turns out that uh, given any vector Z- I think you've seen something similar to this in problem set one,",
    "start": "3276150",
    "end": "3288865"
  },
  {
    "text": "but given any vector z, z transpose K z which is sum over i sum over",
    "start": "3288865",
    "end": "3297010"
  },
  {
    "text": "j z i k i j z j, right?",
    "start": "3297010",
    "end": "3303400"
  },
  {
    "text": "Um if K is a valid kernel function so if there is some feature mapping phi,",
    "start": "3303400",
    "end": "3310000"
  },
  {
    "text": "then this should equal to sum of i sum of j Z_i phi of X_i transpose phi",
    "start": "3310000",
    "end": "3319735"
  },
  {
    "text": "of z X_j times Z_j and by a couple other steps.",
    "start": "3319735",
    "end": "3329570"
  },
  {
    "text": "Um let's see. This phi of X_i transpose phi of X_j.",
    "start": "3329570",
    "end": "3335230"
  },
  {
    "text": "I'm gonna to expand out that inner product. So sum over k, phi of X_ i,",
    "start": "3335230",
    "end": "3341140"
  },
  {
    "text": "element k times phi of X_j element k times Z_ j,",
    "start": "3341140",
    "end": "3347650"
  },
  {
    "text": "um and then we are arranging",
    "start": "3347650",
    "end": "3353619"
  },
  {
    "text": "sums is sum- sum over K oh sorry I'm running out of whiteboard let me just do it on the next board.",
    "start": "3353620",
    "end": "3361339"
  },
  {
    "text": "So we arrange sums, sum of k, sum of i, sum of j,",
    "start": "3374160",
    "end": "3382675"
  },
  {
    "text": "z i phi of x i subscript k,",
    "start": "3382675",
    "end": "3388870"
  },
  {
    "text": "times phi of x [NOISE] j subscript k times z j.",
    "start": "3388870",
    "end": "3398600"
  },
  {
    "text": "Which is sum of the k [NOISE]",
    "start": "3399270",
    "end": "3408700"
  },
  {
    "text": "squared and therefore this must be greater than or equal to 0. Right. And so this proves that the matrix K,",
    "start": "3408700",
    "end": "3417010"
  },
  {
    "text": "ah, the kernel matrix k is positive semi-definite. Okay. Um, and so more generally,",
    "start": "3417010",
    "end": "3426490"
  },
  {
    "text": "it turns out that this is also a sufficient condition, um, for a kernel function to- for our function k to be a valid kernel function.",
    "start": "3426490",
    "end": "3437815"
  },
  {
    "text": "So let me just write this out. This is called a Mercer's Theorem, M-E-R-C-E-R.",
    "start": "3437815",
    "end": "3448380"
  },
  {
    "text": "Wait, um, so K is a valid kernel.",
    "start": "3448380",
    "end": "3456069"
  },
  {
    "text": "[NOISE] So K is",
    "start": "3456070",
    "end": "3462250"
  },
  {
    "text": "a valid kernel function i.e there exists phi such that K of x z,",
    "start": "3462250",
    "end": "3470140"
  },
  {
    "text": "equals phi of x, transpose phi of z if and only",
    "start": "3470140",
    "end": "3476440"
  },
  {
    "text": "if for any d points,",
    "start": "3476440",
    "end": "3483259"
  },
  {
    "text": "you know, x one up to x z, on the corresponding kernel matrix",
    "start": "3484950",
    "end": "3492640"
  },
  {
    "text": "[NOISE] is a positive semi-definite.",
    "start": "3492640",
    "end": "3502119"
  },
  {
    "text": "So if you write this K greater equals 0. Okay. Um, and I proved just one-dimens- one- one direction of this implication.",
    "start": "3502120",
    "end": "3510075"
  },
  {
    "text": "Right. This proof outline here shows that if it is a valid kernel function, ah, then this is positive semi-definite.",
    "start": "3510075",
    "end": "3516810"
  },
  {
    "text": "Um, this outline didn't prove the opposite direction. You see if and only if. Right. Shows both directions.",
    "start": "3516810",
    "end": "3522760"
  },
  {
    "text": "So this, ah, algebra we did just now proves that dimension of the proof I didn't prove the reverse dimension.",
    "start": "3522760",
    "end": "3529000"
  },
  {
    "text": "But this turns out to be an if and only if condition. And so this gives maybe one test for,",
    "start": "3529000",
    "end": "3534615"
  },
  {
    "text": "um, whether or not something is a valid kernel function. Okay. Um, and it turns out that- the kernel I wrote up there, um,",
    "start": "3534615",
    "end": "3544690"
  },
  {
    "text": "that one, K of x z, uh.",
    "start": "3544690",
    "end": "3553540"
  },
  {
    "text": "Right. And it turns out this is a valid kernel. This is called the Gaussian kernel.",
    "start": "3553540",
    "end": "3558740"
  },
  {
    "start": "3556000",
    "end": "3579000"
  },
  {
    "text": "This is, uh, probably the most widely used kernel. Um, well a- actually well,",
    "start": "3560070",
    "end": "3567370"
  },
  {
    "text": "uh, let me [NOISE].",
    "start": "3567370",
    "end": "3576610"
  },
  {
    "text": "Well, but the actually the most widely used kernel is-is maybe the linear kernel, um,",
    "start": "3576610",
    "end": "3584350"
  },
  {
    "start": "3579000",
    "end": "4317000"
  },
  {
    "text": "which just uses K of x z equals x transpose z,",
    "start": "3584350",
    "end": "3590200"
  },
  {
    "text": "ah, and so this is using you know phi of x equals x. Right. So no- no- no high dimensional features.",
    "start": "3590200",
    "end": "3596515"
  },
  {
    "text": "So sometimes you call it the linear kernel. It just means you're not using a high dimensional feature mapping or the feature mapping is just equal to the original features.",
    "start": "3596515",
    "end": "3604060"
  },
  {
    "text": "Ah, this is this is actually a pretty commonly used kernel function, ah, you- you're not taking advantage of kernels in other words.",
    "start": "3604060",
    "end": "3611079"
  },
  {
    "text": "Ah,but after the linear kernel the Gaussian kernel is probably the most widely used kernel, uh,",
    "start": "3611080",
    "end": "3616674"
  },
  {
    "text": "the one I wrote up there and this corresponds to a feature dimensional space that is um, infinite dimensional.",
    "start": "3616675",
    "end": "3626140"
  },
  {
    "text": "Right. And, ah, this is actually- this particular kernel function,",
    "start": "3626140",
    "end": "3631180"
  },
  {
    "text": "corresponds to using all monomial features. So if you have, ah, you know, X one and also X 1,",
    "start": "3631180",
    "end": "3637060"
  },
  {
    "text": "X 2 and X 1 squared X 2 and X 1 squared X 5 to the 10 and so on up to X 1 to the 10,000 and X 2 to the 17.",
    "start": "3637060",
    "end": "3647530"
  },
  {
    "text": "Right. Whatever. Um, ah, so this particular kernel corresponds to using",
    "start": "3647530",
    "end": "3653605"
  },
  {
    "text": "all these polynomial features without end going to arbitrarily high dimensional um,",
    "start": "3653605",
    "end": "3659244"
  },
  {
    "text": "by giving a smaller weighting to the very very high dimensional ones. Which is why it's wide. Yeah.",
    "start": "3659245",
    "end": "3665095"
  },
  {
    "text": "Okay. Um, great.",
    "start": "3665095",
    "end": "3675880"
  },
  {
    "text": "So the, ah, kernel to end- toward the end, I'll give some other examples of kernels. Um, so it turns out that the kernel trick",
    "start": "3675880",
    "end": "3683365"
  },
  {
    "text": "is more general than the support vector machine. Um, it was really popularized by",
    "start": "3683365",
    "end": "3689455"
  },
  {
    "text": "the support vector machine where you know researchers, ah, because Vladimir Vapnik and Corinna Cortes found that applying these kernel tricks to a support vector machine,",
    "start": "3689455",
    "end": "3699280"
  },
  {
    "text": "makes for a very effective learning algorithm. But the kernel trick is actually more general and if you have any learning algorithm that you can write in terms of inner products like this,",
    "start": "3699280",
    "end": "3709045"
  },
  {
    "text": "then you can apply the kernel trick to it. Ah and so you- you play with this for a different learning algorithm in the ah,",
    "start": "3709045",
    "end": "3715510"
  },
  {
    "text": "in the programming assignments as well. And the way to apply the kernel trick is, take a learning algorithm write the whole thing in terms of",
    "start": "3715510",
    "end": "3721974"
  },
  {
    "text": "inner products and then replace it with K of x z for some appropriately chosen kernel function K of x z.",
    "start": "3721975",
    "end": "3730210"
  },
  {
    "text": "And all of the discriminative learning algorithms we've learned so far, um, ah, can be written in this way so that you can apply the kernel trick.",
    "start": "3730210",
    "end": "3739060"
  },
  {
    "text": "So linear regression, logistic regression, ah, everything of the generalized linear model family, the perceptron algorithm, all of the- all of those algorithms,",
    "start": "3739060",
    "end": "3747085"
  },
  {
    "text": "um, you can actually apply the kernel trick to. Which means that you could um, apply linear regression in an infinite dimensional feature space if you wish.",
    "start": "3747085",
    "end": "3755950"
  },
  {
    "text": "Right. Um, and later in this class we'll talk about principal components analysis,",
    "start": "3755950",
    "end": "3760960"
  },
  {
    "text": "which you've heard of but when we talk about principal components analysis, turns out that's yet another algorithm that can be written only in terms of",
    "start": "3760960",
    "end": "3766960"
  },
  {
    "text": "linear products and so there's an algorithm called kernel PCA, kernel principal component analysis. If you don't know what PCA is, don't worry about it we'll get to it later.",
    "start": "3766960",
    "end": "3773859"
  },
  {
    "text": "But a lot of algorithms can be, ah, married with the kernel trick. So implicitly apply the algorithm even in an infinite dimensional feature space,",
    "start": "3773860",
    "end": "3782455"
  },
  {
    "text": "but without needing your computer to have an infinite amount of memory or using infinite amounts of computation. Ah, for this- actually",
    "start": "3782455",
    "end": "3790090"
  },
  {
    "text": "the single place this is most powerfully applied is the- is the support vector machine. In practice I don't- in practice the kernel trick is",
    "start": "3790090",
    "end": "3796930"
  },
  {
    "text": "applied all the time for support vector machines and less often in other algorithms. [NOISE] All right.",
    "start": "3796930",
    "end": "3810290"
  },
  {
    "text": "Um, [NOISE] any questions, before we move on. No. Okay. [NOISE]",
    "start": "3817530",
    "end": "3834340"
  },
  {
    "text": "All right. So last two things I wanna do today, Um, one is fix the assumption that we had made that the data is linearly separable, right?",
    "start": "3834340",
    "end": "3847630"
  },
  {
    "text": "Um, so, you know, uh, sometimes you don't want your learning algorithm to have, uh,",
    "start": "3847630",
    "end": "3855250"
  },
  {
    "text": "um, zero errors on the training set, right? So when- when you take this low dimensional data and map it to a very high dimensional feature space,",
    "start": "3855250",
    "end": "3863110"
  },
  {
    "text": "the data does become much more separable. Uh, but it turns out that if your data set is a little bit noisy, [NOISE]",
    "start": "3863110",
    "end": "3883600"
  },
  {
    "text": "right, if your data looks like this, you've, maybe you wanted to find a decision boundary like that,",
    "start": "3883600",
    "end": "3891654"
  },
  {
    "text": "uh, and you don't want it to try so hard to separate every little example,",
    "start": "3891655",
    "end": "3896680"
  },
  {
    "text": "right, that's defined a really complicated decision boundary like that, right? So sometimes either the low-dimensional space or in the high dimensional space Phi, um,",
    "start": "3896680",
    "end": "3905320"
  },
  {
    "text": "you don't actually want the algorithms to separate out your data perfectly and- and then sometimes even in high dimensional feature space,",
    "start": "3905320",
    "end": "3910975"
  },
  {
    "text": "your data may not be linearly separable. You don't want the algorithm to, you know, have zero error on the training set.",
    "start": "3910975",
    "end": "3917875"
  },
  {
    "text": "And so, um, there's an algorithm called the L_1 norm [NOISE] soft margin SVM,",
    "start": "3917875",
    "end": "3928855"
  },
  {
    "text": "which is a, um, modification to the basic algorithm.",
    "start": "3928855",
    "end": "3934630"
  },
  {
    "text": "So the basic algorithm was min over this, right,",
    "start": "3934630",
    "end": "3940375"
  },
  {
    "text": "subject to, [NOISE] okay.",
    "start": "3940375",
    "end": "3948970"
  },
  {
    "text": "Um, [NOISE] and so what the L_1 norm sub margin does is the following;",
    "start": "3948970",
    "end": "3958599"
  },
  {
    "text": "It says, um, you know, previously this is saying that remember this is the geometric margin.",
    "start": "3958600",
    "end": "3964750"
  },
  {
    "text": "[NOISE] Right. If you normalize this by the norm of w becomes- excuse me,",
    "start": "3964750",
    "end": "3971500"
  },
  {
    "text": "this is the functional margin. Um, if you divide this by the norm of w it becomes the geometric margin.",
    "start": "3971500",
    "end": "3977380"
  },
  {
    "text": "Um, so this optimization problem was saying let's make sure each example has functional margin greater or equal to 1.",
    "start": "3977380",
    "end": "3985380"
  },
  {
    "text": "And in the L_1 soft margin SVM we're going to relax this. We're gonna say that this needs to be bigger than 1 minus",
    "start": "3985380",
    "end": "3991890"
  },
  {
    "text": "c. There's a Greek alphabet C. Um, and then we're gonna modify the cost function as follows.",
    "start": "3991890",
    "end": "4000000"
  },
  {
    "text": "[NOISE] Where these c I's are greater than or equal to 0.",
    "start": "4000000",
    "end": "4009570"
  },
  {
    "text": "Okay. So remember, um, if the function margin is greater or equal to 0, it means the algorithm is classifying that example correctly, right?",
    "start": "4009570",
    "end": "4017865"
  },
  {
    "text": "So long as this thing is getting 0, then, you know, y and this thing will have the same sign either both positive or both negative.",
    "start": "4017865",
    "end": "4026115"
  },
  {
    "text": "Uh, that's what it means for a product of two things to be greater than zero, both things have to have the same sign, right,",
    "start": "4026115",
    "end": "4032475"
  },
  {
    "text": "and so if this is if- if, um, so as long as this is bigger than 0,",
    "start": "4032475",
    "end": "4037530"
  },
  {
    "text": "it means it's classifying that example correctly. Um, and the SVM is asking for it to not just classify correctly,",
    "start": "4037530",
    "end": "4044790"
  },
  {
    "text": "but classify correctly with the- with the functional margin of the- at least 1. Um, and if you allow CI to be positive,",
    "start": "4044790",
    "end": "4054765"
  },
  {
    "text": "then that's relaxing that constraint. Okay. Um, but you don't want the CIs to be too big which is why",
    "start": "4054765",
    "end": "4061980"
  },
  {
    "text": "you add to the optimization cost function, a cost for making CI too big.",
    "start": "4061980",
    "end": "4069390"
  },
  {
    "text": "[NOISE] And so you optimize this as function of W. [NOISE] And these are Greek alphabets c.",
    "start": "4069390",
    "end": "4075990"
  },
  {
    "text": "[NOISE] Um, and if- if you draw a picture,",
    "start": "4075990",
    "end": "4081375"
  },
  {
    "text": "it turns out that, um,",
    "start": "4081375",
    "end": "4086430"
  },
  {
    "text": "in this example with that being the optimal decision boundary, um, it turns out that these examples- [NOISE]",
    "start": "4086430",
    "end": "4093780"
  },
  {
    "text": "these three examples would be equidistant from this straight line, right? Because if they weren't, then you can fiddle the straight line",
    "start": "4093780",
    "end": "4099779"
  },
  {
    "text": "to improve the margin even a little bit more. It turns out that these few examples have, um, functional margin exactly equal to 1.",
    "start": "4099780",
    "end": "4107449"
  },
  {
    "text": "And this example over there, we have functional margin equal to 2, and the further away examples of even bigger functional margins.",
    "start": "4107450",
    "end": "4113884"
  },
  {
    "text": "And what this optimization objective is saying is that it is okay if you have an example here,",
    "start": "4113885",
    "end": "4120855"
  },
  {
    "text": "where functional margin so everything right so everything here has functional margin one.",
    "start": "4120855",
    "end": "4127680"
  },
  {
    "text": "If an example here I have functional margin a little bit less than one. And this by having- by setting Ci to 0.5 say is",
    "start": "4127680",
    "end": "4135660"
  },
  {
    "text": "letting me [NOISE] get away with having function module lower than, less than 1. [NOISE] Um, er, one other reason why,",
    "start": "4135660",
    "end": "4147930"
  },
  {
    "text": "um, you might want to use the L_1 norm soft margin SVM is the following,",
    "start": "4147930",
    "end": "4153119"
  },
  {
    "text": "which is, um, [NOISE] let's say you have a data set that looks like this. [NOISE] You know,",
    "start": "4153119",
    "end": "4162029"
  },
  {
    "text": "seems like- it seems like that would be a pretty good decision boundary, right? But, um, if we add just,",
    "start": "4162030",
    "end": "4169319"
  },
  {
    "text": "you know, measure a lot of examples, a lot of evidence. But if you have just one outlier,",
    "start": "4169320",
    "end": "4175904"
  },
  {
    "text": "say over here, then technically the data set is still linearly separable, right?",
    "start": "4175905",
    "end": "4183929"
  },
  {
    "text": "[NOISE] If you really want to separate this data set, um, sorry, I seem to be killing these pens myself as well.",
    "start": "4183930",
    "end": "4191220"
  },
  {
    "text": "[NOISE] All right. If you want to separate out this data set, you can actually, you know,",
    "start": "4191220",
    "end": "4198105"
  },
  {
    "text": "choose that decision boundary. But the basic optimal margin classifier will allow the presence of one training example",
    "start": "4198105",
    "end": "4206220"
  },
  {
    "text": "[NOISE] to cause you to have this dramatic swing in the position of the decision boundaries.",
    "start": "4206220",
    "end": "4212099"
  },
  {
    "text": "So they are, because the original optimal margin classifier it optimizes for the worst-case margin,",
    "start": "4212100",
    "end": "4218025"
  },
  {
    "text": "the concept of optimizing for the worst-case margin allows one example by being the worst case training examples have a huge impact on",
    "start": "4218025",
    "end": "4226110"
  },
  {
    "text": "your decision boundary and so the L_1 soft margin SVM, um, allows the SVM to still keep the decision boundary closer to the blue line,",
    "start": "4226110",
    "end": "4235515"
  },
  {
    "text": "even when there's one outlier. And it makes it, um, much more robust outliers.",
    "start": "4235515",
    "end": "4241170"
  },
  {
    "text": "Okay. Um, [NOISE] and then if you go through the representer theorem derivation, uh,",
    "start": "4241170",
    "end": "4251010"
  },
  {
    "text": "you know, represent w as a function of the Alphas and so on, um, It turns out that the problem then simplifies to the following;",
    "start": "4251010",
    "end": "4258375"
  },
  {
    "text": "So this is- I'm just [NOISE] right,",
    "start": "4258375",
    "end": "4266805"
  },
  {
    "text": "after some- some- after, you know, the whole representing the calc- the whole represents a calculation, [NOISE] derivation.",
    "start": "4266805",
    "end": "4277770"
  },
  {
    "text": "[NOISE] This is just what we had previously.",
    "start": "4277770",
    "end": "4283320"
  },
  {
    "text": "[NOISE] I've not changed anything so far. [NOISE] Right.",
    "start": "4283320",
    "end": "4291420"
  },
  {
    "text": "This is just exactly what we had. Um, all right, and, uh- [NOISE]",
    "start": "4291420",
    "end": "4299280"
  },
  {
    "text": "And it turns out that, um, the only change to this is we end up with an additional condition on the authorize.",
    "start": "4299280",
    "end": "4309765"
  },
  {
    "text": "So if- if you go for that simplification, uh, now that you've changed the algorithm to have this extra term, uh,",
    "start": "4309765",
    "end": "4315989"
  },
  {
    "text": "then the- the- the new form- this is called the dual form with the optimization problem. The only change is that you end up with this additional condition, right?",
    "start": "4315990",
    "end": "4325110"
  },
  {
    "start": "4317000",
    "end": "4415000"
  },
  {
    "text": "The, the constraints between Alpha are between 0 and C. Um,",
    "start": "4325110",
    "end": "4331949"
  },
  {
    "text": "and it turns out that, uh, today there are very good, you know, packages, uh, software packages which are solving that for you.",
    "start": "4331950",
    "end": "4339930"
  },
  {
    "text": "I- I- I- I think once upon a time we were doing machine learning, you need to worry about whether your code for inverting matrices was good enough, right?",
    "start": "4339930",
    "end": "4347160"
  },
  {
    "text": "And when- when code for inverting matrices was less mature there's just one thing you had to think about. But today uh, linear algebra, you know,",
    "start": "4347160",
    "end": "4354210"
  },
  {
    "text": "packages have gotten good enough that when you invert the matrix you just invert the matrix. You don't have to worry too much- when you're",
    "start": "4354210",
    "end": "4359909"
  },
  {
    "text": "solving you don't have to worry too much about it. So in the early days of SVM solving this problem was really hard.",
    "start": "4359910",
    "end": "4365489"
  },
  {
    "text": "You had to worry if your optimization packages were optimizing it. But I think today there are very good numerical optimization packages.",
    "start": "4365490",
    "end": "4371400"
  },
  {
    "text": "They just solve this problem for you and you can just code without worrying about the- the details that much. All right.",
    "start": "4371400",
    "end": "4378645"
  },
  {
    "text": "So this L1 norm soft margin SVM and, uh, oh and so, um,",
    "start": "4378645",
    "end": "4384030"
  },
  {
    "text": "and so this parameter C is something you need to choose. We'll talk on Wednesday about how to choose this parameter.",
    "start": "4384030",
    "end": "4390554"
  },
  {
    "text": "But it trades off um- how much you want to insist on getting the training examples right versus you know,",
    "start": "4390555",
    "end": "4397065"
  },
  {
    "text": "saying it's okay if you label a few terms out of this one. [NOISE] We'll- we'll discuss on Wednesday when we discuss bias and variance.",
    "start": "4397065",
    "end": "4403949"
  },
  {
    "text": "How they choose a parameter like c. All right.",
    "start": "4403950",
    "end": "4410280"
  },
  {
    "text": "So the last thing I want to- last thing I'd like you to see today is uh just a few examples of um, SVM kernels.",
    "start": "4410280",
    "end": "4419730"
  },
  {
    "start": "4415000",
    "end": "4453000"
  },
  {
    "text": "Uh, let me just give um- all right. So, uh, it turns out the SVM with the polynomial kernel,",
    "start": "4419730",
    "end": "4428550"
  },
  {
    "text": "uh, works quite well. So this is, uh, you know k of x, z equals x transpose z to the d. This thing is called a polynomial kernel,",
    "start": "4428550",
    "end": "4439455"
  },
  {
    "text": "um, and this is called a Gaussian kernel which is really uh- the most widely used one is the Gaussian kernel.",
    "start": "4439455",
    "end": "4445829"
  },
  {
    "text": "Right. And it turns out that I guess early days of SVMs, you know, one of the proof points of SVMs was, um,",
    "start": "4445830",
    "end": "4452400"
  },
  {
    "text": "the field of machine learning was doing a lot of work on handwritten digit classification so that's uh- so a- a digit is a matrix of pixels with values that are,",
    "start": "4452400",
    "end": "4461820"
  },
  {
    "start": "4453000",
    "end": "4539000"
  },
  {
    "text": "you know, 0 or 1 or maybe grayscale values, right? And so if you take a list of pixel intensity values and list them,",
    "start": "4461820",
    "end": "4468210"
  },
  {
    "text": "so this is 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0 and just- this is all the pixel intensity values,",
    "start": "4468210",
    "end": "4477795"
  },
  {
    "text": "then this can be your feature X and you feed it to an SVM using either of these kernels um,",
    "start": "4477795",
    "end": "4484095"
  },
  {
    "text": "it'll do not too badly, uh, as a handwritten digit classification, right?",
    "start": "4484095",
    "end": "4489480"
  },
  {
    "text": "So there's a classic data set, um, called MNIST, which is a classic benchmark, uh, in computing- uh,",
    "start": "4489480",
    "end": "4495120"
  },
  {
    "text": "in- in history of machine learning and, um, it was a very surprising result many years ago that, you know,",
    "start": "4495120",
    "end": "4501870"
  },
  {
    "text": "support vector machine with a kernel like this does very well on handwritten digit classification.",
    "start": "4501870",
    "end": "4507855"
  },
  {
    "text": "Uh, in the past several years we've found that deep learning algorithms, specific convolutional neural networks do even better than the SVM.",
    "start": "4507855",
    "end": "4514215"
  },
  {
    "text": "But for some time, um, SVMs were the best algorithm uh, and- and they're very easy to use in turnkey.",
    "start": "4514215",
    "end": "4520140"
  },
  {
    "text": "There aren't a lot of parameters to filter with. So that's the one very nice property about them. Um, but more generally,",
    "start": "4520140",
    "end": "4528610"
  },
  {
    "text": "uh, a lot of the most innovative work in SVMs has been into design of kernels.",
    "start": "4529640",
    "end": "4535740"
  },
  {
    "text": "So here's one example. Um, let's say you want a protein sequence classifier, right?",
    "start": "4535740",
    "end": "4546480"
  },
  {
    "start": "4539000",
    "end": "4623000"
  },
  {
    "text": "So uh, uh protein sequences are made up of ami- of- of amino acids so,",
    "start": "4546480",
    "end": "4552525"
  },
  {
    "text": "you know, I guess a lot of our bodies are made of proteins and proteins are just sequences of amino acids and there are 20 amino acids, um, but, uh,",
    "start": "4552525",
    "end": "4561345"
  },
  {
    "text": "in order to simplify the description and really not worry too much of biology, I hope the biologists don't get mad at me,",
    "start": "4561345",
    "end": "4567675"
  },
  {
    "text": "I'm gonna pretend there are 26 amino acids even though there aren't because there are 26 alphabets. So I'm gonna use the alphabets A through Z to denote amino acids",
    "start": "4567675",
    "end": "4576105"
  },
  {
    "text": "even though I know there's supposed to be only 20 but it's just easier to talk with- with 26 alphabets. And so a protein is a sequence of alphabets.",
    "start": "4576105",
    "end": "4585250"
  },
  {
    "text": "Right? Because a protein in your body is a sequence that's made up of a sequence of amino acids and,",
    "start": "4589900",
    "end": "4596690"
  },
  {
    "text": "uh, amino acids can be very- variable length, some can be very, very long, some can be very, very short. So the question is,",
    "start": "4596690",
    "end": "4603030"
  },
  {
    "text": "how do you represent the feature X?",
    "start": "4603030",
    "end": "4609469"
  },
  {
    "text": "So it turns out- uh, and so, um, the goal is to get an input x and make a prediction about this particular protein.",
    "start": "4609710",
    "end": "4618869"
  },
  {
    "text": "Like, what is the function of this protein, right? And so- well, here's one way to design a feature vector which is, uh,",
    "start": "4618870",
    "end": "4626220"
  },
  {
    "start": "4623000",
    "end": "4825000"
  },
  {
    "text": "I'm going to list out all combinations of four amino acids.",
    "start": "4626220",
    "end": "4633960"
  },
  {
    "text": "You can tell this will take a while. Right. Go down to AAAZ and then AABA and so on.",
    "start": "4633960",
    "end": "4643800"
  },
  {
    "text": "Uh, and eventually, you know, there'll be a BAJT, TSTA down to ZZZZ.",
    "start": "4643800",
    "end": "4651405"
  },
  {
    "text": "Right. Um, and then I'm gonna construct phi of x according to the number of times I see this sequence in the amino acids.",
    "start": "4651405",
    "end": "4662190"
  },
  {
    "text": "So for example, BAJT appears twice.",
    "start": "4662190",
    "end": "4667275"
  },
  {
    "text": "So I'm gonna put 2 there um, uh, you know, TSTA, oh whatever.",
    "start": "4667275",
    "end": "4673815"
  },
  {
    "text": "Right. Appears once so I'm gonna put a 1  there and there are no AAAAs, no AAABs, no AAACs and so on.",
    "start": "4673815",
    "end": "4680430"
  },
  {
    "text": "Okay? So this is a- uh, a 20 to the 4, you know,",
    "start": "4680430",
    "end": "4686130"
  },
  {
    "text": "26 to the 4, 20 to the 4-dimensional feature vector. So this is a very, very high dimensional feature vector.",
    "start": "4686130",
    "end": "4691844"
  },
  {
    "text": "And it turns out that, um, using some statistic as 20 to the 4 is 160,000.",
    "start": "4691845",
    "end": "4697829"
  },
  {
    "text": "That's pretty high dimensional. Quite expensive to compute. And it turns out that using dynamic programming,",
    "start": "4697830",
    "end": "4705210"
  },
  {
    "text": "given two amino acid sequences you can compute phi of x transpose phi of z,",
    "start": "4705210",
    "end": "4710265"
  },
  {
    "text": "that's K of x,z. And there's a- there's a- there's a dynamic programming algorithm for doing this.",
    "start": "4710265",
    "end": "4716370"
  },
  {
    "text": "Uh, the details aren't important for first-year students, uh, if any of you, um, have taken an advanced CS algorithms course and learned",
    "start": "4716370",
    "end": "4722430"
  },
  {
    "text": "about the Knuth-Morris-Pratt algorithm, uh, it's- it's- it's quite similar to that.",
    "start": "4722430",
    "end": "4727650"
  },
  {
    "text": "Uh, so it's Don Knuth, right, Stanford- Stanford professor, emeritus professor here. So the DP algorithm is quite similar to that and um,",
    "start": "4727650",
    "end": "4734910"
  },
  {
    "text": "uh using this is actually quite um, this is actually a pretty decent algorithm for inputting a sequence of, say,",
    "start": "4734910",
    "end": "4743550"
  },
  {
    "text": "amino acids and training a supervised learning algorithm to make a call- binary classification on amino acid sequences.",
    "start": "4743550",
    "end": "4750045"
  },
  {
    "text": "Okay? So as you apply support vector machines one of the things you see is that depending on the input data you have,",
    "start": "4750045",
    "end": "4755955"
  },
  {
    "text": "there can be innovative kernels to use, uh, in order to measure the similarity of two amino acid sequences or",
    "start": "4755955",
    "end": "4763140"
  },
  {
    "text": "the similarity of two of whatever else and then to use that to um, build a classifier even on very strange shaped object which,",
    "start": "4763140",
    "end": "4771690"
  },
  {
    "text": "you now, do not come, um, as a feature. Okay? So um, uh,",
    "start": "4771690",
    "end": "4778605"
  },
  {
    "text": "and- and I think actually- another example- or if the input x is a histogram, you know, maybe of two different countries.",
    "start": "4778605",
    "end": "4784830"
  },
  {
    "text": "You have histograms of people's demographics it turns out that there is a kernel that's taking the min of",
    "start": "4784830",
    "end": "4790560"
  },
  {
    "text": "the two histograms and then summing up to compute a kernel function that inputs two histograms that measures how similar they are.",
    "start": "4790560",
    "end": "4796380"
  },
  {
    "text": "So there are many different kernel functions for many different unique types of inputs you might want to classify.",
    "start": "4796380",
    "end": "4801585"
  },
  {
    "text": "Okay? So that's it for SVMs uh, very useful algorithm and what we'll do on Wednesday is",
    "start": "4801585",
    "end": "4808920"
  },
  {
    "text": "continue with more advice on now the- all of these learning algorithms. We'll talk about bias and variance to give you more advice on how to actually apply them.",
    "start": "4808920",
    "end": "4817050"
  },
  {
    "text": "So let's break and then I'll look forward to seeing you on Wednesday.",
    "start": "4817050",
    "end": "4820750"
  }
]