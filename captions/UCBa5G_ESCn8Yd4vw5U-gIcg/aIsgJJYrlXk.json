[
  {
    "start": "0",
    "end": "239000"
  },
  {
    "text": "Hi everyone, I'm Dorsa, uh, and this week I'll be teaching",
    "start": "5210",
    "end": "10500"
  },
  {
    "text": "the state-based models and the plan is for the next couple of weeks for me to, to teach the state-based models MDPs, uh,",
    "start": "10500",
    "end": "16800"
  },
  {
    "text": "and games and then and after that Percy, we'll come back and talk about the later, some of the later topics.",
    "start": "16800",
    "end": "21900"
  },
  {
    "text": "So a few announcements. Uh, so homework 3 is out. So just make sure to look at that.",
    "start": "21900",
    "end": "27180"
  },
  {
    "text": "And then the grades for homework 1 will be coming out soon. So just yeah, be aware of that.",
    "start": "27180",
    "end": "32399"
  },
  {
    "text": "All right. So, so let's talk about state-based models, let's talk about search. So just to start,",
    "start": "32400",
    "end": "39135"
  },
  {
    "text": "I was thinking maybe we can start with this question. Uh, if you can, let me reset this.",
    "start": "39135",
    "end": "45915"
  },
  {
    "text": "So basically, okay, let me tell you what the question is and then think about it, and then after that I will get this working.",
    "start": "45915",
    "end": "51680"
  },
  {
    "text": "So, so the question is you have a farmer and the farmer has a cabbage, a goat, and a wolf,",
    "start": "51680",
    "end": "57020"
  },
  {
    "text": "and it's on one side of the river. Everything is on one side of the river. So you have this river. We have a farmer.",
    "start": "57020",
    "end": "63320"
  },
  {
    "text": "We have the farmer with a cabbage, with a goat, and with a wolf, okay. And the farmer wants to go to the other side of the river and take everything with, with,",
    "start": "63320",
    "end": "72410"
  },
  {
    "text": "with himself, um, and- but the thing is the farmer has a boat and in that boat can only fit two things.",
    "start": "72410",
    "end": "78425"
  },
  {
    "text": "So the farmer can be in it with, with one of these other things, okay? So the question is how many crossings can,",
    "start": "78425",
    "end": "84180"
  },
  {
    "text": "can the farmer do to take everything on the other side of the river? And there are a bunch of constraints,",
    "start": "84180",
    "end": "89474"
  },
  {
    "text": "the constraint is if you leave the cabbage and goat together the goat is going to eat the cabbage. So you can't really do that.",
    "start": "89474",
    "end": "95299"
  },
  {
    "text": "If you leave wolf with the goat, the wolf is going to eat the goat, you can't really do that.",
    "start": "95300",
    "end": "100340"
  },
  {
    "text": "How many crossings should you take to take everything to the other side? Think about it, talk to your neighbors, I'll get this working.",
    "start": "100340",
    "end": "107450"
  },
  {
    "text": "Everyone clear on the question? Okay. ",
    "start": "107450",
    "end": "111750"
  },
  {
    "text": "So the link doesn't work because, uh, we can't connect to Internet, but all right so.",
    "start": "154000",
    "end": "159160"
  },
  {
    "text": "Okay. So how many people think it is four? Four crossings. Five, five crossings.",
    "start": "159160",
    "end": "167735"
  },
  {
    "text": "Six, six. Some people think six. Seven? More people.",
    "start": "167735",
    "end": "174224"
  },
  {
    "text": "No solution? No solution. Okay. So the point is actually not like what the answer is,",
    "start": "174225",
    "end": "180050"
  },
  {
    "text": "we'll come back to this question and try to solve it, but I think the important points to, to think about right now is how you went about solving it.",
    "start": "180050",
    "end": "186620"
  },
  {
    "text": "So, so what were you thinking and what was the process that you were thinking when you were trying to solve, solve this problem.",
    "start": "186620",
    "end": "192519"
  },
  {
    "text": "And that is kind of the commonality that search problems have and, and we want to think about those types of problems where it's,",
    "start": "192520",
    "end": "198019"
  },
  {
    "text": "it's more challenging to answer these types of questions and let's say reflex based type of questions.",
    "start": "198020",
    "end": "203280"
  },
  {
    "text": "So, so that's kind of just a motivating example that we'll come back later. And here's an XKCD on this.",
    "start": "203280",
    "end": "209495"
  },
  {
    "text": "So basically one potential solution is the farmer takes the goat, goes to the other side, comes back,",
    "start": "209495",
    "end": "215760"
  },
  {
    "text": "takes the cabbage, goes to the other side and just leaves the wolf because why would he need a wolf,",
    "start": "215760",
    "end": "221239"
  },
  {
    "text": "why would a farmer need a wolf. So [LAUGHTER] if you answered four, you probably were thinking about this.",
    "start": "221240",
    "end": "226849"
  },
  {
    "text": "[LAUGHTER] And I guess it has like an interesting point in it because sometimes maybe you should change the problem.",
    "start": "226850",
    "end": "232849"
  },
  {
    "text": "Your model is completely wrong. Maybe, maybe sometimes you should rethink and go back to your model and try to fix that.",
    "start": "232850",
    "end": "238299"
  },
  {
    "text": "But anyways. So we'll come back to this question. So all right. So this was our guideline for the class,",
    "start": "238300",
    "end": "244550"
  },
  {
    "start": "239000",
    "end": "330000"
  },
  {
    "text": "and, and we have already talked about the reflex-based model. So we have talked about machine learning and how that can get applied,",
    "start": "244550",
    "end": "250160"
  },
  {
    "text": "and now we want to start talking about state-based models. This week, we're going to talk about search problems,",
    "start": "250160",
    "end": "255290"
  },
  {
    "text": "next week, MDPs, and then the week after we're going to talk about games. If you remember the kind of the guideline that,",
    "start": "255290",
    "end": "262669"
  },
  {
    "text": "that we had for the class was, uh, we were thinking about these three different paradigms of,",
    "start": "262670",
    "end": "267955"
  },
  {
    "text": "of modeling, all right, we talked about this already. So modeling, inference, and learning.",
    "start": "267955",
    "end": "276800"
  },
  {
    "text": "So for, for reflex-based models we talked about this already, right?",
    "start": "276800",
    "end": "282129"
  },
  {
    "text": "So what would the model be, well, it can be a linear predictor or it can be a neural network. So, so that was a model.",
    "start": "282130",
    "end": "288410"
  },
  {
    "text": "And then we talked about inference but in the case of reflex-based models it was really simple, it was just function evaluation.",
    "start": "288410",
    "end": "294560"
  },
  {
    "text": "You had, you had your neural network and you would just go about evaluating it and that was inference. And we also spent some time talking about learning.",
    "start": "294560",
    "end": "301280"
  },
  {
    "text": "So how would we use like let's say gradient descent to try to fit the parameters of the model, okay.",
    "start": "301280",
    "end": "307160"
  },
  {
    "text": "So similar thing with search-based models. You want to talk about these three different paradigms that we have in the class, and,",
    "start": "307160",
    "end": "313790"
  },
  {
    "text": "and the plan is to talk about models and inference today and then on Wednesday we'll talk about learning.",
    "start": "313790",
    "end": "319615"
  },
  {
    "text": "We kind of have the same sort of format next week too. So we're going to start talking about modeling and inference on Mondays,",
    "start": "319615",
    "end": "324770"
  },
  {
    "text": "Wednesdays are going to be about learning. So, so just to give you an idea of what the plan is.",
    "start": "324770",
    "end": "329845"
  },
  {
    "text": "All right. So, so what are search problems? Let's start with a few motivating examples. So, so one potential example one can think of is, is route finding.",
    "start": "329845",
    "end": "338490"
  },
  {
    "start": "330000",
    "end": "525000"
  },
  {
    "text": "So you might have a map and you want to go from point A to point B on the map, and you have an objective.",
    "start": "338490",
    "end": "344270"
  },
  {
    "text": "So you want to maybe find the shortest path or the fastest path or most scenic path.",
    "start": "344270",
    "end": "349849"
  },
  {
    "text": "That is your objective and the things you can do is you can take a bunch of actions. So you can do things like go straight,",
    "start": "349850",
    "end": "355370"
  },
  {
    "text": "turn left, turn right, and then the answer for the search problem is going to be a sequence of actions.",
    "start": "355370",
    "end": "360980"
  },
  {
    "text": "If, if you want to go from A to B with the shortest path, the answer that one would give is maybe turn right",
    "start": "360980",
    "end": "366800"
  },
  {
    "text": "first and then turn left and then right again or any, any of these sequences. Okay so, so this is just a canonical example of what a search problem is.",
    "start": "366800",
    "end": "374690"
  },
  {
    "text": "There are a few other examples. So for example you can think of robot, robot motion planning. So if you have a robot that wants to go from point A to point B,",
    "start": "374690",
    "end": "382985"
  },
  {
    "text": "then it might want to have different objectives for doing that. So again the question might be what is the fastest way of doing it",
    "start": "382985",
    "end": "389780"
  },
  {
    "text": "or what is the most energy efficient way of getting the robot to do that or, or what is the safest way of doing it.",
    "start": "389780",
    "end": "395420"
  },
  {
    "text": "Like another question that we are interested in is what is the most expressive or, or legible way of robot doing it so,",
    "start": "395420",
    "end": "401385"
  },
  {
    "text": "so people can understand what the robot really wants. So you might have again various types of objectives you can formalize that,",
    "start": "401385",
    "end": "407555"
  },
  {
    "text": "and then the actions that, that you can take in the case of the robot motion planning is the robot is going to have different joints,",
    "start": "407555",
    "end": "413420"
  },
  {
    "text": "and each one of the joints can translate and can rotate. So translation and rotation are the type of actions that you can take.",
    "start": "413420",
    "end": "419240"
  },
  {
    "text": "So, so in this case I have a robot with seven, seven joints and then I need to tell what each one of those joints should do in terms of translation and rotation.",
    "start": "419240",
    "end": "427535"
  },
  {
    "text": "That's your robot? This is my robot, yes. [LAUGHTER] It's a fetch robot. [LAUGHTER] All right.",
    "start": "427535",
    "end": "434310"
  },
  {
    "text": "So, so let's look at another example. So games is, is a fun example. So you might, uh,",
    "start": "434310",
    "end": "439400"
  },
  {
    "text": "think about something like Rubik's cube or, or this 15-puzzle, and again what do you wanna do as a search problem?",
    "start": "439400",
    "end": "445310"
  },
  {
    "text": "Well, you wanna, you wanna end up in configuration that's desirable, right? So you wanna end up in a configuration where,",
    "start": "445310",
    "end": "450590"
  },
  {
    "text": "where you have this type of ah, configuration on Rubik's cube or, or the 15 puzzle. So that, that is the goal, that's the objective.",
    "start": "450590",
    "end": "457764"
  },
  {
    "text": "And then the action is you can move pieces around here. So, so the sequence of actions might be how you're moving these pieces",
    "start": "457765",
    "end": "464210"
  },
  {
    "text": "around to get that particular configuration of the 15 puzzle, okay. So again another example of what a search problem is.",
    "start": "464210",
    "end": "471355"
  },
  {
    "text": "Um, machine translation is, is an interesting one if it's not necessarily",
    "start": "471355",
    "end": "476450"
  },
  {
    "text": "the most natural thing you might think about when you think about search problems, but what it is actually you can think about it as a search problem again.",
    "start": "476450",
    "end": "482690"
  },
  {
    "text": "So imagine you have a phrase in a different language and you want to translate it to English. So what is the objective here?",
    "start": "482690",
    "end": "488740"
  },
  {
    "text": "Well you can think of the objective as going to fluent English and preserving meaning. So, so that is the objective that one would have in machine translation.",
    "start": "488740",
    "end": "496490"
  },
  {
    "text": "Um, and, and then the type of actions that you're taking is you're appending words. So you start with the and then you're",
    "start": "496490",
    "end": "502460"
  },
  {
    "text": "appending blue to it and you're appending house to it. So, so as you're appending the- these different,",
    "start": "502460",
    "end": "507629"
  },
  {
    "text": "different words, those are the actions that you're taking. So, so in some sense you can have any complex sequential task and,",
    "start": "507630",
    "end": "514380"
  },
  {
    "text": "and the sequence of actions that you would get to get to your objective is there's going to be the answer for,",
    "start": "514380",
    "end": "519840"
  },
  {
    "text": "for your search problem and you can pose it as a search problem, okay? All right. So, so what is different",
    "start": "519840",
    "end": "526970"
  },
  {
    "start": "525000",
    "end": "578000"
  },
  {
    "text": "between let's say reflex-based models and, and search problems? So, so if you remember, reflex-based models the idea was you'd have",
    "start": "526970",
    "end": "533840"
  },
  {
    "text": "an input x and then we wanted to find this f for example a classifier that,",
    "start": "533840",
    "end": "539300"
  },
  {
    "text": "that would output something like, like this y which is labeled, it's a plus 1 or minus 1. So, so the common thing in,",
    "start": "539300",
    "end": "545285"
  },
  {
    "text": "in these reflex-based models was we were outputting this, this one label, this one in this case action being minus 1 or plus 1.",
    "start": "545285",
    "end": "554030"
  },
  {
    "text": "Again in search problems, the idea is I'm given an input, I'm given a state, and then given that I have that state,",
    "start": "554030",
    "end": "560985"
  },
  {
    "text": "what I wanna output is a sequence of actions. So I do want to think about what happens if I take this action like",
    "start": "560985",
    "end": "567050"
  },
  {
    "text": "how is that going to affect the future of my actions. Okay. So, so the key idea in search problems is",
    "start": "567050",
    "end": "573140"
  },
  {
    "text": "you need to consider future consequences of, of the actions you take at the current state. Yes. Is this like not equivalent to like just outputting",
    "start": "573140",
    "end": "580220"
  },
  {
    "start": "578000",
    "end": "663000"
  },
  {
    "text": "one thing and then like rerunning the function, on like the updated state? So if you rerun it. So, so the question is, yeah, is it not the same as like I'm rerunning it,",
    "start": "580220",
    "end": "587540"
  },
  {
    "text": "I output a thing and then I rerun it again. And you could do that, but that ends up being a little bit of a- that would be some-",
    "start": "587540",
    "end": "593765"
  },
  {
    "text": "similar to a greedy algorithm where like let's say I want to get to the door and I want to find, find the fastest way and right now if I just look at like",
    "start": "593765",
    "end": "600620"
  },
  {
    "text": "my current state maybe I think the fastest way of getting there is going this way. But if I actually think about a horizon and I think about how",
    "start": "600620",
    "end": "607340"
  },
  {
    "text": "this action is going to affect my future I might come up with a different sequence of actions. Okay? All right.",
    "start": "607340",
    "end": "614600"
  },
  {
    "text": "Okay. So and, and you've already seen this paradigm so let's start talking about modeling and inference during this class.",
    "start": "614600",
    "end": "621040"
  },
  {
    "text": "So this is the, the plan for today. So we're going to talk about three different algorithms for,",
    "start": "621040",
    "end": "626209"
  },
  {
    "text": "for doing inference for search problems. So, so we're going to talk about tree search which is the most naive thing one could do to solve some of these search problems,",
    "start": "626210",
    "end": "634135"
  },
  {
    "text": "but that's the simplest thing we can start with. And then after that you want to look at improvements of that doing dynamic programming or,",
    "start": "634135",
    "end": "640850"
  },
  {
    "text": "or uniform cost search. So, um, the difference between search-based problem and reflex-based problem,",
    "start": "640850",
    "end": "647185"
  },
  {
    "text": "the very fact that in a reflex-based problem, the output that you gave does not influence a string,",
    "start": "647185",
    "end": "652435"
  },
  {
    "text": "and it doesn't search? Yeah. Tha- that's true. Yeah so, so the output that you get in search problem it is an action that actually influences your future.",
    "start": "652435",
    "end": "659680"
  },
  {
    "text": "Yeah, that's a good way of actually thinking about it. Yes. All right.",
    "start": "659680",
    "end": "664750"
  },
  {
    "start": "663000",
    "end": "748000"
  },
  {
    "text": "So, so let's talk about tree search. So let's go back to our favorite example.",
    "start": "664750",
    "end": "669940"
  },
  {
    "text": "Um, okay so we have the farmer, cabbage, goat, and wolf. So let's think about all possible actions that one can take,",
    "start": "669940",
    "end": "677260"
  },
  {
    "text": "when we have this farmer, cabbage, goat, and wolf. Okay. So, so a bunch of things we can do is a farmer",
    "start": "677260",
    "end": "682900"
  },
  {
    "text": "can go to the other side of the river with the boat alone. So, uh, this triangle here just means like going to the other side of the, uh, the river.",
    "start": "682900",
    "end": "691584"
  },
  {
    "text": "The farmer can take the cabbage. So C is for cabbage G is for, ah, goat, W is for wolf.",
    "start": "691585",
    "end": "696775"
  },
  {
    "text": "So another possible action is the farmer takes a cabbage or the farmer takes the goat or the farmer takes a wolf and goes to the other side of the river.",
    "start": "696775",
    "end": "703585"
  },
  {
    "text": "We also have a bunch of other actions. The farmer can come back. The farmer can come back with the cabbage,",
    "start": "703585",
    "end": "708730"
  },
  {
    "text": "come back with the goat, come back with the wolf. So I'm basically numering- enumerating all possible actions that,",
    "start": "708730",
    "end": "715090"
  },
  {
    "text": "that one could ever do. And sure none of- like not- some of these might not be possible in particular states but I'm just creating this library of actions things that are possible.",
    "start": "715090",
    "end": "724135"
  },
  {
    "text": "Okay. So then when we think about the, ah, this as a search problem, we could create a search tree.",
    "start": "724135",
    "end": "731154"
  },
  {
    "text": "Which, which basically starts from an initial state of where things are and then we can kind of think about where we could go from that initial state.",
    "start": "731155",
    "end": "740020"
  },
  {
    "text": "So the search tree is more of, ah, what if- what if tree which, which allows you to think about what are the possible options that, that you can take.",
    "start": "740020",
    "end": "747399"
  },
  {
    "text": "So, um, conceptually what- what it looks like is you're starting with your initial state,",
    "start": "747400",
    "end": "753130"
  },
  {
    "start": "748000",
    "end": "983000"
  },
  {
    "text": "where everything is on one side of the river. So those two lines are the riv- the river the blue lines.",
    "start": "753130",
    "end": "758605"
  },
  {
    "text": "Um, and you can take a bunch of actions, right like one possible action is you can take the cabbage",
    "start": "758605",
    "end": "763735"
  },
  {
    "text": "and go to the other side of the river and you end up in that state. And that state is not a good state.",
    "start": "763735",
    "end": "768820"
  },
  {
    "text": "I am making that red. Well, why is that. Because the wolf is going to eat the goat. That's not that great.",
    "start": "768820",
    "end": "773890"
  },
  {
    "text": "Okay. Um, and, and every action, every crossing let's say ma- let's say every crossing takes cost of one.",
    "start": "773890",
    "end": "780314"
  },
  {
    "text": "So that one that you see on the edge is the cost of that action. Okay. So that didn't really work that well. What else can I do? Well, I can,",
    "start": "780315",
    "end": "787425"
  },
  {
    "text": "I can do another action. I can, I can- from the initial state, I can take the goat and go to the other side of the river,",
    "start": "787425",
    "end": "793645"
  },
  {
    "text": "that ends up in this configuration. From there the farmer could come back, take the cabbage, go to the other side,",
    "start": "793645",
    "end": "800980"
  },
  {
    "text": "end up in this configuration, the farmer can come back. That's again, not a great state because cabbage and goat are left on the other side of the river,",
    "start": "800980",
    "end": "808350"
  },
  {
    "text": "goat is going to eat the cabbage. That's not great. What else can I do? Well, the farmer can come back with the goat.",
    "start": "808350",
    "end": "814575"
  },
  {
    "text": "And then once the farmer comes back with the goat, the farmer leaves the goat, takes the wolf, goes to the other side,",
    "start": "814575",
    "end": "820930"
  },
  {
    "text": "comes back gets the goat again. And then boom, you're done. Okay. So- so how many steps does this take?",
    "start": "820930",
    "end": "827890"
  },
  {
    "text": "Well, one, two, three, four, five, six, and seven. So- so the ones who answer seven that was the right answer.",
    "start": "827890",
    "end": "834355"
  },
  {
    "text": "Um, and that is kind of the idea of getting to this end state. Yes. So to be specifically, ah,",
    "start": "834355",
    "end": "841300"
  },
  {
    "text": "not include the option that the going back to the previous state even though that's a valid next step just because we know that there's something-",
    "start": "841300",
    "end": "849830"
  },
  {
    "text": "So you could have this giant tree where you go to different states but we can actually have like a counter that tells you if I have visited that state and",
    "start": "849830",
    "end": "856600"
  },
  {
    "text": "if you have visited that state maybe you don't want to go there again because, because you have already explored all the possible actions from there.",
    "start": "856600",
    "end": "862045"
  },
  {
    "text": "You're not done with this tree though, right? Like I've, I've found that this good state here, but maybe there's a better way of, like getting there.",
    "start": "862045",
    "end": "869260"
  },
  {
    "text": "I don't know yet. I haven't explored everything. So, so what I can do is, I can actually explore all these other things that, that one could do.",
    "start": "869260",
    "end": "875530"
  },
  {
    "text": "And I'm not gonna go over them. But there is another solution, and turns out that other solution also takes seven steps.",
    "start": "875530",
    "end": "881500"
  },
  {
    "text": "So it's not necessarily a better solution, but, but you've got it for all of that because there could be another solution later on that.",
    "start": "881500",
    "end": "887320"
  },
  {
    "text": "That is, uh, better than the seven steps. Okay. All right. Yes.",
    "start": "887320",
    "end": "893095"
  },
  {
    "text": "Are these slides up? They are, they should be. Okay. Slides are up. Okay. Um, all right.",
    "start": "893095",
    "end": "902350"
  },
  {
    "text": "So, so this is how the search tree looks like. Yeah. I'm just asking [inaudible]",
    "start": "902350",
    "end": "908889"
  },
  {
    "text": "Oh, that's a very good point. Thank you for- [LAUGHTER] thank you, so for SCPD students I'll try to repeat the questions. I always forget this.",
    "start": "908890",
    "end": "915250"
  },
  {
    "text": "Um, I'll try to repeat the question. The question was, ah, was the slides, uh, the slides aren't up, they're up, they should be up.",
    "start": "915250",
    "end": "920755"
  },
  {
    "text": "So okay. All right. So, uh, going back to our search problem. Ah, so we can try to formalize this search problem.",
    "start": "920755",
    "end": "928060"
  },
  {
    "text": "So, so let's actually think about it more formally. So what are the things that we need to keep track of. So, so we have a start state.",
    "start": "928060",
    "end": "934120"
  },
  {
    "text": "So let's defined a start to be the start state. In addition to that we can, we can define this function called actions",
    "start": "934120",
    "end": "940345"
  },
  {
    "text": "which returns all possible actions from states. So actions as a function of state. If I'm in a state, that basically tells me what are the actions I can take from there.",
    "start": "940345",
    "end": "948840"
  },
  {
    "text": "I can, I can define this cost function. So this cost function, takes a state and action and tells me what is the cost of that and in this example,",
    "start": "948840",
    "end": "956940"
  },
  {
    "text": "the cost of crossing the river was just one but you can imagine having different costs values. Ah, we can have a successor function that basically takes a state and action and,",
    "start": "956940",
    "end": "966450"
  },
  {
    "text": "and tells us where we end up at. So if I'm in state S and I take action A where would I end up at?",
    "start": "966450",
    "end": "972165"
  },
  {
    "text": "And that's the successor function. And then we're going to define an IsEnd function, which basically checks if you're in an end state where",
    "start": "972165",
    "end": "979630"
  },
  {
    "text": "we don't have any other possible actions that you can take. Yes. So these are the [inaudible] I got a call?",
    "start": "979630",
    "end": "986710"
  },
  {
    "start": "983000",
    "end": "1006000"
  },
  {
    "text": "You can, you can think of it as, yeah, as a way of like finite state machine type of, type of, uh, way of looking at it.",
    "start": "986710",
    "end": "992860"
  },
  {
    "text": "Yeah. So like we- we use a similar type of formalism, uh, for MVPs and games too. So this is good idea to get like all these formalisms right.",
    "start": "992860",
    "end": "999970"
  },
  {
    "text": "But start state, transitions, costs. Those sort of things. Okay. Yes.",
    "start": "999970",
    "end": "1005190"
  },
  {
    "text": "What's the [inaudible] like [inaudible]. Ah, say it again so.",
    "start": "1005190",
    "end": "1012270"
  },
  {
    "start": "1006000",
    "end": "1053000"
  },
  {
    "text": "A cost [inaudible] like. Cost? Position and action, and action already concerns the state.",
    "start": "1012270",
    "end": "1018105"
  },
  {
    "text": "So then- so- so the action, okay, so action depends on state. So you start from start state where you haven't taken any actions right,",
    "start": "1018105",
    "end": "1025395"
  },
  {
    "text": "and then from that start state then you can think about all possible like right up there. So you're under that start state,",
    "start": "1025395",
    "end": "1031260"
  },
  {
    "text": "and there you can think about all possible actions you can take, and then those actions depend on current state but they don't depend on the future state, right.",
    "start": "1031260",
    "end": "1039089"
  },
  {
    "text": "So based on like the current state, everything is on one side of the river. I can think about all possible actions I can take and where I know- where I end up at.",
    "start": "1039090",
    "end": "1046559"
  },
  {
    "text": "And then, after that like the next action depends on that. Yeah, that's it. So it's a sequential thing. Okay. Yes.",
    "start": "1046560",
    "end": "1054300"
  },
  {
    "start": "1053000",
    "end": "1083000"
  },
  {
    "text": "You have all the information on the actions and the cost that you could do beforehand, how is this conceptually different than like a min cost flow convex optimization?",
    "start": "1054300",
    "end": "1062475"
  },
  {
    "text": "You can think of it. Okay. So- so how- how is it different from a kind of convex optimization type of role?",
    "start": "1062475",
    "end": "1067575"
  },
  {
    "text": "So- so we have- we have an objective here and then you can think of what that objective is and based on what that objective is,",
    "start": "1067575",
    "end": "1073169"
  },
  {
    "text": "we can have different methods for solving it, right? So- so you can basically formulate this as an optimization problem where you",
    "start": "1073170",
    "end": "1079290"
  },
  {
    "text": "saw- you look for the solution to a search problem as an optimization problem too that's perfectly, a perfect way of doing it.",
    "start": "1079290",
    "end": "1085500"
  },
  {
    "start": "1083000",
    "end": "1389000"
  },
  {
    "text": "And, and we're going to talk about various types of methods for- for solving this problem today. Okay. All right.",
    "start": "1085500",
    "end": "1091650"
  },
  {
    "text": "So- so let's look at another example. So, um, this is, um, transportation problem.",
    "start": "1091650",
    "end": "1097815"
  },
  {
    "text": "Now I'll just move this. So, um, okay.",
    "start": "1097815",
    "end": "1103020"
  },
  {
    "text": "So basically, what we wanna do is we have street blocks from 1 through N. So 1,",
    "start": "1103020",
    "end": "1111690"
  },
  {
    "text": "2, 3, 4, so on. So these are street blocks and N is here.",
    "start": "1111690",
    "end": "1119640"
  },
  {
    "text": "And what we wanna do is we basically want to travel from, from 1  to, to some N number.",
    "start": "1119640",
    "end": "1126060"
  },
  {
    "text": "And we have two possible actions. So at any state, let's say I'm in state S. At any state,",
    "start": "1126060",
    "end": "1131715"
  },
  {
    "text": "I can either walk, and if I walk I end up in S plus 1. So if I'm in 3,",
    "start": "1131715",
    "end": "1137265"
  },
  {
    "text": "I'm going to end up in 4. And walking takes one minute. Or I can take this magic tram.",
    "start": "1137265",
    "end": "1144420"
  },
  {
    "text": "And this magic tram, takes any state S to 2 times S. So if I'm in  3,  then I am going to end up in 6 by taking the magic tram.",
    "start": "1144420",
    "end": "1153450"
  },
  {
    "text": "And the magic tram always takes two minutes, doesn't matter from where to where. So, so if I'm in 2, I will end up in 4,",
    "start": "1153450",
    "end": "1160139"
  },
  {
    "text": "if I'm in 5 I can end up in 10 by taking the tram. Okay. So, so I have two possible actions in any of these states.",
    "start": "1160140",
    "end": "1166755"
  },
  {
    "text": "And what I want to do is, I want to go from 1 to N and then I want to basically do that in the shortest, uh, time possible.",
    "start": "1166755",
    "end": "1173490"
  },
  {
    "text": "Okay. So with the- with the least amount of costs. That's the problem, makes sense? Okay. All right.",
    "start": "1173490",
    "end": "1179700"
  },
  {
    "text": "So, so this is kind of like, what the search problem is. So what we wanna do is first off, you want to just formalize it.",
    "start": "1179700",
    "end": "1185220"
  },
  {
    "text": "Uh, and I'm gonna do that here. I'm not gonna do live solutions because I'm not Percy,",
    "start": "1185220",
    "end": "1191180"
  },
  {
    "text": "and I did that once and it was a disaster. So [LAUGHTER] we are going to,",
    "start": "1191180",
    "end": "1196985"
  },
  {
    "text": "uh, yeah I taped these in 2018. Uh, but, uh, basically,",
    "start": "1196985",
    "end": "1202400"
  },
  {
    "text": "we're going to go over it together. So, so let's just do that. Um, so we're going to define the search problem, this tram problem.",
    "start": "1202400",
    "end": "1209805"
  },
  {
    "text": "So we're gonna define a class for transportation problems. So we're going to separate our search problems from",
    "start": "1209805",
    "end": "1214919"
  },
  {
    "text": "our algorithms because remember modeling is separate from inference. So let's just have a constructor for this transportation problem.",
    "start": "1214920",
    "end": "1222105"
  },
  {
    "text": "It takes N, because we have N blocks. Okay. So N is the number of blocks.",
    "start": "1222105",
    "end": "1229630"
  },
  {
    "text": "Okay. All right. So, so then you have- we still have a start state.",
    "start": "1229700",
    "end": "1236775"
  },
  {
    "text": "We're starting from 1 so block 1. And then we need to define IsEnd state.",
    "start": "1236775",
    "end": "1242070"
  },
  {
    "text": "So IsEnd state basically checks if you've reached N or not. Because, because we have to get to the Nth block.",
    "start": "1242070",
    "end": "1249539"
  },
  {
    "text": "Okay. All right. So what else do we need? So we have a successor function.",
    "start": "1249540",
    "end": "1256290"
  },
  {
    "text": "We also have a cost function. I'm gonna put both of them together, because, because that is just easier.",
    "start": "1256290",
    "end": "1261525"
  },
  {
    "text": "So the successor and cost function, I'm saying let's just give it state S. And then given a",
    "start": "1261525",
    "end": "1267960"
  },
  {
    "text": "state it's going to return this triple of action, new state, cost. So I give it a state, let's say initial state,",
    "start": "1267960",
    "end": "1275160"
  },
  {
    "text": "and then it just returns all possible actions, within new states I can end up at and how much does that cost.",
    "start": "1275160",
    "end": "1280455"
  },
  {
    "text": "Okay/. So what are my options? Well, if I'm state S, I can walk to s plus 1 that costs 1.",
    "start": "1280455",
    "end": "1287595"
  },
  {
    "text": "If I'm in state S, I can take the tram, I can end up in 2S, and that costs 2.",
    "start": "1287595",
    "end": "1292990"
  },
  {
    "text": "Okay. So that's how I'm creating my triples. And, and I need to check if I don't pass the Nth block.",
    "start": "1292990",
    "end": "1298840"
  },
  {
    "text": "Remember, like we have N blocks so we don't want to pass the Nth block. Okay. So, so that's just to make sure that we don't pass it.",
    "start": "1298840",
    "end": "1306190"
  },
  {
    "text": "So we are still below the Nth block. And, and this is what my successor and cost function will return that, the triples.",
    "start": "1306190",
    "end": "1312910"
  },
  {
    "text": "Okay. So let's just return that. Okay. So that is my transportation problem.",
    "start": "1312910",
    "end": "1319585"
  },
  {
    "text": "Let's make sure it does the thing the way we want it. So let's say we have 10 blocks,",
    "start": "1319585",
    "end": "1324934"
  },
  {
    "text": "and now I wanna print my transportation- my successor and costs function. Let's say I'm returning successor and cost for 3. What should I get?",
    "start": "1324935",
    "end": "1333040"
  },
  {
    "text": "So from 3, I can have two actions, right. I can either walk or I can take the tram.",
    "start": "1333040",
    "end": "1339205"
  },
  {
    "text": "If I walk, uh, it costs 1. If I take the tram, it costs 2. I'll end up in 4 or 6.",
    "start": "1339205",
    "end": "1345280"
  },
  {
    "text": "Let's just try. I don't know 9. If I'm in state 9, I can only do one thing, I can walk, right?",
    "start": "1345280",
    "end": "1353220"
  },
  {
    "text": "Because remember, the, the block is- number of blocks is 10 and I can't go beyond that. So- all right.",
    "start": "1353220",
    "end": "1360750"
  },
  {
    "text": "Um, okay. So that was, um, [NOISE] yeah, let's go back here.",
    "start": "1360750",
    "end": "1367335"
  },
  {
    "text": "So that was just defining, uh, the search problem, [NOISE] okay?",
    "start": "1367335",
    "end": "1372345"
  },
  {
    "text": "And, and I haven't told you guys like how to solve it, right? This is- we are just doing the modeling right now.",
    "start": "1372345",
    "end": "1377775"
  },
  {
    "text": "So we just modeled this problem. We just coded it up. Modeling it means, what is this- what are,",
    "start": "1377775",
    "end": "1382800"
  },
  {
    "text": "what are the actions, what is a successor function, what is a cost function, defining an is end function,",
    "start": "1382800",
    "end": "1388320"
  },
  {
    "text": "saying what, what the initial state is, okay? So, so now I think we are ready to think about the algorithms in terms of,",
    "start": "1388320",
    "end": "1395970"
  },
  {
    "start": "1389000",
    "end": "1587000"
  },
  {
    "text": "like, going and solving these types of search problems, okay? So the simplest algorithm we want to talk about is, is backtracking search.",
    "start": "1395970",
    "end": "1403799"
  },
  {
    "text": "So the idea of backtracking search is- maybe I can draw a tree here,",
    "start": "1403800",
    "end": "1409350"
  },
  {
    "text": "is you're starting from an initial state and then you have a bunch of possible actions.",
    "start": "1409350",
    "end": "1414390"
  },
  {
    "text": "And then you end up in some state and you have a bunch of other possible actions. [NOISE] Let's say you have two actions possible.",
    "start": "1414390",
    "end": "1421230"
  },
  {
    "text": "And this can become- [NOISE] this exponentially blows up so I'm going to stop soon.",
    "start": "1421230",
    "end": "1426540"
  },
  {
    "text": "[LAUGHTER] All right. So, so we create this tree and this tree has some branching factor.",
    "start": "1426540",
    "end": "1433620"
  },
  {
    "text": "That's the number of actions you have at, at every, at every state. And then it also has some depth.",
    "start": "1433620",
    "end": "1440550"
  },
  {
    "text": "[NOISE] So that is how many levels you go down. [NOISE] So let me just define that with D, okay?",
    "start": "1440550",
    "end": "1447600"
  },
  {
    "text": "And now there are solutions down in these notes, right? So, so we wanna figure out what those solutions are. And backtracking search just does the simplest thing possible.",
    "start": "1447600",
    "end": "1455580"
  },
  {
    "text": "What it does is, it starts from this initial state and it's going to go all the way down here. And if it doesn't find a solution,",
    "start": "1455580",
    "end": "1460710"
  },
  {
    "text": "it's gonna go back here and then try again and try again. And it's gonna go over all of the tree because there might be a better solution down here too.",
    "start": "1460710",
    "end": "1468090"
  },
  {
    "text": "So it needs to actually go over all of the tree, okay? So I'm gonna have a table of algorithms because we're gonna talk about a few of them here.",
    "start": "1468090",
    "end": "1478664"
  },
  {
    "text": "Algorithms, [NOISE] what sort of costs they allow,",
    "start": "1478665",
    "end": "1483765"
  },
  {
    "text": "in terms of time, how bad they are, in terms of space, how bad they are.",
    "start": "1483765",
    "end": "1490005"
  },
  {
    "text": "So if you've taken an algorithms course, like, some of these are probably familiar. So, er, all right.",
    "start": "1490005",
    "end": "1495920"
  },
  {
    "text": "So we talked about backtracking search, [NOISE] backtracking search.",
    "start": "1495920",
    "end": "1503520"
  },
  {
    "text": "That is basically this algorithm that goes through pretty much everything, and it allows any type of cost.",
    "start": "1503520",
    "end": "1509490"
  },
  {
    "text": "So I can have [NOISE] any cost, right? I can have pretty much any cost I want on these edges because I'm going over all of the tree.",
    "start": "1509490",
    "end": "1516360"
  },
  {
    "text": "It doesn't matter what these costs are, okay? So, um, how-, how bad is this in terms of, in terms of time?",
    "start": "1516360",
    "end": "1523965"
  },
  {
    "text": "So in terms of time, I'm going over the full tree. By going over the full tree, then, then this,",
    "start": "1523965",
    "end": "1530429"
  },
  {
    "text": "this is going to have this exponential blowup where I'm looking at order of b to the d,",
    "start": "1530430",
    "end": "1537660"
  },
  {
    "text": "where b is, again, my branching factor and d is the depth of the tree, okay?",
    "start": "1537660",
    "end": "1543390"
  },
  {
    "text": "Cause in terms of time, this is not a good algorithm. Like, in terms of time, I have to go over everything in the tree.",
    "start": "1543390",
    "end": "1549345"
  },
  {
    "text": "And that's the size of my tree, okay? And in terms of space, in terms of space, what I mean is,",
    "start": "1549345",
    "end": "1555135"
  },
  {
    "text": "I need to figure out what was, what was the sequence of actions I needed to take to get to some solution.",
    "start": "1555135",
    "end": "1560580"
  },
  {
    "text": "So let's say that my solution is down here. If my solution is down here, then for me, in or- like, I need to store a bunch of things to know how I got here,",
    "start": "1560580",
    "end": "1568080"
  },
  {
    "text": "and the things I need to store are the appearance of this node and that is depth of D. So in terms of space,",
    "start": "1568080",
    "end": "1574890"
  },
  {
    "text": "this algorithm takes order of D, okay? Because, because that is, like, the things that I need to",
    "start": "1574890",
    "end": "1581910"
  },
  {
    "text": "store in my memory to be able to recover, like, the solution when I get there. Yes. [NOISE]. Question.",
    "start": "1581910",
    "end": "1587040"
  },
  {
    "start": "1587000",
    "end": "1698000"
  },
  {
    "text": "Because we need to look at everything, shouldn't this space be big or here D to the D as well?",
    "start": "1587040",
    "end": "1592500"
  },
  {
    "text": "Because until you get to that, you need, you need to have the space to have everything, right? You can prove that, but [NOISE] no. So actually,",
    "start": "1592500",
    "end": "1598350"
  },
  {
    "text": "we'll talk about breadth-first search later, which does require you have a larger space. So, so the reason you can forget it is the only history that I",
    "start": "1598350",
    "end": "1605669"
  },
  {
    "text": "need to keep track of is this particular branch, right? I don't need to figure out, like, I don't need to keep track of, like,",
    "start": "1605670",
    "end": "1612350"
  },
  {
    "text": "actually the history of all these other nodes. I can, I can throw it- [NOISE] those out. But for something else like breadth-first search where we'll talk about in a few slides,",
    "start": "1612350",
    "end": "1619305"
  },
  {
    "text": "you actually need to keep track of, like, the history of everything else. So, so let me get back to that in a few slides.",
    "start": "1619305",
    "end": "1624840"
  },
  {
    "text": "But for this one, basically the idea is, um, yeah, like, I wanna know how I got there. To, to know how I got there,",
    "start": "1624840",
    "end": "1630420"
  },
  {
    "text": "I just need to know the parents. Yes. [inaudible] like the minimum cost to reach a point or is it to find whether,",
    "start": "1630420",
    "end": "1636740"
  },
  {
    "text": "like, you can or cannot reach a certain point in your search. So it depends on what your objective is. Like, it really depends on what the search problem is asking.",
    "start": "1636740",
    "end": "1643820"
  },
  {
    "text": "So, so in the case of that farmer-goat example, uh, the search problem is asking, you wanna move everything to the other side of the river.",
    "start": "1643820",
    "end": "1651090"
  },
  {
    "text": "So you have that criteria. And you wanna find the minimum cost one, so you also have that other cri- criteria.",
    "start": "1651090",
    "end": "1656115"
  },
  {
    "text": "So it really depends on what the search problem is asking. And some of these nodes might be solutions. Some of them might not be solutions.",
    "start": "1656115",
    "end": "1662130"
  },
  {
    "text": "So, so it really depends, okay? All right. So, so let's just look at these on the slide. So the memory is order of D. It's actually small. It's nice.",
    "start": "1662130",
    "end": "1670200"
  },
  {
    "text": "In terms of time, this is not a great algorithm, right? Because even if your branching factor is 2,",
    "start": "1670200",
    "end": "1675780"
  },
  {
    "text": "if the depth of the tree is 50, then this is gonna blow up, like, immediately. So a lot of these tree search algorithms that we're gonna talk about,",
    "start": "1675780",
    "end": "1683490"
  },
  {
    "text": "like, they have the same problem. So, so they pretty much have the same time complexity. We're going to just look at very minimal improvements of them.",
    "start": "1683490",
    "end": "1690900"
  },
  {
    "text": "And then after that, we'll talk about, uh, dynamic programming and uniform cost search, which are polynomial algorithms that are much better than these, okay? All right.",
    "start": "1690900",
    "end": "1699419"
  },
  {
    "start": "1698000",
    "end": "2275000"
  },
  {
    "text": "So let's actually- let's go back to the tram example and let's try to write up what backtracking search does.",
    "start": "1699420",
    "end": "1704955"
  },
  {
    "text": "So- all right. So we defined our model. Our model is the search problem, this particular transportation search problem.",
    "start": "1704955",
    "end": "1711420"
  },
  {
    "text": "It could be anything else. Um, and now we're going to kind of have this main section wi- where we're going to put in,",
    "start": "1711420",
    "end": "1718529"
  },
  {
    "text": "like, our algorithms in it. And we're gonna write them as general as possible so, so we can apply them to other types of search problems, okay?",
    "start": "1718530",
    "end": "1726105"
  },
  {
    "text": "So let's define backtracking search. It takes a search problem. It can take the transportation problem, okay? All right.",
    "start": "1726105",
    "end": "1734130"
  },
  {
    "text": "So- and then we're going to- basically in backtracking search, what we're doing is we're recursing on every state given that you have a history of,",
    "start": "1734130",
    "end": "1741600"
  },
  {
    "text": "of getting there and the total cost that it took us to, to get there, okay? So, so at the state,",
    "start": "1741600",
    "end": "1747675"
  },
  {
    "text": "having gotten some history and some accumulated costs so far, we are going to basically recurse on",
    "start": "1747675",
    "end": "1754440"
  },
  {
    "text": "that state and look at the children of that state, okay? So, so we're going to explore the rest of the subtree from,",
    "start": "1754440",
    "end": "1761370"
  },
  {
    "text": "from that particular state, okay? All right. So how do we do that?",
    "start": "1761370",
    "end": "1766500"
  },
  {
    "text": "[NOISE] Well, we gotta make sure that we're not in an end state.",
    "start": "1766500",
    "end": "1771885"
  },
  {
    "text": "Or if you're in an end state, like, we can actually update the best solution so far, okay?",
    "start": "1771885",
    "end": "1778620"
  },
  {
    "text": "So let's put that for to do. So, so, so the bunch of things that we need to do. We need to figure out if you're in an end state.",
    "start": "1778620",
    "end": "1784320"
  },
  {
    "text": "If we are, well, we got to, we gotta update our best solution. If you're not in an end-state,",
    "start": "1784320",
    "end": "1789585"
  },
  {
    "text": "then we're going to recurse on children, okay? All right.",
    "start": "1789585",
    "end": "1795375"
  },
  {
    "text": "So we can do that later. And then in general, this recurse function is, is going to,",
    "start": "1795375",
    "end": "1803340"
  },
  {
    "text": "uh, we're going to call it on on the, on the start state. So let's actually do that too.",
    "start": "1803340",
    "end": "1808560"
  },
  {
    "text": "So, so what backtracking search does is it calls this recurse function on the initial state that we have with history of none, right?",
    "start": "1808560",
    "end": "1816450"
  },
  {
    "text": "Like, we don't have any history yet, and, and cost is 0 so far because we haven't really gone anywhere.",
    "start": "1816450",
    "end": "1821534"
  },
  {
    "text": "So, so we start with a start state. We call recurse on it, okay? [NOISE] And how do we recurse on children?",
    "start": "1821535",
    "end": "1827475"
  },
  {
    "text": "Well, we have defined this, this successor and cost function. So by calling that successor and cost function on state,",
    "start": "1827475",
    "end": "1834090"
  },
  {
    "text": "then we can get action, new state, and cost. So, so we get this triple of action,",
    "start": "1834090",
    "end": "1839340"
  },
  {
    "text": "new state, and cost, okay? And then we can basically recurse on the new state.",
    "start": "1839340",
    "end": "1847080"
  },
  {
    "text": "Um, I'm not putting the histories right now in this code. So, so we need to keep track of the history too,",
    "start": "1847080",
    "end": "1853140"
  },
  {
    "text": "but, but let's just not worry about the history. Oh, I guess I'm putting it in this one.",
    "start": "1853140",
    "end": "1858330"
  },
  {
    "text": "[LAUGHTER]. In the later ones I will not put them. But, but basically the history is keeping track of, like, how you got there.",
    "start": "1858330",
    "end": "1865260"
  },
  {
    "text": "And to- total cost is going to be [NOISE] what, what you've got so far plus the cost of this, this new state, action pair, okay?",
    "start": "1865260",
    "end": "1873390"
  },
  {
    "text": "Okay. So we need to keep track of the best solution so far. So I'm just going to find a dictionary here just to",
    "start": "1873390",
    "end": "1880169"
  },
  {
    "text": "make sure that we keep track of it and for Python scoping reasons.",
    "start": "1880170",
    "end": "1884800"
  },
  {
    "text": "Okay. And then the place",
    "start": "1885500",
    "end": "1891540"
  },
  {
    "text": "we're going to update our best solution so far is that to do that is left, right? So, so if you're in an end state,",
    "start": "1891540",
    "end": "1897030"
  },
  {
    "text": "then we can actually update the best solution so far, okay? And what do we want in our best solution?",
    "start": "1897030",
    "end": "1902850"
  },
  {
    "text": "Well, we wanna know what the cost is. So, so we can start with cost of infinity.",
    "start": "1902850",
    "end": "1908640"
  },
  {
    "text": "And anything below infinity is better. [NOISE] And then we're going to start with a history of empty,",
    "start": "1908640",
    "end": "1914070"
  },
  {
    "text": "but we're going to fill up that history too, okay? So that's the initialization of best solution so far.",
    "start": "1914070",
    "end": "1920790"
  },
  {
    "text": "Then, we're going to update that, right? If you're in an end-state, if the total cost that we have right now is smaller than the best solution so far,",
    "start": "1920790",
    "end": "1929610"
  },
  {
    "text": "then we're going to update that best solution. And, and you're going to update its history with whatever its history is, okay?",
    "start": "1929610",
    "end": "1936660"
  },
  {
    "text": "All right. And, and that's it, that's backtracking search, okay? So let's just make sure it does the thing.",
    "start": "1936660",
    "end": "1944100"
  },
  {
    "text": "So maybe- so to do that, [NOISE] we are going to- actually, no,",
    "start": "1944100",
    "end": "1952100"
  },
  {
    "text": "we gotta return the best solution so far. Mm-hmm.",
    "start": "1952100",
    "end": "1959789"
  },
  {
    "text": "All right. So now we have defined a transportation problem. Now, what I want to do is,",
    "start": "1959790",
    "end": "1964980"
  },
  {
    "text": "I want to call backtracking search on the transportation problem, okay?",
    "start": "1964980",
    "end": "1970590"
  },
  {
    "text": "So that all sounds good. I need to write a print function also to- to be able to print things.",
    "start": "1970590",
    "end": "1977010"
  },
  {
    "text": "So I'm gonna just write a generic print function that we can call on any of these types of problems.",
    "start": "1977010",
    "end": "1982860"
  },
  {
    "text": "So let's- let's define a print solution function that just like, prints things the way we want them.",
    "start": "1982860",
    "end": "1989144"
  },
  {
    "text": "So we get the solution, and we're gonna just unpack that cost and history and just print the cost and history nicely.",
    "start": "1989145",
    "end": "1996490"
  },
  {
    "text": "Okay. All right.",
    "start": "1996580",
    "end": "2004630"
  },
  {
    "text": "So I can- I can use this print solution for pretty much all the other algorithms, we'll talk about today too.",
    "start": "2004630",
    "end": "2010630"
  },
  {
    "text": "Okay. And we're gonna talk about how we get there- to the history.",
    "start": "2010630",
    "end": "2016910"
  },
  {
    "text": "So now I have my print function, I have my backtracking search algorithm, I've defined my transportation problem.",
    "start": "2016910",
    "end": "2023045"
  },
  {
    "text": "I can just call it on this transportation problem with 10 blocks. So as you guys can see here,",
    "start": "2023045",
    "end": "2028835"
  },
  {
    "text": "so the total cost is 6. So what this means is for going from city 1 to city,",
    "start": "2028835",
    "end": "2034115"
  },
  {
    "text": "city 10, then this is the best solution. I- I gotta walk walk, walk, walk, and then after that ta- take the tram.",
    "start": "2034115",
    "end": "2040095"
  },
  {
    "text": "Because like I end up in 5, and then after that it's actually worth taking the tram and paying the cost 50. Um, let's try it out for 20.",
    "start": "2040095",
    "end": "2048700"
  },
  {
    "text": "What do you think is the answer for 20? So [LAUGHTER] similar to before, walk, walk,",
    "start": "2048700",
    "end": "2054710"
  },
  {
    "text": "walk until we get to 5, then we take the tram, then we take the tram again. The cost is 8. And then if,",
    "start": "2054710",
    "end": "2062915"
  },
  {
    "text": "if it is 100, it's a little bit more interesting if you have 100. So you are walking and then you're taking",
    "start": "2062915",
    "end": "2068090"
  },
  {
    "text": "the tram and you get to 24 and you what- you have that in one step to get to 25 which is",
    "start": "2068090",
    "end": "2073429"
  },
  {
    "text": "the good state because then you can just multiply that by 2. So you walk for that one step and take the tram again, okay.",
    "start": "2073430",
    "end": "2079504"
  },
  {
    "text": "So what if I want to try out a much larger number of blocks? So is this gonna work?",
    "start": "2079505",
    "end": "2086764"
  },
  {
    "text": "No, because, because remember, that time was order of b to the d. That wasn't that great.",
    "start": "2086765",
    "end": "2092734"
  },
  {
    "text": "So let's try that. Well, we got maximum recursion then, we can fix that.",
    "start": "2092735",
    "end": "2099200"
  },
  {
    "text": "So [LAUGHTER] let's try fixing that. [LAUGHTER] So you can, you can set your recursion limit to be whatever.",
    "start": "2099200",
    "end": "2105349"
  },
  {
    "text": "So you can try that. Is this gonna work? [LAUGHTER] Now, it's just gonna take a long time, right.",
    "start": "2105350",
    "end": "2117250"
  },
  {
    "text": "So, so it's not going to give you an answer [LAUGHTER] And it's gonna just take a long time. So all right.",
    "start": "2117250",
    "end": "2122560"
  },
  {
    "text": "[LAUGHTER] Actually, how do I view? Okay.",
    "start": "2122560",
    "end": "2129360"
  },
  {
    "text": "Let's go back here. All right. So that was backtracking search, right? So all it was doing was just going over all of this tree and it was taking",
    "start": "2129360",
    "end": "2138440"
  },
  {
    "text": "exponential time as you saw and we just tried it out on that transportation problem that we defined. So we just defined a search problem, we used this",
    "start": "2138440",
    "end": "2145549"
  },
  {
    "text": "really simple search algorithm to find solutions for that, and- and then that's what we have so far. So, so now what we want to do is,",
    "start": "2145550",
    "end": "2151670"
  },
  {
    "text": "we want to- we want to come up with a few better improvements of this backtracking search.",
    "start": "2151670",
    "end": "2156725"
  },
  {
    "text": "Again, don't get your hopes up, it's not that big of an improvement. But, but we can do some- something better.",
    "start": "2156725",
    "end": "2162275"
  },
  {
    "text": "So, so the first improvement you want to make is by using this algorithm called depth-first search, as some of you might have heard of it.",
    "start": "2162275",
    "end": "2168770"
  },
  {
    "text": "DFS or depth-first search, okay? So the restriction that DFS put in,",
    "start": "2168770",
    "end": "2174980"
  },
  {
    "text": "is, is that your cost has to be 0. So your cost has to be, let me leave that.",
    "start": "2174980",
    "end": "2181010"
  },
  {
    "text": "Um, let me actually draw a line between them. So you don't get. Okay, so, so we are talking about DFS now,",
    "start": "2181010",
    "end": "2189290"
  },
  {
    "text": "and the restriction is the cost has to be 0. So, so what DFS does,",
    "start": "2189290",
    "end": "2194870"
  },
  {
    "text": "is it basically does exactly the same thing as backtracking search, but once it finds a solution down here then it is done.",
    "start": "2194870",
    "end": "2202655"
  },
  {
    "text": "It basically doesn't like explore the rest of the tree. And the reason it can do that is the cost of all these edges is 0.",
    "start": "2202655",
    "end": "2209030"
  },
  {
    "text": "So if the cost of all these edges are 0, then if I find a solution I found a solution.",
    "start": "2209030",
    "end": "2214970"
  },
  {
    "text": "I don't need to like find this better solution. Because, because that, that is good enough like anything that I find also has a cost of 0,",
    "start": "2214970",
    "end": "2221210"
  },
  {
    "text": "so I might as well just return the solution. Like, an example of that is if you have Rubik- Rubik's cube uh,",
    "start": "2221210",
    "end": "2226325"
  },
  {
    "text": "like if you find a solution then you have found a solution, right? There are a million different ways of like getting to a solution,",
    "start": "2226325",
    "end": "2231830"
  },
  {
    "text": "but like you just want one. And then if you find one, then you're happy, you're done. Okay. So as you can see, this is a very,",
    "start": "2231830",
    "end": "2239530"
  },
  {
    "text": "very slight improvement to backtracking search. Um, what happens is in terms of,",
    "start": "2239530",
    "end": "2244990"
  },
  {
    "text": "in terms of space it's still the same thing. So it's order of D. So in terms of space nothing has changed.",
    "start": "2244990",
    "end": "2250855"
  },
  {
    "text": "It's pretty good, it's order of D. In terms of time, in practice it is better, right?",
    "start": "2250855",
    "end": "2256670"
  },
  {
    "text": "Because in practice if I find a solution, I can just be done, don't worry about the rest of the tree. But, but in, in general,",
    "start": "2256670",
    "end": "2262580"
  },
  {
    "text": "if you want to talk about it in theory then the worst case scenario is just trying out all of the trees, so you write it as worst case scenario,",
    "start": "2262580",
    "end": "2268940"
  },
  {
    "text": "it's order of b to the d. So, so nothing has really changed in terms of- in terms of exponential blow up. Yes.",
    "start": "2268940",
    "end": "2275905"
  },
  {
    "start": "2275000",
    "end": "2603000"
  },
  {
    "text": "I've been thinking of how you draw that tree, it seems that you imply that the sub problems do not overlap, right?",
    "start": "2275905",
    "end": "2282970"
  },
  {
    "text": "Because you're kind of [inaudible] but in fact the sub-problem could overlap.",
    "start": "2282970",
    "end": "2288109"
  },
  {
    "text": "So you- somebody with a training problem, you can get to the same place through different history but the rest is the same.",
    "start": "2288110",
    "end": "2294725"
  },
  {
    "text": "Yeah, so you can- so, so the question is yeah, do sub-problems overlap here or they don't. So you could actually have it in a setting where sub-problems do overlap,",
    "start": "2294725",
    "end": "2302840"
  },
  {
    "text": "but you could actually add this, this extra like constraint that says if I visited the state, then don't add it to the tree.",
    "start": "2302840",
    "end": "2308150"
  },
  {
    "text": "So, so you have that option or you have the option of like going down to tree with some, like particular depths and not trying out everything.",
    "start": "2308150",
    "end": "2315245"
  },
  {
    "text": "In the setting that we have here, yeah, like we're basically trying out all possible. Like, I'm talking about the most uh, like,",
    "start": "2315245",
    "end": "2322250"
  },
  {
    "text": "general form where you're going over all the states and all possible actions that could come out of it, okay?",
    "start": "2322250",
    "end": "2328744"
  },
  {
    "text": "All right. So that was DFS. Okay. So the idea of DFS again as you're doing",
    "start": "2328745",
    "end": "2337339"
  },
  {
    "text": "backtracking search and then you're just stopping when you find a solution because- because cost is 0, okay?",
    "start": "2337340",
    "end": "2343220"
  },
  {
    "text": "So in terms of s- space order of D, in terms of time, it's still order of b to the d, okay?",
    "start": "2343220",
    "end": "2349790"
  },
  {
    "text": "All right. So that was DFS. We have another algorithm called breadth-first search BFS.",
    "start": "2349790",
    "end": "2357635"
  },
  {
    "text": "And this is useful when cost is some constant but it doesn't need to be 0,",
    "start": "2357635",
    "end": "2363320"
  },
  {
    "text": "it's just some, some, some positive constant. So what that means is all these edges have the same cost",
    "start": "2363320",
    "end": "2372650"
  },
  {
    "text": "and that cost is just C. So I have the same cost pretty much everywhere, okay?",
    "start": "2372650",
    "end": "2380315"
  },
  {
    "text": "So the idea of breadth-first search, is we can- we can go layer by layer.",
    "start": "2380315",
    "end": "2386015"
  },
  {
    "text": "Like, like we're not going to try out the depth. Instead what we can do is, we can go layer by layer,",
    "start": "2386015",
    "end": "2392029"
  },
  {
    "text": "try out this layer and see if we find a solution here. Remember the tree doesn't need to go all the way down here. The tree could end here or like at any of these and any of these nodes.",
    "start": "2392030",
    "end": "2400190"
  },
  {
    "text": "Like, like I can have like a tree that looks maybe like this. I have a solution here. Like this tree doesn't need to be like this nicely formed.",
    "start": "2400190",
    "end": "2409055"
  },
  {
    "text": "Like I can have a tree that looks like this, okay? So if I have a tree that looks like this, with breadth-first search, I'm gonna try out this layer.",
    "start": "2409055",
    "end": "2416270"
  },
  {
    "text": "See if this guy is a solution. If it's not, I'm gonna try this guy, see if this is the solution. If not I'm gonna try here, here,",
    "start": "2416270",
    "end": "2422135"
  },
  {
    "text": "and then when I find a solution when I get here, I'm done, right? Because like if I find a solution here, I know it took 2C to get here.",
    "start": "2422135",
    "end": "2429484"
  },
  {
    "text": "Like two of these C values. And if there is any other solution anywhere else in this sub-tree or in this sub-tree,",
    "start": "2429485",
    "end": "2436490"
  },
  {
    "text": "those solutions are going to be worse than this. Because they are gonna just like take like,",
    "start": "2436490",
    "end": "2441635"
  },
  {
    "text": "they- they're going to have a higher cost, okay? So because the cost is constant throughout. Okay. So then it's,",
    "start": "2441635",
    "end": "2448820"
  },
  {
    "text": "it's useful if your solutions are somewhere like high up in this tree and then you can find it. So in terms of time,",
    "start": "2448820",
    "end": "2455165"
  },
  {
    "text": "I get some improvements here because I can call this depth, this shorter depth the small d. I'm gonna",
    "start": "2455165",
    "end": "2461900"
  },
  {
    "text": "call this shorter depth small d. And in terms of time, it's still exponential but it's order of",
    "start": "2461900",
    "end": "2468380"
  },
  {
    "text": "B to the small d. And this is actually a huge improvement, because if you think about it,",
    "start": "2468380",
    "end": "2473750"
  },
  {
    "text": "the tree has exponentially become larger. So these like lower levels are a lot of things that you need to, you need to explore.",
    "start": "2473750",
    "end": "2480700"
  },
  {
    "text": "If we have like branching factor of 10, the next layer has 100 things in it, right? So- so going down these layers is actually pretty bad.",
    "start": "2480700",
    "end": "2487670"
  },
  {
    "text": "So, so the fact that with bre- breadth-first search I can improve the timing and, and limited to a particular depth, that's pretty good.",
    "start": "2487670",
    "end": "2494660"
  },
  {
    "text": "Still exponential, but pretty good. Yes. [inaudible] negative cost at that point,",
    "start": "2494660",
    "end": "2499789"
  },
  {
    "text": "you can also assume this is best solution. Yeah, you can assume that this is the best solution. Yeah, exactly. So you are assuming that there are no negative cost.",
    "start": "2499790",
    "end": "2505895"
  },
  {
    "text": "So at this point, I know this is the best solution, I'm done. Like I call it and and I don't like explore anything else.",
    "start": "2505895",
    "end": "2511130"
  },
  {
    "text": "The problem with breadth-first search is um, there's a question there, sorry. Are you also assuming all the costs are the same?",
    "start": "2511130",
    "end": "2517685"
  },
  {
    "text": "Yeah, we're assuming all the costs are the same. Because maybe you like all the costs are 1, if- if I don't assume that, if all of these costs are 100 and then like there might be like some,",
    "start": "2517685",
    "end": "2526625"
  },
  {
    "text": "some other like um. [inaudible]. Yeah, you need to explore the rest if they're not the same basically. That's what I mean.",
    "start": "2526625",
    "end": "2533150"
  },
  {
    "text": "All right. So, so the the problem with BFS is, in terms of memory we are losing.",
    "start": "2533150",
    "end": "2538235"
  },
  {
    "text": "In terms of memory, you need to actually keep track of the history of all these other, like all the nodes that you have explored so far.",
    "start": "2538235",
    "end": "2544565"
  },
  {
    "text": "So uh, in terms of memory, this is going to be order of b to the d,",
    "start": "2544565",
    "end": "2549994"
  },
  {
    "text": "kind of similar to the time. And, and the reason is, I have explored this guy.",
    "start": "2549995",
    "end": "2556385"
  },
  {
    "text": "And then after exploring this guy, I need to still have like a history of where it's going to go,",
    "start": "2556385",
    "end": "2562700"
  },
  {
    "text": "because next time around when I try out this layer, I need to know everything about this parent. And I,- like when I- when I explore here and this is not a solution,",
    "start": "2562700",
    "end": "2570215"
  },
  {
    "text": "I need to store everything about this, because maybe I don't find a solution in this, in this level and I need to come down.",
    "start": "2570215",
    "end": "2576350"
  },
  {
    "text": "And when I come down, I need to know everything about these nodes. So I need to actually store pretty much like",
    "start": "2576350",
    "end": "2581450"
  },
  {
    "text": "everything about the tree until I find my solution. And then that's where you lose like in breadth-first search.",
    "start": "2581450",
    "end": "2588050"
  },
  {
    "text": "In terms of space, it's not going to be that great. So in terms of space, it's now order of b to the d. It's a lot worse than what we've had.",
    "start": "2588050",
    "end": "2595100"
  },
  {
    "text": "In terms of time, it is, it is better. It's still exponential, but it is better, okay? All right.",
    "start": "2595100",
    "end": "2603055"
  },
  {
    "start": "2603000",
    "end": "4825000"
  },
  {
    "text": "Okay, so now um, let's talk about one more algorithm and then afterward we,",
    "start": "2603055",
    "end": "2609310"
  },
  {
    "text": "we jump to dynamic programming. There is a question back there. One thing though, the small d can be the same as the big D, right?",
    "start": "2609310",
    "end": "2616420"
  },
  {
    "text": "It can. Yeah. So, it is exponential. I agree. Small d can be the same as big D. But in practice,",
    "start": "2616420",
    "end": "2622240"
  },
  {
    "text": "if small d is not the same as big D, we are- we are winning a lot because, because, yeah,",
    "start": "2622240",
    "end": "2627580"
  },
  {
    "text": "these lower layers are so bad that, that people actually like to call it- call the fact that we,",
    "start": "2627580",
    "end": "2633010"
  },
  {
    "text": "we are order of b to the small d rather than big D. Yes? Is there a reason for why DFS would be the worst case scenario for the time enough for DFS?",
    "start": "2633010",
    "end": "2643610"
  },
  {
    "text": "Uh, so DFS needs to go all the way down to these lower, lower levels.",
    "start": "2644010",
    "end": "2649720"
  },
  {
    "text": "But BFS can stop at every level because it's doing level by level. That can be the worst case scenario [inaudible].",
    "start": "2649720",
    "end": "2657580"
  },
  {
    "text": "Yeah. So the reason is- yeah, so like you were saying, okay, so in DFS we were also saving some time, right? Like why aren't we are calling that out.",
    "start": "2657580",
    "end": "2664105"
  },
  {
    "text": "And then the reason is with DFS you still need to get to these like lower layers, and that is the, like,",
    "start": "2664105",
    "end": "2669369"
  },
  {
    "text": "that is the place that you're losing on time. So, so the fact that you're still, like, losing on time and surely you haven't explored these other ones,",
    "start": "2669370",
    "end": "2676240"
  },
  {
    "text": "but you have already got to these lower trees, like, so far, um, that's pretty bad. So, so that is why we are calling it order of b to the d in a worst case.",
    "start": "2676240",
    "end": "2684400"
  },
  {
    "text": "Okay. All right. So this, this last algorithm I wanna to talk about is, is an idea that tries- it's a cool idea.",
    "start": "2684400",
    "end": "2690130"
  },
  {
    "text": "It actually tries to combine the benefits of BFS and DFS. And, and this is called,",
    "start": "2690130",
    "end": "2695815"
  },
  {
    "text": "uh, DFS Iterative Deepening. So what this algorithm does is it basically goes level by level,",
    "start": "2695815",
    "end": "2705655"
  },
  {
    "text": "same as BFS, because then that way i- if you find a solution, you're done, everything is great, right?",
    "start": "2705655",
    "end": "2711070"
  },
  {
    "text": "Uh, but what, what it does is for every level, it runs a full DFS.",
    "start": "2711070",
    "end": "2716350"
  },
  {
    "text": "And, and it feels- it's like it's gonna take a long time. But, but it's actually good because, again, if you find your solution, like,",
    "start": "2716350",
    "end": "2722800"
  },
  {
    "text": "early on, it doesn't matter that you have ran like a million DFSs so far. So, um, so it's kinda like an analogy of it is,",
    "start": "2722800",
    "end": "2730150"
  },
  {
    "text": "is imagine that you have a dog, and that dog is DFS, and it's on a leash, and you have like a short leash.",
    "start": "2730150",
    "end": "2736615"
  },
  {
    "text": "And when it is on that leash, it's going to do a DFS and try out and search all the space, and it doesn't find anything.",
    "start": "2736615",
    "end": "2741805"
  },
  {
    "text": "So it comes back, and then you're going to extend the leash a little bit, and it's gonna do everything, and, like,",
    "start": "2741805",
    "end": "2747160"
  },
  {
    "text": "search everything, and do a DFS. Comes back, doesn't find anything you extend the leash again. So, so that's the idea.",
    "start": "2747160",
    "end": "2752830"
  },
  {
    "text": "Like extending the leash is this idea of extending your, your levels, okay?",
    "start": "2752830",
    "end": "2758185"
  },
  {
    "text": "So, uh, so how does, how does DFS iterative deepening be? Yes?",
    "start": "2758185",
    "end": "2763240"
  },
  {
    "text": "Um, if what we're looking for in following the tree is even worse [inaudible] Uh, say that again, say that.",
    "start": "2763240",
    "end": "2770095"
  },
  {
    "text": "So if, if what we're looking for in following the tree, is that gonna be worse than- Yes, exactly. Yes, that's, that's okay. That's a good point.",
    "start": "2770095",
    "end": "2777099"
  },
  {
    "text": "So the point is, uh, the, the point that, um, I mentioned is, if your solution is,",
    "start": "2777100",
    "end": "2782260"
  },
  {
    "text": "like, here, you are screwed. It's worse than BFS or DFS, right? You're doing all these DFSs through like a bigger, like,",
    "start": "2782260",
    "end": "2789430"
  },
  {
    "text": "higher-level BFS and you're- and, and it's, it's a terrible situation. But again, in practice, like,",
    "start": "2789430",
    "end": "2795290"
  },
  {
    "text": "we are hoping the solutions are not gonna end up like down this tree. But yeah, if the solutions are down the tree, then you're not, like, winning anything by, by using DFS.",
    "start": "2795290",
    "end": "2803995"
  },
  {
    "text": "What exactly, like what problems do you think DFS iterative deepening would be, like, useful?",
    "start": "2803995",
    "end": "2810010"
  },
  {
    "text": "In general, if you- okay. So the question is, yeah, so what problems do we think DFS iterative deepening is useful?",
    "start": "2810010",
    "end": "2815515"
  },
  {
    "text": "Uh, in general, if like, there are problems that I think BFS is going to be useful, usually, DFS iterative deepening is useful.",
    "start": "2815515",
    "end": "2821680"
  },
  {
    "text": "The reason I would think that is, like, there is some structure about the problem that I would think I would find my solution earlier.",
    "start": "2821680",
    "end": "2827920"
  },
  {
    "text": "So if I, if I have some reasons or some, some reasons about the problem, about the structure of the problem,",
    "start": "2827920",
    "end": "2833484"
  },
  {
    "text": "and I think solutions are low depth, I should use some of these algorithms. And in DFS with iterative deepening in terms of space,",
    "start": "2833485",
    "end": "2839830"
  },
  {
    "text": "it helps too, so might as well use that. All right. So, so in terms of space, it's going to be order of small d. So in terms of",
    "start": "2839830",
    "end": "2848230"
  },
  {
    "text": "space order of small d. And then in terms of time, you'd get the same benefits of,",
    "start": "2848230",
    "end": "2854425"
  },
  {
    "text": "uh, it gets the same benefits of, uh, BFS. So, so that's, that's nice.",
    "start": "2854425",
    "end": "2859855"
  },
  {
    "text": "And then again, like, because it's has this BFS out of the loop, it has the same sort of constraint on the cost.",
    "start": "2859855",
    "end": "2865915"
  },
  {
    "text": "That's gotta be a, uh, constant constraint that cost, right?",
    "start": "2865915",
    "end": "2871240"
  },
  {
    "text": "So that is our table. And again, in looking at this table in terms of time,",
    "start": "2871240",
    "end": "2877330"
  },
  {
    "text": "you're just not doing well, right? Like you have this exponential time algorithms here. And, um, we cou- could avoid",
    "start": "2877330",
    "end": "2885250"
  },
  {
    "text": "the exponential space with using something like DFS iterative deepening. But still, this time thing is- it's just not that great, okay?",
    "start": "2885250",
    "end": "2892900"
  },
  {
    "text": "And what we wanna do now is we wanna talk about search algorithms that bring down this exponential time to polynomial time somehow.",
    "start": "2892900",
    "end": "2900250"
  },
  {
    "text": "And then there is no magic, we'll talk about how. [LAUGHTER] And dynamic programming is,",
    "start": "2900250",
    "end": "2905860"
  },
  {
    "text": "is the first algorithm, okay? Yes? You might give us ideas b to the d time in term of d space.",
    "start": "2905860",
    "end": "2913480"
  },
  {
    "text": "Uh, yeah. So it- so, so the way iterative deepening works is, it sets the lev- or say level is one.",
    "start": "2913480",
    "end": "2921325"
  },
  {
    "text": "So if level is one, I'm gonna do a full DFS, okay? Because I'm doing a full DFS in terms of space,",
    "start": "2921325",
    "end": "2928195"
  },
  {
    "text": "uh, I- it's the same as DFS in terms of space. I just- it's just the same as the length where we find a solution.",
    "start": "2928195",
    "end": "2934690"
  },
  {
    "text": "Let's say the length where I find the solution is small d. So now, I say level is two, my new level is two,",
    "start": "2934690",
    "end": "2940615"
  },
  {
    "text": "I'm gonna do a full DFS, okay? [NOISE] So when I do a full DFS,",
    "start": "2940615",
    "end": "2945775"
  },
  {
    "text": "then in terms of space, I need to- I need to just remember my pairings, so that's why it's order of d in terms of space.",
    "start": "2945775",
    "end": "2952930"
  },
  {
    "text": "And in terms of time, it's, it's order of b to the d because if I find my solution here,",
    "start": "2952930",
    "end": "2958495"
  },
  {
    "text": "I'm done, I don't need to, like, explore anything else. And, and that is exponential but exponential in,",
    "start": "2958495",
    "end": "2964030"
  },
  {
    "text": "in this smaller depth as opposed to the longer depth similar to, similar to BFS. Yes?",
    "start": "2964030",
    "end": "2973360"
  },
  {
    "text": "I'm sorry. I still don't understand why, let's say, like, the small d is the same as the big D, right? And-",
    "start": "2973360",
    "end": "2979375"
  },
  {
    "text": "That's a- okay. So that's a very good question. So you- I think I know it. So you're asking small d, if small d was the same as big D. If I had my solutions down here,",
    "start": "2979375",
    "end": "2986470"
  },
  {
    "text": "why am I, like, differentiating here between a small d and big D, right? Is that what you're asking or am I-",
    "start": "2986470",
    "end": "2991630"
  },
  {
    "text": "I'm just gonna ask if it's, like, the depth is quite large, like, small d is large,",
    "start": "2991630",
    "end": "2997690"
  },
  {
    "text": "and why is it, like, why do we need to find also a function of d?",
    "start": "2997690",
    "end": "3003060"
  },
  {
    "text": "As in why wouldn't it be, like, d times b to the d? Um, Oh, I see where you're saying.",
    "start": "3003060",
    "end": "3009690"
  },
  {
    "text": "So, so you're saying, okay, like, when I'm doing, when I'm performing DFS iterative deepening,",
    "start": "3009690",
    "end": "3015255"
  },
  {
    "text": "then I'm doing DF- DFSs. So sure, it's order of b to the d for each of them,",
    "start": "3015255",
    "end": "3020369"
  },
  {
    "text": "but then I'm doing d of them. And if d is really large, I should put that here. Sure, I, I do agree that is the right time.",
    "start": "3020370",
    "end": "3026790"
  },
  {
    "text": "But again, I'm- like, in, in, in the, in the case of this exponential, this is so bad that that we are just dropping that, like, we don't even worry about that,",
    "start": "3026790",
    "end": "3033180"
  },
  {
    "text": "the extra d that comes in. But it is true, you need to have that extra d, like, in, in general if you want to talk about it.",
    "start": "3033180",
    "end": "3038460"
  },
  {
    "text": "Kind of wanna move on to dynamic programming, but last question there. First of all, I'm after that, presumably though you're saving the work that you've done during the prior iterations,",
    "start": "3038460",
    "end": "3045240"
  },
  {
    "text": "so you're not really computing anything larger than O to the B, capital D, correct? Yeah, that's right. The worst-case scenario is O to the B,",
    "start": "3045240",
    "end": "3052200"
  },
  {
    "text": "capital D. All right. So let's move to dynamic programming. Okay. So, so what does dynamic programming do?",
    "start": "3052200",
    "end": "3059760"
  },
  {
    "text": "So maybe I can- I'll, I'll still use this because I might need to use this thing later.",
    "start": "3059760",
    "end": "3067680"
  },
  {
    "text": "Okay. So I'm gonna erase my parameters up on here. Okay. So the idea of dynamic programming,",
    "start": "3067680",
    "end": "3073200"
  },
  {
    "text": "we have already seen this in the first lecture, is I have a state s,",
    "start": "3073200",
    "end": "3078675"
  },
  {
    "text": "and I wanna end up in some end state. But to do that, I can take an action that takes me to S-prime, right?",
    "start": "3078675",
    "end": "3085635"
  },
  {
    "text": "I can, I can end up in s-prime by cost of s and a. I can take an action that,",
    "start": "3085635",
    "end": "3091770"
  },
  {
    "text": "that ends up in s-prime. And then from there, I can do a bunch of things. I don't know what. But I'll end up in some end state, okay?",
    "start": "3091770",
    "end": "3100305"
  },
  {
    "text": "And, and what I'm interested in actually computing is for this state s is to find what is future cost of s, okay?",
    "start": "3100305",
    "end": "3110940"
  },
  {
    "text": "And this part of it, is future cost of",
    "start": "3110940",
    "end": "3116385"
  },
  {
    "text": "S prime and I don't know what it is but I can just leave it as future cost of S prime. So if I wanna find what future cost of S is,",
    "start": "3116385",
    "end": "3124275"
  },
  {
    "text": "maybe I should make this a little bit to the right one cycle. I'm gonna write cost of s, a for this edge.",
    "start": "3124275",
    "end": "3130800"
  },
  {
    "text": "I'm gonna erase this. What I'm interested in finding is future cost of my state S. So what is that equal to?",
    "start": "3130800",
    "end": "3139380"
  },
  {
    "text": "Well, that's going to be equal to this cost of s, a. Right? Like a state S, I'm going to take action a.",
    "start": "3139380",
    "end": "3145305"
  },
  {
    "text": "So it's going to be cost of s, a plus future cost of S-prime.",
    "start": "3145305",
    "end": "3152190"
  },
  {
    "text": "Again, I don't know what that is but that's future Dorsa's problem. So this is future cost of S prime.",
    "start": "3152190",
    "end": "3159915"
  },
  {
    "text": "And then you might ask well what is a? Where does a come from? How do I know what a is?",
    "start": "3159915",
    "end": "3165645"
  },
  {
    "text": "I don't know. I'm gonna pick an a that minimizes this sum.",
    "start": "3165645",
    "end": "3170895"
  },
  {
    "text": "I'm gonna put this around it. Okay? So future cost of S is just going to be equal to minimum of cost of s,",
    "start": "3170895",
    "end": "3180960"
  },
  {
    "text": "a, plus future costs of S-prime over all possible actions.",
    "start": "3180960",
    "end": "3186045"
  },
  {
    "text": "And it's going to be 0, if you are in an end state. If is End of S is true.",
    "start": "3186045",
    "end": "3194370"
  },
  {
    "text": "Okay? So if I already know I'm in an end state, then there is no future cost. That's going to be equal to 0.",
    "start": "3194370",
    "end": "3200205"
  },
  {
    "text": "Otherwise, future cost is just going to be, cost of going from S to the next state and then future cost computed from there.",
    "start": "3200205",
    "end": "3207705"
  },
  {
    "text": "Okay? So that is just how one would go about",
    "start": "3207705",
    "end": "3213855"
  },
  {
    "text": "formalizing this problem as a dynamic problem and they're not a dynamic programming problem, okay?",
    "start": "3213855",
    "end": "3221010"
  },
  {
    "text": "And then how do I find what S prime is? Well, I wrote this successor and cost function [NOISE] in my code.",
    "start": "3221010",
    "end": "3226770"
  },
  {
    "text": "Remember like we know how to find the successor given that we are in state S and we are taking action a.",
    "start": "3226770",
    "end": "3233505"
  },
  {
    "text": "So S prime is just calling that successor function over s and a. All right. So let's go back to some route finding example.",
    "start": "3233505",
    "end": "3242640"
  },
  {
    "text": "So, so this is slightly different route finding example. So let's say that we want to find the minimum cost path",
    "start": "3242640",
    "end": "3248579"
  },
  {
    "text": "from going from city 1 to some city n in the future, moving forward, we can always just move forward and it",
    "start": "3248580",
    "end": "3255230"
  },
  {
    "text": "costs c_ij to go from city i to city j. Okay? So this this is my new search problem.",
    "start": "3255230",
    "end": "3261665"
  },
  {
    "text": "Okay? So, so this is kind of how the tree would look like. So, so if I wanna draw this research for this,",
    "start": "3261665",
    "end": "3267120"
  },
  {
    "text": "I can start from city one, I can end up in a city two or three or four. Then if I'm in city two,",
    "start": "3267120",
    "end": "3272850"
  },
  {
    "text": "I can end up in three or four. If I'm in three, I can end up in four like this is how it will look like. Ah, I can have a much larger version of it.",
    "start": "3272850",
    "end": "3280680"
  },
  {
    "text": "If I'm talking about going to city seven, then I have this type of tree. And by just like looking at this tree,",
    "start": "3280680",
    "end": "3287880"
  },
  {
    "text": "you see all these sub-trees just being repeated like throughout. If you just look at five like future cost of five,",
    "start": "3287880",
    "end": "3295215"
  },
  {
    "text": "it's gonna be the same thing. Right? It's just gonna be the same thing throughout. And if I use like something like tree search that we have talked about,",
    "start": "3295215",
    "end": "3301980"
  },
  {
    "text": "then I have to like go and explore like this whole tree and then it's gonna be really time-consuming.",
    "start": "3301980",
    "end": "3307830"
  },
  {
    "text": "So, so the key insight here is future cost, this value of future cost, only depends on state.",
    "start": "3307830",
    "end": "3314385"
  },
  {
    "text": "Okay? So it only depends on where I am right now. And because of that maybe I can just store that the first time that I",
    "start": "3314385",
    "end": "3319980"
  },
  {
    "text": "compute future cost of five and then like in the future, I just called that and, and, and I don't like recompute future costs of five.",
    "start": "3319980",
    "end": "3326880"
  },
  {
    "text": "Okay? So, so the observation here is, future cost only depends on current city.",
    "start": "3326880",
    "end": "3333270"
  },
  {
    "text": "So, so my state in this case is current city and, and that state is enough for me to compute future cost.",
    "start": "3333270",
    "end": "3339825"
  },
  {
    "text": "Okay? All right. So, so if you, if you think about what we have talked about so far,",
    "start": "3339825",
    "end": "3346140"
  },
  {
    "text": "like we have thought about like these these search problems where the state we think of it as the past sequence of actions and",
    "start": "3346140",
    "end": "3352170"
  },
  {
    "text": "the history of actions you have taken and all that. But right now for this problem, like state is just current city and that's enough.",
    "start": "3352170",
    "end": "3358395"
  },
  {
    "text": "Okay? So and and because of that, you are getting all these exponential savings in time and space because again,",
    "start": "3358395",
    "end": "3364830"
  },
  {
    "text": "I can compute future cost of five there and collapse that whole tree into this graph and just go about solving",
    "start": "3364830",
    "end": "3371490"
  },
  {
    "text": "my search problem on this graph as opposed to that that whole tree. Right. So, so that's that's where you get the savings from, from dynamic programming.",
    "start": "3371490",
    "end": "3380050"
  },
  {
    "text": "Um, and I just wanna emphasize that again of, let me actually do this. So, so the key idea here is,",
    "start": "3380150",
    "end": "3387390"
  },
  {
    "text": "like I was saying there is no magic happening here. The key idea here is is how to figure out what your state is.",
    "start": "3387390",
    "end": "3393119"
  },
  {
    "text": "It's actually important to think about what your state is. In this case we are, we're assuming a state is summary of all parts,",
    "start": "3393120",
    "end": "3399450"
  },
  {
    "text": "all past actions that we've taken sufficient for us to choose the optimal future.",
    "start": "3399450",
    "end": "3405015"
  },
  {
    "text": "Okay? So, so that's like a mouthful but ah, basically what that means is, the only reason dynamic programming works.",
    "start": "3405015",
    "end": "3411660"
  },
  {
    "text": "And for this particular example we just saw, is the state the way we define it is enough for us to plan for the future.",
    "start": "3411660",
    "end": "3418079"
  },
  {
    "text": "Like I might have a different problem where the state. Like I define a state in a way that it's not enough for me to do a plan for future.",
    "start": "3418080",
    "end": "3424625"
  },
  {
    "text": "But if I wanna use dynamic programming, then I gotta be smart about choosing my state because, because that is the thing that,",
    "start": "3424625",
    "end": "3430295"
  },
  {
    "text": "that decides for the future. So, so for example for this problem, like I might visit city one, then three, then four, and then",
    "start": "3430295",
    "end": "3436589"
  },
  {
    "text": "six, and for solving this particular search problem, I just need to know that I'm in city six.",
    "start": "3436590",
    "end": "3441960"
  },
  {
    "text": "That is enough. Okay? But like maybe I have some other problem that requires knowing one, three, four, and six and and because of that maybe I need to know the full tree.",
    "start": "3441960",
    "end": "3450240"
  },
  {
    "text": "Okay? So so this is where the saving comes from like figuring out what the state is and and defining that. Right? All right.",
    "start": "3450240",
    "end": "3456720"
  },
  {
    "text": "So so we will come back to this notion of state again and I think about the state a little bit more carefully. But maybe before that maybe we can just implement",
    "start": "3456720",
    "end": "3463440"
  },
  {
    "text": "dynamic programming real quick. All right. So let's go back to our tram problem. I'm back to the tram problem and let's implement dynamic programming.",
    "start": "3463440",
    "end": "3474194"
  },
  {
    "text": "Okay. So how do we do this? We're basically just writing that like math over there into code. That, that's all you're doing.",
    "start": "3474195",
    "end": "3480240"
  },
  {
    "text": "So, so we're going to define this future cost. If you're in an end state, we're going to return 0.",
    "start": "3480240",
    "end": "3485460"
  },
  {
    "text": "If you're not in an end state we're just going to add up cost plus future cost of S prime.",
    "start": "3485460",
    "end": "3491130"
  },
  {
    "text": "How do we get S-prime? Well, we're gonna call this successor success and cost function. So we can get action new, new, new state and costs.",
    "start": "3491130",
    "end": "3499515"
  },
  {
    "text": "And then you're gonna take the minimum of them over, over all possible actions. So minimum of cost plus future cost of new state.",
    "start": "3499515",
    "end": "3508110"
  },
  {
    "text": "That is literally what we have on the board. Okay? All right.",
    "start": "3508110",
    "end": "3514710"
  },
  {
    "text": "And we're returning the result. So that is future cost. What's your dynamic programming there?",
    "start": "3514710",
    "end": "3520725"
  },
  {
    "text": "It should, it should return a future cost over initial state. Right? Start state.",
    "start": "3520725",
    "end": "3526510"
  },
  {
    "text": "And you will return the history if you want. In this case, I'm not returning [LAUGHTER] the history.",
    "start": "3528290",
    "end": "3535080"
  },
  {
    "text": "Okay. So how do I get savings? Well, I gotta put a cache. Right? That's the only way I'm gonna get savings.",
    "start": "3535080",
    "end": "3540945"
  },
  {
    "text": "So um, that is where I put the cache. And if I, if the state is already in the cache.",
    "start": "3540945",
    "end": "3548520"
  },
  {
    "text": "I'll just call my cache. Otherwise I don't. Any question there? [inaudible].",
    "start": "3548520",
    "end": "3554849"
  },
  {
    "text": "What's that? Are we getting future costs? How are we getting? Uh, say that again. Sorry, I didn't hear.",
    "start": "3554850",
    "end": "3560120"
  },
  {
    "text": "So future cost takes some states, but what actually- is there like- uh, do we actually have, like, a function in the menu to calculate",
    "start": "3560120",
    "end": "3565280"
  },
  {
    "text": "future costs or is that like [inaudible]. So future cost is going to be, uh- yeah, so, so we have this function, right?",
    "start": "3565280",
    "end": "3570830"
  },
  {
    "text": "Future cost over state. But you're going to call future cost- so, so, so future cost over state is going to be equal to cost of state and actions,",
    "start": "3570830",
    "end": "3579019"
  },
  {
    "text": "in this function I'm saying all possible actions, try that out, plus future costs of S prime. And S prime comes from the successor and, and, and cost function, uh,",
    "start": "3579020",
    "end": "3586790"
  },
  {
    "text": "successor and cost function. All right. So- and then, yeah- and so,",
    "start": "3586790",
    "end": "3593000"
  },
  {
    "text": "so we do the caching, the proper caching type of way of doing this too. And now we have dynamic programming.",
    "start": "3593000",
    "end": "3599170"
  },
  {
    "text": "So we can basically call this over, uh, our tram problem.",
    "start": "3599170",
    "end": "3604494"
  },
  {
    "text": "So I'm gonna, I'm gonna move forward. Okay. So let's do print solution,",
    "start": "3604495",
    "end": "3613085"
  },
  {
    "text": "dynamic programming over our problem. Uh, you can, again, play around with this. The only way I'm checking this is if it gives me",
    "start": "3613085",
    "end": "3620090"
  },
  {
    "text": "the same solution as backtracking search because I knew how that works, right?",
    "start": "3620090",
    "end": "3625110"
  },
  {
    "text": "So let's just call it on ten. And, yeah, it gave me the same, the same answer.",
    "start": "3625110",
    "end": "3630880"
  },
  {
    "text": "So I can play around with this, okay? All right. So, uh-huh, let's go back.",
    "start": "3630880",
    "end": "3639620"
  },
  {
    "text": "Okay. So one assumption that we have here, to just point out, is we are assuming that this graph is going to be acyclic.",
    "start": "3639970",
    "end": "3648665"
  },
  {
    "text": "So, so that's, that's an assumption that we need to make when we are solving this dynamic programming problem. And, and the reason is,",
    "start": "3648665",
    "end": "3654560"
  },
  {
    "text": "[NOISE] well, we need to compute this future cost, right? For me to compute future costs of S,",
    "start": "3654560",
    "end": "3660290"
  },
  {
    "text": "the S, S prime, I need to, like, have thought about- sorry. For me to compute future costs of S,",
    "start": "3660290",
    "end": "3666155"
  },
  {
    "text": "I need to have thought about future costs of S prime. So there is, kind of, this natural ordering that exists between my state.",
    "start": "3666155",
    "end": "3672320"
  },
  {
    "text": "So if I think about an example where there are cycles, then, then I don't have that ordering, right?",
    "start": "3672320",
    "end": "3678470"
  },
  {
    "text": "If I want to compute, let's say, I want to go from A to D here, and on B, C. So if I want to compute future cost of B,",
    "start": "3678470",
    "end": "3687305"
  },
  {
    "text": "I don't really know if I should have computed future costs of A before or C before or what order should I have gone to compute,",
    "start": "3687305",
    "end": "3695750"
  },
  {
    "text": "like, future costs of B? So, so you actually need to have some way of ordering your states in order to compute these future costs and,",
    "start": "3695750",
    "end": "3704210"
  },
  {
    "text": "and apply dynamic programming. So that's why, like, we can't really have cycles, like, when we, when we think about this algorithm.",
    "start": "3704210",
    "end": "3709970"
  },
  {
    "text": "But we are going to talk about, uh, uniform cost search which actually allows us to have cycles, like, in a few slides. Yes.",
    "start": "3709970",
    "end": "3716330"
  },
  {
    "text": "So when is the run time of the dynamic programming? So the run time of this is actually polynomial time in the order of states.",
    "start": "3716330",
    "end": "3722330"
  },
  {
    "text": "So order of n. O of n? Yeah O of n, where n is the number of states.",
    "start": "3722330",
    "end": "3727430"
  },
  {
    "text": "Yeah. Okay. All right. So- all right. So let's talk about the idea of states a little bit",
    "start": "3727430",
    "end": "3734119"
  },
  {
    "text": "more because I think this is, this is actually interesting. All right. So, so let's just reiterate. What is a state?",
    "start": "3734120",
    "end": "3739174"
  },
  {
    "text": "State is a summary of all past actions sufficient to choose future actions optimally, okay?",
    "start": "3739175",
    "end": "3745460"
  },
  {
    "text": "So, so everyone happy with what state is? So now, what we want to do is,",
    "start": "3745460",
    "end": "3750650"
  },
  {
    "text": "we want to figure out how we should define our state space. Because, again, this is an important problem, right? Like, how we we're defining state space is",
    "start": "3750650",
    "end": "3757730"
  },
  {
    "text": "the thing that gets the dynamic programming working. So, so we got to, we got to think about how to do that. So, so let's go back to this example,",
    "start": "3757730",
    "end": "3764180"
  },
  {
    "text": "and let's just change that a little bit. So, so this is the same example of, I'm going from city one to city n,",
    "start": "3764180",
    "end": "3769670"
  },
  {
    "text": "I can only move forward, and it cost C_i_j to go from any city i to city j,",
    "start": "3769670",
    "end": "3774740"
  },
  {
    "text": "and I'm going to add a constraint. And the constraint is, I can't visit three odd cities in a row, okay?",
    "start": "3774740",
    "end": "3781205"
  },
  {
    "text": "So what that means is, um, [NOISE] maybe I'm in state one.",
    "start": "3781205",
    "end": "3787355"
  },
  {
    "text": "And then, I went to state three, or city one, I went to city three.",
    "start": "3787355",
    "end": "3793505"
  },
  {
    "text": "And then after that, can I go to city seven or- no, based on this constraint that I've added,",
    "start": "3793505",
    "end": "3799355"
  },
  {
    "text": "I, I, like, can't do that, right? So I want to define a state space that allows me to keep track of these things,",
    "start": "3799355",
    "end": "3805865"
  },
  {
    "text": "so I can solve this new search problem with this new constraint. So, so how should I, how should I do that?",
    "start": "3805865",
    "end": "3811760"
  },
  {
    "text": "[NOISE] So in, in the previous problem, when we didn't have the constraint, our state was just a current city.",
    "start": "3811760",
    "end": "3819185"
  },
  {
    "text": "Like previously, we just cared about the current city. And the reason we cared about the current city is like,",
    "start": "3819185",
    "end": "3825350"
  },
  {
    "text": "is like we are solving the search problem, like, we end up in a city. We need to know how I'm going- where I should go from three.",
    "start": "3825350",
    "end": "3831350"
  },
  {
    "text": "So I should, I should have my current city in general, right? So, so for the previous problem without the constraint,",
    "start": "3831350",
    "end": "3836450"
  },
  {
    "text": "current city was enough. But, but now current city is not enough, right? I actually need to know, like,",
    "start": "3836450",
    "end": "3841550"
  },
  {
    "text": "something about my past, okay? Yes. [inaudible] have a count of how many that's odd states.",
    "start": "3841550",
    "end": "3848405"
  },
  {
    "text": "Yeah. That's actually a very good point. [NOISE] Yeah. And so, so one suggestion is, have a count of how many odd states.",
    "start": "3848405",
    "end": "3854435"
  },
  {
    "text": "Not only maybe, like- and the- maybe the first thing that would come to our mind is something simpler. So maybe we say, well,",
    "start": "3854435",
    "end": "3859550"
  },
  {
    "text": "the state is- maybe I'll write previous city just to be similar to the slide. The state- like, when we say, well,",
    "start": "3859550",
    "end": "3865490"
  },
  {
    "text": "the state is previous city and current city. Okay? So this is one possible option for, for my state, right?",
    "start": "3865490",
    "end": "3873710"
  },
  {
    "text": "Because, because if I have this, if I have this guy as my state, and then that is enough, right? Like if I- my current city is three,",
    "start": "3873710",
    "end": "3880714"
  },
  {
    "text": "I know my previous city was one. I know I shouldn't go to seven, like that's enough for me to make,",
    "start": "3880715",
    "end": "3885934"
  },
  {
    "text": "like, future decisions, okay? But there is a problem with this. Well, what is the problem?",
    "start": "3885935",
    "end": "3892160"
  },
  {
    "text": "So I have n cities, right? So, so current city can take n possible action and n possible states,",
    "start": "3892160",
    "end": "3900170"
  },
  {
    "text": "previous city can also take n possible options, has n possible options. So if I think about the size of my state space,",
    "start": "3900170",
    "end": "3907040"
  },
  {
    "text": "it is n squared. If I decide to choose the state, okay? If I, if I decide to choose the state,",
    "start": "3907040",
    "end": "3912695"
  },
  {
    "text": "I'm going to have n squared states. And remember, we are doing this dynamic programming thing, like, we need to actually,",
    "start": "3912695",
    "end": "3917900"
  },
  {
    "text": "like, write down, like, all the- like, how to get from all those states. That's gonna be big. But there is an improvement to this.",
    "start": "3917900",
    "end": "3923750"
  },
  {
    "text": "And that's an improvement that you suggested, which is, I don't actually need to have this whole giant previous city which has n options.",
    "start": "3923750",
    "end": "3931115"
  },
  {
    "text": "I can just have a counter to just know whether the previous city was odd or not. Like, that's enough, right?",
    "start": "3931115",
    "end": "3936860"
  },
  {
    "text": "Like if I- I don't care if it was one or three or whatever. Like, I just care to know if previous city was odd or not.",
    "start": "3936860",
    "end": "3942230"
  },
  {
    "text": "So, so another option for- I'll write it here. Another option for my state is to know if previous was odd or not, okay?",
    "start": "3942230",
    "end": "3953675"
  },
  {
    "text": "And then I need to know my current city again, right? Current city we need that because, like, we need to know how to get from there.",
    "start": "3953675",
    "end": "3960305"
  },
  {
    "text": "And then this brings down my state space, like, how does it bring down my state space? Because, well, what's the size of my state space?",
    "start": "3960305",
    "end": "3967085"
  },
  {
    "text": "This guy can take n possible, uh, states. If my previous city was odd, that's two, right?",
    "start": "3967085",
    "end": "3973640"
  },
  {
    "text": "Like, so I just brought down my state space from something that was n squared to 2n,",
    "start": "3973640",
    "end": "3979549"
  },
  {
    "text": "and, and that's a good improvement. So in general, when you're picking these state spaces, you should pick the minimal, like,",
    "start": "3979550",
    "end": "3985700"
  },
  {
    "text": "sufficient thing for you to make decisions. So it's got to be a summary of all the previous actions and",
    "start": "3985700",
    "end": "3991280"
  },
  {
    "text": "previous things that you need to make future decisions, but pick the minimum one because you're storing these things,",
    "start": "3991280",
    "end": "3996964"
  },
  {
    "text": "and it, it actually matters to pick the smallest one. So, so here is an example of, like, exactly that.",
    "start": "3996965",
    "end": "4002050"
  },
  {
    "text": "So, so my state is now this tuple of whether the previous city was odd or not, and my current city.",
    "start": "4002050",
    "end": "4007090"
  },
  {
    "text": "So if I start at city 1, well, like, I don't have a previous city, and I'm at city one, I could go to city three,",
    "start": "4007090",
    "end": "4014215"
  },
  {
    "text": "and I end up in odd and three. I could try to go to city seven, well, that's not possible because now I have listed three states, and,",
    "start": "4014215",
    "end": "4022330"
  },
  {
    "text": "and I end up here, and there are, like, the rest of the tree, you can have any other examples. Yeah. [inaudible].",
    "start": "4022330",
    "end": "4031570"
  },
  {
    "text": "So, so the way I'm counting this is, how my- so, so my state is a tuple of two things, right?",
    "start": "4031570",
    "end": "4036955"
  },
  {
    "text": "If the previous city is odd or even, I have two options here. It's either odd or even, that's two.",
    "start": "4036955",
    "end": "4042145"
  },
  {
    "text": "And then my current city. And I have n possible options for my current city. It could be city one, city two, city three,",
    "start": "4042145",
    "end": "4048085"
  },
  {
    "text": "so that's n. So I have n options here. I have two options here. That's why I'm saying my whole state space is two times n, okay?",
    "start": "4048085",
    "end": "4055585"
  },
  {
    "text": "All right. Okay. So let's try out this example.",
    "start": "4055585",
    "end": "4061705"
  },
  {
    "text": "Let's not put it in. Uh, just talk to your neighbors about this, and then maybe, if you have ideas just let me know in a minute.",
    "start": "4061705",
    "end": "4068620"
  },
  {
    "text": "So- okay. So what is the difference here? So we're traveling from city one to city n, and then the constraint is changed.",
    "start": "4068620",
    "end": "4074380"
  },
  {
    "text": "Now, we want to visit at least three odd cities. So that's what we wanna do. And then the question is, what is the minimal state?",
    "start": "4074380",
    "end": "4082670"
  },
  {
    "text": "Talk to your neighbors. [NOISE]",
    "start": "4083040",
    "end": "4110600"
  },
  {
    "text": "All right. Any ideas?",
    "start": "4110600",
    "end": "4113310"
  },
  {
    "text": "Any ideas? [BACKGROUND] What is a possible state?",
    "start": "4119110",
    "end": "4124384"
  },
  {
    "text": "Like it- don't worry about the minimal even, like for now. Like what do I need to keep track of?",
    "start": "4124385",
    "end": "4130145"
  },
  {
    "text": "Number of odd cities. Number of, number of odd cities? Yeah. Okay. So- and is that it? Do I need to just know the number of odds cities?",
    "start": "4130145",
    "end": "4136955"
  },
  {
    "text": "Um, or number of odd is about your, uh, [OVERLAPPING]",
    "start": "4136955",
    "end": "4143630"
  },
  {
    "text": "So number- so, so what I meant is I also need to have current city, right? So, okay. So one possible option for this new example,",
    "start": "4143630",
    "end": "4150290"
  },
  {
    "text": "I'm gonna write that here, is I want to visit at least three odd cities,",
    "start": "4150290",
    "end": "4155375"
  },
  {
    "text": "I also need my- to know my current city, for any of these types- like, not any of these types of problems, for these particular problems that I've defined here,",
    "start": "4155375",
    "end": "4162080"
  },
  {
    "text": "I need to know where I am. So I need to know what my current city is. So- so that is, like, that is given what I need to have that, okay?",
    "start": "4162080",
    "end": "4168694"
  },
  {
    "text": "So I want to see at least three odd cities. So one possible option is to just have a counter and keep",
    "start": "4168695",
    "end": "4174980"
  },
  {
    "text": "counting number of odd cities, okay?",
    "start": "4174980",
    "end": "4180125"
  },
  {
    "text": "So this could be one potential state, okay? Yes? Do the cities have to be different or it could be one, three, one?",
    "start": "4180125",
    "end": "4190100"
  },
  {
    "text": "So, um, okay, so the question is do the cities need to be different? The way we are defining the problem is we are moving forward.",
    "start": "4190100",
    "end": "4197120"
  },
  {
    "text": "If I'm in one, like, I can just just move forward. I can't like stay at one or I can't, like, go back. So- so we're always moving forward.",
    "start": "4197120",
    "end": "4203000"
  },
  {
    "text": "But when we talk about the- the state space, we are talking about the more general, like, setting.",
    "start": "4203000",
    "end": "4208070"
  },
  {
    "text": "Like, some- some of that 2N might not even be possible, but- but that's the way we are counting, okay?",
    "start": "4208070",
    "end": "4213260"
  },
  {
    "text": "All right. So- so this is one option, but I can actually do better than this. Yes?",
    "start": "4213260",
    "end": "4218870"
  },
  {
    "text": "[inaudible] you need at least three odd cities, and then you need at least two odd cities,",
    "start": "4218870",
    "end": "4224150"
  },
  {
    "text": "then you need at least one odd city and then you're- And then you're done. Right. So- so a suggestion there is we can- we can have, like, you can- you can start, like,",
    "start": "4224150",
    "end": "4230410"
  },
  {
    "text": "saying you need at least three odd cities, then you need at least two odd cities, then you need at least one- one odd city and then you're done.",
    "start": "4230410",
    "end": "4236074"
  },
  {
    "text": "And one way of formalizing that, that's exactly right, right? I only care if I have four odd cities now, or five odd cities, like,",
    "start": "4236075",
    "end": "4241460"
  },
  {
    "text": "as long as I have like above three, that's- that's good enough, right? One odd city, two odd city, three odd city,",
    "start": "4241460",
    "end": "4247130"
  },
  {
    "text": "above that is just three plus, like- like that's enough for me, okay? So if I have this,",
    "start": "4247130",
    "end": "4252949"
  },
  {
    "text": "then the state space here is going to be N options here, and number of odd cities,",
    "start": "4252950",
    "end": "4259070"
  },
  {
    "text": "it's around N over 2, so it's going to be N squared over 2. But if I use this- this new suggestion,",
    "start": "4259070",
    "end": "4265745"
  },
  {
    "text": "where I don't keep track of four, five, six, seven, I just keep track of one, two, and three plus,",
    "start": "4265745",
    "end": "4270934"
  },
  {
    "text": "then my state space ends up becoming 3 times N, and I- I can formally write that as S is equal to minimum of number of odd cities,",
    "start": "4270934",
    "end": "4282210"
  },
  {
    "text": "and three, and then current city, you need the current city.",
    "start": "4282700",
    "end": "4289385"
  },
  {
    "text": "And with this state space, then the size is equal to 3N, okay?",
    "start": "4289385",
    "end": "4297335"
  },
  {
    "text": "So I just, again, brought down N squared to N, and that's- that's a nice improvement. Yes?",
    "start": "4297335",
    "end": "4303320"
  },
  {
    "text": "Do you not also need an option for zero odd cities specific to [inaudible]",
    "start": "4303320",
    "end": "4308989"
  },
  {
    "text": "Zero. We're starting from city one, so we're already counting that in, but yeah, like, if you have zero odd cities,",
    "start": "4308990",
    "end": "4314630"
  },
  {
    "text": "that is a good point too. All right. So I've gotta move. Okay, so, um, that was that.",
    "start": "4314630",
    "end": "4321770"
  },
  {
    "text": "This is how it looks like. Like you can think of your state space like this again as a tuple of I visited one, two, three, and- and then the cities.",
    "start": "4321770",
    "end": "4329585"
  },
  {
    "text": "I have another example here, you can think about this later and yeah, like, work, work it at home.",
    "start": "4329585",
    "end": "4335705"
  },
  {
    "text": "But, uh, basically the question is, again, you're going from city one to N, and you want to visit more odd cities than even cities.",
    "start": "4335705",
    "end": "4342320"
  },
  {
    "text": "What would be the minimal state space? But we can talk about it offline. So the summary so far,",
    "start": "4342320",
    "end": "4347449"
  },
  {
    "text": "is- is that state is going to be a summary of past actions sufficient to choose future actions optimally.",
    "start": "4347450",
    "end": "4353270"
  },
  {
    "text": "And then dynamic programming, it's not doing any magic, right, it's using this notion of state to bring down",
    "start": "4353270",
    "end": "4358580"
  },
  {
    "text": "this exponential time algorithm to a polynomial time algorithm, and then, with the trick of using memoization,",
    "start": "4358580",
    "end": "4364415"
  },
  {
    "text": "and with a trick of choosing the right state, okay? And we have talked about dynamic programming and how it doesn't work for acyclic graphs.",
    "start": "4364415",
    "end": "4372350"
  },
  {
    "text": "And now, we want to spend a little bit of time talking about uniform cost search, uh, and how that can help with the- with the cycles.",
    "start": "4372350",
    "end": "4380824"
  },
  {
    "text": "So if you guys have seen Dijkstra's algorithm, this is very similar to Dijkstra's, like, yeah.",
    "start": "4380825",
    "end": "4386599"
  },
  {
    "text": "So- so it's basically Dijkstra's. But- all right. So let's- let's actually talk about this.",
    "start": "4386600",
    "end": "4392120"
  },
  {
    "text": "So- so the observation here is that when we- when we think about the cost of getting from start state to some s prime,",
    "start": "4392120",
    "end": "4399725"
  },
  {
    "text": "well, that is going to be equal to cost of going from s to s prime and then some past cost of s, okay.",
    "start": "4399725",
    "end": "4407449"
  },
  {
    "text": "And then when dynamic programming, let's make sure that we have this ordering and these things are computed in order,",
    "start": "4407450",
    "end": "4412790"
  },
  {
    "text": "so we're not worried about, like, visiting the state, like, multiple times. But- but in- in uniform cost search,",
    "start": "4412790",
    "end": "4419420"
  },
  {
    "text": "we might visit a state multiple times, and if you have cycles, we don't know what order to go. But the order we can go is we can actually compute a past cost- a suggested past cost,",
    "start": "4419420",
    "end": "4428900"
  },
  {
    "text": "and- and basically, go over the states based on increasing past cost, okay?",
    "start": "4428900",
    "end": "4434719"
  },
  {
    "text": "So, um, let me actually- yeah, so- so uniform cost search, what it does is it enumerates states in an order of increasing past cost.",
    "start": "4434720",
    "end": "4443765"
  },
  {
    "text": "So- and- and in this case, we need to actually make an assumption here, we need to assume that the- the cost is going to be non-negative.",
    "start": "4443765",
    "end": "4451715"
  },
  {
    "text": "So- so I'm making this assumption for uniform cost search. So here is an example of uniform cost search running- oh, we don't have internet,",
    "start": "4451715",
    "end": "4460130"
  },
  {
    "text": "I just- yeah, there is a video of uniform cost search running in action. If I have time, I'll connect to internet and get it working.",
    "start": "4460130",
    "end": "4467930"
  },
  {
    "text": "But- so- so let's talk about the high level idea of uniform cost search. So in uniform cost search,",
    "start": "4467930",
    "end": "4474230"
  },
  {
    "text": "we have three sets that we need to keep track of. One is explored set, which is the states that we have found the optimal path.",
    "start": "4474230",
    "end": "4481520"
  },
  {
    "text": "These are the states that we are sure, like, how to get to, we have computed the best path possible to get there, we are, like, done with them, okay?",
    "start": "4481520",
    "end": "4488570"
  },
  {
    "text": "Then we have another set called a frontier, where this frontier are the states that we have seen,",
    "start": "4488570",
    "end": "4495980"
  },
  {
    "text": "we have computed like a cost of getting there, like we know, somehow, how to get there and what would be the cost,",
    "start": "4495980",
    "end": "4501410"
  },
  {
    "text": "but we're just not sure about it, like, like, we're not sure if that was the best way of getting there, okay? So- so the frontier,",
    "start": "4501410",
    "end": "4508160"
  },
  {
    "text": "you can think of it as a known unknown. I know they exist, but, like, I actually, I'm not sure what's the optimal way of getting there.",
    "start": "4508160",
    "end": "4514385"
  },
  {
    "text": "And then finally, we have this unexplored part of states. And these unexplored part of states, I haven't even seen them yet,",
    "start": "4514385",
    "end": "4520594"
  },
  {
    "text": "I- I don't even know how to get there, and you can think of it as more of an unknown unknown. So- so that's, like,",
    "start": "4520595",
    "end": "4526040"
  },
  {
    "text": "how you would think about these three. So let's actually work out an example for uniform cost search. I'm actually going to do this one.",
    "start": "4526040",
    "end": "4532715"
  },
  {
    "text": "So- so I'm just gonna show how uniform cost search runs on this example.",
    "start": "4532715",
    "end": "4539540"
  },
  {
    "text": "So I said we are going to keep track of three sets: unexplored,",
    "start": "4539540",
    "end": "4544740"
  },
  {
    "text": "frontier, and then explored.",
    "start": "4547060",
    "end": "4554130"
  },
  {
    "text": "Explored. Okay? All right. So everything ends up in unexplored at the beginning, A, B, C, and D.",
    "start": "4554740",
    "end": "4562370"
  },
  {
    "text": "And what I wanna do is I wanna go from A to D, that- that's what I wanna do, okay? So I wanna find the minimum path cost- path- minimum cost path to get from A to D,",
    "start": "4562370",
    "end": "4574955"
  },
  {
    "text": "given that I have this graph, okay? So what I'm gonna do is I'm gonna take my initial state, that's A. I am going to put A on my frontier,",
    "start": "4574955",
    "end": "4583174"
  },
  {
    "text": "and it costs zero to get to A because I'm just starting at A, okay?",
    "start": "4583174",
    "end": "4588304"
  },
  {
    "text": "So that's on my frontier, then in the next step, what I'm gonna do is I'm going to pop off the thing with the lowest cost from my frontier.",
    "start": "4588305",
    "end": "4595475"
  },
  {
    "text": "There's one thing on my frontier, I'm just gonna pop off that one thing off my frontier,",
    "start": "4595475",
    "end": "4600890"
  },
  {
    "text": "I'm gonna put that to explored, the cost of getting to A is 0. And then, what I'm going to do is after popping it off from my frontier is,",
    "start": "4600890",
    "end": "4610595"
  },
  {
    "text": "I'm gonna see how I can get from A to any other state. So from A, I can get to B, that's one option, and with the cost of 1.",
    "start": "4610595",
    "end": "4619340"
  },
  {
    "text": "So from A, I can go to B with a cost of 1. Where else can I go? I can go to C with a cost of 100.",
    "start": "4619340",
    "end": "4628700"
  },
  {
    "text": "Okay? So what I just did is I moved B from unexplored to frontier,",
    "start": "4628700",
    "end": "4634654"
  },
  {
    "text": "and then I- I know how I- to get there from A, and I moved C to the frontier, and I know how to get from there.",
    "start": "4634654",
    "end": "4640220"
  },
  {
    "text": "Okay? So now it's the next round, I'm looking at my frontier, A is not on my frontier anymore, it's in explored.",
    "start": "4640220",
    "end": "4647700"
  },
  {
    "text": "And I'm going to pop off the thing with the best cost off my frontier. Well, what is that? That's B.",
    "start": "4647700",
    "end": "4654520"
  },
  {
    "text": "So I'm going to move B to my explored. The way- the best way to get to B,",
    "start": "4654520",
    "end": "4660875"
  },
  {
    "text": "I already know that, right? That's from A to B. Everything is good. Okay? So now that I've popped off B from my frontier,",
    "start": "4660875",
    "end": "4667160"
  },
  {
    "text": "I'm gonna look at B and see what states I can get to from B. From B, I can go to A,",
    "start": "4667160",
    "end": "4672755"
  },
  {
    "text": "but A is already in explored, like, I already know the best way to get to A, so- so there is no reason to do that.",
    "start": "4672755",
    "end": "4678320"
  },
  {
    "text": "From B, I can get to C, and if I want to get to C, then I can actually get to C with the cost of",
    "start": "4678320",
    "end": "4685235"
  },
  {
    "text": "1 plus whatever cost of B is already, 1. So what I'm gonna do is I'm going to erase this,",
    "start": "4685235",
    "end": "4692000"
  },
  {
    "text": "because there is a better way of getting there, and that's from B, okay?",
    "start": "4692000",
    "end": "4697880"
  },
  {
    "text": "And then, from B, I can get to D. So I'm gonna move D from unexplored to frontier.",
    "start": "4697880",
    "end": "4705185"
  },
  {
    "text": "I can get to it from B. And then, how do I get to it from B? There's a cost of 101, right?",
    "start": "4705185",
    "end": "4712640"
  },
  {
    "text": "Because 100 plus cost of getting to that, okay? All right. So I'm- I'm done exploring everything I can do from B.",
    "start": "4712640",
    "end": "4721625"
  },
  {
    "text": "Going back to my frontier again. So these two are not on my frontier. I just have C and D on my frontier.",
    "start": "4721625",
    "end": "4727909"
  },
  {
    "text": "I'm gonna pop off the thing with the best cost, that is C. I'm gonna move that to explored with a cost of two,",
    "start": "4727910",
    "end": "4735930"
  },
  {
    "text": "and the way to- the best way to get that is from B, okay? So we're done with C. And then,",
    "start": "4735930",
    "end": "4742449"
  },
  {
    "text": "we're gonna see where we can go from C. From C, I can go to A. Well, that's done, that's already on the explored- in- in the explored set, I'm not gonna touch that.",
    "start": "4742450",
    "end": "4750120"
  },
  {
    "text": "Similar thing with B, already in the explored, don't need to worry about that. From C, I can get to D, right?",
    "start": "4750120",
    "end": "4756380"
  },
  {
    "text": "And if I want to get to D from C, well, what would be the cost of that? It would be 2 plus 1.",
    "start": "4756380",
    "end": "4761719"
  },
  {
    "text": "So I can update this and have 3. And I can update the way to get to D from here.",
    "start": "4761720",
    "end": "4769894"
  },
  {
    "text": "And then, we're done, we go to frontier. The only thing that's left on the frontier is- is D. I'm going to just pop that off,",
    "start": "4769895",
    "end": "4778025"
  },
  {
    "text": "and then I'm going to add that to explored. And that is 3. And that's what I have in my explored. So the way to get from A to D is- is by taking this route, and it costs 1.",
    "start": "4778025",
    "end": "4788075"
  },
  {
    "text": "So A, B, C, and D. Okay? Is that- is that clear? All right.",
    "start": "4788075",
    "end": "4796235"
  },
  {
    "text": "Okay. So there are two slides left and they're probably gonna kick us out soon,",
    "start": "4796235",
    "end": "4802864"
  },
  {
    "text": "so I'll do this next time. So- so yeah, the two- two slides left is one is",
    "start": "4802865",
    "end": "4807890"
  },
  {
    "text": "going to just go over the- the pseudo-code. So take a look at that, the code is online. And there's a small theorem that says,",
    "start": "4807890",
    "end": "4814760"
  },
  {
    "text": "this is actually doing the right thing. I'll talk about that next time.",
    "start": "4814760",
    "end": "4818730"
  }
]