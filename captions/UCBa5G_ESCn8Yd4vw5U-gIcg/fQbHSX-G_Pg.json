[
  {
    "start": "0",
    "end": "5050"
  },
  {
    "text": "OK. So let's do a quick\nreview of lecture seven. Last time we finished the\ndiscussion and analysis",
    "start": "5050",
    "end": "14970"
  },
  {
    "text": "of gyroscopes. Specifically we talked\nabout vibratory mechanical gyroscopes, which as you know,\nthey measure the Coriolis",
    "start": "14970",
    "end": "24120"
  },
  {
    "text": "acceleration. So let's quickly\nremind ourselves of how essentially the internals\nof the device are constructed.",
    "start": "24120",
    "end": "33150"
  },
  {
    "text": "So if this is the enclosure,\nwhich is a silicon chip, you have a proof mass\ninside the device",
    "start": "33150",
    "end": "41070"
  },
  {
    "text": "and it can move in two axes.",
    "start": "41070",
    "end": "50809"
  },
  {
    "text": "So that's basically the\nconstruction of the device.",
    "start": "50810",
    "end": "56400"
  },
  {
    "text": "And then in one axis,\nremember, it's actively driven, which we call the primary\naxis or the primary mode",
    "start": "56400",
    "end": "63140"
  },
  {
    "text": "of the device. So let's say in our case\nin this direction, that's",
    "start": "63140",
    "end": "69230"
  },
  {
    "text": "our drive mode where we\nbasically generate some drive",
    "start": "69230",
    "end": "76340"
  },
  {
    "text": "force. And we said that the\ndrive force is always",
    "start": "76340",
    "end": "81440"
  },
  {
    "text": "just a pure harmonic at a very\nspecific chosen frequency that",
    "start": "81440",
    "end": "87530"
  },
  {
    "text": "to get the best\nsensitivity for the device, you choose that\nfrequency omega D",
    "start": "87530",
    "end": "93590"
  },
  {
    "text": "to be equal to the\nresonance frequency of that harmonic oscillator.",
    "start": "93590",
    "end": "99680"
  },
  {
    "text": "And then in the\nother axis, which is our sense axis,\nwhat happens is",
    "start": "99680",
    "end": "106750"
  },
  {
    "text": "that as soon as there is some\nangular velocity omega applied",
    "start": "106750",
    "end": "114810"
  },
  {
    "text": "to the device, the Coriolis\neffect will kick in and you get a Coriolis\nacceleration in the sense",
    "start": "114810",
    "end": "122909"
  },
  {
    "text": "direction. And as we showed,\nthe displacement in the sense direction is\nproportional to the angular",
    "start": "122910",
    "end": "129660"
  },
  {
    "text": "velocity omega. So we did the full\nanalysis from scratch, basically, derived\nall the equations.",
    "start": "129660",
    "end": "135030"
  },
  {
    "text": "At the end of the day,\nat the system level, what matters is the sensitivity\nof the device, which",
    "start": "135030",
    "end": "141930"
  },
  {
    "text": "is how much displacement you\nget in your sense axis or sense",
    "start": "141930",
    "end": "147329"
  },
  {
    "text": "direction for a given\nangular velocity omega. So that ratio is basically\nthe sensitivity of the device.",
    "start": "147330",
    "end": "153780"
  },
  {
    "text": "And after we did\nthe full analysis, we basically came up\nwith this expression. And high level things,\nas you can see here,",
    "start": "153780",
    "end": "163260"
  },
  {
    "text": "proof mass in the numerator\nbasically tells you larger proof mass\nmeans more sensitivity.",
    "start": "163260",
    "end": "169200"
  },
  {
    "text": "We have a few basically\ngeometric parameters here,",
    "start": "169200",
    "end": "176110"
  },
  {
    "text": "specifically the n, h, and d. These parameters are tied to\nthe geometry of the comb drive",
    "start": "176110",
    "end": "185590"
  },
  {
    "text": "capacitive actuator\nthat the device uses. So n is the number\nof capacitive plates that you have, h is\nthe height of them,",
    "start": "185590",
    "end": "192610"
  },
  {
    "text": "and d is the spacing between\nthe moving and the fixed plates",
    "start": "192610",
    "end": "198340"
  },
  {
    "text": "of that comb drive actuator. V0 squared, that's the voltage\nor the voltage amplitude",
    "start": "198340",
    "end": "205269"
  },
  {
    "text": "that you apply to your\ncomb drive actuator. And then omega 0, again,\nis the resonance frequency",
    "start": "205270",
    "end": "212380"
  },
  {
    "text": "of the device. And then bxby are\nthe damping factors in the x and y directions\nor in the sense and drive",
    "start": "212380",
    "end": "219070"
  },
  {
    "text": "directions, which typically\nthey are the same. So in our analysis,\nwe made it general",
    "start": "219070",
    "end": "225880"
  },
  {
    "text": "and we're having separate\ndampening factors. But as we said, when you do\nit using just the viscosity",
    "start": "225880",
    "end": "233019"
  },
  {
    "text": "of the gas in a sealed\nchamber inside the device, you typically get the\nsame damping factor",
    "start": "233020",
    "end": "240010"
  },
  {
    "text": "in the two directions. OK. So that's basically the\nfull analysis of gyroscopes.",
    "start": "240010",
    "end": "249310"
  },
  {
    "text": "And again, remember that\nreally down the hood is an accelerometer.",
    "start": "249310",
    "end": "254560"
  },
  {
    "text": "But it's measuring a\nvery specific-- it's designed to measure a very\nspecific type of acceleration,",
    "start": "254560",
    "end": "260409"
  },
  {
    "text": "the Coriolis\nacceleration, which is directly proportional\nto the angular velocity.",
    "start": "260410",
    "end": "268100"
  },
  {
    "text": "So it first finds basically\nCoriolis acceleration. And then with some very, very\nsimple math, which is basically",
    "start": "268100",
    "end": "275890"
  },
  {
    "text": "just a scaling or a\nlinear transformation, it converts that to\nangular velocity.",
    "start": "275890",
    "end": "282440"
  },
  {
    "text": "We also looked at the structure\nof the MEMS devices, 1D and 3D.",
    "start": "282440",
    "end": "287680"
  },
  {
    "text": "So by now I hope that for both\naccelerometers and gyroscopes,",
    "start": "287680",
    "end": "292960"
  },
  {
    "text": "you feel like you really\nknow these devices, at least the mechanical MEMS ones,\ninside and out from scratch,",
    "start": "292960",
    "end": "301659"
  },
  {
    "text": "the physics of it,\nhow they are built, the signal analysis, the\nsystem level analysis, and how",
    "start": "301660",
    "end": "307360"
  },
  {
    "text": "you process basically the\nsignals that you get out of the device, the raw signals\nto basically convert them",
    "start": "307360",
    "end": "314500"
  },
  {
    "text": "to the accelerations\nand angular velocities that you want your\nsensor to measure. Then we started basically\nlooking at the simplest",
    "start": "314500",
    "end": "325000"
  },
  {
    "text": "case of robotic perception,\nwhich is let's use these two",
    "start": "325000",
    "end": "330220"
  },
  {
    "text": "sensors that we learned\nabout, the accelerometer and the gyroscope,\nand do something interesting for autonomy,\nwhich is basically finding",
    "start": "330220",
    "end": "339550"
  },
  {
    "text": "the trajectory of a\nrobot that is moving, which we call dead reckoning.",
    "start": "339550",
    "end": "344780"
  },
  {
    "text": "So this is called\ninertial navigation. And systems that do that,\nthey're called INSes or Inertial Navigation Systems.",
    "start": "344780",
    "end": "351349"
  },
  {
    "text": "So the topic of discussion\ntoday is basically how we do inertial navigation.",
    "start": "351350",
    "end": "359750"
  },
  {
    "text": "So to do inertial\nnavigation, as we said, let me go one slide back maybe\njust to remind ourselves--",
    "start": "359750",
    "end": "365560"
  },
  {
    "text": "or a few slides back. So this picture here is\nbasically the problem setup.",
    "start": "365560",
    "end": "372220"
  },
  {
    "text": "We have a fixed or a\nglobal coordinate system or a global reference\nframe in which",
    "start": "372220",
    "end": "381310"
  },
  {
    "text": "we want to localize the\nrobot or find the trajectory. And that's always, like, you\ncan choose what global reference",
    "start": "381310",
    "end": "389949"
  },
  {
    "text": "frame you want to work with. It could be tied to a geometry\nlike north, east, down.",
    "start": "389950",
    "end": "395380"
  },
  {
    "text": "It could be tied\nto maybe not Earth geometry but the\ngeometry of a building",
    "start": "395380",
    "end": "401440"
  },
  {
    "text": "that your robot is moving at. It could be aligned with\nthe walls of the building",
    "start": "401440",
    "end": "407752"
  },
  {
    "text": "or something like that. But that's something you choose. You're free to choose what is\nyour global reference frame.",
    "start": "407752",
    "end": "414470"
  },
  {
    "text": "It's also sometimes\ncalled a world frame. And then you have your device,\nthe sensor, or the INS,",
    "start": "414470",
    "end": "421960"
  },
  {
    "text": "which I'm showing with this\nblue box here, basically. And this device, it has no\nidea what your global reference",
    "start": "421960",
    "end": "432520"
  },
  {
    "text": "frame is. It only measures in\nits own body frame.",
    "start": "432520",
    "end": "437590"
  },
  {
    "text": "So the accelerations that\nyou get, for instance, out of an accelerometer,\nit reports in some xyz\ncoordinates, but these",
    "start": "437590",
    "end": "445150"
  },
  {
    "text": "are the xyz of the device, of\nthat enclosure, basically, that is the body of the sensor.",
    "start": "445150",
    "end": "452540"
  },
  {
    "text": "So that we call the\nbody reference frame. Here it's shown in blue and\nit has its own basically x, y,",
    "start": "452540",
    "end": "459820"
  },
  {
    "text": "and z-axis. Two important things. Your body reference\nframe is almost",
    "start": "459820",
    "end": "467620"
  },
  {
    "text": "never aligned with the\nglobal reference frame except for a very\nspecific type of INSes,",
    "start": "467620",
    "end": "474280"
  },
  {
    "text": "which are called\nbasically stable platform. Those, as we talked\nabout, have actively",
    "start": "474280",
    "end": "480610"
  },
  {
    "text": "driven gimbals that always\nalign the device with the world coordinates.",
    "start": "480610",
    "end": "486159"
  },
  {
    "text": "But for what we work with, which\nare called strapdown INSes, there is no active mechanism\nto align your sensor",
    "start": "486160",
    "end": "492880"
  },
  {
    "text": "with your external frame. So your sb is always\ngoing to be different",
    "start": "492880",
    "end": "498430"
  },
  {
    "text": "from your global frame. The transform between the\ntwo is like a 3D rotation.",
    "start": "498430",
    "end": "505240"
  },
  {
    "text": "It could be rotated\nabout the three xyz axis. So you need to\nbasically derotate",
    "start": "505240",
    "end": "512559"
  },
  {
    "text": "the sb, the body\nframe of reference, to align it with the\nglobal frame of reference.",
    "start": "512559",
    "end": "519070"
  },
  {
    "text": "That's one. And that's the first\nthing we'll do today. We'll see how you can use\nyour gyroscope measurements",
    "start": "519070",
    "end": "527000"
  },
  {
    "text": "to find that rotation\nmatrix and then use that to basically\nrealign your measurements",
    "start": "527000",
    "end": "532160"
  },
  {
    "text": "with your global frame. Also note that sb\nis time varying.",
    "start": "532160",
    "end": "537320"
  },
  {
    "text": "If your robot is moving and the\nsensor is mounted on the robot, at each time step\nas the robot moves,",
    "start": "537320",
    "end": "544910"
  },
  {
    "text": "your body reference\nframe of the sensor also moves with the robot. So that transformation that\nbasically derotates your body",
    "start": "544910",
    "end": "554030"
  },
  {
    "text": "frame and aligns it\nwith the global frame, it's a time varying transform. It's not one fixed transform.",
    "start": "554030",
    "end": "559790"
  },
  {
    "text": "Except if your robot is fixed\nand doesn't move, yes, then you just find it once\nand always use that.",
    "start": "559790",
    "end": "565250"
  },
  {
    "text": "But that's not a\ncase of autonomy. When you're talking\nabout autonomous robots, these things are going\nto be moving in 3D.",
    "start": "565250",
    "end": "572120"
  },
  {
    "text": "So you need to at\neach time step find the right transform to\ngo between the body frame",
    "start": "572120",
    "end": "578120"
  },
  {
    "text": "to the global frame. And that's what we're\ngoing to do today.",
    "start": "578120",
    "end": "583850"
  },
  {
    "text": "And as I said\nyesterday, so first we need to formulate the\nproblem mathematically to be able to solve it.",
    "start": "583850",
    "end": "589700"
  },
  {
    "text": "So the first part is what we\ncall orientation tracking.",
    "start": "589700",
    "end": "594710"
  },
  {
    "text": "And orientation tracking is\nexactly what I just said. So find this basically transform\nor this rotation that basically",
    "start": "594710",
    "end": "604519"
  },
  {
    "text": "relates the orientation\nor the pose of your robot to the orientation\nof the global frame.",
    "start": "604520",
    "end": "611550"
  },
  {
    "text": "And mathematically, you can\nuse different parametrizations for this.",
    "start": "611550",
    "end": "616940"
  },
  {
    "text": "Specifically the three\ncommon ones are Euler angles or you could use what\nis called quaternions",
    "start": "616940",
    "end": "623420"
  },
  {
    "text": "or you could use the so\ncalled direction cosines. There's pros and\ncons to each of these",
    "start": "623420",
    "end": "629420"
  },
  {
    "text": "in terms of mathematical\ncomplexity and intuitiveness and the gotchas that\nare tied to each",
    "start": "629420",
    "end": "636560"
  },
  {
    "text": "of these in terms of where you\nneed to be careful with how you do your math. We are going to use direction\ncosines for our analysis.",
    "start": "636560",
    "end": "646070"
  },
  {
    "text": "That's my favorite one. But there is nothing\nwrong with you could do the exact\nsame basically analysis",
    "start": "646070",
    "end": "652063"
  },
  {
    "text": "with a different\nparameterization. But we are going to go\nwith direction cosines. So when it comes to\ndirection cosines,",
    "start": "652063",
    "end": "659300"
  },
  {
    "text": "the way we track the orientation\nof the robot or the sensor,",
    "start": "659300",
    "end": "664670"
  },
  {
    "text": "in this case, and\nby orientation I mean exactly like that\nbody reference frame, how the xyz coordinates\nof that are oriented.",
    "start": "664670",
    "end": "673529"
  },
  {
    "text": "It's going to be with a\nmatrix, which we call c sub g.",
    "start": "673530",
    "end": "678800"
  },
  {
    "text": "So the body orientation relative\nto the global reference frame is represented by a three\nby three matrix c sub g.",
    "start": "678800",
    "end": "686180"
  },
  {
    "text": "What this matrix is\nis each column of c sub g is basically one\nof the unit vectors",
    "start": "686180",
    "end": "694490"
  },
  {
    "text": "of your body frame of\nreference as represented in the global frame.",
    "start": "694490",
    "end": "699870"
  },
  {
    "text": "So your first\ncolumn, for instance, if x sub b is the x direction\nin the body frame of reference,",
    "start": "699870",
    "end": "707030"
  },
  {
    "text": "you divide that by its norm. You get a unit vector. You could call it x\nhat b If you like.",
    "start": "707030",
    "end": "712040"
  },
  {
    "text": "And that's the first\ncolumn of your c sub g. Just like that, your second\ncolumn is going to be y hat",
    "start": "712040",
    "end": "718070"
  },
  {
    "text": "b and then you get z hat b. So that's basically how\nwe are going to represent.",
    "start": "718070",
    "end": "723380"
  },
  {
    "text": "And if c sub g is given\nto you, that means",
    "start": "723380",
    "end": "729140"
  },
  {
    "text": "you exactly know\nthe relationship between the body reference frame\nand the global reference frame,",
    "start": "729140",
    "end": "735710"
  },
  {
    "text": "because you know the three\naxes of your body frame,",
    "start": "735710",
    "end": "742730"
  },
  {
    "text": "how they are represented\nin the global frame. And that's all you need to\nknow, because it's 3D basically",
    "start": "742730",
    "end": "748820"
  },
  {
    "text": "world we're working with. So you just need to\ntransform the three basis vectors of your body frame\nto the global frame and then",
    "start": "748820",
    "end": "756560"
  },
  {
    "text": "the full transformation,\nbasically. So specifically, if a\nvector is given to you,",
    "start": "756560",
    "end": "764250"
  },
  {
    "text": "call that u sub b in the\nbody reference frame. And then you want to\nconvert that vector",
    "start": "764250",
    "end": "770220"
  },
  {
    "text": "to the global reference frame. All you need to do\nis you just multiply that by this orientation\nmatrix c that we just defined.",
    "start": "770220",
    "end": "778829"
  },
  {
    "text": "So very specifically\nas an example, let's do something simple. So if you just take the e1.",
    "start": "778830",
    "end": "788370"
  },
  {
    "text": "So take your u sub\nb to be e1, which is just the first\nidentity vector, 1, 0, 0.",
    "start": "788370",
    "end": "796769"
  },
  {
    "text": "So what does that mean? This vector e1, that's kind\nof defining your x-axis",
    "start": "796770",
    "end": "803430"
  },
  {
    "text": "in the body reference frame. If you are working or tied\nto the sb frame of reference,",
    "start": "803430",
    "end": "810030"
  },
  {
    "text": "your x-axis is just e1. It's 1, 0, 0. Now, you multiply\nthat by c sub g.",
    "start": "810030",
    "end": "816120"
  },
  {
    "text": "What do you get? So c sub g times e1. Of course, that extracts the\nfirst column of c for you.",
    "start": "816120",
    "end": "823540"
  },
  {
    "text": "So it will give\nyou x hat b, which is exactly the x-axis\nof your body frame",
    "start": "823540",
    "end": "829420"
  },
  {
    "text": "as seen in the global frame. So this is actually\ntransforming, as we said, from body\nframe to the global frame.",
    "start": "829420",
    "end": "835930"
  },
  {
    "text": "What about the other way around? If you want to go from\nglobal frame of reference to the body frame of\nreference, you just",
    "start": "835930",
    "end": "842200"
  },
  {
    "text": "need to multiply by the\ninverse of your c matrix. So this is a rotation matrix.",
    "start": "842200",
    "end": "848709"
  },
  {
    "text": "Remember, it's a 3D rotation. So these matrices just happen\nto be for geometric reasons what",
    "start": "848710",
    "end": "856389"
  },
  {
    "text": "we call Hermititan. So the inverse of c\nis just its transpose.",
    "start": "856390",
    "end": "862510"
  },
  {
    "text": "And that's basically\nthe identity. So cg transpose is\nequal to cg inverse.",
    "start": "862510",
    "end": "867820"
  },
  {
    "text": "So with the same\nmatrix, with just the transposition\noperation, you can invert it and then you can go from the\nbody frame to the global frame.",
    "start": "867820",
    "end": "878320"
  },
  {
    "text": "So all we need to do basically\nto do orientation tracking is",
    "start": "878320",
    "end": "883870"
  },
  {
    "text": "we need to find what this matrix\nc sub g is in this formulation, in this parametrization\nwhat the direction cosines.",
    "start": "883870",
    "end": "891940"
  },
  {
    "text": "But what makes it\nslightly tricky, again, is that this is\na time varying matrix.",
    "start": "891940",
    "end": "896980"
  },
  {
    "text": "So it's really actually\na function of time. So c sub g of t that\nwe need to find.",
    "start": "896980",
    "end": "902170"
  },
  {
    "text": "Because at each point in\ntime as the robot moves, that orientation\nmatrix changes with it.",
    "start": "902170",
    "end": "907180"
  },
  {
    "text": "OK, sorry. So if you have a small time\nstep delta t, what you can do",
    "start": "907180",
    "end": "916240"
  },
  {
    "text": "is that you can formulate\na dynamics equation that relates your c sub g at time\nt plus delta t to the c sub g",
    "start": "916240",
    "end": "925630"
  },
  {
    "text": "at previous time step. So what does happen\nat a small time step?",
    "start": "925630",
    "end": "931160"
  },
  {
    "text": "Assume that in a time step\ndelta t, your robot moved. So if you look at your previous\nposts and the current post,",
    "start": "931160",
    "end": "939310"
  },
  {
    "text": "there's going to be a small\nrotation between the two. There's also a translation. But here we are just tracking\norientation, remember.",
    "start": "939310",
    "end": "947200"
  },
  {
    "text": "So by talking about\nthe orientation, we ignore the translation. So if your robot is moving in\nsome direction, we ignore that.",
    "start": "947200",
    "end": "954399"
  },
  {
    "text": "And it's only the rotations that\ndetermine how c sub g changes.",
    "start": "954400",
    "end": "959860"
  },
  {
    "text": "So relating c sub g at time\nt to time t plus delta t,",
    "start": "959860",
    "end": "965050"
  },
  {
    "text": "there is going to be a\nmatrix multiplication. And this a sub t is going to be\na tiny rotation matrix, which",
    "start": "965050",
    "end": "974110"
  },
  {
    "text": "basically determines by how much\ndid your robot rotate and about which axis?",
    "start": "974110",
    "end": "980050"
  },
  {
    "text": "And that determines how\nmuch your c matrix basically changed.",
    "start": "980050",
    "end": "985870"
  },
  {
    "text": "So now to be able to track\nc as a function of time, we basically need to\nsolve this equation.",
    "start": "985870",
    "end": "992950"
  },
  {
    "text": "But before we can\ndo that, we need to find what this a matrix is.",
    "start": "992950",
    "end": "999460"
  },
  {
    "text": "In a small time step, by\nhow much in the body frame does your robot\nbasically rotate?",
    "start": "999460",
    "end": "1007980"
  },
  {
    "text": "So let's try to find this\na of t matrix together. And as you can\nguess, here we are",
    "start": "1007980",
    "end": "1014160"
  },
  {
    "text": "going to need gyroscope\ndata, because we're talking about rotations\nin small time steps.",
    "start": "1014160",
    "end": "1021610"
  },
  {
    "text": "So that means that the sensor\nthat gives you the closest thing to rotation is\nthe gyroscope, which",
    "start": "1021610",
    "end": "1027869"
  },
  {
    "text": "gives you angular velocities. And if you integrate\nangular velocities, you get basically\nabsolute angles.",
    "start": "1027869",
    "end": "1034050"
  },
  {
    "text": "So kind of here\nyou should already guess what's going to happen. Something is going\nto at some point",
    "start": "1034050",
    "end": "1040109"
  },
  {
    "text": "emerge that is some\nintegral of our gyroscope. Basically readouts which\nare angular velocities.",
    "start": "1040109",
    "end": "1048359"
  },
  {
    "text": "OK. So first let's talk about\nhow rotations basically are",
    "start": "1048359",
    "end": "1054510"
  },
  {
    "text": "formulated in 3D coordinates. If you're working in 3D\nCartesian coordinates, when",
    "start": "1054510",
    "end": "1062250"
  },
  {
    "text": "we talk about the rotation,\nit's determined by two things. First you need to define\nthe axis of rotation",
    "start": "1062250",
    "end": "1068490"
  },
  {
    "text": "and then the angle of rotation. Exactly like when\nwe were talking about angular velocities.",
    "start": "1068490",
    "end": "1073710"
  },
  {
    "text": "You need the axis\nand the velocity. Here for rotation, same thing. You need an axis and\nthe amount of rotation.",
    "start": "1073710",
    "end": "1080970"
  },
  {
    "text": "And mathematically,\nthere is these kind of very famous matrices\nthat basically give you",
    "start": "1080970",
    "end": "1090809"
  },
  {
    "text": "rotations in the Cartesian\ncoordinates about the x, y, and z-axis.",
    "start": "1090810",
    "end": "1096059"
  },
  {
    "text": "So for instance, if you rotate\na point about the x-axis",
    "start": "1096060",
    "end": "1101220"
  },
  {
    "text": "by some angle gamma,\nthat operation or that transformation\nis given by this three",
    "start": "1101220",
    "end": "1107040"
  },
  {
    "text": "by three matrix that has\ncosine gamma minus sine gamma, sine gamma, cosine gamma.",
    "start": "1107040",
    "end": "1113159"
  },
  {
    "text": "And then the first\ncolumn is 1, 0, 0. This kind of should\nmake sense, because this",
    "start": "1113160",
    "end": "1118560"
  },
  {
    "text": "is a rotation about the x-axis. So if your point is\nalready on the x-axis and then you rotate it,\nit's not going to change.",
    "start": "1118560",
    "end": "1125530"
  },
  {
    "text": "So that's why the first\ncolumn is just the e1 vector.",
    "start": "1125530",
    "end": "1131020"
  },
  {
    "text": "Just like that, you can\nhave rotations about y and z basically axes.",
    "start": "1131020",
    "end": "1137320"
  },
  {
    "text": "So these are the well\nknown basically geometric transformations that\ngive us rotations",
    "start": "1137320",
    "end": "1144280"
  },
  {
    "text": "about the x, y, and z-axis. So a general rotation in\n3D, you can break it down",
    "start": "1144280",
    "end": "1152169"
  },
  {
    "text": "into basically three\nrotations about the three",
    "start": "1152170",
    "end": "1157870"
  },
  {
    "text": "main coordinates, which is\nthe x and the y and the z. So if we do that for a general\nrotation, what we can say",
    "start": "1157870",
    "end": "1165130"
  },
  {
    "text": "is that if you have\na general rotation, you break it down to\nbasically three rotations",
    "start": "1165130",
    "end": "1170710"
  },
  {
    "text": "by a rotation of alpha degrees\nor radians in z, beta in y,",
    "start": "1170710",
    "end": "1178760"
  },
  {
    "text": "and gamma in x. By the way, the numbers you-- yeah, you should be\ncareful with your,",
    "start": "1178760",
    "end": "1184990"
  },
  {
    "text": "of course, like are you\nworking in degrees or radians. But both work as long as\nyou're doing your math right.",
    "start": "1184990",
    "end": "1191770"
  },
  {
    "text": "So this is your general\nrotation matrix.",
    "start": "1191770",
    "end": "1196870"
  },
  {
    "text": "So any rotation in 3D, you\ncan kind of break it down to three rotations\nabout x, y, and z",
    "start": "1196870",
    "end": "1204669"
  },
  {
    "text": "with their corresponding angles. What is extremely important\nand a source of major errors",
    "start": "1204670",
    "end": "1212289"
  },
  {
    "text": "is that in this formulation,\norder of operations matter.",
    "start": "1212290",
    "end": "1219790"
  },
  {
    "text": "So if I change the order of\nthese matrix multiplications,",
    "start": "1219790",
    "end": "1224890"
  },
  {
    "text": "I'm going to get a\ndifferent kind of rotation. So these matrix multiplications,\nthey do not commute.",
    "start": "1224890",
    "end": "1233230"
  },
  {
    "text": "So very simple example,\njust to illustrate why the order matters. Let's say my three fingers,\nif my index is the x-axis",
    "start": "1233230",
    "end": "1242260"
  },
  {
    "text": "and the thumb is the z. So you have xyz. I'm going to do two rotations\nby 90 degrees starting--",
    "start": "1242260",
    "end": "1248890"
  },
  {
    "text": "let's say the vector\nwe are working with is already on the x-axis. So it's pointing in the\ndirection of my index finger.",
    "start": "1248890",
    "end": "1256610"
  },
  {
    "text": "Now, I'm going to do two\nrotations, 90 degrees about x and z-axis.",
    "start": "1256610",
    "end": "1262210"
  },
  {
    "text": "So in the first one, I'm\ngoing to rotate about z first and then about x. So you rotate about z.",
    "start": "1262210",
    "end": "1268630"
  },
  {
    "text": "That's now where I'm\npointing at, 90 degrees. And then I'm going\nto rotate about x. It's going to point up.",
    "start": "1268630",
    "end": "1274660"
  },
  {
    "text": "So that's the final\ndirection that we landed. 90 degrees, 90 degrees. Zx.",
    "start": "1274660",
    "end": "1280780"
  },
  {
    "text": "That's experiment one. Now let's change the order\nof applying the rotations. I start with x.",
    "start": "1280780",
    "end": "1286510"
  },
  {
    "text": "I'm going to rotate\nabout x first. Well, nothing changes. It's still pointing\nin the same direction.",
    "start": "1286510",
    "end": "1292730"
  },
  {
    "text": "So x and then you do your z. And now it's going\nto be pointing left. See? So change the order, you end\nup with different orientation.",
    "start": "1292730",
    "end": "1301370"
  },
  {
    "text": "So super important\nif you're going with this parameterization\nand the Cartesian coordinates.",
    "start": "1301370",
    "end": "1307720"
  },
  {
    "text": "Order of operations matter. All right. So with that, now we can\nkind of start basically",
    "start": "1307720",
    "end": "1316090"
  },
  {
    "text": "doing our full analysis. So what we are\ndoing, again, we want to track very small\nrotations of the body",
    "start": "1316090",
    "end": "1325090"
  },
  {
    "text": "of the sensor or the robot\nin small time increments. So what happens\nis your body frame",
    "start": "1325090",
    "end": "1333490"
  },
  {
    "text": "basically rotates\nby small angles about x, y, and z directions. And those angles, we\ncan directly get them",
    "start": "1333490",
    "end": "1341380"
  },
  {
    "text": "from our gyroscope readout. So for instance,\nrotation about xb. And this b is very,\nvery important.",
    "start": "1341380",
    "end": "1347470"
  },
  {
    "text": "So we are talking right now\nin the body reference frame of the sensor or the robot.",
    "start": "1347470",
    "end": "1352990"
  },
  {
    "text": "So rotation about\nx, which is called rho, that angle delta phi is\nequal to the angular velocity",
    "start": "1352990",
    "end": "1361720"
  },
  {
    "text": "that the gyroscope is measuring\nabout the x-axis times delta t. So that's just basically\nyou multiply your velocity",
    "start": "1361720",
    "end": "1369830"
  },
  {
    "text": "by a small time delta that gives\nyou the delta angle, basically, in a small time step. Just like that,\nyour pitch, which",
    "start": "1369830",
    "end": "1376100"
  },
  {
    "text": "is rotation about the\ny-axis of the body, is given by the angular velocity\nabout that axis times delta t.",
    "start": "1376100",
    "end": "1382850"
  },
  {
    "text": "And rotation about z is\ngiven by angular velocity about the z-axis times delta t.",
    "start": "1382850",
    "end": "1389150"
  },
  {
    "text": "So that's simple. Now, we also know what\nthe rotation matrices",
    "start": "1389150",
    "end": "1394460"
  },
  {
    "text": "look like as a\nfunction of the angle. So now we can write a rotation\nmatrix for our role, basically.",
    "start": "1394460",
    "end": "1401750"
  },
  {
    "text": "So rotation about x by\nsome angle delta theta is given by this matrix.",
    "start": "1401750",
    "end": "1409160"
  },
  {
    "text": "This is the same\nthing we saw before. I've just plugged in delta\ntheta for my rotation angle.",
    "start": "1409160",
    "end": "1414380"
  },
  {
    "text": "But here we can do\na simplification. Because we're working with\nvery small time steps delta t,",
    "start": "1414380",
    "end": "1420830"
  },
  {
    "text": "that means the angles\nare also very small. Delta phi is small.",
    "start": "1420830",
    "end": "1426840"
  },
  {
    "text": "And we can make a small\nangle approximation. What is that? That means the cosine of\nyour angle is approximately 1",
    "start": "1426840",
    "end": "1433620"
  },
  {
    "text": "and the sine of the\nangle is approximately equal to delta phi itself. Here in this approximation,\nyou have to work in radians.",
    "start": "1433620",
    "end": "1441570"
  },
  {
    "text": "This approximation is in\nradians, not in degrees. So don't plug in numbers\nin degrees in here.",
    "start": "1441570",
    "end": "1447090"
  },
  {
    "text": "These are in radians. So that's just a\nsmall-- or this is coming from like if you\ntake the Taylor series",
    "start": "1447090",
    "end": "1453090"
  },
  {
    "text": "approximation of a sine function\nand just keep the first term, basically that's what you get.",
    "start": "1453090",
    "end": "1458610"
  },
  {
    "text": "So this is now our\nrotation matrix that gives us the rho\nin a very small time",
    "start": "1458610",
    "end": "1467070"
  },
  {
    "text": "step in the body\nframe of reference for very small angles.",
    "start": "1467070",
    "end": "1472860"
  },
  {
    "text": "Just like that, we can also\nget the rotation matrix for pitch and for\nyaw, and again,",
    "start": "1472860",
    "end": "1478740"
  },
  {
    "text": "for all of them you make the\nsmall angle approximation. And you're left\nwith you basically get these matrices, which\nhave delta theta and delta",
    "start": "1478740",
    "end": "1487559"
  },
  {
    "text": "psi in them. All good? All right. So now we want to get the\ngeneral 3D matrix of rotation.",
    "start": "1487560",
    "end": "1498279"
  },
  {
    "text": "So we have to\nmultiply these three. But here is the issue. I just told you when\nyou want to multiply,",
    "start": "1498280",
    "end": "1504430"
  },
  {
    "text": "the order of operations matter. So in what order are\nwe going to apply? These three matrices.",
    "start": "1504430",
    "end": "1510700"
  },
  {
    "text": "One very nice thing\nthat happens here, which is part of\nthe reason why I like this formulation\nof direction cosines,",
    "start": "1510700",
    "end": "1516760"
  },
  {
    "text": "is that although generally\nthe order of matrix",
    "start": "1516760",
    "end": "1523400"
  },
  {
    "text": "multiplication for\nrotations matter, when you work with small\nangles, it doesn't",
    "start": "1523400",
    "end": "1528500"
  },
  {
    "text": "matter because second\norder terms basically become almost 0. And now as long\nas you're working",
    "start": "1528500",
    "end": "1535520"
  },
  {
    "text": "with these matrices\nwith very small angles, you can apply\nrotations in any order and you get the\nexact same result.",
    "start": "1535520",
    "end": "1542390"
  },
  {
    "text": "That's part of the beauty\nof this parameterization, basically. So now this matrix at that we\nwere looking for, which we said",
    "start": "1542390",
    "end": "1551330"
  },
  {
    "text": "is a small rotation matrix\nover a time step delta t, we just write it as\nthe multiplication",
    "start": "1551330",
    "end": "1558740"
  },
  {
    "text": "of our rho, our yaw, our\npitch, and our rho matrices.",
    "start": "1558740",
    "end": "1565700"
  },
  {
    "text": "Those three rotation matrices. And you can multiply them\nin any order you like. And you get this\nmatrix, basically.",
    "start": "1565700",
    "end": "1574310"
  },
  {
    "text": "Very simple. So diagonal entries,\nas you see, are all 1.",
    "start": "1574310",
    "end": "1579870"
  },
  {
    "text": "And then off diagonals\nare basically small angles corresponding\nto pitch, yaw,",
    "start": "1579870",
    "end": "1585810"
  },
  {
    "text": "and rho of the body, basically,\nin a small time delta.",
    "start": "1585810",
    "end": "1591210"
  },
  {
    "text": "So our a then we can write\nit as the identity matrix. So the identity gives you\nbasically this diagonal entity",
    "start": "1591210",
    "end": "1597899"
  },
  {
    "text": "entries that are all 1 plus\na matrix we call delta psi. And delta psi is\nbasically the matrix",
    "start": "1597900",
    "end": "1605010"
  },
  {
    "text": "which has all these\nsmall angles in it. And these small\nangles, remember, they are directly related to\nthe readouts of our gyroscope.",
    "start": "1605010",
    "end": "1614040"
  },
  {
    "text": "So the angular velocity is\nthat basically our gyroscope measures. Those directly\ndetermine these angles.",
    "start": "1614040",
    "end": "1619500"
  },
  {
    "text": "So for instance, our delta psi\nis just the angular velocity about the z-axis times delta t.",
    "start": "1619500",
    "end": "1628050"
  },
  {
    "text": "Or delta phi is\njust omega bx, which is angular velocity about\nthe x-axis times delta t.",
    "start": "1628050",
    "end": "1634380"
  },
  {
    "text": "So here we have the\nfull parametrization. And directly we can take\nthe gyroscope measurements",
    "start": "1634380",
    "end": "1642600"
  },
  {
    "text": "and populate this\nmatrix delta psi. You add identity to it\nand you find your a sub t.",
    "start": "1642600",
    "end": "1650550"
  },
  {
    "text": "Remember that as we did\nthis matrix multiplication,",
    "start": "1650550",
    "end": "1655560"
  },
  {
    "text": "and that's also why the order of\noperations here doesn't matter, is because we assume the\nsecond order terms, which",
    "start": "1655560",
    "end": "1662280"
  },
  {
    "text": "is the multiplication\nof two small angles, is almost equal to 0. So that's basically\nmathematically",
    "start": "1662280",
    "end": "1669059"
  },
  {
    "text": "why it turns out that when\nyou work with small angles, the order of operations\ndon't matter,",
    "start": "1669060",
    "end": "1674279"
  },
  {
    "text": "because basically the\norder of operations",
    "start": "1674280",
    "end": "1679410"
  },
  {
    "text": "goes into the second\norder terms, which are almost 0 for very small angles.",
    "start": "1679410",
    "end": "1685020"
  },
  {
    "text": "OK. So now we have found our a. And we know how it\nis directly related",
    "start": "1685020",
    "end": "1691500"
  },
  {
    "text": "to gyroscope measurements. And we can go back to\nthe original equation that we had for how our\norientation matrix c",
    "start": "1691500",
    "end": "1699059"
  },
  {
    "text": "changes over time\nand then we can try to solve that\nto find orientation as a function of time.",
    "start": "1699060",
    "end": "1705550"
  },
  {
    "text": "So let's do that. Now we're doing proper\norientation tracking.",
    "start": "1705550",
    "end": "1710669"
  },
  {
    "text": "We start with looking at\nthe time derivative of cg. That's how c changes over time.",
    "start": "1710670",
    "end": "1717330"
  },
  {
    "text": "And by definition, it's\njust basically c at time t plus delta t minus\nc of t over delta t.",
    "start": "1717330",
    "end": "1724950"
  },
  {
    "text": "And we take the limit of\nthat as delta t goes to 0. So let's do that.",
    "start": "1724950",
    "end": "1730380"
  },
  {
    "text": "We plug in what we just found\nfor c of t plus delta t. We just showed that that\nis equal to this matrix a",
    "start": "1730380",
    "end": "1737550"
  },
  {
    "text": "of t times c. And also a itself, we found\nthat you can write it.",
    "start": "1737550",
    "end": "1743520"
  },
  {
    "text": "a as identity plus\nthis matrix delta psi. So plug that in. And now what happens is\nthat these two terms cancel.",
    "start": "1743520",
    "end": "1751890"
  },
  {
    "text": "The identity and this\nminus cg cancel out. And what you're left\nwith is basically",
    "start": "1751890",
    "end": "1758040"
  },
  {
    "text": "just limit of\ndelta t going to 0, delta psi times cg over delta t.",
    "start": "1758040",
    "end": "1763620"
  },
  {
    "text": "So you can factor out your\ncg basically out of the limit and you're just left with the\nlimit of delta psi over delta t",
    "start": "1763620",
    "end": "1773070"
  },
  {
    "text": "as delta t goes to 0. And this is a very, very\nsimple limit to calculate.",
    "start": "1773070",
    "end": "1778380"
  },
  {
    "text": "Because if we basically\nremember what delta psi was,",
    "start": "1778380",
    "end": "1785100"
  },
  {
    "text": "it was this matrix\nomega times delta t. The entries of delta psi\nwere the angular velocities",
    "start": "1785100",
    "end": "1792960"
  },
  {
    "text": "multiplied by the delta t's. So as you divide by\nthat, all the delta t's basically go away.",
    "start": "1792960",
    "end": "1798840"
  },
  {
    "text": "Then your limit basically\nbecomes just this matrix we call omega times cg.",
    "start": "1798840",
    "end": "1805440"
  },
  {
    "text": "And omega is a matrix of\njust the gyroscope readouts. It only has the angular\nvelocities in it.",
    "start": "1805440",
    "end": "1812429"
  },
  {
    "text": "Very, very, very simple. So at the end of the\nday, what we have is cg dot equals omega times cg.",
    "start": "1812430",
    "end": "1821440"
  },
  {
    "text": "It's a simple dynamics equation. The only thing that\ncomplicates it a little bit",
    "start": "1821440",
    "end": "1827140"
  },
  {
    "text": "is, as you see here, this omega\nitself is a function of time. So the proper way of if we\nwant to be explicit about it,",
    "start": "1827140",
    "end": "1835900"
  },
  {
    "text": "it's omega t times cg. Because the angular velocities\ncan change over time.",
    "start": "1835900",
    "end": "1842440"
  },
  {
    "text": "That makes this matrix\na function of time. Nevertheless, it's a first\norder not time independent, time",
    "start": "1842440",
    "end": "1848470"
  },
  {
    "text": "dependent dynamics equation. And we can solve that. If we solve that, then we have\nour c as a function of time",
    "start": "1848470",
    "end": "1855500"
  },
  {
    "text": "and then we know--\nand it's also, it's going to be\na function of time and it's going to be a\nfunction of gyroscope readouts.",
    "start": "1855500",
    "end": "1862870"
  },
  {
    "text": "There's nothing else\nin this equation. All the readouts are known.",
    "start": "1862870",
    "end": "1868210"
  },
  {
    "text": "So then we can do proper\norientation tracking. So let's do that. We start with this equation.",
    "start": "1868210",
    "end": "1874000"
  },
  {
    "text": "And there is an analytical\nsolution for this. You might remember it\nfrom your calculus course.",
    "start": "1874000",
    "end": "1881120"
  },
  {
    "text": "But basically with this\nfirst order equation, the solution is given by this.",
    "start": "1881120",
    "end": "1888060"
  },
  {
    "text": "cg of t is the exponential\nof the integral of omega from 0 to t times c0.",
    "start": "1888060",
    "end": "1895250"
  },
  {
    "text": "so c0 is kind of like\nyour initial orientation or the initial condition\nthat you start at time 0.",
    "start": "1895250",
    "end": "1902600"
  },
  {
    "text": "And you need to\nknow that somehow. So that could be either\nassumed if you're just",
    "start": "1902600",
    "end": "1909350"
  },
  {
    "text": "doing relative\ntracking or that could be learned from\nvisual cues or maybe",
    "start": "1909350",
    "end": "1915380"
  },
  {
    "text": "from some other sensor\ntells you, oh, you're starting at this pose or\norientation at time 0.",
    "start": "1915380",
    "end": "1920480"
  },
  {
    "text": "So you somehow know that. Or maybe you have\na digital compass that tells you the\norientation at time 0",
    "start": "1920480",
    "end": "1926180"
  },
  {
    "text": "or something like that. And then you basically\nintegrate this matrix omega,",
    "start": "1926180",
    "end": "1932399"
  },
  {
    "text": "which is the matrix of\nyour gyroscope readouts.",
    "start": "1932400",
    "end": "1937520"
  },
  {
    "text": "And then you take the\nexponential of it, multiply that by your\ninitial orientation,",
    "start": "1937520",
    "end": "1942620"
  },
  {
    "text": "and that gives you your\norientation matrix at time t. Couple of things to note.",
    "start": "1942620",
    "end": "1948740"
  },
  {
    "text": "Well, first as we guessed\nbefore we did any math, it turned out that\nyou need to integrate",
    "start": "1948740",
    "end": "1954679"
  },
  {
    "text": "your gyroscope measurements\nto track orientation. And that should\nmake complete sense.",
    "start": "1954680",
    "end": "1960140"
  },
  {
    "text": "These are angular velocities. You integrate angular\nvelocities that should somehow give you absolute velocities.",
    "start": "1960140",
    "end": "1965990"
  },
  {
    "text": "But important thing is basically\nyou integrate your omega,",
    "start": "1965990",
    "end": "1971179"
  },
  {
    "text": "but then you take the\nexponential of it. So it's e to the\nintegral of omega.",
    "start": "1971180",
    "end": "1977000"
  },
  {
    "text": "And this here, this is\na matrix exponential. Because your omega is a\nthree by three matrix.",
    "start": "1977000",
    "end": "1982490"
  },
  {
    "text": "You integrate that. You get a three by three matrix. So this is a matrix exponential. It's not a scalar exponential.",
    "start": "1982490",
    "end": "1990140"
  },
  {
    "text": "Not a big deal, but it's just\nbecause our notation is--",
    "start": "1990140",
    "end": "1995720"
  },
  {
    "text": "did I spell this right? Exponential. Yeah, I think so. Because our notation\nis overloaded,",
    "start": "1995720",
    "end": "2002000"
  },
  {
    "text": "I just want to point\nthat out that this is going to be a matrix\nexponential, which is perfectly",
    "start": "2002000",
    "end": "2008380"
  },
  {
    "text": "fine, especially, for\ninstance, when you're doing",
    "start": "2008380",
    "end": "2016330"
  },
  {
    "text": "your algorithms or DSP on\na computer, for instance,",
    "start": "2016330",
    "end": "2022640"
  },
  {
    "text": "most modern libraries have\nthe support for matrix exponentials. But if you're doing things on\na small embedded processor,",
    "start": "2022640",
    "end": "2031780"
  },
  {
    "text": "doing matrix exponentials\ncan be very expensive. So in a few minutes,\nwe are going",
    "start": "2031780",
    "end": "2037120"
  },
  {
    "text": "to find a better formulation for\nthis, which is computationally",
    "start": "2037120",
    "end": "2042490"
  },
  {
    "text": "much more efficient. But before that, there\nis another thing, which is our readout.",
    "start": "2042490",
    "end": "2047650"
  },
  {
    "text": "So this was\nassuming-- so this is like we are doing a continuous\ntime derivation here.",
    "start": "2047650",
    "end": "2053770"
  },
  {
    "text": "Our integrals are\ncontinuous and all that. But the actual measurements\ncome discretely.",
    "start": "2053770",
    "end": "2059949"
  },
  {
    "text": "Your sensors gives you\nmeasurements at some rate. They don't continuous\nas a function of time",
    "start": "2059949",
    "end": "2065117"
  },
  {
    "text": "give you a readout. So you can get, I don't know,\na good gyroscope might give you measurements at a\nfew hundred Hertz.",
    "start": "2065117",
    "end": "2071520"
  },
  {
    "text": "400, 800, maybe a kilohertz. So you get like 1,000\nmeasurements per second. So you get discrete time,\ndiscretized measurements",
    "start": "2071520",
    "end": "2079289"
  },
  {
    "text": "over time, or measurements\nover discretized time.",
    "start": "2079290",
    "end": "2084388"
  },
  {
    "text": "So we have to basically solve\nthis integral discretely. We can continuously\nintegrate it.",
    "start": "2084389",
    "end": "2090879"
  },
  {
    "text": "So let's do that. It actually becomes a lot\nsimpler if you do it that way. So what we do then,\nlet's just come up",
    "start": "2090880",
    "end": "2097410"
  },
  {
    "text": "with a solver that\ngoes step by step. So one step at a\ntime, you basically update your orientation.",
    "start": "2097410",
    "end": "2103770"
  },
  {
    "text": "As a new measurement\ncomes in, you just update your orientation\naccording to the measurement.",
    "start": "2103770",
    "end": "2110710"
  },
  {
    "text": "So basically we are\nnow just looking at one time step, a delta t.",
    "start": "2110710",
    "end": "2115740"
  },
  {
    "text": "So you're going one\nstep forward in time and you just want to update\nyour orientation matrix c.",
    "start": "2115740",
    "end": "2121440"
  },
  {
    "text": "We still use the same\nsolution we found. So that should be equal\nto the integral of omega",
    "start": "2121440",
    "end": "2127710"
  },
  {
    "text": "just over the time step. So we go from t\nto t plus delta t.",
    "start": "2127710",
    "end": "2133080"
  },
  {
    "text": "That's just one step. And you multiply that by your\nprevious orientation matrix. ",
    "start": "2133080",
    "end": "2140849"
  },
  {
    "text": "So this here basically\nis kind of like your aft,",
    "start": "2140850",
    "end": "2147210"
  },
  {
    "text": "basically, that we had. We were just doing\none time increment. So if you just do integrate\nfrom t to t plus delta t,",
    "start": "2147210",
    "end": "2154650"
  },
  {
    "text": "you assume that omega is\nconstant over that tiny time step. So that matrix\nexponential just becomes",
    "start": "2154650",
    "end": "2161190"
  },
  {
    "text": "e to the omega t times delta t. And omega t times\ndelta t, remember,",
    "start": "2161190",
    "end": "2167970"
  },
  {
    "text": "that's that basically psi of\nt or delta psi of t matrix",
    "start": "2167970",
    "end": "2174630"
  },
  {
    "text": "that we had defined before. So in small time increments,\nyour update equation is just take your previous\norientation matrix,",
    "start": "2174630",
    "end": "2182190"
  },
  {
    "text": "multiply it by e\nto the delta psi. And that's how you\ndiscretely basically track",
    "start": "2182190",
    "end": "2190770"
  },
  {
    "text": "your orientation. And what is e to the delta psi? Or just generally a\nmatrix exponential.",
    "start": "2190770",
    "end": "2197880"
  },
  {
    "text": "It's given by this\nTaylor series expansion. So you start from identity plus\ndelta psi, delta psi squared",
    "start": "2197880",
    "end": "2203920"
  },
  {
    "text": "over 2 factorial. So it's an infinite\nseries, basically, that gives you the-- it's the\nsame as scalar exponentials,",
    "start": "2203920",
    "end": "2212150"
  },
  {
    "text": "basically. But remember that\nthis guy, delta psi, is a three by three matrix here.",
    "start": "2212150",
    "end": "2219010"
  },
  {
    "text": "So this is now perfectly fine. Like with this equation, and\nI'm just going to rewrite it",
    "start": "2219010",
    "end": "2224020"
  },
  {
    "text": "here, cg of t plus delta t. Or if you want to\nwork with indices, this could be your n\nplus 1 time index equals",
    "start": "2224020",
    "end": "2233320"
  },
  {
    "text": "e to the delta psi\nat n times cg at n.",
    "start": "2233320",
    "end": "2240740"
  },
  {
    "text": "That's your update equation. I'm just going to\nmake those brackets. n plus 1.",
    "start": "2240740",
    "end": "2246410"
  },
  {
    "text": "So that's our update equation. This is perfectly fine.",
    "start": "2246410",
    "end": "2251600"
  },
  {
    "text": "On any modern compute\nplatform, you can do this.",
    "start": "2251600",
    "end": "2256670"
  },
  {
    "text": "Your samples of readouts of\nthe IMU or of the gyroscope",
    "start": "2256670",
    "end": "2262309"
  },
  {
    "text": "come one at a time. You basically use them\nto build this delta psi matrix at time n.",
    "start": "2262310",
    "end": "2268910"
  },
  {
    "text": "You take the matrix exponential. Multiply that by your\nprevious orientation matrix.",
    "start": "2268910",
    "end": "2274160"
  },
  {
    "text": "And then you get the new one. And that works perfectly fine. However, as I said,\nwhen you don't",
    "start": "2274160",
    "end": "2281960"
  },
  {
    "text": "have a lot of compute\nresources, doing something",
    "start": "2281960",
    "end": "2289839"
  },
  {
    "text": "like an infinite series\nbecomes very challenging",
    "start": "2289840",
    "end": "2295120"
  },
  {
    "text": "because you don't\nhave access to, say, a modern CPU or a GPU that\ncan do this very fast for you.",
    "start": "2295120",
    "end": "2302110"
  },
  {
    "text": "Because of that, it\nreally helps if you can find a more mathematically\nefficient way of finding",
    "start": "2302110",
    "end": "2309849"
  },
  {
    "text": "this matrix exponential. And it turns out that there\nis a beautiful derivation that",
    "start": "2309850",
    "end": "2315130"
  },
  {
    "text": "finds a much, much, much more\nefficient way of calculating that matrix exponential\nwith no approximations.",
    "start": "2315130",
    "end": "2322310"
  },
  {
    "text": "So here we are going to do that. So what we do is we define\nan auxiliary variable.",
    "start": "2322310",
    "end": "2329049"
  },
  {
    "text": "We call that rho of t. And that's just the norm\nof omega b times delta t.",
    "start": "2329050",
    "end": "2334690"
  },
  {
    "text": "What is omega b? Omega b is the vector\nin r3 that is the three readouts of your gyroscope.",
    "start": "2334690",
    "end": "2342760"
  },
  {
    "text": "So it's basically\nyour omega x, omega y,",
    "start": "2342760",
    "end": "2347860"
  },
  {
    "text": "omega z vector in sb, so in\nthe body reference frame,",
    "start": "2347860",
    "end": "2353870"
  },
  {
    "text": "times delta t. So that's the r3 vector. You get the norm of that. You get rho. So rho is a scalar\nvalue function.",
    "start": "2353870",
    "end": "2360770"
  },
  {
    "text": "And then with that\ndefinition, it turns out that if you find\nthe third power of delta psi,",
    "start": "2360770",
    "end": "2367520"
  },
  {
    "text": "it just becomes\nequal to negative rho squared times delta psi itself.",
    "start": "2367520",
    "end": "2372710"
  },
  {
    "text": "And here this is just pure math. You can start with actually\nplugging everything into here.",
    "start": "2372710",
    "end": "2379010"
  },
  {
    "text": "I'm not going to do it\nhere because it's boring and it gets a bit messy.",
    "start": "2379010",
    "end": "2384319"
  },
  {
    "text": "There's too many terms\nin the third power. But if you actually\nare patient enough to do this and go simplify and\nsee how many terms cancel out,",
    "start": "2384320",
    "end": "2392360"
  },
  {
    "text": "it actually turns\nout that there's this very nice relationship\nbetween the third power of this matrix delta\npsi and its first power.",
    "start": "2392360",
    "end": "2401190"
  },
  {
    "text": "So with that, then if\nwe start with basically this infinite series or\nthe one on top, everything",
    "start": "2401190",
    "end": "2410450"
  },
  {
    "text": "that is an odd\npower of delta psi, you can write it as a\nmultiple of delta psi itself.",
    "start": "2410450",
    "end": "2418610"
  },
  {
    "text": "And everything that\nis an even power becomes a multiple\nof delta psi squared. So if you do that for all\nthe odd and even terms,",
    "start": "2418610",
    "end": "2426380"
  },
  {
    "text": "then you get\nsomething like this. So you just get your\nidentity plus something",
    "start": "2426380",
    "end": "2431750"
  },
  {
    "text": "which is just a function\nof rho times delta psi plus another\ninfinite series, which is just a function of rho\ntimes delta psi squared.",
    "start": "2431750",
    "end": "2438980"
  },
  {
    "text": "Now, if you carefully inspect\nthese infinite series in rho, they're very closely related\nto the sine and cosine Taylor",
    "start": "2438980",
    "end": "2446780"
  },
  {
    "text": "series expansions. So specifically the first\none, this infinite series,",
    "start": "2446780",
    "end": "2451910"
  },
  {
    "text": "is just sine rho over rho. And the second one turns out to\nbe just 1 minus cosine over rho",
    "start": "2451910",
    "end": "2459730"
  },
  {
    "text": "squared. And these are just purely\nfrom the Taylor series expansions of sine\nand cosine functions.",
    "start": "2459730",
    "end": "2465450"
  },
  {
    "text": "So you see now we have something\nreally, really beautiful. Let's go to the next\nslide, look at it together. So this guy here, which is\njust a sum of three terms,",
    "start": "2465450",
    "end": "2474299"
  },
  {
    "text": "the first one is identity. The second one is just this sine\nrho over rho times delta psi.",
    "start": "2474300",
    "end": "2479420"
  },
  {
    "text": "And the third one\nis 1 minus cosine over rho squared\ndelta psi squared. This is exactly equal to e to\nthe delta psi term or delta",
    "start": "2479420",
    "end": "2490200"
  },
  {
    "text": "psi of t that we have. And again, there is no\napproximations here. So this expression is exact.",
    "start": "2490200",
    "end": "2496230"
  },
  {
    "text": "And for this, most\nsystems that run on small embedded\nprocessors actually instead",
    "start": "2496230",
    "end": "2501390"
  },
  {
    "text": "of doing the actual\nmatrix exponential, they just use this formula\nbecause it's much, much, much",
    "start": "2501390",
    "end": "2506760"
  },
  {
    "text": "more efficient, as we can see. Instead of an infinite\nsum, it's just three terms. You just need sine\nand cosine functions,",
    "start": "2506760",
    "end": "2512880"
  },
  {
    "text": "which are many efficient\nways of calculating them. And then you just need delta\npsi and delta psi squared.",
    "start": "2512880",
    "end": "2520740"
  },
  {
    "text": "So that's how it's done. And what is delta psi? Let's just remind\nourselves that's just a matrix that has\nour gyroscope readouts,",
    "start": "2520740",
    "end": "2528119"
  },
  {
    "text": "the omegas times delta t. And the omega is\nthe omega bx, by,",
    "start": "2528120",
    "end": "2533640"
  },
  {
    "text": "and bz are just\nthe three readouts that the gyroscope provides.",
    "start": "2533640",
    "end": "2539160"
  },
  {
    "text": "So at each time\nstep, basically you get a new omega b vector\nfrom the gyroscope.",
    "start": "2539160",
    "end": "2545460"
  },
  {
    "text": "Three new measurements. Three new angular\nvelocities measured. You plug them into this.",
    "start": "2545460",
    "end": "2550900"
  },
  {
    "text": "You build your delta psi matrix. And then you plug delta psi\ninto your update equation,",
    "start": "2550900",
    "end": "2557560"
  },
  {
    "text": "do the sine and cosine and\neverything in the parentheses, multiply that by your\nprevious orientation matrix,",
    "start": "2557560",
    "end": "2564610"
  },
  {
    "text": "and that gives you your\nnew orientation matrix. You start, of course, with cg\nat time 0, which as I said,",
    "start": "2564610",
    "end": "2571750"
  },
  {
    "text": "you should assume sometimes\nit's given to you. Sometimes a different\nsensor provides it. But this needs to\nbe known or assumed.",
    "start": "2571750",
    "end": "2579110"
  },
  {
    "text": "And then over time,\nyou just multiply that by this update matrix\nand then that's",
    "start": "2579110",
    "end": "2584650"
  },
  {
    "text": "how you do orientation tracking. Any questions?",
    "start": "2584650",
    "end": "2590140"
  },
  {
    "text": "Yes. Just to clarify, since this\nis like an analytical solution of how you can take an exponent.",
    "start": "2590140",
    "end": "2596480"
  },
  {
    "text": "So the reason why we use this\nequation is that taking the x, it's cheaper to take the sines\nand cosines than taking--",
    "start": "2596480",
    "end": "2603400"
  },
  {
    "text": "Correct. So the reason that we\nwork with this equation--",
    "start": "2603400",
    "end": "2608500"
  },
  {
    "text": "again, if you're\nworking on your computer and you're just doing\nexperiments, by all",
    "start": "2608500",
    "end": "2614200"
  },
  {
    "text": "means, just do the\nmatrix exponential. Why go through the trouble\nof implementing this?",
    "start": "2614200",
    "end": "2619240"
  },
  {
    "text": "Just do that. It works perfectly fine. But if you're working\nin an application where your resource\nconstraint on your compute,",
    "start": "2619240",
    "end": "2625960"
  },
  {
    "text": "you need very low latency,\nfast calculations, then you use this.",
    "start": "2625960",
    "end": "2631329"
  },
  {
    "text": "And exactly as [INAUDIBLE] said,\nit's much cheaper and easier to find sine and\ncosine functions",
    "start": "2631330",
    "end": "2636460"
  },
  {
    "text": "than basically an infinite\nseries of a matrix exponential.",
    "start": "2636460",
    "end": "2642700"
  },
  {
    "text": "That series has lots of\nmatrix multiplications in it, and matrix multiplications are\ngenerally expensive to compute.",
    "start": "2642700",
    "end": "2649730"
  },
  {
    "text": "Sines and cosines,\nthere is either you can have a lookup table for it. You can just save the\nvalues of sine and cosines,",
    "start": "2649730",
    "end": "2656300"
  },
  {
    "text": "discretize it, and just\nuse a lookup table. Then it's basically free. I mean, it takes up memory, but\nit doesn't take up any compute.",
    "start": "2656300",
    "end": "2663650"
  },
  {
    "text": "Or if you want to compute\nthem in real time, there are very\nefficient algorithms, approximate\nalgorithms of course,",
    "start": "2663650",
    "end": "2669589"
  },
  {
    "text": "to give you sines and cosines. I think a good one is called-- ",
    "start": "2669590",
    "end": "2675400"
  },
  {
    "text": "I can't remember the name. But there is a\nfamous one that is used a lot in embedded\nsoftware engineering.",
    "start": "2675400",
    "end": "2682420"
  },
  {
    "text": "OK. So yes? So sine and cosine of a\nmatrix, is just element wise?",
    "start": "2682420",
    "end": "2689869"
  },
  {
    "text": "Oh, the rho,\nremember, is scalar. So the question was sine\nand cosine of a matrix. So this rho was just--",
    "start": "2689870",
    "end": "2696859"
  },
  {
    "text": "oh, actually it's here. The rho is the norm of a vector. So it's just a scalar value.",
    "start": "2696860",
    "end": "2702450"
  },
  {
    "text": "So these are regular sine\nand cosines of a number, basically, in here.",
    "start": "2702450",
    "end": "2707550"
  },
  {
    "text": "And that's, again, why it's fast\nand efficient to compute those.",
    "start": "2707550",
    "end": "2712700"
  },
  {
    "text": " So we have done\norientation tracking. We haven't quite done our\nlocalization or dead reckoning.",
    "start": "2712700",
    "end": "2723020"
  },
  {
    "text": "But this was the\ndifficult part of it. The rest is easy\nbecause, as we said, if we know the orientation, now\nwhat you do is this is just--",
    "start": "2723020",
    "end": "2731630"
  },
  {
    "text": "this c is just a rotation\nmatrix at the end of the day. So you apply that to your\naccelerometer readouts.",
    "start": "2731630",
    "end": "2737990"
  },
  {
    "text": "And that rotates them back\nfrom body reference frame to the global reference frame.",
    "start": "2737990",
    "end": "2743280"
  },
  {
    "text": "And then you just integrate\nyour accelerometer readouts. You go from acceleration to\nvelocity and from velocity",
    "start": "2743280",
    "end": "2748770"
  },
  {
    "text": "to a position, as we'll do next. But note that as you're doing\nthis process, our measurements",
    "start": "2748770",
    "end": "2757950"
  },
  {
    "text": "for both accelerometer\nand gyroscope, these are not\nperfect, as you know. There's biases and there is\nnoise in the measurements",
    "start": "2757950",
    "end": "2765840"
  },
  {
    "text": "at the very least. If it's not well\ncalibrated, you can have crosstalk and other things.",
    "start": "2765840",
    "end": "2771490"
  },
  {
    "text": "But even in the best case,\nyou have a little bit of bias and some noise. And what happens\nis as you integrate",
    "start": "2771490",
    "end": "2778529"
  },
  {
    "text": "these measurements,\nof course, you will be integrating your bias.",
    "start": "2778530",
    "end": "2784290"
  },
  {
    "text": "And bias is like a fixed vector. So as you integrate\nthat, that leads to an error that will\ngrow linearly with time.",
    "start": "2784290",
    "end": "2792569"
  },
  {
    "text": "Remember, we had this\nintegral of omega tau d tau and omega has the\nangular velocities in it.",
    "start": "2792570",
    "end": "2798720"
  },
  {
    "text": "And if angular\nvelocities have biases, you integrate the bias\nas part of that process. And then you have your noise\nterms also in the readouts.",
    "start": "2798720",
    "end": "2807270"
  },
  {
    "text": "And the noises, because\nthese are basically 0 mean random\nvariables, they show up",
    "start": "2807270",
    "end": "2814680"
  },
  {
    "text": "as some orientation random walk. So here's one example. So we're working\nwith a simple case.",
    "start": "2814680",
    "end": "2822970"
  },
  {
    "text": "The true angular velocity,\nthe ground truth in this case was just 0.1 degrees\nper second of yaw.",
    "start": "2822970",
    "end": "2831240"
  },
  {
    "text": "So that's rotation\nabout the z-axis. But the sensor we were\nworking with, it had some bias",
    "start": "2831240",
    "end": "2837870"
  },
  {
    "text": "and it had some noise\nwith that spectral density and a bandwidth of 1 kilohertz.",
    "start": "2837870",
    "end": "2843930"
  },
  {
    "text": "So as you integrate\nthat and you find psi of t, which is the angle\nbetween the body, x-axis,",
    "start": "2843930",
    "end": "2851970"
  },
  {
    "text": "and the global x-axis. As you expect, if it's rotating\nat a constant angular velocity,",
    "start": "2851970",
    "end": "2858810"
  },
  {
    "text": "that means the angle should\njust vary linearly with time. And that's your ground truth. The blue curve here\nis the ground truth.",
    "start": "2858810",
    "end": "2865470"
  },
  {
    "text": "But what you actually\ntrack with the algorithm we just described is the red. So as you see, there's a little\nbit of jitter on the red.",
    "start": "2865470",
    "end": "2872860"
  },
  {
    "text": "So that's the effect of noise. That's a little bit\nof the noise added. And then the bias\ncauses this area",
    "start": "2872860",
    "end": "2881190"
  },
  {
    "text": "to grow linearly with time. You see this gap is\nbecoming larger and larger",
    "start": "2881190",
    "end": "2886410"
  },
  {
    "text": "as the time goes. So you just start to drift away.",
    "start": "2886410",
    "end": "2891480"
  },
  {
    "text": "And that's a big problem with\npure inertial navigation,",
    "start": "2891480",
    "end": "2897119"
  },
  {
    "text": "because biases always\ncause this drift over time.",
    "start": "2897120",
    "end": "2902250"
  },
  {
    "text": "And that's a very\nwell known issue. OK. Now let's talk about\nposition tracking.",
    "start": "2902250",
    "end": "2908340"
  },
  {
    "text": "So we did orientation tracking. Now we're going to use\nour orientation tracking to do position tracking\nwith a strapdown",
    "start": "2908340",
    "end": "2914369"
  },
  {
    "text": "INS and global reference frame. This is very easy, because what\nthe accelerometer readouts are,",
    "start": "2914370",
    "end": "2920130"
  },
  {
    "text": "it gives you\naccelerations in the xyz coordinates of the body.",
    "start": "2920130",
    "end": "2925860"
  },
  {
    "text": "So it gives you\nabx, aby, and abz. These are the\nthree accelerations",
    "start": "2925860",
    "end": "2931200"
  },
  {
    "text": "in the body reference frame. And all you need to\ndo is to transform it",
    "start": "2931200",
    "end": "2936240"
  },
  {
    "text": "to the global reference frame,\nsubtract the gravity component, and integrate. How do we transform to the\nglobal reference frame?",
    "start": "2936240",
    "end": "2943830"
  },
  {
    "text": "We use our c sub g\nmatrix that we just learned how to find from\ngyroscope measurements.",
    "start": "2943830",
    "end": "2951570"
  },
  {
    "text": "And we know that the\nway the cg works, it transforms vectors\nfrom body reference frame",
    "start": "2951570",
    "end": "2958470"
  },
  {
    "text": "to global reference frame. It's a rotation matrix. So if you multiply your a in\nthe body frame by cg at time t,",
    "start": "2958470",
    "end": "2970200"
  },
  {
    "text": "it gives you the a in the\nglobal reference frame. So we do that first\nat every time step.",
    "start": "2970200",
    "end": "2976900"
  },
  {
    "text": "And then we also need to\nsubtract the gravity component. That's a fixed vector\nthat you just subtract.",
    "start": "2976900",
    "end": "2985140"
  },
  {
    "text": "We call it g sub g. And so what you do is\nthat after transforming your a to the global frame, you\nsubtract the gravity component",
    "start": "2985140",
    "end": "2992700"
  },
  {
    "text": "from it. And then you integrate that\nand add your initial velocity to it.",
    "start": "2992700",
    "end": "2998150"
  },
  {
    "text": "That gives you your\nvelocity at time t. And then to find\nposition, you integrate",
    "start": "2998150",
    "end": "3004030"
  },
  {
    "text": "your velocity from time 0 to t\nand add your initial position to it. And that gives you your\nposition at time t.",
    "start": "3004030",
    "end": "3010330"
  },
  {
    "text": "So this is now we're\ndoing full dead reckoning. Again, there's two\ninitial conditions",
    "start": "3010330",
    "end": "3015700"
  },
  {
    "text": "that you need to somehow know,\nwhich is your initial velocity and initial position\nneed to be known.",
    "start": "3015700",
    "end": "3021130"
  },
  {
    "text": "As the case of\norientation, you can either assume those if you're just\ndoing relative position",
    "start": "3021130",
    "end": "3028210"
  },
  {
    "text": "tracking. If you're doing absolute,\nthey should be given to you from a different sensor. So maybe from your\nGPS, for instance, it",
    "start": "3028210",
    "end": "3035529"
  },
  {
    "text": "gives you your absolute position\nand absolute velocity at time 0 and then you use that\nas the initial condition",
    "start": "3035530",
    "end": "3041140"
  },
  {
    "text": "for your basically position\ntracking with the INS. One thing to note about\nthis gravity component",
    "start": "3041140",
    "end": "3049630"
  },
  {
    "text": "that we're subtracting,\nit of course needs to be the gravity\nin the environment that you're working with.",
    "start": "3049630",
    "end": "3055100"
  },
  {
    "text": "So on Earth, we\nknow the gravity is 9.8 meters per second\nsquared and we use that.",
    "start": "3055100",
    "end": "3060230"
  },
  {
    "text": "It needs to be the\ngravity vector. So it should be pointing to\nthe right direction, basically.",
    "start": "3060230",
    "end": "3066799"
  },
  {
    "text": "But if you're doing position\ntracking with INS on Mars, you should subtract, of course,\nthe Mars gravity component.",
    "start": "3066800",
    "end": "3074309"
  },
  {
    "text": "So don't hardcode the\nEarth value in your codes if you're working on a\nMars Rover, basically.",
    "start": "3074310",
    "end": "3081710"
  },
  {
    "text": "OK. So again, this is\ndone in discrete form",
    "start": "3081710",
    "end": "3088100"
  },
  {
    "text": "instead of doing\ncontinuous integrals, which is even simpler. So you just have a bunch\nof update equations,",
    "start": "3088100",
    "end": "3094610"
  },
  {
    "text": "basically, to track\nvelocity and position. And the way it works\nis at every time step,",
    "start": "3094610",
    "end": "3102680"
  },
  {
    "text": "maybe there's one more equation\nI should have written here. I'm going to just\nadd it up there. The first thing you do is you\ntransform your acceleration",
    "start": "3102680",
    "end": "3112370"
  },
  {
    "text": "from a global frame\nto the body frame.",
    "start": "3112370",
    "end": "3118000"
  },
  {
    "text": "Sorry, from the body\nframe to the global frame. So ab is the direct readout\nof the accelerometer.",
    "start": "3118000",
    "end": "3123940"
  },
  {
    "text": "Multiply that by\nyour orientation matrix to convert it\nto the global frame.",
    "start": "3123940",
    "end": "3130400"
  },
  {
    "text": "And then once you have a at\ntime t in the global frame, subtract the gravity component.",
    "start": "3130400",
    "end": "3135430"
  },
  {
    "text": "Multiply that by your\ntime step right and that gives you your delta velocity.",
    "start": "3135430",
    "end": "3141040"
  },
  {
    "text": "Add it to your velocity\nat the previous time step. And that gives you the\nvelocity at the next time step.",
    "start": "3141040",
    "end": "3146720"
  },
  {
    "text": "And then you use that\nvelocity times delta t And add that to your position\nat the previous time.",
    "start": "3146720",
    "end": "3153940"
  },
  {
    "text": "And that gives you the\nposition in the new time. Notice that, again,\noverloaded notation.",
    "start": "3153940",
    "end": "3159380"
  },
  {
    "text": "So all these are three vectors. Your acceleration, the a is\na vector, the v is a vector,",
    "start": "3159380",
    "end": "3165100"
  },
  {
    "text": "and the p is a vector. These are all. In general, there are three. If you're just doing stuff in\n2D, these are vectors in r2.",
    "start": "3165100",
    "end": "3172570"
  },
  {
    "text": "But generally, these are r2. So your update equations. You apply them every time\na new accelerometer readout",
    "start": "3172570",
    "end": "3180800"
  },
  {
    "text": "becomes available. So as new readouts\ncome in, you just update your position and\nvelocity accordingly.",
    "start": "3180800",
    "end": "3188550"
  },
  {
    "text": "And that's complete\nbasically dead reckoning. Again, important to note is that\nnow we are essentially doing",
    "start": "3188550",
    "end": "3196310"
  },
  {
    "text": "a little bit of sensor fusion. Because in the previous\nslide, this cg matrix,",
    "start": "3196310",
    "end": "3202790"
  },
  {
    "text": "this is coming from gyro. And the a is coming\nfrom accelerometer.",
    "start": "3202790",
    "end": "3209480"
  },
  {
    "text": "So this is the simplest case\nof using two sensors to do something interesting with it.",
    "start": "3209480",
    "end": "3214500"
  },
  {
    "text": "But that means there\nis now contributions from the bias and noise\nof both sensors in here.",
    "start": "3214500",
    "end": "3221869"
  },
  {
    "text": "So they both contribute. And the way they contribute\nis kind of interesting, because what happens from the\ngyro's contribution, the bias",
    "start": "3221870",
    "end": "3230420"
  },
  {
    "text": "and the noise, it causes errors\nin the orientation in that c matrix.",
    "start": "3230420",
    "end": "3235940"
  },
  {
    "text": "And what happens is that\nwe use that c to transform our accelerations from\nbody reference frame",
    "start": "3235940",
    "end": "3243140"
  },
  {
    "text": "to the global reference frame. So that bias and noise causes\nan error in that transformation,",
    "start": "3243140",
    "end": "3248970"
  },
  {
    "text": "which means now\nyour accelerations are not exactly in\nthe global frame. There is a little\nbit of error in that.",
    "start": "3248970",
    "end": "3254760"
  },
  {
    "text": "So the accelerations are going\nto be incorrectly transformed to the global reference\nframe, which means also",
    "start": "3254760",
    "end": "3260720"
  },
  {
    "text": "that the gravity component\nis not correctly subtracted because you always assume your\ngravity component according",
    "start": "3260720",
    "end": "3267240"
  },
  {
    "text": "to the geometry of\nthe fixed frame. And then you subtract that\nif your accelerations are not",
    "start": "3267240",
    "end": "3273540"
  },
  {
    "text": "in the proper frame. There's going to be a little\nbit of residual basically gravity component.",
    "start": "3273540",
    "end": "3278970"
  },
  {
    "text": "And then you integrate\nthose accelerations in the wrong directions. So that's what happens,\nthe contribution of gyro,",
    "start": "3278970",
    "end": "3286440"
  },
  {
    "text": "basically, bias and noise. And then the accelerometer\nreadouts themselves",
    "start": "3286440",
    "end": "3291690"
  },
  {
    "text": "have their own bias and noise. Those are not perfect. And what happens\nthere is that you",
    "start": "3291690",
    "end": "3297930"
  },
  {
    "text": "start from an\nacceleration, which has some bias and some noise. And you're double integrating.",
    "start": "3297930",
    "end": "3303305"
  },
  {
    "text": "Because you integrate once,\nwe go from acceleration to velocity and then\nyou integrate again from velocity to position.",
    "start": "3303305",
    "end": "3308760"
  },
  {
    "text": "So a fixed bias in acceleration,\nyou integrate it twice. It gives you a quadratic\nerror in position.",
    "start": "3308760",
    "end": "3315030"
  },
  {
    "text": "So errors can really,\nreally blow up if you just purely do\norientation tracking",
    "start": "3315030",
    "end": "3321300"
  },
  {
    "text": "with INSes or IMUs over\nlong periods of time. Very important to know.",
    "start": "3321300",
    "end": "3327090"
  },
  {
    "text": "So you get position errors\ngrowing quadratically in time. And then you double\nintegrate your noise.",
    "start": "3327090",
    "end": "3332550"
  },
  {
    "text": "That just gives you\nsome random walk on top of your basically\nposition tracking.",
    "start": "3332550",
    "end": "3338250"
  },
  {
    "text": "In terms of which of\nthese two contributions is worse than the other,\nusually gyro's contribution",
    "start": "3338250",
    "end": "3348270"
  },
  {
    "text": "is the bigger effect\nthan accelerometer. Although from what I said that\nthese errors become quadratic,",
    "start": "3348270",
    "end": "3355830"
  },
  {
    "text": "the bias of the\naccelerometer, still it turns out gyro bias makes\nits way into the orientation",
    "start": "3355830",
    "end": "3363150"
  },
  {
    "text": "tracking has a bigger\neffect on the overall error of our dead reckoning. So for instance, if you have\na tilt error of just 0.05",
    "start": "3363150",
    "end": "3373710"
  },
  {
    "text": "degrees, I mean,\nit's really not much. You would think, I\nmean, this is nothing. With that much tilt error,\nif you just integrate it",
    "start": "3373710",
    "end": "3382110"
  },
  {
    "text": "for 30 seconds, again,\nnot a lot of time, you're going to end\nup with close to eight",
    "start": "3382110",
    "end": "3387970"
  },
  {
    "text": "meters of position error,\nwhich could be catastrophic depending on the application.",
    "start": "3387970",
    "end": "3393720"
  },
  {
    "text": "So you should be very aware\nof these basically limitations",
    "start": "3393720",
    "end": "3402060"
  },
  {
    "text": "as you're using\nthose techniques. And you should always\ndo your full analysis",
    "start": "3402060",
    "end": "3407730"
  },
  {
    "text": "according to the\nsensors that you've picked for your application. Look at their data sheet. Look at the bias. Look at the noise.",
    "start": "3407730",
    "end": "3413579"
  },
  {
    "text": "Plug in the numbers,\ndo a simulation, and make sure whatever error you\nend up with in the worst case",
    "start": "3413580",
    "end": "3420990"
  },
  {
    "text": "is within the margin of\ntolerance for your application. Otherwise very, very\nbad things could happen.",
    "start": "3420990",
    "end": "3428350"
  },
  {
    "text": "Here's an example of\na 2D dead reckoning. So we are basically\nthe ground truth",
    "start": "3428350",
    "end": "3435210"
  },
  {
    "text": "velocities and accelerations,\nangular velocities and accelerations,\nare given here. They're fixed just\nfor simplicity.",
    "start": "3435210",
    "end": "3444329"
  },
  {
    "text": "I just assumed a fixed yaw rate\nand some fixed accelerations",
    "start": "3444330",
    "end": "3450000"
  },
  {
    "text": "in x and y directions of\nthe body reference frame. And some bias values\nand some noise values.",
    "start": "3450000",
    "end": "3458620"
  },
  {
    "text": "So basically, we\nplug everything in. We assume we start with\nan orientation that's",
    "start": "3458620",
    "end": "3464160"
  },
  {
    "text": "aligned to the global frame. And at 0 velocity and at\nthe origin, just to make",
    "start": "3464160",
    "end": "3470580"
  },
  {
    "text": "this simulation simpler. And then you do a 2D position\ntracking or dead reckoning,",
    "start": "3470580",
    "end": "3476250"
  },
  {
    "text": "as you call it. So you start at the\norigin at time 0. And the blue curve gives you\nthe ground truth, basically,",
    "start": "3476250",
    "end": "3484049"
  },
  {
    "text": "trajectory after 100 seconds. And it moves fast. It's already moved\nmore than a couple",
    "start": "3484050",
    "end": "3491190"
  },
  {
    "text": "of kilometers, basically. And then the red gives\nyou your basically what we get out of our\nINS tracking algorithm",
    "start": "3491190",
    "end": "3499470"
  },
  {
    "text": "dead reckoning. And you see there is after\n100 seconds, in this case,",
    "start": "3499470",
    "end": "3504510"
  },
  {
    "text": "there's already\nquite a bit of error. I mean, if you look\nat the scales here, this is a few hundred\nmeters probably,",
    "start": "3504510",
    "end": "3509950"
  },
  {
    "text": "like 1 to 200 meters\nprobably, which is a lot for any\napplications, I would say.",
    "start": "3509950",
    "end": "3517360"
  },
  {
    "text": "But again, I mean, I'm not\ntrying to say this never works.",
    "start": "3517360",
    "end": "3522700"
  },
  {
    "text": "These numbers are probably\na bit exaggerated.",
    "start": "3522700",
    "end": "3527890"
  },
  {
    "text": "But for this reason that\nthere is always error in purely inertial navigation.",
    "start": "3527890",
    "end": "3534760"
  },
  {
    "text": "In any real system,\nyou would always want to use other\nsensors and fuse them",
    "start": "3534760",
    "end": "3541299"
  },
  {
    "text": "into how you do your\norientation tracking. The simplest one, which is\nvery, very common these days,",
    "start": "3541300",
    "end": "3547930"
  },
  {
    "text": "is use GPS. Because GPS, as we know, it\ngives you absolute position.",
    "start": "3547930",
    "end": "3553040"
  },
  {
    "text": "So there is no bias\nin GPS measurements. There is no noise. There's quite a bit of noise. It could be up to a couple\nof meters or more off.",
    "start": "3553040",
    "end": "3560830"
  },
  {
    "text": "But there is no bias, and\nthat's very important. So you can bring in\nyour GPS measurements",
    "start": "3560830",
    "end": "3566840"
  },
  {
    "text": "and it gives you velocity\nalso, position and velocity. And somehow through a\nsignal processing techniques",
    "start": "3566840",
    "end": "3574730"
  },
  {
    "text": "like, say, Kalman\nfiltering for instance, you can fuse in your\nodometry that you're",
    "start": "3574730",
    "end": "3580250"
  },
  {
    "text": "getting from\naccelerometer and gyros and also fuse that with\nyour GPS measurements.",
    "start": "3580250",
    "end": "3586170"
  },
  {
    "text": "So what happens is that GPS\nmeasurements come in slowly. It's a slower update\nrate than IMUs.",
    "start": "3586170",
    "end": "3594170"
  },
  {
    "text": "But they don't have\nany bias in them. IMU measurements come much\nfaster, but there is bias.",
    "start": "3594170",
    "end": "3601049"
  },
  {
    "text": "So in that sense, they\nare complementary. Or if you remember, just when\nwe started the topic of IMUs,",
    "start": "3601050",
    "end": "3609350"
  },
  {
    "text": "I told you when it\ncomes to localization, there's position fixing\nand there's dead reckoning.",
    "start": "3609350",
    "end": "3614510"
  },
  {
    "text": "GPS does position fixing. It doesn't do dead reckoning. So it gives you unbiased\nestimates of your position.",
    "start": "3614510",
    "end": "3621590"
  },
  {
    "text": "So you can see if you kind\nof fuse the two together,",
    "start": "3621590",
    "end": "3626750"
  },
  {
    "text": "you should be able to do\nmuch, much better than this. And that actually\nis how it's done.",
    "start": "3626750",
    "end": "3632360"
  },
  {
    "text": "You can these days\nbuy integrated devices that have an INS\nand a GPS receiver",
    "start": "3632360",
    "end": "3639740"
  },
  {
    "text": "already integrated with some\nsignal processing engine that does the fusion for you.",
    "start": "3639740",
    "end": "3644880"
  },
  {
    "text": "These are called\nINS GNSS receivers. You plug in basically a\nsmall GPS antenna to it",
    "start": "3644880",
    "end": "3651710"
  },
  {
    "text": "and it does the fusion\nbetween the GPS and IMU. There's even better\nways of doing it.",
    "start": "3651710",
    "end": "3657150"
  },
  {
    "text": "You can mix it in with visual\nodometry or positioning.",
    "start": "3657150",
    "end": "3664309"
  },
  {
    "text": "And a very interesting,\ncommon technique generally, which is a big research\nfield, is called VIO, or Visual Inertial Odometry.",
    "start": "3664310",
    "end": "3670940"
  },
  {
    "text": "So then you mix in some\nway of estimating velocity and eventually position from\nvisual cues coming from cameras",
    "start": "3670940",
    "end": "3678740"
  },
  {
    "text": "or LiDARs or radars with\nthe inertial techniques that we just talked about. And then you can\nalmost completely",
    "start": "3678740",
    "end": "3684950"
  },
  {
    "text": "eliminate these error\neffects that grow over time. So with sensor fusion\ntechniques done right,",
    "start": "3684950",
    "end": "3691550"
  },
  {
    "text": "you can get almost perfect\nbasically localization in many applications.",
    "start": "3691550",
    "end": "3697010"
  },
  {
    "text": "The cost, of course, is\nyou need more sensors and you need more complex\nalgorithms to do it.",
    "start": "3697010",
    "end": "3703070"
  },
  {
    "text": "But it can be done and\nit works beautifully. Bottom line is there's a lot you\ncan do with inertial sensors,",
    "start": "3703070",
    "end": "3710510"
  },
  {
    "text": "but they also have very\nsignificant limitations. They're used almost always,\nbut also almost always they're",
    "start": "3710510",
    "end": "3718160"
  },
  {
    "text": "mixed in some way or\nsort with other sensors to compensate these limitations.",
    "start": "3718160",
    "end": "3723350"
  },
  {
    "text": "Any questions? Yes. Could you explain the\nunits of the noise?",
    "start": "3723350",
    "end": "3729320"
  },
  {
    "text": "Yes. Great question. The units of the noise.",
    "start": "3729320",
    "end": "3735350"
  },
  {
    "text": "These are confusing, I agree. So which one? Because they're both confusing.",
    "start": "3735350",
    "end": "3740960"
  },
  {
    "text": "Let's look at the gyro. So the question is what the\nhell is the units like 1",
    "start": "3740960",
    "end": "3747620"
  },
  {
    "text": "over square root of seconds? It's actually\nexplained in that part of the notes, which I skipped\nover, where we derive the noise",
    "start": "3747620",
    "end": "3757370"
  },
  {
    "text": "power spectrum. But the way you actually,\nwithout going into the details,",
    "start": "3757370",
    "end": "3764360"
  },
  {
    "text": "if you read that part, it's\nreally explained there. But super high\nlevel, the way this",
    "start": "3764360",
    "end": "3770000"
  },
  {
    "text": "makes sense is that it's\na power spectral density.",
    "start": "3770000",
    "end": "3775190"
  },
  {
    "text": "So you want to integrate\nit over some bandwidth. And then that bandwidth\nis going to be basically",
    "start": "3775190",
    "end": "3785720"
  },
  {
    "text": "in units of Hertz. And what you want to\nget after you integrate,",
    "start": "3785720",
    "end": "3791270"
  },
  {
    "text": "it should be in units\nof 1 over seconds. So that's the angular velocity\nor radians per second.",
    "start": "3791270",
    "end": "3801020"
  },
  {
    "text": "So one way that\nyou can do that-- and then as part of the process,\nsometimes instead of reporting",
    "start": "3801020",
    "end": "3809430"
  },
  {
    "text": "is when you find a\npower spectral density, you essentially are\nlooking at the square",
    "start": "3809430",
    "end": "3815490"
  },
  {
    "text": "of the magnitude of an FFT\nto convert it to power units. But the confusing thing that\nsome data sheets actually do",
    "start": "3815490",
    "end": "3824940"
  },
  {
    "text": "is that, well, although\nessentially you should do the squaring to find\nyour power spectral density",
    "start": "3824940",
    "end": "3831630"
  },
  {
    "text": "but then they actually\nreport the square root of it instead of reporting the square. And that's where this little\nsquare root of seconds",
    "start": "3831630",
    "end": "3839520"
  },
  {
    "text": "comes from. So if you have something\nthat is like a power spectrum with units of 1 over\na second over Hertz and then",
    "start": "3839520",
    "end": "3849180"
  },
  {
    "text": "you take the square\nroot of that and that's where the square root\nactually comes from. I know my explanation was\nprobably even more confusing",
    "start": "3849180",
    "end": "3858240"
  },
  {
    "text": "than what I was\nhoping to get to. But if you really read\nthat few pages in the notes",
    "start": "3858240",
    "end": "3866800"
  },
  {
    "text": "where we derive this, the\nunits become very clear. Because you have to\nsee the math and then",
    "start": "3866800",
    "end": "3873340"
  },
  {
    "text": "it becomes clear why\nthe units are this. Same here. The micro G per root Hertz.",
    "start": "3873340",
    "end": "3879430"
  },
  {
    "text": "The square root again\ncomes from that conversion from the absolute\nvalue of the FFT",
    "start": "3879430",
    "end": "3885370"
  },
  {
    "text": "and the squaring that is\ninvolved to make it a power spectrum, basically. But yeah, I really, really\ndon't like these units.",
    "start": "3885370",
    "end": "3893200"
  },
  {
    "text": "I find them myself confusing. But for some reason, it's\nthe industry standard that if you look\nat any data sheet,",
    "start": "3893200",
    "end": "3901630"
  },
  {
    "text": "they report it in this way. OK. So now we can start\nthe next chapter,",
    "start": "3901630",
    "end": "3909920"
  },
  {
    "text": "which is going to be\nabout sound navigation",
    "start": "3909920",
    "end": "3914950"
  },
  {
    "text": "and ranging or sonar. Before we start the\ndiscussion of sonar itself,",
    "start": "3914950",
    "end": "3923050"
  },
  {
    "text": "I want to talk a little\nbit about robotic mapping. Because essentially the next\nfour chapters of the course",
    "start": "3923050",
    "end": "3933520"
  },
  {
    "text": "is going to be\nabout sensors that are used in robotic mapping. IMU and GPS, those are used\nfor localization and odometry,",
    "start": "3933520",
    "end": "3942520"
  },
  {
    "text": "as we know. So again, just to remind\nourselves where we started,",
    "start": "3942520",
    "end": "3947600"
  },
  {
    "text": "we know that to do navigation,\nyou require three things. You require a map.",
    "start": "3947600",
    "end": "3953440"
  },
  {
    "text": "You also need to localize\nyourself in the map and you also need to know\nhow you're moving, which",
    "start": "3953440",
    "end": "3959470"
  },
  {
    "text": "means you need to do odometry. The two sensors we have\nlearned about so far, which is the GPS and the IMU,\nthey help with these two.",
    "start": "3959470",
    "end": "3968109"
  },
  {
    "text": "So with IMU, you can do\nlocalization, for instance, as we just talked about\nusing dead reckoning.",
    "start": "3968110",
    "end": "3975070"
  },
  {
    "text": "It also directly\ngives you odometry. It gives you accelerations,\nvelocities, angular velocities.",
    "start": "3975070",
    "end": "3981910"
  },
  {
    "text": "Same for GPS. It localizes you and it does\nsome limited odometry also. But none of these do anything\nregarding to mapping.",
    "start": "3981910",
    "end": "3990700"
  },
  {
    "text": "If you don't have\na map, you really can't localize yourself even\nif you have perfect odometry",
    "start": "3990700",
    "end": "3995980"
  },
  {
    "text": "and localization. So now we are going to\nstart talking about mapping. So what is mapping? It's a process of basically\nyou sense your environment",
    "start": "3995980",
    "end": "4004140"
  },
  {
    "text": "and you construct either a\ntwo dimensional or a three dimensional map that shows you\nthe static and dynamic objects",
    "start": "4004140",
    "end": "4012690"
  },
  {
    "text": "around you. So it's kind of like a\nvisual representation of the environment around you.",
    "start": "4012690",
    "end": "4019210"
  },
  {
    "text": "And when it comes to mapping,\nthere's two different ways that mapping is done. One is called offline mapping.",
    "start": "4019210",
    "end": "4025770"
  },
  {
    "text": "And offline maps are\nbasically prerecorded maps. Like you open your\nGoogle map, basically,",
    "start": "4025770",
    "end": "4031990"
  },
  {
    "text": "and there is a prerecorded map\nin there that you can look at",
    "start": "4031990",
    "end": "4037320"
  },
  {
    "text": "and you can use. So those are offline maps. There's also online\nor live mapping.",
    "start": "4037320",
    "end": "4043770"
  },
  {
    "text": "And these are real\ntime generated. So your robot basically uses the\nsensors that it has on board,",
    "start": "4043770",
    "end": "4050280"
  },
  {
    "text": "and in real time it maps out\nwhat the environment around it is. And each of these\ntypes of mapping",
    "start": "4050280",
    "end": "4056730"
  },
  {
    "text": "has its pros and cons,\nbasically, as we'll see. But it's important to note\nthat in many applications,",
    "start": "4056730",
    "end": "4065310"
  },
  {
    "text": "both are actually used. So the robots will\nhave some offline map.",
    "start": "4065310",
    "end": "4071070"
  },
  {
    "text": "And then they also\ndo some live mapping. ",
    "start": "4071070",
    "end": "4076980"
  },
  {
    "text": "The most obvious\nreason why you always need the live mapping\nis that offline maps,",
    "start": "4076980",
    "end": "4083190"
  },
  {
    "text": "they don't give\nyou, for instance, dynamic targets in the scene. If you look at your\nGoogle map, you can't just",
    "start": "4083190",
    "end": "4089099"
  },
  {
    "text": "drive by looking at the Google\nMap, because first, it's coarse and it's not super\nhigh resolution. But even if it was,\nit doesn't show you",
    "start": "4089100",
    "end": "4095672"
  },
  {
    "text": "the cars on the street\nor the pedestrians or other things that\nare dynamically moving.",
    "start": "4095672",
    "end": "4100979"
  },
  {
    "text": "And you need to know that. And those you need to measure\nin real time, of course. So you always need some\nlevel of live mapping.",
    "start": "4100979",
    "end": "4108818"
  },
  {
    "text": "So here is just one\nillustration of a map",
    "start": "4108819",
    "end": "4114389"
  },
  {
    "text": "that an autonomous\nvehicle has generated. So this is a 3D\nmap from a LiDAR.",
    "start": "4114390",
    "end": "4120870"
  },
  {
    "text": "And it shows all\nthe static parts of the scene like the road\nand the building structures.",
    "start": "4120870",
    "end": "4126810"
  },
  {
    "text": "And there's also the pedestrians\nand cars and other things. The bounding boxes here,\nthat's not part of the mapping.",
    "start": "4126810",
    "end": "4134369"
  },
  {
    "text": "So on the map, they have run\nsome perception algorithm and then they have done some\nclassification of pedestrians",
    "start": "4134370",
    "end": "4142859"
  },
  {
    "text": "and cars and things like that. So the bounding boxes\nare technically not part of the map. OK, so let's talk a little\nmore about this idea",
    "start": "4142859",
    "end": "4151049"
  },
  {
    "text": "of offline and online mapping. Starting with\noffline maps, there's two very distinct\ntypes of offline maps.",
    "start": "4151050",
    "end": "4158009"
  },
  {
    "text": "And they're called\nhigh definition maps and standard definition maps. Starting with the\nstandard definition maps,",
    "start": "4158010",
    "end": "4163410"
  },
  {
    "text": "that's exactly what\nyou get, for instance, from your Google\nMaps or Apple Maps or these online navigation\nmaps that are available.",
    "start": "4163410",
    "end": "4174310"
  },
  {
    "text": "They're extremely useful. They show you roads and\nbuildings and things like that. But they're not\nsuper high resolution",
    "start": "4174310",
    "end": "4182199"
  },
  {
    "text": "and they don't show you\ntypically the fine structures in the scene or\nanything like that.",
    "start": "4182200",
    "end": "4187839"
  },
  {
    "text": "Then there's HD maps, which\nhere's a screenshot of. And these are super,\nsuper high resolution.",
    "start": "4187840",
    "end": "4193420"
  },
  {
    "text": "If you look at\nthis, this map here, it even shows you the poles\nfor different traffic signs",
    "start": "4193420",
    "end": "4200440"
  },
  {
    "text": "and things like that. All the structure and the\ntrees and the buildings are very visible. It even shows you the\nexact lanes and directions",
    "start": "4200440",
    "end": "4207970"
  },
  {
    "text": "of the roads. So this is one that is\ngenerated for autonomous driving, of course. But it has a lot more detail\nthan a standard definition map.",
    "start": "4207970",
    "end": "4216099"
  },
  {
    "text": "Now, I am personally,\nand this is not",
    "start": "4216100",
    "end": "4221200"
  },
  {
    "text": "a very scientific opinion,\nbut I'm personally not a big fan of HD maps. So it's a huge topic of\ndebate, especially when it",
    "start": "4221200",
    "end": "4228489"
  },
  {
    "text": "comes to autonomous\ndriving that should you or should autonomous\nvehicles use HD maps or not.",
    "start": "4228490",
    "end": "4237949"
  },
  {
    "text": "And it's a big debate. Of course, it helps a lot if\nyou have these high definition",
    "start": "4237950",
    "end": "4243350"
  },
  {
    "text": "maps. I mean, you can\ndo a lot with them when it comes to localization. But these are very,\nvery expensive",
    "start": "4243350",
    "end": "4249550"
  },
  {
    "text": "to generate, as you can imagine. You need to in very high\ndetail map out entire cities,",
    "start": "4249550",
    "end": "4254560"
  },
  {
    "text": "basically. It's not a scalable operation. And the maps become obsolete.",
    "start": "4254560",
    "end": "4261520"
  },
  {
    "text": "If there is construction going\non and in a couple of months they change the road or the\nbuilding, your map is not valid",
    "start": "4261520",
    "end": "4268810"
  },
  {
    "text": "or part of it is not valid. For those reasons, I'm\nnot a big fan of HD maps.",
    "start": "4268810",
    "end": "4275080"
  },
  {
    "text": "I think it's\nconvenient, but it's not scalable for full\nautonomy globally.",
    "start": "4275080",
    "end": "4283600"
  },
  {
    "text": "But I should also\nsay that almost all the autonomous vehicle\ndemos we see on the roads",
    "start": "4283600",
    "end": "4290790"
  },
  {
    "text": "today, like if you\ngo to San Francisco and use any of the\navailable services,",
    "start": "4290790",
    "end": "4295800"
  },
  {
    "text": "they are using HD maps heavily. But I think one of the\nalmost autonomous products",
    "start": "4295800",
    "end": "4307290"
  },
  {
    "text": "out there that,\nas far as I know, does not use HD maps is Tesla. I don't think\nTesla uses HD maps.",
    "start": "4307290",
    "end": "4313800"
  },
  {
    "text": "It just live maps\nthe environment that the vehicle-- maybe\nthey use SD maps too. I mean, I'm sure they use\nSD maps, but not HD maps.",
    "start": "4313800",
    "end": "4320880"
  },
  {
    "text": "SD maps are cheap. They're already available. Google or Apple Maps or\nother map applications.",
    "start": "4320880",
    "end": "4328199"
  },
  {
    "text": "They're already\nglobally available. They can be done much cheaper. You typically use satellites\nto map out the earth.",
    "start": "4328200",
    "end": "4334200"
  },
  {
    "text": "And those are very easy to use.",
    "start": "4334200",
    "end": "4339610"
  },
  {
    "text": "So that's about offline maps. And then when it\ncomes to live mapping, the live maps are typically much\nsparser than the offline maps.",
    "start": "4339610",
    "end": "4353440"
  },
  {
    "text": "Because again, these\nare live generated. So you're getting frames\nof data from your sensor",
    "start": "4353440",
    "end": "4360190"
  },
  {
    "text": "or points of data\nfrom your sensor. And you're using\nthose in real time.",
    "start": "4360190",
    "end": "4365260"
  },
  {
    "text": "And by real time, I mean\nin very short timescales. You have typically\ntens of milliseconds",
    "start": "4365260",
    "end": "4370900"
  },
  {
    "text": "to map the environment\naround you. And for that reason, there's\nvery limited information",
    "start": "4370900",
    "end": "4378700"
  },
  {
    "text": "available to the robot\nto do live mapping. So typically when you\nlook at a live map,",
    "start": "4378700",
    "end": "4383710"
  },
  {
    "text": "they are called point\nclouds because they're just a collection of\npoints in 2 or 3D",
    "start": "4383710",
    "end": "4389560"
  },
  {
    "text": "and they're generally\nmuch sparser. Here we're looking at a\nlive map from a radar.",
    "start": "4389560",
    "end": "4395380"
  },
  {
    "text": "This was measured\nin Redwood City. And just to give context,\nI've shown the offline SD map",
    "start": "4395380",
    "end": "4402700"
  },
  {
    "text": "from Google Maps, I think,\nof the exact same scene. Because if you just look at\nthe radar 2D point cloud,",
    "start": "4402700",
    "end": "4410210"
  },
  {
    "text": "it might not make\na lot of sense. But from here, for instance,\nyou see this L shaped structure here.",
    "start": "4410210",
    "end": "4415550"
  },
  {
    "text": "That's actually this building. This trapezoidal looking thing,\nthat's actually the wall here.",
    "start": "4415550",
    "end": "4422100"
  },
  {
    "text": "And there's actually fences\naround this parking lot. So that's why the radar\nis actually detecting",
    "start": "4422100",
    "end": "4428270"
  },
  {
    "text": "the fences are metallic. As we'll see, radars are good\nat detecting metallic things. This angled structure here\nis actually this building.",
    "start": "4428270",
    "end": "4436639"
  },
  {
    "text": "And there's this stuff here. Those are cars. I mean, these are not\ncaptured at the same time.",
    "start": "4436640",
    "end": "4443480"
  },
  {
    "text": "But as you see, there's\nalways like cars parked on the side of the street. So that's radar. And you have the two roads\nand the cross section,",
    "start": "4443480",
    "end": "4450950"
  },
  {
    "text": "basically, on the two sides. So it's useful. I mean, the point here is\nthat, yes, it's very sparse.",
    "start": "4450950",
    "end": "4457280"
  },
  {
    "text": "But because it's generated\nlive and it also gives you the details of all the\ndynamic assets in the scene,",
    "start": "4457280",
    "end": "4464930"
  },
  {
    "text": "live maps are going\nto be very useful. This one, again, is 2D. So it only has azimuth\nresolution and elevation.",
    "start": "4464930",
    "end": "4471949"
  },
  {
    "text": "Everything is flattened out. It kind of gives you a\nbird's eye view, if you will, of the scene. But you can also have 3D\npoint clouds or live maps.",
    "start": "4471950",
    "end": "4481560"
  },
  {
    "text": "So here's one from Velodyne\nLidar, for instance, generated.",
    "start": "4481560",
    "end": "4487250"
  },
  {
    "text": "So again, you have your\n[INAUDIBLE] vehicle in the center. And there was a LiDAR\nmounted on top of it.",
    "start": "4487250",
    "end": "4492680"
  },
  {
    "text": "And these round\nthings that you see, these are kind of like the\nscanning lines of the LiDAR.",
    "start": "4492680",
    "end": "4498140"
  },
  {
    "text": "We'll talk in painful\ndetail about all this in a couple of weeks. So don't worry.",
    "start": "4498140",
    "end": "4503150"
  },
  {
    "text": "Right now just\nvisually, I want you to get a feel for what\nthese live maps look like.",
    "start": "4503150",
    "end": "4509030"
  },
  {
    "text": "It's 3D. It's live. But it is sparse. It's not as dense\nas a offline HD map.",
    "start": "4509030",
    "end": "4518630"
  },
  {
    "text": "Still extremely,\nextremely useful for autonomy applications.",
    "start": "4518630",
    "end": "4524930"
  },
  {
    "text": "Now, when it comes to\nespecially live mapping",
    "start": "4524930",
    "end": "4530420"
  },
  {
    "text": "and you talk with different\npeople working in robotics, sometimes when you\nsay map, people",
    "start": "4530420",
    "end": "4537710"
  },
  {
    "text": "think of either\njust offline maps or they think of\nsomething which is",
    "start": "4537710",
    "end": "4544130"
  },
  {
    "text": "called a SLAM output that I'm\ngoing to show you in a second.",
    "start": "4544130",
    "end": "4549830"
  },
  {
    "text": "For me, I like to\nthink of all of these as maps, because they are\ndifferent ways of just mapping",
    "start": "4549830",
    "end": "4555815"
  },
  {
    "text": "the environment around you. Some of them are\ngenerated offline. Some of them are generated live. The live ones are\ntypically sparse",
    "start": "4555815",
    "end": "4561860"
  },
  {
    "text": "but they give you\nlive information and more useful for autonomy. But just mind that if you\nshow this to some person",
    "start": "4561860",
    "end": "4570020"
  },
  {
    "text": "and call it a map and\nthey might say, oh, but this is just a point cloud. I mean, don't even\ndebate with them.",
    "start": "4570020",
    "end": "4576367"
  },
  {
    "text": "Let them call it what they want. But these are maps\nof the environment.",
    "start": "4576367",
    "end": "4581690"
  },
  {
    "text": "But just note that\npeople like to now call these just point\nclouds or images",
    "start": "4581690",
    "end": "4587780"
  },
  {
    "text": "sometimes of the environment. And then when you say maps,\nthey just think of offline maps. For us these are all maps.",
    "start": "4587780",
    "end": "4594210"
  },
  {
    "text": "There's different types of it. Offline, online,\nand then there's different flavors\nof online mapping.",
    "start": "4594210",
    "end": "4599660"
  },
  {
    "text": "You can generate live maps\nthat are very, very dense using a technique\nwhich is called",
    "start": "4599660",
    "end": "4606020"
  },
  {
    "text": "simultaneous\nlocalization and mapping. And here is a 3D map of\nour own campus actually.",
    "start": "4606020",
    "end": "4615110"
  },
  {
    "text": "Here you see the Hoover tower. This is looking into the main\nquad and the oval is over here.",
    "start": "4615110",
    "end": "4623900"
  },
  {
    "text": "Is this called Jane\nStamford Road now? Yes. So this is one I did four\nyears ago with a LiDAR.",
    "start": "4623900",
    "end": "4633110"
  },
  {
    "text": "So as you see,\nthis is much denser compared to the\nprevious-- like this one",
    "start": "4633110",
    "end": "4638360"
  },
  {
    "text": "where it's like on the road,\nyou get big gaps, for instance, between the lighter\nscan lines here.",
    "start": "4638360",
    "end": "4644060"
  },
  {
    "text": "Now it's much, much more dense. And the way the SLAM framework\nworks is basically it",
    "start": "4644060",
    "end": "4650660"
  },
  {
    "text": "accumulates multiple\nframes of point cloud. And it corrects for the\nmotion of the platform.",
    "start": "4650660",
    "end": "4658610"
  },
  {
    "text": "And the platform is whatever\nthe sensor is mounted on. It's a robot or whatever. As it moves, it collects\nmultiple frames.",
    "start": "4658610",
    "end": "4666620"
  },
  {
    "text": "It registers them together. And by registration,\nI mean it undoes",
    "start": "4666620",
    "end": "4671719"
  },
  {
    "text": "the motion part,\nwhich will otherwise blur out your point cloud. It registers them all together\nand basically accumulates",
    "start": "4671720",
    "end": "4681679"
  },
  {
    "text": "all those points\nand generates a very dense map of the environment. You can do SLAM with LiDAR,\nwith radar, with cameras.",
    "start": "4681680",
    "end": "4688830"
  },
  {
    "text": "You can do it with\nmany different sensors. It's extremely useful, but\nit also has its own caveats.",
    "start": "4688830",
    "end": "4697440"
  },
  {
    "text": "So for instance, this one\nI did it very late at night so that there was nobody\naround who was moving.",
    "start": "4697440",
    "end": "4703870"
  },
  {
    "text": "But if you did\nthis during the day where people are moving\naround and there's cyclists, what happens is\nthat you would get trails",
    "start": "4703870",
    "end": "4711420"
  },
  {
    "text": "for moving assets in the scene. Because of course, the\nunderlying assumption",
    "start": "4711420",
    "end": "4719610"
  },
  {
    "text": "of the SLAM framework is that\neverything is stationary. And with a rigid transform,\nyou can register everything",
    "start": "4719610",
    "end": "4725520"
  },
  {
    "text": "to a common reference frame. But if there is dynamic\nassets in the scene, those wouldn't\nregister and they would",
    "start": "4725520",
    "end": "4731850"
  },
  {
    "text": "look as these blurred trails. Still OK, but that's just\na limitation to note.",
    "start": "4731850",
    "end": "4739650"
  },
  {
    "text": "So the point is you can\ngenerate dense, almost like HD like live maps\nwith your sensors.",
    "start": "4739650",
    "end": "4748199"
  },
  {
    "text": "But you need to accumulate\nmultiple frames, which means it adds some\nlatency to the map that",
    "start": "4748200",
    "end": "4754500"
  },
  {
    "text": "is being generated. OK. So very quickly, different\nsensors, as I said,",
    "start": "4754500",
    "end": "4760840"
  },
  {
    "text": "can be used for robotic mapping. Sonar is a topic of discussion\nfor this chapter, which",
    "start": "4760840",
    "end": "4766290"
  },
  {
    "text": "stands for sound\nnavigation and ranging. And it uses ultrasonic\nbasically acoustic waves",
    "start": "4766290",
    "end": "4773100"
  },
  {
    "text": "to sense the environment\nand generate the map. There's radar. Stands for radio\ndetection and ranging.",
    "start": "4773100",
    "end": "4780420"
  },
  {
    "text": "It uses radio frequency\nelectromagnetic waves",
    "start": "4780420",
    "end": "4785580"
  },
  {
    "text": "to sense the environment\nand basically generate a 2D or a 3D map. Then there's LiDAR, stands for\nLight Detection and Ranging,",
    "start": "4785580",
    "end": "4793170"
  },
  {
    "text": "that transmits and receives\ntypically infrared laser beams. And with that, it generates\nbasically a map of the scene.",
    "start": "4793170",
    "end": "4800520"
  },
  {
    "text": "And finally there's a camera,\nwhich we are all familiar with. It just collects visible\nlight and it basically",
    "start": "4800520",
    "end": "4808380"
  },
  {
    "text": "constructs images of the scene. And from those images, with\nsome computer vision techniques",
    "start": "4808380",
    "end": "4815970"
  },
  {
    "text": "you can generate 3D\nmaps of the scene. So the first three, the\nsonar, radar, and LiDAR, these",
    "start": "4815970",
    "end": "4821940"
  },
  {
    "text": "are called active sensors\nbecause they actively send signals and\ncollect back the echoes",
    "start": "4821940",
    "end": "4826950"
  },
  {
    "text": "from the environment. The signals could be,\nagain, ultrasonic waves, radio frequency,\nelectromagnetic waves,",
    "start": "4826950",
    "end": "4833040"
  },
  {
    "text": "or optical\nelectromagnetic waves. So these three are\nactive sensors. And then camera, it just\ncollects visible light",
    "start": "4833040",
    "end": "4840270"
  },
  {
    "text": "from the environment. So in that sense,\nit's not active. So we are going to start\nwith sonar next time.",
    "start": "4840270",
    "end": "4848560"
  },
  {
    "text": "And again, study the physics\nand signal processing and the system level analysis.",
    "start": "4848560",
    "end": "4854199"
  },
  {
    "text": "And then we talk about\nradar and LiDAR and cameras. I think this is a\ngood place to quit,",
    "start": "4854200",
    "end": "4859350"
  },
  {
    "text": "and we'll continue next week. Any questions? All right. See you next time.",
    "start": "4859350",
    "end": "4865160"
  },
  {
    "start": "4865160",
    "end": "4869000"
  }
]