[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "So, every year, I let my students talk about the work that we've done during the year. So then, I'm left with just talking about whatever's on my mind.",
    "start": "0",
    "end": "7440"
  },
  {
    "text": "So today, so this year, I thought, uh, initially, I was going to talk about some, um, some new results in, uh,",
    "start": "7440",
    "end": "13275"
  },
  {
    "text": "cryptocurrencies but then I looked at the program and we actually have a fair number of cryptocurrency,",
    "start": "13275",
    "end": "18465"
  },
  {
    "text": "uh, talks coming up already, including the very next talk. So, what I decided to do is talk about something that's kind of been botherin- bothering me lately,",
    "start": "18465",
    "end": "25890"
  },
  {
    "text": "uh, which is this, this issue of crypto implementations. In particular- particularly bugs in crypto- crypto implementations.",
    "start": "25890",
    "end": "32970"
  },
  {
    "text": "Okay, so let me explain what I mean by that, uh, and to do that, first of all, I have to give a little bit of background.",
    "start": "32970",
    "end": "38480"
  },
  {
    "text": "So, uh, let's start with the kind of the basic, basic problem in cryptography. Right. So the basic, very,",
    "start": "38480",
    "end": "44280"
  },
  {
    "start": "43000",
    "end": "72000"
  },
  {
    "text": "very basic problem is basically we have two users, you know, we can't give a crypto talk and not mention Alice and Bob.",
    "start": "44280",
    "end": "50730"
  },
  {
    "text": "So, we have our two users, Alice and Bob, and they have a shared key, and Alice wants to send a secure message to Bob.",
    "start": "50730",
    "end": "56310"
  },
  {
    "text": "How does she do that? Yeah, this is like the crypto 101 problem. The simplest, simplest, uh,",
    "start": "56310",
    "end": "61649"
  },
  {
    "text": "aspect of crypto you can imagine, and you ask people, well how do you do this and, um, you'd be amazed on how many different answers you get.",
    "start": "61650",
    "end": "69225"
  },
  {
    "text": "Well, the correct answer is this notion called, uh, authenticated encryption, yeah,",
    "start": "69225",
    "end": "74280"
  },
  {
    "start": "72000",
    "end": "122000"
  },
  {
    "text": "which takes a bit of work to define what authenticated encryption actually means, but informally,",
    "start": "74280",
    "end": "79305"
  },
  {
    "text": "what authenticated encryption means is the following: there should be some notion of confidentiality so an adversary who sees many messages can't figure out, um,",
    "start": "79305",
    "end": "88065"
  },
  {
    "text": "any other information about plain texts from messages of our choice and there has to be a notion of integrity which is that even though I can send you lots of,",
    "start": "88065",
    "end": "96240"
  },
  {
    "text": "um, uh, sorry, even if I can see lots of messages that Alice sends to Bob,",
    "start": "96240",
    "end": "101250"
  },
  {
    "text": "the adversary cannot change the data that's em- embedded in these messages. Yeah. So, one is confidentiality,",
    "start": "101250",
    "end": "106350"
  },
  {
    "text": "the oth- other one is integrity. So that's, a- and again, there's a very formal definition that goes into, uh,",
    "start": "106350",
    "end": "111390"
  },
  {
    "text": "defining this precisely which I'm not going to torture you with, uh, here, although I listed some papers,",
    "start": "111390",
    "end": "116640"
  },
  {
    "text": "uh, if you want to learn more about this. So what are the constructions for, for authenticated encryption? Really, that's kind of a canonical construction,",
    "start": "116640",
    "end": "124275"
  },
  {
    "start": "122000",
    "end": "235000"
  },
  {
    "text": "it's called a generic composition of an encryption mechanism and an integrity mechanism.",
    "start": "124275",
    "end": "129649"
  },
  {
    "text": "Yeah, so this is called, uh, encrypt-then-MAC and the way it works is you have your plaintext,",
    "start": "129650",
    "end": "134909"
  },
  {
    "text": "uh, you encrypt the plaintext to get a ciphertext and then you compute an integrity tag on the ciphertext.",
    "start": "134910",
    "end": "141175"
  },
  {
    "text": "Okay, so, uh, the MAC, which is what's computing the integrity tag, is being applied to the ciphertext and that's",
    "start": "141175",
    "end": "146700"
  },
  {
    "text": "the thing that's being transmitted over the wire. Okay, so you can see why it's called encrypt-then-MAC because first you encrypt and then you MAC the message.",
    "start": "146700",
    "end": "154440"
  },
  {
    "text": "Uh, so here, I wrote up the algorithm very simply, you know, you encrypt your message m using the encryption key,",
    "start": "154440",
    "end": "160370"
  },
  {
    "text": "you compute a MAC of the ciphertext using the MAC key, and then you output the ciphertext and the integrity tag.",
    "start": "160370",
    "end": "166320"
  },
  {
    "text": "Very simple, yes. Uh, and then the way you de- the way you decrypt is you just do the obvious thing, you check the MAC.",
    "start": "166320",
    "end": "172215"
  },
  {
    "text": "If that doesn't verify you output bottom, else, you output the decryption. Yeah, nothing could be simpler,",
    "start": "172215",
    "end": "177750"
  },
  {
    "text": "and in fact, there are standards that do this. Uh, there's a well-known standard called Galois counter mode, this is now required in TLS 1.3.",
    "start": "177750",
    "end": "184860"
  },
  {
    "text": "In fact, TLS 1.3 is one of the big developments in crypto of this year. TLS 1.3 was just ratified.",
    "start": "184860",
    "end": "191055"
  },
  {
    "text": "It's a much, much, much nicer protocol than, um, than, uh, earlier versions of TLS.",
    "start": "191055",
    "end": "197430"
  },
  {
    "text": "It's going to be widely available, widely deployed now, and it's a big deal in the, in the world of, uh, crypto in this, in this past year.",
    "start": "197430",
    "end": "203955"
  },
  {
    "text": "And in fact, um, uh, the required method of encrypting in TLS 1.3 is using this GCM method,",
    "start": "203955",
    "end": "210150"
  },
  {
    "text": "although there are other methods that are supported as well. And the way that works is basically you encrypt using something called counter mode,",
    "start": "210150",
    "end": "216180"
  },
  {
    "text": "which we'll see later, and then you compute a MAC using something called a Carter-Wegman-MAC, which is a very fast MAC.",
    "start": "216180",
    "end": "221535"
  },
  {
    "text": "Okay, good. Uh, so, so very simple, what could possibly, uh, go wrong? Uh, although I have to tell you that there is more, uh,",
    "start": "221535",
    "end": "228690"
  },
  {
    "text": "bells and whistles to authenticate an encryption just beyond, um, you know, taking a key and a message.",
    "start": "228690",
    "end": "233790"
  },
  {
    "text": "Uh, in fact, there are other properties of authenticated encryption. For example, maybe you want to have something called associated data",
    "start": "233790",
    "end": "239985"
  },
  {
    "start": "235000",
    "end": "324000"
  },
  {
    "text": "which is data for which you can compute integrity, but you don't actually encrypt. Yes, so think of like packet headers in a packet, you don'-,",
    "start": "239985",
    "end": "248100"
  },
  {
    "text": "you want to encrypt the packet data but you don't want to encrypt the packet headers, so the headers will be ca- called associated data,",
    "start": "248100",
    "end": "254400"
  },
  {
    "text": "uh, and so, you know, they basically the associated data feeds into the, into the tag, into the integrity tag but itself,",
    "start": "254400",
    "end": "260579"
  },
  {
    "text": "it's not actually encrypted. That's one property you'd like to have as, uh, as authenticated encryption with associated data, it's called AEAD.",
    "start": "260580",
    "end": "268740"
  },
  {
    "text": "And you'd like, you'd also like to basically avoid randomness, you know, cryptographic libraries should not be generating randomness,",
    "start": "268740",
    "end": "275070"
  },
  {
    "text": "so you should be taking, uh, these nonces, uh, from the outside. Uh, and so, you'd like to encrypt using what's,",
    "start": "275070",
    "end": "281040"
  },
  {
    "text": "what's called the unique nonce, so a nonce that does not repeat. Uh, and if you do that, that's called nAEAD,",
    "start": "281040",
    "end": "286770"
  },
  {
    "text": "so nonce-based Authenticated Encryption with Associated Data. You see why we like acronyms, it's a lot of words.",
    "start": "286770",
    "end": "292020"
  },
  {
    "text": "And the way the algorithm works, again, very simple. Uh, basically you encrypt the message using the nonce that you were given,",
    "start": "292020",
    "end": "297990"
  },
  {
    "text": "and then you compute the integrity tag over the ciphertext and the associated data also using the nonce that you were given.",
    "start": "297990",
    "end": "304680"
  },
  {
    "text": "Okay? All very simple, uh, what could possibly go wrong? All right. So, that's how we, how we do,",
    "start": "304680",
    "end": "310260"
  },
  {
    "text": "uh, encryption in the real world. We have these, um, uh, yeah, we, uh, compute encrypt,",
    "start": "310260",
    "end": "315450"
  },
  {
    "text": "we encrypt the computer MAC, all, all done using associated data and nonces. It turns out there are even more properties you could",
    "start": "315450",
    "end": "321660"
  },
  {
    "text": "ask for, for authenticated encryption. So, for example, uh, I told you that these nonces better not repeat.",
    "start": "321660",
    "end": "327450"
  },
  {
    "start": "324000",
    "end": "427000"
  },
  {
    "text": "Well, in the real world, it turns out, uh, there are lots of examples where nonces accidentally do repeat.",
    "start": "327450",
    "end": "333000"
  },
  {
    "text": "For example, if you have a nonce implement as a counter and you reset your device, somehow the nonce resets to zero and then all of a sudden,",
    "start": "333000",
    "end": "339940"
  },
  {
    "text": "you're re-encrypting multiple messages using the same, uh, using the same value of the nonce. So, there's this, uh, requirement,",
    "start": "339940",
    "end": "345960"
  },
  {
    "text": "there's a desire to have what's called nonce-misuse resistance. This is called Misuse Resistance Authenticated Encryption, MR- MRAE.",
    "start": "345960",
    "end": "354270"
  },
  {
    "text": "Uh, and so the idea is that there is some security even if the nonce is repeated, and what I mean by some security,",
    "start": "354270",
    "end": "360479"
  },
  {
    "text": "I mean, that you ha-, you still have security as long as the messages are all distinct. Yeah, as long as you're not encrypting",
    "start": "360480",
    "end": "366450"
  },
  {
    "text": "the same message with the same nonce, everything is still fine. Yeah, so we even have ways of doing that, there's a very famous mode called Synthetic IV mode,",
    "start": "366450",
    "end": "374414"
  },
  {
    "text": "SIV, um, which I'll show you in a second, which actually, uh, achieves misuse resistance as well.",
    "start": "374415",
    "end": "380295"
  },
  {
    "text": "Then you might want to require something like online encryption and decryption, so online authenticated encryption.",
    "start": "380295",
    "end": "386009"
  },
  {
    "text": "So here, what happens is you'd like to be able to decrypt blocks of the ciphertext and release blocks one by one before you have seen the entire, entire ciphertext.",
    "start": "386010",
    "end": "394875"
  },
  {
    "text": "Yeah. So normally, you would collect the entire packet, decrypt the whole thing as a whole, as a whole, but in fact,",
    "start": "394875",
    "end": "400080"
  },
  {
    "text": "there are many cases where you'd like to release, uh, so your block might spend multiple packets,",
    "start": "400080",
    "end": "405920"
  },
  {
    "text": "but packets might come in one by one and you'd like to be able to release packets as they come in rather than waiting for the entire block to come in.",
    "start": "405920",
    "end": "412845"
  },
  {
    "text": "So, this is called online authenticated encryption, that's a little problematic to define, but we even have ways of, of doing that.",
    "start": "412845",
    "end": "419250"
  },
  {
    "text": "Yeah, so there's a lot of the story keeps, uh, keeps on going and there are more requirements for authenticated encryption you can imagine.",
    "start": "419250",
    "end": "425294"
  },
  {
    "text": "Now, it turns out there are lots of ways to build authenticated encryption, so I just put a, a picture here from a paper, uh,",
    "start": "425295",
    "end": "433800"
  },
  {
    "start": "427000",
    "end": "486000"
  },
  {
    "text": "by, uh, um, um, uh, Namprempre, Rogaway, and Shrimpton that shows you a whole bunch of constructions for authenticated encryption.",
    "start": "433800",
    "end": "439349"
  },
  {
    "text": "Now, it doesn't really matter what this slide is, um, I wanted to just mention quickly that, I just wanted to show you that there are lots of ways to build them,",
    "start": "439350",
    "end": "445590"
  },
  {
    "text": "I want to mention that this, uh, SIV method that I, I talked about is this picture over here, which what happens is you basically,",
    "start": "445590",
    "end": "451800"
  },
  {
    "text": "you can see you encrypt your message but the randomness, the IV, the randomness that you use to encrypt your message is",
    "start": "451800",
    "end": "458639"
  },
  {
    "text": "derived as a function of the nonce, the message, and the associated data. Yeah. So, that's kind of the,",
    "start": "458640",
    "end": "464175"
  },
  {
    "text": "you see the ciphertext and the tag coming out. This is a mode that's actually nonce-misuse resistance. Even if you do encrypt using the same nonce but with different messages, you see,",
    "start": "464175",
    "end": "472890"
  },
  {
    "text": "you end up with different IVs and that's why the mode still provides security. Okay. So, this was just a quick overview of authentic- authenticated encryption.",
    "start": "472890",
    "end": "480300"
  },
  {
    "text": "Now, let's get to the heart of what I wanted to tell you about. So, what I actually wanted to tell you about were problems with authenticated encryption.",
    "start": "480300",
    "end": "487500"
  },
  {
    "start": "486000",
    "end": "506000"
  },
  {
    "text": "Okay. So, how hard can it be, yeah, how hard can it be to implement encrypt-then-MAC? Yeah, I showed you the algorithm, literally two lines.",
    "start": "487500",
    "end": "494760"
  },
  {
    "text": "How hard can it possibly be? Well, let's look. So, um, right, so, fine.",
    "start": "494760",
    "end": "501645"
  },
  {
    "text": "So, let's look at, uh, our first example. So, our first example is, is a library, uh, or rather, uh,",
    "start": "501645",
    "end": "507615"
  },
  {
    "start": "506000",
    "end": "642000"
  },
  {
    "text": "a facility called RNCryptor, uh, uh, that basically provides key wrap capabilities,",
    "start": "507615",
    "end": "513750"
  },
  {
    "text": "uh, for passwords and things like that. Yeah. So, you can imagine, uh, here you have your, uh, the, basically the RNCryptor function takes a plaintext",
    "start": "513750",
    "end": "521055"
  },
  {
    "text": "and a key and it goes ahead and encrypts the plaintext using the key. Now, you know I have to say th- the",
    "start": "521055",
    "end": "527125"
  },
  {
    "text": "mistakes that I'm going to show you here happen on a lot of products. Here, I'm just going to, uh, randomly choose, uh, a few samples to show from, to show you. Uh.",
    "start": "527125",
    "end": "535020"
  },
  {
    "text": "Um, okay, so what's the problem here? So, what's the issue with RNCryptor? Let's see how it works first of all.",
    "start": "535020",
    "end": "540305"
  },
  {
    "text": "So, it has a key for the encryption and a key for the Mac, just as normal- just as you're supposed to do. And here you have a message that you try to encrypt.",
    "start": "540305",
    "end": "547640"
  },
  {
    "text": "Okay, so how does RNCryptor version one, how does it actually encrypt? Well so it chooses a random IV,",
    "start": "547640",
    "end": "553485"
  },
  {
    "text": "just like you're supposed to do for, for, for encryption, and then it uses what's called um- well let's- let's- let's say that it uses countermode for a minute.",
    "start": "553485",
    "end": "561060"
  },
  {
    "text": "So, basically it chooses a random IV and then encrypts the IV, encrypts the IV plus one, encrypts the IV plus two and so on and so forth that generates a random stream of data.",
    "start": "561060",
    "end": "570600"
  },
  {
    "text": "Yeah, so it generates a random pad which then gets X over the message, and this is the ciphertext. Yes, you can see the IV plus,",
    "start": "570600",
    "end": "577545"
  },
  {
    "text": "a sort of this one time pad XORed with the message. So, far so good. So, that's the encryption parts of RNCryptor.",
    "start": "577545",
    "end": "584885"
  },
  {
    "text": "So, that's the encrypt. We're supposed to do the encrypt-then-MAC. The next thing we're supposed to do is compute a MAC. Well, so here's how we compute the MAC.",
    "start": "584885",
    "end": "591440"
  },
  {
    "text": "We take the ciphertext and we MAC it, and we get our integrity tag which we append to the ciphertext.",
    "start": "591440",
    "end": "597440"
  },
  {
    "text": "Now, you look at this and there's actually something fundamentally wrong with this construction.",
    "start": "597440",
    "end": "602925"
  },
  {
    "text": "So, let's see, can someone tell me what's the problem with this construction? What's -what's- what looks fishy here? [inaudible]",
    "start": "602925",
    "end": "610010"
  },
  {
    "text": "What? Somebody said it. [inaudible] Ah. Exactly. Exactly. You notice that the MAC is encrypting",
    "start": "610010",
    "end": "615990"
  },
  {
    "text": "the cipher- is computing an integrity tag over the ciphertext, but it's ignoring the IV.",
    "start": "615990",
    "end": "621584"
  },
  {
    "text": "The IV is actually part of the ciphertext that was- prev- conf- generated by the encryption algorithm,",
    "start": "621585",
    "end": "627010"
  },
  {
    "text": "but somehow the IV did not make it into the- uh, integrity tag computation.",
    "start": "627010",
    "end": "632770"
  },
  {
    "text": "Let's see what goes wrong, in fact, you do that. So, yes -ah you know- I will make that uh, thing for you- spin for you again,",
    "start": "632770",
    "end": "640080"
  },
  {
    "text": "so you see it's actually missing. So, let's see what goes wrong if you forget to include the IV in your tag.",
    "start": "640080",
    "end": "645585"
  },
  {
    "start": "642000",
    "end": "782000"
  },
  {
    "text": "Right so here, you can see that only the ciphertext as affecting the tag. Well in fact RNCryptor using- uses a mode called CBC mode.",
    "start": "645585",
    "end": "653795"
  },
  {
    "text": "Let me- it doesn't really matter what CBC is. Let me just show you how decryption works, basically here you decrypt C0 and then you X over the IV, you get M0.",
    "start": "653795",
    "end": "662560"
  },
  {
    "text": "Then you keep on decrypting and, and so on and so forth. Yeah. So, um, essentially this is how decryption works.",
    "start": "662560",
    "end": "668015"
  },
  {
    "text": "Now, you notice the fact that the IV is not included in the MAC, means the attacker can change the IV to whatever it",
    "start": "668015",
    "end": "674580"
  },
  {
    "text": "wants and that will never be detected by the decryptor. Right? So, the IV can be whatever the heck the attacker wants,",
    "start": "674580",
    "end": "681450"
  },
  {
    "text": "the decryptor will never know that anything is wrong with this. But, look, you can see the IV is being XORed, er, and into this- m- into this value here and that gives you M0,",
    "start": "681450",
    "end": "689750"
  },
  {
    "text": "which basically means the attacker can set the IV to whatever he wants and have full control of what's,",
    "start": "689750",
    "end": "695860"
  },
  {
    "text": "um, what the first block of the plaintext is. Yeah, so if you're encrypting a password,",
    "start": "695860",
    "end": "701125"
  },
  {
    "text": "I can essentially modify the IV and make the decrypted password be what, uh, the, what- uh, ever- whatever I want.",
    "start": "701125",
    "end": "707385"
  },
  {
    "text": "Yeah. So, that's kind of a pretty serious breach of integrity in that we can make- we have full cont- the attacker has",
    "start": "707385",
    "end": "713699"
  },
  {
    "text": "full control of what the first block of the decryption looks like. And by the way there's similar problems with, uh, with countermode.",
    "start": "713700",
    "end": "720000"
  },
  {
    "text": "Okay, so that's a- an exact, a classic mistake in a classic issue in i- implementing encrypt-then-MAC.",
    "start": "720000",
    "end": "726320"
  },
  {
    "text": "You still have to know, you know that everything needs to be MACed. Okay, so what do you do about this? What should we do? Well of course this has been fixed- um, uh,",
    "start": "726320",
    "end": "733209"
  },
  {
    "text": "this has now been fixed is RNCryptor V3 which actually does do the right thing. But, you know the problem with crypto is once it's deployed,",
    "start": "733210",
    "end": "740975"
  },
  {
    "text": "there's a very difficult migration path. In that um, you realize everything that is already encrypted,",
    "start": "740975",
    "end": "747964"
  },
  {
    "text": "you can't decrypt it unless you have the decryption key. So, if you wanna move to a new encryption algorithm,",
    "start": "747965",
    "end": "753455"
  },
  {
    "text": "you have to wait for someone to give you the decryption key so that you can re-encrypt using the new RNCryptor.",
    "start": "753455",
    "end": "759190"
  },
  {
    "text": "Yeah, so migration is always difficult with crypto and so, um, um, it sounds like, you know, so basically,",
    "start": "759190",
    "end": "765620"
  },
  {
    "text": "you know, this is, this is one of these RNCrypto is one of these things you want to get right the first time, otherwise you're gonna have issues later on.",
    "start": "765620",
    "end": "772930"
  },
  {
    "text": "Okay, so this is the first example problem I wanted to, uh, to bring out, um, yet again, you need to know what to compute a MAC over.",
    "start": "772930",
    "end": "780370"
  },
  {
    "text": "The second example I wanna to talk about is actually a made up example, but it's actually an example- it's an abstract version of a problem that",
    "start": "780370",
    "end": "787780"
  },
  {
    "start": "782000",
    "end": "942000"
  },
  {
    "text": "happened in my favorite protocol to pick on which is WEP. WEP is the 802.11b Encryption protocol.",
    "start": "787780",
    "end": "793730"
  },
  {
    "text": "I love this protocol because it pretty much made every possible mistake in the book. Yeah every time I wanna show an example of how not to do something, I always use WEP.",
    "start": "793730",
    "end": "801665"
  },
  {
    "text": "So, it's not too surprising that I can use WEP also as- as my second example here.",
    "start": "801665",
    "end": "806690"
  },
  {
    "text": "So, let's see how abstractly WEP works and see if someone can figure out what the pro- what the attack is.",
    "start": "806690",
    "end": "812415"
  },
  {
    "text": "Okay, so abstractly-again this is not exactly how WEP works, but this is a way for me to explain the attack.",
    "start": "812415",
    "end": "817860"
  },
  {
    "text": "So, the problem here- and by the way, we're gonna build on this attack for another attack that's coming in just a second, so please pay attention.",
    "start": "817860",
    "end": "824155"
  },
  {
    "text": "Okay, so, uh, right, so what's the, uh, ho- how does WEP work a- abstractly. So, we have our message, to the message we're gonna append,",
    "start": "824155",
    "end": "833300"
  },
  {
    "text": "uh, uh, parity bits. Yeah, so, we're gonna do integrity by appending a parity, a checksum basically to the message,",
    "start": "833300",
    "end": "839935"
  },
  {
    "text": "and then encrypt the message and the checksum. And let's pretend that the checksum that we added is",
    "start": "839935",
    "end": "845250"
  },
  {
    "text": "literally just one single parity bit. That's it. All right so we have our- no",
    "start": "845250",
    "end": "850720"
  },
  {
    "text": "we do the same thing as we did in countermode, we encrypt IV. IV plus one, IV plus two, we have our random IV and we have our ciphertext and that's what comes",
    "start": "850720",
    "end": "857950"
  },
  {
    "text": "out of WEP encryption. So, far so, good? Okay, so that's how WEP encryption works.",
    "start": "857950",
    "end": "864274"
  },
  {
    "text": "Yeah, so here's our parity bits that we just added. The way decr-decryption work of course is you decrypt,",
    "start": "864275",
    "end": "870619"
  },
  {
    "text": "you check if the parity bit is correct and if it's incorrect you output error, and if it's correct you output the actual plaintext.",
    "start": "870619",
    "end": "877130"
  },
  {
    "text": "So, that's supposed to prevent the adversary from mucking around with the ciphertext.",
    "start": "877130",
    "end": "882785"
  },
  {
    "text": "But, of course you can easily see that it doesn't, but in fact there's actually a real attack that comes here.",
    "start": "882785",
    "end": "888690"
  },
  {
    "text": "It's not just about, uh, um, changing ciphertext, it's turns out you can actually completely",
    "start": "888690",
    "end": "894120"
  },
  {
    "text": "decrypt a ciphertext that's encrypted this way. Yeah, you can completely decrypt, and let's-let's see how.",
    "start": "894120",
    "end": "899750"
  },
  {
    "text": "So, actually I'm gonna ask you to figure out how yourself. I'll give you a hint, the attack is called ChopChop attack.",
    "start": "899750",
    "end": "907060"
  },
  {
    "text": "That should give you a hint for how this thing works. So, let's see, so can anybody suggest a way to attack an encrypted message of this form.",
    "start": "907060",
    "end": "915505"
  },
  {
    "text": "What, what would you do? Yeah, what would you do? So, um, yeah, you have this parity bit at",
    "start": "915505",
    "end": "921220"
  },
  {
    "text": "the end and you'd like to be able to recover the bits of the message, well, you're gonna recover them one by one. It's like a Hollywood movie where you know",
    "start": "921220",
    "end": "927410"
  },
  {
    "text": "this ciphertext kind of decrypts one bit at a time. So, let me show you. Let me- yeah, yeah, yeah, Kevin.",
    "start": "927410",
    "end": "933430"
  },
  {
    "text": "Shuffle the message sequence. Shuffle, ah, okay shuffle was a good, yeah shuffle was a- well actually if you just permute the bits,",
    "start": "933430",
    "end": "940674"
  },
  {
    "text": "the parity is still gonna work, right? The parity will be unchanged. So, the message will still decrypt and you're not- as",
    "start": "940674",
    "end": "946560"
  },
  {
    "start": "942000",
    "end": "1093000"
  },
  {
    "text": "an observer you're not gonna be able to tell what the bits were. So, permuting is not quite the right thing,",
    "start": "946560",
    "end": "952330"
  },
  {
    "text": "it's called Chop Chop for a reason. It's called ChopChop because we're gonna delete bits of the message.",
    "start": "952330",
    "end": "957390"
  },
  {
    "text": "So, I imagine we delete the last bits of the ciphertext, literally just delete it.",
    "start": "957390",
    "end": "962785"
  },
  {
    "text": "So, I te- uh, so I record a ciphertext that you sent, I delete the last bits, and then I forward that to the, to the router.",
    "start": "962785",
    "end": "969865"
  },
  {
    "text": "Now what's the router gonna do? Well, the router is gonna try and decrypt this, and then he's gonna compute a parity bit of",
    "start": "969865",
    "end": "976240"
  },
  {
    "text": "the resulting plaintext. Now, what's gonna happen? If the bit that I deleted had- was equal to one,",
    "start": "976240",
    "end": "983235"
  },
  {
    "text": "that means that the parity of the remaining message is gonna be invalid. It's the, the last bit here is not gonna be the parity of the previous bits.",
    "start": "983235",
    "end": "991690"
  },
  {
    "text": "Yeah, because I deleted it- if the bit was one that means everything that came before it was odd.",
    "start": "991690",
    "end": "997260"
  },
  {
    "text": "Right? So, if I delete, so the parity of this whole thing is gonna be odd, which means, uh, that-that-that-that we'll get an error back.",
    "start": "997260",
    "end": "1004225"
  },
  {
    "text": "If bit is equal to zero, the router will accept the packet. Okay, so you can see by sending this message as modified,",
    "start": "1004225",
    "end": "1010680"
  },
  {
    "text": "this chopped message to the router and observing whether the router rejected or accepted, I can get the last bit of the message.",
    "start": "1010680",
    "end": "1017845"
  },
  {
    "text": "Okay, so I just got one bit, maybe the parity bit. Maybe that's not so interesting to me, but that's what I got so far.",
    "start": "1017845",
    "end": "1023920"
  },
  {
    "text": "But, we're not done. What's the next thing that I'm gonna do? [NOISE] Chop again, delete another bit, exactly.",
    "start": "1023920",
    "end": "1030045"
  },
  {
    "text": "So, now, I'm going to delete two bits of the message. And the last two bits, of course, you know, if the message is valid, uh,",
    "start": "1030045",
    "end": "1036169"
  },
  {
    "text": "then the XOR of the last two bits should be equal to the XOR of all the remain- or all the previous bits.",
    "start": "1036170",
    "end": "1042280"
  },
  {
    "text": "Right? So, again, if I get error, that means that the last two bits XOR to 1. If the router accept,",
    "start": "1042280",
    "end": "1047660"
  },
  {
    "text": "that means that the last two bits XOR to 0. But I already know b. So, now that I know the XOR of the last two bits and I already know b,",
    "start": "1047660",
    "end": "1054320"
  },
  {
    "text": "that gives me the most significant bits of the actual plaintext data. Yeah, and I can iterate this over and over and over again",
    "start": "1054320",
    "end": "1061155"
  },
  {
    "text": "and kind of recover the bits of the message one by one. It's kind of a cool attack, yeah. That I just bombard the router with a bunch of,",
    "start": "1061155",
    "end": "1068160"
  },
  {
    "text": "uh, a bunch of packets, I see whether it rejects or accepts and, uh, that allows me to recover the bits one by one.",
    "start": "1068160",
    "end": "1074360"
  },
  {
    "text": "So this can be made into a real attack. Like I said, that's called a ChopChop attack, um, on WEP.",
    "start": "1074360",
    "end": "1079390"
  },
  {
    "text": "Okay, so, that's another. So you never ever do authenticated encryption just by con- concatenating parity bits.",
    "start": "1079390",
    "end": "1085320"
  },
  {
    "text": "That that just doesn't work, fundamentally. Okay. So, now let's see this in another context, uh, which is, uh, what what's called, um, signcryption.",
    "start": "1085320",
    "end": "1093345"
  },
  {
    "start": "1093000",
    "end": "1314000"
  },
  {
    "text": "So let's change gear and let's talk about signcryption. So, signcryption is basically what's called authenticated encryption but in the public key settings.",
    "start": "1093345",
    "end": "1100335"
  },
  {
    "text": "So, when not- when Alice and Bob don't have a shared key but rather they have, uh, a public key that they want to encrypt with.",
    "start": "1100335",
    "end": "1107215"
  },
  {
    "text": "Okay. So, sometimes by the way, this is called Zero-Round Trip Time mutual authenticated, you know, this is has other names,",
    "start": "1107215",
    "end": "1113530"
  },
  {
    "text": "um, but the names doesn't matter so much for, for our talk today. Okay, so what's the idea here? So, here, the sender wants to send a message to the receiver.",
    "start": "1113530",
    "end": "1121660"
  },
  {
    "text": "So, Alice wants to send a message to Bob. All Alice has is Bob's public key yeah,",
    "start": "1121660",
    "end": "1127360"
  },
  {
    "text": "so she wants to send the message. Um, maybe a server is gonna, um, store this message, um, because Bob is not currently online.",
    "start": "1127360",
    "end": "1134130"
  },
  {
    "text": "When Bob comes online, um, the server is going to send a message to Bob and Bob is going to decrypt. Okay? So this is a typical chat systems.",
    "start": "1134130",
    "end": "1140400"
  },
  {
    "text": "So in a chat system, I send my encrypted, um, you know, message to the server, when Bob comes online,",
    "start": "1140400",
    "end": "1146410"
  },
  {
    "text": "the server sends the message to Bob and Bob decrypts. Okay. Good. So, the setting here is that Alice has",
    "start": "1146410",
    "end": "1152014"
  },
  {
    "text": "a signing key that she's gonna sign the message to say that the message really came from her. There actually is a signing key and identity,",
    "start": "1152015",
    "end": "1158529"
  },
  {
    "text": "she has Bob's public key in her identity. The receiver has Alice's public key in her identity.",
    "start": "1158530",
    "end": "1164620"
  },
  {
    "text": "He has a decryption key and an identity as well. Okay. So, Alice is going to sign to prove that messages came from her and whoop,",
    "start": "1164620",
    "end": "1172230"
  },
  {
    "text": "and Bob is gonna decrypt to be able to recover the message. Yeah, so here's what an encryption looks like, it's kind of a mess.",
    "start": "1172230",
    "end": "1178735"
  },
  {
    "text": "Yes, so you can generate public key, secret keys and then the encryption takes all these identities and secret keys and public keys and a message and produces a ciphertext.",
    "start": "1178735",
    "end": "1186370"
  },
  {
    "text": "You notice Alice is signing and Alice has her secret key and Bob's public key.",
    "start": "1186370",
    "end": "1192360"
  },
  {
    "text": "The decryptor, Bob, has Alice's public key and, um, Bob's secret key and that's how he decrypts.",
    "start": "1192360",
    "end": "1198625"
  },
  {
    "text": "Okay? That's, that's, um, signcryption just the syntax of how signcryption actually works. Yeah. So, the signcryption as I,",
    "start": "1198625",
    "end": "1204770"
  },
  {
    "text": "as I said, it's a common mechanism that's used, um, in store and forward systems when you need to have both confidentiality and source authentication.",
    "start": "1204770",
    "end": "1212440"
  },
  {
    "text": "So, again very commonly used mechanism. And there's a security notion, again, you have to have, um, here, you know, it doesn't matter,",
    "start": "1212440",
    "end": "1218660"
  },
  {
    "text": "it really matter what the properties are. You have to have confidentiality against an active adversary, you have to have integrity and you need to have forward secrecy",
    "start": "1218660",
    "end": "1225840"
  },
  {
    "text": "meaning that if one side is compromised for secrecy, um, in our case means even if the sender is compromised, um, you know, of,",
    "start": "1225840",
    "end": "1232710"
  },
  {
    "text": "um, past messages or not, um, are not exposed. Okay. So, be just, uh,",
    "start": "1232710",
    "end": "1238445"
  },
  {
    "text": "recovering the signing key should not expose previous messages. Okay, and there are some other requirements as well.",
    "start": "1238445",
    "end": "1243945"
  },
  {
    "text": "So this is very informal. So far so good. Yeah. So, that's how, that's what's signcryption is. Okay, let's continue.",
    "start": "1243945",
    "end": "1250400"
  },
  {
    "text": "So then, um, how do you construct signcryption. Well again, there's a generic composition construction for signcryption.",
    "start": "1250400",
    "end": "1255740"
  },
  {
    "text": "You can do what's called encrypt then sign. When you encrypt your message and then you sign the ciphertext, yeah,",
    "start": "1255740",
    "end": "1262110"
  },
  {
    "text": "you have to use identities embedded appropriately and then you output the ciphertext in the signature. That's one way to do it.",
    "start": "1262110",
    "end": "1268260"
  },
  {
    "text": "Or you can do sign then encrypt where you sign the message first and then you encrypt the ciphertext. And I can ask you like which one is,",
    "start": "1268260",
    "end": "1274470"
  },
  {
    "text": "which one of these do you think you think is secure? Yeah, which one would you rather use in practice? Which one is secure?",
    "start": "1274470",
    "end": "1279975"
  },
  {
    "text": "Well, it turns out actually both are secure, uh, assuming the underlying primitives are secure? Yes, so for signcryption actually,",
    "start": "1279975",
    "end": "1285750"
  },
  {
    "text": "the order is not, um, we're not that sensitive to the order. However, you have to implement things correctly.",
    "start": "1285750",
    "end": "1291665"
  },
  {
    "text": "Yeah, so even when you do composition in crypto generic composition, you have to implement things correctly. And so, let me show you what I consider one of",
    "start": "1291665",
    "end": "1298220"
  },
  {
    "text": "the most beautiful mistakes that I've seen in, in crypto. And here, again, I'm just picking on one product.",
    "start": "1298220",
    "end": "1304810"
  },
  {
    "text": "Um, but the only reason I'm, um, presenting this product is because the, I really like the mistake as it's a very good instructive mistake to learn from.",
    "start": "1304810",
    "end": "1312015"
  },
  {
    "text": "Right? This is how we all learn. Uh, and so, let me give, uh, this mistake that, um,",
    "start": "1312015",
    "end": "1317280"
  },
  {
    "start": "1314000",
    "end": "1461000"
  },
  {
    "text": "was that affected iMessage just as a result by, uh, Garmin, Green, uh, Kaptchuk, Miers, and Rushanan.",
    "start": "1317280",
    "end": "1325075"
  },
  {
    "text": "Um, and so, let's see. So the mistake is the following. So, they started off basically by taking the message and adding a parity bit to it,",
    "start": "1325075",
    "end": "1333190"
  },
  {
    "text": "the parity bit or actually a checksum. The checksum was not intended for security purposes. It was just basically to detect simple errors.",
    "start": "1333190",
    "end": "1339875"
  },
  {
    "text": "Yeah, so, let's pretend like all we have is a parity bit just for simplicity. The mistake is a little different though.",
    "start": "1339875",
    "end": "1345235"
  },
  {
    "text": "So let's see. So, what they did is essentially they did, they encrypted. So, here they encrypt, um, the, um,",
    "start": "1345235",
    "end": "1352620"
  },
  {
    "text": "the the plaintext using while using counter mode, again, just like we saw before.",
    "start": "1352620",
    "end": "1357750"
  },
  {
    "text": "So the encrypt IV IV plus one and IV plus two, encrypt the ciphertext and they encrypt",
    "start": "1357750",
    "end": "1363210"
  },
  {
    "text": "the plaintext and they get the actual ciphertext. Okay? So far so good. And then, remember, we have to do encrypt then sign.",
    "start": "1363210",
    "end": "1370125"
  },
  {
    "text": "Okay? But the, but then what happened was the, the entire ciphertext was then signed. All right.",
    "start": "1370125",
    "end": "1377520"
  },
  {
    "text": "So what is the problem with this? The problem here is, remember I told you that you can do encrypt then sign",
    "start": "1377520",
    "end": "1383899"
  },
  {
    "text": "as long as the underlying encryption primitive is secure. The underlying encryption primitive needs to provide authenticated encryption.",
    "start": "1383900",
    "end": "1391295"
  },
  {
    "text": "But let's think back. Authenticated encryption means that you have to encrypt then compute",
    "start": "1391295",
    "end": "1396919"
  },
  {
    "text": "a MAC then compute an integrity checksum and you have to sign the whole thing. That's again you you were supposed to do encrypt,",
    "start": "1396920",
    "end": "1403780"
  },
  {
    "text": "MAC, and sign the whole thing. And the logic, I- I imagine the logic that was kind of, um,",
    "start": "1403780",
    "end": "1409015"
  },
  {
    "text": "used in deriving this mode is to say, \"Look, the whole data is already signed.\" If the whole data is signed,",
    "start": "1409015",
    "end": "1415195"
  },
  {
    "text": "we don't need a MAC on the data. We don't need an additional integrity checksum. Yeah, it looks like the signature provides the integrity checksum that we,",
    "start": "1415195",
    "end": "1422930"
  },
  {
    "text": "um, that we wanted, um, for integrity. Yeah, so the point was, um, the signature provides authentication so there's no need for a MAC.",
    "start": "1422930",
    "end": "1430539"
  },
  {
    "text": "Yeah, so, we can simplify, uh, and get rid of the MAC. Yeah, sounds reasonable. Signature provides integrity.",
    "start": "1430540",
    "end": "1436285"
  },
  {
    "text": "Why do we need to, to have a MAC as well? Why do we have a separate integrity check, checksum? Well, it turns out, um,",
    "start": "1436285",
    "end": "1442855"
  },
  {
    "text": "this is completely broken. Yeah. So this has to be fixed. And so, let me show you the attack.",
    "start": "1442855",
    "end": "1448880"
  },
  {
    "text": "Again, by now we have all the tools to understand the attack. Like I said, it's such a beautiful, um, mistake that it's a great learning experience.",
    "start": "1448880",
    "end": "1456169"
  },
  {
    "text": "And so, um, let's look at the, let's look at the attack, actually I don't know. Does anybody, well, you know, I won't torture you.",
    "start": "1456170",
    "end": "1461860"
  },
  {
    "start": "1461000",
    "end": "1637000"
  },
  {
    "text": "Let me just show you the attack. Yeah. So here's the, here's the problem, right. So we have this, uh,",
    "start": "1461860",
    "end": "1467050"
  },
  {
    "text": "we have a ciphertext and we have a signature on the ciphertext. What the attacker is going to do is the following.",
    "start": "1467050",
    "end": "1472675"
  },
  {
    "text": "The difference between a signature and a MAC is fundamental. Right? A MAC, I can only compute if I know the secret key.",
    "start": "1472675",
    "end": "1479385"
  },
  {
    "text": "A signature, I can compute with any signing key that I want. So what I'm going to do as an attacker, I just, you know,",
    "start": "1479385",
    "end": "1486070"
  },
  {
    "text": "I- I- I intercepted a message, encrypted message that you sent. As an attacker, what I'm going to do is I'm going to remove",
    "start": "1486070",
    "end": "1493220"
  },
  {
    "text": "the signature that you sent and instead, I'm going to put in my own signature. Okay? I'm going to put in my own signature.",
    "start": "1493220",
    "end": "1500460"
  },
  {
    "text": "So, this is a signature you see by using the attacker's secret key. So far- so far so good.",
    "start": "1500460",
    "end": "1506530"
  },
  {
    "text": "Now, the attackers are going to send this whole ciphertext over to the server. The server is gonna say, \"Hey, this is perfectly fine.",
    "start": "1506530",
    "end": "1513015"
  },
  {
    "text": "This is a perfectly fine signed message.\" So, we can decrypt and recover the plaintext. No problem at all.",
    "start": "1513015",
    "end": "1519059"
  },
  {
    "text": "However, this now enables a ChopChop attack. Yeah, because now, I can start playing the games,",
    "start": "1519060",
    "end": "1524880"
  },
  {
    "text": "same games I did before by basically removing, you know, one bit of the ciphertext signing that and then sending that to",
    "start": "1524880",
    "end": "1532100"
  },
  {
    "text": "the server and the parity bit tells me if the server accepts or rejects, I know what the, what the bit is.",
    "start": "1532100",
    "end": "1537615"
  },
  {
    "text": "And I can iterate that over and over again and recover the bit, the message one the plaintext, one bit at a time.",
    "start": "1537615",
    "end": "1543440"
  },
  {
    "text": "[NOISE] Yes. So, the the point here is if you, yeah, somebody had a question.",
    "start": "1543440",
    "end": "1548789"
  },
  {
    "text": "[inaudible] key or sign. Yeah. Instead of some [inaudible] signature.",
    "start": "1548790",
    "end": "1555000"
  },
  {
    "text": "No, no, no. The server, so basically, this is a legitimate user. So the attacker basically is a legitimate user of the system.",
    "start": "1555190",
    "end": "1561975"
  },
  {
    "text": "The server just thinks, \"Oh, this is a message from Charlie,\" instead of, instead of Alice. Yeah. So, fine, the server accepts this is the message",
    "start": "1561975",
    "end": "1569260"
  },
  {
    "text": "from Charlie that's intended for Bob. Yeah, and so the server accepts. Uh, but if the parity bit fails,",
    "start": "1569260",
    "end": "1575800"
  },
  {
    "text": "then the server will reject. Yeah? Does the identity of this memo mismatch?",
    "start": "1575800",
    "end": "1581530"
  },
  {
    "text": "Uh, okay. So, there's ways around this, no. So, actually there's, there are ways around this. Probably, you're saying basically is that-.",
    "start": "1581530",
    "end": "1587465"
  },
  {
    "text": "This is the, this is the recipient's identity by the way. So, this will this will still be correct. It's a message intended for Bob.",
    "start": "1587465",
    "end": "1592840"
  },
  {
    "text": "It's not the sender's identity. Yeah. So, if you basically assume the attacker is a partner instead of-.",
    "start": "1592840",
    "end": "1599865"
  },
  {
    "text": "An attacker basically is another user in the system. Yeah, so you have a chat system- [inaudible] Absolutely. Absolutely. You've a chat system",
    "start": "1599865",
    "end": "1606299"
  },
  {
    "text": "and the attacker basically registered as a valid user in the system. Yeah, yeah. That's a, that's a very important point for this to work.",
    "start": "1606300",
    "end": "1612414"
  },
  {
    "text": "Okay, so the point is, the fact that the attacker can create new valid ciphertext allows him to do the ChopChop attack and completely decrypt the, the ciphertext.",
    "start": "1612415",
    "end": "1620790"
  },
  {
    "text": "Yeah, I don't know, this is like a really, this is a really beautiful attack that's, uh, that shows the generic composition is,",
    "start": "1620790",
    "end": "1628635"
  },
  {
    "text": "you know, you have to get it right. It's a little, yeah, it's a little tricky. You have to understand what the theorems say and, and,",
    "start": "1628635",
    "end": "1633920"
  },
  {
    "text": "and use them, use them as, as is. Okay so what are the lessons in our, in our list? Basically, inventing crypto modes is kind of tricky.",
    "start": "1633920",
    "end": "1641825"
  },
  {
    "start": "1637000",
    "end": "1700000"
  },
  {
    "text": "You can see that there are lots of ways to get it right. To be honest, you know, in the second decade of the 21st century,",
    "start": "1641825",
    "end": "1648434"
  },
  {
    "text": "um, I would hope that we not make mistakes like this. So, um, all I can say is, you know,",
    "start": "1648435",
    "end": "1655200"
  },
  {
    "text": "we need more crypto reviews, um, obviously, tried to stick to standards because those standards have been vetted well.",
    "start": "1655200",
    "end": "1661595"
  },
  {
    "text": "Um, and the bottom line is as usual inventing your own crypto,",
    "start": "1661595",
    "end": "1666725"
  },
  {
    "text": "crypto modes in this case is, is, a tricky business. And the last thing that I'll mention is, in fact, there are, there are,",
    "start": "1666725",
    "end": "1672720"
  },
  {
    "text": "in most cases, these generic composition results are not the best ones to use. There typically are better modes if you are,",
    "start": "1672720",
    "end": "1679420"
  },
  {
    "text": "um, willing to use this. If you're willing, if you, if you understand your problem better, you can typically com- typically come up with",
    "start": "1679420",
    "end": "1685429"
  },
  {
    "text": "better constructions than generic composition. And so, as a last thing, I'll say as just a completely shameless,",
    "start": "1685430",
    "end": "1691855"
  },
  {
    "text": "shameless plug and that if you want to learn more about all this and learn how to how to argue and prove security of these crypto modes,",
    "start": "1691855",
    "end": "1699960"
  },
  {
    "text": "then, you know, please take a look at our, uh, free textbook. Um, so, it's a graduate course in Applied Cryptography,",
    "start": "1699960",
    "end": "1705730"
  },
  {
    "start": "1700000",
    "end": "2172000"
  },
  {
    "text": "um, that I've wrote with Victor Shoup. It's free textbook available at cryptobook.us, cryptobook.us.",
    "start": "1705730",
    "end": "1711985"
  },
  {
    "text": "And, uh, this is still in draft modes. Uh, it's fairly complete but there are still, um, I imagine there are still typos and mistakes.",
    "start": "1711985",
    "end": "1718655"
  },
  {
    "text": "So if you find a typo or a mistake in the book, please send us a note and we'll correct it right away.",
    "start": "1718655",
    "end": "1724230"
  },
  {
    "text": "So thank you very much, that's what I have to say and I'll stop here. Thanks. [APPLAUSE].",
    "start": "1724230",
    "end": "1733875"
  },
  {
    "text": "Any questions? If not, then we have- I guess they were- oh yeah, question. Yes, please.",
    "start": "1733875",
    "end": "1739174"
  },
  {
    "text": "Well, you're absolutely correct, I'm not arguing any- any of your points. My question is two fold.",
    "start": "1739175",
    "end": "1745294"
  },
  {
    "text": "One, could this have be- could any actual attack be prevented at the server end by refusing a ChopChop attack,",
    "start": "1745295",
    "end": "1754910"
  },
  {
    "text": "by refusing multiple attempts, and are you aware of any actual real world,",
    "start": "1754910",
    "end": "1761960"
  },
  {
    "text": "uh, implications of these errors? You mean has anyone actually tried to do the attacks in the real world?",
    "start": "1761960",
    "end": "1768650"
  },
  {
    "text": "Or are you aware of any attacks that actually succeeded or even attempted? [OVERLAPPING]. Well, so on-",
    "start": "1768650",
    "end": "1774540"
  },
  {
    "text": "-and, and, and, and could the implementation at the server end the- stop",
    "start": "1774540",
    "end": "1782730"
  },
  {
    "text": "such attacks where although you are correct and it's wrong, it may not be any real world implication, whatsoever?",
    "start": "1782730",
    "end": "1791135"
  },
  {
    "text": "I think that's a- that's a great question. Uh, it's a great question. So, the attacks on WEP are real.",
    "start": "1791135",
    "end": "1796210"
  },
  {
    "text": "Yeah, ChopChop is actually a tool that you can go and download and that will break, they'll break WEP. Yeah. So, that- that's a real attack that that you can- you can demonstrate.",
    "start": "1796210",
    "end": "1804205"
  },
  {
    "text": "For the other- the other message, for iMessage, um, uh, this has been demonstrated. The researchers actually were able to carry out the attack,",
    "start": "1804205",
    "end": "1812200"
  },
  {
    "text": "so they were able to decrypt messages that were sent by other parties. Uh, you're asking whether this was actually done in the wild to- to cause some harm?",
    "start": "1812200",
    "end": "1820684"
  },
  {
    "text": "We don't have any- we don't know- we don't have any evidence of that or not. I guess that was the first question. So, this can actually be made into a real attack,",
    "start": "1820685",
    "end": "1828030"
  },
  {
    "text": "um, uh, and the researchers actually did that, um, and then the second question you asked, could you actually solve this somehow avoid this attack at the server?",
    "start": "1828030",
    "end": "1837559"
  },
  {
    "text": "And the answer is, yes you can, um, uh, I would say it's better to get the crypto right than to",
    "start": "1837560",
    "end": "1843710"
  },
  {
    "text": "rely on the kind of ad hoc detections at the server. But yes, the server will- what the server will notice is all of a sudden,",
    "start": "1843710",
    "end": "1850014"
  },
  {
    "text": "there are lots of failed parity checks on it, yeah? So, that actually is good indi-.",
    "start": "1850015",
    "end": "1855400"
  },
  {
    "text": "So, all of a sudden this user A, the attacker, is sending messages that are causing lots of parity checks, yeah?",
    "start": "1855400",
    "end": "1861820"
  },
  {
    "text": "Maybe that's a way to detect there's maybe something fishy, uh, going on with- with, uh, with user A. But, you know, now you're getting into ad hoc methods, that's, uh,",
    "start": "1861820",
    "end": "1870510"
  },
  {
    "text": "maybe there's a way to do this at a low enough rate that's, uh, this would not be detected at the server.",
    "start": "1870510",
    "end": "1877000"
  },
  {
    "text": "I think we're all in agreement that it's better to get the crypto right than to rely on on- on- on other methods.",
    "start": "1877000",
    "end": "1882745"
  },
  {
    "text": "So, it's a great question. So, yeah thanks for- thanks for asking. Actually I'll put this up. It was- uh, yeah another question. Yes, please.",
    "start": "1882745",
    "end": "1889805"
  },
  {
    "text": "Okay so, even with uh, crypto in general if designed well, but it would still have implementation errors-",
    "start": "1889805",
    "end": "1895620"
  },
  {
    "text": "Absolutely. -such as Heartbleed. So, how can we from a security perspective or monitor perspective to detect these,",
    "start": "1895620",
    "end": "1902340"
  },
  {
    "text": "in advance rather than letting people know, oh, Heartbleed is happening. Absolutely. I'm really glad you asked that.",
    "start": "1902340",
    "end": "1908370"
  },
  {
    "text": "So- So, the fact that our- that we have our crypto, uh, uh, correct on paper,",
    "start": "1908370",
    "end": "1914409"
  },
  {
    "text": "doesn't mean that it's going to be implemented correctly. And the only way around that is basically software verification.",
    "start": "1914410",
    "end": "1919735"
  },
  {
    "text": "Yeah. So, there's a lot of work to use Kalk and actually that prove that crypto primitives are implemented correctly.",
    "start": "1919735",
    "end": "1925679"
  },
  {
    "text": "So, there are, you know, even forgets Heartbleed, and Heartbleed of course is an important event. But even worse like just building",
    "start": "1925680",
    "end": "1932510"
  },
  {
    "text": "a multi-precision multiplier turns out to be quite tricky. You're right, there's been mistakes in the multipliers.",
    "start": "1932510",
    "end": "1938115"
  },
  {
    "text": "So, you know, software verification using- using tools like Kalk and so on, can at least prove that these primitives work.",
    "start": "1938115",
    "end": "1946110"
  },
  {
    "text": "So, there's a lot of work on just bu- showing that like a SHA-256 implementation is provably correct. You know,",
    "start": "1946110",
    "end": "1951825"
  },
  {
    "text": "a multiplier is provably correct. And slowly working up the stack, there's, um,",
    "start": "1951825",
    "end": "1957080"
  },
  {
    "text": "there's a cryptographic library called uh, miTLS and the point of miTLS is that it's supposed to be code that actually has been verified.",
    "start": "1957080",
    "end": "1964365"
  },
  {
    "text": "Yeah. So, of course there's a penalty- there's a performance penalty with miTLS, but you know, slowly the gap between what can be",
    "start": "1964365",
    "end": "1971040"
  },
  {
    "text": "deployed and what can be proved is narrowing. But absolutely, you know, just designing the crypto correctly is only the beginning of the story.",
    "start": "1971040",
    "end": "1978760"
  },
  {
    "text": "Implement- implementing it correctly and not just that the- not just that the implementation doesn't have bugs,",
    "start": "1978760",
    "end": "1983800"
  },
  {
    "text": "the implementation should not have side channels and so on, you know, that- that's a- that's a story that's",
    "start": "1983800",
    "end": "1989280"
  },
  {
    "text": "going to keep us in business for many, many years to come. Probably forever. So, definitely this is why this area is so great. Yeah.",
    "start": "1989280",
    "end": "1995669"
  },
  {
    "text": "Where do you see, talk about education, where do you see the intersection [inaudible] the intersection of",
    "start": "1995670",
    "end": "2005460"
  },
  {
    "text": "upticks- upticks in attacks against physical, you know, glitch and voltage and other things where-",
    "start": "2005460",
    "end": "2010895"
  },
  {
    "text": "Yeah. -your assumption of, you know, your ad. Did my ad even happen, right, in this implementation.",
    "start": "2010895",
    "end": "2016019"
  },
  {
    "text": "Yeah, I was wondering how long- [OVERLAPPING]. The research in there. -yeah, yeah, I was wondering how long it's going to take before someone mentions Spectre and Meltdown.",
    "start": "2016020",
    "end": "2022075"
  },
  {
    "text": "Yeah, so, definitely hardware, you know, hardware issues like Spectre which is basically a side channel attack.",
    "start": "2022075",
    "end": "2027915"
  },
  {
    "text": "It's a- it's a big deal which we, you know, obviously struggling with since that- that attack was discovered.",
    "start": "2027915",
    "end": "2034025"
  },
  {
    "text": "That- that's a whole other conversation. So, I'm cutting into our break right now. So, we can have- I'll be happy to have the conversation,",
    "start": "2034025",
    "end": "2040600"
  },
  {
    "text": "but let's do that offline. Yeah. Hi. Yeah, let's just take one more question.",
    "start": "2040600",
    "end": "2046070"
  },
  {
    "text": "Hi. Yeah, go ahead. You talking about migration implications- Yes.",
    "start": "2046470",
    "end": "2051590"
  },
  {
    "text": "-in terms of wrong implementation? So, do you have any recommendation in your book or as a guidelines if one has to change from one crypto to another.",
    "start": "2051590",
    "end": "2060155"
  },
  {
    "text": "Ah, oh I see. That's a really- really good question. What's the right way to do it? You know, so, people have tried to do this for password hashing mechanisms,",
    "start": "2060155",
    "end": "2067480"
  },
  {
    "text": "like strengthen the password hashing mechanism. And that- there is actually not so- not so difficult by basically layering primitives one on top of the other.",
    "start": "2067480",
    "end": "2075919"
  },
  {
    "text": "You just take that old hash and hash it using a better hash again. Here, I imagine in principle,",
    "start": "2075920",
    "end": "2082799"
  },
  {
    "text": "what you could do, you know and I guess I don't have it here, in the RNCryptor example, what you could do is,",
    "start": "2082800",
    "end": "2088540"
  },
  {
    "text": "you could take the old ciphertext treat it as if it's, you know, it's gonna die ciphertext. It's not very hard to break.",
    "start": "2088540",
    "end": "2094065"
  },
  {
    "text": "So, treat it as if it's plaintext, and just re-encrypt the ciphertext again. Yeah. And then when you want to decrypt you would- you would decrypt twice.",
    "start": "2094065",
    "end": "2102234"
  },
  {
    "text": "So, you know there is a performance cost to that, but that is a very natural migration path for strengthening weak deployments.",
    "start": "2102235",
    "end": "2108395"
  },
  {
    "text": "When it comes to things like TLS, you know, when there's a issue with TLS, it takes, you know,",
    "start": "2108395",
    "end": "2113590"
  },
  {
    "text": "how, how long did 1.3 take to uh, get standardized like, uh, do remember it's like an eight- eight- nine-year, eight-nine year process.",
    "start": "2113590",
    "end": "2120345"
  },
  {
    "text": "It's a very long time to standardize kind of protocols that both sides need to be updated.",
    "start": "2120345",
    "end": "2125390"
  },
  {
    "text": "So, we do need to get those things right the first time. Yeah. Then, it's creating a loophole in parallel to that because you",
    "start": "2125390",
    "end": "2133650"
  },
  {
    "text": "are- have- you are going to have both the decryption and encryption mechanism in place build,",
    "start": "2133650",
    "end": "2139089"
  },
  {
    "text": "uh, entire textures, uh- Migrated. Migrated. That's right- that's right. Yeah. There is no go away for that?",
    "start": "2139090",
    "end": "2145690"
  },
  {
    "text": "[NOISE] Let's discuss this offline. That's a- that's more of a software engineering, uh, question.",
    "start": "2145690",
    "end": "2151940"
  },
  {
    "text": "So, uh, excellent. Great, so thanks a lot, uh, yup. So, thanks, uh, and then, uh. [NOISE] [APPLAUSE]",
    "start": "2151940",
    "end": "2161160"
  }
]